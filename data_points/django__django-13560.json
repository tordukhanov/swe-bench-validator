{
  "repo": "django/django",
  "instance_id": "django__django-13560",
  "base_commit": "0eee5c1b9c2e306aa2c2807daf146ee88676bc97",
  "patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -305,7 +305,7 @@ def collect(self, objs, source=None, nullable=False, collect_related=True,\n                     model.__name__,\n                     ', '.join(protected_objects),\n                 ),\n-                chain.from_iterable(protected_objects.values()),\n+                set(chain.from_iterable(protected_objects.values())),\n             )\n         for related_model, related_fields in model_fast_deletes.items():\n             batches = self.get_del_batches(new_objs, related_fields)\n@@ -340,7 +340,7 @@ def collect(self, objs, source=None, nullable=False, collect_related=True,\n                             model.__name__,\n                             ', '.join(restricted_objects),\n                         ),\n-                        chain.from_iterable(restricted_objects.values()),\n+                        set(chain.from_iterable(restricted_objects.values())),\n                     )\n \n     def related_objects(self, related_model, related_fields, objs):\n",
  "test_patch": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -75,19 +75,21 @@ def test_protect(self):\n             \"Cannot delete some instances of model 'R' because they are \"\n             \"referenced through protected foreign keys: 'A.protect'.\"\n         )\n-        with self.assertRaisesMessage(ProtectedError, msg):\n+        with self.assertRaisesMessage(ProtectedError, msg) as cm:\n             a.protect.delete()\n+        self.assertEqual(cm.exception.protected_objects, {a})\n \n     def test_protect_multiple(self):\n         a = create_a('protect')\n-        B.objects.create(protect=a.protect)\n+        b = B.objects.create(protect=a.protect)\n         msg = (\n             \"Cannot delete some instances of model 'R' because they are \"\n             \"referenced through protected foreign keys: 'A.protect', \"\n             \"'B.protect'.\"\n         )\n-        with self.assertRaisesMessage(ProtectedError, msg):\n+        with self.assertRaisesMessage(ProtectedError, msg) as cm:\n             a.protect.delete()\n+        self.assertEqual(cm.exception.protected_objects, {a, b})\n \n     def test_protect_path(self):\n         a = create_a('protect')\n@@ -97,8 +99,9 @@ def test_protect_path(self):\n             \"Cannot delete some instances of model 'P' because they are \"\n             \"referenced through protected foreign keys: 'R.p'.\"\n         )\n-        with self.assertRaisesMessage(ProtectedError, msg):\n+        with self.assertRaisesMessage(ProtectedError, msg) as cm:\n             a.protect.p.delete()\n+        self.assertEqual(cm.exception.protected_objects, {a})\n \n     def test_do_nothing(self):\n         # Testing DO_NOTHING is a bit harder: It would raise IntegrityError for a normal model,\n@@ -176,19 +179,21 @@ def test_restrict(self):\n             \"Cannot delete some instances of model 'R' because they are \"\n             \"referenced through restricted foreign keys: 'A.restrict'.\"\n         )\n-        with self.assertRaisesMessage(RestrictedError, msg):\n+        with self.assertRaisesMessage(RestrictedError, msg) as cm:\n             a.restrict.delete()\n+        self.assertEqual(cm.exception.restricted_objects, {a})\n \n     def test_restrict_multiple(self):\n         a = create_a('restrict')\n-        B3.objects.create(restrict=a.restrict)\n+        b3 = B3.objects.create(restrict=a.restrict)\n         msg = (\n             \"Cannot delete some instances of model 'R' because they are \"\n             \"referenced through restricted foreign keys: 'A.restrict', \"\n             \"'B3.restrict'.\"\n         )\n-        with self.assertRaisesMessage(RestrictedError, msg):\n+        with self.assertRaisesMessage(RestrictedError, msg) as cm:\n             a.restrict.delete()\n+        self.assertEqual(cm.exception.restricted_objects, {a, b3})\n \n     def test_restrict_path_cascade_indirect(self):\n         a = create_a('restrict')\n@@ -198,8 +203,9 @@ def test_restrict_path_cascade_indirect(self):\n             \"Cannot delete some instances of model 'P' because they are \"\n             \"referenced through restricted foreign keys: 'A.restrict'.\"\n         )\n-        with self.assertRaisesMessage(RestrictedError, msg):\n+        with self.assertRaisesMessage(RestrictedError, msg) as cm:\n             a.restrict.p.delete()\n+        self.assertEqual(cm.exception.restricted_objects, {a})\n         # Object referenced also with CASCADE relationship can be deleted.\n         a.cascade.p = a.restrict.p\n         a.cascade.save()\n@@ -221,13 +227,14 @@ def test_restrict_path_cascade_indirect_diamond(self):\n         delete_top = DeleteTop.objects.create()\n         b1 = B1.objects.create(delete_top=delete_top)\n         b2 = B2.objects.create(delete_top=delete_top)\n-        DeleteBottom.objects.create(b1=b1, b2=b2)\n+        delete_bottom = DeleteBottom.objects.create(b1=b1, b2=b2)\n         msg = (\n             \"Cannot delete some instances of model 'B1' because they are \"\n             \"referenced through restricted foreign keys: 'DeleteBottom.b1'.\"\n         )\n-        with self.assertRaisesMessage(RestrictedError, msg):\n+        with self.assertRaisesMessage(RestrictedError, msg) as cm:\n             b1.delete()\n+        self.assertEqual(cm.exception.restricted_objects, {delete_bottom})\n         self.assertTrue(DeleteTop.objects.exists())\n         self.assertTrue(B1.objects.exists())\n         self.assertTrue(B2.objects.exists())\n@@ -243,14 +250,18 @@ def test_restrict_gfk_no_fast_delete(self):\n         delete_top = DeleteTop.objects.create()\n         generic_b1 = GenericB1.objects.create(generic_delete_top=delete_top)\n         generic_b2 = GenericB2.objects.create(generic_delete_top=delete_top)\n-        GenericDeleteBottom.objects.create(generic_b1=generic_b1, generic_b2=generic_b2)\n+        generic_delete_bottom = GenericDeleteBottom.objects.create(\n+            generic_b1=generic_b1,\n+            generic_b2=generic_b2,\n+        )\n         msg = (\n             \"Cannot delete some instances of model 'GenericB1' because they \"\n             \"are referenced through restricted foreign keys: \"\n             \"'GenericDeleteBottom.generic_b1'.\"\n         )\n-        with self.assertRaisesMessage(RestrictedError, msg):\n+        with self.assertRaisesMessage(RestrictedError, msg) as cm:\n             generic_b1.delete()\n+        self.assertEqual(cm.exception.restricted_objects, {generic_delete_bottom})\n         self.assertTrue(DeleteTop.objects.exists())\n         self.assertTrue(GenericB1.objects.exists())\n         self.assertTrue(GenericB2.objects.exists())\n",
  "problem_statement": "ProtectedError/RestrictedError raised from Collector.collect contains iterators.\nDescription\n\t \n\t\t(last modified by Kwist)\n\t \n#27852\n(\"Cannot delete some instances of model 'A' because they are referenced through protected foreign keys: 'A.protect', 'B.protect'.\", <itertools.chain object at 0x7f96b5cb6c40>)\nAs a result, the repr of exception in Sentry is not informative.\n",
  "hints_text": "Patch\nThanks for the report. Regression in 4ca5c565f4dc9e97845036e86416abc5cfde766c and ab3cbd8b9a315911248227208630a020cedca08f.",
  "created_at": "2020-10-18T21:04:46Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_protect (delete.tests.OnDeleteTests)\", \"test_protect_multiple (delete.tests.OnDeleteTests)\", \"test_protect_path (delete.tests.OnDeleteTests)\", \"test_restrict (delete.tests.OnDeleteTests)\", \"test_restrict_gfk_no_fast_delete (delete.tests.OnDeleteTests)\", \"test_restrict_multiple (delete.tests.OnDeleteTests)\", \"test_restrict_path_cascade_indirect (delete.tests.OnDeleteTests)\", \"test_restrict_path_cascade_indirect_diamond (delete.tests.OnDeleteTests)\"]",
  "PASS_TO_PASS": "[\"test_fast_delete_aggregation (delete.tests.FastDeleteTests)\", \"test_fast_delete_all (delete.tests.FastDeleteTests)\", \"test_fast_delete_combined_relationships (delete.tests.FastDeleteTests)\", \"test_fast_delete_empty_no_update_can_self_select (delete.tests.FastDeleteTests)\", \"test_fast_delete_fk (delete.tests.FastDeleteTests)\", \"test_fast_delete_inheritance (delete.tests.FastDeleteTests)\", \"test_fast_delete_instance_set_pk_none (delete.tests.FastDeleteTests)\", \"test_fast_delete_joined_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_large_batch (delete.tests.FastDeleteTests)\", \"test_fast_delete_m2m (delete.tests.FastDeleteTests)\", \"test_fast_delete_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_revm2m (delete.tests.FastDeleteTests)\", \"test_auto (delete.tests.OnDeleteTests)\", \"test_auto_nullable (delete.tests.OnDeleteTests)\", \"test_cascade (delete.tests.OnDeleteTests)\", \"test_cascade_from_child (delete.tests.OnDeleteTests)\", \"test_cascade_from_parent (delete.tests.OnDeleteTests)\", \"test_cascade_nullable (delete.tests.OnDeleteTests)\", \"test_do_nothing (delete.tests.OnDeleteTests)\", \"test_do_nothing_qscount (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_down (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_up (delete.tests.OnDeleteTests)\", \"test_non_callable (delete.tests.OnDeleteTests)\", \"test_o2o_setnull (delete.tests.OnDeleteTests)\", \"test_restrict_path_cascade_direct (delete.tests.OnDeleteTests)\", \"test_setdefault (delete.tests.OnDeleteTests)\", \"test_setdefault_none (delete.tests.OnDeleteTests)\", \"test_setnull (delete.tests.OnDeleteTests)\", \"test_setnull_from_child (delete.tests.OnDeleteTests)\", \"test_setnull_from_parent (delete.tests.OnDeleteTests)\", \"test_setvalue (delete.tests.OnDeleteTests)\", \"test_bulk (delete.tests.DeletionTests)\", \"test_can_defer_constraint_checks (delete.tests.DeletionTests)\", \"test_delete_with_keeping_parents (delete.tests.DeletionTests)\", \"test_delete_with_keeping_parents_relationships (delete.tests.DeletionTests)\", \"test_deletion_order (delete.tests.DeletionTests)\", \"test_hidden_related (delete.tests.DeletionTests)\", \"test_instance_update (delete.tests.DeletionTests)\", \"test_large_delete (delete.tests.DeletionTests)\", \"test_large_delete_related (delete.tests.DeletionTests)\", \"test_m2m (delete.tests.DeletionTests)\", \"test_model_delete_returns_num_rows (delete.tests.DeletionTests)\", \"test_only_referenced_fields_selected (delete.tests.DeletionTests)\", \"test_proxied_model_duplicate_queries (delete.tests.DeletionTests)\", \"test_queryset_delete_returns_num_rows (delete.tests.DeletionTests)\", \"test_relational_post_delete_signals_happen_before_parent_object (delete.tests.DeletionTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.662011",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}