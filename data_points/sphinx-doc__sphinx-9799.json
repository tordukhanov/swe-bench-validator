{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9799",
  "base_commit": "2b5c55e45a0fc4e2197a9b8edb482b77c2fa3f85",
  "patch": "diff --git a/sphinx/ext/autodoc/preserve_defaults.py b/sphinx/ext/autodoc/preserve_defaults.py\n--- a/sphinx/ext/autodoc/preserve_defaults.py\n+++ b/sphinx/ext/autodoc/preserve_defaults.py\n@@ -11,7 +11,8 @@\n \n import ast\n import inspect\n-from typing import Any, Dict\n+import sys\n+from typing import Any, Dict, List, Optional\n \n from sphinx.application import Sphinx\n from sphinx.locale import __\n@@ -49,11 +50,32 @@ def get_function_def(obj: Any) -> ast.FunctionDef:\n         return None\n \n \n+def get_default_value(lines: List[str], position: ast.AST) -> Optional[str]:\n+    try:\n+        if sys.version_info < (3, 8):  # only for py38+\n+            return None\n+        elif position.lineno == position.end_lineno:\n+            line = lines[position.lineno - 1]\n+            return line[position.col_offset:position.end_col_offset]\n+        else:\n+            # multiline value is not supported now\n+            return None\n+    except (AttributeError, IndexError):\n+        return None\n+\n+\n def update_defvalue(app: Sphinx, obj: Any, bound_method: bool) -> None:\n     \"\"\"Update defvalue info of *obj* using type_comments.\"\"\"\n     if not app.config.autodoc_preserve_defaults:\n         return\n \n+    try:\n+        lines = inspect.getsource(obj).splitlines()\n+        if lines[0].startswith((' ', r'\\t')):\n+            lines.insert(0, '')  # insert a dummy line to follow what get_function_def() does.\n+    except OSError:\n+        lines = []\n+\n     try:\n         function = get_function_def(obj)\n         if function.args.defaults or function.args.kw_defaults:\n@@ -64,11 +86,17 @@ def update_defvalue(app: Sphinx, obj: Any, bound_method: bool) -> None:\n             for i, param in enumerate(parameters):\n                 if param.default is not param.empty:\n                     if param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):\n-                        value = DefaultValue(ast_unparse(defaults.pop(0)))  # type: ignore\n-                        parameters[i] = param.replace(default=value)\n+                        default = defaults.pop(0)\n+                        value = get_default_value(lines, default)\n+                        if value is None:\n+                            value = ast_unparse(default)  # type: ignore\n+                        parameters[i] = param.replace(default=DefaultValue(value))\n                     else:\n-                        value = DefaultValue(ast_unparse(kw_defaults.pop(0)))  # type: ignore\n-                        parameters[i] = param.replace(default=value)\n+                        default = kw_defaults.pop(0)\n+                        value = get_default_value(lines, default)\n+                        if value is None:\n+                            value = ast_unparse(default)  # type: ignore\n+                        parameters[i] = param.replace(default=DefaultValue(value))\n             sig = sig.replace(parameters=parameters)\n             obj.__signature__ = sig\n     except (AttributeError, TypeError):\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/preserve_defaults.py b/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n--- a/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n+++ b/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n@@ -7,7 +7,8 @@\n \n def foo(name: str = CONSTANT,\n         sentinel: Any = SENTINEL,\n-        now: datetime = datetime.now()) -> None:\n+        now: datetime = datetime.now(),\n+        color: int = 0xFFFFFF) -> None:\n     \"\"\"docstring\"\"\"\n \n \n@@ -15,5 +16,5 @@ class Class:\n     \"\"\"docstring\"\"\"\n \n     def meth(self, name: str = CONSTANT, sentinel: Any = SENTINEL,\n-             now: datetime = datetime.now()) -> None:\n+             now: datetime = datetime.now(), color: int = 0xFFFFFF) -> None:\n         \"\"\"docstring\"\"\"\ndiff --git a/tests/test_ext_autodoc_preserve_defaults.py b/tests/test_ext_autodoc_preserve_defaults.py\n--- a/tests/test_ext_autodoc_preserve_defaults.py\n+++ b/tests/test_ext_autodoc_preserve_defaults.py\n@@ -8,6 +8,8 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import sys\n+\n import pytest\n \n from .test_ext_autodoc import do_autodoc\n@@ -16,6 +18,11 @@\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_preserve_defaults': True})\n def test_preserve_defaults(app):\n+    if sys.version_info < (3, 8):\n+        color = \"16777215\"\n+    else:\n+        color = \"0xFFFFFF\"\n+\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.preserve_defaults', options)\n     assert list(actual) == [\n@@ -30,14 +37,14 @@ def test_preserve_defaults(app):\n         '',\n         '',\n         '   .. py:method:: Class.meth(name: str = CONSTANT, sentinel: Any = SENTINEL, '\n-        'now: datetime.datetime = datetime.now()) -> None',\n+        'now: datetime.datetime = datetime.now(), color: int = %s) -> None' % color,\n         '      :module: target.preserve_defaults',\n         '',\n         '      docstring',\n         '',\n         '',\n         '.. py:function:: foo(name: str = CONSTANT, sentinel: Any = SENTINEL, now: '\n-        'datetime.datetime = datetime.now()) -> None',\n+        'datetime.datetime = datetime.now(), color: int = %s) -> None' % color,\n         '   :module: target.preserve_defaults',\n         '',\n         '   docstring',\n",
  "problem_statement": "Re-opening #8255: hexadecimal default arguments are changed to decimal\n### Describe the bug\n\nI am experiencing the exact same problem as described in #8255: hexadecimal default arguments are changed to decimal.\n\n### How to Reproduce\n\nAutodoc the following function:\r\n\r\n```python3\r\ndef some_function(\r\n        param_a,\r\n        param_b,\r\n        *,  # enforce keyword arguments from this point onwards\r\n        background_colour: int = 0xFFFFFFFF,\r\n        # ... other optional parameters\r\n    ):\r\n    pass\r\n```\r\n\r\nHTML result looks like this\r\n```\r\nbackground_colour: int = 4294967295\r\n```\n\n### Expected behavior\n\nHexadecimal defaults should not be converted to decimal, or at least there should be an option to enforce this behaviour.\n\n### Your project\n\nI'm afraid this is private\n\n### Screenshots\n\n_No response_\n\n### OS\n\nLinux Ubuntu 20.04\n\n### Python version\n\n3.8.10\n\n### Sphinx version\n\n4.2.0\n\n### Sphinx extensions\n\nautodoc, intersphinx, napoleon\n\n### Extra tools\n\nChromium 94\n\n### Additional context\n\n_No response_\n",
  "hints_text": "Does `autodoc_preserve_defaults` help you?\r\nhttps://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#confval-autodoc_preserve_defaults\nI had already added\r\n```python3\r\nautodoc_preserve_defaults = True\r\n```\r\nto my `conf.py` file but it didn't change the output. So no, it doesn't help.",
  "created_at": "2021-10-30T15:26:46Z",
  "version": "4.3",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_preserve_defaults.py::test_preserve_defaults\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "6c6cc8a6f50b18331cb818160d168d7bb9c03e55",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.069704",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}