{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-9304",
  "base_commit": "e161700c6f8948b820073a72f09a71e1dda89ccc",
  "patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -287,7 +287,7 @@ def fit_transform(self, X, y=None, **fit_params):\n             return last_step.fit(Xt, y, **fit_params).transform(Xt)\n \n     @if_delegate_has_method(delegate='_final_estimator')\n-    def predict(self, X):\n+    def predict(self, X, **predict_params):\n         \"\"\"Apply transforms to the data, and predict with the final estimator\n \n         Parameters\n@@ -296,6 +296,14 @@ def predict(self, X):\n             Data to predict on. Must fulfill input requirements of first step\n             of the pipeline.\n \n+        **predict_params : dict of string -> object\n+            Parameters to the ``predict`` called at the end of all\n+            transformations in the pipeline. Note that while this may be\n+            used to return uncertainties from some models with return_std\n+            or return_cov, uncertainties that are generated by the\n+            transformations in the pipeline are not propagated to the\n+            final estimator.\n+\n         Returns\n         -------\n         y_pred : array-like\n@@ -304,7 +312,7 @@ def predict(self, X):\n         for name, transform in self.steps[:-1]:\n             if transform is not None:\n                 Xt = transform.transform(Xt)\n-        return self.steps[-1][-1].predict(Xt)\n+        return self.steps[-1][-1].predict(Xt, **predict_params)\n \n     @if_delegate_has_method(delegate='_final_estimator')\n     def fit_predict(self, X, y=None, **fit_params):\n",
  "test_patch": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -144,6 +144,17 @@ def fit(self, X, y):\n         return self\n \n \n+class DummyEstimatorParams(BaseEstimator):\n+    \"\"\"Mock classifier that takes params on predict\"\"\"\n+\n+    def fit(self, X, y):\n+        return self\n+\n+    def predict(self, X, got_attribute=False):\n+        self.got_attribute = got_attribute\n+        return self\n+\n+\n def test_pipeline_init():\n     # Test the various init parameters of the pipeline.\n     assert_raises(TypeError, Pipeline)\n@@ -398,6 +409,16 @@ def test_fit_predict_with_intermediate_fit_params():\n     assert_false('should_succeed' in pipe.named_steps['transf'].fit_params)\n \n \n+def test_predict_with_predict_params():\n+    # tests that Pipeline passes predict_params to the final estimator\n+    # when predict is invoked\n+    pipe = Pipeline([('transf', Transf()), ('clf', DummyEstimatorParams())])\n+    pipe.fit(None, None)\n+    pipe.predict(X=None, got_attribute=True)\n+\n+    assert_true(pipe.named_steps['clf'].got_attribute)\n+\n+\n def test_feature_union():\n     # basic sanity check for feature union\n     iris = load_iris()\n",
  "problem_statement": "Bug: the predict method of Pipeline object does not use the exact predict method of final step estimator\nI am trying to use Pipeline with a customized final step estimator. This final estimator predict method can output std when using return_std=True. \r\nBut the predict method of Pipeline does not allow return_std option, gives error on scikit-learn/sklearn/utils/metaestimators.py Line 54.\r\n\r\nIn the user guide:user guide http://scikit-learn.org/stable/modules/pipeline.html\r\nsays the following, but the predict method in Pipeline is not the same as that in final estimator \r\n\"\"\"\r\n4.1.1.2. Notes\r\n\r\nCalling fit on the pipeline is the same as calling fit on each estimator in turn, transform the input and pass it on to the next step. **_The pipeline has all the methods that the last estimator in the pipeline has,_** i.e. if the last estimator is a classifier, the Pipeline can be used as a classifier. If the last estimator is a transformer, again, so is the pipeline.\r\n\"\"\"\n",
  "hints_text": "Yes, I suppose this is a valid complaint. Additional args should probably be forwarded on prediction methods in Pipeline.",
  "created_at": "2017-07-09T03:54:27Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_pipeline.py::test_predict_with_predict_params\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_pipeline.py::test_pipeline_init\", \"sklearn/tests/test_pipeline.py::test_pipeline_init_tuple\", \"sklearn/tests/test_pipeline.py::test_pipeline_methods_anova\", \"sklearn/tests/test_pipeline.py::test_pipeline_fit_params\", \"sklearn/tests/test_pipeline.py::test_pipeline_sample_weight_supported\", \"sklearn/tests/test_pipeline.py::test_pipeline_sample_weight_unsupported\", \"sklearn/tests/test_pipeline.py::test_pipeline_raise_set_params_error\", \"sklearn/tests/test_pipeline.py::test_pipeline_methods_pca_svm\", \"sklearn/tests/test_pipeline.py::test_pipeline_methods_preprocessing_svm\", \"sklearn/tests/test_pipeline.py::test_fit_predict_on_pipeline\", \"sklearn/tests/test_pipeline.py::test_fit_predict_on_pipeline_without_fit_predict\", \"sklearn/tests/test_pipeline.py::test_fit_predict_with_intermediate_fit_params\", \"sklearn/tests/test_pipeline.py::test_feature_union\", \"sklearn/tests/test_pipeline.py::test_make_union\", \"sklearn/tests/test_pipeline.py::test_make_union_kwargs\", \"sklearn/tests/test_pipeline.py::test_pipeline_transform\", \"sklearn/tests/test_pipeline.py::test_pipeline_fit_transform\", \"sklearn/tests/test_pipeline.py::test_set_pipeline_steps\", \"sklearn/tests/test_pipeline.py::test_pipeline_named_steps\", \"sklearn/tests/test_pipeline.py::test_set_pipeline_step_none\", \"sklearn/tests/test_pipeline.py::test_pipeline_ducktyping\", \"sklearn/tests/test_pipeline.py::test_make_pipeline\", \"sklearn/tests/test_pipeline.py::test_feature_union_weights\", \"sklearn/tests/test_pipeline.py::test_feature_union_parallel\", \"sklearn/tests/test_pipeline.py::test_feature_union_feature_names\", \"sklearn/tests/test_pipeline.py::test_classes_property\", \"sklearn/tests/test_pipeline.py::test_set_feature_union_steps\", \"sklearn/tests/test_pipeline.py::test_set_feature_union_step_none\", \"sklearn/tests/test_pipeline.py::test_step_name_validation\", \"sklearn/tests/test_pipeline.py::test_set_params_nested_pipeline\", \"sklearn/tests/test_pipeline.py::test_pipeline_wrong_memory\", \"sklearn/tests/test_pipeline.py::test_pipeline_with_cache_attribute\", \"sklearn/tests/test_pipeline.py::test_pipeline_memory\", \"sklearn/tests/test_pipeline.py::test_make_pipeline_memory\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.028795",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}