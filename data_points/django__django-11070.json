{
  "repo": "django/django",
  "instance_id": "django__django-11070",
  "base_commit": "c498f088c584ec3aff97409fdc11b39b28240de9",
  "patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -78,12 +78,12 @@ class UserCreationForm(forms.ModelForm):\n     password1 = forms.CharField(\n         label=_(\"Password\"),\n         strip=False,\n-        widget=forms.PasswordInput,\n+        widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),\n         help_text=password_validation.password_validators_help_text_html(),\n     )\n     password2 = forms.CharField(\n         label=_(\"Password confirmation\"),\n-        widget=forms.PasswordInput,\n+        widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),\n         strip=False,\n         help_text=_(\"Enter the same password as before, for verification.\"),\n     )\n@@ -96,7 +96,10 @@ class Meta:\n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n         if self._meta.model.USERNAME_FIELD in self.fields:\n-            self.fields[self._meta.model.USERNAME_FIELD].widget.attrs.update({'autofocus': True})\n+            self.fields[self._meta.model.USERNAME_FIELD].widget.attrs.update({\n+                'autocomplete': 'username',\n+                'autofocus': True,\n+            })\n \n     def clean_password2(self):\n         password1 = self.cleaned_data.get(\"password1\")\n@@ -163,11 +166,11 @@ class AuthenticationForm(forms.Form):\n     Base class for authenticating users. Extend this to get a form that accepts\n     username/password logins.\n     \"\"\"\n-    username = UsernameField(widget=forms.TextInput(attrs={'autofocus': True}))\n+    username = UsernameField(widget=forms.TextInput(attrs={'autocomplete': 'username', 'autofocus': True}))\n     password = forms.CharField(\n         label=_(\"Password\"),\n         strip=False,\n-        widget=forms.PasswordInput,\n+        widget=forms.PasswordInput(attrs={'autocomplete': 'current-password'}),\n     )\n \n     error_messages = {\n@@ -235,7 +238,11 @@ def get_invalid_login_error(self):\n \n \n class PasswordResetForm(forms.Form):\n-    email = forms.EmailField(label=_(\"Email\"), max_length=254)\n+    email = forms.EmailField(\n+        label=_(\"Email\"),\n+        max_length=254,\n+        widget=forms.EmailInput(attrs={'autocomplete': 'email'})\n+    )\n \n     def send_mail(self, subject_template_name, email_template_name,\n                   context, from_email, to_email, html_email_template_name=None):\n@@ -311,14 +318,14 @@ class SetPasswordForm(forms.Form):\n     }\n     new_password1 = forms.CharField(\n         label=_(\"New password\"),\n-        widget=forms.PasswordInput,\n+        widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),\n         strip=False,\n         help_text=password_validation.password_validators_help_text_html(),\n     )\n     new_password2 = forms.CharField(\n         label=_(\"New password confirmation\"),\n         strip=False,\n-        widget=forms.PasswordInput,\n+        widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),\n     )\n \n     def __init__(self, user, *args, **kwargs):\n@@ -357,7 +364,7 @@ class PasswordChangeForm(SetPasswordForm):\n     old_password = forms.CharField(\n         label=_(\"Old password\"),\n         strip=False,\n-        widget=forms.PasswordInput(attrs={'autofocus': True}),\n+        widget=forms.PasswordInput(attrs={'autocomplete': 'current-password', 'autofocus': True}),\n     )\n \n     field_order = ['old_password', 'new_password1', 'new_password2']\n@@ -385,13 +392,13 @@ class AdminPasswordChangeForm(forms.Form):\n     required_css_class = 'required'\n     password1 = forms.CharField(\n         label=_(\"Password\"),\n-        widget=forms.PasswordInput(attrs={'autofocus': True}),\n+        widget=forms.PasswordInput(attrs={'autocomplete': 'new-password', 'autofocus': True}),\n         strip=False,\n         help_text=password_validation.password_validators_help_text_html(),\n     )\n     password2 = forms.CharField(\n         label=_(\"Password (again)\"),\n-        widget=forms.PasswordInput,\n+        widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),\n         strip=False,\n         help_text=_(\"Enter the same password as before, for verification.\"),\n     )\n",
  "test_patch": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -265,6 +265,17 @@ def test_username_field_autocapitalize_none(self):\n         form = UserCreationForm()\n         self.assertEqual(form.fields['username'].widget.attrs.get('autocapitalize'), 'none')\n \n+    def test_html_autocomplete_attributes(self):\n+        form = UserCreationForm()\n+        tests = (\n+            ('username', 'username'),\n+            ('password1', 'new-password'),\n+            ('password2', 'new-password'),\n+        )\n+        for field_name, autocomplete in tests:\n+            with self.subTest(field_name=field_name, autocomplete=autocomplete):\n+                self.assertEqual(form.fields[field_name].widget.attrs['autocomplete'], autocomplete)\n+\n \n # To verify that the login form rejects inactive users, use an authentication\n # backend that allows them.\n@@ -492,6 +503,16 @@ def test_get_invalid_login_error(self):\n         self.assertEqual(error.code, 'invalid_login')\n         self.assertEqual(error.params, {'username': 'username'})\n \n+    def test_html_autocomplete_attributes(self):\n+        form = AuthenticationForm()\n+        tests = (\n+            ('username', 'username'),\n+            ('password', 'current-password'),\n+        )\n+        for field_name, autocomplete in tests:\n+            with self.subTest(field_name=field_name, autocomplete=autocomplete):\n+                self.assertEqual(form.fields[field_name].widget.attrs['autocomplete'], autocomplete)\n+\n \n class SetPasswordFormTest(TestDataMixin, TestCase):\n \n@@ -572,6 +593,16 @@ def test_help_text_translation(self):\n             for french_text in french_help_texts:\n                 self.assertIn(french_text, html)\n \n+    def test_html_autocomplete_attributes(self):\n+        form = SetPasswordForm(self.u1)\n+        tests = (\n+            ('new_password1', 'new-password'),\n+            ('new_password2', 'new-password'),\n+        )\n+        for field_name, autocomplete in tests:\n+            with self.subTest(field_name=field_name, autocomplete=autocomplete):\n+                self.assertEqual(form.fields[field_name].widget.attrs['autocomplete'], autocomplete)\n+\n \n class PasswordChangeFormTest(TestDataMixin, TestCase):\n \n@@ -633,6 +664,11 @@ def test_password_whitespace_not_stripped(self):\n         self.assertEqual(form.cleaned_data['new_password1'], data['new_password1'])\n         self.assertEqual(form.cleaned_data['new_password2'], data['new_password2'])\n \n+    def test_html_autocomplete_attributes(self):\n+        user = User.objects.get(username='testclient')\n+        form = PasswordChangeForm(user)\n+        self.assertEqual(form.fields['old_password'].widget.attrs['autocomplete'], 'current-password')\n+\n \n class UserChangeFormTest(TestDataMixin, TestCase):\n \n@@ -916,6 +952,10 @@ def test_custom_email_field(self):\n         self.assertEqual(len(mail.outbox), 1)\n         self.assertEqual(mail.outbox[0].to, [email])\n \n+    def test_html_autocomplete_attributes(self):\n+        form = PasswordResetForm()\n+        self.assertEqual(form.fields['email'].widget.attrs['autocomplete'], 'email')\n+\n \n class ReadOnlyPasswordHashTest(SimpleTestCase):\n \n@@ -997,3 +1037,14 @@ def test_one_password(self):\n         form2 = AdminPasswordChangeForm(user, {'password1': 'test', 'password2': ''})\n         self.assertEqual(form2.errors['password2'], required_error)\n         self.assertNotIn('password1', form2.errors)\n+\n+    def test_html_autocomplete_attributes(self):\n+        user = User.objects.get(username='testclient')\n+        form = AdminPasswordChangeForm(user)\n+        tests = (\n+            ('password1', 'new-password'),\n+            ('password2', 'new-password'),\n+        )\n+        for field_name, autocomplete in tests:\n+            with self.subTest(field_name=field_name, autocomplete=autocomplete):\n+                self.assertEqual(form.fields[field_name].widget.attrs['autocomplete'], autocomplete)\n",
  "problem_statement": "Add autocomplete attribute to contrib.auth fields\nDescription\n\t \n\t\t(last modified by CHI Cheng)\n\t \nAdd autocomplete=username/email/current-password/new-password to contrib.auth builtin forms.\nPull request: ​https://github.com/django/django/pull/9921\nThe most useful one is autocomplete=new-password, which prevents browsers prefill with current password, Chrome will also suggest a random strong password for users who turned on account sync.\nRelated docs:\n​https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n​https://www.chromium.org/developers/design-documents/form-styles-that-chromium-understands\n​https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion#The_autocomplete_attribute_and_login_fields\n",
  "hints_text": "This seems OK/good in theory. We're a bit ahead of the curve in terms of current browser support so there's a question about when (and whether) this gets adopted. ​PR has failures that need addressing.\nHi, what is the status of this pull request? I just wanted to open the same pull request and then I found this ticket...\nAfter months of inactivity, feel free to take over the patch (crediting the original author), and polish it so as it can get in the review queue again.",
  "created_at": "2019-03-10T10:05:36Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_html_autocomplete_attributes (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_missing_passwords (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.UserCreationFormTest)\", \"test_invalid_data (auth_tests.test_forms.UserCreationFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.SetPasswordFormTest)\", \"test_password_verification (auth_tests.test_forms.SetPasswordFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.AuthenticationFormTest)\", \"test_inactive_user (auth_tests.test_forms.AuthenticationFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.PasswordResetFormTest)\"]",
  "PASS_TO_PASS": "[\"test_non_matching_passwords (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_one_password (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_success (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_field_order (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_incorrect_password (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_password_verification (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_success (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_both_passwords (auth_tests.test_forms.UserCreationFormTest)\", \"test_custom_form (auth_tests.test_forms.UserCreationFormTest)\", \"test_custom_form_hidden_username_field (auth_tests.test_forms.UserCreationFormTest)\", \"test_custom_form_with_different_username_field (auth_tests.test_forms.UserCreationFormTest)\", \"test_duplicate_normalized_unicode (auth_tests.test_forms.UserCreationFormTest)\", \"test_normalize_username (auth_tests.test_forms.UserCreationFormTest)\", \"test_password_help_text (auth_tests.test_forms.UserCreationFormTest)\", \"test_password_verification (auth_tests.test_forms.UserCreationFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.UserCreationFormTest)\", \"test_success (auth_tests.test_forms.UserCreationFormTest)\", \"test_unicode_username (auth_tests.test_forms.UserCreationFormTest)\", \"test_user_already_exists (auth_tests.test_forms.UserCreationFormTest)\", \"UserCreationForm password validation uses all of the form's data.\", \"test_username_field_autocapitalize_none (auth_tests.test_forms.UserCreationFormTest)\", \"test_validates_password (auth_tests.test_forms.UserCreationFormTest)\", \"test_bug_19349_render_with_none_value (auth_tests.test_forms.ReadOnlyPasswordHashTest)\", \"test_readonly_field_has_changed (auth_tests.test_forms.ReadOnlyPasswordHashTest)\", \"test_render (auth_tests.test_forms.ReadOnlyPasswordHashTest)\", \"test_help_text_translation (auth_tests.test_forms.SetPasswordFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.SetPasswordFormTest)\", \"test_success (auth_tests.test_forms.SetPasswordFormTest)\", \"test_validates_password (auth_tests.test_forms.SetPasswordFormTest)\", \"test_custom_login_allowed_policy (auth_tests.test_forms.AuthenticationFormTest)\", \"test_get_invalid_login_error (auth_tests.test_forms.AuthenticationFormTest)\", \"test_inactive_user_i18n (auth_tests.test_forms.AuthenticationFormTest)\", \"An invalid login doesn't leak the inactive status of a user.\", \"test_integer_username (auth_tests.test_forms.AuthenticationFormTest)\", \"test_invalid_username (auth_tests.test_forms.AuthenticationFormTest)\", \"test_login_failed (auth_tests.test_forms.AuthenticationFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.AuthenticationFormTest)\", \"test_success (auth_tests.test_forms.AuthenticationFormTest)\", \"test_unicode_username (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_autocapitalize_none (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_label (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_label_empty_string (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_label_not_set (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_max_length_defaults_to_254 (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_max_length_matches_user_model (auth_tests.test_forms.AuthenticationFormTest)\", \"test_cleaned_data (auth_tests.test_forms.PasswordResetFormTest)\", \"test_custom_email_constructor (auth_tests.test_forms.PasswordResetFormTest)\", \"test_custom_email_field (auth_tests.test_forms.PasswordResetFormTest)\", \"test_custom_email_subject (auth_tests.test_forms.PasswordResetFormTest)\", \"test_inactive_user (auth_tests.test_forms.PasswordResetFormTest)\", \"test_invalid_email (auth_tests.test_forms.PasswordResetFormTest)\", \"test_nonexistent_email (auth_tests.test_forms.PasswordResetFormTest)\", \"test_preserve_username_case (auth_tests.test_forms.PasswordResetFormTest)\", \"test_save_html_email_template_name (auth_tests.test_forms.PasswordResetFormTest)\", \"test_save_plaintext_email (auth_tests.test_forms.PasswordResetFormTest)\", \"test_unusable_password (auth_tests.test_forms.PasswordResetFormTest)\", \"test_bug_14242 (auth_tests.test_forms.UserChangeFormTest)\", \"test_bug_17944_empty_password (auth_tests.test_forms.UserChangeFormTest)\", \"test_bug_17944_unknown_password_algorithm (auth_tests.test_forms.UserChangeFormTest)\", \"test_bug_17944_unmanageable_password (auth_tests.test_forms.UserChangeFormTest)\", \"The change form does not return the password value\", \"test_bug_19349_bound_password_field (auth_tests.test_forms.UserChangeFormTest)\", \"test_custom_form (auth_tests.test_forms.UserChangeFormTest)\", \"test_password_excluded (auth_tests.test_forms.UserChangeFormTest)\", \"test_unusable_password (auth_tests.test_forms.UserChangeFormTest)\", \"test_username_field_autocapitalize_none (auth_tests.test_forms.UserChangeFormTest)\", \"test_username_validity (auth_tests.test_forms.UserChangeFormTest)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.558678",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}