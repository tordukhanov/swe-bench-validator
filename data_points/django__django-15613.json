{
  "repo": "django/django",
  "instance_id": "django__django-15613",
  "base_commit": "1ed8ca43f61138b8f8d6f92106c27060753ed4e7",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1072,8 +1072,9 @@ def _do_insert(self, manager, using, fields, returning_fields, raw):\n \n     def _prepare_related_fields_for_save(self, operation_name, fields=None):\n         # Ensure that a model instance without a PK hasn't been assigned to\n-        # a ForeignKey or OneToOneField on this model. If the field is\n-        # nullable, allowing the save would result in silent data loss.\n+        # a ForeignKey, GenericForeignKey or OneToOneField on this model. If\n+        # the field is nullable, allowing the save would result in silent data\n+        # loss.\n         for field in self._meta.concrete_fields:\n             if fields and field not in fields:\n                 continue\n@@ -1107,6 +1108,21 @@ def _prepare_related_fields_for_save(self, operation_name, fields=None):\n                     self, field.attname\n                 ):\n                     field.delete_cached_value(self)\n+        # GenericForeignKeys are private.\n+        for field in self._meta.private_fields:\n+            if fields and field not in fields:\n+                continue\n+            if (\n+                field.is_relation\n+                and field.is_cached(self)\n+                and hasattr(field, \"fk_field\")\n+            ):\n+                obj = field.get_cached_value(self, default=None)\n+                if obj and obj.pk is None:\n+                    raise ValueError(\n+                        f\"{operation_name}() prohibited to prevent data loss due to \"\n+                        f\"unsaved related object '{field.name}'.\"\n+                    )\n \n     def delete(self, using=None, keep_parents=False):\n         if self.pk is None:\n",
  "test_patch": "diff --git a/tests/generic_relations/tests.py b/tests/generic_relations/tests.py\n--- a/tests/generic_relations/tests.py\n+++ b/tests/generic_relations/tests.py\n@@ -1,8 +1,7 @@\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import FieldError\n-from django.db import IntegrityError\n from django.db.models import Q\n-from django.test import SimpleTestCase, TestCase\n+from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n     AllowsNullGFK,\n@@ -501,14 +500,26 @@ def test_query_content_type(self):\n         with self.assertRaisesMessage(FieldError, msg):\n             TaggedItem.objects.get(content_object=\"\")\n \n-    def test_unsaved_instance_on_generic_foreign_key(self):\n-        \"\"\"\n-        Assigning an unsaved object to GenericForeignKey should raise an\n-        exception on model.save().\n-        \"\"\"\n+    def test_unsaved_generic_foreign_key_parent_save(self):\n+        quartz = Mineral(name=\"Quartz\", hardness=7)\n+        tagged_item = TaggedItem(tag=\"shiny\", content_object=quartz)\n+        msg = (\n+            \"save() prohibited to prevent data loss due to unsaved related object \"\n+            \"'content_object'.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            tagged_item.save()\n+\n+    @skipUnlessDBFeature(\"has_bulk_insert\")\n+    def test_unsaved_generic_foreign_key_parent_bulk_create(self):\n         quartz = Mineral(name=\"Quartz\", hardness=7)\n-        with self.assertRaises(IntegrityError):\n-            TaggedItem.objects.create(tag=\"shiny\", content_object=quartz)\n+        tagged_item = TaggedItem(tag=\"shiny\", content_object=quartz)\n+        msg = (\n+            \"bulk_create() prohibited to prevent data loss due to unsaved related \"\n+            \"object 'content_object'.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            TaggedItem.objects.bulk_create([tagged_item])\n \n     def test_cache_invalidation_for_content_type_id(self):\n         # Create a Vegetable and Mineral with the same id.\ndiff --git a/tests/generic_relations_regress/models.py b/tests/generic_relations_regress/models.py\n--- a/tests/generic_relations_regress/models.py\n+++ b/tests/generic_relations_regress/models.py\n@@ -104,11 +104,6 @@ class Company(models.Model):\n     links = GenericRelation(Link)\n \n \n-# For testing #13085 fix, we also use Note model defined above\n-class Developer(models.Model):\n-    name = models.CharField(max_length=15)\n-\n-\n class Team(models.Model):\n     name = models.CharField(max_length=15)\n \ndiff --git a/tests/generic_relations_regress/tests.py b/tests/generic_relations_regress/tests.py\n--- a/tests/generic_relations_regress/tests.py\n+++ b/tests/generic_relations_regress/tests.py\n@@ -1,4 +1,3 @@\n-from django.db import IntegrityError\n from django.db.models import ProtectedError, Q, Sum\n from django.forms.models import modelform_factory\n from django.test import TestCase, skipIfDBFeature\n@@ -15,7 +14,6 @@\n     Contact,\n     Content,\n     D,\n-    Developer,\n     Guild,\n     HasLinkThing,\n     Link,\n@@ -140,14 +138,6 @@ def count_places(place):\n         self.assertEqual(count_places(p1), 1)\n         self.assertEqual(count_places(p2), 1)\n \n-    def test_target_model_is_unsaved(self):\n-        \"\"\"Test related to #13085\"\"\"\n-        # Fails with another, ORM-level error\n-        dev1 = Developer(name=\"Joe\")\n-        note = Note(note=\"Deserves promotion\", content_object=dev1)\n-        with self.assertRaises(IntegrityError):\n-            note.save()\n-\n     def test_target_model_len_zero(self):\n         \"\"\"\n         Saving a model with a GenericForeignKey to a model instance whose\n",
  "problem_statement": "Inconsistent / Unexpected handling of assigning unsaved model to Generic Foreign Key\nDescription\n\t\nhttps://code.djangoproject.com/ticket/10811 addresses the issue of assigned an unsaved model to a ForeignKey or OneToOneField (raises error when save() called), however the same logic / pattern does not apply to GFKs.\nGiven:\nclass ModelA(models.Model):\n\tname = models.CharField(max_length=20)\nclass ModelB(models.Model):\n\tgfk_ctype = models.ForeignKey(ContentType, on_delete=models.PROTECT)\n\tgfk_id = models.PositiveIntegerField()\n\tgfk = GenericForeignKey('gfk_ctype', 'gfk_id')\nclass ModelC(models.Model):\n\tfk = models.ForeignKey(ModelA, on_delete=models.CASCADE)\nForeign Key Behaviour:\nIn [2]: a = ModelA(name='Model A')\nIn [3]: c = ModelC(fk=a)\nIn [4]: c.fk\nOut[4]: <ModelA: ModelA object (None)>\nIn [5]: c.save()\n---------------------------------------------------------------------------\n...\nValueError: save() prohibited to prevent data loss due to unsaved related object 'fk'.\nIn [6]: a.save()\n(0.016) INSERT INTO \"test_app_modela\" (\"name\") VALUES ('Model A'); args=['Model A']\nIn [7]: c.fk\nOut[7]: <ModelA: ModelA object (1)>\nIn [8]: c.save()\n(0.016) INSERT INTO \"test_app_modelc\" (\"fk_id\") VALUES (1); args=[1]\nGFK behaviour:\nIn [9]: a2 = ModelA(name='Model A2')\nIn [10]: b = ModelB(gfk=a2)\nIn [11]: b.gfk\nOut[11]: <ModelA: ModelA object (None)>\nIn [12]: b.save()\n(0.000) INSERT INTO \"test_app_modelb\" (\"gfk_ctype_id\", \"gfk_id\") VALUES (9, NULL); args=[9, None]\n---------------------------------------------------------------------------\nIntegrityError: NOT NULL constraint failed: test_app_modelb.gfk_id\nIn [14]: b.gfk.save()\n(0.015) INSERT INTO \"test_app_modela\" (\"name\") VALUES ('Model A2'); args=['Model A2']\nIn [15]: b.gfk\n(0.000) SELECT \"test_app_modela\".\"id\", \"test_app_modela\".\"name\" FROM \"test_app_modela\" WHERE \"test_app_modela\".\"id\" IS NULL LIMIT 21; args=()\nNone\nIn [17]: b.gfk_ctype\nOut[17]: <ContentType: test_app | model a>\nTwo observations:\nNo check on b.gfk and b.gfk_id value during save() which could lead to silent data loss if b.gfk_id is nullable.\nWhen a2 is saved, accessing b.gfk now does a redundant DB query to try and find ModelA instance with PK = None, then then returns None value (effectively un-assigning a2 model), while keeping b.gfk_ctype intact. This is because the new pk of a2 is different to the existing gfk_id (pk_val) of the GFK field (None)\nWhat should be done:\nModify Model.save() or Model._prepare_related_fields_for_save() to also perform verification check for GFK fields\nModify GenericForeignKey.get() to handle case of pk_val = None (update fk_field value using PK value of GFK model if present, do not perform redundant DB query on pk=None, return previously assigned (then saved) model instead of None)\n",
  "hints_text": "Agreed, assigning unsaved objects should raise an error for GenericForeignKey. It was added in 5643a3b51be338196d0b292d5626ad43648448d3 but reverted later in 5980b05c1fad69eef907e0076aa2dc837edab529. It looks like an unintended change as ​release notes still claim that an error is raised in this case.\nI think verification should be done upon save() not assignment (to align with existing behaviour for FKs and enable saving of related model at later point before calling save() of primary model)\nWe don't have a patch so there is no need to set this flags.\nMade the pull request at ​https://github.com/django/django/pull/14807\nThe code I defined is as follows. I have verified that the data already exists in the database after I save the object of Grade, but I can not use it to save the object of Stu. class Grade(models.Model): id = models.IntegerField(primary_key=True) grade = models.CharField(max_length=50, unique=True) class Stu(models.Model): id = models.IntegerField(primary_key=True) name = models.CharField(max_length=50, unique=True) grade_of_stu = models.ForeignKey(Grade, to_field=\"grade\", on_delete=models.CASCADE) ###########################################Django shell############################################################################## In [17]: g = Grade(grade=\"3\") In [18]: g.save() In [19]: stu = Stu(name=\"Fred\", grade_of_stu=g) In [20]: stu.save() --------------------------------------------------------------------------- ValueError Traceback (most recent call last) <ipython-input-20-a0e3017ded06> in <module> ----> 1 stu.save() C:\\ProgramData\\Anaconda3\\lib\\site-packages\\django\\db\\models\\base.py in save(self, force_insert, force_update, using, update_fields) 680 non-SQL backends), respectively. Normally, they should not be set. 681 \"\"\" --> 682 self._prepare_related_fields_for_save(operation_name='save') 683 684 using = using or router.db_for_write(self.__class__, instance=self) C:\\ProgramData\\Anaconda3\\lib\\site-packages\\django\\db\\models\\base.py in _prepare_related_fields_for_save(self, operation_name) 930 if not field.remote_field.multiple: 931 field.remote_field.delete_cached_value(obj) --> 932 raise ValueError( 933 \"%s() prohibited to prevent data loss due to unsaved \" 934 \"related object '%s'.\" % (operation_name, field.name) ValueError: save() prohibited to prevent data loss due to unsaved related object 'grade_of_stu'. In [21]: stu = Stu(name=\"Fred\", grade_of_stu=Grade.objects.get(grade=\"3\")) In [22]: stu.save()\nReplying to wtzhu: The code I defined is as follows. I have verified that the data already exists in the database after I save the object of Grade, but I can not use it to save the object of Stu. This is not related with GenericForeignKey please create a separate ticket.\n​PR",
  "created_at": "2022-04-19T11:27:01Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_unsaved_generic_foreign_key_parent_bulk_create (generic_relations.tests.GenericRelationsTests)\", \"test_unsaved_generic_foreign_key_parent_save (generic_relations.tests.GenericRelationsTests)\"]",
  "PASS_TO_PASS": "[\"test_none_allowed (generic_relations.tests.TestInitWithNoneArgument)\", \"The default for for_concrete_model should be True\", \"test_generic_relation (generic_relations.tests.ProxyRelatedModelTest)\", \"test_generic_relation_set (generic_relations.tests.ProxyRelatedModelTest)\", \"Instances of the proxy should be returned when\", \"test_query (generic_relations.tests.ProxyRelatedModelTest)\", \"test_query_proxy (generic_relations.tests.ProxyRelatedModelTest)\", \"When for_concrete_model is False, we should still be able to get\", \"test_annotate (generic_relations_regress.tests.GenericRelationTests)\", \"test_charlink_delete (generic_relations_regress.tests.GenericRelationTests)\", \"test_coerce_object_id_remote_field_cache_persistence (generic_relations_regress.tests.GenericRelationTests)\", \"test_editable_generic_rel (generic_relations_regress.tests.GenericRelationTests)\", \"test_extra_join_condition (generic_relations_regress.tests.GenericRelationTests)\", \"test_filter_on_related_proxy_model (generic_relations_regress.tests.GenericRelationTests)\", \"test_filter_targets_related_pk (generic_relations_regress.tests.GenericRelationTests)\", \"Ordering over a generic relation does not include extraneous\", \"The reverse generic relation accessor (targets) is created if the\", \"Filtering with a reverse generic relation, where the GenericRelation\", \"Test related to #13085\", \"GenericRelations on inherited classes use the correct content type.\", \"test_join_reuse (generic_relations_regress.tests.GenericRelationTests)\", \"SQL query parameters for generic relations are properly\", \"The correct column name is used for the primary key on the\", \"Saving a model with a GenericForeignKey to a model instance whose\", \"test_textlink_delete (generic_relations_regress.tests.GenericRelationTests)\", \"test_ticket_20378 (generic_relations_regress.tests.GenericRelationTests)\", \"test_ticket_20564 (generic_relations_regress.tests.GenericRelationTests)\", \"test_ticket_20564_nullable_fk (generic_relations_regress.tests.GenericRelationTests)\", \"test_ticket_22982 (generic_relations_regress.tests.GenericRelationTests)\", \"test_ticket_22998 (generic_relations_regress.tests.GenericRelationTests)\", \"Test accessing the content object like a foreign key.\", \"Test lookups through content type.\", \"test_add_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_add_bulk (generic_relations.tests.GenericRelationsTests)\", \"test_add_bulk_false (generic_relations.tests.GenericRelationsTests)\", \"test_add_rejects_unsaved_objects (generic_relations.tests.GenericRelationsTests)\", \"test_add_rejects_wrong_instances (generic_relations.tests.GenericRelationsTests)\", \"test_add_then_remove_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_assign (generic_relations.tests.GenericRelationsTests)\", \"test_assign_content_object_in_init (generic_relations.tests.GenericRelationsTests)\", \"test_assign_with_queryset (generic_relations.tests.GenericRelationsTests)\", \"test_cache_invalidation_for_content_type_id (generic_relations.tests.GenericRelationsTests)\", \"test_cache_invalidation_for_object_id (generic_relations.tests.GenericRelationsTests)\", \"test_clear (generic_relations.tests.GenericRelationsTests)\", \"test_clear_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_create_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"Test lookups over an object without GenericRelations.\", \"Should be able to use get_or_create from the generic related manager\", \"test_generic_relation_related_name_default (generic_relations.tests.GenericRelationsTests)\", \"test_generic_relation_to_inherited_child (generic_relations.tests.GenericRelationsTests)\", \"Objects with declared GenericRelations can be tagged directly -- the\", \"Should be able to use update_or_create from the generic related manager\", \"test_get_or_create (generic_relations.tests.GenericRelationsTests)\", \"test_gfk_manager (generic_relations.tests.GenericRelationsTests)\", \"test_gfk_subclasses (generic_relations.tests.GenericRelationsTests)\", \"test_multiple_gfk (generic_relations.tests.GenericRelationsTests)\", \"If you delete an object with an explicit Generic relation, the related\", \"If Generic Relation is not explicitly defined, any related objects\", \"test_prefetch_related_custom_object_id (generic_relations.tests.GenericRelationsTests)\", \"test_prefetch_related_different_content_types (generic_relations.tests.GenericRelationsTests)\", \"Queries across generic relations respect the content types. Even though\", \"Create another fatty tagged instance with different PK to ensure there\", \"test_query_content_object (generic_relations.tests.GenericRelationsTests)\", \"test_query_content_type (generic_relations.tests.GenericRelationsTests)\", \"test_remove (generic_relations.tests.GenericRelationsTests)\", \"test_remove_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_set (generic_relations.tests.GenericRelationsTests)\", \"test_set_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"You can set a generic foreign key in the way you'd expect.\", \"Concrete model subclasses with generic relations work\", \"Generic relations on a base class (Vegetable) work correctly in\", \"If you delete a tag, the objects using the tag are unaffected (other\", \"test_update_or_create_defaults (generic_relations.tests.GenericRelationsTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.735089",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}