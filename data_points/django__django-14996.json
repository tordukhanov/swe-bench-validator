{
  "repo": "django/django",
  "instance_id": "django__django-14996",
  "base_commit": "69b0736fad1d1f0197409ca025b7bcdf5666ae62",
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -840,6 +840,20 @@ def generate_renamed_fields(self):\n                             old_field_dec[0:2] == field_dec[0:2] and\n                             dict(old_field_dec[2], db_column=old_db_column) == field_dec[2])):\n                         if self.questioner.ask_rename(model_name, rem_field_name, field_name, field):\n+                            # A db_column mismatch requires a prior noop\n+                            # AlterField for the subsequent RenameField to be a\n+                            # noop on attempts at preserving the old name.\n+                            if old_field.db_column != field.db_column:\n+                                altered_field = field.clone()\n+                                altered_field.name = rem_field_name\n+                                self.add_operation(\n+                                    app_label,\n+                                    operations.AlterField(\n+                                        model_name=model_name,\n+                                        name=rem_field_name,\n+                                        field=altered_field,\n+                                    ),\n+                                )\n                             self.add_operation(\n                                 app_label,\n                                 operations.RenameField(\n@@ -970,7 +984,10 @@ def generate_altered_fields(self):\n                     new_field.remote_field.through = old_field.remote_field.through\n             old_field_dec = self.deep_deconstruct(old_field)\n             new_field_dec = self.deep_deconstruct(new_field)\n-            if old_field_dec != new_field_dec:\n+            # If the field was confirmed to be renamed it means that only\n+            # db_column was allowed to change which generate_renamed_fields()\n+            # already accounts for by adding an AlterField operation.\n+            if old_field_dec != new_field_dec and old_field_name == field_name:\n                 both_m2m = old_field.many_to_many and new_field.many_to_many\n                 neither_m2m = not old_field.many_to_many and not new_field.many_to_many\n                 if both_m2m or neither_m2m:\ndiff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -239,7 +239,11 @@ def migration_name_fragment(self):\n     def reduce(self, operation, app_label):\n         if isinstance(operation, RemoveField) and self.is_same_field_operation(operation):\n             return [operation]\n-        elif isinstance(operation, RenameField) and self.is_same_field_operation(operation):\n+        elif (\n+            isinstance(operation, RenameField) and\n+            self.is_same_field_operation(operation) and\n+            self.field.db_column is None\n+        ):\n             return [\n                 operation,\n                 AlterField(\n",
  "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1001,14 +1001,17 @@ def test_rename_field_preserved_db_column(self):\n         ]\n         changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename': True}))\n         self.assertNumberMigrations(changes, 'app', 1)\n-        self.assertOperationTypes(changes, 'app', 0, ['RenameField', 'AlterField'])\n+        self.assertOperationTypes(changes, 'app', 0, ['AlterField', 'RenameField'])\n         self.assertOperationAttributes(\n-            changes, 'app', 0, 0, model_name='foo', old_name='field', new_name='renamed_field',\n+            changes, 'app', 0, 0, model_name='foo', name='field',\n         )\n-        self.assertOperationAttributes(changes, 'app', 0, 1, model_name='foo', name='renamed_field')\n-        self.assertEqual(changes['app'][0].operations[-1].field.deconstruct(), (\n-            'renamed_field', 'django.db.models.IntegerField', [], {'db_column': 'field'},\n+        self.assertEqual(changes['app'][0].operations[0].field.deconstruct(), (\n+            'field', 'django.db.models.IntegerField', [], {'db_column': 'field'},\n         ))\n+        self.assertOperationAttributes(\n+            changes, 'app', 0, 1, model_name='foo', old_name='field',\n+            new_name='renamed_field',\n+        )\n \n     def test_rename_related_field_preserved_db_column(self):\n         before = [\n@@ -1031,17 +1034,20 @@ def test_rename_related_field_preserved_db_column(self):\n         ]\n         changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename': True}))\n         self.assertNumberMigrations(changes, 'app', 1)\n-        self.assertOperationTypes(changes, 'app', 0, ['RenameField', 'AlterField'])\n+        self.assertOperationTypes(changes, 'app', 0, ['AlterField', 'RenameField'])\n         self.assertOperationAttributes(\n-            changes, 'app', 0, 0, model_name='bar', old_name='foo', new_name='renamed_foo',\n+            changes, 'app', 0, 0, model_name='bar', name='foo',\n         )\n-        self.assertOperationAttributes(changes, 'app', 0, 1, model_name='bar', name='renamed_foo')\n-        self.assertEqual(changes['app'][0].operations[-1].field.deconstruct(), (\n-            'renamed_foo',\n+        self.assertEqual(changes['app'][0].operations[0].field.deconstruct(), (\n+            'foo',\n             'django.db.models.ForeignKey',\n             [],\n             {'to': 'app.foo', 'on_delete': models.CASCADE, 'db_column': 'foo_id'},\n         ))\n+        self.assertOperationAttributes(\n+            changes, 'app', 0, 1, model_name='bar', old_name='foo',\n+            new_name='renamed_foo',\n+        )\n \n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n",
  "problem_statement": "Renaming field and providing prior field name to db_column should be an SQL noop\nDescription\n\t \n\t\t(last modified by Jacob Walls)\n\t \nRenaming a field and setting the prior implicit field name as the db_column to avoid db operations creates a migration emitting unnecessary SQL. Similar to #31826, which handled a very similar scenario but where there is no field rename, I would expect a SQL noop. I tested with SQLite and MySQL 5.7.31. \nclass Apple(models.Model):\n\tcore = models.BooleanField()\nclass Apple(models.Model):\n\tcore_renamed = models.BooleanField(db_column='core')\nWas apple.core renamed to apple.core_renamed (a BooleanField)? [y/N] y\nMigrations for 'renamez':\n renamez/migrations/0002_rename_core_apple_core_renamed_and_more.py\n\t- Rename field core on apple to core_renamed\n\t- Alter field core_renamed on apple\npython manage.py sqlmigrate renamez 0002 showing unnecessary SQL:\nBEGIN;\n--\n-- Rename field core on apple to core_renamed\n--\nALTER TABLE \"renamez_apple\" RENAME COLUMN \"core\" TO \"core_renamed\";\n--\n-- Alter field core_renamed on apple\n--\nALTER TABLE \"renamez_apple\" RENAME COLUMN \"core_renamed\" TO \"core\";\nCOMMIT;\nWithout renaming the field, follow the same flow and get an AlterField migration without SQL, which is what #31826 intended:\nBEGIN;\n--\n-- Alter field core on apple\n--\nCOMMIT;\n",
  "hints_text": "I think this is due to how the auto-detector ​generates field renames before field alterations. I assume the issue goes away if you swap the order of operations in your migration? ​As this test exemplifies the RenameField operation happens before the AlterField operation does so we'd need to adjust generate_renamed_fields to add an AlterField and prevents generate_altered_fields for doing so when this happens.\nThanks for having a look. I see now the scope of #31826 was just for flows where the field is not renamed. So that makes this ticket a request to extend this to field renames, which looks like was discussed as 3 and 4 here. I assume the issue goes away if you swap the order of operations in your migration? If I switch the order to have AlterField followed by RenameField, FieldDoesNotExist is raised when migrating. These are the operations: operations = [ migrations.RenameField( model_name='apple', old_name='core', new_name='core_renamed', ), migrations.AlterField( model_name='apple', name='core_renamed', field=models.BooleanField(db_column='core'), ), ]\nYou'll want to adjust AlterField.name accordingly if you swap the order of operations; change name='core_renamed' to name='core'. operations = [ migrations.AlterField( model_name='apple', name='core', field=models.BooleanField(db_column='core'), ), migrations.RenameField( model_name='apple', old_name='core', new_name='core_renamed', ), ]",
  "created_at": "2021-10-15T17:13:16Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"RenameField is used if a field is renamed and db_column equal to the\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\"]",
  "PASS_TO_PASS": "[\"test_auto (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_many_operations_suffix (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_no_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_no_operations_initial (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_none_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_none_name_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_operation_with_no_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_operation (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_operation_long_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_create_models (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_create_models_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"Setting order_with_respect_to when adding the FK too does\", \"#23405 - Adding a NOT NULL and blank `CharField` or `TextField`\", \"Test change detection of new constraints.\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new fields.\", \"Added fields will be created before using them in index/unique_together.\", \"#22030 - Adding a field with a default should work.\", \"Tests index/unique_together detection.\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"Setting order_with_respect_to when adding the whole model\", \"test_add_model_order_with_respect_to_index_constraint (migrations.test_autodetector.AutodetectorTests)\", \"test_add_model_order_with_respect_to_index_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"Removing a base field takes place before adding a new inherited model\", \"#23405 - Adding a NOT NULL and non-blank `CharField` or `TextField`\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"Alter_db_table doesn't generate a migration if no changes have been made.\", \"Tests detection for removing db_table in model's options.\", \"Tests when model and db_table changes, autodetector must create two\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"#23609 - Tests autodetection of nullable to non-nullable alterations.\", \"ForeignKeys are altered _before_ the model they used to\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"Changing the model managers adds a new operation.\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"Tests auto-naming of migrations for graph matching.\", \"test_arrange_for_graph_with_multiple_initial (migrations.test_autodetector.AutodetectorTests)\", \"Bases of other models come first.\", \"test_bases_first_mixed_case_app_label (migrations.test_autodetector.AutodetectorTests)\", \"#23315 - The dependency resolver knows to put all CreateModel\", \"#23322 - The dependency resolver knows to explicitly resolve\", \"Having a circular ForeignKey dependency automatically\", \"#23938 - Changing a concrete field into a ManyToManyField\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"Adding a m2m with a through model and the models that use it should be\", \"Two instances which deconstruct to the same value aren't considered a\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"#22951 -- Uninstantiated classes with deconstruct are correctly returned\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)\", \"#23452 - Empty unique/index_together shouldn't generate a migration.\", \"A dependency to an app with no migrations uses __first__.\", \"Having a ForeignKey automatically adds a dependency.\", \"#23100 - ForeignKeys correctly depend on other apps' models.\", \"index/unique_together doesn't generate a migration if no\", \"index/unique_together also triggers on ordering changes.\", \"Tests unique_together and field removal detection & ordering\", \"Removing an FK and the model it targets in the same change must remove\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)\", \"Tests when model changes but db_table stays as-is, autodetector must not\", \"A dependency to an app with existing migrations uses the\", \"A model with a m2m field that specifies a \\\"through\\\" model cannot be\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)\", \"#23938 - Changing a ManyToManyField into a concrete field\", \"Removing a ManyToManyField and the \\\"through\\\" model in the same change\", \"Removing a model that contains a ManyToManyField and the \\\"through\\\" model\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)\", \"#23956 - Inheriting models doesn't move *_ptr fields into AddField operations.\", \"Nested deconstruction is applied recursively to the args/kwargs of\", \"Tests autodetection of new models.\", \"If two models with a ForeignKey from one to the other are removed at the\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_parse_number (migrations.test_autodetector.AutodetectorTests)\", \"A relation used as the primary key is kept as part of CreateModel.\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"#23415 - The autodetector must correctly deal with custom FK on proxy\", \"FK dependencies still work on proxy models.\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)\", \"Removing order_with_respect_to when removing the FK too does\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"Removed fields will be removed after updating index/unique_together.\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of renamed models that are used in M2M relations as\", \"Tests autodetection of renamed models.\", \"Model name is case-insensitive. Changing case doesn't lead to any\", \"The migration to rename a model pointed to by a foreign key in another\", \"#24537 - The order of fields in a model does not influence\", \"Tests autodetection of renamed models while simultaneously renaming one\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests)\", \"test_renamed_referenced_m2m_model_case (migrations.test_autodetector.AutodetectorTests)\", \"#22300 - Adding an FK in the same \\\"spot\\\" as a deleted CharField should\", \"A migration with a FK between two models of the same app does\", \"#22275 - A migration with circular FK dependency does not try\", \"A migration with a FK between two models of the same app\", \"Setting order_with_respect_to adds a field.\", \"test_set_alter_order_with_respect_to_index_constraint_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)\", \"Swappable models get their CreateModel first.\", \"Trim does not remove dependencies but does remove unwanted apps.\", \"The autodetector correctly deals with managed models.\", \"#23415 - The autodetector must correctly deal with custom FK on\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.710418",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}