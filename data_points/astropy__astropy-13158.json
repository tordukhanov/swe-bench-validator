{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13158",
  "base_commit": "b185ca184f8dd574531dcc21e797f00537fefa6a",
  "patch": "diff --git a/astropy/modeling/bounding_box.py b/astropy/modeling/bounding_box.py\n--- a/astropy/modeling/bounding_box.py\n+++ b/astropy/modeling/bounding_box.py\n@@ -520,7 +520,7 @@ def _set_outputs_unit(outputs, valid_outputs_unit):\n         \"\"\"\n \n         if valid_outputs_unit is not None:\n-            return Quantity(outputs, valid_outputs_unit, copy=False)\n+            return Quantity(outputs, valid_outputs_unit, copy=False, subok=True)\n \n         return outputs\n \ndiff --git a/astropy/modeling/core.py b/astropy/modeling/core.py\n--- a/astropy/modeling/core.py\n+++ b/astropy/modeling/core.py\n@@ -418,7 +418,7 @@ def __call__(self, *inputs, **kwargs):\n                     # default is not a Quantity, attach the unit to the\n                     # default.\n                     if unit is not None:\n-                        default = Quantity(default, unit, copy=False)\n+                        default = Quantity(default, unit, copy=False, subok=True)\n                     kwargs.append((param_name, default))\n             else:\n                 args = ('self',) + tuple(pdict.keys())\n@@ -2537,7 +2537,9 @@ def _initialize_parameter_value(self, param_name, value):\n             raise InputParameterError(\n                 f\"{self.__class__.__name__}.__init__() requires a Quantity for parameter \"\n                 f\"{param_name!r}\")\n+\n         param._unit = unit\n+        param._set_unit(unit, force=True)\n         param.internal_unit = None\n         if param._setter is not None:\n             if unit is not None:\n@@ -2689,7 +2691,7 @@ def _param_sets(self, raw=False, units=False):\n                 else:\n                     unit = param.unit\n                 if unit is not None:\n-                    value = Quantity(value, unit)\n+                    value = Quantity(value, unit, subok=True)\n \n             values.append(value)\n \ndiff --git a/astropy/modeling/functional_models.py b/astropy/modeling/functional_models.py\n--- a/astropy/modeling/functional_models.py\n+++ b/astropy/modeling/functional_models.py\n@@ -1791,7 +1791,7 @@ class Const1D(Fittable1DModel):\n         plt.show()\n     \"\"\"\n \n-    amplitude = Parameter(default=1, description=\"Value of the constant function\")\n+    amplitude = Parameter(default=1, description=\"Value of the constant function\", mag=True)\n     linear = True\n \n     @staticmethod\n@@ -1807,6 +1807,8 @@ def evaluate(x, amplitude):\n             # parameter is given an array-like value\n             x = amplitude * np.ones_like(x, subok=False)\n \n+        if isinstance(amplitude, Quantity):\n+            return Quantity(x, unit=amplitude.unit, copy=False, subok=True)\n         return x\n \n     @staticmethod\n@@ -1844,7 +1846,7 @@ class Const2D(Fittable2DModel):\n         .. math:: f(x, y) = A\n     \"\"\"\n \n-    amplitude = Parameter(default=1, description=\"Value of the constant function\")\n+    amplitude = Parameter(default=1, description=\"Value of the constant function\", mag=True)\n     linear = True\n \n     @staticmethod\n@@ -1860,6 +1862,8 @@ def evaluate(x, y, amplitude):\n             # parameter is given an array-like value\n             x = amplitude * np.ones_like(x, subok=False)\n \n+        if isinstance(amplitude, Quantity):\n+            return Quantity(x, unit=amplitude.unit, copy=False, subok=True)\n         return x\n \n     @property\n@@ -1941,7 +1945,7 @@ class Ellipse2D(Fittable2DModel):\n         plt.show()\n     \"\"\"\n \n-    amplitude = Parameter(default=1, description=\"Value of the ellipse\")\n+    amplitude = Parameter(default=1, description=\"Value of the ellipse\", mag=True)\n     x_0 = Parameter(default=0, description=\"X position of the center of the disk.\")\n     y_0 = Parameter(default=0, description=\"Y position of the center of the disk.\")\n     a = Parameter(default=1, description=\"The length of the semimajor axis\")\n@@ -1964,7 +1968,7 @@ def evaluate(x, y, amplitude, x_0, y_0, a, b, theta):\n         result = np.select([in_ellipse], [amplitude])\n \n         if isinstance(amplitude, Quantity):\n-            return Quantity(result, unit=amplitude.unit, copy=False)\n+            return Quantity(result, unit=amplitude.unit, copy=False, subok=True)\n         return result\n \n     @property\n@@ -2037,7 +2041,7 @@ class Disk2D(Fittable2DModel):\n                    \\\\right.\n     \"\"\"\n \n-    amplitude = Parameter(default=1, description=\"Value of disk function\")\n+    amplitude = Parameter(default=1, description=\"Value of disk function\", mag=True)\n     x_0 = Parameter(default=0, description=\"X position of center of the disk\")\n     y_0 = Parameter(default=0, description=\"Y position of center of the disk\")\n     R_0 = Parameter(default=1, description=\"Radius of the disk\")\n@@ -2050,7 +2054,7 @@ def evaluate(x, y, amplitude, x_0, y_0, R_0):\n         result = np.select([rr <= R_0 ** 2], [amplitude])\n \n         if isinstance(amplitude, Quantity):\n-            return Quantity(result, unit=amplitude.unit, copy=False)\n+            return Quantity(result, unit=amplitude.unit, copy=False, subok=True)\n         return result\n \n     @property\n@@ -2122,7 +2126,7 @@ class Ring2D(Fittable2DModel):\n     Where :math:`r_{out} = r_{in} + r_{width}`.\n     \"\"\"\n \n-    amplitude = Parameter(default=1, description=\"Value of the disk function\")\n+    amplitude = Parameter(default=1, description=\"Value of the disk function\", mag=True)\n     x_0 = Parameter(default=0, description=\"X position of center of disc\")\n     y_0 = Parameter(default=0, description=\"Y position of center of disc\")\n     r_in = Parameter(default=1, description=\"Inner radius of the ring\")\n@@ -2165,7 +2169,7 @@ def evaluate(x, y, amplitude, x_0, y_0, r_in, width):\n         result = np.select([r_range], [amplitude])\n \n         if isinstance(amplitude, Quantity):\n-            return Quantity(result, unit=amplitude.unit, copy=False)\n+            return Quantity(result, unit=amplitude.unit, copy=False, subok=True)\n         return result\n \n     @property\n@@ -2254,7 +2258,7 @@ class Box1D(Fittable1DModel):\n         plt.show()\n     \"\"\"\n \n-    amplitude = Parameter(default=1, description=\"Amplitude A\")\n+    amplitude = Parameter(default=1, description=\"Amplitude A\", mag=True)\n     x_0 = Parameter(default=0, description=\"Position of center of box function\")\n     width = Parameter(default=1, description=\"Width of the box\")\n \n@@ -2332,7 +2336,7 @@ class Box2D(Fittable2DModel):\n \n     \"\"\"\n \n-    amplitude = Parameter(default=1, description=\"Amplitude\")\n+    amplitude = Parameter(default=1, description=\"Amplitude\", mag=True)\n     x_0 = Parameter(default=0, description=\"X position of the center of the box function\")\n     y_0 = Parameter(default=0, description=\"Y position of the center of the box function\")\n     x_width = Parameter(default=1, description=\"Width in x direction of the box\")\n@@ -2350,7 +2354,7 @@ def evaluate(x, y, amplitude, x_0, y_0, x_width, y_width):\n         result = np.select([np.logical_and(x_range, y_range)], [amplitude], 0)\n \n         if isinstance(amplitude, Quantity):\n-            return Quantity(result, unit=amplitude.unit, copy=False)\n+            return Quantity(result, unit=amplitude.unit, copy=False, subok=True)\n         return result\n \n     @property\n@@ -2450,7 +2454,7 @@ def evaluate(x, amplitude, x_0, width, slope):\n         result = np.select([range_a, range_b, range_c], [val_a, val_b, val_c])\n \n         if isinstance(amplitude, Quantity):\n-            return Quantity(result, unit=amplitude.unit, copy=False)\n+            return Quantity(result, unit=amplitude.unit, copy=False, subok=True)\n         return result\n \n     @property\n@@ -2518,7 +2522,7 @@ def evaluate(x, y, amplitude, x_0, y_0, R_0, slope):\n         result = np.select([range_1, range_2], [val_1, val_2])\n \n         if isinstance(amplitude, Quantity):\n-            return Quantity(result, unit=amplitude.unit, copy=False)\n+            return Quantity(result, unit=amplitude.unit, copy=False, subok=True)\n         return result\n \n     @property\n@@ -2791,7 +2795,7 @@ def evaluate(cls, x, y, amplitude, x_0, y_0, radius):\n \n         if isinstance(amplitude, Quantity):\n             # make z quantity too, otherwise in-place multiplication fails.\n-            z = Quantity(z, u.dimensionless_unscaled, copy=False)\n+            z = Quantity(z, u.dimensionless_unscaled, copy=False, subok=True)\n \n         z *= amplitude\n         return z\ndiff --git a/astropy/modeling/parameters.py b/astropy/modeling/parameters.py\n--- a/astropy/modeling/parameters.py\n+++ b/astropy/modeling/parameters.py\n@@ -15,7 +15,7 @@\n \n import numpy as np\n \n-from astropy.units import Quantity\n+from astropy.units import MagUnit, Quantity\n from astropy.utils import isiterable\n \n from .utils import array_repr_oneline, get_inputs_and_params\n@@ -178,6 +178,8 @@ class Parameter:\n     bounds : tuple\n         specify min and max as a single tuple--bounds may not be specified\n         simultaneously with min or max\n+    mag : bool\n+        Specify if the unit of the parameter can be a Magnitude unit or not\n     \"\"\"\n \n     constraints = ('fixed', 'tied', 'bounds')\n@@ -191,7 +193,7 @@ class Parameter:\n \n     def __init__(self, name='', description='', default=None, unit=None,\n                  getter=None, setter=None, fixed=False, tied=False, min=None,\n-                 max=None, bounds=None, prior=None, posterior=None):\n+                 max=None, bounds=None, prior=None, posterior=None, mag=False):\n         super().__init__()\n \n         self._model = None\n@@ -211,7 +213,9 @@ def __init__(self, name='', description='', default=None, unit=None,\n             default = default.value\n \n         self._default = default\n-        self._unit = unit\n+\n+        self._mag = mag\n+        self._set_unit(unit, force=True)\n         # Internal units correspond to raw_units held by the model in the\n         # previous implementation. The private _getter and _setter methods\n         # use this to convert to and from the public unit defined for the\n@@ -365,6 +369,10 @@ def unit(self, unit):\n \n     def _set_unit(self, unit, force=False):\n         if force:\n+            if isinstance(unit, MagUnit) and not self._mag:\n+                raise ValueError(\n+                    f\"This parameter does not support the magnitude units such as {unit}\"\n+                )\n             self._unit = unit\n         else:\n             self.unit = unit\n@@ -399,7 +407,7 @@ def quantity(self, quantity):\n             raise TypeError(\"The .quantity attribute should be set \"\n                             \"to a Quantity object\")\n         self.value = quantity.value\n-        self._unit = quantity.unit\n+        self._set_unit(quantity.unit, force=True)\n \n     @property\n     def shape(self):\n@@ -670,7 +678,7 @@ def __array__(self, dtype=None):\n         arr = np.asarray(self.value, dtype=dtype)\n \n         if self.unit is not None:\n-            arr = Quantity(arr, self.unit, copy=False)\n+            arr = Quantity(arr, self.unit, copy=False, subok=True)\n \n         return arr\n \ndiff --git a/astropy/modeling/powerlaws.py b/astropy/modeling/powerlaws.py\n--- a/astropy/modeling/powerlaws.py\n+++ b/astropy/modeling/powerlaws.py\n@@ -5,7 +5,7 @@\n # pylint: disable=invalid-name\n import numpy as np\n \n-from astropy.units import Quantity\n+from astropy.units import Magnitude, Quantity, UnitsError, dimensionless_unscaled, mag\n \n from .core import Fittable1DModel\n from .parameters import InputParameterError, Parameter\n@@ -238,7 +238,7 @@ class SmoothlyBrokenPowerLaw1D(Fittable1DModel):\n \n     \"\"\"\n \n-    amplitude = Parameter(default=1, min=0, description=\"Peak value at break point\")\n+    amplitude = Parameter(default=1, min=0, description=\"Peak value at break point\", mag=True)\n     x_break = Parameter(default=1, description=\"Break point\")\n     alpha_1 = Parameter(default=-2, description=\"Power law index before break point\")\n     alpha_2 = Parameter(default=2, description=\"Power law index after break point\")\n@@ -305,7 +305,7 @@ def evaluate(x, amplitude, x_break, alpha_1, alpha_2, delta):\n             f[i] = amplitude * xx[i] ** (-alpha_1) * r ** ((alpha_1 - alpha_2) * delta)\n \n         if return_unit:\n-            return Quantity(f, unit=return_unit, copy=False)\n+            return Quantity(f, unit=return_unit, copy=False, subok=True)\n         return f\n \n     @staticmethod\n@@ -583,28 +583,36 @@ class Schechter1D(Fittable1DModel):\n \n     phi_star = Parameter(default=1., description=('Normalization factor '\n                                                   'in units of number density'))\n-    m_star = Parameter(default=-20., description='Characteristic magnitude')\n+    m_star = Parameter(default=-20., description='Characteristic magnitude', mag=True)\n     alpha = Parameter(default=-1., description='Faint-end slope')\n \n     @staticmethod\n-    def evaluate(mag, phi_star, m_star, alpha):\n+    def _factor(magnitude, m_star):\n+        factor_exp = (magnitude - m_star)\n+\n+        if isinstance(factor_exp, Quantity):\n+            if factor_exp.unit == mag:\n+                factor_exp = Magnitude(factor_exp.value, unit=mag)\n+\n+                return factor_exp.to(dimensionless_unscaled)\n+            else:\n+                raise UnitsError(\"The units of magnitude and m_star must be a magnitude\")\n+        else:\n+            return 10 ** (-0.4 * factor_exp)\n+\n+    def evaluate(self, mag, phi_star, m_star, alpha):\n         \"\"\"Schechter luminosity function model function.\"\"\"\n-        if isinstance(mag, Quantity) or isinstance(m_star, Quantity):\n-            raise ValueError('mag and m_star must not have units')\n-        factor = 10 ** (0.4 * (m_star - mag))\n \n-        return (0.4 * np.log(10) * phi_star * factor**(alpha + 1)\n-                * np.exp(-factor))\n+        factor = self._factor(mag, m_star)\n \n-    @staticmethod\n-    def fit_deriv(mag, phi_star, m_star, alpha):\n+        return 0.4 * np.log(10) * phi_star * factor**(alpha + 1) * np.exp(-factor)\n+\n+    def fit_deriv(self, mag, phi_star, m_star, alpha):\n         \"\"\"\n         Schechter luminosity function derivative with respect to\n         parameters.\n         \"\"\"\n-        if isinstance(mag, Quantity) or isinstance(m_star, Quantity):\n-            raise ValueError('mag and m_star must not have units')\n-        factor = 10 ** (0.4 * (m_star - mag))\n+        factor = self._factor(mag, m_star)\n \n         d_phi_star = 0.4 * np.log(10) * factor**(alpha + 1) * np.exp(-factor)\n         func = phi_star * d_phi_star\ndiff --git a/astropy/modeling/rotations.py b/astropy/modeling/rotations.py\n--- a/astropy/modeling/rotations.py\n+++ b/astropy/modeling/rotations.py\n@@ -509,7 +509,7 @@ def evaluate(cls, x, y, angle):\n         x, y = result[0], result[1]\n         x.shape = y.shape = orig_shape\n         if has_units:\n-            return u.Quantity(x, unit=x_unit), u.Quantity(y, unit=y_unit)\n+            return u.Quantity(x, unit=x_unit, subok=True), u.Quantity(y, unit=y_unit, subok=True)\n         return x, y\n \n     @staticmethod\ndiff --git a/astropy/modeling/utils.py b/astropy/modeling/utils.py\n--- a/astropy/modeling/utils.py\n+++ b/astropy/modeling/utils.py\n@@ -324,7 +324,7 @@ def ellipse_extent(a, b, theta):\n     dy = b * np.sin(t) * np.cos(theta) + a * np.cos(t) * np.sin(theta)\n \n     if isinstance(dx, u.Quantity) or isinstance(dy, u.Quantity):\n-        return np.abs(u.Quantity([dx, dy]))\n+        return np.abs(u.Quantity([dx, dy], subok=True))\n     return np.abs([dx, dy])\n \n \n",
  "test_patch": "diff --git a/astropy/modeling/tests/test_models_quantities.py b/astropy/modeling/tests/test_models_quantities.py\n--- a/astropy/modeling/tests/test_models_quantities.py\n+++ b/astropy/modeling/tests/test_models_quantities.py\n@@ -18,7 +18,7 @@\n from astropy.modeling.physical_models import Drude1D, Plummer1D\n from astropy.modeling.polynomial import Polynomial1D, Polynomial2D\n from astropy.modeling.powerlaws import (\n-    BrokenPowerLaw1D, ExponentialCutoffPowerLaw1D, LogParabola1D, PowerLaw1D,\n+    BrokenPowerLaw1D, ExponentialCutoffPowerLaw1D, LogParabola1D, PowerLaw1D, Schechter1D,\n     SmoothlyBrokenPowerLaw1D)\n from astropy.tests.helper import assert_quantity_allclose\n from astropy.utils.compat.optional_deps import HAS_SCIPY\n@@ -294,6 +294,13 @@\n         'evaluation': [(1 * u.cm, 5 * 0.1 ** (-1 - 2 * np.log(0.1)) * u.kg)],\n         'bounding_box': False\n     },\n+    {\n+        'class': Schechter1D,\n+        'parameters': {'phi_star': 1.e-4 * (u.Mpc ** -3), 'm_star': -20. * u.ABmag,\n+                       'alpha': -1.9},\n+        'evaluation': [(-23 * u.ABmag, 1.002702276867279e-12 * (u.Mpc ** -3))],\n+        'bounding_box': False\n+    },\n ]\n \n POLY_MODELS = [\n@@ -355,7 +362,8 @@\n     PowerLaw1D,\n     ExponentialCutoffPowerLaw1D,\n     BrokenPowerLaw1D,\n-    LogParabola1D\n+    LogParabola1D,\n+    Schechter1D\n ]\n \n # These models will fail the TRFLSQFitter fitting test due to non-finite\n@@ -376,6 +384,7 @@\n     ArcCosine1D,\n     PowerLaw1D,\n     LogParabola1D,\n+    Schechter1D,\n     ExponentialCutoffPowerLaw1D,\n     BrokenPowerLaw1D\n ]\n@@ -429,9 +438,9 @@ def test_models_evaluate_with_units_x_array(model):\n     for args in model['evaluation']:\n         if len(args) == 2:\n             x, y = args\n-            x_arr = u.Quantity([x, x])\n+            x_arr = u.Quantity([x, x], subok=True)\n             result = m(x_arr)\n-            assert_quantity_allclose(result, u.Quantity([y, y]))\n+            assert_quantity_allclose(result, u.Quantity([y, y], subok=True))\n         else:\n             x, y, z = args\n             x_arr = u.Quantity([x, x])\n@@ -460,9 +469,9 @@ def test_models_evaluate_with_units_param_array(model):\n     for args in model['evaluation']:\n         if len(args) == 2:\n             x, y = args\n-            x_arr = u.Quantity([x, x])\n+            x_arr = u.Quantity([x, x], subok=True)\n             result = m(x_arr)\n-            assert_quantity_allclose(result, u.Quantity([y, y]))\n+            assert_quantity_allclose(result, u.Quantity([y, y], subok=True))\n         else:\n             x, y, z = args\n             x_arr = u.Quantity([x, x])\n@@ -660,3 +669,107 @@ def test_input_unit_mismatch_error(model):\n         with pytest.raises(u.UnitsError) as err:\n             m.without_units_for_data(**kwargs)\n         assert str(err.value) == message\n+\n+\n+mag_models = [\n+    {\n+        'class': Const1D,\n+        'parameters': {'amplitude': 3 * u.ABmag},\n+        'evaluation': [(0.6 * u.ABmag, 3 * u.ABmag)],\n+    },\n+    {\n+        'class': Const1D,\n+        'parameters': {'amplitude': 3 * u.ABmag},\n+        'evaluation': [(0.6 * u.mag, 3 * u.ABmag)],\n+    },\n+    {\n+        'class': Const1D,\n+        'parameters': {'amplitude': 3 * u.mag},\n+        'evaluation': [(0.6 * u.ABmag, 3 * u.mag)],\n+    },\n+    {\n+        'class': Const1D,\n+        'parameters': {'amplitude': 3 * u.mag},\n+        'evaluation': [(0.6 * u.mag, 3 * u.mag)],\n+    },\n+    {\n+        'class': Const2D,\n+        'parameters': {'amplitude': 3 * u.ABmag},\n+        'evaluation': [(0.6 * u.micron, 0.2 * u.m, 3 * u.ABmag)],\n+    },\n+    {\n+        'class': Ellipse2D,\n+        'parameters': {'amplitude': 3 * u.ABmag, 'x_0': 3 * u.m, 'y_0': 2 * u.m,\n+                       'a': 300 * u.cm, 'b': 200 * u.cm, 'theta': 45 * u.deg},\n+        'evaluation': [(4 * u.m, 300 * u.cm, 3 * u.ABmag)],\n+    },\n+    {\n+        'class': Disk2D,\n+        'parameters': {'amplitude': 3 * u.ABmag, 'x_0': 3 * u.m, 'y_0': 2 * u.m,\n+                       'R_0': 300 * u.cm},\n+        'evaluation': [(5.8 * u.m, 201 * u.cm, 3 * u.ABmag)],\n+    },\n+    {\n+        'class': Ring2D,\n+        'parameters': {'amplitude': 3 * u.ABmag, 'x_0': 3 * u.m, 'y_0': 2 * u.m,\n+                       'r_in': 2 * u.cm, 'r_out': 2.1 * u.cm},\n+        'evaluation': [(302.05 * u.cm, 2 * u.m + 10 * u.um, 3 * u.ABmag)],\n+    },\n+    {\n+        'class': Box2D,\n+        'parameters': {'amplitude': 3 * u.ABmag, 'x_0': 3 * u.m, 'y_0': 2 * u.s,\n+                       'x_width': 4 * u.cm, 'y_width': 3 * u.s},\n+        'evaluation': [(301 * u.cm, 3 * u.s, 3 * u.ABmag)],\n+    },\n+    {\n+        'class': SmoothlyBrokenPowerLaw1D,\n+        'parameters': {'amplitude': 5 * u.ABmag, 'x_break': 10 * u.cm,\n+                       'alpha_1': 1, 'alpha_2': -1, 'delta': 1},\n+        'evaluation': [(1 * u.cm, 15.125 * u.ABmag), (1 * u.m, 15.125 * u.ABmag)],\n+    },\n+    {\n+        'class': Box1D,\n+        'parameters': {'amplitude': 3 * u.ABmag, 'x_0': 4.4 * u.um, 'width': 1 * u.um},\n+        'evaluation': [(4200 * u.nm, 3 * u.ABmag), (1 * u.m, 0 * u.ABmag)],\n+        'bounding_box': [3.9, 4.9] * u.um\n+    },\n+    {\n+        'class': Schechter1D,\n+        'parameters': {'phi_star': 1.e-4 * (u.Mpc ** -3), 'm_star': -20. * u.ABmag,\n+                       'alpha': -1.9},\n+        'evaluation': [(-23 * u.ABmag, 1.002702276867279e-12 * (u.Mpc ** -3))],\n+    },\n+    {\n+        'class': Schechter1D,\n+        'parameters': {'phi_star': 1.e-4 * (u.Mpc ** -3), 'm_star': -20. * u.mag,\n+                       'alpha': -1.9},\n+        'evaluation': [(-23 * u.mag, 1.002702276867279e-12 * (u.Mpc ** -3))],\n+    },\n+]\n+\n+\n+@pytest.mark.parametrize('model', mag_models)\n+def test_models_evaluate_magunits(model):\n+    if not HAS_SCIPY and model['class'] in SCIPY_MODELS:\n+        pytest.skip()\n+\n+    m = model['class'](**model['parameters'])\n+    for args in model['evaluation']:\n+        assert_quantity_allclose(m(*args[:-1]), args[-1])\n+\n+\n+def test_Schechter1D_errors():\n+    # Non magnitude units are bad\n+    model = Schechter1D(phi_star=1.e-4 * (u.Mpc ** -3), m_star=-20. * u.km, alpha=-1.9)\n+    with pytest.raises(u.UnitsError):\n+        model(-23 * u.km)\n+\n+    # Differing magnitude systems are bad\n+    model = Schechter1D(phi_star=1.e-4 * (u.Mpc ** -3), m_star=-20. * u.ABmag, alpha=-1.9)\n+    with pytest.raises(u.UnitsError):\n+        model(-23 * u.STmag)\n+\n+    # Differing magnitude systems are bad\n+    model = Schechter1D(phi_star=1.e-4 * (u.Mpc ** -3), m_star=-20. * u.ABmag, alpha=-1.9)\n+    with pytest.raises(u.UnitsError):\n+        model(-23 * u.mag)\ndiff --git a/astropy/modeling/tests/test_parameters.py b/astropy/modeling/tests/test_parameters.py\n--- a/astropy/modeling/tests/test_parameters.py\n+++ b/astropy/modeling/tests/test_parameters.py\n@@ -459,6 +459,16 @@ def test__set_unit(self):\n         param._set_unit(u.m, True)\n         assert param.unit == u.m\n \n+        # Force magnitude unit (mag=False)\n+        with pytest.raises(ValueError,\n+                           match=r\"This parameter does not support the magnitude units such as .*\"):\n+            param._set_unit(u.ABmag, True)\n+\n+        # Force magnitude unit (mag=True)\n+        param._mag = True\n+        param._set_unit(u.ABmag, True)\n+        assert param._unit == u.ABmag\n+\n         # No force Error (existing unit)\n         with pytest.raises(ValueError) as err:\n             param._set_unit(u.K)\ndiff --git a/astropy/modeling/tests/test_quantities_parameters.py b/astropy/modeling/tests/test_quantities_parameters.py\n--- a/astropy/modeling/tests/test_quantities_parameters.py\n+++ b/astropy/modeling/tests/test_quantities_parameters.py\n@@ -11,7 +11,8 @@\n from astropy import coordinates as coord\n from astropy import units as u\n from astropy.modeling.core import Fittable1DModel, InputParameterError\n-from astropy.modeling.models import Gaussian1D, Pix2Sky_TAN, RotateNative2Celestial, Rotation2D\n+from astropy.modeling.models import (\n+    Const1D, Gaussian1D, Pix2Sky_TAN, RotateNative2Celestial, Rotation2D)\n from astropy.modeling.parameters import Parameter, ParameterDefinitionError\n from astropy.tests.helper import assert_quantity_allclose\n from astropy.units import UnitsError\n@@ -339,3 +340,13 @@ def test_parameters_compound_models():\n     n2c = RotateNative2Celestial(sky_coords.ra, sky_coords.dec, lon_pole)\n     rot = Rotation2D(23)\n     rot | n2c\n+\n+\n+def test_magunit_parameter():\n+    \"\"\"Regression test for bug reproducer in issue #13133\"\"\"\n+\n+    unit = u.ABmag\n+    c = -20.0 * unit\n+    model = Const1D(c)\n+\n+    assert model(-23.0 * unit) == c\n",
  "problem_statement": "Model evaluation fails if any model parameter is a `MagUnit` type value\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n<!-- Please check that the development version still produces the same bug.\r\nYou can install development version with\r\npip install git+https://github.com/astropy/astropy\r\ncommand. -->\r\n\r\n### Description\r\n<!-- Provide a general description of the bug. -->\r\nAs discovered by @larrybradley in PR #13116, models will fail to evaluate when one of the parameters has a `MagUnit`.\r\n\r\nA simplified reproducer is the following code:\r\n```python\r\nfrom astropy.modeling.models import Const1D\r\nimport astropy.units as u\r\n\r\nunit = u.ABmag\r\nc = -20.0 * unit\r\nmodel = Const1D(c)\r\n\r\nmodel(-23.0 * unit)\r\n```\r\n\r\nThis should evaluate cleanly to `-20.0 * unit`. Instead one gets the following traceback:\r\n```python\r\n---------------------------------------------------------------------------\r\nUnitTypeError                             Traceback (most recent call last)\r\nInput In [1], in <cell line: 8>()\r\n      5 c = -20.0 * unit\r\n      6 model = Const1D(c)\r\n----> 8 model(-23.0 * unit)\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:397, in __call__(self, model_set_axis, with_bounding_box, fill_value, equivalencies, inputs_map, *inputs, **new_inputs)\r\n    390 args = ('self',)\r\n    391 kwargs = dict([('model_set_axis', None),\r\n    392                ('with_bounding_box', False),\r\n    393                ('fill_value', np.nan),\r\n    394                ('equivalencies', None),\r\n    395                ('inputs_map', None)])\r\n--> 397 new_call = make_function_with_signature(\r\n    398     __call__, args, kwargs, varargs='inputs', varkwargs='new_inputs')\r\n    400 # The following makes it look like __call__\r\n    401 # was defined in the class\r\n    402 update_wrapper(new_call, cls)\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:376, in _ModelMeta._handle_special_methods.<locals>.__call__(self, *inputs, **kwargs)\r\n    374 def __call__(self, *inputs, **kwargs):\r\n    375     \"\"\"Evaluate this model on the supplied inputs.\"\"\"\r\n--> 376     return super(cls, self).__call__(*inputs, **kwargs)\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:1077, in Model.__call__(self, *args, **kwargs)\r\n   1074 fill_value = kwargs.pop('fill_value', np.nan)\r\n   1076 # prepare for model evaluation (overridden in CompoundModel)\r\n-> 1077 evaluate, inputs, broadcasted_shapes, kwargs = self._pre_evaluate(*args, **kwargs)\r\n   1079 outputs = self._generic_evaluate(evaluate, inputs,\r\n   1080                                  fill_value, with_bbox)\r\n   1082 # post-process evaluation results (overridden in CompoundModel)\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:936, in Model._pre_evaluate(self, *args, **kwargs)\r\n    933 inputs, broadcasted_shapes = self.prepare_inputs(*args, **kwargs)\r\n    935 # Setup actual model evaluation method\r\n--> 936 parameters = self._param_sets(raw=True, units=True)\r\n    938 def evaluate(_inputs):\r\n    939     return self.evaluate(*chain(_inputs, parameters))\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:2704, in Model._param_sets(self, raw, units)\r\n   2702             unit = param.unit\r\n   2703         if unit is not None:\r\n-> 2704             value = Quantity(value, unit)\r\n   2706     values.append(value)\r\n   2708 if len(set(shapes)) != 1 or units:\r\n   2709     # If the parameters are not all the same shape, converting to an\r\n   2710     # array is going to produce an object array\r\n   (...)\r\n   2715     # arrays.  There's not much reason to do this over returning a list\r\n   2716     # except for consistency\r\n\r\nFile ~/projects/astropy/astropy/units/quantity.py:522, in Quantity.__new__(cls, value, unit, dtype, copy, order, subok, ndmin)\r\n    519         cls = qcls\r\n    521 value = value.view(cls)\r\n--> 522 value._set_unit(value_unit)\r\n    523 if unit is value_unit:\r\n    524     return value\r\n\r\nFile ~/projects/astropy/astropy/units/quantity.py:764, in Quantity._set_unit(self, unit)\r\n    762         unit = Unit(str(unit), parse_strict='silent')\r\n    763         if not isinstance(unit, (UnitBase, StructuredUnit)):\r\n--> 764             raise UnitTypeError(\r\n    765                 \"{} instances require normal units, not {} instances.\"\r\n    766                 .format(type(self).__name__, type(unit)))\r\n    768 self._unit = unit\r\n\r\nUnitTypeError: Quantity instances require normal units, not <class 'astropy.units.function.logarithmic.MagUnit'> instances.\r\n```\r\n\r\nI believe the issue might lie in `astropy.modeling.core` with this call:\r\nhttps://github.com/astropy/astropy/blob/675dc03e138d5c6a1cb6936a6b2c3211f39049d3/astropy/modeling/core.py#L2703-L2704\r\n\r\nI think more sophisticated logic for handling turning parameters into quantity like values needs to be included here, or possibly a refactor of the [`._param_sets`](https://github.com/astropy/astropy/blob/675dc03e138d5c6a1cb6936a6b2c3211f39049d3/astropy/modeling/core.py#L2662) method in general. I would like some input from those with more familiarity with the intricacies of the `astropy.units` for assistance with how to improve this logic.\r\n\r\n### System Details\r\n<!-- Even if you do not think this is necessary, it is useful information for the maintainers.\r\nPlease run the following snippet and paste the output below:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"Numpy\", numpy.__version__)\r\nimport erfa; print(\"pyerfa\", erfa.__version__)\r\nimport astropy; print(\"astropy\", astropy.__version__)\r\nimport scipy; print(\"Scipy\", scipy.__version__)\r\nimport matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\n-->\r\n```\r\nmacOS-10.15.7-x86_64-i386-64bit\r\nPython 3.9.10 (main, Feb  4 2022, 14:54:08)\r\n[Clang 12.0.0 (clang-1200.0.32.29)]\r\nNumpy 1.22.3\r\npyerfa 2.0.0.1\r\nastropy 5.1.dev901+g675dc03e1\r\nScipy 1.8.0\r\nMatplotlib 3.5.1\r\n```\n",
  "hints_text": "Note that the simple change of https://github.com/astropy/astropy/blob/675dc03e138d5c6a1cb6936a6b2c3211f39049d3/astropy/modeling/core.py#L2704\r\nto `value = value * unit` with the above example still passes all the modeling unit tests. However, it produces a different error\r\n```python\r\n---------------------------------------------------------------------------\r\nUnitTypeError                             Traceback (most recent call last)\r\nInput In [1], in <cell line: 8>()\r\n      5 c = -20.0 * unit\r\n      6 model = Const1D(c)\r\n----> 8 model(-23.0 * unit)\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:397, in __call__(self, model_set_axis, with_bounding_box, fill_value, equivalencies, inputs_map, *inputs, **new_inputs)\r\n    390 args = ('self',)\r\n    391 kwargs = dict([('model_set_axis', None),\r\n    392                ('with_bounding_box', False),\r\n    393                ('fill_value', np.nan),\r\n    394                ('equivalencies', None),\r\n    395                ('inputs_map', None)])\r\n--> 397 new_call = make_function_with_signature(\r\n    398     __call__, args, kwargs, varargs='inputs', varkwargs='new_inputs')\r\n    400 # The following makes it look like __call__\r\n    401 # was defined in the class\r\n    402 update_wrapper(new_call, cls)\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:376, in _ModelMeta._handle_special_methods.<locals>.__call__(self, *inputs, **kwargs)\r\n    374 def __call__(self, *inputs, **kwargs):\r\n    375     \"\"\"Evaluate this model on the supplied inputs.\"\"\"\r\n--> 376     return super(cls, self).__call__(*inputs, **kwargs)\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:1079, in Model.__call__(self, *args, **kwargs)\r\n   1076 # prepare for model evaluation (overridden in CompoundModel)\r\n   1077 evaluate, inputs, broadcasted_shapes, kwargs = self._pre_evaluate(*args, **kwargs)\r\n-> 1079 outputs = self._generic_evaluate(evaluate, inputs,\r\n   1080                                  fill_value, with_bbox)\r\n   1082 # post-process evaluation results (overridden in CompoundModel)\r\n   1083 return self._post_evaluate(inputs, outputs, broadcasted_shapes, with_bbox, **kwargs)\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:1043, in Model._generic_evaluate(self, evaluate, _inputs, fill_value, with_bbox)\r\n   1041     outputs = bbox.evaluate(evaluate, _inputs, fill_value)\r\n   1042 else:\r\n-> 1043     outputs = evaluate(_inputs)\r\n   1044 return outputs\r\n\r\nFile ~/projects/astropy/astropy/modeling/core.py:939, in Model._pre_evaluate.<locals>.evaluate(_inputs)\r\n    938 def evaluate(_inputs):\r\n--> 939     return self.evaluate(*chain(_inputs, parameters))\r\n\r\nFile ~/projects/astropy/astropy/modeling/functional_models.py:1805, in Const1D.evaluate(x, amplitude)\r\n   1802     x = amplitude * np.ones_like(x, subok=False)\r\n   1804 if isinstance(amplitude, Quantity):\r\n-> 1805     return Quantity(x, unit=amplitude.unit, copy=False)\r\n   1806 return x\r\n\r\nFile ~/projects/astropy/astropy/units/quantity.py:522, in Quantity.__new__(cls, value, unit, dtype, copy, order, subok, ndmin)\r\n    519         cls = qcls\r\n    521 value = value.view(cls)\r\n--> 522 value._set_unit(value_unit)\r\n    523 if unit is value_unit:\r\n    524     return value\r\n\r\nFile ~/projects/astropy/astropy/units/quantity.py:764, in Quantity._set_unit(self, unit)\r\n    762         unit = Unit(str(unit), parse_strict='silent')\r\n    763         if not isinstance(unit, (UnitBase, StructuredUnit)):\r\n--> 764             raise UnitTypeError(\r\n    765                 \"{} instances require normal units, not {} instances.\"\r\n    766                 .format(type(self).__name__, type(unit)))\r\n    768 self._unit = unit\r\n\r\nUnitTypeError: Quantity instances require normal units, not <class 'astropy.units.function.logarithmic.MagUnit'> instances.\r\n```\nMagnitude is such a headache. Maybe we should just stop supporting it altogether... _hides_\r\n\r\nMore seriously, maybe @mhvk has ideas.\nThe problem is that `Quantity(...)` by default creates a `Quantity`, which seems quite logical. But `Magnitude` is a subclass.... This is also why multiplying with the unit does work. I *think* adding `subok=True` for the `Quantity` initializations should fix the specific problems, though I fear it may well break elsewhere... \r\n\r\np.s. It does make me wonder if one shouldn't just return a subclass in the first place if the unit asks for that.\n> The problem is that `Quantity(...)` by default creates a `Quantity`, which seems quite logical. But `Magnitude` is a subclass.... This is also why multiplying with the unit does work. I _think_ adding `subok=True` for the `Quantity` initializations should fix the specific problems, though I fear it may well break elsewhere...\r\n\r\nFor my reproducer adding `subok=True` everywhere in the call stack that uses `Quantity(...)` does prevent mitigate the bug. I guess a possible fix for this bug is to ensure that `Quantity` calls in modeling include this optional argument.\r\n\r\n> p.s. It does make me wonder if one shouldn't just return a subclass in the first place if the unit asks for that.\r\n\r\nThis change could make things a bit easier for modeling. I'm not sure why this is not the default.",
  "created_at": "2022-04-22T17:32:23Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model38]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model38]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model38]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model0]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model1]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model4]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model5]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model6]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model7]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model8]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model9]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model10]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model11]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model12]\", \"astropy/modeling/tests/test_models_quantities.py::test_Schechter1D_errors\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test__set_unit\", \"astropy/modeling/tests/test_quantities_parameters.py::test_magunit_parameter\"]",
  "PASS_TO_PASS": "[\"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model0]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model2]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model3]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model4]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model5]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model6]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model7]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model8]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model9]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model10]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model11]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model12]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model13]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model14]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model15]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model16]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model17]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model18]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model19]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model20]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model21]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model22]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model23]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model24]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model25]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model26]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model27]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model28]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model30]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model32]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model33]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model34]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model35]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model36]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model37]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model38]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model39]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model40]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model41]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model42]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model43]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model44]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model45]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_without_units[model46]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model0]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model2]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model3]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model4]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model5]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model6]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model7]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model8]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model9]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model10]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model11]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model12]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model13]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model14]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model15]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model16]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model17]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model18]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model19]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model20]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model21]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model22]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model23]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model24]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model25]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model26]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model27]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model28]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model30]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model32]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model33]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model34]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model35]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model36]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model37]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model39]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model40]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model41]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model42]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model43]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model44]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model45]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units[model46]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model0]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model2]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model3]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model4]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model5]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model6]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model7]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model8]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model9]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model10]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model11]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model12]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model13]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model14]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model15]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model16]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model17]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model18]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model19]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model20]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model21]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model22]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model23]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model24]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model25]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model26]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model27]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model28]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model30]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model32]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model33]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model34]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model35]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model36]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model37]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model39]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model40]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model41]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model42]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model43]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model44]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model45]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_x_array[model46]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model0]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model2]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model3]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model4]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model5]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model6]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model7]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model8]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model9]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model10]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model11]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model12]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model13]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model14]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model15]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model16]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model17]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model18]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model19]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model20]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model21]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model22]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model23]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model24]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model25]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model26]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model27]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model28]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model30]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model32]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model33]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model34]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model35]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model36]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model37]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model39]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model40]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model41]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model42]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model43]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model44]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model45]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_with_units_param_array[model46]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model0]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model2]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model3]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model4]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model5]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model6]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model7]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model8]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model9]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model10]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model11]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model12]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model13]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model14]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model15]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model16]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model17]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model18]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model19]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model20]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model21]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model22]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model23]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model24]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model25]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model26]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model27]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model28]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model30]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model32]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model33]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model34]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model35]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model36]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model37]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model38]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model39]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model40]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model41]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model42]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model43]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model44]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model45]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_bounding_box[model46]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model0]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model1]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model2]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model3]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model4]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model5]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model6]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model7]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model8]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model9]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model10]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model11]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model12]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model13]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model14]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model15]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model16]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model17]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model18]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model19]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model20]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model21]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model22]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model23]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model24]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model25]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model26]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model27]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model28]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model29]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model30]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model31]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model32]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model33]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model34]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model35]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model36]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model37]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model38]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model39]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model40]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model41]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model42]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model43]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model44]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model45]\", \"astropy/modeling/tests/test_models_quantities.py::test_compound_model_input_units_equivalencies_defaults[model46]\", \"astropy/modeling/tests/test_models_quantities.py::test_input_unit_mismatch_error[model0]\", \"astropy/modeling/tests/test_models_quantities.py::test_input_unit_mismatch_error[model1]\", \"astropy/modeling/tests/test_models_quantities.py::test_input_unit_mismatch_error[model2]\", \"astropy/modeling/tests/test_models_quantities.py::test_input_unit_mismatch_error[model3]\", \"astropy/modeling/tests/test_models_quantities.py::test_input_unit_mismatch_error[model4]\", \"astropy/modeling/tests/test_models_quantities.py::test_input_unit_mismatch_error[model5]\", \"astropy/modeling/tests/test_models_quantities.py::test_input_unit_mismatch_error[model7]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model2]\", \"astropy/modeling/tests/test_models_quantities.py::test_models_evaluate_magunits[model3]\", \"astropy/modeling/tests/test_parameters.py::test__tofloat\", \"astropy/modeling/tests/test_parameters.py::test_parameter_properties\", \"astropy/modeling/tests/test_parameters.py::test_parameter_operators\", \"astropy/modeling/tests/test_parameters.py::test_parameter_inheritance\", \"astropy/modeling/tests/test_parameters.py::test_param_metric\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_set_parameters_as_list\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_set_parameters_as_array\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_set_as_tuple\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_set_model_attr_seq\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_set_model_attr_num\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_set_item\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_wrong_size1\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_wrong_size2\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_wrong_shape\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_par_against_iraf\", \"astropy/modeling/tests/test_parameters.py::TestParameters::testPolynomial1D\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_poly1d_multiple_sets\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_par_slicing\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_poly2d\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_poly2d_multiple_sets\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_shift_model_parameters1d\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_scale_model_parametersnd\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_bounds\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_modify_value\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_quantity\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_size\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_std\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_fixed\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_tied\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_validator\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_validate\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_copy\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_model\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_raw_value\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test__create_value_wrapper\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_bool\", \"astropy/modeling/tests/test_parameters.py::TestParameters::test_param_repr_oneline\", \"astropy/modeling/tests/test_parameters.py::TestMultipleParameterSets::test_change_par\", \"astropy/modeling/tests/test_parameters.py::TestMultipleParameterSets::test_change_par2\", \"astropy/modeling/tests/test_parameters.py::TestMultipleParameterSets::test_change_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_single_model_scalar_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_single_model_scalar_and_array_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_single_model_1d_array_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_single_model_1d_array_different_length_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_single_model_2d_array_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_single_model_2d_non_square_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_single_model_2d_broadcastable_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_incorrect_scalar_parameters[1-2]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_incorrect_scalar_parameters[1-p21]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_incorrect_scalar_parameters[p12-3]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_incorrect_scalar_parameters[p13-p23]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_incorrect_scalar_parameters[p14-p24]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_scalar_parameters[kwargs0]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_scalar_parameters[kwargs1]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_scalar_parameters[kwargs2]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_scalar_and_array_parameters[kwargs0]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_scalar_and_array_parameters[kwargs1]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_scalar_and_array_parameters[kwargs2]\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_1d_array_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_mixed_dimension_array_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_2d_array_parameters\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_two_model_nonzero_model_set_axis\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_wrong_number_of_params\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_wrong_number_of_params2\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_array_parameter1\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_array_parameter2\", \"astropy/modeling/tests/test_parameters.py::TestParameterInitialization::test_array_parameter4\", \"astropy/modeling/tests/test_parameters.py::test_non_broadcasting_parameters\", \"astropy/modeling/tests/test_parameters.py::test_setter\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_quantity\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_set_quantity\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_lose_units\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_add_units\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_change_unit\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_set_value\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_quantity_property\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_default_units_match\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_defaults[unit0-1.0]\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_defaults[None-default1]\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_quantity_arithmetic\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameter_quantity_comparison\", \"astropy/modeling/tests/test_quantities_parameters.py::test_parameters_compound_models\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.526445",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}