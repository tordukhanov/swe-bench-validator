{
  "repo": "django/django",
  "instance_id": "django__django-13886",
  "base_commit": "76ae6ccf859bf677bfcb5b992f4c17f5af80ae9d",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1624,6 +1624,7 @@ def _check_unique_together(cls):\n     def _check_indexes(cls, databases):\n         \"\"\"Check fields, names, and conditions of indexes.\"\"\"\n         errors = []\n+        references = set()\n         for index in cls._meta.indexes:\n             # Index name can't start with an underscore or a number, restricted\n             # for cross-database compatibility with Oracle.\n@@ -1645,6 +1646,11 @@ def _check_indexes(cls, databases):\n                         id='models.E034',\n                     ),\n                 )\n+            if index.contains_expressions:\n+                for expression in index.expressions:\n+                    references.update(\n+                        ref[0] for ref in cls._get_expr_references(expression)\n+                    )\n         for db in databases:\n             if not router.allow_migrate_model(db, cls):\n                 continue\n@@ -1699,6 +1705,7 @@ def _check_indexes(cls, databases):\n                 )\n         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]\n         fields += [include for index in cls._meta.indexes for include in index.include]\n+        fields += references\n         errors.extend(cls._check_local_fields(fields, 'indexes'))\n         return errors\n \n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -3,7 +3,7 @@\n from django.core.checks import Error, Warning\n from django.core.checks.model_checks import _check_lazy_references\n from django.db import connection, connections, models\n-from django.db.models.functions import Lower\n+from django.db.models.functions import Abs, Lower, Round\n from django.db.models.signals import post_init\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import isolate_apps, override_settings, register_lookup\n@@ -525,6 +525,99 @@ class Meta:\n \n         self.assertEqual(Model.check(databases=self.databases), [])\n \n+    def test_func_index_complex_expression_custom_lookup(self):\n+        class Model(models.Model):\n+            height = models.IntegerField()\n+            weight = models.IntegerField()\n+\n+            class Meta:\n+                indexes = [\n+                    models.Index(\n+                        models.F('height') / (models.F('weight__abs') + models.Value(5)),\n+                        name='name',\n+                    ),\n+                ]\n+\n+        with register_lookup(models.IntegerField, Abs):\n+            self.assertEqual(Model.check(), [])\n+\n+    def test_func_index_pointing_to_missing_field(self):\n+        class Model(models.Model):\n+            class Meta:\n+                indexes = [models.Index(Lower('missing_field').desc(), name='name')]\n+\n+        self.assertEqual(Model.check(), [\n+            Error(\n+                \"'indexes' refers to the nonexistent field 'missing_field'.\",\n+                obj=Model,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+    def test_func_index_pointing_to_missing_field_nested(self):\n+        class Model(models.Model):\n+            class Meta:\n+                indexes = [\n+                    models.Index(Abs(Round('missing_field')), name='name'),\n+                ]\n+\n+        self.assertEqual(Model.check(), [\n+            Error(\n+                \"'indexes' refers to the nonexistent field 'missing_field'.\",\n+                obj=Model,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+    def test_func_index_pointing_to_m2m_field(self):\n+        class Model(models.Model):\n+            m2m = models.ManyToManyField('self')\n+\n+            class Meta:\n+                indexes = [models.Index(Lower('m2m'), name='name')]\n+\n+        self.assertEqual(Model.check(), [\n+            Error(\n+                \"'indexes' refers to a ManyToManyField 'm2m', but \"\n+                \"ManyToManyFields are not permitted in 'indexes'.\",\n+                obj=Model,\n+                id='models.E013',\n+            ),\n+        ])\n+\n+    def test_func_index_pointing_to_non_local_field(self):\n+        class Foo(models.Model):\n+            field1 = models.CharField(max_length=15)\n+\n+        class Bar(Foo):\n+            class Meta:\n+                indexes = [models.Index(Lower('field1'), name='name')]\n+\n+        self.assertEqual(Bar.check(), [\n+            Error(\n+                \"'indexes' refers to field 'field1' which is not local to \"\n+                \"model 'Bar'.\",\n+                hint='This issue may be caused by multi-table inheritance.',\n+                obj=Bar,\n+                id='models.E016',\n+            ),\n+        ])\n+\n+    def test_func_index_pointing_to_fk(self):\n+        class Foo(models.Model):\n+            pass\n+\n+        class Bar(models.Model):\n+            foo_1 = models.ForeignKey(Foo, models.CASCADE, related_name='bar_1')\n+            foo_2 = models.ForeignKey(Foo, models.CASCADE, related_name='bar_2')\n+\n+            class Meta:\n+                indexes = [\n+                    models.Index(Lower('foo_1_id'), Lower('foo_2'), name='index_name'),\n+                ]\n+\n+        self.assertEqual(Bar.check(), [])\n+\n \n @isolate_apps('invalid_models_tests')\n class FieldNamesTests(TestCase):\n",
  "problem_statement": "Add system checks for invalid model field names for functional indexes in Meta.indexes.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nThe current system checks don't cover invalid models fields in functional indexes. This is not straightforward because resolving expressions with non-existent throws FieldError, so we cannot just collect columns from Query._gen_cols().\nFollow up to #26167.\nI attached tests.\n",
  "hints_text": "Tests.\nMariusz, When I try to run the tests that you added to the ticket, I get ValueError('Index.fields must be a list or tuple.') it means currently, models.Index doesn't support models.F('height') / (models.F('weight__abs') + models.Value(5)) and Lower('missing_field').desc() as index fields. Should we add support for these kinds of fields to models.Index?\nSorry Hasan, I should mark this ticket as \"someday\", it's a follow up to #26167. It will be valid after merging â€‹PR.",
  "created_at": "2021-01-13T19:46:04Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_func_index_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_missing_field_nested (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests)\"]",
  "PASS_TO_PASS": "[\"test_db_column_clash (invalid_models_tests.test_models.FieldNamesTests)\", \"test_ending_with_underscore (invalid_models_tests.test_models.FieldNamesTests)\", \"test_including_separator (invalid_models_tests.test_models.FieldNamesTests)\", \"test_pk (invalid_models_tests.test_models.FieldNamesTests)\", \"test_check_jsonfield (invalid_models_tests.test_models.JSONFieldTests)\", \"test_check_jsonfield_required_db_features (invalid_models_tests.test_models.JSONFieldTests)\", \"test_ordering_pointing_to_json_field_value (invalid_models_tests.test_models.JSONFieldTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_list (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_list (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_m2m (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_valid_model (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_field_name_clash_with_child_accessor (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_id_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_inheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multigeneration_inheritance (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multiinheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_check_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_joined_fields_complex_check (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_pk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_reverse_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraints (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraints_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_deferrable_unique_constraint (invalid_models_tests.test_models.ConstraintsTests)\", \"test_deferrable_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_condition_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_condition_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_condition (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_condition_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_include (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_include_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_index (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_complex_expression_custom_lookup (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_fk (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_required_db_features (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_condition (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_condition_required_db_features (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_include (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_include_required_db_features (invalid_models_tests.test_models.IndexesTests)\", \"test_max_name_length (invalid_models_tests.test_models.IndexesTests)\", \"test_name_constraints (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests)\", \"test_just_order_with_respect_to_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_just_ordering_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_lazy_reference_checks (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_autogenerated_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_autogenerated_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_field_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_field_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_to_concrete_and_proxy_allowed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_unmanaged_shadow_models_not_checked (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_beginning_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_contains_double_underscores (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_ending_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_non_valid (invalid_models_tests.test_models.OtherModelTests)\", \"test_onetoone_with_explicit_parent_link_parent_model (invalid_models_tests.test_models.OtherModelTests)\", \"test_onetoone_with_parent_model (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_allows_registered_lookups (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_non_iterable (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_multiple_times_to_model_fields (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_lookup_not_transform (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_non_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_related_model_pk (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_two_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_with_order_with_respect_to (invalid_models_tests.test_models.OtherModelTests)\", \"test_property_and_related_field_accessor_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_single_primary_key (invalid_models_tests.test_models.OtherModelTests)\", \"test_swappable_missing_app (invalid_models_tests.test_models.OtherModelTests)\", \"test_swappable_missing_app_name (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_m2m_through_same_model_with_different_through_fields (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_m2m_through_same_relationship (invalid_models_tests.test_models.OtherModelTests)\", \"test_unique_primary_key (invalid_models_tests.test_models.OtherModelTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.673343",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}