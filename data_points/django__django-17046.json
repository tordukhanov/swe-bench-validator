{
  "repo": "django/django",
  "instance_id": "django__django-17046",
  "base_commit": "95cdf9dc6627135f3893095892816eb3f2785e2e",
  "patch": "diff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -29,7 +29,7 @@\n     SuspiciousOperation,\n )\n from django.core.paginator import InvalidPage\n-from django.db.models import Exists, F, Field, ManyToOneRel, OrderBy, OuterRef\n+from django.db.models import F, Field, ManyToOneRel, OrderBy\n from django.db.models.expressions import Combinable\n from django.urls import reverse\n from django.utils.deprecation import RemovedInDjango60Warning\n@@ -566,6 +566,13 @@ def get_queryset(self, request, exclude_parameters=None):\n             # ValueError, ValidationError, or ?.\n             raise IncorrectLookupParameters(e)\n \n+        if not qs.query.select_related:\n+            qs = self.apply_select_related(qs)\n+\n+        # Set ordering.\n+        ordering = self.get_ordering(request, qs)\n+        qs = qs.order_by(*ordering)\n+\n         # Apply search results\n         qs, search_may_have_duplicates = self.model_admin.get_search_results(\n             request,\n@@ -580,17 +587,9 @@ def get_queryset(self, request, exclude_parameters=None):\n         )\n         # Remove duplicates from results, if necessary\n         if filters_may_have_duplicates | search_may_have_duplicates:\n-            qs = qs.filter(pk=OuterRef(\"pk\"))\n-            qs = self.root_queryset.filter(Exists(qs))\n-\n-        # Set ordering.\n-        ordering = self.get_ordering(request, qs)\n-        qs = qs.order_by(*ordering)\n-\n-        if not qs.query.select_related:\n-            qs = self.apply_select_related(qs)\n-\n-        return qs\n+            return qs.distinct()\n+        else:\n+            return qs\n \n     def apply_select_related(self, qs):\n         if self.list_select_related is True:\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1135,8 +1135,8 @@ def delete(self):\n         self._not_support_combined_queries(\"delete\")\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot use 'limit' or 'offset' with delete().\")\n-        if self.query.distinct or self.query.distinct_fields:\n-            raise TypeError(\"Cannot call delete() after .distinct().\")\n+        if self.query.distinct_fields:\n+            raise TypeError(\"Cannot call delete() after .distinct(*fields).\")\n         if self._fields is not None:\n             raise TypeError(\"Cannot call delete() after .values() or .values_list()\")\n \n",
  "test_patch": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -467,7 +467,7 @@ def test_custom_paginator(self):\n         cl.get_results(request)\n         self.assertIsInstance(cl.paginator, CustomPaginator)\n \n-    def test_no_duplicates_for_m2m_in_list_filter(self):\n+    def test_distinct_for_m2m_in_list_filter(self):\n         \"\"\"\n         Regression test for #13902: When using a ManyToMany in list_filter,\n         results shouldn't appear more than once. Basic ManyToMany.\n@@ -488,11 +488,10 @@ def test_no_duplicates_for_m2m_in_list_filter(self):\n         # There's only one Group instance\n         self.assertEqual(cl.result_count, 1)\n         # Queryset must be deletable.\n-        self.assertIs(cl.queryset.query.distinct, False)\n         cl.queryset.delete()\n         self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_no_duplicates_for_through_m2m_in_list_filter(self):\n+    def test_distinct_for_through_m2m_in_list_filter(self):\n         \"\"\"\n         Regression test for #13902: When using a ManyToMany in list_filter,\n         results shouldn't appear more than once. With an intermediate model.\n@@ -512,14 +511,14 @@ def test_no_duplicates_for_through_m2m_in_list_filter(self):\n         # There's only one Group instance\n         self.assertEqual(cl.result_count, 1)\n         # Queryset must be deletable.\n-        self.assertIs(cl.queryset.query.distinct, False)\n         cl.queryset.delete()\n         self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_no_duplicates_for_through_m2m_at_second_level_in_list_filter(self):\n+    def test_distinct_for_through_m2m_at_second_level_in_list_filter(self):\n         \"\"\"\n         When using a ManyToMany in list_filter at the second level behind a\n-        ForeignKey, results shouldn't appear more than once.\n+        ForeignKey, distinct() must be called and results shouldn't appear more\n+        than once.\n         \"\"\"\n         lead = Musician.objects.create(name=\"Vox\")\n         band = Group.objects.create(name=\"The Hype\")\n@@ -537,11 +536,10 @@ def test_no_duplicates_for_through_m2m_at_second_level_in_list_filter(self):\n         # There's only one Concert instance\n         self.assertEqual(cl.result_count, 1)\n         # Queryset must be deletable.\n-        self.assertIs(cl.queryset.query.distinct, False)\n         cl.queryset.delete()\n         self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_no_duplicates_for_inherited_m2m_in_list_filter(self):\n+    def test_distinct_for_inherited_m2m_in_list_filter(self):\n         \"\"\"\n         Regression test for #13902: When using a ManyToMany in list_filter,\n         results shouldn't appear more than once. Model managed in the\n@@ -562,11 +560,10 @@ def test_no_duplicates_for_inherited_m2m_in_list_filter(self):\n         # There's only one Quartet instance\n         self.assertEqual(cl.result_count, 1)\n         # Queryset must be deletable.\n-        self.assertIs(cl.queryset.query.distinct, False)\n         cl.queryset.delete()\n         self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_no_duplicates_for_m2m_to_inherited_in_list_filter(self):\n+    def test_distinct_for_m2m_to_inherited_in_list_filter(self):\n         \"\"\"\n         Regression test for #13902: When using a ManyToMany in list_filter,\n         results shouldn't appear more than once. Target of the relationship\n@@ -586,15 +583,11 @@ def test_no_duplicates_for_m2m_to_inherited_in_list_filter(self):\n \n         # There's only one ChordsBand instance\n         self.assertEqual(cl.result_count, 1)\n-        # Queryset must be deletable.\n-        self.assertIs(cl.queryset.query.distinct, False)\n-        cl.queryset.delete()\n-        self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_no_duplicates_for_non_unique_related_object_in_list_filter(self):\n+    def test_distinct_for_non_unique_related_object_in_list_filter(self):\n         \"\"\"\n-        Regressions tests for #15819: If a field listed in list_filters is a\n-        non-unique related object, results shouldn't appear more than once.\n+        Regressions tests for #15819: If a field listed in list_filters\n+        is a non-unique related object, distinct() must be called.\n         \"\"\"\n         parent = Parent.objects.create(name=\"Mary\")\n         # Two children with the same name\n@@ -606,10 +599,9 @@ def test_no_duplicates_for_non_unique_related_object_in_list_filter(self):\n         request.user = self.superuser\n \n         cl = m.get_changelist_instance(request)\n-        # Exists() is applied.\n+        # Make sure distinct() was called\n         self.assertEqual(cl.queryset.count(), 1)\n         # Queryset must be deletable.\n-        self.assertIs(cl.queryset.query.distinct, False)\n         cl.queryset.delete()\n         self.assertEqual(cl.queryset.count(), 0)\n \n@@ -629,10 +621,10 @@ def test_changelist_search_form_validation(self):\n                 self.assertEqual(1, len(messages))\n                 self.assertEqual(error, messages[0])\n \n-    def test_no_duplicates_for_non_unique_related_object_in_search_fields(self):\n+    def test_distinct_for_non_unique_related_object_in_search_fields(self):\n         \"\"\"\n         Regressions tests for #15819: If a field listed in search_fields\n-        is a non-unique related object, Exists() must be applied.\n+        is a non-unique related object, distinct() must be called.\n         \"\"\"\n         parent = Parent.objects.create(name=\"Mary\")\n         Child.objects.create(parent=parent, name=\"Danielle\")\n@@ -643,17 +635,16 @@ def test_no_duplicates_for_non_unique_related_object_in_search_fields(self):\n         request.user = self.superuser\n \n         cl = m.get_changelist_instance(request)\n-        # Exists() is applied.\n+        # Make sure distinct() was called\n         self.assertEqual(cl.queryset.count(), 1)\n         # Queryset must be deletable.\n-        self.assertIs(cl.queryset.query.distinct, False)\n         cl.queryset.delete()\n         self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_no_duplicates_for_many_to_many_at_second_level_in_search_fields(self):\n+    def test_distinct_for_many_to_many_at_second_level_in_search_fields(self):\n         \"\"\"\n         When using a ManyToMany in search_fields at the second level behind a\n-        ForeignKey, Exists() must be applied and results shouldn't appear more\n+        ForeignKey, distinct() must be called and results shouldn't appear more\n         than once.\n         \"\"\"\n         lead = Musician.objects.create(name=\"Vox\")\n@@ -670,7 +661,6 @@ def test_no_duplicates_for_many_to_many_at_second_level_in_search_fields(self):\n         # There's only one Concert instance\n         self.assertEqual(cl.queryset.count(), 1)\n         # Queryset must be deletable.\n-        self.assertIs(cl.queryset.query.distinct, False)\n         cl.queryset.delete()\n         self.assertEqual(cl.queryset.count(), 0)\n \n@@ -820,23 +810,23 @@ def test_custom_lookup_with_pk_shortcut(self):\n         cl = m.get_changelist_instance(request)\n         self.assertCountEqual(cl.queryset, [abcd])\n \n-    def test_no_exists_for_m2m_in_list_filter_without_params(self):\n+    def test_no_distinct_for_m2m_in_list_filter_without_params(self):\n         \"\"\"\n         If a ManyToManyField is in list_filter but isn't in any lookup params,\n-        the changelist's query shouldn't have Exists().\n+        the changelist's query shouldn't have distinct.\n         \"\"\"\n         m = BandAdmin(Band, custom_site)\n         for lookup_params in ({}, {\"name\": \"test\"}):\n             request = self.factory.get(\"/band/\", lookup_params)\n             request.user = self.superuser\n             cl = m.get_changelist_instance(request)\n-            self.assertNotIn(\" EXISTS\", str(cl.queryset.query))\n+            self.assertIs(cl.queryset.query.distinct, False)\n \n-        # A ManyToManyField in params does have Exists() applied.\n+        # A ManyToManyField in params does have distinct applied.\n         request = self.factory.get(\"/band/\", {\"genres\": \"0\"})\n         request.user = self.superuser\n         cl = m.get_changelist_instance(request)\n-        self.assertIn(\" EXISTS\", str(cl.queryset.query))\n+        self.assertIs(cl.queryset.query.distinct, True)\n \n     def test_pagination(self):\n         \"\"\"\ndiff --git a/tests/delete_regress/tests.py b/tests/delete_regress/tests.py\n--- a/tests/delete_regress/tests.py\n+++ b/tests/delete_regress/tests.py\n@@ -396,10 +396,8 @@ def test_self_reference_with_through_m2m_at_second_level(self):\n \n \n class DeleteDistinct(SimpleTestCase):\n-    def test_disallowed_delete_distinct(self):\n-        msg = \"Cannot call delete() after .distinct().\"\n-        with self.assertRaisesMessage(TypeError, msg):\n-            Book.objects.distinct().delete()\n+    def test_disallowed_delete_distinct_on(self):\n+        msg = \"Cannot call delete() after .distinct(*fields).\"\n         with self.assertRaisesMessage(TypeError, msg):\n             Book.objects.distinct(\"id\").delete()\n \n",
  "problem_statement": "Deleting objects after searching related many to many field crashes the admin page\nDescription\n\t\nMinimal reproduction:\n# models.py\nclass Post(models.Model):\n title = models.String(...)\n authors = models.ManyToMany(\"User\", ...)\nclass User(models.Model):\n email = models.String(...)\n# admin.py\nclass PostAdmin(admin.ModelAdmin):\n search_fields = (\"title\", \"authors__email\")\nthen opening the admin site, opening the post page that contains only one post (any title and author assigned) and entering a search term (e.g the first 2 characters of the title), selecting the post and then using the delete action results in an Internal Sever Error 500 with an error/stack-trace:\nInternal Server Error: /admin/post/post/\nTraceback (most recent call last):\n File \"...lib/python3.7/site-packages/django/core/handlers/exception.py\", line 47, in inner\n\tresponse = get_response(request)\n File \"...lib/python3.7/site-packages/django/core/handlers/base.py\", line 181, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n File \"...lib/python3.7/site-packages/django/contrib/admin/options.py\", line 616, in wrapper\n\treturn self.admin_site.admin_view(view)(*args, **kwargs)\n File \"...lib/python3.7/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"...lib/python3.7/site-packages/django/views/decorators/cache.py\", line 44, in _wrapped_view_func\n\tresponse = view_func(request, *args, **kwargs)\n File \"...lib/python3.7/site-packages/django/contrib/admin/sites.py\", line 241, in inner\n\treturn view(request, *args, **kwargs)\n File \"...lib/python3.7/site-packages/django/utils/decorators.py\", line 43, in _wrapper\n\treturn bound_method(*args, **kwargs)\n File \"...lib/python3.7/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"...lib/python3.7/site-packages/django/contrib/admin/options.py\", line 1737, in changelist_view\n\tresponse = self.response_action(request, queryset=cl.get_queryset(request))\n File \"...lib/python3.7/site-packages/django/contrib/admin/options.py\", line 1406, in response_action\n\tresponse = func(self, request, queryset)\n File \"...lib/python3.7/site-packages/django/contrib/admin/actions.py\", line 45, in delete_selected\n\tmodeladmin.delete_queryset(request, queryset)\n File \"...lib/python3.7/site-packages/django/contrib/admin/options.py\", line 1107, in delete_queryset\n\tqueryset.delete()\n File \"...lib/python3.7/site-packages/django/db/models/query.py\", line 728, in delete\n\traise TypeError('Cannot call delete() after .distinct().')\nTypeError: Cannot call delete() after .distinct().\n\"POST /admin/post/post/?q=my HTTP/1.1\" 500 137654\nI can confirm that pip install django==3.1.8 fixes the error, and after having a look at the diff between stable/3.2.x and 3.1.8, I suspect the \"regression\" comes about from the work done on preserving the filters on delete or something along those lines - I haven't done a thorough investigation yet. Presumably .distinct() is being called because of the search involving the many to many field.\nI am using a Postgres database.\n",
  "hints_text": "This exception was introduce in 6307c3f1a123f5975c73b231e8ac4f115fd72c0d and revealed a possible data loss issue in the admin. IMO we should use Exists() instead of distinct(), e.g. diff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py index fefed29933..e9816ddd15 100644 --- a/django/contrib/admin/views/main.py +++ b/django/contrib/admin/views/main.py @@ -475,9 +475,8 @@ class ChangeList: if not qs.query.select_related: qs = self.apply_select_related(qs) - # Set ordering. + # Get ordering. ordering = self.get_ordering(request, qs) - qs = qs.order_by(*ordering) # Apply search results qs, search_use_distinct = self.model_admin.get_search_results(request, qs, self.query) @@ -487,11 +486,14 @@ class ChangeList: new_params=remaining_lookup_params, remove=self.get_filters_params(), ) + # Remove duplicates from results, if necessary if filters_use_distinct | search_use_distinct: - return qs.distinct() + from django.db.models import Exists, OuterRef + qs = qs.filter(pk=OuterRef('pk')) + return self.root_queryset.filter(Exists(qs)).order_by(*ordering) else: - return qs + return qs.order_by(*ordering) def apply_select_related(self, qs): if self.list_select_related is True:\n​PR\nIn 4074f38e: Refs #32682 -- Fixed QuerySet.delete() crash on querysets with self-referential subqueries on MySQL.\nIn cd74aad: Refs #32682 -- Renamed use_distinct variable to may_have_duplicates. QuerySet.distinct() is not the only way to avoid duplicate, it's also not preferred.\nIn 18711820: Fixed #32682 -- Made admin changelist use Exists() instead of distinct() for preventing duplicates. Thanks Zain Patel for the report and Simon Charette for reviews. The exception introduced in 6307c3f1a123f5975c73b231e8ac4f115fd72c0d revealed a possible data loss issue in the admin.\nIn 7ad70340: [3.2.x] Refs #32682 -- Fixed QuerySet.delete() crash on querysets with self-referential subqueries on MySQL. Backport of 4074f38e1dcc93b859bbbfd6abd8441c3bca36b3 from main\nIn fbea64b: [3.2.x] Refs #32682 -- Renamed use_distinct variable to may_have_duplicates. QuerySet.distinct() is not the only way to avoid duplicate, it's also not preferred. Backport of cd74aad90e09865ae6cd8ca0377ef0a5008d14e9 from main\nIn 34981f39: [3.2.x] Fixed #32682 -- Made admin changelist use Exists() instead of distinct() for preventing duplicates. Thanks Zain Patel for the report and Simon Charette for reviews. The exception introduced in 6307c3f1a123f5975c73b231e8ac4f115fd72c0d revealed a possible data loss issue in the admin. Backport of 187118203197801c6cb72dc8b06b714b23b6dd3d from main\nIn baba733d: Refs #32682 -- Renamed lookup_needs_distinct() to lookup_spawns_duplicates(). Follow up to 187118203197801c6cb72dc8b06b714b23b6dd3d.",
  "created_at": "2023-07-04T21:49:35Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_disallowed_delete_distinct_on (delete_regress.tests.DeleteDistinct.test_disallowed_delete_distinct_on)\", \"If a ManyToManyField is in list_filter but isn't in any lookup params,\"]",
  "PASS_TO_PASS": "[\"test_set_querycount (delete_regress.tests.SetQueryCountTests.test_set_querycount)\", \"test_ticket_19102_annotate (delete_regress.tests.Ticket19102Tests.test_ticket_19102_annotate)\", \"test_ticket_19102_defer (delete_regress.tests.Ticket19102Tests.test_ticket_19102_defer)\", \"test_ticket_19102_extra (delete_regress.tests.Ticket19102Tests.test_ticket_19102_extra)\", \"test_ticket_19102_select_related (delete_regress.tests.Ticket19102Tests.test_ticket_19102_select_related)\", \"test_19187_values (delete_regress.tests.ProxyDeleteTest.test_19187_values)\", \"Deleting an instance of a concrete model should also delete objects\", \"Deleting the *proxy* instance bubbles through to its non-proxy and\", \"Deleting a proxy-of-proxy instance should bubble through to its proxy\", \"If a pair of proxy models are linked by an FK from one concrete parent\", \"With a model (Researcher) that has two foreign keys pointing to the\", \"test_meta_ordered_delete (delete_regress.tests.DeleteTests.test_meta_ordered_delete)\", \"test_self_reference_with_through_m2m_at_second_level (delete_regress.tests.DeleteTests.test_self_reference_with_through_m2m_at_second_level)\", \"{% get_admin_log %} works if the user model's primary key isn't named\", \"test_missing_args (admin_changelist.tests.GetAdminLogTests.test_missing_args)\", \"{% get_admin_log %} works without specifying a user.\", \"test_non_integer_limit (admin_changelist.tests.GetAdminLogTests.test_non_integer_limit)\", \"test_without_as (admin_changelist.tests.GetAdminLogTests.test_without_as)\", \"test_without_for_user (admin_changelist.tests.GetAdminLogTests.test_without_for_user)\", \"test_15776 (delete_regress.tests.DeleteCascadeTests.test_15776)\", \"If an M2M relationship has an explicitly-specified through model, and\", \"Django cascades deletes through generic-related objects to their\", \"If the number of objects > chunk size, deletion still occurs.\", \"Auto-created many-to-many through tables referencing a parent model are\", \"Cascade deletion works with ForeignKey.to_field set to non-PK.\", \"test_builtin_lookup_in_search_fields (admin_changelist.tests.ChangeListTests.test_builtin_lookup_in_search_fields)\", \"test_changelist_search_form_validation (admin_changelist.tests.ChangeListTests.test_changelist_search_form_validation)\", \"list_editable edits use a filtered queryset to limit memory usage.\", \"test_clear_all_filters_link (admin_changelist.tests.ChangeListTests.test_clear_all_filters_link)\", \"test_clear_all_filters_link_callable_filter (admin_changelist.tests.ChangeListTests.test_clear_all_filters_link_callable_filter)\", \"Regression test for #13196: output of functions should be  localized\", \"test_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests.test_custom_lookup_in_search_fields)\", \"test_custom_lookup_with_pk_shortcut (admin_changelist.tests.ChangeListTests.test_custom_lookup_with_pk_shortcut)\", \"test_custom_paginator (admin_changelist.tests.ChangeListTests.test_custom_paginator)\", \"The primary key is used in the ordering of the changelist's results to\", \"Regression test for #13902: When using a ManyToMany in list_filter,\", \"When using a ManyToMany in search_fields at the second level behind a\", \"Regressions tests for #15819: If a field listed in list_filters\", \"Regressions tests for #15819: If a field listed in search_fields\", \"When using a ManyToMany in list_filter at the second level behind a\", \"Regression tests for #14206: dynamic list_display support.\", \"Regression tests for #16257: dynamic list_display_links support.\", \"Regression tests for ticket #17646: dynamic list_filter support.\", \"test_dynamic_search_fields (admin_changelist.tests.ChangeListTests.test_dynamic_search_fields)\", \"test_get_edited_object_ids (admin_changelist.tests.ChangeListTests.test_get_edited_object_ids)\", \"test_get_list_editable_queryset (admin_changelist.tests.ChangeListTests.test_get_list_editable_queryset)\", \"test_get_list_editable_queryset_with_regex_chars_in_prefix (admin_changelist.tests.ChangeListTests.test_get_list_editable_queryset_with_regex_chars_in_prefix)\", \"test_get_select_related_custom_method (admin_changelist.tests.ChangeListTests.test_get_select_related_custom_method)\", \"test_list_editable_atomicity (admin_changelist.tests.ChangeListTests.test_list_editable_atomicity)\", \"test_many_search_terms (admin_changelist.tests.ChangeListTests.test_many_search_terms)\", \"All rows containing each of the searched words are returned, where each\", \"Simultaneous edits of list_editable fields on the changelist by\", \"test_no_clear_all_filters_link (admin_changelist.tests.ChangeListTests.test_no_clear_all_filters_link)\", \"#15185 -- Allow no links from the 'change list' view grid.\", \"When ModelAdmin.has_add_permission() returns False, the object-tools\", \"Regression tests for #12893: Pagination in admins changelist doesn't\", \"Regression tests for ticket #15653: ensure the number of pages\", \"test_pk_in_search_fields (admin_changelist.tests.ChangeListTests.test_pk_in_search_fields)\", \"Searches over multi-valued relationships return rows from related\", \"test_repr (admin_changelist.tests.ChangeListTests.test_repr)\", \"Regression test for #14312: list_editable with pagination\", \"Regression tests for #11791: Inclusion tag result_list generates a\", \"Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\", \"Inclusion tag result_list generates a table when with default\", \"Empty value display can be set in ModelAdmin or individual fields.\", \"Empty value display can be set on AdminSite.\", \"test_search_bar_total_link_preserves_options (admin_changelist.tests.ChangeListTests.test_search_bar_total_link_preserves_options)\", \"test_search_help_text (admin_changelist.tests.ChangeListTests.test_search_help_text)\", \"test_select_related_as_empty_tuple (admin_changelist.tests.ChangeListTests.test_select_related_as_empty_tuple)\", \"test_select_related_as_tuple (admin_changelist.tests.ChangeListTests.test_select_related_as_tuple)\", \"Regression test for #10348: ChangeList.get_queryset() shouldn't\", \"test_select_related_preserved_when_multi_valued_in_search_fields (admin_changelist.tests.ChangeListTests.test_select_related_preserved_when_multi_valued_in_search_fields)\", \"test_show_all (admin_changelist.tests.ChangeListTests.test_show_all)\", \"test_spanning_relations_with_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests.test_spanning_relations_with_custom_lookup_in_search_fields)\", \"test_specified_ordering_by_f_expression (admin_changelist.tests.ChangeListTests.test_specified_ordering_by_f_expression)\", \"test_specified_ordering_by_f_expression_without_asc_desc (admin_changelist.tests.ChangeListTests.test_specified_ordering_by_f_expression_without_asc_desc)\", \"test_total_ordering_optimization (admin_changelist.tests.ChangeListTests.test_total_ordering_optimization)\", \"test_total_ordering_optimization_meta_constraints (admin_changelist.tests.ChangeListTests.test_total_ordering_optimization_meta_constraints)\", \"test_tuple_list_display (admin_changelist.tests.ChangeListTests.test_tuple_list_display)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.777400",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}