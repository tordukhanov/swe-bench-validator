{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7557",
  "base_commit": "1f5dab6446ebe7b70d1210689026a649b74a280d",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -436,7 +436,8 @@ def get_doc(self, encoding: str = None, ignore: int = 1) -> List[List[str]]:\n                           % self.__class__.__name__,\n                           RemovedInSphinx40Warning)\n         docstring = getdoc(self.object, self.get_attr,\n-                           self.env.config.autodoc_inherit_docstrings)\n+                           self.env.config.autodoc_inherit_docstrings,\n+                           self.parent, self.object_name)\n         if docstring:\n             tab_width = self.directive.state.document.settings.tab_width\n             return [prepare_docstring(docstring, ignore, tab_width)]\n@@ -557,7 +558,8 @@ def is_filtered_inherited_member(name: str) -> bool:\n             else:\n                 isattr = False\n \n-            doc = getdoc(member, self.get_attr, self.env.config.autodoc_inherit_docstrings)\n+            doc = getdoc(member, self.get_attr, self.env.config.autodoc_inherit_docstrings,\n+                         self.parent, self.object_name)\n             if not isinstance(doc, str):\n                 # Ignore non-string __doc__\n                 doc = None\n@@ -1250,7 +1252,8 @@ def get_doc(self, encoding: str = None, ignore: int = 1) -> List[List[str]]:\n         if content in ('both', 'init'):\n             __init__ = self.get_attr(self.object, '__init__', None)\n             initdocstring = getdoc(__init__, self.get_attr,\n-                                   self.env.config.autodoc_inherit_docstrings)\n+                                   self.env.config.autodoc_inherit_docstrings,\n+                                   self.parent, self.object_name)\n             # for new-style classes, no __init__ means default __init__\n             if (initdocstring is not None and\n                 (initdocstring == object.__init__.__doc__ or  # for pypy\n@@ -1260,7 +1263,8 @@ def get_doc(self, encoding: str = None, ignore: int = 1) -> List[List[str]]:\n                 # try __new__\n                 __new__ = self.get_attr(self.object, '__new__', None)\n                 initdocstring = getdoc(__new__, self.get_attr,\n-                                       self.env.config.autodoc_inherit_docstrings)\n+                                       self.env.config.autodoc_inherit_docstrings,\n+                                       self.parent, self.object_name)\n                 # for new-style classes, no __new__ means default __new__\n                 if (initdocstring is not None and\n                     (initdocstring == object.__new__.__doc__ or  # for pypy\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -691,13 +691,14 @@ def format_annotation_old(self, annotation: Any) -> str:\n \n \n def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n-           allow_inherited: bool = False) -> str:\n+           allow_inherited: bool = False, cls: Any = None, name: str = None) -> str:\n     \"\"\"Get the docstring for the object.\n \n     This tries to obtain the docstring for some kind of objects additionally:\n \n     * partial functions\n     * inherited docstring\n+    * inherited decorated methods\n     \"\"\"\n     doc = attrgetter(obj, '__doc__', None)\n     if ispartial(obj) and doc == obj.__class__.__doc__:\n@@ -705,4 +706,14 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n     elif doc is None and allow_inherited:\n         doc = inspect.getdoc(obj)\n \n+        if doc is None and cls:\n+            # inspect.getdoc() does not support some kind of inherited and decorated methods.\n+            # This tries to obtain the docstring from super classes.\n+            for basecls in getattr(cls, '__mro__', []):\n+                meth = safe_getattr(basecls, name, None)\n+                if meth:\n+                    doc = inspect.getdoc(meth)\n+                    if doc:\n+                        break\n+\n     return doc\n",
  "test_patch": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -564,3 +564,18 @@ def func1(a, b, c):\n \n     assert inspect.unpartial(func2) is func1\n     assert inspect.unpartial(func3) is func1\n+\n+\n+def test_getdoc_inherited_decorated_method():\n+    class Foo:\n+        def meth(self):\n+            \"\"\"docstring.\"\"\"\n+\n+    class Bar(Foo):\n+        @functools.lru_cache()\n+        def meth(self):\n+            # inherited and decorated method\n+            pass\n+\n+    assert inspect.getdoc(Bar.meth, getattr, False, Bar, \"meth\") is None\n+    assert inspect.getdoc(Bar.meth, getattr, True, Bar, \"meth\") == \"docstring.\"\n",
  "problem_statement": "Decorated inherited method has no documentation\n**Describe the bug**\r\n\r\nIf an inherited method has a decorator, it does not inherit the parent's doc.\r\n\r\n**To Reproduce**\r\n\r\n```python\r\nfrom abc import ABC, abstractmethod\r\nfrom functools import lru_cache\r\n\r\n\r\nclass Base(ABC):\r\n    @abstractmethod\r\n    def my_method(self):\r\n        \"\"\"Do stuff.\"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def my_other_method(self):\r\n        \"\"\"Do other stuff.\"\"\"\r\n        pass\r\n\r\n\r\nclass MyClass(Base):\r\n    @lru_cache()\r\n    def my_method(self):  # that one wont inherit the doc\r\n        pass\r\n\r\n    @lru_cache()\r\n    def my_other_method(self):\r\n        \"\"\"Do other stuff but with a twist.\"\"\"\r\n        pass\r\n```\r\n\r\n```rst\r\n.. autoclass:: MyClass\r\n   :members: my_method, my_other_method\r\n```\r\n\r\n**Expected behavior**\r\n\r\nBoth methods should be documented\r\n\r\n**Environment info**\r\n- OS: Linux (Arch)\r\n- Python version: 3.6\r\n- Sphinx version: 2.1.2\r\n- Sphinx extensions:  [sphinx.ext.autodoc]\r\n\r\n**Additional context**\r\n\r\nRelated to https://github.com/sphinx-doc/sphinx/issues/3783 but `functools.lru_cache` calls `functools.update_wrapper` so it should work.\n",
  "hints_text": "Note: Now, Sphinx uses `inspect.getdoc()` to get inherited docstring. But it seems not supporting decorators. We need to add custom code to do that.",
  "created_at": "2020-04-26T02:25:03Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"tests/test_util_inspect.py::test_getdoc_inherited_decorated_method\"]",
  "PASS_TO_PASS": "[\"tests/test_util_inspect.py::test_signature\", \"tests/test_util_inspect.py::test_signature_partial\", \"tests/test_util_inspect.py::test_signature_methods\", \"tests/test_util_inspect.py::test_signature_partialmethod\", \"tests/test_util_inspect.py::test_signature_annotations\", \"tests/test_util_inspect.py::test_signature_annotations_py38\", \"tests/test_util_inspect.py::test_signature_from_str_basic\", \"tests/test_util_inspect.py::test_signature_from_str_default_values\", \"tests/test_util_inspect.py::test_signature_from_str_annotations\", \"tests/test_util_inspect.py::test_signature_from_str_complex_annotations\", \"tests/test_util_inspect.py::test_signature_from_str_kwonly_args\", \"tests/test_util_inspect.py::test_signature_from_str_positionaly_only_args\", \"tests/test_util_inspect.py::test_signature_from_str_invalid\", \"tests/test_util_inspect.py::test_safe_getattr_with_default\", \"tests/test_util_inspect.py::test_safe_getattr_with_exception\", \"tests/test_util_inspect.py::test_safe_getattr_with_property_exception\", \"tests/test_util_inspect.py::test_safe_getattr_with___dict___override\", \"tests/test_util_inspect.py::test_dictionary_sorting\", \"tests/test_util_inspect.py::test_set_sorting\", \"tests/test_util_inspect.py::test_set_sorting_fallback\", \"tests/test_util_inspect.py::test_frozenset_sorting\", \"tests/test_util_inspect.py::test_frozenset_sorting_fallback\", \"tests/test_util_inspect.py::test_dict_customtype\", \"tests/test_util_inspect.py::test_isclassmethod\", \"tests/test_util_inspect.py::test_isstaticmethod\", \"tests/test_util_inspect.py::test_iscoroutinefunction\", \"tests/test_util_inspect.py::test_isfunction\", \"tests/test_util_inspect.py::test_isbuiltin\", \"tests/test_util_inspect.py::test_isdescriptor\", \"tests/test_util_inspect.py::test_isattributedescriptor\", \"tests/test_util_inspect.py::test_isproperty\", \"tests/test_util_inspect.py::test_unpartial\"]",
  "environment_setup_commit": "5afc77ee27fc01c57165ab260d3a76751f9ddb35",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.041622",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}