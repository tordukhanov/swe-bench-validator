{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9931",
  "base_commit": "17dfa811078205bd415700361e97e945112b89eb",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -80,7 +80,8 @@ class ModuleEntry(NamedTuple):\n     deprecated: bool\n \n \n-def type_to_xref(target: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n+def type_to_xref(target: str, env: BuildEnvironment = None, suppress_prefix: bool = False\n+                 ) -> addnodes.pending_xref:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n     if target == 'None':\n         reftype = 'obj'\n@@ -101,6 +102,8 @@ def type_to_xref(target: str, env: BuildEnvironment = None) -> addnodes.pending_\n     elif target.startswith('~'):\n         target = target[1:]\n         text = target.split('.')[-1]\n+    elif suppress_prefix:\n+        text = target.split('.')[-1]\n     else:\n         text = target\n \n@@ -150,6 +153,8 @@ def unparse(node: ast.AST) -> List[Node]:\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n             return unparse(node.value)\n+        elif isinstance(node, ast.Invert):\n+            return [addnodes.desc_sig_punctuation('', '~')]\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]\n             if node.elts:\n@@ -180,6 +185,8 @@ def unparse(node: ast.AST) -> List[Node]:\n                     if isinstance(subnode, nodes.Text):\n                         result[i] = nodes.literal('', '', subnode)\n             return result\n+        elif isinstance(node, ast.UnaryOp):\n+            return unparse(node.op) + unparse(node.operand)\n         elif isinstance(node, ast.Tuple):\n             if node.elts:\n                 result = []\n@@ -209,12 +216,19 @@ def unparse(node: ast.AST) -> List[Node]:\n \n     try:\n         tree = ast_parse(annotation)\n-        result = unparse(tree)\n-        for i, node in enumerate(result):\n+        result: List[Node] = []\n+        for node in unparse(tree):\n             if isinstance(node, nodes.literal):\n-                result[i] = node[0]\n+                result.append(node[0])\n             elif isinstance(node, nodes.Text) and node.strip():\n-                result[i] = type_to_xref(str(node), env)\n+                if (result and isinstance(result[-1], addnodes.desc_sig_punctuation) and\n+                        result[-1].astext() == '~'):\n+                    result.pop()\n+                    result.append(type_to_xref(str(node), env, suppress_prefix=True))\n+                else:\n+                    result.append(type_to_xref(str(node), env))\n+            else:\n+                result.append(node)\n         return result\n     except SyntaxError:\n         return [type_to_xref(annotation, env)]\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1295,6 +1295,8 @@ def can_document_member(cls, member: Any, membername: str, isattr: bool, parent:\n     def format_args(self, **kwargs: Any) -> str:\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n+        if self.config.autodoc_unqualified_typehints:\n+            kwargs.setdefault('unqualified_typehints', True)\n \n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n@@ -1323,6 +1325,9 @@ def add_directive_header(self, sig: str) -> None:\n             self.add_line('   :async:', sourcename)\n \n     def format_signature(self, **kwargs: Any) -> str:\n+        if self.config.autodoc_unqualified_typehints:\n+            kwargs.setdefault('unqualified_typehints', True)\n+\n         sigs = []\n         if (self.analyzer and\n                 '.'.join(self.objpath) in self.analyzer.overloads and\n@@ -1561,6 +1566,8 @@ def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:\n     def format_args(self, **kwargs: Any) -> str:\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n+        if self.config.autodoc_unqualified_typehints:\n+            kwargs.setdefault('unqualified_typehints', True)\n \n         try:\n             self._signature_class, self._signature_method_name, sig = self._get_signature()\n@@ -1582,6 +1589,9 @@ def format_signature(self, **kwargs: Any) -> str:\n             # do not show signatures\n             return ''\n \n+        if self.config.autodoc_unqualified_typehints:\n+            kwargs.setdefault('unqualified_typehints', True)\n+\n         sig = super().format_signature()\n         sigs = []\n \n@@ -2110,6 +2120,8 @@ def import_object(self, raiseerror: bool = False) -> bool:\n     def format_args(self, **kwargs: Any) -> str:\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n+        if self.config.autodoc_unqualified_typehints:\n+            kwargs.setdefault('unqualified_typehints', True)\n \n         try:\n             if self.object == object.__init__ and self.parent != object:\n@@ -2160,6 +2172,9 @@ def document_members(self, all_members: bool = False) -> None:\n         pass\n \n     def format_signature(self, **kwargs: Any) -> str:\n+        if self.config.autodoc_unqualified_typehints:\n+            kwargs.setdefault('unqualified_typehints', True)\n+\n         sigs = []\n         if (self.analyzer and\n                 '.'.join(self.objpath) in self.analyzer.overloads and\n@@ -2833,6 +2848,7 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_config_value('autodoc_typehints_description_target', 'all', True,\n                          ENUM('all', 'documented'))\n     app.add_config_value('autodoc_type_aliases', {}, True)\n+    app.add_config_value('autodoc_unqualified_typehints', False, 'env')\n     app.add_config_value('autodoc_warningiserror', True, True)\n     app.add_config_value('autodoc_inherit_docstrings', True, True)\n     app.add_event('autodoc-before-process-signature')\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -744,10 +744,13 @@ def evaluate(annotation: Any, globalns: Dict, localns: Dict) -> Any:\n \n \n def stringify_signature(sig: inspect.Signature, show_annotation: bool = True,\n-                        show_return_annotation: bool = True) -> str:\n+                        show_return_annotation: bool = True,\n+                        unqualified_typehints: bool = False) -> str:\n     \"\"\"Stringify a Signature object.\n \n     :param show_annotation: Show annotation in result\n+    :param unqualified_typehints: Show annotations as unqualified\n+                                  (ex. io.StringIO -> StringIO)\n     \"\"\"\n     args = []\n     last_kind = None\n@@ -771,7 +774,7 @@ def stringify_signature(sig: inspect.Signature, show_annotation: bool = True,\n \n         if show_annotation and param.annotation is not param.empty:\n             arg.write(': ')\n-            arg.write(stringify_annotation(param.annotation))\n+            arg.write(stringify_annotation(param.annotation, unqualified_typehints))\n         if param.default is not param.empty:\n             if show_annotation and param.annotation is not param.empty:\n                 arg.write(' = ')\n@@ -791,7 +794,7 @@ def stringify_signature(sig: inspect.Signature, show_annotation: bool = True,\n             show_return_annotation is False):\n         return '(%s)' % ', '.join(args)\n     else:\n-        annotation = stringify_annotation(sig.return_annotation)\n+        annotation = stringify_annotation(sig.return_annotation, unqualified_typehints)\n         return '(%s) -> %s' % (', '.join(args), annotation)\n \n \ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -299,10 +299,19 @@ def _restify_py36(cls: Optional[Type]) -> str:\n             return ':py:obj:`%s.%s`' % (cls.__module__, qualname)\n \n \n-def stringify(annotation: Any) -> str:\n-    \"\"\"Stringify type annotation object.\"\"\"\n+def stringify(annotation: Any, smartref: bool = False) -> str:\n+    \"\"\"Stringify type annotation object.\n+\n+    :param smartref: If true, add \"~\" prefix to the result to remove the leading\n+                     module and class names from the reference text\n+    \"\"\"\n     from sphinx.util import inspect  # lazy loading\n \n+    if smartref:\n+        prefix = '~'\n+    else:\n+        prefix = ''\n+\n     if isinstance(annotation, str):\n         if annotation.startswith(\"'\") and annotation.endswith(\"'\"):\n             # might be a double Forward-ref'ed type.  Go unquoting.\n@@ -313,11 +322,11 @@ def stringify(annotation: Any) -> str:\n         if annotation.__module__ == 'typing':\n             return annotation.__name__\n         else:\n-            return '.'.join([annotation.__module__, annotation.__name__])\n+            return prefix + '.'.join([annotation.__module__, annotation.__name__])\n     elif inspect.isNewType(annotation):\n         if sys.version_info > (3, 10):\n             # newtypes have correct module info since Python 3.10+\n-            return '%s.%s' % (annotation.__module__, annotation.__name__)\n+            return prefix + '%s.%s' % (annotation.__module__, annotation.__name__)\n         else:\n             return annotation.__name__\n     elif not annotation:\n@@ -325,7 +334,7 @@ def stringify(annotation: Any) -> str:\n     elif annotation is NoneType:\n         return 'None'\n     elif annotation in INVALID_BUILTIN_CLASSES:\n-        return INVALID_BUILTIN_CLASSES[annotation]\n+        return prefix + INVALID_BUILTIN_CLASSES[annotation]\n     elif str(annotation).startswith('typing.Annotated'):  # for py310+\n         pass\n     elif (getattr(annotation, '__module__', None) == 'builtins' and\n@@ -338,28 +347,36 @@ def stringify(annotation: Any) -> str:\n         return '...'\n \n     if sys.version_info >= (3, 7):  # py37+\n-        return _stringify_py37(annotation)\n+        return _stringify_py37(annotation, smartref)\n     else:\n-        return _stringify_py36(annotation)\n+        return _stringify_py36(annotation, smartref)\n \n \n-def _stringify_py37(annotation: Any) -> str:\n+def _stringify_py37(annotation: Any, smartref: bool = False) -> str:\n     \"\"\"stringify() for py37+.\"\"\"\n     module = getattr(annotation, '__module__', None)\n-    if module == 'typing':\n+    modprefix = ''\n+    if module == 'typing' and getattr(annotation, '__forward_arg__', None):\n+        qualname = annotation.__forward_arg__\n+    elif module == 'typing':\n         if getattr(annotation, '_name', None):\n             qualname = annotation._name\n         elif getattr(annotation, '__qualname__', None):\n             qualname = annotation.__qualname__\n-        elif getattr(annotation, '__forward_arg__', None):\n-            qualname = annotation.__forward_arg__\n         else:\n             qualname = stringify(annotation.__origin__)  # ex. Union\n+\n+        if smartref:\n+            modprefix = '~%s.' % module\n     elif hasattr(annotation, '__qualname__'):\n-        qualname = '%s.%s' % (module, annotation.__qualname__)\n+        if smartref:\n+            modprefix = '~%s.' % module\n+        else:\n+            modprefix = '%s.' % module\n+        qualname = annotation.__qualname__\n     elif hasattr(annotation, '__origin__'):\n         # instantiated generic provided by a user\n-        qualname = stringify(annotation.__origin__)\n+        qualname = stringify(annotation.__origin__, smartref)\n     elif UnionType and isinstance(annotation, UnionType):  # types.Union (for py3.10+)\n         qualname = 'types.Union'\n     else:\n@@ -374,54 +391,63 @@ def _stringify_py37(annotation: Any) -> str:\n         elif qualname in ('Optional', 'Union'):\n             if len(annotation.__args__) > 1 and annotation.__args__[-1] is NoneType:\n                 if len(annotation.__args__) > 2:\n-                    args = ', '.join(stringify(a) for a in annotation.__args__[:-1])\n-                    return 'Optional[Union[%s]]' % args\n+                    args = ', '.join(stringify(a, smartref) for a in annotation.__args__[:-1])\n+                    return '%sOptional[%sUnion[%s]]' % (modprefix, modprefix, args)\n                 else:\n-                    return 'Optional[%s]' % stringify(annotation.__args__[0])\n+                    return '%sOptional[%s]' % (modprefix,\n+                                               stringify(annotation.__args__[0], smartref))\n             else:\n-                args = ', '.join(stringify(a) for a in annotation.__args__)\n-                return 'Union[%s]' % args\n+                args = ', '.join(stringify(a, smartref) for a in annotation.__args__)\n+                return '%sUnion[%s]' % (modprefix, args)\n         elif qualname == 'types.Union':\n             if len(annotation.__args__) > 1 and None in annotation.__args__:\n                 args = ' | '.join(stringify(a) for a in annotation.__args__ if a)\n-                return 'Optional[%s]' % args\n+                return '%sOptional[%s]' % (modprefix, args)\n             else:\n                 return ' | '.join(stringify(a) for a in annotation.__args__)\n         elif qualname == 'Callable':\n-            args = ', '.join(stringify(a) for a in annotation.__args__[:-1])\n-            returns = stringify(annotation.__args__[-1])\n-            return '%s[[%s], %s]' % (qualname, args, returns)\n+            args = ', '.join(stringify(a, smartref) for a in annotation.__args__[:-1])\n+            returns = stringify(annotation.__args__[-1], smartref)\n+            return '%s%s[[%s], %s]' % (modprefix, qualname, args, returns)\n         elif qualname == 'Literal':\n             args = ', '.join(repr(a) for a in annotation.__args__)\n-            return '%s[%s]' % (qualname, args)\n+            return '%s%s[%s]' % (modprefix, qualname, args)\n         elif str(annotation).startswith('typing.Annotated'):  # for py39+\n-            return stringify(annotation.__args__[0])\n+            return stringify(annotation.__args__[0], smartref)\n         elif all(is_system_TypeVar(a) for a in annotation.__args__):\n             # Suppress arguments if all system defined TypeVars (ex. Dict[KT, VT])\n-            return qualname\n+            return modprefix + qualname\n         else:\n-            args = ', '.join(stringify(a) for a in annotation.__args__)\n-            return '%s[%s]' % (qualname, args)\n+            args = ', '.join(stringify(a, smartref) for a in annotation.__args__)\n+            return '%s%s[%s]' % (modprefix, qualname, args)\n \n-    return qualname\n+    return modprefix + qualname\n \n \n-def _stringify_py36(annotation: Any) -> str:\n+def _stringify_py36(annotation: Any, smartref: bool = False) -> str:\n     \"\"\"stringify() for py36.\"\"\"\n     module = getattr(annotation, '__module__', None)\n-    if module == 'typing':\n+    modprefix = ''\n+    if module == 'typing' and getattr(annotation, '__forward_arg__', None):\n+        qualname = annotation.__forward_arg__\n+    elif module == 'typing':\n         if getattr(annotation, '_name', None):\n             qualname = annotation._name\n         elif getattr(annotation, '__qualname__', None):\n             qualname = annotation.__qualname__\n-        elif getattr(annotation, '__forward_arg__', None):\n-            qualname = annotation.__forward_arg__\n         elif getattr(annotation, '__origin__', None):\n             qualname = stringify(annotation.__origin__)  # ex. Union\n         else:\n             qualname = repr(annotation).replace('typing.', '')\n+\n+        if smartref:\n+            modprefix = '~%s.' % module\n     elif hasattr(annotation, '__qualname__'):\n-        qualname = '%s.%s' % (module, annotation.__qualname__)\n+        if smartref:\n+            modprefix = '~%s.' % module\n+        else:\n+            modprefix = '%s.' % module\n+        qualname = annotation.__qualname__\n     else:\n         qualname = repr(annotation)\n \n@@ -429,10 +455,10 @@ def _stringify_py36(annotation: Any) -> str:\n             not hasattr(annotation, '__tuple_params__')):  # for Python 3.6\n         params = annotation.__args__\n         if params:\n-            param_str = ', '.join(stringify(p) for p in params)\n-            return '%s[%s]' % (qualname, param_str)\n+            param_str = ', '.join(stringify(p, smartref) for p in params)\n+            return '%s%s[%s]' % (modprefix, qualname, param_str)\n         else:\n-            return qualname\n+            return modprefix + qualname\n     elif isinstance(annotation, typing.GenericMeta):\n         params = None\n         if annotation.__args__ is None or len(annotation.__args__) <= 2:  # type: ignore  # NOQA\n@@ -440,28 +466,28 @@ def _stringify_py36(annotation: Any) -> str:\n         elif annotation.__origin__ == Generator:  # type: ignore\n             params = annotation.__args__  # type: ignore\n         else:  # typing.Callable\n-            args = ', '.join(stringify(arg) for arg\n+            args = ', '.join(stringify(arg, smartref) for arg\n                              in annotation.__args__[:-1])  # type: ignore\n             result = stringify(annotation.__args__[-1])  # type: ignore\n-            return '%s[[%s], %s]' % (qualname, args, result)\n+            return '%s%s[[%s], %s]' % (modprefix, qualname, args, result)\n         if params is not None:\n-            param_str = ', '.join(stringify(p) for p in params)\n-            return '%s[%s]' % (qualname, param_str)\n+            param_str = ', '.join(stringify(p, smartref) for p in params)\n+            return '%s%s[%s]' % (modprefix, qualname, param_str)\n     elif (hasattr(annotation, '__origin__') and\n           annotation.__origin__ is typing.Union):\n         params = annotation.__args__\n         if params is not None:\n             if len(params) > 1 and params[-1] is NoneType:\n                 if len(params) > 2:\n-                    param_str = \", \".join(stringify(p) for p in params[:-1])\n-                    return 'Optional[Union[%s]]' % param_str\n+                    param_str = \", \".join(stringify(p, smartref) for p in params[:-1])\n+                    return '%sOptional[%sUnion[%s]]' % (modprefix, modprefix, param_str)\n                 else:\n-                    return 'Optional[%s]' % stringify(params[0])\n+                    return '%sOptional[%s]' % (modprefix, stringify(params[0]))\n             else:\n-                param_str = ', '.join(stringify(p) for p in params)\n-                return 'Union[%s]' % param_str\n+                param_str = ', '.join(stringify(p, smartref) for p in params)\n+                return '%sUnion[%s]' % (modprefix, param_str)\n \n-    return qualname\n+    return modprefix + qualname\n \n \n deprecated_alias('sphinx.util.typing',\n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -350,6 +350,18 @@ def test_parse_annotation(app):\n     assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n \n \n+def test_parse_annotation_suppress(app):\n+    doctree = _parse_annotation(\"~typing.Dict[str, str]\", app.env)\n+    assert_node(doctree, ([pending_xref, \"Dict\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          [pending_xref, \"str\"],\n+                          [desc_sig_punctuation, \",\"],\n+                          desc_sig_space,\n+                          [pending_xref, \"str\"],\n+                          [desc_sig_punctuation, \"]\"]))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"typing.Dict\")\n+\n+\n @pytest.mark.skipif(sys.version_info < (3, 8), reason='python 3.8+ is required.')\n def test_parse_annotation_Literal(app):\n     doctree = _parse_annotation(\"Literal[True, False]\", app.env)\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1142,6 +1142,99 @@ def test_autodoc_typehints_description_and_type_aliases(app):\n             '      myint\\n' == context)\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_unqualified_typehints': True})\n+def test_autodoc_unqualified_typehints(app):\n+    if sys.version_info < (3, 7):\n+        Any = 'Any'\n+    else:\n+        Any = '~typing.Any'\n+\n+    options = {\"members\": None,\n+               \"undoc-members\": None}\n+    actual = do_autodoc(app, 'module', 'target.typehints', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.typehints',\n+        '',\n+        '',\n+        '.. py:data:: CONST1',\n+        '   :module: target.typehints',\n+        '   :type: int',\n+        '',\n+        '',\n+        '.. py:class:: Math(s: str, o: ~typing.Optional[%s] = None)' % Any,\n+        '   :module: target.typehints',\n+        '',\n+        '',\n+        '   .. py:attribute:: Math.CONST1',\n+        '      :module: target.typehints',\n+        '      :type: int',\n+        '',\n+        '',\n+        '   .. py:attribute:: Math.CONST2',\n+        '      :module: target.typehints',\n+        '      :type: int',\n+        '      :value: 1',\n+        '',\n+        '',\n+        '   .. py:method:: Math.decr(a: int, b: int = 1) -> int',\n+        '      :module: target.typehints',\n+        '',\n+        '',\n+        '   .. py:method:: Math.horse(a: str, b: int) -> None',\n+        '      :module: target.typehints',\n+        '',\n+        '',\n+        '   .. py:method:: Math.incr(a: int, b: int = 1) -> int',\n+        '      :module: target.typehints',\n+        '',\n+        '',\n+        '   .. py:method:: Math.nothing() -> None',\n+        '      :module: target.typehints',\n+        '',\n+        '',\n+        '   .. py:property:: Math.prop',\n+        '      :module: target.typehints',\n+        '      :type: int',\n+        '',\n+        '',\n+        '.. py:class:: NewAnnotation(i: int)',\n+        '   :module: target.typehints',\n+        '',\n+        '',\n+        '.. py:class:: NewComment(i: int)',\n+        '   :module: target.typehints',\n+        '',\n+        '',\n+        '.. py:class:: SignatureFromMetaclass(a: int)',\n+        '   :module: target.typehints',\n+        '',\n+        '',\n+        '.. py:function:: complex_func(arg1: str, arg2: List[int], arg3: Tuple[int, '\n+        'Union[str, Unknown]] = None, *args: str, **kwargs: str) -> None',\n+        '   :module: target.typehints',\n+        '',\n+        '',\n+        '.. py:function:: decr(a: int, b: int = 1) -> int',\n+        '   :module: target.typehints',\n+        '',\n+        '',\n+        '.. py:function:: incr(a: int, b: int = 1) -> int',\n+        '   :module: target.typehints',\n+        '',\n+        '',\n+        '.. py:function:: missing_attr(c, a: str, b: Optional[str] = None) -> str',\n+        '   :module: target.typehints',\n+        '',\n+        '',\n+        '.. py:function:: tuple_args(x: ~typing.Tuple[int, ~typing.Union[int, str]]) '\n+        '-> ~typing.Tuple[int, int]',\n+        '   :module: target.typehints',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autodoc_default_options(app):\n     # no settings\ndiff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -259,6 +259,10 @@ def test_signature_annotations():\n     sig = inspect.signature(f7)\n     assert stringify_signature(sig, show_return_annotation=False) == '(x: Optional[int] = None, y: dict = {})'\n \n+    # unqualified_typehints is True\n+    sig = inspect.signature(f7)\n+    assert stringify_signature(sig, unqualified_typehints=True) == '(x: ~typing.Optional[int] = None, y: dict = {}) -> None'\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8), reason='python 3.8+ is required.')\n @pytest.mark.sphinx(testroot='ext-autodoc')\ndiff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -178,78 +178,156 @@ def test_restify_mock():\n \n \n def test_stringify():\n-    assert stringify(int) == \"int\"\n-    assert stringify(str) == \"str\"\n-    assert stringify(None) == \"None\"\n-    assert stringify(Integral) == \"numbers.Integral\"\n-    assert stringify(Struct) == \"struct.Struct\"\n-    assert stringify(TracebackType) == \"types.TracebackType\"\n-    assert stringify(Any) == \"Any\"\n+    assert stringify(int, False) == \"int\"\n+    assert stringify(int, True) == \"int\"\n+\n+    assert stringify(str, False) == \"str\"\n+    assert stringify(str, True) == \"str\"\n+\n+    assert stringify(None, False) == \"None\"\n+    assert stringify(None, True) == \"None\"\n+\n+    assert stringify(Integral, False) == \"numbers.Integral\"\n+    assert stringify(Integral, True) == \"~numbers.Integral\"\n+\n+    assert stringify(Struct, False) == \"struct.Struct\"\n+    assert stringify(Struct, True) == \"~struct.Struct\"\n+\n+    assert stringify(TracebackType, False) == \"types.TracebackType\"\n+    assert stringify(TracebackType, True) == \"~types.TracebackType\"\n+\n+    assert stringify(Any, False) == \"Any\"\n+    assert stringify(Any, True) == \"~typing.Any\"\n \n \n def test_stringify_type_hints_containers():\n-    assert stringify(List) == \"List\"\n-    assert stringify(Dict) == \"Dict\"\n-    assert stringify(List[int]) == \"List[int]\"\n-    assert stringify(List[str]) == \"List[str]\"\n-    assert stringify(Dict[str, float]) == \"Dict[str, float]\"\n-    assert stringify(Tuple[str, str, str]) == \"Tuple[str, str, str]\"\n-    assert stringify(Tuple[str, ...]) == \"Tuple[str, ...]\"\n-    assert stringify(Tuple[()]) == \"Tuple[()]\"\n-    assert stringify(List[Dict[str, Tuple]]) == \"List[Dict[str, Tuple]]\"\n-    assert stringify(MyList[Tuple[int, int]]) == \"tests.test_util_typing.MyList[Tuple[int, int]]\"\n-    assert stringify(Generator[None, None, None]) == \"Generator[None, None, None]\"\n+    assert stringify(List, False) == \"List\"\n+    assert stringify(List, True) == \"~typing.List\"\n+\n+    assert stringify(Dict, False) == \"Dict\"\n+    assert stringify(Dict, True) == \"~typing.Dict\"\n+\n+    assert stringify(List[int], False) == \"List[int]\"\n+    assert stringify(List[int], True) == \"~typing.List[int]\"\n+\n+    assert stringify(List[str], False) == \"List[str]\"\n+    assert stringify(List[str], True) == \"~typing.List[str]\"\n+\n+    assert stringify(Dict[str, float], False) == \"Dict[str, float]\"\n+    assert stringify(Dict[str, float], True) == \"~typing.Dict[str, float]\"\n+\n+    assert stringify(Tuple[str, str, str], False) == \"Tuple[str, str, str]\"\n+    assert stringify(Tuple[str, str, str], True) == \"~typing.Tuple[str, str, str]\"\n+\n+    assert stringify(Tuple[str, ...], False) == \"Tuple[str, ...]\"\n+    assert stringify(Tuple[str, ...], True) == \"~typing.Tuple[str, ...]\"\n+\n+    assert stringify(Tuple[()], False) == \"Tuple[()]\"\n+    assert stringify(Tuple[()], True) == \"~typing.Tuple[()]\"\n+\n+    assert stringify(List[Dict[str, Tuple]], False) == \"List[Dict[str, Tuple]]\"\n+    assert stringify(List[Dict[str, Tuple]], True) == \"~typing.List[~typing.Dict[str, ~typing.Tuple]]\"\n+\n+    assert stringify(MyList[Tuple[int, int]], False) == \"tests.test_util_typing.MyList[Tuple[int, int]]\"\n+    assert stringify(MyList[Tuple[int, int]], True) == \"~tests.test_util_typing.MyList[~typing.Tuple[int, int]]\"\n+\n+    assert stringify(Generator[None, None, None], False) == \"Generator[None, None, None]\"\n+    assert stringify(Generator[None, None, None], True) == \"~typing.Generator[None, None, None]\"\n \n \n @pytest.mark.skipif(sys.version_info < (3, 9), reason='python 3.9+ is required.')\n def test_stringify_type_hints_pep_585():\n-    assert stringify(list[int]) == \"list[int]\"\n-    assert stringify(list[str]) == \"list[str]\"\n-    assert stringify(dict[str, float]) == \"dict[str, float]\"\n-    assert stringify(tuple[str, str, str]) == \"tuple[str, str, str]\"\n-    assert stringify(tuple[str, ...]) == \"tuple[str, ...]\"\n-    assert stringify(tuple[()]) == \"tuple[()]\"\n-    assert stringify(list[dict[str, tuple]]) == \"list[dict[str, tuple]]\"\n-    assert stringify(type[int]) == \"type[int]\"\n+    assert stringify(list[int], False) == \"list[int]\"\n+    assert stringify(list[int], True) == \"list[int]\"\n+\n+    assert stringify(list[str], False) == \"list[str]\"\n+    assert stringify(list[str], True) == \"list[str]\"\n+\n+    assert stringify(dict[str, float], False) == \"dict[str, float]\"\n+    assert stringify(dict[str, float], True) == \"dict[str, float]\"\n+\n+    assert stringify(tuple[str, str, str], False) == \"tuple[str, str, str]\"\n+    assert stringify(tuple[str, str, str], True) == \"tuple[str, str, str]\"\n+\n+    assert stringify(tuple[str, ...], False) == \"tuple[str, ...]\"\n+    assert stringify(tuple[str, ...], True) == \"tuple[str, ...]\"\n+\n+    assert stringify(tuple[()], False) == \"tuple[()]\"\n+    assert stringify(tuple[()], True) == \"tuple[()]\"\n+\n+    assert stringify(list[dict[str, tuple]], False) == \"list[dict[str, tuple]]\"\n+    assert stringify(list[dict[str, tuple]], True) == \"list[dict[str, tuple]]\"\n+\n+    assert stringify(type[int], False) == \"type[int]\"\n+    assert stringify(type[int], True) == \"type[int]\"\n \n \n @pytest.mark.skipif(sys.version_info < (3, 9), reason='python 3.9+ is required.')\n def test_stringify_Annotated():\n     from typing import Annotated  # type: ignore\n-    assert stringify(Annotated[str, \"foo\", \"bar\"]) == \"str\"  # NOQA\n+    assert stringify(Annotated[str, \"foo\", \"bar\"], False) == \"str\"  # NOQA\n+    assert stringify(Annotated[str, \"foo\", \"bar\"], True) == \"str\"  # NOQA\n \n \n def test_stringify_type_hints_string():\n-    assert stringify(\"int\") == \"int\"\n-    assert stringify(\"str\") == \"str\"\n-    assert stringify(List[\"int\"]) == \"List[int]\"\n-    assert stringify(\"Tuple[str]\") == \"Tuple[str]\"\n-    assert stringify(\"unknown\") == \"unknown\"\n+    assert stringify(\"int\", False) == \"int\"\n+    assert stringify(\"int\", True) == \"int\"\n+\n+    assert stringify(\"str\", False) == \"str\"\n+    assert stringify(\"str\", True) == \"str\"\n+\n+    assert stringify(List[\"int\"], False) == \"List[int]\"\n+    assert stringify(List[\"int\"], True) == \"~typing.List[int]\"\n+\n+    assert stringify(\"Tuple[str]\", False) == \"Tuple[str]\"\n+    assert stringify(\"Tuple[str]\", True) == \"Tuple[str]\"\n+\n+    assert stringify(\"unknown\", False) == \"unknown\"\n+    assert stringify(\"unknown\", True) == \"unknown\"\n \n \n def test_stringify_type_hints_Callable():\n-    assert stringify(Callable) == \"Callable\"\n+    assert stringify(Callable, False) == \"Callable\"\n+    assert stringify(Callable, True) == \"~typing.Callable\"\n \n     if sys.version_info >= (3, 7):\n-        assert stringify(Callable[[str], int]) == \"Callable[[str], int]\"\n-        assert stringify(Callable[..., int]) == \"Callable[[...], int]\"\n+        assert stringify(Callable[[str], int], False) == \"Callable[[str], int]\"\n+        assert stringify(Callable[[str], int], True) == \"~typing.Callable[[str], int]\"\n+\n+        assert stringify(Callable[..., int], False) == \"Callable[[...], int]\"\n+        assert stringify(Callable[..., int], True) == \"~typing.Callable[[...], int]\"\n     else:\n-        assert stringify(Callable[[str], int]) == \"Callable[str, int]\"\n-        assert stringify(Callable[..., int]) == \"Callable[..., int]\"\n+        assert stringify(Callable[[str], int], False) == \"Callable[str, int]\"\n+        assert stringify(Callable[[str], int], True) == \"~typing.Callable[str, int]\"\n+\n+        assert stringify(Callable[..., int], False) == \"Callable[..., int]\"\n+        assert stringify(Callable[..., int], True) == \"~typing.Callable[..., int]\"\n \n \n def test_stringify_type_hints_Union():\n-    assert stringify(Optional[int]) == \"Optional[int]\"\n-    assert stringify(Union[str, None]) == \"Optional[str]\"\n-    assert stringify(Union[int, str]) == \"Union[int, str]\"\n+    assert stringify(Optional[int], False) == \"Optional[int]\"\n+    assert stringify(Optional[int], True) == \"~typing.Optional[int]\"\n+\n+    assert stringify(Union[str, None], False) == \"Optional[str]\"\n+    assert stringify(Union[str, None], True) == \"~typing.Optional[str]\"\n+\n+    assert stringify(Union[int, str], False) == \"Union[int, str]\"\n+    assert stringify(Union[int, str], True) == \"~typing.Union[int, str]\"\n \n     if sys.version_info >= (3, 7):\n-        assert stringify(Union[int, Integral]) == \"Union[int, numbers.Integral]\"\n-        assert (stringify(Union[MyClass1, MyClass2]) ==\n+        assert stringify(Union[int, Integral], False) == \"Union[int, numbers.Integral]\"\n+        assert stringify(Union[int, Integral], True) == \"~typing.Union[int, ~numbers.Integral]\"\n+\n+        assert (stringify(Union[MyClass1, MyClass2], False) ==\n                 \"Union[tests.test_util_typing.MyClass1, tests.test_util_typing.<MyClass2>]\")\n+        assert (stringify(Union[MyClass1, MyClass2], True) ==\n+                \"~typing.Union[~tests.test_util_typing.MyClass1, ~tests.test_util_typing.<MyClass2>]\")\n     else:\n-        assert stringify(Union[int, Integral]) == \"numbers.Integral\"\n-        assert stringify(Union[MyClass1, MyClass2]) == \"tests.test_util_typing.MyClass1\"\n+        assert stringify(Union[int, Integral], False) == \"numbers.Integral\"\n+        assert stringify(Union[int, Integral], True) == \"~numbers.Integral\"\n+\n+        assert stringify(Union[MyClass1, MyClass2], False) == \"tests.test_util_typing.MyClass1\"\n+        assert stringify(Union[MyClass1, MyClass2], True) == \"~tests.test_util_typing.MyClass1\"\n \n \n def test_stringify_type_hints_typevars():\n@@ -258,52 +336,83 @@ def test_stringify_type_hints_typevars():\n     T_contra = TypeVar('T_contra', contravariant=True)\n \n     if sys.version_info < (3, 7):\n-        assert stringify(T) == \"T\"\n-        assert stringify(T_co) == \"T_co\"\n-        assert stringify(T_contra) == \"T_contra\"\n-        assert stringify(List[T]) == \"List[T]\"\n+        assert stringify(T, False) == \"T\"\n+        assert stringify(T, True) == \"T\"\n+\n+        assert stringify(T_co, False) == \"T_co\"\n+        assert stringify(T_co, True) == \"T_co\"\n+\n+        assert stringify(T_contra, False) == \"T_contra\"\n+        assert stringify(T_contra, True) == \"T_contra\"\n+\n+        assert stringify(List[T], False) == \"List[T]\"\n+        assert stringify(List[T], True) == \"~typing.List[T]\"\n     else:\n-        assert stringify(T) == \"tests.test_util_typing.T\"\n-        assert stringify(T_co) == \"tests.test_util_typing.T_co\"\n-        assert stringify(T_contra) == \"tests.test_util_typing.T_contra\"\n-        assert stringify(List[T]) == \"List[tests.test_util_typing.T]\"\n+        assert stringify(T, False) == \"tests.test_util_typing.T\"\n+        assert stringify(T, True) == \"~tests.test_util_typing.T\"\n+\n+        assert stringify(T_co, False) == \"tests.test_util_typing.T_co\"\n+        assert stringify(T_co, True) == \"~tests.test_util_typing.T_co\"\n+\n+        assert stringify(T_contra, False) == \"tests.test_util_typing.T_contra\"\n+        assert stringify(T_contra, True) == \"~tests.test_util_typing.T_contra\"\n+\n+        assert stringify(List[T], False) == \"List[tests.test_util_typing.T]\"\n+        assert stringify(List[T], True) == \"~typing.List[~tests.test_util_typing.T]\"\n \n     if sys.version_info >= (3, 10):\n-        assert stringify(MyInt) == \"tests.test_util_typing.MyInt\"\n+        assert stringify(MyInt, False) == \"tests.test_util_typing.MyInt\"\n+        assert stringify(MyInt, True) == \"~tests.test_util_typing.MyInt\"\n     else:\n-        assert stringify(MyInt) == \"MyInt\"\n+        assert stringify(MyInt, False) == \"MyInt\"\n+        assert stringify(MyInt, True) == \"MyInt\"\n \n \n def test_stringify_type_hints_custom_class():\n-    assert stringify(MyClass1) == \"tests.test_util_typing.MyClass1\"\n-    assert stringify(MyClass2) == \"tests.test_util_typing.<MyClass2>\"\n+    assert stringify(MyClass1, False) == \"tests.test_util_typing.MyClass1\"\n+    assert stringify(MyClass1, True) == \"~tests.test_util_typing.MyClass1\"\n+\n+    assert stringify(MyClass2, False) == \"tests.test_util_typing.<MyClass2>\"\n+    assert stringify(MyClass2, True) == \"~tests.test_util_typing.<MyClass2>\"\n \n \n def test_stringify_type_hints_alias():\n     MyStr = str\n     MyTuple = Tuple[str, str]\n-    assert stringify(MyStr) == \"str\"\n-    assert stringify(MyTuple) == \"Tuple[str, str]\"  # type: ignore\n+\n+    assert stringify(MyStr, False) == \"str\"\n+    assert stringify(MyStr, True) == \"str\"\n+\n+    assert stringify(MyTuple, False) == \"Tuple[str, str]\"  # type: ignore\n+    assert stringify(MyTuple, True) == \"~typing.Tuple[str, str]\"  # type: ignore\n \n \n @pytest.mark.skipif(sys.version_info < (3, 8), reason='python 3.8+ is required.')\n def test_stringify_type_Literal():\n     from typing import Literal  # type: ignore\n-    assert stringify(Literal[1, \"2\", \"\\r\"]) == \"Literal[1, '2', '\\\\r']\"\n+    assert stringify(Literal[1, \"2\", \"\\r\"], False) == \"Literal[1, '2', '\\\\r']\"\n+    assert stringify(Literal[1, \"2\", \"\\r\"], True) == \"~typing.Literal[1, '2', '\\\\r']\"\n \n \n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n def test_stringify_type_union_operator():\n-    assert stringify(int | None) == \"int | None\"  # type: ignore\n-    assert stringify(int | str) == \"int | str\"  # type: ignore\n-    assert stringify(int | str | None) == \"int | str | None\"  # type: ignore\n+    assert stringify(int | None, False) == \"int | None\"  # type: ignore\n+    assert stringify(int | None, True) == \"int | None\"  # type: ignore\n+\n+    assert stringify(int | str, False) == \"int | str\"  # type: ignore\n+    assert stringify(int | str, True) == \"int | str\"  # type: ignore\n+\n+    assert stringify(int | str | None, False) == \"int | str | None\"  # type: ignore\n+    assert stringify(int | str | None, True) == \"int | str | None\"  # type: ignore\n \n \n def test_stringify_broken_type_hints():\n-    assert stringify(BrokenType) == 'tests.test_util_typing.BrokenType'\n+    assert stringify(BrokenType, False) == 'tests.test_util_typing.BrokenType'\n+    assert stringify(BrokenType, True) == '~tests.test_util_typing.BrokenType'\n \n \n def test_stringify_mock():\n     with mock(['unknown']):\n         import unknown\n-        assert stringify(unknown.secret.Class) == 'unknown.secret.Class'\n+        assert stringify(unknown.secret.Class, False) == 'unknown.secret.Class'\n+        assert stringify(unknown.secret.Class, True) == 'unknown.secret.Class'\n",
  "problem_statement": "autodoc add_module_names equivalent for arguments\nThe `add_module_names = False` configuration seems to only affect the class/function/attribute header names.\r\nThe type hints are still always rendered as fully qualified names.\r\n\r\n`mypackage/mymodule.py`:\r\n```python\r\nclass MyClass:\r\n    \"\"\"Whatever 1.\"\"\"\r\n    pass\r\n\r\n\r\ndef foo(arg: MyClass):\r\n    \"\"\"Whatever 2.\"\"\"\r\n    pass\r\n```\r\n\r\n`conf.py`:\r\n```python\r\n# ...\r\nadd_module_names = False\r\n# ...\r\n```\r\n\r\n`index.rst`:\r\n```rst\r\nmypackage.mymodule module\r\n=========================\r\n\r\n.. automodule:: mypackage.mymodule\r\n   :members:\r\n   :undoc-members:\r\n   :show-inheritance:\r\n```\r\n\r\nExpected documentation:\r\n```\r\nfoo(arg: MyClass)\r\n    Whatever 2.\r\n```\r\n\r\nActual documentation:\r\n```\r\nfoo(arg: mypackage.mymodule.MyClass)\r\n    Whatever 2.\r\n```\r\n\r\n## Describe the solution you'd like\r\n\r\nI would be OK with any of the following:\r\n```python\r\nadd_module_names = False # now affects type annotations too\r\n# or\r\nadd_type_module_names = False # new sphinx config option (name up for debate)\r\n# or\r\nautodoc_add_module_names = False # new autodoc config option (name up for debate)\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nThere's a [StackOverflow post](https://stackoverflow.com/questions/51394955/sphinx-remove-module-prefix-for-args-in-automodule) which suggests using the `autodoc_docstring_signature` option to manually specify the function signature. This is not really a viable solution in my opinion.\n",
  "hints_text": "+1 for adding a new confval only for autodoc. It would be nice if we can give better name to it. I feel \"add_module_names\" is a bit ambiguous and difficult to understand its behavior from the name.\nTo be clear, the [`add_module_names` confval](https://www.sphinx-doc.org/en/master/usage/configuration.html?highlight=add_module_names#confval-add_module_names) already exists. It's just that it doesn't affect parameter types for some reason.\nSorry for confuse. I know that. I thought it's better to separate the confval for autodoc and python-domain.\nJust FYI: Sphinx-4.0 provides a new configuration `python_use_unqualified_type_names`. It suppresses the module name if hyperlinks can be resolved.\nSo does this mean that the proposed `add_module_names` configuration is completely unnecessary?\nMy understanding is that `python_use_unqualified_type_names` only works with resolved refs and only for the `python` domain. Although, I would personally consider this issue fixed if `python_use_unqualified_type_names` would also work for unresolved refs.\nOh that's a fair point! Yep.\nAlso, not sure if this deserves a separate issue/feature request, but one more place where sphinx currently produces fully qualified names is in the package/module headings generated with `apidoc`. So for example, if you have\r\n```\r\nfoo/__init__.py\r\nfoo/bar/__init__.py\r\nfoo/bar/baz.py\r\n```\r\nyou will get the documentation for\r\n```\r\nfoo package\r\n - foo.bar package\r\n    - foo.bar.baz module\r\n```\r\ninstead of\r\n```\r\nfoo package\r\n - bar package\r\n    - baz module\r\n```\r\n\r\nThe FQN version is kind of redundant, since the parent packages of `bar` and `baz` are already obvious from the ToC. And with longer package/module names, this can lead to really ugly wrapping in the sidebar ToC.",
  "created_at": "2021-12-02T17:47:00Z",
  "version": "4.4",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_parse_annotation_suppress\", \"tests/test_ext_autodoc_configs.py::test_autodoc_unqualified_typehints\", \"tests/test_util_inspect.py::test_signature_annotations\", \"tests/test_util_typing.py::test_stringify\", \"tests/test_util_typing.py::test_stringify_type_hints_containers\", \"tests/test_util_typing.py::test_stringify_type_hints_pep_585\", \"tests/test_util_typing.py::test_stringify_Annotated\", \"tests/test_util_typing.py::test_stringify_type_hints_string\", \"tests/test_util_typing.py::test_stringify_type_hints_Callable\", \"tests/test_util_typing.py::test_stringify_type_hints_Union\", \"tests/test_util_typing.py::test_stringify_type_hints_typevars\", \"tests/test_util_typing.py::test_stringify_type_hints_custom_class\", \"tests/test_util_typing.py::test_stringify_type_hints_alias\", \"tests/test_util_typing.py::test_stringify_type_Literal\", \"tests/test_util_typing.py::test_stringify_broken_type_hints\", \"tests/test_util_typing.py::test_stringify_mock\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_xrefs_abbreviations\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_domain_py_canonical\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_parse_annotation_Literal\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_pyfunction_with_union_type_operator\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pydata_with_union_type_operator\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pyproperty\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_canonical\", \"tests/test_domain_py.py::test_canonical_definition_overrides\", \"tests/test_domain_py.py::test_canonical_definition_skip\", \"tests/test_domain_py.py::test_canonical_duplicated\", \"tests/test_domain_py.py::test_info_field_list\", \"tests/test_domain_py.py::test_info_field_list_piped_type\", \"tests/test_domain_py.py::test_info_field_list_Literal\", \"tests/test_domain_py.py::test_info_field_list_var\", \"tests/test_domain_py.py::test_type_field\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled\", \"tests/test_domain_py.py::test_warn_missing_reference\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_mixed\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_new\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\", \"tests/test_util_inspect.py::test_TypeAliasNamespace\", \"tests/test_util_inspect.py::test_signature\", \"tests/test_util_inspect.py::test_signature_partial\", \"tests/test_util_inspect.py::test_signature_methods\", \"tests/test_util_inspect.py::test_signature_partialmethod\", \"tests/test_util_inspect.py::test_signature_annotations_py38\", \"tests/test_util_inspect.py::test_signature_from_str_basic\", \"tests/test_util_inspect.py::test_signature_from_str_default_values\", \"tests/test_util_inspect.py::test_signature_from_str_annotations\", \"tests/test_util_inspect.py::test_signature_from_str_complex_annotations\", \"tests/test_util_inspect.py::test_signature_from_str_kwonly_args\", \"tests/test_util_inspect.py::test_signature_from_str_positionaly_only_args\", \"tests/test_util_inspect.py::test_signature_from_str_invalid\", \"tests/test_util_inspect.py::test_signature_from_ast\", \"tests/test_util_inspect.py::test_safe_getattr_with_default\", \"tests/test_util_inspect.py::test_safe_getattr_with_exception\", \"tests/test_util_inspect.py::test_safe_getattr_with_property_exception\", \"tests/test_util_inspect.py::test_safe_getattr_with___dict___override\", \"tests/test_util_inspect.py::test_dictionary_sorting\", \"tests/test_util_inspect.py::test_set_sorting\", \"tests/test_util_inspect.py::test_set_sorting_fallback\", \"tests/test_util_inspect.py::test_frozenset_sorting\", \"tests/test_util_inspect.py::test_frozenset_sorting_fallback\", \"tests/test_util_inspect.py::test_dict_customtype\", \"tests/test_util_inspect.py::test_object_description_enum\", \"tests/test_util_inspect.py::test_getslots\", \"tests/test_util_inspect.py::test_isclassmethod\", \"tests/test_util_inspect.py::test_isstaticmethod\", \"tests/test_util_inspect.py::test_iscoroutinefunction\", \"tests/test_util_inspect.py::test_isfunction\", \"tests/test_util_inspect.py::test_isbuiltin\", \"tests/test_util_inspect.py::test_isdescriptor\", \"tests/test_util_inspect.py::test_isattributedescriptor\", \"tests/test_util_inspect.py::test_isproperty\", \"tests/test_util_inspect.py::test_isgenericalias\", \"tests/test_util_inspect.py::test_unpartial\", \"tests/test_util_inspect.py::test_getdoc_inherited_classmethod\", \"tests/test_util_inspect.py::test_getdoc_inherited_decorated_method\", \"tests/test_util_inspect.py::test_is_builtin_class_method\", \"tests/test_util_typing.py::test_restify\", \"tests/test_util_typing.py::test_restify_type_hints_containers\", \"tests/test_util_typing.py::test_restify_type_hints_Callable\", \"tests/test_util_typing.py::test_restify_type_hints_Union\", \"tests/test_util_typing.py::test_restify_type_hints_typevars\", \"tests/test_util_typing.py::test_restify_type_hints_custom_class\", \"tests/test_util_typing.py::test_restify_type_hints_alias\", \"tests/test_util_typing.py::test_restify_type_ForwardRef\", \"tests/test_util_typing.py::test_restify_type_Literal\", \"tests/test_util_typing.py::test_restify_pep_585\", \"tests/test_util_typing.py::test_restify_broken_type_hints\", \"tests/test_util_typing.py::test_restify_mock\"]",
  "environment_setup_commit": "0938c193ea6f56dbb930bfb323602bc4e2b7b9c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.070418",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}