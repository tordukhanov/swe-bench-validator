{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-25601",
  "base_commit": "c991e30c96ace1565604b429de22e36ed6b1e7bd",
  "patch": "diff --git a/sklearn/ensemble/_forest.py b/sklearn/ensemble/_forest.py\n--- a/sklearn/ensemble/_forest.py\n+++ b/sklearn/ensemble/_forest.py\n@@ -117,7 +117,7 @@ def _get_n_samples_bootstrap(n_samples, max_samples):\n         return max_samples\n \n     if isinstance(max_samples, Real):\n-        return round(n_samples * max_samples)\n+        return max(round(n_samples * max_samples), 1)\n \n \n def _generate_sample_indices(random_state, n_samples, n_samples_bootstrap):\n@@ -1283,7 +1283,7 @@ class RandomForestClassifier(ForestClassifier):\n \n         - If None (default), then draw `X.shape[0]` samples.\n         - If int, then draw `max_samples` samples.\n-        - If float, then draw `max_samples * X.shape[0]` samples. Thus,\n+        - If float, then draw `max(round(n_samples * max_samples), 1)` samples. Thus,\n           `max_samples` should be in the interval `(0.0, 1.0]`.\n \n         .. versionadded:: 0.22\n@@ -1636,7 +1636,7 @@ class RandomForestRegressor(ForestRegressor):\n \n         - If None (default), then draw `X.shape[0]` samples.\n         - If int, then draw `max_samples` samples.\n-        - If float, then draw `max_samples * X.shape[0]` samples. Thus,\n+        - If float, then draw `max(round(n_samples * max_samples), 1)` samples. Thus,\n           `max_samples` should be in the interval `(0.0, 1.0]`.\n \n         .. versionadded:: 0.22\n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_forest.py b/sklearn/ensemble/tests/test_forest.py\n--- a/sklearn/ensemble/tests/test_forest.py\n+++ b/sklearn/ensemble/tests/test_forest.py\n@@ -1807,3 +1807,16 @@ def test_read_only_buffer(monkeypatch):\n \n     clf = RandomForestClassifier(n_jobs=2, random_state=rng)\n     cross_val_score(clf, X, y, cv=2)\n+\n+\n+@pytest.mark.parametrize(\"class_weight\", [\"balanced_subsample\", None])\n+def test_round_samples_to_one_when_samples_too_low(class_weight):\n+    \"\"\"Check low max_samples works and is rounded to one.\n+\n+    Non-regression test for gh-24037.\n+    \"\"\"\n+    X, y = datasets.load_wine(return_X_y=True)\n+    forest = RandomForestClassifier(\n+        n_estimators=10, max_samples=1e-4, class_weight=class_weight, random_state=0\n+    )\n+    forest.fit(X, y)\n",
  "problem_statement": "RandomForestClassifier class_weight/max_samples interaction can lead to ungraceful and nondescriptive failure\n### Describe the bug\r\n\r\nThe acceptable values for `max_samples` are `(0, 1]`. One possible option for `class_weight` is `balanced_subsample`. However, for values of `max_samples` near zero and `class_weight='balanced_subsample'`, the model fails with an unhelpful error related to having an empty array as an indexer.\r\n\r\nThis is only likely to come up in a grid search, as it seems unlikely that someone would deliberately force a subsample of zero items. However, it might be useful to have a minimum of one sample, or it might be useful to fail gracefully with a more descriptive error.\r\n\r\n\r\n### Steps/Code to Reproduce\r\n\r\n```python\r\nfrom sklearn.datasets import load_wine\r\nfrom sklearn.ensemble import RandomForestClassifier\r\n\r\nX, y = load_wine(return_X_y=True)\r\n\r\nclf = RandomForestClassifier(max_samples=1e-4, class_weight='balanced_subsample')\r\nclf.fit(X,y)\r\n```\r\n### Expected Results\r\n\r\nEITHER:\r\nNo error is thrown\r\n\r\nOR\r\n```\r\nValueError: insufficient samples for max_samples value\r\n```\r\n\r\n### Actual Results\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-4-afd4cda53619> in <module>()\r\n----> 1 clf.fit(X,y)\r\n\r\n11 frames\r\n[/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py](https://localhost:8080/#) in fit(self, X, y, sample_weight)\r\n    465                     n_samples_bootstrap=n_samples_bootstrap,\r\n    466                 )\r\n--> 467                 for i, t in enumerate(trees)\r\n    468             )\r\n    469 \r\n\r\n[/usr/local/lib/python3.7/dist-packages/joblib/parallel.py](https://localhost:8080/#) in __call__(self, iterable)\r\n   1041             # remaining jobs.\r\n   1042             self._iterating = False\r\n-> 1043             if self.dispatch_one_batch(iterator):\r\n   1044                 self._iterating = self._original_iterator is not None\r\n   1045 \r\n\r\n[/usr/local/lib/python3.7/dist-packages/joblib/parallel.py](https://localhost:8080/#) in dispatch_one_batch(self, iterator)\r\n    859                 return False\r\n    860             else:\r\n--> 861                 self._dispatch(tasks)\r\n    862                 return True\r\n    863 \r\n\r\n[/usr/local/lib/python3.7/dist-packages/joblib/parallel.py](https://localhost:8080/#) in _dispatch(self, batch)\r\n    777         with self._lock:\r\n    778             job_idx = len(self._jobs)\r\n--> 779             job = self._backend.apply_async(batch, callback=cb)\r\n    780             # A job can complete so quickly than its callback is\r\n    781             # called before we get here, causing self._jobs to\r\n\r\n[/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py](https://localhost:8080/#) in apply_async(self, func, callback)\r\n    206     def apply_async(self, func, callback=None):\r\n    207         \"\"\"Schedule a func to be run\"\"\"\r\n--> 208         result = ImmediateResult(func)\r\n    209         if callback:\r\n    210             callback(result)\r\n\r\n[/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py](https://localhost:8080/#) in __init__(self, batch)\r\n    570         # Don't delay the application, to avoid keeping the input\r\n    571         # arguments in memory\r\n--> 572         self.results = batch()\r\n    573 \r\n    574     def get(self):\r\n\r\n[/usr/local/lib/python3.7/dist-packages/joblib/parallel.py](https://localhost:8080/#) in __call__(self)\r\n    261         with parallel_backend(self._backend, n_jobs=self._n_jobs):\r\n    262             return [func(*args, **kwargs)\r\n--> 263                     for func, args, kwargs in self.items]\r\n    264 \r\n    265     def __reduce__(self):\r\n\r\n[/usr/local/lib/python3.7/dist-packages/joblib/parallel.py](https://localhost:8080/#) in <listcomp>(.0)\r\n    261         with parallel_backend(self._backend, n_jobs=self._n_jobs):\r\n    262             return [func(*args, **kwargs)\r\n--> 263                     for func, args, kwargs in self.items]\r\n    264 \r\n    265     def __reduce__(self):\r\n\r\n[/usr/local/lib/python3.7/dist-packages/sklearn/utils/fixes.py](https://localhost:8080/#) in __call__(self, *args, **kwargs)\r\n    214     def __call__(self, *args, **kwargs):\r\n    215         with config_context(**self.config):\r\n--> 216             return self.function(*args, **kwargs)\r\n    217 \r\n    218 \r\n\r\n[/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py](https://localhost:8080/#) in _parallel_build_trees(tree, forest, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap)\r\n    181                 curr_sample_weight *= compute_sample_weight(\"auto\", y, indices=indices)\r\n    182         elif class_weight == \"balanced_subsample\":\r\n--> 183             curr_sample_weight *= compute_sample_weight(\"balanced\", y, indices=indices)\r\n    184 \r\n    185         tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)\r\n\r\n[/usr/local/lib/python3.7/dist-packages/sklearn/utils/class_weight.py](https://localhost:8080/#) in compute_sample_weight(class_weight, y, indices)\r\n    157             weight_k = np.take(\r\n    158                 compute_class_weight(\r\n--> 159                     class_weight_k, classes=classes_subsample, y=y_subsample\r\n    160                 ),\r\n    161                 np.searchsorted(classes_subsample, classes_full),\r\n\r\n[/usr/local/lib/python3.7/dist-packages/sklearn/utils/class_weight.py](https://localhost:8080/#) in compute_class_weight(class_weight, classes, y)\r\n     51 \r\n     52         recip_freq = len(y) / (len(le.classes_) * np.bincount(y_ind).astype(np.float64))\r\n---> 53         weight = recip_freq[le.transform(classes)]\r\n     54     else:\r\n     55         # user-defined dictionary\r\n\r\nIndexError: arrays used as indices must be of integer (or boolean) type\r\n```\r\n\r\n### Versions\r\n\r\n```shell\r\nSystem:\r\n    python: 3.7.13 (default, Apr 24 2022, 01:04:09)  [GCC 7.5.0]\r\nexecutable: /usr/bin/python3\r\n   machine: Linux-5.4.188+-x86_64-with-Ubuntu-18.04-bionic\r\n\r\nPython dependencies:\r\n          pip: 21.1.3\r\n   setuptools: 57.4.0\r\n      sklearn: 1.0.2\r\n        numpy: 1.21.6\r\n        scipy: 1.7.3\r\n       Cython: 0.29.30\r\n       pandas: 1.3.5\r\n   matplotlib: 3.2.2\r\n       joblib: 1.1.0\r\nthreadpoolctl: 3.1.0\r\n```\r\n\n",
  "hints_text": "We should probably add a check before launching the actual `fit` to be sure that the condition is met to do so. A nice error message is indeed what we need here.\n@swight-prc are you interested to submit a bugfix and add your snippet of code as a non-regression test?\r\n\n> @swight-prc are you interested to submit a bugfix and add your snippet of code as a non-regression test?\r\n\r\nI'm not terribly familiar with the codebase. I'm not opposed to doing so, but it may take me longer than others to get it done.\nI will put a help wanted to tag. Feel free to submit a PR if you see that this is still unsolved. Thanks for reporting.\nHi @glemaitre If this is a good first issue i would like to contribute but i am a complete beginner. Could i work on this ?\nFeel free to solve this issue. Check our contribution guideline for help: https://scikit-learn.org/dev/developers/contributing.html\n@glemaitre, can you take a look at this PR?\nCould you please check my pull request? #24285\nHi everyone, I am starting in Open Source and willing to contribute. Can I work on this issue and can anyone help to get started?\r\n\n@Dev-Khant there is already an open PR to address this issue. Maybe you could consider another 'good first issue' ?\r\n\r\nCheck our contribution guideline for help: https://scikit-learn.org/dev/developers/contributing.html\nDear all, as nobody seemed to have pushed the resolve about this break, so I made a pull request with the resolve. \r\n\r\nIt says merge conflicts that I cannot resolve, but the fix should work fine. \r\n\r\nPlease let me know if I could do more. Thank you.\nhttps://github.com/scikit-learn/scikit-learn/pull/25140 might be stale, if that's the case, could I pick it up?\r\n\n@JanFidor agreed, you can follow the stalled PR guide: https://scikit-learn.org/stable/developers/contributing.html#stalled-pull-requests\n@lucyleeow I tried pulling from #25140 but it seems to be terribly out of date, my merge attempt threw up 301 conflicts, so I think it might be better to start over from the beginning",
  "created_at": "2023-02-13T21:42:21Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/ensemble/tests/test_forest.py::test_round_samples_to_one_when_samples_too_low[balanced_subsample]\"]",
  "PASS_TO_PASS": "[\"sklearn/ensemble/tests/test_forest.py::test_classification_toy[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_classification_toy[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[gini-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[gini-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[log_loss-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_iris[log_loss-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_regression[squared_error-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regression[squared_error-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regression[absolute_error-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regression[absolute_error-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regression[friedman_mse-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regression[friedman_mse-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_poisson_vs_mse\", \"sklearn/ensemble/tests/test_forest.py::test_balance_property_random_forest[poisson]\", \"sklearn/ensemble/tests/test_forest.py::test_balance_property_random_forest[squared_error]\", \"sklearn/ensemble/tests/test_forest.py::test_regressor_attributes[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_regressor_attributes[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_probability[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_probability[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-gini-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-gini-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-log_loss-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesClassifier-log_loss-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-gini-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-gini-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-log_loss-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestClassifier-log_loss-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-squared_error-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-squared_error-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-friedman_mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-friedman_mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-absolute_error-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[ExtraTreesRegressor-absolute_error-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-squared_error-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-squared_error-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-friedman_mse-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-friedman_mse-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-absolute_error-float64]\", \"sklearn/ensemble/tests/test_forest.py::test_importances[RandomForestRegressor-absolute_error-float32]\", \"sklearn/ensemble/tests/test_forest.py::test_importances_asymptotic\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_unfitted_feature_importances[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X0-y0-0.9-array-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X0-y0-0.9-array-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X0-y0-0.9-sparse_csr-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X0-y0-0.9-sparse_csr-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X0-y0-0.9-sparse_csc-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X0-y0-0.9-sparse_csc-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X1-y1-0.65-array-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X1-y1-0.65-array-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X1-y1-0.65-sparse_csr-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X1-y1-0.65-sparse_csr-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X1-y1-0.65-sparse_csc-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X1-y1-0.65-sparse_csc-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X2-y2-0.65-array-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X2-y2-0.65-array-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X2-y2-0.65-sparse_csr-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X2-y2-0.65-sparse_csr-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X2-y2-0.65-sparse_csc-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X2-y2-0.65-sparse_csc-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X3-y3-0.18-array-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X3-y3-0.18-array-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X3-y3-0.18-sparse_csr-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X3-y3-0.18-sparse_csr-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X3-y3-0.18-sparse_csc-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[True-X3-y3-0.18-sparse_csc-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X0-y0-0.9-array-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X0-y0-0.9-array-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X0-y0-0.9-sparse_csr-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X0-y0-0.9-sparse_csr-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X0-y0-0.9-sparse_csc-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X0-y0-0.9-sparse_csc-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X1-y1-0.65-array-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X1-y1-0.65-array-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X1-y1-0.65-sparse_csr-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X1-y1-0.65-sparse_csr-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X1-y1-0.65-sparse_csc-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X1-y1-0.65-sparse_csc-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X2-y2-0.65-array-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X2-y2-0.65-array-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X2-y2-0.65-sparse_csr-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X2-y2-0.65-sparse_csr-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X2-y2-0.65-sparse_csc-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X2-y2-0.65-sparse_csc-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X3-y3-0.18-array-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X3-y3-0.18-array-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X3-y3-0.18-sparse_csr-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X3-y3-0.18-sparse_csr-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X3-y3-0.18-sparse_csc-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_classifier_oob[oob_score1-X3-y3-0.18-sparse_csc-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X0-y0-0.7-array-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X0-y0-0.7-array-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X0-y0-0.7-sparse_csr-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X0-y0-0.7-sparse_csr-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X0-y0-0.7-sparse_csc-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X0-y0-0.7-sparse_csc-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X1-y1-0.55-array-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X1-y1-0.55-array-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X1-y1-0.55-sparse_csr-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X1-y1-0.55-sparse_csr-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X1-y1-0.55-sparse_csc-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[True-X1-y1-0.55-sparse_csc-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X0-y0-0.7-array-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X0-y0-0.7-array-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X0-y0-0.7-sparse_csr-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X0-y0-0.7-sparse_csr-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X0-y0-0.7-sparse_csc-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X0-y0-0.7-sparse_csc-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X1-y1-0.55-array-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X1-y1-0.55-array-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X1-y1-0.55-sparse_csr-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X1-y1-0.55-sparse_csr-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X1-y1-0.55-sparse_csc-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_regressor_oob[explained_variance_score-X1-y1-0.55-sparse_csc-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_oob_warning[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_oob_warning[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_oob_warning[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_oob_warning[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_oob_error[X0-y0-params0-Out\", \"sklearn/ensemble/tests/test_forest.py::test_forest_oob_error[X1-y1-params1-The\", \"sklearn/ensemble/tests/test_forest.py::test_random_trees_embedding_raise_error_oob[True]\", \"sklearn/ensemble/tests/test_forest.py::test_random_trees_embedding_raise_error_oob[False]\", \"sklearn/ensemble/tests/test_forest.py::test_gridsearch[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_gridsearch[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_parallel[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_pickle[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput_string[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_multioutput_string[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_classes_shape[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_classes_shape[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_random_trees_dense_type\", \"sklearn/ensemble/tests/test_forest.py::test_random_trees_dense_equal\", \"sklearn/ensemble/tests/test_forest.py::test_random_hasher\", \"sklearn/ensemble/tests/test_forest.py::test_random_hasher_sparse_data\", \"sklearn/ensemble/tests/test_forest.py::test_parallel_train\", \"sklearn/ensemble/tests/test_forest.py::test_distribution\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_leaf_nodes_max_depth[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_split[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_samples_leaf[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_weight_fraction_leaf[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csr_matrix-RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[csc_matrix-RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_sparse_input[coo_matrix-RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float64-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_memory_layout[float32-RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_1d_input[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weights[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weights[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_balanced_and_bootstrap_multi_output[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_balanced_and_bootstrap_multi_output[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_errors[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_class_weight_errors[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_clear[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_smaller_n_estimators[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_equal_n_estimators[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_warm_start_oob[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_dtype_convert\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_decision_path[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_min_impurity_decrease\", \"sklearn/ensemble/tests/test_forest.py::test_poisson_y_positive_check\", \"sklearn/ensemble/tests/test_forest.py::test_backend_respected\", \"sklearn/ensemble/tests/test_forest.py::test_forest_feature_importances_sum\", \"sklearn/ensemble/tests/test_forest.py::test_forest_degenerate_feature_importances\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_bootstrap[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_bootstrap[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_bootstrap[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_bootstrap[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_large_max_samples_exception[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_large_max_samples_exception[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_large_max_samples_exception[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_large_max_samples_exception[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_boundary_regressors[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_boundary_regressors[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_boundary_classifiers[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_samples_boundary_classifiers[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_forest_y_sparse\", \"sklearn/ensemble/tests/test_forest.py::test_little_tree_with_small_max_samples[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_little_tree_with_small_max_samples[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_features_deprecation[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_features_deprecation[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_max_features_deprecation[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_max_features_deprecation[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_mse_criterion_object_segfault_smoke_test[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_mse_criterion_object_segfault_smoke_test[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_random_trees_embedding_feature_names_out\", \"sklearn/ensemble/tests/test_forest.py::test_base_estimator_property_deprecated[ExtraTreesClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_base_estimator_property_deprecated[RandomForestClassifier]\", \"sklearn/ensemble/tests/test_forest.py::test_base_estimator_property_deprecated[ExtraTreesRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_base_estimator_property_deprecated[RandomForestRegressor]\", \"sklearn/ensemble/tests/test_forest.py::test_base_estimator_property_deprecated[RandomTreesEmbedding]\", \"sklearn/ensemble/tests/test_forest.py::test_read_only_buffer\", \"sklearn/ensemble/tests/test_forest.py::test_round_samples_to_one_when_samples_too_low[None]\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.020924",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}