{
  "repo": "django/django",
  "instance_id": "django__django-14313",
  "base_commit": "d68be0494be8b82365f2a5410c9335e539d8efd6",
  "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1019,7 +1019,7 @@ def construct_search(field_name):\n             # Otherwise, use the field with icontains.\n             return \"%s__icontains\" % field_name\n \n-        use_distinct = False\n+        may_have_duplicates = False\n         search_fields = self.get_search_fields(request)\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n@@ -1030,9 +1030,11 @@ def construct_search(field_name):\n                 or_queries = [models.Q(**{orm_lookup: bit})\n                               for orm_lookup in orm_lookups]\n                 queryset = queryset.filter(reduce(operator.or_, or_queries))\n-            use_distinct |= any(lookup_needs_distinct(self.opts, search_spec) for search_spec in orm_lookups)\n-\n-        return queryset, use_distinct\n+            may_have_duplicates |= any(\n+                lookup_needs_distinct(self.opts, search_spec)\n+                for search_spec in orm_lookups\n+            )\n+        return queryset, may_have_duplicates\n \n     def get_preserved_filters(self, request):\n         \"\"\"\ndiff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -17,7 +17,7 @@\n     FieldDoesNotExist, ImproperlyConfigured, SuspiciousOperation,\n )\n from django.core.paginator import InvalidPage\n-from django.db.models import F, Field, ManyToOneRel, OrderBy\n+from django.db.models import Exists, F, Field, ManyToOneRel, OrderBy, OuterRef\n from django.db.models.expressions import Combinable\n from django.urls import reverse\n from django.utils.http import urlencode\n@@ -122,7 +122,7 @@ def get_filters_params(self, params=None):\n \n     def get_filters(self, request):\n         lookup_params = self.get_filters_params()\n-        use_distinct = False\n+        may_have_duplicates = False\n         has_active_filters = False\n \n         for key, value in lookup_params.items():\n@@ -157,7 +157,7 @@ def get_filters(self, request):\n                 # processes. If that happened, check if distinct() is needed to\n                 # remove duplicate results.\n                 if lookup_params_count > len(lookup_params):\n-                    use_distinct = use_distinct or lookup_needs_distinct(self.lookup_opts, field_path)\n+                    may_have_duplicates |= lookup_needs_distinct(self.lookup_opts, field_path)\n             if spec and spec.has_output():\n                 filter_specs.append(spec)\n                 if lookup_params_count > len(lookup_params):\n@@ -203,9 +203,9 @@ def get_filters(self, request):\n         try:\n             for key, value in lookup_params.items():\n                 lookup_params[key] = prepare_lookup_value(key, value)\n-                use_distinct = use_distinct or lookup_needs_distinct(self.lookup_opts, key)\n+                may_have_duplicates |= lookup_needs_distinct(self.lookup_opts, key)\n             return (\n-                filter_specs, bool(filter_specs), lookup_params, use_distinct,\n+                filter_specs, bool(filter_specs), lookup_params, may_have_duplicates,\n                 has_active_filters,\n             )\n         except FieldDoesNotExist as e:\n@@ -445,7 +445,7 @@ def get_queryset(self, request):\n             self.filter_specs,\n             self.has_filters,\n             remaining_lookup_params,\n-            filters_use_distinct,\n+            filters_may_have_duplicates,\n             self.has_active_filters,\n         ) = self.get_filters(request)\n         # Then, we let every list filter modify the queryset to its liking.\n@@ -472,15 +472,10 @@ def get_queryset(self, request):\n             # ValueError, ValidationError, or ?.\n             raise IncorrectLookupParameters(e)\n \n-        if not qs.query.select_related:\n-            qs = self.apply_select_related(qs)\n-\n-        # Set ordering.\n-        ordering = self.get_ordering(request, qs)\n-        qs = qs.order_by(*ordering)\n-\n         # Apply search results\n-        qs, search_use_distinct = self.model_admin.get_search_results(request, qs, self.query)\n+        qs, search_may_have_duplicates = self.model_admin.get_search_results(\n+            request, qs, self.query,\n+        )\n \n         # Set query string for clearing all filters.\n         self.clear_all_filters_qs = self.get_query_string(\n@@ -488,10 +483,18 @@ def get_queryset(self, request):\n             remove=self.get_filters_params(),\n         )\n         # Remove duplicates from results, if necessary\n-        if filters_use_distinct | search_use_distinct:\n-            return qs.distinct()\n-        else:\n-            return qs\n+        if filters_may_have_duplicates | search_may_have_duplicates:\n+            qs = qs.filter(pk=OuterRef('pk'))\n+            qs = self.root_queryset.filter(Exists(qs))\n+\n+        # Set ordering.\n+        ordering = self.get_ordering(request, qs)\n+        qs = qs.order_by(*ordering)\n+\n+        if not qs.query.select_related:\n+            qs = self.apply_select_related(qs)\n+\n+        return qs\n \n     def apply_select_related(self, qs):\n         if self.list_select_related is True:\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1452,6 +1452,24 @@ def single_alias(self):\n         self.query.get_initial_alias()\n         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1\n \n+    @classmethod\n+    def _expr_refs_base_model(cls, expr, base_model):\n+        if isinstance(expr, Query):\n+            return expr.model == base_model\n+        if not hasattr(expr, 'get_source_expressions'):\n+            return False\n+        return any(\n+            cls._expr_refs_base_model(source_expr, base_model)\n+            for source_expr in expr.get_source_expressions()\n+        )\n+\n+    @cached_property\n+    def contains_self_reference_subquery(self):\n+        return any(\n+            self._expr_refs_base_model(expr, self.query.model)\n+            for expr in chain(self.query.annotations.values(), self.query.where.children)\n+        )\n+\n     def _as_sql(self, query):\n         result = [\n             'DELETE FROM %s' % self.quote_name_unless_alias(query.base_table)\n@@ -1466,7 +1484,7 @@ def as_sql(self):\n         Create the SQL for this query. Return the SQL string and list of\n         parameters.\n         \"\"\"\n-        if self.single_alias:\n+        if self.single_alias and not self.contains_self_reference_subquery:\n             return self._as_sql(self.query)\n         innerq = self.query.clone()\n         innerq.__class__ = Query\n",
  "test_patch": "diff --git a/tests/admin_changelist/admin.py b/tests/admin_changelist/admin.py\n--- a/tests/admin_changelist/admin.py\n+++ b/tests/admin_changelist/admin.py\n@@ -33,6 +33,7 @@ def has_add_permission(self, request):\n class ParentAdmin(admin.ModelAdmin):\n     list_filter = ['child__name']\n     search_fields = ['child__name']\n+    list_select_related = ['child']\n \n \n class ChildAdmin(admin.ModelAdmin):\ndiff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -104,6 +104,20 @@ def test_select_related_preserved(self):\n         cl = m.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'parent': {}})\n \n+    def test_select_related_preserved_when_multi_valued_in_search_fields(self):\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle')\n+        Child.objects.create(parent=parent, name='Daniel')\n+\n+        m = ParentAdmin(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel'})\n+        request.user = self.superuser\n+\n+        cl = m.get_changelist_instance(request)\n+        self.assertEqual(cl.queryset.count(), 1)\n+        # select_related is preserved.\n+        self.assertEqual(cl.queryset.query.select_related, {'child': {}})\n+\n     def test_select_related_as_tuple(self):\n         ia = InvitationAdmin(Invitation, custom_site)\n         request = self.factory.get('/invitation/')\n@@ -285,7 +299,7 @@ def test_custom_paginator(self):\n         cl.get_results(request)\n         self.assertIsInstance(cl.paginator, CustomPaginator)\n \n-    def test_distinct_for_m2m_in_list_filter(self):\n+    def test_no_duplicates_for_m2m_in_list_filter(self):\n         \"\"\"\n         Regression test for #13902: When using a ManyToMany in list_filter,\n         results shouldn't appear more than once. Basic ManyToMany.\n@@ -305,8 +319,12 @@ def test_distinct_for_m2m_in_list_filter(self):\n \n         # There's only one Group instance\n         self.assertEqual(cl.result_count, 1)\n+        # Queryset must be deletable.\n+        self.assertIs(cl.queryset.query.distinct, False)\n+        cl.queryset.delete()\n+        self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_distinct_for_through_m2m_in_list_filter(self):\n+    def test_no_duplicates_for_through_m2m_in_list_filter(self):\n         \"\"\"\n         Regression test for #13902: When using a ManyToMany in list_filter,\n         results shouldn't appear more than once. With an intermediate model.\n@@ -325,12 +343,15 @@ def test_distinct_for_through_m2m_in_list_filter(self):\n \n         # There's only one Group instance\n         self.assertEqual(cl.result_count, 1)\n+        # Queryset must be deletable.\n+        self.assertIs(cl.queryset.query.distinct, False)\n+        cl.queryset.delete()\n+        self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_distinct_for_through_m2m_at_second_level_in_list_filter(self):\n+    def test_no_duplicates_for_through_m2m_at_second_level_in_list_filter(self):\n         \"\"\"\n         When using a ManyToMany in list_filter at the second level behind a\n-        ForeignKey, distinct() must be called and results shouldn't appear more\n-        than once.\n+        ForeignKey, results shouldn't appear more than once.\n         \"\"\"\n         lead = Musician.objects.create(name='Vox')\n         band = Group.objects.create(name='The Hype')\n@@ -347,8 +368,12 @@ def test_distinct_for_through_m2m_at_second_level_in_list_filter(self):\n \n         # There's only one Concert instance\n         self.assertEqual(cl.result_count, 1)\n+        # Queryset must be deletable.\n+        self.assertIs(cl.queryset.query.distinct, False)\n+        cl.queryset.delete()\n+        self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_distinct_for_inherited_m2m_in_list_filter(self):\n+    def test_no_duplicates_for_inherited_m2m_in_list_filter(self):\n         \"\"\"\n         Regression test for #13902: When using a ManyToMany in list_filter,\n         results shouldn't appear more than once. Model managed in the\n@@ -368,8 +393,12 @@ def test_distinct_for_inherited_m2m_in_list_filter(self):\n \n         # There's only one Quartet instance\n         self.assertEqual(cl.result_count, 1)\n+        # Queryset must be deletable.\n+        self.assertIs(cl.queryset.query.distinct, False)\n+        cl.queryset.delete()\n+        self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_distinct_for_m2m_to_inherited_in_list_filter(self):\n+    def test_no_duplicates_for_m2m_to_inherited_in_list_filter(self):\n         \"\"\"\n         Regression test for #13902: When using a ManyToMany in list_filter,\n         results shouldn't appear more than once. Target of the relationship\n@@ -389,11 +418,15 @@ def test_distinct_for_m2m_to_inherited_in_list_filter(self):\n \n         # There's only one ChordsBand instance\n         self.assertEqual(cl.result_count, 1)\n+        # Queryset must be deletable.\n+        self.assertIs(cl.queryset.query.distinct, False)\n+        cl.queryset.delete()\n+        self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_distinct_for_non_unique_related_object_in_list_filter(self):\n+    def test_no_duplicates_for_non_unique_related_object_in_list_filter(self):\n         \"\"\"\n-        Regressions tests for #15819: If a field listed in list_filters\n-        is a non-unique related object, distinct() must be called.\n+        Regressions tests for #15819: If a field listed in list_filters is a\n+        non-unique related object, results shouldn't appear more than once.\n         \"\"\"\n         parent = Parent.objects.create(name='Mary')\n         # Two children with the same name\n@@ -405,8 +438,12 @@ def test_distinct_for_non_unique_related_object_in_list_filter(self):\n         request.user = self.superuser\n \n         cl = m.get_changelist_instance(request)\n-        # Make sure distinct() was called\n+        # Exists() is applied.\n         self.assertEqual(cl.queryset.count(), 1)\n+        # Queryset must be deletable.\n+        self.assertIs(cl.queryset.query.distinct, False)\n+        cl.queryset.delete()\n+        self.assertEqual(cl.queryset.count(), 0)\n \n     def test_changelist_search_form_validation(self):\n         m = ConcertAdmin(Concert, custom_site)\n@@ -424,10 +461,10 @@ def test_changelist_search_form_validation(self):\n                 self.assertEqual(1, len(messages))\n                 self.assertEqual(error, messages[0])\n \n-    def test_distinct_for_non_unique_related_object_in_search_fields(self):\n+    def test_no_duplicates_for_non_unique_related_object_in_search_fields(self):\n         \"\"\"\n         Regressions tests for #15819: If a field listed in search_fields\n-        is a non-unique related object, distinct() must be called.\n+        is a non-unique related object, Exists() must be applied.\n         \"\"\"\n         parent = Parent.objects.create(name='Mary')\n         Child.objects.create(parent=parent, name='Danielle')\n@@ -438,13 +475,17 @@ def test_distinct_for_non_unique_related_object_in_search_fields(self):\n         request.user = self.superuser\n \n         cl = m.get_changelist_instance(request)\n-        # Make sure distinct() was called\n+        # Exists() is applied.\n         self.assertEqual(cl.queryset.count(), 1)\n+        # Queryset must be deletable.\n+        self.assertIs(cl.queryset.query.distinct, False)\n+        cl.queryset.delete()\n+        self.assertEqual(cl.queryset.count(), 0)\n \n-    def test_distinct_for_many_to_many_at_second_level_in_search_fields(self):\n+    def test_no_duplicates_for_many_to_many_at_second_level_in_search_fields(self):\n         \"\"\"\n         When using a ManyToMany in search_fields at the second level behind a\n-        ForeignKey, distinct() must be called and results shouldn't appear more\n+        ForeignKey, Exists() must be applied and results shouldn't appear more\n         than once.\n         \"\"\"\n         lead = Musician.objects.create(name='Vox')\n@@ -460,6 +501,10 @@ def test_distinct_for_many_to_many_at_second_level_in_search_fields(self):\n         cl = m.get_changelist_instance(request)\n         # There's only one Concert instance\n         self.assertEqual(cl.queryset.count(), 1)\n+        # Queryset must be deletable.\n+        self.assertIs(cl.queryset.query.distinct, False)\n+        cl.queryset.delete()\n+        self.assertEqual(cl.queryset.count(), 0)\n \n     def test_pk_in_search_fields(self):\n         band = Group.objects.create(name='The Hype')\n@@ -552,23 +597,23 @@ def test_custom_lookup_with_pk_shortcut(self):\n         cl = m.get_changelist_instance(request)\n         self.assertCountEqual(cl.queryset, [abcd])\n \n-    def test_no_distinct_for_m2m_in_list_filter_without_params(self):\n+    def test_no_exists_for_m2m_in_list_filter_without_params(self):\n         \"\"\"\n         If a ManyToManyField is in list_filter but isn't in any lookup params,\n-        the changelist's query shouldn't have distinct.\n+        the changelist's query shouldn't have Exists().\n         \"\"\"\n         m = BandAdmin(Band, custom_site)\n         for lookup_params in ({}, {'name': 'test'}):\n             request = self.factory.get('/band/', lookup_params)\n             request.user = self.superuser\n             cl = m.get_changelist_instance(request)\n-            self.assertFalse(cl.queryset.query.distinct)\n+            self.assertNotIn(' EXISTS', str(cl.queryset.query))\n \n-        # A ManyToManyField in params does have distinct applied.\n+        # A ManyToManyField in params does have Exists() applied.\n         request = self.factory.get('/band/', {'genres': '0'})\n         request.user = self.superuser\n         cl = m.get_changelist_instance(request)\n-        self.assertTrue(cl.queryset.query.distinct)\n+        self.assertIn(' EXISTS', str(cl.queryset.query))\n \n     def test_pagination(self):\n         \"\"\"\ndiff --git a/tests/admin_views/admin.py b/tests/admin_views/admin.py\n--- a/tests/admin_views/admin.py\n+++ b/tests/admin_views/admin.py\n@@ -653,14 +653,16 @@ class PluggableSearchPersonAdmin(admin.ModelAdmin):\n     search_fields = ('name',)\n \n     def get_search_results(self, request, queryset, search_term):\n-        queryset, use_distinct = super().get_search_results(request, queryset, search_term)\n+        queryset, may_have_duplicates = super().get_search_results(\n+            request, queryset, search_term,\n+        )\n         try:\n             search_term_as_int = int(search_term)\n         except ValueError:\n             pass\n         else:\n             queryset |= self.model.objects.filter(age=search_term_as_int)\n-        return queryset, use_distinct\n+        return queryset, may_have_duplicates\n \n \n class AlbumAdmin(admin.ModelAdmin):\ndiff --git a/tests/delete_regress/models.py b/tests/delete_regress/models.py\n--- a/tests/delete_regress/models.py\n+++ b/tests/delete_regress/models.py\n@@ -24,6 +24,7 @@ class Person(models.Model):\n \n class Book(models.Model):\n     pagecount = models.IntegerField()\n+    owner = models.ForeignKey('Child', models.CASCADE, null=True)\n \n \n class Toy(models.Model):\ndiff --git a/tests/delete_regress/tests.py b/tests/delete_regress/tests.py\n--- a/tests/delete_regress/tests.py\n+++ b/tests/delete_regress/tests.py\n@@ -1,6 +1,7 @@\n import datetime\n \n from django.db import connection, models, transaction\n+from django.db.models import Exists, OuterRef\n from django.test import (\n     SimpleTestCase, TestCase, TransactionTestCase, skipUnlessDBFeature,\n )\n@@ -355,6 +356,19 @@ def test_foreign_key_delete_nullifies_correct_columns(self):\n         self.assertEqual(researcher2.primary_contact, contact2)\n         self.assertIsNone(researcher2.secondary_contact)\n \n+    def test_self_reference_with_through_m2m_at_second_level(self):\n+        toy = Toy.objects.create(name='Paints')\n+        child = Child.objects.create(name='Juan')\n+        Book.objects.create(pagecount=500, owner=child)\n+        PlayedWith.objects.create(child=child, toy=toy, date=datetime.date.today())\n+        Book.objects.filter(Exists(\n+            Book.objects.filter(\n+                pk=OuterRef('pk'),\n+                owner__toys=toy.pk,\n+            ),\n+        )).delete()\n+        self.assertIs(Book.objects.exists(), False)\n+\n \n class DeleteDistinct(SimpleTestCase):\n     def test_disallowed_delete_distinct(self):\n",
  "problem_statement": "Deleting objects after searching related many to many field crashes the admin page\nDescription\n\t\nMinimal reproduction:\n# models.py\nclass Post(models.Model):\n title = models.String(...)\n authors = models.ManyToMany(\"User\", ...)\nclass User(models.Model):\n email = models.String(...)\n# admin.py\nclass PostAdmin(admin.ModelAdmin):\n search_fields = (\"title\", \"authors__email\")\nthen opening the admin site, opening the post page that contains only one post (any title and author assigned) and entering a search term (e.g the first 2 characters of the title), selecting the post and then using the delete action results in an Internal Sever Error 500 with an error/stack-trace:\nInternal Server Error: /admin/post/post/\nTraceback (most recent call last):\n File \"...lib/python3.7/site-packages/django/core/handlers/exception.py\", line 47, in inner\n\tresponse = get_response(request)\n File \"...lib/python3.7/site-packages/django/core/handlers/base.py\", line 181, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n File \"...lib/python3.7/site-packages/django/contrib/admin/options.py\", line 616, in wrapper\n\treturn self.admin_site.admin_view(view)(*args, **kwargs)\n File \"...lib/python3.7/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"...lib/python3.7/site-packages/django/views/decorators/cache.py\", line 44, in _wrapped_view_func\n\tresponse = view_func(request, *args, **kwargs)\n File \"...lib/python3.7/site-packages/django/contrib/admin/sites.py\", line 241, in inner\n\treturn view(request, *args, **kwargs)\n File \"...lib/python3.7/site-packages/django/utils/decorators.py\", line 43, in _wrapper\n\treturn bound_method(*args, **kwargs)\n File \"...lib/python3.7/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"...lib/python3.7/site-packages/django/contrib/admin/options.py\", line 1737, in changelist_view\n\tresponse = self.response_action(request, queryset=cl.get_queryset(request))\n File \"...lib/python3.7/site-packages/django/contrib/admin/options.py\", line 1406, in response_action\n\tresponse = func(self, request, queryset)\n File \"...lib/python3.7/site-packages/django/contrib/admin/actions.py\", line 45, in delete_selected\n\tmodeladmin.delete_queryset(request, queryset)\n File \"...lib/python3.7/site-packages/django/contrib/admin/options.py\", line 1107, in delete_queryset\n\tqueryset.delete()\n File \"...lib/python3.7/site-packages/django/db/models/query.py\", line 728, in delete\n\traise TypeError('Cannot call delete() after .distinct().')\nTypeError: Cannot call delete() after .distinct().\n\"POST /admin/post/post/?q=my HTTP/1.1\" 500 137654\nI can confirm that pip install django==3.1.8 fixes the error, and after having a look at the diff between stable/3.2.x and 3.1.8, I suspect the \"regression\" comes about from the work done on preserving the filters on delete or something along those lines - I haven't done a thorough investigation yet. Presumably .distinct() is being called because of the search involving the many to many field.\nI am using a Postgres database.\n",
  "hints_text": "This exception was introduce in 6307c3f1a123f5975c73b231e8ac4f115fd72c0d and revealed a possible data loss issue in the admin. IMO we should use Exists() instead of distinct(), e.g. diff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py index fefed29933..e9816ddd15 100644 --- a/django/contrib/admin/views/main.py +++ b/django/contrib/admin/views/main.py @@ -475,9 +475,8 @@ class ChangeList: if not qs.query.select_related: qs = self.apply_select_related(qs) - # Set ordering. + # Get ordering. ordering = self.get_ordering(request, qs) - qs = qs.order_by(*ordering) # Apply search results qs, search_use_distinct = self.model_admin.get_search_results(request, qs, self.query) @@ -487,11 +486,14 @@ class ChangeList: new_params=remaining_lookup_params, remove=self.get_filters_params(), ) + # Remove duplicates from results, if necessary if filters_use_distinct | search_use_distinct: - return qs.distinct() + from django.db.models import Exists, OuterRef + qs = qs.filter(pk=OuterRef('pk')) + return self.root_queryset.filter(Exists(qs)).order_by(*ordering) else: - return qs + return qs.order_by(*ordering) def apply_select_related(self, qs): if self.list_select_related is True:\n​PR",
  "created_at": "2021-04-26T09:40:46Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"Regression test for #13902: When using a ManyToMany in list_filter,\", \"When using a ManyToMany in search_fields at the second level behind a\", \"Regressions tests for #15819: If a field listed in list_filters is a\", \"Regressions tests for #15819: If a field listed in search_fields\", \"When using a ManyToMany in list_filter at the second level behind a\", \"If a ManyToManyField is in list_filter but isn't in any lookup params,\"]",
  "PASS_TO_PASS": "[\"test_disallowed_delete_distinct (delete_regress.tests.DeleteDistinct)\", \"test_15776 (delete_regress.tests.DeleteCascadeTests)\", \"If an M2M relationship has an explicitly-specified through model, and\", \"Django cascades deletes through generic-related objects to their\", \"{% get_admin_log %} works if the user model's primary key isn't named\", \"test_missing_args (admin_changelist.tests.GetAdminLogTests)\", \"{% get_admin_log %} works without specifying a user.\", \"test_non_integer_limit (admin_changelist.tests.GetAdminLogTests)\", \"test_without_as (admin_changelist.tests.GetAdminLogTests)\", \"test_without_for_user (admin_changelist.tests.GetAdminLogTests)\", \"test_ticket_19102_annotate (delete_regress.tests.Ticket19102Tests)\", \"test_ticket_19102_defer (delete_regress.tests.Ticket19102Tests)\", \"test_ticket_19102_extra (delete_regress.tests.Ticket19102Tests)\", \"test_ticket_19102_select_related (delete_regress.tests.Ticket19102Tests)\", \"test_19187_values (delete_regress.tests.ProxyDeleteTest)\", \"Deleting an instance of a concrete model should also delete objects\", \"Deleting the *proxy* instance bubbles through to its non-proxy and\", \"Deleting a proxy-of-proxy instance should bubble through to its proxy\", \"If a pair of proxy models are linked by an FK from one concrete parent\", \"With a model (Researcher) that has two foreign keys pointing to the\", \"test_meta_ordered_delete (delete_regress.tests.DeleteTests)\", \"test_self_reference_with_through_m2m_at_second_level (delete_regress.tests.DeleteTests)\", \"Regression for #13309 -- if the number of objects > chunk size, deletion still occurs\", \"Auto-created many-to-many through tables referencing a parent model are\", \"Cascade deletion works with ForeignKey.to_field set to non-PK.\", \"test_builtin_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_changelist_search_form_validation (admin_changelist.tests.ChangeListTests)\", \"list_editable edits use a filtered queryset to limit memory usage.\", \"test_clear_all_filters_link (admin_changelist.tests.ChangeListTests)\", \"test_clear_all_filters_link_callable_filter (admin_changelist.tests.ChangeListTests)\", \"Regression test for #13196: output of functions should be  localized\", \"test_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_custom_lookup_with_pk_shortcut (admin_changelist.tests.ChangeListTests)\", \"test_custom_paginator (admin_changelist.tests.ChangeListTests)\", \"The primary key is used in the ordering of the changelist's results to\", \"Regression tests for #14206: dynamic list_display support.\", \"Regression tests for #16257: dynamic list_display_links support.\", \"Regression tests for ticket #17646: dynamic list_filter support.\", \"test_dynamic_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_get_edited_object_ids (admin_changelist.tests.ChangeListTests)\", \"test_get_list_editable_queryset (admin_changelist.tests.ChangeListTests)\", \"test_get_list_editable_queryset_with_regex_chars_in_prefix (admin_changelist.tests.ChangeListTests)\", \"test_get_select_related_custom_method (admin_changelist.tests.ChangeListTests)\", \"Simultaneous edits of list_editable fields on the changelist by\", \"test_no_clear_all_filters_link (admin_changelist.tests.ChangeListTests)\", \"#15185 -- Allow no links from the 'change list' view grid.\", \"When ModelAdmin.has_add_permission() returns False, the object-tools\", \"Regression tests for #12893: Pagination in admins changelist doesn't\", \"Regression tests for ticket #15653: ensure the number of pages\", \"test_pk_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"Regression test for #14312: list_editable with pagination\", \"Regression tests for #11791: Inclusion tag result_list generates a\", \"Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\", \"Inclusion tag result_list generates a table when with default\", \"Empty value display can be set in ModelAdmin or individual fields.\", \"Empty value display can be set on AdminSite.\", \"test_select_related_as_empty_tuple (admin_changelist.tests.ChangeListTests)\", \"test_select_related_as_tuple (admin_changelist.tests.ChangeListTests)\", \"Regression test for #10348: ChangeList.get_queryset() shouldn't\", \"test_select_related_preserved_when_multi_valued_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_show_all (admin_changelist.tests.ChangeListTests)\", \"test_spanning_relations_with_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_specified_ordering_by_f_expression (admin_changelist.tests.ChangeListTests)\", \"test_specified_ordering_by_f_expression_without_asc_desc (admin_changelist.tests.ChangeListTests)\", \"test_total_ordering_optimization (admin_changelist.tests.ChangeListTests)\", \"test_total_ordering_optimization_meta_constraints (admin_changelist.tests.ChangeListTests)\", \"test_tuple_list_display (admin_changelist.tests.ChangeListTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.686531",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}