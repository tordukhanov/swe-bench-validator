{
  "repo": "django/django",
  "instance_id": "django__django-14031",
  "base_commit": "ceb4b9ee68dffc6ab0398886f1758f15f037c472",
  "patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -90,7 +90,8 @@ def process_request(self, request):\n                 type(model_admin).__qualname__\n             )\n \n-        to_field_name = getattr(source_field.remote_field, 'field_name', model_admin.model._meta.pk.name)\n+        to_field_name = getattr(source_field.remote_field, 'field_name', remote_model._meta.pk.attname)\n+        to_field_name = remote_model._meta.get_field(to_field_name).attname\n         if not model_admin.to_field_allowed(request, to_field_name):\n             raise PermissionDenied\n \ndiff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py\n--- a/django/contrib/admin/widgets.py\n+++ b/django/contrib/admin/widgets.py\n@@ -428,7 +428,9 @@ def optgroups(self, name, value, attr=None):\n         }\n         if not self.is_required and not self.allow_multiple_selected:\n             default[1].append(self.create_option(name, '', '', False, 0))\n-        to_field_name = getattr(self.field.remote_field, 'field_name', self.field.model._meta.pk.name)\n+        remote_model_opts = self.field.remote_field.model._meta\n+        to_field_name = getattr(self.field.remote_field, 'field_name', remote_model_opts.pk.attname)\n+        to_field_name = remote_model_opts.get_field(to_field_name).attname\n         choices = (\n             (getattr(obj, to_field_name), self.choices.field.label_from_instance(obj))\n             for obj in self.choices.queryset.using(self.db).filter(**{'%s__in' % to_field_name: selected_choices})\n",
  "test_patch": "diff --git a/tests/admin_views/models.py b/tests/admin_views/models.py\n--- a/tests/admin_views/models.py\n+++ b/tests/admin_views/models.py\n@@ -338,6 +338,24 @@ def clean(self):\n             raise ValidationError('invalid')\n \n \n+class PKChild(models.Model):\n+    \"\"\"\n+    Used to check autocomplete to_field resolution when ForeignKey is PK.\n+    \"\"\"\n+    parent = models.ForeignKey(Parent, models.CASCADE, primary_key=True)\n+    name = models.CharField(max_length=128)\n+\n+    class Meta:\n+        ordering = ['parent']\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class Toy(models.Model):\n+    child = models.ForeignKey(PKChild, models.CASCADE)\n+\n+\n class EmptyModel(models.Model):\n     def __str__(self):\n         return \"Primary key = %s\" % self.id\n@@ -615,13 +633,28 @@ def __str__(self):\n class Employee(Person):\n     code = models.CharField(max_length=20)\n \n+    class Meta:\n+        ordering = ['name']\n+\n \n class WorkHour(models.Model):\n     datum = models.DateField()\n     employee = models.ForeignKey(Employee, models.CASCADE)\n \n \n+class Manager(Employee):\n+    \"\"\"\n+    A multi-layer MTI child.\n+    \"\"\"\n+    pass\n+\n+\n+class Bonus(models.Model):\n+    recipient = models.ForeignKey(Manager, on_delete=models.CASCADE)\n+\n+\n class Question(models.Model):\n+    big_id = models.BigAutoField(primary_key=True)\n     question = models.CharField(max_length=20)\n     posted = models.DateField(default=datetime.date.today)\n     expires = models.DateTimeField(null=True, blank=True)\ndiff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -12,7 +12,10 @@\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n-from .models import Answer, Author, Authorship, Book, Question\n+from .models import (\n+    Answer, Author, Authorship, Bonus, Book, Employee, Manager, Parent,\n+    PKChild, Question, Toy, WorkHour,\n+)\n from .tests import AdminViewBasicTestCase\n \n PAGINATOR_SIZE = AutocompleteJsonView.paginate_by\n@@ -37,6 +40,12 @@ class BookAdmin(admin.ModelAdmin):\n site.register(Answer, AnswerAdmin)\n site.register(Author, AuthorAdmin)\n site.register(Book, BookAdmin)\n+site.register(Employee, search_fields=['name'])\n+site.register(WorkHour, autocomplete_fields=['employee'])\n+site.register(Manager, search_fields=['name'])\n+site.register(Bonus, autocomplete_fields=['recipient'])\n+site.register(PKChild, search_fields=['name'])\n+site.register(Toy, autocomplete_fields=['child'])\n \n \n @contextmanager\n@@ -94,6 +103,75 @@ def test_custom_to_field(self):\n             'pagination': {'more': False},\n         })\n \n+    def test_custom_to_field_permission_denied(self):\n+        Question.objects.create(question='Is this a question?')\n+        request = self.factory.get(self.url, {'term': 'is', **self.opts, 'field_name': 'question_with_to_field'})\n+        request.user = self.user\n+        with self.assertRaises(PermissionDenied):\n+            AutocompleteJsonView.as_view(**self.as_view_args)(request)\n+\n+    def test_custom_to_field_custom_pk(self):\n+        q = Question.objects.create(question='Is this a question?')\n+        opts = {\n+            'app_label': Question._meta.app_label,\n+            'model_name': Question._meta.model_name,\n+            'field_name': 'related_questions',\n+        }\n+        request = self.factory.get(self.url, {'term': 'is', **opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [{'id': str(q.big_id), 'text': q.question}],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_to_field_resolution_with_mti(self):\n+        \"\"\"\n+        to_field resolution should correctly resolve for target models using\n+        MTI. Tests for single and multi-level cases.\n+        \"\"\"\n+        tests = [\n+            (Employee, WorkHour, 'employee'),\n+            (Manager, Bonus, 'recipient'),\n+        ]\n+        for Target, Remote, related_name in tests:\n+            with self.subTest(target_model=Target, remote_model=Remote, related_name=related_name):\n+                o = Target.objects.create(name=\"Frida Kahlo\", gender=2, code=\"painter\", alive=False)\n+                opts = {\n+                    'app_label': Remote._meta.app_label,\n+                    'model_name': Remote._meta.model_name,\n+                    'field_name': related_name,\n+                }\n+                request = self.factory.get(self.url, {'term': 'frida', **opts})\n+                request.user = self.superuser\n+                response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n+                self.assertEqual(response.status_code, 200)\n+                data = json.loads(response.content.decode('utf-8'))\n+                self.assertEqual(data, {\n+                    'results': [{'id': str(o.pk), 'text': o.name}],\n+                    'pagination': {'more': False},\n+                })\n+\n+    def test_to_field_resolution_with_fk_pk(self):\n+        p = Parent.objects.create(name=\"Bertie\")\n+        c = PKChild.objects.create(parent=p, name=\"Anna\")\n+        opts = {\n+            'app_label': Toy._meta.app_label,\n+            'model_name': Toy._meta.model_name,\n+            'field_name': 'child',\n+        }\n+        request = self.factory.get(self.url, {'term': 'anna', **opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [{'id': str(c.pk), 'text': c.name}],\n+            'pagination': {'more': False},\n+        })\n+\n     def test_field_does_not_exist(self):\n         request = self.factory.get(self.url, {'term': 'is', **self.opts, 'field_name': 'does_not_exist'})\n         request.user = self.superuser\ndiff --git a/tests/admin_widgets/models.py b/tests/admin_widgets/models.py\n--- a/tests/admin_widgets/models.py\n+++ b/tests/admin_widgets/models.py\n@@ -18,7 +18,11 @@ def __str__(self):\n         return self.name\n \n \n-class Band(models.Model):\n+class Artist(models.Model):\n+    pass\n+\n+\n+class Band(Artist):\n     uuid = models.UUIDField(unique=True, default=uuid.uuid4)\n     name = models.CharField(max_length=100)\n     style = models.CharField(max_length=20)\n@@ -47,6 +51,25 @@ def __str__(self):\n         return self.name\n \n \n+class ReleaseEvent(models.Model):\n+    \"\"\"\n+    Used to check that autocomplete widget correctly resolves attname for FK as\n+    PK example.\n+    \"\"\"\n+    album = models.ForeignKey(Album, models.CASCADE, primary_key=True)\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class VideoStream(models.Model):\n+    release_event = models.ForeignKey(ReleaseEvent, models.CASCADE)\n+\n+\n class HiddenInventoryManager(models.Manager):\n     def get_queryset(self):\n         return super().get_queryset().filter(hidden=False)\ndiff --git a/tests/admin_widgets/test_autocomplete_widget.py b/tests/admin_widgets/test_autocomplete_widget.py\n--- a/tests/admin_widgets/test_autocomplete_widget.py\n+++ b/tests/admin_widgets/test_autocomplete_widget.py\n@@ -5,7 +5,7 @@\n from django.test import TestCase, override_settings\n from django.utils import translation\n \n-from .models import Album, Band\n+from .models import Album, Band, ReleaseEvent, VideoStream\n \n \n class AlbumForm(forms.ModelForm):\n@@ -41,6 +41,18 @@ class RequiredBandForm(forms.Form):\n     )\n \n \n+class VideoStreamForm(forms.ModelForm):\n+    class Meta:\n+        model = VideoStream\n+        fields = ['release_event']\n+        widgets = {\n+            'release_event': AutocompleteSelect(\n+                VideoStream._meta.get_field('release_event'),\n+                admin.site,\n+            ),\n+        }\n+\n+\n @override_settings(ROOT_URLCONF='admin_widgets.urls')\n class AutocompleteMixinTests(TestCase):\n     empty_option = '<option value=\"\"></option>'\n@@ -114,6 +126,15 @@ def test_render_options_not_required_field(self):\n         output = form.as_table()\n         self.assertNotIn(self.empty_option, output)\n \n+    def test_render_options_fk_as_pk(self):\n+        beatles = Band.objects.create(name='The Beatles', style='rock')\n+        rubber_soul = Album.objects.create(name='Rubber Soul', band=beatles)\n+        release_event = ReleaseEvent.objects.create(name='Test Target', album=rubber_soul)\n+        form = VideoStreamForm(initial={'release_event': release_event.pk})\n+        output = form.as_table()\n+        selected_option = '<option value=\"%s\" selected>Test Target</option>' % release_event.pk\n+        self.assertIn(selected_option, output)\n+\n     def test_media(self):\n         rel = Album._meta.get_field('band').remote_field\n         base_files = (\ndiff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -24,7 +24,7 @@\n from .models import (\n     Advisor, Album, Band, Bee, Car, Company, Event, Honeycomb, Individual,\n     Inventory, Member, MyFileField, Profile, School, Student,\n-    UnsafeLimitChoicesTo,\n+    UnsafeLimitChoicesTo, VideoStream,\n )\n from .widgetadmin import site as widget_admin_site\n \n@@ -624,7 +624,17 @@ def test_render_unsafe_limit_choices_to(self):\n         self.assertHTMLEqual(\n             w.render('test', None),\n             '<input type=\"text\" name=\"test\" class=\"vForeignKeyRawIdAdminField\">\\n'\n-            '<a href=\"/admin_widgets/band/?name=%22%26%3E%3Cescapeme&amp;_to_field=id\" '\n+            '<a href=\"/admin_widgets/band/?name=%22%26%3E%3Cescapeme&amp;_to_field=artist_ptr\" '\n+            'class=\"related-lookup\" id=\"lookup_id_test\" title=\"Lookup\"></a>'\n+        )\n+\n+    def test_render_fk_as_pk_model(self):\n+        rel = VideoStream._meta.get_field('release_event').remote_field\n+        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n+        self.assertHTMLEqual(\n+            w.render('test', None),\n+            '<input type=\"text\" name=\"test\" class=\"vForeignKeyRawIdAdminField\">\\n'\n+            '<a href=\"/admin_widgets/releaseevent/?_to_field=album\" '\n             'class=\"related-lookup\" id=\"lookup_id_test\" title=\"Lookup\"></a>'\n         )\n \ndiff --git a/tests/admin_widgets/widgetadmin.py b/tests/admin_widgets/widgetadmin.py\n--- a/tests/admin_widgets/widgetadmin.py\n+++ b/tests/admin_widgets/widgetadmin.py\n@@ -2,7 +2,7 @@\n \n from .models import (\n     Advisor, Album, Band, Bee, Car, CarTire, Event, Inventory, Member, Profile,\n-    School, User,\n+    ReleaseEvent, School, User, VideoStream,\n )\n \n \n@@ -47,6 +47,8 @@ class SchoolAdmin(admin.ModelAdmin):\n site.register(Band)\n site.register(Event, EventAdmin)\n site.register(Album, AlbumAdmin)\n+site.register(ReleaseEvent, search_fields=['name'])\n+site.register(VideoStream, autocomplete_fields=['release_event'])\n \n site.register(Inventory)\n \n",
  "problem_statement": "Ticket #29138 breaks autocomplete for inherited models\nDescription\n\t\nUnfortunately, Closed ticket #29138 breaks autocomplete for the case of inherited models. For example, we have the following code:\n# models.py\nfrom django.db import models\nclass Tag(models.Model):\n\tpass\nclass Foo(models.Model):\n\ttags = models.ManyToManyField(Tag)\nclass Bar(Foo):\n\tpass\n# admin.py\nfrom django.contrib import admin\nfrom . import models\n@admin.register(models.Foo)\nclass Foo(admin.ModelAdmin):\n\tautocomplete_fields = ('tags',)\n@admin.register(models.Bar)\nclass Bar(admin.ModelAdmin):\n\tautocomplete_fields = ('tags',)\nNow, autocomplete for admin.Foo will work but not for admin.Bar because django.contrib.admin.widgets.AutocompleteMixin.optgroups() calculates a wrong value of a variable to_field_name, namely foo_ptr instead of id, whereupon following look up at self.choices.queryset.using(self.db).filter(**{'%s__in' % to_field_name: selected_choices}) raises an exception because models.Tag does not have foo_ptr.\n",
  "hints_text": "Thanks for testing out the Django 3.2 beta.\nRegression in 3071660acfbdf4b5c59457c8e9dc345d5e8894c5.\nThanks, good find. I am on it.\nHi there, I tested the reported error first on my projects, where I use MTI and then on the example (which is incomplete). Both didn't yield the error or the to_field_value that was described. That is also unlikely, since the to_field_value is correctly based on the remote model. Therefore, I must conclude this issue is invalid. Feel free to reopen it, preferably with a valid example – I have been wrong in the past. Should the problem just be in your projects setup, please feel free to reach out. I am happy to help. Best, Joe\nUnfortunately, previous code was a little bit abstract. Here you can find a correct application – ​https://bitbucket.org/dlis/buggy/. Please, try open buggy.admin.Bar in admin. The application works perfectly on Django 3.1.x but raises the following error on Django 3.2.x: \"FieldError at /admin/buggy/bar/add/ Cannot resolve keyword 'foo_ptr' into field. Choices are: bar, id\"\nThanks for the code, that usually really helps. I will review it tomorrow, it's family time in my timezone ;)",
  "created_at": "2021-02-22T11:58:03Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_render_options_fk_as_pk (admin_widgets.test_autocomplete_widget.AutocompleteMixinTests)\", \"Empty option isn't present if the field isn't required.\", \"Empty option is present if the field isn't required.\", \"test_to_field_resolution_with_fk_pk (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"to_field resolution should correctly resolve for target models using\"]",
  "PASS_TO_PASS": "[\"test_CharField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_DateField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_DateTimeField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_EmailField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_FileField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_ForeignKey (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_IntegerField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_TextField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_TimeField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_URLField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_choices_with_radio_fields (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_field_with_choices (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_filtered_many_to_many (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_formfield_overrides (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"formfield_overrides works for a custom field class.\", \"Overriding the widget for DateTimeField doesn't overrides the default\", \"The autocomplete_fields, raw_id_fields, filter_vertical, and\", \"Widget instances in formfield_overrides are not shared between\", \"test_inheritance (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"m2m fields help text as it applies to admin app (#9321).\", \"test_many_to_many (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_radio_fields_ForeignKey (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_raw_id_ForeignKey (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_raw_id_many_to_many (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_attrs (admin_widgets.tests.AdminDateWidgetTest)\", \"test_attrs (admin_widgets.tests.AdminTimeWidgetTest)\", \"test_attrs (admin_widgets.tests.AdminUUIDWidgetTests)\", \"test_render (admin_widgets.tests.FilteredSelectMultipleWidgetTest)\", \"test_stacked_render (admin_widgets.tests.FilteredSelectMultipleWidgetTest)\", \"test_localization (admin_widgets.tests.AdminSplitDateTimeWidgetTest)\", \"test_render (admin_widgets.tests.AdminSplitDateTimeWidgetTest)\", \"test_custom_widget_render (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_no_can_add_related (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_on_delete_cascade_rel_cant_delete_related (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_select_multiple_widget_cant_change_delete_related (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_widget_delegates_value_omitted_from_data (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_widget_is_hidden (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_widget_is_not_hidden (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_get_context_validates_url (admin_widgets.tests.AdminURLWidgetTest)\", \"test_render (admin_widgets.tests.AdminURLWidgetTest)\", \"test_render_idn (admin_widgets.tests.AdminURLWidgetTest)\", \"WARNING: This test doesn't use assertHTMLEqual since it will get rid\", \"test_fk_related_model_not_in_admin (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_fk_to_self_model_not_in_admin (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_proper_manager_for_label_lookup (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_relations_to_non_primary_key (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_render (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_render_fk_as_pk_model (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_render_unsafe_limit_choices_to (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_build_attrs (admin_widgets.test_autocomplete_widget.AutocompleteMixinTests)\", \"test_build_attrs_no_custom_class (admin_widgets.test_autocomplete_widget.AutocompleteMixinTests)\", \"test_build_attrs_not_required_field (admin_widgets.test_autocomplete_widget.AutocompleteMixinTests)\", \"test_build_attrs_required_field (admin_widgets.test_autocomplete_widget.AutocompleteMixinTests)\", \"test_get_url (admin_widgets.test_autocomplete_widget.AutocompleteMixinTests)\", \"test_media (admin_widgets.test_autocomplete_widget.AutocompleteMixinTests)\", \"test_render_options (admin_widgets.test_autocomplete_widget.AutocompleteMixinTests)\", \"test_m2m_related_model_not_in_admin (admin_widgets.tests.ManyToManyRawIdWidgetTest)\", \"test_render (admin_widgets.tests.ManyToManyRawIdWidgetTest)\", \"Ensure the user can only see their own cars in the foreign key dropdown.\", \"test_changelist_ForeignKey (admin_widgets.tests.AdminForeignKeyWidgetChangeList)\", \"File widgets should render as a link when they're marked \\\"read only.\\\"\", \"test_render (admin_widgets.tests.AdminFileWidgetTests)\", \"test_render_disabled (admin_widgets.tests.AdminFileWidgetTests)\", \"test_render_required (admin_widgets.tests.AdminFileWidgetTests)\", \"test_invalid_target_id (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_label_and_url_for_value_invalid_uuid (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_nonexistent_target_id (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_url_params_from_lookup_dict_any_iterable (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_url_params_from_lookup_dict_callable (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_custom_to_field (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"test_custom_to_field_custom_pk (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"test_custom_to_field_permission_denied (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"test_field_does_not_allowed (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"test_field_does_not_exist (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"test_field_no_related_field (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"Search results are paginated.\", \"Users require the change permission for the related model to the\", \"test_limit_choices_to (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"test_missing_search_fields (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"test_must_be_logged_in (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\", \"Searching across model relations use QuerySet.distinct() to avoid\", \"test_success (admin_views.test_autocomplete_view.AutocompleteJsonViewTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.678942",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}