{
  "repo": "django/django",
  "instance_id": "django__django-15738",
  "base_commit": "6f73eb9d90cfec684529aab48d517e3d6449ba8c",
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1022,8 +1022,9 @@ def generate_added_fields(self):\n \n     def _generate_added_field(self, app_label, model_name, field_name):\n         field = self.to_state.models[app_label, model_name].get_field(field_name)\n-        # Fields that are foreignkeys/m2ms depend on stuff\n-        dependencies = []\n+        # Adding a field always depends at least on its removal.\n+        dependencies = [(app_label, model_name, field_name, False)]\n+        # Fields that are foreignkeys/m2ms depend on stuff.\n         if field.remote_field and field.remote_field.model:\n             dependencies.extend(\n                 self._get_dependencies_for_foreign_key(\n",
  "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -868,6 +868,18 @@ class AutodetectorTests(TestCase):\n             \"unique_together\": {(\"title\", \"newfield2\")},\n         },\n     )\n+    book_unique_together = ModelState(\n+        \"otherapp\",\n+        \"Book\",\n+        [\n+            (\"id\", models.AutoField(primary_key=True)),\n+            (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n+            (\"title\", models.CharField(max_length=200)),\n+        ],\n+        {\n+            \"unique_together\": {(\"author\", \"title\")},\n+        },\n+    )\n     attribution = ModelState(\n         \"otherapp\",\n         \"Attribution\",\n@@ -3798,16 +3810,16 @@ def test_many_to_many_changed_to_concrete_field(self):\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, \"testapp\", 1)\n         self.assertOperationTypes(\n-            changes, \"testapp\", 0, [\"RemoveField\", \"AddField\", \"DeleteModel\"]\n+            changes, \"testapp\", 0, [\"RemoveField\", \"DeleteModel\", \"AddField\"]\n         )\n         self.assertOperationAttributes(\n             changes, \"testapp\", 0, 0, name=\"publishers\", model_name=\"author\"\n         )\n+        self.assertOperationAttributes(changes, \"testapp\", 0, 1, name=\"Publisher\")\n         self.assertOperationAttributes(\n-            changes, \"testapp\", 0, 1, name=\"publishers\", model_name=\"author\"\n+            changes, \"testapp\", 0, 2, name=\"publishers\", model_name=\"author\"\n         )\n-        self.assertOperationAttributes(changes, \"testapp\", 0, 2, name=\"Publisher\")\n-        self.assertOperationFieldAttributes(changes, \"testapp\", 0, 1, max_length=100)\n+        self.assertOperationFieldAttributes(changes, \"testapp\", 0, 2, max_length=100)\n \n     def test_non_circular_foreignkey_dependency_removal(self):\n         \"\"\"\n@@ -4346,6 +4358,36 @@ def test_fk_dependency_other_app(self):\n             changes, \"testapp\", 0, [(\"otherapp\", \"__first__\")]\n         )\n \n+    def test_alter_unique_together_fk_to_m2m(self):\n+        changes = self.get_changes(\n+            [self.author_name, self.book_unique_together],\n+            [\n+                self.author_name,\n+                ModelState(\n+                    \"otherapp\",\n+                    \"Book\",\n+                    [\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"author\", models.ManyToManyField(\"testapp.Author\")),\n+                        (\"title\", models.CharField(max_length=200)),\n+                    ],\n+                ),\n+            ],\n+        )\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(\n+            changes, \"otherapp\", 0, [\"AlterUniqueTogether\", \"RemoveField\", \"AddField\"]\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 0, name=\"book\", unique_together=set()\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 1, model_name=\"book\", name=\"author\"\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 2, model_name=\"book\", name=\"author\"\n+        )\n+\n     def test_alter_field_to_fk_dependency_other_app(self):\n         changes = self.get_changes(\n             [self.author_empty, self.book_with_no_author_fk],\n",
  "problem_statement": "Models migration with change field foreign to many and deleting unique together.\nDescription\n\t \n\t\t(last modified by Simon Charette)\n\t \nI have models like\nclass Authors(models.Model):\n\tproject_data_set = models.ForeignKey(\n\t\tProjectDataSet,\n\t\ton_delete=models.PROTECT\n\t)\n\tstate = models.IntegerField()\n\tstart_date = models.DateField()\n\tclass Meta:\n\t\t unique_together = (('project_data_set', 'state', 'start_date'),)\nand\nclass DataSet(models.Model):\n\tname = models.TextField(max_length=50)\nclass Project(models.Model):\n\tdata_sets = models.ManyToManyField(\n\t\tDataSet,\n\t\tthrough='ProjectDataSet',\n\t)\n\tname = models.TextField(max_length=50)\nclass ProjectDataSet(models.Model):\n\t\"\"\"\n\tCross table of data set and project\n\t\"\"\"\n\tdata_set = models.ForeignKey(DataSet, on_delete=models.PROTECT)\n\tproject = models.ForeignKey(Project, on_delete=models.PROTECT)\n\tclass Meta:\n\t\tunique_together = (('data_set', 'project'),)\nwhen i want to change field project_data_set in Authors model from foreign key field to many to many field I must delete a unique_together, cause it can't be on many to many field.\nThen my model should be like:\nclass Authors(models.Model):\n\tproject_data_set = models.ManyToManyField(\n\t\tProjectDataSet,\n\t)\n\tstate = models.IntegerField()\n\tstart_date = models.DateField()\nBut when I want to do a migrations.\npython3 manage.py makemigrations\npython3 manage.py migrate\nI have error:\nValueError: Found wrong number (0) of constraints for app_authors(project_data_set, state, start_date)\nThe database is on production, so I can't delete previous initial migrations, and this error isn't depending on database, cause I delete it and error is still the same.\nMy solve is to first delete unique_together, then do a makemigrations and then migrate. After that change the field from foreign key to many to many field, then do a makemigrations and then migrate.\nBut in this way I have 2 migrations instead of one.\nI added attachment with this project, download it and then do makemigrations and then migrate to see this error.\n",
  "hints_text": "Download this file and then do makemigrations and migrate to see this error.\nThanks for the report. Tentatively accepting, however I'm not sure if we can sort these operations properly, we should probably alter unique_together first migrations.AlterUniqueTogether( name='authors', unique_together=set(), ), migrations.RemoveField( model_name='authors', name='project_data_set', ), migrations.AddField( model_name='authors', name='project_data_set', field=models.ManyToManyField(to='dict.ProjectDataSet'), ), You should take into account that you'll lose all data because ForeignKey cannot be altered to ManyToManyField.\nI agree that you'll loose data but Alter(Index|Unique)Together should always be sorted before RemoveField ​https://github.com/django/django/blob/b502061027b90499f2e20210f944292cecd74d24/django/db/migrations/autodetector.py#L910 ​https://github.com/django/django/blob/b502061027b90499f2e20210f944292cecd74d24/django/db/migrations/autodetector.py#L424-L430 So something's broken here in a few different ways and I suspect it's due to the fact the same field name project_data_set is reused for the many-to-many field. If you start from class Authors(models.Model): project_data_set = models.ForeignKey( ProjectDataSet, on_delete=models.PROTECT ) state = models.IntegerField() start_date = models.DateField() class Meta: unique_together = (('project_data_set', 'state', 'start_date'),) And generate makemigrations for class Authors(models.Model): project_data_set = models.ManyToManyField(ProjectDataSet) state = models.IntegerField() start_date = models.DateField() You'll get two migrations with the following operations # 0002 operations = [ migrations.AddField( model_name='authors', name='project_data_set', field=models.ManyToManyField(to='ticket_31788.ProjectDataSet'), ), migrations.AlterUniqueTogether( name='authors', unique_together=set(), ), migrations.RemoveField( model_name='authors', name='project_data_set', ), ] # 0003 operations = [ migrations.AddField( model_name='authors', name='project_data_set', field=models.ManyToManyField(to='ticket_31788.ProjectDataSet'), ), ] If you change the name of the field to something else like project_data_sets every work as expected operations = [ migrations.AddField( model_name='authors', name='project_data_sets', field=models.ManyToManyField(to='ticket_31788.ProjectDataSet'), ), migrations.AlterUniqueTogether( name='authors', unique_together=set(), ), migrations.RemoveField( model_name='authors', name='project_data_set', ), ] It seems like there's some bad interactions between generate_removed_fields and generate_added_fields when a field with the same name is added.",
  "created_at": "2022-05-27T13:20:14Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_alter_unique_together_fk_to_m2m (migrations.test_autodetector.AutodetectorTests)\", \"#23938 - Changing a ManyToManyField into a concrete field\"]",
  "PASS_TO_PASS": "[\"test_auto (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_many_operations_suffix (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_no_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_no_operations_initial (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_none_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_none_name_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_operation_with_no_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_operation (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_operation_long_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_create_models (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_create_models_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"Setting order_with_respect_to when adding the FK too does\", \"#23405 - Adding a NOT NULL and blank `CharField` or `TextField`\", \"Test change detection of new constraints.\", \"test_add_custom_fk_with_hardcoded_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new fields.\", \"Added fields will be created before using them in index/unique_together.\", \"#22030 - Adding a field with a default should work.\", \"Tests index/unique_together detection.\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"Setting order_with_respect_to when adding the whole model\", \"test_add_model_order_with_respect_to_index_constraint (migrations.test_autodetector.AutodetectorTests)\", \"test_add_model_order_with_respect_to_index_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"Removing a base field takes place before adding a new inherited model\", \"#23405 - Adding a NOT NULL and non-blank `CharField` or `TextField`\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"Alter_db_table doesn't generate a migration if no changes have been made.\", \"Tests detection for removing db_table in model's options.\", \"Tests when model and db_table changes, autodetector must create two\", \"Fields are altered after deleting some index/unique_together.\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"#23609 - Tests autodetection of nullable to non-nullable alterations.\", \"ForeignKeys are altered _before_ the model they used to\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"Changing the model managers adds a new operation.\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"test_alter_regex_string_to_compiled_regex (migrations.test_autodetector.AutodetectorTests)\", \"Tests auto-naming of migrations for graph matching.\", \"test_arrange_for_graph_with_multiple_initial (migrations.test_autodetector.AutodetectorTests)\", \"Bases of other models come first.\", \"test_bases_first_mixed_case_app_label (migrations.test_autodetector.AutodetectorTests)\", \"#23315 - The dependency resolver knows to put all CreateModel\", \"#23322 - The dependency resolver knows to explicitly resolve\", \"Having a circular ForeignKey dependency automatically\", \"#23938 - Changing a concrete field into a ManyToManyField\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"Adding a m2m with a through model and the models that use it should be\", \"Two instances which deconstruct to the same value aren't considered a\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"#22951 -- Uninstantiated classes with deconstruct are correctly returned\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)\", \"#23452 - Empty unique/index_together shouldn't generate a migration.\", \"A dependency to an app with no migrations uses __first__.\", \"Having a ForeignKey automatically adds a dependency.\", \"#23100 - ForeignKeys correctly depend on other apps' models.\", \"index/unique_together doesn't generate a migration if no\", \"index/unique_together also triggers on ordering changes.\", \"Tests unique_together and field removal detection & ordering\", \"Removing an FK and the model it targets in the same change must remove\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)\", \"Tests when model changes but db_table stays as-is, autodetector must not\", \"A dependency to an app with existing migrations uses the\", \"A model with a m2m field that specifies a \\\"through\\\" model cannot be\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)\", \"Removing a ManyToManyField and the \\\"through\\\" model in the same change\", \"Removing a model that contains a ManyToManyField and the \\\"through\\\" model\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)\", \"Inheriting models doesn't move *_ptr fields into AddField operations.\", \"Nested deconstruction is applied recursively to the args/kwargs of\", \"Tests autodetection of new models.\", \"If two models with a ForeignKey from one to the other are removed at the\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_parse_number (migrations.test_autodetector.AutodetectorTests)\", \"test_partly_alter_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"A relation used as the primary key is kept as part of CreateModel.\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"#23415 - The autodetector must correctly deal with custom FK on proxy\", \"FK dependencies still work on proxy models.\", \"test_proxy_non_model_parent (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)\", \"Removing order_with_respect_to when removing the FK too does\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"Removed fields will be removed after updating index/unique_together.\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"Fields are renamed before updating index/unique_together.\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)\", \"RenameField is used if a field is renamed and db_column equal to the\", \"test_rename_field_with_renamed_model (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_index_together_to_index (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_index_together_to_index_extra_options (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_index_together_to_index_order_fields (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_indexes (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of renamed models that are used in M2M relations as\", \"Tests autodetection of renamed models.\", \"Model name is case-insensitive. Changing case doesn't lead to any\", \"The migration to rename a model pointed to by a foreign key in another\", \"#24537 - The order of fields in a model does not influence\", \"Tests autodetection of renamed models while simultaneously renaming one\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_renamed_referenced_m2m_model_case (migrations.test_autodetector.AutodetectorTests)\", \"#22300 - Adding an FK in the same \\\"spot\\\" as a deleted CharField should\", \"A migration with a FK between two models of the same app does\", \"#22275 - A migration with circular FK dependency does not try\", \"A migration with a FK between two models of the same app\", \"Setting order_with_respect_to adds a field.\", \"test_set_alter_order_with_respect_to_index_constraint_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)\", \"Swappable models get their CreateModel first.\", \"test_swappable_lowercase (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_many_to_many_model_case (migrations.test_autodetector.AutodetectorTests)\", \"Trim does not remove dependencies but does remove unwanted apps.\", \"The autodetector correctly deals with managed models.\", \"#23415 - The autodetector must correctly deal with custom FK on\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.739422",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}