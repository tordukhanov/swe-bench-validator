{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-20693",
  "base_commit": "54b105b27dea498e702cfddfb27b7f82abe65e56",
  "patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1800,7 +1800,6 @@ def __init__(self, ax, onselect, useblit=False, button=None,\n         self.state_modifier_keys.update(state_modifier_keys or {})\n \n         self.background = None\n-        self.artists = []\n \n         if isinstance(button, Integral):\n             self.validButtons = [button]\n@@ -2009,6 +2008,41 @@ def set_visible(self, visible):\n         for artist in self.artists:\n             artist.set_visible(visible)\n \n+    @property\n+    def artists(self):\n+        \"\"\"Tuple of the artists of the selector.\"\"\"\n+        handles_artists = getattr(self, '_handles_artists', ())\n+        return (self._selection_artist,) + handles_artists\n+\n+    def set_props(self, **props):\n+        \"\"\"\n+        Set the properties of the selector artist. See the `props` argument\n+        in the selector docstring to know which properties are supported.\n+        \"\"\"\n+        artist = self._selection_artist\n+        props = cbook.normalize_kwargs(props, artist)\n+        artist.set(**props)\n+        if self.useblit:\n+            self.update()\n+        self._props.update(props)\n+\n+    def set_handle_props(self, **handle_props):\n+        \"\"\"\n+        Set the properties of the handles selector artist. See the\n+        `handle_props` argument in the selector docstring to know which\n+        properties are supported.\n+        \"\"\"\n+        if not hasattr(self, '_handles_artists'):\n+            raise NotImplementedError(\"This selector doesn't have handles.\")\n+\n+        artist = self._handles_artists[0]\n+        handle_props = cbook.normalize_kwargs(handle_props, artist)\n+        for handle in self._handles_artists:\n+            handle.set(**handle_props)\n+        if self.useblit:\n+            self.update()\n+        self._handle_props.update(handle_props)\n+\n \n class SpanSelector(_SelectorWidget):\n     \"\"\"\n@@ -2114,7 +2148,6 @@ def __init__(self, ax, onselect, direction, minspan=0, useblit=False,\n \n         self.direction = direction\n \n-        self._rect = None\n         self.visible = True\n         self._extents_on_press = None\n \n@@ -2128,29 +2161,31 @@ def __init__(self, ax, onselect, direction, minspan=0, useblit=False,\n \n         self.grab_range = grab_range\n         self._interactive = interactive\n+        self._edge_handles = None\n         self.drag_from_anywhere = drag_from_anywhere\n         self.ignore_event_outside = ignore_event_outside\n \n         # Reset canvas so that `new_axes` connects events.\n         self.canvas = None\n-        self.artists = []\n         self.new_axes(ax)\n \n         # Setup handles\n-        handle_props = {\n+        self._handle_props = {\n             'color': props.get('facecolor', 'r'),\n-            **cbook.normalize_kwargs(handle_props, Line2D._alias_map)}\n+            **cbook.normalize_kwargs(handle_props, Line2D)}\n \n         if self._interactive:\n             self._edge_order = ['min', 'max']\n-            self._setup_edge_handle(handle_props)\n+            self._setup_edge_handles(self._handle_props)\n \n         self._active_handle = None\n \n         # prev attribute is deprecated but we still need to maintain it\n         self._prev = (0, 0)\n \n-    rect = _api.deprecate_privatize_attribute(\"3.5\")\n+    rect = _api.deprecated(\"3.5\")(\n+        property(lambda self: self._selection_artist)\n+        )\n \n     rectprops = _api.deprecated(\"3.5\")(\n         property(lambda self: self._props)\n@@ -2185,18 +2220,15 @@ def new_axes(self, ax):\n         else:\n             trans = ax.get_yaxis_transform()\n             w, h = 1, 0\n-        self._rect = Rectangle((0, 0), w, h,\n-                               transform=trans,\n-                               visible=False,\n-                               **self._props)\n-\n-        self.ax.add_patch(self._rect)\n-        if len(self.artists) > 0:\n-            self.artists[0] = self._rect\n-        else:\n-            self.artists.append(self._rect)\n+        rect_artist = Rectangle((0, 0), w, h,\n+                                transform=trans,\n+                                visible=False,\n+                                **self._props)\n+\n+        self.ax.add_patch(rect_artist)\n+        self._selection_artist = rect_artist\n \n-    def _setup_edge_handle(self, props):\n+    def _setup_edge_handles(self, props):\n         # Define initial position using the axis bounds to keep the same bounds\n         if self.direction == 'horizontal':\n             positions = self.ax.get_xbound()\n@@ -2206,7 +2238,13 @@ def _setup_edge_handle(self, props):\n                                              direction=self.direction,\n                                              line_props=props,\n                                              useblit=self.useblit)\n-        self.artists.extend([line for line in self._edge_handles.artists])\n+\n+    @property\n+    def _handles_artists(self):\n+        if self._edge_handles is not None:\n+            return self._edge_handles.artists\n+        else:\n+            return ()\n \n     def _set_cursor(self, enabled):\n         \"\"\"Update the canvas cursor based on direction of the selector.\"\"\"\n@@ -2228,7 +2266,7 @@ def connect_default_events(self):\n     def _press(self, event):\n         \"\"\"Button press event handler.\"\"\"\n         self._set_cursor(True)\n-        if self._interactive and self._rect.get_visible():\n+        if self._interactive and self._selection_artist.get_visible():\n             self._set_active_handle(event)\n         else:\n             self._active_handle = None\n@@ -2268,15 +2306,13 @@ def direction(self, direction):\n         _api.check_in_list(['horizontal', 'vertical'], direction=direction)\n         if hasattr(self, '_direction') and direction != self._direction:\n             # remove previous artists\n-            self._rect.remove()\n+            self._selection_artist.remove()\n             if self._interactive:\n                 self._edge_handles.remove()\n-                for artist in self._edge_handles.artists:\n-                    self.artists.remove(artist)\n             self._direction = direction\n             self.new_axes(self.ax)\n             if self._interactive:\n-                self._setup_edge_handle(self._edge_handles._line_props)\n+                self._setup_edge_handles(self._handle_props)\n         else:\n             self._direction = direction\n \n@@ -2287,7 +2323,7 @@ def _release(self, event):\n         self._pressv = None\n \n         if not self._interactive:\n-            self._rect.set_visible(False)\n+            self._selection_artist.set_visible(False)\n \n         if (self._active_handle is None and self._selection_completed and\n                 self.ignore_event_outside):\n@@ -2375,11 +2411,11 @@ def _draw_shape(self, vmin, vmax):\n         if vmin > vmax:\n             vmin, vmax = vmax, vmin\n         if self.direction == 'horizontal':\n-            self._rect.set_x(vmin)\n-            self._rect.set_width(vmax - vmin)\n+            self._selection_artist.set_x(vmin)\n+            self._selection_artist.set_width(vmax - vmin)\n         else:\n-            self._rect.set_y(vmin)\n-            self._rect.set_height(vmax - vmin)\n+            self._selection_artist.set_y(vmin)\n+            self._selection_artist.set_height(vmax - vmin)\n \n     def _set_active_handle(self, event):\n         \"\"\"Set active handle based on the location of the mouse event.\"\"\"\n@@ -2409,17 +2445,17 @@ def _set_active_handle(self, event):\n \n     def _contains(self, event):\n         \"\"\"Return True if event is within the patch.\"\"\"\n-        return self._rect.contains(event, radius=0)[0]\n+        return self._selection_artist.contains(event, radius=0)[0]\n \n     @property\n     def extents(self):\n         \"\"\"Return extents of the span selector.\"\"\"\n         if self.direction == 'horizontal':\n-            vmin = self._rect.get_x()\n-            vmax = vmin + self._rect.get_width()\n+            vmin = self._selection_artist.get_x()\n+            vmax = vmin + self._selection_artist.get_width()\n         else:\n-            vmin = self._rect.get_y()\n-            vmax = vmin + self._rect.get_height()\n+            vmin = self._selection_artist.get_y()\n+            vmax = vmin + self._selection_artist.get_height()\n         return vmin, vmax\n \n     @extents.setter\n@@ -2464,9 +2500,12 @@ def __init__(self, ax, positions, direction, line_props=None,\n         line_props.update({'visible': False, 'animated': useblit})\n \n         line_fun = ax.axvline if self.direction == 'horizontal' else ax.axhline\n-        self._line_props = line_props\n \n-        self.artists = [line_fun(p, **line_props) for p in positions]\n+        self._artists = [line_fun(p, **line_props) for p in positions]\n+\n+    @property\n+    def artists(self):\n+        return tuple(self._artists)\n \n     @property\n     def positions(self):\n@@ -2505,7 +2544,7 @@ def set_animated(self, value):\n \n     def remove(self):\n         \"\"\"Remove the handles artist from the figure.\"\"\"\n-        for artist in self.artists:\n+        for artist in self._artists:\n             artist.remove()\n \n     def closest(self, x, y):\n@@ -2564,7 +2603,6 @@ def __init__(self, ax, x, y, marker='o', marker_props=None, useblit=True):\n                  **cbook.normalize_kwargs(marker_props, Line2D._alias_map)}\n         self._markers = Line2D(x, y, animated=useblit, **props)\n         self.ax.add_line(self._markers)\n-        self.artist = self._markers\n \n     @property\n     def x(self):\n@@ -2574,6 +2612,10 @@ def x(self):\n     def y(self):\n         return self._markers.get_ydata()\n \n+    @property\n+    def artists(self):\n+        return (self._markers, )\n+\n     def set_data(self, pts, y=None):\n         \"\"\"Set x and y positions of handles.\"\"\"\n         if y is not None:\n@@ -2726,7 +2768,6 @@ def __init__(self, ax, onselect, drawtype='box',\n         super().__init__(ax, onselect, useblit=useblit, button=button,\n                          state_modifier_keys=state_modifier_keys)\n \n-        self._to_draw = None\n         self.visible = True\n         self._interactive = interactive\n         self.drag_from_anywhere = drag_from_anywhere\n@@ -2746,11 +2787,11 @@ def __init__(self, ax, onselect, drawtype='box',\n                 props = dict(facecolor='red', edgecolor='black',\n                              alpha=0.2, fill=True)\n             props['animated'] = self.useblit\n-            _props = props\n-            self.visible = _props.pop('visible', self.visible)\n-            self._to_draw = self._shape_klass((0, 0), 0, 1, visible=False,\n-                                              **_props)\n-            self.ax.add_patch(self._to_draw)\n+            self.visible = props.pop('visible', self.visible)\n+            self._props = props\n+            to_draw = self._shape_klass((0, 0), 0, 1, visible=False,\n+                                        **self._props)\n+            self.ax.add_patch(to_draw)\n         if drawtype == 'line':\n             _api.warn_deprecated(\n                 \"3.5\", message=\"Support for drawtype='line' is deprecated \"\n@@ -2760,10 +2801,11 @@ def __init__(self, ax, onselect, drawtype='box',\n                 lineprops = dict(color='black', linestyle='-',\n                                  linewidth=2, alpha=0.5)\n             lineprops['animated'] = self.useblit\n-            self.lineprops = lineprops\n-            self._to_draw = Line2D([0, 0], [0, 0], visible=False,\n-                                   **self.lineprops)\n-            self.ax.add_line(self._to_draw)\n+            self._props = lineprops\n+            to_draw = Line2D([0, 0], [0, 0], visible=False, **self._props)\n+            self.ax.add_line(to_draw)\n+\n+        self._selection_artist = to_draw\n \n         self.minspanx = minspanx\n         self.minspany = minspany\n@@ -2774,39 +2816,36 @@ def __init__(self, ax, onselect, drawtype='box',\n \n         self.grab_range = grab_range\n \n-        handle_props = {\n-            'markeredgecolor': (props or {}).get('edgecolor', 'black'),\n-            **cbook.normalize_kwargs(handle_props, Line2D._alias_map)}\n-\n-        self._corner_order = ['NW', 'NE', 'SE', 'SW']\n-        xc, yc = self.corners\n-        self._corner_handles = ToolHandles(self.ax, xc, yc,\n-                                           marker_props=handle_props,\n-                                           useblit=self.useblit)\n-\n-        self._edge_order = ['W', 'N', 'E', 'S']\n-        xe, ye = self.edge_centers\n-        self._edge_handles = ToolHandles(self.ax, xe, ye, marker='s',\n-                                         marker_props=handle_props,\n-                                         useblit=self.useblit)\n-\n-        xc, yc = self.center\n-        self._center_handle = ToolHandles(self.ax, [xc], [yc], marker='s',\n-                                          marker_props=handle_props,\n-                                          useblit=self.useblit)\n-\n-        self._active_handle = None\n+        if self._interactive:\n+            self._handle_props = {\n+                'markeredgecolor': (self._props or {}).get(\n+                    'edgecolor', 'black'),\n+                **cbook.normalize_kwargs(handle_props, Line2D)}\n+\n+            self._corner_order = ['NW', 'NE', 'SE', 'SW']\n+            xc, yc = self.corners\n+            self._corner_handles = ToolHandles(self.ax, xc, yc,\n+                                               marker_props=self._handle_props,\n+                                               useblit=self.useblit)\n+\n+            self._edge_order = ['W', 'N', 'E', 'S']\n+            xe, ye = self.edge_centers\n+            self._edge_handles = ToolHandles(self.ax, xe, ye, marker='s',\n+                                             marker_props=self._handle_props,\n+                                             useblit=self.useblit)\n \n-        self.artists = [self._to_draw, self._center_handle.artist,\n-                        self._corner_handles.artist,\n-                        self._edge_handles.artist]\n+            xc, yc = self.center\n+            self._center_handle = ToolHandles(self.ax, [xc], [yc], marker='s',\n+                                              marker_props=self._handle_props,\n+                                              useblit=self.useblit)\n \n-        if not self._interactive:\n-            self.artists = [self._to_draw]\n+            self._active_handle = None\n \n         self._extents_on_press = None\n \n-    to_draw = _api.deprecate_privatize_attribute(\"3.5\")\n+    to_draw = _api.deprecated(\"3.5\")(\n+        property(lambda self: self._selection_artist)\n+        )\n \n     drawtype = _api.deprecate_privatize_attribute(\"3.5\")\n \n@@ -2818,11 +2857,16 @@ def __init__(self, ax, onselect, drawtype='box',\n         property(lambda self: self.grab_range,\n                  lambda self, value: setattr(self, \"grab_range\", value)))\n \n+    @property\n+    def _handles_artists(self):\n+        return (*self._center_handle.artists, *self._corner_handles.artists,\n+                *self._edge_handles.artists)\n+\n     def _press(self, event):\n         \"\"\"Button press event handler.\"\"\"\n         # make the drawn box/line visible get the click-coordinates,\n         # button, ...\n-        if self._interactive and self._to_draw.get_visible():\n+        if self._interactive and self._selection_artist.get_visible():\n             self._set_active_handle(event)\n         else:\n             self._active_handle = None\n@@ -2845,7 +2889,7 @@ def _press(self, event):\n     def _release(self, event):\n         \"\"\"Button release event handler.\"\"\"\n         if not self._interactive:\n-            self._to_draw.set_visible(False)\n+            self._selection_artist.set_visible(False)\n \n         if (self._active_handle is None and self._selection_completed and\n                 self.ignore_event_outside):\n@@ -2955,13 +2999,13 @@ def _onmove(self, event):\n     @property\n     def _rect_bbox(self):\n         if self._drawtype == 'box':\n-            x0 = self._to_draw.get_x()\n-            y0 = self._to_draw.get_y()\n-            width = self._to_draw.get_width()\n-            height = self._to_draw.get_height()\n+            x0 = self._selection_artist.get_x()\n+            y0 = self._selection_artist.get_y()\n+            width = self._selection_artist.get_width()\n+            height = self._selection_artist.get_height()\n             return x0, y0, width, height\n         else:\n-            x, y = self._to_draw.get_data()\n+            x, y = self._selection_artist.get_data()\n             x0, x1 = min(x), max(x)\n             y0, y1 = min(y), max(y)\n             return x0, y0, x1 - x0, y1 - y0\n@@ -3002,10 +3046,11 @@ def extents(self):\n     def extents(self, extents):\n         # Update displayed shape\n         self._draw_shape(extents)\n-        # Update displayed handles\n-        self._corner_handles.set_data(*self.corners)\n-        self._edge_handles.set_data(*self.edge_centers)\n-        self._center_handle.set_data(*self.center)\n+        if self._interactive:\n+            # Update displayed handles\n+            self._corner_handles.set_data(*self.corners)\n+            self._edge_handles.set_data(*self.edge_centers)\n+            self._center_handle.set_data(*self.center)\n         self.set_visible(self.visible)\n         self.update()\n \n@@ -3024,13 +3069,13 @@ def _draw_shape(self, extents):\n         ymax = min(ymax, ylim[1])\n \n         if self._drawtype == 'box':\n-            self._to_draw.set_x(xmin)\n-            self._to_draw.set_y(ymin)\n-            self._to_draw.set_width(xmax - xmin)\n-            self._to_draw.set_height(ymax - ymin)\n+            self._selection_artist.set_x(xmin)\n+            self._selection_artist.set_y(ymin)\n+            self._selection_artist.set_width(xmax - xmin)\n+            self._selection_artist.set_height(ymax - ymin)\n \n         elif self._drawtype == 'line':\n-            self._to_draw.set_data([xmin, xmax], [ymin, ymax])\n+            self._selection_artist.set_data([xmin, xmax], [ymin, ymax])\n \n     def _set_active_handle(self, event):\n         \"\"\"Set active handle based on the location of the mouse event.\"\"\"\n@@ -3074,7 +3119,7 @@ def _set_active_handle(self, event):\n \n     def _contains(self, event):\n         \"\"\"Return True if event is within the patch.\"\"\"\n-        return self._to_draw.contains(event, radius=0)[0]\n+        return self._selection_artist.contains(event, radius=0)[0]\n \n     @property\n     def geometry(self):\n@@ -3085,12 +3130,12 @@ def geometry(self):\n         of the four corners of the rectangle starting and ending\n         in the top left corner.\n         \"\"\"\n-        if hasattr(self._to_draw, 'get_verts'):\n+        if hasattr(self._selection_artist, 'get_verts'):\n             xfm = self.ax.transData.inverted()\n-            y, x = xfm.transform(self._to_draw.get_verts()).T\n+            y, x = xfm.transform(self._selection_artist.get_verts()).T\n             return np.array([x, y])\n         else:\n-            return np.array(self._to_draw.get_data())\n+            return np.array(self._selection_artist.get_data())\n \n \n @docstring.Substitution(_RECTANGLESELECTOR_PARAMETERS_DOCSTRING.replace(\n@@ -3124,24 +3169,24 @@ def _draw_shape(self, extents):\n         b = (ymax - ymin) / 2.\n \n         if self._drawtype == 'box':\n-            self._to_draw.center = center\n-            self._to_draw.width = 2 * a\n-            self._to_draw.height = 2 * b\n+            self._selection_artist.center = center\n+            self._selection_artist.width = 2 * a\n+            self._selection_artist.height = 2 * b\n         else:\n             rad = np.deg2rad(np.arange(31) * 12)\n             x = a * np.cos(rad) + center[0]\n             y = b * np.sin(rad) + center[1]\n-            self._to_draw.set_data(x, y)\n+            self._selection_artist.set_data(x, y)\n \n     @property\n     def _rect_bbox(self):\n         if self._drawtype == 'box':\n-            x, y = self._to_draw.center\n-            width = self._to_draw.width\n-            height = self._to_draw.height\n+            x, y = self._selection_artist.center\n+            width = self._selection_artist.width\n+            height = self._selection_artist.height\n             return x - width / 2., y - height / 2., width, height\n         else:\n-            x, y = self._to_draw.get_data()\n+            x, y = self._selection_artist.get_data()\n             x0, x1 = min(x), max(x)\n             y0, y1 = min(y), max(y)\n             return x0, y0, x1 - x0, y1 - y0\n@@ -3196,9 +3241,9 @@ def __init__(self, ax, onselect=None, useblit=True, props=None,\n             props = dict()\n         # self.useblit may be != useblit, if the canvas doesn't support blit.\n         props.update(animated=self.useblit, visible=False)\n-        self.line = Line2D([], [], **props)\n-        self.ax.add_line(self.line)\n-        self.artists = [self.line]\n+        line = Line2D([], [], **props)\n+        self.ax.add_line(line)\n+        self._selection_artist = line\n \n     @_api.deprecated(\"3.5\", alternative=\"press\")\n     def onpress(self, event):\n@@ -3206,7 +3251,7 @@ def onpress(self, event):\n \n     def _press(self, event):\n         self.verts = [self._get_data(event)]\n-        self.line.set_visible(True)\n+        self._selection_artist.set_visible(True)\n \n     @_api.deprecated(\"3.5\", alternative=\"release\")\n     def onrelease(self, event):\n@@ -3216,15 +3261,16 @@ def _release(self, event):\n         if self.verts is not None:\n             self.verts.append(self._get_data(event))\n             self.onselect(self.verts)\n-        self.line.set_data([[], []])\n-        self.line.set_visible(False)\n+        self._selection_artist.set_data([[], []])\n+        self._selection_artist.set_visible(False)\n         self.verts = None\n \n     def _onmove(self, event):\n         if self.verts is None:\n             return\n         self.verts.append(self._get_data(event))\n-        self.line.set_data(list(zip(*self.verts)))\n+        self._selection_artist.set_data(list(zip(*self.verts)))\n+\n         self.update()\n \n \n@@ -3312,22 +3358,28 @@ def __init__(self, ax, onselect, useblit=False,\n         if props is None:\n             props = dict(color='k', linestyle='-', linewidth=2, alpha=0.5)\n         props['animated'] = self.useblit\n-        self.line = Line2D(self._xs, self._ys, **props)\n-        self.ax.add_line(self.line)\n+        self._props = props\n+        line = Line2D(self._xs, self._ys, **self._props)\n+        self.ax.add_line(line)\n+        self._selection_artist = line\n \n         if handle_props is None:\n             handle_props = dict(markeredgecolor='k',\n-                                markerfacecolor=props.get('color', 'k'))\n+                                markerfacecolor=self._props.get('color', 'k'))\n+        self._handle_props = handle_props\n         self._polygon_handles = ToolHandles(self.ax, self._xs, self._ys,\n                                             useblit=self.useblit,\n-                                            marker_props=handle_props)\n+                                            marker_props=self._handle_props)\n \n         self._active_handle_idx = -1\n         self.grab_range = grab_range\n \n-        self.artists = [self.line, self._polygon_handles.artist]\n         self.set_visible(True)\n \n+    line = _api.deprecated(\"3.5\")(\n+        property(lambda self: self._selection_artist)\n+        )\n+\n     vertex_select_radius = _api.deprecated(\"3.5\", name=\"vertex_select_radius\",\n                                            alternative=\"grab_range\")(\n         property(lambda self: self.grab_range,\n@@ -3338,6 +3390,10 @@ def __init__(self, ax, onselect, useblit=False,\n     def _nverts(self):\n         return len(self._xs)\n \n+    @property\n+    def _handles_artists(self):\n+        return self._polygon_handles.artists\n+\n     def _remove_vertex(self, i):\n         \"\"\"Remove vertex with index i.\"\"\"\n         if (self._nverts > 2 and\n@@ -3437,8 +3493,9 @@ def _onmove(self, event):\n         # Position pending vertex.\n         else:\n             # Calculate distance to the start vertex.\n-            x0, y0 = self.line.get_transform().transform((self._xs[0],\n-                                                          self._ys[0]))\n+            x0, y0 = self._selection_artist.get_transform().transform(\n+                    (self._xs[0], self._ys[0])\n+                )\n             v0_dist = np.hypot(x0 - event.x, y0 - event.y)\n             # Lock on to the start vertex if near it and ready to complete.\n             if len(self._xs) > 3 and v0_dist < self.grab_range:\n@@ -3478,7 +3535,7 @@ def _on_key_release(self, event):\n \n     def _draw_polygon(self):\n         \"\"\"Redraw the polygon based on the new vertex positions.\"\"\"\n-        self.line.set_data(self._xs, self._ys)\n+        self._selection_artist.set_data(self._xs, self._ys)\n         # Only show one tool handle at the start and end vertex of the polygon\n         # if the polygon is completed or the user is locked on to the start\n         # vertex.\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -90,6 +90,34 @@ def onselect(epress, erelease):\n     assert tool.center == (180, 190)\n \n \n+def test_rectangle_selector_set_props_handle_props():\n+    ax = get_ax()\n+\n+    def onselect(epress, erelease):\n+        pass\n+\n+    tool = widgets.RectangleSelector(ax, onselect, interactive=True,\n+                                     props=dict(facecolor='b', alpha=0.2),\n+                                     handle_props=dict(alpha=0.5))\n+    # Create rectangle\n+    do_event(tool, 'press', xdata=0, ydata=10, button=1)\n+    do_event(tool, 'onmove', xdata=100, ydata=120, button=1)\n+    do_event(tool, 'release', xdata=100, ydata=120, button=1)\n+\n+    artist = tool._selection_artist\n+    assert artist.get_facecolor() == mcolors.to_rgba('b', alpha=0.2)\n+    tool.set_props(facecolor='r', alpha=0.3)\n+    assert artist.get_facecolor() == mcolors.to_rgba('r', alpha=0.3)\n+\n+    for artist in tool._handles_artists:\n+        assert artist.get_markeredgecolor() == 'black'\n+        assert artist.get_alpha() == 0.5\n+    tool.set_handle_props(markeredgecolor='r', alpha=0.3)\n+    for artist in tool._handles_artists:\n+        assert artist.get_markeredgecolor() == 'r'\n+        assert artist.get_alpha() == 0.3\n+\n+\n def test_ellipse():\n     \"\"\"For ellipse, test out the key modifiers\"\"\"\n     ax = get_ax()\n@@ -185,9 +213,9 @@ def onselect(epress, erelease):\n \n     # Check that marker_props worked.\n     assert mcolors.same_color(\n-        tool._corner_handles.artist.get_markerfacecolor(), 'r')\n+        tool._corner_handles.artists[0].get_markerfacecolor(), 'r')\n     assert mcolors.same_color(\n-        tool._corner_handles.artist.get_markeredgecolor(), 'b')\n+        tool._corner_handles.artists[0].get_markeredgecolor(), 'b')\n \n \n @pytest.mark.parametrize('interactive', [True, False])\n@@ -404,6 +432,34 @@ def onselect(*args):\n         tool.direction = 'invalid_string'\n \n \n+def test_span_selector_set_props_handle_props():\n+    ax = get_ax()\n+\n+    def onselect(epress, erelease):\n+        pass\n+\n+    tool = widgets.SpanSelector(ax, onselect, 'horizontal', interactive=True,\n+                                props=dict(facecolor='b', alpha=0.2),\n+                                handle_props=dict(alpha=0.5))\n+    # Create rectangle\n+    do_event(tool, 'press', xdata=0, ydata=10, button=1)\n+    do_event(tool, 'onmove', xdata=100, ydata=120, button=1)\n+    do_event(tool, 'release', xdata=100, ydata=120, button=1)\n+\n+    artist = tool._selection_artist\n+    assert artist.get_facecolor() == mcolors.to_rgba('b', alpha=0.2)\n+    tool.set_props(facecolor='r', alpha=0.3)\n+    assert artist.get_facecolor() == mcolors.to_rgba('r', alpha=0.3)\n+\n+    for artist in tool._handles_artists:\n+        assert artist.get_color() == 'b'\n+        assert artist.get_alpha() == 0.5\n+    tool.set_handle_props(color='r', alpha=0.3)\n+    for artist in tool._handles_artists:\n+        assert artist.get_color() == 'r'\n+        assert artist.get_alpha() == 0.3\n+\n+\n def test_tool_line_handle():\n     ax = get_ax()\n \n@@ -781,6 +837,43 @@ def test_polygon_selector():\n     check_polygon_selector(event_sequence, expected_result, 1)\n \n \n+def test_polygon_selector_set_props_handle_props():\n+    ax = get_ax()\n+\n+    ax._selections_count = 0\n+\n+    def onselect(vertices):\n+        ax._selections_count += 1\n+        ax._current_result = vertices\n+\n+    tool = widgets.PolygonSelector(ax, onselect,\n+                                   props=dict(color='b', alpha=0.2),\n+                                   handle_props=dict(alpha=0.5))\n+\n+    event_sequence = (polygon_place_vertex(50, 50)\n+                      + polygon_place_vertex(150, 50)\n+                      + polygon_place_vertex(50, 150)\n+                      + polygon_place_vertex(50, 50))\n+\n+    for (etype, event_args) in event_sequence:\n+        do_event(tool, etype, **event_args)\n+\n+    artist = tool._selection_artist\n+    assert artist.get_color() == 'b'\n+    assert artist.get_alpha() == 0.2\n+    tool.set_props(color='r', alpha=0.3)\n+    assert artist.get_color() == 'r'\n+    assert artist.get_alpha() == 0.3\n+\n+    for artist in tool._handles_artists:\n+        assert artist.get_color() == 'b'\n+        assert artist.get_alpha() == 0.5\n+    tool.set_handle_props(color='r', alpha=0.3)\n+    for artist in tool._handles_artists:\n+        assert artist.get_color() == 'r'\n+        assert artist.get_alpha() == 0.3\n+\n+\n @pytest.mark.parametrize(\n     \"horizOn, vertOn\",\n     [(True, True), (True, False), (False, True)],\n",
  "problem_statement": "BUG: Lost functionality of interactive selector update\nIn MNE we allow users to update the selector colors, and have:\r\n```\r\n        selector.rect.set_color(color)\r\n        selector.rectprops.update(dict(facecolor=color))\r\n```\r\nThis now emits a deprecation warning from #20113, but it doesn't indicate how code should be migrated. I looked at this and #20558 and hoped / thought maybe I could find some `selector.set_*` or `selector.handle_props` or something to modify but I don't see anything. How should we update our code? (And it might be worth improving the deprecation warning to give some hints to anyone else who hits this issue.) Maybe with something like this?\r\n```\r\nselector.artists[0].set_color(color)\r\n```\r\nthe `artists[0]` is the `selector.rect`. But this just seems like a hack workaround, and if there are properties held internally it will not \"stick\" so I'm guessing it's not the right idea...\r\n\r\n_Originally posted by @larsoner in https://github.com/matplotlib/matplotlib/issues/20113#issuecomment-877345562_\n",
  "hints_text": "@ericpre @timhoffm any suggestions here?  Thanks!\nI would lean toward having something along the line of `selector.set_props` and `selector.set_handle_props` for all selectors. Should it be done as part as part of #20585, where there is a discussion about renaming corresponding parameters? \nWell, since that's merged, it'll have to be a new PR, but yes, I expect it should be some `.set_*` methods, and not accessing the child artists directly.",
  "created_at": "2021-07-20T14:10:36Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_handles\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]\", \"lib/matplotlib/tests/test_widgets.py::test_ellipse\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_direction\", \"lib/matplotlib/tests/test_widgets.py::test_tool_line_handle\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector\", \"lib/matplotlib/tests/test_widgets.py::test_CheckButtons\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox\", \"lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_bunch_of_radio_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping\", \"lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.790529",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}