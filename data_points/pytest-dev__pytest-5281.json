{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-5281",
  "base_commit": "c0e53a61e65cb919bd29f62b756dfd57dfeef59a",
  "patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -447,6 +447,10 @@ def name(self):\n         \"\"\"Ensure that file.name is a string.\"\"\"\n         return repr(self.buffer)\n \n+    @property\n+    def mode(self):\n+        return self.buffer.mode.replace(\"b\", \"\")\n+\n     def __getattr__(self, name):\n         return getattr(object.__getattribute__(self, \"buffer\"), name)\n \ndiff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -998,7 +998,15 @@ def _get_line_with_reprcrash_message(config, rep, termwidth):\n                     # u'ðŸ˜„' will result in a High Surrogate (U+D83D) character, which is\n                     # rendered as u'ï¿½'; in this case we just strip that character out as it\n                     # serves no purpose being rendered\n-                    msg = msg.rstrip(u\"\\uD83D\")\n+                    try:\n+                        surrogate = six.unichr(0xD83D)\n+                        msg = msg.rstrip(surrogate)\n+                    except ValueError:  # pragma: no cover\n+                        # Jython cannot represent this lone surrogate at all (#5256):\n+                        # ValueError: unichr() arg is a lone surrogate in range\n+                        #     (0xD800, 0xDFFF) (Jython UTF-16 encoding)\n+                        # ignore this case as it shouldn't appear in the string anyway\n+                        pass\n                 msg += ellipsis\n             line += sep + msg\n     return line\n",
  "test_patch": "diff --git a/testing/test_capture.py b/testing/test_capture.py\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,6 +1051,9 @@ def test_simple_resume_suspend(self, tmpfile):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+    def test_capfd_sys_stdout_mode(self, capfd):\n+        assert \"b\" not in sys.stdout.mode\n+\n \n @contextlib.contextmanager\n def saved_fd(fd):\n",
  "problem_statement": "Invalid unicode in _pytest/terminal.py with Jython\nWith: Jython 2.7.1 and pytest 4.5.0, I'm having the error below:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\bin\\jython2.7.1\\Lib\\runpy.py\", line 161, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"C:\\bin\\jython2.7.1\\Lib\\runpy.py\", line 72, in _run_code\r\n    exec code in run_globals\r\n  File \"C:\\bin\\jython2.7.1\\Lib\\site-packages\\pytest.py\", line 101, in <module>\r\n    raise SystemExit(pytest.main())\r\n  File \"C:\\bin\\jython2.7.1\\Lib\\site-packages\\_pytest\\config\\__init__.py\", line 60, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"C:\\bin\\jython2.7.1\\Lib\\site-packages\\_pytest\\config\\__init__.py\", line 60, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"C:\\bin\\jython2.7.1\\Lib\\site-packages\\_pytest\\config\\__init__.py\", line 60, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"C:\\bin\\jython2.7.1\\Lib\\site-packages\\_pytest\\config\\__init__.py\", line 190, in _prepareconfig\r\n    config = get_config(args)\r\n  File \"C:\\bin\\jython2.7.1\\Lib\\site-packages\\_pytest\\config\\__init__.py\", line 164, in get_config\r\n    pluginmanager.import_plugin(spec)\r\n  File \"C:\\bin\\jython2.7.1\\Lib\\site-packages\\_pytest\\config\\__init__.py\", line 562, in import_plugin\r\n    __import__(importspec)\r\nUnicodeDecodeError: 'unicodeescape' codec can't decode bytes in position 2-8: illegal Unicode character\r\n```\r\n\r\nThe error happens because `terminal._get_line_with_reprcrash_message` has the following unicode literal: `u\"\\uD83D\"`.\r\n\r\nI'm not sure about the proper fix... in that function `msg` seems to be doing a `msg.find(\"\\n\")` and later does `msg.rstrip(u\"\\uD83D\")`, so, I'm not even sure if we're dealing with `unicode` or `bytes` there on Python 2 because it's mixed (my guess is bytes, but I'm not really sure).\r\n\r\nIf it's bytes, doing it an actual `str` literal instead of a `unicode` literal -- i.e.: remove the `u` -- does make Jython happy (would that be an appropriate solution?)\n",
  "hints_text": "",
  "created_at": "2019-05-16T23:11:47Z",
  "version": "4.5",
  "FAIL_TO_PASS": "[\"testing/test_capture.py::TestFDCapture::test_capfd_sys_stdout_mode\"]",
  "PASS_TO_PASS": "[\"[100%]\", \"testing/test_capture.py::TestCaptureManager::test_getmethod_default_no_fd\", \"testing/test_capture.py::TestCaptureManager::test_capturing_basic_api[no]\", \"testing/test_capture.py::TestCaptureManager::test_capturing_basic_api[sys]\", \"testing/test_capture.py::TestCaptureManager::test_capturing_basic_api[fd]\", \"testing/test_capture.py::TestCaptureManager::test_init_capturing\", \"testing/test_capture.py::TestCaptureIO::test_text\", \"testing/test_capture.py::TestCaptureIO::test_unicode_and_str_mixture\", \"testing/test_capture.py::TestCaptureIO::test_write_bytes_to_buffer\", \"testing/test_capture.py::test_dontreadfrominput\", \"testing/test_capture.py::test_dontreadfrominput_buffer_python3\", \"testing/test_capture.py::test_dupfile_on_bytesio\", \"testing/test_capture.py::test_dupfile_on_textio\", \"testing/test_capture.py::TestFDCapture::test_stderr\", \"testing/test_capture.py::TestStdCapture::test_capturing_done_simple\", \"testing/test_capture.py::TestStdCapture::test_capturing_reset_simple\", \"testing/test_capture.py::TestStdCapture::test_capturing_readouterr\", \"testing/test_capture.py::TestStdCapture::test_capture_results_accessible_by_attribute\", \"testing/test_capture.py::TestStdCapture::test_capturing_readouterr_unicode\", \"testing/test_capture.py::TestStdCapture::test_reset_twice_error\", \"testing/test_capture.py::TestStdCapture::test_capturing_modify_sysouterr_in_between\", \"testing/test_capture.py::TestStdCapture::test_capturing_error_recursive\", \"testing/test_capture.py::TestStdCapture::test_just_out_capture\", \"testing/test_capture.py::TestStdCapture::test_just_err_capture\", \"testing/test_capture.py::TestStdCapture::test_stdin_restored\", \"testing/test_capture.py::TestStdCapture::test_stdin_nulled_by_default\", \"testing/test_capture.py::TestStdCaptureFD::test_capturing_done_simple\", \"testing/test_capture.py::TestStdCaptureFD::test_capturing_reset_simple\", \"testing/test_capture.py::TestStdCaptureFD::test_capturing_readouterr\", \"testing/test_capture.py::TestStdCaptureFD::test_capture_results_accessible_by_attribute\", \"testing/test_capture.py::TestStdCaptureFD::test_capturing_readouterr_unicode\", \"testing/test_capture.py::TestStdCaptureFD::test_reset_twice_error\", \"testing/test_capture.py::TestStdCaptureFD::test_capturing_modify_sysouterr_in_between\", \"testing/test_capture.py::TestStdCaptureFD::test_capturing_error_recursive\", \"testing/test_capture.py::TestStdCaptureFD::test_just_out_capture\", \"testing/test_capture.py::TestStdCaptureFD::test_just_err_capture\", \"testing/test_capture.py::TestStdCaptureFD::test_stdin_restored\", \"testing/test_capture.py::TestStdCaptureFD::test_stdin_nulled_by_default\", \"testing/test_capture.py::TestStdCaptureFD::test_intermingling\", \"testing/test_capture.py::test_capture_not_started_but_reset\", \"testing/test_capture.py::test_using_capsys_fixture_works_with_sys_stdout_encoding\", \"testing/test_capture.py::test_capsys_results_accessible_by_attribute\", \"testing/test_capture.py::test_pickling_and_unpickling_encoded_file\", \"testing/test_capture.py::test_capturing_unicode[fd]\", \"testing/test_capture.py::test_capturing_unicode[sys]\", \"testing/test_capture.py::test_capturing_bytes_in_utf8_encoding[fd]\", \"testing/test_capture.py::test_capturing_bytes_in_utf8_encoding[sys]\", \"testing/test_capture.py::test_collect_capturing\", \"testing/test_capture.py::TestPerTestCapturing::test_capture_and_fixtures\", \"testing/test_capture.py::TestPerTestCapturing::test_no_carry_over\", \"testing/test_capture.py::TestPerTestCapturing::test_teardown_capturing\", \"testing/test_capture.py::TestPerTestCapturing::test_teardown_capturing_final\", \"testing/test_capture.py::TestPerTestCapturing::test_capturing_outerr\", \"testing/test_capture.py::TestLoggingInteraction::test_logging_stream_ownership\", \"testing/test_capture.py::TestLoggingInteraction::test_logging_and_immediate_setupteardown\", \"testing/test_capture.py::TestLoggingInteraction::test_logging_and_crossscope_fixtures\", \"testing/test_capture.py::TestLoggingInteraction::test_conftestlogging_is_shown\", \"testing/test_capture.py::TestLoggingInteraction::test_conftestlogging_and_test_logging\", \"testing/test_capture.py::TestLoggingInteraction::test_logging_after_cap_stopped\", \"testing/test_capture.py::TestCaptureFixture::test_std_functional[opt0]\", \"testing/test_capture.py::TestCaptureFixture::test_std_functional[opt1]\", \"testing/test_capture.py::TestCaptureFixture::test_capsyscapfd\", \"testing/test_capture.py::TestCaptureFixture::test_capturing_getfixturevalue\", \"testing/test_capture.py::TestCaptureFixture::test_capsyscapfdbinary\", \"testing/test_capture.py::TestCaptureFixture::test_capture_is_represented_on_failure_issue128[sys]\", \"testing/test_capture.py::TestCaptureFixture::test_capture_is_represented_on_failure_issue128[fd]\", \"testing/test_capture.py::TestCaptureFixture::test_stdfd_functional\", \"testing/test_capture.py::TestCaptureFixture::test_capfdbinary\", \"testing/test_capture.py::TestCaptureFixture::test_capsysbinary\", \"testing/test_capture.py::TestCaptureFixture::test_partial_setup_failure\", \"testing/test_capture.py::TestCaptureFixture::test_keyboardinterrupt_disables_capturing\", \"testing/test_capture.py::TestCaptureFixture::test_capture_and_logging\", \"testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[True-capsys]\", \"testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[True-capfd]\", \"testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[False-capsys]\", \"testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[False-capfd]\", \"testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures[capsys]\", \"testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures[capfd]\", \"testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures_teardown[capsys]\", \"testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures_teardown[capfd]\", \"testing/test_capture.py::test_setup_failure_does_not_kill_capturing\", \"testing/test_capture.py::test_fdfuncarg_skips_on_no_osdup\", \"testing/test_capture.py::test_capture_conftest_runtest_setup\", \"testing/test_capture.py::test_capture_badoutput_issue412\", \"testing/test_capture.py::test_capture_early_option_parsing\", \"testing/test_capture.py::test_capture_binary_output\", \"testing/test_capture.py::test_error_during_readouterr\", \"testing/test_capture.py::test_dupfile\", \"testing/test_capture.py::TestFDCapture::test_simple\", \"testing/test_capture.py::TestFDCapture::test_simple_many\", \"testing/test_capture.py::TestFDCapture::test_simple_fail_second_start\", \"testing/test_capture.py::TestFDCapture::test_stdin\", \"testing/test_capture.py::TestFDCapture::test_writeorg\", \"testing/test_capture.py::TestFDCapture::test_simple_resume_suspend\", \"testing/test_capture.py::TestStdCaptureFD::test_simple_only_fd\", \"testing/test_capture.py::TestStdCaptureFDinvalidFD::test_stdcapture_fd_invalid_fd\", \"testing/test_capture.py::test_fdcapture_tmpfile_remains_the_same[True]\", \"testing/test_capture.py::test_fdcapture_tmpfile_remains_the_same[False]\", \"testing/test_capture.py::test_close_and_capture_again\", \"testing/test_capture.py::test_capturing_and_logging_fundamentals[SysCapture]\", \"testing/test_capture.py::test_capturing_and_logging_fundamentals[FDCapture]\", \"testing/test_capture.py::test_error_attribute_issue555\", \"testing/test_capture.py::test_dontreadfrominput_has_encoding\", \"testing/test_capture.py::test_crash_on_closing_tmpfile_py27\", \"testing/test_capture.py::test_global_capture_with_live_logging\", \"testing/test_capture.py::test_capture_with_live_logging[capsys]\", \"testing/test_capture.py::test_capture_with_live_logging[capfd]\", \"testing/test_capture.py::test_typeerror_encodedfile_write\"]",
  "environment_setup_commit": "693c3b7f61d4d32f8927a74f34ce8ac56d63958e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.927561",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}