{
  "repo": "django/django",
  "instance_id": "django__django-15031",
  "base_commit": "7d02fa94332b43c7527c1b816787b4c560cf6bf6",
  "patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -118,6 +118,7 @@ def choices(self, changelist):\n class FieldListFilter(ListFilter):\n     _field_list_filters = []\n     _take_priority_index = 0\n+    list_separator = ','\n \n     def __init__(self, field, request, params, model, model_admin, field_path):\n         self.field = field\n@@ -127,7 +128,7 @@ def __init__(self, field, request, params, model, model_admin, field_path):\n         for p in self.expected_parameters():\n             if p in params:\n                 value = params.pop(p)\n-                self.used_parameters[p] = prepare_lookup_value(p, value)\n+                self.used_parameters[p] = prepare_lookup_value(p, value, self.list_separator)\n \n     def has_output(self):\n         return True\ndiff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -51,13 +51,13 @@ def lookup_spawns_duplicates(opts, lookup_path):\n     return False\n \n \n-def prepare_lookup_value(key, value):\n+def prepare_lookup_value(key, value, separator=','):\n     \"\"\"\n     Return a lookup value prepared to be used in queryset filtering.\n     \"\"\"\n     # if key ends with __in, split parameter into separate values\n     if key.endswith('__in'):\n-        value = value.split(',')\n+        value = value.split(separator)\n     # if key ends with __isnull, special case '' and the string literals 'false' and '0'\n     elif key.endswith('__isnull'):\n         value = value.lower() not in ('', 'false', '0')\n",
  "test_patch": "diff --git a/tests/admin_filters/tests.py b/tests/admin_filters/tests.py\n--- a/tests/admin_filters/tests.py\n+++ b/tests/admin_filters/tests.py\n@@ -4,7 +4,8 @@\n \n from django.contrib.admin import (\n     AllValuesFieldListFilter, BooleanFieldListFilter, EmptyFieldListFilter,\n-    ModelAdmin, RelatedOnlyFieldListFilter, SimpleListFilter, site,\n+    FieldListFilter, ModelAdmin, RelatedOnlyFieldListFilter, SimpleListFilter,\n+    site,\n )\n from django.contrib.admin.options import IncorrectLookupParameters\n from django.contrib.auth.admin import UserAdmin\n@@ -135,6 +136,17 @@ def lookups(self, request, model_admin):\n             return (('the 80s', \"the 1980's\"), ('the 90s', \"the 1990's\"),)\n \n \n+class EmployeeNameCustomDividerFilter(FieldListFilter):\n+    list_separator = '|'\n+\n+    def __init__(self, field, request, params, model, model_admin, field_path):\n+        self.lookup_kwarg = '%s__in' % field_path\n+        super().__init__(field, request, params, model, model_admin, field_path)\n+\n+    def expected_parameters(self):\n+        return [self.lookup_kwarg]\n+\n+\n class CustomUserAdmin(UserAdmin):\n     list_filter = ('books_authored', 'books_contributed')\n \n@@ -231,6 +243,12 @@ class EmployeeAdmin(ModelAdmin):\n     list_filter = ['department']\n \n \n+class EmployeeCustomDividerFilterAdmin(EmployeeAdmin):\n+    list_filter = [\n+        ('name', EmployeeNameCustomDividerFilter),\n+    ]\n+\n+\n class DepartmentFilterEmployeeAdmin(EmployeeAdmin):\n     list_filter = [DepartmentListFilterLookupWithNonStringValue]\n \n@@ -1547,3 +1565,29 @@ def test_emptylistfieldfilter_invalid_lookup_parameters(self):\n         request.user = self.alfred\n         with self.assertRaises(IncorrectLookupParameters):\n             modeladmin.get_changelist_instance(request)\n+\n+    def test_lookup_using_custom_divider(self):\n+        \"\"\"\n+        Filter __in lookups with a custom divider.\n+        \"\"\"\n+        jane = Employee.objects.create(name='Jane,Green', department=self.design)\n+        modeladmin = EmployeeCustomDividerFilterAdmin(Employee, site)\n+        employees = [jane, self.jack]\n+\n+        request = self.request_factory.get(\n+            '/', {'name__in': \"|\".join(e.name for e in employees)}\n+        )\n+        # test for lookup with custom divider\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        # Make sure the correct queryset is returned\n+        queryset = changelist.get_queryset(request)\n+        self.assertEqual(list(queryset), employees)\n+\n+        # test for lookup with comma in the lookup string\n+        request = self.request_factory.get('/', {'name': jane.name})\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        # Make sure the correct queryset is returned\n+        queryset = changelist.get_queryset(request)\n+        self.assertEqual(list(queryset), [jane])\n",
  "problem_statement": "Django admin allows filtering using the field lookups such as \"in\", but it is impossible to include a value that contains a comma\nDescription\n\t\nThe admin site allows you to filter the queryset in the changelist in a plenty of different ways. Notably, it allows you to filter the records by multiple values (if the field's value is one of the specified value options, then such record is considered matching).\nFor example, you can test it with a query string like this:\n/admin/auth/user/?username__in=johnny,viola,gordon\nUnfortunately, there is a big limitation at the moment: you can't include a value option that contains a comma (or a few).\nThe function that splits the string is prepare_lookup_value, found in ​contrib.admin.util.\n",
  "hints_text": "Right now, the following workaround (besides monkey patching prepare_lookup_value) works for me: def multiple_value_options_filter_factory(field_name): \"\"\" This is a class factory. It creates classes used for filtering by multiple value options. The field options are separated by a \"|\" character. If any of the specified options (or \"\") is the value of the field of a record, then such record is considered matching. The name of the field that should be using for filtering is passed as the argument to the function. \"\"\" class MultipleValueOptionsFilter(admin.ListFilter): # Human-readable title which will be displayed in the # right admin sidebar just above the filter options. title = field_name # Parameter for the filter that will be used in the URL query. parameter_name = \"_\".join([field_name, \"in\"]) def __init__(self, request, params, model, model_admin): self.used_parameters = {} for p in self.expected_parameters(): if p in params: value = params.pop(p) self.used_parameters[p] = value.split(\"|\") def expected_parameters(self): return [self.parameter_name] def has_output(self): return True def choices(self, cl): yield { 'selected': False, 'query_string': cl.get_query_string({}, [self.parameter_name]), 'display': 'All', } def queryset(self, request, queryset): \"\"\" Returns the filtered queryset based on the value provided in the query string and retrievable via `self.value()`. \"\"\" value_options = self.used_parameters.get(self.parameter_name, None) if not value_options: return queryset filter_dict = {\"__\".join([field_name, \"in\"]): value_options} return queryset.filter(**filter_dict) return MultipleValueOptionsFilter I put it in list_filter of the ModelAdmin class: list_filter = ( multiple_value_options_filter_factory(\"some_model_field_to_filter\"), multiple_value_options_filter_factory(\"some_other_model_field\"), ) And then including value options that contain commas becomes possible: ?some_model_field_to_filter_in=Look at this, it works now|Yeah, definitely\nPatch with test\nNot sure if it's a good idea... I've attached a patch which allows you to escape comma and backslash. It will break any existing code searching for multiple backslashes (most likely not an issue).\nNot sure if the backslash-escape is a good idea, or if we just need to provide a way to easily subclass the standard ListFilter and replace just the separator character (and then document that). Either way, it should be easier to filter on values including a comma.\nPatch no longer applies cleanly.\nAn interesting way to solve this would be to use getlist() when pulling the filter arguments without an explicit filter lookup and if a list is found, use __in rather than __exact. So to match the example given in the description, you'd be able to do: /admin/auth/user/?username=johnny&username=viola,with,comma\nSince this is a older ticket, I tried writing a small test in tests\\admin_filters\\tests.py to confirm the issue and I was able to do so. I have started working on this ticket and assigning the ticket to me.\n​PR\nI am not sure if this is the right place to ask this, but I was wondering how long should I wait for my ​PR to get reviewed? I am new to the Django community, any help is appreciated. Thank you.\nReplying to Shreya Bamne: I am not sure if this is the right place to ask this, but I was wondering how long should I wait for my ​PR to get reviewed? I am new to the Django community, any help is appreciated. Thank you. Unfortunately, you have to be patient. We try our best, but usually you have to wait a few weeks. Thanks for preparing a patch! See also ​FAQ: Contributing code.\nThank you Mariusz! I'll keep checking the PR every week.\nIn e53aea2e: Refs #19721 -- Moved ModelAdmin.list_filter docs into a separate file. Co-authored-by: Carlton Gibson <carlton.gibson@…>",
  "created_at": "2021-10-28T14:46:06Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"Filter __in lookups with a custom divider.\"]",
  "PASS_TO_PASS": "[\"test_allvaluesfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_allvaluesfieldlistfilter_custom_qs (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_choices (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_tuple (admin_filters.tests.ListFiltersTests)\", \"test_booleanfieldlistfilter_tuple_choices (admin_filters.tests.ListFiltersTests)\", \"The last choice is for the None value.\", \"test_datefieldlistfilter (admin_filters.tests.ListFiltersTests)\", \"test_datefieldlistfilter_with_time_zone_support (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_choices (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_genericrelation (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_invalid_lookup_parameters (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_non_empty_field (admin_filters.tests.ListFiltersTests)\", \"test_emptylistfieldfilter_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"Filtering by an invalid value.\", \"Ensure ('fieldpath', ClassName ) lookups pass lookup_allowed checks\", \"When a filter's queryset method fails, it fails loudly and\", \"A filter on a FK respects the FK's to_field attribute (#17972).\", \"A list filter that filters the queryset by default gives the correct\", \"test_listfilter_genericrelation (admin_filters.tests.ListFiltersTests)\", \"Any filter must define a title.\", \"Ensure SimpleListFilter can access self.value() inside the lookup.\", \"Ensure choices are set the selected class when using non-string values\", \"Ensure SimpleListFilter lookups pass lookup_allowed checks when\", \"A SimpleListFilter's parameter name is not mistaken for a model field\", \"test_relatedfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"RelatedFieldListFilter ordering respects Model.ordering.\", \"RelatedFieldListFilter ordering respects ModelAdmin.ordering.\", \"test_relatedfieldlistfilter_foreignkey_ordering_reverse (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedfieldlistfilter_reverse_relationships_default_ordering (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_foreignkey (admin_filters.tests.ListFiltersTests)\", \"RelatedOnlyFieldListFilter ordering respects Meta.ordering.\", \"RelatedOnlyFieldListFilter ordering respects ModelAdmin.ordering.\", \"test_relatedonlyfieldlistfilter_foreignkey_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_manytomany (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_manytomany_reverse_relationships (admin_filters.tests.ListFiltersTests)\", \"test_relatedonlyfieldlistfilter_underscorelookup_foreignkey (admin_filters.tests.ListFiltersTests)\", \"test_simplelistfilter (admin_filters.tests.ListFiltersTests)\", \"A SimpleListFilter lookups method can return None but disables the\", \"test_simplelistfilter_with_queryset_based_lookups (admin_filters.tests.ListFiltersTests)\", \"Any SimpleListFilter must define a parameter_name.\", \"list_filter works with two-characters long field names (#16080).\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.712070",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}