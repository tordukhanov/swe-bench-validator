{
  "repo": "django/django",
  "instance_id": "django__django-11751",
  "base_commit": "5495ea3ae0a64f61ae15f44970ea91ed7ce17a38",
  "patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -415,7 +415,7 @@ def gettext_noop(s):\n DEFAULT_INDEX_TABLESPACE = ''\n \n # Default X-Frame-Options header value\n-X_FRAME_OPTIONS = 'SAMEORIGIN'\n+X_FRAME_OPTIONS = 'DENY'\n \n USE_X_FORWARDED_HOST = False\n USE_X_FORWARDED_PORT = False\ndiff --git a/django/core/checks/security/base.py b/django/core/checks/security/base.py\n--- a/django/core/checks/security/base.py\n+++ b/django/core/checks/security/base.py\n@@ -80,9 +80,8 @@\n     \"You have \"\n     \"'django.middleware.clickjacking.XFrameOptionsMiddleware' in your \"\n     \"MIDDLEWARE, but X_FRAME_OPTIONS is not set to 'DENY'. \"\n-    \"The default is 'SAMEORIGIN', but unless there is a good reason for \"\n-    \"your site to serve other parts of itself in a frame, you should \"\n-    \"change it to 'DENY'.\",\n+    \"Unless there is a good reason for your site to serve other parts of \"\n+    \"itself in a frame, you should change it to 'DENY'.\",\n     id='security.W019',\n )\n \ndiff --git a/django/middleware/clickjacking.py b/django/middleware/clickjacking.py\n--- a/django/middleware/clickjacking.py\n+++ b/django/middleware/clickjacking.py\n@@ -37,9 +37,9 @@ def process_response(self, request, response):\n     def get_xframe_options_value(self, request, response):\n         \"\"\"\n         Get the value to set for the X_FRAME_OPTIONS header. Use the value from\n-        the X_FRAME_OPTIONS setting, or 'SAMEORIGIN' if not set.\n+        the X_FRAME_OPTIONS setting, or 'DENY' if not set.\n \n         This method can be overridden if needed, allowing it to vary based on\n         the request or response.\n         \"\"\"\n-        return getattr(settings, 'X_FRAME_OPTIONS', 'SAMEORIGIN').upper()\n+        return getattr(settings, 'X_FRAME_OPTIONS', 'DENY').upper()\n",
  "test_patch": "diff --git a/tests/middleware/tests.py b/tests/middleware/tests.py\n--- a/tests/middleware/tests.py\n+++ b/tests/middleware/tests.py\n@@ -621,12 +621,12 @@ def test_deny(self):\n     def test_defaults_sameorigin(self):\n         \"\"\"\n         If the X_FRAME_OPTIONS setting is not set then it defaults to\n-        SAMEORIGIN.\n+        DENY.\n         \"\"\"\n         with override_settings(X_FRAME_OPTIONS=None):\n             del settings.X_FRAME_OPTIONS    # restored by override_settings\n             r = XFrameOptionsMiddleware().process_response(HttpRequest(), HttpResponse())\n-            self.assertEqual(r['X-Frame-Options'], 'SAMEORIGIN')\n+            self.assertEqual(r['X-Frame-Options'], 'DENY')\n \n     def test_dont_set_if_set(self):\n         \"\"\"\ndiff --git a/tests/project_template/test_settings.py b/tests/project_template/test_settings.py\n--- a/tests/project_template/test_settings.py\n+++ b/tests/project_template/test_settings.py\n@@ -39,5 +39,5 @@ def test_middleware_headers(self):\n                 b'Content-Length: 0',\n                 b'Content-Type: text/html; charset=utf-8',\n                 b'X-Content-Type-Options: nosniff',\n-                b'X-Frame-Options: SAMEORIGIN',\n+                b'X-Frame-Options: DENY',\n             ])\n",
  "problem_statement": "Make security headers default.\nDescription\n\t \n\t\t(last modified by Adam Johnson)\n\t \nFollowing my security headers talk at DjangoCon Europe and its related blog post ( ​https://adamj.eu/tech/2019/04/10/how-to-score-a+-for-security-headers-on-your-django-website/ ), I'd like to make Django use more of these security headers by default on new projects. They're always harder to roll out on existing projects than to just bake in to the new project template.\nOn current master, running python manage.py check --deploy on a fresh project created with startproject yields these warnings:\nSystem check identified some issues:\nWARNINGS:\n?: (security.W004) You have not set a value for the SECURE_HSTS_SECONDS setting. If your entire site is served only over SSL, you may want to consider setting a value and enabling HTTP Strict Transport Security. Be sure to read the documentation first; enabling HSTS carelessly can cause serious, irreversible problems.\n?: (security.W006) Your SECURE_CONTENT_TYPE_NOSNIFF setting is not set to True, so your pages will not be served with an 'X-Content-Type-Options: nosniff' header. You should consider enabling this header to prevent the browser from identifying content types incorrectly.\n?: (security.W007) Your SECURE_BROWSER_XSS_FILTER setting is not set to True, so your pages will not be served with an 'X-XSS-Protection: 1; mode=block' header. You should consider enabling this header to activate the browser's XSS filtering and help prevent XSS attacks.\n?: (security.W008) Your SECURE_SSL_REDIRECT setting is not set to True. Unless your site should be available over both SSL and non-SSL connections, you may want to either set this setting True or configure a load balancer or reverse-proxy server to redirect all connections to HTTPS.\n?: (security.W012) SESSION_COOKIE_SECURE is not set to True. Using a secure-only session cookie makes it more difficult for network traffic sniffers to hijack user sessions.\n?: (security.W016) You have 'django.middleware.csrf.CsrfViewMiddleware' in your MIDDLEWARE, but you have not set CSRF_COOKIE_SECURE to True. Using a secure-only CSRF cookie makes it more difficult for network traffic sniffers to steal the CSRF token.\n?: (security.W018) You should not have DEBUG set to True in deployment.\n?: (security.W019) You have 'django.middleware.clickjacking.XFrameOptionsMiddleware' in your MIDDLEWARE, but X_FRAME_OPTIONS is not set to 'DENY'. The default is 'SAMEORIGIN', but unless there is a good reason for your site to serve other parts of itself in a frame, you should change it to 'DENY'.\n?: (security.W020) ALLOWED_HOSTS must not be empty in deployment.\nSystem check identified 9 issues (0 silenced).\nThree of these come from security headers that we could activate by default in the settings SECURE_CONTENT_TYPE_NOSNIFF, SECURE_BROWSER_XSS_FILTER, and X_FRAME_OPTIONS.\nI'd like to propose making them default in the startproject settings and even changing their global defaults (through a deprecation period) so they are activated by default.\n",
  "hints_text": "Hi Adam. I see no problem with changing the template. Maybe people will have comments on changing the defaults. (But let's put that to the test.) Thanks.\nCould you just sum up what would be the possible downside of this?\nI don't think there are many downsides to changing the template. We already ask developers to learn about these flags before production in manage.py check --deploy, so having them visible and on by default pushes this earlier in development and reduces the risk of writing incompatible, less secure code to begin with, on new projects. Changing the defaults via the deprecation timeline risks breaking sites (sometimes subtly) for each of these headers, since they disable some (bad) browser behaviour. We can probably force users to explicitly set the flags in their settings file in the version before the default is switched. I think there's a precedent but can't remember which setting.\nIf this is only breaking sites in case of \"bad\" behavior, I guess we can live with a backwards incompatibility note in the release notes.\nReplying to Claude Paroz: If this is only breaking sites in case of \"bad\" behavior, I guess we can live with a backwards incompatibility note in the release notes. It's not even technically backwards incompatible since you only get those settings when creating a new project, Adam did not set it in the global defaults.\nI was referring to the last sentence of the ticket description: and even changing their global defaults (through a deprecation period) so they are activated by default. If they are safe defaults, I would be in favor of changing the global defaults for these settings. I think we generally strive to make the project settings template as short as possible.\nI agree that we can change global default values for these 3 settings (release notes and changes in docs are required). ​PR\nAny rationale about adding the defaults to the project template instead of changing the default values. I think release notes could warn about the changed defaults.\nSimply because it is not backwards compatible.\nOf course, but it's not like we never made incompatible changes :-) (with proper release notes). I think that so-called \"safe defaults\" belong to the global settings file. I vote for keeping the project settings file as slim as possible by default. But I can understand other opinions too, for sure.\nSure and I am fully in favor of making them a global default, I am just not sure if we can argue it given our policies… So if you all think that we should do it, I am +1 (with a rather prominent note in the release notes). That said I think only the X_FRAME_OPTIONS change would be relevant (in the sense of being able to cause problems) at all because I cannot imagine how one would rely on the behavior of the others to do something useful :)\nFrom a recent ​blog post by Adam, and the ​linked blog and further links down it sounds like the X-Xss-Protection header is deprecated or removed in modern browsers, and maybe even ​harmful. So maybe this one should not be enabled by default, and maybe even the security.W007 check should be removed?\nYes Ran - hadn't quite thought that through yet. I made a new ticket #30680 to deal with that, left open for discussion right now.\nIn 04681597: Refs #30426 -- Changed default SECURE_CONTENT_TYPE_NOSNIFF to True.\nLooks like the remaining question is about X_FRAME_OPTIONS: Make it DENY by default in global settings with a backwards incompatibility note in release notes Make it DENY in the default project settings template (better for compatibility, but clutters the project settings file and doesn't do anything for existing projects)\nIt seems the consensus is to make it DENY by default with a warning - any objections?",
  "created_at": "2019-09-07T07:55:44Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_defaults_sameorigin (middleware.tests.XFrameOptionsMiddlewareTest)\", \"test_middleware_headers (project_template.test_settings.TestStartProjectSettings)\"]",
  "PASS_TO_PASS": "[\"test_etag_match (middleware.tests.ETagGZipMiddlewareTest)\", \"test_strong_etag_modified (middleware.tests.ETagGZipMiddlewareTest)\", \"test_weak_etag_not_modified (middleware.tests.ETagGZipMiddlewareTest)\", \"test_deny (middleware.tests.XFrameOptionsMiddlewareTest)\", \"test_dont_set_if_set (middleware.tests.XFrameOptionsMiddlewareTest)\", \"test_is_extendable (middleware.tests.XFrameOptionsMiddlewareTest)\", \"test_response_exempt (middleware.tests.XFrameOptionsMiddlewareTest)\", \"test_same_origin (middleware.tests.XFrameOptionsMiddlewareTest)\", \"test_compress_deterministic (middleware.tests.GZipMiddlewareTest)\", \"test_compress_file_response (middleware.tests.GZipMiddlewareTest)\", \"test_compress_non_200_response (middleware.tests.GZipMiddlewareTest)\", \"test_compress_response (middleware.tests.GZipMiddlewareTest)\", \"test_compress_streaming_response (middleware.tests.GZipMiddlewareTest)\", \"test_compress_streaming_response_unicode (middleware.tests.GZipMiddlewareTest)\", \"test_no_compress_compressed_response (middleware.tests.GZipMiddlewareTest)\", \"test_no_compress_incompressible_response (middleware.tests.GZipMiddlewareTest)\", \"test_no_compress_short_response (middleware.tests.GZipMiddlewareTest)\", \"test_append_slash_disabled (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_disabled_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_have_slash (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_have_slash_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_leading_slashes (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_no_redirect_on_POST_in_DEBUG (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_no_redirect_on_POST_in_DEBUG_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_quoted (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_quoted_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_redirect (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_redirect_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_redirect_querystring (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_redirect_querystring_have_slash (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_slashless_resource (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_slashless_resource_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_slashless_unknown (middleware.tests.CommonMiddlewareTest)\", \"test_append_slash_slashless_unknown_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_content_length_header_added (middleware.tests.CommonMiddlewareTest)\", \"test_content_length_header_not_added_for_streaming_response (middleware.tests.CommonMiddlewareTest)\", \"test_content_length_header_not_changed (middleware.tests.CommonMiddlewareTest)\", \"test_disallowed_user_agents (middleware.tests.CommonMiddlewareTest)\", \"Regression test for #15152\", \"test_prepend_www (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_have_slash (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_have_slash_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_slashless (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_slashless_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_response_redirect_class (middleware.tests.CommonMiddlewareTest)\", \"test_response_redirect_class_subclass (middleware.tests.CommonMiddlewareTest)\", \"test_etag_extended_cache_control (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_client_error (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_last_modified_in_the_future (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_last_modified_in_the_past (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_no_last_modified (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_redirect (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_same_last_modified (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_client_error (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_different_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_no_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_redirect (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_same_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_middleware_calculates_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_middleware_wont_overwrite_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_etag_no_store_cache (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_etag_streaming_response (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_head (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_if_modified_since_and_last_modified (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_if_none_match_and_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_unsafe (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_not_modified_headers (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_404_error_reporting (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_404_error_reporting_ignored_url (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_404_error_reporting_no_referer (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_custom_request_checker (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_referer_equal_to_requested_url (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_referer_equal_to_requested_url_on_another_domain (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_referer_equal_to_requested_url_without_trailing_slash_when_append_slash_is_set (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_referer_equal_to_requested_url_without_trailing_slash_when_append_slash_is_unset (middleware.tests.BrokenLinkEmailsMiddlewareTest)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.583397",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}