{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-23021",
  "base_commit": "706ab9045effd9886fcf3efd670644a592931b86",
  "patch": "diff --git a/sympy/solvers/decompogen.py b/sympy/solvers/decompogen.py\n--- a/sympy/solvers/decompogen.py\n+++ b/sympy/solvers/decompogen.py\n@@ -3,6 +3,7 @@\n from sympy.core.singleton import S\n from sympy.polys import Poly, decompose\n from sympy.utilities.misc import func_name\n+from sympy.functions.elementary.miscellaneous import Min, Max\n \n \n def decompogen(f, symbol):\n@@ -38,7 +39,6 @@ def decompogen(f, symbol):\n     if symbol not in f.free_symbols:\n         return [f]\n \n-    result = []\n \n     # ===== Simple Functions ===== #\n     if isinstance(f, (Function, Pow)):\n@@ -48,8 +48,29 @@ def decompogen(f, symbol):\n             arg = f.args[0]\n         if arg == symbol:\n             return [f]\n-        result += [f.subs(arg, symbol)] + decompogen(arg, symbol)\n-        return result\n+        return [f.subs(arg, symbol)] + decompogen(arg, symbol)\n+\n+    # ===== Min/Max Functions ===== #\n+    if isinstance(f, (Min, Max)):\n+        args = list(f.args)\n+        d0 = None\n+        for i, a in enumerate(args):\n+            if not a.has_free(symbol):\n+                continue\n+            d = decompogen(a, symbol)\n+            if len(d) == 1:\n+                d = [symbol] + d\n+            if d0 is None:\n+                d0 = d[1:]\n+            elif d[1:] != d0:\n+                # decomposition is not the same for each arg:\n+                # mark as having no decomposition\n+                d = [symbol]\n+                break\n+            args[i] = d[0]\n+        if d[0] == symbol:\n+            return [f]\n+        return [f.func(*args)] + d0\n \n     # ===== Convert to Polynomial ===== #\n     fp = Poly(f)\n@@ -58,13 +79,11 @@ def decompogen(f, symbol):\n     if len(gens) == 1 and gens[0] != symbol:\n         f1 = f.subs(gens[0], symbol)\n         f2 = gens[0]\n-        result += [f1] + decompogen(f2, symbol)\n-        return result\n+        return [f1] + decompogen(f2, symbol)\n \n     # ===== Polynomial decompose() ====== #\n     try:\n-        result += decompose(f)\n-        return result\n+        return decompose(f)\n     except ValueError:\n         return [f]\n \n",
  "test_patch": "diff --git a/sympy/solvers/tests/test_decompogen.py b/sympy/solvers/tests/test_decompogen.py\n--- a/sympy/solvers/tests/test_decompogen.py\n+++ b/sympy/solvers/tests/test_decompogen.py\n@@ -2,7 +2,7 @@\n from sympy.core.symbol import symbols\n from sympy.functions.elementary.complexes import Abs\n from sympy.functions.elementary.exponential import exp\n-from sympy.functions.elementary.miscellaneous import sqrt\n+from sympy.functions.elementary.miscellaneous import sqrt, Max\n from sympy.functions.elementary.trigonometric import (cos, sin)\n from sympy.testing.pytest import XFAIL, raises\n \n@@ -19,7 +19,12 @@ def test_decompogen():\n     assert decompogen(Abs(cos(y)**2 + 3*cos(x) - 4), x) == [Abs(x), 3*x + cos(y)**2 - 4, cos(x)]\n     assert decompogen(x, y) == [x]\n     assert decompogen(1, x) == [1]\n+    assert decompogen(Max(3, x), x) == [Max(3, x)]\n     raises(TypeError, lambda: decompogen(x < 5, x))\n+    u = 2*x + 3\n+    assert decompogen(Max(sqrt(u),(u)**2), x) == [Max(sqrt(x), x**2), u]\n+    assert decompogen(Max(u, u**2, y), x) == [Max(x, x**2, y), u]\n+    assert decompogen(Max(sin(x), u), x) == [Max(2*x + 3, sin(x))]\n \n \n def test_decompogen_poly():\n",
  "problem_statement": "decompogen doesn't like Min/Max\n```\r\n>>> decompogen(Min(5,x),x)\r\n...\r\n  File \"sympy\\solvers\\decompogen.py\", line 57, in decompogen\r\n    result += [f1] + decompogen(f2, symbol)\r\n  File \"sympy\\solvers\\decompogen.py\", line 57, in decompogen\r\n    result += [f1] + decompogen(f2, symbol)\r\n  File \"sympy\\solvers\\decompogen.py\", line 57, in decompogen\r\n    result += [f1] + decompogen(f2, symbol)\r\n  File \"sympy\\solvers\\decompogen.py\", line 51, in decompogen\r\n    fp = Poly(f)\r\n  File \"sympy\\polys\\polytools.py\", line 128, in __new__\r\n    return cls._from_expr(rep, opt)\r\n  File \"sympy\\polys\\polytools.py\", line 238, in _from_expr\r\n    rep, opt = _dict_from_expr(rep, opt)\r\n  File \"sympy\\polys\\polyutils.py\", line 367, in _dict_from_expr\r\n    rep, gens = _dict_from_expr_no_gens(expr, opt)\r\n  File \"sympy\\polys\\polyutils.py\", line 310, in _dict_from_expr_no_gens\r\n    (poly,), gens = _parallel_dict_from_expr_no_gens((expr,), opt)\r\n  File \"sympy\\polys\\polyutils.py\", line 273, in _parallel_dict_from_expr_no_gens\r\n\r\n    gens = _sort_gens(gens, opt=opt)\r\n  File \"sympy\\polys\\polyutils.py\", line 106, in _sort_gens\r\n    gens = sorted(gens, key=order_key)\r\n  File \"sympy\\polys\\polyutils.py\", line 78, in order_key\r\n    gen = str(gen)\r\n  File \"sympy\\core\\basic.py\", line 400, in __str__\r\n    return sstr(self, order=None)\r\n  File \"sympy\\printing\\str.py\", line 796, in sstr\r\n    s = p.doprint(expr)\r\n  File \"sympy\\printing\\printer.py\", line 233, in doprint\r\n    return self._str(self._print(expr))\r\n  File \"sympy\\printing\\printer.py\", line 257, in _print\r\n    return getattr(self, printmethod)(expr, *args, **kwargs)\r\n  File \"sympy\\printing\\str.py\", line 210, in _print_LatticeOp\r\n    args = sorted(expr.args, key=default_sort_key)\r\n  File \"sympy\\core\\compatibility.py\", line 462, in default_sort_key\r\n    return item.sort_key(order=order)\r\n  File \"sympy\\core\\cache.py\", line 93, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"sympy\\core\\compatibility.py\", line 792, in wrapper\r\n    key = make_key(args, kwds, typed) if kwds or typed else args\r\n  File \"sympy\\core\\compatibility.py\", line 724, in _make_key\r\n    return _HashedSeq(key)\r\n  File \"sympy\\core\\compatibility.py\", line 702, in __init__\r\n    self.hashvalue = hash(tup)\r\nRuntimeError: maximum recursion depth exceeded\r\n```\r\n\r\nperhaps related to #13205 and #13207\nAdd Min/Max support for decompogen\n<!-- Your title above should be a short description of what\r\nwas changed. Do not include the issue number in the title. -->\r\n\r\n#### References to other Issues or PRs\r\n<!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\nformat, e.g. \"Fixes #1234\" (see\r\nhttps://tinyurl.com/auto-closing for more information). Also, please\r\nwrite a comment on that issue linking back to this pull request once it is\r\nopen. -->\r\nFixes #13612 \r\n\r\n#### Brief description of what is fixed or changed\r\nBefore addition ---\r\n```\r\n>>> decompogen(Min(5, x), x)\r\n....\r\n....\r\n....\r\n....\r\nFile \"sympy\\core\\compatibility.py\", line 462, in default_sort_key\r\n    return item.sort_key(order=order)\r\n  File \"sympy\\core\\cache.py\", line 93, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"sympy\\core\\compatibility.py\", line 792, in wrapper\r\n    key = make_key(args, kwds, typed) if kwds or typed else args\r\n  File \"sympy\\core\\compatibility.py\", line 724, in _make_key\r\n    return _HashedSeq(key)\r\n  File \"sympy\\core\\compatibility.py\", line 702, in __init__\r\n    self.hashvalue = hash(tup)\r\nRuntimeError: maximum recursion depth exceeded\r\n```\r\nAfter addition --- \r\n```\r\n>>> decompogen(Min(5, x), x)\r\n[Min, 5, x]\r\n```\r\n#### Other comments\r\n\r\n\r\n#### Release Notes\r\n\r\n<!-- Write the release notes for this release below. See\r\nhttps://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\non how to write release notes. The bot will check your release notes\r\nautomatically to see if they are formatted correctly. -->\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n*  solvers\r\n    *  Added `Min`/`Max` support for `decompogen`. \r\n<!-- END RELEASE NOTES -->\n",
  "hints_text": "I want to fix this bug :) May I?\nping @smichr  please nudge me in the right direction so I may work on this :)\r\nWhat are we expecting `>>>decompogen(Max(3,  x), x)` to return?\r\nWould it be `[max(3,x)]` ?\nThe issue still persists on `master`.\n:white_check_mark:\n\nHi, I am the [SymPy bot](https://github.com/sympy/sympy-bot) (v149). I'm here to help you write a release notes entry. Please read the [guide on how to write release notes](https://github.com/sympy/sympy/wiki/Writing-Release-Notes).\n\n\n\nYour release notes are in good order.\n\nHere is what the release notes will look like:\n* solvers\n  *  Added `Min`/`Max` support for `decompogen`. ([#18517](https://github.com/sympy/sympy/pull/18517) by [@namannimmo10](https://github.com/namannimmo10))\n\nThis will be added to https://github.com/sympy/sympy/wiki/Release-Notes-for-1.6.\n\nNote: This comment will be updated with the latest check if you edit the pull request. You need to reload the page to see it. <details><summary>Click here to see the pull request description that was parsed.</summary>\n\n    <!-- Your title above should be a short description of what\r\n    was changed. Do not include the issue number in the title. -->\r\n\r\n    #### References to other Issues or PRs\r\n    <!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\n    format, e.g. \"Fixes #1234\" (see\r\n    https://tinyurl.com/auto-closing for more information). Also, please\r\n    write a comment on that issue linking back to this pull request once it is\r\n    open. -->\r\n    Fixes #13612 \r\n\r\n    #### Brief description of what is fixed or changed\r\n    Before addition ---\r\n    ```\r\n    >>> decompogen(Min(5, x), x)\r\n    ....\r\n    ....\r\n    ....\r\n    ....\r\n    File \"sympy\\core\\compatibility.py\", line 462, in default_sort_key\r\n        return item.sort_key(order=order)\r\n      File \"sympy\\core\\cache.py\", line 93, in wrapper\r\n        retval = cfunc(*args, **kwargs)\r\n      File \"sympy\\core\\compatibility.py\", line 792, in wrapper\r\n        key = make_key(args, kwds, typed) if kwds or typed else args\r\n      File \"sympy\\core\\compatibility.py\", line 724, in _make_key\r\n        return _HashedSeq(key)\r\n      File \"sympy\\core\\compatibility.py\", line 702, in __init__\r\n        self.hashvalue = hash(tup)\r\n    RuntimeError: maximum recursion depth exceeded\r\n    ```\r\n    After addition --- \r\n    ```\r\n    >>> decompogen(Min(5, x), x)\r\n    [Min, 5, x]\r\n    ```\r\n    #### Other comments\r\n\r\n\r\n    #### Release Notes\r\n\r\n    <!-- Write the release notes for this release below. See\r\n    https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\n    on how to write release notes. The bot will check your release notes\r\n    automatically to see if they are formatted correctly. -->\r\n\r\n    <!-- BEGIN RELEASE NOTES -->\r\n    *  solvers\r\n        *  Added `Min`/`Max` support for `decompogen`. \r\n    <!-- END RELEASE NOTES -->\n\n</details><p>\n\n@smichr please review this\n# [Codecov](https://codecov.io/gh/sympy/sympy/pull/18517?src=pr&el=h1) Report\n> Merging [#18517](https://codecov.io/gh/sympy/sympy/pull/18517?src=pr&el=desc) into [master](https://codecov.io/gh/sympy/sympy/commit/cdef3e1a21bafcd4d0c789d19d38319615fee01d&el=desc) will **decrease** coverage by `21.719%`.\n> The diff coverage is `n/a`.\n\n```diff\n@@              Coverage Diff               @@\n##            master    #18517        +/-   ##\n==============================================\n- Coverage   75.320%   53.601%   -21.720%     \n==============================================\n  Files          637       640         +3     \n  Lines       167069    167182       +113     \n  Branches     39416     39429        +13     \n==============================================\n- Hits        125838     89612     -36226     \n- Misses       35689     71735     +36046     \n- Partials      5542      5835       +293     \n```\n\nThe associated issue is still not fixed in `master`. Are you still working on it? @namannimmo10 \noops, I forgot about this one. I'm working on my project right now, I can pick this up later.. but if you want, feel free to move with it? ",
  "created_at": "2022-02-05T14:37:33Z",
  "version": "1.11",
  "FAIL_TO_PASS": "[\"test_decompogen\"]",
  "PASS_TO_PASS": "[\"test_decompogen_poly\"]",
  "environment_setup_commit": "9a6104eab0ea7ac191a09c24f3e2d79dcd66bda5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.151696",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}