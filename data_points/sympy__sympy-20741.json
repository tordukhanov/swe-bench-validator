{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-20741",
  "base_commit": "25216a2153156b0744f1f0169264a0eab59d8d6e",
  "patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -172,6 +172,7 @@ def doit(self, **kwargs):\n             args = [arg.doit(**kwargs) for arg in self.args]\n         else:\n             args = self.args\n+\n         # treat scalar*MatrixSymbol or scalar*MatPow separately\n         expr = canonicalize(MatMul(*args))\n         return expr\n@@ -388,8 +389,24 @@ def combine_one_matrices(mul):\n \n     return newmul(factor, *new_args)\n \n+def distribute_monom(mul):\n+    \"\"\"\n+    Simplify MatMul expressions but distributing\n+    rational term to MatMul.\n+\n+    e.g. 2*(A+B) -> 2*A + 2*B\n+    \"\"\"\n+    args = mul.args\n+    if len(args) == 2:\n+        from .matadd import MatAdd\n+        if args[0].is_MatAdd and args[1].is_Rational:\n+            return MatAdd(*[MatMul(mat, args[1]).doit() for mat in args[0].args])\n+        if args[1].is_MatAdd and args[0].is_Rational:\n+            return MatAdd(*[MatMul(args[0], mat).doit() for mat in args[1].args])\n+    return mul\n+\n rules = (\n-    any_zeros, remove_ids, combine_one_matrices, combine_powers, unpack, rm_id(lambda x: x == 1),\n+    distribute_monom, any_zeros, remove_ids, combine_one_matrices, combine_powers, unpack, rm_id(lambda x: x == 1),\n     merge_explicit, factor_in_front, flatten, combine_permutations)\n \n canonicalize = exhaust(typed({MatMul: do_one(*rules)}))\n",
  "test_patch": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -425,8 +425,8 @@ def test_simplify_matrix_expressions():\n     # Various simplification functions\n     assert type(gcd_terms(C*D + D*C)) == MatAdd\n     a = gcd_terms(2*C*D + 4*D*C)\n-    assert type(a) == MatMul\n-    assert a.args == (2, (C*D + 2*D*C))\n+    assert type(a) == MatAdd\n+    assert a.args == (2*C*D, 4*D*C)\n \n def test_exp():\n     A = MatrixSymbol('A', 2, 2)\n@@ -482,3 +482,13 @@ def test_MatrixSet():\n     raises(ValueError, lambda: MatrixSet(2, -2, S.Reals))\n     raises(ValueError, lambda: MatrixSet(2.4, -1, S.Reals))\n     raises(TypeError, lambda: MatrixSet(2, 2, (1, 2, 3)))\n+\n+def test_matrixsymbol_solving():\n+    A = MatrixSymbol('A', 2, 2)\n+    B = MatrixSymbol('B', 2, 2)\n+    Z = ZeroMatrix(2, 2)\n+    assert -(-A + B) - A + B == Z\n+    assert (-(-A + B) - A + B).simplify() == Z\n+    assert (-(-A + B) - A + B).expand() == Z\n+    assert (-(-A + B) - A + B - Z).simplify() == Z\n+    assert (-(-A + B) - A + B - Z).expand() == Z\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -880,7 +880,7 @@ def test_MatMul_MatAdd():\n     from sympy import MatrixSymbol\n \n     X, Y = MatrixSymbol(\"X\", 2, 2), MatrixSymbol(\"Y\", 2, 2)\n-    assert str(2*(X + Y)) == \"2*(X + Y)\"\n+    assert str(2*(X + Y)) == \"2*X + 2*Y\"\n \n     assert str(I*X) == \"I*X\"\n     assert str(-I*X) == \"-I*X\"\n@@ -960,7 +960,7 @@ def test_MatrixSymbol_printing():\n     B = MatrixSymbol(\"B\", 3, 3)\n \n     assert str(A - A*B - B) == \"A - A*B - B\"\n-    assert str(A*B - (A+B)) == \"-(A + B) + A*B\"\n+    assert str(A*B - (A+B)) == \"-A + A*B - B\"\n     assert str(A**(-1)) == \"A**(-1)\"\n     assert str(A**3) == \"A**3\"\n \n",
  "problem_statement": "Matrix expressions aren't simplified properly\n```python\r\n>>> A = MatrixSymbol('A', m, n)\r\n>>> B = MatrixSymbol('B', m, n)\r\n>>> Z = ZeroMatrix(m, n)\r\n>>> -(-A + B) - A + B\r\n-(-A + B) -A + B\r\n>>> (-(-A + B) - A + B).simplify()\r\n-(-A + B) -A + B\r\n>>> (-(-A + B) - A + B).expand()\r\n-B + A -A + B\r\n>>> (-(-A + B) - A + B - Z).simplify()\r\n-(-A + B) -A + B\r\n>>> (-(-A + B) - A + B - Z).expand()\r\n-B + A -A + B\r\n```\r\nFirst reported in https://github.com/sympy/sympy/issues/13508\n",
  "hints_text": "The problem here is-\r\n\r\n` - (A+B)` and similar expressions with `-` sign outside bracket isn't being evaluated.\nI think its `MatMul` which isn't evaluating `-(A+B)` . I'll try to dig in deeper.",
  "created_at": "2021-01-05T09:10:46Z",
  "version": "1.8",
  "FAIL_TO_PASS": "[\"test_simplify_matrix_expressions\", \"test_MatMul_MatAdd\", \"test_MatrixSymbol_printing\"]",
  "PASS_TO_PASS": "[\"test_matrix_symbol_creation\", \"test_shape\", \"test_matexpr\", \"test_subs\", \"test_addition\", \"test_multiplication\", \"test_MatPow\", \"test_MatrixSymbol\", \"test_dense_conversion\", \"test_free_symbols\", \"test_zero_matmul\", \"test_matadd_simplify\", \"test_matmul_simplify\", \"test_invariants\", \"test_indexing\", \"test_single_indexing\", \"test_MatrixElement_commutative\", \"test_MatrixSymbol_determinant\", \"test_MatrixElement_diff\", \"test_MatrixElement_doit\", \"test_identity_powers\", \"test_Zero_power\", \"test_matrixelement_diff\", \"test_MatrixElement_with_values\", \"test_inv\", \"test_issue_2749\", \"test_issue_2750\", \"test_issue_7842\", \"test_MatMul_postprocessor\", \"test_MatAdd_postprocessor\", \"test_exp\", \"test_invalid_args\", \"test_matrixsymbol_from_symbol\", \"test_as_explicit\", \"test_MatrixSet\", \"test_printmethod\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_EulerGamma\", \"test_Exp\", \"test_factorial\", \"test_Function\", \"test_Geometry\", \"test_GoldenRatio\", \"test_TribonacciConstant\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integer\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_Mul\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_GaussianInteger\", \"test_GaussianRational\", \"test_Pow\", \"test_sqrt\", \"test_Rational\", \"test_Float\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_GroebnerBasis\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Series_str\", \"test_TransferFunction_str\", \"test_Parallel_str\", \"test_Feedback_str\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_wild_matchpy\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_noncommutative\", \"test_empty_printer\", \"test_settings\", \"test_RandomDomain\", \"test_FiniteSet\", \"test_UniversalSet\", \"test_PrettyPoly\", \"test_categories\", \"test_Tr\", \"test_issue_6387\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixExpressions\", \"test_Subs_printing\", \"test_issue_15716\", \"test_str_special_matrices\", \"test_issue_14567\", \"test_Str\", \"test_diffgeom\", \"test_NDimArray\", \"test_Predicate\"]",
  "environment_setup_commit": "3ac1464b8840d5f8b618a654f9fbf09c452fe969",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.140306",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}