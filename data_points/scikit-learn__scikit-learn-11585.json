{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-11585",
  "base_commit": "58fa28e3e5e7be677f3bf0a95e4d1010f46e42d0",
  "patch": "diff --git a/examples/decomposition/plot_faces_decomposition.py b/examples/decomposition/plot_faces_decomposition.py\n--- a/examples/decomposition/plot_faces_decomposition.py\n+++ b/examples/decomposition/plot_faces_decomposition.py\n@@ -81,7 +81,8 @@ def plot_gallery(title, images, n_col=n_col, n_row=n_row, cmap=plt.cm.gray):\n     ('Sparse comp. - MiniBatchSparsePCA',\n      decomposition.MiniBatchSparsePCA(n_components=n_components, alpha=0.8,\n                                       n_iter=100, batch_size=3,\n-                                      random_state=rng),\n+                                      random_state=rng,\n+                                      normalize_components=True),\n      True),\n \n     ('MiniBatchDictionaryLearning',\ndiff --git a/sklearn/decomposition/sparse_pca.py b/sklearn/decomposition/sparse_pca.py\n--- a/sklearn/decomposition/sparse_pca.py\n+++ b/sklearn/decomposition/sparse_pca.py\n@@ -66,6 +66,21 @@ class SparsePCA(BaseEstimator, TransformerMixin):\n         If None, the random number generator is the RandomState instance used\n         by `np.random`.\n \n+    normalize_components : boolean, optional (default=False)\n+        - if False, use a version of Sparse PCA without components\n+          normalization and without data centering. This is likely a bug and\n+          even though it's the default for backward compatibility,\n+          this should not be used.\n+        - if True, use a version of Sparse PCA with components normalization\n+          and data centering.\n+\n+        .. versionadded:: 0.20\n+\n+        .. deprecated:: 0.22\n+           ``normalize_components`` was added and set to ``False`` for\n+           backward compatibility. It would be set to ``True`` from 0.22\n+           onwards.\n+\n     Attributes\n     ----------\n     components_ : array, [n_components, n_features]\n@@ -77,6 +92,10 @@ class SparsePCA(BaseEstimator, TransformerMixin):\n     n_iter_ : int\n         Number of iterations run.\n \n+    mean_ : array, shape (n_features,)\n+        Per-feature empirical mean, estimated from the training set.\n+        Equal to ``X.mean(axis=0)``.\n+\n     See also\n     --------\n     PCA\n@@ -85,7 +104,8 @@ class SparsePCA(BaseEstimator, TransformerMixin):\n     \"\"\"\n     def __init__(self, n_components=None, alpha=1, ridge_alpha=0.01,\n                  max_iter=1000, tol=1e-8, method='lars', n_jobs=1, U_init=None,\n-                 V_init=None, verbose=False, random_state=None):\n+                 V_init=None, verbose=False, random_state=None,\n+                 normalize_components=False):\n         self.n_components = n_components\n         self.alpha = alpha\n         self.ridge_alpha = ridge_alpha\n@@ -97,6 +117,7 @@ def __init__(self, n_components=None, alpha=1, ridge_alpha=0.01,\n         self.V_init = V_init\n         self.verbose = verbose\n         self.random_state = random_state\n+        self.normalize_components = normalize_components\n \n     def fit(self, X, y=None):\n         \"\"\"Fit the model from data in X.\n@@ -116,6 +137,17 @@ def fit(self, X, y=None):\n         \"\"\"\n         random_state = check_random_state(self.random_state)\n         X = check_array(X)\n+\n+        if self.normalize_components:\n+            self.mean_ = X.mean(axis=0)\n+            X = X - self.mean_\n+        else:\n+            warnings.warn(\"normalize_components=False is a \"\n+                          \"backward-compatible setting that implements a \"\n+                          \"non-standard definition of sparse PCA. This \"\n+                          \"compatibility mode will be removed in 0.22.\",\n+                          DeprecationWarning)\n+\n         if self.n_components is None:\n             n_components = X.shape[1]\n         else:\n@@ -134,6 +166,13 @@ def fit(self, X, y=None):\n                                                return_n_iter=True\n                                                )\n         self.components_ = Vt.T\n+\n+        if self.normalize_components:\n+            components_norm = \\\n+                    np.linalg.norm(self.components_, axis=1)[:, np.newaxis]\n+            components_norm[components_norm == 0] = 1\n+            self.components_ /= components_norm\n+\n         self.error_ = E\n         return self\n \n@@ -178,11 +217,18 @@ def transform(self, X, ridge_alpha='deprecated'):\n                 ridge_alpha = self.ridge_alpha\n         else:\n             ridge_alpha = self.ridge_alpha\n+\n+        if self.normalize_components:\n+            X = X - self.mean_\n+\n         U = ridge_regression(self.components_.T, X.T, ridge_alpha,\n                              solver='cholesky')\n-        s = np.sqrt((U ** 2).sum(axis=0))\n-        s[s == 0] = 1\n-        U /= s\n+\n+        if not self.normalize_components:\n+            s = np.sqrt((U ** 2).sum(axis=0))\n+            s[s == 0] = 1\n+            U /= s\n+\n         return U\n \n \n@@ -239,6 +285,21 @@ class MiniBatchSparsePCA(SparsePCA):\n         If None, the random number generator is the RandomState instance used\n         by `np.random`.\n \n+    normalize_components : boolean, optional (default=False)\n+        - if False, use a version of Sparse PCA without components\n+          normalization and without data centering. This is likely a bug and\n+          even though it's the default for backward compatibility,\n+          this should not be used.\n+        - if True, use a version of Sparse PCA with components normalization\n+          and data centering.\n+\n+        .. versionadded:: 0.20\n+\n+        .. deprecated:: 0.22\n+           ``normalize_components`` was added and set to ``False`` for\n+           backward compatibility. It would be set to ``True`` from 0.22\n+           onwards.\n+\n     Attributes\n     ----------\n     components_ : array, [n_components, n_features]\n@@ -247,6 +308,10 @@ class MiniBatchSparsePCA(SparsePCA):\n     n_iter_ : int\n         Number of iterations run.\n \n+    mean_ : array, shape (n_features,)\n+        Per-feature empirical mean, estimated from the training set.\n+        Equal to ``X.mean(axis=0)``.\n+\n     See also\n     --------\n     PCA\n@@ -255,11 +320,13 @@ class MiniBatchSparsePCA(SparsePCA):\n     \"\"\"\n     def __init__(self, n_components=None, alpha=1, ridge_alpha=0.01,\n                  n_iter=100, callback=None, batch_size=3, verbose=False,\n-                 shuffle=True, n_jobs=1, method='lars', random_state=None):\n+                 shuffle=True, n_jobs=1, method='lars', random_state=None,\n+                 normalize_components=False):\n         super(MiniBatchSparsePCA, self).__init__(\n             n_components=n_components, alpha=alpha, verbose=verbose,\n             ridge_alpha=ridge_alpha, n_jobs=n_jobs, method=method,\n-            random_state=random_state)\n+            random_state=random_state,\n+            normalize_components=normalize_components)\n         self.n_iter = n_iter\n         self.callback = callback\n         self.batch_size = batch_size\n@@ -283,6 +350,17 @@ def fit(self, X, y=None):\n         \"\"\"\n         random_state = check_random_state(self.random_state)\n         X = check_array(X)\n+\n+        if self.normalize_components:\n+            self.mean_ = X.mean(axis=0)\n+            X = X - self.mean_\n+        else:\n+            warnings.warn(\"normalize_components=False is a \"\n+                          \"backward-compatible setting that implements a \"\n+                          \"non-standard definition of sparse PCA. This \"\n+                          \"compatibility mode will be removed in 0.22.\",\n+                          DeprecationWarning)\n+\n         if self.n_components is None:\n             n_components = X.shape[1]\n         else:\n@@ -298,4 +376,11 @@ def fit(self, X, y=None):\n             random_state=random_state,\n             return_n_iter=True)\n         self.components_ = Vt.T\n+\n+        if self.normalize_components:\n+            components_norm = \\\n+                    np.linalg.norm(self.components_, axis=1)[:, np.newaxis]\n+            components_norm[components_norm == 0] = 1\n+            self.components_ /= components_norm\n+\n         return self\n",
  "test_patch": "diff --git a/sklearn/decomposition/tests/test_sparse_pca.py b/sklearn/decomposition/tests/test_sparse_pca.py\n--- a/sklearn/decomposition/tests/test_sparse_pca.py\n+++ b/sklearn/decomposition/tests/test_sparse_pca.py\n@@ -2,19 +2,20 @@\n # License: BSD 3 clause\n \n import sys\n+import pytest\n \n import numpy as np\n \n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n-from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_allclose\n from sklearn.utils.testing import SkipTest\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_false\n from sklearn.utils.testing import assert_warns_message\n from sklearn.utils.testing import if_safe_multiprocessing_with_blas\n \n-from sklearn.decomposition import SparsePCA, MiniBatchSparsePCA\n+from sklearn.decomposition import SparsePCA, MiniBatchSparsePCA, PCA\n from sklearn.utils import check_random_state\n \n \n@@ -43,31 +44,37 @@ def generate_toy_data(n_components, n_samples, image_size, random_state=None):\n # test different aspects of the code in the same test\n \n \n-def test_correct_shapes():\n+@pytest.mark.filterwarnings(\"ignore:normalize_components\")\n+@pytest.mark.parametrize(\"norm_comp\", [False, True])\n+def test_correct_shapes(norm_comp):\n     rng = np.random.RandomState(0)\n     X = rng.randn(12, 10)\n-    spca = SparsePCA(n_components=8, random_state=rng)\n+    spca = SparsePCA(n_components=8, random_state=rng,\n+                     normalize_components=norm_comp)\n     U = spca.fit_transform(X)\n     assert_equal(spca.components_.shape, (8, 10))\n     assert_equal(U.shape, (12, 8))\n     # test overcomplete decomposition\n-    spca = SparsePCA(n_components=13, random_state=rng)\n+    spca = SparsePCA(n_components=13, random_state=rng,\n+                     normalize_components=norm_comp)\n     U = spca.fit_transform(X)\n     assert_equal(spca.components_.shape, (13, 10))\n     assert_equal(U.shape, (12, 13))\n \n \n-def test_fit_transform():\n+@pytest.mark.filterwarnings(\"ignore:normalize_components\")\n+@pytest.mark.parametrize(\"norm_comp\", [False, True])\n+def test_fit_transform(norm_comp):\n     alpha = 1\n     rng = np.random.RandomState(0)\n     Y, _, _ = generate_toy_data(3, 10, (8, 8), random_state=rng)  # wide array\n     spca_lars = SparsePCA(n_components=3, method='lars', alpha=alpha,\n-                          random_state=0)\n+                          random_state=0, normalize_components=norm_comp)\n     spca_lars.fit(Y)\n \n     # Test that CD gives similar results\n     spca_lasso = SparsePCA(n_components=3, method='cd', random_state=0,\n-                           alpha=alpha)\n+                           alpha=alpha, normalize_components=norm_comp)\n     spca_lasso.fit(Y)\n     assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)\n \n@@ -79,75 +86,95 @@ def test_fit_transform():\n                          Y, ridge_alpha=None)\n \n \n+@pytest.mark.filterwarnings(\"ignore:normalize_components\")\n+@pytest.mark.parametrize(\"norm_comp\", [False, True])\n @if_safe_multiprocessing_with_blas\n-def test_fit_transform_parallel():\n+def test_fit_transform_parallel(norm_comp):\n     alpha = 1\n     rng = np.random.RandomState(0)\n     Y, _, _ = generate_toy_data(3, 10, (8, 8), random_state=rng)  # wide array\n     spca_lars = SparsePCA(n_components=3, method='lars', alpha=alpha,\n-                          random_state=0)\n+                          random_state=0, normalize_components=norm_comp)\n     spca_lars.fit(Y)\n     U1 = spca_lars.transform(Y)\n     # Test multiple CPUs\n     spca = SparsePCA(n_components=3, n_jobs=2, method='lars', alpha=alpha,\n-                     random_state=0).fit(Y)\n+                     random_state=0, normalize_components=norm_comp).fit(Y)\n     U2 = spca.transform(Y)\n     assert_true(not np.all(spca_lars.components_ == 0))\n     assert_array_almost_equal(U1, U2)\n \n \n-def test_transform_nan():\n+@pytest.mark.filterwarnings(\"ignore:normalize_components\")\n+@pytest.mark.parametrize(\"norm_comp\", [False, True])\n+def test_transform_nan(norm_comp):\n     # Test that SparsePCA won't return NaN when there is 0 feature in all\n     # samples.\n     rng = np.random.RandomState(0)\n     Y, _, _ = generate_toy_data(3, 10, (8, 8), random_state=rng)  # wide array\n     Y[:, 0] = 0\n-    estimator = SparsePCA(n_components=8)\n+    estimator = SparsePCA(n_components=8, normalize_components=norm_comp)\n     assert_false(np.any(np.isnan(estimator.fit_transform(Y))))\n \n \n-def test_fit_transform_tall():\n+@pytest.mark.filterwarnings(\"ignore:normalize_components\")\n+@pytest.mark.parametrize(\"norm_comp\", [False, True])\n+def test_fit_transform_tall(norm_comp):\n     rng = np.random.RandomState(0)\n     Y, _, _ = generate_toy_data(3, 65, (8, 8), random_state=rng)  # tall array\n     spca_lars = SparsePCA(n_components=3, method='lars',\n-                          random_state=rng)\n+                          random_state=rng, normalize_components=norm_comp)\n     U1 = spca_lars.fit_transform(Y)\n-    spca_lasso = SparsePCA(n_components=3, method='cd', random_state=rng)\n+    spca_lasso = SparsePCA(n_components=3, method='cd',\n+                           random_state=rng, normalize_components=norm_comp)\n     U2 = spca_lasso.fit(Y).transform(Y)\n     assert_array_almost_equal(U1, U2)\n \n \n-def test_initialization():\n+@pytest.mark.filterwarnings(\"ignore:normalize_components\")\n+@pytest.mark.parametrize(\"norm_comp\", [False, True])\n+def test_initialization(norm_comp):\n     rng = np.random.RandomState(0)\n     U_init = rng.randn(5, 3)\n     V_init = rng.randn(3, 4)\n     model = SparsePCA(n_components=3, U_init=U_init, V_init=V_init, max_iter=0,\n-                      random_state=rng)\n+                      random_state=rng, normalize_components=norm_comp)\n     model.fit(rng.randn(5, 4))\n-    assert_array_equal(model.components_, V_init)\n+    if norm_comp:\n+        assert_allclose(model.components_,\n+                        V_init / np.linalg.norm(V_init, axis=1)[:, None])\n+    else:\n+        assert_allclose(model.components_, V_init)\n \n \n-def test_mini_batch_correct_shapes():\n+@pytest.mark.filterwarnings(\"ignore:normalize_components\")\n+@pytest.mark.parametrize(\"norm_comp\", [False, True])\n+def test_mini_batch_correct_shapes(norm_comp):\n     rng = np.random.RandomState(0)\n     X = rng.randn(12, 10)\n-    pca = MiniBatchSparsePCA(n_components=8, random_state=rng)\n+    pca = MiniBatchSparsePCA(n_components=8, random_state=rng,\n+                             normalize_components=norm_comp)\n     U = pca.fit_transform(X)\n     assert_equal(pca.components_.shape, (8, 10))\n     assert_equal(U.shape, (12, 8))\n     # test overcomplete decomposition\n-    pca = MiniBatchSparsePCA(n_components=13, random_state=rng)\n+    pca = MiniBatchSparsePCA(n_components=13, random_state=rng,\n+                             normalize_components=norm_comp)\n     U = pca.fit_transform(X)\n     assert_equal(pca.components_.shape, (13, 10))\n     assert_equal(U.shape, (12, 13))\n \n \n-def test_mini_batch_fit_transform():\n+@pytest.mark.filterwarnings(\"ignore:normalize_components\")\n+@pytest.mark.parametrize(\"norm_comp\", [False, True])\n+def test_mini_batch_fit_transform(norm_comp):\n     raise SkipTest(\"skipping mini_batch_fit_transform.\")\n     alpha = 1\n     rng = np.random.RandomState(0)\n     Y, _, _ = generate_toy_data(3, 10, (8, 8), random_state=rng)  # wide array\n     spca_lars = MiniBatchSparsePCA(n_components=3, random_state=0,\n-                                   alpha=alpha).fit(Y)\n+                                   alpha=alpha,\n+                                   normalize_components=norm_comp).fit(Y)\n     U1 = spca_lars.transform(Y)\n     # Test multiple CPUs\n     if sys.platform == 'win32':  # fake parallelism for win32\n@@ -155,16 +182,59 @@ def test_mini_batch_fit_transform():\n         _mp = joblib_par.multiprocessing\n         joblib_par.multiprocessing = None\n         try:\n-            U2 = MiniBatchSparsePCA(n_components=3, n_jobs=2, alpha=alpha,\n-                                    random_state=0).fit(Y).transform(Y)\n+            spca = MiniBatchSparsePCA(n_components=3, n_jobs=2, alpha=alpha,\n+                                      random_state=0,\n+                                      normalize_components=norm_comp)\n+            U2 = spca.fit(Y).transform(Y)\n         finally:\n             joblib_par.multiprocessing = _mp\n     else:  # we can efficiently use parallelism\n-        U2 = MiniBatchSparsePCA(n_components=3, n_jobs=2, alpha=alpha,\n-                                random_state=0).fit(Y).transform(Y)\n+        spca = MiniBatchSparsePCA(n_components=3, n_jobs=2, alpha=alpha,\n+                                  random_state=0,\n+                                  normalize_components=norm_comp)\n+        U2 = spca.fit(Y).transform(Y)\n     assert_true(not np.all(spca_lars.components_ == 0))\n     assert_array_almost_equal(U1, U2)\n     # Test that CD gives similar results\n     spca_lasso = MiniBatchSparsePCA(n_components=3, method='cd', alpha=alpha,\n-                                    random_state=0).fit(Y)\n+                                    random_state=0,\n+                                    normalize_components=norm_comp).fit(Y)\n     assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)\n+\n+\n+def test_scaling_fit_transform():\n+    alpha = 1\n+    rng = np.random.RandomState(0)\n+    Y, _, _ = generate_toy_data(3, 1000, (8, 8), random_state=rng)\n+    spca_lars = SparsePCA(n_components=3, method='lars', alpha=alpha,\n+                          random_state=rng, normalize_components=True)\n+    results_train = spca_lars.fit_transform(Y)\n+    results_test = spca_lars.transform(Y[:10])\n+    assert_allclose(results_train[0], results_test[0])\n+\n+\n+def test_pca_vs_spca():\n+    rng = np.random.RandomState(0)\n+    Y, _, _ = generate_toy_data(3, 1000, (8, 8), random_state=rng)\n+    Z, _, _ = generate_toy_data(3, 10, (8, 8), random_state=rng)\n+    spca = SparsePCA(alpha=0, ridge_alpha=0, n_components=2,\n+                     normalize_components=True)\n+    pca = PCA(n_components=2)\n+    pca.fit(Y)\n+    spca.fit(Y)\n+    results_test_pca = pca.transform(Z)\n+    results_test_spca = spca.transform(Z)\n+    assert_allclose(np.abs(spca.components_.dot(pca.components_.T)),\n+                    np.eye(2), atol=1e-5)\n+    results_test_pca *= np.sign(results_test_pca[0, :])\n+    results_test_spca *= np.sign(results_test_spca[0, :])\n+    assert_allclose(results_test_pca, results_test_spca)\n+\n+\n+@pytest.mark.parametrize(\"spca\", [SparsePCA, MiniBatchSparsePCA])\n+def test_spca_deprecation_warning(spca):\n+    rng = np.random.RandomState(0)\n+    Y, _, _ = generate_toy_data(3, 10, (8, 8), random_state=rng)\n+    warn_message = \"normalize_components\"\n+    assert_warns_message(DeprecationWarning, warn_message,\n+                         spca(normalize_components=False).fit, Y)\n",
  "problem_statement": "SparsePCA incorrectly scales results in .transform()\n#### Description\r\nWhen using `SparsePCA`, the `transform()` method incorrectly scales the results based on the *number of rows* in the data matrix passed.\r\n\r\n#### Proposed Fix\r\nI am regrettably unable to do a pull request from where I sit. The issue is with this chunk of code, as of writing this at [line number 179 in sparse_pca.py](https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/decomposition/sparse_pca.py#L179):\r\n```python\r\n        U = ridge_regression(self.components_.T, X.T, ridge_alpha,\r\n                             solver='cholesky')\r\n        s = np.sqrt((U ** 2).sum(axis=0))\r\n        s[s == 0] = 1\r\n        U /= s\r\n        return U\r\n```\r\nI honestly do not understand the details of the chosen implementation of SparsePCA. Depending on the objectives of the class, making use of the features as significant for unseen examples requires one of two modifications. Either (a) **learn** the scale factor `s` from the training data (i.e., make it an instance attribute like `.scale_factor_`), or (b) use `.mean(axis=0)` instead of `.sum(axis=0)` to remove the number-of-examples dependency.\r\n\r\n#### Steps/Code to Reproduce\r\n```python\r\nfrom sklearn.decomposition import SparsePCA\r\nimport numpy as np\r\n\r\n\r\ndef get_data( count, seed ):\r\n    np.random.seed(seed)\r\n    col1 = np.random.random(count)\r\n    col2 = np.random.random(count)\r\n\r\n    data = np.hstack([ a[:,np.newaxis] for a in [\r\n        col1 + .01*np.random.random(count),\r\n        -col1 + .01*np.random.random(count),\r\n        2*col1 + col2 + .01*np.random.random(count),\r\n        col2 + .01*np.random.random(count),\r\n        ]])\r\n    return data\r\n\r\n\r\ntrain = get_data(1000,1)\r\nspca = SparsePCA(max_iter=20)\r\nresults_train = spca.fit_transform( train )\r\n\r\ntest = get_data(10,1)\r\nresults_test = spca.transform( test )\r\n\r\nprint( \"Training statistics:\" )\r\nprint( \"  mean: %12.3f\" % results_train.mean() )\r\nprint( \"   max: %12.3f\" % results_train.max() )\r\nprint( \"   min: %12.3f\" % results_train.min() )\r\nprint( \"Testing statistics:\" )\r\nprint( \"  mean: %12.3f\" % results_test.mean() )\r\nprint( \"   max: %12.3f\" % results_test.max() )\r\nprint( \"   min: %12.3f\" % results_test.min() )\r\n```\r\nOutput:\r\n```\r\nTraining statistics:\r\n  mean:       -0.009\r\n   max:        0.067\r\n   min:       -0.080\r\nTesting statistics:\r\n  mean:       -0.107\r\n   max:        0.260\r\n   min:       -0.607\r\n```\r\n\r\n#### Expected Results\r\nThe test results min/max values are on the same scale as the training results.\r\n\r\n#### Actual Results\r\nThe test results min/max values are much larger than the training results, because fewer examples were used. It is trivial to repeat this process with various sizes of training and testing data to see the relationship.\r\n\n",
  "hints_text": "> Actual Results\r\n>\r\n> The test results min/max values are much larger than the training results, because fewer examples were used.\r\n\r\n@andrewww Thanks for opening this issue. I can confirm your results (they are also true for the `MiniBatchSparsePCA`), and that in unit tests `sklearn/decomposition/tests/test_sparse_pca.py` the transform value does not seem to be validated as far as I could see. \r\n \r\nHow do you propose to make sure that your solution is correct? For instance, is there a case where `SparsePCA` should produce the same results as `PCA` (e.g. by setting `alpha=0`)? Otherwise is it possible to either validate the results with [the example in the original paper](https://web.stanford.edu/~hastie/Papers/spc_jcgs.pdf) (section 5.5) or with those produced by some other implementation?  cc @vene \n@rth Honestly, I had not dug into the math to determine what the correct solution would be; I merely discovered the dependency on number of examples, knew that was wrong, and proposed a solution that at least eliminates that dependency.\r\n\r\nI suspect the examples in the original paper is the best approach (you mention section 5.5, but I only see 5.1 through 5.3, which really are three separate examples that would make good unit tests). \r\n\r\nAgain, I did not dig through the math, but if I assume that SPCA is what I think it is (PCA estimated with an L1 penalty altering the original loss function), then `alpha=0` should recover the PCA solution and again that yields good unit tests.\r\n\r\nI feel like a terrible contributor, but all I can really do from where I sit is comment on bugs and provide typed ideas of solutions in comments. Artifact of my job.\n> I feel like a terrible contributor, but all I can really do from where I sit is comment on bugs and provide typed ideas of solutions in comments. Artifact of my job.\r\n\r\nWell, all your previous bug reports were accurate and provided a fix: that is very helpful. Thank you )\r\n\r\n Someone would just need to investigate this issue in more detail...\nThis seems like a bug indeed although I don't know much about SparsePCA. I quickly looked at it and the PCA does not give the same results as the SparsePCA with alpha=0 and ridge_alpha=0 (whether they should or not I am not sure). One thing I noticed is that `spca.components_` are not normalized (in contrary to `pca.components_`) and their norms seems to depend on the size of the data as well so maybe there was some logic behind the transform scaling ...\r\n\nI discussed with @GaelVaroquaux and I'll try to take care of it.\r\nThe summary of our discussion : \r\nI have to verify that the spca and pca components are the same modulo a rotation and a normalization which is our hyporthesis. From there : change the behaviour of SparsePCA and define a deprecation path. We suggest to add a scale_components parameter to SparsePCA with default value = False which would leave things untouched. If this parameter is set to True then we compute the norm of the components during training and normalize with it this should mitigate the scaling problem. If everything works out we deprecate the default scale_components=False.\r\nHopefully I'll manage to do that during the sprint.\nIndeed the result with no regularization will only match PCA up to rotation & scaling because they are constrained differently (our SPCA does not have orthonormal constraints). I suspect they should have equal reconstruction MSE, right?\r\n\r\nAccording to this discussion I agree the current transform is indeed wrong. As far as I understand the proposed fix is about .fit, not .transform-- when you say \"leave things untouched\" you mean other than fixing the .transform bug? If not, with scale_components=True will transform be normalized twice?\r\n\r\n(Disclaimer: I'm missing a lot of context and forgot everything about the code)",
  "created_at": "2018-07-17T09:30:51Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/decomposition/tests/test_sparse_pca.py::test_correct_shapes[False]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_correct_shapes[True]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_fit_transform[False]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_fit_transform[True]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_fit_transform_parallel[False]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_fit_transform_parallel[True]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_transform_nan[False]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_transform_nan[True]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_fit_transform_tall[False]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_fit_transform_tall[True]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_initialization[False]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_initialization[True]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_mini_batch_correct_shapes[False]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_mini_batch_correct_shapes[True]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_scaling_fit_transform\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_pca_vs_spca\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_spca_deprecation_warning[SparsePCA]\", \"sklearn/decomposition/tests/test_sparse_pca.py::test_spca_deprecation_warning[MiniBatchSparsePCA]\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.963252",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}