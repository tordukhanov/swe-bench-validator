{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15625",
  "base_commit": "87148dcdab07b6e3385f76dcc96070bdd36342a1",
  "patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -424,9 +424,8 @@ def _repr_latex_(self):\n         SymPy objects, like lists and dictionaries of expressions.\n         \"\"\"\n         from sympy.printing.latex import latex\n-        s = latex(self, mode='equation*')\n-        s = s.strip('$')\n-        return \"$$%s$$\" % s\n+        s = latex(self, mode='plain')\n+        return \"$\\\\displaystyle %s$\" % s\n \n     _repr_latex_orig = _repr_latex_\n \ndiff --git a/sympy/interactive/printing.py b/sympy/interactive/printing.py\n--- a/sympy/interactive/printing.py\n+++ b/sympy/interactive/printing.py\n@@ -148,6 +148,8 @@ def _print_latex_png(o):\n         \"\"\"\n         if _can_print_latex(o):\n             s = latex(o, mode=latex_mode, **settings)\n+            if latex_mode == 'plain':\n+                s = '$\\\\displaystyle %s$' % s\n             try:\n                 return _preview_wrapper(s)\n             except RuntimeError as e:\n@@ -171,8 +173,9 @@ def _print_latex_text(o):\n         \"\"\"\n         if _can_print_latex(o):\n             s = latex(o, mode=latex_mode, **settings)\n-            s = s.strip('$')\n-            return '$$%s$$' % s\n+            if latex_mode == 'plain':\n+                return '$\\\\displaystyle %s$' % s\n+            return s\n \n     def _result_display(self, arg):\n         \"\"\"IPython's pretty-printer display hook, for use in IPython 0.10\n@@ -269,7 +272,7 @@ def init_printing(pretty_print=True, order=None, use_unicode=None,\n                   use_latex=None, wrap_line=None, num_columns=None,\n                   no_global=False, ip=None, euler=False, forecolor='Black',\n                   backcolor='Transparent', fontsize='10pt',\n-                  latex_mode='equation*', print_builtin=True,\n+                  latex_mode='plain', print_builtin=True,\n                   str_printer=None, pretty_printer=None,\n                   latex_printer=None, **settings):\n     r\"\"\"\n@@ -325,7 +328,7 @@ def init_printing(pretty_print=True, order=None, use_unicode=None,\n     fontsize: string, optional, default='10pt'\n         A font size to pass to the LaTeX documentclass function in the\n         preamble.\n-    latex_mode: string, optional, default='equation*'\n+    latex_mode: string, optional, default='plain'\n         The mode used in the LaTeX printer. Can be one of:\n         {'inline'|'plain'|'equation'|'equation*'}.\n     print_builtin: boolean, optional, default=True\ndiff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -2052,9 +2052,8 @@ def _repr_latex_(self):\n         SymPy objects, like lists and dictionaries of expressions.\n         \"\"\"\n         from sympy.printing.latex import latex\n-        s = latex(self, mode='equation*')\n-        s = s.strip('$')\n-        return \"$$%s$$\" % s\n+        s = latex(self, mode='plain')\n+        return \"$\\\\displaystyle %s$\" % s\n \n     _repr_latex_orig = _repr_latex_\n \ndiff --git a/sympy/physics/vector/dyadic.py b/sympy/physics/vector/dyadic.py\n--- a/sympy/physics/vector/dyadic.py\n+++ b/sympy/physics/vector/dyadic.py\n@@ -387,9 +387,8 @@ def _repr_latex_(self):\n         SymPy objects, like lists and dictionaries of expressions.\n         \"\"\"\n         from sympy.printing.latex import latex\n-        s = latex(self, mode='equation*')\n-        s = s.strip('$')\n-        return \"$$%s$$\" % s\n+        s = latex(self, mode='plain')\n+        return \"$\\\\displaystyle %s$\" % s\n \n     _repr_latex_orig = _repr_latex_\n \ndiff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -463,9 +463,8 @@ def _repr_latex_(self):\n         SymPy objects, like lists and dictionaries of expressions.\n         \"\"\"\n         from sympy.printing.latex import latex\n-        s = latex(self, mode='equation*')\n-        s = s.strip('$')\n-        return \"$$%s$$\" % s\n+        s = latex(self, mode='plain')\n+        return \"$\\\\displaystyle %s$\" % s\n \n     _repr_latex_orig = _repr_latex_\n \ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -669,7 +669,7 @@ def _print_Integral(self, expr):\n                 tex += r\"\\int\"\n \n                 if len(lim) > 1:\n-                    if self._settings['mode'] in ['equation', 'equation*'] \\\n+                    if self._settings['mode'] != 'inline' \\\n                             and not self._settings['itex']:\n                         tex += r\"\\limits\"\n \ndiff --git a/sympy/printing/preview.py b/sympy/printing/preview.py\n--- a/sympy/printing/preview.py\n+++ b/sympy/printing/preview.py\n@@ -180,7 +180,9 @@ def preview(expr, output='png', viewer=None, euler=True, packages=(),\n     if isinstance(expr, str):\n         latex_string = expr\n     else:\n-        latex_string = latex(expr, mode='inline', **latex_settings)\n+        latex_string = ('$\\\\displaystyle ' +\n+                        latex(expr, mode='plain', **latex_settings) +\n+                        '$')\n \n     try:\n         workdir = tempfile.mkdtemp()\ndiff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -307,9 +307,8 @@ def _repr_latex_(self):\n         SymPy objects, like lists and dictionaries of expressions.\n         \"\"\"\n         from sympy.printing.latex import latex\n-        s = latex(self, mode='equation*')\n-        s = s.strip('$')\n-        return \"$$%s$$\" % s\n+        s = latex(self, mode='plain')\n+        return \"$\\\\displaystyle %s$\" % s\n \n     _repr_latex_orig = _repr_latex_\n \n",
  "test_patch": "diff --git a/sympy/interactive/tests/test_ipythonprinting.py b/sympy/interactive/tests/test_ipythonprinting.py\n--- a/sympy/interactive/tests/test_ipythonprinting.py\n+++ b/sympy/interactive/tests/test_ipythonprinting.py\n@@ -88,7 +88,7 @@ def test_print_builtin_option():\n                     u'{n\\N{LATIN SUBSCRIPT SMALL LETTER I}: 3, \\N{GREEK SMALL LETTER PI}: 3.14}',\n                     \"{n_i: 3, pi: 3.14}\",\n                     u'{\\N{GREEK SMALL LETTER PI}: 3.14, n\\N{LATIN SUBSCRIPT SMALL LETTER I}: 3}')\n-    assert latex == r'$$\\begin{equation*}\\left \\{ n_{i} : 3, \\quad \\pi : 3.14\\right \\}\\end{equation*}$$'\n+    assert latex == r'$\\displaystyle \\left \\{ n_{i} : 3, \\quad \\pi : 3.14\\right \\}$'\n \n     app.run_cell(\"inst.display_formatter.formatters['text/latex'].enabled = True\")\n     app.run_cell(\"init_printing(use_latex=True, print_builtin=False)\")\n@@ -135,7 +135,7 @@ def test_builtin_containers():\n ([ ],)\n  [2]  \\\n \"\"\"\n-        assert app.user_ns['c']['text/latex'] == '$$\\\\begin{equation*}\\\\left ( \\\\left[\\\\begin{matrix}1\\\\\\\\2\\\\end{matrix}\\\\right]\\\\right )\\\\end{equation*}$$'\n+        assert app.user_ns['c']['text/latex'] == '$\\\\displaystyle \\\\left ( \\\\left[\\\\begin{matrix}1\\\\\\\\2\\\\end{matrix}\\\\right]\\\\right )$'\n     else:\n         assert app.user_ns['a'][0]['text/plain'] ==  '(True, False)'\n         assert 'text/latex' not in app.user_ns['a'][0]\n@@ -147,7 +147,7 @@ def test_builtin_containers():\n ([ ],)\n  [2]  \\\n \"\"\"\n-        assert app.user_ns['c'][0]['text/latex'] == '$$\\\\begin{equation*}\\\\left ( \\\\left[\\\\begin{matrix}1\\\\\\\\2\\\\end{matrix}\\\\right]\\\\right )\\\\end{equation*}$$'\n+        assert app.user_ns['c'][0]['text/latex'] == '$\\\\displaystyle \\\\left ( \\\\left[\\\\begin{matrix}1\\\\\\\\2\\\\end{matrix}\\\\right]\\\\right )$'\n \n def test_matplotlib_bad_latex():\n     # Initialize and setup IPython session\ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -564,7 +564,7 @@ def test_latex_derivatives():\n \n     # use ordinary d when one of the variables has been integrated out\n     assert latex(diff(Integral(exp(-x * y), (x, 0, oo)), y, evaluate=False)) == \\\n-        r\"\\frac{d}{d y} \\int_{0}^{\\infty} e^{- x y}\\, dx\"\n+        r\"\\frac{d}{d y} \\int\\limits_{0}^{\\infty} e^{- x y}\\, dx\"\n \n     # Derivative wrapped in power:\n     assert latex(diff(x, x, evaluate=False)**2) == \\\n@@ -584,15 +584,15 @@ def test_latex_subs():\n \n def test_latex_integrals():\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left (x \\right )}\\, dx\"\n-    assert latex(Integral(x**2, (x, 0, 1))) == r\"\\int_{0}^{1} x^{2}\\, dx\"\n-    assert latex(Integral(x**2, (x, 10, 20))) == r\"\\int_{10}^{20} x^{2}\\, dx\"\n+    assert latex(Integral(x**2, (x, 0, 1))) == r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n+    assert latex(Integral(x**2, (x, 10, 20))) == r\"\\int\\limits_{10}^{20} x^{2}\\, dx\"\n     assert latex(Integral(\n-        y*x**2, (x, 0, 1), y)) == r\"\\int\\int_{0}^{1} x^{2} y\\, dx\\, dy\"\n+        y*x**2, (x, 0, 1), y)) == r\"\\int\\int\\limits_{0}^{1} x^{2} y\\, dx\\, dy\"\n     assert latex(Integral(y*x**2, (x, 0, 1), y), mode='equation*') \\\n         == r\"\\begin{equation*}\\int\\int\\limits_{0}^{1} x^{2} y\\, dx\\, dy\\end{equation*}\"\n     assert latex(Integral(y*x**2, (x, 0, 1), y), mode='equation*', itex=True) \\\n         == r\"$$\\int\\int_{0}^{1} x^{2} y\\, dx\\, dy$$\"\n-    assert latex(Integral(x, (x, 0))) == r\"\\int^{0} x\\, dx\"\n+    assert latex(Integral(x, (x, 0))) == r\"\\int\\limits^{0} x\\, dx\"\n     assert latex(Integral(x*y, x, y)) == r\"\\iint x y\\, dx\\, dy\"\n     assert latex(Integral(x*y*z, x, y, z)) == r\"\\iiint x y z\\, dx\\, dy\\, dz\"\n     assert latex(Integral(x*y*z*t, x, y, z, t)) == \\\n@@ -600,7 +600,7 @@ def test_latex_integrals():\n     assert latex(Integral(x, x, x, x, x, x, x)) == \\\n         r\"\\int\\int\\int\\int\\int\\int x\\, dx\\, dx\\, dx\\, dx\\, dx\\, dx\"\n     assert latex(Integral(x, x, y, (z, 0, 1))) == \\\n-        r\"\\int_{0}^{1}\\int\\int x\\, dx\\, dy\\, dz\"\n+        r\"\\int\\limits_{0}^{1}\\int\\int x\\, dx\\, dy\\, dz\"\n \n     # fix issue #10806\n     assert latex(Integral(z, z)**2) == r\"\\left(\\int z\\, dz\\right)^{2}\"\n",
  "problem_statement": "Jupyter notebook LaTeX output breaks when processed in LaTeX, ironically\nSteps to reproduce:\r\n\r\n* Create a Jupyter notebook (named, say, `mynotebook.ipynb`) with this content:\r\n\r\n  ```python\r\n  import sympy as sp\r\n  sp.init_printing()\r\n  1\r\n  ```\r\n\r\n* Convert it to LaTeX (you can remove the `--execute` flag if you saved the result in the notebook):\r\n\r\n      python3 -m nbconvert mynotebook.ipynb --execute --to pdf\r\n\r\nThis creates the error (originating from LaTeX):\r\n\r\n```\r\n...\r\n! LaTeX Error: Bad math environment delimiter.\r\n\r\nSee the LaTeX manual or LaTeX Companion for explanation.\r\nType  H <return>  for immediate help.\r\n ...                                              \r\n                                                  \r\nl.300     $$\\begin{equation*}\r\n                             1\\end{equation*}$$\r\n? \r\n! Emergency stop.\r\n ...                                              \r\n                                                  \r\nl.300     $$\\begin{equation*}\r\n                             1\\end{equation*}$$\r\n...\r\n```\r\n\r\nIf you only convert `--to latex`, you'll see that this LaTeX code is generated:\r\n\r\n```latex\r\n...\r\n\\texttt{\\color{outcolor}Out[{\\color{outcolor}1}]:}\r\n    \r\n    $$\\begin{equation*}1\\end{equation*}$$\r\n...\r\n```\r\n\r\nThe reason for this error message is that the `equation*` environment is meant to be used in text mode, but sandwiching the whole thing between `$$` switches to math mode.\r\n\r\nIn this case the `$$` should simply be removed, but a general solution to this problem might be more involved.\nLaTeX printing: $$...$$ -> $\\displaystyle ...$\n#### References to other Issues or PRs\r\n\r\nSame thing for IPython: https://github.com/ipython/ipython/pull/11357\r\n\r\nSomewhat related: https://github.com/jupyter/nbconvert/pull/892\r\n\r\n#### Brief description of what is fixed or changed\r\n\r\nChange the LaTeX wrapping from `$$`...`$$` to `$\\displaystyle `...`$`\r\n\r\n#### Other comments\r\n\r\nThis left-aligns expressions when exporting to LaTeX.\r\n\r\nBefore:\r\n\r\n![grafik](https://user-images.githubusercontent.com/705404/46369833-5642c800-c684-11e8-9d11-600ab87c3dc2.png)\r\n\r\nAfter:\r\n\r\n![grafik](https://user-images.githubusercontent.com/705404/46369898-7bcfd180-c684-11e8-8e71-275a7ba45bca.png)\r\n\r\n#### Release Notes\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n* printing\r\n  * change from `$$`...`$$` to `$\\displaystyle `...`$` to allow left-aligning in LaTeX documents\r\n<!-- END RELEASE NOTES -->\r\n\n",
  "hints_text": "I wonder if this change https://github.com/sympy/sympy/pull/15367 caused this.\nLooks like it.\r\n\r\nPlease note that using a math environment (like `equation*`) is a step into the wrong direction, see #15329.\n:white_check_mark:\n\nHi, I am the [SymPy bot](https://github.com/sympy/sympy-bot) (v134). I'm here to help you write a release notes entry. Please read the [guide on how to write release notes](https://github.com/sympy/sympy/wiki/Writing-Release-Notes).\n\n\n\nYour release notes are in good order.\n\nHere is what the release notes will look like:\n* printing\n  * change from `$$`...`$$` to `$\\displaystyle `...`$` to allow left-aligning in LaTeX documents ([#15329](https://github.com/sympy/sympy/pull/15329) by [@mgeier](https://github.com/mgeier))\n\nThis will be added to https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4.\n\nNote: This comment will be updated with the latest check if you edit the pull request. You need to reload the page to see it. <details><summary>Click here to see the pull request description that was parsed.</summary>\n\n    #### References to other Issues or PRs\r\n\r\n    Same thing for IPython: https://github.com/ipython/ipython/pull/11357\r\n\r\n    Somewhat related: https://github.com/jupyter/nbconvert/pull/892\r\n\r\n    #### Brief description of what is fixed or changed\r\n\r\n    Change the LaTeX wrapping from `$$`...`$$` to `$\\displaystyle `...`$`\r\n\r\n    #### Other comments\r\n\r\n    This left-aligns expressions when exporting to LaTeX.\r\n\r\n    Before:\r\n\r\n    ![grafik](https://user-images.githubusercontent.com/705404/46369833-5642c800-c684-11e8-9d11-600ab87c3dc2.png)\r\n\r\n    After:\r\n\r\n    ![grafik](https://user-images.githubusercontent.com/705404/46369898-7bcfd180-c684-11e8-8e71-275a7ba45bca.png)\r\n\r\n    #### Release Notes\r\n\r\n    <!-- BEGIN RELEASE NOTES -->\r\n    * printing\r\n      * change from `$$`...`$$` to `$\\displaystyle `...`$` to allow left-aligning in LaTeX documents\r\n    <!-- END RELEASE NOTES -->\r\n\n\n</details><p>\n\nDoes this work across Jupyter, IPython, qt-console, i.e. anything we expecting `init_printing()` to work with? And, will it print correctly in older versions of the mentioned software or just the latest IPython release?\n@moorepants Good question! I'll try a few and will show the results here.\r\n\r\nJupyter Notebook, release 4.0.5 from September 2015:\r\n\r\n![grafik](https://user-images.githubusercontent.com/705404/46372191-b5a3d680-c68a-11e8-8129-0e16ad58d507.png)\r\n\r\nJupyter QtConsole, release 4.0.1 from August 2015: \r\n\r\n![grafik](https://user-images.githubusercontent.com/705404/46372865-9ad26180-c68c-11e8-9701-8a82d540b696.png)\r\n\r\nThat's all for now, what else should be supported?\nFor me the LaTeX in the notebook is already left aligned. Did this change recently? What version of the notebook do you have? \r\n\r\nI know it was broken recently in jupyterlab, but they fixed it https://github.com/jupyterlab/jupyterlab/issues/5107\nOh I see, it only affects the LaTeX conversion. It seems like it would be better to fix this in nbconvert, so that the LaTeX conversion for equations automatically converts it to displaystyle, so that it matches the appearance in the browser. \n@asmeurer Yes, I'm talking about conversion to LaTeX, but I think it actually makes more sense for HTML, too, because MathJax doesn't have to be forced to the left. With this PR the jupyterlab PR https://github.com/jupyterlab/jupyterlab/issues/5107 will become obsolete and should probably be reverted.\r\n\r\nWith \"fix this in nbconvert\", do you mean that `nbconvert` should parse the strings, check which LaTeX delimiters are used and change them to something else? This sounds very brittle to me.\n> @asmeurer Yes, I'm talking about conversion to LaTeX, but I think it actually makes more sense for HTML, too, because MathJax doesn't have to be forced to the left. With this PR the jupyterlab PR jupyterlab/jupyterlab#5107 will become obsolete and should probably be reverted.\r\n\r\nDoesn't the HTML nbconvert produce the exact same output as the notebook running in the browser? If the math is centered there that would definitely be a bug in nbconvert because it isn't in the live notebook.\r\n\r\n> With \"fix this in nbconvert\", do you mean that nbconvert should parse the strings, check which LaTeX delimiters are used and change them to something else? This sounds very brittle to me.\r\n\r\nYes, but only do it specifically for text/latex outputs. It wouldn't be brittle because the notebook is very structured. For instance, here's a cell from a notebook (running `sympy.sqrt(8)`):\r\n\r\n```json\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 3,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAACUAAAAVBAMAAAAzyjqdAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAIpm7MhCriUTv3c12VGZoascqAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA+UlEQVQYGWWQsUoDQRCGvz28mNxdggZstDkipBMC+gAhL+BWFjamsbFRbFKpV9ppq2muUUvxCYLWASVPYGerwWCwucysF4jcwP4z38eyDAsLZTKtzwUDpeQfOtgoKraKzk+LznvLnWlst/NxH+qbOwJ7LE9zd47f5SKBQ7j5c35KyVK5hls4bjsZvVMR/Q0Dq+5SbADhxDmBRxv1pQ3d7WCirfzD2msCqQJXJ5pBFw5a1Bxwr4qGHO+LwCp4sWakacZ8KPDicoRZkX3snVI1ZhWWYiJxu2exug48w3rv9Egg7Otz5qHXTGXnLPsVqo4lCOXrxc3raT7ADIVyN2pPS3LmAAAAAElFTkSuQmCC\\n\",\r\n      \"text/latex\": [\r\n       \"$$2 \\\\sqrt{2}$$\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"2⋅√2\"\r\n      ]\r\n     },\r\n     \"execution_count\": 3,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"import sympy\\n\",\r\n    \"sympy.sqrt(8)\"\r\n   ]\r\n  },\r\n```\r\n\r\nYou can see the LaTeX is in the \"text/latex\" output of \"outputs\", which the notebook renders with MathJax.  So my suggestion is for nbconvert to replace `$$ ... $$` in a `text/latex` output with `$\\displaystyle ... $` as part of its conversion. That will fix all applications that produce LaTeX output to look exactly the same in the pdf conversion as it does in the browser, as opposed to your change that only affects things that use the IPython `Math` class or SymPy specifically. \nI guess one brittle thing is that the notebook uses CSS to force the math to always be left aligned, whereas this would only affect things using `$$`. So you would have to check for other things as well, like `\\[` or even `\\begin{equation}`. I don't know if one can transform things in general just by changing the math code. \r\n\r\nBut maybe the layout can be changed with some code in the LaTeX template for the pdf converter (but again, in such a way that it only affects the math that is part of a text/latex output). I don't know enough LaTeX to know if this is possible, though I suspect it is. \n@asmeurer \r\n\r\n> So my suggestion is for nbconvert to replace `$$ ... $$` in a text/latex output with `$\\displaystyle ... $` as part of its conversion. That will fix all applications that produce LaTeX output to look exactly the same in the pdf conversion as it does in the browser, as opposed to your change that only affects things that use the IPython Math class or SymPy specifically.\r\n\r\nThis suggestion would \"fix\" an error that could be avoided in the first place. Let me illustrate:\r\n\r\nYour suggestion:\r\n\r\n* SymPy/IPython produce `$$...$$`, which doesn't show their intent, because in TeX this shows a centered equation separated from the surrounding text.\r\n\r\n* HTML: MathJax emulates parts of LaTeX and TeX, so it has to be artificially forced to display the thing left-aligned which originally would be centered.\r\n\r\n* LaTeX: The output string has either to be analyzed and re-written with different delimiters or it has to be coaxed into left-aligning with some dark TeX magic.\r\n\r\nMy suggestion:\r\n\r\n* SymPy/IPython should produce `$\\displaystyle ...$`, which is the *natural* way in LaTeX to get left-aligned math that is still not squeezed to fit into a line height.\r\n\r\n* HTML: MathJax emulates LaTeX, so it displays the result as intended\r\n\r\n* LaTeX: Well LaTeX *is* LaTeX, so obviously the result looks as intended\r\n\r\nSure, SymPy and IPython would have to be changed for that, but it is literally a one-line change (see this PR and https://github.com/ipython/ipython/pull/11357/files).\r\n\r\nThe advantage of my suggestion is that it is the *natural* way to do it. If an application/tool/library does it in an unnatural way, it should be changed. Future tools should just do it right in the first place.\r\n\r\nApplications/tools/libraries that show LaTeX output in a natural way will be fine, no change needed. Future tools should again just do the natural thing.\r\n\r\n> Doesn't the HTML nbconvert produce the exact same output as the notebook running in the browser? If the math is centered there that would definitely be a bug in nbconvert because it isn't in the live notebook.\r\n\r\nYes, the HTML generated by `nbconvert` forces MathJax equations to the left (using the CSS class `.MathJax_Display` and `text-align: left !important;`). With my suggestion, it wouldn't need to, but it would still continue to work even without changes.\r\n\r\n> But maybe the layout can be changed with some code in the LaTeX template for the pdf converter\r\n\r\nMaybe. I have no idea how to do this. I think only a TeX expert would be able to pull this off and I guess the TeX code wouldn't be pretty. Does anyone who reads this know how to do that?\r\n\r\nThe problem with your suggestion is that every tool that wants to display notebooks (be it in HTML or LaTeX or whatever else) has to jump through hoops to show LaTeX output. But this would be really simple if the math expressions would use a LaTeX syntax that actually expresses the intent.\nI'd like to hear the thoughts of the Jupyter folks on this one. Your argument is basically that `$$...$$` should be centered, but the notebook makes it left aligned, partly because things like SymPy produce it and it's annoying for those use-cases. I would argue that it's annoying for any math output use-case, and that the notebook is right to make this alignment change. I think we can both agree that regardless which option is chosen the pdfs produced by nbconvert should be formatted the same as the HTML notebook.\r\n\r\nI've opened an upstream issue at https://github.com/jupyter/notebook/issues/4060. Let's move the discussion there.",
  "created_at": "2018-12-13T19:22:03Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_latex_derivatives\", \"test_latex_integrals\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_subs\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Hadamard\", \"test_ZeroMatrix\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_7117\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_14041\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_trace\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.102971",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}