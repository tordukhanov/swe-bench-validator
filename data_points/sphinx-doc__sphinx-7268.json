{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7268",
  "base_commit": "a73617c51b9e29d7f059a2794f4574bb80cfcf57",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1004,7 +1004,7 @@ def can_document_member(cls, member: Any, membername: str, isattr: bool, parent:\n                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))\n \n     def format_args(self, **kwargs: Any) -> str:\n-        if self.env.config.autodoc_typehints == 'none':\n+        if self.env.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n \n         if inspect.isbuiltin(self.object) or inspect.ismethoddescriptor(self.object):\n@@ -1744,7 +1744,8 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_config_value('autodoc_default_options', {}, True)\n     app.add_config_value('autodoc_docstring_signature', True, True)\n     app.add_config_value('autodoc_mock_imports', [], True)\n-    app.add_config_value('autodoc_typehints', \"signature\", True, ENUM(\"signature\", \"none\"))\n+    app.add_config_value('autodoc_typehints', \"signature\", True,\n+                         ENUM(\"signature\", \"description\", \"none\"))\n     app.add_config_value('autodoc_warningiserror', True, True)\n     app.add_config_value('autodoc_inherit_docstrings', True, True)\n     app.add_event('autodoc-before-process-signature')\n@@ -1753,5 +1754,6 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_event('autodoc-skip-member')\n \n     app.setup_extension('sphinx.ext.autodoc.type_comment')\n+    app.setup_extension('sphinx.ext.autodoc.typehints')\n \n     return {'version': sphinx.__display_version__, 'parallel_read_safe': True}\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -18,21 +18,9 @@\n \n from sphinx import addnodes\n from sphinx.application import Sphinx\n-from sphinx.config import Config, ENUM\n from sphinx.util import inspect, typing\n \n \n-def config_inited(app: Sphinx, config: Config) -> None:\n-    if config.autodoc_typehints == 'description':\n-        # HACK: override this to make autodoc suppressing typehints in signatures\n-        config.autodoc_typehints = 'none'  # type: ignore\n-\n-        # preserve user settings\n-        app._autodoc_typehints_description = True  # type: ignore\n-    else:\n-        app._autodoc_typehints_description = False  # type: ignore\n-\n-\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n     \"\"\"Record type hints to env object.\"\"\"\n@@ -53,7 +41,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n     if domain != 'py':\n         return\n-    if app._autodoc_typehints_description is False:  # type: ignore\n+    if app.config.autodoc_typehints != 'description':\n         return\n \n     signature = cast(addnodes.desc_signature, contentnode.parent[0])\n@@ -141,10 +129,6 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\n-    app.setup_extension('sphinx.ext.autodoc')\n-    app.config.values['autodoc_typehints'] = ('signature', True,\n-                                              ENUM(\"signature\", \"description\", \"none\"))\n-    app.connect('config-inited', config_inited)\n     app.connect('autodoc-process-signature', record_typehints)\n     app.connect('object-description-transform', merge_typehints)\n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -462,10 +462,9 @@ def test_mocked_module_imports(app, warning):\n     assert warning.getvalue() == ''\n \n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"signature\"})\n def test_autodoc_typehints_signature(app):\n-    app.config.autodoc_typehints = \"signature\"\n-\n     options = {\"members\": None,\n                \"undoc-members\": True}\n     actual = do_autodoc(app, 'module', 'target.typehints', options)\n@@ -513,10 +512,9 @@ def test_autodoc_typehints_signature(app):\n     ]\n \n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"none\"})\n def test_autodoc_typehints_none(app):\n-    app.config.autodoc_typehints = \"none\"\n-\n     options = {\"members\": None,\n                \"undoc-members\": True}\n     actual = do_autodoc(app, 'module', 'target.typehints', options)\n@@ -564,8 +562,7 @@ def test_autodoc_typehints_none(app):\n \n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n-                    confoverrides={'extensions': ['sphinx.ext.autodoc.typehints'],\n-                                   'autodoc_typehints': 'description'})\n+                    confoverrides={'autodoc_typehints': \"description\"})\n def test_autodoc_typehints_description(app):\n     app.build()\n     context = (app.outdir / 'index.txt').read_text()\n",
  "problem_statement": "autodoc: Load sphinx.ext.autodoc.typehints automatically\nAfter typehints enough matured, it should be loaded automatically from autodoc extension.\r\nrefs: #6418 \n",
  "hints_text": "",
  "created_at": "2020-03-07T04:21:04Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\"]",
  "environment_setup_commit": "50d2d289e150cb429de15770bdd48a723de8c45d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.038884",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}