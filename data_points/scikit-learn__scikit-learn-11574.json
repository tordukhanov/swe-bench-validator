{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-11574",
  "base_commit": "dd69361a0d9c6ccde0d2353b00b86e0e7541a3e3",
  "patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -70,6 +70,10 @@ class IsolationForest(BaseBagging, OutlierMixin):\n         on the decision function. If 'auto', the decision function threshold is\n         determined as in the original paper.\n \n+        .. versionchanged:: 0.20\n+           The default value of ``contamination`` will change from 0.1 in 0.20\n+           to ``'auto'`` in 0.22.\n+\n     max_features : int or float, optional (default=1.0)\n         The number of features to draw from X to train each base estimator.\n \n@@ -150,12 +154,6 @@ def __init__(self,\n             n_jobs=n_jobs,\n             random_state=random_state,\n             verbose=verbose)\n-\n-        if contamination == \"legacy\":\n-            warnings.warn('default contamination parameter 0.1 will change '\n-                          'in version 0.22 to \"auto\". This will change the '\n-                          'predict method behavior.',\n-                          DeprecationWarning)\n         self.contamination = contamination\n \n     def _set_oob_score(self, X, y):\n@@ -178,6 +176,15 @@ def fit(self, X, y=None, sample_weight=None):\n         -------\n         self : object\n         \"\"\"\n+        if self.contamination == \"legacy\":\n+            warnings.warn('default contamination parameter 0.1 will change '\n+                          'in version 0.22 to \"auto\". This will change the '\n+                          'predict method behavior.',\n+                          FutureWarning)\n+            self._contamination = 0.1\n+        else:\n+            self._contamination = self.contamination\n+\n         X = check_array(X, accept_sparse=['csc'])\n         if issparse(X):\n             # Pre-sort indices to avoid that each individual tree of the\n@@ -219,19 +226,16 @@ def fit(self, X, y=None, sample_weight=None):\n                                           max_depth=max_depth,\n                                           sample_weight=sample_weight)\n \n-        if self.contamination == \"auto\":\n+        if self._contamination == \"auto\":\n             # 0.5 plays a special role as described in the original paper.\n             # we take the opposite as we consider the opposite of their score.\n             self.offset_ = -0.5\n             # need to save (depreciated) threshold_ in this case:\n             self._threshold_ = sp.stats.scoreatpercentile(\n                 self.score_samples(X), 100. * 0.1)\n-        elif self.contamination == \"legacy\":  # to be rm in 0.22\n-            self.offset_ = sp.stats.scoreatpercentile(\n-                self.score_samples(X), 100. * 0.1)\n         else:\n             self.offset_ = sp.stats.scoreatpercentile(\n-                self.score_samples(X), 100. * self.contamination)\n+                self.score_samples(X), 100. * self._contamination)\n \n         return self\n \n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -62,6 +62,7 @@ def test_iforest():\n                             **params).fit(X_train).predict(X_test)\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n def test_iforest_sparse():\n     \"\"\"Check IForest for various parameter settings on sparse input.\"\"\"\n     rng = check_random_state(0)\n@@ -89,6 +90,7 @@ def test_iforest_sparse():\n             assert_array_equal(sparse_results, dense_results)\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n def test_iforest_error():\n     \"\"\"Test that it gives proper exception on deficient input.\"\"\"\n     X = iris.data\n@@ -127,6 +129,7 @@ def test_iforest_error():\n     assert_raises(ValueError, IsolationForest().fit(X).predict, X[:, 1:])\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n def test_recalculate_max_depth():\n     \"\"\"Check max_depth recalculation when max_samples is reset to n_samples\"\"\"\n     X = iris.data\n@@ -135,6 +138,7 @@ def test_recalculate_max_depth():\n         assert_equal(est.max_depth, int(np.ceil(np.log2(X.shape[0]))))\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n def test_max_samples_attribute():\n     X = iris.data\n     clf = IsolationForest().fit(X)\n@@ -150,6 +154,7 @@ def test_max_samples_attribute():\n     assert_equal(clf.max_samples_, 0.4*X.shape[0])\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n def test_iforest_parallel_regression():\n     \"\"\"Check parallel regression.\"\"\"\n     rng = check_random_state(0)\n@@ -174,6 +179,7 @@ def test_iforest_parallel_regression():\n     assert_array_almost_equal(y1, y3)\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n def test_iforest_performance():\n     \"\"\"Test Isolation Forest performs well\"\"\"\n \n@@ -213,6 +219,7 @@ def test_iforest_works():\n         assert_array_equal(pred, 6 * [1] + 2 * [-1])\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n def test_max_samples_consistency():\n     # Make sure validated max_samples in iforest and BaseBagging are identical\n     X = iris.data\n@@ -220,6 +227,7 @@ def test_max_samples_consistency():\n     assert_equal(clf.max_samples_, clf._max_samples)\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n def test_iforest_subsampled_features():\n     # It tests non-regression for #5732 which failed at predict.\n     rng = check_random_state(0)\n@@ -244,6 +252,7 @@ def test_iforest_average_path_length():\n                               [1., result_one, result_two], decimal=10)\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n def test_score_samples():\n     X_train = [[1, 1], [1, 2], [2, 1]]\n     clf1 = IsolationForest(contamination=0.1).fit(X_train)\n@@ -257,12 +266,15 @@ def test_score_samples():\n \n \n def test_deprecation():\n-    assert_warns_message(DeprecationWarning,\n+    X = [[0.0], [1.0]]\n+    clf = IsolationForest()\n+\n+    assert_warns_message(FutureWarning,\n                          'default contamination parameter 0.1 will change '\n                          'in version 0.22 to \"auto\"',\n-                         IsolationForest, )\n-    X = [[0.0], [1.0]]\n-    clf = IsolationForest().fit(X)\n+                         clf.fit, X)\n+\n+    clf = IsolationForest(contamination='auto').fit(X)\n     assert_warns_message(DeprecationWarning,\n                          \"threshold_ attribute is deprecated in 0.20 and will\"\n                          \" be removed in 0.22.\",\ndiff --git a/sklearn/linear_model/tests/test_sag.py b/sklearn/linear_model/tests/test_sag.py\n--- a/sklearn/linear_model/tests/test_sag.py\n+++ b/sklearn/linear_model/tests/test_sag.py\n@@ -17,6 +17,7 @@\n from sklearn.utils.extmath import row_norms\n from sklearn.utils.testing import assert_almost_equal\n from sklearn.utils.testing import assert_array_almost_equal\n+from sklearn.utils.testing import assert_allclose\n from sklearn.utils.testing import assert_greater\n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.testing import ignore_warnings\n@@ -269,7 +270,6 @@ def test_classifier_matching():\n         assert_array_almost_equal(intercept2, clf.intercept_, decimal=9)\n \n \n-@ignore_warnings\n def test_regressor_matching():\n     n_samples = 10\n     n_features = 5\n@@ -295,10 +295,10 @@ def test_regressor_matching():\n                                dloss=squared_dloss,\n                                fit_intercept=fit_intercept)\n \n-    assert_array_almost_equal(weights1, clf.coef_, decimal=10)\n-    assert_array_almost_equal(intercept1, clf.intercept_, decimal=10)\n-    assert_array_almost_equal(weights2, clf.coef_, decimal=10)\n-    assert_array_almost_equal(intercept2, clf.intercept_, decimal=10)\n+    assert_allclose(weights1, clf.coef_)\n+    assert_allclose(intercept1, clf.intercept_)\n+    assert_allclose(weights2, clf.coef_)\n+    assert_allclose(intercept2, clf.intercept_)\n \n \n @ignore_warnings\n",
  "problem_statement": "IsolationForest contamination deprecation in __init__ not in fit\nneed to move the deprecation and fix the tests.\n",
  "hints_text": "",
  "created_at": "2018-07-16T22:39:16Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/ensemble/tests/test_iforest.py::test_deprecation\"]",
  "PASS_TO_PASS": "[\"sklearn/ensemble/tests/test_iforest.py::test_iforest\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_sparse\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_error\", \"sklearn/ensemble/tests/test_iforest.py::test_recalculate_max_depth\", \"sklearn/ensemble/tests/test_iforest.py::test_max_samples_attribute\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_parallel_regression\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_performance\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_works\", \"sklearn/ensemble/tests/test_iforest.py::test_max_samples_consistency\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_subsampled_features\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_average_path_length\", \"sklearn/ensemble/tests/test_iforest.py::test_score_samples\", \"sklearn/linear_model/tests/test_sag.py::test_classifier_matching\", \"sklearn/linear_model/tests/test_sag.py::test_regressor_matching\", \"sklearn/linear_model/tests/test_sag.py::test_sag_pobj_matches_logistic_regression\", \"sklearn/linear_model/tests/test_sag.py::test_sag_pobj_matches_ridge_regression\", \"sklearn/linear_model/tests/test_sag.py::test_sag_regressor_computed_correctly\", \"sklearn/linear_model/tests/test_sag.py::test_get_auto_step_size\", \"sklearn/linear_model/tests/test_sag.py::test_sag_regressor\", \"sklearn/linear_model/tests/test_sag.py::test_sag_classifier_computed_correctly\", \"sklearn/linear_model/tests/test_sag.py::test_sag_multiclass_computed_correctly\", \"sklearn/linear_model/tests/test_sag.py::test_classifier_results\", \"sklearn/linear_model/tests/test_sag.py::test_binary_classifier_class_weight\", \"sklearn/linear_model/tests/test_sag.py::test_multiclass_classifier_class_weight\", \"sklearn/linear_model/tests/test_sag.py::test_classifier_single_class\", \"sklearn/linear_model/tests/test_sag.py::test_step_size_alpha_error\", \"sklearn/linear_model/tests/test_sag.py::test_multinomial_loss\", \"sklearn/linear_model/tests/test_sag.py::test_multinomial_loss_ground_truth\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.962840",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}