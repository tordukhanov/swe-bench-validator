{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9128",
  "base_commit": "dfdc7626b5dd06bff3d326e6efddc492ef00c471",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -68,7 +68,7 @@ class ObjectEntry(NamedTuple):\n     docname: str\n     node_id: str\n     objtype: str\n-    canonical: bool\n+    aliased: bool\n \n \n class ModuleEntry(NamedTuple):\n@@ -505,7 +505,7 @@ def add_target_and_index(self, name_cls: Tuple[str, str], sig: str,\n \n         canonical_name = self.options.get('canonical')\n         if canonical_name:\n-            domain.note_object(canonical_name, self.objtype, node_id, canonical=True,\n+            domain.note_object(canonical_name, self.objtype, node_id, aliased=True,\n                                location=signode)\n \n         if 'noindexentry' not in self.options:\n@@ -1138,17 +1138,25 @@ def objects(self) -> Dict[str, ObjectEntry]:\n         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry\n \n     def note_object(self, name: str, objtype: str, node_id: str,\n-                    canonical: bool = False, location: Any = None) -> None:\n+                    aliased: bool = False, location: Any = None) -> None:\n         \"\"\"Note a python object for cross reference.\n \n         .. versionadded:: 2.1\n         \"\"\"\n         if name in self.objects:\n             other = self.objects[name]\n-            logger.warning(__('duplicate object description of %s, '\n-                              'other instance in %s, use :noindex: for one of them'),\n-                           name, other.docname, location=location)\n-        self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, canonical)\n+            if other.aliased and aliased is False:\n+                # The original definition found. Override it!\n+                pass\n+            elif other.aliased is False and aliased:\n+                # The original definition is already registered.\n+                return\n+            else:\n+                # duplicated\n+                logger.warning(__('duplicate object description of %s, '\n+                                  'other instance in %s, use :noindex: for one of them'),\n+                               name, other.docname, location=location)\n+        self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)\n \n     @property\n     def modules(self) -> Dict[str, ModuleEntry]:\n@@ -1326,8 +1334,8 @@ def get_objects(self) -> Iterator[Tuple[str, str, str, str, str, int]]:\n             yield (modname, modname, 'module', mod.docname, mod.node_id, 0)\n         for refname, obj in self.objects.items():\n             if obj.objtype != 'module':  # modules are already handled\n-                if obj.canonical:\n-                    # canonical names are not full-text searchable.\n+                if obj.aliased:\n+                    # aliased names are not full-text searchable.\n                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, -1)\n                 else:\n                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)\n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -870,6 +870,39 @@ def test_canonical(app):\n     assert domain.objects['_io.StringIO'] == ('index', 'io.StringIO', 'class', True)\n \n \n+def test_canonical_definition_overrides(app, warning):\n+    text = (\".. py:class:: io.StringIO\\n\"\n+            \"   :canonical: _io.StringIO\\n\"\n+            \".. py:class:: _io.StringIO\\n\")\n+    restructuredtext.parse(app, text)\n+    assert warning.getvalue() == \"\"\n+\n+    domain = app.env.get_domain('py')\n+    assert domain.objects['_io.StringIO'] == ('index', 'id0', 'class', False)\n+\n+\n+def test_canonical_definition_skip(app, warning):\n+    text = (\".. py:class:: _io.StringIO\\n\"\n+            \".. py:class:: io.StringIO\\n\"\n+            \"   :canonical: _io.StringIO\\n\")\n+\n+    restructuredtext.parse(app, text)\n+    assert warning.getvalue() == \"\"\n+\n+    domain = app.env.get_domain('py')\n+    assert domain.objects['_io.StringIO'] == ('index', 'io.StringIO', 'class', False)\n+\n+\n+def test_canonical_duplicated(app, warning):\n+    text = (\".. py:class:: mypackage.StringIO\\n\"\n+            \"   :canonical: _io.StringIO\\n\"\n+            \".. py:class:: io.StringIO\\n\"\n+            \"   :canonical: _io.StringIO\\n\")\n+\n+    restructuredtext.parse(app, text)\n+    assert warning.getvalue() != \"\"\n+\n+\n def test_info_field_list(app):\n     text = (\".. py:module:: example\\n\"\n             \".. py:class:: Class\\n\"\n",
  "problem_statement": "autodoc: duplication warning on documenting aliased object\n**Describe the bug**\r\nautodoc: duplication warning on documenting aliased object\r\n\r\n**To Reproduce**\r\n```\r\n# example.py\r\nfrom io import StringIO\r\n```\r\n```\r\n# index.rst\r\n.. autoclass:: example.StringIO\r\n.. autoclass:: io.StringIO\r\n```\r\n```\r\nRemoving everything under '_build'...\r\nRunning Sphinx v4.0.0+/dfdc7626b\r\nmaking output directory... done\r\n[autosummary] generating autosummary for: index.rst\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [html]: targets for 1 source files that are out of date\r\nupdating environment: [new config] 1 added, 0 changed, 0 removed\r\nreading sources... [100%] index\r\ndocstring of _io.StringIO:1: WARNING: duplicate object description of _io.StringIO, other instance in index, use :noindex: for one of them\r\nlooking for now-outdated files... none found\r\npickling environment... done\r\nchecking consistency... done\r\npreparing documents... done\r\nwriting output... [100%] index\r\ngenerating indices... genindex done\r\nwriting additional pages... search done\r\ncopying static files... done\r\ncopying extra files... done\r\ndumping search index in English (code: en)... done\r\ndumping object inventory... done\r\nbuild succeeded, 1 warning.\r\n\r\nThe HTML pages are in _build/html.\r\n```\r\n\r\n**Expected behavior**\r\nNo warning\r\n\r\n**Your project**\r\nN/A\r\n\r\n**Screenshots**\r\nN/A\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.9.4\r\n- Sphinx version: HEAD of 4.0.x\r\n- Sphinx extensions: sphinx.ext.autodoc\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n",
  "hints_text": "I noticed the example is not good. Both `example.StringIO` and `io.StringIO` are aliases of `_io.StringIO`. So they're surely conflicted.\r\n\r\nIt would be better to not emit a warning for this case:\r\n```\r\n.. autoclass:: _io.StringIO\r\n.. autoclass:: io.StringIO\r\n```\r\n\r\nThe former one is a canonical name of the `io.StringIO`. So this should not be conflicted.",
  "created_at": "2021-04-22T16:21:25Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_canonical_definition_overrides\", \"tests/test_domain_py.py::test_canonical_definition_skip\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_xrefs_abbreviations\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_pyfunction_with_union_type_operator\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_exceptions_module_is_ignored\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pydata_with_union_type_operator\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pyproperty\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_canonical\", \"tests/test_domain_py.py::test_canonical_duplicated\", \"tests/test_domain_py.py::test_info_field_list\", \"tests/test_domain_py.py::test_info_field_list_var\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled\", \"tests/test_domain_py.py::test_warn_missing_reference\"]",
  "environment_setup_commit": "8939a75efaa911a12dbe6edccedf261e88bf7eef",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.062681",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}