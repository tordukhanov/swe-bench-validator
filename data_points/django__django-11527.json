{
  "repo": "django/django",
  "instance_id": "django__django-11527",
  "base_commit": "c2f381ef17058e5cfea58ae507983d2e459a2888",
  "patch": "diff --git a/django/core/management/commands/sqlflush.py b/django/core/management/commands/sqlflush.py\n--- a/django/core/management/commands/sqlflush.py\n+++ b/django/core/management/commands/sqlflush.py\n@@ -19,4 +19,7 @@ def add_arguments(self, parser):\n         )\n \n     def handle(self, **options):\n-        return '\\n'.join(sql_flush(self.style, connections[options['database']], only_django=True))\n+        sql_statements = sql_flush(self.style, connections[options['database']], only_django=True)\n+        if not sql_statements and options['verbosity'] >= 1:\n+            self.stderr.write('No tables found.')\n+        return '\\n'.join(sql_statements)\ndiff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -63,4 +63,6 @@ def handle(self, *args, **options):\n         # for it\n         plan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])]\n         sql_statements = executor.collect_sql(plan)\n+        if not sql_statements and options['verbosity'] >= 1:\n+            self.stderr.write('No operations found.')\n         return '\\n'.join(sql_statements)\ndiff --git a/django/core/management/commands/sqlsequencereset.py b/django/core/management/commands/sqlsequencereset.py\n--- a/django/core/management/commands/sqlsequencereset.py\n+++ b/django/core/management/commands/sqlsequencereset.py\n@@ -20,4 +20,6 @@ def handle_app_config(self, app_config, **options):\n         connection = connections[options['database']]\n         models = app_config.get_models(include_auto_created=True)\n         statements = connection.ops.sequence_reset_sql(self.style, models)\n+        if not statements and options['verbosity'] >= 1:\n+            self.stderr.write('No sequences found.')\n         return '\\n'.join(statements)\n",
  "test_patch": "diff --git a/tests/empty_models/__init__.py b/tests/empty_models/__init__.py\nnew file mode 100644\ndiff --git a/tests/empty_models/models.py b/tests/empty_models/models.py\nnew file mode 100644\ndiff --git a/tests/empty_models/test_commands.py b/tests/empty_models/test_commands.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/empty_models/test_commands.py\n@@ -0,0 +1,18 @@\n+import io\n+\n+from django.core.management import call_command\n+from django.test import TestCase\n+\n+\n+class CoreCommandsNoOutputTests(TestCase):\n+    available_apps = ['empty_models']\n+\n+    def test_sqlflush_no_tables(self):\n+        err = io.StringIO()\n+        call_command('sqlflush', stderr=err)\n+        self.assertEqual(err.getvalue(), 'No tables found.\\n')\n+\n+    def test_sqlsequencereset_no_sequences(self):\n+        err = io.StringIO()\n+        call_command('sqlsequencereset', 'empty_models', stderr=err)\n+        self.assertEqual(err.getvalue(), 'No sequences found.\\n')\ndiff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -645,6 +645,12 @@ def test_sqlmigrate_for_non_transactional_databases(self):\n             self.assertNotIn(start_transaction_sql.lower(), queries)\n         self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_operations'})\n+    def test_migrations_no_operations(self):\n+        err = io.StringIO()\n+        call_command('sqlmigrate', 'migrations', '0001_initial', stderr=err)\n+        self.assertEqual(err.getvalue(), 'No operations found.\\n')\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"migrations.migrations_test_apps.migrated_app\",\ndiff --git a/tests/migrations/test_migrations_no_operations/0001_initial.py b/tests/migrations/test_migrations_no_operations/0001_initial.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/migrations/test_migrations_no_operations/0001_initial.py\n@@ -0,0 +1,6 @@\n+from django.db import migrations\n+\n+\n+class Migration(migrations.Migration):\n+    dependencies = []\n+    operations = []\ndiff --git a/tests/migrations/test_migrations_no_operations/__init__.py b/tests/migrations/test_migrations_no_operations/__init__.py\nnew file mode 100644\n",
  "problem_statement": "sqlsequencereset should inform that no sequences found.\nDescription\n\t\nThis just came up on IRC, because someone was expecting sqlsequencereset to provide resets for the auto-increment values for an SQLite table.\nRunning python manage.py sqlsequencereset <myapp> provides no output if there are no results returned by connection.ops.sequence_reset_sql (see â€‹here)\nSo the user has no idea if it failed, succeeded, or they got the invocation wrong (assuming they're not familiar enough with Django to know that invoking it wrong will raise a CommandError).\nI'd suggest it should avoid ambiguity, so if len(statements) == 0 it should raise CommandError and say there's nothing to do. Bonus points if it also sniffs the connection backend to know if there is anything it could do, and if there's not, report that sqlsequencereset isn't necessary/available for that backend.\n",
  "hints_text": "Thanks for the report. I don't think that sqlsequencereset should raise CommandError, but I agree that we can add an extra output if we don't find any sequences, e.g. if not statements and self.verbosity >= 1: self.stdout.write('No sequences found.')\nOne problem I foresee with outputting a message when no sequences are found is that it could break scripts piping the output into a SQL shell or simply expecting STDOUT to be valid SQL. I guess we could output an SQL comment of the form -- No sequences found or use STDERR instead? Also I don't see why sqlsequencereset is special with regards to other sql* commands that also have the same behavior; it should either not be changed or changed for all sql* commands to be coherent.",
  "created_at": "2019-06-29T23:44:21Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_sqlflush_no_tables (empty_models.test_commands.CoreCommandsNoOutputTests)\", \"test_sqlsequencereset_no_sequences (empty_models.test_commands.CoreCommandsNoOutputTests)\", \"test_migrations_no_operations (migrations.test_commands.MigrateTests)\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_optimizes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)\", \"Migration directories without an __init__.py file are allowed.\", \"test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_ambigious_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate (migrations.test_commands.MigrateTests)\", \"test_migrate_conflict_exit (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)\", \"test_migrate_initial_false (migrations.test_commands.MigrateTests)\", \"Tests migrate --plan output.\", \"test_migrate_record_replaced (migrations.test_commands.MigrateTests)\", \"test_migrate_record_squashed (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_label (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)\", \"test_showmigrations_list (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_transactional_databases (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.575035",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}