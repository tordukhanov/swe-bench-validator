{
  "repo": "django/django",
  "instance_id": "django__django-14089",
  "base_commit": "d01709aae21de9cd2565b9c52f32732ea28a2d98",
  "patch": "diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py\n--- a/django/utils/datastructures.py\n+++ b/django/utils/datastructures.py\n@@ -25,6 +25,9 @@ def discard(self, item):\n     def __iter__(self):\n         return iter(self.dict)\n \n+    def __reversed__(self):\n+        return reversed(self.dict)\n+\n     def __contains__(self, item):\n         return item in self.dict\n \n",
  "test_patch": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,7 +1,7 @@\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n-\n+import collections.abc\n import copy\n import pickle\n \n@@ -34,6 +34,11 @@ def test_discard(self):\n         s.discard(2)\n         self.assertEqual(len(s), 1)\n \n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n     def test_contains(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "problem_statement": "Allow calling reversed() on an OrderedSet\nDescription\n\t\nCurrently, â€‹OrderedSet isn't reversible (i.e. allowed to be passed as an argument to Python's â€‹reversed()). This would be natural to support given that OrderedSet is ordered. This should be straightforward to add by adding a __reversed__() method to OrderedSet.\n",
  "hints_text": "",
  "created_at": "2021-03-06T20:51:08Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_reversed (utils_tests.test_datastructures.OrderedSetTests)\"]",
  "PASS_TO_PASS": "[\"test_copy (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_create_with_invalid_key (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_create_with_invalid_values (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_del (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_dict (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_equal (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_getitem (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_in (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_items (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_list (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_repr (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_set (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_str (utils_tests.test_datastructures.CaseInsensitiveMappingTests)\", \"test_dictwrapper (utils_tests.test_datastructures.DictWrapperTests)\", \"test_custom_warning (utils_tests.test_datastructures.ImmutableListTests)\", \"test_sort (utils_tests.test_datastructures.ImmutableListTests)\", \"test_bool (utils_tests.test_datastructures.OrderedSetTests)\", \"test_contains (utils_tests.test_datastructures.OrderedSetTests)\", \"test_discard (utils_tests.test_datastructures.OrderedSetTests)\", \"test_init_with_iterable (utils_tests.test_datastructures.OrderedSetTests)\", \"test_len (utils_tests.test_datastructures.OrderedSetTests)\", \"test_remove (utils_tests.test_datastructures.OrderedSetTests)\", \"test_appendlist (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_copy (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_deepcopy (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_dict_translation (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_getlist_default (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_getlist_doesnt_mutate (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_getlist_none_empty_values (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_internal_getlist_does_mutate (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_multivaluedict (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_pickle (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_repr (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_setdefault (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_setitem (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_update_dict_arg (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_update_kwargs (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_update_multivaluedict_arg (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_update_no_args (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_update_raises_correct_exceptions (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_update_too_many_args (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_update_with_empty_iterable (utils_tests.test_datastructures.MultiValueDictTests)\", \"test_update_with_iterable_of_pairs (utils_tests.test_datastructures.MultiValueDictTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.681164",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}