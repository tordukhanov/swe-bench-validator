{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13253",
  "base_commit": "04a5733b86bba57a48520b97b9c0a5cd325a1b9a",
  "patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -38,27 +38,48 @@ def _check_X(self, X):\n         - convert list of strings to object dtype\n         - check for missing values for object dtype data (check_array does\n           not do that)\n+        - return list of features (arrays): this list of features is\n+          constructed feature by feature to preserve the data types\n+          of pandas DataFrame columns, as otherwise information is lost\n+          and cannot be used, eg for the `categories_` attribute.\n \n         \"\"\"\n-        X_temp = check_array(X, dtype=None)\n-        if not hasattr(X, 'dtype') and np.issubdtype(X_temp.dtype, np.str_):\n-            X = check_array(X, dtype=np.object)\n+        if not (hasattr(X, 'iloc') and getattr(X, 'ndim', 0) == 2):\n+            # if not a dataframe, do normal check_array validation\n+            X_temp = check_array(X, dtype=None)\n+            if (not hasattr(X, 'dtype')\n+                    and np.issubdtype(X_temp.dtype, np.str_)):\n+                X = check_array(X, dtype=np.object)\n+            else:\n+                X = X_temp\n+            needs_validation = False\n         else:\n-            X = X_temp\n+            # pandas dataframe, do validation later column by column, in order\n+            # to keep the dtype information to be used in the encoder.\n+            needs_validation = True\n \n-        return X\n+        n_samples, n_features = X.shape\n+        X_columns = []\n \n-    def _fit(self, X, handle_unknown='error'):\n-        X = self._check_X(X)\n+        for i in range(n_features):\n+            Xi = self._get_feature(X, feature_idx=i)\n+            Xi = check_array(Xi, ensure_2d=False, dtype=None,\n+                             force_all_finite=needs_validation)\n+            X_columns.append(Xi)\n \n-        n_samples, n_features = X.shape\n+        return X_columns, n_samples, n_features\n+\n+    def _get_feature(self, X, feature_idx):\n+        if hasattr(X, 'iloc'):\n+            # pandas dataframes\n+            return X.iloc[:, feature_idx]\n+        # numpy arrays, sparse arrays\n+        return X[:, feature_idx]\n+\n+    def _fit(self, X, handle_unknown='error'):\n+        X_list, n_samples, n_features = self._check_X(X)\n \n         if self._categories != 'auto':\n-            if X.dtype != object:\n-                for cats in self._categories:\n-                    if not np.all(np.sort(cats) == np.array(cats)):\n-                        raise ValueError(\"Unsorted categories are not \"\n-                                         \"supported for numerical categories\")\n             if len(self._categories) != n_features:\n                 raise ValueError(\"Shape mismatch: if n_values is an array,\"\n                                  \" it has to be of shape (n_features,).\")\n@@ -66,11 +87,15 @@ def _fit(self, X, handle_unknown='error'):\n         self.categories_ = []\n \n         for i in range(n_features):\n-            Xi = X[:, i]\n+            Xi = X_list[i]\n             if self._categories == 'auto':\n                 cats = _encode(Xi)\n             else:\n-                cats = np.array(self._categories[i], dtype=X.dtype)\n+                cats = np.array(self._categories[i], dtype=Xi.dtype)\n+                if Xi.dtype != object:\n+                    if not np.all(np.sort(cats) == cats):\n+                        raise ValueError(\"Unsorted categories are not \"\n+                                         \"supported for numerical categories\")\n                 if handle_unknown == 'error':\n                     diff = _encode_check_unknown(Xi, cats)\n                     if diff:\n@@ -80,14 +105,13 @@ def _fit(self, X, handle_unknown='error'):\n             self.categories_.append(cats)\n \n     def _transform(self, X, handle_unknown='error'):\n-        X = self._check_X(X)\n+        X_list, n_samples, n_features = self._check_X(X)\n \n-        _, n_features = X.shape\n-        X_int = np.zeros_like(X, dtype=np.int)\n-        X_mask = np.ones_like(X, dtype=np.bool)\n+        X_int = np.zeros((n_samples, n_features), dtype=np.int)\n+        X_mask = np.ones((n_samples, n_features), dtype=np.bool)\n \n         for i in range(n_features):\n-            Xi = X[:, i]\n+            Xi = X_list[i]\n             diff, valid_mask = _encode_check_unknown(Xi, self.categories_[i],\n                                                      return_mask=True)\n \n",
  "test_patch": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -431,6 +431,30 @@ def test_one_hot_encoder_inverse(sparse_, drop):\n     assert_raises_regex(ValueError, msg, enc.inverse_transform, X_tr)\n \n \n+@pytest.mark.parametrize(\"method\", ['fit', 'fit_transform'])\n+@pytest.mark.parametrize(\"X\", [\n+    [1, 2],\n+    np.array([3., 4.])\n+    ])\n+def test_X_is_not_1D(X, method):\n+    oh = OneHotEncoder()\n+\n+    msg = (\"Expected 2D array, got 1D array instead\")\n+    with pytest.raises(ValueError, match=msg):\n+        getattr(oh, method)(X)\n+\n+\n+@pytest.mark.parametrize(\"method\", ['fit', 'fit_transform'])\n+def test_X_is_not_1D_pandas(method):\n+    pd = pytest.importorskip('pandas')\n+    X = pd.Series([6, 3, 4, 6])\n+    oh = OneHotEncoder()\n+\n+    msg = (\"Expected 2D array, got 1D array instead\")\n+    with pytest.raises(ValueError, match=msg):\n+        getattr(oh, method)(X)\n+\n+\n @pytest.mark.parametrize(\"X, cat_exp, cat_dtype\", [\n     ([['abc', 55], ['def', 55]], [['abc', 'def'], [55]], np.object_),\n     (np.array([[1, 2], [3, 2]]), [[1, 3], [2]], np.integer),\n@@ -569,8 +593,14 @@ def test_one_hot_encoder_feature_names_unicode():\n @pytest.mark.parametrize(\"X\", [np.array([[1, np.nan]]).T,\n                                np.array([['a', np.nan]], dtype=object).T],\n                          ids=['numeric', 'object'])\n+@pytest.mark.parametrize(\"as_data_frame\", [False, True],\n+                         ids=['array', 'dataframe'])\n @pytest.mark.parametrize(\"handle_unknown\", ['error', 'ignore'])\n-def test_one_hot_encoder_raise_missing(X, handle_unknown):\n+def test_one_hot_encoder_raise_missing(X, as_data_frame, handle_unknown):\n+    if as_data_frame:\n+        pd = pytest.importorskip('pandas')\n+        X = pd.DataFrame(X)\n+\n     ohe = OneHotEncoder(categories='auto', handle_unknown=handle_unknown)\n \n     with pytest.raises(ValueError, match=\"Input contains NaN\"):\n@@ -579,7 +609,12 @@ def test_one_hot_encoder_raise_missing(X, handle_unknown):\n     with pytest.raises(ValueError, match=\"Input contains NaN\"):\n         ohe.fit_transform(X)\n \n-    ohe.fit(X[:1, :])\n+    if as_data_frame:\n+        X_partial = X.iloc[:1, :]\n+    else:\n+        X_partial = X[:1, :]\n+\n+    ohe.fit(X_partial)\n \n     with pytest.raises(ValueError, match=\"Input contains NaN\"):\n         ohe.transform(X)\n@@ -688,16 +723,18 @@ def test_encoder_dtypes_pandas():\n     pd = pytest.importorskip('pandas')\n \n     enc = OneHotEncoder(categories='auto')\n-    exp = np.array([[1., 0., 1., 0.], [0., 1., 0., 1.]], dtype='float64')\n+    exp = np.array([[1., 0., 1., 0., 1., 0.],\n+                    [0., 1., 0., 1., 0., 1.]], dtype='float64')\n \n-    X = pd.DataFrame({'A': [1, 2], 'B': [3, 4]}, dtype='int64')\n+    X = pd.DataFrame({'A': [1, 2], 'B': [3, 4], 'C': [5, 6]}, dtype='int64')\n     enc.fit(X)\n     assert all([enc.categories_[i].dtype == 'int64' for i in range(2)])\n     assert_array_equal(enc.transform(X).toarray(), exp)\n \n-    X = pd.DataFrame({'A': [1, 2], 'B': ['a', 'b']})\n+    X = pd.DataFrame({'A': [1, 2], 'B': ['a', 'b'], 'C': [3., 4.]})\n+    X_type = [int, object, float]\n     enc.fit(X)\n-    assert all([enc.categories_[i].dtype == 'object' for i in range(2)])\n+    assert all([enc.categories_[i].dtype == X_type[i] for i in range(3)])\n     assert_array_equal(enc.transform(X).toarray(), exp)\n \n \n",
  "problem_statement": "ENH: support DataFrames in OneHot/OrdinalEncoder without converting to array\nLeft-over to do from https://github.com/scikit-learn/scikit-learn/pull/9151#issuecomment-343306766\r\n\r\nIdea is to support DataFrames without converting to a contiguous array. This conversion is not needed, as the transformer encodes the input column by column anyway, so it would be rather easy to preserve the datatypes per column. \r\n\r\nThis would avoid converting a potentially mixed-dtype DataFrame (eg ints and object strings) to a full object array.\r\n\r\nThis can introduces a slight change in behaviour (it can change the `dtype` of the `categories_` in certain edge cases, eg when you had a mixture of float and int columns).\r\n\r\n(Note that is not yet necessarily means to have special handling for certain pandas dtypes such as categorical dtype, see https://github.com/scikit-learn/scikit-learn/issues/12086, in an initial step, we could still do a `check_array` on each column / coerce each column to a numpy array).\n",
  "hints_text": "If there is no-one working on this issue I can do it.\r\n\r\nBy the way, I believe pandas supports one hot encoding found [this](https://stackoverflow.com/questions/37292872/how-can-i-one-hot-encode-in-python) on StackOverflow \r\n\r\nWhat are your thoughts on detecting that it is a pandas dataframe and using pandas native encoder ? \nI don't think we want to use `pd.get_dummies` for now (assuming you are referring to that). Even apart from the question if we would want to depend on it, it does not give us everything that would be needed for the OneHotEncoder (eg specifying categories per column, handling unknown values, etc).\r\n\r\nBut feel free to work on this! \nPerfect I'll work on this !\nJust to add, one key challenge when returning an array is mapping feature importances back to the original column names when you've applied OneHotEncoder.\r\n\r\nIt would be a big step forward to replace the prefixes `x0_`, `x1_`, etc with the proper column names.\r\n\r\nSee https://stackoverflow.com/q/54570947/3217870\nWe will try to tackle this one during the sprints in Paris this week.",
  "created_at": "2019-02-25T15:12:08Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/preprocessing/tests/test_encoders.py::test_encoder_dtypes_pandas\"]",
  "PASS_TO_PASS": "[\"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_sparse\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dense\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_deprecationwarnings\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_force_new_behaviour\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categorical_features\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categorical_features_ignore_unknown\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_handle_unknown\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_not_fitted\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_no_categorical_features\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_handle_unknown_strings\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-int32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-float32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-float64]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-int32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-float32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-float64]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-int32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-float32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-float64]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[int32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[float32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[float64]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_set_params\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[mixed]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[None-False]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[None-True]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[first-False]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[first-True]\", \"sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X0-fit]\", \"sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X0-fit_transform]\", \"sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X1-fit]\", \"sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X1-fit_transform]\", \"sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D_pandas[fit]\", \"sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D_pandas[fit_transform]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[mixed]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[string]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[object-string-cat]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_unsorted_categories\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories_mixed_columns\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_pandas\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names_unicode\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-array-numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-array-object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-dataframe-numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-dataframe-object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-array-numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-array-object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-dataframe-numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-dataframe-object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[mixed]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[object-string-cat]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_inverse\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_missing[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_missing[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_encoder_dtypes\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_warning\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_drop_manual\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_invalid_params\", \"sklearn/preprocessing/tests/test_encoders.py::test_invalid_drop_length[drop0]\", \"sklearn/preprocessing/tests/test_encoders.py::test_invalid_drop_length[drop1]\", \"sklearn/preprocessing/tests/test_encoders.py::test_categories[first-sparse]\", \"sklearn/preprocessing/tests/test_encoders.py::test_categories[first-dense]\", \"sklearn/preprocessing/tests/test_encoders.py::test_categories[manual-sparse]\", \"sklearn/preprocessing/tests/test_encoders.py::test_categories[manual-dense]\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.991307",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}