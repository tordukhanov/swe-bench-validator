{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-20816",
  "base_commit": "586fcffaae03e40f851c5bc854de290b89bae18e",
  "patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -122,7 +122,8 @@ def _weak_or_strong_ref(func, callback):\n \n class CallbackRegistry:\n     \"\"\"\n-    Handle registering and disconnecting for a set of signals and callbacks:\n+    Handle registering, processing, blocking, and disconnecting\n+    for a set of signals and callbacks:\n \n         >>> def oneat(x):\n         ...    print('eat', x)\n@@ -140,9 +141,15 @@ class CallbackRegistry:\n         >>> callbacks.process('eat', 456)\n         eat 456\n         >>> callbacks.process('be merry', 456) # nothing will be called\n+\n         >>> callbacks.disconnect(id_eat)\n         >>> callbacks.process('eat', 456)      # nothing will be called\n \n+        >>> with callbacks.blocked(signal='drink'):\n+        ...     callbacks.process('drink', 123) # nothing will be called\n+        >>> callbacks.process('drink', 123)\n+        drink 123\n+\n     In practice, one should always disconnect all callbacks when they are\n     no longer needed to avoid dangling references (and thus memory leaks).\n     However, real code in Matplotlib rarely does so, and due to its design,\n@@ -280,6 +287,31 @@ def process(self, s, *args, **kwargs):\n                     else:\n                         raise\n \n+    @contextlib.contextmanager\n+    def blocked(self, *, signal=None):\n+        \"\"\"\n+        Block callback signals from being processed.\n+\n+        A context manager to temporarily block/disable callback signals\n+        from being processed by the registered listeners.\n+\n+        Parameters\n+        ----------\n+        signal : str, optional\n+            The callback signal to block. The default is to block all signals.\n+        \"\"\"\n+        orig = self.callbacks\n+        try:\n+            if signal is None:\n+                # Empty out the callbacks\n+                self.callbacks = {}\n+            else:\n+                # Only remove the specific signal\n+                self.callbacks = {k: orig[k] for k in orig if k != signal}\n+            yield\n+        finally:\n+            self.callbacks = orig\n+\n \n class silent_list(list):\n     \"\"\"\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_cbook.py b/lib/matplotlib/tests/test_cbook.py\n--- a/lib/matplotlib/tests/test_cbook.py\n+++ b/lib/matplotlib/tests/test_cbook.py\n@@ -361,6 +361,39 @@ def test_callbackregistry_custom_exception_handler(monkeypatch, cb, excp):\n         cb.process('foo')\n \n \n+def test_callbackregistry_blocking():\n+    # Needs an exception handler for interactive testing environments\n+    # that would only print this out instead of raising the exception\n+    def raise_handler(excp):\n+        raise excp\n+    cb = cbook.CallbackRegistry(exception_handler=raise_handler)\n+    def test_func1():\n+        raise ValueError(\"1 should be blocked\")\n+    def test_func2():\n+        raise ValueError(\"2 should be blocked\")\n+    cb.connect(\"test1\", test_func1)\n+    cb.connect(\"test2\", test_func2)\n+\n+    # block all of the callbacks to make sure they aren't processed\n+    with cb.blocked():\n+        cb.process(\"test1\")\n+        cb.process(\"test2\")\n+\n+    # block individual callbacks to make sure the other is still processed\n+    with cb.blocked(signal=\"test1\"):\n+        # Blocked\n+        cb.process(\"test1\")\n+        # Should raise\n+        with pytest.raises(ValueError, match=\"2 should be blocked\"):\n+            cb.process(\"test2\")\n+\n+    # Make sure the original callback functions are there after blocking\n+    with pytest.raises(ValueError, match=\"1 should be blocked\"):\n+        cb.process(\"test1\")\n+    with pytest.raises(ValueError, match=\"2 should be blocked\"):\n+        cb.process(\"test2\")\n+\n+\n def test_sanitize_sequence():\n     d = {'a': 1, 'b': 2, 'c': 3}\n     k = ['a', 'b', 'c']\n",
  "problem_statement": "Add ability to disable callbacks temporarily\nIt may be useful to update some attributes on an object that has callbacks temporarily and we don't want those callback signals being processed during that time.\r\n\r\nI guess we could add a `disabling_callbacks()` context manager on CallbackRegistry?\r\n```python\r\nwith self.norm.callbacks.disabling_callbacks(), cbook._setattr_cm(self.norm, ...): ...\r\n```\r\n\r\n_Originally posted by @anntzer in https://github.com/matplotlib/matplotlib/pull/19553#discussion_r684096220_\n",
  "hints_text": "Naming suggestion: `callbacks_disabled()` or even only `disabled()`:\r\n```\r\nwith self.norm.callbacks.disabled():\r\n```\r\n\nIn Qt, this is `Widget->blockSignals`, and in GTK, it is `g_signal_handlers_block_*`. Wx has a `wxEventBlocker` that you add on a widget to temporarily stop events. Not sure if Tk has anything similar.\r\n\r\nIOW, it seems like 'block' is the common term for this for events, though I don't know if these callbacks qualify as 'events'.",
  "created_at": "2021-08-10T03:57:25Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_blocking\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_bad_first_arg\", \"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_string_seq\", \"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_datetime\", \"lib/matplotlib/tests/test_cbook.py::Test_delete_masked_points::test_rgba\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_bad_dims\", \"lib/matplotlib/tests/test_cbook.py::Test_boxplot_stats::test_boxplot_stats_autorange_false\", \"lib/matplotlib/tests/test_cbook.py::Test_callback_registry::test_pickling\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_default_exception_handler\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_custom_exception_handler[cb0-RuntimeError]\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_custom_exception_handler[cb1-TestException]\", \"lib/matplotlib/tests/test_cbook.py::test_callbackregistry_custom_exception_handler[cb2-ValueError]\", \"lib/matplotlib/tests/test_cbook.py::test_sanitize_sequence\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_fail[inp0-kwargs_to_norm0]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_fail[inp1-kwargs_to_norm1]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_pass[None-expected0-kwargs_to_norm0]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_pass[inp1-expected1-kwargs_to_norm1]\", \"lib/matplotlib/tests/test_cbook.py::test_normalize_kwargs_pass[inp2-expected2-kwargs_to_norm2]\", \"lib/matplotlib/tests/test_cbook.py::test_warn_external_frame_embedded_python\", \"lib/matplotlib/tests/test_cbook.py::test_to_prestep\", \"lib/matplotlib/tests/test_cbook.py::test_to_prestep_empty\", \"lib/matplotlib/tests/test_cbook.py::test_to_poststep\", \"lib/matplotlib/tests/test_cbook.py::test_to_poststep_empty\", \"lib/matplotlib/tests/test_cbook.py::test_to_midstep\", \"lib/matplotlib/tests/test_cbook.py::test_to_midstep_empty\", \"lib/matplotlib/tests/test_cbook.py::test_step_fails[args0]\", \"lib/matplotlib/tests/test_cbook.py::test_step_fails[args1]\", \"lib/matplotlib/tests/test_cbook.py::test_step_fails[args2]\", \"lib/matplotlib/tests/test_cbook.py::test_grouper\", \"lib/matplotlib/tests/test_cbook.py::test_grouper_private\", \"lib/matplotlib/tests/test_cbook.py::test_flatiter\", \"lib/matplotlib/tests/test_cbook.py::test_reshape2d\", \"lib/matplotlib/tests/test_cbook.py::test_reshape2d_pandas\", \"lib/matplotlib/tests/test_cbook.py::test_contiguous_regions\", \"lib/matplotlib/tests/test_cbook.py::test_safe_first_element_pandas_series\", \"lib/matplotlib/tests/test_cbook.py::test_warn_external\", \"lib/matplotlib/tests/test_cbook.py::test_array_patch_perimeters\", \"lib/matplotlib/tests/test_cbook.py::test_setattr_cm\", \"lib/matplotlib/tests/test_cbook.py::test_format_approx\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.791299",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}