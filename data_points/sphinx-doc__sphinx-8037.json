{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8037",
  "base_commit": "0cfb433b25c085071ea46c3ecf8e84f17228643f",
  "patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -6250,23 +6250,18 @@ def parser() -> ASTExpression:\n \n     # ==========================================================================\n \n-    def _parse_template_parameter_list(self) -> ASTTemplateParams:\n-        # only: '<' parameter-list '>'\n-        # we assume that 'template' has just been parsed\n-        templateParams = []  # type: List[ASTTemplateParam]\n-        self.skip_ws()\n-        if not self.skip_string(\"<\"):\n-            self.fail(\"Expected '<' after 'template'\")\n-        prevErrors = []\n-        while 1:\n-            self.skip_ws()\n-            if self.skip_word('template'):\n-                # declare a tenplate template parameter\n-                nestedParams = self._parse_template_parameter_list()\n-            else:\n-                nestedParams = None\n-            self.skip_ws()\n+    def _parse_template_paramter(self) -> ASTTemplateParam:\n+        if self.skip_word('template'):\n+            # declare a tenplate template parameter\n+            nestedParams = self._parse_template_parameter_list()\n+        else:\n+            nestedParams = None\n+\n+        pos = self.pos\n+        try:\n+            # Unconstrained type parameter or template type parameter\n             key = None\n+            self.skip_ws()\n             if self.skip_word_and_ws('typename'):\n                 key = 'typename'\n             elif self.skip_word_and_ws('class'):\n@@ -6274,52 +6269,79 @@ def _parse_template_parameter_list(self) -> ASTTemplateParams:\n             elif nestedParams:\n                 self.fail(\"Expected 'typename' or 'class' after \"\n                           \"template template parameter list.\")\n-            if key:\n-                # declare a type or template type parameter\n-                self.skip_ws()\n-                parameterPack = self.skip_string('...')\n-                self.skip_ws()\n-                if self.match(identifier_re):\n-                    identifier = ASTIdentifier(self.matched_text)\n-                else:\n-                    identifier = None\n-                self.skip_ws()\n-                if not parameterPack and self.skip_string('='):\n-                    default = self._parse_type(named=False, outer=None)\n-                else:\n-                    default = None\n-                data = ASTTemplateKeyParamPackIdDefault(key, identifier,\n-                                                        parameterPack, default)\n-                if nestedParams:\n-                    # template type\n-                    templateParams.append(\n-                        ASTTemplateParamTemplateType(nestedParams, data))\n-                else:\n-                    # type\n-                    templateParams.append(ASTTemplateParamType(data))\n             else:\n-                # declare a non-type parameter, or constrained type parameter\n-                pos = self.pos\n-                try:\n-                    param = self._parse_type_with_init('maybe', 'templateParam')\n-                    templateParams.append(ASTTemplateParamNonType(param))\n-                except DefinitionError as e:\n-                    msg = \"If non-type template parameter or constrained template parameter\"\n-                    prevErrors.append((e, msg))\n-                    self.pos = pos\n+                self.fail(\"Expected 'typename' or 'class' in tbe \"\n+                          \"beginning of template type parameter.\")\n+            self.skip_ws()\n+            parameterPack = self.skip_string('...')\n+            self.skip_ws()\n+            if self.match(identifier_re):\n+                identifier = ASTIdentifier(self.matched_text)\n+            else:\n+                identifier = None\n+            self.skip_ws()\n+            if not parameterPack and self.skip_string('='):\n+                default = self._parse_type(named=False, outer=None)\n+            else:\n+                default = None\n+                if self.current_char not in ',>':\n+                    self.fail('Expected \",\" or \">\" after (template) type parameter.')\n+            data = ASTTemplateKeyParamPackIdDefault(key, identifier,\n+                                                    parameterPack, default)\n+            if nestedParams:\n+                return ASTTemplateParamTemplateType(nestedParams, data)\n+            else:\n+                return ASTTemplateParamType(data)\n+        except DefinitionError as eType:\n+            if nestedParams:\n+                raise\n+            try:\n+                # non-type parameter or constrained type parameter\n+                self.pos = pos\n+                param = self._parse_type_with_init('maybe', 'templateParam')\n+                return ASTTemplateParamNonType(param)\n+            except DefinitionError as eNonType:\n+                self.pos = pos\n+                header = \"Error when parsing template parameter.\"\n+                errs = []\n+                errs.append(\n+                    (eType, \"If unconstrained type parameter or template type parameter\"))\n+                errs.append(\n+                    (eNonType, \"If constrained type parameter or non-type parameter\"))\n+                raise self._make_multi_error(errs, header)\n+\n+    def _parse_template_parameter_list(self) -> ASTTemplateParams:\n+        # only: '<' parameter-list '>'\n+        # we assume that 'template' has just been parsed\n+        templateParams = []  # type: List[ASTTemplateParam]\n+        self.skip_ws()\n+        if not self.skip_string(\"<\"):\n+            self.fail(\"Expected '<' after 'template'\")\n+        while 1:\n+            pos = self.pos\n+            err = None\n+            try:\n+                param = self._parse_template_paramter()\n+                templateParams.append(param)\n+            except DefinitionError as eParam:\n+                self.pos = pos\n+                err = eParam\n             self.skip_ws()\n             if self.skip_string('>'):\n                 return ASTTemplateParams(templateParams)\n             elif self.skip_string(','):\n-                prevErrors = []\n                 continue\n             else:\n                 header = \"Error in template parameter list.\"\n+                errs = []\n+                if err:\n+                    errs.append((err, \"If parameter\"))\n                 try:\n-                    self.fail('Expected \"=\", \",\", or \">\".')\n+                    self.fail('Expected \",\" or \">\".')\n                 except DefinitionError as e:\n-                    prevErrors.append((e, \"\"))\n-                raise self._make_multi_error(prevErrors, header)\n+                    errs.append((e, \"If no parameter\"))\n+                print(errs)\n+                raise self._make_multi_error(errs, header)\n \n     def _parse_template_introduction(self) -> ASTTemplateIntroduction:\n         pos = self.pos\n",
  "test_patch": "diff --git a/tests/test_domain_cpp.py b/tests/test_domain_cpp.py\n--- a/tests/test_domain_cpp.py\n+++ b/tests/test_domain_cpp.py\n@@ -760,6 +760,7 @@ def test_templates():\n     check('class', \"template<typename T = Test> {key}A\", {2: \"I0E1A\"})\n \n     check('class', \"template<template<typename> typename T> {key}A\", {2: \"II0E0E1A\"})\n+    check('class', \"template<template<typename> class T> {key}A\", {2: \"II0E0E1A\"})\n     check('class', \"template<template<typename> typename> {key}A\", {2: \"II0E0E1A\"})\n     check('class', \"template<template<typename> typename ...T> {key}A\", {2: \"II0EDpE1A\"})\n     check('class', \"template<template<typename> typename...> {key}A\", {2: \"II0EDpE1A\"})\n@@ -770,6 +771,16 @@ def test_templates():\n     check('class', \"template<int T = 42> {key}A\", {2: \"I_iE1A\"})\n     check('class', \"template<int = 42> {key}A\", {2: \"I_iE1A\"})\n \n+    check('class', \"template<typename A<B>::C> {key}A\", {2: \"I_N1AI1BE1CEE1A\"})\n+    check('class', \"template<typename A<B>::C = 42> {key}A\", {2: \"I_N1AI1BE1CEE1A\"})\n+    # from #7944\n+    check('function', \"template<typename T, \"\n+                      \"typename std::enable_if<!has_overloaded_addressof<T>::value, bool>::type = false\"\n+                      \"> constexpr T *static_addressof(T &ref)\",\n+          {2: \"I0_NSt9enable_ifIX!has_overloaded_addressof<T>::valueEbE4typeEE16static_addressofR1T\",\n+           3: \"I0_NSt9enable_ifIXntN24has_overloaded_addressofI1TE5valueEEbE4typeEE16static_addressofR1T\",\n+           4: \"I0_NSt9enable_ifIXntN24has_overloaded_addressofI1TE5valueEEbE4typeEE16static_addressofP1TR1T\"})\n+\n     check('class', \"template<> {key}A<NS::B<>>\", {2: \"IE1AIN2NS1BIEEE\"})\n \n     # from #2058\n",
  "problem_statement": "sphinx.util.cfamily.DefinitionError: Error in template parameter list.\n**Describe the bug**\r\nI appear to have some valid C++14 syntax which causes Sphinx's C++ parser to choke. Here is the full error trace:\r\n\r\n```\r\n# Sphinx version: 3.1.2\r\n# Python version: 3.7.4 (CPython)\r\n# Docutils version: 0.16 release\r\n# Jinja2 version: 2.11.2\r\n# Last messages:\r\n#   reading sources... [ 36%] api/function_namespacec10_1_1detail_1a0ae4a0b76b5203a055ad8e184734a642\r\n#   reading sources... [ 36%] api/function_namespacec10_1_1detail_1a38bac4f70cbe3e60b11e84a4af793018\r\n#   reading sources... [ 37%] api/function_namespacec10_1_1detail_1a63a885be061e64e85482d1bc657d9eab\r\n#   reading sources... [ 37%] api/function_namespacec10_1_1detail_1a7fd879319c4690483b10f7377cdc0c14\r\n#   reading sources... [ 37%] api/function_namespacec10_1_1detail_1aa26558d64e565f26516bd99850b6df8f\r\n#   reading sources... [ 37%] api/function_namespacec10_1_1detail_1aba4bf15cd6c6b43bb04a70f67dd5dd98\r\n#   reading sources... [ 37%] api/function_namespacec10_1_1detail_1ae289a3f407b2fe02ae5012a59b453f8f\r\n#   reading sources... [ 37%] api/function_namespacec10_1_1detail_1af0966c5849fbf09f16675056a0bd7bda\r\n#   reading sources... [ 37%] api/function_namespacec10_1_1detail_1af8326a119322305e6244a45e6acd2ecc\r\n#   reading sources... [ 37%] api/function_namespacec10_1_1detail___1a8657ebe87695069950896d52bf3504ca\r\n# Loaded extensions:\r\n#   sphinx.ext.mathjax (3.1.2) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/ext/mathjax.py\r\n#   sphinxcontrib.applehelp (1.0.2) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinxcontrib/applehelp/__init__.py\r\n#   sphinxcontrib.devhelp (1.0.2) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinxcontrib/devhelp/__init__.py\r\n#   sphinxcontrib.htmlhelp (1.0.3) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinxcontrib/htmlhelp/__init__.py\r\n#   sphinxcontrib.serializinghtml (1.1.4) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinxcontrib/serializinghtml/__init__.py\r\n#   sphinxcontrib.qthelp (1.0.3) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinxcontrib/qthelp/__init__.py\r\n#   alabaster (0.7.12) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/alabaster/__init__.py\r\n#   sphinx.ext.intersphinx (3.1.2) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/ext/intersphinx.py\r\n#   breathe (4.19.2) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/breathe/__init__.py\r\n#   exhale (0.2.3) from /Users/ezyang/miniconda3/lib/python3.7/site-packages/exhale/__init__.py\r\n#   pytorch_sphinx_theme (unknown version) from /Users/ezyang/Dev/pytorch-tmp/docs/cpp/src/pytorch-sphinx-theme/pytorch_sphinx_theme/__init__.py\r\nTraceback (most recent call last):\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/cmd/build.py\", line 280, in build_main\r\n    app.build(args.force_all, filenames)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/application.py\", line 348, in build\r\n    self.builder.build_update()\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/builders/__init__.py\", line 299, in build_update\r\n    len(to_build))\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/builders/__init__.py\", line 311, in build\r\n    updated_docnames = set(self.read())\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/builders/__init__.py\", line 418, in read\r\n    self._read_serial(docnames)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/builders/__init__.py\", line 439, in _read_serial\r\n    self.read_doc(docname)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/builders/__init__.py\", line 479, in read_doc\r\n    doctree = read_doc(self.app, self.env, self.env.doc2path(docname))\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/io.py\", line 221, in read_doc\r\n    pub.publish()\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/core.py\", line 218, in publish\r\n    self.settings)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/io.py\", line 126, in read\r\n    self.parse()\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/readers/__init__.py\", line 77, in parse\r\n    self.parser.parse(self.input, document)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/parsers.py\", line 102, in parse\r\n    self.statemachine.run(inputlines, document, inliner=self.inliner)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 171, in run\r\n    input_source=document['source'])\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/statemachine.py\", line 242, in run\r\n    context, state, transitions)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/statemachine.py\", line 459, in check_line\r\n    return method(match, context, next_state)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 2769, in underline\r\n    self.section(title, source, style, lineno - 1, messages)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 327, in section\r\n    self.new_subsection(title, lineno, messages)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 395, in new_subsection\r\n    node=section_node, match_titles=True)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 282, in nested_parse\r\n    node=node, match_titles=match_titles)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 196, in run\r\n    results = StateMachineWS.run(self, input_lines, input_offset)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/statemachine.py\", line 242, in run\r\n    context, state, transitions)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/statemachine.py\", line 459, in check_line\r\n    return method(match, context, next_state)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 2769, in underline\r\n    self.section(title, source, style, lineno - 1, messages)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 327, in section\r\n    self.new_subsection(title, lineno, messages)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 395, in new_subsection\r\n    node=section_node, match_titles=True)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 282, in nested_parse\r\n    node=node, match_titles=match_titles)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 196, in run\r\n    results = StateMachineWS.run(self, input_lines, input_offset)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/statemachine.py\", line 242, in run\r\n    context, state, transitions)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/statemachine.py\", line 459, in check_line\r\n    return method(match, context, next_state)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 2342, in explicit_markup\r\n    nodelist, blank_finish = self.explicit_construct(match)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 2354, in explicit_construct\r\n    return method(self, expmatch)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 2097, in directive\r\n    directive_class, match, type_name, option_presets)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/docutils/parsers/rst/states.py\", line 2146, in run_directive\r\n    result = directive_instance.run()\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/breathe/directives.py\", line 99, in run\r\n    node_stack = self.resolve_function(matches, args, project_info)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/breathe/directives.py\", line 239, in resolve_function\r\n    mask_factory, directive_args)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/breathe/directives.py\", line 212, in create_function_signature\r\n    ast = parser.parse_declaration('function', 'function')\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/domains/cpp.py\", line 6492, in parse_declaration\r\n    templatePrefix = self._parse_template_declaration_prefix(objectType)\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/domains/cpp.py\", line 6418, in _parse_template_declaration_prefix\r\n    raise e\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/domains/cpp.py\", line 6413, in _parse_template_declaration_prefix\r\n    params = self._parse_template_parameter_list()\r\n  File \"/Users/ezyang/miniconda3/lib/python3.7/site-packages/sphinx/domains/cpp.py\", line 6310, in _parse_template_parameter_list\r\n    raise self._make_multi_error(prevErrors, header)\r\nsphinx.util.cfamily.DefinitionError: Error in template parameter list.\r\nInvalid C++ declaration: Expected \"=\", \",\", or \">\". [error at 33]\r\n  template<typename T, typename std::enable_if< !has_overloaded_addressof< T > ::value, bool >::type = false> constexpr T * static_addressof (T &ref)\r\n  ---------------------------------^\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n$ git clone https://github.com/ezyang/pytorch -b poc/sphinx-failure\r\n$ cd pytorch/docs/cpp\r\n$ pip install -r requirements.txt\r\n$ make html\r\n```\r\n\r\n**Expected behavior**\r\nBuild should succeed\r\n\r\n\n",
  "hints_text": "Thanks for reporting. I believe it's because the parser assumes that every template parameter that starts with ``typename`` must be a type parameter. Your example clearly illustrates this is not always the case.",
  "created_at": "2020-08-02T08:38:10Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"tests/test_domain_cpp.py::test_templates\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_cpp.py::test_fundamental_types\", \"tests/test_domain_cpp.py::test_expressions\", \"tests/test_domain_cpp.py::test_type_definitions\", \"tests/test_domain_cpp.py::test_concept_definitions\", \"tests/test_domain_cpp.py::test_member_definitions\", \"tests/test_domain_cpp.py::test_function_definitions\", \"tests/test_domain_cpp.py::test_operators\", \"tests/test_domain_cpp.py::test_nested_name\", \"tests/test_domain_cpp.py::test_class_definitions\", \"tests/test_domain_cpp.py::test_union_definitions\", \"tests/test_domain_cpp.py::test_enum_definitions\", \"tests/test_domain_cpp.py::test_anon_definitions\", \"tests/test_domain_cpp.py::test_requires_clauses\", \"tests/test_domain_cpp.py::test_template_args\", \"tests/test_domain_cpp.py::test_initializers\", \"tests/test_domain_cpp.py::test_attributes\", \"tests/test_domain_cpp.py::test_xref_parsing\", \"tests/test_domain_cpp.py::test_build_domain_cpp_multi_decl_lookup\", \"tests/test_domain_cpp.py::test_build_domain_cpp_warn_template_param_qualified_name\", \"tests/test_domain_cpp.py::test_build_domain_cpp_backslash_ok\", \"tests/test_domain_cpp.py::test_build_domain_cpp_semicolon\", \"tests/test_domain_cpp.py::test_build_domain_cpp_anon_dup_decl\", \"tests/test_domain_cpp.py::test_build_domain_cpp_misuse_of_roles\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_True\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_False\", \"tests/test_domain_cpp.py::test_xref_consistency\", \"tests/test_domain_cpp.py::test_noindexentry\"]",
  "environment_setup_commit": "f92fa6443fe6f457ab0c26d41eb229e825fda5e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.050812",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}