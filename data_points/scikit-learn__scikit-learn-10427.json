{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10427",
  "base_commit": "cc50b90034a9cda77a8aabedc8a853fe92de60b5",
  "patch": "diff --git a/sklearn/datasets/base.py b/sklearn/datasets/base.py\n--- a/sklearn/datasets/base.py\n+++ b/sklearn/datasets/base.py\n@@ -767,16 +767,9 @@ def load_sample_images():\n     >>> first_img_data.dtype               #doctest: +SKIP\n     dtype('uint8')\n     \"\"\"\n-    # Try to import imread from scipy. We do this lazily here to prevent\n-    # this module from depending on PIL.\n-    try:\n-        try:\n-            from scipy.misc import imread\n-        except ImportError:\n-            from scipy.misc.pilutil import imread\n-    except ImportError:\n-        raise ImportError(\"The Python Imaging Library (PIL) \"\n-                          \"is required to load data from jpeg files\")\n+    # import PIL only when needed\n+    from ..externals._pilutil import imread\n+\n     module_path = join(dirname(__file__), \"images\")\n     with open(join(module_path, 'README.txt')) as f:\n         descr = f.read()\ndiff --git a/sklearn/datasets/lfw.py b/sklearn/datasets/lfw.py\n--- a/sklearn/datasets/lfw.py\n+++ b/sklearn/datasets/lfw.py\n@@ -32,7 +32,6 @@\n from .base import get_data_home, _fetch_remote, RemoteFileMetadata\n from ..utils import Bunch\n from ..externals.joblib import Memory\n-\n from ..externals.six import b\n \n logger = logging.getLogger(__name__)\n@@ -136,18 +135,8 @@ def check_fetch_lfw(data_home=None, funneled=True, download_if_missing=True):\n \n def _load_imgs(file_paths, slice_, color, resize):\n     \"\"\"Internally used to load images\"\"\"\n-\n-    # Try to import imread and imresize from PIL. We do this here to prevent\n-    # the whole sklearn.datasets module from depending on PIL.\n-    try:\n-        try:\n-            from scipy.misc import imread\n-        except ImportError:\n-            from scipy.misc.pilutil import imread\n-        from scipy.misc import imresize\n-    except ImportError:\n-        raise ImportError(\"The Python Imaging Library (PIL)\"\n-                          \" is required to load data from jpeg files\")\n+    # import PIL only when needed\n+    from ..externals._pilutil import imread, imresize\n \n     # compute the portion of the images to load to respect the slice_ parameter\n     # given by the caller\ndiff --git a/sklearn/externals/_pilutil.py b/sklearn/externals/_pilutil.py\nnew file mode 100644\n--- /dev/null\n+++ b/sklearn/externals/_pilutil.py\n@@ -0,0 +1,498 @@\n+\"\"\"\n+A collection of image utilities using the Python Imaging Library (PIL).\n+\n+This is a local version of utility functions from scipy that are wrapping PIL\n+functionality. These functions are deprecated in scipy 1.0.0 and will be\n+removed in scipy 1.2.0. Therefore, the functionality used in sklearn is copied\n+here. This file is taken from scipy/misc/pilutil.py in scipy\n+1.0.0. Modifications include: making this module importable if pillow is not\n+installed, removal of DeprecationWarning, removal of functions scikit-learn\n+does not need.\n+\n+Copyright (c) 2001, 2002 Enthought, Inc.\n+All rights reserved.\n+\n+Copyright (c) 2003-2017 SciPy Developers.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+  a. Redistributions of source code must retain the above copyright notice,\n+     this list of conditions and the following disclaimer.\n+  b. Redistributions in binary form must reproduce the above copyright\n+     notice, this list of conditions and the following disclaimer in the\n+     documentation and/or other materials provided with the distribution.\n+  c. Neither the name of Enthought nor the names of the SciPy Developers\n+     may be used to endorse or promote products derived from this software\n+     without specific prior written permission.\n+\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS\n+BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n+OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+THE POSSIBILITY OF SUCH DAMAGE.\n+\"\"\"\n+from __future__ import division, print_function, absolute_import\n+\n+\n+import numpy\n+import tempfile\n+\n+from numpy import (amin, amax, ravel, asarray, arange, ones, newaxis,\n+                   transpose, iscomplexobj, uint8, issubdtype, array)\n+\n+# Modification of original scipy pilutil.py to make this module importable if\n+# pillow is not installed. If pillow is not installed, functions will raise\n+# ImportError when called.\n+try:\n+    try:\n+        from PIL import Image\n+    except ImportError:\n+        import Image\n+    pillow_installed = True\n+    if not hasattr(Image, 'frombytes'):\n+        Image.frombytes = Image.fromstring\n+except ImportError:\n+    pillow_installed = False\n+\n+__all__ = ['bytescale', 'imread', 'imsave', 'fromimage', 'toimage', 'imresize']\n+\n+\n+def bytescale(data, cmin=None, cmax=None, high=255, low=0):\n+    \"\"\"\n+    Byte scales an array (image).\n+\n+    Byte scaling means converting the input image to uint8 dtype and scaling\n+    the range to ``(low, high)`` (default 0-255).\n+    If the input image already has dtype uint8, no scaling is done.\n+\n+    This function is only available if Python Imaging Library (PIL) is installed.\n+\n+    Parameters\n+    ----------\n+    data : ndarray\n+        PIL image data array.\n+    cmin : scalar, optional\n+        Bias scaling of small values. Default is ``data.min()``.\n+    cmax : scalar, optional\n+        Bias scaling of large values. Default is ``data.max()``.\n+    high : scalar, optional\n+        Scale max value to `high`.  Default is 255.\n+    low : scalar, optional\n+        Scale min value to `low`.  Default is 0.\n+\n+    Returns\n+    -------\n+    img_array : uint8 ndarray\n+        The byte-scaled array.\n+\n+    Examples\n+    --------\n+    >>> from scipy.misc import bytescale\n+    >>> img = np.array([[ 91.06794177,   3.39058326,  84.4221549 ],\n+    ...                 [ 73.88003259,  80.91433048,   4.88878881],\n+    ...                 [ 51.53875334,  34.45808177,  27.5873488 ]])\n+    >>> bytescale(img)\n+    array([[255,   0, 236],\n+           [205, 225,   4],\n+           [140,  90,  70]], dtype=uint8)\n+    >>> bytescale(img, high=200, low=100)\n+    array([[200, 100, 192],\n+           [180, 188, 102],\n+           [155, 135, 128]], dtype=uint8)\n+    >>> bytescale(img, cmin=0, cmax=255)\n+    array([[91,  3, 84],\n+           [74, 81,  5],\n+           [52, 34, 28]], dtype=uint8)\n+\n+    \"\"\"\n+    if data.dtype == uint8:\n+        return data\n+\n+    if high > 255:\n+        raise ValueError(\"`high` should be less than or equal to 255.\")\n+    if low < 0:\n+        raise ValueError(\"`low` should be greater than or equal to 0.\")\n+    if high < low:\n+        raise ValueError(\"`high` should be greater than or equal to `low`.\")\n+\n+    if cmin is None:\n+        cmin = data.min()\n+    if cmax is None:\n+        cmax = data.max()\n+\n+    cscale = cmax - cmin\n+    if cscale < 0:\n+        raise ValueError(\"`cmax` should be larger than `cmin`.\")\n+    elif cscale == 0:\n+        cscale = 1\n+\n+    scale = float(high - low) / cscale\n+    bytedata = (data - cmin) * scale + low\n+    return (bytedata.clip(low, high) + 0.5).astype(uint8)\n+\n+\n+def imread(name, flatten=False, mode=None):\n+    \"\"\"\n+    Read an image from a file as an array.\n+\n+    This function is only available if Python Imaging Library (PIL) is installed.\n+\n+    Parameters\n+    ----------\n+    name : str or file object\n+        The file name or file object to be read.\n+    flatten : bool, optional\n+        If True, flattens the color layers into a single gray-scale layer.\n+    mode : str, optional\n+        Mode to convert image to, e.g. ``'RGB'``.  See the Notes for more\n+        details.\n+\n+    Returns\n+    -------\n+    imread : ndarray\n+        The array obtained by reading the image.\n+\n+    Notes\n+    -----\n+    `imread` uses the Python Imaging Library (PIL) to read an image.\n+    The following notes are from the PIL documentation.\n+\n+    `mode` can be one of the following strings:\n+\n+    * 'L' (8-bit pixels, black and white)\n+    * 'P' (8-bit pixels, mapped to any other mode using a color palette)\n+    * 'RGB' (3x8-bit pixels, true color)\n+    * 'RGBA' (4x8-bit pixels, true color with transparency mask)\n+    * 'CMYK' (4x8-bit pixels, color separation)\n+    * 'YCbCr' (3x8-bit pixels, color video format)\n+    * 'I' (32-bit signed integer pixels)\n+    * 'F' (32-bit floating point pixels)\n+\n+    PIL also provides limited support for a few special modes, including\n+    'LA' ('L' with alpha), 'RGBX' (true color with padding) and 'RGBa'\n+    (true color with premultiplied alpha).\n+\n+    When translating a color image to black and white (mode 'L', 'I' or\n+    'F'), the library uses the ITU-R 601-2 luma transform::\n+\n+        L = R * 299/1000 + G * 587/1000 + B * 114/1000\n+\n+    When `flatten` is True, the image is converted using mode 'F'.\n+    When `mode` is not None and `flatten` is True, the image is first\n+    converted according to `mode`, and the result is then flattened using\n+    mode 'F'.\n+\n+    \"\"\"\n+    if not pillow_installed:\n+        raise ImportError(\"The Python Imaging Library (PIL) \"\n+                          \"is required to load data from jpeg files\")\n+\n+    im = Image.open(name)\n+    return fromimage(im, flatten=flatten, mode=mode)\n+\n+\n+def imsave(name, arr, format=None):\n+    \"\"\"\n+    Save an array as an image.\n+\n+    This function is only available if Python Imaging Library (PIL) is installed.\n+\n+    .. warning::\n+\n+        This function uses `bytescale` under the hood to rescale images to use\n+        the full (0, 255) range if ``mode`` is one of ``None, 'L', 'P', 'l'``.\n+        It will also cast data for 2-D images to ``uint32`` for ``mode=None``\n+        (which is the default).\n+\n+    Parameters\n+    ----------\n+    name : str or file object\n+        Output file name or file object.\n+    arr : ndarray, MxN or MxNx3 or MxNx4\n+        Array containing image values.  If the shape is ``MxN``, the array\n+        represents a grey-level image.  Shape ``MxNx3`` stores the red, green\n+        and blue bands along the last dimension.  An alpha layer may be\n+        included, specified as the last colour band of an ``MxNx4`` array.\n+    format : str\n+        Image format. If omitted, the format to use is determined from the\n+        file name extension. If a file object was used instead of a file name,\n+        this parameter should always be used.\n+\n+    Examples\n+    --------\n+    Construct an array of gradient intensity values and save to file:\n+\n+    >>> from scipy.misc import imsave\n+    >>> x = np.zeros((255, 255))\n+    >>> x = np.zeros((255, 255), dtype=np.uint8)\n+    >>> x[:] = np.arange(255)\n+    >>> imsave('gradient.png', x)\n+\n+    Construct an array with three colour bands (R, G, B) and store to file:\n+\n+    >>> rgb = np.zeros((255, 255, 3), dtype=np.uint8)\n+    >>> rgb[..., 0] = np.arange(255)\n+    >>> rgb[..., 1] = 55\n+    >>> rgb[..., 2] = 1 - np.arange(255)\n+    >>> imsave('rgb_gradient.png', rgb)\n+\n+    \"\"\"\n+    im = toimage(arr, channel_axis=2)\n+    if format is None:\n+        im.save(name)\n+    else:\n+        im.save(name, format)\n+    return\n+\n+\n+def fromimage(im, flatten=False, mode=None):\n+    \"\"\"\n+    Return a copy of a PIL image as a numpy array.\n+\n+    This function is only available if Python Imaging Library (PIL) is installed.\n+\n+    Parameters\n+    ----------\n+    im : PIL image\n+        Input image.\n+    flatten : bool\n+        If true, convert the output to grey-scale.\n+    mode : str, optional\n+        Mode to convert image to, e.g. ``'RGB'``.  See the Notes of the\n+        `imread` docstring for more details.\n+\n+    Returns\n+    -------\n+    fromimage : ndarray\n+        The different colour bands/channels are stored in the\n+        third dimension, such that a grey-image is MxN, an\n+        RGB-image MxNx3 and an RGBA-image MxNx4.\n+\n+    \"\"\"\n+    if not pillow_installed:\n+        raise ImportError(\"The Python Imaging Library (PIL) \"\n+                          \"is required to load data from jpeg files\")\n+\n+    if not Image.isImageType(im):\n+        raise TypeError(\"Input is not a PIL image.\")\n+\n+    if mode is not None:\n+        if mode != im.mode:\n+            im = im.convert(mode)\n+    elif im.mode == 'P':\n+        # Mode 'P' means there is an indexed \"palette\".  If we leave the mode\n+        # as 'P', then when we do `a = array(im)` below, `a` will be a 2-D\n+        # containing the indices into the palette, and not a 3-D array\n+        # containing the RGB or RGBA values.\n+        if 'transparency' in im.info:\n+            im = im.convert('RGBA')\n+        else:\n+            im = im.convert('RGB')\n+\n+    if flatten:\n+        im = im.convert('F')\n+    elif im.mode == '1':\n+        # Workaround for crash in PIL. When im is 1-bit, the call array(im)\n+        # can cause a seg. fault, or generate garbage. See\n+        # https://github.com/scipy/scipy/issues/2138 and\n+        # https://github.com/python-pillow/Pillow/issues/350.\n+        #\n+        # This converts im from a 1-bit image to an 8-bit image.\n+        im = im.convert('L')\n+\n+    a = array(im)\n+    return a\n+\n+_errstr = \"Mode is unknown or incompatible with input array shape.\"\n+\n+\n+def toimage(arr, high=255, low=0, cmin=None, cmax=None, pal=None,\n+            mode=None, channel_axis=None):\n+    \"\"\"Takes a numpy array and returns a PIL image.\n+\n+    This function is only available if Python Imaging Library (PIL) is installed.\n+\n+    The mode of the PIL image depends on the array shape and the `pal` and\n+    `mode` keywords.\n+\n+    For 2-D arrays, if `pal` is a valid (N,3) byte-array giving the RGB values\n+    (from 0 to 255) then ``mode='P'``, otherwise ``mode='L'``, unless mode\n+    is given as 'F' or 'I' in which case a float and/or integer array is made.\n+\n+    .. warning::\n+\n+        This function uses `bytescale` under the hood to rescale images to use\n+        the full (0, 255) range if ``mode`` is one of ``None, 'L', 'P', 'l'``.\n+        It will also cast data for 2-D images to ``uint32`` for ``mode=None``\n+        (which is the default).\n+\n+    Notes\n+    -----\n+    For 3-D arrays, the `channel_axis` argument tells which dimension of the\n+    array holds the channel data.\n+\n+    For 3-D arrays if one of the dimensions is 3, the mode is 'RGB'\n+    by default or 'YCbCr' if selected.\n+\n+    The numpy array must be either 2 dimensional or 3 dimensional.\n+\n+    \"\"\"\n+    if not pillow_installed:\n+        raise ImportError(\"The Python Imaging Library (PIL) \"\n+                          \"is required to load data from jpeg files\")\n+\n+    data = asarray(arr)\n+    if iscomplexobj(data):\n+        raise ValueError(\"Cannot convert a complex-valued array.\")\n+    shape = list(data.shape)\n+    valid = len(shape) == 2 or ((len(shape) == 3) and\n+                                ((3 in shape) or (4 in shape)))\n+    if not valid:\n+        raise ValueError(\"'arr' does not have a suitable array shape for \"\n+                         \"any mode.\")\n+    if len(shape) == 2:\n+        shape = (shape[1], shape[0])  # columns show up first\n+        if mode == 'F':\n+            data32 = data.astype(numpy.float32)\n+            image = Image.frombytes(mode, shape, data32.tostring())\n+            return image\n+        if mode in [None, 'L', 'P']:\n+            bytedata = bytescale(data, high=high, low=low,\n+                                 cmin=cmin, cmax=cmax)\n+            image = Image.frombytes('L', shape, bytedata.tostring())\n+            if pal is not None:\n+                image.putpalette(asarray(pal, dtype=uint8).tostring())\n+                # Becomes a mode='P' automagically.\n+            elif mode == 'P':  # default gray-scale\n+                pal = (arange(0, 256, 1, dtype=uint8)[:, newaxis] *\n+                       ones((3,), dtype=uint8)[newaxis, :])\n+                image.putpalette(asarray(pal, dtype=uint8).tostring())\n+            return image\n+        if mode == '1':  # high input gives threshold for 1\n+            bytedata = (data > high)\n+            image = Image.frombytes('1', shape, bytedata.tostring())\n+            return image\n+        if cmin is None:\n+            cmin = amin(ravel(data))\n+        if cmax is None:\n+            cmax = amax(ravel(data))\n+        data = (data*1.0 - cmin)*(high - low)/(cmax - cmin) + low\n+        if mode == 'I':\n+            data32 = data.astype(numpy.uint32)\n+            image = Image.frombytes(mode, shape, data32.tostring())\n+        else:\n+            raise ValueError(_errstr)\n+        return image\n+\n+    # if here then 3-d array with a 3 or a 4 in the shape length.\n+    # Check for 3 in datacube shape --- 'RGB' or 'YCbCr'\n+    if channel_axis is None:\n+        if (3 in shape):\n+            ca = numpy.flatnonzero(asarray(shape) == 3)[0]\n+        else:\n+            ca = numpy.flatnonzero(asarray(shape) == 4)\n+            if len(ca):\n+                ca = ca[0]\n+            else:\n+                raise ValueError(\"Could not find channel dimension.\")\n+    else:\n+        ca = channel_axis\n+\n+    numch = shape[ca]\n+    if numch not in [3, 4]:\n+        raise ValueError(\"Channel axis dimension is not valid.\")\n+\n+    bytedata = bytescale(data, high=high, low=low, cmin=cmin, cmax=cmax)\n+    if ca == 2:\n+        strdata = bytedata.tostring()\n+        shape = (shape[1], shape[0])\n+    elif ca == 1:\n+        strdata = transpose(bytedata, (0, 2, 1)).tostring()\n+        shape = (shape[2], shape[0])\n+    elif ca == 0:\n+        strdata = transpose(bytedata, (1, 2, 0)).tostring()\n+        shape = (shape[2], shape[1])\n+    if mode is None:\n+        if numch == 3:\n+            mode = 'RGB'\n+        else:\n+            mode = 'RGBA'\n+\n+    if mode not in ['RGB', 'RGBA', 'YCbCr', 'CMYK']:\n+        raise ValueError(_errstr)\n+\n+    if mode in ['RGB', 'YCbCr']:\n+        if numch != 3:\n+            raise ValueError(\"Invalid array shape for mode.\")\n+    if mode in ['RGBA', 'CMYK']:\n+        if numch != 4:\n+            raise ValueError(\"Invalid array shape for mode.\")\n+\n+    # Here we know data and mode is correct\n+    image = Image.frombytes(mode, shape, strdata)\n+    return image\n+\n+\n+def imresize(arr, size, interp='bilinear', mode=None):\n+    \"\"\"\n+    Resize an image.\n+\n+    This function is only available if Python Imaging Library (PIL) is installed.\n+\n+    .. warning::\n+\n+        This function uses `bytescale` under the hood to rescale images to use\n+        the full (0, 255) range if ``mode`` is one of ``None, 'L', 'P', 'l'``.\n+        It will also cast data for 2-D images to ``uint32`` for ``mode=None``\n+        (which is the default).\n+\n+    Parameters\n+    ----------\n+    arr : ndarray\n+        The array of image to be resized.\n+    size : int, float or tuple\n+        * int   - Percentage of current size.\n+        * float - Fraction of current size.\n+        * tuple - Size of the output image (height, width).\n+\n+    interp : str, optional\n+        Interpolation to use for re-sizing ('nearest', 'lanczos', 'bilinear',\n+        'bicubic' or 'cubic').\n+    mode : str, optional\n+        The PIL image mode ('P', 'L', etc.) to convert `arr` before resizing.\n+        If ``mode=None`` (the default), 2-D images will be treated like\n+        ``mode='L'``, i.e. casting to long integer.  For 3-D and 4-D arrays,\n+        `mode` will be set to ``'RGB'`` and ``'RGBA'`` respectively.\n+\n+    Returns\n+    -------\n+    imresize : ndarray\n+        The resized array of image.\n+\n+    See Also\n+    --------\n+    toimage : Implicitly used to convert `arr` according to `mode`.\n+    scipy.ndimage.zoom : More generic implementation that does not use PIL.\n+\n+    \"\"\"\n+    im = toimage(arr, mode=mode)\n+    ts = type(size)\n+    if issubdtype(ts, numpy.signedinteger):\n+        percent = size / 100.0\n+        size = tuple((array(im.size)*percent).astype(int))\n+    elif issubdtype(type(size), numpy.floating):\n+        size = tuple((array(im.size)*size).astype(int))\n+    else:\n+        size = (size[1], size[0])\n+    func = {'nearest': 0, 'lanczos': 1, 'bilinear': 2, 'bicubic': 3, 'cubic': 3}\n+    imnew = im.resize(size, resample=func[interp])\n+    return fromimage(imnew)\n",
  "test_patch": "diff --git a/sklearn/datasets/tests/test_base.py b/sklearn/datasets/tests/test_base.py\n--- a/sklearn/datasets/tests/test_base.py\n+++ b/sklearn/datasets/tests/test_base.py\n@@ -21,6 +21,7 @@\n from sklearn.datasets.base import Bunch\n \n from sklearn.externals.six import b, u\n+from sklearn.externals._pilutil import pillow_installed\n \n from sklearn.utils.testing import assert_false\n from sklearn.utils.testing import assert_true\n@@ -161,15 +162,7 @@ def test_load_sample_image():\n \n \n def test_load_missing_sample_image_error():\n-    have_PIL = True\n-    try:\n-        try:\n-            from scipy.misc import imread\n-        except ImportError:\n-            from scipy.misc.pilutil import imread  # noqa\n-    except ImportError:\n-        have_PIL = False\n-    if have_PIL:\n+    if pillow_installed:\n         assert_raises(AttributeError, load_sample_image,\n                       'blop.jpg')\n     else:\ndiff --git a/sklearn/datasets/tests/test_lfw.py b/sklearn/datasets/tests/test_lfw.py\n--- a/sklearn/datasets/tests/test_lfw.py\n+++ b/sklearn/datasets/tests/test_lfw.py\n@@ -14,14 +14,7 @@\n import tempfile\n import numpy as np\n from sklearn.externals import six\n-try:\n-    try:\n-        from scipy.misc import imsave\n-    except ImportError:\n-        from scipy.misc.pilutil import imsave\n-except ImportError:\n-    imsave = None\n-\n+from sklearn.externals._pilutil import pillow_installed, imsave\n from sklearn.datasets import fetch_lfw_pairs\n from sklearn.datasets import fetch_lfw_people\n \n@@ -48,7 +41,7 @@\n \n def setup_module():\n     \"\"\"Test fixture run once and common to all tests of this module\"\"\"\n-    if imsave is None:\n+    if not pillow_installed:\n         raise SkipTest(\"PIL not installed.\")\n \n     if not os.path.exists(LFW_HOME):\n",
  "problem_statement": "load_sample_images uses deprecated imread\n>DeprecationWarning: `imread` is deprecated!\r\n`imread` is deprecated in SciPy 1.0.0, and will be removed in 1.2.0.\n",
  "hints_text": "@amueller I'm interested in working on this issue. May I know if you could share more details?\nThe imread function in scipy is deprecated, therefore we should not use it. I'm not sure if it's replaced by anything, or if we need to use PIL/pillow directly.\nAs per the Scipy document, `imread `is deprecated and it is suggested to use `imageio.imread` instead. Please share your thoughts if `imageio.imread` is fine or you would suggest using PIL/pillow directly? \nHm... I guess we use pillow directly? @GaelVaroquaux @jnothman opinions?\nSo currently users of our imread need to have PIL or Pillow installed. We\nshould keep that assumption, for now. Which basically means we need to copy\nthe implementation of scipy.misc.imread. We could extend this to\nallowing imageio to be installed instead in the future.\n\nThank you for the suggestion @jnothman. As suggested, have implemented the changes and created the PR.\nI got something similar for basic image processing included in LFW fetcher: \r\n\r\n```\r\n`imresize` is deprecated in SciPy 1.0.0, and will be removed in 1.2.0.\r\nUse ``skimage.transform.resize`` instead.\r\n```\r\n\r\nDo we want to keep using PIL in this case (http://pillow.readthedocs.io/en/4.3.x/reference/Image.html#PIL.Image.Image.resize)?\nIs there anyone currently working on this? The pull request by @keyur9 seems to be incomplete and inactive. I would love to take a shot at this but I don't want to step on anyone's toes.\nHello @jotasi , feel free to work on this as I'll not be able to work on this until the weekend. Thank you,",
  "created_at": "2018-01-08T19:05:07Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/datasets/tests/test_base.py::test_data_home\", \"sklearn/datasets/tests/test_base.py::test_default_empty_load_files\", \"sklearn/datasets/tests/test_base.py::test_default_load_files\", \"sklearn/datasets/tests/test_base.py::test_load_files_w_categories_desc_and_encoding\", \"sklearn/datasets/tests/test_base.py::test_load_files_wo_load_content\", \"sklearn/datasets/tests/test_base.py::test_load_sample_images\", \"sklearn/datasets/tests/test_base.py::test_load_digits\", \"sklearn/datasets/tests/test_base.py::test_load_digits_n_class_lt_10\", \"sklearn/datasets/tests/test_base.py::test_load_sample_image\", \"sklearn/datasets/tests/test_base.py::test_load_missing_sample_image_error\", \"sklearn/datasets/tests/test_base.py::test_load_diabetes\", \"sklearn/datasets/tests/test_base.py::test_load_linnerud\", \"sklearn/datasets/tests/test_base.py::test_load_iris\", \"sklearn/datasets/tests/test_base.py::test_load_wine\", \"sklearn/datasets/tests/test_base.py::test_load_breast_cancer\", \"sklearn/datasets/tests/test_base.py::test_load_boston\", \"sklearn/datasets/tests/test_base.py::test_loads_dumps_bunch\", \"sklearn/datasets/tests/test_base.py::test_bunch_pickle_generated_with_0_16_and_read_with_0_17\", \"sklearn/datasets/tests/test_base.py::test_bunch_dir\", \"sklearn/datasets/tests/test_lfw.py::test_load_empty_lfw_people\", \"sklearn/datasets/tests/test_lfw.py::test_load_fake_lfw_people\", \"sklearn/datasets/tests/test_lfw.py::test_load_fake_lfw_people_too_restrictive\", \"sklearn/datasets/tests/test_lfw.py::test_load_empty_lfw_pairs\", \"sklearn/datasets/tests/test_lfw.py::test_load_fake_lfw_pairs\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.950379",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}