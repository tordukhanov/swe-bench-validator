{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1635",
  "base_commit": "9968a10fcfad7268b552808c4f8946eecafc956a",
  "patch": "diff --git a/requests/cookies.py b/requests/cookies.py\n--- a/requests/cookies.py\n+++ b/requests/cookies.py\n@@ -392,15 +392,21 @@ def morsel_to_cookie(morsel):\n     return c\n \n \n-def cookiejar_from_dict(cookie_dict, cookiejar=None):\n+def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):\n     \"\"\"Returns a CookieJar from a key/value dictionary.\n \n     :param cookie_dict: Dict of key/values to insert into CookieJar.\n+    :param cookiejar: (optional) A cookiejar to add the cookies to.\n+    :param overwrite: (optional) If False, will not replace cookies\n+        already in the jar with new ones.\n     \"\"\"\n     if cookiejar is None:\n         cookiejar = RequestsCookieJar()\n \n     if cookie_dict is not None:\n+        names_from_jar = [cookie.name for cookie in cookiejar]\n         for name in cookie_dict:\n-            cookiejar.set_cookie(create_cookie(name, cookie_dict[name]))\n+            if overwrite or (name not in names_from_jar):\n+                cookiejar.set_cookie(create_cookie(name, cookie_dict[name]))\n+\n     return cookiejar\ndiff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -295,7 +295,7 @@ def copy(self):\n         p = PreparedRequest()\n         p.method = self.method\n         p.url = self.url\n-        p.headers = self.headers\n+        p.headers = self.headers.copy()\n         p.body = self.body\n         p.hooks = self.hooks\n         return p\ndiff --git a/requests/sessions.py b/requests/sessions.py\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -322,6 +322,9 @@ def request(self, method, url,\n         )\n         prep = self.prepare_request(req)\n \n+        # Add param cookies to session cookies\n+        self.cookies = cookiejar_from_dict(cookies, cookiejar=self.cookies, overwrite=False)\n+\n         proxies = proxies or {}\n \n         # Gather clues from the surrounding environment.\n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -164,6 +164,12 @@ def test_cookie_quote_wrapped(self):\n         s.get(httpbin('cookies/set?foo=\"bar:baz\"'))\n         self.assertTrue(s.cookies['foo'] == '\"bar:baz\"')\n \n+    def test_cookie_persists_via_api(self):\n+        s = requests.session()\n+        r = s.get(httpbin('redirect/1'), cookies={'foo':'bar'})\n+        self.assertTrue('foo' in r.request.headers['Cookie'])\n+        self.assertTrue('foo' in r.history[0].request.headers['Cookie'])\n+\n     def test_request_cookie_overrides_session_cookie(self):\n         s = requests.session()\n         s.cookies['foo'] = 'bar'\n",
  "problem_statement": "Cookies not persisted when set via functional API.\nCookies set as part of a call to `Session.request()` (or any of the top level methods that call it) are _not_ persisted, including on redirects.\n\nExpected behaviour:\n\n``` python\n>>> s = requests.Session()\n>>> r = s.get('http://httpbin.org/redirect/1', cookies={'Hi': 'There'})\n>>> print r.request.headers['Cookie']\n'hi=there'\n```\n\nActual behaviour:\n\n``` python\n>>> s = requests.Session()\n>>> r = s.get('http://httpbin.org/redirect/1', cookies={'Hi': 'There'})\n>>> print r.request.headers['Cookie']\nKeyError: 'cookie'\n```\n\nAnd, a super extra bonus bug:\n\n``` python\n>>> r.history[0].request.headers['Cookie']\nKeyError: 'cookie'\n```\n\neven though we definitely sent the cookie on the first request.\n\n",
  "hints_text": "",
  "created_at": "2013-09-28T14:50:12Z",
  "version": "2.0",
  "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_cookie_persists_via_api\"]",
  "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET\", \"test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES\", \"test_requests.py::RequestsTestCase::test_DIGEST_STREAM\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT\", \"test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA\", \"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_basicauth_with_netrc\", \"test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_cookie_quote_wrapped\", \"test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect\", \"test_requests.py::RequestsTestCase::test_custom_content_type\", \"test_requests.py::RequestsTestCase::test_decompress_gzip\", \"test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_fixes_1329\", \"test_requests.py::RequestsTestCase::test_generic_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_header_keys_are_native\", \"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_prepared_from_session\", \"test_requests.py::RequestsTestCase::test_prepared_request_hook\", \"test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie\", \"test_requests.py::RequestsTestCase::test_request_ok_set\", \"test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_session_pickling\", \"test_requests.py::RequestsTestCase::test_set_cookie_on_301\", \"test_requests.py::RequestsTestCase::test_status_raising\", \"test_requests.py::RequestsTestCase::test_time_elapsed_blank\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_get\", \"test_requests.py::RequestsTestCase::test_unicode_header_name\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect\", \"test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param\", \"test_requests.py::RequestsTestCase::test_user_agent_transfers\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\"]",
  "environment_setup_commit": "4bceb312f1b99d36a25f2985b5606e98b6f0d8cd",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.847918",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}