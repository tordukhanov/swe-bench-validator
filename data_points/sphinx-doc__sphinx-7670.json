{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7670",
  "base_commit": "3419079fb0d1f0eecd845eff0d12b367d34cd5e9",
  "patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3538,6 +3538,8 @@ def describe_signature_as_introducer(\n         signode += nodes.Text('}')\n \n \n+################################################################################\n+\n class ASTTemplateDeclarationPrefix(ASTBase):\n     def __init__(self,\n                  templates: List[Union[ASTTemplateParams,\n@@ -3566,18 +3568,35 @@ def describe_signature(self, signode: desc_signature, mode: str,\n             t.describe_signature_as_introducer(signode, 'lastIsName', env, symbol, lineSpec)\n \n \n+class ASTRequiresClause(ASTBase):\n+    def __init__(self, expr: ASTExpression) -> None:\n+        self.expr = expr\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return 'requires ' + transform(self.expr)\n+\n+    def describe_signature(self, signode: addnodes.desc_signature_line, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode += nodes.Text('requires ', 'requires ')\n+        self.expr.describe_signature(signode, mode, env, symbol)\n+\n+\n ################################################################################\n ################################################################################\n \n class ASTDeclaration(ASTBase):\n     def __init__(self, objectType: str, directiveType: str, visibility: str,\n-                 templatePrefix: ASTTemplateDeclarationPrefix, declaration: Any,\n+                 templatePrefix: ASTTemplateDeclarationPrefix,\n+                 requiresClause: ASTRequiresClause, declaration: Any,\n+                 trailingRequiresClause: ASTRequiresClause,\n                  semicolon: bool = False) -> None:\n         self.objectType = objectType\n         self.directiveType = directiveType\n         self.visibility = visibility\n         self.templatePrefix = templatePrefix\n+        self.requiresClause = requiresClause\n         self.declaration = declaration\n+        self.trailingRequiresClause = trailingRequiresClause\n         self.semicolon = semicolon\n \n         self.symbol = None  # type: Symbol\n@@ -3585,13 +3604,14 @@ def __init__(self, objectType: str, directiveType: str, visibility: str,\n         self.enumeratorScopedSymbol = None  # type: Symbol\n \n     def clone(self) -> \"ASTDeclaration\":\n-        if self.templatePrefix:\n-            templatePrefixClone = self.templatePrefix.clone()\n-        else:\n-            templatePrefixClone = None\n-        return ASTDeclaration(self.objectType, self.directiveType,\n-                              self.visibility, templatePrefixClone,\n-                              self.declaration.clone(), self.semicolon)\n+        templatePrefixClone = self.templatePrefix.clone() if self.templatePrefix else None\n+        requiresClasueClone = self.requiresClause.clone() if self.requiresClause else None\n+        trailingRequiresClasueClone = self.trailingRequiresClause.clone() \\\n+            if self.trailingRequiresClause else None\n+        return ASTDeclaration(self.objectType, self.directiveType, self.visibility,\n+                              templatePrefixClone, requiresClasueClone,\n+                              self.declaration.clone(), trailingRequiresClasueClone,\n+                              self.semicolon)\n \n     @property\n     def name(self) -> ASTNestedName:\n@@ -3619,6 +3639,17 @@ def get_id(self, version: int, prefixed: bool = True) -> str:\n             res = []\n         if self.templatePrefix:\n             res.append(self.templatePrefix.get_id(version))\n+        if self.requiresClause or self.trailingRequiresClause:\n+            if version < 4:\n+                raise NoOldIdError()\n+            res.append('IQ')\n+            if self.requiresClause and self.trailingRequiresClause:\n+                res.append('aa')\n+            if self.requiresClause:\n+                res.append(self.requiresClause.expr.get_id(version))\n+            if self.trailingRequiresClause:\n+                res.append(self.trailingRequiresClause.expr.get_id(version))\n+            res.append('E')\n         res.append(self.declaration.get_id(version, self.objectType, self.symbol))\n         return ''.join(res)\n \n@@ -3632,7 +3663,13 @@ def _stringify(self, transform: StringifyTransform) -> str:\n             res.append(' ')\n         if self.templatePrefix:\n             res.append(transform(self.templatePrefix))\n+        if self.requiresClause:\n+            res.append(transform(self.requiresClause))\n+            res.append(' ')\n         res.append(transform(self.declaration))\n+        if self.trailingRequiresClause:\n+            res.append(' ')\n+            res.append(transform(self.trailingRequiresClause))\n         if self.semicolon:\n             res.append(';')\n         return ''.join(res)\n@@ -3653,6 +3690,11 @@ def describe_signature(self, signode: desc_signature, mode: str,\n             self.templatePrefix.describe_signature(signode, mode, env,\n                                                    symbol=self.symbol,\n                                                    lineSpec=options.get('tparam-line-spec'))\n+        if self.requiresClause:\n+            reqNode = addnodes.desc_signature_line()\n+            reqNode.sphinx_line_type = 'requiresClause'\n+            signode.append(reqNode)\n+            self.requiresClause.describe_signature(reqNode, 'markType', env, self.symbol)\n         signode += mainDeclNode\n         if self.visibility and self.visibility != \"public\":\n             mainDeclNode += addnodes.desc_annotation(self.visibility + \" \",\n@@ -3688,8 +3730,16 @@ def describe_signature(self, signode: desc_signature, mode: str,\n         else:\n             assert False\n         self.declaration.describe_signature(mainDeclNode, mode, env, self.symbol)\n+        lastDeclNode = mainDeclNode\n+        if self.trailingRequiresClause:\n+            trailingReqNode = addnodes.desc_signature_line()\n+            trailingReqNode.sphinx_line_type = 'trailingRequiresClause'\n+            signode.append(trailingReqNode)\n+            lastDeclNode = trailingReqNode\n+            self.trailingRequiresClause.describe_signature(\n+                trailingReqNode, 'markType', env, self.symbol)\n         if self.semicolon:\n-            mainDeclNode += nodes.Text(';')\n+            lastDeclNode += nodes.Text(';')\n \n \n class ASTNamespace(ASTBase):\n@@ -3808,7 +3858,7 @@ def _add_template_and_function_params(self) -> None:\n                     continue\n                 # only add a declaration if we our self are from a declaration\n                 if self.declaration:\n-                    decl = ASTDeclaration('templateParam', None, None, None, tp)\n+                    decl = ASTDeclaration('templateParam', None, None, None, None, tp, None)\n                 else:\n                     decl = None\n                 nne = ASTNestedNameElement(tp.get_identifier(), None)\n@@ -3823,7 +3873,7 @@ def _add_template_and_function_params(self) -> None:\n                 if nn is None:\n                     continue\n                 # (comparing to the template params: we have checked that we are a declaration)\n-                decl = ASTDeclaration('functionParam', None, None, None, fp)\n+                decl = ASTDeclaration('functionParam', None, None, None, None, fp, None)\n                 assert not nn.rooted\n                 assert len(nn.names) == 1\n                 self._add_symbols(nn, [], decl, self.docname)\n@@ -6297,8 +6347,61 @@ def _parse_template_introduction(self) -> ASTTemplateIntroduction:\n                           'Expected \",\", or \"}\".')\n         return ASTTemplateIntroduction(concept, params)\n \n+    def _parse_requires_clause(self) -> Optional[ASTRequiresClause]:\n+        # requires-clause -> 'requires' constraint-logical-or-expression\n+        # constraint-logical-or-expression\n+        #   -> constraint-logical-and-expression\n+        #    | constraint-logical-or-expression '||' constraint-logical-and-expression\n+        # constraint-logical-and-expression\n+        #   -> primary-expression\n+        #    | constraint-logical-and-expression '&&' primary-expression\n+        self.skip_ws()\n+        if not self.skip_word('requires'):\n+            return None\n+\n+        def parse_and_expr(self: DefinitionParser) -> ASTExpression:\n+            andExprs = []\n+            ops = []\n+            andExprs.append(self._parse_primary_expression())\n+            while True:\n+                self.skip_ws()\n+                oneMore = False\n+                if self.skip_string('&&'):\n+                    oneMore = True\n+                    ops.append('&&')\n+                elif self.skip_word('and'):\n+                    oneMore = True\n+                    ops.append('and')\n+                if not oneMore:\n+                    break\n+                andExprs.append(self._parse_primary_expression())\n+            if len(andExprs) == 1:\n+                return andExprs[0]\n+            else:\n+                return ASTBinOpExpr(andExprs, ops)\n+\n+        orExprs = []\n+        ops = []\n+        orExprs.append(parse_and_expr(self))\n+        while True:\n+            self.skip_ws()\n+            oneMore = False\n+            if self.skip_string('||'):\n+                oneMore = True\n+                ops.append('||')\n+            elif self.skip_word('or'):\n+                oneMore = True\n+                ops.append('or')\n+            if not oneMore:\n+                break\n+            orExprs.append(parse_and_expr(self))\n+        if len(orExprs) == 1:\n+            return ASTRequiresClause(orExprs[0])\n+        else:\n+            return ASTRequiresClause(ASTBinOpExpr(orExprs, ops))\n+\n     def _parse_template_declaration_prefix(self, objectType: str\n-                                           ) -> ASTTemplateDeclarationPrefix:\n+                                           ) -> Optional[ASTTemplateDeclarationPrefix]:\n         templates = []  # type: List[Union[ASTTemplateParams, ASTTemplateIntroduction]]\n         while 1:\n             self.skip_ws()\n@@ -6377,6 +6480,8 @@ def parse_declaration(self, objectType: str, directiveType: str) -> ASTDeclarati\n             raise Exception('Internal error, unknown directiveType \"%s\".' % directiveType)\n         visibility = None\n         templatePrefix = None\n+        requiresClause = None\n+        trailingRequiresClause = None\n         declaration = None  # type: Any\n \n         self.skip_ws()\n@@ -6385,6 +6490,8 @@ def parse_declaration(self, objectType: str, directiveType: str) -> ASTDeclarati\n \n         if objectType in ('type', 'concept', 'member', 'function', 'class'):\n             templatePrefix = self._parse_template_declaration_prefix(objectType)\n+            if objectType == 'function' and templatePrefix is not None:\n+                requiresClause = self._parse_requires_clause()\n \n         if objectType == 'type':\n             prevErrors = []\n@@ -6410,6 +6517,8 @@ def parse_declaration(self, objectType: str, directiveType: str) -> ASTDeclarati\n             declaration = self._parse_type_with_init(named=True, outer='member')\n         elif objectType == 'function':\n             declaration = self._parse_type(named=True, outer='function')\n+            if templatePrefix is not None:\n+                trailingRequiresClause = self._parse_requires_clause()\n         elif objectType == 'class':\n             declaration = self._parse_class()\n         elif objectType == 'union':\n@@ -6427,7 +6536,8 @@ def parse_declaration(self, objectType: str, directiveType: str) -> ASTDeclarati\n         self.skip_ws()\n         semicolon = self.skip_string(';')\n         return ASTDeclaration(objectType, directiveType, visibility,\n-                              templatePrefix, declaration, semicolon)\n+                              templatePrefix, requiresClause, declaration,\n+                              trailingRequiresClause, semicolon)\n \n     def parse_namespace_object(self) -> ASTNamespace:\n         templatePrefix = self._parse_template_declaration_prefix(objectType=\"namespace\")\n",
  "test_patch": "diff --git a/tests/test_domain_cpp.py b/tests/test_domain_cpp.py\n--- a/tests/test_domain_cpp.py\n+++ b/tests/test_domain_cpp.py\n@@ -828,6 +828,15 @@ def test_templates():\n     check('type', 'template<C T = int&> {key}A', {2: 'I_1CE1A'}, key='using')\n \n \n+def test_requires_clauses():\n+    check('function', 'template<typename T> requires A auto f() -> void requires B',\n+          {4: 'I0EIQaa1A1BE1fvv'})\n+    check('function', 'template<typename T> requires A || B or C void f()',\n+          {4: 'I0EIQoo1Aoo1B1CE1fvv'})\n+    check('function', 'template<typename T> requires A && B || C and D void f()',\n+          {4: 'I0EIQooaa1A1Baa1C1DE1fvv'})\n+\n+\n def test_template_args():\n     # from breathe#218\n     check('function',\n",
  "problem_statement": "C++20 requires clause not supported\nCould you please add the support for C++ [requires clauses](https://en.cppreference.com/w/cpp/language/constraints)?\r\n\r\nI am the author of [mp-units](https://github.com/mpusz/units) which is a Physical Units Library targeting C++23 and implemented in C++20. You can find the initial version of docs here: <https://mpusz.github.io/units/index.html>. That documentation is meant to help with getting user's feedback before C++ standardization so it would be great if you could help here.\n",
  "hints_text": "Instead of reinventing the wheel regarding name mangling I try to to follow (in spirit) the Itanium ABI, but it looks like the standard is not yet clear on some details (itanium-cxx-abi/cxx-abi#24).\r\n@mpusz, do you happen to have seen mangled names with constraints? I can't get GCC to produce any so far.",
  "created_at": "2020-05-16T07:58:26Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"tests/test_domain_cpp.py::test_requires_clauses\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_cpp.py::test_fundamental_types\", \"tests/test_domain_cpp.py::test_expressions\", \"tests/test_domain_cpp.py::test_type_definitions\", \"tests/test_domain_cpp.py::test_concept_definitions\", \"tests/test_domain_cpp.py::test_member_definitions\", \"tests/test_domain_cpp.py::test_function_definitions\", \"tests/test_domain_cpp.py::test_operators\", \"tests/test_domain_cpp.py::test_nested_name\", \"tests/test_domain_cpp.py::test_class_definitions\", \"tests/test_domain_cpp.py::test_union_definitions\", \"tests/test_domain_cpp.py::test_enum_definitions\", \"tests/test_domain_cpp.py::test_anon_definitions\", \"tests/test_domain_cpp.py::test_templates\", \"tests/test_domain_cpp.py::test_template_args\", \"tests/test_domain_cpp.py::test_initializers\", \"tests/test_domain_cpp.py::test_attributes\", \"tests/test_domain_cpp.py::test_xref_parsing\", \"tests/test_domain_cpp.py::test_build_domain_cpp_multi_decl_lookup\", \"tests/test_domain_cpp.py::test_build_domain_cpp_warn_template_param_qualified_name\", \"tests/test_domain_cpp.py::test_build_domain_cpp_backslash_ok\", \"tests/test_domain_cpp.py::test_build_domain_cpp_semicolon\", \"tests/test_domain_cpp.py::test_build_domain_cpp_anon_dup_decl\", \"tests/test_domain_cpp.py::test_build_domain_cpp_misuse_of_roles\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_True\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_False\", \"tests/test_domain_cpp.py::test_xref_consistency\"]",
  "environment_setup_commit": "5afc77ee27fc01c57165ab260d3a76751f9ddb35",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.044874",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}