{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8481",
  "base_commit": "a82b06f2abb1226d82b18e3f85bdf19be7b9eb3f",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1702,7 +1702,9 @@ def can_document_member(cls, member: Any, membername: str, isattr: bool, parent:\n \n class DataDocumenterMixinBase:\n     # define types of instance variables\n+    parent = None  # type: Any\n     object = None  # type: Any\n+    objpath = None  # type: List[str]\n \n     def should_suppress_directive_header(self) -> bool:\n         \"\"\"Check directive header should be suppressed.\"\"\"\n@@ -2097,7 +2099,54 @@ def __init__(self, *args: Any, **kwargs: Any) -> None:\n         super().__init__(*args, **kwargs)\n \n \n-class AttributeDocumenter(NewTypeMixin, TypeVarMixin,  # type: ignore\n+class SlotsMixin(DataDocumenterMixinBase):\n+    \"\"\"\n+    Mixin for AttributeDocumenter to provide the feature for supporting __slots__.\n+    \"\"\"\n+\n+    def isslotsattribute(self) -> bool:\n+        \"\"\"Check the subject is an attribute in __slots__.\"\"\"\n+        try:\n+            __slots__ = inspect.getslots(self.parent)\n+            if __slots__ and self.objpath[-1] in __slots__:\n+                return True\n+            else:\n+                return False\n+        except (AttributeError, ValueError):\n+            return False\n+\n+    def import_object(self, raiseerror: bool = False) -> bool:\n+        ret = super().import_object(raiseerror)  # type: ignore\n+        if self.isslotsattribute():\n+            self.object = SLOTSATTR\n+\n+        return ret\n+\n+    def should_suppress_directive_header(self) -> bool:\n+        if self.object is SLOTSATTR:\n+            self._datadescriptor = True\n+            return True\n+        else:\n+            return super().should_suppress_directive_header()\n+\n+    def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n+        if self.object is SLOTSATTR:\n+            try:\n+                __slots__ = inspect.getslots(self.parent)\n+                if __slots__ and __slots__.get(self.objpath[-1]):\n+                    docstring = prepare_docstring(__slots__[self.objpath[-1]])\n+                    return [docstring]\n+                else:\n+                    return []\n+            except (AttributeError, ValueError) as exc:\n+                logger.warning(__('Invalid __slots__ found on %s. Ignored.'),\n+                               (self.parent.__qualname__, exc), type='autodoc')\n+                return []\n+        else:\n+            return super().get_doc(encoding, ignore)  # type: ignore\n+\n+\n+class AttributeDocumenter(NewTypeMixin, SlotsMixin, TypeVarMixin,  # type: ignore\n                           DocstringStripSignatureMixin, ClassLevelDocumenter):\n     \"\"\"\n     Specialized Documenter subclass for attributes.\n@@ -2333,52 +2382,10 @@ class SlotsAttributeDocumenter(AttributeDocumenter):\n     # must be higher than AttributeDocumenter\n     priority = 11\n \n-    @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n-        \"\"\"This documents only SLOTSATTR members.\"\"\"\n-        return member is SLOTSATTR\n-\n-    def import_object(self, raiseerror: bool = False) -> bool:\n-        \"\"\"Never import anything.\"\"\"\n-        # disguise as an attribute\n-        self.objtype = 'attribute'\n-        self._datadescriptor = True\n-\n-        with mock(self.config.autodoc_mock_imports):\n-            try:\n-                ret = import_object(self.modname, self.objpath[:-1], 'class',\n-                                    attrgetter=self.get_attr,\n-                                    warningiserror=self.config.autodoc_warningiserror)\n-                self.module, _, _, self.parent = ret\n-                return True\n-            except ImportError as exc:\n-                if raiseerror:\n-                    raise\n-                else:\n-                    logger.warning(exc.args[0], type='autodoc', subtype='import_object')\n-                    self.env.note_reread()\n-                    return False\n-\n-    def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n-        \"\"\"Decode and return lines of the docstring(s) for the object.\"\"\"\n-        if ignore is not None:\n-            warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\"\n-                          % self.__class__.__name__,\n-                          RemovedInSphinx50Warning, stacklevel=2)\n-        name = self.objpath[-1]\n-\n-        try:\n-            __slots__ = inspect.getslots(self.parent)\n-            if __slots__ and isinstance(__slots__.get(name, None), str):\n-                docstring = prepare_docstring(__slots__[name])\n-                return [docstring]\n-            else:\n-                return []\n-        except (AttributeError, ValueError) as exc:\n-            logger.warning(__('Invalid __slots__ found on %s. Ignored.'),\n-                           (self.parent.__qualname__, exc), type='autodoc')\n-            return []\n+    def __init__(self, *args: Any, **kwargs: Any) -> None:\n+        warnings.warn(\"%s is deprecated.\" % self.__class__.__name__,\n+                      RemovedInSphinx50Warning, stacklevel=2)\n+        super().__init__(*args, **kwargs)\n \n \n class NewTypeAttributeDocumenter(AttributeDocumenter):\n@@ -2435,7 +2442,6 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_autodocumenter(AttributeDocumenter)\n     app.add_autodocumenter(PropertyDocumenter)\n     app.add_autodocumenter(InstanceAttributeDocumenter)\n-    app.add_autodocumenter(SlotsAttributeDocumenter)\n     app.add_autodocumenter(NewTypeAttributeDocumenter)\n \n     app.add_config_value('autoclass_content', 'class', True, ENUM('both', 'class', 'init'))\ndiff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -91,13 +91,13 @@ def setup_documenters(app: Any) -> None:\n                                     InstanceAttributeDocumenter, MethodDocumenter,\n                                     ModuleDocumenter, NewTypeAttributeDocumenter,\n                                     NewTypeDataDocumenter, PropertyDocumenter,\n-                                    SingledispatchFunctionDocumenter, SlotsAttributeDocumenter)\n+                                    SingledispatchFunctionDocumenter)\n     documenters = [\n         ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n         FunctionDocumenter, MethodDocumenter, NewTypeAttributeDocumenter,\n         NewTypeDataDocumenter, AttributeDocumenter, InstanceAttributeDocumenter,\n-        DecoratorDocumenter, PropertyDocumenter, SlotsAttributeDocumenter,\n-        GenericAliasDocumenter, SingledispatchFunctionDocumenter,\n+        DecoratorDocumenter, PropertyDocumenter, GenericAliasDocumenter,\n+        SingledispatchFunctionDocumenter,\n     ]  # type: List[Type[Documenter]]\n     for documenter in documenters:\n         app.registry.add_documenter(documenter.objtype, documenter)\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_autoattribute.py b/tests/test_ext_autodoc_autoattribute.py\n--- a/tests/test_ext_autodoc_autoattribute.py\n+++ b/tests/test_ext_autodoc_autoattribute.py\n@@ -72,6 +72,41 @@ def test_autoattribute_instance_variable(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autoattribute_slots_variable_list(app):\n+    actual = do_autodoc(app, 'attribute', 'target.slots.Foo.attr')\n+    assert list(actual) == [\n+        '',\n+        '.. py:attribute:: Foo.attr',\n+        '   :module: target.slots',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autoattribute_slots_variable_dict(app):\n+    actual = do_autodoc(app, 'attribute', 'target.slots.Bar.attr1')\n+    assert list(actual) == [\n+        '',\n+        '.. py:attribute:: Bar.attr1',\n+        '   :module: target.slots',\n+        '',\n+        '   docstring of attr1',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autoattribute_slots_variable_str(app):\n+    actual = do_autodoc(app, 'attribute', 'target.slots.Baz.attr')\n+    assert list(actual) == [\n+        '',\n+        '.. py:attribute:: Baz.attr',\n+        '   :module: target.slots',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autoattribute_NewType(app):\n     actual = do_autodoc(app, 'attribute', 'target.typevar.Class.T6')\n",
  "problem_statement": "autoattribute could not create document for __slots__ attributes correctly\n**Describe the bug**\r\nautoattribute could not create document for __slots__ attributes correctly\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# example.py\r\nclass Foo:\r\n    __slots__ = {'attr': 'docstring'}\r\n```\r\n```\r\n# index.rst\r\n.. autoattribute:: example.Foo.attr\r\n```\r\n\r\nThe build succeeded. But docstring is not shown.\r\n\r\n**Expected behavior**\r\nDocument should be generated successfully like when I used `automodule`.\r\n\r\n**Your project**\r\nN/A\r\n\r\n**Screenshots**\r\nN/A\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.9.0\r\n- Sphinx version: HEAD of 3.x\r\n- Sphinx extensions: sphinx.ext.autodoc\r\n- Extra tools: Nothing\r\n\r\n**Additional context**\r\nNothing\n",
  "hints_text": "",
  "created_at": "2020-11-23T07:55:33Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_autoattribute.py::test_autoattribute_slots_variable_dict\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_autoattribute.py::test_autoattribute\", \"tests/test_ext_autodoc_autoattribute.py::test_autoattribute_novalue\", \"tests/test_ext_autodoc_autoattribute.py::test_autoattribute_typed_variable\", \"tests/test_ext_autodoc_autoattribute.py::test_autoattribute_instance_variable\", \"tests/test_ext_autodoc_autoattribute.py::test_autoattribute_slots_variable_list\", \"tests/test_ext_autodoc_autoattribute.py::test_autoattribute_slots_variable_str\", \"tests/test_ext_autodoc_autoattribute.py::test_autoattribute_NewType\", \"tests/test_ext_autodoc_autoattribute.py::test_autoattribute_TypeVar\"]",
  "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.055192",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}