{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13895",
  "base_commit": "4da0b64558e9551a11a99bccc63557ba34f50c58",
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -2248,11 +2248,9 @@ def _eval_power(self, expt):\n         if p is not False:\n             dict = {p[0]: p[1]}\n         else:\n-            dict = Integer(self).factors(limit=2**15)\n+            dict = Integer(b_pos).factors(limit=2**15)\n \n         # now process the dict of factors\n-        if self.is_negative:\n-            dict[-1] = 1\n         out_int = 1  # integer part\n         out_rad = 1  # extracted radicals\n         sqr_int = 1\n@@ -2282,10 +2280,12 @@ def _eval_power(self, expt):\n                     break\n         for k, v in sqr_dict.items():\n             sqr_int *= k**(v//sqr_gcd)\n-        if sqr_int == self and out_int == 1 and out_rad == 1:\n+        if sqr_int == b_pos and out_int == 1 and out_rad == 1:\n             result = None\n         else:\n             result = out_int*out_rad*Pow(sqr_int, Rational(sqr_gcd, expt.q))\n+            if self.is_negative:\n+                result *= Pow(S.NegativeOne, expt)\n         return result\n \n     def _eval_is_prime(self):\n",
  "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -1021,6 +1021,12 @@ def test_powers_Integer():\n     assert (-3) ** Rational(-2, 3) == \\\n         -(-1)**Rational(1, 3)*3**Rational(1, 3)/3\n \n+    # negative base and rational power with some simplification\n+    assert (-8) ** Rational(2, 5) == \\\n+        2*(-1)**Rational(2, 5)*2**Rational(1, 5)\n+    assert (-4) ** Rational(9, 5) == \\\n+        -8*(-1)**Rational(4, 5)*2**Rational(3, 5)\n+\n     assert S(1234).factors() == {617: 1, 2: 1}\n     assert Rational(2*3, 3*5*7).factors() == {2: 1, 5: -1, 7: -1}\n \n@@ -1194,6 +1200,14 @@ def test_issue_3449():\n     assert sqrt(x - 1).subs(x, 5) == 2\n \n \n+def test_issue_13890():\n+    x = Symbol(\"x\")\n+    e = (-x/4 - S(1)/12)**x - 1\n+    f = simplify(e)\n+    a = S(9)/5\n+    assert abs(e.subs(x,a).evalf() - f.subs(x,a).evalf()) < 1e-15\n+\n+\n def test_Integer_factors():\n     def F(i):\n         return Integer(i).factors()\n",
  "problem_statement": "(-x/4 - S(1)/12)**x - 1 simplifies to an inequivalent expression\n    >>> from sympy import *\r\n    >>> x = Symbol('x')\r\n    >>> e = (-x/4 - S(1)/12)**x - 1\r\n    >>> e\r\n    (-x/4 - 1/12)**x - 1\r\n    >>> f = simplify(e)\r\n    >>> f\r\n    12**(-x)*(-12**x + (-3*x - 1)**x)\r\n    >>> a = S(9)/5\r\n    >>> simplify(e.subs(x,a))\r\n    -1 - 32*15**(1/5)*2**(2/5)/225\r\n    >>> simplify(f.subs(x,a))\r\n    -1 - 32*(-1)**(4/5)*60**(1/5)/225\r\n    >>> N(e.subs(x,a))\r\n    -1.32255049319339\r\n    >>> N(f.subs(x,a))\r\n    -0.739051169462523 - 0.189590423018741*I\r\n\r\n\n",
  "hints_text": "The expressions really are equivalent, `simplify` is not to blame.  SymPy is inconsistent when raising negative numbers to the power of 9/5 (and probably other rational powers). \r\n```\r\n>>> (-S(1))**(S(9)/5)\r\n-(-1)**(4/5)                  #  complex number as a result \r\n>>> (-S(4))**(S(9)/5)\r\n-8*2**(3/5)                  # the result is real\r\n```\r\nIn a way, both are reasonable. The computation starts by writing 9/5 as 1 + 4/5. Then we get the base factored out, and are left with `(-1)**(4/5)` or `(-4)**(4/5)`. Somehow, the first is left alone while in the second, noticing that 4 is a square, SymPy does further manipulations, ending up by raising (-4) to the power of 4 and thus canceling the minus sign. So we get the second result.  \r\n\r\nCan it be accepted that the expression is multi-valued and which of the possible values is chosen is arbitrary? But one perhaps would like more consistency on this.\nOK, \"inequivalent\" was the wrong word. But is it reasonable to expect sympy to try to keep the same complex root choice through simplification?\nYes, I think there should be consistency there.  The issue is at the level of SymPy taking in an object like (-1)**(S(4)/5) and parsing it into an expression tree. The trees are formed in significantly different ways for different exponents: \r\n```\r\n>>> for k in range(1, 5):\r\n...     srepr((-4)**(S(k)/5))\r\n'Pow(Integer(-4), Rational(1, 5))'    #  complex\r\n'Pow(Integer(-4), Rational(2, 5))'    # complex \r\n'Mul(Integer(2), Pow(Integer(-2), Rational(1, 5)))'   # complex, factoring out 2 is okay\r\n'Mul(Integer(2), Pow(Integer(2), Rational(3, 5)))'    # real, where did the minus sign go? \r\n```",
  "created_at": "2018-01-11T19:43:54Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_powers_Integer\", \"test_issue_13890\"]",
  "PASS_TO_PASS": "[\"test_integers_cache\", \"test_seterr\", \"test_mod\", \"test_divmod\", \"test_igcd\", \"test_igcd_lehmer\", \"test_igcd2\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Rational_cmp\", \"test_Float\", \"test_float_mpf\", \"test_Float_RealElement\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_Float_from_tuple\", \"test_Infinity\", \"test_Infinity_2\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_Infinity_inequations\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_isqrt\", \"test_powers_Rational\", \"test_powers_Float\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_long\", \"test_real_bug\", \"test_bug_sqrt\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Float_eq\", \"test_int_NumberSymbols\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_simplify_AlgebraicNumber\", \"test_Float_idempotence\", \"test_comp\", \"test_issue_9491\", \"test_issue_10063\", \"test_issue_10020\", \"test_invert_numbers\", \"test_mod_inverse\", \"test_golden_ratio_rewrite_as_sqrt\", \"test_comparisons_with_unknown_type\", \"test_NumberSymbol_comparison\", \"test_Integer_precision\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.089189",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}