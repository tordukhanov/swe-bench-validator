{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25129",
  "base_commit": "1367ea5fd2420d264fcd63fbbc0521661f868cce",
  "patch": "diff --git a/examples/event_handling/cursor_demo.py b/examples/event_handling/cursor_demo.py\n--- a/examples/event_handling/cursor_demo.py\n+++ b/examples/event_handling/cursor_demo.py\n@@ -28,6 +28,8 @@\n import matplotlib.pyplot as plt\n import numpy as np\n \n+from matplotlib.backend_bases import MouseEvent\n+\n \n class Cursor:\n     \"\"\"\n@@ -71,6 +73,11 @@ def on_mouse_move(self, event):\n cursor = Cursor(ax)\n fig.canvas.mpl_connect('motion_notify_event', cursor.on_mouse_move)\n \n+# Simulate a mouse move to (0.5, 0.5), needed for online docs\n+t = ax.transData\n+MouseEvent(\n+    \"motion_notify_event\", ax.figure.canvas, *t.transform((0.5, 0.5))\n+)._process()\n \n # %%\n # Faster redrawing using blitting\n@@ -85,6 +92,7 @@ def on_mouse_move(self, event):\n # created whenever the figure changes. This is achieved by connecting to the\n # ``'draw_event'``.\n \n+\n class BlittedCursor:\n     \"\"\"\n     A cross-hair cursor using blitting for faster redraw.\n@@ -152,6 +160,11 @@ def on_mouse_move(self, event):\n blitted_cursor = BlittedCursor(ax)\n fig.canvas.mpl_connect('motion_notify_event', blitted_cursor.on_mouse_move)\n \n+# Simulate a mouse move to (0.5, 0.5), needed for online docs\n+t = ax.transData\n+MouseEvent(\n+    \"motion_notify_event\", ax.figure.canvas, *t.transform((0.5, 0.5))\n+)._process()\n \n # %%\n # Snapping to data points\n@@ -165,6 +178,7 @@ def on_mouse_move(self, event):\n # the lag due to many redraws. Of course, blitting could still be added on top\n # for additional speedup.\n \n+\n class SnappingCursor:\n     \"\"\"\n     A cross-hair cursor that snaps to the data point of a line, which is\n@@ -218,4 +232,11 @@ def on_mouse_move(self, event):\n line, = ax.plot(x, y, 'o')\n snap_cursor = SnappingCursor(ax, line)\n fig.canvas.mpl_connect('motion_notify_event', snap_cursor.on_mouse_move)\n+\n+# Simulate a mouse move to (0.5, 0.5), needed for online docs\n+t = ax.transData\n+MouseEvent(\n+    \"motion_notify_event\", ax.figure.canvas, *t.transform((0.5, 0.5))\n+)._process()\n+\n plt.show()\ndiff --git a/examples/widgets/annotated_cursor.py b/examples/widgets/annotated_cursor.py\n--- a/examples/widgets/annotated_cursor.py\n+++ b/examples/widgets/annotated_cursor.py\n@@ -24,6 +24,8 @@\n import numpy as np\n import matplotlib.pyplot as plt\n \n+from matplotlib.backend_bases import MouseEvent\n+\n \n class AnnotatedCursor(Cursor):\n     \"\"\"\n@@ -312,6 +314,12 @@ def _update(self):\n     color='red',\n     linewidth=2)\n \n+# Simulate a mouse move to (-2, 10), needed for online docs\n+t = ax.transData\n+MouseEvent(\n+    \"motion_notify_event\", ax.figure.canvas, *t.transform((-2, 10))\n+)._process()\n+\n plt.show()\n \n # %%\n@@ -339,4 +347,10 @@ def _update(self):\n     useblit=True,\n     color='red', linewidth=2)\n \n+# Simulate a mouse move to (-2, 10), needed for online docs\n+t = ax.transData\n+MouseEvent(\n+    \"motion_notify_event\", ax.figure.canvas, *t.transform((-2, 10))\n+)._process()\n+\n plt.show()\ndiff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1953,8 +1953,8 @@ def __init__(self, ax, horizOn=True, vertOn=True, useblit=False,\n                  **lineprops):\n         super().__init__(ax)\n \n-        self.connect_event('motion_notify_event', self._onmove)\n-        self.connect_event('draw_event', self._clear)\n+        self.connect_event('motion_notify_event', self.onmove)\n+        self.connect_event('draw_event', self.clear)\n \n         self.visible = True\n         self.horizOn = horizOn\n@@ -1967,29 +1967,16 @@ def __init__(self, ax, horizOn=True, vertOn=True, useblit=False,\n         self.linev = ax.axvline(ax.get_xbound()[0], visible=False, **lineprops)\n \n         self.background = None\n-        self._needclear = False\n-\n-    needclear = _api.deprecate_privatize_attribute(\"3.7\")\n+        self.needclear = False\n \n-    @_api.deprecated('3.7')\n     def clear(self, event):\n-        \"\"\"Internal event handler to clear the cursor.\"\"\"\n-        self._clear(event)\n-        if self.ignore(event):\n-            return\n-        self.linev.set_visible(False)\n-        self.lineh.set_visible(False)\n-\n-    def _clear(self, event):\n         \"\"\"Internal event handler to clear the cursor.\"\"\"\n         if self.ignore(event):\n             return\n         if self.useblit:\n             self.background = self.canvas.copy_from_bbox(self.ax.bbox)\n \n-    onmove = _api.deprecate_privatize_attribute('3.7')\n-\n-    def _onmove(self, event):\n+    def onmove(self, event):\n         \"\"\"Internal event handler to draw the cursor when the mouse moves.\"\"\"\n         if self.ignore(event):\n             return\n@@ -1999,11 +1986,11 @@ def _onmove(self, event):\n             self.linev.set_visible(False)\n             self.lineh.set_visible(False)\n \n-            if self._needclear:\n+            if self.needclear:\n                 self.canvas.draw()\n-                self._needclear = False\n+                self.needclear = False\n             return\n-        self._needclear = True\n+        self.needclear = True\n \n         self.linev.set_xdata((event.xdata, event.xdata))\n         self.linev.set_visible(self.visible and self.vertOn)\n@@ -2106,8 +2093,8 @@ def connect(self):\n         \"\"\"Connect events.\"\"\"\n         for canvas, info in self._canvas_infos.items():\n             info[\"cids\"] = [\n-                canvas.mpl_connect('motion_notify_event', self._onmove),\n-                canvas.mpl_connect('draw_event', self._clear),\n+                canvas.mpl_connect('motion_notify_event', self.onmove),\n+                canvas.mpl_connect('draw_event', self.clear),\n             ]\n \n     def disconnect(self):\n@@ -2117,16 +2104,7 @@ def disconnect(self):\n                 canvas.mpl_disconnect(cid)\n             info[\"cids\"].clear()\n \n-    @_api.deprecated('3.7')\n     def clear(self, event):\n-        \"\"\"Clear the cursor.\"\"\"\n-        if self.ignore(event):\n-            return\n-        self._clear(event)\n-        for line in self.vlines + self.hlines:\n-            line.set_visible(False)\n-\n-    def _clear(self, event):\n         \"\"\"Clear the cursor.\"\"\"\n         if self.ignore(event):\n             return\n@@ -2134,9 +2112,7 @@ def _clear(self, event):\n             for canvas, info in self._canvas_infos.items():\n                 info[\"background\"] = canvas.copy_from_bbox(canvas.figure.bbox)\n \n-    onmove = _api.deprecate_privatize_attribute('3.7')\n-\n-    def _onmove(self, event):\n+    def onmove(self, event):\n         if (self.ignore(event)\n                 or event.inaxes not in self.axes\n                 or not event.canvas.widgetlock.available(self)):\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1654,7 +1654,9 @@ def test_MultiCursor(horizOn, vertOn):\n     # Can't use `do_event` as that helper requires the widget\n     # to have a single .ax attribute.\n     event = mock_event(ax1, xdata=.5, ydata=.25)\n-    multi._onmove(event)\n+    multi.onmove(event)\n+    # force a draw + draw event to exercise clear\n+    ax1.figure.canvas.draw()\n \n     # the lines in the first two ax should both move\n     for l in multi.vlines:\n@@ -1671,7 +1673,7 @@ def test_MultiCursor(horizOn, vertOn):\n     multi.horizOn = not multi.horizOn\n     multi.vertOn = not multi.vertOn\n     event = mock_event(ax1, xdata=.5, ydata=.25)\n-    multi._onmove(event)\n+    multi.onmove(event)\n     assert len([line for line in multi.vlines if line.get_visible()]) == (\n         0 if vertOn else 2)\n     assert len([line for line in multi.hlines if line.get_visible()]) == (\n@@ -1680,7 +1682,7 @@ def test_MultiCursor(horizOn, vertOn):\n     # test a move event in an Axes not part of the MultiCursor\n     # the lines in ax1 and ax2 should not have moved.\n     event = mock_event(ax3, xdata=.75, ydata=.75)\n-    multi._onmove(event)\n+    multi.onmove(event)\n     for l in multi.vlines:\n         assert l.get_xdata() == (.5, .5)\n     for l in multi.hlines:\n",
  "problem_statement": "[Doc]: annotated_cursor example seems broken\n### Documentation Link\n\nhttps://matplotlib.org/stable/gallery/widgets/annotated_cursor.html\n\n### Problem\n\nAs far as I can see, the annotated_cursor example doesn't display the cursor text position anymore (as of mpl3.7.0rc1 on qtagg).\n\n### Suggested improvement\n\n_No response_\n",
  "hints_text": "I can't get this to work on `macosx` backend either.\nBisects to 733fbb092e1fd5ed9c0ea21fbddcffcfa32c738f\nSomething similar (with raw multicursor) was actually noticed prior to merge and merged despite this issue: https://github.com/matplotlib/matplotlib/pull/19763#pullrequestreview-657017782\r\n\r\nAlso reference to https://github.com/matplotlib/matplotlib/pull/24845 for where the precise issue was fixed, and is likely similar to the fix needed here.\nSimply adding the preceding `_` in the example subclass does fix the issue.\r\n\r\n<details>\r\n<summary> Git diff </summary>\r\n\r\n```diff\r\n\r\ndiff --git a/examples/widgets/annotated_cursor.py b/examples/widgets/annotated_cursor.py\r\nindex eabec859fe..42af364686 100644\r\n--- a/examples/widgets/annotated_cursor.py\r\n+++ b/examples/widgets/annotated_cursor.py\r\n@@ -105,7 +105,7 @@ class AnnotatedCursor(Cursor):\r\n         # The position at which the cursor was last drawn\r\n         self.lastdrawnplotpoint = None\r\n \r\n-    def onmove(self, event):\r\n+    def _onmove(self, event):\r\n         \"\"\"\r\n         Overridden draw callback for cursor. Called when moving the mouse.\r\n         \"\"\"\r\n@@ -124,7 +124,7 @@ class AnnotatedCursor(Cursor):\r\n         if event.inaxes != self.ax:\r\n             self.lastdrawnplotpoint = None\r\n             self.text.set_visible(False)\r\n-            super().onmove(event)\r\n+            super()._onmove(event)\r\n             return\r\n \r\n         # Get the coordinates, which should be displayed as text,\r\n@@ -152,7 +152,7 @@ class AnnotatedCursor(Cursor):\r\n         # Baseclass redraws canvas and cursor. Due to blitting,\r\n         # the added text is removed in this call, because the\r\n         # background is redrawn.\r\n-        super().onmove(event)\r\n+        super()._onmove(event)\r\n \r\n         # Check if the display of text is still necessary.\r\n         # If not, just return.\r\n@@ -255,7 +255,7 @@ class AnnotatedCursor(Cursor):\r\n         # Return none if there is no good related point for this x position.\r\n         return None\r\n \r\n-    def clear(self, event):\r\n+    def _clear(self, event):\r\n         \"\"\"\r\n         Overridden clear callback for cursor, called before drawing the figure.\r\n         \"\"\"\r\n@@ -263,7 +263,7 @@ class AnnotatedCursor(Cursor):\r\n         # The base class saves the clean background for blitting.\r\n         # Text and cursor are invisible,\r\n         # until the first mouse move event occurs.\r\n-        super().clear(event)\r\n+        super()._clear(event)\r\n         if self.ignore(event):\r\n             return\r\n         self.text.set_visible(False)\r\n@@ -274,7 +274,7 @@ class AnnotatedCursor(Cursor):\r\n \r\n         Passes call to base class if blitting is activated, only.\r\n         In other cases, one draw_idle call is enough, which is placed\r\n-        explicitly in this class (see *onmove()*).\r\n+        explicitly in this class (see *_onmove()*).\r\n         In that case, `~matplotlib.widgets.Cursor` is not supposed to draw\r\n         something using this method.\r\n         \"\"\"\r\n```\r\n</details>\r\n\r\n\r\n\r\nUltimately, the problem is that the subclass is overriding behavior using previously public methods that are called internally, but the internal calls use the `_` prefixed method, so the overrides don't get called.\r\n\r\n\r\nIf not, should we undo that deprecation?\r\n\r\n(It was also merged without updating the deprecation version, but that was remedied in #24750)\n(accidental close while commenting)\nLooking at it again,\r\n1) I think that onmove and clear actually need to be public APIs (technically, publically overriddable) on Cursor for that widget to be useful (well, other than just displaying a crosshair with absolutely no extra info, which seems a bit pointless); \r\n2) OTOH, even with these as public API, the overriding done in annotated_cursor.py is just extremely complicated (and tightly coupled to the class internals, as this issue shows); compare with cursor_demo.py which implements essentially the same features in ~4x fewer lines and is much easier to follow (true, the snapping is to the closest point and not only decided by x/y, but that could easily be changed).\r\n\r\nTherefore, I would suggest 1) restoring onmove() and clear() as public APIs (grandfathering an essentially frozen version of the Cursor class in, as it goes all the way back to 2005), and 2) getting rid of annotated_cursor.py (because we really don't want to encourage users to do that, and should rather point them to cursor_demo.py).  If really desired we could augment cursor_demo to implement tracking and text positioning as in annotated_cursor, but I think it's optional.",
  "created_at": "2023-02-02T01:42:19Z",
  "version": "3.6",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs3]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_deprecation_selector_visible_attribute\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[RectangleSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[EllipseSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_add_remove_set\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_ellipse\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_handles\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[vertical-True-kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs3]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_direction\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_tool_line_handle\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_snapping_values_span_selector\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_snap\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_CheckButtons\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[none]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolbar2]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolmanager]\", \"lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons_props[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_button_active_conflict\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons_activecolor_change[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_button_props[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_buttons_rectangles[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_buttons_lines[png]\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping\", \"lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical\", \"lib/matplotlib/tests/test_widgets.py::test_slider_reset\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_box\"]",
  "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.818503",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}