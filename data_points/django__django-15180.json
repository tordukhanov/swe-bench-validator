{
  "repo": "django/django",
  "instance_id": "django__django-15180",
  "base_commit": "7e4a9a9f696574a18f5c98f34d5a88e254b2d394",
  "patch": "diff --git a/django/urls/conf.py b/django/urls/conf.py\n--- a/django/urls/conf.py\n+++ b/django/urls/conf.py\n@@ -57,6 +57,10 @@ def include(arg, namespace=None):\n def _path(route, view, kwargs=None, name=None, Pattern=None):\n     from django.views import View\n \n+    if kwargs is not None and not isinstance(kwargs, dict):\n+        raise TypeError(\n+            f'kwargs argument must be a dict, but got {kwargs.__class__.__name__}.'\n+        )\n     if isinstance(view, (list, tuple)):\n         # For include(...) processing.\n         pattern = Pattern(route, is_endpoint=False)\n",
  "test_patch": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -4,7 +4,9 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.test import SimpleTestCase\n from django.test.utils import override_settings\n-from django.urls import NoReverseMatch, Resolver404, path, resolve, reverse\n+from django.urls import (\n+    NoReverseMatch, Resolver404, path, re_path, resolve, reverse,\n+)\n from django.views import View\n \n from .converters import DynamicConverter\n@@ -137,6 +139,13 @@ def test_path_inclusion_is_reversible(self):\n         url = reverse('inner-extra', kwargs={'extra': 'something'})\n         self.assertEqual(url, '/included_urls/extra/something/')\n \n+    def test_invalid_kwargs(self):\n+        msg = 'kwargs argument must be a dict, but got str.'\n+        with self.assertRaisesMessage(TypeError, msg):\n+            path('hello/', empty_view, 'name')\n+        with self.assertRaisesMessage(TypeError, msg):\n+            re_path('^hello/$', empty_view, 'name')\n+\n     def test_invalid_converter(self):\n         msg = \"URL route 'foo/<nonexistent:var>/' uses invalid converter 'nonexistent'.\"\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n",
  "problem_statement": "path()/re_path() should raise a TypeError when kwargs is not a dict.\nDescription\n\t\nApparently, however many years into using Django, I'm still capable of making a \"newbie\" mistake and getting confused. So perhaps other actual new users encounter similar, especially given the lack of typing specifiers.\nI defined a URL like so:\nurlpatterns = [\n\tpath(\"path/to/thing\", MyView.as_view(), \"my_view\"),\n]\nwhich ... well, you either spot the issue immediately or you don't, and end up with the following. If you try and resolve() the path (eg: by making a request in your browser), you'll get something like:\nIn [3]: resolve(\"/path/to/thing\")\n~/Code/django/django/urls/base.py in resolve(path, urlconf)\n\t 22\t if urlconf is None:\n\t 23\t\t urlconf = get_urlconf()\n---> 24\t return get_resolver(urlconf).resolve(path)\n\t 25\n\t 26\n~/Code/django/django/urls/resolvers.py in resolve(self, path)\n\t586\t\t\t for pattern in self.url_patterns:\n\t587\t\t\t\t try:\n--> 588\t\t\t\t\t sub_match = pattern.resolve(new_path)\n\t589\t\t\t\t except Resolver404 as e:\n\t590\t\t\t\t\t self._extend_tried(tried, pattern, e.args[0].get('tried'))\n~/Code/django/django/urls/resolvers.py in resolve(self, path)\n\t388\t\t\t new_path, args, kwargs = match\n\t389\t\t\t # Pass any extra_kwargs as **kwargs.\n--> 390\t\t\t kwargs.update(self.default_args)\n\t391\t\t\t return ResolverMatch(self.callback, args, kwargs, self.pattern.name, route=str(self.pattern))\n\t392\nValueError: dictionary update sequence element #0 has length 1; 2 is required\nThe crux of the issue being that I meant to give the URL a name, and it's a super unfortunate history that kwargs comes before the name argument (because nearly everyone gives a URL a name, but passing static kwargs is comparatively infrequent). So what's actually happened is that kwargs = \"my_view\" and eventually self.default_args = \"my_view\".\nIf I update to path(\"path/to/thing\", MyView.as_view(), \"my_view\", name=\"my_view\"), leaving the type incorrect, I can get the following error via reverse, too:\nIn [4]: reverse(\"my_view\")\n~/Code/django/django/urls/base.py in reverse(viewname, urlconf, args, kwargs, current_app)\n\t 84\t\t\t resolver = get_ns_resolver(ns_pattern, resolver, tuple(ns_converters.items()))\n\t 85\n---> 86\t return resolver._reverse_with_prefix(view, prefix, *args, **kwargs)\n\t 87\n\t 88\n~/Code/django/django/urls/resolvers.py in _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs)\n\t669\t\t\t\t\t if set(kwargs).symmetric_difference(params).difference(defaults):\n\t670\t\t\t\t\t\t continue\n--> 671\t\t\t\t\t if any(kwargs.get(k, v) != v for k, v in defaults.items()):\n\t672\t\t\t\t\t\t continue\n\t673\t\t\t\t\t candidate_subs = kwargs\nAttributeError: 'str' object has no attribute 'items'\nBoth of these suggest that either there should be a type-guard in _path to assert it's dict-ish (if not None), or a system check on URLPattern to raise a friendly message. Well, they actually continue to suggest to me that everything after the view argument should be keyword-only, or that kwargs should come later, but I suspect those to be a harder sell ;)\nThis is specifically around the kwargs, but it doesn't look like there's any guarding on the name either, and I feel like a name of {'test': 'test'} (i.e. accidentally swapped both positionals) is likely to bite & cause an issue somewhere.\n",
  "hints_text": "I agree that this behavior should be edited, but I think the ticket type should be Cleanup/optimization.\nWell, they actually continue to suggest to me that everything after the view argument should be keyword-only, or that kwargs should come later, but I suspect those to be a harder sell ;) Keyword-only arguments would be great, but it will affect too many users. We reject such tickets in most of cases, however here it's justified because kwargs as a positional argument can be confusing, so let's raise a TypeError when kwargs is not a dict.",
  "created_at": "2021-12-10T22:36:04Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_invalid_kwargs (urlpatterns.tests.SimplifiedURLTests)\"]",
  "PASS_TO_PASS": "[\"test_allows_non_ascii_but_valid_identifiers (urlpatterns.tests.ParameterRestrictionTests)\", \"test_integer_parameter_name_causes_exception (urlpatterns.tests.ParameterRestrictionTests)\", \"test_non_identifier_parameter_name_causes_exception (urlpatterns.tests.ParameterRestrictionTests)\", \"test_resolve_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_resolve_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_reverse_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_reverse_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_matching_urls (urlpatterns.tests.ConverterTests)\", \"test_nonmatching_urls (urlpatterns.tests.ConverterTests)\", \"test_matching_urls_same_name (urlpatterns.tests.SameNameTests)\", \"test_converter_resolve (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse_with_second_layer_instance_namespace (urlpatterns.tests.SimplifiedURLTests)\", \"test_invalid_converter (urlpatterns.tests.SimplifiedURLTests)\", \"test_invalid_view (urlpatterns.tests.SimplifiedURLTests)\", \"test_invalid_view_instance (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_matchable (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_reversible (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_double_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_empty_string_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_multiple_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_typed_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_without_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_with_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_without_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_trailing_newlines (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path_with_missing_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path_with_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_two_variable_at_start_of_path_pattern (urlpatterns.tests.SimplifiedURLTests)\", \"test_whitespace_in_route (urlpatterns.tests.SimplifiedURLTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.720791",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}