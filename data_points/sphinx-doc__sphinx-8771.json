{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8771",
  "base_commit": "647510e184f3bb8c14d82911b6a0e1d9f8a2b15b",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2634,6 +2634,7 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n \n     app.connect('config-inited', migrate_autodoc_member_order, priority=800)\n \n+    app.setup_extension('sphinx.ext.autodoc.preserve_defaults')\n     app.setup_extension('sphinx.ext.autodoc.type_comment')\n     app.setup_extension('sphinx.ext.autodoc.typehints')\n \ndiff --git a/sphinx/ext/autodoc/preserve_defaults.py b/sphinx/ext/autodoc/preserve_defaults.py\nnew file mode 100644\n--- /dev/null\n+++ b/sphinx/ext/autodoc/preserve_defaults.py\n@@ -0,0 +1,88 @@\n+\"\"\"\n+    sphinx.ext.autodoc.preserve_defaults\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Preserve the default argument values of function signatures in source code\n+    and keep them not evaluated for readability.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import ast\n+import inspect\n+from typing import Any, Dict\n+\n+from sphinx.application import Sphinx\n+from sphinx.locale import __\n+from sphinx.pycode.ast import parse as ast_parse\n+from sphinx.pycode.ast import unparse as ast_unparse\n+from sphinx.util import logging\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class DefaultValue:\n+    def __init__(self, name: str) -> None:\n+        self.name = name\n+\n+    def __repr__(self) -> str:\n+        return self.name\n+\n+\n+def get_function_def(obj: Any) -> ast.FunctionDef:\n+    \"\"\"Get FunctionDef object from living object.\n+    This tries to parse original code for living object and returns\n+    AST node for given *obj*.\n+    \"\"\"\n+    try:\n+        source = inspect.getsource(obj)\n+        if source.startswith((' ', r'\\t')):\n+            # subject is placed inside class or block.  To read its docstring,\n+            # this adds if-block before the declaration.\n+            module = ast_parse('if True:\\n' + source)\n+            return module.body[0].body[0]  # type: ignore\n+        else:\n+            module = ast_parse(source)\n+            return module.body[0]  # type: ignore\n+    except (OSError, TypeError):  # failed to load source code\n+        return None\n+\n+\n+def update_defvalue(app: Sphinx, obj: Any, bound_method: bool) -> None:\n+    \"\"\"Update defvalue info of *obj* using type_comments.\"\"\"\n+    if not app.config.autodoc_preserve_defaults:\n+        return\n+\n+    try:\n+        function = get_function_def(obj)\n+        if function.args.defaults or function.args.kw_defaults:\n+            sig = inspect.signature(obj)\n+            defaults = list(function.args.defaults)\n+            kw_defaults = list(function.args.kw_defaults)\n+            parameters = list(sig.parameters.values())\n+            for i, param in enumerate(parameters):\n+                if param.default is not param.empty:\n+                    if param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):\n+                        value = DefaultValue(ast_unparse(defaults.pop(0)))  # type: ignore\n+                        parameters[i] = param.replace(default=value)\n+                    else:\n+                        value = DefaultValue(ast_unparse(kw_defaults.pop(0)))  # type: ignore\n+                        parameters[i] = param.replace(default=value)\n+            sig = sig.replace(parameters=parameters)\n+            obj.__signature__ = sig\n+    except (AttributeError, TypeError):\n+        # failed to update signature (ex. built-in or extension types)\n+        pass\n+    except NotImplementedError as exc:  # failed to ast.unparse()\n+        logger.warning(__(\"Failed to parse a default argument value for %r: %s\"), obj, exc)\n+\n+\n+def setup(app: Sphinx) -> Dict[str, Any]:\n+    app.add_config_value('autodoc_preserve_defaults', False, True)\n+    app.connect('autodoc-before-process-signature', update_defvalue)\n+\n+    return {\n+        'version': '1.0',\n+        'parallel_read_safe': True\n+    }\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/preserve_defaults.py b/tests/roots/test-ext-autodoc/target/preserve_defaults.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n@@ -0,0 +1,19 @@\n+from datetime import datetime\n+from typing import Any\n+\n+CONSTANT = 'foo'\n+SENTINEL = object()\n+\n+\n+def foo(name: str = CONSTANT,\n+        sentinal: Any = SENTINEL,\n+        now: datetime = datetime.now()) -> None:\n+    \"\"\"docstring\"\"\"\n+\n+\n+class Class:\n+    \"\"\"docstring\"\"\"\n+\n+    def meth(self, name: str = CONSTANT, sentinal: Any = SENTINEL,\n+             now: datetime = datetime.now()) -> None:\n+        \"\"\"docstring\"\"\"\ndiff --git a/tests/test_ext_autodoc_preserve_defaults.py b/tests/test_ext_autodoc_preserve_defaults.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/test_ext_autodoc_preserve_defaults.py\n@@ -0,0 +1,45 @@\n+\"\"\"\n+    test_ext_autodoc_preserve_defaults\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_preserve_defaults': True})\n+def test_preserve_defaults(app):\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.preserve_defaults', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.preserve_defaults',\n+        '',\n+        '',\n+        '.. py:class:: Class()',\n+        '   :module: target.preserve_defaults',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:method:: Class.meth(name: str = CONSTANT, sentinal: Any = SENTINEL, '\n+        'now: datetime.datetime = datetime.now()) -> None',\n+        '      :module: target.preserve_defaults',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '.. py:function:: foo(name: str = CONSTANT, sentinal: Any = SENTINEL, now: '\n+        'datetime.datetime = datetime.now()) -> None',\n+        '   :module: target.preserve_defaults',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n",
  "problem_statement": "Keeping original signatures for functions/methods\nI'm using Sphinx's autodoc feature to document my API.\n\nExample:\n\n```\n#!python\n\nDEFAULT_OPTION = 'default'\ndef do_something(msg, option=DEFAULT_OPTION):\n    print msg\n```\n\nThe generated documentation now shows the following signature:\n\n```\ndo_something(msg, option='default')\n```\n\nIt would be nice if there was a way to tell Sphinx to keep the name of the constant value, i.e.\n\n```\ndo_something(msg, option=DEFAULT_OPTION)\n```\n\nAt the moment the only alternative is to write all signature by hand again.\n\n---\n- Bitbucket: https://bitbucket.org/birkenfeld/sphinx/issue/759\n- Originally reported by: Sebastian Rahlf\n- Originally created at: 2011-08-31T11:29:50.797\n\n",
  "hints_text": "+1\n\n@shimizukawa,@martinpengellyphillips you may try my fork with this feature.\nInstall [sphinx](https://github.com/hypnocat/sphinx), and add to conf.py\nautodoc_dumb_docstring = True\nthen rebuild docs. Feel free to msg me.\n\nAnother alternative that would be nice and might work easily is to allow the user to specify the value of an argument instead of the entire signature.\n- Unspecified arguments would be parsed by sphinx as usually.\n- Only the specified arguments would be annotated differently.\n- Omitting `:annotation:` would remove `myarg` from the signature so that it didn't show up at all as an interesting for secret optional args.\n- Specifying blank `:annotation:` would omit the default altogether but the keyword argument would still show up, just with no default value.\n- If `myarg` is not in the list of arguments parsed from the signature, then a warning is raised and the directive does nothing.\n- Markup roles like `:class:`, `:data:`, etc. can be used to link to the specified default.\n- If `myarg` is not a keyword argument, then should it warn or should it specify the default in defiance of all logic? probably warn.\n\nFor example, given the following `mymodule.py` file:\n\n```\n\"\"\"a module with special treatment of arguments\"\"\"\n\nDEFAULT = \"a very long value that I don't want to display in my function, class and method signatures\"\n\"\"\"a description of the default\"\"\"\n\ndef myfunc(args, myarg=DEFAULT, kwargs=None):\n    \"\"\"\n    a function with an ugly default arg value\n\n    :param args: some arguments\n    :param myarg: a keyword arg with a default specified by a module constant\n    :param kwargs: some keyword arguments\n    \"\"\"\n    pass\n\nclass MyClass():\n    \"\"\"a class with an ugly default arg value in its constructor\"\"\"\n    def __init__(self, args, myarg=DEFAULT, kwargs=None):\n        pass\n    def mymeth(self, args, myarg=DEFAULT, kwargs=None):\n        \"\"\"a method with an ugly default arg value\"\"\"\n        pass\n```\n\nuse `mymodule.rst` file with the following:\n\n```\n.. automodule:: mymodule\n\n.. autodata:: DEFAULT\n   :annotation: a default value\n\nThe value of ``myarg`` in this function is replaced by :data:`~mymodule.DEFAULT`\n\n.. autofunction:: myfunc\n   .. argument:: myarg\n      :annotation: :data:`~mymodule.DEFAULT`\n\nThe value of ``myarg`` in this class constructor is not shown\n\n.. autoClass:: MyClass\n   :members:\n   .. argument:: myarg\n      :annotation:\n\nThe value of ``myarg`` in this class method is hidden\n\n.. automethod:: MyClass.mymeth\n   .. argument:: myarg\n```\n\nwould output the following:\n\n> mymodule\n> a module with special treatment of arguments\n> \n> mymodule.DEFAULT = 'a default value'\n> a description of the default\n> \n> The value of `myarg` in this function is replaced by :data:`~mymodule.DEFAULT`\n> \n> mymodule.myfunc(args, myarg=**DEFAULT**, kwargs=None)\n> a function with an ugly default arg value\n> \n> **Parameters**\n> - args - some arguments\n> - myarg - a keyword arg with a default specified by a module constant\n> - kwargs - some keyword arguments\n> \n> The value of `myarg` in this class constructor is not shown\n> \n> mymodule.MyClass(args, myarg=, kwargs=None)\n> a class with an ugly default arg value in its constructor\n> \n> The value of `myarg` in this class method is hidden\n> \n> mymodule.MyClass.mymeth(args, kwargs=None)\n> a method with an ugly default arg value\n",
  "created_at": "2021-01-27T17:09:38Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_preserve_defaults.py::test_preserve_defaults\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "8939a75efaa911a12dbe6edccedf261e88bf7eef",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.061339",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}