{
  "repo": "django/django",
  "instance_id": "django__django-11044",
  "base_commit": "8ec7ded3706fe66bf307ed339eb852d73f6d10d0",
  "patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -11,6 +11,7 @@\n # pretty_name is imported for backwards compatibility in Django 1.9\n from django.forms.utils import ErrorDict, ErrorList, pretty_name  # NOQA\n from django.forms.widgets import Media, MediaDefiningClass\n+from django.utils.datastructures import MultiValueDict\n from django.utils.functional import cached_property\n from django.utils.html import conditional_escape, html_safe\n from django.utils.safestring import mark_safe\n@@ -69,8 +70,8 @@ def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  initial=None, error_class=ErrorList, label_suffix=None,\n                  empty_permitted=False, field_order=None, use_required_attribute=None, renderer=None):\n         self.is_bound = data is not None or files is not None\n-        self.data = {} if data is None else data\n-        self.files = {} if files is None else files\n+        self.data = MultiValueDict() if data is None else data\n+        self.files = MultiValueDict() if files is None else files\n         self.auto_id = auto_id\n         if prefix is not None:\n             self.prefix = prefix\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3671,6 +3671,11 @@ class DataForm(Form):\n         self.assertTrue(f.is_valid())\n         self.assertEqual(f.cleaned_data, {'data': 'xyzzy'})\n \n+    def test_empty_data_files_multi_value_dict(self):\n+        p = Person()\n+        self.assertIsInstance(p.data, MultiValueDict)\n+        self.assertIsInstance(p.files, MultiValueDict)\n+\n \n class CustomRenderer(DjangoTemplates):\n     pass\n",
  "problem_statement": "Make Form data/files initialize with an empty MultiValueDict rather than dict\nDescription\n\t\nYou might have a look here:\n​https://github.com/django/django/blob/362813d6287925b8f63f/django/forms/forms.py#L78\nNone is converted to a regular dict but not to a QueryDict.\nMethods of the form might rely on the API of a QueryDict such as 'iterlists' or 'getlist' which a regular dict doesn't provide.\n",
  "hints_text": "Hi, To be clear, ​QueryDict is a subclass of dict. Is the idea to add a feature? At a first look, the dictionary is there to avoid that the code breaks. # edited to fix english Regards,\nReplying to Herbert Fortes: Is the idea to add a feature? Sorry, if that wasn't clear from the issue itself. Instead of: self.data = {} if data is None else data this would be 100% compatible with what views usually pass into forms: self.data = QueryDict() if data is None else data At a first look, the dictionary is there to avoid that the code breaks. I think so as well and it works in many places until people think they can rely on the QueryDict API such as 'iterlists' or 'getlist' which is not always true.\nA similar issue was raised in #27989. The main concern I have is that this would couple django.forms to django.http.\nYes, I thought that #27989 was the reason to change it from \"data or {}\" to ternary operator. What do you think about: 1) either using MultiValueDict instead of QueryDict? That would couple django.forms to django.utils.datastructures 2) or moving QueryDict to django.utils.datastructures and then using it in the BaseForm constructor? At least, MultiValueDict supports the getlist, setlist and lists APIs. So, those would behave the same because the dicts are empty anyway. Although, I would rather tend to option 2. What do you think?\nI like the MultiValueDict approach, +1.\nMultiValueDict +1\nOkay seems like we have winner. :D Just exploring the other option a bit more: why is moving QueryDict to datastructures not a feasible option? It actually sounds like a more reasonable place for it.\nI agree that QueryDict should remain in django.http. I don't feel that it's something meant for use outside of the request/response cycle.\nI don't feel that it's something meant for use outside of the request/response cycle. Sorry, for still nagging here, but I still don't understand why it cannot be moved to datastructures. Its doc string: \"A specialized MultiValueDict which represents a query string.\" <<< That sounds like a perfect valid datastructure handling encoding and query string syntax. Its source code has no reference to request/responses. Also APIs MultiValueDict doesn't provide: urlencode encoding (getter and setter) fromkeys mutability isinstance check I just want to make sure we don't need to touch this part in 3 years AGAIN when somebody else needs the real thing.\nDo we want to move ahead with the MultiValueDict, or delay for more discussion concerning the QueryDict?\nIMHO, an empty dict should not make too much noise on the code. For now at least.",
  "created_at": "2019-03-02T18:14:26Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_empty_data_files_multi_value_dict (forms_tests.tests.test_forms.FormsTestCase)\"]",
  "PASS_TO_PASS": "[\"test_attribute_class (forms_tests.tests.test_forms.RendererTests)\", \"test_attribute_instance (forms_tests.tests.test_forms.RendererTests)\", \"test_attribute_override (forms_tests.tests.test_forms.RendererTests)\", \"test_default (forms_tests.tests.test_forms.RendererTests)\", \"test_kwarg_class (forms_tests.tests.test_forms.RendererTests)\", \"test_kwarg_instance (forms_tests.tests.test_forms.RendererTests)\", \"test_accessing_clean (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id_false (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id_on_form_and_field (forms_tests.tests.test_forms.FormsTestCase)\", \"test_auto_id_true (forms_tests.tests.test_forms.FormsTestCase)\", \"test_baseform_repr (forms_tests.tests.test_forms.FormsTestCase)\", \"test_baseform_repr_dont_trigger_validation (forms_tests.tests.test_forms.FormsTestCase)\", \"test_basic_processing_in_view (forms_tests.tests.test_forms.FormsTestCase)\", \"BoundField without any choices (subwidgets) evaluates to True.\", \"test_boundfield_empty_label (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_id_for_label (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_id_for_label_override_by_attrs (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_initial_called_once (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_label_tag (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_label_tag_custom_widget_id_for_label (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_label_tag_no_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_slice (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_value_disabled_callable_initial (forms_tests.tests.test_forms.FormsTestCase)\", \"test_boundfield_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_callable_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_changed_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_changing_cleaned_data_in_clean (forms_tests.tests.test_forms.FormsTestCase)\", \"test_changing_cleaned_data_nothing_returned (forms_tests.tests.test_forms.FormsTestCase)\", \"test_checkbox_auto_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_class_prefix (forms_tests.tests.test_forms.FormsTestCase)\", \"test_cleaned_data_only_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_custom_boundfield (forms_tests.tests.test_forms.FormsTestCase)\", \"test_custom_empty_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_datetime_changed_data_callable_with_microseconds (forms_tests.tests.test_forms.FormsTestCase)\", \"test_datetime_clean_initial_callable_disabled (forms_tests.tests.test_forms.FormsTestCase)\", \"test_dynamic_construction (forms_tests.tests.test_forms.FormsTestCase)\", \"test_dynamic_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_permitted (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_permitted_and_use_required_attribute (forms_tests.tests.test_forms.FormsTestCase)\", \"test_empty_querydict_args (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"#21962 - adding html escape flag to ErrorDict\", \"test_error_escaping (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_html_required_html_classes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_class_has_one_class_specified (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_class_not_specified (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_with_hidden_field_errors_has_correct_class (forms_tests.tests.test_forms.FormsTestCase)\", \"test_error_list_with_non_field_errors_has_correct_class (forms_tests.tests.test_forms.FormsTestCase)\", \"test_errorlist_override (forms_tests.tests.test_forms.FormsTestCase)\", \"test_escaping (forms_tests.tests.test_forms.FormsTestCase)\", \"test_explicit_field_order (forms_tests.tests.test_forms.FormsTestCase)\", \"test_extracting_hidden_and_visible (forms_tests.tests.test_forms.FormsTestCase)\", \"#5749 - `field_name` may be used as a key in _html_output().\", \"test_field_name_with_hidden_input (forms_tests.tests.test_forms.FormsTestCase)\", \"test_field_name_with_hidden_input_and_non_matching_row_ender (forms_tests.tests.test_forms.FormsTestCase)\", \"test_field_named_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_field_order (forms_tests.tests.test_forms.FormsTestCase)\", \"test_field_with_css_class (forms_tests.tests.test_forms.FormsTestCase)\", \"test_field_without_css_classes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_filefield_initial_callable (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_html_attributes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_disabled_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_iterable_boundfield (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_iterable_boundfield_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_form_with_noniterable_boundfield (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_choices (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_file_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_multiple_choice (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_null_boolean (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_prefixes (forms_tests.tests.test_forms.FormsTestCase)\", \"test_forms_with_radio (forms_tests.tests.test_forms.FormsTestCase)\", \"test_get_initial_for_field (forms_tests.tests.test_forms.FormsTestCase)\", \"test_has_error (forms_tests.tests.test_forms.FormsTestCase)\", \"test_help_text (forms_tests.tests.test_forms.FormsTestCase)\", \"test_hidden_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_hidden_initial_gets_id (forms_tests.tests.test_forms.FormsTestCase)\", \"test_hidden_widget (forms_tests.tests.test_forms.FormsTestCase)\", \"test_html_safe (forms_tests.tests.test_forms.FormsTestCase)\", \"test_id_on_field (forms_tests.tests.test_forms.FormsTestCase)\", \"test_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_initial_datetime_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_iterable_boundfield_select (forms_tests.tests.test_forms.FormsTestCase)\", \"test_label_has_required_css_class (forms_tests.tests.test_forms.FormsTestCase)\", \"test_label_split_datetime_not_displayed (forms_tests.tests.test_forms.FormsTestCase)\", \"test_label_suffix (forms_tests.tests.test_forms.FormsTestCase)\", \"test_label_tag_override (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multipart_encoded_form (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multiple_choice_checkbox (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multiple_choice_list_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multiple_hidden (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multivalue_deep_copy (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multivalue_field_validation (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multivalue_initial_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_multivalue_optional_subfields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_only_hidden_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_optional_data (forms_tests.tests.test_forms.FormsTestCase)\", \"test_specifying_labels (forms_tests.tests.test_forms.FormsTestCase)\", \"test_subclassing_forms (forms_tests.tests.test_forms.FormsTestCase)\", \"test_templates_with_forms (forms_tests.tests.test_forms.FormsTestCase)\", \"test_unbound_form (forms_tests.tests.test_forms.FormsTestCase)\", \"test_unicode_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_update_error_dict (forms_tests.tests.test_forms.FormsTestCase)\", \"test_use_required_attribute_false (forms_tests.tests.test_forms.FormsTestCase)\", \"test_use_required_attribute_true (forms_tests.tests.test_forms.FormsTestCase)\", \"test_validating_multiple_fields (forms_tests.tests.test_forms.FormsTestCase)\", \"test_validators_independence (forms_tests.tests.test_forms.FormsTestCase)\", \"test_various_boolean_values (forms_tests.tests.test_forms.FormsTestCase)\", \"test_widget_output (forms_tests.tests.test_forms.FormsTestCase)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.557386",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}