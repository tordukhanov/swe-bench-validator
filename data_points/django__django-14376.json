{
  "repo": "django/django",
  "instance_id": "django__django-14376",
  "base_commit": "d06c5b358149c02a62da8a5469264d05f29ac659",
  "patch": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -200,9 +200,9 @@ def get_connection_params(self):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\ndiff --git a/django/db/backends/mysql/client.py b/django/db/backends/mysql/client.py\n--- a/django/db/backends/mysql/client.py\n+++ b/django/db/backends/mysql/client.py\n@@ -8,7 +8,10 @@ class DatabaseClient(BaseDatabaseClient):\n     def settings_to_cmd_args_env(cls, settings_dict, parameters):\n         args = [cls.executable_name]\n         env = None\n-        db = settings_dict['OPTIONS'].get('db', settings_dict['NAME'])\n+        database = settings_dict['OPTIONS'].get(\n+            'database',\n+            settings_dict['OPTIONS'].get('db', settings_dict['NAME']),\n+        )\n         user = settings_dict['OPTIONS'].get('user', settings_dict['USER'])\n         password = settings_dict['OPTIONS'].get(\n             'password',\n@@ -51,7 +54,7 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):\n             args += [\"--ssl-key=%s\" % client_key]\n         if charset:\n             args += ['--default-character-set=%s' % charset]\n-        if db:\n-            args += [db]\n+        if database:\n+            args += [database]\n         args.extend(parameters)\n         return args, env\n",
  "test_patch": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -50,41 +50,49 @@ def test_options_override_settings_proper_values(self):\n             'optiondbname',\n         ]\n         expected_env = {'MYSQL_PWD': 'optionpassword'}\n-        self.assertEqual(\n-            self.settings_to_cmd_args_env({\n-                'NAME': 'settingdbname',\n-                'USER': 'settinguser',\n-                'PASSWORD': 'settingpassword',\n-                'HOST': 'settinghost',\n-                'PORT': settings_port,\n-                'OPTIONS': {\n-                    'db': 'optiondbname',\n-                    'user': 'optionuser',\n-                    'passwd': 'optionpassword',\n-                    'host': 'optionhost',\n-                    'port': options_port,\n-                },\n-            }),\n-            (expected_args, expected_env),\n-        )\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n \n-    def test_options_password(self):\n+    def test_options_non_deprecated_keys_preferred(self):\n         expected_args = [\n             'mysql',\n             '--user=someuser',\n             '--host=somehost',\n             '--port=444',\n-            'somedbname',\n+            'optiondbname',\n         ]\n         expected_env = {'MYSQL_PWD': 'optionpassword'}\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\n-                'NAME': 'somedbname',\n+                'NAME': 'settingdbname',\n                 'USER': 'someuser',\n                 'PASSWORD': 'settingpassword',\n                 'HOST': 'somehost',\n                 'PORT': 444,\n-                'OPTIONS': {'password': 'optionpassword'},\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n             }),\n             (expected_args, expected_env),\n         )\n",
  "problem_statement": "MySQL backend uses deprecated \"db\" and \"passwd\" kwargs.\nDescription\n\t\nThe \"db\" and \"passwd\" usage can be seen at ​https://github.com/django/django/blob/ca9872905559026af82000e46cde6f7dedc897b6/django/db/backends/mysql/base.py#L202-L205 in main. mysqlclient recently marked these two kwargs as deprecated (see ​https://github.com/PyMySQL/mysqlclient/commit/fa25358d0f171bd8a63729c5a8d76528f4ae74e9) in favor of \"database\" and \"password\" respectively. mysqlclient added support for \"database\" and \"password\" in 1.3.8 with ​https://github.com/PyMySQL/mysqlclient/commit/66029d64060fca03f3d0b22661b1b4cf9849ef03.\nDjango 2.2, 3.1, and 3.2 all require a minimum version of mysqlclient newer than 1.3.8, so a fix for this could be backported to all currently supported versions of Django.\n",
  "hints_text": "Thanks for this report. Django 2.2, 3.1, and 3.2 all require a minimum version of mysqlclient newer than 1.3.8, so a fix for this could be backported to all currently supported versions of Django. Django 2.2 and 3.1 are in extended support so they don't receive bugfixes anymore (except security patches). We'll document the maximum supported version of mysqlclient in these versions as soon as deprecated kwargs are removed. IMO we can backport this to the Django 3.2 since it's LTS.",
  "created_at": "2021-05-10T20:42:18Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_options_non_deprecated_keys_preferred (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_options_override_settings_proper_values (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_parameters (dbshell.test_mysql.MySqlDbshellCommandTestCase)\"]",
  "PASS_TO_PASS": "[\"test_basic_params_specified_in_settings (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_can_connect_using_sockets (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_crash_password_does_not_leak (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_fails_with_keyerror_on_incomplete_config (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_options_charset (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_ssl_certificate_is_added (dbshell.test_mysql.MySqlDbshellCommandTestCase)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.689396",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}