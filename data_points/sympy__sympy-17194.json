{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17194",
  "base_commit": "fec5dc5fd0d9a04cf974f733bc375bd8db853d4c",
  "patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -15,6 +15,7 @@\n import mpmath.libmp as mlib\n from mpmath.libmp import prec_to_dps\n \n+\n class MathMLPrinterBase(Printer):\n     \"\"\"Contains common code required for MathMLContentPrinter and\n     MathMLPresentationPrinter.\n@@ -138,6 +139,14 @@ def mathml_tag(self, e):\n             'Number': 'cn',\n             'int': 'cn',\n             'Pow': 'power',\n+            'Max': 'max',\n+            'Min': 'min',\n+            'Abs': 'abs',\n+            'And': 'and',\n+            'Or': 'or',\n+            'Xor': 'xor',\n+            'Not': 'not',\n+            'Implies': 'implies',\n             'Symbol': 'ci',\n             'MatrixSymbol': 'ci',\n             'RandomSymbol': 'ci',\n@@ -147,14 +156,27 @@ def mathml_tag(self, e):\n             'cos': 'cos',\n             'tan': 'tan',\n             'cot': 'cot',\n+            'csc': 'csc',\n+            'sec': 'sec',\n+            'sinh': 'sinh',\n+            'cosh': 'cosh',\n+            'tanh': 'tanh',\n+            'coth': 'coth',\n+            'csch': 'csch',\n+            'sech': 'sech',\n             'asin': 'arcsin',\n             'asinh': 'arcsinh',\n             'acos': 'arccos',\n             'acosh': 'arccosh',\n             'atan': 'arctan',\n             'atanh': 'arctanh',\n-            'acot': 'arccot',\n             'atan2': 'arctan',\n+            'acot': 'arccot',\n+            'acoth': 'arccoth',\n+            'asec': 'arcsec',\n+            'asech': 'arcsech',\n+            'acsc': 'arccsc',\n+            'acsch': 'arccsch',\n             'log': 'ln',\n             'Equality': 'eq',\n             'Unequality': 'neq',\n@@ -298,6 +320,18 @@ def _print_Pi(self, e):\n     def _print_Infinity(self, e):\n         return self.dom.createElement('infinity')\n \n+    def _print_NaN(self, e):\n+        return self.dom.createElement('notanumber')\n+\n+    def _print_EmptySet(self, e):\n+        return self.dom.createElement('emptyset')\n+\n+    def _print_BooleanTrue(self, e):\n+        return self.dom.createElement('true')\n+\n+    def _print_BooleanFalse(self, e):\n+        return self.dom.createElement('false')\n+\n     def _print_NegativeInfinity(self, e):\n         x = self.dom.createElement('apply')\n         x.appendChild(self.dom.createElement('minus'))\n@@ -485,6 +519,10 @@ def _print_int(self, p):\n         dom_element.appendChild(self.dom.createTextNode(str(p)))\n         return dom_element\n \n+    _print_Implies = _print_AssocOp\n+    _print_Not = _print_AssocOp\n+    _print_Xor = _print_AssocOp\n+\n \n class MathMLPresentationPrinter(MathMLPrinterBase):\n     \"\"\"Prints an expression to the Presentation MathML markup language.\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py\n--- a/sympy/printing/tests/test_mathml.py\n+++ b/sympy/printing/tests/test_mathml.py\n@@ -5,7 +5,8 @@\n     Lambda, IndexedBase, symbols, zoo, elliptic_f, elliptic_e, elliptic_pi, Ei, \\\n     expint, jacobi, gegenbauer, chebyshevt, chebyshevu, legendre, assoc_legendre, \\\n     laguerre, assoc_laguerre, hermite, TribonacciConstant, Contains, \\\n-    LambertW\n+    LambertW, cot, coth, acot, acoth, csc, acsc, csch, acsch, sec, asec, sech, \\\n+    asech\n \n from sympy import elliptic_k, totient, reduced_totient, primenu, primeomega, \\\n     fresnelc, fresnels, Heaviside\n@@ -218,6 +219,18 @@ def test_content_mathml_constants():\n     mml = mathml(EulerGamma)\n     assert mml == '<eulergamma/>'\n \n+    mml = mathml(EmptySet())\n+    assert mml == '<emptyset/>'\n+\n+    mml = mathml(S.true)\n+    assert mml == '<true/>'\n+\n+    mml = mathml(S.false)\n+    assert mml == '<false/>'\n+\n+    mml = mathml(S.NaN)\n+    assert mml == '<notanumber/>'\n+\n \n def test_content_mathml_trig():\n     mml = mp._print(sin(x))\n@@ -229,6 +242,15 @@ def test_content_mathml_trig():\n     mml = mp._print(tan(x))\n     assert mml.childNodes[0].nodeName == 'tan'\n \n+    mml = mp._print(cot(x))\n+    assert mml.childNodes[0].nodeName == 'cot'\n+\n+    mml = mp._print(csc(x))\n+    assert mml.childNodes[0].nodeName == 'csc'\n+\n+    mml = mp._print(sec(x))\n+    assert mml.childNodes[0].nodeName == 'sec'\n+\n     mml = mp._print(asin(x))\n     assert mml.childNodes[0].nodeName == 'arcsin'\n \n@@ -238,6 +260,15 @@ def test_content_mathml_trig():\n     mml = mp._print(atan(x))\n     assert mml.childNodes[0].nodeName == 'arctan'\n \n+    mml = mp._print(acot(x))\n+    assert mml.childNodes[0].nodeName == 'arccot'\n+\n+    mml = mp._print(acsc(x))\n+    assert mml.childNodes[0].nodeName == 'arccsc'\n+\n+    mml = mp._print(asec(x))\n+    assert mml.childNodes[0].nodeName == 'arcsec'\n+\n     mml = mp._print(sinh(x))\n     assert mml.childNodes[0].nodeName == 'sinh'\n \n@@ -247,6 +278,15 @@ def test_content_mathml_trig():\n     mml = mp._print(tanh(x))\n     assert mml.childNodes[0].nodeName == 'tanh'\n \n+    mml = mp._print(coth(x))\n+    assert mml.childNodes[0].nodeName == 'coth'\n+\n+    mml = mp._print(csch(x))\n+    assert mml.childNodes[0].nodeName == 'csch'\n+\n+    mml = mp._print(sech(x))\n+    assert mml.childNodes[0].nodeName == 'sech'\n+\n     mml = mp._print(asinh(x))\n     assert mml.childNodes[0].nodeName == 'arcsinh'\n \n@@ -256,6 +296,15 @@ def test_content_mathml_trig():\n     mml = mp._print(acosh(x))\n     assert mml.childNodes[0].nodeName == 'arccosh'\n \n+    mml = mp._print(acoth(x))\n+    assert mml.childNodes[0].nodeName == 'arccoth'\n+\n+    mml = mp._print(acsch(x))\n+    assert mml.childNodes[0].nodeName == 'arccsch'\n+\n+    mml = mp._print(asech(x))\n+    assert mml.childNodes[0].nodeName == 'arcsech'\n+\n \n def test_content_mathml_relational():\n     mml_1 = mp._print(Eq(x, 1))\n@@ -485,6 +534,14 @@ def test_content_settings():\n     raises(TypeError, lambda: mathml(x, method=\"garbage\"))\n \n \n+def test_content_mathml_logic():\n+    assert mathml(And(x, y)) == '<apply><and/><ci>x</ci><ci>y</ci></apply>'\n+    assert mathml(Or(x, y)) == '<apply><or/><ci>x</ci><ci>y</ci></apply>'\n+    assert mathml(Xor(x, y)) == '<apply><xor/><ci>x</ci><ci>y</ci></apply>'\n+    assert mathml(Implies(x, y)) == '<apply><implies/><ci>x</ci><ci>y</ci></apply>'\n+    assert mathml(Not(x)) == '<apply><not/><ci>x</ci></apply>'\n+\n+\n def test_presentation_printmethod():\n     assert mpp.doprint(1 + x) == '<mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow>'\n     assert mpp.doprint(x**2) == '<msup><mi>x</mi><mn>2</mn></msup>'\n",
  "problem_statement": "printingMathML erroneous\nI believe I found some mathML printing errors, and noted below what I think it should be\r\n\r\n```\r\nsympy.printing.mathml(sympy.acoth(x))\r\n>>> '<apply><acoth/><ci>x</ci></apply>'\r\n```\r\nshould be:  `'<apply><arccoth/><ci>x</ci></apply>'`\r\n\r\n\r\n```\r\nsympy.printing.mathml(sympy.acsc(x))\r\n>>> '<apply><acsc/><ci>x</ci></apply>'\r\n```\r\nshould be: `'<apply><arccsc/><ci>x</ci></apply>'`\r\n\r\n\r\n```\r\nsympy.printing.mathml(sympy.asec(x))\r\n>>> '<apply><asec/><ci>x</ci></apply>'\r\n```\r\nshould be: `'<apply><arcsec/><ci>x</ci></apply>'`\r\n\r\n\n",
  "hints_text": "and a more serious issue regarding the introduction of underscores when writing to mathml\r\n\r\n```\r\nsympy.sympify('x1') == sympy.sympify('x_1')\r\n>>> False\r\nsympy.mathml(sympy.sympify('x1')) == sympy.mathml(sympy.sympify('x_1'))\r\n>>> True\r\n```\nCC @oscargus ",
  "created_at": "2019-07-14T09:53:26Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_content_mathml_constants\", \"test_content_mathml_trig\", \"test_content_mathml_logic\"]",
  "PASS_TO_PASS": "[\"test_mathml_printer\", \"test_content_printmethod\", \"test_content_mathml_core\", \"test_content_mathml_functions\", \"test_content_mathml_limits\", \"test_content_mathml_integrals\", \"test_content_mathml_matrices\", \"test_content_mathml_sums\", \"test_content_mathml_tuples\", \"test_content_mathml_add\", \"test_content_mathml_Rational\", \"test_content_mathml_relational\", \"test_content_symbol\", \"test_content_mathml_greek\", \"test_content_mathml_order\", \"test_content_settings\", \"test_presentation_printmethod\", \"test_presentation_mathml_core\", \"test_presentation_mathml_functions\", \"test_print_derivative\", \"test_presentation_mathml_limits\", \"test_presentation_mathml_integrals\", \"test_presentation_mathml_matrices\", \"test_presentation_mathml_sums\", \"test_presentation_mathml_add\", \"test_presentation_mathml_Rational\", \"test_presentation_mathml_constants\", \"test_presentation_mathml_trig\", \"test_presentation_mathml_relational\", \"test_presentation_symbol\", \"test_presentation_mathml_greek\", \"test_presentation_mathml_order\", \"test_print_intervals\", \"test_print_tuples\", \"test_print_re_im\", \"test_print_Abs\", \"test_print_Determinant\", \"test_presentation_settings\", \"test_toprettyxml_hooking\", \"test_print_domains\", \"test_print_expression_with_minus\", \"test_print_AssocOp\", \"test_print_basic\", \"test_mat_delim_print\", \"test_ln_notation_print\", \"test_mul_symbol_print\", \"test_print_lerchphi\", \"test_print_polylog\", \"test_print_set_frozenset\", \"test_print_FiniteSet\", \"test_print_LambertW\", \"test_print_EmptySet\", \"test_print_UniversalSet\", \"test_print_spaces\", \"test_print_constants\", \"test_print_Contains\", \"test_print_Dagger\", \"test_print_SetOp\", \"test_print_logic\", \"test_root_notation_print\", \"test_fold_frac_powers_print\", \"test_fold_short_frac_print\", \"test_print_factorials\", \"test_print_floor\", \"test_print_ceiling\", \"test_print_Lambda\", \"test_print_conjugate\", \"test_print_AccumBounds\", \"test_print_Float\", \"test_print_different_functions\", \"test_mathml_builtins\", \"test_mathml_Range\", \"test_print_exp\", \"test_print_MinMax\", \"test_mathml_presentation_numbers\", \"test_print_matrix_symbol\", \"test_print_hadamard\", \"test_print_random_symbol\", \"test_print_IndexedBase\", \"test_print_Indexed\", \"test_print_MatrixElement\", \"test_print_Vector\", \"test_print_elliptic_f\", \"test_print_elliptic_e\", \"test_print_elliptic_pi\", \"test_print_Ei\", \"test_print_expint\", \"test_print_jacobi\", \"test_print_gegenbauer\", \"test_print_chebyshevt\", \"test_print_chebyshevu\", \"test_print_legendre\", \"test_print_assoc_legendre\", \"test_print_laguerre\", \"test_print_assoc_laguerre\", \"test_print_hermite\", \"test_mathml_SingularityFunction\", \"test_mathml_matrix_functions\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.114440",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}