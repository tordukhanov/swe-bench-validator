{
  "repo": "django/django",
  "instance_id": "django__django-13774",
  "base_commit": "bebd4cfa8f5e0d2dff2de5e50d86e849a40f4bb2",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1720,8 +1720,17 @@ def prefetch_related_objects(model_instances, *related_lookups):\n                                  \"prefetching - this is an invalid parameter to \"\n                                  \"prefetch_related().\" % lookup.prefetch_through)\n \n-            if prefetcher is not None and not is_fetched:\n-                obj_list, additional_lookups = prefetch_one_level(obj_list, prefetcher, lookup, level)\n+            obj_to_fetch = None\n+            if prefetcher is not None:\n+                obj_to_fetch = [obj for obj in obj_list if not is_fetched(obj)]\n+\n+            if obj_to_fetch:\n+                obj_list, additional_lookups = prefetch_one_level(\n+                    obj_to_fetch,\n+                    prefetcher,\n+                    lookup,\n+                    level,\n+                )\n                 # We need to ensure we don't keep adding lookups from the\n                 # same relationships to stop infinite recursion. So, if we\n                 # are already on an automatically added lookup, don't add\n@@ -1771,10 +1780,14 @@ def get_prefetcher(instance, through_attr, to_attr):\n     (the object with get_prefetch_queryset (or None),\n      the descriptor object representing this relationship (or None),\n      a boolean that is False if the attribute was not found at all,\n-     a boolean that is True if the attribute has already been fetched)\n+     a function that takes an instance and returns a boolean that is True if\n+     the attribute has already been fetched for that instance)\n     \"\"\"\n+    def has_to_attr_attribute(instance):\n+        return hasattr(instance, to_attr)\n+\n     prefetcher = None\n-    is_fetched = False\n+    is_fetched = has_to_attr_attribute\n \n     # For singly related objects, we have to avoid getting the attribute\n     # from the object, as this will trigger the query. So we first try\n@@ -1789,8 +1802,7 @@ def get_prefetcher(instance, through_attr, to_attr):\n             # get_prefetch_queryset() method.\n             if hasattr(rel_obj_descriptor, 'get_prefetch_queryset'):\n                 prefetcher = rel_obj_descriptor\n-                if rel_obj_descriptor.is_cached(instance):\n-                    is_fetched = True\n+                is_fetched = rel_obj_descriptor.is_cached\n             else:\n                 # descriptor doesn't support prefetching, so we go ahead and get\n                 # the attribute on the instance rather than the class to\n@@ -1802,11 +1814,15 @@ def get_prefetcher(instance, through_attr, to_attr):\n                     # Special case cached_property instances because hasattr\n                     # triggers attribute computation and assignment.\n                     if isinstance(getattr(instance.__class__, to_attr, None), cached_property):\n-                        is_fetched = to_attr in instance.__dict__\n-                    else:\n-                        is_fetched = hasattr(instance, to_attr)\n+                        def has_cached_property(instance):\n+                            return to_attr in instance.__dict__\n+\n+                        is_fetched = has_cached_property\n                 else:\n-                    is_fetched = through_attr in instance._prefetched_objects_cache\n+                    def in_prefetched_cache(instance):\n+                        return through_attr in instance._prefetched_objects_cache\n+\n+                    is_fetched = in_prefetched_cache\n     return prefetcher, rel_obj_descriptor, attr_found, is_fetched\n \n \n",
  "test_patch": "diff --git a/tests/prefetch_related/test_prefetch_related_objects.py b/tests/prefetch_related/test_prefetch_related_objects.py\n--- a/tests/prefetch_related/test_prefetch_related_objects.py\n+++ b/tests/prefetch_related/test_prefetch_related_objects.py\n@@ -97,6 +97,16 @@ def test_prefetch_object(self):\n         with self.assertNumQueries(0):\n             self.assertCountEqual(book1.authors.all(), [self.author1, self.author2, self.author3])\n \n+    def test_prefetch_object_twice(self):\n+        book1 = Book.objects.get(id=self.book1.id)\n+        book2 = Book.objects.get(id=self.book2.id)\n+        with self.assertNumQueries(1):\n+            prefetch_related_objects([book1], Prefetch('authors'))\n+        with self.assertNumQueries(1):\n+            prefetch_related_objects([book1, book2], Prefetch('authors'))\n+        with self.assertNumQueries(0):\n+            self.assertCountEqual(book2.authors.all(), [self.author1])\n+\n     def test_prefetch_object_to_attr(self):\n         book1 = Book.objects.get(id=self.book1.id)\n         with self.assertNumQueries(1):\n@@ -105,6 +115,22 @@ def test_prefetch_object_to_attr(self):\n         with self.assertNumQueries(0):\n             self.assertCountEqual(book1.the_authors, [self.author1, self.author2, self.author3])\n \n+    def test_prefetch_object_to_attr_twice(self):\n+        book1 = Book.objects.get(id=self.book1.id)\n+        book2 = Book.objects.get(id=self.book2.id)\n+        with self.assertNumQueries(1):\n+            prefetch_related_objects(\n+                [book1],\n+                Prefetch('authors', to_attr='the_authors'),\n+            )\n+        with self.assertNumQueries(1):\n+            prefetch_related_objects(\n+                [book1, book2],\n+                Prefetch('authors', to_attr='the_authors'),\n+            )\n+        with self.assertNumQueries(0):\n+            self.assertCountEqual(book2.the_authors, [self.author1])\n+\n     def test_prefetch_queryset(self):\n         book1 = Book.objects.get(id=self.book1.id)\n         with self.assertNumQueries(1):\n",
  "problem_statement": "prefetch_related_objects() does not work for reused model instances.\nDescription\n\t \n\t\t(last modified by Dennis Kliban)\n\t \nOur project processes instances in a stream. In some cases the instances are repeated. In these cases, we discovered that prefetch_related_objects() does not set the to_attr on all of the instances if the first instance in the list already has it set.\nWhen Django determines that the very first instance in the list is_fetched[0], it does not call into the the prefetch_one_level()[1]. The attributed specified in the to_attr parameter is only set in the prefetch_one_level() method[2].\nis_fetched is set by looking for the to_attr attribute on the instance[3].\n[0] ​https://github.com/django/django/blob/stable/2.2.x/django/db/models/query.py#L1605-L1609\n[1] ​https://github.com/django/django/blob/stable/2.2.x/django/db/models/query.py#L1624\n[2] ​https://github.com/django/django/blob/stable/2.2.x/django/db/models/query.py#L1799\n[3] ​https://github.com/django/django/blob/stable/2.2.x/django/db/models/query.py#L1708\n",
  "hints_text": "Thanks for this report, however I cannot reproduce this issue on Django 2.2 or on the current master (maybe I'm missing sth). Can you provide a sample project or a regression test? I tried the following test case 32089-test.diff.\nOur project processes instances in a stream. Could you give more details on that? prefetch_related_objects() loads all objects upfront due to ​https://github.com/django/django/blob/stable/2.2.x/django/db/models/query.py#L1546. Even with an overloaded __bool__, the QuerySet is iterated over by ​https://github.com/django/django/blob/stable/2.2.x/django/db/models/query.py#L1585.\nI will put together a simple test that demonstrates the problem with Books and Authors. Here is the code from Pulp that causes this issue: We have asyncio stages that process items in batches. Each batch is processed here[0]. That method calls into _needed_remote_artifacts()[1] which calls into prefetch_related_objects()[2]. This bug is experienced when the very first item in a batch that was already present in a previous batch. These batches contain other information also, so we don't consider the data fully duplicated. [0] ​https://github.com/pulp/pulpcore/blob/master/pulpcore/plugin/stages/artifact_stages.py#L243 [1] ​https://github.com/pulp/pulpcore/blob/master/pulpcore/plugin/stages/artifact_stages.py#L248 [2] ​https://github.com/pulp/pulpcore/blob/master/pulpcore/plugin/stages/artifact_stages.py#L270\nI've written a simple test here[0]. This test fails with the following error: (pulp) [vagrant@pulp2-nightly-pulp3-source-centos7 tests]$ ./runtests.py --settings=settings prefetch_related.test_prefetch_related_objects Testing against Django installed in '/usr/local/lib/pulp/lib64/python3.6/site-packages/django' with up to 4 processes Creating test database for alias 'default'... System check identified no issues (0 silenced). .......E.. ====================================================================== ERROR: test_prefetch_object_to_attr_twice (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests) ---------------------------------------------------------------------- Traceback (most recent call last): File \"/home/vagrant/devel/django/tests/prefetch_related/test_prefetch_related_objects.py\", line 114, in test_prefetch_object_to_attr_twice self.assertCountEqual(book3.the_authors, [self.author3]) AttributeError: 'Book' object has no attribute 'the_authors' ---------------------------------------------------------------------- Ran 10 tests in 0.091s FAILED (errors=1) Destroying test database for alias 'default'... [0] ​https://github.com/dkliban/django/commit/8093932797a6597a5075ecd3038e2f91c632023a\nThanks Dennis for details and a regression test! We should fix this issue or at least document the restriction if it's not feasible.\nI had a brief look at fixing this. I think it's possible by filtering the objects before trying to prefetch for them. See ​https://github.com/adamchainz/django/commit/bc2991c0908abbf4973cbb4850ffff0dea4bbd6f . This currently fails three prefetch tests - one for executing an extra query, two for executing one fewer query (which may actually represent a true optimization).\nHello! I would like to work on this ticket to complete a requirement for the final project in my software engineering class (​https://web.eecs.umich.edu/~weimerw/481/hw6.html). Since this is my first time contributing to Django, it might take me some time to make progress on this ticket. Thank you for your patience, and if you need to fix this ticket urgently in the meantime, feel free to unassign me from it.",
  "created_at": "2020-12-14T06:03:34Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_prefetch_object_to_attr_twice (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\", \"test_prefetch_object_twice (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\"]",
  "PASS_TO_PASS": "[\"test_foreignkey_forward (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\", \"test_foreignkey_reverse (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\", \"test_m2m_forward (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\", \"test_m2m_reverse (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\", \"A m2m can be followed through another m2m.\", \"test_prefetch_object (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\", \"test_prefetch_object_to_attr (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\", \"test_prefetch_queryset (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\", \"test_unknown (prefetch_related.test_prefetch_related_objects.PrefetchRelatedObjectsTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.669311",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}