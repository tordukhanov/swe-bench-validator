{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-23141",
  "base_commit": "0bc2587aef09ab150bd408b7cd9e08baf7b5fd9c",
  "patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -21,7 +21,7 @@\n from sympy.core import S, diff, Expr, Symbol\n from sympy.core.sympify import _sympify\n from sympy.geometry import Segment2D, Polygon, Point, Point2D\n-from sympy.polys.polytools import LC, gcd_list, degree_list\n+from sympy.polys.polytools import LC, gcd_list, degree_list, Poly\n from sympy.simplify.simplify import nsimplify\n \n \n@@ -94,12 +94,21 @@ def polytope_integrate(poly, expr=None, *, clockwise=False, max_degree=None):\n \n         if max_degree is None:\n             if expr is None:\n-                raise TypeError('Input expression be must'\n-                                'be a valid SymPy expression')\n+                raise TypeError('Input expression must be a valid SymPy expression')\n             return main_integrate3d(expr, facets, vertices, hp_params)\n \n     if max_degree is not None:\n         result = {}\n+        if expr is not None:\n+            f_expr = []\n+            for e in expr:\n+                _ = decompose(e)\n+                if len(_) == 1 and not _.popitem()[0]:\n+                    f_expr.append(e)\n+                elif Poly(e).total_degree() <= max_degree:\n+                    f_expr.append(e)\n+            expr = f_expr\n+\n         if not isinstance(expr, list) and expr is not None:\n             raise TypeError('Input polynomials must be list of expressions')\n \n@@ -128,8 +137,7 @@ def polytope_integrate(poly, expr=None, *, clockwise=False, max_degree=None):\n         return result\n \n     if expr is None:\n-        raise TypeError('Input expression be must'\n-                        'be a valid SymPy expression')\n+        raise TypeError('Input expression must be a valid SymPy expression')\n \n     return main_integrate(expr, facets, hp_params)\n \n@@ -143,6 +151,26 @@ def strip(monom):\n         coeff = LC(monom)\n         return coeff, monom / coeff\n \n+def _polynomial_integrate(polynomials, facets, hp_params):\n+    dims = (x, y)\n+    dim_length = len(dims)\n+    integral_value = S.Zero\n+    for deg in polynomials:\n+        poly_contribute = S.Zero\n+        facet_count = 0\n+        for hp in hp_params:\n+            value_over_boundary = integration_reduction(facets,\n+                                                        facet_count,\n+                                                        hp[0], hp[1],\n+                                                        polynomials[deg],\n+                                                        dims, deg)\n+            poly_contribute += value_over_boundary * (hp[1] / norm(hp[0]))\n+            facet_count += 1\n+        poly_contribute /= (dim_length + deg)\n+        integral_value += poly_contribute\n+\n+    return integral_value\n+\n \n def main_integrate3d(expr, facets, vertices, hp_params, max_degree=None):\n     \"\"\"Function to translate the problem of integrating uni/bi/tri-variate\n@@ -261,7 +289,6 @@ def main_integrate(expr, facets, hp_params, max_degree=None):\n     dims = (x, y)\n     dim_length = len(dims)\n     result = {}\n-    integral_value = S.Zero\n \n     if max_degree:\n         grad_terms = [[0, 0, 0, 0]] + gradient_terms(max_degree)\n@@ -294,21 +321,11 @@ def main_integrate(expr, facets, hp_params, max_degree=None):\n                                 (b / norm(a)) / (dim_length + degree)\n         return result\n     else:\n-        polynomials = decompose(expr)\n-        for deg in polynomials:\n-            poly_contribute = S.Zero\n-            facet_count = 0\n-            for hp in hp_params:\n-                value_over_boundary = integration_reduction(facets,\n-                                                            facet_count,\n-                                                            hp[0], hp[1],\n-                                                            polynomials[deg],\n-                                                            dims, deg)\n-                poly_contribute += value_over_boundary * (hp[1] / norm(hp[0]))\n-                facet_count += 1\n-            poly_contribute /= (dim_length + deg)\n-            integral_value += poly_contribute\n-    return integral_value\n+        if not isinstance(expr, list):\n+            polynomials = decompose(expr)\n+            return _polynomial_integrate(polynomials, facets, hp_params)\n+        else:\n+            return {e: _polynomial_integrate(decompose(e), facets, hp_params) for e in expr}\n \n \n def polygon_integrate(facet, hp_param, index, facets, vertices, expr, degree):\n",
  "test_patch": "diff --git a/sympy/integrals/tests/test_intpoly.py b/sympy/integrals/tests/test_intpoly.py\n--- a/sympy/integrals/tests/test_intpoly.py\n+++ b/sympy/integrals/tests/test_intpoly.py\n@@ -152,6 +152,14 @@ def test_polytope_integrate():\n     assert result_dict[expr2] == Rational(13062161, 27)\n     assert result_dict[expr3] == Rational(1946257153, 924)\n \n+    tri = Polygon(Point(0, 3), Point(5, 3), Point(1, 1))\n+    expr1 = x**7*y**1 + 2*x**2*y**6\n+    expr2 = x**6*y**4 + x**5*y**5 + 2*y**10\n+    expr3 = x**10 + x**9*y + x**8*y**2 + x**5*y**5\n+    polys.extend((expr1, expr2, expr3))\n+    assert polytope_integrate(tri, polys, max_degree=9) == \\\n+        {x**7*y + 2*x**2*y**6: Rational(489262, 9)}\n+\n     #  Tests when all integral of all monomials up to a max_degree is to be\n     #  calculated.\n     assert polytope_integrate(Polygon(Point(0, 0), Point(0, 1),\n@@ -526,6 +534,10 @@ def test_max_degree():\n     polys = [1, x, y, x*y, x**2*y, x*y**2]\n     assert polytope_integrate(polygon, polys, max_degree=3) == \\\n         {1: 1, x: S.Half, y: S.Half, x*y: Rational(1, 4), x**2*y: Rational(1, 6), x*y**2: Rational(1, 6)}\n+    assert polytope_integrate(polygon, polys, max_degree=2) == \\\n+        {1: 1, x: S.Half, y: S.Half, x*y: Rational(1, 4)}\n+    assert polytope_integrate(polygon, polys, max_degree=1) == \\\n+        {1: 1, x: S.Half, y: S.Half}\n \n \n def test_main_integrate3d():\n@@ -601,3 +613,13 @@ def test_is_vertex():\n     assert is_vertex(Point(2, 3)) is True\n     assert is_vertex((2, 3, 4)) is True\n     assert is_vertex((2, 3, 4, 5)) is False\n+\n+\n+def test_issue_19234():\n+    polygon = Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0))\n+    polys =  [ 1, x, y, x*y, x**2*y, x*y**2]\n+    assert polytope_integrate(polygon, polys) == \\\n+        {1: 1, x: S.Half, y: S.Half, x*y: Rational(1, 4), x**2*y: Rational(1, 6), x*y**2: Rational(1, 6)}\n+    polys =  [ 1, x, y, x*y, 3 + x**2*y, x + x*y**2]\n+    assert polytope_integrate(polygon, polys) == \\\n+        {1: 1, x: S.Half, y: S.Half, x*y: Rational(1, 4), x**2*y + 3: Rational(19, 6), x*y**2 + x: Rational(2, 3)}\n",
  "problem_statement": "polytope_integrate and max_degree\nTrying to build on the examples as `https://docs.sympy.org/latest/modules/integrals/integrals.html#sympy.integrals.intpoly.polytope_integrate:\r\n```\r\npolygon = Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0))\r\npolys = [1, x, y, x*y, x**2*y, x*y**2]\r\npolytope_integrate(polygon, polys, max_degree=3)\r\n```\r\nworks but\r\n```\r\npolytope_integrate(polygon, polys)\r\n```\r\nfails:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/base/data/home/apps/s~sympy-live-hrd/61.426227578929124852/sympy/sympy/integrals/intpoly.py\", line 136, in polytope_integrate\r\n    return main_integrate(expr, facets, hp_params)\r\n  File \"/base/data/home/apps/s~sympy-live-hrd/61.426227578929124852/sympy/sympy/integrals/intpoly.py\", line 306, in main_integrate\r\n    dims, deg)\r\n  File \"/base/data/home/apps/s~sympy-live-hrd/61.426227578929124852/sympy/sympy/integrals/intpoly.py\", line 462, in integration_reduction\r\n    expr = _sympify(expr)\r\n  File \"/base/data/home/apps/s~sympy-live-hrd/61.426227578929124852/sympy/sympy/core/sympify.py\", line 418, in _sympify\r\n    return sympify(a, strict=True)\r\n  File \"/base/data/home/apps/s~sympy-live-hrd/61.426227578929124852/sympy/sympy/core/sympify.py\", line 340, in sympify\r\n    raise SympifyError(a)\r\nSympifyError: SympifyError: [1, x, y, x*y, x**2*y, x*y**2]\r\n```\r\nIs that the expected behavior? Why? Thanks!\n",
  "hints_text": "I think that this is an issue with some fragile implementation for treating list than a single expression\r\nI'm not familiar with the stuff under the hood, but simply iterating over each individual expressions can be a temporary workaround.\r\n\r\n```\r\npolygon = Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0))\r\npolys = [1, x, y, x*y, x**2*y, x*y**2]\r\n\r\nfor poly in polys:\r\n    print(polytope_integrate(polygon, poly)) \r\n```\nThanks!\n@oscarbenjamin I made some changes that fixes this and some related issues .\r\n\r\nCurrent state of master -\r\n```\r\n>>> from sympy import *\r\n>>> from sympy.integrals.intpoly import *\r\n>>> polygon = Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0))\r\n>>> polys =  [ 1,x, y, x*y, x**2*y, x*y**2]\r\n>>> polytope_integrate(polygon, polys,max_degree = 3)\r\n{1: 1, x: 1/2, y: 1/2, x*y: 1/4, x**2*y: 1/6, x*y**2: 1/6}\r\n>>> polytope_integrate(polygon, polys,max_degree = 2)   # Only maximum degree is a valid input which doesn't make sense for user input.\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\kunni\\sympy\\sympy\\sympy\\integrals\\intpoly.py\", line 126, in polytope_integrate\r\n    integral_value += result_dict[m] * coeff\r\nKeyError: x**2*y\r\n>>> polytope_integrate(polygon, polys)   # If maximum degree is not given all available degrees should be returned since max_degree is optional input.\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\kunni\\sympy\\sympy\\sympy\\integrals\\intpoly.py\", line 134, in polytope_integrate\r\n    return main_integrate(expr, facets, hp_params)\r\n  File \"C:\\Users\\kunni\\sympy\\sympy\\sympy\\integrals\\intpoly.py\", line 302, in main_integrate\r\n    value_over_boundary = integration_reduction(facets,\r\n  File \"C:\\Users\\kunni\\sympy\\sympy\\sympy\\integrals\\intpoly.py\", line 476, in integration_reduction\r\n    expr = _sympify(expr)\r\n  File \"C:\\Users\\kunni\\sympy\\sympy\\sympy\\core\\sympify.py\", line 528, in _sympify\r\n    return sympify(a, strict=True)\r\n  File \"C:\\Users\\kunni\\sympy\\sympy\\sympy\\core\\sympify.py\", line 449, in sympify\r\n    raise SympifyError(a)\r\nsympy.core.sympify.SympifyError: SympifyError: [1, x, y, x*y, x**2*y, x*y**2]\r\n```\r\n\r\nAfter the change -\r\n```\r\n>>> from sympy import *\r\n>>> from sympy.integrals.intpoly import *\r\n>>> polygon = Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0))\r\n>>> polys =  [ 1,x, y, x*y, x**2*y, x*y**2]\r\n>>> polytope_integrate(polygon, polys)\r\n{1: 1, x: 1/2, y: 1/2, x*y: 1/4, x**2*y: 1/6, x*y**2: 1/6}\r\n>>> polytope_integrate(polygon, polys,max_degree=2)\r\n{1: 1, x: 1/2, y: 1/2, x*y: 1/4}\r\n>>> polytope_integrate(polygon, polys,max_degree =1)\r\n{1: 1, x: 1/2, y: 1/2}\r\n```\r\nI was unsure of the diff so I have added it here ,do you suggest I open up a pr for the given issue ?\r\n\r\n```\r\n--- a/sympy/integrals/intpoly.py\r\n+++ b/sympy/integrals/intpoly.py\r\n@@ -100,6 +100,14 @@ def polytope_integrate(poly, expr=None, *, clockwise=False, max_degree=None):\r\n\r\n     if max_degree is not None:\r\n         result = {}\r\n+        f_expr = []\r\n+        for exp in expr:\r\n+            if list((decompose(exp)).keys())[0] == 0:\r\n+                f_expr.append(exp)\r\n+            elif sum(degree_list(exp)) <= max_degree:\r\n+                f_expr.append(exp)\r\n+\r\n+        expr = f_expr\r\n         if not isinstance(expr, list) and expr is not None:\r\n             raise TypeError('Input polynomials must be list of expressions')\r\n\r\n@@ -294,21 +302,42 @@ def main_integrate(expr, facets, hp_params, max_degree=None):\r\n                                 (b / norm(a)) / (dim_length + degree)\r\n         return result\r\n     else:\r\n-        polynomials = decompose(expr)\r\n-        for deg in polynomials:\r\n-            poly_contribute = S.Zero\r\n-            facet_count = 0\r\n-            for hp in hp_params:\r\n-                value_over_boundary = integration_reduction(facets,\r\n-                                                            facet_count,\r\n-                                                            hp[0], hp[1],\r\n-                                                            polynomials[deg],\r\n-                                                            dims, deg)\r\n-                poly_contribute += value_over_boundary * (hp[1] / norm(hp[0]))\r\n-                facet_count += 1\r\n-            poly_contribute /= (dim_length + deg)\r\n-            integral_value += poly_contribute\r\n-    return integral_value\r\n+        if not isinstance(expr,list):\r\n+            polynomials = decompose(expr)\r\n+            for deg in polynomials:\r\n+                poly_contribute = S.Zero\r\n+                facet_count = 0\r\n+                for hp in hp_params:\r\n+                    value_over_boundary = integration_reduction(facets,\r\n+                                                                facet_count,\r\n+                                                                hp[0], hp[1],\r\n+                                                                polynomials[deg],\r\n+                                                                dims, deg)\r\n+                    poly_contribute += value_over_boundary * (hp[1] / norm(hp[0]))\r\n+                    facet_count += 1\r\n+                poly_contribute /= (dim_length + deg)\r\n+                integral_value += poly_contribute\r\n+\r\n+            return integral_value\r\n+        else:\r\n+            result = {}\r\n+            for polynomial in expr:\r\n+                polynomials = decompose(polynomial)\r\n+                for deg in polynomials:\r\n+                    poly_contribute = S.Zero\r\n+                    facet_count = 0\r\n+                    for hp in hp_params:\r\n+                        value_over_boundary = integration_reduction(facets,\r\n+                                                                    facet_count,\r\n+                                                                    hp[0], hp[1],\r\n+                                                                    polynomials[deg],\r\n+                                                                    dims, deg)\r\n+                        poly_contribute += value_over_boundary * (hp[1] / norm(hp[0]))\r\n+                        facet_count += 1\r\n+                    poly_contribute /= (dim_length + deg)\r\n+                    result.update({polynomials[deg] : poly_contribute})\r\n+\r\n+            return result\r\n```\n@oscarbenjamin All tests seem to pass ,I'll open a pr in some time if there are no particular doubts .Thanks !",
  "created_at": "2022-02-21T18:16:17Z",
  "version": "1.11",
  "FAIL_TO_PASS": "[\"test_max_degree\"]",
  "PASS_TO_PASS": "[\"test_decompose\", \"test_best_origin\", \"test_point_sort\", \"test_polytopes_intersecting_sides\", \"test_main_integrate3d\", \"test_main_integrate\", \"test_polygon_integrate\", \"test_distance_to_side\", \"test_lineseg_integrate\", \"test_integration_reduction\", \"test_integration_reduction_dynamic\", \"test_is_vertex\"]",
  "environment_setup_commit": "9a6104eab0ea7ac191a09c24f3e2d79dcd66bda5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.152359",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}