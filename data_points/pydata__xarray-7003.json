{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-7003",
  "base_commit": "5bec4662a7dd4330eca6412c477ca3f238323ed2",
  "patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -1092,12 +1092,13 @@ def get_unique(self) -> list[T_PandasOrXarrayIndex]:\n         \"\"\"Return a list of unique indexes, preserving order.\"\"\"\n \n         unique_indexes: list[T_PandasOrXarrayIndex] = []\n-        seen: set[T_PandasOrXarrayIndex] = set()\n+        seen: set[int] = set()\n \n         for index in self._indexes.values():\n-            if index not in seen:\n+            index_id = id(index)\n+            if index_id not in seen:\n                 unique_indexes.append(index)\n-                seen.add(index)\n+                seen.add(index_id)\n \n         return unique_indexes\n \n@@ -1201,9 +1202,24 @@ def copy_indexes(\n         \"\"\"\n         new_indexes = {}\n         new_index_vars = {}\n+\n         for idx, coords in self.group_by_index():\n+            if isinstance(idx, pd.Index):\n+                convert_new_idx = True\n+                dim = next(iter(coords.values())).dims[0]\n+                if isinstance(idx, pd.MultiIndex):\n+                    idx = PandasMultiIndex(idx, dim)\n+                else:\n+                    idx = PandasIndex(idx, dim)\n+            else:\n+                convert_new_idx = False\n+\n             new_idx = idx.copy(deep=deep)\n             idx_vars = idx.create_variables(coords)\n+\n+            if convert_new_idx:\n+                new_idx = cast(PandasIndex, new_idx).index\n+\n             new_indexes.update({k: new_idx for k in coords})\n             new_index_vars.update(idx_vars)\n \n",
  "test_patch": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -9,6 +9,7 @@\n \n import xarray as xr\n from xarray.core.indexes import (\n+    Hashable,\n     Index,\n     Indexes,\n     PandasIndex,\n@@ -535,7 +536,7 @@ def test_copy(self) -> None:\n \n class TestIndexes:\n     @pytest.fixture\n-    def unique_indexes(self) -> list[PandasIndex]:\n+    def indexes_and_vars(self) -> tuple[list[PandasIndex], dict[Hashable, Variable]]:\n         x_idx = PandasIndex(pd.Index([1, 2, 3], name=\"x\"), \"x\")\n         y_idx = PandasIndex(pd.Index([4, 5, 6], name=\"y\"), \"y\")\n         z_pd_midx = pd.MultiIndex.from_product(\n@@ -543,10 +544,29 @@ def unique_indexes(self) -> list[PandasIndex]:\n         )\n         z_midx = PandasMultiIndex(z_pd_midx, \"z\")\n \n-        return [x_idx, y_idx, z_midx]\n+        indexes = [x_idx, y_idx, z_midx]\n+\n+        variables = {}\n+        for idx in indexes:\n+            variables.update(idx.create_variables())\n+\n+        return indexes, variables\n+\n+    @pytest.fixture(params=[\"pd_index\", \"xr_index\"])\n+    def unique_indexes(\n+        self, request, indexes_and_vars\n+    ) -> list[PandasIndex] | list[pd.Index]:\n+        xr_indexes, _ = indexes_and_vars\n+\n+        if request.param == \"pd_index\":\n+            return [idx.index for idx in xr_indexes]\n+        else:\n+            return xr_indexes\n \n     @pytest.fixture\n-    def indexes(self, unique_indexes) -> Indexes[Index]:\n+    def indexes(\n+        self, unique_indexes, indexes_and_vars\n+    ) -> Indexes[Index] | Indexes[pd.Index]:\n         x_idx, y_idx, z_midx = unique_indexes\n         indexes: dict[Any, Index] = {\n             \"x\": x_idx,\n@@ -555,9 +575,8 @@ def indexes(self, unique_indexes) -> Indexes[Index]:\n             \"one\": z_midx,\n             \"two\": z_midx,\n         }\n-        variables: dict[Any, Variable] = {}\n-        for idx in unique_indexes:\n-            variables.update(idx.create_variables())\n+\n+        _, variables = indexes_and_vars\n \n         return Indexes(indexes, variables)\n \n",
  "problem_statement": "Indexes.get_unique() TypeError with pandas indexes\n@benbovy I also just tested the `get_unique()` method that you mentioned and maybe noticed a related issue here, which I'm not sure is wanted / expected.\r\n\r\nTaking the above dataset `ds`, accessing this function results in an error:\r\n\r\n```python\r\n> ds.indexes.get_unique()\r\n\r\nTypeError: unhashable type: 'MultiIndex'\r\n```\r\n\r\nHowever, for `xindexes` it works:\r\n```python\r\n> ds.xindexes.get_unique()\r\n\r\n[<xarray.core.indexes.PandasMultiIndex at 0x7f105bf1df20>]\r\n```\r\n\r\n_Originally posted by @lukasbindreiter in https://github.com/pydata/xarray/issues/6752#issuecomment-1236717180_\n",
  "hints_text": "",
  "created_at": "2022-09-07T11:05:02Z",
  "version": "2022.06",
  "FAIL_TO_PASS": "[\"xarray/tests/test_indexes.py::TestIndexes::test_get_unique[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_group_by_index[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_copy_indexes[pd_index]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_indexes.py::test_asarray_tuplesafe\", \"xarray/tests/test_indexes.py::TestIndex::test_from_variables\", \"xarray/tests/test_indexes.py::TestIndex::test_concat\", \"xarray/tests/test_indexes.py::TestIndex::test_stack\", \"xarray/tests/test_indexes.py::TestIndex::test_unstack\", \"xarray/tests/test_indexes.py::TestIndex::test_create_variables\", \"xarray/tests/test_indexes.py::TestIndex::test_to_pandas_index\", \"xarray/tests/test_indexes.py::TestIndex::test_isel\", \"xarray/tests/test_indexes.py::TestIndex::test_sel\", \"xarray/tests/test_indexes.py::TestIndex::test_join\", \"xarray/tests/test_indexes.py::TestIndex::test_reindex_like\", \"xarray/tests/test_indexes.py::TestIndex::test_equals\", \"xarray/tests/test_indexes.py::TestIndex::test_roll\", \"xarray/tests/test_indexes.py::TestIndex::test_rename\", \"xarray/tests/test_indexes.py::TestIndex::test_copy[True]\", \"xarray/tests/test_indexes.py::TestIndex::test_copy[False]\", \"xarray/tests/test_indexes.py::TestIndex::test_getitem\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_constructor\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_from_variables\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_from_variables_index_adapter\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_periods\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_str_dtype[str]\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_str_dtype[bytes]\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_empty\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_dim_error\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_create_variables\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_to_pandas_index\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_sel\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_sel_boolean\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_sel_datetime\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_sel_unsorted_datetime_index_raises\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_equals\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_join\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_reindex_like\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_rename\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_copy\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_getitem\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_constructor\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_from_variables\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_concat\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_stack\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_stack_non_unique\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_unstack\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_create_variables\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_sel\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_join\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_rename\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_copy\", \"xarray/tests/test_indexes.py::TestIndexes::test_interface[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_interface[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_variables[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_variables[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_dims[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_dims[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_unique[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_is_multi[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_is_multi[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_all_coords[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_all_coords[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_all_dims[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_all_dims[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_group_by_index[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_to_pandas_indexes[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_to_pandas_indexes[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_copy_indexes[xr_index]\"]",
  "environment_setup_commit": "50ea159bfd0872635ebf4281e741f3c87f0bef6b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.899465",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}