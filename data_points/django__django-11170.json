{
  "repo": "django/django",
  "instance_id": "django__django-11170",
  "base_commit": "9012033138fa41b573d3e4e3f0dfa8b94a4719c6",
  "patch": "diff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -328,14 +328,14 @@ def get_traceback_data(self):\n \n     def get_traceback_html(self):\n         \"\"\"Return HTML version of debug 500 HTTP error page.\"\"\"\n-        with Path(CURRENT_DIR, 'templates', 'technical_500.html').open() as fh:\n+        with Path(CURRENT_DIR, 'templates', 'technical_500.html').open(encoding='utf-8') as fh:\n             t = DEBUG_ENGINE.from_string(fh.read())\n         c = Context(self.get_traceback_data(), use_l10n=False)\n         return t.render(c)\n \n     def get_traceback_text(self):\n         \"\"\"Return plain text version of debug 500 HTTP error page.\"\"\"\n-        with Path(CURRENT_DIR, 'templates', 'technical_500.txt').open() as fh:\n+        with Path(CURRENT_DIR, 'templates', 'technical_500.txt').open(encoding='utf-8') as fh:\n             t = DEBUG_ENGINE.from_string(fh.read())\n         c = Context(self.get_traceback_data(), autoescape=False, use_l10n=False)\n         return t.render(c)\n@@ -497,7 +497,7 @@ def technical_404_response(request, exception):\n             module = obj.__module__\n             caller = '%s.%s' % (module, caller)\n \n-    with Path(CURRENT_DIR, 'templates', 'technical_404.html').open() as fh:\n+    with Path(CURRENT_DIR, 'templates', 'technical_404.html').open(encoding='utf-8') as fh:\n         t = DEBUG_ENGINE.from_string(fh.read())\n     c = Context({\n         'urlconf': urlconf,\n@@ -514,7 +514,7 @@ def technical_404_response(request, exception):\n \n def default_urlconf(request):\n     \"\"\"Create an empty URLconf 404 error response.\"\"\"\n-    with Path(CURRENT_DIR, 'templates', 'default_urlconf.html').open() as fh:\n+    with Path(CURRENT_DIR, 'templates', 'default_urlconf.html').open(encoding='utf-8') as fh:\n         t = DEBUG_ENGINE.from_string(fh.read())\n     c = Context({\n         'version': get_docs_version(),\n",
  "test_patch": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -7,6 +7,7 @@\n import threading\n from io import StringIO\n from pathlib import Path\n+from unittest import mock\n \n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n@@ -20,7 +21,8 @@\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n-    cleanse_setting, technical_500_response,\n+    Path as DebugPath, cleanse_setting, default_urlconf,\n+    technical_404_response, technical_500_response,\n )\n \n from ..views import (\n@@ -222,6 +224,19 @@ def test_regression_21530(self):\n             status_code=404\n         )\n \n+    def test_template_encoding(self):\n+        \"\"\"\n+        The templates are loaded directly, not via a template loader, and\n+        should be opened as utf-8 charset as is the default specified on\n+        template engines.\n+        \"\"\"\n+        with mock.patch.object(DebugPath, 'open') as m:\n+            default_urlconf(None)\n+            m.assert_called_once_with(encoding='utf-8')\n+            m.reset_mock()\n+            technical_404_response(mock.MagicMock(), mock.Mock())\n+            m.assert_called_once_with(encoding='utf-8')\n+\n \n class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n@@ -648,6 +663,20 @@ def __str__(self):\n         text = reporter.get_traceback_text()\n         self.assertIn('USER: [unable to retrieve the current user]', text)\n \n+    def test_template_encoding(self):\n+        \"\"\"\n+        The templates are loaded directly, not via a template loader, and\n+        should be opened as utf-8 charset as is the default specified on\n+        template engines.\n+        \"\"\"\n+        reporter = ExceptionReporter(None, None, None, None)\n+        with mock.patch.object(DebugPath, 'open') as m:\n+            reporter.get_traceback_html()\n+            m.assert_called_once_with(encoding='utf-8')\n+            m.reset_mock()\n+            reporter.get_traceback_text()\n+            m.assert_called_once_with(encoding='utf-8')\n+\n \n class PlainTextReportTests(SimpleTestCase):\n     rf = RequestFactory()\n",
  "problem_statement": "UnicodeDecodeError when loading debug templates.\nDescription\n\t\nWhile studying Django, I had an error where the technical_500.html page was not properly printed.\nIn the log window, UnicodeDecodeError was continuously printed, and in the template, the sentence 'A server error occured. Please contact the administrator' was printed\nSo when I checked the technical_500.html file of Django 2.2version, I found that the dotdotdot wrapped by the <span>tag on the 239th line was changed to ellipsis.\nApparently, the version of Django 2.1.8 was a dotdotdot.\nSo I took steps to change the 239th line's ellipsis to dotdotdot.\nOr, when reading the technical_500.html file from inside the debug.py file, the encoding format was set to utf-8.\nThis enabled me to resolve the error.\nDid you intentionally modify the technical_html file?\n",
  "hints_text": "The issue here is that reading the various debug templates was changed in ​ea542a9 to bypass the template loaders. The template loaders use the encoding specified on the template engine which is utf-8 by default. Later in ​50b8493 an ellipsis was added and this caused things to blow up on Windows as locale.getpreferredencoding(False) is not utf-8. Here is an alternative ​PR that adds tests and a release note for 2.2.1 as this is a regression.\nUpgrading to Release Blocker. Thanks for the report!\nOriginal ticket that describes the same issue #30303.",
  "created_at": "2019-04-03T23:46:10Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_template_encoding (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_encoding (view_tests.tests.test_debug.ExceptionReporterTests)\"]",
  "PASS_TO_PASS": "[\"test_repr (view_tests.tests.test_debug.CallableSettingWrapperTests)\", \"test_cleanse_setting_basic (view_tests.tests.test_debug.HelperFunctionTests)\", \"test_cleanse_setting_ignore_case (view_tests.tests.test_debug.HelperFunctionTests)\", \"test_cleanse_setting_recurses_in_dictionary (view_tests.tests.test_debug.HelperFunctionTests)\", \"test_handle_db_exception (view_tests.tests.test_debug.DebugViewQueriesAllowedTests)\", \"An exception report can be generated even for a disallowed host.\", \"test_message_only (view_tests.tests.test_debug.PlainTextReportTests)\", \"An exception report can be generated for just a request\", \"An exception report can be generated without request\", \"A simple exception report can be generated\", \"A message can be provided in addition to a request\", \"test_request_with_items_key (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_template_exception (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_400 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_403 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_404 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_template_not_found_error (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_ajax_response_encoding (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_non_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_paranoid_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_400 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_empty_path_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_classbased_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_default_urlconf_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_files (view_tests.tests.test_debug.DebugViewTests)\", \"test_no_template_source_loaders (view_tests.tests.test_debug.DebugViewTests)\", \"test_non_l10ned_numeric_ids (view_tests.tests.test_debug.DebugViewTests)\", \"test_regression_21530 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_exceptions (view_tests.tests.test_debug.DebugViewTests)\", \"Tests for not existing file\", \"test_encoding_error (view_tests.tests.test_debug.ExceptionReporterTests)\", \"The ExceptionReporter supports Unix, Windows and Macintosh EOL markers\", \"test_exception_fetching_user (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_ignore_traceback_evaluation_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Safe strings in local variables are escaped.\", \"test_message_only (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Non-UTF-8 exceptions/values should not make the output generation choke.\", \"test_reporting_frames_for_cyclic_reference (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_without_source (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_of_nested_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_request_with_items_key (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Large values should not create a large HTML.\", \"test_unfrozen_importlib (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Unprintable values should not make the output generation choke.\", \"test_callable_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_callable_settings_forbidding_to_set_attributes (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_dict_setting_with_non_str_key (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_multivalue_dict_key_error (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_non_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_paranoid_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_keyword_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_method (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_settings_with_sensitive_keys (view_tests.tests.test_debug.ExceptionReporterFilterTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.563242",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}