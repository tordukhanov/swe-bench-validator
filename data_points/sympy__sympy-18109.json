{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18109",
  "base_commit": "1b2ecfcd01ca7d1910dc6dc50a69c69f6a83983f",
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -2844,20 +2844,20 @@ def evalf(self, prec=None, **options):\n \n     @_sympifyit('other', NotImplemented)\n     def __add__(self, other):\n-        if isinstance(other, Number):\n+        if isinstance(other, Number) and global_evaluate[0]:\n             if other is S.NegativeInfinity or other is S.NaN:\n                 return S.NaN\n             return self\n-        return NotImplemented\n+        return Number.__add__(self, other)\n     __radd__ = __add__\n \n     @_sympifyit('other', NotImplemented)\n     def __sub__(self, other):\n-        if isinstance(other, Number):\n+        if isinstance(other, Number) and global_evaluate[0]:\n             if other is S.Infinity or other is S.NaN:\n                 return S.NaN\n             return self\n-        return NotImplemented\n+        return Number.__sub__(self, other)\n \n     @_sympifyit('other', NotImplemented)\n     def __rsub__(self, other):\n@@ -2865,18 +2865,18 @@ def __rsub__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __mul__(self, other):\n-        if isinstance(other, Number):\n+        if isinstance(other, Number) and global_evaluate[0]:\n             if other.is_zero or other is S.NaN:\n                 return S.NaN\n             if other.is_extended_positive:\n                 return self\n             return S.NegativeInfinity\n-        return NotImplemented\n+        return Number.__mul__(self, other)\n     __rmul__ = __mul__\n \n     @_sympifyit('other', NotImplemented)\n     def __div__(self, other):\n-        if isinstance(other, Number):\n+        if isinstance(other, Number) and global_evaluate[0]:\n             if other is S.Infinity or \\\n                 other is S.NegativeInfinity or \\\n                     other is S.NaN:\n@@ -2884,7 +2884,7 @@ def __div__(self, other):\n             if other.is_extended_nonnegative:\n                 return self\n             return S.NegativeInfinity\n-        return NotImplemented\n+        return Number.__div__(self, other)\n \n     __truediv__ = __div__\n \n@@ -3009,20 +3009,20 @@ def evalf(self, prec=None, **options):\n \n     @_sympifyit('other', NotImplemented)\n     def __add__(self, other):\n-        if isinstance(other, Number):\n+        if isinstance(other, Number) and global_evaluate[0]:\n             if other is S.Infinity or other is S.NaN:\n                 return S.NaN\n             return self\n-        return NotImplemented\n+        return Number.__add__(self, other)\n     __radd__ = __add__\n \n     @_sympifyit('other', NotImplemented)\n     def __sub__(self, other):\n-        if isinstance(other, Number):\n+        if isinstance(other, Number) and global_evaluate[0]:\n             if other is S.NegativeInfinity or other is S.NaN:\n                 return S.NaN\n             return self\n-        return NotImplemented\n+        return Number.__sub__(self, other)\n \n     @_sympifyit('other', NotImplemented)\n     def __rsub__(self, other):\n@@ -3030,18 +3030,18 @@ def __rsub__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __mul__(self, other):\n-        if isinstance(other, Number):\n+        if isinstance(other, Number) and global_evaluate[0]:\n             if other.is_zero or other is S.NaN:\n                 return S.NaN\n             if other.is_extended_positive:\n                 return self\n             return S.Infinity\n-        return NotImplemented\n+        return Number.__mul__(self, other)\n     __rmul__ = __mul__\n \n     @_sympifyit('other', NotImplemented)\n     def __div__(self, other):\n-        if isinstance(other, Number):\n+        if isinstance(other, Number) and global_evaluate[0]:\n             if other is S.Infinity or \\\n                 other is S.NegativeInfinity or \\\n                     other is S.NaN:\n@@ -3049,7 +3049,7 @@ def __div__(self, other):\n             if other.is_extended_nonnegative:\n                 return self\n             return S.Infinity\n-        return NotImplemented\n+        return Number.__div__(self, other)\n \n     __truediv__ = __div__\n \n",
  "test_patch": "diff --git a/sympy/core/tests/test_evaluate.py b/sympy/core/tests/test_evaluate.py\n--- a/sympy/core/tests/test_evaluate.py\n+++ b/sympy/core/tests/test_evaluate.py\n@@ -1,9 +1,25 @@\n from sympy.abc import x, y\n from sympy.core.evaluate import evaluate\n from sympy.core import Mul, Add, Pow, S\n-from sympy import sqrt\n+from sympy import sqrt, oo, pretty, nan\n \n def test_add():\n+    with evaluate(False):\n+        p = oo - oo\n+        assert isinstance(p, Add) and p.args == (oo, -oo)\n+        p = 5 - oo\n+        assert isinstance(p, Add) and p.args == (-oo, 5)\n+        p = oo - 5\n+        assert isinstance(p, Add) and p.args == (oo, -5)\n+        p = oo + 5\n+        assert isinstance(p, Add) and p.args == (oo, 5)\n+        p = 5 + oo\n+        assert isinstance(p, Add) and p.args == (oo, 5)\n+        p = -oo + 5\n+        assert isinstance(p, Add) and p.args == (-oo, 5)\n+        p = -5 - oo\n+        assert isinstance(p, Add) and p.args == (-oo, -5)\n+\n     with evaluate(False):\n         expr = x + x\n         assert isinstance(expr, Add)\n",
  "problem_statement": "Why pretty print of \"oo - oo\" has result  \"nan\", if the evaluation is disabled?\n```python\r\nfrom sympy import evaluate, oo, pretty\r\n\r\nwith evaluate(False):\r\n    print(pretty(oo-oo))\r\n```\n",
  "hints_text": "Also with oo - 5, for instance\n> Also with oo - 5, for instance\r\n\r\nNo, it prints oo in that case :)\nThe documentation of `evaluate` says:\r\n`Note that much of SymPy expects evaluated expressions.  This functionality is experimental and unlikely to function as intended on large expressions.`\r\n\r\nNonetheless, it happens because `evaluate` affects the auto-evaluations in `Add` (inherited from `Basic`) but in both the above cases `oo`(`S.Infinity`) 's `__add__` function is called, no Add object is generated, and the evaluated result is given.\r\n\r\nOne interesting case,\r\n```py\r\n>>> with evaluate(False):\r\n...     print(S(5)+oo)\r\n...     print(oo+S(5))\r\n...\r\n5 + oo\r\noo\r\n```\r\n\r\nOne possible approach would be update the code in `__add__` (and other functions) in `S.Infinity` so that `Add` is called and `evaluate` is acknowledged. It should be easy to fix.\r\n\nHi @ShubhamKJha . I'm willing to work on this issue \r\nI need some help cause this is my first time dealing with such a huge codebase. Can you explain the steps a little more? \nThe `__add__` method here ignores `global_evaluate`. It could be made to check `global_evaluate` but I actually think a better solution would be to remove the `__add__` method and let `Add.flatten` handle (or not handle) this logic:\r\n```julia\r\nIn [1]: with evaluate(False): \r\n   ...:     pprint(Add(oo, -oo)) \r\n   ...:                                                                                                                                                       \r\n-∞ + ∞\r\n```\nHi @namannimmo10, if you are contributing for the first time read [this](https://github.com/sympy/sympy/wiki/Introduction-to-contributing)\r\n\r\nAnd  as @oscarbenjamin suggested start with removing `__add__` method in `sympy.core.numbers.Infinity` class, [test it](https://github.com/sympy/sympy/wiki/Running-tests) and send a PR.",
  "created_at": "2019-12-23T17:51:53Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_add\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.120127",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}