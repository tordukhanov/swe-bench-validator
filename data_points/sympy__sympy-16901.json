{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16901",
  "base_commit": "da4929882a0492492549f8dd5a67f262df1ff142",
  "patch": "diff --git a/sympy/codegen/pyutils.py b/sympy/codegen/pyutils.py\n--- a/sympy/codegen/pyutils.py\n+++ b/sympy/codegen/pyutils.py\n@@ -3,9 +3,18 @@\n \"\"\" This module collects utilities for rendering Python code. \"\"\"\n \n \n-def render_as_module(content):\n-    \"\"\" Renders python code as a module (with the required imports) \"\"\"\n-    printer = PythonCodePrinter()\n+def render_as_module(content, standard='python3'):\n+    \"\"\"Renders python code as a module (with the required imports)\n+\n+    Parameters\n+    ==========\n+\n+    standard\n+        See the parameter ``standard`` in\n+        :meth:`sympy.printing.pycode.pycode`\n+    \"\"\"\n+    # XXX Remove the keyword 'standard' after dropping python 2 support.\n+    printer = PythonCodePrinter({'standard':standard})\n     pystr = printer.doprint(content)\n     if printer._settings['fully_qualified_modules']:\n         module_imports_str = '\\n'.join('import %s' % k for k in printer.module_imports)\ndiff --git a/sympy/polys/numberfields.py b/sympy/polys/numberfields.py\n--- a/sympy/polys/numberfields.py\n+++ b/sympy/polys/numberfields.py\n@@ -31,6 +31,7 @@\n from sympy.polys.rootoftools import CRootOf\n from sympy.polys.specialpolys import cyclotomic_poly\n from sympy.printing.lambdarepr import LambdaPrinter\n+from sympy.printing.pycode import PythonCodePrinter, MpmathPrinter\n from sympy.simplify.radsimp import _split_gcd\n from sympy.simplify.simplify import _is_sum_surds\n from sympy.utilities import (\n@@ -1068,18 +1069,20 @@ def to_number_field(extension, theta=None, **args):\n                 \"%s is not in a subfield of %s\" % (root, theta.root))\n \n \n-class IntervalPrinter(LambdaPrinter):\n+class IntervalPrinter(MpmathPrinter, LambdaPrinter):\n     \"\"\"Use ``lambda`` printer but print numbers as ``mpi`` intervals. \"\"\"\n \n     def _print_Integer(self, expr):\n-        return \"mpi('%s')\" % super(IntervalPrinter, self)._print_Integer(expr)\n+        return \"mpi('%s')\" % super(PythonCodePrinter, self)._print_Integer(expr)\n \n     def _print_Rational(self, expr):\n-        return \"mpi('%s')\" % super(IntervalPrinter, self)._print_Rational(expr)\n+        return \"mpi('%s')\" % super(PythonCodePrinter, self)._print_Rational(expr)\n \n-    def _print_Pow(self, expr):\n-        return super(IntervalPrinter, self)._print_Pow(expr, rational=True)\n+    def _print_Half(self, expr):\n+        return \"mpi('%s')\" % super(PythonCodePrinter, self)._print_Rational(expr)\n \n+    def _print_Pow(self, expr):\n+        return super(MpmathPrinter, self)._print_Pow(expr, rational=True)\n \n @public\n def isolate(alg, eps=None, fast=False):\ndiff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py\n--- a/sympy/printing/lambdarepr.py\n+++ b/sympy/printing/lambdarepr.py\n@@ -54,6 +54,11 @@ def _print_ITE(self, expr):\n     def _print_NumberSymbol(self, expr):\n         return str(expr)\n \n+    def _print_Pow(self, expr, **kwargs):\n+        # XXX Temporary workaround. Should python math printer be\n+        # isolated from PythonCodePrinter?\n+        return super(PythonCodePrinter, self)._print_Pow(expr, **kwargs)\n+\n \n # numexpr works by altering the string passed to numexpr.evaluate\n # rather than by populating a namespace.  Thus a special printer...\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -78,7 +78,6 @@ def _print_known_const(self, expr):\n class AbstractPythonCodePrinter(CodePrinter):\n     printmethod = \"_pythoncode\"\n     language = \"Python\"\n-    standard = \"python3\"\n     reserved_words = _kw_py2and3.union(_kw_only_py3)\n     modules = None  # initialized to a set in __init__\n     tab = '    '\n@@ -94,12 +93,26 @@ class AbstractPythonCodePrinter(CodePrinter):\n         precision=17,\n         inline=True,\n         fully_qualified_modules=True,\n-        contract=False\n+        contract=False,\n+        standard='python3'\n     )\n \n     def __init__(self, settings=None):\n         super(AbstractPythonCodePrinter, self).__init__(settings)\n+\n+        # XXX Remove after dropping python 2 support.\n+        # Python standard handler\n+        std = self._settings['standard']\n+        if std is None:\n+            import sys\n+            std = 'python{}'.format(sys.version_info.major)\n+        if std not in ('python2', 'python3'):\n+            raise ValueError('Unrecognized python standard : {}'.format(std))\n+        self.standard = std\n+\n         self.module_imports = defaultdict(set)\n+\n+        # Known functions and constants handler\n         self.known_functions = dict(self._kf, **(settings or {}).get(\n             'user_functions', {}))\n         self.known_constants = dict(self._kc, **(settings or {}).get(\n@@ -333,6 +346,10 @@ def _print_Print(self, prnt):\n                 self._print(prnt.format_string), print_args)\n         if prnt.file != None: # Must be '!= None', cannot be 'is not None'\n             print_args += ', file=%s' % self._print(prnt.file)\n+\n+        # XXX Remove after dropping python 2 support.\n+        if self.standard == 'python2':\n+            return 'print %s' % print_args\n         return 'print(%s)' % print_args\n \n     def _print_Stream(self, strm):\n@@ -362,6 +379,76 @@ def _print_Indexed(self, expr):\n         index = expr.args[1:]\n         return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n \n+    def _hprint_Pow(self, expr, rational=False, sqrt='math.sqrt'):\n+        \"\"\"Printing helper function for ``Pow``\n+\n+        Notes\n+        =====\n+\n+        This only preprocesses the ``sqrt`` as math formatter\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy.functions import sqrt\n+        >>> from sympy.printing.pycode import PythonCodePrinter\n+        >>> from sympy.abc import x\n+\n+        Python code printer automatically looks up ``math.sqrt``.\n+\n+        >>> printer = PythonCodePrinter({'standard':'python3'})\n+        >>> printer._hprint_Pow(sqrt(x), rational=True)\n+        'x**(1/2)'\n+        >>> printer._hprint_Pow(sqrt(x), rational=False)\n+        'math.sqrt(x)'\n+        >>> printer._hprint_Pow(1/sqrt(x), rational=True)\n+        'x**(-1/2)'\n+        >>> printer._hprint_Pow(1/sqrt(x), rational=False)\n+        '1/math.sqrt(x)'\n+\n+        Using sqrt from numpy or mpmath\n+\n+        >>> printer._hprint_Pow(sqrt(x), sqrt='numpy.sqrt')\n+        'numpy.sqrt(x)'\n+        >>> printer._hprint_Pow(sqrt(x), sqrt='mpmath.sqrt')\n+        'mpmath.sqrt(x)'\n+\n+        See Also\n+        ========\n+\n+        sympy.printing.str.StrPrinter._print_Pow\n+        \"\"\"\n+        PREC = precedence(expr)\n+\n+        if expr.exp == S.Half and not rational:\n+            func = self._module_format(sqrt)\n+            arg = self._print(expr.base)\n+            return '{func}({arg})'.format(func=func, arg=arg)\n+\n+        if expr.is_commutative:\n+            if -expr.exp is S.Half and not rational:\n+                func = self._module_format(sqrt)\n+                num = self._print(S.One)\n+                arg = self._print(expr.base)\n+                return \"{num}/{func}({arg})\".format(\n+                    num=num, func=func, arg=arg)\n+\n+        base_str = self.parenthesize(expr.base, PREC, strict=False)\n+        exp_str = self.parenthesize(expr.exp, PREC, strict=False)\n+        return \"{}**{}\".format(base_str, exp_str)\n+\n+    def _print_Pow(self, expr, rational=False):\n+        return self._hprint_Pow(expr, rational=rational)\n+\n+    def _print_Rational(self, expr):\n+        # XXX Remove after dropping python 2 support.\n+        if self.standard == 'python2':\n+            return '{}./{}.'.format(expr.p, expr.q)\n+        return '{}/{}'.format(expr.p, expr.q)\n+\n+    def _print_Half(self, expr):\n+        return self._print_Rational(expr)\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n@@ -381,6 +468,12 @@ def pycode(expr, **settings):\n     fully_qualified_modules : bool\n         Whether or not to write out full module names of functions\n         (``math.sin`` vs. ``sin``). default: ``True``.\n+    standard : str or None, optional\n+        If 'python2', Python 2 sematics will be used.\n+        If 'python3', Python 3 sematics will be used.\n+        If None, the standard will be automatically detected.\n+        Default is 'python3'. And this parameter may be removed in the\n+        future.\n \n     Examples\n     ========\n@@ -426,11 +519,14 @@ def _print_Float(self, e):\n \n \n     def _print_Rational(self, e):\n-        return '{0}({1})/{0}({2})'.format(\n-            self._module_format('mpmath.mpf'),\n-            e.p,\n-            e.q,\n-            )\n+        return \"{func}({p})/{func}({q})\".format(\n+            func=self._module_format('mpmath.mpf'),\n+            q=self._print(e.q),\n+            p=self._print(e.p)\n+        )\n+\n+    def _print_Half(self, e):\n+        return self._print_Rational(e)\n \n     def _print_uppergamma(self, e):\n         return \"{0}({1}, {2}, {3})\".format(\n@@ -453,6 +549,10 @@ def _print_log1p(self, e):\n         return '{0}({1}+1)'.format(\n             self._module_format('mpmath.log'), self._print(e.args[0]))\n \n+    def _print_Pow(self, expr, rational=False):\n+        return self._hprint_Pow(expr, rational=rational, sqrt='mpmath.sqrt')\n+\n+\n for k in MpmathPrinter._kf:\n     setattr(MpmathPrinter, '_print_%s' % k, _print_known_func)\n \n@@ -574,17 +674,18 @@ def _print_Not(self, expr):\n         #     own because StrPrinter doesn't define it.\n         return '{0}({1})'.format(self._module_format('numpy.logical_not'), ','.join(self._print(i) for i in expr.args))\n \n+    def _print_Pow(self, expr, rational=False):\n+        # XXX Workaround for negative integer power error\n+        if expr.exp.is_integer and expr.exp.is_negative:\n+            expr = expr.base ** expr.exp.evalf()\n+        return self._hprint_Pow(expr, rational=rational, sqrt='numpy.sqrt')\n+\n     def _print_Min(self, expr):\n         return '{0}(({1}))'.format(self._module_format('numpy.amin'), ','.join(self._print(i) for i in expr.args))\n \n     def _print_Max(self, expr):\n         return '{0}(({1}))'.format(self._module_format('numpy.amax'), ','.join(self._print(i) for i in expr.args))\n \n-    def _print_Pow(self, expr):\n-        if expr.exp == 0.5:\n-            return '{0}({1})'.format(self._module_format('numpy.sqrt'), self._print(expr.base))\n-        else:\n-            return super(NumPyPrinter, self)._print_Pow(expr)\n \n     def _print_arg(self, expr):\n         return \"%s(%s)\" % (self._module_format('numpy.angle'), self._print(expr.args[0]))\n@@ -754,3 +855,6 @@ def _print_Function(self, expr):\n         mod = expr.func.__module__ or ''\n         return '%s(%s)' % (self._module_format(mod + ('.' if mod else '') + expr.func.__name__),\n                            ', '.join(map(lambda arg: self._print(arg), expr.args)))\n+\n+    def _print_Pow(self, expr, rational=False):\n+        return self._hprint_Pow(expr, rational=rational, sqrt='sympy.sqrt')\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -531,6 +531,44 @@ def _print_AlgebraicNumber(self, expr):\n             return self._print(expr.as_expr())\n \n     def _print_Pow(self, expr, rational=False):\n+        \"\"\"Printing helper function for ``Pow``\n+\n+        Parameters\n+        ==========\n+\n+        rational : bool, optional\n+            If ``True``, it will not attempt printing ``sqrt(x)`` or\n+            ``x**S.Half`` as ``sqrt``, and will use ``x**(1/2)``\n+            instead.\n+\n+            See examples for additional details\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy.functions import sqrt\n+        >>> from sympy.printing.str import StrPrinter\n+        >>> from sympy.abc import x\n+\n+        How ``rational`` keyword works with ``sqrt``:\n+\n+        >>> printer = StrPrinter()\n+        >>> printer._print_Pow(sqrt(x), rational=True)\n+        'x**(1/2)'\n+        >>> printer._print_Pow(sqrt(x), rational=False)\n+        'sqrt(x)'\n+        >>> printer._print_Pow(1/sqrt(x), rational=True)\n+        'x**(-1/2)'\n+        >>> printer._print_Pow(1/sqrt(x), rational=False)\n+        '1/sqrt(x)'\n+\n+        Notes\n+        =====\n+\n+        ``sqrt(x)`` is canonicalized as ``Pow(x, S.Half)`` in SymPy,\n+        so there is no need of defining a separate printer for ``sqrt``.\n+        Instead, it should be handled here as well.\n+        \"\"\"\n         PREC = precedence(expr)\n \n         if expr.exp is S.Half and not rational:\n",
  "test_patch": "diff --git a/sympy/codegen/tests/test_pyutils.py b/sympy/codegen/tests/test_pyutils.py\nnew file mode 100644\n--- /dev/null\n+++ b/sympy/codegen/tests/test_pyutils.py\n@@ -0,0 +1,9 @@\n+from sympy.codegen.ast import Print\n+from sympy.codegen.pyutils import render_as_module\n+\n+def test_standard():\n+    ast = Print('x y'.split(), \"coordinate: %12.5g %12.5g\")\n+    assert render_as_module(ast, standard='python3') == \\\n+        '\\n\\nprint(\"coordinate: %12.5g %12.5g\" % (x, y))'\n+    assert render_as_module(ast, standard='python2') == \\\n+        '\\n\\nprint \"coordinate: %12.5g %12.5g\" % (x, y)'\ndiff --git a/sympy/printing/tests/test_lambdarepr.py b/sympy/printing/tests/test_lambdarepr.py\n--- a/sympy/printing/tests/test_lambdarepr.py\n+++ b/sympy/printing/tests/test_lambdarepr.py\n@@ -1,4 +1,5 @@\n-from sympy import symbols, sin, Matrix, Interval, Piecewise, Sum, lambdify,Expr\n+from sympy import symbols, sin, Matrix, Interval, Piecewise, Sum, lambdify, \\\n+                  Expr, sqrt\n from sympy.utilities.pytest import raises\n \n from sympy.printing.tensorflow import TensorflowPrinter\n@@ -190,6 +191,14 @@ def test_multiple_sums():\n     assert f_res == f_ref\n \n \n+def test_sqrt():\n+    prntr = LambdaPrinter({'standard' : 'python2'})\n+    assert prntr._print_Pow(sqrt(x), rational=False) == 'sqrt(x)'\n+    assert prntr._print_Pow(sqrt(x), rational=True) == 'x**(1./2.)'\n+    prntr = LambdaPrinter({'standard' : 'python3'})\n+    assert prntr._print_Pow(sqrt(x), rational=True) == 'x**(1/2)'\n+\n+\n def test_settings():\n     raises(TypeError, lambda: lambdarepr(sin(x), method=\"garbage\"))\n \ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -4,12 +4,14 @@\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational\n+from sympy.core.singleton import S\n from sympy.core.numbers import pi\n-from sympy.functions import acos, Piecewise, sign\n+from sympy.functions import acos, Piecewise, sign, sqrt\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol\n from sympy.printing.pycode import (\n-    MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n+    MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter,\n+    SymPyPrinter\n )\n from sympy.utilities.pytest import raises\n from sympy.tensor import IndexedBase\n@@ -19,14 +21,22 @@\n \n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n+\n     assert not prntr.module_imports\n+\n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n+\n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n+\n+    assert prntr.doprint(x**Rational(1, 2)) == 'math.sqrt(x)'\n+    assert prntr.doprint(sqrt(x)) == 'math.sqrt(x)'\n+    assert prntr.module_imports == {'math': {'pi', 'sqrt'}}\n+\n     assert prntr.doprint(acos(x)) == 'math.acos(x)'\n     assert prntr.doprint(Assignment(x, 2)) == 'x = 2'\n     assert prntr.doprint(Piecewise((1, Eq(x, 0)),\n@@ -38,6 +48,18 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n \n \n+def test_PythonCodePrinter_standard():\n+    import sys\n+    prntr = PythonCodePrinter({'standard':None})\n+\n+    python_version = sys.version_info.major\n+    if python_version == 2:\n+        assert prntr.standard == 'python2'\n+    if python_version == 3:\n+        assert prntr.standard == 'python3'\n+\n+    raises(ValueError, lambda: PythonCodePrinter({'standard':'python4'}))\n+\n def test_MpmathPrinter():\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n@@ -50,6 +72,10 @@ def test_NumPyPrinter():\n     assert p.doprint(A**(-1)) == \"numpy.linalg.inv(A)\"\n     assert p.doprint(A**5) == \"numpy.linalg.matrix_power(A, 5)\"\n \n+    # Workaround for numpy negative integer power errors\n+    assert p.doprint(x**-1) == 'x**(-1.0)'\n+    assert p.doprint(x**-2) == 'x**(-2.0)'\n+\n \n def test_SciPyPrinter():\n     p = SciPyPrinter()\n@@ -70,6 +96,37 @@ def test_pycode_reserved_words():\n     assert py_str in ('else_ + if_', 'if_ + else_')\n \n \n+def test_sqrt():\n+    prntr = PythonCodePrinter()\n+    assert prntr._print_Pow(sqrt(x), rational=False) == 'math.sqrt(x)'\n+    assert prntr._print_Pow(1/sqrt(x), rational=False) == '1/math.sqrt(x)'\n+\n+    prntr = PythonCodePrinter({'standard' : 'python2'})\n+    assert prntr._print_Pow(sqrt(x), rational=True) == 'x**(1./2.)'\n+    assert prntr._print_Pow(1/sqrt(x), rational=True) == 'x**(-1./2.)'\n+\n+    prntr = PythonCodePrinter({'standard' : 'python3'})\n+    assert prntr._print_Pow(sqrt(x), rational=True) == 'x**(1/2)'\n+    assert prntr._print_Pow(1/sqrt(x), rational=True) == 'x**(-1/2)'\n+\n+    prntr = MpmathPrinter()\n+    assert prntr._print_Pow(sqrt(x), rational=False) == 'mpmath.sqrt(x)'\n+    assert prntr._print_Pow(sqrt(x), rational=True) == \\\n+        \"x**(mpmath.mpf(1)/mpmath.mpf(2))\"\n+\n+    prntr = NumPyPrinter()\n+    assert prntr._print_Pow(sqrt(x), rational=False) == 'numpy.sqrt(x)'\n+    assert prntr._print_Pow(sqrt(x), rational=True) == 'x**(1/2)'\n+\n+    prntr = SciPyPrinter()\n+    assert prntr._print_Pow(sqrt(x), rational=False) == 'numpy.sqrt(x)'\n+    assert prntr._print_Pow(sqrt(x), rational=True) == 'x**(1/2)'\n+\n+    prntr = SymPyPrinter()\n+    assert prntr._print_Pow(sqrt(x), rational=False) == 'sympy.sqrt(x)'\n+    assert prntr._print_Pow(sqrt(x), rational=True) == 'x**(1/2)'\n+\n+\n class CustomPrintedObject(Expr):\n     def _numpycode(self, printer):\n         return 'numpy'\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -835,14 +835,7 @@ def test_lambdify_docstring():\n \n \n def test_special_printers():\n-    class IntervalPrinter(LambdaPrinter):\n-        \"\"\"Use ``lambda`` printer but print numbers as ``mpi`` intervals. \"\"\"\n-\n-        def _print_Integer(self, expr):\n-            return \"mpi('%s')\" % super(IntervalPrinter, self)._print_Integer(expr)\n-\n-        def _print_Rational(self, expr):\n-            return \"mpi('%s')\" % super(IntervalPrinter, self)._print_Rational(expr)\n+    from sympy.polys.numberfields import IntervalPrinter\n \n     def intervalrepr(expr):\n         return IntervalPrinter().doprint(expr)\n",
  "problem_statement": "Pycode does not generate fully qualified name for `sqrt`.\n**Problem:**\r\n\r\nWhen using `sympy.pycode` to generate code for an expression containing `sqrt`, the generated code does not produce fully qualified name like `math.sqrt`. This leads to \r\n`NameError: name 'sqrt' is not defined` errors in generated code. It is also inconsistent with code generated for other functions like `sin`, `cos`, `log`, `exp` etc. The following is a minimum code to demonstrate the issue.\r\n\r\n```python\r\nPython 3.7.3 (default, Mar 26 2019, 21:43:19) \r\n[GCC 8.2.1 20181127] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import sympy\r\n>>> sympy.pycode('sin(x)')\r\n'math.sin(x)'\r\n>>> sympy.pycode('cos(x)')\r\n'math.cos(x)'\r\n>>> sympy.pycode('log(x)')\r\n'math.log(x)'\r\n>>> sympy.pycode('exp(x)')\r\n'math.exp(x)'\r\n>>> sympy.pycode('sqrt(x)')\r\n'sqrt(x)'\r\n```\r\n\r\n**Version:**\r\n1. Sympy 1.4 - installed from Arch Linux official repository.\r\n2. Python 3.7.3\n",
  "hints_text": "",
  "created_at": "2019-05-26T19:03:23Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_PythonCodePrinter\", \"test_PythonCodePrinter_standard\", \"test_NumPyPrinter\"]",
  "PASS_TO_PASS": "[\"test_basic\", \"test_matrix\", \"test_piecewise\", \"test_sum__1\", \"test_sum__2\", \"test_multiple_sums\", \"test_sqrt\", \"test_settings\", \"test_MpmathPrinter\", \"test_SciPyPrinter\", \"test_pycode_reserved_words\", \"test_printmethod\", \"test_codegen_ast_nodes\", \"test_issue_14283\", \"test_no_args\", \"test_single_arg\", \"test_list_args\", \"test_nested_args\", \"test_str_args\", \"test_own_namespace_1\", \"test_own_namespace_2\", \"test_own_module\", \"test_bad_args\", \"test_atoms\", \"test_sympy_lambda\", \"test_math_lambda\", \"test_mpmath_lambda\", \"test_number_precision\", \"test_mpmath_precision\", \"test_math_transl\", \"test_mpmath_transl\", \"test_exponentiation\", \"test_trig\", \"test_vector_simple\", \"test_vector_discontinuous\", \"test_trig_symbolic\", \"test_trig_float\", \"test_docs\", \"test_math\", \"test_sin\", \"test_issue9474\", \"test_integral\", \"test_sym_single_arg\", \"test_sym_list_args\", \"test_sym_integral\", \"test_namespace_order\", \"test_namespace_type\", \"test_imps\", \"test_imps_errors\", \"test_imps_wrong_args\", \"test_lambdify_imps\", \"test_dummification\", \"test_curly_matrix_symbol\", \"test_python_keywords\", \"test_lambdify_docstring\", \"test_special_printers\", \"test_true_false\", \"test_issue_2790\", \"test_issue_12092\", \"test_issue_14911\", \"test_ITE\", \"test_Min_Max\", \"test_issue_12173\", \"test_sinc_mpmath\", \"test_lambdify_dummy_arg\", \"test_lambdify_mixed_symbol_dummy_args\", \"test_lambdify_inspect\", \"test_issue_14941\", \"test_lambdify_Derivative_arg_issue_16468\", \"test_imag_real\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.111073",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}