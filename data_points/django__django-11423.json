{
  "repo": "django/django",
  "instance_id": "django__django-11423",
  "base_commit": "ea6e684f344e5c2ed5a2be1cf2420725c2f88405",
  "patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -1,3 +1,6 @@\n+import functools\n+import itertools\n+import operator\n from collections import defaultdict\n \n from django.contrib.contenttypes.models import ContentType\n@@ -515,17 +518,18 @@ def __init__(self, instance=None):\n             self.instance = instance\n \n             self.model = rel.model\n-\n-            content_type = ContentType.objects.db_manager(instance._state.db).get_for_model(\n-                instance, for_concrete_model=rel.field.for_concrete_model)\n-            self.content_type = content_type\n+            self.get_content_type = functools.partial(\n+                ContentType.objects.db_manager(instance._state.db).get_for_model,\n+                for_concrete_model=rel.field.for_concrete_model,\n+            )\n+            self.content_type = self.get_content_type(instance)\n             self.content_type_field_name = rel.field.content_type_field_name\n             self.object_id_field_name = rel.field.object_id_field_name\n             self.prefetch_cache_name = rel.field.attname\n             self.pk_val = instance.pk\n \n             self.core_filters = {\n-                '%s__pk' % self.content_type_field_name: content_type.id,\n+                '%s__pk' % self.content_type_field_name: self.content_type.id,\n                 self.object_id_field_name: self.pk_val,\n             }\n \n@@ -564,19 +568,28 @@ def get_prefetch_queryset(self, instances, queryset=None):\n \n             queryset._add_hints(instance=instances[0])\n             queryset = queryset.using(queryset._db or self._db)\n-\n-            query = {\n-                '%s__pk' % self.content_type_field_name: self.content_type.id,\n-                '%s__in' % self.object_id_field_name: {obj.pk for obj in instances}\n-            }\n-\n+            # Group instances by content types.\n+            content_type_queries = (\n+                models.Q(**{\n+                    '%s__pk' % self.content_type_field_name: content_type_id,\n+                    '%s__in' % self.object_id_field_name: {obj.pk for obj in objs}\n+                })\n+                for content_type_id, objs in itertools.groupby(\n+                    sorted(instances, key=lambda obj: self.get_content_type(obj).pk),\n+                    lambda obj: self.get_content_type(obj).pk,\n+                )\n+            )\n+            query = functools.reduce(operator.or_, content_type_queries)\n             # We (possibly) need to convert object IDs to the type of the\n             # instances' PK in order to match up instances:\n             object_id_converter = instances[0]._meta.pk.to_python\n             return (\n-                queryset.filter(**query),\n-                lambda relobj: object_id_converter(getattr(relobj, self.object_id_field_name)),\n-                lambda obj: obj.pk,\n+                queryset.filter(query),\n+                lambda relobj: (\n+                    object_id_converter(getattr(relobj, self.object_id_field_name)),\n+                    relobj.content_type_id\n+                ),\n+                lambda obj: (obj.pk, self.get_content_type(obj).pk),\n                 False,\n                 self.prefetch_cache_name,\n                 False,\n",
  "test_patch": "diff --git a/tests/generic_relations/tests.py b/tests/generic_relations/tests.py\n--- a/tests/generic_relations/tests.py\n+++ b/tests/generic_relations/tests.py\n@@ -546,6 +546,24 @@ def test_add_then_remove_after_prefetch(self):\n         platypus.tags.remove(weird_tag)\n         self.assertSequenceEqual(platypus.tags.all(), [furry_tag])\n \n+    def test_prefetch_related_different_content_types(self):\n+        TaggedItem.objects.create(content_object=self.platypus, tag='prefetch_tag_1')\n+        TaggedItem.objects.create(\n+            content_object=Vegetable.objects.create(name='Broccoli'),\n+            tag='prefetch_tag_2',\n+        )\n+        TaggedItem.objects.create(\n+            content_object=Animal.objects.create(common_name='Bear'),\n+            tag='prefetch_tag_3',\n+        )\n+        qs = TaggedItem.objects.filter(\n+            tag__startswith='prefetch_tag_',\n+        ).prefetch_related('content_object', 'content_object__tags')\n+        with self.assertNumQueries(4):\n+            tags = list(qs)\n+        for tag in tags:\n+            self.assertSequenceEqual(tag.content_object.tags.all(), [tag])\n+\n \n class ProxyRelatedModelTest(TestCase):\n     def test_default_behavior(self):\n",
  "problem_statement": "GenericRelation and prefetch_related: wrong caching with cyclic prefetching.\nDescription\n\t\nHello @all!\nI encountered an issue with GenericRelations. Here is an example to reproduce this issue: ​https://github.com/FinnStutzenstein/GenericRelatedPrefetch\nJust do a migrate and runserver. The code showing the error is started automatically in main/apps.py. Please start with --noreload not to have the output twice.\nWhats the problem?\nI have a generic model (Tag) that have a content_object. Then there are multiple (in the example 2) models, Book and CD, that have exactly one tag assigned. In the real application (OpenSlides) this invariant is ensured in other places; in the example the objects are created in a way, that this invariant holds.\nAll these content objects have a property tag, that should return the one assigned tag. This is done by adding a helper field tags=GenericRelation(Tag) and the property accesses self.tags.all()[0]. The .all()[0] instead of a simple .get() is required for the prefetching to work. See main/models.py in the example.\nNow all tags should be loaded because in OpenSlides they would be serialized. For each tag the content_object is accessed as well as content_object.tag. Because this would result in many DB queries (in the real application about 10000 Tags, and in sum 10000 content objects) the models are prefetched with: Tag.objects.prefetch_related(\"content_object\", \"content_object__tag\") (Note: The executed code is in main/apps.py). This results in a constant amount of queries (4 in this case) instead of something proportional to the amount of objects. In the example you can set N, the amount of objects created, to a higher amount to verify, that the amount of queries stays constant.\nWhat is expected: If I have a tag tag, tag.content_object.tag should be equal to tag.\nOutput from the example (with N=1):\nGot 'Tag to book0':\n\t-the content object: Book0\n\t-the content objects tag (should be the same as 'Tag to book0'!):Tag to book0\nGot 'Tag to cd0':\n\t-the content object: CD0\n\t-the content objects tag (should be the same as 'Tag to cd0'!):Tag to book0\nThis is not the case: 'Tag to cd1' -> 'cd1' -> 'Tag to book1'.\nI tracked this a bit showing, that _prefetched_objects_cache holds the wrong value, which is accessed through .all() -> .get_queryset() where the cached/prefetched result is taken.\nThanks!\n",
  "hints_text": "Thanks for the report. This is definitely related with prefetch_related(), because get() and first() works properly. Reproduced at 519016e5f25d7c0a040015724f9920581551cab0.\n​PR",
  "created_at": "2019-05-28T07:50:36Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_prefetch_related_different_content_types (generic_relations.tests.GenericRelationsTests)\"]",
  "PASS_TO_PASS": "[\"test_none_allowed (generic_relations.tests.TestInitWithNoneArgument)\", \"test_default_behavior (generic_relations.tests.ProxyRelatedModelTest)\", \"test_generic_relation (generic_relations.tests.ProxyRelatedModelTest)\", \"test_generic_relation_set (generic_relations.tests.ProxyRelatedModelTest)\", \"test_proxy_is_returned (generic_relations.tests.ProxyRelatedModelTest)\", \"test_query (generic_relations.tests.ProxyRelatedModelTest)\", \"test_query_proxy (generic_relations.tests.ProxyRelatedModelTest)\", \"test_works_normally (generic_relations.tests.ProxyRelatedModelTest)\", \"test_access_content_object (generic_relations.tests.GenericRelationsTests)\", \"test_access_via_content_type (generic_relations.tests.GenericRelationsTests)\", \"test_add_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_add_bulk (generic_relations.tests.GenericRelationsTests)\", \"test_add_bulk_false (generic_relations.tests.GenericRelationsTests)\", \"test_add_rejects_unsaved_objects (generic_relations.tests.GenericRelationsTests)\", \"test_add_rejects_wrong_instances (generic_relations.tests.GenericRelationsTests)\", \"test_add_then_remove_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_assign (generic_relations.tests.GenericRelationsTests)\", \"test_assign_content_object_in_init (generic_relations.tests.GenericRelationsTests)\", \"test_assign_with_queryset (generic_relations.tests.GenericRelationsTests)\", \"test_cache_invalidation_for_content_type_id (generic_relations.tests.GenericRelationsTests)\", \"test_cache_invalidation_for_object_id (generic_relations.tests.GenericRelationsTests)\", \"test_clear_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_create_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_exclude_generic_relations (generic_relations.tests.GenericRelationsTests)\", \"test_generic_get_or_create_when_created (generic_relations.tests.GenericRelationsTests)\", \"test_generic_get_or_create_when_exists (generic_relations.tests.GenericRelationsTests)\", \"test_generic_relation_related_name_default (generic_relations.tests.GenericRelationsTests)\", \"test_generic_relation_to_inherited_child (generic_relations.tests.GenericRelationsTests)\", \"test_generic_relations_m2m_mimic (generic_relations.tests.GenericRelationsTests)\", \"test_generic_update_or_create_when_created (generic_relations.tests.GenericRelationsTests)\", \"test_generic_update_or_create_when_updated (generic_relations.tests.GenericRelationsTests)\", \"test_get_or_create (generic_relations.tests.GenericRelationsTests)\", \"test_gfk_manager (generic_relations.tests.GenericRelationsTests)\", \"test_gfk_subclasses (generic_relations.tests.GenericRelationsTests)\", \"test_multiple_gfk (generic_relations.tests.GenericRelationsTests)\", \"test_object_deletion_with_generic_relation (generic_relations.tests.GenericRelationsTests)\", \"test_object_deletion_without_generic_relation (generic_relations.tests.GenericRelationsTests)\", \"test_queries_across_generic_relations (generic_relations.tests.GenericRelationsTests)\", \"test_queries_content_type_restriction (generic_relations.tests.GenericRelationsTests)\", \"test_query_content_object (generic_relations.tests.GenericRelationsTests)\", \"test_query_content_type (generic_relations.tests.GenericRelationsTests)\", \"test_remove_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_set (generic_relations.tests.GenericRelationsTests)\", \"test_set_after_prefetch (generic_relations.tests.GenericRelationsTests)\", \"test_set_foreign_key (generic_relations.tests.GenericRelationsTests)\", \"test_subclasses_with_gen_rel (generic_relations.tests.GenericRelationsTests)\", \"test_subclasses_with_parent_gen_rel (generic_relations.tests.GenericRelationsTests)\", \"test_tag_deletion_related_objects_unaffected (generic_relations.tests.GenericRelationsTests)\", \"test_unsaved_instance_on_generic_foreign_key (generic_relations.tests.GenericRelationsTests)\", \"test_update_or_create_defaults (generic_relations.tests.GenericRelationsTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.572383",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}