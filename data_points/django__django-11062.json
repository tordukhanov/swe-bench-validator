{
  "repo": "django/django",
  "instance_id": "django__django-11062",
  "base_commit": "cbf7e71558c94ce1c327b683768a18a25d82d197",
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -21,7 +21,9 @@\n from django.db import DEFAULT_DB_ALIAS, NotSupportedError, connections\n from django.db.models.aggregates import Count\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.expressions import BaseExpression, Col, F, Ref, SimpleCol\n+from django.db.models.expressions import (\n+    BaseExpression, Col, F, OuterRef, Ref, SimpleCol,\n+)\n from django.db.models.fields import Field\n from django.db.models.fields.related_lookups import MultiColSource\n from django.db.models.lookups import Lookup\n@@ -380,18 +382,26 @@ def rewrite_cols(self, annotation, col_cnt):\n                 # before the contains_aggregate/is_summary condition below.\n                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n                 new_exprs.append(new_expr)\n-            elif isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):\n-                # Reference to column. Make sure the referenced column\n-                # is selected.\n-                col_cnt += 1\n-                col_alias = '__col%d' % col_cnt\n-                self.annotations[col_alias] = expr\n-                self.append_annotation_mask([col_alias])\n-                new_exprs.append(Ref(col_alias, expr))\n             else:\n-                # Some other expression not referencing database values\n-                # directly. Its subexpression might contain Cols.\n-                new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n+                # Reuse aliases of expressions already selected in subquery.\n+                for col_alias, selected_annotation in self.annotation_select.items():\n+                    if selected_annotation == expr:\n+                        new_expr = Ref(col_alias, expr)\n+                        break\n+                else:\n+                    # An expression that is not selected the subquery.\n+                    if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):\n+                        # Reference column or another aggregate. Select it\n+                        # under a non-conflicting alias.\n+                        col_cnt += 1\n+                        col_alias = '__col%d' % col_cnt\n+                        self.annotations[col_alias] = expr\n+                        self.append_annotation_mask([col_alias])\n+                        new_expr = Ref(col_alias, expr)\n+                    else:\n+                        # Some other expression not referencing database values\n+                        # directly. Its subexpression might contain Cols.\n+                        new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n                 new_exprs.append(new_expr)\n         annotation.set_source_expressions(new_exprs)\n         return annotation, col_cnt\n@@ -403,11 +413,11 @@ def get_aggregation(self, using, added_aggregate_names):\n         if not self.annotation_select:\n             return {}\n         has_limit = self.low_mark != 0 or self.high_mark is not None\n-        has_existing_annotations = any(\n+        existing_annotations = [\n             annotation for alias, annotation\n             in self.annotations.items()\n             if alias not in added_aggregate_names\n-        )\n+        ]\n         # Decide if we need to use a subquery.\n         #\n         # Existing annotations would cause incorrect results as get_aggregation()\n@@ -419,13 +429,14 @@ def get_aggregation(self, using, added_aggregate_names):\n         # those operations must be done in a subquery so that the query\n         # aggregates on the limit and/or distinct results instead of applying\n         # the distinct and limit after the aggregation.\n-        if (isinstance(self.group_by, tuple) or has_limit or has_existing_annotations or\n+        if (isinstance(self.group_by, tuple) or has_limit or existing_annotations or\n                 self.distinct or self.combinator):\n             from django.db.models.sql.subqueries import AggregateQuery\n             outer_query = AggregateQuery(self.model)\n             inner_query = self.clone()\n             inner_query.select_for_update = False\n             inner_query.select_related = False\n+            inner_query.set_annotation_mask(self.annotation_select)\n             if not has_limit and not self.distinct_fields:\n                 # Queries with distinct_fields need ordering and when a limit\n                 # is applied we must take the slice from the ordered query.\n@@ -437,7 +448,11 @@ def get_aggregation(self, using, added_aggregate_names):\n                 # query is grouped by the main model's primary key. However,\n                 # clearing the select clause can alter results if distinct is\n                 # used.\n-                if inner_query.default_cols and has_existing_annotations:\n+                has_existing_aggregate_annotations = any(\n+                    annotation for annotation in existing_annotations\n+                    if getattr(annotation, 'contains_aggregate', True)\n+                )\n+                if inner_query.default_cols and has_existing_aggregate_annotations:\n                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n                 inner_query.default_cols = False\n \n@@ -447,10 +462,12 @@ def get_aggregation(self, using, added_aggregate_names):\n             # and move them to the outer AggregateQuery.\n             col_cnt = 0\n             for alias, expression in list(inner_query.annotation_select.items()):\n+                annotation_select_mask = inner_query.annotation_select_mask\n                 if expression.is_summary:\n                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n                     del inner_query.annotations[alias]\n+                    annotation_select_mask.remove(alias)\n                 # Make sure the annotation_select wont use cached results.\n                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n@@ -1639,6 +1656,9 @@ def split_exclude(self, filter_expr, can_reuse, names_with_path):\n         saner null handling, and is easier for the backend's optimizer to\n         handle.\n         \"\"\"\n+        filter_lhs, filter_rhs = filter_expr\n+        if isinstance(filter_rhs, F):\n+            filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n         query.add_filter(filter_expr)\n",
  "test_patch": "diff --git a/tests/aggregation/test_filter_argument.py b/tests/aggregation/test_filter_argument.py\n--- a/tests/aggregation/test_filter_argument.py\n+++ b/tests/aggregation/test_filter_argument.py\n@@ -87,3 +87,11 @@ def test_filtered_reused_subquery(self):\n             older_friends_count__gte=2,\n         )\n         self.assertEqual(qs.get(pk__in=qs.values('pk')), self.a1)\n+\n+    def test_filtered_aggregate_ref_annotation(self):\n+        aggs = Author.objects.annotate(\n+            double_age=F('age') * 2,\n+        ).aggregate(\n+            cnt=Count('pk', filter=Q(double_age__gt=100)),\n+        )\n+        self.assertEqual(aggs['cnt'], 2)\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -551,6 +551,26 @@ def test_subquery_filter_by_aggregate(self):\n         )\n         self.assertEqual(qs.get().float, 1.2)\n \n+    def test_aggregate_subquery_annotation(self):\n+        with self.assertNumQueries(1) as ctx:\n+            aggregate = Company.objects.annotate(\n+                ceo_salary=Subquery(\n+                    Employee.objects.filter(\n+                        id=OuterRef('ceo_id'),\n+                    ).values('salary')\n+                ),\n+            ).aggregate(\n+                ceo_salary_gt_20=Count('pk', filter=Q(ceo_salary__gt=20)),\n+            )\n+        self.assertEqual(aggregate, {'ceo_salary_gt_20': 1})\n+        # Aggregation over a subquery annotation doesn't annotate the subquery\n+        # twice in the inner query.\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertLessEqual(sql.count('SELECT'), 3)\n+        # GROUP BY isn't required to aggregate over a query that doesn't\n+        # contain nested aggregates.\n+        self.assertNotIn('GROUP BY', sql)\n+\n     def test_explicit_output_field(self):\n         class FuncA(Func):\n             output_field = models.CharField()\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2776,6 +2776,12 @@ def employ(employer, employee, title):\n             employment__title__in=('Engineer', 'Developer')).distinct().order_by('name')\n         self.assertSequenceEqual(alex_nontech_employers, [google, intel, microsoft])\n \n+    def test_exclude_reverse_fk_field_ref(self):\n+        tag = Tag.objects.create()\n+        Note.objects.create(tag=tag, note='note')\n+        annotation = Annotation.objects.create(name='annotation', tag=tag)\n+        self.assertEqual(Annotation.objects.exclude(tag__note__note=F('name')).get(), annotation)\n+\n \n class ExcludeTest17600(TestCase):\n     \"\"\"\n",
  "problem_statement": "Using an annotated field calculated with django.db.models.functions.Extract in aggregate results in ProgrammingError\nDescription\n\t\nAggregating most annotated fields works as expected, but if I put a DateTimeField through Extract during the annotate step, I get a ProgrammingError when trying to aggregate.\nmodels.py\nclass MyModel(models.Model):\n\tusage_time = models.DateTimeField()\n\tusage = models.FloatField()\nI would like to take the whole queryset, and calculate hourly usages. I figured using the django.db.models.functions.Extract transform would suit my needs well. This is the sample piece of code that, in a perfect scenario, would give me a dictionary filled with key value pairs, where key is the hour, and value is the sum of usages measured in that hour. \n\thour_aggregates = {}\n\tfor i in range(24):\n\t\thour_aggregates['{}_{}'.format(\"am\" if i < 12 else \"pm\", i)] = Sum(\"usage\", filter=Q(hour=i))\n\tusages = MyModel.objects.annotate(hour=Extract(\"usage_time\", \"hour\")).aggregate(**hour_aggregates)\nUnfortunately, I get the following error:\nTraceback (most recent call last):\n File \"/home/jan/project/env/lib/python3.6/site-packages/django/db/backends/utils.py\", line 85, in _execute\n\treturn self.cursor.execute(sql, params)\npsycopg2.ProgrammingError: column \"__col2\" does not exist\nLINE 1: ...CT \"package_mymodel\".\"id\" AS Col1, EXTRACT('hour' FROM \"__col2\" A...\nThis occured to me while using Django 2.1.7. It doesn't work on 2.2b1, but I have tested this solution on Django 1.8 and it works, which is why I am filing this bug report. My Python version is 3.6.7 and I'm using PostgreSQL 10.6.\n",
  "hints_text": "",
  "created_at": "2019-03-08T16:34:17Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\"]",
  "PASS_TO_PASS": "[\"test_ticket7371 (queries.tests.CustomPkTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"#13227 -- If a queryset is already evaluated, it can still be used as a query arg\", \"test_no_fields_cloning (queries.tests.CloneTests)\", \"test_no_model_options_cloning (queries.tests.CloneTests)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"test_ticket8597 (queries.tests.ComparisonTests)\", \"test_no_extra_params (queries.tests.DefaultValuesInsertTest)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_invalid_qs_list (queries.tests.QuerySetExceptionTests)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_iter_exceptions (queries.tests.QuerySetExceptionTests)\", \"test_evaluated_proxy_count (queries.tests.ProxyQueryCleanupTest)\", \"test_ticket14729 (queries.tests.RawQueriesTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_ticket8683 (queries.tests.Queries3Tests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"test_ticket_20101 (queries.tests.Ticket20101Tests)\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"test_inverted_q_across_relations (queries.tests.JoinReuseTest)\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_complex_expressions (expressions.tests.ExpressionsNumericTests)\", \"test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)\", \"test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)\", \"test_increment_value (expressions.tests.ExpressionsNumericTests)\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"test_ticket_24605 (queries.tests.TestTicket24605)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_exclude_plain (queries.tests.ExcludeTest17600)\", \"test_exclude_plain_distinct (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_is_equal_to_plain_exclude (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_is_equal_to_plain_exclude_variation (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_object_distinct (queries.tests.ExcludeTest17600)\", \"test_exclude_with_q_object_no_distinct (queries.tests.ExcludeTest17600)\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_correct_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_values_queryset_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_wrong_backward_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_wrong_type_lookup (queries.tests.RelatedLookupTypeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_case_aggregate (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_double_filtered_aggregates (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_excluded_aggregates (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_aggregate_on_annotate (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_aggregate_ref_annotation (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_aggregates (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_reused_subquery (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_plain_annotate (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_related_aggregates_m2m (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_related_aggregates_m2m_and_fk (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_sum_star_exception (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"test_related_sliced_subquery (queries.tests.SubqueryTests)\", \"test_slice_subquery_and_query (queries.tests.SubqueryTests)\", \"Delete queries can safely contain sliced subqueries\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\", \"test_common_mixed_case_foreign_keys (queries.tests.Queries1Tests)\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_get_clears_ordering (queries.tests.Queries1Tests)\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"test_order_by_join_unref (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"test_ticket17429 (queries.tests.Queries1Tests)\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7098 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9411 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.558233",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}