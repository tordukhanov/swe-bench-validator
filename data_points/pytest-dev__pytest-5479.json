{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-5479",
  "base_commit": "2301fa61dee4e3724efdfd8cbf3a93af143aef4c",
  "patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -572,8 +572,13 @@ def match(self, regexp):\n         raised.\n         \"\"\"\n         __tracebackhide__ = True\n-        if not re.search(regexp, str(self.value)):\n-            assert 0, \"Pattern '{!s}' not found in '{!s}'\".format(regexp, self.value)\n+        value = (\n+            text_type(self.value) if isinstance(regexp, text_type) else str(self.value)\n+        )\n+        if not re.search(regexp, value):\n+            raise AssertionError(\n+                u\"Pattern {!r} not found in {!r}\".format(regexp, value)\n+            )\n         return True\n \n \n",
  "test_patch": "diff --git a/testing/python/raises.py b/testing/python/raises.py\n--- a/testing/python/raises.py\n+++ b/testing/python/raises.py\n@@ -4,6 +4,7 @@\n import six\n \n import pytest\n+from _pytest.compat import dummy_context_manager\n from _pytest.outcomes import Failed\n from _pytest.warning_types import PytestDeprecationWarning\n \n@@ -220,7 +221,7 @@ def test_raises_match(self):\n             int(\"asdf\")\n \n         msg = \"with base 16\"\n-        expr = r\"Pattern '{}' not found in 'invalid literal for int\\(\\) with base 10: 'asdf''\".format(\n+        expr = r\"Pattern '{}' not found in \\\"invalid literal for int\\(\\) with base 10: 'asdf'\\\"\".format(\n             msg\n         )\n         with pytest.raises(AssertionError, match=expr):\n@@ -278,3 +279,47 @@ def __class__(self):\n                 with pytest.raises(CrappyClass()):\n                     pass\n             assert \"via __class__\" in excinfo.value.args[0]\n+\n+\n+class TestUnicodeHandling:\n+    \"\"\"Test various combinations of bytes and unicode with pytest.raises (#5478)\n+\n+    https://github.com/pytest-dev/pytest/pull/5479#discussion_r298852433\n+    \"\"\"\n+\n+    success = dummy_context_manager\n+    py2_only = pytest.mark.skipif(\n+        six.PY3, reason=\"bytes in raises only supported in Python 2\"\n+    )\n+\n+    @pytest.mark.parametrize(\n+        \"message, match, expectation\",\n+        [\n+            (u\"\\u2603\", u\"\\u2603\", success()),\n+            (u\"\\u2603\", u\"\\u2603foo\", pytest.raises(AssertionError)),\n+            pytest.param(b\"hello\", b\"hello\", success(), marks=py2_only),\n+            pytest.param(\n+                b\"hello\", b\"world\", pytest.raises(AssertionError), marks=py2_only\n+            ),\n+            pytest.param(u\"hello\", b\"hello\", success(), marks=py2_only),\n+            pytest.param(\n+                u\"hello\", b\"world\", pytest.raises(AssertionError), marks=py2_only\n+            ),\n+            pytest.param(\n+                u\"ðŸ˜Š\".encode(\"UTF-8\"),\n+                b\"world\",\n+                pytest.raises(AssertionError),\n+                marks=py2_only,\n+            ),\n+            pytest.param(\n+                u\"world\",\n+                u\"ðŸ˜Š\".encode(\"UTF-8\"),\n+                pytest.raises(AssertionError),\n+                marks=py2_only,\n+            ),\n+        ],\n+    )\n+    def test_handling(self, message, match, expectation):\n+        with expectation:\n+            with pytest.raises(RuntimeError, match=match):\n+                raise RuntimeError(message)\n",
  "problem_statement": "cannot make unicode match assertions with pytest.raises python2 pytest\n```\r\n    def test_u():\r\n        with pytest.raises(AssertionError, match=u\"\\u2603\"):\r\n>           assert False, u\"\\u2603\"\r\nE           UnicodeEncodeError: 'ascii' codec can't encode character u'\\u2603' in position 0: ordinal not in range(128)\r\n```\n",
  "hints_text": "Hi @graingert,\r\n\r\n~~I actually fail to reproduce the issue:~~\r\n\r\n...\r\n\r\nOK nevermind, my bad, I do reproduce your issue.",
  "created_at": "2019-06-24T10:23:23Z",
  "version": "4.6",
  "FAIL_TO_PASS": "[\"testing/python/raises.py::TestRaises::test_raises_match\"]",
  "PASS_TO_PASS": "[\"testing/python/raises.py::TestRaises::test_raises\", \"testing/python/raises.py::TestRaises::test_raises_exec\", \"testing/python/raises.py::TestRaises::test_raises_exec_correct_filename\", \"testing/python/raises.py::TestRaises::test_raises_syntax_error\", \"testing/python/raises.py::TestRaises::test_raises_function\", \"testing/python/raises.py::TestRaises::test_raises_callable_no_exception\", \"testing/python/raises.py::TestRaises::test_raises_falsey_type_error\", \"testing/python/raises.py::TestRaises::test_raises_repr_inflight\", \"testing/python/raises.py::TestRaises::test_noclass\", \"testing/python/raises.py::TestRaises::test_invalid_arguments_to_raises\", \"testing/python/raises.py::TestRaises::test_tuple\", \"testing/python/raises.py::TestRaises::test_no_raise_message\", \"testing/python/raises.py::TestRaises::test_custom_raise_message\", \"testing/python/raises.py::TestRaises::test_raises_cyclic_reference[function]\", \"testing/python/raises.py::TestRaises::test_raises_cyclic_reference[with]\", \"testing/python/raises.py::TestRaises::test_raises_match_wrong_type\", \"testing/python/raises.py::TestRaises::test_raises_exception_looks_iterable\", \"testing/python/raises.py::TestRaises::test_raises_with_raising_dunder_class\", \"testing/python/raises.py::TestUnicodeHandling::test_handling[\\\\u2603-\\\\u2603-expectation0]\", \"testing/python/raises.py::TestUnicodeHandling::test_handling[\\\\u2603-\\\\u2603foo-expectation1]\", \"testing/python/raises.py::TestRaises::test_raises_as_contextmanager\", \"testing/python/raises.py::TestRaises::test_does_not_raise\", \"testing/python/raises.py::TestRaises::test_does_not_raise_does_raise\"]",
  "environment_setup_commit": "d5843f89d3c008ddcb431adbc335b080a79e617e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.928498",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}