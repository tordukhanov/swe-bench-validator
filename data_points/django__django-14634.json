{
  "repo": "django/django",
  "instance_id": "django__django-14634",
  "base_commit": "37e8367c359cd115f109d82f99ff32be219f4928",
  "patch": "diff --git a/django/views/generic/edit.py b/django/views/generic/edit.py\n--- a/django/views/generic/edit.py\n+++ b/django/views/generic/edit.py\n@@ -1,5 +1,5 @@\n from django.core.exceptions import ImproperlyConfigured\n-from django.forms import models as model_forms\n+from django.forms import Form, models as model_forms\n from django.http import HttpResponseRedirect\n from django.views.generic.base import ContextMixin, TemplateResponseMixin, View\n from django.views.generic.detail import (\n@@ -225,12 +225,30 @@ def get_success_url(self):\n                 \"No URL to redirect to. Provide a success_url.\")\n \n \n-class BaseDeleteView(DeletionMixin, BaseDetailView):\n+class BaseDeleteView(DeletionMixin, FormMixin, BaseDetailView):\n     \"\"\"\n     Base view for deleting an object.\n \n     Using this base class requires subclassing to provide a response mixin.\n     \"\"\"\n+    form_class = Form\n+\n+    def post(self, request, *args, **kwargs):\n+        # Set self.object before the usual form processing flow.\n+        # Inlined because having DeletionMixin as the first base, for\n+        # get_success_url(), makes leveraging super() with ProcessFormView\n+        # overly complex.\n+        self.object = self.get_object()\n+        form = self.get_form()\n+        if form.is_valid():\n+            return self.form_valid(form)\n+        else:\n+            return self.form_invalid(form)\n+\n+    def form_valid(self, form):\n+        success_url = self.get_success_url()\n+        self.object.delete()\n+        return HttpResponseRedirect(success_url)\n \n \n class DeleteView(SingleObjectTemplateResponseMixin, BaseDeleteView):\n",
  "test_patch": "diff --git a/tests/generic_views/forms.py b/tests/generic_views/forms.py\n--- a/tests/generic_views/forms.py\n+++ b/tests/generic_views/forms.py\n@@ -15,3 +15,12 @@ class Meta:\n class ContactForm(forms.Form):\n     name = forms.CharField()\n     message = forms.CharField(widget=forms.Textarea)\n+\n+\n+class ConfirmDeleteForm(forms.Form):\n+    confirm = forms.BooleanField()\n+\n+    def clean(self):\n+        cleaned_data = super().clean()\n+        if 'confirm' not in cleaned_data:\n+            raise forms.ValidationError('You must confirm the delete.')\ndiff --git a/tests/generic_views/test_edit.py b/tests/generic_views/test_edit.py\n--- a/tests/generic_views/test_edit.py\n+++ b/tests/generic_views/test_edit.py\n@@ -394,3 +394,35 @@ def test_delete_without_redirect(self):\n         msg = 'No URL to redirect to. Provide a success_url.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             self.client.post('/edit/author/%d/delete/naive/' % self.author.pk)\n+\n+    def test_delete_with_form_as_post(self):\n+        res = self.client.get('/edit/author/%d/delete/form/' % self.author.pk)\n+        self.assertEqual(res.status_code, 200)\n+        self.assertEqual(res.context['object'], self.author)\n+        self.assertEqual(res.context['author'], self.author)\n+        self.assertTemplateUsed(res, 'generic_views/author_confirm_delete.html')\n+        res = self.client.post(\n+            '/edit/author/%d/delete/form/' % self.author.pk, data={'confirm': True}\n+        )\n+        self.assertEqual(res.status_code, 302)\n+        self.assertRedirects(res, '/list/authors/')\n+        self.assertSequenceEqual(Author.objects.all(), [])\n+\n+    def test_delete_with_form_as_post_with_validation_error(self):\n+        res = self.client.get('/edit/author/%d/delete/form/' % self.author.pk)\n+        self.assertEqual(res.status_code, 200)\n+        self.assertEqual(res.context['object'], self.author)\n+        self.assertEqual(res.context['author'], self.author)\n+        self.assertTemplateUsed(res, 'generic_views/author_confirm_delete.html')\n+\n+        res = self.client.post('/edit/author/%d/delete/form/' % self.author.pk)\n+        self.assertEqual(res.status_code, 200)\n+        self.assertEqual(len(res.context_data['form'].errors), 2)\n+        self.assertEqual(\n+            res.context_data['form'].errors['__all__'],\n+            ['You must confirm the delete.'],\n+        )\n+        self.assertEqual(\n+            res.context_data['form'].errors['confirm'],\n+            ['This field is required.'],\n+        )\ndiff --git a/tests/generic_views/urls.py b/tests/generic_views/urls.py\n--- a/tests/generic_views/urls.py\n+++ b/tests/generic_views/urls.py\n@@ -101,6 +101,7 @@\n     ),\n     path('edit/author/<int:pk>/delete/', views.AuthorDelete.as_view()),\n     path('edit/author/<int:pk>/delete/special/', views.SpecializedAuthorDelete.as_view()),\n+    path('edit/author/<int:pk>/delete/form/', views.AuthorDeleteFormView.as_view()),\n \n     # ArchiveIndexView\n     path('dates/books/', views.BookArchive.as_view()),\ndiff --git a/tests/generic_views/views.py b/tests/generic_views/views.py\n--- a/tests/generic_views/views.py\n+++ b/tests/generic_views/views.py\n@@ -4,7 +4,7 @@\n from django.utils.decorators import method_decorator\n from django.views import generic\n \n-from .forms import AuthorForm, ContactForm\n+from .forms import AuthorForm, ConfirmDeleteForm, ContactForm\n from .models import Artist, Author, Book, BookSigning, Page\n \n \n@@ -179,6 +179,14 @@ class AuthorDelete(generic.DeleteView):\n     success_url = '/list/authors/'\n \n \n+class AuthorDeleteFormView(generic.DeleteView):\n+    model = Author\n+    form_class = ConfirmDeleteForm\n+\n+    def get_success_url(self):\n+        return reverse('authors_list')\n+\n+\n class SpecializedAuthorDelete(generic.DeleteView):\n     queryset = Author.objects.all()\n     template_name = 'generic_views/confirm_delete.html'\ndiff --git a/tests/messages_tests/models.py b/tests/messages_tests/models.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/messages_tests/models.py\n@@ -0,0 +1,5 @@\n+from django.db import models\n+\n+\n+class SomeObject(models.Model):\n+    name = models.CharField(max_length=255)\ndiff --git a/tests/messages_tests/test_mixins.py b/tests/messages_tests/test_mixins.py\n--- a/tests/messages_tests/test_mixins.py\n+++ b/tests/messages_tests/test_mixins.py\n@@ -1,12 +1,13 @@\n from django.core.signing import b64_decode\n-from django.test import SimpleTestCase, override_settings\n+from django.test import TestCase, override_settings\n from django.urls import reverse\n \n-from .urls import ContactFormViewWithMsg\n+from .models import SomeObject\n+from .urls import ContactFormViewWithMsg, DeleteFormViewWithMsg\n \n \n @override_settings(ROOT_URLCONF='messages_tests.urls')\n-class SuccessMessageMixinTests(SimpleTestCase):\n+class SuccessMessageMixinTests(TestCase):\n \n     def test_set_messages_success(self):\n         author = {'name': 'John Doe', 'slug': 'success-msg'}\n@@ -17,3 +18,9 @@ def test_set_messages_success(self):\n             req.cookies['messages'].value.split(\":\")[0].encode(),\n         ).decode()\n         self.assertIn(ContactFormViewWithMsg.success_message % author, value)\n+\n+    def test_set_messages_success_on_delete(self):\n+        object_to_delete = SomeObject.objects.create(name='MyObject')\n+        delete_url = reverse('success_msg_on_delete', args=[object_to_delete.pk])\n+        response = self.client.post(delete_url, follow=True)\n+        self.assertContains(response, DeleteFormViewWithMsg.success_message)\ndiff --git a/tests/messages_tests/urls.py b/tests/messages_tests/urls.py\n--- a/tests/messages_tests/urls.py\n+++ b/tests/messages_tests/urls.py\n@@ -6,7 +6,9 @@\n from django.template.response import TemplateResponse\n from django.urls import path, re_path, reverse\n from django.views.decorators.cache import never_cache\n-from django.views.generic.edit import FormView\n+from django.views.generic.edit import DeleteView, FormView\n+\n+from .models import SomeObject\n \n TEMPLATE = \"\"\"{% if messages %}\n <ul class=\"messages\">\n@@ -63,9 +65,16 @@ class ContactFormViewWithMsg(SuccessMessageMixin, FormView):\n     success_message = \"%(name)s was created successfully\"\n \n \n+class DeleteFormViewWithMsg(SuccessMessageMixin, DeleteView):\n+    model = SomeObject\n+    success_url = '/show/'\n+    success_message = 'Object was deleted successfully'\n+\n+\n urlpatterns = [\n     re_path('^add/(debug|info|success|warning|error)/$', add, name='add_message'),\n     path('add/msg/', ContactFormViewWithMsg.as_view(), name='add_success_msg'),\n+    path('delete/msg/<int:pk>', DeleteFormViewWithMsg.as_view(), name='success_msg_on_delete'),\n     path('show/', show, name='show_message'),\n     re_path(\n         '^template_response/add/(debug|info|success|warning|error)/$',\n",
  "problem_statement": "Allow delete to provide a success message through a mixin.\nDescription\n\t\nAdd a mixin to show a message on successful object deletion.\n",
  "hints_text": "The patch for this contribution\nYour patch sets the message before the object is deleted. What if deleting the object fails? Otherwise, this addition makes sense.\nHere is a pull request that approaches the problem from a different angle: ​https://github.com/django/django/pull/2585 Instead of adding a new mixin, the DeleteView is refactored to allow it to work with the existing SuccessMessageMixin. Thanks to @charettes for the approach and much of the code.\nThe approach seems sensible to me and the patch looks quite good. I'm going to mark this as ready for checkin so that we can get another set of eyes on this in case I've missed something. Thanks!\nI see one small issue: the comment on line ​https://github.com/django/django/pull/2585/files#diff-2b2c9cb35ddf34bc38c90e322dcc39e8L201 still seems valid to me: the documented behaviour has changed, but I don't see a versionchanged annotation, which should be there in a case like this.\nBug #21926 was a duplicate of this one.\nMy main concern with the patch that I have provided is that there are changes related to using the DELETE method for deletions, but it doesn't work entirely as expected. For example, if an application uses a form to verify that a field should be deleted. If the view were to have code that checks that a confirmation box is checked or something similar, and they used the DELETE HTTP method, then the view would not work correctly, as data is not passed through with the request in the case of DELETE. So the documentation change where I changed it to read that you can use DELETE, and a few other changes in the code may not be valid. There was a comment in the pull request that got buried I think: \"As I was updating the tests, I found that data cannot currently be sent with the DELETE method. When doing further research, I wasn't sure whether this should be allowed or not. The test client accepts a data parameter for DELETE, but the HTTP spec suggests that you shouldn't expect data, like you can for a POST: ​http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.7 If we want to I can figure out how to actually get data through the chain. Otherwise I can update the documentation to reflect the changes instead.\" I wasn't sure how to proceed: to remove the parts related to supporting the DELETE method, or to try to figure out how to get the data through the DELETE chain.\nI've updated the patch with feedback from review.\nnew pull request send with moving the conflicting tests.\nThanks for the new PR. For the record, this is ​https://github.com/django/django/pull/4256 I left a comment on GitHub regarding the code style issues.\nIs there any status update on this?\nWe are waiting for someone to update the pull request as described in comment 13.\nI will new PR\nnew PR ​https://github.com/django/django/pull/5992\nre started working on it. will send the updated pr on master tomorrow\nJust wanted to remind this is an important feature/fix. Thanks in advance\nThanks to all for their work on this. I did some minor changes to the original pull request that become inactive, and submitted a new pull request here ​https://github.com/django/django/pull/13362\nComments on PR. I think comment:9 is important: not clear adding the delete handling makes too much sense.",
  "created_at": "2021-07-13T14:08:36Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_set_messages_success_on_delete (messages_tests.test_mixins.SuccessMessageMixinTests)\", \"test_delete_with_form_as_post_with_validation_error (generic_views.test_edit.DeleteViewTests)\"]",
  "PASS_TO_PASS": "[\"test_get_form (generic_views.test_edit.ModelFormMixinTests)\", \"test_get_form_checks_for_object (generic_views.test_edit.ModelFormMixinTests)\", \"test_get_context_data (generic_views.test_edit.FormMixinTests)\", \"test_get_form (generic_views.test_edit.FormMixinTests)\", \"Test prefix can be set (see #18872)\", \"Test instance independence of initial data dict (see #16138)\", \"test_set_messages_success (messages_tests.test_mixins.SuccessMessageMixinTests)\", \"A form can be marked invalid in the form_valid() method (#25548).\", \"test_post_data (generic_views.test_edit.BasicFormTests)\", \"test_delete_by_delete (generic_views.test_edit.DeleteViewTests)\", \"test_delete_by_post (generic_views.test_edit.DeleteViewTests)\", \"test_delete_with_form_as_post (generic_views.test_edit.DeleteViewTests)\", \"test_delete_with_interpolated_redirect (generic_views.test_edit.DeleteViewTests)\", \"test_delete_with_redirect (generic_views.test_edit.DeleteViewTests)\", \"test_delete_with_special_properties (generic_views.test_edit.DeleteViewTests)\", \"test_delete_without_redirect (generic_views.test_edit.DeleteViewTests)\", \"test_update_get_object (generic_views.test_edit.UpdateViewTests)\", \"test_update_invalid (generic_views.test_edit.UpdateViewTests)\", \"test_update_post (generic_views.test_edit.UpdateViewTests)\", \"test_update_with_interpolated_redirect (generic_views.test_edit.UpdateViewTests)\", \"test_update_with_object_url (generic_views.test_edit.UpdateViewTests)\", \"test_update_with_redirect (generic_views.test_edit.UpdateViewTests)\", \"test_update_with_special_properties (generic_views.test_edit.UpdateViewTests)\", \"test_update_without_redirect (generic_views.test_edit.UpdateViewTests)\", \"test_create (generic_views.test_edit.CreateViewTests)\", \"test_create_invalid (generic_views.test_edit.CreateViewTests)\", \"test_create_restricted (generic_views.test_edit.CreateViewTests)\", \"test_create_view_all_fields (generic_views.test_edit.CreateViewTests)\", \"test_create_view_with_restricted_fields (generic_views.test_edit.CreateViewTests)\", \"test_create_view_without_explicit_fields (generic_views.test_edit.CreateViewTests)\", \"test_create_with_interpolated_redirect (generic_views.test_edit.CreateViewTests)\", \"test_create_with_object_url (generic_views.test_edit.CreateViewTests)\", \"test_create_with_redirect (generic_views.test_edit.CreateViewTests)\", \"test_create_with_special_properties (generic_views.test_edit.CreateViewTests)\", \"test_create_without_redirect (generic_views.test_edit.CreateViewTests)\", \"test_define_both_fields_and_form_class (generic_views.test_edit.CreateViewTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.698532",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}