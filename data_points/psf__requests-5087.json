{
  "repo": "psf/requests",
  "instance_id": "psf__requests-5087",
  "base_commit": "a4c18cd733f97b5659a29589432d8a39e7a0de87",
  "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -640,6 +640,10 @@ def __init__(self):\n         #: is a response.\n         self.request = None\n \n+        #: If there was an error in the processing of content,\n+        #: then save the error that would return the same error when you re-appeal.\n+        self._error = None\n+\n     def __enter__(self):\n         return self\n \n@@ -749,12 +753,21 @@ def generate():\n                 try:\n                     for chunk in self.raw.stream(chunk_size, decode_content=True):\n                         yield chunk\n+\n                 except ProtocolError as e:\n-                    raise ChunkedEncodingError(e)\n+                    self._error = ChunkedEncodingError(e)\n+\n                 except DecodeError as e:\n-                    raise ContentDecodingError(e)\n+                    self._error = ContentDecodingError(e)\n+\n                 except ReadTimeoutError as e:\n-                    raise ConnectionError(e)\n+                    self._error = ConnectionError(e)\n+\n+                finally:\n+                    # if we had an error - throw the saved error\n+                    if self._error:\n+                        raise self._error\n+\n             else:\n                 # Standard file-like object.\n                 while True:\n@@ -827,6 +840,10 @@ def content(self):\n             else:\n                 self._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\n \n+        # if we had an error - throw the saved error\n+        if self._error is not None:\n+            raise self._error\n+\n         self._content_consumed = True\n         # don't need to release the connection; that's been handled by urllib3\n         # since we exhausted the data.\n",
  "test_patch": "diff --git a/tests/test_lowlevel.py b/tests/test_lowlevel.py\n--- a/tests/test_lowlevel.py\n+++ b/tests/test_lowlevel.py\n@@ -3,6 +3,7 @@\n import pytest\n import threading\n import requests\n+from requests.exceptions import ChunkedEncodingError\n \n from tests.testserver.server import Server, consume_socket_content\n \n@@ -307,3 +308,43 @@ def response_handler(sock):\n         assert r.url == 'http://{}:{}/final-url/#relevant-section'.format(host, port)\n \n         close_server.set()\n+\n+\n+def test_response_content_retains_error():\n+    \"\"\"Verify that accessing response.content retains an error.\n+\n+    See https://github.com/kennethreitz/requests/issues/4965\n+    \"\"\"\n+\n+    data = \"Some random stuff to read from remove server.\\n\"\n+\n+    def response_handler(sock):\n+        req = consume_socket_content(sock, timeout=0.5)\n+\n+        # Send invalid chunked data (length mismatch)\n+        sock.send(\n+            b'HTTP/1.1 200 OK\\r\\n'\n+            b'Transfer-Encoding: chunked\\r\\n'\n+            b'\\r\\n2\\r\\n42\\r\\n8\\r\\n123\\r\\n'  # 5 bytes missing\n+        )\n+\n+    close_server = threading.Event()\n+    server = Server(response_handler, wait_to_close_event=close_server)\n+\n+    with server as (host, port):\n+        url = 'http://{}:{}/path'.format(host, port)\n+        r = requests.post(url, stream=True)\n+        with pytest.raises(ChunkedEncodingError):\n+            r.content\n+\n+    # Access the bad response data again, I would expect the same\n+    # error again.\n+\n+    try:\n+        content = r.content\n+    except ChunkedEncodingError:\n+        pass  # fine, same exception\n+    else:\n+        assert False, \"error response has content: {0!r}\".format(content)\n+    close_server.set()\n+\n",
  "problem_statement": "Accessing response.content twice removes forgets read error\nI had a hard debugging time today because an error in the response stream is only reported when accessing `response.content` for the first time.\r\n\r\nThis is especially irritating when running code in a debugger.\r\n\r\n## Expected Result\r\n\r\nIf accessing `response.content` the first time raises an exception I would expect that accessing `response.content` again would also raise an exception (ideally the same). \r\n\r\n## Actual Result\r\n\r\nInstead after raising on the first get, getting `response.content` again returns an empty string.\r\n\r\n## Reproduction Steps\r\n\r\nHere is a patch with a new test case for this: [error_replay_test.diff.gz](https://github.com/requests/requests/files/2838360/error_replay_test.diff.gz).\r\n\r\nBasically, it boils down to this:\r\n\r\n```python\r\nimport requests\r\n\r\nresponse = requests.post(\"http://connreset.biz/get/incomplete/chunked\", stream=True)\r\ntry:\r\n    response.content\r\nexcept Exception:\r\n    # Error handling code, may try something else or fall through\r\n    pass\r\n\r\ncontent = response.content  # empty string\r\n```\r\n\r\nOutput of my test case:\r\n\r\n```\r\n$ pipenv run py.test tests/test_lowlevel.py -q --tb=short -k retain\r\nF                                                            [100%]\r\n============================= FAILURES =============================\r\n_______________ test_response_content_retains_error ________________\r\ntests/test_lowlevel.py:343: in test_response_content_retains_error\r\n    assert False, \"error response has content: {0!r}\".format(content)\r\nE   AssertionError: error response has content: ''\r\nE   assert False\r\n1 failed, 15 deselected in 0.60 seconds\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n*Edit*: Oops, I used `pipenv run python -m requests.help` which actually called into system python 2.7. Here comes the real data:\r\n\r\n```\r\n$ pipenv run python3 -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.7\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.8+\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.15.0-43-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.21.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1000207f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.24\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nThanks for looking into this!\r\n\n",
  "hints_text": "",
  "created_at": "2019-05-14T09:18:13Z",
  "version": "2.22",
  "FAIL_TO_PASS": "[\"tests/test_lowlevel.py::test_response_content_retains_error\"]",
  "PASS_TO_PASS": "[\"tests/test_lowlevel.py::test_chunked_upload\", \"tests/test_lowlevel.py::test_digestauth_401_count_reset_on_redirect\", \"tests/test_lowlevel.py::test_digestauth_401_only_sent_once\", \"tests/test_lowlevel.py::test_digestauth_only_on_4xx\", \"tests/test_lowlevel.py::test_redirect_rfc1808_to_non_ascii_location\", \"tests/test_lowlevel.py::test_fragment_not_sent_with_request\", \"tests/test_lowlevel.py::test_fragment_update_on_redirect\"]",
  "environment_setup_commit": "a4c18cd733f97b5659a29589432d8a39e7a0de87",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.865031",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}