{
  "repo": "django/django",
  "instance_id": "django__django-16143",
  "base_commit": "da02cbd1effc951b14c981925d0e26a39566649e",
  "patch": "diff --git a/django/db/backends/base/base.py b/django/db/backends/base/base.py\n--- a/django/db/backends/base/base.py\n+++ b/django/db/backends/base/base.py\n@@ -93,6 +93,7 @@ def __init__(self, settings_dict, alias=DEFAULT_DB_ALIAS):\n         # Tracks if the transaction should be rolled back to the next\n         # available savepoint because of an exception in an inner block.\n         self.needs_rollback = False\n+        self.rollback_exc = None\n \n         # Connection termination related attributes.\n         self.close_at = None\n@@ -526,7 +527,7 @@ def validate_no_broken_transaction(self):\n             raise TransactionManagementError(\n                 \"An error occurred in the current transaction. You can't \"\n                 \"execute queries until the end of the 'atomic' block.\"\n-            )\n+            ) from self.rollback_exc\n \n     # ##### Foreign key constraints checks handling #####\n \ndiff --git a/django/db/transaction.py b/django/db/transaction.py\n--- a/django/db/transaction.py\n+++ b/django/db/transaction.py\n@@ -118,10 +118,11 @@ def mark_for_rollback_on_error(using=None):\n     \"\"\"\n     try:\n         yield\n-    except Exception:\n+    except Exception as exc:\n         connection = get_connection(using)\n         if connection.in_atomic_block:\n             connection.needs_rollback = True\n+            connection.rollback_exc = exc\n         raise\n \n \n",
  "test_patch": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -805,8 +805,9 @@ def _update(self, *args, **kwargs):\n                 \"An error occurred in the current transaction. You can't \"\n                 \"execute queries until the end of the 'atomic' block.\"\n             )\n-            with self.assertRaisesMessage(DatabaseError, msg):\n+            with self.assertRaisesMessage(DatabaseError, msg) as cm:\n                 asos.save(update_fields=[\"pub_date\"])\n+            self.assertIsInstance(cm.exception.__cause__, DatabaseError)\n         finally:\n             Article._base_manager._queryset_class = orig_class\n \ndiff --git a/tests/transactions/tests.py b/tests/transactions/tests.py\n--- a/tests/transactions/tests.py\n+++ b/tests/transactions/tests.py\n@@ -339,8 +339,11 @@ def test_atomic_prevents_queries_in_broken_transaction(self):\n                 \"An error occurred in the current transaction. You can't \"\n                 \"execute queries until the end of the 'atomic' block.\"\n             )\n-            with self.assertRaisesMessage(transaction.TransactionManagementError, msg):\n+            with self.assertRaisesMessage(\n+                transaction.TransactionManagementError, msg\n+            ) as cm:\n                 r2.save(force_update=True)\n+        self.assertIsInstance(cm.exception.__cause__, IntegrityError)\n         self.assertEqual(Reporter.objects.get(pk=r1.pk).last_name, \"Haddock\")\n \n     @skipIfDBFeature(\"atomic_transactions\")\n",
  "problem_statement": "TransactionManagmentError isn't helpful for tracking down cause\nDescription\n\t\nThe error: \"TransactionManagementError: An error occurred in the current transaction. You can't execute queries until the end of the 'atomic' block.\" thrown from django/db/backends/init.py\", line 372, in validate_no_broken_transaction doesn't provide enough information to help track down the problem.\nThe exception is thrown if self.needs_rollback is True, but the underlying reason that self.needs_rollback has been set True has been lost, since it could have happened a long time previously.\nTransactions should keep track of why needs_rollback has been set, and use that to provide a more helpful error.\nBackground: I'm seeing this error being thrown when a task is run on a Celery queue, but not when run manually. Since it's via Celery, dropping into the debugger is impossible, and thus I'm back to trying to dump useful debug info.\n",
  "hints_text": "Accepting the general idea, but I'm not sure how that would work in practice.\nI guess we could track the original exception and set it as the __cause__ of the TransactionManagementError.",
  "created_at": "2022-10-02T16:59:45Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"select_on_save works correctly if the database doesn't return correct\", \"test_atomic_prevents_queries_in_broken_transaction (transactions.tests.AtomicErrorsTests)\"]",
  "PASS_TO_PASS": "[\"test_manager_method_attributes (basic.tests.ManagerTest)\", \"test_manager_method_signature (basic.tests.ManagerTest)\", \"This test ensures that the correct set of methods from `QuerySet`\", \"test_commit (transactions.tests.DurableTests)\", \"test_nested_both_durable (transactions.tests.DurableTests)\", \"test_nested_inner_durable (transactions.tests.DurableTests)\", \"test_nested_outer_durable (transactions.tests.DurableTests)\", \"test_sequence_of_durables (transactions.tests.DurableTests)\", \"test_select_on_save (basic.tests.SelectOnSaveTests)\", \"test_autofields_generate_different_values_for_each_instance (basic.tests.ModelInstanceCreationTests)\", \"test_can_create_instance_using_kwargs (basic.tests.ModelInstanceCreationTests)\", \"You can initialize a model instance using positional arguments,\", \"You can leave off the value for an AutoField when creating an\", \"test_can_mix_and_match_position_and_kwargs (basic.tests.ModelInstanceCreationTests)\", \"test_cannot_create_instance_with_invalid_kwargs (basic.tests.ModelInstanceCreationTests)\", \"as much precision in *seconds*\", \"test_leaving_off_a_field_with_default_set_the_default_will_be_saved (basic.tests.ModelInstanceCreationTests)\", \"test_object_is_not_written_to_database_until_save_was_called (basic.tests.ModelInstanceCreationTests)\", \"test_positional_and_keyword_args_for_the_same_field (basic.tests.ModelInstanceCreationTests)\", \"test_querysets_checking_for_membership (basic.tests.ModelInstanceCreationTests)\", \"test_save_parent_primary_with_default (basic.tests.ModelInstanceCreationTests)\", \"test_save_primary_with_default (basic.tests.ModelInstanceCreationTests)\", \"test_saving_an_object_again_does_not_create_a_new_object (basic.tests.ModelInstanceCreationTests)\", \"test_all_lookup (basic.tests.ModelLookupTest)\", \"test_does_not_exist (basic.tests.ModelLookupTest)\", \"test_equal_lookup (basic.tests.ModelLookupTest)\", \"test_lookup_by_primary_key (basic.tests.ModelLookupTest)\", \"test_rich_lookup (basic.tests.ModelLookupTest)\", \"test_too_many (basic.tests.ModelLookupTest)\", \"ORM queries are allowed after an error and a rollback in non-autocommit\", \"#24921 -- ORM queries must be possible after set_autocommit(False).\", \"test_lookup_in_fields (basic.tests.ModelRefreshTests)\", \"test_prefetched_cache_cleared (basic.tests.ModelRefreshTests)\", \"test_refresh (basic.tests.ModelRefreshTests)\", \"test_refresh_clears_one_to_one_field (basic.tests.ModelRefreshTests)\", \"refresh_from_db() clear cached reverse relations.\", \"test_refresh_fk (basic.tests.ModelRefreshTests)\", \"test_refresh_fk_on_delete_set_null (basic.tests.ModelRefreshTests)\", \"test_refresh_no_fields (basic.tests.ModelRefreshTests)\", \"test_refresh_null_fk (basic.tests.ModelRefreshTests)\", \"test_refresh_unsaved (basic.tests.ModelRefreshTests)\", \"test_unknown_kwarg (basic.tests.ModelRefreshTests)\", \"test_create_method (basic.tests.ModelTest)\", \"gettext_lazy objects work when saving model instances\", \"test_delete_and_access_field (basic.tests.ModelTest)\", \"test_emptyqs (basic.tests.ModelTest)\", \"test_emptyqs_customqs (basic.tests.ModelTest)\", \"test_emptyqs_values (basic.tests.ModelTest)\", \"test_emptyqs_values_order (basic.tests.ModelTest)\", \"test_eq (basic.tests.ModelTest)\", \"test_extra_method_select_argument_with_dashes (basic.tests.ModelTest)\", \"test_extra_method_select_argument_with_dashes_and_values (basic.tests.ModelTest)\", \"test_hash (basic.tests.ModelTest)\", \"test_hash_function (basic.tests.ModelTest)\", \"test_manually_specify_primary_key (basic.tests.ModelTest)\", \"test_microsecond_precision (basic.tests.ModelTest)\", \"test_missing_hash_not_inherited (basic.tests.ModelTest)\", \"test_multiple_objects_max_num_fetched (basic.tests.ModelTest)\", \"test_not_equal_and_equal_operators_behave_as_expected_on_instances (basic.tests.ModelTest)\", \"test_objects_attribute_is_only_available_on_the_class_itself (basic.tests.ModelTest)\", \"test_queryset_delete_removes_all_items_in_that_queryset (basic.tests.ModelTest)\", \"test_specified_parent_hash_inherited (basic.tests.ModelTest)\", \"test_ticket_20278 (basic.tests.ModelTest)\", \"test_unicode_data (basic.tests.ModelTest)\", \"test_year_lookup_edge_case (basic.tests.ModelTest)\", \"test_merged_inner_savepoint_rollback (transactions.tests.AtomicMergeTests)\", \"test_merged_outer_rollback (transactions.tests.AtomicMergeTests)\", \"test_atomic_allows_queries_after_fixing_transaction (transactions.tests.AtomicErrorsTests)\", \"test_atomic_prevents_calling_transaction_methods (transactions.tests.AtomicErrorsTests)\", \"test_atomic_prevents_setting_autocommit (transactions.tests.AtomicErrorsTests)\", \"#23074 -- Savepoints must be released after rollback.\", \"test_mark_for_rollback_on_error_in_autocommit (transactions.tests.AtomicMiscTests)\", \"test_mark_for_rollback_on_error_in_transaction (transactions.tests.AtomicMiscTests)\", \"#20028 -- Atomic must support wrapping callable instances.\", \"test_commit (transactions.tests.DurableTransactionTests)\", \"test_nested_both_durable (transactions.tests.DurableTransactionTests)\", \"test_nested_inner_durable (transactions.tests.DurableTransactionTests)\", \"test_nested_outer_durable (transactions.tests.DurableTransactionTests)\", \"test_sequence_of_durables (transactions.tests.DurableTransactionTests)\", \"test_alternate_decorator_syntax_commit (transactions.tests.AtomicTests)\", \"test_alternate_decorator_syntax_rollback (transactions.tests.AtomicTests)\", \"test_commit (transactions.tests.AtomicTests)\", \"test_decorator_syntax_commit (transactions.tests.AtomicTests)\", \"test_decorator_syntax_rollback (transactions.tests.AtomicTests)\", \"test_force_rollback (transactions.tests.AtomicTests)\", \"test_merged_commit_commit (transactions.tests.AtomicTests)\", \"test_merged_commit_rollback (transactions.tests.AtomicTests)\", \"test_merged_rollback_commit (transactions.tests.AtomicTests)\", \"test_merged_rollback_rollback (transactions.tests.AtomicTests)\", \"test_nested_commit_commit (transactions.tests.AtomicTests)\", \"test_nested_commit_rollback (transactions.tests.AtomicTests)\", \"test_nested_rollback_commit (transactions.tests.AtomicTests)\", \"test_nested_rollback_rollback (transactions.tests.AtomicTests)\", \"test_prevent_rollback (transactions.tests.AtomicTests)\", \"test_reuse_commit_commit (transactions.tests.AtomicTests)\", \"test_reuse_commit_rollback (transactions.tests.AtomicTests)\", \"test_reuse_rollback_commit (transactions.tests.AtomicTests)\", \"test_reuse_rollback_rollback (transactions.tests.AtomicTests)\", \"test_rollback (transactions.tests.AtomicTests)\", \"test_alternate_decorator_syntax_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_alternate_decorator_syntax_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_decorator_syntax_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_decorator_syntax_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_force_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_merged_commit_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_merged_commit_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_merged_rollback_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_merged_rollback_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_nested_commit_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_nested_commit_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_nested_rollback_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_nested_rollback_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_prevent_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_reuse_commit_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_reuse_commit_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_reuse_rollback_commit (transactions.tests.AtomicInsideTransactionTests)\", \"test_reuse_rollback_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_rollback (transactions.tests.AtomicInsideTransactionTests)\", \"test_alternate_decorator_syntax_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_alternate_decorator_syntax_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_decorator_syntax_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_decorator_syntax_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_force_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_merged_commit_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_merged_commit_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_merged_rollback_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_merged_rollback_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_nested_commit_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_nested_commit_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_nested_rollback_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_nested_rollback_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_prevent_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_reuse_commit_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_reuse_commit_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_reuse_rollback_commit (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_reuse_rollback_rollback (transactions.tests.AtomicWithoutAutocommitTests)\", \"test_rollback (transactions.tests.AtomicWithoutAutocommitTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.750217",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}