{
  "repo": "django/django",
  "instance_id": "django__django-13267",
  "base_commit": "6c1923029748de4a0f443260751a93c1e0ea10fa",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -409,6 +409,8 @@ def __init__(self, *args, **kwargs):\n         opts = self._meta\n         _setattr = setattr\n         _DEFERRED = DEFERRED\n+        if opts.abstract:\n+            raise TypeError('Abstract models cannot be instantiated.')\n \n         pre_init.send(sender=cls, args=args, kwargs=kwargs)\n \n",
  "test_patch": "diff --git a/tests/auth_tests/test_models.py b/tests/auth_tests/test_models.py\n--- a/tests/auth_tests/test_models.py\n+++ b/tests/auth_tests/test_models.py\n@@ -6,7 +6,7 @@\n from django.contrib.auth.base_user import AbstractBaseUser\n from django.contrib.auth.hashers import get_hasher\n from django.contrib.auth.models import (\n-    AbstractUser, AnonymousUser, Group, Permission, User, UserManager,\n+    AnonymousUser, Group, Permission, User, UserManager,\n )\n from django.contrib.contenttypes.models import ContentType\n from django.core import mail\n@@ -215,8 +215,7 @@ def test_clean_normalize_username(self):\n                 self.assertEqual(username, 'iamtheΩ')  # U+03A9 GREEK CAPITAL LETTER OMEGA\n \n     def test_default_email(self):\n-        user = AbstractBaseUser()\n-        self.assertEqual(user.get_email_field_name(), 'email')\n+        self.assertEqual(AbstractBaseUser.get_email_field_name(), 'email')\n \n     def test_custom_email(self):\n         user = CustomEmailField()\n@@ -233,8 +232,8 @@ def test_email_user(self):\n             \"connection\": None,\n             \"html_message\": None,\n         }\n-        abstract_user = AbstractUser(email='foo@bar.com')\n-        abstract_user.email_user(\n+        user = User(email='foo@bar.com')\n+        user.email_user(\n             subject=\"Subject here\",\n             message=\"This is a message\",\n             from_email=\"from@domain.com\",\n@@ -245,7 +244,7 @@ def test_email_user(self):\n         self.assertEqual(message.subject, \"Subject here\")\n         self.assertEqual(message.body, \"This is a message\")\n         self.assertEqual(message.from_email, \"from@domain.com\")\n-        self.assertEqual(message.to, [abstract_user.email])\n+        self.assertEqual(message.to, [user.email])\n \n     def test_last_login_default(self):\n         user1 = User.objects.create(username='user1')\ndiff --git a/tests/model_meta/tests.py b/tests/model_meta/tests.py\n--- a/tests/model_meta/tests.py\n+++ b/tests/model_meta/tests.py\n@@ -279,10 +279,19 @@ def test_get_parent_list(self):\n class PropertyNamesTests(SimpleTestCase):\n     def test_person(self):\n         # Instance only descriptors don't appear in _property_names.\n-        self.assertEqual(AbstractPerson().test_instance_only_descriptor, 1)\n+        self.assertEqual(BasePerson().test_instance_only_descriptor, 1)\n+        with self.assertRaisesMessage(AttributeError, 'Instance only'):\n+            AbstractPerson.test_instance_only_descriptor\n         self.assertEqual(AbstractPerson._meta._property_names, frozenset(['pk', 'test_property']))\n \n \n class ReturningFieldsTests(SimpleTestCase):\n     def test_pk(self):\n         self.assertEqual(Relation._meta.db_returning_fields, [Relation._meta.pk])\n+\n+\n+class AbstractModelTests(SimpleTestCase):\n+    def test_abstract_model_not_instantiated(self):\n+        msg = 'Abstract models cannot be instantiated.'\n+        with self.assertRaisesMessage(TypeError, msg):\n+            AbstractPerson()\n",
  "problem_statement": "Instantiating an abstract model with a string ForeignKey fails with TypeError: isinstance() arg 2 must be a class, type, or tuple of classes and types\nDescription\n\t\nTrying to instantiate an abstract model with a foreign key worked without throwing any warnings in Django 1.8. In Django 1.9.8, this code:\nclass UserProfile(Model):\n\tuser = models.ForeignKey('auth.user')\n\tclass Meta(object):\n\t\tapp_label = 'core'\n\t\tabstract = True\nUserProfile()\nraises this exception:\nTraceback (most recent call last):\n File \"<ipython-input-7-5fa4dfdf1ad9>\", line 2, in <module>\n\tUserProfile()\n File \".../.venv/lib/python2.7/site-packages/django/db/models/base.py\", line 432, in __init__\n\tval = field.get_default()\n File \".../.venv/lib/python2.7/site-packages/django/db/models/fields/related.py\", line 905, in get_default\n\tif isinstance(field_default, self.remote_field.model):\nTypeError: isinstance() arg 2 must be a class, type, or tuple of classes and types\nWhile the code mentions that abstract models can not be instantiated [1], I couldn't find mention of this in the docs. Abstract models without foreign keys can still be instantiated perfectly fine.\nI couldn't find any description of this change in the Release Notes, so not sure if I missed it there or if this is maybe an undocumented backwards-incompatible change.\n[1] ​https://github.com/django/django/blob/026574e03c6b6fd20a45f97b0470afb70e41fda4/django/db/models/base.py#L284\n",
  "hints_text": "I'm not sure about the correct resolution, but I bisected the change to 9239f1dda7b94f53d21efb8b5e4d056e24f4e906 and am attaching a reproduction test case for Django's test suite.\nWhile it's not explicitly mentioned abstract models are not instantiable in the documentation there's a mention that ​such models are never meant to be used in isolation. I would argue that even if it worked in Django < 1.8 it was undefined behavior and this breakage shouldn't be considered as a break of backward compatiblity. Even if we were to fix the get_default() case abstract models with lazily defined relationships (by passing model names instead of model classes) are now completely unusable as they're not resolved anymore. Since the issue can be worked around by avoiding lazily defined relationships on abstract models and the reported use case was never meant to be supported I suggest we amend the documentation to be more explicit.\nHow about raising a helpful message saying that abstract models can't be instantiated?\nReplying to timgraham: How about raising a helpful message saying that abstract models can't be instantiated? Raising a TypeError with an helpful message in Django 1.11+ could be useful but I don't think it should be backported at this point.\nWouldn't doing unit tests on a abstract model class be an appropriate use case for instantiating an abstract class? If not, what is the recommended approach to unit testing abstract model logic? (This is an actual situation in upgrading a project from 1.8 to 1.9. Unit tests for an abstract model class, used as a mixin, broke due to the change noted in this ticket.)",
  "created_at": "2020-08-02T21:28:15Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_abstract_model_not_instantiated (model_meta.tests.AbstractModelTests)\"]",
  "PASS_TO_PASS": "[\"test_private_fields (model_meta.tests.PrivateFieldsTests)\", \"test_person (model_meta.tests.PropertyNamesTests)\", \"test_label (model_meta.tests.LabelTests)\", \"test_label_lower (model_meta.tests.LabelTests)\", \"test_get_data_field (model_meta.tests.GetFieldByNameTests)\", \"test_get_fields_only_searches_forward_on_apps_not_ready (model_meta.tests.GetFieldByNameTests)\", \"test_get_generic_relation (model_meta.tests.GetFieldByNameTests)\", \"test_get_m2m_field (model_meta.tests.GetFieldByNameTests)\", \"test_get_related_m2m (model_meta.tests.GetFieldByNameTests)\", \"test_get_related_object (model_meta.tests.GetFieldByNameTests)\", \"test_get_parent_list (model_meta.tests.ParentListTests)\", \"test_get_fields_is_immutable (model_meta.tests.GetFieldsTests)\", \"test_str (auth_tests.test_models.GroupTests)\", \"test_fields (model_meta.tests.DataTests)\", \"test_local_concrete_fields (model_meta.tests.DataTests)\", \"test_local_fields (model_meta.tests.DataTests)\", \"test_pk (model_meta.tests.ReturningFieldsTests)\", \"test_many_to_many (model_meta.tests.M2MTests)\", \"test_many_to_many_with_model (model_meta.tests.M2MTests)\", \"test_related_objects (model_meta.tests.RelatedObjectsTests)\", \"test_related_objects_include_hidden (model_meta.tests.RelatedObjectsTests)\", \"test_related_objects_include_hidden_local_only (model_meta.tests.RelatedObjectsTests)\", \"test_related_objects_local (model_meta.tests.RelatedObjectsTests)\", \"test_check_password (auth_tests.test_models.AnonymousUserTests)\", \"test_delete (auth_tests.test_models.AnonymousUserTests)\", \"test_eq (auth_tests.test_models.AnonymousUserTests)\", \"test_hash (auth_tests.test_models.AnonymousUserTests)\", \"test_int (auth_tests.test_models.AnonymousUserTests)\", \"test_properties (auth_tests.test_models.AnonymousUserTests)\", \"test_save (auth_tests.test_models.AnonymousUserTests)\", \"test_set_password (auth_tests.test_models.AnonymousUserTests)\", \"test_str (auth_tests.test_models.AnonymousUserTests)\", \"test_clear_cache_clears_relation_tree (model_meta.tests.RelationTreeTests)\", \"test_first_relation_tree_access_populates_all (model_meta.tests.RelationTreeTests)\", \"test_relations_related_objects (model_meta.tests.RelationTreeTests)\", \"test_str (auth_tests.test_models.PermissionTests)\", \"test_create_superuser (auth_tests.test_models.TestCreateSuperUserSignals)\", \"test_create_user (auth_tests.test_models.TestCreateSuperUserSignals)\", \"test_group_natural_key (auth_tests.test_models.NaturalKeysTestCase)\", \"test_user_natural_key (auth_tests.test_models.NaturalKeysTestCase)\", \"test_load_data_with_user_permissions (auth_tests.test_models.LoadDataWithNaturalKeysAndMultipleDatabasesTestCase)\", \"test_user_is_created_and_added_to_group (auth_tests.test_models.LoadDataWithNaturalKeysTestCase)\", \"test_user_is_created_and_added_to_group (auth_tests.test_models.LoadDataWithoutNaturalKeysTestCase)\", \"test_backend_without_with_perm (auth_tests.test_models.UserWithPermTestCase)\", \"test_basic (auth_tests.test_models.UserWithPermTestCase)\", \"test_custom_backend (auth_tests.test_models.UserWithPermTestCase)\", \"test_custom_backend_pass_obj (auth_tests.test_models.UserWithPermTestCase)\", \"test_invalid_backend_type (auth_tests.test_models.UserWithPermTestCase)\", \"test_invalid_permission_name (auth_tests.test_models.UserWithPermTestCase)\", \"test_invalid_permission_type (auth_tests.test_models.UserWithPermTestCase)\", \"test_multiple_backends (auth_tests.test_models.UserWithPermTestCase)\", \"test_nonexistent_backend (auth_tests.test_models.UserWithPermTestCase)\", \"test_nonexistent_permission (auth_tests.test_models.UserWithPermTestCase)\", \"test_clean_normalize_username (auth_tests.test_models.AbstractBaseUserTests)\", \"test_custom_email (auth_tests.test_models.AbstractBaseUserTests)\", \"test_default_email (auth_tests.test_models.AbstractBaseUserTests)\", \"test_has_usable_password (auth_tests.test_models.AbstractBaseUserTests)\", \"test_normalize_username (auth_tests.test_models.AbstractBaseUserTests)\", \"test_builtin_user_isactive (auth_tests.test_models.IsActiveTestCase)\", \"test_is_active_field_default (auth_tests.test_models.IsActiveTestCase)\", \"test_check_password_upgrade (auth_tests.test_models.AbstractUserTestCase)\", \"test_email_user (auth_tests.test_models.AbstractUserTestCase)\", \"test_last_login_default (auth_tests.test_models.AbstractUserTestCase)\", \"test_user_clean_normalize_email (auth_tests.test_models.AbstractUserTestCase)\", \"test_user_double_save (auth_tests.test_models.AbstractUserTestCase)\", \"test_create_super_user_raises_error_on_false_is_superuser (auth_tests.test_models.UserManagerTestCase)\", \"test_create_superuser_raises_error_on_false_is_staff (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user_email_domain_normalize (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user_email_domain_normalize_rfc3696 (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user_email_domain_normalize_with_whitespace (auth_tests.test_models.UserManagerTestCase)\", \"test_create_user_is_staff (auth_tests.test_models.UserManagerTestCase)\", \"test_empty_username (auth_tests.test_models.UserManagerTestCase)\", \"test_make_random_password (auth_tests.test_models.UserManagerTestCase)\", \"test_runpython_manager_methods (auth_tests.test_models.UserManagerTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.650408",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}