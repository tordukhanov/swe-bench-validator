{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-11862",
  "base_commit": "0410a6aaf4fdd346b12305cca6a7b0c1aa6556fa",
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -95,7 +95,10 @@ def mpf_norm(mpf, prec):\n             # don't change anything; this should already\n             # be a well formed mpf tuple\n             return mpf\n-    rv = mpf_normalize(sign, man, expt, bc, prec, rnd)\n+\n+    # Necessary if mpmath is using the gmpy backend\n+    from mpmath.libmp.backend import MPZ\n+    rv = mpf_normalize(sign, MPZ(man), expt, bc, prec, rnd)\n     return rv\n \n # TODO: we should use the warnings module\n@@ -770,6 +773,8 @@ def __new__(cls, num, prec=None):\n         elif num is S.NegativeInfinity:\n             num = '-inf'\n         elif isinstance(num, mpmath.mpf):\n+            if prec == None:\n+                prec = num.context.dps\n             num = num._mpf_\n \n         if prec is None:\n@@ -835,17 +840,17 @@ def __new__(cls, num, prec=None):\n                 num[1] = long(num[1], 16)\n                 _mpf_ = tuple(num)\n             else:\n-                if not num[1] and len(num) == 4:\n+                if len(num) == 4:\n                     # handle normalization hack\n                     return Float._new(num, prec)\n                 else:\n-                    _mpf_ = mpmath.mpf(\n-                        S.NegativeOne**num[0]*num[1]*2**num[2])._mpf_\n+                    return (S.NegativeOne**num[0]*num[1]*S(2)**num[2]).evalf(prec)\n         elif isinstance(num, Float):\n             _mpf_ = num._mpf_\n             if prec < num._prec:\n                 _mpf_ = mpf_norm(_mpf_, prec)\n         else:\n+            # XXX: We lose precision here.\n             _mpf_ = mpmath.mpf(num)._mpf_\n \n         # special cases\n@@ -869,6 +874,7 @@ def _new(cls, _mpf_, _prec):\n \n         obj = Expr.__new__(cls)\n         obj._mpf_ = mpf_norm(_mpf_, _prec)\n+        # XXX: Should this be obj._prec = obj._mpf_[3]?\n         obj._prec = _prec\n         return obj\n \ndiff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py\n--- a/sympy/printing/lambdarepr.py\n+++ b/sympy/printing/lambdarepr.py\n@@ -335,6 +335,20 @@ def doprint(self, expr):\n         lstr = super(NumExprPrinter, self).doprint(expr)\n         return \"evaluate('%s', truediv=True)\" % lstr\n \n+class MpmathPrinter(LambdaPrinter):\n+    \"\"\"\n+    Lambda printer for mpmath which maintains precision for floats\n+    \"\"\"\n+    def _print_Float(self, e):\n+        # XXX: This does not handle setting mpmath.mp.dps. It is assumed that\n+        # the caller of the lambdified function will have set it to sufficient\n+        # precision to match the Floats in the expression.\n+\n+        # Remove 'mpz' if gmpy is installed.\n+        args = str(tuple(map(int, e._mpf_)))\n+        return 'mpf(%s)' % args\n+\n+\n def lambdarepr(expr, **settings):\n     \"\"\"\n     Returns a string usable for lambdifying.\ndiff --git a/sympy/solvers/solvers.py b/sympy/solvers/solvers.py\n--- a/sympy/solvers/solvers.py\n+++ b/sympy/solvers/solvers.py\n@@ -2737,7 +2737,6 @@ def nsolve(*args, **kwargs):\n         # assume it's a sympy expression\n         if isinstance(f, Equality):\n             f = f.lhs - f.rhs\n-        f = f.evalf()\n         syms = f.free_symbols\n         if fargs is None:\n             fargs = syms.copy().pop()\ndiff --git a/sympy/utilities/decorator.py b/sympy/utilities/decorator.py\n--- a/sympy/utilities/decorator.py\n+++ b/sympy/utilities/decorator.py\n@@ -85,10 +85,10 @@ def conserve_mpmath_dps(func):\n     import functools\n     import mpmath\n \n-    def func_wrapper():\n+    def func_wrapper(*args, **kwargs):\n         dps = mpmath.mp.dps\n         try:\n-            func()\n+            return func(*args, **kwargs)\n         finally:\n             mpmath.mp.dps = dps\n \ndiff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -362,6 +362,10 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n         for term in syms:\n             namespace.update({str(term): term})\n \n+    if _module_present('mpmath',namespaces) and printer is None:\n+        #XXX: This has to be done here because of circular imports\n+        from sympy.printing.lambdarepr import MpmathPrinter as printer\n+\n     if _module_present('numpy',namespaces) and printer is None:\n         #XXX: This has to be done here because of circular imports\n         from sympy.printing.lambdarepr import NumPyPrinter as printer\ndiff --git a/sympy/utilities/runtests.py b/sympy/utilities/runtests.py\n--- a/sympy/utilities/runtests.py\n+++ b/sympy/utilities/runtests.py\n@@ -1077,22 +1077,22 @@ def test_file(self, filename, sort=True, timeout=False, slow=False, enhance_asse\n             clear_cache()\n             self._count += 1\n             random.seed(self._seed)\n-            pytestfile = \"\"\n-            if \"XFAIL\" in gl:\n-                pytestfile = inspect.getsourcefile(gl[\"XFAIL\"])\n-            pytestfile2 = \"\"\n-            if \"slow\" in gl:\n-                pytestfile2 = inspect.getsourcefile(gl[\"slow\"])\n             disabled = gl.get(\"disabled\", False)\n             if not disabled:\n                 # we need to filter only those functions that begin with 'test_'\n-                # that are defined in the testing file or in the file where\n-                # is defined the XFAIL decorator\n-                funcs = [gl[f] for f in gl.keys() if f.startswith(\"test_\") and\n-                    (inspect.isfunction(gl[f]) or inspect.ismethod(gl[f])) and\n-                    (inspect.getsourcefile(gl[f]) == filename or\n-                     inspect.getsourcefile(gl[f]) == pytestfile or\n-                     inspect.getsourcefile(gl[f]) == pytestfile2)]\n+                # We have to be careful about decorated functions. As long as\n+                # the decorator uses functools.wraps, we can detect it.\n+                funcs = []\n+                for f in gl:\n+                    if (f.startswith(\"test_\") and (inspect.isfunction(gl[f])\n+                        or inspect.ismethod(gl[f]))):\n+                        func = gl[f]\n+                        # Handle multiple decorators\n+                        while hasattr(func, '__wrapped__'):\n+                            func = func.__wrapped__\n+\n+                        if inspect.getsourcefile(func) == filename:\n+                            funcs.append(gl[f])\n                 if slow:\n                     funcs = [f for f in funcs if getattr(f, '_slow', False)]\n                 # Sorting of XFAILed functions isn't fixed yet :-(\n",
  "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -8,6 +8,7 @@\n from sympy.core.logic import fuzzy_not\n from sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache,\n     mpf_norm, comp, mod_inverse)\n+from sympy.utilities.decorator import conserve_mpmath_dps\n from sympy.utilities.iterables import permutations\n from sympy.utilities.pytest import XFAIL, raises\n \n@@ -379,8 +380,14 @@ def eq(a, b):\n     x2_str = Float((0, '26666666666666', -53, 53))\n     x_hex = Float((0, long(0x13333333333333), -52, 53))\n     x_dec = Float((0, 5404319552844595, -52, 53))\n+    assert x_str == x_hex == x_dec == Float(1.2)\n+    # This looses a binary digit of precision, so it isn't equal to the above,\n+    # but check that it normalizes correctly\n     x2_hex = Float((0, long(0x13333333333333)*2, -53, 53))\n-    assert x_str == x_hex == x_dec == x2_hex == Float(1.2)\n+    assert x2_hex._mpf_ == (0, 5404319552844595, -52, 52)\n+    # XXX: Should this test also hold?\n+    # assert x2_hex._prec == 52\n+\n     # x2_str and 1.2 are superficially the same\n     assert str(x2_str) == str(Float(1.2))\n     # but are different at the mpf level\n@@ -487,6 +494,17 @@ def teq(a):\n     assert Float(u'0.73908513321516064100000000') == Float('0.73908513321516064100000000')\n     assert Float(u'0.73908513321516064100000000', 28) == Float('0.73908513321516064100000000', 28)\n \n+@conserve_mpmath_dps\n+def test_float_mpf():\n+    import mpmath\n+    mpmath.mp.dps = 100\n+    mp_pi = mpmath.pi()\n+\n+    assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n+\n+    mpmath.mp.dps = 15\n+\n+    assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n def test_Float_default_to_highprec_from_str():\n     s = str(pi.evalf(128))\ndiff --git a/sympy/solvers/tests/test_numeric.py b/sympy/solvers/tests/test_numeric.py\n--- a/sympy/solvers/tests/test_numeric.py\n+++ b/sympy/solvers/tests/test_numeric.py\n@@ -3,7 +3,7 @@\n from sympy.solvers import nsolve\n from sympy.utilities.lambdify import lambdify\n from sympy.utilities.pytest import raises, XFAIL\n-\n+from sympy.utilities.decorator import conserve_mpmath_dps\n \n def test_nsolve():\n     # onedimensional\n@@ -57,3 +57,15 @@ def test_issue_6408():\n def test_issue_6408_fail():\n     x, y = symbols('x y')\n     assert nsolve(Integral(x*y, (x, 0, 5)), y, 2) == 0.0\n+\n+\n+@conserve_mpmath_dps\n+def test_increased_dps():\n+    # Issue 8564\n+    import mpmath\n+    mpmath.mp.dps = 128\n+    x = Symbol('x')\n+    e1 = x**2 - pi\n+    q = nsolve(e1, x, 3.0)\n+\n+    assert abs(sqrt(pi).evalf(128) - q) < 1e-128\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -118,7 +118,6 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n-@XFAIL\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -126,6 +125,11 @@ def test_number_precision():\n     prec = 1e-49  # mpmath precision is around 50 decimal places\n     assert -prec < f(0) - sin02 < prec\n \n+@conserve_mpmath_dps\n+def test_mpmath_precision():\n+    mpmath.mp.dps = 100\n+    assert str(lambdify((), pi.evalf(100), 'mpmath')()) == str(pi.evalf(100))\n+\n #================== Test Translations ==============================\n # We can only check if all translated functions are valid. It has to be checked\n # by hand if they are complete.\n",
  "problem_statement": "lambdify precision loss with module=mpmath from high-precision Floats\nFloats with more than 16 digits are converted to double precision somewhere.\n\nConsider:\n\n```\nIn [52]: x = symbols('x')\n\nIn [53]: g = sqrt(2) - x\n\nIn [54]: h = g.evalf(64)\n\nIn [55]: g\nOut[55]: -x + sqrt(2)\n\nIn [56]: h\nOut[56]: -x + 1.414213562373095048801688724209698078569671875376948073176679738\n```\n\nNote `h` has a 64-digit accurate Float in it (and the value is correct).\n\nBut lambdifying `g` and `h` is not same:\n\n```\nIn [57]: f1 = lambdify(x, g, modules='mpmath')\n\nIn [58]: f2 = lambdify(x, h, modules='mpmath')\n\nIn [59]: f1(N(sqrt(2),64))\nOut[59]: 1.899113549151959749494648453912391430844193166723988993255955998e-65\n\nIn [60]: f2(N(sqrt(2),64))\nOut[60]: 0.00000000000000009667293313452913037187168859825586442682332026201917202971226475\n```\n\nThe help string for `f2` shows no loss: \n\n```\nIn [64]: f2?\nType:        function\nString form: <function <lambda> at 0x7f6a43bd92a8>\nFile:        Dynamically generated function. No source code available.\nDefinition:  f2(_Dummy_22)\nDocstring:\nCreated with lambdify. Signature:\n\nfunc(x)\n\nExpression:\n\n-x + 1.414213562373095048801688724209698078569671875376948073176679738\n```\n\nI haven't figured out how to look at the actual code yet, but somewhere something is being converted to double-precision (which might be fine for module=numpy but should not happen here).\n\n",
  "hints_text": "Tracked down a bit: lambdify.py line 376 calls python's builtin `eval` from a string representation of the function.  This will convert the 64 digit float into a double precision.\n\nPerhaps this is a design decision of `lambdify`: currently it cannot support more than double precision.  But then what is \"module=mpmath\" supposed to do here?\n\nIf you check the history of lambdify, someone refactored it long back and added the \"modules\" support. I personally never understood why the sympy or mpmath modules are necessary at all, because evalf and subs already give that functionality. I'd be fine with removing them because I've never heard of a use case.\n",
  "created_at": "2016-11-16T20:49:37Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_Float\", \"test_float_mpf\", \"test_sympy_lambda\", \"test_math_lambda\", \"test_mpmath_lambda\", \"test_number_precision\", \"test_mpmath_precision\"]",
  "PASS_TO_PASS": "[\"test_integers_cache\", \"test_seterr\", \"test_mod\", \"test_divmod\", \"test_igcd\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_Infinity\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_isqrt\", \"test_powers_Float\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_long\", \"test_real_bug\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Float_eq\", \"test_int_NumberSymbols\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_Float_idempotence\", \"test_comp\", \"test_issue_9491\", \"test_issue_10063\", \"test_nsolve\", \"test_issue_6408\", \"test_no_args\", \"test_single_arg\", \"test_list_args\", \"test_str_args\", \"test_own_namespace\", \"test_own_module\", \"test_bad_args\", \"test_atoms\", \"test_math_transl\", \"test_mpmath_transl\", \"test_exponentiation\", \"test_sqrt\", \"test_trig\", \"test_vector_simple\", \"test_vector_discontinuous\", \"test_trig_symbolic\", \"test_trig_float\", \"test_docs\", \"test_math\", \"test_sin\", \"test_matrix\", \"test_issue9474\", \"test_integral\", \"test_sym_single_arg\", \"test_sym_list_args\", \"test_namespace_order\", \"test_imps\", \"test_imps_errors\", \"test_imps_wrong_args\", \"test_lambdify_imps\", \"test_dummification\", \"test_python_keywords\", \"test_lambdify_docstring\", \"test_special_printers\", \"test_true_false\", \"test_issue_2790\", \"test_ITE\", \"test_Min_Max\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.073995",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}