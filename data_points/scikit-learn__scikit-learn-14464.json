{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14464",
  "base_commit": "5936ae356ce3385cb393384928ca9c6783f18bd8",
  "patch": "diff --git a/sklearn/base.py b/sklearn/base.py\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -193,7 +193,15 @@ def get_params(self, deep=True):\n         \"\"\"\n         out = dict()\n         for key in self._get_param_names():\n-            value = getattr(self, key, None)\n+            try:\n+                value = getattr(self, key)\n+            except AttributeError:\n+                warnings.warn('From version 0.24, get_params will raise an '\n+                              'AttributeError if a parameter cannot be '\n+                              'retrieved as an instance attribute. Previously '\n+                              'it would return None.',\n+                              FutureWarning)\n+                value = None\n             if deep and hasattr(value, 'get_params'):\n                 deep_items = value.get_params().items()\n                 out.update((key + '__' + k, val) for k, val in deep_items)\ndiff --git a/sklearn/gaussian_process/kernels.py b/sklearn/gaussian_process/kernels.py\n--- a/sklearn/gaussian_process/kernels.py\n+++ b/sklearn/gaussian_process/kernels.py\n@@ -23,6 +23,7 @@\n from collections import namedtuple\n import math\n from inspect import signature\n+import warnings\n \n import numpy as np\n from scipy.special import kv, gamma\n@@ -157,7 +158,16 @@ def get_params(self, deep=True):\n                                \" %s doesn't follow this convention.\"\n                                % (cls, ))\n         for arg in args:\n-            params[arg] = getattr(self, arg, None)\n+            try:\n+                value = getattr(self, arg)\n+            except AttributeError:\n+                warnings.warn('From version 0.24, get_params will raise an '\n+                              'AttributeError if a parameter cannot be '\n+                              'retrieved as an instance attribute. Previously '\n+                              'it would return None.',\n+                              FutureWarning)\n+                value = None\n+            params[arg] = value\n         return params\n \n     def set_params(self, **params):\ndiff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -127,9 +127,9 @@ class Pipeline(_BaseComposition):\n \n     def __init__(self, steps, memory=None, verbose=False):\n         self.steps = steps\n-        self._validate_steps()\n         self.memory = memory\n         self.verbose = verbose\n+        self._validate_steps()\n \n     def get_params(self, deep=True):\n         \"\"\"Get parameters for this estimator.\n",
  "test_patch": "diff --git a/sklearn/gaussian_process/tests/test_kernels.py b/sklearn/gaussian_process/tests/test_kernels.py\n--- a/sklearn/gaussian_process/tests/test_kernels.py\n+++ b/sklearn/gaussian_process/tests/test_kernels.py\n@@ -14,7 +14,7 @@\n from sklearn.gaussian_process.kernels \\\n     import (RBF, Matern, RationalQuadratic, ExpSineSquared, DotProduct,\n             ConstantKernel, WhiteKernel, PairwiseKernel, KernelOperator,\n-            Exponentiation)\n+            Exponentiation, Kernel)\n from sklearn.base import clone\n \n from sklearn.utils.testing import (assert_almost_equal,\n@@ -323,3 +323,24 @@ def test_repr_kernels(kernel):\n     # Smoke-test for repr in kernels.\n \n     repr(kernel)\n+\n+\n+def test_warns_on_get_params_non_attribute():\n+    class MyKernel(Kernel):\n+        def __init__(self, param=5):\n+            pass\n+\n+        def __call__(self, X, Y=None, eval_gradient=False):\n+            return X\n+\n+        def diag(self, X):\n+            return np.ones(X.shape[0])\n+\n+        def is_stationary(self):\n+            return False\n+\n+    est = MyKernel()\n+    with pytest.warns(FutureWarning, match='AttributeError'):\n+        params = est.get_params()\n+\n+    assert params['param'] is None\ndiff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -505,3 +505,18 @@ def test_regressormixin_score_multioutput():\n            \"built-in scorer 'r2' uses \"\n            \"multioutput='uniform_average').\")\n     assert_warns_message(FutureWarning, msg, reg.score, X, y)\n+\n+\n+def test_warns_on_get_params_non_attribute():\n+    class MyEstimator(BaseEstimator):\n+        def __init__(self, param=5):\n+            pass\n+\n+        def fit(self, X, y=None):\n+            return self\n+\n+    est = MyEstimator()\n+    with pytest.warns(FutureWarning, match='AttributeError'):\n+        params = est.get_params()\n+\n+    assert params['param'] is None\n",
  "problem_statement": "Cloning custom transform replaces values in __init__ dictionary\n<!--\r\nIf your issue is a usage question, submit it here instead:\r\n- StackOverflow with the scikit-learn tag: https://stackoverflow.com/questions/tagged/scikit-learn\r\n- Mailing List: https://mail.python.org/mailman/listinfo/scikit-learn\r\nFor more information, see User Questions: http://scikit-learn.org/stable/support.html#user-questions\r\n-->\r\n\r\n<!-- Instructions For Filing a Bug: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#filing-bugs -->\r\n\r\n#### Description\r\n<!-- Example: Joblib Error thrown when calling fit on LatentDirichletAllocation with evaluate_every > 0-->\r\nLet us say we have a custom transform `A` that has some arguments. When the `A` is instantiated, these arguments are set in the init. \r\n\r\nWhen we clone `A` (as happens in `cross_val_score`, for example), the arguments get copied successfully. \r\n\r\nHowever, if the arguments are sent to a structure such as a dictionary, the clone replaces them with None.  \r\n\r\nIn cases where None does not cause errors, this creates a silent error, as the cloned version of `A` will run, producing different results from its original version (which is how I ran into this problem in the first place). \r\n\r\nFully replicable example follows. \r\n\r\n#### Steps/Code to Reproduce\r\n```\r\nfrom sklearn.base import BaseEstimator, TransformerMixin\r\nfrom sklearn.base import clone\r\n\r\n\r\nclass MyTransformA(BaseEstimator, TransformerMixin):\r\n    \r\n    def __init__(self, n_cols_to_keep):\r\n        self.cols_to_keep_dict = {'n_cols': n_cols_to_keep}  \r\n    \r\n    def fit(self, X, *_):\r\n        return self \r\n        \r\n    def transform(self, X, *_):\r\n        return X\r\n    \r\n    \r\nclass MyTransformB(BaseEstimator, TransformerMixin):\r\n\r\n    def __init__(self, n_cols_to_keep):\r\n        self.n_cols_to_keep = n_cols_to_keep  # <--- this time we save the input immediately \r\n        self.cols_to_keep_dict = {'n_cols': self.n_cols_to_keep}  \r\n    \r\n    def fit(self, X, *_):\r\n        return self \r\n        \r\n    def transform(self, X, *_):\r\n        return X\r\n\r\nmy_transform_a = MyTransformA(n_cols_to_keep=5)\r\nmy_transform_a_clone = clone(my_transform_a)\r\n\r\nmy_transform_b = MyTransformB(n_cols_to_keep=5)\r\nmy_transform_b_clone = clone(my_transform_b)\r\n\r\nprint('Using MyTransformA:')\r\nprint('  my_transform_a.cols_to_keep_dict:        %s' % str(my_transform_a.cols_to_keep_dict))\r\nprint('  my_transform_a_clone.cols_to_keep_dict:  %s  <------ ?' % str(my_transform_a_clone.cols_to_keep_dict))\r\n\r\nprint('\\nUsing MyTransformB:')\r\nprint('  my_transform_b.cols_to_keep_dict:        %s' % str(my_transform_b.cols_to_keep_dict))\r\nprint('  my_transform_b_clone.cols_to_keep_dict): %s' % str(my_transform_b_clone.cols_to_keep_dict))\r\n```\r\n#### Expected Results\r\n```\r\nUsing MyTransformA:\r\n  my_transform_a.cols_to_keep_dict:        ('n_cols', 5)\r\n  my_transform_a_clone.cols_to_keep_dict:  ('n_cols', 5)  <------ Does not happen\r\n\r\nUsing MyTransformB:\r\n  my_transform_b.cols_to_keep_dict:        {'n_cols': 5}\r\n  my_transform_b_clone.cols_to_keep_dict): {'n_cols': 5}\r\n```\r\n#### Actual Results\r\n```\r\nUsing MyTransformA:\r\n  my_transform_a.cols_to_keep_dict:        ('n_cols', 5)\r\n  my_transform_a_clone.cols_to_keep_dict:  ('n_cols', None)  <------ ?\r\n\r\nUsing MyTransformB:\r\n  my_transform_b.cols_to_keep_dict:        {'n_cols': 5}\r\n  my_transform_b_clone.cols_to_keep_dict): {'n_cols': 5}\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.7.3 (default, Mar 27 2019, 16:54:48)  [Clang 4.0.1 (tags/RELEASE_401/final)]\r\nexecutable: /anaconda3/bin/python\r\n   machine: Darwin-18.6.0-x86_64-i386-64bit\r\n\r\nBLAS:\r\n    macros: SCIPY_MKL_H=None, HAVE_CBLAS=None\r\n  lib_dirs: /anaconda3/lib\r\ncblas_libs: mkl_rt, pthread\r\n\r\nPython deps:\r\n       pip: 19.0.3\r\nsetuptools: 40.8.0\r\n   sklearn: 0.20.3\r\n     numpy: 1.16.2\r\n     scipy: 1.2.1\r\n    Cython: 0.29.6\r\n    pandas: 0.24.2\r\nPython 3.7.3 (default, Mar 27 2019, 16:54:48) \r\n[Clang 4.0.1 (tags/RELEASE_401/final)]\r\nNumPy 1.16.2\r\nSciPy 1.2.1\r\nScikit-Learn 0.20.3\r\n```\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
  "hints_text": "`__init__` should only set the attributes, not modify or validate the\ninputs. See our documentation. MyTransformA would not pass check_estimator.\n\nIf you mean that a Pipeline would not fit_predict with this issue, that is not the case. I ran into this problem with an end-to-end pipeline that kept returning random probas because of this issue.\r\n\r\nThis can (and does) cause silent errors that make Pipelines produce incorrect results in cross validation, while producing good results when fit directly. \r\n\r\nOn the other hand, if you mean that this is a bad use of the class and that users should just \"read the docs\" I can accept that, but doesn't seem very much in the right spirit as there are so many users that use scikit as newbies. \r\n\r\nIf useful I can produce an end-to-end example instead of a minimum one. \r\n\nThis is clearly in violation of how we require the constructor to be\ndefined. It will not pass check_estimator.\n\nI admit that we could be more verbose when something goes wrong here. As\nfar as I can tell, the issue is in get_params defaulting a parameter value\nto None (\nhttps://github.com/scikit-learn/scikit-learn/blob/7813f7efb5b2012412888b69e73d76f2df2b50b6/sklearn/base.py#L193).\nI'll open a fix for this and see what other core devs think.\n",
  "created_at": "2019-07-25T00:34:02Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/gaussian_process/tests/test_kernels.py::test_warns_on_get_params_non_attribute\", \"sklearn/tests/test_base.py::test_warns_on_get_params_non_attribute\"]",
  "PASS_TO_PASS": "[\"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel15]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel16]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel17]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel18]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel19]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel20]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel21]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel22]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel23]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel24]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel25]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_gradient[kernel26]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_theta[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel15]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel16]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel17]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel18]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel19]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel20]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel21]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel22]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel23]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel24]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_auto_vs_cross[kernel25]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel15]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel16]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel17]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel18]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel19]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel20]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel21]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel22]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel23]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel24]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel25]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_diag[kernel26]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_operator_commutative\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_anisotropic\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel15]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel16]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel17]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_stationary[kernel18]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel15]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel16]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel17]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel18]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel19]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel20]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel21]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel22]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel23]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel24]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel25]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone[kernel26]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel15]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel16]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel17]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel18]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel19]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel20]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel21]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel22]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel23]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel24]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel25]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_clone_after_set_params[kernel26]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_matern_kernel\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel15]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel16]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel17]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel18]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel19]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel20]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel21]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel22]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel23]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel24]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel25]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_kernel_versus_pairwise[kernel26]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel15]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel16]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel17]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel18]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel19]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel20]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel21]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel22]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel23]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel24]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel25]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_set_get_params[kernel26]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel0]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel1]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel2]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel3]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel4]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel5]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel6]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel7]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel8]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel9]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel10]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel11]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel12]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel13]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel14]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel15]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel16]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel17]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel18]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel19]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel20]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel21]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel22]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel23]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel24]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel25]\", \"sklearn/gaussian_process/tests/test_kernels.py::test_repr_kernels[kernel26]\", \"sklearn/tests/test_base.py::test_clone\", \"sklearn/tests/test_base.py::test_clone_2\", \"sklearn/tests/test_base.py::test_clone_buggy\", \"sklearn/tests/test_base.py::test_clone_empty_array\", \"sklearn/tests/test_base.py::test_clone_nan\", \"sklearn/tests/test_base.py::test_clone_sparse_matrices\", \"sklearn/tests/test_base.py::test_clone_estimator_types\", \"sklearn/tests/test_base.py::test_repr\", \"sklearn/tests/test_base.py::test_str\", \"sklearn/tests/test_base.py::test_get_params\", \"sklearn/tests/test_base.py::test_is_classifier\", \"sklearn/tests/test_base.py::test_set_params\", \"sklearn/tests/test_base.py::test_set_params_passes_all_parameters\", \"sklearn/tests/test_base.py::test_set_params_updates_valid_params\", \"sklearn/tests/test_base.py::test_score_sample_weight\", \"sklearn/tests/test_base.py::test_clone_pandas_dataframe\", \"sklearn/tests/test_base.py::test_pickle_version_warning_is_not_raised_with_matching_version\", \"sklearn/tests/test_base.py::test_pickle_version_warning_is_issued_upon_different_version\", \"sklearn/tests/test_base.py::test_pickle_version_warning_is_issued_when_no_version_info_in_pickle\", \"sklearn/tests/test_base.py::test_pickle_version_no_warning_is_issued_with_non_sklearn_estimator\", \"sklearn/tests/test_base.py::test_pickling_when_getstate_is_overwritten_by_mixin\", \"sklearn/tests/test_base.py::test_pickling_when_getstate_is_overwritten_by_mixin_outside_of_sklearn\", \"sklearn/tests/test_base.py::test_pickling_works_when_getstate_is_overwritten_in_the_child_class\", \"sklearn/tests/test_base.py::test_tag_inheritance\", \"sklearn/tests/test_base.py::test_regressormixin_score_multioutput\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.004928",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}