{
  "repo": "django/django",
  "instance_id": "django__django-16369",
  "base_commit": "ab7a85ac297464df82d8363455609979ca3603db",
  "patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -92,6 +92,10 @@ def _get(self, name, item, default=None):\n             return attr(item)\n         return attr\n \n+    def get_languages_for_item(self, item):\n+        \"\"\"Languages for which this item is displayed.\"\"\"\n+        return self._languages()\n+\n     def _languages(self):\n         if self.languages is not None:\n             return self.languages\n@@ -103,8 +107,8 @@ def _items(self):\n             # This is necessary to paginate with all languages already considered.\n             items = [\n                 (item, lang_code)\n-                for lang_code in self._languages()\n                 for item in self.items()\n+                for lang_code in self.get_languages_for_item(item)\n             ]\n             return items\n         return self.items()\n@@ -201,7 +205,8 @@ def _urls(self, page, protocol, domain):\n             }\n \n             if self.i18n and self.alternates:\n-                for lang_code in self._languages():\n+                item_languages = self.get_languages_for_item(item[0])\n+                for lang_code in item_languages:\n                     loc = f\"{protocol}://{domain}{self._location(item, lang_code)}\"\n                     url_info[\"alternates\"].append(\n                         {\n@@ -209,7 +214,7 @@ def _urls(self, page, protocol, domain):\n                             \"lang_code\": lang_code,\n                         }\n                     )\n-                if self.x_default:\n+                if self.x_default and settings.LANGUAGE_CODE in item_languages:\n                     lang_code = settings.LANGUAGE_CODE\n                     loc = f\"{protocol}://{domain}{self._location(item, lang_code)}\"\n                     loc = loc.replace(f\"/{lang_code}/\", \"/\", 1)\n",
  "test_patch": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -10,7 +10,7 @@\n from django.utils.formats import localize\n \n from .base import SitemapTestsBase\n-from .models import TestModel\n+from .models import I18nTestModel, TestModel\n \n \n class HTTPSitemapTests(SitemapTestsBase):\n@@ -440,6 +440,72 @@ def test_alternate_i18n_sitemap_xdefault(self):\n         )\n         self.assertXMLEqual(response.content.decode(), expected_content)\n \n+    @override_settings(LANGUAGES=((\"en\", \"English\"), (\"pt\", \"Portuguese\")))\n+    def test_language_for_item_i18n_sitemap(self):\n+        \"\"\"\n+        A i18n sitemap index in which item can be chosen to be displayed for a\n+        lang or not.\n+        \"\"\"\n+        only_pt = I18nTestModel.objects.create(name=\"Only for PT\")\n+        response = self.client.get(\"/item-by-lang/i18n.xml\")\n+        url, pk, only_pt_pk = self.base_url, self.i18n_model.pk, only_pt.pk\n+        expected_urls = (\n+            f\"<url><loc>{url}/en/i18n/testmodel/{pk}/</loc>\"\n+            f\"<changefreq>never</changefreq><priority>0.5</priority></url>\"\n+            f\"<url><loc>{url}/pt/i18n/testmodel/{pk}/</loc>\"\n+            f\"<changefreq>never</changefreq><priority>0.5</priority></url>\"\n+            f\"<url><loc>{url}/pt/i18n/testmodel/{only_pt_pk}/</loc>\"\n+            f\"<changefreq>never</changefreq><priority>0.5</priority></url>\"\n+        )\n+        expected_content = (\n+            f'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            f'<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" '\n+            f'xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\\n'\n+            f\"{expected_urls}\\n\"\n+            f\"</urlset>\"\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n+\n+    @override_settings(LANGUAGES=((\"en\", \"English\"), (\"pt\", \"Portuguese\")))\n+    def test_alternate_language_for_item_i18n_sitemap(self):\n+        \"\"\"\n+        A i18n sitemap index in which item can be chosen to be displayed for a\n+        lang or not.\n+        \"\"\"\n+        only_pt = I18nTestModel.objects.create(name=\"Only for PT\")\n+        response = self.client.get(\"/item-by-lang-alternates/i18n.xml\")\n+        url, pk, only_pt_pk = self.base_url, self.i18n_model.pk, only_pt.pk\n+        expected_urls = (\n+            f\"<url><loc>{url}/en/i18n/testmodel/{pk}/</loc>\"\n+            f\"<changefreq>never</changefreq><priority>0.5</priority>\"\n+            f'<xhtml:link rel=\"alternate\" '\n+            f'hreflang=\"en\" href=\"{url}/en/i18n/testmodel/{pk}/\"/>'\n+            f'<xhtml:link rel=\"alternate\" '\n+            f'hreflang=\"pt\" href=\"{url}/pt/i18n/testmodel/{pk}/\"/>'\n+            f'<xhtml:link rel=\"alternate\" '\n+            f'hreflang=\"x-default\" href=\"{url}/i18n/testmodel/{pk}/\"/></url>'\n+            f\"<url><loc>{url}/pt/i18n/testmodel/{pk}/</loc>\"\n+            f\"<changefreq>never</changefreq><priority>0.5</priority>\"\n+            f'<xhtml:link rel=\"alternate\" '\n+            f'hreflang=\"en\" href=\"{url}/en/i18n/testmodel/{pk}/\"/>'\n+            f'<xhtml:link rel=\"alternate\" '\n+            f'hreflang=\"pt\" href=\"{url}/pt/i18n/testmodel/{pk}/\"/>'\n+            f'<xhtml:link rel=\"alternate\" '\n+            f'hreflang=\"x-default\" href=\"{url}/i18n/testmodel/{pk}/\"/></url>'\n+            f\"<url><loc>{url}/pt/i18n/testmodel/{only_pt_pk}/</loc>\"\n+            f\"<changefreq>never</changefreq><priority>0.5</priority>\"\n+            f'<xhtml:link rel=\"alternate\" '\n+            f'hreflang=\"pt\" href=\"{url}/pt/i18n/testmodel/{only_pt_pk}/\"/></url>'\n+        )\n+        expected_content = (\n+            f'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            f'<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" '\n+            f'xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\\n'\n+            f\"{expected_urls}\\n\"\n+            f\"</urlset>\"\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n+\n     def test_sitemap_without_entries(self):\n         response = self.client.get(\"/sitemap-without-entries/sitemap.xml\")\n         expected_content = (\ndiff --git a/tests/sitemaps_tests/urls/http.py b/tests/sitemaps_tests/urls/http.py\n--- a/tests/sitemaps_tests/urls/http.py\n+++ b/tests/sitemaps_tests/urls/http.py\n@@ -48,6 +48,22 @@ class XDefaultI18nSitemap(AlternatesI18nSitemap):\n     x_default = True\n \n \n+class ItemByLangSitemap(SimpleI18nSitemap):\n+    def get_languages_for_item(self, item):\n+        if item.name == \"Only for PT\":\n+            return [\"pt\"]\n+        return super().get_languages_for_item(item)\n+\n+\n+class ItemByLangAlternatesSitemap(AlternatesI18nSitemap):\n+    x_default = True\n+\n+    def get_languages_for_item(self, item):\n+        if item.name == \"Only for PT\":\n+            return [\"pt\"]\n+        return super().get_languages_for_item(item)\n+\n+\n class EmptySitemap(Sitemap):\n     changefreq = \"never\"\n     priority = 0.5\n@@ -168,6 +184,14 @@ def testmodelview(request, id):\n     \"i18n-xdefault\": XDefaultI18nSitemap,\n }\n \n+item_by_lang_i18n_sitemaps = {\n+    \"i18n-item-by-lang\": ItemByLangSitemap,\n+}\n+\n+item_by_lang_alternates_i18n_sitemaps = {\n+    \"i18n-item-by-lang-alternates\": ItemByLangAlternatesSitemap,\n+}\n+\n simple_sitemaps_not_callable = {\n     \"simple\": SimpleSitemap(),\n }\n@@ -358,6 +382,18 @@ def testmodelview(request, id):\n         {\"sitemaps\": sitemaps_lastmod_ascending},\n         name=\"django.contrib.sitemaps.views.sitemap\",\n     ),\n+    path(\n+        \"item-by-lang/i18n.xml\",\n+        views.sitemap,\n+        {\"sitemaps\": item_by_lang_i18n_sitemaps},\n+        name=\"django.contrib.sitemaps.views.sitemap\",\n+    ),\n+    path(\n+        \"item-by-lang-alternates/i18n.xml\",\n+        views.sitemap,\n+        {\"sitemaps\": item_by_lang_alternates_i18n_sitemaps},\n+        name=\"django.contrib.sitemaps.views.sitemap\",\n+    ),\n     path(\n         \"lastmod-sitemaps/descending.xml\",\n         views.sitemap,\n",
  "problem_statement": "Choose which items are displayed per language in Sitemap\nDescription\n\t\nThe current implementation of Sitemap is : if we use i18n, then we display a cartesian product between some items and some languages. \nThere is no way to use the provided i18n automation if we want to display some items depending on the language (for instance non-translated blog articles). \nI precise in my case, urls are translated, so given a language the url may not exist or raise an error.\n",
  "hints_text": "OK, sounds reasonable to at least look at. Would you care to take on a patch? In either case could you perhaps expand the description to include a minimal reproduce setup so that someone picking it up had a few breadcrumbs to follow? Thanks!\nI would like to tackle this new feature, it sounds interesting. As Carlton Gibson said, could you expand please the description, so I can fully understand the idea of the new feature?. For instance, on which scenario the URLs get translated? (Not sure, but this maybe sounds more like an error than a future). It does sound as a new feature, being able to display some items depending on the language, by this do you mean like for example, only translate a menu or only translate what is inside a <div> or something similar? Please expand your idea.",
  "created_at": "2022-12-07T15:09:14Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"A i18n sitemap index in which item can be chosen to be displayed for a\"]",
  "PASS_TO_PASS": "[\"A simple sitemap index can be rendered with a custom template\", \"test_simple_sitemap_custom_index_warning (sitemaps_tests.test_http.DeprecatedTests)\", \"A i18n sitemap with alternate/hreflang links can be rendered.\", \"A i18n sitemap index with limited languages can be rendered.\", \"A i18n sitemap index with x-default can be rendered.\", \"A cached sitemap index can be rendered (#2713).\", \"All items in the sitemap have `lastmod`. The `Last-Modified` header\", \"test_callable_sitemod_no_items (sitemaps_tests.test_http.HTTPSitemapTests)\", \"Not all items have `lastmod`. Therefore the `Last-Modified` header\", \"test_empty_page (sitemaps_tests.test_http.HTTPSitemapTests)\", \"test_empty_sitemap (sitemaps_tests.test_http.HTTPSitemapTests)\", \"The priority value should not be localized.\", \"test_no_section (sitemaps_tests.test_http.HTTPSitemapTests)\", \"test_page_not_int (sitemaps_tests.test_http.HTTPSitemapTests)\", \"A sitemap may have multiple pages.\", \"test_requestsite_sitemap (sitemaps_tests.test_http.HTTPSitemapTests)\", \"A simple sitemap can be rendered with a custom template\", \"A simple i18n sitemap index can be rendered, without logging variable\", \"A simple sitemap can be rendered\", \"A simple sitemap index can be rendered\", \"A simple sitemap section can be rendered\", \"sitemapindex.lastmod is included when Sitemap.lastmod is\", \"sitemapindex.lastmod is omitted when Sitemap.lastmod is\", \"Check we get ImproperlyConfigured if we don't pass a site object to\", \"Check we get ImproperlyConfigured when we don't pass a site object to\", \"Check to make sure that the raw item is included with each\", \"Last-Modified header is set correctly\", \"The Last-Modified header should be support dates (without time).\", \"Last-Modified header is missing when sitemap has no lastmod\", \"Last-Modified header is omitted when lastmod not on all items\", \"The Last-Modified header should be converted from timezone aware dates\", \"lastmod datestamp shows timezones if Sitemap.get_latest_lastmod\", \"A sitemap may not be callable.\", \"test_sitemap_without_entries (sitemaps_tests.test_http.HTTPSitemapTests)\", \"The Last-Modified header is set to the most recent sitemap lastmod.\", \"The Last-Modified header is omitted when lastmod isn't found in all\", \"test_x_robots_sitemap (sitemaps_tests.test_http.HTTPSitemapTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.754744",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}