{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-4516",
  "base_commit": "0b5a44359d8255c136af27c0ef5f5b196a526430",
  "patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+from typing import List, Pattern, Tuple\n \n from astroid import modutils\n \n@@ -28,32 +29,33 @@ def get_python_path(filepath: str) -> str:\n             return os.getcwd()\n \n \n-def _basename_in_ignore_list_re(base_name, ignore_list_re):\n-    \"\"\"Determines if the basename is matched in a regex ignorelist\n-\n-    :param str base_name: The basename of the file\n-    :param list ignore_list_re: A collection of regex patterns to match against.\n-        Successful matches are ignored.\n-\n-    :returns: `True` if the basename is ignored, `False` otherwise.\n-    :rtype: bool\n-    \"\"\"\n+def _is_in_ignore_list_re(element: str, ignore_list_re: List[Pattern]) -> bool:\n+    \"\"\"determines if the element is matched in a regex ignore-list\"\"\"\n     for file_pattern in ignore_list_re:\n-        if file_pattern.match(base_name):\n+        if file_pattern.match(element):\n             return True\n     return False\n \n \n-def expand_modules(files_or_modules, ignore_list, ignore_list_re):\n-    \"\"\"Take a list of files/modules/packages and return the list of tuple\n-    (file, module name) which have to be actually checked.\"\"\"\n+def expand_modules(\n+    files_or_modules: List[str],\n+    ignore_list: List[str],\n+    ignore_list_re: List[Pattern],\n+    ignore_list_paths_re: List[Pattern],\n+) -> Tuple[List[dict], List[dict]]:\n+    \"\"\"take a list of files/modules/packages and return the list of tuple\n+    (file, module name) which have to be actually checked\n+    \"\"\"\n     result = []\n     errors = []\n     path = sys.path.copy()\n+\n     for something in files_or_modules:\n         basename = os.path.basename(something)\n-        if basename in ignore_list or _basename_in_ignore_list_re(\n-            basename, ignore_list_re\n+        if (\n+            basename in ignore_list\n+            or _is_in_ignore_list_re(os.path.basename(something), ignore_list_re)\n+            or _is_in_ignore_list_re(something, ignore_list_paths_re)\n         ):\n             continue\n         module_path = get_python_path(something)\n@@ -117,10 +119,11 @@ def expand_modules(files_or_modules, ignore_list, ignore_list_re):\n             ):\n                 if filepath == subfilepath:\n                     continue\n-                if _basename_in_ignore_list_re(\n+                if _is_in_ignore_list_re(\n                     os.path.basename(subfilepath), ignore_list_re\n-                ):\n+                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n                     continue\n+\n                 modpath = _modpath_from_file(\n                     subfilepath, is_namespace, path=additional_search_path\n                 )\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -186,6 +186,17 @@ def make_options():\n                     \" skipped. The regex matches against base names, not paths.\",\n                 },\n             ),\n+            (\n+                \"ignore-paths\",\n+                {\n+                    \"type\": \"regexp_csv\",\n+                    \"metavar\": \"<pattern>[,<pattern>...]\",\n+                    \"dest\": \"ignore_list_paths_re\",\n+                    \"default\": (),\n+                    \"help\": \"Add files or directories matching the regex patterns to the\"\n+                    \" ignore-list. The regex matches against paths.\",\n+                },\n+            ),\n             (\n                 \"persistent\",\n                 {\n@@ -1046,7 +1057,10 @@ def _iterate_file_descrs(self, files_or_modules):\n     def _expand_files(self, modules):\n         \"\"\"get modules and errors from a list of modules and handle errors\"\"\"\n         result, errors = expand_modules(\n-            modules, self.config.black_list, self.config.black_list_re\n+            modules,\n+            self.config.black_list,\n+            self.config.black_list_re,\n+            self.config.ignore_list_paths_re,\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n",
  "test_patch": "diff --git a/tests/lint/unittest_expand_modules.py b/tests/lint/unittest_expand_modules.py\n--- a/tests/lint/unittest_expand_modules.py\n+++ b/tests/lint/unittest_expand_modules.py\n@@ -7,19 +7,29 @@\n \n import pytest\n \n-from pylint.lint.expand_modules import _basename_in_ignore_list_re, expand_modules\n+from pylint.lint.expand_modules import _is_in_ignore_list_re, expand_modules\n \n \n-def test__basename_in_ignore_list_re_match():\n-    patterns = [re.compile(\".*enchilada.*\"), re.compile(\"unittest_.*\")]\n-    assert _basename_in_ignore_list_re(\"unittest_utils.py\", patterns)\n-    assert _basename_in_ignore_list_re(\"cheese_enchiladas.xml\", patterns)\n+def test__is_in_ignore_list_re_match():\n+    patterns = [\n+        re.compile(\".*enchilada.*\"),\n+        re.compile(\"unittest_.*\"),\n+        re.compile(\".*tests/.*\"),\n+    ]\n+    assert _is_in_ignore_list_re(\"unittest_utils.py\", patterns)\n+    assert _is_in_ignore_list_re(\"cheese_enchiladas.xml\", patterns)\n+    assert _is_in_ignore_list_re(\"src/tests/whatever.xml\", patterns)\n \n \n-def test__basename_in_ignore_list_re_nomatch():\n-    patterns = [re.compile(\".*enchilada.*\"), re.compile(\"unittest_.*\")]\n-    assert not _basename_in_ignore_list_re(\"test_utils.py\", patterns)\n-    assert not _basename_in_ignore_list_re(\"enchilad.py\", patterns)\n+def test__is_in_ignore_list_re_nomatch():\n+    patterns = [\n+        re.compile(\".*enchilada.*\"),\n+        re.compile(\"unittest_.*\"),\n+        re.compile(\".*tests/.*\"),\n+    ]\n+    assert not _is_in_ignore_list_re(\"test_utils.py\", patterns)\n+    assert not _is_in_ignore_list_re(\"enchilad.py\", patterns)\n+    assert not _is_in_ignore_list_re(\"src/tests.py\", patterns)\n \n \n TEST_DIRECTORY = Path(__file__).parent.parent\n@@ -70,8 +80,10 @@ def test__basename_in_ignore_list_re_nomatch():\n     ],\n )\n def test_expand_modules(files_or_modules, expected):\n-    ignore_list, ignore_list_re = [], []\n-    modules, errors = expand_modules(files_or_modules, ignore_list, ignore_list_re)\n+    ignore_list, ignore_list_re, ignore_list_paths_re = [], [], []\n+    modules, errors = expand_modules(\n+        files_or_modules, ignore_list, ignore_list_re, ignore_list_paths_re\n+    )\n     modules.sort(key=lambda d: d[\"name\"])\n     assert modules == expected\n     assert not errors\n",
  "problem_statement": "Ignore clause not ignoring directories\nThis is a different issue to [issues/908](https://github.com/PyCQA/pylint/issues/908).\r\n\r\n### Steps to reproduce\r\n1. Create a directory `test` and within that a directory `stuff`.\r\n2. Create files `test/a.py` and `test/stuff/b.py`. Put syntax errors in both.\r\n3. From `test`, run `pylint *.py **/*.py --ignore stuff`.\r\n\r\n### Current behavior\r\nPylint does not ignore `stuff/b.py`, producing the message\r\n```************* Module a\r\na.py:1:0: E0001: invalid syntax (<unknown>, line 1) (syntax-error)\r\n************* Module b\r\nstuff/b.py:1:0: E0001: invalid syntax (<unknown>, line 1) (syntax-error)\r\n```\r\n\r\n### Expected behavior\r\nPylint ignores the file `stuff/b.py`.\r\n\r\n### pylint --version output\r\n```pylint 2.2.2\r\nastroid 2.1.0\r\nPython 3.7.1 (default, Dec 14 2018, 19:28:38) \r\n[GCC 7.3.0]```\r\n\nignore-patterns does not skip non-top-level directories.\n<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1.  create a a/b/c.py (where c.py will generate a pylint message, so that we get output) (along with the appropriate \\_\\_init\\_\\_.py files)\r\n2.  Run pylint: pylint --ignore-patterns=b\r\n3.  Run pylint: pylint --ignore-patterns=a\r\n\r\n### Current behavior\r\nc.py is skipped for ignore-patterns=a, but not for ignore-patterns=b\r\n\r\n### Expected behavior\r\nc.py should be skipped for both\r\n\r\n### pylint --version output\r\npylint 2.1.1\r\nastroid 2.1.0-dev\r\nPython 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 17:26:49) [MSC v.1900 32 bit (Intel)]\r\n\n",
  "hints_text": "The problem seems to be in `utils.expand_modules()` in which we find the code that actually performs the ignoring:\r\n\r\n```python\r\nif os.path.basename(something) in black_list:\r\n    continue\r\nif _basename_in_blacklist_re(os.path.basename(something), black_list_re):\r\n    continue\r\n```\r\nHere `something` will be of the form `\"stuff/b.py\"` and `os.path.basename(something)` will be of the form `b.py`. In other words, _before_ we do the ignoring, we specifically remove from the filepath all of the information about what directory it's in, so that it's impossible to have any way of ignoring a directory. Is this the intended behavior?\nHi @geajack Thanks for reporting an issue. That behaviour it's probably not intended, I think we definitely need to fix this to allow ignoring directories as well.\n@geajack  @PCManticore Is there a work around to force pylint to ignore directories?  I've tried `ignore`, `ignored-modules`, and `ignore-patterns` and not getting to a working solution.  Background is I want to pylint scan source repositories (during our TravisCI PR builds), but want to exclude any python source found in certain directories: specifically directories brought in using git-submodules (as those submodules are already covered by their own TravisCI builds).  Would like to set something in the project's `.pylintrc` that would configure pylint to ignore those directories...\nHas there been any progress on this issue? It's still apparent in `pylint 2.3.1`.\n@bgehman Right now ignoring directories is not supported, as per this issue suggests. We should add support for ignoring directories to `--ignore` and `--ignore-patterns`, while `--ignored-modules` does something else entirely (ignores modules from being type checked, not completely analysed).\r\n\r\n@Michionlion There was no progress on this issue, as you can see there are 400 issues opened, so depending on my time, it's entirely possible that an issue could stay open for months or years. Feel free to tackle a PR if you need this fixed sooner.\nRelates to #2541\nI also meet this problem.\r\nCan we check path directly? I think it's more convenient for usage.\nworkaround... add this to your .pylintrc:\r\n\r\n```\r\ninit-hook=\r\n    sys.path.append(os.getcwd());\r\n    from pylint_ignore import PylintIgnorePaths;\r\n    PylintIgnorePaths('my/thirdparty/subdir', 'my/other/badcode')\r\n```\r\n\r\nthen create `pylint_ignore.py`:\r\n\r\n```\r\nfrom pylint.utils import utils\r\n\r\n\r\nclass PylintIgnorePaths:\r\n    def __init__(self, *paths):\r\n        self.paths = paths\r\n        self.original_expand_modules = utils.expand_modules\r\n        utils.expand_modules = self.patched_expand\r\n\r\n    def patched_expand(self, *args, **kwargs):\r\n        result, errors = self.original_expand_modules(*args, **kwargs)\r\n\r\n        def keep_item(item):\r\n            if any(1 for path in self.paths if item['path'].startswith(path)):\r\n                return False\r\n\r\n            return True\r\n\r\n        result = list(filter(keep_item, result))\r\n\r\n        return result, errors\nWhen will we get a fix for this issue?\nThis is still broken, one and a half year later... The documentation still claims that these parameters can ignore directories.\n",
  "created_at": "2021-05-26T15:15:27Z",
  "version": "2.8",
  "FAIL_TO_PASS": "[\"tests/lint/unittest_expand_modules.py::test__is_in_ignore_list_re_match\", \"tests/lint/unittest_expand_modules.py::test__is_in_ignore_list_re_nomatch\", \"tests/lint/unittest_expand_modules.py::test_expand_modules[files_or_modules0-expected0]\", \"tests/lint/unittest_expand_modules.py::test_expand_modules[files_or_modules1-expected1]\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "49a6206c7756307844c1c32c256afdf9836d7bce",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.908100",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}