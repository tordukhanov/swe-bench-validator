{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-8033",
  "base_commit": "66311ff702d98450f29a448a47c0cd5fd0c51081",
  "patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -99,26 +99,48 @@ def _inject_setup_teardown_fixtures(self, cls: type) -> None:\n         \"\"\"Injects a hidden auto-use fixture to invoke setUpClass/setup_method and corresponding\n         teardown functions (#517).\"\"\"\n         class_fixture = _make_xunit_fixture(\n-            cls, \"setUpClass\", \"tearDownClass\", scope=\"class\", pass_self=False\n+            cls,\n+            \"setUpClass\",\n+            \"tearDownClass\",\n+            \"doClassCleanups\",\n+            scope=\"class\",\n+            pass_self=False,\n         )\n         if class_fixture:\n             cls.__pytest_class_setup = class_fixture  # type: ignore[attr-defined]\n \n         method_fixture = _make_xunit_fixture(\n-            cls, \"setup_method\", \"teardown_method\", scope=\"function\", pass_self=True\n+            cls,\n+            \"setup_method\",\n+            \"teardown_method\",\n+            None,\n+            scope=\"function\",\n+            pass_self=True,\n         )\n         if method_fixture:\n             cls.__pytest_method_setup = method_fixture  # type: ignore[attr-defined]\n \n \n def _make_xunit_fixture(\n-    obj: type, setup_name: str, teardown_name: str, scope: \"_Scope\", pass_self: bool\n+    obj: type,\n+    setup_name: str,\n+    teardown_name: str,\n+    cleanup_name: Optional[str],\n+    scope: \"_Scope\",\n+    pass_self: bool,\n ):\n     setup = getattr(obj, setup_name, None)\n     teardown = getattr(obj, teardown_name, None)\n     if setup is None and teardown is None:\n         return None\n \n+    if cleanup_name:\n+        cleanup = getattr(obj, cleanup_name, lambda *args: None)\n+    else:\n+\n+        def cleanup(*args):\n+            pass\n+\n     @pytest.fixture(\n         scope=scope,\n         autouse=True,\n@@ -130,16 +152,32 @@ def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n             reason = self.__unittest_skip_why__\n             pytest.skip(reason)\n         if setup is not None:\n-            if pass_self:\n-                setup(self, request.function)\n-            else:\n-                setup()\n+            try:\n+                if pass_self:\n+                    setup(self, request.function)\n+                else:\n+                    setup()\n+            # unittest does not call the cleanup function for every BaseException, so we\n+            # follow this here.\n+            except Exception:\n+                if pass_self:\n+                    cleanup(self)\n+                else:\n+                    cleanup()\n+\n+                raise\n         yield\n-        if teardown is not None:\n+        try:\n+            if teardown is not None:\n+                if pass_self:\n+                    teardown(self, request.function)\n+                else:\n+                    teardown()\n+        finally:\n             if pass_self:\n-                teardown(self, request.function)\n+                cleanup(self)\n             else:\n-                teardown()\n+                cleanup()\n \n     return fixture\n \n",
  "test_patch": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1260,3 +1260,163 @@ def test_plain_unittest_does_not_support_async(testdir):\n             \"*1 passed*\",\n         ]\n     result.stdout.fnmatch_lines(expected_lines)\n+\n+\n+@pytest.mark.skipif(\n+    sys.version_info < (3, 8), reason=\"Feature introduced in Python 3.8\"\n+)\n+def test_do_class_cleanups_on_success(testdir):\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            values = []\n+            @classmethod\n+            def setUpClass(cls):\n+                def cleanup():\n+                    cls.values.append(1)\n+                cls.addClassCleanup(cleanup)\n+            def test_one(self):\n+                pass\n+            def test_two(self):\n+                pass\n+        def test_cleanup_called_exactly_once():\n+            assert MyTestCase.values == [1]\n+    \"\"\"\n+    )\n+    reprec = testdir.inline_run(testpath)\n+    passed, skipped, failed = reprec.countoutcomes()\n+    assert failed == 0\n+    assert passed == 3\n+\n+\n+@pytest.mark.skipif(\n+    sys.version_info < (3, 8), reason=\"Feature introduced in Python 3.8\"\n+)\n+def test_do_class_cleanups_on_setupclass_failure(testdir):\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            values = []\n+            @classmethod\n+            def setUpClass(cls):\n+                def cleanup():\n+                    cls.values.append(1)\n+                cls.addClassCleanup(cleanup)\n+                assert False\n+            def test_one(self):\n+                pass\n+        def test_cleanup_called_exactly_once():\n+            assert MyTestCase.values == [1]\n+    \"\"\"\n+    )\n+    reprec = testdir.inline_run(testpath)\n+    passed, skipped, failed = reprec.countoutcomes()\n+    assert failed == 1\n+    assert passed == 1\n+\n+\n+@pytest.mark.skipif(\n+    sys.version_info < (3, 8), reason=\"Feature introduced in Python 3.8\"\n+)\n+def test_do_class_cleanups_on_teardownclass_failure(testdir):\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            values = []\n+            @classmethod\n+            def setUpClass(cls):\n+                def cleanup():\n+                    cls.values.append(1)\n+                cls.addClassCleanup(cleanup)\n+            @classmethod\n+            def tearDownClass(cls):\n+                assert False\n+            def test_one(self):\n+                pass\n+            def test_two(self):\n+                pass\n+        def test_cleanup_called_exactly_once():\n+            assert MyTestCase.values == [1]\n+    \"\"\"\n+    )\n+    reprec = testdir.inline_run(testpath)\n+    passed, skipped, failed = reprec.countoutcomes()\n+    assert passed == 3\n+\n+\n+def test_do_cleanups_on_success(testdir):\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            values = []\n+            def setUp(self):\n+                def cleanup():\n+                    self.values.append(1)\n+                self.addCleanup(cleanup)\n+            def test_one(self):\n+                pass\n+            def test_two(self):\n+                pass\n+        def test_cleanup_called_the_right_number_of_times():\n+            assert MyTestCase.values == [1, 1]\n+    \"\"\"\n+    )\n+    reprec = testdir.inline_run(testpath)\n+    passed, skipped, failed = reprec.countoutcomes()\n+    assert failed == 0\n+    assert passed == 3\n+\n+\n+def test_do_cleanups_on_setup_failure(testdir):\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            values = []\n+            def setUp(self):\n+                def cleanup():\n+                    self.values.append(1)\n+                self.addCleanup(cleanup)\n+                assert False\n+            def test_one(self):\n+                pass\n+            def test_two(self):\n+                pass\n+        def test_cleanup_called_the_right_number_of_times():\n+            assert MyTestCase.values == [1, 1]\n+    \"\"\"\n+    )\n+    reprec = testdir.inline_run(testpath)\n+    passed, skipped, failed = reprec.countoutcomes()\n+    assert failed == 2\n+    assert passed == 1\n+\n+\n+def test_do_cleanups_on_teardown_failure(testdir):\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            values = []\n+            def setUp(self):\n+                def cleanup():\n+                    self.values.append(1)\n+                self.addCleanup(cleanup)\n+            def tearDown(self):\n+                assert False\n+            def test_one(self):\n+                pass\n+            def test_two(self):\n+                pass\n+        def test_cleanup_called_the_right_number_of_times():\n+            assert MyTestCase.values == [1, 1]\n+    \"\"\"\n+    )\n+    reprec = testdir.inline_run(testpath)\n+    passed, skipped, failed = reprec.countoutcomes()\n+    assert failed == 2\n+    assert passed == 1\n",
  "problem_statement": "Class cleanups in Python 3.8+ are not called\nhttps://docs.python.org/3/library/unittest.html#unittest.TestCase.addClassCleanup\r\n\r\nDid not see `doClassCleanups` mentioned anywhere in this repo, which is the method that should be called. See https://github.com/python/cpython/blob/0f221d09cad46bee38d1b7a7822772df66c53028/Lib/unittest/suite.py#L175\r\n\r\nRepo:\r\n```\r\nimport unittest\r\n\r\ndef cleanup():\r\n    assert False\r\n\r\nclass MyTest(unittest.TestCase):\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        cls.addClassCleanup(cleanup)\r\n    \r\n    def test_one(self):\r\n        pass\r\n```\r\n\r\nWith unittest:\r\n```\r\n.E\r\n======================================================================\r\nERROR: tearDownClass (test_demo.MyTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/petter/source/pytesttest/test_demo.py\", line 4, in cleanup\r\n    assert False\r\nAssertionError\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.000s\r\n```\r\n\r\nWith Pytest:\r\n```\r\ncollected 1 item\r\n\r\ntest_demo.py .                                                                                                                                                                       [100%]\r\n\r\n==================================================================================== 1 passed in 0.03s ====================================================================================\r\n```\n",
  "hints_text": "",
  "created_at": "2020-11-13T10:29:33Z",
  "version": "6.2",
  "FAIL_TO_PASS": "[\"testing/test_unittest.py::test_do_class_cleanups_on_success\", \"testing/test_unittest.py::test_do_class_cleanups_on_setupclass_failure\", \"testing/test_unittest.py::test_do_class_cleanups_on_teardownclass_failure\"]",
  "PASS_TO_PASS": "[\"testing/test_unittest.py::test_simple_unittest\", \"testing/test_unittest.py::test_runTest_method\", \"testing/test_unittest.py::test_isclasscheck_issue53\", \"testing/test_unittest.py::test_setup\", \"testing/test_unittest.py::test_setUpModule\", \"testing/test_unittest.py::test_setUpModule_failing_no_teardown\", \"testing/test_unittest.py::test_new_instances\", \"testing/test_unittest.py::test_function_item_obj_is_instance\", \"testing/test_unittest.py::test_teardown\", \"testing/test_unittest.py::test_teardown_issue1649\", \"testing/test_unittest.py::test_unittest_skip_issue148\", \"testing/test_unittest.py::test_method_and_teardown_failing_reporting\", \"testing/test_unittest.py::test_setup_failure_is_shown\", \"testing/test_unittest.py::test_setup_setUpClass\", \"testing/test_unittest.py::test_setup_class\", \"testing/test_unittest.py::test_testcase_adderrorandfailure_defers[Error]\", \"testing/test_unittest.py::test_testcase_adderrorandfailure_defers[Failure]\", \"testing/test_unittest.py::test_testcase_custom_exception_info[Error]\", \"testing/test_unittest.py::test_testcase_custom_exception_info[Failure]\", \"testing/test_unittest.py::test_testcase_totally_incompatible_exception_info\", \"testing/test_unittest.py::test_module_level_pytestmark\", \"testing/test_unittest.py::test_djangolike_testcase\", \"testing/test_unittest.py::test_unittest_not_shown_in_traceback\", \"testing/test_unittest.py::test_unorderable_types\", \"testing/test_unittest.py::test_unittest_typerror_traceback\", \"testing/test_unittest.py::test_unittest_expected_failure_for_failing_test_is_xfail[pytest]\", \"testing/test_unittest.py::test_unittest_expected_failure_for_failing_test_is_xfail[unittest]\", \"testing/test_unittest.py::test_unittest_expected_failure_for_passing_test_is_fail[pytest]\", \"testing/test_unittest.py::test_unittest_expected_failure_for_passing_test_is_fail[unittest]\", \"testing/test_unittest.py::test_unittest_setup_interaction[return]\", \"testing/test_unittest.py::test_unittest_setup_interaction[yield]\", \"testing/test_unittest.py::test_non_unittest_no_setupclass_support\", \"testing/test_unittest.py::test_no_teardown_if_setupclass_failed\", \"testing/test_unittest.py::test_cleanup_functions\", \"testing/test_unittest.py::test_issue333_result_clearing\", \"testing/test_unittest.py::test_unittest_raise_skip_issue748\", \"testing/test_unittest.py::test_unittest_skip_issue1169\", \"testing/test_unittest.py::test_class_method_containing_test_issue1558\", \"testing/test_unittest.py::test_usefixtures_marker_on_unittest[builtins.object]\", \"testing/test_unittest.py::test_usefixtures_marker_on_unittest[unittest.TestCase]\", \"testing/test_unittest.py::test_testcase_handles_init_exceptions\", \"testing/test_unittest.py::test_error_message_with_parametrized_fixtures\", \"testing/test_unittest.py::test_setup_inheritance_skipping[test_setup_skip.py-1\", \"testing/test_unittest.py::test_setup_inheritance_skipping[test_setup_skip_class.py-1\", \"testing/test_unittest.py::test_setup_inheritance_skipping[test_setup_skip_module.py-1\", \"testing/test_unittest.py::test_BdbQuit\", \"testing/test_unittest.py::test_exit_outcome\", \"testing/test_unittest.py::test_trace\", \"testing/test_unittest.py::test_pdb_teardown_called\", \"testing/test_unittest.py::test_pdb_teardown_skipped[@unittest.skip]\", \"testing/test_unittest.py::test_pdb_teardown_skipped[@pytest.mark.skip]\", \"testing/test_unittest.py::test_async_support\", \"testing/test_unittest.py::test_do_cleanups_on_success\", \"testing/test_unittest.py::test_do_cleanups_on_setup_failure\", \"testing/test_unittest.py::test_do_cleanups_on_teardown_failure\", \"testing/test_unittest.py::test_plain_unittest_does_not_support_async\"]",
  "environment_setup_commit": "902739cfc3bbc3379e6ef99c8e250de35f52ecde",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.940692",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}