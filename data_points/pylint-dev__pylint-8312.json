{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-8312",
  "base_commit": "7893fd205809380fcfdcaf4f82ec81968528875a",
  "patch": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -5,6 +5,8 @@\n from __future__ import annotations\n \n import sys\n+from glob import glob\n+from itertools import chain\n from pathlib import Path\n from typing import TYPE_CHECKING\n \n@@ -118,6 +120,14 @@ def _config_initialization(\n     # Link the base Namespace object on the current directory\n     linter._directory_namespaces[Path(\".\").resolve()] = (linter.config, {})\n \n-    # parsed_args_list should now only be a list of files/directories to lint.\n+    # parsed_args_list should now only be a list of inputs to lint.\n     # All other options have been removed from the list.\n-    return parsed_args_list\n+    return list(\n+        chain.from_iterable(\n+            # NOTE: 'or [arg]' is needed in the case the input file or directory does not exist and 'glob(arg)' cannot\n+            # find anything. Without this we would not be able to output the fatal import error for this module later\n+            # on, as it would get silently ignored.\n+            glob(arg, recursive=True) or [arg]\n+            for arg in parsed_args_list\n+        )\n+    )\n",
  "test_patch": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -1220,8 +1220,6 @@ def test_recursive_implicit_namespace() -> None:\n         ],\n         exit=False,\n     )\n-    run.linter.set_reporter(testutils.GenericTestReporter())\n-    run.linter.check([join(REGRTEST_DATA_DIR, \"pep420\", \"basic\")])\n     assert run.linter.file_state.base_name == \"namespace.package\"\n \n \n@@ -1241,6 +1239,19 @@ def test_recursive_implicit_namespace_wrapper() -> None:\n     assert run.linter.reporter.messages == []\n \n \n+def test_globbing() -> None:\n+    run = Run(\n+        [\n+            \"--verbose\",\n+            \"--source-roots\",\n+            join(REGRTEST_DATA_DIR, \"pep420\", \"basic\", \"project\"),\n+            join(REGRTEST_DATA_DIR, \"pep420\", \"basic\", \"project\", \"**\", \"__init__.py\"),\n+        ],\n+        exit=False,\n+    )\n+    assert run.linter.file_state.base_name == \"namespace.package.__init__\"\n+\n+\n def test_relative_imports(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/3651\"\"\"\n     linter = initialized_linter\ndiff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1158,6 +1158,13 @@ def test_recursive(self) -> None:\n             code=0,\n         )\n \n+    def test_recursive_globbing(self) -> None:\n+        \"\"\"Tests if running linter over directory using --recursive=y and globbing\"\"\"\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"d?rectory\", \"subd*\"), \"--recursive=y\"],\n+            code=0,\n+        )\n+\n     @pytest.mark.parametrize(\"ignore_value\", [\"ignored_subdirectory\", \"failing.py\"])\n     def test_ignore_recursive(self, ignore_value: str) -> None:\n         \"\"\"Tests recursive run of linter ignoring directory using --ignore parameter.\n",
  "problem_statement": "Support globbing pattern for input specification\n### Current problem\r\n\r\nAs mentioned in https://github.com/PyCQA/pylint/pull/8281#issuecomment-1434375681 and https://github.com/PyCQA/pylint/issues/8290#issuecomment-1429340178, lets consider supporting `pylint --recursive=y packages/*/src`\r\n\r\ncc @Pierre-Sassoulas @DudeNr33 @DanielNoord \r\n\r\n### Desired solution\r\n\r\nAdd globbing support right in this line\r\nhttps://github.com/PyCQA/pylint/blob/dca394035268a234b29d0c103a4fcc201c84061f/pylint/config/config_initialization.py#L123\r\n\r\n### Additional context\r\n\r\n_No response_\n",
  "hints_text": "",
  "created_at": "2023-02-17T18:44:32Z",
  "version": "2.17",
  "FAIL_TO_PASS": "[\"tests/lint/unittest_lint.py::test_globbing\", \"tests/test_self.py::TestRunTC::test_recursive_globbing\"]",
  "PASS_TO_PASS": "[\"tests/lint/unittest_lint.py::test_deprecated\", \"tests/lint/unittest_lint.py::test_no_args\", \"tests/lint/unittest_lint.py::test_one_arg[case0]\", \"tests/lint/unittest_lint.py::test_one_arg[case1]\", \"tests/lint/unittest_lint.py::test_one_arg[case2]\", \"tests/lint/unittest_lint.py::test_one_arg[case3]\", \"tests/lint/unittest_lint.py::test_one_arg[case4]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case0]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case1]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case2]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case3]\", \"tests/lint/unittest_lint.py::test_more_args[case0]\", \"tests/lint/unittest_lint.py::test_more_args[case1]\", \"tests/lint/unittest_lint.py::test_more_args[case2]\", \"tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account\", \"tests/lint/unittest_lint.py::test_enable_message\", \"tests/lint/unittest_lint.py::test_enable_message_category\", \"tests/lint/unittest_lint.py::test_message_state_scope\", \"tests/lint/unittest_lint.py::test_enable_message_block\", \"tests/lint/unittest_lint.py::test_enable_by_symbol\", \"tests/lint/unittest_lint.py::test_enable_report\", \"tests/lint/unittest_lint.py::test_report_output_format_aliased\", \"tests/lint/unittest_lint.py::test_set_unsupported_reporter\", \"tests/lint/unittest_lint.py::test_set_option_1\", \"tests/lint/unittest_lint.py::test_set_option_2\", \"tests/lint/unittest_lint.py::test_enable_checkers\", \"tests/lint/unittest_lint.py::test_errors_only\", \"tests/lint/unittest_lint.py::test_disable_similar\", \"tests/lint/unittest_lint.py::test_disable_alot\", \"tests/lint/unittest_lint.py::test_addmessage\", \"tests/lint/unittest_lint.py::test_addmessage_invalid\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line\", \"tests/lint/unittest_lint.py::test_load_plugin_path_manipulation_case_6\", \"tests/lint/unittest_lint.py::test_load_plugin_path_manipulation_case_3\", \"tests/lint/unittest_lint.py::test_load_plugin_pylintrc_order_independent\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line_before_init_hook\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line_with_init_hook_command_line\", \"tests/lint/unittest_lint.py::test_load_plugin_config_file\", \"tests/lint/unittest_lint.py::test_load_plugin_configuration\", \"tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins\", \"tests/lint/unittest_lint.py::test_analyze_explicit_script\", \"tests/lint/unittest_lint.py::test_full_documentation\", \"tests/lint/unittest_lint.py::test_list_msgs_enabled\", \"tests/lint/unittest_lint.py::test_pylint_home\", \"tests/lint/unittest_lint.py::test_pylint_home_from_environ\", \"tests/lint/unittest_lint.py::test_warn_about_old_home\", \"tests/lint/unittest_lint.py::test_pylintrc\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package\", \"tests/lint/unittest_lint.py::test_custom_should_analyze_file\", \"tests/lint/unittest_lint.py::test_multiprocessing[1]\", \"tests/lint/unittest_lint.py::test_multiprocessing[2]\", \"tests/lint/unittest_lint.py::test_filename_with__init__\", \"tests/lint/unittest_lint.py::test_by_module_statement_value\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]\", \"tests/lint/unittest_lint.py::test_source_roots_globbing\", \"tests/lint/unittest_lint.py::test_recursive_implicit_namespace\", \"tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir\", \"tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir_on_path\", \"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_type_annotation_names\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntax_error\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]\", \"tests/test_self.py::TestRunTC::test_one_module_fatal_error\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\", \"tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided\", \"tests/test_self.py::TestRunTC::test_regex_paths_csv_validator\", \"tests/test_self.py::TestRunTC::test_recursive\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]\", \"tests/test_self.py::TestRunTC::test_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding\", \"tests/test_self.py::TestRunTC::test_encoding[good.py-]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]\", \"tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression\", \"tests/test_self.py::TestRunTC::test_output_no_header\", \"tests/test_self.py::TestRunTC::test_no_name_in_module\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name\", \"tests/test_self.py::TestCallbackOptions::test_generate_rcfile\", \"tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_errors_only\", \"tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable\", \"tests/test_self.py::TestCallbackOptions::test_verbose\", \"tests/test_self.py::TestCallbackOptions::test_enable_all_extensions\"]",
  "environment_setup_commit": "80e024af5cfdc65a2b9fef1f25ff602ab4fa0f88",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.917292",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}