{
  "repo": "django/django",
  "instance_id": "django__django-11605",
  "base_commit": "194d1dfc186cc8d2b35dabf64f3ed38b757cbd98",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -500,8 +500,6 @@ def as_sql(self, compiler, connection):\n @deconstructible\n class F(Combinable):\n     \"\"\"An object capable of resolving references to existing query objects.\"\"\"\n-    # Can the expression be used in a WHERE clause?\n-    filterable = True\n \n     def __init__(self, name):\n         \"\"\"\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1114,6 +1114,17 @@ def check_related_objects(self, field, value, opts):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n+    def check_filterable(self, expression):\n+        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        if not getattr(expression, 'filterable', 'True'):\n+            raise NotSupportedError(\n+                expression.__class__.__name__ + ' is disallowed in the filter '\n+                'clause.'\n+            )\n+        if hasattr(expression, 'get_source_expressions'):\n+            for expr in expression.get_source_expressions():\n+                self.check_filterable(expr)\n+\n     def build_lookup(self, lookups, lhs, rhs):\n         \"\"\"\n         Try to extract transforms and lookup from given lhs.\n@@ -1217,11 +1228,7 @@ def build_filter(self, filter_expr, branch_negated=False, current_negated=False,\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n \n-        if not getattr(reffed_expression, 'filterable', True):\n-            raise NotSupportedError(\n-                reffed_expression.__class__.__name__ + ' is disallowed in '\n-                'the filter clause.'\n-            )\n+        self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n             raise FieldError(\"Joined field references are not permitted in this query\")\n@@ -1230,6 +1237,8 @@ def build_filter(self, filter_expr, branch_negated=False, current_negated=False,\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins, simple_col)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n+        self.check_filterable(value)\n+\n         clause = self.where_class()\n         if reffed_expression:\n             condition = self.build_lookup(lookups, reffed_expression, value)\n",
  "test_patch": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -4,7 +4,8 @@\n from django.core.exceptions import FieldError\n from django.db import NotSupportedError, connection\n from django.db.models import (\n-    F, OuterRef, RowRange, Subquery, Value, ValueRange, Window, WindowFrame,\n+    F, Func, OuterRef, Q, RowRange, Subquery, Value, ValueRange, Window,\n+    WindowFrame,\n )\n from django.db.models.aggregates import Avg, Max, Min, Sum\n from django.db.models.functions import (\n@@ -833,8 +834,17 @@ def test_frame_window_frame_notimplemented(self):\n \n     def test_invalid_filter(self):\n         msg = 'Window is disallowed in the filter clause'\n+        qs = Employee.objects.annotate(dense_rank=Window(expression=DenseRank()))\n         with self.assertRaisesMessage(NotSupportedError, msg):\n-            Employee.objects.annotate(dense_rank=Window(expression=DenseRank())).filter(dense_rank__gte=1)\n+            qs.filter(dense_rank__gte=1)\n+        with self.assertRaisesMessage(NotSupportedError, msg):\n+            qs.annotate(inc_rank=F('dense_rank') + Value(1)).filter(inc_rank__gte=1)\n+        with self.assertRaisesMessage(NotSupportedError, msg):\n+            qs.filter(id=F('dense_rank'))\n+        with self.assertRaisesMessage(NotSupportedError, msg):\n+            qs.filter(id=Func('dense_rank', 2, function='div'))\n+        with self.assertRaisesMessage(NotSupportedError, msg):\n+            qs.annotate(total=Sum('dense_rank', filter=Q(name='Jones'))).filter(total=1)\n \n     def test_invalid_order_by(self):\n         msg = 'order_by must be either an Expression or a sequence of expressions'\n",
  "problem_statement": "Filter by window expression should raise a descriptive error.\nDescription\n\t\nDjango has a check that filter does not contain window expressions. \nBut it is shallow, neither right side of the expression nor combined expressions are checked.\nclass Employee(models.Model):\n\tgrade = models.IntegerField()\n# raises NotSupportedError\nEmployee.objects.annotate(\n\tprev_grade=Window(expression=Lag('grade'))\n).filter(prev_grade=F('grade'))\n# Do not raise anything, fail on database backend once executed.\nEmployee.objects.annotate(\n\tprev_grade=Window(expression=Lag('grade'))\n).filter(grade=F('prev_grade'))\nEmployee.objects.annotate(\n\tprev_grade=Window(expression=Lag('grade')),\n\tdec_grade=F('prev_grade') - Value(1)\n).filter(dec_grade=F('grade'))\n",
  "hints_text": "Thanks for this report. Agreed, we should raise a helpful message because it is currently unsupported (see also a ticket #28333 to support this feature). â€‹PR",
  "created_at": "2019-07-29T11:52:50Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_invalid_filter (expressions_window.tests.NonQueryWindowTests)\"]",
  "PASS_TO_PASS": "[\"test_unsupported_backend (expressions_window.tests.WindowUnsupportedTests)\", \"test_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_window_frame_notimplemented (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_order_by (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_source_expression (expressions_window.tests.NonQueryWindowTests)\", \"test_window_frame_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_window_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_avg_salary_department (expressions_window.tests.WindowFunctionTests)\", \"test_cume_dist (expressions_window.tests.WindowFunctionTests)\", \"test_dense_rank (expressions_window.tests.WindowFunctionTests)\", \"test_department_salary (expressions_window.tests.WindowFunctionTests)\", \"Window expressions can't be used in an INSERT statement.\", \"Window expressions can't be used in an UPDATE statement.\", \"test_first_value (expressions_window.tests.WindowFunctionTests)\", \"test_function_list_of_values (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_lag (expressions_window.tests.WindowFunctionTests)\", \"test_last_value (expressions_window.tests.WindowFunctionTests)\", \"test_lead (expressions_window.tests.WindowFunctionTests)\", \"test_lead_default (expressions_window.tests.WindowFunctionTests)\", \"test_lead_offset (expressions_window.tests.WindowFunctionTests)\", \"test_max_per_year (expressions_window.tests.WindowFunctionTests)\", \"An alternative way to specify a query for FirstValue.\", \"test_multiple_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_multiple_partitioning (expressions_window.tests.WindowFunctionTests)\", \"test_nth_returns_null (expressions_window.tests.WindowFunctionTests)\", \"test_nthvalue (expressions_window.tests.WindowFunctionTests)\", \"test_ntile (expressions_window.tests.WindowFunctionTests)\", \"test_percent_rank (expressions_window.tests.WindowFunctionTests)\", \"A query with RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.\", \"test_rank (expressions_window.tests.WindowFunctionTests)\", \"test_row_number (expressions_window.tests.WindowFunctionTests)\", \"test_row_number_no_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_subquery_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_window_expression_within_subquery (expressions_window.tests.WindowFunctionTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.578439",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}