{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7593",
  "base_commit": "56772395bb945099a6d5331501c179dd2831fa1c",
  "patch": "diff --git a/sphinx/builders/html/__init__.py b/sphinx/builders/html/__init__.py\n--- a/sphinx/builders/html/__init__.py\n+++ b/sphinx/builders/html/__init__.py\n@@ -1243,6 +1243,9 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     # load default math renderer\n     app.setup_extension('sphinx.ext.mathjax')\n \n+    # load transforms for HTML builder\n+    app.setup_extension('sphinx.builders.html.transforms')\n+\n     return {\n         'version': 'builtin',\n         'parallel_read_safe': True,\ndiff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py\nnew file mode 100644\n--- /dev/null\n+++ b/sphinx/builders/html/transforms.py\n@@ -0,0 +1,69 @@\n+\"\"\"\n+    sphinx.builders.html.transforms\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Transforms for HTML builder.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import re\n+from typing import Any, Dict\n+\n+from docutils import nodes\n+\n+from sphinx.application import Sphinx\n+from sphinx.transforms.post_transforms import SphinxPostTransform\n+from sphinx.util.nodes import NodeMatcher\n+\n+\n+class KeyboardTransform(SphinxPostTransform):\n+    \"\"\"Transform :kbd: role to more detailed form.\n+\n+    Before::\n+\n+        <literal class=\"kbd\">\n+            Control-x\n+\n+    After::\n+\n+        <literal class=\"kbd\">\n+            <literal class=\"kbd\">\n+                Control\n+            -\n+            <literal class=\"kbd\">\n+                x\n+    \"\"\"\n+    default_priority = 400\n+    builders = ('html',)\n+    pattern = re.compile(r'(-|\\+|\\^|\\s+)')\n+\n+    def run(self, **kwargs: Any) -> None:\n+        matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n+        for node in self.document.traverse(matcher):  # type: nodes.literal\n+            parts = self.pattern.split(node[-1].astext())\n+            if len(parts) == 1:\n+                continue\n+\n+            node.pop()\n+            while parts:\n+                key = parts.pop(0)\n+                node += nodes.literal('', key, classes=[\"kbd\"])\n+\n+                try:\n+                    # key separator (ex. -, +, ^)\n+                    sep = parts.pop(0)\n+                    node += nodes.Text(sep)\n+                except IndexError:\n+                    pass\n+\n+\n+def setup(app: Sphinx) -> Dict[str, Any]:\n+    app.add_post_transform(KeyboardTransform)\n+\n+    return {\n+        'version': 'builtin',\n+        'parallel_read_safe': True,\n+        'parallel_write_safe': True,\n+    }\ndiff --git a/sphinx/util/nodes.py b/sphinx/util/nodes.py\n--- a/sphinx/util/nodes.py\n+++ b/sphinx/util/nodes.py\n@@ -62,8 +62,8 @@ class NodeMatcher:\n         # => [<reference ...>, <reference ...>, ...]\n     \"\"\"\n \n-    def __init__(self, *classes: \"Type[Node]\", **attrs: Any) -> None:\n-        self.classes = classes\n+    def __init__(self, *node_classes: \"Type[Node]\", **attrs: Any) -> None:\n+        self.classes = node_classes\n         self.attrs = attrs\n \n     def match(self, node: Node) -> bool:\n",
  "test_patch": "diff --git a/tests/test_markup.py b/tests/test_markup.py\n--- a/tests/test_markup.py\n+++ b/tests/test_markup.py\n@@ -16,6 +16,7 @@\n from docutils.transforms.universal import SmartQuotes\n \n from sphinx import addnodes\n+from sphinx.builders.html.transforms import KeyboardTransform\n from sphinx.builders.latex import LaTeXBuilder\n from sphinx.roles import XRefRole\n from sphinx.testing.util import Struct, assert_node\n@@ -94,6 +95,7 @@ class ForgivingLaTeXTranslator(LaTeXTranslator, ForgivingTranslator):\n def verify_re_html(app, parse):\n     def verify(rst, html_expected):\n         document = parse(rst)\n+        KeyboardTransform(document).apply()\n         html_translator = ForgivingHTMLTranslator(document, app.builder)\n         document.walkabout(html_translator)\n         html_translated = ''.join(html_translator.fragment).strip()\n@@ -237,6 +239,32 @@ def get(name):\n         '<p><kbd class=\"kbd docutils literal notranslate\">space</kbd></p>',\n         '\\\\sphinxkeyboard{\\\\sphinxupquote{space}}',\n     ),\n+    (\n+        # kbd role\n+        'verify',\n+        ':kbd:`Control+X`',\n+        ('<p><kbd class=\"kbd docutils literal notranslate\">'\n+         '<kbd class=\"kbd docutils literal notranslate\">Control</kbd>'\n+         '+'\n+         '<kbd class=\"kbd docutils literal notranslate\">X</kbd>'\n+         '</kbd></p>'),\n+        '\\\\sphinxkeyboard{\\\\sphinxupquote{Control+X}}',\n+    ),\n+    (\n+        # kbd role\n+        'verify',\n+        ':kbd:`M-x  M-s`',\n+        ('<p><kbd class=\"kbd docutils literal notranslate\">'\n+         '<kbd class=\"kbd docutils literal notranslate\">M</kbd>'\n+         '-'\n+         '<kbd class=\"kbd docutils literal notranslate\">x</kbd>'\n+         '  '\n+         '<kbd class=\"kbd docutils literal notranslate\">M</kbd>'\n+         '-'\n+         '<kbd class=\"kbd docutils literal notranslate\">s</kbd>'\n+         '</kbd></p>'),\n+        '\\\\sphinxkeyboard{\\\\sphinxupquote{M\\\\sphinxhyphen{}x  M\\\\sphinxhyphen{}s}}',\n+    ),\n     (\n         # non-interpolation of dashes in option role\n         'verify_re',\n",
  "problem_statement": "Convert :kbd: to nested <kbd> HTML elements\n**Is your feature request related to a problem? Please describe.**\r\n\r\n[:kbd:](https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-kbd) describes \"a sequence of keystrokes\". Sphinx converts it to a single [`<kbd>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd) element:\r\n```\r\n:kbd:`Control-x Control-f`\r\n```\r\nbecomes\r\n```html\r\n<kbd>Control-x Control-f</kbd>\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nPotentially sphinx could parse the `:kbd:` value and convert it to individual (or nested) `<kbd>` elements, which is what [MDN suggests](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd#Representing_keystrokes_within_an_input) as a way to represent key combinations. Something like:\r\n```html\r\n<-- Individual -->\r\n<kbd>Control</kbd>-<kbd>x</kbd> <kbd>Control</kbd>-<kbd>f</kbd>\r\n\r\n<-- Nested -->\r\n<kbd>\r\n    <kbd>Control</kbd>-<kbd>x</kbd> <kbd>Control</kbd>-<kbd>f</kbd>\r\n</kbd>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAlternatively the sphinx user could rewrite their markup:\r\n```\r\n:kbd:`Control`\\ -\\ :kbd:`x` :kbd:`Control`\\ -\\ :kbd:`f`\r\n```\r\n\r\n**Related**\r\n\r\n- https://github.com/sphinx-doc/sphinx/issues/3160\r\n- https://github.com/sphinx-doc/sphinx/pull/4197\r\n\n",
  "hints_text": "+1: Reasonable.",
  "created_at": "2020-05-02T06:10:58Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"tests/test_markup.py::test_inline[verify-:rfc:`2324`-<p><span\", \"tests/test_markup.py::test_inline[verify-:rfc:`2324#id1`-<p><span\", \"tests/test_markup.py::test_inline[verify_re-``code\", \"tests/test_markup.py::test_inline[verify-:menuselection:`a\", \"tests/test_markup.py::test_inline[verify-:menuselection:`&Foo\", \"tests/test_markup.py::test_inline[verify-:guilabel:`&Foo\", \"tests/test_markup.py::test_inline[verify-:guilabel:`Foo`-<p><span\", \"tests/test_markup.py::test_inline[verify-:kbd:`space`-<p><kbd\", \"tests/test_markup.py::test_inline[verify-:kbd:`Control+X`-<p><kbd\", \"tests/test_markup.py::test_inline[verify-:kbd:`M-x\", \"tests/test_markup.py::test_inline[verify_re-:option:`--with-option`-<p><code(\", \"tests/test_markup.py::test_inline[verify-\\\"John\\\"-<p>\\\\u201cJohn\\\\u201d</p>-\\\\u201cJohn\\\\u201d]\", \"tests/test_markup.py::test_inline[verify-``\\\"John\\\"``-<p><code\", \"tests/test_markup.py::test_inline[verify-:manpage:`mp(1)`-<p><em\", \"tests/test_markup.py::test_inline[verify-\\\\u0393\\\\\\\\\\\\\\\\\\\\u221e$-None-\\\\u0393\\\\\\\\textbackslash{}\\\\\\\\(\\\\\\\\infty\\\\\\\\)\\\\\\\\$]\", \"tests/test_markup.py::test_inline[verify-::\\\\n\\\\n\", \"tests/test_markup.py::test_inline[verify_re-`test\", \"tests/test_markup.py::test_inline[verify-term\\\\n\", \"tests/test_markup.py::test_inline[verify-term\", \"tests/test_markup.py::test_inline[verify-..\", \"tests/test_markup.py::test_inline_for_unicode_latex_engine[verify-::\\\\n\\\\n\", \"tests/test_markup.py::test_samp_role\", \"tests/test_markup.py::test_download_role\", \"tests/test_markup.py::test_XRefRole\", \"tests/test_markup.py::test_rst_prolog\", \"tests/test_markup.py::test_keep_warnings_is_True\", \"tests/test_markup.py::test_keep_warnings_is_False\", \"tests/test_markup.py::test_compact_refonly_bullet_list\", \"tests/test_markup.py::test_default_role1\", \"tests/test_markup.py::test_default_role2\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "5afc77ee27fc01c57165ab260d3a76751f9ddb35",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.044310",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}