{
  "repo": "django/django",
  "instance_id": "django__django-12122",
  "base_commit": "379bf1a2d41494360d86bc3cf8adc482abca5d63",
  "patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -13,12 +13,15 @@\n import calendar\n import datetime\n import time\n+from email.utils import format_datetime as format_datetime_rfc5322\n \n from django.utils.dates import (\n     MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS, WEEKDAYS_ABBR,\n )\n from django.utils.regex_helper import _lazy_re_compile\n-from django.utils.timezone import get_default_timezone, is_aware, is_naive\n+from django.utils.timezone import (\n+    get_default_timezone, is_aware, is_naive, make_aware,\n+)\n from django.utils.translation import gettext as _\n \n re_formatchars = _lazy_re_compile(r'(?<!\\\\)([aAbcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])')\n@@ -278,7 +281,16 @@ def o(self):\n \n     def r(self):\n         \"RFC 5322 formatted date; e.g. 'Thu, 21 Dec 2000 16:01:07 +0200'\"\n-        return self.format('D, j M Y H:i:s O')\n+        if type(self.data) is datetime.date:\n+            raise TypeError(\n+                \"The format for date objects may not contain time-related \"\n+                \"format specifiers (found 'r').\"\n+            )\n+        if is_naive(self.data):\n+            dt = make_aware(self.data, timezone=self.timezone)\n+        else:\n+            dt = self.data\n+        return format_datetime_rfc5322(dt)\n \n     def S(self):\n         \"English ordinal suffix for the day of the month, 2 characters; i.e. 'st', 'nd', 'rd' or 'th'\"\n",
  "test_patch": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -131,7 +131,7 @@ def test_timezones(self):\n \n         if TZ_SUPPORT:\n             self.assertEqual(dateformat.format(my_birthday, 'O'), '+0100')\n-            self.assertEqual(dateformat.format(my_birthday, 'r'), 'Sun, 8 Jul 1979 22:00:00 +0100')\n+            self.assertEqual(dateformat.format(my_birthday, 'r'), 'Sun, 08 Jul 1979 22:00:00 +0100')\n             self.assertEqual(dateformat.format(my_birthday, 'T'), 'CET')\n             self.assertEqual(dateformat.format(my_birthday, 'e'), '')\n             self.assertEqual(dateformat.format(aware_dt, 'e'), '-0330')\n@@ -149,10 +149,19 @@ def test_timezones(self):\n     def test_invalid_time_format_specifiers(self):\n         my_birthday = date(1984, 8, 7)\n \n-        for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 's', 'u']:\n+        for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n             msg = (\n                 \"The format for date objects may not contain time-related \"\n                 \"format specifiers (found '%s').\" % specifier\n             )\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n+\n+    def test_r_format_with_non_en_locale(self):\n+        # Changing the locale doesn't change the \"r\" format.\n+        dt = datetime(1979, 7, 8, 22, 00)\n+        with translation.override('fr'):\n+            self.assertEqual(\n+                dateformat.format(dt, 'r'),\n+                'Sun, 08 Jul 1979 22:00:00 +0100',\n+            )\n",
  "problem_statement": "template filter |date:\"r\" not valid RFC 2822 formatted when LANGUAGE_CODE different than english\nDescription\n\t\nDocumentation says template filter date with argument 'r' returns a valid RFC 2822 formatted date. But setting a LANGUAGE_CODE different than english makes the date returned not valid because the day abbreviation is translated into the LANGUAGE_CODE language. Perhaps there should be two arguments for this: one for valid RFC 2822 dates and another one for the actual 'r' argument (RFC 2822 translated).\n",
  "hints_text": "Milestone post-1.0 deleted\nSame problem here. Any solution?\ncorrected rfc2822 implementation and added tests\nThe attached patch makes the 'r' flag returns an RFC 2822 formatted date string even when LANGUAGE_CODE is set to something other than English. Added regression tests to reflect this issue. There will be a simpler solution once Python implements a datetime-RFC 2822 export feature ( ​http://bugs.python.org/issue665194 ).\nTests in patch need updating -- that file has been converted to unit tests.\nupdated tests to unit tests and fixed an issue with tzinfo\nupdated tests to unit tests and fixed an issue with tzinfo\nThe patch now includes new tests. An existing unit test was modified to adhere to a common RFC 2822 standard. This patch generates the date string using Python's email.utils.formatdate (available in py2.4). The above Python issue is still open, but its solution will allow for a much more straightforward solution. It looks to be slated for Python 2.7: ​http://bugs.python.org/issue665194\nrestored system settings.LANGUAGE_CODE after monkeying around\nShould this handle timezone infromation?, if the answer is no then this patch is on the right track, if the answer is yes then maybe we should handle things manually (and move the code to a helper function) instead of using email.utils (e.g. like we are douiing in the feed geenrator: ​http://code.djangoproject.com/browser/django/trunk/django/utils/feedgenerator.py?rev=15505#L39)\nrfc2822.3.diff fails to apply cleanly on to trunk\nChange UI/UX from NULL to False.\nthis is still a problem\nguys, this is really annoying... a workaround is to import the rfc2822_date from django.utils.feedgenerator and just register it as an own filter.\nPull request available at ​https://github.com/django/django/pull/12122",
  "created_at": "2019-11-21T19:39:03Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_invalid_time_format_specifiers (utils_tests.test_dateformat.DateFormatTests)\", \"test_r_format_with_non_en_locale (utils_tests.test_dateformat.DateFormatTests)\", \"test_timezones (utils_tests.test_dateformat.DateFormatTests)\"]",
  "PASS_TO_PASS": "[\"test_am_pm (utils_tests.test_dateformat.DateFormatTests)\", \"test_date (utils_tests.test_dateformat.DateFormatTests)\", \"test_date_formats (utils_tests.test_dateformat.DateFormatTests)\", \"test_dateformat (utils_tests.test_dateformat.DateFormatTests)\", \"test_datetime_with_local_tzinfo (utils_tests.test_dateformat.DateFormatTests)\", \"test_datetime_with_tzinfo (utils_tests.test_dateformat.DateFormatTests)\", \"test_day_of_year_leap (utils_tests.test_dateformat.DateFormatTests)\", \"test_empty_format (utils_tests.test_dateformat.DateFormatTests)\", \"test_epoch (utils_tests.test_dateformat.DateFormatTests)\", \"test_futuredates (utils_tests.test_dateformat.DateFormatTests)\", \"test_microsecond (utils_tests.test_dateformat.DateFormatTests)\", \"test_naive_ambiguous_datetime (utils_tests.test_dateformat.DateFormatTests)\", \"test_naive_datetime (utils_tests.test_dateformat.DateFormatTests)\", \"test_time_formats (utils_tests.test_dateformat.DateFormatTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.614979",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}