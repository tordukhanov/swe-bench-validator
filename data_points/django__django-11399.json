{
  "repo": "django/django",
  "instance_id": "django__django-11399",
  "base_commit": "b711eafd2aabdf22e1d529bfb76dd8d3356d7000",
  "patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -79,7 +79,7 @@ def __init__(self, args, kw):\n             self.__kw = kw\n             if not self.__prepared:\n                 self.__prepare_class__()\n-            self.__prepared = True\n+            self.__class__.__prepared = True\n \n         def __reduce__(self):\n             return (\n",
  "test_patch": "diff --git a/tests/utils_tests/test_functional.py b/tests/utils_tests/test_functional.py\n--- a/tests/utils_tests/test_functional.py\n+++ b/tests/utils_tests/test_functional.py\n@@ -1,3 +1,5 @@\n+from unittest import mock\n+\n from django.test import SimpleTestCase\n from django.utils.functional import cached_property, lazy\n \n@@ -207,3 +209,12 @@ def test_lazy_repr_bytes(self):\n         original_object = b'J\\xc3\\xbcst a str\\xc3\\xadng'\n         lazy_obj = lazy(lambda: original_object, bytes)\n         self.assertEqual(repr(original_object), repr(lazy_obj()))\n+\n+    def test_lazy_class_preparation_caching(self):\n+        # lazy() should prepare the proxy class only once i.e. the first time\n+        # it's used.\n+        lazified = lazy(lambda: 0, int)\n+        __proxy__ = lazified().__class__\n+        with mock.patch.object(__proxy__, '__prepare_class__') as mocked:\n+            lazified()\n+            mocked.assert_not_called()\n",
  "problem_statement": "lazy() class preparation is not being cached correctly.\nDescription\n\t\nDoing self.__prepared = True changes the instance, but the intention is to change the class variable: â€‹https://github.com/django/django/blob/888fdf182e164fa4b24aa82fa833c90a2b9bee7a/django/utils/functional.py#L82\nThis makes functions like gettext_lazy, format_lazy and reverse_lazy a lot slower than they ought to be.\nRegressed in Django 1.8 (b4e76f30d12bfa8a53cc297c60055c6f4629cc4c).\nUsing this micro-benchmark on Python 3.7:\nimport cProfile\nfrom django.utils.functional import lazy\ndef identity(x): return x\nlazy_identity = lazy(identity, int)\ncProfile.run(\"for i in range(10000): str(lazy_identity(1))\")\nBefore:\n\t\t 910049 function calls in 0.208 seconds\n\tOrdered by: standard name\n\tncalls tottime percall cumtime percall filename:lineno(function)\n\t\t 1\t0.010\t0.010\t0.208\t0.208 <string>:1(<module>)\n\t 10000\t0.001\t0.000\t0.001\t0.000 bench.py:4(identity)\n\t 10000\t0.005\t0.000\t0.010\t0.000 functional.py:105(__str__)\n\t 10000\t0.004\t0.000\t0.188\t0.000 functional.py:159(__wrapper__)\n\t 10000\t0.007\t0.000\t0.185\t0.000 functional.py:76(__init__)\n\t 10000\t0.089\t0.000\t0.178\t0.000 functional.py:83(__prepare_class__)\n\t 10000\t0.004\t0.000\t0.005\t0.000 functional.py:99(__cast)\n\t\t 1\t0.000\t0.000\t0.208\t0.208 {built-in method builtins.exec}\n\t840000\t0.087\t0.000\t0.087\t0.000 {built-in method builtins.hasattr}\n\t\t46\t0.000\t0.000\t0.000\t0.000 {built-in method builtins.setattr}\n\t\t 1\t0.000\t0.000\t0.000\t0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\t 10000\t0.002\t0.000\t0.002\t0.000 {method 'mro' of 'type' objects}\nAfter:\n\t\t 50135 function calls in 0.025 seconds\n\tOrdered by: standard name\n\tncalls tottime percall cumtime percall filename:lineno(function)\n\t\t 1\t0.008\t0.008\t0.025\t0.025 <string>:1(<module>)\n\t 10000\t0.001\t0.000\t0.001\t0.000 bench.py:4(identity)\n\t 10000\t0.005\t0.000\t0.009\t0.000 functional.py:105(__str__)\n\t 10000\t0.003\t0.000\t0.008\t0.000 functional.py:159(__wrapper__)\n\t 10000\t0.005\t0.000\t0.005\t0.000 functional.py:76(__init__)\n\t\t 1\t0.000\t0.000\t0.000\t0.000 functional.py:83(__prepare_class__)\n\t 10000\t0.004\t0.000\t0.005\t0.000 functional.py:99(__cast)\n\t\t 1\t0.000\t0.000\t0.025\t0.025 {built-in method builtins.exec}\n\t\t84\t0.000\t0.000\t0.000\t0.000 {built-in method builtins.hasattr}\n\t\t46\t0.000\t0.000\t0.000\t0.000 {built-in method builtins.setattr}\n\t\t 1\t0.000\t0.000\t0.000\t0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\t\t 1\t0.000\t0.000\t0.000\t0.000 {method 'mro' of 'type' objects}\n",
  "hints_text": "",
  "created_at": "2019-05-22T09:09:50Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_lazy_class_preparation_caching (utils_tests.test_functional.FunctionalTests)\"]",
  "PASS_TO_PASS": "[\"cached_property caches its value and behaves like a property.\", \"test_cached_property_auto_name (utils_tests.test_functional.FunctionalTests)\", \"Disallow this case because the decorated function wouldn't be cached.\", \"test_cached_property_reuse_same_name (utils_tests.test_functional.FunctionalTests)\", \"test_cached_property_set_name_not_called (utils_tests.test_functional.FunctionalTests)\", \"test_lazy (utils_tests.test_functional.FunctionalTests)\", \"lazy also finds base class methods in the proxy object\", \"lazy finds the correct (overridden) method implementation\", \"test_lazy_equality (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_object_to_string (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_repr_bytes (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_repr_int (utils_tests.test_functional.FunctionalTests)\", \"test_lazy_repr_text (utils_tests.test_functional.FunctionalTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.571158",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}