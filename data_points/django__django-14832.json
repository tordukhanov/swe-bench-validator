{
  "repo": "django/django",
  "instance_id": "django__django-14832",
  "base_commit": "e75a3a770e5da8af3405be1e216a6c20cc9bde5a",
  "patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -126,13 +126,29 @@ def floatformat(text, arg=-1):\n     * {{ 6666.6666|floatformat:\"2g\" }} displays \"6,666.67\"\n     * {{ 10000|floatformat:\"g\" }} displays \"10,000\"\n \n+    If arg has the 'u' suffix, force the result to be unlocalized. When the\n+    active locale is pl (Polish):\n+\n+    * {{ 66666.6666|floatformat:\"2\" }} displays \"66666,67\"\n+    * {{ 66666.6666|floatformat:\"2u\" }} displays \"66666.67\"\n+\n     If the input float is infinity or NaN, display the string representation\n     of that value.\n     \"\"\"\n     force_grouping = False\n-    if isinstance(arg, str) and arg.endswith('g'):\n-        force_grouping = True\n-        arg = arg[:-1] or -1\n+    use_l10n = True\n+    if isinstance(arg, str):\n+        last_char = arg[-1]\n+        if arg[-2:] in {'gu', 'ug'}:\n+            force_grouping = True\n+            use_l10n = False\n+            arg = arg[:-2] or -1\n+        elif last_char == 'g':\n+            force_grouping = True\n+            arg = arg[:-1] or -1\n+        elif last_char == 'u':\n+            use_l10n = False\n+            arg = arg[:-1] or -1\n     try:\n         input_val = repr(text)\n         d = Decimal(input_val)\n@@ -152,9 +168,12 @@ def floatformat(text, arg=-1):\n         return input_val\n \n     if not m and p < 0:\n-        return mark_safe(\n-            formats.number_format('%d' % (int(d)), 0, force_grouping=force_grouping),\n-        )\n+        return mark_safe(formats.number_format(\n+            '%d' % (int(d)),\n+            0,\n+            use_l10n=use_l10n,\n+            force_grouping=force_grouping,\n+        ))\n \n     exp = Decimal(1).scaleb(-abs(p))\n     # Set the precision high enough to avoid an exception (#15789).\n@@ -174,9 +193,12 @@ def floatformat(text, arg=-1):\n     if sign and rounded_d:\n         digits.append('-')\n     number = ''.join(reversed(digits))\n-    return mark_safe(\n-        formats.number_format(number, abs(p), force_grouping=force_grouping),\n-    )\n+    return mark_safe(formats.number_format(\n+        number,\n+        abs(p),\n+        use_l10n=use_l10n,\n+        force_grouping=force_grouping,\n+    ))\n \n \n @register.filter(is_safe=True)\n",
  "test_patch": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -523,15 +523,15 @@ def test_l10n_disabled(self):\n             self.assertEqual('99999.999', Template('{{ f }}').render(self.ctxt))\n             self.assertEqual('Des. 31, 2009', Template('{{ d }}').render(self.ctxt))\n             self.assertEqual('Des. 31, 2009, 8:50 p.m.', Template('{{ dt }}').render(self.ctxt))\n-            self.assertEqual('66666.67', Template('{{ n|floatformat:2 }}').render(self.ctxt))\n-            self.assertEqual('100000.0', Template('{{ f|floatformat }}').render(self.ctxt))\n+            self.assertEqual('66666.67', Template('{{ n|floatformat:\"2u\" }}').render(self.ctxt))\n+            self.assertEqual('100000.0', Template('{{ f|floatformat:\"u\" }}').render(self.ctxt))\n             self.assertEqual(\n                 '66666.67',\n-                Template('{{ n|floatformat:\"2g\" }}').render(self.ctxt),\n+                Template('{{ n|floatformat:\"2gu\" }}').render(self.ctxt),\n             )\n             self.assertEqual(\n                 '100000.0',\n-                Template('{{ f|floatformat:\"g\" }}').render(self.ctxt),\n+                Template('{{ f|floatformat:\"ug\" }}').render(self.ctxt),\n             )\n             self.assertEqual('10:15 a.m.', Template('{{ t|time:\"TIME_FORMAT\" }}').render(self.ctxt))\n             self.assertEqual('12/31/2009', Template('{{ d|date:\"SHORT_DATE_FORMAT\" }}').render(self.ctxt))\n@@ -628,12 +628,12 @@ def test_l10n_disabled(self):\n             )\n \n             # We shouldn't change the behavior of the floatformat filter re:\n-            # thousand separator and grouping when USE_L10N is False even\n-            # if the USE_THOUSAND_SEPARATOR, NUMBER_GROUPING and\n-            # THOUSAND_SEPARATOR settings are specified\n+            # thousand separator and grouping when localization is disabled\n+            # even if the USE_THOUSAND_SEPARATOR, NUMBER_GROUPING and\n+            # THOUSAND_SEPARATOR settings are specified.\n             with self.settings(USE_THOUSAND_SEPARATOR=True, NUMBER_GROUPING=1, THOUSAND_SEPARATOR='!'):\n-                self.assertEqual('66666.67', Template('{{ n|floatformat:2 }}').render(self.ctxt))\n-                self.assertEqual('100000.0', Template('{{ f|floatformat }}').render(self.ctxt))\n+                self.assertEqual('66666.67', Template('{{ n|floatformat:\"2u\" }}').render(self.ctxt))\n+                self.assertEqual('100000.0', Template('{{ f|floatformat:\"u\" }}').render(self.ctxt))\n \n     def test_false_like_locale_formats(self):\n         \"\"\"\ndiff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -2,7 +2,6 @@\n \n from django.template.defaultfilters import floatformat\n from django.test import SimpleTestCase\n-from django.test.utils import override_settings\n from django.utils import translation\n from django.utils.safestring import mark_safe\n \n@@ -60,7 +59,6 @@ def test_inputs(self):\n         self.assertEqual(floatformat(1.5e-15, -20), '0.00000000000000150000')\n         self.assertEqual(floatformat(1.00000000000000015, 16), '1.0000000000000002')\n \n-    @override_settings(USE_L10N=True)\n     def test_force_grouping(self):\n         with translation.override('en'):\n             self.assertEqual(floatformat(10000, 'g'), '10,000')\n@@ -73,6 +71,20 @@ def test_force_grouping(self):\n             # Invalid suffix.\n             self.assertEqual(floatformat(10000, 'g2'), '10000')\n \n+    def test_unlocalize(self):\n+        with translation.override('de', deactivate=True):\n+            self.assertEqual(floatformat(66666.666, '2'), '66666,67')\n+            self.assertEqual(floatformat(66666.666, '2u'), '66666.67')\n+            with self.settings(\n+                USE_THOUSAND_SEPARATOR=True,\n+                NUMBER_GROUPING=3,\n+                THOUSAND_SEPARATOR='!',\n+            ):\n+                self.assertEqual(floatformat(66666.666, '2gu'), '66!666.67')\n+                self.assertEqual(floatformat(66666.666, '2ug'), '66!666.67')\n+            # Invalid suffix.\n+            self.assertEqual(floatformat(66666.666, 'u2'), '66666.666')\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), '0.000000')\n         self.assertEqual(floatformat(0, 7), '0.0000000')\n",
  "problem_statement": "Make floatformat template filter independent of USE_L10N and allow forcing unlocalized format.\nDescription\n\t \n\t\t(last modified by Tim Graham)\n\t \nSpecifically, when the filter is used within the {% localize [on|off] %} block with the localization setting opposed to the value of USE_L10N ('on' when USE_L10N = False or 'off' when USE_L10N = True), the localization setting has not effect.\nThis is due to the use of formats.number_format() without its use_l10n parameter, by the numberformat template filter (e.g. ​https://github.com/django/django/blob/c2c85663e2dd06c9ed9c9ec2d02202d6d668d7f0/django/template/defaultfilters.py#L144, ​https://github.com/django/django/blob/c2c85663e2dd06c9ed9c9ec2d02202d6d668d7f0/django/template/defaultfilters.py#L163). The value of the use_l10n parameter shall be taken out of the template rendering context. But I do not see any easy solution to this, as filters do not take context...\n",
  "hints_text": "As long as the behavior doesn't contract existing documentation, perhaps the solution is the document the current behavior.\nReplying to Tim Graham: As long as the behavior doesn't contract existing documentation, perhaps the solution is the document the current behavior. Documenting would be better than nothing, but this behavior goes against the principle of least astonishment. Finding a way to honor the localize directive would be better. Any other filters that are affected by this limitation?\nAll filters are affected. As the reporter noticed, the filters are currently not aware of the rendering context. That's no easy fix.\nReplying to Marc Parizeau: this behavior goes against the principle of least astonishment +1 I consider this as a bug in the implementation of the filter, even though the original title of the ticket was modified by Tim. Why would something inside a {% localize off %} block still keep being localised?.. I actually opened this ticket after having to dig through Django's code and adding debug statements to understand what was happening. Going forward, I see only two possible solutions: either introduce for filters a non-breaking support for context (meaning, filters will be able to take context without breaking existing code), or, deprecate the floatformat filter (and possibly other), replacing it (them) with tags. I personally favour the first option, but I realise it will require a lot of effort.\nIn my 10 years of work with Django, I don't recall another report of this issue, so I doubt that such disruptive changes would be acceptable for what I perceive as a relatively minor issue. You're welcome to make your proposal on the DevelopersMailingList to try to gather a consensus. A custom floatformat template tag may meet your needs, but deprecating the filter seems a bit drastic for the 99% of users who aren't affected by this issue.\nDid someone explore adding support for @register.filter(takes_context=True). If someone can produce some proof-of-concept code, it may have a chance to get accepted.\nClosing as a duplicate of #32873 — which will remove the USE_L10N setting.\nMariusz, I do not see how Claude’s PR resolves the problem discussed in this ticket. The floatformat builtin filter will still return a localised result irrespective of the {% localize off %} tag. This is not yet documented in ​https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#floatformat.\nReplying to Meiyer: Mariusz, I do not see how Claude’s PR resolves the problem discussed in this ticket. The floatformat builtin filter will still return a localised result irrespective of the {% localize off %} tag. This is not yet documented in ​https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#floatformat. True, we can still document that floatformat ignores {% localize on|off %}.",
  "created_at": "2021-09-03T06:26:20Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_force_grouping (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_unlocalize (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"Catalan locale with format i18n disabled translations will be used,\"]",
  "PASS_TO_PASS": "[\"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests)\", \"OSError is raised if the default language is unparseable.\", \"test_round_away_from_one (i18n.tests.UtilsTests)\", \"get_language_info return the first fallback language info if the lang_info\", \"test_localized_language_info (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo)\", \"test_lazy (i18n.tests.TestModels)\", \"test_safestr (i18n.tests.TestModels)\", \"test_i18n_app_dirs_ignore_django_apps (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests)\", \"test_check_for_language (i18n.tests.NonDjangoLanguageTests)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests)\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests)\", \"Untranslated strings for territorial language variants use the\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests)\", \"test_floatformat01 (template_tests.filter_tests.test_floatformat.FloatformatTests)\", \"test_floatformat02 (template_tests.filter_tests.test_floatformat.FloatformatTests)\", \"After setting LANGUAGE, the cache should be cleared and languages\", \"With a non-English LANGUAGE_CODE and if the active language is English\", \"test_get_language_from_path_null (i18n.tests.MiscTests)\", \"test_get_language_from_path_real (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests)\", \"Now test that we parse language preferences stored in a cookie correctly.\", \"Now test that we parse a literal HTTP header correctly.\", \"Testing HTTP header parsing. First, we test that we can parse the\", \"Some languages may have special fallbacks that don't follow the simple\", \"Subsequent language codes should be used when the language code is not\", \"Some browsers (Firefox, IE, etc.) use deprecated language codes. As these\", \"With i18n_patterns(..., prefix_default_language=False), the default\", \"A request for a nonexistent URL shouldn't cause a redirect to\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_unprefixed_language_other_than_accept_language (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests)\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"\\\"loading_app\\\" does not have translations for all languages provided by\", \"test_float_dunder_method (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_infinity (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_inputs (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"#15789\", \"test_negative_zero_values (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_zero_values (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests)\", \"test_language_bidi_null (i18n.tests.TranslationTests)\", \"Format string interpolation should work with *_lazy objects.\", \"test_lazy_pickle (i18n.tests.TranslationTests)\", \"Translations on files with Mac or DOS end of lines will be converted\", \"Normally, French has 2 plurals. As other/locale/fr/LC_MESSAGES/django.po\", \"test_ngettext_lazy (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests)\", \"test_override (i18n.tests.TranslationTests)\", \"test_override_decorator (i18n.tests.TranslationTests)\", \"The language restored is the one used when the function was\", \"test_pgettext (i18n.tests.TranslationTests)\", \"Test plurals with ngettext. French differs from English in that 0 is singular.\", \"test_plural_null (i18n.tests.TranslationTests)\", \"Translating a string requiring no auto-escaping with gettext or pgettext\", \"test_to_language (i18n.tests.TranslationTests)\", \"test_to_locale (i18n.tests.TranslationTests)\", \"The first input format for DATE_INPUT_FORMATS, TIME_INPUT_FORMATS, and\", \"test_all_format_strings (i18n.tests.FormattingTests)\", \"The active locale's formats take precedence over the default settings\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests)\", \"test_get_custom_format (i18n.tests.FormattingTests)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests)\", \"Tests the iter_format_modules function.\", \"Tests the iter_format_modules function always yields format modules in\", \"test_l10n_enabled (i18n.tests.FormattingTests)\", \"Localization of numbers\", \"Test the {% localize %} templatetag and the localize/unlocalize filters.\", \"Tests if form input with 'as_hidden' or 'as_text' is correctly localized. Ticket #18777\", \"Tests if form input is correctly localized\", \"test_localized_input_func (i18n.tests.FormattingTests)\", \"A string representation is returned for unlocalized numbers.\", \"Tests django.utils.formats.sanitize_separators.\", \"test_sanitize_strftime_format (i18n.tests.FormattingTests)\", \"test_sanitize_strftime_format_with_escaped_percent (i18n.tests.FormattingTests)\", \"Check if sublocales fall back to the main locale\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.705099",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}