{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-21617",
  "base_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "patch": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -429,7 +429,7 @@ def _get_clip_cmd(self, gc):\n             key = (path, id(trf))\n             custom_clip_cmd = self._clip_paths.get(key)\n             if custom_clip_cmd is None:\n-                custom_clip_cmd = \"c%x\" % len(self._clip_paths)\n+                custom_clip_cmd = \"c%d\" % len(self._clip_paths)\n                 self._pswriter.write(f\"\"\"\\\n /{custom_clip_cmd} {{\n {self._convert_path(path, trf, simplify=False)}\n@@ -570,7 +570,7 @@ def draw_path_collection(self, gc, master_transform, paths, all_transforms,\n         path_codes = []\n         for i, (path, transform) in enumerate(self._iter_collection_raw_paths(\n                 master_transform, paths, all_transforms)):\n-            name = 'p%x_%x' % (self._path_collection_id, i)\n+            name = 'p%d_%d' % (self._path_collection_id, i)\n             path_bytes = self._convert_path(path, transform, simplify=False)\n             self._pswriter.write(f\"\"\"\\\n /{name} {{\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -1,16 +1,17 @@\n-import io\n+from collections import Counter\n from pathlib import Path\n+import io\n import re\n import tempfile\n \n import pytest\n \n-import matplotlib as mpl\n-import matplotlib.pyplot as plt\n from matplotlib import cbook, patheffects\n-from matplotlib.testing.decorators import check_figures_equal, image_comparison\n from matplotlib.cbook import MatplotlibDeprecationWarning\n-\n+from matplotlib.figure import Figure\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n \n needs_ghostscript = pytest.mark.skipif(\n     \"eps\" not in mpl.testing.compare.converter,\n@@ -244,3 +245,23 @@ def test_linedash():\n     fig.savefig(buf, format=\"ps\")\n \n     assert buf.tell() > 0\n+\n+\n+def test_no_duplicate_definition():\n+\n+    fig = Figure()\n+    axs = fig.subplots(4, 4, subplot_kw=dict(projection=\"polar\"))\n+    for ax in axs.flat:\n+        ax.set(xticks=[], yticks=[])\n+        ax.plot([1, 2])\n+    fig.suptitle(\"hello, world\")\n+\n+    buf = io.StringIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+\n+    wds = [ln.partition(' ')[0] for\n+           ln in buf.readlines()\n+           if ln.startswith('/')]\n+\n+    assert max(Counter(wds).values()) == 1\n",
  "problem_statement": "[Bug]: Text sometimes is missing when figure saved to EPS\n### Bug summary\r\n\r\nI'm using cartopy to render data in polar projection. After an update I noticed that labels and title is not anymore rendered in saved eps file, though it was rendered in Jupyter notebook. I managed to simplify the code and found that matplotlib=3.3.4 does not suffer from the problem, while matplotlib=3.4.3 does.\r\n\r\nThe testing environment was obtained by calls\r\n```\r\nconda create -c conda-forge -n mpl-3.3.4 matplotlib=3.3.4 cartopy=0.18.0 python=3.7\r\nconda create -c conda-forge -n mpl-3.4.3 matplotlib=3.4.3 cartopy=0.18.0 python=3.7\r\n```\r\n\r\nMight be related to #20364\r\n\r\n### Code for reproduction\r\n\r\n```python\r\n#!/usr/bin/env python\r\n# coding: utf-8\r\n\r\nimport matplotlib.pyplot as plt\r\nimport cartopy.crs as ccrs \r\nimport matplotlib.ticker as mticker\r\n\r\ndef test(spacing, name):\r\n    m = ccrs.NorthPolarStereo(central_longitude=0)\r\n    plt.figure(figsize=(13, 13))\r\n    plt.rc('font', size=16)\r\n    ax = plt.axes(projection=m)\r\n    plt.title('>>> do you see me <<<')\r\n    ax.set_extent((-180, 180, 15, 90), crs=ccrs.PlateCarree())\r\n    gl = ax.gridlines(draw_labels=False)\r\n    gl.xlocator = mticker.FixedLocator(range(-180, 180, spacing))\r\n    plt.savefig(name, bbox_inches='tight')\r\n    \r\ntest(40, '/tmp/good.eps')\r\ntest(30, '/tmp/bad.eps')\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nAn eps file with no `>>> do you see me <<<` message. (matplotlib v3.4.3)\r\n\r\n![image](https://user-images.githubusercontent.com/1182947/139561361-6774c7fe-045b-4a53-bb5c-91227ed6c154.png)\r\n\r\n\r\n### Expected outcome\r\n\r\nAn eps file with `>>> do you see me <<<` message. (matplotlib v3.3.4)\r\n\r\n![image](https://user-images.githubusercontent.com/1182947/139561379-69844d05-aade-4e11-96ad-b12b3196cc63.png)\r\n\r\n\r\n### Operating system\r\n\r\nDebian GNU/Linux bookworm, Linux Mint 20.2 Uma\r\n\r\n### Matplotlib Version\r\n\r\n3.4.3\r\n\r\n### Matplotlib Backend\r\n\r\nQt5Agg\r\n\r\n### Python version\r\n\r\nPython 3.7.12\r\n\r\n### Jupyter version\r\n\r\nnot used\r\n\r\n### Other libraries\r\n\r\ncartopy=0.18.0\r\n\r\n### Installation\r\n\r\nconda\r\n\r\n### Conda channel\r\n\r\nconda-forge\n",
  "hints_text": "I can't easily test with cartopy 0.18.0 right now, but at least with 0.20, I cannot repro the issue.\nUnfortunately also reproduces with cartopy 0.20.0 on my machine\nPerhaps try attaching the eps file, so that we can check whether it's a problem on the viewer side?\nThe `mpl_3.4.3_bad.eps` is the only one without text rendered, the others are for reference\r\n\r\n[results.zip](https://github.com/matplotlib/matplotlib/files/7452818/results.zip)\nThanks, at least I can see that your files do fail to render properly on my side too.  Now we need to figure out how to repro the whole thing...\nPlease let me know if I could gather some more debug information, maybe some intermediate representation.\nProbably the most helpful would be a repro without cartopy.\nI think I've found the root cause. The produced eps file has a number of shortcuts like `m` for `moveto`, `l` for `lineto` and (important) `ce` for `closepath eofill`.\r\n\r\nWhen a clip path is defined in eps file it is also given a name so it can be reused later. It looks like\r\n```(postscript)\r\n/c1 {\r\n721.386016 727.92 m\r\n721.386016 7.2 l\r\n7.2 7.2 l\r\n7.2 727.92 l\r\n721.386016 727.92 l\r\n\r\nclip\r\nnewpath\r\n} bind def\r\n```\r\nWell in my case this paths are not reused and the same path is defined again and again with names `c1`, `c2`, ..., `c9`, `ca`, `cb`, ..., and eventually `ce`.\r\nSo in fact the clip command shadows the closepath command and the rest of the document is screwed.\r\n\r\nWell I see two problems here:\r\n1. Obvious name clash that causes the bug\r\n2. Redefinition of a same path again and again\r\n\r\nAlso I've played a bit with the script and noticed that eps output is not stable: that clipping paths are sometimes reused and sometimes are not. Everything else seems to be consistent (except for the header). I wrote a loop to save eps and in 7 cases of 20 the text was missing and it was present in 13 other cases.\nAh, thanks, that's a great investigation!  Here's a repro without cartopy, and where one indeed needs to define many clip paths:\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfig, axs = plt.subplots(4, 4, subplot_kw=dict(projection=\"polar\"))\r\nfor ax in axs.flat:\r\n    ax.set(xticks=[], yticks=[])\r\n    ax.plot([1, 2])\r\nfig.suptitle(\"hello, world\")\r\nfig.savefig(\"/tmp/test.eps\")\r\nplt.show()\r\n```\r\nReplacing (4, 4) by (4, 3) (for example) avoids defining the \"ce\" path and doesn't show the problem.\r\n\r\nI guess the shortest solution is to just not generate colliding clippath names, i.e.\r\n```patch\r\ndiff --git i/lib/matplotlib/backends/backend_ps.py w/lib/matplotlib/backends/backend_ps.py\r\nindex 35c61b08f2..8c88bfa3c7 100644\r\n--- i/lib/matplotlib/backends/backend_ps.py\r\n+++ w/lib/matplotlib/backends/backend_ps.py\r\n@@ -429,7 +429,7 @@ class RendererPS(_backend_pdf_ps.RendererPDFPSBase):\r\n             key = (path, id(trf))\r\n             custom_clip_cmd = self._clip_paths.get(key)\r\n             if custom_clip_cmd is None:\r\n-                custom_clip_cmd = \"c%x\" % len(self._clip_paths)\r\n+                custom_clip_cmd = \"c%d\" % len(self._clip_paths)\r\n                 self._pswriter.write(f\"\"\"\\\r\n /{custom_clip_cmd} {{\r\n {self._convert_path(path, trf, simplify=False)}\r\n@@ -570,7 +570,7 @@ grestore\r\n         path_codes = []\r\n         for i, (path, transform) in enumerate(self._iter_collection_raw_paths(\r\n                 master_transform, paths, all_transforms)):\r\n-            name = 'p%x_%x' % (self._path_collection_id, i)\r\n+            name = 'p%d_%d' % (self._path_collection_id, i)\r\n             path_bytes = self._convert_path(path, transform, simplify=False)\r\n             self._pswriter.write(f\"\"\"\\\r\n /{name} {{\r\n```\r\n(the second change is not needed, but is for consistency).",
  "created_at": "2021-11-12T23:45:40Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_ps.py::test_no_duplicate_definition\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-portrait]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-landscape]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-portrait]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-landscape]\", \"lib/matplotlib/tests/test_backend_ps.py::test_patheffects\", \"lib/matplotlib/tests/test_backend_ps.py::test_transparency[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_bbox\", \"lib/matplotlib/tests/test_backend_ps.py::test_text_clip[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_d_glyph\", \"lib/matplotlib/tests/test_backend_ps.py::test_fonttype[3]\", \"lib/matplotlib/tests/test_backend_ps.py::test_fonttype[42]\", \"lib/matplotlib/tests/test_backend_ps.py::test_linedash\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.794684",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}