{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7122",
  "base_commit": "be68496440508b760ba1f988bcc63d1d09ace206",
  "patch": "diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/_pytest/mark/expression.py\n@@ -0,0 +1,173 @@\n+r\"\"\"\n+Evaluate match expressions, as used by `-k` and `-m`.\n+\n+The grammar is:\n+\n+expression: expr? EOF\n+expr:       and_expr ('or' and_expr)*\n+and_expr:   not_expr ('and' not_expr)*\n+not_expr:   'not' not_expr | '(' expr ')' | ident\n+ident:      (\\w|:|\\+|-|\\.|\\[|\\])+\n+\n+The semantics are:\n+\n+- Empty expression evaluates to False.\n+- ident evaluates to True of False according to a provided matcher function.\n+- or/and/not evaluate according to the usual boolean semantics.\n+\"\"\"\n+import enum\n+import re\n+from typing import Callable\n+from typing import Iterator\n+from typing import Optional\n+from typing import Sequence\n+\n+import attr\n+\n+from _pytest.compat import TYPE_CHECKING\n+\n+if TYPE_CHECKING:\n+    from typing import NoReturn\n+\n+\n+__all__ = [\n+    \"evaluate\",\n+    \"ParseError\",\n+]\n+\n+\n+class TokenType(enum.Enum):\n+    LPAREN = \"left parenthesis\"\n+    RPAREN = \"right parenthesis\"\n+    OR = \"or\"\n+    AND = \"and\"\n+    NOT = \"not\"\n+    IDENT = \"identifier\"\n+    EOF = \"end of input\"\n+\n+\n+@attr.s(frozen=True, slots=True)\n+class Token:\n+    type = attr.ib(type=TokenType)\n+    value = attr.ib(type=str)\n+    pos = attr.ib(type=int)\n+\n+\n+class ParseError(Exception):\n+    \"\"\"The expression contains invalid syntax.\n+\n+    :param column: The column in the line where the error occurred (1-based).\n+    :param message: A description of the error.\n+    \"\"\"\n+\n+    def __init__(self, column: int, message: str) -> None:\n+        self.column = column\n+        self.message = message\n+\n+    def __str__(self) -> str:\n+        return \"at column {}: {}\".format(self.column, self.message)\n+\n+\n+class Scanner:\n+    __slots__ = (\"tokens\", \"current\")\n+\n+    def __init__(self, input: str) -> None:\n+        self.tokens = self.lex(input)\n+        self.current = next(self.tokens)\n+\n+    def lex(self, input: str) -> Iterator[Token]:\n+        pos = 0\n+        while pos < len(input):\n+            if input[pos] in (\" \", \"\\t\"):\n+                pos += 1\n+            elif input[pos] == \"(\":\n+                yield Token(TokenType.LPAREN, \"(\", pos)\n+                pos += 1\n+            elif input[pos] == \")\":\n+                yield Token(TokenType.RPAREN, \")\", pos)\n+                pos += 1\n+            else:\n+                match = re.match(r\"(:?\\w|:|\\+|-|\\.|\\[|\\])+\", input[pos:])\n+                if match:\n+                    value = match.group(0)\n+                    if value == \"or\":\n+                        yield Token(TokenType.OR, value, pos)\n+                    elif value == \"and\":\n+                        yield Token(TokenType.AND, value, pos)\n+                    elif value == \"not\":\n+                        yield Token(TokenType.NOT, value, pos)\n+                    else:\n+                        yield Token(TokenType.IDENT, value, pos)\n+                    pos += len(value)\n+                else:\n+                    raise ParseError(\n+                        pos + 1, 'unexpected character \"{}\"'.format(input[pos]),\n+                    )\n+        yield Token(TokenType.EOF, \"\", pos)\n+\n+    def accept(self, type: TokenType, *, reject: bool = False) -> Optional[Token]:\n+        if self.current.type is type:\n+            token = self.current\n+            if token.type is not TokenType.EOF:\n+                self.current = next(self.tokens)\n+            return token\n+        if reject:\n+            self.reject((type,))\n+        return None\n+\n+    def reject(self, expected: Sequence[TokenType]) -> \"NoReturn\":\n+        raise ParseError(\n+            self.current.pos + 1,\n+            \"expected {}; got {}\".format(\n+                \" OR \".join(type.value for type in expected), self.current.type.value,\n+            ),\n+        )\n+\n+\n+def expression(s: Scanner, matcher: Callable[[str], bool]) -> bool:\n+    if s.accept(TokenType.EOF):\n+        return False\n+    ret = expr(s, matcher)\n+    s.accept(TokenType.EOF, reject=True)\n+    return ret\n+\n+\n+def expr(s: Scanner, matcher: Callable[[str], bool]) -> bool:\n+    ret = and_expr(s, matcher)\n+    while s.accept(TokenType.OR):\n+        rhs = and_expr(s, matcher)\n+        ret = ret or rhs\n+    return ret\n+\n+\n+def and_expr(s: Scanner, matcher: Callable[[str], bool]) -> bool:\n+    ret = not_expr(s, matcher)\n+    while s.accept(TokenType.AND):\n+        rhs = not_expr(s, matcher)\n+        ret = ret and rhs\n+    return ret\n+\n+\n+def not_expr(s: Scanner, matcher: Callable[[str], bool]) -> bool:\n+    if s.accept(TokenType.NOT):\n+        return not not_expr(s, matcher)\n+    if s.accept(TokenType.LPAREN):\n+        ret = expr(s, matcher)\n+        s.accept(TokenType.RPAREN, reject=True)\n+        return ret\n+    ident = s.accept(TokenType.IDENT)\n+    if ident:\n+        return matcher(ident.value)\n+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))\n+\n+\n+def evaluate(input: str, matcher: Callable[[str], bool]) -> bool:\n+    \"\"\"Evaluate a match expression as used by -k and -m.\n+\n+    :param input: The input expression - one line.\n+    :param matcher: Given an identifier, should return whether it matches or not.\n+                    Should be prepared to handle arbitrary strings as input.\n+\n+    Returns whether the entire expression matches or not.\n+    \"\"\"\n+    return expression(Scanner(input), matcher)\ndiff --git a/src/_pytest/mark/legacy.py b/src/_pytest/mark/legacy.py\n--- a/src/_pytest/mark/legacy.py\n+++ b/src/_pytest/mark/legacy.py\n@@ -2,44 +2,46 @@\n this is a place where we put datastructures used by legacy apis\n we hope to remove\n \"\"\"\n-import keyword\n from typing import Set\n \n import attr\n \n from _pytest.compat import TYPE_CHECKING\n from _pytest.config import UsageError\n+from _pytest.mark.expression import evaluate\n+from _pytest.mark.expression import ParseError\n \n if TYPE_CHECKING:\n     from _pytest.nodes import Item  # noqa: F401 (used in type string)\n \n \n @attr.s\n-class MarkMapping:\n-    \"\"\"Provides a local mapping for markers where item access\n-    resolves to True if the marker is present. \"\"\"\n+class MarkMatcher:\n+    \"\"\"A matcher for markers which are present.\"\"\"\n \n     own_mark_names = attr.ib()\n \n     @classmethod\n-    def from_item(cls, item):\n+    def from_item(cls, item) -> \"MarkMatcher\":\n         mark_names = {mark.name for mark in item.iter_markers()}\n         return cls(mark_names)\n \n-    def __getitem__(self, name):\n+    def __call__(self, name: str) -> bool:\n         return name in self.own_mark_names\n \n \n @attr.s\n-class KeywordMapping:\n-    \"\"\"Provides a local mapping for keywords.\n-    Given a list of names, map any substring of one of these names to True.\n+class KeywordMatcher:\n+    \"\"\"A matcher for keywords.\n+\n+    Given a list of names, matches any substring of one of these names. The\n+    string inclusion check is case-insensitive.\n     \"\"\"\n \n     _names = attr.ib(type=Set[str])\n \n     @classmethod\n-    def from_item(cls, item: \"Item\") -> \"KeywordMapping\":\n+    def from_item(cls, item: \"Item\") -> \"KeywordMatcher\":\n         mapped_names = set()\n \n         # Add the names of the current item and any parent items\n@@ -62,12 +64,7 @@ def from_item(cls, item: \"Item\") -> \"KeywordMapping\":\n \n         return cls(mapped_names)\n \n-    def __getitem__(self, subname: str) -> bool:\n-        \"\"\"Return whether subname is included within stored names.\n-\n-        The string inclusion check is case-insensitive.\n-\n-        \"\"\"\n+    def __call__(self, subname: str) -> bool:\n         subname = subname.lower()\n         names = (name.lower() for name in self._names)\n \n@@ -77,18 +74,17 @@ def __getitem__(self, subname: str) -> bool:\n         return False\n \n \n-python_keywords_allowed_list = [\"or\", \"and\", \"not\"]\n-\n-\n-def matchmark(colitem, markexpr):\n+def matchmark(colitem, markexpr: str) -> bool:\n     \"\"\"Tries to match on any marker names, attached to the given colitem.\"\"\"\n     try:\n-        return eval(markexpr, {}, MarkMapping.from_item(colitem))\n-    except Exception:\n-        raise UsageError(\"Wrong expression passed to '-m': {}\".format(markexpr))\n+        return evaluate(markexpr, MarkMatcher.from_item(colitem))\n+    except ParseError as e:\n+        raise UsageError(\n+            \"Wrong expression passed to '-m': {}: {}\".format(markexpr, e)\n+        ) from None\n \n \n-def matchkeyword(colitem, keywordexpr):\n+def matchkeyword(colitem, keywordexpr: str) -> bool:\n     \"\"\"Tries to match given keyword expression to given collector item.\n \n     Will match on the name of colitem, including the names of its parents.\n@@ -97,20 +93,9 @@ def matchkeyword(colitem, keywordexpr):\n     Additionally, matches on names in the 'extra_keyword_matches' set of\n     any item, as well as names directly assigned to test functions.\n     \"\"\"\n-    mapping = KeywordMapping.from_item(colitem)\n-    if \" \" not in keywordexpr:\n-        # special case to allow for simple \"-k pass\" and \"-k 1.3\"\n-        return mapping[keywordexpr]\n-    elif keywordexpr.startswith(\"not \") and \" \" not in keywordexpr[4:]:\n-        return not mapping[keywordexpr[4:]]\n-    for kwd in keywordexpr.split():\n-        if keyword.iskeyword(kwd) and kwd not in python_keywords_allowed_list:\n-            raise UsageError(\n-                \"Python keyword '{}' not accepted in expressions passed to '-k'\".format(\n-                    kwd\n-                )\n-            )\n     try:\n-        return eval(keywordexpr, {}, mapping)\n-    except Exception:\n-        raise UsageError(\"Wrong expression passed to '-k': {}\".format(keywordexpr))\n+        return evaluate(keywordexpr, KeywordMatcher.from_item(colitem))\n+    except ParseError as e:\n+        raise UsageError(\n+            \"Wrong expression passed to '-k': {}: {}\".format(keywordexpr, e)\n+        ) from None\n",
  "test_patch": "diff --git a/testing/test_mark.py b/testing/test_mark.py\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -200,6 +200,8 @@ def test_hello():\n     \"spec\",\n     [\n         (\"xyz\", (\"test_one\",)),\n+        (\"(((  xyz))  )\", (\"test_one\",)),\n+        (\"not not xyz\", (\"test_one\",)),\n         (\"xyz and xyz2\", ()),\n         (\"xyz2\", (\"test_two\",)),\n         (\"xyz or xyz2\", (\"test_one\", \"test_two\")),\n@@ -258,9 +260,11 @@ def test_nointer():\n     \"spec\",\n     [\n         (\"interface\", (\"test_interface\",)),\n-        (\"not interface\", (\"test_nointer\", \"test_pass\")),\n+        (\"not interface\", (\"test_nointer\", \"test_pass\", \"test_1\", \"test_2\")),\n         (\"pass\", (\"test_pass\",)),\n-        (\"not pass\", (\"test_interface\", \"test_nointer\")),\n+        (\"not pass\", (\"test_interface\", \"test_nointer\", \"test_1\", \"test_2\")),\n+        (\"not not not (pass)\", (\"test_interface\", \"test_nointer\", \"test_1\", \"test_2\")),\n+        (\"1 or 2\", (\"test_1\", \"test_2\")),\n     ],\n )\n def test_keyword_option_custom(spec, testdir):\n@@ -272,6 +276,10 @@ def test_nointer():\n             pass\n         def test_pass():\n             pass\n+        def test_1():\n+            pass\n+        def test_2():\n+            pass\n     \"\"\"\n     )\n     opt, passed_result = spec\n@@ -293,7 +301,7 @@ def test_keyword_option_considers_mark(testdir):\n     \"spec\",\n     [\n         (\"None\", (\"test_func[None]\",)),\n-        (\"1.3\", (\"test_func[1.3]\",)),\n+        (\"[1.3]\", (\"test_func[1.3]\",)),\n         (\"2-3\", (\"test_func[2-3]\",)),\n     ],\n )\n@@ -333,10 +341,23 @@ def test_func(arg):\n     \"spec\",\n     [\n         (\n-            \"foo or import\",\n-            \"ERROR: Python keyword 'import' not accepted in expressions passed to '-k'\",\n+            \"foo or\",\n+            \"at column 7: expected not OR left parenthesis OR identifier; got end of input\",\n+        ),\n+        (\n+            \"foo or or\",\n+            \"at column 8: expected not OR left parenthesis OR identifier; got or\",\n+        ),\n+        (\"(foo\", \"at column 5: expected right parenthesis; got end of input\",),\n+        (\"foo bar\", \"at column 5: expected end of input; got identifier\",),\n+        (\n+            \"or or\",\n+            \"at column 1: expected not OR left parenthesis OR identifier; got or\",\n+        ),\n+        (\n+            \"not or\",\n+            \"at column 5: expected not OR left parenthesis OR identifier; got or\",\n         ),\n-        (\"foo or\", \"ERROR: Wrong expression passed to '-k': foo or\"),\n     ],\n )\n def test_keyword_option_wrong_arguments(spec, testdir, capsys):\n@@ -798,10 +819,12 @@ def test_one():\n         passed, skipped, failed = reprec.countoutcomes()\n         assert passed + skipped + failed == 0\n \n-    def test_no_magic_values(self, testdir):\n+    @pytest.mark.parametrize(\n+        \"keyword\", [\"__\", \"+\", \"..\"],\n+    )\n+    def test_no_magic_values(self, testdir, keyword: str) -> None:\n         \"\"\"Make sure the tests do not match on magic values,\n-        no double underscored values, like '__dict__',\n-        and no instance values, like '()'.\n+        no double underscored values, like '__dict__' and '+'.\n         \"\"\"\n         p = testdir.makepyfile(\n             \"\"\"\n@@ -809,16 +832,12 @@ def test_one(): assert 1\n         \"\"\"\n         )\n \n-        def assert_test_is_not_selected(keyword):\n-            reprec = testdir.inline_run(\"-k\", keyword, p)\n-            passed, skipped, failed = reprec.countoutcomes()\n-            dlist = reprec.getcalls(\"pytest_deselected\")\n-            assert passed + skipped + failed == 0\n-            deselected_tests = dlist[0].items\n-            assert len(deselected_tests) == 1\n-\n-        assert_test_is_not_selected(\"__\")\n-        assert_test_is_not_selected(\"()\")\n+        reprec = testdir.inline_run(\"-k\", keyword, p)\n+        passed, skipped, failed = reprec.countoutcomes()\n+        dlist = reprec.getcalls(\"pytest_deselected\")\n+        assert passed + skipped + failed == 0\n+        deselected_tests = dlist[0].items\n+        assert len(deselected_tests) == 1\n \n \n class TestMarkDecorator:\n@@ -1023,7 +1042,7 @@ def test_foo():\n             pass\n         \"\"\"\n     )\n-    expected = \"ERROR: Wrong expression passed to '-m': {}\".format(expr)\n+    expected = \"ERROR: Wrong expression passed to '-m': {}: *\".format(expr)\n     result = testdir.runpytest(foo, \"-m\", expr)\n     result.stderr.fnmatch_lines([expected])\n     assert result.ret == ExitCode.USAGE_ERROR\ndiff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nnew file mode 100644\n--- /dev/null\n+++ b/testing/test_mark_expression.py\n@@ -0,0 +1,162 @@\n+import pytest\n+from _pytest.mark.expression import evaluate\n+from _pytest.mark.expression import ParseError\n+\n+\n+def test_empty_is_false() -> None:\n+    assert not evaluate(\"\", lambda ident: False)\n+    assert not evaluate(\"\", lambda ident: True)\n+    assert not evaluate(\"   \", lambda ident: False)\n+    assert not evaluate(\"\\t\", lambda ident: False)\n+\n+\n+@pytest.mark.parametrize(\n+    (\"expr\", \"expected\"),\n+    (\n+        (\"true\", True),\n+        (\"true\", True),\n+        (\"false\", False),\n+        (\"not true\", False),\n+        (\"not false\", True),\n+        (\"not not true\", True),\n+        (\"not not false\", False),\n+        (\"true and true\", True),\n+        (\"true and false\", False),\n+        (\"false and true\", False),\n+        (\"true and true and true\", True),\n+        (\"true and true and false\", False),\n+        (\"true and true and not true\", False),\n+        (\"false or false\", False),\n+        (\"false or true\", True),\n+        (\"true or true\", True),\n+        (\"true or true or false\", True),\n+        (\"true and true or false\", True),\n+        (\"not true or true\", True),\n+        (\"(not true) or true\", True),\n+        (\"not (true or true)\", False),\n+        (\"true and true or false and false\", True),\n+        (\"true and (true or false) and false\", False),\n+        (\"true and (true or (not (not false))) and false\", False),\n+    ),\n+)\n+def test_basic(expr: str, expected: bool) -> None:\n+    matcher = {\"true\": True, \"false\": False}.__getitem__\n+    assert evaluate(expr, matcher) is expected\n+\n+\n+@pytest.mark.parametrize(\n+    (\"expr\", \"expected\"),\n+    (\n+        (\"               true           \", True),\n+        (\"               ((((((true))))))           \", True),\n+        (\"     (         ((\\t  (((true)))))  \\t   \\t)\", True),\n+        (\"(     true     and   (((false))))\", False),\n+        (\"not not not not true\", True),\n+        (\"not not not not not true\", False),\n+    ),\n+)\n+def test_syntax_oddeties(expr: str, expected: bool) -> None:\n+    matcher = {\"true\": True, \"false\": False}.__getitem__\n+    assert evaluate(expr, matcher) is expected\n+\n+\n+@pytest.mark.parametrize(\n+    (\"expr\", \"column\", \"message\"),\n+    (\n+        (\"(\", 2, \"expected not OR left parenthesis OR identifier; got end of input\"),\n+        (\" (\", 3, \"expected not OR left parenthesis OR identifier; got end of input\",),\n+        (\n+            \")\",\n+            1,\n+            \"expected not OR left parenthesis OR identifier; got right parenthesis\",\n+        ),\n+        (\n+            \") \",\n+            1,\n+            \"expected not OR left parenthesis OR identifier; got right parenthesis\",\n+        ),\n+        (\"not\", 4, \"expected not OR left parenthesis OR identifier; got end of input\",),\n+        (\n+            \"not not\",\n+            8,\n+            \"expected not OR left parenthesis OR identifier; got end of input\",\n+        ),\n+        (\n+            \"(not)\",\n+            5,\n+            \"expected not OR left parenthesis OR identifier; got right parenthesis\",\n+        ),\n+        (\"and\", 1, \"expected not OR left parenthesis OR identifier; got and\"),\n+        (\n+            \"ident and\",\n+            10,\n+            \"expected not OR left parenthesis OR identifier; got end of input\",\n+        ),\n+        (\"ident and or\", 11, \"expected not OR left parenthesis OR identifier; got or\",),\n+        (\"ident ident\", 7, \"expected end of input; got identifier\"),\n+    ),\n+)\n+def test_syntax_errors(expr: str, column: int, message: str) -> None:\n+    with pytest.raises(ParseError) as excinfo:\n+        evaluate(expr, lambda ident: True)\n+    assert excinfo.value.column == column\n+    assert excinfo.value.message == message\n+\n+\n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \".\",\n+        \"...\",\n+        \":::\",\n+        \"a:::c\",\n+        \"a+-b\",\n+        \"אבגד\",\n+        \"aaאבגדcc\",\n+        \"a[bcd]\",\n+        \"1234\",\n+        \"1234abcd\",\n+        \"1234and\",\n+        \"notandor\",\n+        \"not_and_or\",\n+        \"not[and]or\",\n+        \"1234+5678\",\n+        \"123.232\",\n+        \"True\",\n+        \"False\",\n+        \"if\",\n+        \"else\",\n+        \"while\",\n+    ),\n+)\n+def test_valid_idents(ident: str) -> None:\n+    assert evaluate(ident, {ident: True}.__getitem__)\n+\n+\n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"/\",\n+        \"\\\\\",\n+        \"^\",\n+        \"*\",\n+        \"=\",\n+        \"&\",\n+        \"%\",\n+        \"$\",\n+        \"#\",\n+        \"@\",\n+        \"!\",\n+        \"~\",\n+        \"{\",\n+        \"}\",\n+        '\"',\n+        \"'\",\n+        \"|\",\n+        \";\",\n+        \"←\",\n+    ),\n+)\n+def test_invalid_idents(ident: str) -> None:\n+    with pytest.raises(ParseError):\n+        evaluate(ident, lambda ident: True)\n",
  "problem_statement": "-k mishandles numbers\nUsing `pytest 5.4.1`.\r\n\r\nIt seems that pytest cannot handle keyword selection with numbers, like `-k \"1 or 2\"`.\r\n\r\nConsidering the following tests:\r\n\r\n```\r\ndef test_1():\r\n    pass\r\n\r\ndef test_2():\r\n    pass\r\n\r\ndef test_3():\r\n    pass\r\n```\r\n\r\nSelecting with `-k 2` works:\r\n\r\n```\r\n(venv) Victors-MacBook-Pro:keyword_number_bug fikrettiryaki$ pytest --collect-only -k 2\r\n========================================================================================================== test session starts ===========================================================================================================\r\nplatform darwin -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\r\nrootdir: /Users/fikrettiryaki/PycharmProjects/keyword_number_bug\r\ncollected 3 items / 2 deselected / 1 selected                                                                                                                                                                                            \r\n<Module test_one.py>\r\n  <Function test_2>\r\n```\r\n\r\nBut selecting with `-k \"1 or 2\"` doesn't, as I get all tests:\r\n\r\n```\r\n(venv) Victors-MacBook-Pro:keyword_number_bug fikrettiryaki$ pytest --collect-only -k \"1 or 2\"\r\n========================================================================================================== test session starts ===========================================================================================================\r\nplatform darwin -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\r\nrootdir: /Users/fikrettiryaki/PycharmProjects/keyword_number_bug\r\ncollected 3 items                                                                                                                                                                                                                        \r\n<Module test_one.py>\r\n  <Function test_1>\r\n  <Function test_2>\r\n  <Function test_3>\r\n```\r\n\r\nIf I make it a string though, using `-k \"_1 or _2\"`, then it works again:\r\n\r\n```\r\n(venv) Victors-MacBook-Pro:keyword_number_bug fikrettiryaki$ pytest --collect-only -k \"_1 or _2\"\r\n========================================================================================================== test session starts ===========================================================================================================\r\nplatform darwin -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\r\nrootdir: /Users/fikrettiryaki/PycharmProjects/keyword_number_bug\r\ncollected 3 items / 1 deselected / 2 selected                                                                                                                                                                                            \r\n<Module test_one.py>\r\n  <Function test_1>\r\n  <Function test_2>\r\n```\r\n\r\nI see there are some notes about selecting based on keywords here but it was not clear if it applied to this case:\r\nhttp://doc.pytest.org/en/latest/example/markers.html#using-k-expr-to-select-tests-based-on-their-name\r\n\r\nSo, is this a bug? Thanks!\n",
  "hints_text": "IMO this is a bug.\r\n\r\nThis happens before the `-k` expression is evaluated using `eval`, `1` and `2` are evaluated as numbers, and `1 or 2` is just evaluated to True which means all tests are included. On the other hand `_1` is an identifier which only evaluates to True if matches the test name.\r\n\r\nIf you are interested on working on it, IMO it would be good to move away from `eval` in favor of parsing ourselves. See here for discussion: https://github.com/pytest-dev/pytest/issues/6822#issuecomment-596075955\n@bluetech indeed! Thanks for the pointer, it seems to be really the same problem as the other issue.",
  "created_at": "2020-04-25T13:16:25Z",
  "version": "5.4",
  "FAIL_TO_PASS": "[\"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[py.test-mark]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[py.test-param]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[pytest-mark]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[pytest-param]\", \"testing/test_mark.py::TestMark::test_pytest_mark_notcallable\", \"testing/test_mark.py::TestMark::test_mark_with_param\", \"testing/test_mark.py::TestMark::test_pytest_mark_name_starts_with_underscore\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs0-rhs0-True]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs1-rhs1-False]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs2-bar-False]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[foo-rhs3-False]\", \"testing/test_mark.py::TestMarkDecorator::test_aliases\", \"testing/test_mark.py::test_addmarker_order\", \"testing/test_mark.py::test_pytest_param_id_requires_string\", \"testing/test_mark.py::test_pytest_param_id_allows_none_or_string[None]\", \"testing/test_mark.py::test_pytest_param_id_allows_none_or_string[hello\", \"testing/test_mark_expression.py::test_empty_is_false\", \"testing/test_mark_expression.py::test_basic[true-True0]\", \"testing/test_mark_expression.py::test_basic[true-True1]\", \"testing/test_mark_expression.py::test_basic[false-False]\", \"testing/test_mark_expression.py::test_basic[not\", \"testing/test_mark_expression.py::test_basic[true\", \"testing/test_mark_expression.py::test_basic[false\", \"testing/test_mark_expression.py::test_basic[(not\", \"testing/test_mark_expression.py::test_syntax_oddeties[\", \"testing/test_mark_expression.py::test_syntax_oddeties[(\", \"testing/test_mark_expression.py::test_syntax_oddeties[not\", \"testing/test_mark_expression.py::test_syntax_errors[(-2-expected\", \"testing/test_mark_expression.py::test_syntax_errors[\", \"testing/test_mark_expression.py::test_syntax_errors[)-1-expected\", \"testing/test_mark_expression.py::test_syntax_errors[)\", \"testing/test_mark_expression.py::test_syntax_errors[not-4-expected\", \"testing/test_mark_expression.py::test_syntax_errors[not\", \"testing/test_mark_expression.py::test_syntax_errors[(not)-5-expected\", \"testing/test_mark_expression.py::test_syntax_errors[and-1-expected\", \"testing/test_mark_expression.py::test_syntax_errors[ident\", \"testing/test_mark_expression.py::test_valid_idents[.]\", \"testing/test_mark_expression.py::test_valid_idents[...]\", \"testing/test_mark_expression.py::test_valid_idents[:::]\", \"testing/test_mark_expression.py::test_valid_idents[a:::c]\", \"testing/test_mark_expression.py::test_valid_idents[a+-b]\", \"testing/test_mark_expression.py::test_valid_idents[\\\\u05d0\\\\u05d1\\\\u05d2\\\\u05d3]\", \"testing/test_mark_expression.py::test_valid_idents[aa\\\\u05d0\\\\u05d1\\\\u05d2\\\\u05d3cc]\", \"testing/test_mark_expression.py::test_valid_idents[a[bcd]]\", \"testing/test_mark_expression.py::test_valid_idents[1234]\", \"testing/test_mark_expression.py::test_valid_idents[1234abcd]\", \"testing/test_mark_expression.py::test_valid_idents[1234and]\", \"testing/test_mark_expression.py::test_valid_idents[notandor]\", \"testing/test_mark_expression.py::test_valid_idents[not_and_or]\", \"testing/test_mark_expression.py::test_valid_idents[not[and]or]\", \"testing/test_mark_expression.py::test_valid_idents[1234+5678]\", \"testing/test_mark_expression.py::test_valid_idents[123.232]\", \"testing/test_mark_expression.py::test_valid_idents[True]\", \"testing/test_mark_expression.py::test_valid_idents[False]\", \"testing/test_mark_expression.py::test_valid_idents[if]\", \"testing/test_mark_expression.py::test_valid_idents[else]\", \"testing/test_mark_expression.py::test_valid_idents[while]\", \"testing/test_mark_expression.py::test_invalid_idents[/]\", \"testing/test_mark_expression.py::test_invalid_idents[\\\\\\\\]\", \"testing/test_mark_expression.py::test_invalid_idents[^]\", \"testing/test_mark_expression.py::test_invalid_idents[*]\", \"testing/test_mark_expression.py::test_invalid_idents[=]\", \"testing/test_mark_expression.py::test_invalid_idents[&]\", \"testing/test_mark_expression.py::test_invalid_idents[%]\", \"testing/test_mark_expression.py::test_invalid_idents[$]\", \"testing/test_mark_expression.py::test_invalid_idents[#]\", \"testing/test_mark_expression.py::test_invalid_idents[@]\", \"testing/test_mark_expression.py::test_invalid_idents[!]\", \"testing/test_mark_expression.py::test_invalid_idents[~]\", \"testing/test_mark_expression.py::test_invalid_idents[{]\", \"testing/test_mark_expression.py::test_invalid_idents[}]\", \"testing/test_mark_expression.py::test_invalid_idents[\\\"]\", \"testing/test_mark_expression.py::test_invalid_idents[']\", \"testing/test_mark_expression.py::test_invalid_idents[|]\", \"testing/test_mark_expression.py::test_invalid_idents[;]\", \"testing/test_mark_expression.py::test_invalid_idents[\\\\u2190]\", \"testing/test_mark.py::test_marked_class_run_twice\", \"testing/test_mark.py::test_ini_markers\", \"testing/test_mark.py::test_markers_option\", \"testing/test_mark.py::test_ini_markers_whitespace\", \"testing/test_mark.py::test_marker_without_description\", \"testing/test_mark.py::test_markers_option_with_plugin_in_current_dir\", \"testing/test_mark.py::test_mark_on_pseudo_function\", \"testing/test_mark.py::test_strict_prohibits_unregistered_markers[--strict-markers]\", \"testing/test_mark.py::test_strict_prohibits_unregistered_markers[--strict]\", \"testing/test_mark.py::test_mark_option[spec0]\", \"testing/test_mark.py::test_mark_option[spec1]\", \"testing/test_mark.py::test_mark_option[spec2]\", \"testing/test_mark.py::test_mark_option[spec3]\", \"testing/test_mark.py::test_mark_option[spec4]\", \"testing/test_mark.py::test_mark_option[spec5]\", \"testing/test_mark.py::test_mark_option_custom[spec0]\", \"testing/test_mark.py::test_mark_option_custom[spec1]\", \"testing/test_mark.py::test_keyword_option_custom[spec0]\", \"testing/test_mark.py::test_keyword_option_custom[spec1]\", \"testing/test_mark.py::test_keyword_option_custom[spec2]\", \"testing/test_mark.py::test_keyword_option_custom[spec3]\", \"testing/test_mark.py::test_keyword_option_custom[spec4]\", \"testing/test_mark.py::test_keyword_option_custom[spec5]\", \"testing/test_mark.py::test_keyword_option_considers_mark\", \"testing/test_mark.py::test_keyword_option_parametrize[spec0]\", \"testing/test_mark.py::test_keyword_option_parametrize[spec1]\", \"testing/test_mark.py::test_keyword_option_parametrize[spec2]\", \"testing/test_mark.py::test_parametrize_with_module\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[spec0]\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[spec1]\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[spec2]\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[spec3]\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[spec4]\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[spec5]\", \"testing/test_mark.py::test_parametrized_collected_from_command_line\", \"testing/test_mark.py::test_parametrized_collect_with_wrong_args\", \"testing/test_mark.py::test_parametrized_with_kwargs\", \"testing/test_mark.py::test_parametrize_iterator\", \"testing/test_mark.py::TestFunctional::test_merging_markers_deep\", \"testing/test_mark.py::TestFunctional::test_mark_decorator_subclass_does_not_propagate_to_base\", \"testing/test_mark.py::TestFunctional::test_mark_should_not_pass_to_siebling_class\", \"testing/test_mark.py::TestFunctional::test_mark_decorator_baseclasses_merged\", \"testing/test_mark.py::TestFunctional::test_mark_closest\", \"testing/test_mark.py::TestFunctional::test_mark_with_wrong_marker\", \"testing/test_mark.py::TestFunctional::test_mark_dynamically_in_funcarg\", \"testing/test_mark.py::TestFunctional::test_no_marker_match_on_unmarked_names\", \"testing/test_mark.py::TestFunctional::test_keywords_at_node_level\", \"testing/test_mark.py::TestFunctional::test_keyword_added_for_session\", \"testing/test_mark.py::TestFunctional::test_mark_from_parameters\", \"testing/test_mark.py::TestKeywordSelection::test_select_simple\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[xxx]\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[xxx\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[TestClass]\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[TestClass\", \"testing/test_mark.py::TestKeywordSelection::test_select_starton\", \"testing/test_mark.py::TestKeywordSelection::test_keyword_extra\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values[__]\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values[+]\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values[..]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[None]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[skip]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[xfail]\", \"testing/test_mark.py::test_parameterset_for_fail_at_collect\", \"testing/test_mark.py::test_parameterset_for_parametrize_bad_markname\", \"testing/test_mark.py::test_mark_expressions_no_smear\", \"testing/test_mark.py::test_markers_from_parametrize\", \"testing/test_mark.py::test_marker_expr_eval_failure_handling[NOT\", \"testing/test_mark.py::test_marker_expr_eval_failure_handling[bogus/]\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "678c1a0745f1cf175c442c719906a1f13e496910",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.933175",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}