{
  "repo": "django/django",
  "instance_id": "django__django-11417",
  "base_commit": "3dca8738cbbbb5674f795169e5ea25e2002f2d71",
  "patch": "diff --git a/django/core/mail/message.py b/django/core/mail/message.py\n--- a/django/core/mail/message.py\n+++ b/django/core/mail/message.py\n@@ -2,15 +2,15 @@\n from email import (\n     charset as Charset, encoders as Encoders, generator, message_from_string,\n )\n-from email.errors import InvalidHeaderDefect, NonASCIILocalPartDefect\n+from email.errors import HeaderParseError\n from email.header import Header\n-from email.headerregistry import Address\n+from email.headerregistry import Address, parser\n from email.message import Message\n from email.mime.base import MIMEBase\n from email.mime.message import MIMEMessage\n from email.mime.multipart import MIMEMultipart\n from email.mime.text import MIMEText\n-from email.utils import formatdate, getaddresses, make_msgid, parseaddr\n+from email.utils import formatdate, getaddresses, make_msgid\n from io import BytesIO, StringIO\n from pathlib import Path\n \n@@ -71,56 +71,44 @@ def forbid_multi_line_headers(name, val, encoding):\n     return name, val\n \n \n-def split_addr(addr, encoding):\n-    \"\"\"\n-    Split the address into local part and domain and encode them.\n-\n-    When non-ascii characters are present in the local part, it must be\n-    MIME-word encoded. The domain name must be idna-encoded if it contains\n-    non-ascii characters.\n-    \"\"\"\n-    if '@' in addr:\n-        localpart, domain = addr.split('@', 1)\n-        # Try to get the simplest encoding - ascii if possible so that\n-        # to@example.com doesn't become =?utf-8?q?to?=@example.com. This\n-        # makes unit testing a bit easier and more readable.\n-        try:\n-            localpart.encode('ascii')\n-        except UnicodeEncodeError:\n-            localpart = Header(localpart, encoding).encode()\n-        domain = domain.encode('idna').decode('ascii')\n-    else:\n-        localpart = Header(addr, encoding).encode()\n-        domain = ''\n-    return (localpart, domain)\n-\n-\n def sanitize_address(addr, encoding):\n     \"\"\"\n     Format a pair of (name, address) or an email address string.\n     \"\"\"\n+    address = None\n     if not isinstance(addr, tuple):\n-        addr = parseaddr(addr)\n-    nm, addr = addr\n-    localpart, domain = None, None\n+        addr = force_str(addr)\n+        try:\n+            token, rest = parser.get_mailbox(addr)\n+        except (HeaderParseError, ValueError, IndexError):\n+            raise ValueError('Invalid address \"%s\"' % addr)\n+        else:\n+            if rest:\n+                # The entire email address must be parsed.\n+                raise ValueError(\n+                    'Invalid adddress; only %s could be parsed from \"%s\"'\n+                    % (token, addr)\n+                )\n+            nm = token.display_name or ''\n+            localpart = token.local_part\n+            domain = token.domain or ''\n+    else:\n+        nm, address = addr\n+        localpart, domain = address.rsplit('@', 1)\n+\n     nm = Header(nm, encoding).encode()\n+    # Avoid UTF-8 encode, if it's possible.\n     try:\n-        addr.encode('ascii')\n-    except UnicodeEncodeError:  # IDN or non-ascii in the local part\n-        localpart, domain = split_addr(addr, encoding)\n-\n-    # An `email.headerregistry.Address` object is used since\n-    # email.utils.formataddr() naively encodes the name as ascii (see #25986).\n-    if localpart and domain:\n-        address = Address(nm, username=localpart, domain=domain)\n-        return str(address)\n-\n+        localpart.encode('ascii')\n+    except UnicodeEncodeError:\n+        localpart = Header(localpart, encoding).encode()\n     try:\n-        address = Address(nm, addr_spec=addr)\n-    except (InvalidHeaderDefect, NonASCIILocalPartDefect):\n-        localpart, domain = split_addr(addr, encoding)\n-        address = Address(nm, username=localpart, domain=domain)\n-    return str(address)\n+        domain.encode('ascii')\n+    except UnicodeEncodeError:\n+        domain = domain.encode('idna').decode('ascii')\n+\n+    parsed_address = Address(nm, username=localpart, domain=domain)\n+    return str(parsed_address)\n \n \n class MIMEMixin:\n",
  "test_patch": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -748,10 +748,30 @@ def test_sanitize_address(self):\n                 'utf-8',\n                 '=?utf-8?q?to=40other=2Ecom?= <to@example.com>',\n             ),\n+            (\n+                ('To Example', 'to@other.com@example.com'),\n+                'utf-8',\n+                '=?utf-8?q?To_Example?= <\"to@other.com\"@example.com>',\n+            ),\n         ):\n             with self.subTest(email_address=email_address, encoding=encoding):\n                 self.assertEqual(sanitize_address(email_address, encoding), expected_result)\n \n+    def test_sanitize_address_invalid(self):\n+        for email_address in (\n+            # Invalid address with two @ signs.\n+            'to@other.com@example.com',\n+            # Invalid address without the quotes.\n+            'to@other.com <to@example.com>',\n+            # Other invalid addresses.\n+            '@',\n+            'to@',\n+            '@example.com',\n+        ):\n+            with self.subTest(email_address=email_address):\n+                with self.assertRaises(ValueError):\n+                    sanitize_address(email_address, encoding='utf-8')\n+\n \n @requires_tz_support\n class MailTimeZoneTests(SimpleTestCase):\n",
  "problem_statement": "Update mail backend to use modern standard library parsing approach.\nDescription\n\t\n django.core.mail.message.sanitize_address uses email.utils.parseaddr from the standard lib. On Python 3, email.headerregistry.parser.get_mailbox() does the same, and is less error-prone.\n",
  "hints_text": "",
  "created_at": "2019-05-26T17:32:11Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"Email addresses are properly sanitized.\", \"test_sanitize_address_invalid (mail.tests.MailTests)\", \"test_space_continuation (mail.tests.MailTests)\"]",
  "PASS_TO_PASS": "[\"test_7bit (mail.tests.PythonGlobalState)\", \"test_8bit_latin (mail.tests.PythonGlobalState)\", \"test_8bit_non_latin (mail.tests.PythonGlobalState)\", \"test_utf8 (mail.tests.PythonGlobalState)\", \"test_date_header_localtime (mail.tests.MailTimeZoneTests)\", \"test_date_header_utc (mail.tests.MailTimeZoneTests)\", \"test_close_connection (mail.tests.LocmemBackendTests)\", \"test_empty_admins (mail.tests.LocmemBackendTests)\", \"Test html_message argument to mail_admins\", \"Test html_message argument to mail_managers\", \"Test html_message argument to send_mail\", \"test_idn_send (mail.tests.LocmemBackendTests)\", \"test_lazy_addresses (mail.tests.LocmemBackendTests)\", \"test_locmem_shared_messages (mail.tests.LocmemBackendTests)\", \"test_manager_and_admin_mail_prefix (mail.tests.LocmemBackendTests)\", \"test_message_cc_header (mail.tests.LocmemBackendTests)\", \"test_plaintext_send_mail (mail.tests.LocmemBackendTests)\", \"test_recipient_without_domain (mail.tests.LocmemBackendTests)\", \"test_send (mail.tests.LocmemBackendTests)\", \"test_send_long_lines (mail.tests.LocmemBackendTests)\", \"test_send_many (mail.tests.LocmemBackendTests)\", \"test_send_unicode (mail.tests.LocmemBackendTests)\", \"test_send_verbose_name (mail.tests.LocmemBackendTests)\", \"test_use_as_contextmanager (mail.tests.LocmemBackendTests)\", \"test_validate_multiline_headers (mail.tests.LocmemBackendTests)\", \"test_close_connection (mail.tests.FileBackendTests)\", \"test_empty_admins (mail.tests.FileBackendTests)\", \"Make sure opening a connection creates a new file\", \"test_idn_send (mail.tests.FileBackendTests)\", \"test_lazy_addresses (mail.tests.FileBackendTests)\", \"test_manager_and_admin_mail_prefix (mail.tests.FileBackendTests)\", \"test_message_cc_header (mail.tests.FileBackendTests)\", \"test_plaintext_send_mail (mail.tests.FileBackendTests)\", \"test_recipient_without_domain (mail.tests.FileBackendTests)\", \"test_send (mail.tests.FileBackendTests)\", \"test_send_long_lines (mail.tests.FileBackendTests)\", \"test_send_many (mail.tests.FileBackendTests)\", \"test_send_unicode (mail.tests.FileBackendTests)\", \"test_send_verbose_name (mail.tests.FileBackendTests)\", \"test_use_as_contextmanager (mail.tests.FileBackendTests)\", \"test_close_connection (mail.tests.ConsoleBackendTests)\", \"test_console_stream_kwarg (mail.tests.ConsoleBackendTests)\", \"test_empty_admins (mail.tests.ConsoleBackendTests)\", \"test_idn_send (mail.tests.ConsoleBackendTests)\", \"test_lazy_addresses (mail.tests.ConsoleBackendTests)\", \"test_manager_and_admin_mail_prefix (mail.tests.ConsoleBackendTests)\", \"test_message_cc_header (mail.tests.ConsoleBackendTests)\", \"test_plaintext_send_mail (mail.tests.ConsoleBackendTests)\", \"test_recipient_without_domain (mail.tests.ConsoleBackendTests)\", \"test_send (mail.tests.ConsoleBackendTests)\", \"test_send_long_lines (mail.tests.ConsoleBackendTests)\", \"test_send_many (mail.tests.ConsoleBackendTests)\", \"test_send_unicode (mail.tests.ConsoleBackendTests)\", \"test_send_verbose_name (mail.tests.ConsoleBackendTests)\", \"test_use_as_contextmanager (mail.tests.ConsoleBackendTests)\", \"test_arbitrary_keyword (mail.tests.MailTests)\", \"test_ascii (mail.tests.MailTests)\", \"test_attach_file (mail.tests.MailTests)\", \"test_attach_non_utf8_text_as_bytes (mail.tests.MailTests)\", \"test_attach_text_as_bytes (mail.tests.MailTests)\", \"test_attach_utf8_text_as_bytes (mail.tests.MailTests)\", \"Regression test for #9367\", \"test_attachments_MIMEText (mail.tests.MailTests)\", \"test_attachments_two_tuple (mail.tests.MailTests)\", \"Test backend argument of mail.get_connection()\", \"Regression test for #7722\", \"test_cc_headers (mail.tests.MailTests)\", \"test_cc_in_headers_only (mail.tests.MailTests)\", \"Test connection argument to send_mail(), et. al.\", \"Test custom backend defined in this suite.\", \"A UTF-8 charset with a custom body encoding is respected.\", \"test_dont_base64_encode (mail.tests.MailTests)\", \"test_dont_base64_encode_message_rfc822 (mail.tests.MailTests)\", \"test_dont_mangle_from_in_body (mail.tests.MailTests)\", \"test_dummy_backend (mail.tests.MailTests)\", \"test_encoding (mail.tests.MailTests)\", \"test_from_header (mail.tests.MailTests)\", \"test_header_injection (mail.tests.MailTests)\", \"test_header_omitted_for_no_to_recipients (mail.tests.MailTests)\", \"test_message_header_overrides (mail.tests.MailTests)\", \"test_multiple_message_call (mail.tests.MailTests)\", \"test_multiple_recipients (mail.tests.MailTests)\", \"Regression test for #14964\", \"test_none_body (mail.tests.MailTests)\", \"test_recipients_as_string (mail.tests.MailTests)\", \"test_recipients_as_tuple (mail.tests.MailTests)\", \"test_recipients_with_empty_strings (mail.tests.MailTests)\", \"test_reply_to (mail.tests.MailTests)\", \"test_reply_to_header (mail.tests.MailTests)\", \"test_reply_to_in_headers_only (mail.tests.MailTests)\", \"test_safe_mime_multipart (mail.tests.MailTests)\", \"test_safe_mime_multipart_with_attachments (mail.tests.MailTests)\", \"test_to_header (mail.tests.MailTests)\", \"test_to_in_headers_only (mail.tests.MailTests)\", \"test_unicode_address_header (mail.tests.MailTests)\", \"test_unicode_headers (mail.tests.MailTests)\", \"test_fail_silently_on_connection_error (mail.tests.SMTPBackendStoppedServerTests)\", \"test_server_stopped (mail.tests.SMTPBackendStoppedServerTests)\", \"test_auth_attempted (mail.tests.SMTPBackendTests)\", \"test_close_connection (mail.tests.SMTPBackendTests)\", \"The timeout parameter can be customized.\", \"The connection's timeout value is None by default.\", \"test_email_authentication_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_authentication_use_settings (mail.tests.SMTPBackendTests)\", \"test_email_disabled_authentication (mail.tests.SMTPBackendTests)\", \"#23063 -- RFC-compliant messages are sent over SMTP.\", \"test_email_ssl_attempts_ssl_connection (mail.tests.SMTPBackendTests)\", \"test_email_ssl_certfile_default_disabled (mail.tests.SMTPBackendTests)\", \"test_email_ssl_certfile_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_certfile_use_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_default_disabled (mail.tests.SMTPBackendTests)\", \"test_email_ssl_keyfile_default_disabled (mail.tests.SMTPBackendTests)\", \"test_email_ssl_keyfile_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_keyfile_use_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_ssl_use_settings (mail.tests.SMTPBackendTests)\", \"test_email_timeout_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_tls_attempts_starttls (mail.tests.SMTPBackendTests)\", \"test_email_tls_default_disabled (mail.tests.SMTPBackendTests)\", \"test_email_tls_override_settings (mail.tests.SMTPBackendTests)\", \"test_email_tls_use_settings (mail.tests.SMTPBackendTests)\", \"test_empty_admins (mail.tests.SMTPBackendTests)\", \"test_idn_send (mail.tests.SMTPBackendTests)\", \"test_lazy_addresses (mail.tests.SMTPBackendTests)\", \"test_manager_and_admin_mail_prefix (mail.tests.SMTPBackendTests)\", \"test_message_cc_header (mail.tests.SMTPBackendTests)\", \"test_plaintext_send_mail (mail.tests.SMTPBackendTests)\", \"test_recipient_without_domain (mail.tests.SMTPBackendTests)\", \"test_reopen_connection (mail.tests.SMTPBackendTests)\", \"test_send (mail.tests.SMTPBackendTests)\", \"test_send_long_lines (mail.tests.SMTPBackendTests)\", \"test_send_many (mail.tests.SMTPBackendTests)\", \"test_send_messages_after_open_failed (mail.tests.SMTPBackendTests)\", \"test_send_messages_empty_list (mail.tests.SMTPBackendTests)\", \"A message isn't sent if it doesn't have any recipients.\", \"test_send_unicode (mail.tests.SMTPBackendTests)\", \"test_send_verbose_name (mail.tests.SMTPBackendTests)\", \"test_server_login (mail.tests.SMTPBackendTests)\", \"test_server_open (mail.tests.SMTPBackendTests)\", \"test_ssl_tls_mutually_exclusive (mail.tests.SMTPBackendTests)\", \"test_use_as_contextmanager (mail.tests.SMTPBackendTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.571895",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}