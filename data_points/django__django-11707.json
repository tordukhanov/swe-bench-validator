{
  "repo": "django/django",
  "instance_id": "django__django-11707",
  "base_commit": "03dbdfd9bbbbd0b0172aad648c6bbe3f39541137",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1019,6 +1019,11 @@ def __init__(self, queryset, output_field=None, **extra):\n         self.extra = extra\n         super().__init__(output_field)\n \n+    def __getstate__(self):\n+        state = super().__getstate__()\n+        state.pop('_constructor_args', None)\n+        return state\n+\n     def get_source_expressions(self):\n         return [self.query]\n \n",
  "test_patch": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -172,6 +172,41 @@ def test_pickle_prefetch_related_with_m2m_and_objects_deletion(self):\n         m2ms = pickle.loads(pickle.dumps(m2ms))\n         self.assertSequenceEqual(m2ms, [m2m])\n \n+    def test_pickle_exists_queryset_still_usable(self):\n+        group = Group.objects.create(name='group')\n+        Event.objects.create(title='event', group=group)\n+        groups = Group.objects.annotate(\n+            has_event=models.Exists(\n+                Event.objects.filter(group_id=models.OuterRef('id')),\n+            ),\n+        )\n+        groups2 = pickle.loads(pickle.dumps(groups))\n+        self.assertSequenceEqual(groups2.filter(has_event=True), [group])\n+\n+    def test_pickle_exists_queryset_not_evaluated(self):\n+        group = Group.objects.create(name='group')\n+        Event.objects.create(title='event', group=group)\n+        groups = Group.objects.annotate(\n+            has_event=models.Exists(\n+                Event.objects.filter(group_id=models.OuterRef('id')),\n+            ),\n+        )\n+        list(groups)  # evaluate QuerySet.\n+        with self.assertNumQueries(0):\n+            self.assert_pickles(groups)\n+\n+    def test_pickle_subquery_queryset_not_evaluated(self):\n+        group = Group.objects.create(name='group')\n+        Event.objects.create(title='event', group=group)\n+        groups = Group.objects.annotate(\n+            event_title=models.Subquery(\n+                Event.objects.filter(group_id=models.OuterRef('id')).values('title'),\n+            ),\n+        )\n+        list(groups)  # evaluate QuerySet.\n+        with self.assertNumQueries(0):\n+            self.assert_pickles(groups)\n+\n     def test_annotation_with_callable_default(self):\n         # Happening.when has a callable default of datetime.datetime.now.\n         qs = Happening.objects.annotate(latest_time=models.Max('when'))\n",
  "problem_statement": "Pickling a QuerySet evaluates the querysets given to Subquery in annotate.\nDescription\n\t\nI wrote a test case for tests/queryset_pickle/tests.py modeled after the test from bug #27499 which is very similar.\n\tdef test_pickle_subquery_queryset_not_evaluated(self):\n\t\t\"\"\"\n\t\tVerifies that querysets passed into Subquery expressions\n\t\tare not evaluated when pickled\n\t\t\"\"\"\n\t\tgroups = Group.objects.annotate(\n\t\t\thas_event=models.Exists(Event.objects.filter(group_id=models.OuterRef('id')))\n\t\t)\n\t\twith self.assertNumQueries(0):\n\t\t\tpickle.loads(pickle.dumps(groups.query))\nThe Subquery class (which is the base for Exists) only stores the underlying query object and throws the QuerySet away (as of this ​commit, although I don't think it worked before that). So in theory it shouldn't be pickling the QuerySet.\nHowever, the QuerySet is still stored on the instance within the _constructor_args attribute added by the @deconstructible decorator on the BaseExpression base class. So when the inner query object gets pickled, so does the QuerySet, which attempts to evaluate it. In this case, it gets the error \"ValueError: This queryset contains a reference to an outer query and may only be used in a subquery.\" since the inner queryset is being evaluated independently when called from pickle: it calls QuerySet.__getstate__().\nI'm not sure what the best solution is here. I made a patch that adds the following override to __getstate__ to the SubQuery class, which fixes the problem and passes all other Django tests on my machine. I'll submit a PR shortly, but welcome any better approaches since I'm not sure what else that may effect.\nclass Subquery(Expression):\n\t...\n\tdef __getstate__(self):\n\t\tobj_dict = super().__getstate__()\n\t\tobj_dict.pop('_constructor_args', None)\n\t\treturn obj_dict\n",
  "hints_text": "PR: ​https://github.com/django/django/pull/11707",
  "created_at": "2019-08-23T21:38:34Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_pickle_exists_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_exists_queryset_still_usable (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_subquery_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\"]",
  "PASS_TO_PASS": "[\"test_in_lookup_query_evaluation (queryset_pickle.tests.InLookupTests)\", \"test_in_lookup_queryset_evaluation (queryset_pickle.tests.InLookupTests)\", \"test_annotation_with_callable_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_datetime_callable_default_all (queryset_pickle.tests.PickleabilityTestCase)\", \"test_datetime_callable_default_filter (queryset_pickle.tests.PickleabilityTestCase)\", \"test_doesnotexist_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_doesnotexist_exception (queryset_pickle.tests.PickleabilityTestCase)\", \"test_filter_reverse_fk (queryset_pickle.tests.PickleabilityTestCase)\", \"test_forward_relatedobjectdoesnotexist_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_manager_pickle (queryset_pickle.tests.PickleabilityTestCase)\", \"test_missing_django_version_unpickling (queryset_pickle.tests.PickleabilityTestCase)\", \"test_model_pickle (queryset_pickle.tests.PickleabilityTestCase)\", \"test_model_pickle_dynamic (queryset_pickle.tests.PickleabilityTestCase)\", \"test_model_pickle_m2m (queryset_pickle.tests.PickleabilityTestCase)\", \"test_multipleobjectsreturned_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_queryset_still_usable (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_queryset_usable_outside_of_prefetch (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_related_idempotence (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_related_with_m2m_and_objects_deletion (queryset_pickle.tests.PickleabilityTestCase)\", \"test_related_field (queryset_pickle.tests.PickleabilityTestCase)\", \"test_reverse_one_to_one_relatedobjectdoesnotexist_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_specialized_queryset (queryset_pickle.tests.PickleabilityTestCase)\", \"test_standalone_method_as_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_staticmethod_as_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_string_as_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_unsupported_unpickle (queryset_pickle.tests.PickleabilityTestCase)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.581566",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}