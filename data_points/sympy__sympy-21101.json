{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-21101",
  "base_commit": "2346054bb4888ef7eec2f6dad6c3dd52bf1fe927",
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -115,7 +115,7 @@\n \n _between_two_numbers_p = (\n     re.compile(r'[0-9][} ]*$'),  # search\n-    re.compile(r'[{ ]*[-+0-9]'),  # match\n+    re.compile(r'[0-9]'),  # match\n )\n \n \n@@ -529,7 +529,7 @@ def convert_args(args):\n                         term_tex = r\"\\left(%s\\right)\" % term_tex\n \n                     if _between_two_numbers_p[0].search(last_term_tex) and \\\n-                            _between_two_numbers_p[1].match(term_tex):\n+                            _between_two_numbers_p[1].match(str(term)):\n                         # between two numbers\n                         _tex += numbersep\n                     elif _tex:\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -87,15 +87,24 @@ def test_latex_basic():\n     assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n     assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n \n+    assert latex(x**S.Half**5) == r\"\\sqrt[32]{x}\"\n+    assert latex(Mul(S.Half, x**2, -5, evaluate=False)) == r\"\\frac{1}{2} x^{2} \\left(-5\\right)\"\n+    assert latex(Mul(S.Half, x**2, 5, evaluate=False)) == r\"\\frac{1}{2} x^{2} \\cdot 5\"\n+    assert latex(Mul(-5, -5, evaluate=False)) == r\"\\left(-5\\right) \\left(-5\\right)\"\n+    assert latex(Mul(5, -5, evaluate=False)) == r\"5 \\left(-5\\right)\"\n+    assert latex(Mul(S.Half, -5, S.Half, evaluate=False)) == r\"\\frac{1}{2} \\left(-5\\right) \\frac{1}{2}\"\n+    assert latex(Mul(5, I, 5, evaluate=False)) == r\"5 i 5\"\n+    assert latex(Mul(5, I, -5, evaluate=False)) == r\"5 i \\left(-5\\right)\"\n+\n     assert latex(Mul(0, 1, evaluate=False)) == r'0 \\cdot 1'\n     assert latex(Mul(1, 0, evaluate=False)) == r'1 \\cdot 0'\n     assert latex(Mul(1, 1, evaluate=False)) == r'1 \\cdot 1'\n     assert latex(Mul(-1, 1, evaluate=False)) == r'\\left(-1\\right) 1'\n     assert latex(Mul(1, 1, 1, evaluate=False)) == r'1 \\cdot 1 \\cdot 1'\n     assert latex(Mul(1, 2, evaluate=False)) == r'1 \\cdot 2'\n-    assert latex(Mul(1, S.Half, evaluate=False)) == r'1 \\frac{1}{2}'\n+    assert latex(Mul(1, S.Half, evaluate=False)) == r'1 \\cdot \\frac{1}{2}'\n     assert latex(Mul(1, 1, S.Half, evaluate=False)) == \\\n-        r'1 \\cdot 1 \\frac{1}{2}'\n+        r'1 \\cdot 1 \\cdot \\frac{1}{2}'\n     assert latex(Mul(1, 1, 2, 3, x, evaluate=False)) == \\\n         r'1 \\cdot 1 \\cdot 2 \\cdot 3 x'\n     assert latex(Mul(1, -1, evaluate=False)) == r'1 \\left(-1\\right)'\n@@ -104,7 +113,7 @@ def test_latex_basic():\n     assert latex(Mul(4, 3, 2, 1+z, 0, y, x, evaluate=False)) == \\\n         r'4 \\cdot 3 \\cdot 2 \\left(z + 1\\right) 0 y x'\n     assert latex(Mul(Rational(2, 3), Rational(5, 7), evaluate=False)) == \\\n-        r'\\frac{2}{3} \\frac{5}{7}'\n+        r'\\frac{2}{3} \\cdot \\frac{5}{7}'\n \n     assert latex(1/x) == r\"\\frac{1}{x}\"\n     assert latex(1/x, fold_short_frac=True) == r\"1 / x\"\n",
  "problem_statement": "Incorrect latex with unevaluated Mul\n`latex(Mul(6, S.Half, evaluate=False))` gives `6 1/2`, so there is no `numbersep`.\n",
  "hints_text": "Hello, I am trying to get myself familiar with the code base and I would like to take a look at this issue. Could you elaborate a little more on what is expected output and the problem?\n@iam-abbas , the correct output should be `6 \\cdot 1/2`.\nThe correct output should be: \r\n```ruby\r\n>>> latex(Mul(6, S.Half, evaluate=False))\r\n'6 \\\\cdot  \\\\frac{1}{2}'\r\n```\r\n\r\nThis is an easy fix @iam-abbas , you probably need to make changes here:\r\nhttps://github.com/sympy/sympy/blob/2346054bb4888ef7eec2f6dad6c3dd52bf1fe927/sympy/printing/latex.py#L521\nYes, the problem is here: `if _between_two_numbers_p[0].search(last_term_tex) and _between_two_numbers_p[1].match(term_tex):`\r\n\r\nDon't understand why regex is used instead of testing whether it is a number.",
  "created_at": "2021-03-16T11:44:48Z",
  "version": "1.8",
  "FAIL_TO_PASS": "[\"test_latex_basic\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_productset\", \"test_set_operators_parenthesis\", \"test_latex_Complexes\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_mathieu\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_fancyset_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_8470\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13559\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_KroneckerProduct_printing\", \"test_Series_printing\", \"test_TransferFunction_printing\", \"test_Parallel_printing\", \"test_Feedback_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_AppliedPermutation\", \"test_PermutationMatrix\", \"test_imaginary_unit\", \"test_text_re_im\", \"test_latex_diffgeom\", \"test_unit_printing\", \"test_issue_17092\", \"test_latex_decimal_separator\", \"test_Str\", \"test_latex_escape\", \"test_emptyPrinter\", \"test_global_settings\", \"test_pickleable\"]",
  "environment_setup_commit": "3ac1464b8840d5f8b618a654f9fbf09c452fe969",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.141114",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}