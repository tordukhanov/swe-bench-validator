{
  "repo": "django/django",
  "instance_id": "django__django-13786",
  "base_commit": "bb64b99b78a579cb2f6178011a4cf9366e634438",
  "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,11 +137,15 @@ def reduce(self, operation, app_label):\n                 ),\n             ]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            options = {**self.options, **operation.options}\n+            for key in operation.ALTER_OPTION_KEYS:\n+                if key not in operation.options:\n+                    options.pop(key, None)\n             return [\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n",
  "test_patch": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,42 @@ def test_create_alter_model_options(self):\n             ]\n         )\n \n+    def test_create_model_and_remove_model_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [migrations.CreateModel('MyModel', fields=[])],\n+        )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'verbose_name_plural': 'My Model plural',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n",
  "problem_statement": "squashmigrations does not unset model options when optimizing CreateModel and AlterModelOptions\nDescription\n\t\nWhen an operation resembling AlterModelOptions(name=\"test_model\", options={}) is squashed into the corresponding CreateModel operation, model options are not cleared on the resulting new CreateModel operation object.\nCreateModel.reduce() sets the new options as options={**self.options, **operation.options} in this case (django/db/migrations/operations/models.py line 144 on commit 991dce4f), with no logic to remove options not found in operation.options as is found in AlterModelOptions.state_forwards().\nI believe this issue still exists on the master branch based on my reading of the code, but I've only tested against 2.2.\n",
  "hints_text": "Makes sense, I guess we should take AlterModelOptions.ALTER_OPTION_KEYS in consideration here like AlterModelOptions.state_forwards does â€‹https://github.com/django/django/blob/991dce4fc5b656e04af08a595181bd576f2bd857/django/db/migrations/operations/models.py#L675-L677",
  "created_at": "2020-12-17T21:10:10Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_create_model_and_remove_model_options (migrations.test_optimizer.OptimizerTests)\"]",
  "PASS_TO_PASS": "[\"test_add_field_alter_field (migrations.test_optimizer.OptimizerTests)\", \"test_add_field_delete_field (migrations.test_optimizer.OptimizerTests)\", \"test_add_field_rename_field (migrations.test_optimizer.OptimizerTests)\", \"test_alter_alter_index_model (migrations.test_optimizer.OptimizerTests)\", \"test_alter_alter_owrt_model (migrations.test_optimizer.OptimizerTests)\", \"test_alter_alter_table_model (migrations.test_optimizer.OptimizerTests)\", \"test_alter_alter_unique_model (migrations.test_optimizer.OptimizerTests)\", \"test_alter_field_delete_field (migrations.test_optimizer.OptimizerTests)\", \"test_alter_field_rename_field (migrations.test_optimizer.OptimizerTests)\", \"test_create_alter_index_delete_model (migrations.test_optimizer.OptimizerTests)\", \"test_create_alter_index_field (migrations.test_optimizer.OptimizerTests)\", \"test_create_alter_model_options (migrations.test_optimizer.OptimizerTests)\", \"test_create_alter_owrt_delete_model (migrations.test_optimizer.OptimizerTests)\", \"test_create_alter_owrt_field (migrations.test_optimizer.OptimizerTests)\", \"test_create_alter_unique_delete_model (migrations.test_optimizer.OptimizerTests)\", \"test_create_alter_unique_field (migrations.test_optimizer.OptimizerTests)\", \"test_create_delete_model (migrations.test_optimizer.OptimizerTests)\", \"test_create_model_add_field (migrations.test_optimizer.OptimizerTests)\", \"test_create_model_add_field_not_through_m2m_through (migrations.test_optimizer.OptimizerTests)\", \"test_create_model_alter_field (migrations.test_optimizer.OptimizerTests)\", \"test_create_model_no_reordering_for_unrelated_fk (migrations.test_optimizer.OptimizerTests)\", \"test_create_model_no_reordering_of_inherited_model (migrations.test_optimizer.OptimizerTests)\", \"test_create_model_remove_field (migrations.test_optimizer.OptimizerTests)\", \"test_create_model_rename_field (migrations.test_optimizer.OptimizerTests)\", \"test_create_model_reordering (migrations.test_optimizer.OptimizerTests)\", \"test_create_model_reordering_circular_fk (migrations.test_optimizer.OptimizerTests)\", \"test_create_rename_model (migrations.test_optimizer.OptimizerTests)\", \"test_none_app_label (migrations.test_optimizer.OptimizerTests)\", \"test_optimize_elidable_operation (migrations.test_optimizer.OptimizerTests)\", \"test_optimize_through_create (migrations.test_optimizer.OptimizerTests)\", \"test_optimize_through_fields (migrations.test_optimizer.OptimizerTests)\", \"test_rename_model_self (migrations.test_optimizer.OptimizerTests)\", \"test_single (migrations.test_optimizer.OptimizerTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.669452",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}