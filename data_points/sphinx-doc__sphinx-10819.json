{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10819",
  "base_commit": "276f430b57957771f23355a6a1eb10a55899a677",
  "patch": "diff --git a/sphinx/search/__init__.py b/sphinx/search/__init__.py\n--- a/sphinx/search/__init__.py\n+++ b/sphinx/search/__init__.py\n@@ -14,6 +14,7 @@\n from sphinx import addnodes, package_dir\n from sphinx.deprecation import RemovedInSphinx70Warning\n from sphinx.environment import BuildEnvironment\n+from sphinx.util import split_into\n \n \n class SearchLanguage:\n@@ -242,6 +243,7 @@ def __init__(self, env: BuildEnvironment, lang: str, options: Dict, scoring: str\n         # stemmed words in titles -> set(docname)\n         self._title_mapping: Dict[str, Set[str]] = {}\n         self._all_titles: Dict[str, List[Tuple[str, str]]] = {}  # docname -> all titles\n+        self._index_entries: Dict[str, List[Tuple[str, str, str]]] = {}  # docname -> index entry\n         self._stem_cache: Dict[str, str] = {}       # word -> stemmed word\n         self._objtypes: Dict[Tuple[str, str], int] = {}     # objtype -> index\n         # objtype index -> (domain, type, objname (localized))\n@@ -380,10 +382,15 @@ def freeze(self) -> Dict[str, Any]:\n             for title, titleid in titlelist:\n                 alltitles.setdefault(title, []).append((fn2index[docname],  titleid))\n \n+        index_entries: Dict[str, List[Tuple[int, str]]] = {}\n+        for docname, entries in self._index_entries.items():\n+            for entry, entry_id, main_entry in entries:\n+                index_entries.setdefault(entry.lower(), []).append((fn2index[docname],  entry_id))\n+\n         return dict(docnames=docnames, filenames=filenames, titles=titles, terms=terms,\n                     objects=objects, objtypes=objtypes, objnames=objnames,\n                     titleterms=title_terms, envversion=self.env.version,\n-                    alltitles=alltitles)\n+                    alltitles=alltitles, indexentries=index_entries)\n \n     def label(self) -> str:\n         return \"%s (code: %s)\" % (self.lang.language_name, self.lang.lang)\n@@ -441,6 +448,38 @@ def stem(word: str) -> str:\n             if _filter(stemmed_word) and not already_indexed:\n                 self._mapping.setdefault(stemmed_word, set()).add(docname)\n \n+        # find explicit entries within index directives\n+        _index_entries: Set[Tuple[str, str, str]] = set()\n+        for node in doctree.findall(addnodes.index):\n+            for entry_type, value, tid, main, *index_key in node['entries']:\n+                tid = tid or ''\n+                try:\n+                    if entry_type == 'single':\n+                        try:\n+                            entry, subentry = split_into(2, 'single', value)\n+                        except ValueError:\n+                            entry, = split_into(1, 'single', value)\n+                            subentry = ''\n+                        _index_entries.add((entry, tid, main))\n+                        if subentry:\n+                            _index_entries.add((subentry, tid, main))\n+                    elif entry_type == 'pair':\n+                        first, second = split_into(2, 'pair', value)\n+                        _index_entries.add((first, tid, main))\n+                        _index_entries.add((second, tid, main))\n+                    elif entry_type == 'triple':\n+                        first, second, third = split_into(3, 'triple', value)\n+                        _index_entries.add((first, tid, main))\n+                        _index_entries.add((second, tid, main))\n+                        _index_entries.add((third, tid, main))\n+                    elif entry_type in {'see', 'seealso'}:\n+                        first, second = split_into(2, 'see', value)\n+                        _index_entries.add((first, tid, main))\n+                except ValueError:\n+                    pass\n+\n+        self._index_entries[docname] = sorted(_index_entries)\n+\n     def context_for_searchtool(self) -> Dict[str, Any]:\n         if self.lang.js_splitter_code:\n             js_splitter_code = self.lang.js_splitter_code\n",
  "test_patch": "diff --git a/tests/test_search.py b/tests/test_search.py\n--- a/tests/test_search.py\n+++ b/tests/test_search.py\n@@ -178,7 +178,8 @@ def test_IndexBuilder():\n                   'test': [0, 1, 2, 3]},\n         'titles': ('title1_1', 'title1_2', 'title2_1', 'title2_2'),\n         'titleterms': {'section_titl': [0, 1, 2, 3]},\n-        'alltitles': {'section_title': [(0, 'section-title'), (1, 'section-title'), (2, 'section-title'), (3, 'section-title')]}\n+        'alltitles': {'section_title': [(0, 'section-title'), (1, 'section-title'), (2, 'section-title'), (3, 'section-title')]},\n+        'indexentries': {},\n     }\n     assert index._objtypes == {('dummy1', 'objtype1'): 0, ('dummy2', 'objtype1'): 1}\n     assert index._objnames == {0: ('dummy1', 'objtype1', 'objtype1'),\n@@ -236,7 +237,8 @@ def test_IndexBuilder():\n                   'test': [0, 1]},\n         'titles': ('title1_2', 'title2_2'),\n         'titleterms': {'section_titl': [0, 1]},\n-        'alltitles': {'section_title': [(0, 'section-title'), (1, 'section-title')]}\n+        'alltitles': {'section_title': [(0, 'section-title'), (1, 'section-title')]},\n+        'indexentries': {},\n     }\n     assert index._objtypes == {('dummy1', 'objtype1'): 0, ('dummy2', 'objtype1'): 1}\n     assert index._objnames == {0: ('dummy1', 'objtype1', 'objtype1'),\n",
  "problem_statement": "Use the index directive as a source for search\n**Is your feature request related to a problem? Please describe.**\r\n\r\nMy problem is the search engine is not good at finding terms that are indexed, for example:\r\n- https://docs.python.org/3/search.html?q=for should find https://docs.python.org/3/reference/compound_stmts.html#index-6\r\n- https://docs.python.org/3/search.html?q=argument should find https://docs.python.org/3/glossary.html#term-argument\r\n- https://docs.python.org/3/search.html?q=as should find https://docs.python.org/3/reference/compound_stmts.html#index-11 and a few others\r\n- https://docs.python.org/3/search.html?q=function should find https://docs.python.org/3/glossary.html#term-function\r\n- https://docs.python.org/3/search.html?q=pyobject should find https://docs.python.org/3/c-api/structures.html#c.PyObject\r\n...\r\n\r\n**Describe the solution you'd like**\r\nI think using the global index as a source for the search engine is a good way to enhance this and allow people to manually boost a search result by using the bang of the index directive. (`.. index:: ! Python`).\r\n\r\nI can try to implement it, but I'm still not sure this is a good idea.\r\n\r\nGenerated Index can point to anchors, I'm not sure the current searchindex can hold them in its current state.\n",
  "hints_text": "A non-python example, searching for `ciphertext` in [pyca/cryptography](https://github.com/pyca/cryptography), the glossary `ciphertext` term is pretty low on the page and hidden among mentions of it within autodoc pages.\nThere's also a bpo issue on that subject: https://bugs.python.org/issue42106\r\n\r\nIt provides more examples from the Python documentation\r\n\r\n> For instance if you search \"append\": https://docs.python.org/3/search.html?q=append\r\n>\r\n> On my end, neither list nor MutableSequence appear anywhere on this page, even scrolling down.\r\n>\r\n> Searching for \"list\": https://docs.python.org/3/search.html?q=list\r\n>\r\n> The documentation for the builtin \"list\" object also doesn't appear on the page. [Data Structures](https://docs.python.org/3/tutorial/datastructures.html?highlight=list) and [built-in types](https://docs.python.org/3/library/stdtypes.html?highlight=list) appear below the fold and the former is genuinely useful but also very easy to miss (I had not actually noticed it before going back in order to get the various links and try to extensively describe the issue). Neither actually links to the `list` builtin type though.\r\n>\r\n> Above the fold we find various \"list\" methods and classes from the stdlib as well as the PDB `list` comment, none of which seems like the best match for the query.\r\n\r\n\nThis would also be useful for the core CPython documentation.\n\nA\nYeah, as discussed, this would be extremely useful for the CPython docs, as brought up in python/cpython#60075 , python/cpython#89541 , python/cpython#86272,  python/cpython#86272 and probably others, so it would be fantastic if you could implement this. To be honest, it confuses me why the search index wouldn't include the...index...to begin with, heh.\r\n\r\nI was going to offer to help, but I'm sure you'd do a far better job than I would. If you do need something within my (limited) skillset, like testing this or reviewing docs, etc, let me know. Thanks!",
  "created_at": "2022-09-12T21:47:01Z",
  "version": "5.2",
  "FAIL_TO_PASS": "[\"tests/test_search.py::test_IndexBuilder\"]",
  "PASS_TO_PASS": "[\"tests/test_search.py::test_objects_are_escaped\", \"tests/test_search.py::test_meta_keys_are_handled_for_language_en\", \"tests/test_search.py::test_meta_keys_are_handled_for_language_de\", \"tests/test_search.py::test_stemmer_does_not_remove_short_words\", \"tests/test_search.py::test_stemmer\", \"tests/test_search.py::test_term_in_heading_and_section\", \"tests/test_search.py::test_term_in_raw_directive\", \"tests/test_search.py::test_IndexBuilder_lookup\", \"tests/test_search.py::test_search_index_gen_zh\", \"tests/test_search.py::test_nosearch\"]",
  "environment_setup_commit": "a651e6bf4ad7a1dc293525d0a70e6d0d11b827db",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.035826",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}