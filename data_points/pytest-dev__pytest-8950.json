{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-8950",
  "base_commit": "398783521383e7f0d9897da679e8c12061024f30",
  "patch": "diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -21,9 +21,6 @@\n import attr\n import py\n \n-from _pytest.outcomes import fail\n-from _pytest.outcomes import TEST_OUTCOME\n-\n if TYPE_CHECKING:\n     from typing import NoReturn\n     from typing_extensions import Final\n@@ -157,6 +154,8 @@ def getfuncargnames(\n     try:\n         parameters = signature(function).parameters\n     except (ValueError, TypeError) as e:\n+        from _pytest.outcomes import fail\n+\n         fail(\n             f\"Could not determine arguments of {function!r}: {e}\",\n             pytrace=False,\n@@ -329,6 +328,8 @@ def safe_getattr(object: Any, name: str, default: Any) -> Any:\n     are derived from BaseException instead of Exception (for more details\n     check #2707).\n     \"\"\"\n+    from _pytest.outcomes import TEST_OUTCOME\n+\n     try:\n         return getattr(object, name, default)\n     except TEST_OUTCOME:\ndiff --git a/src/_pytest/deprecated.py b/src/_pytest/deprecated.py\n--- a/src/_pytest/deprecated.py\n+++ b/src/_pytest/deprecated.py\n@@ -106,6 +106,11 @@\n     \" Replace pytest.warns(None) by simply pytest.warns().\"\n )\n \n+KEYWORD_MSG_ARG = UnformattedWarning(\n+    PytestDeprecationWarning,\n+    \"pytest.{func}(msg=...) is now deprecated, use pytest.{func}(reason=...) instead\",\n+)\n+\n # You want to make some `__init__` or function \"private\".\n #\n #   def my_private_function(some, args):\ndiff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -1,6 +1,7 @@\n \"\"\"Exception classes and constants handling test outcomes as well as\n functions creating them.\"\"\"\n import sys\n+import warnings\n from typing import Any\n from typing import Callable\n from typing import cast\n@@ -8,6 +9,8 @@\n from typing import Type\n from typing import TypeVar\n \n+from _pytest.deprecated import KEYWORD_MSG_ARG\n+\n TYPE_CHECKING = False  # Avoid circular import through compat.\n \n if TYPE_CHECKING:\n@@ -33,7 +36,7 @@ def __init__(self, msg: Optional[str] = None, pytrace: bool = True) -> None:\n                 \"Perhaps you meant to use a mark?\"\n             )\n             raise TypeError(error_msg.format(type(self).__name__, type(msg).__name__))\n-        BaseException.__init__(self, msg)\n+        super().__init__(msg)\n         self.msg = msg\n         self.pytrace = pytrace\n \n@@ -61,7 +64,7 @@ def __init__(\n         *,\n         _use_item_location: bool = False,\n     ) -> None:\n-        OutcomeException.__init__(self, msg=msg, pytrace=pytrace)\n+        super().__init__(msg=msg, pytrace=pytrace)\n         self.allow_module_level = allow_module_level\n         # If true, the skip location is reported as the item's location,\n         # instead of the place that raises the exception/calls skip().\n@@ -110,28 +113,56 @@ def decorate(func: _F) -> _WithException[_F, _ET]:\n \n \n @_with_exception(Exit)\n-def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n+def exit(\n+    reason: str = \"\", returncode: Optional[int] = None, *, msg: Optional[str] = None\n+) -> \"NoReturn\":\n     \"\"\"Exit testing process.\n \n-    :param str msg: Message to display upon exit.\n-    :param int returncode: Return code to be used when exiting pytest.\n+    :param reason:\n+        The message to show as the reason for exiting pytest.  reason has a default value\n+        only because `msg` is deprecated.\n+\n+    :param returncode:\n+        Return code to be used when exiting pytest.\n+\n+    :param msg:\n+        Same as ``reason``, but deprecated. Will be removed in a future version, use ``reason`` instead.\n     \"\"\"\n     __tracebackhide__ = True\n-    raise Exit(msg, returncode)\n+    from _pytest.config import UsageError\n+\n+    if reason and msg:\n+        raise UsageError(\n+            \"cannot pass reason and msg to exit(), `msg` is deprecated, use `reason`.\"\n+        )\n+    if not reason:\n+        if msg is None:\n+            raise UsageError(\"exit() requires a reason argument\")\n+        warnings.warn(KEYWORD_MSG_ARG.format(func=\"exit\"), stacklevel=2)\n+        reason = msg\n+    raise Exit(reason, returncode)\n \n \n @_with_exception(Skipped)\n-def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n+def skip(\n+    reason: str = \"\", *, allow_module_level: bool = False, msg: Optional[str] = None\n+) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n \n     This function should be called only during testing (setup, call or teardown) or\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n \n-    :param bool allow_module_level:\n+    :param reason:\n+        The message to show the user as reason for the skip.\n+\n+    :param allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n         of the module. Defaults to False.\n \n+    :param msg:\n+        Same as ``reason``, but deprecated. Will be removed in a future version, use ``reason`` instead.\n+\n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n@@ -141,21 +172,66 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n         to skip a doctest statically.\n     \"\"\"\n     __tracebackhide__ = True\n-    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+    reason = _resolve_msg_to_reason(\"skip\", reason, msg)\n+    raise Skipped(msg=reason, allow_module_level=allow_module_level)\n \n \n @_with_exception(Failed)\n-def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n+def fail(\n+    reason: str = \"\", pytrace: bool = True, msg: Optional[str] = None\n+) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n \n-    :param str msg:\n+    :param reason:\n         The message to show the user as reason for the failure.\n-    :param bool pytrace:\n+\n+    :param pytrace:\n         If False, msg represents the full failure information and no\n         python traceback will be reported.\n+\n+    :param msg:\n+        Same as ``reason``, but deprecated. Will be removed in a future version, use ``reason`` instead.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    reason = _resolve_msg_to_reason(\"fail\", reason, msg)\n+    raise Failed(msg=reason, pytrace=pytrace)\n+\n+\n+def _resolve_msg_to_reason(\n+    func_name: str, reason: str, msg: Optional[str] = None\n+) -> str:\n+    \"\"\"\n+    Handles converting the deprecated msg parameter if provided into\n+    reason, raising a deprecation warning.  This function will be removed\n+    when the optional msg argument is removed from here in future.\n+\n+    :param str func_name:\n+        The name of the offending function, this is formatted into the deprecation message.\n+\n+    :param str reason:\n+        The reason= passed into either pytest.fail() or pytest.skip()\n+\n+    :param str msg:\n+        The msg= passed into either pytest.fail() or pytest.skip().  This will\n+        be converted into reason if it is provided to allow pytest.skip(msg=) or\n+        pytest.fail(msg=) to continue working in the interim period.\n+\n+    :returns:\n+        The value to use as reason.\n+\n     \"\"\"\n     __tracebackhide__ = True\n-    raise Failed(msg=msg, pytrace=pytrace)\n+    if msg is not None:\n+\n+        if reason:\n+            from pytest import UsageError\n+\n+            raise UsageError(\n+                f\"Passing both ``reason`` and ``msg`` to pytest.{func_name}(...) is not permitted.\"\n+            )\n+        warnings.warn(KEYWORD_MSG_ARG.format(func=func_name), stacklevel=3)\n+        reason = msg\n+    return reason\n \n \n class XFailed(Failed):\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -173,7 +173,7 @@ def async_warn_and_skip(nodeid: str) -> None:\n     msg += \"  - pytest-trio\\n\"\n     msg += \"  - pytest-twisted\"\n     warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))\n-    skip(msg=\"async def function and no async plugin installed (see warnings)\")\n+    skip(reason=\"async def function and no async plugin installed (see warnings)\")\n \n \n @hookimpl(trylast=True)\ndiff --git a/src/_pytest/scope.py b/src/_pytest/scope.py\n--- a/src/_pytest/scope.py\n+++ b/src/_pytest/scope.py\n@@ -71,7 +71,8 @@ def from_user(\n         from _pytest.outcomes import fail\n \n         try:\n-            return Scope(scope_name)\n+            # Holding this reference is necessary for mypy at the moment.\n+            scope = Scope(scope_name)\n         except ValueError:\n             fail(\n                 \"{} {}got an unexpected scope value '{}'\".format(\n@@ -79,6 +80,7 @@ def from_user(\n                 ),\n                 pytrace=False,\n             )\n+        return scope\n \n \n _ALL_SCOPES = list(Scope)\n",
  "test_patch": "diff --git a/testing/deprecated_test.py b/testing/deprecated_test.py\n--- a/testing/deprecated_test.py\n+++ b/testing/deprecated_test.py\n@@ -192,6 +192,64 @@ def test_warns_none_is_deprecated():\n             pass\n \n \n+class TestSkipMsgArgumentDeprecated:\n+    def test_skip_with_msg_is_deprecated(self, pytester: Pytester) -> None:\n+        p = pytester.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_skipping_msg():\n+                pytest.skip(msg=\"skippedmsg\")\n+            \"\"\"\n+        )\n+        result = pytester.runpytest(p)\n+        result.stdout.fnmatch_lines(\n+            [\n+                \"*PytestDeprecationWarning: pytest.skip(msg=...) is now deprecated, \"\n+                \"use pytest.skip(reason=...) instead\",\n+                '*pytest.skip(msg=\"skippedmsg\")*',\n+            ]\n+        )\n+        result.assert_outcomes(skipped=1, warnings=1)\n+\n+    def test_fail_with_msg_is_deprecated(self, pytester: Pytester) -> None:\n+        p = pytester.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_failing_msg():\n+                pytest.fail(msg=\"failedmsg\")\n+            \"\"\"\n+        )\n+        result = pytester.runpytest(p)\n+        result.stdout.fnmatch_lines(\n+            [\n+                \"*PytestDeprecationWarning: pytest.fail(msg=...) is now deprecated, \"\n+                \"use pytest.fail(reason=...) instead\",\n+                '*pytest.fail(msg=\"failedmsg\")',\n+            ]\n+        )\n+        result.assert_outcomes(failed=1, warnings=1)\n+\n+    def test_exit_with_msg_is_deprecated(self, pytester: Pytester) -> None:\n+        p = pytester.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_exit_msg():\n+                pytest.exit(msg=\"exitmsg\")\n+            \"\"\"\n+        )\n+        result = pytester.runpytest(p)\n+        result.stdout.fnmatch_lines(\n+            [\n+                \"*PytestDeprecationWarning: pytest.exit(msg=...) is now deprecated, \"\n+                \"use pytest.exit(reason=...) instead\",\n+            ]\n+        )\n+        result.assert_outcomes(warnings=1)\n+\n+\n def test_deprecation_of_cmdline_preparse(pytester: Pytester) -> None:\n     pytester.makeconftest(\n         \"\"\"\ndiff --git a/testing/test_main.py b/testing/test_main.py\n--- a/testing/test_main.py\n+++ b/testing/test_main.py\n@@ -70,7 +70,7 @@ def test_wrap_session_exit_sessionfinish(\n         \"\"\"\n         import pytest\n         def pytest_sessionfinish():\n-            pytest.exit(msg=\"exit_pytest_sessionfinish\", returncode={returncode})\n+            pytest.exit(reason=\"exit_pytest_sessionfinish\", returncode={returncode})\n     \"\"\".format(\n             returncode=returncode\n         )\ndiff --git a/testing/test_skipping.py b/testing/test_skipping.py\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1444,3 +1444,92 @@ def test_pass():\n     result.stdout.fnmatch_lines(\n         [\"SKIPPED [[]1[]] tests/test_1.py:2: unconditional skip\"]\n     )\n+\n+\n+def test_skip_using_reason_works_ok(pytester: Pytester) -> None:\n+    p = pytester.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        def test_skipping_reason():\n+            pytest.skip(reason=\"skippedreason\")\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(p)\n+    result.stdout.no_fnmatch_line(\"*PytestDeprecationWarning*\")\n+    result.assert_outcomes(skipped=1)\n+\n+\n+def test_fail_using_reason_works_ok(pytester: Pytester) -> None:\n+    p = pytester.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        def test_failing_reason():\n+            pytest.fail(reason=\"failedreason\")\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(p)\n+    result.stdout.no_fnmatch_line(\"*PytestDeprecationWarning*\")\n+    result.assert_outcomes(failed=1)\n+\n+\n+def test_fail_fails_with_msg_and_reason(pytester: Pytester) -> None:\n+    p = pytester.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        def test_fail_both_arguments():\n+            pytest.fail(reason=\"foo\", msg=\"bar\")\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(p)\n+    result.stdout.fnmatch_lines(\n+        \"*UsageError: Passing both ``reason`` and ``msg`` to pytest.fail(...) is not permitted.*\"\n+    )\n+    result.assert_outcomes(failed=1)\n+\n+\n+def test_skip_fails_with_msg_and_reason(pytester: Pytester) -> None:\n+    p = pytester.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        def test_skip_both_arguments():\n+            pytest.skip(reason=\"foo\", msg=\"bar\")\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(p)\n+    result.stdout.fnmatch_lines(\n+        \"*UsageError: Passing both ``reason`` and ``msg`` to pytest.skip(...) is not permitted.*\"\n+    )\n+    result.assert_outcomes(failed=1)\n+\n+\n+def test_exit_with_msg_and_reason_fails(pytester: Pytester) -> None:\n+    p = pytester.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        def test_exit_both_arguments():\n+            pytest.exit(reason=\"foo\", msg=\"bar\")\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(p)\n+    result.stdout.fnmatch_lines(\n+        \"*UsageError: cannot pass reason and msg to exit(), `msg` is deprecated, use `reason`.*\"\n+    )\n+    result.assert_outcomes(failed=1)\n+\n+\n+def test_exit_with_reason_works_ok(pytester: Pytester) -> None:\n+    p = pytester.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        def test_exit_reason_only():\n+            pytest.exit(reason=\"foo\")\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(p)\n+    result.stdout.fnmatch_lines(\"*_pytest.outcomes.Exit: foo*\")\n",
  "problem_statement": "pytest.skip: Rename \"msg\" to \"reason\" for consistency with pytest.mark.skip/xfail?\nThe [signature of `pytest.skip` is](https://docs.pytest.org/en/latest/reference/reference.html#pytest-skip):\r\n\r\n```python\r\nskip(msg[, allow_module_level=False])\r\n```\r\n\r\nbut the [signature of `pytest.xfail` is](https://docs.pytest.org/en/latest/reference/reference.html#pytest-xfail):\r\n\r\n```python\r\nxfail(reason='')\r\n```\r\n\r\nMarks ([pytest.mark.skip](https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-skip), [pytest.mark.skipif](https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-skipif) and [pytest.mark.xfail](https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-xfail)) use `reason` too:\r\n\r\n```python\r\npytest.mark.skipif(condition, *, reason=None)\r\npytest.mark.xfail(condition=None, *, reason=None, raises=None, run=True, strict=False)¶\r\npytest.mark.skipif(condition, *, reason=None)¶\r\n```\r\n\r\nNote that `pytest.fail` [uses `msg`](https://docs.pytest.org/en/latest/reference/reference.html#pytest.fail):\r\n\r\n```python\r\nfail(msg='', pytrace=True)\r\n```\r\n\r\nbut at least from an user perspective, `skip` is probably closer to `xfail` and `mark.skip` / `mark.skipif` / `mark.xfail`.\r\n\r\nShould we rename the `msg` argument for `pytest.skip` to `reason` for consistency (with a deprecation for the old name), or isn't that worth the trouble?\r\n\r\n*Thanks to Francesco Casalegno for reporting this in the pytest training I gave at Europython 2021 today!*\n",
  "hints_text": "lovely find, should do\nAgreed. Also should not affect many users as I suspect almost everyone just writes `pytest.skip(\"some message\")` rather than `pytest.skip(msg=\"some message\")`, so they shouldn't be affected.\n👍 agree to unify, would like to tackle it if you don't mind @The-Compiler ? I assume _some_ people will be using `keyword` args here, so do we deprecate over 2 releases? (any guidance on the deprecation approach would be useful)\r\n\r\nedit: I see, it's on the explicit `pytest.skip()` calls, so much less audience as well.\r\n\r\nDo we care about also having `def fail(reason=...`) as well?",
  "created_at": "2021-07-27T23:02:06Z",
  "version": "7.0",
  "FAIL_TO_PASS": "[\"testing/deprecated_test.py::TestSkipMsgArgumentDeprecated::test_skip_with_msg_is_deprecated\", \"testing/deprecated_test.py::TestSkipMsgArgumentDeprecated::test_fail_with_msg_is_deprecated\", \"testing/deprecated_test.py::TestSkipMsgArgumentDeprecated::test_exit_with_msg_is_deprecated\", \"testing/test_main.py::test_wrap_session_exit_sessionfinish[None]\", \"testing/test_main.py::test_wrap_session_exit_sessionfinish[42]\", \"testing/test_skipping.py::test_skip_using_reason_works_ok\", \"testing/test_skipping.py::test_fail_fails_with_msg_and_reason\", \"testing/test_skipping.py::test_skip_fails_with_msg_and_reason\", \"testing/test_skipping.py::test_exit_with_msg_and_reason_fails\", \"testing/test_skipping.py::test_exit_with_reason_works_ok\"]",
  "PASS_TO_PASS": "[\"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Collector]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Module]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Function]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Instance]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Session]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Item]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Class]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[File]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[_fillfuncargs]\", \"testing/deprecated_test.py::test_fillfuncargs_is_deprecated\", \"testing/deprecated_test.py::test_fillfixtures_is_deprecated\", \"testing/deprecated_test.py::test_yield_fixture_is_deprecated\", \"testing/deprecated_test.py::test_private_is_deprecated\", \"testing/deprecated_test.py::test_hookproxy_warnings_for_fspath[hook]\", \"testing/deprecated_test.py::test_hookproxy_warnings_for_fspath[ihook]\", \"testing/deprecated_test.py::test_warns_none_is_deprecated\", \"testing/test_main.py::test_validate_basetemp_ok[foo]\", \"testing/test_main.py::test_validate_basetemp_ok[foo/bar]\", \"testing/test_main.py::test_validate_basetemp_fails[]\", \"testing/test_main.py::test_validate_basetemp_fails[.]\", \"testing/test_main.py::test_validate_basetemp_fails[..]\", \"testing/test_skipping.py::test_importorskip\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_capturelog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_catchlog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_faulthandler]\", \"testing/deprecated_test.py::test_minus_k_dash_is_deprecated\", \"testing/deprecated_test.py::test_minus_k_colon_is_deprecated\", \"testing/deprecated_test.py::test_fscollector_gethookproxy_isinitpath\", \"testing/deprecated_test.py::test_strict_option_is_deprecated\", \"testing/deprecated_test.py::test_raising_unittest_skiptest_during_collection_is_deprecated\", \"testing/deprecated_test.py::test_deprecation_of_cmdline_preparse\", \"testing/test_main.py::test_wrap_session_notify_exception[ret_exc0]\", \"testing/test_main.py::test_wrap_session_notify_exception[ret_exc1]\", \"testing/test_main.py::test_wrap_session_notify_exception[ret_exc2]\", \"testing/test_main.py::test_validate_basetemp_integration\", \"testing/test_main.py::TestResolveCollectionArgument::test_file\", \"testing/test_main.py::TestResolveCollectionArgument::test_dir\", \"testing/test_main.py::TestResolveCollectionArgument::test_pypath\", \"testing/test_main.py::TestResolveCollectionArgument::test_does_not_exist\", \"testing/test_main.py::TestResolveCollectionArgument::test_absolute_paths_are_resolved_correctly\", \"testing/test_main.py::test_module_full_path_without_drive\", \"testing/test_skipping.py::TestEvaluation::test_no_marker\", \"testing/test_skipping.py::TestEvaluation::test_marked_xfail_no_args\", \"testing/test_skipping.py::TestEvaluation::test_marked_skipif_no_args\", \"testing/test_skipping.py::TestEvaluation::test_marked_one_arg\", \"testing/test_skipping.py::TestEvaluation::test_marked_one_arg_with_reason\", \"testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice\", \"testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice2\", \"testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_boolean_without_reason\", \"testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_invalid_boolean\", \"testing/test_skipping.py::TestEvaluation::test_skipif_class\", \"testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace\", \"testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_multiple\", \"testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_ValueError\", \"testing/test_skipping.py::TestXFail::test_xfail_simple[True]\", \"testing/test_skipping.py::TestXFail::test_xfail_simple[False]\", \"testing/test_skipping.py::TestXFail::test_xfail_xpassed\", \"testing/test_skipping.py::TestXFail::test_xfail_using_platform\", \"testing/test_skipping.py::TestXFail::test_xfail_xpassed_strict\", \"testing/test_skipping.py::TestXFail::test_xfail_run_anyway\", \"testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input0-expected0]\", \"testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input1-expected1]\", \"testing/test_skipping.py::TestXFail::test_xfail_evalfalse_but_fails\", \"testing/test_skipping.py::TestXFail::test_xfail_not_report_default\", \"testing/test_skipping.py::TestXFail::test_xfail_not_run_xfail_reporting\", \"testing/test_skipping.py::TestXFail::test_xfail_not_run_no_setup_run\", \"testing/test_skipping.py::TestXFail::test_xfail_xpass\", \"testing/test_skipping.py::TestXFail::test_xfail_imperative\", \"testing/test_skipping.py::TestXFail::test_xfail_imperative_in_setup_function\", \"testing/test_skipping.py::TestXFail::test_dynamic_xfail_no_run\", \"testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_funcarg_setup\", \"testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_failed\", \"testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_passed_strict\", \"testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-TypeError-*1\", \"testing/test_skipping.py::TestXFail::test_xfail_raises[(AttributeError,\", \"testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-IndexError-*1\", \"testing/test_skipping.py::TestXFail::test_strict_sanity\", \"testing/test_skipping.py::TestXFail::test_strict_xfail[True]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail[False]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_condition[True]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_condition[False]\", \"testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[True]\", \"testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[False]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[true]\", \"testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[false]\", \"testing/test_skipping.py::TestXFail::test_xfail_markeval_namespace\", \"testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_setup_issue9\", \"testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_teardown_issue9\", \"testing/test_skipping.py::TestSkip::test_skip_class\", \"testing/test_skipping.py::TestSkip::test_skips_on_false_string\", \"testing/test_skipping.py::TestSkip::test_arg_as_reason\", \"testing/test_skipping.py::TestSkip::test_skip_no_reason\", \"testing/test_skipping.py::TestSkip::test_skip_with_reason\", \"testing/test_skipping.py::TestSkip::test_only_skips_marked_test\", \"testing/test_skipping.py::TestSkip::test_strict_and_skip\", \"testing/test_skipping.py::TestSkip::test_wrong_skip_usage\", \"testing/test_skipping.py::TestSkipif::test_skipif_conditional\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting[\\\"hasattr(sys,\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting[True,\", \"testing/test_skipping.py::TestSkipif::test_skipif_using_platform\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[skipif-SKIP-skipped]\", \"testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[xfail-XPASS-xpassed]\", \"testing/test_skipping.py::test_skip_not_report_default\", \"testing/test_skipping.py::test_skipif_class\", \"testing/test_skipping.py::test_skipped_reasons_functional\", \"testing/test_skipping.py::test_skipped_folding\", \"testing/test_skipping.py::test_reportchars\", \"testing/test_skipping.py::test_reportchars_error\", \"testing/test_skipping.py::test_reportchars_all\", \"testing/test_skipping.py::test_reportchars_all_error\", \"testing/test_skipping.py::test_errors_in_xfail_skip_expressions\", \"testing/test_skipping.py::test_xfail_skipif_with_globals\", \"testing/test_skipping.py::test_default_markers\", \"testing/test_skipping.py::test_xfail_test_setup_exception\", \"testing/test_skipping.py::test_imperativeskip_on_xfail_test\", \"testing/test_skipping.py::TestBooleanCondition::test_skipif\", \"testing/test_skipping.py::TestBooleanCondition::test_skipif_noreason\", \"testing/test_skipping.py::TestBooleanCondition::test_xfail\", \"testing/test_skipping.py::test_xfail_item\", \"testing/test_skipping.py::test_module_level_skip_error\", \"testing/test_skipping.py::test_module_level_skip_with_allow_module_level\", \"testing/test_skipping.py::test_invalid_skip_keyword_parameter\", \"testing/test_skipping.py::test_mark_xfail_item\", \"testing/test_skipping.py::test_summary_list_after_errors\", \"testing/test_skipping.py::test_relpath_rootdir\", \"testing/test_skipping.py::test_fail_using_reason_works_ok\"]",
  "environment_setup_commit": "e2ee3144ed6e241dea8d96215fcdca18b3892551",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.944814",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}