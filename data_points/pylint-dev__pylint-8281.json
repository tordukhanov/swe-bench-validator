{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-8281",
  "base_commit": "e0018ea04bce285f5fed31c00d6d16367a8800c1",
  "patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -15,6 +15,7 @@\n import re\n import sys\n from collections.abc import Callable\n+from glob import glob\n from typing import Any, Pattern, Sequence, Tuple, Union\n \n from pylint import interfaces\n@@ -88,13 +89,13 @@ def _path_transformer(value: str) -> str:\n     return os.path.expandvars(os.path.expanduser(value))\n \n \n-def _paths_csv_transformer(value: str) -> Sequence[str]:\n+def _glob_paths_csv_transformer(value: str) -> Sequence[str]:\n     \"\"\"Transforms a comma separated list of paths while expanding user and\n-    variables.\n+    variables and glob patterns.\n     \"\"\"\n     paths: list[str] = []\n     for path in _csv_transformer(value):\n-        paths.append(os.path.expandvars(os.path.expanduser(path)))\n+        paths.extend(glob(_path_transformer(path), recursive=True))\n     return paths\n \n \n@@ -148,7 +149,7 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"confidence\": _confidence_transformer,\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n-    \"paths_csv\": _paths_csv_transformer,\n+    \"glob_paths_csv\": _glob_paths_csv_transformer,\n     \"py_version\": _py_version_transformer,\n     \"regexp\": _regex_transformer,\n     \"regexp_csv\": _regexp_csv_transfomer,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -117,7 +117,7 @@ def _py_version_validator(_: Any, name: str, value: Any) -> tuple[int, int, int]\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"paths_csv\": _csv_validator,\n+    \"glob_paths_csv\": _csv_validator,\n     \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n@@ -164,7 +164,7 @@ def _validate(value: Any, optdict: Any, name: str = \"\") -> Any:\n # pylint: disable=no-member\n class Option(optparse.Option):\n     TYPES = optparse.Option.TYPES + (\n-        \"paths_csv\",\n+        \"glob_paths_csv\",\n         \"regexp\",\n         \"regexp_csv\",\n         \"regexp_paths_csv\",\n@@ -177,7 +177,7 @@ class Option(optparse.Option):\n     )\n     ATTRS = optparse.Option.ATTRS + [\"hide\", \"level\"]\n     TYPE_CHECKER = copy.copy(optparse.Option.TYPE_CHECKER)\n-    TYPE_CHECKER[\"paths_csv\"] = _csv_validator\n+    TYPE_CHECKER[\"glob_paths_csv\"] = _csv_validator\n     TYPE_CHECKER[\"regexp\"] = _regexp_validator\n     TYPE_CHECKER[\"regexp_csv\"] = _regexp_csv_validator\n     TYPE_CHECKER[\"regexp_paths_csv\"] = _regexp_paths_csv_validator\ndiff --git a/pylint/lint/base_options.py b/pylint/lint/base_options.py\n--- a/pylint/lint/base_options.py\n+++ b/pylint/lint/base_options.py\n@@ -346,12 +346,13 @@ def _make_linter_options(linter: PyLinter) -> Options:\n         (\n             \"source-roots\",\n             {\n-                \"type\": \"paths_csv\",\n+                \"type\": \"glob_paths_csv\",\n                 \"metavar\": \"<path>[,<path>...]\",\n                 \"default\": (),\n-                \"help\": \"Add paths to the list of the source roots. The source root is an absolute \"\n-                \"path or a path relative to the current working directory used to \"\n-                \"determine a package namespace for modules located under the source root.\",\n+                \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. \"\n+                \"The source root is an absolute path or a path relative to the current working \"\n+                \"directory used to determine a package namespace for modules located under the \"\n+                \"source root.\",\n             },\n         ),\n         (\ndiff --git a/pylint/pyreverse/main.py b/pylint/pyreverse/main.py\n--- a/pylint/pyreverse/main.py\n+++ b/pylint/pyreverse/main.py\n@@ -238,12 +238,12 @@\n     (\n         \"source-roots\",\n         {\n-            \"type\": \"paths_csv\",\n+            \"type\": \"glob_paths_csv\",\n             \"metavar\": \"<path>[,<path>...]\",\n             \"default\": (),\n-            \"help\": \"Add paths to the list of the source roots. The source root is an absolute \"\n-            \"path or a path relative to the current working directory used to \"\n-            \"determine a package namespace for modules located under the source root.\",\n+            \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. The \"\n+            \"source root is an absolute path or a path relative to the current working directory \"\n+            \"used to determine a package namespace for modules located under the source root.\",\n         },\n     ),\n )\n",
  "test_patch": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -1208,6 +1208,20 @@ def test_recursive_ignore(ignore_parameter: str, ignore_parameter_value: str) ->\n     assert module in linted_file_paths\n \n \n+def test_source_roots_globbing() -> None:\n+    run = Run(\n+        [\n+            \"--source-roots\",\n+            join(REGRTEST_DATA_DIR, \"pep420\", \"basic\", \"*\"),\n+            join(REGRTEST_DATA_DIR, \"pep420\", \"basic\", \"project\"),\n+        ],\n+        exit=False,\n+    )\n+    assert run.linter.config.source_roots == [\n+        join(REGRTEST_DATA_DIR, \"pep420\", \"basic\", \"project\")\n+    ]\n+\n+\n def test_recursive_implicit_namespace() -> None:\n     run = Run(\n         [\n",
  "problem_statement": "Support globbing patterns for source-roots\n### Current problem\n\nIt's quite inconvenient having to specify every source root for complex multi-package projects like `--source-roots src/package1,src/package2,...,src/packageN`\n\n### Desired solution\n\nFor complex multi-package projects it would be nice to be able to specify source roots as `--source-roots src/*` instead of listing every one of them. IMHO, it's better to go with globbing patterns rather than with regexp patterns since those give better support for path-specific matching.\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2023-02-13T15:37:32Z",
  "version": "2.17",
  "FAIL_TO_PASS": "[\"tests/lint/unittest_lint.py::test_source_roots_globbing\"]",
  "PASS_TO_PASS": "[\"tests/lint/unittest_lint.py::test_deprecated\", \"tests/lint/unittest_lint.py::test_no_args\", \"tests/lint/unittest_lint.py::test_one_arg[case0]\", \"tests/lint/unittest_lint.py::test_one_arg[case1]\", \"tests/lint/unittest_lint.py::test_one_arg[case2]\", \"tests/lint/unittest_lint.py::test_one_arg[case3]\", \"tests/lint/unittest_lint.py::test_one_arg[case4]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case0]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case1]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case2]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case3]\", \"tests/lint/unittest_lint.py::test_more_args[case0]\", \"tests/lint/unittest_lint.py::test_more_args[case1]\", \"tests/lint/unittest_lint.py::test_more_args[case2]\", \"tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account\", \"tests/lint/unittest_lint.py::test_enable_message\", \"tests/lint/unittest_lint.py::test_enable_message_category\", \"tests/lint/unittest_lint.py::test_message_state_scope\", \"tests/lint/unittest_lint.py::test_enable_message_block\", \"tests/lint/unittest_lint.py::test_enable_by_symbol\", \"tests/lint/unittest_lint.py::test_enable_report\", \"tests/lint/unittest_lint.py::test_report_output_format_aliased\", \"tests/lint/unittest_lint.py::test_set_unsupported_reporter\", \"tests/lint/unittest_lint.py::test_set_option_1\", \"tests/lint/unittest_lint.py::test_set_option_2\", \"tests/lint/unittest_lint.py::test_enable_checkers\", \"tests/lint/unittest_lint.py::test_errors_only\", \"tests/lint/unittest_lint.py::test_disable_similar\", \"tests/lint/unittest_lint.py::test_disable_alot\", \"tests/lint/unittest_lint.py::test_addmessage\", \"tests/lint/unittest_lint.py::test_addmessage_invalid\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line\", \"tests/lint/unittest_lint.py::test_load_plugin_path_manipulation_case_6\", \"tests/lint/unittest_lint.py::test_load_plugin_path_manipulation_case_3\", \"tests/lint/unittest_lint.py::test_load_plugin_pylintrc_order_independent\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line_before_init_hook\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line_with_init_hook_command_line\", \"tests/lint/unittest_lint.py::test_load_plugin_config_file\", \"tests/lint/unittest_lint.py::test_load_plugin_configuration\", \"tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins\", \"tests/lint/unittest_lint.py::test_analyze_explicit_script\", \"tests/lint/unittest_lint.py::test_full_documentation\", \"tests/lint/unittest_lint.py::test_list_msgs_enabled\", \"tests/lint/unittest_lint.py::test_pylint_home\", \"tests/lint/unittest_lint.py::test_pylint_home_from_environ\", \"tests/lint/unittest_lint.py::test_warn_about_old_home\", \"tests/lint/unittest_lint.py::test_pylintrc\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package\", \"tests/lint/unittest_lint.py::test_custom_should_analyze_file\", \"tests/lint/unittest_lint.py::test_multiprocessing[1]\", \"tests/lint/unittest_lint.py::test_multiprocessing[2]\", \"tests/lint/unittest_lint.py::test_filename_with__init__\", \"tests/lint/unittest_lint.py::test_by_module_statement_value\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]\", \"tests/lint/unittest_lint.py::test_recursive_implicit_namespace\", \"tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir\", \"tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir_on_path\"]",
  "environment_setup_commit": "80e024af5cfdc65a2b9fef1f25ff602ab4fa0f88",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.917141",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}