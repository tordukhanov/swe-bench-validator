{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-3114",
  "base_commit": "b3ba4ba5f9508e4b601d9cf5dbcd9024993adf37",
  "patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1272,7 +1272,9 @@ def expand_dims(self, dim: Union[None, Hashable, Sequence[Hashable],\n                                      Mapping[Hashable, Any]] = None,\n                     axis=None, **dim_kwargs: Any) -> 'DataArray':\n         \"\"\"Return a new object with an additional axis (or axes) inserted at\n-        the corresponding position in the array shape.\n+        the corresponding position in the array shape. The new object is a\n+        view into the underlying array, not a copy.\n+\n \n         If dim is already a scalar coordinate, it will be promoted to a 1D\n         coordinate consisting of a single value.\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -2516,7 +2516,8 @@ def swap_dims(self, dims_dict, inplace=None):\n \n     def expand_dims(self, dim=None, axis=None, **dim_kwargs):\n         \"\"\"Return a new object with an additional axis (or axes) inserted at\n-        the corresponding position in the array shape.\n+        the corresponding position in the array shape.  The new object is a\n+        view into the underlying array, not a copy.\n \n         If dim is already a scalar coordinate, it will be promoted to a 1D\n         coordinate consisting of a single value.\ndiff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -1177,7 +1177,15 @@ def __getitem__(self, key):\n \n     def __setitem__(self, key, value):\n         array, key = self._indexing_array_and_key(key)\n-        array[key] = value\n+        try:\n+            array[key] = value\n+        except ValueError:\n+            # More informative exception if read-only view\n+            if not array.flags.writeable and not array.flags.owndata:\n+                raise ValueError(\"Assignment destination is a view.  \"\n+                                 \"Do you want to .copy() array first?\")\n+            else:\n+                raise\n \n \n class DaskIndexingAdapter(ExplicitlyIndexedNDArrayMixin):\n",
  "test_patch": "diff --git a/xarray/tests/test_indexing.py b/xarray/tests/test_indexing.py\n--- a/xarray/tests/test_indexing.py\n+++ b/xarray/tests/test_indexing.py\n@@ -144,6 +144,16 @@ def test_indexer(data, x, expected_pos, expected_idx=None):\n                      [True, True, True, True, False, False, False, False],\n                      pd.MultiIndex.from_product([[1, 2], [-1, -2]]))\n \n+    def test_read_only_view(self):\n+        from collections import OrderedDict\n+        arr = DataArray(np.random.rand(3, 3),\n+                        coords={'x': np.arange(3), 'y': np.arange(3)},\n+                        dims=('x', 'y'))     # Create a 2D DataArray\n+        arr = arr.expand_dims(OrderedDict([('z', 3)]), -1)  # New dimension 'z'\n+        arr['z'] = np.arange(3)              # New coords to dimension 'z'\n+        with pytest.raises(ValueError, match='Do you want to .copy()'):\n+            arr.loc[0, 0, 0] = 999\n+\n \n class TestLazyArray:\n     def test_slice_slice(self):\n",
  "problem_statement": "expand_dims() modifies numpy.ndarray.flags to write only, upon manually reverting this flag back, attempting to set a single inner value using .loc will instead set all of the inner array values\nI am using the newly updated **expand_dims** API that was recently updated with this PR [https://github.com/pydata/xarray/pull/2757](https://github.com/pydata/xarray/pull/2757). However the flag setting behaviour can also be observed using the old API syntax.\r\n\r\n```python\r\n>>> expanded_da = xr.DataArray(np.random.rand(3,3), coords={'x': np.arange(3), 'y': np.arange(3)}, dims=('x', 'y')) # Create a 2D DataArray\r\n>>> expanded_da\r\n<xarray.DataArray (x: 3, y: 3)>\r\narray([[0.148579, 0.463005, 0.224993],\r\n       [0.633511, 0.056746, 0.28119 ],\r\n       [0.390596, 0.298519, 0.286853]])\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) int64 0 1 2\r\n\r\n>>> expanded_da.data.flags # Check current state of numpy flags\r\n  C_CONTIGUOUS : True\r\n  F_CONTIGUOUS : False\r\n  OWNDATA : True\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  WRITEBACKIFCOPY : False\r\n  UPDATEIFCOPY : False\r\n\r\n>>> expanded_da.loc[0, 0] = 2.22 # Set a single value before expanding\r\n>>> expanded_da # It works, the single value is set\r\n<xarray.DataArray (x: 3, y: 3)>\r\narray([[2.22    , 0.463005, 0.224993],\r\n       [0.633511, 0.056746, 0.28119 ],\r\n       [0.390596, 0.298519, 0.286853]])\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) int64 0 1 2\r\n\r\n>>> expanded_da = expanded_da.expand_dims({'z': 3}, -1) # Add a new dimension 'z'\r\n>>> expanded_da\r\n<xarray.DataArray (x: 3, y: 3, z: 3)>\r\narray([[[2.22    , 2.22    , 2.22    ],\r\n        [0.463005, 0.463005, 0.463005],\r\n        [0.224993, 0.224993, 0.224993]],\r\n\r\n       [[0.633511, 0.633511, 0.633511],\r\n        [0.056746, 0.056746, 0.056746],\r\n        [0.28119 , 0.28119 , 0.28119 ]],\r\n\r\n       [[0.390596, 0.390596, 0.390596],\r\n        [0.298519, 0.298519, 0.298519],\r\n        [0.286853, 0.286853, 0.286853]]])\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) int64 0 1 2\r\nDimensions without coordinates: z\r\n\r\n>>> expanded_da['z'] = np.arange(3) # Add new coordinates to the new dimension 'z'\r\n>>> expanded_da\r\n<xarray.DataArray (x: 3, y: 3, z: 3)>\r\narray([[[2.22    , 2.22    , 2.22    ],\r\n        [0.463005, 0.463005, 0.463005],\r\n        [0.224993, 0.224993, 0.224993]],\r\n\r\n       [[0.633511, 0.633511, 0.633511],\r\n        [0.056746, 0.056746, 0.056746],\r\n        [0.28119 , 0.28119 , 0.28119 ]],\r\n\r\n       [[0.390596, 0.390596, 0.390596],\r\n        [0.298519, 0.298519, 0.298519],\r\n        [0.286853, 0.286853, 0.286853]]])\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) int64 0 1 2\r\n  * z        (z) int64 0 1 2\r\n\r\n>>> expanded_da.loc[0, 0, 0] = 9.99 # Attempt to set a single value, get 'read-only' error\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/dhemming/.ve/unidata_notebooks/lib/python3.6/site-packages/xarray/core/dataarray.py\", line 113, in __setitem__\r\n    self.data_array[pos_indexers] = value\r\n  File \"/Users/dhemming/.ve/unidata_notebooks/lib/python3.6/site-packages/xarray/core/dataarray.py\", line 494, in __setitem__\r\n    self.variable[key] = value\r\n  File \"/Users/dhemming/.ve/unidata_notebooks/lib/python3.6/site-packages/xarray/core/variable.py\", line 714, in __setitem__\r\n    indexable[index_tuple] = value\r\n  File \"/Users/dhemming/.ve/unidata_notebooks/lib/python3.6/site-packages/xarray/core/indexing.py\", line 1174, in __setitem__\r\n    array[key] = value\r\nValueError: assignment destination is read-only\r\n\r\n>>> expanded_da.data.flags # Check flags on the DataArray, notice they have changed\r\n  C_CONTIGUOUS : False\r\n  F_CONTIGUOUS : False\r\n  OWNDATA : False\r\n  WRITEABLE : False\r\n  ALIGNED : True\r\n  WRITEBACKIFCOPY : False\r\n  UPDATEIFCOPY : False\r\n\r\n>>> expanded_da.data.setflags(write = 1) # Make array writeable again\r\n>>> expanded_da.data.flags\r\n  C_CONTIGUOUS : False\r\n  F_CONTIGUOUS : False\r\n  OWNDATA : False\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  WRITEBACKIFCOPY : False\r\n  UPDATEIFCOPY : False\r\n\r\n>>> expanded_da.loc[0, 0, 0] # Check the value I want to overwrite\r\n<xarray.DataArray ()>\r\narray(2.22)\r\nCoordinates:\r\n    x        int64 0\r\n    y        int64 0\r\n    z        int64 0\r\n\r\n>>> expanded_da.loc[0, 0, 0] = 9.99 # Attempt to overwrite single value, instead it overwrites all values in the array located at [0, 0]\r\n>>> expanded_da\r\n<xarray.DataArray (x: 3, y: 3, z: 3)>\r\narray([[[9.99    , 9.99    , 9.99    ],\r\n        [0.463005, 0.463005, 0.463005],\r\n        [0.224993, 0.224993, 0.224993]],\r\n\r\n       [[0.633511, 0.633511, 0.633511],\r\n        [0.056746, 0.056746, 0.056746],\r\n        [0.28119 , 0.28119 , 0.28119 ]],\r\n\r\n       [[0.390596, 0.390596, 0.390596],\r\n        [0.298519, 0.298519, 0.298519],\r\n        [0.286853, 0.286853, 0.286853]]])\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) int64 0 1 2\r\n  * z        (z) int64 0 1 2\r\n```\r\n#### Problem description\r\n\r\nWhen applying the operation '**expand_dims({'z': 3}, -1)**' on a DataArray the underlying Numpy array flags are changed. 'C_CONTIGUOUS' is set to False, and 'WRITEABLE' is set to False, and 'OWNDATA' is set to False.  Upon changing 'WRITEABLE' back to True, when I try to set a single value in the DataArray using the '.loc' operator it will instead set all the values in that selected inner array.\r\n\r\nI am new to Xarray so I can't be entirely sure if this expected behaviour.  Regardless I would expect that adding a new dimension to the array would not make that array 'read-only'.  I would also not expect the '.loc' method to work differently to how it would otherwise.\r\n\r\nIt's also not congruent with the Numpy '**expand_dims**' operation.  Because when I call the operation 'np.expand_dims(np_arr, axis=-1)' the 'C_CONTIGUOUS ' and 'WRITEABLE ' flags will not be modified.\r\n\r\n#### Expected Output\r\n\r\nHere is a similar flow of operations that demonstrates the behaviour I would expect from the DataArray after applying 'expand_dims':\r\n\r\n```python\r\n>>> non_expanded_da = xr.DataArray(np.random.rand(3,3,3), coords={'x': np.arange(3), 'y': np.arange(3)}, dims=('x', 'y', 'z')) # Create the new DataArray to be in the same state as I would expect it to be in after applying the operation 'expand_dims({'z': 3}, -1)'\r\n>>> non_expanded_da\r\n<xarray.DataArray (x: 3, y: 3, z: 3)>\r\narray([[[0.017221, 0.374267, 0.231979],\r\n        [0.678884, 0.512903, 0.737573],\r\n        [0.985872, 0.1373  , 0.4603  ]],\r\n\r\n       [[0.764227, 0.825059, 0.847694],\r\n        [0.482841, 0.708206, 0.486576],\r\n        [0.726265, 0.860627, 0.435101]],\r\n\r\n       [[0.117904, 0.40569 , 0.274288],\r\n        [0.079321, 0.647562, 0.847459],\r\n        [0.57494 , 0.578745, 0.125309]]])\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) int64 0 1 2\r\nDimensions without coordinates: z\r\n\r\n>>> non_expanded_da.data.flags # Check flags\r\n  C_CONTIGUOUS : True\r\n  F_CONTIGUOUS : False\r\n  OWNDATA : True\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  WRITEBACKIFCOPY : False\r\n  UPDATEIFCOPY : False\r\n\r\n>>> non_expanded_da['z'] = np.arange(3) # Set coordinate for dimension 'z'\r\n>>> non_expanded_da\r\n<xarray.DataArray (x: 3, y: 3, z: 3)>\r\narray([[[0.017221, 0.374267, 0.231979],\r\n        [0.678884, 0.512903, 0.737573],\r\n        [0.985872, 0.1373  , 0.4603  ]],\r\n\r\n       [[0.764227, 0.825059, 0.847694],\r\n        [0.482841, 0.708206, 0.486576],\r\n        [0.726265, 0.860627, 0.435101]],\r\n\r\n       [[0.117904, 0.40569 , 0.274288],\r\n        [0.079321, 0.647562, 0.847459],\r\n        [0.57494 , 0.578745, 0.125309]]])\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) int64 0 1 2\r\n  * z        (z) int64 0 1 2\r\n\r\n>>> non_expanded_da.loc[0, 0, 0] = 2.22 # Set value using .loc method\r\n>>> non_expanded_da # The single value referenced is set which is what I expect to happen\r\n<xarray.DataArray (x: 3, y: 3, z: 3)>\r\narray([[[2.22    , 0.374267, 0.231979],\r\n        [0.678884, 0.512903, 0.737573],\r\n        [0.985872, 0.1373  , 0.4603  ]],\r\n\r\n       [[0.764227, 0.825059, 0.847694],\r\n        [0.482841, 0.708206, 0.486576],\r\n        [0.726265, 0.860627, 0.435101]],\r\n\r\n       [[0.117904, 0.40569 , 0.274288],\r\n        [0.079321, 0.647562, 0.847459],\r\n        [0.57494 , 0.578745, 0.125309]]])\r\nCoordinates:\r\n  * x        (x) int64 0 1 2\r\n  * y        (y) int64 0 1 2\r\n  * z        (z) int64 0 1 2\r\n```\r\n\r\n#### Output of ``xr.show_versions()``\r\n\r\n<details>\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.6.7 (default, Dec 29 2018, 12:05:36)\r\n[GCC 4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.11.45.5)]\r\npython-bits: 64\r\nOS: Darwin\r\nOS-release: 18.2.0\r\nmachine: x86_64\r\nprocessor: i386\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_AU.UTF-8\r\nLOCALE: en_AU.UTF-8\r\nlibhdf5: 1.10.2\r\nlibnetcdf: 4.4.1.1\r\n\r\nxarray: 0.12.1\r\npandas: 0.24.2\r\nnumpy: 1.16.2\r\nscipy: 1.2.1\r\nnetCDF4: 1.5.0\r\npydap: None\r\nh5netcdf: None\r\nh5py: None\r\nNio: None\r\nzarr: None\r\ncftime: 1.0.3.4\r\nnc_time_axis: None\r\nPseudonetCDF: None\r\nrasterio: None\r\ncfgrib: 0.9.6.1.post1\r\niris: None\r\nbottleneck: None\r\ndask: None\r\ndistributed: None\r\nmatplotlib: 3.0.3\r\ncartopy: 0.17.0\r\nseaborn: None\r\nsetuptools: 39.0.1\r\npip: 10.0.1\r\nconda: None\r\npytest: None\r\nIPython: None\r\nsphinx: None\r\n\r\n</details>\r\n\n",
  "hints_text": "As you've noticed, these arrays are \"read only\" because otherwise indexing can modify more than the original values, e.g., consider:\r\n```python\r\noriginal = xr.DataArray(np.zeros(3), dims='x')\r\nresult = original.expand_dims(y=2)\r\nresult.data.flags.writeable = True\r\nresult[0, 0] = 1\r\nprint(result)\r\n```\r\nBoth \"y\" values were set to 1!\r\n```\r\n<xarray.DataArray (y: 2, x: 3)>\r\narray([[1., 0., 0.],\r\n       [1., 0., 0.]])\r\nDimensions without coordinates: y, x\r\n```\r\n\r\nThe work around is to call `.copy()` on the array after calling `expand_dims()`, e.g.,\r\n```\r\noriginal = xr.DataArray(np.zeros(3), dims='x')\r\nresult = original.expand_dims(y=2).copy()\r\nresult[0, 0] = 1\r\nprint(result)\r\n```\r\nNow the correct result is printed:\r\n```\r\n<xarray.DataArray (y: 2, x: 3)>\r\narray([[1., 0., 0.],\r\n       [0., 0., 0.]])\r\nDimensions without coordinates: y, x\r\n```\r\n\r\n----------------\r\n\r\nThis is indeed intended behavior: by making the result read-only, we can expand dimensions without copying the original data, and without needing to worry about indexing modifying the wrong values.\r\n\r\nThat said, we could certainly improve the usability of this feature in xarray. Some options:\r\n- Mention the work-around of using `.copy()` in the error message xarray prints when an array is read-only.\r\n- Add a `copy` argument to `expand_dims`, so users can write `copy=True` if they want a writeable result.\r\n- Consider changing the behavior when a dimension is inserted with size 1 to make the result writeable -- in this case, individual elements of result can be modified (which will also modify the input array). But maybe it would be surprising to users if the result of `expand_dims()` is sometimes but not always writeable? \nThank you @shoyer for taking the time to educate me on this.  I understand completely now.\r\n\r\nI agree that solutions one and two would be helpful for future developers new to Xarray and the expand_dims operation when they eventually encounter this behaviour.  I also agree that option three would be confusing, and had it of been implemented as such I would still have found myself to be asking a similar question about why it is like that.\r\n\r\nAnother option to consider which might be easier still would be to just update the expand_dims documentation to include a note about this behaviour and the copy solution.\r\n\r\nThanks again!\nOK, we would definitely welcome a pull request to improve this error message and the documentation for `expand_dims`!\r\n\r\nI lean slightly against adding the `copy` argument since it's just as easy to add `.copy()` afterwards (that's one less function argument).\nYes good point.  I do also think that the expand_dims interface should really only be responsible for that one single operation.  If you then want to make a copy then go ahead and use that separate method afterwards.\r\n\r\nOk great, if I get time later today I'll see if I can't pick that up; that is if someone hasn't already done so in the meantime.\nI am also affected in some code which used to work with earlier versions of xarray. In this case, I call `ds.expand_dims('new_dim')` on some dataset (not DataArray), e.g.:\r\n```\r\nds = xr.Dataset({'testvar': (['x'], np.zeros(3))})\r\nds1 = ds.expand_dims('y').copy()\r\nds1.testvar.data.flags\r\n\r\n  C_CONTIGUOUS : True\r\n  F_CONTIGUOUS : True\r\n  OWNDATA : False\r\n  WRITEABLE : False\r\n  ALIGNED : True\r\n  WRITEBACKIFCOPY : False\r\n  UPDATEIFCOPY : False\r\n```\r\nThe `.copy()` workaround is not helping in this case, I am not sure how to fix this?\nI have just realized that `.copy(deep=True)` is a possible fix for datasets.",
  "created_at": "2019-07-13T21:13:45Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_indexing.py::TestIndexers::test_read_only_view\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_indexing.py::TestIndexers::test_expanded_indexer\", \"xarray/tests/test_indexing.py::TestIndexers::test_asarray_tuplesafe\", \"xarray/tests/test_indexing.py::TestIndexers::test_stacked_multiindex_min_max\", \"xarray/tests/test_indexing.py::TestIndexers::test_convert_label_indexer\", \"xarray/tests/test_indexing.py::TestIndexers::test_convert_unsorted_datetime_index_raises\", \"xarray/tests/test_indexing.py::TestIndexers::test_get_dim_indexers\", \"xarray/tests/test_indexing.py::TestIndexers::test_remap_label_indexers\", \"xarray/tests/test_indexing.py::TestLazyArray::test_slice_slice\", \"xarray/tests/test_indexing.py::TestLazyArray::test_lazily_indexed_array\", \"xarray/tests/test_indexing.py::TestLazyArray::test_vectorized_lazily_indexed_array\", \"xarray/tests/test_indexing.py::TestCopyOnWriteArray::test_setitem\", \"xarray/tests/test_indexing.py::TestCopyOnWriteArray::test_sub_array\", \"xarray/tests/test_indexing.py::TestCopyOnWriteArray::test_index_scalar\", \"xarray/tests/test_indexing.py::TestMemoryCachedArray::test_wrapper\", \"xarray/tests/test_indexing.py::TestMemoryCachedArray::test_sub_array\", \"xarray/tests/test_indexing.py::TestMemoryCachedArray::test_setitem\", \"xarray/tests/test_indexing.py::TestMemoryCachedArray::test_index_scalar\", \"xarray/tests/test_indexing.py::test_base_explicit_indexer\", \"xarray/tests/test_indexing.py::test_invalid_for_all[BasicIndexer]\", \"xarray/tests/test_indexing.py::test_invalid_for_all[OuterIndexer]\", \"xarray/tests/test_indexing.py::test_invalid_for_all[VectorizedIndexer]\", \"xarray/tests/test_indexing.py::test_basic_indexer\", \"xarray/tests/test_indexing.py::test_outer_indexer\", \"xarray/tests/test_indexing.py::test_vectorized_indexer\", \"xarray/tests/test_indexing.py::Test_vectorized_indexer::test_arrayize_vectorized_indexer\", \"xarray/tests/test_indexing.py::test_decompose_slice[sl0-100]\", \"xarray/tests/test_indexing.py::test_decompose_slice[sl0-99]\", \"xarray/tests/test_indexing.py::test_decompose_slice[sl1-100]\", \"xarray/tests/test_indexing.py::test_decompose_slice[sl1-99]\", \"xarray/tests/test_indexing.py::test_decompose_slice[sl2-100]\", \"xarray/tests/test_indexing.py::test_decompose_slice[sl2-99]\", \"xarray/tests/test_indexing.py::test_decompose_slice[sl3-100]\", \"xarray/tests/test_indexing.py::test_decompose_slice[sl3-99]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-vectorized-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-vectorized-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-outer-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-outer-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-outer_scalar-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-outer_scalar-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-outer_scalar2-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-outer_scalar2-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-outer1vec-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-outer1vec-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-basic-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-basic-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-basic1-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-basic1-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-basic2-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-basic2-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-basic3-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[BASIC-basic3-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-vectorized-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-vectorized-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-outer-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-outer-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-outer_scalar-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-outer_scalar-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-outer_scalar2-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-outer_scalar2-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-outer1vec-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-outer1vec-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-basic-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-basic-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-basic1-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-basic1-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-basic2-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-basic2-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-basic3-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER-basic3-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-vectorized-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-vectorized-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-outer-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-outer-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-outer_scalar-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-outer_scalar-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-outer_scalar2-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-outer_scalar2-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-outer1vec-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-outer1vec-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-basic-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-basic-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-basic1-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-basic1-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-basic2-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-basic2-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-basic3-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[OUTER_1VECTOR-basic3-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-vectorized-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-vectorized-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-outer-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-outer-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-outer_scalar-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-outer_scalar-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-outer_scalar2-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-outer_scalar2-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-outer1vec-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-outer1vec-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-basic-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-basic-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-basic1-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-basic1-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-basic2-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-basic2-shape1]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-basic3-shape0]\", \"xarray/tests/test_indexing.py::test_decompose_indexers[VECTORIZED-basic3-shape1]\", \"xarray/tests/test_indexing.py::test_implicit_indexing_adapter\", \"xarray/tests/test_indexing.py::test_implicit_indexing_adapter_copy_on_write\", \"xarray/tests/test_indexing.py::test_outer_indexer_consistency_with_broadcast_indexes_vectorized\", \"xarray/tests/test_indexing.py::test_create_mask_outer_indexer\", \"xarray/tests/test_indexing.py::test_create_mask_vectorized_indexer\", \"xarray/tests/test_indexing.py::test_create_mask_basic_indexer\", \"xarray/tests/test_indexing.py::test_create_mask_dask\", \"xarray/tests/test_indexing.py::test_create_mask_error\", \"xarray/tests/test_indexing.py::test_posify_mask_subindexer[indices0-expected0]\", \"xarray/tests/test_indexing.py::test_posify_mask_subindexer[indices1-expected1]\", \"xarray/tests/test_indexing.py::test_posify_mask_subindexer[indices2-expected2]\", \"xarray/tests/test_indexing.py::test_posify_mask_subindexer[indices3-expected3]\", \"xarray/tests/test_indexing.py::test_posify_mask_subindexer[indices4-expected4]\", \"xarray/tests/test_indexing.py::test_posify_mask_subindexer[indices5-expected5]\", \"xarray/tests/test_indexing.py::test_posify_mask_subindexer[indices6-expected6]\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.868144",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}