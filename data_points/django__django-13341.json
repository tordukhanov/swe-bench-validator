{
  "repo": "django/django",
  "instance_id": "django__django-13341",
  "base_commit": "7ca42974ee087a82b6f7f6874ca2b25e42a9a584",
  "patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -1,5 +1,4 @@\n import logging\n-import warnings\n from functools import update_wrapper\n \n from django.core.exceptions import ImproperlyConfigured\n@@ -10,8 +9,6 @@\n from django.template.response import TemplateResponse\n from django.urls import reverse\n from django.utils.decorators import classonlymethod\n-from django.utils.deprecation import RemovedInDjango40Warning\n-from django.utils.functional import lazy\n \n logger = logging.getLogger('django.request')\n \n@@ -155,32 +152,14 @@ def get_template_names(self):\n \n \n class TemplateView(TemplateResponseMixin, ContextMixin, View):\n-    \"\"\"Render a template.\"\"\"\n+    \"\"\"\n+    Render a template. Pass keyword arguments from the URLconf to the context.\n+    \"\"\"\n     def get(self, request, *args, **kwargs):\n-        # RemovedInDjango40Warning: when the deprecation ends, replace with:\n-        #   context = self.get_context_data()\n-        context_kwargs = _wrap_url_kwargs_with_deprecation_warning(kwargs)\n-        context = self.get_context_data(**context_kwargs)\n+        context = self.get_context_data(**kwargs)\n         return self.render_to_response(context)\n \n \n-# RemovedInDjango40Warning\n-def _wrap_url_kwargs_with_deprecation_warning(url_kwargs):\n-    context_kwargs = {}\n-    for key, value in url_kwargs.items():\n-        # Bind into function closure.\n-        def access_value(key=key, value=value):\n-            warnings.warn(\n-                'TemplateView passing URL kwargs to the context is '\n-                'deprecated. Reference %s in your template through '\n-                'view.kwargs instead.' % key,\n-                RemovedInDjango40Warning, stacklevel=2,\n-            )\n-            return value\n-        context_kwargs[key] = lazy(access_value, type(value))()\n-    return context_kwargs\n-\n-\n class RedirectView(View):\n     \"\"\"Provide a redirect on any GET request.\"\"\"\n     permanent = False\n",
  "test_patch": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -2,17 +2,12 @@\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n-from django.test import (\n-    RequestFactory, SimpleTestCase, TestCase, ignore_warnings,\n-    override_settings,\n-)\n+from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n from django.urls import resolve\n-from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n-from .models import Artist\n \n \n class SimpleView(View):\n@@ -352,6 +347,25 @@ def test_template_engine(self):\n         view = TemplateView.as_view(template_name='generic_views/using.html', template_engine='jinja2')\n         self.assertEqual(view(request).render().content, b'Jinja2\\n')\n \n+    def test_template_params(self):\n+        \"\"\"\n+        A generic template view passes kwargs as context.\n+        \"\"\"\n+        response = self.client.get('/template/simple/bar/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context['foo'], 'bar')\n+        self.assertIsInstance(response.context['view'], View)\n+\n+    def test_extra_template_params(self):\n+        \"\"\"\n+        A template view can be customized to return extra context.\n+        \"\"\"\n+        response = self.client.get('/template/custom/bar/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context['foo'], 'bar')\n+        self.assertEqual(response.context['key'], 'value')\n+        self.assertIsInstance(response.context['view'], View)\n+\n     def test_cached_views(self):\n         \"\"\"\n         A template view can be cached\n@@ -570,54 +584,3 @@ def test_template_mixin_without_template(self):\n         )\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             view.get_template_names()\n-\n-\n-@override_settings(ROOT_URLCONF='generic_views.urls')\n-class DeprecationTests(TestCase):\n-    rf = RequestFactory()\n-\n-    @ignore_warnings(category=RemovedInDjango40Warning)\n-    def test_template_params(self):\n-        \"\"\"A generic template view passes kwargs as context.\"\"\"\n-        response = self.client.get('/template/simple/bar/')\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.context['foo'], 'bar')\n-        self.assertIsInstance(response.context['view'], View)\n-\n-    @ignore_warnings(category=RemovedInDjango40Warning)\n-    def test_extra_template_params(self):\n-        \"\"\"A template view can be customized to return extra context.\"\"\"\n-        response = self.client.get('/template/custom/bar1/bar2/')\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.context['foo1'], 'bar1')\n-        self.assertEqual(response.context['foo2'], 'bar2')\n-        self.assertEqual(response.context['key'], 'value')\n-        self.assertIsInstance(response.context['view'], View)\n-\n-    def test_template_params_warning(self):\n-        response = self.client.get('/template/custom/bar1/bar2/')\n-        self.assertEqual(response.status_code, 200)\n-        msg = (\n-            'TemplateView passing URL kwargs to the context is deprecated. '\n-            'Reference %s in your template through view.kwargs instead.'\n-        )\n-        with self.assertRaisesMessage(RemovedInDjango40Warning, msg % 'foo1'):\n-            str(response.context['foo1'])\n-        with self.assertRaisesMessage(RemovedInDjango40Warning, msg % 'foo2'):\n-            str(response.context['foo2'])\n-        self.assertEqual(response.context['key'], 'value')\n-        self.assertIsInstance(response.context['view'], View)\n-\n-    @ignore_warnings(category=RemovedInDjango40Warning)\n-    def test_template_params_filtering(self):\n-        class ArtistView(TemplateView):\n-            template_name = 'generic_views/about.html'\n-\n-            def get_context_data(self, *, artist_name, **kwargs):\n-                context = super().get_context_data(**kwargs)\n-                artist = Artist.objects.get(name=artist_name)\n-                return {**context, 'artist': artist}\n-\n-        artist = Artist.objects.create(name='Rene Magritte')\n-        response = ArtistView.as_view()(self.rf.get('/'), artist_name=artist.name)\n-        self.assertEqual(response.context_data['artist'], artist)\ndiff --git a/tests/generic_views/urls.py b/tests/generic_views/urls.py\n--- a/tests/generic_views/urls.py\n+++ b/tests/generic_views/urls.py\n@@ -12,10 +12,7 @@\n     path('template/no_template/', TemplateView.as_view()),\n     path('template/login_required/', login_required(TemplateView.as_view())),\n     path('template/simple/<foo>/', TemplateView.as_view(template_name='generic_views/about.html')),\n-    path(\n-        'template/custom/<foo1>/<foo2>/',\n-        views.CustomTemplateView.as_view(template_name='generic_views/about.html'),\n-    ),\n+    path('template/custom/<foo>/', views.CustomTemplateView.as_view(template_name='generic_views/about.html')),\n     path(\n         'template/content_type/',\n         TemplateView.as_view(template_name='generic_views/robots.txt', content_type='text/plain'),\n",
  "problem_statement": "Stop TemplateView automatically passing kwargs into the context\nDescription\n\t\nOnly TemplateView pushes self.kwargs to the context. ListView does not, I yet have to check others.\nThis is inconsistency and, I think, it should be fixed.\nTemplateView.get_context_data()'s kwargs returns SimpleLazyObjects that causes a crash when filtering.\nDescription\n\t\nExample Code that works in 3.0, but not in 3.1:\nclass OfferView(TemplateView):\n\ttemplate_name = \"offers/offer.html\"\n\tdef get_context_data(self, **kwargs):\n\t\toffer_slug = kwargs.get(\"offer_slug\", \"\")\n\t\toffer = get_object_or_404(Account, slug=offer_slug)\n\t\treturn {\"offer\": offer, \"offer_slug\": offer_slug}\nIn order to make this work in 3.1, you have to explicitly convert the result of kwargs.get() to a string to get the SimpleLazyObject to resolve:\nclass OfferView(TemplateView):\n\ttemplate_name = \"offers/offer.html\"\n\tdef get_context_data(self, **kwargs):\n\t\toffer_slug = kwargs.get(\"offer_slug\", \"\")\n\t\toffer = get_object_or_404(Account, slug=str(offer_slug))\n\t\treturn {\"offer\": offer, \"offer_slug\": offer_slug}\nThe error generated if you don't is:\nError binding parameter 0 - probably unsupported type\nfrom django/db/backends/sqlite3/operations.py, line 144, in _quote_params_for_last_executed_query\nIn both cases, the urls.py looks like:\npath(\n\t\t\"/offers/<slug:offer_slug>/\",\n\t\tOfferView.as_view(),\n\t\tname=\"offer_view\",\n\t),\nWhen debugging, I found that offer_slug (coming in from kwargs.get) was of type 'SimpleLazyObject' in Django 3.1, and when I explicitly converted it to a string, get_object_or_404 behaved as expected.\nThis is using Python 3.7.8 with SQLite.\n",
  "hints_text": "Setting this DDN pending comment from someone who uses class-based views. Seems like a new feature rather than a bug, in any case.\nâ€‹https://github.com/django/django/pull/753 The CBV: BaseDetailView ProcessFormView BaseListView Did not push the kwargs into the context\nThe ticket is not fixed until patch in merged into the django. Please don't set status to closed until it's not closed.\nThis can be backwards incompatible in keys in kwargs clash with keys in the output of get_context_data(). The current behavior might be for backwards compatibility with the now-removed function-based generic views. Maybe this was discussed on django-developers? This would need docs (release notes + check if the CBV docs need to be updated), and tests.\nI am strongly the other way on this issue - I think the feature is wrong in TemplateView and should be deprecated. For example, it means that it's hard to have context_object_name and slug_url_kwarg the same - whether you get the object or the slug would be rather arbitrary.\nAgreed with mjtamlyn, so marking this wontfix.\nJacob - what's your opinion on taking the deprecation the other way - this one-off behaviour of TemplateView has bitten me before. Personally I'd like the views to be consistently *without* this feature.\nIIRC TemplateView works like this for backwards-compatibility with the (now defunct) function-based generic views. It would make sense to normalize it now, assuming we can figure out a deprecation path.\nHmm, I know I'd done something at some point using these views which had bitten me, but I can't remember what it was. This is near impossible to deprecate nicely and probably shouldn't be that big a deal. That said, it didn't exist before 1.5 in its current form - the way these arguments are used was (backwardsly incompatibly) changed then anyway. Personally I'd like to just remove it as it \"feels wrong\", but whether that is a good idea is another question. History lesson Django 1.2 had direct_to_template which would pass through URL kwargs as an object called params into the context Django 1.3 & 1.4 continued this pattern in the new TemplateView Django 1.5 changed TemplateView to place the arguments directly into the context (and deprecated direct_to_template) My personal feeling is that using URLconf kwargs directly in a view is a bad pattern, but it is a historical Django pattern. This, and the ability to customise CBVs using the as_view() call, are the remaining parts of it.\nI ran into the same problem as @mjtamlyn with TemplateView; and I also think that having the URL kwargs directly in the context_data is an anti pattern. The anti pattern added to the discrepancy between the different views is IMO a problem big enough to warrant a documented backward incompatible change. I tried to think of a transparent deprecation cycle, but what I found was at best fragile and hackish. One option would be to ask people to set a kwargs_to_context = False argument on their TemplatView to get the \"new\" behavior and therefore opt out from the DeprecationWarning. Thoughts?\nI'm not much of a user of CBVs but that deprecation plan sounds like it would work.\nNote that there is a distinction between passing **kwargs to get_context_data() and having get_context_data() return **kwargs. Personally, I would favor TemplateView continuing to pass **kwargs to get_context_data() even if its return value is changed by default not to include kwargs. This would keep overriding get_context_data() simple because you can simply access **kwargs in the method without having to decide between **kwargs and self.kwargs. For consistency, I would like it if all generic views passed the full view's keyword arguments to get_context_data(). Some classes like ProcessFormView restrict what is passed to get_context_data(), which was surprising to me because then **kwargs for the method differs from self.kwargs. I just opened #21964 which is about this issue.\nIn 4ed53475: Fixed #19878 -- Deprecated TemplateView passing URL kwargs into context.\nThanks for the report. get_object_or_404() and QuerySet.filter() with SimpleLazyObject throw the same exception in Django 2.2 or 3.0. TemplateView.get_context_data()'s kwargs returns SimpleLazyObjects in Django 3.1 which causes a crash. Passing URL kwargs into context is deprecated (see #19878) but should still work in Django 3.1 and 3.2. Regression in 4ed534758cb6a11df9f49baddecca5a6cdda9311. Reproduced at 60626162f76f26d32a38d18151700cb041201fb3.\nUsing lazy() instead of SimpleLazyObject() fixes this - PR is up.\nâ€‹PR\nIn 20799cc0: Fixes #31877 -- Used lazy() for TemplateView kwarg deprecation warning. SimpleLazyObjects cause a crash when filtering. Thanks Tim L. White for the report. Regression in 4ed534758cb6a11df9f49baddecca5a6cdda9311.\nIn 9ae40d81: [3.1.x] Fixes #31877 -- Used lazy() for TemplateView kwarg deprecation warning. SimpleLazyObjects cause a crash when filtering. Thanks Tim L. White for the report. Regression in 4ed534758cb6a11df9f49baddecca5a6cdda9311. Backport of 20799cc0a6d98816b9ef0577e24691bd26b80d7d from master\nPassing deprecated keyword arguments to a queryset with lookups, e.g. Artist.objects.get(name__iexact=artist_name), still crashes on PostgreSQL: django.db.utils.ProgrammingError: can't adapt type '__proxy__' Thanks Mohit Solanki for the report.\nðŸ˜Ÿ Hmm this is a tough one. psycopg2 uses type(obj) to look for its \"adapter\" - in its C extension: â€‹https://github.com/psycopg/psycopg2/blob/e14e3385b4809ec4223894f8c7a009b1560eb41d/psycopg/microprotocols.c#L151 . So this \"proxy\" approach may not be feasible. I know of a more accurate proxy wrapper that proxies more attributes than Django's lazy objects - wrapt.ObjectProxy - â€‹https://wrapt.readthedocs.io/en/latest/wrappers.html#object-proxy. But docs there acknowledge that it can't even make type() work, whilst it makes isinstance() work. Any ideas of alternative approaches?\nThere isn't really a general purpose way of wrapping primitive/arbitrary types like this in Python that won't hit some corner cases. You can make an object appear to be a duck by adapting it's quacking dynamically (i.e wrapt.ObjectProxy), but if someone looks close enough they can always see that it's actually dog. And on the whole that's a good thing, IMO. Our use of kwargs makes this harder as we lose the ability to construct a container that can trigger the deprecation warning which would be the typical easy approach. There is no way to control what lands on the other side of get_context_data() (it's always a plain kwargs dict), and there is no way to construct a wrapper value that looks _exactly_ like the value it's wrapping. That basically leaves only \"crazy\" approaches, some of which are fun to consider but none of which are suitable. Here's one that uses settrace() to do what we need: import sys class DeprecatedWrapper(dict): def __getitem__(self, key): warnings.warn(\"stop right there, scoundrel!\") return super().__getitem__(key) def wrap_kwargs(frame, *args): frame.f_locals['kwargs'] = DeprecatedWrapper(frame['kwargs']) sys.settrace(None) class TemplateView(...): def get(...): ... sys.settrace(wrap_kwargs) context = self.get_context_data(**context_kwargs) return self.render_to_response(context) Given these issues, I'm not sure if we can go ahead with deprecating this.",
  "created_at": "2020-08-24T07:17:59Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_extra_template_params (generic_views.test_base.TemplateViewTest)\", \"test_template_params (generic_views.test_base.TemplateViewTest)\"]",
  "PASS_TO_PASS": "[\"test_template_mixin_without_template (generic_views.test_base.SingleObjectTemplateResponseMixinTest)\", \"test_overwrite_queryset (generic_views.test_base.UseMultipleObjectMixinTest)\", \"test_use_queryset_from_view (generic_views.test_base.UseMultipleObjectMixinTest)\", \"test_get_context_data_super (generic_views.test_base.GetContextDataTest)\", \"test_object_at_custom_name_in_context_data (generic_views.test_base.GetContextDataTest)\", \"test_object_in_get_context_data (generic_views.test_base.GetContextDataTest)\", \"test_args_kwargs_request_on_self (generic_views.test_base.ViewTest)\", \"test_calling_more_than_once (generic_views.test_base.ViewTest)\", \"test_class_attributes (generic_views.test_base.ViewTest)\", \"test_direct_instantiation (generic_views.test_base.ViewTest)\", \"test_dispatch_decoration (generic_views.test_base.ViewTest)\", \"test_get_and_head (generic_views.test_base.ViewTest)\", \"test_get_and_post (generic_views.test_base.ViewTest)\", \"test_get_only (generic_views.test_base.ViewTest)\", \"test_head_no_get (generic_views.test_base.ViewTest)\", \"test_invalid_keyword_argument (generic_views.test_base.ViewTest)\", \"test_no_init_args (generic_views.test_base.ViewTest)\", \"test_no_init_kwargs (generic_views.test_base.ViewTest)\", \"test_not_calling_parent_setup_error (generic_views.test_base.ViewTest)\", \"test_options (generic_views.test_base.ViewTest)\", \"test_options_for_get_and_post_view (generic_views.test_base.ViewTest)\", \"test_options_for_get_view (generic_views.test_base.ViewTest)\", \"test_options_for_post_view (generic_views.test_base.ViewTest)\", \"test_overridden_setup (generic_views.test_base.ViewTest)\", \"test_pathological_http_method (generic_views.test_base.ViewTest)\", \"test_setup_adds_args_kwargs_request (generic_views.test_base.ViewTest)\", \"test_setup_get_and_head (generic_views.test_base.ViewTest)\", \"Default is a temporary redirect\", \"test_direct_instantiation (generic_views.test_base.RedirectViewTest)\", \"GET arguments can be included in the redirected URL\", \"GET arguments can be URL-encoded when included in the redirected URL\", \"Named pattern parameter should reverse to the matching pattern\", \"test_named_url_pattern_using_args (generic_views.test_base.RedirectViewTest)\", \"Without any configuration, returns HTTP 410 GONE\", \"Redirection URLs can be parameterized\", \"Permanent redirects are an option\", \"regression for #16705\", \"Temporary redirects are an option\", \"test_cached_views (generic_views.test_base.TemplateViewTest)\", \"test_content_type (generic_views.test_base.TemplateViewTest)\", \"test_extra_context (generic_views.test_base.TemplateViewTest)\", \"test_get (generic_views.test_base.TemplateViewTest)\", \"test_get_generic_template (generic_views.test_base.TemplateViewTest)\", \"test_get_template_attribute (generic_views.test_base.TemplateViewTest)\", \"test_head (generic_views.test_base.TemplateViewTest)\", \"test_resolve_login_required_view (generic_views.test_base.TemplateViewTest)\", \"test_resolve_view (generic_views.test_base.TemplateViewTest)\", \"test_template_engine (generic_views.test_base.TemplateViewTest)\", \"test_template_name_required (generic_views.test_base.TemplateViewTest)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.653650",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}