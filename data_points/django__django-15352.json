{
  "repo": "django/django",
  "instance_id": "django__django-15352",
  "base_commit": "022a864a5d1de28b853f009566a24be251e90d96",
  "patch": "diff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -110,7 +110,7 @@ class SafeExceptionReporterFilter:\n \n     cleansed_substitute = \"********************\"\n     hidden_settings = _lazy_re_compile(\n-        \"API|TOKEN|KEY|SECRET|PASS|SIGNATURE\", flags=re.I\n+        \"API|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE\", flags=re.I\n     )\n \n     def cleanse_setting(self, key, value):\n@@ -118,10 +118,13 @@ def cleanse_setting(self, key, value):\n         Cleanse an individual setting key/value of sensitive content. If the\n         value is a dictionary, recursively cleanse the keys in that dictionary.\n         \"\"\"\n-        try:\n-            is_sensitive = self.hidden_settings.search(key)\n-        except TypeError:\n-            is_sensitive = False\n+        if key == settings.SESSION_COOKIE_NAME:\n+            is_sensitive = True\n+        else:\n+            try:\n+                is_sensitive = self.hidden_settings.search(key)\n+            except TypeError:\n+                is_sensitive = False\n \n         if is_sensitive:\n             cleansed = self.cleansed_substitute\n@@ -158,6 +161,14 @@ def get_safe_request_meta(self, request):\n             return {}\n         return {k: self.cleanse_setting(k, v) for k, v in request.META.items()}\n \n+    def get_safe_cookies(self, request):\n+        \"\"\"\n+        Return a dictionary of request.COOKIES with sensitive values redacted.\n+        \"\"\"\n+        if not hasattr(request, \"COOKIES\"):\n+            return {}\n+        return {k: self.cleanse_setting(k, v) for k, v in request.COOKIES.items()}\n+\n     def is_active(self, request):\n         \"\"\"\n         This filter is to add safety in production environments (i.e. DEBUG\n@@ -359,6 +370,7 @@ def get_traceback_data(self):\n             \"frames\": frames,\n             \"request\": self.request,\n             \"request_meta\": self.filter.get_safe_request_meta(self.request),\n+            \"request_COOKIES_items\": self.filter.get_safe_cookies(self.request).items(),\n             \"user_str\": user_str,\n             \"filtered_POST_items\": list(\n                 self.filter.get_post_parameters(self.request).items()\n@@ -376,7 +388,6 @@ def get_traceback_data(self):\n         if self.request is not None:\n             c[\"request_GET_items\"] = self.request.GET.items()\n             c[\"request_FILES_items\"] = self.request.FILES.items()\n-            c[\"request_COOKIES_items\"] = self.request.COOKIES.items()\n             c[\"request_insecure_uri\"] = self._get_raw_insecure_uri()\n             c[\"raising_view_name\"] = get_caller(self.request)\n \n",
  "test_patch": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1696,6 +1696,12 @@ def test_exception_report_uses_meta_filtering(self):\n         )\n         self.assertNotIn(b\"super_secret\", response.content)\n \n+    @override_settings(SESSION_COOKIE_NAME=\"djangosession\")\n+    def test_cleanse_session_cookie_value(self):\n+        self.client.cookies.load({\"djangosession\": \"should not be displayed\"})\n+        response = self.client.get(\"/raises500/\")\n+        self.assertNotContains(response, \"should not be displayed\", status_code=500)\n+\n \n class CustomExceptionReporterFilter(SafeExceptionReporterFilter):\n     cleansed_substitute = \"XXXXXXXXXXXXXXXXXXXX\"\n",
  "problem_statement": "Session ID should be cleansed from error reporting\nDescription\n\t\nthe session ID should be cleansed when reporting errors, just like other credentials. A patch is available at ​https://github.com/django/django/pull/15352.\nSee also #29714 and ​https://groups.google.com/g/django-developers/c/H5hJxpwYFcw.\nA quick github search yielded multiple occasions where session IDs ended up in public bug reports:\n​https://github.com/GibbsConsulting/django-plotly-dash/issues/376\n​https://github.com/ome/omero-mapr/issues/42\n​https://github.com/jhelbert/great_teaching_network/issues/220\n​https://github.com/dzone/osqa/issues/355\nI am sure you could find many more. This could potentially be exploited by automatically searching for such requests and hijacking the associated accounts.\n",
  "hints_text": "",
  "created_at": "2022-01-24T10:03:44Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_cleanse_session_cookie_value (view_tests.tests.test_debug.ExceptionReporterFilterTests)\"]",
  "PASS_TO_PASS": "[\"test_repr (view_tests.tests.test_debug.CallableSettingWrapperTests)\", \"test_sensitive_post_parameters_http_request (view_tests.tests.test_debug.DecoratorsTests)\", \"test_sensitive_post_parameters_not_called (view_tests.tests.test_debug.DecoratorsTests)\", \"test_sensitive_variables_not_called (view_tests.tests.test_debug.DecoratorsTests)\", \"test_cleansed_substitute_override (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_hidden_settings_override (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_setting_allows_custom_subclass (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"Ensure the debug view works when a database exception is raised by\", \"test_400 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_400_bad_request (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_403 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_404 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_template_not_found_error (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"An exception report can be generated even for a disallowed host.\", \"test_message_only (view_tests.tests.test_debug.PlainTextReportTests)\", \"An exception report can be generated for just a request\", \"An exception report can be generated without request\", \"A simple exception report can be generated\", \"A message can be provided in addition to a request\", \"An exception report can be generated for requests with 'items' in\", \"test_template_exception (view_tests.tests.test_debug.PlainTextReportTests)\", \"It's possible to assign an exception reporter filter to\", \"test_non_html_response_encoding (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"Request info can bee seen in the default error reports for\", \"No POST parameters can be seen in the default error reports\", \"Sensitive POST parameters cannot be seen in the default\", \"test_400 (view_tests.tests.test_debug.DebugViewTests)\", \"test_400_bad_request (view_tests.tests.test_debug.DebugViewTests)\", \"test_403 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_empty_path_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_classbased_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_classbased_technical_500 (view_tests.tests.test_debug.DebugViewTests)\", \"Make sure that the default URLconf template is shown instead of the\", \"test_exception_reporter_from_request (view_tests.tests.test_debug.DebugViewTests)\", \"test_exception_reporter_from_settings (view_tests.tests.test_debug.DebugViewTests)\", \"test_files (view_tests.tests.test_debug.DebugViewTests)\", \"Make sure if you don't specify a template, the debug view doesn't blow up.\", \"Numeric IDs and fancy traceback context blocks line numbers shouldn't\", \"Regression test for bug #21530.\", \"test_safestring_in_exception (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404_converter_raise_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_500 (view_tests.tests.test_debug.DebugViewTests)\", \"The templates are loaded directly, not via a template loader, and\", \"test_template_exceptions (view_tests.tests.test_debug.DebugViewTests)\", \"Tests for not existing file\", \"test_template_override_exception_reporter (view_tests.tests.test_debug.DebugViewTests)\", \"A UnicodeError displays a portion of the problematic string. HTML in\", \"The ExceptionReporter supports Unix, Windows and Macintosh EOL markers\", \"The error page can be rendered if the current user can't be retrieved\", \"test_get_raw_insecure_uri (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Don't trip over exceptions generated by crafted objects when\", \"test_innermost_exception_without_traceback (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Safe strings in local variables are escaped.\", \"test_message_only (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_mid_stack_exception_without_traceback (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Non-UTF-8 exceptions/values should not make the output generation choke.\", \"test_reporting_frames_for_cyclic_reference (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_source_not_match (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_without_source (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_of_nested_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_sharing_traceback (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_suppressed_context (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Large values should not create a large HTML.\", \"importlib is not a frozen app, but its loader thinks it's frozen which\", \"Unprintable values should not make the output generation choke.\", \"Callable settings should not be evaluated in the debug page (#21345).\", \"Callable settings which forbid to set attributes should not break\", \"test_cleanse_setting_basic (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_ignore_case (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_recurses_in_dictionary (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_recurses_in_dictionary_with_non_string_key (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_recurses_in_list_tuples (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"A dict setting containing a non-string key should not break the\", \"test_exception_report_uses_meta_filtering (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"#21098 -- Sensitive POST parameters cannot be seen in the\", \"Everything (request info and frame variables) can bee seen\", \"No POST parameters and frame variables can be seen in the\", \"test_request_meta_filtering (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"Sensitive variables don't leak in the sensitive_variables decorator's\", \"The sensitive_variables decorator works with object methods.\", \"Sensitive POST parameters and frame variables cannot be\", \"The debug page should not show some sensitive settings\", \"The debug page should filter out some sensitive information found in\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.726487",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}