{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12443",
  "base_commit": "88cdeb85a9303a7b580952b720703a4aca9dc1c0",
  "patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -21,10 +21,8 @@\n from .base import _transform_selected\n from .label import _encode, _encode_check_unknown\n \n-\n range = six.moves.range\n \n-\n __all__ = [\n     'OneHotEncoder',\n     'OrdinalEncoder'\n@@ -383,6 +381,12 @@ def _handle_deprecations(self, X):\n                     \"The 'categorical_features' keyword is deprecated in \"\n                     \"version 0.20 and will be removed in 0.22. You can \"\n                     \"use the ColumnTransformer instead.\", DeprecationWarning)\n+                # Set categories_ to empty list if no categorical columns exist\n+                n_features = X.shape[1]\n+                sel = np.zeros(n_features, dtype=bool)\n+                sel[np.asarray(self.categorical_features)] = True\n+                if sum(sel) == 0:\n+                    self.categories_ = []\n                 self._legacy_mode = True\n             self._categorical_features = self.categorical_features\n         else:\n@@ -591,6 +595,7 @@ def transform(self, X):\n         X_out : sparse matrix if sparse=True else a 2-d array\n             Transformed input.\n         \"\"\"\n+        check_is_fitted(self, 'categories_')\n         if self._legacy_mode:\n             return _transform_selected(X, self._legacy_transform, self.dtype,\n                                        self._categorical_features,\n@@ -683,7 +688,7 @@ def get_feature_names(self, input_features=None):\n         cats = self.categories_\n         if input_features is None:\n             input_features = ['x%d' % i for i in range(len(cats))]\n-        elif(len(input_features) != len(self.categories_)):\n+        elif len(input_features) != len(self.categories_):\n             raise ValueError(\n                 \"input_features should have length equal to number of \"\n                 \"features ({}), got {}\".format(len(self.categories_),\n",
  "test_patch": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -7,6 +7,7 @@\n from scipy import sparse\n import pytest\n \n+from sklearn.exceptions import NotFittedError\n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raises\n@@ -250,6 +251,28 @@ def test_one_hot_encoder_handle_unknown():\n     assert_raises(ValueError, oh.fit, X)\n \n \n+def test_one_hot_encoder_not_fitted():\n+    X = np.array([['a'], ['b']])\n+    enc = OneHotEncoder(categories=['a', 'b'])\n+    msg = (\"This OneHotEncoder instance is not fitted yet. \"\n+           \"Call 'fit' with appropriate arguments before using this method.\")\n+    with pytest.raises(NotFittedError, match=msg):\n+        enc.transform(X)\n+\n+\n+def test_one_hot_encoder_no_categorical_features():\n+    X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n+\n+    cat = [False, False, False]\n+    enc = OneHotEncoder(categorical_features=cat)\n+    with ignore_warnings(category=(DeprecationWarning, FutureWarning)):\n+        X_tr = enc.fit_transform(X)\n+    expected_features = np.array(list(), dtype='object')\n+    assert_array_equal(X, X_tr)\n+    assert_array_equal(enc.get_feature_names(), expected_features)\n+    assert enc.categories_ == []\n+\n+\n @pytest.mark.parametrize(\"output_dtype\", [np.int32, np.float32, np.float64])\n @pytest.mark.parametrize(\"input_dtype\", [np.int32, np.float32, np.float64])\n def test_one_hot_encoder_dtype(input_dtype, output_dtype):\n",
  "problem_statement": "OneHotEncoder throws unhelpful error messages when tranform called prior to fit\n<!--\r\nIf your issue is a usage question, submit it here instead:\r\n- StackOverflow with the scikit-learn tag: https://stackoverflow.com/questions/tagged/scikit-learn\r\n- Mailing List: https://mail.python.org/mailman/listinfo/scikit-learn\r\nFor more information, see User Questions: http://scikit-learn.org/stable/support.html#user-questions\r\n-->\r\n\r\n<!-- Instructions For Filing a Bug: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#filing-bugs -->\r\n\r\n#### Description\r\n<!-- Example: Joblib Error thrown when calling fit on LatentDirichletAllocation with evaluate_every > 0-->\r\n\r\nOneHotEncoder throws an `AttributeError` instead of a `NotFittedError` when tranform is called prior to fit\r\n\r\n- if `transform` is called prior to being fit an `AttributeError` is thrown\r\n- if `categories` includes arrays of of unicode type\r\n\r\n#### Steps/Code to Reproduce\r\n<!--\r\nExample:\r\n```python\r\nfrom sklearn.feature_extraction.text import CountVectorizer\r\nfrom sklearn.decomposition import LatentDirichletAllocation\r\n\r\ndocs = [\"Help I have a bug\" for i in range(1000)]\r\n\r\nvectorizer = CountVectorizer(input=docs, analyzer='word')\r\nlda_features = vectorizer.fit_transform(docs)\r\n\r\nlda_model = LatentDirichletAllocation(\r\n    n_topics=10,\r\n    learning_method='online',\r\n    evaluate_every=10,\r\n    n_jobs=4,\r\n)\r\nmodel = lda_model.fit(lda_features)\r\n```\r\nIf the code is too long, feel free to put it in a public gist and link\r\nit in the issue: https://gist.github.com\r\n-->\r\n\r\n```\r\nimport numpy as np\r\nfrom sklearn.preprocessing import OneHotEncoder\r\n\r\ncategories = sorted(['Dillon', 'Joel', 'Earl', 'Liz'])\r\nX = np.array(['Dillon', 'Dillon', 'Joel', 'Liz', 'Liz', 'Earl']).reshape(-1, 1)\r\n\r\nohe = OneHotEncoder(categories=[sorted(categories)])\r\nohe.transform(X)\r\n# Throws AttributeError: 'OneHotEncoder' object has no attribute '_legacy_mode'\r\n```\r\n\r\n#### Expected Results\r\n<!-- Example: No error is thrown. Please paste or describe the expected results.-->\r\n`NotFittedError: This OneHotEncoder instance is not fitted yet. Call 'fit' with appropriate arguments before using this method.`\r\n#### Actual Results\r\n<!-- Please paste or specifically describe the actual output or traceback. -->\r\n`Throws AttributeError: 'OneHotEncoder' object has no attribute '_legacy_mode'`\r\n#### Versions\r\n<!--\r\nPlease run the following snippet and paste the output below.\r\nFor scikit-learn >= 0.20:\r\nimport sklearn; sklearn.show_versions()\r\nFor scikit-learn < 0.20:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"NumPy\", numpy.__version__)\r\nimport scipy; print(\"SciPy\", scipy.__version__)\r\nimport sklearn; print(\"Scikit-Learn\", sklearn.__version__)\r\n-->\r\n```\r\nSystem\r\n------\r\n    python: 3.6.3 (default, Oct  4 2017, 06:09:38)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.37)]\r\nexecutable: /Users/dillon/Envs/mewtwo/bin/python3.6\r\n   machine: Darwin-18.0.0-x86_64-i386-64bit\r\n\r\nBLAS\r\n----\r\n    macros: NO_ATLAS_INFO=3, HAVE_CBLAS=None\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps\r\n-----------\r\n       pip: 18.1\r\nsetuptools: 39.0.1\r\n   sklearn: 0.20.0\r\n     numpy: 1.14.2\r\n     scipy: 1.0.1\r\n    Cython: None\r\n    pandas: 0.22.0\r\n```\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
  "hints_text": "Thanks for the report. Do you want to work on a fix?\nSure, I am happy to.\nThanks!",
  "created_at": "2018-10-23T17:02:13Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_not_fitted\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_no_categorical_features\"]",
  "PASS_TO_PASS": "[\"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_sparse\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dense\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_deprecationwarnings\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_force_new_behaviour\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categorical_features\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_handle_unknown\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-int32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-float32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-float64]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-int32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-float32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-float64]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-int32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-float32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-float64]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[int32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[float32]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[float64]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_set_params\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[mixed]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[mixed]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[string]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[object-string-cat]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_unsorted_categories\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories_mixed_columns\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_pandas\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names_unicode\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[mixed]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[object-string-cat]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_inverse\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_missing[numeric]\", \"sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_missing[object]\", \"sklearn/preprocessing/tests/test_encoders.py::test_encoder_dtypes\", \"sklearn/preprocessing/tests/test_encoders.py::test_encoder_dtypes_pandas\", \"sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_warning\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.964221",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}