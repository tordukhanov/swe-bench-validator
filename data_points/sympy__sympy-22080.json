{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-22080",
  "base_commit": "3f8c8c2377cb8e0daaf8073e8d03ac7d87580813",
  "patch": "diff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py\n--- a/sympy/printing/codeprinter.py\n+++ b/sympy/printing/codeprinter.py\n@@ -9,7 +9,7 @@\n from sympy.core.mul import _keep_coeff\n from sympy.core.symbol import Symbol\n from sympy.printing.str import StrPrinter\n-from sympy.printing.precedence import precedence\n+from sympy.printing.precedence import precedence, PRECEDENCE\n \n \n class requires:\n@@ -487,7 +487,14 @@ def _print_Mul(self, expr):\n \n         a = a or [S.One]\n \n-        a_str = [self.parenthesize(x, prec) for x in a]\n+        if len(a) == 1 and sign == \"-\":\n+            # Unary minus does not have a SymPy class, and hence there's no\n+            # precedence weight associated with it, Python's unary minus has\n+            # an operator precedence between multiplication and exponentiation,\n+            # so we use this to compute a weight.\n+            a_str = [self.parenthesize(a[0], 0.5*(PRECEDENCE[\"Pow\"]+PRECEDENCE[\"Mul\"]))]\n+        else:\n+            a_str = [self.parenthesize(x, prec) for x in a]\n         b_str = [self.parenthesize(x, prec) for x in b]\n \n         # To parenthesize Pow with exp = -1 and having more than one Symbol\ndiff --git a/sympy/printing/precedence.py b/sympy/printing/precedence.py\n--- a/sympy/printing/precedence.py\n+++ b/sympy/printing/precedence.py\n@@ -40,6 +40,7 @@\n     \"MatAdd\": PRECEDENCE[\"Add\"],\n     \"MatPow\": PRECEDENCE[\"Pow\"],\n     \"MatrixSolve\": PRECEDENCE[\"Mul\"],\n+    \"Mod\": PRECEDENCE[\"Mul\"],\n     \"TensAdd\": PRECEDENCE[\"Add\"],\n     # As soon as `TensMul` is a subclass of `Mul`, remove this:\n     \"TensMul\": PRECEDENCE[\"Mul\"],\n",
  "test_patch": "diff --git a/sympy/codegen/tests/test_rewriting.py b/sympy/codegen/tests/test_rewriting.py\n--- a/sympy/codegen/tests/test_rewriting.py\n+++ b/sympy/codegen/tests/test_rewriting.py\n@@ -266,10 +266,10 @@ def test_create_expand_pow_optimization():\n     # gh issue 15335\n     assert cc(x**(-4)) == '1.0/(x*x*x*x)'\n     assert cc(x**(-5)) == 'pow(x, -5)'\n-    assert cc(-x**4) == '-x*x*x*x'\n-    assert cc(x**4 - x**2) == '-x*x + x*x*x*x'\n+    assert cc(-x**4) == '-(x*x*x*x)'\n+    assert cc(x**4 - x**2) == '-(x*x) + x*x*x*x'\n     i = Symbol('i', integer=True)\n-    assert cc(x**i - x**2) == 'pow(x, i) - x*x'\n+    assert cc(x**i - x**2) == 'pow(x, i) - (x*x)'\n     # gh issue 20753\n     cc2 = lambda x: ccode(optimize(x, [create_expand_pow_optimization(\n         4, base_req=lambda b: b.is_Function)]))\ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -30,6 +30,8 @@ def test_PythonCodePrinter():\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n+    assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n+    assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -264,7 +264,15 @@ def test_issue_12984():\n         warnings.simplefilter(\"ignore\", RuntimeWarning)\n         assert str(func_numexpr(-1, 24, 42)) == 'nan'\n \n-#================== Test some functions ============================\n+\n+def test_empty_modules():\n+    x, y = symbols('x y')\n+    expr = -(x % y)\n+\n+    no_modules = lambdify([x, y], expr)\n+    empty_modules = lambdify([x, y], expr, modules=[])\n+    assert no_modules(3, 7) == empty_modules(3, 7)\n+    assert no_modules(3, 7) == -3\n \n \n def test_exponentiation():\n",
  "problem_statement": "Mod function lambdify bug\nDescription:\r\nWhen lambdifying any function of structure like `expr * Mod(a, b)` sympy moves the multiplier into the first argument of Mod, like `Mod(expr * a, b)`, WHEN we specify `modules=[]`\r\n\r\nThis is an example from Sympy online shell\r\n```\r\n>>> from sympy import Mod, lambdify, symbols\r\n>>> x, y = symbols('x y')\r\n>>> expr = -Mod(x, y)\r\n>>> f = lambdify([x, y], expr)\r\n>>> f(3, 7)\r\n-3\r\n>>> inspect.getsource(f)\r\ndef _lambdifygenerated(x, y):\r\n    return (-mod(x, y))\r\n\r\n\r\n>>> g = lambdify([x, y], expr, modules=[])\r\n>>> g(3, 7)\r\n4\r\n>>> inspect.getsource(g)\r\ndef _lambdifygenerated(x, y):\r\n    return (-x % y)\r\n```\n",
  "hints_text": "Looks like the printer has the precedence order wrong for - and %\nA more direct reproduction\r\n\r\n```py\r\n>>> pycode(-Mod(x, y))\r\n'-x % y'\r\n```\nhi @asmeurer i  should i please take this up !!\r\n\r\nplease do reply ..\r\nthanks:-)\nHello anyone working on this?? I would like to help.\r\n\nI want to contribute on this issue. Is this issue still open?\nIs this issue still open? I would like to contribute.\nCan i work on this one...or someone's already working on it?\nIt seems to me that all that should be done is just add the key 'Mod' with its value smaller than that of 'Mul' to the map objects PRECEDENCE and PRECEDENCE_VALUES in sympy/sympy/printer/precedence.py. Being new in Sympy, though, I might be missing some viewpoints. Do any tutor agree with this idea? And if so, how much should the value be (maybe 45 or 49, given that of 'Add' is 40 and that of 'Mul' is 50?)\nOops! I found this doesn't work in cases like -Mod(x, y), because the precedence of Mul object drops to 40 if the coefficient is negative. What is this rule for? I'm thinking of just doing away with this rule.\n@kom-bu I was doing this change of PRECEDENCE for MOD (to be a little bit less), but it eventually caused failings on many tests (cause some of the printing uses Mod(x,y) and some x % y and so the PRECEDENCE changes with each printing method). I have added a predefined PRECEDENCE for each printing method to fix this, and maybe it resolves #18788 too.\ni want to work in this issue,,,or someone is working on this issue or not?\r\n\r\n\n@itsamittomar I have a PR for this issue, but I'm not sure what is the status of this PR right now.\n@danil179 so can I  solve this issue\nI suppose, the issue is not `Mod` itself.\r\nI found [this line](https://github.com/sympy/sympy/blob/8a64de4322db8b1195e930e86fabd925e85e19ea/sympy/utilities/lambdify.py#L740):\r\n```\r\nif modules is None:\r\n    ... # adding standard modules to list\r\n```\r\n\r\nAs we can see, there is no check if `modules` is an empty list -- we only check if it's `None`.\r\nI came up with a solution: we could check if `modules` is None or if `len(modules) == 0`.\r\n\r\nI think I'll write it right now and link the PR to this issue. \nIs someone working on this issue? I would like to work on this.\n@hardikkat24, I sent a PR a couple of days ago. It is still not approved nor rejected. I think, that we should wait for feedback on that.\nI want to work on #17737 issue. May be the precedence causes the error . Allow me to work on this issue.\nThere is a PR #20507 that seems to fix this but has merge conflicts. I'm not sure if it fixes the precedence issue with `pycode` though.\nI resolved the merge conflicts from #20507 and added a small additional check that the values are not only the same, but also correct. This is now #22032.\r\n\r\nThe `pycode` issue is still not correct though.",
  "created_at": "2021-09-12T07:11:33Z",
  "version": "1.10",
  "FAIL_TO_PASS": "[\"test_create_expand_pow_optimization\", \"test_PythonCodePrinter\", \"test_empty_modules\"]",
  "PASS_TO_PASS": "[\"test_log2_opt\", \"test_exp2_opt\", \"test_expm1_opt\", \"test_expm1_two_exp_terms\", \"test_cosm1_opt\", \"test_cosm1_two_cos_terms\", \"test_expm1_cosm1_mixed\", \"test_log1p_opt\", \"test_optims_c99\", \"test_matsolve\", \"test_logaddexp_opt\", \"test_logaddexp2_opt\", \"test_sinc_opts\", \"test_optims_numpy\", \"test_PythonCodePrinter_standard\", \"test_MpmathPrinter\", \"test_NumPyPrinter\", \"test_SciPyPrinter\", \"test_pycode_reserved_words\", \"test_sqrt\", \"test_frac\", \"test_printmethod\", \"test_codegen_ast_nodes\", \"test_issue_14283\", \"test_NumPyPrinter_print_seq\", \"test_issue_16535_16536\", \"test_Integral\", \"test_fresnel_integrals\", \"test_beta\", \"test_airy\", \"test_airy_prime\", \"test_no_args\", \"test_single_arg\", \"test_list_args\", \"test_nested_args\", \"test_str_args\", \"test_own_namespace_1\", \"test_own_namespace_2\", \"test_own_module\", \"test_bad_args\", \"test_atoms\", \"test_sympy_lambda\", \"test_math_lambda\", \"test_mpmath_lambda\", \"test_number_precision\", \"test_mpmath_precision\", \"test_math_transl\", \"test_mpmath_transl\", \"test_exponentiation\", \"test_trig\", \"test_integral\", \"test_double_integral\", \"test_vector_simple\", \"test_vector_discontinuous\", \"test_trig_symbolic\", \"test_trig_float\", \"test_docs\", \"test_math\", \"test_sin\", \"test_matrix\", \"test_issue9474\", \"test_sym_single_arg\", \"test_sym_list_args\", \"test_sym_integral\", \"test_namespace_order\", \"test_namespace_type\", \"test_imps\", \"test_imps_errors\", \"test_imps_wrong_args\", \"test_lambdify_imps\", \"test_dummification\", \"test_curly_matrix_symbol\", \"test_python_keywords\", \"test_lambdify_docstring\", \"test_special_printers\", \"test_true_false\", \"test_issue_2790\", \"test_issue_12092\", \"test_issue_14911\", \"test_ITE\", \"test_Min_Max\", \"test_issue_12173\", \"test_sinc_mpmath\", \"test_lambdify_dummy_arg\", \"test_lambdify_mixed_symbol_dummy_args\", \"test_lambdify_inspect\", \"test_issue_14941\", \"test_lambdify_Derivative_arg_issue_16468\", \"test_imag_real\", \"test_single_e\", \"test_beta_math\"]",
  "environment_setup_commit": "fd40404e72921b9e52a5f9582246e4a6cd96c431",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.148816",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}