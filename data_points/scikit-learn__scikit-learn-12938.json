{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12938",
  "base_commit": "acb810647233e40839203ac553429e8663169702",
  "patch": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -321,7 +321,10 @@ def _pprint_key_val_tuple(self, object, stream, indent, allowance, context,\n         self._format(v, stream, indent + len(rep) + len(middle), allowance,\n                      context, level)\n \n-    _dispatch = pprint.PrettyPrinter._dispatch\n+    # Note: need to copy _dispatch to prevent instances of the builtin\n+    # PrettyPrinter class to call methods of _EstimatorPrettyPrinter (see issue\n+    # 12906)\n+    _dispatch = pprint.PrettyPrinter._dispatch.copy()\n     _dispatch[BaseEstimator.__repr__] = _pprint_estimator\n     _dispatch[KeyValTuple.__repr__] = _pprint_key_val_tuple\n \n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,4 +1,5 @@\n import re\n+from pprint import PrettyPrinter\n \n from sklearn.utils._pprint import _EstimatorPrettyPrinter\n from sklearn.pipeline import make_pipeline, Pipeline\n@@ -311,3 +312,11 @@ def test_length_constraint():\n     vectorizer = CountVectorizer(vocabulary=vocabulary)\n     repr_ = vectorizer.__repr__()\n     assert '...' in repr_\n+\n+\n+def test_builtin_prettyprinter():\n+    # non regression test than ensures we can still use the builtin\n+    # PrettyPrinter class for estimators (as done e.g. by joblib).\n+    # Used to be a bug\n+\n+    PrettyPrinter().pprint(LogisticRegression())\n",
  "problem_statement": "AttributeError: 'PrettyPrinter' object has no attribute '_indent_at_name'\nThere's a failing example in #12654, and here's a piece of code causing it:\r\n\r\n```\r\nimport numpy as np\r\nfrom sklearn.datasets import load_digits\r\nfrom sklearn.model_selection import GridSearchCV\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.svm import LinearSVC\r\nfrom sklearn.decomposition import PCA, NMF\r\nfrom sklearn.feature_selection import SelectKBest, chi2\r\n\r\npipe = Pipeline([\r\n    # the reduce_dim stage is populated by the param_grid\r\n    ('reduce_dim', 'passthrough'),\r\n    ('classify', LinearSVC(dual=False, max_iter=10000))\r\n])\r\n\r\nN_FEATURES_OPTIONS = [2, 4, 8]\r\nC_OPTIONS = [1, 10, 100, 1000]\r\nparam_grid = [\r\n    {\r\n        'reduce_dim': [PCA(iterated_power=7), NMF()],\r\n        'reduce_dim__n_components': N_FEATURES_OPTIONS,\r\n        'classify__C': C_OPTIONS\r\n    },\r\n    {\r\n        'reduce_dim': [SelectKBest(chi2)],\r\n        'reduce_dim__k': N_FEATURES_OPTIONS,\r\n        'classify__C': C_OPTIONS\r\n    },\r\n]\r\nreducer_labels = ['PCA', 'NMF', 'KBest(chi2)']\r\n\r\ngrid = GridSearchCV(pipe, cv=5, n_jobs=1, param_grid=param_grid, iid=False)\r\nfrom tempfile import mkdtemp\r\nfrom joblib import Memory\r\n\r\n# Create a temporary folder to store the transformers of the pipeline\r\ncachedir = mkdtemp()\r\nmemory = Memory(location=cachedir, verbose=10)\r\ncached_pipe = Pipeline([('reduce_dim', PCA()),\r\n                        ('classify', LinearSVC(dual=False, max_iter=10000))],\r\n                       memory=memory)\r\n\r\n# This time, a cached pipeline will be used within the grid search\r\ngrid = GridSearchCV(cached_pipe, cv=5, n_jobs=1, param_grid=param_grid,\r\n                    iid=False, error_score='raise')\r\ndigits = load_digits()\r\ngrid.fit(digits.data, digits.target)\r\n```\r\n\r\nWith the stack trace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/path/to//sklearn/model_selection/_search.py\", line 683, in fit\r\n    self._run_search(evaluate_candidates)\r\n  File \"/path/to//sklearn/model_selection/_search.py\", line 1127, in _run_search\r\n    evaluate_candidates(ParameterGrid(self.param_grid))\r\n  File \"/path/to//sklearn/model_selection/_search.py\", line 672, in evaluate_candidates\r\n    cv.split(X, y, groups)))\r\n  File \"/path/to//sklearn/externals/joblib/parallel.py\", line 917, in __call__\r\n    if self.dispatch_one_batch(iterator):\r\n  File \"/path/to//sklearn/externals/joblib/parallel.py\", line 759, in dispatch_one_batch\r\n    self._dispatch(tasks)\r\n  File \"/path/to//sklearn/externals/joblib/parallel.py\", line 716, in _dispatch\r\n    job = self._backend.apply_async(batch, callback=cb)\r\n  File \"/path/to//sklearn/externals/joblib/_parallel_backends.py\", line 182, in apply_async\r\n    result = ImmediateResult(func)\r\n  File \"/path/to//sklearn/externals/joblib/_parallel_backends.py\", line 549, in __init__\r\n    self.results = batch()\r\n  File \"/path/to//sklearn/externals/joblib/parallel.py\", line 225, in __call__\r\n    for func, args, kwargs in self.items]\r\n  File \"/path/to//sklearn/externals/joblib/parallel.py\", line 225, in <listcomp>\r\n    for func, args, kwargs in self.items]\r\n  File \"/path/to//sklearn/model_selection/_validation.py\", line 511, in _fit_and_score\r\n    estimator.fit(X_train, y_train, **fit_params)\r\n  File \"/path/to//sklearn/pipeline.py\", line 279, in fit\r\n    Xt, fit_params = self._fit(X, y, **fit_params)\r\n  File \"/path/to//sklearn/pipeline.py\", line 244, in _fit\r\n    **fit_params_steps[name])\r\n  File \"/path/to/packages/joblib/memory.py\", line 555, in __call__\r\n    return self._cached_call(args, kwargs)[0]\r\n  File \"/path/to/packages/joblib/memory.py\", line 521, in _cached_call\r\n    out, metadata = self.call(*args, **kwargs)\r\n  File \"/path/to/packages/joblib/memory.py\", line 720, in call\r\n    print(format_call(self.func, args, kwargs))\r\n  File \"/path/to/packages/joblib/func_inspect.py\", line 356, in format_call\r\n    path, signature = format_signature(func, *args, **kwargs)\r\n  File \"/path/to/packages/joblib/func_inspect.py\", line 340, in format_signature\r\n    formatted_arg = _format_arg(arg)\r\n  File \"/path/to/packages/joblib/func_inspect.py\", line 322, in _format_arg\r\n    formatted_arg = pformat(arg, indent=2)\r\n  File \"/path/to/packages/joblib/logger.py\", line 54, in pformat\r\n    out = pprint.pformat(obj, depth=depth, indent=indent)\r\n  File \"/usr/lib64/python3.7/pprint.py\", line 58, in pformat\r\n    compact=compact).pformat(object)\r\n  File \"/usr/lib64/python3.7/pprint.py\", line 144, in pformat\r\n    self._format(object, sio, 0, 0, {}, 0)\r\n  File \"/usr/lib64/python3.7/pprint.py\", line 167, in _format\r\n    p(self, object, stream, indent, allowance, context, level + 1)\r\n  File \"/path/to//sklearn/utils/_pprint.py\", line 175, in _pprint_estimator\r\n    if self._indent_at_name:\r\nAttributeError: 'PrettyPrinter' object has no attribute '_indent_at_name'\r\n```\n",
  "hints_text": "So for some reason, the class is `PrettyPrinter` instead of `_EstimatorPrettyPrinter` (which inherits from `PrettyPrinter`). But then \r\n\r\n```\r\n  File \"/path/to//sklearn/utils/_pprint.py\", line 175, in _pprint_estimator\r\n    if self._indent_at_name:\r\n```\r\nis a `_EstimatorPrettyPrinter` method, so I don't understand what is going on...\nBy the way, the example also fails on master, but somehow circle-ci on master is green.\nby example, I mean `examples/compose/plot_compare_reduction.py`\n#12791 seems to be failing for the same reason.\n> By the way, the example also fails on master, but somehow circle-ci on master is green.\r\n\r\nI can't see it in the latest build on master.\nI think it's because this line should involve a `.copy()`\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/684d8a221d29ba1659e81961425a2380a9930044/sklearn/utils/_pprint.py#L324\nThat is, we're modifying the dispatch used by `pprint` rather than the local pretty printer.\r\n\r\nBut then it's also a bit weird that `_pprint_estimator` references a method on the class. This means that configuration of the class cannot affect anything. Rather it should perhaps reference an instancemethod on a configuration singleton??\n@NicolasHug do you want to fix this, or should we open it to other contributors?\nThanks @jnothman I didn't see this, I'll take a look\nYou're right @jnothman we should make a copy of `_dispatch`.\r\n\r\nThe bug happens because joblib is using calling `PrettyPrinter` on an estimator, but the `_dispatch` dict of `PrettyPrinter` has been updated by `_EstimatorPrettyPrinter` sometime before, which tells the `PrettyPrinter` object to use `_EstimatorPrettyPrinter._pprint_estimator` to render `BaseEstimator` objects.\r\n\r\nPretty sneaky... I'll submit a fix.\r\n\r\n\r\nHowever I'm not sure I follow your concern about `_pprint_estimator` being a method.\nMinimal reproducing example:\r\n\r\n```\r\nfrom pprint import PrettyPrinter\r\nfrom sklearn.linear_model import LogisticRegression\r\n\r\nlr = LogisticRegression()\r\nPrettyPrinter().pprint(lr)\r\n```",
  "created_at": "2019-01-07T22:45:53Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_pprint.py::test_builtin_prettyprinter\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_pprint.py::test_basic\", \"sklearn/utils/tests/test_pprint.py::test_changed_only\", \"sklearn/utils/tests/test_pprint.py::test_pipeline\", \"sklearn/utils/tests/test_pprint.py::test_deeply_nested\", \"sklearn/utils/tests/test_pprint.py::test_gridsearch\", \"sklearn/utils/tests/test_pprint.py::test_gridsearch_pipeline\", \"sklearn/utils/tests/test_pprint.py::test_n_max_elements_to_show\", \"sklearn/utils/tests/test_pprint.py::test_length_constraint\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.969513",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}