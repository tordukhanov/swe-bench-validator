{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-24145",
  "base_commit": "55af30d981ea2f72346ff93602f0b3b740cfe8d6",
  "patch": "diff --git a/sklearn/preprocessing/_polynomial.py b/sklearn/preprocessing/_polynomial.py\n--- a/sklearn/preprocessing/_polynomial.py\n+++ b/sklearn/preprocessing/_polynomial.py\n@@ -13,11 +13,11 @@\n \n from ..base import BaseEstimator, TransformerMixin\n from ..utils import check_array\n+from ..utils.fixes import sp_version, parse_version\n from ..utils.validation import check_is_fitted, FLOAT_DTYPES, _check_sample_weight\n from ..utils.validation import _check_feature_names_in\n from ..utils._param_validation import Interval, StrOptions\n from ..utils.stats import _weighted_percentile\n-from ..utils.fixes import sp_version, parse_version\n \n from ._csr_polynomial_expansion import (\n     _csr_polynomial_expansion,\n@@ -574,8 +574,6 @@ def transform(self, X):\n         return XP\n \n \n-# TODO:\n-# - sparse support (either scipy or own cython solution)?\n class SplineTransformer(TransformerMixin, BaseEstimator):\n     \"\"\"Generate univariate B-spline bases for features.\n \n@@ -635,8 +633,14 @@ class SplineTransformer(TransformerMixin, BaseEstimator):\n         i.e. a column of ones. It acts as an intercept term in a linear models.\n \n     order : {'C', 'F'}, default='C'\n-        Order of output array. 'F' order is faster to compute, but may slow\n-        down subsequent estimators.\n+        Order of output array in the dense case. `'F'` order is faster to compute, but\n+        may slow down subsequent estimators.\n+\n+    sparse_output : bool, default=False\n+        Will return sparse CSR matrix if set True else will return an array. This\n+        option is only available with `scipy>=1.8`.\n+\n+        .. versionadded:: 1.2\n \n     Attributes\n     ----------\n@@ -699,6 +703,7 @@ class SplineTransformer(TransformerMixin, BaseEstimator):\n         ],\n         \"include_bias\": [\"boolean\"],\n         \"order\": [StrOptions({\"C\", \"F\"})],\n+        \"sparse_output\": [\"boolean\"],\n     }\n \n     def __init__(\n@@ -710,6 +715,7 @@ def __init__(\n         extrapolation=\"constant\",\n         include_bias=True,\n         order=\"C\",\n+        sparse_output=False,\n     ):\n         self.n_knots = n_knots\n         self.degree = degree\n@@ -717,6 +723,7 @@ def __init__(\n         self.extrapolation = extrapolation\n         self.include_bias = include_bias\n         self.order = order\n+        self.sparse_output = sparse_output\n \n     @staticmethod\n     def _get_base_knot_positions(X, n_knots=10, knots=\"uniform\", sample_weight=None):\n@@ -843,6 +850,12 @@ def fit(self, X, y=None, sample_weight=None):\n             elif not np.all(np.diff(base_knots, axis=0) > 0):\n                 raise ValueError(\"knots must be sorted without duplicates.\")\n \n+        if self.sparse_output and sp_version < parse_version(\"1.8.0\"):\n+            raise ValueError(\n+                \"Option sparse_output=True is only available with scipy>=1.8.0, \"\n+                f\"but here scipy=={sp_version} is used.\"\n+            )\n+\n         # number of knots for base interval\n         n_knots = base_knots.shape[0]\n \n@@ -934,7 +947,7 @@ def transform(self, X):\n \n         Returns\n         -------\n-        XBS : ndarray of shape (n_samples, n_features * n_splines)\n+        XBS : {ndarray, sparse matrix} of shape (n_samples, n_features * n_splines)\n             The matrix of features, where n_splines is the number of bases\n             elements of the B-splines, n_knots + degree - 1.\n         \"\"\"\n@@ -946,6 +959,19 @@ def transform(self, X):\n         n_splines = self.bsplines_[0].c.shape[1]\n         degree = self.degree\n \n+        # TODO: Remove this condition, once scipy 1.10 is the minimum version.\n+        #       Only scipy => 1.10 supports design_matrix(.., extrapolate=..).\n+        #       The default (implicit in scipy < 1.10) is extrapolate=False.\n+        scipy_1_10 = sp_version >= parse_version(\"1.10.0\")\n+        # Note: self.bsplines_[0].extrapolate is True for extrapolation in\n+        # [\"periodic\", \"continue\"]\n+        if scipy_1_10:\n+            use_sparse = self.sparse_output\n+            kwargs_extrapolate = {\"extrapolate\": self.bsplines_[0].extrapolate}\n+        else:\n+            use_sparse = self.sparse_output and not self.bsplines_[0].extrapolate\n+            kwargs_extrapolate = dict()\n+\n         # Note that scipy BSpline returns float64 arrays and converts input\n         # x=X[:, i] to c-contiguous float64.\n         n_out = self.n_features_out_ + n_features * (1 - self.include_bias)\n@@ -953,7 +979,10 @@ def transform(self, X):\n             dtype = X.dtype\n         else:\n             dtype = np.float64\n-        XBS = np.zeros((n_samples, n_out), dtype=dtype, order=self.order)\n+        if use_sparse:\n+            output_list = []\n+        else:\n+            XBS = np.zeros((n_samples, n_out), dtype=dtype, order=self.order)\n \n         for i in range(n_features):\n             spl = self.bsplines_[i]\n@@ -972,20 +1001,53 @@ def transform(self, X):\n                 else:\n                     x = X[:, i]\n \n-                XBS[:, (i * n_splines) : ((i + 1) * n_splines)] = spl(x)\n-\n-            else:\n-                xmin = spl.t[degree]\n-                xmax = spl.t[-degree - 1]\n+                if use_sparse:\n+                    XBS_sparse = BSpline.design_matrix(\n+                        x, spl.t, spl.k, **kwargs_extrapolate\n+                    )\n+                    if self.extrapolation == \"periodic\":\n+                        # See the construction of coef in fit. We need to add the last\n+                        # degree spline basis function to the first degree ones and\n+                        # then drop the last ones.\n+                        # Note: See comment about SparseEfficiencyWarning below.\n+                        XBS_sparse = XBS_sparse.tolil()\n+                        XBS_sparse[:, :degree] += XBS_sparse[:, -degree:]\n+                        XBS_sparse = XBS_sparse[:, :-degree]\n+                else:\n+                    XBS[:, (i * n_splines) : ((i + 1) * n_splines)] = spl(x)\n+            else:  # extrapolation in (\"constant\", \"linear\")\n+                xmin, xmax = spl.t[degree], spl.t[-degree - 1]\n+                # spline values at boundaries\n+                f_min, f_max = spl(xmin), spl(xmax)\n                 mask = (xmin <= X[:, i]) & (X[:, i] <= xmax)\n-                XBS[mask, (i * n_splines) : ((i + 1) * n_splines)] = spl(X[mask, i])\n+                if use_sparse:\n+                    mask_inv = ~mask\n+                    x = X[:, i].copy()\n+                    # Set some arbitrary values outside boundary that will be reassigned\n+                    # later.\n+                    x[mask_inv] = spl.t[self.degree]\n+                    XBS_sparse = BSpline.design_matrix(x, spl.t, spl.k)\n+                    # Note: Without converting to lil_matrix we would get:\n+                    # scipy.sparse._base.SparseEfficiencyWarning: Changing the sparsity\n+                    # structure of a csr_matrix is expensive. lil_matrix is more\n+                    # efficient.\n+                    if np.any(mask_inv):\n+                        XBS_sparse = XBS_sparse.tolil()\n+                        XBS_sparse[mask_inv, :] = 0\n+                else:\n+                    XBS[mask, (i * n_splines) : ((i + 1) * n_splines)] = spl(X[mask, i])\n \n             # Note for extrapolation:\n             # 'continue' is already returned as is by scipy BSplines\n             if self.extrapolation == \"error\":\n                 # BSpline with extrapolate=False does not raise an error, but\n-                # output np.nan.\n-                if np.any(np.isnan(XBS[:, (i * n_splines) : ((i + 1) * n_splines)])):\n+                # outputs np.nan.\n+                if (use_sparse and np.any(np.isnan(XBS_sparse.data))) or (\n+                    not use_sparse\n+                    and np.any(\n+                        np.isnan(XBS[:, (i * n_splines) : ((i + 1) * n_splines)])\n+                    )\n+                ):\n                     raise ValueError(\n                         \"X contains values beyond the limits of the knots.\"\n                     )\n@@ -995,21 +1057,29 @@ def transform(self, X):\n                 # Only the first degree and last degree number of splines\n                 # have non-zero values at the boundaries.\n \n-                # spline values at boundaries\n-                f_min = spl(xmin)\n-                f_max = spl(xmax)\n                 mask = X[:, i] < xmin\n                 if np.any(mask):\n-                    XBS[mask, (i * n_splines) : (i * n_splines + degree)] = f_min[\n-                        :degree\n-                    ]\n+                    if use_sparse:\n+                        # Note: See comment about SparseEfficiencyWarning above.\n+                        XBS_sparse = XBS_sparse.tolil()\n+                        XBS_sparse[mask, :degree] = f_min[:degree]\n+\n+                    else:\n+                        XBS[mask, (i * n_splines) : (i * n_splines + degree)] = f_min[\n+                            :degree\n+                        ]\n \n                 mask = X[:, i] > xmax\n                 if np.any(mask):\n-                    XBS[\n-                        mask,\n-                        ((i + 1) * n_splines - degree) : ((i + 1) * n_splines),\n-                    ] = f_max[-degree:]\n+                    if use_sparse:\n+                        # Note: See comment about SparseEfficiencyWarning above.\n+                        XBS_sparse = XBS_sparse.tolil()\n+                        XBS_sparse[mask, -degree:] = f_max[-degree:]\n+                    else:\n+                        XBS[\n+                            mask,\n+                            ((i + 1) * n_splines - degree) : ((i + 1) * n_splines),\n+                        ] = f_max[-degree:]\n \n             elif self.extrapolation == \"linear\":\n                 # Continue the degree first and degree last spline bases\n@@ -1018,8 +1088,6 @@ def transform(self, X):\n                 # Note that all others have derivative = value = 0 at the\n                 # boundaries.\n \n-                # spline values at boundaries\n-                f_min, f_max = spl(xmin), spl(xmax)\n                 # spline derivatives = slopes at boundaries\n                 fp_min, fp_max = spl(xmin, nu=1), spl(xmax, nu=1)\n                 # Compute the linear continuation.\n@@ -1030,16 +1098,57 @@ def transform(self, X):\n                 for j in range(degree):\n                     mask = X[:, i] < xmin\n                     if np.any(mask):\n-                        XBS[mask, i * n_splines + j] = (\n-                            f_min[j] + (X[mask, i] - xmin) * fp_min[j]\n-                        )\n+                        linear_extr = f_min[j] + (X[mask, i] - xmin) * fp_min[j]\n+                        if use_sparse:\n+                            # Note: See comment about SparseEfficiencyWarning above.\n+                            XBS_sparse = XBS_sparse.tolil()\n+                            XBS_sparse[mask, j] = linear_extr\n+                        else:\n+                            XBS[mask, i * n_splines + j] = linear_extr\n \n                     mask = X[:, i] > xmax\n                     if np.any(mask):\n                         k = n_splines - 1 - j\n-                        XBS[mask, i * n_splines + k] = (\n-                            f_max[k] + (X[mask, i] - xmax) * fp_max[k]\n-                        )\n+                        linear_extr = f_max[k] + (X[mask, i] - xmax) * fp_max[k]\n+                        if use_sparse:\n+                            # Note: See comment about SparseEfficiencyWarning above.\n+                            XBS_sparse = XBS_sparse.tolil()\n+                            XBS_sparse[mask, k : k + 1] = linear_extr[:, None]\n+                        else:\n+                            XBS[mask, i * n_splines + k] = linear_extr\n+\n+            if use_sparse:\n+                if not sparse.isspmatrix_csr(XBS_sparse):\n+                    XBS_sparse = XBS_sparse.tocsr()\n+                output_list.append(XBS_sparse)\n+\n+        if use_sparse:\n+            # TODO: Remove this conditional error when the minimum supported version of\n+            # SciPy is 1.9.2\n+            # `scipy.sparse.hstack` breaks in scipy<1.9.2\n+            # when `n_features_out_ > max_int32`\n+            max_int32 = np.iinfo(np.int32).max\n+            all_int32 = True\n+            for mat in output_list:\n+                all_int32 &= mat.indices.dtype == np.int32\n+            if (\n+                sp_version < parse_version(\"1.9.2\")\n+                and self.n_features_out_ > max_int32\n+                and all_int32\n+            ):\n+                raise ValueError(\n+                    \"In scipy versions `<1.9.2`, the function `scipy.sparse.hstack`\"\n+                    \" produces negative columns when:\\n1. The output shape contains\"\n+                    \" `n_cols` too large to be represented by a 32bit signed\"\n+                    \" integer.\\n. All sub-matrices to be stacked have indices of\"\n+                    \" dtype `np.int32`.\\nTo avoid this error, either use a version\"\n+                    \" of scipy `>=1.9.2` or alter the `SplineTransformer`\"\n+                    \" transformer to produce fewer than 2^31 output features\"\n+                )\n+            XBS = sparse.hstack(output_list)\n+        elif self.sparse_output:\n+            # TODO: Remove ones scipy 1.10 is the minimum version. See comments above.\n+            XBS = sparse.csr_matrix(XBS)\n \n         if self.include_bias:\n             return XBS\n",
  "test_patch": "diff --git a/sklearn/preprocessing/tests/test_polynomial.py b/sklearn/preprocessing/tests/test_polynomial.py\n--- a/sklearn/preprocessing/tests/test_polynomial.py\n+++ b/sklearn/preprocessing/tests/test_polynomial.py\n@@ -35,6 +35,22 @@ def is_c_contiguous(a):\n     assert np.isfortran(est(order=\"F\").fit_transform(X))\n \n \n+@pytest.mark.parametrize(\n+    \"params, err_msg\",\n+    [\n+        ({\"knots\": [[1]]}, r\"Number of knots, knots.shape\\[0\\], must be >= 2.\"),\n+        ({\"knots\": [[1, 1], [2, 2]]}, r\"knots.shape\\[1\\] == n_features is violated\"),\n+        ({\"knots\": [[1], [0]]}, \"knots must be sorted without duplicates.\"),\n+    ],\n+)\n+def test_spline_transformer_input_validation(params, err_msg):\n+    \"\"\"Test that we raise errors for invalid input in SplineTransformer.\"\"\"\n+    X = [[1], [2]]\n+\n+    with pytest.raises(ValueError, match=err_msg):\n+        SplineTransformer(**params).fit(X)\n+\n+\n @pytest.mark.parametrize(\"extrapolation\", [\"continue\", \"periodic\"])\n def test_spline_transformer_integer_knots(extrapolation):\n     \"\"\"Test that SplineTransformer accepts integer value knot positions.\"\"\"\n@@ -109,8 +125,7 @@ def test_split_transform_feature_names_extrapolation_degree(extrapolation, degre\n def test_spline_transformer_unity_decomposition(degree, n_knots, knots, extrapolation):\n     \"\"\"Test that B-splines are indeed a decomposition of unity.\n \n-    Splines basis functions must sum up to 1 per row, if we stay in between\n-    boundaries.\n+    Splines basis functions must sum up to 1 per row, if we stay in between boundaries.\n     \"\"\"\n     X = np.linspace(0, 1, 100)[:, None]\n     # make the boundaries 0 and 1 part of X_train, for sure.\n@@ -178,8 +193,7 @@ def test_spline_transformer_linear_regression(bias, intercept):\n def test_spline_transformer_get_base_knot_positions(\n     knots, n_knots, sample_weight, expected_knots\n ):\n-    # Check the behaviour to find the positions of the knots with and without\n-    # `sample_weight`\n+    \"\"\"Check the behaviour to find knot positions with and without sample_weight.\"\"\"\n     X = np.array([[0, 2], [0, 2], [2, 2], [3, 3], [4, 6], [5, 8], [6, 14]])\n     base_knots = SplineTransformer._get_base_knot_positions(\n         X=X, knots=knots, n_knots=n_knots, sample_weight=sample_weight\n@@ -238,9 +252,7 @@ def test_spline_transformer_periodic_spline_backport():\n \n \n def test_spline_transformer_periodic_splines_periodicity():\n-    \"\"\"\n-    Test if shifted knots result in the same transformation up to permutation.\n-    \"\"\"\n+    \"\"\"Test if shifted knots result in the same transformation up to permutation.\"\"\"\n     X = np.linspace(0, 10, 101)[:, None]\n \n     transformer_1 = SplineTransformer(\n@@ -349,9 +361,10 @@ def test_spline_transformer_extrapolation(bias, intercept, degree):\n         n_knots=4, degree=degree, include_bias=bias, extrapolation=\"error\"\n     )\n     splt.fit(X)\n-    with pytest.raises(ValueError):\n+    msg = \"X contains values beyond the limits of the knots\"\n+    with pytest.raises(ValueError, match=msg):\n         splt.transform([[-10]])\n-    with pytest.raises(ValueError):\n+    with pytest.raises(ValueError, match=msg):\n         splt.transform([[5]])\n \n \n@@ -375,12 +388,94 @@ def test_spline_transformer_kbindiscretizer():\n     assert_allclose(splines, kbins, rtol=1e-13)\n \n \n+@pytest.mark.skipif(\n+    sp_version < parse_version(\"1.8.0\"),\n+    reason=\"The option `sparse_output` is available as of scipy 1.8.0\",\n+)\n+@pytest.mark.parametrize(\"degree\", range(1, 3))\n+@pytest.mark.parametrize(\"knots\", [\"uniform\", \"quantile\"])\n+@pytest.mark.parametrize(\n+    \"extrapolation\", [\"error\", \"constant\", \"linear\", \"continue\", \"periodic\"]\n+)\n+@pytest.mark.parametrize(\"include_bias\", [False, True])\n+def test_spline_transformer_sparse_output(\n+    degree, knots, extrapolation, include_bias, global_random_seed\n+):\n+    rng = np.random.RandomState(global_random_seed)\n+    X = rng.randn(200).reshape(40, 5)\n+\n+    splt_dense = SplineTransformer(\n+        degree=degree,\n+        knots=knots,\n+        extrapolation=extrapolation,\n+        include_bias=include_bias,\n+        sparse_output=False,\n+    )\n+    splt_sparse = SplineTransformer(\n+        degree=degree,\n+        knots=knots,\n+        extrapolation=extrapolation,\n+        include_bias=include_bias,\n+        sparse_output=True,\n+    )\n+\n+    splt_dense.fit(X)\n+    splt_sparse.fit(X)\n+\n+    assert sparse.isspmatrix_csr(splt_sparse.transform(X))\n+    assert_allclose(splt_dense.transform(X), splt_sparse.transform(X).toarray())\n+\n+    # extrapolation regime\n+    X_min = np.amin(X, axis=0)\n+    X_max = np.amax(X, axis=0)\n+    X_extra = np.r_[\n+        np.linspace(X_min - 5, X_min, 10), np.linspace(X_max, X_max + 5, 10)\n+    ]\n+    if extrapolation == \"error\":\n+        msg = \"X contains values beyond the limits of the knots\"\n+        with pytest.raises(ValueError, match=msg):\n+            splt_dense.transform(X_extra)\n+        msg = \"Out of bounds\"\n+        with pytest.raises(ValueError, match=msg):\n+            splt_sparse.transform(X_extra)\n+    else:\n+        assert_allclose(\n+            splt_dense.transform(X_extra), splt_sparse.transform(X_extra).toarray()\n+        )\n+\n+\n+@pytest.mark.skipif(\n+    sp_version >= parse_version(\"1.8.0\"),\n+    reason=\"The option `sparse_output` is available as of scipy 1.8.0\",\n+)\n+def test_spline_transformer_sparse_output_raise_error_for_old_scipy():\n+    \"\"\"Test that SplineTransformer with sparse=True raises for scipy<1.8.0.\"\"\"\n+    X = [[1], [2]]\n+    with pytest.raises(ValueError, match=\"scipy>=1.8.0\"):\n+        SplineTransformer(sparse_output=True).fit(X)\n+\n+\n @pytest.mark.parametrize(\"n_knots\", [5, 10])\n @pytest.mark.parametrize(\"include_bias\", [True, False])\n-@pytest.mark.parametrize(\"degree\", [3, 5])\n-def test_spline_transformer_n_features_out(n_knots, include_bias, degree):\n+@pytest.mark.parametrize(\"degree\", [3, 4])\n+@pytest.mark.parametrize(\n+    \"extrapolation\", [\"error\", \"constant\", \"linear\", \"continue\", \"periodic\"]\n+)\n+@pytest.mark.parametrize(\"sparse_output\", [False, True])\n+def test_spline_transformer_n_features_out(\n+    n_knots, include_bias, degree, extrapolation, sparse_output\n+):\n     \"\"\"Test that transform results in n_features_out_ features.\"\"\"\n-    splt = SplineTransformer(n_knots=n_knots, degree=degree, include_bias=include_bias)\n+    if sparse_output and sp_version < parse_version(\"1.8.0\"):\n+        pytest.skip(\"The option `sparse_output` is available as of scipy 1.8.0\")\n+\n+    splt = SplineTransformer(\n+        n_knots=n_knots,\n+        degree=degree,\n+        include_bias=include_bias,\n+        extrapolation=extrapolation,\n+        sparse_output=sparse_output,\n+    )\n     X = np.linspace(0, 1, 10)[:, None]\n     splt.fit(X)\n \n",
  "problem_statement": "Add sparse matrix output to SplineTransformer\n### Describe the workflow you want to enable\n\nAs B-splines naturally have a sparse structure, I'd like to have the option that `SplineTransformer` returns a sparse matrix instead of always an ndarray.\r\n```python\r\nimport numpy as np\r\nfrom sklearn.preprocessing import SplineTransformer\r\n\r\nX = np.arange(6).reshape(6, 1)\r\nspline = SplineTransformer(degree=2, n_knots=3, sparse=True)\r\nspline.fit_transform(X)\r\n```\n\n### Describe your proposed solution\n\nWith scipy >= 1.8 (yet to be released), we can use `design_matrix` from https://github.com/scipy/scipy/pull/14344.\n\n### Describe alternatives you've considered, if relevant\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2022-08-08T14:38:42Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-error-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-error-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-error-3-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-error-3-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-error-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-error-4-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-error-4-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-error-4-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-constant-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-constant-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-constant-3-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-constant-3-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-constant-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-constant-4-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-constant-4-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-constant-4-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-linear-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-linear-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-linear-3-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-linear-3-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-linear-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-linear-4-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-linear-4-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-linear-4-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-continue-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-continue-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-continue-3-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-continue-3-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-continue-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-continue-4-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-continue-4-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-continue-4-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-periodic-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-periodic-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-periodic-3-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-periodic-3-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-periodic-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-periodic-4-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-periodic-4-False-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[False-periodic-4-False-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-error-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-error-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-error-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-error-4-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-constant-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-constant-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-constant-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-constant-4-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-linear-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-linear-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-linear-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-linear-4-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-continue-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-continue-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-continue-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-continue-4-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-periodic-3-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-periodic-3-True-10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-periodic-4-True-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_n_features_out[True-periodic-4-True-10]\"]",
  "PASS_TO_PASS": "[\"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_and_spline_array_order[PolynomialFeatures]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_and_spline_array_order[SplineTransformer]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_input_validation[params0-Number\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_input_validation[params1-knots.shape\\\\\\\\[1\\\\\\\\]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_input_validation[params2-knots\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_integer_knots[continue]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_integer_knots[periodic]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_feature_names\", \"sklearn/preprocessing/tests/test_polynomial.py::test_split_transform_feature_names_extrapolation_degree[2-constant]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_split_transform_feature_names_extrapolation_degree[2-linear]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_split_transform_feature_names_extrapolation_degree[2-continue]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_split_transform_feature_names_extrapolation_degree[2-periodic]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_split_transform_feature_names_extrapolation_degree[3-constant]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_split_transform_feature_names_extrapolation_degree[3-linear]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_split_transform_feature_names_extrapolation_degree[3-continue]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_split_transform_feature_names_extrapolation_degree[3-periodic]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-uniform-3-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-uniform-3-2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-uniform-3-3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-uniform-3-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-uniform-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-uniform-4-2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-uniform-4-3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-uniform-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-quantile-3-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-quantile-3-2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-quantile-3-3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-quantile-3-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-quantile-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-quantile-4-2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-quantile-4-3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[constant-quantile-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-uniform-3-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-uniform-3-2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-uniform-3-3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-uniform-3-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-uniform-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-uniform-4-2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-uniform-4-3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-uniform-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-quantile-3-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-quantile-3-2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-quantile-3-3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-quantile-3-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-quantile-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-quantile-4-2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-quantile-4-3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_unity_decomposition[periodic-quantile-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_linear_regression[True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_linear_regression[False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_get_base_knot_positions[uniform-3-None-expected_knots0]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_get_base_knot_positions[uniform-3-sample_weight1-expected_knots1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_get_base_knot_positions[uniform-4-None-expected_knots2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_get_base_knot_positions[quantile-3-None-expected_knots3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_get_base_knot_positions[quantile-3-sample_weight4-expected_knots4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_periodic_linear_regression[True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_periodic_linear_regression[False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_periodic_spline_backport\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_periodic_splines_periodicity\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_periodic_splines_smoothness[3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_periodic_splines_smoothness[5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[1-True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[1-False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[2-True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[2-False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[3-True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[3-False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[4-True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[4-False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[5-True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_extrapolation[5-False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_spline_transformer_kbindiscretizer\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_input_validation[params0-degree=\\\\\\\\(min_degree,\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_input_validation[params1-degree=\\\\\\\\(min_degree,\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_input_validation[params2-degree=\\\\\\\\(min_degree,\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_input_validation[params3-int\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[False-3-True-False-indices0]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[False-3-False-False-indices1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[False-3-True-True-indices2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[False-3-False-True-indices3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[False-degree4-True-False-indices4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[False-degree5-False-False-indices5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[False-degree6-True-True-indices6]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[False-degree7-False-True-indices7]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csr_matrix-3-True-False-indices0]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csr_matrix-3-False-False-indices1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csr_matrix-3-True-True-indices2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csr_matrix-3-False-True-indices3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csr_matrix-degree4-True-False-indices4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csr_matrix-degree5-False-False-indices5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csr_matrix-degree6-True-True-indices6]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csr_matrix-degree7-False-True-indices7]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csc_matrix-3-True-False-indices0]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csc_matrix-3-False-False-indices1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csc_matrix-3-True-True-indices2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csc_matrix-3-False-True-indices3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csc_matrix-degree4-True-False-indices4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csc_matrix-degree5-False-False-indices5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csc_matrix-degree6-True-True-indices6]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_one_feature[csc_matrix-degree7-False-True-indices7]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-2-True-False-indices0]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-2-False-False-indices1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-2-True-True-indices2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-2-False-True-indices3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree4-True-False-indices4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree5-False-False-indices5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree6-True-True-indices6]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree7-False-True-indices7]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-3-True-False-indices8]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-3-False-False-indices9]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-3-True-True-indices10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-3-False-True-indices11]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree12-True-False-indices12]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree13-False-False-indices13]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree14-True-True-indices14]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree15-False-True-indices15]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree16-True-False-indices16]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree17-False-False-indices17]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree18-True-True-indices18]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[False-degree19-False-True-indices19]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-2-True-False-indices0]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-2-False-False-indices1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-2-True-True-indices2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-2-False-True-indices3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree4-True-False-indices4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree5-False-False-indices5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree6-True-True-indices6]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree7-False-True-indices7]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-3-True-False-indices8]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-3-False-False-indices9]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-3-True-True-indices10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-3-False-True-indices11]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree12-True-False-indices12]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree13-False-False-indices13]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree14-True-True-indices14]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree15-False-True-indices15]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree16-True-False-indices16]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree17-False-False-indices17]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree18-True-True-indices18]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csr_matrix-degree19-False-True-indices19]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-2-True-False-indices0]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-2-False-False-indices1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-2-True-True-indices2]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-2-False-True-indices3]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree4-True-False-indices4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree5-False-False-indices5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree6-True-True-indices6]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree7-False-True-indices7]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-3-True-False-indices8]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-3-False-False-indices9]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-3-True-True-indices10]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-3-False-True-indices11]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree12-True-False-indices12]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree13-False-False-indices13]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree14-True-True-indices14]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree15-False-True-indices15]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree16-True-False-indices16]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree17-False-False-indices17]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree18-True-True-indices18]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_two_features[csc_matrix-degree19-False-True-indices19]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_feature_names\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csc_X[1-True-False-int]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csc_X[2-True-False-int]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csc_X[2-True-False-float32]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csc_X[2-True-False-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csc_X[3-False-False-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csc_X[3-False-True-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csc_X[4-False-False-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csc_X[4-False-True-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X[1-True-False-int]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X[2-True-False-int]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X[2-True-False-float32]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X[2-True-False-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X[3-False-False-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X[3-False-True-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-0-1-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-0-1-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-0-1-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-0-2-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-0-2-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-0-2-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-1-3-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-1-3-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-1-3-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-0-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-0-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-0-4-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-3-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-3-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-True-3-4-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-0-1-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-0-1-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-0-1-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-0-2-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-0-2-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-0-2-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-1-3-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-1-3-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-1-3-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-0-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-0-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-0-4-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-3-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-3-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[True-False-3-4-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-0-1-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-0-1-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-0-1-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-0-2-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-0-2-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-0-2-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-1-3-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-1-3-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-1-3-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-0-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-0-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-0-4-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-3-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-3-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-True-3-4-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-0-1-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-0-1-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-0-1-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-0-2-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-0-2-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-0-2-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-1-3-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-1-3-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-1-3-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-0-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-0-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-0-4-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-3-4-1]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-3-4-4]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_num_combinations[False-False-3-4-5]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_floats[2-True-False-float32]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_floats[2-True-False-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_floats[3-False-False-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_floats[3-False-True-float64]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[0-2-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[1-2-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[2-2-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[0-3-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[1-3-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[2-3-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[0-2-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[1-2-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[2-2-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[0-3-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[1-3-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_zero_row[2-3-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_degree_4[True-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_degree_4[True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_degree_4[False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_degree_4[False-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[2-1-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[2-2-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[3-1-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[3-2-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[3-3-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[2-1-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[2-2-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[3-1-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[3-2-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_csr_X_dim_edges[3-3-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow_non_regression[True-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow_non_regression[True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow_non_regression[False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow_non_regression[False-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-True-2-65535]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-True-3-2344]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-True-2-3037000500]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-True-3-65535]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-True-2-3037000499]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-False-2-65535]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-False-3-2344]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-False-2-3037000500]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-False-3-65535]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[True-False-2-3037000499]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-True-2-65535]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-True-3-2344]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-True-2-3037000500]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-True-3-65535]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-True-2-3037000499]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-False-2-65535]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-False-3-2344]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-False-2-3037000500]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-False-3-65535]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_index_overflow[False-False-2-3037000499]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_too_large_to_index[True-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_too_large_to_index[True-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_too_large_to_index[False-True]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_too_large_to_index[False-False]\", \"sklearn/preprocessing/tests/test_polynomial.py::test_polynomial_features_behaviour_on_zero_degree\", \"sklearn/preprocessing/tests/test_polynomial.py::test_sizeof_LARGEST_INT_t\", \"sklearn/preprocessing/tests/test_polynomial.py::test_csr_polynomial_expansion_windows_fail\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.014901",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}