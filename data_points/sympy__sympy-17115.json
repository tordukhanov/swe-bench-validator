{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17115",
  "base_commit": "26aa686a20234f1f511c0f558d27665d0f95a21c",
  "patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -48,4 +48,4 @@ def binary_symbols(self):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        return self\n+        raise NotImplementedError()\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_piecewise.py b/sympy/functions/elementary/tests/test_piecewise.py\n--- a/sympy/functions/elementary/tests/test_piecewise.py\n+++ b/sympy/functions/elementary/tests/test_piecewise.py\n@@ -3,7 +3,7 @@\n     Integral, integrate, Interval, lambdify, log, Max, Min, oo, Or, pi,\n     Piecewise, piecewise_fold, Rational, solve, symbols, transpose,\n     cos, sin, exp, Abs, Ne, Not, Symbol, S, sqrt, Tuple, zoo,\n-    DiracDelta, Heaviside, Add, Mul, factorial, Ge)\n+    DiracDelta, Heaviside, Add, Mul, factorial, Ge, Contains, Le)\n from sympy.core.expr import unchanged\n from sympy.functions.elementary.piecewise import Undefined, ExprCondPair\n from sympy.printing import srepr\n@@ -52,6 +52,14 @@ def test_piecewise1():\n     assert Piecewise((1, x > 0), (2, And(x <= 0, x > -1))\n         ) == Piecewise((1, x > 0), (2, x > -1))\n \n+    # test for supporting Contains in Piecewise\n+    pwise = Piecewise(\n+        (1, And(x <= 6, x > 1, Contains(x, S.Integers))),\n+        (0, True))\n+    assert pwise.subs(x, pi) == 0\n+    assert pwise.subs(x, 2) == 1\n+    assert pwise.subs(x, 7) == 0\n+\n     # Test subs\n     p = Piecewise((-1, x < -1), (x**2, x < 0), (log(x), x >= 0))\n     p_x2 = Piecewise((-1, x**2 < -1), (x**4, x**2 < 0), (log(x**2), x**2 >= 0))\ndiff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -36,5 +36,7 @@ def test_binary_symbols():\n def test_as_set():\n     x = Symbol('x')\n     y = Symbol('y')\n-    assert Contains(x, FiniteSet(y)\n-        ).as_set() == Contains(x, FiniteSet(y))\n+    # Contains is a BooleanFunction whose value depends on an arg's\n+    # containment in a Set -- rewriting as a Set is not yet implemented\n+    raises(NotImplementedError, lambda:\n+           Contains(x, FiniteSet(y)).as_set())\n",
  "problem_statement": "Piecewise doesn't works correctly\n<!-- The title above should be a short description of the issue. -->\r\n\r\n#### What is the problem?\r\n\r\n#### Example of problem\r\n**Code**\r\n```python\r\nx = symbols('x')\r\ncond = And(Le(x, 6), Ge(x, 1), S.Integers.contains(x))\r\np2 = Piecewise((S(1), cond), (S(0), True))\r\n```\r\n\r\n**Result**\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/home/gagandeep/sympy_debug.py\", line 593, in <module>\r\n    p2 = Piecewise((S(1), cond), (S(0), True))\r\n  File \"/home/gagandeep/sympy/sympy/functions/elementary/piecewise.py\", line 143, in __new__\r\n    r = cls.eval(*newargs)\r\n  File \"/home/gagandeep/sympy/sympy/functions/elementary/piecewise.py\", line 192, in eval\r\n    c = c.as_set().as_relational(x)\r\n  File \"/home/gagandeep/sympy/sympy/logic/boolalg.py\", line 156, in as_set\r\n    return self.subs(reps)._eval_as_set()\r\n  File \"/home/gagandeep/sympy/sympy/logic/boolalg.py\", line 737, in _eval_as_set\r\n    return Intersection(*[arg.as_set() for arg in self.args])\r\n  File \"/home/gagandeep/sympy/sympy/sets/sets.py\", line 1268, in __new__\r\n    return simplify_intersection(args)\r\n  File \"/home/gagandeep/sympy/sympy/sets/sets.py\", line 1988, in simplify_intersection\r\n    raise TypeError(\"Input args to Union must be Sets\")\r\nTypeError: Input args to Union must be Sets\r\n```\r\nIt's not working on `SymPy Live` as well, see the screenshot below,\r\n![Screenshot from 2019-06-27 13-04-30](https://user-images.githubusercontent.com/36567889/60246816-21933280-98dd-11e9-80a7-a4fe9d090b0f.png)\r\n\r\n\r\n#### Other comments/references\r\n[1] https://github.com/sympy/sympy/pull/16962\r\n\r\n@oscarbenjamin @Upabjojr told that it is working fine on their systems. \r\n@smichr Please help me out, either we should fix it or please suggest an alternative approach. I suspect that the error is caused, due to `c = c.as_set().as_relational(x)` in `Piecewise.eval`. May be at least `Logic` should be allowed to pass through the following loop,\r\n```python\r\nfor e, c in _args:\r\n            if not c.is_Atom and not isinstance(c, Relational): # `Relational` -> `Boolean` can fix it.(not tried)\r\n                free = c.free_symbols\r\n                if len(free) == 1:\r\n                    funcs = [i for i in c.atoms(Function)\r\n                        if not isinstance(i, Boolean)]\r\n                    if len(funcs) == 1 and len(\r\n                            c.xreplace({list(funcs)[0]: Dummy()}\r\n                            ).free_symbols) == 1:\r\n                        # we can treat function like a symbol\r\n                        free = funcs\r\n                    _c = c\r\n                    x = free.pop()\r\n                    try:\r\n                        c = c.as_set().as_relational(x)\r\n                    except NotImplementedError:\r\n                        pass\r\n                    else:\r\n                        reps = {}\r\n                        for i in c.atoms(Relational):\r\n                            ic = i.canonical\r\n                            if ic.rhs in (S.Infinity, S.NegativeInfinity):\r\n                                if not _c.has(ic.rhs):\r\n                                    # don't accept introduction of\r\n                                    # new Relationals with +/-oo\r\n                                    reps[i] = S.true\r\n                                elif ('=' not in ic.rel_op and\r\n                                        c.xreplace({x: i.rhs}) !=\r\n                                        _c.xreplace({x: i.rhs})):\r\n                                    reps[i] = Relational(\r\n                                        i.lhs, i.rhs, i.rel_op + '=')\r\n                        c = c.xreplace(reps)\r\n            args.append((e, _canonical(c)))\r\n```\n",
  "hints_text": "I don't think that set notations are supported in piecewise yet.\nI think this particular error might be trivial to fix by adding Contains.as_set as in:\r\n```\r\n>>> Contains(x, S.Integers).as_set()\r\nS.Integers\r\n```\n> Contains(x, S.Integers).as_set()\r\n> S.Integers\r\n\r\nI tried it but the following happens,\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/home/gagandeep/sympy_debug.py\", line 593, in <module>\r\n    p2 = Piecewise((S(1), cond), (S(0), True))\r\n  File \"/home/gagandeep/sympy/sympy/functions/elementary/piecewise.py\", line 143, in __new__\r\n    r = cls.eval(*newargs)\r\n  File \"/home/gagandeep/sympy/sympy/functions/elementary/piecewise.py\", line 192, in eval\r\n    c = c.as_set().as_relational(x)\r\nAttributeError: 'Range' object has no attribute 'as_relational'\r\n```",
  "created_at": "2019-06-27T10:38:58Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_piecewise1\"]",
  "PASS_TO_PASS": "[\"test_piecewise_free_symbols\", \"test_piecewise_integrate1\", \"test_piecewise_integrate1b\", \"test_piecewise_integrate2\", \"test_meijer_bypass\", \"test_piecewise_integrate3_inequality_conditions\", \"test_piecewise_integrate5_independent_conditions\", \"test_piecewise_simplify\", \"test_piecewise_solve\", \"test_piecewise_fold\", \"test_piecewise_fold_piecewise_in_cond\", \"test_piecewise_fold_piecewise_in_cond_2\", \"test_piecewise_fold_expand\", \"test_piecewise_duplicate\", \"test_doit\", \"test_piecewise_interval\", \"test_piecewise_collapse\", \"test_piecewise_lambdify\", \"test_piecewise_series\", \"test_piecewise_as_leading_term\", \"test_piecewise_complex\", \"test_conjugate_transpose\", \"test_piecewise_evaluate\", \"test_as_expr_set_pairs\", \"test_S_srepr_is_identity\", \"test_issue_12587\", \"test_issue_11045\", \"test_holes\", \"test_issue_11922\", \"test_issue_5227\", \"test_issue_10137\", \"test_stackoverflow_43852159\", \"test_issue_12557\", \"test_issue_6900\", \"test_issue_10122\", \"test_issue_4313\", \"test__intervals\", \"test_containment\", \"test_piecewise_with_DiracDelta\", \"test_issue_10258\", \"test_issue_10087\", \"test_issue_8919\", \"test_unevaluated_integrals\", \"test_conditions_as_alternate_booleans\", \"test_Piecewise_rewrite_as_ITE\", \"test_issue_14052\", \"test_issue_14240\", \"test_issue_14787\", \"test_contains_basic\", \"test_issue_6194\", \"test_issue_10326\", \"test_binary_symbols\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.113205",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}