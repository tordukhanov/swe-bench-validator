{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-7089",
  "base_commit": "6b2fdab82f22aa3754c80c8322f826f5ab1101a6",
  "patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -853,25 +853,23 @@ def loc(self) -> _LocIndexer:\n         return _LocIndexer(self)\n \n     @property\n-    # Key type needs to be `Any` because of mypy#4167\n     def attrs(self) -> dict[Any, Any]:\n         \"\"\"Dictionary storing arbitrary metadata with this array.\"\"\"\n         return self.variable.attrs\n \n     @attrs.setter\n     def attrs(self, value: Mapping[Any, Any]) -> None:\n-        # Disable type checking to work around mypy bug - see mypy#4167\n-        self.variable.attrs = value  # type: ignore[assignment]\n+        self.variable.attrs = dict(value)\n \n     @property\n-    def encoding(self) -> dict[Hashable, Any]:\n+    def encoding(self) -> dict[Any, Any]:\n         \"\"\"Dictionary of format-specific settings for how this array should be\n         serialized.\"\"\"\n         return self.variable.encoding\n \n     @encoding.setter\n     def encoding(self, value: Mapping[Any, Any]) -> None:\n-        self.variable.encoding = value\n+        self.variable.encoding = dict(value)\n \n     @property\n     def indexes(self) -> Indexes:\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -633,7 +633,7 @@ def variables(self) -> Frozen[Hashable, Variable]:\n         return Frozen(self._variables)\n \n     @property\n-    def attrs(self) -> dict[Hashable, Any]:\n+    def attrs(self) -> dict[Any, Any]:\n         \"\"\"Dictionary of global attributes on this dataset\"\"\"\n         if self._attrs is None:\n             self._attrs = {}\n@@ -644,7 +644,7 @@ def attrs(self, value: Mapping[Any, Any]) -> None:\n         self._attrs = dict(value)\n \n     @property\n-    def encoding(self) -> dict[Hashable, Any]:\n+    def encoding(self) -> dict[Any, Any]:\n         \"\"\"Dictionary of global encoding attributes on this dataset\"\"\"\n         if self._encoding is None:\n             self._encoding = {}\n@@ -1123,7 +1123,7 @@ def _overwrite_indexes(\n             return replaced\n \n     def copy(\n-        self: T_Dataset, deep: bool = False, data: Mapping | None = None\n+        self: T_Dataset, deep: bool = False, data: Mapping[Any, ArrayLike] | None = None\n     ) -> T_Dataset:\n         \"\"\"Returns a copy of this dataset.\n \n@@ -1252,8 +1252,9 @@ def copy(\n                 variables[k] = v.copy(deep=deep, data=data.get(k))\n \n         attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\n+        encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\n \n-        return self._replace(variables, indexes=indexes, attrs=attrs)\n+        return self._replace(variables, indexes=indexes, attrs=attrs, encoding=encoding)\n \n     def as_numpy(self: T_Dataset) -> T_Dataset:\n         \"\"\"\ndiff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -1107,7 +1107,7 @@ def dims(self) -> Mapping[Hashable, int]:\n \n         return Frozen(self._dims)\n \n-    def copy(self):\n+    def copy(self) -> Indexes:\n         return type(self)(dict(self._indexes), dict(self._variables))\n \n     def get_unique(self) -> list[T_PandasOrXarrayIndex]:\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -894,7 +894,7 @@ def __setitem__(self, key, value):\n         indexable[index_tuple] = value\n \n     @property\n-    def attrs(self) -> dict[Hashable, Any]:\n+    def attrs(self) -> dict[Any, Any]:\n         \"\"\"Dictionary of local attributes on this variable.\"\"\"\n         if self._attrs is None:\n             self._attrs = {}\n@@ -905,7 +905,7 @@ def attrs(self, value: Mapping[Any, Any]) -> None:\n         self._attrs = dict(value)\n \n     @property\n-    def encoding(self):\n+    def encoding(self) -> dict[Any, Any]:\n         \"\"\"Dictionary of encodings on this variable.\"\"\"\n         if self._encoding is None:\n             self._encoding = {}\n@@ -918,7 +918,7 @@ def encoding(self, value):\n         except ValueError:\n             raise ValueError(\"encoding must be castable to a dictionary\")\n \n-    def copy(self, deep=True, data=None):\n+    def copy(self, deep: bool = True, data: ArrayLike | None = None):\n         \"\"\"Returns a copy of this object.\n \n         If `deep=True`, the data array is loaded into memory and copied onto\n@@ -929,7 +929,7 @@ def copy(self, deep=True, data=None):\n \n         Parameters\n         ----------\n-        deep : bool, optional\n+        deep : bool, default: True\n             Whether the data array is loaded into memory and copied onto\n             the new object. Default is True.\n         data : array_like, optional\n@@ -975,28 +975,29 @@ def copy(self, deep=True, data=None):\n         pandas.DataFrame.copy\n         \"\"\"\n         if data is None:\n-            data = self._data\n+            ndata = self._data\n \n-            if isinstance(data, indexing.MemoryCachedArray):\n+            if isinstance(ndata, indexing.MemoryCachedArray):\n                 # don't share caching between copies\n-                data = indexing.MemoryCachedArray(data.array)\n+                ndata = indexing.MemoryCachedArray(ndata.array)\n \n             if deep:\n-                data = copy.deepcopy(data)\n+                ndata = copy.deepcopy(ndata)\n \n         else:\n-            data = as_compatible_data(data)\n-            if self.shape != data.shape:\n+            ndata = as_compatible_data(data)\n+            if self.shape != ndata.shape:\n                 raise ValueError(\n                     \"Data shape {} must match shape of object {}\".format(\n-                        data.shape, self.shape\n+                        ndata.shape, self.shape\n                     )\n                 )\n \n-        # note:\n-        # dims is already an immutable tuple\n-        # attributes and encoding will be copied when the new Array is created\n-        return self._replace(data=data)\n+        attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\n+        encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\n+\n+        # note: dims is already an immutable tuple\n+        return self._replace(data=ndata, attrs=attrs, encoding=encoding)\n \n     def _replace(\n         self: T_Variable,\n@@ -2877,7 +2878,7 @@ def concat(\n \n         return cls(first_var.dims, data, attrs)\n \n-    def copy(self, deep=True, data=None):\n+    def copy(self, deep: bool = True, data: ArrayLike | None = None):\n         \"\"\"Returns a copy of this object.\n \n         `deep` is ignored since data is stored in the form of\n@@ -2889,7 +2890,7 @@ def copy(self, deep=True, data=None):\n \n         Parameters\n         ----------\n-        deep : bool, optional\n+        deep : bool, default: True\n             Deep is ignored when data is given. Whether the data array is\n             loaded into memory and copied onto the new object. Default is True.\n         data : array_like, optional\n@@ -2902,16 +2903,20 @@ def copy(self, deep=True, data=None):\n             data copied from original.\n         \"\"\"\n         if data is None:\n-            data = self._data.copy(deep=deep)\n+            ndata = self._data.copy(deep=deep)\n         else:\n-            data = as_compatible_data(data)\n-            if self.shape != data.shape:\n+            ndata = as_compatible_data(data)\n+            if self.shape != ndata.shape:\n                 raise ValueError(\n                     \"Data shape {} must match shape of object {}\".format(\n-                        data.shape, self.shape\n+                        ndata.shape, self.shape\n                     )\n                 )\n-        return self._replace(data=data)\n+\n+        attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\n+        encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\n+\n+        return self._replace(data=ndata, attrs=attrs, encoding=encoding)\n \n     def equals(self, other, equiv=None):\n         # if equiv is specified, super up\n",
  "test_patch": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -6458,7 +6458,6 @@ def test_delete_coords() -> None:\n     assert set(a1.coords.keys()) == {\"x\"}\n \n \n-@pytest.mark.xfail\n def test_deepcopy_nested_attrs() -> None:\n     \"\"\"Check attrs deep copy, see :issue:`2835`\"\"\"\n     da1 = xr.DataArray([[1, 2], [3, 4]], dims=(\"x\", \"y\"), coords={\"x\": [10, 20]})\n",
  "problem_statement": "Dataset.copy(deep=True) does not deepcopy .attrs\nBut it would be expected (at least by me) that it does.\n",
  "hints_text": "Thanks @kefirbandi, can you send in a PR?\nJumping from 2022.3.0 to 2022.6.0 this issue has re-emerged for me.\n> Jumping from 2022.3.0 to 2022.6.0 this issue has re-emerged for me.\r\n\r\nI am seeing the same issue as well.\nCannot reproduce on current master using\r\n```python\r\nimport xarray as xr\r\n\r\nds = xr.Dataset({\"a\": ([\"x\"], [1, 2, 3])}, attrs={\"t\": 1})\r\nds2 = ds.copy(deep=True)\r\nds.attrs[\"t\"] = 5\r\nprint(ds2.attrs)  # returns: {'t': 1}\r\n```\neven with\r\n```python\r\nIn [1]: import xarray as xr\r\n   ...: \r\n   ...: ds = xr.Dataset({\"a\": (\"x\", [1, 2, 3], {\"t\": 0})}, attrs={\"t\": 1})\r\n   ...: ds2 = ds.copy(deep=True)\r\n   ...: ds.attrs[\"t\"] = 5\r\n   ...: ds.a.attrs[\"t\"] = 6\r\n   ...: \r\n   ...: display(ds2, ds2.a)\r\n<xarray.Dataset>\r\nDimensions:  (x: 3)\r\nDimensions without coordinates: x\r\nData variables:\r\n    a        (x) int64 1 2 3\r\nAttributes:\r\n    t:        1\r\n<xarray.DataArray 'a' (x: 3)>\r\narray([1, 2, 3])\r\nDimensions without coordinates: x\r\nAttributes:\r\n    t:        0\r\n```\r\nI cannot reproduce. @Ch-Meier, @DerPlankton13, can either of you post a minimal example demonstrating the issue? ",
  "created_at": "2022-09-26T20:54:16Z",
  "version": "2022.06",
  "FAIL_TO_PASS": "[\"xarray/tests/test_dataarray.py::test_deepcopy_nested_attrs\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_dataarray.py::TestDataArray::test_repr\", \"xarray/tests/test_dataarray.py::TestDataArray::test_repr_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_repr_multiindex_long\", \"xarray/tests/test_dataarray.py::TestDataArray::test_properties\", \"xarray/tests/test_dataarray.py::TestDataArray::test_data_property\", \"xarray/tests/test_dataarray.py::TestDataArray::test_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_get_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_get_index_size_zero\", \"xarray/tests/test_dataarray.py::TestDataArray::test_struct_array_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_name\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sizes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_encoding\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_invalid\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_from_self_described\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_from_self_described_chunked\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_from_0d\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_dask_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_equals_and_identical\", \"xarray/tests/test_dataarray.py::TestDataArray::test_equals_failures\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_equals\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_dict\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_empty_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setitem\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setitem_fancy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setitem_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_contains\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pickle\", \"xarray/tests/test_dataarray.py::TestDataArray::test_chunk\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel_types\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel_fancy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_invalid_slice\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_dataarray_datetime_slice\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_float\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_float_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_no_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_method\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_drop\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel_drop\", \"xarray/tests/test_dataarray.py::TestDataArray::test_head\", \"xarray/tests/test_dataarray.py::TestDataArray::test_tail\", \"xarray/tests/test_dataarray.py::TestDataArray::test_thin\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_datetime64_value\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_assign\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_assign_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_single_boolean\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_dim_name_collision_with_sel_params\", \"xarray/tests/test_dataarray.py::TestDataArray::test_selection_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_selection_multiindex_remove_unused\", \"xarray/tests/test_dataarray.py::TestDataArray::test_selection_multiindex_from_level\", \"xarray/tests/test_dataarray.py::TestDataArray::test_virtual_default_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_virtual_time_components\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_to_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coord_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reset_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_assign_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_assign_coords_existing_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_coords_update_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_coords_multiindex_level\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_replacement_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_non_string\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_delitem_delete_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_delitem_multiindex_level\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_like\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_like\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_like_no_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_regressions\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_method\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[fill_value3]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_str_dtype[str]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_str_dtype[bytes]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_rename\", \"xarray/tests/test_dataarray.py::TestDataArray::test_rename_dimension_coord_warnings\", \"xarray/tests/test_dataarray.py::TestDataArray::test_init_value\", \"xarray/tests/test_dataarray.py::TestDataArray::test_swap_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims_error\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims_with_scalar_coordinate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims_with_greater_dim_size\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reset_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reset_index_keep_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reorder_levels\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_xindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dataset_getitem\", \"xarray/tests/test_dataarray.py::TestDataArray::test_array_interface\", \"xarray/tests/test_dataarray.py::TestDataArray::test_astype_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_astype_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_astype_order\", \"xarray/tests/test_dataarray.py::TestDataArray::test_is_null\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math_automatic_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_non_overlapping_dataarrays_return_empty_result\", \"xarray/tests/test_dataarray.py::TestDataArray::test_empty_dataarrays_return_empty_result\", \"xarray/tests/test_dataarray.py::TestDataArray::test_inplace_math_basics\", \"xarray/tests/test_dataarray.py::TestDataArray::test_inplace_math_error\", \"xarray/tests/test_dataarray.py::TestDataArray::test_inplace_math_automatic_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math_name\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math_with_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_index_math\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dataset_math\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_unstack\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_unstack_decreasing_coordinate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_unstack_pandas_consistency\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_nonunique_consistency[1-numpy]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_nonunique_consistency[1-dask]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_unstacked_dataset_raises_value_error\", \"xarray/tests/test_dataarray.py::TestDataArray::test_transpose\", \"xarray/tests/test_dataarray.py::TestDataArray::test_squeeze\", \"xarray/tests/test_dataarray.py::TestDataArray::test_squeeze_drop\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_coordinates\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_multiindex_level\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_all_multiindex_levels\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_index_labels\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_index_positions\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dropna\", \"xarray/tests/test_dataarray.py::TestDataArray::test_where\", \"xarray/tests/test_dataarray.py::TestDataArray::test_where_lambda\", \"xarray/tests/test_dataarray.py::TestDataArray::test_where_string\", \"xarray/tests/test_dataarray.py::TestDataArray::test_cumops\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_keepdims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_keepdims_bottleneck\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_out\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-0.25-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q1-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q2-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-0.25-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q1-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q2-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-0.25-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q1-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q2-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-0.25-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q1-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q2-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile_method[midpoint]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile_method[lower]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile_interpolation_deprecated[midpoint]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile_interpolation_deprecated[lower]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_keep_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_assign_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[<lambda>0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[<lambda>1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[absolute]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[abs]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_fillna\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_copy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_override\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_override_error[darrays0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_override_error[darrays1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_exclude\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_without_indexes_exclude\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_mixed_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_without_indexes_errors\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_str_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays_misaligned\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays_nocopy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays_exclude\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_coordinates\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_pandas\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataframe\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataframe_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataframe_0length\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_pandas_name_matches_coordinate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_series\", \"xarray/tests/test_dataarray.py::TestDataArray::test_from_series_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_from_series_sparse\", \"xarray/tests/test_dataarray.py::TestDataArray::test_from_multiindex_series_sparse\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_empty_series\", \"xarray/tests/test_dataarray.py::TestDataArray::test_series_categorical_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_masked_array\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_cdms2_classic\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_cdms2_ugrid\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataset_whole\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataset_split\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataset_retains_keys\", \"xarray/tests/test_dataarray.py::TestDataArray::test__title_for_slice\", \"xarray/tests/test_dataarray.py::TestDataArray::test__title_for_slice_truncate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dataarray_diff_n1\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coordinate_diff\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int--5]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int-0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int-1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int-2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float--5]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float-0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float-1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float-2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_roll_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_roll_no_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_copy_with_data\", \"xarray/tests/test_dataarray.py::TestDataArray::test_real_and_imag\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setattr_raises\", \"xarray/tests/test_dataarray.py::TestDataArray::test_full_like\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dot\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dot_align_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_matmul\", \"xarray/tests/test_dataarray.py::TestDataArray::test_matmul_align_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_binary_op_join_setting\", \"xarray/tests/test_dataarray.py::TestDataArray::test_combine_first\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sortby\", \"xarray/tests/test_dataarray.py::TestDataArray::test_rank\", \"xarray/tests/test_dataarray.py::TestDataArray::test_polyfit[True-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_polyfit[True-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_polyfit[False-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_polyfit[False-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_constant\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[3]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[end_values2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[end_values3]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[None-reflect]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[None-symmetric]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[even-reflect]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[even-symmetric]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[odd-reflect]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[odd-symmetric]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-python-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-python-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-None-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-None-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-numexpr-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-numexpr-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-python-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-python-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-None-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-None-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-numexpr-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-numexpr-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_curvefit[True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_curvefit[False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_curvefit_helpers\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[dask-int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[dask-nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[dask-obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[nodask-int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[nodask-nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[nodask-obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[nodask-datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[dask-int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[dask-nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[dask-obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[nodask-int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[nodask-nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[nodask-obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[nodask-datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduceND::test_idxminmax_dask[3-idxmin]\", \"xarray/tests/test_dataarray.py::TestReduceND::test_idxminmax_dask[3-idxmax]\", \"xarray/tests/test_dataarray.py::TestReduceND::test_idxminmax_dask[5-idxmin]\", \"xarray/tests/test_dataarray.py::TestReduceND::test_idxminmax_dask[5-idxmax]\", \"xarray/tests/test_dataarray.py::test_isin[numpy-repeating_ints]\", \"xarray/tests/test_dataarray.py::test_isin[dask-repeating_ints]\", \"xarray/tests/test_dataarray.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataarray.py::test_no_warning_for_all_nan\", \"xarray/tests/test_dataarray.py::test_name_in_masking\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_to_and_from_iris\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_to_and_from_iris_dask\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_name_from_cube[var_name-height-Height-var_name-attrs0]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_name_from_cube[None-height-Height-height-attrs1]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_name_from_cube[None-None-Height-Height-attrs2]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_name_from_cube[None-None-None-None-attrs3]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_coord_name_from_cube[var_name-height-Height-var_name-attrs0]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_coord_name_from_cube[None-height-Height-height-attrs1]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_coord_name_from_cube[None-None-Height-Height-attrs2]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_coord_name_from_cube[None-None-None-unknown-attrs3]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_prevent_duplicate_coord_names\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_fallback_to_iris_AuxCoord[coord_values0]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_fallback_to_iris_AuxCoord[coord_values1]\", \"xarray/tests/test_dataarray.py::test_no_dict\", \"xarray/tests/test_dataarray.py::test_subclass_slots\", \"xarray/tests/test_dataarray.py::test_weakref\", \"xarray/tests/test_dataarray.py::test_delete_coords\", \"xarray/tests/test_dataarray.py::test_deepcopy_obj_array\", \"xarray/tests/test_dataarray.py::test_clip[1-numpy]\", \"xarray/tests/test_dataarray.py::test_clip[1-dask]\", \"xarray/tests/test_dataarray.py::TestDropDuplicates::test_drop_duplicates_1d[first]\", \"xarray/tests/test_dataarray.py::TestDropDuplicates::test_drop_duplicates_1d[last]\", \"xarray/tests/test_dataarray.py::TestDropDuplicates::test_drop_duplicates_1d[False]\", \"xarray/tests/test_dataarray.py::TestDropDuplicates::test_drop_duplicates_2d\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_numpy\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_dask\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_pint\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_sparse\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_pint_wrapping_dask\", \"xarray/tests/test_dataarray.py::TestStackEllipsis::test_result_as_expected\", \"xarray/tests/test_dataarray.py::TestStackEllipsis::test_error_on_ellipsis_without_list\"]",
  "environment_setup_commit": "50ea159bfd0872635ebf4281e741f3c87f0bef6b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.901402",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}