{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25430",
  "base_commit": "7eafdd8af3c523c1c77b027d378fb337dd489f18",
  "patch": "diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py\n--- a/lib/matplotlib/backends/backend_agg.py\n+++ b/lib/matplotlib/backends/backend_agg.py\n@@ -441,7 +441,9 @@ def buffer_rgba(self):\n         \"\"\"\n         return self.renderer.buffer_rgba()\n \n-    def print_raw(self, filename_or_obj):\n+    def print_raw(self, filename_or_obj, *, metadata=None):\n+        if metadata is not None:\n+            raise ValueError(\"metadata not supported for raw/rgba\")\n         FigureCanvasAgg.draw(self)\n         renderer = self.get_renderer()\n         with cbook.open_file_cm(filename_or_obj, \"wb\") as fh:\n@@ -518,22 +520,22 @@ def print_to_buffer(self):\n     # print_figure(), and the latter ensures that `self.figure.dpi` already\n     # matches the dpi kwarg (if any).\n \n-    def print_jpg(self, filename_or_obj, *, pil_kwargs=None):\n+    def print_jpg(self, filename_or_obj, *, metadata=None, pil_kwargs=None):\n         # savefig() has already applied savefig.facecolor; we now set it to\n         # white to make imsave() blend semi-transparent figures against an\n         # assumed white background.\n         with mpl.rc_context({\"savefig.facecolor\": \"white\"}):\n-            self._print_pil(filename_or_obj, \"jpeg\", pil_kwargs)\n+            self._print_pil(filename_or_obj, \"jpeg\", pil_kwargs, metadata)\n \n     print_jpeg = print_jpg\n \n-    def print_tif(self, filename_or_obj, *, pil_kwargs=None):\n-        self._print_pil(filename_or_obj, \"tiff\", pil_kwargs)\n+    def print_tif(self, filename_or_obj, *, metadata=None, pil_kwargs=None):\n+        self._print_pil(filename_or_obj, \"tiff\", pil_kwargs, metadata)\n \n     print_tiff = print_tif\n \n-    def print_webp(self, filename_or_obj, *, pil_kwargs=None):\n-        self._print_pil(filename_or_obj, \"webp\", pil_kwargs)\n+    def print_webp(self, filename_or_obj, *, metadata=None, pil_kwargs=None):\n+        self._print_pil(filename_or_obj, \"webp\", pil_kwargs, metadata)\n \n     print_jpg.__doc__, print_tif.__doc__, print_webp.__doc__ = map(\n         \"\"\"\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3259,6 +3259,11 @@ def savefig(self, fname, *, transparent=None, **kwargs):\n               `~.FigureCanvasSVG.print_svg`.\n             - 'eps' and 'ps' with PS backend: Only 'Creator' is supported.\n \n+            Not supported for 'pgf', 'raw', and 'rgba' as those formats do not support\n+            embedding metadata.\n+            Does not currently support 'jpg', 'tiff', or 'webp', but may include\n+            embedding EXIF metadata in the future.\n+\n         bbox_inches : str or `.Bbox`, default: :rc:`savefig.bbox`\n             Bounding box in inches: only the given portion of the figure is\n             saved.  If 'tight', try to figure out the tight bbox of the figure.\ndiff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -1610,6 +1610,7 @@ def imsave(fname, arr, vmin=None, vmax=None, cmap=None, format=None,\n         Metadata in the image file.  The supported keys depend on the output\n         format, see the documentation of the respective backends for more\n         information.\n+        Currently only supported for \"png\", \"pdf\", \"ps\", \"eps\", and \"svg\".\n     pil_kwargs : dict, optional\n         Keyword arguments passed to `PIL.Image.Image.save`.  If the 'pnginfo'\n         key is present, it completely overrides *metadata*, including the\n@@ -1674,6 +1675,8 @@ def imsave(fname, arr, vmin=None, vmax=None, cmap=None, format=None,\n                 for k, v in metadata.items():\n                     if v is not None:\n                         pnginfo.add_text(k, v)\n+        elif metadata is not None:\n+            raise ValueError(f\"metadata not supported for format {format!r}\")\n         if format in [\"jpg\", \"jpeg\"]:\n             format = \"jpeg\"  # Pillow doesn't recognize \"jpg\".\n             facecolor = mpl.rcParams[\"savefig.facecolor\"]\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1548,3 +1548,14 @@ def test_gridspec_no_mutate_input():\n     plt.subplots(1, 2, width_ratios=[1, 2], gridspec_kw=gs)\n     assert gs == gs_orig\n     plt.subplot_mosaic('AB', width_ratios=[1, 2], gridspec_kw=gs)\n+\n+\n+@pytest.mark.parametrize('fmt', ['eps', 'pdf', 'png', 'ps', 'svg', 'svgz'])\n+def test_savefig_metadata(fmt):\n+    Figure().savefig(io.BytesIO(), format=fmt, metadata={})\n+\n+\n+@pytest.mark.parametrize('fmt', ['jpeg', 'jpg', 'tif', 'tiff', 'webp', \"raw\", \"rgba\"])\n+def test_savefig_metadata_error(fmt):\n+    with pytest.raises(ValueError, match=\"metadata not supported\"):\n+        Figure().savefig(io.BytesIO(), format=fmt, metadata={})\n",
  "problem_statement": "[Bug]: savefig + jpg + metadata fails with inscrutable error message\n### Bug summary\n\nIf we call `savefig` with a `filename` with a `.jpg` extension, with the `metadata` kwarg specified, the error message is inscrutable.\n\n### Code for reproduction\n\n```python\n#!/usr/bin/env python3\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nplt.style.use('_mpl-gallery')\r\n\r\n# make data\r\nx = np.linspace(0, 10, 100)\r\ny = 4 + 2 * np.sin(2 * x)\r\n\r\n# plot\r\nfig, ax = plt.subplots()\r\n\r\nax.plot(x, y, linewidth=2.0)\r\n\r\nax.set(xlim=(0, 8), xticks=np.arange(1, 8),\r\n       ylim=(0, 8), yticks=np.arange(1, 8))\r\n\r\nplt.savefig(\"sin.jpg\", metadata={})\n```\n\n\n### Actual outcome\n\n```\r\nTraceback (most recent call last):\r\n  File \"/private/tmp/./reproduce.py\", line 19, in <module>\r\n    plt.savefig(\"sin.jpg\", metadata={})\r\n  File \"/private/tmp/lib/python3.11/site-packages/matplotlib/pyplot.py\", line 1023, in savefig\r\n    res = fig.savefig(*args, **kwargs)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/private/tmp/lib/python3.11/site-packages/matplotlib/figure.py\", line 3343, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"/private/tmp/lib/python3.11/site-packages/matplotlib/backend_bases.py\", line 2366, in print_figure\r\n    result = print_method(\r\n             ^^^^^^^^^^^^^\r\n  File \"/private/tmp/lib/python3.11/site-packages/matplotlib/backend_bases.py\", line 2232, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n                                                                 ^^^^^\r\nTypeError: FigureCanvasAgg.print_jpg() got an unexpected keyword argument 'metadata'\r\n```\n\n### Expected outcome\n\nEither metadata should be added, the argument ignored, or a more informative error message.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nOS/X\n\n### Matplotlib Version\n\n3.7.1\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\nPython 3.11.2\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n",
  "hints_text": "Ultimately the jpg writer does not support metadata. If it could, that would be the most ideal solution for at least the narrow case. (Though this is not at all specific to jpg, while many of the most common formats such as png, pdf, or svg do accept metadata, not all do)\r\n\r\nI could see an argument for failing a bit earlier/catching and raising earlier in the stack, but honestly an error that says \"unexpected keyword argument 'metadata'\" with a call stack that shows `**kwargs` an every step back to what you typed is relatively informative. I would lean towards not making changes for this, but not super strong in that opinion.\r\n\r\nI do not think that silently ignoring metadata is actually a good answer, as that would lead to users who expect their metadata to be in the saved file to be mistaken (perhaps in not super recoverable/immediately discovered ways), thus I think an error message is warranted (this is less true in the specific case of passing `metadata={}`, but not interested in doing value inspection here)\r\n\r\nI do think the docs could be a little more explicit (they _do_ mention that which keys are supported is a function of backend and output format, but don't explicitly state that some combinations do not accept metadata at all).\nSome further investigations:\r\n\r\nAdding `metadata` as a kwarg to `print_jpg` (and then passing to `_print_pil` which ultimately calls `mpl.image.imsave`) does silence the exception, however any metadata in that dictionary is silently dropped.\r\n\r\nIn fact, the `metadata` argument to `imsave` is _only_ used in handling for `png` (some formats, such as pdf, svg, and eps/ps also handle metadata, but do not go via `imsave` as they are vector formats)\r\nI may suggest at least a warning for passing (non-empty?, just do `if metadata:`) for non-png formats there, if not some more extensive adding metadata. I'd be satisfied by such a warning combined with passing through the `metadata` argument so its not an exception before it gets there. (And that would be an appropriate warning for anybody calling `imsave` directly, too) \r\n\r\nJPEG, unlike PNG, does not have an arbitrary string-keyed key-value metadata store (at least exposed by Pillow, not like I went and read the JPEG standard to come to that determination)\r\n\r\nThere does exist EXIF tags that could in principle be added to JPEG (and are not in the `savefig` pipeline/`imsave` in particular). But EXIF is not arbitrary string keys (it is actually something more like integer keyed, with an external mapping of integers to the key names, so the keys are pretty static, not arbitrary)\r\n\r\nI would not be opposed to adding supported tags from metadata (and warning or erroring on invalid tag, not sure which) but working with Pillow's EXIF datatypes is not as easy (or well documented) as I'd like.\r\n\r\nPillow has an `image.info` dict-like attribute, but _most_ of that is simply ignored on writing for most file formats (silently) and behavior varies by output format significantly.\r\n\r\n\r\nSummary of current behavior (using `agg` based backends, calling `savefig`):\r\n\r\n- PNG (filters to `imsave`/Pillow): basically fully works, arbitrary string keys\r\n- PDF (filters to PDF backend): Mostly works, but warns on unrecognized keys, but still puts them there\r\n- JPG, WebP, Tiff (filters to `imsave`/Pillow): Error similar to above if any metadata is passed, possibly could add EXIF fields (not yet implemented)\r\n- SVG (filters to backend_svg): Limited keys, errors on unrecognized keys\r\n- eps/ps (filters to backend_ps): Only accept `\"Creator\"`, all other keys silently ignored (As documented in `savefig` docstring)\r\n- raw/rgba: no fields for metadata, currently error similar to JPEG, but no path to add metadata as the file is literally just the rgba image bytes\r\n- pgf (filters to backend_pgf): currently errors similar to JPEG, in principle supports EXIF, I think, but does _not_ go through Pillow, so solution would be separately implemented\r\n",
  "created_at": "2023-03-11T02:40:44Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[jpeg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[jpg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[tif]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[tiff]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[webp]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[raw]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[rgba]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_align_labels[png]\", \"lib/matplotlib/tests/test_figure.py::test_align_labels_stray_axes\", \"lib/matplotlib/tests/test_figure.py::test_figure_label\", \"lib/matplotlib/tests/test_figure.py::test_fignum_exists\", \"lib/matplotlib/tests/test_figure.py::test_clf_keyword\", \"lib/matplotlib/tests/test_figure.py::test_figure[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_gca\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_subclass\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_invalid\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[png]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_fontproperties\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_subfigures\", \"lib/matplotlib/tests/test_figure.py::test_alpha[png]\", \"lib/matplotlib/tests/test_figure.py::test_too_many_figures\", \"lib/matplotlib/tests/test_figure.py::test_iterability_axes_argument\", \"lib/matplotlib/tests/test_figure.py::test_set_fig_size\", \"lib/matplotlib/tests/test_figure.py::test_axes_remove\", \"lib/matplotlib/tests/test_figure.py::test_figaspect\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[both]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[major]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[minor]\", \"lib/matplotlib/tests/test_figure.py::test_change_dpi\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[1-nan]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[-1-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[inf-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_add_axes\", \"lib/matplotlib/tests/test_figure.py::test_subplots_shareax_loglabels\", \"lib/matplotlib/tests/test_figure.py::test_savefig\", \"lib/matplotlib/tests/test_figure.py::test_savefig_warns\", \"lib/matplotlib/tests/test_figure.py::test_savefig_backend\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Agg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Cairo]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_preserve_layout_engine\", \"lib/matplotlib/tests/test_figure.py::test_savefig_transparent[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_repr\", \"lib/matplotlib/tests/test_figure.py::test_valid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_invalid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_layout_change_warning[constrained]\", \"lib/matplotlib/tests/test_figure.py::test_layout_change_warning[compressed]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[png]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[png]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[ps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[eps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[svg]\", \"lib/matplotlib/tests/test_figure.py::test_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_axes_removal\", \"lib/matplotlib/tests/test_figure.py::test_removed_axis\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clear]\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clf]\", \"lib/matplotlib/tests/test_figure.py::test_clf_not_redefined\", \"lib/matplotlib/tests/test_figure.py::test_picking_does_not_stale\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_twotuple\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[eps]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x2-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x3-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_all_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_tuple[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_width_ratios\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_height_ratios\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x0-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x1-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x2-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x3-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x4-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x5-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail_list_of_str\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw[BC-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw[multi_value1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_string_parser\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw_expander\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_extra_per_subplot_kw\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[AAA\\\\nBBB-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[\\\\nAAA\\\\nBBB\\\\n-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[ABC\\\\nDEF-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x0-(?m)we\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x1-There\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[AAA\\\\nc\\\\nBBB-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x3-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_hashable_keys[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[abc]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cab]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bca]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cba]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[acb]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bac]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_user_order\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_share_all\", \"lib/matplotlib/tests/test_figure.py::test_reused_gridspec\", \"lib/matplotlib/tests/test_figure.py::test_subfigure[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_dpi\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ss[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_double[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_spanning\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ticks\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_scatter_size[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_pdf\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_add_axes_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_ginput\", \"lib/matplotlib/tests/test_figure.py::test_waitforbuttonpress\", \"lib/matplotlib/tests/test_figure.py::test_kwargs_pass\", \"lib/matplotlib/tests/test_figure.py::test_rcparams[png]\", \"lib/matplotlib/tests/test_figure.py::test_deepcopy\", \"lib/matplotlib/tests/test_figure.py::test_unpickle_with_device_pixel_ratio\", \"lib/matplotlib/tests/test_figure.py::test_gridspec_no_mutate_input\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[eps]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[png]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[ps]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[svg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[svgz]\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.821012",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}