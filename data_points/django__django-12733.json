{
  "repo": "django/django",
  "instance_id": "django__django-12733",
  "base_commit": "8bcca47e8356521f52f0738d9633befd53007cae",
  "patch": "diff --git a/django/core/management/sql.py b/django/core/management/sql.py\n--- a/django/core/management/sql.py\n+++ b/django/core/management/sql.py\n@@ -13,8 +13,12 @@ def sql_flush(style, connection, only_django=False, reset_sequences=True, allow_\n         tables = connection.introspection.django_table_names(only_existing=True, include_views=False)\n     else:\n         tables = connection.introspection.table_names(include_views=False)\n-    seqs = connection.introspection.sequence_list() if reset_sequences else ()\n-    return connection.ops.sql_flush(style, tables, seqs, allow_cascade)\n+    return connection.ops.sql_flush(\n+        style,\n+        tables,\n+        reset_sequences=reset_sequences,\n+        allow_cascade=allow_cascade,\n+    )\n \n \n def emit_pre_migrate_signal(verbosity, interactive, db, **kwargs):\ndiff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -382,16 +382,18 @@ def set_time_zone_sql(self):\n         \"\"\"\n         return ''\n \n-    def sql_flush(self, style, tables, sequences, allow_cascade=False):\n+    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n         \"\"\"\n         Return a list of SQL statements required to remove all data from\n         the given database tables (without actually removing the tables\n-        themselves) and the SQL statements required to reset the sequences\n-        passed in `sequences`.\n+        themselves).\n \n         The `style` argument is a Style object as returned by either\n         color_style() or no_style() in django.core.management.color.\n \n+        If `reset_sequences` is True, the list includes SQL statements required\n+        to reset the sequences.\n+\n         The `allow_cascade` argument determines whether truncation may cascade\n         to tables with foreign keys pointing the tables being truncated.\n         PostgreSQL requires a cascade even if these tables are empty.\ndiff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -193,29 +193,30 @@ def return_insert_columns(self, fields):\n         ]\n         return 'RETURNING %s' % ', '.join(columns), ()\n \n-    def sql_flush(self, style, tables, sequences, allow_cascade=False):\n+    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n         if not tables:\n             return []\n+\n         sql = ['SET FOREIGN_KEY_CHECKS = 0;']\n-        tables = set(tables)\n-        with_sequences = set(s['table'] for s in sequences)\n-        # It's faster to TRUNCATE tables that require a sequence reset since\n-        # ALTER TABLE AUTO_INCREMENT is slower than TRUNCATE.\n-        sql.extend(\n-            '%s %s;' % (\n-                style.SQL_KEYWORD('TRUNCATE'),\n-                style.SQL_FIELD(self.quote_name(table_name)),\n-            ) for table_name in tables.intersection(with_sequences)\n-        )\n-        # Otherwise issue a simple DELETE since it's faster than TRUNCATE\n-        # and preserves sequences.\n-        sql.extend(\n-            '%s %s %s;' % (\n-                style.SQL_KEYWORD('DELETE'),\n-                style.SQL_KEYWORD('FROM'),\n-                style.SQL_FIELD(self.quote_name(table_name)),\n-            ) for table_name in tables.difference(with_sequences)\n-        )\n+        if reset_sequences:\n+            # It's faster to TRUNCATE tables that require a sequence reset\n+            # since ALTER TABLE AUTO_INCREMENT is slower than TRUNCATE.\n+            sql.extend(\n+                '%s %s;' % (\n+                    style.SQL_KEYWORD('TRUNCATE'),\n+                    style.SQL_FIELD(self.quote_name(table_name)),\n+                ) for table_name in tables\n+            )\n+        else:\n+            # Otherwise issue a simple DELETE since it's faster than TRUNCATE\n+            # and preserves sequences.\n+            sql.extend(\n+                '%s %s %s;' % (\n+                    style.SQL_KEYWORD('DELETE'),\n+                    style.SQL_KEYWORD('FROM'),\n+                    style.SQL_FIELD(self.quote_name(table_name)),\n+                ) for table_name in tables\n+            )\n         sql.append('SET FOREIGN_KEY_CHECKS = 1;')\n         return sql\n \ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -404,53 +404,58 @@ def _foreign_key_constraints(self):\n         # Django's test suite.\n         return lru_cache(maxsize=512)(self.__foreign_key_constraints)\n \n-    def sql_flush(self, style, tables, sequences, allow_cascade=False):\n-        if tables:\n-            truncated_tables = {table.upper() for table in tables}\n-            constraints = set()\n-            # Oracle's TRUNCATE CASCADE only works with ON DELETE CASCADE\n-            # foreign keys which Django doesn't define. Emulate the\n-            # PostgreSQL behavior which truncates all dependent tables by\n-            # manually retrieving all foreign key constraints and resolving\n-            # dependencies.\n-            for table in tables:\n-                for foreign_table, constraint in self._foreign_key_constraints(table, recursive=allow_cascade):\n-                    if allow_cascade:\n-                        truncated_tables.add(foreign_table)\n-                    constraints.add((foreign_table, constraint))\n-            sql = [\n-                \"%s %s %s %s %s %s %s %s;\" % (\n-                    style.SQL_KEYWORD('ALTER'),\n-                    style.SQL_KEYWORD('TABLE'),\n-                    style.SQL_FIELD(self.quote_name(table)),\n-                    style.SQL_KEYWORD('DISABLE'),\n-                    style.SQL_KEYWORD('CONSTRAINT'),\n-                    style.SQL_FIELD(self.quote_name(constraint)),\n-                    style.SQL_KEYWORD('KEEP'),\n-                    style.SQL_KEYWORD('INDEX'),\n-                ) for table, constraint in constraints\n-            ] + [\n-                \"%s %s %s;\" % (\n-                    style.SQL_KEYWORD('TRUNCATE'),\n-                    style.SQL_KEYWORD('TABLE'),\n-                    style.SQL_FIELD(self.quote_name(table)),\n-                ) for table in truncated_tables\n-            ] + [\n-                \"%s %s %s %s %s %s;\" % (\n-                    style.SQL_KEYWORD('ALTER'),\n-                    style.SQL_KEYWORD('TABLE'),\n-                    style.SQL_FIELD(self.quote_name(table)),\n-                    style.SQL_KEYWORD('ENABLE'),\n-                    style.SQL_KEYWORD('CONSTRAINT'),\n-                    style.SQL_FIELD(self.quote_name(constraint)),\n-                ) for table, constraint in constraints\n+    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n+        if not tables:\n+            return []\n+\n+        truncated_tables = {table.upper() for table in tables}\n+        constraints = set()\n+        # Oracle's TRUNCATE CASCADE only works with ON DELETE CASCADE foreign\n+        # keys which Django doesn't define. Emulate the PostgreSQL behavior\n+        # which truncates all dependent tables by manually retrieving all\n+        # foreign key constraints and resolving dependencies.\n+        for table in tables:\n+            for foreign_table, constraint in self._foreign_key_constraints(table, recursive=allow_cascade):\n+                if allow_cascade:\n+                    truncated_tables.add(foreign_table)\n+                constraints.add((foreign_table, constraint))\n+        sql = [\n+            '%s %s %s %s %s %s %s %s;' % (\n+                style.SQL_KEYWORD('ALTER'),\n+                style.SQL_KEYWORD('TABLE'),\n+                style.SQL_FIELD(self.quote_name(table)),\n+                style.SQL_KEYWORD('DISABLE'),\n+                style.SQL_KEYWORD('CONSTRAINT'),\n+                style.SQL_FIELD(self.quote_name(constraint)),\n+                style.SQL_KEYWORD('KEEP'),\n+                style.SQL_KEYWORD('INDEX'),\n+            ) for table, constraint in constraints\n+        ] + [\n+            '%s %s %s;' % (\n+                style.SQL_KEYWORD('TRUNCATE'),\n+                style.SQL_KEYWORD('TABLE'),\n+                style.SQL_FIELD(self.quote_name(table)),\n+            ) for table in truncated_tables\n+        ] + [\n+            '%s %s %s %s %s %s;' % (\n+                style.SQL_KEYWORD('ALTER'),\n+                style.SQL_KEYWORD('TABLE'),\n+                style.SQL_FIELD(self.quote_name(table)),\n+                style.SQL_KEYWORD('ENABLE'),\n+                style.SQL_KEYWORD('CONSTRAINT'),\n+                style.SQL_FIELD(self.quote_name(constraint)),\n+            ) for table, constraint in constraints\n+        ]\n+        if reset_sequences:\n+            sequences = [\n+                sequence\n+                for sequence in self.connection.introspection.sequence_list()\n+                if sequence['table'].upper() in truncated_tables\n             ]\n-            # Since we've just deleted all the rows, running our sequence\n-            # ALTER code will reset the sequence to 0.\n+            # Since we've just deleted all the rows, running our sequence ALTER\n+            # code will reset the sequence to 0.\n             sql.extend(self.sequence_reset_by_name_sql(style, sequences))\n-            return sql\n-        else:\n-            return []\n+        return sql\n \n     def sequence_reset_by_name_sql(self, style, sequences):\n         sql = []\ndiff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -117,29 +117,22 @@ def quote_name(self, name):\n     def set_time_zone_sql(self):\n         return \"SET TIME ZONE %s\"\n \n-    def sql_flush(self, style, tables, sequences, allow_cascade=False):\n-        if tables:\n-            # Perform a single SQL 'TRUNCATE x, y, z...;' statement.  It allows\n-            # us to truncate tables referenced by a foreign key in any other\n-            # table.\n-            tables_sql = ', '.join(\n-                style.SQL_FIELD(self.quote_name(table)) for table in tables)\n-            if allow_cascade:\n-                sql = ['%s %s %s;' % (\n-                    style.SQL_KEYWORD('TRUNCATE'),\n-                    tables_sql,\n-                    style.SQL_KEYWORD('CASCADE'),\n-                )]\n-            else:\n-                sql = ['%s %s;' % (\n-                    style.SQL_KEYWORD('TRUNCATE'),\n-                    tables_sql,\n-                )]\n-            sql.extend(self.sequence_reset_by_name_sql(style, sequences))\n-            return sql\n-        else:\n+    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n+        if not tables:\n             return []\n \n+        # Perform a single SQL 'TRUNCATE x, y, z...;' statement. It allows us\n+        # to truncate tables referenced by a foreign key in any other table.\n+        sql_parts = [\n+            style.SQL_KEYWORD('TRUNCATE'),\n+            ', '.join(style.SQL_FIELD(self.quote_name(table)) for table in tables),\n+        ]\n+        if reset_sequences:\n+            sql_parts.append(style.SQL_KEYWORD('RESTART IDENTITY'))\n+        if allow_cascade:\n+            sql_parts.append(style.SQL_KEYWORD('CASCADE'))\n+        return ['%s;' % ' '.join(sql_parts)]\n+\n     def sequence_reset_by_name_sql(self, style, sequences):\n         # 'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements\n         # to reset sequence indices\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -196,7 +196,7 @@ def _references_graph(self):\n         # Django's test suite.\n         return lru_cache(maxsize=512)(self.__references_graph)\n \n-    def sql_flush(self, style, tables, sequences, allow_cascade=False):\n+    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n         if tables and allow_cascade:\n             # Simulate TRUNCATE CASCADE by recursively collecting the tables\n             # referencing the tables to be flushed.\n",
  "test_patch": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -43,7 +43,7 @@ def test_set_time_zone_sql(self):\n     def test_sql_flush(self):\n         msg = 'subclasses of BaseDatabaseOperations must provide a sql_flush() method'\n         with self.assertRaisesMessage(NotImplementedError, msg):\n-            self.ops.sql_flush(None, None, None)\n+            self.ops.sql_flush(None, None)\n \n     def test_pk_default_value(self):\n         self.assertEqual(self.ops.pk_default_value(), 'DEFAULT')\n@@ -154,7 +154,7 @@ class SqlFlushTests(TransactionTestCase):\n     available_apps = ['backends']\n \n     def test_sql_flush_no_tables(self):\n-        self.assertEqual(connection.ops.sql_flush(no_style(), [], []), [])\n+        self.assertEqual(connection.ops.sql_flush(no_style(), []), [])\n \n     def test_execute_sql_flush_statements(self):\n         with transaction.atomic():\n@@ -169,12 +169,7 @@ def test_execute_sql_flush_statements(self):\n         sql_list = connection.ops.sql_flush(\n             no_style(),\n             [Author._meta.db_table, Book._meta.db_table],\n-            [\n-                {\n-                    'table': Author._meta.db_table,\n-                    'column': Author._meta.pk.db_column,\n-                },\n-            ],\n+            reset_sequences=True,\n             allow_cascade=True,\n         )\n         connection.ops.execute_sql_flush(connection.alias, sql_list)\n@@ -185,3 +180,5 @@ def test_execute_sql_flush_statements(self):\n             if connection.features.supports_sequence_reset:\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n+                book = Book.objects.create(author=author)\n+                self.assertEqual(book.pk, 1)\ndiff --git a/tests/backends/mysql/test_operations.py b/tests/backends/mysql/test_operations.py\n--- a/tests/backends/mysql/test_operations.py\n+++ b/tests/backends/mysql/test_operations.py\n@@ -4,7 +4,7 @@\n from django.db import connection\n from django.test import SimpleTestCase\n \n-from ..models import Person, Square, Tag\n+from ..models import Person, Tag\n \n \n @unittest.skipUnless(connection.vendor == 'mysql', 'MySQL tests.')\n@@ -13,50 +13,35 @@ def test_sql_flush(self):\n         # allow_cascade doesn't change statements on MySQL.\n         for allow_cascade in [False, True]:\n             with self.subTest(allow_cascade=allow_cascade):\n-                statements = connection.ops.sql_flush(\n-                    no_style(),\n-                    [Person._meta.db_table, Tag._meta.db_table],\n-                    [],\n-                    allow_cascade=allow_cascade,\n-                )\n-                self.assertEqual(statements[0], 'SET FOREIGN_KEY_CHECKS = 0;')\n-                # The tables are processed in an unordered set.\n                 self.assertEqual(\n-                    sorted(statements[1:-1]),\n+                    connection.ops.sql_flush(\n+                        no_style(),\n+                        [Person._meta.db_table, Tag._meta.db_table],\n+                        allow_cascade=allow_cascade,\n+                    ),\n                     [\n+                        'SET FOREIGN_KEY_CHECKS = 0;',\n                         'DELETE FROM `backends_person`;',\n                         'DELETE FROM `backends_tag`;',\n+                        'SET FOREIGN_KEY_CHECKS = 1;',\n                     ],\n                 )\n-                self.assertEqual(statements[-1], 'SET FOREIGN_KEY_CHECKS = 1;')\n \n     def test_sql_flush_sequences(self):\n         # allow_cascade doesn't change statements on MySQL.\n         for allow_cascade in [False, True]:\n             with self.subTest(allow_cascade=allow_cascade):\n-                statements = connection.ops.sql_flush(\n-                    no_style(),\n-                    [Person._meta.db_table, Square._meta.db_table, Tag._meta.db_table],\n-                    [\n-                        {\n-                            'table': Person._meta.db_table,\n-                            'column': Person._meta.pk.db_column,\n-                        },\n-                        {\n-                            'table': Tag._meta.db_table,\n-                            'column': Tag._meta.pk.db_column,\n-                        },\n-                    ],\n-                    allow_cascade=allow_cascade,\n-                )\n-                self.assertEqual(statements[0], 'SET FOREIGN_KEY_CHECKS = 0;')\n-                # The tables are processed in an unordered set.\n                 self.assertEqual(\n-                    sorted(statements[1:-1]),\n+                    connection.ops.sql_flush(\n+                        no_style(),\n+                        [Person._meta.db_table, Tag._meta.db_table],\n+                        reset_sequences=True,\n+                        allow_cascade=allow_cascade,\n+                    ),\n                     [\n-                        'DELETE FROM `backends_square`;',\n+                        'SET FOREIGN_KEY_CHECKS = 0;',\n                         'TRUNCATE `backends_person`;',\n                         'TRUNCATE `backends_tag`;',\n+                        'SET FOREIGN_KEY_CHECKS = 1;',\n                     ],\n                 )\n-                self.assertEqual(statements[-1], 'SET FOREIGN_KEY_CHECKS = 1;')\ndiff --git a/tests/backends/oracle/test_operations.py b/tests/backends/oracle/test_operations.py\n--- a/tests/backends/oracle/test_operations.py\n+++ b/tests/backends/oracle/test_operations.py\n@@ -31,7 +31,6 @@ def test_sql_flush(self):\n         statements = connection.ops.sql_flush(\n             no_style(),\n             [Person._meta.db_table, Tag._meta.db_table],\n-            [],\n         )\n         # The tables and constraints are processed in an unordered set.\n         self.assertEqual(\n@@ -56,7 +55,6 @@ def test_sql_flush_allow_cascade(self):\n         statements = connection.ops.sql_flush(\n             no_style(),\n             [Person._meta.db_table, Tag._meta.db_table],\n-            [],\n             allow_cascade=True,\n         )\n         # The tables and constraints are processed in an unordered set.\n@@ -83,16 +81,7 @@ def test_sql_flush_sequences(self):\n         statements = connection.ops.sql_flush(\n             no_style(),\n             [Person._meta.db_table, Tag._meta.db_table],\n-            [\n-                {\n-                    'table': Person._meta.db_table,\n-                    'column': Person._meta.pk.db_column,\n-                },\n-                {\n-                    'table': Tag._meta.db_table,\n-                    'column': Tag._meta.pk.db_column,\n-                },\n-            ],\n+            reset_sequences=True,\n         )\n         # The tables and constraints are processed in an unordered set.\n         self.assertEqual(\n@@ -121,16 +110,7 @@ def test_sql_flush_sequences_allow_cascade(self):\n         statements = connection.ops.sql_flush(\n             no_style(),\n             [Person._meta.db_table, Tag._meta.db_table],\n-            [\n-                {\n-                    'table': Person._meta.db_table,\n-                    'column': Person._meta.pk.db_column,\n-                },\n-                {\n-                    'table': Tag._meta.db_table,\n-                    'column': Tag._meta.pk.db_column,\n-                },\n-            ],\n+            reset_sequences=True,\n             allow_cascade=True,\n         )\n         # The tables and constraints are processed in an unordered set.\n@@ -153,6 +133,7 @@ def test_sql_flush_sequences_allow_cascade(self):\n             '\"BACKENDS__PERSON_ID_1DD5E829_F\";',\n         )\n         # Sequences.\n-        self.assertEqual(len(statements[5:]), 2)\n+        self.assertEqual(len(statements[5:]), 3)\n         self.assertIn('BACKENDS_PERSON_SQ', statements[5])\n-        self.assertIn('BACKENDS_TAG_SQ', statements[6])\n+        self.assertIn('BACKENDS_VERYLONGMODELN7BE2_SQ', statements[6])\n+        self.assertIn('BACKENDS_TAG_SQ', statements[7])\ndiff --git a/tests/backends/postgresql/test_operations.py b/tests/backends/postgresql/test_operations.py\n--- a/tests/backends/postgresql/test_operations.py\n+++ b/tests/backends/postgresql/test_operations.py\n@@ -14,7 +14,6 @@ def test_sql_flush(self):\n             connection.ops.sql_flush(\n                 no_style(),\n                 [Person._meta.db_table, Tag._meta.db_table],\n-                [],\n             ),\n             ['TRUNCATE \"backends_person\", \"backends_tag\";'],\n         )\n@@ -24,61 +23,28 @@ def test_sql_flush_allow_cascade(self):\n             connection.ops.sql_flush(\n                 no_style(),\n                 [Person._meta.db_table, Tag._meta.db_table],\n-                [],\n                 allow_cascade=True,\n             ),\n             ['TRUNCATE \"backends_person\", \"backends_tag\" CASCADE;'],\n         )\n \n     def test_sql_flush_sequences(self):\n-        sequence_reset_sql = (\n-            \"SELECT setval(pg_get_serial_sequence('%s','id'), 1, false);\"\n-        )\n         self.assertEqual(\n             connection.ops.sql_flush(\n                 no_style(),\n                 [Person._meta.db_table, Tag._meta.db_table],\n-                [\n-                    {\n-                        'table': Person._meta.db_table,\n-                        'column': Person._meta.pk.db_column,\n-                    },\n-                    {\n-                        'table': Tag._meta.db_table,\n-                        'column': Tag._meta.pk.db_column,\n-                    },\n-                ],\n+                reset_sequences=True,\n             ),\n-            [\n-                'TRUNCATE \"backends_person\", \"backends_tag\";',\n-                sequence_reset_sql % '\"backends_person\"',\n-                sequence_reset_sql % '\"backends_tag\"',\n-            ],\n+            ['TRUNCATE \"backends_person\", \"backends_tag\" RESTART IDENTITY;'],\n         )\n \n     def test_sql_flush_sequences_allow_cascade(self):\n-        sequence_reset_sql = (\n-            \"SELECT setval(pg_get_serial_sequence('%s','id'), 1, false);\"\n-        )\n         self.assertEqual(\n             connection.ops.sql_flush(\n                 no_style(),\n                 [Person._meta.db_table, Tag._meta.db_table],\n-                [\n-                    {\n-                        'table': Person._meta.db_table,\n-                        'column': Person._meta.pk.db_column,\n-                    },\n-                    {\n-                        'table': Tag._meta.db_table,\n-                        'column': Tag._meta.pk.db_column,\n-                    },\n-                ],\n+                reset_sequences=True,\n                 allow_cascade=True,\n             ),\n-            [\n-                'TRUNCATE \"backends_person\", \"backends_tag\" CASCADE;',\n-                sequence_reset_sql % '\"backends_person\"',\n-                sequence_reset_sql % '\"backends_tag\"',\n-            ],\n+            ['TRUNCATE \"backends_person\", \"backends_tag\" RESTART IDENTITY CASCADE;'],\n         )\ndiff --git a/tests/backends/sqlite/test_operations.py b/tests/backends/sqlite/test_operations.py\n--- a/tests/backends/sqlite/test_operations.py\n+++ b/tests/backends/sqlite/test_operations.py\n@@ -14,7 +14,6 @@ def test_sql_flush(self):\n             connection.ops.sql_flush(\n                 no_style(),\n                 [Person._meta.db_table, Tag._meta.db_table],\n-                [],\n             ),\n             [\n                 'DELETE FROM \"backends_person\";',\n@@ -26,7 +25,6 @@ def test_sql_flush_allow_cascade(self):\n         statements = connection.ops.sql_flush(\n             no_style(),\n             [Person._meta.db_table, Tag._meta.db_table],\n-            [],\n             allow_cascade=True,\n         )\n         self.assertEqual(\n@@ -47,16 +45,7 @@ def test_sql_flush_sequences(self):\n             connection.ops.sql_flush(\n                 no_style(),\n                 [Person._meta.db_table, Tag._meta.db_table],\n-                [\n-                    {\n-                        'table': Person._meta.db_table,\n-                        'column': Person._meta.pk.db_column,\n-                    },\n-                    {\n-                        'table': Tag._meta.db_table,\n-                        'column': Tag._meta.pk.db_column,\n-                    },\n-                ],\n+                reset_sequences=True,\n             ),\n             [\n                 'DELETE FROM \"backends_person\";',\n@@ -69,16 +58,7 @@ def test_sql_flush_sequences_allow_cascade(self):\n         statements = connection.ops.sql_flush(\n             no_style(),\n             [Person._meta.db_table, Tag._meta.db_table],\n-            [\n-                {\n-                    'table': Person._meta.db_table,\n-                    'column': Person._meta.pk.db_column,\n-                },\n-                {\n-                    'table': Tag._meta.db_table,\n-                    'column': Tag._meta.pk.db_column,\n-                },\n-            ],\n+            reset_sequences=True,\n             allow_cascade=True,\n         )\n         self.assertEqual(\ndiff --git a/tests/backends/tests.py b/tests/backends/tests.py\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -161,13 +161,7 @@ def test_sequence_name_length_limits_flush(self):\n             VLM._meta.db_table,\n             VLM_m2m._meta.db_table,\n         ]\n-        sequences = [\n-            {\n-                'column': VLM._meta.pk.column,\n-                'table': VLM._meta.db_table\n-            },\n-        ]\n-        sql_list = connection.ops.sql_flush(no_style(), tables, sequences)\n+        sql_list = connection.ops.sql_flush(no_style(), tables, reset_sequences=True)\n         with connection.cursor() as cursor:\n             for statement in sql_list:\n                 cursor.execute(statement)\n",
  "problem_statement": "Use PostgreSQL TRUNCATE … RESTART IDENTITY keyword to reset sequences in sql_flush()\nDescription\n\t\nRather than executing an additional query per truncated table, can truncate and reset sequences in a single query by using the RESTART IDENTITY syntax.\nMy project uses the sql_flush() operation internally and profiling shows that it can consume a large percentage of the runtime. Reducing the number of queries to one should help provide a small performance improvement.\n",
  "hints_text": "​https://github.com/django/django/pull/12733",
  "created_at": "2020-04-16T20:41:35Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_sql_flush (backends.sqlite.test_operations.SQLiteOperationsTests)\", \"test_sql_flush_allow_cascade (backends.sqlite.test_operations.SQLiteOperationsTests)\", \"test_sql_flush_sequences (backends.sqlite.test_operations.SQLiteOperationsTests)\", \"test_sql_flush_sequences_allow_cascade (backends.sqlite.test_operations.SQLiteOperationsTests)\", \"test_execute_sql_flush_statements (backends.base.test_operations.SqlFlushTests)\", \"test_sql_flush_no_tables (backends.base.test_operations.SqlFlushTests)\", \"test_sequence_name_length_limits_flush (backends.tests.LongNameTest)\", \"test_sql_flush (backends.base.test_operations.SimpleDatabaseOperationTests)\"]",
  "PASS_TO_PASS": "[\"test_distinct_on_fields (backends.base.test_operations.DatabaseOperationTests)\", \"test_django_date_extract (backends.tests.DateQuotingTest)\", \"test_django_date_trunc (backends.tests.DateQuotingTest)\", \"test_parameter_escaping (backends.tests.EscapingChecks)\", \"test_paramless_no_escaping (backends.tests.EscapingChecks)\", \"An executemany call with too many/not enough parameters will raise an exception (Refs #12612)\", \"Sequence names are correct when resetting generic relations (Ref #13941)\", \"test_parameter_escaping (backends.tests.EscapingChecksDebug)\", \"test_paramless_no_escaping (backends.tests.EscapingChecksDebug)\", \"test_can_reference_existent (backends.tests.DBConstraintTestCase)\", \"test_can_reference_non_existent (backends.tests.DBConstraintTestCase)\", \"test_many_to_many (backends.tests.DBConstraintTestCase)\", \"test_debug_sql (backends.tests.LastExecutedQueryTest)\", \"test_last_executed_query (backends.tests.LastExecutedQueryTest)\", \"test_last_executed_query_without_previous_query (backends.tests.LastExecutedQueryTest)\", \"last_executed_query() returns a string.\", \"test_closing_non_shared_connections (backends.tests.ThreadTests)\", \"test_connections_thread_local (backends.tests.ThreadTests)\", \"test_default_connection_thread_local (backends.tests.ThreadTests)\", \"test_pass_connection_between_threads (backends.tests.ThreadTests)\", \"test_thread_sharing_count (backends.tests.ThreadTests)\", \"Test creation of model with long name and long pk name doesn't error. Ref #8901\", \"test_sequence_name_length_limits_m2m (backends.tests.LongNameTest)\", \"test_check_constraints (backends.tests.FkConstraintsTests)\", \"test_disable_constraint_checks_context_manager (backends.tests.FkConstraintsTests)\", \"test_disable_constraint_checks_manually (backends.tests.FkConstraintsTests)\", \"test_integrity_checks_on_creation (backends.tests.FkConstraintsTests)\", \"test_integrity_checks_on_update (backends.tests.FkConstraintsTests)\", \"test_cached_db_features (backends.tests.BackendTestCase)\", \"test_cursor_contextmanager (backends.tests.BackendTestCase)\", \"test_cursor_executemany (backends.tests.BackendTestCase)\", \"test_cursor_executemany_with_empty_params_list (backends.tests.BackendTestCase)\", \"test_cursor_executemany_with_iterator (backends.tests.BackendTestCase)\", \"test_database_operations_helper_class (backends.tests.BackendTestCase)\", \"test_database_operations_init (backends.tests.BackendTestCase)\", \"Creating an existing table returns a DatabaseError\", \"test_queries (backends.tests.BackendTestCase)\", \"test_timezone_none_use_tz_false (backends.tests.BackendTestCase)\", \"test_unicode_fetches (backends.tests.BackendTestCase)\", \"test_unicode_password (backends.tests.BackendTestCase)\", \"test_adapt_datetimefield_value (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_adapt_timefield_value (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_adapt_timefield_value_none (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_adapt_timefield_value_unaware (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_adapt_unknown_value_date (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_adapt_unknown_value_decimal (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_adapt_unknown_value_time (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_date_extract_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_date_interval_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_date_trunc_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_datetime_cast_date_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_datetime_cast_time_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_datetime_extract_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_datetime_trunc_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_deferrable_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_end_transaction_rollback (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_no_limit_value (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_pk_default_value (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_quote_name (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_regex_lookup (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_sequence_reset_by_name_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_set_time_zone_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_tablespace_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_time_extract_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\", \"test_time_trunc_sql (backends.base.test_operations.SimpleDatabaseOperationTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.633434",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}