{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13933",
  "base_commit": "e747376eef58ab671243fbc463e6ef8bf342636c",
  "patch": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/binning.py b/sklearn/ensemble/_hist_gradient_boosting/binning.py\n--- a/sklearn/ensemble/_hist_gradient_boosting/binning.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/binning.py\n@@ -140,7 +140,7 @@ def transform(self, X):\n         Returns\n         -------\n         X_binned : array-like, shape (n_samples, n_features)\n-            The binned data.\n+            The binned data (fortran-aligned).\n         \"\"\"\n         X = check_array(X, dtype=[X_DTYPE])\n         check_is_fitted(self, ['bin_thresholds_', 'actual_n_bins_'])\ndiff --git a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py\n--- a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py\n@@ -112,17 +112,6 @@ def fit(self, X, y):\n         # data.\n         self._in_fit = True\n \n-        # bin the data\n-        if self.verbose:\n-            print(\"Binning {:.3f} GB of data: \".format(X.nbytes / 1e9), end=\"\",\n-                  flush=True)\n-        tic = time()\n-        self.bin_mapper_ = _BinMapper(max_bins=self.max_bins, random_state=rng)\n-        X_binned = self.bin_mapper_.fit_transform(X)\n-        toc = time()\n-        if self.verbose:\n-            duration = toc - tic\n-            print(\"{:.3f} s\".format(duration))\n \n         self.loss_ = self._get_loss()\n \n@@ -135,17 +124,20 @@ def fit(self, X, y):\n             # stratify for classification\n             stratify = y if hasattr(self.loss_, 'predict_proba') else None\n \n-            X_binned_train, X_binned_val, y_train, y_val = train_test_split(\n-                X_binned, y, test_size=self.validation_fraction,\n-                stratify=stratify, random_state=rng)\n+            X_train, X_val, y_train, y_val = train_test_split(\n+                X, y, test_size=self.validation_fraction, stratify=stratify,\n+                random_state=rng)\n+        else:\n+            X_train, y_train = X, y\n+            X_val, y_val = None, None\n \n-            # Predicting is faster of C-contiguous arrays, training is faster\n-            # on Fortran arrays.\n-            X_binned_val = np.ascontiguousarray(X_binned_val)\n-            X_binned_train = np.asfortranarray(X_binned_train)\n+        # Bin the data\n+        self.bin_mapper_ = _BinMapper(max_bins=self.max_bins, random_state=rng)\n+        X_binned_train = self._bin_data(X_train, rng, is_training_data=True)\n+        if X_val is not None:\n+            X_binned_val = self._bin_data(X_val, rng, is_training_data=False)\n         else:\n-            X_binned_train, y_train = X_binned, y\n-            X_binned_val, y_val = None, None\n+            X_binned_val = None\n \n         if self.verbose:\n             print(\"Fitting gradient boosted rounds:\")\n@@ -387,6 +379,32 @@ def _should_stop(self, scores):\n                                for score in recent_scores]\n         return not any(recent_improvements)\n \n+    def _bin_data(self, X, rng, is_training_data):\n+        \"\"\"Bin data X.\n+\n+        If is_training_data, then set the bin_mapper_ attribute.\n+        Else, the binned data is converted to a C-contiguous array.\n+        \"\"\"\n+\n+        description = 'training' if is_training_data else 'validation'\n+        if self.verbose:\n+            print(\"Binning {:.3f} GB of {} data: \".format(\n+                X.nbytes / 1e9, description), end=\"\", flush=True)\n+        tic = time()\n+        if is_training_data:\n+            X_binned = self.bin_mapper_.fit_transform(X)  # F-aligned array\n+        else:\n+            X_binned = self.bin_mapper_.transform(X)  # F-aligned array\n+            # We convert the array to C-contiguous since predicting is faster\n+            # with this layout (training is faster on F-arrays though)\n+            X_binned = np.ascontiguousarray(X_binned)\n+        toc = time()\n+        if self.verbose:\n+            duration = toc - tic\n+            print(\"{:.3f} s\".format(duration))\n+\n+        return X_binned\n+\n     def _print_iteration_stats(self, iteration_start_time):\n         \"\"\"Print info about the current fitting iteration.\"\"\"\n         log_msg = ''\n",
  "test_patch": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -6,6 +6,7 @@\n from sklearn.experimental import enable_hist_gradient_boosting  # noqa\n from sklearn.ensemble import HistGradientBoostingRegressor\n from sklearn.ensemble import HistGradientBoostingClassifier\n+from sklearn.ensemble._hist_gradient_boosting.binning import _BinMapper\n \n \n X_classification, y_classification = make_classification(random_state=0)\n@@ -145,3 +146,29 @@ def test_should_stop(scores, n_iter_no_change, tol, stopping):\n         n_iter_no_change=n_iter_no_change, tol=tol\n     )\n     assert gbdt._should_stop(scores) == stopping\n+\n+\n+def test_binning_train_validation_are_separated():\n+    # Make sure training and validation data are binned separately.\n+    # See issue 13926\n+\n+    rng = np.random.RandomState(0)\n+    validation_fraction = .2\n+    gb = HistGradientBoostingClassifier(\n+        n_iter_no_change=5,\n+        validation_fraction=validation_fraction,\n+        random_state=rng\n+    )\n+    gb.fit(X_classification, y_classification)\n+    mapper_training_data = gb.bin_mapper_\n+\n+    # Note that since the data is small there is no subsampling and the\n+    # random_state doesn't matter\n+    mapper_whole_data = _BinMapper(random_state=0)\n+    mapper_whole_data.fit(X_classification)\n+\n+    n_samples = X_classification.shape[0]\n+    assert np.all(mapper_training_data.actual_n_bins_ ==\n+                  int((1 - validation_fraction) * n_samples))\n+    assert np.all(mapper_training_data.actual_n_bins_ !=\n+                  mapper_whole_data.actual_n_bins_)\n",
  "problem_statement": "GBDTs should bin train and validation data separately? \nIn the new GBDTs we bin the data before calling `train_test_split()` (for early-stopping).\r\n\r\nThat means that the validation set is also used to find the bin thresholds (it is of course not used to find the split points!).\r\n\r\nI feel like the \"data leak\" is very minimal, but it seems more correct to bin X_train and X_val separately.\r\n\r\n@ogrisel WDYT?\n",
  "hints_text": "Well it means that the internal scores are but not as accurate estimates as\nthey could be, but you expect it would rarely affect prediction, yeah?\n\nThis can impact early stopping and therefore prediction but probably minimally.\r\n\r\nBut I agree better avoid any kind of data leak. +1 for fixing this.\r\n\r\n",
  "created_at": "2019-05-23T14:44:19Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_binning_train_validation_are_separated\"]",
  "PASS_TO_PASS": "[\"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params0-Loss\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params1-learning_rate=0\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params2-learning_rate=-1\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params3-max_iter=0\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params4-max_leaf_nodes=0\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params5-max_leaf_nodes=1\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params6-max_depth=0\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params7-max_depth=1\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params8-min_samples_leaf=0\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params9-l2_regularization=-1\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params10-max_bins=1\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params11-max_bins=257\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params12-n_iter_no_change=-1\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params13-validation_fraction=-1\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params14-validation_fraction=0\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_init_parameters_validation[params15-tol=-1\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_invalid_classification_loss\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_regression[neg_mean_squared_error-0.1-5-1e-07]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_regression[neg_mean_squared_error-None-5-0.1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_regression[None-0.1-5-1e-07]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_regression[None-None-5-0.1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_regression[loss-0.1-5-1e-07]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_regression[loss-None-5-0.1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_regression[None-None-None-None]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[accuracy-0.1-5-1e-07-data0]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[accuracy-0.1-5-1e-07-data1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[accuracy-None-5-0.1-data0]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[accuracy-None-5-0.1-data1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[None-0.1-5-1e-07-data0]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[None-0.1-5-1e-07-data1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[None-None-5-0.1-data0]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[None-None-5-0.1-data1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[loss-0.1-5-1e-07-data0]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[loss-0.1-5-1e-07-data1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[loss-None-5-0.1-data0]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[loss-None-5-0.1-data1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[None-None-None-None-data0]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_early_stopping_classification[None-None-None-None-data1]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores0-1-0.001-False]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores1-5-0.001-False]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores2-5-0.001-False]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores3-5-0.001-False]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores4-5-0.0-False]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores5-5-0.999-False]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores6-5-4.99999-False]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores7-5-0.0-True]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores8-5-0.001-True]\", \"sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py::test_should_stop[scores9-5-5-True]\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.000343",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}