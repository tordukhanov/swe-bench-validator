{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-7114",
  "base_commit": "397c1703e8ae6349d33f7b99f45b2ccaf581e666",
  "patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -82,8 +82,10 @@ def expand_modules(\n             continue\n         module_path = get_python_path(something)\n         additional_search_path = [\".\", module_path] + path\n-        if os.path.exists(something):\n-            # this is a file or a directory\n+        if os.path.isfile(something) or os.path.exists(\n+            os.path.join(something, \"__init__.py\")\n+        ):\n+            # this is a file or a directory with an explicit __init__.py\n             try:\n                 modname = \".\".join(\n                     modutils.modpath_from_file(something, path=additional_search_path)\n@@ -103,9 +105,7 @@ def expand_modules(\n                 )\n                 if filepath is None:\n                     continue\n-            except (ImportError, SyntaxError) as ex:\n-                # The SyntaxError is a Python bug and should be\n-                # removed once we move away from imp.find_module: https://bugs.python.org/issue10588\n+            except ImportError as ex:\n                 errors.append({\"key\": \"fatal\", \"mod\": modname, \"ex\": ex})\n                 continue\n         filepath = os.path.normpath(filepath)\n",
  "test_patch": "diff --git a/tests/checkers/unittest_imports.py b/tests/checkers/unittest_imports.py\n--- a/tests/checkers/unittest_imports.py\n+++ b/tests/checkers/unittest_imports.py\n@@ -7,6 +7,7 @@\n import os\n \n import astroid\n+import pytest\n \n from pylint import epylint as lint\n from pylint.checkers import imports\n@@ -40,6 +41,9 @@ def test_relative_beyond_top_level(self) -> None:\n             self.checker.visit_importfrom(module.body[2].body[0])\n \n     @staticmethod\n+    @pytest.mark.xfail(\n+        reason=\"epylint manipulates cwd; these tests should not be using epylint\"\n+    )\n     def test_relative_beyond_top_level_two() -> None:\n         output, errors = lint.py_run(\n             f\"{os.path.join(REGR_DATA, 'beyond_top_two')} -d all -e relative-beyond-top-level\",\ndiff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -942,3 +942,12 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n     assert not linter.stats.by_msg\n+\n+\n+def test_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    with tempdir():\n+        create_files([\"identical/identical.py\"])\n+        with open(\"identical/identical.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"import imp\")\n+        initialized_linter.check([\"identical\"])\n+    assert initialized_linter.stats.by_msg[\"deprecated-module\"] == 1\n",
  "problem_statement": "Linting fails if module contains module of the same name\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\n.\r\n`-- a/\r\n    |-- a.py\r\n    `-- b.py\r\n```\r\nWhich are all empty, running `pylint a` fails:\r\n\r\n```\r\n$ pylint a\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n$\r\n```\r\n\r\nHowever, if I rename `a.py`, `pylint a` succeeds:\r\n\r\n```\r\n$ mv a/a.py a/c.py\r\n$ pylint a\r\n$\r\n```\r\nAlternatively, I can also `touch a/__init__.py`, but that shouldn't be necessary anymore.\r\n\r\n### Current behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present fails while searching for an `__init__.py` file.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present should succeed.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 3.0.0a3\r\nastroid 2.5.6\r\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \r\n[GCC 9.3.0]\r\n```\r\n\r\n### Additional info\r\n\r\nThis also has some side-effects in module resolution. For example, if I create another file `r.py`:\r\n\r\n```\r\n.\r\n|-- a\r\n|   |-- a.py\r\n|   `-- b.py\r\n`-- r.py\r\n```\r\n\r\nWith the content:\r\n\r\n```\r\nfrom a import b\r\n```\r\n\r\nRunning `pylint -E r` will run fine, but `pylint -E r a` will fail. Not just for module a, but for module r as well.\r\n\r\n```\r\n************* Module r\r\nr.py:1:0: E0611: No name 'b' in module 'a' (no-name-in-module)\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n```\r\n\r\nAgain, if I rename `a.py` to `c.py`, `pylint -E r a` will work perfectly.\n",
  "hints_text": "@iFreilicht thanks for your report.\n#4909 was a duplicate.",
  "created_at": "2022-07-03T04:36:40Z",
  "version": "2.15",
  "FAIL_TO_PASS": "[\"tests/lint/unittest_lint.py::test_identically_named_nested_module\"]",
  "PASS_TO_PASS": "[\"tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level\", \"tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_three\", \"tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_four\", \"tests/lint/unittest_lint.py::test_no_args\", \"tests/lint/unittest_lint.py::test_one_arg[case0]\", \"tests/lint/unittest_lint.py::test_one_arg[case1]\", \"tests/lint/unittest_lint.py::test_one_arg[case2]\", \"tests/lint/unittest_lint.py::test_one_arg[case3]\", \"tests/lint/unittest_lint.py::test_one_arg[case4]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case0]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case1]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case2]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case3]\", \"tests/lint/unittest_lint.py::test_more_args[case0]\", \"tests/lint/unittest_lint.py::test_more_args[case1]\", \"tests/lint/unittest_lint.py::test_more_args[case2]\", \"tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account\", \"tests/lint/unittest_lint.py::test_enable_message\", \"tests/lint/unittest_lint.py::test_enable_message_category\", \"tests/lint/unittest_lint.py::test_message_state_scope\", \"tests/lint/unittest_lint.py::test_enable_message_block\", \"tests/lint/unittest_lint.py::test_enable_by_symbol\", \"tests/lint/unittest_lint.py::test_enable_report\", \"tests/lint/unittest_lint.py::test_report_output_format_aliased\", \"tests/lint/unittest_lint.py::test_set_unsupported_reporter\", \"tests/lint/unittest_lint.py::test_set_option_1\", \"tests/lint/unittest_lint.py::test_set_option_2\", \"tests/lint/unittest_lint.py::test_enable_checkers\", \"tests/lint/unittest_lint.py::test_errors_only\", \"tests/lint/unittest_lint.py::test_disable_similar\", \"tests/lint/unittest_lint.py::test_disable_alot\", \"tests/lint/unittest_lint.py::test_addmessage\", \"tests/lint/unittest_lint.py::test_addmessage_invalid\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line\", \"tests/lint/unittest_lint.py::test_load_plugin_config_file\", \"tests/lint/unittest_lint.py::test_load_plugin_configuration\", \"tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins\", \"tests/lint/unittest_lint.py::test_analyze_explicit_script\", \"tests/lint/unittest_lint.py::test_full_documentation\", \"tests/lint/unittest_lint.py::test_list_msgs_enabled\", \"tests/lint/unittest_lint.py::test_pylint_home\", \"tests/lint/unittest_lint.py::test_pylint_home_from_environ\", \"tests/lint/unittest_lint.py::test_warn_about_old_home\", \"tests/lint/unittest_lint.py::test_pylintrc\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package\", \"tests/lint/unittest_lint.py::test_filename_with__init__\", \"tests/lint/unittest_lint.py::test_by_module_statement_value\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]\", \"tests/lint/unittest_lint.py::test_import_sibling_module_from_namespace\", \"tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir\"]",
  "environment_setup_commit": "e90702074e68e20dc8e5df5013ee3ecf22139c3e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.915690",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}