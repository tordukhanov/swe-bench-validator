{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-23140",
  "base_commit": "54bbf200ff88b7855db4e34153ba728b472b3727",
  "patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -257,6 +257,10 @@ def _update_bbox_to_anchor(self, loc_in_canvas):\n     to set the fontsize alongside other font properties, use the *size*\n     parameter in *title_fontproperties*.\n \n+alignment : {'center', 'left', 'right'}, default: 'center'\n+    The alignment of the legend title and the box of entries. The entries\n+    are aligned as a single block, so that markers always lined up.\n+\n borderpad : float, default: :rc:`legend.borderpad`\n     The fractional whitespace inside the legend border, in font-size units.\n \n@@ -336,6 +340,7 @@ def __init__(\n         frameon=None,         # draw frame\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n+        alignment=\"center\",       # control the alignment within the legend box\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -505,6 +510,9 @@ def val_or_rc(val, rc_name):\n         )\n         self._set_artist_props(self.legendPatch)\n \n+        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n+        self._alignment = alignment\n+\n         # init with null renderer\n         self._init_legend_box(handles, labels, markerfirst)\n \n@@ -804,7 +812,7 @@ def _init_legend_box(self, handles, labels, markerfirst=True):\n         self._legend_title_box = TextArea(\"\")\n         self._legend_box = VPacker(pad=self.borderpad * fontsize,\n                                    sep=self.labelspacing * fontsize,\n-                                   align=\"center\",\n+                                   align=self._alignment,\n                                    children=[self._legend_title_box,\n                                              self._legend_handle_box])\n         self._legend_box.set_figure(self.figure)\n@@ -867,10 +875,41 @@ def get_texts(self):\n         r\"\"\"Return the list of `~.text.Text`\\s in the legend.\"\"\"\n         return silent_list('Text', self.texts)\n \n+    def set_alignment(self, alignment):\n+        \"\"\"\n+        Set the alignment of the legend title and the box of entries.\n+\n+        The entries are aligned as a single block, so that markers always\n+        lined up.\n+\n+        Parameters\n+        ----------\n+        alignment : {'center', 'left', 'right'}.\n+\n+        \"\"\"\n+        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n+        self._alignment = alignment\n+        self._legend_box.align = alignment\n+\n+    def get_alignment(self):\n+        \"\"\"Get the alignment value of the legend box\"\"\"\n+        return self._legend_box.align\n+\n     def set_title(self, title, prop=None):\n         \"\"\"\n-        Set the legend title. Fontproperties can be optionally set\n-        with *prop* parameter.\n+        Set legend title and title style.\n+\n+        Parameters\n+        ----------\n+        title : str\n+            The legend title.\n+\n+        prop : `.font_manager.FontProperties` or `str` or `pathlib.Path`\n+            The font properties of the legend title.\n+            If a `str`, it is interpreted as a fontconfig pattern parsed by\n+            `.FontProperties`.  If a `pathlib.Path`, it is interpreted as the\n+            absolute path to a font file.\n+\n         \"\"\"\n         self._legend_title_box._text.set_text(title)\n         if title:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -607,6 +607,25 @@ def test_legend_title_fontprop_fontsize():\n     assert leg5.get_title().get_fontsize() == 20\n \n \n+@pytest.mark.parametrize('alignment', ('center', 'left', 'right'))\n+def test_legend_alignment(alignment):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = ax.legend(title=\"Aardvark\", alignment=alignment)\n+    assert leg.get_children()[0].align == alignment\n+    assert leg.get_alignment() == alignment\n+\n+\n+@pytest.mark.parametrize('alignment', ('center', 'left', 'right'))\n+def test_legend_set_alignment(alignment):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = ax.legend()\n+    leg.set_alignment(alignment)\n+    assert leg.get_children()[0].align == alignment\n+    assert leg.get_alignment() == alignment\n+\n+\n @pytest.mark.parametrize('color', ('red', 'none', (.5, .5, .5)))\n def test_legend_labelcolor_single(color):\n     # test labelcolor for a single color\n",
  "problem_statement": "Legend Title Left Alignment\nI'm trying to align my legend title on the left of the legend box. I assumed this would work:\r\n\r\n    leg = ax.get_legend()\r\n    title_inst = leg.get_title()\r\n    title_inst.set_horizontalalignment('left')\r\n\r\nHowever only this worked:\r\n\r\n    leg = ax.get_legend()\r\n    leg._legend_box.align = \"left\"\r\n\r\n\r\nSeems like something is not working as expected, especially since I'm accessing something hidden.\r\n\n",
  "hints_text": "`horizontalalignment` is relative to the x, y of the title, which in this case is the center of the legend box.  \r\n\r\nI agree that it would make sense for `legend.set_title` to accept a `loc` kwarg, just like the axes title does.  Looks like a `self._legend_box.align=loc` in `set_title` would do the trick.  Did you want to try a PR?  (Yes I know `loc` is a bit goofy, but its what `title` does now, so for consistency...)\nActually, `legend()` has already a `loc` kwarg, which defines the position of the legend. We would need `title_loc` or preferably `title_align`.\r\n\r\nAlso, `self._legend_box` is a `VPacker`. Setting `align` there affects the title and box containing the handles. This is not necessarily equivalent to aligning the title. For example, if the title is wider than the handles the alignment is effectively visible on the handles. So the mechanism has to be more refined than just setting `self._legend_box.align`.\nOops.   Maybe remove good first issue.  I thought it strange that modifying the legend box got the desired effect. \nThis would actually need more substantial changes in the layouting of the legend. Not sure we have enough layout control mechanisms in place to do this.\nInstead of building up a rather complex API here I would be very much in favour of making the vpackers and hpackers in legend public, such that users may easily manipulate them the way they like. They do that anyways, (in this case probably due to [my bad influence](https://stackoverflow.com/a/44620643/4124317)) but then with a clear concience :wink:.\n@ImportanceOfBeingErnest, Absolutely it was your bad influence! Haha!\r\n\r\nJust wondering: Couldn't the \"x\" of the title be moved to the same x as the handles, or a fixed distance from the left edge of the legend?\r\n\n@Marriaga Unfortunately its not that easy.  The two objects in the VPacker don't really know anything about each other's widths the way its written now, so they can either be centre aligned or left/right aligned.  Both have issues though depending on the relative size of the legend title and the legend entries.  \r\n\r\nI'm -0.5 on making the packers public.  That API is pretty mysterious, and you might as well just tell people to use private methods if you tell people to directly manipulate these objects.  Making them public makes it impossible for us to change this code in the future.  \r\n\r\nI guess I'm actually not really sure that just changing the align of `_legend_box` is a problem.  My guess is that someone who wants the title left aligned would be OK w/ the whole legend being left-aligned, in which case thsi goes back to being a one-line fix in legend (plus documentation and tests!)\r\n\r\n![legends](https://user-images.githubusercontent.com/1562854/46436664-42dc3f00-c70e-11e8-9634-743a5eef1511.png)\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, axs = plt.subplots(1, 2, figsize=(5,3))\r\n\r\nfor i in range(2):\r\n    ax = axs[i]\r\n    ax.plot(range(10), label='Boo')\r\n    ax.plot(range(10), label='Who')\r\n    leg = ax.legend(loc='center left')\r\n    if i==1:\r\n        leg.set_title('Long Legend Title')\r\n    else:\r\n        leg.set_title('Short')\r\n\r\n    leg._legend_box.align='left'\r\n\r\nplt.show()\r\n```\r\n\r\n\r\n\r\n\nI'm also -0.5 on making the Packers public. The API seems not mature enough to be released. A possible workaround to support title positioning could be to support a list of values for VPacker(align=...).\r\n\r\nSo that we could add `legend(title_align=...)` and do\r\n~~~\r\n        self._legend_box = VPacker(...,\r\n                                   align=[title_align, \"center\"],\r\n                                   children=[self._legend_title_box,\r\n                                             self._legend_handle_box])\r\n~~~\r\n\n#### Side remark:\r\nActually, the current choice for `align=center` (top row) is not optimal.\r\n\r\n![grafik](https://user-images.githubusercontent.com/2836374/46443688-ebba8680-c76e-11e8-9047-b4520e191942.png)\r\n\r\nWhile it looks good with short titles (top left), long titles result in awkwardly centered entires (top right). OTOH, with `align=left` both versions would look ok (bottom).\r\n\r\n***Would we be willing to change that to `align=left`?***\r\n(maybe with the above extension to separately align the title i.e. `align=[title_align, \"left\"]`)\r\n\r\n~~~\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, axs = plt.subplots(2, 2)\r\naxs[0, 0].plot([0, 3, 2], label='long label spam')\r\naxs[0, 0].plot([2, 3], label='b')\r\naxs[0, 0].legend(title='title', loc=4)\r\naxs[0, 1].plot([0, 3, 2], label='a')\r\naxs[0, 1].plot([2, 3], label='b')\r\naxs[0, 1].legend(title='long title centered', loc=4)\r\naxs[1, 0].plot([0, 3, 2], label='long label smap')\r\naxs[1, 0].plot([2, 3], label='b')\r\naxs[1, 0].legend(title='title', loc=4)._legend_box.align='left'\r\naxs[1, 1].plot([0, 3, 2], label='a')\r\naxs[1, 1].plot([2, 3], label='b')\r\naxs[1, 1].legend(title='long title left spam', loc=4)._legend_box.align='left'\r\n~~~\na) I think it'd be fine to add a kwarg, but maybe just add it to `legend.set_title` to keep legend's already prodigious kwarg list under control?  People who want to fiddle w/ the position can do the extra legwork...\r\nb) *I'd* be willing to change the default to `align='left'` but I have no idea how much that would change other people's code.  It wouldn't *break* anything though, so probably alright?  \nBecause someone [just asked on gitter](https://gitter.im/matplotlib/matplotlib?at=5bb7e7461e23486b9394a585) about the legend text alignment, I'm mentionning it here, as it seems related and equally not easily adjustable. A workaround could be\r\n\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\nax.plot([1,2,3], label=\"AB\")\r\nax.plot([3,2,4], label=\"CDEFGHI\")\r\nleg = ax.legend(title='Title', loc=4)\r\n\r\nhp = leg._legend_box.get_children()[1]\r\nfor vp in hp.get_children():\r\n    for row in vp.get_children():\r\n        row.set_width(100)  # need to adapt this manually\r\n        row.mode= \"expand\"\r\n        row.align=\"right\"\r\n\r\nplt.show()\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/23121882/46566498-d6388e80-c91f-11e8-8b2b-d94144099461.png)\r\n\r\nSo this could be taken into account for whatever action is taken here for the title.\nWhatever you implement, you should also consider what it looks like if someone passes 'right'.\r\n\r\nHere's what happens when varying _legend_box.align:\r\n\r\n![printscreen](https://user-images.githubusercontent.com/28363225/49251296-02c7ce80-f3d6-11e8-865a-1e7b3eb37c8b.png)\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, axs = plt.subplots(3, 2)\r\naxs[0, 0].plot([0, 3, 2], label='long label spam')\r\naxs[0, 0].plot([2, 3], label='b')\r\naxs[0, 0].legend(title='title', loc=4)\r\naxs[0, 1].plot([0, 3, 2], label='a')\r\naxs[0, 1].plot([2, 3], label='b')\r\naxs[0, 1].legend(title='long title centered', loc=4)\r\naxs[1, 0].plot([0, 3, 2], label='long label smap')\r\naxs[1, 0].plot([2, 3], label='b')\r\naxs[1, 0].legend(title='title', loc=4)._legend_box.align='left'\r\naxs[1, 1].plot([0, 3, 2], label='a')\r\naxs[1, 1].plot([2, 3], label='b')\r\naxs[1, 1].legend(title='long title left spam', loc=4)._legend_box.align='left'\r\naxs[2, 0].plot([0, 3, 2], label='long label smap')\r\naxs[2, 0].plot([2, 3], label='b')\r\naxs[2, 0].legend(title='title', loc=4)._legend_box.align='right'\r\naxs[2, 1].plot([0, 3, 2], label='a')\r\naxs[2, 1].plot([2, 3], label='b')\r\naxs[2, 1].legend(title='long title right spam', loc=4)._legend_box.align='right'\r\n```\r\n\r\nIf somebody really wants to get into this, it might be sweet if one was able to align the whole legend right, with the labels on the right. That sometimes looks better when the legend is at the right of a plot.\nHi, would be great to have this feature, I just stumbled over this issue here, but the title alignment has bothered me for years now. I can put a PR together to move this forward, if no one else is working on it.\n@HDembinski that'd be great!",
  "created_at": "2022-05-26T05:04:24Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_legend_ordereddict\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[png]\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore\", \"lib/matplotlib/tests/test_legend.py::test_labels_first[png]\", \"lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[png]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_rc[png]\", \"lib/matplotlib/tests/test_legend.py::test_rc[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[png]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_remove\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs\", \"lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]\", \"lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend\", \"lib/matplotlib/tests/test_legend.py::test_nanscatter\", \"lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]\", \"lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes\", \"lib/matplotlib/tests/test_legend.py::test_handler_numpoints\", \"lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning\", \"lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend\", \"lib/matplotlib/tests/test_legend.py::test_shadow_framealpha\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_empty\", \"lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent\", \"lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_get_set_draggable\", \"lib/matplotlib/tests/test_legend.py::test_alpha_handles\", \"lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc\", \"lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception\", \"lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_text_axes\", \"lib/matplotlib/tests/test_legend.py::test_handlerline2d\", \"lib/matplotlib/tests/test_legend.py::test_subfigure_legend\", \"lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color\", \"lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.799898",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}