{
  "repo": "pallets/flask",
  "instance_id": "pallets__flask-4160",
  "base_commit": "06cf349bb8b69d9946c3a6a64d32eb552cc7c28b",
  "patch": "diff --git a/src/flask/json/__init__.py b/src/flask/json/__init__.py\n--- a/src/flask/json/__init__.py\n+++ b/src/flask/json/__init__.py\n@@ -1,3 +1,4 @@\n+import decimal\n import io\n import json as _json\n import typing as t\n@@ -47,7 +48,7 @@ def default(self, o: t.Any) -> t.Any:\n         \"\"\"\n         if isinstance(o, date):\n             return http_date(o)\n-        if isinstance(o, uuid.UUID):\n+        if isinstance(o, (decimal.Decimal, uuid.UUID)):\n             return str(o)\n         if dataclasses and dataclasses.is_dataclass(o):\n             return dataclasses.asdict(o)\n@@ -117,6 +118,9 @@ def dumps(obj: t.Any, app: t.Optional[\"Flask\"] = None, **kwargs: t.Any) -> str:\n         or defaults.\n     :param kwargs: Extra arguments passed to :func:`json.dumps`.\n \n+    .. versionchanged:: 2.0.2\n+        :class:`decimal.Decimal` is supported by converting to a string.\n+\n     .. versionchanged:: 2.0\n         ``encoding`` is deprecated and will be removed in Flask 2.1.\n \n@@ -324,6 +328,9 @@ def get_current_user():\n     debug mode or if :data:`JSONIFY_PRETTYPRINT_REGULAR` is ``True``,\n     the output will be formatted to be easier to read.\n \n+    .. versionchanged:: 2.0.2\n+        :class:`decimal.Decimal` is supported by converting to a string.\n+\n     .. versionchanged:: 0.11\n         Added support for serializing top-level arrays. This introduces\n         a security risk in ancient browsers. See :ref:`security-json`.\n",
  "test_patch": "diff --git a/tests/test_json.py b/tests/test_json.py\n--- a/tests/test_json.py\n+++ b/tests/test_json.py\n@@ -1,4 +1,5 @@\n import datetime\n+import decimal\n import io\n import uuid\n \n@@ -187,6 +188,11 @@ def test_jsonify_uuid_types(app, client):\n     assert rv_uuid == test_uuid\n \n \n+def test_json_decimal():\n+    rv = flask.json.dumps(decimal.Decimal(\"0.003\"))\n+    assert rv == '\"0.003\"'\n+\n+\n def test_json_attr(app, client):\n     @app.route(\"/add\", methods=[\"POST\"])\n     def add():\n",
  "problem_statement": "handle Decimal in json encoder\nThe `simplejson` removal (#3555) decreased the flask encoding capabilities as the built-in `json` doesn't cover cases like `Decimal` types. The solution seems to be: overwrite the flask app encoder with `JSONEnconder` from `simplejson`, but this incorporates a problem for users that relies on both `Decimal` and `datetimes` as `simplejon` doesn't handle `datetimes`, while flask encoder does. The solution I found is to build a custom encoder that tests if the value is `Decimal` and gives it to `simplejson`, otherwise, handles it with the default flask app encoder. My suggestion is to incorporate a simple test in the flask encoder to add `Decimal` coverage, that would remove any residual dependency on `simplejson`. The str(decimal) was taken from: [simplejson/encoder.py#L511](https://github.com/simplejson/simplejson/blob/8bef979ad8272cbc2903970f4b9992f603d50973/simplejson/encoder.py#L511)  \r\n\r\n```python\r\nfrom flask import json as fjson\r\nfrom flask.json import JSONEncoder\r\nimport simplejson as sjson\r\nimport decimal\r\nfrom datetime import datetime\r\n\r\nrdatetime = datetime.strptime('1/1/2008 1:30 PM', '%m/%d/%Y %I:%M %p')\r\nrdecimal = decimal.Decimal(10)\r\n\r\nobj = {'datetime':rdatetime,'decimal':rdecimal}\r\n\r\nfjson.dumps(obj) #Doesn't work because of decimal\r\nsjson.dumps(obj) #Doesn't work because of datetimes\r\n```  \r\nThe custom encoder:  \r\n```python\r\nclass CustomJSONEncoder(JSONEncoder):\r\n    '''\r\n    Add Decimal coverage\r\n    '''\r\n    def default(self, o):\r\n        if isinstance(o, decimal.Decimal):\r\n            return str(o)\r\n        return super().default(o)\r\n\r\napp.json_encoder = CustomJSONEncoder\r\n```  \r\n\r\nThe expected behavior is to work with both `Decimal` and `datetimes`  as it used to work on Flask version 1.1.2\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.8.10\r\n- Flask version: 2.0.1 and 1.1.2\r\n- Simplejson(Optional) version: 3.17.2\r\n\n",
  "hints_text": "hey, I'd like to work on this issue. ",
  "created_at": "2021-06-19T12:01:43Z",
  "version": "2.0",
  "FAIL_TO_PASS": "[\"tests/test_json.py::test_json_decimal\"]",
  "PASS_TO_PASS": "[\"tests/test_json.py::test_json_as_unicode[True-\\\"\\\\\\\\u2603\\\"]\", \"tests/test_json.py::test_json_as_unicode[False-\\\"\\\\u2603\\\"]\", \"tests/test_json.py::test_json_dump_to_file\", \"tests/test_json.py::test_jsonify_aware_datetimes[tz0]\", \"tests/test_json.py::test_jsonify_aware_datetimes[tz1]\", \"tests/test_json.py::test_jsonify_aware_datetimes[tz2]\", \"tests/test_json.py::test_html_method\"]",
  "environment_setup_commit": "4346498c85848c53843b810537b83a8f6124c9d3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.842148",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}