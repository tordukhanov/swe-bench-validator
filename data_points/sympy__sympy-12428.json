{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12428",
  "base_commit": "2340de24255dce927b66840f6271431269ba5b93",
  "patch": "diff --git a/sympy/matrices/expressions/diagonal.py b/sympy/matrices/expressions/diagonal.py\n--- a/sympy/matrices/expressions/diagonal.py\n+++ b/sympy/matrices/expressions/diagonal.py\n@@ -1,14 +1,19 @@\n from __future__ import print_function, division\n \n from sympy.matrices.expressions import MatrixExpr\n-from sympy.core import S\n-\n+from sympy.core import S, Eq\n+from sympy.functions.special.tensor_functions import KroneckerDelta\n class DiagonalMatrix(MatrixExpr):\n     arg = property(lambda self: self.args[0])\n     shape = property(lambda self: (self.arg.shape[0], self.arg.shape[0]))\n \n     def _entry(self, i, j):\n-        return S.Zero if i != j else self.arg[i, 0]\n+        eq = Eq(i, j)\n+        if eq is S.false:\n+            return S.Zero\n+        elif eq is S.true:\n+            return self.arg[i, i]\n+        return self.arg[i, j]*KroneckerDelta(i, j)\n \n class DiagonalOf(MatrixExpr):\n     arg = property(lambda self: self.args[0])\n",
  "test_patch": "diff --git a/sympy/matrices/expressions/tests/test_diagonal.py b/sympy/matrices/expressions/tests/test_diagonal.py\n--- a/sympy/matrices/expressions/tests/test_diagonal.py\n+++ b/sympy/matrices/expressions/tests/test_diagonal.py\n@@ -3,15 +3,22 @@\n from sympy import Symbol, ask, Q\n \n n = Symbol('n')\n-x = MatrixSymbol('x', n, 1)\n X = MatrixSymbol('X', n, n)\n-D = DiagonalMatrix(x)\n+D = DiagonalMatrix(X)\n d = DiagonalOf(X)\n \n def test_DiagonalMatrix():\n     assert D.shape == (n, n)\n     assert D[1, 2] == 0\n-    assert D[1, 1] == x[1, 0]\n+    assert D[1, 1] == X[1, 1]\n+    i = Symbol('i')\n+    j = Symbol('j')\n+    x = MatrixSymbol('x', 3, 3)\n+    ij = DiagonalMatrix(x)[i, j]\n+    assert ij != 0\n+    assert ij.subs({i:0, j:0}) == x[0, 0]\n+    assert ij.subs({i:0, j:1}) == 0\n+    assert ij.subs({i:1, j:1}) == x[1, 1]\n \n def test_DiagonalMatrix_Assumptions():\n     assert ask(Q.diagonal(D))\n",
  "problem_statement": "DiagonalMatrix[i, j] -> 0\nSimilar to #12300, DiagonalMatrix references to position (i,j) give 0:\r\n\r\n```\r\n>>> d = DiagonalMatrix(MatrixSymbol('x', 3, 3))\r\n>>> d[i,j]\r\n0\r\n```\n",
  "hints_text": "ping @bhavishyagopesh at #12316 \n@smichr I found something really strange(only if I'm not mistaken)\r\n`from sympy import *`\r\n`from sympy import Q as Query`\r\n`x=Matrix([[1,0,0],[0,2,0],[0,0,3]])`\r\n`d = DiagonalMatrix(x)`\r\n`d[1,1]`\r\n\r\nIt returns zero but should return 2, I think its becoz \"/matrices/expressions/diagonal.py\" line : 11,(I used trace), it returns `self.arg[i, 0]` when `i==j`why?",
  "created_at": "2017-03-26T21:39:14Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_DiagonalMatrix\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.077260",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}