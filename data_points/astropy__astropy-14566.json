{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-14566",
  "base_commit": "fc2e0754d9020bb9998bd0bb6ecb459d7f38bd44",
  "patch": "diff --git a/astropy/time/formats.py b/astropy/time/formats.py\n--- a/astropy/time/formats.py\n+++ b/astropy/time/formats.py\n@@ -121,6 +121,8 @@ class TimeFormat:\n     ----------\n     val1 : numpy ndarray, list, number, str, or bytes\n         Values to initialize the time or times.  Bytes are decoded as ascii.\n+        Quantities with time units are allowed for formats where the\n+        interpretation is unambiguous.\n     val2 : numpy ndarray, list, or number; optional\n         Value(s) to initialize the time or times.  Only used for numerical\n         input, to help preserve precision.\n@@ -545,6 +547,7 @@ def to_value(self, jd1=None, jd2=None, parent=None, out_subfmt=None):\n class TimeJD(TimeNumeric):\n     \"\"\"\n     Julian Date time format.\n+\n     This represents the number of days since the beginning of\n     the Julian Period.\n     For example, 2451544.5 in JD is midnight on January 1, 2000.\n@@ -560,6 +563,7 @@ def set_jds(self, val1, val2):\n class TimeMJD(TimeNumeric):\n     \"\"\"\n     Modified Julian Date time format.\n+\n     This represents the number of days since midnight on November 17, 1858.\n     For example, 51544.0 in MJD is midnight on January 1, 2000.\n     \"\"\"\n@@ -580,15 +584,36 @@ def to_value(self, **kwargs):\n     value = property(to_value)\n \n \n+def _check_val_type_not_quantity(format_name, val1, val2):\n+    # If val2 is a Quantity, the super() call that follows this check\n+    # will raise a TypeError.\n+    if hasattr(val1, \"to\") and getattr(val1, \"unit\", None) is not None:\n+        raise ValueError(\n+            f\"cannot use Quantities for {format_name!r} format, as the unit of year \"\n+            \"is defined as 365.25 days, while the length of year is variable \"\n+            \"in this format. Use float instead.\"\n+        )\n+\n+\n class TimeDecimalYear(TimeNumeric):\n     \"\"\"\n     Time as a decimal year, with integer values corresponding to midnight\n-    of the first day of each year.  For example 2000.5 corresponds to the\n-    ISO time '2000-07-02 00:00:00'.\n+    of the first day of each year.\n+\n+    For example 2000.5 corresponds to the ISO time '2000-07-02 00:00:00'.\n+\n+    Since for this format the length of the year varies between 365 and\n+    366 days, it is not possible to use Quantity input, in which a year\n+    is always 365.25 days.\n     \"\"\"\n \n     name = \"decimalyear\"\n \n+    def _check_val_type(self, val1, val2):\n+        _check_val_type_not_quantity(self.name, val1, val2)\n+        # if val2 is a Quantity, super() will raise a TypeError.\n+        return super()._check_val_type(val1, val2)\n+\n     def set_jds(self, val1, val2):\n         self._check_scale(self._scale)  # Validate scale.\n \n@@ -647,7 +672,7 @@ def to_value(self, **kwargs):\n class TimeFromEpoch(TimeNumeric):\n     \"\"\"\n     Base class for times that represent the interval from a particular\n-    epoch as a floating point multiple of a unit time interval (e.g. seconds\n+    epoch as a numerical multiple of a unit time interval (e.g. seconds\n     or days).\n     \"\"\"\n \n@@ -1952,7 +1977,7 @@ def value(self):\n \n class TimeEpochDate(TimeNumeric):\n     \"\"\"\n-    Base class for support floating point Besselian and Julian epoch dates.\n+    Base class for support of Besselian and Julian epoch dates.\n     \"\"\"\n \n     _default_scale = \"tt\"  # As of astropy 3.2, this is no longer 'utc'.\n@@ -1972,25 +1997,25 @@ def to_value(self, **kwargs):\n \n \n class TimeBesselianEpoch(TimeEpochDate):\n-    \"\"\"Besselian Epoch year as floating point value(s) like 1950.0.\"\"\"\n+    \"\"\"Besselian Epoch year as value(s) like 1950.0.\n+\n+    Since for this format the length of the year varies, input needs to\n+    be floating point; it is not possible to use Quantity input, for\n+    which a year always equals 365.25 days.\n+    \"\"\"\n \n     name = \"byear\"\n     epoch_to_jd = \"epb2jd\"\n     jd_to_epoch = \"epb\"\n \n     def _check_val_type(self, val1, val2):\n-        \"\"\"Input value validation, typically overridden by derived classes.\"\"\"\n-        if hasattr(val1, \"to\") and hasattr(val1, \"unit\") and val1.unit is not None:\n-            raise ValueError(\n-                \"Cannot use Quantities for 'byear' format, as the interpretation \"\n-                \"would be ambiguous. Use float with Besselian year instead.\"\n-            )\n+        _check_val_type_not_quantity(self.name, val1, val2)\n         # FIXME: is val2 really okay here?\n         return super()._check_val_type(val1, val2)\n \n \n class TimeJulianEpoch(TimeEpochDate):\n-    \"\"\"Julian Epoch year as floating point value(s) like 2000.0.\"\"\"\n+    \"\"\"Julian Epoch year as value(s) like 2000.0.\"\"\"\n \n     name = \"jyear\"\n     unit = erfa.DJY  # 365.25, the Julian year, for conversion to quantities\n",
  "test_patch": "diff --git a/astropy/time/tests/test_basic.py b/astropy/time/tests/test_basic.py\n--- a/astropy/time/tests/test_basic.py\n+++ b/astropy/time/tests/test_basic.py\n@@ -1504,6 +1504,11 @@ def test_decimalyear():\n     assert np.all(t.jd == [jd0 + 0.5 * d_jd, jd0 + 0.75 * d_jd])\n \n \n+def test_decimalyear_no_quantity():\n+    with pytest.raises(ValueError, match=\"cannot use Quantities\"):\n+        Time(2005.5 * u.yr, format=\"decimalyear\")\n+\n+\n def test_fits_year0():\n     t = Time(1721425.5, format=\"jd\", scale=\"tai\")\n     assert t.fits == \"0001-01-01T00:00:00.000\"\n",
  "problem_statement": "Problem with \"decimalyear\" applied to MaskedColumn type\n### Description\r\n\r\nThe \"decimalyear\" type produces odd errors when applied to the MaskedColumn type.\r\nThe \"jyear\" type does not, and appears to behave properly.\r\n\r\n### Expected behavior\r\n\r\nI would expect \"decimalyear\" and \"jyear\" to work similarly, although the difference between them is not clear from the documentation.\r\n\r\n\r\n### How to Reproduce\r\n```python\r\n# Begin decimalyear_test.py\r\n# A simple illustration of possible bug in \"decimalyear\"\r\n\r\nimport astropy\r\nfrom astropy.coordinates import SkyCoord\r\nfrom astropy.units import Quantity\r\nfrom astroquery.gaia import Gaia\r\nfrom astropy.time import Time\r\n\r\ncoord = SkyCoord(ra=0.0, dec=0.0, unit=astropy.units.deg)\r\nwidth = Quantity(0.05, unit=astropy.units.deg)\r\nheight = Quantity(0.05, unit=astropy.units.deg)\r\n\r\nGaia.MAIN_GAIA_TABLE = \"gaiadr3.gaia_source\" \r\nsearchout  = Gaia.query_object_async(coordinate=coord, width=width, height=height)\t\r\n\r\nepochs=searchout['ref_epoch']\r\nprint(epochs,\"\\n\")\r\n\r\nprint(\"epochs is instance of MaskedColumn:\", isinstance(epochs, astropy.table.column.MaskedColumn),\"\\n\")\r\n\r\nprint(\"epochs in jyear: \",Time(epochs,format='jyear'),\"\\n\")\r\nprint(\"epochs in decimalyear: \",Time(epochs,format='decimalyear'))\r\n\r\nprint(\"\\n\")\r\nepoch2=Time(2016.0,format='jyear')\r\nprint(\"epoch2 in jyear=\", epoch2)\r\n\r\nepoch3=Time(2016.0,format='decimalyear')\r\nprint(\"epoch3 in decimalyear=\", epoch3)\r\n\r\n# End decimalyear_test.py\r\n```\r\n### Versions\r\n\r\nLinux-5.19.0-35-generic-x86_64-with-glibc2.35\r\nPython 3.9.13 (main, Aug 25 2022, 23:26:10) \r\n[GCC 11.2.0]\r\nastropy 5.1\n",
  "hints_text": "Welcome to Astropy ðŸ‘‹ and thank you for your first issue!\n\nA project member will respond to you as soon as possible; in the meantime, please double-check the [guidelines for submitting issues](https://github.com/astropy/astropy/blob/main/CONTRIBUTING.md#reporting-issues) and make sure you've provided the requested details.\n\nGitHub issues in the Astropy repository are used to track bug reports and feature requests; If your issue poses a question about how to use Astropy, please instead raise your question in the [Astropy Discourse user forum](https://community.openastronomy.org/c/astropy/8) and close this issue.\n\nIf you feel that this issue has not been responded to in a timely manner, please send a message directly to the [development mailing list](http://groups.google.com/group/astropy-dev).  If the issue is urgent or sensitive in nature (e.g., a security vulnerability) please send an e-mail directly to the private e-mail feedback@astropy.org.\nHello! Can you please try with astropy 5.2.1 and also actually post what you see in the printouts, just so when someone tries to reproduce this, they can compare? Thank you.\nIt is still a problem in astropy5.3.dev756+gc0a24c1dc\r\nHere is the printout :\r\n```\r\n# print(epochs,\"\\n\")\r\nref_epoch\r\nyr\r\n---------\r\n   2016.0\r\n   2016.0\r\n   2016.0\r\n   2016.0\r\n   2016.0\r\n   2016.0 \r\n\r\n# print(\"epochs is instance of MaskedColumn:\", isinstance(epochs, astropy.table.column.MaskedColumn),\"\\n\")\r\nepochs is instance of MaskedColumn: True \r\n\r\n# print(\"epochs in jyear: \",Time(epochs,format='jyear'),\"\\n\")\r\nepochs in jyear:  [2016. 2016. 2016. 2016. 2016. 2016.] \r\n\r\n# print(\"epochs in decimalyear: \",Time(epochs,format='decimalyear'))\r\nerfa/core.py:154: ErfaWarning: ERFA function \"dtf2d\" yielded 6 of \"dubious year (Note 6)\"\r\n  warnings.warn('ERFA function \"{}\" yielded {}'.format(func_name, wmsg),\r\nerfa/core.py:154: ErfaWarning: ERFA function \"utctai\" yielded 6 of \"dubious year (Note 3)\"\r\n  warnings.warn('ERFA function \"{}\" yielded {}'.format(func_name, wmsg),\r\nerfa/core.py:154: ErfaWarning: ERFA function \"taiutc\" yielded 6 of \"dubious year (Note 4)\"\r\n  warnings.warn('ERFA function \"{}\" yielded {}'.format(func_name, wmsg),\r\nerfa/core.py:154: ErfaWarning: ERFA function \"d2dtf\" yielded 6 of \"dubious year (Note 5)\"\r\n  warnings.warn('ERFA function \"{}\" yielded {}'.format(func_name, wmsg),\r\nepochs in decimalyear:  [736344. 736344. 736344. 736344. 736344. 736344.]\r\n\r\n# print(\"epoch2 in jyear=\", epoch2)\r\nepoch2 in jyear= 2016.0\r\n# print(\"epoch3 in decimalyear=\", epoch3)\r\nepoch3 in decimalyear= 2016.0\r\n```\r\n \nIf you choose a particular element of the epochs MaskedColumn, it's OK, for example adding the following to the end of the program, it's OK, the result is \"2016.0\":\r\n\r\n`print(Time(epochs[5],format='decimalyear')\r\n`\n@fsc137-cfa - Thanks for the report! And the example is helpful, but I don't think it has anything to do with `MaskedColumn`, but rather with passing in numbers with a unit (the reason it works for a single element of a `MaskedColumn` is that then one has lost the unit). Indeed, a minimal example is:\r\n```\r\nfrom astropy.time import Time\r\nimport astropy.units as u\r\n\r\nTime(2016.*u.yr, format='decimalyear')\r\n/usr/lib/python3/dist-packages/erfa/core.py:154: ErfaWarning: ERFA function \"dtf2d\" yielded 1 of \"dubious year (Note 6)\"\r\n  warnings.warn('ERFA function \"{}\" yielded {}'.format(func_name, wmsg),\r\n/usr/lib/python3/dist-packages/erfa/core.py:154: ErfaWarning: ERFA function \"utctai\" yielded 1 of \"dubious year (Note 3)\"\r\n  warnings.warn('ERFA function \"{}\" yielded {}'.format(func_name, wmsg),\r\n/usr/lib/python3/dist-packages/erfa/core.py:154: ErfaWarning: ERFA function \"taiutc\" yielded 1 of \"dubious year (Note 4)\"\r\n  warnings.warn('ERFA function \"{}\" yielded {}'.format(func_name, wmsg),\r\n/usr/lib/python3/dist-packages/erfa/core.py:154: ErfaWarning: ERFA function \"d2dtf\" yielded 1 of \"dubious year (Note 5)\"\r\n  warnings.warn('ERFA function \"{}\" yielded {}'.format(func_name, wmsg),\r\n\r\n<Time object: scale='utc' format='decimalyear' value=736344.0>\r\n```\r\nThe bug here is that the default \"unit\" for time input is days, so the number in years first gets converted to days and then is interpreted as years: `2016*365.25=736344`.\r\n\r\nThe standard unit conversion also indicates a problem with the in principle simple solution of just setting `TimeDecimalYear.unit = u.yr`. With that, any conversion will assume *julian years* of `365.25` days, which would be OK for `jyear` but is inconsistent with `TimeDecimalYear`, as for that format the fraction can get multiplied by either 365 or 366 to infer month, day, and time.\r\n\r\nOverall, my tendency would be to just forbid the use of anything with a unit for `decimalyear` just like we do for `bjear` (or *maybe* allow `u.yr` but no other time unit, as they are ambiguous).\r\n\r\nLet me ping @taldcroft to see what he thinks, since I think he was more involved than I was in the implementation of `TimeDecimalYear`.\r\n\r\np.s. To further clarify the difference between `jyear` and `decimalyear`, `jyear` strictly takes years as lasting `365.25` days, with a zero point at J2000:\r\n```\r\nIn [28]: Time([2000, 2001], format='jyear').isot\r\nOut[28]: array(['2000-01-01T12:00:00.000', '2000-12-31T18:00:00.000'], dtype='<U23')\r\n\r\nIn [29]: Time([2000, 2001], format='decimalyear').isot\r\nOut[29]: array(['2000-01-01T00:00:00.000', '2001-01-01T00:00:00.000'], dtype='<U23')\r\n```\np.s. For the GAIA query that likely led you to raise this issue, please be sure to check what `ref_epoch` actually means. Most likely `jyear` is the correct format to use!\nMy program (copied in part from elsewhere) originally used jyear, but I was\ntrying to figure out from the documentation what is the difference between\ndecimalyear and jyear, so I tried the program both ways, leading to trying\nout decimalyear and this bug report.\n\nI still don't know the difference between jyear and decimalyear.\n\"jyear\" suggests to me something like the JDN divided by 365.2425... , not\njust a decimal expression of a year, although clearly it acts that way.\nI would think that \"decimalyear\" would be what you would want when just\nexpressing a time in years as a real (decimal) number.\nThat's how epochs are usually expressed, since a tenth or a hundredth of a\nyear is all the accuracy one needs to calculate precession, proper motion,\netc.\n\nOn Fri, Mar 17, 2023 at 7:11â€¯PM Marten van Kerkwijk <\n***@***.***> wrote:\n\n> p.s. For the GAIA query that likely led you to raise this issue, please be\n> sure to check what ref_epoch actually means. Most likely jyear is the\n> correct format to use!\n>\n> â€”\n> Reply to this email directly, view it on GitHub\n> <https://github.com/astropy/astropy/issues/14541#issuecomment-1474499729>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ATGPZCTLLWL7AGV55B33E7DW4TVRTANCNFSM6AAAAAAV6ALBTQ>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n\n\n-- \n*Antony A. Stark*\n*Senior Astronomer*\n\n*Center for Astrophysics | Harvard & Smithsonian*\n\n*60 Garden Street | MS 42 | Cambridge, MA 02138*\n\nepochs in astronomy are these days all in `J2000` (i.e., `format='jyear'`), which is just the number of Julian years (of 365.25 days) around 2000; I'm near-certain this is true for GAIA too. (Before, it was `B1950` or `byear`). The `decimalyear` format was added because it is used in some places, but as far as I know not by anything serious for astrometry. as the interpretation of the fraction depends on whether a year is a leap year or not.\np.s. `365.2425` is what one would get if a Gregorian year were used! Caesar didn't bother with the details for his [Julian calendar](https://en.wikipedia.org/wiki/Julian_calendar) too much...\nSo looks like there is no bug and this issue can be closed? Thanks!\nThere is a bug, in that the units are used if a `Quantity` is passed into `decimalyear` -- I think the solution is to explicitly forbid having units for this class, since the scale of the unit `year` is different than that assumed here (like for `byear`).\nI'd like to see the documentation define both \"decimalyear\" and \"jyear\",\nand the differences between them.\nI am fully aware of how time and dates are used in astronomy, yet I am\nconfused.\n\nOn Mon, Mar 20, 2023 at 8:54â€¯AM Marten van Kerkwijk <\n***@***.***> wrote:\n\n> There is a bug, in that the units are used if a Quantity is passed into\n> decimalyear -- I think the solution is to explicitly forbid having units\n> for this class, since the scale of the unit year is different than that\n> assumed here (like for byear).\n>\n> â€”\n> Reply to this email directly, view it on GitHub\n> <https://github.com/astropy/astropy/issues/14541#issuecomment-1476181698>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ATGPZCXHSDCHZTS34DTI3P3W5BHOTANCNFSM6AAAAAAV6ALBTQ>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n\n\n-- \n*Antony A. Stark*\n*Senior Astronomer*\n\n*Center for Astrophysics | Harvard & Smithsonian*\n\n*60 Garden Street | MS 42 | Cambridge, MA 02138*\n\nAgreed that better documentation would help, as currently, the docs are indeed rather sparse: https://docs.astropy.org/en/latest/time/index.html#time-format just gives some formats, which I guess could at least have the same time instance as an example (maybe as an extra column). And then there could be more detail in the actual class docstrings\r\nhttps://docs.astropy.org/en/latest/api/astropy.time.TimeJulianEpoch.html#astropy.time.TimeJulianEpoch\r\nhttps://docs.astropy.org/en/latest/api/astropy.time.TimeDecimalYear.html#astropy.time.TimeDecimalYear\r\n\r\nWould you be interested in making a PR?\r\n\r\nOf course, this is separate from the bug you uncovered... So, maybe the first thing would be to raise a new issue, just focussed on documentation.",
  "created_at": "2023-03-22T23:04:16Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"astropy/time/tests/test_basic.py::test_decimalyear_no_quantity\"]",
  "PASS_TO_PASS": "[\"astropy/time/tests/test_basic.py::TestBasic::test_different_dimensions\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jd]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[mjd]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[decimalyear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[unix]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[unix_tai]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[cxcsec]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[gps]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[plot_date]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[stardate]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[datetime]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[ymdhms]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[iso]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[isot]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[yday]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[datetime64]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[fits]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[byear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jyear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[byear_str]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jyear_str]\", \"astropy/time/tests/test_basic.py::TestBasic::test_copy_time[2455197.5]\", \"astropy/time/tests/test_basic.py::TestBasic::test_copy_time[value1]\", \"astropy/time/tests/test_basic.py::TestBasic::test_getitem\", \"astropy/time/tests/test_basic.py::TestBasic::test_properties\", \"astropy/time/tests/test_basic.py::TestBasic::test_precision\", \"astropy/time/tests/test_basic.py::TestBasic::test_precision_input\", \"astropy/time/tests/test_basic.py::TestBasic::test_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_transforms_no_location\", \"astropy/time/tests/test_basic.py::TestBasic::test_location\", \"astropy/time/tests/test_basic.py::TestBasic::test_location_array\", \"astropy/time/tests/test_basic.py::TestBasic::test_all_scale_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_creating_all_formats\", \"astropy/time/tests/test_basic.py::TestBasic::test_local_format_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_datetime\", \"astropy/time/tests/test_basic.py::TestBasic::test_datetime64\", \"astropy/time/tests/test_basic.py::TestBasic::test_epoch_transform\", \"astropy/time/tests/test_basic.py::TestBasic::test_input_validation\", \"astropy/time/tests/test_basic.py::TestBasic::test_utc_leap_sec\", \"astropy/time/tests/test_basic.py::TestBasic::test_init_from_time_objects\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d0]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d1]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d2]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d3]\", \"astropy/time/tests/test_basic.py::TestVal2::test_val2\", \"astropy/time/tests/test_basic.py::TestVal2::test_val_broadcasts_against_val2\", \"astropy/time/tests/test_basic.py::TestVal2::test_broadcast_not_writable\", \"astropy/time/tests/test_basic.py::TestVal2::test_broadcast_one_not_writable\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_input_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_input_subformat_fail\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_bad_input_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_output_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_fits_format\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_yday_format\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_scale_input\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_fits_scale\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_scale_default\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_epoch_times\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_plot_date\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_example\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_longdouble\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_longdouble_one_val\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[mjd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[unix]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[cxcsec]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_input\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_output[str]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_output[bytes]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[jd-2451544.5333981-2451544.5-0.0333981]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[decimalyear-2000.54321-2000.0-0.54321]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[cxcsec-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[unix-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[gps-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[byear-1950.1-1950.1-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[jyear-2000.1-2000.1-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_basic_subformat_setting\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_basic_subformat_cache_does_not_crash\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[jd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[mjd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[cxcsec]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[unix]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[gps]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[jyear]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_caching\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-long-longdouble]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-decimal-Decimal]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-str-str]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_need_format_argument\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_wrong_in_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_wrong_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_not_allowed_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_switch_to_format_with_no_out_subfmt\", \"astropy/time/tests/test_basic.py::TestSofaErrors::test_bad_time\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_immutable_input\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_replicate\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_copy\", \"astropy/time/tests/test_basic.py::TestStardate::test_iso_to_stardate\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates0]\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates1]\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates2]\", \"astropy/time/tests/test_basic.py::test_python_builtin_copy\", \"astropy/time/tests/test_basic.py::test_now\", \"astropy/time/tests/test_basic.py::test_decimalyear\", \"astropy/time/tests/test_basic.py::test_fits_year0\", \"astropy/time/tests/test_basic.py::test_fits_year10000\", \"astropy/time/tests/test_basic.py::test_dir\", \"astropy/time/tests/test_basic.py::test_time_from_epoch_jds\", \"astropy/time/tests/test_basic.py::test_bool\", \"astropy/time/tests/test_basic.py::test_len_size\", \"astropy/time/tests/test_basic.py::test_TimeFormat_scale\", \"astropy/time/tests/test_basic.py::test_byteorder\", \"astropy/time/tests/test_basic.py::test_datetime_tzinfo\", \"astropy/time/tests/test_basic.py::test_subfmts_regex\", \"astropy/time/tests/test_basic.py::test_set_format_basic\", \"astropy/time/tests/test_basic.py::test_unix_tai_format\", \"astropy/time/tests/test_basic.py::test_set_format_shares_subfmt\", \"astropy/time/tests/test_basic.py::test_set_format_does_not_share_subfmt\", \"astropy/time/tests/test_basic.py::test_replicate_value_error\", \"astropy/time/tests/test_basic.py::test_remove_astropy_time\", \"astropy/time/tests/test_basic.py::test_isiterable\", \"astropy/time/tests/test_basic.py::test_to_datetime\", \"astropy/time/tests/test_basic.py::test_to_datetime_leap_second_strict\", \"astropy/time/tests/test_basic.py::test_cache\", \"astropy/time/tests/test_basic.py::test_epoch_date_jd_is_day_fraction\", \"astropy/time/tests/test_basic.py::test_sum_is_equivalent\", \"astropy/time/tests/test_basic.py::test_string_valued_columns\", \"astropy/time/tests/test_basic.py::test_bytes_input\", \"astropy/time/tests/test_basic.py::test_writeable_flag\", \"astropy/time/tests/test_basic.py::test_setitem_location\", \"astropy/time/tests/test_basic.py::test_setitem_from_python_objects\", \"astropy/time/tests/test_basic.py::test_setitem_from_time_objects\", \"astropy/time/tests/test_basic.py::test_setitem_bad_item\", \"astropy/time/tests/test_basic.py::test_setitem_deltas\", \"astropy/time/tests/test_basic.py::test_subclass\", \"astropy/time/tests/test_basic.py::test_strftime_scalar\", \"astropy/time/tests/test_basic.py::test_strftime_array\", \"astropy/time/tests/test_basic.py::test_strftime_array_2\", \"astropy/time/tests/test_basic.py::test_strftime_leapsecond\", \"astropy/time/tests/test_basic.py::test_strptime_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_array\", \"astropy/time/tests/test_basic.py::test_strptime_badinput\", \"astropy/time/tests/test_basic.py::test_strptime_input_bytes_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_input_bytes_array\", \"astropy/time/tests/test_basic.py::test_strptime_leapsecond\", \"astropy/time/tests/test_basic.py::test_strptime_3_digit_year\", \"astropy/time/tests/test_basic.py::test_strptime_fracsec_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_fracsec_array\", \"astropy/time/tests/test_basic.py::test_strftime_scalar_fracsec\", \"astropy/time/tests/test_basic.py::test_strftime_scalar_fracsec_precision\", \"astropy/time/tests/test_basic.py::test_strftime_array_fracsec\", \"astropy/time/tests/test_basic.py::test_insert_time\", \"astropy/time/tests/test_basic.py::test_insert_time_out_subfmt\", \"astropy/time/tests/test_basic.py::test_insert_exceptions\", \"astropy/time/tests/test_basic.py::test_datetime64_no_format\", \"astropy/time/tests/test_basic.py::test_hash_time\", \"astropy/time/tests/test_basic.py::test_hash_time_delta\", \"astropy/time/tests/test_basic.py::test_get_time_fmt_exception_messages\", \"astropy/time/tests/test_basic.py::test_ymdhms_defaults\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_array\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_scalar[kwargs0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_scalar[kwargs1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_exceptions\", \"astropy/time/tests/test_basic.py::test_ymdhms_masked\", \"astropy/time/tests/test_basic.py::test_ymdhms_output\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[mjd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[decimalyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[unix]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[unix_tai]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[cxcsec]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[gps]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[plot_date]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[stardate]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[datetime]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[ymdhms]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[iso]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[isot]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[yday]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[datetime64]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[fits]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[byear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[byear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jyear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[mjd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[decimalyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[unix]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[unix_tai]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[cxcsec]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[gps]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[plot_date]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[stardate]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[datetime]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[ymdhms]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[iso]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[isot]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[yday]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[datetime64]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[fits]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[byear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[byear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jyear_str]\", \"astropy/time/tests/test_basic.py::test_broadcasting_writeable\", \"astropy/time/tests/test_basic.py::test_format_subformat_compatibility\", \"astropy/time/tests/test_basic.py::test_format_fractional_string_parsing[force]\", \"astropy/time/tests/test_basic.py::test_format_fractional_string_parsing[False]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jd-TimeJD]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[mjd-TimeMJD]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[decimalyear-TimeDecimalYear]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[unix-TimeUnix]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[unix_tai-TimeUnixTai]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[cxcsec-TimeCxcSec]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[gps-TimeGPS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[plot_date-TimePlotDate]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[stardate-TimeStardate]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[datetime-TimeDatetime]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[ymdhms-TimeYMDHMS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[iso-TimeISO]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[isot-TimeISOT]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[yday-TimeYearDayTime]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[datetime64-TimeDatetime64]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[fits-TimeFITS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[byear-TimeBesselianEpoch]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jyear-TimeJulianEpoch]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[byear_str-TimeBesselianEpochString]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jyear_str-TimeJulianEpochString]\", \"astropy/time/tests/test_basic.py::test_location_init[None]\", \"astropy/time/tests/test_basic.py::test_location_init[location1]\", \"astropy/time/tests/test_basic.py::test_location_init_fail\", \"astropy/time/tests/test_basic.py::test_linspace\", \"astropy/time/tests/test_basic.py::test_linspace_steps\", \"astropy/time/tests/test_basic.py::test_linspace_fmts\", \"astropy/time/tests/test_basic.py::test_to_string\"]",
  "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.541206",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}