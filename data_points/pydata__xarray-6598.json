{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-6598",
  "base_commit": "6bb2b855498b5c68d7cca8cceb710365d58e6048",
  "patch": "diff --git a/xarray/coding/times.py b/xarray/coding/times.py\n--- a/xarray/coding/times.py\n+++ b/xarray/coding/times.py\n@@ -218,9 +218,12 @@ def _decode_datetime_with_pandas(flat_num_dates, units, calendar):\n         pd.to_timedelta(flat_num_dates.max(), delta) + ref_date\n \n     # To avoid integer overflow when converting to nanosecond units for integer\n-    # dtypes smaller than np.int64 cast all integer-dtype arrays to np.int64\n-    # (GH 2002).\n-    if flat_num_dates.dtype.kind == \"i\":\n+    # dtypes smaller than np.int64 cast all integer and unsigned integer dtype\n+    # arrays to np.int64 (GH 2002, GH 6589).  Note this is safe even in the case\n+    # of np.uint64 values, because any np.uint64 value that would lead to\n+    # overflow when converting to np.int64 would not be representable with a\n+    # timedelta64 value, and therefore would raise an error in the lines above.\n+    if flat_num_dates.dtype.kind in \"iu\":\n         flat_num_dates = flat_num_dates.astype(np.int64)\n \n     # Cast input ordinals to integers of nanoseconds because pd.to_timedelta\n",
  "test_patch": "diff --git a/xarray/tests/test_coding_times.py b/xarray/tests/test_coding_times.py\n--- a/xarray/tests/test_coding_times.py\n+++ b/xarray/tests/test_coding_times.py\n@@ -1121,3 +1121,30 @@ def test_should_cftime_be_used_target_not_npable():\n         ValueError, match=\"Calendar 'noleap' is only valid with cftime.\"\n     ):\n         _should_cftime_be_used(src, \"noleap\", False)\n+\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, np.uint16, np.uint32, np.uint64])\n+def test_decode_cf_datetime_uint(dtype):\n+    units = \"seconds since 2018-08-22T03:23:03Z\"\n+    num_dates = dtype(50)\n+    result = decode_cf_datetime(num_dates, units)\n+    expected = np.asarray(np.datetime64(\"2018-08-22T03:23:53\", \"ns\"))\n+    np.testing.assert_equal(result, expected)\n+\n+\n+@requires_cftime\n+def test_decode_cf_datetime_uint64_with_cftime():\n+    units = \"days since 1700-01-01\"\n+    num_dates = np.uint64(182621)\n+    result = decode_cf_datetime(num_dates, units)\n+    expected = np.asarray(np.datetime64(\"2200-01-01\", \"ns\"))\n+    np.testing.assert_equal(result, expected)\n+\n+\n+@requires_cftime\n+def test_decode_cf_datetime_uint64_with_cftime_overflow_error():\n+    units = \"microseconds since 1700-01-01\"\n+    calendar = \"360_day\"\n+    num_dates = np.uint64(1_000_000 * 86_400 * 360 * 500_000)\n+    with pytest.raises(OverflowError):\n+        decode_cf_datetime(num_dates, units, calendar)\n",
  "problem_statement": "xarray improperly decodes times from a NetCDF when it is a uint\n### What happened?\n\n`xarray` improperly decodes times from a NetCDF when it is a `uint`.  The [attached CDL file](https://github.com/pydata/xarray/files/8663212/both_times.txt) generates a NetCDF file with the right time ('good_time') and the wrong time ('time') (use `ncgen -o both_times.nc -k nc4 both_times.txt`)\n\n### What did you expect to happen?\n\n`time` to be properly decoded (see `good_time`).\n\n### Minimal Complete Verifiable Example\n\n```Python\nimport xarray as xr\r\n\r\nxr.open_dataset('both_times.nc').good_time\r\nxr.open_dataset('both_times.nc').time\n```\n\n\n### MVCE confirmation\n\n- [X] Minimal example — the example is as focused as reasonably possible to demonstrate the underlying issue in xarray.\n- [X] Complete example — the example is self-contained, including all data and the text of any traceback.\n- [X] Verifiable example — the example copy & pastes into an IPython prompt or [Binder notebook](https://mybinder.org/v2/gh/pydata/xarray/main?urlpath=lab/tree/doc/examples/blank_template.ipynb), returning the result.\n- [X] New issue — a search of GitHub Issues suggests this is not a duplicate.\n\n### Relevant log output\n\n```Python\nIn [1]: xr.open_dataset('both_times.nc').good_time\r\n<xarray.DataArray 'good_time' (trajectory: 284)>\r\narray(['2018-08-22T03:23:03.000000000', '2018-08-22T03:23:53.000000000',\r\n       '2018-08-22T03:25:55.000000000', ..., '2018-08-22T08:18:10.000000000',\r\n       '2018-08-22T08:19:00.000000000', '2018-08-22T08:19:50.000000000'],\r\n      dtype='datetime64[ns]')\r\nCoordinates:\r\n  * trajectory  (trajectory) uint32 0 1 2 3 4 5 6 ... 278 279 280 281 282 283\r\nAttributes:\r\n    axis:           T\r\n    long_name:      Time of observation\r\n    standard_name:  time\r\n\r\nIn [2]: xr.open_dataset('both_times.nc').time\r\n<xarray.DataArray 'time' (trajectory: 284)>\r\narray(['2018-08-22T03:23:03.000000000', '2018-08-22T03:23:05.755359744',\r\n       '2018-08-22T03:23:03.201308160', ..., '2018-08-22T03:23:06.144805888',\r\n       '2018-08-22T03:23:04.605198336', '2018-08-22T03:23:03.065590784'],\r\n      dtype='datetime64[ns]')\r\nCoordinates:\r\n  * trajectory  (trajectory) uint32 0 1 2 3 4 5 6 ... 278 279 280 281 282 283\r\nAttributes:\r\n    standard_name:  time\r\n    long_name:      Time of observation\r\n    axis:           T\n```\n\n\n### Anything else we need to know?\n\n_No response_\n\n### Environment\n\n<details>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 06:04:10) [GCC 10.3.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 3.10.0-1160.62.1.el7.x86_64\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: ('en_US', 'UTF-8')\r\nlibhdf5: 1.10.6\r\nlibnetcdf: 4.8.0\r\n\r\nxarray: 2022.3.0\r\npandas: 1.4.2\r\nnumpy: 1.22.3\r\nscipy: 1.7.0\r\nnetCDF4: 1.5.7\r\npydap: None\r\nh5netcdf: 1.0.0\r\nh5py: 3.3.0\r\nNio: None\r\nzarr: 2.11.3\r\ncftime: 1.6.0\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: 0.9.10.1\r\niris: None\r\nbottleneck: 1.3.4\r\ndask: 2022.04.1\r\ndistributed: 2022.4.1\r\nmatplotlib: 3.5.1\r\ncartopy: None\r\nseaborn: 0.11.2\r\nnumbagg: None\r\nfsspec: 2021.06.1\r\ncupy: None\r\npint: 0.19.1\r\nsparse: None\r\nsetuptools: 62.1.0\r\npip: 22.0.4\r\nconda: 4.12.0\r\npytest: 7.1.1\r\nIPython: 8.2.0\r\nsphinx: 4.5.0\r\n</details>\r\n\n",
  "hints_text": "Thanks @sappjw -- this is a distillation of the bug derived from your example:\r\n\r\n```\r\n>>> import numpy as np\r\n>>> import xarray as xr\r\n>>> xr.coding.times.decode_cf_datetime(np.uint32(50), \"seconds since 2018-08-22T03:23:03Z\")\r\narray('2018-08-22T03:23:05.755359744', dtype='datetime64[ns]')\r\n```\r\n\r\nI believe the solution is to also cast all unsigned integer values -- anything with `dtype.kind == \"u\"` -- to `np.int64` values here:\r\nhttps://github.com/pydata/xarray/blob/770e878663b03bd83d2c28af0643770bdd43c3da/xarray/coding/times.py#L220-L224\r\nOrdinarily we might worry about overflow in this context -- i.e. some `np.uint64` values cannot be represented by `np.int64` values -- but I believe since [we already verify that the minimum and maximum value of the input array can be represented by nanosecond-precision timedelta values](https://github.com/pydata/xarray/blob/770e878663b03bd83d2c28af0643770bdd43c3da/xarray/coding/times.py#L217-L218), we can safely do this.",
  "created_at": "2022-05-12T11:14:15Z",
  "version": "2022.03",
  "FAIL_TO_PASS": "[\"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint[uint8]\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint[uint16]\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint[uint32]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates1-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates2-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates3-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates4-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates5-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates6-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates7-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates8-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates9-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates10-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates11-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates12-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates13-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates14-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates15-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates16-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates17-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates18-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates19-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates20-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates21-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates22-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates23-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[10-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates27-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates28-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates29-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates30-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates31-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates32-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates33-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates34-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates35-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates36-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates37-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates38-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates42-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates43-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates44-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates45-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates46-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates47-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates48-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates49-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates50-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates51-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates52-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates53-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates54-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates55-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates56-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[17093352.0-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates60-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates61-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates62-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-milliseconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-microseconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates69-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates70-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates71-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates72-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates73-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates74-hour\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_standard_units\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_iso_strings\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[360_day-720058.0]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[all_leap-732059.0]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[366_day-732059.0]\", \"xarray/tests/test_coding_times.py::test_decode_360_day_calendar\", \"xarray/tests/test_coding_times.py::test_decode_abbreviation\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates1-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates2-days\", \"xarray/tests/test_coding_times.py::test_decoded_cf_datetime_array_2d\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[N-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[U-microseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[S-seconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[T-minutes]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[H-hours]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[D-days]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates0-days\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates1-days\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates2-days\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args0-days\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args1-seconds\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args2-days\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1D-days-numbers0]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas1-days-numbers1]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1h-hours-numbers2]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1ms-milliseconds-numbers3]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1us-microseconds-numbers4]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1ns-nanoseconds-numbers5]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas6-None-numbers6]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas7-hours-numbers7]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[NaT-days-nan]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas9-days-numbers9]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta_2d\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas0-days]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas1-hours]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas2-minutes]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas3-seconds]\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args0-0001-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args1-0010-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args2-0100-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args3-1000-02-03\", \"xarray/tests/test_coding_times.py::test_decode_cf[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_cf[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[julian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_cf[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[standard]\", \"xarray/tests/test_coding_times.py::test_decode_cf_time_bounds\", \"xarray/tests/test_coding_times.py::test_encode_time_bounds\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data0]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data1]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data0]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data1]\", \"xarray/tests/test_coding_times.py::test_encode_expected_failures\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_pandas_min\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_invalid_pandas_valid_cftime\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[360_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[365_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[366_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[all_leap]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[gregorian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[julian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[noleap]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[julian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[standard]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-days]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[N]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[U]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[L]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[S]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[T]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[H]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[D]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[U]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[L]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[S]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[T]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[H]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[D]\", \"xarray/tests/test_coding_times.py::test__encode_datetime_with_cftime\", \"xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[Gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[GREGORIAN]\", \"xarray/tests/test_coding_times.py::test_should_cftime_be_used_source_outside_range\", \"xarray/tests/test_coding_times.py::test_should_cftime_be_used_target_not_npable\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint[uint64]\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint64_with_cftime_overflow_error\"]",
  "environment_setup_commit": "d7931f9014a26e712ff5f30c4082cf0261f045d3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.893820",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}