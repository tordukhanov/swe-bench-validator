{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12307",
  "base_commit": "c9c6b85407a5d2b1bd5ee750e66b03c75ff35271",
  "patch": "diff --git a/sympy/printing/fcode.py b/sympy/printing/fcode.py\n--- a/sympy/printing/fcode.py\n+++ b/sympy/printing/fcode.py\n@@ -106,6 +106,14 @@ def _get_statement(self, codestring):\n \n     def _get_comment(self, text):\n         return \"! {0}\".format(text)\n+#issue 12267\n+    def _print_sign(self,func):\n+        if func.args[0].is_integer:\n+            return \"merge(0, isign(1, {0}), {0} == 0)\".format(self._print(func.args[0]))\n+        elif func.args[0].is_complex:\n+            return \"merge(cmplx(0d0, 0d0), {0}/abs({0}), abs({0}) == 0d0)\".format(self._print(func.args[0]))\n+        else:\n+            return \"merge(0d0, dsign(1d0, {0}), {0} == 0d0)\".format(self._print(func.args[0]))\n \n     def _declare_number_const(self, name, value):\n         return \"parameter ({0} = {1})\".format(name, value)\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_fcode.py b/sympy/printing/tests/test_fcode.py\n--- a/sympy/printing/tests/test_fcode.py\n+++ b/sympy/printing/tests/test_fcode.py\n@@ -1,6 +1,6 @@\n from sympy import (sin, cos, atan2, log, exp, gamma, conjugate, sqrt,\n     factorial, Integral, Piecewise, Add, diff, symbols, S, Float, Dummy, Eq,\n-    Range, Catalan, EulerGamma, E, GoldenRatio, I, pi, Function, Rational, Integer, Lambda)\n+    Range, Catalan, EulerGamma, E, GoldenRatio, I, pi, Function, Rational, Integer, Lambda, sign)\n \n from sympy.codegen import For, Assignment\n from sympy.core.relational import Relational\n@@ -20,6 +20,14 @@ class nint(Function):\n         def _fcode(self, printer):\n             return \"nint(%s)\" % printer._print(self.args[0])\n     assert fcode(nint(x)) == \"      nint(x)\"\n+#issue 12267\n+def test_fcode_sign():\n+    x=symbols('x')\n+    y=symbols('y', integer=True)\n+    z=symbols('z', complex=True)\n+    assert fcode(sign(x), source_format='free') == \"merge(0d0, dsign(1d0, x), x == 0d0)\"\n+    assert fcode(sign(y), source_format='free') == \"merge(0, isign(1, y), y == 0)\"\n+    assert fcode(sign(z), source_format='free') == \"merge(cmplx(0d0, 0d0), z/abs(z), abs(z) == 0d0)\"\n \n \n def test_fcode_Pow():\n",
  "problem_statement": "Codegen: sign function in Fortran\nThe Fortran code generated by Sympy for the sign function is not a valid Fortran syntax.\r\n\r\nWith Sympy 1.0 and Python 3.6:\r\n```python\r\nIn [1]: import sympy as sp\r\n\r\nIn [2]: from sympy.abc import x\r\n\r\nIn [3]: sp.fcode(sp.sign(x))\r\nOut[3]: '      sign(x)'\r\n```\r\n(The same behavior is obtained with `sympy.utilities.codegen`.)\r\n\r\nThe syntax of the sign function in Fortran is given [here](https://gcc.gnu.org/onlinedocs/gfortran/SIGN.html).\r\n\r\nI guess it would be preferable to generate something like `sign(1, x)` or `sign(1d0, x)` depending of the context. I'm not sure how to get the same behavior than Sympy for `x=0`, but at least it would be compilable.\n",
  "hints_text": "The x=0 case probably matters, because SymPy could return an expression that uses `sign` assuming that meaning. Does Fortran have ternary expressions? \nLooks like fortran does support ternary expressions though `merge`:\r\nhttps://en.wikipedia.org/wiki/%3F:#Fortran\n@bjodah \r\nI would like to work in this issue. Could you please help me out?\r\nIs the following code correct?\r\n`sp.sign(x) = merge(0, sp.sign(x), x is 0)`\n@mamakancha no not quite. Fortran knows nothing about `sp.`. You can look at the C version:\r\n```\r\n$ grep -A1 --include \"*.py\" _print_sign -R sympy/\r\n```\n@**bjodah** I think the changes should be done in `doprint()` of codeprinter.py but not quite sure where and what the code should be \n@SatyaPrakashDwibedi I don't think that's needed. Simply adding a method to the printer class for fortran code should be enough (in analogy with the `_print_sign` method in the `CCodePrinter` class).\nWith a recent version a `gfortran`, I can confirm that\r\n```fortran\r\nmerge(0, sign(1, x), x == 0)\r\n```\r\n```fortran\r\nmerge(0e0, sign(1e0, x), x == 0e0)\r\n```\r\nand\r\n```fortran\r\nmerge(0d0, sign(1d0, x), x == 0d0)\r\n```\r\nwork as expected, for respectively integer, real and double precision `x`.\r\n\r\nNote that [`merge`](https://gcc.gnu.org/onlinedocs/gfortran/MERGE.html) is only defined for Fortran 95 standard (or later). Another solution might be needed for the legacy Fortran 77 standard.\nYes, I noticed that `merge` is a rather \"new\" addition. I don't know of an easy fix for fortran 77, there I think one would have to implement it using if statements. But supporting \"only\" F95+ is still a step in the right direction.\n@bjodah will this work?\r\n`>>> def p(func):\r\n...   if func.args[0].is_positive:\r\n...     return '(SIGN(1,{0})'.format((func.args[0]))\r\n...   elif func.args[0].is_negative:\r\n...     return '(SIGN(-1,{0})'.format((func.args[0]))\r\n...   else:\r\n...     return '(SIGN(0,{0})'.format((func.args[0]))\r\n...`\n@SatyaPrakashDwibedi no that will not work. The argument might be symbolic and its sign is not known prior to runtime (or we would obviously not need to generate any call at all). You should look at `test_fcode.py` and write a test for sign checking that generated code looks like @Franjov suggested, then run `./bin/test sympy/printing/tests/test_fcode.py` and watch it fail. Then edit `sympy/printing/fcode.py` to give the code printer a printing method analogous to the one in `ccode.py`. If done right the test should now pass. You should then verify that generated code actually compiles using e.g. `gfortran`. Then just commit and push and open a PR.\n@bjodah Will this work for test_fcode.py\r\n`def test_sign():`\r\n    ` x=symbols('x',Integer=True)`\r\n `    y=symbols('y',real=True)`\r\n `    z=symbols('z',Double=True)`\r\n `    assert fcode(sign(x))==\"      merge(0, sign(1, x), x == 0)\"`\r\n `    assert fcode(sign(y))==\"      merge(0e0, sign(1e0, x), x == 0e0)\"`\r\n `    assert fcode(sign(z))==\"      merge(0d0, sign(1d0, x), x == 0d0)\" `\n@SatyaPrakashDwibedi, that looks quite good, I'd suggest some minor changes:\r\n```\r\ndef test_sign():\r\n    x=symbols('x')\r\n    y=symbols('y', integer=True)\r\n    assert fcode(sign(x), source_format='free') == \"merge(0d0, dsign(1d0, x), x == 0d0)\"\r\n    assert fcode(sign(y), source_format='free') == \"merge(0, isign(1, x), x == 0)\"\r\n```\r\nmaybe we should handle more cases, but I don't write that much fortran so it's hard for me to be sure, @Franjov what do you think?\n@bjodah Should I move to `fcode.py`\n@bjodah I think there should be a check in `fcode.py` for type of variables to return right type of string , and how should I implement that.\nYou could also deal with the complex case. Something like\r\n```fortran\r\nmerge( cmplx(0d0, 0d0), z/abs(z), abs(z) == 0d0)\r\n```\r\n(not tested in Fortran yet).\r\n\r\nActually, it is probably safer to code `x == 0d0` as something like `abs(x) < epsilon`.\r\nBut `epsilon` might be too dependent of the problem for a code generator without more context.",
  "created_at": "2017-03-14T05:25:07Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_fcode_sign\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_fcode_Pow\", \"test_fcode_Rational\", \"test_fcode_Integer\", \"test_fcode_Float\", \"test_fcode_functions\", \"test_fcode_functions_with_integers\", \"test_fcode_NumberSymbol\", \"test_fcode_complex\", \"test_implicit\", \"test_not_fortran\", \"test_user_functions\", \"test_assign_to\", \"test_line_wrapping\", \"test_fcode_precedence\", \"test_fcode_Logical\", \"test_fcode_Xlogical\", \"test_fcode_Relational\", \"test_fcode_Piecewise\", \"test_wrap_fortran\", \"test_wrap_fortran_keep_d0\", \"test_settings\", \"test_free_form_code_line\", \"test_free_form_continuation_line\", \"test_free_form_comment_line\", \"test_derived_classes\", \"test_indent\", \"test_Matrix_printing\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.076894",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}