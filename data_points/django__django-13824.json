{
  "repo": "django/django",
  "instance_id": "django__django-13824",
  "base_commit": "74fd233b1433da8c68de636172ee1c9c6d1c08c9",
  "patch": "diff --git a/django/conf/__init__.py b/django/conf/__init__.py\n--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -15,8 +15,7 @@\n \n import django\n from django.conf import global_settings\n-from django.core.exceptions import ImproperlyConfigured, ValidationError\n-from django.core.validators import URLValidator\n+from django.core.exceptions import ImproperlyConfigured\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import LazyObject, empty\n \n@@ -132,14 +131,8 @@ def _add_script_prefix(value):\n         Useful when the app is being served at a subpath and manually prefixing\n         subpath to STATIC_URL and MEDIA_URL in settings is inconvenient.\n         \"\"\"\n-        # Don't apply prefix to valid URLs.\n-        try:\n-            URLValidator()(value)\n-            return value\n-        except (ValidationError, AttributeError):\n-            pass\n-        # Don't apply prefix to absolute paths.\n-        if value.startswith('/'):\n+        # Don't apply prefix to absolute paths and URLs.\n+        if value.startswith(('http://', 'https://', '/')):\n             return value\n         from django.urls import get_script_prefix\n         return '%s%s' % (get_script_prefix(), value)\n",
  "test_patch": "diff --git a/tests/settings_tests/tests.py b/tests/settings_tests/tests.py\n--- a/tests/settings_tests/tests.py\n+++ b/tests/settings_tests/tests.py\n@@ -573,10 +573,12 @@ def set_script_name(self, val):\n             set_script_prefix(val)\n \n     def test_not_prefixed(self):\n-        # Don't add SCRIPT_NAME prefix to valid URLs, absolute paths or None.\n+        # Don't add SCRIPT_NAME prefix to absolute paths, URLs, or None.\n         tests = (\n             '/path/',\n             'http://myhost.com/path/',\n+            'http://myhost/path/',\n+            'https://myhost/path/',\n             None,\n         )\n         for setting in ('MEDIA_URL', 'STATIC_URL'):\n",
  "problem_statement": "Django adds spurious \"/\" prefix to settings.STATIC_URL=\"http://server/\"\nDescription\n\t \n\t\t(last modified by Adam Hooper)\n\t \nHere's a piece of settings from a totally reasonable, sensible, okay Docker integration-test environment\nSTATIC_URL = \"http://minio/static/\"\nDjango 3.1 will implicitly add \"/\" to the URL, so my URLs look like /http://minio/static/images/app-icons/favicon.ico\nThe features and bugs that interact here:\ncommit c574bec, adding feature #25598, prepends SCRIPT_NAME to STATIC_URL when STATIC_URL isn't a URL.\nbug #9202 and #25418: according to Django, \"​http://minio/static/\" isn't a valid URL. (It is.)\nTop me, the easiest fix is to address #9202 / #25418. Or to make STATIC_URL use some logic that is different from URLValidator.\n",
  "hints_text": "My workaround was to create a phony URL and point to it in /etc/hosts. Yes, really. ​https://github.com/CJWorkbench/cjworkbench/commit/6aec10f441f5392bda7df247cddc8828b52a0c84\nThanks for the report, as a workaround you can set the ​FORCE_SCRIPT_NAME setting to an empty string: FORCE_SCRIPT_NAME = '' Ticket #9202 was rejected and will not be fixed. I think it should be fine to add http:// and https:// to recognizing absolute paths, e.g. diff --git a/django/conf/__init__.py b/django/conf/__init__.py index 23fee7d5b7..c2ddc942db 100644 --- a/django/conf/__init__.py +++ b/django/conf/__init__.py @@ -139,7 +139,7 @@ class LazySettings(LazyObject): except (ValidationError, AttributeError): pass # Don't apply prefix to absolute paths. - if value.startswith('/'): + if value.startswith(('http://', 'https://', '/')): return value from django.urls import get_script_prefix return '%s%s' % (get_script_prefix(), value) Florian, What do you think?\nUff, yes that is certainly a bug. I think your proposed fix is okay; but I'd also remove the usage of the URLValidator completely. Maybe: diff --git a/django/conf/__init__.py b/django/conf/__init__.py index 23fee7d5b7..fc36b64d05 100644 --- a/django/conf/__init__.py +++ b/django/conf/__init__.py @@ -16,7 +16,6 @@ from pathlib import Path import django from django.conf import global_settings from django.core.exceptions import ImproperlyConfigured, ValidationError -from django.core.validators import URLValidator from django.utils.deprecation import RemovedInDjango40Warning from django.utils.functional import LazyObject, empty @@ -132,14 +131,8 @@ class LazySettings(LazyObject): Useful when the app is being served at a subpath and manually prefixing subpath to STATIC_URL and MEDIA_URL in settings is inconvenient. \"\"\" - # Don't apply prefix to valid URLs. - try: - URLValidator()(value) - return value - except (ValidationError, AttributeError): - pass - # Don't apply prefix to absolute paths. - if value.startswith('/'): + # Don't apply prefix to absolute paths and URLs. + if value.startswith(('/', 'http://', 'https://')): return value from django.urls import get_script_prefix return '%s%s' % (get_script_prefix(), value)",
  "created_at": "2020-12-30T10:22:34Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_not_prefixed (settings_tests.tests.MediaURLStaticURLPrefixTest)\"]",
  "PASS_TO_PASS": "[\"test_max_recursion_error (settings_tests.tests.ClassDecoratedTestCaseSuper)\", \"test_override_settings_inheritance (settings_tests.tests.ChildDecoratedTestCase)\", \"test_tuple_settings (settings_tests.tests.TestListSettings)\", \"test_configure (settings_tests.tests.IsOverriddenTest)\", \"test_evaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_module (settings_tests.tests.IsOverriddenTest)\", \"test_override (settings_tests.tests.IsOverriddenTest)\", \"test_settings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_unevaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_usersettingsholder_repr (settings_tests.tests.IsOverriddenTest)\", \"test_none (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_right (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_wrong (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_without_xheader (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_xheader_preferred_to_underlying_request (settings_tests.tests.SecureProxySslHeaderTest)\", \"Regression test for #19031\", \"test_method_override (settings_tests.tests.FullyDecoratedTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTestCase)\", \"test_max_recursion_error (settings_tests.tests.ClassDecoratedTestCase)\", \"test_method_override (settings_tests.tests.ClassDecoratedTestCase)\", \"test_override (settings_tests.tests.ClassDecoratedTestCase)\", \"Settings are overridden within setUpClass (#21281).\", \"test_already_configured (settings_tests.tests.SettingsTests)\", \"test_class_decorator (settings_tests.tests.SettingsTests)\", \"test_context_manager (settings_tests.tests.SettingsTests)\", \"test_decorator (settings_tests.tests.SettingsTests)\", \"test_incorrect_timezone (settings_tests.tests.SettingsTests)\", \"test_no_secret_key (settings_tests.tests.SettingsTests)\", \"test_no_settings_module (settings_tests.tests.SettingsTests)\", \"test_nonupper_settings_ignored_in_default_settings (settings_tests.tests.SettingsTests)\", \"test_nonupper_settings_prohibited_in_configure (settings_tests.tests.SettingsTests)\", \"test_override (settings_tests.tests.SettingsTests)\", \"test_override_change (settings_tests.tests.SettingsTests)\", \"test_override_doesnt_leak (settings_tests.tests.SettingsTests)\", \"test_override_settings_delete (settings_tests.tests.SettingsTests)\", \"test_override_settings_nested (settings_tests.tests.SettingsTests)\", \"test_settings_delete (settings_tests.tests.SettingsTests)\", \"test_settings_delete_wrapped (settings_tests.tests.SettingsTests)\", \"test_signal_callback_context_manager (settings_tests.tests.SettingsTests)\", \"test_signal_callback_decorator (settings_tests.tests.SettingsTests)\", \"test_add_script_name_prefix (settings_tests.tests.MediaURLStaticURLPrefixTest)\", \"test_decorated_testcase_module (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_decorated_testcase_name (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_nested_order (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_no_ops (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_strings (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"Receiver fails on both enter and exit.\", \"Receiver fails on enter only.\", \"Receiver fails on exit only.\", \"test_override_settings_reusable_on_enter (settings_tests.tests.OverrideSettingsIsolationOnExceptionTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.672453",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}