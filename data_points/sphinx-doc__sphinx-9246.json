{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9246",
  "base_commit": "630e5bd15f43c6cd91e61723f40b6c94ef622060",
  "patch": "diff --git a/sphinx/transforms/post_transforms/__init__.py b/sphinx/transforms/post_transforms/__init__.py\n--- a/sphinx/transforms/post_transforms/__init__.py\n+++ b/sphinx/transforms/post_transforms/__init__.py\n@@ -8,10 +8,10 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n-from typing import Any, Dict, List, Optional, Tuple, Type, cast\n+from typing import Any, Dict, List, Optional, Sequence, Tuple, Type, cast\n \n from docutils import nodes\n-from docutils.nodes import Element\n+from docutils.nodes import Element, Node\n \n from sphinx import addnodes\n from sphinx.addnodes import pending_xref\n@@ -26,10 +26,6 @@\n \n logger = logging.getLogger(__name__)\n \n-if False:\n-    # For type annotation\n-    from docutils.nodes import Node\n-\n \n class SphinxPostTransform(SphinxTransform):\n     \"\"\"A base class of post-transforms.\n@@ -71,7 +67,12 @@ class ReferencesResolver(SphinxPostTransform):\n \n     def run(self, **kwargs: Any) -> None:\n         for node in self.document.traverse(addnodes.pending_xref):\n-            contnode = cast(nodes.TextElement, node[0].deepcopy())\n+            content = self.find_pending_xref_condition(node, (\"resolved\", \"*\"))\n+            if content:\n+                contnode = cast(Element, content[0].deepcopy())\n+            else:\n+                contnode = cast(Element, node[0].deepcopy())\n+\n             newnode = None\n \n             typ = node['reftype']\n@@ -108,9 +109,9 @@ def run(self, **kwargs: Any) -> None:\n             else:\n                 newnodes = [contnode]\n                 if newnode is None and isinstance(node[0], addnodes.pending_xref_condition):\n-                    matched = find_pending_xref_condition(node, \"*\")\n+                    matched = self.find_pending_xref_condition(node, (\"*\",))\n                     if matched:\n-                        newnodes = matched.children\n+                        newnodes = matched\n                     else:\n                         logger.warning(__('Could not determine the fallback text for the '\n                                           'cross-reference. Might be a bug.'), location=node)\n@@ -193,6 +194,15 @@ def warn_missing_reference(self, refdoc: str, typ: str, target: str,\n             msg = __('%r reference target not found: %s') % (typ, target)\n         logger.warning(msg, location=node, type='ref', subtype=typ)\n \n+    def find_pending_xref_condition(self, node: pending_xref, conditions: Sequence[str]\n+                                    ) -> Optional[List[Node]]:\n+        for condition in conditions:\n+            matched = find_pending_xref_condition(node, condition)\n+            if matched:\n+                return matched.children\n+        else:\n+            return None\n+\n \n class OnlyNodeTransform(SphinxPostTransform):\n     default_priority = 50\n",
  "test_patch": "diff --git a/tests/roots/test-transforms-post_transforms-missing-reference/conf.py b/tests/roots/test-transforms-post_transforms-missing-reference/conf.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-transforms-post_transforms-missing-reference/conf.py\n@@ -0,0 +1 @@\n+nitpicky = True\ndiff --git a/tests/roots/test-transforms-post_transforms-missing-reference/index.rst b/tests/roots/test-transforms-post_transforms-missing-reference/index.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-transforms-post_transforms-missing-reference/index.rst\n@@ -0,0 +1,5 @@\n+transforms-post_transforms-missing-reference\n+============================================\n+\n+:class:`io.StringIO`\n+\ndiff --git a/tests/test_transforms_post_transforms.py b/tests/test_transforms_post_transforms.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/test_transforms_post_transforms.py\n@@ -0,0 +1,58 @@\n+\"\"\"\n+    test_transforms_post_transforms\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Tests the post_transforms\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from docutils import nodes\n+\n+\n+@pytest.mark.sphinx('html', testroot='transforms-post_transforms-missing-reference')\n+def test_nitpicky_warning(app, status, warning):\n+    app.build()\n+    assert ('index.rst:4: WARNING: py:class reference target '\n+            'not found: io.StringIO' in warning.getvalue())\n+\n+    content = (app.outdir / 'index.html').read_text()\n+    assert ('<p><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">'\n+            'io.StringIO</span></code></p>' in content)\n+\n+\n+@pytest.mark.sphinx('html', testroot='transforms-post_transforms-missing-reference',\n+                    freshenv=True)\n+def test_missing_reference(app, status, warning):\n+    def missing_reference(app, env, node, contnode):\n+        assert app is app\n+        assert env is app.env\n+        assert node['reftarget'] == 'io.StringIO'\n+        assert contnode.astext() == 'io.StringIO'\n+\n+        return nodes.inline('', 'missing-reference.StringIO')\n+\n+    warning.truncate(0)\n+    app.connect('missing-reference', missing_reference)\n+    app.build()\n+    assert warning.getvalue() == ''\n+\n+    content = (app.outdir / 'index.html').read_text()\n+    assert '<p><span>missing-reference.StringIO</span></p>' in content\n+\n+\n+@pytest.mark.sphinx('html', testroot='domain-py-python_use_unqualified_type_names',\n+                    freshenv=True)\n+def test_missing_reference_conditional_pending_xref(app, status, warning):\n+    def missing_reference(app, env, node, contnode):\n+        return contnode\n+\n+    warning.truncate(0)\n+    app.connect('missing-reference', missing_reference)\n+    app.build()\n+    assert warning.getvalue() == ''\n+\n+    content = (app.outdir / 'index.html').read_text()\n+    assert '<span class=\"n\"><span class=\"pre\">Age</span></span>' in content\n",
  "problem_statement": "Unknown node: `pending_xref_condition`\n### To Reproduce\r\n\r\n```sh\r\npython -m venv .venv\r\n. .venv/bin/activate\r\npip install sphinx==4.0.1 sphinx-qt-documentation==0.3 PyQt5==5.15.4\r\nmkdir docs\r\n```\r\n\r\n`foo.py`:\r\n```python\r\nfrom PyQt5 import QtGui\r\n\r\ndef bar() -> QtGui.QIcon:\r\n    pass\r\n```\r\n\r\n`docs/conf.py`:\r\n```python\r\nimport os\r\nimport sys\r\n\r\nsys.path.insert(0, os.path.abspath(\"./\"))\r\n\r\nextensions = [\r\n    \"sphinx.ext.autodoc\",\r\n    \"sphinx.ext.intersphinx\",\r\n    \"sphinx_qt_documentation\",\r\n]\r\nintersphinx_mapping = {\r\n    \"PyQt5\": (\"https://riverbankcomputing.com/static/Docs/PyQt5/\", None),\r\n}\r\npython_use_unqualified_type_names = True\r\n```\r\n\r\n`docs/index.rst`:\r\n```rst\r\ntest\r\n====\r\n\r\n.. automodule:: foo\r\n   :members:\r\n   :undoc-members:\r\n```\r\n\r\nRun:\r\n```sh\r\npython -m sphinx -b dirhtml docs .out\r\n```\r\n\r\n### Result\r\n\r\n```python\r\n# Sphinx version: 4.0.1\r\n# Python version: 3.9.4 (CPython)\r\n# Docutils version: 0.17.1 release\r\n# Jinja2 version: 2.11.3\r\n# Last messages:\r\n#   \r\n#   looking for now-outdated files...\r\n#   none found\r\n#   pickling environment...\r\n#   done\r\n#   checking consistency...\r\n#   done\r\n#   preparing documents...\r\n#   done\r\n#   writing output... [100%] index\r\n# Loaded extensions:\r\n#   sphinx.ext.mathjax (4.0.1) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/ext/mathjax.py\r\n#   sphinxcontrib.applehelp (1.0.2) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinxcontrib/applehelp/__init__.py\r\n#   sphinxcontrib.devhelp (1.0.2) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinxcontrib/devhelp/__init__.py\r\n#   sphinxcontrib.htmlhelp (1.0.3) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinxcontrib/htmlhelp/__init__.py\r\n#   sphinxcontrib.serializinghtml (1.1.4) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinxcontrib/serializinghtml/__init__.py\r\n#   sphinxcontrib.qthelp (1.0.3) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinxcontrib/qthelp/__init__.py\r\n#   alabaster (0.7.12) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/alabaster/__init__.py\r\n#   sphinx.ext.autodoc.preserve_defaults (1.0) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/ext/autodoc/preserve_defaults.py\r\n#   sphinx.ext.autodoc.type_comment (4.0.1) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/ext/autodoc/type_comment.py\r\n#   sphinx.ext.autodoc (4.0.1) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/ext/autodoc/__init__.py\r\n#   sphinx.ext.intersphinx (4.0.1) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/ext/intersphinx.py\r\n#   sphinx_qt_documentation (0.1) from /tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx_qt_documentation/__init__.py\r\nTraceback (most recent call last):\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/cmd/build.py\", line 280, in build_main\r\n    app.build(args.force_all, filenames)\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/application.py\", line 350, in build\r\n    self.builder.build_update()\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/builders/__init__.py\", line 292, in build_update\r\n    self.build(to_build,\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/builders/__init__.py\", line 356, in build\r\n    self.write(docnames, list(updated_docnames), method)\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/builders/__init__.py\", line 530, in write\r\n    self._write_serial(sorted(docnames))\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/builders/__init__.py\", line 540, in _write_serial\r\n    self.write_doc(docname, doctree)\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/builders/html/__init__.py\", line 615, in write_doc\r\n    self.docwriter.write(doctree, destination)\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/docutils/writers/__init__.py\", line 78, in write\r\n    self.translate()\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/writers/html.py\", line 70, in translate\r\n    self.document.walkabout(visitor)\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/docutils/nodes.py\", line 227, in walkabout\r\n    if child.walkabout(visitor):\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/docutils/nodes.py\", line 227, in walkabout\r\n    if child.walkabout(visitor):\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/docutils/nodes.py\", line 227, in walkabout\r\n    if child.walkabout(visitor):\r\n  [Previous line repeated 3 more times]\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/docutils/nodes.py\", line 219, in walkabout\r\n    visitor.dispatch_visit(self)\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/util/docutils.py\", line 472, in dispatch_visit\r\n    super().dispatch_visit(node)\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/docutils/nodes.py\", line 2021, in dispatch_visit\r\n    return method(node)\r\n  File \"/tmp/tmp.oLe3FEHJrF/.venv/lib/python3.9/site-packages/sphinx/writers/html5.py\", line 799, in unknown_visit\r\n    raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\r\nNotImplementedError: Unknown node: pending_xref_condition\r\n```\r\n\r\n### Environment info\r\n\r\n- OS: Linux\r\n- Python version: 3.9.4\r\n- Sphinx version: 4.0.1\r\n- Sphinx extensions: `sphinx.ext.autodoc`, `sphinx.ext.intersphinx`, `sphinx_qt_documentation`\r\n\r\n### Additional context\r\n\r\nThis is similar to the issue that was fixed in #8996. I think, that I've tracked the issue to the `sphinx-qt-documentation` plugin. This plugin connects itself to `missing-reference` events like this\r\n\r\n```python\r\ndef setup(app: Sphinx) -> Dict[str, Any]:\r\n    ... # snip\r\n    app.connect(\"missing-reference\", missing_reference)\r\n    ... # snip\r\n```\r\n\r\nhowever, their `missing_reference` implementation doesn't have the\r\n\r\n```python\r\n    content = find_pending_xref_condition(node, 'resolved')\r\n    if content:\r\n        contnode = content.children[0]  # type: ignore\r\n```\r\n\r\nsnippet, which eventually leads to the above `Unknown node: pending_xref_condition` error.\r\n\r\nI could submit this as a bug report to the author of `sphinx-qt-documentation`, but I wanted to make sure, that this behaviour is intended. It seems to me like a potential antipattern. For example, the above snippet (with minor variations) is already duplicated internally in\r\n\r\n - `sphinx/domains/python.py:PythonDomain.resolve_xref`\r\n - `sphinx/domains/python.py:PythonDomain.resolve_any_xref`\r\n - `sphinx/domains/python.py:builtin_resolver`\r\n - `sphinx/ext/intersphinx.py:missing_reference`\r\n\r\nAnd any plugin that connects to the `missing-reference` event must also now add this snippet (which is complicated by the fact that `find_pending_xref_condition` doesn't seem to be available in `sphinx<4`). Do you think that maybe the `contnode` value should be resolved when the `missing-reference` event is created in `sphinx/transforms/post_transforms/__init__.py`?\n",
  "hints_text": "Thank you for reporting. I guess Sphinx's post processing has a bug when 3rd party extension resolves a missing-reference.\r\n\r\nCould you check this patch works fine?\r\n```\r\ndiff --git a/sphinx/transforms/post_transforms/__init__.py b/sphinx/transforms/post_transforms/__init__.py\r\nindex e2899d994..54cab4ed6 100644\r\n--- a/sphinx/transforms/post_transforms/__init__.py\r\n+++ b/sphinx/transforms/post_transforms/__init__.py\r\n@@ -96,10 +96,18 @@ class ReferencesResolver(SphinxPostTransform):\r\n                     newnode = self.app.emit_firstresult('missing-reference', self.env,\r\n                                                         node, contnode,\r\n                                                         allowed_exceptions=(NoUri,))\r\n-                    # still not found? warn if node wishes to be warned about or\r\n-                    # we are in nit-picky mode\r\n                     if newnode is None:\r\n+                        # still not found? warn if node wishes to be warned about or\r\n+                        # we are in nit-picky mode\r\n                         self.warn_missing_reference(refdoc, typ, target, node, domain)\r\n+                    elif isinstance(newnode[0], addnodes.pending_xref_condition):\r\n+                        matched = find_pending_xref_condition(node, \"*\")\r\n+                        if matched:\r\n+                            newnode = matched[0]\r\n+                        else:\r\n+                            logger.warning(__('Could not determine the fallback text for the '\r\n+                                              'cross-reference. Might be a bug.'),\r\n+                                           location=node)\r\n             except NoUri:\r\n                 newnode = None\r\n```\r\n\r\n(I'll try this tomorrow. But I need to build the environment to build the example project. I don't know PyQt at all...)\n> Thank you for reporting. I guess Sphinx's post processing has a bug when 3rd party extension resolves a missing-reference.\r\n> \r\n> Could you check this patch works fine?\r\n\r\nNot quite. It removes the exception, but the `PyQt5.QtGui.QIcon` return type is still rendered including with the full module name, and it doesn't link to the `Qt` docs.\r\n\r\nI was thinking of something more along the lines of\r\n\r\n```diff\r\n--- a/sphinx/transforms/post_transforms/__init__.py\r\n+++ b/sphinx/transforms/post_transforms/__init__.py\r\n@@ -69,11 +69,15 @@\r\n \r\n     default_priority = 10\r\n \r\n     def run(self, **kwargs: Any) -> None:\r\n         for node in self.document.traverse(addnodes.pending_xref):\r\n-            contnode = cast(nodes.TextElement, node[0].deepcopy())\r\n+            content = find_pending_xref_condition(node, 'resolved')\r\n+            if content:\r\n+                contnode = content.children[0]  # type: ignore\r\n+            else:\r\n+                contnode = cast(nodes.TextElement, node[0].deepcopy())\r\n             newnode = None\r\n \r\n             typ = node['reftype']\r\n             target = node['reftarget']\r\n             refdoc = node.get('refdoc', self.env.docname)\r\n```\r\n(although you might need to somehow handle the case, where `content` has multiple `children`, I am not 100% sure)\r\n\r\nThe above patch fixes the error and produces the desired results for the minimal test case, that I have provided, but I am not sure, if it plays well with other components of the reference resolution process.\r\n\r\n---\r\n\r\nWith a little refactoring you should also be able to remove the duplicated code fragments in the following functions:\r\n\r\n- `sphinx/domains/python.py:PythonDomain.resolve_xref`\r\n- `sphinx/domains/python.py:PythonDomain.resolve_any_xref`\r\n- `sphinx/domains/python.py:builtin_resolver`\r\n- `sphinx/ext/intersphinx.py:missing_reference`\r\n\r\nAll these functions are called from `ReferenceResolver.run` either directly:\r\n- `PythonDomain.resolve_xref` by `domain.resolve_xref`\r\n- `PythonDomain.resolve_any_xref` from `self.resolve_anyref` by `domain.resolve_any_xref`\r\n\r\nor via connecting to the `missing-reference` event:\r\n- `domains/python.py:builtin_resolver` by `app.connect('missing-reference', builtin_resolver, priority=900)`\r\n- `ext/intersphinx.py:missing_reference` by `app.connect('missing-reference', missing_reference)`)\r\n\r\n---\r\n\r\n> (I'll try this tomorrow. But I need to build the environment to build the example project. I don't know PyQt at all...)\r\n\r\nYou shouldn't need any `PyQt` knowledge for this. The reason why `Qt` is involved here is that `Qt` doesn't have a full Python documentation, because it's a C++ wrapper. So the `sphinx-qt-documentation` plugin just makes it possible to automatically link from a python type to documentation of the equivalent C++ type. For example, the `PyQt5.QtGui.QIcon` return type in `foo.py` should link to [the C++ docs for the `QIcon` class](https://doc.qt.io/qt-5/qicon.html).",
  "created_at": "2021-05-17T16:13:07Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"tests/test_transforms_post_transforms.py::test_missing_reference_conditional_pending_xref\"]",
  "PASS_TO_PASS": "[\"tests/test_transforms_post_transforms.py::test_nitpicky_warning\", \"tests/test_transforms_post_transforms.py::test_missing_reference\"]",
  "environment_setup_commit": "8939a75efaa911a12dbe6edccedf261e88bf7eef",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.064654",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}