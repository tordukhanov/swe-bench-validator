{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18605",
  "base_commit": "c0a02c3c928dbbc42c008ed460bb662fc602f9d4",
  "patch": "diff --git a/sympy/tensor/indexed.py b/sympy/tensor/indexed.py\n--- a/sympy/tensor/indexed.py\n+++ b/sympy/tensor/indexed.py\n@@ -111,7 +111,7 @@\n from sympy.core.symbol import _filter_assumptions, Symbol\n from sympy.core.compatibility import (is_sequence, NotIterable,\n                                       Iterable)\n-from sympy.core.logic import fuzzy_bool\n+from sympy.core.logic import fuzzy_bool, fuzzy_not\n from sympy.core.sympify import _sympify\n from sympy.functions.special.tensor_functions import KroneckerDelta\n \n@@ -663,7 +663,7 @@ def __new__(cls, label, range=None, **kw_args):\n                     raise TypeError(\"Idx object requires integer bounds.\")\n             args = label, Tuple(*range)\n         elif isinstance(range, Expr):\n-            if not (range.is_integer or range is S.Infinity):\n+            if range is not S.Infinity and fuzzy_not(range.is_integer):\n                 raise TypeError(\"Idx object requires an integer dimension.\")\n             args = label, Tuple(0, range - 1)\n         elif range:\n",
  "test_patch": "diff --git a/sympy/tensor/tests/test_indexed.py b/sympy/tensor/tests/test_indexed.py\n--- a/sympy/tensor/tests/test_indexed.py\n+++ b/sympy/tensor/tests/test_indexed.py\n@@ -422,6 +422,14 @@ def test_issue_12780():\n     raises(TypeError, lambda: i.subs(n, 1.5))\n \n \n+def test_issue_18604():\n+    m = symbols(\"m\")\n+    assert Idx(\"i\", m).name == 'i'\n+    assert Idx(\"i\", m).lower == 0\n+    assert Idx(\"i\", m).upper == m - 1\n+    m = symbols(\"m\", real=False)\n+    raises(TypeError, lambda: Idx(\"i\", m))\n+\n def test_Subs_with_Indexed():\n     A = IndexedBase(\"A\")\n     i, j, k = symbols(\"i,j,k\")\n",
  "problem_statement": "Idx object can accepts non-integer bounds\nIt is my understanding that this code should not work: the lower and upper bounds should be integers. Instead it runs without any errors:\r\n\r\n```\r\nimport sympy as sp\r\nm, n = sp.symbols(\"m, n\", real=True)\r\ni = sp.Idx(\"i\", (m, n))\r\n```\r\n\r\nNote however that:\r\n\r\n```\r\nsp.Idx(\"i\", m)\r\n```\r\n\r\nproduces the expected result:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-59-166e71a7f3f7> in <module>\r\n----> 1 sp.Idx(\"i\", m)\r\n\r\n/usr/local/lib/python3.7/dist-packages/sympy/tensor/indexed.py in __new__(cls, label, range, **kw_args)\r\n    665         elif isinstance(range, Expr):\r\n    666             if not (range.is_integer or range is S.Infinity):\r\n--> 667                 raise TypeError(\"Idx object requires an integer dimension.\")\r\n    668             args = label, Tuple(0, range - 1)\r\n    669         elif range:\r\n\r\nTypeError: Idx object requires an integer dimension.\r\n```\r\n\r\nThe check for integer dimension should be done to both upper and lower bounds when a tuple is given as argument.\n",
  "hints_text": "I think it should be okay to use something that is possibly an integer like a plain `Symbol('n')`. So this is correct:\r\n```julia\r\nIn [4]: x = Symbol('x', integer=False)                                                                                                         \r\n\r\nIn [5]: Idx('i', (x, y))                                                                                                                       \r\n---------------------------------------------------------------------------\r\nTypeError\r\n```\r\nWhat should be fixed is that this should not raise:\r\n```julia\r\nIn [8]: Idx('i', Symbol('x'))                                                                                                                  \r\n---------------------------------------------------------------------------\r\nTypeError\r\n```\r\nThe check for `range.is_integer` needs to take account of the case where `range.is_integer` gives None. Perhaps it should use `fuzzy_not/and`.\nI am working on this.",
  "created_at": "2020-02-08T18:04:45Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_issue_18604\"]",
  "PASS_TO_PASS": "[\"test_Idx_construction\", \"test_Idx_properties\", \"test_Idx_bounds\", \"test_Idx_fixed_bounds\", \"test_Idx_inequalities\", \"test_Idx_func_args\", \"test_Idx_subs\", \"test_IndexedBase_sugar\", \"test_IndexedBase_subs\", \"test_IndexedBase_shape\", \"test_IndexedBase_assumptions\", \"test_IndexedBase_assumptions_inheritance\", \"test_issue_17652\", \"test_Indexed_constructor\", \"test_Indexed_func_args\", \"test_Indexed_subs\", \"test_Indexed_properties\", \"test_Indexed_shape_precedence\", \"test_complex_indices\", \"test_not_interable\", \"test_Indexed_coeff\", \"test_differentiation\", \"test_indexed_series\", \"test_indexed_is_constant\", \"test_issue_12533\", \"test_issue_12780\", \"test_Subs_with_Indexed\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.124514",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}