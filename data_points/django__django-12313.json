{
  "repo": "django/django",
  "instance_id": "django__django-12313",
  "base_commit": "f3da09df0f4147223ab76a00a841586ccf11005d",
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -496,10 +496,13 @@ def generate_renamed_models(self):\n                                 dependencies=dependencies,\n                             )\n                             self.renamed_models[app_label, model_name] = rem_model_name\n-                            renamed_models_rel_key = '%s.%s' % (rem_model_state.app_label, rem_model_state.name)\n+                            renamed_models_rel_key = '%s.%s' % (\n+                                rem_model_state.app_label,\n+                                rem_model_state.name_lower,\n+                            )\n                             self.renamed_models_rel[renamed_models_rel_key] = '%s.%s' % (\n                                 model_state.app_label,\n-                                model_state.name,\n+                                model_state.name_lower,\n                             )\n                             self.old_model_keys.remove((rem_app_label, rem_model_name))\n                             self.old_model_keys.add((app_label, model_name))\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -581,14 +581,10 @@ def deconstruct(self):\n \n         if self.remote_field.parent_link:\n             kwargs['parent_link'] = self.remote_field.parent_link\n-        # Work out string form of \"to\"\n         if isinstance(self.remote_field.model, str):\n-            kwargs['to'] = self.remote_field.model\n+            kwargs['to'] = self.remote_field.model.lower()\n         else:\n-            kwargs['to'] = \"%s.%s\" % (\n-                self.remote_field.model._meta.app_label,\n-                self.remote_field.model._meta.object_name,\n-            )\n+            kwargs['to'] = self.remote_field.model._meta.label_lower\n         # If swappable is True, then see if we're actually pointing to the target\n         # of a swap.\n         swappable_setting = self.swappable_setting\n",
  "test_patch": "diff --git a/tests/field_deconstruction/tests.py b/tests/field_deconstruction/tests.py\n--- a/tests/field_deconstruction/tests.py\n+++ b/tests/field_deconstruction/tests.py\n@@ -202,39 +202,39 @@ def test_foreign_key(self):\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.ForeignKey\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.Permission\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.permission\", \"on_delete\": models.CASCADE})\n         self.assertFalse(hasattr(kwargs['to'], \"setting_name\"))\n         # Test swap detection for swappable model\n         field = models.ForeignKey(\"auth.User\", models.CASCADE)\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.ForeignKey\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.User\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.user\", \"on_delete\": models.CASCADE})\n         self.assertEqual(kwargs['to'].setting_name, \"AUTH_USER_MODEL\")\n         # Test nonexistent (for now) model\n         field = models.ForeignKey(\"something.Else\", models.CASCADE)\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.ForeignKey\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"something.Else\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"something.else\", \"on_delete\": models.CASCADE})\n         # Test on_delete\n         field = models.ForeignKey(\"auth.User\", models.SET_NULL)\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.ForeignKey\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.User\", \"on_delete\": models.SET_NULL})\n+        self.assertEqual(kwargs, {\"to\": \"auth.user\", \"on_delete\": models.SET_NULL})\n         # Test to_field preservation\n         field = models.ForeignKey(\"auth.Permission\", models.CASCADE, to_field=\"foobar\")\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.ForeignKey\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.Permission\", \"to_field\": \"foobar\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.permission\", \"to_field\": \"foobar\", \"on_delete\": models.CASCADE})\n         # Test related_name preservation\n         field = models.ForeignKey(\"auth.Permission\", models.CASCADE, related_name=\"foobar\")\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.ForeignKey\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.Permission\", \"related_name\": \"foobar\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.permission\", \"related_name\": \"foobar\", \"on_delete\": models.CASCADE})\n         # Test related_query_name\n         field = models.ForeignKey(\"auth.Permission\", models.CASCADE, related_query_name=\"foobar\")\n         name, path, args, kwargs = field.deconstruct()\n@@ -242,7 +242,7 @@ def test_foreign_key(self):\n         self.assertEqual(args, [])\n         self.assertEqual(\n             kwargs,\n-            {\"to\": \"auth.Permission\", \"related_query_name\": \"foobar\", \"on_delete\": models.CASCADE}\n+            {\"to\": \"auth.permission\", \"related_query_name\": \"foobar\", \"on_delete\": models.CASCADE}\n         )\n         # Test limit_choices_to\n         field = models.ForeignKey(\"auth.Permission\", models.CASCADE, limit_choices_to={'foo': 'bar'})\n@@ -251,14 +251,14 @@ def test_foreign_key(self):\n         self.assertEqual(args, [])\n         self.assertEqual(\n             kwargs,\n-            {\"to\": \"auth.Permission\", \"limit_choices_to\": {'foo': 'bar'}, \"on_delete\": models.CASCADE}\n+            {\"to\": \"auth.permission\", \"limit_choices_to\": {'foo': 'bar'}, \"on_delete\": models.CASCADE}\n         )\n         # Test unique\n         field = models.ForeignKey(\"auth.Permission\", models.CASCADE, unique=True)\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.ForeignKey\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.Permission\", \"unique\": True, \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.permission\", \"unique\": True, \"on_delete\": models.CASCADE})\n \n     @override_settings(AUTH_USER_MODEL=\"auth.Permission\")\n     def test_foreign_key_swapped(self):\n@@ -270,7 +270,7 @@ def test_foreign_key_swapped(self):\n \n         self.assertEqual(path, \"django.db.models.ForeignKey\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.Permission\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.permission\", \"on_delete\": models.CASCADE})\n         self.assertEqual(kwargs['to'].setting_name, \"AUTH_USER_MODEL\")\n \n     def test_one_to_one(self):\n@@ -282,39 +282,39 @@ def test_one_to_one(self):\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.OneToOneField\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.Permission\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.permission\", \"on_delete\": models.CASCADE})\n         self.assertFalse(hasattr(kwargs['to'], \"setting_name\"))\n         # Test swap detection for swappable model\n         field = models.OneToOneField(\"auth.User\", models.CASCADE)\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.OneToOneField\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.User\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.user\", \"on_delete\": models.CASCADE})\n         self.assertEqual(kwargs['to'].setting_name, \"AUTH_USER_MODEL\")\n         # Test nonexistent (for now) model\n         field = models.OneToOneField(\"something.Else\", models.CASCADE)\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.OneToOneField\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"something.Else\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"something.else\", \"on_delete\": models.CASCADE})\n         # Test on_delete\n         field = models.OneToOneField(\"auth.User\", models.SET_NULL)\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.OneToOneField\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.User\", \"on_delete\": models.SET_NULL})\n+        self.assertEqual(kwargs, {\"to\": \"auth.user\", \"on_delete\": models.SET_NULL})\n         # Test to_field\n         field = models.OneToOneField(\"auth.Permission\", models.CASCADE, to_field=\"foobar\")\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.OneToOneField\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.Permission\", \"to_field\": \"foobar\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.permission\", \"to_field\": \"foobar\", \"on_delete\": models.CASCADE})\n         # Test related_name\n         field = models.OneToOneField(\"auth.Permission\", models.CASCADE, related_name=\"foobar\")\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.OneToOneField\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.Permission\", \"related_name\": \"foobar\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.permission\", \"related_name\": \"foobar\", \"on_delete\": models.CASCADE})\n         # Test related_query_name\n         field = models.OneToOneField(\"auth.Permission\", models.CASCADE, related_query_name=\"foobar\")\n         name, path, args, kwargs = field.deconstruct()\n@@ -322,7 +322,7 @@ def test_one_to_one(self):\n         self.assertEqual(args, [])\n         self.assertEqual(\n             kwargs,\n-            {\"to\": \"auth.Permission\", \"related_query_name\": \"foobar\", \"on_delete\": models.CASCADE}\n+            {\"to\": \"auth.permission\", \"related_query_name\": \"foobar\", \"on_delete\": models.CASCADE}\n         )\n         # Test limit_choices_to\n         field = models.OneToOneField(\"auth.Permission\", models.CASCADE, limit_choices_to={'foo': 'bar'})\n@@ -331,14 +331,14 @@ def test_one_to_one(self):\n         self.assertEqual(args, [])\n         self.assertEqual(\n             kwargs,\n-            {\"to\": \"auth.Permission\", \"limit_choices_to\": {'foo': 'bar'}, \"on_delete\": models.CASCADE}\n+            {\"to\": \"auth.permission\", \"limit_choices_to\": {'foo': 'bar'}, \"on_delete\": models.CASCADE}\n         )\n         # Test unique\n         field = models.OneToOneField(\"auth.Permission\", models.CASCADE, unique=True)\n         name, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.OneToOneField\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"to\": \"auth.Permission\", \"on_delete\": models.CASCADE})\n+        self.assertEqual(kwargs, {\"to\": \"auth.permission\", \"on_delete\": models.CASCADE})\n \n     def test_image_field(self):\n         field = models.ImageField(upload_to=\"foo/barness\", width_field=\"width\", height_field=\"height\")\ndiff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1014,7 +1014,7 @@ def test_rename_related_field_preserved_db_column(self):\n             'renamed_foo',\n             'django.db.models.ForeignKey',\n             [],\n-            {'to': 'app.Foo', 'on_delete': models.CASCADE, 'db_column': 'foo_id'},\n+            {'to': 'app.foo', 'on_delete': models.CASCADE, 'db_column': 'foo_id'},\n         ))\n \n     def test_rename_model(self):\n@@ -1032,6 +1032,22 @@ def test_rename_model(self):\n         # no AlterField for the related field.\n         self.assertNumberMigrations(changes, 'otherapp', 0)\n \n+    def test_rename_model_case(self):\n+        \"\"\"\n+        Model name is case-insensitive. Changing case doesn't lead to any\n+        autodetected operations.\n+        \"\"\"\n+        author_renamed = ModelState('testapp', 'author', [\n+            ('id', models.AutoField(primary_key=True)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty, self.book],\n+            [author_renamed, self.book],\n+            questioner=MigrationQuestioner({'ask_rename_model': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 0)\n+        self.assertNumberMigrations(changes, 'otherapp', 0)\n+\n     def test_rename_m2m_through_model(self):\n         \"\"\"\n         Tests autodetection of renamed models that are used in M2M relations as\n",
  "problem_statement": "makemigrations does not detect/like model name case changes\nDescription\n\t\nStarting with \nclass Evidence(models.Model):\n\trubrictype = models.ForeignKey('Rubrictype')\nclass Rubrictype(models.Model):\n\ttype_code = models.CharField(max_length=1)\nMake the initial migration:\n$ ./manage.py makemigrations\nMigrations for 'as_migrations':\n 0001_initial.py:\n\t- Create model Evidence\n\t- Create model Rubrictype\n\t- Add field rubrictype to evidence\nChange the name of Rubrictype to RubricType:\nclass Evidence(models.Model):\n\trubrictype = models.ForeignKey('RubricType')\nclass RubricType(models.Model):\n\ttype_code = models.CharField(max_length=1)\nGenerate the migration:\n$ ./manage.py makemigrations\nMigrations for 'as_migrations':\n 0002_auto_20141125_1930.py:\n\t- Alter field rubrictype on evidence\nDjango does not detect the name change on the RubricType model itself. No confirmation is requested for the name change and no operation is generated. The problem is that any subsequent makemigrations run will generate the same operation ad infinitum:\n$ ./manage.py makemigrations\nMigrations for 'as_migrations':\n 0003_auto_20141125_1930.py:\n\t- Alter field rubrictype on evidence\nIf instead the name is changed to RubricXype:\nclass Evidence(models.Model):\n\trubrictype = models.ForeignKey('RubricXype')\nclass RubricXype(models.Model):\n\ttype_code = models.CharField(max_length=1)\nthe corresponding migration becomes\n$ ./manage.py makemigrations\nDid you rename the as_migrations.Rubrictype model to RubricXype? [y/N] y\nMigrations for 'as_migrations':\n 0002_auto_20141125_1956.py:\n\t- Rename model Rubrictype to RubricXype\nThis migration generates a RenameModel operation only and any subsequent makemigrations runs will properly report \"No changes detected\". So it appears the change detector does not pick up on capitalization changes in model names.\nTrying to work around by adding a \nmigrations.RenameModel(\n\told_name='Rubrictype',\n\tnew_name='RubricType',\n)\nto the auto generated operations results in a ValueError exception when makemigrations is run again:\n$ ./manage.py makemigrations\nTraceback (most recent call last):\n File \"manage.py\", line 10, in <module>\n\texecute_from_command_line(sys.argv)\n File \"/home/svencoenye/developer/django_test/lib/python2.7/site-packages/django/core/management/__init__.py\", line 385, in execute_from_command_line\n\tutility.execute()\n File \"/home/svencoenye/developer/django_test/lib/python2.7/site-packages/django/core/management/__init__.py\", line 377, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/home/svencoenye/developer/django_test/lib/python2.7/site-packages/django/core/management/base.py\", line 288, in run_from_argv\n\tself.execute(*args, **options.__dict__)\n File \"/home/svencoenye/developer/django_test/lib/python2.7/site-packages/django/core/management/base.py\", line 338, in execute\n\toutput = self.handle(*args, **options)\n File \"/home/svencoenye/developer/django_test/lib/python2.7/site-packages/django/core/management/commands/makemigrations.py\", line 111, in handle\n\tconvert_apps=app_labels or None,\n File \"/home/svencoenye/developer/django_test/lib/python2.7/site-packages/django/db/migrations/autodetector.py\", line 42, in changes\n\tchanges = self._detect_changes(convert_apps, graph)\n File \"/home/svencoenye/developer/django_test/lib/python2.7/site-packages/django/db/migrations/autodetector.py\", line 109, in _detect_changes\n\tself.old_apps = self.from_state.render(ignore_swappable=True)\n File \"/home/svencoenye/developer/django_test/lib/python2.7/site-packages/django/db/migrations/state.py\", line 89, in render\n\tmodel=lookup_model,\nValueError: Lookup failed for model referenced by field as_migrations.Evidence.rubrictype: as_migrations.RubricType\nThe sequence of the operations does not matter. Neither does substituting the RenameModel operation for the AlterField operation.\n(Looking at the next to last entry in the traceback, the autodetector seems to be looking for the new name in the old_apps state?)\nIt is possible, however, to go the long way around and use two separate migrations: Rubrictype -> RubricXype. RubricXype -> RubricType works without getting the migration state stuck and does not throw an exception.\n",
  "hints_text": "Thank you for the report. The problem you ran into relates to the fact that the migration internally don't care about case sensitivity of model names (ProjectState.models has a dictionary whose keys are (app_label, model_name) where the latter is lower cased). Your work around seems to be valid. I'd need more info to figure out why adding the RenameModel manually fails.\nSorry for the delayed response. I did not realize my e-mail address was missing from the preferences. Is there anything I can do to provide more info on the RenameModel failure?\nSee #25429 for a probable duplicate (but please check when this is fixed and reopen it if not).\n#26752 seems to be another symptom (closed as duplicate, but reopen if not).\nThis is a duplicate of #27297",
  "created_at": "2020-01-13T16:26:23Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_foreign_key (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_foreign_key_swapped (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_one_to_one (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_rename_model_case (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\"]",
  "PASS_TO_PASS": "[\"test_auto_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_big_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_binary_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_boolean_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_char_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_char_field_choices (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_csi_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_date_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_datetime_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_db_tablespace (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_decimal_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_decimal_field_0_decimal_places (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_email_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_file_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_file_path_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_float_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_generic_ip_address_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_image_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_ip_address_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_many_to_many_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_many_to_many_field_swapped (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_name (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_null_boolean_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_positive_big_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_positive_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_positive_small_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_slug_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_small_integer_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_text_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_time_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_url_field (field_deconstruction.tests.FieldDeconstructionTests)\", \"test_add_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of new constraints.\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new fields.\", \"test_add_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"#22030 - Adding a field with a default should work.\", \"Tests index/unique_together detection.\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"test_add_model_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_non_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"test_alter_db_table_no_changes (migrations.test_autodetector.AutodetectorTests)\", \"Tests detection for removing db_table in model's options.\", \"test_alter_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_oneoff_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_with_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_without_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_fk_before_model_deletion (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_model_managers (migrations.test_autodetector.AutodetectorTests)\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"Tests auto-naming of migrations for graph matching.\", \"Bases of other models come first.\", \"test_circular_dependency_mixed_addcreate (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable2 (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable_self (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_concrete_field_changed_to_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"test_create_with_through_model (migrations.test_autodetector.AutodetectorTests)\", \"test_custom_deconstructible (migrations.test_autodetector.AutodetectorTests)\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"test_deconstruct_type (migrations.test_autodetector.AutodetectorTests)\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_empty_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_first_dependency (migrations.test_autodetector.AutodetectorTests)\", \"Having a ForeignKey automatically adds a dependency.\", \"test_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"test_foo_together_no_changes (migrations.test_autodetector.AutodetectorTests)\", \"test_foo_together_ordering (migrations.test_autodetector.AutodetectorTests)\", \"Tests unique_together and field removal detection & ordering\", \"test_foreign_key_removed_before_target_model (migrations.test_autodetector.AutodetectorTests)\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_keep_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)\", \"test_last_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_m2m_w_through_multistep_remove (migrations.test_autodetector.AutodetectorTests)\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_changed_to_concrete_field (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_removed_before_through_model (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_removed_before_through_model_2 (migrations.test_autodetector.AutodetectorTests)\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)\", \"#23956 - Inheriting models doesn't move *_ptr fields into AddField operations.\", \"test_nested_deconstructible_objects (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new models.\", \"test_non_circular_foreignkey_dependency_removal (migrations.test_autodetector.AutodetectorTests)\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_pk_fk_included (migrations.test_autodetector.AutodetectorTests)\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"test_proxy_custom_pk (migrations.test_autodetector.AutodetectorTests)\", \"FK dependencies still work on proxy models.\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_remove_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"test_remove_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"test_rename_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_m2m_through_model (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of renamed models.\", \"test_rename_model_reverse_relation_dependencies (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_with_fks_in_different_position (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_with_renamed_rel_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests)\", \"test_replace_string_with_foreignkey (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_circular_fk_dependency_with_unique_together_and_indexes (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_no_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"Setting order_with_respect_to adds a field.\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)\", \"Swappable models get their CreateModel first.\", \"test_trim_apps (migrations.test_autodetector.AutodetectorTests)\", \"The autodetector correctly deals with managed models.\", \"test_unmanaged_custom_pk (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.622008",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}