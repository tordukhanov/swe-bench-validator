{
  "repo": "django/django",
  "instance_id": "django__django-15154",
  "base_commit": "d3a64bea51676fcf8a0ae593cf7b103939e12c87",
  "patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -866,7 +866,11 @@ def total_unique_constraints(self):\n         return [\n             constraint\n             for constraint in self.constraints\n-            if isinstance(constraint, UniqueConstraint) and constraint.condition is None\n+            if (\n+                isinstance(constraint, UniqueConstraint) and\n+                constraint.condition is None and\n+                not constraint.contains_expressions\n+            )\n         ]\n \n     @cached_property\n",
  "test_patch": "diff --git a/tests/validation/models.py b/tests/validation/models.py\n--- a/tests/validation/models.py\n+++ b/tests/validation/models.py\n@@ -2,6 +2,7 @@\n \n from django.core.exceptions import ValidationError\n from django.db import models\n+from django.db.models.functions import Lower\n \n \n def validate_answer_to_universe(value):\n@@ -125,3 +126,13 @@ class GenericIPAddressTestModel(models.Model):\n \n class GenericIPAddrUnpackUniqueTest(models.Model):\n     generic_v4unpack_ip = models.GenericIPAddressField(null=True, blank=True, unique=True, unpack_ipv4=True)\n+\n+\n+class UniqueFuncConstraintModel(models.Model):\n+    field = models.CharField(max_length=255)\n+\n+    class Meta:\n+        required_db_features = {'supports_expression_indexes'}\n+        constraints = [\n+            models.UniqueConstraint(Lower('field'), name='func_lower_field_uq'),\n+        ]\ndiff --git a/tests/validation/test_unique.py b/tests/validation/test_unique.py\n--- a/tests/validation/test_unique.py\n+++ b/tests/validation/test_unique.py\n@@ -8,7 +8,8 @@\n \n from .models import (\n     CustomPKModel, FlexibleDatePost, ModelToValidate, Post, UniqueErrorsModel,\n-    UniqueFieldsModel, UniqueForDateModel, UniqueTogetherModel,\n+    UniqueFieldsModel, UniqueForDateModel, UniqueFuncConstraintModel,\n+    UniqueTogetherModel,\n )\n \n \n@@ -86,6 +87,13 @@ def test_unique_for_date_exclusion(self):\n         ), m._get_unique_checks(exclude='start_date')\n         )\n \n+    def test_func_unique_constraint_ignored(self):\n+        m = UniqueFuncConstraintModel()\n+        self.assertEqual(\n+            m._get_unique_checks(),\n+            ([(UniqueFuncConstraintModel, ('id',))], []),\n+        )\n+\n \n class PerformUniqueChecksTest(TestCase):\n     def test_primary_key_unique_check_not_performed_when_adding_and_pk_not_specified(self):\n@@ -108,6 +116,10 @@ def test_primary_key_unique_check_not_performed_when_not_adding(self):\n             mtv = ModelToValidate(number=10, name='Some Name')\n             mtv.full_clean()\n \n+    def test_func_unique_check_not_performed(self):\n+        with self.assertNumQueries(0):\n+            UniqueFuncConstraintModel(field='some name').full_clean()\n+\n     def test_unique_for_date(self):\n         Post.objects.create(\n             title=\"Django 1.0 is released\", slug=\"Django 1.0\",\n",
  "problem_statement": "Detecting uniqueness doesn't work for models with functional unique constraints.\nDescription\n\t\nWhen creating a new object from Django Administration site, I'm getting an error \"Tag with this already exists.\". (Tag is my model name)\nI'm using on this model the new functional unique constraints introducted in Django 4.0 (​https://docs.djangoproject.com/en/dev/ref/models/constraints/#django.db.models.UniqueConstraint).\nI suppose this is related to the contraints put on the model. However, creating a Tag object with code - e.g. Tag.objects.create(...) - works fine. It only fails in Django admin. I'm not sure if it's a bug or misunderstanding/misconfiguration on my side?\nThis is my model:\nclass Tag(models.Model):\n\t\"\"\"Basic tag model.\"\"\"\n\t# When using get_or_create, we need to pass tag name as a default value, like this:\n\t# Tag.objects.get_or_create(defaults={'name': tag}, name__iexact=tag, user=request.user)\n\tuser = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name=_('user'))\n\tname = models.CharField(max_length=50, db_index=False, verbose_name=_('name'),\n\t\t\t\t\t\t\tblank=False, # It's the default behavior, but let's be explicit\n\t\t\t\t\t\t\tvalidators=[RegexValidator(regex=r'[A-z0-9À-ž\\s]+',\n\t\t\t\t\t\t\t\t\t\t\t\t\t message='This field accepts only letters, digits and space.')])\n\tslug = models.SlugField(max_length=50, verbose_name=_('slug'))\n\tclass Meta:\n\t\tordering = ['name']\n\t\t# Make sure tag name:\n\t\t# - are unique per user\n\t\t# - are case insensitive (prevent adding \"test\" if \"Test\" already exists)\n\t\t# - aren't empty\n\t\tconstraints = [models.UniqueConstraint(fields=['user', 'name'],\n\t\t\t\t\t\t\t\t\t\t\t name='%(app_label)s_%(class)s_name_unique_per_user'),\n\t\t\t\t\t models.UniqueConstraint(Lower('name'),\n\t\t\t\t\t\t\t\t\t\t\t name='%(app_label)s_%(class)s_name_case_insensitive'),\n\t\t\t\t\t models.CheckConstraint(check=models.Q(name__length__gt=0),\n\t\t\t\t\t\t\t\t\t\t\t name='%(app_label)s_%(class)s_name_not_empty')]\n(snip)\nThis is the admin configuration:\n@admin.register(Tag)\nclass TagAdmin(admin.ModelAdmin):\n\tlist_display = ('pk', 'user', 'name', 'slug')\n\tlist_display_links = ['pk']\n\tfields = ('user', 'name',)\n\tlist_filter = ('user__email',)\n\tsearch_fields = ('name',)\n",
  "hints_text": "See TicketClosingReasons/UseSupportChannels for ways to get help debugging the issue. Feel free to reopen if you confirm Django is at fault.\nNote you should also be able to test outside the admin with tag = Tag(...); tag.full_clean().\nThank you Claude for pointing this out. I was testing outside of admin using tag = Tag(...); tag.save(), which works. But following your example, when I run tag.full_clean(), it fails with the following error: Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"/usr/local/lib/python3.9/site-packages/django/db/models/base.py\", line 1261, in full_clean raise ValidationError(errors) django.core.exceptions.ValidationError: {'__all__': ['Tag with this already exists.']} The fact that there is a missing word between 'this' and 'already' is weird. I have narrowed down the constraint causing the issue (when I remove it, it works fine). It's this one: models.UniqueConstraint(Lower('name'), name='%(app_label)s_%(class)s_name_case_insensitive'), The ability to use positional argument *expressions in UniqueConstraint is a new feature from Django 4.0 ​https://docs.djangoproject.com/en/4.0/ref/models/constraints/#expressions I'm not expert enough to understand why full_clean()fails. We'll see when 4.0 is released if I'm the only one facing this issue.\nTest code\nI can at least confirm an issue with the error message. As the index has no direct field name, the pattern A <object> with this <field_name> already exists can not work. I attached my code used for testing. In this case, the unique_error_message should probably produce another formulation a bit more generic, like \"%(model_name)s is not unique in the database\". I'm not sure if this is release blocker or not. Hervé, your report suggest an issue also with the unicity check itself, I was not able to reproduce that.\nI was able to confirm the issue with detecting uniqueness. It's a bug in the new feature added in 3aa545281e0c0f9fac93753e3769df9e0334dbaa.\n​Model._get_unique_checks() and related methods don't handle unique constraints with expressions, because _get_unique_checks() returns a constraint without fields which is violated when there are any rows. I can try to solve it on Monday, unless someone does on the weekend.",
  "created_at": "2021-12-04T20:28:39Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_func_unique_constraint_ignored (validation.test_unique.GetUniqueCheckTests)\", \"test_func_unique_check_not_performed (validation.test_unique.PerformUniqueChecksTest)\"]",
  "PASS_TO_PASS": "[\"test_primary_key_is_considered_unique (validation.test_unique.GetUniqueCheckTests)\", \"test_unique_fields_get_collected (validation.test_unique.GetUniqueCheckTests)\", \"test_unique_for_date_exclusion (validation.test_unique.GetUniqueCheckTests)\", \"test_unique_for_date_gets_picked_up (validation.test_unique.GetUniqueCheckTests)\", \"test_unique_together_gets_picked_up_and_converted_to_tuple (validation.test_unique.GetUniqueCheckTests)\", \"Test the Meta.unique_together normalization with different sorts of\", \"test_primary_key_unique_check_not_performed_when_adding_and_pk_not_specified (validation.test_unique.PerformUniqueChecksTest)\", \"test_primary_key_unique_check_not_performed_when_not_adding (validation.test_unique.PerformUniqueChecksTest)\", \"test_primary_key_unique_check_performed_when_adding_and_pk_specified (validation.test_unique.PerformUniqueChecksTest)\", \"test_unique_errors (validation.test_unique.PerformUniqueChecksTest)\", \"test_unique_for_date (validation.test_unique.PerformUniqueChecksTest)\", \"unique_for_date/year/month checks shouldn't trigger when the\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.719959",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}