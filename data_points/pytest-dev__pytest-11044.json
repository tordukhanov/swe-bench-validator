{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-11044",
  "base_commit": "4f3f36c396b52f8398bc4734ff0c00c57cf1fed1",
  "patch": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -1382,6 +1382,15 @@ def parse(self, args: List[str], addopts: bool = True) -> None:\n                         args = []\n                         for path in testpaths:\n                             args.extend(sorted(glob.iglob(path, recursive=True)))\n+                        if testpaths and not args:\n+                            warning_text = (\n+                                \"No files were found in testpaths; \"\n+                                \"consider removing or adjusting your testpaths configuration. \"\n+                                \"Searching recursively from the current directory instead.\"\n+                            )\n+                            self.issue_config_time_warning(\n+                                PytestConfigWarning(warning_text), stacklevel=3\n+                            )\n                 if not args:\n                     source = Config.ArgsSource.INCOVATION_DIR\n                     args = [str(self.invocation_params.dir)]\n",
  "test_patch": "diff --git a/testing/test_warnings.py b/testing/test_warnings.py\n--- a/testing/test_warnings.py\n+++ b/testing/test_warnings.py\n@@ -777,6 +777,20 @@ def test_it():\n         )\n \n \n+def test_warning_on_testpaths_not_found(pytester: Pytester) -> None:\n+    # Check for warning when testpaths set, but not found by glob\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        testpaths = absent\n+        \"\"\"\n+    )\n+    result = pytester.runpytest()\n+    result.stdout.fnmatch_lines(\n+        [\"*ConfigWarning: No files were found in testpaths*\", \"*1 warning*\"]\n+    )\n+\n+\n def test_resource_warning(pytester: Pytester, monkeypatch: pytest.MonkeyPatch) -> None:\n     # Some platforms (notably PyPy) don't have tracemalloc.\n     # We choose to explicitly not skip this in case tracemalloc is not\n",
  "problem_statement": "Issue warning/error if 'testpaths' does not match any files/folders\nWe should issue a warning (or even an error?) if  `testpaths` does not match any files or folders.\r\n\r\nI think an error is reasonable, even if it might break some incorrectly-configured suite out there.\r\n\r\n----\r\n\r\n_Originally posted by @nicoddemus in https://github.com/pytest-dev/pytest/issues/11006#issuecomment-1551342447_\r\n\r\nThis is not really a bug, but an intended (albeit questionable) behavior: \r\n\r\nThe values of `testpaths` are actually globs, so globbing for `tests` in the root yields nothing. Given it finds nothing, pytest will behave as if called from the command-line without any parameters, which makes it search recursively from the current directory looking for `python_files` to collect.\r\n\r\nhttps://github.com/pytest-dev/pytest/blob/739408b958f8e5a24de81e17e4cc2d4f34d93991/src/_pytest/config/__init__.py#L1382-L1384\r\n\r\nIf you create the `tests` directory, then pytest will correctly search in that directory only.\r\n\r\nI agree those 2 facts are surprising:\r\n\r\n1. The fact that `testpaths` is a glob. This is [documented](https://docs.pytest.org/en/stable/reference/reference.html#confval-testpaths) but easy to overlook, probably we should add a glob to the example there.\r\n2. pytest silently not finding anything, and then proceeding as usual.\r\n\r\nI don't think we can do anything more for 1, but for 2 seems like we should at least emit a warning if `testpaths` is defined but does not match anything.\r\n\r\n\r\n            \n",
  "hints_text": "i propose start with warning, elevate to error in 8.x\nAgree, sounds good. :+1: \nHello!\r\n\r\nAdding a warning for this, will submit a PR shortly",
  "created_at": "2023-05-27T23:26:11Z",
  "version": "7.4",
  "FAIL_TO_PASS": "[\"testing/test_warnings.py::test_warning_on_testpaths_not_found\"]",
  "PASS_TO_PASS": "[\"testing/test_warnings.py::test_warnings_checker_twice\", \"testing/test_warnings.py::test_normal_flow\", \"testing/test_warnings.py::test_setup_teardown_warnings\", \"testing/test_warnings.py::test_ignore[cmdline]\", \"testing/test_warnings.py::test_ignore[ini]\", \"testing/test_warnings.py::test_unicode\", \"testing/test_warnings.py::test_works_with_filterwarnings\", \"testing/test_warnings.py::test_filterwarnings_mark[ini]\", \"testing/test_warnings.py::test_filterwarnings_mark[cmdline]\", \"testing/test_warnings.py::test_non_string_warning_argument\", \"testing/test_warnings.py::test_filterwarnings_mark_registration\", \"testing/test_warnings.py::test_warning_recorded_hook\", \"testing/test_warnings.py::test_collection_warnings\", \"testing/test_warnings.py::test_mark_regex_escape\", \"testing/test_warnings.py::test_hide_pytest_internal_warnings[no]\", \"testing/test_warnings.py::test_hide_pytest_internal_warnings[ini]\", \"testing/test_warnings.py::test_hide_pytest_internal_warnings[cmdline]\", \"testing/test_warnings.py::test_option_precedence_cmdline_over_ini[True]\", \"testing/test_warnings.py::test_option_precedence_cmdline_over_ini[False]\", \"testing/test_warnings.py::test_option_precedence_mark\", \"testing/test_warnings.py::TestAssertionWarnings::test_tuple_warning\", \"testing/test_warnings.py::test_group_warnings_by_message\", \"testing/test_warnings.py::test_group_warnings_by_message_summary\", \"testing/test_warnings.py::test_pytest_configure_warning\", \"testing/test_warnings.py::TestStackLevel::test_issue4445_rewrite\", \"testing/test_warnings.py::TestStackLevel::test_issue4445_preparse\", \"testing/test_warnings.py::TestStackLevel::test_conftest_warning_captured\", \"testing/test_warnings.py::TestStackLevel::test_issue4445_import_plugin\", \"testing/test_warnings.py::test_resource_warning\", \"testing/test_warnings.py::test_as_errors[cmdline]\", \"testing/test_warnings.py::test_as_errors[ini]\", \"testing/test_warnings.py::TestDeprecationWarningsByDefault::test_shown_by_default[True]\", \"testing/test_warnings.py::TestDeprecationWarningsByDefault::test_shown_by_default[False]\", \"testing/test_warnings.py::TestDeprecationWarningsByDefault::test_hidden_by_ini\", \"testing/test_warnings.py::TestDeprecationWarningsByDefault::test_hidden_by_mark\", \"testing/test_warnings.py::TestDeprecationWarningsByDefault::test_hidden_by_cmdline\", \"testing/test_warnings.py::TestDeprecationWarningsByDefault::test_hidden_by_system\", \"testing/test_warnings.py::TestStackLevel::test_issue4445_issue5928_mark_generator\"]",
  "environment_setup_commit": "797b924fc44189d0b9c2ad905410f0bd89461ab7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.923888",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}