{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14396",
  "base_commit": "f35ad6411f86a15dd78db39c29d1e5291f66f9b5",
  "patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -405,7 +405,7 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_realfield = re.compile(r\"^(R|RR)(_(\\d+))?$\")\n     _re_complexfield = re.compile(r\"^(C|CC)(_(\\d+))?$\")\n     _re_finitefield = re.compile(r\"^(FF|GF)\\((\\d+)\\)$\")\n-    _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")\n+    _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ|R|RR|C|CC)\\[(.+)\\]$\")\n     _re_fraction = re.compile(r\"^(Z|ZZ|Q|QQ)\\((.+)\\)$\")\n     _re_algebraic = re.compile(r\"^(Q|QQ)\\<(.+)\\>$\")\n \n@@ -459,8 +459,12 @@ def preprocess(cls, domain):\n \n                 if ground in ['Z', 'ZZ']:\n                     return sympy.polys.domains.ZZ.poly_ring(*gens)\n-                else:\n+                elif ground in ['Q', 'QQ']:\n                     return sympy.polys.domains.QQ.poly_ring(*gens)\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                else:\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n \n             r = cls._re_fraction.match(domain)\n \n",
  "test_patch": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -6,7 +6,7 @@\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -176,15 +176,23 @@ def test_Domain_preprocess():\n \n     assert Domain.preprocess('Z[x]') == ZZ[x]\n     assert Domain.preprocess('Q[x]') == QQ[x]\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n \n     assert Domain.preprocess('ZZ[x]') == ZZ[x]\n     assert Domain.preprocess('QQ[x]') == QQ[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n \n     assert Domain.preprocess('Z[x,y]') == ZZ[x, y]\n     assert Domain.preprocess('Q[x,y]') == QQ[x, y]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n \n     assert Domain.preprocess('ZZ[x,y]') == ZZ[x, y]\n     assert Domain.preprocess('QQ[x,y]') == QQ[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n \n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n",
  "problem_statement": "Poly(domain='RR[y,z]') doesn't work\n``` py\nIn [14]: Poly(1.2*x*y*z, x)\nOut[14]: Poly(1.2*y*z*x, x, domain='RR[y,z]')\n\nIn [15]: Poly(1.2*x*y*z, x, domain='RR[y,z]')\n---------------------------------------------------------------------------\nOptionError                               Traceback (most recent call last)\n<ipython-input-15-d83389519ae1> in <module>()\n----> 1 Poly(1.2*x*y*z, x, domain='RR[y,z]')\n\n/Users/aaronmeurer/Documents/Python/sympy/sympy-scratch/sympy/polys/polytools.py in __new__(cls, rep, *gens, **args)\n     69     def __new__(cls, rep, *gens, **args):\n     70         \"\"\"Create a new polynomial instance out of something useful. \"\"\"\n---> 71         opt = options.build_options(gens, args)\n     72\n     73         if 'order' in opt:\n\n/Users/aaronmeurer/Documents/Python/sympy/sympy-scratch/sympy/polys/polyoptions.py in build_options(gens, args)\n    718\n    719     if len(args) != 1 or 'opt' not in args or gens:\n--> 720         return Options(gens, args)\n    721     else:\n    722         return args['opt']\n\n/Users/aaronmeurer/Documents/Python/sympy/sympy-scratch/sympy/polys/polyoptions.py in __init__(self, gens, args, flags, strict)\n    151                     self[option] = cls.preprocess(value)\n    152\n--> 153         preprocess_options(args)\n    154\n    155         for key, value in dict(defaults).items():\n\n/Users/aaronmeurer/Documents/Python/sympy/sympy-scratch/sympy/polys/polyoptions.py in preprocess_options(args)\n    149\n    150                 if value is not None:\n--> 151                     self[option] = cls.preprocess(value)\n    152\n    153         preprocess_options(args)\n\n/Users/aaronmeurer/Documents/Python/sympy/sympy-scratch/sympy/polys/polyoptions.py in preprocess(cls, domain)\n    480                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n    481\n--> 482         raise OptionError('expected a valid domain specification, got %s' % domain)\n    483\n    484     @classmethod\n\nOptionError: expected a valid domain specification, got RR[y,z]\n```\n\nAlso, the wording of error message could be improved\n\n",
  "hints_text": "```\r\nIn [14]: Poly(1.2*x*y*z, x)\r\nOut[14]: Poly(1.2*y*z*x, x, domain='RR[y,z]')\r\n```\r\nI guess this is quite good\r\n\r\nI mean why would we wanna do this\r\n`In [15]: Poly(1.2*x*y*z, x, domain='RR[y,z]')`\r\n\r\nBTW, Is this issue still on?\nIt is still a valid issue. The preprocessing of options should be extended to accept polynomial rings with real coefficients.\nHello, \r\nI would like to have this issue assigned to me. I want to start contributing, and reading the code I think I can fix this as my first issue.\r\n\r\nThanks\n@3nr1c You don't need to have this issue assigned to you; if you have a solution, just send it a PR. Be sure to read [Development workflow](https://github.com/sympy/sympy/wiki/Development-workflow).",
  "created_at": "2018-03-05T19:18:01Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_Domain_preprocess\"]",
  "PASS_TO_PASS": "[\"test_Options_clone\", \"test_Expand_preprocess\", \"test_Expand_postprocess\", \"test_Gens_preprocess\", \"test_Gens_postprocess\", \"test_Wrt_preprocess\", \"test_Wrt_postprocess\", \"test_Sort_preprocess\", \"test_Sort_postprocess\", \"test_Order_preprocess\", \"test_Order_postprocess\", \"test_Field_preprocess\", \"test_Field_postprocess\", \"test_Greedy_preprocess\", \"test_Greedy_postprocess\", \"test_Domain_postprocess\", \"test_Split_preprocess\", \"test_Split_postprocess\", \"test_Gaussian_preprocess\", \"test_Gaussian_postprocess\", \"test_Extension_preprocess\", \"test_Extension_postprocess\", \"test_Modulus_preprocess\", \"test_Modulus_postprocess\", \"test_Symmetric_preprocess\", \"test_Symmetric_postprocess\", \"test_Strict_preprocess\", \"test_Strict_postprocess\", \"test_Auto_preprocess\", \"test_Auto_postprocess\", \"test_Frac_preprocess\", \"test_Frac_postprocess\", \"test_Formal_preprocess\", \"test_Formal_postprocess\", \"test_Polys_preprocess\", \"test_Polys_postprocess\", \"test_Include_preprocess\", \"test_Include_postprocess\", \"test_All_preprocess\", \"test_All_postprocess\", \"test_Gen_postprocess\", \"test_Symbols_preprocess\", \"test_Symbols_postprocess\", \"test_Method_preprocess\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.093931",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}