{
  "repo": "django/django",
  "instance_id": "django__django-16398",
  "base_commit": "48b6108e50abb1b1f8143721bad8bd7e0be4cc89",
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1265,7 +1265,7 @@ def get_related_klass_infos(klass_info, related_klass_infos):\n                 )\n                 get_related_klass_infos(klass_info, next_klass_infos)\n \n-            def local_setter(obj, from_obj):\n+            def local_setter(final_field, obj, from_obj):\n                 # Set a reverse fk object when relation is non-empty.\n                 if from_obj:\n                     final_field.remote_field.set_cached_value(from_obj, obj)\n@@ -1291,7 +1291,7 @@ def remote_setter(name, obj, from_obj):\n                         \"model\": model,\n                         \"field\": final_field,\n                         \"reverse\": True,\n-                        \"local_setter\": local_setter,\n+                        \"local_setter\": partial(local_setter, final_field),\n                         \"remote_setter\": partial(remote_setter, name),\n                         \"from_parent\": from_parent,\n                     }\n",
  "test_patch": "diff --git a/tests/known_related_objects/models.py b/tests/known_related_objects/models.py\n--- a/tests/known_related_objects/models.py\n+++ b/tests/known_related_objects/models.py\n@@ -24,3 +24,6 @@ class Pool(models.Model):\n class PoolStyle(models.Model):\n     name = models.CharField(max_length=30)\n     pool = models.OneToOneField(Pool, models.CASCADE)\n+    another_pool = models.OneToOneField(\n+        Pool, models.CASCADE, null=True, related_name=\"another_style\"\n+    )\ndiff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+from django.db.models import FilteredRelation\n from django.test import TestCase\n \n from .models import Organiser, Pool, PoolStyle, Tournament\n@@ -23,6 +24,9 @@ def setUpTestData(cls):\n         )\n         cls.ps1 = PoolStyle.objects.create(name=\"T1 Pool 2 Style\", pool=cls.p2)\n         cls.ps2 = PoolStyle.objects.create(name=\"T2 Pool 1 Style\", pool=cls.p3)\n+        cls.ps3 = PoolStyle.objects.create(\n+            name=\"T1 Pool 1/3 Style\", pool=cls.p1, another_pool=cls.p3\n+        )\n \n     def test_foreign_key(self):\n         with self.assertNumQueries(2):\n@@ -147,3 +151,16 @@ def test_reverse_one_to_one_multi_prefetch_related(self):\n             pools = list(Pool.objects.prefetch_related(\"poolstyle\").order_by(\"pk\"))\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n+\n+    def test_reverse_fk_select_related_multiple(self):\n+        with self.assertNumQueries(1):\n+            ps = list(\n+                PoolStyle.objects.annotate(\n+                    pool_1=FilteredRelation(\"pool\"),\n+                    pool_2=FilteredRelation(\"another_pool\"),\n+                )\n+                .select_related(\"pool_1\", \"pool_2\")\n+                .order_by(\"-pk\")\n+            )\n+            self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "problem_statement": "QuerySet.select_related() with multiple filtered relations to the OneToOneField sets the last one.\nDescription\n\t\n​https://github.com/django/django/commit/e1ae2b00504ba30481285b2bd767d1ad561bf4be\n​https://github.com/django/django/blob/0bd2c0c9015b53c41394a1c0989afbfd94dc2830/django/db/models/sql/compiler.py#L1290\nshould use partial, just like the remote_setter\n",
  "hints_text": "Replying to zhu: should use partial, just like the remote_setter Why? it doesn't use a name values from the loop. I don't think you've explained the issue.\nReplying to Mariusz Felisiak: Why? it doesn't use a name values from the loop. I don't think you've explained the issue. Ahh, OK, it uses f. Can you provide a regression test?\nReplying to Mariusz Felisiak: Replying to Mariusz Felisiak: Why? it doesn't use a name values from the loop. I don't think you've explained the issue. Ahh, OK, it uses f. Can you provide a regression test? # models.py from django.db import models class Pool(models.Model): name = models.CharField(max_length=30) class AnotherPoolStyle(models.Model): name = models.CharField(max_length=30) pool1 = models.OneToOneField(Pool, models.CASCADE, related_name='style_from_pool1') pool2 = models.OneToOneField(Pool, models.CASCADE, related_name='style_from_pool2') # tests.py from django.test import TestCase from django.db.models import FilteredRelation class Tests(TestCase): @classmethod def setUpTestData(cls): cls.p1 = Pool.objects.create(name=\"pool1\") cls.p2 = Pool.objects.create(name=\"pool2\") cls.ap = AnotherPoolStyle.objects.create( name=\"Another Pool Style\", pool1=cls.p1, pool2=cls.p2, ) def test_filtered_relation_select_related(self): with self.assertNumQueries(1): ps = list(AnotherPoolStyle.objects.annotate( p1=FilteredRelation('pool1'), p2=FilteredRelation('pool2'), ).select_related('p1', 'p2')) self.assertIs(ps[0], ps[0].p1.style_from_pool1) # failed self.assertIs(ps[0], ps[0].p2.style_from_pool2)\nThanks! Would you like to prepare a patch?\nReplying to Mariusz Felisiak: Thanks! Would you like to prepare a patch? diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py index 2b66ab12b4..831ef79269 100644 --- a/django/db/models/sql/compiler.py +++ b/django/db/models/sql/compiler.py @@ -1261,7 +1261,7 @@ class SQLCompiler: ) get_related_klass_infos(klass_info, next_klass_infos) - def local_setter(obj, from_obj): + def local_setter(f, obj, from_obj): # Set a reverse fk object when relation is non-empty. if from_obj: f.remote_field.set_cached_value(from_obj, obj) @@ -1287,7 +1287,7 @@ class SQLCompiler: \"model\": model, \"field\": f, \"reverse\": True, - \"local_setter\": local_setter, + \"local_setter\": partial(local_setter, f), \"remote_setter\": partial(remote_setter, name), \"from_parent\": from_parent, }\nThanks, can you prepare PR (with patch and tests) and ​submit it via GitHub? (docs changes are not required.)\nReplying to Mariusz Felisiak: Thanks, can you prepare PR (with patch and tests) and ​submit it via GitHub? (docs changes are not required.) ​https://github.com/django/django/pull/16398 done.\nIn e07e8358: Refs #34226 -- Renamed local field variables in SQLCompiler.get_related_selections() to avoid redefinition.",
  "created_at": "2022-12-23T12:14:56Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_reverse_fk_select_related_multiple (known_related_objects.tests.ExistingRelatedInstancesTests)\"]",
  "PASS_TO_PASS": "[\"test_foreign_key (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_foreign_key_multiple_prefetch (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_foreign_key_prefetch_related (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_one_to_one (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_one_to_one_multi_prefetch_related (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_one_to_one_multi_select_related (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_one_to_one_prefetch_related (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_one_to_one_select_related (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_queryset_and (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_queryset_or (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_queryset_or_different_cached_items (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_queryset_or_only_one_with_precache (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_reverse_one_to_one (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_reverse_one_to_one_multi_prefetch_related (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_reverse_one_to_one_multi_select_related (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_reverse_one_to_one_prefetch_related (known_related_objects.tests.ExistingRelatedInstancesTests)\", \"test_reverse_one_to_one_select_related (known_related_objects.tests.ExistingRelatedInstancesTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.757299",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}