{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7597",
  "base_commit": "c13ecd243709d1e210a030be5aa09b7714e35730",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -77,17 +77,19 @@\n                                          ('deprecated', bool)])\n \n \n-def _parse_annotation(annotation: str) -> List[Node]:\n-    \"\"\"Parse type annotation.\"\"\"\n-    def make_xref(text: str) -> addnodes.pending_xref:\n-        if text == 'None':\n-            reftype = 'obj'\n-        else:\n-            reftype = 'class'\n+def type_to_xref(text: str) -> addnodes.pending_xref:\n+    \"\"\"Convert a type string to a cross reference node.\"\"\"\n+    if text == 'None':\n+        reftype = 'obj'\n+    else:\n+        reftype = 'class'\n \n-        return pending_xref('', nodes.Text(text),\n-                            refdomain='py', reftype=reftype, reftarget=text)\n+    return pending_xref('', nodes.Text(text),\n+                        refdomain='py', reftype=reftype, reftarget=text)\n \n+\n+def _parse_annotation(annotation: str) -> List[Node]:\n+    \"\"\"Parse type annotation.\"\"\"\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text(\"%s.%s\" % (unparse(node.value)[0], node.attr))]\n@@ -133,10 +135,10 @@ def unparse(node: ast.AST) -> List[Node]:\n         result = unparse(tree)\n         for i, node in enumerate(result):\n             if isinstance(node, nodes.Text):\n-                result[i] = make_xref(str(node))\n+                result[i] = type_to_xref(str(node))\n         return result\n     except SyntaxError:\n-        return [make_xref(annotation)]\n+        return [type_to_xref(annotation)]\n \n \n def _parse_arglist(arglist: str) -> addnodes.desc_parameterlist:\n@@ -621,7 +623,7 @@ def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]\n \n         typ = self.options.get('type')\n         if typ:\n-            signode += addnodes.desc_annotation(typ, ': ' + typ)\n+            signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), type_to_xref(typ))\n \n         value = self.options.get('value')\n         if value:\n@@ -866,7 +868,7 @@ def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]\n \n         typ = self.options.get('type')\n         if typ:\n-            signode += addnodes.desc_annotation(typ, ': ' + typ)\n+            signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), type_to_xref(typ))\n \n         value = self.options.get('value')\n         if value:\n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -420,7 +420,8 @@ def test_pydata_signature(app):\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n                           [desc, ([desc_signature, ([desc_name, \"version\"],\n-                                                    [desc_annotation, \": int\"],\n+                                                    [desc_annotation, (\": \",\n+                                                                       [pending_xref, \"int\"])],\n                                                     [desc_annotation, \" = 1\"])],\n                                   desc_content)]))\n     assert_node(doctree[1], addnodes.desc, desctype=\"data\",\n@@ -690,7 +691,8 @@ def test_pyattribute(app):\n     assert_node(doctree[1][1][0], addnodes.index,\n                 entries=[('single', 'attr (Class attribute)', 'Class.attr', '', None)])\n     assert_node(doctree[1][1][1], ([desc_signature, ([desc_name, \"attr\"],\n-                                                     [desc_annotation, \": str\"],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"str\"])],\n                                                      [desc_annotation, \" = ''\"])],\n                                    [desc_content, ()]))\n     assert 'Class.attr' in domain.objects\n",
  "problem_statement": "py domain: Change a type annotation for variables to a hyperlink\n**Is your feature request related to a problem? Please describe.**\r\npy domain: Change a type annotation for variables to a hyperlink\r\n\r\n**Describe the solution you'd like**\r\n\r\n`type` option was added to python directives since 2.x. But it has been represented as mere text. It must be useful if it is converted to a hyperlink to the type definition.\r\n```\r\n.. py:data:: foo\r\n   :type: int\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nNo\r\n\r\n**Additional context**\r\nNo\r\n\n",
  "hints_text": "",
  "created_at": "2020-05-02T13:44:52Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pyattribute\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_exceptions_module_is_ignored\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\"]",
  "environment_setup_commit": "5afc77ee27fc01c57165ab260d3a76751f9ddb35",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.044481",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}