{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13286",
  "base_commit": "42136729bb7252803b0b52a8326a33d6e9b1e06a",
  "patch": "diff --git a/sympy/calculus/util.py b/sympy/calculus/util.py\n--- a/sympy/calculus/util.py\n+++ b/sympy/calculus/util.py\n@@ -328,22 +328,66 @@ def periodicity(f, symbol, check=False):\n \n     \"\"\"\n     from sympy import simplify, lcm_list\n-    from sympy.functions.elementary.trigonometric import TrigonometricFunction\n+    from sympy.functions.elementary.complexes import Abs\n+    from sympy.functions.elementary.trigonometric import (\n+        TrigonometricFunction, sin, cos, csc, sec)\n     from sympy.solvers.decompogen import decompogen\n+    from sympy.core.relational import Relational\n+\n+    def _check(orig_f, period):\n+        '''Return the checked period or raise an error.'''\n+        new_f = orig_f.subs(symbol, symbol + period)\n+        if new_f.equals(orig_f):\n+            return period\n+        else:\n+            raise NotImplementedError(filldedent('''\n+                The period of the given function cannot be verified.\n+                When `%s` was replaced with `%s + %s` in `%s`, the result\n+                was `%s` which was not recognized as being the same as\n+                the original function.\n+                So either the period was wrong or the two forms were\n+                not recognized as being equal.\n+                Set check=False to obtain the value.''' %\n+                (symbol, symbol, period, orig_f, new_f)))\n \n     orig_f = f\n     f = simplify(orig_f)\n     period = None\n \n-    if not f.has(symbol):\n+    if symbol not in f.free_symbols:\n         return S.Zero\n \n+    if isinstance(f, Relational):\n+        f = f.lhs - f.rhs\n+\n     if isinstance(f, TrigonometricFunction):\n         try:\n             period = f.period(symbol)\n         except NotImplementedError:\n             pass\n \n+    if isinstance(f, Abs):\n+        arg = f.args[0]\n+        if isinstance(arg, (sec, csc, cos)):\n+            # all but tan and cot might have a\n+            # a period that is half as large\n+            # so recast as sin\n+            arg = sin(arg.args[0])\n+        period = periodicity(arg, symbol)\n+        if period is not None and isinstance(arg, sin):\n+            # the argument of Abs was a trigonometric other than\n+            # cot or tan; test to see if the half-period\n+            # is valid. Abs(arg) has behaviour equivalent to\n+            # orig_f, so use that for test:\n+            orig_f = Abs(arg)\n+            try:\n+                return _check(orig_f, period/2)\n+            except NotImplementedError as err:\n+                if check:\n+                    raise NotImplementedError(err)\n+            # else let new orig_f and period be\n+            # checked below\n+\n     if f.is_Pow:\n         base, expo = f.args\n         base_has_sym = base.has(symbol)\n@@ -388,14 +432,7 @@ def periodicity(f, symbol, check=False):\n \n     if period is not None:\n         if check:\n-            if orig_f.subs(symbol, symbol + period) == orig_f:\n-                return period\n-\n-            else:\n-                raise NotImplementedError(filldedent('''\n-                    The period of the given function cannot be verified.\n-                    Set check=False to obtain the value.'''))\n-\n+            return _check(orig_f, period)\n         return period\n \n     return None\ndiff --git a/sympy/solvers/decompogen.py b/sympy/solvers/decompogen.py\n--- a/sympy/solvers/decompogen.py\n+++ b/sympy/solvers/decompogen.py\n@@ -1,5 +1,7 @@\n-from sympy.core import Function, Pow, sympify\n+from sympy.core import (Function, Pow, sympify, Expr)\n+from sympy.core.relational import Relational\n from sympy.polys import Poly, decompose\n+from sympy.utilities.misc import func_name\n \n \n def decompogen(f, symbol):\n@@ -31,6 +33,11 @@ def decompogen(f, symbol):\n \n     \"\"\"\n     f = sympify(f)\n+    if not isinstance(f, Expr) or isinstance(f, Relational):\n+        raise TypeError('expecting Expr but got: `%s`' % func_name(f))\n+    if symbol not in f.free_symbols:\n+        return [f]\n+\n     result = []\n \n     # ===== Simple Functions ===== #\n",
  "test_patch": "diff --git a/sympy/calculus/tests/test_util.py b/sympy/calculus/tests/test_util.py\n--- a/sympy/calculus/tests/test_util.py\n+++ b/sympy/calculus/tests/test_util.py\n@@ -94,6 +94,14 @@ def test_periodicity():\n     assert periodicity(exp(x)**sin(x), x) is None\n     assert periodicity(sin(x)**y, y) is None\n \n+    assert periodicity(Abs(sin(Abs(sin(x)))),x) == pi\n+    assert all(periodicity(Abs(f(x)),x) == pi for f in (\n+        cos, sin, sec, csc, tan, cot))\n+    assert periodicity(Abs(sin(tan(x))), x) == pi\n+    assert periodicity(Abs(sin(sin(x) + tan(x))), x) == 2*pi\n+    assert periodicity(sin(x) > S.Half, x) is 2*pi\n+\n+    assert periodicity(x > 2, x) is None\n     assert periodicity(x**3 - x**2 + 1, x) is None\n     assert periodicity(Abs(x), x) is None\n     assert periodicity(Abs(x**2 - 1), x) is None\n@@ -105,8 +113,9 @@ def test_periodicity_check():\n \n     assert periodicity(tan(x), x, check=True) == pi\n     assert periodicity(sin(x) + cos(x), x, check=True) == 2*pi\n-    raises(NotImplementedError, lambda: periodicity(sec(x), x, check=True))\n-    raises(NotImplementedError, lambda: periodicity(sin(x*y), x, check=True))\n+    assert periodicity(sec(x), x) == 2*pi\n+    assert periodicity(sin(x*y), x) == 2*pi/abs(y)\n+    assert periodicity(Abs(sec(sec(x))), x) == pi\n \n \n def test_lcim():\ndiff --git a/sympy/solvers/tests/test_decompogen.py b/sympy/solvers/tests/test_decompogen.py\n--- a/sympy/solvers/tests/test_decompogen.py\n+++ b/sympy/solvers/tests/test_decompogen.py\n@@ -1,7 +1,7 @@\n from sympy.solvers.decompogen import decompogen, compogen\n from sympy import sin, cos, sqrt, Abs\n from sympy import symbols\n-from sympy.utilities.pytest import XFAIL\n+from sympy.utilities.pytest import XFAIL, raises\n \n x, y = symbols('x y')\n \n@@ -14,6 +14,9 @@ def test_decompogen():\n     assert decompogen(Abs(cos(x)**2 + 3*cos(x) - 4), x) == [Abs(x), x**2 + 3*x - 4, cos(x)]\n     assert decompogen(sin(x)**2 + sin(x) - sqrt(3)/2, x) == [x**2 + x - sqrt(3)/2, sin(x)]\n     assert decompogen(Abs(cos(y)**2 + 3*cos(x) - 4), x) == [Abs(x), 3*x + cos(y)**2 - 4, cos(x)]\n+    assert decompogen(x, y) == [x]\n+    assert decompogen(1, x) == [1]\n+    raises(TypeError, lambda: decompogen(x < 5, x))\n \n \n def test_decompogen_poly():\n",
  "problem_statement": "periodicity(Abs(sin(x)),x) return 2*pi\nperiodicity(Abs(sin(x)),x) returns 2*pi instead of pi\r\n```\r\n>>> from sympy import *\r\n>>> x=Symbol('x')\r\n>>> periodicity(Abs(sin(x)),x,check=True)\r\n2*pi\r\n>>> periodicity(Abs(sin(x)),x)\r\n2*pi\r\n```\r\n\n#13205 periodicity(x > 2, x) give recursion error and #13207\nIt fixes issue #13205 it will stop any relational Expression from entering into infinite recursion and return None\r\nIt improves the periodicity of absolute trigonometric function issue #13207\n",
  "hints_text": "Can I have this issue ?\nNote by the docstring we are not guaranteed to get the fundamental period. But of course it would be good to improve the answer if possible. \n@souravghosh97 Can you add few tests that could justify your changes. \n@smichr I don't know why this test fails.But the test runs locally\r\n[https://travis-ci.org/sympy/sympy/builds/272842924](https://travis-ci.org/sympy/sympy/builds/272842924)\nSome minor edits including a couple of new tests. Let's see if tests pass this time. As I recall, the error was just a time out.",
  "created_at": "2017-09-09T16:46:34Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_periodicity_check\", \"test_decompogen\"]",
  "PASS_TO_PASS": "[\"test_continuous_domain\", \"test_not_empty_in\", \"test_lcim\", \"test_AccumBounds\", \"test_AccumBounds_mul\", \"test_AccumBounds_div\", \"test_AccumBounds_func\", \"test_AccumBounds_pow\", \"test_comparison_AccumBounds\", \"test_decompogen_poly\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.082383",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}