{
  "repo": "django/django",
  "instance_id": "django__django-16076",
  "base_commit": "cfe3008123ed7c9e3f3a4d51d4a22f9d96634e33",
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1278,10 +1278,6 @@ def build_lookup(self, lookups, lhs, rhs):\n         # supports both transform and lookup for the name.\n         lookup_class = lhs.get_lookup(lookup_name)\n         if not lookup_class:\n-            if lhs.field.is_relation:\n-                raise FieldError(\n-                    \"Related Field got invalid lookup: {}\".format(lookup_name)\n-                )\n             # A lookup wasn't found. Try to interpret the name as a transform\n             # and do an Exact lookup against it.\n             lhs = self.try_transform(lhs, lookup_name)\n@@ -1450,12 +1446,6 @@ def build_filter(\n             can_reuse.update(join_list)\n \n         if join_info.final_field.is_relation:\n-            # No support for transforms for relational fields\n-            num_lookups = len(lookups)\n-            if num_lookups > 1:\n-                raise FieldError(\n-                    \"Related Field got invalid lookup: {}\".format(lookups[0])\n-                )\n             if len(targets) == 1:\n                 col = self._get_col(targets[0], join_info.final_field, alias)\n             else:\n",
  "test_patch": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -786,10 +786,16 @@ def test_unsupported_lookups(self):\n \n     def test_relation_nested_lookup_error(self):\n         # An invalid nested lookup on a related field raises a useful error.\n-        msg = \"Related Field got invalid lookup: editor\"\n+        msg = (\n+            \"Unsupported lookup 'editor' for ForeignKey or join on the field not \"\n+            \"permitted.\"\n+        )\n         with self.assertRaisesMessage(FieldError, msg):\n             Article.objects.filter(author__editor__name=\"James\")\n-        msg = \"Related Field got invalid lookup: foo\"\n+        msg = (\n+            \"Unsupported lookup 'foo' for ForeignKey or join on the field not \"\n+            \"permitted.\"\n+        )\n         with self.assertRaisesMessage(FieldError, msg):\n             Tag.objects.filter(articles__foo=\"bar\")\n \ndiff --git a/tests/queries/models.py b/tests/queries/models.py\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -1,6 +1,8 @@\n \"\"\"\n Various complex queries that have been problematic in the past.\n \"\"\"\n+import datetime\n+\n from django.db import models\n from django.db.models.functions import Now\n \n@@ -64,7 +66,7 @@ def __str__(self):\n \n \n class DateTimePK(models.Model):\n-    date = models.DateTimeField(primary_key=True, auto_now_add=True)\n+    date = models.DateTimeField(primary_key=True, default=datetime.datetime.now)\n \n \n class ExtraInfo(models.Model):\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -7,12 +7,13 @@\n \n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import DEFAULT_DB_ALIAS, connection\n-from django.db.models import Count, Exists, F, Max, OuterRef, Q\n+from django.db.models import CharField, Count, Exists, F, Max, OuterRef, Q\n from django.db.models.expressions import RawSQL\n+from django.db.models.functions import ExtractYear, Length, LTrim\n from django.db.models.sql.constants import LOUTER\n from django.db.models.sql.where import AND, OR, NothingNode, WhereNode\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n-from django.test.utils import CaptureQueriesContext, ignore_warnings\n+from django.test.utils import CaptureQueriesContext, ignore_warnings, register_lookup\n from django.utils.deprecation import RemovedInDjango50Warning\n \n from .models import (\n@@ -391,6 +392,33 @@ def test_order_by_join_unref(self):\n         qs = qs.order_by(\"id\")\n         self.assertNotIn(\"OUTER JOIN\", str(qs.query))\n \n+    def test_filter_by_related_field_transform(self):\n+        extra_old = ExtraInfo.objects.create(\n+            info=\"extra 12\",\n+            date=DateTimePK.objects.create(date=datetime.datetime(2020, 12, 10)),\n+        )\n+        ExtraInfo.objects.create(info=\"extra 11\", date=DateTimePK.objects.create())\n+        a5 = Author.objects.create(name=\"a5\", num=5005, extra=extra_old)\n+\n+        fk_field = ExtraInfo._meta.get_field(\"date\")\n+        with register_lookup(fk_field, ExtractYear):\n+            self.assertSequenceEqual(\n+                ExtraInfo.objects.filter(date__year=2020),\n+                [extra_old],\n+            )\n+            self.assertSequenceEqual(\n+                Author.objects.filter(extra__date__year=2020), [a5]\n+            )\n+\n+    def test_filter_by_related_field_nested_transforms(self):\n+        extra = ExtraInfo.objects.create(info=\" extra\")\n+        a5 = Author.objects.create(name=\"a5\", num=5005, extra=extra)\n+        info_field = ExtraInfo._meta.get_field(\"info\")\n+        with register_lookup(info_field, Length), register_lookup(CharField, LTrim):\n+            self.assertSequenceEqual(\n+                Author.objects.filter(extra__info__ltrim__length=5), [a5]\n+            )\n+\n     def test_get_clears_ordering(self):\n         \"\"\"\n         get() should clear ordering for optimization purposes.\n",
  "problem_statement": "Registering lookups on relation fields should be supported.\nDescription\n\t \n\t\t(last modified by Thomas)\n\t \nHello,\nI have a model, let's call it Parent, with a field called object_id. I have another model, let's call it Child, which has a ForeignKey field called parent_object[_id] pointing to Parent.object_id. I need to do a lookup on Child where the FK starts with a certain character (it's a normalized value so, in the context of my app, it makes sense... also, I didn't design this schema and changing it is not a possibility ATM).\nThe problem is that if I do:\nqs = Child.objects.filter(parent_object_id__startswith='c')\nI get:\ndjango.core.exceptions.FieldError: Related Field got invalid lookup: startswith\nThe only way I could make it work is:\nqs = Child.objects.filter(parent_object__object_id__startswith='c')\nbut it forces a join between the table and the view and that's a no-no in my case (way too costly).\nHere's the MCVE (tested on Python 3.9 + Django 4.0.7 and Python 3.10 + Django 4.1.1):\nimport django\ndjango.setup()\nfrom django.db import models\nclass Parent(models.Model):\n\tclass Meta:\n\t\tapp_label = 'test'\n\tobject_id = models.CharField('Object ID', max_length=20, unique=True)\nclass Child(models.Model):\n\tclass Meta:\n\t\tapp_label = 'test'\n\tparent_object = models.ForeignKey(\n\t\tParent, to_field='object_id', related_name='%(class)s_set', on_delete=models.CASCADE\n\t)\nif __name__ == '__main__':\n\tqs = Child.objects.filter(parent_object_id__startswith='c') # fails with `FieldError: Related Field got invalid lookup: startswith`\n\tqs = Child.objects.filter(parent_object__object_id__startswith='c') # works but forces a costly join\nAnd the error:\nTraceback (most recent call last):\n File \"/opt/src/orm_test.py\", line 26, in <module>\n\tqs = Child.objects.filter(parent_object_id__startswith='c')\n File \"/opt/src/venv/lib/python3.10/site-packages/django/db/models/manager.py\", line 85, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"/opt/src/venv/lib/python3.10/site-packages/django/db/models/query.py\", line 1420, in filter\n\treturn self._filter_or_exclude(False, args, kwargs)\n File \"/opt/src/venv/lib/python3.10/site-packages/django/db/models/query.py\", line 1438, in _filter_or_exclude\n\tclone._filter_or_exclude_inplace(negate, args, kwargs)\n File \"/opt/src/venv/lib/python3.10/site-packages/django/db/models/query.py\", line 1445, in _filter_or_exclude_inplace\n\tself._query.add_q(Q(*args, **kwargs))\n File \"/opt/src/venv/lib/python3.10/site-packages/django/db/models/sql/query.py\", line 1532, in add_q\n\tclause, _ = self._add_q(q_object, self.used_aliases)\n File \"/opt/src/venv/lib/python3.10/site-packages/django/db/models/sql/query.py\", line 1562, in _add_q\n\tchild_clause, needed_inner = self.build_filter(\n File \"/opt/src/venv/lib/python3.10/site-packages/django/db/models/sql/query.py\", line 1478, in build_filter\n\tcondition = self.build_lookup(lookups, col, value)\n File \"/opt/src/venv/lib/python3.10/site-packages/django/db/models/sql/query.py\", line 1292, in build_lookup\n\traise FieldError(\ndjango.core.exceptions.FieldError: Related Field got invalid lookup: startswith\nThanks for your help,\nRegards,\n",
  "hints_text": "Thanks for the report. Django 4.2 (cd1afd553f9c175ebccfc0f50e72b43b9604bd97) allows â€‹registering lookups per field instances, so you will be able to register __startswith for parent_object_id, e.g. parent_field = Child._meta.get_field(\"parent_object_id\") with register_lookup(parent_field, StartsWith): Child.objects.filter(parent_object_id__startswith='c') Duplicate of #29799.\nAlso, Thomas, it makes sense to assume there is a JOIN in the second queryset, but apparently there isn't: >>> print(Child.objects.filter(parent_object__object_id__startswith='c').query) SELECT \"test_child\".\"id\", \"test_child\".\"parent_object_id\" FROM \"test_child\" WHERE \"test_child\".\"parent_object_id\" LIKE c% ESCAPE '\\'\n@Mariusz Felisiak: Thanks for the heads-up, I hadn't found that ticket in my searches. @Alex Morega: Thank you. I should have checked the SQL of my example for the join. I relied on my findings on my existing code base which uses parent_object__object_id__startswith to circumvent the RelatedField lookup problem. I have the join there but it must be coming from somewhere else.\nThis also has similarities with this very old ticket https://code.djangoproject.com/ticket/2331#comment:7 so it's likely that parent_object_id__startswith='c' was actually never supported which is surprising to me.\nI noticed that registering transforms on related fields doesn't work at all as we have â€‹a guard that seems completely unnecessary. A regression test: tests/queries/tests.py diff --git a/tests/queries/tests.py b/tests/queries/tests.py index 1bd72dd8b8..facf0fc421 100644 a b class Queries4Tests(TestCase): 16211621 date_obj, 16221622 ) 16231623 1624 def test_related_transform(self): 1625 from django.db.models.functions import ExtractYear 1626 from django.test.utils import register_lookup 1627 1628 date_obj = DateTimePK.objects.create() 1629 extra_obj = ExtraInfo.objects.create(info=\"extra\", date=date_obj) 1630 fk_field = ExtraInfo._meta.get_field(\"date\") 1631 with register_lookup(fk_field, ExtractYear): 1632 self.assertSequenceEqual( 1633 ExtraInfo.objects.filter(date__year=2022), 1634 [extra_obj], 1635 ) 1636 16241637 def test_ticket10181(self): 16251638 # Avoid raising an EmptyResultSet if an inner query is probably 16261639 # empty (and hence, not executed). We could consider this a release blocker after 10178197d57476f69688d4535e550a1ea3a5eac5 ðŸ¤”.\nI'm not sure I understand the rationale behind making this a release blocker as lookups on related fields were never supported? I remember having to remove this check a while ago when trying to add support for a m2m__exists lookup to work around #10060 â€‹in a feature branch. I think this a limitation we should lift with proper test coverage but I fail to see how it relates to 10178197d57476f69688d4535e550a1ea3a5eac5",
  "created_at": "2022-09-20T11:42:13Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_relation_nested_lookup_error (lookup.tests.LookupTests)\", \"test_filter_by_related_field_transform (queries.tests.Queries1Tests)\"]",
  "PASS_TO_PASS": "[\"Can create an instance of a model with only the PK field (#17056).\\\"\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"test_ticket7371 (queries.tests.CustomPkTests)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"test_datetimes_invalid_field (queries.tests.Queries3Tests)\", \"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"If a queryset is already evaluated, it can still be used as a query arg.\", \"Cloning a queryset does not get out of hand. While complete\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"test_ticket14729 (queries.tests.RawQueriesTests)\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"Subquery table names should be quoted.\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"Generating the query string doesn't alter the query's state\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_invalid_order_by_raw_column_alias (queries.tests.QuerySetExceptionTests)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"test_distinct_exists (queries.tests.ExistsSql)\", \"test_exists (queries.tests.ExistsSql)\", \"test_sliced_distinct_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"test_annotated_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_values_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"Tests QuerySet ORed combining in exclude subquery case.\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_invalid_index (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_ticket8597 (queries.tests.ComparisonTests)\", \"When passing proxy model objects, child objects, or parent objects,\", \"ValueQuerySets are not checked for compatibility with the lookup field.\", \"A ValueError is raised when the incorrect object type is passed to a\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"When a trimmable join is specified in the query (here school__), the\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_col_alias_quoted (queries.tests.Queries6Tests)\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"test_xor_subquery (queries.tests.Queries6Tests)\", \"This should exclude Orders which have some items with status 1\", \"Using exclude(condition) and exclude(Q(condition)) should\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_pickle (queries.tests.ValuesQuerysetTests)\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"Related objects constraints can safely contain sliced subqueries.\", \"Slice a query that has a sliced subquery\", \"Delete queries can safely contain sliced subqueries\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_aggregate_combined_lookup (lookup.tests.LookupQueryingTests)\", \"test_alias (lookup.tests.LookupQueryingTests)\", \"test_annotate (lookup.tests.LookupQueryingTests)\", \"test_annotate_field_greater_than_field (lookup.tests.LookupQueryingTests)\", \"test_annotate_field_greater_than_literal (lookup.tests.LookupQueryingTests)\", \"test_annotate_field_greater_than_value (lookup.tests.LookupQueryingTests)\", \"test_annotate_greater_than_or_equal (lookup.tests.LookupQueryingTests)\", \"test_annotate_greater_than_or_equal_float (lookup.tests.LookupQueryingTests)\", \"test_annotate_less_than_float (lookup.tests.LookupQueryingTests)\", \"test_annotate_literal_greater_than_field (lookup.tests.LookupQueryingTests)\", \"test_annotate_value_greater_than_value (lookup.tests.LookupQueryingTests)\", \"test_combined_annotated_lookups_in_filter (lookup.tests.LookupQueryingTests)\", \"test_combined_annotated_lookups_in_filter_false (lookup.tests.LookupQueryingTests)\", \"test_combined_lookups (lookup.tests.LookupQueryingTests)\", \"test_combined_lookups_in_filter (lookup.tests.LookupQueryingTests)\", \"test_conditional_expression (lookup.tests.LookupQueryingTests)\", \"test_filter_exists_lhs (lookup.tests.LookupQueryingTests)\", \"test_filter_lookup_lhs (lookup.tests.LookupQueryingTests)\", \"test_filter_subquery_lhs (lookup.tests.LookupQueryingTests)\", \"test_filter_wrapped_lookup_lhs (lookup.tests.LookupQueryingTests)\", \"test_isnull_lookup_in_filter (lookup.tests.LookupQueryingTests)\", \"test_lookup_in_filter (lookup.tests.LookupQueryingTests)\", \"test_lookup_in_order_by (lookup.tests.LookupQueryingTests)\", \"test_extra_select_alias_sql_injection (queries.tests.Queries5Tests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_filter_unsaved_object (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_queryset_reuse (queries.tests.Queries5Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_conflicting_aliases_during_combine (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_subquery_aliases (queries.tests.QuerySetBitwiseOperationTests)\", \"test_xor_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_xor_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_xor_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_xor_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_exclude_multivalued_exists (queries.tests.ExcludeTests)\", \"test_exclude_nullable_fields (queries.tests.ExcludeTests)\", \"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_exclude_subquery (queries.tests.ExcludeTests)\", \"test_exclude_unsaved_o2o_object (queries.tests.ExcludeTests)\", \"test_exclude_unsaved_object (queries.tests.ExcludeTests)\", \"test_exclude_with_circular_fk_relation (queries.tests.ExcludeTests)\", \"test_subquery_exclude_outerref (queries.tests.ExcludeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_combine_or_filter_reuse (queries.tests.Queries4Tests)\", \"test_filter_reverse_non_integer_pk (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_chain_date_time_lookups (lookup.tests.LookupTests)\", \"test_count (lookup.tests.LookupTests)\", \"__exact=value is transformed to __isnull=True if Field.get_prep_value()\", \"Lookup.can_use_none_as_rhs=True allows None as a lookup value.\", \"test_error_messages (lookup.tests.LookupTests)\", \"test_escaping (lookup.tests.LookupTests)\", \"test_exact_exists (lookup.tests.LookupTests)\", \"Transforms are used for __exact=None.\", \"test_exact_query_rhs_with_selected_columns (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_limit_one (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_limit_one_offset (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_not_limited_to_one (lookup.tests.LookupTests)\", \"test_exclude (lookup.tests.LookupTests)\", \"test_exists (lookup.tests.LookupTests)\", \"test_get_next_previous_by (lookup.tests.LookupTests)\", \"test_in (lookup.tests.LookupTests)\", \"test_in_bulk (lookup.tests.LookupTests)\", \"test_in_bulk_lots_of_ids (lookup.tests.LookupTests)\", \"test_in_bulk_meta_constraint (lookup.tests.LookupTests)\", \"test_in_bulk_non_unique_field (lookup.tests.LookupTests)\", \"test_in_bulk_non_unique_meta_constaint (lookup.tests.LookupTests)\", \"test_in_bulk_sliced_queryset (lookup.tests.LookupTests)\", \"test_in_bulk_with_field (lookup.tests.LookupTests)\", \"test_in_different_database (lookup.tests.LookupTests)\", \"test_in_empty_list (lookup.tests.LookupTests)\", \"test_in_ignore_none (lookup.tests.LookupTests)\", \"test_in_ignore_none_with_unhashable_items (lookup.tests.LookupTests)\", \"test_in_ignore_solo_none (lookup.tests.LookupTests)\", \"test_in_keeps_value_ordering (lookup.tests.LookupTests)\", \"test_isnull_non_boolean_value (lookup.tests.LookupTests)\", \"test_iterator (lookup.tests.LookupTests)\", \"Genuine field names don't collide with built-in lookup types\", \"test_lookup_date_as_str (lookup.tests.LookupTests)\", \"test_lookup_int_as_str (lookup.tests.LookupTests)\", \"test_lookup_rhs (lookup.tests.LookupTests)\", \"test_nested_outerref_lhs (lookup.tests.LookupTests)\", \"test_none (lookup.tests.LookupTests)\", \"A lookup query containing non-fields raises the proper exception.\", \"test_pattern_lookups_with_substr (lookup.tests.LookupTests)\", \"test_regex (lookup.tests.LookupTests)\", \"test_regex_backreferencing (lookup.tests.LookupTests)\", \"A regex lookup does not trip on non-ASCII characters.\", \"A regex lookup does not fail on non-string fields\", \"A regex lookup does not fail on null/None values\", \"test_unsupported_lookups (lookup.tests.LookupTests)\", \"test_values (lookup.tests.LookupTests)\", \"test_values_list (lookup.tests.LookupTests)\", \"test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)\", \"Valid query should be generated when fields fetched from joined tables\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_excluded_intermediary_m2m_table_joined (queries.tests.Queries1Tests)\", \"test_field_with_filterable (queries.tests.Queries1Tests)\", \"test_filter_by_related_field_nested_transforms (queries.tests.Queries1Tests)\", \"get() should clear ordering for optimization purposes.\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_negate_field (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"This test is related to the above one, testing that there aren't\", \"test_order_by_rawsql (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"Meta.ordering=None works the same as Meta.ordering=[]\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.747137",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}