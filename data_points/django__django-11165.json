{
  "repo": "django/django",
  "instance_id": "django__django-11165",
  "base_commit": "af5ec222ccd24e81f9fec6c34836a4e503e7ccf7",
  "patch": "diff --git a/django/http/request.py b/django/http/request.py\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -369,6 +369,10 @@ def __init__(self, environ):\n                 headers[name] = value\n         super().__init__(headers)\n \n+    def __getitem__(self, key):\n+        \"\"\"Allow header lookup using underscores in place of hyphens.\"\"\"\n+        return super().__getitem__(key.replace('_', '-'))\n+\n     @classmethod\n     def parse_header_name(cls, header):\n         if header.startswith(cls.HTTP_PREFIX):\n",
  "test_patch": "diff --git a/tests/requests/tests.py b/tests/requests/tests.py\n--- a/tests/requests/tests.py\n+++ b/tests/requests/tests.py\n@@ -896,6 +896,7 @@ def test_wsgi_request_headers_getitem(self):\n         request = WSGIRequest(self.ENVIRON)\n         self.assertEqual(request.headers['User-Agent'], 'python-requests/1.2.0')\n         self.assertEqual(request.headers['user-agent'], 'python-requests/1.2.0')\n+        self.assertEqual(request.headers['user_agent'], 'python-requests/1.2.0')\n         self.assertEqual(request.headers['Content-Type'], 'text/html')\n         self.assertEqual(request.headers['Content-Length'], '100')\n \n",
  "problem_statement": "New HTTPRequest.headers not usable in templates because of hyphens\nDescription\n\t\nWith the release of 2.2, I took the opportunity from the new ​HTTPRequest.headers object to clean up old code using e.g. request.META['HTTP_X_REAL_IP'] to request.headers['X-Real-IP'].\nHowever, this new approach does not work with templates, as ​variable lookups cannot use hyphens.\nCould the object contain a parallel set of keys in underscored variables? e.g. request.headers['foo-bar'] is also available in request.headers['foo_bar'] and can be looked up with {{ request.headers.foo_bar }} in a template?\n",
  "hints_text": "Patch added.\nHi Mark. The default answer for the template later is to implement a filter that will let you do the lookup with a string. (​StackOverflow has lots of examples.) Maybe we could allow this by adding a key.replace('_', '-') implementing HttpHeaders.__getitem__()? (Probably worth seeing what a patch there looks like anyway.) (This instead of storing the items twice in the underlying store.)\nNew patch using getitem()\nReplying to Carlton Gibson: Hi Mark. The default answer for the template later is to implement a filter that will let you do the lookup with a string. (​StackOverflow has lots of examples.) Maybe we could allow this by adding a key.replace('_', '-') implementing HttpHeaders.__getitem__()? (Probably worth seeing what a patch there looks like anyway.) (This instead of storing the items twice in the underlying store.) Yes, I found the filter solution. Whilst that's fine for fixing up user-generated problems, this new problem comes out-of-the-box in 2.2. It feels like there should be a solution along with it. Your suggestion is much better than mine. New patch added that allows request.headers['foo-bar'] to be looked up in templates as {{ request.headers.foo_bar }} without inelegant double storage.\nThanks Mark! Are you able to send PR via GitHub?",
  "created_at": "2019-04-03T11:25:53Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_wsgi_request_headers_getitem (requests.tests.RequestHeadersTests)\"]",
  "PASS_TO_PASS": "[\"test_basic (requests.tests.HttpHeadersTests)\", \"test_parse_header_name (requests.tests.HttpHeadersTests)\", \"test_base_request_headers (requests.tests.RequestHeadersTests)\", \"test_wsgi_request_headers (requests.tests.RequestHeadersTests)\", \"test_wsgi_request_headers_get (requests.tests.RequestHeadersTests)\", \"test_absolute_url (requests.tests.BuildAbsoluteURITests)\", \"test_host_retrieval (requests.tests.BuildAbsoluteURITests)\", \"test_request_path_begins_with_two_slashes (requests.tests.BuildAbsoluteURITests)\", \"get_host() makes helpful suggestions if a valid-looking host is not in ALLOWED_HOSTS.\", \"test_get_port (requests.tests.HostValidationTests)\", \"test_get_port_with_x_forwarded_port (requests.tests.HostValidationTests)\", \"test_host_validation_in_debug_mode (requests.tests.HostValidationTests)\", \"test_http_get_host (requests.tests.HostValidationTests)\", \"test_http_get_host_with_x_forwarded_host (requests.tests.HostValidationTests)\", \"test_split_domain_port_removes_trailing_dot (requests.tests.HostValidationTests)\", \"test_FILES_connection_error (requests.tests.RequestsTests)\", \"test_POST_after_body_read (requests.tests.RequestsTests)\", \"test_POST_after_body_read_and_stream_read (requests.tests.RequestsTests)\", \"test_POST_after_body_read_and_stream_read_multipart (requests.tests.RequestsTests)\", \"test_POST_binary_only (requests.tests.RequestsTests)\", \"test_POST_connection_error (requests.tests.RequestsTests)\", \"test_POST_immutable_for_mutipart (requests.tests.RequestsTests)\", \"test_POST_multipart_with_content_length_zero (requests.tests.RequestsTests)\", \"test_alternate_charset_POST (requests.tests.RequestsTests)\", \"test_body_after_POST_multipart_form_data (requests.tests.RequestsTests)\", \"test_body_after_POST_multipart_related (requests.tests.RequestsTests)\", \"test_get_raw_uri (requests.tests.RequestsTests)\", \"test_httprequest (requests.tests.RequestsTests)\", \"test_httprequest_full_path (requests.tests.RequestsTests)\", \"test_httprequest_full_path_with_query_string_and_fragment (requests.tests.RequestsTests)\", \"test_httprequest_repr (requests.tests.RequestsTests)\", \"test_httprequest_repr_invalid_method_and_path (requests.tests.RequestsTests)\", \"test_limited_stream (requests.tests.RequestsTests)\", \"test_multipart_non_ascii_content_type (requests.tests.RequestsTests)\", \"test_multipart_without_boundary (requests.tests.RequestsTests)\", \"test_non_ascii_POST (requests.tests.RequestsTests)\", \"test_read_after_value (requests.tests.RequestsTests)\", \"test_read_by_lines (requests.tests.RequestsTests)\", \"test_set_encoding_clears_GET (requests.tests.RequestsTests)\", \"test_set_encoding_clears_POST (requests.tests.RequestsTests)\", \"test_stream (requests.tests.RequestsTests)\", \"test_value_after_read (requests.tests.RequestsTests)\", \"test_wsgirequest (requests.tests.RequestsTests)\", \"test_wsgirequest_path_info (requests.tests.RequestsTests)\", \"test_wsgirequest_path_with_force_script_name_trailing_slash (requests.tests.RequestsTests)\", \"test_wsgirequest_repr (requests.tests.RequestsTests)\", \"test_wsgirequest_script_url_double_slashes (requests.tests.RequestsTests)\", \"test_wsgirequest_with_force_script_name (requests.tests.RequestsTests)\", \"test_wsgirequest_with_script_name (requests.tests.RequestsTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.562500",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}