{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-10552",
  "base_commit": "314e623304f32e7e9e31c49d63e58bc73b54dcd0",
  "patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -403,8 +403,8 @@ def classnamefilter(self, name: str) -> bool:\n \n     def istestfunction(self, obj: object, name: str) -> bool:\n         if self.funcnamefilter(name) or self.isnosetest(obj):\n-            if isinstance(obj, staticmethod):\n-                # staticmethods need to be unwrapped.\n+            if isinstance(obj, (staticmethod, classmethod)):\n+                # staticmethods and classmethods need to be unwrapped.\n                 obj = safe_getattr(obj, \"__func__\", False)\n             return callable(obj) and fixtures.getfixturemarker(obj) is None\n         else:\n",
  "test_patch": "diff --git a/testing/python/integration.py b/testing/python/integration.py\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -416,7 +416,7 @@ def test_class(cls): pass\n             def test_static(): pass\n         \"\"\"\n     )\n-    assert len(items) == 3\n+    assert len(items) == 4\n     assert isinstance(items[0], Function)\n     assert items[0].name == \"test_func\"\n     assert items[0].instance is None\n@@ -424,6 +424,6 @@ def test_static(): pass\n     assert items[1].name == \"test_method\"\n     assert items[1].instance is not None\n     assert items[1].instance.__class__.__name__ == \"TestIt\"\n-    assert isinstance(items[2], Function)\n-    assert items[2].name == \"test_static\"\n-    assert items[2].instance is None\n+    assert isinstance(items[3], Function)\n+    assert items[3].name == \"test_static\"\n+    assert items[3].instance is None\ndiff --git a/testing/test_collection.py b/testing/test_collection.py\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -735,6 +735,20 @@ def testmethod_two(self, arg0):\n         assert s.endswith(\"test_example_items1.testone\")\n         print(s)\n \n+    def test_classmethod_is_discovered(self, pytester: Pytester) -> None:\n+        \"\"\"Test that classmethods are discovered\"\"\"\n+        p = pytester.makepyfile(\n+            \"\"\"\n+            class TestCase:\n+                @classmethod\n+                def test_classmethod(cls) -> None:\n+                    pass\n+            \"\"\"\n+        )\n+        items, reprec = pytester.inline_genitems(p)\n+        ids = [x.getmodpath() for x in items]  # type: ignore[attr-defined]\n+        assert ids == [\"TestCase.test_classmethod\"]\n+\n     def test_class_and_functions_discovery_using_glob(self, pytester: Pytester) -> None:\n         \"\"\"Test that Python_classes and Python_functions config options work\n         as prefixes and glob-like patterns (#600).\"\"\"\n",
  "problem_statement": "Inconsistent support for staticmethod/classmethod\nPytest discovery & running of staticmethods/classmethods is inconsistent. Here's an example:\r\n```python\r\nimport pytest\r\n\r\nclass TestFoo:\r\n    # passes:\r\n    @staticmethod\r\n    def test_staticmethod() -> None:\r\n        foo = 0\r\n        assert foo < 3\r\n\r\n    # warning: cannot collect 'test_staticmethod_inner' because it is not a function.\r\n    @pytest.mark.parametrize(\"foo\", [1, 2])\r\n    @staticmethod\r\n    def test_staticmethod_inner(foo: int) -> None:\r\n        assert foo < 3\r\n\r\n    # passes:\r\n    @staticmethod\r\n    @pytest.mark.parametrize(\"foo\", [1, 2])\r\n    def test_staticmethod_outer(foo: int) -> None:\r\n        assert foo < 3\r\n\r\n    # silently fails to run\r\n    @classmethod\r\n    def test_classmethod(cls) -> None:\r\n        foo = 0\r\n        assert foo < 3\r\n\r\n    # warning: cannot collect 'test_classmethod_inner' because it is not a function.\r\n    @pytest.mark.parametrize(\"foo\", [1, 2])\r\n    @classmethod\r\n    def test_classmethod_inner(cls, foo: int) -> None:\r\n        assert foo < 3\r\n\r\n    # silently fails to run\r\n    @classmethod\r\n    @pytest.mark.parametrize(\"foo\", [1, 2])\r\n    def test_classmethod_outer(cls, foo: int) -> None:\r\n        assert foo < 3\r\n```\r\n\r\nThe most worrysome cases are `test_classmethod` and `test_classmethod_outer`, which are not discovered by pytest. I think that there should at least be a warning or error to alert the user that their test code cannot be run.\r\n\r\n<details>\r\n<summary> Here's the full output from running `pytest -v`:\r\n</summary>\r\n\r\n```text\r\n$ pytest tmp.py -v\r\n======================== test session starts =========================\r\nplatform linux -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0 -- /home/homestar/tmp2/tmp_venv/bin/python3\r\ncachedir: .pytest_cache\r\nrootdir: /home/homestar/tmp2\r\ncollected 3 items\r\n\r\ntmp.py::TestFoo::test_staticmethod PASSED                      [ 33%]\r\ntmp.py::TestFoo::test_staticmethod_outer[1] PASSED             [ 66%]\r\ntmp.py::TestFoo::test_staticmethod_outer[2] PASSED             [100%]\r\n\r\n========================== warnings summary ==========================\r\ntmp_venv/lib/python3.9/site-packages/_pytest/mark/structures.py:347\r\n  /home/homestar/tmp2/tmp_venv/lib/python3.9/site-packages/_pytest/mark/structures.py:347: PytestCollectionWarning: cannot collect 'test_staticmethod_inner' because it is not a function.\r\n    def __call__(self, *args: object, **kwargs: object):\r\n\r\ntmp_venv/lib/python3.9/site-packages/_pytest/mark/structures.py:347\r\n  /home/homestar/tmp2/tmp_venv/lib/python3.9/site-packages/_pytest/mark/structures.py:347: PytestCollectionWarning: cannot collect 'test_classmethod_inner' because it is not a function.\r\n    def __call__(self, *args: object, **kwargs: object):\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\r\n=================== 3 passed, 2 warnings in 0.00s ====================\r\n```\r\n</details>\r\n\r\npython v3.9.15, pytest v7.2.0, ubuntu 20.04\r\n\r\n<details>\r\n<summary> Output of `pip list`:\r\n</summary>\r\n\r\n```text\r\n$ pip list\r\nPackage        Version\r\n-------------- -------\r\nattrs          22.1.0\r\nexceptiongroup 1.0.4\r\niniconfig      1.1.1\r\npackaging      21.3\r\npip            22.0.4\r\npluggy         1.0.0\r\npyparsing      3.0.9\r\npytest         7.2.0\r\nsetuptools     58.1.0\r\ntomli          2.0.1\r\n```\r\n</details>\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2022-12-01T19:54:20Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"testing/python/integration.py::test_function_instance\", \"testing/test_collection.py::Test_genitems::test_classmethod_is_discovered\"]",
  "PASS_TO_PASS": "[\"testing/python/integration.py::test_wrapped_getfslineno\", \"testing/python/integration.py::TestMockDecoration::test_wrapped_getfuncargnames\", \"testing/python/integration.py::TestMockDecoration::test_getfuncargnames_patching\", \"testing/python/integration.py::test_pytestconfig_is_session_scoped\", \"testing/test_collection.py::TestCollector::test_collect_versus_item\", \"testing/python/integration.py::TestMockDecoration::test_unittest_mock\", \"testing/python/integration.py::TestMockDecoration::test_unittest_mock_and_fixture\", \"testing/python/integration.py::TestMockDecoration::test_mock_sentinel_check_against_numpy_like\", \"testing/python/integration.py::TestReRunTests::test_rerun\", \"testing/python/integration.py::TestNoselikeTestAttribute::test_module_with_global_test\", \"testing/python/integration.py::TestNoselikeTestAttribute::test_class_and_method\", \"testing/python/integration.py::TestNoselikeTestAttribute::test_unittest_class\", \"testing/python/integration.py::TestNoselikeTestAttribute::test_class_with_nasty_getattr\", \"testing/python/integration.py::TestParameterize::test_idfn_marker\", \"testing/python/integration.py::TestParameterize::test_idfn_fixture\", \"testing/test_collection.py::TestCollector::test_check_equality\", \"testing/test_collection.py::TestCollector::test_getparent_and_accessors\", \"testing/test_collection.py::TestCollector::test_getcustomfile_roundtrip\", \"testing/test_collection.py::TestCollector::test_can_skip_class_with_test_attr\", \"testing/test_collection.py::TestCollectFS::test_ignored_certain_directories\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_custom_norecursedirs\", \"testing/test_collection.py::TestCollectFS::test_testpaths_ini\", \"testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_file\", \"testing/test_collection.py::TestPrunetraceback::test_custom_repr_failure\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_path\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_not_called_on_argument\", \"testing/test_collection.py::TestCustomConftests::test_collectignore_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_collectignoreglob_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_pytest_fs_collect_hooks_are_seen\", \"testing/test_collection.py::TestCustomConftests::test_pytest_collect_file_from_sister_dir\", \"testing/test_collection.py::TestSession::test_collect_topdir\", \"testing/test_collection.py::TestSession::test_collect_protocol_single_function\", \"testing/test_collection.py::TestSession::test_collect_protocol_method\", \"testing/test_collection.py::TestSession::test_collect_custom_nodes_multi_id\", \"testing/test_collection.py::TestSession::test_collect_subdir_event_ordering\", \"testing/test_collection.py::TestSession::test_collect_two_commandline_args\", \"testing/test_collection.py::TestSession::test_serialization_byid\", \"testing/test_collection.py::TestSession::test_find_byid_without_instance_parents\", \"testing/test_collection.py::Test_getinitialnodes::test_global_file\", \"testing/test_collection.py::Test_getinitialnodes::test_pkgfile\", \"testing/test_collection.py::Test_genitems::test_check_collect_hashes\", \"testing/test_collection.py::Test_genitems::test_example_items1\", \"testing/test_collection.py::Test_genitems::test_class_and_functions_discovery_using_glob\", \"testing/test_collection.py::test_matchnodes_two_collections_same_file\", \"testing/test_collection.py::TestNodeKeywords::test_no_under\", \"testing/test_collection.py::TestNodeKeywords::test_issue345\", \"testing/test_collection.py::TestNodeKeywords::test_keyword_matching_is_case_insensitive_by_default\", \"testing/test_collection.py::TestNodeKeywords::test_duplicates_handled_correctly\", \"testing/test_collection.py::TestNodeKeywords::test_unpacked_marks_added_to_keywords\", \"testing/test_collection.py::test_exit_on_collection_error\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_smaller_than_n_errors\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_bigger_than_n_errors\", \"testing/test_collection.py::test_continue_on_collection_errors\", \"testing/test_collection.py::test_continue_on_collection_errors_maxfail\", \"testing/test_collection.py::test_fixture_scope_sibling_conftests\", \"testing/test_collection.py::test_collect_init_tests\", \"testing/test_collection.py::test_collect_invalid_signature_message\", \"testing/test_collection.py::test_collect_handles_raising_on_dunder_class\", \"testing/test_collection.py::test_collect_with_chdir_during_import\", \"testing/test_collection.py::test_collect_symlink_file_arg\", \"testing/test_collection.py::test_collect_symlink_out_of_tree\", \"testing/test_collection.py::test_collectignore_via_conftest\", \"testing/test_collection.py::test_collect_pkg_init_and_file_in_args\", \"testing/test_collection.py::test_collect_pkg_init_only\", \"testing/test_collection.py::test_collect_sub_with_symlinks[True]\", \"testing/test_collection.py::test_collect_sub_with_symlinks[False]\", \"testing/test_collection.py::test_collector_respects_tbstyle\", \"testing/test_collection.py::test_does_not_eagerly_collect_packages\", \"testing/test_collection.py::test_does_not_put_src_on_path\", \"testing/test_collection.py::test_fscollector_from_parent\", \"testing/test_collection.py::test_class_from_parent\", \"testing/test_collection.py::TestImportModeImportlib::test_collect_duplicate_names\", \"testing/test_collection.py::TestImportModeImportlib::test_conftest\", \"testing/test_collection.py::TestImportModeImportlib::test_modules_importable_as_side_effect\", \"testing/test_collection.py::TestImportModeImportlib::test_modules_not_importable_as_side_effect\", \"testing/test_collection.py::TestImportModeImportlib::test_using_python_path\", \"testing/test_collection.py::test_does_not_crash_on_error_from_decorated_function\", \"testing/test_collection.py::test_does_not_crash_on_recursive_symlink\", \"testing/test_collection.py::test_collect_pyargs_with_testpaths\"]",
  "environment_setup_commit": "572b5657d7ca557593418ce0319fabff88800c73",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.922629",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}