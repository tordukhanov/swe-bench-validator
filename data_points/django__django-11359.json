{
  "repo": "django/django",
  "instance_id": "django__django-11359",
  "base_commit": "d08e6f55e3a986a8d4b3a58431d9615c7bc81eaa",
  "patch": "diff --git a/django/contrib/gis/db/models/functions.py b/django/contrib/gis/db/models/functions.py\n--- a/django/contrib/gis/db/models/functions.py\n+++ b/django/contrib/gis/db/models/functions.py\n@@ -101,10 +101,13 @@ class SQLiteDecimalToFloatMixin:\n     is not acceptable by the GIS functions expecting numeric values.\n     \"\"\"\n     def as_sqlite(self, compiler, connection, **extra_context):\n-        for expr in self.get_source_expressions():\n-            if hasattr(expr, 'value') and isinstance(expr.value, Decimal):\n-                expr.value = float(expr.value)\n-        return super().as_sql(compiler, connection, **extra_context)\n+        copy = self.copy()\n+        copy.set_source_expressions([\n+            Value(float(expr.value)) if hasattr(expr, 'value') and isinstance(expr.value, Decimal)\n+            else expr\n+            for expr in copy.get_source_expressions()\n+        ])\n+        return copy.as_sql(compiler, connection, **extra_context)\n \n \n class OracleToleranceMixin:\ndiff --git a/django/contrib/postgres/fields/ranges.py b/django/contrib/postgres/fields/ranges.py\n--- a/django/contrib/postgres/fields/ranges.py\n+++ b/django/contrib/postgres/fields/ranges.py\n@@ -173,8 +173,7 @@ class DateTimeRangeContains(PostgresOperatorLookup):\n     def process_rhs(self, compiler, connection):\n         # Transform rhs value for db lookup.\n         if isinstance(self.rhs, datetime.date):\n-            output_field = models.DateTimeField() if isinstance(self.rhs, datetime.datetime) else models.DateField()\n-            value = models.Value(self.rhs, output_field=output_field)\n+            value = models.Value(self.rhs)\n             self.rhs = value.resolve_expression(compiler.query)\n         return super().process_rhs(compiler, connection)\n \ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1,7 +1,9 @@\n import copy\n import datetime\n+import functools\n import inspect\n from decimal import Decimal\n+from uuid import UUID\n \n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import NotSupportedError, connection\n@@ -56,12 +58,7 @@ class Combinable:\n     def _combine(self, other, connector, reversed):\n         if not hasattr(other, 'resolve_expression'):\n             # everything must be resolvable to an expression\n-            output_field = (\n-                fields.DurationField()\n-                if isinstance(other, datetime.timedelta) else\n-                None\n-            )\n-            other = Value(other, output_field=output_field)\n+            other = Value(other)\n \n         if reversed:\n             return CombinedExpression(other, connector, self)\n@@ -422,6 +419,25 @@ class Expression(BaseExpression, Combinable):\n     pass\n \n \n+_connector_combinators = {\n+    connector: [\n+        (fields.IntegerField, fields.DecimalField, fields.DecimalField),\n+        (fields.DecimalField, fields.IntegerField, fields.DecimalField),\n+        (fields.IntegerField, fields.FloatField, fields.FloatField),\n+        (fields.FloatField, fields.IntegerField, fields.FloatField),\n+    ]\n+    for connector in (Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV)\n+}\n+\n+\n+@functools.lru_cache(maxsize=128)\n+def _resolve_combined_type(connector, lhs_type, rhs_type):\n+    combinators = _connector_combinators.get(connector, ())\n+    for combinator_lhs_type, combinator_rhs_type, combined_type in combinators:\n+        if issubclass(lhs_type, combinator_lhs_type) and issubclass(rhs_type, combinator_rhs_type):\n+            return combined_type\n+\n+\n class CombinedExpression(SQLiteNumericMixin, Expression):\n \n     def __init__(self, lhs, connector, rhs, output_field=None):\n@@ -442,6 +458,19 @@ def get_source_expressions(self):\n     def set_source_expressions(self, exprs):\n         self.lhs, self.rhs = exprs\n \n+    def _resolve_output_field(self):\n+        try:\n+            return super()._resolve_output_field()\n+        except FieldError:\n+            combined_type = _resolve_combined_type(\n+                self.connector,\n+                type(self.lhs.output_field),\n+                type(self.rhs.output_field),\n+            )\n+            if combined_type is None:\n+                raise\n+            return combined_type()\n+\n     def as_sql(self, compiler, connection):\n         expressions = []\n         expression_params = []\n@@ -721,6 +750,30 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize\n     def get_group_by_cols(self, alias=None):\n         return []\n \n+    def _resolve_output_field(self):\n+        if isinstance(self.value, str):\n+            return fields.CharField()\n+        if isinstance(self.value, bool):\n+            return fields.BooleanField()\n+        if isinstance(self.value, int):\n+            return fields.IntegerField()\n+        if isinstance(self.value, float):\n+            return fields.FloatField()\n+        if isinstance(self.value, datetime.datetime):\n+            return fields.DateTimeField()\n+        if isinstance(self.value, datetime.date):\n+            return fields.DateField()\n+        if isinstance(self.value, datetime.time):\n+            return fields.TimeField()\n+        if isinstance(self.value, datetime.timedelta):\n+            return fields.DurationField()\n+        if isinstance(self.value, Decimal):\n+            return fields.DecimalField()\n+        if isinstance(self.value, bytes):\n+            return fields.BinaryField()\n+        if isinstance(self.value, UUID):\n+            return fields.UUIDField()\n+\n \n class RawSQL(Expression):\n     def __init__(self, sql, params, output_field=None):\n@@ -1177,7 +1230,6 @@ def as_oracle(self, compiler, connection):\n             copy.expression = Case(\n                 When(self.expression, then=True),\n                 default=False,\n-                output_field=fields.BooleanField(),\n             )\n             return copy.as_sql(compiler, connection)\n         return self.as_sql(compiler, connection)\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -6,7 +6,7 @@\n from django.core.exceptions import EmptyResultSet\n from django.db.models.expressions import Case, Exists, Func, Value, When\n from django.db.models.fields import (\n-    BooleanField, CharField, DateTimeField, Field, IntegerField, UUIDField,\n+    CharField, DateTimeField, Field, IntegerField, UUIDField,\n )\n from django.db.models.query_utils import RegisterLookupMixin\n from django.utils.datastructures import OrderedSet\n@@ -123,7 +123,7 @@ def as_oracle(self, compiler, connection):\n         exprs = []\n         for expr in (self.lhs, self.rhs):\n             if isinstance(expr, Exists):\n-                expr = Case(When(expr, then=True), default=False, output_field=BooleanField())\n+                expr = Case(When(expr, then=True), default=False)\n                 wrapped = True\n             exprs.append(expr)\n         lookup = type(self)(*exprs) if wrapped else self\n",
  "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -841,17 +841,13 @@ def test_nonaggregate_aggregation_throws(self):\n             Book.objects.aggregate(fail=F('price'))\n \n     def test_nonfield_annotation(self):\n-        book = Book.objects.annotate(val=Max(Value(2, output_field=IntegerField()))).first()\n+        book = Book.objects.annotate(val=Max(Value(2))).first()\n         self.assertEqual(book.val, 2)\n         book = Book.objects.annotate(val=Max(Value(2), output_field=IntegerField())).first()\n         self.assertEqual(book.val, 2)\n         book = Book.objects.annotate(val=Max(2, output_field=IntegerField())).first()\n         self.assertEqual(book.val, 2)\n \n-    def test_missing_output_field_raises_error(self):\n-        with self.assertRaisesMessage(FieldError, 'Cannot resolve expression type, unknown output_field'):\n-            Book.objects.annotate(val=Max(2)).first()\n-\n     def test_annotation_expressions(self):\n         authors = Author.objects.annotate(combined_ages=Sum(F('age') + F('friends__age'))).order_by('name')\n         authors2 = Author.objects.annotate(combined_ages=Sum('age') + Sum('friends__age')).order_by('name')\n@@ -893,7 +889,7 @@ def test_order_of_precedence(self):\n \n     def test_combine_different_types(self):\n         msg = (\n-            'Expression contains mixed types: FloatField, IntegerField. '\n+            'Expression contains mixed types: FloatField, DecimalField. '\n             'You must set output_field.'\n         )\n         qs = Book.objects.annotate(sums=Sum('rating') + Sum('pages') + Sum('price'))\ndiff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -374,7 +374,7 @@ def test_conditional_aggregate(self):\n         # Conditional aggregation of a grouped queryset.\n         self.assertEqual(\n             Book.objects.annotate(c=Count('authors')).values('pk').aggregate(test=Sum(\n-                Case(When(c__gt=1, then=1), output_field=IntegerField())\n+                Case(When(c__gt=1, then=1))\n             ))['test'],\n             3\n         )\n@@ -382,13 +382,13 @@ def test_conditional_aggregate(self):\n     def test_sliced_conditional_aggregate(self):\n         self.assertEqual(\n             Author.objects.all()[:5].aggregate(test=Sum(Case(\n-                When(age__lte=35, then=1), output_field=IntegerField()\n+                When(age__lte=35, then=1)\n             )))['test'],\n             3\n         )\n \n     def test_annotated_conditional_aggregate(self):\n-        annotated_qs = Book.objects.annotate(discount_price=F('price') * 0.75)\n+        annotated_qs = Book.objects.annotate(discount_price=F('price') * Decimal('0.75'))\n         self.assertAlmostEqual(\n             annotated_qs.aggregate(test=Avg(Case(\n                 When(pages__lt=400, then='discount_price'),\ndiff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -5,9 +5,9 @@\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import connection\n from django.db.models import (\n-    BooleanField, Case, CharField, Count, DateTimeField, Exists,\n-    ExpressionWrapper, F, FloatField, Func, IntegerField, Max,\n-    NullBooleanField, OuterRef, Q, Subquery, Sum, Value, When,\n+    BooleanField, Case, Count, DateTimeField, Exists, ExpressionWrapper, F,\n+    FloatField, Func, IntegerField, Max, NullBooleanField, OuterRef, Q,\n+    Subquery, Sum, Value, When,\n )\n from django.db.models.expressions import RawSQL\n from django.db.models.functions import Length, Lower\n@@ -115,8 +115,7 @@ def setUpTestData(cls):\n         s3.books.add(cls.b3, cls.b4, cls.b6)\n \n     def test_basic_annotation(self):\n-        books = Book.objects.annotate(\n-            is_book=Value(1, output_field=IntegerField()))\n+        books = Book.objects.annotate(is_book=Value(1))\n         for book in books:\n             self.assertEqual(book.is_book, 1)\n \n@@ -163,9 +162,7 @@ def test_empty_expression_annotation(self):\n         self.assertTrue(all(not book.selected for book in books))\n \n     def test_annotate_with_aggregation(self):\n-        books = Book.objects.annotate(\n-            is_book=Value(1, output_field=IntegerField()),\n-            rating_count=Count('rating'))\n+        books = Book.objects.annotate(is_book=Value(1), rating_count=Count('rating'))\n         for book in books:\n             self.assertEqual(book.is_book, 1)\n             self.assertEqual(book.rating_count, 1)\n@@ -231,9 +228,7 @@ def test_distinct_on_with_annotation(self):\n         self.assertCountEqual(lengths, [3, 7, 8])\n \n     def test_filter_annotation(self):\n-        books = Book.objects.annotate(\n-            is_book=Value(1, output_field=IntegerField())\n-        ).filter(is_book=1)\n+        books = Book.objects.annotate(is_book=Value(1)).filter(is_book=1)\n         for book in books:\n             self.assertEqual(book.is_book, 1)\n \n@@ -469,7 +464,7 @@ def test_column_field_ordering(self):\n         qs = Employee.objects.extra(\n             select={'random_value': '42'}\n         ).select_related('store').annotate(\n-            annotated_value=Value(17, output_field=IntegerField())\n+            annotated_value=Value(17),\n         )\n \n         rows = [\n@@ -493,7 +488,7 @@ def test_column_field_ordering_with_deferred(self):\n         qs = Employee.objects.extra(\n             select={'random_value': '42'}\n         ).select_related('store').annotate(\n-            annotated_value=Value(17, output_field=IntegerField())\n+            annotated_value=Value(17),\n         )\n \n         rows = [\n@@ -554,7 +549,7 @@ class Lower(Func):\n                 function='COALESCE',\n             )\n         ).annotate(\n-            tagline_lower=Lower(F('tagline'), output_field=CharField())\n+            tagline_lower=Lower(F('tagline')),\n         ).order_by('name')\n \n         # LOWER function supported by:\n@@ -661,7 +656,6 @@ def test_annotation_aggregate_with_m2o(self):\n             max_pages=Case(\n                 When(book_contact_set__isnull=True, then=Value(0)),\n                 default=Max(F('book__pages')),\n-                output_field=IntegerField(),\n             ),\n         ).values('name', 'max_pages')\n         self.assertCountEqual(qs, [\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -3,15 +3,17 @@\n import unittest\n import uuid\n from copy import deepcopy\n+from decimal import Decimal\n from unittest import mock\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n-    Avg, BooleanField, Case, CharField, Count, DateField, DateTimeField,\n-    DurationField, Exists, Expression, ExpressionList, ExpressionWrapper, F,\n-    Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n-    Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n+    Avg, BinaryField, BooleanField, Case, CharField, Count, DateField,\n+    DateTimeField, DecimalField, DurationField, Exists, Expression,\n+    ExpressionList, ExpressionWrapper, F, FloatField, Func, IntegerField, Max,\n+    Min, Model, OrderBy, OuterRef, Q, StdDev, Subquery, Sum, TimeField,\n+    UUIDField, Value, Variance, When,\n )\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n@@ -727,7 +729,7 @@ def test_annotation_with_nested_outerref(self):\n         self.assertEqual(qs.get().ceo_company, 'Test GmbH')\n \n     def test_pickle_expression(self):\n-        expr = Value(1, output_field=IntegerField())\n+        expr = Value(1)\n         expr.convert_value  # populate cached property\n         self.assertEqual(pickle.loads(pickle.dumps(expr)), expr)\n \n@@ -1543,7 +1545,7 @@ def test_date_case_subtraction(self):\n     def test_time_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         queryset = Time.objects.annotate(\n-            difference=F('time') - Value(datetime.time(11, 15, 0), output_field=TimeField()),\n+            difference=F('time') - Value(datetime.time(11, 15, 0)),\n         )\n         self.assertEqual(\n             queryset.get().difference,\n@@ -1629,7 +1631,7 @@ def test_duration_with_datetime_microseconds(self):\n \n     def test_date_minus_duration(self):\n         more_than_4_days = Experiment.objects.filter(\n-            assigned__lt=F('completed') - Value(datetime.timedelta(days=4), output_field=DurationField())\n+            assigned__lt=F('completed') - Value(datetime.timedelta(days=4))\n         )\n         self.assertQuerysetEqual(more_than_4_days, ['e3', 'e4', 'e5'], lambda e: e.name)\n \n@@ -1711,6 +1713,30 @@ def test_compile_unresolved(self):\n         value = Value('foo', output_field=CharField())\n         self.assertEqual(value.as_sql(compiler, connection), ('%s', ['foo']))\n \n+    def test_resolve_output_field(self):\n+        value_types = [\n+            ('str', CharField),\n+            (True, BooleanField),\n+            (42, IntegerField),\n+            (3.14, FloatField),\n+            (datetime.date(2019, 5, 15), DateField),\n+            (datetime.datetime(2019, 5, 15), DateTimeField),\n+            (datetime.time(3, 16), TimeField),\n+            (datetime.timedelta(1), DurationField),\n+            (Decimal('3.14'), DecimalField),\n+            (b'', BinaryField),\n+            (uuid.uuid4(), UUIDField),\n+        ]\n+        for value, ouput_field_type in value_types:\n+            with self.subTest(type=type(value)):\n+                expr = Value(value)\n+                self.assertIsInstance(expr.output_field, ouput_field_type)\n+\n+    def test_resolve_output_field_failure(self):\n+        msg = 'Cannot resolve expression type, unknown output_field'\n+        with self.assertRaisesMessage(FieldError, msg):\n+            Value(object()).output_field\n+\n \n class FieldTransformTests(TestCase):\n \n@@ -1848,7 +1874,9 @@ def test_empty_group_by(self):\n         self.assertEqual(expr.get_group_by_cols(alias=None), [])\n \n     def test_non_empty_group_by(self):\n-        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        value = Value('f')\n+        value.output_field = None\n+        expr = ExpressionWrapper(Lower(value), output_field=IntegerField())\n         group_by_cols = expr.get_group_by_cols(alias=None)\n         self.assertEqual(group_by_cols, [expr.expression])\n         self.assertEqual(group_by_cols[0].output_field, expr.output_field)\ndiff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -6,9 +6,9 @@\n \n from django.core.exceptions import FieldError\n from django.db.models import (\n-    BinaryField, BooleanField, Case, CharField, Count, DecimalField,\n-    DurationField, F, GenericIPAddressField, IntegerField, Max, Min, Q, Sum,\n-    TextField, TimeField, UUIDField, Value, When,\n+    BinaryField, BooleanField, Case, Count, DecimalField, F,\n+    GenericIPAddressField, IntegerField, Max, Min, Q, Sum, TextField, Value,\n+    When,\n )\n from django.test import SimpleTestCase, TestCase\n \n@@ -68,7 +68,6 @@ def test_annotate(self):\n                 When(integer=1, then=Value('one')),\n                 When(integer=2, then=Value('two')),\n                 default=Value('other'),\n-                output_field=CharField(),\n             )).order_by('pk'),\n             [(1, 'one'), (2, 'two'), (3, 'other'), (2, 'two'), (3, 'other'), (3, 'other'), (4, 'other')],\n             transform=attrgetter('integer', 'test')\n@@ -79,7 +78,6 @@ def test_annotate_without_default(self):\n             CaseTestModel.objects.annotate(test=Case(\n                 When(integer=1, then=1),\n                 When(integer=2, then=2),\n-                output_field=IntegerField(),\n             )).order_by('pk'),\n             [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n             transform=attrgetter('integer', 'test')\n@@ -101,7 +99,6 @@ def test_annotate_with_expression_as_condition(self):\n             CaseTestModel.objects.annotate(f_test=Case(\n                 When(integer2=F('integer'), then=Value('equal')),\n                 When(integer2=F('integer') + 1, then=Value('+1')),\n-                output_field=CharField(),\n             )).order_by('pk'),\n             [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],\n             transform=attrgetter('integer', 'f_test')\n@@ -135,7 +132,6 @@ def test_annotate_with_join_in_condition(self):\n                 When(integer2=F('o2o_rel__integer'), then=Value('equal')),\n                 When(integer2=F('o2o_rel__integer') + 1, then=Value('+1')),\n                 default=Value('other'),\n-                output_field=CharField(),\n             )).order_by('pk'),\n             [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, 'other')],\n             transform=attrgetter('integer', 'join_test')\n@@ -148,7 +144,6 @@ def test_annotate_with_join_in_predicate(self):\n                 When(o2o_rel__integer=2, then=Value('two')),\n                 When(o2o_rel__integer=3, then=Value('three')),\n                 default=Value('other'),\n-                output_field=CharField(),\n             )).order_by('pk'),\n             [(1, 'one'), (2, 'two'), (3, 'three'), (2, 'two'), (3, 'three'), (3, 'three'), (4, 'one')],\n             transform=attrgetter('integer', 'join_test')\n@@ -178,7 +173,6 @@ def test_annotate_with_annotation_in_condition(self):\n                 f_test=Case(\n                     When(integer2=F('integer'), then=Value('equal')),\n                     When(integer2=F('f_plus_1'), then=Value('+1')),\n-                    output_field=CharField(),\n                 ),\n             ).order_by('pk'),\n             [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],\n@@ -195,7 +189,6 @@ def test_annotate_with_annotation_in_predicate(self):\n                     When(f_minus_2=0, then=Value('zero')),\n                     When(f_minus_2=1, then=Value('one')),\n                     default=Value('other'),\n-                    output_field=CharField(),\n                 ),\n             ).order_by('pk'),\n             [(1, 'negative one'), (2, 'zero'), (3, 'one'), (2, 'zero'), (3, 'one'), (3, 'one'), (4, 'other')],\n@@ -226,7 +219,6 @@ def test_annotate_with_aggregation_in_condition(self):\n                 test=Case(\n                     When(integer2=F('min'), then=Value('min')),\n                     When(integer2=F('max'), then=Value('max')),\n-                    output_field=CharField(),\n                 ),\n             ).order_by('pk'),\n             [(1, 1, 'min'), (2, 3, 'max'), (3, 4, 'max'), (2, 2, 'min'), (3, 4, 'max'), (3, 3, 'min'), (4, 5, 'min')],\n@@ -242,7 +234,6 @@ def test_annotate_with_aggregation_in_predicate(self):\n                     When(max=3, then=Value('max = 3')),\n                     When(max=4, then=Value('max = 4')),\n                     default=Value(''),\n-                    output_field=CharField(),\n                 ),\n             ).order_by('pk'),\n             [(1, 1, ''), (2, 3, 'max = 3'), (3, 4, 'max = 4'), (2, 3, 'max = 3'),\n@@ -256,7 +247,6 @@ def test_annotate_exclude(self):\n                 When(integer=1, then=Value('one')),\n                 When(integer=2, then=Value('two')),\n                 default=Value('other'),\n-                output_field=CharField(),\n             )).exclude(test='other').order_by('pk'),\n             [(1, 'one'), (2, 'two'), (2, 'two')],\n             transform=attrgetter('integer', 'test')\n@@ -269,7 +259,6 @@ def test_annotate_values_not_in_order_by(self):\n                 When(integer=2, then=Value('two')),\n                 When(integer=3, then=Value('three')),\n                 default=Value('other'),\n-                output_field=CharField(),\n             )).order_by('test').values_list('integer', flat=True)),\n             [1, 4, 3, 3, 3, 2, 2]\n         )\n@@ -278,7 +267,7 @@ def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n                 When(pk__in=[], then=Value('selected')),\n-                default=Value('not selected'), output_field=CharField()\n+                default=Value('not selected'),\n             )\n         )\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n@@ -291,7 +280,6 @@ def test_combined_expression(self):\n                     When(integer=1, then=2),\n                     When(integer=2, then=1),\n                     default=3,\n-                    output_field=IntegerField(),\n                 ) + 1,\n             ).order_by('pk'),\n             [(1, 3), (2, 2), (3, 4), (2, 2), (3, 4), (3, 4), (4, 4)],\n@@ -305,7 +293,6 @@ def test_in_subquery(self):\n                     test=Case(\n                         When(integer=F('integer2'), then='pk'),\n                         When(integer=4, then='pk'),\n-                        output_field=IntegerField(),\n                     ),\n                 ).values('test')).order_by('pk'),\n             [(1, 1), (2, 2), (3, 3), (4, 5)],\n@@ -327,7 +314,6 @@ def test_case_reuse(self):\n         SOME_CASE = Case(\n             When(pk=0, then=Value('0')),\n             default=Value('1'),\n-            output_field=CharField(),\n         )\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(somecase=SOME_CASE).order_by('pk'),\n@@ -340,19 +326,15 @@ def test_aggregate(self):\n             CaseTestModel.objects.aggregate(\n                 one=Sum(Case(\n                     When(integer=1, then=1),\n-                    output_field=IntegerField(),\n                 )),\n                 two=Sum(Case(\n                     When(integer=2, then=1),\n-                    output_field=IntegerField(),\n                 )),\n                 three=Sum(Case(\n                     When(integer=3, then=1),\n-                    output_field=IntegerField(),\n                 )),\n                 four=Sum(Case(\n                     When(integer=4, then=1),\n-                    output_field=IntegerField(),\n                 )),\n             ),\n             {'one': 1, 'two': 2, 'three': 3, 'four': 1}\n@@ -373,11 +355,9 @@ def test_aggregate_with_expression_as_condition(self):\n             CaseTestModel.objects.aggregate(\n                 equal=Sum(Case(\n                     When(integer2=F('integer'), then=1),\n-                    output_field=IntegerField(),\n                 )),\n                 plus_one=Sum(Case(\n                     When(integer2=F('integer') + 1, then=1),\n-                    output_field=IntegerField(),\n                 )),\n             ),\n             {'equal': 3, 'plus_one': 4}\n@@ -389,7 +369,6 @@ def test_filter(self):\n                 When(integer=2, then=3),\n                 When(integer=3, then=4),\n                 default=1,\n-                output_field=IntegerField(),\n             )).order_by('pk'),\n             [(1, 1), (2, 3), (3, 4), (3, 4)],\n             transform=attrgetter('integer', 'integer2')\n@@ -400,7 +379,6 @@ def test_filter_without_default(self):\n             CaseTestModel.objects.filter(integer2=Case(\n                 When(integer=2, then=3),\n                 When(integer=3, then=4),\n-                output_field=IntegerField(),\n             )).order_by('pk'),\n             [(2, 3), (3, 4), (3, 4)],\n             transform=attrgetter('integer', 'integer2')\n@@ -422,7 +400,6 @@ def test_filter_with_expression_as_condition(self):\n             CaseTestModel.objects.filter(string=Case(\n                 When(integer2=F('integer'), then=Value('2')),\n                 When(integer2=F('integer') + 1, then=Value('3')),\n-                output_field=CharField(),\n             )).order_by('pk'),\n             [(3, 4, '3'), (2, 2, '2'), (3, 4, '3')],\n             transform=attrgetter('integer', 'integer2', 'string')\n@@ -444,7 +421,6 @@ def test_filter_with_join_in_condition(self):\n             CaseTestModel.objects.filter(integer=Case(\n                 When(integer2=F('o2o_rel__integer') + 1, then=2),\n                 When(integer2=F('o2o_rel__integer'), then=3),\n-                output_field=IntegerField(),\n             )).order_by('pk'),\n             [(2, 3), (3, 3)],\n             transform=attrgetter('integer', 'integer2')\n@@ -456,7 +432,6 @@ def test_filter_with_join_in_predicate(self):\n                 When(o2o_rel__integer=1, then=1),\n                 When(o2o_rel__integer=2, then=3),\n                 When(o2o_rel__integer=3, then=4),\n-                output_field=IntegerField(),\n             )).order_by('pk'),\n             [(1, 1), (2, 3), (3, 4), (3, 4)],\n             transform=attrgetter('integer', 'integer2')\n@@ -485,7 +460,6 @@ def test_filter_with_annotation_in_condition(self):\n                 integer=Case(\n                     When(integer2=F('integer'), then=2),\n                     When(integer2=F('f_plus_1'), then=3),\n-                    output_field=IntegerField(),\n                 ),\n             ).order_by('pk'),\n             [(3, 4), (2, 2), (3, 4)],\n@@ -501,7 +475,6 @@ def test_filter_with_annotation_in_predicate(self):\n                     When(f_plus_1=3, then=3),\n                     When(f_plus_1=4, then=4),\n                     default=1,\n-                    output_field=IntegerField(),\n                 ),\n             ).order_by('pk'),\n             [(1, 1), (2, 3), (3, 4), (3, 4)],\n@@ -612,7 +585,6 @@ def test_update_with_join_in_condition_raise_field_error(self):\n                 integer=Case(\n                     When(integer2=F('o2o_rel__integer') + 1, then=2),\n                     When(integer2=F('o2o_rel__integer'), then=3),\n-                    output_field=IntegerField(),\n                 ),\n             )\n \n@@ -624,7 +596,6 @@ def test_update_with_join_in_predicate_raise_field_error(self):\n                     When(o2o_rel__integer=2, then=Value('two')),\n                     When(o2o_rel__integer=3, then=Value('three')),\n                     default=Value('other'),\n-                    output_field=CharField(),\n                 ),\n             )\n \n@@ -644,9 +615,9 @@ def test_update_big_integer(self):\n     def test_update_binary(self):\n         CaseTestModel.objects.update(\n             binary=Case(\n-                When(integer=1, then=Value(b'one', output_field=BinaryField())),\n-                When(integer=2, then=Value(b'two', output_field=BinaryField())),\n-                default=Value(b'', output_field=BinaryField()),\n+                When(integer=1, then=b'one'),\n+                When(integer=2, then=b'two'),\n+                default=b'',\n             ),\n         )\n         self.assertQuerysetEqual(\n@@ -725,10 +696,8 @@ def test_update_decimal(self):\n     def test_update_duration(self):\n         CaseTestModel.objects.update(\n             duration=Case(\n-                # fails on sqlite if output_field is not set explicitly on all\n-                # Values containing timedeltas\n-                When(integer=1, then=Value(timedelta(1), output_field=DurationField())),\n-                When(integer=2, then=Value(timedelta(2), output_field=DurationField())),\n+                When(integer=1, then=timedelta(1)),\n+                When(integer=2, then=timedelta(2)),\n             ),\n         )\n         self.assertQuerysetEqual(\n@@ -808,7 +777,6 @@ def test_update_image(self):\n     def test_update_generic_ip_address(self):\n         CaseTestModel.objects.update(\n             generic_ip_address=Case(\n-                # fails on postgresql if output_field is not set explicitly\n                 When(integer=1, then=Value('1.1.1.1')),\n                 When(integer=2, then=Value('2.2.2.2')),\n                 output_field=GenericIPAddressField(),\n@@ -915,8 +883,8 @@ def test_update_small_integer(self):\n     def test_update_string(self):\n         CaseTestModel.objects.filter(string__in=['1', '2']).update(\n             string=Case(\n-                When(integer=1, then=Value('1', output_field=CharField())),\n-                When(integer=2, then=Value('2', output_field=CharField())),\n+                When(integer=1, then=Value('1')),\n+                When(integer=2, then=Value('2')),\n             ),\n         )\n         self.assertQuerysetEqual(\n@@ -942,10 +910,8 @@ def test_update_text(self):\n     def test_update_time(self):\n         CaseTestModel.objects.update(\n             time=Case(\n-                # fails on sqlite if output_field is not set explicitly on all\n-                # Values containing times\n-                When(integer=1, then=Value(time(1), output_field=TimeField())),\n-                When(integer=2, then=Value(time(2), output_field=TimeField())),\n+                When(integer=1, then=time(1)),\n+                When(integer=2, then=time(2)),\n             ),\n         )\n         self.assertQuerysetEqual(\n@@ -974,16 +940,8 @@ def test_update_url(self):\n     def test_update_uuid(self):\n         CaseTestModel.objects.update(\n             uuid=Case(\n-                # fails on sqlite if output_field is not set explicitly on all\n-                # Values containing UUIDs\n-                When(integer=1, then=Value(\n-                    UUID('11111111111111111111111111111111'),\n-                    output_field=UUIDField(),\n-                )),\n-                When(integer=2, then=Value(\n-                    UUID('22222222222222222222222222222222'),\n-                    output_field=UUIDField(),\n-                )),\n+                When(integer=1, then=UUID('11111111111111111111111111111111')),\n+                When(integer=2, then=UUID('22222222222222222222222222222222')),\n             ),\n         )\n         self.assertQuerysetEqual(\n@@ -1022,7 +980,6 @@ def test_lookup_in_condition(self):\n                     When(integer__lt=2, then=Value('less than 2')),\n                     When(integer__gt=2, then=Value('greater than 2')),\n                     default=Value('equal to 2'),\n-                    output_field=CharField(),\n                 ),\n             ).order_by('pk'),\n             [\n@@ -1038,7 +995,6 @@ def test_lookup_different_fields(self):\n                 test=Case(\n                     When(integer=2, integer2=3, then=Value('when')),\n                     default=Value('default'),\n-                    output_field=CharField(),\n                 ),\n             ).order_by('pk'),\n             [\n@@ -1054,7 +1010,6 @@ def test_combined_q_object(self):\n                 test=Case(\n                     When(Q(integer=2) | Q(integer2=3), then=Value('when')),\n                     default=Value('default'),\n-                    output_field=CharField(),\n                 ),\n             ).order_by('pk'),\n             [\n@@ -1070,7 +1025,6 @@ def test_order_by_conditional_implicit(self):\n                 When(integer=1, then=2),\n                 When(integer=2, then=1),\n                 default=3,\n-                output_field=IntegerField(),\n             )).order_by('test', 'pk'),\n             [(2, 1), (2, 1), (1, 2)],\n             transform=attrgetter('integer', 'test')\n@@ -1082,7 +1036,6 @@ def test_order_by_conditional_explicit(self):\n                 When(integer=1, then=2),\n                 When(integer=2, then=1),\n                 default=3,\n-                output_field=IntegerField(),\n             )).order_by(F('test').asc(), 'pk'),\n             [(2, 1), (2, 1), (1, 2)],\n             transform=attrgetter('integer', 'test')\n@@ -1101,7 +1054,6 @@ def test_join_promotion(self):\n                 foo=Case(\n                     When(fk_rel__pk=1, then=2),\n                     default=3,\n-                    output_field=IntegerField()\n                 ),\n             ),\n             [(o, 3)],\n@@ -1113,7 +1065,6 @@ def test_join_promotion(self):\n                 foo=Case(\n                     When(fk_rel__isnull=True, then=2),\n                     default=3,\n-                    output_field=IntegerField()\n                 ),\n             ),\n             [(o, 2)],\n@@ -1133,12 +1084,10 @@ def test_join_promotion_multiple_annotations(self):\n                 foo=Case(\n                     When(fk_rel__pk=1, then=2),\n                     default=3,\n-                    output_field=IntegerField()\n                 ),\n                 bar=Case(\n                     When(fk_rel__pk=1, then=4),\n                     default=5,\n-                    output_field=IntegerField()\n                 ),\n             ),\n             [(o, 3, 5)],\n@@ -1150,12 +1099,10 @@ def test_join_promotion_multiple_annotations(self):\n                 foo=Case(\n                     When(fk_rel__isnull=True, then=2),\n                     default=3,\n-                    output_field=IntegerField()\n                 ),\n                 bar=Case(\n                     When(fk_rel__isnull=True, then=4),\n                     default=5,\n-                    output_field=IntegerField()\n                 ),\n             ),\n             [(o, 2, 4)],\n@@ -1167,7 +1114,6 @@ def test_m2m_exclude(self):\n         qs = CaseTestModel.objects.values_list('id', 'integer').annotate(\n             cnt=Sum(\n                 Case(When(~Q(fk_rel__integer=1), then=1), default=2),\n-                output_field=IntegerField()\n             ),\n         ).order_by('integer')\n         # The first o has 2 as its fk_rel__integer=1, thus it hits the\n@@ -1189,12 +1135,10 @@ def test_m2m_reuse(self):\n         qs = CaseTestModel.objects.values_list('id', 'integer').annotate(\n             cnt=Sum(\n                 Case(When(~Q(fk_rel__integer=1), then=1), default=2),\n-                output_field=IntegerField()\n             ),\n         ).annotate(\n             cnt2=Sum(\n                 Case(When(~Q(fk_rel__integer=1), then=1), default=2),\n-                output_field=IntegerField()\n             ),\n         ).order_by('integer')\n         self.assertEqual(str(qs.query).count(' JOIN '), 1)\n@@ -1231,7 +1175,6 @@ def test_simple_example(self):\n                     When(account_type=Client.GOLD, then=Value('5%')),\n                     When(account_type=Client.PLATINUM, then=Value('10%')),\n                     default=Value('0%'),\n-                    output_field=CharField(),\n                 ),\n             ).order_by('pk'),\n             [('Jane Doe', '0%'), ('James Smith', '5%'), ('Jack Black', '10%')],\n@@ -1247,7 +1190,6 @@ def test_lookup_example(self):\n                     When(registered_on__lte=a_year_ago, then=Value('10%')),\n                     When(registered_on__lte=a_month_ago, then=Value('5%')),\n                     default=Value('0%'),\n-                    output_field=CharField(),\n                 ),\n             ).order_by('pk'),\n             [('Jane Doe', '5%'), ('James Smith', '0%'), ('Jack Black', '10%')],\n@@ -1299,15 +1241,12 @@ def test_conditional_aggregation_example(self):\n             Client.objects.aggregate(\n                 regular=Sum(Case(\n                     When(account_type=Client.REGULAR, then=1),\n-                    output_field=IntegerField(),\n                 )),\n                 gold=Sum(Case(\n                     When(account_type=Client.GOLD, then=1),\n-                    output_field=IntegerField(),\n                 )),\n                 platinum=Sum(Case(\n                     When(account_type=Client.PLATINUM, then=1),\n-                    output_field=IntegerField(),\n                 )),\n             ),\n             {'regular': 2, 'gold': 1, 'platinum': 3}\n@@ -1360,9 +1299,9 @@ def test_invalid_when_constructor_args(self):\n         with self.assertRaisesMessage(TypeError, msg):\n             When(condition=object())\n         with self.assertRaisesMessage(TypeError, msg):\n-            When(condition=Value(1, output_field=IntegerField()))\n+            When(condition=Value(1))\n         with self.assertRaisesMessage(TypeError, msg):\n-            When(Value(1, output_field=IntegerField()), string='1')\n+            When(Value(1), string='1')\n         with self.assertRaisesMessage(TypeError, msg):\n             When()\n \ndiff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,7 +1,6 @@\n from datetime import datetime\n from operator import attrgetter\n \n-from django.core.exceptions import FieldError\n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -439,17 +438,6 @@ def test_order_by_constant_value(self):\n         qs = Article.objects.order_by(Value('1', output_field=CharField()), '-headline')\n         self.assertSequenceEqual(qs, [self.a4, self.a3, self.a2, self.a1])\n \n-    def test_order_by_constant_value_without_output_field(self):\n-        msg = 'Cannot resolve expression type, unknown output_field'\n-        qs = Article.objects.annotate(constant=Value('1')).order_by('constant')\n-        for ordered_qs in (\n-            qs,\n-            qs.values('headline'),\n-            Article.objects.order_by(Value('1')),\n-        ):\n-            with self.subTest(ordered_qs=ordered_qs), self.assertRaisesMessage(FieldError, msg):\n-                ordered_qs.first()\n-\n     def test_related_ordering_duplicate_table_reference(self):\n         \"\"\"\n         An ordering referencing a model with an ordering referencing a model\ndiff --git a/tests/postgres_tests/test_ranges.py b/tests/postgres_tests/test_ranges.py\n--- a/tests/postgres_tests/test_ranges.py\n+++ b/tests/postgres_tests/test_ranges.py\n@@ -170,7 +170,7 @@ def test_datetime_range_contains(self):\n             self.aware_timestamps[1],\n             (self.timestamps[1], self.timestamps[2]),\n             (self.aware_timestamps[1], self.aware_timestamps[2]),\n-            Value(self.dates[0], output_field=DateTimeField()),\n+            Value(self.dates[0]),\n             Func(F('dates'), function='lower', output_field=DateTimeField()),\n             F('timestamps_inner'),\n         )\n",
  "problem_statement": "Automatically resolve Value's output_field for stdlib types.\nDescription\n\t\nHi,\nI have a model of AModel. AModel has a SearchVectorField named search_vector. I want to update this vector by indexing a string that is not in any other field. \nfrom django.db.models import Value\nfrom django.contrib.postgres.search import SearchVector\nAModel.objects.filter(pk=1).update(search_vector=SearchVector(Value(\"a string to be indexed and inserted to search_vector field\")))\nThis code generates this error: \nFieldError: Cannot resolve expression type, unknown output_field\nIt seemed to be a bug since I found similar usages in forums..\n",
  "hints_text": "Specifying an explicit output_field for Value should resolve your issue. value = Value( \"a string to be indexed and inserted to search_vector field\", output_field=models.TextField(), ) AModel.objects.filter(pk=1).update( search_vector=SearchVector(value), ) I guess Value._resolve_output_field could be made smarter for some stdlib types such as str, float, int, Decimal, date, datetime so I'm tentatively accepting on this basis.",
  "created_at": "2019-05-12T21:29:57Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_invalid_when_constructor_args (expressions_case.tests.CaseWhenTests)\", \"test_conditional_aggregation_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_lookup_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_simple_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_resolve_output_field (expressions.tests.ValueTests)\", \"test_resolve_output_field_failure (expressions.tests.ValueTests)\", \"test_annotate_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering_with_deferred (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_sliced_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_aggregate (expressions_case.tests.CaseExpressionTests)\", \"test_aggregate_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_exclude (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_empty_when (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_without_default (expressions_case.tests.CaseExpressionTests)\", \"test_case_reuse (expressions_case.tests.CaseExpressionTests)\", \"test_combined_expression (expressions_case.tests.CaseExpressionTests)\", \"test_combined_q_object (expressions_case.tests.CaseExpressionTests)\", \"test_join_promotion (expressions_case.tests.CaseExpressionTests)\", \"test_join_promotion_multiple_annotations (expressions_case.tests.CaseExpressionTests)\", \"test_lookup_different_fields (expressions_case.tests.CaseExpressionTests)\", \"test_lookup_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_m2m_exclude (expressions_case.tests.CaseExpressionTests)\", \"test_m2m_reuse (expressions_case.tests.CaseExpressionTests)\", \"test_order_by_conditional_explicit (expressions_case.tests.CaseExpressionTests)\", \"test_order_by_conditional_implicit (expressions_case.tests.CaseExpressionTests)\", \"test_update_duration (expressions_case.tests.CaseExpressionTests)\", \"test_update_time (expressions_case.tests.CaseExpressionTests)\", \"test_update_uuid (expressions_case.tests.CaseExpressionTests)\", \"test_combine_different_types (aggregation.tests.AggregateTestCase)\", \"test_nonfield_annotation (aggregation.tests.AggregateTestCase)\"]",
  "PASS_TO_PASS": "[\"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_ticket_24748 (aggregation_regress.tests.SelfReferentialFKTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_empty_q_object (expressions_case.tests.CaseWhenTests)\", \"test_only_when_arguments (expressions_case.tests.CaseWhenTests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_existing_join_not_promoted (aggregation_regress.tests.JoinPromotionTests)\", \"test_non_nullable_fk_not_promoted (aggregation_regress.tests.JoinPromotionTests)\", \"test_ticket_21150 (aggregation_regress.tests.JoinPromotionTests)\", \"test_complex_expressions (expressions.tests.ExpressionsNumericTests)\", \"test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)\", \"test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)\", \"test_increment_value (expressions.tests.ExpressionsNumericTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_conditional_update_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_filter_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_hash (expressions_case.tests.CaseDocumentationExamples)\", \"test_compile_unresolved (expressions.tests.ValueTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_default_ordering (ordering.tests.OrderingTests)\", \"F expressions can be used in Meta.ordering.\", \"test_default_ordering_override (ordering.tests.OrderingTests)\", \"test_extra_ordering (ordering.tests.OrderingTests)\", \"test_extra_ordering_quoting (ordering.tests.OrderingTests)\", \"test_extra_ordering_with_table_name (ordering.tests.OrderingTests)\", \"test_no_reordering_after_slicing (ordering.tests.OrderingTests)\", \"test_order_by_constant_value (ordering.tests.OrderingTests)\", \"test_order_by_f_expression (ordering.tests.OrderingTests)\", \"test_order_by_f_expression_duplicates (ordering.tests.OrderingTests)\", \"test_order_by_fk_attname (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first_and_last (ordering.tests.OrderingTests)\", \"test_order_by_nulls_last (ordering.tests.OrderingTests)\", \"test_order_by_override (ordering.tests.OrderingTests)\", \"test_order_by_pk (ordering.tests.OrderingTests)\", \"test_order_by_ptr_field_with_default_ordering_by_expression (ordering.tests.OrderingTests)\", \"test_order_by_self_referential_fk (ordering.tests.OrderingTests)\", \"test_orders_nulls_first_on_filtered_subquery (ordering.tests.OrderingTests)\", \"test_random_ordering (ordering.tests.OrderingTests)\", \"test_related_ordering_duplicate_table_reference (ordering.tests.OrderingTests)\", \"test_reverse_meta_ordering_pure (ordering.tests.OrderingTests)\", \"test_reverse_ordering_pure (ordering.tests.OrderingTests)\", \"test_reversed_ordering (ordering.tests.OrderingTests)\", \"test_stop_slicing (ordering.tests.OrderingTests)\", \"test_stop_start_slicing (ordering.tests.OrderingTests)\", \"test_aggregate_over_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_exists (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_aggregate_with_m2o (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_exists_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_filter_with_subquery (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_in_f_grouped_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_reverse_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_arguments_must_be_expressions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_f_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_boolean_value_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_chaining_annotation_filter_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_annotation_commutative (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_f_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions_can_ref_other_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_defer_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_empty_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_agg_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_wrong_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_joined_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_date_interval (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_numbers (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mti_annotations (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_null_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_aggregate (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_raw_sql_with_inherited_field (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_update_with_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_with_pk_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_count (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)\", \"test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exists_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_eq (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)\", \"test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\", \"test_date_case_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_expressions (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_annotation (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_fexpr (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_on_relation (aggregation_regress.tests.AggregationTests)\", \"test_aggregates_in_where_clause (aggregation_regress.tests.AggregationTests)\", \"test_aggregates_in_where_clause_pre_eval (aggregation_regress.tests.AggregationTests)\", \"test_aggregation_with_generic_reverse_relation (aggregation_regress.tests.AggregationTests)\", \"test_allow_distinct (aggregation_regress.tests.AggregationTests)\", \"test_annotate_and_join (aggregation_regress.tests.AggregationTests)\", \"test_annotate_distinct_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_annotate_joins (aggregation_regress.tests.AggregationTests)\", \"test_annotate_on_relation (aggregation_regress.tests.AggregationTests)\", \"test_annotate_reserved_word (aggregation_regress.tests.AggregationTests)\", \"Find ages that are shared by at least two authors.\", \"test_annotate_with_extra (aggregation_regress.tests.AggregationTests)\", \"test_annotated_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_annotation (aggregation_regress.tests.AggregationTests)\", \"test_annotation_disjunction (aggregation_regress.tests.AggregationTests)\", \"test_annotation_with_value (aggregation_regress.tests.AggregationTests)\", \"test_boolean_conversion (aggregation_regress.tests.AggregationTests)\", \"test_conditional_aggregate_on_complex_condition (aggregation_regress.tests.AggregationTests)\", \"test_db_col_table (aggregation_regress.tests.AggregationTests)\", \"test_decimal_aggregate_annotation_filter (aggregation_regress.tests.AggregationTests)\", \"test_distinct_conditional_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_duplicate_alias (aggregation_regress.tests.AggregationTests)\", \"test_empty (aggregation_regress.tests.AggregationTests)\", \"test_empty_filter_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_empty_filter_count (aggregation_regress.tests.AggregationTests)\", \"test_f_expression_annotation (aggregation_regress.tests.AggregationTests)\", \"test_field_error (aggregation_regress.tests.AggregationTests)\", \"test_field_name_conflict (aggregation_regress.tests.AggregationTests)\", \"test_filtering_by_annotation_name (aggregation_regress.tests.AggregationTests)\", \"test_fk_attname_conflict (aggregation_regress.tests.AggregationTests)\", \"test_fobj_group_by (aggregation_regress.tests.AggregationTests)\", \"test_having_group_by (aggregation_regress.tests.AggregationTests)\", \"test_m2m_name_conflict (aggregation_regress.tests.AggregationTests)\", \"test_more (aggregation_regress.tests.AggregationTests)\", \"test_more_more (aggregation_regress.tests.AggregationTests)\", \"test_more_more_more (aggregation_regress.tests.AggregationTests)\", \"test_name_expressions (aggregation_regress.tests.AggregationTests)\", \"test_name_filters (aggregation_regress.tests.AggregationTests)\", \"test_negated_aggregation (aggregation_regress.tests.AggregationTests)\", \"test_none_call_before_aggregate (aggregation_regress.tests.AggregationTests)\", \"test_pickle (aggregation_regress.tests.AggregationTests)\", \"test_quoting_aggregate_order_by (aggregation_regress.tests.AggregationTests)\", \"test_reverse_join_trimming (aggregation_regress.tests.AggregationTests)\", \"test_reverse_relation_name_conflict (aggregation_regress.tests.AggregationTests)\", \"test_stddev (aggregation_regress.tests.AggregationTests)\", \"test_ticket_11293 (aggregation_regress.tests.AggregationTests)\", \"test_ticket_11293_q_immutable (aggregation_regress.tests.AggregationTests)\", \"test_values_annotate_values (aggregation_regress.tests.AggregationTests)\", \"test_values_list_annotation_args_ordering (aggregation_regress.tests.AggregationTests)\", \"test_values_queryset_non_conflict (aggregation_regress.tests.AggregationTests)\", \"test_aggregate_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_values_not_in_order_by (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_in_clause (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_condition_with_lookups (expressions_case.tests.CaseExpressionTests)\", \"test_filter (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_without_default (expressions_case.tests.CaseExpressionTests)\", \"test_in_subquery (expressions_case.tests.CaseExpressionTests)\", \"test_update (expressions_case.tests.CaseExpressionTests)\", \"test_update_big_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_binary (expressions_case.tests.CaseExpressionTests)\", \"test_update_boolean (expressions_case.tests.CaseExpressionTests)\", \"test_update_date (expressions_case.tests.CaseExpressionTests)\", \"test_update_date_time (expressions_case.tests.CaseExpressionTests)\", \"test_update_decimal (expressions_case.tests.CaseExpressionTests)\", \"test_update_email (expressions_case.tests.CaseExpressionTests)\", \"test_update_file (expressions_case.tests.CaseExpressionTests)\", \"test_update_file_path (expressions_case.tests.CaseExpressionTests)\", \"test_update_fk (expressions_case.tests.CaseExpressionTests)\", \"test_update_float (expressions_case.tests.CaseExpressionTests)\", \"test_update_generic_ip_address (expressions_case.tests.CaseExpressionTests)\", \"test_update_image (expressions_case.tests.CaseExpressionTests)\", \"test_update_null_boolean (expressions_case.tests.CaseExpressionTests)\", \"test_update_null_boolean_old (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_big_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_small_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_slug (expressions_case.tests.CaseExpressionTests)\", \"test_update_small_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_string (expressions_case.tests.CaseExpressionTests)\", \"test_update_text (expressions_case.tests.CaseExpressionTests)\", \"test_update_url (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_join_in_condition_raise_field_error (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_join_in_predicate_raise_field_error (expressions_case.tests.CaseExpressionTests)\", \"test_update_without_default (expressions_case.tests.CaseExpressionTests)\", \"test_add_implementation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_alias (aggregation.tests.AggregateTestCase)\", \"test_aggregate_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_in_order_by (aggregation.tests.AggregateTestCase)\", \"test_aggregate_multi_join (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_expressions (aggregation.tests.AggregateTestCase)\", \"test_aggregation_order_by_not_selected_annotation_values (aggregation.tests.AggregateTestCase)\", \"Subquery annotations are excluded from the GROUP BY if they are\", \"test_aggregation_subquery_annotation_exists (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_multivalued (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_related_field (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_values (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_values_collision (aggregation.tests.AggregateTestCase)\", \"test_annotate_basic (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer_select_related (aggregation.tests.AggregateTestCase)\", \"test_annotate_m2m (aggregation.tests.AggregateTestCase)\", \"test_annotate_ordering (aggregation.tests.AggregateTestCase)\", \"test_annotate_over_annotate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_list (aggregation.tests.AggregateTestCase)\", \"test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotation (aggregation.tests.AggregateTestCase)\", \"test_annotation_expressions (aggregation.tests.AggregateTestCase)\", \"test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase)\", \"test_avg_decimal_field (aggregation.tests.AggregateTestCase)\", \"test_avg_duration_field (aggregation.tests.AggregateTestCase)\", \"test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)\", \"test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase)\", \"test_complex_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_count (aggregation.tests.AggregateTestCase)\", \"test_count_distinct_expression (aggregation.tests.AggregateTestCase)\", \"test_count_star (aggregation.tests.AggregateTestCase)\", \"test_dates_with_aggregation (aggregation.tests.AggregateTestCase)\", \"test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase)\", \"test_distinct_on_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_aggregate (aggregation.tests.AggregateTestCase)\", \"test_even_more_aggregate (aggregation.tests.AggregateTestCase)\", \"test_expression_on_aggregation (aggregation.tests.AggregateTestCase)\", \"test_filter_aggregate (aggregation.tests.AggregateTestCase)\", \"test_filtering (aggregation.tests.AggregateTestCase)\", \"test_fkey_aggregate (aggregation.tests.AggregateTestCase)\", \"test_group_by_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_group_by_subquery_annotation (aggregation.tests.AggregateTestCase)\", \"test_grouped_annotation_in_group_by (aggregation.tests.AggregateTestCase)\", \"test_more_aggregation (aggregation.tests.AggregateTestCase)\", \"test_multi_arg_aggregate (aggregation.tests.AggregateTestCase)\", \"test_multiple_aggregates (aggregation.tests.AggregateTestCase)\", \"test_non_grouped_annotation_not_in_group_by (aggregation.tests.AggregateTestCase)\", \"test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase)\", \"test_order_of_precedence (aggregation.tests.AggregateTestCase)\", \"test_related_aggregate (aggregation.tests.AggregateTestCase)\", \"test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase)\", \"test_single_aggregate (aggregation.tests.AggregateTestCase)\", \"test_sum_distinct_aggregate (aggregation.tests.AggregateTestCase)\", \"test_sum_duration_field (aggregation.tests.AggregateTestCase)\", \"test_ticket11881 (aggregation.tests.AggregateTestCase)\", \"test_ticket12886 (aggregation.tests.AggregateTestCase)\", \"test_ticket17424 (aggregation.tests.AggregateTestCase)\", \"test_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.569704",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}