{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13864",
  "base_commit": "eb1f5f29df4bcb64fa3a96e3018aefcbe99dffab",
  "patch": "diff --git a/sklearn/metrics/pairwise.py b/sklearn/metrics/pairwise.py\n--- a/sklearn/metrics/pairwise.py\n+++ b/sklearn/metrics/pairwise.py\n@@ -306,7 +306,7 @@ def _euclidean_distances_upcast(X, XX=None, Y=None, YY=None):\n     maxmem = max(\n         ((x_density * n_samples_X + y_density * n_samples_Y) * n_features\n          + (x_density * n_samples_X * y_density * n_samples_Y)) / 10,\n-        10 * 2**17)\n+        10 * 2 ** 17)\n \n     # The increase amount of memory in 8-byte blocks is:\n     # - x_density * batch_size * n_features (copy of chunk of X)\n@@ -315,7 +315,7 @@ def _euclidean_distances_upcast(X, XX=None, Y=None, YY=None):\n     # Hence xÂ² + (xd+yd)kx = M, where x=batch_size, k=n_features, M=maxmem\n     #                                 xd=x_density and yd=y_density\n     tmp = (x_density + y_density) * n_features\n-    batch_size = (-tmp + np.sqrt(tmp**2 + 4 * maxmem)) / 2\n+    batch_size = (-tmp + np.sqrt(tmp ** 2 + 4 * maxmem)) / 2\n     batch_size = max(int(batch_size), 1)\n \n     x_batches = gen_batches(X.shape[0], batch_size)\n@@ -900,7 +900,7 @@ def sigmoid_kernel(X, Y=None, gamma=None, coef0=1):\n     K = safe_sparse_dot(X, Y.T, dense_output=True)\n     K *= gamma\n     K += coef0\n-    np.tanh(K, K)   # compute tanh in-place\n+    np.tanh(K, K)  # compute tanh in-place\n     return K\n \n \n@@ -933,7 +933,7 @@ def rbf_kernel(X, Y=None, gamma=None):\n \n     K = euclidean_distances(X, Y, squared=True)\n     K *= -gamma\n-    np.exp(K, K)    # exponentiate K in-place\n+    np.exp(K, K)  # exponentiate K in-place\n     return K\n \n \n@@ -967,7 +967,7 @@ def laplacian_kernel(X, Y=None, gamma=None):\n         gamma = 1.0 / X.shape[1]\n \n     K = -gamma * manhattan_distances(X, Y)\n-    np.exp(K, K)    # exponentiate K in-place\n+    np.exp(K, K)  # exponentiate K in-place\n     return K\n \n \n@@ -1545,7 +1545,8 @@ def pairwise_distances(X, Y=None, metric=\"euclidean\", n_jobs=None, **kwds):\n \n         dtype = bool if metric in PAIRWISE_BOOLEAN_FUNCTIONS else None\n \n-        if dtype == bool and (X.dtype != bool or Y.dtype != bool):\n+        if (dtype == bool and\n+                (X.dtype != bool or (Y is not None and Y.dtype != bool))):\n             msg = \"Data was converted to boolean for metric %s\" % metric\n             warnings.warn(msg, DataConversionWarning)\n \n@@ -1576,7 +1577,6 @@ def pairwise_distances(X, Y=None, metric=\"euclidean\", n_jobs=None, **kwds):\n     'yule',\n ]\n \n-\n # Helper functions - distance\n PAIRWISE_KERNEL_FUNCTIONS = {\n     # If updating this dictionary, update the doc in both distance_metrics()\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_pairwise.py b/sklearn/metrics/tests/test_pairwise.py\n--- a/sklearn/metrics/tests/test_pairwise.py\n+++ b/sklearn/metrics/tests/test_pairwise.py\n@@ -173,6 +173,15 @@ def test_pairwise_boolean_distance(metric):\n     with pytest.warns(DataConversionWarning, match=msg):\n         pairwise_distances(X, metric=metric)\n \n+    # Check that the warning is raised if X is boolean by Y is not boolean:\n+    with pytest.warns(DataConversionWarning, match=msg):\n+        pairwise_distances(X.astype(bool), Y=Y, metric=metric)\n+\n+    # Check that no warning is raised if X is already boolean and Y is None:\n+    with pytest.warns(None) as records:\n+        pairwise_distances(X.astype(bool), metric=metric)\n+    assert len(records) == 0\n+\n \n def test_no_data_conversion_warning():\n     # No warnings issued if metric is not a boolean distance function\n",
  "problem_statement": "AttributeError thrown when calling metrics.pairwise_distances with binary metrics and Y is None\n#### Description\r\n\r\n`AttributeError` thrown when calling `metrics.pairwise_distances` with binary metrics if `Y` is `None`.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\nimport numpy as np\r\nimport sklearn\r\nbinary_data = np.array((0, 0, 0, 0, 0, 1, \r\n                        1, 0, 0, 1, 1, 0),\r\n                       dtype = \"bool\").reshape((2, 6))\r\nsklearn.metrics.pairwise_distances(binary_data, metric=\"jaccard\")\r\n```\r\n\r\n#### Expected Results\r\nNo error. Should return a `numpy.ndarray` of shape `(2, 2)` containing the pairwise distances.\r\n\r\n#### Actual Results\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-21-fa618e0f7808> in <module>\r\n----> 1 sklearn.metrics.pairwise_distances(binary_data, metric=\"jaccard\")\r\n\r\ne:\\dev\\python\\anaconda\\envs\\umap\\lib\\site-packages\\sklearn\\metrics\\pairwise.py in pairwise_distances(X, Y, metric, n_jobs, **kwds)\r\n   1562         dtype = bool if metric in PAIRWISE_BOOLEAN_FUNCTIONS else None\r\n   1563 \r\n-> 1564         if dtype == bool and (X.dtype != bool or Y.dtype != bool):\r\n   1565             msg = \"Data was converted to boolean for metric %s\" % metric\r\n   1566             warnings.warn(msg, DataConversionWarning)\r\n\r\nAttributeError: 'NoneType' object has no attribute 'dtype'\r\n```\r\n\r\n#### Versions\r\n\r\n```\r\nmachine: Windows-10-10.0.17134-SP0\r\npython: 3.7.3 (default, Apr 24 2019, 15:29:51) [MSC v.1915 64 bit (AMD64)]\r\nsklearn: 0.21.0\r\nnumpy: 1.16.3\r\nscipy: 1.2.1\r\n```\r\n\r\nThis worked correctly in sklearn version 0.20.3. I think the problem was introduced in https://github.com/scikit-learn/scikit-learn/commit/4b9e12e73b52382937029d29759976c3ef4aee3c#diff-dd76b3805500714227411a6460b149a8: there is now a code path where `Y` has its `dtype` checked without any prior check as to whether `Y` is `None`.\n",
  "hints_text": "Hi, if possible I would like to contribute to this issue! ",
  "created_at": "2019-05-11T13:28:11Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[dice]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[jaccard]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[kulsinski]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[matching]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[rogerstanimoto]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[russellrao]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalmichener]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalsneath]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[yule]\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_no_data_conversion_warning\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_kernels]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed_non_negative\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_distances-euclidean-kwds0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_distances-wminkowski-kwds1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_distances-wminkowski-kwds2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_kernels-polynomial-kwds3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_kernels-callable_rbf_kernel-kwds4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_callable_nonstrict_metric\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[rbf]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[laplacian]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[sigmoid]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[polynomial]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[linear]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[chi2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[additive_chi2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_callable\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_filter_param\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cosine-paired_cosine_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[euclidean-paired_euclidean_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l2-paired_euclidean_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l1-paired_manhattan_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[manhattan-paired_manhattan_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cityblock-paired_manhattan_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances_callable\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_argmin_min\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-ValueError-length\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-returned\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-,\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[euclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[l2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[sqeuclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-dense]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-sparse]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-dense]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-sparse]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1-float32-0.0001-1e-05]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1000000-float32-0.0001-1e-05]\", \"sklearn/metrics/tests/test_pairwise.py::test_cosine_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_haversine_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_euclidean_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_manhattan_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_chi_square_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[linear_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[polynomial_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[rbf_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[laplacian_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[sigmoid_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[cosine_similarity]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[linear_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[polynomial_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[rbf_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[laplacian_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[sigmoid_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[cosine_similarity]\", \"sklearn/metrics/tests/test_pairwise.py::test_linear_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_rbf_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_laplacian_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[linear-linear_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[cosine-cosine_similarity]\", \"sklearn/metrics/tests/test_pairwise.py::test_cosine_similarity\", \"sklearn/metrics/tests/test_pairwise.py::test_check_dense_matrices\", \"sklearn/metrics/tests/test_pairwise.py::test_check_XB_returned\", \"sklearn/metrics/tests/test_pairwise.py::test_check_different_dimensions\", \"sklearn/metrics/tests/test_pairwise.py::test_check_invalid_dimensions\", \"sklearn/metrics/tests/test_pairwise.py::test_check_sparse_arrays\", \"sklearn/metrics/tests/test_pairwise.py::test_check_tuple_input\", \"sklearn/metrics/tests/test_pairwise.py::test_check_preserve_type\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_data_derived_params[Y\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.999050",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}