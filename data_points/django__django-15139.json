{
  "repo": "django/django",
  "instance_id": "django__django-15139",
  "base_commit": "08d8bccbf1b0764a0de68325569ee47da256e206",
  "patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -210,8 +210,10 @@ def get_expiry_age(self, **kwargs):\n \n         if not expiry:   # Checks both None and 0 cases\n             return self.get_session_cookie_age()\n-        if not isinstance(expiry, datetime):\n+        if not isinstance(expiry, (datetime, str)):\n             return expiry\n+        if isinstance(expiry, str):\n+            expiry = datetime.fromisoformat(expiry)\n         delta = expiry - modification\n         return delta.days * 86400 + delta.seconds\n \n@@ -233,6 +235,8 @@ def get_expiry_date(self, **kwargs):\n \n         if isinstance(expiry, datetime):\n             return expiry\n+        elif isinstance(expiry, str):\n+            return datetime.fromisoformat(expiry)\n         expiry = expiry or self.get_session_cookie_age()\n         return modification + timedelta(seconds=expiry)\n \n@@ -260,6 +264,8 @@ def set_expiry(self, value):\n             return\n         if isinstance(value, timedelta):\n             value = timezone.now() + value\n+        if isinstance(value, datetime):\n+            value = value.isoformat()\n         self['_session_expiry'] = value\n \n     def get_expire_at_browser_close(self):\n@@ -269,9 +275,9 @@ def get_expire_at_browser_close(self):\n         ``get_expiry_date()`` or ``get_expiry_age()`` to find the actual expiry\n         date/age, if there is one.\n         \"\"\"\n-        if self.get('_session_expiry') is None:\n+        if (expiry := self.get('_session_expiry')) is None:\n             return settings.SESSION_EXPIRE_AT_BROWSER_CLOSE\n-        return self.get('_session_expiry') == 0\n+        return expiry == 0\n \n     def flush(self):\n         \"\"\"\ndiff --git a/django/contrib/sessions/serializers.py b/django/contrib/sessions/serializers.py\n--- a/django/contrib/sessions/serializers.py\n+++ b/django/contrib/sessions/serializers.py\n@@ -1,3 +1,4 @@\n+# RemovedInDjango50Warning.\n from django.core.serializers.base import (\n     PickleSerializer as BasePickleSerializer,\n )\ndiff --git a/django/core/cache/backends/redis.py b/django/core/cache/backends/redis.py\n--- a/django/core/cache/backends/redis.py\n+++ b/django/core/cache/backends/redis.py\n@@ -1,31 +1,30 @@\n \"\"\"Redis cache backend.\"\"\"\n \n+import pickle\n import random\n import re\n \n from django.core.cache.backends.base import DEFAULT_TIMEOUT, BaseCache\n-from django.core.serializers.base import PickleSerializer\n from django.utils.functional import cached_property\n from django.utils.module_loading import import_string\n \n \n-class RedisSerializer(PickleSerializer):\n-    \"\"\"\n-    Similar to PickSerializer, except integers are serialized as native Redis\n-    integers for better incr() and decr() atomicity.\n-    \"\"\"\n+class RedisSerializer:\n+    def __init__(self, protocol=None):\n+        self.protocol = pickle.HIGHEST_PROTOCOL if protocol is None else protocol\n+\n     def dumps(self, obj):\n         # Only skip pickling for integers, a int subclasses as bool should be\n         # pickled.\n         if type(obj) is int:\n             return obj\n-        return super().dumps(obj)\n+        return pickle.dumps(obj, self.protocol)\n \n     def loads(self, data):\n         try:\n             return int(data)\n         except ValueError:\n-            return super().loads(data)\n+            return pickle.loads(data)\n \n \n class RedisCacheClient:\ndiff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -2,10 +2,12 @@\n Module for abstract serializer/unserializer base classes.\n \"\"\"\n import pickle\n+import warnings\n from io import StringIO\n \n from django.core.exceptions import ObjectDoesNotExist\n from django.db import models\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n DEFER_FIELD = object()\n \n@@ -16,6 +18,11 @@ class PickleSerializer:\n     cache backends.\n     \"\"\"\n     def __init__(self, protocol=None):\n+        warnings.warn(\n+            'PickleSerializer is deprecated due to its security risk. Use '\n+            'JSONSerializer instead.',\n+            RemovedInDjango50Warning,\n+        )\n         self.protocol = pickle.HIGHEST_PROTOCOL if protocol is None else protocol\n \n     def dumps(self, obj):\n",
  "test_patch": "diff --git a/tests/defer_regress/tests.py b/tests/defer_regress/tests.py\n--- a/tests/defer_regress/tests.py\n+++ b/tests/defer_regress/tests.py\n@@ -4,7 +4,8 @@\n from django.contrib.sessions.backends.db import SessionStore\n from django.db import models\n from django.db.models import Count\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, ignore_warnings, override_settings\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n from .models import (\n     Base, Child, Derived, Feature, Item, ItemAndSimpleItem, Leaf, Location,\n@@ -91,6 +92,7 @@ def test_basic(self):\n             list(SimpleItem.objects.annotate(Count('feature')).only('name')),\n             list)\n \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n     @override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer')\n     def test_ticket_12163(self):\n         # Test for #12163 - Pickling error saving session with unsaved model\ndiff --git a/tests/serializers/tests.py b/tests/serializers/tests.py\n--- a/tests/serializers/tests.py\n+++ b/tests/serializers/tests.py\n@@ -10,7 +10,8 @@\n from django.db import connection, transaction\n from django.http import HttpResponse\n from django.test import SimpleTestCase, override_settings, skipUnlessDBFeature\n-from django.test.utils import Approximate\n+from django.test.utils import Approximate, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n from .models import (\n     Actor, Article, Author, AuthorProfile, BaseModel, Category, Child,\n@@ -420,6 +421,7 @@ def test_forward_refs(self):\n \n \n class PickleSerializerTests(SimpleTestCase):\n+    @ignore_warnings(category=RemovedInDjango50Warning)\n     def test_serializer_protocol(self):\n         serializer = PickleSerializer(protocol=3)\n         self.assertEqual(serializer.protocol, 3)\n@@ -427,12 +429,21 @@ def test_serializer_protocol(self):\n         serializer = PickleSerializer()\n         self.assertEqual(serializer.protocol, pickle.HIGHEST_PROTOCOL)\n \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n     def test_serializer_loads_dumps(self):\n         serializer = PickleSerializer()\n         test_data = 'test data'\n         dump = serializer.dumps(test_data)\n         self.assertEqual(serializer.loads(dump), test_data)\n \n+    def test_serializer_warning(self):\n+        msg = (\n+            'PickleSerializer is deprecated due to its security risk. Use '\n+            'JSONSerializer instead.'\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango50Warning, msg):\n+            PickleSerializer()\n+\n \n def register_tests(test_class, method_name, test_func, exclude=()):\n     \"\"\"\ndiff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -7,6 +7,7 @@\n from datetime import timedelta\n from http import cookies\n from pathlib import Path\n+from unittest import mock\n \n from django.conf import settings\n from django.contrib.sessions.backends.base import UpdateError\n@@ -24,9 +25,7 @@\n )\n from django.contrib.sessions.middleware import SessionMiddleware\n from django.contrib.sessions.models import Session\n-from django.contrib.sessions.serializers import (\n-    JSONSerializer, PickleSerializer,\n-)\n+from django.contrib.sessions.serializers import JSONSerializer\n from django.core import management\n from django.core.cache import caches\n from django.core.cache.backends.base import InvalidCacheBackendError\n@@ -333,25 +332,20 @@ def test_decode_serializer_exception(self):\n         self.assertEqual(self.session.decode(encoded), {})\n \n     def test_actual_expiry(self):\n-        # this doesn't work with JSONSerializer (serializing timedelta)\n-        with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n-            self.session = self.backend()  # reinitialize after overriding settings\n-\n-            # Regression test for #19200\n-            old_session_key = None\n-            new_session_key = None\n-            try:\n-                self.session['foo'] = 'bar'\n-                self.session.set_expiry(-timedelta(seconds=10))\n-                self.session.save()\n-                old_session_key = self.session.session_key\n-                # With an expiry date in the past, the session expires instantly.\n-                new_session = self.backend(self.session.session_key)\n-                new_session_key = new_session.session_key\n-                self.assertNotIn('foo', new_session)\n-            finally:\n-                self.session.delete(old_session_key)\n-                self.session.delete(new_session_key)\n+        old_session_key = None\n+        new_session_key = None\n+        try:\n+            self.session['foo'] = 'bar'\n+            self.session.set_expiry(-timedelta(seconds=10))\n+            self.session.save()\n+            old_session_key = self.session.session_key\n+            # With an expiry date in the past, the session expires instantly.\n+            new_session = self.backend(self.session.session_key)\n+            new_session_key = new_session.session_key\n+            self.assertNotIn('foo', new_session)\n+        finally:\n+            self.session.delete(old_session_key)\n+            self.session.delete(new_session_key)\n \n     def test_session_load_does_not_create_record(self):\n         \"\"\"\n@@ -885,9 +879,8 @@ def test_unpickling_exception(self):\n         # by creating a new session\n         self.assertEqual(self.session.serializer, JSONSerializer)\n         self.session.save()\n-\n-        self.session.serializer = PickleSerializer\n-        self.session.load()\n+        with mock.patch('django.core.signing.loads', side_effect=ValueError):\n+            self.session.load()\n \n     @unittest.skip(\"Cookie backend doesn't have an external store to create records in.\")\n     def test_session_load_does_not_create_record(self):\n",
  "problem_statement": "Deprecate PickleSerializer and move it out of core\nDescription\n\t\nPickle serializer has long been known to be dangerous. This is mitigated by requiring MAC on pickle in cookies, but nevertheless, RCEs continue to happen: ​https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/\nTo further discourage it's use, we should consider deprecating PickleSerializer and moving it into a third party package.\n",
  "hints_text": "​django-developers thread\nI've solved pickle problems for a couple clients so I thought it's worth picking this up.",
  "created_at": "2021-11-29T17:25:00Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_serializer_warning (serializers.tests.PickleSerializerTests)\", \"test_actual_expiry (sessions_tests.tests.FileSessionTests)\", \"test_actual_expiry (sessions_tests.tests.FileSessionPathLibTests)\", \"test_actual_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_actual_expiry (sessions_tests.tests.CacheDBSessionTests)\", \"test_actual_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_actual_expiry (sessions_tests.tests.DatabaseSessionTests)\", \"test_actual_expiry (sessions_tests.tests.CustomDatabaseSessionTests)\"]",
  "PASS_TO_PASS": "[\"test_serializer_loads_dumps (serializers.tests.PickleSerializerTests)\", \"test_serializer_protocol (serializers.tests.PickleSerializerTests)\", \"test_stream_class (serializers.tests.SerializerAPITests)\", \"test_defer_annotate_select_related (defer_regress.tests.DeferAnnotateSelectRelatedTest)\", \"test_delete_defered_model (defer_regress.tests.DeferDeletionSignalsTests)\", \"test_delete_defered_proxy_model (defer_regress.tests.DeferDeletionSignalsTests)\", \"test_clear (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CookieSessionTests)\", \"This test tested cycle_key() which would create a new session\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CookieSessionTests)\", \"test_decode (sessions_tests.tests.CookieSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CookieSessionTests)\", \"test_decode_serializer_exception (sessions_tests.tests.CookieSessionTests)\", \"test_default_expiry (sessions_tests.tests.CookieSessionTests)\", \"test_delete (sessions_tests.tests.CookieSessionTests)\", \"test_flush (sessions_tests.tests.CookieSessionTests)\", \"test_get_empty (sessions_tests.tests.CookieSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CookieSessionTests)\", \"test_has_key (sessions_tests.tests.CookieSessionTests)\", \"test_invalid_key (sessions_tests.tests.CookieSessionTests)\", \"test_items (sessions_tests.tests.CookieSessionTests)\", \"test_keys (sessions_tests.tests.CookieSessionTests)\", \"test_new_session (sessions_tests.tests.CookieSessionTests)\", \"test_pop (sessions_tests.tests.CookieSessionTests)\", \"test_pop_default (sessions_tests.tests.CookieSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CookieSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CookieSessionTests)\", \"This test tested exists() in the other session backends, but that\", \"test_save_doesnt_clear_data (sessions_tests.tests.CookieSessionTests)\", \"Falsey values (Such as an empty string) are rejected.\", \"test_session_key_is_read_only (sessions_tests.tests.CookieSessionTests)\", \"Strings shorter than 8 characters are rejected.\", \"Strings of length 8 and up are accepted and stored.\", \"test_setdefault (sessions_tests.tests.CookieSessionTests)\", \"test_store (sessions_tests.tests.CookieSessionTests)\", \"test_unpickling_exception (sessions_tests.tests.CookieSessionTests)\", \"test_update (sessions_tests.tests.CookieSessionTests)\", \"test_values (sessions_tests.tests.CookieSessionTests)\", \"test_actual_expiry (sessions_tests.tests.CacheSessionTests)\", \"test_clear (sessions_tests.tests.CacheSessionTests)\", \"test_create_and_save (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CacheSessionTests)\", \"test_cycle (sessions_tests.tests.CacheSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CacheSessionTests)\", \"test_decode (sessions_tests.tests.CacheSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CacheSessionTests)\", \"test_decode_serializer_exception (sessions_tests.tests.CacheSessionTests)\", \"test_default_cache (sessions_tests.tests.CacheSessionTests)\", \"test_default_expiry (sessions_tests.tests.CacheSessionTests)\", \"test_delete (sessions_tests.tests.CacheSessionTests)\", \"test_flush (sessions_tests.tests.CacheSessionTests)\", \"test_get_empty (sessions_tests.tests.CacheSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CacheSessionTests)\", \"test_has_key (sessions_tests.tests.CacheSessionTests)\", \"test_invalid_key (sessions_tests.tests.CacheSessionTests)\", \"test_items (sessions_tests.tests.CacheSessionTests)\", \"test_keys (sessions_tests.tests.CacheSessionTests)\", \"test_load_overlong_key (sessions_tests.tests.CacheSessionTests)\", \"test_new_session (sessions_tests.tests.CacheSessionTests)\", \"test_non_default_cache (sessions_tests.tests.CacheSessionTests)\", \"test_pop (sessions_tests.tests.CacheSessionTests)\", \"test_pop_default (sessions_tests.tests.CacheSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CacheSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheSessionTests)\", \"test_save (sessions_tests.tests.CacheSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CacheSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CacheSessionTests)\", \"Loading an unknown session key does not create a session record.\", \"Sessions shouldn't be resurrected by a concurrent request.\", \"test_setdefault (sessions_tests.tests.CacheSessionTests)\", \"test_store (sessions_tests.tests.CacheSessionTests)\", \"test_update (sessions_tests.tests.CacheSessionTests)\", \"test_values (sessions_tests.tests.CacheSessionTests)\", \"If a session is emptied of data but still has a key, it should still\", \"test_flush_empty_without_session_cookie_doesnt_set_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_no_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_samesite_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_secure_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_delete_on_end (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_delete_on_end_with_custom_domain_and_path (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_save_on_500 (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_update_error_redirect (sessions_tests.tests.SessionMiddlewareTests)\", \"test_clear (sessions_tests.tests.FileSessionTests)\", \"Test clearsessions command for clearing expired sessions.\", \"test_configuration_check (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.FileSessionTests)\", \"test_cycle (sessions_tests.tests.FileSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.FileSessionTests)\", \"test_decode (sessions_tests.tests.FileSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.FileSessionTests)\", \"test_decode_serializer_exception (sessions_tests.tests.FileSessionTests)\", \"test_default_expiry (sessions_tests.tests.FileSessionTests)\", \"test_delete (sessions_tests.tests.FileSessionTests)\", \"test_flush (sessions_tests.tests.FileSessionTests)\", \"test_get_empty (sessions_tests.tests.FileSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.FileSessionTests)\", \"test_has_key (sessions_tests.tests.FileSessionTests)\", \"test_invalid_key (sessions_tests.tests.FileSessionTests)\", \"test_invalid_key_backslash (sessions_tests.tests.FileSessionTests)\", \"test_invalid_key_forwardslash (sessions_tests.tests.FileSessionTests)\", \"test_items (sessions_tests.tests.FileSessionTests)\", \"test_keys (sessions_tests.tests.FileSessionTests)\", \"test_new_session (sessions_tests.tests.FileSessionTests)\", \"test_pop (sessions_tests.tests.FileSessionTests)\", \"test_pop_default (sessions_tests.tests.FileSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.FileSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.FileSessionTests)\", \"test_save (sessions_tests.tests.FileSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.FileSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.FileSessionTests)\", \"test_setdefault (sessions_tests.tests.FileSessionTests)\", \"test_store (sessions_tests.tests.FileSessionTests)\", \"test_update (sessions_tests.tests.FileSessionTests)\", \"test_values (sessions_tests.tests.FileSessionTests)\", \"test_basic (defer_regress.tests.DeferRegressionTest)\", \"test_defer_with_select_related (defer_regress.tests.DeferRegressionTest)\", \"test_only_and_defer_usage_on_proxy_models (defer_regress.tests.DeferRegressionTest)\", \"test_only_with_select_related (defer_regress.tests.DeferRegressionTest)\", \"test_proxy_model_defer_with_select_related (defer_regress.tests.DeferRegressionTest)\", \"test_resolve_columns (defer_regress.tests.DeferRegressionTest)\", \"test_reverse_one_to_one_relations (defer_regress.tests.DeferRegressionTest)\", \"test_ticket_12163 (defer_regress.tests.DeferRegressionTest)\", \"test_ticket_16409 (defer_regress.tests.DeferRegressionTest)\", \"test_ticket_23270 (defer_regress.tests.DeferRegressionTest)\", \"test_clear (sessions_tests.tests.FileSessionPathLibTests)\", \"test_configuration_check (sessions_tests.tests.FileSessionPathLibTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.FileSessionPathLibTests)\", \"test_custom_expiry_reset (sessions_tests.tests.FileSessionPathLibTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.FileSessionPathLibTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.FileSessionPathLibTests)\", \"test_cycle (sessions_tests.tests.FileSessionPathLibTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.FileSessionPathLibTests)\", \"test_decode (sessions_tests.tests.FileSessionPathLibTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.FileSessionPathLibTests)\", \"test_decode_serializer_exception (sessions_tests.tests.FileSessionPathLibTests)\", \"test_default_expiry (sessions_tests.tests.FileSessionPathLibTests)\", \"test_delete (sessions_tests.tests.FileSessionPathLibTests)\", \"test_flush (sessions_tests.tests.FileSessionPathLibTests)\", \"test_get_empty (sessions_tests.tests.FileSessionPathLibTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.FileSessionPathLibTests)\", \"test_has_key (sessions_tests.tests.FileSessionPathLibTests)\", \"test_invalid_key (sessions_tests.tests.FileSessionPathLibTests)\", \"test_invalid_key_backslash (sessions_tests.tests.FileSessionPathLibTests)\", \"test_invalid_key_forwardslash (sessions_tests.tests.FileSessionPathLibTests)\", \"test_items (sessions_tests.tests.FileSessionPathLibTests)\", \"test_keys (sessions_tests.tests.FileSessionPathLibTests)\", \"test_new_session (sessions_tests.tests.FileSessionPathLibTests)\", \"test_pop (sessions_tests.tests.FileSessionPathLibTests)\", \"test_pop_default (sessions_tests.tests.FileSessionPathLibTests)\", \"test_pop_default_named_argument (sessions_tests.tests.FileSessionPathLibTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.FileSessionPathLibTests)\", \"test_save (sessions_tests.tests.FileSessionPathLibTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.FileSessionPathLibTests)\", \"test_session_key_is_read_only (sessions_tests.tests.FileSessionPathLibTests)\", \"test_setdefault (sessions_tests.tests.FileSessionPathLibTests)\", \"test_store (sessions_tests.tests.FileSessionPathLibTests)\", \"test_update (sessions_tests.tests.FileSessionPathLibTests)\", \"test_values (sessions_tests.tests.FileSessionPathLibTests)\", \"test_clear (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_cycle (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_decode (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_decode_serializer_exception (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_default_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_delete (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_flush (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_get_empty (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_has_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_invalid_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_items (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_keys (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_load_overlong_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_new_session (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_non_default_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop_default (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_save (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_setdefault (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_store (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_update (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_values (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_clear (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionTests)\", \"test_cycle (sessions_tests.tests.CacheDBSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionTests)\", \"test_decode (sessions_tests.tests.CacheDBSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionTests)\", \"test_decode_serializer_exception (sessions_tests.tests.CacheDBSessionTests)\", \"test_default_expiry (sessions_tests.tests.CacheDBSessionTests)\", \"test_delete (sessions_tests.tests.CacheDBSessionTests)\", \"test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionTests)\", \"test_flush (sessions_tests.tests.CacheDBSessionTests)\", \"test_get_empty (sessions_tests.tests.CacheDBSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionTests)\", \"test_has_key (sessions_tests.tests.CacheDBSessionTests)\", \"test_invalid_key (sessions_tests.tests.CacheDBSessionTests)\", \"test_items (sessions_tests.tests.CacheDBSessionTests)\", \"test_keys (sessions_tests.tests.CacheDBSessionTests)\", \"test_load_overlong_key (sessions_tests.tests.CacheDBSessionTests)\", \"test_new_session (sessions_tests.tests.CacheDBSessionTests)\", \"test_non_default_cache (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop_default (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionTests)\", \"test_save (sessions_tests.tests.CacheDBSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionTests)\", \"test_setdefault (sessions_tests.tests.CacheDBSessionTests)\", \"test_store (sessions_tests.tests.CacheDBSessionTests)\", \"test_update (sessions_tests.tests.CacheDBSessionTests)\", \"test_values (sessions_tests.tests.CacheDBSessionTests)\", \"test_clear (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_cycle (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_decode (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_decode_serializer_exception (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_default_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_delete (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_flush (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_get_empty (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_has_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_invalid_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_items (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_keys (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_new_session (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop_default (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_save (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"Test we can use Session.get_decoded to retrieve data stored\", \"test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"Session repr should be the session key.\", \"Test SessionManager.save method\", \"test_setdefault (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_store (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_update (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_values (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_clear (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionTests)\", \"test_cycle (sessions_tests.tests.DatabaseSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionTests)\", \"test_decode (sessions_tests.tests.DatabaseSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionTests)\", \"test_decode_serializer_exception (sessions_tests.tests.DatabaseSessionTests)\", \"test_default_expiry (sessions_tests.tests.DatabaseSessionTests)\", \"test_delete (sessions_tests.tests.DatabaseSessionTests)\", \"test_flush (sessions_tests.tests.DatabaseSessionTests)\", \"test_get_empty (sessions_tests.tests.DatabaseSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionTests)\", \"test_has_key (sessions_tests.tests.DatabaseSessionTests)\", \"test_invalid_key (sessions_tests.tests.DatabaseSessionTests)\", \"test_items (sessions_tests.tests.DatabaseSessionTests)\", \"test_keys (sessions_tests.tests.DatabaseSessionTests)\", \"test_new_session (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop_default (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionTests)\", \"test_save (sessions_tests.tests.DatabaseSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionTests)\", \"test_setdefault (sessions_tests.tests.DatabaseSessionTests)\", \"test_store (sessions_tests.tests.DatabaseSessionTests)\", \"test_update (sessions_tests.tests.DatabaseSessionTests)\", \"test_values (sessions_tests.tests.DatabaseSessionTests)\", \"test_clear (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_cycle (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_decode (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_decode_serializer_exception (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_default_expiry (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_delete (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_extra_session_field (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_flush (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_get_empty (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_has_key (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_invalid_key (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_items (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_keys (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_new_session (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop_default (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_save (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_setdefault (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_store (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_update (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_values (sessions_tests.tests.CustomDatabaseSessionTests)\", \"Requesting a list of serializer formats populates the registry\", \"test_get_unknown_deserializer (serializers.tests.SerializerRegistrationTests)\", \"#15889: get_serializer('nonsense') raises a SerializerDoesNotExist\", \"Registering a new serializer populates the full registry. Refs #14823\", \"Unregistering a serializer doesn't cause the registry to be repopulated. Refs #14823\", \"test_unregister_unknown_serializer (serializers.tests.SerializerRegistrationTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.719720",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}