{
  "repo": "django/django",
  "instance_id": "django__django-11688",
  "base_commit": "cece802dbb021f92802be74c8ff9ac87976441ff",
  "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -8,6 +8,7 @@\n import functools\n import inspect\n import re\n+import string\n from importlib import import_module\n from urllib.parse import quote\n \n@@ -206,6 +207,8 @@ def _route_to_regex(route, is_endpoint=False):\n     For example, 'foo/<int:pk>' returns '^foo\\\\/(?P<pk>[0-9]+)'\n     and {'pk': <django.urls.converters.IntConverter>}.\n     \"\"\"\n+    if not set(route).isdisjoint(string.whitespace):\n+        raise ImproperlyConfigured(\"URL route '%s' cannot contain whitespace.\" % route)\n     original_route = route\n     parts = ['^']\n     converters = {}\n",
  "test_patch": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -130,6 +130,11 @@ def test_invalid_converter(self):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             path('foo/<nonexistent:var>/', empty_view)\n \n+    def test_space_in_route(self):\n+        msg = \"URL route 'space/<int: num>' cannot contain whitespace.\"\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            path('space/<int: num>', empty_view)\n+\n \n @override_settings(ROOT_URLCONF='urlpatterns.converter_urls')\n class ConverterTests(SimpleTestCase):\n",
  "problem_statement": "path converters don't handle spaces well.\nDescription\n\t\nThis came up for someone on IRC last week, but I can't see that they raised a ticket about it.\nCorrect:\n>>> from django.urls.resolvers import _route_to_regex\n>>> _route_to_regex(\"<uuid:test>\")\n('^(?P<test>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})',\n {'test': <django.urls.converters.UUIDConverter at 0x1055e8c88>})\nAlso working correctly:\n>>> from django.urls.resolvers import _route_to_regex\n>>> _route_to_regex(\"<uuid:2>\")\nImproperlyConfigured: URL route '<uuid:2>' uses parameter name '2' which isn't a valid Python identifier.\nhowever, constructing a valid looking converter reference apparently hits neither the happy nor the unhappy path, and also I presume passes any system checks in place that might otherwise warn about the sensitivity:\n>>> from django.urls.resolvers import _route_to_regex\n>>> _route_to_regex(\"<uuid: test>\") # note the preceeding space\n('^\\\\<uuid\\\\:\\\\ test\\\\>', {})\nthe regex is invalid\nthe kwargs dictionary is (sort of rightly) empty.\nthe same is true with \"test \" and \"te st\"\nUnless I'm misunderstanding the code therein, \"test \", \" test\" and \"te st\" should all be hitting the invalid identifier part, and personally I feel like leading/trailing spaces at least could just be sanitised (stripped) as they're almost certainly accidental or for display purposes.\nTested in a shell against master @ 7eb556a6c2b2ac9313158f8b812eebea02a43f20.\n",
  "hints_text": "Thanks for the report Keryn. This looks reasonable.\nhappy to look into this.\nI ran into this recently and ended up diagnosing the failure so I really hope you do not mind me jumping in and offering a PR Jeff. The path parameter regex was just a bit too strict about parsing spaces, and so ended up ignoring the pattern entirely PR: â€‹https://github.com/django/django/pull/10336 I believe this fixes the issue but I'm not sure how much we want to document this. Should we raise a check failure?\nI think it would be be best to prohibit whitespace.\nI agree, prohibiting whitespace would be best, it would avoid 'dialects' of urlconfs appearing and the potential for future problems.\nTim, Adam, So do we want to raise ImproperlyConfigured when whitespace is used ?",
  "created_at": "2019-08-19T15:33:10Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_space_in_route (urlpatterns.tests.SimplifiedURLTests)\"]",
  "PASS_TO_PASS": "[\"test_allows_non_ascii_but_valid_identifiers (urlpatterns.tests.ParameterRestrictionTests)\", \"test_non_identifier_parameter_name_causes_exception (urlpatterns.tests.ParameterRestrictionTests)\", \"test_resolve_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_resolve_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_reverse_value_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_matching_urls (urlpatterns.tests.ConverterTests)\", \"test_nonmatching_urls (urlpatterns.tests.ConverterTests)\", \"test_converter_resolve (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse_with_second_layer_instance_namespace (urlpatterns.tests.SimplifiedURLTests)\", \"test_invalid_converter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_matchable (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_reversible (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_double_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_empty_string_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_multiple_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_typed_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_without_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_with_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_without_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path_with_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_two_variable_at_start_of_path_pattern (urlpatterns.tests.SimplifiedURLTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.580457",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}