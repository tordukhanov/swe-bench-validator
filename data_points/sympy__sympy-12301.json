{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12301",
  "base_commit": "5155b7641fa389e10aeb5cfebcbefba02cb9221c",
  "patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -310,10 +310,18 @@ def update(k):\n             # remove it\n             if Func is Add:\n                 take = min(func_dicts[k][i] for i in com_dict)\n-                com_func_take = Mul(take, from_dict(com_dict), evaluate=False)\n+                _sum = from_dict(com_dict)\n+                if take == 1:\n+                    com_func_take = _sum\n+                else:\n+                    com_func_take = Mul(take, _sum, evaluate=False)\n             else:\n                 take = igcd(*[func_dicts[k][i] for i in com_dict])\n-                com_func_take = Pow(from_dict(com_dict), take, evaluate=False)\n+                base = from_dict(com_dict)\n+                if take == 1:\n+                    com_func_take = base\n+                else:\n+                    com_func_take = Pow(base, take, evaluate=False)\n             for di in com_dict:\n                 func_dicts[k][di] -= take*com_dict[di]\n             # compute the remaining expression\n@@ -546,23 +554,12 @@ def _rebuild(expr):\n     #     R = [(x0, d + f), (x1, b + d)]\n     #     C = [e + x0 + x1, g + x0 + x1, a + c + d + f + g]\n     # but the args of C[-1] should not be `(a + c, d + f + g)`\n-    nested = [[i for i in f.args if isinstance(i, f.func)] for f in exprs]\n     for i in range(len(exprs)):\n         F = reduced_exprs[i].func\n         if not (F is Mul or F is Add):\n             continue\n-        nested = [a for a in exprs[i].args if isinstance(a, F)]\n-        args = []\n-        for a in reduced_exprs[i].args:\n-            if isinstance(a, F):\n-                for ai in a.args:\n-                    if isinstance(ai, F) and ai not in nested:\n-                        args.extend(ai.args)\n-                    else:\n-                        args.append(ai)\n-            else:\n-                args.append(a)\n-        reduced_exprs[i] = F(*args)\n+        if any(isinstance(a, F) for a in reduced_exprs[i].args):\n+            reduced_exprs[i] = F(*reduced_exprs[i].args)\n \n     return replacements, reduced_exprs\n \n",
  "test_patch": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -422,6 +422,13 @@ def test_issue_8891():\n \n \n def test_issue_11230():\n+    # a specific test that always failed\n+    a, b, f, k, l, i = symbols('a b f k l i')\n+    p = [a*b*f*k*l, a*i*k**2*l, f*i*k**2*l]\n+    R, C = cse(p)\n+    assert not any(i.is_Mul for a in C for i in a.args)\n+\n+    # random tests for the issue\n     from random import choice\n     from sympy.core.function import expand_mul\n     s = symbols('a:m')\n",
  "problem_statement": "Test failure in Travis\n```\n______________ sympy/simplify/tests/test_cse.py:test_issue_11230 _______________\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/sympy-1.0.1.dev0-py3.5.egg/sympy/simplify/tests/test_cse.py\", line 433, in test_issue_11230\n    assert not any(i.is_Mul for a in C for i in a.args)\nAssertionError\n```\n\nI was able to reproduce this locally on a 64-bit system running Ubuntu 16.04.\n\nHow to reproduce:\n\n``` bash\nconda create -n test_sympy python=3.5 matplotlib numpy scipy pip llvmlite\nsource activate test_sympy\npython\n```\n\n``` Python\n>>> import os\n>>> os.environ['PYTHONHASHSEED'] = '736538842'\n>>> import sympy\n>>> sympy.test(split='4/4', seed=57601301)\n```\n\n",
  "hints_text": "Log is here, https://travis-ci.org/sympy/sympy/jobs/163790187\nPermanent link, https://gist.github.com/isuruf/9410c21df1be658d168727018007a63a\n\nping @smichr \n\nSeeing jobs failing frequently now\nhttps://travis-ci.org/sympy/sympy/jobs/164977570\nhttps://travis-ci.org/sympy/sympy/jobs/164880234\n\nIt seems that the failure is generated in the following way.\n\n```\n>>> from sympy import cse\n>>> from sympy.abc import a, c, i, g, l, m\n>>> p = [c*g*i**2*m, a*c*i*l*m, g*i**2*l*m]\n>>> cse(p)\n([(x0, g*i), (x1, i*m)], [c*x0*x1, a*l*(c*i*m), l*x0*x1])\n```\n\n`c*i*m` is recognized as a common factor of the first two expressions, and is marked as a candidate by writing it in the form `(c*i*m)**1` by [`update`](https://github.com/sympy/sympy/blob/master/sympy/simplify/cse_main.py#L316). It is later abandoned as a part of `c*g*i**2*m` and is left alone in `a*c*i*l*m`. When its expression tree is rebuilt, the following results.\n\n```\n>>> from sympy import Mul, Pow\n>>> Mul(a, l, Pow(c*i*m, 1, evaluate=False))\na*l*(c*i*m)\n```\n\n(`x0*x1 = g*i**2*m` is not recognized as a common subexpression for some reason.)\n\nDo we have a fix for this? If not, let's revert the PR. @smichr \n\n@smichr, ping.\n\nJust seeing this now. I thought that there was a line of code to remove exponents of \"`1\". I may be able to look at this tomorrow, but it's more realistic to expect a delay up until Friday. I'll see what I can do but if this is really a hassle for tests it can be reverted and I'll try again later.\n\nThanks for looking into this. We can wait for a few more days.\n\nI am working on this...perhaps can finish before Monday. I am getting 3 different possibilities, @jksuom for the test expression you gave:\r\n\r\n```\r\n============================= test process starts =============================\r\nexecutable:         C:\\Python27\\python.exe  (2.7.7-final-0) [CPython]\r\narchitecture:       32-bit\r\ncache:              yes\r\nground types:       python\r\nrandom seed:        36014997\r\nhash randomization: on (PYTHONHASHSEED=643787914)\r\n\r\nsympy\\simplify\\tests\\test_cse.py[1] ([(x0, g*i), (x1, i*m)], [c*x0*x1, a*c*l*x1, l*x0*x1])\r\n.                                      [OK]\r\n\r\n================== tests finished: 1 passed, in 0.48 seconds ==================\r\nrerun 3\r\n============================= test process starts =============================\r\nexecutable:         C:\\Python27\\python.exe  (2.7.7-final-0) [CPython]\r\narchitecture:       32-bit\r\ncache:              yes\r\nground types:       python\r\nrandom seed:        30131441\r\nhash randomization: on (PYTHONHASHSEED=2864749239)\r\n\r\nsympy\\simplify\\tests\\test_cse.py[1] ([(x0, g*i), (x1, c*i*m)], [x0*x1, a*l*x1, i*l*m*x0])\r\n.                                      [OK]\r\n\r\n================== tests finished: 1 passed, in 0.37 seconds ==================\r\nrerun 4\r\n============================= test process starts =============================\r\nexecutable:         C:\\Python27\\python.exe  (2.7.7-final-0) [CPython]\r\narchitecture:       32-bit\r\ncache:              yes\r\nground types:       python\r\nrandom seed:        20393357\r\nhash randomization: on (PYTHONHASHSEED=1323273449)\r\n\r\nsympy\\simplify\\tests\\test_cse.py[1] ([(x0, g*i**2*m)], [c*x0, (c*i)*(a*l*m), l*x0])\r\n.                                      [OK]\r\n```\r\n\r\nSo it looks like I have to make this canonical, too.",
  "created_at": "2017-03-13T01:22:47Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_issue_11230\"]",
  "PASS_TO_PASS": "[\"test_numbered_symbols\", \"test_preprocess_for_cse\", \"test_postprocess_for_cse\", \"test_cse_single\", \"test_cse_single2\", \"test_cse_not_possible\", \"test_nested_substitution\", \"test_subtraction_opt\", \"test_multiple_expressions\", \"test_bypass_non_commutatives\", \"test_issue_10228\", \"test_issue_4498\", \"test_issue_4020\", \"test_issue_4203\", \"test_issue_6263\", \"test_dont_cse_tuples\", \"test_pow_invpow\", \"test_postprocess\", \"test_issue_4499\", \"test_issue_6169\", \"test_cse_MatrixSymbol\", \"test_cse_MatrixExpr\", \"test_Piecewise\", \"test_name_conflict\", \"test_name_conflict_cust_symbols\", \"test_symbols_exhausted_error\", \"test_issue_7840\", \"test_issue_8891\", \"test_hollow_rejection\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.076759",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}