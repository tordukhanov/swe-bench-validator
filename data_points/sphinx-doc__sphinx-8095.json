{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8095",
  "base_commit": "bf26080042fabf6e3aba22cfe05ad8d93bcad3e9",
  "patch": "diff --git a/sphinx/ext/napoleon/__init__.py b/sphinx/ext/napoleon/__init__.py\n--- a/sphinx/ext/napoleon/__init__.py\n+++ b/sphinx/ext/napoleon/__init__.py\n@@ -41,6 +41,7 @@ class Config:\n         napoleon_use_param = True\n         napoleon_use_rtype = True\n         napoleon_use_keyword = True\n+        napoleon_preprocess_types = False\n         napoleon_type_aliases = None\n         napoleon_custom_sections = None\n \n@@ -237,9 +238,12 @@ def __unicode__(self):\n \n             :returns: *bool* -- True if successful, False otherwise\n \n+    napoleon_preprocess_types : :obj:`bool` (Defaults to False)\n+        Enable the type preprocessor for numpy style docstrings.\n+\n     napoleon_type_aliases : :obj:`dict` (Defaults to None)\n         Add a mapping of strings to string, translating types in numpy\n-        style docstrings.\n+        style docstrings. Only works if ``napoleon_preprocess_types = True``.\n \n     napoleon_custom_sections : :obj:`list` (Defaults to None)\n         Add a list of custom sections to include, expanding the list of parsed sections.\n@@ -268,6 +272,7 @@ def __unicode__(self):\n         'napoleon_use_param': (True, 'env'),\n         'napoleon_use_rtype': (True, 'env'),\n         'napoleon_use_keyword': (True, 'env'),\n+        'napoleon_preprocess_types': (False, 'env'),\n         'napoleon_type_aliases': (None, 'env'),\n         'napoleon_custom_sections': (None, 'env')\n     }\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1104,11 +1104,12 @@ def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n         _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n-            _type,\n-            location=self._get_location(),\n-            translations=self._config.napoleon_type_aliases or {},\n-        )\n+        if self._config.napoleon_preprocess_types:\n+            _type = _convert_numpy_type_spec(\n+                _type,\n+                location=self._get_location(),\n+                translations=self._config.napoleon_type_aliases or {},\n+            )\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n",
  "test_patch": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -66,19 +66,19 @@ def test_attributes_docstring(self):\n \n    Quick description of attr1\n \n-   :type: :class:`Arbitrary type`\n+   :type: Arbitrary type\n \n .. attribute:: attr2\n \n    Quick description of attr2\n \n-   :type: :class:`Another arbitrary type`\n+   :type: Another arbitrary type\n \n .. attribute:: attr3\n \n    Adds a newline after the type\n \n-   :type: :class:`Type`\n+   :type: Type\n \"\"\"\n \n         self.assertEqual(expected, actual)\n@@ -1311,12 +1311,34 @@ def test_docstrings(self):\n         config = Config(\n             napoleon_use_param=False,\n             napoleon_use_rtype=False,\n-            napoleon_use_keyword=False)\n+            napoleon_use_keyword=False,\n+            napoleon_preprocess_types=True)\n         for docstring, expected in self.docstrings:\n             actual = str(NumpyDocstring(dedent(docstring), config))\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_type_preprocessor(self):\n+        docstring = dedent(\"\"\"\n+        Single line summary\n+\n+        Parameters\n+        ----------\n+        arg1:str\n+            Extended\n+            description of arg1\n+        \"\"\")\n+\n+        config = Config(napoleon_preprocess_types=False, napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = dedent(\"\"\"\n+        Single line summary\n+\n+        :Parameters: **arg1** (*str*) -- Extended\n+                     description of arg1\n+        \"\"\")\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n@@ -1352,7 +1374,7 @@ def test_multiple_parameters(self):\n         config = Config(napoleon_use_param=False)\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n-:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+:Parameters: **x1, x2** (*array_like*) -- Input arrays, description of ``x1``, ``x2``.\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1360,9 +1382,9 @@ def test_multiple_parameters(self):\n         actual = str(NumpyDocstring(dedent(docstring), config))\n         expected = \"\"\"\\\n :param x1: Input arrays, description of ``x1``, ``x2``.\n-:type x1: :class:`array_like`\n+:type x1: array_like\n :param x2: Input arrays, description of ``x1``, ``x2``.\n-:type x2: :class:`array_like`\n+:type x2: array_like\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1377,7 +1399,7 @@ def test_parameters_without_class_reference(self):\n         config = Config(napoleon_use_param=False)\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n-:Parameters: **param1** (:class:`MyClass instance`)\n+:Parameters: **param1** (*MyClass instance*)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1385,7 +1407,7 @@ def test_parameters_without_class_reference(self):\n         actual = str(NumpyDocstring(dedent(docstring), config))\n         expected = \"\"\"\\\n :param param1:\n-:type param1: :class:`MyClass instance`\n+:type param1: MyClass instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1474,7 +1496,7 @@ def test_underscore_in_attribute(self):\n \n         expected = \"\"\"\n :ivar arg_: some description\n-:vartype arg_: :class:`type`\n+:vartype arg_: type\n \"\"\"\n \n         config = Config(napoleon_use_ivar=True)\n@@ -1494,7 +1516,7 @@ def test_underscore_in_attribute_strip_signature_backslash(self):\n \n         expected = \"\"\"\n :ivar arg\\\\_: some description\n-:vartype arg\\\\_: :class:`type`\n+:vartype arg\\\\_: type\n \"\"\"\n \n         config = Config(napoleon_use_ivar=True)\n@@ -1862,59 +1884,59 @@ def test_list_in_parameter_description(self):\n         expected = \"\"\"One line summary.\n \n :param no_list:\n-:type no_list: :class:`int`\n+:type no_list: int\n :param one_bullet_empty:\n                          *\n-:type one_bullet_empty: :class:`int`\n+:type one_bullet_empty: int\n :param one_bullet_single_line:\n                                - first line\n-:type one_bullet_single_line: :class:`int`\n+:type one_bullet_single_line: int\n :param one_bullet_two_lines:\n                              +   first line\n                                  continued\n-:type one_bullet_two_lines: :class:`int`\n+:type one_bullet_two_lines: int\n :param two_bullets_single_line:\n                                 -  first line\n                                 -  second line\n-:type two_bullets_single_line: :class:`int`\n+:type two_bullets_single_line: int\n :param two_bullets_two_lines:\n                               * first line\n                                 continued\n                               * second line\n                                 continued\n-:type two_bullets_two_lines: :class:`int`\n+:type two_bullets_two_lines: int\n :param one_enumeration_single_line:\n                                     1.  first line\n-:type one_enumeration_single_line: :class:`int`\n+:type one_enumeration_single_line: int\n :param one_enumeration_two_lines:\n                                   1)   first line\n                                        continued\n-:type one_enumeration_two_lines: :class:`int`\n+:type one_enumeration_two_lines: int\n :param two_enumerations_one_line:\n                                   (iii) first line\n                                   (iv) second line\n-:type two_enumerations_one_line: :class:`int`\n+:type two_enumerations_one_line: int\n :param two_enumerations_two_lines:\n                                    a. first line\n                                       continued\n                                    b. second line\n                                       continued\n-:type two_enumerations_two_lines: :class:`int`\n+:type two_enumerations_two_lines: int\n :param one_definition_one_line:\n                                 item 1\n                                     first line\n-:type one_definition_one_line: :class:`int`\n+:type one_definition_one_line: int\n :param one_definition_two_lines:\n                                  item 1\n                                      first line\n                                      continued\n-:type one_definition_two_lines: :class:`int`\n+:type one_definition_two_lines: int\n :param two_definitions_one_line:\n                                  item 1\n                                      first line\n                                  item 2\n                                      second line\n-:type two_definitions_one_line: :class:`int`\n+:type two_definitions_one_line: int\n :param two_definitions_two_lines:\n                                   item 1\n                                       first line\n@@ -1922,14 +1944,14 @@ def test_list_in_parameter_description(self):\n                                   item 2\n                                       second line\n                                       continued\n-:type two_definitions_two_lines: :class:`int`\n+:type two_definitions_two_lines: int\n :param one_definition_blank_line:\n                                   item 1\n \n                                       first line\n \n                                       extra first line\n-:type one_definition_blank_line: :class:`int`\n+:type one_definition_blank_line: int\n :param two_definitions_blank_lines:\n                                     item 1\n \n@@ -1942,12 +1964,12 @@ def test_list_in_parameter_description(self):\n                                         second line\n \n                                         extra second line\n-:type two_definitions_blank_lines: :class:`int`\n+:type two_definitions_blank_lines: int\n :param definition_after_normal_text: text line\n \n                                      item 1\n                                          first line\n-:type definition_after_normal_text: :class:`int`\n+:type definition_after_normal_text: int\n \"\"\"\n         config = Config(napoleon_use_param=True)\n         actual = str(NumpyDocstring(docstring, config))\n@@ -2041,7 +2063,7 @@ def test_list_in_parameter_description(self):\n                item 1\n                    first line\n \"\"\"\n-        config = Config(napoleon_use_param=False)\n+        config = Config(napoleon_use_param=False, napoleon_preprocess_types=True)\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n@@ -2222,6 +2244,7 @@ def test_parameter_types(self):\n         config = Config(\n             napoleon_use_param=True,\n             napoleon_use_rtype=True,\n+            napoleon_preprocess_types=True,\n             napoleon_type_aliases=translations,\n         )\n         actual = str(NumpyDocstring(docstring, config))\n",
  "problem_statement": "Warning: Inline literal start-string without end-string in Numpy style Parameters section\n**Describe the bug**\r\nThe following docstring generates a warning on the line of the timeout parameter. Removing the quote around `default` cause the warning to go away.\r\n```python\r\ndef lock(\r\n        self,\r\n        timeout: Union[float, Literal[\"default\"]] = \"default\",\r\n        requested_key: Optional[str] = None,\r\n    ) -> str:\r\n        \"\"\"Establish a shared lock to the resource.\r\n\r\n        Parameters\r\n        ----------\r\n        timeout : Union[float, Literal[\"default\"]], optional\r\n            Absolute time period (in milliseconds) that a resource waits to get\r\n            unlocked by the locking session before returning an error.\r\n            Defaults to \"default\" which means use self.timeout.\r\n        requested_key : Optional[str], optional\r\n            Access key used by another session with which you want your session\r\n            to share a lock or None to generate a new shared access key.\r\n\r\n        Returns\r\n        -------\r\n        str\r\n            A new shared access key if requested_key is None, otherwise, same\r\n            value as the requested_key\r\n\r\n        \"\"\"\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n$ git clone https://github.com/pyvisa/pyvisa\r\n$ git checkout pytest\r\n$ cd pyvisa\r\n$ pip install -e .\r\n$ cd docs\r\n$ sphinx-build source build -W -b html;\r\n```\r\n\r\n**Expected behavior**\r\nI do not expect to see a warning there and was not seeing any before 3.2\r\n\r\n**Your project**\r\nThe project is build under the Documentation build action. https://github.com/pyvisa/pyvisa/pull/531\r\n\r\n**Environment info**\r\n- OS: Mac Os and Linux\r\n- Python version: 3.8.2 and 3.8.5\r\n- Sphinx version: 3.2.0\r\n- Sphinx extensions: \"sphinx.ext.autodoc\", \"sphinx.ext.doctest\",\"sphinx.ext.intersphinx\", \"sphinx.ext.coverage\", \"sphinx.ext.viewcode\", \"sphinx.ext.mathjax\",  \"sphinx.ext.napoleon\"\r\n\r\n\n",
  "hints_text": "@keewis Could you check this please? I think this is related to convert_numpy_type_spec.\n`napoleon` converts the docstring to\r\n```rst\r\nEstablish a shared lock to the resource.\r\n\r\n:Parameters: * **timeout** (:class:`Union[float`, :class:`Literal[```\"default\"``:class:`]]`, *optional*) -- Absolute time period (in milliseconds) that a resource waits to get\r\n               unlocked by the locking session before returning an error.\r\n               Defaults to \"default\" which means use self.timeout.\r\n             * **requested_key** (:class:`Optional[str]`, *optional*) -- Access key used by another session with which you want your session\r\n               to share a lock or None to generate a new shared access key.\r\n\r\n:returns: *str* -- A new shared access key if requested_key is None, otherwise, same\r\n          value as the requested_key\r\n```\r\nwhich I guess happens because I never considered typehints when I wrote the preprocessor. To be clear, type hints are not part of the format guide, but then again it also doesn't say they can't be used.\r\n\r\nIf we allow type hints, we probably want to link those types and thus should extend the preprocessor. Since that would be a new feature, I guess we shouldn't include that in a bugfix release.\r\n\r\nFor now, I suggest we fix this by introducing a setting that allows opting out of the type preprocessor (could also be opt-in).\nFaced the same issue in our builds yesterday.\r\n\r\n```\r\nWarning, treated as error:\r\n/home/travis/build/microsoft/LightGBM/docs/../python-package/lightgbm/basic.py:docstring of lightgbm.Booster.dump_model:12:Inline literal start-string without end-string.\r\n```\r\n\r\n`conf.py`: https://github.com/microsoft/LightGBM/blob/master/docs/conf.py\r\n Logs: https://travis-ci.org/github/microsoft/LightGBM/jobs/716228303\r\n\r\nOne of the \"problem\" docstrings: https://github.com/microsoft/LightGBM/blob/ee8ec182010c570c6371a5fc68ab9f4da9c6dc74/python-package/lightgbm/basic.py#L2762-L2782\r\n\nthat's a separate issue: you're using a unsupported notation for `default`. Supported are currently `default <obj>` and `default: <obj>`, while you are using `optional (default=<obj>)`. To be fair, this is currently not standardized, see numpy/numpydoc#289.\r\n\r\nEdit: in particular, the type preprocessor chokes on something like `string, optional (default=\"split\")`, which becomes:\r\n```rst\r\n:class:`string`, :class:`optional (default=```\"split\"``:class:`)`\r\n```\r\nso it splits the default notation into `optional (default=`, `\"split\"`, and `)`\r\n\r\nHowever, the temporary fix is the same: deactivate the type preprocessor using a new setting. For a long term fix we'd first need to update the `numpydoc` format guide.\r\n\r\n@tk0miya, should I send in a PR that adds that setting?\n@keewis Yes, please.\r\n\r\n>If we allow type hints, we probably want to link those types and thus should extend the preprocessor. Since that would be a new feature, I guess we shouldn't include that in a bugfix release.\r\n\r\nI think the new option is needed to keep compatibility for some users. So it must be released as a bugfix release. So could you send a PR to 3.2.x branch? I'm still debating which is better to enable or disable the numpy type feature by default. But it should be controlled via user settings.",
  "created_at": "2020-08-10T11:09:15Z",
  "version": "3.3",
  "FAIL_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::NamedtupleSubclassTest::test_attributes_docstring\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_multiple_parameters\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_without_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_type_preprocessor\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute_strip_signature_backslash\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_no_type\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_ref_in_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_attributes_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_code_block_in_returns_section\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_custom_generic_sections\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_keywords_with_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_kwargs_in_arguments\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_noindex\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_section_header_formatting\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_convert_numpy_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameter_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens_invalid\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_section_header_underline_length\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_see_also_refs\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_token_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_tokenize_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*args,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*x,\"]",
  "environment_setup_commit": "3b85187ffa3401e88582073c23188c147857a8a3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.051549",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}