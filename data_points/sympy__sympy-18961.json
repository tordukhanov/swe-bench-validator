{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18961",
  "base_commit": "d6417fbb2972861e7f472537bb9cd55ed01afd00",
  "patch": "diff --git a/sympy/ntheory/digits.py b/sympy/ntheory/digits.py\n--- a/sympy/ntheory/digits.py\n+++ b/sympy/ntheory/digits.py\n@@ -6,7 +6,7 @@\n from sympy.utilities.iterables import multiset, is_palindromic as _palindromic\n \n \n-def digits(n, b=10):\n+def digits(n, b=10, digits=None):\n     \"\"\"\n     Return a list of the digits of ``n`` in base ``b``. The first\n     element in the list is ``b`` (or ``-b`` if ``n`` is negative).\n@@ -17,18 +17,42 @@ def digits(n, b=10):\n     >>> from sympy.ntheory.digits import digits\n     >>> digits(35)\n     [10, 3, 5]\n-    >>> digits(27, 2)\n+\n+    If the number is negative, the negative sign will be placed on the\n+    base (which is the first element in the returned list):\n+\n+    >>> digits(-35)\n+    [-10, 3, 5]\n+\n+    Bases other than 10 (and greater than 1) can be selected with ``b``:\n+\n+    >>> digits(27, b=2)\n     [2, 1, 1, 0, 1, 1]\n-    >>> digits(65536, 256)\n-    [256, 1, 0, 0]\n-    >>> digits(-3958, 27)\n-    [-27, 5, 11, 16]\n+\n+    Use the ``digits`` keyword if a certain number of digits is desired:\n+\n+    >>> digits(35, digits=4)\n+    [10, 0, 0, 3, 5]\n+\n+    Parameters\n+    ==========\n+\n+    n: integer\n+        The number whose digits are returned.\n+\n+    b: integer\n+        The base in which digits are computed.\n+\n+    digits: integer (or None for all digits)\n+        The number of digits to be returned (padded with zeros, if\n+        necessary).\n+\n     \"\"\"\n \n     b = as_int(b)\n     n = as_int(n)\n-    if b <= 1:\n-        raise ValueError(\"b must be >= 2\")\n+    if b < 2:\n+        raise ValueError(\"b must be greater than 1\")\n     else:\n         x, y = abs(n), []\n         while x >= b:\n@@ -37,6 +61,13 @@ def digits(n, b=10):\n         y.append(x)\n         y.append(-b if n < 0 else b)\n         y.reverse()\n+        ndig = len(y) - 1\n+        if digits is not None:\n+            if ndig > digits:\n+                raise ValueError(\n+                    \"For %s, at least %s digits are needed.\" % (n, ndig))\n+            elif ndig < digits:\n+                y[1:1] = [0]*(digits - ndig)\n         return y\n \n \n",
  "test_patch": "diff --git a/sympy/ntheory/tests/test_digits.py b/sympy/ntheory/tests/test_digits.py\n--- a/sympy/ntheory/tests/test_digits.py\n+++ b/sympy/ntheory/tests/test_digits.py\n@@ -1,5 +1,7 @@\n from sympy.ntheory import count_digits, digits, is_palindromic\n \n+from sympy.testing.pytest import raises\n+\n \n def test_digits():\n     assert all([digits(n, 2)[1:] == [int(d) for d in format(n, 'b')]\n@@ -10,8 +12,12 @@ def test_digits():\n                 for n in range(20)])\n     assert digits(2345, 34) == [34, 2, 0, 33]\n     assert digits(384753, 71) == [71, 1, 5, 23, 4]\n-    assert digits(93409) == [10, 9, 3, 4, 0, 9]\n+    assert digits(93409, 10) == [10, 9, 3, 4, 0, 9]\n     assert digits(-92838, 11) == [-11, 6, 3, 8, 2, 9]\n+    assert digits(35, 10) == [10, 3, 5]\n+    assert digits(35, 10, 3) == [10, 0, 3, 5]\n+    assert digits(-35, 10, 4) == [-10, 0, 0, 3, 5]\n+    raises(ValueError, lambda: digits(2, 2, 1))\n \n \n def test_count_digits():\n",
  "problem_statement": "give `digits` a `bits` argument\nLike `ibin`, I think a `bits` argument could be added to `digits` so the length would be padded with 0s if necessary to reach the given bit length:\r\n```diff\r\ndiff --git a/sympy/ntheory/digits.py b/sympy/ntheory/digits.py\r\nindex 43d4333..20eb630 100644\r\n--- a/sympy/ntheory/digits.py\r\n+++ b/sympy/ntheory/digits.py\r\n@@ -6,7 +6,7 @@\r\n from sympy.utilities.iterables import multiset, is_palindromic as _palindromic\r\n\r\n\r\n-def digits(n, b=10):\r\n+def digits(n, b=10, bits=None):\r\n     \"\"\"\r\n     Return a list of the digits of ``n`` in base ``b``. The first\r\n     element in the list is ``b`` (or ``-b`` if ``n`` is negative).\r\n@@ -37,6 +37,8 @@ def digits(n, b=10):\r\n         y.append(x)\r\n         y.append(-b if n < 0 else b)\r\n         y.reverse()\r\n+        if bits is not None and len(y) - 1 < bits:\r\n+            y = [b] + [0]*(bits - len(y) + 1) + y[1:]\r\n         return y\r\n```\r\nTests, too, should be added.\n",
  "hints_text": "I don't think that it is necessarily needed because zero padding can be completely done after getting the digits. If it introduces more efficiency of doing this, it can be fine, but I don't think that your given example is different than just padding posteriori.\r\n\r\nThough if this makes it more convenient or consistent with ibin, I’m fine with this direction. I also see that it doesn’t necessarily raise errors when the number digits exceed the length of bits, so it should be clarified about this.",
  "created_at": "2020-03-26T05:54:21Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_digits\"]",
  "PASS_TO_PASS": "[\"test_count_digits\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.129304",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}