{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10459",
  "base_commit": "2e85c8608c93ad0e3290414c4e5e650b87d44b27",
  "patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -31,7 +31,7 @@\n warnings.simplefilter('ignore', NonBLASDotWarning)\n \n \n-def _assert_all_finite(X):\n+def _assert_all_finite(X, allow_nan=False):\n     \"\"\"Like assert_all_finite, but only for ndarray.\"\"\"\n     if _get_config()['assume_finite']:\n         return\n@@ -39,20 +39,27 @@ def _assert_all_finite(X):\n     # First try an O(n) time, O(1) space solution for the common case that\n     # everything is finite; fall back to O(n) space np.isfinite to prevent\n     # false positives from overflow in sum method.\n-    if (X.dtype.char in np.typecodes['AllFloat'] and not np.isfinite(X.sum())\n-            and not np.isfinite(X).all()):\n-        raise ValueError(\"Input contains NaN, infinity\"\n-                         \" or a value too large for %r.\" % X.dtype)\n-\n-\n-def assert_all_finite(X):\n+    is_float = X.dtype.kind in 'fc'\n+    if is_float and np.isfinite(X.sum()):\n+        pass\n+    elif is_float:\n+        msg_err = \"Input contains {} or a value too large for {!r}.\"\n+        if (allow_nan and np.isinf(X).any() or\n+                not allow_nan and not np.isfinite(X).all()):\n+            type_err = 'infinity' if allow_nan else 'NaN, infinity'\n+            raise ValueError(msg_err.format(type_err, X.dtype))\n+\n+\n+def assert_all_finite(X, allow_nan=False):\n     \"\"\"Throw a ValueError if X contains NaN or infinity.\n \n     Parameters\n     ----------\n     X : array or sparse matrix\n+\n+    allow_nan : bool\n     \"\"\"\n-    _assert_all_finite(X.data if sp.issparse(X) else X)\n+    _assert_all_finite(X.data if sp.issparse(X) else X, allow_nan)\n \n \n def as_float_array(X, copy=True, force_all_finite=True):\n@@ -70,8 +77,17 @@ def as_float_array(X, copy=True, force_all_finite=True):\n         If True, a copy of X will be created. If False, a copy may still be\n         returned if X's dtype is not a floating point type.\n \n-    force_all_finite : boolean (default=True)\n-        Whether to raise an error on np.inf and np.nan in X.\n+    force_all_finite : boolean or 'allow-nan', (default=True)\n+        Whether to raise an error on np.inf and np.nan in X. The possibilities\n+        are:\n+\n+        - True: Force all values of X to be finite.\n+        - False: accept both np.inf and np.nan in X.\n+        - 'allow-nan':  accept  only  np.nan  values in  X.  Values  cannot  be\n+          infinite.\n+\n+        .. versionadded:: 0.20\n+           ``force_all_finite`` accepts the string ``'allow-nan'``.\n \n     Returns\n     -------\n@@ -256,8 +272,17 @@ def _ensure_sparse_format(spmatrix, accept_sparse, dtype, copy,\n         Whether a forced copy will be triggered. If copy=False, a copy might\n         be triggered by a conversion.\n \n-    force_all_finite : boolean\n-        Whether to raise an error on np.inf and np.nan in X.\n+    force_all_finite : boolean or 'allow-nan', (default=True)\n+        Whether to raise an error on np.inf and np.nan in X. The possibilities\n+        are:\n+\n+        - True: Force all values of X to be finite.\n+        - False: accept both np.inf and np.nan in X.\n+        - 'allow-nan':  accept  only  np.nan  values in  X.  Values  cannot  be\n+          infinite.\n+\n+        .. versionadded:: 0.20\n+           ``force_all_finite`` accepts the string ``'allow-nan'``.\n \n     Returns\n     -------\n@@ -304,7 +329,9 @@ def _ensure_sparse_format(spmatrix, accept_sparse, dtype, copy,\n             warnings.warn(\"Can't check %s sparse matrix for nan or inf.\"\n                           % spmatrix.format)\n         else:\n-            _assert_all_finite(spmatrix.data)\n+            _assert_all_finite(spmatrix.data,\n+                               allow_nan=force_all_finite == 'allow-nan')\n+\n     return spmatrix\n \n \n@@ -359,8 +386,17 @@ def check_array(array, accept_sparse=False, dtype=\"numeric\", order=None,\n         Whether a forced copy will be triggered. If copy=False, a copy might\n         be triggered by a conversion.\n \n-    force_all_finite : boolean (default=True)\n-        Whether to raise an error on np.inf and np.nan in X.\n+    force_all_finite : boolean or 'allow-nan', (default=True)\n+        Whether to raise an error on np.inf and np.nan in X. The possibilities\n+        are:\n+\n+        - True: Force all values of X to be finite.\n+        - False: accept both np.inf and np.nan in X.\n+        - 'allow-nan':  accept  only  np.nan  values in  X.  Values  cannot  be\n+          infinite.\n+\n+        .. versionadded:: 0.20\n+           ``force_all_finite`` accepts the string ``'allow-nan'``.\n \n     ensure_2d : boolean (default=True)\n         Whether to raise a value error if X is not 2d.\n@@ -425,6 +461,10 @@ def check_array(array, accept_sparse=False, dtype=\"numeric\", order=None,\n             # list of accepted types.\n             dtype = dtype[0]\n \n+    if force_all_finite not in (True, False, 'allow-nan'):\n+        raise ValueError('force_all_finite should be a bool or \"allow-nan\"'\n+                         '. Got {!r} instead'.format(force_all_finite))\n+\n     if estimator is not None:\n         if isinstance(estimator, six.string_types):\n             estimator_name = estimator\n@@ -483,7 +523,8 @@ def check_array(array, accept_sparse=False, dtype=\"numeric\", order=None,\n             raise ValueError(\"Found array with dim %d. %s expected <= 2.\"\n                              % (array.ndim, estimator_name))\n         if force_all_finite:\n-            _assert_all_finite(array)\n+            _assert_all_finite(array,\n+                               allow_nan=force_all_finite == 'allow-nan')\n \n     shape_repr = _shape_repr(array.shape)\n     if ensure_min_samples > 0:\n@@ -555,9 +596,18 @@ def check_X_y(X, y, accept_sparse=False, dtype=\"numeric\", order=None,\n         Whether a forced copy will be triggered. If copy=False, a copy might\n         be triggered by a conversion.\n \n-    force_all_finite : boolean (default=True)\n+    force_all_finite : boolean or 'allow-nan', (default=True)\n         Whether to raise an error on np.inf and np.nan in X. This parameter\n         does not influence whether y can have np.inf or np.nan values.\n+        The possibilities are:\n+\n+        - True: Force all values of X to be finite.\n+        - False: accept both np.inf and np.nan in X.\n+        - 'allow-nan':  accept  only  np.nan  values in  X.  Values  cannot  be\n+          infinite.\n+\n+        .. versionadded:: 0.20\n+           ``force_all_finite`` accepts the string ``'allow-nan'``.\n \n     ensure_2d : boolean (default=True)\n         Whether to make X at least 2d.\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_validation.py b/sklearn/utils/tests/test_validation.py\n--- a/sklearn/utils/tests/test_validation.py\n+++ b/sklearn/utils/tests/test_validation.py\n@@ -6,8 +6,8 @@\n from tempfile import NamedTemporaryFile\n from itertools import product\n \n+import pytest\n import numpy as np\n-from numpy.testing import assert_array_equal\n import scipy.sparse as sp\n \n from sklearn.utils.testing import assert_true, assert_false, assert_equal\n@@ -18,6 +18,8 @@\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import SkipTest\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_allclose_dense_sparse\n from sklearn.utils import as_float_array, check_array, check_symmetric\n from sklearn.utils import check_X_y\n from sklearn.utils.mocking import MockDataFrame\n@@ -88,6 +90,17 @@ def test_as_float_array():\n         assert_false(np.isnan(M).any())\n \n \n+@pytest.mark.parametrize(\n+    \"X\",\n+    [(np.random.random((10, 2))),\n+     (sp.rand(10, 2).tocsr())])\n+def test_as_float_array_nan(X):\n+    X[5, 0] = np.nan\n+    X[6, 1] = np.nan\n+    X_converted = as_float_array(X, force_all_finite='allow-nan')\n+    assert_allclose_dense_sparse(X_converted, X)\n+\n+\n def test_np_matrix():\n     # Confirm that input validation code does not return np.matrix\n     X = np.arange(12).reshape(3, 4)\n@@ -132,6 +145,43 @@ def test_ordering():\n     assert_false(X.data.flags['C_CONTIGUOUS'])\n \n \n+@pytest.mark.parametrize(\n+    \"value, force_all_finite\",\n+    [(np.inf, False), (np.nan, 'allow-nan'), (np.nan, False)]\n+)\n+@pytest.mark.parametrize(\n+    \"retype\",\n+    [np.asarray, sp.csr_matrix]\n+)\n+def test_check_array_force_all_finite_valid(value, force_all_finite, retype):\n+    X = retype(np.arange(4).reshape(2, 2).astype(np.float))\n+    X[0, 0] = value\n+    X_checked = check_array(X, force_all_finite=force_all_finite,\n+                            accept_sparse=True)\n+    assert_allclose_dense_sparse(X, X_checked)\n+\n+\n+@pytest.mark.parametrize(\n+    \"value, force_all_finite, match_msg\",\n+    [(np.inf, True, 'Input contains NaN, infinity'),\n+     (np.inf, 'allow-nan', 'Input contains infinity'),\n+     (np.nan, True, 'Input contains NaN, infinity'),\n+     (np.nan, 'allow-inf', 'force_all_finite should be a bool or \"allow-nan\"'),\n+     (np.nan, 1, 'force_all_finite should be a bool or \"allow-nan\"')]\n+)\n+@pytest.mark.parametrize(\n+    \"retype\",\n+    [np.asarray, sp.csr_matrix]\n+)\n+def test_check_array_force_all_finiteinvalid(value, force_all_finite,\n+                                             match_msg, retype):\n+    X = retype(np.arange(4).reshape(2, 2).astype(np.float))\n+    X[0, 0] = value\n+    with pytest.raises(ValueError, message=match_msg):\n+        check_array(X, force_all_finite=force_all_finite,\n+                    accept_sparse=True)\n+\n+\n @ignore_warnings\n def test_check_array():\n     # accept_sparse == None\n@@ -153,16 +203,6 @@ def test_check_array():\n     X_ndim = np.arange(8).reshape(2, 2, 2)\n     assert_raises(ValueError, check_array, X_ndim)\n     check_array(X_ndim, allow_nd=True)  # doesn't raise\n-    # force_all_finite\n-    X_inf = np.arange(4).reshape(2, 2).astype(np.float)\n-    X_inf[0, 0] = np.inf\n-    assert_raises(ValueError, check_array, X_inf)\n-    check_array(X_inf, force_all_finite=False)  # no raise\n-    # nan check\n-    X_nan = np.arange(4).reshape(2, 2).astype(np.float)\n-    X_nan[0, 0] = np.nan\n-    assert_raises(ValueError, check_array, X_nan)\n-    check_array(X_inf, force_all_finite=False)  # no raise\n \n     # dtype and order enforcement.\n     X_C = np.arange(4).reshape(2, 2).copy(\"C\")\n",
  "problem_statement": "[RFC] Dissociate NaN and Inf when considering force_all_finite in check_array\nDue to changes proposed in #10404, it seems that `check_array` as currently a main limitation. `force_all_finite` will force both `NaN` and `inf`to be rejected. If preprocessing methods (whenever this is possible) should let pass `NaN`, this argument is not enough permissive.\r\n\r\nBefore to implement anything, I think it could be good to have some feedback on the way to go. I see the following solutions:\r\n\r\n1. `force_all_finite` could still accept a bool to preserve the behaviour. Additionally, it could accept an `str` to filter only `inf`.\r\n2. #7892 proposes to have an additional argument `allow_nan`. @amueller was worried that it makes `check_array` to complex.\r\n3. make a private function `_assert_finite_or_nan` (similarly to [this proposal](https://github.com/scikit-learn/scikit-learn/pull/10437/files#diff-5ebddebc20987b6125fffc893f5abc4cR2379) removing the numpy version checking) in the `data.py` which can be shared between the preprocessing methods.\r\n\r\nThey are the solutions that I have in mind for the moment but anything else is welcomed.\r\n@jnothman @agramfort @amueller @lesteve @ogrisel @GaelVaroquaux I would be grateful for any insight.\n",
  "hints_text": "Unsurprisingly, @raghavrv's PR was forgotten in recent discussion of this. I think we want `force_all_finite='allow-nan'` or =`'-nan'` or similar  \nNote: solving #10438 depends on this decision.\nOops! Had not noticed that @glemaitre had started this issue, so was tinkering around with the \"allow_nan\" and \"allow_inf\" arguments for check_array() based on a discussion with @jnothman a few months ago. In any case, [here](https://github.com/scikit-learn/scikit-learn/compare/master...ashimb9:checkarray?expand=1) is what I have so far, which might or might not be useful when the discussion here concludes.\nOh sorry about that. I just have ping you on the issue as well.\r\nI will submit what I did yesterday and you can review with what you have in head.",
  "created_at": "2018-01-12T09:47:57Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-allow-nan]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-allow-nan]\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_validation.py::test_as_float_array\", \"sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X0]\", \"sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X1]\", \"sklearn/utils/tests/test_validation.py::test_np_matrix\", \"sklearn/utils/tests/test_validation.py::test_memmap\", \"sklearn/utils/tests/test_validation.py::test_ordering\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-inf-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-inf-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array\", \"sklearn/utils/tests/test_validation.py::test_check_array_pandas_dtype_object_conversion\", \"sklearn/utils/tests/test_validation.py::test_check_array_on_mock_dataframe\", \"sklearn/utils/tests/test_validation.py::test_check_array_dtype_stability\", \"sklearn/utils/tests/test_validation.py::test_check_array_dtype_warning\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_type_exception\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_no_exception\", \"sklearn/utils/tests/test_validation.py::test_check_array_min_samples_and_features_messages\", \"sklearn/utils/tests/test_validation.py::test_check_array_complex_data_error\", \"sklearn/utils/tests/test_validation.py::test_has_fit_parameter\", \"sklearn/utils/tests/test_validation.py::test_check_symmetric\", \"sklearn/utils/tests/test_validation.py::test_check_is_fitted\", \"sklearn/utils/tests/test_validation.py::test_check_consistent_length\", \"sklearn/utils/tests/test_validation.py::test_check_dataframe_fit_attribute\", \"sklearn/utils/tests/test_validation.py::test_suppress_validation\", \"sklearn/utils/tests/test_validation.py::test_check_memory\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.951490",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}