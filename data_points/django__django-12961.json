{
  "repo": "django/django",
  "instance_id": "django__django-12961",
  "base_commit": "33c365781abbcc1b21a31b31d95d344a174df0d5",
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -6,7 +6,7 @@\n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import DatabaseError, NotSupportedError\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.expressions import OrderBy, Random, RawSQL, Ref, Value\n+from django.db.models.expressions import F, OrderBy, Random, RawSQL, Ref, Value\n from django.db.models.functions import Cast\n from django.db.models.query_utils import Q, select_related_descend\n from django.db.models.sql.constants import (\n@@ -361,13 +361,16 @@ def get_order_by(self):\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n             if self.query.combinator:\n                 src = resolved.get_source_expressions()[0]\n+                expr_src = expr.get_source_expressions()[0]\n                 # Relabel order by columns to raw numbers if this is a combined\n                 # query; necessary since the columns can't be referenced by the\n                 # fully qualified name and the simple column names may collide.\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n-                    elif col_alias:\n+                    elif col_alias and not (\n+                        isinstance(expr_src, F) and col_alias == expr_src.name\n+                    ):\n                         continue\n                     if src == sel_expr:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n",
  "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,5 @@\n+import operator\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -11,11 +13,8 @@ class QuerySetSetOperationTests(TestCase):\n     def setUpTestData(cls):\n         Number.objects.bulk_create(Number(num=i, other_num=10 - i) for i in range(10))\n \n-    def number_transform(self, value):\n-        return value.num\n-\n     def assertNumbersEqual(self, queryset, expected_numbers, ordered=True):\n-        self.assertQuerysetEqual(queryset, expected_numbers, self.number_transform, ordered)\n+        self.assertQuerysetEqual(queryset, expected_numbers, operator.attrgetter('num'), ordered)\n \n     def test_simple_union(self):\n         qs1 = Number.objects.filter(num__lte=1)\n@@ -110,11 +109,35 @@ def test_ordering(self):\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n         self.assertNumbersEqual(qs1.union(qs2).order_by('-num'), [3, 2, 1, 0])\n \n+    def test_ordering_by_alias(self):\n+        qs1 = Number.objects.filter(num__lte=1).values(alias=F('num'))\n+        qs2 = Number.objects.filter(num__gte=2, num__lte=3).values(alias=F('num'))\n+        self.assertQuerysetEqual(\n+            qs1.union(qs2).order_by('-alias'),\n+            [3, 2, 1, 0],\n+            operator.itemgetter('alias'),\n+        )\n+\n     def test_ordering_by_f_expression(self):\n         qs1 = Number.objects.filter(num__lte=1)\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n         self.assertNumbersEqual(qs1.union(qs2).order_by(F('num').desc()), [3, 2, 1, 0])\n \n+    def test_ordering_by_f_expression_and_alias(self):\n+        qs1 = Number.objects.filter(num__lte=1).values(alias=F('other_num'))\n+        qs2 = Number.objects.filter(num__gte=2, num__lte=3).values(alias=F('other_num'))\n+        self.assertQuerysetEqual(\n+            qs1.union(qs2).order_by(F('alias').desc()),\n+            [10, 9, 8, 7],\n+            operator.itemgetter('alias'),\n+        )\n+        Number.objects.create(num=-1)\n+        self.assertQuerysetEqual(\n+            qs1.union(qs2).order_by(F('alias').desc(nulls_last=True)),\n+            [10, 9, 8, 7, None],\n+            operator.itemgetter('alias'),\n+        )\n+\n     def test_union_with_values(self):\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n@@ -243,6 +266,8 @@ def test_order_raises_on_non_selected_column(self):\n         # 'num' got realiased to num2\n         with self.assertRaisesMessage(DatabaseError, msg):\n             list(qs1.union(qs2).order_by('num'))\n+        with self.assertRaisesMessage(DatabaseError, msg):\n+            list(qs1.union(qs2).order_by(F('num')))\n         # switched order, now 'exists' again:\n         list(qs2.union(qs1).order_by('num'))\n \n",
  "problem_statement": "order_by() with expressions crashes on union() querysets.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nI have read the recent tickets about unions and order_by (#31496, #27995, #30628) , and my bug is slightly different, so I hope it's not a duplicate. \nLet's consider two similar models: \nclass EntityA(models.Model):\n\tname_a = models.CharField(max_length=128, null=True)\n\tdt_a = models.DateTimeField(null=True)\nclass EntityB(models.Model):\n\tname_b = models.CharField(max_length=128, null=True)\n\tdt_b = models.DateTimeField(null=True)\nEntityA.objects.create(name_a=\"a\")\nEntityA.objects.create(name_a=\"qwerty\", dt_a=timezone.now())\nEntityB.objects.create(name_b=\"random\", dt_b=timezone.now())\nEntityB.objects.create(name_b=\"b\")\nqs_a = EntityA.objects.values(name=F(\"name_a\"), dt=F(\"dt_a\"))\nqs_b = EntityB.objects.values(name=F(\"name_b\"), dt=F(\"dt_b\"))\n# union queryset\nqueryset = qs_a.union(qs_b)\nI can use a simple ORDER BY clause:\nqueryset.order_by(\"-dt\")\nAnd everything will work, no problem here.\nWhat I actually want is the same query, but with a NULLS LAST\nUsually the query becomes: \nqueryset.order_by(F(\"dt\").desc(nulls_last=True)) \nbut that raises a \nDatabaseError: ORDER BY term does not match any column in the result set.\nI know unions can handle only a few clauses, but ORDER BY is one of them, so I'm unsure whether this is the expected behaviour or not. \nIf it's expected, then the raised exception could be more explicit.\n",
  "hints_text": "Thanks, yes it is a different issue that is strictly related with using expressions in .order_by(). Potential fix should target ​these lines. Would you like to try?\nReplying to felixxm: Thanks, yes it is a different issue that is strictly related with using expressions in .order_by(). Potential fix should target ​these lines. Would you like to try? Ok I'll give it a try this week end, I just need to read django conventions before, as I've never committed on this project\n​PR",
  "created_at": "2020-05-23T15:19:37Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_ordering_by_f_expression_and_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.639935",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}