{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14087",
  "base_commit": "a5743ed36fbd3fbc8e351bdab16561fbfca7dfa1",
  "patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2170,7 +2170,7 @@ def fit(self, X, y, sample_weight=None):\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n                 best_indices = np.argmax(scores, axis=1)\n-                if self.multi_class == 'ovr':\n+                if multi_class == 'ovr':\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n@@ -2180,8 +2180,11 @@ def fit(self, X, y, sample_weight=None):\n                 best_indices_C = best_indices % len(self.Cs_)\n                 self.C_.append(np.mean(self.Cs_[best_indices_C]))\n \n-                best_indices_l1 = best_indices // len(self.Cs_)\n-                self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))\n+                if self.penalty == 'elasticnet':\n+                    best_indices_l1 = best_indices // len(self.Cs_)\n+                    self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))\n+                else:\n+                    self.l1_ratio_.append(None)\n \n             if multi_class == 'multinomial':\n                 self.C_ = np.tile(self.C_, n_classes)\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,8 +1532,9 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit(penalty, multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n     n_classes = 3\n@@ -1543,9 +1544,12 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n                                random_state=0)\n \n     Cs = np.logspace(-4, 4, 3)\n-    l1_ratios = np.linspace(0, 1, 2)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n \n-    lrcv = LogisticRegressionCV(penalty='elasticnet', Cs=Cs, solver='saga',\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n                                 l1_ratios=l1_ratios, random_state=0,\n                                 multi_class=multi_class, refit=False)\n     lrcv.fit(X, y)\n",
  "problem_statement": "IndexError thrown with LogisticRegressionCV and refit=False\n#### Description\r\nThe following error is thrown when trying to estimate a regularization parameter via cross-validation, *without* refitting.\r\n\r\n#### Steps/Code to Reproduce\r\n```python\r\nimport sys\r\nimport sklearn\r\nfrom sklearn.linear_model import LogisticRegressionCV\r\nimport numpy as np\r\n\r\nnp.random.seed(29)\r\nX = np.random.normal(size=(1000, 3))\r\nbeta = np.random.normal(size=3)\r\nintercept = np.random.normal(size=None)\r\ny = np.sign(intercept + X @ beta)\r\n\r\nLogisticRegressionCV(\r\ncv=5,\r\nsolver='saga', # same error with 'liblinear'\r\ntol=1e-2,\r\nrefit=False).fit(X, y)\r\n```\r\n\r\n\r\n#### Expected Results\r\nNo error is thrown. \r\n\r\n#### Actual Results\r\n```\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-3-81609fd8d2ca> in <module>\r\n----> 1 LogisticRegressionCV(refit=False).fit(X, y)\r\n\r\n~/.pyenv/versions/3.6.7/envs/jupyter/lib/python3.6/site-packages/sklearn/linear_model/logistic.py in fit(self, X, y, sample_weight)\r\n   2192                 else:\r\n   2193                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\r\n-> 2194                                  for i in range(len(folds))], axis=0)\r\n   2195 \r\n   2196                 best_indices_C = best_indices % len(self.Cs_)\r\n\r\n~/.pyenv/versions/3.6.7/envs/jupyter/lib/python3.6/site-packages/sklearn/linear_model/logistic.py in <listcomp>(.0)\r\n   2192                 else:\r\n   2193                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\r\n-> 2194                                  for i in range(len(folds))], axis=0)\r\n   2195 \r\n   2196                 best_indices_C = best_indices % len(self.Cs_)\r\n\r\nIndexError: too many indices for array\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.6.7 (default, May 13 2019, 16:14:45)  [GCC 4.2.1 Compatible Apple LLVM 10.0.1 (clang-1001.0.46.4)]\r\nexecutable: /Users/tsweetser/.pyenv/versions/3.6.7/envs/jupyter/bin/python\r\n   machine: Darwin-18.6.0-x86_64-i386-64bit\r\n\r\nBLAS:\r\n    macros: NO_ATLAS_INFO=3, HAVE_CBLAS=None\r\n  lib_dirs: \r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.1.1\r\nsetuptools: 39.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.15.1\r\n     scipy: 1.1.0\r\n    Cython: 0.29.6\r\n    pandas: 0.24.2\r\n```\n",
  "hints_text": "I.e. coefs_paths.ndim < 4? I haven't tried to reproduce yet, but thanks for\nthe minimal example.\n\nAre you able to check if this was introduced in 0.21? \nYes - the example above works with scikit-learn==0.20.3. Full versions:\r\n```\r\nSystem:\r\n    python: 3.6.8 (default, Jun  4 2019, 11:38:34)  [GCC 4.2.1 Compatible Apple LLVM 10.0.1 (clang-1001.0.46.4)]\r\nexecutable: /Users/tsweetser/.pyenv/versions/test/bin/python\r\n   machine: Darwin-18.6.0-x86_64-i386-64bit\r\n\r\nBLAS:\r\n    macros: NO_ATLAS_INFO=3, HAVE_CBLAS=None\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 18.1\r\nsetuptools: 40.6.2\r\n   sklearn: 0.20.3\r\n     numpy: 1.16.4\r\n     scipy: 1.3.0\r\n    Cython: None\r\n    pandas: 0.24.2\r\n```",
  "created_at": "2019-06-13T20:09:22Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[ovr-l2]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[multinomial-l2]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[auto-l2]\"]",
  "PASS_TO_PASS": "[\"sklearn/linear_model/tests/test_logistic.py::test_predict_2_classes\", \"sklearn/linear_model/tests/test_logistic.py::test_error\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_mock_scorer\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_score_does_not_warn_by_default\", \"sklearn/linear_model/tests/test_logistic.py::test_lr_liblinear_warning\", \"sklearn/linear_model/tests/test_logistic.py::test_predict_3_classes\", \"sklearn/linear_model/tests/test_logistic.py::test_predict_iris\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegression]\", \"sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegressionCV]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary_probabilities\", \"sklearn/linear_model/tests/test_logistic.py::test_sparsify\", \"sklearn/linear_model/tests/test_logistic.py::test_inconsistent_input\", \"sklearn/linear_model/tests/test_logistic.py::test_write_parameters\", \"sklearn/linear_model/tests/test_logistic.py::test_nan\", \"sklearn/linear_model/tests/test_logistic.py::test_consistency_path\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_convergence_fail\", \"sklearn/linear_model/tests/test_logistic.py::test_liblinear_dual_random_state\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_loss_and_grad\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_grad_hess\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[accuracy-multiclass_agg_list0]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[precision-multiclass_agg_list1]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[neg_log_loss-multiclass_agg_list3]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[recall-multiclass_agg_list4]\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_logistic_regression_string_inputs\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_sparse\", \"sklearn/linear_model/tests/test_logistic.py::test_intercept_logistic_helper\", \"sklearn/linear_model/tests/test_logistic.py::test_ovr_multinomial_iris\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers_multiclass\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regressioncv_class_weights\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_sample_weights\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_class_weights\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multinomial\", \"sklearn/linear_model/tests/test_logistic.py::test_multinomial_grad_hess\", \"sklearn/linear_model/tests/test_logistic.py::test_liblinear_decision_function_zero\", \"sklearn/linear_model/tests/test_logistic.py::test_liblinear_logregcv_sparse\", \"sklearn/linear_model/tests/test_logistic.py::test_saga_sparse\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling_zero\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_l1\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_l1_sparse_data\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_cv_refit[l1-42]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_cv_refit[l2-42]\", \"sklearn/linear_model/tests/test_logistic.py::test_logreg_predict_proba_multinomial\", \"sklearn/linear_model/tests/test_logistic.py::test_max_iter\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[liblinear]\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_n_iter[lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-saga]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_saga_vs_liblinear\", \"sklearn/linear_model/tests/test_logistic.py::test_dtype_match[newton-cg-ovr]\", \"sklearn/linear_model/tests/test_logistic.py::test_dtype_match[newton-cg-multinomial]\", \"sklearn/linear_model/tests/test_logistic.py::test_dtype_match[saga-ovr]\", \"sklearn/linear_model/tests/test_logistic.py::test_dtype_match[saga-multinomial]\", \"sklearn/linear_model/tests/test_logistic.py::test_warm_start_converge_LR\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_coeffs\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-0.001]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-0.1]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-1]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-100]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-1000]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-1000000.0]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-0.001]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-0.1]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-1]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-10]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-100]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-1000]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-1000000.0]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_vs_l1_l2[0.001]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_vs_l1_l2[1]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_vs_l1_l2[100]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_vs_l1_l2[1000000.0]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.1-0.001]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.1-0.046415888336127795]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.1-2.1544346900318843]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.1-100.0]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.5-0.001]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.5-0.046415888336127795]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.5-2.1544346900318843]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.5-100.0]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.9-0.001]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.9-0.046415888336127795]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.9-2.1544346900318843]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.9-100.0]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_GridSearchCV_elastic_net[ovr]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_GridSearchCV_elastic_net[multinomial]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[ovr-elasticnet]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[multinomial-elasticnet]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[auto-elasticnet]\", \"sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_elasticnet_attribute_shapes\", \"sklearn/linear_model/tests/test_logistic.py::test_l1_ratio_param[-1]\", \"sklearn/linear_model/tests/test_logistic.py::test_l1_ratio_param[2]\", \"sklearn/linear_model/tests/test_logistic.py::test_l1_ratio_param[None]\", \"sklearn/linear_model/tests/test_logistic.py::test_l1_ratio_param[something_wrong]\", \"sklearn/linear_model/tests/test_logistic.py::test_l1_ratios_param[l1_ratios0]\", \"sklearn/linear_model/tests/test_logistic.py::test_l1_ratios_param[l1_ratios1]\", \"sklearn/linear_model/tests/test_logistic.py::test_l1_ratios_param[None]\", \"sklearn/linear_model/tests/test_logistic.py::test_l1_ratios_param[something_wrong]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.1-0.001]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.1-0.046415888336127795]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.1-2.1544346900318843]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.1-100.0]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.5-0.001]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.5-0.046415888336127795]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.5-2.1544346900318843]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.5-100.0]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.9-0.001]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.9-0.046415888336127795]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.9-2.1544346900318843]\", \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.9-100.0]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_coefs_multinomial\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[liblinear-est0]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[liblinear-est1]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[lbfgs-est0]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[lbfgs-est1]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[newton-cg-est0]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[newton-cg-est1]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[sag-est0]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[sag-est1]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[saga-est0]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[saga-est1]\", \"sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_deprecation\", \"sklearn/linear_model/tests/test_logistic.py::test_penalty_none[lbfgs]\", \"sklearn/linear_model/tests/test_logistic.py::test_penalty_none[newton-cg]\", \"sklearn/linear_model/tests/test_logistic.py::test_penalty_none[sag]\", \"sklearn/linear_model/tests/test_logistic.py::test_penalty_none[saga]\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.002239",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}