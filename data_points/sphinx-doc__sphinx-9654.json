{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9654",
  "base_commit": "4a9e015fc6b87fc54c7a01f94d65bcf602fefeaa",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1651,7 +1651,7 @@ def add_directive_header(self, sig: str) -> None:\n \n         # add inheritance info, if wanted\n         if not self.doc_as_attr and self.options.show_inheritance:\n-            if hasattr(self.object, '__orig_bases__') and len(self.object.__orig_bases__):\n+            if inspect.getorigbases(self.object):\n                 # A subclass of generic types\n                 # refs: PEP-560 <https://www.python.org/dev/peps/pep-0560/>\n                 bases = list(self.object.__orig_bases__)\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -187,6 +187,21 @@ def getmro(obj: Any) -> Tuple[Type, ...]:\n         return tuple()\n \n \n+def getorigbases(obj: Any) -> Optional[Tuple[Any, ...]]:\n+    \"\"\"Get __orig_bases__ from *obj* safely.\"\"\"\n+    if not inspect.isclass(obj):\n+        return None\n+\n+    # Get __orig_bases__ from obj.__dict__ to avoid accessing the parent's __orig_bases__.\n+    # refs: https://github.com/sphinx-doc/sphinx/issues/9607\n+    __dict__ = safe_getattr(obj, '__dict__', {})\n+    __orig_bases__ = __dict__.get('__orig_bases__')\n+    if isinstance(__orig_bases__, tuple) and len(__orig_bases__) > 0:\n+        return __orig_bases__\n+    else:\n+        return None\n+\n+\n def getslots(obj: Any) -> Optional[Dict]:\n     \"\"\"Get __slots__ attribute of the class as dict.\n \n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/classes.py b/tests/roots/test-ext-autodoc/target/classes.py\n--- a/tests/roots/test-ext-autodoc/target/classes.py\n+++ b/tests/roots/test-ext-autodoc/target/classes.py\n@@ -29,6 +29,10 @@ class Quux(List[Union[int, float]]):\n     pass\n \n \n+class Corge(Quux):\n+    pass\n+\n+\n Alias = Foo\n \n #: docstring\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -273,6 +273,21 @@ def test_show_inheritance_for_subclass_of_generic_type(app):\n     ]\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_show_inheritance_for_decendants_of_generic_type(app):\n+    options = {'show-inheritance': None}\n+    actual = do_autodoc(app, 'class', 'target.classes.Corge', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Corge(iterable=(), /)',\n+        '   :module: target.classes',\n+        '',\n+        '   Bases: :py:class:`target.classes.Quux`',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autodoc_process_bases(app):\n     def autodoc_process_bases(app, name, obj, options, bases):\n",
  "problem_statement": "Incorrect base class detection\n### Describe the bug\n\nI have a chain of subclasses, like A -> B -> C -> D. When I document class D, it lists the base class as A instead of C.\n\n### How to Reproduce\n\n```\r\n$ git clone https://github.com/microsoft/torchgeo.git\r\n$ cd torchgeo/docs\r\n$ pip install -r requirements.txt\r\n$ make html\r\n$ # open _build/html/api/datasets.html and see that the base class is torch.utils.data.Dataset instead of RasterDataset\r\n```\r\n\n\n### Expected behavior\n\nI would expect the base class to be the direct super class.\n\n### Your project\n\nhttps://github.com/microsoft/torchgeo\n\n### Screenshots\n\n_No response_\n\n### OS\n\nmacOS 10.15.7, Linux (whatever RtD uses)\n\n### Python version\n\n3.8.11\n\n### Sphinx version\n\n4.0.1, 4.0.2\n\n### Sphinx extensions\n\nsphinx.ext.autodoc\n\n### Extra tools\n\n_No response_\n\n### Additional context\n\nI don't think this is the same as #9504 because I can reproduce it with 4.0.1 too.\r\n\r\nCould be related to #9395.\r\n\r\nFor a class like [Landsat](https://github.com/microsoft/torchgeo/blob/main/torchgeo/datasets/landsat.py#L14), even though the super class is `RasterDataset`, the base class is listed as `torch.utils.data.Dataset`.\r\n\r\n@calebrob6\n",
  "hints_text": "It seems `Landsat.__orig_bases__` is incorrect. It should be `(RasterDataset, abc.ABC)`. But it returns `(Dataset, abc.ABC)` instead. It must be a bug of Python interpreter.\r\n\r\n```\r\n$ python\r\nPython 3.8.12 (default, Sep  3 2021, 02:24:44)\r\n[GCC 10.2.1 20210110] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from torchgeo.datasets import Landsat\r\n>>> Landsat.__mro__\r\n(<class 'torchgeo.datasets.Landsat'>, <class 'torchgeo.datasets.RasterDataset'>, <class 'torchgeo.datasets.GeoDataset'>, <class 'torch.utils.data.Dataset'>, <class 'typing.Generic'>, <class 'abc.ABC'>, <class 'object'>)\r\n>>> Landsat.__orig_bases__\r\n(torch.utils.data.Dataset[typing.Dict[str, typing.Any]], <class 'abc.ABC'>)\r\n```\r\n\r\nI got the same result with 3.9.7.\r\n```\r\n$ python\r\nPython 3.9.7 (default, Sep  3 2021, 02:02:37)\r\n[GCC 10.2.1 20210110] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from torchgeo.datasets import Landsat\r\n>>> Landsat.__mro__\r\n(<class 'torchgeo.datasets.Landsat'>, <class 'torchgeo.datasets.RasterDataset'>, <class 'torchgeo.datasets.GeoDataset'>, <class 'torch.utils.data.Dataset'>, <class 'typing.Generic'>, <class 'abc.ABC'>, <class 'object'>)\r\n>>> Landsat.__orig_bases__\r\n(torch.utils.data.Dataset[typing.Dict[str, typing.Any]], <class 'abc.ABC'>)\r\n```\r\n\r\nNote: This is a Dockefile for reproduce.\r\n```\r\nFROM python:3.8-slim\r\n\r\nRUN apt update; apt install -y build-essential curl git make unzip vim\r\nRUN git clone https://github.com/microsoft/torchgeo.git\r\nWORKDIR /torchgeo/docs\r\nRUN pip install -r requirements.txt\r\nRUN make html\r\n```",
  "created_at": "2021-09-20T05:02:15Z",
  "version": "4.3",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_show_inheritance_for_decendants_of_generic_type\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_autoclass.py::test_classes\", \"tests/test_ext_autodoc_autoclass.py::test_instance_variable\", \"tests/test_ext_autodoc_autoclass.py::test_inherited_instance_variable\", \"tests/test_ext_autodoc_autoclass.py::test_uninitialized_attributes\", \"tests/test_ext_autodoc_autoclass.py::test_undocumented_uninitialized_attributes\", \"tests/test_ext_autodoc_autoclass.py::test_decorators\", \"tests/test_ext_autodoc_autoclass.py::test_properties\", \"tests/test_ext_autodoc_autoclass.py::test_slots_attribute\", \"tests/test_ext_autodoc_autoclass.py::test_show_inheritance_for_subclass_of_generic_type\", \"tests/test_ext_autodoc_autoclass.py::test_autodoc_process_bases\", \"tests/test_ext_autodoc_autoclass.py::test_class_doc_from_class\", \"tests/test_ext_autodoc_autoclass.py::test_class_doc_from_init\", \"tests/test_ext_autodoc_autoclass.py::test_class_doc_from_both\", \"tests/test_ext_autodoc_autoclass.py::test_class_alias\", \"tests/test_ext_autodoc_autoclass.py::test_class_alias_having_doccomment\", \"tests/test_ext_autodoc_autoclass.py::test_coroutine\"]",
  "environment_setup_commit": "6c6cc8a6f50b18331cb818160d168d7bb9c03e55",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.068036",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}