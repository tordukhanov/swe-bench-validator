{
  "repo": "django/django",
  "instance_id": "django__django-13808",
  "base_commit": "f054468cac325e8d8fa4d5934b939b93242a3730",
  "patch": "diff --git a/django/db/backends/postgresql/base.py b/django/db/backends/postgresql/base.py\n--- a/django/db/backends/postgresql/base.py\n+++ b/django/db/backends/postgresql/base.py\n@@ -152,10 +152,14 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     def get_connection_params(self):\n         settings_dict = self.settings_dict\n         # None may be used to connect to the default 'postgres' db\n-        if settings_dict['NAME'] == '':\n+        if (\n+            settings_dict['NAME'] == '' and\n+            not settings_dict.get('OPTIONS', {}).get('service')\n+        ):\n             raise ImproperlyConfigured(\n                 \"settings.DATABASES is improperly configured. \"\n-                \"Please supply the NAME value.\")\n+                \"Please supply the NAME or OPTIONS['service'] value.\"\n+            )\n         if len(settings_dict['NAME'] or '') > self.ops.max_name_length():\n             raise ImproperlyConfigured(\n                 \"The database name '%s' (%d characters) is longer than \"\n@@ -166,10 +170,19 @@ def get_connection_params(self):\n                     self.ops.max_name_length(),\n                 )\n             )\n-        conn_params = {\n-            'database': settings_dict['NAME'] or 'postgres',\n-            **settings_dict['OPTIONS'],\n-        }\n+        conn_params = {}\n+        if settings_dict['NAME']:\n+            conn_params = {\n+                'database': settings_dict['NAME'],\n+                **settings_dict['OPTIONS'],\n+            }\n+        elif settings_dict['NAME'] is None:\n+            # Connect to the default 'postgres' db.\n+            settings_dict.get('OPTIONS', {}).pop('service', None)\n+            conn_params = {'database': 'postgres', **settings_dict['OPTIONS']}\n+        else:\n+            conn_params = {**settings_dict['OPTIONS']}\n+\n         conn_params.pop('isolation_level', None)\n         if settings_dict['USER']:\n             conn_params['user'] = settings_dict['USER']\ndiff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -16,6 +16,7 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):\n         dbname = settings_dict.get('NAME') or 'postgres'\n         user = settings_dict.get('USER')\n         passwd = settings_dict.get('PASSWORD')\n+        service = options.get('service')\n         sslmode = options.get('sslmode')\n         sslrootcert = options.get('sslrootcert')\n         sslcert = options.get('sslcert')\n@@ -33,6 +34,8 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):\n         env = {}\n         if passwd:\n             env['PGPASSWORD'] = str(passwd)\n+        if service:\n+            env['PGSERVICE'] = str(service)\n         if sslmode:\n             env['PGSSLMODE'] = str(sslmode)\n         if sslrootcert:\n",
  "test_patch": "diff --git a/tests/backends/postgresql/tests.py b/tests/backends/postgresql/tests.py\n--- a/tests/backends/postgresql/tests.py\n+++ b/tests/backends/postgresql/tests.py\n@@ -68,6 +68,36 @@ def test_database_name_too_long(self):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             DatabaseWrapper(settings).get_connection_params()\n \n+    def test_database_name_empty(self):\n+        from django.db.backends.postgresql.base import DatabaseWrapper\n+        settings = connection.settings_dict.copy()\n+        settings['NAME'] = ''\n+        msg = (\n+            \"settings.DATABASES is improperly configured. Please supply the \"\n+            \"NAME or OPTIONS['service'] value.\"\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            DatabaseWrapper(settings).get_connection_params()\n+\n+    def test_service_name(self):\n+        from django.db.backends.postgresql.base import DatabaseWrapper\n+        settings = connection.settings_dict.copy()\n+        settings['OPTIONS'] = {'service': 'my_service'}\n+        settings['NAME'] = ''\n+        params = DatabaseWrapper(settings).get_connection_params()\n+        self.assertEqual(params['service'], 'my_service')\n+        self.assertNotIn('database', params)\n+\n+    def test_service_name_default_db(self):\n+        # None is used to connect to the default 'postgres' db.\n+        from django.db.backends.postgresql.base import DatabaseWrapper\n+        settings = connection.settings_dict.copy()\n+        settings['NAME'] = None\n+        settings['OPTIONS'] = {'service': 'django_test'}\n+        params = DatabaseWrapper(settings).get_connection_params()\n+        self.assertEqual(params['database'], 'postgres')\n+        self.assertNotIn('service', params)\n+\n     def test_connect_and_rollback(self):\n         \"\"\"\n         PostgreSQL shouldn't roll back SET TIME ZONE, even if the first\ndiff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -67,6 +67,12 @@ def test_ssl_certificate(self):\n             )\n         )\n \n+    def test_service(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({'OPTIONS': {'service': 'django_test'}}),\n+            (['psql', 'postgres'], {'PGSERVICE': 'django_test'}),\n+        )\n+\n     def test_column(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\n",
  "problem_statement": "Allow postgresql database connections to use postgres services\nDescription\n\t \n\t\t(last modified by levihb)\n\t \nPostgres offers a way to make database connections through the use of services, which are basically equivalent to MySQL's options files.\nServer, database, username, etc information is stored by default in ~/.pg_service.conf and takes a very similar format to MySQL cnf files:\n[my_alias]\nhost=10.0.19.10\nuser=postgres\ndbname=postgres\nport=5432\nAnd password can be stored in ~/.pgpass under a different format.\nI think being able to just add them to the DATABASES config would be useful, similar to how you can add MySQL cnf files. psycopg2 supports it just fine through the service argument/string connect(service='my_alias') connect('service=my_alias').\nAt the moment it can be added like this:\nDATABASES = {\n\t'default': {\n\t\t'ENGINE': 'django.db.backends.postgresql',\n\t\t'NAME': 'postgres',\n\t\t'OPTIONS': {'service': 'my_alias'}\n\t}\n}\nWhich works, however it involves repeating the database name. I don't think the database name should be repeated twice because it couples the config and the service file together, and makes it harder to just move it between different environments. I think ideally you would just specify the service, either like this:\nDATABASES = {\n\t'default': {\n\t\t'ENGINE': 'django.db.backends.postgresql',\n\t\t'OPTIONS': {'service': 'my_alias'}\n\t}\n}\nOr maybe a better way would be?:\nDATABASES = {\n\t'default': {\n\t\t'ENGINE': 'django.db.backends.postgresql',\n\t\t'SERVICE': 'my_alias\n\t}\n}\nIt seems like something that would be super easy to add. I don't mind creating a pull request for it, but would like to know why it hasn't been added, and how it would be recommended to add it.\n",
  "hints_text": "Configuration without NAME already works for me, e.g.: 'default': { 'ENGINE': 'django.db.backends.postgresql', 'OPTIONS': { 'service': 'default_django_test' } }, so only setting PGSERVICE for â€‹the underlying command-line client and docs are missing. I don't mind creating a pull request for it, but would like to know why it hasn't been added, ... Because you're the first to suggest it.\nReplying to Mariusz Felisiak: Configuration without NAME already works for me, e.g.: 'default': { 'ENGINE': 'django.db.backends.postgresql', 'OPTIONS': { 'service': 'default_django_test' } }, It doesn't work for me. E.g.: 'default': { 'ENGINE': 'django.db.backends.postgresql', 'OPTIONS': { 'service': 'test_service' } }, Throws the following when it tries to access the database: Traceback (most recent call last): File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 47, in inner response = get_response(request) File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/core/handlers/base.py\", line 179, in _get_response response = wrapped_callback(request, *callback_args, **callback_kwargs) File \"/redacted_path/postgres_services/mysite/testapp/views.py\", line 9, in index c = db_conn.cursor() File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/utils/asyncio.py\", line 26, in inner return func(*args, **kwargs) File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/db/backends/base/base.py\", line 259, in cursor return self._cursor() File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/db/backends/base/base.py\", line 235, in _cursor self.ensure_connection() File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/utils/asyncio.py\", line 26, in inner return func(*args, **kwargs) File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/db/backends/base/base.py\", line 219, in ensure_connection self.connect() File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/utils/asyncio.py\", line 26, in inner return func(*args, **kwargs) File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/db/backends/base/base.py\", line 199, in connect conn_params = self.get_connection_params() File \"/redacted_path/postgres_services/venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py\", line 157, in get_connection_params raise ImproperlyConfigured( django.core.exceptions.ImproperlyConfigured: settings.DATABASES is improperly configured. Please supply the NAME value. While if I just add the NAME value it works just fine. This makes total sense as if you check the postgres base file it checks: if settings_dict['NAME'] == '': raise ImproperlyConfigured( \"settings.DATABASES is improperly configured. \" \"Please supply the NAME value.\") if len(settings_dict['NAME'] or '') > self.ops.max_name_length(): raise ImproperlyConfigured( \"The database name '%s' (%d characters) is longer than \" \"PostgreSQL's limit of %d characters. Supply a shorter NAME \" \"in settings.DATABASES.\" % ( settings_dict['NAME'], len(settings_dict['NAME']), self.ops.max_name_length(), ) ) The first if evaluates to true. settings_dict['NAME'] must be getting defaulted to an empty string, because I'm not setting it to empty, I'm entirely leaving it out. so only setting PGSERVICE for â€‹the underlying command-line client and docs are missing. I don't mind adding support for those either. I don't mind creating a pull request for it, but would like to know why it hasn't been added, ... Because you're the first to suggest it. Oh I was sure I wouldn't have been. I've looked up how to use postgres services for many projects, and nearly always find people asking, even when it's for much much smaller projects. That's rather interesting.\nIt doesn't work for me. E.g.: You're right. I've only checked running tests which works fine.",
  "created_at": "2020-12-23T22:44:41Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_service (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\"]",
  "PASS_TO_PASS": "[\"test_accent (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_basic (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_column (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_crash_password_does_not_leak (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_nopass (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_parameters (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_ssl_certificate (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.670706",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}