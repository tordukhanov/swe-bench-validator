{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-7737",
  "base_commit": "153e9447ae032d92be74e54272565f6e39c69b3c",
  "patch": "diff --git a/astropy/stats/biweight.py b/astropy/stats/biweight.py\n--- a/astropy/stats/biweight.py\n+++ b/astropy/stats/biweight.py\n@@ -102,8 +102,15 @@ def biweight_location(data, c=6.0, M=None, axis=None):\n \n     # set up the weighting\n     mad = median_absolute_deviation(data, axis=axis)\n+\n+    if axis is None and mad == 0.:\n+        return M  # return median if data is a constant array\n+\n     if axis is not None:\n         mad = np.expand_dims(mad, axis=axis)\n+        const_mask = (mad == 0.)\n+        mad[const_mask] = 1.  # prevent divide by zero\n+\n     u = d / (c * mad)\n \n     # now remove the outlier points\n@@ -111,6 +118,8 @@ def biweight_location(data, c=6.0, M=None, axis=None):\n     u = (1 - u ** 2) ** 2\n     u[mask] = 0\n \n+    # along the input axis if data is constant, d will be zero, thus\n+    # the median value will be returned along that axis\n     return M.squeeze() + (d * u).sum(axis=axis) / u.sum(axis=axis)\n \n \n@@ -336,8 +345,15 @@ def biweight_midvariance(data, c=9.0, M=None, axis=None,\n \n     # set up the weighting\n     mad = median_absolute_deviation(data, axis=axis)\n+\n+    if axis is None and mad == 0.:\n+        return 0.  # return zero if data is a constant array\n+\n     if axis is not None:\n         mad = np.expand_dims(mad, axis=axis)\n+        const_mask = (mad == 0.)\n+        mad[const_mask] = 1.  # prevent divide by zero\n+\n     u = d / (c * mad)\n \n     # now remove the outlier points\n@@ -530,6 +546,10 @@ def biweight_midcovariance(data, c=9.0, M=None, modify_sample_size=False):\n \n     # set up the weighting\n     mad = median_absolute_deviation(data, axis=1)\n+\n+    const_mask = (mad == 0.)\n+    mad[const_mask] = 1.  # prevent divide by zero\n+\n     u = (d.T / (c * mad)).T\n \n     # now remove the outlier points\n",
  "test_patch": "diff --git a/astropy/stats/tests/test_biweight.py b/astropy/stats/tests/test_biweight.py\n--- a/astropy/stats/tests/test_biweight.py\n+++ b/astropy/stats/tests/test_biweight.py\n@@ -20,6 +20,40 @@ def test_biweight_location():\n         assert abs(cbl - 0) < 1e-2\n \n \n+def test_biweight_location_constant():\n+    cbl = biweight_location(np.ones((10, 5)))\n+    assert cbl == 1.\n+\n+\n+def test_biweight_location_constant_axis_2d():\n+    shape = (10, 5)\n+    data = np.ones(shape)\n+    cbl = biweight_location(data, axis=0)\n+    assert_allclose(cbl, np.ones(shape[1]))\n+    cbl = biweight_location(data, axis=1)\n+    assert_allclose(cbl, np.ones(shape[0]))\n+\n+    val1 = 100.\n+    val2 = 2.\n+    data = np.arange(50).reshape(10, 5)\n+    data[2] = val1\n+    data[7] = val2\n+    cbl = biweight_location(data, axis=1)\n+    assert_allclose(cbl[2], val1)\n+    assert_allclose(cbl[7], val2)\n+\n+\n+def test_biweight_location_constant_axis_3d():\n+    shape = (10, 5, 2)\n+    data = np.ones(shape)\n+    cbl = biweight_location(data, axis=0)\n+    assert_allclose(cbl, np.ones((shape[1], shape[2])))\n+    cbl = biweight_location(data, axis=1)\n+    assert_allclose(cbl, np.ones((shape[0], shape[2])))\n+    cbl = biweight_location(data, axis=2)\n+    assert_allclose(cbl, np.ones((shape[0], shape[1])))\n+\n+\n def test_biweight_location_small():\n     cbl = biweight_location([1, 3, 5, 500, 2])\n     assert abs(cbl - 2.745) < 1e-3\n@@ -138,6 +172,38 @@ def test_biweight_midvariance_axis_3d():\n         assert_allclose(bw[y], bwi)\n \n \n+def test_biweight_midvariance_constant_axis():\n+    bw = biweight_midvariance(np.ones((10, 5)))\n+    assert bw == 0.0\n+\n+\n+def test_biweight_midvariance_constant_axis_2d():\n+    shape = (10, 5)\n+    data = np.ones(shape)\n+    cbl = biweight_midvariance(data, axis=0)\n+    assert_allclose(cbl, np.zeros(shape[1]))\n+    cbl = biweight_midvariance(data, axis=1)\n+    assert_allclose(cbl, np.zeros(shape[0]))\n+\n+    data = np.arange(50).reshape(10, 5)\n+    data[2] = 100.\n+    data[7] = 2.\n+    bw = biweight_midvariance(data, axis=1)\n+    assert_allclose(bw[2], 0.)\n+    assert_allclose(bw[7], 0.)\n+\n+\n+def test_biweight_midvariance_constant_axis_3d():\n+    shape = (10, 5, 2)\n+    data = np.ones(shape)\n+    cbl = biweight_midvariance(data, axis=0)\n+    assert_allclose(cbl, np.zeros((shape[1], shape[2])))\n+    cbl = biweight_midvariance(data, axis=1)\n+    assert_allclose(cbl, np.zeros((shape[0], shape[2])))\n+    cbl = biweight_midvariance(data, axis=2)\n+    assert_allclose(cbl, np.zeros((shape[0], shape[1])))\n+\n+\n def test_biweight_midcovariance_1d():\n     d = [0, 1, 2]\n     cov = biweight_midcovariance(d)\n@@ -161,6 +227,12 @@ def test_biweight_midcovariance_2d():\n                           [-5.19350838, 4.61391501]])\n \n \n+def test_biweight_midcovariance_constant():\n+    data = np.ones((3, 10))\n+    cov = biweight_midcovariance(data)\n+    assert_allclose(cov, np.zeros((3, 3)))\n+\n+\n def test_biweight_midcovariance_midvariance():\n     \"\"\"\n     Test that biweight_midcovariance diagonal elements agree with\n",
  "problem_statement": "biweight_location of a constant array returns nan\nCurrently the robust mean estimator `biweight_location` returns `nan` for an array with zero variance.\r\n\r\neg:\r\n```\r\n>>> astropy.stats.biweight_location(np.ones(4))\r\nnan   # Instead of expected value 1\r\n```\r\nThis is primarily because of a 0/0 division in the code (case when the calculated mad of array in denominator becomes zero).\r\n\r\nWouldn't it be better to catch this special case and return the median, instead of returning nan?\r\n\n",
  "hints_text": "",
  "created_at": "2018-08-14T18:13:03Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"astropy/stats/tests/test_biweight.py::test_biweight_location_constant\", \"astropy/stats/tests/test_biweight.py::test_biweight_location_constant_axis_2d\", \"astropy/stats/tests/test_biweight.py::test_biweight_location_constant_axis_3d\", \"astropy/stats/tests/test_biweight.py::test_biweight_midvariance_constant_axis\", \"astropy/stats/tests/test_biweight.py::test_biweight_midvariance_constant_axis_2d\", \"astropy/stats/tests/test_biweight.py::test_biweight_midvariance_constant_axis_3d\", \"astropy/stats/tests/test_biweight.py::test_biweight_midcovariance_constant\"]",
  "PASS_TO_PASS": "[\"astropy/stats/tests/test_biweight.py::test_biweight_location\", \"astropy/stats/tests/test_biweight.py::test_biweight_location_small\", \"astropy/stats/tests/test_biweight.py::test_biweight_location_axis\", \"astropy/stats/tests/test_biweight.py::test_biweight_location_axis_3d\", \"astropy/stats/tests/test_biweight.py::test_biweight_scale\", \"astropy/stats/tests/test_biweight.py::test_biweight_midvariance\", \"astropy/stats/tests/test_biweight.py::test_biweight_midvariance_small\", \"astropy/stats/tests/test_biweight.py::test_biweight_midvariance_5127\", \"astropy/stats/tests/test_biweight.py::test_biweight_midvariance_axis\", \"astropy/stats/tests/test_biweight.py::test_biweight_midvariance_axis_3d\", \"astropy/stats/tests/test_biweight.py::test_biweight_midcovariance_1d\", \"astropy/stats/tests/test_biweight.py::test_biweight_midcovariance_2d\", \"astropy/stats/tests/test_biweight.py::test_biweight_midcovariance_midvariance\", \"astropy/stats/tests/test_biweight.py::test_midcovariance_shape\", \"astropy/stats/tests/test_biweight.py::test_midcovariance_M_shape\", \"astropy/stats/tests/test_biweight.py::test_biweight_midcovariance_symmetric\", \"astropy/stats/tests/test_biweight.py::test_biweight_midcorrelation\", \"astropy/stats/tests/test_biweight.py::test_biweight_midcorrelation_inputs\", \"astropy/stats/tests/test_biweight.py::test_biweight_32bit_runtime_warnings\"]",
  "environment_setup_commit": "848c8fa21332abd66b44efe3cb48b72377fb32cc",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.546215",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}