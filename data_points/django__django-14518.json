{
  "repo": "django/django",
  "instance_id": "django__django-14518",
  "base_commit": "1bbb98d9a4b7d83e422b14ae2429cb368eff5a13",
  "patch": "diff --git a/django/middleware/csrf.py b/django/middleware/csrf.py\n--- a/django/middleware/csrf.py\n+++ b/django/middleware/csrf.py\n@@ -11,6 +11,7 @@\n \n from django.conf import settings\n from django.core.exceptions import DisallowedHost, ImproperlyConfigured\n+from django.http.request import HttpHeaders\n from django.urls import get_callable\n from django.utils.cache import patch_vary_headers\n from django.utils.crypto import constant_time_compare, get_random_string\n@@ -28,7 +29,6 @@\n REASON_NO_REFERER = \"Referer checking failed - no Referer.\"\n REASON_BAD_REFERER = \"Referer checking failed - %s does not match any trusted origins.\"\n REASON_NO_CSRF_COOKIE = \"CSRF cookie not set.\"\n-REASON_CSRF_TOKEN_INCORRECT = 'CSRF token incorrect.'\n REASON_CSRF_TOKEN_MISSING = 'CSRF token missing.'\n REASON_MALFORMED_REFERER = \"Referer checking failed - Referer is malformed.\"\n REASON_INSECURE_REFERER = \"Referer checking failed - Referer is insecure while host is secure.\"\n@@ -315,6 +315,13 @@ def _check_referer(self, request):\n         if not is_same_domain(referer.netloc, good_referer):\n             raise RejectRequest(REASON_BAD_REFERER % referer.geturl())\n \n+    def _bad_token_message(self, reason, token_source):\n+        if token_source != 'POST':\n+            # Assume it is a settings.CSRF_HEADER_NAME value.\n+            header_name = HttpHeaders.parse_header_name(token_source)\n+            token_source = f'the {header_name!r} HTTP header'\n+        return f'CSRF token from {token_source} {reason}.'\n+\n     def _check_token(self, request):\n         # Access csrf_token via self._get_token() as rotate_token() may have\n         # been called by an authentication middleware during the\n@@ -349,14 +356,19 @@ def _check_token(self, request):\n                 request_csrf_token = request.META[settings.CSRF_HEADER_NAME]\n             except KeyError:\n                 raise RejectRequest(REASON_CSRF_TOKEN_MISSING)\n+            token_source = settings.CSRF_HEADER_NAME\n+        else:\n+            token_source = 'POST'\n \n         try:\n             request_csrf_token = _sanitize_token(request_csrf_token)\n         except InvalidTokenFormat as exc:\n-            raise RejectRequest(f'CSRF token {exc.reason}.')\n+            reason = self._bad_token_message(exc.reason, token_source)\n+            raise RejectRequest(reason)\n \n         if not _compare_masked_tokens(request_csrf_token, csrf_token):\n-            raise RejectRequest(REASON_CSRF_TOKEN_INCORRECT)\n+            reason = self._bad_token_message('incorrect', token_source)\n+            raise RejectRequest(reason)\n \n     def process_request(self, request):\n         try:\n",
  "test_patch": "diff --git a/tests/csrf_tests/tests.py b/tests/csrf_tests/tests.py\n--- a/tests/csrf_tests/tests.py\n+++ b/tests/csrf_tests/tests.py\n@@ -46,10 +46,24 @@ def _get_GET_no_csrf_cookie_request(self):\n     def _get_GET_csrf_cookie_request(self, cookie=None):\n         raise NotImplementedError('This method must be implemented by a subclass.')\n \n-    def _get_POST_csrf_cookie_request(self, cookie=None):\n-        \"\"\"The cookie argument defaults to the valid test cookie.\"\"\"\n+    def _get_POST_csrf_cookie_request(\n+        self, cookie=None, post_token=None, meta_token=None, token_header=None,\n+    ):\n+        \"\"\"\n+        The cookie argument defaults to this class's default test cookie. The\n+        post_token and meta_token arguments are included in the request's\n+        req.POST and req.META headers, respectively, when that argument is\n+        provided and non-None. The token_header argument is the header key to\n+        use for req.META, defaults to \"HTTP_X_CSRFTOKEN\".\n+        \"\"\"\n+        if token_header is None:\n+            token_header = 'HTTP_X_CSRFTOKEN'\n         req = self._get_GET_csrf_cookie_request(cookie=cookie)\n         req.method = \"POST\"\n+        if post_token is not None:\n+            req.POST['csrfmiddlewaretoken'] = post_token\n+        if meta_token is not None:\n+            req.META[token_header] = meta_token\n         return req\n \n     def _get_POST_no_csrf_cookie_request(self):\n@@ -57,12 +71,8 @@ def _get_POST_no_csrf_cookie_request(self):\n         req.method = \"POST\"\n         return req\n \n-    def _get_POST_request_with_token(self, token=None):\n-        \"\"\"The token argument defaults to the valid test token.\"\"\"\n-        if token is None:\n-            token = self._csrf_id\n-        req = self._get_POST_csrf_cookie_request()\n-        req.POST['csrfmiddlewaretoken'] = token\n+    def _get_POST_request_with_token(self):\n+        req = self._get_POST_csrf_cookie_request(post_token=self._csrf_id)\n         return req\n \n     def _check_token_present(self, response, csrf_id=None):\n@@ -115,12 +125,14 @@ def test_no_csrf_cookie(self):\n         \"\"\"\n         self._check_bad_or_missing_cookie(None, REASON_NO_CSRF_COOKIE)\n \n-    def _check_bad_or_missing_token(self, token, expected):\n-        \"\"\"Passing None for token includes no token.\"\"\"\n-        if token is None:\n-            req = self._get_POST_csrf_cookie_request()\n-        else:\n-            req = self._get_POST_request_with_token(token=token)\n+    def _check_bad_or_missing_token(\n+        self, expected, post_token=None, meta_token=None, token_header=None,\n+    ):\n+        req = self._get_POST_csrf_cookie_request(\n+            post_token=post_token,\n+            meta_token=meta_token,\n+            token_header=token_header,\n+        )\n         mw = CsrfViewMiddleware(post_form_view)\n         mw.process_request(req)\n         with self.assertLogs('django.security.csrf', 'WARNING') as cm:\n@@ -128,33 +140,55 @@ def _check_bad_or_missing_token(self, token, expected):\n         self.assertEqual(403, resp.status_code)\n         self.assertEqual(cm.records[0].getMessage(), 'Forbidden (%s): ' % expected)\n \n-    def test_csrf_cookie_no_token(self):\n-        \"\"\"\n-        If a CSRF cookie is present but with no token, the middleware rejects\n-        the incoming request.\n-        \"\"\"\n-        self._check_bad_or_missing_token(None, REASON_CSRF_TOKEN_MISSING)\n-\n-    def test_csrf_cookie_bad_token_characters(self):\n-        \"\"\"\n-        If a CSRF cookie is present but the token has invalid characters, the\n-        middleware rejects the incoming request.\n-        \"\"\"\n-        self._check_bad_or_missing_token(64 * '*', 'CSRF token has invalid characters.')\n-\n-    def test_csrf_cookie_bad_token_length(self):\n+    def test_csrf_cookie_bad_or_missing_token(self):\n         \"\"\"\n-        If a CSRF cookie is present but the token has an incorrect length, the\n+        If a CSRF cookie is present but the token is missing or invalid, the\n         middleware rejects the incoming request.\n         \"\"\"\n-        self._check_bad_or_missing_token(16 * 'a', 'CSRF token has incorrect length.')\n+        cases = [\n+            (None, None, REASON_CSRF_TOKEN_MISSING),\n+            (16 * 'a', None, 'CSRF token from POST has incorrect length.'),\n+            (64 * '*', None, 'CSRF token from POST has invalid characters.'),\n+            (64 * 'a', None, 'CSRF token from POST incorrect.'),\n+            (\n+                None,\n+                16 * 'a',\n+                \"CSRF token from the 'X-Csrftoken' HTTP header has incorrect length.\",\n+            ),\n+            (\n+                None,\n+                64 * '*',\n+                \"CSRF token from the 'X-Csrftoken' HTTP header has invalid characters.\",\n+            ),\n+            (\n+                None,\n+                64 * 'a',\n+                \"CSRF token from the 'X-Csrftoken' HTTP header incorrect.\",\n+            ),\n+        ]\n+        for post_token, meta_token, expected in cases:\n+            with self.subTest(post_token=post_token, meta_token=meta_token):\n+                self._check_bad_or_missing_token(\n+                    expected,\n+                    post_token=post_token,\n+                    meta_token=meta_token,\n+                )\n \n-    def test_csrf_cookie_incorrect_token(self):\n+    @override_settings(CSRF_HEADER_NAME='HTTP_X_CSRFTOKEN_CUSTOMIZED')\n+    def test_csrf_cookie_bad_token_custom_header(self):\n         \"\"\"\n-        If a CSRF cookie is present but the correctly formatted token is\n-        incorrect, the middleware rejects the incoming request.\n+        If a CSRF cookie is present and an invalid token is passed via a\n+        custom CSRF_HEADER_NAME, the middleware rejects the incoming request.\n         \"\"\"\n-        self._check_bad_or_missing_token(64 * 'a', 'CSRF token incorrect.')\n+        expected = (\n+            \"CSRF token from the 'X-Csrftoken-Customized' HTTP header has \"\n+            \"incorrect length.\"\n+        )\n+        self._check_bad_or_missing_token(\n+            expected,\n+            meta_token=16 * 'a',\n+            token_header='HTTP_X_CSRFTOKEN_CUSTOMIZED',\n+        )\n \n     def test_process_request_csrf_cookie_and_token(self):\n         \"\"\"\n@@ -181,8 +215,7 @@ def test_csrf_token_in_header(self):\n         \"\"\"\n         The token may be passed in a header instead of in the form.\n         \"\"\"\n-        req = self._get_POST_csrf_cookie_request()\n-        req.META['HTTP_X_CSRFTOKEN'] = self._csrf_id\n+        req = self._get_POST_csrf_cookie_request(meta_token=self._csrf_id)\n         mw = CsrfViewMiddleware(post_form_view)\n         mw.process_request(req)\n         resp = mw.process_view(req, post_form_view, (), {})\n@@ -193,8 +226,10 @@ def test_csrf_token_in_header_with_customized_name(self):\n         \"\"\"\n         settings.CSRF_HEADER_NAME can be used to customize the CSRF header name\n         \"\"\"\n-        req = self._get_POST_csrf_cookie_request()\n-        req.META['HTTP_X_CSRFTOKEN_CUSTOMIZED'] = self._csrf_id\n+        req = self._get_POST_csrf_cookie_request(\n+            meta_token=self._csrf_id,\n+            token_header='HTTP_X_CSRFTOKEN_CUSTOMIZED',\n+        )\n         mw = CsrfViewMiddleware(post_form_view)\n         mw.process_request(req)\n         resp = mw.process_view(req, post_form_view, (), {})\n@@ -223,17 +258,15 @@ def test_put_and_delete_allowed(self):\n         \"\"\"\n         HTTP PUT and DELETE can get through with X-CSRFToken and a cookie.\n         \"\"\"\n-        req = self._get_GET_csrf_cookie_request()\n+        req = self._get_POST_csrf_cookie_request(meta_token=self._csrf_id)\n         req.method = 'PUT'\n-        req.META['HTTP_X_CSRFTOKEN'] = self._csrf_id\n         mw = CsrfViewMiddleware(post_form_view)\n         mw.process_request(req)\n         resp = mw.process_view(req, post_form_view, (), {})\n         self.assertIsNone(resp)\n \n-        req = self._get_GET_csrf_cookie_request()\n+        req = self._get_POST_csrf_cookie_request(meta_token=self._csrf_id)\n         req.method = 'DELETE'\n-        req.META['HTTP_X_CSRFTOKEN'] = self._csrf_id\n         mw.process_request(req)\n         resp = mw.process_view(req, post_form_view, (), {})\n         self.assertIsNone(resp)\n",
  "problem_statement": "Include in CsrfViewMiddleware's bad CSRF token message where the token is from\nDescription\n\t \n\t\t(last modified by Chris Jerdonek)\n\t \nCurrently, if CsrfViewMiddleware encounters a bad CSRF token, it will reject the request with a message like--\n\"CSRF token incorrect\"\n\"CSRF token has incorrect length\"\nI noticed that it would be relatively easy to include in these messages whether the token was obtained from POST data or a custom header, which would be useful for troubleshooting. The messages are specified ​here in the code. The new messages could look e.g. like--\n\"CSRF token (from POST) incorrect\"\n\"CSRF token (from 'X-CSRFToken' header) has incorrect length\"\nThe changes to CsrfViewMiddlewareTestMixin proposed in #32800 would make these cases easy to test.\n",
  "hints_text": "",
  "created_at": "2021-06-11T14:38:01Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"If a CSRF cookie is present but the token is missing or invalid, the\", \"If a CSRF cookie is present and an invalid token is passed via a\"]",
  "PASS_TO_PASS": "[\"A request with a bad origin is rejected.\", \"A request with an origin with wrong protocol is rejected.\", \"A POST request with an origin that can't be parsed by urlparse() is\", \"A request with an origin with the wrong protocol compared to\", \"A request with a null origin is rejected.\", \"The csrf token used in posts is changed on every request (although\", \"The token may be passed in a header instead of in the form.\", \"settings.CSRF_HEADER_NAME can be used to customize the CSRF header name\", \"ensure_csrf_cookie() doesn't log warnings (#19436).\", \"The ensure_csrf_cookie() decorator works with the CsrfViewMiddleware\", \"get_token still works for a view decorated with 'csrf_exempt'.\", \"get_token() works for a view decorated solely with requires_csrf_token.\", \"A POST request with an origin added to the CSRF_TRUSTED_ORIGINS\", \"A POST HTTP request with a good origin is accepted.\", \"A POST HTTPS request with a good origin is accepted.\", \"A POST request with an origin that matches a CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a bad referer is rejected\", \"A POST HTTPS request with a referer added to the CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a referer that matches a CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a good referer is accepted.\", \"A POST HTTPS request with a good referer is accepted where the referer\", \"A POST HTTPS request is accepted when USE_X_FORWARDED_PORT=True.\", \"A POST HTTPS request is accepted if it receives a good referer with\", \"A POST HTTPS request with a good referer should be accepted from a\", \"CsrfViewMiddleware generates a 403 response if it receives an HTTPS\", \"A POST HTTPS request with a bad referer is rejected.\", \"A POST HTTPS request with a missing referer is rejected.\", \"A POST HTTPS request from an insecure referer should be rejected.\", \"If no CSRF cookies is present, the middleware rejects the incoming\", \"test_no_session_on_request (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_origin_malformed_host (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"OSErrors during POST data reading are caught and treated as if the\", \"If both a cookie and a token is present, the middleware lets it through.\", \"If a CSRF cookie is present and no token, but the csrf_exempt decorator\", \"If get_token() is not called, the view middleware does not\", \"The ensure_csrf_cookie() decorator works without middleware.\", \"HTTP PUT and DELETE can get through with X-CSRFToken and a cookie.\", \"HTTP PUT and DELETE methods have protection\", \"The session isn't saved if the CSRF cookie is unchanged.\", \"A new token is sent if the csrf_cookie is the empty string.\", \"CsrfTokenNode works when no CSRF cookie is set.\", \"CsrfTokenNode works when a CSRF cookie is set.\", \"CsrfTokenNode works when a CSRF cookie is created by the middleware\", \"If the CSRF cookie has invalid characters in a POST request, the\", \"If the CSRF cookie has an incorrect length in a POST request, the\", \"The csrf token is reset from a bare secret.\", \"CSRF cookie age can be set using settings.CSRF_COOKIE_AGE.\", \"CSRF cookie age does not have max age set and therefore uses\", \"test_csrf_cookie_samesite (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_origin_malformed_host (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"If the token contains non-alphanumeric characters, it is ignored and a\", \"If the token is longer than expected, it is ignored and a new token is\", \"CsrfTokenNode works when a CSRF cookie is created by\", \"test_csrf_token_on_404_stays_constant (csrf_tests.tests.CsrfInErrorHandlingViewsTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.696011",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}