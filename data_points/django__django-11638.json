{
  "repo": "django/django",
  "instance_id": "django__django-11638",
  "base_commit": "c1b26c77a94c13b350d80e9a2f8d0393dee737cd",
  "patch": "diff --git a/django/utils/http.py b/django/utils/http.py\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -113,8 +113,8 @@ def urlencode(query, doseq=False):\n     for key, value in query:\n         if value is None:\n             raise TypeError(\n-                'Cannot encode None in a query string. Did you mean to pass '\n-                'an empty string or omit the value?'\n+                \"Cannot encode None for key '%s' in a query string. Did you \"\n+                \"mean to pass an empty string or omit the value?\" % key\n             )\n         elif not doseq or isinstance(value, (str, bytes)):\n             query_val = value\n@@ -130,8 +130,9 @@ def urlencode(query, doseq=False):\n                 for item in itr:\n                     if item is None:\n                         raise TypeError(\n-                            'Cannot encode None in a query string. Did you '\n-                            'mean to pass an empty string or omit the value?'\n+                            \"Cannot encode None for key '%s' in a query \"\n+                            \"string. Did you mean to pass an empty string or \"\n+                            \"omit the value?\" % key\n                         )\n                     elif not isinstance(item, bytes):\n                         item = str(item)\n",
  "test_patch": "diff --git a/django/test/client.py b/django/test/client.py\n--- a/django/test/client.py\n+++ b/django/test/client.py\n@@ -193,8 +193,8 @@ def is_file(thing):\n     for (key, value) in data.items():\n         if value is None:\n             raise TypeError(\n-                'Cannot encode None as POST data. Did you mean to pass an '\n-                'empty string or omit the value?'\n+                \"Cannot encode None for key '%s' as POST data. Did you mean \"\n+                \"to pass an empty string or omit the value?\" % key\n             )\n         elif is_file(value):\n             lines.extend(encode_file(boundary, key, value))\ndiff --git a/tests/test_client/tests.py b/tests/test_client/tests.py\n--- a/tests/test_client/tests.py\n+++ b/tests/test_client/tests.py\n@@ -61,8 +61,8 @@ def test_query_string_encoding(self):\n \n     def test_get_data_none(self):\n         msg = (\n-            'Cannot encode None in a query string. Did you mean to pass an '\n-            'empty string or omit the value?'\n+            \"Cannot encode None for key 'value' in a query string. Did you \"\n+            \"mean to pass an empty string or omit the value?\"\n         )\n         with self.assertRaisesMessage(TypeError, msg):\n             self.client.get('/get_view/', {'value': None})\n@@ -102,8 +102,8 @@ def test_post(self):\n \n     def test_post_data_none(self):\n         msg = (\n-            'Cannot encode None as POST data. Did you mean to pass an empty '\n-            'string or omit the value?'\n+            \"Cannot encode None for key 'value' as POST data. Did you mean \"\n+            \"to pass an empty string or omit the value?\"\n         )\n         with self.assertRaisesMessage(TypeError, msg):\n             self.client.post('/post_view/', {'value': None})\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -14,8 +14,8 @@\n \n class URLEncodeTests(SimpleTestCase):\n     cannot_encode_none_msg = (\n-        'Cannot encode None in a query string. Did you mean to pass an '\n-        'empty string or omit the value?'\n+        \"Cannot encode None for key 'a' in a query string. Did you mean to \"\n+        \"pass an empty string or omit the value?\"\n     )\n \n     def test_tuples(self):\n",
  "problem_statement": "Improve Exception Message In Test Client and urlencode() when None is passed as data.\nDescription\n\t \n\t\t(last modified by Keith Gray)\n\t \nI am upgrading to 2.2.1 from 2.0.5 and my tests are failing due to a change in the test client: ​https://docs.djangoproject.com/en/2.2/releases/2.2/#miscellaneous. It now throws an exception if a None value is provided in data given to a POST. I would like to propose an improvement to the message to display the offending Key and Value that generate the exception.\nI have a proposed change in my fork on github: ​https://github.com/idahogray/django/tree/ticket_30677\n",
  "hints_text": "I like your suggestion. I would suggest a slightly different wording: raise TypeError( \"Cannot encode None for key '%s' as POST data. Did you mean \" \"to pass an empty string or omit the value?\" % key )\nI agree with Markus' suggestion. Can you create PR via GitHub?\nI will change the wording and create a PR. I have one more question, can I use f-strings since this is going into master? I cloned the repo and tried to run the tests in a Python 3.5 environment but it wouldn't let me.\nDjango 3.0 supports Python 3.6+, nevertheless please don't use f-strings (see #29988).",
  "created_at": "2019-08-09T08:41:19Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_none (utils_tests.test_http.URLEncodeTests)\", \"test_none_in_generator (utils_tests.test_http.URLEncodeTests)\", \"test_none_in_sequence (utils_tests.test_http.URLEncodeTests)\", \"test_get_data_none (test_client.tests.ClientTest)\"]",
  "PASS_TO_PASS": "[\"A test case can specify a custom class for self.client.\", \"test_parsing (utils_tests.test_http.ETagProcessingTests)\", \"test_quoting (utils_tests.test_http.ETagProcessingTests)\", \"test_roundtrip (utils_tests.test_http.URLSafeBase64Tests)\", \"test_http_date (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_asctime (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_rfc1123 (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_rfc850 (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_year_less_than_70 (utils_tests.test_http.HttpDateProcessingTests)\", \"test_bad (utils_tests.test_http.IsSameDomainTests)\", \"test_good (utils_tests.test_http.IsSameDomainTests)\", \"test_allowed_hosts_str (utils_tests.test_http.IsSafeURLTests)\", \"test_bad_urls (utils_tests.test_http.IsSafeURLTests)\", \"test_basic_auth (utils_tests.test_http.IsSafeURLTests)\", \"test_good_urls (utils_tests.test_http.IsSafeURLTests)\", \"test_no_allowed_hosts (utils_tests.test_http.IsSafeURLTests)\", \"test_secure_param_https_urls (utils_tests.test_http.IsSafeURLTests)\", \"test_secure_param_non_https_urls (utils_tests.test_http.IsSafeURLTests)\", \"test (utils_tests.test_http.EscapeLeadingSlashesTests)\", \"test_custom_iterable_not_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_empty_sequence_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_sequence_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_sequence_not_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_tuple_not_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_with_bytearray (utils_tests.test_http.URLEncodeTests)\", \"test_dict_with_bytes_values (utils_tests.test_http.URLEncodeTests)\", \"test_dict_with_sequence_of_bytes (utils_tests.test_http.URLEncodeTests)\", \"test_generator (utils_tests.test_http.URLEncodeTests)\", \"test_multivaluedict (utils_tests.test_http.URLEncodeTests)\", \"test_tuples (utils_tests.test_http.URLEncodeTests)\", \"test_quote (utils_tests.test_http.URLQuoteTests)\", \"test_quote_plus (utils_tests.test_http.URLQuoteTests)\", \"test_unquote (utils_tests.test_http.URLQuoteTests)\", \"test_unquote_plus (utils_tests.test_http.URLQuoteTests)\", \"test_input_too_large (utils_tests.test_http.Base36IntTests)\", \"test_invalid_literal (utils_tests.test_http.Base36IntTests)\", \"test_negative_input (utils_tests.test_http.Base36IntTests)\", \"test_roundtrip (utils_tests.test_http.Base36IntTests)\", \"test_to_base36_errors (utils_tests.test_http.Base36IntTests)\", \"test_to_int_errors (utils_tests.test_http.Base36IntTests)\", \"test_values (utils_tests.test_http.Base36IntTests)\", \"test_get_request_from_factory (test_client.tests.RequestFactoryTest)\", \"The request factory implements all the HTTP/1.1 methods.\", \"The request factory returns an echo response for a TRACE request.\", \"A client can be instantiated with CSRF checks enabled\", \"POST an empty dictionary to a view\", \"test_exc_info (test_client.tests.ClientTest)\", \"test_exc_info_none (test_client.tests.ClientTest)\", \"test_exception_following_nested_client_request (test_client.tests.ClientTest)\", \"test_external_redirect (test_client.tests.ClientTest)\", \"test_external_redirect_with_fetch_error_msg (test_client.tests.ClientTest)\", \"test_follow_307_and_308_preserves_get_params (test_client.tests.ClientTest)\", \"test_follow_307_and_308_preserves_post_data (test_client.tests.ClientTest)\", \"test_follow_307_and_308_preserves_put_body (test_client.tests.ClientTest)\", \"test_follow_307_and_308_redirect (test_client.tests.ClientTest)\", \"A URL that redirects can be followed to termination.\", \"A URL with a relative redirect can be followed.\", \"A URL with a relative redirect with no trailing slash can be followed.\", \"test_force_login_with_backend (test_client.tests.ClientTest)\", \"test_force_login_with_backend_missing_get_user (test_client.tests.ClientTest)\", \"test_force_login_without_backend (test_client.tests.ClientTest)\", \"POST erroneous data to a form\", \"POST erroneous data to a form using multiple templates\", \"GET a view that normally expects POSTs\", \"GET a view\", \"POST incomplete data to a form\", \"POST incomplete data to a form using multiple templates\", \"GET a URL through http\", \"The test Client accepts a json_encoder.\", \"The test client serializes JSON data.\", \"Request a logout after logging in\", \"test_logout_cookie_sessions (test_client.tests.ClientTest)\", \"Mail is redirected to a dummy outbox during test setup\", \"Mass mail is redirected to a dummy outbox during test setup\", \"GET a URL that responds as '404:Not Found'\", \"GET a URL that redirects permanently elsewhere\", \"POST some data to a view\", \"test_post_data_none (test_client.tests.ClientTest)\", \"test_put (test_client.tests.ClientTest)\", \"test_query_string_encoding (test_client.tests.ClientTest)\", \"POST raw data (with a content type) to a view\", \"GET a URL that redirects elsewhere\", \"GET a URL that redirects to an http URI\", \"GET a URL that redirects to an https URI\", \"GET a URL that redirects to a non-200 page\", \"GET a URL that redirects with given GET parameters\", \"assertRedirects() ignores the order of query string parameters.\", \"test_relative_redirect (test_client.tests.ClientTest)\", \"test_relative_redirect_no_trailing_slash (test_client.tests.ClientTest)\", \"test_response_attached_request (test_client.tests.ClientTest)\", \"Check the value of HTTP headers returned in a response\", \"A request may raise an exception with more than one required arg.\", \"test_response_resolver_match (test_client.tests.ClientTest)\", \"test_response_resolver_match_redirect_follow (test_client.tests.ClientTest)\", \"test_response_resolver_match_regular_view (test_client.tests.ClientTest)\", \"reverse_lazy() works in the test client\", \"GET a URL through https\", \"test_session_engine_is_invalid (test_client.tests.ClientTest)\", \"Request a page that modifies the session\", \"test_sessions_app_is_not_installed (test_client.tests.ClientTest)\", \"GET a URL that does a non-permanent redirect\", \"TRACE a view\", \"GET an invalid URL\", \"test_uploading_named_temp_file (test_client.tests.ClientTest)\", \"test_uploading_temp_file (test_client.tests.ClientTest)\", \"Make sure that URL ;-parameters are not stripped.\", \"POST valid data to a form\", \"GET a form, providing hints in the GET data\", \"POST valid data to a form using multiple templates\", \"Request a page that is protected with @login, but use bad credentials\", \"Request a page that is known to throw an error\", \"Request a page that is protected with @login_required\", \"test_view_with_force_login_and_custom_redirect (test_client.tests.ClientTest)\", \"Request a page that is protected with @login, but use an inactive login\", \"test_view_with_inactive_login (test_client.tests.ClientTest)\", \"Request a page that is protected with @login_required(redirect_field_name='redirect_to')\", \"test_view_with_login_when_sessions_app_is_not_installed (test_client.tests.ClientTest)\", \"Request a page that is protected with a @login_required method\", \"Request a page that is protected with a @permission_required method\", \"Request a page that is protected with @permission_required\", \"Request a page that is protected with @permission_required but raises an exception\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.579458",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}