{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-7441",
  "base_commit": "5e5764ed27a8ee1a162a09e3398fcfb7481389af",
  "patch": "diff --git a/astropy/time/core.py b/astropy/time/core.py\n--- a/astropy/time/core.py\n+++ b/astropy/time/core.py\n@@ -10,7 +10,7 @@\n \n import copy\n import operator\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n import numpy as np\n \n@@ -1603,7 +1603,7 @@ def __add__(self, other):\n                 other = getattr(other, out.scale)\n         else:\n             if other.scale is None:\n-                    out._set_scale('tai')\n+                out._set_scale('tai')\n             else:\n                 if self.scale not in TIME_TYPES[other.scale]:\n                     raise TypeError(\"Cannot add Time and TimeDelta instances \"\n@@ -1708,7 +1708,7 @@ class TimeDelta(Time):\n     The allowed values for ``format`` can be listed with::\n \n       >>> list(TimeDelta.FORMATS)\n-      ['sec', 'jd']\n+      ['sec', 'jd', 'datetime']\n \n     Note that for time differences, the scale can be among three groups:\n     geocentric ('tai', 'tt', 'tcg'), barycentric ('tcb', 'tdb'), and rotational\n@@ -1744,6 +1744,9 @@ class TimeDelta(Time):\n     info = TimeDeltaInfo()\n \n     def __init__(self, val, val2=None, format=None, scale=None, copy=False):\n+        if isinstance(val, timedelta) and not format:\n+            format = 'datetime'\n+\n         if isinstance(val, TimeDelta):\n             if scale is not None:\n                 self._set_scale(scale)\n@@ -1769,6 +1772,13 @@ def replicate(self, *args, **kwargs):\n         out.SCALES = self.SCALES\n         return out\n \n+    def to_datetime(self):\n+        \"\"\"\n+        Convert to ``datetime.timedelta`` object.\n+        \"\"\"\n+        tm = self.replicate(format='datetime')\n+        return tm._shaped_like_input(tm._time.value)\n+\n     def _set_scale(self, scale):\n         \"\"\"\n         This is the key routine that actually does time scale conversions.\ndiff --git a/astropy/time/formats.py b/astropy/time/formats.py\n--- a/astropy/time/formats.py\n+++ b/astropy/time/formats.py\n@@ -23,7 +23,7 @@\n            'TimeDeltaFormat', 'TimeDeltaSec', 'TimeDeltaJD',\n            'TimeEpochDateString', 'TimeBesselianEpochString',\n            'TimeJulianEpochString', 'TIME_FORMATS', 'TIME_DELTA_FORMATS',\n-           'TimezoneInfo']\n+           'TimezoneInfo', 'TimeDeltaDatetime']\n \n __doctest_skip__ = ['TimePlotDate']\n \n@@ -1190,4 +1190,39 @@ class TimeDeltaJD(TimeDeltaFormat):\n     unit = 1.\n \n \n+class TimeDeltaDatetime(TimeDeltaFormat, TimeUnique):\n+    \"\"\"Time delta in datetime.timedelta\"\"\"\n+    name = 'datetime'\n+\n+    def _check_val_type(self, val1, val2):\n+        # Note: don't care about val2 for this class\n+        if not all(isinstance(val, datetime.timedelta) for val in val1.flat):\n+            raise TypeError('Input values for {0} class must be '\n+                            'datetime.timedelta objects'.format(self.name))\n+        return val1, None\n+\n+    def set_jds(self, val1, val2):\n+        self._check_scale(self._scale)  # Validate scale.\n+        iterator = np.nditer([val1, None],\n+                             flags=['refs_ok'],\n+                             op_dtypes=[object] + [np.double])\n+\n+        for val, sec in iterator:\n+            sec[...] = val.item().total_seconds()\n+\n+        self.jd1, self.jd2 = day_frac(iterator.operands[-1], 0.0,\n+                                      divisor=erfa.DAYSEC)\n+\n+    @property\n+    def value(self):\n+        iterator = np.nditer([self.jd1 + self.jd2, None],\n+                             flags=['refs_ok'],\n+                             op_dtypes=[self.jd1.dtype] + [object])\n+\n+        for jd, out in iterator:\n+            out[...] = datetime.timedelta(days=jd.item())\n+\n+        return self.mask_if_needed(iterator.operands[-1])\n+\n+\n from .core import Time, TIME_SCALES, TIME_DELTA_SCALES, ScaleValueError\n",
  "test_patch": "diff --git a/astropy/time/tests/test_delta.py b/astropy/time/tests/test_delta.py\n--- a/astropy/time/tests/test_delta.py\n+++ b/astropy/time/tests/test_delta.py\n@@ -6,6 +6,8 @@\n \n import pytest\n \n+from datetime import timedelta\n+\n from .. import (Time, TimeDelta, OperandTypeError, ScaleValueError,\n                 TIME_SCALES, STANDARD_TIME_SCALES, TIME_DELTA_SCALES)\n from ... import units as u\n@@ -247,6 +249,10 @@ def test_set_format(self):\n         assert dt.value == 1.0\n         assert dt.format == 'jd'\n \n+        dt.format = 'datetime'\n+        assert dt.value == timedelta(days=1)\n+        assert dt.format == 'datetime'\n+\n \n class TestTimeDeltaScales():\n     \"\"\"Test scale conversion for Time Delta.\n@@ -504,3 +510,37 @@ def test_timedelta_mask():\n     assert np.all(t.mask == [False, True])\n     assert allclose_jd(t[0].value, 1)\n     assert t.value[1] is np.ma.masked\n+\n+\n+def test_python_timedelta_scalar():\n+    td = timedelta(days=1, seconds=1)\n+    td1 = TimeDelta(td, format='datetime')\n+\n+    assert td1.sec == 86401.0\n+\n+    td2 = TimeDelta(86401.0, format='sec')\n+    assert td2.datetime == td\n+\n+\n+def test_python_timedelta_vector():\n+    td = [[timedelta(days=1), timedelta(days=2)],\n+          [timedelta(days=3), timedelta(days=4)]]\n+\n+    td1 = TimeDelta(td, format='datetime')\n+\n+    assert np.all(td1.jd == [[1, 2], [3, 4]])\n+\n+    td2 = TimeDelta([[1, 2], [3, 4]], format='jd')\n+    assert np.all(td2.datetime == td)\n+\n+\n+def test_timedelta_to_datetime():\n+    td = TimeDelta(1, format='jd')\n+\n+    assert td.to_datetime() == timedelta(days=1)\n+\n+    td2 = TimeDelta([[1, 2], [3, 4]], format='jd')\n+    td = [[timedelta(days=1), timedelta(days=2)],\n+          [timedelta(days=3), timedelta(days=4)]]\n+\n+    assert np.all(td2.to_datetime() == td)\n",
  "problem_statement": "astropy.time.TimeDelta should support conversion to `datetime.timedelta`\nBecause of the inheritance `TimeDelta` has a method `to_datetime` which is useless.\n\nIt should have a method `to_timedelta` which returns a `datetime.timedelta` object or objects.\n\nConversion to `np.datetime64` (for `Time`) and `np.timedelta64` (for `TimeDelta`) would also be great.\n\n",
  "hints_text": "+1\n\nThis would not be too difficult to implement, but as I don't see myself having time soon (I really want to avoid `datetime` if at all possible...), just what I think would be needed:\n1. Make a new `TimeDeltaDatetime(TimeDeltaFormat, TimeUnique)` class in `astropy.time.formats` (can add near the very end of the file), with a setup similar to that of `TimeDatetime` (ie., `_check_val_type`, `set_jds`, and `to_value` methods, plus the definition of the `value` property). Its name can be 'datetime', I think, since it is obvious from context it is a delta (similarly, the name of `TimeDeltaJD` is just 'jd').\n2. Write a new `to_datetime` function in `TimeDelta` which overrides the one from `Time` (I think it is OK to use the same name, since we're producing just the delta version of the `datetime` object.\n3. Write test cases for scalar and array-valued input and output.\n4. Add a line to the available `TimeDelta` formats in `docs/time/index.rst`.\n\nI don't know enough about the numpy versions to comment usefully, but ideally the `TimeDatetime` and new `TimeDeltaDatetime` would be adjusted to be able to deal with those.\n\nEDIT: actually, the numpy versions may need their own format classes, since one would want to be able to convert `Time` objects to them by just doing `t.datetime64` or so. Most likely, these new classes could just be rather simple subclasses of `TimeDatetime` and `TimeDeltaDatetime`.\n\np.s. I changed the title to be a bit more general, as I think just reusing `to_datetime` is slightly better than making a new `to_timedelta`. Note that, in principle, one does not have to define a `to_*` method at all: the moment a new `TimeDeltaFormat` is defined, `TimeDelta` instances will get a property with the same name that can be used for conversion. The only reason `to_timedelta` exists is to make it possible to pass on a timezone.\n\nit is indeed quite confusing to have a method offered that results in an error instead of a warning/\"Not Implemented\" message, without the user doing anything syntactically wrong (while the initiated user might realise that a TimeDelta object shouldn't go to datetime but timedelta:\r\n\r\n```python\r\nt1 = Time(\"2008-01-15\")\r\nt2 = Time(\"2017-06-15\")\r\ndt = t2 - t1\r\ndt.to_datetime()\r\n\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-18-963672c7c2b3> in <module>()\r\n      5 dt = t2 - t1\r\n      6 \r\n----> 7 dt.to_datetime()\r\n\r\n~/miniconda3/envs/stable/lib/python3.6/site-packages/astropy/time/core.py in to_datetime(self, timezone)\r\n   1472 \r\n   1473     def to_datetime(self, timezone=None):\r\n-> 1474         tm = self.replicate(format='datetime')\r\n   1475         return tm._shaped_like_input(tm._time.to_value(timezone))\r\n   1476 \r\n\r\n~/miniconda3/envs/stable/lib/python3.6/site-packages/astropy/time/core.py in replicate(self, *args, **kwargs)\r\n   1548 \r\n   1549     def replicate(self, *args, **kwargs):\r\n-> 1550         out = super(TimeDelta, self).replicate(*args, **kwargs)\r\n   1551         out.SCALES = self.SCALES\r\n   1552         return out\r\n\r\n~/miniconda3/envs/stable/lib/python3.6/site-packages/astropy/time/core.py in replicate(self, format, copy)\r\n    831             Replica of this object\r\n    832         \"\"\"\r\n--> 833         return self._apply('copy' if copy else 'replicate', format=format)\r\n    834 \r\n    835     def _apply(self, method, *args, **kwargs):\r\n\r\n~/miniconda3/envs/stable/lib/python3.6/site-packages/astropy/time/core.py in _apply(self, method, *args, **kwargs)\r\n    917         if new_format not in tm.FORMATS:\r\n    918             raise ValueError('format must be one of {0}'\r\n--> 919                              .format(list(tm.FORMATS)))\r\n    920 \r\n    921         NewFormat = tm.FORMATS[new_format]\r\n\r\nValueError: format must be one of ['sec', 'jd']\r\n```\nThis feature request is really waiting on someone taking the time to implement it...  Probably best if that were someone who actually used `datetime` and `timedelta` -- PRs always welcome!\nI would like to work on this issue.\r\n\r\nOn a side note, if I implement (I don't know if it's possible or not) `TimeDelta` format classes for milliseconds and weeks (like `datetime.timedelta`) would you accept? @mhvk \n@vn-ki - all `TimeDelta` formats internally store their times in days. I think they could most usefully be modeled on the regular `TimeDateTime` class.\r\n\r\nI should add, as I wrote above, I also do not use `datetime` myself at all, so have little interest or specific experience; the summary of what one should do that I wrote above is about all I can easily contribute. Since I don't foresee having time to supervise beyond that, please do think carefully whether you think you know enough before starting this. (Cc @taldcroft, in case he is in a better position.)\n@mhvk can I ask, out of interest, how you do time difference calculations without using datetime?\nThat is what the `TimeDelta` class is for! I.e., I just substract two `Time` instances and the magic of numpy broadcasting even means arrays are done right.\n@michaelaye - certainly agreed that the current situation is indeed confusing, so having the `TimeDelta.to_datetime()` method at least raise `NotImplemented` (with some useful message) would be the first trivial thing to do.\r\n\r\n@vn-ki - like @mhvk I don't actually ever use `datetime` by choice, but if you come up with a PR then I'll be happy to review it.  My initial idea would be overriding the `to_datetime`, where in this case `datetime` means the `datetime` package, not the object.  But other suggestions welcome.\n@mhvk Somehow its existence escaped me. ;) I even don't remember what my use case was that I copied above. I will make sure to use TimeDelta from now on! :)",
  "created_at": "2018-05-08T10:23:12Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"astropy/time/tests/test_delta.py::test_python_timedelta_scalar\", \"astropy/time/tests/test_delta.py::test_python_timedelta_vector\", \"astropy/time/tests/test_delta.py::test_timedelta_to_datetime\"]",
  "PASS_TO_PASS": "[\"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_delta_scales_definition\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tai-tai]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tai-tcg]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tai-tt]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tai-utc]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tcb-tcb]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tcb-tdb]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tcg-tai]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tcg-tcg]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tcg-tt]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tcg-utc]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tdb-tcb]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tdb-tdb]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tt-tai]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tt-tcg]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tt-tt]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[tt-utc]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[ut1-ut1]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[utc-tai]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[utc-tcg]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[utc-tt]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_standard_scales_for_time_minus_time[utc-utc]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_local_scales_for_time_minus_time\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_minus_delta\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tai-add]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tai-sub]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tcb-add]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tcb-sub]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tcg-add]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tcg-sub]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tdb-add]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tdb-sub]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tt-add]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[tt-sub]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[ut1-add]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[ut1-sub]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[utc-add]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[utc-sub]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[local-add]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_scales_for_delta_scale_is_none[local-sub]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_delta_day_is_86400_seconds[tai]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_delta_day_is_86400_seconds[tcb]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_delta_day_is_86400_seconds[tcg]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_delta_day_is_86400_seconds[tdb]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_delta_day_is_86400_seconds[tt]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_delta_day_is_86400_seconds[ut1]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_delta_day_is_86400_seconds[utc]\", \"astropy/time/tests/test_delta.py::TestTimeDeltaScales::test_delta_day_is_86400_seconds[local]\", \"astropy/time/tests/test_delta.py::test_timedelta_setitem\", \"astropy/time/tests/test_delta.py::test_timedelta_mask\"]",
  "environment_setup_commit": "848c8fa21332abd66b44efe3cb48b72377fb32cc",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.545467",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}