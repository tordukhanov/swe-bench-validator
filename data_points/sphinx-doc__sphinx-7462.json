{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7462",
  "base_commit": "b3e26a6c851133b82b50f4b68b53692076574d13",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -105,11 +105,16 @@ def unparse(node: ast.AST) -> List[Node]:\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Tuple):\n-            result = []\n-            for elem in node.elts:\n-                result.extend(unparse(elem))\n-                result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if node.elts:\n+                result = []\n+                for elem in node.elts:\n+                    result.extend(unparse(elem))\n+                    result.append(addnodes.desc_sig_punctuation('', ', '))\n+                result.pop()\n+            else:\n+                result = [addnodes.desc_sig_punctuation('', '('),\n+                          addnodes.desc_sig_punctuation('', ')')]\n+\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\ndiff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -114,7 +114,10 @@ def unparse(node: ast.AST) -> str:\n     elif isinstance(node, ast.UnaryOp):\n         return \"%s %s\" % (unparse(node.op), unparse(node.operand))\n     elif isinstance(node, ast.Tuple):\n-        return \", \".join(unparse(e) for e in node.elts)\n+        if node.elts:\n+            return \", \".join(unparse(e) for e in node.elts)\n+        else:\n+            return \"()\"\n     elif sys.version_info > (3, 6) and isinstance(node, ast.Constant):\n         # this branch should be placed at last\n         return repr(node.value)\n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -255,6 +255,13 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    doctree = _parse_annotation(\"Tuple[()]\")\n+    assert_node(doctree, ([pending_xref, \"Tuple\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          [desc_sig_punctuation, \"(\"],\n+                          [desc_sig_punctuation, \")\"],\n+                          [desc_sig_punctuation, \"]\"]))\n+\n     doctree = _parse_annotation(\"Callable[[int, int], int]\")\n     assert_node(doctree, ([pending_xref, \"Callable\"],\n                           [desc_sig_punctuation, \"[\"],\ndiff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"1, 2, 3\"),                   # Tuple\n+    (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n     module = ast.parse(source)\n",
  "problem_statement": "`IndexError: pop from empty list` for empty tuple type annotation\n**Describe the bug**\r\nFollowing notation for empty tuple from [this mypy issue](https://github.com/python/mypy/issues/4211) like\r\n```python\r\nfrom typing import Tuple\r\n\r\ndef foo() -> Tuple[()]:\r\n\t\"\"\"Sample text.\"\"\"\r\n    return ()\r\n```\r\nI get\r\n```bash\r\n  File \"\\path\\to\\site-packages\\sphinx\\domains\\python.py\", line 112, in unparse\r\n    result.pop()\r\nIndexError: pop from empty list\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Write contents of snippet to module and set it to be explorable by sphinx.\r\n2. Install dependencies, in my `docs/requirements.txt`:\r\n```txt\r\nSphinx>=2.0.1\r\nsphinx-rtd-theme>=0.4.3\r\n```\r\n2. Build docs.\r\n\r\n**Expected behavior**\r\nDocs are built and there is `foo` with valid type annotations.\r\n\r\n**Your project**\r\nhttps://github.com/lycantropos/robust/tree/1c7b74e0cc39c1843a89583b8c245f08039a3978\r\n\r\n**Environment info**\r\n- OS: Windows 10, but also reproduces on [readthedocs](https://readthedocs.org/projects/shewchuk/builds/10817256/).\r\n- Python version: 3.8.0\r\n- Sphinx version: 3.0.1\r\n- Sphinx extensions:  `['sphinx.ext.autodoc', 'sphinx.ext.viewcode']`\r\n\n",
  "hints_text": "Changing\r\nhttps://github.com/sphinx-doc/sphinx/blob/b3e26a6c851133b82b50f4b68b53692076574d13/sphinx/domains/python.py#L117-L122\r\nto\r\n```python\r\n            if node.elts:\r\n                result = []\r\n                for elem in node.elts:\r\n                    result.extend(unparse(elem))\r\n                    result.append(addnodes.desc_sig_punctuation('', ', '))\r\n                result.pop()\r\n            else:\r\n                result = [addnodes.desc_sig_punctuation('', '('),\r\n                          addnodes.desc_sig_punctuation('', ')')]\r\n            return result\r\n```\r\nseems to solve the problem for me generating `Tuple[()]` in docs.\r\n\r\nSo it looks like empty tuples should be handled separately.",
  "created_at": "2020-04-12T04:10:05Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_pycode_ast.py::test_unparse[()-()]\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_exceptions_module_is_ignored\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_pycode_ast.py::test_unparse[a\", \"tests/test_pycode_ast.py::test_unparse[os.path-os.path]\", \"tests/test_pycode_ast.py::test_unparse[1\", \"tests/test_pycode_ast.py::test_unparse[b'bytes'-b'bytes']\", \"tests/test_pycode_ast.py::test_unparse[object()-object()]\", \"tests/test_pycode_ast.py::test_unparse[1234-1234_0]\", \"tests/test_pycode_ast.py::test_unparse[{'key1':\", \"tests/test_pycode_ast.py::test_unparse[...-...]\", \"tests/test_pycode_ast.py::test_unparse[Tuple[int,\", \"tests/test_pycode_ast.py::test_unparse[~\", \"tests/test_pycode_ast.py::test_unparse[lambda\", \"tests/test_pycode_ast.py::test_unparse[[1,\", \"tests/test_pycode_ast.py::test_unparse[sys-sys]\", \"tests/test_pycode_ast.py::test_unparse[1234-1234_1]\", \"tests/test_pycode_ast.py::test_unparse[not\", \"tests/test_pycode_ast.py::test_unparse[{1,\", \"tests/test_pycode_ast.py::test_unparse['str'-'str']\", \"tests/test_pycode_ast.py::test_unparse[+\", \"tests/test_pycode_ast.py::test_unparse[-\", \"tests/test_pycode_ast.py::test_unparse[(1,\", \"tests/test_pycode_ast.py::test_unparse_None\", \"tests/test_pycode_ast.py::test_unparse_py38\"]",
  "environment_setup_commit": "5afc77ee27fc01c57165ab260d3a76751f9ddb35",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.041284",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}