{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-24538",
  "base_commit": "c1588e695d04c4520b1b0bc915add22cedd481f4",
  "patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -360,12 +360,19 @@ def __init__(\n         labels : list of str\n             A list of labels to show next to the artists. The length of handles\n             and labels should be the same. If they are not, they are truncated\n-            to the smaller of both lengths.\n+            to the length of the shorter list.\n \n         Other Parameters\n         ----------------\n         %(_legend_kw_doc)s\n \n+        Attributes\n+        ----------\n+        legend_handles\n+            List of `.Artist` objects added as legend entries.\n+\n+            .. versionadded:: 3.7\n+\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -397,7 +404,7 @@ def __init__(\n         self._fontsize = self.prop.get_size_in_points()\n \n         self.texts = []\n-        self.legendHandles = []\n+        self.legend_handles = []\n         self._legend_title_box = None\n \n         #: A dictionary with the extra handler mappings for this Legend\n@@ -561,7 +568,7 @@ def val_or_rc(val, rc_name):\n                 labelcolor = mpl.rcParams['text.color']\n         if isinstance(labelcolor, str) and labelcolor in color_getters:\n             getter_names = color_getters[labelcolor]\n-            for handle, text in zip(self.legendHandles, self.texts):\n+            for handle, text in zip(self.legend_handles, self.texts):\n                 try:\n                     if handle.get_array() is not None:\n                         continue\n@@ -594,6 +601,9 @@ def val_or_rc(val, rc_name):\n         else:\n             raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n \n+    legendHandles = _api.deprecated('3.7', alternative=\"legend_handles\")(\n+        property(lambda self: self.legend_handles))\n+\n     def _set_artist_props(self, a):\n         \"\"\"\n         Set the boilerplate props for artists added to axes.\n@@ -838,7 +848,7 @@ def _init_legend_box(self, handles, labels, markerfirst=True):\n         self._legend_box.set_figure(self.figure)\n         self._legend_box.axes = self.axes\n         self.texts = text_list\n-        self.legendHandles = handle_list\n+        self.legend_handles = handle_list\n \n     def _auto_legend_data(self):\n         \"\"\"\n@@ -885,12 +895,12 @@ def get_frame(self):\n \n     def get_lines(self):\n         r\"\"\"Return the list of `~.lines.Line2D`\\s in the legend.\"\"\"\n-        return [h for h in self.legendHandles if isinstance(h, Line2D)]\n+        return [h for h in self.legend_handles if isinstance(h, Line2D)]\n \n     def get_patches(self):\n         r\"\"\"Return the list of `~.patches.Patch`\\s in the legend.\"\"\"\n         return silent_list('Patch',\n-                           [h for h in self.legendHandles\n+                           [h for h in self.legend_handles\n                             if isinstance(h, Patch)])\n \n     def get_texts(self):\ndiff --git a/lib/matplotlib/legend_handler.py b/lib/matplotlib/legend_handler.py\n--- a/lib/matplotlib/legend_handler.py\n+++ b/lib/matplotlib/legend_handler.py\n@@ -9,16 +9,16 @@\n     </tutorials/intermediate/legend_guide>` before reading this documentation.\n \n Legend handlers are expected to be a callable object with a following\n-signature. ::\n+signature::\n \n     legend_handler(legend, orig_handle, fontsize, handlebox)\n \n Where *legend* is the legend itself, *orig_handle* is the original\n-plot, *fontsize* is the fontsize in pixels, and *handlebox* is a\n-OffsetBox instance. Within the call, you should create relevant\n+plot, *fontsize* is the fontsize in pixels, and *handlebox* is an\n+`.OffsetBox` instance. Within the call, you should create relevant\n artists (using relevant properties from the *legend* and/or\n-*orig_handle*) and add them into the handlebox. The artists need to\n-be scaled according to the fontsize (note that the size is in pixel,\n+*orig_handle*) and add them into the *handlebox*. The artists need to\n+be scaled according to the *fontsize* (note that the size is in pixels,\n i.e., this is dpi-scaled value).\n \n This module includes definition of several legend handler classes\n@@ -49,7 +49,7 @@ class HandlerBase:\n     A base class for default legend handlers.\n \n     The derived classes are meant to override *create_artists* method, which\n-    has a following signature.::\n+    has the following signature::\n \n       def create_artists(self, legend, orig_handle,\n                          xdescent, ydescent, width, height, fontsize,\n@@ -61,6 +61,18 @@ def create_artists(self, legend, orig_handle,\n \n     \"\"\"\n     def __init__(self, xpad=0., ypad=0., update_func=None):\n+        \"\"\"\n+        Parameters\n+        ----------\n+\n+        xpad : float, optional\n+            Padding in x-direction.\n+        ypad : float, optional\n+            Padding in y-direction.\n+        update_func : callable, optional\n+            Function for updating the legend handler properties from another\n+            legend handler, used by `~HandlerBase.update_prop`.\n+        \"\"\"\n         self._xpad, self._ypad = xpad, ypad\n         self._update_prop_func = update_func\n \n@@ -133,6 +145,26 @@ def legend_artist(self, legend, orig_handle,\n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize,\n                        trans):\n+        \"\"\"\n+        Return the legend artists generated.\n+\n+        Parameters\n+        ----------\n+        legend : `~matplotlib.legend.Legend`\n+            The legend for which these legend artists are being created.\n+        orig_handle : `~matplotlib.artist.Artist` or similar\n+            The object for which these legend artists are being created.\n+        xdescent, ydescent, width, height : int\n+            The rectangle (*xdescent*, *ydescent*, *width*, *height*) that the\n+            legend artists being created should fit within.\n+        fontsize : int\n+            The fontsize in pixels. The legend artists being created should\n+            be scaled according to the given fontsize.\n+        trans :  `~matplotlib.transforms.Transform`\n+            The transform that is applied to the legend artists being created.\n+            Typically from unit coordinates in the handler box to screen\n+            coordinates.\n+        \"\"\"\n         raise NotImplementedError('Derived must override')\n \n \n@@ -217,7 +249,7 @@ class HandlerLine2DCompound(HandlerNpoints):\n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize,\n                        trans):\n-\n+        # docstring inherited\n         xdata, xdata_marker = self.get_xdata(legend, xdescent, ydescent,\n                                              width, height, fontsize)\n \n@@ -276,7 +308,7 @@ class HandlerLine2D(HandlerNpoints):\n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize,\n                        trans):\n-\n+        # docstring inherited\n         xdata, xdata_marker = self.get_xdata(legend, xdescent, ydescent,\n                                              width, height, fontsize)\n \n@@ -341,6 +373,7 @@ def _create_patch(self, legend, orig_handle,\n \n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize, trans):\n+        # docstring inherited\n         p = self._create_patch(legend, orig_handle,\n                                xdescent, ydescent, width, height, fontsize)\n         self.update_prop(p, orig_handle, legend)\n@@ -374,6 +407,7 @@ def _create_line(orig_handle, width, height):\n \n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize, trans):\n+        # docstring inherited\n         if orig_handle.get_fill() or (orig_handle.get_hatch() is not None):\n             p = self._create_patch(orig_handle, xdescent, ydescent, width,\n                                    height)\n@@ -404,7 +438,7 @@ def _default_update_prop(self, legend_handle, orig_handle):\n \n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize, trans):\n-\n+        # docstring inherited\n         xdata, xdata_marker = self.get_xdata(legend, xdescent, ydescent,\n                                              width, height, fontsize)\n         ydata = np.full_like(xdata, (height - ydescent) / 2)\n@@ -471,6 +505,7 @@ def create_collection(self, orig_handle, sizes, offsets, offset_transform):\n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize,\n                        trans):\n+        # docstring inherited\n         xdata, xdata_marker = self.get_xdata(legend, xdescent, ydescent,\n                                              width, height, fontsize)\n \n@@ -534,7 +569,7 @@ def get_err_size(self, legend, xdescent, ydescent,\n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize,\n                        trans):\n-\n+        # docstring inherited\n         plotlines, caplines, barlinecols = orig_handle\n \n         xdata, xdata_marker = self.get_xdata(legend, xdescent, ydescent,\n@@ -653,6 +688,7 @@ def get_ydata(self, legend, xdescent, ydescent, width, height, fontsize):\n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize,\n                        trans):\n+        # docstring inherited\n         markerline, stemlines, baseline = orig_handle\n         # Check to see if the stemcontainer is storing lines as a list or a\n         # LineCollection. Eventually using a list will be removed, and this\n@@ -730,7 +766,7 @@ def __init__(self, ndivide=1, pad=None, **kwargs):\n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize,\n                        trans):\n-\n+        # docstring inherited\n         handler_map = legend.get_legend_handler_map()\n \n         if self._ndivide is None:\n@@ -797,6 +833,7 @@ def get_first(prop_array):\n \n     def create_artists(self, legend, orig_handle,\n                        xdescent, ydescent, width, height, fontsize, trans):\n+        # docstring inherited\n         p = Rectangle(xy=(-xdescent, -ydescent),\n                       width=width, height=height)\n         self.update_prop(p, orig_handle, legend)\ndiff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -3331,7 +3331,7 @@ def _get_bracket(self, x0, y0,\n             return vertices_arrow, codes_arrow\n \n         def transmute(self, path, mutation_size, linewidth):\n-            # Doc-string inherited\n+            # docstring inherited\n             if self._beginarrow_head or self._endarrow_head:\n                 head_length = self.head_length * mutation_size\n                 head_width = self.head_width * mutation_size\n@@ -3598,7 +3598,7 @@ def __init__(self, head_length=.5, head_width=.5, tail_width=.2):\n             super().__init__()\n \n         def transmute(self, path, mutation_size, linewidth):\n-            # Doc-string inherited\n+            # docstring inherited\n             x0, y0, x1, y1, x2, y2 = self.ensure_quadratic_bezier(path)\n \n             # divide the path into a head and a tail\n@@ -3677,7 +3677,7 @@ def __init__(self, head_length=.4, head_width=.4, tail_width=.4):\n             super().__init__()\n \n         def transmute(self, path, mutation_size, linewidth):\n-            # Doc-string inherited\n+            # docstring inherited\n             x0, y0, x1, y1, x2, y2 = self.ensure_quadratic_bezier(path)\n \n             # divide the path into a head and a tail\n@@ -3766,7 +3766,7 @@ def __init__(self, tail_width=.3, shrink_factor=0.5):\n             super().__init__()\n \n         def transmute(self, path, mutation_size, linewidth):\n-            # Doc-string inherited\n+            # docstring inherited\n             x0, y0, x1, y1, x2, y2 = self.ensure_quadratic_bezier(path)\n \n             arrow_path = [(x0, y0), (x1, y1), (x2, y2)]\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -147,7 +147,7 @@ def test_legend_label_with_leading_underscore():\n     with pytest.warns(UserWarning,\n                       match=r\"starts with '_'.*excluded from the legend.\"):\n         legend = ax.legend(handles=[line])\n-    assert len(legend.legendHandles) == 0\n+    assert len(legend.legend_handles) == 0\n \n \n @image_comparison(['legend_labels_first.png'], remove_text=True)\n@@ -550,7 +550,7 @@ def test_linecollection_scaled_dashes():\n     ax.add_collection(lc3)\n \n     leg = ax.legend([lc1, lc2, lc3], [\"line1\", \"line2\", 'line 3'])\n-    h1, h2, h3 = leg.legendHandles\n+    h1, h2, h3 = leg.legend_handles\n \n     for oh, lh in zip((lc1, lc2, lc3), (h1, h2, h3)):\n         assert oh.get_linestyles()[0] == lh._dash_pattern\n@@ -970,7 +970,7 @@ def test_legend_draggable(draggable):\n def test_alpha_handles():\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n     legend = plt.legend()\n-    for lh in legend.legendHandles:\n+    for lh in legend.legend_handles:\n         lh.set_alpha(1.0)\n     assert lh.get_facecolor()[:-1] == hh[1].get_facecolor()[:-1]\n     assert lh.get_edgecolor()[:-1] == hh[1].get_edgecolor()[:-1]\n@@ -1102,7 +1102,7 @@ def test_handlerline2d():\n     ax.scatter([0, 1], [0, 1], marker=\"v\")\n     handles = [mlines.Line2D([0], [0], marker=\"v\")]\n     leg = ax.legend(handles, [\"Aardvark\"], numpoints=1)\n-    assert handles[0].get_marker() == leg.legendHandles[0].get_marker()\n+    assert handles[0].get_marker() == leg.legend_handles[0].get_marker()\n \n \n def test_subfigure_legend():\ndiff --git a/lib/mpl_toolkits/mplot3d/tests/test_legend3d.py b/lib/mpl_toolkits/mplot3d/tests/test_legend3d.py\n--- a/lib/mpl_toolkits/mplot3d/tests/test_legend3d.py\n+++ b/lib/mpl_toolkits/mplot3d/tests/test_legend3d.py\n@@ -55,7 +55,7 @@ def test_linecollection_scaled_dashes():\n     ax.add_collection(lc3)\n \n     leg = ax.legend([lc1, lc2, lc3], ['line1', 'line2', 'line 3'])\n-    h1, h2, h3 = leg.legendHandles\n+    h1, h2, h3 = leg.legend_handles\n \n     for oh, lh in zip((lc1, lc2, lc3), (h1, h2, h3)):\n         assert oh.get_linestyles()[0] == lh._dash_pattern\n@@ -67,7 +67,7 @@ def test_handlerline3d():\n     ax.scatter([0, 1], [0, 1], marker=\"v\")\n     handles = [art3d.Line3D([0], [0], [0], marker=\"v\")]\n     leg = ax.legend(handles, [\"Aardvark\"], numpoints=1)\n-    assert handles[0].get_marker() == leg.legendHandles[0].get_marker()\n+    assert handles[0].get_marker() == leg.legend_handles[0].get_marker()\n \n \n def test_contour_legend_elements():\n",
  "problem_statement": "document Legend.legendHandles\n### Problem\r\nThe [legendHandles](https://github.com/matplotlib/matplotlib/blob/14b34fd18685d037fc4d67d40df69b602b22ec7f/lib/matplotlib/legend.py#L381) attribute of legend isn't documented, nor does it have a `get_legendHandles()` method.\r\n\r\nI would have found either option useful when trying to get handler positions, per the convo on [gitter](https://gitter.im/matplotlib/matplotlib?at=60ecb345951c58084ed601a3). Or if instead there was a pointer to [ax.get_legend_handles()](https://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.get_legend_handles_labels.html) in the [legend docs](https://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.legend.html?highlight=legend#matplotlib.axes.Axes.legend). And yes, I now know it's in the legend guide, but I didn't look there when trying to find this info (which yes my mistake) and it is an attribute of legend. \r\n\n",
  "hints_text": "attributes should be documented if possible, though I'm always a little confused how we document them.\nThey go in the class docstring:\r\nhttps://github.com/matplotlib/matplotlib/blob/a0306bdcb8633f21c2e127099ec4b1008ed8bb7d/lib/matplotlib/figure.py#L2108-L2126\nSince this is not documented, it's probably not widely used. Therefore, I suggest normalizing the name to `legend_handles` (with deprecation) before making this more public.",
  "created_at": "2022-11-23T18:37:48Z",
  "version": "3.6",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore\", \"lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes\", \"lib/matplotlib/tests/test_legend.py::test_alpha_handles\", \"lib/matplotlib/tests/test_legend.py::test_handlerline2d\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_linecollection_scaled_dashes\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_handlerline3d\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_legend_ordereddict\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto4\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto5\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[png]\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_labels_first[png]\", \"lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[png]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_rc[png]\", \"lib/matplotlib/tests/test_legend.py::test_rc[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[png]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_remove\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs\", \"lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]\", \"lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend\", \"lib/matplotlib/tests/test_legend.py::test_nanscatter\", \"lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]\", \"lib/matplotlib/tests/test_legend.py::test_handler_numpoints\", \"lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning\", \"lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend\", \"lib/matplotlib/tests/test_legend.py::test_shadow_framealpha\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_empty\", \"lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent\", \"lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markerfacecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markfacecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_get_set_draggable\", \"lib/matplotlib/tests/test_legend.py::test_legend_draggable[True]\", \"lib/matplotlib/tests/test_legend.py::test_legend_draggable[False]\", \"lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc\", \"lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception\", \"lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_text_axes\", \"lib/matplotlib/tests/test_legend.py::test_subfigure_legend\", \"lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color\", \"lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_legend_plot[png]\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_legend_bar[png]\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_fancy[png]\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_contour_legend_elements\", \"lib/mpl_toolkits/mplot3d/tests/test_legend3d.py::test_contourf_legend_elements\"]",
  "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.812583",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}