{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-21490",
  "base_commit": "b09aad279b5dcfc49dcf43e0b064eee664ddaf68",
  "patch": "diff --git a/examples/units/basic_units.py b/examples/units/basic_units.py\n--- a/examples/units/basic_units.py\n+++ b/examples/units/basic_units.py\n@@ -132,6 +132,9 @@ def __init__(self, value, unit):\n         self.unit = unit\n         self.proxy_target = self.value\n \n+    def __copy__(self):\n+        return TaggedValue(self.value, self.unit)\n+\n     def __getattribute__(self, name):\n         if name.startswith('__'):\n             return object.__getattribute__(self, name)\ndiff --git a/lib/matplotlib/lines.py b/lib/matplotlib/lines.py\n--- a/lib/matplotlib/lines.py\n+++ b/lib/matplotlib/lines.py\n@@ -2,6 +2,8 @@\n 2D lines with support for a variety of line styles, markers, colors, etc.\n \"\"\"\n \n+import copy\n+\n from numbers import Integral, Number, Real\n import logging\n \n@@ -1230,7 +1232,7 @@ def set_xdata(self, x):\n         ----------\n         x : 1D array\n         \"\"\"\n-        self._xorig = x\n+        self._xorig = copy.copy(x)\n         self._invalidx = True\n         self.stale = True\n \n@@ -1242,7 +1244,7 @@ def set_ydata(self, y):\n         ----------\n         y : 1D array\n         \"\"\"\n-        self._yorig = y\n+        self._yorig = copy.copy(y)\n         self._invalidy = True\n         self.stale = True\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_lines.py b/lib/matplotlib/tests/test_lines.py\n--- a/lib/matplotlib/tests/test_lines.py\n+++ b/lib/matplotlib/tests/test_lines.py\n@@ -332,3 +332,14 @@ def test_picking():\n     found, indices = l2.contains(mouse_event)\n     assert found\n     assert_array_equal(indices['ind'], [0])\n+\n+\n+@check_figures_equal()\n+def test_input_copy(fig_test, fig_ref):\n+\n+    t = np.arange(0, 6, 2)\n+    l, = fig_test.add_subplot().plot(t, t, \".-\")\n+    t[:] = range(3)\n+    # Trigger cache invalidation\n+    l.set_drawstyle(\"steps\")\n+    fig_ref.add_subplot().plot([0, 2, 4], [0, 2, 4], \".-\", drawstyle=\"steps\")\ndiff --git a/lib/matplotlib/tests/test_units.py b/lib/matplotlib/tests/test_units.py\n--- a/lib/matplotlib/tests/test_units.py\n+++ b/lib/matplotlib/tests/test_units.py\n@@ -26,6 +26,9 @@ def to(self, new_units):\n         else:\n             return Quantity(self.magnitude, self.units)\n \n+    def __copy__(self):\n+        return Quantity(self.magnitude, self.units)\n+\n     def __getattr__(self, attr):\n         return getattr(self.magnitude, attr)\n \n",
  "problem_statement": "[Bug]: Line2D should copy its inputs\n### Bug summary\n\nCurrently, Line2D doesn't copy its inputs if they are already arrays.  Most of the time, in-place modifications to the input arrays do *not* affect the draw line, because there is a cache that doesn't get invalidated, but in some circumstances, it *is* possible for these modifications to affect the drawn line.\r\n\r\nInstead, Line2D should just copy its inputs.  This was rejected in #736 on a memory-saving argument, but note that AxesImage (which would typically have much bigger (2D) inputs than Line2D (which has 1D inputs)) does a copy, which if anything is much worse memory-wise.\n\n### Code for reproduction\n\n```python\nfrom pylab import *\r\nt = arange(0, 6, 2)\r\nl, = plot(t, t, \".-\")\r\nsavefig(\"/tmp/1.png\")\r\nt[:] = range(3)  # in place change\r\nsavefig(\"/tmp/2.png\")  # no effect\r\nl.set_drawstyle(\"steps\")  # ... unless we trigger a cache invalidation\r\nsavefig(\"/tmp/3.png\")  # in fact, only the x array got updated, not the y\n```\n\n\n### Actual outcome\n\n(1)\r\n![1](https://user-images.githubusercontent.com/1322974/134257080-5f1afea6-59b0-429b-9ab4-bb4187942139.png)\r\n(2) (same as (1))\r\n![2](https://user-images.githubusercontent.com/1322974/134257087-a2dc2907-819e-4e50-8028-946677fff811.png)\r\n(3) (different, but only x got updated, not y)\r\n![3](https://user-images.githubusercontent.com/1322974/134257088-854fcbd6-407b-434e-b9cb-5583a8be3d77.png)\r\n\n\n### Expected outcome\n\nModifying `t` a posteriori should not affect the Line2D.  Compare e.g. with AxesImage:\r\n```python\r\nim = arange(9).reshape(3, 3)\r\nimshow(im)\r\nsavefig(\"/tmp/4.png\")\r\nim[:, :] = im[::-1, ::-1]\r\nsavefig(\"/tmp/5.png\")\r\n```\r\nBoth images are identical.\n\n### Operating system\n\nlinux\n\n### Matplotlib Version\n\n3.5b1\n\n### Matplotlib Backend\n\nmplcairo\n\n### Python version\n\n39\n\n### Jupyter version\n\n_No response_\n\n### Other libraries\n\n_No response_\n\n### Installation\n\nsource\n\n### Conda channel\n\n_No response_\n",
  "hints_text": "I agree, for most practical purposes, the memory consumption should be negligable.\r\n\r\nIf one wanted to be on the safe side, one could add a flag, but I tend to think that's not neccesary.\nSeems like a well defined what-to-do (with a lot of examples at other places in the code) -- adding it as a good first issue/hacktoberfest-accepted\nHi üôã‚Äç‚ôÇÔ∏è I would like to see if I can solve the problem.\r\nJust to make sure that I understood the expected outcome in the example. Should the **y** be ending in 2, right?",
  "created_at": "2021-10-28T22:36:00Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_lines.py::test_input_copy[png]\", \"lib/matplotlib/tests/test_lines.py::test_input_copy[pdf]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_lines.py::test_segment_hits\", \"lib/matplotlib/tests/test_lines.py::test_invisible_Line_rendering\", \"lib/matplotlib/tests/test_lines.py::test_set_line_coll_dash\", \"lib/matplotlib/tests/test_lines.py::test_line_dashes[png]\", \"lib/matplotlib/tests/test_lines.py::test_line_dashes[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_line_colors\", \"lib/matplotlib/tests/test_lines.py::test_valid_colors\", \"lib/matplotlib/tests/test_lines.py::test_linestyle_variants\", \"lib/matplotlib/tests/test_lines.py::test_valid_linestyles\", \"lib/matplotlib/tests/test_lines.py::test_drawstyle_variants[png]\", \"lib/matplotlib/tests/test_lines.py::test_no_subslice_with_transform[png]\", \"lib/matplotlib/tests/test_lines.py::test_valid_drawstyles\", \"lib/matplotlib/tests/test_lines.py::test_set_drawstyle\", \"lib/matplotlib/tests/test_lines.py::test_set_line_coll_dash_image[png]\", \"lib/matplotlib/tests/test_lines.py::test_set_line_coll_dash_image[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_marker_fill_styles[png]\", \"lib/matplotlib/tests/test_lines.py::test_markerfacecolor_fillstyle\", \"lib/matplotlib/tests/test_lines.py::test_lw_scaling[png]\", \"lib/matplotlib/tests/test_lines.py::test_lw_scaling[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_nan_is_sorted\", \"lib/matplotlib/tests/test_lines.py::test_step_markers[png]\", \"lib/matplotlib/tests/test_lines.py::test_step_markers[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_markevery[png-figure]\", \"lib/matplotlib/tests/test_lines.py::test_markevery[png-axes]\", \"lib/matplotlib/tests/test_lines.py::test_markevery_figure_line_unsupported_relsize\", \"lib/matplotlib/tests/test_lines.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_lines.py::test_odd_dashes[png]\", \"lib/matplotlib/tests/test_lines.py::test_odd_dashes[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_picking\", \"lib/matplotlib/tests/test_units.py::test_numpy_facade[png]\", \"lib/matplotlib/tests/test_units.py::test_plot_masked_units[png]\", \"lib/matplotlib/tests/test_units.py::test_empty_set_limits_with_units\", \"lib/matplotlib/tests/test_units.py::test_jpl_bar_units[png]\", \"lib/matplotlib/tests/test_units.py::test_jpl_barh_units[png]\", \"lib/matplotlib/tests/test_units.py::test_empty_arrays\", \"lib/matplotlib/tests/test_units.py::test_scatter_element0_masked\", \"lib/matplotlib/tests/test_units.py::test_errorbar_mixed_units\", \"lib/matplotlib/tests/test_units.py::test_subclass[png]\", \"lib/matplotlib/tests/test_units.py::test_shared_axis_quantity\", \"lib/matplotlib/tests/test_units.py::test_shared_axis_datetime\", \"lib/matplotlib/tests/test_units.py::test_shared_axis_categorical\", \"lib/matplotlib/tests/test_units.py::test_empty_default_limits\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.793227",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}