{
  "repo": "django/django",
  "instance_id": "django__django-11405",
  "base_commit": "2007e11d7069b0f6ed673c7520ee7f480f07de68",
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -281,6 +281,7 @@ def get_order_by(self):\n                 if not isinstance(field, OrderBy):\n                     field = field.asc()\n                 if not self.query.standard_ordering:\n+                    field = field.copy()\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n",
  "test_patch": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -210,6 +210,15 @@ def test_reversed_ordering(self):\n     def test_reverse_ordering_pure(self):\n         qs1 = Article.objects.order_by(F('headline').asc())\n         qs2 = qs1.reverse()\n+        self.assertQuerysetEqual(\n+            qs2, [\n+                'Article 4',\n+                'Article 3',\n+                'Article 2',\n+                'Article 1',\n+            ],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             qs1, [\n                 \"Article 1\",\n@@ -219,14 +228,29 @@ def test_reverse_ordering_pure(self):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_reverse_meta_ordering_pure(self):\n+        Article.objects.create(\n+            headline='Article 5',\n+            pub_date=datetime(2005, 7, 30),\n+            author=self.author_1,\n+            second_author=self.author_2,\n+        )\n+        Article.objects.create(\n+            headline='Article 5',\n+            pub_date=datetime(2005, 7, 30),\n+            author=self.author_2,\n+            second_author=self.author_1,\n+        )\n         self.assertQuerysetEqual(\n-            qs2, [\n-                \"Article 4\",\n-                \"Article 3\",\n-                \"Article 2\",\n-                \"Article 1\",\n-            ],\n-            attrgetter(\"headline\")\n+            Article.objects.filter(headline='Article 5').reverse(),\n+            ['Name 2', 'Name 1'],\n+            attrgetter('author.name'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(headline='Article 5'),\n+            ['Name 1', 'Name 2'],\n+            attrgetter('author.name'),\n         )\n \n     def test_no_reordering_after_slicing(self):\n",
  "problem_statement": "Queryset ordering and Meta.ordering are mutable on expressions with reverse().\nDescription\n\t\nQueryset order and Meta.ordering are mutable with reverse().\nBug revealed by running ./runtests.py ordering.test --reverse (reproduced at a2c31e12da272acc76f3a3a0157fae9a7f6477ac).\nIt seems that test added in f218a2ff455b5f7391dd38038994f2c5f8b0eca1 wasn't correct because order mutates on queryset execution in â€‹SQLCompiler.get_order_by().\n",
  "hints_text": "",
  "created_at": "2019-05-23T07:01:53Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_reverse_meta_ordering_pure (ordering.tests.OrderingTests)\", \"test_reverse_ordering_pure (ordering.tests.OrderingTests)\"]",
  "PASS_TO_PASS": "[\"test_default_ordering (ordering.tests.OrderingTests)\", \"F expressions can be used in Meta.ordering.\", \"test_default_ordering_override (ordering.tests.OrderingTests)\", \"test_deprecated_values_annotate (ordering.tests.OrderingTests)\", \"test_extra_ordering (ordering.tests.OrderingTests)\", \"test_extra_ordering_quoting (ordering.tests.OrderingTests)\", \"test_extra_ordering_with_table_name (ordering.tests.OrderingTests)\", \"test_no_reordering_after_slicing (ordering.tests.OrderingTests)\", \"test_order_by_f_expression (ordering.tests.OrderingTests)\", \"test_order_by_f_expression_duplicates (ordering.tests.OrderingTests)\", \"test_order_by_fk_attname (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first_and_last (ordering.tests.OrderingTests)\", \"test_order_by_nulls_last (ordering.tests.OrderingTests)\", \"test_order_by_override (ordering.tests.OrderingTests)\", \"test_order_by_pk (ordering.tests.OrderingTests)\", \"test_orders_nulls_first_on_filtered_subquery (ordering.tests.OrderingTests)\", \"test_random_ordering (ordering.tests.OrderingTests)\", \"test_related_ordering_duplicate_table_reference (ordering.tests.OrderingTests)\", \"test_reversed_ordering (ordering.tests.OrderingTests)\", \"test_stop_slicing (ordering.tests.OrderingTests)\", \"test_stop_start_slicing (ordering.tests.OrderingTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.571669",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}