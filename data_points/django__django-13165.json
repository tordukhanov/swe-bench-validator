{
  "repo": "django/django",
  "instance_id": "django__django-13165",
  "base_commit": "779e615e362108862f1681f965ee9e4f1d0ae6d2",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -858,9 +858,6 @@ class ExpressionWrapper(Expression):\n \n     def __init__(self, expression, output_field):\n         super().__init__(output_field=output_field)\n-        if getattr(expression, '_output_field_or_none', True) is None:\n-            expression = expression.copy()\n-            expression.output_field = output_field\n         self.expression = expression\n \n     def set_source_expressions(self, exprs):\n@@ -870,7 +867,9 @@ def get_source_expressions(self):\n         return [self.expression]\n \n     def get_group_by_cols(self, alias=None):\n-        return self.expression.get_group_by_cols(alias=alias)\n+        expression = self.expression.copy()\n+        expression.output_field = self.output_field\n+        return expression.get_group_by_cols(alias=alias)\n \n     def as_sql(self, compiler, connection):\n         return self.expression.as_sql(compiler, connection)\n",
  "test_patch": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -6,8 +6,8 @@\n from django.db import connection\n from django.db.models import (\n     BooleanField, Case, CharField, Count, DateTimeField, Exists,\n-    ExpressionWrapper, F, Func, IntegerField, Max, NullBooleanField, OuterRef,\n-    Q, Subquery, Sum, Value, When,\n+    ExpressionWrapper, F, FloatField, Func, IntegerField, Max,\n+    NullBooleanField, OuterRef, Q, Subquery, Sum, Value, When,\n )\n from django.db.models.expressions import RawSQL\n from django.db.models.functions import Length, Lower\n@@ -178,6 +178,14 @@ def test_combined_expression_annotation_with_aggregation(self):\n         self.assertEqual(book.combined, 12)\n         self.assertEqual(book.rating_count, 1)\n \n+    def test_combined_f_expression_annotation_with_aggregation(self):\n+        book = Book.objects.filter(isbn='159059725').annotate(\n+            combined=ExpressionWrapper(F('price') * F('pages'), output_field=FloatField()),\n+            rating_count=Count('rating'),\n+        ).first()\n+        self.assertEqual(book.combined, 13410.0)\n+        self.assertEqual(book.rating_count, 1)\n+\n     def test_aggregate_over_annotation(self):\n         agg = Author.objects.annotate(other_age=F('age')).aggregate(otherage_sum=Sum('other_age'))\n         other_agg = Author.objects.aggregate(age_sum=Sum('age'))\n",
  "problem_statement": "ExpressionWrapper loses output_field for combined expression without an output_field.\nDescription\n\t\nI have the following model.\nclass Mallets(models.Model):\n\tid = models.AutoField(primary_key=True,blank=True, null=True)\n\thindsight = models.ForeignKey(Hindsight, models.DO_NOTHING, blank=True, null=True)\n\tbeliever = models.IntegerField(blank=True, null=True)\n\tdamnably = models.IntegerField(blank=True, null=True)\n\tissue = models.IntegerField(blank=True, null=True)\n\tglover = models.TextField(blank=True, null=True) # This field type is a guess.\n\tclass Meta:\n\t\tdb_table = 'mallets'\nand I perform the following query on Django 3.2\nsheer = ExpressionWrapper((F('issue') / F('id')), output_field=FloatField())\nlacquer = ExpressionWrapper(Avg(F('sheer'), output_field=FloatField()), output_field=TextField())\nq = Mallets.objects.using('default')\nret = q.annotate(sheer=sheer).values('sheer').annotate(lacquer=Sum(F('believer'))).order_by('sheer').first()\nDjango however throws the following exception\nTraceback (most recent call last):\n File \"driver_sqlite.py\", line 25, in <module>\n\tret2 = ret1.annotate(sheer=sheer).values('sheer').annotate(lacquer=Sum('believer')).order_by('sheer').first()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/query.py\", line 678, in first\n\tfor obj in (self if self.ordered else self.order_by('pk'))[:1]:\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/query.py\", line 287, in __iter__\n\tself._fetch_all()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/query.py\", line 1305, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/query.py\", line 111, in __iter__\n\tfor row in compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size):\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 1113, in results_iter\n\tresults = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 1148, in execute_sql\n\tsql, params = self.as_sql()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 498, in as_sql\n\textra_select, order_by, group_by = self.pre_sql_setup()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 60, in pre_sql_setup\n\tgroup_by = self.get_group_by(self.select + extra_select, order_by)\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/sql/compiler.py\", line 142, in get_group_by\n\tsql, params = expr.select_format(self, sql, params)\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/expressions.py\", line 388, in select_format\n\tif hasattr(self.output_field, 'select_format'):\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/utils/functional.py\", line 48, in __get__\n\tres = instance.__dict__[self.name] = self.func(instance)\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/expressions.py\", line 269, in output_field\n\toutput_field = self._resolve_output_field()\n File \"/home/.env/lib/python3.6/site-packages/Django-3.2-py3.6.egg/django/db/models/expressions.py\", line 309, in _resolve_output_field\n\tsource.__class__.__name__,\ndjango.core.exceptions.FieldError: Expression contains mixed types: IntegerField, AutoField. You must set output_field.\nNote that when I run the query above on Django 3.0.8, this query runs as expected. So is this a regression in Django 3.2?\n",
  "hints_text": "Related to #31659. Regression in df32fd42b84cc6dbba173201f244491b0d154a63.",
  "created_at": "2020-07-08T11:02:29Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_combined_f_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\"]",
  "PASS_TO_PASS": "[\"test_aggregate_over_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_exists (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_aggregate_with_m2o (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_exists_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_filter_with_subquery (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_in_f_grouped_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_reverse_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_arguments_must_be_expressions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_f_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_boolean_value_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_chaining_annotation_filter_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering_with_deferred (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_annotation_commutative (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions_can_ref_other_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_defer_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_empty_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_agg_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_wrong_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_joined_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_date_interval (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_numbers (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mti_annotations (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_null_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_aggregate (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_raw_sql_with_inherited_field (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_update_with_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_with_pk_annotation (annotations.tests.NonAggregateAnnotationTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.645896",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}