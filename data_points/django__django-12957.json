{
  "repo": "django/django",
  "instance_id": "django__django-12957",
  "base_commit": "a7b4a04d6c54679cb0fbc8679367848bd7dae718",
  "patch": "diff --git a/django/utils/formats.py b/django/utils/formats.py\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -197,6 +197,8 @@ def localize(value, use_l10n=None):\n     elif isinstance(value, bool):  # Make sure booleans don't get treated as numbers\n         return str(value)\n     elif isinstance(value, (decimal.Decimal, float, int)):\n+        if use_l10n is False:\n+            return str(value)\n         return number_format(value, use_l10n=use_l10n)\n     elif isinstance(value, datetime.datetime):\n         return date_format(value, 'DATETIME_FORMAT', use_l10n=use_l10n)\n",
  "test_patch": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1206,6 +1206,25 @@ def test_localize_templatetag_and_filter(self):\n                 self.assertEqual(template2.render(context), output2)\n                 self.assertEqual(template3.render(context), output3)\n \n+    def test_localized_off_numbers(self):\n+        \"\"\"A string representation is returned for unlocalized numbers.\"\"\"\n+        template = Template(\n+            '{% load l10n %}{% localize off %}'\n+            '{{ int }}/{{ float }}/{{ decimal }}{% endlocalize %}'\n+        )\n+        context = Context(\n+            {'int': 1455, 'float': 3.14, 'decimal': decimal.Decimal('24.1567')}\n+        )\n+        for use_l10n in [True, False]:\n+            with self.subTest(use_l10n=use_l10n), self.settings(\n+                USE_L10N=use_l10n,\n+                DECIMAL_SEPARATOR=',',\n+                USE_THOUSAND_SEPARATOR=True,\n+                THOUSAND_SEPARATOR='°',\n+                NUMBER_GROUPING=2,\n+            ):\n+                self.assertEqual(template.render(context), '1455/3.14/24.1567')\n+\n     def test_localized_as_text_as_hidden_input(self):\n         \"\"\"\n         Tests if form input with 'as_hidden' or 'as_text' is correctly localized. Ticket #18777\n",
  "problem_statement": "Geodjango js template should use `|safe` for float values to avoid DECIMAL_SEPARATOR ruin the js syntax\nDescription\n\t\ncontrib/gis/templates/gis/admin/openlayers.js should use |safe on float values to avoid DECIMAL_SEPARATOR (and probably other settings in this category) ruin the js syntax by adding unexpected characters instead of dot.\n",
  "hints_text": "Fixed here: ​https://github.com/django/django/pull/10896\nIt looks to me like {% localize off %} is meant to prevent formatting of the value. Can you add a test that demonstrates how the issue happens?\nlocalize off turns off l10n (look at django/templatetags/l10n.py) in my case l10n is already turned off in my settings. When DECIMAL_SEPARATOR is manually set in settings, localize off has no effect on it, look at this comment copied from line 117 of django/utils/formats.py: # The requested format_type has not been cached yet. Try to find it in any # of the format_modules for the given lang if l10n is enabled. If it's not # there or if l10n is disabled, fall back to the project settings. fall back to the project settings, means falling back to DECIMAL_SEPARATOR (and other settings in its family). But just cause I set a custom value for DECIMAL_SEPARATOR doesn't mean gis should break on my django admin.\nI think that for your use case, it would be better to activate l10n for your project and provide a custom format file (​https://docs.djangoproject.com/en/stable/topics/i18n/formatting/#creating-custom-format-files). Is there anything preventing you applying this suggestion?\nI don't know if something is preventing me applying this suggestion or not, I may be able to apply it, but it doesn't change the fact that setting DECIMAL_SEPERATOR should not break js syntax in js templates in no circumstances. Currently settings DECIMAL_SEPARATOR breaks above mentioned js template regardless of the value of L10N (False or True).\nThis may be a documentation issue, we could warn that using the l10n framework and maybe custom format files should be preferred over setting the global DECIMAL_SEPARATOR which cannot be selectively deactivated with l10n filters/tags.\nIf gis is not supposed to work with DECIMAL_SEPARATOR set in global settings file, then this is indeed a documentation issue rather than a bug. But I think there's room for improvement here, current behavior even if documented is counter intuitive, because developer doesn't know necessarily about internals of gis admin panel and doesn't expect setting DECIMAL_SEPARATOR to break it. Documenting this would be appropriate if it were some random php framework, but even if documented this behavior of setting some settings breaks another completely unrelated thing is not something I've ever seen in Django in my +9 years experience with it. I think what would be acceptable is one of these options: Remove/Deprecate things like DECIMAL_SEPARATOR in settings completely, if it's not something fully supported lets not have it when there are better alternatives that doesn't break things and do the same job (format files.) Support DECIMAL_SEPARATOR and similar settings \"completely\" which means solving the issue described in this ticket and other possible problems setting DECIMAL_SEPARATOR may cause.\nI would be tempted to go the DECIMAL_SEPARATOR deprecation route, but I may completely miss some real use cases...\nI guess the ticket should be accepted, even if the path toward resolution is unclear. I think deprecating USE_L10N and the corresponding formatting settings in favor of locale formatting files would simplify a lot of things, but I'm not knowledgeable enough on the ramifications to put together a proposal.\n​PR",
  "created_at": "2020-05-22T20:40:19Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"A string representation is returned for unlocalized numbers.\", \"test_sanitize_separators (i18n.tests.FormattingTests)\"]",
  "PASS_TO_PASS": "[\"test_lazy (i18n.tests.TestModels)\", \"test_safestr (i18n.tests.TestModels)\", \"test_round_away_from_one (i18n.tests.UtilsTests)\", \"OSError is raised if the default language is unparseable.\", \"test_fallback_language_code (i18n.tests.TestLanguageInfo)\", \"test_localized_language_info (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests)\", \"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests)\", \"test_sparse_territory_catalog (i18n.tests.TranslationFallbackI18NTests)\", \"test_cache_resetting (i18n.tests.MiscTests)\", \"test_english_fallback (i18n.tests.MiscTests)\", \"test_get_language_from_path_null (i18n.tests.MiscTests)\", \"test_get_language_from_path_real (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests)\", \"test_parse_language_cookie (i18n.tests.MiscTests)\", \"test_parse_literal_http_header (i18n.tests.MiscTests)\", \"test_parse_spec_http_header (i18n.tests.MiscTests)\", \"test_special_fallback_language (i18n.tests.MiscTests)\", \"test_support_for_deprecated_chinese_language_codes (i18n.tests.MiscTests)\", \"test_check_for_language (i18n.tests.NonDjangoLanguageTests)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests)\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_i18n_app_dirs (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_app_dirs_ignore_django_apps (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests)\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests)\", \"test_translation_loading (i18n.tests.TranslationLoadingTests)\", \"test_language_not_saved_to_session (i18n.tests.LocaleMiddlewareTests)\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests)\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests)\", \"test_language_bidi_null (i18n.tests.TranslationTests)\", \"test_lazy_objects (i18n.tests.TranslationTests)\", \"test_lazy_pickle (i18n.tests.TranslationTests)\", \"test_legacy_aliases (i18n.tests.TranslationTests)\", \"test_maclines (i18n.tests.TranslationTests)\", \"test_multiple_plurals_per_language (i18n.tests.TranslationTests)\", \"test_ngettext_lazy (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests)\", \"test_override (i18n.tests.TranslationTests)\", \"test_override_decorator (i18n.tests.TranslationTests)\", \"test_override_exit (i18n.tests.TranslationTests)\", \"test_pgettext (i18n.tests.TranslationTests)\", \"test_plural (i18n.tests.TranslationTests)\", \"test_plural_null (i18n.tests.TranslationTests)\", \"test_safe_status (i18n.tests.TranslationTests)\", \"test_to_language (i18n.tests.TranslationTests)\", \"test_to_locale (i18n.tests.TranslationTests)\", \"test_default_lang_without_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_no_redirect_on_404 (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_unprefixed_language_other_than_accept_language (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_admin_javascript_supported_input_formats (i18n.tests.FormattingTests)\", \"test_all_format_strings (i18n.tests.FormattingTests)\", \"test_false_like_locale_formats (i18n.tests.FormattingTests)\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests)\", \"test_get_custom_format (i18n.tests.FormattingTests)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests)\", \"test_get_format_modules_stability (i18n.tests.FormattingTests)\", \"test_iter_format_modules (i18n.tests.FormattingTests)\", \"test_iter_format_modules_stability (i18n.tests.FormattingTests)\", \"test_l10n_disabled (i18n.tests.FormattingTests)\", \"test_l10n_enabled (i18n.tests.FormattingTests)\", \"test_locale_independent (i18n.tests.FormattingTests)\", \"test_localize_templatetag_and_filter (i18n.tests.FormattingTests)\", \"test_localized_as_text_as_hidden_input (i18n.tests.FormattingTests)\", \"test_localized_input (i18n.tests.FormattingTests)\", \"test_localized_input_func (i18n.tests.FormattingTests)\", \"test_sub_locales (i18n.tests.FormattingTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.639793",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}