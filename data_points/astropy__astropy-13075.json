{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13075",
  "base_commit": "c660b079b6472920662ca4a0c731751a0342448c",
  "patch": "diff --git a/astropy/cosmology/io/__init__.py b/astropy/cosmology/io/__init__.py\n--- a/astropy/cosmology/io/__init__.py\n+++ b/astropy/cosmology/io/__init__.py\n@@ -5,4 +5,4 @@\n \"\"\"\n \n # Import to register with the I/O machinery\n-from . import cosmology, ecsv, mapping, model, row, table, yaml\n+from . import cosmology, ecsv, html, mapping, model, row, table, yaml  # noqa: F401\ndiff --git a/astropy/cosmology/io/html.py b/astropy/cosmology/io/html.py\nnew file mode 100644\n--- /dev/null\n+++ b/astropy/cosmology/io/html.py\n@@ -0,0 +1,189 @@\n+import astropy.cosmology.units as cu\r\n+import astropy.units as u\r\n+from astropy.cosmology.connect import readwrite_registry\r\n+from astropy.cosmology.core import Cosmology\r\n+from astropy.cosmology.parameter import Parameter\r\n+from astropy.table import QTable\r\n+\r\n+from .table import from_table, to_table\r\n+\r\n+# Format look-up for conversion, {original_name: new_name}\r\n+# TODO! move this information into the Parameters themselves\r\n+_FORMAT_TABLE = {\r\n+    \"H0\": \"$$H_{0}$$\",\r\n+    \"Om0\": \"$$\\\\Omega_{m,0}$$\",\r\n+    \"Ode0\": \"$$\\\\Omega_{\\\\Lambda,0}$$\",\r\n+    \"Tcmb0\": \"$$T_{0}$$\",\r\n+    \"Neff\": \"$$N_{eff}$$\",\r\n+    \"m_nu\": \"$$m_{nu}$$\",\r\n+    \"Ob0\": \"$$\\\\Omega_{b,0}$$\",\r\n+    \"w0\": \"$$w_{0}$$\",\r\n+    \"wa\": \"$$w_{a}$$\",\r\n+    \"wz\": \"$$w_{z}$$\",\r\n+    \"wp\": \"$$w_{p}$$\",\r\n+    \"zp\": \"$$z_{p}$$\",\r\n+}\r\n+\r\n+\r\n+def read_html_table(filename, index=None, *, move_to_meta=False, cosmology=None, latex_names=True, **kwargs):\r\n+    \"\"\"Read a |Cosmology| from an HTML file.\r\n+\r\n+    Parameters\r\n+    ----------\r\n+    filename : path-like or file-like\r\n+        From where to read the Cosmology.\r\n+    index : int or str or None, optional\r\n+        Needed to select the row in tables with multiple rows. ``index`` can be\r\n+        an integer for the row number or, if the table is indexed by a column,\r\n+        the value of that column. If the table is not indexed and ``index`` is a\r\n+        string, the \"name\" column is used as the indexing column.\r\n+\r\n+    move_to_meta : bool, optional keyword-only\r\n+        Whether to move keyword arguments that are not in the Cosmology class'\r\n+        signature to the Cosmology's metadata. This will only be applied if the\r\n+        Cosmology does NOT have a keyword-only argument (e.g. ``**kwargs``).\r\n+        Arguments moved to the metadata will be merged with existing metadata,\r\n+        preferring specified metadata in the case of a merge conflict (e.g. for\r\n+        ``Cosmology(meta={'key':10}, key=42)``, the ``Cosmology.meta`` will be\r\n+        ``{'key': 10}``).\r\n+    cosmology : str or |Cosmology| class or None, optional keyword-only\r\n+        The cosmology class (or string name thereof) to use when constructing\r\n+        the cosmology instance. The class also provides default parameter\r\n+        values, filling in any non-mandatory arguments missing in 'table'.\r\n+    latex_names : bool, optional keyword-only\r\n+        Whether the |Table| (might) have latex column names for the parameters\r\n+        that need to be mapped to the correct parameter name -- e.g. $$H_{0}$$\r\n+        to 'H0'. This is `True` by default, but can be turned off (set to\r\n+        `False`) if there is a known name conflict (e.g. both an 'H0' and\r\n+        '$$H_{0}$$' column) as this will raise an error. In this case, the\r\n+        correct name ('H0') is preferred.\r\n+    **kwargs : Any\r\n+        Passed to :attr:`astropy.table.QTable.read`. ``format`` is set to\r\n+        'ascii.html', regardless of input.\r\n+\r\n+    Returns\r\n+    -------\r\n+    |Cosmology| subclass instance\r\n+\r\n+    Raises\r\n+    ------\r\n+    ValueError\r\n+        If the keyword argument 'format' is given and is not \"ascii.html\".\r\n+    \"\"\"\r\n+    # Check that the format is 'ascii.html' (or not specified)\r\n+    format = kwargs.pop(\"format\", \"ascii.html\")\r\n+    if format != \"ascii.html\":\r\n+        raise ValueError(f\"format must be 'ascii.html', not {format}\")\r\n+\r\n+    # Reading is handled by `QTable`.\r\n+    with u.add_enabled_units(cu):  # (cosmology units not turned on by default)\r\n+        table = QTable.read(filename, format=\"ascii.html\", **kwargs)\r\n+\r\n+    # Need to map the table's column names to Cosmology inputs (parameter\r\n+    # names).\r\n+    # TODO! move the `latex_names` into `from_table`\r\n+    if latex_names:\r\n+        table_columns = set(table.colnames)\r\n+        for name, latex in _FORMAT_TABLE.items():\r\n+            if latex in table_columns:\r\n+                table.rename_column(latex, name)\r\n+\r\n+    # Build the cosmology from table, using the private backend.\r\n+    return from_table(table, index=index, move_to_meta=move_to_meta, cosmology=cosmology)\r\n+\r\n+\r\n+def write_html_table(cosmology, file, *, overwrite=False, cls=QTable, latex_names=False, **kwargs):\r\n+    r\"\"\"Serialize the |Cosmology| into a HTML table.\r\n+\r\n+    Parameters\r\n+    ----------\r\n+    cosmology : |Cosmology| subclass instance file : path-like or file-like\r\n+        Location to save the serialized cosmology.\r\n+    file : path-like or file-like\r\n+        Where to write the html table.\r\n+\r\n+    overwrite : bool, optional keyword-only\r\n+        Whether to overwrite the file, if it exists.\r\n+    cls : |Table| class, optional keyword-only\r\n+        Astropy |Table| (sub)class to use when writing. Default is |QTable|\r\n+        class.\r\n+    latex_names : bool, optional keyword-only\r\n+        Whether to format the parameters (column) names to latex -- e.g. 'H0' to\r\n+        $$H_{0}$$.\r\n+    **kwargs : Any\r\n+        Passed to ``cls.write``.\r\n+\r\n+    Raises\r\n+    ------\r\n+    TypeError\r\n+        If the optional keyword-argument 'cls' is not a subclass of |Table|.\r\n+    ValueError\r\n+        If the keyword argument 'format' is given and is not \"ascii.html\".\r\n+\r\n+    Notes\r\n+    -----\r\n+    A HTML file containing a Cosmology HTML table should have scripts enabling\r\n+    MathJax.\r\n+\r\n+    ::\r\n+        <script\r\n+        src=\"https://polyfill.io/v3/polyfill.min.js?features=es6\"></script>\r\n+        <script type=\"text/javascript\" id=\"MathJax-script\" async\r\n+            src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\">\r\n+        </script>\r\n+    \"\"\"\r\n+    # Check that the format is 'ascii.html' (or not specified)\r\n+    format = kwargs.pop(\"format\", \"ascii.html\")\r\n+    if format != \"ascii.html\":\r\n+        raise ValueError(f\"format must be 'ascii.html', not {format}\")\r\n+\r\n+    # Set cosmology_in_meta as false for now since there is no metadata being kept\r\n+    table = to_table(cosmology, cls=cls, cosmology_in_meta=False)\r\n+\r\n+    cosmo_cls = type(cosmology)\r\n+    for name, col in table.columns.items():\r\n+        param = getattr(cosmo_cls, name, None)\r\n+        if not isinstance(param, Parameter) or param.unit in (None, u.one):\r\n+            continue\r\n+        # Replace column with unitless version\r\n+        table.replace_column(name, (col << param.unit).value, copy=False)\r\n+\r\n+    # TODO! move the `latex_names` into `to_table`\r\n+    if latex_names:\r\n+        new_names = [_FORMAT_TABLE.get(k, k) for k in cosmology.__parameters__]\r\n+        table.rename_columns(cosmology.__parameters__, new_names)\r\n+\r\n+    # Write HTML, using table I/O\r\n+    table.write(file, overwrite=overwrite, format=\"ascii.html\", **kwargs)\r\n+\r\n+\r\n+def html_identify(origin, filepath, fileobj, *args, **kwargs):\r\n+    \"\"\"Identify if an object uses the HTML Table format.\r\n+\r\n+    Parameters\r\n+    ----------\r\n+    origin : Any\r\n+        Not used.\r\n+    filepath : str or Any\r\n+        From where to read the Cosmology.\r\n+    fileobj : Any\r\n+        Not used.\r\n+    *args : Any\r\n+        Not used.\r\n+    **kwargs : Any\r\n+        Not used.\r\n+\r\n+    Returns\r\n+    -------\r\n+    bool\r\n+        If the filepath is a string ending with '.html'.\r\n+    \"\"\"\r\n+    return isinstance(filepath, str) and filepath.endswith(\".html\")\r\n+\r\n+\r\n+# ===================================================================\r\n+# Register\r\n+\r\n+readwrite_registry.register_reader(\"ascii.html\", Cosmology, read_html_table)\r\n+readwrite_registry.register_writer(\"ascii.html\", Cosmology, write_html_table)\r\n+readwrite_registry.register_identifier(\"ascii.html\", Cosmology, html_identify)\r\n",
  "test_patch": "diff --git a/astropy/cosmology/io/tests/test_.py b/astropy/cosmology/io/tests/test_.py\n--- a/astropy/cosmology/io/tests/test_.py\n+++ b/astropy/cosmology/io/tests/test_.py\n@@ -12,7 +12,7 @@ def test_expected_readwrite_io():\n     \"\"\"Test that ONLY the expected I/O is registered.\"\"\"\n \n     got = {k for k, _ in readwrite_registry._readers.keys()}\n-    expected = {\"ascii.ecsv\"}\n+    expected = {\"ascii.ecsv\", \"ascii.html\"}\n \n     assert got == expected\n \ndiff --git a/astropy/cosmology/io/tests/test_html.py b/astropy/cosmology/io/tests/test_html.py\nnew file mode 100644\n--- /dev/null\n+++ b/astropy/cosmology/io/tests/test_html.py\n@@ -0,0 +1,256 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\r\n+\r\n+# THIRD PARTY\r\n+import pytest\r\n+\r\n+import astropy.units as u\r\n+from astropy.cosmology.io.html import _FORMAT_TABLE, read_html_table, write_html_table\r\n+from astropy.cosmology.parameter import Parameter\r\n+from astropy.table import QTable, Table, vstack\r\n+from astropy.units.decorators import NoneType\r\n+from astropy.utils.compat.optional_deps import HAS_BS4\r\n+\r\n+from .base import ReadWriteDirectTestBase, ReadWriteTestMixinBase\r\n+\r\n+###############################################################################\r\n+\r\n+\r\n+class ReadWriteHTMLTestMixin(ReadWriteTestMixinBase):\r\n+    \"\"\"\r\n+    Tests for a Cosmology[Read/Write] with ``format=\"ascii.html\"``.\r\n+    This class will not be directly called by :mod:`pytest` since its name does\r\n+    not begin with ``Test``. To activate the contained tests this class must\r\n+    be inherited in a subclass. Subclasses must dfine a :func:`pytest.fixture`\r\n+    ``cosmo`` that returns/yields an instance of a |Cosmology|.\r\n+    See ``TestCosmology`` for an example.\r\n+    \"\"\"\r\n+\r\n+    @pytest.mark.skipif(not HAS_BS4, reason=\"requires beautifulsoup4\")\r\n+    def test_to_html_table_bad_index(self, read, write, tmp_path):\r\n+        \"\"\"Test if argument ``index`` is incorrect\"\"\"\r\n+        fp = tmp_path / \"test_to_html_table_bad_index.html\"\r\n+\r\n+        write(fp, format=\"ascii.html\")\r\n+\r\n+        # single-row table and has a non-0/None index\r\n+        with pytest.raises(IndexError, match=\"index 2 out of range\"):\r\n+            read(fp, index=2, format=\"ascii.html\")\r\n+\r\n+        # string index where doesn't match\r\n+        with pytest.raises(KeyError, match=\"No matches found for key\"):\r\n+            read(fp, index=\"row 0\", format=\"ascii.html\")\r\n+\r\n+    # -----------------------\r\n+\r\n+    @pytest.mark.skipif(not HAS_BS4, reason=\"requires beautifulsoup4\")\r\n+    def test_to_html_table_failed_cls(self, write, tmp_path):\r\n+        \"\"\"Test failed table type.\"\"\"\r\n+        fp = tmp_path / \"test_to_html_table_failed_cls.html\"\r\n+\r\n+        with pytest.raises(TypeError, match=\"'cls' must be\"):\r\n+            write(fp, format='ascii.html', cls=list)\r\n+\r\n+    @pytest.mark.parametrize(\"tbl_cls\", [QTable, Table])\r\n+    @pytest.mark.skipif(not HAS_BS4, reason=\"requires beautifulsoup4\")\r\n+    def test_to_html_table_cls(self, write, tbl_cls, tmp_path):\r\n+        fp = tmp_path / \"test_to_html_table_cls.html\"\r\n+        write(fp, format='ascii.html', cls=tbl_cls)\r\n+\r\n+    # -----------------------\r\n+\r\n+    @pytest.mark.skipif(not HAS_BS4, reason=\"requires beautifulsoup4\")\r\n+    def test_readwrite_html_table_instance(self, cosmo_cls, cosmo, read, write, tmp_path, add_cu):\r\n+        \"\"\"Test cosmology -> ascii.html -> cosmology.\"\"\"\r\n+        fp = tmp_path / \"test_readwrite_html_table_instance.html\"\r\n+\r\n+        # ------------\r\n+        # To Table\r\n+\r\n+        write(fp, format=\"ascii.html\")\r\n+\r\n+        # some checks on the saved file\r\n+        tbl = QTable.read(fp)\r\n+        # assert tbl.meta[\"cosmology\"] == cosmo_cls.__qualname__  # metadata read not implemented\r\n+        assert tbl[\"name\"] == cosmo.name\r\n+\r\n+        # ------------\r\n+        # From Table\r\n+\r\n+        tbl[\"mismatching\"] = \"will error\"\r\n+        tbl.write(fp, format=\"ascii.html\", overwrite=True)\r\n+\r\n+        # tests are different if the last argument is a **kwarg\r\n+        if tuple(cosmo._init_signature.parameters.values())[-1].kind == 4:\r\n+            got = read(fp, format=\"ascii.html\")\r\n+\r\n+            assert got.__class__ is cosmo_cls\r\n+            assert got.name == cosmo.name\r\n+            # assert \"mismatching\" not in got.meta # metadata read not implemented\r\n+\r\n+            return  # don't continue testing\r\n+\r\n+        # read with mismatching parameters errors\r\n+        with pytest.raises(TypeError, match=\"there are unused parameters\"):\r\n+            read(fp, format=\"ascii.html\")\r\n+\r\n+        # unless mismatched are moved to meta\r\n+        got = read(fp, format=\"ascii.html\", move_to_meta=True)\r\n+        assert got == cosmo\r\n+        # assert got.meta[\"mismatching\"] == \"will error\" # metadata read not implemented\r\n+\r\n+        # it won't error if everything matches up\r\n+        tbl.remove_column(\"mismatching\")\r\n+        tbl.write(fp, format=\"ascii.html\", overwrite=True)\r\n+        got = read(fp, format=\"ascii.html\")\r\n+        assert got == cosmo\r\n+\r\n+        # and it will also work if the cosmology is a class\r\n+        # Note this is not the default output of ``write``.\r\n+        # tbl.meta[\"cosmology\"] = _COSMOLOGY_CLASSES[tbl.meta[\"cosmology\"]] #\r\n+        # metadata read not implemented\r\n+        got = read(fp, format=\"ascii.html\")\r\n+        assert got == cosmo\r\n+\r\n+        got = read(fp)\r\n+        assert got == cosmo\r\n+\r\n+    @pytest.mark.skipif(not HAS_BS4, reason=\"requires beautifulsoup4\")\r\n+    def test_rename_html_table_columns(self, read, write, tmp_path):\r\n+        \"\"\"Tests renaming columns\"\"\"\r\n+        fp = tmp_path / \"test_rename_html_table_columns.html\"\r\n+\r\n+        write(fp, format=\"ascii.html\", latex_names=True)\r\n+\r\n+        tbl = QTable.read(fp)\r\n+\r\n+        # asserts each column name has not been reverted yet\r\n+        # For now, Cosmology class and name are stored in first 2 slots\r\n+        for column_name in tbl.colnames[2:]:\r\n+            assert column_name in _FORMAT_TABLE.values()\r\n+\r\n+        cosmo = read(fp, format=\"ascii.html\")\r\n+        converted_tbl = cosmo.to_format(\"astropy.table\")\r\n+\r\n+        # asserts each column name has been reverted\r\n+        # cosmology name is still stored in first slot\r\n+        for column_name in converted_tbl.colnames[1:]:\r\n+            assert column_name in _FORMAT_TABLE.keys()\r\n+\r\n+    @pytest.mark.skipif(not HAS_BS4, reason=\"requires beautifulsoup4\")\r\n+    @pytest.mark.parametrize(\"latex_names\", [True, False])\r\n+    def test_readwrite_html_subclass_partial_info(self, cosmo_cls, cosmo, read,\r\n+                                                  write, latex_names, tmp_path, add_cu):\r\n+        \"\"\"\r\n+        Test writing from an instance and reading from that class.\r\n+        This works with missing information.\r\n+        \"\"\"\r\n+        fp = tmp_path / \"test_read_html_subclass_partial_info.html\"\r\n+\r\n+        # test write\r\n+        write(fp, format=\"ascii.html\", latex_names=latex_names)\r\n+\r\n+        # partial information\r\n+        tbl = QTable.read(fp)\r\n+\r\n+        # tbl.meta.pop(\"cosmology\", None) # metadata not implemented\r\n+        cname = \"$$T_{0}$$\" if latex_names else \"Tcmb0\"\r\n+        del tbl[cname]  # format is not converted to original units\r\n+        tbl.write(fp, overwrite=True)\r\n+\r\n+        # read with the same class that wrote fills in the missing info with\r\n+        # the default value\r\n+        got = cosmo_cls.read(fp, format=\"ascii.html\")\r\n+        got2 = read(fp, format=\"ascii.html\", cosmology=cosmo_cls)\r\n+        got3 = read(fp, format=\"ascii.html\", cosmology=cosmo_cls.__qualname__)\r\n+\r\n+        assert (got == got2) and (got2 == got3)  # internal consistency\r\n+\r\n+        # not equal, because Tcmb0 is changed, which also changes m_nu\r\n+        assert got != cosmo\r\n+        assert got.Tcmb0 == cosmo_cls._init_signature.parameters[\"Tcmb0\"].default\r\n+        assert got.clone(name=cosmo.name, Tcmb0=cosmo.Tcmb0, m_nu=cosmo.m_nu) == cosmo\r\n+        # but the metadata is the same\r\n+        # assert got.meta == cosmo.meta # metadata read not implemented\r\n+\r\n+    @pytest.mark.skipif(not HAS_BS4, reason=\"requires beautifulsoup4\")\r\n+    def test_readwrite_html_mutlirow(self, cosmo, read, write, tmp_path, add_cu):\r\n+        \"\"\"Test if table has multiple rows.\"\"\"\r\n+        fp = tmp_path / \"test_readwrite_html_mutlirow.html\"\r\n+\r\n+        # Make\r\n+        cosmo1 = cosmo.clone(name=\"row 0\")\r\n+        cosmo2 = cosmo.clone(name=\"row 2\")\r\n+        table = vstack([c.to_format(\"astropy.table\") for c in (cosmo1, cosmo, cosmo2)],\r\n+                       metadata_conflicts='silent')\r\n+\r\n+        cosmo_cls = type(cosmo)\r\n+        if cosmo_cls == NoneType:\r\n+            assert False\r\n+\r\n+        for n, col in zip(table.colnames, table.itercols()):\r\n+            if n == \"cosmology\":\r\n+                continue\r\n+            param = getattr(cosmo_cls, n)\r\n+            if not isinstance(param, Parameter) or param.unit in (None, u.one):\r\n+                continue\r\n+            # Replace column with unitless version\r\n+            table.replace_column(n, (col << param.unit).value, copy=False)\r\n+\r\n+        table.write(fp, format=\"ascii.html\")\r\n+\r\n+        # ------------\r\n+        # From Table\r\n+\r\n+        # it will error on a multi-row table\r\n+        with pytest.raises(ValueError, match=\"need to select a specific row\"):\r\n+            read(fp, format=\"ascii.html\")\r\n+\r\n+        # unless the index argument is provided\r\n+        got = cosmo_cls.read(fp, index=1, format=\"ascii.html\")\r\n+        # got = read(fp, index=1, format=\"ascii.html\")\r\n+        assert got == cosmo\r\n+\r\n+        # the index can be a string\r\n+        got = cosmo_cls.read(fp, index=cosmo.name, format=\"ascii.html\")\r\n+        assert got == cosmo\r\n+\r\n+        # it's better if the table already has an index\r\n+        # this will be identical to the previous ``got``\r\n+        table.add_index(\"name\")\r\n+        got2 = cosmo_cls.read(fp, index=cosmo.name, format=\"ascii.html\")\r\n+        assert got2 == cosmo\r\n+\r\n+\r\n+class TestReadWriteHTML(ReadWriteDirectTestBase, ReadWriteHTMLTestMixin):\r\n+    \"\"\"\r\n+    Directly test ``read/write_html``.\r\n+    These are not public API and are discouraged from use, in favor of\r\n+    ``Cosmology.read/write(..., format=\"ascii.html\")``, but should be\r\n+    tested regardless b/c they are used internally.\r\n+    \"\"\"\r\n+\r\n+    def setup_class(self):\r\n+        self.functions = {\"read\": read_html_table, \"write\": write_html_table}\r\n+\r\n+    @pytest.mark.skipif(not HAS_BS4, reason=\"requires beautifulsoup4\")\r\n+    def test_rename_direct_html_table_columns(self, read, write, tmp_path):\r\n+        \"\"\"Tests renaming columns\"\"\"\r\n+\r\n+        fp = tmp_path / \"test_rename_html_table_columns.html\"\r\n+\r\n+        write(fp, format=\"ascii.html\", latex_names=True)\r\n+\r\n+        tbl = QTable.read(fp)\r\n+\r\n+        # asserts each column name has not been reverted yet\r\n+        for column_name in tbl.colnames[2:]:\r\n+            # for now, Cosmology as metadata and name is stored in first 2 slots\r\n+            assert column_name in _FORMAT_TABLE.values()\r\n+\r\n+        cosmo = read(fp, format=\"ascii.html\")\r\n+        converted_tbl = cosmo.to_format(\"astropy.table\")\r\n+\r\n+        # asserts each column name has been reverted\r\n+        for column_name in converted_tbl.colnames[1:]:\r\n+            # for now now, metadata is still stored in first slot\r\n+            assert column_name in _FORMAT_TABLE.keys()\r\ndiff --git a/astropy/cosmology/tests/test_connect.py b/astropy/cosmology/tests/test_connect.py\n--- a/astropy/cosmology/tests/test_connect.py\n+++ b/astropy/cosmology/tests/test_connect.py\n@@ -9,8 +9,10 @@\n from astropy.cosmology import Cosmology, w0wzCDM\n from astropy.cosmology.connect import readwrite_registry\n from astropy.cosmology.io.tests import (\n-    test_cosmology, test_ecsv, test_json, test_mapping, test_model, test_row, test_table, test_yaml)\n+    test_cosmology, test_ecsv, test_html, test_json, test_mapping, test_model, test_row, test_table,\n+    test_yaml)\n from astropy.table import QTable, Row\n+from astropy.utils.compat.optional_deps import HAS_BS4\n \n ###############################################################################\n # SETUP\n@@ -18,7 +20,13 @@\n cosmo_instances = cosmology.realizations.available\n \n # Collect the registered read/write formats.\n-readwrite_formats = {\"ascii.ecsv\", \"json\"}\n+#   (format, supports_metadata, has_all_required_dependencies)\n+readwrite_formats = {\n+    (\"ascii.ecsv\", True, True),\n+    (\"ascii.html\", False, HAS_BS4),\n+    (\"json\", True, True)\n+}\n+\n \n # Collect all the registered to/from formats. Unfortunately this is NOT\n # automatic since the output format class is not stored on the registry.\n@@ -27,10 +35,14 @@\n                   (\"astropy.cosmology\", Cosmology),\n                   (\"astropy.row\", Row), (\"astropy.table\", QTable)]\n \n+\n ###############################################################################\n \n \n-class ReadWriteTestMixin(test_ecsv.ReadWriteECSVTestMixin, test_json.ReadWriteJSONTestMixin):\n+class ReadWriteTestMixin(\n+        test_ecsv.ReadWriteECSVTestMixin,\n+        test_html.ReadWriteHTMLTestMixin,\n+        test_json.ReadWriteJSONTestMixin):\n     \"\"\"\n     Tests for a CosmologyRead/Write on a |Cosmology|.\n     This class will not be directly called by :mod:`pytest` since its name does\n@@ -40,14 +52,17 @@ class ReadWriteTestMixin(test_ecsv.ReadWriteECSVTestMixin, test_json.ReadWriteJS\n     See ``TestReadWriteCosmology`` or ``TestCosmology`` for examples.\n     \"\"\"\n \n-    @pytest.mark.parametrize(\"format\", readwrite_formats)\n-    def test_readwrite_complete_info(self, cosmo, tmp_path, format):\n+    @pytest.mark.parametrize(\"format, metaio, has_deps\", readwrite_formats)\n+    def test_readwrite_complete_info(self, cosmo, tmp_path, format, metaio, has_deps):\n         \"\"\"\n         Test writing from an instance and reading from the base class.\n         This requires full information.\n         The round-tripped metadata can be in a different order, so the\n         OrderedDict must be converted to a dict before testing equality.\n         \"\"\"\n+        if not has_deps:\n+            pytest.skip(\"missing a dependency\")\n+\n         fname = str(tmp_path / f\"{cosmo.name}.{format}\")\n         cosmo.write(fname, format=format)\n \n@@ -63,31 +78,35 @@ def test_readwrite_complete_info(self, cosmo, tmp_path, format):\n         got = Cosmology.read(fname, format=format)\n \n         assert got == cosmo\n-        assert dict(got.meta) == dict(cosmo.meta)\n+        assert (not metaio) ^ (dict(got.meta) == dict(cosmo.meta))\n \n-    @pytest.mark.parametrize(\"format\", readwrite_formats)\n-    def test_readwrite_from_subclass_complete_info(self, cosmo_cls, cosmo, tmp_path, format):\n+    @pytest.mark.parametrize(\"format, metaio, has_deps\", readwrite_formats)\n+    def test_readwrite_from_subclass_complete_info(\n+            self, cosmo_cls, cosmo, tmp_path, format, metaio, has_deps):\n         \"\"\"\n         Test writing from an instance and reading from that class, when there's\n         full information saved.\n         \"\"\"\n+        if not has_deps:\n+            pytest.skip(\"missing a dependency\")\n+\n         fname = str(tmp_path / f\"{cosmo.name}.{format}\")\n         cosmo.write(fname, format=format)\n \n         # read with the same class that wrote.\n         got = cosmo_cls.read(fname, format=format)\n         assert got == cosmo\n-        assert got.meta == cosmo.meta\n+        assert (not metaio) ^ (dict(got.meta) == dict(cosmo.meta))\n \n         # this should be equivalent to\n         got = Cosmology.read(fname, format=format, cosmology=cosmo_cls)\n         assert got == cosmo\n-        assert got.meta == cosmo.meta\n+        assert (not metaio) ^ (dict(got.meta) == dict(cosmo.meta))\n \n         # and also\n         got = Cosmology.read(fname, format=format, cosmology=cosmo_cls.__qualname__)\n         assert got == cosmo\n-        assert got.meta == cosmo.meta\n+        assert (not metaio) ^ (dict(got.meta) == dict(cosmo.meta))\n \n \n class TestCosmologyReadWrite(ReadWriteTestMixin):\n@@ -103,8 +122,11 @@ def cosmo_cls(self, cosmo):\n \n     # ==============================================================\n \n-    @pytest.mark.parametrize(\"format\", readwrite_formats)\n-    def test_write_methods_have_explicit_kwarg_overwrite(self, format):\n+    @pytest.mark.parametrize(\"format, _, has_deps\", readwrite_formats)\n+    def test_write_methods_have_explicit_kwarg_overwrite(self, format, _, has_deps):\n+        if not has_deps:\n+            pytest.skip(\"missing a dependency\")\n+\n         writer = readwrite_registry.get_writer(format, Cosmology)\n         # test in signature\n         sig = inspect.signature(writer)\n@@ -113,11 +135,13 @@ def test_write_methods_have_explicit_kwarg_overwrite(self, format):\n         # also in docstring\n         assert \"overwrite : bool\" in writer.__doc__\n \n-    @pytest.mark.parametrize(\"format\", readwrite_formats)\n-    def test_readwrite_reader_class_mismatch(self, cosmo, tmp_path, format):\n+    @pytest.mark.parametrize(\"format, _, has_deps\", readwrite_formats)\n+    def test_readwrite_reader_class_mismatch(self, cosmo, tmp_path, format, _, has_deps):\n         \"\"\"Test when the reader class doesn't match the file.\"\"\"\n+        if not has_deps:\n+            pytest.skip(\"missing a dependency\")\n \n-        fname = str(tmp_path / f\"{cosmo.name}.{format}\")\n+        fname = tmp_path / f\"{cosmo.name}.{format}\"\n         cosmo.write(fname, format=format)\n \n         # class mismatch\n",
  "problem_statement": "Register format ``html`` to ``Cosmology.write`` with nice mathjax\nCosmology can now read and write to files.\r\nIt would be nice to register with ``Cosmology.write`` a  method for exporting a Cosmology to a HTML table.\r\nThere are good examples of IO with Cosmology at https://github.com/astropy/astropy/tree/main/astropy/cosmology/io\r\nand documentation at https://docs.astropy.org/en/latest/cosmology/io.html#cosmology-io\r\n\r\nI'm thinking the ``write_html(...)`` method would call ``cosmology.io.table.to_table()``, format the table to nice MathJax or something and then call the `QTable.write(..., format='html')`.\r\n\r\nEdit: also, the mathjax representation of each parameter can be stored on the corresponding Parameter object, like how units have the ``format`` argument in [def_unit](https://docs.astropy.org/en/stable/api/astropy.units.def_unit.html#astropy.units.def_unit).\n",
  "hints_text": "Hi. I am a new contributor and was wondering if this was still open for contribution? I would like to look into this if possible. \nHello! The issue is still open, so feel free. 😸 \n@JefftheCloudDog  that would be great! No one else is currently working on this feature request. If you need any help or have any questions I am happy to help. You can post here, or in the Astropy Slack cosmology channel. We also have documentation to assist in contributing at https://www.astropy.org/contribute.html#contribute-code-or-docs.\nFrom my understanding of the request description, the high-level steps should look as such:\r\n\r\n1. get a QTable object from the `cosmology.io.table.to_table()` function, which returns a QTable\r\n2. format to MathJax \r\n3. call `QTable.write()` to write\r\n4. The registration should look like this: `readwrite_registry.register_writer(\"ascii.html\", Cosmology, write_table)`\r\n\r\nFrom the steps and observing some examples from Cosmology/io, this `write_table()` should look very similar to `write_ecsv()` from Cosmology/io/ecsv.py\r\n\r\nAm I correct in understanding so far? \n@JefftheCloudDog, correct! Looks like a great plan for implementation.\r\n\r\nIn #12983 we are working on the backend which should make the column naming easier, so each Parameter can hold its mathjax representation.\r\nIn the meantime it might be easiest to just have a `dict` of parameter name -> mathjax name.\r\n\nAh, I see. The format input is just a dict that has mathjax (or some other type) representation as values which should be an optional parameter. \r\n\r\nI'm looking through the example of def_unit, and looks like a new type of unit is defined with the format dict. \r\nShould `write_table()` function the same way? Are we creating a new Cosmology or QTable object for formatting? \r\n\r\nI suppose we are essentially using [`Table.write()`](https://docs.astropy.org/en/stable/api/astropy.table.Table.html#astropy.table.Table.write) since a QTable object is mostly identical to a Table object. \nWhen https://github.com/astropy/astropy/pull/12983 is merged then each parameter will hold its mathjax representation.\r\ne.g. for latex.\r\n\r\n```python\r\nclass FLRW(Cosmology):\r\n    H0 = Parameter(..., format={\"latex\": r\"$H_0$\"})\r\n```\r\n\r\nSo then the columns of the ``FLRW`` -> ``QTable`` can be renamed like (note this is a quick and dirty implementation)\r\n\r\n```python\r\ntbl = to_table(cosmo, ...)\r\nfor name in cosmo.__parameters__:\r\n    param = getattr(cosmo.__class__, name)\r\n    new_name = param.get_format_name('latex')\r\n    tbl.rename_column(name, new_name)\r\n```\r\n\r\nHowever, https://github.com/astropy/astropy/pull/12983 is not yet merged, so the whole mathjax format can just be one central dictionary:\r\n\r\n```python\r\nmathjax_formats = dict(H0=..., Ode0=...)\r\n```\r\n\r\nMaking it\r\n\r\n```python\r\ntbl = to_table(cosmo, ...)\r\nfor name in cosmo.__parameters__:\r\n    new_name = mathjax_formats.get(name, name)  # fallback if not in formats\r\n    tbl.rename_column(name, new_name)\r\n```\r\n\r\nAnyway, that's just what I was suggesting as a workaround until https://github.com/astropy/astropy/pull/12983 is in.\nOk, I see. Since this deals with i/o, the new code should go to astropy\\cosmology\\table.py? \r\n\r\nI see that there is already a line for `convert_registry.register_writer(\"astropy.table\", Cosmology, to_table)`, so I was not sure if there should be a different file to register the new method.\n> I see that there is already a line for convert_registry.register_writer(\"astropy.table\", Cosmology, to_table), so I was not sure if there should be a different file to register the new method.\r\n\r\nYes, this should probably have a new file ``astropy/cosmology/io/html.py``.\nI am writing tests now and it looks like writing fails with the following errors. I am not quite sure why these errors are appearing. I have been trying to understand why the error is occurring, since ascii.html is a built-in HTML table writer, but I am struggling a little. Can someone provide some support?\r\n\r\nI based the first test on cosmology\\io\\tests\\test_ecsv.py. Seems like the test is just failing on write.\r\n\r\n```\r\nfp = tmp_path / \"test_to_html_table_bad_index.html\"\r\nwrite(file=fp)\r\n```\r\n\r\n\r\nerror: \r\n```\r\nself = <astropy.cosmology.io.tests.test_html.TestReadWriteHTML object at 0x00000175CE162F70>, read = <function ReadWriteDirectTestBase.read.<locals>.use_read at 0x00000175CE2F3280>\r\nwrite = <function ReadWriteDirectTestBase.write.<locals>.use_write at 0x00000175CE4B9A60>, tmp_path = WindowsPath('C:/Users/jeffr/AppData/Local/Temp/pytest-of-jeffr/pytest-34/test_to_html_table_bad_index_c7')\r\n\r\n    def test_to_html_table_bad_index(self, read, write, tmp_path):\r\n        \"\"\"Test if argument ``index`` is incorrect\"\"\"\r\n        fp = tmp_path / \"test_to_html_table_bad_index.html\"\r\n\r\n>       write(file=fp, format=\"ascii.html\")\r\n\r\nastropy\\cosmology\\io\\tests\\test_html.py:30:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nastropy\\cosmology\\io\\tests\\base.py:196: in use_write\r\n    return self.functions[\"write\"](cosmo, *args, **kwargs)\r\nastropy\\cosmology\\io\\html.py:86: in write_table\r\n    table.write(file, overwrite=overwrite, **kwargs)\r\nastropy\\table\\connect.py:129: in __call__\r\n    self.registry.write(instance, *args, **kwargs)\r\nastropy\\io\\registry\\core.py:354: in write\r\n    return writer(data, *args, **kwargs)\r\nastropy\\io\\ascii\\connect.py:26: in io_write\r\n    return write(table, filename, **kwargs)\r\nastropy\\io\\ascii\\ui.py:840: in write\r\n    lines = writer.write(table)\r\nastropy\\io\\ascii\\html.py:431: in write\r\n    new_col = Column([el[i] for el in col])\r\nastropy\\table\\column.py:1076: in __new__\r\n    self = super().__new__(\r\nastropy\\table\\column.py:434: in __new__\r\n    self_data = np.array(data, dtype=dtype, copy=copy)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <Quantity 0. eV>\r\n\r\n    def __float__(self):\r\n        try:\r\n            return float(self.to_value(dimensionless_unscaled))\r\n        except (UnitsError, TypeError):\r\n>           raise TypeError('only dimensionless scalar quantities can be '\r\n                            'converted to Python scalars')\r\nE           TypeError: only dimensionless scalar quantities can be converted to Python scalars\r\n\r\nastropy\\units\\quantity.py:1250: TypeError\r\n```\n@JefftheCloudDog Thanks for dropping in the test output. The best way for me to help will be to see the code. To do that, it would be great if you opened a Pull Request with your code. Don't worry that the PR is not in it's final state, you can open it as Draft. Thanks!\r\n\r\nSee https://docs.astropy.org/en/latest/development/workflow/development_workflow.html if you are unsure how to make a Pull Request.\nThanks for the response! I created a [draft pull request ](https://github.com/astropy/astropy/pull/13075) for this issue. I did try to adhere to the instructions, but since this is my first contribution, there might be some mistakes. Please let me know if there are any issues. ",
  "created_at": "2022-04-06T19:44:23Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/cosmology/io/tests/test_.py::test_expected_readwrite_io\", \"astropy/cosmology/io/tests/test_.py::test_expected_convert_io\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_json_subclass_partial_info[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_bad_index[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_failed_cls[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[Planck13-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[Planck13-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_instance[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_subclass_partial_info[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_mutlirow[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[Planck13-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[Planck13-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[Planck13-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[Planck13-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[Planck13-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[Planck13-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_json_subclass_partial_info[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_bad_index[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_failed_cls[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[Planck15-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[Planck15-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_instance[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_subclass_partial_info[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_mutlirow[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[Planck15-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[Planck15-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[Planck15-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[Planck15-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[Planck15-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[Planck15-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_json_subclass_partial_info[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_bad_index[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_failed_cls[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[Planck18-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[Planck18-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_instance[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_subclass_partial_info[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_mutlirow[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[Planck18-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[Planck18-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[Planck18-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[Planck18-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[Planck18-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[Planck18-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_json_subclass_partial_info[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_bad_index[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_failed_cls[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP1-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP1-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_instance[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_subclass_partial_info[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_mutlirow[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP1-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP1-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP1-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP1-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP1-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP1-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_json_subclass_partial_info[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_bad_index[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_failed_cls[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP3-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP3-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_instance[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_subclass_partial_info[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_mutlirow[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP3-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP3-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP3-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP3-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP3-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP3-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_json_subclass_partial_info[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_bad_index[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_failed_cls[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP5-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP5-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_instance[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_subclass_partial_info[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_mutlirow[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP5-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP5-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP5-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP5-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP5-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP5-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_json_subclass_partial_info[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_bad_index[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_failed_cls[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP7-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP7-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_instance[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_subclass_partial_info[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_mutlirow[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP7-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP7-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP7-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP7-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP7-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP7-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_json_subclass_partial_info[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_bad_index[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_failed_cls[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP9-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_cls[WMAP9-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_to_ecsv_in_meta[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_instance[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_subclass_partial_info[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_ecsv_mutlirow[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP9-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_complete_info[WMAP9-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP9-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_from_subclass_complete_info[WMAP9-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP9-json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_readwrite_reader_class_mismatch[WMAP9-ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_write_methods_have_explicit_kwarg_overwrite[json-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyReadWrite::test_write_methods_have_explicit_kwarg_overwrite[ascii.ecsv-True-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_yaml[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_default[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_autoidentify[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[Planck13-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml_specify_format[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_bad_index[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_failed_cls[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[Planck13-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[Planck13-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_table[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_instance[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_table_subclass_partial_info[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck13-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck13-astropy.table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_row[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_row_instance[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_row_subclass_partial_info[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck13-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck13-astropy.row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_method[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_callable[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_model_instance[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck13-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck13-astropy.model]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_default[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_wrong_cls[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[Planck13-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[Planck13-OrderedDict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cosmology_as_str[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_cosmology_as_str[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_move_from_meta[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_move_tofrom_meta[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_mapping[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_mapping_default[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_partial_info_mapping[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck13-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck13-mapping]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_cosmology_default[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_cosmology[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_cosmology_default[Planck13]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck13-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck13-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck13-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck13-astropy.cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck13-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck13-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck13-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck13-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck13-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck13-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck13-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck13-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck13-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck13-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck13-format_type0]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck13-format_type1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck13-format_type2]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck13-format_type3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck13-format_type4]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_yaml[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_default[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_autoidentify[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[Planck15-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml_specify_format[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_bad_index[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_failed_cls[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[Planck15-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[Planck15-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_table[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_instance[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_table_subclass_partial_info[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck15-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck15-astropy.table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_row[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_row_instance[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_row_subclass_partial_info[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck15-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck15-astropy.row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_method[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_callable[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_model_instance[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck15-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck15-astropy.model]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_default[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_wrong_cls[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[Planck15-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[Planck15-OrderedDict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cosmology_as_str[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_cosmology_as_str[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_move_from_meta[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_move_tofrom_meta[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_mapping[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_mapping_default[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_partial_info_mapping[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck15-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck15-mapping]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_cosmology_default[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_cosmology[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_cosmology_default[Planck15]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck15-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck15-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck15-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck15-astropy.cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck15-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck15-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck15-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck15-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck15-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck15-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck15-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck15-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck15-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck15-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck15-format_type0]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck15-format_type1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck15-format_type2]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck15-format_type3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck15-format_type4]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_yaml[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_default[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_autoidentify[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[Planck18-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml_specify_format[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_bad_index[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_failed_cls[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[Planck18-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[Planck18-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_table[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_instance[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_table_subclass_partial_info[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck18-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[Planck18-astropy.table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_row[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_row_instance[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_row_subclass_partial_info[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck18-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[Planck18-astropy.row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_method[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_callable[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_model_instance[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck18-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[Planck18-astropy.model]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_default[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_wrong_cls[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[Planck18-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[Planck18-OrderedDict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cosmology_as_str[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_cosmology_as_str[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_move_from_meta[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_move_tofrom_meta[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_mapping[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_mapping_default[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_partial_info_mapping[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck18-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[Planck18-mapping]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_cosmology_default[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_cosmology[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_cosmology_default[Planck18]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck18-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck18-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck18-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[Planck18-astropy.cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck18-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck18-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck18-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck18-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[Planck18-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck18-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck18-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck18-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck18-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[Planck18-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck18-format_type0]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck18-format_type1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck18-format_type2]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck18-format_type3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[Planck18-format_type4]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_yaml[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_default[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_autoidentify[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP1-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml_specify_format[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_bad_index[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_failed_cls[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP1-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP1-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_table[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_instance[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_table_subclass_partial_info[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP1-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP1-astropy.table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_row[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_row_instance[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_row_subclass_partial_info[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP1-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP1-astropy.row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_method[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_callable[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_model_instance[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP1-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP1-astropy.model]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_default[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_wrong_cls[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP1-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP1-OrderedDict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cosmology_as_str[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_cosmology_as_str[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_move_from_meta[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_move_tofrom_meta[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_mapping[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_mapping_default[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_partial_info_mapping[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP1-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP1-mapping]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_cosmology_default[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_cosmology[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_cosmology_default[WMAP1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP1-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP1-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP1-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP1-astropy.cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP1-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP1-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP1-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP1-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP1-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP1-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP1-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP1-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP1-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP1-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP1-format_type0]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP1-format_type1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP1-format_type2]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP1-format_type3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP1-format_type4]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_yaml[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_default[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_autoidentify[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP3-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml_specify_format[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_bad_index[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_failed_cls[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP3-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP3-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_table[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_instance[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_table_subclass_partial_info[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP3-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP3-astropy.table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_row[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_row_instance[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_row_subclass_partial_info[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP3-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP3-astropy.row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_method[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_callable[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_model_instance[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP3-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP3-astropy.model]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_default[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_wrong_cls[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP3-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP3-OrderedDict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cosmology_as_str[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_cosmology_as_str[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_move_from_meta[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_move_tofrom_meta[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_mapping[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_mapping_default[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_partial_info_mapping[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP3-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP3-mapping]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_cosmology_default[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_cosmology[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_cosmology_default[WMAP3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP3-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP3-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP3-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP3-astropy.cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP3-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP3-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP3-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP3-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP3-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP3-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP3-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP3-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP3-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP3-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP3-format_type0]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP3-format_type1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP3-format_type2]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP3-format_type3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP3-format_type4]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_yaml[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_default[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_autoidentify[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP5-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml_specify_format[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_bad_index[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_failed_cls[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP5-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP5-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_table[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_instance[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_table_subclass_partial_info[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP5-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP5-astropy.table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_row[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_row_instance[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_row_subclass_partial_info[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP5-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP5-astropy.row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_method[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_callable[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_model_instance[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP5-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP5-astropy.model]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_default[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_wrong_cls[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP5-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP5-OrderedDict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cosmology_as_str[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_cosmology_as_str[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_move_from_meta[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_move_tofrom_meta[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_mapping[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_mapping_default[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_partial_info_mapping[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP5-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP5-mapping]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_cosmology_default[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_cosmology[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_cosmology_default[WMAP5]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP5-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP5-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP5-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP5-astropy.cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP5-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP5-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP5-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP5-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP5-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP5-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP5-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP5-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP5-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP5-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP5-format_type0]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP5-format_type1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP5-format_type2]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP5-format_type3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP5-format_type4]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_yaml[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_default[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_autoidentify[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP7-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml_specify_format[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_bad_index[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_failed_cls[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP7-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP7-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_table[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_instance[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_table_subclass_partial_info[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP7-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP7-astropy.table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_row[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_row_instance[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_row_subclass_partial_info[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP7-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP7-astropy.row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_method[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_callable[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_model_instance[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP7-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP7-astropy.model]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_default[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_wrong_cls[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP7-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP7-OrderedDict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cosmology_as_str[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_cosmology_as_str[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_move_from_meta[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_move_tofrom_meta[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_mapping[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_mapping_default[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_partial_info_mapping[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP7-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP7-mapping]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_cosmology_default[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_cosmology[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_cosmology_default[WMAP7]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP7-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP7-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP7-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP7-astropy.cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP7-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP7-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP7-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP7-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP7-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP7-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP7-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP7-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP7-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP7-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP7-format_type0]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP7-format_type1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP7-format_type2]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP7-format_type3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP7-format_type4]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_yaml[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_default[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_yaml_autoidentify[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml[WMAP9-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_yaml_specify_format[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_bad_index[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_failed_cls[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP9-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_cls[WMAP9-Table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table_in_meta[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_table[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_table[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_instance[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_table_subclass_partial_info[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_table_mutlirow[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP9-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_table[WMAP9-astropy.table]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_row_in_meta[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_row[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_row_instance[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_row_subclass_partial_info[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP9-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_row[WMAP9-astropy.row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_method[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model_not_callable[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_toformat_model[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_model_instance[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP9-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_model[WMAP9-astropy.model]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_default[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_wrong_cls[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP9-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cls[WMAP9-OrderedDict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_cosmology_as_str[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_cosmology_as_str[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_mapping_move_from_meta[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofrom_mapping_move_tofrom_meta[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_mapping[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_mapping_default[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_partial_info_mapping[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP9-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_mapping[WMAP9-mapping]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_to_cosmology_default[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_not_cosmology[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_from_cosmology_default[WMAP9]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP9-True]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP9-False]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP9-None]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_is_equivalent_to_cosmology[WMAP9-astropy.cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP9-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP9-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP9-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP9-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_tofromformat_complete_info[WMAP9-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP9-mapping-dict]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP9-yaml-str]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP9-astropy.cosmology-Cosmology]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP9-astropy.row-Row]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_subclass_complete_info[WMAP9-astropy.table-QTable]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP9-format_type0]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP9-format_type1]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP9-format_type2]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP9-format_type3]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_class_mismatch[WMAP9-format_type4]\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_model_wrong_cls\", \"astropy/cosmology/tests/test_connect.py::TestCosmologyToFromFormat::test_fromformat_model_subclass_partial_info\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.525521",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}