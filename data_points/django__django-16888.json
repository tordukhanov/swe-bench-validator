{
  "repo": "django/django",
  "instance_id": "django__django-16888",
  "base_commit": "eb9df03a43f34c44131ec3a295643327b8a68bb4",
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1810,13 +1810,11 @@ def to_python(self, value):\n             )\n         return decimal_value\n \n-    def get_db_prep_value(self, value, connection, prepared=False):\n-        if not prepared:\n-            value = self.get_prep_value(value)\n+    def get_db_prep_save(self, value, connection):\n         if hasattr(value, \"as_sql\"):\n             return value\n         return connection.ops.adapt_decimalfield_value(\n-            value, self.max_digits, self.decimal_places\n+            self.to_python(value), self.max_digits, self.decimal_places\n         )\n \n     def get_prep_value(self, value):\n",
  "test_patch": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -91,7 +91,10 @@ def test_lookup_really_big_value(self):\n         Really big values can be used in a filter statement.\n         \"\"\"\n         # This should not crash.\n-        Foo.objects.filter(d__gte=100000000000)\n+        self.assertSequenceEqual(Foo.objects.filter(d__gte=100000000000), [])\n+\n+    def test_lookup_decimal_larger_than_max_digits(self):\n+        self.assertSequenceEqual(Foo.objects.filter(d__lte=Decimal(\"123456\")), [])\n \n     def test_max_digits_validation(self):\n         field = models.DecimalField(max_digits=2)\n",
  "problem_statement": "Querying for decimals larger than max_digits crashes on SQLite\nDescription\n\t\nIntroduced in: Refs #33308 -- Improved adapting DecimalField values to decimal.\nDescription: I have DecimalField with max_digits=4. Previously, querying for something larger (e.g. 12345) would execute the sql and return ObjectNotFound. Now, in 4.2, it throws a decimal.InvalidOperation error, as it tries to quantize the value to have 4 digits.\nI understand that it doesn't make sense to query for a larger number, but the error that occurs was pretty confusing to me. Also, it is not as easy to check in my application, because I don't have easy access to the max_digits parameter of the field.\nIn my opinion, the backend should either accept larger values and always return \"not found\", or the error should be more descriptive, so that it can be caught specifically.\nTestcase: placed in tests/backends folder and used for git bisect\nimport decimal\nfrom django.db import models\nfrom django.test import TestCase\nclass DecimalModel(models.Model):\n\tdec_field = models.DecimalField(decimal_places=0, max_digits=4)\nclass InvalidDecimalQuery(TestCase):\n\tdef test_invalid_decimal_query(self):\n\t\ttry:\n\t\t\tDecimalModel.objects.get(dec_field='12345')\n\t\texcept decimal.InvalidOperation:\n\t\t\tself.fail(\"Too large decimal query caused exception.\")\n\t\texcept DecimalModel.DoesNotExist:\n\t\t\tpass\nStacktrace:\nTraceback (most recent call last):\n File \"lib/python3.10/site-packages/django/db/models/manager.py\", line 87, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"lib/python3.10/site-packages/django/db/models/query.py\", line 633, in get\n\tnum = len(clone)\n File \"lib/python3.10/site-packages/django/db/models/query.py\", line 380, in __len__\n\tself._fetch_all()\n File \"lib/python3.10/site-packages/django/db/models/query.py\", line 1881, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"lib/python3.10/site-packages/django/db/models/query.py\", line 91, in __iter__\n\tresults = compiler.execute_sql(\n File \"lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 1547, in execute_sql\n\tsql, params = self.as_sql()\n File \"lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 762, in as_sql\n\tself.compile(self.where) if self.where is not None else (\"\", [])\n File \"lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 544, in compile\n\tsql, params = node.as_sql(self, self.connection)\n File \"lib/python3.10/site-packages/django/db/models/sql/where.py\", line 145, in as_sql\n\tsql, params = compiler.compile(child)\n File \"lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 544, in compile\n\tsql, params = node.as_sql(self, self.connection)\n File \"lib/python3.10/site-packages/django/db/models/lookups.py\", line 357, in as_sql\n\treturn super().as_sql(compiler, connection)\n File \"lib/python3.10/site-packages/django/db/models/lookups.py\", line 225, in as_sql\n\trhs_sql, rhs_params = self.process_rhs(compiler, connection)\n File \"lib/python3.10/site-packages/django/db/models/lookups.py\", line 126, in process_rhs\n\treturn self.get_db_prep_lookup(value, connection)\n File \"lib/python3.10/site-packages/django/db/models/lookups.py\", line 254, in get_db_prep_lookup\n\telse [get_db_prep_value(value, connection, prepared=True)],\n File \"lib/python3.10/site-packages/django/db/models/fields/__init__.py\", line 1761, in get_db_prep_value\n\treturn connection.ops.adapt_decimalfield_value(\n File \"lib/python3.10/site-packages/django/db/backends/base/operations.py\", line 574, in adapt_decimalfield_value\n\treturn utils.format_number(value, max_digits, decimal_places)\n File \"lib/python3.10/site-packages/django/db/backends/utils.py\", line 304, in format_number\n\tvalue = value.quantize(\ndecimal.InvalidOperation: [<class 'decimal.InvalidOperation'>]\n",
  "hints_text": "Confirmed regression with 7990d254b0af158baf827fafbd90fe8e890f23bd Crashes with sqlite, postgres ok edit: mysql ok too\nThe most straightforward way to address this is likely to have DecimalField.get_db_prep_value catch decimal.InvalidOperation and raise EmptyResultSet instead.\nReplying to Simon Charette: The most straightforward way to address this is likely to have DecimalField.get_db_prep_value catch decimal.InvalidOperation and raise EmptyResultSet instead. Hi Simon ðŸ‘‹ , I want to implement this patch. I will send the pr within 6hrs\nMhm this is a tricky one. Raising EmptyResultSet feels wrong though. There is no reason why this code should not be able to properly prep the value (there will certainly be dragons somewhere down the line but it feels like we are doing one transformation to many). I'd be interested to know what the actual code was that led to this behavior. If you pass .filter(pk='abc') you also get an exception that this is not a valid integer. Wouldn't form validation where the validator is derived from the model field would have detected that this is out of range already?\nYup raising EmptyResultSet would break doing DecimalModel.objects.filter(dec_field__lte=Decimal('12345')) which seems valid if there are values <= 12,345 ðŸ¤” (which is currently crashing as per above)\nReplying to David Sanders: Yup raising EmptyResultSet would break doing DecimalModel.objects.filter(dec_field__lte=Decimal('12345')) which seems valid if there are values <= 12,345 ðŸ¤” (which is currently crashing as per above) (Also just confirming that DecimalModel.objects.filter(dec_field__lte=Decimal('12345')) did work ok prior to 7990d254b0af158baf827fafbd90fe8e890f23bd)\nYeah, so a query for \"less than\" seems valid to me and tells me our conversion code is not as lenient as it should be. So maybe let's just revert â€‹https://github.com/django/django/commit/7990d254b0af158baf827fafbd90fe8e890f23bd locally and rerun the testsuite to maybe see a reason for introducing it? To be honest I am not that sure anymore what I did why for the psycopg3 branch :D\nYou're right, the EmptyResultSet approach failed to account for lte and friends that would have to be adjusted as well like we did with IntegerField. What would be good to confirm if we can't revert this change is what the previous logic did for cases where an extra decimal was provided. Was it a non-match on all backends? Were some of them performing rounding? For example, given field = DecimalField(max_digits=4, decimal_places=2) what does filter(Q(field=Decimal('42.425')) | Q(field=Decimal('42.424')) | Q(field=Decimal('42.426'))) yielded on all backends against existing rows values of 42.42 and 42.43. I agree that we don't want to start erroring out here without deprecation period though so this is more of exploration work but I could see why we could want to error out immediately when providing invalid lookup values.",
  "created_at": "2023-05-23T12:33:51Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_lookup_decimal_larger_than_max_digits (model_fields.test_decimalfield.DecimalFieldTests.test_lookup_decimal_larger_than_max_digits)\", \"Really big values can be used in a filter statement.\"]",
  "PASS_TO_PASS": "[\"test_default (model_fields.test_decimalfield.DecimalFieldTests.test_default)\", \"Should be able to filter decimal fields using strings (#8023).\", \"test_get_prep_value (model_fields.test_decimalfield.DecimalFieldTests.test_get_prep_value)\", \"test_invalid_value (model_fields.test_decimalfield.DecimalFieldTests.test_invalid_value)\", \"test_max_decimal_places_validation (model_fields.test_decimalfield.DecimalFieldTests.test_max_decimal_places_validation)\", \"test_max_digits_validation (model_fields.test_decimalfield.DecimalFieldTests.test_max_digits_validation)\", \"test_max_whole_digits_validation (model_fields.test_decimalfield.DecimalFieldTests.test_max_whole_digits_validation)\", \"Trailing zeros in the fractional part aren't truncated.\", \"test_save_inf_invalid (model_fields.test_decimalfield.DecimalFieldTests.test_save_inf_invalid)\", \"test_save_nan_invalid (model_fields.test_decimalfield.DecimalFieldTests.test_save_nan_invalid)\", \"Ensure decimals don't go through a corrupting float conversion during\", \"test_to_python (model_fields.test_decimalfield.DecimalFieldTests.test_to_python)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.774780",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}