{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-23288",
  "base_commit": "047254dd0c5fcf602a19b245e3b14a38d1af1614",
  "patch": "diff --git a/lib/matplotlib/backends/backend_pdf.py b/lib/matplotlib/backends/backend_pdf.py\n--- a/lib/matplotlib/backends/backend_pdf.py\n+++ b/lib/matplotlib/backends/backend_pdf.py\n@@ -250,6 +250,68 @@ def _datetime_to_pdf(d):\n     return r\n \n \n+def _calculate_quad_point_coordinates(x, y, width, height, angle=0):\n+    \"\"\"\n+    Calculate the coordinates of rectangle when rotated by angle around x, y\n+    \"\"\"\n+\n+    angle = math.radians(-angle)\n+    sin_angle = math.sin(angle)\n+    cos_angle = math.cos(angle)\n+    a = x + height * sin_angle\n+    b = y + height * cos_angle\n+    c = x + width * cos_angle + height * sin_angle\n+    d = y - width * sin_angle + height * cos_angle\n+    e = x + width * cos_angle\n+    f = y - width * sin_angle\n+    return ((x, y), (e, f), (c, d), (a, b))\n+\n+\n+def _get_coordinates_of_block(x, y, width, height, angle=0):\n+    \"\"\"\n+    Get the coordinates of rotated rectangle and rectangle that covers the\n+    rotated rectangle.\n+    \"\"\"\n+\n+    vertices = _calculate_quad_point_coordinates(x, y, width,\n+                                                 height, angle)\n+\n+    # Find min and max values for rectangle\n+    # adjust so that QuadPoints is inside Rect\n+    # PDF docs says that QuadPoints should be ignored if any point lies\n+    # outside Rect, but for Acrobat it is enough that QuadPoints is on the\n+    # border of Rect.\n+\n+    pad = 0.00001 if angle % 90 else 0\n+    min_x = min(v[0] for v in vertices) - pad\n+    min_y = min(v[1] for v in vertices) - pad\n+    max_x = max(v[0] for v in vertices) + pad\n+    max_y = max(v[1] for v in vertices) + pad\n+    return (tuple(itertools.chain.from_iterable(vertices)),\n+            (min_x, min_y, max_x, max_y))\n+\n+\n+def _get_link_annotation(gc, x, y, width, height, angle=0):\n+    \"\"\"\n+    Create a link annotation object for embedding URLs.\n+    \"\"\"\n+    quadpoints, rect = _get_coordinates_of_block(x, y, width, height, angle)\n+    link_annotation = {\n+        'Type': Name('Annot'),\n+        'Subtype': Name('Link'),\n+        'Rect': rect,\n+        'Border': [0, 0, 0],\n+        'A': {\n+            'S': Name('URI'),\n+            'URI': gc.get_url(),\n+        },\n+    }\n+    if angle % 90:\n+        # Add QuadPoints\n+        link_annotation['QuadPoints'] = quadpoints\n+    return link_annotation\n+\n+\n def pdfRepr(obj):\n     \"\"\"Map Python objects to PDF syntax.\"\"\"\n \n@@ -2154,17 +2216,8 @@ def draw_mathtext(self, gc, x, y, s, prop, angle):\n             self._text2path.mathtext_parser.parse(s, 72, prop)\n \n         if gc.get_url() is not None:\n-            link_annotation = {\n-                'Type': Name('Annot'),\n-                'Subtype': Name('Link'),\n-                'Rect': (x, y, x + width, y + height),\n-                'Border': [0, 0, 0],\n-                'A': {\n-                    'S': Name('URI'),\n-                    'URI': gc.get_url(),\n-                },\n-            }\n-            self.file._annotations[-1][1].append(link_annotation)\n+            self.file._annotations[-1][1].append(_get_link_annotation(\n+                gc, x, y, width, height, angle))\n \n         fonttype = mpl.rcParams['pdf.fonttype']\n \n@@ -2220,17 +2273,8 @@ def draw_tex(self, gc, x, y, s, prop, angle, *, mtext=None):\n             page, = dvi\n \n         if gc.get_url() is not None:\n-            link_annotation = {\n-                'Type': Name('Annot'),\n-                'Subtype': Name('Link'),\n-                'Rect': (x, y, x + page.width, y + page.height),\n-                'Border': [0, 0, 0],\n-                'A': {\n-                    'S': Name('URI'),\n-                    'URI': gc.get_url(),\n-                },\n-            }\n-            self.file._annotations[-1][1].append(link_annotation)\n+            self.file._annotations[-1][1].append(_get_link_annotation(\n+                gc, x, y, page.width, page.height, angle))\n \n         # Gather font information and do some setup for combining\n         # characters into strings. The variable seq will contain a\n@@ -2330,17 +2374,8 @@ def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None):\n         if gc.get_url() is not None:\n             font.set_text(s)\n             width, height = font.get_width_height()\n-            link_annotation = {\n-                'Type': Name('Annot'),\n-                'Subtype': Name('Link'),\n-                'Rect': (x, y, x + width / 64, y + height / 64),\n-                'Border': [0, 0, 0],\n-                'A': {\n-                    'S': Name('URI'),\n-                    'URI': gc.get_url(),\n-                },\n-            }\n-            self.file._annotations[-1][1].append(link_annotation)\n+            self.file._annotations[-1][1].append(_get_link_annotation(\n+                gc, x, y, width / 64, height / 64, angle))\n \n         # If fonttype is neither 3 nor 42, emit the whole string at once\n         # without manual kerning.\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_pdf.py b/lib/matplotlib/tests/test_backend_pdf.py\n--- a/lib/matplotlib/tests/test_backend_pdf.py\n+++ b/lib/matplotlib/tests/test_backend_pdf.py\n@@ -243,10 +243,37 @@ def test_text_urls():\n                     (a for a in annots if a.A.URI == f'{test_url}{fragment}'),\n                     None)\n                 assert annot is not None\n+                assert getattr(annot, 'QuadPoints', None) is None\n                 # Positions in points (72 per inch.)\n                 assert annot.Rect[1] == decimal.Decimal(y) * 72\n \n \n+def test_text_rotated_urls():\n+    pikepdf = pytest.importorskip('pikepdf')\n+\n+    test_url = 'https://test_text_urls.matplotlib.org/'\n+\n+    fig = plt.figure(figsize=(1, 1))\n+    fig.text(0.1, 0.1, 'N', rotation=45, url=f'{test_url}')\n+\n+    with io.BytesIO() as fd:\n+        fig.savefig(fd, format='pdf')\n+\n+        with pikepdf.Pdf.open(fd) as pdf:\n+            annots = pdf.pages[0].Annots\n+\n+            # Iteration over Annots must occur within the context manager,\n+            # otherwise it may fail depending on the pdf structure.\n+            annot = next(\n+                (a for a in annots if a.A.URI == f'{test_url}'),\n+                None)\n+            assert annot is not None\n+            assert getattr(annot, 'QuadPoints', None) is not None\n+            # Positions in points (72 per inch)\n+            assert annot.Rect[0] == \\\n+               annot.QuadPoints[6] - decimal.Decimal('0.00001')\n+\n+\n @needs_usetex\n def test_text_urls_tex():\n     pikepdf = pytest.importorskip('pikepdf')\n",
  "problem_statement": "[Bug]: URL-area not rotated in PDFs\n### Bug summary\n\nThe URL-sensitive area is not rotated in the PDF output\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nplt.text(0.5, 0.5, \"Long text with link\", rotation=45, url=\"https://matplotlib.org\")\r\nplt.savefig(\"link.pdf\")\n```\n\n\n### Actual outcome\n\nNote that the link area is still the horizontal part as if the text was not rotated (this makes sense from reading the code).\n\n### Expected outcome\n\nClicking on the text, not where the non-rotated text would have been would activate the URL.\n\n### Additional information\n\nIn https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/PDF32000_2008.pdf this is described in 12.5.6.5\r\n\r\nFrom PDF version 1.6 it is possible to specify a \"QuadPoints\", i.e. a \"rectangle\" with four corners rather than just x, y, height, width as the current Rect has.\r\n\r\nHowever it says:\r\n\r\n> If this entry is not present or the conforming reader does not recognize\r\nit, the region specified by the Rect entry should be used. QuadPoints\r\nshall be ignored if any coordinate in the array lies outside the region\r\nspecified by Rect.\r\n\r\nSo one would also need to provide a larger Rect, which, for viewers not supporting QuadPoints will lead to that the total rectangle outlined by the rotated text will be clickable.\r\n\r\nThis also holds for mathtexts.\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\nmain\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout\n",
  "hints_text": "This illustrates the problem.\r\n![image](https://user-images.githubusercontent.com/8114497/172552528-5870a43c-689a-407b-8bee-627f70cdd46e.png)\r\n\r\nThe green dashed box is the current clickable Rect. It should be the black box, which can be specified using QuadPoints. However, the new Rect should be the dotted blue. \r\n\r\nThis means that for PDF < 1.6 the dotted blue rectangle will be used, but that should still be better than the current solution (imagine rotating 90 degrees).\r\n\r\nMarking this as a good first issue as the solution is more or less given. Some trigonometry is required to determine a to f. Then these points together with x and y should be used to determine the max/min x and y coordinate to determine the blue Rect.\nHi @oscargus, where are clickable areas defined in the code? I've looked in `backend_pdf.py` in `RendererPdf` class and also at `Text` class so far but can't see where this would be coming from.\nThis is the code in `draw_mathtext` and then there are more or less identical parts in `draw_tex` and `draw_text`.\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/00cdf28e7adf2216d41fc28b6eebcee3b8217d5f/lib/matplotlib/backends/backend_pdf.py#L2157-L2167\r\n\r\nMaybe one should create a method that competes the coordinates and generates the `link_annotation` object rather than continue duplicating code?",
  "created_at": "2022-06-16T09:26:53Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_pdf.py::test_text_rotated_urls\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_pdf.py::test_use14corefonts[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_embed_fonts[3-DejaVu\", \"lib/matplotlib/tests/test_backend_pdf.py::test_embed_fonts[42-DejaVu\", \"lib/matplotlib/tests/test_backend_pdf.py::test_multipage_pagecount\", \"lib/matplotlib/tests/test_backend_pdf.py::test_multipage_properfinalize\", \"lib/matplotlib/tests/test_backend_pdf.py::test_multipage_keep_empty\", \"lib/matplotlib/tests/test_backend_pdf.py::test_composite_image\", \"lib/matplotlib/tests/test_backend_pdf.py::test_savefig_metadata\", \"lib/matplotlib/tests/test_backend_pdf.py::test_invalid_metadata\", \"lib/matplotlib/tests/test_backend_pdf.py::test_multipage_metadata\", \"lib/matplotlib/tests/test_backend_pdf.py::test_text_urls\", \"lib/matplotlib/tests/test_backend_pdf.py::test_pdfpages_fspath\", \"lib/matplotlib/tests/test_backend_pdf.py::test_hatching_legend[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_grayscale_alpha[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_pdf_eps_savefig_when_color_is_none[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_pdf_eps_savefig_when_color_is_none[eps]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_failing_latex\", \"lib/matplotlib/tests/test_backend_pdf.py::test_empty_rasterized\", \"lib/matplotlib/tests/test_backend_pdf.py::test_kerning[pdf]\", \"lib/matplotlib/tests/test_backend_pdf.py::test_glyphs_subset\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.801684",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}