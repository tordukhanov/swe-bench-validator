{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14627",
  "base_commit": "a23b6b6097971768d0ebdc6ef5b48dbe705e6b8d",
  "patch": "diff --git a/sympy/functions/combinatorial/factorials.py b/sympy/functions/combinatorial/factorials.py\n--- a/sympy/functions/combinatorial/factorials.py\n+++ b/sympy/functions/combinatorial/factorials.py\n@@ -828,18 +828,21 @@ def _eval(self, n, k):\n     @classmethod\n     def eval(cls, n, k):\n         n, k = map(sympify, (n, k))\n-        if k.is_zero:\n+        d = n - k\n+        n_nonneg, n_isint = n.is_nonnegative, n.is_integer\n+        if k.is_zero or ((n_nonneg or n_isint == False)\n+                and d.is_zero):\n             return S.One\n-        if (k - 1).is_zero:\n+        if (k - 1).is_zero or ((n_nonneg or n_isint == False)\n+                and (d - 1).is_zero):\n             return n\n         if k.is_integer:\n-            if k.is_negative or (n.is_integer and n.is_nonnegative\n-                    and (n - k).is_negative):\n+            if k.is_negative or (n_nonneg and n_isint and d.is_negative):\n                 return S.Zero\n             elif n.is_number:\n                 res = cls._eval(n, k)\n                 return res.expand(basic=True) if res else res\n-        elif n.is_negative and n.is_integer:\n+        elif n_nonneg == False and n_isint:\n             # a special case when binomial evaluates to complex infinity\n             return S.ComplexInfinity\n         elif k.is_number:\n",
  "test_patch": "diff --git a/sympy/functions/combinatorial/tests/test_comb_factorials.py b/sympy/functions/combinatorial/tests/test_comb_factorials.py\n--- a/sympy/functions/combinatorial/tests/test_comb_factorials.py\n+++ b/sympy/functions/combinatorial/tests/test_comb_factorials.py\n@@ -279,6 +279,7 @@ def test_binomial():\n     kp = Symbol('kp', integer=True, positive=True)\n     kn = Symbol('kn', integer=True, negative=True)\n     u = Symbol('u', negative=True)\n+    v = Symbol('v', nonnegative=True)\n     p = Symbol('p', positive=True)\n     z = Symbol('z', zero=True)\n     nt = Symbol('nt', integer=False)\n@@ -334,6 +335,15 @@ def test_binomial():\n \n     assert binomial(a, b).is_nonnegative is True\n \n+    # issue #14625\n+    for _ in (pi, -pi, nt, v, a):\n+        assert binomial(_, _) == 1\n+        assert binomial(_, _ - 1) == _\n+    assert isinstance(binomial(u, u), binomial)\n+    assert isinstance(binomial(u, u - 1), binomial)\n+    assert isinstance(binomial(x, x), binomial)\n+    assert isinstance(binomial(x, x - 1), binomial)\n+\n     # issue #13980 and #13981\n     assert binomial(-7, -5) == 0\n     assert binomial(-23, -12) == 0\n@@ -361,8 +371,7 @@ def test_binomial():\n     assert binomial((1+2*I), (1+3*I)) == gamma(2 + 2*I)/(gamma(1 - I)*gamma(2 + 3*I))\n     assert binomial(I, 5) == S(1)/3 - I/S(12)\n     assert binomial((2*I + 3), 7) == -13*I/S(63)\n-    assert binomial(I, n).func == binomial\n-\n+    assert isinstance(binomial(I, n), binomial)\n \n \n def test_binomial_diff():\n",
  "problem_statement": "binomial(n,n) needs simplify to become 1\nAfter 76adb16333dffd42635f50f935a4a1badbe0a814, `binomial(n, n)` does not become 1.  Sure.\r\n\r\nBut even with appropriate assumptions, we need to simplify:\r\n```\r\n>>> n = Symbol('n', integer=True, positive=True)\r\n>>> binomial(n, n)\r\n⎛n⎞\r\n⎜ ⎟\r\n⎝n⎠\r\n>>> simplify(_)\r\n1\r\n```\r\n\r\n@sidhantnagpal: was that intentional?  Maybe its not important given that DTRT with `simplify`...  Thoughts?\n",
  "hints_text": "Yes, I think adding `if k.is_zero or (n.is_nonnegative and d.is_zero)` should fix this.\nSimilar issue would be `binomial(n, n - 1)` for same assumptions on `n`.\r\nAnd it could be fixed using `if (k - 1).is_zero or (n.is_nonnegative and (d - 1).is_zero)`.\r\n\r\nBoth the cases, will hold even if n is not an integer. So, tests with minimal assumptions would be:\r\n```\r\nIn []: n = Symbol('n', nonnegative=True)\r\nIn []: binomial(n, n)\r\nOut[]: 1\r\nIn []: binomial(n, n - 1)\r\nOut[]: n\r\n```\r\nThough it should be checked that it doesn't break any case.",
  "created_at": "2018-04-14T09:54:28Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_binomial\"]",
  "PASS_TO_PASS": "[\"test_rf_eval_apply\", \"test_ff_eval_apply\", \"test_factorial\", \"test_factorial_diff\", \"test_factorial_series\", \"test_factorial_rewrite\", \"test_factorial2\", \"test_factorial2_rewrite\", \"test_binomial_diff\", \"test_binomial_rewrite\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.094705",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}