{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-4175",
  "base_commit": "ae6cbd1062c0a8e68d32a5cdc67c993da26d0f4a",
  "patch": "diff --git a/pylint/lint/parallel.py b/pylint/lint/parallel.py\n--- a/pylint/lint/parallel.py\n+++ b/pylint/lint/parallel.py\n@@ -160,7 +160,7 @@ def check_parallel(linter, jobs, files, arguments=None):\n         pool.join()\n \n     _merge_mapreduce_data(linter, all_mapreduce_data)\n-    linter.stats = _merge_stats(all_stats)\n+    linter.stats = _merge_stats([linter.stats] + all_stats)\n \n     # Insert stats data to local checkers.\n     for checker in linter.get_checkers():\n",
  "test_patch": "diff --git a/tests/test_check_parallel.py b/tests/test_check_parallel.py\n--- a/tests/test_check_parallel.py\n+++ b/tests/test_check_parallel.py\n@@ -67,6 +67,68 @@ def process_module(self, _astroid):\n         self.data.append(record)\n \n \n+class ParallelTestChecker(BaseChecker):\n+    \"\"\"A checker that does need to consolidate data.\n+\n+    To simulate the need to consolidate data, this checker only\n+    reports a message for pairs of files.\n+\n+    On non-parallel builds: it works on all the files in a single run.\n+\n+    On parallel builds: lint.parallel calls ``open`` once per file.\n+\n+    So if files are treated by separate processes, no messages will be\n+    raised from the individual process, all messages will be raised\n+    from reduce_map_data.\n+    \"\"\"\n+\n+    __implements__ = (pylint.interfaces.IRawChecker,)\n+\n+    name = \"parallel-checker\"\n+    test_data = \"parallel\"\n+    msgs = {\n+        \"R9999\": (\n+            \"Test %s\",\n+            \"parallel-test-check\",\n+            \"Some helpful text.\",\n+        )\n+    }\n+\n+    def __init__(self, linter, *args, **kwargs):\n+        super().__init__(linter, *args, **kwargs)\n+        self.data = []\n+        self.linter = linter\n+        self.stats = None\n+\n+    def open(self):\n+        \"\"\"init the checkers: reset statistics information\"\"\"\n+        self.stats = self.linter.add_stats()\n+        self.data = []\n+\n+    def close(self):\n+        for _ in self.data[1::2]:  # Work on pairs of files, see class docstring.\n+            self.add_message(\"R9999\", args=(\"From process_module, two files seen.\",))\n+\n+    def get_map_data(self):\n+        return self.data\n+\n+    def reduce_map_data(self, linter, data):\n+        recombined = type(self)(linter)\n+        recombined.open()\n+        aggregated = []\n+        for d in data:\n+            aggregated.extend(d)\n+        for _ in aggregated[1::2]:  # Work on pairs of files, see class docstring.\n+            self.add_message(\"R9999\", args=(\"From reduce_map_data\",))\n+        recombined.close()\n+\n+    def process_module(self, _astroid):\n+        \"\"\"Called once per stream/file/astroid object\"\"\"\n+        # record the number of invocations with the data object\n+        record = self.test_data + str(len(self.data))\n+        self.data.append(record)\n+\n+\n class ExtraSequentialTestChecker(SequentialTestChecker):\n     \"\"\"A checker that does not need to consolidate data across run invocations\"\"\"\n \n@@ -74,6 +136,13 @@ class ExtraSequentialTestChecker(SequentialTestChecker):\n     test_data = \"extra-sequential\"\n \n \n+class ExtraParallelTestChecker(ParallelTestChecker):\n+    \"\"\"A checker that does need to consolidate data across run invocations\"\"\"\n+\n+    name = \"extra-parallel-checker\"\n+    test_data = \"extra-parallel\"\n+\n+\n class ThirdSequentialTestChecker(SequentialTestChecker):\n     \"\"\"A checker that does not need to consolidate data across run invocations\"\"\"\n \n@@ -81,6 +150,13 @@ class ThirdSequentialTestChecker(SequentialTestChecker):\n     test_data = \"third-sequential\"\n \n \n+class ThirdParallelTestChecker(ParallelTestChecker):\n+    \"\"\"A checker that does need to consolidate data across run invocations\"\"\"\n+\n+    name = \"third-parallel-checker\"\n+    test_data = \"third-parallel\"\n+\n+\n class TestCheckParallelFramework:\n     \"\"\"Tests the check_parallel() function's framework\"\"\"\n \n@@ -402,3 +478,69 @@ def test_compare_workers_to_single_proc(self, num_files, num_jobs, num_checkers)\n         assert (\n             stats_check_parallel == expected_stats\n         ), \"The lint is returning unexpected results, has something changed?\"\n+\n+    @pytest.mark.parametrize(\n+        \"num_files,num_jobs,num_checkers\",\n+        [\n+            (2, 2, 1),\n+            (2, 2, 2),\n+            (2, 2, 3),\n+            (3, 2, 1),\n+            (3, 2, 2),\n+            (3, 2, 3),\n+            (3, 1, 1),\n+            (3, 1, 2),\n+            (3, 1, 3),\n+            (3, 5, 1),\n+            (3, 5, 2),\n+            (3, 5, 3),\n+            (10, 2, 1),\n+            (10, 2, 2),\n+            (10, 2, 3),\n+            (2, 10, 1),\n+            (2, 10, 2),\n+            (2, 10, 3),\n+        ],\n+    )\n+    def test_map_reduce(self, num_files, num_jobs, num_checkers):\n+        \"\"\"Compares the 3 key parameters for check_parallel() produces the same results\n+\n+        The intent here is to validate the reduce step: no stats should be lost.\n+\n+        Checks regression of https://github.com/PyCQA/pylint/issues/4118\n+        \"\"\"\n+\n+        # define the stats we expect to get back from the runs, these should only vary\n+        # with the number of files.\n+        file_infos = _gen_file_datas(num_files)\n+\n+        # Loop for single-proc and mult-proc so we can ensure the same linter-config\n+        for do_single_proc in range(2):\n+            linter = PyLinter(reporter=Reporter())\n+\n+            # Assign between 1 and 3 checkers to the linter, they should not change the\n+            # results of the lint\n+            linter.register_checker(ParallelTestChecker(linter))\n+            if num_checkers > 1:\n+                linter.register_checker(ExtraParallelTestChecker(linter))\n+            if num_checkers > 2:\n+                linter.register_checker(ThirdParallelTestChecker(linter))\n+\n+            if do_single_proc:\n+                # establish the baseline\n+                assert (\n+                    linter.config.jobs == 1\n+                ), \"jobs>1 are ignored when calling _check_files\"\n+                linter._check_files(linter.get_ast, file_infos)\n+                stats_single_proc = linter.stats\n+            else:\n+                check_parallel(\n+                    linter,\n+                    jobs=num_jobs,\n+                    files=file_infos,\n+                    arguments=None,\n+                )\n+                stats_check_parallel = linter.stats\n+        assert (\n+            stats_single_proc[\"by_msg\"] == stats_check_parallel[\"by_msg\"]\n+        ), \"Single-proc and check_parallel() should return the same thing\"\n",
  "problem_statement": "Pylint 2.7.0 seems to ignore the min-similarity-lines setting\n<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Have two Python source files that share 8 common lines \r\n2. Have min-similarity-lines=40 in the pylint config\r\n3. Run pylint 2.7.0 on the source files\r\n\r\n### Current behavior\r\n\r\nBefore pylint 2.7.0, the min-similarity-lines setting was honored and caused shorter similar lines to be accepted.\r\n\r\nStarting with pylint 2.7.0, the min-similarity-lines setting seems to be ignored and the common lines are always reported as an issue R0801, even when the min-similarity-lines setting is significantly larger than the number of common lines.\r\n\r\n### Expected behavior\r\n\r\nThe min-similarity-lines setting should be respected again as it was before pylint 2.7.0.\r\n\r\n### pylint --version output\r\n\r\npylint 2.7.0\r\nastroid 2.5\r\nPython 3.9.1 (default, Feb  1 2021, 20:41:56) \r\n[Clang 12.0.0 (clang-1200.0.32.29)]\r\n\nPylint 2.7.0 seems to ignore the min-similarity-lines setting\n<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Have two Python source files that share 8 common lines \r\n2. Have min-similarity-lines=40 in the pylint config\r\n3. Run pylint 2.7.0 on the source files\r\n\r\n### Current behavior\r\n\r\nBefore pylint 2.7.0, the min-similarity-lines setting was honored and caused shorter similar lines to be accepted.\r\n\r\nStarting with pylint 2.7.0, the min-similarity-lines setting seems to be ignored and the common lines are always reported as an issue R0801, even when the min-similarity-lines setting is significantly larger than the number of common lines.\r\n\r\n### Expected behavior\r\n\r\nThe min-similarity-lines setting should be respected again as it was before pylint 2.7.0.\r\n\r\n### pylint --version output\r\n\r\npylint 2.7.0\r\nastroid 2.5\r\nPython 3.9.1 (default, Feb  1 2021, 20:41:56) \r\n[Clang 12.0.0 (clang-1200.0.32.29)]\r\n\n",
  "hints_text": "We are seeing the same problem. All of our automated builds failed this morning.\r\n\r\n``` bash\r\n$ pylint --version\r\npylint 2.7.0\r\nastroid 2.5\r\nPython 3.7.7 (tags/v3.7.7:d7c567b08f, Mar 10 2020, 10:41:24) [MSC v.1900 64 bit (AMD64)]\r\n```\r\n\r\n**Workaround**\r\n\r\nReverting back to pylint 2.6.2.\r\n\r\n\nMy projects pass if I disable `--jobs=N` in my CI/CD (for projects with `min_similarity_lines` greater than the default).\r\n\r\nThis suggests that the `min-similarity-lines`/`min_similarity_lines` option isn't being passed to sub-workers by the `check_parallel` code-path.\r\n\r\nAs an aside, when I last did a profile of multi-job vs single-job runs, there was no wall-clock gain, but much higher CPU use (aka cost), so I would advice *not* using `--jobs=>2`.\nWe have circumvented the problem by excluding R0801 in the \"disable\" setting of the pylintrc file. We needed to specify the issue by number - specifying it by name did not work.\r\n\r\nWe run with jobs=4, BTW.\nI'm not sure if this is related, but when running pylint 2.7.1 with --jobs=0, pylint reports duplicate lines, but in the summary and final score, duplicate lines are not reported. For example:\r\n```\r\npylint --jobs=0 --reports=y test_duplicate.py test_duplicate_2.py \r\n************* Module test_duplicate\r\ntest_duplicate.py:1:0: R0801: Similar lines in 2 files\r\n==test_duplicate:1\r\n==test_duplicate_2:1\r\nfor i in range(10):\r\n    print(i)\r\n    print(i+1)\r\n    print(i+2)\r\n    print(i+3) (duplicate-code)\r\n\r\n\r\nReport\r\n======\r\n10 statements analysed.\r\n\r\nStatistics by type\r\n------------------\r\n\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|type     |number |old number |difference |%documented |%badname |\r\n+=========+=======+===========+===========+============+=========+\r\n|module   |2      |NC         |NC         |100.00      |0.00     |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|class    |0      |NC         |NC         |0           |0        |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|method   |0      |NC         |NC         |0           |0        |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|function |0      |NC         |NC         |0           |0        |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n\r\n\r\n\r\nRaw metrics\r\n-----------\r\n\r\n+----------+-------+------+---------+-----------+\r\n|type      |number |%     |previous |difference |\r\n+==========+=======+======+=========+===========+\r\n|code      |14     |87.50 |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n|docstring |2      |12.50 |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n|comment   |0      |0.00  |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n|empty     |0      |0.00  |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n\r\n\r\n\r\nDuplication\r\n-----------\r\n\r\n+-------------------------+------+---------+-----------+\r\n|                         |now   |previous |difference |\r\n+=========================+======+=========+===========+\r\n|nb duplicated lines      |0     |NC       |NC         |\r\n+-------------------------+------+---------+-----------+\r\n|percent duplicated lines |0.000 |NC       |NC         |\r\n+-------------------------+------+---------+-----------+\r\n\r\n\r\n\r\nMessages by category\r\n--------------------\r\n\r\n+-----------+-------+---------+-----------+\r\n|type       |number |previous |difference |\r\n+===========+=======+=========+===========+\r\n|convention |0      |NC       |NC         |\r\n+-----------+-------+---------+-----------+\r\n|refactor   |0      |NC       |NC         |\r\n+-----------+-------+---------+-----------+\r\n|warning    |0      |NC       |NC         |\r\n+-----------+-------+---------+-----------+\r\n|error      |0      |NC       |NC         |\r\n+-----------+-------+---------+-----------+\r\n\r\n\r\n\r\n\r\n--------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\r\n```\nIt looks like it's due to:\r\n```\r\n@classmethod\r\ndef reduce_map_data(cls, linter, data):\r\n    \"\"\"Reduces and recombines data into a format that we can report on\r\n\r\n    The partner function of get_map_data()\"\"\"\r\n    recombined = SimilarChecker(linter)\r\n    recombined.open()\r\n    Similar.combine_mapreduce_data(recombined, linesets_collection=data)\r\n    recombined.close()\r\n```\r\n\r\nthe `SimilarChecker` instance created gets default values, not values from config. I double checked by trying to fix it:\r\n\r\n```--- a/pylint/checkers/similar.py\r\n+++ b/pylint/checkers/similar.py\r\n@@ -428,6 +428,8 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\r\n \r\n         The partner function of get_map_data()\"\"\"\r\n         recombined = SimilarChecker(linter)\r\n+        checker = [c for c in linter.get_checkers() if c.name == cls.name][0]\r\n+        recombined.min_lines = checker.min_lines\r\n         recombined.open()\r\n         Similar.combine_mapreduce_data(recombined, linesets_collection=data)\r\n         recombined.close()\r\n```\r\n\r\nby simply copying the `min_lines` attribute from the \"root\" checker in the `recombined` checker. I bet this is not the proper way to do it, but I'm not familiar with pylint codebase.\r\n\r\n\nWe are seeing the same problem. All of our automated builds failed this morning.\r\n\r\n``` bash\r\n$ pylint --version\r\npylint 2.7.0\r\nastroid 2.5\r\nPython 3.7.7 (tags/v3.7.7:d7c567b08f, Mar 10 2020, 10:41:24) [MSC v.1900 64 bit (AMD64)]\r\n```\r\n\r\n**Workaround**\r\n\r\nReverting back to pylint 2.6.2.\r\n\r\n\nMy projects pass if I disable `--jobs=N` in my CI/CD (for projects with `min_similarity_lines` greater than the default).\r\n\r\nThis suggests that the `min-similarity-lines`/`min_similarity_lines` option isn't being passed to sub-workers by the `check_parallel` code-path.\r\n\r\nAs an aside, when I last did a profile of multi-job vs single-job runs, there was no wall-clock gain, but much higher CPU use (aka cost), so I would advice *not* using `--jobs=>2`.\nWe have circumvented the problem by excluding R0801 in the \"disable\" setting of the pylintrc file. We needed to specify the issue by number - specifying it by name did not work.\r\n\r\nWe run with jobs=4, BTW.\nI'm not sure if this is related, but when running pylint 2.7.1 with --jobs=0, pylint reports duplicate lines, but in the summary and final score, duplicate lines are not reported. For example:\r\n```\r\npylint --jobs=0 --reports=y test_duplicate.py test_duplicate_2.py \r\n************* Module test_duplicate\r\ntest_duplicate.py:1:0: R0801: Similar lines in 2 files\r\n==test_duplicate:1\r\n==test_duplicate_2:1\r\nfor i in range(10):\r\n    print(i)\r\n    print(i+1)\r\n    print(i+2)\r\n    print(i+3) (duplicate-code)\r\n\r\n\r\nReport\r\n======\r\n10 statements analysed.\r\n\r\nStatistics by type\r\n------------------\r\n\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|type     |number |old number |difference |%documented |%badname |\r\n+=========+=======+===========+===========+============+=========+\r\n|module   |2      |NC         |NC         |100.00      |0.00     |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|class    |0      |NC         |NC         |0           |0        |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|method   |0      |NC         |NC         |0           |0        |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n|function |0      |NC         |NC         |0           |0        |\r\n+---------+-------+-----------+-----------+------------+---------+\r\n\r\n\r\n\r\nRaw metrics\r\n-----------\r\n\r\n+----------+-------+------+---------+-----------+\r\n|type      |number |%     |previous |difference |\r\n+==========+=======+======+=========+===========+\r\n|code      |14     |87.50 |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n|docstring |2      |12.50 |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n|comment   |0      |0.00  |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n|empty     |0      |0.00  |NC       |NC         |\r\n+----------+-------+------+---------+-----------+\r\n\r\n\r\n\r\nDuplication\r\n-----------\r\n\r\n+-------------------------+------+---------+-----------+\r\n|                         |now   |previous |difference |\r\n+=========================+======+=========+===========+\r\n|nb duplicated lines      |0     |NC       |NC         |\r\n+-------------------------+------+---------+-----------+\r\n|percent duplicated lines |0.000 |NC       |NC         |\r\n+-------------------------+------+---------+-----------+\r\n\r\n\r\n\r\nMessages by category\r\n--------------------\r\n\r\n+-----------+-------+---------+-----------+\r\n|type       |number |previous |difference |\r\n+===========+=======+=========+===========+\r\n|convention |0      |NC       |NC         |\r\n+-----------+-------+---------+-----------+\r\n|refactor   |0      |NC       |NC         |\r\n+-----------+-------+---------+-----------+\r\n|warning    |0      |NC       |NC         |\r\n+-----------+-------+---------+-----------+\r\n|error      |0      |NC       |NC         |\r\n+-----------+-------+---------+-----------+\r\n\r\n\r\n\r\n\r\n--------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\r\n```\nIt looks like it's due to:\r\n```\r\n@classmethod\r\ndef reduce_map_data(cls, linter, data):\r\n    \"\"\"Reduces and recombines data into a format that we can report on\r\n\r\n    The partner function of get_map_data()\"\"\"\r\n    recombined = SimilarChecker(linter)\r\n    recombined.open()\r\n    Similar.combine_mapreduce_data(recombined, linesets_collection=data)\r\n    recombined.close()\r\n```\r\n\r\nthe `SimilarChecker` instance created gets default values, not values from config. I double checked by trying to fix it:\r\n\r\n```--- a/pylint/checkers/similar.py\r\n+++ b/pylint/checkers/similar.py\r\n@@ -428,6 +428,8 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\r\n \r\n         The partner function of get_map_data()\"\"\"\r\n         recombined = SimilarChecker(linter)\r\n+        checker = [c for c in linter.get_checkers() if c.name == cls.name][0]\r\n+        recombined.min_lines = checker.min_lines\r\n         recombined.open()\r\n         Similar.combine_mapreduce_data(recombined, linesets_collection=data)\r\n         recombined.close()\r\n```\r\n\r\nby simply copying the `min_lines` attribute from the \"root\" checker in the `recombined` checker. I bet this is not the proper way to do it, but I'm not familiar with pylint codebase.\r\n\r\n",
  "created_at": "2021-03-02T15:18:14Z",
  "version": "2.10",
  "FAIL_TO_PASS": "[\"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[2-2-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[2-2-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[2-2-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[3-2-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[3-2-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[3-2-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[3-1-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[3-1-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[3-1-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[3-5-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[3-5-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[3-5-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[10-2-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[10-2-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[10-2-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[2-10-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[2-10-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_map_reduce[2-10-3]\"]",
  "PASS_TO_PASS": "[\"tests/test_check_parallel.py::TestCheckParallelFramework::test_worker_initialize\", \"tests/test_check_parallel.py::TestCheckParallelFramework::test_worker_check_single_file_uninitialised\", \"tests/test_check_parallel.py::TestCheckParallelFramework::test_worker_check_single_file_no_checkers\", \"tests/test_check_parallel.py::TestCheckParallelFramework::test_worker_check_sequential_checker\", \"tests/test_check_parallel.py::TestCheckParallel::test_sequential_checkers_work\", \"tests/test_check_parallel.py::TestCheckParallel::test_invoke_single_job\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[1-2-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[1-2-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[1-2-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[2-2-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[2-2-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[2-2-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[3-2-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[3-2-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[3-2-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[3-1-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[3-1-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[3-1-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[3-5-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[3-5-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[3-5-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[10-2-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[10-2-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[10-2-3]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[2-10-1]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[2-10-2]\", \"tests/test_check_parallel.py::TestCheckParallel::test_compare_workers_to_single_proc[2-10-3]\"]",
  "environment_setup_commit": "bc95cd34071ec2e71de5bca8ff95cc9b88e23814",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.906681",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}