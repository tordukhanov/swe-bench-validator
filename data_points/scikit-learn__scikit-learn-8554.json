{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-8554",
  "base_commit": "a320c085b75b8d18b3d10e7283a5e7695806bc1a",
  "patch": "diff --git a/sklearn/manifold/isomap.py b/sklearn/manifold/isomap.py\n--- a/sklearn/manifold/isomap.py\n+++ b/sklearn/manifold/isomap.py\n@@ -100,7 +100,7 @@ def __init__(self, n_neighbors=5, n_components=2, eigen_solver='auto',\n         self.n_jobs = n_jobs\n \n     def _fit_transform(self, X):\n-        X = check_array(X)\n+        X = check_array(X, accept_sparse='csr')\n         self.nbrs_ = NearestNeighbors(n_neighbors=self.n_neighbors,\n                                       algorithm=self.neighbors_algorithm,\n                                       n_jobs=self.n_jobs)\ndiff --git a/sklearn/manifold/locally_linear.py b/sklearn/manifold/locally_linear.py\n--- a/sklearn/manifold/locally_linear.py\n+++ b/sklearn/manifold/locally_linear.py\n@@ -69,10 +69,9 @@ def barycenter_kneighbors_graph(X, n_neighbors, reg=1e-3, n_jobs=1):\n \n     Parameters\n     ----------\n-    X : {array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}\n+    X : {array-like, NearestNeighbors}\n         Sample data, shape = (n_samples, n_features), in the form of a\n-        numpy array, sparse array, precomputed tree, or NearestNeighbors\n-        object.\n+        numpy array or a NearestNeighbors object.\n \n     n_neighbors : int\n         Number of neighbors for each sample.\n@@ -194,10 +193,9 @@ def locally_linear_embedding(\n \n     Parameters\n     ----------\n-    X : {array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}\n+    X : {array-like, NearestNeighbors}\n         Sample data, shape = (n_samples, n_features), in the form of a\n-        numpy array, sparse array, precomputed tree, or NearestNeighbors\n-        object.\n+        numpy array or a NearestNeighbors object.\n \n     n_neighbors : integer\n         number of neighbors to consider for each point.\n",
  "test_patch": "diff --git a/sklearn/manifold/tests/test_isomap.py b/sklearn/manifold/tests/test_isomap.py\n--- a/sklearn/manifold/tests/test_isomap.py\n+++ b/sklearn/manifold/tests/test_isomap.py\n@@ -10,6 +10,8 @@\n from sklearn import preprocessing\n from sklearn.utils.testing import assert_less\n \n+from scipy.sparse import rand as sparse_rand\n+\n eigen_solvers = ['auto', 'dense', 'arpack']\n path_methods = ['auto', 'FW', 'D']\n \n@@ -122,3 +124,15 @@ def test_isomap_clone_bug():\n         model.fit(np.random.rand(50, 2))\n         assert_equal(model.nbrs_.n_neighbors,\n                      n_neighbors)\n+\n+\n+def test_sparse_input():\n+    X = sparse_rand(100, 3, density=0.1, format='csr')\n+\n+    # Should not error\n+    for eigen_solver in eigen_solvers:\n+        for path_method in path_methods:\n+            clf = manifold.Isomap(n_components=2,\n+                                  eigen_solver=eigen_solver,\n+                                  path_method=path_method)\n+            clf.fit(X)\n",
  "problem_statement": "Isomap and LocallyLinearEmbedding do not accept sparse matrix input (contrary to documentation)\nThe [documentation](http://scikit-learn.org/stable/modules/generated/sklearn.manifold.locally_linear_embedding.html) mentions that `sklearn.manifold.LocallyLinearEmbedding` should support sparse matrix.\r\n\r\nThe error comes from the 5 [occurences](https://github.com/scikit-learn/scikit-learn/blob/14031f6/sklearn/manifold/locally_linear.py#L629) of `check_array` from `sklearn.utils.validation`.\r\n\r\nIf documentation is correct `check_array` should be called with `accept_sparse=True`\r\n[`Check array input`](https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/utils/validation.py#L269)\r\n\r\nI can submit a PR.\r\n\r\n`Isomap` also accepts sparse matrix according to documentation on `fit` and `fit_transform` methods.\r\nGiven that `SpectralEmbedding` also uses the arpack solver, I guess that it also should accept sparse matrices.\r\n\r\n* Check of check_array calls in the manifold subfolder\r\n```bash\r\n/usr/lib/python3.6/site-packages/sklearn/manifold  $  grep 'check_array' *.py -n\r\nisomap.py:9:from ..utils import check_array\r\nisomap.py:103:        X = check_array(X)\r\nisomap.py:202:        X = check_array(X)\r\nlocally_linear.py:11:from ..utils import check_random_state, check_array\r\nlocally_linear.py:42:    X = check_array(X, dtype=FLOAT_DTYPES)\r\nlocally_linear.py:43:    Z = check_array(Z, dtype=FLOAT_DTYPES, allow_nd=True)\r\nlocally_linear.py:629:        X = check_array(X, dtype=float)\r\nlocally_linear.py:688:        X = check_array(X)\r\nmds.py:14:from ..utils import check_random_state, check_array, check_symmetric\r\nmds.py:229:    similarities = check_array(similarities)\r\nmds.py:394:        X = check_array(X)\r\nspectral_embedding_.py:14:from ..utils import check_random_state, check_array, check_symmetric\r\nspectral_embedding_.py:280:        laplacian = check_array(laplacian, dtype=np.float64,\r\nspectral_embedding_.py:283:        ml = smoothed_aggregation_solver(check_array(laplacian, 'csr'))\r\nspectral_embedding_.py:295:        laplacian = check_array(laplacian, dtype=np.float64,\r\nspectral_embedding_.py:472:        X = check_array(X, ensure_min_samples=2, estimator=self)\r\nt_sne.py:18:from ..utils import check_array\r\nt_sne.py:706:            X = check_array(X, accept_sparse=['csr', 'csc', 'coo'],\r\n```\r\n\r\n* For reference, my backtrace\r\n```python\r\nInput training data has shape:  (49352, 15)\r\nInput test data has shape:      (74659, 14)\r\n....\r\n....\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 108, in <module>\r\n    X, X_test, y, tr_pipeline, select_feat, cache_file)\r\n  File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/preprocessing.py\", line 13, in preprocessing\r\n    x_trn, x_val, x_test = feat_selection(select_feat, x_trn, x_val, X_test)\r\n  File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/star_command.py\", line 61, in feat_selection\r\n    trn, val, tst = zip_with(_concat_col, tuples_trn_val_test)\r\n  File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/star_command.py\", line 23, in zip_with\r\n    return starmap(f, zip(*list_of_tuple))\r\n  File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/star_command.py\", line 76, in _feat_transfo\r\n    trn = Transformer.fit_transform(train[sCol])\r\n  File \"/usr/lib/python3.6/site-packages/sklearn/pipeline.py\", line 303, in fit_transform\r\n    return last_step.fit_transform(Xt, y, **fit_params)\r\n  File \"/usr/lib/python3.6/site-packages/sklearn/manifold/locally_linear.py\", line 666, in fit_transform\r\n    self._fit_transform(X)\r\n  File \"/usr/lib/python3.6/site-packages/sklearn/manifold/locally_linear.py\", line 629, in _fit_transform\r\n    X = check_array(X, dtype=float)\r\n  File \"/usr/lib/python3.6/site-packages/sklearn/utils/validation.py\", line 380, in check_array\r\n    force_all_finite)\r\n  File \"/usr/lib/python3.6/site-packages/sklearn/utils/validation.py\", line 243, in _ensure_sparse_format\r\n    raise TypeError('A sparse matrix was passed, but dense '\r\nTypeError: A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.\r\n```\n",
  "hints_text": "Go ahead, submit a PR.\n\nOn 21 February 2017 at 12:12, Mamy Ratsimbazafy <notifications@github.com>\nwrote:\n\n> The documentation\n> <http://scikit-learn.org/stable/modules/generated/sklearn.manifold.locally_linear_embedding.html>\n> mentions that sklearn.manifold.LocallyLinearEmbedding should support\n> sparse matrix.\n>\n> The error comes from the 5 occurences\n> <https://github.com/scikit-learn/scikit-learn/blob/14031f6/sklearn/manifold/locally_linear.py#L629>\n> of check_array from sklearn.utils.validation.\n>\n> If documentation is correct check_array should be called with\n> accept_sparse=True\n> Check array input\n> <https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/utils/validation.py#L269>\n>\n> I can submit a PR.\n>\n> Isomap also accepts sparse matrix according to documentation on fit and\n> fit_transform methods.\n> Given that SpectralEmbedding also uses the arpack solver, I guess that it\n> also should accept sparse matrices.\n>\n> Check of check_array calls in the manifold subfolder\n>\n> /usr/lib/python3.6/site-packages/sklearn/manifold  $  grep 'check_array' *.py -n\n> isomap.py:9:from ..utils import check_array\n> isomap.py:103:        X = check_array(X)\n> isomap.py:202:        X = check_array(X)\n> locally_linear.py:11:from ..utils import check_random_state, check_array\n> locally_linear.py:42:    X = check_array(X, dtype=FLOAT_DTYPES)\n> locally_linear.py:43:    Z = check_array(Z, dtype=FLOAT_DTYPES, allow_nd=True)\n> locally_linear.py:629:        X = check_array(X, dtype=float)\n> locally_linear.py:688:        X = check_array(X)\n> mds.py:14:from ..utils import check_random_state, check_array, check_symmetric\n> mds.py:229:    similarities = check_array(similarities)\n> mds.py:394:        X = check_array(X)\n> spectral_embedding_.py:14:from ..utils import check_random_state, check_array, check_symmetric\n> spectral_embedding_.py:280:        laplacian = check_array(laplacian, dtype=np.float64,\n> spectral_embedding_.py:283:        ml = smoothed_aggregation_solver(check_array(laplacian, 'csr'))\n> spectral_embedding_.py:295:        laplacian = check_array(laplacian, dtype=np.float64,\n> spectral_embedding_.py:472:        X = check_array(X, ensure_min_samples=2, estimator=self)\n> t_sne.py:18:from ..utils import check_array\n> t_sne.py:706:            X = check_array(X, accept_sparse=['csr', 'csc', 'coo'],\n>\n> For reference, my backtrace\n>\n> Input training data has shape:  (49352, 15)\n> Input test data has shape:      (74659, 14)........\n> Traceback (most recent call last):\n>   File \"main.py\", line 108, in <module>\n>     X, X_test, y, tr_pipeline, select_feat, cache_file)\n>   File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/preprocessing.py\", line 13, in preprocessing\n>     x_trn, x_val, x_test = feat_selection(select_feat, x_trn, x_val, X_test)\n>   File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/star_command.py\", line 61, in feat_selection\n>     trn, val, tst = zip_with(_concat_col, tuples_trn_val_test)\n>   File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/star_command.py\", line 23, in zip_with\n>     return starmap(f, zip(*list_of_tuple))\n>   File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/star_command.py\", line 76, in _feat_transfo\n>     trn = Transformer.fit_transform(train[sCol])\n>   File \"/usr/lib/python3.6/site-packages/sklearn/pipeline.py\", line 303, in fit_transform\n>     return last_step.fit_transform(Xt, y, **fit_params)\n>   File \"/usr/lib/python3.6/site-packages/sklearn/manifold/locally_linear.py\", line 666, in fit_transform\n>     self._fit_transform(X)\n>   File \"/usr/lib/python3.6/site-packages/sklearn/manifold/locally_linear.py\", line 629, in _fit_transform\n>     X = check_array(X, dtype=float)\n>   File \"/usr/lib/python3.6/site-packages/sklearn/utils/validation.py\", line 380, in check_array\n>     force_all_finite)\n>   File \"/usr/lib/python3.6/site-packages/sklearn/utils/validation.py\", line 243, in _ensure_sparse_format\n>     raise TypeError('A sparse matrix was passed, but dense 'TypeError: A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/8416>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz6-I0nAfZTcT9mgjprq2bH97AJtOzks5rejoIgaJpZM4MGxJD>\n> .\n>\n\nThanks.\n\n(Not that i've confirmed that these will actually work with sparse matrices\nand I'm not familiar with them.)\n\nOn 21 February 2017 at 14:14, Joel Nothman <joel.nothman@gmail.com> wrote:\n\n> Go ahead, submit a PR.\n>\n> On 21 February 2017 at 12:12, Mamy Ratsimbazafy <notifications@github.com>\n> wrote:\n>\n>> The documentation\n>> <http://scikit-learn.org/stable/modules/generated/sklearn.manifold.locally_linear_embedding.html>\n>> mentions that sklearn.manifold.LocallyLinearEmbedding should support\n>> sparse matrix.\n>>\n>> The error comes from the 5 occurences\n>> <https://github.com/scikit-learn/scikit-learn/blob/14031f6/sklearn/manifold/locally_linear.py#L629>\n>> of check_array from sklearn.utils.validation.\n>>\n>> If documentation is correct check_array should be called with\n>> accept_sparse=True\n>> Check array input\n>> <https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/utils/validation.py#L269>\n>>\n>> I can submit a PR.\n>>\n>> Isomap also accepts sparse matrix according to documentation on fit and\n>> fit_transform methods.\n>> Given that SpectralEmbedding also uses the arpack solver, I guess that\n>> it also should accept sparse matrices.\n>>\n>> Check of check_array calls in the manifold subfolder\n>>\n>> /usr/lib/python3.6/site-packages/sklearn/manifold  $  grep 'check_array' *.py -n\n>> isomap.py:9:from ..utils import check_array\n>> isomap.py:103:        X = check_array(X)\n>> isomap.py:202:        X = check_array(X)\n>> locally_linear.py:11:from ..utils import check_random_state, check_array\n>> locally_linear.py:42:    X = check_array(X, dtype=FLOAT_DTYPES)\n>> locally_linear.py:43:    Z = check_array(Z, dtype=FLOAT_DTYPES, allow_nd=True)\n>> locally_linear.py:629:        X = check_array(X, dtype=float)\n>> locally_linear.py:688:        X = check_array(X)\n>> mds.py:14:from ..utils import check_random_state, check_array, check_symmetric\n>> mds.py:229:    similarities = check_array(similarities)\n>> mds.py:394:        X = check_array(X)\n>> spectral_embedding_.py:14:from ..utils import check_random_state, check_array, check_symmetric\n>> spectral_embedding_.py:280:        laplacian = check_array(laplacian, dtype=np.float64,\n>> spectral_embedding_.py:283:        ml = smoothed_aggregation_solver(check_array(laplacian, 'csr'))\n>> spectral_embedding_.py:295:        laplacian = check_array(laplacian, dtype=np.float64,\n>> spectral_embedding_.py:472:        X = check_array(X, ensure_min_samples=2, estimator=self)\n>> t_sne.py:18:from ..utils import check_array\n>> t_sne.py:706:            X = check_array(X, accept_sparse=['csr', 'csc', 'coo'],\n>>\n>> For reference, my backtrace\n>>\n>> Input training data has shape:  (49352, 15)\n>> Input test data has shape:      (74659, 14)........\n>> Traceback (most recent call last):\n>>   File \"main.py\", line 108, in <module>\n>>     X, X_test, y, tr_pipeline, select_feat, cache_file)\n>>   File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/preprocessing.py\", line 13, in preprocessing\n>>     x_trn, x_val, x_test = feat_selection(select_feat, x_trn, x_val, X_test)\n>>   File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/star_command.py\", line 61, in feat_selection\n>>     trn, val, tst = zip_with(_concat_col, tuples_trn_val_test)\n>>   File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/star_command.py\", line 23, in zip_with\n>>     return starmap(f, zip(*list_of_tuple))\n>>   File \"/home/ml/machinelearning_projects/Kaggle_Compet/Renthop_Apartment_interest/src/star_command.py\", line 76, in _feat_transfo\n>>     trn = Transformer.fit_transform(train[sCol])\n>>   File \"/usr/lib/python3.6/site-packages/sklearn/pipeline.py\", line 303, in fit_transform\n>>     return last_step.fit_transform(Xt, y, **fit_params)\n>>   File \"/usr/lib/python3.6/site-packages/sklearn/manifold/locally_linear.py\", line 666, in fit_transform\n>>     self._fit_transform(X)\n>>   File \"/usr/lib/python3.6/site-packages/sklearn/manifold/locally_linear.py\", line 629, in _fit_transform\n>>     X = check_array(X, dtype=float)\n>>   File \"/usr/lib/python3.6/site-packages/sklearn/utils/validation.py\", line 380, in check_array\n>>     force_all_finite)\n>>   File \"/usr/lib/python3.6/site-packages/sklearn/utils/validation.py\", line 243, in _ensure_sparse_format\n>>     raise TypeError('A sparse matrix was passed, but dense 'TypeError: A sparse matrix was passed, but dense data is required. Use X.toarray() to convert to a dense numpy array.\n>>\n>> —\n>> You are receiving this because you are subscribed to this thread.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/scikit-learn/scikit-learn/issues/8416>, or mute the\n>> thread\n>> <https://github.com/notifications/unsubscribe-auth/AAEz6-I0nAfZTcT9mgjprq2bH97AJtOzks5rejoIgaJpZM4MGxJD>\n>> .\n>>\n>\n>\n\nI traced through and it looks like it should all work with sparse input. I'm added the accept sparse and some tests for sparse input. Will submit a pull request presuming the tests pass.\ngreat!\n\nOn 8 Mar 2017 8:23 am, \"Leland McInnes\" <notifications@github.com> wrote:\n\n> I traced through and it looks like it should all work with sparse input.\n> I'm added the accept sparse and some tests for sparse input. Will submit a\n> pull request presuming the tests pass.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/8416#issuecomment-284863646>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz6y2F6MUdJ_HAcHvYMdr43A6TbJjyks5rjcrLgaJpZM4MGxJD>\n> .\n>\n",
  "created_at": "2017-03-07T23:11:25Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/manifold/tests/test_isomap.py::test_sparse_input\"]",
  "PASS_TO_PASS": "[\"sklearn/manifold/tests/test_isomap.py::test_isomap_simple_grid\", \"sklearn/manifold/tests/test_isomap.py::test_isomap_reconstruction_error\", \"sklearn/manifold/tests/test_isomap.py::test_transform\", \"sklearn/manifold/tests/test_isomap.py::test_pipeline\", \"sklearn/manifold/tests/test_isomap.py::test_isomap_clone_bug\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.028075",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}