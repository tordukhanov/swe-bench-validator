{
  "repo": "django/django",
  "instance_id": "django__django-13466",
  "base_commit": "11c4a4412b74bb1dfe52d706a58f230066821c33",
  "patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -2,7 +2,9 @@\n import os\n import pkgutil\n import sys\n-from argparse import _SubParsersAction\n+from argparse import (\n+    _AppendConstAction, _CountAction, _StoreConstAction, _SubParsersAction,\n+)\n from collections import defaultdict\n from difflib import get_close_matches\n from importlib import import_module\n@@ -138,7 +140,9 @@ def get_actions(parser):\n     # Any required arguments which are passed in via **options must be passed\n     # to parse_args().\n     parse_args += [\n-        '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n+        min(opt.option_strings)\n+        if isinstance(opt, (_AppendConstAction, _CountAction, _StoreConstAction))\n+        else '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n         for opt in parser_actions if (\n             opt.dest in options and\n             (opt.required or opt in mutually_exclusive_required_options)\n",
  "test_patch": "diff --git a/tests/user_commands/management/commands/mutually_exclusive_required.py b/tests/user_commands/management/commands/mutually_exclusive_required.py\n--- a/tests/user_commands/management/commands/mutually_exclusive_required.py\n+++ b/tests/user_commands/management/commands/mutually_exclusive_required.py\n@@ -7,6 +7,13 @@ def add_arguments(self, parser):\n         group = parser.add_mutually_exclusive_group(required=True)\n         group.add_argument('--foo-id', type=int, nargs='?', default=None)\n         group.add_argument('--foo-name', type=str, nargs='?', default=None)\n+        group.add_argument('--append_const', action='append_const', const=42)\n+        group.add_argument('--const', action='store_const', const=31)\n+        group.add_argument('--count', action='count')\n+        group.add_argument('--flag_false', action='store_false')\n+        group.add_argument('--flag_true', action='store_true')\n \n     def handle(self, *args, **options):\n-        self.stdout.write(','.join(options))\n+        for option, value in options.items():\n+            if value is not None:\n+                self.stdout.write('%s=%s' % (option, value))\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,10 +243,38 @@ def test_mutually_exclusive_group_required_options(self):\n         self.assertIn('foo_id', out.getvalue())\n         management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n         self.assertIn('foo_name', out.getvalue())\n-        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        msg = (\n+            'Error: one of the arguments --foo-id --foo-name --append_const '\n+            '--const --count --flag_false --flag_true is required'\n+        )\n         with self.assertRaisesMessage(CommandError, msg):\n             management.call_command('mutually_exclusive_required', stdout=out)\n \n+    def test_mutually_exclusive_group_required_const_options(self):\n+        tests = [\n+            ('append_const', [42]),\n+            ('const', 31),\n+            ('count', 1),\n+            ('flag_false', False),\n+            ('flag_true', True),\n+        ]\n+        for arg, value in tests:\n+            out = StringIO()\n+            expected_output = '%s=%s' % (arg, value)\n+            with self.subTest(arg=arg):\n+                management.call_command(\n+                    'mutually_exclusive_required',\n+                    '--%s' % arg,\n+                    stdout=out,\n+                )\n+                self.assertIn(expected_output, out.getvalue())\n+                out.truncate(0)\n+                management.call_command(\n+                    'mutually_exclusive_required',\n+                    **{arg: value, 'stdout': out},\n+                )\n+                self.assertIn(expected_output, out.getvalue())\n+\n     def test_subparser(self):\n         out = StringIO()\n         management.call_command('subparser', 'foo', 12, stdout=out)\n",
  "problem_statement": "Required mutually exclusive groups don't work with boolean arguments.\nDescription\n\t\nI have the following management command (called test.py):\nfrom django.core.management import BaseCommand\nclass Command(BaseCommand):\n\tdef add_arguments(self, parser):\n\t\tgroup = parser.add_mutually_exclusive_group(required=True)\n\t\tgroup.add_argument('--value', type=str)\n\t\tgroup.add_argument('--flag', action='store_true')\n\tdef handle(self, *args, **options):\n\t\tpass\nRunning ./manage.py test --flag or ./manage.py --value foo, the command works as expected. Using call_command to call the command from my code fails if I pass --flag, e.g.:\nfrom django.core.management import call_command\ncall_command('test', flag=True)\nThis gets me the following traceback:\nargparse.ArgumentError: argument --flag: ignored explicit argument 'True'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n File \"<input>\", line 1, in <module>\n File \"/home/mark/.local/share/virtualenvs/backend-KlVhwr95/lib/python3.8/site-packages/django/core/management/__init__.py\", line 147, in call_command\n\tdefaults = parser.parse_args(args=parse_args)\n File \"/home/mark/.local/share/virtualenvs/backend-KlVhwr95/lib/python3.8/site-packages/django/core/management/base.py\", line 57, in parse_args\n\treturn super().parse_args(args, namespace)\n File \"/usr/lib/python3.8/argparse.py\", line 1780, in parse_args\n\targs, argv = self.parse_known_args(args, namespace)\n File \"/usr/lib/python3.8/argparse.py\", line 1819, in parse_known_args\n\tself.error(str(err))\n File \"/home/mark/.local/share/virtualenvs/backend-KlVhwr95/lib/python3.8/site-packages/django/core/management/base.py\", line 63, in error\n\traise CommandError(\"Error: %s\" % message)\ndjango.core.management.base.CommandError: Error: argument --flag: ignored explicit argument 'True'\n",
  "hints_text": "Probably stating the obvious, but I get the same error when running the command from console and passing value to the --flag explicitly, e.g. ./manage.py test --flag=True.\nPlease do not use Trac as a support channel. You should pass argument without a value, e.g. call_command('test', '--flag').\nMark's response via email: I'm not using your trac as a support channel. This was the first time I used it and I doubt I'll use it again. RE the actual issue: docs for call_comamnd clearly state: \"command options that take no arguments are passed as keywords with True or False\". This works fine, until the arg is placed inside a group. The docs don't mention this. I understand that Django devs are busy, but at least try understanding what the ticket is saying before rushing to close it. Thank you. Kind Regards, Mark Gajdosik\nI'm not using your trac as a support channel. This was the first time I used it and I doubt I'll use it again. I'm sorry you had a bad experience. From the ticket description I assumed that you're trying to find a way to pass a boolean argument, that's why I took it as a support question. RE the actual issue: docs for call_comamnd clearly state: \"command options that take no arguments are passed as keywords with True or False\". This works fine, until the arg is placed inside a group. The docs don't mention this. Good catch, I can reproduce this issue for a required mutually exclusive groups with boolean arguments. We should probably change â€‹preparing boolean arguments before passing them to parse_args().\nI'm sorry you had a bad experience. From the ticket description I assumed that you're trying to find a way to pass a boolean argument, that's why I took it as a support question. I'm to blame for that as I failed to describe the issue clearly. Thank you for reopening the ticket and for your initial suggestion, which helped me around the issue.",
  "created_at": "2020-09-29T14:49:13Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_mutually_exclusive_group_required_const_options (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests)\"]",
  "PASS_TO_PASS": "[\"test_requires_system_checks_false (user_commands.tests.DeprecationTests)\", \"test_requires_system_checks_true (user_commands.tests.DeprecationTests)\", \"test_requires_system_checks_warning (user_commands.tests.DeprecationTests)\", \"test_get_random_secret_key (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests)\", \"test_call_command_no_checks (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests)\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)\", \"test_check_migrations (user_commands.tests.CommandTests)\", \"test_command (user_commands.tests.CommandTests)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests)\", \"test_command_style (user_commands.tests.CommandTests)\", \"BaseCommand.create_parser() passes kwargs to CommandParser.\", \"test_discover_commands_in_eggs (user_commands.tests.CommandTests)\", \"An unknown command raises CommandError\", \"test_find_command_without_PATH (user_commands.tests.CommandTests)\", \"test_language_preserved (user_commands.tests.CommandTests)\", \"test_no_translations_deactivate_translations (user_commands.tests.CommandTests)\", \"test_output_transaction (user_commands.tests.CommandTests)\", \"test_requires_system_checks_empty (user_commands.tests.CommandTests)\", \"test_requires_system_checks_invalid (user_commands.tests.CommandTests)\", \"test_requires_system_checks_specific (user_commands.tests.CommandTests)\", \"test_subparser (user_commands.tests.CommandTests)\", \"test_subparser_dest_args (user_commands.tests.CommandTests)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests)\", \"Exception raised in a command should raise CommandError with\", \"test_disallowed_abbreviated_options (user_commands.tests.CommandRunTests)\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)\", \"test_skip_checks (user_commands.tests.CommandRunTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.658943",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}