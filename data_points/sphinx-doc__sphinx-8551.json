{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8551",
  "base_commit": "57ed10c68057c96491acbd3e62254ccfaf9e3861",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -272,6 +272,8 @@ def make_xref(self, rolename: str, domain: str, target: str,\n         result = super().make_xref(rolename, domain, target,  # type: ignore\n                                    innernode, contnode, env)\n         result['refspecific'] = True\n+        result['py:module'] = env.ref_context.get('py:module')\n+        result['py:class'] = env.ref_context.get('py:class')\n         if target.startswith(('.', '~')):\n             prefix, result['reftarget'] = target[0], target[1:]\n             if prefix == '.':\ndiff --git a/sphinx/util/docfields.py b/sphinx/util/docfields.py\n--- a/sphinx/util/docfields.py\n+++ b/sphinx/util/docfields.py\n@@ -295,6 +295,7 @@ def transform(self, node: nodes.field_list) -> None:\n                         self.directive.domain,\n                         target,\n                         contnode=content[0],\n+                        env=self.directive.state.document.settings.env\n                     )\n                     if _is_single_paragraph(field_body):\n                         paragraph = cast(nodes.paragraph, field_body[0])\n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -774,6 +774,53 @@ def test_pydecoratormethod_signature(app):\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n \n+def test_info_field_list(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param str name: blah blah\\n\"\n+            \"   :param age: blah blah\\n\"\n+            \"   :type age: int\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    print(doctree)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph])]))\n+\n+    # :param str name:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"name\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+    # :param age: + :type age:\n+    assert_node(doctree[3][1][0][0][1][0][1][0],\n+                ([addnodes.literal_strong, \"age\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+\n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n",
  "problem_statement": ":type: and :rtype: gives false ambiguous class lookup warnings\n**Describe the bug**\r\nThe implicit xrefs created by the info fields ``:type:`` and ``:rtype:`` seems to do lookup differently than explicit xref roles. For unqualified names it seems like they search for the name in every (sub)module instead of in the current module and then parent modules.\r\n\r\n**To Reproduce**\r\n```rst\r\n.. py:class:: mod.A\r\n.. py:class:: mod.submod.A\r\n\r\n.. py:function:: f()\r\n\r\n\t- :py:class:`mod.A`\r\n\t- :py:class:`mod.submod.A`\r\n\r\n\t:param mod.A a:\r\n\t:param mod.submod.A b:\r\n\t:rtype: mod.A\r\n\t:rtype: mod.submod.A\r\n\r\n.. py:currentmodule:: mod\r\n\r\n.. py:function:: f()\r\n\r\n\t- :py:class:`A`\r\n\t- :py:class:`mod.A`\r\n\t- :py:class:`mod.submod.A`\r\n\r\n\t:param A a:\r\n\t:param mod.A b:\r\n\t:param mod.submod.A c:\r\n\t:rtype: A\r\n\t:rtype: mod.A\r\n\t:rtype: mod.submod.A\r\n\r\n.. py:currentmodule:: mod.submod\r\n\r\n.. py:function:: f()\r\n\r\n\t- :py:class:`A`\r\n\t- :py:class:`mod.A`\r\n\t- :py:class:`mod.submod.A`\r\n\r\n\t:param A a: BUG: links to mod.A instead of mod.submod.A\r\n\t:param mod.A b:\r\n\t:param mod.submod.A c:\r\n\t:rtype: A\r\n\t:rtype: mod.A\r\n\t:rtype: mod.submod.A\r\n```\r\ngives the warnings\r\n```\r\nindex.rst:28: WARNING: more than one target found for cross-reference 'A': mod.A, mod.submod.A\r\nindex.rst:28: WARNING: more than one target found for cross-reference 'A': mod.A, mod.submod.A\r\nindex.rst:43: WARNING: more than one target found for cross-reference 'A': mod.A, mod.submod.A\r\nindex.rst:43: WARNING: more than one target found for cross-reference 'A': mod.A, mod.submod.A\r\n```\r\nwhich refer to the 4 unqualified type names ``A``.\r\nThe ``:param:`` annotated with ``BUG`` as well as the corresponding ``rtype`` gets resolved to ``mod.A``.\r\n\r\n**Expected behavior**\r\nNo warnings, and the two mentioned types should resolve to ``mod.submod.A``.\r\n\r\n**Environment info**\r\n- Sphinx version: tested both with v3.3 and with master\n",
  "hints_text": "Also facing an issue similar to this.\nThe other side of this issue is that you can also get a silently wrong cross-reference where a warning should have been issued instead: in some module, make a class, and then make one of these cross-references in non-module scope.",
  "created_at": "2020-12-19T09:34:31Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_info_field_list\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_exceptions_module_is_ignored\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_warn_missing_reference\"]",
  "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.056295",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}