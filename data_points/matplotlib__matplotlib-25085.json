{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25085",
  "base_commit": "af8a046c2cc2077cd8f2379e437d18e47941340c",
  "patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -90,6 +90,22 @@ def ignore(self, event):\n         \"\"\"\n         return not self.active\n \n+    def _changed_canvas(self):\n+        \"\"\"\n+        Someone has switched the canvas on us!\n+\n+        This happens if `savefig` needs to save to a format the previous\n+        backend did not support (e.g. saving a figure using an Agg based\n+        backend saved to a vector format).\n+\n+        Returns\n+        -------\n+        bool\n+           True if the canvas has been changed.\n+\n+        \"\"\"\n+        return self.canvas is not self.ax.figure.canvas\n+\n \n class AxesWidget(Widget):\n     \"\"\"\n@@ -1088,7 +1104,7 @@ def __init__(self, ax, labels, actives=None, *, useblit=True,\n \n     def _clear(self, event):\n         \"\"\"Internal event handler to clear the buttons.\"\"\"\n-        if self.ignore(event):\n+        if self.ignore(event) or self._changed_canvas():\n             return\n         self._background = self.canvas.copy_from_bbox(self.ax.bbox)\n         self.ax.draw_artist(self._checks)\n@@ -1700,7 +1716,7 @@ def __init__(self, ax, labels, active=0, activecolor=None, *,\n \n     def _clear(self, event):\n         \"\"\"Internal event handler to clear the buttons.\"\"\"\n-        if self.ignore(event):\n+        if self.ignore(event) or self._changed_canvas():\n             return\n         self._background = self.canvas.copy_from_bbox(self.ax.bbox)\n         self.ax.draw_artist(self._buttons)\n@@ -1971,7 +1987,7 @@ def __init__(self, ax, horizOn=True, vertOn=True, useblit=False,\n \n     def clear(self, event):\n         \"\"\"Internal event handler to clear the cursor.\"\"\"\n-        if self.ignore(event):\n+        if self.ignore(event) or self._changed_canvas():\n             return\n         if self.useblit:\n             self.background = self.canvas.copy_from_bbox(self.ax.bbox)\n@@ -2110,6 +2126,12 @@ def clear(self, event):\n             return\n         if self.useblit:\n             for canvas, info in self._canvas_infos.items():\n+                # someone has switched the canvas on us!  This happens if\n+                # `savefig` needs to save to a format the previous backend did\n+                # not support (e.g. saving a figure using an Agg based backend\n+                # saved to a vector format).\n+                if canvas is not canvas.figure.canvas:\n+                    continue\n                 info[\"background\"] = canvas.copy_from_bbox(canvas.figure.bbox)\n \n     def onmove(self, event):\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1,4 +1,5 @@\n import functools\n+import io\n from unittest import mock\n \n from matplotlib._api.deprecation import MatplotlibDeprecationWarning\n@@ -23,6 +24,45 @@ def ax():\n     return get_ax()\n \n \n+def test_save_blitted_widget_as_pdf():\n+    from matplotlib.widgets import CheckButtons, RadioButtons\n+    from matplotlib.cbook import _get_running_interactive_framework\n+    if _get_running_interactive_framework() not in ['headless', None]:\n+        pytest.xfail(\"Callback exceptions are not raised otherwise.\")\n+\n+    fig, ax = plt.subplots(\n+        nrows=2, ncols=2, figsize=(5, 2), width_ratios=[1, 2]\n+    )\n+    default_rb = RadioButtons(ax[0, 0], ['Apples', 'Oranges'])\n+    styled_rb = RadioButtons(\n+        ax[0, 1], ['Apples', 'Oranges'],\n+        label_props={'color': ['red', 'orange'],\n+                     'fontsize': [16, 20]},\n+        radio_props={'edgecolor': ['red', 'orange'],\n+                     'facecolor': ['mistyrose', 'peachpuff']}\n+    )\n+\n+    default_cb = CheckButtons(ax[1, 0], ['Apples', 'Oranges'],\n+                              actives=[True, True])\n+    styled_cb = CheckButtons(\n+        ax[1, 1], ['Apples', 'Oranges'],\n+        actives=[True, True],\n+        label_props={'color': ['red', 'orange'],\n+                     'fontsize': [16, 20]},\n+        frame_props={'edgecolor': ['red', 'orange'],\n+                     'facecolor': ['mistyrose', 'peachpuff']},\n+        check_props={'color': ['darkred', 'darkorange']}\n+    )\n+\n+    ax[0, 0].set_title('Default')\n+    ax[0, 1].set_title('Stylized')\n+    # force an Agg render\n+    fig.canvas.draw()\n+    # force a pdf save\n+    with io.BytesIO() as result_after:\n+        fig.savefig(result_after, format='pdf')\n+\n+\n @pytest.mark.parametrize('kwargs', [\n     dict(),\n     dict(useblit=True, button=1),\n",
  "problem_statement": "[Bug]: Widget blitting broken when saving as PDF\n### Bug summary\n\nWhen running a test doc build for 3.7.0rc1, I build the PDF, which runs everything with the PDF backend. So either the PDF backend does not correctly mark itself as not supporting blitting, or the blitting is not turned off correctly in the button widgets.\n\n### Code for reproduction\n\n```python\nmake -C doc latexpdf\n```\n\n\n### Actual outcome\n\n```pytb\r\n/home/elliott/code/matplotlib-3.7.x/doc/users/next_whats_new/widget_button_styling.rst:8: WARNING: Exception occurred in plotting widget_button_styling-1\r\n from /home/elliott/code/matplotlib-3.7.x/doc/users/next_whats_new/widget_button_styling.rst:\r\nTraceback (most recent call last):\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/sphinxext/plot_directive.py\", line 615, in render_figures\r\n    figman.canvas.figure.savefig(img.filename(fmt), dpi=dpi)\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/figure.py\", line 3328, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/backend_bases.py\", line 2362, in print_figure\r\n    result = print_method(\r\n             ^^^^^^^^^^^^^\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/backend_bases.py\", line 2228, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n                                                                 ^^^^^\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/backends/backend_pdf.py\", line 2815, in print_pdf\r\n    self.figure.draw(renderer)\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/artist.py\", line 95, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/figure.py\", line 3135, in draw\r\n    DrawEvent(\"draw_event\", self.canvas, renderer)._process()\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/backend_bases.py\", line 1259, in _process\r\n    self.canvas.callbacks.process(self.name, self)\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/cbook/__init__.py\", line 309, in process\r\n    self.exception_handler(exc)\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/cbook/__init__.py\", line 96, in _exception_printer\r\n    raise exc\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/cbook/__init__.py\", line 304, in process\r\n    func(*args, **kwargs)\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/widgets.py\", line 1706, in _clear\r\n    self.ax.draw_artist(self._buttons)\r\n  File \"/home/elliott/code/matplotlib-3.7.x/lib/matplotlib/axes/_base.py\", line 3076, in draw_artist\r\n    a.draw(self.figure.canvas.get_renderer())\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAttributeError: 'FigureCanvasPdf' object has no attribute 'get_renderer'\r\n```\n\n### Expected outcome\n\nDocs build without warning.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nFedora 37\n\n### Matplotlib Version\n\nv3.7.x\n\n### Matplotlib Backend\n\nPDF\n\n### Python version\n\n3.11.1\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout\n",
  "hints_text": "Further investigation shows that this is not directly about the PDF backend. Rather, it occurs when _changing_ to the PDF backend to save as a `.pdf`. If you start directly with the PDF backend, then the Widget will see that the canvas doesn't support blitting and disable it. So this might affect anything which uses blitting, depending on what they do.\nDefining `get_renderer` like this seems to work:\r\n```patch\r\ndiff --git a/lib/matplotlib/backends/backend_pdf.py b/lib/matplotlib/backends/backend_pdf.py\r\nindex 7bd0afc456..d7adfdf53c 100644\r\n--- a/lib/matplotlib/backends/backend_pdf.py\r\n+++ b/lib/matplotlib/backends/backend_pdf.py\r\n@@ -2796,6 +2796,12 @@ class FigureCanvasPdf(FigureCanvasBase):\r\n     def get_default_filetype(self):\r\n         return 'pdf'\r\n \r\n+    def get_renderer(self):\r\n+        if hasattr(self, '_renderer'):\r\n+            return self._renderer\r\n+        else:\r\n+            raise ValueError('PDF must be saving to get a renderer')\r\n+\r\n     def print_pdf(self, filename, *,\r\n                   bbox_inches_restore=None, metadata=None):\r\n \r\n@@ -2808,12 +2814,15 @@ class FigureCanvasPdf(FigureCanvasBase):\r\n             file = PdfFile(filename, metadata=metadata)\r\n         try:\r\n             file.newPage(width, height)\r\n-            renderer = MixedModeRenderer(\r\n+            self._renderer = MixedModeRenderer(\r\n                 self.figure, width, height, dpi,\r\n                 RendererPdf(file, dpi, height, width),\r\n                 bbox_inches_restore=bbox_inches_restore)\r\n-            self.figure.draw(renderer)\r\n-            renderer.finalize()\r\n+            try:\r\n+                self.figure.draw(self._renderer)\r\n+                self._renderer.finalize()\r\n+            finally:\r\n+                del self._renderer\r\n             if not isinstance(filename, PdfPages):\r\n                 file.finalize()\r\n         finally:\r\n```\r\nNot sure if that's the best fix though.",
  "created_at": "2023-01-25T21:22:06Z",
  "version": "3.6",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_save_blitted_widget_as_pdf\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs3]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-data]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-pixels]\", \"lib/matplotlib/tests/test_widgets.py::test_deprecation_selector_visible_attribute\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[RectangleSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[EllipseSelector]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_add_remove_set\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_ellipse\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_handles\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[vertical-True-kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs3]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_direction\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[span]\", \"lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[rectangle]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_add_state\", \"lib/matplotlib/tests/test_widgets.py::test_tool_line_handle\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_snapping_values_span_selector\", \"lib/matplotlib/tests/test_widgets.py::test_span_selector_snap\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs0]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs1]\", \"lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs2]\", \"lib/matplotlib/tests/test_widgets.py::test_CheckButtons\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[none]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolbar2]\", \"lib/matplotlib/tests/test_widgets.py::test_TextBox[toolmanager]\", \"lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons_props[png]\", \"lib/matplotlib/tests/test_widgets.py::test_radio_button_active_conflict\", \"lib/matplotlib/tests/test_widgets.py::test_radio_buttons_activecolor_change[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_buttons[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_button_props[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_buttons_rectangles[png]\", \"lib/matplotlib/tests/test_widgets.py::test_check_buttons_lines[png]\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid\", \"lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax\", \"lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping\", \"lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical\", \"lib/matplotlib/tests/test_widgets.py::test_slider_reset\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[horizontal]\", \"lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[vertical]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[True]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]\", \"lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-1]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-2]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-3]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-False]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-True]\", \"lib/matplotlib/tests/test_widgets.py::test_polygon_selector_box\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]\", \"lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]\"]",
  "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.817251",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}