{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10899",
  "base_commit": "12cdb8323c1a4018fcc97dc5a0014a0ba7b44593",
  "patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -1062,6 +1062,12 @@ class TfidfTransformer(BaseEstimator, TransformerMixin):\n     sublinear_tf : boolean, default=False\n         Apply sublinear tf scaling, i.e. replace tf with 1 + log(tf).\n \n+    Attributes\n+    ----------\n+    idf_ : array, shape (n_features)\n+        The inverse document frequency (IDF) vector; only defined\n+        if  ``use_idf`` is True.\n+\n     References\n     ----------\n \n@@ -1157,6 +1163,13 @@ def idf_(self):\n         # which means hasattr(self, \"idf_\") is False\n         return np.ravel(self._idf_diag.sum(axis=0))\n \n+    @idf_.setter\n+    def idf_(self, value):\n+        value = np.asarray(value, dtype=np.float64)\n+        n_features = value.shape[0]\n+        self._idf_diag = sp.spdiags(value, diags=0, m=n_features,\n+                                    n=n_features, format='csr')\n+\n \n class TfidfVectorizer(CountVectorizer):\n     \"\"\"Convert a collection of raw documents to a matrix of TF-IDF features.\n@@ -1295,9 +1308,9 @@ class TfidfVectorizer(CountVectorizer):\n     vocabulary_ : dict\n         A mapping of terms to feature indices.\n \n-    idf_ : array, shape = [n_features], or None\n-        The learned idf vector (global term weights)\n-        when ``use_idf`` is set to True, None otherwise.\n+    idf_ : array, shape (n_features)\n+        The inverse document frequency (IDF) vector; only defined\n+        if  ``use_idf`` is True.\n \n     stop_words_ : set\n         Terms that were ignored because they either:\n@@ -1386,6 +1399,16 @@ def sublinear_tf(self, value):\n     def idf_(self):\n         return self._tfidf.idf_\n \n+    @idf_.setter\n+    def idf_(self, value):\n+        self._validate_vocabulary()\n+        if hasattr(self, 'vocabulary_'):\n+            if len(self.vocabulary_) != len(value):\n+                raise ValueError(\"idf length = %d must be equal \"\n+                                 \"to vocabulary size = %d\" %\n+                                 (len(value), len(self.vocabulary)))\n+        self._tfidf.idf_ = value\n+\n     def fit(self, raw_documents, y=None):\n         \"\"\"Learn vocabulary and idf from training set.\n \n",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -942,6 +942,35 @@ def test_pickling_transformer():\n         orig.fit_transform(X).toarray())\n \n \n+def test_transformer_idf_setter():\n+    X = CountVectorizer().fit_transform(JUNK_FOOD_DOCS)\n+    orig = TfidfTransformer().fit(X)\n+    copy = TfidfTransformer()\n+    copy.idf_ = orig.idf_\n+    assert_array_equal(\n+        copy.transform(X).toarray(),\n+        orig.transform(X).toarray())\n+\n+\n+def test_tfidf_vectorizer_setter():\n+    orig = TfidfVectorizer(use_idf=True)\n+    orig.fit(JUNK_FOOD_DOCS)\n+    copy = TfidfVectorizer(vocabulary=orig.vocabulary_, use_idf=True)\n+    copy.idf_ = orig.idf_\n+    assert_array_equal(\n+        copy.transform(JUNK_FOOD_DOCS).toarray(),\n+        orig.transform(JUNK_FOOD_DOCS).toarray())\n+\n+\n+def test_tfidfvectorizer_invalid_idf_attr():\n+    vect = TfidfVectorizer(use_idf=True)\n+    vect.fit(JUNK_FOOD_DOCS)\n+    copy = TfidfVectorizer(vocabulary=vect.vocabulary_, use_idf=True)\n+    expected_idf_len = len(vect.idf_)\n+    invalid_idf = [1.0] * (expected_idf_len + 1)\n+    assert_raises(ValueError, setattr, copy, 'idf_', invalid_idf)\n+\n+\n def test_non_unique_vocab():\n     vocab = ['a', 'b', 'c', 'a', 'a']\n     vect = CountVectorizer(vocabulary=vocab)\n",
  "problem_statement": "Setting idf_ is impossible\n<!-- Instructions For Filing a Bug: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#filing-bugs -->\n#### Context\n\nRather than a bug i guess that would go as a sort of \"enhancement proposition\" ?\n\nI'm currently trying to persist a `TfidfTransformer` by basically saving its parameters in a mongoDB database and then rebuilding it alike. This technique works for `CountVectorizer` but simply blocks for `TfidfTransformer` as there is no way to set `idf_`.\nIs there any actual architectural reason why setting this attributes raise an error ? if yes, do you have an idea for a workaround ? I obviously want to avoid keeping the matrix on which it has been fitted as it would completely mess up the architecture (i believe that the saving/loading process should be separated from the whole treatment/learning process and trying to keep both would mean having to propagate a dirty return)\n#### Steps/Code to Reproduce\n\nfunctioning example on CountVectorizer\n\n```\n#let us say that CountV is the previously built countVectorizer that we want to recreate identically\nfrom sklearn.feature_extraction.text import CountVectorizer \n\ndoc = ['some fake text that is fake to test the vectorizer']\n\nc = CountVectorizer\nc.set_params(**CountV.get_params())\nc.set_params(**{'vocabulary':CountV.vocabulary_})\n#Now let us test if they do the same conversion\nm1 =  CountV.transform(doc)\nm2 = c.transform(doc)\nprint m1.todense().tolist()#just for visibility sake here\nprint m2.todense().tolist()\n#Note : This code does what is expected\n```\n\nThis might not seem very impressive, but dictionnaries can be stored inside of mongoDB databases, which means that you can basically restore the `CountVectoriser` or at least an identical copy of it by simply storing `vocabulary_` and the output of `get_params()` .\n\nNow the incriminated piece of code\n\n```\n#let us say that TFtransformer is the previously computed transformer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nt = TfidfTransformer()\nt.set_params(**TFtransformer.get_params())\n#Now here comes the problem :\n#2 potential solutions\nt.set_params(**{'idf':TFtransformer.idf_})\nt.idf_ = TFtransformer.idf_\n```\n\nI would expect that at least one would work.\nHowever, both return an error.\n- In the first case, it seems logical, as there is no idf/idf_ parameter \n- In the second case, i suppose that encapsulation forbids the direct setting\n\nI think that being able to reproduce a fitted object (even if it is only for non-classifier objects) without having to recompute it at each launch would benefit a lot of applications.\nI'm currently developping a RestAPI that has to do heavy computations on data before feeding it to the vectorizer, having to relearn the whole model with each computing is very slow, and means i have to currently wait up to half an hour for modifications that are sometimes about 1 line of code.\n#### Versions\n\nWindows-10-10.0.10586\n('Python', '2.7.11 |Continuum Analytics, Inc.| (default, Feb 16 2016, 09:58:36) [MSC v.1500 64 bit (AMD64)]')\n('NumPy', '1.11.0')\n('SciPy', '0.17.1')\n('Scikit-Learn', '0.17.1')\n\n<!-- Thanks for contributing! -->\n\n",
  "hints_text": "I'd be happy to see a setter for idf_.\r\n\n> I'd be happy to see a setter for idf_.\n\nBut that's not what the TfidfTransformer uses internally. Shouldn't the\nuser be setting the _idf_diag matrix rather? I agree that setting a\nprivate attribute is ugly, so the question is: shouldn't we make it\npublic?\n\nWhat's wrong with providing a setter function that transforms to _idf_diag\r\nappropriately?\r\n\n> > I'd be happy to see a setter for idf_.\n> \n> But that's not what the TfidfTransformer uses internally. Shouldn't the\n> user be setting the _idf_diag matrix rather? I agree that setting a\n> private attribute is ugly, so the question is: shouldn't we make it\n> public?\n\nAs the setter for _idf_diag is defined, this does give me a workaround for my problem. This leads me to two new questions.\n- Would you be interested by a snippet/ipynotebook as an example on how to store the correct attributes for CountVectorizer/TfidfTransformer to be restored ?\n- I am currently unsure whether i would be able to provide a correct setter for idf_, should i keep the issue open for more skilled developpers to see ?\n\nThank you for the quick response\n\n+1 on what @jnothman said\n\nHey, I'd be interested in working on this one.\n\nsure go ahead @manu-chroma :)\n\nSorry for not getting back earlier. \nIn the following code example given by the @Sbelletier :\n\n``` python\n#let us say that CountV is the previously built countVectorizer that we want to recreate identically\nfrom sklearn.feature_extraction.text import CountVectorizer \n\ndoc = ['some fake text that is fake to test the vectorizer']\n\nc = CountVectorizer\nc.set_params(**CountV.get_params())\nc.set_params(**{'vocabulary':CountV.vocabulary_})\n```\n\nCan someone elaborate on how the `set_params funtion` works for both the lines and what are they actually taking as params. I had a look at the docs but still don't get it. Thanks.  \n\nhi @manu-chroma \nso the `get_params()` function returns a dictionary with the parameters of the previously fit CountVectorizer `CountV` (the `**` is kwargs syntax and unpacks a dictionary to function arguments). `set_params()` does the opposite; given a dictionary, set the values of the parameters of the current object to the values in the dictionary. Here's an ipython example of the code above\n\n```\nIn [1]: from sklearn.feature_extraction.text import CountVectorizer\n   ...:\n   ...: doc = ['some fake text that is fake to test the vectorizer']\n   ...:\n\nIn [2]: CountV = CountVectorizer(analyzer=\"char\")\n\nIn [3]: CountV.fit(doc)\nOut[3]:\nCountVectorizer(analyzer='char', binary=False, decode_error=u'strict',\n        dtype=<type 'numpy.int64'>, encoding=u'utf-8', input=u'content',\n        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n        strip_accents=None, token_pattern=u'(?u)\\\\b\\\\w\\\\w+\\\\b',\n        tokenizer=None, vocabulary=None)\n\nIn [4]: CountV.get_params()\nOut[4]:\n{'analyzer': 'char',\n 'binary': False,\n 'decode_error': u'strict',\n 'dtype': numpy.int64,\n 'encoding': u'utf-8',\n 'input': u'content',\n 'lowercase': True,\n 'max_df': 1.0,\n 'max_features': None,\n 'min_df': 1,\n 'ngram_range': (1, 1),\n 'preprocessor': None,\n 'stop_words': None,\n 'strip_accents': None,\n 'token_pattern': u'(?u)\\\\b\\\\w\\\\w+\\\\b',\n 'tokenizer': None,\n 'vocabulary': None}\n\nIn [5]: c = CountVectorizer()\n\nIn [6]: c.get_params()\nOut[6]:\n{'analyzer': u'word', #note that the analyzer is \"word\"\n 'binary': False,\n 'decode_error': u'strict',\n 'dtype': numpy.int64,\n 'encoding': u'utf-8',\n 'input': u'content',\n 'lowercase': True,\n 'max_df': 1.0,\n 'max_features': None,\n 'min_df': 1,\n 'ngram_range': (1, 1),\n 'preprocessor': None,\n 'stop_words': None,\n 'strip_accents': None,\n 'token_pattern': u'(?u)\\\\b\\\\w\\\\w+\\\\b',\n 'tokenizer': None,\n 'vocabulary': None} #note that vocabulary is none\n\nIn [7]: c.set_params(**CountV.get_params())\nOut[7]:\nCountVectorizer(analyzer='char', binary=False, decode_error=u'strict',\n        dtype=<type 'numpy.int64'>, encoding=u'utf-8', input=u'content',\n        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n        strip_accents=None, token_pattern=u'(?u)\\\\b\\\\w\\\\w+\\\\b',\n        tokenizer=None, vocabulary=None) #note that vocabulary is none\n\nIn [8]: c.set_params(**{'vocabulary':CountV.vocabulary_})\nOut[8]:\nCountVectorizer(analyzer='char', binary=False, decode_error=u'strict',\n        dtype=<type 'numpy.int64'>, encoding=u'utf-8', input=u'content',\n        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n        strip_accents=None, token_pattern=u'(?u)\\\\b\\\\w\\\\w+\\\\b',\n        tokenizer=None,\n        vocabulary={u'a': 1, u' ': 0, u'c': 2, u'e': 3, u'f': 4, u'i': 6, u'h': 5, u'k': 7, u'm': 8, u'o': 9, u's': 11, u'r': 10, u't': 12, u'v': 13, u'x': 14, u'z': 15})\n```\n\nNotice how in `CountV` the value of `analyzer` is `char` and in `c` the value of `analyzer` is `word`. `c.set_params(**CountV.get_params())` sets the parameters of `c` to those of `CountV`, and that the `analyzer` is accordingly changed to `char`.\n\nDoing the same thing to `vocabulary`, you can see that running `c.set_params(**{'vocabulary':CountV.vocabulary_})` sets `c` to have the vocabulary of the previously fit `CountVectorizer` (`CountV`), despite it not being fit before (thus having a `vocabulary` value of `None` previously).\n\nhey @nelson-liu, thanks so much for explaining. I didn't know about `kwargs syntax`before.\n\nSo essentially, a new setter function would be added to class `TfidfVectorizer` to alter the parameter `idf_` ? Want to make things clearer for myself before I code. Thanks.\n\nI looked through this, and it isn't really possible to add a setter for idf_ that updates _idf_diag @manu-chroma @nelson-liu @amueller @jnothman. The reason being when we set _idf_diag we use n_features which comes from X in the fit function text.py:1018. So we would have to keep track of n_features, add it to the setter, or we could move over to setting _idf_diag directly as @GaelVaroquaux suggested. I would suggest we directly set _idf_diag since we aren't really keeping the state necessary for idf_ but that's just my humble opinion. *Note when we get idf_ we are actually deriving it from _idf_diag text.py:1069\nBelow is a test that I used to start out the code.\n\n``` python\ndef test_copy_idf__tf():\n    counts = [[3, 0, 1],\n              [2, 0, 0],\n              [3, 0, 0],\n              [4, 0, 0],\n              [3, 2, 0],\n              [3, 0, 2]]\n    t1 = TfidfTransformer()\n    t2 = TfidfTransformer()\n    t1.fit_transform(counts)\n    t2.set_params(**t1.get_params())\n    #t2.set_params(**{'idf':t1.idf_})\n    t2.idf_ = t1.idf_\n```\n\nSurely the number of features is already present in the value of _idf_diag?",
  "created_at": "2018-04-01T02:58:12Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/feature_extraction/tests/test_text.py::test_transformer_idf_setter\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidf_vectorizer_setter\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidfvectorizer_invalid_idf_attr\"]",
  "PASS_TO_PASS": "[\"sklearn/feature_extraction/tests/test_text.py::test_strip_accents\", \"sklearn/feature_extraction/tests/test_text.py::test_to_ascii\", \"sklearn/feature_extraction/tests/test_text.py::test_word_analyzer_unigrams\", \"sklearn/feature_extraction/tests/test_text.py::test_word_analyzer_unigrams_and_bigrams\", \"sklearn/feature_extraction/tests/test_text.py::test_unicode_decode_error\", \"sklearn/feature_extraction/tests/test_text.py::test_char_ngram_analyzer\", \"sklearn/feature_extraction/tests/test_text.py::test_char_wb_ngram_analyzer\", \"sklearn/feature_extraction/tests/test_text.py::test_word_ngram_analyzer\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_custom_vocabulary\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_custom_vocabulary_pipeline\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_custom_vocabulary_repeated_indeces\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_custom_vocabulary_gap_index\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_stop_words\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_empty_vocabulary\", \"sklearn/feature_extraction/tests/test_text.py::test_fit_countvectorizer_twice\", \"sklearn/feature_extraction/tests/test_text.py::test_tf_idf_smoothing\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidf_no_smoothing\", \"sklearn/feature_extraction/tests/test_text.py::test_sublinear_tf\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidf_vectorizer_setters\", \"sklearn/feature_extraction/tests/test_text.py::test_hashing_vectorizer\", \"sklearn/feature_extraction/tests/test_text.py::test_feature_names\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_max_features\", \"sklearn/feature_extraction/tests/test_text.py::test_count_vectorizer_max_features\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_max_df\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_min_df\", \"sklearn/feature_extraction/tests/test_text.py::test_count_binary_occurrences\", \"sklearn/feature_extraction/tests/test_text.py::test_hashed_binary_occurrences\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_inverse_transform\", \"sklearn/feature_extraction/tests/test_text.py::test_count_vectorizer_pipeline_grid_selection\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_pipeline_grid_selection\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_pipeline_cross_validation\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_unicode\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidf_vectorizer_with_fixed_vocabulary\", \"sklearn/feature_extraction/tests/test_text.py::test_pickling_vectorizer\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_vocab_sets_when_pickling\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_vocab_dicts_when_pickling\", \"sklearn/feature_extraction/tests/test_text.py::test_stop_words_removal\", \"sklearn/feature_extraction/tests/test_text.py::test_pickling_transformer\", \"sklearn/feature_extraction/tests/test_text.py::test_non_unique_vocab\", \"sklearn/feature_extraction/tests/test_text.py::test_hashingvectorizer_nan_in_docs\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidfvectorizer_binary\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidfvectorizer_export_idf\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_vocab_clone\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_string_object_as_input\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizers_invalid_ngram_range[vec0]\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizers_invalid_ngram_range[vec1]\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizers_invalid_ngram_range[vec2]\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.955991",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}