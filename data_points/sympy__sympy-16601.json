{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16601",
  "base_commit": "d474418cf4475139d66da7d474012f366d74b628",
  "patch": "diff --git a/sympy/geometry/parabola.py b/sympy/geometry/parabola.py\n--- a/sympy/geometry/parabola.py\n+++ b/sympy/geometry/parabola.py\n@@ -14,7 +14,7 @@\n from sympy.geometry.point import Point, Point2D\n from sympy.geometry.line import Line, Line2D, Ray2D, Segment2D, LinearEntity3D\n from sympy.geometry.ellipse import Ellipse\n-\n+from sympy.functions import sign\n \n class Parabola(GeometrySet):\n     \"\"\"A parabolic GeometryEntity.\n@@ -368,20 +368,13 @@ def p_parameter(self):\n         -4\n \n         \"\"\"\n-        if (self.axis_of_symmetry.slope == 0):\n-            x = -(self.directrix.coefficients[2])\n-            if (x < self.focus.args[0]):\n-                p = self.focal_length\n-            else:\n-                p = -self.focal_length\n+        if self.axis_of_symmetry.slope == 0:\n+            x = self.directrix.coefficients[2]\n+            p = sign(self.focus.args[0] + x)\n         else:\n-            y = -(self.directrix.coefficients[2])\n-            if (y > self.focus.args[1]):\n-                p = -self.focal_length\n-            else:\n-                p = self.focal_length\n-\n-        return p\n+            y = self.directrix.coefficients[2]\n+            p = sign(self.focus.args[1] + y)\n+        return p * self.focal_length\n \n     @property\n     def vertex(self):\n",
  "test_patch": "diff --git a/sympy/geometry/tests/test_parabola.py b/sympy/geometry/tests/test_parabola.py\n--- a/sympy/geometry/tests/test_parabola.py\n+++ b/sympy/geometry/tests/test_parabola.py\n@@ -1,18 +1,22 @@\n from sympy import Rational, oo, sqrt, S\n from sympy import Line, Point, Point2D, Parabola, Segment2D, Ray2D\n-from sympy import Circle, Ellipse\n+from sympy import Circle, Ellipse, symbols, sign\n from sympy.utilities.pytest import raises\n \n \n def test_parabola_geom():\n+    a, b = symbols('a b')\n     p1 = Point(0, 0)\n     p2 = Point(3, 7)\n     p3 = Point(0, 4)\n     p4 = Point(6, 0)\n+    p5 = Point(a, a)\n     d1 = Line(Point(4, 0), Point(4, 9))\n     d2 = Line(Point(7, 6), Point(3, 6))\n     d3 = Line(Point(4, 0), slope=oo)\n     d4 = Line(Point(7, 6), slope=0)\n+    d5 = Line(Point(b, a), slope=oo)\n+    d6 = Line(Point(a, b), slope=0)\n \n     half = Rational(1, 2)\n \n@@ -25,6 +29,8 @@ def test_parabola_geom():\n     pa7 = Parabola(p2, d1)\n     pa8 = Parabola(p4, d1)\n     pa9 = Parabola(p4, d3)\n+    pa10 = Parabola(p5, d5)\n+    pa11 = Parabola(p5, d6)\n \n     raises(ValueError, lambda:\n            Parabola(Point(7, 8, 9), Line(Point(6, 7), Point(7, 7))))\n@@ -62,6 +68,9 @@ def test_parabola_geom():\n     assert pa8.p_parameter == pa9.p_parameter\n     assert pa8.vertex == pa9.vertex\n     assert pa8.equation() == pa9.equation()\n+    assert pa10.focal_length == pa11.focal_length == sqrt((a - b) ** 2) / 2 # if a, b real == abs(a - b)/2\n+    assert pa11.vertex == Point(*pa10.vertex[::-1]) == Point(a,\n+                            a - sqrt((a - b)**2)*sign(a - b)/2) # change axis x->y, y->x on pa10\n \n \n def test_parabola_intersection():\n",
  "problem_statement": "Parabola vertex can not be determined if Parabola is declared symbolically.\n```\r\n>>> from sympy import *\r\n>>> a = symbols('a')\r\n>>> l = Line((-a, 0), slope=oo)\r\n>>> p = Parabola((a, 0), l)\r\n>>> p.vertex\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"sympy/geometry/parabola.py\", line 412, in vertex\r\n    vertex = Point(focus.args[0] - self.p_parameter, focus.args[1])\r\n  File \"sympy/geometry/parabola.py\", line 374, in p_parameter\r\n    if (x < self.focus.args[0]):\r\n  File \"sympy/core/relational.py\", line 229, in __nonzero__\r\n    raise TypeError(\"cannot determine truth value of Relational\")\r\nTypeError: cannot determine truth value of Relational\r\n```\n",
  "hints_text": "",
  "created_at": "2019-04-08T15:16:39Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_parabola_geom\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.108924",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}