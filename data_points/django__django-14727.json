{
  "repo": "django/django",
  "instance_id": "django__django-14727",
  "base_commit": "7afca03c4058c25f2e1cec8d0b07c2157c93e831",
  "patch": "diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -140,7 +140,16 @@ def handle(self, *args, **options):\n                 except KeyError:\n                     raise CommandError(\"Cannot find a migration matching '%s' from app '%s'.\" % (\n                         migration_name, app_label))\n-                targets = [(app_label, migration.name)]\n+                target = (app_label, migration.name)\n+                # Partially applied squashed migrations are not included in the\n+                # graph, use the last replacement instead.\n+                if (\n+                    target not in executor.loader.graph.nodes and\n+                    target in executor.loader.replacements\n+                ):\n+                    incomplete_migration = executor.loader.replacements[target]\n+                    target = incomplete_migration.replaces[-1]\n+                targets = [target]\n             target_app_labels_only = False\n         elif options['app_label']:\n             targets = [key for key in executor.loader.graph.leaf_nodes() if key[0] == app_label]\ndiff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -32,7 +32,7 @@ def handle(self, *args, **options):\n         # Get the database we're operating from\n         connection = connections[options['database']]\n \n-        # Load up an loader to get all the migration data, but don't replace\n+        # Load up a loader to get all the migration data, but don't replace\n         # migrations.\n         loader = MigrationLoader(connection, replace_migrations=False)\n \ndiff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -149,7 +149,10 @@ def get_migration_by_prefix(self, app_label, name_prefix):\n                 \"There is more than one migration for '%s' with the prefix '%s'\" % (app_label, name_prefix)\n             )\n         elif not results:\n-            raise KeyError(\"There no migrations for '%s' with the prefix '%s'\" % (app_label, name_prefix))\n+            raise KeyError(\n+                f\"There is no migration for '{app_label}' with the prefix \"\n+                f\"'{name_prefix}'\"\n+            )\n         else:\n             return self.disk_migrations[results[0]]\n \n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -951,6 +951,34 @@ def test_migrate_record_squashed(self):\n         )\n         # No changes were actually applied so there is nothing to rollback\n \n+    def test_migrate_partially_applied_squashed_migration(self):\n+        \"\"\"\n+        Migrating to a squashed migration specified by name should succeed\n+        even if it is partially applied.\n+        \"\"\"\n+        with self.temporary_migration_module(module='migrations.test_migrations'):\n+            recorder = MigrationRecorder(connection)\n+            try:\n+                call_command('migrate', 'migrations', '0001_initial', verbosity=0)\n+                call_command(\n+                    'squashmigrations',\n+                    'migrations',\n+                    '0002',\n+                    interactive=False,\n+                    verbosity=0,\n+                )\n+                call_command(\n+                    'migrate',\n+                    'migrations',\n+                    '0001_squashed_0002_second',\n+                    verbosity=0,\n+                )\n+                applied_migrations = recorder.applied_migrations()\n+                self.assertIn(('migrations', '0002_second'), applied_migrations)\n+            finally:\n+                # Unmigrate everything.\n+                call_command('migrate', 'migrations', 'zero', verbosity=0)\n+\n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n     def test_migrate_inconsistent_history(self):\n         \"\"\"\ndiff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -179,9 +179,11 @@ def test_name_match(self):\n             migration_loader.get_migration_by_prefix(\"migrations\", \"0001\").name,\n             \"0001_initial\",\n         )\n-        with self.assertRaises(AmbiguityError):\n+        msg = \"There is more than one migration for 'migrations' with the prefix '0'\"\n+        with self.assertRaisesMessage(AmbiguityError, msg):\n             migration_loader.get_migration_by_prefix(\"migrations\", \"0\")\n-        with self.assertRaises(KeyError):\n+        msg = \"There is no migration for 'migrations' with the prefix 'blarg'\"\n+        with self.assertRaisesMessage(KeyError, msg):\n             migration_loader.get_migration_by_prefix(\"migrations\", \"blarg\")\n \n     def test_load_import_error(self):\n@@ -297,7 +299,7 @@ def num_nodes():\n         loader.build_graph()\n         self.assertEqual(num_nodes(), 3)\n \n-        # Starting at 5 to 7 we are passed the squashed migrations\n+        # Starting at 5 to 7 we are past the squashed migrations.\n         self.record_applied(recorder, 'migrations', '5_auto')\n         loader.build_graph()\n         self.assertEqual(num_nodes(), 2)\n",
  "problem_statement": "Naming an incompletely applied squashed migration as a migration target fails with bare NodeNotFoundError\nDescription\n\t\nIn Line 205-208 in django/db/migrations/loader.py replacement migrations (created with squash) are checked if they can be applied. If any of the to be replaced migrations isn't already applied the replacement migration is not added to the nodes list.\nThis leads to the fact that if some of the migrations are removed or not completely applied before the squash is added and there is a dependency on the replacement migration, the user gets a 'NodeNotFoundError' where the replacement migration that is not being applied because of line 206 is the missing one.\nThis is very confusing to the user, raising a warning in line 208 would inform the user that the squashed migration can not be applied because not all the 'child' migrations are applied. \nHad to debug into that to figure that out.\n",
  "hints_text": "Somewhat similar to #23556, I think we can raise a more informative NodeNotFoundError. Should have a patch soon, just need to toy with whether backward migrations are also a problem.\n​PR\nOn the PR Mariusz demonstrated several examples having to do with this ticket's description where the error messages are sufficiently informative. However, I think my test case is related to the original poster's scenario (although it is hard to be certain), and shows Django raising an improvable NodeNotFoundError. Glad to give it another look, though, if you think I'm misreading the original poster's use case. (To that end, Julian, I would be grateful if you would be able to take a look at my suggested patch.)\nAfter Mariusz helpfully enumerated scenarios where the current messaging is sufficient, we found really only a single case with an improvable NodeNotFoundError, and I agree it would be better to just fix the failure point than invest energy in a patch changing the exception message: ​New PR",
  "created_at": "2021-08-02T15:15:17Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"Tests prefix name matching\", \"Migrating to a squashed migration specified by name should succeed\"]",
  "PASS_TO_PASS": "[\"Tests marking migrations as applied/unapplied.\", \"MigrationLoader reraises ImportErrors caused by \\\"bad magic number\\\" pyc\", \"To support frozen environments, MigrationLoader loads .pyc migrations.\", \"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"squashmigrations doesn't accept a starting migration after the ending migration.\", \"squashmigrations optimizes operations.\", \"squashmigrations squashes migrations.\", \"squashmigrations accepts a starting migration.\", \"squashmigrations --no-optimize doesn't optimize operations.\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations respects --dry-run option when fixing migration\", \"`makemigrations --merge --dry-run` writes the merge migration file to\", \"test_makemigrations_auto_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations prompts the user when adding auto_now_add to an existing\", \"makemigrations --check should exit with a non-zero status when\", \"makemigrations exits if it detects a conflict.\", \"The history consistency checks in makemigrations respect\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations raises a nice error when migrations are disabled for an\", \"`makemigrations --dry-run` should not ask for defaults.\", \"Allow `makemigrations --dry-run` to output the migrations file to\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations properly constructs an empty migration.\", \"makemigrations exits if no app is specified with 'empty' mode.\", \"makemigrations properly merges the conflicting migrations with --noinput.\", \"makemigrations should raise InconsistentMigrationHistory exception if\", \"test_makemigrations_inconsistent_history_db_failure (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations enters interactive mode and merges properly.\", \"The user is prompted to merge by default if there are conflicts and\", \"makemigrations enters and exits interactive mode properly.\", \"makemigrations --merge does not output any operations from apps that\", \"makemigrations exits if in merge mode with no conflicts.\", \"makemigrations should print the relative paths to the migrations unless\", \"makemigrations prints the absolute path if os.path.relpath() raises a\", \"makemigrations announces the migration at the default verbosity level.\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations creates migrations when specifying a custom location\", \"makemigrations should detect initial is needed on empty migration\", \"makemigrations exits when there are no changes to an app.\", \"makemigrations exits when there are no changes and no apps are specified.\", \"makemigrations fails to merge migrations with no common ancestor.\", \"Migration directories without an __init__.py file are allowed.\", \"makemigrations adds and removes a possible field rename in\", \"makemigrations adds and removes a possible model rename in\", \"Non-interactive makemigrations fails when a default is missing on a\", \"makemigrations should recognize number-only migrations (0001.py).\", \"makemigrations does not create a merge for an unspecified app even if\", \"makemigrations does not raise a CommandError when an unspecified app\", \"makemigrations --name generate a custom migration name.\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_check_consistent_history (migrations.test_loader.LoaderTests)\", \"MigrationLoader.check_consistent_history() should ignore unapplied\", \"If a MIGRATION_MODULES override points to a missing module, the error\", \"Makes sure the '__first__' migrations build correctly.\", \"Files prefixed with underscore, tilde, or dot aren't loaded.\", \"Makes sure the loader can load the migrations for the test apps,\", \"test_load_empty_dir (migrations.test_loader.LoaderTests)\", \"test_load_import_error (migrations.test_loader.LoaderTests)\", \"test_load_module_file (migrations.test_loader.LoaderTests)\", \"Makes sure the loader can load migrations with a dependency on an unmigrated app.\", \"Migration directories without an __init__.py file are ignored.\", \"To support frozen environments, MigrationLoader loads migrations from\", \"Tests loading a squashed migration\", \"Tests loading a complex set of squashed migrations\", \"test_loading_squashed_complex_multi_apps (migrations.test_loader.LoaderTests)\", \"test_loading_squashed_complex_multi_apps_partially_applied (migrations.test_loader.LoaderTests)\", \"Tests loading a complex but erroneous set of squashed migrations\", \"Tests loading a squashed migration with a new migration referencing it\", \"Undefined MIGRATION_MODULES implies default migration module.\", \"MIGRATION_MODULES allows disabling of migrations for a particular app.\", \"_generate_plan() doesn't readd migrations already in the plan (#29180).\", \"Makes sure the loader uses Migration.run_before.\", \"test_ambiguous_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"Tests basic usage of the migrate command.\", \"test_migrate_check (migrations.test_commands.MigrateTests)\", \"test_migrate_check_plan (migrations.test_commands.MigrateTests)\", \"migrate exits if it detects a conflict.\", \"--fake-initial only works if all tables created in the initial\", \"test_migrate_fake_initial_case_insensitive (migrations.test_commands.MigrateTests)\", \"Split initial migrations can be faked with --fake-initial.\", \"Running migrate with some migrations applied before their dependencies\", \"`Migration.initial = False` skips fake-initial detection.\", \"test_migrate_not_reflected_changes (migrations.test_commands.MigrateTests)\", \"Tests migrate --plan output.\", \"Running a single squashed migration should record all of the original\", \"Running migrate for a squashed migration should record as run\", \"Running migrate --run-syncdb with an app_label only creates tables for\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"For an app without migrations, editor.execute() is used for executing\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_migrations_no_operations (migrations.test_commands.MigrateTests)\", \"Assuming you have 3 apps, `A`, `B`, and `C`, such that:\", \"showmigrations --list  displays migrations and whether or not they're\", \"test_showmigrations_list_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"Tests --plan output of showmigrations command\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"`showmigrations --plan app_label` output with multiple app_labels.\", \"Tests --plan output of showmigrations command without migrations\", \"`showmigrations --plan app_label` output with a single app_label.\", \"Tests --plan output of showmigrations command with squashed migrations.\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_ambiguous_prefix_squashed_migrations (migrations.test_commands.MigrateTests)\", \"sqlmigrate outputs reverse looking SQL.\", \"Transaction wrappers aren't shown for non-atomic migrations.\", \"Transaction wrappers aren't shown for databases that don't support\", \"sqlmigrate outputs forward looking SQL.\", \"test_sqlmigrate_replaced_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_squashed_migration (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.701196",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}