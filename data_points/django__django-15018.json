{
  "repo": "django/django",
  "instance_id": "django__django-15018",
  "base_commit": "1feb55d60736011ee94fbff9ba0c1c25acfd0b14",
  "patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -149,6 +149,12 @@ def get_actions(parser):\n             opt.dest in options and\n             (opt.required or opt in mutually_exclusive_required_options)\n         ):\n+            opt_dest_count = sum(v == opt.dest for v in opt_mapping.values())\n+            if opt_dest_count > 1:\n+                raise TypeError(\n+                    f'Cannot pass the dest {opt.dest!r} that matches multiple '\n+                    f'arguments via **options.'\n+                )\n             parse_args.append(min(opt.option_strings))\n             if isinstance(opt, (_AppendConstAction, _CountAction, _StoreConstAction)):\n                 continue\n",
  "test_patch": "diff --git a/tests/user_commands/management/commands/mutually_exclusive_required_with_same_dest.py b/tests/user_commands/management/commands/mutually_exclusive_required_with_same_dest.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/user_commands/management/commands/mutually_exclusive_required_with_same_dest.py\n@@ -0,0 +1,13 @@\n+from django.core.management.base import BaseCommand\n+\n+\n+class Command(BaseCommand):\n+    def add_arguments(self, parser):\n+        group = parser.add_mutually_exclusive_group(required=True)\n+        group.add_argument('--for', dest='until', action='store')\n+        group.add_argument('--until', action='store')\n+\n+    def handle(self, *args, **options):\n+        for option, value in options.items():\n+            if value is not None:\n+                self.stdout.write('%s=%s' % (option, value))\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -274,6 +274,41 @@ def test_mutually_exclusive_group_required_const_options(self):\n                 )\n                 self.assertIn(expected_output, out.getvalue())\n \n+    def test_mutually_exclusive_group_required_with_same_dest_options(self):\n+        tests = [\n+            {'until': '2'},\n+            {'for': '1', 'until': '2'},\n+        ]\n+        msg = (\n+            \"Cannot pass the dest 'until' that matches multiple arguments via \"\n+            \"**options.\"\n+        )\n+        for options in tests:\n+            with self.subTest(options=options):\n+                with self.assertRaisesMessage(TypeError, msg):\n+                    management.call_command(\n+                        'mutually_exclusive_required_with_same_dest',\n+                        **options,\n+                    )\n+\n+    def test_mutually_exclusive_group_required_with_same_dest_args(self):\n+        tests = [\n+            ('--until=1',),\n+            ('--until', 1),\n+            ('--for=1',),\n+            ('--for', 1),\n+        ]\n+        for args in tests:\n+            out = StringIO()\n+            with self.subTest(options=args):\n+                management.call_command(\n+                    'mutually_exclusive_required_with_same_dest',\n+                    *args,\n+                    stdout=out,\n+                )\n+                output = out.getvalue()\n+                self.assertIn('until=1', output)\n+\n     def test_required_list_option(self):\n         tests = [\n             (('--foo-list', [1, 2]), {}),\n",
  "problem_statement": "call_command() fails when required mutually exclusive arguments use the same `dest`.\nDescription\n\t\nI have a command which accepts two different ways to specify a time -- either as a timestamp or as a duration in the future:\npause (--for duration | --until time)\nclass Command(BaseCommand):\n\tdef add_arguments(self, parser) -> None:\n\t\tgroup = parser.add_mutually_exclusive_group(required=True)\n\t\tgroup.add_argument('--for', dest='until', action='store', type=parse_duration_to_time)\n\t\tgroup.add_argument('--until', action='store', type=parse_time)\n\tdef handle(self, until: datetime, **_):\n\t\tpass\nThis works fine on the command line, however there doesn't seem to be a way to make this work through call_command. Specifically there are two sides to the failure:\nwhile I can provide an until value (as a string, which is processed by parse_time) there is no mechanism to pass a for value if that's how I want to spell the input\nthe for value is always required and attempts to parse the (string) until value passed, which then errors since the input formats are very different\n",
  "hints_text": "Thanks for the report. The following calls work as expected for me : management.call_command('pause', '--until=1') management.call_command('pause', '--until', '1') management.call_command('pause', '--for=1') management.call_command('pause', '--for', '1') however I confirmed an issue when passing arguments in keyword arguments: management.call_command('pause', until='1') management.call_command('pause', **{'for': '1'}) # Using \"call_command('pause', for='1')\" raises SyntaxError This is caused by using dest for mapping **options to arguments, see ​call_command().\nI can create a patch to fix the two above-mentioned issues but using the command with both options together: management.call_command('pause', **{'for': '1', 'util': '1'}) won't raise an error because both options use the same dest. I will investigate it more. I don't know do we have to support passing both dest and arg name as keyword arguments? in the example of this ticket, if we call management.call_command('pause', until='1'), it should be considered as until arg or for (because dest of for is until as well)\nAh, interesting, I wasn't aware that those other spellings worked! I'd be happy to switch to using those spellings instead (I've confirmed they work for my original case). Perhaps just documenting this limitation (and the fact that those spellings work as alternatives) and/or improving the related error messages could be a way to go here?\nReplying to Hasan Ramezani: I don't know do we have to support passing both dest and arg name as keyword arguments? in the example of this ticket, if we call management.call_command('pause', until='1'), it should be considered as until arg or for (because dest of for is until as well) We should support option names as ​documented: ** options named options accepted on the command-line. so management.call_command('pause', until='1') should work the same as calling pause --until 1 management.call_command('pause', **{'for': '1'}) should work the same as calling pause --for 1 management.call_command('pause', **{'for': '1', 'until': '1'}) should work the same as calling pause --for 1 --until 1 and raise an exception\nReplying to Mariusz Felisiak: I am not sure about your second example: management.call_command('pause', **{'for': '1'}) should work the same as calling pause --for 1 Based on the documentation, it seems we have to pass dest as keyword argument name when we define dest for arguments. Some command options have different names when using call_command() instead of django-admin or manage.py. For example, django-admin createsuperuser --no-input translates to call_command('createsuperuser', interactive=False). To find what keyword argument name to use for call_command(), check the command’s source code for the dest argument passed to parser.add_argument(). Also, when Django ​adds required arguments in call command, it search for dest in options.\nYou're right, sorry, I missed \"... check the command’s source code for the dest argument passed to parser.add_argument().\". In that case I would raise an error that passing dest with multiple arguments via **options is not supported.",
  "created_at": "2021-10-22T14:41:17Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_mutually_exclusive_group_required_with_same_dest_options (user_commands.tests.CommandTests)\"]",
  "PASS_TO_PASS": "[\"test_get_random_secret_key (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests)\", \"By default, call_command should not trigger the check framework, unless\", \"When passing the long option name to call_command, the available option\", \"It should be possible to pass non-string arguments to call_command.\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)\", \"test_check_migrations (user_commands.tests.CommandTests)\", \"test_command (user_commands.tests.CommandTests)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests)\", \"test_command_style (user_commands.tests.CommandTests)\", \"BaseCommand.create_parser() passes kwargs to CommandParser.\", \"Management commands can also be loaded from Python eggs.\", \"An unknown command raises CommandError\", \"find_command should still work when the PATH environment variable\", \"test_language_preserved (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_const_options (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_with_same_dest_args (user_commands.tests.CommandTests)\", \"When the Command handle method is decorated with @no_translations,\", \"test_output_transaction (user_commands.tests.CommandTests)\", \"test_outputwrapper_flush (user_commands.tests.CommandTests)\", \"test_required_const_options (user_commands.tests.CommandTests)\", \"test_required_list_option (user_commands.tests.CommandTests)\", \"test_requires_system_checks_empty (user_commands.tests.CommandTests)\", \"test_requires_system_checks_invalid (user_commands.tests.CommandTests)\", \"test_requires_system_checks_specific (user_commands.tests.CommandTests)\", \"test_subparser (user_commands.tests.CommandTests)\", \"test_subparser_dest_args (user_commands.tests.CommandTests)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests)\", \"Exception raised in a command should raise CommandError with\", \"To avoid conflicts with custom options, commands don't allow\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)\", \"test_skip_checks (user_commands.tests.CommandRunTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.711096",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}