{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10428",
  "base_commit": "db127bd9693068a5b187d49d08738e690c5c7d98",
  "patch": "diff --git a/sklearn/utils/estimator_checks.py b/sklearn/utils/estimator_checks.py\n--- a/sklearn/utils/estimator_checks.py\n+++ b/sklearn/utils/estimator_checks.py\n@@ -226,6 +226,7 @@ def _yield_all_checks(name, estimator):\n         for check in _yield_clustering_checks(name, estimator):\n             yield check\n     yield check_fit2d_predict1d\n+    yield check_methods_subset_invariance\n     if name != 'GaussianProcess':  # FIXME\n         # XXX GaussianProcess deprecated in 0.20\n         yield check_fit2d_1sample\n@@ -643,6 +644,58 @@ def check_fit2d_predict1d(name, estimator_orig):\n                                  getattr(estimator, method), X[0])\n \n \n+def _apply_func(func, X):\n+    # apply function on the whole set and on mini batches\n+    result_full = func(X)\n+    n_features = X.shape[1]\n+    result_by_batch = [func(batch.reshape(1, n_features))\n+                       for batch in X]\n+    # func can output tuple (e.g. score_samples)\n+    if type(result_full) == tuple:\n+        result_full = result_full[0]\n+        result_by_batch = list(map(lambda x: x[0], result_by_batch))\n+\n+    return np.ravel(result_full), np.ravel(result_by_batch)\n+\n+\n+@ignore_warnings(category=(DeprecationWarning, FutureWarning))\n+def check_methods_subset_invariance(name, estimator_orig):\n+    # check that method gives invariant results if applied\n+    # on mini bathes or the whole set\n+    rnd = np.random.RandomState(0)\n+    X = 3 * rnd.uniform(size=(20, 3))\n+    X = pairwise_estimator_convert_X(X, estimator_orig)\n+    y = X[:, 0].astype(np.int)\n+    estimator = clone(estimator_orig)\n+    y = multioutput_estimator_convert_y_2d(estimator, y)\n+\n+    if hasattr(estimator, \"n_components\"):\n+        estimator.n_components = 1\n+    if hasattr(estimator, \"n_clusters\"):\n+        estimator.n_clusters = 1\n+\n+    set_random_state(estimator, 1)\n+    estimator.fit(X, y)\n+\n+    for method in [\"predict\", \"transform\", \"decision_function\",\n+                   \"score_samples\", \"predict_proba\"]:\n+\n+        msg = (\"{method} of {name} is not invariant when applied \"\n+               \"to a subset.\").format(method=method, name=name)\n+        # TODO remove cases when corrected\n+        if (name, method) in [('SVC', 'decision_function'),\n+                              ('SparsePCA', 'transform'),\n+                              ('MiniBatchSparsePCA', 'transform'),\n+                              ('BernoulliRBM', 'score_samples')]:\n+            raise SkipTest(msg)\n+\n+        if hasattr(estimator, method):\n+            result_full, result_by_batch = _apply_func(\n+                getattr(estimator, method), X)\n+            assert_allclose(result_full, result_by_batch,\n+                            atol=1e-7, err_msg=msg)\n+\n+\n @ignore_warnings\n def check_fit2d_1sample(name, estimator_orig):\n     # Check that fitting a 2d array with only one sample either works or\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_estimator_checks.py b/sklearn/utils/tests/test_estimator_checks.py\n--- a/sklearn/utils/tests/test_estimator_checks.py\n+++ b/sklearn/utils/tests/test_estimator_checks.py\n@@ -134,6 +134,23 @@ def predict(self, X):\n         return np.ones(X.shape[0])\n \n \n+class NotInvariantPredict(BaseEstimator):\n+    def fit(self, X, y):\n+        # Convert data\n+        X, y = check_X_y(X, y,\n+                         accept_sparse=(\"csr\", \"csc\"),\n+                         multi_output=True,\n+                         y_numeric=True)\n+        return self\n+\n+    def predict(self, X):\n+        # return 1 if X has more than one element else return 0\n+        X = check_array(X)\n+        if X.shape[0] > 1:\n+            return np.ones(X.shape[0])\n+        return np.zeros(X.shape[0])\n+\n+\n def test_check_estimator():\n     # tests that the estimator actually fails on \"bad\" estimators.\n     # not a complete test of all checks, which are very extensive.\n@@ -184,6 +201,13 @@ def test_check_estimator():\n            ' with _ but wrong_attribute added')\n     assert_raises_regex(AssertionError, msg,\n                         check_estimator, SetsWrongAttribute)\n+    # check for invariant method\n+    name = NotInvariantPredict.__name__\n+    method = 'predict'\n+    msg = (\"{method} of {name} is not invariant when applied \"\n+           \"to a subset.\").format(method=method, name=name)\n+    assert_raises_regex(AssertionError, msg,\n+                        check_estimator, NotInvariantPredict)\n     # check for sparse matrix input handling\n     name = NoSparseClassifier.__name__\n     msg = \"Estimator %s doesn't seem to fail gracefully on sparse data\" % name\n",
  "problem_statement": "Add common test to ensure all(predict(X[mask]) == predict(X)[mask])\nI don't think we currently test that estimator predictions/transformations are invariant whether performed in batch or on subsets of a dataset. For some fitted estimator `est`, data `X` and any boolean mask `mask` of length `X.shape[0]`, we need:\r\n\r\n```python\r\nall(est.method(X[mask]) == est.method(X)[mask])\r\n```\r\nwhere `method` is any of {`predict`, `predict_proba`, `decision_function`, `score_samples`, `transform`}. Testing that predictions for individual samples match the predictions across the dataset might be sufficient. This should be added to common tests at `sklearn/utils/estimator_checks.py`\r\n\r\nIndeed, #9174 reports that this is broken for one-vs-one classification. :'(\r\n  \n",
  "hints_text": "Hi, could I take this issue ?\nsure, it seems right up your alley. thanks!\n",
  "created_at": "2018-01-08T21:07:00Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_clones\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimators_unfitted\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_no_attributes_set_in_init\", \"sklearn/utils/tests/test_estimator_checks.py::test_check_estimator_pairwise\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.950571",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}