{
  "repo": "django/django",
  "instance_id": "django__django-14077",
  "base_commit": "562898034f65e17bcdd2d951ac5236a1ec8ea690",
  "patch": "diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -21,6 +21,9 @@ class DatabaseOperations(BaseDatabaseOperations):\n         'DateTimeField': 'TEXT',\n     }\n     explain_prefix = 'EXPLAIN QUERY PLAN'\n+    # List of datatypes to that cannot be extracted with JSON_EXTRACT() on\n+    # SQLite. Use JSON_TYPE() instead.\n+    jsonfield_datatype_values = frozenset(['null', 'false', 'true'])\n \n     def bulk_batch_size(self, fields, objs):\n         \"\"\"\ndiff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -260,15 +260,6 @@ def process_rhs(self, compiler, connection):\n class JSONExact(lookups.Exact):\n     can_use_none_as_rhs = True\n \n-    def process_lhs(self, compiler, connection):\n-        lhs, lhs_params = super().process_lhs(compiler, connection)\n-        if connection.vendor == 'sqlite':\n-            rhs, rhs_params = super().process_rhs(compiler, connection)\n-            if rhs == '%s' and rhs_params == [None]:\n-                # Use JSON_TYPE instead of JSON_EXTRACT for NULLs.\n-                lhs = \"JSON_TYPE(%s, '$')\" % lhs\n-        return lhs, lhs_params\n-\n     def process_rhs(self, compiler, connection):\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n         # Treat None lookup values as null.\n@@ -340,7 +331,13 @@ def as_postgresql(self, compiler, connection):\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n+        datatype_values = ','.join([\n+            repr(datatype) for datatype in connection.ops.jsonfield_datatype_values\n+        ])\n+        return (\n+            \"(CASE WHEN JSON_TYPE(%s, %%s) IN (%s) \"\n+            \"THEN JSON_TYPE(%s, %%s) ELSE JSON_EXTRACT(%s, %%s) END)\"\n+        ) % (lhs, datatype_values, lhs, lhs), (tuple(params) + (json_path,)) * 3\n \n \n class KeyTextTransform(KeyTransform):\n@@ -408,7 +405,10 @@ def resolve_expression_parameter(self, compiler, connection, sql, param):\n                     sql = sql % 'JSON_QUERY'\n                 else:\n                     sql = sql % 'JSON_VALUE'\n-            elif connection.vendor in {'sqlite', 'mysql'}:\n+            elif connection.vendor == 'mysql' or (\n+                connection.vendor == 'sqlite' and\n+                params[0] not in connection.ops.jsonfield_datatype_values\n+            ):\n                 sql = \"JSON_EXTRACT(%s, '$')\"\n         if connection.vendor == 'mysql' and connection.mysql_is_mariadb:\n             sql = 'JSON_UNQUOTE(%s)' % sql\n@@ -416,15 +416,6 @@ def resolve_expression_parameter(self, compiler, connection, sql, param):\n \n \n class KeyTransformExact(JSONExact):\n-    def process_lhs(self, compiler, connection):\n-        lhs, lhs_params = super().process_lhs(compiler, connection)\n-        if connection.vendor == 'sqlite':\n-            rhs, rhs_params = super().process_rhs(compiler, connection)\n-            if rhs == '%s' and rhs_params == ['null']:\n-                lhs, *_ = self.lhs.preprocess_lhs(compiler, connection)\n-                lhs = 'JSON_TYPE(%s, %%s)' % lhs\n-        return lhs, lhs_params\n-\n     def process_rhs(self, compiler, connection):\n         if isinstance(self.rhs, KeyTransform):\n             return super(lookups.Exact, self).process_rhs(compiler, connection)\n@@ -440,7 +431,12 @@ def process_rhs(self, compiler, connection):\n                     func.append(sql % 'JSON_VALUE')\n             rhs = rhs % tuple(func)\n         elif connection.vendor == 'sqlite':\n-            func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+            func = []\n+            for value in rhs_params:\n+                if value in connection.ops.jsonfield_datatype_values:\n+                    func.append('%s')\n+                else:\n+                    func.append(\"JSON_EXTRACT(%s, '$')\")\n             rhs = rhs % tuple(func)\n         return rhs, rhs_params\n \n",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -277,9 +277,10 @@ def setUpTestData(cls):\n                 'i': False,\n                 'j': None,\n                 'k': {'l': 'm'},\n-                'n': [None],\n+                'n': [None, True, False],\n                 'o': '\"quoted\"',\n                 'p': 4.2,\n+                'r': {'s': True, 't': False},\n             },\n             [1, [2]],\n             {'k': True, 'l': False, 'foo': 'bax'},\n@@ -538,7 +539,7 @@ def test_contains(self):\n             ([1, [2]], [self.objs[5]]),\n             ([1], [self.objs[5]]),\n             ([[2]], [self.objs[5]]),\n-            ({'n': [None]}, [self.objs[4]]),\n+            ({'n': [None, True, False]}, [self.objs[4]]),\n             ({'j': None}, [self.objs[4]]),\n         ]\n         for value, expected in tests:\n@@ -779,6 +780,8 @@ def test_key_in(self):\n             ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),\n             ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),\n             ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),\n+            ('value__h__in', [True, 'foo'], [self.objs[4]]),\n+            ('value__i__in', [False, 'foo'], [self.objs[4]]),\n         ]\n         for lookup, value, expected in tests:\n             with self.subTest(lookup=lookup, value=value):\n@@ -797,13 +800,24 @@ def test_key_values(self):\n             ('value__i', False),\n             ('value__j', None),\n             ('value__k', {'l': 'm'}),\n-            ('value__n', [None]),\n+            ('value__n', [None, True, False]),\n             ('value__p', 4.2),\n+            ('value__r', {'s': True, 't': False}),\n         ]\n         for lookup, expected in tests:\n             with self.subTest(lookup=lookup):\n                 self.assertEqual(qs.values_list(lookup, flat=True).get(), expected)\n \n+    def test_key_values_boolean(self):\n+        qs = NullableJSONModel.objects.filter(value__h=True, value__i=False)\n+        tests = [\n+            ('value__h', True),\n+            ('value__i', False),\n+        ]\n+        for lookup, expected in tests:\n+            with self.subTest(lookup=lookup):\n+                self.assertIs(qs.values_list(lookup, flat=True).get(), expected)\n+\n     @skipUnlessDBFeature('supports_json_field_contains')\n     def test_key_contains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n",
  "problem_statement": "QuerySet.values()/values_list() with JSONField returns integers instead of booleans on SQLite.\nDescription\n\t \n\t\t(last modified by Matthew Cornell)\n\t \nI have a model with a JSONField:\nclass PredictionData(models.Model):\n\tdata = models.JSONField()\nOne of the rows contains this dict: {'value': True}.\nI'm querying the model's JSON using 'data__value':\nPredictionData.objects.values_list('data', 'data__value')\nI get correct results for postgres (a boolean) but incorrect for sqlite3 (an int). For this query, sqlite3 wrongly returns:\n({'value': True}, 1)\nwhereas postgres correctly returns\n({'value': True}, True)\nSame behavior with False/0.\nversions:\nPython 3.9.1\nsqlite3.sqlite_version # '3.33.0'\ndjango.version # '3.1.7'\n",
  "hints_text": "I was able to reproduce the issue: from django.db import models class Messages(models.Model): json_field = models.JSONField() >>> from app.models import Messages >>> result = Messages.objects.values_list('json_field', 'json_field__is_true') >>> print(result) <QuerySet [({'is_true': True}, 1)]>\nRegression tests: diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py index 89b78de708..43ca00a4d1 100644 --- a/tests/model_fields/test_jsonfield.py +++ b/tests/model_fields/test_jsonfield.py @@ -804,6 +804,16 @@ class TestQuerying(TestCase): with self.subTest(lookup=lookup): self.assertEqual(qs.values_list(lookup, flat=True).get(), expected) + def test_key_values_boolean(self): + qs = NullableJSONModel.objects.filter(value__h=True) + tests = [ + ('value__h', True), + ('value__i', False), + ] + for lookup, expected in tests: + with self.subTest(lookup=lookup): + self.assertIs(qs.values_list(lookup, flat=True).get(), expected) + @skipUnlessDBFeature('supports_json_field_contains') def test_key_contains(self): self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False) Related to #27481 and #32203.\nIt seems there is not much we can do, the SQL query is correct. Unfortunately JSON_EXTRACT() returns integers for boolean values and it's a ​documented behavior: The json_extract(X,P1,P2,...) extracts and returns one or more values from the well-formed JSON at X. If only a single path P1 is provided, then the SQL datatype of the result is NULL for a JSON null, INTEGER or REAL for a JSON numeric value, an INTEGER zero for a JSON false value, an INTEGER one for a JSON true value, ... There is no way to recognize that we should automatically cast a value to boolean, you can use Cast('json_field__is_true', models.BooleanField()). Changing to a documentation issue.\nOK, there is a way with using JSON_TYPE(), however it's quite complicated (see the ​draft changeset) and model_fields.test_jsonfield.TestQuerying.test_isnull_key_or_none doesn't work with this change. I would prefer to document this caveat in Django < 4.0 and keep this ticket as a cleanup/optimization.\nThank you for looking into this Rohith and Mariusz. For now I will avoid the query feature and just pull the data out once Django has deserialized the field.\nIn c6b0762: Refs #32483 -- Doc'd caveat about using JSONField key transforms to booleans with QuerySet.values()/values_list() on SQLite.\nIn 49970b5: [3.2.x] Refs #32483 -- Doc'd caveat about using JSONField key transforms to booleans with QuerySet.values()/values_list() on SQLite. Backport of c6b07627fcb5d1c8d2082714ef5adb63bee6cf4c from master\nIn 5ab1b7bc: [3.1.x] Refs #32483 -- Doc'd caveat about using JSONField key transforms to booleans with QuerySet.values()/values_list() on SQLite. Backport of c6b07627fcb5d1c8d2082714ef5adb63bee6cf4c from master",
  "created_at": "2021-03-04T11:48:43Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_key_values_boolean (model_fields.test_jsonfield.TestQuerying)\", \"test_lookup_exclude (model_fields.test_jsonfield.TestQuerying)\"]",
  "PASS_TO_PASS": "[\"test_custom_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_decoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_validation_error (model_fields.test_jsonfield.TestValidation)\", \"test_custom_encoder_decoder (model_fields.test_jsonfield.JSONFieldTests)\", \"test_db_check_constraints (model_fields.test_jsonfield.JSONFieldTests)\", \"test_invalid_value (model_fields.test_jsonfield.JSONFieldTests)\", \"test_formfield (model_fields.test_jsonfield.TestFormField)\", \"test_formfield_custom_encoder_decoder (model_fields.test_jsonfield.TestFormField)\", \"test_deconstruct (model_fields.test_jsonfield.TestMethods)\", \"test_deconstruct_custom_encoder_decoder (model_fields.test_jsonfield.TestMethods)\", \"test_get_transforms (model_fields.test_jsonfield.TestMethods)\", \"test_key_transform_text_lookup_mixin_non_key_transform (model_fields.test_jsonfield.TestMethods)\", \"test_dict (model_fields.test_jsonfield.TestSaveLoad)\", \"test_json_null_different_from_sql_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_list (model_fields.test_jsonfield.TestSaveLoad)\", \"test_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_primitives (model_fields.test_jsonfield.TestSaveLoad)\", \"test_realistic_object (model_fields.test_jsonfield.TestSaveLoad)\", \"test_dumping (model_fields.test_jsonfield.TestSerialization)\", \"test_loading (model_fields.test_jsonfield.TestSerialization)\", \"test_xml_serialization (model_fields.test_jsonfield.TestSerialization)\", \"test_contained_by_unsupported (model_fields.test_jsonfield.TestQuerying)\", \"test_contains_unsupported (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_array (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_mixed (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_objs (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_values (model_fields.test_jsonfield.TestQuerying)\", \"test_exact (model_fields.test_jsonfield.TestQuerying)\", \"test_exact_complex (model_fields.test_jsonfield.TestQuerying)\", \"test_expression_wrapper_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_has_any_keys (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_deep (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_list (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_null_value (model_fields.test_jsonfield.TestQuerying)\", \"test_has_keys (model_fields.test_jsonfield.TestQuerying)\", \"test_icontains (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key_or_none (model_fields.test_jsonfield.TestQuerying)\", \"test_join_key_transform_annotation_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_endswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_icontains (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iendswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iexact (model_fields.test_jsonfield.TestQuerying)\", \"test_key_in (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iregex (model_fields.test_jsonfield.TestQuerying)\", \"test_key_istartswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_quoted_string (model_fields.test_jsonfield.TestQuerying)\", \"test_key_regex (model_fields.test_jsonfield.TestQuerying)\", \"test_key_sql_injection_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_startswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_annotation_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_values (model_fields.test_jsonfield.TestQuerying)\", \"test_lookup_exclude_nonexistent_key (model_fields.test_jsonfield.TestQuerying)\", \"test_lookups_with_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_annotation_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_on_subquery (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_and_exact_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_exclude (model_fields.test_jsonfield.TestQuerying)\", \"test_obj_subquery_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_order_grouping_custom_decoder (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_by_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_count (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_list_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_lookup_obj_target (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_obj_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_usage_in_subquery (model_fields.test_jsonfield.TestQuerying)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.680850",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}