{
  "repo": "psf/requests",
  "instance_id": "psf__requests-2873",
  "base_commit": "4e89ba707714e3b58a46c2ed9e220cff8b7f1e6a",
  "patch": "diff --git a/requests/utils.py b/requests/utils.py\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -48,19 +48,26 @@ def dict_to_sequence(d):\n \n \n def super_len(o):\n+    total_length = 0\n+    current_position = 0\n+\n     if hasattr(o, '__len__'):\n-        return len(o)\n+        total_length = len(o)\n+\n+    elif hasattr(o, 'len'):\n+        total_length = o.len\n \n-    if hasattr(o, 'len'):\n-        return o.len\n+    elif hasattr(o, 'getvalue'):\n+        # e.g. BytesIO, cStringIO.StringIO\n+        total_length = len(o.getvalue())\n \n-    if hasattr(o, 'fileno'):\n+    elif hasattr(o, 'fileno'):\n         try:\n             fileno = o.fileno()\n         except io.UnsupportedOperation:\n             pass\n         else:\n-            filesize = os.fstat(fileno).st_size\n+            total_length = os.fstat(fileno).st_size\n \n             # Having used fstat to determine the file length, we need to\n             # confirm that this file was opened up in binary mode.\n@@ -75,11 +82,10 @@ def super_len(o):\n                     FileModeWarning\n                 )\n \n-            return filesize\n+    if hasattr(o, 'tell'):\n+        current_position = o.tell()\n \n-    if hasattr(o, 'getvalue'):\n-        # e.g. BytesIO, cStringIO.StringIO\n-        return len(o.getvalue())\n+    return max(0, total_length - current_position)\n \n \n def get_netrc_auth(url, raise_errors=False):\n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -1351,6 +1351,13 @@ def test_super_len_io_streams(self):\n             assert super_len(\n                 cStringIO.StringIO('but some how, some way...')) == 25\n \n+    def test_super_len_correctly_calculates_len_of_partially_read_file(self):\n+        \"\"\"Ensure that we handle partially consumed file like objects.\"\"\"\n+        from requests.utils import super_len\n+        s = StringIO.StringIO()\n+        s.write('foobarbogus')\n+        assert super_len(s) == 0\n+\n     def test_get_environ_proxies_ip_ranges(self):\n         \"\"\"Ensures that IP addresses are correctly matches with ranges\n         in no_proxy variable.\"\"\"\n@@ -1721,6 +1728,7 @@ def test_urllib3_pool_connection_closed(httpbin):\n     except ConnectionError as e:\n         assert u\"Pool is closed.\" in str(e)\n \n+\n def test_vendor_aliases():\n     from requests.packages import urllib3\n     from requests.packages import chardet\n@@ -1728,5 +1736,6 @@ def test_vendor_aliases():\n     with pytest.raises(ImportError):\n         from requests.packages import webbrowser\n \n+\n if __name__ == '__main__':\n     unittest.main()\n",
  "problem_statement": "Post request hangs in certain cases when body is a StringIO\nThis is related to a report for the [Dropbox Python SDK](https://github.com/dropbox/dropbox-sdk-python/issues/27).\n\nThe following hangs:\n\n```\nfrom StringIO import StringIO\ns = StringIO()\ns.write('hello')  # This is seeked to the end\nrequests.post('http://www.google.com', data=s)  # Hangs: A success would be a 405 error\n```\n\nAfter a cursory look, it looks like the request isn't fully formed so the server doesn't attempt to send a response which leaves the client hanging.\n\nIf we call `s.seek(0)`, this works. A bit more counterintuitively, this also works:\n\n```\nrequests.post('http://www.google.com', data=StringIO())\n```\n\n",
  "hints_text": "Thanks for this report. This comes because we calculate the length of the StringIO, but don't account for where it is seeked to. \n\nAs I see it we have two options: we can either always `seek(0)` before sending a body, or we can use `tell()` to adjust the content length. \n\nOn balance, I think the first is probably better: we already seek(0) in some cases (e.g. auth handlers), so this would be consistent. The downside is that it makes it harder for someone to upload a partial file from disk, though I suspect that's a minor use-case. \n\n@sigmavirus24 thoughts?\n\nThis isn't our fault. If you do this:\n\n```\nimport StringIO\n\ns = StringIO.StringIO()\ns.write('foobarbogus')\nprint(s.read())\n```\n\nYou will get nothing. By writing you've moved the fake pointer. We send what we can. That said, we're sending a content-length of whatever is in the buffer because we look at `s.len` so we're telling the server we're sending something with 11 bytes but sending nothing and that's they the server hangs.\n\nThis is how `StringIO` instances work and misusing them is not a bug in requests because partial file uploads are _very_ desirable. Especially if you're trying to split a file up into multiple requests (e.g., uploading very large objects to S3 or an OpenStack Swift service).\n\nThere's only so far I will go in helping a user not shoot themselves in the foot. The line I draw is in doing the wrong thing for users who actually know what they're doing.\n\n> we already seek(0) in some cases (e.g. auth handlers), so this would be consistent.\n\nI've always argued that that behaviour is wrong too. I still don't like it.\n\nI see now that this applies to file objects as well which makes sense. I would favor using the current location of the stream by inspecting `tell()`. That to me is part of the benefit and contract of using a file-like object.\n\nIt will be more burdensome for developers to get around your forced `seek(0)` than for developers to add a `seek(0)` themselves when needed. If the latter case were more common, I could see an ease-of-use argument. Given that there hasn't been a reported issue before, this scenario is probably rare and reserved for more advanced usage.\n\n@sigmavirus24: Are you opposed to setting the `Content-Length` to `s.len - s.tell()`?\n\nTo be clear, my expectation was that the post request would have an empty body precisely for the reason that you state. The surprise was that the request hung, ie. the `Content-Length` is set to the full size, rather than what's remaining.\n\nNo I'm not opposed to that, but that is not necessarily applicable to every case where you have `s.len`. `super_len`'s logic would need to change drastically. You basically want [`super_len`](https://github.com/kennethreitz/requests/blob/master/requests/utils.py#L50) to look like this:\n\n``` py\ndef super_len(o):\n    total_len = 0\n    current_position = 0\n    if hasattr(o, '__len__'):\n        total_len = len(o)\n\n    elif hasattr(o, 'len'):\n        total_len = o.len\n\n    elif hasattr(o, 'fileno'):\n        try:\n            fileno = o.fileno()\n        except io.UnsupportedOperation:\n            pass\n        else:\n            total_len = os.fstat(fileno).st_size\n\n            # Having used fstat to determine the file length, we need to\n            # confirm that this file was opened up in binary mode.\n            if 'b' not in o.mode:\n                warnings.warn((\n                    \"Requests has determined the content-length for this \"\n                    \"request using the binary size of the file: however, the \"\n                    \"file has been opened in text mode (i.e. without the 'b' \"\n                    \"flag in the mode). This may lead to an incorrect \"\n                    \"content-length. In Requests 3.0, support will be removed \"\n                    \"for files in text mode.\"),\n                    FileModeWarning\n                )\n\n    if hasattr(o, 'tell'):\n        current_position = o.tell()\n\n    return max(0, total_len - current_position)\n\n    if hasattr(o, 'getvalue'):\n        # e.g. BytesIO, cStringIO.StringIO\n        return len(o.getvalue())\n```\n\nThat said, I've not tested that.\n\nAs @braincore stated, it's more the fact that the request will hang due to the mismatch between the `Content-Length` and the actual content that is being sent. The misuse of the `StringIO` API was the reason this was discovered, and not problem to be solved.\n\n> It will be more burdensome for developers to get around your forced seek(0) than for developers to add a seek(0) themselves when needed.\n\nI couldn't agree more, especially due to the rather simple fact that the forced seek would make explicit partial file uploads more difficult than they need to be as mentioned by @sigmavirus24.\n",
  "created_at": "2015-11-11T03:22:53Z",
  "version": "2.8",
  "FAIL_TO_PASS": "[\"test_requests.py::UtilsTestCase::test_super_len_correctly_calculates_len_of_partially_read_file\"]",
  "PASS_TO_PASS": "[\"test_requests.py::TestRequests::test_entry_points\", \"test_requests.py::TestRequests::test_invalid_url\", \"test_requests.py::TestRequests::test_basic_building\", \"test_requests.py::TestRequests::test_path_is_not_double_encoded\", \"test_requests.py::TestRequests::test_params_are_added_before_fragment\", \"test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default\", \"test_requests.py::TestRequests::test_params_bytes_are_encoded\", \"test_requests.py::TestRequests::test_connection_error_invalid_domain\", \"test_requests.py::TestRequests::test_connection_error_invalid_port\", \"test_requests.py::TestRequests::test_LocationParseError\", \"test_requests.py::TestRequests::test_links\", \"test_requests.py::TestRequests::test_cookie_parameters\", \"test_requests.py::TestRequests::test_cookie_as_dict_keeps_len\", \"test_requests.py::TestRequests::test_cookie_as_dict_keeps_items\", \"test_requests.py::TestRequests::test_cookie_as_dict_keys\", \"test_requests.py::TestRequests::test_cookie_as_dict_values\", \"test_requests.py::TestRequests::test_cookie_as_dict_items\", \"test_requests.py::TestRequests::test_response_is_iterable\", \"test_requests.py::TestRequests::test_response_decode_unicode\", \"test_requests.py::TestRequests::test_get_auth_from_url\", \"test_requests.py::TestRequests::test_get_auth_from_url_encoded_spaces\", \"test_requests.py::TestRequests::test_get_auth_from_url_not_encoded_spaces\", \"test_requests.py::TestRequests::test_get_auth_from_url_percent_chars\", \"test_requests.py::TestRequests::test_get_auth_from_url_encoded_hashes\", \"test_requests.py::TestRequests::test_http_error\", \"test_requests.py::TestRequests::test_transport_adapter_ordering\", \"test_requests.py::TestRequests::test_long_authinfo_in_url\", \"test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs\", \"test_requests.py::TestRequests::test_basic_auth_str_is_always_native\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_copy\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"test_requests.py::UtilsTestCase::test_address_in_network\", \"test_requests.py::UtilsTestCase::test_dotted_netmask\", \"test_requests.py::UtilsTestCase::test_get_auth_from_url\", \"test_requests.py::UtilsTestCase::test_get_environ_proxies\", \"test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges\", \"test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int\", \"test_requests.py::UtilsTestCase::test_guess_filename_when_int\", \"test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj\", \"test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name\", \"test_requests.py::UtilsTestCase::test_is_ipv4_address\", \"test_requests.py::UtilsTestCase::test_is_valid_cidr\", \"test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes\", \"test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents\", \"test_requests.py::UtilsTestCase::test_select_proxies\", \"test_requests.py::UtilsTestCase::test_super_len_io_streams\", \"test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int\", \"test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str\", \"test_requests.py::TestMorselToCookieExpires::test_expires_none\", \"test_requests.py::TestMorselToCookieExpires::test_expires_valid_str\", \"test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str\", \"test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int\", \"test_requests.py::TestTimeout::test_connect_timeout\", \"test_requests.py::TestTimeout::test_total_timeout_connect\", \"test_requests.py::test_data_argument_accepts_tuples\", \"test_requests.py::test_prepared_request_empty_copy\", \"test_requests.py::test_prepared_request_no_cookies_copy\", \"test_requests.py::test_prepared_request_complete_copy\", \"test_requests.py::test_prepare_unicode_url\", \"test_requests.py::test_vendor_aliases\"]",
  "environment_setup_commit": "4e89ba707714e3b58a46c2ed9e220cff8b7f1e6a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.861009",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}