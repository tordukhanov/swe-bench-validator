{
  "repo": "psf/requests",
  "instance_id": "psf__requests-2931",
  "base_commit": "5f7a3a74aab1625c2bb65f643197ee885e3da576",
  "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -81,7 +81,7 @@ def _encode_params(data):\n         \"\"\"\n \n         if isinstance(data, (str, bytes)):\n-            return to_native_string(data)\n+            return data\n         elif hasattr(data, 'read'):\n             return data\n         elif hasattr(data, '__iter__'):\n@@ -385,6 +385,9 @@ def prepare_url(self, url, params):\n             if isinstance(fragment, str):\n                 fragment = fragment.encode('utf-8')\n \n+        if isinstance(params, (str, bytes)):\n+            params = to_native_string(params)\n+\n         enc_params = self._encode_params(params)\n         if enc_params:\n             if query:\n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -157,6 +157,11 @@ def test_params_bytes_are_encoded(self):\n                                    params=b'test=foo').prepare()\n         assert request.url == 'http://example.com/?test=foo'\n \n+    def test_binary_put(self):\n+        request = requests.Request('PUT', 'http://example.com',\n+                                   data=u\"ööö\".encode(\"utf-8\")).prepare()\n+        assert isinstance(request.body, bytes)\n+\n     def test_mixed_case_scheme_acceptable(self, httpbin):\n         s = requests.Session()\n         s.proxies = getproxies()\n",
  "problem_statement": "Request with binary payload fails due to calling to_native_string\nIntroduced with https://github.com/kennethreitz/requests/issues/2844\n\n```\nimport requests\nrequests.put(\"http://httpbin.org/put\", data=u\"ööö\".encode(\"utf-8\"))\n```\n\nThis works with 2.8.1, but not with 2.9.\n\n",
  "hints_text": "",
  "created_at": "2015-12-16T14:57:00Z",
  "version": "2.9",
  "FAIL_TO_PASS": "[\"test_requests.py::TestRequests::test_binary_put\"]",
  "PASS_TO_PASS": "[\"test_requests.py::TestRequests::test_entry_points\", \"test_requests.py::TestRequests::test_invalid_url\", \"test_requests.py::TestRequests::test_basic_building\", \"test_requests.py::TestRequests::test_path_is_not_double_encoded\", \"test_requests.py::TestRequests::test_params_are_added_before_fragment\", \"test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default\", \"test_requests.py::TestRequests::test_params_bytes_are_encoded\", \"test_requests.py::TestRequests::test_connection_error_invalid_domain\", \"test_requests.py::TestRequests::test_connection_error_invalid_port\", \"test_requests.py::TestRequests::test_LocationParseError\", \"test_requests.py::TestRequests::test_links\", \"test_requests.py::TestRequests::test_cookie_parameters\", \"test_requests.py::TestRequests::test_cookie_as_dict_keeps_len\", \"test_requests.py::TestRequests::test_cookie_as_dict_keeps_items\", \"test_requests.py::TestRequests::test_cookie_as_dict_keys\", \"test_requests.py::TestRequests::test_cookie_as_dict_values\", \"test_requests.py::TestRequests::test_cookie_as_dict_items\", \"test_requests.py::TestRequests::test_response_is_iterable\", \"test_requests.py::TestRequests::test_response_decode_unicode\", \"test_requests.py::TestRequests::test_get_auth_from_url\", \"test_requests.py::TestRequests::test_get_auth_from_url_encoded_spaces\", \"test_requests.py::TestRequests::test_get_auth_from_url_not_encoded_spaces\", \"test_requests.py::TestRequests::test_get_auth_from_url_percent_chars\", \"test_requests.py::TestRequests::test_get_auth_from_url_encoded_hashes\", \"test_requests.py::TestRequests::test_http_error\", \"test_requests.py::TestRequests::test_transport_adapter_ordering\", \"test_requests.py::TestRequests::test_long_authinfo_in_url\", \"test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs\", \"test_requests.py::TestRequests::test_basic_auth_str_is_always_native\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_copy\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"test_requests.py::UtilsTestCase::test_address_in_network\", \"test_requests.py::UtilsTestCase::test_dotted_netmask\", \"test_requests.py::UtilsTestCase::test_get_auth_from_url\", \"test_requests.py::UtilsTestCase::test_get_environ_proxies\", \"test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges\", \"test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int\", \"test_requests.py::UtilsTestCase::test_guess_filename_when_int\", \"test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj\", \"test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name\", \"test_requests.py::UtilsTestCase::test_is_ipv4_address\", \"test_requests.py::UtilsTestCase::test_is_valid_cidr\", \"test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes\", \"test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents\", \"test_requests.py::UtilsTestCase::test_select_proxies\", \"test_requests.py::UtilsTestCase::test_super_len_correctly_calculates_len_of_partially_read_file\", \"test_requests.py::UtilsTestCase::test_super_len_io_streams\", \"test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int\", \"test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str\", \"test_requests.py::TestMorselToCookieExpires::test_expires_none\", \"test_requests.py::TestMorselToCookieExpires::test_expires_valid_str\", \"test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str\", \"test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int\", \"test_requests.py::TestTimeout::test_connect_timeout\", \"test_requests.py::TestTimeout::test_total_timeout_connect\", \"test_requests.py::test_data_argument_accepts_tuples\", \"test_requests.py::test_prepared_request_empty_copy\", \"test_requests.py::test_prepared_request_no_cookies_copy\", \"test_requests.py::test_prepared_request_complete_copy\", \"test_requests.py::test_prepare_unicode_url\", \"test_requests.py::test_vendor_aliases\"]",
  "environment_setup_commit": "bbeb0001cdc657ac8c7fef98e154229bc392db0e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.862624",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}