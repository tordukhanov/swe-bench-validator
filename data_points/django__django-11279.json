{
  "repo": "django/django",
  "instance_id": "django__django-11279",
  "base_commit": "bc91f27a86090b4c688b56cd4e37f95eebe6e969",
  "patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -180,6 +180,12 @@ def contribute_to_class(self, cls, name):\n \n             self.unique_together = normalize_together(self.unique_together)\n             self.index_together = normalize_together(self.index_together)\n+            # App label/class name interpolation for names of constraints and\n+            # indexes.\n+            if not getattr(cls._meta, 'abstract', False):\n+                for attr_name in {'constraints', 'indexes'}:\n+                    objs = getattr(self, attr_name, [])\n+                    setattr(self, attr_name, self._format_names_with_class(cls, objs))\n \n             # verbose_name_plural is a special case because it uses a 's'\n             # by default.\n@@ -201,6 +207,18 @@ def contribute_to_class(self, cls, name):\n             self.db_table = \"%s_%s\" % (self.app_label, self.model_name)\n             self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n \n+    def _format_names_with_class(self, cls, objs):\n+        \"\"\"App label/class name interpolation for object names.\"\"\"\n+        new_objs = []\n+        for obj in objs:\n+            obj = obj.clone()\n+            obj.name = obj.name % {\n+                'app_label': cls._meta.app_label.lower(),\n+                'class': cls.__name__.lower(),\n+            }\n+            new_objs.append(obj)\n+        return new_objs\n+\n     def _prepare(self, model):\n         if self.order_with_respect_to:\n             # The app registry will not be ready at this point, so we cannot\n",
  "test_patch": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -131,6 +131,22 @@ class Model2(AbstractModel):\n             ),\n         ])\n \n+    def test_no_collision_abstract_model_interpolation(self):\n+        class AbstractModel(models.Model):\n+            name = models.CharField(max_length=20)\n+\n+            class Meta:\n+                indexes = [models.Index(fields=['name'], name='%(app_label)s_%(class)s_foo')]\n+                abstract = True\n+\n+        class Model1(AbstractModel):\n+            pass\n+\n+        class Model2(AbstractModel):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     @modify_settings(INSTALLED_APPS={'append': 'basic'})\n     @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n     def test_collision_across_apps(self, apps):\n@@ -154,6 +170,23 @@ class Meta:\n             ),\n         ])\n \n+    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n+    @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n+    def test_no_collision_across_apps_interpolation(self, apps):\n+        index = models.Index(fields=['id'], name='%(app_label)s_%(class)s_foo')\n+\n+        class Model1(models.Model):\n+            class Meta:\n+                app_label = 'basic'\n+                constraints = [index]\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                app_label = 'check_framework'\n+                constraints = [index]\n+\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+\n \n @isolate_apps('check_framework', attr_name='apps')\n @override_system_checks([checks.model_checks.check_all_models])\n@@ -214,6 +247,22 @@ class Model2(AbstractModel):\n             ),\n         ])\n \n+    def test_no_collision_abstract_model_interpolation(self):\n+        class AbstractModel(models.Model):\n+            class Meta:\n+                constraints = [\n+                    models.CheckConstraint(check=models.Q(id__gt=0), name='%(app_label)s_%(class)s_foo'),\n+                ]\n+                abstract = True\n+\n+        class Model1(AbstractModel):\n+            pass\n+\n+        class Model2(AbstractModel):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     @modify_settings(INSTALLED_APPS={'append': 'basic'})\n     @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n     def test_collision_across_apps(self, apps):\n@@ -236,3 +285,20 @@ class Meta:\n                 id='models.E032',\n             ),\n         ])\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n+    @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n+    def test_no_collision_across_apps_interpolation(self, apps):\n+        constraint = models.CheckConstraint(check=models.Q(id__gt=0), name='%(app_label)s_%(class)s_foo')\n+\n+        class Model1(models.Model):\n+            class Meta:\n+                app_label = 'basic'\n+                constraints = [constraint]\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                app_label = 'check_framework'\n+                constraints = [constraint]\n+\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\ndiff --git a/tests/constraints/models.py b/tests/constraints/models.py\n--- a/tests/constraints/models.py\n+++ b/tests/constraints/models.py\n@@ -13,6 +13,10 @@ class Meta:\n                 check=models.Q(price__gt=models.F('discounted_price')),\n                 name='price_gt_discounted_price',\n             ),\n+            models.CheckConstraint(\n+                check=models.Q(price__gt=0),\n+                name='%(app_label)s_%(class)s_price_gt_0',\n+            ),\n             models.UniqueConstraint(fields=['name', 'color'], name='name_color_uniq'),\n             models.UniqueConstraint(\n                 fields=['name'],\n@@ -20,3 +24,20 @@ class Meta:\n                 condition=models.Q(color__isnull=True),\n             ),\n         ]\n+\n+\n+class AbstractModel(models.Model):\n+    age = models.IntegerField()\n+\n+    class Meta:\n+        abstract = True\n+        constraints = [\n+            models.CheckConstraint(\n+                check=models.Q(age__gte=18),\n+                name='%(app_label)s_%(class)s_adult',\n+            ),\n+        ]\n+\n+\n+class ChildModel(AbstractModel):\n+    pass\ndiff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -3,7 +3,7 @@\n from django.db.models.constraints import BaseConstraint\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n-from .models import Product\n+from .models import ChildModel, Product\n \n \n def get_constraints(table):\n@@ -76,8 +76,17 @@ def test_database_constraint(self):\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_name(self):\n         constraints = get_constraints(Product._meta.db_table)\n-        expected_name = 'price_gt_discounted_price'\n-        self.assertIn(expected_name, constraints)\n+        for expected_name in (\n+            'price_gt_discounted_price',\n+            'constraints_product_price_gt_0',\n+        ):\n+            with self.subTest(expected_name):\n+                self.assertIn(expected_name, constraints)\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_abstract_name(self):\n+        constraints = get_constraints(ChildModel._meta.db_table)\n+        self.assertIn('constraints_childmodel_adult', constraints)\n \n \n class UniqueConstraintTests(TestCase):\ndiff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -1105,7 +1105,7 @@ class Abstract(models.Model):\n             class Meta:\n                 app_label = 'migrations'\n                 abstract = True\n-                indexes = [models.indexes.Index(fields=['name'])]\n+                indexes = [models.Index(fields=['name'])]\n \n         class Child1(Abstract):\n             pass\n@@ -1131,7 +1131,7 @@ class TestModel(models.Model):\n \n             class Meta:\n                 app_label = 'migrations'\n-                indexes = [models.indexes.Index(fields=['name'], name='foo_idx')]\n+                indexes = [models.Index(fields=['name'], name='foo_idx')]\n \n         model_state = ModelState.from_model(TestModel)\n         index_names = [index.name for index in model_state.options['indexes']]\ndiff --git a/tests/model_indexes/models.py b/tests/model_indexes/models.py\n--- a/tests/model_indexes/models.py\n+++ b/tests/model_indexes/models.py\n@@ -7,20 +7,26 @@ class Book(models.Model):\n     pages = models.IntegerField(db_column='page_count')\n     shortcut = models.CharField(max_length=50, db_tablespace='idx_tbls')\n     isbn = models.CharField(max_length=50, db_tablespace='idx_tbls')\n+    barcode = models.CharField(max_length=31)\n \n     class Meta:\n         indexes = [\n-            models.indexes.Index(fields=['title']),\n-            models.indexes.Index(fields=['isbn', 'id']),\n+            models.Index(fields=['title']),\n+            models.Index(fields=['isbn', 'id']),\n+            models.Index(fields=['barcode'], name='%(app_label)s_%(class)s_barcode_idx'),\n         ]\n \n \n class AbstractModel(models.Model):\n     name = models.CharField(max_length=50)\n+    shortcut = models.CharField(max_length=3)\n \n     class Meta:\n         abstract = True\n-        indexes = [models.indexes.Index(fields=['name'])]\n+        indexes = [\n+            models.Index(fields=['name']),\n+            models.Index(fields=['shortcut'], name='%(app_label)s_%(class)s_idx'),\n+        ]\n \n \n class ChildModel1(AbstractModel):\ndiff --git a/tests/model_indexes/tests.py b/tests/model_indexes/tests.py\n--- a/tests/model_indexes/tests.py\n+++ b/tests/model_indexes/tests.py\n@@ -134,13 +134,26 @@ def test_clone(self):\n \n     def test_name_set(self):\n         index_names = [index.name for index in Book._meta.indexes]\n-        self.assertCountEqual(index_names, ['model_index_title_196f42_idx', 'model_index_isbn_34f975_idx'])\n+        self.assertCountEqual(\n+            index_names,\n+            [\n+                'model_index_title_196f42_idx',\n+                'model_index_isbn_34f975_idx',\n+                'model_indexes_book_barcode_idx',\n+            ],\n+        )\n \n     def test_abstract_children(self):\n         index_names = [index.name for index in ChildModel1._meta.indexes]\n-        self.assertEqual(index_names, ['model_index_name_440998_idx'])\n+        self.assertEqual(\n+            index_names,\n+            ['model_index_name_440998_idx', 'model_indexes_childmodel1_idx'],\n+        )\n         index_names = [index.name for index in ChildModel2._meta.indexes]\n-        self.assertEqual(index_names, ['model_index_name_b6c374_idx'])\n+        self.assertEqual(\n+            index_names,\n+            ['model_index_name_b6c374_idx', 'model_indexes_childmodel2_idx'],\n+        )\n \n \n class IndexesTests(TestCase):\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -8,7 +8,7 @@\n from django.db import (\n     DatabaseError, IntegrityError, OperationalError, connection,\n )\n-from django.db.models import Model, Q\n+from django.db.models import Index, Model, Q\n from django.db.models.constraints import CheckConstraint, UniqueConstraint\n from django.db.models.deletion import CASCADE, PROTECT\n from django.db.models.fields import (\n@@ -19,7 +19,6 @@\n from django.db.models.fields.related import (\n     ForeignKey, ForeignObject, ManyToManyField, OneToOneField,\n )\n-from django.db.models.indexes import Index\n from django.db.transaction import TransactionManagementError, atomic\n from django.db.utils import DataError\n from django.test import (\n",
  "problem_statement": "Allow app_label and class to be specified in the name argument for indexes and constraints.\nDescription\n\t\nAllow %(app_label)s and %(class)s to be specified in name argument for BaseConstraint (CheckConstraint, UniqueConstraint) and Index:\n%(class)s should be replaced by the lowercased name of the child class that the field is used in,\n'%(app_label)s should be replaced by the lowercased name of the app the child class is contained within.\nThis should allow for specifying check constraints and partial indexes (which name's are mandatory) in abstract models.\nBased on discussion in #30362.\n",
  "hints_text": "​PR\nOK, as per discussion on the PR, this is blocked pending a couple of refactorings. Mainly #30613. Let's review again after that.\n#30613 has been merged. I guess that this pr is available to review again.",
  "created_at": "2019-04-24T16:46:52Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_constraint_sql (constraints.tests.BaseConstraintTests)\", \"test_create_sql (constraints.tests.BaseConstraintTests)\", \"test_remove_sql (constraints.tests.BaseConstraintTests)\", \"test_abstract_children (model_indexes.tests.SimpleIndexesTests)\", \"test_clone (model_indexes.tests.SimpleIndexesTests)\", \"test_condition_must_be_q (model_indexes.tests.SimpleIndexesTests)\", \"test_condition_requires_index_name (model_indexes.tests.SimpleIndexesTests)\", \"test_deconstruct_with_condition (model_indexes.tests.SimpleIndexesTests)\", \"test_deconstruction (model_indexes.tests.SimpleIndexesTests)\", \"test_eq (model_indexes.tests.SimpleIndexesTests)\", \"test_fields_tuple (model_indexes.tests.SimpleIndexesTests)\", \"test_index_fields_type (model_indexes.tests.SimpleIndexesTests)\", \"test_name_auto_generation (model_indexes.tests.SimpleIndexesTests)\", \"test_name_auto_generation_with_quoted_db_table (model_indexes.tests.SimpleIndexesTests)\", \"test_name_set (model_indexes.tests.SimpleIndexesTests)\", \"test_opclasses_and_fields_same_length (model_indexes.tests.SimpleIndexesTests)\", \"test_opclasses_requires_index_name (model_indexes.tests.SimpleIndexesTests)\", \"test_opclasses_requires_list_or_tuple (model_indexes.tests.SimpleIndexesTests)\", \"test_raises_error_without_field (model_indexes.tests.SimpleIndexesTests)\", \"test_repr (model_indexes.tests.SimpleIndexesTests)\", \"test_suffix (model_indexes.tests.SimpleIndexesTests)\", \"test_abstract_model_children_inherit_indexes (migrations.test_state.ModelStateTests)\", \"test_bound_field_sanity_check (migrations.test_state.ModelStateTests)\", \"test_create_swappable (migrations.test_state.ModelStateTests)\", \"test_create_swappable_from_abstract (migrations.test_state.ModelStateTests)\", \"test_custom_manager_swappable (migrations.test_state.ModelStateTests)\", \"test_custom_model_base (migrations.test_state.ModelStateTests)\", \"test_explicit_index_name (migrations.test_state.ModelStateTests)\", \"test_fields_immutability (migrations.test_state.ModelStateTests)\", \"test_from_model_constraints (migrations.test_state.ModelStateTests)\", \"test_order_with_respect_to_private_field (migrations.test_state.ModelStateTests)\", \"test_repr (migrations.test_state.ModelStateTests)\", \"test_sanity_check_through (migrations.test_state.ModelStateTests)\", \"test_sanity_check_to (migrations.test_state.ModelStateTests)\", \"test_sanity_index_name (migrations.test_state.ModelStateTests)\", \"test_condition_must_be_q (constraints.tests.UniqueConstraintTests)\", \"test_database_constraint (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_eq (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_model_validation (constraints.tests.UniqueConstraintTests)\", \"Partial unique constraints are ignored by Model.validate_unique().\", \"test_name (constraints.tests.UniqueConstraintTests)\", \"test_repr (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_abstract_name (constraints.tests.CheckConstraintTests)\", \"test_database_constraint (constraints.tests.CheckConstraintTests)\", \"test_deconstruction (constraints.tests.CheckConstraintTests)\", \"test_eq (constraints.tests.CheckConstraintTests)\", \"test_name (constraints.tests.CheckConstraintTests)\", \"test_repr (constraints.tests.CheckConstraintTests)\", \"test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests)\", \"test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.IndexNameTests)\", \"test_no_collision_across_apps_interpolation (check_framework.test_model_checks.IndexNameTests)\", \"test_abstract_base (migrations.test_state.RelatedModelsTests)\", \"test_base (migrations.test_state.RelatedModelsTests)\", \"test_base_to_base_fk (migrations.test_state.RelatedModelsTests)\", \"test_base_to_subclass_fk (migrations.test_state.RelatedModelsTests)\", \"test_circle (migrations.test_state.RelatedModelsTests)\", \"test_direct_fk (migrations.test_state.RelatedModelsTests)\", \"test_direct_hidden_fk (migrations.test_state.RelatedModelsTests)\", \"test_direct_m2m (migrations.test_state.RelatedModelsTests)\", \"test_direct_m2m_self (migrations.test_state.RelatedModelsTests)\", \"test_fk_through_proxy (migrations.test_state.RelatedModelsTests)\", \"test_generic_fk (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_base (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_extern_fk (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_self (migrations.test_state.RelatedModelsTests)\", \"test_multiple_bases (migrations.test_state.RelatedModelsTests)\", \"test_multiple_mixed_bases (migrations.test_state.RelatedModelsTests)\", \"test_multiple_nested_bases (migrations.test_state.RelatedModelsTests)\", \"test_nested_abstract_base (migrations.test_state.RelatedModelsTests)\", \"test_nested_base (migrations.test_state.RelatedModelsTests)\", \"test_nested_fk (migrations.test_state.RelatedModelsTests)\", \"test_nested_proxy_base (migrations.test_state.RelatedModelsTests)\", \"test_proxy_base (migrations.test_state.RelatedModelsTests)\", \"test_two_sided (migrations.test_state.RelatedModelsTests)\", \"test_unrelated (migrations.test_state.RelatedModelsTests)\", \"test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests)\", \"test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.ConstraintNameTests)\", \"test_no_collision_across_apps_interpolation (check_framework.test_model_checks.ConstraintNameTests)\", \"test_add_relations (migrations.test_state.StateTests)\", \"test_apps_bulk_update (migrations.test_state.StateTests)\", \"test_choices_iterator (migrations.test_state.StateTests)\", \"test_create (migrations.test_state.StateTests)\", \"test_custom_base_manager (migrations.test_state.StateTests)\", \"test_custom_default_manager (migrations.test_state.StateTests)\", \"test_custom_default_manager_added_to_the_model_state (migrations.test_state.StateTests)\", \"test_custom_default_manager_named_objects_with_false_migration_flag (migrations.test_state.StateTests)\", \"test_dangling_references_throw_error (migrations.test_state.StateTests)\", \"test_equality (migrations.test_state.StateTests)\", \"test_ignore_order_wrt (migrations.test_state.StateTests)\", \"test_manager_refer_correct_model_version (migrations.test_state.StateTests)\", \"test_no_duplicate_managers (migrations.test_state.StateTests)\", \"test_real_apps (migrations.test_state.StateTests)\", \"test_remove_relations (migrations.test_state.StateTests)\", \"test_render (migrations.test_state.StateTests)\", \"test_render_model_inheritance (migrations.test_state.StateTests)\", \"test_render_model_with_multiple_inheritance (migrations.test_state.StateTests)\", \"test_render_project_dependencies (migrations.test_state.StateTests)\", \"test_render_unique_app_labels (migrations.test_state.StateTests)\", \"test_self_relation (migrations.test_state.StateTests)\", \"test_add_datefield_and_datetimefield_use_effective_default (schema.tests.SchemaTests)\", \"test_add_field (schema.tests.SchemaTests)\", \"test_add_field_binary (schema.tests.SchemaTests)\", \"test_add_field_default_dropped (schema.tests.SchemaTests)\", \"test_add_field_default_transform (schema.tests.SchemaTests)\", \"test_add_field_remove_field (schema.tests.SchemaTests)\", \"test_add_field_temp_default (schema.tests.SchemaTests)\", \"test_add_field_temp_default_boolean (schema.tests.SchemaTests)\", \"test_add_field_use_effective_default (schema.tests.SchemaTests)\", \"test_add_foreign_key_long_names (schema.tests.SchemaTests)\", \"test_add_foreign_key_quoted_db_table (schema.tests.SchemaTests)\", \"test_add_foreign_object (schema.tests.SchemaTests)\", \"test_add_remove_index (schema.tests.SchemaTests)\", \"test_add_textfield_unhashable_default (schema.tests.SchemaTests)\", \"test_alter (schema.tests.SchemaTests)\", \"test_alter_auto_field_to_char_field (schema.tests.SchemaTests)\", \"test_alter_auto_field_to_integer_field (schema.tests.SchemaTests)\", \"test_alter_autofield_pk_to_bigautofield_pk_sequence_owner (schema.tests.SchemaTests)\", \"test_alter_charfield_to_null (schema.tests.SchemaTests)\", \"test_alter_db_table_case (schema.tests.SchemaTests)\", \"test_alter_field_add_index_to_integerfield (schema.tests.SchemaTests)\", \"test_alter_field_default_dropped (schema.tests.SchemaTests)\", \"test_alter_field_fk_keeps_index (schema.tests.SchemaTests)\", \"test_alter_field_fk_to_o2o (schema.tests.SchemaTests)\", \"test_alter_field_o2o_keeps_unique (schema.tests.SchemaTests)\", \"test_alter_field_o2o_to_fk (schema.tests.SchemaTests)\", \"test_alter_fk (schema.tests.SchemaTests)\", \"test_alter_fk_checks_deferred_constraints (schema.tests.SchemaTests)\", \"test_alter_fk_to_o2o (schema.tests.SchemaTests)\", \"test_alter_implicit_id_to_explicit (schema.tests.SchemaTests)\", \"test_alter_int_pk_to_autofield_pk (schema.tests.SchemaTests)\", \"test_alter_int_pk_to_bigautofield_pk (schema.tests.SchemaTests)\", \"test_alter_int_pk_to_int_unique (schema.tests.SchemaTests)\", \"test_alter_not_unique_field_to_primary_key (schema.tests.SchemaTests)\", \"test_alter_null_to_not_null (schema.tests.SchemaTests)\", \"test_alter_numeric_field_keep_null_status (schema.tests.SchemaTests)\", \"test_alter_o2o_to_fk (schema.tests.SchemaTests)\", \"test_alter_pk_with_self_referential_field (schema.tests.SchemaTests)\", \"test_alter_text_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_date_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_datetime_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_time_field (schema.tests.SchemaTests)\", \"test_alter_textfield_to_null (schema.tests.SchemaTests)\", \"test_alter_textual_field_keep_null_status (schema.tests.SchemaTests)\", \"test_alter_to_fk (schema.tests.SchemaTests)\", \"test_char_field_with_db_index_to_fk (schema.tests.SchemaTests)\", \"test_check_constraints (schema.tests.SchemaTests)\", \"test_context_manager_exit (schema.tests.SchemaTests)\", \"test_create_index_together (schema.tests.SchemaTests)\", \"test_creation_deletion (schema.tests.SchemaTests)\", \"test_creation_deletion_reserved_names (schema.tests.SchemaTests)\", \"test_db_table (schema.tests.SchemaTests)\", \"Creating tables out of FK order, then repointing, works\", \"The db_constraint parameter is respected\", \"Creating a FK to a proxy model creates database constraints.\", \"test_foreign_key_index_long_names_regression (schema.tests.SchemaTests)\", \"test_index_together (schema.tests.SchemaTests)\", \"test_index_together_with_fk (schema.tests.SchemaTests)\", \"test_indexes (schema.tests.SchemaTests)\", \"test_m2m (schema.tests.SchemaTests)\", \"test_m2m_create (schema.tests.SchemaTests)\", \"test_m2m_create_custom (schema.tests.SchemaTests)\", \"test_m2m_create_inherited (schema.tests.SchemaTests)\", \"test_m2m_create_through (schema.tests.SchemaTests)\", \"test_m2m_create_through_custom (schema.tests.SchemaTests)\", \"test_m2m_create_through_inherited (schema.tests.SchemaTests)\", \"test_m2m_custom (schema.tests.SchemaTests)\", \"test_m2m_db_constraint (schema.tests.SchemaTests)\", \"test_m2m_db_constraint_custom (schema.tests.SchemaTests)\", \"test_m2m_db_constraint_inherited (schema.tests.SchemaTests)\", \"test_m2m_inherited (schema.tests.SchemaTests)\", \"test_m2m_rename_field_in_target_model (schema.tests.SchemaTests)\", \"test_m2m_repoint (schema.tests.SchemaTests)\", \"test_m2m_repoint_custom (schema.tests.SchemaTests)\", \"test_m2m_repoint_inherited (schema.tests.SchemaTests)\", \"test_m2m_through_alter (schema.tests.SchemaTests)\", \"test_m2m_through_alter_custom (schema.tests.SchemaTests)\", \"test_m2m_through_alter_inherited (schema.tests.SchemaTests)\", \"test_namespaced_db_table_create_index_name (schema.tests.SchemaTests)\", \"test_no_db_constraint_added_during_primary_key_change (schema.tests.SchemaTests)\", \"test_order_index (schema.tests.SchemaTests)\", \"test_primary_key (schema.tests.SchemaTests)\", \"test_referenced_field_without_constraint_rename_inside_atomic_block (schema.tests.SchemaTests)\", \"test_referenced_table_without_constraint_rename_inside_atomic_block (schema.tests.SchemaTests)\", \"test_remove_constraints_capital_letters (schema.tests.SchemaTests)\", \"test_remove_db_index_doesnt_remove_custom_indexes (schema.tests.SchemaTests)\", \"test_remove_field_check_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_remove_field_unique_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_remove_index_together_does_not_remove_meta_indexes (schema.tests.SchemaTests)\", \"test_remove_unique_together_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_rename (schema.tests.SchemaTests)\", \"test_rename_keep_null_status (schema.tests.SchemaTests)\", \"test_rename_referenced_field (schema.tests.SchemaTests)\", \"test_rename_table_renames_deferred_sql_references (schema.tests.SchemaTests)\", \"test_text_field_with_db_index (schema.tests.SchemaTests)\", \"test_text_field_with_db_index_to_fk (schema.tests.SchemaTests)\", \"test_unique (schema.tests.SchemaTests)\", \"test_unique_name_quoting (schema.tests.SchemaTests)\", \"test_unique_together (schema.tests.SchemaTests)\", \"test_unique_together_with_fk (schema.tests.SchemaTests)\", \"test_unique_together_with_fk_with_existing_index (schema.tests.SchemaTests)\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.566919",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}