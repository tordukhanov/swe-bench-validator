{
  "repo": "django/django",
  "instance_id": "django__django-15206",
  "base_commit": "bf7afe9c4e21f5fe5090c47b2b6ffc5a03a85815",
  "patch": "diff --git a/django/views/decorators/cache.py b/django/views/decorators/cache.py\n--- a/django/views/decorators/cache.py\n+++ b/django/views/decorators/cache.py\n@@ -1,6 +1,5 @@\n from functools import wraps\n \n-from django.http import HttpRequest\n from django.middleware.cache import CacheMiddleware\n from django.utils.cache import add_never_cache_headers, patch_cache_control\n from django.utils.decorators import decorator_from_middleware_with_args\n@@ -29,7 +28,8 @@ def cache_control(**kwargs):\n     def _cache_controller(viewfunc):\n         @wraps(viewfunc)\n         def _cache_controlled(request, *args, **kw):\n-            if not isinstance(request, HttpRequest):\n+            # Ensure argument looks like a request.\n+            if not hasattr(request, 'META'):\n                 raise TypeError(\n                     \"cache_control didn't receive an HttpRequest. If you are \"\n                     \"decorating a classmethod, be sure to use \"\n@@ -48,7 +48,8 @@ def never_cache(view_func):\n     \"\"\"\n     @wraps(view_func)\n     def _wrapped_view_func(request, *args, **kwargs):\n-        if not isinstance(request, HttpRequest):\n+        # Ensure argument looks like a request.\n+        if not hasattr(request, 'META'):\n             raise TypeError(\n                 \"never_cache didn't receive an HttpRequest. If you are \"\n                 \"decorating a classmethod, be sure to use @method_decorator.\"\n",
  "test_patch": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -493,6 +493,15 @@ def a_view(request):\n         self.assertIsNone(r.get('X-Frame-Options', None))\n \n \n+class HttpRequestProxy:\n+    def __init__(self, request):\n+        self._request = request\n+\n+    def __getattr__(self, attr):\n+        \"\"\"Proxy to the underlying HttpRequest object.\"\"\"\n+        return getattr(self._request, attr)\n+\n+\n class NeverCacheDecoratorTest(SimpleTestCase):\n \n     @mock.patch('time.time')\n@@ -525,12 +534,27 @@ class MyClass:\n             @never_cache\n             def a_view(self, request):\n                 return HttpResponse()\n+\n+        request = HttpRequest()\n         msg = (\n             \"never_cache didn't receive an HttpRequest. If you are decorating \"\n             \"a classmethod, be sure to use @method_decorator.\"\n         )\n         with self.assertRaisesMessage(TypeError, msg):\n-            MyClass().a_view(HttpRequest())\n+            MyClass().a_view(request)\n+        with self.assertRaisesMessage(TypeError, msg):\n+            MyClass().a_view(HttpRequestProxy(request))\n+\n+    def test_never_cache_decorator_http_request_proxy(self):\n+        class MyClass:\n+            @method_decorator(never_cache)\n+            def a_view(self, request):\n+                return HttpResponse()\n+\n+        request = HttpRequest()\n+        response = MyClass().a_view(HttpRequestProxy(request))\n+        self.assertIn('Cache-Control', response.headers)\n+        self.assertIn('Expires', response.headers)\n \n \n class CacheControlDecoratorTest(SimpleTestCase):\n@@ -544,5 +568,18 @@ def a_view(self, request):\n             \"cache_control didn't receive an HttpRequest. If you are \"\n             \"decorating a classmethod, be sure to use @method_decorator.\"\n         )\n+        request = HttpRequest()\n         with self.assertRaisesMessage(TypeError, msg):\n-            MyClass().a_view(HttpRequest())\n+            MyClass().a_view(request)\n+        with self.assertRaisesMessage(TypeError, msg):\n+            MyClass().a_view(HttpRequestProxy(request))\n+\n+    def test_cache_control_decorator_http_request_proxy(self):\n+        class MyClass:\n+            @method_decorator(cache_control(a='b'))\n+            def a_view(self, request):\n+                return HttpResponse()\n+\n+        request = HttpRequest()\n+        response = MyClass().a_view(HttpRequestProxy(request))\n+        self.assertEqual(response.headers['Cache-Control'], 'a=b')\n",
  "problem_statement": "never_cache()/cache_control() decorators raise error on duck-typed requests.\nDescription\n\t\nThe cache decorators cache_control, never_cache and sensitive_post_parameters no longer work with Django REST framework because they strictly check for an HttpRequest instance.\n",
  "hints_text": "Hi Terence â€” Thanks for the report. Can you post a traceback quickly, or better a reproduce? (But a traceback would be good.)\n3fd82a62415e748002435e7bad06b5017507777c for #32468 looks likely.\nThe check has been in sensitive_post_parameters â€‹for a long time.\nI don't see how this can be a regression, these decorators use functions from â€‹django.utils.cache which are documented as accepting HttpResponse ðŸ¤” Also Response defined in django-rest-framework is a subclass of HttpResponse.\nReplying to Mariusz Felisiak: I don't see how this can be a regression, these decorators use functions from â€‹django.utils.cache which are documented as accepting HttpResponse ðŸ¤” Also Response defined in django-rest-framework is a subclass of HttpResponse. â€‹Request has never inherited from HttpRequest which has been the source of many issues like this even before 4.0. I am experiencing a lot of issues right now converting Django method views into DRF class-based views right now because all of the decorators keep breaking.\nReplying to jason: â€‹Request has never inherited from HttpRequest which has been the source of many issues like this even before 4.0. I am experiencing a lot of issues right now converting Django method views into DRF class-based views right now because all of the decorators keep breaking. Sorry, I confused HttpRequest with HttpResponse. Nevertheless, IMO, if DRF is duck typing HttpRequest it should be fixed in DRF, e.g. by adding __instancecheck__(). What do you think Tom? I'm happy to provide a patch to DRF.\nI think this is going to cause trouble for a lot of folks. The sensitive_post_parameters has been as it is for many years, but the â€‹caching usage is standard DRF. (Again that's been there a long time.) The check in 3fd82a62415e748002435e7bad06b5017507777c seems overly tight. What methods are being called? Surely any Request-a-like exposing those is OK? I don't think we can just change Request to claim to be a HttpRequest. â€‹DRF has an `isinstance()` check for this very thing. Introduced in â€‹https://github.com/encode/django-rest-framework/pull/5618 See also: â€‹https://github.com/encode/django-rest-framework/issues/5446 â€‹https://github.com/encode/django-rest-framework/issues/3848 (and others)\nThis error was added to catch misuses of never_cache() and cache_control() decorators without method_decorator().\nWe've discussed this with Carlton, and see two possible solutions: allow for HttpRequest duck-typing, or changing errors to be based on missing method_decorator() call, maybe checking that request is not a callable ðŸ¤” or sth similar.\nReplying to Mariusz Felisiak: This error was added to catch misuses of never_cache() and cache_control() decorators without method_decorator(). Breaking functionality in order to provide a nice error message seems backwards. Then again, I can't think of a good excuse for DRF not to simply inherit from HttpRequest. I recently fell down a rabbit-hole of github issues that were closed without resolution regarding this conflict, where DRF refuses to inherit because \"composition pattern\", and django refuses not to check because \"nice error message\" over and over. Something has to give right?\nSomething has to give right? This ticket is accepted. Have you seen my last comment? We agreed that this should be fixed in Django itself.\nReplying to Mariusz Felisiak: Something has to give right? This ticket is accepted. Have you seen my last comment? We agreed that this should be fixed in Django itself. Just saw it, don't mean to beat a dead horse, thank you for your quick response _",
  "created_at": "2021-12-16T08:48:48Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_cache_control_decorator_http_request_proxy (decorators.tests.CacheControlDecoratorTest)\", \"test_never_cache_decorator_http_request_proxy (decorators.tests.NeverCacheDecoratorTest)\"]",
  "PASS_TO_PASS": "[\"test_cache_control_decorator_http_request (decorators.tests.CacheControlDecoratorTest)\", \"Ensures @xframe_options_deny properly sets the X-Frame-Options header.\", \"Ensures @xframe_options_exempt properly instructs the\", \"Ensures @xframe_options_sameorigin properly sets the X-Frame-Options\", \"Built-in decorators set certain attributes of the wrapped function.\", \"test_cache_page (decorators.tests.DecoratorsTest)\", \"Test for the require_safe decorator.\", \"The user_passes_test decorator can be applied multiple times (#9474).\", \"test_argumented (decorators.tests.MethodDecoratorTests)\", \"test_bad_iterable (decorators.tests.MethodDecoratorTests)\", \"@method_decorator can be used to decorate a class and its methods.\", \"test_descriptors (decorators.tests.MethodDecoratorTests)\", \"@method_decorator on a nonexistent method raises an error.\", \"@method_decorator on a non-callable attribute raises an error.\", \"A decorator that sets a new attribute on the method.\", \"test_preserve_attributes (decorators.tests.MethodDecoratorTests)\", \"test_preserve_signature (decorators.tests.MethodDecoratorTests)\", \"@method_decorator can accept a tuple of decorators.\", \"@method_decorator preserves wrapper assignments.\", \"test_never_cache_decorator_expires_not_overridden (decorators.tests.NeverCacheDecoratorTest)\", \"test_never_cache_decorator_headers (decorators.tests.NeverCacheDecoratorTest)\", \"test_never_cache_decorator_http_request (decorators.tests.NeverCacheDecoratorTest)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.721781",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}