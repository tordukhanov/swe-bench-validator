{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13731",
  "base_commit": "a30301e5535be2f558cb948da6b3475df4e36a98",
  "patch": "diff --git a/astropy/time/formats.py b/astropy/time/formats.py\n--- a/astropy/time/formats.py\n+++ b/astropy/time/formats.py\n@@ -1294,13 +1294,15 @@ def parse_string(self, timestr, subfmts):\n         try:\n             idot = timestr.rindex('.')\n         except Exception:\n-            fracsec = 0.0\n+            timestr_has_fractional_digits = False\n         else:\n             timestr, fracsec = timestr[:idot], timestr[idot:]\n             fracsec = float(fracsec)\n+            timestr_has_fractional_digits = True\n \n         for _, strptime_fmt_or_regex, _ in subfmts:\n             if isinstance(strptime_fmt_or_regex, str):\n+                subfmt_has_sec = '%S' in strptime_fmt_or_regex\n                 try:\n                     tm = time.strptime(timestr, strptime_fmt_or_regex)\n                 except ValueError:\n@@ -1316,9 +1318,18 @@ def parse_string(self, timestr, subfmts):\n                 tm = tm.groupdict()\n                 vals = [int(tm.get(component, default)) for component, default\n                         in zip(components, defaults)]\n+                subfmt_has_sec = 'sec' in tm\n+\n+            # Add fractional seconds if they were in the original time string\n+            # and the subformat has seconds. A time like \"2022-08-01.123\" will\n+            # never pass this for a format like ISO and will raise a parsing\n+            # exception.\n+            if timestr_has_fractional_digits:\n+                if subfmt_has_sec:\n+                    vals[-1] = vals[-1] + fracsec\n+                else:\n+                    continue\n \n-            # Add fractional seconds\n-            vals[-1] = vals[-1] + fracsec\n             return vals\n         else:\n             raise ValueError(f'Time {timestr} does not match {self.name} format')\n",
  "test_patch": "diff --git a/astropy/time/tests/test_basic.py b/astropy/time/tests/test_basic.py\n--- a/astropy/time/tests/test_basic.py\n+++ b/astropy/time/tests/test_basic.py\n@@ -18,7 +18,8 @@\n from astropy.coordinates import EarthLocation\n from astropy.table import Column, Table\n from astropy.time import (\n-    STANDARD_TIME_SCALES, TIME_FORMATS, ScaleValueError, Time, TimeDelta, TimeString, TimezoneInfo)\n+    STANDARD_TIME_SCALES, TIME_FORMATS, ScaleValueError, Time, TimeDelta, TimeString, TimezoneInfo,\n+    conf)\n from astropy.utils import iers, isiterable\n from astropy.utils.compat.optional_deps import HAS_H5PY, HAS_PYTZ  # noqa\n from astropy.utils.exceptions import AstropyDeprecationWarning\n@@ -2347,6 +2348,17 @@ def test_format_subformat_compatibility():\n     assert t.yday == '2019:354'\n \n \n+@pytest.mark.parametrize('use_fast_parser', [\"force\", \"False\"])\n+def test_format_fractional_string_parsing(use_fast_parser):\n+    \"\"\"Test that string like \"2022-08-01.123\" does not parse as ISO.\n+    See #6476 and the fix.\"\"\"\n+    with pytest.raises(\n+        ValueError, match=r\"Input values did not match the format class iso\"\n+    ):\n+        with conf.set_temp(\"use_fast_parser\", use_fast_parser):\n+            Time(\"2022-08-01.123\", format='iso')\n+\n+\n @pytest.mark.parametrize('fmt_name,fmt_class', TIME_FORMATS.items())\n def test_to_value_with_subfmt_for_every_format(fmt_name, fmt_class):\n     \"\"\"From a starting Time value, test that every valid combination of\n",
  "problem_statement": "`Time` parses fractional days in year-month-day format incorrectly\n`Time('2017-08-24.25')` results in `2017-08-24 00:00:00.250`: the fractional days are interpreted as fractional seconds (`2017-08-24 06:00:00` is what I hoped for).\r\n\r\nThe format `2017-08-24.25` is perhaps not the best format, but it is used, and since Astropy does not raise an exception, but silently returns an incorrect result, this may lead to errors.\r\n\r\nThe issue can be traced to `astropy.time.formats.TimeString().parse_string()`, which will interpret anything right of the last dot as a fractional second.\r\nSince matching to regexes or `strptime` formats is done afterwards, there is no (easy) way to catch this through a subformat before the fractional second get stripped.\r\n\r\nI'd be happy to try and put in a PR for this (if it's indeed a bug), but I'll need to know whether to raise an exception, or implement a proper parser for this format (provided it doesn't clash with other interpretations).\r\nSome suggestions on the best way to attack this issue (or at what point in the code) are welcome as well.\r\n\n",
  "hints_text": "@evertrol - I think the best strategy here is to raise an exception.  The point is that the astropy string subformats like `date` are documented to be symmetric, so that if you put in `2017-08-24.25` then it parses that and the representation would then be something like `2017-08-24.250` (with a default precision of 3 digits).  So this is inventing a whole new class of time formats.  Likewise the current API does not document being able to include fractional days, so it is reasonable to keep the API the same and just raise an exception.\r\n\r\nI guess it is fair to ask where \"it is used\".  Are there officially sanctioned (institutional) uses of this or just informal use?\r\n\r\nAs for implementation, this would go in the `parse_string` method in `TimeString`.  Unfortunately the current code makes it a difficult to implement a rock-solid way of detecting a problem.  A good start that will detect most problems is basically checking that the inferred date format is in a list of formats that include seconds, e.g. `('date_hms', 'longdate_hms')`.  The problem is with user-defined formats... but perfect is the enemy of good.\nI think a match against\r\n```python\r\nre.match(r'\\d{4}-\\d{1,2}-\\d{1,2}\\.\\d+$', val)\r\n```\r\nmay work (followed by a `ValueError`). No other date formats that spring to my mind match that. But I may have missed how much flexibility there is for a user to define a format.\r\n\r\nAs to where it is used: I very much doubt this is a sanctioned format, and I see it mostly used in telegrams and circulars, depending on the group that submits it. A recent example is [ATel 10652](http://www.astronomerstelegram.org/?read=10652).\r\nSo the danger for errors may mostly be when people copy-paste such a date into a `Time` object, and not notice the resulting incorrect time (e.g., when subtracting another `Time` directly from it).\r\n\nStrange that a somewhat-official telegram would use this non-format.  Well maybe it's worth allowing this on input.  Sigh.\r\n\r\nOne way that might work and be relatively low-impact is to change this [loop here](https://github.com/astropy/astropy/blob/b6e291779ea76b7e4710df90e1800e5dfefc52e8/astropy/time/formats.py#L713) to include the format name, i.e.:\r\n```\r\nfor format_name, strptime_fmt_or_regex, _ in subfmts:\r\n```\r\nThen later in the loop (at the `# add fractional seconds` bit), if the format_name is `date` then apply the fractional part as a day.  If it is a format that supports fractional seconds, then apply as seconds.  Otherwise if `format_name` is one of the defined core astropy format names (but not in the previous two categories) then raise an exception.  This would catch input like `2016-01-01 10:10.25`.  However, if the format name is something custom from a user then just continue the current behavior of the code.\r\n\r\nAnyway this is just brainstorming for something simple.  One can imagine higher-impact, more robust solutions, but it isn't totally clear we want to go there for this corner case.\nOne interesting edge case is where a user actually defines a fractional hour or minute format themselves. For example:\r\n```python\r\nclass FracHour(TimeString):\r\n    subfmts = (\r\n        ('fh', \r\n         (r'(?P<year>\\d{4})-(?P<mon>\\d{1,2})-(?P<mday>\\d{1,2}) '\r\n          r'(?P<hour>\\d{1,2}(\\.\\d*))'), \r\n         '{year:d}-{mon:02d}-{day:02d}T{hour:05.2f}'),\r\n    )\r\n```\r\nThis will raise a `ValueError: Input values did not match the format class fh` even with correct input: `Time('1999-01-01 5.5', format='fh')`.\r\n\r\nI guess that's correct though: Astropy can't go out of its way to infer when a fraction belongs to a day, hour, minute or second (it could, but the rewrite would be quite horrendous, and not worth the effort).\r\n\r\n<hr>\r\n\r\nI've now gone the route of allowing fractional days for both `'date'` and `'yday'` formats, allowing fractional seconds for `...endswith('hms')` and otherwise skip to the next sub-format.\nThis has caught me out a few times as well. The Minor Planet Center (MPC) uses a specific format for observations of asteroids and comets:\r\n`'2020 08 15.59280'`\r\nWhich isn't understood by astropy.time.Time, but if spaces are replaced with dashes, it gives:\r\n```\r\nTime('2020 08 15.59280'.replace(' ', '-'))\r\n<Time object: scale='utc' format='iso' value=2020-08-15 00:00:00.593>\r\n```\r\nwhereas it should in fact convert to\r\n`'2020-08-15 14:13:37.920'`\r\nThe best solution I have found is to add the decimal after converting to a Time object:\r\n```\r\n>>> Time('2020 08 15'.replace(' ', '-'))+'.59280'\r\n<Time object: scale='utc' format='iso' value=2020-08-15 14:13:37.920>\r\n```\r\nBut this is somewhat clunky. It would be nice if \"mpc\" (or \"mpc_obs80\") could be added to the allowed formats, so that I'd just need to remember to add the correct format specifier instead of changing spaces to dashes and adding the decimal day after the conversion to a Time object. \r\n\r\n(I work at the MPC, and my research also uses MPC-formatted files extensively, so I often come across this problem and finally decided to go raise an issue about it; I found several already open, so I just added to this one.)\nSorry there hasn't been any progress on this issue. I'll go back to my original point that `\"2020-08-15.59280\"` is unequivocally not an ISO8601-formatted date, so passing in this string should currently raise an exception. In other words there is no current Time format which should match that string. The fact that the ISO format matches is a bug in the parser.\r\n\r\nAn enhancement could be to define a new Time format which does match that like `date_fracday` or something. Some of my original discussion that alluded to making a new ISO time subformat for this case was off base.",
  "created_at": "2022-09-21T16:19:30Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/time/tests/test_basic.py::test_format_fractional_string_parsing[False]\"]",
  "PASS_TO_PASS": "[\"astropy/time/tests/test_basic.py::TestBasic::test_different_dimensions\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jd]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[mjd]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[decimalyear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[unix]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[unix_tai]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[cxcsec]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[gps]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[plot_date]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[stardate]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[datetime]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[ymdhms]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[iso]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[isot]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[yday]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[datetime64]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[fits]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[byear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jyear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[byear_str]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jyear_str]\", \"astropy/time/tests/test_basic.py::TestBasic::test_copy_time[2455197.5]\", \"astropy/time/tests/test_basic.py::TestBasic::test_copy_time[value1]\", \"astropy/time/tests/test_basic.py::TestBasic::test_getitem\", \"astropy/time/tests/test_basic.py::TestBasic::test_properties\", \"astropy/time/tests/test_basic.py::TestBasic::test_precision\", \"astropy/time/tests/test_basic.py::TestBasic::test_precision_input\", \"astropy/time/tests/test_basic.py::TestBasic::test_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_transforms_no_location\", \"astropy/time/tests/test_basic.py::TestBasic::test_location\", \"astropy/time/tests/test_basic.py::TestBasic::test_location_array\", \"astropy/time/tests/test_basic.py::TestBasic::test_all_scale_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_creating_all_formats\", \"astropy/time/tests/test_basic.py::TestBasic::test_local_format_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_datetime\", \"astropy/time/tests/test_basic.py::TestBasic::test_datetime64\", \"astropy/time/tests/test_basic.py::TestBasic::test_epoch_transform\", \"astropy/time/tests/test_basic.py::TestBasic::test_input_validation\", \"astropy/time/tests/test_basic.py::TestBasic::test_utc_leap_sec\", \"astropy/time/tests/test_basic.py::TestBasic::test_init_from_time_objects\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d0]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d1]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d2]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d3]\", \"astropy/time/tests/test_basic.py::TestVal2::test_val2\", \"astropy/time/tests/test_basic.py::TestVal2::test_val_broadcasts_against_val2\", \"astropy/time/tests/test_basic.py::TestVal2::test_broadcast_not_writable\", \"astropy/time/tests/test_basic.py::TestVal2::test_broadcast_one_not_writable\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_input_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_input_subformat_fail\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_bad_input_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_output_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_fits_format\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_yday_format\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_scale_input\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_fits_scale\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_scale_default\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_epoch_times\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_plot_date\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_example\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_longdouble\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_longdouble_one_val\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[mjd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[unix]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[cxcsec]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_input\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_output[str]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_output[bytes]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[jd-2451544.5333981-2451544.5-0.0333981]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[decimalyear-2000.54321-2000.0-0.54321]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[cxcsec-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[unix-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[gps-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[byear-1950.1-1950.1-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[jyear-2000.1-2000.1-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_basic_subformat_setting\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_basic_subformat_cache_does_not_crash\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[jd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[mjd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[cxcsec]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[unix]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[gps]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[jyear]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_caching\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-long-longdouble]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-decimal-Decimal]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-str-str]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_need_format_argument\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_wrong_in_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_wrong_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_not_allowed_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_switch_to_format_with_no_out_subfmt\", \"astropy/time/tests/test_basic.py::TestSofaErrors::test_bad_time\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_immutable_input\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_replicate\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_copy\", \"astropy/time/tests/test_basic.py::TestStardate::test_iso_to_stardate\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates0]\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates1]\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates2]\", \"astropy/time/tests/test_basic.py::test_python_builtin_copy\", \"astropy/time/tests/test_basic.py::test_now\", \"astropy/time/tests/test_basic.py::test_decimalyear\", \"astropy/time/tests/test_basic.py::test_fits_year0\", \"astropy/time/tests/test_basic.py::test_fits_year10000\", \"astropy/time/tests/test_basic.py::test_dir\", \"astropy/time/tests/test_basic.py::test_time_from_epoch_jds\", \"astropy/time/tests/test_basic.py::test_bool\", \"astropy/time/tests/test_basic.py::test_len_size\", \"astropy/time/tests/test_basic.py::test_TimeFormat_scale\", \"astropy/time/tests/test_basic.py::test_byteorder\", \"astropy/time/tests/test_basic.py::test_datetime_tzinfo\", \"astropy/time/tests/test_basic.py::test_subfmts_regex\", \"astropy/time/tests/test_basic.py::test_set_format_basic\", \"astropy/time/tests/test_basic.py::test_unix_tai_format\", \"astropy/time/tests/test_basic.py::test_set_format_shares_subfmt\", \"astropy/time/tests/test_basic.py::test_set_format_does_not_share_subfmt\", \"astropy/time/tests/test_basic.py::test_replicate_value_error\", \"astropy/time/tests/test_basic.py::test_remove_astropy_time\", \"astropy/time/tests/test_basic.py::test_isiterable\", \"astropy/time/tests/test_basic.py::test_to_datetime\", \"astropy/time/tests/test_basic.py::test_cache\", \"astropy/time/tests/test_basic.py::test_epoch_date_jd_is_day_fraction\", \"astropy/time/tests/test_basic.py::test_sum_is_equivalent\", \"astropy/time/tests/test_basic.py::test_string_valued_columns\", \"astropy/time/tests/test_basic.py::test_bytes_input\", \"astropy/time/tests/test_basic.py::test_writeable_flag\", \"astropy/time/tests/test_basic.py::test_setitem_location\", \"astropy/time/tests/test_basic.py::test_setitem_from_python_objects\", \"astropy/time/tests/test_basic.py::test_setitem_from_time_objects\", \"astropy/time/tests/test_basic.py::test_setitem_bad_item\", \"astropy/time/tests/test_basic.py::test_setitem_deltas\", \"astropy/time/tests/test_basic.py::test_subclass\", \"astropy/time/tests/test_basic.py::test_strftime_scalar\", \"astropy/time/tests/test_basic.py::test_strftime_array\", \"astropy/time/tests/test_basic.py::test_strftime_array_2\", \"astropy/time/tests/test_basic.py::test_strftime_leapsecond\", \"astropy/time/tests/test_basic.py::test_strptime_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_array\", \"astropy/time/tests/test_basic.py::test_strptime_badinput\", \"astropy/time/tests/test_basic.py::test_strptime_input_bytes_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_input_bytes_array\", \"astropy/time/tests/test_basic.py::test_strptime_leapsecond\", \"astropy/time/tests/test_basic.py::test_strptime_3_digit_year\", \"astropy/time/tests/test_basic.py::test_strptime_fracsec_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_fracsec_array\", \"astropy/time/tests/test_basic.py::test_strftime_scalar_fracsec\", \"astropy/time/tests/test_basic.py::test_strftime_scalar_fracsec_precision\", \"astropy/time/tests/test_basic.py::test_strftime_array_fracsec\", \"astropy/time/tests/test_basic.py::test_insert_time\", \"astropy/time/tests/test_basic.py::test_insert_time_out_subfmt\", \"astropy/time/tests/test_basic.py::test_insert_exceptions\", \"astropy/time/tests/test_basic.py::test_datetime64_no_format\", \"astropy/time/tests/test_basic.py::test_hash_time\", \"astropy/time/tests/test_basic.py::test_hash_time_delta\", \"astropy/time/tests/test_basic.py::test_get_time_fmt_exception_messages\", \"astropy/time/tests/test_basic.py::test_ymdhms_defaults\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_array\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_scalar[kwargs0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_scalar[kwargs1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_exceptions\", \"astropy/time/tests/test_basic.py::test_ymdhms_masked\", \"astropy/time/tests/test_basic.py::test_ymdhms_output\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[mjd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[decimalyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[unix]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[unix_tai]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[cxcsec]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[gps]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[plot_date]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[stardate]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[datetime]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[ymdhms]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[iso]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[isot]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[yday]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[datetime64]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[fits]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[byear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[byear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jyear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[mjd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[decimalyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[unix]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[unix_tai]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[cxcsec]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[gps]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[plot_date]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[stardate]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[datetime]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[ymdhms]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[iso]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[isot]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[yday]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[datetime64]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[fits]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[byear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[byear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jyear_str]\", \"astropy/time/tests/test_basic.py::test_broadcasting_writeable\", \"astropy/time/tests/test_basic.py::test_format_subformat_compatibility\", \"astropy/time/tests/test_basic.py::test_format_fractional_string_parsing[force]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jd-TimeJD]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[mjd-TimeMJD]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[decimalyear-TimeDecimalYear]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[unix-TimeUnix]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[unix_tai-TimeUnixTai]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[cxcsec-TimeCxcSec]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[gps-TimeGPS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[plot_date-TimePlotDate]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[stardate-TimeStardate]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[datetime-TimeDatetime]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[ymdhms-TimeYMDHMS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[iso-TimeISO]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[isot-TimeISOT]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[yday-TimeYearDayTime]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[datetime64-TimeDatetime64]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[fits-TimeFITS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[byear-TimeBesselianEpoch]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jyear-TimeJulianEpoch]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[byear_str-TimeBesselianEpochString]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jyear_str-TimeJulianEpochString]\", \"astropy/time/tests/test_basic.py::test_location_init[None]\", \"astropy/time/tests/test_basic.py::test_location_init[location1]\", \"astropy/time/tests/test_basic.py::test_location_init_fail\", \"astropy/time/tests/test_basic.py::test_linspace\", \"astropy/time/tests/test_basic.py::test_linspace_steps\", \"astropy/time/tests/test_basic.py::test_linspace_fmts\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.533747",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}