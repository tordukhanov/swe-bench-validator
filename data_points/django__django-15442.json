{
  "repo": "django/django",
  "instance_id": "django__django-15442",
  "base_commit": "b626c5a9798b045b655d085d59efdd60b5d7a0e3",
  "patch": "diff --git a/django/utils/safestring.py b/django/utils/safestring.py\n--- a/django/utils/safestring.py\n+++ b/django/utils/safestring.py\n@@ -7,6 +7,8 @@\n \n from functools import wraps\n \n+from django.utils.functional import keep_lazy\n+\n \n class SafeData:\n     __slots__ = ()\n@@ -53,6 +55,7 @@ def wrapped(*args, **kwargs):\n     return wrapped\n \n \n+@keep_lazy(SafeString)\n def mark_safe(s):\n     \"\"\"\n     Explicitly mark a string as safe for (HTML) output purposes. The returned\n",
  "test_patch": "diff --git a/tests/utils_tests/test_safestring.py b/tests/utils_tests/test_safestring.py\n--- a/tests/utils_tests/test_safestring.py\n+++ b/tests/utils_tests/test_safestring.py\n@@ -1,8 +1,9 @@\n from django.template import Context, Template\n from django.test import SimpleTestCase\n-from django.utils import html\n-from django.utils.functional import lazy, lazystr\n+from django.utils import html, translation\n+from django.utils.functional import Promise, lazy, lazystr\n from django.utils.safestring import SafeData, SafeString, mark_safe\n+from django.utils.translation import gettext_lazy\n \n \n class customescape(str):\n@@ -40,10 +41,17 @@ def test_mark_safe_object_implementing_dunder_html(self):\n         self.assertRenderEqual(\"{{ s|force_escape }}\", \"&lt;a&amp;b&gt;\", s=s)\n \n     def test_mark_safe_lazy(self):\n-        s = lazystr(\"a&b\")\n+        safe_s = mark_safe(lazystr(\"a&b\"))\n \n-        self.assertIsInstance(mark_safe(s), SafeData)\n-        self.assertRenderEqual(\"{{ s }}\", \"a&b\", s=mark_safe(s))\n+        self.assertIsInstance(safe_s, Promise)\n+        self.assertRenderEqual(\"{{ s }}\", \"a&b\", s=safe_s)\n+        self.assertIsInstance(str(safe_s), SafeData)\n+\n+    def test_mark_safe_lazy_i18n(self):\n+        s = mark_safe(gettext_lazy(\"name\"))\n+        tpl = Template(\"{{ s }}\")\n+        with translation.override(\"fr\"):\n+            self.assertEqual(tpl.render(Context({\"s\": s})), \"nom\")\n \n     def test_mark_safe_object_implementing_dunder_str(self):\n         class Obj:\n",
  "problem_statement": "django.utils.safestring.mark_safe forces evaluation of lazy objects\nDescription\n\t\nConsider the following example:\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import activate, ugettext_lazy as _\ns = mark_safe(_(\"username\"))\ntpl = Template('{{ s }}')\nactivate('fr')\nprint(tpl.render(Context({'s': s})))\nI would expect this to output nom d'utilisateur (which is the french translation of username) but what happens instead is that it outputs username.\nThe reason for this is that mark_safe will force the evaluation of the lazy string provided by ugettext_lazy when it's called.\nUnfortunately, the solution to this it trickier than simply wrapping mark_safe with django.utils.functional.allow_lazy, because mark_safe can operate both on bytes and text (and allow_lazy needs to know the type of object return by the wrapped function).\nI wrote some tests and a proposed solution on my branch: ​https://github.com/bmispelon/django/compare/lazy-safedata\n",
  "hints_text": "I created a pull request: ​https://github.com/django/django/pull/1093\nI verified the problem exists. The patch fixes the problem, and has tests.\nSince it might not be clear, I'd like to point that the reason we can't simply decorate mark_safe with allow_lazy is that mark_safe can return either bytes or text. The allow_lazy decorator cannot handle this case (there are specific checks in the code for it). [1] [1] ​https://github.com/django/django/blob/master/django/utils/functional.py#L106\nIn 2ee447fb5f8974b432d3dd421af9a242215aea44: Fixed #20296 -- Allowed SafeData and EscapeData to be lazy\nIn a878bf9b093bf15d751b070d132fec52a7523a47: Revert \"Fixed #20296 -- Allowed SafeData and EscapeData to be lazy\" This reverts commit 2ee447fb5f8974b432d3dd421af9a242215aea44. That commit introduced a regression (#21882) and didn't really do what it was supposed to: while it did delay the evaluation of lazy objects passed to mark_safe(), they weren't actually marked as such so they could end up being escaped twice. Refs #21882.\nA better fix for the issue is here: ​https://github.com/django/django/pull/2234\nThe current PR does not merge cleanly.\nI closed the PR (it is still there for anyone who'd like to see how it looked like). If I have some time, I'll try to see if the approach still works and I'll reopen it. Thanks for the ping.\nIn the steps to reproduce, should mark_safe() be inside ugettext_lazy() as in #27803 instead of the other way around? If so, maybe this is a wontfix, assuming the documentation is clear about proper usage.\nThis should be an easy fix now I believe. mark_safe no longer operates on both bytes and text, so wrapping it with keep_lazy (the new allow_lazy) should solve the issue.",
  "created_at": "2022-02-18T19:29:03Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_mark_safe_lazy (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe_lazy_i18n (utils_tests.test_safestring.SafeStringTest)\"]",
  "PASS_TO_PASS": "[\"test_add_lazy_safe_text_and_safe_text (utils_tests.test_safestring.SafeStringTest)\", \"test_default_additional_attrs (utils_tests.test_safestring.SafeStringTest)\", \"test_default_safe_data_additional_attrs (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe (utils_tests.test_safestring.SafeStringTest)\", \"mark_safe used as a decorator leaves the result of a function\", \"mark_safe doesn't affect a callable that has an __html__() method.\", \"mark_safe doesn't affect lazy strings (Promise objects).\", \"test_mark_safe_lazy_result_implements_dunder_html (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe_object_implementing_dunder_html (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe_object_implementing_dunder_str (utils_tests.test_safestring.SafeStringTest)\", \"test_mark_safe_result_implements_dunder_html (utils_tests.test_safestring.SafeStringTest)\", \"Calling str() on a SafeString instance doesn't lose the safe status.\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.730078",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}