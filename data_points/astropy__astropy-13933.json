{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13933",
  "base_commit": "5aa2d0beca53988e054d496c6dcfa2199a405fb8",
  "patch": "diff --git a/astropy/coordinates/angles.py b/astropy/coordinates/angles.py\n--- a/astropy/coordinates/angles.py\n+++ b/astropy/coordinates/angles.py\n@@ -5,6 +5,7 @@\n coordinates in astropy.\n \"\"\"\n \n+import functools\n from collections import namedtuple\n \n import numpy as np\n@@ -157,7 +158,7 @@ def _tuple_to_float(angle, unit):\n \n     @staticmethod\n     def _convert_unit_to_angle_unit(unit):\n-        return u.hourangle if unit is u.hour else unit\n+        return u.hourangle if unit == u.hour else unit\n \n     def _set_unit(self, unit):\n         super()._set_unit(self._convert_unit_to_angle_unit(unit))\n@@ -211,8 +212,10 @@ def to_string(self, unit=None, decimal=False, sep='fromunit',\n             used.\n \n         decimal : bool, optional\n-            If `True`, a decimal representation will be used, otherwise\n-            the returned string will be in sexagesimal form.\n+            If `False`, the returned string will be in sexagesimal form\n+            if possible (for units of degrees or hourangle).  If `True`,\n+            a decimal representation will be used. In that case, no unit\n+            will be appended if ``format`` is not explicitly given.\n \n         sep : str, optional\n             The separator between numbers in a sexagesimal\n@@ -274,7 +277,7 @@ def to_string(self, unit=None, decimal=False, sep='fromunit',\n             unit = self._convert_unit_to_angle_unit(u.Unit(unit))\n \n         separators = {\n-            None: {\n+            'generic': {\n                 u.degree: 'dms',\n                 u.hourangle: 'hms'},\n             'latex': {\n@@ -287,75 +290,31 @@ def to_string(self, unit=None, decimal=False, sep='fromunit',\n         # 'latex_inline' provides no functionality beyond what 'latex' offers,\n         # but it should be implemented to avoid ValueErrors in user code.\n         separators['latex_inline'] = separators['latex']\n-\n-        if sep == 'fromunit':\n-            if format not in separators:\n-                raise ValueError(f\"Unknown format '{format}'\")\n-            seps = separators[format]\n-            if unit in seps:\n-                sep = seps[unit]\n+        # Default separators are as for generic.\n+        separators[None] = separators['generic']\n \n         # Create an iterator so we can format each element of what\n         # might be an array.\n-        if unit is u.degree:\n-            if decimal:\n-                values = self.degree\n-                if precision is not None:\n-                    func = (\"{0:0.\" + str(precision) + \"f}\").format\n-                else:\n-                    func = '{:g}'.format\n-            else:\n-                if sep == 'fromunit':\n-                    sep = 'dms'\n-                values = self.degree\n-                func = lambda x: form.degrees_to_string(\n-                    x, precision=precision, sep=sep, pad=pad,\n-                    fields=fields)\n-\n-        elif unit is u.hourangle:\n-            if decimal:\n-                values = self.hour\n-                if precision is not None:\n-                    func = (\"{0:0.\" + str(precision) + \"f}\").format\n-                else:\n-                    func = '{:g}'.format\n-            else:\n-                if sep == 'fromunit':\n-                    sep = 'hms'\n-                values = self.hour\n-                func = lambda x: form.hours_to_string(\n-                    x, precision=precision, sep=sep, pad=pad,\n-                    fields=fields)\n-\n-        elif unit.is_equivalent(u.radian):\n-            if decimal:\n-                values = self.to_value(unit)\n-                if precision is not None:\n-                    func = (\"{0:1.\" + str(precision) + \"f}\").format\n-                else:\n-                    func = \"{:g}\".format\n-            elif sep == 'fromunit':\n-                values = self.to_value(unit)\n+        if not decimal and (unit_is_deg := unit == u.degree\n+                            or unit == u.hourangle):\n+            # Sexagesimal.\n+            if sep == 'fromunit':\n+                if format not in separators:\n+                    raise ValueError(f\"Unknown format '{format}'\")\n+                sep = separators[format][unit]\n+            func = functools.partial(\n+                form.degrees_to_string if unit_is_deg else form.hours_to_string,\n+                precision=precision, sep=sep, pad=pad, fields=fields)\n+        else:\n+            if sep != 'fromunit':\n+                raise ValueError(f\"'{unit}' can not be represented in sexagesimal notation\")\n+            func = (\"{:g}\" if precision is None else f\"{{0:0.{precision}f}}\").format\n+            if not (decimal and format is None):  # Don't add unit by default for decimal.\n                 unit_string = unit.to_string(format=format)\n                 if format == 'latex' or format == 'latex_inline':\n                     unit_string = unit_string[1:-1]\n-\n-                if precision is not None:\n-                    def plain_unit_format(val):\n-                        return (\"{0:0.\" + str(precision) + \"f}{1}\").format(\n-                            val, unit_string)\n-                    func = plain_unit_format\n-                else:\n-                    def plain_unit_format(val):\n-                        return f\"{val:g}{unit_string}\"\n-                    func = plain_unit_format\n-            else:\n-                raise ValueError(\n-                    f\"'{unit.name}' can not be represented in sexagesimal notation\")\n-\n-        else:\n-            raise u.UnitsError(\n-                \"The unit value provided is not an angular unit.\")\n+                format_func = func\n+                func = lambda x: format_func(x) + unit_string\n \n         def do_format(val):\n             # Check if value is not nan to avoid ValueErrors when turning it into\n@@ -370,6 +329,7 @@ def do_format(val):\n             s = f\"{val}\"\n             return s\n \n+        values = self.to_value(unit)\n         format_ufunc = np.vectorize(do_format, otypes=['U'])\n         result = format_ufunc(values)\n \n@@ -581,6 +541,8 @@ def _validate_angles(self, angles=None):\n         if angles is None:\n             angles = self\n \n+        # For speed, compare using \"is\", which is not strictly guaranteed to hold,\n+        # but if it doesn't we'll just convert correctly in the 'else' clause.\n         if angles.unit is u.deg:\n             limit = 90\n         elif angles.unit is u.rad:\ndiff --git a/astropy/visualization/wcsaxes/formatter_locator.py b/astropy/visualization/wcsaxes/formatter_locator.py\n--- a/astropy/visualization/wcsaxes/formatter_locator.py\n+++ b/astropy/visualization/wcsaxes/formatter_locator.py\n@@ -394,14 +394,7 @@ def formatter(self, values, spacing, format='auto'):\n             is_latex = format == 'latex' or (format == 'auto' and rcParams['text.usetex'])\n \n             if decimal:\n-                # At the moment, the Angle class doesn't have a consistent way\n-                # to always convert angles to strings in decimal form with\n-                # symbols for units (instead of e.g 3arcsec). So as a workaround\n-                # we take advantage of the fact that Angle.to_string converts\n-                # the unit to a string manually when decimal=False and the unit\n-                # is not strictly u.degree or u.hourangle\n                 if self.show_decimal_unit:\n-                    decimal = False\n                     sep = 'fromunit'\n                     if is_latex:\n                         fmt = 'latex'\n@@ -409,10 +402,10 @@ def formatter(self, values, spacing, format='auto'):\n                         if unit is u.hourangle:\n                             fmt = 'unicode'\n                         else:\n-                            fmt = None\n+                            fmt = 'generic'\n                     unit = CUSTOM_UNITS.get(unit, unit)\n                 else:\n-                    sep = None\n+                    sep = 'fromunit'\n                     fmt = None\n             elif self.sep is not None:\n                 sep = self.sep\n",
  "test_patch": "diff --git a/astropy/coordinates/tests/test_angles.py b/astropy/coordinates/tests/test_angles.py\n--- a/astropy/coordinates/tests/test_angles.py\n+++ b/astropy/coordinates/tests/test_angles.py\n@@ -1,6 +1,7 @@\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \"\"\"Test initialization and other aspects of Angle and subclasses\"\"\"\n \n+import pickle\n import threading\n \n import numpy as np\n@@ -77,6 +78,7 @@ def test_create_angles():\n     a22 = Angle(\"3.6h\", unit=u.hour)\n     a23 = Angle(\"- 3h\", unit=u.hour)\n     a24 = Angle(\"+ 3h\", unit=u.hour)\n+    a25 = Angle(3., unit=u.hour**1)\n \n     # ensure the above angles that should match do\n     assert a1 == a2 == a3 == a4 == a5 == a6 == a8 == a18 == a19 == a20\n@@ -90,6 +92,7 @@ def test_create_angles():\n     assert a11 == a12 == a13 == a14\n     assert a21 == a22\n     assert a23 == -a24\n+    assert a24 == a25\n \n     # check for illegal ranges / values\n     with pytest.raises(IllegalSecondError):\n@@ -353,6 +356,9 @@ def string(self, unit=DEGREE, decimal=False, sep=\" \", precision=5,\n     assert angle2.to_string(unit=u.hour, pad=True) == '-01h14m04.444404s'\n     assert angle.to_string(unit=u.radian, decimal=True) == '-0.0215473'\n \n+    # We should recognize units that are equal but not identical\n+    assert angle.to_string(unit=u.hour**1) == '-0h04m56.2962936s'\n+\n \n def test_to_string_vector():\n     # Regression test for the fact that vectorize doesn't work with Numpy 1.6\n@@ -1142,3 +1148,16 @@ def test_latitude_out_of_limits(value, dtype):\n     \"\"\"\n     with pytest.raises(ValueError, match=r\"Latitude angle\\(s\\) must be within.*\"):\n         Latitude(value, u.rad, dtype=dtype)\n+\n+\n+def test_angle_pickle_to_string():\n+    \"\"\"\n+    Ensure that after pickling we can still do to_string on hourangle.\n+\n+    Regression test for gh-13923.\n+    \"\"\"\n+    angle = Angle(0.25 * u.hourangle)\n+    expected = angle.to_string()\n+    via_pickle = pickle.loads(pickle.dumps(angle))\n+    via_pickle_string = via_pickle.to_string()  # This used to fail.\n+    assert via_pickle_string == expected\ndiff --git a/astropy/coordinates/tests/test_formatting.py b/astropy/coordinates/tests/test_formatting.py\n--- a/astropy/coordinates/tests/test_formatting.py\n+++ b/astropy/coordinates/tests/test_formatting.py\n@@ -2,7 +2,7 @@\n Tests the Angle string formatting capabilities.  SkyCoord formatting is in\n test_sky_coord\n \"\"\"\n-\n+import pytest\n \n from astropy import units as u\n from astropy.coordinates.angles import Angle\n@@ -56,6 +56,9 @@ def test_to_string_decimal():\n     assert angle3.to_string(decimal=True, precision=1) == '4.0'\n     assert angle3.to_string(decimal=True, precision=0) == '4'\n \n+    with pytest.raises(ValueError, match='sexagesimal notation'):\n+        angle3.to_string(decimal=True, sep='abc')\n+\n \n def test_to_string_formats():\n     a = Angle(1.113355, unit=u.deg)\n@@ -76,6 +79,28 @@ def test_to_string_formats():\n     assert a.to_string(format='unicode') == '1.11336rad'\n \n \n+def test_to_string_decimal_formats():\n+    angle1 = Angle(2., unit=u.degree)\n+\n+    assert angle1.to_string(decimal=True, format='generic') == '2deg'\n+    assert angle1.to_string(decimal=True, format='latex') == '$2\\\\mathrm{{}^{\\\\circ}}$'\n+    assert angle1.to_string(decimal=True, format='unicode') == '2°'\n+\n+    angle2 = Angle(3., unit=u.hourangle)\n+    assert angle2.to_string(decimal=True, format='generic') == '3hourangle'\n+    assert angle2.to_string(decimal=True, format='latex') == '$3\\\\mathrm{{}^{h}}$'\n+    assert angle2.to_string(decimal=True, format='unicode') == '3ʰ'\n+\n+    angle3 = Angle(4., unit=u.radian)\n+\n+    assert angle3.to_string(decimal=True, format='generic') == '4rad'\n+    assert angle3.to_string(decimal=True, format='latex') == '$4\\\\mathrm{rad}$'\n+    assert angle3.to_string(decimal=True, format='unicode') == '4rad'\n+\n+    with pytest.raises(ValueError, match='Unknown format'):\n+        angle3.to_string(decimal=True, format='myformat')\n+\n+\n def test_to_string_fields():\n     a = Angle(1.113355, unit=u.deg)\n     assert a.to_string(fields=1) == r'1d'\n",
  "problem_statement": "Unpickled Angle.to_string fails\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n<!-- Please check that the development version still produces the same bug.\r\nYou can install development version with\r\npip install git+https://github.com/astropy/astropy\r\ncommand. -->\r\n\r\n### Description\r\n<!-- Provide a general description of the bug. -->\r\nPickling and unpickling an Angle object causes the to_string function to fail claiming hourangle and degree units cannot be represented in sexagesimal notation.\r\n\r\n### Steps to Reproduce\r\n<!-- Ideally a code example could be provided so we can run it ourselves. -->\r\n<!-- If you are pasting code, use triple backticks (```) around\r\nyour code snippet. -->\r\n<!-- If necessary, sanitize your screen output to be pasted so you do not\r\nreveal secrets like tokens and passwords. -->\r\n\r\n```python\r\nimport astropy.coordinates\r\nimport pickle\r\nang = astropy.coordinates.Angle(0.25 * astropy.units.hourangle)\r\npang = pickle.loads(pickle.dumps(ang))\r\nang.to_string()\r\n# Works: 0h15m00s\r\npang.to_string()\r\n# Fails: ValueError: 'hourangle' can not be represented in sexagesimal notation\r\n```\r\n\r\n### System Details\r\n<!-- Even if you do not think this is necessary, it is useful information for the maintainers.\r\nPlease run the following snippet and paste the output below:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"Numpy\", numpy.__version__)\r\nimport erfa; print(\"pyerfa\", erfa.__version__)\r\nimport astropy; print(\"astropy\", astropy.__version__)\r\nimport scipy; print(\"Scipy\", scipy.__version__)\r\nimport matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\n-->\r\nmacOS-10.15.7-x86_64-i386-64bit\r\nPython 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ]\r\nNumpy 1.23.4\r\npyerfa 2.0.0.1\r\nastropy 5.1\r\nScipy 1.9.3\r\nMatplotlib 3.6.1\n",
  "hints_text": "Welcome to Astropy 👋 and thank you for your first issue!\n\nA project member will respond to you as soon as possible; in the meantime, please double-check the [guidelines for submitting issues](https://github.com/astropy/astropy/blob/main/CONTRIBUTING.md#reporting-issues) and make sure you've provided the requested details.\n\nGitHub issues in the Astropy repository are used to track bug reports and feature requests; If your issue poses a question about how to use Astropy, please instead raise your question in the [Astropy Discourse user forum](https://community.openastronomy.org/c/astropy/8) and close this issue.\n\nIf you feel that this issue has not been responded to in a timely manner, please send a message directly to the [development mailing list](http://groups.google.com/group/astropy-dev).  If the issue is urgent or sensitive in nature (e.g., a security vulnerability) please send an e-mail directly to the private e-mail feedback@astropy.org.\nI can reproduce this also with 5.2.dev . @adrn , I vaguely remember you did some work on pickling such things?\nBit of troubleshooting: if one does `%debug` at that point, then `unit is u.hourangle` will return `False`, and thus one misses the branch that should typeset this: https://github.com/astropy/astropy/blob/0c37a7141c6c21c52ce054f2d895f6f6eacbf24b/astropy/coordinates/angles.py#L315-L329\r\n\r\nThe easy fix would be to replace `is` with `==`, but in princple I think pickling and unpickling the unit should have ensured the unit remains a singleton.\nIt seems like currently with pickle we guarantee only `IrreducibleUnits`?\r\n```\r\nIn [5]: pickle.loads(pickle.dumps(u.hourangle)) is u.hourangle\r\nOut[5]: False\r\n\r\nIn [6]: pickle.loads(pickle.dumps(u.rad)) is u.rad\r\nOut[6]: True\r\n\r\nIn [7]: pickle.loads(pickle.dumps(u.deg)) is u.deg\r\nOut[7]: False\r\n```\r\n\r\nEDIT: indeed only `IrreducibleUnits` have an `__reduce__` method that guarantees the units are the same:\r\nhttps://github.com/astropy/astropy/blob/0c37a7141c6c21c52ce054f2d895f6f6eacbf24b/astropy/units/core.py#L1854-L1864\nOK, I think `==` is correct. Will have a fix shortly.",
  "created_at": "2022-10-28T21:49:47Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"astropy/coordinates/tests/test_angles.py::test_create_angles\", \"astropy/coordinates/tests/test_angles.py::test_angle_formatting\", \"astropy/coordinates/tests/test_angles.py::test_angle_pickle_to_string\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_decimal\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_decimal_formats\"]",
  "PASS_TO_PASS": "[\"astropy/coordinates/tests/test_angles.py::test_angle_from_view\", \"astropy/coordinates/tests/test_angles.py::test_angle_ops\", \"astropy/coordinates/tests/test_angles.py::test_angle_methods\", \"astropy/coordinates/tests/test_angles.py::test_angle_convert\", \"astropy/coordinates/tests/test_angles.py::test_to_string_vector\", \"astropy/coordinates/tests/test_angles.py::test_angle_format_roundtripping\", \"astropy/coordinates/tests/test_angles.py::test_radec\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_dms\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_dm\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_hms\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_hm\", \"astropy/coordinates/tests/test_angles.py::test_negative_sixty_hm\", \"astropy/coordinates/tests/test_angles.py::test_plus_sixty_hm\", \"astropy/coordinates/tests/test_angles.py::test_negative_fifty_nine_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_plus_fifty_nine_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_negative_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_plus_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_angle_to_is_angle\", \"astropy/coordinates/tests/test_angles.py::test_angle_to_quantity\", \"astropy/coordinates/tests/test_angles.py::test_quantity_to_angle\", \"astropy/coordinates/tests/test_angles.py::test_angle_string\", \"astropy/coordinates/tests/test_angles.py::test_angle_repr\", \"astropy/coordinates/tests/test_angles.py::test_large_angle_representation\", \"astropy/coordinates/tests/test_angles.py::test_wrap_at_inplace\", \"astropy/coordinates/tests/test_angles.py::test_latitude\", \"astropy/coordinates/tests/test_angles.py::test_longitude\", \"astropy/coordinates/tests/test_angles.py::test_wrap_at\", \"astropy/coordinates/tests/test_angles.py::test_is_within_bounds\", \"astropy/coordinates/tests/test_angles.py::test_angle_mismatched_unit\", \"astropy/coordinates/tests/test_angles.py::test_regression_formatting_negative\", \"astropy/coordinates/tests/test_angles.py::test_regression_formatting_default_precision\", \"astropy/coordinates/tests/test_angles.py::test_empty_sep\", \"astropy/coordinates/tests/test_angles.py::test_create_tuple\", \"astropy/coordinates/tests/test_angles.py::test_list_of_quantities\", \"astropy/coordinates/tests/test_angles.py::test_multiply_divide\", \"astropy/coordinates/tests/test_angles.py::test_mixed_string_and_quantity\", \"astropy/coordinates/tests/test_angles.py::test_array_angle_tostring\", \"astropy/coordinates/tests/test_angles.py::test_wrap_at_without_new\", \"astropy/coordinates/tests/test_angles.py::test__str__\", \"astropy/coordinates/tests/test_angles.py::test_repr_latex\", \"astropy/coordinates/tests/test_angles.py::test_angle_with_cds_units_enabled\", \"astropy/coordinates/tests/test_angles.py::test_longitude_nan\", \"astropy/coordinates/tests/test_angles.py::test_latitude_nan\", \"astropy/coordinates/tests/test_angles.py::test_angle_wrap_at_nan\", \"astropy/coordinates/tests/test_angles.py::test_angle_multithreading\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input0-nan-nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input1-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input2-[6d00m00s\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input3-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input4-nan-nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input5-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input6-[6h00m00s\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input7-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input8-nan-nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input9-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input10-[1.5rad\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input11-[nan\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[1.5707963267948966-1.5707963267948966-None-float64--1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[1.5707963267948966-1.5707963267948966-None-float64-1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[1.5707963267948966-1.5707963267948966-float64-float64--1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[1.5707963267948966-1.5707963267948966-float64-float64-1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[value2-expected_value2-None-float32--1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[value2-expected_value2-None-float32-1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[value3-expected_value3-float32-float32--1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[value3-expected_value3-float32-float32-1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_out_of_limits[1.5708277427214323-float32]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_out_of_limits[value1-float32]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_out_of_limits[1.5708277427214323-float64]\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_precision\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_formats\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_fields\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_padding\", \"astropy/coordinates/tests/test_formatting.py::test_sexagesimal_rounding_up\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_scalar\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_radian_with_precision\", \"astropy/coordinates/tests/test_formatting.py::test_sexagesimal_round_down\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_fields_colon\"]",
  "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.535147",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}