{
  "repo": "django/django",
  "instance_id": "django__django-14430",
  "base_commit": "fde6fb28984a76d5bee794f4c0458eb25fe56fcd",
  "patch": "diff --git a/django/contrib/postgres/aggregates/statistics.py b/django/contrib/postgres/aggregates/statistics.py\n--- a/django/contrib/postgres/aggregates/statistics.py\n+++ b/django/contrib/postgres/aggregates/statistics.py\n@@ -36,9 +36,7 @@ class RegrAvgY(StatAggregate):\n class RegrCount(StatAggregate):\n     function = 'REGR_COUNT'\n     output_field = IntegerField()\n-\n-    def convert_value(self, value, expression, connection):\n-        return 0 if value is None else value\n+    empty_aggregate_value = 0\n \n \n class RegrIntercept(StatAggregate):\ndiff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -20,6 +20,7 @@ class Aggregate(Func):\n     filter_template = '%s FILTER (WHERE %%(filter)s)'\n     window_compatible = True\n     allow_distinct = False\n+    empty_aggregate_value = None\n \n     def __init__(self, *expressions, distinct=False, filter=None, **extra):\n         if distinct and not self.allow_distinct:\n@@ -107,6 +108,7 @@ class Count(Aggregate):\n     name = 'Count'\n     output_field = IntegerField()\n     allow_distinct = True\n+    empty_aggregate_value = 0\n \n     def __init__(self, expression, filter=None, **extra):\n         if expression == '*':\n@@ -115,9 +117,6 @@ def __init__(self, expression, filter=None, **extra):\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n         super().__init__(expression, filter=filter, **extra)\n \n-    def convert_value(self, value, expression, connection):\n-        return 0 if value is None else value\n-\n \n class Max(Aggregate):\n     function = 'MAX'\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -153,6 +153,7 @@ class BaseExpression:\n     # aggregate specific fields\n     is_summary = False\n     _output_field_resolved_to_none = False\n+    empty_aggregate_value = NotImplemented\n     # Can the expression be used in a WHERE clause?\n     filterable = True\n     # Can the expression can be used as a source expression in Window?\n@@ -795,6 +796,10 @@ def _resolve_output_field(self):\n         if isinstance(self.value, UUID):\n             return fields.UUIDField()\n \n+    @property\n+    def empty_aggregate_value(self):\n+        return self.value\n+\n \n class RawSQL(Expression):\n     def __init__(self, sql, params, output_field=None):\ndiff --git a/django/db/models/functions/comparison.py b/django/db/models/functions/comparison.py\n--- a/django/db/models/functions/comparison.py\n+++ b/django/db/models/functions/comparison.py\n@@ -65,6 +65,14 @@ def __init__(self, *expressions, **extra):\n             raise ValueError('Coalesce must take at least two expressions')\n         super().__init__(*expressions, **extra)\n \n+    @property\n+    def empty_aggregate_value(self):\n+        for expression in self.get_source_expressions():\n+            result = expression.empty_aggregate_value\n+            if result is NotImplemented or result is not None:\n+                return result\n+        return None\n+\n     def as_oracle(self, compiler, connection, **extra_context):\n         # Oracle prohibits mixing TextField (NCLOB) and CharField (NVARCHAR2),\n         # so convert all fields to NCLOB when that type is expected.\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -26,10 +26,13 @@ class SQLCompiler:\n         re.MULTILINE | re.DOTALL,\n     )\n \n-    def __init__(self, query, connection, using):\n+    def __init__(self, query, connection, using, elide_empty=True):\n         self.query = query\n         self.connection = connection\n         self.using = using\n+        # Some queries, e.g. coalesced aggregation, need to be executed even if\n+        # they would return an empty result set.\n+        self.elide_empty = elide_empty\n         self.quote_cache = {'*': '*'}\n         # The select, klass_info, and annotations are needed by QuerySet.iterator()\n         # these are set as a side-effect of executing the query. Note that we calculate\n@@ -458,7 +461,7 @@ def compile(self, node):\n     def get_combinator_sql(self, combinator, all):\n         features = self.connection.features\n         compilers = [\n-            query.get_compiler(self.using, self.connection)\n+            query.get_compiler(self.using, self.connection, self.elide_empty)\n             for query in self.query.combined_queries if not query.is_empty()\n         ]\n         if not features.supports_slicing_ordering_in_compound:\n@@ -535,7 +538,13 @@ def as_sql(self, with_limits=True, with_col_aliases=False):\n                 # This must come after 'select', 'ordering', and 'distinct'\n                 # (see docstring of get_from_clause() for details).\n                 from_, f_params = self.get_from_clause()\n-                where, w_params = self.compile(self.where) if self.where is not None else (\"\", [])\n+                try:\n+                    where, w_params = self.compile(self.where) if self.where is not None else ('', [])\n+                except EmptyResultSet:\n+                    if self.elide_empty:\n+                        raise\n+                    # Use a predicate that's always False.\n+                    where, w_params = '0 = 1', []\n                 having, h_params = self.compile(self.having) if self.having is not None else (\"\", [])\n                 result = ['SELECT']\n                 params = []\n@@ -1652,7 +1661,7 @@ def as_sql(self):\n         params = tuple(params)\n \n         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(\n-            self.using\n+            self.using, elide_empty=self.elide_empty,\n         ).as_sql(with_col_aliases=True)\n         sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)\n         params = params + inner_query_params\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -273,12 +273,12 @@ def __deepcopy__(self, memo):\n         memo[id(self)] = result\n         return result\n \n-    def get_compiler(self, using=None, connection=None):\n+    def get_compiler(self, using=None, connection=None, elide_empty=True):\n         if using is None and connection is None:\n             raise ValueError(\"Need either using or connection\")\n         if using:\n             connection = connections[using]\n-        return connection.ops.compiler(self.compiler)(self, connection, using)\n+        return connection.ops.compiler(self.compiler)(self, connection, using, elide_empty)\n \n     def get_meta(self):\n         \"\"\"\n@@ -490,14 +490,19 @@ def get_aggregation(self, using, added_aggregate_names):\n             self.default_cols = False\n             self.extra = {}\n \n+        empty_aggregate_result = [\n+            expression.empty_aggregate_value\n+            for expression in outer_query.annotation_select.values()\n+        ]\n+        elide_empty = not any(result is NotImplemented for result in empty_aggregate_result)\n         outer_query.clear_ordering(force=True)\n         outer_query.clear_limits()\n         outer_query.select_for_update = False\n         outer_query.select_related = False\n-        compiler = outer_query.get_compiler(using)\n+        compiler = outer_query.get_compiler(using, elide_empty=elide_empty)\n         result = compiler.execute_sql(SINGLE)\n         if result is None:\n-            result = [None] * len(outer_query.annotation_select)\n+            result = empty_aggregate_result\n \n         converters = compiler.get_converters(outer_query.annotation_select.values())\n         result = next(compiler.apply_converters((result,), converters))\n",
  "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -8,6 +8,7 @@\n     Avg, Case, Count, DecimalField, DurationField, Exists, F, FloatField,\n     IntegerField, Max, Min, OuterRef, Subquery, Sum, Value, When,\n )\n+from django.db.models.expressions import Func, RawSQL\n from django.db.models.functions import Coalesce, Greatest\n from django.test import TestCase\n from django.test.testcases import skipUnlessDBFeature\n@@ -1340,3 +1341,64 @@ def test_aggregation_random_ordering(self):\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n         ], lambda a: (a.name, a.contact_count), ordered=False)\n+\n+    def test_empty_result_optimization(self):\n+        with self.assertNumQueries(0):\n+            self.assertEqual(\n+                Publisher.objects.none().aggregate(\n+                    sum_awards=Sum('num_awards'),\n+                    books_count=Count('book'),\n+                ), {\n+                    'sum_awards': None,\n+                    'books_count': 0,\n+                }\n+            )\n+        # Expression without empty_aggregate_value forces queries to be\n+        # executed even if they would return an empty result set.\n+        raw_books_count = Func('book', function='COUNT')\n+        raw_books_count.contains_aggregate = True\n+        with self.assertNumQueries(1):\n+            self.assertEqual(\n+                Publisher.objects.none().aggregate(\n+                    sum_awards=Sum('num_awards'),\n+                    books_count=raw_books_count,\n+                ), {\n+                    'sum_awards': None,\n+                    'books_count': 0,\n+                }\n+            )\n+\n+    def test_coalesced_empty_result_set(self):\n+        with self.assertNumQueries(0):\n+            self.assertEqual(\n+                Publisher.objects.none().aggregate(\n+                    sum_awards=Coalesce(Sum('num_awards'), 0),\n+                )['sum_awards'],\n+                0,\n+            )\n+        # Multiple expressions.\n+        with self.assertNumQueries(0):\n+            self.assertEqual(\n+                Publisher.objects.none().aggregate(\n+                    sum_awards=Coalesce(Sum('num_awards'), None, 0),\n+                )['sum_awards'],\n+                0,\n+            )\n+        # Nested coalesce.\n+        with self.assertNumQueries(0):\n+            self.assertEqual(\n+                Publisher.objects.none().aggregate(\n+                    sum_awards=Coalesce(Coalesce(Sum('num_awards'), None), 0),\n+                )['sum_awards'],\n+                0,\n+            )\n+        # Expression coalesce.\n+        with self.assertNumQueries(1):\n+            self.assertIsInstance(\n+                Store.objects.none().aggregate(\n+                    latest_opening=Coalesce(\n+                        Max('original_opening'), RawSQL('CURRENT_TIMESTAMP', []),\n+                    ),\n+                )['latest_opening'],\n+                datetime.datetime,\n+            )\n",
  "problem_statement": "Coalesce in Aggregations ignored when EmptyResultSet returned\nDescription\n\t\nUsing an empty list when using the __in= returns an EmptyResultSet and prevents an Aggregate Coalesce from working properly. See below:\n# Test with matched Queryset. Sum will return 50\nOrderItem.objects.filter(pk__in=[1]).aggregate(test=Coalesce(Sum('quantity'), Value(0)))\n>>>{'test': 50}\n# Test with unmatched Queryset. Sum will return 0\nOrderItem.objects.filter(pk__in=[-1]).aggregate(test=Coalesce(Sum('quantity'), Value(0)))\n>>> {'test':0}\n# Test with unmatched Queryset (using empty list). EmptyResultSet returned because of empty list. Sum will return NONE\nOrderItem.objects.filter(pk__in=[]).aggregate(test=Coalesce(Sum('quantity'), Value(0)))\n>>> {'test': None}\nSimon Charette on django-users suggested the following:\nFrom what I understand the ORM simply doesn't perform any query in this case\nas the pk__in lookup cannot match any OrderItem and result in an\nEmptyResultSet exception[1].\nThis exception is caught in the Query.get_aggregation() method where all\naggregates are converted to None[2].\nI suppose we should alter the except EmptyResultSet clause to account for\nouter_query.annotation_select items that are Coalesce() instances used with\nValue() but I'm unsure about how it should be done.\n[1] ​https://github.com/django/django/blob/2e0cd26ffb29189add1e0435913fd1490f52b20d/django/db/models/lookups.py#L221-L223\n[2] ​https://github.com/django/django/blob/2e0cd26ffb29189add1e0435913fd1490f52b20d/django/db/models/sql/query.py#L439-L445\nSee full discussion here:\n​https://groups.google.com/forum/#!topic/django-users/HGD3Vv3IerA\n",
  "hints_text": "I do agree that this is a bug, but I don't think the correct fix is to detect specific expressions and apply custom logic for each one. Simon mentioned nested expressions which would be very difficult to resolve the correct behaviour for. For what it's worth, a Count will also show None in an EmptyResultSet even though its converters should coerce None to 0. The reason it doesn't is because the expressions and aggregates aren't actually used. Everything is Noned. If I was writing this from scratch I'd raise an error on receiving an EmptyResultSet. An empty list in a filter clause seems like broken behaviour. We can't do that though, because it's backwards incompatible, and there's probably valid use cases for this behaviour now. A possible fix would be to implement something like on_empty_result for Expressions, to let each subclass decide what it should return if it's not executed. It would have to recursively call this method, and then decide which children should be allowed to propagate their values. But honestly, this seems like a lot of work and complexity for very little gain. Short of documentation changes or a deprecation, I'd be tempted to wontfix this. I'm certainly open to ideas I haven't considered though.\nI can agree that detecting specific expressions is overkill and for that matter, not scalable. However, I don't think an \"empty list in a filter clause seems like broken behavior\". As you mentioned about valid use cases: I'm using this with a SelectMultiple which obviously allows users to select no options. Writing custom validation to prevent an empty query should be the responsibility of the developer, but not enforced at the framework level. It seems like this could be avoided by modifying the logic of In.rhs (and/or not throwing the EmptyResultSet at all?), but this is my first bug and I'm not versed enough to discern.\nI agree with Josh that the on_empty_result approach seems like a lot of work for very little gain but I can't see any other way to fix this issue appropriately. @ryanprater not throwing EmptyResultSet in the In lookup would solve your particular issue but the underlying one would remain, using Coalesce with aggregation can result in an unexpected return value as EmptyResultSet is thrown by other part of Django (queryset.none() relies on it).\nMaybe we could somehow skip throwing EmptyResultSet when doing an .aggregate() call, but throw it when doing normal queries. One idea is to use query.add_context('in_aggregate_query', True), and then check compiler.query.context before throwing the EmptyResultSet. Another possible idea is to add as_python() methods to pretty much every part of the ORM. The as_python() method would run the expressions as Python code, so you could run whole querysets without actually touching the database. For the case where the query for .aggregate() generates an EmptyResultSet we would run the queryset in Python against one row having all None values, thus producing the wanted answer. This could be extremely convenient for testing, too. OTOH doing this properly will require at least a couple of months of work, so this is for sure overkill for this issue.\nFWIW I gave a naive try at implementing the get_empty_result() approach suggested by Josh: ​https://github.com/django/django/pull/6361 The full suite pass but coalesced results relying on database functions (e.g. NOW()) are not supported.\nSee #26433 for related issue and a new idea for solving this. Marking as accepted, I think we can solve this without unreasonable effort.\nThis happens to be addressed by ​https://github.com/django/django/pull/12602\nReplying to Simon Charette: This happens to be addressed by ​https://github.com/django/django/pull/12602 I was looking into reviving ​https://github.com/django/django/pull/12602. It seems that some parts of that were already addressed in c2d4926702045e342a668057f0a758eec9db9436. Notably this ​solved the None instead of 0 issue for Count() in aggregation_regress.tests.AggregationTests.test_empty_filter_aggregate. It doesn't seem to be true that this ticket will be addressed by that PR as implied by ​this comment. Changing the test to use Coalesce() as below still fails with total_age being None. There is nothing to determine that the second argument of Coalesce() should be used. self.assertEqual( - Author.objects.filter(id__in=[]).annotate(Count('friends')).aggregate(Count('pk')), - {'pk__count': 0}, + Author.objects.filter(pk__in=[]).annotate(Count('friends')).aggregate(total_age=Coalesce(Sum('age'), 0)), + {'total_age': 0}, ) In the case of Count() we get 0 because of Count.convert_value() explicitly returning 0 if the value is None. It seems that ​https://github.com/django/django/pull/6361 would be the way forward. Was there a reason you abandoned that approach, Simon? Would you be happy for me to pick that up again?\nSorry for the delayed answer Nick. It seems that ​​https://github.com/django/django/pull/6361 would be the way forward. Was there a reason you abandoned that approach, Simon? Would you be happy for me to pick that up again? I think it would be the most straightforward way to get there but the main issue with the get_empty_result approach is coalescence to database expressions e.g. Coalesce('col', Now()). It's tempting to mock our way there and cheat for provided expressions in implementing Python equivalent (e.g. Now.get_empty_result -> timezone.now) but it has its limits (e.g. imagine coalescing to calling a database procedure). In the end EmptyResultSet is meant to be an optimization so I believe we should turn it off in circumstances where it affects the correctness of the returned results. A simpler approach, inspired by Anssi's comment:4, would be to add a SQLCompiler.supports_empty_result_set = False property and set it to False for SQLAggregateCompiler. Parts of the code that raise this exception could then be adjusted not to do so when the current compiler doesn't support it. (completely untested) django/db/models/lookups.py diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py index 8d3648b393..0b02287d2a 100644 a b def process_rhs(self, compiler, connection): 392392 except TypeError: # Unhashable items in self.rhs 393393 rhs = [r for r in self.rhs if r is not None] 394394 395 if not rhs: 395 if not rhs and compiler.supports_empty_result_set: 396396 raise EmptyResultSet 397397 398398 # rhs should be an iterable; use batch_process_rhs() to django/db/models/sql/compiler.py diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py index 7264929da8..6cfcbf7f9f 100644 a b class SQLCompiler: 2525 r'^(.*)\\s(?:ASC|DESC).*', 2626 re.MULTILINE | re.DOTALL, 2727 ) 28 supports_empty_result_set = True 2829 2930 def __init__(self, query, connection, using): 3031 self.query = query … … def pre_sql_setup(self): 16361637 16371638 16381639class SQLAggregateCompiler(SQLCompiler): 1640 # Due to the nature of aggregation coalescence some expressions might 1641 # need to be interpreted on the database to return the correct value 1642 # when dealing with an empty result set. 1643 supports_empty_result_set = False 1644 16391645 def as_sql(self): 16401646 \"\"\" 16411647 Create the SQL for this query. Return the SQL string and list of I guess we could also use an hybrid approach where SQLAggregateCompiler only sets supports_empty_result_set = False if any of outer_query.annotation_select.items() pass through .get_empty_result() is not a literal value prior to proceeding with the compilation/as_sql phase. That would keep the optimization for most cases but fallback to the database when it cannot be computed on the Python side.",
  "created_at": "2021-05-22T02:52:35Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_coalesced_empty_result_set (aggregation.tests.AggregateTestCase)\", \"test_empty_result_optimization (aggregation.tests.AggregateTestCase)\"]",
  "PASS_TO_PASS": "[\"test_add_implementation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_alias (aggregation.tests.AggregateTestCase)\", \"test_aggregate_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_in_order_by (aggregation.tests.AggregateTestCase)\", \"test_aggregate_join_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregate_multi_join (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_aggregate (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_transform (aggregation.tests.AggregateTestCase)\", \"test_aggregation_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_expressions (aggregation.tests.AggregateTestCase)\", \"test_aggregation_nested_subquery_outerref (aggregation.tests.AggregateTestCase)\", \"test_aggregation_order_by_not_selected_annotation_values (aggregation.tests.AggregateTestCase)\", \"Random() is not included in the GROUP BY when used for ordering.\", \"Subquery annotations are excluded from the GROUP BY if they are\", \"test_aggregation_subquery_annotation_exists (aggregation.tests.AggregateTestCase)\", \"Subquery annotations must be included in the GROUP BY if they use\", \"test_aggregation_subquery_annotation_related_field (aggregation.tests.AggregateTestCase)\", \"Subquery annotations and external aliases are excluded from the GROUP\", \"test_aggregation_subquery_annotation_values_collision (aggregation.tests.AggregateTestCase)\", \"test_annotate_basic (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer_select_related (aggregation.tests.AggregateTestCase)\", \"test_annotate_m2m (aggregation.tests.AggregateTestCase)\", \"test_annotate_ordering (aggregation.tests.AggregateTestCase)\", \"test_annotate_over_annotate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_list (aggregation.tests.AggregateTestCase)\", \"test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotation (aggregation.tests.AggregateTestCase)\", \"test_annotation_expressions (aggregation.tests.AggregateTestCase)\", \"test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase)\", \"test_avg_decimal_field (aggregation.tests.AggregateTestCase)\", \"test_avg_duration_field (aggregation.tests.AggregateTestCase)\", \"test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)\", \"test_combine_different_types (aggregation.tests.AggregateTestCase)\", \"test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase)\", \"test_complex_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_count (aggregation.tests.AggregateTestCase)\", \"test_count_distinct_expression (aggregation.tests.AggregateTestCase)\", \"test_count_star (aggregation.tests.AggregateTestCase)\", \".dates() returns a distinct set of dates when applied to a\", \"test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase)\", \"test_distinct_on_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_aggregate (aggregation.tests.AggregateTestCase)\", \"test_even_more_aggregate (aggregation.tests.AggregateTestCase)\", \"test_expression_on_aggregation (aggregation.tests.AggregateTestCase)\", \"test_filter_aggregate (aggregation.tests.AggregateTestCase)\", \"test_filtering (aggregation.tests.AggregateTestCase)\", \"test_fkey_aggregate (aggregation.tests.AggregateTestCase)\", \"Exists annotations are included in the GROUP BY if they are\", \"Subquery annotations are included in the GROUP BY if they are\", \"An annotation included in values() before an aggregate should be\", \"test_more_aggregation (aggregation.tests.AggregateTestCase)\", \"test_multi_arg_aggregate (aggregation.tests.AggregateTestCase)\", \"test_multiple_aggregates (aggregation.tests.AggregateTestCase)\", \"An annotation not included in values() before an aggregate should be\", \"test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase)\", \"test_nonfield_annotation (aggregation.tests.AggregateTestCase)\", \"test_order_of_precedence (aggregation.tests.AggregateTestCase)\", \"test_related_aggregate (aggregation.tests.AggregateTestCase)\", \"test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase)\", \"test_single_aggregate (aggregation.tests.AggregateTestCase)\", \"Sum on a distinct() QuerySet should aggregate only the distinct items.\", \"test_sum_duration_field (aggregation.tests.AggregateTestCase)\", \"Subqueries do not needlessly contain ORDER BY, SELECT FOR UPDATE or\", \"Aggregation over sliced queryset works correctly.\", \"Doing exclude() on a foreign model after annotate() doesn't crash.\", \"test_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.691948",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}