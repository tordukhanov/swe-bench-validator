{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14806",
  "base_commit": "5cf88db24491112d2b8672f75df22f65a140d167",
  "patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -101,6 +101,13 @@ class IterativeImputer(TransformerMixin, BaseEstimator):\n         \"random\"\n             A random order for each round.\n \n+    skip_complete : boolean, optional (default=False)\n+        If ``True`` then features with missing values during ``transform``\n+        which did not have any missing values during ``fit`` will be imputed\n+        with the initial imputation method only. Set to ``True`` if you have\n+        many features with no missing values at both ``fit`` and ``transform``\n+        time to save compute.\n+\n     min_value : float, optional (default=None)\n         Minimum possible imputed value. Default of ``None`` will set minimum\n         to negative infinity.\n@@ -153,6 +160,10 @@ class IterativeImputer(TransformerMixin, BaseEstimator):\n         Indicator used to add binary indicators for missing values.\n         ``None`` if add_indicator is False.\n \n+    random_state_ : RandomState instance\n+        RandomState instance that is generated either from a seed, the random\n+        number generator or by `np.random`.\n+\n     See also\n     --------\n     SimpleImputer : Univariate imputation of missing values.\n@@ -166,10 +177,6 @@ class IterativeImputer(TransformerMixin, BaseEstimator):\n     Features which contain all missing values at ``fit`` are discarded upon\n     ``transform``.\n \n-    Features with missing values during ``transform`` which did not have any\n-    missing values during ``fit`` will be imputed with the initial imputation\n-    method only.\n-\n     References\n     ----------\n     .. [1] `Stef van Buuren, Karin Groothuis-Oudshoorn (2011). \"mice:\n@@ -192,6 +199,7 @@ def __init__(self,\n                  n_nearest_features=None,\n                  initial_strategy=\"mean\",\n                  imputation_order='ascending',\n+                 skip_complete=False,\n                  min_value=None,\n                  max_value=None,\n                  verbose=0,\n@@ -206,6 +214,7 @@ def __init__(self,\n         self.n_nearest_features = n_nearest_features\n         self.initial_strategy = initial_strategy\n         self.imputation_order = imputation_order\n+        self.skip_complete = skip_complete\n         self.min_value = min_value\n         self.max_value = max_value\n         self.verbose = verbose\n@@ -258,13 +267,6 @@ def _impute_one_feature(self,\n             The fitted estimator used to impute\n             ``X_filled[missing_row_mask, feat_idx]``.\n         \"\"\"\n-\n-        # if nothing is missing, just return the default\n-        # (should not happen at fit time because feat_ids would be excluded)\n-        missing_row_mask = mask_missing_values[:, feat_idx]\n-        if not np.any(missing_row_mask):\n-            return X_filled, estimator\n-\n         if estimator is None and fit_mode is False:\n             raise ValueError(\"If fit_mode is False, then an already-fitted \"\n                              \"estimator should be passed in.\")\n@@ -272,6 +274,7 @@ def _impute_one_feature(self,\n         if estimator is None:\n             estimator = clone(self._estimator)\n \n+        missing_row_mask = mask_missing_values[:, feat_idx]\n         if fit_mode:\n             X_train = safe_indexing(X_filled[:, neighbor_feat_idx],\n                                     ~missing_row_mask)\n@@ -279,14 +282,19 @@ def _impute_one_feature(self,\n                                     ~missing_row_mask)\n             estimator.fit(X_train, y_train)\n \n-        # get posterior samples\n+        # if no missing values, don't predict\n+        if np.sum(missing_row_mask) == 0:\n+            return X_filled, estimator\n+\n+        # get posterior samples if there is at least one missing value\n         X_test = safe_indexing(X_filled[:, neighbor_feat_idx],\n                                missing_row_mask)\n         if self.sample_posterior:\n             mus, sigmas = estimator.predict(X_test, return_std=True)\n             imputed_values = np.zeros(mus.shape, dtype=X_filled.dtype)\n-            # two types of problems: (1) non-positive sigmas, (2) mus outside\n-            # legal range of min_value and max_value (results in inf sample)\n+            # two types of problems: (1) non-positive sigmas\n+            # (2) mus outside legal range of min_value and max_value\n+            # (results in inf sample)\n             positive_sigmas = sigmas > 0\n             imputed_values[~positive_sigmas] = mus[~positive_sigmas]\n             mus_too_low = mus < self._min_value\n@@ -384,7 +392,10 @@ def _get_ordered_idx(self, mask_missing_values):\n             The order in which to impute the features.\n         \"\"\"\n         frac_of_missing_values = mask_missing_values.mean(axis=0)\n-        missing_values_idx = np.nonzero(frac_of_missing_values)[0]\n+        if self.skip_complete:\n+            missing_values_idx = np.flatnonzero(frac_of_missing_values)\n+        else:\n+            missing_values_idx = np.arange(np.shape(frac_of_missing_values)[0])\n         if self.imputation_order == 'roman':\n             ordered_idx = missing_values_idx\n         elif self.imputation_order == 'arabic':\n@@ -546,11 +557,15 @@ def fit_transform(self, X, y=None):\n \n         self.initial_imputer_ = None\n         X, Xt, mask_missing_values = self._initial_imputation(X)\n-\n         if self.max_iter == 0 or np.all(mask_missing_values):\n             self.n_iter_ = 0\n             return Xt\n \n+        # Edge case: a single feature. We return the initial ...\n+        if Xt.shape[1] == 1:\n+            self.n_iter_ = 0\n+            return Xt\n+\n         # order in which to impute\n         # note this is probably too slow for large feature data (d > 100000)\n         # and a better way would be good.\n",
  "test_patch": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -457,6 +457,18 @@ def test_imputation_missing_value_in_test_array(Imputer):\n     imputer.fit(train).transform(test)\n \n \n+@pytest.mark.parametrize(\"X\", [[[1], [2]], [[1], [np.nan]]])\n+def test_iterative_imputer_one_feature(X):\n+    # check we exit early when there is a single feature\n+    imputer = IterativeImputer().fit(X)\n+    assert imputer.n_iter_ == 0\n+    imputer = IterativeImputer()\n+    imputer.fit([[1], [2]])\n+    assert imputer.n_iter_ == 0\n+    imputer.fit([[1], [np.nan]])\n+    assert imputer.n_iter_ == 0\n+\n+\n def test_imputation_pipeline_grid_search():\n     # Test imputation within a pipeline + gridsearch.\n     X = sparse_random_matrix(100, 100, density=0.10)\n@@ -587,6 +599,7 @@ def test_iterative_imputer_imputation_order(imputation_order):\n                                max_iter=max_iter,\n                                n_nearest_features=5,\n                                sample_posterior=False,\n+                               skip_complete=True,\n                                min_value=0,\n                                max_value=1,\n                                verbose=1,\n@@ -951,6 +964,36 @@ def test_iterative_imputer_catch_warning():\n     assert not np.any(np.isnan(X_fill))\n \n \n+@pytest.mark.parametrize(\n+    \"skip_complete\", [True, False]\n+)\n+def test_iterative_imputer_skip_non_missing(skip_complete):\n+    # check the imputing strategy when missing data are present in the\n+    # testing set only.\n+    # taken from: https://github.com/scikit-learn/scikit-learn/issues/14383\n+    rng = np.random.RandomState(0)\n+    X_train = np.array([\n+        [5, 2, 2, 1],\n+        [10, 1, 2, 7],\n+        [3, 1, 1, 1],\n+        [8, 4, 2, 2]\n+    ])\n+    X_test = np.array([\n+        [np.nan, 2, 4, 5],\n+        [np.nan, 4, 1, 2],\n+        [np.nan, 1, 10, 1]\n+    ])\n+    imputer = IterativeImputer(\n+        initial_strategy='mean', skip_complete=skip_complete, random_state=rng\n+    )\n+    X_test_est = imputer.fit(X_train).transform(X_test)\n+    if skip_complete:\n+        # impute with the initial strategy: 'mean'\n+        assert_allclose(X_test_est[:, 0], np.mean(X_train[:, 0]))\n+    else:\n+        assert_allclose(X_test_est[:, 0], [11, 7, 12], rtol=1e-4)\n+\n+\n @pytest.mark.parametrize(\n     \"X_fit, X_trans, params, msg_err\",\n     [(np.array([[-1, 1], [1, 2]]), np.array([[-1, 1], [1, -1]]),\n",
  "problem_statement": "IterativeImputer behaviour on missing nan's in fit data\nWhy is this behaviour forced: \r\n\r\n_Features with missing values during transform which did not have any missing values during fit will be imputed with the initial imputation method only._\r\n\r\n[https://scikit-learn.org/dev/modules/generated/sklearn.impute.IterativeImputer.html#sklearn.impute.IterativeImputer](https://scikit-learn.org/dev/modules/generated/sklearn.impute.IterativeImputer.html#sklearn.impute.IterativeImputer)\r\n\r\nThis means by default it will return the mean of that feature. I would prefer just fit one iteration of the chosen estimator and use that fitted estimator to impute missing values. \r\n\r\nActual behaviour:\r\nExample - The second feature missing np.nan --> mean imputation\r\n``` python \r\nimport numpy as np\r\nfrom sklearn.impute import IterativeImputer\r\nimp = IterativeImputer(max_iter=10, verbose=0)\r\nimp.fit([[1, 2], [3, 6], [4, 8], [10, 20], [np.nan, 22], [7, 14]])\r\n\r\nX_test = [[np.nan, 4], [6, np.nan], [np.nan, 6], [4, np.nan], [33, np.nan]]\r\nprint(np.round(imp.transform(X_test)))\r\n```\r\n```\r\nReturn:\r\n[[ 2.  4.]\r\n [ 6. 12.]\r\n [ 3.  6.]\r\n [ 4. 12.]\r\n [33. 12.]]\r\n```\r\n\r\nExample adjusted - Second feature has np.nan values --> iterative imputation with estimator\r\n``` python \r\nimport numpy as np\r\nfrom sklearn.impute import IterativeImputer\r\nimp = IterativeImputer(max_iter=10, verbose=0)\r\nimp.fit([[1, 2], [3, 6], [4, 8], [10, 20], [np.nan, 22], [7, np.nan]])\r\n\r\nX_test = [[np.nan, 4], [6, np.nan], [np.nan, 6], [4, np.nan], [33, np.nan]]\r\nprint(np.round(imp.transform(X_test)))\r\n```\r\n```\r\nReturn:\r\n[[ 2.  4.]\r\n [ 6. 12.]\r\n [ 3.  6.]\r\n [ 4. 8.]\r\n [33. 66.]]\r\n```\r\n\r\nMaybe [sklearn/impute.py](https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/impute.py) line 679 to 683 should be optional with a parameter like force-iterimpute.\n",
  "hints_text": "That sounds reasonable to me, at least as an option and probably default\nbehaviour. But I don't think it's worth blocking release for that feature,\nso if you want it in 0.21, offer a pull request soon? Ping @sergeyf\n\nOK, I do pull request. Sorry iam a newby on github participation.\nWe keep the issue open until the issue is solved :)\r\n\r\nLet us know if you need help.\nJust making sure I understand this...\r\n\r\nWould it work like this?\r\n\r\n(1) Apply initial imputation to every single feature including _i_.\r\n(2) Run the entire sequence of stored regressors while keeping feature _i_ fixed (`transform` only, no `fit`s).\r\n(3) NEW: run a single fit/transform imputation for feature _i_.\r\n\r\nIs that correct? If not, at what point would we fit/transform a single imputation of feature _i_?\nYes, exactly, that would be correct and the clean way. \r\n\r\nA fast correction could be (have not tested it), to make this part in [https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/impute.py](https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/impute.py ) optional:\r\n\r\nLine 679 to 683:\r\n```Python\r\n        # if nothing is missing, just return the default\r\n        # (should not happen at fit time because feat_ids would be excluded)\r\n        missing_row_mask = mask_missing_values[:, feat_idx]\r\n        if not np.any(missing_row_mask):\r\n            return X_filled, estimator\r\n```\r\n\r\nBecause the iterative process would not effect the feature i with respect to updated imputes. Don't making a special case should end up in the same result as the clean version you proposed @sergeyf .\r\n\nAh, I see what you're saying. Just keep fitting & storing the models but not doing any prediction. I don't see any obvious downsides here. Good idea, thanks.\nYes exactly, keep fitting but dont do predictions for features with no missing values.\r\nShould i close and do a pull request or whats the process?\nLeave this open, start a PR. Once a PR is merged, this ticket can be closed.\r\n\r\nThanks.\nOr maybe we should consider making IterativeImputer experimental for this\nrelease??\n\nI don't really see this as a hugely important or common use case. It's good\nto get right but it currently is reasonable if not perfect. What other\nconcerns do you have?\n\nOn Sat, May 4, 2019, 2:24 AM Joel Nothman <notifications@github.com> wrote:\n\n> Or maybe we should consider making IterativeImputer experimental for this\n> release??\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/13773#issuecomment-489310344>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAOJV3A4LM652TNRWY2VQRLPTVI6DANCNFSM4HKPSS4A>\n> .\n>\n\n> Or maybe we should consider making IterativeImputer experimental for this release??\r\n\r\nOne possible reason might be linked with the default estimator, which I find slow to use it. Maybe, one cycle in experimental would allow to quickly change those if they are shown to be problematic in practice.\nLet's do it. We have the mechanism, we're sure we've made design and implementation choices here that are not universal, so I'll open an issue\nPull request welcome to change the behaviour for features which are fully observed at training.\n@jnothman do you want that by default or as a parameter? I feel like doing it by default might increase training time a lot if only a few features are actually missing in the data.\n> @jnothman do you want that by default or as a parameter? I feel like doing it by default might increase training time a lot if only a few features are actually missing in the data.\r\n\r\nI think it would be sensible to enable by default, but have the ability to disable it.\nAs someone who was confused enough by the current behavior to file a bug report, I too am in favor of making the new behavior a toggleable default!\nWould you like to submit a fix as a pull request, @JackMiranda?\nOr is @Pacman1984 still working on it?\nIt'd be nice to make progress on this\r\n\nMaybe I can take a crack at this. \r\n\r\nTo review: the change would be to (optionally and by default) to `fit` regressors on even those features that have no missing values at train time.\r\n\r\nAt `transform`, we can then impute them these features if they are missing for any sample. \r\n\r\nWe will need a new test, and to update the doc string, Maybe the test can come directly from https://github.com/scikit-learn/scikit-learn/issues/14383?\r\n\r\nAm I missing anything?",
  "created_at": "2019-08-25T17:40:52Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/impute/tests/test_impute.py::test_iterative_imputer_one_feature[X0]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_one_feature[X1]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_imputation_order[random]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_imputation_order[roman]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_imputation_order[ascending]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_imputation_order[descending]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_imputation_order[arabic]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_skip_non_missing[True]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_skip_non_missing[False]\"]",
  "PASS_TO_PASS": "[\"sklearn/impute/tests/test_impute.py::test_imputation_shape[mean]\", \"sklearn/impute/tests/test_impute.py::test_imputation_shape[median]\", \"sklearn/impute/tests/test_impute.py::test_imputation_shape[most_frequent]\", \"sklearn/impute/tests/test_impute.py::test_imputation_shape[constant]\", \"sklearn/impute/tests/test_impute.py::test_imputation_error_invalid_strategy[const]\", \"sklearn/impute/tests/test_impute.py::test_imputation_error_invalid_strategy[101]\", \"sklearn/impute/tests/test_impute.py::test_imputation_error_invalid_strategy[None]\", \"sklearn/impute/tests/test_impute.py::test_imputation_deletion_warning[mean]\", \"sklearn/impute/tests/test_impute.py::test_imputation_deletion_warning[median]\", \"sklearn/impute/tests/test_impute.py::test_imputation_deletion_warning[most_frequent]\", \"sklearn/impute/tests/test_impute.py::test_imputation_error_sparse_0[mean]\", \"sklearn/impute/tests/test_impute.py::test_imputation_error_sparse_0[median]\", \"sklearn/impute/tests/test_impute.py::test_imputation_error_sparse_0[most_frequent]\", \"sklearn/impute/tests/test_impute.py::test_imputation_error_sparse_0[constant]\", \"sklearn/impute/tests/test_impute.py::test_imputation_mean_median\", \"sklearn/impute/tests/test_impute.py::test_imputation_median_special_cases\", \"sklearn/impute/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[None-mean]\", \"sklearn/impute/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[None-median]\", \"sklearn/impute/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[object-mean]\", \"sklearn/impute/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[object-median]\", \"sklearn/impute/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[str-mean]\", \"sklearn/impute/tests/test_impute.py::test_imputation_mean_median_error_invalid_type[str-median]\", \"sklearn/impute/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[str-constant]\", \"sklearn/impute/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[str-most_frequent]\", \"sklearn/impute/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype1-constant]\", \"sklearn/impute/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype1-most_frequent]\", \"sklearn/impute/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype2-constant]\", \"sklearn/impute/tests/test_impute.py::test_imputation_const_mostf_error_invalid_types[dtype2-most_frequent]\", \"sklearn/impute/tests/test_impute.py::test_imputation_most_frequent\", \"sklearn/impute/tests/test_impute.py::test_imputation_most_frequent_objects[None]\", \"sklearn/impute/tests/test_impute.py::test_imputation_most_frequent_objects[nan]\", \"sklearn/impute/tests/test_impute.py::test_imputation_most_frequent_objects[NAN]\", \"sklearn/impute/tests/test_impute.py::test_imputation_most_frequent_objects[]\", \"sklearn/impute/tests/test_impute.py::test_imputation_most_frequent_objects[0]\", \"sklearn/impute/tests/test_impute.py::test_imputation_most_frequent_pandas[object]\", \"sklearn/impute/tests/test_impute.py::test_imputation_most_frequent_pandas[category]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_error_invalid_type[1-0]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_error_invalid_type[1.0-nan]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_integer\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_float[csr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_float[asarray]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_object[None]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_object[nan]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_object[NAN]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_object[]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_object[0]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_pandas[object]\", \"sklearn/impute/tests/test_impute.py::test_imputation_constant_pandas[category]\", \"sklearn/impute/tests/test_impute.py::test_imputation_missing_value_in_test_array[SimpleImputer]\", \"sklearn/impute/tests/test_impute.py::test_imputation_missing_value_in_test_array[IterativeImputer]\", \"sklearn/impute/tests/test_impute.py::test_imputation_pipeline_grid_search\", \"sklearn/impute/tests/test_impute.py::test_imputation_copy\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_zero_iters\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_verbose\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_all_missing\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_estimators[None]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_estimators[estimator1]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_estimators[estimator2]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_estimators[estimator3]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_estimators[estimator4]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_clip\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_clip_truncnorm\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_truncated_normal_posterior\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_missing_at_transform[mean]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_missing_at_transform[median]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_missing_at_transform[most_frequent]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_transform_stochasticity\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_no_missing\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_rank_one\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_transform_recovery[3]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_transform_recovery[5]\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_additive_matrix\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_error_param[-1-0.001-ValueError-should\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_error_param[1--0.001-ValueError-should\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_early_stopping\", \"sklearn/impute/tests/test_impute.py::test_iterative_imputer_catch_warning\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_error[X_fit0-X_trans0-params0-have\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_error[X_fit1-X_trans1-params1-'features'\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_error[X_fit2-X_trans2-params2-'sparse'\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_error[X_fit3-X_trans3-params3-MissingIndicator\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-array]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-0-int32-array]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-array]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-csc_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-csc_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-csr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-csr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-coo_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-coo_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-lil_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-lil_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0-nan-float64-bsr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[missing-only-3-features_indices0--1-int32-bsr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-array]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-0-int32-array]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-array]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-csc_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-csc_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-csr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-csr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-coo_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-coo_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-lil_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-lil_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1-nan-float64-bsr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_new[all-3-features_indices1--1-int32-bsr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[csc_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[csr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[coo_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[lil_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_raise_on_sparse_with_missing_0[bsr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-array-True]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-array-False]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-array-auto]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[0-array-True]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[0-array-False]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[0-array-auto]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csc_matrix-True]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csc_matrix-False]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csc_matrix-auto]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csr_matrix-True]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csr_matrix-False]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-csr_matrix-auto]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-coo_matrix-True]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-coo_matrix-False]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-coo_matrix-auto]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-lil_matrix-True]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-lil_matrix-False]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_param[nan-lil_matrix-auto]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_string\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_with_imputer[X0-a-X_trans_exp0]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_with_imputer[X1-nan-X_trans_exp1]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_with_imputer[X2-nan-X_trans_exp2]\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_with_imputer[X3-None-X_trans_exp3]\", \"sklearn/impute/tests/test_impute.py::test_inconsistent_dtype_X_missing_values[NaN-nan-Input\", \"sklearn/impute/tests/test_impute.py::test_inconsistent_dtype_X_missing_values[-1--1-types\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_no_missing\", \"sklearn/impute/tests/test_impute.py::test_missing_indicator_sparse_no_explicit_zeros\", \"sklearn/impute/tests/test_impute.py::test_imputers_add_indicator[SimpleImputer-nan]\", \"sklearn/impute/tests/test_impute.py::test_imputers_add_indicator[SimpleImputer--1]\", \"sklearn/impute/tests/test_impute.py::test_imputers_add_indicator[SimpleImputer-0]\", \"sklearn/impute/tests/test_impute.py::test_imputers_add_indicator[IterativeImputer-nan]\", \"sklearn/impute/tests/test_impute.py::test_imputers_add_indicator[IterativeImputer--1]\", \"sklearn/impute/tests/test_impute.py::test_imputers_add_indicator[IterativeImputer-0]\", \"sklearn/impute/tests/test_impute.py::test_imputer_without_indicator[SimpleImputer]\", \"sklearn/impute/tests/test_impute.py::test_imputer_without_indicator[IterativeImputer]\", \"sklearn/impute/tests/test_impute.py::test_simple_imputation_add_indicator_sparse_matrix[csc_matrix]\", \"sklearn/impute/tests/test_impute.py::test_simple_imputation_add_indicator_sparse_matrix[csr_matrix]\", \"sklearn/impute/tests/test_impute.py::test_simple_imputation_add_indicator_sparse_matrix[coo_matrix]\", \"sklearn/impute/tests/test_impute.py::test_simple_imputation_add_indicator_sparse_matrix[lil_matrix]\", \"sklearn/impute/tests/test_impute.py::test_simple_imputation_add_indicator_sparse_matrix[bsr_matrix]\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.008001",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}