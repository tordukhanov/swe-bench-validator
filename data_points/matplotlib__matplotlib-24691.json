{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-24691",
  "base_commit": "78bf53caacbb5ce0dc7aa73f07a74c99f1ed919b",
  "patch": "diff --git a/galleries/examples/color/set_alpha.py b/galleries/examples/color/set_alpha.py\nnew file mode 100644\n--- /dev/null\n+++ b/galleries/examples/color/set_alpha.py\n@@ -0,0 +1,53 @@\n+\"\"\"\n+=================================\n+Ways to set a color's alpha value\n+=================================\n+\n+Compare setting alpha by the *alpha* keyword argument and by one of the Matplotlib color\n+formats. Often, the *alpha* keyword is the only tool needed to add transparency to a\n+color. In some cases, the *(matplotlib_color, alpha)* color format provides an easy way\n+to fine-tune the appearance of a Figure.\n+\n+\"\"\"\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+# Fixing random state for reproducibility.\n+np.random.seed(19680801)\n+\n+fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(8, 4))\n+\n+x_values = [n for n in range(20)]\n+y_values = np.random.randn(20)\n+\n+facecolors = ['green' if y > 0 else 'red' for y in y_values]\n+edgecolors = facecolors\n+\n+ax1.bar(x_values, y_values, color=facecolors, edgecolor=edgecolors, alpha=0.5)\n+ax1.set_title(\"Explicit 'alpha' keyword value\\nshared by all bars and edges\")\n+\n+\n+# Normalize y values to get distinct face alpha values.\n+abs_y = [abs(y) for y in y_values]\n+face_alphas = [n / max(abs_y) for n in abs_y]\n+edge_alphas = [1 - alpha for alpha in face_alphas]\n+\n+colors_with_alphas = list(zip(facecolors, face_alphas))\n+edgecolors_with_alphas = list(zip(edgecolors, edge_alphas))\n+\n+ax2.bar(x_values, y_values, color=colors_with_alphas,\n+        edgecolor=edgecolors_with_alphas)\n+ax2.set_title('Normalized alphas for\\neach bar and each edge')\n+\n+plt.show()\n+\n+# %%\n+#\n+# .. admonition:: References\n+#\n+#    The use of the following functions, methods, classes and modules is shown\n+#    in this example:\n+#\n+#    - `matplotlib.axes.Axes.bar`\n+#    - `matplotlib.pyplot.subplots`\ndiff --git a/galleries/users_explain/colors/colors.py b/galleries/users_explain/colors/colors.py\n--- a/galleries/users_explain/colors/colors.py\n+++ b/galleries/users_explain/colors/colors.py\n@@ -68,6 +68,9 @@\n |           to black if cycle does not |                                      |\n |           include color.             |                                      |\n +--------------------------------------+--------------------------------------+\n+| Tuple of one of the above color      | - ``('green', 0.3)``                 |\n+| formats and an alpha float.          | - ``('#f00', 0.9)``                  |\n++--------------------------------------+--------------------------------------+\n \n .. _xkcd color survey: https://xkcd.com/color/rgb/\n \ndiff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -315,6 +315,13 @@ def _to_rgba_no_colorcycle(c, alpha=None):\n     *alpha* is ignored for the color value ``\"none\"`` (case-insensitive),\n     which always maps to ``(0, 0, 0, 0)``.\n     \"\"\"\n+    if isinstance(c, tuple) and len(c) == 2:\n+        if alpha is None:\n+            c, alpha = c\n+        else:\n+            c = c[0]\n+    if alpha is not None and not 0 <= alpha <= 1:\n+        raise ValueError(\"'alpha' must be between 0 and 1, inclusive\")\n     orig_c = c\n     if c is np.ma.masked:\n         return (0., 0., 0., 0.)\n@@ -425,6 +432,11 @@ def to_rgba_array(c, alpha=None):\n         (n, 4) array of RGBA colors,  where each channel (red, green, blue,\n         alpha) can assume values between 0 and 1.\n     \"\"\"\n+    if isinstance(c, tuple) and len(c) == 2:\n+        if alpha is None:\n+            c, alpha = c\n+        else:\n+            c = c[0]\n     # Special-case inputs that are already arrays, for performance.  (If the\n     # array has the wrong kind or shape, raise the error during one-at-a-time\n     # conversion.)\n@@ -464,9 +476,12 @@ def to_rgba_array(c, alpha=None):\n             return np.array([to_rgba(c, a) for a in alpha], float)\n         else:\n             return np.array([to_rgba(c, alpha)], float)\n-    except (ValueError, TypeError):\n+    except TypeError:\n         pass\n-\n+    except ValueError as e:\n+        if e.args == (\"'alpha' must be between 0 and 1, inclusive\", ):\n+            # ValueError is from _to_rgba_no_colorcycle().\n+            raise e\n     if isinstance(c, str):\n         raise ValueError(f\"{c!r} is not a valid color value.\")\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -1307,6 +1307,51 @@ def test_to_rgba_array_alpha_array():\n     assert_array_equal(c[:, 3], alpha)\n \n \n+def test_to_rgba_array_accepts_color_alpha_tuple():\n+    assert_array_equal(\n+        mcolors.to_rgba_array(('black', 0.9)),\n+        [[0, 0, 0, 0.9]])\n+\n+\n+def test_to_rgba_array_explicit_alpha_overrides_tuple_alpha():\n+    assert_array_equal(\n+        mcolors.to_rgba_array(('black', 0.9), alpha=0.5),\n+        [[0, 0, 0, 0.5]])\n+\n+\n+def test_to_rgba_array_accepts_color_alpha_tuple_with_multiple_colors():\n+    color_array = np.array([[1., 1., 1., 1.], [0., 0., 1., 0.]])\n+    assert_array_equal(\n+        mcolors.to_rgba_array((color_array, 0.2)),\n+        [[1., 1., 1., 0.2], [0., 0., 1., 0.2]])\n+\n+    color_sequence = [[1., 1., 1., 1.], [0., 0., 1., 0.]]\n+    assert_array_equal(\n+        mcolors.to_rgba_array((color_sequence, 0.4)),\n+        [[1., 1., 1., 0.4], [0., 0., 1., 0.4]])\n+\n+\n+def test_to_rgba_array_error_with_color_invalid_alpha_tuple():\n+    with pytest.raises(ValueError, match=\"'alpha' must be between 0 and 1,\"):\n+        mcolors.to_rgba_array(('black', 2.0))\n+\n+\n+@pytest.mark.parametrize('rgba_alpha',\n+                         [('white', 0.5), ('#ffffff', 0.5), ('#ffffff00', 0.5),\n+                          ((1.0, 1.0, 1.0, 1.0), 0.5)])\n+def test_to_rgba_accepts_color_alpha_tuple(rgba_alpha):\n+    assert mcolors.to_rgba(rgba_alpha) == (1, 1, 1, 0.5)\n+\n+\n+def test_to_rgba_explicit_alpha_overrides_tuple_alpha():\n+    assert mcolors.to_rgba(('red', 0.1), alpha=0.9) == (1, 0, 0, 0.9)\n+\n+\n+def test_to_rgba_error_with_color_invalid_alpha_tuple():\n+    with pytest.raises(ValueError, match=\"'alpha' must be between 0 and 1\"):\n+        mcolors.to_rgba(('blue', 2.0))\n+\n+\n def test_failed_conversions():\n     with pytest.raises(ValueError):\n         mcolors.to_rgba('5')\n",
  "problem_statement": "[ENH]: set facecolor and edgecolor alpha separately\n### Problem\n\nI like making diagrams where my patch edge is solid but the fill is semi-transparent - in my case usually to fade out the color, but it's also useful to emphasize boundaries\r\n\r\n![image](https://user-images.githubusercontent.com/1300499/206788819-3670bbc3-3b6d-4974-b6cc-7abb7d4a7f34.png)\r\n\r\nSince alpha applies to the whole patch, the way I do this now is by converting my HTML colors into RGBs and appending an A\r\n\r\n```python\r\nedgecolor=x_color, facecolor=(*mcolors.to_rgb(x_color), .10)\r\n```\r\n\nETA: apparently I could also just do `facecolor = mcolors.to_rgba(x_color,  .10)`\r\n\n\n### Proposed solution\n\nAllow alpha to take a `(facecolor, fillcolor)` tuple for patch methods. As an example of prior art, we allow vectorized/separable alphas in imshow as of #14889\n",
  "hints_text": "",
  "created_at": "2022-12-10T18:13:37Z",
  "version": "3.6",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_accepts_color_alpha_tuple\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_explicit_alpha_overrides_tuple_alpha\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_accepts_color_alpha_tuple_with_multiple_colors\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_error_with_color_invalid_alpha_tuple\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_accepts_color_alpha_tuple[rgba_alpha0]\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_accepts_color_alpha_tuple[rgba_alpha1]\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_accepts_color_alpha_tuple[rgba_alpha2]\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_accepts_color_alpha_tuple[rgba_alpha3]\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_explicit_alpha_overrides_tuple_alpha\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_error_with_color_invalid_alpha_tuple\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[5-result0]\", \"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[2-result1]\", \"lib/matplotlib/tests/test_colors.py::test_create_lookup_table[1-result2]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[uint8]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[int]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[float16]\", \"lib/matplotlib/tests/test_colors.py::test_index_dtype[float]\", \"lib/matplotlib/tests/test_colors.py::test_resampled\", \"lib/matplotlib/tests/test_colors.py::test_register_cmap\", \"lib/matplotlib/tests/test_colors.py::test_colormaps_get_cmap\", \"lib/matplotlib/tests/test_colors.py::test_unregister_builtin_cmap\", \"lib/matplotlib/tests/test_colors.py::test_colormap_copy\", \"lib/matplotlib/tests/test_colors.py::test_colormap_equals\", \"lib/matplotlib/tests/test_colors.py::test_colormap_endian\", \"lib/matplotlib/tests/test_colors.py::test_colormap_invalid\", \"lib/matplotlib/tests/test_colors.py::test_colormap_return_types\", \"lib/matplotlib/tests/test_colors.py::test_BoundaryNorm\", \"lib/matplotlib/tests/test_colors.py::test_CenteredNorm\", \"lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[-1-2]\", \"lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[3-1]\", \"lib/matplotlib/tests/test_colors.py::test_LogNorm\", \"lib/matplotlib/tests/test_colors.py::test_LogNorm_inverse\", \"lib/matplotlib/tests/test_colors.py::test_PowerNorm\", \"lib/matplotlib/tests/test_colors.py::test_PowerNorm_translation_invariance\", \"lib/matplotlib/tests/test_colors.py::test_Normalize\", \"lib/matplotlib/tests/test_colors.py::test_FuncNorm\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmin\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scale\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center_max\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Even\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Odd\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminEqualsVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VmaxEqualsVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminGTVcenter\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_TwoSlopeNorm_VminGTVmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VcenterGTVmax\", \"lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_premature_scaling\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm_colorbar\", \"lib/matplotlib/tests/test_colors.py::test_SymLogNorm_single_zero\", \"lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_init\", \"lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_norm\", \"lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors[png]\", \"lib/matplotlib/tests/test_colors.py::test_boundarynorm_and_colorbarbase[png]\", \"lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors2\", \"lib/matplotlib/tests/test_colors.py::test_rgb_hsv_round_trip\", \"lib/matplotlib/tests/test_colors.py::test_autoscale_masked\", \"lib/matplotlib/tests/test_colors.py::test_light_source_topo_surface[png]\", \"lib/matplotlib/tests/test_colors.py::test_light_source_shading_default\", \"lib/matplotlib/tests/test_colors.py::test_light_source_shading_empty_mask\", \"lib/matplotlib/tests/test_colors.py::test_light_source_masked_shading\", \"lib/matplotlib/tests/test_colors.py::test_light_source_hillshading\", \"lib/matplotlib/tests/test_colors.py::test_light_source_planar_hillshading\", \"lib/matplotlib/tests/test_colors.py::test_color_names\", \"lib/matplotlib/tests/test_colors.py::test_pandas_iterable\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis_r]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter_r]\", \"lib/matplotlib/tests/test_colors.py::test_has_alpha_channel\", \"lib/matplotlib/tests/test_colors.py::test_cn\", \"lib/matplotlib/tests/test_colors.py::test_conversions\", \"lib/matplotlib/tests/test_colors.py::test_conversions_masked\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_single_str\", \"lib/matplotlib/tests/test_colors.py::test_to_rgba_array_alpha_array\", \"lib/matplotlib/tests/test_colors.py::test_failed_conversions\", \"lib/matplotlib/tests/test_colors.py::test_grey_gray\", \"lib/matplotlib/tests/test_colors.py::test_tableau_order\", \"lib/matplotlib/tests/test_colors.py::test_ndarray_subclass_norm\", \"lib/matplotlib/tests/test_colors.py::test_same_color\", \"lib/matplotlib/tests/test_colors.py::test_hex_shorthand_notation\", \"lib/matplotlib/tests/test_colors.py::test_repr_png\", \"lib/matplotlib/tests/test_colors.py::test_repr_html\", \"lib/matplotlib/tests/test_colors.py::test_get_under_over_bad\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[over]\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[under]\", \"lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[bad]\", \"lib/matplotlib/tests/test_colors.py::test_colormap_alpha_array\", \"lib/matplotlib/tests/test_colors.py::test_colormap_bad_data_with_alpha\", \"lib/matplotlib/tests/test_colors.py::test_2d_to_rgba\", \"lib/matplotlib/tests/test_colors.py::test_set_dict_to_rgba\", \"lib/matplotlib/tests/test_colors.py::test_norm_deepcopy\", \"lib/matplotlib/tests/test_colors.py::test_norm_callback\", \"lib/matplotlib/tests/test_colors.py::test_scalarmappable_norm_update\", \"lib/matplotlib/tests/test_colors.py::test_norm_update_figs[png]\", \"lib/matplotlib/tests/test_colors.py::test_norm_update_figs[pdf]\", \"lib/matplotlib/tests/test_colors.py::test_make_norm_from_scale_name\", \"lib/matplotlib/tests/test_colors.py::test_color_sequences\", \"lib/matplotlib/tests/test_colors.py::test_cm_set_cmap_error\"]",
  "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.814164",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}