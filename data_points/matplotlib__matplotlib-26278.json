{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26278",
  "base_commit": "02d2e137251ebcbd698b6f1ff8c455a1e52082af",
  "patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -751,7 +751,7 @@ def __init__(self, ax, *args,\n                  hatches=(None,), alpha=None, origin=None, extent=None,\n                  cmap=None, colors=None, norm=None, vmin=None, vmax=None,\n                  extend='neither', antialiased=None, nchunk=0, locator=None,\n-                 transform=None, negative_linestyles=None,\n+                 transform=None, negative_linestyles=None, clip_path=None,\n                  **kwargs):\n         \"\"\"\n         Draw contour lines or filled regions, depending on\n@@ -805,6 +805,7 @@ def __init__(self, ax, *args,\n         super().__init__(\n             antialiaseds=antialiased,\n             alpha=alpha,\n+            clip_path=clip_path,\n             transform=transform,\n         )\n         self.axes = ax\n@@ -1870,6 +1871,11 @@ def _initialize_x_y(self, z):\n \n     The default is taken from :rc:`contour.algorithm`.\n \n+clip_path : `~matplotlib.patches.Patch` or `.Path` or `.TransformedPath`\n+    Set the clip path.  See `~matplotlib.artist.Artist.set_clip_path`.\n+\n+    .. versionadded:: 3.8\n+\n data : indexable object, optional\n     DATA_PARAMETER_PLACEHOLDER\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -9,6 +9,7 @@\n import matplotlib as mpl\n from matplotlib import pyplot as plt, rc_context, ticker\n from matplotlib.colors import LogNorm, same_color\n+import matplotlib.patches as mpatches\n from matplotlib.testing.decorators import image_comparison\n import pytest\n \n@@ -752,6 +753,14 @@ def test_contour_no_args():\n         ax.contour(Z=data)\n \n \n+def test_contour_clip_path():\n+    fig, ax = plt.subplots()\n+    data = [[0, 1], [1, 0]]\n+    circle = mpatches.Circle([0.5, 0.5], 0.5, transform=ax.transAxes)\n+    cs = ax.contour(data, clip_path=circle)\n+    assert cs.get_clip_path() is not None\n+\n+\n def test_bool_autolevel():\n     x, y = np.random.rand(2, 9)\n     z = (np.arange(9) % 2).reshape((3, 3)).astype(bool)\n",
  "problem_statement": "Cleaning up kwargs in ContourSet\nThis is a continuation of a mailing list thread where we talked about how to clip a plot inside a polygon. It is a very useful application for people who are visualizing data on maps since often times we want to plot everything inside one region (country, state or province).\n\nhttp://matplotlib.1069221.n5.nabble.com/Clipping-a-plot-inside-a-polygon-td41950.html\n\nCurrently for many types of plots this is not that hard to do using the clip_path keyword for most of the plotting functions, since the kwargs are usually used to modify properties of the artists to be generated by the plotting function. For example, suppose that I had a polygon defining the border of a country, poly, and some data to overlay on top.\n\n```\nplt.pcolor(data, clip_path=poly)\n```\n\nDoes what I want because the kwargs of pcolor let me modify the underlying PolyCollection instance. However, there are a few plotting functions where I cannot do this, most notably in contour / contourf:\n\n```\nplt.contourf(data, clip_path=poly)\n```\n\nWill work but the clip_path kwarg gets completely ignored. To get the result I want, I need to store the output of contourf and use the set_clip_path method on each collection instance:\n\n```\ncs = plt.contourf(data)\nfor col in cs.collections:\n    col.set_clip_path(poly)\n```\n\nSo I looked at the code in contour.py and realized that no kwargs get passed when instantiating the collections. @pelson mentioned that this might call for an overhaul of how the kwargs get passed into a ContourSet. His suggestion was either adding a set_clip_path method directly to ContourSet, or a more thorough change of how the kwargs are getting passed so they are more consistent with the other plotting functions. Ideally, I would prefer the latter case since then for my usage case I could always get what I want just by passing in the kwarg directly. Additionally it would make the functionality of contour(f) more similar to the other plotting functions, ie some of the kwargs can be passed to the collections. Any thoughts on this?\n\n",
  "hints_text": "@bassdx: The python contour code has been due a refactor for some time; in fact I seem to have half-heartedly promised to do that about a year ago! (see https://github.com/matplotlib/matplotlib/issues/367).  The idea is to separate out the calculation/storage of the polygons from all the graphical stuff like colours, etc.  This will allow users to perform contour calculations without any GUI overhead, plus the graphical-aware ContourSet class can inherit from Artist for improved consistency with other plotting operations.  So in the long run we will get clipping from the Artist inheritance.\n\nHowever, I won't be able to do this for a few months.  In the meantime, if you want to write a temporary solution then go for the one that is consistent with the other plotting functions as this is how it will end up.\n\n@ianthomas23 Did this get dealt with in your most recent triangulation work?\n\n@tacaswell: No, the two are unrelated.\n\nDoesn't seem like there has been any movement on this since the last update. Seems like two options are listed in the OP:\r\n\r\n+ Add a set_clip_path method directly to ContourSet https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/contour.py#L737\r\n+ Thoroughly rework kwarg handling in ContourSet\r\n\r\nRecommend looking at the first while the broader contour discussion can continue.\r\n\r\nRecommend labeling as Difficulty: Medium.",
  "created_at": "2023-07-09T10:54:03Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_contour.py::test_contour_clip_path\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_no_valid_levels\", \"lib/matplotlib/tests/test_contour.py::test_contour_Nlevels\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf-True]\", \"lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_labels[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_labels[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_corner_mask[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_corner_mask[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels\", \"lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator\", \"lib/matplotlib/tests/test_contour.py::test_circular_contour_warning\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_log_extension[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_log_extension[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_addlines[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_addlines[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_uneven[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_uneven[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]\", \"lib/matplotlib/tests/test_contour.py::test_label_nonagg\", \"lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_find_nearest_contour\", \"lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled\", \"lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits\", \"lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements\", \"lib/matplotlib/tests/test_contour.py::test_contour_legend_elements\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]\", \"lib/matplotlib/tests/test_contour.py::test_all_algorithms[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_all_algorithms[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_subfigure_clabel\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[solid]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]\", \"lib/matplotlib/tests/test_contour.py::test_contour_remove\", \"lib/matplotlib/tests/test_contour.py::test_contour_no_args\", \"lib/matplotlib/tests/test_contour.py::test_bool_autolevel\", \"lib/matplotlib/tests/test_contour.py::test_all_nan\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.830579",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}