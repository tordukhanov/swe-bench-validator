{
  "repo": "django/django",
  "instance_id": "django__django-11630",
  "base_commit": "65e86948b80262574058a94ccaae3a9b59c3faea",
  "patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -4,7 +4,8 @@\n from itertools import chain\n \n from django.apps import apps\n-from django.core.checks import Error, Tags, register\n+from django.conf import settings\n+from django.core.checks import Error, Tags, Warning, register\n \n \n @register(Tags.models)\n@@ -35,14 +36,25 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n+    if settings.DATABASE_ROUTERS:\n+        error_class, error_id = Warning, 'models.W035'\n+        error_hint = (\n+            'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n+            'are correctly routed to separate databases.'\n+        )\n+    else:\n+        error_class, error_id = Error, 'models.E028'\n+        error_hint = None\n     for db_table, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n+            model_labels_str = ', '.join(model_labels)\n             errors.append(\n-                Error(\n+                error_class(\n                     \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    % (db_table, model_labels_str),\n                     obj=db_table,\n-                    id='models.E028',\n+                    hint=(error_hint % model_labels_str) if error_hint else None,\n+                    id=error_id,\n                 )\n             )\n     for index_name, model_labels in indexes.items():\n",
  "test_patch": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -1,12 +1,16 @@\n from django.core import checks\n-from django.core.checks import Error\n+from django.core.checks import Error, Warning\n from django.db import models\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n-    isolate_apps, modify_settings, override_system_checks,\n+    isolate_apps, modify_settings, override_settings, override_system_checks,\n )\n \n \n+class EmptyRouter:\n+    pass\n+\n+\n @isolate_apps('check_framework', attr_name='apps')\n @override_system_checks([checks.model_checks.check_all_models])\n class DuplicateDBTableTests(SimpleTestCase):\n@@ -28,6 +32,30 @@ class Meta:\n             )\n         ])\n \n+    @override_settings(DATABASE_ROUTERS=['check_framework.test_model_checks.EmptyRouter'])\n+    def test_collision_in_same_app_database_routers_installed(self):\n+        class Model1(models.Model):\n+            class Meta:\n+                db_table = 'test_table'\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                db_table = 'test_table'\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"db_table 'test_table' is used by multiple models: \"\n+                \"check_framework.Model1, check_framework.Model2.\",\n+                hint=(\n+                    'You have configured settings.DATABASE_ROUTERS. Verify '\n+                    'that check_framework.Model1, check_framework.Model2 are '\n+                    'correctly routed to separate databases.'\n+                ),\n+                obj='test_table',\n+                id='models.W035',\n+            )\n+        ])\n+\n     @modify_settings(INSTALLED_APPS={'append': 'basic'})\n     @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n     def test_collision_across_apps(self, apps):\n@@ -50,6 +78,34 @@ class Meta:\n             )\n         ])\n \n+    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n+    @override_settings(DATABASE_ROUTERS=['check_framework.test_model_checks.EmptyRouter'])\n+    @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n+    def test_collision_across_apps_database_routers_installed(self, apps):\n+        class Model1(models.Model):\n+            class Meta:\n+                app_label = 'basic'\n+                db_table = 'test_table'\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                app_label = 'check_framework'\n+                db_table = 'test_table'\n+\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [\n+            Warning(\n+                \"db_table 'test_table' is used by multiple models: \"\n+                \"basic.Model1, check_framework.Model2.\",\n+                hint=(\n+                    'You have configured settings.DATABASE_ROUTERS. Verify '\n+                    'that basic.Model1, check_framework.Model2 are correctly '\n+                    'routed to separate databases.'\n+                ),\n+                obj='test_table',\n+                id='models.W035',\n+            )\n+        ])\n+\n     def test_no_collision_for_unmanaged_models(self):\n         class Unmanaged(models.Model):\n             class Meta:\n",
  "problem_statement": "Django throws error when different apps with different models have the same name table name.\nDescription\n\t\nError message:\ntable_name: (models.E028) db_table 'table_name' is used by multiple models: base.ModelName, app2.ModelName.\nWe have a Base app that points to a central database and that has its own tables. We then have multiple Apps that talk to their own databases. Some share the same table names.\nWe have used this setup for a while, but after upgrading to Django 2.2 we're getting an error saying we're not allowed 2 apps, with 2 different models to have the same table names. \nIs this correct behavior? We've had to roll back to Django 2.0 for now.\n",
  "hints_text": "Regression in [5d25804eaf81795c7d457e5a2a9f0b9b0989136c], ticket #20098. My opinion is that as soon as the project has a non-empty DATABASE_ROUTERS setting, the error should be turned into a warning, as it becomes difficult to say for sure that it's an error. And then the project can add the warning in SILENCED_SYSTEM_CHECKS.\nI agree with your opinion. Assigning to myself, patch on its way Replying to Claude Paroz: Regression in [5d25804eaf81795c7d457e5a2a9f0b9b0989136c], ticket #20098. My opinion is that as soon as the project has a non-empty DATABASE_ROUTERS setting, the error should be turned into a warning, as it becomes difficult to say for sure that it's an error. And then the project can add the warning in SILENCED_SYSTEM_CHECKS.",
  "created_at": "2019-08-05T11:22:41Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_collision_across_apps_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_collision_in_same_app_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)\"]",
  "PASS_TO_PASS": "[\"test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests)\", \"test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.IndexNameTests)\", \"test_no_collision_across_apps_interpolation (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests)\", \"test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.ConstraintNameTests)\", \"test_no_collision_across_apps_interpolation (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.579279",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}