{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-7112",
  "base_commit": "114bf98719f31a653f2ef7bc7fcdfaf010eb3612",
  "patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -516,7 +516,7 @@ def _overwrite_indexes(\n             new_indexes.pop(name)\n \n         if rename_dims:\n-            new_variable.dims = [rename_dims.get(d, d) for d in new_variable.dims]\n+            new_variable.dims = tuple(rename_dims.get(d, d) for d in new_variable.dims)\n \n         return self._replace(\n             variable=new_variable, coords=new_coords, indexes=new_indexes\n@@ -1169,7 +1169,15 @@ def copy(self: T_DataArray, deep: bool = True, data: Any = None) -> T_DataArray:\n         --------\n         pandas.DataFrame.copy\n         \"\"\"\n-        variable = self.variable.copy(deep=deep, data=data)\n+        return self._copy(deep=deep, data=data)\n+\n+    def _copy(\n+        self: T_DataArray,\n+        deep: bool = True,\n+        data: Any = None,\n+        memo: dict[int, Any] | None = None,\n+    ) -> T_DataArray:\n+        variable = self.variable._copy(deep=deep, data=data, memo=memo)\n         indexes, index_vars = self.xindexes.copy_indexes(deep=deep)\n \n         coords = {}\n@@ -1177,17 +1185,17 @@ def copy(self: T_DataArray, deep: bool = True, data: Any = None) -> T_DataArray:\n             if k in index_vars:\n                 coords[k] = index_vars[k]\n             else:\n-                coords[k] = v.copy(deep=deep)\n+                coords[k] = v._copy(deep=deep, memo=memo)\n \n         return self._replace(variable, coords, indexes=indexes)\n \n     def __copy__(self: T_DataArray) -> T_DataArray:\n-        return self.copy(deep=False)\n+        return self._copy(deep=False)\n \n-    def __deepcopy__(self: T_DataArray, memo=None) -> T_DataArray:\n-        # memo does nothing but is required for compatibility with\n-        # copy.deepcopy\n-        return self.copy(deep=True)\n+    def __deepcopy__(\n+        self: T_DataArray, memo: dict[int, Any] | None = None\n+    ) -> T_DataArray:\n+        return self._copy(deep=True, memo=memo)\n \n     # mutable objects should not be Hashable\n     # https://github.com/python/mypy/issues/4266\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1221,6 +1221,14 @@ def copy(\n         --------\n         pandas.DataFrame.copy\n         \"\"\"\n+        return self._copy(deep=deep, data=data)\n+\n+    def _copy(\n+        self: T_Dataset,\n+        deep: bool = False,\n+        data: Mapping[Any, ArrayLike] | None = None,\n+        memo: dict[int, Any] | None = None,\n+    ) -> T_Dataset:\n         if data is None:\n             data = {}\n         elif not utils.is_dict_like(data):\n@@ -1249,13 +1257,21 @@ def copy(\n             if k in index_vars:\n                 variables[k] = index_vars[k]\n             else:\n-                variables[k] = v.copy(deep=deep, data=data.get(k))\n+                variables[k] = v._copy(deep=deep, data=data.get(k), memo=memo)\n \n-        attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\n-        encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\n+        attrs = copy.deepcopy(self._attrs, memo) if deep else copy.copy(self._attrs)\n+        encoding = (\n+            copy.deepcopy(self._encoding, memo) if deep else copy.copy(self._encoding)\n+        )\n \n         return self._replace(variables, indexes=indexes, attrs=attrs, encoding=encoding)\n \n+    def __copy__(self: T_Dataset) -> T_Dataset:\n+        return self._copy(deep=False)\n+\n+    def __deepcopy__(self: T_Dataset, memo: dict[int, Any] | None = None) -> T_Dataset:\n+        return self._copy(deep=True, memo=memo)\n+\n     def as_numpy(self: T_Dataset) -> T_Dataset:\n         \"\"\"\n         Coerces wrapped data and coordinates into numpy arrays, returning a Dataset.\n@@ -1332,14 +1348,6 @@ def _construct_dataarray(self, name: Hashable) -> DataArray:\n \n         return DataArray(variable, coords, name=name, indexes=indexes, fastpath=True)\n \n-    def __copy__(self: T_Dataset) -> T_Dataset:\n-        return self.copy(deep=False)\n-\n-    def __deepcopy__(self: T_Dataset, memo=None) -> T_Dataset:\n-        # memo does nothing but is required for compatibility with\n-        # copy.deepcopy\n-        return self.copy(deep=True)\n-\n     @property\n     def _attr_sources(self) -> Iterable[Mapping[Hashable, Any]]:\n         \"\"\"Places to look-up items for attribute-style access\"\"\"\ndiff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -8,6 +8,7 @@\n from collections import defaultdict\n from datetime import datetime, timedelta\n from itertools import chain, zip_longest\n+from reprlib import recursive_repr\n from typing import Collection, Hashable\n \n import numpy as np\n@@ -385,7 +386,6 @@ def _mapping_repr(\n     expand_option_name=\"display_expand_data_vars\",\n )\n \n-\n attrs_repr = functools.partial(\n     _mapping_repr,\n     title=\"Attributes\",\n@@ -551,6 +551,7 @@ def short_data_repr(array):\n         return f\"[{array.size} values with dtype={array.dtype}]\"\n \n \n+@recursive_repr(\"<recursive array>\")\n def array_repr(arr):\n     from .variable import Variable\n \n@@ -592,11 +593,12 @@ def array_repr(arr):\n             summary.append(unindexed_dims_str)\n \n     if arr.attrs:\n-        summary.append(attrs_repr(arr.attrs))\n+        summary.append(attrs_repr(arr.attrs, max_rows=max_rows))\n \n     return \"\\n\".join(summary)\n \n \n+@recursive_repr(\"<recursive Dataset>\")\n def dataset_repr(ds):\n     summary = [f\"<xarray.{type(ds).__name__}>\"]\n \ndiff --git a/xarray/core/utils.py b/xarray/core/utils.py\n--- a/xarray/core/utils.py\n+++ b/xarray/core/utils.py\n@@ -161,16 +161,13 @@ def equivalent(first: T, second: T) -> bool:\n     # TODO: refactor to avoid circular import\n     from . import duck_array_ops\n \n+    if first is second:\n+        return True\n     if isinstance(first, np.ndarray) or isinstance(second, np.ndarray):\n         return duck_array_ops.array_equiv(first, second)\n-    elif isinstance(first, list) or isinstance(second, list):\n+    if isinstance(first, list) or isinstance(second, list):\n         return list_equiv(first, second)\n-    else:\n-        return (\n-            (first is second)\n-            or (first == second)\n-            or (pd.isnull(first) and pd.isnull(second))\n-        )\n+    return (first == second) or (pd.isnull(first) and pd.isnull(second))\n \n \n def list_equiv(first, second):\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -918,7 +918,9 @@ def encoding(self, value):\n         except ValueError:\n             raise ValueError(\"encoding must be castable to a dictionary\")\n \n-    def copy(self, deep: bool = True, data: ArrayLike | None = None):\n+    def copy(\n+        self: T_Variable, deep: bool = True, data: ArrayLike | None = None\n+    ) -> T_Variable:\n         \"\"\"Returns a copy of this object.\n \n         If `deep=True`, the data array is loaded into memory and copied onto\n@@ -974,6 +976,14 @@ def copy(self, deep: bool = True, data: ArrayLike | None = None):\n         --------\n         pandas.DataFrame.copy\n         \"\"\"\n+        return self._copy(deep=deep, data=data)\n+\n+    def _copy(\n+        self: T_Variable,\n+        deep: bool = True,\n+        data: ArrayLike | None = None,\n+        memo: dict[int, Any] | None = None,\n+    ) -> T_Variable:\n         if data is None:\n             ndata = self._data\n \n@@ -982,7 +992,7 @@ def copy(self, deep: bool = True, data: ArrayLike | None = None):\n                 ndata = indexing.MemoryCachedArray(ndata.array)\n \n             if deep:\n-                ndata = copy.deepcopy(ndata)\n+                ndata = copy.deepcopy(ndata, memo)\n \n         else:\n             ndata = as_compatible_data(data)\n@@ -993,8 +1003,10 @@ def copy(self, deep: bool = True, data: ArrayLike | None = None):\n                     )\n                 )\n \n-        attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\n-        encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\n+        attrs = copy.deepcopy(self._attrs, memo) if deep else copy.copy(self._attrs)\n+        encoding = (\n+            copy.deepcopy(self._encoding, memo) if deep else copy.copy(self._encoding)\n+        )\n \n         # note: dims is already an immutable tuple\n         return self._replace(data=ndata, attrs=attrs, encoding=encoding)\n@@ -1016,13 +1028,13 @@ def _replace(\n             encoding = copy.copy(self._encoding)\n         return type(self)(dims, data, attrs, encoding, fastpath=True)\n \n-    def __copy__(self):\n-        return self.copy(deep=False)\n+    def __copy__(self: T_Variable) -> T_Variable:\n+        return self._copy(deep=False)\n \n-    def __deepcopy__(self, memo=None):\n-        # memo does nothing but is required for compatibility with\n-        # copy.deepcopy\n-        return self.copy(deep=True)\n+    def __deepcopy__(\n+        self: T_Variable, memo: dict[int, Any] | None = None\n+    ) -> T_Variable:\n+        return self._copy(deep=True, memo=memo)\n \n     # mutable objects should not be hashable\n     # https://github.com/python/mypy/issues/4266\n",
  "test_patch": "diff --git a/xarray/tests/test_concat.py b/xarray/tests/test_concat.py\n--- a/xarray/tests/test_concat.py\n+++ b/xarray/tests/test_concat.py\n@@ -219,7 +219,9 @@ def test_concat_errors(self):\n             concat([data, data], \"new_dim\", coords=[\"not_found\"])\n \n         with pytest.raises(ValueError, match=r\"global attributes not\"):\n-            data0, data1 = deepcopy(split_data)\n+            # call deepcopy seperately to get unique attrs\n+            data0 = deepcopy(split_data[0])\n+            data1 = deepcopy(split_data[1])\n             data1.attrs[\"foo\"] = \"bar\"\n             concat([data0, data1], \"dim1\", compat=\"identical\")\n         assert_identical(data, concat([data0, data1], \"dim1\", compat=\"equals\"))\ndiff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -6488,6 +6488,28 @@ def test_deepcopy_obj_array() -> None:\n     assert x0.values[0] is not x1.values[0]\n \n \n+def test_deepcopy_recursive() -> None:\n+    # GH:issue:7111\n+\n+    # direct recursion\n+    da = xr.DataArray([1, 2], dims=[\"x\"])\n+    da.attrs[\"other\"] = da\n+\n+    # TODO: cannot use assert_identical on recursive Vars yet...\n+    # lets just ensure that deep copy works without RecursionError\n+    da.copy(deep=True)\n+\n+    # indirect recursion\n+    da2 = xr.DataArray([5, 6], dims=[\"y\"])\n+    da.attrs[\"other\"] = da2\n+    da2.attrs[\"other\"] = da\n+\n+    # TODO: cannot use assert_identical on recursive Vars yet...\n+    # lets just ensure that deep copy works without RecursionError\n+    da.copy(deep=True)\n+    da2.copy(deep=True)\n+\n+\n def test_clip(da: DataArray) -> None:\n     with raise_if_dask_computes():\n         result = da.clip(min=0.5)\ndiff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6687,6 +6687,28 @@ def test_deepcopy_obj_array() -> None:\n     assert x0[\"foo\"].values[0] is not x1[\"foo\"].values[0]\n \n \n+def test_deepcopy_recursive() -> None:\n+    # GH:issue:7111\n+\n+    # direct recursion\n+    ds = xr.Dataset({\"a\": ([\"x\"], [1, 2])})\n+    ds.attrs[\"other\"] = ds\n+\n+    # TODO: cannot use assert_identical on recursive Vars yet...\n+    # lets just ensure that deep copy works without RecursionError\n+    ds.copy(deep=True)\n+\n+    # indirect recursion\n+    ds2 = xr.Dataset({\"b\": ([\"y\"], [3, 4])})\n+    ds.attrs[\"other\"] = ds2\n+    ds2.attrs[\"other\"] = ds\n+\n+    # TODO: cannot use assert_identical on recursive Vars yet...\n+    # lets just ensure that deep copy works without RecursionError\n+    ds.copy(deep=True)\n+    ds2.copy(deep=True)\n+\n+\n def test_clip(ds) -> None:\n     result = ds.clip(min=0.5)\n     assert all((result.min(...) >= 0.5).values())\ndiff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py\n--- a/xarray/tests/test_formatting.py\n+++ b/xarray/tests/test_formatting.py\n@@ -431,6 +431,24 @@ def test_array_repr_variable(self) -> None:\n         with xr.set_options(display_expand_data=False):\n             formatting.array_repr(var)\n \n+    def test_array_repr_recursive(self) -> None:\n+        # GH:issue:7111\n+\n+        # direct recurion\n+        var = xr.Variable(\"x\", [0, 1])\n+        var.attrs[\"x\"] = var\n+        formatting.array_repr(var)\n+\n+        da = xr.DataArray([0, 1], dims=[\"x\"])\n+        da.attrs[\"x\"] = da\n+        formatting.array_repr(da)\n+\n+        # indirect recursion\n+        var.attrs[\"x\"] = da\n+        da.attrs[\"x\"] = var\n+        formatting.array_repr(var)\n+        formatting.array_repr(da)\n+\n     @requires_dask\n     def test_array_scalar_format(self) -> None:\n         # Test numpy scalars:\n@@ -615,6 +633,21 @@ def test__mapping_repr(display_max_rows, n_vars, n_attr) -> None:\n         assert actual == expected\n \n \n+def test__mapping_repr_recursive() -> None:\n+    # GH:issue:7111\n+\n+    # direct recursion\n+    ds = xr.Dataset({\"a\": [[\"x\"], [1, 2, 3]]})\n+    ds.attrs[\"ds\"] = ds\n+    formatting.dataset_repr(ds)\n+\n+    # indirect recursion\n+    ds2 = xr.Dataset({\"b\": [[\"y\"], [1, 2, 3]]})\n+    ds.attrs[\"ds\"] = ds2\n+    ds2.attrs[\"ds\"] = ds\n+    formatting.dataset_repr(ds2)\n+\n+\n def test__element_formatter(n_elements: int = 100) -> None:\n     expected = \"\"\"\\\n     Dimensions without coordinates: dim_0: 3, dim_1: 3, dim_2: 3, dim_3: 3,\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -59,6 +59,8 @@ def var():\n \n \n class VariableSubclassobjects:\n+    cls: staticmethod[Variable]\n+\n     def test_properties(self):\n         data = 0.5 * np.arange(10)\n         v = self.cls([\"time\"], data, {\"foo\": \"bar\"})\n@@ -521,7 +523,7 @@ def test_concat_mixed_dtypes(self):\n \n     @pytest.mark.parametrize(\"deep\", [True, False])\n     @pytest.mark.parametrize(\"astype\", [float, int, str])\n-    def test_copy(self, deep, astype):\n+    def test_copy(self, deep: bool, astype: type[object]) -> None:\n         v = self.cls(\"x\", (0.5 * np.arange(10)).astype(astype), {\"foo\": \"bar\"})\n         w = v.copy(deep=deep)\n         assert type(v) is type(w)\n@@ -534,6 +536,27 @@ def test_copy(self, deep, astype):\n                 assert source_ndarray(v.values) is source_ndarray(w.values)\n         assert_identical(v, copy(v))\n \n+    def test_copy_deep_recursive(self) -> None:\n+        # GH:issue:7111\n+\n+        # direct recursion\n+        v = self.cls(\"x\", [0, 1])\n+        v.attrs[\"other\"] = v\n+\n+        # TODO: cannot use assert_identical on recursive Vars yet...\n+        # lets just ensure that deep copy works without RecursionError\n+        v.copy(deep=True)\n+\n+        # indirect recusrion\n+        v2 = self.cls(\"y\", [2, 3])\n+        v.attrs[\"other\"] = v2\n+        v2.attrs[\"other\"] = v\n+\n+        # TODO: cannot use assert_identical on recursive Vars yet...\n+        # lets just ensure that deep copy works without RecursionError\n+        v.copy(deep=True)\n+        v2.copy(deep=True)\n+\n     def test_copy_index(self):\n         midx = pd.MultiIndex.from_product(\n             [[\"a\", \"b\"], [1, 2], [-1, -2]], names=(\"one\", \"two\", \"three\")\n@@ -545,7 +568,7 @@ def test_copy_index(self):\n             assert isinstance(w.to_index(), pd.MultiIndex)\n             assert_array_equal(v._data.array, w._data.array)\n \n-    def test_copy_with_data(self):\n+    def test_copy_with_data(self) -> None:\n         orig = Variable((\"x\", \"y\"), [[1.5, 2.0], [3.1, 4.3]], {\"foo\": \"bar\"})\n         new_data = np.array([[2.5, 5.0], [7.1, 43]])\n         actual = orig.copy(data=new_data)\n@@ -553,20 +576,20 @@ def test_copy_with_data(self):\n         expected.data = new_data\n         assert_identical(expected, actual)\n \n-    def test_copy_with_data_errors(self):\n+    def test_copy_with_data_errors(self) -> None:\n         orig = Variable((\"x\", \"y\"), [[1.5, 2.0], [3.1, 4.3]], {\"foo\": \"bar\"})\n         new_data = [2.5, 5.0]\n         with pytest.raises(ValueError, match=r\"must match shape of object\"):\n             orig.copy(data=new_data)\n \n-    def test_copy_index_with_data(self):\n+    def test_copy_index_with_data(self) -> None:\n         orig = IndexVariable(\"x\", np.arange(5))\n         new_data = np.arange(5, 10)\n         actual = orig.copy(data=new_data)\n         expected = IndexVariable(\"x\", np.arange(5, 10))\n         assert_identical(expected, actual)\n \n-    def test_copy_index_with_data_errors(self):\n+    def test_copy_index_with_data_errors(self) -> None:\n         orig = IndexVariable(\"x\", np.arange(5))\n         new_data = np.arange(5, 20)\n         with pytest.raises(ValueError, match=r\"must match shape of object\"):\n",
  "problem_statement": "New deep copy behavior in 2022.9.0 causes maximum recursion error\n### What happened?\r\n\r\nI have a case where a Dataset to be written to a NetCDF file has \"ancillary_variables\" that have a circular dependence. For example, variable A has `.attrs[\"ancillary_variables\"]` that contains variable B, and B has `.attrs[\"ancillary_variables\"]` that contains A.\r\n\r\n### What did you expect to happen?\r\n\r\nCircular dependencies are detected and avoided. No maximum recursion error.\r\n\r\n### Minimal Complete Verifiable Example\r\n\r\n```Python\r\nIn [1]: import xarray as xr\r\n\r\nIn [2]: a = xr.DataArray(1.0, attrs={})\r\n\r\nIn [3]: b = xr.DataArray(2.0, attrs={})\r\n\r\nIn [4]: a.attrs[\"other\"] = b\r\n\r\nIn [5]: b.attrs[\"other\"] = a\r\n\r\nIn [6]: a_copy = a.copy(deep=True)\r\n---------------------------------------------------------------------------\r\nRecursionError                            Traceback (most recent call last)\r\nCell In [6], line 1\r\n----> 1 a_copy = a.copy(deep=True)\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/dataarray.py:1172, in DataArray.copy(self, deep, data)\r\n   1104 def copy(self: T_DataArray, deep: bool = True, data: Any = None) -> T_DataArray:\r\n   1105     \"\"\"Returns a copy of this array.\r\n   1106 \r\n   1107     If `deep=True`, a deep copy is made of the data array.\r\n   (...)\r\n   1170     pandas.DataFrame.copy\r\n   1171     \"\"\"\r\n-> 1172     variable = self.variable.copy(deep=deep, data=data)\r\n   1173     indexes, index_vars = self.xindexes.copy_indexes(deep=deep)\r\n   1175     coords = {}\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/variable.py:996, in Variable.copy(self, deep, data)\r\n    989     if self.shape != ndata.shape:\r\n    990         raise ValueError(\r\n    991             \"Data shape {} must match shape of object {}\".format(\r\n    992                 ndata.shape, self.shape\r\n    993             )\r\n    994         )\r\n--> 996 attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\r\n    997 encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\r\n    999 # note: dims is already an immutable tuple\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:146, in deepcopy(x, memo, _nil)\r\n    144 copier = _deepcopy_dispatch.get(cls)\r\n    145 if copier is not None:\r\n--> 146     y = copier(x, memo)\r\n    147 else:\r\n    148     if issubclass(cls, type):\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:231, in _deepcopy_dict(x, memo, deepcopy)\r\n    229 memo[id(x)] = y\r\n    230 for key, value in x.items():\r\n--> 231     y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    232 return y\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:153, in deepcopy(x, memo, _nil)\r\n    151 copier = getattr(x, \"__deepcopy__\", None)\r\n    152 if copier is not None:\r\n--> 153     y = copier(memo)\r\n    154 else:\r\n    155     reductor = dispatch_table.get(cls)\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/dataarray.py:1190, in DataArray.__deepcopy__(self, memo)\r\n   1187 def __deepcopy__(self: T_DataArray, memo=None) -> T_DataArray:\r\n   1188     # memo does nothing but is required for compatibility with\r\n   1189     # copy.deepcopy\r\n-> 1190     return self.copy(deep=True)\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/dataarray.py:1172, in DataArray.copy(self, deep, data)\r\n   1104 def copy(self: T_DataArray, deep: bool = True, data: Any = None) -> T_DataArray:\r\n   1105     \"\"\"Returns a copy of this array.\r\n   1106 \r\n   1107     If `deep=True`, a deep copy is made of the data array.\r\n   (...)\r\n   1170     pandas.DataFrame.copy\r\n   1171     \"\"\"\r\n-> 1172     variable = self.variable.copy(deep=deep, data=data)\r\n   1173     indexes, index_vars = self.xindexes.copy_indexes(deep=deep)\r\n   1175     coords = {}\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/variable.py:996, in Variable.copy(self, deep, data)\r\n    989     if self.shape != ndata.shape:\r\n    990         raise ValueError(\r\n    991             \"Data shape {} must match shape of object {}\".format(\r\n    992                 ndata.shape, self.shape\r\n    993             )\r\n    994         )\r\n--> 996 attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\r\n    997 encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\r\n    999 # note: dims is already an immutable tuple\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:146, in deepcopy(x, memo, _nil)\r\n    144 copier = _deepcopy_dispatch.get(cls)\r\n    145 if copier is not None:\r\n--> 146     y = copier(x, memo)\r\n    147 else:\r\n    148     if issubclass(cls, type):\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:231, in _deepcopy_dict(x, memo, deepcopy)\r\n    229 memo[id(x)] = y\r\n    230 for key, value in x.items():\r\n--> 231     y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    232 return y\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:153, in deepcopy(x, memo, _nil)\r\n    151 copier = getattr(x, \"__deepcopy__\", None)\r\n    152 if copier is not None:\r\n--> 153     y = copier(memo)\r\n    154 else:\r\n    155     reductor = dispatch_table.get(cls)\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/dataarray.py:1190, in DataArray.__deepcopy__(self, memo)\r\n   1187 def __deepcopy__(self: T_DataArray, memo=None) -> T_DataArray:\r\n   1188     # memo does nothing but is required for compatibility with\r\n   1189     # copy.deepcopy\r\n-> 1190     return self.copy(deep=True)\r\n\r\n    [... skipping similar frames: DataArray.copy at line 1172 (495 times), DataArray.__deepcopy__ at line 1190 (494 times), _deepcopy_dict at line 231 (494 times), Variable.copy at line 996 (494 times), deepcopy at line 146 (494 times), deepcopy at line 153 (494 times)]\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/variable.py:996, in Variable.copy(self, deep, data)\r\n    989     if self.shape != ndata.shape:\r\n    990         raise ValueError(\r\n    991             \"Data shape {} must match shape of object {}\".format(\r\n    992                 ndata.shape, self.shape\r\n    993             )\r\n    994         )\r\n--> 996 attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\r\n    997 encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\r\n    999 # note: dims is already an immutable tuple\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:146, in deepcopy(x, memo, _nil)\r\n    144 copier = _deepcopy_dispatch.get(cls)\r\n    145 if copier is not None:\r\n--> 146     y = copier(x, memo)\r\n    147 else:\r\n    148     if issubclass(cls, type):\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:231, in _deepcopy_dict(x, memo, deepcopy)\r\n    229 memo[id(x)] = y\r\n    230 for key, value in x.items():\r\n--> 231     y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    232 return y\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:153, in deepcopy(x, memo, _nil)\r\n    151 copier = getattr(x, \"__deepcopy__\", None)\r\n    152 if copier is not None:\r\n--> 153     y = copier(memo)\r\n    154 else:\r\n    155     reductor = dispatch_table.get(cls)\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/dataarray.py:1190, in DataArray.__deepcopy__(self, memo)\r\n   1187 def __deepcopy__(self: T_DataArray, memo=None) -> T_DataArray:\r\n   1188     # memo does nothing but is required for compatibility with\r\n   1189     # copy.deepcopy\r\n-> 1190     return self.copy(deep=True)\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/dataarray.py:1172, in DataArray.copy(self, deep, data)\r\n   1104 def copy(self: T_DataArray, deep: bool = True, data: Any = None) -> T_DataArray:\r\n   1105     \"\"\"Returns a copy of this array.\r\n   1106\r\n   1107     If `deep=True`, a deep copy is made of the data array.\r\n   (...)\r\n   1170     pandas.DataFrame.copy\r\n   1171     \"\"\"\r\n-> 1172     variable = self.variable.copy(deep=deep, data=data)\r\n   1173     indexes, index_vars = self.xindexes.copy_indexes(deep=deep)\r\n   1175     coords = {}\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/xarray/core/variable.py:985, in Variable.copy(self, deep, data)\r\n    982         ndata = indexing.MemoryCachedArray(ndata.array)\r\n    984     if deep:\r\n--> 985         ndata = copy.deepcopy(ndata)\r\n    987 else:\r\n    988     ndata = as_compatible_data(data)\r\n\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/copy.py:137, in deepcopy(x, memo, _nil)\r\n    134 if memo is None:\r\n    135     memo = {}\r\n--> 137 d = id(x)\r\n    138 y = memo.get(d, _nil)\r\n    139 if y is not _nil:\r\n\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n```\r\n\r\n\r\n### MVCE confirmation\r\n\r\n- [X] Minimal example — the example is as focused as reasonably possible to demonstrate the underlying issue in xarray.\r\n- [X] Complete example — the example is self-contained, including all data and the text of any traceback.\r\n- [X] Verifiable example — the example copy & pastes into an IPython prompt or [Binder notebook](https://mybinder.org/v2/gh/pydata/xarray/main?urlpath=lab/tree/doc/examples/blank_template.ipynb), returning the result.\r\n- [X] New issue — a search of GitHub Issues suggests this is not a duplicate.\r\n\r\n### Relevant log output\r\n\r\n_No response_\r\n\r\n### Anything else we need to know?\r\n\r\nI have at least one other issue related to the new xarray release but I'm still tracking it down. I think it is also related to the deep copy behavior change which was merged a day before the release so our CI didn't have time to test the \"unstable\" version of xarray.\r\n\r\n### Environment\r\n\r\n<details>\r\n\r\n```\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:35:26) [GCC 10.4.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 5.19.0-76051900-generic\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: ('en_US', 'UTF-8')\r\nlibhdf5: 1.12.2\r\nlibnetcdf: 4.8.1\r\n\r\nxarray: 2022.9.0\r\npandas: 1.5.0\r\nnumpy: 1.23.3\r\nscipy: 1.9.1\r\nnetCDF4: 1.6.1\r\npydap: None\r\nh5netcdf: 1.0.2\r\nh5py: 3.7.0\r\nNio: None\r\nzarr: 2.13.2\r\ncftime: 1.6.2\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: 1.3.2\r\ncfgrib: None\r\niris: None\r\nbottleneck: 1.3.5\r\ndask: 2022.9.1\r\ndistributed: 2022.9.1\r\nmatplotlib: 3.6.0\r\ncartopy: 0.21.0\r\nseaborn: None\r\nnumbagg: None\r\nfsspec: 2022.8.2\r\ncupy: None\r\npint: None\r\nsparse: None\r\nflox: None\r\nnumpy_groupies: None\r\nsetuptools: 65.4.0\r\npip: 22.2.2\r\nconda: None\r\npytest: 7.1.3\r\nIPython: 8.5.0\r\nsphinx: 5.2.3\r\n```\r\n\r\n</details>\r\n\n",
  "hints_text": "CC @headtr1ck any idea if this is supposed to work with your new #7089?\nI get a similar error for different structures and if I do something like `data_arr.where(data_arr > 5, drop=True)`. In this case I have dask array based DataArrays and dask ends up trying to hash the object and it ends up in a loop trying to get xarray to hash the DataArray or something and xarray trying to hash the DataArrays inside `.attrs`.\r\n\r\n```\r\nIn [9]: import dask.array as da\r\n\r\nIn [15]: a = xr.DataArray(da.zeros(5.0), attrs={}, dims=(\"a_dim\",))\r\n\r\nIn [16]: b = xr.DataArray(da.zeros(8.0), attrs={}, dims=(\"b_dim\",))\r\n\r\nIn [20]: a.attrs[\"other\"] = b\r\n\r\nIn [24]: lons = xr.DataArray(da.random.random(8), attrs={\"ancillary_variables\": [b]})\r\n\r\nIn [25]: lats = xr.DataArray(da.random.random(8), attrs={\"ancillary_variables\": [b]})\r\n\r\nIn [26]: b.attrs[\"some_attr\"] = [lons, lats]\r\n\r\nIn [27]: cond = a > 5\r\n\r\nIn [28]: c = a.where(cond, drop=True)\r\n...\r\nFile ~/miniconda3/envs/satpy_py310/lib/python3.10/site-packages/dask/utils.py:1982, in _HashIdWrapper.__hash__(self)\r\n   1981 def __hash__(self):\r\n-> 1982     return id(self.wrapped)\r\n\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n\r\n```\nI basically copied the behavior of `Dataset.copy` which should already show this problem.\nIn principle we are doing a `new_attrs = copy.deepcopy(attrs)`.\n\nI would claim that the new behavior is correct, but maybe other devs can confirm this.\n\nComing from netCDF, it does not really make sense to put complex objects in attrs, but I guess for in-memory only it works.\nI'd have to check, but this structure I *think* was originally produce by xarray reading a CF compliant NetCDF file. That is my memory at least. It could be that our library (satpy) is doing this as a convenience, replacing the name of an ancillary variable with the DataArray of that ancillary variable.\r\n\r\nMy other new issue seems to be related to `.copy()` doing a `.copy()` on dask arrays which then makes them not equivalent anymore. Working on an MVCE now.\nHmmm, python seems to deal with this reasonably for its builtins:\r\n\r\n```python\r\nIn [1]: a = [1]\r\n\r\nIn [2]: b = [a]\r\n\r\nIn [3]: a.append(b)\r\n\r\nIn [4]: import copy\r\n\r\nIn [5]: copy.deepcopy(a)\r\nOut[5]: [1, [[...]]]\r\n```\r\n\r\nI doubt this is getting hit _that_ much given it requires a recursive data structure, but it does seem like a gnarly error.\r\n\r\nIs there some feature that python uses to check whether a data structure is recursive when it's copying, which we're not taking advantage of? I can look more later.\n> Is there some feature that python uses to check whether a data structure is recursive when it's copying, which we're not taking advantage of? I can look more later.\r\n\r\nyes, `def __deepcopy__(self, memo=None)` has the `memo` argument exactly for the purpose of dealing with recursion, see https://docs.python.org/3/library/copy.html. \r\nCurrently, xarray's `__deepcopy__` methods do not pass on the memo argument when deepcopying its components.\nI think our implementations of `copy(deep=True)` and `__deepcopy__` are reverted, the first should call the latter and not the other way around to be able to pass the memo dict.\n\nThis will lead to a bit of duplicate code between `__copy__` and `__deepcopy__` but would be the correct way.\nTo avoid code duplication you may consider moving all logic from the `copy` methods to new `_copy` methods and extending that with an optional `memo` argument and have the `copy`, `__copy__` and `__deepcopy__` methods as thin wrappers around it.\nI will set up a PR for that.\r\nAnother issue has arisen: the repr is also broken for recursive data. With your example python should also raise a RecursionError when looking at this data?\nOk, even `xarray.testing.assert_identical` fails with recursive definitions.\r\nAre we sure that it is a good idea to support this?",
  "created_at": "2022-10-01T15:24:40Z",
  "version": "2022.09",
  "FAIL_TO_PASS": "[\"xarray/tests/test_dataarray.py::test_deepcopy_recursive\", \"xarray/tests/test_dataset.py::test_deepcopy_recursive\", \"xarray/tests/test_formatting.py::TestFormatting::test_array_repr_recursive\", \"xarray/tests/test_variable.py::TestVariable::test_copy_deep_recursive\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_deep_recursive\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_concat.py::test_concat_compat\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_merge_variables_present_in_some_datasets\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_2\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-all]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-all]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_precedence\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_data_vars_typing\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_data_vars\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_constant_index\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_size0\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_autoalign\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_errors\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_join_kwarg\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs0-var2_attrs0-expected_attrs0-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs1-var2_attrs1-expected_attrs1-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs2-var2_attrs2-expected_attrs2-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs3-var2_attrs3-expected_attrs3-True]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[drop-var1_attrs4-var2_attrs4-expected_attrs4-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[identical-var1_attrs5-var2_attrs5-expected_attrs5-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[identical-var1_attrs6-var2_attrs6-expected_attrs6-True]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[override-var1_attrs7-var2_attrs7-expected_attrs7-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[drop_conflicts-var1_attrs8-var2_attrs8-expected_attrs8-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[<lambda>-var1_attrs9-var2_attrs9-expected_attrs9-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs10-attrs20-expected_attrs0-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs11-attrs21-expected_attrs1-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs12-attrs22-expected_attrs2-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs13-attrs23-expected_attrs3-True]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[drop-attrs14-attrs24-expected_attrs4-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[identical-attrs15-attrs25-expected_attrs5-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[identical-attrs16-attrs26-expected_attrs6-True]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[override-attrs17-attrs27-expected_attrs7-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[drop_conflicts-attrs18-attrs28-expected_attrs8-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[<lambda>-attrs19-attrs29-expected_attrs9-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_promote_shape\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_do_not_promote\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_is_variable\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_is_dataarray\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_multiindex\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_along_new_dim_multiindex\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[fill_value0]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2.0]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[fill_value3]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_str_dtype[x1-str]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_str_dtype[x1-bytes]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_str_dtype[x2-str]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_str_dtype[x2-bytes]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_encoding\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_lazy\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[fill_value0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2.0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_join_kwarg\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_combine_attrs_kwarg\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_str_dtype[x1-str]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_str_dtype[x1-bytes]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_str_dtype[x2-str]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_str_dtype[x2-bytes]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_coord_name\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr20-attr10]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr20-attr11]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr20-attr12]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr21-attr10]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr21-attr11]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr21-attr12]\", \"xarray/tests/test_concat.py::test_concat_merge_single_non_dim_coord\", \"xarray/tests/test_concat.py::test_concat_preserve_coordinate_order\", \"xarray/tests/test_concat.py::test_concat_typing_check\", \"xarray/tests/test_concat.py::test_concat_not_all_indexes\", \"xarray/tests/test_concat.py::test_concat_index_not_same_dim\", \"xarray/tests/test_dataarray.py::TestDataArray::test_repr\", \"xarray/tests/test_dataarray.py::TestDataArray::test_repr_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_repr_multiindex_long\", \"xarray/tests/test_dataarray.py::TestDataArray::test_properties\", \"xarray/tests/test_dataarray.py::TestDataArray::test_data_property\", \"xarray/tests/test_dataarray.py::TestDataArray::test_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_get_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_get_index_size_zero\", \"xarray/tests/test_dataarray.py::TestDataArray::test_struct_array_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_name\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sizes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_encoding\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_invalid\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_from_self_described\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_from_self_described_chunked\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_from_0d\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_dask_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_equals_and_identical\", \"xarray/tests/test_dataarray.py::TestDataArray::test_equals_failures\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_equals\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_dict\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_empty_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setitem\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setitem_fancy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setitem_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_contains\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pickle\", \"xarray/tests/test_dataarray.py::TestDataArray::test_chunk\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel_types\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel_fancy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_invalid_slice\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_dataarray_datetime_slice\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_float\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_float_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_no_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_method\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_drop\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel_drop\", \"xarray/tests/test_dataarray.py::TestDataArray::test_head\", \"xarray/tests/test_dataarray.py::TestDataArray::test_tail\", \"xarray/tests/test_dataarray.py::TestDataArray::test_thin\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_datetime64_value\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_assign\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_assign_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_single_boolean\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_dim_name_collision_with_sel_params\", \"xarray/tests/test_dataarray.py::TestDataArray::test_selection_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_selection_multiindex_remove_unused\", \"xarray/tests/test_dataarray.py::TestDataArray::test_selection_multiindex_from_level\", \"xarray/tests/test_dataarray.py::TestDataArray::test_virtual_default_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_virtual_time_components\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_to_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coord_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reset_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_assign_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_assign_coords_existing_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_coords_update_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_coords_multiindex_level\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_replacement_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_non_string\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_delitem_delete_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_delitem_multiindex_level\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_like\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_like\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_like_no_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_regressions\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_method\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[fill_value3]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_str_dtype[str]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_str_dtype[bytes]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_rename\", \"xarray/tests/test_dataarray.py::TestDataArray::test_rename_dimension_coord_warnings\", \"xarray/tests/test_dataarray.py::TestDataArray::test_init_value\", \"xarray/tests/test_dataarray.py::TestDataArray::test_swap_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims_error\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims_with_scalar_coordinate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims_with_greater_dim_size\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reset_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reset_index_keep_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reorder_levels\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_xindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dataset_getitem\", \"xarray/tests/test_dataarray.py::TestDataArray::test_array_interface\", \"xarray/tests/test_dataarray.py::TestDataArray::test_astype_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_astype_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_astype_order\", \"xarray/tests/test_dataarray.py::TestDataArray::test_is_null\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math_automatic_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_non_overlapping_dataarrays_return_empty_result\", \"xarray/tests/test_dataarray.py::TestDataArray::test_empty_dataarrays_return_empty_result\", \"xarray/tests/test_dataarray.py::TestDataArray::test_inplace_math_basics\", \"xarray/tests/test_dataarray.py::TestDataArray::test_inplace_math_error\", \"xarray/tests/test_dataarray.py::TestDataArray::test_inplace_math_automatic_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math_name\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math_with_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_index_math\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dataset_math\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_unstack\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_unstack_decreasing_coordinate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_unstack_pandas_consistency\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_nonunique_consistency[1-numpy]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_nonunique_consistency[1-dask]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_unstacked_dataset_raises_value_error\", \"xarray/tests/test_dataarray.py::TestDataArray::test_transpose\", \"xarray/tests/test_dataarray.py::TestDataArray::test_squeeze\", \"xarray/tests/test_dataarray.py::TestDataArray::test_squeeze_drop\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_coordinates\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_multiindex_level\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_all_multiindex_levels\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_index_labels\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_index_positions\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dropna\", \"xarray/tests/test_dataarray.py::TestDataArray::test_where\", \"xarray/tests/test_dataarray.py::TestDataArray::test_where_lambda\", \"xarray/tests/test_dataarray.py::TestDataArray::test_where_string\", \"xarray/tests/test_dataarray.py::TestDataArray::test_cumops\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_keepdims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_keepdims_bottleneck\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_out\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-0.25-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q1-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q2-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-0.25-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q1-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q2-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-0.25-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q1-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q2-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-0.25-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q1-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q2-None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile_method[midpoint]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile_method[lower]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile_interpolation_deprecated[midpoint]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile_interpolation_deprecated[lower]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_keep_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_assign_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[<lambda>0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[<lambda>1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[absolute]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[abs]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_fillna\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_copy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_override\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_override_error[darrays0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_override_error[darrays1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_exclude\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_without_indexes_exclude\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_mixed_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_without_indexes_errors\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_str_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays_misaligned\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays_nocopy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays_exclude\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_coordinates\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_pandas\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataframe\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataframe_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataframe_0length\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_pandas_name_matches_coordinate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_series\", \"xarray/tests/test_dataarray.py::TestDataArray::test_from_series_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_from_series_sparse\", \"xarray/tests/test_dataarray.py::TestDataArray::test_from_multiindex_series_sparse\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_empty_series\", \"xarray/tests/test_dataarray.py::TestDataArray::test_series_categorical_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_masked_array\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_cdms2_classic\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_cdms2_ugrid\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataset_whole\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataset_split\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataset_retains_keys\", \"xarray/tests/test_dataarray.py::TestDataArray::test__title_for_slice\", \"xarray/tests/test_dataarray.py::TestDataArray::test__title_for_slice_truncate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dataarray_diff_n1\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coordinate_diff\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int--5]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int-0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int-1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int-2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float--5]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float-0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float-1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float-2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_roll_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_roll_no_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_copy_with_data\", \"xarray/tests/test_dataarray.py::TestDataArray::test_real_and_imag\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setattr_raises\", \"xarray/tests/test_dataarray.py::TestDataArray::test_full_like\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dot\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dot_align_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_matmul\", \"xarray/tests/test_dataarray.py::TestDataArray::test_matmul_align_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_binary_op_join_setting\", \"xarray/tests/test_dataarray.py::TestDataArray::test_combine_first\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sortby\", \"xarray/tests/test_dataarray.py::TestDataArray::test_rank\", \"xarray/tests/test_dataarray.py::TestDataArray::test_polyfit[True-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_polyfit[True-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_polyfit[False-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_polyfit[False-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_constant\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[3]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[end_values2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[end_values3]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[None-reflect]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[None-symmetric]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[even-reflect]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[even-symmetric]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[odd-reflect]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[odd-symmetric]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-python-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-python-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-None-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-None-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-numexpr-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[numpy-numexpr-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-python-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-python-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-None-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-None-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-numexpr-pandas]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_query[dask-numexpr-python]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_curvefit[True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_curvefit[False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_curvefit_helpers\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[True-allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[True-allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[float]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[allnan]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[dask-int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[dask-nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[dask-obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[nodask-int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[nodask-nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[nodask-obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[nodask-datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[dask-int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[dask-nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[dask-obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[nodask-int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[nodask-nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[nodask-obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[nodask-datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[int]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[nan]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[obj]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[datetime]\", \"xarray/tests/test_dataarray.py::TestReduceND::test_idxminmax_dask[3-idxmin]\", \"xarray/tests/test_dataarray.py::TestReduceND::test_idxminmax_dask[3-idxmax]\", \"xarray/tests/test_dataarray.py::TestReduceND::test_idxminmax_dask[5-idxmin]\", \"xarray/tests/test_dataarray.py::TestReduceND::test_idxminmax_dask[5-idxmax]\", \"xarray/tests/test_dataarray.py::test_isin[numpy-repeating_ints]\", \"xarray/tests/test_dataarray.py::test_isin[dask-repeating_ints]\", \"xarray/tests/test_dataarray.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataarray.py::test_no_warning_for_all_nan\", \"xarray/tests/test_dataarray.py::test_name_in_masking\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_to_and_from_iris\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_to_and_from_iris_dask\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_name_from_cube[var_name-height-Height-var_name-attrs0]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_name_from_cube[None-height-Height-height-attrs1]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_name_from_cube[None-None-Height-Height-attrs2]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_name_from_cube[None-None-None-None-attrs3]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_coord_name_from_cube[var_name-height-Height-var_name-attrs0]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_coord_name_from_cube[None-height-Height-height-attrs1]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_coord_name_from_cube[None-None-Height-Height-attrs2]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_da_coord_name_from_cube[None-None-None-unknown-attrs3]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_prevent_duplicate_coord_names\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_fallback_to_iris_AuxCoord[coord_values0]\", \"xarray/tests/test_dataarray.py::TestIrisConversion::test_fallback_to_iris_AuxCoord[coord_values1]\", \"xarray/tests/test_dataarray.py::test_no_dict\", \"xarray/tests/test_dataarray.py::test_subclass_slots\", \"xarray/tests/test_dataarray.py::test_weakref\", \"xarray/tests/test_dataarray.py::test_delete_coords\", \"xarray/tests/test_dataarray.py::test_deepcopy_nested_attrs\", \"xarray/tests/test_dataarray.py::test_deepcopy_obj_array\", \"xarray/tests/test_dataarray.py::test_clip[1-numpy]\", \"xarray/tests/test_dataarray.py::test_clip[1-dask]\", \"xarray/tests/test_dataarray.py::TestDropDuplicates::test_drop_duplicates_1d[first]\", \"xarray/tests/test_dataarray.py::TestDropDuplicates::test_drop_duplicates_1d[last]\", \"xarray/tests/test_dataarray.py::TestDropDuplicates::test_drop_duplicates_1d[False]\", \"xarray/tests/test_dataarray.py::TestDropDuplicates::test_drop_duplicates_2d\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_numpy\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_dask\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_pint\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_sparse\", \"xarray/tests/test_dataarray.py::TestNumpyCoercion::test_from_pint_wrapping_dask\", \"xarray/tests/test_dataarray.py::TestStackEllipsis::test_result_as_expected\", \"xarray/tests/test_dataarray.py::TestStackEllipsis::test_error_on_ellipsis_without_list\", \"xarray/tests/test_dataset.py::TestDataset::test_repr\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_period_index\", \"xarray/tests/test_dataset.py::TestDataset::test_unicode_data\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_nep18\", \"xarray/tests/test_dataset.py::TestDataset::test_info\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_1d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_0d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_compat\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_asarray\", \"xarray/tests/test_dataset.py::TestDataset::test_get_index\", \"xarray/tests/test_dataset.py::TestDataset::test_attr_access\", \"xarray/tests/test_dataset.py::TestDataset::test_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_modify_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_modify\", \"xarray/tests/test_dataset.py::TestDataset::test_update_index\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_set\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape\", \"xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_failures\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals\", \"xarray/tests/test_dataset.py::TestDataset::test_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_chunks_does_not_load_data\", \"xarray/tests/test_dataset.py::TestDataset::test_chunk\", \"xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy_convert_index_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_sel\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_categorical\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_categorical_error\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_index\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_drop_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_head\", \"xarray/tests/test_dataset.py::TestDataset::test_tail\", \"xarray/tests/test_dataset.py::TestDataset::test_thin\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_method\", \"xarray/tests/test_dataset.py::TestDataset::test_loc\", \"xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_like\", \"xarray/tests/test_dataset.py::TestDataset::test_to_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_attrs_encoding\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_warning\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_method\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_align\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exact\", \"xarray/tests/test_dataset.py::TestDataset::test_align_override\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_align_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_align_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_align_non_unique\", \"xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_align_index_var_attrs[left]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_index_var_attrs[override]\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_multi_index\", \"xarray/tests/test_dataset.py::TestDataset::test_variable_indexing\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_variables\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_copy\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_rename\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_old_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dimension_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dimension_coord_warnings\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_perserve_attrs_encoding\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_swap_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index_deindexed_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[foo-False-dropped0-converted0-renamed0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[foo-True-dropped1-converted1-renamed1]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[x-False-dropped2-converted2-renamed2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[x-True-dropped3-converted3-renamed3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg4-False-dropped4-converted4-renamed4]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg5-True-dropped5-converted5-renamed5]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg6-False-dropped6-converted6-renamed6]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg7-True-dropped7-converted7-renamed7]\", \"xarray/tests/test_dataset.py::TestDataset::test_reorder_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_set_xindex\", \"xarray/tests/test_dataset.py::TestDataset::test_set_xindex_options\", \"xarray/tests/test_dataset.py::TestDataset::test_stack\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[True-expected_keys0]\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[False-expected_keys1]\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[None-expected_keys2]\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_multi_index\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_non_dim_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_update\", \"xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_update_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_update_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_multiple_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_time_season\", \"xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list0-data0-Different\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list1-data1-Empty\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list2-data2-assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords_existing_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_all_multiindex_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_to_array\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_categorical\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns\", \"xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_pickle\", \"xarray/tests/test_dataset.py::TestDataset::test_lazy_load\", \"xarray/tests/test_dataset.py::TestDataset::test_dropna\", \"xarray/tests/test_dataset.py::TestDataset::test_fillna\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]\", \"xarray/tests/test_dataset.py::TestDataset::test_where\", \"xarray/tests/test_dataset.py::TestDataset::test_where_other\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim1-expected0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim2-expected1]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim3-expected2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-time-expected3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim1-expected0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim2-expected1]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim3-expected2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-time-expected3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_strings\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-None]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-None]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-None]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_method[midpoint]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_method[lower]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_interpolation_deprecated[midpoint]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_interpolation_deprecated[lower]\", \"xarray/tests/test_dataset.py::TestDataset::test_rank\", \"xarray/tests/test_dataset.py::TestDataset::test_rank_use_bottleneck\", \"xarray/tests/test_dataset.py::TestDataset::test_count\", \"xarray/tests/test_dataset.py::TestDataset::test_map\", \"xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math\", \"xarray/tests/test_dataset.py::TestDataset::test_unary_ops\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_multidim\", \"xarray/tests/test_dataset.py::TestDataset::test_real_and_imag\", \"xarray/tests/test_dataset.py::TestDataset::test_setattr_raises\", \"xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting\", \"xarray/tests/test_dataset.py::TestDataset::test_full_like\", \"xarray/tests/test_dataset.py::TestDataset::test_combine_first\", \"xarray/tests/test_dataset.py::TestDataset::test_sortby\", \"xarray/tests/test_dataset.py::TestDataset::test_attribute_access\", \"xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_output\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_warnings\", \"xarray/tests/test_dataset.py::TestDataset::test_pad\", \"xarray/tests/test_dataset.py::TestDataset::test_astype_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-python-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-python-python]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-None-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-None-python]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-numexpr-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-numexpr-python]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-python-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-python-python]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-None-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-None-python]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-numexpr-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-numexpr-python]\", \"xarray/tests/test_dataset.py::test_isin[numpy-test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[numpy-test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[numpy-test_elements2]\", \"xarray/tests/test_dataset.py::test_isin[dask-test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[dask-test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[dask-test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dataset\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_error_message_on_set_supplied\", \"xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[numpy-3]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[dask-3]\", \"xarray/tests/test_dataset.py::test_dir_non_string[1-numpy]\", \"xarray/tests/test_dataset.py::test_dir_non_string[1-dask]\", \"xarray/tests/test_dataset.py::test_dir_unicode[1-numpy]\", \"xarray/tests/test_dataset.py::test_dir_unicode[1-dask]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[numpy-2]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[dask-2]\", \"xarray/tests/test_dataset.py::test_differentiate[1-True]\", \"xarray/tests/test_dataset.py::test_differentiate[1-False]\", \"xarray/tests/test_dataset.py::test_differentiate[2-True]\", \"xarray/tests/test_dataset.py::test_differentiate[2-False]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[True]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[False]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[True]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[False]\", \"xarray/tests/test_dataset.py::test_integrate[True]\", \"xarray/tests/test_dataset.py::test_integrate[False]\", \"xarray/tests/test_dataset.py::test_cumulative_integrate[True]\", \"xarray/tests/test_dataset.py::test_cumulative_integrate[False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]\", \"xarray/tests/test_dataset.py::test_no_dict\", \"xarray/tests/test_dataset.py::test_subclass_slots\", \"xarray/tests/test_dataset.py::test_weakref\", \"xarray/tests/test_dataset.py::test_deepcopy_obj_array\", \"xarray/tests/test_dataset.py::test_clip[1-numpy]\", \"xarray/tests/test_dataset.py::test_clip[1-dask]\", \"xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[first]\", \"xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[last]\", \"xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[False]\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_numpy\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_dask\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_pint\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_sparse\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_pint_wrapping_dask\", \"xarray/tests/test_dataset.py::test_string_keys_typing\", \"xarray/tests/test_dataset.py::test_transpose_error\", \"xarray/tests/test_formatting.py::TestFormatting::test_get_indexer_at_least_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_first_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_array_flat\", \"xarray/tests/test_formatting.py::TestFormatting::test_pretty_print\", \"xarray/tests/test_formatting.py::TestFormatting::test_maybe_truncate\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_timestamp_invalid_pandas_format\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_timestamp_out_of_bounds\", \"xarray/tests/test_formatting.py::TestFormatting::test_attribute_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_array_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_attrs_repr_with_array\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_dataset_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_array_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_array_repr_variable\", \"xarray/tests/test_formatting.py::TestFormatting::test_array_scalar_format\", \"xarray/tests/test_formatting.py::test_inline_variable_array_repr_custom_repr\", \"xarray/tests/test_formatting.py::test_set_numpy_options\", \"xarray/tests/test_formatting.py::test_short_numpy_repr\", \"xarray/tests/test_formatting.py::test_large_array_repr_length\", \"xarray/tests/test_formatting.py::test_repr_file_collapsed\", \"xarray/tests/test_formatting.py::test__mapping_repr[50-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[35-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[11-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[1-40-30]\", \"xarray/tests/test_formatting.py::test__element_formatter\", \"xarray/tests/test_variable.py::TestVariable::test_properties\", \"xarray/tests/test_variable.py::TestVariable::test_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_dict\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_1d\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_int\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_float\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_string\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_object\", \"xarray/tests/test_variable.py::TestVariable::test_0d_object_array_with_list\", \"xarray/tests/test_variable.py::TestVariable::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_0d_time_data\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_object_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_data\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestVariable::test_1d_math\", \"xarray/tests/test_variable.py::TestVariable::test_1d_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_array_interface\", \"xarray/tests/test_variable.py::TestVariable::test___array__\", \"xarray/tests/test_variable.py::TestVariable::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_eq_all_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestVariable::test_concat\", \"xarray/tests/test_variable.py::TestVariable::test_concat_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestVariable::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestVariable::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index\", \"xarray/tests/test_variable.py::TestVariable::test_copy_with_data\", \"xarray/tests/test_variable.py::TestVariable::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestVariable::test_replace\", \"xarray/tests/test_variable.py::TestVariable::test_real_and_imag\", \"xarray/tests/test_variable.py::TestVariable::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestVariable::test_multiindex\", \"xarray/tests/test_variable.py::TestVariable::test_load\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_advanced\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_uint\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_error\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg0-np_arg0]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg1-np_arg1]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg2-np_arg2]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg3-np_arg3]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg4-np_arg4]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window[x-3]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window[y-5]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_1d\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims0-center0]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims0-center1]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims1-center0]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims1-center1]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims2-center0]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims2-center1]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-window0-x_w-True]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-3-window_dim1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-3-x_w-center2]\", \"xarray/tests/test_variable.py::TestVariable::test_data_and_values\", \"xarray/tests/test_variable.py::TestVariable::test_numpy_same_methods\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion_scalar\", \"xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion_scalar\", \"xarray/tests/test_variable.py::TestVariable::test_0d_str\", \"xarray/tests/test_variable.py::TestVariable::test_0d_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_0d_timedelta\", \"xarray/tests/test_variable.py::TestVariable::test_equals_and_identical\", \"xarray/tests/test_variable.py::TestVariable::test_broadcast_equals\", \"xarray/tests/test_variable.py::TestVariable::test_no_conflicts\", \"xarray/tests/test_variable.py::TestVariable::test_as_variable\", \"xarray/tests/test_variable.py::TestVariable::test_repr\", \"xarray/tests/test_variable.py::TestVariable::test_repr_lazy_data\", \"xarray/tests/test_variable.py::TestVariable::test_detect_indexer_type\", \"xarray/tests/test_variable.py::TestVariable::test_indexer_type\", \"xarray/tests/test_variable.py::TestVariable::test_items\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_basic\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_2d_input\", \"xarray/tests/test_variable.py::TestVariable::test_isel\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_numpy_string\", \"xarray/tests/test_variable.py::TestVariable::test_indexing_0d_unicode\", \"xarray/tests/test_variable.py::TestVariable::test_shift[fill_value0]\", \"xarray/tests/test_variable.py::TestVariable::test_shift[2]\", \"xarray/tests/test_variable.py::TestVariable::test_shift[2.0]\", \"xarray/tests/test_variable.py::TestVariable::test_shift2d\", \"xarray/tests/test_variable.py::TestVariable::test_roll\", \"xarray/tests/test_variable.py::TestVariable::test_roll_consistency\", \"xarray/tests/test_variable.py::TestVariable::test_transpose\", \"xarray/tests/test_variable.py::TestVariable::test_transpose_0d\", \"xarray/tests/test_variable.py::TestVariable::test_squeeze\", \"xarray/tests/test_variable.py::TestVariable::test_get_axis_num\", \"xarray/tests/test_variable.py::TestVariable::test_set_dims\", \"xarray/tests/test_variable.py::TestVariable::test_set_dims_object_dtype\", \"xarray/tests/test_variable.py::TestVariable::test_stack\", \"xarray/tests/test_variable.py::TestVariable::test_stack_errors\", \"xarray/tests/test_variable.py::TestVariable::test_unstack\", \"xarray/tests/test_variable.py::TestVariable::test_unstack_errors\", \"xarray/tests/test_variable.py::TestVariable::test_unstack_2d\", \"xarray/tests/test_variable.py::TestVariable::test_stack_unstack_consistency\", \"xarray/tests/test_variable.py::TestVariable::test_broadcasting_math\", \"xarray/tests/test_variable.py::TestVariable::test_broadcasting_failures\", \"xarray/tests/test_variable.py::TestVariable::test_inplace_math\", \"xarray/tests/test_variable.py::TestVariable::test_inplace_math_error\", \"xarray/tests/test_variable.py::TestVariable::test_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_use_bottleneck\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-0.25]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-0.25]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_method[True-midpoint]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_method[True-lower]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_method[False-midpoint]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_method[False-lower]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_interpolation_deprecation[midpoint]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_interpolation_deprecation[lower]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_chunked_dim_error\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[-0.1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[1.1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q3]\", \"xarray/tests/test_variable.py::TestVariable::test_rank_dask_raises\", \"xarray/tests/test_variable.py::TestVariable::test_rank_use_bottleneck\", \"xarray/tests/test_variable.py::TestVariable::test_rank\", \"xarray/tests/test_variable.py::TestVariable::test_big_endian_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_funcs\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims_dask\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keep_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_binary_ops_keep_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_count\", \"xarray/tests/test_variable.py::TestVariable::test_setitem\", \"xarray/tests/test_variable.py::TestVariable::test_setitem_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen_2d\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen_keep_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_properties\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_dict\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_int\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_float\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_string\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_object\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_0d_time_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_object_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_1d_math\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_1d_reduce\", \"xarray/tests/test_variable.py::TestVariableWithDask::test___array__\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_deep_recursive\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_replace\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_real_and_imag\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_load\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_advanced\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_error\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg0-np_arg0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg1-np_arg1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg2-np_arg2]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg3-np_arg3]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg4-np_arg4]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window[x-3]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window[y-5]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims0-center0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims0-center1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims1-center0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims1-center1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims2-center0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims2-center1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-window0-x_w-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-3-window_dim1-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-3-x_w-center2]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_chunk\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_fancy\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-3-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-3-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-8-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-8-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-11-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-11-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-3-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-3-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-8-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-8-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-11-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-11-y]\", \"xarray/tests/test_variable.py::TestVariableWithSparse::test_as_sparse\", \"xarray/tests/test_variable.py::TestIndexVariable::test_properties\", \"xarray/tests/test_variable.py::TestIndexVariable::test_attrs\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_dict\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_int\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_float\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_string\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_object\", \"xarray/tests/test_variable.py::TestIndexVariable::test_0d_object_array_with_list\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestIndexVariable::test_0d_time_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_object_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_1d_math\", \"xarray/tests/test_variable.py::TestIndexVariable::test_1d_reduce\", \"xarray/tests/test_variable.py::TestIndexVariable::test_array_interface\", \"xarray/tests/test_variable.py::TestIndexVariable::test___array__\", \"xarray/tests/test_variable.py::TestIndexVariable::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_eq_all_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_attrs\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestIndexVariable::test_replace\", \"xarray/tests/test_variable.py::TestIndexVariable::test_real_and_imag\", \"xarray/tests/test_variable.py::TestIndexVariable::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestIndexVariable::test_multiindex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_load\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestIndexVariable::test_init\", \"xarray/tests/test_variable.py::TestIndexVariable::test_to_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_multiindex_default_level_names\", \"xarray/tests/test_variable.py::TestIndexVariable::test_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_name\", \"xarray/tests/test_variable.py::TestIndexVariable::test_level_names\", \"xarray/tests/test_variable.py::TestIndexVariable::test_get_level_variable\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_periods\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_multiindex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[str]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[bytes]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_coordinate_alias\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64\", \"xarray/tests/test_variable.py::TestIndexVariable::test_to_index_variable_copy\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_unchanged_types\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_converted_types\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_masked_array\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_datetime\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_zeros_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_ones_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_unsupported_type\", \"xarray/tests/test_variable.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_NumpyIndexingAdapter\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_LazilyIndexedArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_CopyOnWriteArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_MemoryCachedArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_DaskIndexingAdapter\", \"xarray/tests/test_variable.py::test_clip\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_numpy[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_numpy[IndexVariable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_dask[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_dask[IndexVariable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint[IndexVariable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_sparse[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint_wrapping_dask[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint_wrapping_dask[IndexVariable]\"]",
  "environment_setup_commit": "087ebbb78668bdf5d2d41c3b2553e3f29ce75be1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.902329",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}