{
  "repo": "django/django",
  "instance_id": "django__django-12153",
  "base_commit": "86a0231e0a087d4b909f76223cc55d5bbb673930",
  "patch": "diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n@@ -23,6 +23,7 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n     style = color_style()\n     Permission = apps.get_model('auth', 'Permission')\n     ContentType = apps.get_model('contenttypes', 'ContentType')\n+    alias = schema_editor.connection.alias\n     for Model in apps.get_models():\n         opts = Model._meta\n         if not opts.proxy:\n@@ -34,13 +35,14 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n         permissions_query = Q(codename__in=proxy_default_permissions_codenames)\n         for codename, name in opts.permissions:\n             permissions_query = permissions_query | Q(codename=codename, name=name)\n-        concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)\n-        proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n+        content_type_manager = ContentType.objects.db_manager(alias)\n+        concrete_content_type = content_type_manager.get_for_model(Model, for_concrete_model=True)\n+        proxy_content_type = content_type_manager.get_for_model(Model, for_concrete_model=False)\n         old_content_type = proxy_content_type if reverse else concrete_content_type\n         new_content_type = concrete_content_type if reverse else proxy_content_type\n         try:\n-            with transaction.atomic():\n-                Permission.objects.filter(\n+            with transaction.atomic(using=alias):\n+                Permission.objects.using(alias).filter(\n                     permissions_query,\n                     content_type=old_content_type,\n                 ).update(content_type=new_content_type)\n",
  "test_patch": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -3,7 +3,8 @@\n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n-from django.test import TestCase\n+from django.db import connection, connections\n+from django.test import TransactionTestCase\n from django.test.utils import captured_stdout\n \n from .models import Proxy, UserProxy\n@@ -11,7 +12,7 @@\n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n \n \n-class ProxyModelWithDifferentAppLabelTests(TestCase):\n+class ProxyModelWithDifferentAppLabelTests(TransactionTestCase):\n     available_apps = [\n         'auth_tests',\n         'django.contrib.auth',\n@@ -41,7 +42,8 @@ def test_proxy_model_permissions_contenttype(self):\n         proxy_model_content_type = ContentType.objects.get_for_model(UserProxy, for_concrete_model=False)\n         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n-        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        with connection.schema_editor() as editor:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n         self.default_permission.refresh_from_db()\n         self.assertEqual(self.default_permission.content_type, proxy_model_content_type)\n         self.custom_permission.refresh_from_db()\n@@ -54,7 +56,8 @@ def test_user_has_now_proxy_model_permissions(self):\n         for permission in [self.default_permission, self.custom_permission]:\n             self.assertTrue(user.has_perm('auth.' + permission.codename))\n             self.assertFalse(user.has_perm('auth_tests.' + permission.codename))\n-        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        with connection.schema_editor() as editor:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n         # Reload user to purge the _perm_cache.\n         user = User._default_manager.get(pk=user.pk)\n         for permission in [self.default_permission, self.custom_permission]:\n@@ -62,8 +65,9 @@ def test_user_has_now_proxy_model_permissions(self):\n             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))\n \n     def test_migrate_backwards(self):\n-        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)\n+        with connection.schema_editor() as editor:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)\n         self.default_permission.refresh_from_db()\n         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)\n         self.custom_permission.refresh_from_db()\n@@ -76,8 +80,9 @@ def test_user_keeps_same_permissions_after_migrating_backward(self):\n         for permission in [self.default_permission, self.custom_permission]:\n             self.assertTrue(user.has_perm('auth.' + permission.codename))\n             self.assertFalse(user.has_perm('auth_tests.' + permission.codename))\n-        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)\n+        with connection.schema_editor() as editor:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)\n         # Reload user to purge the _perm_cache.\n         user = User._default_manager.get(pk=user.pk)\n         for permission in [self.default_permission, self.custom_permission]:\n@@ -85,7 +90,7 @@ def test_user_keeps_same_permissions_after_migrating_backward(self):\n             self.assertFalse(user.has_perm('auth_tests.' + permission.codename))\n \n \n-class ProxyModelWithSameAppLabelTests(TestCase):\n+class ProxyModelWithSameAppLabelTests(TransactionTestCase):\n     available_apps = [\n         'auth_tests',\n         'django.contrib.auth',\n@@ -115,7 +120,8 @@ def test_proxy_model_permissions_contenttype(self):\n         proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n-        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        with connection.schema_editor() as editor:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n         self.default_permission.refresh_from_db()\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.default_permission.content_type, proxy_model_content_type)\n@@ -127,15 +133,17 @@ def test_user_still_has_proxy_model_permissions(self):\n         user.user_permissions.add(self.custom_permission)\n         for permission in [self.default_permission, self.custom_permission]:\n             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))\n-        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        with connection.schema_editor() as editor:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n         # Reload user to purge the _perm_cache.\n         user = User._default_manager.get(pk=user.pk)\n         for permission in [self.default_permission, self.custom_permission]:\n             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))\n \n     def test_migrate_backwards(self):\n-        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)\n+        with connection.schema_editor() as editor:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)\n         self.default_permission.refresh_from_db()\n         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)\n         self.custom_permission.refresh_from_db()\n@@ -147,8 +155,9 @@ def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user.user_permissions.add(self.custom_permission)\n         for permission in [self.default_permission, self.custom_permission]:\n             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))\n-        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)\n+        with connection.schema_editor() as editor:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)\n         # Reload user to purge the _perm_cache.\n         user = User._default_manager.get(pk=user.pk)\n         for permission in [self.default_permission, self.custom_permission]:\n@@ -175,5 +184,36 @@ def test_migrate_with_existing_target_permission(self):\n             name='May display proxys information',\n         )\n         with captured_stdout() as stdout:\n-            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+            with connection.schema_editor() as editor:\n+                update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n         self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+\n+class MultiDBProxyModelAppLabelTests(TransactionTestCase):\n+    databases = {'default', 'other'}\n+    available_apps = [\n+        'auth_tests',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ]\n+\n+    def setUp(self):\n+        ContentType.objects.all().delete()\n+        Permission.objects.using('other').delete()\n+        concrete_content_type = ContentType.objects.db_manager(\n+            'other'\n+        ).get_for_model(Proxy)\n+        self.permission = Permission.objects.using('other').create(\n+            content_type=concrete_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+\n+    def test_migrate_other_database(self):\n+        proxy_model_content_type = ContentType.objects.db_manager(\n+            'other'\n+        ).get_for_model(Proxy, for_concrete_model=False)\n+        with connections['other'].schema_editor() as editor:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)\n+        self.permission.refresh_from_db()\n+        self.assertEqual(self.permission.content_type, proxy_model_content_type)\n",
  "problem_statement": "0011_update_proxy_permissions crashes in multi database environment.\nDescription\n\t \n\t\t(last modified by haudoing)\n\t \nThe tutorial said that we can omit to set the default database if default doesn't makes sense\n​https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#defining-your-databases\nBut the following migration script doesn't work after configuration with empty default database\n​https://github.com/django/django/blob/stable/2.2.x/django/contrib/auth/migrations/0011_update_proxy_permissions.py\non line 42, it use\n\t\t\twith transaction.atomic():\n\t\t\t\tPermission.objects.filter(\n\t\t\t\t\tpermissions_query,\n\t\t\t\t\tcontent_type=old_content_type,\n\t\t\t\t).update(content_type=new_content_type)\nThis will brake the migration if default database doesn't set\nTracebacks\n\traise ImproperlyConfigured(\"settings.DATABASES is improperly configured. \"\ndjango.core.exceptions.ImproperlyConfigured: settings.DATABASES is improperly configured. Please supply the ENGINE value. Check settings documentation for more details.\n",
  "hints_text": "This migration doesn't brake anything for me. I checked with ​an example from docs and it doesn't require a default DB.\nSorry for my poor English. I doesn't express it well. What I mean to say is not migration script brake the multi db setting. I want to say after configure multi database setting without default, the migration script won't work. It throw the following exception while migrate raise ImproperlyConfigured(\"settings.DATABASES is improperly configured. \" django.core.exceptions.ImproperlyConfigured: settings.DATABASES is improperly configured. Please supply the ENGINE value. Check settings documentation for more details.\nI want to say after configure multi database setting without default, the migration script won't work. It throw the following exception while migrate... Just like I said, it works for me with ​an example from docs, that doesn't require a default DB. Please don't reopen this ticket without providing a small, sample project which we can use to reproduce this issue. You can also try to one of support channels.\nHello Felixxm, Thank you for your response. I found the actual reason cause this issue. I do start a clean Django project with the example you provide, it really works fine. But when I create a proxy model then migration stop at that script again. The script of the proxy model I made is as following ```class EditorUser(User): class Meta: proxy = True def get_author_name(self): ''' Returns: a name leading by last_name ''' return '{}{}'.format(self.last_name, self.first_name)```\nI cannot reproduce this issue even with a proxy model :| . Can you attach a sample project?\nThank you Felixxm. I've attach a zip file with a very simple Django project. That should reproduce this issue.\nSorry Felixxm, The example is fine for brand new django 2.2. It only appear when upgrade from 2.1 to 2.2\nI've tried to reproduce this issue with your project by following these steps: pip install Django~=2.1.0 python manage.py migrate --database=auth_db python manage.py migrate --database=others pip install Django~=2.2.0 python manage.py migrate --database=auth_db python manage.py migrate --database=others and ... all works for me.\nPlease add a steps while working on Django 2.1 before migrate. python manage.py makemigrations That should reproduce this exception. Though I'm not sure is it qualified to be a bug now. After all A.B version upgrade doesn't 100% guarantee backward compatible. But if it doesn't, it should be included in the release note, which it doesn't. ​https://docs.djangoproject.com/en/2.2/releases/2.2/#permissions-for-proxy-models Gotta thank you again felixxm!\nMany thanks! I was able to reproduce this issue, fix is quite simple: diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py index c3f617f438..62e0a91737 100644 --- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py +++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py @@ -39,7 +39,7 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False): old_content_type = proxy_content_type if reverse else concrete_content_type new_content_type = concrete_content_type if reverse else proxy_content_type try: - with transaction.atomic(): + with transaction.atomic(using=schema_editor.connection.alias): Permission.objects.filter( permissions_query, content_type=old_content_type,\nRegression in 98296f86b340c8c9c968375d59f1d3a3479e60c2.",
  "created_at": "2019-11-28T10:53:17Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_migrate_other_database (auth_tests.test_migrations.MultiDBProxyModelAppLabelTests)\"]",
  "PASS_TO_PASS": "[\"test_migrate_backwards (auth_tests.test_migrations.ProxyModelWithDifferentAppLabelTests)\", \"test_proxy_model_permissions_contenttype (auth_tests.test_migrations.ProxyModelWithDifferentAppLabelTests)\", \"test_user_has_now_proxy_model_permissions (auth_tests.test_migrations.ProxyModelWithDifferentAppLabelTests)\", \"test_user_keeps_same_permissions_after_migrating_backward (auth_tests.test_migrations.ProxyModelWithDifferentAppLabelTests)\", \"test_migrate_backwards (auth_tests.test_migrations.ProxyModelWithSameAppLabelTests)\", \"test_migrate_with_existing_target_permission (auth_tests.test_migrations.ProxyModelWithSameAppLabelTests)\", \"test_proxy_model_permissions_contenttype (auth_tests.test_migrations.ProxyModelWithSameAppLabelTests)\", \"test_user_keeps_same_permissions_after_migrating_backward (auth_tests.test_migrations.ProxyModelWithSameAppLabelTests)\", \"test_user_still_has_proxy_model_permissions (auth_tests.test_migrations.ProxyModelWithSameAppLabelTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.616117",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}