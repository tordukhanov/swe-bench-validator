{
  "repo": "psf/requests",
  "instance_id": "psf__requests-4356",
  "base_commit": "234f80af88ff2aab39bbd65a3131ae93e1917c25",
  "patch": "diff --git a/requests/adapters.py b/requests/adapters.py\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -13,6 +13,7 @@\n \n from urllib3.poolmanager import PoolManager, proxy_from_url\n from urllib3.response import HTTPResponse\n+from urllib3.util import parse_url\n from urllib3.util import Timeout as TimeoutSauce\n from urllib3.util.retry import Retry\n from urllib3.exceptions import ClosedPoolError\n@@ -34,7 +35,7 @@\n from .structures import CaseInsensitiveDict\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n-                         ProxyError, RetryError, InvalidSchema)\n+                         ProxyError, RetryError, InvalidSchema, InvalidProxyURL)\n from .auth import _basic_auth_str\n \n try:\n@@ -300,6 +301,10 @@ def get_connection(self, url, proxies=None):\n \n         if proxy:\n             proxy = prepend_scheme_if_needed(proxy, 'http')\n+            proxy_url = parse_url(proxy)\n+            if not proxy_url.host:\n+                raise InvalidProxyURL(\"Please check proxy URL. It is malformed\"\n+                                      \" and could be missing the host.\")\n             proxy_manager = self.proxy_manager_for(proxy)\n             conn = proxy_manager.connection_from_url(url)\n         else:\ndiff --git a/requests/exceptions.py b/requests/exceptions.py\n--- a/requests/exceptions.py\n+++ b/requests/exceptions.py\n@@ -85,6 +85,10 @@ class InvalidHeader(RequestException, ValueError):\n     \"\"\"The header value provided was somehow invalid.\"\"\"\n \n \n+class InvalidProxyURL(InvalidURL):\n+    \"\"\"The proxy URL provided is invalid.\"\"\"\n+\n+\n class ChunkedEncodingError(RequestException):\n     \"\"\"The server declared chunked encoding but sent an invalid chunk.\"\"\"\n \n",
  "test_patch": "diff --git a/tests/test_requests.py b/tests/test_requests.py\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -23,7 +23,7 @@\n from requests.exceptions import (\n     ConnectionError, ConnectTimeout, InvalidSchema, InvalidURL,\n     MissingSchema, ReadTimeout, Timeout, RetryError, TooManyRedirects,\n-    ProxyError, InvalidHeader, UnrewindableBodyError, SSLError)\n+    ProxyError, InvalidHeader, UnrewindableBodyError, SSLError, InvalidProxyURL)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -526,6 +526,19 @@ def test_proxy_error(self):\n         with pytest.raises(ProxyError):\n             requests.get('http://localhost:1', proxies={'http': 'non-resolvable-address'})\n \n+    def test_proxy_error_on_bad_url(self, httpbin, httpbin_secure):\n+        with pytest.raises(InvalidProxyURL):\n+            requests.get(httpbin_secure(), proxies={'https': 'http:/badproxyurl:3128'})\n+\n+        with pytest.raises(InvalidProxyURL):\n+            requests.get(httpbin(), proxies={'http': 'http://:8080'})\n+\n+        with pytest.raises(InvalidProxyURL):\n+            requests.get(httpbin_secure(), proxies={'https': 'https://'})\n+\n+        with pytest.raises(InvalidProxyURL):\n+            requests.get(httpbin(), proxies={'http': 'http:///example.com:8080'})\n+\n     def test_basicauth_with_netrc(self, httpbin):\n         auth = ('user', 'pass')\n         wrong_auth = ('wronguser', 'wrongpass')\n",
  "problem_statement": "Misleading exception with invalid protocol in proxy variable\nWhen the value of `https_proxy` or `HTTPS_PROXY` variable(s) accidentally miss one '/' in the protocol, a traceback is thrown to the user which doesn't pin point that the issue is with the proxy configuration.\r\n\r\n## Expected Result\r\n\r\nA better exception\r\n\r\n## Actual Result\r\n\r\nAn exception which doesn't pin point exactly what went wrong.\r\n\r\n## Reproduction Steps\r\n```\r\n(req2) nwani@dockerub01:~/requests$ export https_proxy=http:/my.proxy.com:3128\r\n(req2) nwani@dockerub01:~/requests$ python -c \"import requests; requests.get('https://google.com')\"\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/home/nehaljwani/requests/requests/api.py\", line 72, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/home/nehaljwani/requests/requests/api.py\", line 58, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/nehaljwani/requests/requests/sessions.py\", line 508, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/nehaljwani/requests/requests/sessions.py\", line 618, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/nehaljwani/requests/requests/adapters.py\", line 440, in send\r\n    timeout=timeout\r\n  File \"/home/nehaljwani/m3/envs/req2/lib/python3.6/site-packages/urllib3-1.22-py3.6.egg/urllib3/connectionpool.py\", line 595, in urlopen\r\n    self._prepare_proxy(conn)\r\n  File \"/home/nehaljwani/m3/envs/req2/lib/python3.6/site-packages/urllib3-1.22-py3.6.egg/urllib3/connectionpool.py\", line 816, in _prepare_proxy\r\n    conn.connect()\r\n  File \"/home/nehaljwani/m3/envs/req2/lib/python3.6/site-packages/urllib3-1.22-py3.6.egg/urllib3/connection.py\", line 284, in connect\r\n    conn = self._new_conn()\r\n  File \"/home/nehaljwani/m3/envs/req2/lib/python3.6/site-packages/urllib3-1.22-py3.6.egg/urllib3/connection.py\", line 141, in _new_conn\r\n    (self.host, self.port), self.timeout, **extra_kw)\r\n  File \"/home/nehaljwani/m3/envs/req2/lib/python3.6/site-packages/urllib3-1.22-py3.6.egg/urllib3/util/connection.py\", line 51, in create_connection\r\n    if host.startswith('['):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\n## System Information\r\n\r\n```\r\n(req2) nwani@dockerub01:~/requests$ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.6\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.4.0-93-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.18.4\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"100020cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.22\"\r\n  },\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\nI am not sure what is the correct place to fix this. Should the fix/check be in requests, urllib3, or urlparse?\n",
  "hints_text": "On dumping the connection object right before calling `conn.urlopen()`, the output for `print(vars(conn))` reveals:\r\n```\r\n'proxy': Url(scheme='http', auth=None, host=None, port=80, path='/my.proxy.com:3128', query=None, fragment=None), \r\n```\r\nAnd this makes urllib3 think that the proxy to be reached is: `http://:80/my.proxy.com:3128`\nrequests calls `prepend_scheme_if_needed()` in the function `get_connection()` and in this case changes the url to http:///my.proxy.com:3128\r\n```\r\n>>> from requests.utils import prepend_scheme_if_needed \r\n>>> prepend_scheme_if_needed(\"https:/myproxy.com:3128\", \"http\")\r\n'https:///myproxy.com:3128'\r\n```\r\n... which when passed to parse_url() from `urllib3.util`:\r\n```\r\n>>> from urllib3.util import parse_url\r\n>>> parse_url(\"https:///myproxy.com:3128\")\r\nUrl(scheme='https', auth=None, host=None, port=None, path='/myproxy.com:3128', query=None, fragment=None)\r\n```\r\n... makes the host and port vanish.\nYeah, we could maybe have a specific check for a not `None` `host` value, but there's nothing actually wrong in what we're doing. Further, urllib3 is parsing the URI you're providing it, correctly. The authority portion of a URI begins with `//` and contains the userinfo, host, and port. Paths begin with `/` and come after an `authority` or after the scheme which is terminated by `:`. So your typo is actually a valid URI. It just doesn't have an authority section.\r\n\r\nSo, like I said, we could provide a more understandable exception but in reality, this is RFC 3986 working against you (as well as the fact that we implement it correctly).\nSure, but semantically speaking, an empty `authority` section doesn't make sense for a proxy URI right?\n@nehaljwani exactly. This is why I suggest checking for that and raising a more helpful/understandable exception.\n> This is why I suggest checking for that and raising a more helpful/understandable exception.\r\n\r\nThat would be great.  Otherwise, at the level of a using requests as a library for another application, I think we're forced into [something like](https://github.com/conda/conda/pull/6205/files)\r\n\r\n```python\r\nexcept AttributeError as e:\r\n    if text_type(e) == \"'NoneType' object has no attribute 'startswith'\":\r\n        raise ProxyError()\r\n    else:\r\n        raise\r\n```",
  "created_at": "2017-10-26T14:41:40Z",
  "version": "2.18",
  "FAIL_TO_PASS": "[\"tests/test_requests.py::TestRequests::test_entry_points\", \"tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]\", \"tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]\", \"tests/test_requests.py::TestRequests::test_basic_building\", \"tests/test_requests.py::TestRequests::test_path_is_not_double_encoded\", \"tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]\", \"tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]\", \"tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default\", \"tests/test_requests.py::TestRequests::test_params_bytes_are_encoded\", \"tests/test_requests.py::TestRequests::test_binary_put\", \"tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url\", \"tests/test_requests.py::TestRequests::test_basicauth_encodes_byte_strings\", \"tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]\", \"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\", \"tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]\", \"tests/test_requests.py::TestRequests::test_proxy_error\", \"tests/test_requests.py::TestRequests::test_non_prepared_request_error\", \"tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url\", \"tests/test_requests.py::TestRequests::test_links\", \"tests/test_requests.py::TestRequests::test_cookie_parameters\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_keys\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_values\", \"tests/test_requests.py::TestRequests::test_cookie_as_dict_items\", \"tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains\", \"tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error\", \"tests/test_requests.py::TestRequests::test_empty_response_has_content_none\", \"tests/test_requests.py::TestRequests::test_response_is_iterable\", \"tests/test_requests.py::TestRequests::test_response_decode_unicode\", \"tests/test_requests.py::TestRequests::test_response_reason_unicode\", \"tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback\", \"tests/test_requests.py::TestRequests::test_response_chunk_size_type\", \"tests/test_requests.py::TestRequests::test_http_error\", \"tests/test_requests.py::TestRequests::test_transport_adapter_ordering\", \"tests/test_requests.py::TestRequests::test_long_authinfo_in_url\", \"tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs\", \"tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream\", \"tests/test_requests.py::TestRequests::test_rewind_body\", \"tests/test_requests.py::TestRequests::test_rewind_partially_read_body\", \"tests/test_requests.py::TestRequests::test_rewind_body_no_seek\", \"tests/test_requests.py::TestRequests::test_rewind_body_failed_seek\", \"tests/test_requests.py::TestRequests::test_rewind_body_failed_tell\", \"tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic\", \"tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\\\xd0\\\\xb8\\\\xd0\\\\xbc\\\\xd1\\\\x8f-\\\\xd0\\\\xbf\\\\xd0\\\\xb0\\\\xd1\\\\x80\\\\xd0\\\\xbe\\\\xd0\\\\xbb\\\\xd1\\\\x8c-Basic\", \"tests/test_requests.py::TestRequests::test_response_without_release_conn\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_len\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_contains\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_get\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_update\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_iter\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_equality\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"tests/test_requests.py::TestCaseInsensitiveDict::test_copy\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]\", \"tests/test_requests.py::TestMorselToCookieExpires::test_expires_none\", \"tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int\", \"tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str\", \"tests/test_requests.py::TestTimeout::test_connect_timeout[timeout0]\", \"tests/test_requests.py::TestTimeout::test_connect_timeout[timeout1]\", \"tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout0]\", \"tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout1]\", \"tests/test_requests.py::test_json_encodes_as_bytes\", \"tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]\", \"tests/test_requests.py::test_data_argument_accepts_tuples[data0]\", \"tests/test_requests.py::test_data_argument_accepts_tuples[data1]\", \"tests/test_requests.py::test_data_argument_accepts_tuples[data2]\", \"tests/test_requests.py::test_prepared_copy[None]\", \"tests/test_requests.py::test_prepared_copy[kwargs1]\", \"tests/test_requests.py::test_prepared_copy[kwargs2]\", \"tests/test_requests.py::test_prepared_copy[kwargs3]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\\\u30b8\\\\u30a7\\\\u30fc\\\\u30d4\\\\u30fc\\\\u30cb\\\\u30c3\\\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\\\xe3\\\\x82\\\\xb8\\\\xe3\\\\x82\\\\xa7\\\\xe3\\\\x83\\\\xbc\\\\xe3\\\\x83\\\\x94\\\\xe3\\\\x83\\\\xbc\\\\xe3\\\\x83\\\\x8b\\\\xe3\\\\x83\\\\x83\\\\xe3\\\\x82\\\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\\\xdfe.de/stra\\\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\\\xc3\\\\x9fe.de/stra\\\\xc3\\\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\\\xf6nigsg\\\\xe4\\\\xdfchen.de/stra\\\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\\\xc3\\\\xb6nigsg\\\\xc3\\\\xa4\\\\xc3\\\\x9fchen.de/stra\\\\xc3\\\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]\", \"tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\\\u2603.net/]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~0]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~1]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]\", \"tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]\", \"tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "020f96577f8f44d06acc1ab699a7638653d91bd0",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.864547",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}