{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-23057",
  "base_commit": "8bfd2c43344215008a2f5597ecc0ee467fb039d3",
  "patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -206,12 +206,6 @@ def _get_backend_mod():\n         # will (re)import pyplot and then call switch_backend if we need to\n         # resolve the auto sentinel)\n         switch_backend(dict.__getitem__(rcParams, \"backend\"))\n-        # Just to be safe.  Interactive mode can be turned on without calling\n-        # `plt.ion()` so register it again here.  This is safe because multiple\n-        # calls to `install_repl_displayhook` are no-ops and the registered\n-        # function respects `mpl.is_interactive()` to determine if it should\n-        # trigger a draw.\n-        install_repl_displayhook()\n     return _backend_mod\n \n \n@@ -302,6 +296,10 @@ class backend_mod(matplotlib.backend_bases._Backend):\n     # See https://github.com/matplotlib/matplotlib/issues/6092\n     matplotlib.backends.backend = newbackend\n \n+    # make sure the repl display hook is installed in case we become\n+    # interactive\n+    install_repl_displayhook()\n+\n \n def _warn_if_gui_out_of_main_thread():\n     if (_get_required_interactive_framework(_get_backend_mod())\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_pyplot.py b/lib/matplotlib/tests/test_pyplot.py\n--- a/lib/matplotlib/tests/test_pyplot.py\n+++ b/lib/matplotlib/tests/test_pyplot.py\n@@ -1,5 +1,6 @@\n import difflib\n import numpy as np\n+import os\n import subprocess\n import sys\n from pathlib import Path\n@@ -367,3 +368,26 @@ def test_set_current_axes_on_subfigure():\n     assert plt.gca() != ax\n     plt.sca(ax)\n     assert plt.gca() == ax\n+\n+\n+def test_pylab_integration():\n+    pytest.importorskip(\"IPython\")\n+    subprocess.run(\n+        [\n+            sys.executable,\n+            \"-m\",\n+            \"IPython\",\n+            \"--pylab\",\n+            \"-c\",\n+            \";\".join((\n+                \"import matplotlib.pyplot as plt\",\n+                \"assert plt._REPL_DISPLAYHOOK == plt._ReplDisplayHook.IPYTHON\",\n+            )),\n+        ],\n+        env={**os.environ, \"SOURCE_DATE_EPOCH\": \"0\"},\n+        timeout=60,\n+        check=True,\n+        stdout=subprocess.PIPE,\n+        stderr=subprocess.PIPE,\n+        universal_newlines=True,\n+    )\n",
  "problem_statement": "[Bug]: Figures fail to redraw with IPython\n### Bug summary\n\nA regression between release versions 3.5.1 and 3.5.2 causes figures to fail to redraw after an initial plot is added using the `pyplot` interface in an interactive IPython session. This has been observed with both `pyplot.plot` and `pyplot.tripcolor`. The figure will show the first plot drawn, but subsequent calls to `pyplot.plot` and `pyplot.tripcolor` fail to update an on-screen figure until `pyplot.draw` is invoked. This has been observed with IPython versions 8.3.0 (current) and 8.2.0.\r\n\r\nBoth the Qt5 and Tk backends exhibit the same issues.\n\n### Code for reproduction\n\n```python\n# Install matplotlib and ipython in a virtualenv\r\npython3 -m venv ~/mpl.venv\r\n. ~/mpl.venv/bin/activate\r\npip install matplotlib ipython\r\n\r\n# Make sure to start with a clean config\r\nmv ~/.ipython ~/.ipython.backup\r\nmv ~/.config/matplotlib .config/matplotlib.backup\r\n\r\n# Run `pylab`\r\nipython --pylab=tk\r\n\r\n# ... the following are commands issues in the ipython prompt\r\nplot(arange(10))\r\nplot(-arange(10))\r\ndraw()\n```\n\n\n### Actual outcome\n\n1. After the first `plot` command, a figure appears with a `y = x` line shown.\r\n2. After the second `plot` command, the figure does not update.\r\n3. After the `draw` command, the figure updates to show both the `y = x` and `y = -x` lines.\n\n### Expected outcome\n\n1. After the first `plot` command, a figure appears with a `y = x` line shown. (This is as expected.)\r\n2. After the second `plot` command, the figure updates with the addition of a `y = -x` line. (This is the deviation.)\r\n3. The `draw` command should produce no visible change in the figure.\n\n### Additional information\n\nThis regression has been bisected to commit f937b0ab5ef9d5ffe9f2f58f6391357783cc4afa.\r\n\r\nThe testbed is a current Void Linux system running Python 3.10.4, including the system `python3-tkinter` package for a GUI. (As noted above, this bug is also present with the Qt5 backend.) All packages were installed in a virtual environment. The output of `pip freeze` is:\r\n\r\n```\r\nasttokens==2.0.5\r\nbackcall==0.2.0\r\ncycler==0.11.0\r\ndecorator==5.1.1\r\nexecuting==0.8.3\r\nfonttools==4.33.3\r\nipython==8.3.0\r\njedi==0.18.1\r\nkiwisolver==1.4.2\r\nmatplotlib==3.6.0.dev155+gf937b0ab5e\r\nmatplotlib-inline==0.1.3\r\nnumpy==1.22.3\r\npackaging==21.3\r\nparso==0.8.3\r\npexpect==4.8.0\r\npickleshare==0.7.5\r\nPillow==9.1.0\r\nprompt-toolkit==3.0.29\r\nptyprocess==0.7.0\r\npure-eval==0.2.2\r\nPygments==2.12.0\r\npyparsing==3.0.9\r\npython-dateutil==2.8.2\r\nsetuptools-scm==6.4.2\r\nsix==1.16.0\r\nstack-data==0.2.0\r\ntk==0.1.0\r\ntomli==2.0.1\r\ntraitlets==5.2.0\r\nwcwidth==0.2.5\r\n```\r\n(Note that the funny `matplotlib` version comes from a local git repo checked out to the problematic commit.)\n\n### Operating system\n\nVoid Linux x86_64\n\n### Matplotlib Version\n\n3.5.2\n\n### Matplotlib Backend\n\nTkAgg, Qt5Agg\n\n### Python version\n\n3.10.4\n\n### Jupyter version\n\nNone\n\n### Installation\n\npip\n",
  "hints_text": "On the bright side, there is a very easy fix, an explicit call to `ion` (aka `plt.ion` aka `matplotlib.pyplot.ion()`) will fix the behavior.\r\n\r\nI suspect that this is more fallout from deferring actually loading the backend until it is actually needed. \n@ahesford Thank you for reporting this and sorry we broke this.\r\n\r\nPlease forgive my last message if it came across as too terse.\nNo worries. I'm glad there's a simple workaround. In the meantime, I reverted the version shipped in Void pending a release with a permanent fix.\nI'm not really sure how the backend solution works with the `--pylab=tk` switch, but it seems like a solution would be to do `ion` as part of that as the backend is actually selected then.\nI can confirm that `ion` resolves the issue. Should IPython assume responsibility for activating interactive mode when importing matplotlib, or should matplotlib attempt to figure out whether to enable interactive mode by default by some suitable means?\nThis is something that has historically been done by IPython (it is a side effect of `--pylab` (who's use is discouraged but we are never going to deprecate it)).  However, with #22005 we delayed resolving and configuring the backend until it is _actually_ needed (which is the first time you create a Figure, could actually be pushed back to \"first time you show a figure\", but that is off in  https://github.com/matplotlib/mpl-gui land).\r\n\r\nThere is something going wrong in the (brittle) dance between IPython and Matplotlib.  Given that it is as change on the mpl side that broke this I assume it it our fault and can (and should) fix it, but we still need to sort out _why_ which will likely require chasing through the code on both sides.  It is complicated because both side have extensive \"work with old versions of the other\" code.\r\n\r\nRelated, I observed in some cases at NSLS-II that if we had `pylab = auto` in the IPython config files we saw a similar issue (it was a bit worse, the input hook did not get installed ðŸ˜± ) and this was with earlier version of the 3.5 series. \nI am also experiencing this, and `plt.ion()` fixed it for me. Thanks for the suggestion @tacaswell!\r\n\r\nIt would be nice if this line was not necessary as I will have to update all of my notebooks!",
  "created_at": "2022-05-17T21:13:07Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_pyplot.py::test_pylab_integration\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_pyplot.py::test_pyplot_up_to_date\", \"lib/matplotlib/tests/test_pyplot.py::test_copy_docstring_and_deprecators\", \"lib/matplotlib/tests/test_pyplot.py::test_pyplot_box\", \"lib/matplotlib/tests/test_pyplot.py::test_stackplot_smoke\", \"lib/matplotlib/tests/test_pyplot.py::test_nrows_error\", \"lib/matplotlib/tests/test_pyplot.py::test_ioff\", \"lib/matplotlib/tests/test_pyplot.py::test_ion\", \"lib/matplotlib/tests/test_pyplot.py::test_nested_ion_ioff\", \"lib/matplotlib/tests/test_pyplot.py::test_close\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_reuse\", \"lib/matplotlib/tests/test_pyplot.py::test_axes_kwargs\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_replace_projection\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_kwarg_collision\", \"lib/matplotlib/tests/test_pyplot.py::test_gca_kwargs\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_projection_reuse\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_polar_normalization\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_change_projection\", \"lib/matplotlib/tests/test_pyplot.py::test_polar_second_call\", \"lib/matplotlib/tests/test_pyplot.py::test_fallback_position\", \"lib/matplotlib/tests/test_pyplot.py::test_set_current_figure_via_subfigure\", \"lib/matplotlib/tests/test_pyplot.py::test_set_current_axes_on_subfigure\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.799022",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}