{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-24638",
  "base_commit": "c4d6b3eb1c7b39832116f7b02baf524a1ffadfba",
  "patch": "diff --git a/sympy/tensor/array/expressions/arrayexpr_derivatives.py b/sympy/tensor/array/expressions/arrayexpr_derivatives.py\n--- a/sympy/tensor/array/expressions/arrayexpr_derivatives.py\n+++ b/sympy/tensor/array/expressions/arrayexpr_derivatives.py\n@@ -6,7 +6,7 @@\n from sympy.matrices.expressions.hadamard import HadamardProduct\n from sympy.matrices.expressions.inverse import Inverse\n from sympy.matrices.expressions.matexpr import (MatrixExpr, MatrixSymbol)\n-from sympy.matrices.expressions.special import Identity\n+from sympy.matrices.expressions.special import Identity, OneMatrix\n from sympy.matrices.expressions.transpose import Transpose\n from sympy.combinatorics.permutations import _af_invert\n from sympy.matrices.expressions.applyfunc import ElementwiseApplyFunction\n@@ -84,6 +84,11 @@ def _(expr: Identity, x: _ArrayExpr):\n     return ZeroArray(*(x.shape + expr.shape))\n \n \n+@array_derive.register(OneMatrix)\n+def _(expr: OneMatrix, x: _ArrayExpr):\n+    return ZeroArray(*(x.shape + expr.shape))\n+\n+\n @array_derive.register(Transpose)\n def _(expr: Transpose, x: Expr):\n     # D(A.T, A) ==> (m,n,i,j) ==> D(A_ji, A_mn) = d_mj d_ni\n",
  "test_patch": "diff --git a/sympy/matrices/expressions/tests/test_derivatives.py b/sympy/matrices/expressions/tests/test_derivatives.py\n--- a/sympy/matrices/expressions/tests/test_derivatives.py\n+++ b/sympy/matrices/expressions/tests/test_derivatives.py\n@@ -85,6 +85,10 @@ def test_matrix_derivative_by_scalar():\n     assert expr.diff(x) == 2*mu*Identity(k)\n \n \n+def test_one_matrix():\n+    assert MatMul(x.T, OneMatrix(k, 1)).diff(x) == OneMatrix(k, 1)\n+\n+\n def test_matrix_derivative_non_matrix_result():\n     # This is a 4-dimensional array:\n     I = Identity(k)\n",
  "problem_statement": "MatMul(x.T, OneMatrix(k, 1)).diff(x) causes RecursionError\nThe following code creates a RecursionError due to a missing array_derive registration for OneMatrix:\r\n\r\n```python\r\nfrom sympy import MatrixSymbol, OneMatrix, MatMul, symbols\r\nk = symbols(\"k\")\r\nx = MatrixSymbol(\"x\", k, 1)\r\nMatMul(x.T, OneMatrix(k, 1)).diff(x)\r\n```\n",
  "hints_text": "",
  "created_at": "2023-01-31T18:25:33Z",
  "version": "1.12",
  "FAIL_TO_PASS": "[\"test_one_matrix\"]",
  "PASS_TO_PASS": "[\"test_matrix_derivative_by_scalar\", \"test_matrix_derivative_non_matrix_result\", \"test_matrix_derivative_trivial_cases\", \"test_matrix_derivative_with_inverse\", \"test_matrix_derivative_vectors_and_scalars\", \"test_matrix_derivatives_of_traces\", \"test_derivatives_of_complicated_matrix_expr\", \"test_mixed_deriv_mixed_expressions\", \"test_derivatives_matrix_norms\", \"test_derivatives_elementwise_applyfunc\"]",
  "environment_setup_commit": "c6cb7c5602fa48034ab1bd43c2347a7e8488f12e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.157403",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}