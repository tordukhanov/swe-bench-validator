{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9180",
  "base_commit": "f47bf1471d10d4ac938066bc84df879f1060ba7f",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -709,6 +709,8 @@ def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             # if isattr is True, the member is documented as an attribute\n             if member is INSTANCEATTR:\n                 isattr = True\n+            elif (namespace, membername) in attr_docs:\n+                isattr = True\n             else:\n                 isattr = False\n \n@@ -769,7 +771,6 @@ def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n                 else:\n                     # keep documented attributes\n                     keep = True\n-                isattr = True\n             elif want_all and isprivate:\n                 if has_doc or self.options.undoc_members:\n                     if self.options.private_members is None:\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/module.py b/tests/roots/test-ext-autodoc/target/module.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/module.py\n@@ -0,0 +1,14 @@\n+undocumented = 1\n+\n+#: docstring\n+documented = 1\n+\n+undoc_annotated: int\n+\n+#: docstring\n+annotated: int\n+\n+__special__ = 1\n+\n+#: docstring\n+__documented_special__ = 1\ndiff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -29,6 +29,95 @@ def test_empty_all(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule(app):\n+    options = {'members': None}\n+    actual = do_autodoc(app, 'module', 'target.module', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.module',\n+        '',\n+        '',\n+        '.. py:data:: annotated',\n+        '   :module: target.module',\n+        '   :type: int',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:data:: documented',\n+        '   :module: target.module',\n+        '   :value: 1',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_undoc_members(app):\n+    options = {'members': None,\n+               'undoc-members': None}\n+    actual = do_autodoc(app, 'module', 'target.module', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.module',\n+        '',\n+        '',\n+        '.. py:data:: annotated',\n+        '   :module: target.module',\n+        '   :type: int',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:data:: documented',\n+        '   :module: target.module',\n+        '   :value: 1',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:data:: undoc_annotated',\n+        '   :module: target.module',\n+        '   :type: int',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_special_members(app):\n+    options = {'members': None,\n+               'special-members': None}\n+    actual = do_autodoc(app, 'module', 'target.module', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.module',\n+        '',\n+        '',\n+        '.. py:data:: __documented_special__',\n+        '   :module: target.module',\n+        '   :value: 1',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:data:: annotated',\n+        '   :module: target.module',\n+        '   :type: int',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:data:: documented',\n+        '   :module: target.module',\n+        '   :value: 1',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n",
  "problem_statement": "Special member is not documented with automodule\n**Describe the bug**\r\nIf I have a module which has a special attribute (starting with a double underscore) it will not be documented by automodule even if it's specified in :special-members:. According to my research it's because it's not identified as an attribute.\r\n\r\nIf a non-special attribute is used, everything works fine.\r\n\r\n**To Reproduce**\r\n\r\n*module.py*\r\n```python\r\n#: mydoc\r\n__dummy__ = 2\r\n#: mydoc\r\ndummy = 2\r\n```\r\n\r\n*doc.rst*\r\n```rst\r\n.. automodule:: my_project\r\n   :members:\r\n   :undoc-members:\r\n   :show-inheritance:\r\n   :private-members:\r\n   :special-members: __dummy__\r\n```\r\n\r\nTo execute the build I use `python setup.py build_sphinx`\r\n\r\n**Expected behavior**\r\nThe attribute should be documented.\r\n\r\n**Environment info**\r\n- OS: Linux\r\n- Python version: 3.7.1\r\n- Sphinx version: 3.5.4\n",
  "hints_text": "",
  "created_at": "2021-05-08T08:36:06Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_automodule.py::test_automodule_special_members\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_automodule.py::test_empty_all\", \"tests/test_ext_autodoc_automodule.py::test_automodule\", \"tests/test_ext_autodoc_automodule.py::test_automodule_undoc_members\", \"tests/test_ext_autodoc_automodule.py::test_subclass_of_mocked_object\"]",
  "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.063173",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}