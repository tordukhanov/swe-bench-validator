{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-19743",
  "base_commit": "5793ebb2201bf778f08ac1d4cd0b8dd674c96053",
  "patch": "diff --git a/examples/text_labels_and_annotations/figlegend_demo.py b/examples/text_labels_and_annotations/figlegend_demo.py\n--- a/examples/text_labels_and_annotations/figlegend_demo.py\n+++ b/examples/text_labels_and_annotations/figlegend_demo.py\n@@ -28,3 +28,26 @@\n \n plt.tight_layout()\n plt.show()\n+\n+##############################################################################\n+# Sometimes we do not want the legend to overlap the axes.  If you use\n+# constrained_layout you can specify \"outside right upper\", and\n+# constrained_layout will make room for the legend.\n+\n+fig, axs = plt.subplots(1, 2, layout='constrained')\n+\n+x = np.arange(0.0, 2.0, 0.02)\n+y1 = np.sin(2 * np.pi * x)\n+y2 = np.exp(-x)\n+l1, = axs[0].plot(x, y1)\n+l2, = axs[0].plot(x, y2, marker='o')\n+\n+y3 = np.sin(4 * np.pi * x)\n+y4 = np.exp(-2 * x)\n+l3, = axs[1].plot(x, y3, color='tab:green')\n+l4, = axs[1].plot(x, y4, color='tab:red', marker='^')\n+\n+fig.legend((l1, l2), ('Line 1', 'Line 2'), loc='upper left')\n+fig.legend((l3, l4), ('Line 3', 'Line 4'), loc='outside right upper')\n+\n+plt.show()\ndiff --git a/lib/matplotlib/_constrained_layout.py b/lib/matplotlib/_constrained_layout.py\n--- a/lib/matplotlib/_constrained_layout.py\n+++ b/lib/matplotlib/_constrained_layout.py\n@@ -418,6 +418,25 @@ def make_layout_margins(layoutgrids, fig, renderer, *, w_pad=0, h_pad=0,\n         # pass the new margins down to the layout grid for the solution...\n         layoutgrids[gs].edit_outer_margin_mins(margin, ss)\n \n+    # make margins for figure-level legends:\n+    for leg in fig.legends:\n+        inv_trans_fig = None\n+        if leg._outside_loc and leg._bbox_to_anchor is None:\n+            if inv_trans_fig is None:\n+                inv_trans_fig = fig.transFigure.inverted().transform_bbox\n+            bbox = inv_trans_fig(leg.get_tightbbox(renderer))\n+            w = bbox.width + 2 * w_pad\n+            h = bbox.height + 2 * h_pad\n+            legendloc = leg._outside_loc\n+            if legendloc == 'lower':\n+                layoutgrids[fig].edit_margin_min('bottom', h)\n+            elif legendloc == 'upper':\n+                layoutgrids[fig].edit_margin_min('top', h)\n+            if legendloc == 'right':\n+                layoutgrids[fig].edit_margin_min('right', w)\n+            elif legendloc == 'left':\n+                layoutgrids[fig].edit_margin_min('left', w)\n+\n \n def make_margin_suptitles(layoutgrids, fig, renderer, *, w_pad=0, h_pad=0):\n     # Figure out how large the suptitle is and make the\ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -294,7 +294,7 @@ def legend(self, *args, **kwargs):\n \n         Other Parameters\n         ----------------\n-        %(_legend_kw_doc)s\n+        %(_legend_kw_axes)s\n \n         See Also\n         --------\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1085,7 +1085,8 @@ def legend(self, *args, **kwargs):\n \n         Other Parameters\n         ----------------\n-        %(_legend_kw_doc)s\n+        %(_legend_kw_figure)s\n+\n \n         See Also\n         --------\ndiff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -94,51 +94,7 @@ def _update_bbox_to_anchor(self, loc_in_canvas):\n         self.legend.set_bbox_to_anchor(loc_in_bbox)\n \n \n-_docstring.interpd.update(_legend_kw_doc=\"\"\"\n-loc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, \\\n-'upper right' for figures)\n-    The location of the legend.\n-\n-    The strings\n-    ``'upper left', 'upper right', 'lower left', 'lower right'``\n-    place the legend at the corresponding corner of the axes/figure.\n-\n-    The strings\n-    ``'upper center', 'lower center', 'center left', 'center right'``\n-    place the legend at the center of the corresponding edge of the\n-    axes/figure.\n-\n-    The string ``'center'`` places the legend at the center of the axes/figure.\n-\n-    The string ``'best'`` places the legend at the location, among the nine\n-    locations defined so far, with the minimum overlap with other drawn\n-    artists.  This option can be quite slow for plots with large amounts of\n-    data; your plotting speed may benefit from providing a specific location.\n-\n-    The location can also be a 2-tuple giving the coordinates of the lower-left\n-    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n-    will be ignored).\n-\n-    For back-compatibility, ``'center right'`` (but no other location) can also\n-    be spelled ``'right'``, and each \"string\" locations can also be given as a\n-    numeric value:\n-\n-        ===============   =============\n-        Location String   Location Code\n-        ===============   =============\n-        'best'            0\n-        'upper right'     1\n-        'upper left'      2\n-        'lower left'      3\n-        'lower right'     4\n-        'right'           5\n-        'center left'     6\n-        'center right'    7\n-        'lower center'    8\n-        'upper center'    9\n-        'center'          10\n-        ===============   =============\n-\n+_legend_kw_doc_base = \"\"\"\n bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n     Box that is used to position the legend in conjunction with *loc*.\n     Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n@@ -295,7 +251,79 @@ def _update_bbox_to_anchor(self, loc_in_canvas):\n \n draggable : bool, default: False\n     Whether the legend can be dragged with the mouse.\n-\"\"\")\n+\"\"\"\n+\n+_loc_doc_base = \"\"\"\n+loc : str or pair of floats, {0}\n+    The location of the legend.\n+\n+    The strings\n+    ``'upper left', 'upper right', 'lower left', 'lower right'``\n+    place the legend at the corresponding corner of the axes/figure.\n+\n+    The strings\n+    ``'upper center', 'lower center', 'center left', 'center right'``\n+    place the legend at the center of the corresponding edge of the\n+    axes/figure.\n+\n+    The string ``'center'`` places the legend at the center of the axes/figure.\n+\n+    The string ``'best'`` places the legend at the location, among the nine\n+    locations defined so far, with the minimum overlap with other drawn\n+    artists.  This option can be quite slow for plots with large amounts of\n+    data; your plotting speed may benefit from providing a specific location.\n+\n+    The location can also be a 2-tuple giving the coordinates of the lower-left\n+    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n+    will be ignored).\n+\n+    For back-compatibility, ``'center right'`` (but no other location) can also\n+    be spelled ``'right'``, and each \"string\" locations can also be given as a\n+    numeric value:\n+\n+        ===============   =============\n+        Location String   Location Code\n+        ===============   =============\n+        'best'            0\n+        'upper right'     1\n+        'upper left'      2\n+        'lower left'      3\n+        'lower right'     4\n+        'right'           5\n+        'center left'     6\n+        'center right'    7\n+        'lower center'    8\n+        'upper center'    9\n+        'center'          10\n+        ===============   =============\n+    {1}\"\"\"\n+\n+_legend_kw_axes_st = (_loc_doc_base.format(\"default: :rc:`legend.loc`\", '') +\n+                      _legend_kw_doc_base)\n+_docstring.interpd.update(_legend_kw_axes=_legend_kw_axes_st)\n+\n+_outside_doc = \"\"\"\n+    If a figure is using the constrained layout manager, the string codes\n+    of the *loc* keyword argument can get better layout behaviour using the\n+    prefix 'outside'. There is ambiguity at the corners, so 'outside\n+    upper right' will make space for the legend above the rest of the\n+    axes in the layout, and 'outside right upper' will make space on the\n+    right side of the layout.  In addition to the values of *loc*\n+    listed above, we have 'outside right upper', 'outside right lower',\n+    'outside left upper', and 'outside left lower'.  See\n+    :doc:`/tutorials/intermediate/legend_guide` for more details.\n+\"\"\"\n+\n+_legend_kw_figure_st = (_loc_doc_base.format(\"default: 'upper right'\",\n+                                             _outside_doc) +\n+                        _legend_kw_doc_base)\n+_docstring.interpd.update(_legend_kw_figure=_legend_kw_figure_st)\n+\n+_legend_kw_both_st = (\n+    _loc_doc_base.format(\"default: 'best' for axes, 'upper right' for figures\",\n+                         _outside_doc) +\n+    _legend_kw_doc_base)\n+_docstring.interpd.update(_legend_kw_doc=_legend_kw_both_st)\n \n \n class Legend(Artist):\n@@ -482,13 +510,37 @@ def val_or_rc(val, rc_name):\n             )\n         self.parent = parent\n \n+        loc0 = loc\n         self._loc_used_default = loc is None\n         if loc is None:\n             loc = mpl.rcParams[\"legend.loc\"]\n             if not self.isaxes and loc in [0, 'best']:\n                 loc = 'upper right'\n+\n+        # handle outside legends:\n+        self._outside_loc = None\n         if isinstance(loc, str):\n+            if loc.split()[0] == 'outside':\n+                # strip outside:\n+                loc = loc.split('outside ')[1]\n+                # strip \"center\" at the beginning\n+                self._outside_loc = loc.replace('center ', '')\n+                # strip first\n+                self._outside_loc = self._outside_loc.split()[0]\n+                locs = loc.split()\n+                if len(locs) > 1 and locs[0] in ('right', 'left'):\n+                    # locs doesn't accept \"left upper\", etc, so swap\n+                    if locs[0] != 'center':\n+                        locs = locs[::-1]\n+                    loc = locs[0] + ' ' + locs[1]\n+            # check that loc is in acceptable strings\n             loc = _api.check_getitem(self.codes, loc=loc)\n+\n+        if self.isaxes and self._outside_loc:\n+            raise ValueError(\n+                f\"'outside' option for loc='{loc0}' keyword argument only \"\n+                \"works for figure legends\")\n+\n         if not self.isaxes and loc == 0:\n             raise ValueError(\n                 \"Automatic legend placement (loc='best') not implemented for \"\ndiff --git a/tutorials/intermediate/legend_guide.py b/tutorials/intermediate/legend_guide.py\n--- a/tutorials/intermediate/legend_guide.py\n+++ b/tutorials/intermediate/legend_guide.py\n@@ -135,7 +135,54 @@\n ax_dict['bottom'].legend(bbox_to_anchor=(1.05, 1),\n                          loc='upper left', borderaxespad=0.)\n \n-plt.show()\n+##############################################################################\n+# Figure legends\n+# --------------\n+#\n+# Sometimes it makes more sense to place a legend relative to the (sub)figure\n+# rather than individual Axes.  By using ``constrained_layout`` and\n+# specifying \"outside\" at the beginning of the *loc* keyword argument,\n+# the legend is drawn outside the Axes on the (sub)figure.\n+\n+fig, axs = plt.subplot_mosaic([['left', 'right']], layout='constrained')\n+\n+axs['left'].plot([1, 2, 3], label=\"test1\")\n+axs['left'].plot([3, 2, 1], label=\"test2\")\n+\n+axs['right'].plot([1, 2, 3], 'C2', label=\"test3\")\n+axs['right'].plot([3, 2, 1], 'C3', label=\"test4\")\n+# Place a legend to the right of this smaller subplot.\n+fig.legend(loc='outside upper right')\n+\n+##############################################################################\n+# This accepts a slightly different grammar than the normal *loc* keyword,\n+# where \"outside right upper\" is different from \"outside upper right\".\n+#\n+ucl = ['upper', 'center', 'lower']\n+lcr = ['left', 'center', 'right']\n+fig, ax = plt.subplots(figsize=(6, 4), layout='constrained', facecolor='0.7')\n+\n+ax.plot([1, 2], [1, 2], label='TEST')\n+# Place a legend to the right of this smaller subplot.\n+for loc in [\n+        'outside upper left',\n+        'outside upper center',\n+        'outside upper right',\n+        'outside lower left',\n+        'outside lower center',\n+        'outside lower right']:\n+    fig.legend(loc=loc, title=loc)\n+\n+fig, ax = plt.subplots(figsize=(6, 4), layout='constrained', facecolor='0.7')\n+ax.plot([1, 2], [1, 2], label='test')\n+\n+for loc in [\n+        'outside left upper',\n+        'outside right upper',\n+        'outside left lower',\n+        'outside right lower']:\n+    fig.legend(loc=loc, title=loc)\n+\n \n ###############################################################################\n # Multiple legends on the same Axes\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -4,6 +4,7 @@\n import warnings\n \n import numpy as np\n+from numpy.testing import assert_allclose\n import pytest\n \n from matplotlib.testing.decorators import check_figures_equal, image_comparison\n@@ -18,7 +19,6 @@\n import matplotlib.legend as mlegend\n from matplotlib import rc_context\n from matplotlib.font_manager import FontProperties\n-from numpy.testing import assert_allclose\n \n \n def test_legend_ordereddict():\n@@ -486,6 +486,47 @@ def test_warn_args_kwargs(self):\n             \"be discarded.\")\n \n \n+def test_figure_legend_outside():\n+    todos = ['upper ' + pos for pos in ['left', 'center', 'right']]\n+    todos += ['lower ' + pos for pos in ['left', 'center', 'right']]\n+    todos += ['left ' + pos for pos in ['lower', 'center', 'upper']]\n+    todos += ['right ' + pos for pos in ['lower', 'center', 'upper']]\n+\n+    upperext = [20.347556,  27.722556, 790.583, 545.499]\n+    lowerext = [20.347556,  71.056556, 790.583, 588.833]\n+    leftext = [151.681556, 27.722556, 790.583, 588.833]\n+    rightext = [20.347556,  27.722556, 659.249, 588.833]\n+    axbb = [upperext, upperext, upperext,\n+            lowerext, lowerext, lowerext,\n+            leftext, leftext, leftext,\n+            rightext, rightext, rightext]\n+\n+    legbb = [[10., 555., 133., 590.],     # upper left\n+             [338.5, 555., 461.5, 590.],  # upper center\n+             [667, 555., 790.,  590.],    # upper right\n+             [10., 10., 133.,  45.],      # lower left\n+             [338.5, 10., 461.5,  45.],   # lower center\n+             [667., 10., 790.,  45.],     # lower right\n+             [10., 10., 133., 45.],       # left lower\n+             [10., 282.5, 133., 317.5],   # left center\n+             [10., 555., 133., 590.],     # left upper\n+             [667, 10., 790., 45.],       # right lower\n+             [667., 282.5, 790., 317.5],  # right center\n+             [667., 555., 790., 590.]]    # right upper\n+\n+    for nn, todo in enumerate(todos):\n+        print(todo)\n+        fig, axs = plt.subplots(constrained_layout=True, dpi=100)\n+        axs.plot(range(10), label='Boo1')\n+        leg = fig.legend(loc='outside ' + todo)\n+        fig.draw_without_rendering()\n+\n+        assert_allclose(axs.get_window_extent().extents,\n+                        axbb[nn])\n+        assert_allclose(leg.get_window_extent().extents,\n+                        legbb[nn])\n+\n+\n @image_comparison(['legend_stackplot.png'])\n def test_legend_stackplot():\n     \"\"\"Test legend for PolyCollection using stackplot.\"\"\"\n",
  "problem_statement": "constrained_layout support for figure.legend\nJust a feature request to have constrained_layout support `figure.legend`\n",
  "hints_text": "What behaviour would you expect?  \r\n\r\nIf you want the legend to steal space on the figure from the axes, then call `axes.legend` with the correct handles and it will make room.  \nYes. Here's an example from seaborn. I would expect this to be the result of `figure.legend(handles, labels, loc='right')`\r\n\r\n![image](https://user-images.githubusercontent.com/2448579/50259219-07214f00-03b8-11e9-9527-dca898d66c17.png)\r\n\r\n\nHow would constrained layout know which subplots to steal space from for the legend?   A figure legend doesn’t belong to any axes, so there is no natural way to do what you are asking.  \r\n\r\nAgain if you attach the legend to one of the rightmost axes, it will do what you want.  \n> How would constrained layout know which subplots to steal space from for the legend? \r\n\r\nDo what colorbar does? colorbar does have an `ax` argument though... hmmm.\r\n\r\nHere's an example. I'd like the `constrained_layout` version of this:\r\n\r\n``` python\r\nf, ax = plt.subplots(2, 2, sharex=True, sharey=True, constrained_layout=False)\r\nh = list()\r\nfor aa in ax.flat:\r\n    h.append(aa.plot(np.random.randn(5), np.random.randn(5), '*')[0])\r\n    h.append(aa.plot(np.random.randn(5), np.random.randn(5), '*')[0])\r\n\r\nhleg = f.legend(handles=h[-2:], labels=['a', 'b'],\r\n                loc='center right')\r\n```\r\n![mpl-test1](https://user-images.githubusercontent.com/2448579/50300034-05976b80-0438-11e9-8808-074d7669650b.png)\r\n\r\n\r\nHere's my attempt at a constrained_layout version using `ax.legend`. Is there a way to do this without the space between the two rows of subplots?\r\n\r\n``` python\r\nf, ax = plt.subplots(2, 2, sharex=True, sharey=True, constrained_layout=True)\r\nh = list()\r\nfor aa in ax.flat:\r\n    h.append(aa.plot(np.random.randn(5), np.random.randn(5), '*')[0])\r\n    h.append(aa.plot(np.random.randn(5), np.random.randn(5), '*')[0])\r\n\r\nhleg = ax[1, 1].legend(handles=h[-2:], labels=['a', 'b'],\r\n                       loc='center right',\r\n                       bbox_to_anchor=(1.2, 1.2))\r\n```\r\n![mpl-test2](https://user-images.githubusercontent.com/2448579/50300078-2c55a200-0438-11e9-8761-19dd6d97c65a.png)\r\n\nWhat is happening above is ax[1, 1] is saying it is bigger than the other axes, and makes space for itself in the layout.  To avoid this, don't anchor it above the top of the axes.  Yes, your legend will not be vertically centred. \r\n\r\nWe could come up with an API to automatically insert anchored boxes and steal space from the other elements in a gridspec (the container of your four subplots).  We do that now for suptitle (sort of) and, as you say, colorbar.  So the question is how to pass that info down to `fig.legend`.  I suppose we could add an `axs` kwarg.  \nThought about this some more, and its quite a hard problem. \r\n\r\n`figure.legend` allows more than one legend. Conversely, `figure.suptitle` only has one suptitle, so layout is easy.  `figure.colorbar` has a well-understood set of conventions for where colorbars go, but legends have been more free-form, with placement being arbitrary, and anchored using `bbox_to_anchor`.  \r\n\r\n\nIs it feasible to only add support for certain legend configurations in a first step? E.g. don‘t handle legends with `bbox_to_anchor` and/or certain `loc` values.\nI was going to say the same. The `loc` values should be well constrained and a good first step. Throw a warning and disable constrained_layout if `bbox_to_anchor` is set?\nHmmmm.  Not a fan of that.  Seems mysterious and a documentation PITA \r\n\r\nI was leaning towards a new method, ideally  attached to gridspec. That’s easier from the point of view of being able to specify a new API.  \r\n\r\nI think conceptually this is easy enough to implement in constrained_layout.  But I’m not sure about implementing without constrained_layout.  Legends are packable boxes and hence hard to predict their size a priori.  For instance they can be arbitrarily wide or high.  \r\n\r\nI’d propose writing a separate method for now and then figure.legend could call that given the right conditions. \n> I’d propose writing a separate method for now and then figure.legend could call that given the right conditions.\r\n\r\nSounds like a reasonable approach. Though, I'm not quite involved in this stuff, and therefore I'm not a good judge. Withdrawing from the discussion for now.\nI have a proof of concept that works great for this.  Up for ideas about how to specify locations and whether the arrangement with the rest of the gridspec is horizontal or vertical.   The typical location “northeast” or “southeast” is ambiguous because it doesn’t specify if the gridspec’s Axes give way vertically or horizontally.  We’d could either have another kwarg, or let the `location=“verticalnortheast”` to specify vertical arrangement instead of horizontal (which I think would be the default for all locations except for “north” and “south”)...\r\n\r\nSuggestions welcome.   For now, I think I’ll go w/ implementing horizontal arrangement, and just not support “north” or “south” (I.e. “northeast” will arrange horizontally, with the legend in the upper right corner). \nUsing an extra kwarg `arrange=vertical` or `arrange=horizontal` seems less clunky than `verticalnortheast`",
  "created_at": "2021-03-19T05:13:17Z",
  "version": "3.3",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_figure_legend_outside\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_legend_ordereddict\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto4\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto5\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[png]\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore\", \"lib/matplotlib/tests/test_legend.py::test_labels_first[png]\", \"lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[png]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_rc[png]\", \"lib/matplotlib/tests/test_legend.py::test_rc[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[png]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_remove\", \"lib/matplotlib/tests/test_legend.py::test_reverse_legend_handles_and_labels\", \"lib/matplotlib/tests/test_legend.py::test_reverse_legend_display[png]\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs\", \"lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]\", \"lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend\", \"lib/matplotlib/tests/test_legend.py::test_nanscatter\", \"lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]\", \"lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes\", \"lib/matplotlib/tests/test_legend.py::test_handler_numpoints\", \"lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning\", \"lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend\", \"lib/matplotlib/tests/test_legend.py::test_shadow_framealpha\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_empty\", \"lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent\", \"lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markerfacecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markfacecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_get_set_draggable\", \"lib/matplotlib/tests/test_legend.py::test_legend_draggable[True]\", \"lib/matplotlib/tests/test_legend.py::test_legend_draggable[False]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_handles\", \"lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc\", \"lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception\", \"lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_text_axes\", \"lib/matplotlib/tests/test_legend.py::test_handlerline2d\", \"lib/matplotlib/tests/test_legend.py::test_subfigure_legend\", \"lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color\", \"lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]\"]",
  "environment_setup_commit": "28289122be81e0bc0a6ee0c4c5b7343a46ce2e4e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.788487",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}