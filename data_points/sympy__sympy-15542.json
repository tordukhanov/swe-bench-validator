{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15542",
  "base_commit": "495e749818bbcd55dc0d9ee7101cb36646e4277a",
  "patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -380,19 +380,20 @@ def are_coplanar(cls, *points):\n         points = list(uniq(points))\n         return Point.affine_rank(*points) <= 2\n \n-    def distance(self, p):\n-        \"\"\"The Euclidean distance from self to point p.\n-\n-        Parameters\n-        ==========\n-\n-        p : Point\n+    def distance(self, other):\n+        \"\"\"The Euclidean distance between self and another GeometricEntity.\n \n         Returns\n         =======\n \n         distance : number or symbolic expression.\n \n+        Raises\n+        ======\n+        AttributeError : if other is a GeometricEntity for which\n+                         distance is not defined.\n+        TypeError : if other is not recognized as a GeometricEntity.\n+\n         See Also\n         ========\n \n@@ -402,19 +403,34 @@ def distance(self, p):\n         Examples\n         ========\n \n-        >>> from sympy.geometry import Point\n+        >>> from sympy.geometry import Point, Line\n         >>> p1, p2 = Point(1, 1), Point(4, 5)\n+        >>> l = Line((3, 1), (2, 2))\n         >>> p1.distance(p2)\n         5\n+        >>> p1.distance(l)\n+        sqrt(2)\n+\n+        The computed distance may be symbolic, too:\n \n         >>> from sympy.abc import x, y\n         >>> p3 = Point(x, y)\n-        >>> p3.distance(Point(0, 0))\n+        >>> p3.distance((0, 0))\n         sqrt(x**2 + y**2)\n \n         \"\"\"\n-        s, p = Point._normalize_dimension(self, Point(p))\n-        return sqrt(Add(*((a - b)**2 for a, b in zip(s, p))))\n+        if not isinstance(other , GeometryEntity) :\n+            try :\n+                other = Point(other, dim=self.ambient_dimension)\n+            except TypeError :\n+                raise TypeError(\"not recognized as a GeometricEntity: %s\" % type(other))\n+        if isinstance(other , Point) :\n+            s, p = Point._normalize_dimension(self, Point(other))\n+            return sqrt(Add(*((a - b)**2 for a, b in zip(s, p))))\n+        try :\n+            return other.distance(self)\n+        except AttributeError :\n+            raise AttributeError(\"distance between Point and %s is not defined\" % type(other))\n \n     def dot(self, p):\n         \"\"\"Return dot product of self with another Point.\"\"\"\n",
  "test_patch": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -33,6 +33,7 @@ def test_point():\n     p3 = Point(0, 0)\n     p4 = Point(1, 1)\n     p5 = Point(0, 1)\n+    line = Line(Point(1,0), slope = 1)\n \n     assert p1 in p1\n     assert p1 not in p2\n@@ -55,6 +56,10 @@ def test_point():\n     assert Point.distance(p1, p1) == 0\n     assert Point.distance(p3, p2) == sqrt(p2.x**2 + p2.y**2)\n \n+    # distance should be symmetric\n+    assert p1.distance(line) == line.distance(p1)\n+    assert p4.distance(line) == line.distance(p4)\n+\n     assert Point.taxicab_distance(p4, p3) == 2\n \n     assert Point.canberra_distance(p4, p5) == 1\n@@ -72,7 +77,7 @@ def test_point():\n     assert Point.is_collinear(p3, p4, p1_1, p1_2)\n     assert Point.is_collinear(p3, p4, p1_1, p1_3) is False\n     assert Point.is_collinear(p3, p3, p4, p5) is False\n-    line = Line(Point(1,0), slope = 1)\n+\n     raises(TypeError, lambda: Point.is_collinear(line))\n     raises(TypeError, lambda: p1_1.is_collinear(line))\n \n",
  "problem_statement": "Should Point.distance(Line) return distance?\nIn Geometry module, `Line.distance(Point)` can be used to compute distance, but `Point.distance(Line)` cannot. Should this be made symmetric? \r\n```\r\n>>> L = Line((1, 1), (2, 2))\r\n>>> P = Point(1, 0)\r\n>>> L.distance(P)\r\nsqrt(2)/2\r\n>>> P.distance(L)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/k3/sympy/sympy/geometry/point.py\", line 416, in distance\r\n    s, p = Point._normalize_dimension(self, Point(p))\r\n  File \"/home/k3/sympy/sympy/geometry/point.py\", line 129, in __new__\r\n    .format(func_name(coords))))\r\nTypeError: \r\nExpecting sequence of coordinates, not `Line2D`\r\n```\n",
  "hints_text": "It would be natural that `distance` be symmetric. That is not even hard to implement.\nI think it is right for `distance` to be symmetric . I would like to give this a try  . ",
  "created_at": "2018-11-24T07:31:00Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_point\"]",
  "PASS_TO_PASS": "[\"test_point3D\", \"test_Point2D\", \"test_issue_9214\", \"test_issue_11617\", \"test_transform\", \"test_concyclic_doctest_bug\", \"test_arguments\", \"test_unit\", \"test_dot\", \"test__normalize_dimension\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.099944",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}