{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13536",
  "base_commit": "c863ed3d57e3b5ceeb4e7e8001c96aad7110c605",
  "patch": "diff --git a/sklearn/ensemble/gradient_boosting.py b/sklearn/ensemble/gradient_boosting.py\n--- a/sklearn/ensemble/gradient_boosting.py\n+++ b/sklearn/ensemble/gradient_boosting.py\n@@ -1489,7 +1489,9 @@ def fit(self, X, y, sample_weight=None, monitor=None):\n                     except TypeError:  # regular estimator without SW support\n                         raise ValueError(msg)\n                     except ValueError as e:\n-                        if 'not enough values to unpack' in str(e):  # pipeline\n+                        if \"pass parameters to specific steps of \"\\\n+                           \"your pipeline using the \"\\\n+                           \"stepname__parameter\" in str(e):  # pipeline\n                             raise ValueError(msg) from e\n                         else:  # regular estimator whose input checking failed\n                             raise\ndiff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -253,6 +253,13 @@ def _fit(self, X, y=None, **fit_params):\n         fit_params_steps = {name: {} for name, step in self.steps\n                             if step is not None}\n         for pname, pval in fit_params.items():\n+            if '__' not in pname:\n+                raise ValueError(\n+                    \"Pipeline.fit does not accept the {} parameter. \"\n+                    \"You can pass parameters to specific steps of your \"\n+                    \"pipeline using the stepname__parameter format, e.g. \"\n+                    \"`Pipeline.fit(X, y, logisticregression__sample_weight\"\n+                    \"=sample_weight)`.\".format(pname))\n             step, param = pname.split('__', 1)\n             fit_params_steps[step][param] = pval\n         Xt = X\n",
  "test_patch": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1072,3 +1072,10 @@ def test_make_pipeline_memory():\n     assert len(pipeline) == 2\n \n     shutil.rmtree(cachedir)\n+\n+\n+def test_pipeline_param_error():\n+    clf = make_pipeline(LogisticRegression())\n+    with pytest.raises(ValueError, match=\"Pipeline.fit does not accept \"\n+                                         \"the sample_weight parameter\"):\n+        clf.fit([[0], [0]], [0, 1], sample_weight=[1, 1])\n",
  "problem_statement": "improve error message when passing sample_weight to Pipeline\nMany estimators take a parameter named `sample_weight`. `Pipeline` does not, since it wants its `fit` parameters to be prefixed by the step name with a `__` delimiter:\r\n\r\n```pytb\r\n>>> from sklearn.pipeline import make_pipeline\r\n>>> from sklearn.linear_model import LogisticRegression\r\n>>> clf = make_pipeline(LogisticRegression())\r\n>>> clf.fit([[0], [0]], [0, 1], logisticregression__sample_weight=[1, 1])\r\nPipeline(memory=None,\r\n     steps=[('logisticregression', LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\r\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\r\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\r\n          verbose=0, warm_start=False))])\r\n>>> clf.fit([[0], [0]], [0, 1], sample_weight=[1, 1])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/n/schwafs/home/joel/miniconda3/envs/scipy3k/lib/python3.6/site-packages/sklearn/pipeline.py\", line 248, in fit\r\n    Xt, fit_params = self._fit(X, y, **fit_params)\r\n  File \"/n/schwafs/home/joel/miniconda3/envs/scipy3k/lib/python3.6/site-packages/sklearn/pipeline.py\", line 197, in _fit\r\n    step, param = pname.split('__', 1)\r\nValueError: not enough values to unpack (expected 2, got 1)\r\n```\r\n\r\nThis error message is not friendly enough. It should explicitly describe the correct format for passing `sample_weight` to a step in a Pipeline.\n",
  "hints_text": "There is some code in gradient boosting that checks for the current error message, so that should be updated to reflect a changed error message too.\r\n\r\n(Arguably, this should be a TypeError, not a ValueError, since the user has passed the wrong parameter names, but I'm ambivalent to whether we fix that.)\nI'd like to take this issue.",
  "created_at": "2019-03-28T08:05:48Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_pipeline.py::test_pipeline_param_error\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_pipeline.py::test_pipeline_init\", \"sklearn/tests/test_pipeline.py::test_pipeline_init_tuple\", \"sklearn/tests/test_pipeline.py::test_pipeline_methods_anova\", \"sklearn/tests/test_pipeline.py::test_pipeline_fit_params\", \"sklearn/tests/test_pipeline.py::test_pipeline_sample_weight_supported\", \"sklearn/tests/test_pipeline.py::test_pipeline_sample_weight_unsupported\", \"sklearn/tests/test_pipeline.py::test_pipeline_raise_set_params_error\", \"sklearn/tests/test_pipeline.py::test_pipeline_methods_pca_svm\", \"sklearn/tests/test_pipeline.py::test_pipeline_methods_preprocessing_svm\", \"sklearn/tests/test_pipeline.py::test_fit_predict_on_pipeline\", \"sklearn/tests/test_pipeline.py::test_fit_predict_on_pipeline_without_fit_predict\", \"sklearn/tests/test_pipeline.py::test_fit_predict_with_intermediate_fit_params\", \"sklearn/tests/test_pipeline.py::test_predict_with_predict_params\", \"sklearn/tests/test_pipeline.py::test_feature_union\", \"sklearn/tests/test_pipeline.py::test_make_union\", \"sklearn/tests/test_pipeline.py::test_make_union_kwargs\", \"sklearn/tests/test_pipeline.py::test_pipeline_transform\", \"sklearn/tests/test_pipeline.py::test_pipeline_fit_transform\", \"sklearn/tests/test_pipeline.py::test_pipeline_slice\", \"sklearn/tests/test_pipeline.py::test_pipeline_index\", \"sklearn/tests/test_pipeline.py::test_set_pipeline_steps\", \"sklearn/tests/test_pipeline.py::test_pipeline_named_steps\", \"sklearn/tests/test_pipeline.py::test_pipeline_correctly_adjusts_steps[None]\", \"sklearn/tests/test_pipeline.py::test_pipeline_correctly_adjusts_steps[passthrough]\", \"sklearn/tests/test_pipeline.py::test_set_pipeline_step_passthrough[None]\", \"sklearn/tests/test_pipeline.py::test_set_pipeline_step_passthrough[passthrough]\", \"sklearn/tests/test_pipeline.py::test_pipeline_ducktyping\", \"sklearn/tests/test_pipeline.py::test_make_pipeline\", \"sklearn/tests/test_pipeline.py::test_feature_union_weights\", \"sklearn/tests/test_pipeline.py::test_feature_union_parallel\", \"sklearn/tests/test_pipeline.py::test_feature_union_feature_names\", \"sklearn/tests/test_pipeline.py::test_classes_property\", \"sklearn/tests/test_pipeline.py::test_set_feature_union_steps\", \"sklearn/tests/test_pipeline.py::test_set_feature_union_step_drop[drop]\", \"sklearn/tests/test_pipeline.py::test_set_feature_union_step_drop[None]\", \"sklearn/tests/test_pipeline.py::test_step_name_validation\", \"sklearn/tests/test_pipeline.py::test_set_params_nested_pipeline\", \"sklearn/tests/test_pipeline.py::test_pipeline_wrong_memory\", \"sklearn/tests/test_pipeline.py::test_pipeline_with_cache_attribute\", \"sklearn/tests/test_pipeline.py::test_pipeline_memory\", \"sklearn/tests/test_pipeline.py::test_make_pipeline_memory\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.995889",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}