{
  "repo": "pallets/flask",
  "instance_id": "pallets__flask-4642",
  "base_commit": "97298e06fe19298c3ff9d2e0ed9ba70bb3fda2c8",
  "patch": "diff --git a/src/flask/app.py b/src/flask/app.py\n--- a/src/flask/app.py\n+++ b/src/flask/app.py\n@@ -10,6 +10,7 @@\n from threading import Lock\n from types import TracebackType\n \n+import click\n from werkzeug.datastructures import Headers\n from werkzeug.datastructures import ImmutableDict\n from werkzeug.exceptions import Aborter\n@@ -23,6 +24,7 @@\n from werkzeug.routing import RequestRedirect\n from werkzeug.routing import RoutingException\n from werkzeug.routing import Rule\n+from werkzeug.serving import is_running_from_reloader\n from werkzeug.urls import url_quote\n from werkzeug.utils import redirect as _wz_redirect\n from werkzeug.wrappers import Response as BaseResponse\n@@ -908,12 +910,18 @@ def run(\n             The default port is now picked from the ``SERVER_NAME``\n             variable.\n         \"\"\"\n-        # Change this into a no-op if the server is invoked from the\n-        # command line. Have a look at cli.py for more information.\n+        # Ignore this call so that it doesn't start another server if\n+        # the 'flask run' command is used.\n         if os.environ.get(\"FLASK_RUN_FROM_CLI\") == \"true\":\n-            from .debughelpers import explain_ignored_app_run\n+            if not is_running_from_reloader():\n+                click.secho(\n+                    \" * Ignoring a call to 'app.run()', the server is\"\n+                    \" already being run with the 'flask run' command.\\n\"\n+                    \"   Only call 'app.run()' in an 'if __name__ ==\"\n+                    ' \"__main__\"\\' guard.',\n+                    fg=\"red\",\n+                )\n \n-            explain_ignored_app_run()\n             return\n \n         if get_load_dotenv(load_dotenv):\ndiff --git a/src/flask/cli.py b/src/flask/cli.py\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -5,12 +5,14 @@\n import re\n import sys\n import traceback\n+import typing as t\n from functools import update_wrapper\n from operator import attrgetter\n from threading import Lock\n from threading import Thread\n \n import click\n+from werkzeug.serving import is_running_from_reloader\n from werkzeug.utils import import_string\n \n from .globals import current_app\n@@ -273,7 +275,7 @@ def __init__(self, loader, use_eager_loading=None):\n         self._bg_loading_exc = None\n \n         if use_eager_loading is None:\n-            use_eager_loading = os.environ.get(\"WERKZEUG_RUN_MAIN\") != \"true\"\n+            use_eager_loading = not is_running_from_reloader()\n \n         if use_eager_loading:\n             self._load_unlocked()\n@@ -477,7 +479,13 @@ def __init__(\n         if add_version_option:\n             params.append(version_option)\n \n-        AppGroup.__init__(self, params=params, **extra)\n+        if \"context_settings\" not in extra:\n+            extra[\"context_settings\"] = {}\n+\n+        extra[\"context_settings\"].setdefault(\"auto_envvar_prefix\", \"FLASK\")\n+\n+        super().__init__(params=params, **extra)\n+\n         self.create_app = create_app\n         self.load_dotenv = load_dotenv\n         self.set_debug_flag = set_debug_flag\n@@ -545,26 +553,22 @@ def list_commands(self, ctx):\n \n         return sorted(rv)\n \n-    def main(self, *args, **kwargs):\n-        # Set a global flag that indicates that we were invoked from the\n-        # command line interface. This is detected by Flask.run to make the\n-        # call into a no-op. This is necessary to avoid ugly errors when the\n-        # script that is loaded here also attempts to start a server.\n-        os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"\n-\n+    def make_context(\n+        self,\n+        info_name: t.Optional[str],\n+        args: t.List[str],\n+        parent: t.Optional[click.Context] = None,\n+        **extra: t.Any,\n+    ) -> click.Context:\n         if get_load_dotenv(self.load_dotenv):\n             load_dotenv()\n \n-        obj = kwargs.get(\"obj\")\n-\n-        if obj is None:\n-            obj = ScriptInfo(\n+        if \"obj\" not in extra and \"obj\" not in self.context_settings:\n+            extra[\"obj\"] = ScriptInfo(\n                 create_app=self.create_app, set_debug_flag=self.set_debug_flag\n             )\n \n-        kwargs[\"obj\"] = obj\n-        kwargs.setdefault(\"auto_envvar_prefix\", \"FLASK\")\n-        return super().main(*args, **kwargs)\n+        return super().make_context(info_name, args, parent=parent, **extra)\n \n \n def _path_is_ancestor(path, other):\n@@ -637,7 +641,7 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n     \"\"\"Show extra startup messages the first time the server is run,\n     ignoring the reloader.\n     \"\"\"\n-    if os.environ.get(\"WERKZEUG_RUN_MAIN\") == \"true\":\n+    if is_running_from_reloader():\n         return\n \n     if app_import_path is not None:\n@@ -653,10 +657,10 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n     if env == \"production\":\n         click.secho(\n             \"   WARNING: This is a development server. Do not use it in\"\n-            \" a production deployment.\",\n+            \" a production deployment.\\n   Use a production WSGI server\"\n+            \" instead.\",\n             fg=\"red\",\n         )\n-        click.secho(\"   Use a production WSGI server instead.\", dim=True)\n \n     if debug is not None:\n         click.echo(f\" * Debug mode: {'on' if debug else 'off'}\")\n@@ -963,6 +967,7 @@ def routes_command(sort: str, all_methods: bool) -> None:\n \n \n cli = FlaskGroup(\n+    name=\"flask\",\n     help=\"\"\"\\\n A general utility script for Flask applications.\n \n@@ -978,7 +983,7 @@ def routes_command(sort: str, all_methods: bool) -> None:\n \"\"\".format(\n         cmd=\"export\" if os.name == \"posix\" else \"set\",\n         prefix=\"$ \" if os.name == \"posix\" else \"> \",\n-    )\n+    ),\n )\n \n \ndiff --git a/src/flask/debughelpers.py b/src/flask/debughelpers.py\n--- a/src/flask/debughelpers.py\n+++ b/src/flask/debughelpers.py\n@@ -1,6 +1,4 @@\n-import os\n import typing as t\n-from warnings import warn\n \n from .app import Flask\n from .blueprints import Blueprint\n@@ -159,16 +157,3 @@ def explain_template_loading_attempts(app: Flask, template, attempts) -> None:\n         info.append(\"  See https://flask.palletsprojects.com/blueprints/#templates\")\n \n     app.logger.info(\"\\n\".join(info))\n-\n-\n-def explain_ignored_app_run() -> None:\n-    if os.environ.get(\"WERKZEUG_RUN_MAIN\") != \"true\":\n-        warn(\n-            Warning(\n-                \"Silently ignoring app.run() because the application is\"\n-                \" run from the flask command line executable. Consider\"\n-                ' putting app.run() behind an if __name__ == \"__main__\"'\n-                \" guard to silence this warning.\"\n-            ),\n-            stacklevel=3,\n-        )\n",
  "test_patch": "diff --git a/tests/test_cli.py b/tests/test_cli.py\n--- a/tests/test_cli.py\n+++ b/tests/test_cli.py\n@@ -388,6 +388,19 @@ def test():\n     assert result.output == f\"{not set_debug_flag}\\n\"\n \n \n+def test_flaskgroup_nested(app, runner):\n+    cli = click.Group(\"cli\")\n+    flask_group = FlaskGroup(name=\"flask\", create_app=lambda: app)\n+    cli.add_command(flask_group)\n+\n+    @flask_group.command()\n+    def show():\n+        click.echo(current_app.name)\n+\n+    result = runner.invoke(cli, [\"flask\", \"show\"])\n+    assert result.output == \"flask_test\\n\"\n+\n+\n def test_no_command_echo_loading_error():\n     from flask.cli import cli\n \n",
  "problem_statement": "FlaskGroup does not work when nested in a click.group\n### Expected Behavior\r\nWhen using Flask CLI, I came to the case that we have a group of commands for a big program that uses `click`.\r\n```python\r\n# main group\r\n@click.group()\r\n@click.pass_context\r\ndef my_big_cli_group(ctx):\r\n    pass\r\n\r\n# sub group\r\n@my_big_cli_group.group()\r\n@click.pass_context\r\ndef my_nested_group(ctx):\r\n    pass\r\n\r\n# command for sub group\r\n@my_nested_group.command()\r\n@click.pass_context\r\n@click.option('-s', '--start', is_flag=True)\r\ndef my_command(ctx, start):\r\n    click.echo(start)\r\n```\r\n\r\nThe issue comes when nesting my flask app into the bigger group using `cls=FlaskGroup` and passing my `create_app` factory function.\r\n\r\n```python\r\n# flask app sub group\r\n@my_big_cli_group.group(cls=FlaskGroup, create_app=create_app)\r\n@click.pass_context\r\ndef my_flask_app(ctx):\r\n    pass\r\n```\r\n\r\nAfter running my `setup.py` pointing my entry point to `'my_big_cli = path.to:my_big_cli_group'`, I should expect the app to start once I do:\r\n```bash\r\n$ my_big_cli my_flask_app run\r\n```\r\n\r\n### Actual Behavior\r\nInstead, I get a `flask.cli.NoAppException`. It seems that `create_app` does not get passed on to `Group.group` instances on `click`.\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n File “/Users/the_user/Desktop/venv/lib/python3.7/site-packages/flask/cli.py”, line 540, in list_commands\r\n   rv.update(info.load_app().cli.list_commands(ctx))\r\n File “/Users/the_user/Desktop/venv/lib/python3.7/site-packages/flask/cli.py”, line 393, in load_app\r\n   ‘Could not locate a Flask application. You did not provide ’\r\nflask.cli.NoAppException: Could not locate a Flask application. You did not provide the “FLASK_APP” environment variable, and a “wsgi.py” or “app.py” module was not found in the current directory.\r\n```\r\n\r\n### Work around\r\nIf I don't nest the flask app into a group but rather make it a new `click.group`, then after changing my `setup.py` to point to this new entry point as well, everything works as expected.\r\n\r\n```python\r\n# flask app group\r\n@click.group(cls=FlaskGroup, create_app=create_app)\r\n@click.pass_context\r\ndef my_flask_app(ctx):\r\n    pass\r\n```\r\nThen\r\n```bash\r\n$ my_flask_app run\r\n```\r\nworks perfectly fine\r\n\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.3\r\n* Flask version: 1.0.3\r\n* Werkzeug version: 0.15.4\n",
  "hints_text": "There are some bootstrap code in `FlaskGroup.main()`, so I think it is not allowed to nest it in another group, because the function is never called.\nAh, interesting. Could there be any workaround for this to be allowed? I guess at the end `Flask` should be fully compatible with all `click` functionalities (group `nesting` being one of the main ones).\nPassing create_app as a parameter doesn't work in this case, but you can still use FLASK_APP environment variable to do the trick. Note that some functionalities are still missing, such as dotenv loading.\nI also came across this issue, I dug into the source and was able to make a minor change which *seems* to do the trick. I have yet to test it more thoroughly however, perhaps someone here can figure out if this affects something else.\r\n\r\nQuite simply I re-write FlaskGroup and replace `main` with `make_context` (naturally, the call and the `super()`) here https://github.com/pallets/flask/blob/master/src/flask/cli.py#L578-L597\r\n\r\nThis is because in click, one of the first things that are done in `main` is to call `make_context` with `kwargs` (https://github.com/pallets/click/blob/master/src/click/core.py#L809)\r\n\r\nWhich ends up here: https://github.com/pallets/click/blob/35f73b8c2c314e56968de8bc483da9a84ac5c53e/src/click/core.py#L712 \r\nIt looks to me like injecting kwargs into this function instead of main should work just as well. In my simple tests, this seems to enable me to run the flask apps using the new FlaskGroup in sub groups.\r\n\r\nAfter additional testing I may consider writing a PR if no one beats me to it.\n@u8sand Thanks a lot for your research!\r\n\r\nFor anyone else wondering how to avoid this issue, this is the code I used (simplified a bit):\r\n\r\n```python3\r\nclass CustomGroup(FlaskGroup):\r\n    def make_context(self, *args, **extra):\r\n        obj = extra.get(\"obj\")\r\n        if obj is None:\r\n            obj = ScriptInfo(create_app=self.create_app, set_debug_flag=self.set_debug_flag)\r\n        extra[\"obj\"] = obj\r\n\r\n        return super().make_context(*args, **extra)\r\n\r\n@click.group(cls=CustomGroup)\r\n...\r\n````",
  "created_at": "2022-06-15T21:14:32Z",
  "version": "2.2",
  "FAIL_TO_PASS": "[\"tests/test_cli.py::test_flaskgroup_nested\"]",
  "PASS_TO_PASS": "[\"tests/test_cli.py::test_cli_name\", \"tests/test_cli.py::test_find_best_app\", \"tests/test_cli.py::test_prepare_import[test-path0-test]\", \"tests/test_cli.py::test_prepare_import[test.py-path1-test]\", \"tests/test_cli.py::test_prepare_import[a/test-path2-test]\", \"tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]\", \"tests/test_cli.py::test_prepare_import[test/__init__-path4-test]\", \"tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]\", \"tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]\", \"tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]\", \"tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]\", \"tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]\", \"tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]\", \"tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-None-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\\\"foo\\\",\", \"tests/test_cli.py::test_locate_app[cliapp.factory-\", \"tests/test_cli.py::test_locate_app_raises[notanapp.py-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp/app-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\\\"foo\\\")]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]\", \"tests/test_cli.py::test_locate_app_suppress_raise\", \"tests/test_cli.py::test_get_version\", \"tests/test_cli.py::test_scriptinfo\", \"tests/test_cli.py::test_lazy_load_error\", \"tests/test_cli.py::test_with_appcontext\", \"tests/test_cli.py::test_appgroup\", \"tests/test_cli.py::test_flaskgroup\", \"tests/test_cli.py::test_flaskgroup_debug[True]\", \"tests/test_cli.py::test_flaskgroup_debug[False]\", \"tests/test_cli.py::test_no_command_echo_loading_error\", \"tests/test_cli.py::test_help_echo_loading_error\", \"tests/test_cli.py::test_help_echo_exception\", \"tests/test_cli.py::TestRoutes::test_simple\", \"tests/test_cli.py::TestRoutes::test_all_methods\", \"tests/test_cli.py::TestRoutes::test_no_routes\", \"tests/test_cli.py::test_load_dotenv\", \"tests/test_cli.py::test_dotenv_path\", \"tests/test_cli.py::test_dotenv_optional\", \"tests/test_cli.py::test_disable_dotenv_from_env\", \"tests/test_cli.py::test_run_cert_path\", \"tests/test_cli.py::test_run_cert_adhoc\", \"tests/test_cli.py::test_run_cert_import\", \"tests/test_cli.py::test_run_cert_no_ssl\", \"tests/test_cli.py::test_cli_blueprints\", \"tests/test_cli.py::test_cli_empty\"]",
  "environment_setup_commit": "98ca00d54532bfdf858fe663f8fb3cc260c2048b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.844386",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}