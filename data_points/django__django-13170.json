{
  "repo": "django/django",
  "instance_id": "django__django-13170",
  "base_commit": "5a3d7cf46205f42303a5f429c388cb507ef5d630",
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1419,14 +1419,30 @@ def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, curre\n     def add_filtered_relation(self, filtered_relation, alias):\n         filtered_relation.alias = alias\n         lookups = dict(get_children_from_q(filtered_relation.condition))\n-        for lookup in chain((filtered_relation.relation_name,), lookups):\n-            lookup_parts, field_parts, _ = self.solve_lookup_type(lookup)\n+        relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(filtered_relation.relation_name)\n+        if relation_lookup_parts:\n+            raise ValueError(\n+                \"FilteredRelation's relation_name cannot contain lookups \"\n+                \"(got %r).\" % filtered_relation.relation_name\n+            )\n+        for lookup in chain(lookups):\n+            lookup_parts, lookup_field_parts, _ = self.solve_lookup_type(lookup)\n             shift = 2 if not lookup_parts else 1\n-            if len(field_parts) > (shift + len(lookup_parts)):\n-                raise ValueError(\n-                    \"FilteredRelation's condition doesn't support nested \"\n-                    \"relations (got %r).\" % lookup\n-                )\n+            lookup_field_path = lookup_field_parts[:-shift]\n+            for idx, lookup_field_part in enumerate(lookup_field_path):\n+                if len(relation_field_parts) > idx:\n+                    if relation_field_parts[idx] != lookup_field_part:\n+                        raise ValueError(\n+                            \"FilteredRelation's condition doesn't support \"\n+                            \"relations outside the %r (got %r).\"\n+                            % (filtered_relation.relation_name, lookup)\n+                        )\n+                else:\n+                    raise ValueError(\n+                        \"FilteredRelation's condition doesn't support nested \"\n+                        \"relations deeper than the relation_name (got %r for \"\n+                        \"%r).\" % (lookup, filtered_relation.relation_name)\n+                    )\n         self._filtered_relations[filtered_relation.alias] = filtered_relation\n \n     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):\n@@ -1459,7 +1475,14 @@ def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):\n                     field = self.annotation_select[name].output_field\n                 elif name in self._filtered_relations and pos == 0:\n                     filtered_relation = self._filtered_relations[name]\n-                    field = opts.get_field(filtered_relation.relation_name)\n+                    if LOOKUP_SEP in filtered_relation.relation_name:\n+                        parts = filtered_relation.relation_name.split(LOOKUP_SEP)\n+                        filtered_relation_path, field, _, _ = self.names_to_path(\n+                            parts, opts, allow_many, fail_on_missing,\n+                        )\n+                        path.extend(filtered_relation_path[:-1])\n+                    else:\n+                        field = opts.get_field(filtered_relation.relation_name)\n             if field is not None:\n                 # Fields that contain one-to-many relations with a generic\n                 # model (like a GenericForeignKey) cannot generate reverse\n",
  "test_patch": "diff --git a/tests/filtered_relation/models.py b/tests/filtered_relation/models.py\n--- a/tests/filtered_relation/models.py\n+++ b/tests/filtered_relation/models.py\n@@ -88,3 +88,34 @@ class RentalSession(models.Model):\n         related_query_name='rental_session',\n     )\n     state = models.CharField(max_length=7, choices=STATES, default=NEW)\n+\n+\n+class Seller(models.Model):\n+    name = models.CharField(max_length=255)\n+\n+\n+class Currency(models.Model):\n+    currency = models.CharField(max_length=3)\n+\n+\n+class ExchangeRate(models.Model):\n+    rate_date = models.DateField()\n+    from_currency = models.ForeignKey(\n+        Currency,\n+        models.CASCADE,\n+        related_name='rates_from',\n+    )\n+    to_currency = models.ForeignKey(\n+        Currency,\n+        models.CASCADE,\n+        related_name='rates_to',\n+    )\n+    rate = models.DecimalField(max_digits=6, decimal_places=4)\n+\n+\n+class BookDailySales(models.Model):\n+    book = models.ForeignKey(Book, models.CASCADE, related_name='daily_sales')\n+    sale_date = models.DateField()\n+    currency = models.ForeignKey(Currency, models.CASCADE)\n+    seller = models.ForeignKey(Seller, models.CASCADE)\n+    sales = models.DecimalField(max_digits=10, decimal_places=2)\ndiff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -1,11 +1,18 @@\n+from datetime import date\n+from decimal import Decimal\n from unittest import mock\n \n from django.db import connection, transaction\n-from django.db.models import Case, Count, F, FilteredRelation, Q, When\n+from django.db.models import (\n+    Case, Count, DecimalField, F, FilteredRelation, Q, Sum, When,\n+)\n from django.test import TestCase\n from django.test.testcases import skipUnlessDBFeature\n \n-from .models import Author, Book, Borrower, Editor, RentalSession, Reservation\n+from .models import (\n+    Author, Book, BookDailySales, Borrower, Currency, Editor, ExchangeRate,\n+    RentalSession, Reservation, Seller,\n+)\n \n \n class FilteredRelationTests(TestCase):\n@@ -279,28 +286,148 @@ def test_as_subquery(self):\n         qs = Author.objects.filter(id__in=inner_qs)\n         self.assertSequenceEqual(qs, [self.author1])\n \n-    def test_with_foreign_key_error(self):\n+    def test_nested_foreign_key(self):\n+        qs = Author.objects.annotate(\n+            book_editor_worked_with=FilteredRelation(\n+                'book__editor',\n+                condition=Q(book__title__icontains='book by'),\n+            ),\n+        ).filter(\n+            book_editor_worked_with__isnull=False,\n+        ).select_related(\n+            'book_editor_worked_with',\n+        ).order_by('pk', 'book_editor_worked_with__pk')\n+        with self.assertNumQueries(1):\n+            self.assertQuerysetEqual(qs, [\n+                (self.author1, self.editor_a),\n+                (self.author2, self.editor_b),\n+                (self.author2, self.editor_b),\n+            ], lambda x: (x, x.book_editor_worked_with))\n+\n+    def test_nested_foreign_key_nested_field(self):\n+        qs = Author.objects.annotate(\n+            book_editor_worked_with=FilteredRelation(\n+                'book__editor',\n+                condition=Q(book__title__icontains='book by')\n+            ),\n+        ).filter(\n+            book_editor_worked_with__isnull=False,\n+        ).values(\n+            'name', 'book_editor_worked_with__name',\n+        ).order_by('name', 'book_editor_worked_with__name').distinct()\n+        self.assertSequenceEqual(qs, [\n+            {'name': self.author1.name, 'book_editor_worked_with__name': self.editor_a.name},\n+            {'name': self.author2.name, 'book_editor_worked_with__name': self.editor_b.name},\n+        ])\n+\n+    def test_nested_foreign_key_filtered_base_object(self):\n+        qs = Author.objects.annotate(\n+            alice_editors=FilteredRelation(\n+                'book__editor',\n+                condition=Q(name='Alice'),\n+            ),\n+        ).values(\n+            'name', 'alice_editors__pk',\n+        ).order_by('name', 'alice_editors__name').distinct()\n+        self.assertSequenceEqual(qs, [\n+            {'name': self.author1.name, 'alice_editors__pk': self.editor_a.pk},\n+            {'name': self.author2.name, 'alice_editors__pk': None},\n+        ])\n+\n+    def test_nested_m2m_filtered(self):\n+        qs = Book.objects.annotate(\n+            favorite_book=FilteredRelation(\n+                'author__favorite_books',\n+                condition=Q(author__favorite_books__title__icontains='book by')\n+            ),\n+        ).values(\n+            'title', 'favorite_book__pk',\n+        ).order_by('title', 'favorite_book__title')\n+        self.assertSequenceEqual(qs, [\n+            {'title': self.book1.title, 'favorite_book__pk': self.book2.pk},\n+            {'title': self.book1.title, 'favorite_book__pk': self.book3.pk},\n+            {'title': self.book4.title, 'favorite_book__pk': self.book2.pk},\n+            {'title': self.book4.title, 'favorite_book__pk': self.book3.pk},\n+            {'title': self.book2.title, 'favorite_book__pk': None},\n+            {'title': self.book3.title, 'favorite_book__pk': None},\n+        ])\n+\n+    def test_nested_chained_relations(self):\n+        qs = Author.objects.annotate(\n+            my_books=FilteredRelation(\n+                'book', condition=Q(book__title__icontains='book by'),\n+            ),\n+            preferred_by_authors=FilteredRelation(\n+                'my_books__preferred_by_authors',\n+                condition=Q(my_books__preferred_by_authors__name='Alice'),\n+            ),\n+        ).annotate(\n+            author=F('name'),\n+            book_title=F('my_books__title'),\n+            preferred_by_author_pk=F('preferred_by_authors'),\n+        ).order_by('author', 'book_title', 'preferred_by_author_pk')\n+        self.assertQuerysetEqual(qs, [\n+            ('Alice', 'The book by Alice', None),\n+            ('Jane', 'The book by Jane A', self.author1.pk),\n+            ('Jane', 'The book by Jane B', self.author1.pk),\n+        ], lambda x: (x.author, x.book_title, x.preferred_by_author_pk))\n+\n+    def test_deep_nested_foreign_key(self):\n+        qs = Book.objects.annotate(\n+            author_favorite_book_editor=FilteredRelation(\n+                'author__favorite_books__editor',\n+                condition=Q(author__favorite_books__title__icontains='Jane A'),\n+            ),\n+        ).filter(\n+            author_favorite_book_editor__isnull=False,\n+        ).select_related(\n+            'author_favorite_book_editor',\n+        ).order_by('pk', 'author_favorite_book_editor__pk')\n+        with self.assertNumQueries(1):\n+            self.assertQuerysetEqual(qs, [\n+                (self.book1, self.editor_b),\n+                (self.book4, self.editor_b),\n+            ], lambda x: (x, x.author_favorite_book_editor))\n+\n+    def test_relation_name_lookup(self):\n         msg = (\n-            \"FilteredRelation's condition doesn't support nested relations \"\n-            \"(got 'author__favorite_books__author').\"\n+            \"FilteredRelation's relation_name cannot contain lookups (got \"\n+            \"'book__title__icontains').\"\n         )\n         with self.assertRaisesMessage(ValueError, msg):\n-            list(Book.objects.annotate(\n-                alice_favorite_books=FilteredRelation(\n-                    'author__favorite_books',\n-                    condition=Q(author__favorite_books__author=self.author1),\n-                )\n-            ))\n+            Author.objects.annotate(\n+                book_title=FilteredRelation(\n+                    'book__title__icontains',\n+                    condition=Q(book__title='Poem by Alice'),\n+                ),\n+            )\n+\n+    def test_condition_outside_relation_name(self):\n+        msg = (\n+            \"FilteredRelation's condition doesn't support relations outside \"\n+            \"the 'book__editor' (got 'book__author__name__icontains').\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Author.objects.annotate(\n+                book_editor=FilteredRelation(\n+                    'book__editor',\n+                    condition=Q(book__author__name__icontains='book'),\n+                ),\n+            )\n \n-    def test_with_foreign_key_on_condition_error(self):\n+    def test_condition_deeper_relation_name(self):\n         msg = (\n             \"FilteredRelation's condition doesn't support nested relations \"\n-            \"(got 'book__editor__name__icontains').\"\n+            \"deeper than the relation_name (got \"\n+            \"'book__editor__name__icontains' for 'book').\"\n         )\n         with self.assertRaisesMessage(ValueError, msg):\n-            list(Author.objects.annotate(\n-                book_edited_by_b=FilteredRelation('book', condition=Q(book__editor__name__icontains='b')),\n-            ))\n+            Author.objects.annotate(\n+                book_editor=FilteredRelation(\n+                    'book',\n+                    condition=Q(book__editor__name__icontains='b'),\n+                ),\n+            )\n \n     def test_with_empty_relation_name_error(self):\n         with self.assertRaisesMessage(ValueError, 'relation_name cannot be empty.'):\n@@ -424,3 +551,123 @@ def test_aggregate(self):\n         ).distinct()\n         self.assertEqual(qs.count(), 1)\n         self.assertSequenceEqual(qs.annotate(total=Count('pk')).values('total'), [{'total': 1}])\n+\n+\n+class FilteredRelationAnalyticalAggregationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        author = Author.objects.create(name='Author')\n+        editor = Editor.objects.create(name='Editor')\n+        cls.book1 = Book.objects.create(\n+            title='Poem by Alice',\n+            editor=editor,\n+            author=author,\n+        )\n+        cls.book2 = Book.objects.create(\n+            title='The book by Jane A',\n+            editor=editor,\n+            author=author,\n+        )\n+        cls.book3 = Book.objects.create(\n+            title='The book by Jane B',\n+            editor=editor,\n+            author=author,\n+        )\n+        cls.seller1 = Seller.objects.create(name='Seller 1')\n+        cls.seller2 = Seller.objects.create(name='Seller 2')\n+        cls.usd = Currency.objects.create(currency='USD')\n+        cls.eur = Currency.objects.create(currency='EUR')\n+        cls.sales_date1 = date(2020, 7, 6)\n+        cls.sales_date2 = date(2020, 7, 7)\n+        ExchangeRate.objects.bulk_create([\n+            ExchangeRate(\n+                rate_date=cls.sales_date1,\n+                from_currency=cls.usd,\n+                to_currency=cls.eur,\n+                rate=0.40,\n+            ),\n+            ExchangeRate(\n+                rate_date=cls.sales_date1,\n+                from_currency=cls.eur,\n+                to_currency=cls.usd,\n+                rate=1.60,\n+            ),\n+            ExchangeRate(\n+                rate_date=cls.sales_date2,\n+                from_currency=cls.usd,\n+                to_currency=cls.eur,\n+                rate=0.50,\n+            ),\n+            ExchangeRate(\n+                rate_date=cls.sales_date2,\n+                from_currency=cls.eur,\n+                to_currency=cls.usd,\n+                rate=1.50,\n+            ),\n+            ExchangeRate(\n+                rate_date=cls.sales_date2,\n+                from_currency=cls.usd,\n+                to_currency=cls.usd,\n+                rate=1.00,\n+            ),\n+        ])\n+        BookDailySales.objects.bulk_create([\n+            BookDailySales(\n+                book=cls.book1,\n+                sale_date=cls.sales_date1,\n+                currency=cls.usd,\n+                sales=100.00,\n+                seller=cls.seller1,\n+            ),\n+            BookDailySales(\n+                book=cls.book2,\n+                sale_date=cls.sales_date1,\n+                currency=cls.eur,\n+                sales=200.00,\n+                seller=cls.seller1,\n+            ),\n+            BookDailySales(\n+                book=cls.book1,\n+                sale_date=cls.sales_date2,\n+                currency=cls.usd,\n+                sales=50.00,\n+                seller=cls.seller2,\n+            ),\n+            BookDailySales(\n+                book=cls.book2,\n+                sale_date=cls.sales_date2,\n+                currency=cls.eur,\n+                sales=100.00,\n+                seller=cls.seller2,\n+            ),\n+        ])\n+\n+    def test_aggregate(self):\n+        tests = [\n+            Q(daily_sales__sale_date__gte=self.sales_date2),\n+            ~Q(daily_sales__seller=self.seller1),\n+        ]\n+        for condition in tests:\n+            with self.subTest(condition=condition):\n+                qs = Book.objects.annotate(\n+                    recent_sales=FilteredRelation('daily_sales', condition=condition),\n+                    recent_sales_rates=FilteredRelation(\n+                        'recent_sales__currency__rates_from',\n+                        condition=Q(\n+                            recent_sales__currency__rates_from__rate_date=F('recent_sales__sale_date'),\n+                            recent_sales__currency__rates_from__to_currency=self.usd,\n+                        ),\n+                    ),\n+                ).annotate(\n+                    sales_sum=Sum(\n+                        F('recent_sales__sales') * F('recent_sales_rates__rate'),\n+                        output_field=DecimalField(),\n+                    ),\n+                ).values('title', 'sales_sum').order_by(\n+                    F('sales_sum').desc(nulls_last=True),\n+                )\n+                self.assertSequenceEqual(qs, [\n+                    {'title': self.book2.title, 'sales_sum': Decimal(150.00)},\n+                    {'title': self.book1.title, 'sales_sum': Decimal(50.00)},\n+                    {'title': self.book3.title, 'sales_sum': None},\n+                ])\n",
  "problem_statement": "Support nested relations in FilteredRelation's condition\nDescription\n\t\nAs the documentation explains, FilteredRelation's condition do not support nested relations:\n\t>>> Restaurant.objects.annotate(\n\t...\tpizzas_with_toppings_startswith_n=FilteredRelation(\n\t...\t\t'pizzas__toppings',\n\t...\t\tcondition=Q(pizzas__toppings__name__startswith='n'),\n\t...\t),\n\t... )\n\tTraceback (most recent call last):\n\t...\n\tValueError: FilteredRelation's condition doesn't support nested relations (got 'pizzas__toppings__name__startswith').\nIt would be great to support nested relations in FilteredRelation's condition (I encountered this limitation multiple times recently).\n",
  "hints_text": "Nicolas, do you remember the reason for the restriction?\nI simply couldn't find a way to make it work, I don't remember exactly why and I didn't have real incitement to do it at that time. The explicit ValueError is more a gate keeper preventing users to follow a path we know will fail cryptically. My suggestion would be start writing some tests, removing the ValueError and see how it goes. My priority at that time was to land the feature even with partial support. Now that a big chunk is there, we can more easily improve the support so nested relations is supported. Unfortunately I'm at the moment away from django stack, so I Invite you, Thomas , to give it a try, if it is important for you. You might go further than I could.\nIf I remember correctly there was some weirdness when dealing with exclusion of such nested filtered relations.\nAre you support this feature in next version or not? thank's in advance\n#30349 addressed an issue when using exclude with FilteredRelation that might explain the ValueError raised when trying to add support for nested relations.\nNoumbissi, just wondering if you're working on this? And if so, how it's progressing? This problem (of needing to join to a subquery or add additional conditions to a join that is nested more than once) seems to come up quite a bit. I've posted my own question on StackOverflow: ​https://stackoverflow.com/questions/58895627/django-queryset-with-aggregation-and-filtered-left-join-multiple-levels-deep In the absence of this feature, it'd be nice to have someone intimately familiar with the ORM propose how they would tackle this as I haven't seen a \"this feature is not yet available, but as a workaround, try this instead..\". Would be very helpful.",
  "created_at": "2020-07-09T09:33:50Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_aggregate (filtered_relation.tests.FilteredRelationAnalyticalAggregationTests)\", \"test_aggregate (filtered_relation.tests.FilteredRelationAggregationTests)\", \"test_condition_deeper_relation_name (filtered_relation.tests.FilteredRelationTests)\", \"test_condition_outside_relation_name (filtered_relation.tests.FilteredRelationTests)\", \"test_deep_nested_foreign_key (filtered_relation.tests.FilteredRelationTests)\", \"test_nested_chained_relations (filtered_relation.tests.FilteredRelationTests)\", \"test_nested_foreign_key (filtered_relation.tests.FilteredRelationTests)\", \"test_nested_foreign_key_filtered_base_object (filtered_relation.tests.FilteredRelationTests)\", \"test_nested_foreign_key_nested_field (filtered_relation.tests.FilteredRelationTests)\", \"test_nested_m2m_filtered (filtered_relation.tests.FilteredRelationTests)\", \"test_relation_name_lookup (filtered_relation.tests.FilteredRelationTests)\"]",
  "PASS_TO_PASS": "[\"test_as_subquery (filtered_relation.tests.FilteredRelationTests)\", \"test_defer (filtered_relation.tests.FilteredRelationTests)\", \"test_difference (filtered_relation.tests.FilteredRelationTests)\", \"test_eq (filtered_relation.tests.FilteredRelationTests)\", \"test_exclude_relation_with_join (filtered_relation.tests.FilteredRelationTests)\", \"test_extra (filtered_relation.tests.FilteredRelationTests)\", \"test_internal_queryset_alias_mapping (filtered_relation.tests.FilteredRelationTests)\", \"test_intersection (filtered_relation.tests.FilteredRelationTests)\", \"test_multiple_times (filtered_relation.tests.FilteredRelationTests)\", \"test_only_not_supported (filtered_relation.tests.FilteredRelationTests)\", \"test_select_for_update (filtered_relation.tests.FilteredRelationTests)\", \"test_select_related (filtered_relation.tests.FilteredRelationTests)\", \"test_select_related_foreign_key (filtered_relation.tests.FilteredRelationTests)\", \"test_select_related_multiple (filtered_relation.tests.FilteredRelationTests)\", \"test_select_related_with_empty_relation (filtered_relation.tests.FilteredRelationTests)\", \"test_union (filtered_relation.tests.FilteredRelationTests)\", \"test_values (filtered_relation.tests.FilteredRelationTests)\", \"test_values_list (filtered_relation.tests.FilteredRelationTests)\", \"test_with_condition_as_expression_error (filtered_relation.tests.FilteredRelationTests)\", \"test_with_empty_relation_name_error (filtered_relation.tests.FilteredRelationTests)\", \"test_with_exclude (filtered_relation.tests.FilteredRelationTests)\", \"test_with_generic_foreign_key (filtered_relation.tests.FilteredRelationTests)\", \"test_with_join (filtered_relation.tests.FilteredRelationTests)\", \"test_with_join_and_complex_condition (filtered_relation.tests.FilteredRelationTests)\", \"test_with_m2m (filtered_relation.tests.FilteredRelationTests)\", \"test_with_m2m_deep (filtered_relation.tests.FilteredRelationTests)\", \"test_with_m2m_multijoin (filtered_relation.tests.FilteredRelationTests)\", \"test_with_multiple_filter (filtered_relation.tests.FilteredRelationTests)\", \"test_with_prefetch_related (filtered_relation.tests.FilteredRelationTests)\", \"test_without_join (filtered_relation.tests.FilteredRelationTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.646030",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}