{
  "repo": "django/django",
  "instance_id": "django__django-15689",
  "base_commit": "798b6c23ee52c675dd0f0e233c50cddd7ff15657",
  "patch": "diff --git a/django/middleware/common.py b/django/middleware/common.py\n--- a/django/middleware/common.py\n+++ b/django/middleware/common.py\n@@ -46,19 +46,18 @@ def process_request(self, request):\n \n         # Check for a redirect based on settings.PREPEND_WWW\n         host = request.get_host()\n-        must_prepend = settings.PREPEND_WWW and host and not host.startswith(\"www.\")\n-        redirect_url = (\"%s://www.%s\" % (request.scheme, host)) if must_prepend else \"\"\n \n-        # Check if a slash should be appended\n-        if self.should_redirect_with_slash(request):\n-            path = self.get_full_path_with_slash(request)\n-        else:\n-            path = request.get_full_path()\n-\n-        # Return a redirect if necessary\n-        if redirect_url or path != request.get_full_path():\n-            redirect_url += path\n-            return self.response_redirect_class(redirect_url)\n+        if settings.PREPEND_WWW and host and not host.startswith(\"www.\"):\n+            # Check if we also need to append a slash so we can do it all\n+            # with a single redirect. (This check may be somewhat expensive,\n+            # so we only do it if we already know we're sending a redirect,\n+            # or in process_response if we get a 404.)\n+            if self.should_redirect_with_slash(request):\n+                path = self.get_full_path_with_slash(request)\n+            else:\n+                path = request.get_full_path()\n+\n+            return self.response_redirect_class(f\"{request.scheme}://www.{host}{path}\")\n \n     def should_redirect_with_slash(self, request):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/middleware/tests.py b/tests/middleware/tests.py\n--- a/tests/middleware/tests.py\n+++ b/tests/middleware/tests.py\n@@ -80,7 +80,11 @@ def test_append_slash_redirect(self):\n         \"\"\"\n         request = self.rf.get(\"/slash\")\n         r = CommonMiddleware(get_response_empty).process_request(request)\n+        self.assertIsNone(r)\n+        response = HttpResponseNotFound()\n+        r = CommonMiddleware(get_response_empty).process_response(request, response)\n         self.assertEqual(r.status_code, 301)\n+        self.assertEqual(r.url, \"/slash/\")\n \n     @override_settings(APPEND_SLASH=True)\n     def test_append_slash_redirect_querystring(self):\n@@ -164,6 +168,9 @@ def test_append_slash_leading_slashes(self):\n         # Use 4 slashes because of RequestFactory behavior.\n         request = self.rf.get(\"////evil.com/security\")\n         r = CommonMiddleware(get_response_404).process_request(request)\n+        self.assertIsNone(r)\n+        response = HttpResponseNotFound()\n+        r = CommonMiddleware(get_response_404).process_response(request, response)\n         self.assertEqual(r.status_code, 301)\n         self.assertEqual(r.url, \"/%2Fevil.com/security/\")\n         r = CommonMiddleware(get_response_404)(request)\n@@ -354,6 +361,9 @@ def test_non_ascii_query_string_does_not_crash(self):\n         request = self.rf.get(\"/slash\")\n         request.META[\"QUERY_STRING\"] = \"drink=café\"\n         r = CommonMiddleware(get_response_empty).process_request(request)\n+        self.assertIsNone(r)\n+        response = HttpResponseNotFound()\n+        r = CommonMiddleware(get_response_empty).process_response(request, response)\n         self.assertEqual(r.status_code, 301)\n \n     def test_response_redirect_class(self):\n",
  "problem_statement": "APPEND_SLASH adds significant latency to all requests not ending in / (even if successful)\nDescription\n\t\nOriginally, APPEND_SLASH worked by looking for 404 responses and replacing them with redirects, so as not to unnecessarily impact the performance of successful responses. However, commit 9390da7fb6e251eaa9a785692f987296cb14523f in 1.9.5/1.10 changed this to check should_redirect_with_slash() on every request, resulting in a moderately expensive extra urlconf lookup for every request not ending with /, whether or not it succeeds as written.\nThis performance impact was not considered in the commit message or the corresponding ticket #26293, so I assume it was an oversight. That ticket asserted “This doesn't really make sense, since the two settings are not interdependent”, which is incorrect—performance was the reason for the interdependence.\nThe overhead was found to be significant enough in Zulip to merit ​subclassing CommonMiddleware to skip it in certain conditions.\nHere’s a ​minimal test project with an exaggerated number of routes so the overhead can be easily observed.\n$ ./manage.py runserver\n$ wrk http://127.0.0.1:8000/url9999\nRunning 10s test @ http://127.0.0.1:8000/url9999\n 2 threads and 10 connections\n Thread Stats Avg\t Stdev\t Max +/- Stdev\n\tLatency 232.40ms 73.85ms 570.86ms 69.16%\n\tReq/Sec\t21.70\t 9.47\t40.00\t 63.35%\n 426 requests in 10.01s, 64.90KB read\nRequests/sec:\t 42.56\nTransfer/sec:\t 6.48KB\n$ sed -i 's/# APPEND_SLASH = False/APPEND_SLASH = False/' slash_test_settings.py\n$ wrk http://127.0.0.1:8000/url9999\nRunning 10s test @ http://127.0.0.1:8000/url9999\n 2 threads and 10 connections\n Thread Stats Avg\t Stdev\t Max +/- Stdev\n\tLatency 139.80ms 52.07ms 352.19ms 69.09%\n\tReq/Sec\t36.46\t 12.23\t60.00\t 58.12%\n 714 requests in 10.01s, 108.79KB read\nRequests/sec:\t 71.32\nTransfer/sec:\t 10.87KB\n",
  "hints_text": "The Zulip middleware there... def should_redirect_with_slash(self, request: HttpRequest) -> bool: if settings.RUNNING_INSIDE_TORNADO: return False return super().should_redirect_with_slash(request) ... 🤔 Looks like that would be simpler just doing APPEND_SLASH = not RUNNING_INSIDE_TORNADO in the settings file, since should_redirect_with_slash() would always immediately return False in that case. ... extra urlconf lookup for every request not ending with /, whether or not it succeeds as written. If you're not normalising URLs, I wonder if you don't want APPEND_SLASH = False anyway? ...performance impact was not considered... The assumption is that URLs without / are likely incorrect, so succeeding as written should be rare, i.e. not performance sensitive. I'm inclined to say wontfix — you're welcome to disable APPEND_SLASH, or implement a response only version of the middleware — or needsinfo at least pending a suggested patch (that doesn't break anything).\nWe have a mix of URLs with / (most user-facing HTML) and URLs without / (REST API with compatibility considerations, access-controlled uploaded files with given names, SAML metadata.xml, SCIM endpoints at specified paths, static content in development). RUNNING_INSIDE_TORNADO is not the right test; it was just an easy workaround for one part of the problem. Of course we can fork CommonMiddleware in an arbitrary Zulip-specific way, but we’d prefer to improve Django for everyone, and this seems like a clear opportunity for that. I don’t think it’s reasonable to assume that URLs without / are likely incorrect. Many URLs are required to be without / for compatibility or convention or other technical reasons. I’m typing this very comment at a URL without /. I’ve done some more investigation with the help of git bisect, and I found that the logging problem #26293 that was targeted by 9390da7fb6e251eaa9a785692f987296cb14523f was subsequently addressed more completely by 40b69607c751c4afa453edfd41d2ed155e58187e (#26504). Therefore, we can simply revert 9390da7fb6e251eaa9a785692f987296cb14523f to improve performance without regressing #26293. Everybody wins!\nSubmitted a patch at ​https://github.com/django/django/pull/15689.\nOK, thanks for the follow-up, and PR Anders. I'll Accept for review so we can get some eyes on it. (I didn't think it through 100% yet, or look at the reasons for the previous changes, but I have mentally queried at times the reason for the APPEND_SLASH check in process request, so I'm happy to have a further look in any case.)\nThis looks correct to me. #24720 (1.9) originally addressed the performance issue of the check in process_request. This looks like it regressed in #26293 (1.10) which handled the orthogonal logging issue. The test changes in the PR here change to verify the whole middleware behaviour, rather than just process_response. That looks OK. I'll mark RFC, and leave for a period to allow others to check if they wish, since CommonMiddleware is always sensitive.",
  "created_at": "2022-05-12T22:37:00Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"Paths starting with two slashes are escaped to prevent open redirects.\", \"Regression test for #15152\"]",
  "PASS_TO_PASS": "[\"GZipMiddleware allows 304 Not Modified responses.\", \"GZipMiddleware makes a strong ETag weak.\", \"GZipMiddleware doesn't modify a weak ETag.\", \"If the X_FRAME_OPTIONS setting is not set then it defaults to\", \"The X_FRAME_OPTIONS setting can be set to DENY to have the middleware\", \"If the X-Frame-Options header is already set then the middleware does\", \"The XFrameOptionsMiddleware method that determines the X-Frame-Options\", \"If the response has an xframe_options_exempt attribute set to False\", \"The X_FRAME_OPTIONS setting can be set to SAMEORIGIN to have the\", \"Compression results are the same for the same content and don't\", \"Compression is performed on FileResponse.\", \"Compression is performed on responses with a status other than 200\", \"Compression is performed on responses with compressible content.\", \"Compression is performed on responses with streaming content.\", \"Compression is performed on responses with streaming Unicode content.\", \"Compression isn't performed on responses that are already compressed.\", \"Compression isn't performed on responses with incompressible content.\", \"Compression isn't performed on responses with short content.\", \"Disabling append slash functionality should leave slashless URLs alone.\", \"URLs with slashes should go unmolested.\", \"While in debug mode, an exception is raised with a warning\", \"Views marked with @no_append_slash should be left alone.\", \"URLs which require quoting should be redirected to their slash version.\", \"APPEND_SLASH should redirect slashless URLs to a valid pattern.\", \"APPEND_SLASH should preserve querystrings when redirecting.\", \"APPEND_SLASH should append slash to path when redirecting a request\", \"Matches to explicit slashless URLs should go unmolested.\", \"APPEND_SLASH should not redirect to unknown resources.\", \"test_content_length_header_added (middleware.tests.CommonMiddlewareTest)\", \"test_content_length_header_not_added_for_streaming_response (middleware.tests.CommonMiddlewareTest)\", \"test_content_length_header_not_changed (middleware.tests.CommonMiddlewareTest)\", \"test_disallowed_user_agents (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_have_slash (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_have_slash_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_slashless (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_slashless_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_response_redirect_class (middleware.tests.CommonMiddlewareTest)\", \"test_response_redirect_class_subclass (middleware.tests.CommonMiddlewareTest)\", \"test_etag_extended_cache_control (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_client_error (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_last_modified_in_the_future (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_last_modified_in_the_past (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_no_last_modified (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_redirect (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_same_last_modified (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_client_error (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_different_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_no_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_redirect (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_same_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_middleware_calculates_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_middleware_wont_overwrite_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_etag_no_store_cache (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_etag_response_empty_content (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_etag_streaming_response (middleware.tests.ConditionalGetMiddlewareTest)\", \"ConditionalGetMiddleware shouldn't compute and return an ETag on a\", \"test_no_if_modified_since_and_last_modified (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_if_none_match_and_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"ConditionalGetMiddleware shouldn't return a conditional response on an\", \"The 304 Not Modified response should include only the headers required\", \"test_404_error_reporting (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_404_error_reporting_ignored_url (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_404_error_reporting_no_referer (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_custom_request_checker (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"Some bots set the referer to the current URL to avoid being blocked by\", \"test_referer_equal_to_requested_url_on_another_domain (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_referer_equal_to_requested_url_without_trailing_slash_with_append_slash (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_referer_equal_to_requested_url_without_trailing_slash_with_no_append_slash (middleware.tests.BrokenLinkEmailsMiddlewareTest)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.737722",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}