{
  "repo": "django/django",
  "instance_id": "django__django-14124",
  "base_commit": "4a80d0f22021bb0af842f038eba45958e9576bec",
  "patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -20,6 +20,9 @@\n \n \n def get_view_name(view_func):\n+    if hasattr(view_func, 'view_class'):\n+        klass = view_func.view_class\n+        return f'{klass.__module__}.{klass.__qualname__}'\n     mod_name = view_func.__module__\n     view_name = getattr(view_func, '__qualname__', view_func.__class__.__name__)\n     return mod_name + '.' + view_name\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -378,7 +378,9 @@ def lookup_str(self):\n         callback = self.callback\n         if isinstance(callback, functools.partial):\n             callback = callback.func\n-        if not hasattr(callback, '__name__'):\n+        if hasattr(callback, 'view_class'):\n+            callback = callback.view_class\n+        elif not hasattr(callback, '__name__'):\n             return callback.__module__ + \".\" + callback.__class__.__name__\n         return callback.__module__ + \".\" + callback.__qualname__\n \ndiff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -517,7 +517,9 @@ def technical_404_response(request, exception):\n     else:\n         obj = resolver_match.func\n \n-        if hasattr(obj, '__name__'):\n+        if hasattr(obj, 'view_class'):\n+            caller = obj.view_class\n+        elif hasattr(obj, '__name__'):\n             caller = obj.__name__\n         elif hasattr(obj, '__class__') and hasattr(obj.__class__, '__name__'):\n             caller = obj.__class__.__name__\ndiff --git a/django/views/generic/base.py b/django/views/generic/base.py\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -1,5 +1,4 @@\n import logging\n-from functools import update_wrapper\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import (\n@@ -71,12 +70,16 @@ def view(request, *args, **kwargs):\n         view.view_class = cls\n         view.view_initkwargs = initkwargs\n \n-        # take name and docstring from class\n-        update_wrapper(view, cls, updated=())\n+        # __name__ and __qualname__ are intentionally left unchanged as\n+        # view_class should be used to robustly determine the name of the view\n+        # instead.\n+        view.__doc__ = cls.__doc__\n+        view.__module__ = cls.__module__\n+        view.__annotations__ = cls.dispatch.__annotations__\n+        # Copy possible attributes set by decorators, e.g. @csrf_exempt, from\n+        # the dispatch method.\n+        view.__dict__.update(cls.dispatch.__dict__)\n \n-        # and possible attributes set by decorators\n-        # like csrf_exempt from dispatch\n-        update_wrapper(view, cls.dispatch, assigned=())\n         return view\n \n     def setup(self, request, *args, **kwargs):\n",
  "test_patch": "diff --git a/tests/check_framework/test_urls.py b/tests/check_framework/test_urls.py\n--- a/tests/check_framework/test_urls.py\n+++ b/tests/check_framework/test_urls.py\n@@ -167,20 +167,41 @@ def test_ending_with_dollar(self):\n \n class CheckCustomErrorHandlersTests(SimpleTestCase):\n \n-    @override_settings(ROOT_URLCONF='check_framework.urls.bad_error_handlers')\n-    def test_bad_handlers(self):\n+    @override_settings(\n+        ROOT_URLCONF='check_framework.urls.bad_function_based_error_handlers',\n+    )\n+    def test_bad_function_based_handlers(self):\n         result = check_url_config(None)\n         self.assertEqual(len(result), 4)\n         for code, num_params, error in zip([400, 403, 404, 500], [2, 2, 2, 1], result):\n             with self.subTest('handler{}'.format(code)):\n                 self.assertEqual(error, Error(\n-                    \"The custom handler{} view \"\n-                    \"'check_framework.urls.bad_error_handlers.bad_handler' \"\n+                    \"The custom handler{} view 'check_framework.urls.\"\n+                    \"bad_function_based_error_handlers.bad_handler' \"\n                     \"does not take the correct number of arguments (request{}).\"\n                     .format(code, ', exception' if num_params == 2 else ''),\n                     id='urls.E007',\n                 ))\n \n+    @override_settings(\n+        ROOT_URLCONF='check_framework.urls.bad_class_based_error_handlers',\n+    )\n+    def test_bad_class_based_handlers(self):\n+        result = check_url_config(None)\n+        self.assertEqual(len(result), 4)\n+        for code, num_params, error in zip([400, 403, 404, 500], [2, 2, 2, 1], result):\n+            with self.subTest('handler%s' % code):\n+                self.assertEqual(error, Error(\n+                    \"The custom handler%s view 'check_framework.urls.\"\n+                    \"bad_class_based_error_handlers.HandlerView.as_view.\"\n+                    \"<locals>.view' does not take the correct number of \"\n+                    \"arguments (request%s).\" % (\n+                        code,\n+                        ', exception' if num_params == 2 else '',\n+                    ),\n+                    id='urls.E007',\n+                ))\n+\n     @override_settings(ROOT_URLCONF='check_framework.urls.bad_error_handlers_invalid_path')\n     def test_bad_handlers_invalid_path(self):\n         result = check_url_config(None)\n@@ -204,8 +225,17 @@ def test_bad_handlers_invalid_path(self):\n                     id='urls.E008',\n                 ))\n \n-    @override_settings(ROOT_URLCONF='check_framework.urls.good_error_handlers')\n-    def test_good_handlers(self):\n+    @override_settings(\n+        ROOT_URLCONF='check_framework.urls.good_function_based_error_handlers',\n+    )\n+    def test_good_function_based_handlers(self):\n+        result = check_url_config(None)\n+        self.assertEqual(result, [])\n+\n+    @override_settings(\n+        ROOT_URLCONF='check_framework.urls.good_class_based_error_handlers',\n+    )\n+    def test_good_class_based_handlers(self):\n         result = check_url_config(None)\n         self.assertEqual(result, [])\n \ndiff --git a/tests/check_framework/urls/bad_class_based_error_handlers.py b/tests/check_framework/urls/bad_class_based_error_handlers.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/check_framework/urls/bad_class_based_error_handlers.py\n@@ -0,0 +1,16 @@\n+urlpatterns = []\n+\n+\n+class HandlerView:\n+    @classmethod\n+    def as_view(cls):\n+        def view():\n+            pass\n+\n+        return view\n+\n+\n+handler400 = HandlerView.as_view()\n+handler403 = HandlerView.as_view()\n+handler404 = HandlerView.as_view()\n+handler500 = HandlerView.as_view()\ndiff --git a/tests/check_framework/urls/bad_error_handlers.py b/tests/check_framework/urls/bad_function_based_error_handlers.py\nsimilarity index 100%\nrename from tests/check_framework/urls/bad_error_handlers.py\nrename to tests/check_framework/urls/bad_function_based_error_handlers.py\ndiff --git a/tests/check_framework/urls/good_class_based_error_handlers.py b/tests/check_framework/urls/good_class_based_error_handlers.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/check_framework/urls/good_class_based_error_handlers.py\n@@ -0,0 +1,9 @@\n+from django.views.generic import View\n+\n+urlpatterns = []\n+\n+\n+handler400 = View.as_view()\n+handler403 = View.as_view()\n+handler404 = View.as_view()\n+handler500 = View.as_view()\ndiff --git a/tests/check_framework/urls/good_error_handlers.py b/tests/check_framework/urls/good_function_based_error_handlers.py\nsimilarity index 100%\nrename from tests/check_framework/urls/good_error_handlers.py\nrename to tests/check_framework/urls/good_function_based_error_handlers.py\ndiff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -172,12 +172,16 @@ def test_calling_more_than_once(self):\n \n     def test_class_attributes(self):\n         \"\"\"\n-        The callable returned from as_view() has proper\n-        docstring, name and module.\n-        \"\"\"\n-        self.assertEqual(SimpleView.__doc__, SimpleView.as_view().__doc__)\n-        self.assertEqual(SimpleView.__name__, SimpleView.as_view().__name__)\n-        self.assertEqual(SimpleView.__module__, SimpleView.as_view().__module__)\n+        The callable returned from as_view() has proper special attributes.\n+        \"\"\"\n+        cls = SimpleView\n+        view = cls.as_view()\n+        self.assertEqual(view.__doc__, cls.__doc__)\n+        self.assertEqual(view.__name__, 'view')\n+        self.assertEqual(view.__module__, cls.__module__)\n+        self.assertEqual(view.__qualname__, f'{cls.as_view.__qualname__}.<locals>.view')\n+        self.assertEqual(view.__annotations__, cls.dispatch.__annotations__)\n+        self.assertFalse(hasattr(view, '__wrapped__'))\n \n     def test_dispatch_decoration(self):\n         \"\"\"\n",
  "problem_statement": "handler500 as a Class-based view raises SystemCheckError\nDescription\n\t \n\t\t(last modified by Daniyal Abbasi)\n\t \nSetting handler500 as a Class-Based view raises the following error which running checks.\n$ python manage.py check\nSystemCheckError: System check identified some issues:\nERRORS:\n?: (urls.E007) The custom handler500 view 'path.to.my.MyView' does not take the correct number of arguments (request).\nIn my root urls.py, I have the following configuration,\nhandler404 = MyView.as_view()\nhandler500 = MyView.as_view()\nI believe this is due to the function _check_custom_error_handlers in django/urls/resolver.py. The signature variable in this function is expected to match (request, exception) for all handlers except for handler500 which is expected to have only (request). A positional argument, template_name is also present. \nWhile using class based views, we get two positional arguments (self, request) and then it recieves *args and * *kwargs. The check is permitting other handlers as the number of arguments coincidentally match. \nI suggest a fix in the _check_custom_error_handlers which first checks if the handler* are function based or class based, and then it preceed the check with the appropriate number of arguments.\n",
  "hints_text": "​PR. OK, yes, using a CBV here is reasonable. It would be nice if the check handled that sensibly. Thanks.\nMarking as \"needs improvement\" per ​Adam's comment.\nAn update ​PR has been created, as suggested in the comments of the previous PR!",
  "created_at": "2021-03-14T14:57:56Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"The callable returned from as_view() has proper special attributes.\", \"test_good_class_based_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\"]",
  "PASS_TO_PASS": "[\"We want to makes sure that if you use a template mixin, but forget the\", \"test_get_context_data_super (generic_views.test_base.GetContextDataTest)\", \"test_object_at_custom_name_in_context_data (generic_views.test_base.GetContextDataTest)\", \"test_object_in_get_context_data (generic_views.test_base.GetContextDataTest)\", \"test_overwrite_queryset (generic_views.test_base.UseMultipleObjectMixinTest)\", \"test_use_queryset_from_view (generic_views.test_base.UseMultipleObjectMixinTest)\", \"Test a view only has args, kwargs & request once `as_view`\", \"Test a view can only be called once.\", \"It should be possible to use the view by directly instantiating it\", \"Attributes set by decorators on the dispatch method\", \"Test a view which supplies a GET method also responds correctly to HEAD.\", \"Test a view which only allows both GET and POST.\", \"Test a view which only allows GET doesn't allow other methods.\", \"Test a view which supplies no GET method responds to HEAD with HTTP 405.\", \"View arguments must be predefined on the class and can't\", \"A view can't be accidentally instantiated before deployment\", \"test_not_calling_parent_setup_error (generic_views.test_base.ViewTest)\", \"Views respond to HTTP OPTIONS requests with an Allow header\", \"A view implementing GET and POST allows GET, HEAD, and POST.\", \"A view implementing GET allows GET and HEAD.\", \"A view implementing POST allows POST.\", \"test_overridden_setup (generic_views.test_base.ViewTest)\", \"The edge case of a http request that spoofs an existing method name is caught.\", \"test_setup_adds_args_kwargs_request (generic_views.test_base.ViewTest)\", \"test_setup_get_and_head (generic_views.test_base.ViewTest)\", \"test_bad_class_based_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_bad_function_based_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_bad_handlers_invalid_path (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_good_function_based_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_empty_string_no_errors (check_framework.test_urls.CheckURLSettingsTests)\", \"test_media_url_no_slash (check_framework.test_urls.CheckURLSettingsTests)\", \"test_slash_no_errors (check_framework.test_urls.CheckURLSettingsTests)\", \"test_static_url_double_slash_allowed (check_framework.test_urls.CheckURLSettingsTests)\", \"test_static_url_no_slash (check_framework.test_urls.CheckURLSettingsTests)\", \"test_beginning_with_caret (check_framework.test_urls.UpdatedToPathTests)\", \"test_contains_re_named_group (check_framework.test_urls.UpdatedToPathTests)\", \"test_ending_with_dollar (check_framework.test_urls.UpdatedToPathTests)\", \"Default is a temporary redirect\", \"It should be possible to use the view without going through .as_view()\", \"GET arguments can be included in the redirected URL\", \"GET arguments can be URL-encoded when included in the redirected URL\", \"Named pattern parameter should reverse to the matching pattern\", \"test_named_url_pattern_using_args (generic_views.test_base.RedirectViewTest)\", \"Without any configuration, returns HTTP 410 GONE\", \"Redirection URLs can be parameterized\", \"Permanent redirects are an option\", \"regression for #16705\", \"Temporary redirects are an option\", \"test_beginning_with_slash (check_framework.test_urls.CheckUrlConfigTests)\", \"test_beginning_with_slash_append_slash (check_framework.test_urls.CheckUrlConfigTests)\", \"test_check_non_unique_namespaces (check_framework.test_urls.CheckUrlConfigTests)\", \"test_check_resolver_recursive (check_framework.test_urls.CheckUrlConfigTests)\", \"test_check_unique_namespaces (check_framework.test_urls.CheckUrlConfigTests)\", \"test_contains_included_tuple (check_framework.test_urls.CheckUrlConfigTests)\", \"test_contains_tuple_not_url_instance (check_framework.test_urls.CheckUrlConfigTests)\", \"test_get_warning_for_invalid_pattern_other (check_framework.test_urls.CheckUrlConfigTests)\", \"test_get_warning_for_invalid_pattern_string (check_framework.test_urls.CheckUrlConfigTests)\", \"test_get_warning_for_invalid_pattern_tuple (check_framework.test_urls.CheckUrlConfigTests)\", \"test_include_with_dollar (check_framework.test_urls.CheckUrlConfigTests)\", \"test_name_with_colon (check_framework.test_urls.CheckUrlConfigTests)\", \"test_no_root_urlconf_in_settings (check_framework.test_urls.CheckUrlConfigTests)\", \"test_no_warnings (check_framework.test_urls.CheckUrlConfigTests)\", \"test_no_warnings_i18n (check_framework.test_urls.CheckUrlConfigTests)\", \"A template view can be cached\", \"test_content_type (generic_views.test_base.TemplateViewTest)\", \"test_extra_context (generic_views.test_base.TemplateViewTest)\", \"A template view can be customized to return extra context.\", \"Test a view that simply renders a template on GET\", \"Test a completely generic view that renders a template on GET\", \"Test a view that renders a template on GET with the template name as\", \"Test a TemplateView responds correctly to HEAD\", \"test_resolve_login_required_view (generic_views.test_base.TemplateViewTest)\", \"test_resolve_view (generic_views.test_base.TemplateViewTest)\", \"A template view may provide a template engine.\", \"A template view must provide a template name.\", \"A generic template view passes kwargs as context.\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.681998",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}