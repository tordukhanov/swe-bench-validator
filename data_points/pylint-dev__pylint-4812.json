{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-4812",
  "base_commit": "47b483ae037e35c25e84b5b697303f2dd79a0e4e",
  "patch": "diff --git a/pylint/config/option_manager_mixin.py b/pylint/config/option_manager_mixin.py\n--- a/pylint/config/option_manager_mixin.py\n+++ b/pylint/config/option_manager_mixin.py\n@@ -258,7 +258,7 @@ def read_config_file(self, config_file=None, verbose=None):\n         if config_file is None:\n             config_file = self.config_file\n         if config_file is not None:\n-            config_file = os.path.expanduser(config_file)\n+            config_file = os.path.expandvars(os.path.expanduser(config_file))\n             if not os.path.exists(config_file):\n                 raise OSError(f\"The config file {config_file} doesn't exist!\")\n \n",
  "test_patch": "diff --git a/tests/test_config.py b/tests/test_config.py\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,7 +1,11 @@\n # pylint: disable=missing-module-docstring, missing-function-docstring, protected-access\n+import os\n import unittest.mock\n \n+import pytest\n+\n import pylint.lint\n+from pylint.config import OptionsManagerMixIn\n \n \n def check_configuration_file_reader(config_file):\n@@ -91,3 +95,31 @@ def test_can_read_toml_rich_types(tmp_path):\n \"\"\"\n     )\n     check_configuration_file_reader(config_file)\n+\n+\n+def test_can_read_env_variable(tmp_path):\n+    # Check that we can read the \"regular\" INI .pylintrc file\n+    # if it has an environment variable.\n+    config_file = tmp_path / \"pyproject.toml\"\n+    config_file.write_text(\n+        \"\"\"\n+[tool.pylint.\"messages control\"]\n+disable = \"logging-not-lazy,logging-format-interpolation\"\n+jobs = \"10\"\n+reports = \"yes\"\n+\"\"\"\n+    )\n+    os.environ[\"tmp_path_env\"] = str(tmp_path / \"pyproject.toml\")\n+    options_manager_mix_in = OptionsManagerMixIn(\"\", \"${tmp_path_env}\")\n+    options_manager_mix_in.read_config_file(\"${tmp_path_env}\")\n+\n+    def test_read_config_file():\n+        with pytest.raises(OSError):\n+            options_manager_mix_in.read_config_file(\"${tmp_path_en}\")\n+\n+    test_read_config_file()\n+    options_manager_mix_in.load_config_file()\n+    section = options_manager_mix_in.cfgfile_parser.sections()[0]\n+    jobs, jobs_nr = options_manager_mix_in.cfgfile_parser.items(section)[1]\n+    assert jobs == \"jobs\"\n+    assert jobs_nr == \"10\"\n",
  "problem_statement": "Config File Does not Expand Environment Variables\nIf a config file is provided that has an environment variable, such as \"%AppData%\", it fails.\r\nThis can be fixed by changing [this line](https://github.com/PyCQA/pylint/blob/master/pylint/config/option_manager_mixin.py#L259) from `config_file = os.path.expanduser(config_file)` to `config_file = os.path.expandvars(os.path.expanduser(config_file))`\r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2021-08-07T15:55:29Z",
  "version": "2.10",
  "FAIL_TO_PASS": "[\"tests/test_config.py::test_can_read_env_variable\"]",
  "PASS_TO_PASS": "[\"tests/test_config.py::test_can_read_ini\", \"tests/test_config.py::test_can_read_setup_cfg\", \"tests/test_config.py::test_can_read_toml\", \"tests/test_config.py::test_can_read_toml_rich_types\"]",
  "environment_setup_commit": "bc95cd34071ec2e71de5bca8ff95cc9b88e23814",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.909137",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}