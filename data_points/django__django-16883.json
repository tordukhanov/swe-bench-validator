{
  "repo": "django/django",
  "instance_id": "django__django-16883",
  "base_commit": "c3862735cd8c268e99fb8d54c3955aacc4f2dc25",
  "patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -56,9 +56,6 @@ def handle_inspection(self, options):\n         # 'table_name_filter' is a stealth option\n         table_name_filter = options.get(\"table_name_filter\")\n \n-        def table2model(table_name):\n-            return re.sub(r\"[^a-zA-Z0-9]\", \"\", table_name.title())\n-\n         with connection.cursor() as cursor:\n             yield \"# This is an auto-generated Django model module.\"\n             yield \"# You'll have to do the following manually to clean this up:\"\n@@ -125,7 +122,7 @@ def table2model(table_name):\n                     yield \"# The error was: %s\" % e\n                     continue\n \n-                model_name = table2model(table_name)\n+                model_name = self.normalize_table_name(table_name)\n                 yield \"\"\n                 yield \"\"\n                 yield \"class %s(models.Model):\" % model_name\n@@ -180,7 +177,7 @@ def table2model(table_name):\n                         rel_to = (\n                             \"self\"\n                             if ref_db_table == table_name\n-                            else table2model(ref_db_table)\n+                            else self.normalize_table_name(ref_db_table)\n                         )\n                         if rel_to in known_models:\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n@@ -322,6 +319,10 @@ def normalize_col_name(self, col_name, used_column_names, is_relation):\n \n         return new_name, field_params, field_notes\n \n+    def normalize_table_name(self, table_name):\n+        \"\"\"Translate the table name to a Python-compatible model name.\"\"\"\n+        return re.sub(r\"[^a-zA-Z0-9]\", \"\", table_name.title())\n+\n     def get_field_type(self, connection, table_name, row):\n         \"\"\"\n         Given the database connection, the table name, and the cursor row\n",
  "test_patch": "diff --git a/tests/inspectdb/models.py b/tests/inspectdb/models.py\n--- a/tests/inspectdb/models.py\n+++ b/tests/inspectdb/models.py\n@@ -51,6 +51,11 @@ class Meta:\n         db_table = \"inspectdb_special.table name\"\n \n \n+class PascalCaseName(models.Model):\n+    class Meta:\n+        db_table = \"inspectdb_pascal.PascalCase\"\n+\n+\n class ColumnTypes(models.Model):\n     id = models.AutoField(primary_key=True)\n     big_int_field = models.BigIntegerField()\ndiff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -3,6 +3,7 @@\n from unittest import mock, skipUnless\n \n from django.core.management import call_command\n+from django.core.management.commands import inspectdb\n from django.db import connection\n from django.db.backends.base.introspection import TableInfo\n from django.test import TestCase, TransactionTestCase, skipUnlessDBFeature\n@@ -354,6 +355,25 @@ def test_table_name_introspection(self):\n         output = out.getvalue()\n         self.assertIn(\"class InspectdbSpecialTableName(models.Model):\", output)\n \n+    def test_custom_normalize_table_name(self):\n+        def pascal_case_table_only(table_name):\n+            return table_name.startswith(\"inspectdb_pascal\")\n+\n+        class MyCommand(inspectdb.Command):\n+            def normalize_table_name(self, table_name):\n+                normalized_name = table_name.split(\".\")[1]\n+                if connection.features.ignores_table_name_case:\n+                    normalized_name = normalized_name.lower()\n+                return normalized_name\n+\n+        out = StringIO()\n+        call_command(MyCommand(), table_name_filter=pascal_case_table_only, stdout=out)\n+        if connection.features.ignores_table_name_case:\n+            expected_model_name = \"pascalcase\"\n+        else:\n+            expected_model_name = \"PascalCase\"\n+        self.assertIn(f\"class {expected_model_name}(models.Model):\", out.getvalue())\n+\n     @skipUnlessDBFeature(\"supports_expression_indexes\")\n     def test_table_with_func_unique_constraint(self):\n         out = StringIO()\n",
  "problem_statement": "Allow to override table2model conversion for inspectdb command\nDescription\n\t\nWhen implementing a custom inspectdb command by inheriting from inspectdb.Command users should be able to override the table name to model conversion logic.\nPublic method for column names already exists: ​https://github.com/django/django/blob/00f5d2d110712af84fae2c5f9183a2ea48ce0a4a/django/core/management/commands/inspectdb.py#L265\nThis would allow overriding the default behaviour of command in a custom inspectdb, for example when table names are already PascalCase (i.e. schema.FooBarBuzz), etc. With default implementation, it will be converted into class SchemaFoobarbuzz(models.Model).\nProposed PR: ​https://github.com/django/django/pull/16883\n",
  "hints_text": "",
  "created_at": "2023-05-21T21:08:07Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_custom_normalize_table_name (inspectdb.tests.InspectDBTestCase.test_custom_normalize_table_name)\"]",
  "PASS_TO_PASS": "[\"test_composite_primary_key (inspectdb.tests.InspectDBTransactionalTests.test_composite_primary_key)\", \"inspectdb --include-views creates models for database views.\", \"test_attribute_name_not_python_keyword (inspectdb.tests.InspectDBTestCase.test_attribute_name_not_python_keyword)\", \"test_char_field_db_collation (inspectdb.tests.InspectDBTestCase.test_char_field_db_collation)\", \"Introspection of columns with a custom field (#21090)\", \"Introspection of column names consist/start with digits (#16536/#17676)\", \"Test introspection of various Django field types\", \"test_foreign_key_to_field (inspectdb.tests.InspectDBTestCase.test_foreign_key_to_field)\", \"Introspection errors should not crash the command, and the error should\", \"test_json_field (inspectdb.tests.InspectDBTestCase.test_json_field)\", \"By default the command generates models with `Meta.managed = False`.\", \"test_same_relations (inspectdb.tests.InspectDBTestCase.test_same_relations)\", \"Introspection of column names containing special characters,\", \"test_stealth_table_name_filter_option (inspectdb.tests.InspectDBTestCase.test_stealth_table_name_filter_option)\", \"Introspection of table names containing special characters,\", \"inspectdb can inspect a subset of tables by passing the table names as\", \"test_table_with_func_unique_constraint (inspectdb.tests.InspectDBTestCase.test_table_with_func_unique_constraint)\", \"test_text_field_db_collation (inspectdb.tests.InspectDBTestCase.test_text_field_db_collation)\", \"test_unique_together_meta (inspectdb.tests.InspectDBTestCase.test_unique_together_meta)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.774632",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}