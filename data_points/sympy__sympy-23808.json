{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-23808",
  "base_commit": "68bd36271334d7bf0ede9beea4bef494bceaacab",
  "patch": "diff --git a/sympy/solvers/diophantine/diophantine.py b/sympy/solvers/diophantine/diophantine.py\n--- a/sympy/solvers/diophantine/diophantine.py\n+++ b/sympy/solvers/diophantine/diophantine.py\n@@ -3891,15 +3891,34 @@ def power_representation(n, p, k, zeros=False):\n \n \n def pow_rep_recursive(n_i, k, n_remaining, terms, p):\n+    # Invalid arguments\n+    if n_i <= 0 or k <= 0:\n+        return\n+\n+    # No solutions may exist\n+    if n_remaining < k:\n+        return\n+    if k * pow(n_i, p) < n_remaining:\n+        return\n \n     if k == 0 and n_remaining == 0:\n         yield tuple(terms)\n+\n+    elif k == 1:\n+        # next_term^p must equal to n_remaining\n+        next_term, exact = integer_nthroot(n_remaining, p)\n+        if exact and next_term <= n_i:\n+            yield tuple(terms + [next_term])\n+        return\n+\n     else:\n+        # TODO: Fall back to diop_DN when k = 2\n         if n_i >= 1 and k > 0:\n-            yield from pow_rep_recursive(n_i - 1, k, n_remaining, terms, p)\n-            residual = n_remaining - pow(n_i, p)\n-            if residual >= 0:\n-                yield from pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p)\n+            for next_term in range(1, n_i + 1):\n+                residual = n_remaining - pow(next_term, p)\n+                if residual < 0:\n+                    break\n+                yield from pow_rep_recursive(next_term, k - 1, residual, terms + [next_term], p)\n \n \n def sum_of_squares(n, k, zeros=False):\n",
  "test_patch": "diff --git a/sympy/solvers/diophantine/tests/test_diophantine.py b/sympy/solvers/diophantine/tests/test_diophantine.py\n--- a/sympy/solvers/diophantine/tests/test_diophantine.py\n+++ b/sympy/solvers/diophantine/tests/test_diophantine.py\n@@ -623,6 +623,17 @@ def test_diop_general_sum_of_squares_quick():\n     raises(NotImplementedError, lambda: classify_diop(-eq))\n \n \n+def test_issue_23807():\n+    # fixes recursion error\n+    eq = x**2 + y**2 + z**2 - 1000000\n+    base_soln = {(0, 0, 1000), (0, 352, 936), (480, 600, 640), (24, 640, 768), (192, 640, 744),\n+                 (192, 480, 856), (168, 224, 960), (0, 600, 800), (280, 576, 768), (152, 480, 864),\n+                 (0, 280, 960), (352, 360, 864), (424, 480, 768), (360, 480, 800), (224, 600, 768),\n+                 (96, 360, 928), (168, 576, 800), (96, 480, 872)}\n+\n+    assert diophantine(eq) == base_soln\n+\n+\n def test_diop_partition():\n     for n in [8, 10]:\n         for k in range(1, 8):\n",
  "problem_statement": "`sympy.solvers.diophantine.diophantine.sum_of_squares` recursion overflow even for for small `n`\nAs title, I am trying to run `sympy.solvers.diophantine.diophantine.sum_of_squares` for `n = 588693170` and `k = 2`, but it throws a `RecursionError`:\r\n\r\n```python\r\n>>> from sympy.solvers.diophantine.diophantine import sum_of_squares as SOS\r\n>>> SOS(1000000, 2)\r\n<generator object sum_of_squares at 0x106d34eb0>\r\n>>> list(SOS(1000000, 2))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.9/site-packages/sympy/solvers/diophantine/diophantine.py\", line 3953, in sum_of_squares\r\n    yield from power_representation(n, 2, k, zeros)\r\n  File \"/usr/local/lib/python3.9/site-packages/sympy/solvers/diophantine/diophantine.py\", line 3883, in power_representation\r\n    for t in pow_rep_recursive(a, k, n, [], p):\r\n  File \"/usr/local/lib/python3.9/site-packages/sympy/solvers/diophantine/diophantine.py\", line 3902, in pow_rep_recursive\r\n    yield from pow_rep_recursive(n_i - 1, k, n_remaining, terms, p)\r\n  File \"/usr/local/lib/python3.9/site-packages/sympy/solvers/diophantine/diophantine.py\", line 3902, in pow_rep_recursive\r\n    yield from pow_rep_recursive(n_i - 1, k, n_remaining, terms, p)\r\n  File \"/usr/local/lib/python3.9/site-packages/sympy/solvers/diophantine/diophantine.py\", line 3902, in pow_rep_recursive\r\n    yield from pow_rep_recursive(n_i - 1, k, n_remaining, terms, p)\r\n  [Previous line repeated 993 more times]\r\n  File \"/usr/local/lib/python3.9/site-packages/sympy/solvers/diophantine/diophantine.py\", line 3898, in pow_rep_recursive\r\n    if k == 0 and n_remaining == 0:\r\nRecursionError: maximum recursion depth exceeded in comparison\r\n```\r\n\r\nI am not sure if this classifies as a bug, but it seems unintended especially since 10^6 is such a small number and has a \"easy\" factorisation (10^6 = 2^6 * 5^6).\n",
  "hints_text": "Nevermind, I should've looked closer at the problem...\r\nThe problem is that the function `sum_of_squares` calls `power_representation`, which then calls `pow_rep_recursive`, which is a simple recursive bruteforce algorithm. This can be fixed by generating the representations using the factorisation of `n` instead of bruteforcing.\nThe example that fails should be\r\n```python\r\nIn [8]: list(SOS(588693170, 2))\r\n---------------------------------------------------------------------------\r\nRecursionError\r\n```\r\nThe `sum_of_squares` function is not supposed to be the public interface though. How would you reproduce this with `diophantine`?\r\n\r\nI tried this and it works fine:\r\n```python\r\nIn [9]: diophantine(x**2 + y**2 - 588693170)\r\nOut[9]: \r\n{(-24263, -1), (-24263, 1), (-24251, -763), (-24251, 763), (-24247, -881), (-24247, 881), (-24241, \r\n-1033), ...\r\n```\nOhhh I see, thank you for the comment, I did not know that. It seems that calling `diophantine` should work as intended, as it uses the `cornacchia` algorithm which seems to be really quick.\nThis one does fail though:\r\n```python\r\nIn [4]: diophantine(x**2 + y**2 + z**2 - 588693170)\r\n---------------------------------------------------------------------------\r\nRecursionError\r\n```\nYes, since the equation type is `GeneralSumOfSquares` (see [here](https://github.com/sympy/sympy/blob/68bd36271334d7bf0ede9beea4bef494bceaacab/sympy/solvers/diophantine/diophantine.py#L1642)), which eventually calls `sum_of_squares` -> `power_representation` -> `pow_rep_recursive` on line 3880 and calls the recursive bruteforce. I am not aware of better methods for 3 squares or more, since for 2 squares you have a math formula\r\n\r\n$$\r\n(a^2+b^2)(c^2+d^2)=(ac+bd)^2+(ad-bc)^2=(ad+bc)^2+(ac-bd)^2\r\n$$\r\n\r\nWhich is how we can \"combine\" solutions by factoring, but I am not aware of a similar formula for 3 or more squares. However, the implementation of `pow_rep_recursive` is really weird, as it should use around `k` recursion frames when coded correctly, but right not it uses `n^(1/p)` recursion frames.",
  "created_at": "2022-07-20T19:16:43Z",
  "version": "1.12",
  "FAIL_TO_PASS": "[\"test_issue_23807\"]",
  "PASS_TO_PASS": "[\"test_input_format\", \"test_nosols\", \"test_univariate\", \"test_classify_diop\", \"test_linear\", \"test_quadratic_simple_hyperbolic_case\", \"test_quadratic_elliptical_case\", \"test_quadratic_parabolic_case\", \"test_quadratic_perfect_square\", \"test_quadratic_non_perfect_square\", \"test_issue_9106\", \"test_issue_18138\", \"test_DN\", \"test_bf_pell\", \"test_length\", \"test_transformation_to_pell\", \"test_find_DN\", \"test_ldescent\", \"test_diop_ternary_quadratic_normal\", \"test_transformation_to_normal\", \"test_diop_ternary_quadratic\", \"test_square_factor\", \"test_parametrize_ternary_quadratic\", \"test_no_square_ternary_quadratic\", \"test_descent\", \"test_diophantine\", \"test_general_pythagorean\", \"test_diop_general_sum_of_squares_quick\", \"test_diop_partition\", \"test_prime_as_sum_of_two_squares\", \"test_sum_of_three_squares\", \"test_sum_of_four_squares\", \"test_power_representation\", \"test_assumptions\", \"test_diopcoverage\", \"test_holzer\", \"test_issue_9539\", \"test_issue_8943\", \"test_diop_sum_of_even_powers\", \"test_sum_of_squares_powers\", \"test__can_do_sum_of_squares\", \"test_diophantine_permute_sign\", \"test_issue_9538\", \"test_ternary_quadratic\", \"test_diophantine_solution_set\"]",
  "environment_setup_commit": "c6cb7c5602fa48034ab1bd43c2347a7e8488f12e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.153987",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}