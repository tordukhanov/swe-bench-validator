{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-8169",
  "base_commit": "4689b195d8539ef04fd0c30423037a5f4932a20f",
  "patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2933,7 +2933,7 @@ def _check_module_attrs(\n                 break\n             try:\n                 module = next(module.getattr(name)[0].infer())\n-                if module is astroid.Uninferable:\n+                if not isinstance(module, nodes.Module):\n                     return None\n             except astroid.NotFoundError:\n                 if module.name in self._ignored_modules:\n",
  "test_patch": "diff --git a/tests/regrtest_data/pkg_mod_imports/__init__.py b/tests/regrtest_data/pkg_mod_imports/__init__.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/regrtest_data/pkg_mod_imports/__init__.py\n@@ -0,0 +1,6 @@\n+base = [\n+    'Exchange',\n+    'Precise',\n+    'exchanges',\n+    'decimal_to_precision',\n+]\ndiff --git a/tests/regrtest_data/pkg_mod_imports/base/__init__.py b/tests/regrtest_data/pkg_mod_imports/base/__init__.py\nnew file mode 100644\ndiff --git a/tests/regrtest_data/pkg_mod_imports/base/errors.py b/tests/regrtest_data/pkg_mod_imports/base/errors.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/regrtest_data/pkg_mod_imports/base/errors.py\n@@ -0,0 +1,2 @@\n+class SomeError(Exception):\n+    pass\ndiff --git a/tests/regrtest_data/test_no_name_in_module.py b/tests/regrtest_data/test_no_name_in_module.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/regrtest_data/test_no_name_in_module.py\n@@ -0,0 +1 @@\n+from pkg_mod_imports.base.errors import SomeError\ndiff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1293,6 +1293,15 @@ def test_output_no_header(self) -> None:\n             args, expected_output=expected, unexpected_output=not_expected\n         )\n \n+    def test_no_name_in_module(self) -> None:\n+        \"\"\"Test that a package with both a variable name `base` and a module `base`\n+        does not emit a no-name-in-module msg.\"\"\"\n+        module = join(HERE, \"regrtest_data\", \"test_no_name_in_module.py\")\n+        unexpected = \"No name 'errors' in module 'list' (no-name-in-module)\"\n+        self._test_output(\n+            [module, \"-E\"], expected_output=\"\", unexpected_output=unexpected\n+        )\n+\n \n class TestCallbackOptions:\n     \"\"\"Test for all callback options we support.\"\"\"\n",
  "problem_statement": "False positive `no-name-in-module` when importing from ``from ccxt.base.errors`` even when using the ``ignored-modules`` option\n### Bug description\n\nSimply importing exceptions from the [`ccxt`](https://github.com/ccxt/ccxt) library is giving this error. Here's an example of how we import them:\r\n\r\n```python\r\nfrom ccxt.base.errors import (\r\n    AuthenticationError,\r\n    ExchangeError,\r\n    ExchangeNotAvailable,\r\n    NetworkError,\r\n    RateLimitExceeded,\r\n    RequestTimeout,\r\n)\r\n```\r\n\r\nPycharm can find the exception classes just fine. I know they exist. It could have something to do with how the library is using `__all__`, but I don't know too much about how that works to draw that conclusion.\r\n\r\nAlso, note that we're using version 1.95.1 of `ccxt`. We use it in some critical paths, so we can't update it to the latest version quite yet.\r\n\r\nThe configuration written below is what I've tried, but it seems based on googling that that doesn't stop all errors from being ignored regarding those modules. So I'm still getting the issue.\n\n### Configuration\n\n```ini\n# List of module names for which member attributes should not be checked\r\n# (useful for modules/projects where namespaces are manipulated during runtime\r\n# and thus existing member attributes cannot be deduced by static analysis). It\r\n# supports qualified module names, as well as Unix pattern matching.\r\nignored-modules=ccxt,ccxt.base,ccxt.base.errors\n```\n\n\n### Command used\n\n```shell\npylint test_ccxt_base_errors.py\n```\n\n\n### Pylint output\n\n```shell\n************* Module test_ccxt_base_errors\r\ntest_ccxt_base_errors.py:1:0: E0611: No name 'errors' in module 'list' (no-name-in-module)\n```\n\n\n### Expected behavior\n\nNo error to be reported\n\n### Pylint version\n\n```shell\npylint 2.14.5\r\nastroid 2.11.7\r\nPython 3.9.16 (main, Dec  7 2022, 10:16:11)\r\n[Clang 14.0.0 (clang-1400.0.29.202)]\n```\n\n\n### OS / Environment\n\nIntel based 2019 Mac Book Pro. Mac OS 13.1 (Ventura). Fish shell.\n\n### Additional dependencies\n\nccxt==1.95.1\n",
  "hints_text": "Could you upgrade to at least 2.15.10 (better yet 2.16.0b1) and confirm the issue still exists, please ?\nTried with\r\n\r\n```\r\npylint 2.15.10\r\nastroid 2.13.4\r\nPython 3.9.16 (main, Dec  7 2022, 10:16:11)\r\n[Clang 14.0.0 (clang-1400.0.29.202)]\r\n```\r\nand also with pylint 2.16.0b1 and I still get the same issue.\nThank you ! I can reproduce, and ``ignored-modules`` does work with a simpler example like ``random.foo``\n@Pierre-Sassoulas is the fix here:\r\n1. figure out why the ccxt library causes a `no-name-in-module` msg\r\n2. figure out why using `ignored-modules` is still raising `no-name-in-module`\r\n?\nYes, I think 2/ is the one to prioritize as it's going to be useful for everyone and not just ccxt users. But if we manage find the root cause of 1/ it's going to be generic too.\nThere is a non-ccxt root cause. This issue can be reproduced with the following dir structure:\r\n\r\n```\r\npkg_mod_imports/__init__.py\r\npkg_mod_imports/base/__init__.py\r\npkg_mod_imports/base/errors.py\r\n```\r\npkg_mod_imports/__init__.py should have :\r\n```\r\nbase = [\r\n    'Exchange',\r\n    'Precise',\r\n    'exchanges',\r\n    'decimal_to_precision',\r\n]\r\n```\r\n\r\nand  pkg_mod_imports/base/errors.py\r\n\r\n```\r\nclass SomeError(Exception):\r\n    pass\r\n```\r\n\r\nin a test.py module add\r\n```\r\nfrom pkg_mod_imports.base.errors import SomeError\r\n```\r\nAnd then running `pylint test.py` the result is\r\n```\r\ntest.py:1:0: E0611: No name 'errors' in module 'list' (no-name-in-module)\r\n```\r\n\r\nIt's coming from the fact that `errors` is both a list inside the init file and the name of a module. variable.py does `module = next(module.getattr(name)[0].infer())` . `getattr` fetches the `errors` list, not the module!",
  "created_at": "2023-02-02T12:18:35Z",
  "version": "2.17",
  "FAIL_TO_PASS": "[\"tests/test_self.py::TestRunTC::test_no_name_in_module\"]",
  "PASS_TO_PASS": "[\"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_type_annotation_names\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntax_error\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]\", \"tests/test_self.py::TestRunTC::test_one_module_fatal_error\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\", \"tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided\", \"tests/test_self.py::TestRunTC::test_regex_paths_csv_validator\", \"tests/test_self.py::TestRunTC::test_recursive\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]\", \"tests/test_self.py::TestRunTC::test_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding\", \"tests/test_self.py::TestRunTC::test_encoding[good.py-]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]\", \"tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression\", \"tests/test_self.py::TestRunTC::test_output_no_header\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name\", \"tests/test_self.py::TestCallbackOptions::test_generate_rcfile\", \"tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_errors_only\", \"tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable\", \"tests/test_self.py::TestCallbackOptions::test_verbose\", \"tests/test_self.py::TestCallbackOptions::test_enable_all_extensions\"]",
  "environment_setup_commit": "80e024af5cfdc65a2b9fef1f25ff602ab4fa0f88",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.916734",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}