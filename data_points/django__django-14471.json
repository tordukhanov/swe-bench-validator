{
  "repo": "django/django",
  "instance_id": "django__django-14471",
  "base_commit": "c609d5149c9295207cd7b2e8154e7b80a18d834a",
  "patch": "diff --git a/django/middleware/csrf.py b/django/middleware/csrf.py\n--- a/django/middleware/csrf.py\n+++ b/django/middleware/csrf.py\n@@ -217,14 +217,12 @@ def _get_token(self, request):\n             except KeyError:\n                 return None\n \n-            try:\n-                csrf_token = _sanitize_token(cookie_token)\n-            except InvalidTokenFormat:\n-                csrf_token = _get_new_csrf_token()\n+            # This can raise InvalidTokenFormat.\n+            csrf_token = _sanitize_token(cookie_token)\n \n             if csrf_token != cookie_token:\n-                # Cookie token needed to be replaced;\n-                # the cookie needs to be reset.\n+                # Then the cookie token had length CSRF_SECRET_LENGTH, so flag\n+                # to replace it with the masked version.\n                 request.csrf_cookie_needs_reset = True\n             return csrf_token\n \n@@ -318,7 +316,12 @@ def _check_referer(self, request):\n             raise RejectRequest(REASON_BAD_REFERER % referer.geturl())\n \n     def process_request(self, request):\n-        csrf_token = self._get_token(request)\n+        try:\n+            csrf_token = self._get_token(request)\n+        except InvalidTokenFormat:\n+            csrf_token = _get_new_csrf_token()\n+            request.csrf_cookie_needs_reset = True\n+\n         if csrf_token is not None:\n             # Use same token next time.\n             request.META['CSRF_COOKIE'] = csrf_token\n@@ -374,7 +377,11 @@ def process_view(self, request, callback, callback_args, callback_kwargs):\n         # Access csrf_token via self._get_token() as rotate_token() may have\n         # been called by an authentication middleware during the\n         # process_request() phase.\n-        csrf_token = self._get_token(request)\n+        try:\n+            csrf_token = self._get_token(request)\n+        except InvalidTokenFormat as exc:\n+            return self._reject(request, f'CSRF cookie {exc.reason}.')\n+\n         if csrf_token is None:\n             # No CSRF cookie. For POST requests, we insist on a CSRF cookie,\n             # and in this way we can avoid all CSRF attacks, including login\n",
  "test_patch": "diff --git a/tests/csrf_tests/tests.py b/tests/csrf_tests/tests.py\n--- a/tests/csrf_tests/tests.py\n+++ b/tests/csrf_tests/tests.py\n@@ -43,11 +43,12 @@ def _get_GET_no_csrf_cookie_request(self):\n         req.method = 'GET'\n         return req\n \n-    def _get_GET_csrf_cookie_request(self):\n+    def _get_GET_csrf_cookie_request(self, cookie=None):\n         raise NotImplementedError('This method must be implemented by a subclass.')\n \n-    def _get_POST_csrf_cookie_request(self):\n-        req = self._get_GET_csrf_cookie_request()\n+    def _get_POST_csrf_cookie_request(self, cookie=None):\n+        \"\"\"The cookie argument defaults to the valid test cookie.\"\"\"\n+        req = self._get_GET_csrf_cookie_request(cookie=cookie)\n         req.method = \"POST\"\n         return req\n \n@@ -94,18 +95,25 @@ def test_process_response_get_token_not_used(self):\n         csrf_cookie = resp.cookies.get(settings.CSRF_COOKIE_NAME, False)\n         self.assertIs(csrf_cookie, False)\n \n-    def test_no_csrf_cookie(self):\n-        \"\"\"\n-        If no CSRF cookies is present, the middleware rejects the incoming\n-        request. This will stop login CSRF.\n-        \"\"\"\n-        req = self._get_POST_no_csrf_cookie_request()\n+    def _check_bad_or_missing_cookie(self, cookie, expected):\n+        \"\"\"Passing None for cookie includes no cookie.\"\"\"\n+        if cookie is None:\n+            req = self._get_POST_no_csrf_cookie_request()\n+        else:\n+            req = self._get_POST_csrf_cookie_request(cookie=cookie)\n         mw = CsrfViewMiddleware(post_form_view)\n         mw.process_request(req)\n         with self.assertLogs('django.security.csrf', 'WARNING') as cm:\n             resp = mw.process_view(req, post_form_view, (), {})\n         self.assertEqual(403, resp.status_code)\n-        self.assertEqual(cm.records[0].getMessage(), 'Forbidden (%s): ' % REASON_NO_CSRF_COOKIE)\n+        self.assertEqual(cm.records[0].getMessage(), 'Forbidden (%s): ' % expected)\n+\n+    def test_no_csrf_cookie(self):\n+        \"\"\"\n+        If no CSRF cookies is present, the middleware rejects the incoming\n+        request. This will stop login CSRF.\n+        \"\"\"\n+        self._check_bad_or_missing_cookie(None, REASON_NO_CSRF_COOKIE)\n \n     def _check_bad_or_missing_token(self, token, expected):\n         \"\"\"Passing None for token includes no token.\"\"\"\n@@ -762,9 +770,12 @@ def test_good_origin_wildcard_csrf_trusted_origin_allowed(self):\n \n class CsrfViewMiddlewareTests(CsrfViewMiddlewareTestMixin, SimpleTestCase):\n \n-    def _get_GET_csrf_cookie_request(self):\n+    def _get_GET_csrf_cookie_request(self, cookie=None):\n+        \"\"\"The cookie argument defaults to the valid test cookie.\"\"\"\n+        if cookie is None:\n+            cookie = self._csrf_id_cookie\n         req = TestingHttpRequest()\n-        req.COOKIES[settings.CSRF_COOKIE_NAME] = self._csrf_id_cookie\n+        req.COOKIES[settings.CSRF_COOKIE_NAME] = cookie\n         return req\n \n     def _get_POST_bare_secret_csrf_cookie_request(self):\n@@ -847,6 +858,20 @@ def test_csrf_cookie_samesite(self):\n             resp = mw(req)\n             self.assertEqual(resp.cookies['csrfcookie']['samesite'], 'Strict')\n \n+    def test_bad_csrf_cookie_characters(self):\n+        \"\"\"\n+        If the CSRF cookie has invalid characters in a POST request, the\n+        middleware rejects the incoming request.\n+        \"\"\"\n+        self._check_bad_or_missing_cookie(64 * '*', 'CSRF cookie has invalid characters.')\n+\n+    def test_bad_csrf_cookie_length(self):\n+        \"\"\"\n+        If the CSRF cookie has an incorrect length in a POST request, the\n+        middleware rejects the incoming request.\n+        \"\"\"\n+        self._check_bad_or_missing_cookie(16 * 'a', 'CSRF cookie has incorrect length.')\n+\n     def test_process_view_token_too_long(self):\n         \"\"\"\n         If the token is longer than expected, it is ignored and a new token is\n@@ -943,9 +968,12 @@ def _get_POST_bare_secret_csrf_cookie_request(self):\n         req.session[CSRF_SESSION_KEY] = self._csrf_id_cookie[:32]\n         return req\n \n-    def _get_GET_csrf_cookie_request(self):\n+    def _get_GET_csrf_cookie_request(self, cookie=None):\n+        \"\"\"The cookie argument defaults to the valid test cookie.\"\"\"\n+        if cookie is None:\n+            cookie = self._csrf_id_cookie\n         req = TestingHttpRequest()\n-        req.session[CSRF_SESSION_KEY] = self._csrf_id_cookie\n+        req.session[CSRF_SESSION_KEY] = cookie\n         return req\n \n     def test_no_session_on_request(self):\n",
  "problem_statement": "Reject requests earlier if the CSRF cookie token has the wrong format\nDescription\n\t \n\t\t(last modified by Chris Jerdonek)\n\t \n(This issue is similar to #32795 but for the cookie token rather than for the non-cookie token.)\nI noticed in CsrfViewMiddleware.process_view() that if the CSRF cookie has the wrong format (i.e. wrong length or contains invalid characters), then the code will do a fair amount of unnecessary work. Specifically, the code will proceed inside _get_token() at ​this line to use Python's secrets module twice to generate both a new token and a mask for the token. But this new token will only be used for the purposes of later calling _compare_masked_tokens() in a way that will be guaranteed to fail (since the cookie being used will be brand new and so won't match). And then it will call _compare_masked_tokens() with that value.\nInstead, if the CSRF cookie is found at that line to have the wrong format, the middleware could reject the request outright similar to how #32795 does it if the token has the wrong format (as well as similar to how the code currently handles a missing cookie in the ​lines after). I think this will simplify CsrfViewMiddleware and make it easier to understand because it will eliminate a number of steps that aren't needed for security. In particular, one thing this will do is cut down on the number of places where _get_new_csrf_token() is called, which will make it clearer where a new value is really needed / used. Similar to #32795, it will also make troubleshooting easier because the rejection messages will be more specific.\nI think this could be implemented as follows. After #32795 is merged, ​_get_token() could be changed to allow InvalidTokenFormat to bubble up instead of handling it. Then the InvalidTokenFormat exception could be handled differently in the two places _get_token() is called: (1) In process_request(), it could be handled by calling _get_new_csrf_token() (_get_token()'s current behavior). (2) In process_view(), it could be handled similar to how #32795 handles it. Namely, reject the request using the InvalidTokenFormat's reason string.\n",
  "hints_text": "",
  "created_at": "2021-05-31T11:52:18Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"If the CSRF cookie has invalid characters in a POST request, the\", \"If the CSRF cookie has an incorrect length in a POST request, the\"]",
  "PASS_TO_PASS": "[\"A request with a bad origin is rejected.\", \"A request with an origin with wrong protocol is rejected.\", \"A POST request with an origin that can't be parsed by urlparse() is\", \"A request with an origin with the wrong protocol compared to\", \"A request with a null origin is rejected.\", \"The csrf token used in posts is changed on every request (although\", \"If a CSRF cookie is present but the token has invalid characters, the\", \"If a CSRF cookie is present but the token has an incorrect length, the\", \"If a CSRF cookie is present but the correctly formatted token is\", \"If a CSRF cookie is present but with no token, the middleware rejects\", \"The token may be passed in a header instead of in the form.\", \"settings.CSRF_HEADER_NAME can be used to customize the CSRF header name\", \"ensure_csrf_cookie() doesn't log warnings (#19436).\", \"The ensure_csrf_cookie() decorator works with the CsrfViewMiddleware\", \"get_token still works for a view decorated with 'csrf_exempt'.\", \"get_token() works for a view decorated solely with requires_csrf_token.\", \"A POST request with an origin added to the CSRF_TRUSTED_ORIGINS\", \"A POST HTTP request with a good origin is accepted.\", \"A POST HTTPS request with a good origin is accepted.\", \"A POST request with an origin that matches a CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a bad referer is rejected\", \"A POST HTTPS request with a referer added to the CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a referer that matches a CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a good referer is accepted.\", \"A POST HTTPS request with a good referer is accepted where the referer\", \"A POST HTTPS request is accepted when USE_X_FORWARDED_PORT=True.\", \"A POST HTTPS request is accepted if it receives a good referer with\", \"A POST HTTPS request with a good referer should be accepted from a\", \"CsrfViewMiddleware generates a 403 response if it receives an HTTPS\", \"A POST HTTPS request with a bad referer is rejected.\", \"A POST HTTPS request with a missing referer is rejected.\", \"A POST HTTPS request from an insecure referer should be rejected.\", \"If no CSRF cookies is present, the middleware rejects the incoming\", \"test_no_session_on_request (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"test_origin_malformed_host (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"OSErrors during POST data reading are caught and treated as if the\", \"If both a cookie and a token is present, the middleware lets it through.\", \"If a CSRF cookie is present and no token, but the csrf_exempt decorator\", \"If get_token() is not called, the view middleware does not\", \"The ensure_csrf_cookie() decorator works without middleware.\", \"HTTP PUT and DELETE can get through with X-CSRFToken and a cookie.\", \"HTTP PUT and DELETE methods have protection\", \"The session isn't saved if the CSRF cookie is unchanged.\", \"A new token is sent if the csrf_cookie is the empty string.\", \"CsrfTokenNode works when no CSRF cookie is set.\", \"CsrfTokenNode works when a CSRF cookie is set.\", \"CsrfTokenNode works when a CSRF cookie is created by the middleware\", \"The csrf token is reset from a bare secret.\", \"CSRF cookie age can be set using settings.CSRF_COOKIE_AGE.\", \"CSRF cookie age does not have max age set and therefore uses\", \"test_csrf_cookie_samesite (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_origin_malformed_host (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"If the token contains non-alphanumeric characters, it is ignored and a\", \"If the token is longer than expected, it is ignored and a new token is\", \"CsrfTokenNode works when a CSRF cookie is created by\", \"test_csrf_token_on_404_stays_constant (csrf_tests.tests.CsrfInErrorHandlingViewsTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.694436",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}