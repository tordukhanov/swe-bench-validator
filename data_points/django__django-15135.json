{
  "repo": "django/django",
  "instance_id": "django__django-15135",
  "base_commit": "9ac92b1efc5ff90e7cce5c47fbd05887d403e4cd",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -931,11 +931,13 @@ def _do_insert(self, manager, using, fields, returning_fields, raw):\n             using=using, raw=raw,\n         )\n \n-    def _prepare_related_fields_for_save(self, operation_name):\n+    def _prepare_related_fields_for_save(self, operation_name, fields=None):\n         # Ensure that a model instance without a PK hasn't been assigned to\n         # a ForeignKey or OneToOneField on this model. If the field is\n         # nullable, allowing the save would result in silent data loss.\n         for field in self._meta.concrete_fields:\n+            if fields and field not in fields:\n+                continue\n             # If the related field isn't cached, then an instance hasn't been\n             # assigned and there's no need to worry about this check.\n             if field.is_relation and field.is_cached(self):\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -549,6 +549,8 @@ def bulk_update(self, objs, fields, batch_size=None):\n             raise ValueError('bulk_update() cannot be used with primary key fields.')\n         if not objs:\n             return 0\n+        for obj in objs:\n+            obj._prepare_related_fields_for_save(operation_name='bulk_update', fields=fields)\n         # PK is used twice in the resulting update query, once in the filter\n         # and once in the WHEN. Each field will also have one CAST.\n         connection = connections[self.db]\n",
  "test_patch": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -7,7 +7,8 @@\n \n from .models import (\n     Article, CustomDbColumn, CustomPk, Detail, Individual, JSONFieldNullable,\n-    Member, Note, Number, Order, Paragraph, SpecialCategory, Tag, Valid,\n+    Member, Note, Number, Order, Paragraph, RelatedObject, SingleObject,\n+    SpecialCategory, Tag, Valid,\n )\n \n \n@@ -250,3 +251,32 @@ def test_json_field(self):\n             obj.json_field = {'c': obj.json_field['a'] + 1}\n         JSONFieldNullable.objects.bulk_update(objs, ['json_field'])\n         self.assertCountEqual(JSONFieldNullable.objects.filter(json_field__has_key='c'), objs)\n+\n+    def test_nullable_fk_after_related_save(self):\n+        parent = RelatedObject.objects.create()\n+        child = SingleObject()\n+        parent.single = child\n+        parent.single.save()\n+        RelatedObject.objects.bulk_update([parent], fields=['single'])\n+        self.assertEqual(parent.single_id, parent.single.pk)\n+        parent.refresh_from_db()\n+        self.assertEqual(parent.single, child)\n+\n+    def test_unsaved_parent(self):\n+        parent = RelatedObject.objects.create()\n+        parent.single = SingleObject()\n+        msg = (\n+            \"bulk_update() prohibited to prevent data loss due to unsaved \"\n+            \"related object 'single'.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            RelatedObject.objects.bulk_update([parent], fields=['single'])\n+\n+    def test_unspecified_unsaved_parent(self):\n+        parent = RelatedObject.objects.create()\n+        parent.single = SingleObject()\n+        parent.f = 42\n+        RelatedObject.objects.bulk_update([parent], fields=['f'])\n+        parent.refresh_from_db()\n+        self.assertEqual(parent.f, 42)\n+        self.assertIsNone(parent.single)\n",
  "problem_statement": "Saving parent object after setting on child leads to unexpected data loss in bulk_update().\nDescription\n\t\nConsider following example:\nclass Child(models.Model):\n\tpass\nclass Parent(models.Model):\n\tchild = models.ForeignKey(Child, on_delete=models.CASCADE, null=True)\nparent = Parent.objects.create(child=None)\nparent.child = Child()\nparent.child.save()\nParent.objects.bulk_update([parent], fields=[\"child\"])\nExpected behavior:\nparent model instance was updated with the ID to the child in the database.\nActual behavior:\nParent model is still referencing Null.\nThere should probably be some check for ForeignKeys in the bulk_update logic, and if one is updated, the ID of the child model should be re-copied to the child_id field that is actually being written to the database.\n",
  "hints_text": "Thanks for the report. This is because child_id is not updated after parent.child.save(). Related to #29497 and #32133.",
  "created_at": "2021-11-27T15:12:03Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_nullable_fk_after_related_save (queries.test_bulk_update.BulkUpdateTests)\", \"test_unsaved_parent (queries.test_bulk_update.BulkUpdateTests)\"]",
  "PASS_TO_PASS": "[\"test_batch_size (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_foreign_keys_do_not_lookup (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_functions (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_multiple_fields (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_set_field_to_null (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_set_mixed_fields_to_null (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_simple (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_unsaved_models (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_booleanfield (queries.test_bulk_update.BulkUpdateTests)\", \"test_custom_db_columns (queries.test_bulk_update.BulkUpdateTests)\", \"test_custom_pk (queries.test_bulk_update.BulkUpdateTests)\", \"test_datetime_field (queries.test_bulk_update.BulkUpdateTests)\", \"test_empty_objects (queries.test_bulk_update.BulkUpdateTests)\", \"test_falsey_pk_value (queries.test_bulk_update.BulkUpdateTests)\", \"test_field_references (queries.test_bulk_update.BulkUpdateTests)\", \"test_inherited_fields (queries.test_bulk_update.BulkUpdateTests)\", \"test_invalid_batch_size (queries.test_bulk_update.BulkUpdateTests)\", \"test_ipaddressfield (queries.test_bulk_update.BulkUpdateTests)\", \"test_json_field (queries.test_bulk_update.BulkUpdateTests)\", \"test_large_batch (queries.test_bulk_update.BulkUpdateTests)\", \"test_no_fields (queries.test_bulk_update.BulkUpdateTests)\", \"test_nonexistent_field (queries.test_bulk_update.BulkUpdateTests)\", \"test_only_concrete_fields_allowed (queries.test_bulk_update.BulkUpdateTests)\", \"test_unspecified_unsaved_parent (queries.test_bulk_update.BulkUpdateTests)\", \"test_update_custom_primary_key (queries.test_bulk_update.BulkUpdateTests)\", \"test_update_primary_key (queries.test_bulk_update.BulkUpdateTests)\", \"test_updated_rows_when_passing_duplicates (queries.test_bulk_update.BulkUpdateTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.719332",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}