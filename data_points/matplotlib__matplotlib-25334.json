{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25334",
  "base_commit": "07c43e4a87130880b5a01eca16de492bb800c26e",
  "patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1447,12 +1447,12 @@ def _contour_args(self, args, kwargs):\n         else:\n             raise _api.nargs_error(fn, takes=\"from 1 to 4\", given=nargs)\n         z = ma.masked_invalid(z, copy=False)\n-        self.zmax = float(z.max())\n-        self.zmin = float(z.min())\n+        self.zmax = z.max().astype(float)\n+        self.zmin = z.min().astype(float)\n         if self.logscale and self.zmin <= 0:\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n-            self.zmin = float(z.min())\n+            self.zmin = z.min().astype(float)\n         self._process_contour_level_args(args, z.dtype)\n         return (x, y, z)\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -715,3 +715,10 @@ def test_bool_autolevel():\n     assert plt.tricontour(x, y, z).levels.tolist() == [.5]\n     assert plt.tricontourf(x, y, z.tolist()).levels.tolist() == [0, .5, 1]\n     assert plt.tricontourf(x, y, z).levels.tolist() == [0, .5, 1]\n+\n+\n+def test_all_nan():\n+    x = np.array([[np.nan, np.nan], [np.nan, np.nan]])\n+    assert_array_almost_equal(plt.contour(x).levels,\n+                              [-1e-13, -7.5e-14, -5e-14, -2.4e-14, 0.0,\n+                                2.4e-14, 5e-14, 7.5e-14, 1e-13])\n",
  "problem_statement": "plt.contour with all NaNs fails assertion in _contour.cpp\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nPassing an array with all NaN values into `pyplot.contour()` causes the following assertion to fail in `QuadContourGenerator::init_cache_levels`:\r\nhttps://github.com/matplotlib/matplotlib/blob/v3.0.3/src/_contour.cpp#L1317-L1318\r\n\r\nThis is actually triggered by a test-case in the xarray test suite, but I imagine it hasn't been noticed (yet) because release builds of matplotlib typically disable assertion checks.\r\n\r\n**Code for reproduction**\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nx = np.array([[np.nan, np.nan], [np.nan, np.nan]])\r\nplt.contour(x)\r\n```\r\n\r\n**Actual outcome**\r\n\r\nFailed assertion (see referenced line above, tracked down with `gdb`)\r\n\r\n**Expected outcome**\r\n\r\nI would expect to see the empty plot (and long lists of warnings) that are currently shown if assertions are disabled:\r\n![image](https://user-images.githubusercontent.com/1217238/57171429-2221b800-6dc9-11e9-9bc2-dccf317a1646.png)\r\n\r\n**Matplotlib version**\r\n\r\n  * Operating system: Linux\r\n  * Matplotlib version: 3.0.3\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): agg\r\n  * Python version: 3.6\r\n\r\nPython, matplotlib, etc are installed from source\n",
  "hints_text": "@ianthomas23 would you like to look at this?  It sounds like maybe more early-stage argument checking is needed.\nThe assertions in `_contour.cpp` are to help with debugging, in particularly to identify when the C++ code is called with strange arguments. In this example a C++ `QuadContourGenerator` object is created for a 2D array of NaNs and then it is asked to contour a `z` level of NaN. The C++ code will walk through the 2D array looking for contours at the NaN level, not find any and return an empty contour set.\r\n\r\nThe C++ assertion is a distraction here, although it did help to identify the problem. For an array of NaNs there is no point in ever accessing the C++ contouring code as there are no contours to find. A better approach would be for the python code (`contour.py`) to identify that the `z` array is all NaNs early on and never call the C++ code.\r\n\r\nThere is a question of policy here. When trying to contour an array of NaNs, do we (1) report a warning and return a valid but empty contour set, or (2) raise an exception instead?\nI think the prevailing policy, and a good one, is to return empty but valid objects, like this:\r\n```\r\nIn [5]: plt.plot([np.nan], [np.nan])\r\n[<matplotlib.lines.Line2D at 0x120171cf8>]\r\n```\nThe current behavior as of master is to spit out a lot of warnings, but actually draw the figure (original example from above):\r\n\r\n~~~\r\nIn [5]: plt.contour(x)                                                                     \r\n/home/tim/dev/matplotlib/lib/matplotlib/contour.py:1498: UserWarning: Warning: converting a masked element to nan.\r\n  self.zmax = float(z.max())\r\n/home/tim/dev/matplotlib/lib/matplotlib/contour.py:1499: UserWarning: Warning: converting a masked element to nan.\r\n  self.zmin = float(z.min())\r\n/home/tim/dev/matplotlib/lib/matplotlib/contour.py:1144: RuntimeWarning: invalid value encountered in less\r\n  under = np.nonzero(lev < self.zmin)[0]\r\n/home/tim/dev/matplotlib/lib/matplotlib/contour.py:1146: RuntimeWarning: invalid value encountered in greater\r\n  over = np.nonzero(lev > self.zmax)[0]\r\n/home/tim/dev/matplotlib/lib/matplotlib/contour.py:1175: RuntimeWarning: invalid value encountered in greater\r\n  inside = (self.levels > self.zmin) & (self.levels < self.zmax)\r\n/home/tim/dev/matplotlib/lib/matplotlib/contour.py:1175: RuntimeWarning: invalid value encountered in less\r\n  inside = (self.levels > self.zmin) & (self.levels < self.zmax)\r\n/home/tim/anaconda3/envs/mpl-old/bin/ipython:5: UserWarning: No contour levels were found within the data range.\r\n  import sys\r\nOut[4]: <matplotlib.contour.QuadContourSet at 0x7ff370747c18>\r\n~~~\r\n\r\nSo, basically as desired. However the number of warnings could be reduced.\r\n\r\nImplementing just one warning will be cumbersome. Either you follow the original code path but prevent all the above warnings when they occur. Or you break early, but then you have to make sure, you still get a valid `QuadContourSet` (leaving out parts of `__init__` can lead to some attributes not being defined).\nNow there are fewer warnings:\r\n\r\n```\r\n/local/data1/matplotlib/lib/matplotlib/contour.py:1459: UserWarning: Warning: converting a masked element to nan.\r\n  self.zmax = float(z.max())\r\n/local/data1/matplotlib/lib/matplotlib/contour.py:1460: UserWarning: Warning: converting a masked element to nan.\r\n  self.zmin = float(z.min())\r\n<ipython-input-1-1b8de0dba6a5>:5: UserWarning: No contour levels were found within the data range.\r\n```\r\n\r\nProbably few enough to add a smoke test so that it doesn't break again and close this issue.\nMarking as good first issue as it is only to create a test (using the original code above) that catches the warnings. Not sure how the catch-and-match-logic behaves with three warnings though.\r\n\r\nMake sure to add a comment like:\r\n```\r\n# Smoke test for gh#14124\r\n```\r\nin the test.",
  "created_at": "2023-02-26T22:03:38Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_contour.py::test_all_nan\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_no_valid_levels\", \"lib/matplotlib/tests/test_contour.py::test_contour_Nlevels\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]\", \"lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]\", \"lib/matplotlib/tests/test_contour.py::test_labels[png]\", \"lib/matplotlib/tests/test_contour.py::test_corner_mask[png]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels\", \"lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator\", \"lib/matplotlib/tests/test_contour.py::test_circular_contour_warning\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_log_extension[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]\", \"lib/matplotlib/tests/test_contour.py::test_label_nonagg\", \"lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]\", \"lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual[png]\", \"lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]\", \"lib/matplotlib/tests/test_contour.py::test_find_nearest_contour\", \"lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled\", \"lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits\", \"lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements\", \"lib/matplotlib/tests/test_contour.py::test_contour_legend_elements\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]\", \"lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]\", \"lib/matplotlib/tests/test_contour.py::test_subfigure_clabel\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[solid]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]\", \"lib/matplotlib/tests/test_contour.py::test_contour_remove\", \"lib/matplotlib/tests/test_contour.py::test_contour_no_args\", \"lib/matplotlib/tests/test_contour.py::test_bool_autolevel\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.819808",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}