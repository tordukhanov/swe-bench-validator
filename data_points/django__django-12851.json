{
  "repo": "django/django",
  "instance_id": "django__django-12851",
  "base_commit": "ccb1cfb64e919e163c51995ed99bff3c92d7d006",
  "patch": "diff --git a/django/template/defaulttags.py b/django/template/defaulttags.py\n--- a/django/template/defaulttags.py\n+++ b/django/template/defaulttags.py\n@@ -8,6 +8,7 @@\n \n from django.conf import settings\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.html import conditional_escape, format_html\n from django.utils.lorem_ipsum import paragraphs, words\n from django.utils.safestring import mark_safe\n@@ -261,6 +262,7 @@ def _get_context_stack_frame(self, context):\n \n \n class IfEqualNode(Node):\n+    # RemovedInDjango40Warning.\n     child_nodelists = ('nodelist_true', 'nodelist_false')\n \n     def __init__(self, var1, var2, nodelist_true, nodelist_false, negate):\n@@ -820,6 +822,7 @@ def do_for(parser, token):\n \n \n def do_ifequal(parser, token, negate):\n+    # RemovedInDjango40Warning.\n     bits = list(token.split_contents())\n     if len(bits) != 3:\n         raise TemplateSyntaxError(\"%r takes two arguments\" % bits[0])\n@@ -853,6 +856,10 @@ def ifequal(parser, token):\n             ...\n         {% endifnotequal %}\n     \"\"\"\n+    warnings.warn(\n+        'The {% ifequal %} template tag is deprecated in favor of {% if %}.',\n+        RemovedInDjango40Warning,\n+    )\n     return do_ifequal(parser, token, False)\n \n \n@@ -862,6 +869,11 @@ def ifnotequal(parser, token):\n     Output the contents of the block if the two arguments are not equal.\n     See ifequal.\n     \"\"\"\n+    warnings.warn(\n+        'The {% ifnotequal %} template tag is deprecated in favor of '\n+        '{% if %}.',\n+        RemovedInDjango40Warning,\n+    )\n     return do_ifequal(parser, token, True)\n \n \n",
  "test_patch": "diff --git a/tests/template_tests/syntax_tests/test_autoescape.py b/tests/template_tests/syntax_tests/test_autoescape.py\n--- a/tests/template_tests/syntax_tests/test_autoescape.py\n+++ b/tests/template_tests/syntax_tests/test_autoescape.py\n@@ -1,5 +1,6 @@\n from django.template import TemplateSyntaxError\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.safestring import mark_safe\n \n from ..utils import SafeClass, UnsafeClass, setup\n@@ -81,6 +82,7 @@ def test_autoescape_filtertag01(self):\n         with self.assertRaises(TemplateSyntaxError):\n             self.engine.render_to_string('autoescape-filtertag01', {'first': '<a>'})\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n     @setup({'autoescape-ifequal01': '{% ifequal var \"this & that\" %}yes{% endifequal %}'})\n     def test_autoescape_ifequal01(self):\n         \"\"\"\ndiff --git a/tests/template_tests/syntax_tests/test_if_equal.py b/tests/template_tests/syntax_tests/test_if_equal.py\n--- a/tests/template_tests/syntax_tests/test_if_equal.py\n+++ b/tests/template_tests/syntax_tests/test_if_equal.py\n@@ -1,10 +1,12 @@\n from django.template import TemplateSyntaxError\n from django.template.defaulttags import IfEqualNode\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from ..utils import setup\n \n \n+@ignore_warnings(category=RemovedInDjango40Warning)\n class IfEqualTagTests(SimpleTestCase):\n \n     @setup({'ifequal01': '{% ifequal a b %}yes{% endifequal %}'})\n@@ -196,6 +198,7 @@ def test_ifequal_filter05(self):\n         self.assertEqual(output, 'x')\n \n \n+@ignore_warnings(category=RemovedInDjango40Warning)\n class IfNotEqualTagTests(SimpleTestCase):\n \n     @setup({'ifnotequal01': '{% ifnotequal a b %}yes{% endifnotequal %}'})\n@@ -224,7 +227,31 @@ def test_one_var(self):\n             self.engine.render_to_string('one_var', {'a': 1})\n \n \n-class IfEqualTests(SimpleTestCase):\n+class DeprecationTests(SimpleTestCase):\n+    @setup(\n+        {'ifequal_warning': '{% ifequal a b %}yes{% endifequal %}'},\n+        test_once=True,\n+    )\n+    def test_ifequal_warning(self):\n+        msg = (\n+            'The {% ifequal %} template tag is deprecated in favor of '\n+            '{% if %}.'\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango40Warning, msg):\n+            self.engine.render_to_string('ifequal_warning', {'a': 1, 'b': 2})\n+\n+    @setup(\n+        {'ifnotequal_warning': '{% ifnotequal a b %}yes{% endifnoequal %}'},\n+        test_once=True,\n+    )\n+    def test_ifnotequal_warning(self):\n+        msg = (\n+            'The {% ifnotequal %} template tag is deprecated in favor of '\n+            '{% if %}.'\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango40Warning, msg):\n+            self.engine.render_to_string('ifnotequal_warning', {'a': 1, 'b': 2})\n+\n     def test_repr(self):\n         node = IfEqualNode(var1='a', var2='b', nodelist_true=[], nodelist_false=[], negate=False)\n         self.assertEqual(repr(node), '<IfEqualNode>')\ndiff --git a/tests/template_tests/syntax_tests/test_resetcycle.py b/tests/template_tests/syntax_tests/test_resetcycle.py\n--- a/tests/template_tests/syntax_tests/test_resetcycle.py\n+++ b/tests/template_tests/syntax_tests/test_resetcycle.py\n@@ -75,9 +75,9 @@ def test_resetcycle09(self):\n     @setup({'resetcycle10': \"{% for i in test %}\"\n                             \"{% cycle 'X' 'Y' 'Z' as XYZ %}\"\n                             \"{% cycle 'a' 'b' 'c' as abc %}\"\n-                            \"{% ifequal i 1 %}\"\n+                            \"{% if i == 1 %}\"\n                             \"{% resetcycle abc %}\"\n-                            \"{% endifequal %}\"\n+                            \"{% endif %}\"\n                             \"{% endfor %}\"})\n     def test_resetcycle10(self):\n         output = self.engine.render_to_string('resetcycle10', {'test': list(range(5))})\n@@ -86,9 +86,9 @@ def test_resetcycle10(self):\n     @setup({'resetcycle11': \"{% for i in test %}\"\n                             \"{% cycle 'X' 'Y' 'Z' as XYZ %}\"\n                             \"{% cycle 'a' 'b' 'c' as abc %}\"\n-                            \"{% ifequal i 1 %}\"\n+                            \"{% if i == 1 %}\"\n                             \"{% resetcycle XYZ %}\"\n-                            \"{% endifequal %}\"\n+                            \"{% endif %}\"\n                             \"{% endfor %}\"})\n     def test_resetcycle11(self):\n         output = self.engine.render_to_string('resetcycle11', {'test': list(range(5))})\ndiff --git a/tests/template_tests/test_nodelist.py b/tests/template_tests/test_nodelist.py\n--- a/tests/template_tests/test_nodelist.py\n+++ b/tests/template_tests/test_nodelist.py\n@@ -1,10 +1,10 @@\n-from unittest import TestCase\n-\n from django.template import Context, Engine\n from django.template.base import TextNode, VariableNode\n+from django.test import SimpleTestCase, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n \n-class NodelistTest(TestCase):\n+class NodelistTest(SimpleTestCase):\n \n     @classmethod\n     def setUpClass(cls):\n@@ -21,6 +21,7 @@ def test_if(self):\n         vars = template.nodelist.get_nodes_by_type(VariableNode)\n         self.assertEqual(len(vars), 1)\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_ifequal(self):\n         template = self.engine.from_string('{% ifequal x y %}{{ a }}{% endifequal %}')\n         vars = template.nodelist.get_nodes_by_type(VariableNode)\n@@ -32,7 +33,7 @@ def test_ifchanged(self):\n         self.assertEqual(len(vars), 1)\n \n \n-class TextNodeTest(TestCase):\n+class TextNodeTest(SimpleTestCase):\n \n     def test_textnode_repr(self):\n         engine = Engine()\n@@ -45,7 +46,7 @@ def test_textnode_repr(self):\n             self.assertEqual(repr(texts[0]), reprtext)\n \n \n-class ErrorIndexTest(TestCase):\n+class ErrorIndexTest(SimpleTestCase):\n     \"\"\"\n     Checks whether index of error is calculated correctly in\n     template debugger in for loops. Refs ticket #5831\n",
  "problem_statement": "Remove ifequal from the template language.\nDescription\n\t\nNo modern project uses ifequal. No one recommends it. I argue it is taking up valuable bytes in the project. Let's remove it.\n",
  "hints_text": "Seems like a good idea, although I am afraid we may get more pushback regarding \"needless deprecations\" from old, large Django projects that use it. A middle ground could be to remove it from the documentation. Would you like to write to the DevelopersMailingList to see what others think?\nThe smart if tag which made ifequal redundant was introduced in Django 1.2. Really, ifequal should have been deprecated then. I agree this is a good candidate for deprecation, and I'd rather take a bit of flak for \"needless\" deprecations than keep tested (?) but undocumented code around forever.\n​Submitted to the dev mailing list.\nIn a3830f6: Refs #25236 -- Removed ifequal/ifnotequal usage.\nIn 787cc7a: Refs #25236 -- Discouraged use of ifequal/ifnotequal template tags.\nMoving to \"Someday/Maybe\" as we have multiple complaints on the ​mailing list that updating projects for this removal will be too onerous to justify the cleanup.\nIn 21128793: [1.8.x] Refs #25236 -- Discouraged use of ifequal/ifnotequal template tags. Backport of 787cc7aa843d5c0834f56b5f8ae03b86ce553c51 from master",
  "created_at": "2020-05-03T14:57:24Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_ifequal_warning (template_tests.syntax_tests.test_if_equal.DeprecationTests)\", \"test_ifnotequal_warning (template_tests.syntax_tests.test_if_equal.DeprecationTests)\"]",
  "PASS_TO_PASS": "[\"test_textnode_repr (template_tests.test_nodelist.TextNodeTest)\", \"test_correct_exception_index (template_tests.test_nodelist.ErrorIndexTest)\", \"test_for (template_tests.test_nodelist.NodelistTest)\", \"test_if (template_tests.test_nodelist.NodelistTest)\", \"test_ifchanged (template_tests.test_nodelist.NodelistTest)\", \"test_ifequal (template_tests.test_nodelist.NodelistTest)\", \"test_repr (template_tests.syntax_tests.test_if_equal.DeprecationTests)\", \"test_autoescape_filters01 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_filters02 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_filtertag01 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_ifequal01 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_literals01 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_lookup01 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_stringiterations01 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag01 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag02 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag03 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag04 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag05 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag06 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag07 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag08 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag09 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_autoescape_tag10 (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_invalid_arg (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_no_arg (template_tests.syntax_tests.test_autoescape.AutoescapeTagTests)\", \"test_resetcycle01 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle02 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle03 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle04 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle05 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle06 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle07 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle08 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle09 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle10 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_resetcycle11 (template_tests.syntax_tests.test_resetcycle.ResetCycleTagTests)\", \"test_ifnotequal01 (template_tests.syntax_tests.test_if_equal.IfNotEqualTagTests)\", \"test_ifnotequal02 (template_tests.syntax_tests.test_if_equal.IfNotEqualTagTests)\", \"test_ifnotequal03 (template_tests.syntax_tests.test_if_equal.IfNotEqualTagTests)\", \"test_ifnotequal04 (template_tests.syntax_tests.test_if_equal.IfNotEqualTagTests)\", \"test_one_var (template_tests.syntax_tests.test_if_equal.IfNotEqualTagTests)\", \"test_ifequal01 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal02 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal03 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal04 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal05 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal06 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal07 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal08 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal09 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal10 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_filter01 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_filter02 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_filter03 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_filter04 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_filter05 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric01 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric02 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric03 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric04 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric05 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric06 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric07 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric08 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric09 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric10 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric11 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_numeric12 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split01 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split02 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split03 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split04 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split05 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split06 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split07 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split08 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split09 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\", \"test_ifequal_split10 (template_tests.syntax_tests.test_if_equal.IfEqualTagTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.636399",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}