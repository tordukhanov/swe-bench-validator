{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14092",
  "base_commit": "df7dd8391148a873d157328a4f0328528a0c4ed9",
  "patch": "diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py\n--- a/sklearn/neighbors/nca.py\n+++ b/sklearn/neighbors/nca.py\n@@ -13,6 +13,7 @@\n import numpy as np\n import sys\n import time\n+import numbers\n from scipy.optimize import minimize\n from ..utils.extmath import softmax\n from ..metrics import pairwise_distances\n@@ -299,7 +300,8 @@ def _validate_params(self, X, y):\n \n         # Check the preferred dimensionality of the projected space\n         if self.n_components is not None:\n-            check_scalar(self.n_components, 'n_components', int, 1)\n+            check_scalar(\n+                self.n_components, 'n_components', numbers.Integral, 1)\n \n             if self.n_components > X.shape[1]:\n                 raise ValueError('The preferred dimensionality of the '\n@@ -318,9 +320,9 @@ def _validate_params(self, X, y):\n                                  .format(X.shape[1],\n                                          self.components_.shape[1]))\n \n-        check_scalar(self.max_iter, 'max_iter', int, 1)\n-        check_scalar(self.tol, 'tol', float, 0.)\n-        check_scalar(self.verbose, 'verbose', int, 0)\n+        check_scalar(self.max_iter, 'max_iter', numbers.Integral, 1)\n+        check_scalar(self.tol, 'tol', numbers.Real, 0.)\n+        check_scalar(self.verbose, 'verbose', numbers.Integral, 0)\n \n         if self.callback is not None:\n             if not callable(self.callback):\n",
  "test_patch": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -129,7 +129,7 @@ def test_params_validation():\n     # TypeError\n     assert_raises(TypeError, NCA(max_iter='21').fit, X, y)\n     assert_raises(TypeError, NCA(verbose='true').fit, X, y)\n-    assert_raises(TypeError, NCA(tol=1).fit, X, y)\n+    assert_raises(TypeError, NCA(tol='1').fit, X, y)\n     assert_raises(TypeError, NCA(n_components='invalid').fit, X, y)\n     assert_raises(TypeError, NCA(warm_start=1).fit, X, y)\n \n@@ -518,3 +518,17 @@ def test_convergence_warning():\n     assert_warns_message(ConvergenceWarning,\n                          '[{}] NCA did not converge'.format(cls_name),\n                          nca.fit, iris_data, iris_target)\n+\n+\n+@pytest.mark.parametrize('param, value', [('n_components', np.int32(3)),\n+                                          ('max_iter', np.int32(100)),\n+                                          ('tol', np.float32(0.0001))])\n+def test_parameters_valid_types(param, value):\n+    # check that no error is raised when parameters have numpy integer or\n+    # floating types.\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+\n+    X = iris_data\n+    y = iris_target\n+\n+    nca.fit(X, y)\n",
  "problem_statement": "NCA fails in GridSearch due to too strict parameter checks\nNCA checks its parameters to have a specific type, which can easily fail in a GridSearch due to how param grid is made.\r\n\r\nHere is an example:\r\n```python\r\nimport numpy as np\r\n\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.model_selection import GridSearchCV\r\nfrom sklearn.neighbors import NeighborhoodComponentsAnalysis\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\n\r\nX = np.random.random_sample((100, 10))\r\ny = np.random.randint(2, size=100)\r\n\r\nnca = NeighborhoodComponentsAnalysis()\r\nknn = KNeighborsClassifier()\r\n\r\npipe = Pipeline([('nca', nca),\r\n                 ('knn', knn)])\r\n                \r\nparams = {'nca__tol': [0.1, 0.5, 1],\r\n          'nca__n_components': np.arange(1, 10)}\r\n          \r\ngs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\r\ngs.fit(X,y)\r\n```\r\n\r\nThe issue is that for `tol`: 1 is not a float, and for  `n_components`: np.int64 is not int\r\n\r\nBefore proposing a fix for this specific situation, I'd like to have your general opinion about parameter checking.  \r\nI like this idea of common parameter checking tool introduced with the NCA PR. What do you think about extending it across the code-base (or at least for new or recent estimators) ?\r\n\r\nCurrently parameter checking is not always done or often partially done, and is quite redundant. For instance, here is the input validation of lda:\r\n```python\r\ndef _check_params(self):\r\n        \"\"\"Check model parameters.\"\"\"\r\n        if self.n_components <= 0:\r\n            raise ValueError(\"Invalid 'n_components' parameter: %r\"\r\n                             % self.n_components)\r\n\r\n        if self.total_samples <= 0:\r\n            raise ValueError(\"Invalid 'total_samples' parameter: %r\"\r\n                             % self.total_samples)\r\n\r\n        if self.learning_offset < 0:\r\n            raise ValueError(\"Invalid 'learning_offset' parameter: %r\"\r\n                             % self.learning_offset)\r\n\r\n        if self.learning_method not in (\"batch\", \"online\"):\r\n            raise ValueError(\"Invalid 'learning_method' parameter: %r\"\r\n                             % self.learning_method)\r\n```\r\nmost params aren't checked and for those who are there's a lot of duplicated code.\r\n\r\nA propose to be upgrade the new tool to be able to check open/closed intervals (currently only closed) and list membership.\r\n\r\nThe api would be something like that:\r\n```\r\ncheck_param(param, name, valid_options)\r\n```\r\nwhere valid_options would be a dict of `type: constraint`. e.g for the `beta_loss` param of `NMF`, it can be either a float or a string in a list, which would give\r\n```\r\nvalid_options = {numbers.Real: None,  # None for no constraint\r\n                 str: ['frobenius', 'kullback-leibler', 'itakura-saito']}\r\n```\r\nSometimes a parameter can only be positive or within a given interval, e.g. `l1_ratio` of `LogisticRegression` must be between 0 and 1, which would give\r\n```\r\nvalid_options = {numbers.Real: Interval(0, 1, closed='both')}\r\n```\r\npositivity of e.g. `max_iter` would be `numbers.Integral: Interval(left=1)`.\n",
  "hints_text": "I have developed a framework, experimenting with parameter verification: https://github.com/thomasjpfan/skconfig (Don't expect the API to be stable)\r\n\r\nYour idea of using a simple dict for union types is really nice!\r\n\r\nEdit: I am currently trying out another idea. I'll update this issue when it becomes something presentable.\nIf I understood correctly your package is designed for a sklearn user, who has to implement its validator for each estimator, or did I get it wrong ?\r\nI think we want to keep the param validation inside the estimators.\r\n\r\n> Edit: I am currently trying out another idea. I'll update this issue when it becomes something presentable.\r\n\r\nmaybe you can pitch me and if you want I can give a hand :)\nI would have loved to using the typing system to get this to work:\r\n\r\n```py\r\ndef __init__(\r\n    self,\r\n    C: Annotated[float, Range('[0, Inf)')],\r\n    ...)\r\n```\r\n\r\nbut that would have to wait for [PEP 593](https://www.python.org/dev/peps/pep-0593/). In the end, I would want the validator to be a part of sklearn estimators. Using typing (as above) is a natural choice, since it keeps the parameter and its constraint physically close to each other.\r\n\r\nIf we can't use typing, these constraints can be place in a `_validate_parameters` method. This will be called at the beginning of fit to do parameter validation. Estimators that need more validation will overwrite the method, call `super()._validate_parameters` and do more validation. For example, `LogesticRegression`'s `penalty='l2'` only works for specify solvers. `skconfig` defines a framework for handling these situations, but I think it would be too hard to learn.\n>  Using typing (as above) is a natural choice\r\n\r\nI agree, and to go further it would be really nice to use them for the coverage to check that every possible type of a parameter is covered by tests\r\n\r\n> If we can't use typing, these constraints can be place in a _validate_parameters method. \r\n\r\nThis is already the case for a subset of the estimators (`_check_params` or `_validate_input`). But it's often incomplete.\r\n\r\n> skconfig defines a framework for handling these situations, but I think it would be too hard to learn.\r\n\r\nYour framework does way more than what I proposed. Maybe we can do this in 2 steps:\r\nFirst, a simple single param check which only checks its type and if its value is acceptable in general (e.g. positive for a number of clusters). This will raise a standard error message\r\nThen a more advanced check, depending on the data (e.g. number of clusters should be < n_samples) or consistency across params (e.g. solver + penalty). These checks require more elaborate error messages.\r\n\r\nwdyt ?",
  "created_at": "2019-06-14T14:16:17Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/neighbors/tests/test_nca.py::test_parameters_valid_types[n_components-value0]\", \"sklearn/neighbors/tests/test_nca.py::test_parameters_valid_types[max_iter-value1]\", \"sklearn/neighbors/tests/test_nca.py::test_parameters_valid_types[tol-value2]\"]",
  "PASS_TO_PASS": "[\"sklearn/neighbors/tests/test_nca.py::test_simple_example\", \"sklearn/neighbors/tests/test_nca.py::test_toy_example_collapse_points\", \"sklearn/neighbors/tests/test_nca.py::test_finite_differences\", \"sklearn/neighbors/tests/test_nca.py::test_params_validation\", \"sklearn/neighbors/tests/test_nca.py::test_transformation_dimensions\", \"sklearn/neighbors/tests/test_nca.py::test_n_components\", \"sklearn/neighbors/tests/test_nca.py::test_init_transformation\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-3-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-3-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-3-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-3-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-5-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-5-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-5-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-5-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-7-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-7-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-7-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-7-11]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-11-3]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-11-5]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-11-7]\", \"sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-11-11]\", \"sklearn/neighbors/tests/test_nca.py::test_warm_start_validation\", \"sklearn/neighbors/tests/test_nca.py::test_warm_start_effectiveness\", \"sklearn/neighbors/tests/test_nca.py::test_verbose[pca]\", \"sklearn/neighbors/tests/test_nca.py::test_verbose[lda]\", \"sklearn/neighbors/tests/test_nca.py::test_verbose[identity]\", \"sklearn/neighbors/tests/test_nca.py::test_verbose[random]\", \"sklearn/neighbors/tests/test_nca.py::test_verbose[precomputed]\", \"sklearn/neighbors/tests/test_nca.py::test_no_verbose\", \"sklearn/neighbors/tests/test_nca.py::test_singleton_class\", \"sklearn/neighbors/tests/test_nca.py::test_one_class\", \"sklearn/neighbors/tests/test_nca.py::test_callback\", \"sklearn/neighbors/tests/test_nca.py::test_expected_transformation_shape\", \"sklearn/neighbors/tests/test_nca.py::test_convergence_warning\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.002516",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}