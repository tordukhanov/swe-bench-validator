{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-11264",
  "base_commit": "a4f8e3d2a266fe4a253b449214806562ab83dda5",
  "patch": "diff --git a/sklearn/utils/extmath.py b/sklearn/utils/extmath.py\n--- a/sklearn/utils/extmath.py\n+++ b/sklearn/utils/extmath.py\n@@ -15,8 +15,7 @@\n import warnings\n \n import numpy as np\n-from scipy import linalg\n-from scipy.sparse import issparse, csr_matrix\n+from scipy import linalg, sparse\n \n from . import check_random_state, deprecated\n from .fixes import np_version\n@@ -60,9 +59,9 @@ def row_norms(X, squared=False):\n \n     Performs no input validation.\n     \"\"\"\n-    if issparse(X):\n-        if not isinstance(X, csr_matrix):\n-            X = csr_matrix(X)\n+    if sparse.issparse(X):\n+        if not isinstance(X, sparse.csr_matrix):\n+            X = sparse.csr_matrix(X)\n         norms = csr_row_norms(X)\n     else:\n         norms = np.einsum('ij,ij->i', X, X)\n@@ -131,7 +130,7 @@ def safe_sparse_dot(a, b, dense_output=False):\n     dot_product : array or sparse matrix\n         sparse if ``a`` or ``b`` is sparse and ``dense_output=False``.\n     \"\"\"\n-    if issparse(a) or issparse(b):\n+    if sparse.issparse(a) or sparse.issparse(b):\n         ret = a * b\n         if dense_output and hasattr(ret, \"toarray\"):\n             ret = ret.toarray()\n@@ -307,6 +306,12 @@ def randomized_svd(M, n_components, n_oversamples=10, n_iter='auto',\n       analysis\n       A. Szlam et al. 2014\n     \"\"\"\n+    if isinstance(M, (sparse.lil_matrix, sparse.dok_matrix)):\n+        warnings.warn(\"Calculating SVD of a {} is expensive. \"\n+                      \"csr_matrix is more efficient.\".format(\n+                          type(M).__name__),\n+                      sparse.SparseEfficiencyWarning)\n+\n     random_state = check_random_state(random_state)\n     n_random = n_components + n_oversamples\n     n_samples, n_features = M.shape\n@@ -620,7 +625,7 @@ def safe_min(X):\n     Adapated from http://stackoverflow.com/q/13426580\n \n     \"\"\"\n-    if issparse(X):\n+    if sparse.issparse(X):\n         if len(X.data) == 0:\n             return 0\n         m = X.data.min()\n@@ -633,7 +638,7 @@ def make_nonnegative(X, min_value=0):\n     \"\"\"Ensure `X.min()` >= `min_value`.\"\"\"\n     min_ = safe_min(X)\n     if min_ < min_value:\n-        if issparse(X):\n+        if sparse.issparse(X):\n             raise ValueError(\"Cannot make the data matrix\"\n                              \" nonnegative because it is sparse.\"\n                              \" Adding a value to every entry would\"\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_extmath.py b/sklearn/utils/tests/test_extmath.py\n--- a/sklearn/utils/tests/test_extmath.py\n+++ b/sklearn/utils/tests/test_extmath.py\n@@ -365,6 +365,21 @@ def test_randomized_svd_power_iteration_normalizer():\n             assert_greater(15, np.abs(error_2 - error))\n \n \n+def test_randomized_svd_sparse_warnings():\n+    # randomized_svd throws a warning for lil and dok matrix\n+    rng = np.random.RandomState(42)\n+    X = make_low_rank_matrix(50, 20, effective_rank=10, random_state=rng)\n+    n_components = 5\n+    for cls in (sparse.lil_matrix, sparse.dok_matrix):\n+        X = cls(X)\n+        assert_warns_message(\n+            sparse.SparseEfficiencyWarning,\n+            \"Calculating SVD of a {} is expensive. \"\n+            \"csr_matrix is more efficient.\".format(cls.__name__),\n+            randomized_svd, X, n_components, n_iter=1,\n+            power_iteration_normalizer='none')\n+\n+\n def test_svd_flip():\n     # Check that svd_flip works in both situations, and reconstructs input.\n     rs = np.random.RandomState(1999)\n",
  "problem_statement": "randomized_svd is slow for dok_matrix and lil_matrix\n#### Description\r\n\r\n`sklearn.utils.extmath.randomized_svd` (and its object-oriented interface, `sklearn.decomposition.TruncatedSVD`) is extremely slow for certain types of sparse matrix.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```\r\n>>> import numpy as np\r\n>>> import scipy.sparse as sp\r\n>>> from sklearn.utils.extmath import randomized_svd\r\n>>> import timeit\r\n>>> \r\n>>> def test(X, seed=42):\r\n>>> \tU, S, VT = randomized_svd(X, 50, random_state=seed)\r\n>>> \r\n>>> np.random.seed(42)\r\n>>> X = np.random.normal(0,1,[1000,1000]) * np.random.poisson(0.1, [1000,1000])\r\n>>> X = sp.csr_matrix(X)\r\n>>> %timeit -n 50 test(X)\r\n50 loops, best of 3: 381 ms per loop\r\n>>> \r\n>>> X = sp.csc_matrix(X)\r\n>>> %timeit -n 50 test(X)\r\n50 loops, best of 3: 400 ms per loop\r\n>>> \r\n>>> X = sp.bsr_matrix(X)\r\n>>> %timeit -n 50 test(X)\r\n50 loops, best of 3: 392 ms per loop\r\n>>> \r\n>>> X = sp.coo_matrix(X)\r\n>>> %timeit -n 50 test(X)\r\n50 loops, best of 3: 578 ms per loop\r\n>>> \r\n>>> X = sp.lil_matrix(X)\r\n>>> %timeit -n 50 test(X)\r\n50 loops, best of 3: 1.45 s per loop\r\n>>> \r\n>>> X = sp.dok_matrix(X)\r\n>>> %timeit -n 50 test(X)\r\n50 loops, best of 3: 22.1 s per loop\r\n```\r\n\r\n#### Expected Results\r\n\r\nEither all sparse matrices should be processed in roughly the same amount of time, or a warning should be printed.\r\n\r\n#### Actual Results\r\n\r\n`randomized_svd` silently takes up to 50x longer than necessary.\r\n\r\n#### Versions\r\n\r\nWindows-10-10.0.17134-SP0\r\nPython 3.6.0 |Anaconda 4.3.1 (64-bit)| (default, Dec 23 2016, 11:57:41) [MSC v.1900 64 bit (AMD64)]\r\nNumPy 1.14.4\r\nSciPy 1.1.0\r\nScikit-Learn 0.19.1\r\n\r\nAlso tested on:\r\n\r\nLinux-4.16.11-1-ARCH-x86_64-with-arch-Arch-Linux\r\nPython 3.6.5 (default, May 11 2018, 04:00:52)\r\n[GCC 8.1.0]\r\nNumPy 1.14.5\r\nSciPy 1.1.0\r\nScikit-Learn 0.19.1\r\n\n",
  "hints_text": "",
  "created_at": "2018-06-14T18:10:41Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_extmath.py::test_randomized_svd_sparse_warnings\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_extmath.py::test_density\", \"sklearn/utils/tests/test_extmath.py::test_uniform_weights\", \"sklearn/utils/tests/test_extmath.py::test_random_weights\", \"sklearn/utils/tests/test_extmath.py::test_logsumexp\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_low_rank_all_dtypes[int32]\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_low_rank_all_dtypes[int64]\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_low_rank_all_dtypes[float32]\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_low_rank_all_dtypes[float64]\", \"sklearn/utils/tests/test_extmath.py::test_norm_squared_norm\", \"sklearn/utils/tests/test_extmath.py::test_row_norms[float32]\", \"sklearn/utils/tests/test_extmath.py::test_row_norms[float64]\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_low_rank_with_noise\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_infinite_rank\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_transpose_consistency\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_power_iteration_normalizer\", \"sklearn/utils/tests/test_extmath.py::test_svd_flip\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_sign_flip\", \"sklearn/utils/tests/test_extmath.py::test_randomized_svd_sign_flip_with_transpose\", \"sklearn/utils/tests/test_extmath.py::test_cartesian\", \"sklearn/utils/tests/test_extmath.py::test_logistic_sigmoid\", \"sklearn/utils/tests/test_extmath.py::test_incremental_variance_update_formulas\", \"sklearn/utils/tests/test_extmath.py::test_incremental_variance_numerical_stability\", \"sklearn/utils/tests/test_extmath.py::test_incremental_variance_ddof\", \"sklearn/utils/tests/test_extmath.py::test_vector_sign_flip\", \"sklearn/utils/tests/test_extmath.py::test_softmax\", \"sklearn/utils/tests/test_extmath.py::test_stable_cumsum\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.960007",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}