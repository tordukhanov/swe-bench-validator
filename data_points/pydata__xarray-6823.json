{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-6823",
  "base_commit": "a17a00f8f95195838e1d7360426454c8ed0570ea",
  "patch": "diff --git a/xarray/core/common.py b/xarray/core/common.py\n--- a/xarray/core/common.py\n+++ b/xarray/core/common.py\n@@ -163,9 +163,22 @@ def _repr_html_(self):\n             return f\"<pre>{escape(repr(self))}</pre>\"\n         return formatting_html.array_repr(self)\n \n-    def __format__(self: Any, format_spec: str) -> str:\n-        # we use numpy: scalars will print fine and arrays will raise\n-        return self.values.__format__(format_spec)\n+    def __format__(self: Any, format_spec: str = \"\") -> str:\n+        if format_spec != \"\":\n+            if self.shape == ():\n+                # Scalar values might be ok use format_spec with instead of repr:\n+                return self.data.__format__(format_spec)\n+            else:\n+                # TODO: If it's an array the formatting.array_repr(self) should\n+                # take format_spec as an input. If we'd only use self.data we\n+                # lose all the information about coords for example which is\n+                # important information:\n+                raise NotImplementedError(\n+                    \"Using format_spec is only supported\"\n+                    f\" when shape is (). Got shape = {self.shape}.\"\n+                )\n+        else:\n+            return self.__repr__()\n \n     def _iter(self: Any) -> Iterator[Any]:\n         for n in range(len(self)):\n",
  "test_patch": "diff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py\n--- a/xarray/tests/test_formatting.py\n+++ b/xarray/tests/test_formatting.py\n@@ -391,7 +391,10 @@ def test_diff_dataset_repr(self) -> None:\n     def test_array_repr(self) -> None:\n         ds = xr.Dataset(coords={\"foo\": [1, 2, 3], \"bar\": [1, 2, 3]})\n         ds[(1, 2)] = xr.DataArray([0], dims=\"test\")\n-        actual = formatting.array_repr(ds[(1, 2)])\n+        ds_12 = ds[(1, 2)]\n+\n+        # Test repr function behaves correctly:\n+        actual = formatting.array_repr(ds_12)\n         expected = dedent(\n             \"\"\"\\\n         <xarray.DataArray (1, 2) (test: 1)>\n@@ -401,6 +404,14 @@ def test_array_repr(self) -> None:\n \n         assert actual == expected\n \n+        # Test repr, str prints returns correctly as well:\n+        assert repr(ds_12) == expected\n+        assert str(ds_12) == expected\n+\n+        # f-strings (aka format(...)) by default should use the repr:\n+        actual = f\"{ds_12}\"\n+        assert actual == expected\n+\n         with xr.set_options(display_expand_data=False):\n             actual = formatting.array_repr(ds[(1, 2)])\n             expected = dedent(\n@@ -422,24 +433,27 @@ def test_array_repr_variable(self) -> None:\n \n     @requires_dask\n     def test_array_scalar_format(self) -> None:\n-        var = xr.DataArray(0)\n-        assert var.__format__(\"\") == \"0\"\n-        assert var.__format__(\"d\") == \"0\"\n-        assert var.__format__(\".2f\") == \"0.00\"\n+        # Test numpy scalars:\n+        var = xr.DataArray(np.array(0))\n+        assert format(var, \"\") == repr(var)\n+        assert format(var, \"d\") == \"0\"\n+        assert format(var, \".2f\") == \"0.00\"\n \n-        var = xr.DataArray([0.1, 0.2])\n-        assert var.__format__(\"\") == \"[0.1 0.2]\"\n-        with pytest.raises(TypeError) as excinfo:\n-            var.__format__(\".2f\")\n-        assert \"unsupported format string passed to\" in str(excinfo.value)\n+        # Test dask scalars, not supported however:\n+        import dask.array as da\n \n-        # also check for dask\n-        var = var.chunk(chunks={\"dim_0\": 1})\n-        assert var.__format__(\"\") == \"[0.1 0.2]\"\n+        var = xr.DataArray(da.array(0))\n+        assert format(var, \"\") == repr(var)\n         with pytest.raises(TypeError) as excinfo:\n-            var.__format__(\".2f\")\n+            format(var, \".2f\")\n         assert \"unsupported format string passed to\" in str(excinfo.value)\n \n+        # Test numpy arrays raises:\n+        var = xr.DataArray([0.1, 0.2])\n+        with pytest.raises(NotImplementedError) as excinfo:  # type: ignore\n+            format(var, \".2f\")\n+        assert \"Using format_spec is only supported\" in str(excinfo.value)\n+\n \n def test_inline_variable_array_repr_custom_repr() -> None:\n     class CustomArray:\n",
  "problem_statement": "RuntimeError when formatting sparse-backed DataArray in f-string\n### What happened?\r\n\r\nOn upgrading from xarray 2022.3.0 to 2022.6.0, f-string formatting of sparse-backed DataArray raises an exception.\r\n\r\n### What did you expect to happen?\r\n\r\n- Code does not error, or\r\n- A breaking change is listed in the [“Breaking changes”](https://docs.xarray.dev/en/stable/whats-new.html#breaking-changes) section of the docs.\r\n\r\n### Minimal Complete Verifiable Example\r\n\r\n```Python\r\nimport pandas as pd\r\nimport xarray as xr\r\n\r\ns = pd.Series(\r\n    range(4),\r\n    index=pd.MultiIndex.from_product([list(\"ab\"), list(\"cd\")]),\r\n)\r\n\r\nda = xr.DataArray.from_series(s, sparse=True)\r\n\r\nprint(f\"{da}\")\r\n```\r\n\r\n\r\n### MVCE confirmation\r\n\r\n- [X] Minimal example — the example is as focused as reasonably possible to demonstrate the underlying issue in xarray.\r\n- [X] Complete example — the example is self-contained, including all data and the text of any traceback.\r\n- [X] Verifiable example — the example copy & pastes into an IPython prompt or [Binder notebook](https://mybinder.org/v2/gh/pydata/xarray/main?urlpath=lab/tree/doc/examples/blank_template.ipynb), returning the result.\r\n- [X] New issue — a search of GitHub Issues suggests this is not a duplicate.\r\n\r\n### Relevant log output\r\n\r\n```Python\r\n# xarray 2022.3.0:\r\n\r\n<xarray.DataArray (level_0: 2, level_1: 2)>\r\n<COO: shape=(2, 2), dtype=float64, nnz=4, fill_value=nan>                                         \r\nCoordinates:                                     \r\n  * level_0  (level_0) object 'a' 'b'\r\n  * level_1  (level_1) object 'c' 'd'\r\n\r\n# xarray 2022.6.0:\r\n\r\nTraceback (most recent call last):                                                                \r\n  File \"/home/khaeru/bug.py\", line 11, in <module>\r\n    print(f\"{da}\")\r\n  File \"/home/khaeru/.local/lib/python3.10/site-packages/xarray/core/common.py\", line 168, in __format__                                           \r\n    return self.values.__format__(format_spec)\r\n  File \"/home/khaeru/.local/lib/python3.10/site-packages/xarray/core/dataarray.py\", line 685, in values                                            \r\n    return self.variable.values\r\n  File \"/home/khaeru/.local/lib/python3.10/site-packages/xarray/core/variable.py\", line 527, in values                                             \r\n    return _as_array_or_item(self._data)\r\n  File \"/home/khaeru/.local/lib/python3.10/site-packages/xarray/core/variable.py\", line 267, in _as_array_or_item                                                                                   \r\n    data = np.asarray(data)\r\n  File \"/home/khaeru/.local/lib/python3.10/site-packages/sparse/_sparse_array.py\", line 229, in __array__                                                                                           \r\n    raise RuntimeError(\r\nRuntimeError: Cannot convert a sparse array to dense automatically. To manually densify, use the todense method.\r\n```\r\n\r\n\r\n### Anything else we need to know?\r\n\r\nAlong with the versions below, I have confirmed the error occurs with both sparse 0.12 and sparse 0.13.\r\n\r\n### Environment\r\n\r\n<details>\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.10.4 (main, Jun 29 2022, 12:14:53) [GCC 11.2.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 5.15.0-41-generic\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_CA.UTF-8\r\nLOCALE: ('en_CA', 'UTF-8')\r\nlibhdf5: 1.10.7\r\nlibnetcdf: 4.8.1\r\n\r\nxarray: 2022.6.0\r\npandas: 1.4.2\r\nnumpy: 1.22.4\r\nscipy: 1.8.0\r\nnetCDF4: 1.5.8\r\npydap: None\r\nh5netcdf: 0.12.0\r\nh5py: 3.6.0\r\nNio: None\r\nzarr: None\r\ncftime: 1.5.2\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: 1.3.2\r\ndask: 2022.01.0+dfsg\r\ndistributed: 2022.01.0+ds.1\r\nmatplotlib: 3.5.1\r\ncartopy: 0.20.2\r\nseaborn: 0.11.2\r\nnumbagg: None\r\nfsspec: 2022.01.0\r\ncupy: None\r\npint: 0.18\r\nsparse: 0.13.0\r\nflox: None\r\nnumpy_groupies: None\r\nsetuptools: 62.1.0\r\npip: 22.0.2\r\nconda: None\r\npytest: 6.2.5\r\nIPython: 7.31.1\r\nsphinx: 4.5.0\r\n</details>\n",
  "hints_text": "",
  "created_at": "2022-07-25T09:43:21Z",
  "version": "2022.06",
  "FAIL_TO_PASS": "[\"xarray/tests/test_formatting.py::TestFormatting::test_array_repr\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_formatting.py::TestFormatting::test_get_indexer_at_least_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_first_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_array_flat\", \"xarray/tests/test_formatting.py::TestFormatting::test_pretty_print\", \"xarray/tests/test_formatting.py::TestFormatting::test_maybe_truncate\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_timestamp_invalid_pandas_format\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_timestamp_out_of_bounds\", \"xarray/tests/test_formatting.py::TestFormatting::test_attribute_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_array_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_attrs_repr_with_array\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_dataset_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_array_repr_variable\", \"xarray/tests/test_formatting.py::TestFormatting::test_array_scalar_format\", \"xarray/tests/test_formatting.py::test_inline_variable_array_repr_custom_repr\", \"xarray/tests/test_formatting.py::test_set_numpy_options\", \"xarray/tests/test_formatting.py::test_short_numpy_repr\", \"xarray/tests/test_formatting.py::test_large_array_repr_length\", \"xarray/tests/test_formatting.py::test_repr_file_collapsed\", \"xarray/tests/test_formatting.py::test__mapping_repr[50-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[35-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[11-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[1-40-30]\", \"xarray/tests/test_formatting.py::test__element_formatter\"]",
  "environment_setup_commit": "50ea159bfd0872635ebf4281e741f3c87f0bef6b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.896335",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}