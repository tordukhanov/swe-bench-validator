{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13903",
  "base_commit": "99fdff6c86b73018148f9c22f680d6874b0f4f2c",
  "patch": "diff --git a/sympy/printing/fcode.py b/sympy/printing/fcode.py\n--- a/sympy/printing/fcode.py\n+++ b/sympy/printing/fcode.py\n@@ -50,7 +50,9 @@\n     \"exp\": \"exp\",\n     \"erf\": \"erf\",\n     \"Abs\": \"abs\",\n-    \"conjugate\": \"conjg\"\n+    \"conjugate\": \"conjg\",\n+    \"Max\": \"max\",\n+    \"Min\": \"min\"\n }\n \n \ndiff --git a/sympy/printing/octave.py b/sympy/printing/octave.py\n--- a/sympy/printing/octave.py\n+++ b/sympy/printing/octave.py\n@@ -43,6 +43,8 @@\n     \"laguerre\": \"laguerreL\",\n     \"li\": \"logint\",\n     \"loggamma\": \"gammaln\",\n+    \"Max\": \"max\",\n+    \"Min\": \"min\",\n     \"polygamma\": \"psi\",\n     \"Shi\": \"sinhint\",\n     \"Si\": \"sinint\",\n@@ -75,6 +77,7 @@ class OctaveCodePrinter(CodePrinter):\n     # assignment (if False).  FIXME: this should be looked a more carefully\n     # for Octave.\n \n+\n     def __init__(self, settings={}):\n         super(OctaveCodePrinter, self).__init__(settings)\n         self.known_functions = dict(zip(known_fcns_src1, known_fcns_src1))\n@@ -432,6 +435,16 @@ def _print_LambertW(self, expr):\n         return \"lambertw(\" + args + \")\"\n \n \n+    def _nested_binary_math_func(self, expr):\n+        return '{name}({arg1}, {arg2})'.format(\n+            name=self.known_functions[expr.__class__.__name__],\n+            arg1=self._print(expr.args[0]),\n+            arg2=self._print(expr.func(*expr.args[1:]))\n+            )\n+\n+    _print_Max = _print_Min = _nested_binary_math_func\n+\n+\n     def _print_Piecewise(self, expr):\n         if expr.args[-1].cond != True:\n             # We need the last conditional to be a True, otherwise the resulting\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_fcode.py b/sympy/printing/tests/test_fcode.py\n--- a/sympy/printing/tests/test_fcode.py\n+++ b/sympy/printing/tests/test_fcode.py\n@@ -1,6 +1,7 @@\n from sympy import (sin, cos, atan2, log, exp, gamma, conjugate, sqrt,\n     factorial, Integral, Piecewise, Add, diff, symbols, S, Float, Dummy, Eq,\n-    Range, Catalan, EulerGamma, E, GoldenRatio, I, pi, Function, Rational, Integer, Lambda, sign)\n+    Range, Catalan, EulerGamma, E, GoldenRatio, I, pi, Function, Rational, Integer, Lambda, sign,\n+    Max, Min)\n \n from sympy.codegen import For, Assignment\n from sympy.codegen.ast import Declaration, Type, Variable, float32, float64, value_const, real, bool_\n@@ -74,6 +75,7 @@ def test_fcode_Float():\n def test_fcode_functions():\n     x, y = symbols('x,y')\n     assert fcode(sin(x) ** cos(y)) == \"      sin(x)**cos(y)\"\n+    assert fcode(Max(x, y) + Min(x, y)) == \"      max(x, y) + min(x, y)\"\n \n \n #issue 6814\ndiff --git a/sympy/printing/tests/test_octave.py b/sympy/printing/tests/test_octave.py\n--- a/sympy/printing/tests/test_octave.py\n+++ b/sympy/printing/tests/test_octave.py\n@@ -2,7 +2,7 @@\n                         Tuple, Symbol)\n from sympy.core import EulerGamma, GoldenRatio, Catalan, Lambda\n from sympy.functions import (Piecewise, sqrt, ceiling, exp, sin, cos, LambertW,\n-                             sinc)\n+                             sinc, Max, Min)\n from sympy.utilities.pytest import raises\n from sympy.utilities.lambdify import implemented_function\n from sympy.matrices import (eye, Matrix, MatrixSymbol, Identity,\n@@ -38,6 +38,9 @@ def test_Function():\n     assert mcode(sin(x) ** cos(x)) == \"sin(x).^cos(x)\"\n     assert mcode(abs(x)) == \"abs(x)\"\n     assert mcode(ceiling(x)) == \"ceil(x)\"\n+    assert mcode(Max(x, y) + Min(x, y)) == \"max(x, y) + min(x, y)\"\n+    assert mcode(Max(x, y, z)) == \"max(x, max(y, z))\"\n+    assert mcode(Min(x, y, z)) == \"min(x, min(y, z))\"\n \n \n def test_Pow():\n",
  "problem_statement": "max & min\ni found most language cannot be converted into max & min like octave,Fortran and others\r\n(js and R have been fix , thx ;) )\n",
  "hints_text": "A good issue for a beginner to tackle (preferably, adding more than just min and max): see the PRs #13832 and #13840 for an illustration of what needs to be done.\nI want to look into the issue.   Can you please guide me @normalhuman .It is working for fortran. I tried printing using ccode().",
  "created_at": "2018-01-12T11:27:34Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_fcode_functions\", \"test_Function\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_fcode_sign\", \"test_fcode_Pow\", \"test_fcode_Rational\", \"test_fcode_Integer\", \"test_fcode_Float\", \"test_fcode_functions_with_integers\", \"test_fcode_NumberSymbol\", \"test_fcode_complex\", \"test_implicit\", \"test_not_fortran\", \"test_user_functions\", \"test_assign_to\", \"test_line_wrapping\", \"test_fcode_precedence\", \"test_fcode_Logical\", \"test_fcode_Xlogical\", \"test_fcode_Relational\", \"test_wrap_fortran\", \"test_wrap_fortran_keep_d0\", \"test_settings\", \"test_free_form_code_line\", \"test_free_form_continuation_line\", \"test_free_form_comment_line\", \"test_derived_classes\", \"test_indent\", \"test_Matrix_printing\", \"test_fcode_For\", \"test_fcode_Declaration\", \"test_Integer\", \"test_Rational\", \"test_Pow\", \"test_basic_ops\", \"test_1_over_x_and_sqrt\", \"test_mix_number_mult_symbols\", \"test_mix_number_pow_symbols\", \"test_imag\", \"test_constants\", \"test_constants_other\", \"test_boolean\", \"test_Matrices\", \"test_vector_entries_hadamard\", \"test_MatrixSymbol\", \"test_special_matrices\", \"test_containers\", \"test_octave_noninline\", \"test_octave_piecewise\", \"test_octave_piecewise_times_const\", \"test_octave_matrix_assign_to\", \"test_octave_matrix_assign_to_more\", \"test_octave_matrix_1x1\", \"test_octave_matrix_elements\", \"test_octave_boolean\", \"test_trick_indent_with_end_else_words\", \"test_haramard\", \"test_sparse\", \"test_sinc\", \"test_specfun\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.089415",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}