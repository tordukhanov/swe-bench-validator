{
  "repo": "django/django",
  "instance_id": "django__django-15052",
  "base_commit": "25157033e979c134d455d46995a6db0838457d98",
  "patch": "diff --git a/django/contrib/postgres/aggregates/mixins.py b/django/contrib/postgres/aggregates/mixins.py\n--- a/django/contrib/postgres/aggregates/mixins.py\n+++ b/django/contrib/postgres/aggregates/mixins.py\n@@ -30,7 +30,7 @@ def as_sql(self, compiler, connection):\n             sql, sql_params = super().as_sql(compiler, connection, ordering=(\n                 'ORDER BY ' + ', '.join(ordering_expr_sql)\n             ))\n-            return sql, sql_params + ordering_params\n+            return sql, (*sql_params, *ordering_params)\n         return super().as_sql(compiler, connection, ordering='')\n \n     def set_source_expressions(self, exprs):\ndiff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -87,7 +87,7 @@ def as_sql(self, compiler, connection, **extra_context):\n                     compiler, connection, template=template, filter=filter_sql,\n                     **extra_context\n                 )\n-                return sql, params + filter_params\n+                return sql, (*params, *filter_params)\n             else:\n                 copy = self.copy()\n                 copy.filter = None\n",
  "test_patch": "diff --git a/tests/aggregation/test_filter_argument.py b/tests/aggregation/test_filter_argument.py\n--- a/tests/aggregation/test_filter_argument.py\n+++ b/tests/aggregation/test_filter_argument.py\n@@ -141,3 +141,11 @@ def test_filtered_aggregate_ref_multiple_subquery_annotation(self):\n             )\n         )\n         self.assertEqual(aggregate, {'max_rating': 4.5})\n+\n+    def test_filtered_aggregate_on_exists(self):\n+        aggregate = Book.objects.values('publisher').aggregate(\n+            max_rating=Max('rating', filter=Exists(\n+                Book.authors.through.objects.filter(book=OuterRef('pk')),\n+            )),\n+        )\n+        self.assertEqual(aggregate, {'max_rating': 4.5})\n",
  "problem_statement": "Aggregate filtered by an Exists subquery crashes\nDescription\n\t\nFor example:\nBook.objects.values(\"publisher\").aggregate(\n\tmax_rating=Max(\n\t\t\"rating\",\n\t\tfilter=Exists(\n\t\t\tBook.authors.through.objects.filter(book=OuterRef(\"pk\")),\n\t\t),\n\t)\nWill crash with the following traceback:\nTraceback (most recent call last):\n File \"/tests/django/tests/aggregation/test_filter_argument.py\", line 146, in test_filtered_aggregate_with_exists\n\taggregate = Book.objects.values('publisher').aggregate(\n File \"/tests/django/django/db/models/query.py\", line 405, in aggregate\n\treturn query.get_aggregation(self.db, kwargs)\n File \"/tests/django/django/db/models/sql/query.py\", line 501, in get_aggregation\n\tresult = compiler.execute_sql(SINGLE)\n File \"/tests/django/django/db/models/sql/compiler.py\", line 1189, in execute_sql\n\tsql, params = self.as_sql()\n File \"/tests/django/django/db/models/sql/compiler.py\", line 531, in as_sql\n\textra_select, order_by, group_by = self.pre_sql_setup()\n File \"/tests/django/django/db/models/sql/compiler.py\", line 59, in pre_sql_setup\n\tself.setup_query()\n File \"/tests/django/django/db/models/sql/compiler.py\", line 50, in setup_query\n\tself.select, self.klass_info, self.annotation_col_map = self.get_select()\n File \"/tests/django/django/db/models/sql/compiler.py\", line 267, in get_select\n\tsql, params = self.compile(col)\n File \"/tests/django/django/db/models/sql/compiler.py\", line 463, in compile\n\tsql, params = node.as_sql(self, self.connection)\n File \"/tests/django/django/db/models/aggregates.py\", line 90, in as_sql\n\treturn sql, params + filter_params\nTypeError: can only concatenate list (not \"tuple\") to list\nThe following patch should fix the issue:\ndiff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 596a161669..8c4eae7906 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -87,7 +87,7 @@ class Aggregate(Func):\n\t\t\t\t\t compiler, connection, template=template, filter=filter_sql,\n\t\t\t\t\t **extra_context\n\t\t\t\t )\n-\t\t\t\treturn sql, params + filter_params\n+\t\t\t\treturn sql, (*params, *filter_params)\n\t\t\t else:\n\t\t\t\t copy = self.copy()\n\t\t\t\t copy.filter = None\n",
  "hints_text": "",
  "created_at": "2021-11-03T14:48:01Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_filtered_aggregate_on_exists (aggregation.test_filter_argument.FilteredAggregateTests)\"]",
  "PASS_TO_PASS": "[\"test_case_aggregate (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_double_filtered_aggregates (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_excluded_aggregates (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_aggregate_on_annotate (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_aggregate_ref_annotation (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_aggregate_ref_multiple_subquery_annotation (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_aggregate_ref_subquery_annotation (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_aggregates (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_numerical_aggregates (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_filtered_reused_subquery (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_plain_annotate (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_related_aggregates_m2m (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_related_aggregates_m2m_and_fk (aggregation.test_filter_argument.FilteredAggregateTests)\", \"test_sum_star_exception (aggregation.test_filter_argument.FilteredAggregateTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.713307",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}