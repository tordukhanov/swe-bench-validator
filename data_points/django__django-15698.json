{
  "repo": "django/django",
  "instance_id": "django__django-15698",
  "base_commit": "1a78ef2b85467a18ea6d7eaa4b27f67d11c87b9e",
  "patch": "diff --git a/django/template/base.py b/django/template/base.py\n--- a/django/template/base.py\n+++ b/django/template/base.py\n@@ -913,15 +913,18 @@ def _resolve_lookup(self, context):\n                         try:  # method call (assuming no args required)\n                             current = current()\n                         except TypeError:\n-                            signature = inspect.signature(current)\n                             try:\n-                                signature.bind()\n-                            except TypeError:  # arguments *were* required\n-                                current = (\n-                                    context.template.engine.string_if_invalid\n-                                )  # invalid method call\n+                                signature = inspect.signature(current)\n+                            except ValueError:  # No signature found.\n+                                current = context.template.engine.string_if_invalid\n                             else:\n-                                raise\n+                                try:\n+                                    signature.bind()\n+                                except TypeError:  # Arguments *were* required.\n+                                    # Invalid method call.\n+                                    current = context.template.engine.string_if_invalid\n+                                else:\n+                                    raise\n         except Exception as e:\n             template_name = getattr(context, \"template_name\", None) or \"unknown\"\n             logger.debug(\n",
  "test_patch": "diff --git a/tests/template_tests/tests.py b/tests/template_tests/tests.py\n--- a/tests/template_tests/tests.py\n+++ b/tests/template_tests/tests.py\n@@ -183,6 +183,14 @@ def test_node_origin(self):\n         for node in template.nodelist:\n             self.assertEqual(node.origin, template.origin)\n \n+    def test_render_built_in_type_method(self):\n+        \"\"\"\n+        Templates should not crash when rendering methods for built-in types\n+        without required arguments.\n+        \"\"\"\n+        template = self._engine().from_string(\"{{ description.count }}\")\n+        self.assertEqual(template.render(Context({\"description\": \"test\"})), \"\")\n+\n \n class TemplateTests(TemplateTestMixin, SimpleTestCase):\n     debug_engine = False\n",
  "problem_statement": "Templates crash when calling methods for built-in types.\nDescription\n\t \n\t\t(last modified by Daniel)\n\t \nFound during a 2.2 -> 3.2 upgrade:\nGiven a template:\n{{ foo }}\nwhere foo is non-existant, it returns nothing, empty. (That's good)\n{{ foo.count }}\nalso empty (Also good)\n{% include 'second_template.html' with bar=foo %}\nand then in second_template.html having:\n{{ bar.count }}\nresults in\n File \"/Users/daniel/src/django-bug-test/.v/lib/python3.8/site-packages/django/template/base.py\", line 861, in _resolve_lookup\n\tsignature = inspect.signature(current)\n File \"/Users/daniel/.pyenv/versions/3.8.3/lib/python3.8/inspect.py\", line 3093, in signature\n\treturn Signature.from_callable(obj, follow_wrapped=follow_wrapped)\n File \"/Users/daniel/.pyenv/versions/3.8.3/lib/python3.8/inspect.py\", line 2842, in from_callable\n\treturn _signature_from_callable(obj, sigcls=cls,\n File \"/Users/daniel/.pyenv/versions/3.8.3/lib/python3.8/inspect.py\", line 2296, in _signature_from_callable\n\treturn _signature_from_builtin(sigcls, obj,\n File \"/Users/daniel/.pyenv/versions/3.8.3/lib/python3.8/inspect.py\", line 2107, in _signature_from_builtin\n\traise ValueError(\"no signature found for builtin {!r}\".format(func))\nException Type: ValueError at /\nException Value: no signature found for builtin <built-in method count of str object at 0x1100ff2f0>\nOn django 2.2, this would not crash, but resulted in empty (as I expected).\nthis seems to fix it for me:\ndiff --git a/django/template/base.py b/django/template/base.py\nindex a1ab437eca..f95aec5a90 100644\n--- a/django/template/base.py\n+++ b/django/template/base.py\n@@ -913,15 +913,19 @@ def _resolve_lookup(self, context):\n\t\t\t\t\t\t try: # method call (assuming no args required)\n\t\t\t\t\t\t\t current = current()\n\t\t\t\t\t\t except TypeError:\n-\t\t\t\t\t\t\tsignature = inspect.signature(current)\n\t\t\t\t\t\t\t try:\n-\t\t\t\t\t\t\t\tsignature.bind()\n-\t\t\t\t\t\t\texcept TypeError: # arguments *were* required\n-\t\t\t\t\t\t\t\tcurrent = (\n-\t\t\t\t\t\t\t\t\tcontext.template.engine.string_if_invalid\n-\t\t\t\t\t\t\t\t) # invalid method call\n+\t\t\t\t\t\t\t\tsignature = inspect.signature(current)\n+\t\t\t\t\t\t\texcept ValueError: # python builtins might not have signature\n+\t\t\t\t\t\t\t\tcurrent = context.template.engine.string_if_invalid\n\t\t\t\t\t\t\t else:\n-\t\t\t\t\t\t\t\traise\n+\t\t\t\t\t\t\t\ttry:\n+\t\t\t\t\t\t\t\t\tsignature.bind()\n+\t\t\t\t\t\t\t\texcept TypeError: # arguments *were* required\n+\t\t\t\t\t\t\t\t\tcurrent = (\n+\t\t\t\t\t\t\t\t\t\tcontext.template.engine.string_if_invalid\n+\t\t\t\t\t\t\t\t\t) # invalid method call\n+\t\t\t\t\t\t\t\telse:\n+\t\t\t\t\t\t\t\t\traise\n\t\t except Exception as e:\n\t\t\t template_name = getattr(context, \"template_name\", None) or \"unknown\"\n\t\t\t logger.debug(\n",
  "hints_text": "Isn't a bug, that the template resolver tries to step into ''.<some_builtin_method> here? Maybe the for bit in self.lookups: descent could exit as soon as current drops to an empty string?\nThanks for the report. foo may exist, the same error is raised for each method call for bultin types, e.g. def myview(request): return render(request, \"myview.html\", {\"foo\": \"X\"}) myview.html: {{foo.count}} Regression in 09341856ed9008875c1cc883dc0c287670131458.\nâ€‹https://github.com/django/django/pull/15698\nHi Mariusz, Just saw the flag Patch needs improvement is checked. How exactly should I improve the patch, besides that I need to add tests (or only tests need to be added)? I'm a first-time Django contributor any help is appreciated! Cheng",
  "created_at": "2022-05-17T05:47:51Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"Templates should not crash when rendering methods for built-in types\"]",
  "PASS_TO_PASS": "[\"19819 -- Make sure the correct token is highlighted for\", \"Errors raised while compiling nodes should include the token\", \"test_compile_tag_error_27584 (template_tests.tests.DebugTemplateTests)\", \"Errors in a child of {% extends %} are displayed correctly.\", \"#24338 -- Allow extending django.template.backends.django.Template\", \"Error messages should include the unexpected block name and be in all\", \"# 16770 -- The template system doesn't wrap exceptions, but annotates\", \"#25848 -- Set origin on Node so debugging tools can determine which\", \"Errors in extended block are displayed correctly.\", \"test_string_origin (template_tests.tests.DebugTemplateTests)\", \"#18169 -- NoReverseMatch should not be silence in block.super.\", \"test_unknown_block_tag (template_tests.tests.DebugTemplateTests)\", \"#9005 -- url tag shouldn't require settings.SETTINGS_MODULE to\", \"#19827 -- url tag should keep original strack trace when reraising\", \"test_compile_tag_error_27584 (template_tests.tests.TemplateTests)\", \"test_string_origin (template_tests.tests.TemplateTests)\", \"test_unknown_block_tag (template_tests.tests.TemplateTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.738189",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}