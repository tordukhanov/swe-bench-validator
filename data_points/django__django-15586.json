{
  "repo": "django/django",
  "instance_id": "django__django-15586",
  "base_commit": "f4f2afeb457429f55d6325ed557f8e92a74ee028",
  "patch": "diff --git a/django/template/engine.py b/django/template/engine.py\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -38,8 +38,7 @@ def __init__(\n             loaders = [\"django.template.loaders.filesystem.Loader\"]\n             if app_dirs:\n                 loaders += [\"django.template.loaders.app_directories.Loader\"]\n-            if not debug:\n-                loaders = [(\"django.template.loaders.cached.Loader\", loaders)]\n+            loaders = [(\"django.template.loaders.cached.Loader\", loaders)]\n         else:\n             if app_dirs:\n                 raise ImproperlyConfigured(\n",
  "test_patch": "diff --git a/tests/template_backends/test_django.py b/tests/template_backends/test_django.py\n--- a/tests/template_backends/test_django.py\n+++ b/tests/template_backends/test_django.py\n@@ -176,27 +176,25 @@ def test_autoescape_default(self):\n             \"Hello, Bob &amp; Jim\",\n         )\n \n-    default_loaders = [\n-        \"django.template.loaders.filesystem.Loader\",\n-        \"django.template.loaders.app_directories.Loader\",\n-    ]\n-\n-    @override_settings(DEBUG=False)\n-    def test_non_debug_default_template_loaders(self):\n-        engine = DjangoTemplates(\n-            {\"DIRS\": [], \"APP_DIRS\": True, \"NAME\": \"django\", \"OPTIONS\": {}}\n-        )\n-        self.assertEqual(\n-            engine.engine.loaders,\n-            [(\"django.template.loaders.cached.Loader\", self.default_loaders)],\n-        )\n-\n-    @override_settings(DEBUG=True)\n-    def test_debug_default_template_loaders(self):\n-        engine = DjangoTemplates(\n-            {\"DIRS\": [], \"APP_DIRS\": True, \"NAME\": \"django\", \"OPTIONS\": {}}\n-        )\n-        self.assertEqual(engine.engine.loaders, self.default_loaders)\n+    def test_default_template_loaders(self):\n+        \"\"\"The cached template loader is always enabled by default.\"\"\"\n+        for debug in (True, False):\n+            with self.subTest(DEBUG=debug), self.settings(DEBUG=debug):\n+                engine = DjangoTemplates(\n+                    {\"DIRS\": [], \"APP_DIRS\": True, \"NAME\": \"django\", \"OPTIONS\": {}}\n+                )\n+                self.assertEqual(\n+                    engine.engine.loaders,\n+                    [\n+                        (\n+                            \"django.template.loaders.cached.Loader\",\n+                            [\n+                                \"django.template.loaders.filesystem.Loader\",\n+                                \"django.template.loaders.app_directories.Loader\",\n+                            ],\n+                        )\n+                    ],\n+                )\n \n     def test_dirs_pathlib(self):\n         engine = DjangoTemplates(\n",
  "problem_statement": "Enable cached template loader in development.\nDescription\n\t \n\t\t(last modified by Carlton Gibson)\n\t \nFollowing the changes to allow auto-reloading cached templates in #25791, there was discussion on â€‹PR 15140 to enable the cached template loader by default even in development. \n(Folks not wanting that would specify loaders.)\n",
  "hints_text": "",
  "created_at": "2022-04-12T14:21:40Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"The cached template loader is always enabled by default.\", \"test_dirs_pathlib (template_backends.test_django.DjangoTemplatesTests)\"]",
  "PASS_TO_PASS": "[\"test_csrf_token (template_backends.test_dummy.TemplateStringsTests)\", \"test_from_string (template_backends.test_dummy.TemplateStringsTests)\", \"test_get_template (template_backends.test_dummy.TemplateStringsTests)\", \"test_get_template_nonexistent (template_backends.test_dummy.TemplateStringsTests)\", \"test_html_escaping (template_backends.test_dummy.TemplateStringsTests)\", \"test_no_directory_traversal (template_backends.test_dummy.TemplateStringsTests)\", \"test_non_ascii_characters (template_backends.test_dummy.TemplateStringsTests)\", \"test_autoescape_default (template_backends.test_django.DjangoTemplatesTests)\", \"test_autoescape_off (template_backends.test_django.DjangoTemplatesTests)\", \"test_builtins_discovery (template_backends.test_django.DjangoTemplatesTests)\", \"test_context_has_priority_over_template_context_processors (template_backends.test_django.DjangoTemplatesTests)\", \"test_csrf_token (template_backends.test_django.DjangoTemplatesTests)\", \"test_django_html_escaping (template_backends.test_django.DjangoTemplatesTests)\", \"test_from_string (template_backends.test_django.DjangoTemplatesTests)\", \"test_get_template (template_backends.test_django.DjangoTemplatesTests)\", \"test_get_template_nonexistent (template_backends.test_django.DjangoTemplatesTests)\", \"test_get_template_syntax_error (template_backends.test_django.DjangoTemplatesTests)\", \"test_html_escaping (template_backends.test_django.DjangoTemplatesTests)\", \"test_no_directory_traversal (template_backends.test_django.DjangoTemplatesTests)\", \"test_non_ascii_characters (template_backends.test_django.DjangoTemplatesTests)\", \"django.Template.render() requires a dict.\", \"test_templatetag_discovery (template_backends.test_django.DjangoTemplatesTests)\", \"Import errors in tag modules should be reraised with a helpful message.\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.734595",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}