{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-11989",
  "base_commit": "32035c98bf6e16e8868b9320e4d5b3892fdc292d",
  "patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -407,7 +407,8 @@ def diop_solve(eq, param=symbols(\"t\", integer=True)):\n     >>> diop_solve(x + 3*y - 4*z + w - 6)\n     (t_0, t_0 + t_1, 6*t_0 + 5*t_1 + 4*t_2 - 6, 5*t_0 + 4*t_1 + 3*t_2 - 6)\n     >>> diop_solve(x**2 + y**2 - 5)\n-    {(-1, 2), (1, 2)}\n+    {(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)}\n+\n \n     See Also\n     ========\n@@ -762,7 +763,6 @@ def _diop_linear(var, coeff, param):\n     This method is generalised for many variables, below.\n \n     '''\n-\n     solutions = []\n     for i in range(len(B)):\n         tot_x, tot_y = [], []\n@@ -1039,14 +1039,14 @@ def _diop_quadratic(var, coeff, t):\n         solns_pell = diop_DN(D, N)\n \n         if D < 0:\n-            for solution in solns_pell:\n-                s1 = P*Matrix([solution[0], solution[1]]) + Q\n-                s2 = P*Matrix([-solution[0], solution[1]]) + Q\n-                try:\n-                    sol.add(tuple([as_int(_) for _ in s1]))\n-                    sol.add(tuple([as_int(_) for _ in s2]))\n-                except ValueError:\n-                    pass\n+            for x0, y0 in solns_pell:\n+                for x in [-x0, x0]:\n+                    for y in [-y0, y0]:\n+                        s = P*Matrix([x, y]) + Q\n+                        try:\n+                            sol.add(tuple([as_int(_) for _ in s]))\n+                        except ValueError:\n+                            pass\n         else:\n             # In this case equation can be transformed into a Pell equation\n \n@@ -1171,7 +1171,8 @@ def diop_DN(D, N, t=symbols(\"t\", integer=True)):\n                 if sols:\n                     for x, y in sols:\n                         sol.append((d*x, d*y))\n-\n+                        if D == -1:\n+                            sol.append((d*y, d*x))\n             return sol\n \n     elif D == 0:\n@@ -1416,7 +1417,7 @@ def cornacchia(a, b, m):\n     >>> cornacchia(2, 3, 35) # equation 2x**2 + 3y**2 = 35\n     {(2, 3), (4, 1)}\n     >>> cornacchia(1, 1, 25) # equation x**2 + y**2 = 25\n-    {(3, 4)}\n+    {(4, 3)}\n \n     References\n     ===========\n@@ -1454,7 +1455,7 @@ def cornacchia(a, b, m):\n             m1 = m1 // b\n             s, _exact = integer_nthroot(m1, 2)\n             if _exact:\n-                if a == b and r > s:\n+                if a == b and r < s:\n                     r, s = s, r\n                 sols.add((int(r), int(s)))\n \n",
  "test_patch": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -124,7 +124,7 @@ def test_quadratic_elliptical_case():\n     assert diop_solve(x**2 + y**2 + 2*x + 2*y + 2) == set([(-1, -1)])\n     #assert diop_solve(15*x**2 - 9*x*y + 14*y**2 - 23*x - 14*y - 4950) == set([(-15, 6)])\n     assert diop_solve(10*x**2 + 12*x*y + 12*y**2 - 34) == \\\n-        set([(-1, 2), (1, 1)])\n+        set([(-1, -1), (-1, 2), (1, -2), (1, 1)])\n \n \n def test_quadratic_parabolic_case():\n@@ -202,8 +202,8 @@ def test_DN():\n \n     # When equation is x**2 + y**2 = N\n     # Solutions are interchangeable\n-    assert diop_DN(-1, 5) == [(1, 2)]\n-    assert diop_DN(-1, 169) == [(5, 12), (0, 13)]\n+    assert diop_DN(-1, 5) == [(2, 1), (1, 2)]\n+    assert diop_DN(-1, 169) == [(12, 5), (5, 12), (13, 0), (0, 13)]\n \n     # D > 0 and D is not a square\n \n@@ -734,7 +734,7 @@ def test_diopcoverage():\n     assert base_solution_linear(4, 8, 12, t=None) == tuple(_.subs(t, 0) for _ in ans)\n \n     assert cornacchia(1, 1, 20) is None\n-    assert cornacchia(1, 1, 5) == set([(1, 2)])\n+    assert cornacchia(1, 1, 5) == set([(2, 1)])\n     assert cornacchia(1, 2, 17) == set([(3, 2)])\n \n     raises(ValueError, lambda: reconstruct(4, 20, 1))\n@@ -762,7 +762,8 @@ def test_diopcoverage():\n     # it's ok if these pass some day when the solvers are implemented\n     raises(NotImplementedError, lambda: diophantine(x**2 + y**2 + x*y + 2*y*z - 12))\n     raises(NotImplementedError, lambda: diophantine(x**3 + y**2))\n-    assert diop_quadratic(x**2 + y**2 - 1**2 - 3**4) == set([(-1, 9), (1, 9)])\n+    assert diop_quadratic(x**2 + y**2 - 1**2 - 3**4) == \\\n+        set([(-9, -1), (-9, 1), (-1, -9), (-1, 9), (1, -9), (1, 9), (9, -1), (9, 1)])\n \n \n def test_holzer():\n",
  "problem_statement": "diophantine doesn't find solutions for 2*x**2+y**2-16\nDiophantine returns the empty set but `{x=0,y=4}` and `{x=0,y=-4}` are solutions.\r\nI suspect there is some issue with the solving of the elliptic case, as for example `10*x**2 + 12*x*y + 12*y**2 - 34` also doesn't return all solutions: it returns `{x=-1,y=2}` and `{x=1,y=1}` but fails to find `{x=-1,y=-1}` and `{x=1,y=-2}`\r\n\n",
  "hints_text": "It returns all four possible solutions for 10*(x**2) + 12*(x*y) + 12*(y**2) - 34 when the parameter \"permute\" is passed as True in the Diophantine function. But yes, it returns an empty set for  2*x**2+y**2-16. Meanwhile I will try working on it. Suggestions are welcome.",
  "created_at": "2016-12-27T04:59:32Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_quadratic_elliptical_case\"]",
  "PASS_TO_PASS": "[\"test_input_format\", \"test_univariate\", \"test_classify_diop\", \"test_linear\", \"test_quadratic_simple_hyperbolic_case\", \"test_quadratic_perfect_square\", \"test_transformation_to_pell\", \"test_find_DN\", \"test_ldescent\", \"test_transformation_to_normal\", \"test_square_factor\", \"test_no_square_ternary_quadratic\", \"test_general_pythagorean\", \"test_diop_partition\", \"test_prime_as_sum_of_two_squares\", \"test_sum_of_three_squares\", \"test_sum_of_four_squares\", \"test_power_representation\", \"test_holzer\", \"test_issue_9539\", \"test_issue_8943\", \"test_diop_sum_of_even_powers\", \"test_sum_of_squares_powers\", \"test__can_do_sum_of_squares\", \"test_diophantine_permute_sign\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.074739",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}