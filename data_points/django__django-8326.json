{
  "repo": "django/django",
  "instance_id": "django__django-8326",
  "base_commit": "af1fa5e7da21c57a4037e67f93493af4e78d454a",
  "patch": "diff --git a/django/core/management/commands/diffsettings.py b/django/core/management/commands/diffsettings.py\n--- a/django/core/management/commands/diffsettings.py\n+++ b/django/core/management/commands/diffsettings.py\n@@ -8,15 +8,17 @@ def module_to_dict(module, omittable=lambda k: k.startswith('_')):\n \n class Command(BaseCommand):\n     help = \"\"\"Displays differences between the current settings.py and Django's\n-    default settings. Settings that don't appear in the defaults are\n-    followed by \"###\".\"\"\"\n+    default settings.\"\"\"\n \n     requires_system_checks = False\n \n     def add_arguments(self, parser):\n         parser.add_argument(\n             '--all', action='store_true', dest='all',\n-            help='Display all settings, regardless of their value. Default values are prefixed by \"###\".',\n+            help=(\n+                'Display all settings, regardless of their value. In \"hash\" '\n+                'mode, default values are prefixed by \"###\".'\n+            ),\n         )\n         parser.add_argument(\n             '--default', dest='default', metavar='MODULE', default=None,\n@@ -25,9 +27,18 @@ def add_arguments(self, parser):\n                 \"compare against Django's default settings.\"\n             ),\n         )\n+        parser.add_argument(\n+            '--output', default='hash', choices=('hash', 'unified'), dest='output',\n+            help=(\n+                \"Selects the output format. 'hash' mode displays each changed \"\n+                \"setting, with the settings that don't appear in the defaults \"\n+                \"followed by ###. 'unified' mode prefixes the default setting \"\n+                \"with a minus sign, followed by the changed setting prefixed \"\n+                \"with a plus sign.\"\n+            ),\n+        )\n \n     def handle(self, **options):\n-        # Inspired by Postfix's \"postconf -n\".\n         from django.conf import settings, Settings, global_settings\n \n         # Because settings are imported lazily, we need to explicitly load them.\n@@ -36,7 +47,14 @@ def handle(self, **options):\n         user_settings = module_to_dict(settings._wrapped)\n         default = options['default']\n         default_settings = module_to_dict(Settings(default) if default else global_settings)\n+        output_func = {\n+            'hash': self.output_hash,\n+            'unified': self.output_unified,\n+        }[options['output']]\n+        return '\\n'.join(output_func(user_settings, default_settings, **options))\n \n+    def output_hash(self, user_settings, default_settings, **options):\n+        # Inspired by Postfix's \"postconf -n\".\n         output = []\n         for key in sorted(user_settings):\n             if key not in default_settings:\n@@ -45,4 +63,16 @@ def handle(self, **options):\n                 output.append(\"%s = %s\" % (key, user_settings[key]))\n             elif options['all']:\n                 output.append(\"### %s = %s\" % (key, user_settings[key]))\n-        return '\\n'.join(output)\n+        return output\n+\n+    def output_unified(self, user_settings, default_settings, **options):\n+        output = []\n+        for key in sorted(user_settings):\n+            if key not in default_settings:\n+                output.append(self.style.SUCCESS(\"+ %s = %s\" % (key, user_settings[key])))\n+            elif user_settings[key] != default_settings[key]:\n+                output.append(self.style.ERROR(\"- %s = %s\" % (key, default_settings[key])))\n+                output.append(self.style.SUCCESS(\"+ %s = %s\" % (key, user_settings[key])))\n+            elif options['all']:\n+                output.append(\"  %s = %s\" % (key, user_settings[key]))\n+        return output\n",
  "test_patch": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2120,6 +2120,32 @@ def test_custom_default(self):\n         self.assertNotInOutput(out, \"FOO\")\n         self.assertOutput(out, \"BAR = 'bar2'\")\n \n+    def test_unified(self):\n+        \"\"\"--output=unified emits settings diff in unified mode.\"\"\"\n+        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"bar\"'})\n+        self.addCleanup(self.remove_settings, 'settings_to_diff.py')\n+        args = ['diffsettings', '--settings=settings_to_diff', '--output=unified']\n+        out, err = self.run_manage(args)\n+        self.assertNoOutput(err)\n+        self.assertOutput(out, \"+ FOO = 'bar'\")\n+        self.assertOutput(out, \"- SECRET_KEY = ''\")\n+        self.assertOutput(out, \"+ SECRET_KEY = 'django_tests_secret_key'\")\n+        self.assertNotInOutput(out, \"  APPEND_SLASH = True\")\n+\n+    def test_unified_all(self):\n+        \"\"\"\n+        --output=unified --all emits settings diff in unified mode and includes\n+        settings with the default value.\n+        \"\"\"\n+        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"bar\"'})\n+        self.addCleanup(self.remove_settings, 'settings_to_diff.py')\n+        args = ['diffsettings', '--settings=settings_to_diff', '--output=unified', '--all']\n+        out, err = self.run_manage(args)\n+        self.assertNoOutput(err)\n+        self.assertOutput(out, \"  APPEND_SLASH = True\")\n+        self.assertOutput(out, \"+ FOO = 'bar'\")\n+        self.assertOutput(out, \"- SECRET_KEY = ''\")\n+\n \n class Dumpdata(AdminScriptTestCase):\n     \"\"\"Tests for dumpdata management command.\"\"\"\n",
  "problem_statement": "Add \"unified diff\" output mode to diffsettings management command\nDescription\n\t\nMost people are used to unified diffs vs. the somewhat strange \"###\" formatting of diffsettings, so this adds an optional —output=unified.\n",
  "hints_text": "​PR",
  "created_at": "2017-04-07T11:18:46Z",
  "version": "2.0",
  "FAIL_TO_PASS": "[\"--output=unified emits settings diff in unified mode.\"]",
  "PASS_TO_PASS": "[\"test_testserver_handle_params (admin_scripts.tests.ManageTestserver)\", \"test_no_database (admin_scripts.tests.ManageRunserver)\", \"test_readonly_database (admin_scripts.tests.ManageRunserver)\", \"test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_ambiguous (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runserver_addrport (admin_scripts.tests.ManageRunserver)\", \"test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_precedence (admin_scripts.tests.Discovery)\", \"test_runs_django_admin (admin_scripts.tests.MainModule)\", \"no settings: django-admin builtin commands fail with an error when no settings provided\", \"no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"no settings: manage.py builtin commands fail with an error when no settings provided\", \"no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"Regression for #20509\", \"test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)\", \"minimal: django-admin builtin commands fail with an error when no settings provided\", \"minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: django-admin builtin commands fail if settings are provided in the environment\", \"minimal: django-admin builtin commands fail if settings are provided as argument\", \"minimal: django-admin can't execute user commands unless settings are provided\", \"minimal: django-admin can't execute user commands, even if settings are provided in environment\", \"minimal: django-admin can't execute user commands, even if settings are provided as argument\", \"Options passed before settings are correctly handled.\", \"Options are correctly handled when they are passed before and after\", \"Options passed after settings are correctly handled.\", \"Short options passed after settings are correctly handled.\", \"Short options passed before settings are correctly handled.\", \"alternate: django-admin builtin commands fail with an error when no settings provided\", \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: django-admin builtin commands succeed if settings are provided in the environment\", \"alternate: django-admin builtin commands succeed if settings are provided as argument\", \"alternate: django-admin can't execute user commands unless settings are provided\", \"alternate: django-admin can execute user commands if settings are provided in environment\", \"alternate: django-admin can execute user commands if settings are provided as argument\", \"directory: django-admin builtin commands fail with an error when no settings provided\", \"directory: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"directory: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"directory: django-admin builtin commands succeed if settings are provided in the environment\", \"directory: django-admin builtin commands succeed if settings are provided as argument\", \"directory: django-admin can't execute user commands unless settings are provided\", \"directory: startapp creates the correct directory\", \"directory: startapp creates the correct directory with a custom template\", \"Runs without error and emits settings diff.\", \"test_custom_default (admin_scripts.tests.DiffSettings)\", \"default: django-admin builtin commands fail with an error when no settings provided\", \"default: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"default: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"default: django-admin builtin commands succeed if settings are provided in the environment\", \"default: django-admin builtin commands succeed if settings are provided as argument\", \"default: django-admin can't execute user commands if it isn't provided settings\", \"default: django-admin can execute user commands if settings are provided in environment\", \"default: django-admin can execute user commands if settings are provided as argument\", \"fulldefault: django-admin builtin commands fail with an error when no settings provided\", \"fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"fulldefault: django-admin builtin commands succeed if the environment contains settings\", \"fulldefault: django-admin builtin commands succeed if a settings file is provided\", \"fulldefault: django-admin can't execute user commands unless settings are provided\", \"fulldefault: django-admin can execute user commands if settings are provided in environment\", \"fulldefault: django-admin can execute user commands if settings are provided as argument\", \"alternate: manage.py builtin commands fail with an error when no default settings provided\", \"alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: manage.py builtin commands work if settings are provided in the environment\", \"alternate: manage.py builtin commands work with settings provided as argument\", \"alternate: manage.py can't execute user commands without settings\", \"alternate: manage.py output syntax color can be deactivated with the `--no-color` option\", \"alternate: manage.py can execute user commands if settings are provided in environment\", \"alternate: manage.py can execute user commands if settings are provided as argument\", \"manage.py check does not raise errors when an app imports a base\", \"manage.py check reports an ImportError if an app's models.py\", \"manage.py check does not raise an ImportError validating a\", \"check reports an error on a nonexistent app in INSTALLED_APPS.\", \"All errors/warnings should be sorted by level and by message.\", \"test_warning_does_not_halt (admin_scripts.tests.ManageCheck)\", \"default: manage.py builtin commands succeed when default settings are appropriate\", \"default: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"default: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"default: manage.py builtin commands succeed if settings are provided in the environment\", \"default: manage.py builtin commands succeed if settings are provided as argument\", \"default: manage.py can execute user commands when default settings are appropriate\", \"default: manage.py can execute user commands when settings are provided in environment\", \"default: manage.py can execute user commands when settings are provided as argument\", \"multiple: manage.py builtin commands fail with an error when no settings provided\", \"multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"multiple: manage.py can execute builtin commands if settings are provided in the environment\", \"multiple: manage.py builtin commands succeed if settings are provided as argument\", \"multiple: manage.py can't execute user commands using default settings\", \"multiple: manage.py can execute user commands if settings are provided in environment\", \"multiple: manage.py can execute user commands if settings are provided as argument\", \"minimal: manage.py builtin commands fail with an error when no settings provided\", \"minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: manage.py builtin commands fail if settings are provided in the environment\", \"minimal: manage.py builtin commands fail if settings are provided as argument\", \"minimal: manage.py can't execute user commands without appropriate settings\", \"minimal: manage.py can't execute user commands, even if settings are provided in environment\", \"minimal: manage.py can't execute user commands, even if settings are provided as argument\", \"fulldefault: manage.py builtin commands succeed when default settings are appropriate\", \"fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings are provided in the environment\", \"fulldefault: manage.py builtin commands succeed if settings are provided as argument\", \"fulldefault: manage.py can execute user commands when default settings are appropriate\", \"fulldefault: manage.py can execute user commands when settings are provided in environment\", \"fulldefault: manage.py can execute user commands when settings are provided as argument\", \"test_custom_project_destination_missing (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to use a different project template\", \"Make sure template context variables are rendered with proper values\", \"Make sure the startproject management command is able to use a different project template from a tarball\", \"test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)\", \"Startproject can use a project template from a tarball and create it in a specified location\", \"test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to render custom files\", \"Make sure the startproject management command validates a project name\", \"Make sure template context variables are not html escaped\", \"Startproject management command handles project template tar/zip balls from non-canonical urls\", \"Make sure the startproject management command creates a project\", \"Make sure the startproject management command creates a project in a specific directory\", \"Ticket 17475: Template dir passed has a trailing path separator\", \"Make sure passing the wrong kinds of arguments outputs an error and prints usage\", \"User AppCommands can execute when a single app name is provided\", \"User AppCommands raise an error when multiple app names are provided\", \"User AppCommands raise an error when no app name is provided\", \"User AppCommands can execute when some of the provided app names are invalid\", \"User BaseCommands can execute when a label is provided\", \"User BaseCommands can execute when no labels are provided\", \"User BaseCommands can execute with options when a label is provided\", \"User BaseCommands can execute with multiple options when a label is provided\", \"User BaseCommands outputs command usage when wrong option is specified\", \"test_base_run_from_argv (admin_scripts.tests.CommandTypes)\", \"test_color_style (admin_scripts.tests.CommandTypes)\", \"test_command_color (admin_scripts.tests.CommandTypes)\", \"--no-color prevent colorization of the output\", \"test_custom_stderr (admin_scripts.tests.CommandTypes)\", \"test_custom_stdout (admin_scripts.tests.CommandTypes)\", \"help is handled as a special case\", \"--help is equivalent to help\", \"help --commands shows the list of all available commands\", \"-h is handled as a short form of --help\", \"User LabelCommands can execute when a label is provided\", \"User LabelCommands are executed multiple times if multiple labels are provided\", \"User LabelCommands raise an error if no label is provided\", \"NoArg Commands can be executed\", \"NoArg Commands raise an error if an argument is provided\", \"test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)\", \"test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)\", \"--help can be used on a specific command\", \"version is handled as a special case\", \"--version is equivalent to version\"]",
  "environment_setup_commit": "ddc49820f7716a9e521e8bafda97294065d47b93",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.782303",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}