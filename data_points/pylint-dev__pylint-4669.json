{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-4669",
  "base_commit": "c2d03c6b3881a9df7353432b109523984adf06f9",
  "patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -223,9 +223,11 @@ def stripped_lines(\n         signature_lines = set(\n             chain(\n                 *(\n-                    range(func.fromlineno, func.body[0].lineno)\n+                    range(\n+                        func.fromlineno,\n+                        func.body[0].lineno if func.body else func.tolineno + 1,\n+                    )\n                     for func in functions\n-                    if func.body\n                 )\n             )\n         )\n",
  "test_patch": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -35,6 +35,8 @@\n SIMILAR4 = str(INPUT / \"similar4\")\n SIMILAR5 = str(INPUT / \"similar5\")\n SIMILAR6 = str(INPUT / \"similar6\")\n+EMPTY_FUNCTION_1 = str(INPUT / \"similar_empty_func_1.py\")\n+EMPTY_FUNCTION_2 = str(INPUT / \"similar_empty_func_2.py\")\n MULTILINE = str(INPUT / \"multiline-import\")\n HIDE_CODE_WITH_IMPORTS = str(INPUT / \"hide_code_with_imports.py\")\n \n@@ -199,6 +201,44 @@ def test_ignore_signatures_pass():\n     )\n \n \n+def test_ignore_signatures_empty_functions_fail():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([EMPTY_FUNCTION_1, EMPTY_FUNCTION_2])\n+    assert ex.value.code == 0\n+    assert (\n+        output.getvalue().strip()\n+        == (\n+            '''\n+6 similar lines in 2 files\n+==%s:1\n+==%s:1\n+       arg1: int = 1,\n+       arg2: str = \"2\",\n+       arg3: int = 3,\n+       arg4: bool = True,\n+   ) -> None:\n+       \"\"\"Valid function definition with docstring only.\"\"\"\n+TOTAL lines=14 duplicates=6 percent=42.86\n+'''\n+            % (EMPTY_FUNCTION_1, EMPTY_FUNCTION_2)\n+        ).strip()\n+    )\n+\n+\n+def test_ignore_signatures_empty_functions_pass():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--ignore-signatures\", EMPTY_FUNCTION_1, EMPTY_FUNCTION_2])\n+    assert ex.value.code == 0\n+    assert (\n+        output.getvalue().strip()\n+        == \"\"\"\n+TOTAL lines=14 duplicates=0 percent=0.00\n+\"\"\".strip()\n+    )\n+\n+\n def test_no_hide_code_with_imports():\n     output = StringIO()\n     with redirect_stdout(output), pytest.raises(SystemExit) as ex:\ndiff --git a/tests/input/similar_empty_func_1.py b/tests/input/similar_empty_func_1.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/input/similar_empty_func_1.py\n@@ -0,0 +1,7 @@\n+def func1(\n+    arg1: int = 1,\n+    arg2: str = \"2\",\n+    arg3: int = 3,\n+    arg4: bool = True,\n+) -> None:\n+    \"\"\"Valid function definition with docstring only.\"\"\"\ndiff --git a/tests/input/similar_empty_func_2.py b/tests/input/similar_empty_func_2.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/input/similar_empty_func_2.py\n@@ -0,0 +1,7 @@\n+def func2(\n+    arg1: int = 1,\n+    arg2: str = \"2\",\n+    arg3: int = 3,\n+    arg4: bool = True,\n+) -> None:\n+    \"\"\"Valid function definition with docstring only.\"\"\"\n",
  "problem_statement": "Similarities checker with \"ignore-signatures\" option enabled ignores functions with docstring-only bodies\n#4648 follow-up.\r\n\r\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\nmodule\\\r\n    __init__.py\r\n    a.py\r\n    b.py\r\n```\r\n\r\n`a.py`:\r\n```python\r\ndef example_func(\r\n    arg1,\r\n    arg2,\r\n    arg3,\r\n    arg4,\r\n):\r\n    \"\"\"Valid function definition with docstring only.\"\"\"\r\n```\r\n\r\n`b.py`:\r\n```python\r\ndef example_func(\r\n    arg1,\r\n    arg2,\r\n    arg3,\r\n    arg4,\r\n):\r\n    \"\"\"Valid function definition with docstring only.\"\"\"\r\n```\r\n\r\n### Current behavior\r\n\r\nResult of `pylint --disable=all --enable=similarities --ignore-signatures=yes module`:\r\n```\r\n************* Module module.b\r\nmodule/b.py:1:0: R0801: Similar lines in 2 files\r\n==module.a:0\r\n==module.b:0\r\ndef example_func(\r\n    arg1,\r\n    arg2,\r\n    arg3,\r\n    arg4,\r\n):\r\n    \"\"\"Valid function definition with docstring only.\"\"\" (duplicate-code)\r\n\r\n-----------------------------------\r\nYour code has been rated at 5.00/10\r\n```\r\n\r\n### Expected behavior\r\n\r\n`duplicate-code` error shouldn't be reported in this case.\r\n\r\n**Note**: if functions have bodies everything works correctly. You could add `pass` to the example functions above and no `duplicate-code` error would be reported.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 2.9.3\r\nastroid 2.6.2\r\nPython 3.8.2 (default, Jun  8 2021, 11:59:35) \r\n[Clang 12.0.5 (clang-1205.0.22.11)]\r\n```\n",
  "hints_text": "",
  "created_at": "2021-07-04T19:07:27Z",
  "version": "2.9",
  "FAIL_TO_PASS": "[\"tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_pass\"]",
  "PASS_TO_PASS": "[\"tests/checkers/unittest_similar.py::test_ignore_comments\", \"tests/checkers/unittest_similar.py::test_ignore_docsrings\", \"tests/checkers/unittest_similar.py::test_ignore_imports\", \"tests/checkers/unittest_similar.py::test_multiline_imports\", \"tests/checkers/unittest_similar.py::test_ignore_multiline_imports\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_fail\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_pass\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_fail\", \"tests/checkers/unittest_similar.py::test_no_hide_code_with_imports\", \"tests/checkers/unittest_similar.py::test_ignore_nothing\", \"tests/checkers/unittest_similar.py::test_lines_without_meaningful_content_do_not_trigger_similarity\", \"tests/checkers/unittest_similar.py::test_help\", \"tests/checkers/unittest_similar.py::test_no_args\", \"tests/checkers/unittest_similar.py::test_get_map_data\"]",
  "environment_setup_commit": "c04f92ef68e5ea779a60bfddb91dc677c5470fd0",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.908785",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}