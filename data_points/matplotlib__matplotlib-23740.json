{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-23740",
  "base_commit": "87b801b9574df8fa65ddd49b24a0584f50b79510",
  "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1245,13 +1245,19 @@ def colorbar(\n         \"\"\"\n \n         if ax is None:\n-            ax = getattr(mappable, \"axes\", self.gca())\n+            ax = getattr(mappable, \"axes\", None)\n \n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().colorbar_gridspec):\n             use_gridspec = False\n         # Store the value of gca so that we can set it back later on.\n         if cax is None:\n+            if ax is None:\n+                raise ValueError(\n+                    'Unable to determine Axes to steal space for Colorbar. '\n+                    'Either provide the *cax* argument to use as the Axes for '\n+                    'the Colorbar, provide the *ax* argument to steal space '\n+                    'from it, or add *mappable* to an Axes.')\n             current_ax = self.gca()\n             userax = False\n             if (use_gridspec and isinstance(ax, SubplotBase)):\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -315,6 +315,14 @@ def test_colorbarbase():\n     Colorbar(ax, cmap=plt.cm.bone)\n \n \n+def test_parentless_mappable():\n+    pc = mpl.collections.PatchCollection([], cmap=plt.get_cmap('viridis'))\n+    pc.set_array([])\n+\n+    with pytest.raises(ValueError, match='Unable to determine Axes to steal'):\n+        plt.colorbar(pc)\n+\n+\n @image_comparison(['colorbar_closed_patch.png'], remove_text=True)\n def test_colorbar_closed_patch():\n     # Remove this line when this test image is regenerated.\n@@ -675,7 +683,7 @@ def test_colorbar_inverted_ticks():\n def test_mappable_no_alpha():\n     fig, ax = plt.subplots()\n     sm = cm.ScalarMappable(norm=mcolors.Normalize(), cmap='viridis')\n-    fig.colorbar(sm)\n+    fig.colorbar(sm, ax=ax)\n     sm.set_cmap('plasma')\n     plt.draw()\n \n",
  "problem_statement": "[Bug]: colorbar with unattached mappables can't steal space\n### Bug summary\r\n\r\nThis is something I noticed downstream in networkx: https://github.com/networkx/networkx/pull/5937#issuecomment-1223097369\r\n\r\nFormerly, space for a `Colorbar` was stolen from the current `Axes`; that was deprecated and now in 3.6, it is stolen from the mappable's `Axes`. But if the mappable is not added to an `Axes`, it fails with a somewhat unrelated-looking error.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\n\r\ncmap = plt.get_cmap('viridis')\r\n\r\npc = mpl.collections.PatchCollection([], cmap=cmap)\r\npc.set_array([])\r\n\r\nplt.colorbar(pc)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/elliott/code/matplotlib/lib/matplotlib/pyplot.py\", line 2053, in colorbar\r\n    ret = gcf().colorbar(mappable, cax=cax, ax=ax, **kwargs)\r\n  File \"/home/elliott/code/matplotlib/lib/matplotlib/figure.py\", line 1260, in colorbar\r\n    cax, kwargs = cbar.make_axes(ax, **kwargs)\r\n  File \"/home/elliott/code/matplotlib/lib/matplotlib/colorbar.py\", line 1396, in make_axes\r\n    fig = parents[0].get_figure()\r\nAttributeError: 'NoneType' object has no attribute 'get_figure'\r\n```\r\n\r\n### Expected outcome\r\n\r\nEither we should switch to the current Axes if the mappable doesn't have one (probably not desired given the previous change), or raise a clearer error message when this happens.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.6.0rc1\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n",
  "hints_text": "Not directly related to #23502, but it may be that the logic for stealing and returning space should be discussed jointly.\nDo we know when we changed to following the mappable's axes?   That seems like we made a mistake there, and this may be a release critical bug fix.  Marking as such to make sure it gets discussed.  \nIt was discussed at https://github.com/matplotlib/matplotlib/pull/12333#issuecomment-425660082 (see in particular @tacaswell's comment just below) and deprecated in https://github.com/matplotlib/matplotlib/pull/12443.\r\n\r\nI still think the change is correct, we just need a better error message here.  We *could* make `plt.colorbar` fallback to the current axes in case the current mappable has no axes if we really want to, but `Figure.colorbar` should not (as that's something that exists outside of the pyplot world).\nI think that issue refers to the problem of what axes to steal from whereas this one refers to which axes to give back to.  We can't assume the logic is reversible because we have a cax arguement and an ax argument to colorbar. \nI'm not sure I follow?  Isn't this issue still about who to steal from?\nI'm sorry - I got confused by the reference to the other issue\n\nI think I'm ok with expecting the user to provide an axes if they just make an axes-less mappable and and expect plt.colorbar to do something. We could fall back to the current axes but in this case I think that would _create_ an empty axes, which seems wrong as well. If they are creating their own mappable they have some savvy of our internals and can supply a cax argument.  \n> but in this case I think that would create an empty axes, which seems wrong as well.\r\n\r\nI agree this seems wrong, but I think stealing from the current axes (as problematic as that is) even if we have to create it is better than failing.  I could go either way on warning (and raising in the future) in the case of an \"orphaned\" mappable without an explicit axes passed or not.\nI'm OK with going through a warning before completely killing this \nI disagree.  I think failing is better and the user can tell us what they want explicitly if we can't infer it.  \nDiscussed on the call, I have been convinced we should give a better error as this was previously warned.",
  "created_at": "2022-08-25T22:37:47Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_parentless_mappable\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_shape[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_length[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-True]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-False]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_false\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_east[standard]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_east[constrained]\", \"lib/matplotlib/tests/test_colorbar.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_gridspec_make_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_scatter[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[no\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[with\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure_cl\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbarbase\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_closed_patch[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_minorticks_on_off\", \"lib/matplotlib/tests/test_colorbar.py::test_cbar_minorticks_for_rc_xyminortickvisible\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autoticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autotickslog\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[both]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[min]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[max]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_powernorm_extension\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_axes_kw\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_log_minortick_labels\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_renorm\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[%4.2e]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[{x:.2e}]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_scale_reset\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks_2\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_inverted_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_no_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_2d_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_label\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim0]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim1]\", \"lib/matplotlib/tests/test_colorbar.py::test_anchored_cbar_position_using_specgrid\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_change_lim_scale[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_axes_handles_same_functions[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_inset_colorbar_layout\", \"lib/matplotlib/tests/test_colorbar.py::test_twoslope_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_cb_whose_mappable_has_no_figure[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_aspects\", \"lib/matplotlib/tests/test_colorbar.py::test_proportional_colorbars[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_drawedges[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_negative_boundarynorm\", \"lib/matplotlib/tests/test_colorbar.py::test_boundaries[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_no_warning_rcparams_grid_true\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_set_formatter_locator\", \"lib/matplotlib/tests/test_colorbar.py::test_offset_text_loc\", \"lib/matplotlib/tests/test_colorbar.py::test_title_text_loc\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.805366",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}