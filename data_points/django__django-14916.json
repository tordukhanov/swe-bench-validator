{
  "repo": "django/django",
  "instance_id": "django__django-14916",
  "base_commit": "dd1fa3a31b4680c0d3712e6ae122b878138580c7",
  "patch": "diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -148,7 +148,11 @@ def clone(self):\n         clone = self.__class__._new_instance(\n             children=None, connector=self.connector, negated=self.negated,\n         )\n-        clone.children = self.children[:]\n+        for child in self.children:\n+            if hasattr(child, 'clone'):\n+                clone.children.append(child.clone())\n+            else:\n+                clone.children.append(child)\n         return clone\n \n     def relabeled_clone(self, change_map):\n",
  "test_patch": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1663,6 +1663,12 @@ def test_extra_select_literal_percent_s(self):\n             'bar %s'\n         )\n \n+    def test_queryset_reuse(self):\n+        # Using querysets doesn't mutate aliases.\n+        authors = Author.objects.filter(Q(name='a1') | Q(name='nonexistent'))\n+        self.assertEqual(Ranking.objects.filter(author__in=authors).get(), self.rank3)\n+        self.assertEqual(authors.count(), 1)\n+\n \n class SelectRelatedTests(TestCase):\n     def test_tickets_3045_3288(self):\n",
  "problem_statement": "Investigate feasibility of improving WhereNode clone performance\nDescription\n\t \n\t\t(last modified by Keryn Knight)\n\t \nThis relates to #32948 insofar as it's about figuring out how shallow or deep a copy is necessary for cloning Node instances/subclasses. And a bit to #28455 which acknowledges the need to avoid cloning sometimes due to it being costly.\nThe PR I made for optimising Q combining/inverting (​https://github.com/django/django/pull/14673) wants to introduce a __copy__ method onto Q objects to indicate what level of operation is needed. Unlike that PR, it's decidedly not possible to take the same approach with WhereNode and just do clone.__dict__ = self.__dict__.copy() (things broke horribly) because of attributes like contains_aggregate and output_field which are cached properties on the WhereNode instance. Also resolved gets set after the fact by resolve_expression. But, as far as I can tell, the looping/testing/child cloning may be removable. Perhaps once upon a time they were required and other components changed such that it's now safe to consider. I can't readily say, but initial experimentation suggests it's OK to look at, at least in theory.\nThere is a PR already for this, here: ​https://github.com/django/django/pull/14709 which is currently marked draft/WIP because I couldn't easily run the whole test suite locally and needed to see if the more exotic parts caused problems. They didn't, which was unexpected, so here I am. The PR currently replaces the WhereNode.clone method like so:\nclone = self.__class__._new_instance(children=[], connector=self.connector, negated=self.negated)\nfor child in self.children:\n\tif hasattr(child, 'clone'):\n\t\tclone.children.append(child.clone())\n\telse:\n\t\tclone.children.append(child)\nwith:\nclone = self.__class__._new_instance(children=None, connector=self.connector, negated=self.negated)\nclone.children = self.children[:]\nBut I think that Q and WhereNode can both just return a shallow copy by only aliasing the children property, at which point I think the __copy__ method could be implemented on Node directly and mirror the existing __deepcopy__ method. By preferring those stdlib names it draws a line in the sand over what level of copy should be expected. The existing clone and copy methods can become aliases to same.\nBefore any changes\nIf we now begin to examine the before and after with as much data as I can easily gather. First a bit of prelude:\nIn [1]: from django.db.models.sql.where import WhereNode\nIn [2]: from django.db.models import QuerySet\nIn [3]: from django.db.models.sql import Query\nIn [4]: from django.contrib.auth.models import User\nIn [5]: x = User.objects.all()\nIn [6]: y = User.objects.filter(username='test', email='test@test.test').exclude(username='test').filter(email='nottest')\nIn [7]: %load_ext line_profiler\nNow let's establish a ballpark for how much time is spent where, I've stripped the line profiling down to just the relevant bits for clarity.\nQueryset with no clauses (x)\nIn [8]: %lprun -f QuerySet._chain -f QuerySet._clone -f Query.chain -f Query.clone -f WhereNode.clone for _ in range(1000): x._chain()\nFunction: QuerySet._chain\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 1325\t\t\t\t\t\t\t\t\t\t\t def _chain(self, **kwargs):\n ...\n 1330\t 1000\t 88169.0\t 88.2\t 97.8\t\t obj = self._clone()\nFunction: QuerySet._clone\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 1337\t\t\t\t\t\t\t\t\t\t\t def _clone(self):\n ...\n 1342\t 1000\t 80796.0\t 80.8\t 86.3\t\t chained = self.query.chain()\n 1343\t 1000\t 7240.0\t 7.2\t 7.7\t\t c = self.__class__(model=self.model, query=chained, using=self._db, hints=self._hints))\nFunction: Query.chain\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 341\t\t\t\t\t\t\t\t\t\t\t def chain(self, klass=None):\n ...\n 346\t 2000\t 116961.0\t 58.5\t 94.8\t\t obj = self.clone()\nFunction: Query.clone\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 290\t\t\t\t\t\t\t\t\t\t\t def clone(self):\n ...\n 304\t 2000\t 18294.0\t 9.1\t 27.0\t\t obj.where = self.where.clone()\nFunction: WhereNode.clone\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 142\t\t\t\t\t\t\t\t\t\t\t def clone(self):\n ...\n 148\t 4000\t 6227.0\t 1.6\t 63.7\t\t clone = self.__class__._new_instance(\n 149\t 2000\t 1170.0\t 0.6\t 12.0\t\t\t children=[], connector=self.connector, negated=self.negated)\n 150\t 2000\t 1407.0\t 0.7\t 14.4\t\t for child in self.children:\n 151\t\t\t\t\t\t\t\t\t\t\t\t\t if hasattr(child, 'clone'):\n 152\t\t\t\t\t\t\t\t\t\t\t\t\t\t clone.children.append(child.clone())\n 153\t\t\t\t\t\t\t\t\t\t\t\t\t else:\n 154\t\t\t\t\t\t\t\t\t\t\t\t\t\t clone.children.append(child)\n 155\t 2000\t\t969.0\t 0.5\t 9.9\t\t return clone\nQueryset with where clauses (y)\nYouu can see the cost begin to go up:\nIn [9]: %lprun -f QuerySet._chain -f QuerySet._clone -f Query.chain -f Query.clone -f WhereNode.clone for _ in range(1000): y._chain()\nFunction: Query.clone\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 290\t\t\t\t\t\t\t\t\t\t\t def clone(self):\n ...\n 304\t 2000\t 60065.0\t 30.0\t 59.1\t\t obj.where = self.where.clone()\nFunction: WhereNode.clone\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 142\t\t\t\t\t\t\t\t\t\t\t def clone(self):\n 148\t 8000\t 11473.0\t 1.4\t 33.1\t\t clone = self.__class__._new_instance(\n 149\t 4000\t 2379.0\t 0.6\t 6.9\t\t\t children=[], connector=self.connector, negated=self.negated)\n 150\t 14000\t 7241.0\t 0.5\t 20.9\t\t for child in self.children:\n 151\t 10000\t 5553.0\t 0.6\t 16.0\t\t\t if hasattr(child, 'clone'):\n 152\t 2000\t 1255.0\t 0.6\t 3.6\t\t\t\t clone.children.append(child.clone())\n 153\t\t\t\t\t\t\t\t\t\t\t\t\t else:\n 154\t 8000\t 5069.0\t 0.6\t 14.6\t\t\t\t clone.children.append(child)\n 155\t 4000\t 1715.0\t 0.4\t 4.9\t\t return clone\nand the timings for those 2 (x and y) querysets, plus an example of prefetching related data:\nIn [10]: %timeit x._chain()\n6.43 µs ± 52 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\nIn [11]: %timeit y._chain()\n8.24 µs ± 35.3 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each))\nIn [12]: %timeit y.query.where.clone()\n2.79 µs ± 38.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\nIn [13]: %prun for _ in range(100000): y._chain()\n3400003 function calls (3300003 primitive calls) in 1.506 seconds\n\t ncalls tottime percall cumtime percall filename:lineno(function)\n\t 100000\t0.357\t0.000\t1.007\t0.000 query.py:290(clone)\n200000/100000\t0.301\t0.000\t0.539\t0.000 where.py:142(clone) <-- WhereNode\n\t 100000\t0.172\t0.000\t1.344\t0.000 query.py:1337(_clone)\n\t 100000\t0.068\t0.000\t1.086\t0.000 query.py:341(chain)\n\t 100000\t0.058\t0.000\t1.415\t0.000 query.py:1325(_chain)\nIn [14]: %timeit tuple(User.objects.prefetch_related('groups__permissions', 'user_permissions'))\n18.2 ms ± 117 µs per loop (mean ± std. dev. of 7 runs, 100 loops each))\nAfter replacing the clone method\nGiven those data points, here are the same bits of line profiling, showing only those where the needle has moved:\nQueryset with no clauses (x)\nFunction: Query.clone\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 290\t\t\t\t\t\t\t\t\t\t\t def clone(self):\n ...\n 304\t 2000\t 14134.0\t 7.1\t 22.8\t\t obj.where = self.where.clone()\nFunction: WhereNode.clone\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 142\t\t\t\t\t\t\t\t\t\t\t def clone(self):\n ...\n 148\t 2000\t 5586.0\t 2.8\t 71.0\t\t clone = self.__class__._new_instance(children=None, connector=self.connector, negated=self.negated)\n 149\t 2000\t 1412.0\t 0.7\t 18.0\t\t clone.children = self.children[:]\n 150\t 2000\t\t865.0\t 0.4\t 11.0\t\t return clone\nQueryset with where clauses (y)\nFunction: Query.clone at line 290\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 290\t\t\t\t\t\t\t\t\t\t\t def clone(self):\n ...\n 304\t 2000\t 13730.0\t 6.9\t 24.7\t\t obj.where = self.where.clone()\nFunction: WhereNode.clone\nLine #\t Hits\t\t Time Per Hit % Time Line Contents\n==============================================================\n 142\t\t\t\t\t\t\t\t\t\t\t def clone(self):\n ...\n 148\t 2000\t 5273.0\t 2.6\t 69.0\t\t clone = self.__class__._new_instance(children=None, connector=self.connector, negated=self.negated)\n 149\t 2000\t 1498.0\t 0.7\t 19.6\t\t clone.children = self.children[:]\n 150\t 2000\t\t871.0\t 0.4\t 11.4\t\t return clone\nAnd the timings; in the empty case (x), it's basically just paying the cost of class creation, but where there are clauses it is more consistent (ie: nearer a constant time vs linear growth).\nIn [10]: %timeit x._chain()\n6.51 µs ± 47.6 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each))\nIn [11]: %timeit y._chain()\n6.25 µs ± 36.4 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\nIn [12]: %timeit y.query.where.clone()\n1.16 µs ± 9.09 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\nIn [13]: %prun for _ in range(100000): y._chain()\n2100003 function calls in 1.087 seconds\nncalls tottime percall cumtime percall filename:lineno(function)\n100000\t0.355\t0.000\t0.606\t0.000 query.py:290(clone)\n100000\t0.169\t0.000\t0.939\t0.000 query.py:1337(_clone)\n100000\t0.068\t0.000\t0.139\t0.000 where.py:142(clone) <--- WhereNode\n100000\t0.067\t0.000\t0.683\t0.000 query.py:341(chain)\n100000\t0.058\t0.000\t1.009\t0.000 query.py:1325(_chain)\nIn [14]: %timeit tuple(User.objects.prefetch_related('groups__permissions', 'user_permissions'))\n17.9 ms ± 345 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\nGut feeling says the \"final\" implementation could be something like the following, directly on the Node class.\ndef __copy__(self):\n\tclone = self._new_instance(children=None, connector=self.connector, negated=self.negated)\n\tclone.children = self.children[:]\n\treturn clone\ncopy = __copy__\nclone = __copy__\ndef __deepcopy__(self, memo):\n\t...\n\tclone.children = copy.deepcopy(self.children, memo)\n\t...\nwhich would remove the need for methods on either subclass. Note also that aliasing the methods that way rather than doing def copy(): return self.clone() as WhereNode currently does is also slightly quicker. We're talking 0.10µs - small potatoes, but it doesn't hurt to have + it's 1 fewer stack frame.\nA final note then: if this properly shallow clone is done, I suspect resolve_expression can be altered too, to avoid calling _resolve_node if it's already been done on self - the shallow copy would ensure that anything which had previously been resolved is kept around and doesn't need doing again, I think.\nOther stats: Of the 14,000 tests I can run easily, only 1 time was resolved in self.__dict__ when clone was called (the value was True). contains_aggregate turned up 209 times (207 with a value of False, 2 with True), and output_field only appeared 2 times (both BooleanField). Those are the only extra attribute I spotted.\n",
  "hints_text": "OK, we can certainly Investigate. Thanks for the work Keryn. :)\nIn e441847e: Fixed #32970 -- Changed WhereNode.clone() to create a shallow copy of children.",
  "created_at": "2021-09-30T08:48:38Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_queryset_reuse (queries.tests.Queries5Tests)\"]",
  "PASS_TO_PASS": "[\"#13227 -- If a queryset is already evaluated, it can still be used as a query arg\", \"Cloning a queryset does not get out of hand. While complete\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_datetimes_invalid_field (queries.tests.Queries3Tests)\", \"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_ticket7371 (queries.tests.CustomPkTests)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"Can create an instance of a model with only the PK field (#17056).\\\"\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_ticket14729 (queries.tests.RawQueriesTests)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_ticket8597 (queries.tests.ComparisonTests)\", \"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_invalid_order_by_raw_column_alias (queries.tests.QuerySetExceptionTests)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_iter_exceptions (queries.tests.QuerySetExceptionTests)\", \"Generating the query string doesn't alter the query's state\", \"test_annotated_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_values_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"Subquery table names should be quoted.\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"Tests QuerySet ORed combining in exclude subquery case.\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"When a trimmable join is specified in the query (here school__), the\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_subquery_aliases (queries.tests.QuerySetBitwiseOperationTests)\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_pickle (queries.tests.ValuesQuerysetTests)\", \"This should exclude Orders which have some items with status 1\", \"Using exclude(condition) and exclude(Q(condition)) should\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"When passing proxy model objects, child objects, or parent objects,\", \"#23396 - Ensure ValueQuerySets are not checked for compatibility with the lookup field\", \"A ValueError is raised when the incorrect object type is passed to a\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_invalid_index (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_col_alias_quoted (queries.tests.Queries6Tests)\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"Related objects constraints can safely contain sliced subqueries.\", \"Slice a query that has a sliced subquery\", \"Delete queries can safely contain sliced subqueries\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_exclude_multivalued_exists (queries.tests.ExcludeTests)\", \"test_exclude_nullable_fields (queries.tests.ExcludeTests)\", \"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_exclude_subquery (queries.tests.ExcludeTests)\", \"test_exclude_with_circular_fk_relation (queries.tests.ExcludeTests)\", \"test_subquery_exclude_outerref (queries.tests.ExcludeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_combine_or_filter_reuse (queries.tests.Queries4Tests)\", \"test_filter_reverse_non_integer_pk (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)\", \"Valid query should be generated when fields fetched from joined tables\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_excluded_intermediary_m2m_table_joined (queries.tests.Queries1Tests)\", \"test_field_with_filterable (queries.tests.Queries1Tests)\", \"get() should clear ordering for optimization purposes.\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_negate_field (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"This test is related to the above one, testing that there aren't\", \"test_order_by_rawsql (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"Meta.ordering=None works the same as Meta.ordering=[]\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.707536",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}