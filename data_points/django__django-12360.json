{
  "repo": "django/django",
  "instance_id": "django__django-12360",
  "base_commit": "b423873cb7574a8088e32d3e23f4d01a99fefeb2",
  "patch": "diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -102,6 +102,7 @@ def check_models_permissions(app_configs=None, **kwargs):\n \n     Permission = apps.get_model('auth', 'Permission')\n     permission_name_max_length = Permission._meta.get_field('name').max_length\n+    permission_codename_max_length = Permission._meta.get_field('codename').max_length\n     errors = []\n \n     for model in models:\n@@ -126,6 +127,29 @@ def check_models_permissions(app_configs=None, **kwargs):\n                     id='auth.E007',\n                 )\n             )\n+        # Check builtin permission codename length.\n+        max_builtin_permission_codename_length = (\n+            max(len(codename) for codename in builtin_permissions.keys())\n+            if builtin_permissions else 0\n+        )\n+        if max_builtin_permission_codename_length > permission_codename_max_length:\n+            model_name_max_length = permission_codename_max_length - (\n+                max_builtin_permission_codename_length - len(opts.model_name)\n+            )\n+            errors.append(\n+                checks.Error(\n+                    \"The name of model '%s.%s' must be at most %d characters \"\n+                    \"for its builtin permission codenames to be at most %d \"\n+                    \"characters.\" % (\n+                        opts.app_label,\n+                        opts.object_name,\n+                        model_name_max_length,\n+                        permission_codename_max_length,\n+                    ),\n+                    obj=model,\n+                    id='auth.E011',\n+                )\n+            )\n         codenames = set()\n         for codename, name in opts.permissions:\n             # Check custom permission name length.\n@@ -139,6 +163,21 @@ def check_models_permissions(app_configs=None, **kwargs):\n                         id='auth.E008',\n                     )\n                 )\n+            # Check custom permission codename length.\n+            if len(codename) > permission_codename_max_length:\n+                errors.append(\n+                    checks.Error(\n+                        \"The permission codenamed '%s' of model '%s.%s' is \"\n+                        \"longer than %d characters.\" % (\n+                            codename,\n+                            opts.app_label,\n+                            opts.object_name,\n+                            permission_codename_max_length,\n+                        ),\n+                        obj=model,\n+                        id='auth.E012',\n+                    )\n+                )\n             # Check custom permissions codename clashing.\n             if codename in builtin_permissions:\n                 errors.append(\n",
  "test_patch": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -176,6 +176,20 @@ class Meta:\n             ),\n         ])\n \n+    def test_model_name_max_length(self):\n+        model_name = 'X' * 94\n+        model = type(model_name, (models.Model,), {'__module__': self.__module__})\n+        errors = checks.run_checks(self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"The name of model 'auth_tests.%s' must be at most 93 \"\n+                \"characters for its builtin permission codenames to be at \"\n+                \"most 100 characters.\" % model_name,\n+                obj=model,\n+                id='auth.E011',\n+            ),\n+        ])\n+\n     def test_custom_permission_name_max_length(self):\n         custom_permission_name = 'some ridiculously long verbose name that is out of control' * 5\n \n@@ -194,6 +208,25 @@ class Meta:\n             ),\n         ])\n \n+    def test_custom_permission_codename_max_length(self):\n+        custom_permission_codename = 'x' * 101\n+\n+        class Checked(models.Model):\n+            class Meta:\n+                permissions = [\n+                    (custom_permission_codename, 'Custom permission'),\n+                ]\n+\n+        errors = checks.run_checks(self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"The permission codenamed '%s' of model 'auth_tests.Checked' \"\n+                \"is longer than 100 characters.\" % custom_permission_codename,\n+                obj=Checked,\n+                id='auth.E012',\n+            ),\n+        ])\n+\n     def test_empty_default_permissions(self):\n         class Checked(models.Model):\n             class Meta:\n",
  "problem_statement": "Add system check for the length of auth permissions codenames.\nDescription\n\t\nI stumbled across this while performing some migrations on models with rather... descriptive names (my original model was dynamically created).\nAnyway, it looks like in cases where a model name is just under the 100 character limit, and contrib.auth is used, the codenames generated for the default permissions (ie. add_*, change_*, delete_*, view_*) can exceed the maximum 100 characters on the Permission model.\nAs an example, the model below having a 98 character name allows migrations to be generated, but upon running the migration, a database error is raised when it tries to create permissions with codenames above 100 characters.\nThe model:\nclass SomeExcessivelyDescriptiveModelWithAnAbsolutelyRidiculousNameThatCouldntEverNeedToBeNearlyThisLong(models.Model):\n\tfield1 = models.CharField(max_length=25)\nThe error:\ndjango.db.utils.DataError: value too long for type character varying(100)\nWhile I'm aware that you can override the default permissions by setting Meta.default_permissions on the model (this is how I fixed my app), and that the majority of people would never need model names this long, I figured it might be worth adding validation for this case since it uses contrib.auth's default behaviour. Also, the error message originally came up while using a flush command, which seemed counterintuitive.\n",
  "hints_text": "",
  "created_at": "2020-01-23T04:23:05Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_custom_permission_codename_max_length (auth_tests.test_checks.ModelsPermissionsChecksTests)\", \"test_model_name_max_length (auth_tests.test_checks.ModelsPermissionsChecksTests)\"]",
  "PASS_TO_PASS": "[\"test_clashing_custom_permissions (auth_tests.test_checks.ModelsPermissionsChecksTests)\", \"test_clashing_default_permissions (auth_tests.test_checks.ModelsPermissionsChecksTests)\", \"test_custom_permission_name_max_length (auth_tests.test_checks.ModelsPermissionsChecksTests)\", \"test_empty_default_permissions (auth_tests.test_checks.ModelsPermissionsChecksTests)\", \"test_non_clashing_custom_permissions (auth_tests.test_checks.ModelsPermissionsChecksTests)\", \"test_verbose_name_max_length (auth_tests.test_checks.ModelsPermissionsChecksTests)\", \"test_is_anonymous_authenticated_methods (auth_tests.test_checks.UserModelChecksTests)\", \"REQUIRED_FIELDS should be a list.\", \"test_username_non_unique (auth_tests.test_checks.UserModelChecksTests)\", \"USERNAME_FIELD should not appear in REQUIRED_FIELDS.\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.622984",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}