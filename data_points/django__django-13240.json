{
  "repo": "django/django",
  "instance_id": "django__django-13240",
  "base_commit": "ba691933cee375195c9c50f333dd4b2a3abbb726",
  "patch": "diff --git a/django/conf/__init__.py b/django/conf/__init__.py\n--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -81,6 +81,8 @@ def __getattr__(self, name):\n         # This is done here for performance reasons so the modified value is cached.\n         if name in {'MEDIA_URL', 'STATIC_URL'} and val is not None:\n             val = self._add_script_prefix(val)\n+        elif name == 'SECRET_KEY' and not val:\n+            raise ImproperlyConfigured(\"The SECRET_KEY setting must not be empty.\")\n \n         self.__dict__[name] = val\n         return val\n@@ -184,9 +186,6 @@ def __init__(self, settings_module):\n                 setattr(self, setting, setting_value)\n                 self._explicit_settings.add(setting)\n \n-        if not self.SECRET_KEY:\n-            raise ImproperlyConfigured(\"The SECRET_KEY setting must not be empty.\")\n-\n         if self.is_overridden('PASSWORD_RESET_TIMEOUT_DAYS'):\n             if self.is_overridden('PASSWORD_RESET_TIMEOUT'):\n                 raise ImproperlyConfigured(\ndiff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -12,7 +12,10 @@ class PasswordResetTokenGenerator:\n     \"\"\"\n     key_salt = \"django.contrib.auth.tokens.PasswordResetTokenGenerator\"\n     algorithm = 'sha256'\n-    secret = settings.SECRET_KEY\n+    secret = None\n+\n+    def __init__(self):\n+        self.secret = self.secret or settings.SECRET_KEY\n \n     def make_token(self, user):\n         \"\"\"\ndiff --git a/django/core/checks/security/base.py b/django/core/checks/security/base.py\n--- a/django/core/checks/security/base.py\n+++ b/django/core/checks/security/base.py\n@@ -1,4 +1,5 @@\n from django.conf import settings\n+from django.core.exceptions import ImproperlyConfigured\n \n from .. import Error, Tags, Warning, register\n \n@@ -182,11 +183,15 @@ def check_ssl_redirect(app_configs, **kwargs):\n \n @register(Tags.security, deploy=True)\n def check_secret_key(app_configs, **kwargs):\n-    passed_check = (\n-        getattr(settings, 'SECRET_KEY', None) and\n-        len(set(settings.SECRET_KEY)) >= SECRET_KEY_MIN_UNIQUE_CHARACTERS and\n-        len(settings.SECRET_KEY) >= SECRET_KEY_MIN_LENGTH\n-    )\n+    try:\n+        secret_key = settings.SECRET_KEY\n+    except (ImproperlyConfigured, AttributeError):\n+        passed_check = False\n+    else:\n+        passed_check = (\n+            len(set(secret_key)) >= SECRET_KEY_MIN_UNIQUE_CHARACTERS and\n+            len(secret_key) >= SECRET_KEY_MIN_LENGTH\n+        )\n     return [] if passed_check else [W009]\n \n \n",
  "test_patch": "diff --git a/tests/settings_tests/tests.py b/tests/settings_tests/tests.py\n--- a/tests/settings_tests/tests.py\n+++ b/tests/settings_tests/tests.py\n@@ -289,15 +289,11 @@ def test_override_settings_nested(self):\n         with self.assertRaises(AttributeError):\n             getattr(settings, 'TEST2')\n \n+    @override_settings(SECRET_KEY='')\n     def test_no_secret_key(self):\n-        settings_module = ModuleType('fake_settings_module')\n-        sys.modules['fake_settings_module'] = settings_module\n         msg = 'The SECRET_KEY setting must not be empty.'\n-        try:\n-            with self.assertRaisesMessage(ImproperlyConfigured, msg):\n-                Settings('fake_settings_module')\n-        finally:\n-            del sys.modules['fake_settings_module']\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            settings.SECRET_KEY\n \n     def test_no_settings_module(self):\n         msg = (\n",
  "problem_statement": "Change Settings to raise ImproperlyConfigured on SECRET_KEY; not initialization\nDescription\n\t\nSince ticket #17800, initializing settings without a SECRET_KEY raises a an ImproperlyConfigured during settings initialization.\nInstead, I think the error should be raised when the setting is accessed as Settings.SECRET_KEY.\nMy use case, my project has a number of management commands that run in a non-production, minimally configured environment. These management commands do not require SECRET_KEY, however, the environment is forced to provide one.\nAs a workaround this environment has been generating a random secret key each run. If Django were to instead raise the error on SECRET_KEY access, this workaround would not be necessary.\n",
  "hints_text": "​PR\nUpdated PR to address feedback. Thanks.\nIn b3cffde5: Fixed #29324 -- Made Settings raise ImproperlyConfigured if SECRET_KEY is accessed and not set.\nThis causes a regression when using settings.configure(). UserSettingsHolder does not handle the missing SECRET_KEY attribute, and raises an AttributeError instead of ImproperlyConfigured. (Discovered by bukensik in #django)\n​PR for the regression.\nIn 5cc81cd9: Reverted \"Fixed #29324 -- Made Settings raise ImproperlyConfigured if SECRET_KEY is accessed and not set.\" This reverts commit b3cffde5559c4fa97625512d7ec41a674be26076 due to a regression and performance concerns.\nIn 483f5d6c: [2.1.x] Reverted \"Fixed #29324 -- Made Settings raise ImproperlyConfigured if SECRET_KEY is accessed and not set.\" This reverts commit b3cffde5559c4fa97625512d7ec41a674be26076 due to a regression and performance concerns. Backport of 5cc81cd9eb69f5f7a711412c02039b435c393135 from master\nI reverted the original patch for now as Claude expressed some concerns, \"I'm not sure to like the additional test for every setting access, for a corner-case use case. I think we should consider reverting the initial patch instead.\" I'll leave the ticket open for Jon to provide an alternative patch or to close the ticket as wontfix.\n​PR\nAfter researching the code necessary to handle the edge cases, I don't think the complexity is worth it to include in Django. I'll stick with my local project workaround instead.\nReopening after recent ML discussion: ​https://groups.google.com/g/django-developers/c/CIPgeTetYpk",
  "created_at": "2020-07-26T18:28:23Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_no_secret_key (settings_tests.tests.SettingsTests)\"]",
  "PASS_TO_PASS": "[\"test_max_recursion_error (settings_tests.tests.ClassDecoratedTestCaseSuper)\", \"test_override_settings_inheritance (settings_tests.tests.ChildDecoratedTestCase)\", \"test_tuple_settings (settings_tests.tests.TestListSettings)\", \"test_configure (settings_tests.tests.IsOverriddenTest)\", \"test_evaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_module (settings_tests.tests.IsOverriddenTest)\", \"test_override (settings_tests.tests.IsOverriddenTest)\", \"test_settings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_unevaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_usersettingsholder_repr (settings_tests.tests.IsOverriddenTest)\", \"test_none (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_right (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_wrong (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_without_xheader (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_xheader_preferred_to_underlying_request (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_method_override (settings_tests.tests.FullyDecoratedTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTestCase)\", \"Receiver fails on both enter and exit.\", \"Receiver fails on enter only.\", \"Receiver fails on exit only.\", \"test_override_settings_reusable_on_enter (settings_tests.tests.OverrideSettingsIsolationOnExceptionTests)\", \"Regression test for #19031\", \"test_max_recursion_error (settings_tests.tests.ClassDecoratedTestCase)\", \"test_method_override (settings_tests.tests.ClassDecoratedTestCase)\", \"test_override (settings_tests.tests.ClassDecoratedTestCase)\", \"Settings are overridden within setUpClass (#21281).\", \"test_already_configured (settings_tests.tests.SettingsTests)\", \"test_class_decorator (settings_tests.tests.SettingsTests)\", \"test_context_manager (settings_tests.tests.SettingsTests)\", \"test_decorator (settings_tests.tests.SettingsTests)\", \"test_incorrect_timezone (settings_tests.tests.SettingsTests)\", \"test_no_settings_module (settings_tests.tests.SettingsTests)\", \"test_nonupper_settings_ignored_in_default_settings (settings_tests.tests.SettingsTests)\", \"test_nonupper_settings_prohibited_in_configure (settings_tests.tests.SettingsTests)\", \"test_override (settings_tests.tests.SettingsTests)\", \"test_override_change (settings_tests.tests.SettingsTests)\", \"test_override_doesnt_leak (settings_tests.tests.SettingsTests)\", \"test_override_settings_delete (settings_tests.tests.SettingsTests)\", \"test_override_settings_nested (settings_tests.tests.SettingsTests)\", \"test_settings_delete (settings_tests.tests.SettingsTests)\", \"test_settings_delete_wrapped (settings_tests.tests.SettingsTests)\", \"test_signal_callback_context_manager (settings_tests.tests.SettingsTests)\", \"test_signal_callback_decorator (settings_tests.tests.SettingsTests)\", \"test_decorated_testcase_module (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_decorated_testcase_name (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_nested_order (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_no_ops (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_strings (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_add_script_name_prefix (settings_tests.tests.MediaURLStaticURLPrefixTest)\", \"test_not_prefixed (settings_tests.tests.MediaURLStaticURLPrefixTest)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.649174",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}