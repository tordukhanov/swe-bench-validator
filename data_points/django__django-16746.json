{
  "repo": "django/django",
  "instance_id": "django__django-16746",
  "base_commit": "041b0a359a0a80e147b47c6ae5f11bca9dd3b28a",
  "patch": "diff --git a/django/core/paginator.py b/django/core/paginator.py\n--- a/django/core/paginator.py\n+++ b/django/core/paginator.py\n@@ -28,13 +28,30 @@ class Paginator:\n     # Translators: String used to replace omitted page numbers in elided page\n     # range generated by paginators, e.g. [1, 2, '…', 5, 6, 7, '…', 9, 10].\n     ELLIPSIS = _(\"…\")\n-\n-    def __init__(self, object_list, per_page, orphans=0, allow_empty_first_page=True):\n+    default_error_messages = {\n+        \"invalid_page\": _(\"That page number is not an integer\"),\n+        \"min_page\": _(\"That page number is less than 1\"),\n+        \"no_results\": _(\"That page contains no results\"),\n+    }\n+\n+    def __init__(\n+        self,\n+        object_list,\n+        per_page,\n+        orphans=0,\n+        allow_empty_first_page=True,\n+        error_messages=None,\n+    ):\n         self.object_list = object_list\n         self._check_object_list_is_ordered()\n         self.per_page = int(per_page)\n         self.orphans = int(orphans)\n         self.allow_empty_first_page = allow_empty_first_page\n+        self.error_messages = (\n+            self.default_error_messages\n+            if error_messages is None\n+            else self.default_error_messages | error_messages\n+        )\n \n     def __iter__(self):\n         for page_number in self.page_range:\n@@ -47,11 +64,11 @@ def validate_number(self, number):\n                 raise ValueError\n             number = int(number)\n         except (TypeError, ValueError):\n-            raise PageNotAnInteger(_(\"That page number is not an integer\"))\n+            raise PageNotAnInteger(self.error_messages[\"invalid_page\"])\n         if number < 1:\n-            raise EmptyPage(_(\"That page number is less than 1\"))\n+            raise EmptyPage(self.error_messages[\"min_page\"])\n         if number > self.num_pages:\n-            raise EmptyPage(_(\"That page contains no results\"))\n+            raise EmptyPage(self.error_messages[\"no_results\"])\n         return number\n \n     def get_page(self, number):\n",
  "test_patch": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -128,6 +128,34 @@ def test_invalid_page_number(self):\n         with self.assertRaises(PageNotAnInteger):\n             paginator.validate_number(1.2)\n \n+    def test_error_messages(self):\n+        error_messages = {\n+            \"invalid_page\": \"Wrong page number\",\n+            \"min_page\": \"Too small\",\n+            \"no_results\": \"There is nothing here\",\n+        }\n+        paginator = Paginator([1, 2, 3], 2, error_messages=error_messages)\n+        msg = \"Wrong page number\"\n+        with self.assertRaisesMessage(PageNotAnInteger, msg):\n+            paginator.validate_number(1.2)\n+        msg = \"Too small\"\n+        with self.assertRaisesMessage(EmptyPage, msg):\n+            paginator.validate_number(-1)\n+        msg = \"There is nothing here\"\n+        with self.assertRaisesMessage(EmptyPage, msg):\n+            paginator.validate_number(3)\n+\n+        error_messages = {\"min_page\": \"Too small\"}\n+        paginator = Paginator([1, 2, 3], 2, error_messages=error_messages)\n+        # Custom message.\n+        msg = \"Too small\"\n+        with self.assertRaisesMessage(EmptyPage, msg):\n+            paginator.validate_number(-1)\n+        # Default message.\n+        msg = \"That page contains no results\"\n+        with self.assertRaisesMessage(EmptyPage, msg):\n+            paginator.validate_number(3)\n+\n     def test_float_integer_page(self):\n         paginator = Paginator([1, 2, 3], 2)\n         self.assertEqual(paginator.validate_number(1.0), 1)\n",
  "problem_statement": "Error messages customization and internationalization in Paginator class\nDescription\n\t\nThere is no ability to change error messages raised by Paginator.validate_number method.\n",
  "hints_text": "I created a PR ​https://github.com/django/django/pull/7578\nIn e690eb40: Refs #27505 -- Made Paginator's exception messsages translatable.\nStrings are now marked for translation. Easing customization of error messages to be done separately.\nDoes this still need work?\nReplying to Shivan Sivakumaran: Does this still need work? Yes, see comment: ... Easing customization of error messages to be done separately.\nHi, I'm a new contributor and I'd love to give it a try\nReplying to Pedro Magno Müller: Hi, I'm a new contributor and I'd love to give it a try hi are you still working on it or may i take the issue?\ndon't we have a workaround for that like directly import \"PageNotAnInteger\" and \"EmptyPage\" Exceptions directly and use them in our logic isn't it , a way to customization .?\nReplying to Aman Pandey: Replying to Pedro Magno Müller: Hi, I'm a new contributor and I'd love to give it a try hi are you still working on it or may i take the issue? Hello, Can i take this up?\nsurReplying to Uzair Ali: Replying to Aman Pandey: Replying to Pedro Magno Müller: Hi, I'm a new contributor and I'd love to give it a try hi are you still working on it or may i take the issue? Hello, Can i take this up? yea sure but can we work together like ?\nI am unsure if this customisation is needed anymore as currently, all usages of Paginator.validate_number will have a try/except block to catch the ValueError exception and set it as 1.",
  "created_at": "2023-04-10T01:35:54Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_error_messages (pagination.tests.PaginationTests.test_error_messages)\"]",
  "PASS_TO_PASS": "[\"test_count_does_not_silence_attribute_error (pagination.tests.PaginationTests.test_count_does_not_silence_attribute_error)\", \"test_count_does_not_silence_type_error (pagination.tests.PaginationTests.test_count_does_not_silence_type_error)\", \"test_float_integer_page (pagination.tests.PaginationTests.test_float_integer_page)\", \"test_get_elided_page_range (pagination.tests.PaginationTests.test_get_elided_page_range)\", \"Paginator.get_page() returns a valid page even with invalid page\", \"Paginator.get_page() with an empty object_list.\", \"Paginator.get_page() raises EmptyPage if allow_empty_first_page=False\", \"A Paginator subclass can use the ``_get_page`` hook to\", \"Invalid page numbers result in the correct exception being raised.\", \"test_no_content_allow_empty_first_page (pagination.tests.PaginationTests.test_no_content_allow_empty_first_page)\", \"Paginator pages have the correct start and end indexes.\", \"Paginator.page_range should be an iterator.\", \"A paginator page acts like a standard sequence.\", \"test_paginate_misc_classes (pagination.tests.PaginationTests.test_paginate_misc_classes)\", \"Tests the paginator attributes using varying inputs.\", \"test_paginator_iteration (pagination.tests.PaginationTests.test_paginator_iteration)\", \"test_first_page (pagination.tests.ModelPaginationTests.test_first_page)\", \"test_last_page (pagination.tests.ModelPaginationTests.test_last_page)\", \"Tests proper behavior of a paginator page __getitem__ (queryset\", \"test_paginating_empty_queryset_does_not_warn (pagination.tests.ModelPaginationTests.test_paginating_empty_queryset_does_not_warn)\", \"Unordered object list warning with an object that has an ordered\", \"test_paginating_unordered_queryset_raises_warning (pagination.tests.ModelPaginationTests.test_paginating_unordered_queryset_raises_warning)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.769870",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}