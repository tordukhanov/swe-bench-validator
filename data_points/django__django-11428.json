{
  "repo": "django/django",
  "instance_id": "django__django-11428",
  "base_commit": "fcbc502af93f0ee75522c45ae6ec2925da9f2145",
  "patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -74,7 +74,7 @@ def wrapper(*args, **kwargs):\n def raise_last_exception():\n     global _exception\n     if _exception is not None:\n-        raise _exception[0](_exception[1]).with_traceback(_exception[2])\n+        raise _exception[1]\n \n \n def ensure_echo_on():\n",
  "test_patch": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -295,6 +295,36 @@ class MyException(Exception):\n             with self.assertRaisesMessage(MyException, 'Test Message'):\n                 autoreload.raise_last_exception()\n \n+    def test_raises_custom_exception(self):\n+        class MyException(Exception):\n+            def __init__(self, msg, extra_context):\n+                super().__init__(msg)\n+                self.extra_context = extra_context\n+        # Create an exception.\n+        try:\n+            raise MyException('Test Message', 'extra context')\n+        except MyException:\n+            exc_info = sys.exc_info()\n+\n+        with mock.patch('django.utils.autoreload._exception', exc_info):\n+            with self.assertRaisesMessage(MyException, 'Test Message'):\n+                autoreload.raise_last_exception()\n+\n+    def test_raises_exception_with_context(self):\n+        try:\n+            raise Exception(2)\n+        except Exception as e:\n+            try:\n+                raise Exception(1) from e\n+            except Exception:\n+                exc_info = sys.exc_info()\n+\n+        with mock.patch('django.utils.autoreload._exception', exc_info):\n+            with self.assertRaises(Exception) as cm:\n+                autoreload.raise_last_exception()\n+            self.assertEqual(cm.exception.args[0], 1)\n+            self.assertEqual(cm.exception.__cause__.args[0], 2)\n+\n \n class RestartWithReloaderTests(SimpleTestCase):\n     executable = '/usr/bin/python'\n",
  "problem_statement": "Autoreloader crashes on re-raising exceptions with custom signature.\nDescription\n\t \n\t\t(last modified by Alan Trick)\n\t \nHow to reproduce:\nIn apps.py, put the following code, and update init.py or the settings to have this app config be used.\nfrom django.apps import AppConfig\nclass MyException(Exception):\n\tdef __init__(self, value: str, other_thing: str):\n\t\tsuper().__init__(value)\n\t\tself.ot = other_thing\nclass Config(AppConfig):\n\tname = \"myapp\"\n\tverbose_name = \"My App\"\n\tdef ready(self):\n\t\traise MyException(\"foo\", \"bar\")\nThe problem is that django.utils.autoreload.raise_last_exception tries to construct a new exception of the same type, with 1 argument (the original exception). The consequence is that you just get a TypeError exception about __init__() missing 1 required positional argument: 'other_thing' and it completely masks the original exception.\nNote that this behavior was changed in c8720e7696ca41f3262d5369365cc1bd72a216ca, it used to just re-raise the exception value. I don't know why it was changed.\nI noticed this issue as a result of â€‹https://gitlab.com/alantrick/django-vox/issues/9\n",
  "hints_text": "Thanks for the report. Regression in c8720e7696ca41f3262d5369365cc1bd72a216ca. Reproduced at df46b329e0900e9e4dc1d60816c1dce6dfc1094e.\nRegression test.",
  "created_at": "2019-05-28T18:08:20Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_raises_custom_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception_with_context (utils_tests.test_autoreload.TestRaiseLastException)\"]",
  "PASS_TO_PASS": "[\"test_no_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_common_roots (utils_tests.test_autoreload.TestCommonRoots)\", \"test_watchman_available (utils_tests.test_autoreload.GetReloaderTests)\", \"test_watchman_unavailable (utils_tests.test_autoreload.GetReloaderTests)\", \"test_mutates_error_files (utils_tests.test_autoreload.TestCheckErrors)\", \"test_calls_start_django (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_calls_sys_exit (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_swallows_keyboard_interrupt (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_sys_paths_absolute (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_non_existing (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_with_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_manage_py (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_python_m_django (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_run_loop_catches_stopiteration (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_run_loop_stop_and_return (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_checks_for_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_without_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_files_with_recursive_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_with_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_with_single_file (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_without_absolute (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_file (utils_tests.test_autoreload.StatReloaderTests)\", \"test_glob (utils_tests.test_autoreload.StatReloaderTests)\", \"test_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_recursive_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_nested_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_ignores_missing_files (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_updates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_with_duplicates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_check_errors_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_echo_on_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_starts_thread_with_args (utils_tests.test_autoreload.StartDjangoTests)\", \"test_watchman_becomes_unavailable (utils_tests.test_autoreload.StartDjangoTests)\", \".pyc and .pyo files are included in the files list.\", \"test_check_errors (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_check_errors_catches_all_exceptions (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_file_added (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_is_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_module_without_spec (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_paths_are_pathlib_instances (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"iter_all_python_module_file() ignores weakref modules.\", \"test_zip_reload (utils_tests.test_autoreload.TestIterModulesAndFiles)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.572525",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}