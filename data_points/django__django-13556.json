{
  "repo": "django/django",
  "instance_id": "django__django-13556",
  "base_commit": "0f182558484ec7964413fc93f6361f0842135b2b",
  "patch": "diff --git a/django/db/backends/base/base.py b/django/db/backends/base/base.py\n--- a/django/db/backends/base/base.py\n+++ b/django/db/backends/base/base.py\n@@ -632,6 +632,8 @@ def schema_editor(self, *args, **kwargs):\n         return self.SchemaEditorClass(self, *args, **kwargs)\n \n     def on_commit(self, func):\n+        if not callable(func):\n+            raise TypeError(\"on_commit()'s callback must be a callable.\")\n         if self.in_atomic_block:\n             # Transaction in progress; save for execution on commit.\n             self.run_on_commit.append((set(self.savepoint_ids), func))\n",
  "test_patch": "diff --git a/tests/transaction_hooks/tests.py b/tests/transaction_hooks/tests.py\n--- a/tests/transaction_hooks/tests.py\n+++ b/tests/transaction_hooks/tests.py\n@@ -233,3 +233,8 @@ def should_never_be_called():\n                 transaction.on_commit(should_never_be_called)\n         finally:\n             connection.set_autocommit(True)\n+\n+    def test_raises_exception_non_callable(self):\n+        msg = \"on_commit()'s callback must be a callable.\"\n+        with self.assertRaisesMessage(TypeError, msg):\n+            transaction.on_commit(None)\n",
  "problem_statement": "Allowing null values while registering function on transaction on_commit\nDescription\n\t\nSo if I were to try this command:-\ntransaction.on_commit(None)\nand run any sample tests which has simple django db post_save signal in the flow and it has functions which run on transaction commit, the code would crash with error\nTypeError: 'NoneType' object is not callable. \nSo how about if we do not allow it to register as none beforehand or allow it to exit gracefully?\n",
  "hints_text": "I guess we could add a callable guard in transaction.on_commit to make tracing easier like we did in Signal.connect â€‹https://github.com/django/django/blob/b26ec77deb7c5052163ef8514ec7db70c0a5ea2a/django/dispatch/dispatcher.py#L90",
  "created_at": "2020-10-18T08:25:22Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_raises_exception_non_callable (transaction_hooks.tests.TestConnectionOnCommit)\"]",
  "PASS_TO_PASS": "[\"test_db_query_in_hook (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_delays_execution_until_after_transaction_commit (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_discards_hooks_from_rolled_back_savepoint (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_does_not_execute_if_transaction_rolled_back (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_error_in_hook_doesnt_prevent_clearing_hooks (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_executes_immediately_if_no_transaction (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_executes_only_after_final_transaction_committed (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_hook_in_hook (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_hooks_cleared_after_rollback (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_hooks_cleared_after_successful_commit (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_inner_savepoint_does_not_affect_outer (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_inner_savepoint_rolled_back_with_outer (transaction_hooks.tests.TestConnectionOnCommit)\", \"If outer transaction fails, no hooks from within it run.\", \"test_no_savepoints_atomic_merged_with_outer (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_raises_exception_non_autocommit_mode (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_runs_hooks_in_order_registered (transaction_hooks.tests.TestConnectionOnCommit)\", \"test_transaction_in_hook (transaction_hooks.tests.TestConnectionOnCommit)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.661897",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}