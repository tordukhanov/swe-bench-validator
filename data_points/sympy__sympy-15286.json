{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15286",
  "base_commit": "5997e30a33f92e6b4b4d351e835feb7379a0e31d",
  "patch": "diff --git a/sympy/geometry/ellipse.py b/sympy/geometry/ellipse.py\n--- a/sympy/geometry/ellipse.py\n+++ b/sympy/geometry/ellipse.py\n@@ -402,8 +402,11 @@ def encloses_point(self, p):\n \n         return fuzzy_bool(test.is_positive)\n \n-    def equation(self, x='x', y='y'):\n-        \"\"\"The equation of the ellipse.\n+    def equation(self, x='x', y='y', _slope=None):\n+        \"\"\"\n+        Returns the equation of an ellipse aligned with the x and y axes;\n+        when slope is given, the equation returned corresponds to an ellipse\n+        with a major axis having that slope.\n \n         Parameters\n         ==========\n@@ -412,6 +415,8 @@ def equation(self, x='x', y='y'):\n             Label for the x-axis. Default value is 'x'.\n         y : str, optional\n             Label for the y-axis. Default value is 'y'.\n+        _slope : Expr, optional\n+                The slope of the major axis. Ignored when 'None'.\n \n         Returns\n         =======\n@@ -426,17 +431,52 @@ def equation(self, x='x', y='y'):\n         Examples\n         ========\n \n-        >>> from sympy import Point, Ellipse\n+        >>> from sympy import Point, Ellipse, pi\n+        >>> from sympy.abc import x, y\n         >>> e1 = Ellipse(Point(1, 0), 3, 2)\n-        >>> e1.equation()\n+        >>> eq1 = e1.equation(x, y); eq1\n         y**2/4 + (x/3 - 1/3)**2 - 1\n+        >>> eq2 = e1.equation(x, y, _slope=1); eq2\n+        (-x + y + 1)**2/8 + (x + y - 1)**2/18 - 1\n+\n+        A point on e1 satisfies eq1. Let's use one on the x-axis:\n+\n+        >>> p1 = e1.center + Point(e1.major, 0)\n+        >>> assert eq1.subs(x, p1.x).subs(y, p1.y) == 0\n+\n+        When rotated the same as the rotated ellipse, about the center\n+        point of the ellipse, it will satisfy the rotated ellipse's\n+        equation, too:\n+\n+        >>> r1 = p1.rotate(pi/4, e1.center)\n+        >>> assert eq2.subs(x, r1.x).subs(y, r1.y) == 0\n+\n+        References\n+        ==========\n+\n+        .. [1] https://math.stackexchange.com/questions/108270/what-is-the-equation-of-an-ellipse-that-is-not-aligned-with-the-axis\n+        .. [2] https://en.wikipedia.org/wiki/Ellipse#Equation_of_a_shifted_ellipse\n \n         \"\"\"\n+\n         x = _symbol(x, real=True)\n         y = _symbol(y, real=True)\n-        t1 = ((x - self.center.x) / self.hradius)**2\n-        t2 = ((y - self.center.y) / self.vradius)**2\n-        return t1 + t2 - 1\n+\n+        dx = x - self.center.x\n+        dy = y - self.center.y\n+\n+        if _slope is not None:\n+            L = (dy - _slope*dx)**2\n+            l = (_slope*dy + dx)**2\n+            h = 1 + _slope**2\n+            b = h*self.major**2\n+            a = h*self.minor**2\n+            return l/b + L/a - 1\n+\n+        else:\n+            t1 = (dx/self.hradius)**2\n+            t2 = (dy/self.vradius)**2\n+            return t1 + t2 - 1\n \n     def evolute(self, x='x', y='y'):\n         \"\"\"The equation of evolute of the ellipse.\n",
  "test_patch": "diff --git a/sympy/geometry/tests/test_ellipse.py b/sympy/geometry/tests/test_ellipse.py\n--- a/sympy/geometry/tests/test_ellipse.py\n+++ b/sympy/geometry/tests/test_ellipse.py\n@@ -8,6 +8,20 @@\n from sympy import integrate\n from sympy.functions.special.elliptic_integrals import elliptic_e\n \n+\n+def test_ellipse_equation_using_slope():\n+    from sympy.abc import x, y\n+\n+    e1 = Ellipse(Point(1, 0), 3, 2)\n+    assert str(e1.equation(_slope=1)) == str((-x + y + 1)**2/8 + (x + y - 1)**2/18 - 1)\n+\n+    e2 = Ellipse(Point(0, 0), 4, 1)\n+    assert str(e2.equation(_slope=1)) == str((-x + y)**2/2 + (x + y)**2/32 - 1)\n+\n+    e3 = Ellipse(Point(1, 5), 6, 2)\n+    assert str(e3.equation(_slope=2)) == str((-2*x + y - 3)**2/20 + (x + 2*y - 11)**2/180 - 1)\n+\n+\n def test_object_from_equation():\n     from sympy.abc import x, y, a, b\n     assert Circle(x**2 + y**2 + 3*x + 4*y - 8) == Circle(Point2D(S(-3) / 2, -2),\n",
  "problem_statement": "recognize elliptical integrals\n```\nThis requires about 2 minutes\n\n>>> Ellipse((0,0),3,1).circumference.n()\n13.3648932205553\n\n\nThis is nearly instantaneous\n\n>>> def EllipseCircumference(a, b):\n...    \"\"\"\n...    Compute the circumference of an ellipse with semi-axes a and b.\n...    Require a >= 0 and b >= 0.  Relative accuracy is about 0.5^53.\n...    \"\"\"\n...    import math\n...    x, y = max(a, b), min(a, b)\n...    digits = 53; tol = math.sqrt(math.pow(0.5, digits))\n...    if digits * y < tol * x: return 4 * x\n...    s = 0; m = 1\n...    while x - y > tol * y:\n...       x, y = 0.5 * (x + y), math.sqrt(x * y)\n...       m *= 2; s += m * math.pow(x - y, 2)\n...    return math.pi * (math.pow(a + b, 2) - s) / (x + y)\n...\n>>> EllipseCircumference(3,1)\n13.364893220555258\n>>>\n\nPerhaps recognition of such integrals by integrate/Integral.evalf would be a good idea.\n```\n\nOriginal issue for #6952: http://code.google.com/p/sympy/issues/detail?id=3853\nOriginal author: https://code.google.com/u/117933771799683895267/\n\nAdded function for finding equation of Ellipse using slope as parameter and faster method for calculation of circumference of ellipse\nAdded function for finding equation of Ellipse using slope as parameter.\r\nAdded another method `Ellipse_Cirumference` for calculation of circumference of ellipse.\r\nAdded a new method called `are_collinear`\r\nPluralized the following methods\r\n`direction_ratio` -> `direction_ratios`\r\n`direction_cosine` -> `direction_cosines`\r\n\r\nFixes #2815\r\nFixes #6952\r\nFixes #7713\r\n\r\nThis PR uses the approach to finding equation of ellipse using slope, length of semi minor axis and length of semi major axis as inputs given [here](https://math.stackexchange.com/questions/108270/what-is-the-equation-of-an-ellipse-that-is-not-aligned-with-the-axis/646971#646971)\r\nThis could be an added functionality to the equation finding method in class `Ellipse`.\r\nThanks to @smichr  for providing the approach.\r\n\r\nPlease take a look at this PR and suggest changes. I will be glad to implement them.\r\nThanks.\r\n\r\n#### Release Notes\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n* geometry\r\n   * added function `equation_using_slope` for finding equation of Ellipse using slope as parameter\r\n<!-- END RELEASE NOTES -->\r\n\n",
  "hints_text": "```\nWhat is the actual integral being computed?\n\n**Labels:** Integration  \n\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=3853#c1\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\n```\n**Labels:** Geometry  \n\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=3853#c2\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\n```\nEllipse((0,0),3,1).circumference -> gives the integral\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=3853#c3\nOriginal author: https://code.google.com/u/117933771799683895267/\n\n```\nIntegral.evalf is just slow. The whole thing should be audited. Even Integral.as_sum is often faster.\n\n**Labels:** Evalf  \n\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=3853#c4\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\n```\nThe code above is said to be a quadratically converging computation of the result so even if the general evalf improves, the above will likely be faster.\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=3853#c5\nOriginal author: https://code.google.com/u/117933771799683895267/\n\n@smichr Is there a reason this hasn't been implemented if it's faster than the current method?\n\nI think this issue is about taking care of such things everywhere.\n\nI don't think anyone's done any work on `Integral.eval` in a long time. It needs some love. \n\n:white_check_mark:\n\nHi, I am the [SymPy bot](https://github.com/sympy/sympy-bot) (v132). I'm here to help you write a release notes entry. Please read the [guide on how to write release notes](https://github.com/sympy/sympy/wiki/Writing-Release-Notes).\n\n\n\nYour release notes are in good order.\n\nHere is what the release notes will look like:\n* geometry\n  * added function `equation_using_slope` for finding equation of Ellipse using slope as parameter ([#15053](https://github.com/sympy/sympy/pull/15053) by [@Abdullahjavednesar](https://github.com/Abdullahjavednesar), [@NikhilPappu](https://github.com/NikhilPappu), [@Upabjojr](https://github.com/Upabjojr), [@asmeurer](https://github.com/asmeurer), [@avishrivastava11](https://github.com/avishrivastava11), [@cbm755](https://github.com/cbm755), [@czgdp1807](https://github.com/czgdp1807), [@grozin](https://github.com/grozin), [@isuruf](https://github.com/isuruf), [@jksuom](https://github.com/jksuom), [@maurogaravello](https://github.com/maurogaravello), [@moorepants](https://github.com/moorepants), [@raineszm](https://github.com/raineszm), [@rwbogl](https://github.com/rwbogl), [@smichr](https://github.com/smichr), [@sylee957](https://github.com/sylee957), and [@valglad](https://github.com/valglad))\n\nThis will be added to https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4.\n\nNote: This comment will be updated with the latest check if you edit the pull request. You need to reload the page to see it. <details><summary>Click here to see the pull request description that was parsed.</summary>\n\n    Added function for finding equation of Ellipse using slope as parameter.\r\n    Added another method `Ellipse_Cirumference` for calculation of circumference of ellipse.\r\n    Added a new method called `are_collinear`\r\n    Pluralized the following methods\r\n    `direction_ratio` -> `direction_ratios`\r\n    `direction_cosine` -> `direction_cosines`\r\n\r\n    Fixes #2815\r\n    Fixes #6952\r\n    Fixes #7713\r\n\r\n    This PR uses the approach to finding equation of ellipse using slope, length of semi minor axis and length of semi major axis as inputs given [here](https://math.stackexchange.com/questions/108270/what-is-the-equation-of-an-ellipse-that-is-not-aligned-with-the-axis/646971#646971)\r\n    This could be an added functionality to the equation finding method in class `Ellipse`.\r\n    Thanks to @smichr  for providing the approach.\r\n\r\n    Please take a look at this PR and suggest changes. I will be glad to implement them.\r\n    Thanks.\r\n\r\n    #### Release Notes\r\n\r\n    <!-- BEGIN RELEASE NOTES -->\r\n    * geometry\r\n       * added function `equation_using_slope` for finding equation of Ellipse using slope as parameter\r\n    <!-- END RELEASE NOTES -->\r\n\n\n</details><p>\n\n@smichr  Sir, since you were the one who brought up the idea of adding this functionality, can you take a look?\r\n\r\n@jksuom  Sir can you take a look as well?\n@smichr @jksuom \r\nI have added another method `Ellipse_Cirumference` for calculation of circumference of ellipse. This method is much faster as compared to the other method given already. This implementation is done on the lines given by @smichr  [here](https://github.com/sympy/sympy/issues/6952). So this PR can close issue #6952 also ( issue raised by @smichr ).\r\n\r\n```\r\navi@avi-Aspire-A515-51G:~/sympy$ python3\r\nPython 3.6.5 (default, Apr  1 2018, 05:46:30) \r\n[GCC 7.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from sympy import Ellipse\r\n>>> e1 = Ellipse((0,0), 3, 1)\r\n>>> e1.circumference.n()\r\n13.3648932205553\r\n>>> e1.Ellipse_Circumference()\r\n13.3648932205553\r\n```\r\n\r\n@smichr  @jksuom  Can you please take a look?\n@certik @jksuom  @smichr  Can you review this PR?\r\n\nAlso, please try to write proper git commit messages. The first line has a column limit, then an empty line, then explaining what the commit does. After the PR is finished, let's try to write it as a set of small, logical commits.\nJust search online for some guidelines. Here is one: https://chris.beams.io/posts/git-commit/, with explanations + motivations.\nWe also have some stuff in our dev guide https://github.com/sympy/sympy/wiki/Development-workflow#writing-commit-messages. \n@certik \r\n>Also, please try to write proper git commit messages. The first line has a column limit, then an empty line, then explaining what the commit does. After the PR is finished, let's try to write it as a set of small, logical commits.\r\n\r\nI will keep that in mind Sir, for sure.\n@certik  I have addressed your reviews in this commit (3fb3f47). Please take a look. Also, please let me know if the commit message of this commit (3fb3f47) was fine or do I need to improve more. Thanks\n@debugger22 @akshayah3  @smichr  Can you take a look at this PR? The latest commit (7a75f18) solves issue #7713.\n@certik  Can you take a look now? I have added the fix for another issue namely #7713\n@jksuom  Sir can you take a look?\n@Abdullahjavednesar  I've addressed your review. Please take a look. Also, since I've addressed what you requested, could you remove the `author's turn` label, as it's misleading?\nAlgebraic-geometric mean is also implemented in `mpmath` ([agm](https://github.com/fredrik-johansson/mpmath/blob/master/mpmath/function_docs.py#L4972-L4984)) and used to compute complete elliptic integrals. The use of native `mpf` type makes it more efficient than an implementation with `Float` objects in SymPy.\r\n```\r\nIn [1]: e = Ellipse(Point(0,0), 4, 3)\r\n\r\nIn [2]: %time e.circumference.n()\r\nCPU times: user 82.5 ms, sys: 16.3 ms, total: 98.8 ms\r\nWall time: 86.6 ms\r\nOut[2]: 22.1034921607095\r\n\r\nIn [3]: %time e.ellipse_circumference()\r\nCPU times: user 196 ms, sys: 12.4 ms, total: 208 ms\r\nWall time: 202 ms\r\nOut[3]: 22.1034921607095\r\n```\r\nIs there any reason to include this in SymPy?\n@jksuom  Sorry, but I had initially thought that `.ellipse_circumference()` was faster than `.circumference` method. If it's the other way around, I'll remove that method (from the entire code of this PR).  Should I do that ?\r\nAlso, what do you think about the other methods I added namely `def equation_using_slope(self, slope):` and `def are_collinear(*args):` ?\n@jksuom ping\r\n\n`solve` is an expensive function. I would use the precomputed coefficients (as solved in the SO [comment](https://math.stackexchange.com/questions/108270/what-is-the-equation-of-an-ellipse-hat-is-not-aligned-with-the-axis/646971)) instead of repeatedly calling `solve`.\n@jksuom  I've done that now sir. It turns out there was no need for even a single `solve` statement.\r\n>I had initially thought that .ellipse_circumference() was faster than .circumference method. If it's the other way around, I'll remove that method\r\n\r\nShould I remove it?\r\nPlease take a look.\n@jksuom  ping\r\n\n@certik Can you take a look?\n@Abdullahjavednesar  Can you take a look?\nCan someone restart the #28715.21 and #28715.22 test of ea3f48c commit. I think some http error has occurred and will be resolved by restarting the tests.\n@Abdullahjavednesar @jksuom @smichr  Can you restart this failing test 28715.22 of ea3f48c i.e. the last commit ? (due to restarting 28715.21 passed, but 28715.22 still fails)\ndoes this look good to merge now?\n@certik @smichr does this look good to merge now?\n@smichr  Looks like the commits got messed up somehow. I'll be opening up a new PR for this implementation (sort of a continuation) once [this](https://github.com/sympy/sympy/pull/15273) PR gets merged. Will that be fine?",
  "created_at": "2018-09-24T17:34:42Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_ellipse_equation_using_slope\"]",
  "PASS_TO_PASS": "[\"test_object_from_equation\", \"test_ellipse_geom\", \"test_construction\", \"test_ellipse_random_point\", \"test_repr\", \"test_transform\", \"test_bounds\", \"test_reflect\", \"test_is_tangent\", \"test_parameter_value\", \"test_second_moment_of_area\", \"test_circumference\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.098127",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}