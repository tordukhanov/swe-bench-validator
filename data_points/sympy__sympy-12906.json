{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12906",
  "base_commit": "d250ff08a834bb0ba2b636b0a7d63a4cf33f6e22",
  "patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -405,9 +405,11 @@ def is_convergent(self):\n \n         # Piecewise function handle\n         if sequence_term.is_Piecewise:\n-            for func_cond in sequence_term.args:\n-                if func_cond[1].func is Ge or func_cond[1].func is Gt or func_cond[1] == True:\n-                    return Sum(func_cond[0], (sym, lower_limit, upper_limit)).is_convergent()\n+            for func, cond in sequence_term.args:\n+                # see if it represents something going to oo\n+                if cond == True or cond.as_set().sup is S.Infinity:\n+                    s = Sum(func, (sym, lower_limit, upper_limit))\n+                    return s.is_convergent()\n             return S.true\n \n         ###  -------- Divergence test ----------- ###\ndiff --git a/sympy/core/relational.py b/sympy/core/relational.py\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -98,30 +98,32 @@ def _eval_evalf(self, prec):\n \n     @property\n     def canonical(self):\n-        \"\"\"Return a canonical form of the relational.\n-\n-        The rules for the canonical form, in order of decreasing priority are:\n-            1) Number on right if left is not a Number;\n-            2) Symbol on the left;\n-            3) Gt/Ge changed to Lt/Le;\n-            4) Lt/Le are unchanged;\n-            5) Eq and Ne get ordered args.\n+        \"\"\"Return a canonical form of the relational by putting a\n+        Number on the rhs else ordering the args. No other\n+        simplification is attempted.\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy.abc import x, y\n+        >>> x < 2\n+        x < 2\n+        >>> _.reversed.canonical\n+        x < 2\n+        >>> (-y < x).canonical\n+        x > -y\n+        >>> (-y > x).canonical\n+        x < -y\n         \"\"\"\n+        args = self.args\n         r = self\n-        if r.func in (Ge, Gt):\n-            r = r.reversed\n-        elif r.func in (Lt, Le):\n-            pass\n-        elif r.func in (Eq, Ne):\n-            r = r.func(*ordered(r.args), evaluate=False)\n-        else:\n-            raise NotImplementedError\n-        if r.lhs.is_Number and not r.rhs.is_Number:\n+        if r.rhs.is_Number:\n+            if r.lhs.is_Number and r.lhs > r.rhs:\n+                r = r.reversed\n+        elif r.lhs.is_Number:\n             r = r.reversed\n-        elif r.rhs.is_Symbol and not r.lhs.is_Symbol:\n+        elif tuple(ordered(args)) != args:\n             r = r.reversed\n-        if _coeff_isneg(r.lhs):\n-            r = r.reversed.func(-r.lhs, -r.rhs, evaluate=False)\n         return r\n \n     def equals(self, other, failing_expression=False):\n",
  "test_patch": "diff --git a/sympy/concrete/tests/test_sums_products.py b/sympy/concrete/tests/test_sums_products.py\n--- a/sympy/concrete/tests/test_sums_products.py\n+++ b/sympy/concrete/tests/test_sums_products.py\n@@ -961,7 +961,7 @@ def test_is_convergent():\n     f = Piecewise((n**(-2), n <= 1), (n**2, n > 1))\n     assert Sum(f, (n, 1, oo)).is_convergent() is S.false\n     assert Sum(f, (n, -oo, oo)).is_convergent() is S.false\n-    assert Sum(f, (n, -oo, 1)).is_convergent() is S.true\n+    #assert Sum(f, (n, -oo, 1)).is_convergent() is S.true\n \n     # integral test\n \ndiff --git a/sympy/core/tests/test_relational.py b/sympy/core/tests/test_relational.py\n--- a/sympy/core/tests/test_relational.py\n+++ b/sympy/core/tests/test_relational.py\n@@ -585,7 +585,11 @@ def test_issue_8449():\n \n def test_simplify():\n     assert simplify(x*(y + 1) - x*y - x + 1 < x) == (x > 1)\n-    assert simplify(S(1) < -x) == (x < -1)\n+    r = S(1) < -x\n+    # until relationals have an _eval_simplify method\n+    # if there is no simplification to do on either side\n+    # the only the canonical form is returned\n+    assert simplify(r) == r.canonical\n \n \n def test_equals():\n@@ -617,34 +621,22 @@ def test_reversed():\n \n \n def test_canonical():\n-    one = S(1)\n-\n-    def unchanged(v):\n-        c = v.canonical\n-        return v.is_Relational and c.is_Relational and v == c\n-\n-    def isreversed(v):\n-        return v.canonical == v.reversed\n-\n-    assert unchanged(x < one)\n-    assert unchanged(x <= one)\n-    assert isreversed(Eq(one, x, evaluate=False))\n-    assert unchanged(Eq(x, one, evaluate=False))\n-    assert isreversed(Ne(one, x, evaluate=False))\n-    assert unchanged(Ne(x, one, evaluate=False))\n-    assert unchanged(x >= one)\n-    assert unchanged(x > one)\n-\n-    assert unchanged(x < y)\n-    assert unchanged(x <= y)\n-    assert isreversed(Eq(y, x, evaluate=False))\n-    assert unchanged(Eq(x, y, evaluate=False))\n-    assert isreversed(Ne(y, x, evaluate=False))\n-    assert unchanged(Ne(x, y, evaluate=False))\n-    assert isreversed(x >= y)\n-    assert isreversed(x > y)\n-    assert (-x < 1).canonical == (x > -1)\n-    assert isreversed(-x > y)\n+    c = [i.canonical for i in (\n+        x + y < z,\n+        x + 2 > 3,\n+        x < 2,\n+        S(2) > x,\n+        x**2 > -x/y,\n+        Gt(3, 2, evaluate=False)\n+        )]\n+    assert [i.canonical for i in c] == c\n+    assert [i.reversed.canonical for i in c] == c\n+    assert not any(i.lhs.is_Number and not i.rhs.is_Number for i in c)\n+\n+    c = [i.reversed.func(i.rhs, i.lhs, evaluate=False).canonical for i in c]\n+    assert [i.canonical for i in c] == c\n+    assert [i.reversed.canonical for i in c] == c\n+    assert not any(i.lhs.is_Number and not i.rhs.is_Number for i in c)\n \n \n @XFAIL\n@@ -710,6 +702,7 @@ def test_issue_10633():\n     assert Eq(True, True) == True\n     assert Eq(False, False) == True\n \n+\n def test_issue_10927():\n     x = symbols('x')\n     assert str(Eq(x, oo)) == 'Eq(x, oo)'\ndiff --git a/sympy/solvers/tests/test_solvers.py b/sympy/solvers/tests/test_solvers.py\n--- a/sympy/solvers/tests/test_solvers.py\n+++ b/sympy/solvers/tests/test_solvers.py\n@@ -1303,7 +1303,7 @@ def test_issue_6060():\n     )\n     y = Symbol('y')\n     assert solve(absxm3 - y, x) == [\n-        Piecewise((-y + 3, y > 0), (S.NaN, True)),\n+        Piecewise((-y + 3, -y < 0), (S.NaN, True)),\n         Piecewise((y + 3, 0 <= y), (S.NaN, True))\n     ]\n     y = Symbol('y', positive=True)\n",
  "problem_statement": "Relational.canonical does not yield canonical\n```\r\n>>> r = x**2 > -y/x\r\n>>> r.canonical == r.canonical.canonical\r\nFalse\r\n```\n",
  "hints_text": "",
  "created_at": "2017-07-07T20:22:42Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_canonical\"]",
  "PASS_TO_PASS": "[\"test_karr_convention\", \"test_karr_proposition_2b\", \"test_arithmetic_sums\", \"test_polynomial_sums\", \"test_composite_sums\", \"test_hypergeometric_sums\", \"test_evalf_fast_series\", \"test_evalf_fast_series_issue_4021\", \"test_evalf_slow_series\", \"test_evalf_issue_3273\", \"test_simple_products\", \"test_rational_products\", \"test_sum_reconstruct\", \"test_limit_subs\", \"test_function_subs\", \"test_equality\", \"test_Product_doit\", \"test_Sum_interface\", \"test_eval_diff\", \"test_is_zero\", \"test_is_number\", \"test_free_symbols\", \"test_issue_6273\", \"test_issue_6274\", \"test_simplify\", \"test_change_index\", \"test_reorder\", \"test_reverse_order\", \"test_issue_7097\", \"test_factor_expand_subs\", \"test_issue_4668\", \"test_matrix_sum\", \"test_issue_6966\", \"test_rel_ne\", \"test_rel_subs\", \"test_wrappers\", \"test_Eq\", \"test_rel_Infinity\", \"test_bool\", \"test_rich_cmp\", \"test_new_relational\", \"test_relational_bool_output\", \"test_relational_logic_symbols\", \"test_univariate_relational_as_set\", \"test_Not\", \"test_evaluate\", \"test_imaginary_compare_raises_TypeError\", \"test_complex_compare_not_real\", \"test_imaginary_and_inf_compare_raises_TypeError\", \"test_x_minus_y_not_same_as_x_lt_y\", \"test_nan_equality_exceptions\", \"test_nan_inequality_raise_errors\", \"test_nan_complex_inequalities\", \"test_complex_infinity_inequalities\", \"test_inequalities_symbol_name_same_complex\", \"test_inequalities_cant_sympify_other\", \"test_ineq_avoid_wild_symbol_flip\", \"test_issue_8449\", \"test_reversed\", \"test_issue_10633\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.078628",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}