{
  "repo": "django/django",
  "instance_id": "django__django-12187",
  "base_commit": "4fe3774c729f3fd5105b3001fe69a70bdca95ac3",
  "patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -401,13 +401,16 @@ class ManifestFilesMixin(HashedFilesMixin):\n     manifest_strict = True\n     keep_intermediate_files = False\n \n-    def __init__(self, *args, **kwargs):\n+    def __init__(self, *args, manifest_storage=None, **kwargs):\n         super().__init__(*args, **kwargs)\n+        if manifest_storage is None:\n+            manifest_storage = self\n+        self.manifest_storage = manifest_storage\n         self.hashed_files = self.load_manifest()\n \n     def read_manifest(self):\n         try:\n-            with self.open(self.manifest_name) as manifest:\n+            with self.manifest_storage.open(self.manifest_name) as manifest:\n                 return manifest.read().decode()\n         except FileNotFoundError:\n             return None\n@@ -435,10 +438,10 @@ def post_process(self, *args, **kwargs):\n \n     def save_manifest(self):\n         payload = {'paths': self.hashed_files, 'version': self.manifest_version}\n-        if self.exists(self.manifest_name):\n-            self.delete(self.manifest_name)\n+        if self.manifest_storage.exists(self.manifest_name):\n+            self.manifest_storage.delete(self.manifest_name)\n         contents = json.dumps(payload).encode()\n-        self._save(self.manifest_name, ContentFile(contents))\n+        self.manifest_storage._save(self.manifest_name, ContentFile(contents))\n \n     def stored_name(self, name):\n         parsed_name = urlsplit(unquote(name))\n",
  "test_patch": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -1,3 +1,4 @@\n+import json\n import os\n import shutil\n import sys\n@@ -13,7 +14,7 @@\n     Command as CollectstaticCommand,\n )\n from django.core.management import call_command\n-from django.test import override_settings\n+from django.test import SimpleTestCase, override_settings\n \n from .cases import CollectionTestCase\n from .settings import TEST_ROOT\n@@ -499,6 +500,55 @@ def test_template_tag_simple_content(self):\n             self.assertIn(b\"other.deploy12345.css\", content)\n \n \n+class CustomManifestStorage(storage.ManifestStaticFilesStorage):\n+    def __init__(self, *args, manifest_storage=None, **kwargs):\n+        manifest_storage = storage.StaticFilesStorage(\n+            location=kwargs.pop('manifest_location'),\n+        )\n+        super().__init__(*args, manifest_storage=manifest_storage, **kwargs)\n+\n+\n+class TestCustomManifestStorage(SimpleTestCase):\n+    def setUp(self):\n+        self.manifest_path = Path(tempfile.mkdtemp())\n+        self.addCleanup(shutil.rmtree, self.manifest_path)\n+\n+        self.staticfiles_storage = CustomManifestStorage(\n+            manifest_location=self.manifest_path,\n+        )\n+        self.manifest_file = self.manifest_path / self.staticfiles_storage.manifest_name\n+        # Manifest without paths.\n+        self.manifest = {'version': self.staticfiles_storage.manifest_version}\n+        with self.manifest_file.open('w') as manifest_file:\n+            json.dump(self.manifest, manifest_file)\n+\n+    def test_read_manifest(self):\n+        self.assertEqual(\n+            self.staticfiles_storage.read_manifest(),\n+            json.dumps(self.manifest),\n+        )\n+\n+    def test_read_manifest_nonexistent(self):\n+        os.remove(self.manifest_file)\n+        self.assertIsNone(self.staticfiles_storage.read_manifest())\n+\n+    def test_save_manifest_override(self):\n+        self.assertIs(self.manifest_file.exists(), True)\n+        self.staticfiles_storage.save_manifest()\n+        self.assertIs(self.manifest_file.exists(), True)\n+        new_manifest = json.loads(self.staticfiles_storage.read_manifest())\n+        self.assertIn('paths', new_manifest)\n+        self.assertNotEqual(new_manifest, self.manifest)\n+\n+    def test_save_manifest_create(self):\n+        os.remove(self.manifest_file)\n+        self.staticfiles_storage.save_manifest()\n+        self.assertIs(self.manifest_file.exists(), True)\n+        new_manifest = json.loads(self.staticfiles_storage.read_manifest())\n+        self.assertIn('paths', new_manifest)\n+        self.assertNotEqual(new_manifest, self.manifest)\n+\n+\n class CustomStaticFilesStorage(storage.StaticFilesStorage):\n     \"\"\"\n     Used in TestStaticFilePermissions\n",
  "problem_statement": "Allow configuration of where to save staticfiles manifest.\nDescription\n\t\nA standard Django deploy has all staticfiles accessible to all users. This is understandable, if undesirable. By itself this is not a huge problem since those on the public Internet don't know the filenames of all of the files a deployment has, and fuskering the entire possible namespace isn't feasible and is also detectable.\nHowever, deployments that make use of ManifestStaticFilesStorage will most likely expose a master list of all static files to anyone who wants to look. It's not a huge security risk because you shouldn't be depending on security through obscurity, but there's certainly a leg up given when there's a master list of all files. Due to the way ManifestStaticFilesStorage is setup, the manifest ends up in the directory of publicly served files. If the files are stored locally this can be fixed by blacklisting the file from webserver access and only letting Django itself read the file off the local filesystem. This is the approach I've taken once I discovered the issue - I have a server deployment running Apache serving files on the local filesystem, but have CloudFront in front of that which fetches from Apache if the cache misses. I've since blacklisted the staticfiles manifest and invalidated any cached copies in CloudFront.\nHere's what I consider the risks of having a publicly exposed staticfiles manifest:\nEasily find trade secrets in JavaScript files meant to be used only internally by staff users\nFind hardcoded secrets in internal files - anything in the static tree gets listed here, even pre-processed files like coffee or less if the developers use django-compressor\nFind potential attack vectors by finding normally unlisted files that are exploitable which could be used to form URLs in phishing emails\nPossible novel way to fingerprint Django versions using the easy master list of files, could be used to quickly identify potentially vulnerable Django servers\nAll that said, I don't have a great solution to the problem that Django itself could implement. Currently Django writes the manifest to the staticfiles root so it's always going to be readable unless you take extra steps. The real stickler is deployments that use something like ​S3BotoStorage which in effect needs Django to be able to access the manifest remotely. My understanding of that setup (I don't use it) would be that on load Django is going to read the manifest from S3, so it needs to be accessible over the web by default. Further steps could be taken to make it only accessible to Django itself, but that requires user action.\nPotential solutions:\nEncrypt the manifest on disk, decrypt on load into memory - loses human readability for debugging purposes but hides it from prying eyes by default\nFast-track ticket #26029 to make staticfiles storage configuration allow passing options to storage - use options to change manifest path somewhere non-public or configure a secret header to use with S3 to only give Django access to the file.\nOn a related note, this discovery has made me extra paranoid about the exposure of internal files meant for staff only and now I'm looking at a way to formalize restricted access to the files. With the exposure of the staticfiles manifest it's clear much of the business logic we use (in JavaScript under admin) is by default visible to the Web if you know the URL.\n",
  "hints_text": "Florian says, I think we should just bite the dust and add a setting which the static manifest gets written to (directly, without involving storage). Moving this file out of STATIC_ROOT is the only sensible solution I see. S3BotoStorage should redirect the manifest to a different (secure) bucket if needed. Maybe we can make it easier to detect that this file is \"sensitive\".\nAt #28764 I reached a similar conclusion for very different reasons. I don't see much point in making the location configurable, though. It seems to me that the file should just be stored to some standard location within the codebase. The obvious analogy here would be to makemigrations, which does the same thing. As I argue in the other ticket, this is a configuration file that affects Django's behavior, is tied to a specific commit, and has nothing to do with the actual serving of static files. Storing it in the codebase would solve David's issues above, would solve the correctness and performance issues I mentioned, and would do so for all users without any new settings. Are there advantages to storing the file in an external location that I've overlooked?\nI've created a pr adding STATICFILES_MANIFEST setting allowing storing manifest file with code. ​https://github.com/django/django/pull/12187\nMaybe the staticfiles.json should also be \"pretty printed\" as a part of this change? After this change, many users will likely keep this file with the project code and thus under version control. Having a well defined indentation and key order would keep the diffs small and comprehensible.\nReplying to Jarosław Wygoda: I've created a pr adding STATICFILES_MANIFEST setting allowing storing manifest file with code. ​https://github.com/django/django/pull/12187 Will you set the \"has patch\" flag for this ticket?\nI think we need to look at where we're headed before we simply add a setting here. If we consider the upgrade path, what we don't want to do is add a new setting and then need to deprecate it as soon as we improve the configuration options, with something along the lines of #26029. #26029 is needed because you currently need to provide a storage subclass in order to provide configuration parameters: # In settings.py, where `CustomStorage` adjusts configuration in `__init__()`. STATICFILES_STORAGE = 'my_app.CustomStorage' The complaint in #26029 is that providing the subclass is cumbersome, and we should be able to specify a dictionary like DATABASES and so on. But we should solve that problem over there. The issue here is that ManifestStaticFilesStorage has no way of specifying where to store the manifest. There's a patch file for #27541 (which I'm going to close as a duplicate of this ticket) that suggests adding an optional manifest_storage kwarg to ManifestFilesMixin — here you'd pass a configured storage to override where to store the manifest file: # Something like... class CustomManifestStorage(ManifestStaticFilesStorage): def __init__(self, *args, **kwargs): manifest_storage = FileSystemStorage( location='path/for/manifest' ) super().__init__(*args, manifest_storage=manifest_storage, **kwargs) Using a storage, rather than just giving a path, covers the separate s3 bucket use-case (and similar) but also avoids the cumbersome ​ManifestHandler wrapper from the initial PR here. I think with that, and tests, and documentation of the new parameter, with an example of how to configure it, we'd have a fix here. (That the configuration is a little cumbersome would hopefully spur renewed interest in pushing forward with #26029.)\nI argued in #28764 and comment:2 that the location of staticfiles.json shouldn't be configurable at all, that it should just be stored in the code base along with other configuration files (including automatically generated ones, like migration files). What are the use cases for storing this file anywhere else?\nMaking the location of staticfiles.json configurable allows us to maintain a backward compatibility by setting the default manifest path to STATIC_ROOT. If we don't want to maintain a backward compatibility then I can make manifest location not configurable and get rid of ManifestHandler. Manifest will be created in the BASE_DIR instead and STATICFILES_MANIFEST setting won't be required anymore.\nIf we take a step back, the problem here isn't that there's no way to configure the manifest location, it's that the standard location for it is bad. That's the reason people want to change it. So rather than making it possible for people to avoid the problem by introducing a new customization mechanism, we should just fix the standard value so that no one has the problem in the first place. If we accept that the default manifest location needs to change at some point then there will inevitably be a backwards incompatibility. One way to address that would be to just document in the release notes that people using ManifestStaticFilesStorage need to run collectstatic after upgrading. If they don't do that they will immediately see a helpful error message at startup since the manifest won't be found, and they can fix the problem then. Still, perhaps that's overly burdensome, I'm not sure. Another approach would be to have a deprecation cycle where STATIC_ROOT continues to be checked if the manifest isn't found at the designated location in the code base, showing a deprecation warning in that case.\nKevin, I think you're neglecting how collectstatic is used, and has been historically used. Changing the default to storing the manifest in the codebase would be a breaking change for some users. The ManifestFilesMixin hashes files based on content, and the content is going to depend on people's configurations, and the content will likely differ depending on the settings used between development and production. Minifying JS for production is a common use-case, but not for development. If the manifest by default lives in the codebase, it would both need to be re-generated after any changes (change in development process), and would end up with the output for the development environment. Django would probably need to give a large caveat to ignore the file for source control otherwise users will shoot themselves in the foot quite often. The issue I originally brought up with S3BotoStorage is that ManifestFilesMixin is a mixin, so adding that to a storage class like S3BotoStorage means it will read and write the manifest from that storage - in that case from S3. Changing the behavior so that the manifest doesn't use that storage class could be unintuitive for users. It will have particular ramifications to how and when they call collectstatic for their deployments - when using a class like S3BotoStorage that sends the files to remote storage, they may not be currently invoking collectstatic at a point where it can write out the manifest into the codebase and have that change be persistent and make it into the deployment of the code to production as well. For example, if a Docker image is used to deploy to multiple instances, currently someone with that setup would probably run collectstatic once from a single instance during a deploy - and at that point the manifest would have to be re-baked into the image or it wouldn't exist on other instances, etc. For example, AWS Elastic Beanstalk guides show configuring such that migrate is run at deploy time in the containers, and they use leader_only so only one container runs it. Someone using S3 for storing the staticfiles might logically have a setup on Elastic Beanstalk where they'd use leader_only with collectstatic so that N containers don't try to send the files off to S3. So there'd be a lot of assumptions about how people are currently using it. I haven't looked at this issue in 4 years, so that's going from memory. But I don't believe there's a simple \"change the default location\" solution given how many ways collectstatic might be used - you're probably going to break it for somebody. If there were a clear win here I think I probably would have just made a PR instead of this issue. :-) I spent a decent amount of time thinking through the problem before punting it to this issue. I fear if you make it a hard-coded change to the default, even with a deprecation cycle you'll end up with people coming out of the woodwork on why they *have* to have it working the way it originally did, and if there's no configuration ability then you've got a problem there.\nThe breaking change is important. We can't just bring that in. Adding a setting might be OK — folks could set it to STATIC_ROOT to get the old value — BUT #26029 is about restructuring all this anyway: to add a setting only to need to deprecate it is too much churn. (Even assuming we'd take the hit on breaking people's deployments as they failed to make the changes in time.) Adding the manifest_storage kwarg (taking a storage) is small and simple. That's why I think we should advance with it. Later, when #26029 comes along, we can review the exact API we want there — we can either configure manifest_storage directly in the settings, or allow a path there that will used internally — but that's a separate conversation (one we can defer).",
  "created_at": "2019-12-05T23:03:59Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_read_manifest (staticfiles_tests.test_storage.TestCustomManifestStorage)\", \"test_read_manifest_nonexistent (staticfiles_tests.test_storage.TestCustomManifestStorage)\", \"test_save_manifest_create (staticfiles_tests.test_storage.TestCustomManifestStorage)\", \"test_save_manifest_override (staticfiles_tests.test_storage.TestCustomManifestStorage)\"]",
  "PASS_TO_PASS": "[\"test_collectstatistic_no_post_process_replaced_paths (staticfiles_tests.test_storage.TestCollectionNoPostProcessReplacedPaths)\", \"test_hashed_name (staticfiles_tests.test_storage.TestCollectionNoneHashStorage)\", \"With storage classes having several file extension patterns, only the\", \"test_collect_static_files_default_permissions (staticfiles_tests.test_storage.TestStaticFilePermissions)\", \"test_collect_static_files_permissions (staticfiles_tests.test_storage.TestStaticFilePermissions)\", \"test_collect_static_files_subclass_of_static_storage (staticfiles_tests.test_storage.TestStaticFilePermissions)\", \"test_template_tag_return (staticfiles_tests.test_storage.TestCollectionSimpleStorage)\", \"test_template_tag_simple_content (staticfiles_tests.test_storage.TestCollectionSimpleStorage)\", \"test_file_change_after_collectstatic (staticfiles_tests.test_storage.TestCollectionHashedFilesCache)\", \"test_aggregating_modules (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_clear_empties_manifest (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_css_import_case_insensitive (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_import_loop (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"See #18050\", \"test_intermediate_files (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_js_source_map (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_js_source_map_sensitive (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_loaded_cache (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_manifest_does_not_exist (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_manifest_does_not_ignore_permission_error (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_manifest_exists (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_missing_entry (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_module_import (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_parse_cache (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_ignored_completely (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_with_fragment (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_with_querystring (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_with_querystring_and_fragment (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"post_processing behaves correctly.\", \"post_processing indicates the origin of the error when it fails.\", \"test_template_tag_absolute (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"Like test_template_tag_absolute, but for a file in STATIC_ROOT (#26249).\", \"test_template_tag_deep_relative (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_relative (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_return (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_simple_content (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_url (staticfiles_tests.test_storage.TestCollectionManifestStorage)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.617558",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}