{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13842",
  "base_commit": "3b448815e21b117d34fe63007b8ef63ee084fefb",
  "patch": "diff --git a/astropy/table/table.py b/astropy/table/table.py\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -1264,8 +1264,10 @@ def _convert_data_to_col(self, data, copy=True, default_name=None, dtype=None, n\n \n         elif data_is_mixin:\n             # Copy the mixin column attributes if they exist since the copy below\n-            # may not get this attribute.\n-            col = col_copy(data, copy_indices=self._init_indices) if copy else data\n+            # may not get this attribute. If not copying, take a slice\n+            # to ensure we get a new instance and we do not share metadata\n+            # like info.\n+            col = col_copy(data, copy_indices=self._init_indices) if copy else data[:]\n             col.info.name = name\n             return col\n \ndiff --git a/astropy/table/table_helpers.py b/astropy/table/table_helpers.py\n--- a/astropy/table/table_helpers.py\n+++ b/astropy/table/table_helpers.py\n@@ -168,8 +168,8 @@ class ArrayWrapper:\n     \"\"\"\n     info = ArrayWrapperInfo()\n \n-    def __init__(self, data):\n-        self.data = np.array(data)\n+    def __init__(self, data, copy=True):\n+        self.data = np.array(data, copy=copy)\n         if 'info' in getattr(data, '__dict__', ()):\n             self.info = data.info\n \n@@ -177,7 +177,7 @@ def __getitem__(self, item):\n         if isinstance(item, (int, np.integer)):\n             out = self.data[item]\n         else:\n-            out = self.__class__(self.data[item])\n+            out = self.__class__(self.data[item], copy=False)\n             if 'info' in self.__dict__:\n                 out.info = self.info\n         return out\n",
  "test_patch": "diff --git a/astropy/table/tests/test_mixin.py b/astropy/table/tests/test_mixin.py\n--- a/astropy/table/tests/test_mixin.py\n+++ b/astropy/table/tests/test_mixin.py\n@@ -438,38 +438,76 @@ def init_from_class(c):\n                 assert getattr(m2.info, attr) == original\n \n \n-def test_add_column(mixin_cols):\n+def check_share_memory(col1, col2, copy):\n+    \"\"\"Check whether data attributes in col1 and col2 share memory.\n+\n+    If copy=True, this should not be the case for any, while\n+    if copy=False, all should share memory.\n+    \"\"\"\n+    if isinstance(col1, SkyCoord):\n+        # For SkyCoord, .info does not access actual data by default,\n+        # but rather attributes like .ra, which are copies.\n+        map1 = col1.data.info._represent_as_dict()\n+        map2 = col2.data.info._represent_as_dict()\n+    else:\n+        map1 = col1.info._represent_as_dict()\n+        map2 = col2.info._represent_as_dict()\n+\n+    # Check array attributes only (in principle, could iterate on, e.g.,\n+    # differentials in representations, but this is enough for table).\n+    shared = [np.may_share_memory(v1, v2)\n+              for (v1, v2) in zip(map1.values(), map2.values())\n+              if isinstance(v1, np.ndarray) and v1.shape]\n+    if copy:\n+        assert not any(shared)\n+    else:\n+        assert all(shared)\n+\n+\n+@pytest.mark.parametrize('copy', [True, False])\n+def test_add_column(mixin_cols, copy):\n     \"\"\"\n-    Test that adding a column preserves values and attributes\n+    Test that adding a column preserves values and attributes.\n+    For copy=True, the data should be independent;\n+    for copy=False, the data should be shared, but the instance independent.\n     \"\"\"\n     attrs = ('name', 'unit', 'dtype', 'format', 'description', 'meta')\n     m = mixin_cols['m']\n     assert m.info.name is None\n \n-    # Make sure adding column in various ways doesn't touch\n-    t = QTable([m], names=['a'])\n+    # Make sure adding column in various ways doesn't touch info.\n+    t = QTable([m], names=['a'], copy=copy)\n     assert m.info.name is None\n+    check_share_memory(m, t['a'], copy=copy)\n \n     t['new'] = m\n     assert m.info.name is None\n+    check_share_memory(m, t['new'], copy=True)\n \n     m.info.name = 'm'\n     m.info.format = '{0}'\n     m.info.description = 'd'\n     m.info.meta = {'a': 1}\n-    t = QTable([m])\n+    t = QTable([m], copy=copy)\n+    assert t.colnames == ['m']\n+    check_share_memory(m, t['m'], copy=copy)\n+\n+    t = QTable([m], names=['m1'], copy=copy)\n+    assert m.info.name == 'm'\n+    assert t.colnames == ['m1']\n+    check_share_memory(m, t['m1'], copy=copy)\n \n     # Add columns m2, m3, m4 by two different methods and test expected equality\n     t['m2'] = m\n+    check_share_memory(m, t['m2'], copy=True)\n     m.info.name = 'm3'\n-    t.add_columns([m], copy=True)\n-    m.info.name = 'm4'\n-    t.add_columns([m], copy=False)\n-    for name in ('m2', 'm3', 'm4'):\n+    t.add_columns([m], copy=copy)\n+    check_share_memory(m, t['m3'], copy=copy)\n+    for name in ('m2', 'm3'):\n         assert_table_name_col_equal(t, name, m)\n         for attr in attrs:\n             if attr != 'name':\n-                assert getattr(t['m'].info, attr) == getattr(t[name].info, attr)\n+                assert getattr(t['m1'].info, attr) == getattr(t[name].info, attr)\n     # Also check that one can set using a scalar.\n     s = m[0]\n     if type(s) is type(m) and 'info' in s.__dict__:\n@@ -477,18 +515,20 @@ def test_add_column(mixin_cols):\n         # are a different class than the real array, or where info is not copied.\n         t['s'] = m[0]\n         assert_table_name_col_equal(t, 's', m[0])\n+        check_share_memory(m, t['s'], copy=True)\n         for attr in attrs:\n             if attr != 'name':\n-                assert getattr(t['m'].info, attr) == getattr(t['s'].info, attr)\n+                assert getattr(t['m1'].info, attr) == getattr(t['s'].info, attr)\n \n     # While we're add it, also check a length-1 table.\n-    t = QTable([m[1:2]], names=['m'])\n+    t = QTable([m[1:2]], names=['m'], copy=copy)\n+    check_share_memory(m, t['m'], copy=copy)\n     if type(s) is type(m) and 'info' in s.__dict__:\n         t['s'] = m[0]\n         assert_table_name_col_equal(t, 's', m[0])\n         for attr in attrs:\n             if attr != 'name':\n-                assert getattr(t['m'].info, attr) == getattr(t['s'].info, attr)\n+                assert getattr(t['m1'].info, attr) == getattr(t['s'].info, attr)\n \n \n def test_vstack():\n@@ -852,8 +892,9 @@ def test_skycoord_with_velocity():\n     assert skycoord_equal(t2['col0'], sc)\n \n \n+@pytest.mark.parametrize('copy', [True, False])\n @pytest.mark.parametrize('table_cls', [Table, QTable])\n-def test_ensure_input_info_is_unchanged(table_cls):\n+def test_ensure_input_info_is_unchanged(table_cls, copy):\n     \"\"\"If a mixin input to a table has no info, it should stay that way.\n \n     This since having 'info' slows down slicing, etc.\n@@ -861,11 +902,11 @@ def test_ensure_input_info_is_unchanged(table_cls):\n     \"\"\"\n     q = [1, 2] * u.m\n     assert 'info' not in q.__dict__\n-    t = table_cls([q], names=['q'])\n+    t = table_cls([q], names=['q'], copy=copy)\n     assert 'info' not in q.__dict__\n-    t = table_cls([q])\n+    t = table_cls([q], copy=copy)\n     assert 'info' not in q.__dict__\n-    t = table_cls({'q': q})\n+    t = table_cls({'q': q}, copy=copy)\n     assert 'info' not in q.__dict__\n     t['q2'] = q\n     assert 'info' not in q.__dict__\n",
  "problem_statement": "Creating a mixin column in a new table from columns of another table renames columns in original table.\n### Description\r\n\r\nConsider the following code, where a subset of columns from another table should be included in a new table with new names, prerably without copying the actual payload data:\r\n\r\n```python\r\nfrom astropy.table import QTable, Table\r\nimport astropy.units as u\r\n\r\n\r\ntable1 = QTable({\r\n    'foo': [1, 2, 3] * u.deg,\r\n    'bar': [4, 5, 6] * u.m,\r\n    'baz': [7, 8, 9] * u.TeV,\r\n})\r\n\r\nprint(table1.colnames)\r\ntable2 = QTable({\r\n    \"new\": table1[\"foo\"],\r\n    \"name\": table1[\"bar\"]\r\n}, copy=False)\r\nprint(table1.colnames)\r\n```\r\n\r\nIf any of the two classes or both are a `Table`, not a `QTable`, the code works as expected.\r\n\r\n### Expected behavior\r\n\r\nData in the columns is not copied, but column names in original table stay the same.\r\n\r\n```\r\n['foo', 'bar', 'baz']\r\n['foo', 'bar', 'baz']\r\n```\r\n\r\n### Actual behavior\r\n\r\nColumn names do change in both tables:\r\n\r\n```\r\n['foo', 'bar', 'baz']\r\n['new', 'name', 'baz']\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\nSee above.\r\n\r\n### System Details\r\n<!-- Even if you do not think this is necessary, it is useful information for the maintainers.\r\nPlease run the following snippet and paste the output below:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"Numpy\", numpy.__version__)\r\nimport erfa; print(\"pyerfa\", erfa.__version__)\r\nimport astropy; print(\"astropy\", astropy.__version__)\r\nimport scipy; print(\"Scipy\", scipy.__version__)\r\nimport matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\n-->\r\n\r\n```\r\nLinux-5.15.71-1-MANJARO-x86_64-with-glibc2.36\r\nPython 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:35:26) [GCC 10.4.0]\r\nNumpy 1.23.3\r\npyerfa 2.0.0.1\r\nastropy 5.1\r\nScipy 1.9.1\r\nMatplotlib 3.6.1\r\n```\r\n\r\n(also tested with current `main` branch)\n",
  "hints_text": "Ouch! Reproduce this. Also\r\n```\r\ntable2['new'] is table1['new']\r\n# True\r\n```\r\nso the problem seems to be that the tables hold the same `Quantity` instead of different instances that share the data.\nNote that it is not specific to `QTable`, but just to any mixin column (and the behaviour not limited to `dict` either):\r\n```\r\nimport numpy as np\r\nfrom astropy.table import Table\r\nfrom astropy.time import Time\r\ntable1 = Table({'t': Time(np.arange(50000., 50004.), format='mjd')})\r\ntable2 = Table({'new': table1['t']}, copy=False)\r\nprint(f\"{table1.colnames=}, {table2.colnames=}\")\r\n# table1.colnames=['new'], table2.colnames=['new']\r\ntable3 = Table([table1['new']], names=['old'], copy=False)\r\nprint(f\"{table1.colnames=}, {table2.colnames=}, {table3.colnames=}\")\r\n# table1.colnames=['new'], table2.colnames=['old'], table3.colnames=['old']\r\n```\r\n\r\nEDIT: actually the above is puzzling; why is `table1.colnames` still `['new']`? Checking, I see that `table1['new'] is table2['old']` holds and `table1['new'].info.name` gives 'old'...\r\n\r\nNot completely sure how easy it is to change this behaviour -- can we could on any mixing column to allow `new_instance = cls(old_instance, copy=False)`. The relevant code is https://github.com/astropy/astropy/blob/96dde46c854cd34cf3fd4b485d1250e32a78648e/astropy/table/table.py#L1265-L1270\nIt may get a bit worse. After my above example:\r\n```\r\ntable1['new'].info.parent_table is table1\r\n# False\r\ntable1['new'].info.parent_table is table3\r\n# True\r\n```\r\nSimilarly, after the example on top,\r\n```\r\ntable1['new'].info.parent_table is table2\r\n# True\r\n```\r\nSo, the mixin columns belong to the last table they were made part of.\r\n\r\nTime to ping @taldcroft...\n@taldcroft - I think the solution would be to have something like `Time`'s `replicate()` on all info. The implementation that would work for all astropy classes (I think) is\r\n```\r\nmap = mixin.info._represent_as_dict()\r\nmap['copy'] = False\r\nnew_instance = mixin.info._construct_from_dict(map)\r\n```\r\n\r\nSomething like this could become part of `col_copy` if it had a `copy` argument.\n@mhvk - not good... unfortunately I'm trying to be mostly on vacation at the moment, but if you have ideas please have a go at trying an implementation.",
  "created_at": "2022-10-17T20:14:28Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/table/tests/test_mixin.py::test_add_column[arrayswap-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[arraywrap-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[cartesianrep-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[earthlocation-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[latitude-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[longitude-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[ndarraybig-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[ndarraylil-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[quantity-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[skycoord-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[sphericaldiff-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[sphericalrep-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[sphericalrepdiff-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[time-False]\", \"astropy/table/tests/test_mixin.py::test_add_column[timedelta-False]\", \"astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[QTable-False]\"]",
  "PASS_TO_PASS": "[\"astropy/table/tests/test_mixin.py::test_attributes[arrayswap]\", \"astropy/table/tests/test_mixin.py::test_attributes[arraywrap]\", \"astropy/table/tests/test_mixin.py::test_attributes[cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_attributes[earthlocation]\", \"astropy/table/tests/test_mixin.py::test_attributes[latitude]\", \"astropy/table/tests/test_mixin.py::test_attributes[longitude]\", \"astropy/table/tests/test_mixin.py::test_attributes[ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_attributes[ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_attributes[quantity]\", \"astropy/table/tests/test_mixin.py::test_attributes[skycoord]\", \"astropy/table/tests/test_mixin.py::test_attributes[sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_attributes[sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_attributes[sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_attributes[time]\", \"astropy/table/tests/test_mixin.py::test_attributes[timedelta]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-arrayswap]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-arraywrap]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-earthlocation]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-latitude]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-longitude]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-quantity]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-skycoord]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-time]\", \"astropy/table/tests/test_mixin.py::test_make_table[unmasked-timedelta]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-arrayswap]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-arraywrap]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-earthlocation]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-latitude]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-longitude]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-quantity]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-skycoord]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-time]\", \"astropy/table/tests/test_mixin.py::test_make_table[masked-timedelta]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-arrayswap]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-arraywrap]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-earthlocation]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-latitude]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-longitude]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-quantity]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-skycoord]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-time]\", \"astropy/table/tests/test_mixin.py::test_make_table[subclass-timedelta]\", \"astropy/table/tests/test_mixin.py::test_io_ascii_write\", \"astropy/table/tests/test_mixin.py::test_votable_quantity_write\", \"astropy/table/tests/test_mixin.py::test_io_time_write_fits_local[Table]\", \"astropy/table/tests/test_mixin.py::test_io_time_write_fits_local[QTable]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[arrayswap]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[arraywrap]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[skycoord]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[time]\", \"astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[timedelta]\", \"astropy/table/tests/test_mixin.py::test_join[unmasked]\", \"astropy/table/tests/test_mixin.py::test_join[masked]\", \"astropy/table/tests/test_mixin.py::test_join[subclass]\", \"astropy/table/tests/test_mixin.py::test_hstack[unmasked]\", \"astropy/table/tests/test_mixin.py::test_hstack[masked]\", \"astropy/table/tests/test_mixin.py::test_hstack[subclass]\", \"astropy/table/tests/test_mixin.py::test_get_items[arrayswap]\", \"astropy/table/tests/test_mixin.py::test_get_items[arraywrap]\", \"astropy/table/tests/test_mixin.py::test_get_items[cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_get_items[earthlocation]\", \"astropy/table/tests/test_mixin.py::test_get_items[latitude]\", \"astropy/table/tests/test_mixin.py::test_get_items[longitude]\", \"astropy/table/tests/test_mixin.py::test_get_items[ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_get_items[ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_get_items[quantity]\", \"astropy/table/tests/test_mixin.py::test_get_items[skycoord]\", \"astropy/table/tests/test_mixin.py::test_get_items[sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_get_items[sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_get_items[sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_get_items[time]\", \"astropy/table/tests/test_mixin.py::test_get_items[timedelta]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[arrayswap]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[arraywrap]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[earthlocation]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[latitude]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[longitude]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[quantity]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[skycoord]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[time]\", \"astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[timedelta]\", \"astropy/table/tests/test_mixin.py::test_add_column[arrayswap-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[arraywrap-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[cartesianrep-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[earthlocation-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[latitude-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[longitude-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[ndarraybig-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[ndarraylil-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[quantity-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[skycoord-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[sphericaldiff-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[sphericalrep-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[sphericalrepdiff-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[time-True]\", \"astropy/table/tests/test_mixin.py::test_add_column[timedelta-True]\", \"astropy/table/tests/test_mixin.py::test_vstack\", \"astropy/table/tests/test_mixin.py::test_insert_row[arrayswap]\", \"astropy/table/tests/test_mixin.py::test_insert_row[arraywrap]\", \"astropy/table/tests/test_mixin.py::test_insert_row[cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_insert_row[earthlocation]\", \"astropy/table/tests/test_mixin.py::test_insert_row[latitude]\", \"astropy/table/tests/test_mixin.py::test_insert_row[longitude]\", \"astropy/table/tests/test_mixin.py::test_insert_row[ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_insert_row[ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_insert_row[quantity]\", \"astropy/table/tests/test_mixin.py::test_insert_row[skycoord]\", \"astropy/table/tests/test_mixin.py::test_insert_row[sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_insert_row[sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_insert_row[sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_insert_row[time]\", \"astropy/table/tests/test_mixin.py::test_insert_row[timedelta]\", \"astropy/table/tests/test_mixin.py::test_insert_row_bad_unit\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[arrayswap]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[arraywrap]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[earthlocation]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[latitude]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[longitude]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[quantity]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[skycoord]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[time]\", \"astropy/table/tests/test_mixin.py::test_convert_np_array[timedelta]\", \"astropy/table/tests/test_mixin.py::test_assignment_and_copy\", \"astropy/table/tests/test_mixin.py::test_conversion_qtable_table\", \"astropy/table/tests/test_mixin.py::test_setitem_as_column_name\", \"astropy/table/tests/test_mixin.py::test_quantity_representation\", \"astropy/table/tests/test_mixin.py::test_representation_representation\", \"astropy/table/tests/test_mixin.py::test_skycoord_representation\", \"astropy/table/tests/test_mixin.py::test_ndarray_mixin[True]\", \"astropy/table/tests/test_mixin.py::test_ndarray_mixin[False]\", \"astropy/table/tests/test_mixin.py::test_possible_string_format_functions\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[arrayswap]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[arraywrap]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[cartesianrep]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[earthlocation]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[latitude]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[longitude]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[ndarraybig]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[ndarraylil]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[quantity]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[skycoord]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[sphericaldiff]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[sphericalrep]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[sphericalrepdiff]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[time]\", \"astropy/table/tests/test_mixin.py::test_rename_mixin_columns[timedelta]\", \"astropy/table/tests/test_mixin.py::test_represent_mixins_as_columns_unit_fix\", \"astropy/table/tests/test_mixin.py::test_primary_data_column_gets_description\", \"astropy/table/tests/test_mixin.py::test_skycoord_with_velocity\", \"astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[Table-True]\", \"astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[Table-False]\", \"astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[QTable-True]\", \"astropy/table/tests/test_mixin.py::test_bad_info_class\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.534878",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}