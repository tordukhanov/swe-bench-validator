{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1339",
  "base_commit": "ab36f3cc6f91f1e4903a3f4b31501cb7fefe4555",
  "patch": "diff --git a/requests/structures.py b/requests/structures.py\n--- a/requests/structures.py\n+++ b/requests/structures.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n import os\n+import collections\n from itertools import islice\n \n \n@@ -33,43 +34,79 @@ def read(self, n):\n         return \"\".join(islice(self.i, None, n))\n \n \n-class CaseInsensitiveDict(dict):\n-    \"\"\"Case-insensitive Dictionary\n+class CaseInsensitiveDict(collections.MutableMapping):\n+    \"\"\"\n+    A case-insensitive ``dict``-like object.\n+\n+    Implements all methods and operations of\n+    ``collections.MutableMapping`` as well as dict's ``copy``. Also\n+    provides ``lower_items``.\n+\n+    All keys are expected to be strings. The structure remembers the\n+    case of the last key to be set, and ``iter(instance)``,\n+    ``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``\n+    will contain case-sensitive keys. However, querying and contains\n+    testing is case insensitive:\n+\n+        cid = CaseInsensitiveDict()\n+        cid['Accept'] = 'application/json'\n+        cid['aCCEPT'] == 'application/json'  # True\n+        list(cid) == ['Accept']  # True\n \n     For example, ``headers['content-encoding']`` will return the\n-    value of a ``'Content-Encoding'`` response header.\"\"\"\n+    value of a ``'Content-Encoding'`` response header, regardless\n+    of how the header name was originally stored.\n \n-    @property\n-    def lower_keys(self):\n-        if not hasattr(self, '_lower_keys') or not self._lower_keys:\n-            self._lower_keys = dict((k.lower(), k) for k in list(self.keys()))\n-        return self._lower_keys\n+    If the constructor, ``.update``, or equality comparison\n+    operations are given keys that have equal ``.lower()``s, the\n+    behavior is undefined.\n \n-    def _clear_lower_keys(self):\n-        if hasattr(self, '_lower_keys'):\n-            self._lower_keys.clear()\n+    \"\"\"\n+    def __init__(self, data=None, **kwargs):\n+        self._store = dict()\n+        if data is None:\n+            data = {}\n+        self.update(data, **kwargs)\n \n     def __setitem__(self, key, value):\n-        dict.__setitem__(self, key, value)\n-        self._clear_lower_keys()\n+        # Use the lowercased key for lookups, but store the actual\n+        # key alongside the value.\n+        self._store[key.lower()] = (key, value)\n \n-    def __delitem__(self, key):\n-        dict.__delitem__(self, self.lower_keys.get(key.lower(), key))\n-        self._lower_keys.clear()\n+    def __getitem__(self, key):\n+        return self._store[key.lower()][1]\n \n-    def __contains__(self, key):\n-        return key.lower() in self.lower_keys\n+    def __delitem__(self, key):\n+        del self._store[key.lower()]\n \n-    def __getitem__(self, key):\n-        # We allow fall-through here, so values default to None\n-        if key in self:\n-            return dict.__getitem__(self, self.lower_keys[key.lower()])\n+    def __iter__(self):\n+        return (casedkey for casedkey, mappedvalue in self._store.values())\n \n-    def get(self, key, default=None):\n-        if key in self:\n-            return self[key]\n+    def __len__(self):\n+        return len(self._store)\n+\n+    def lower_items(self):\n+        \"\"\"Like iteritems(), but with all lowercase keys.\"\"\"\n+        return (\n+            (lowerkey, keyval[1])\n+            for (lowerkey, keyval)\n+            in self._store.items()\n+        )\n+\n+    def __eq__(self, other):\n+        if isinstance(other, collections.Mapping):\n+            other = CaseInsensitiveDict(other)\n         else:\n-            return default\n+            return NotImplemented\n+        # Compare insensitively\n+        return dict(self.lower_items()) == dict(other.lower_items())\n+\n+    # Copy is required\n+    def copy(self):\n+         return CaseInsensitiveDict(self._store.values())\n+\n+    def __repr__(self):\n+        return '%s(%r)' % (self.__class__.__name__, dict(self.items()))\n \n \n class LookupDict(dict):\ndiff --git a/requests/utils.py b/requests/utils.py\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -23,6 +23,7 @@\n from .compat import parse_http_list as _parse_list_header\n from .compat import quote, urlparse, bytes, str, OrderedDict, urlunparse\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n+from .structures import CaseInsensitiveDict\n \n _hush_pyflakes = (RequestsCookieJar,)\n \n@@ -449,11 +450,11 @@ def default_user_agent():\n \n \n def default_headers():\n-    return {\n+    return CaseInsensitiveDict({\n         'User-Agent': default_user_agent(),\n         'Accept-Encoding': ', '.join(('gzip', 'deflate', 'compress')),\n         'Accept': '*/*'\n-    }\n+    })\n \n \n def parse_header_links(value):\n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -13,6 +13,7 @@\n from requests.auth import HTTPDigestAuth\n from requests.compat import str, cookielib\n from requests.cookies import cookiejar_from_dict\n+from requests.structures import CaseInsensitiveDict\n \n try:\n     import StringIO\n@@ -458,6 +459,165 @@ def test_session_pickling(self):\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code, 200)\n \n+    def test_fixes_1329(self):\n+        s = requests.Session()\n+        s.headers.update({'accept': 'application/json'})\n+        r = s.get(httpbin('get'))\n+        headers = r.request.headers\n+        # ASCII encode because of key comparison changes in py3\n+        self.assertEqual(\n+            headers['accept'.encode('ascii')],\n+            'application/json'\n+        )\n+        self.assertEqual(\n+            headers['Accept'.encode('ascii')],\n+            'application/json'\n+        )\n+\n+\n+class TestCaseInsensitiveDict(unittest.TestCase):\n+\n+    def test_mapping_init(self):\n+        cid = CaseInsensitiveDict({'Foo': 'foo','BAr': 'bar'})\n+        self.assertEqual(len(cid), 2)\n+        self.assertTrue('foo' in cid)\n+        self.assertTrue('bar' in cid)\n+\n+    def test_iterable_init(self):\n+        cid = CaseInsensitiveDict([('Foo', 'foo'), ('BAr', 'bar')])\n+        self.assertEqual(len(cid), 2)\n+        self.assertTrue('foo' in cid)\n+        self.assertTrue('bar' in cid)\n+\n+    def test_kwargs_init(self):\n+        cid = CaseInsensitiveDict(FOO='foo', BAr='bar')\n+        self.assertEqual(len(cid), 2)\n+        self.assertTrue('foo' in cid)\n+        self.assertTrue('bar' in cid)\n+\n+    def test_docstring_example(self):\n+        cid = CaseInsensitiveDict()\n+        cid['Accept'] = 'application/json'\n+        self.assertEqual(cid['aCCEPT'], 'application/json')\n+        self.assertEqual(list(cid), ['Accept'])\n+\n+    def test_len(self):\n+        cid = CaseInsensitiveDict({'a': 'a', 'b': 'b'})\n+        cid['A'] = 'a'\n+        self.assertEqual(len(cid), 2)\n+\n+    def test_getitem(self):\n+        cid = CaseInsensitiveDict({'Spam': 'blueval'})\n+        self.assertEqual(cid['spam'], 'blueval')\n+        self.assertEqual(cid['SPAM'], 'blueval')\n+\n+    def test_fixes_649(self):\n+        cid = CaseInsensitiveDict()\n+        cid['spam'] = 'oneval'\n+        cid['Spam'] = 'twoval'\n+        cid['sPAM'] = 'redval'\n+        cid['SPAM'] = 'blueval'\n+        self.assertEqual(cid['spam'], 'blueval')\n+        self.assertEqual(cid['SPAM'], 'blueval')\n+        self.assertEqual(list(cid.keys()), ['SPAM'])\n+\n+    def test_delitem(self):\n+        cid = CaseInsensitiveDict()\n+        cid['Spam'] = 'someval'\n+        del cid['sPam']\n+        self.assertFalse('spam' in cid)\n+        self.assertEqual(len(cid), 0)\n+\n+    def test_contains(self):\n+        cid = CaseInsensitiveDict()\n+        cid['Spam'] = 'someval'\n+        self.assertTrue('Spam' in cid)\n+        self.assertTrue('spam' in cid)\n+        self.assertTrue('SPAM' in cid)\n+        self.assertTrue('sPam' in cid)\n+        self.assertFalse('notspam' in cid)\n+\n+    def test_get(self):\n+        cid = CaseInsensitiveDict()\n+        cid['spam'] = 'oneval'\n+        cid['SPAM'] = 'blueval'\n+        self.assertEqual(cid.get('spam'), 'blueval')\n+        self.assertEqual(cid.get('SPAM'), 'blueval')\n+        self.assertEqual(cid.get('sPam'), 'blueval')\n+        self.assertEqual(cid.get('notspam', 'default'), 'default')\n+\n+    def test_update(self):\n+        cid = CaseInsensitiveDict()\n+        cid['spam'] = 'blueval'\n+        cid.update({'sPam': 'notblueval'})\n+        self.assertEqual(cid['spam'], 'notblueval')\n+        cid = CaseInsensitiveDict({'Foo': 'foo','BAr': 'bar'})\n+        cid.update({'fOO': 'anotherfoo', 'bAR': 'anotherbar'})\n+        self.assertEqual(len(cid), 2)\n+        self.assertEqual(cid['foo'], 'anotherfoo')\n+        self.assertEqual(cid['bar'], 'anotherbar')\n+\n+    def test_update_retains_unchanged(self):\n+        cid = CaseInsensitiveDict({'foo': 'foo', 'bar': 'bar'})\n+        cid.update({'foo': 'newfoo'})\n+        self.assertEquals(cid['bar'], 'bar')\n+\n+    def test_iter(self):\n+        cid = CaseInsensitiveDict({'Spam': 'spam', 'Eggs': 'eggs'})\n+        keys = frozenset(['Spam', 'Eggs'])\n+        self.assertEqual(frozenset(iter(cid)), keys)\n+\n+    def test_equality(self):\n+        cid = CaseInsensitiveDict({'SPAM': 'blueval', 'Eggs': 'redval'})\n+        othercid = CaseInsensitiveDict({'spam': 'blueval', 'eggs': 'redval'})\n+        self.assertEqual(cid, othercid)\n+        del othercid['spam']\n+        self.assertNotEqual(cid, othercid)\n+        self.assertEqual(cid, {'spam': 'blueval', 'eggs': 'redval'})\n+\n+    def test_setdefault(self):\n+        cid = CaseInsensitiveDict({'Spam': 'blueval'})\n+        self.assertEqual(\n+            cid.setdefault('spam', 'notblueval'),\n+            'blueval'\n+        )\n+        self.assertEqual(\n+            cid.setdefault('notspam', 'notblueval'),\n+            'notblueval'\n+        )\n+\n+    def test_lower_items(self):\n+        cid = CaseInsensitiveDict({\n+            'Accept': 'application/json',\n+            'user-Agent': 'requests',\n+        })\n+        keyset = frozenset(lowerkey for lowerkey, v in cid.lower_items())\n+        lowerkeyset = frozenset(['accept', 'user-agent'])\n+        self.assertEqual(keyset, lowerkeyset)\n+\n+    def test_preserve_key_case(self):\n+        cid = CaseInsensitiveDict({\n+            'Accept': 'application/json',\n+            'user-Agent': 'requests',\n+        })\n+        keyset = frozenset(['Accept', 'user-Agent'])\n+        self.assertEqual(frozenset(i[0] for i in cid.items()), keyset)\n+        self.assertEqual(frozenset(cid.keys()), keyset)\n+        self.assertEqual(frozenset(cid), keyset)\n+\n+    def test_preserve_last_key_case(self):\n+        cid = CaseInsensitiveDict({\n+            'Accept': 'application/json',\n+            'user-Agent': 'requests',\n+        })\n+        cid.update({'ACCEPT': 'application/json'})\n+        cid['USER-AGENT'] = 'requests'\n+        keyset = frozenset(['ACCEPT', 'USER-AGENT'])\n+        self.assertEqual(frozenset(i[0] for i in cid.items()), keyset)\n+        self.assertEqual(frozenset(cid.keys()), keyset)\n+        self.assertEqual(frozenset(cid), keyset)\n+\n+\n \n if __name__ == '__main__':\n     unittest.main()\n",
  "problem_statement": "CaseInsensitiveDict __setitem__ faulty for differing-case keys\nI think I figured out the cause of the issue described here: https://github.com/kennethreitz/requests/pull/59\n\nIt appears that if one isn't careful to use a common case convention when assigning a header after it has been assigned before, the header will fail to work. The request will use the old header value... I think I know why, too. Here's an example:\n\ntest.py\n\n``` python\n\nfrom requests.structures import CaseInsensitiveDict\n\nprint \"Initializing CID = CaseInsensitiveDict()\"\nCID = CaseInsensitiveDict()\n\nprint \"Setting 'spam': 'eggs'\"\nCID['spam'] = 'eggs'\nprint \"Setting 'Spam': 'Eggs'\"\nCID['Spam'] = 'Eggs'\nprint \"Setting 'sPAM': 'eGGS'\"\nCID['sPAM'] = 'eGGS'\n\nprint \"Contents of CID:\", CID\nprint \"CID['spam']: '%s'\" % CID['spam']\nprint \"CID['Spam']: '%s'\" % CID['Spam']\nprint \"CID['sPAM']: '%s'\" % CID['sPAM']\n\nprint \"\\n\\n\\n\"\n\nprint \"Initializing CID = CaseInsensitiveDict()\"\nCID = CaseInsensitiveDict()\n\nprint \"Setting 'sPAM': 'eGGS'\"\nCID['sPAM'] = 'eGGS'\nprint \"Setting 'Spam': 'Eggs'\"\nCID['Spam'] = 'Eggs'\nprint \"Setting 'spam': 'eggs'\"\nCID['spam'] = 'eggs'\n\nprint \"Contents of CID:\", CID\nprint \"CID['spam']: '%s'\" % CID['spam']\nprint \"CID['Spam']: '%s'\" % CID['Spam']\nprint \"CID['sPAM']: '%s'\" % CID['sPAM']\n```\n\nThe output:\n\n```\nInitializing CID = CaseInsensitiveDict()\nSetting 'spam': 'eggs'\nSetting 'Spam': 'Eggs'\nSetting 'sPAM': 'eGGS'\nContents of CID: {'sPAM': 'eGGS', 'Spam': 'Eggs', 'spam': 'eggs'}\nCID['spam']: 'eggs'\nCID['Spam']: 'eggs'\nCID['sPAM']: 'eggs'\n\nInitializing CID = CaseInsensitiveDict()\nSetting 'sPAM': 'eGGS'\nSetting 'Spam': 'Eggs'\nSetting 'spam': 'eggs'\nContents of CID: {'spam': 'eggs', 'Spam': 'Eggs', 'sPAM': 'eGGS'}\nCID['spam']: 'eGGS'\nCID['Spam']: 'eGGS'\nCID['sPAM']: 'eGGS'\n```\n\nNotice how in both passes, only the first assignment actually \"works\". It stores the data for all three assignments, but will only return the value set by the initial key.\n\nI believe the only change necessary would be to the **setitem** method on CaseInsensitiveDict:\n\nBroken:\n\n``` python\n    def __setitem__(self, key, value):\n        dict.__setitem__(self, key, value)\n        self._clear_lower_keys()\n```\n\nFixed:\n\n``` python\n    def __setitem__(self, key, value):\n        dict.__setitem__(self, key.lower(), value)\n        self._clear_lower_keys()\n```\n\nWhen I use the corrected module, the CaseInsensitiveDict behaves as I believe it should:\n\n```\nInitializing CID = CaseInsensitiveDict()\nSetting 'spam': 'eggs'\nSetting 'Spam': 'Eggs'\nSetting 'sPAM': 'eGGS'\nContents of CID: {'spam': 'eGGS'}\nCID['spam']: 'eGGS'\nCID['Spam']: 'eGGS'\nCID['sPAM']: 'eGGS'\n\nInitializing CID = CaseInsensitiveDict()\nSetting 'sPAM': 'eGGS'\nSetting 'Spam': 'Eggs'\nSetting 'spam': 'eggs'\nContents of CID: {'spam': 'eggs'}\nCID['spam']: 'eggs'\nCID['Spam']: 'eggs'\nCID['sPAM']: 'eggs'\n```\n\nNote that the value for that key is the last one assigned, instead of the first.\n\nIf needed, I can put together a pull request for this, but it might take some time since I've never done it before :)\n\n",
  "hints_text": "The same issue arises when initializing a CaseInsensitiveDict using a dictionary of differing-case keys or differing-case keyword arguments. Example:\n\n```\n>>> from requests.structures import CaseInsensitiveDict\n>>> CaseInsensitiveDict(a=1, A=2, B=3)\n{'A': 2, 'a': 1, 'B': 3}\n>>> CaseInsensitiveDict({'a': 1, 'A': 2, 'B': 3})\n{'A': 2, 'a': 1, 'B': 3}\n```\n\nI'm not sure what the best approach is to addressing this issue, since we are going to run into problems with Cookie and Set-Cookie headers.  The first, sends cookies in a semi-colon delimited fashion, whereas the latter sends a unique header for each cookie being set. In the case of Set-Cookie, some clients (such as Firefox) do not parse headers whose values were combined with a comma as delimiter as suggested in http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2. Though neither does `Cookie.SimpleCookie`:\n\n```\n>>> SimpleCookie('Set-Cookie: a=1; b=2')['a']\n<Morsel: a='1'>\n>>> SimpleCookie('Set-Cookie: a=1; b=2')['b'] \n<Morsel: b='2'>\n>>> SimpleCookie('Set-Cookie: a=1, b=2')['a'] # incorrect?\n<Morsel: a='1,'>\n>>> SimpleCookie('Set-Cookie: a=1, b=2')['b']\n<Morsel: b='2'>\n>>> SimpleCookie('Set-Cookie: a=1 b=2')['a'] \n<Morsel: a='1'>\n>>> SimpleCookie('Set-Cookie: a=1 b=2')['b']\n<Morsel: b='2'>\n```\n\nurllib3 combines headers with a comma as well: https://github.com/shazow/urllib3/blob/master/urllib3/response.py#L174\n\nSince the CaseInsensitiveDict is used as a container for HTTP headers, would it make more sense to change values to be lists instead of strings?\n\nWe should fix this.\n\nI've submitted a pull request to address this issue. Behavior when initializing a case-insensitive dict with differing-case keys is undefined, as is the case when initializing a dict with multiple values for the same key.\n",
  "created_at": "2013-04-30T20:05:30Z",
  "version": "1.2",
  "FAIL_TO_PASS": "[\"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\"]",
  "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\"]",
  "environment_setup_commit": "d8268fb7b44da7b8aa225eb1ca6fbdb4f9dc2457",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.847090",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}