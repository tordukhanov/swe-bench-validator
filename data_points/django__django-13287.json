{
  "repo": "django/django",
  "instance_id": "django__django-13287",
  "base_commit": "ad827ddaef05069a1385cc2d26fd2ab9c6ba1f4d",
  "patch": "diff --git a/django/apps/config.py b/django/apps/config.py\n--- a/django/apps/config.py\n+++ b/django/apps/config.py\n@@ -89,6 +89,7 @@ def create(cls, entry):\n         \"\"\"\n         # create() eventually returns app_config_class(app_name, app_module).\n         app_config_class = None\n+        app_config_name = None\n         app_name = None\n         app_module = None\n \n@@ -161,12 +162,15 @@ def create(cls, entry):\n                     )\n                 else:\n                     message += (\n-                        \"However, Django's automatic detection picked another \"\n-                        \"configuration, %r. You should move the default \"\n-                        \"config class to the apps submodule of your \"\n-                        \"application and, if this module defines several \"\n-                        \"config classes, mark the default one with default = \"\n-                        \"True.\" % app_config_name\n+                        \"However, Django's automatic detection %s. You should \"\n+                        \"move the default config class to the apps submodule \"\n+                        \"of your application and, if this module defines \"\n+                        \"several config classes, mark the default one with \"\n+                        \"default = True.\" % (\n+                            \"picked another configuration, %r\" % app_config_name\n+                            if app_config_name\n+                            else \"did not find this configuration\"\n+                        )\n                     )\n                 warnings.warn(message, RemovedInDjango41Warning, stacklevel=2)\n                 entry = new_entry\n",
  "test_patch": "diff --git a/tests/apps/explicit_default_config_empty_apps/__init__.py b/tests/apps/explicit_default_config_empty_apps/__init__.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/apps/explicit_default_config_empty_apps/__init__.py\n@@ -0,0 +1,7 @@\n+from django.apps import AppConfig\n+\n+default_app_config = 'apps.explicit_default_config_empty_apps.ExplicitDefaultConfigEmptyApps'\n+\n+\n+class ExplicitDefaultConfigEmptyApps(AppConfig):\n+    name = 'apps.explicit_default_config_empty_apps'\ndiff --git a/tests/apps/explicit_default_config_empty_apps/apps.py b/tests/apps/explicit_default_config_empty_apps/apps.py\nnew file mode 100644\ndiff --git a/tests/apps/explicit_default_config_without_apps/__init__.py b/tests/apps/explicit_default_config_without_apps/__init__.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/apps/explicit_default_config_without_apps/__init__.py\n@@ -0,0 +1,7 @@\n+from django.apps import AppConfig\n+\n+default_app_config = 'apps.explicit_default_config_without_apps.ExplicitDefaultConfigWithoutApps'\n+\n+\n+class ExplicitDefaultConfigWithoutApps(AppConfig):\n+    name = 'apps.explicit_default_config_without_apps'\ndiff --git a/tests/apps/tests.py b/tests/apps/tests.py\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -10,9 +10,13 @@\n from django.utils.deprecation import RemovedInDjango41Warning\n \n from .explicit_default_config_app.apps import ExplicitDefaultConfig\n+from .explicit_default_config_empty_apps import ExplicitDefaultConfigEmptyApps\n from .explicit_default_config_mismatch_app.not_apps import (\n     ExplicitDefaultConfigMismatch,\n )\n+from .explicit_default_config_without_apps import (\n+    ExplicitDefaultConfigWithoutApps,\n+)\n from .models import SoAlternative, TotallyNormal, new_apps\n from .one_config_app.apps import OneConfig\n from .two_configs_one_default_app.apps import TwoConfig\n@@ -520,3 +524,51 @@ def test_explicit_default_app_config_mismatch(self):\n             with self.settings(INSTALLED_APPS=['apps.explicit_default_config_mismatch_app']):\n                 config = apps.get_app_config('explicit_default_config_mismatch_app')\n             self.assertIsInstance(config, ExplicitDefaultConfigMismatch)\n+\n+    def test_explicit_default_app_config_empty_apps(self):\n+        \"\"\"\n+        Load an app that specifies a default AppConfig class in __init__ and\n+        have an empty apps module.\n+        \"\"\"\n+        msg = (\n+            \"'apps.explicit_default_config_empty_apps' defines \"\n+            \"default_app_config = 'apps.explicit_default_config_empty_apps.\"\n+            \"ExplicitDefaultConfigEmptyApps'. However, Django's automatic \"\n+            \"detection did not find this configuration. You should move the \"\n+            \"default config class to the apps submodule of your application \"\n+            \"and, if this module defines several config classes, mark the \"\n+            \"default one with default = True.\"\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango41Warning, msg):\n+            with self.settings(INSTALLED_APPS=['apps.explicit_default_config_empty_apps']):\n+                pass\n+        with ignore_warnings(category=RemovedInDjango41Warning):\n+            with self.settings(INSTALLED_APPS=['apps.explicit_default_config_empty_apps']):\n+                self.assertIsInstance(\n+                    apps.get_app_config('explicit_default_config_empty_apps'),\n+                    ExplicitDefaultConfigEmptyApps,\n+                )\n+\n+    def test_explicit_default_app_config_without_apps(self):\n+        \"\"\"\n+        Load an app that specifies a default AppConfig class in __init__ and do\n+        not have an apps module.\n+        \"\"\"\n+        msg = (\n+            \"'apps.explicit_default_config_without_apps' defines \"\n+            \"default_app_config = 'apps.explicit_default_config_without_apps.\"\n+            \"ExplicitDefaultConfigWithoutApps'. However, Django's automatic \"\n+            \"detection did not find this configuration. You should move the \"\n+            \"default config class to the apps submodule of your application \"\n+            \"and, if this module defines several config classes, mark the \"\n+            \"default one with default = True.\"\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango41Warning, msg):\n+            with self.settings(INSTALLED_APPS=['apps.explicit_default_config_without_apps']):\n+                pass\n+        with ignore_warnings(category=RemovedInDjango41Warning):\n+            with self.settings(INSTALLED_APPS=['apps.explicit_default_config_without_apps']):\n+                self.assertIsInstance(\n+                    apps.get_app_config('explicit_default_config_without_apps'),\n+                    ExplicitDefaultConfigWithoutApps,\n+                )\n",
  "problem_statement": "App with default_app_config and without apps.py or with an empty apps.py crashes.\nDescription\n\t \n\t\t(last modified by Iuri de Silvio)\n\t \nIf I don't have an apps.py and the default_app_config is in __init__.py, it fails.\nTraceback (most recent call last):\n File \"./manage.py\", line 22, in <module>\n\tmain()\n File \"./manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"django/core/management/__init__.py\", line 401, in execute_from_command_line\n\tutility.execute()\n File \"django/core/management/__init__.py\", line 377, in execute\n\tdjango.setup()\n File \"django/__init__.py\", line 24, in setup\n\tapps.populate(settings.INSTALLED_APPS)\n File \"django/apps/registry.py\", line 91, in populate\n\tapp_config = AppConfig.create(entry)\n File \"django/apps/config.py\", line 157, in create\n\tif new_entry == app_config_name:\nUnboundLocalError: local variable 'app_config_name' referenced before assignment\nIf the apps.py is there, but the default_app_config is in __init__.py, it fails too.\nTraceback (most recent call last):\n File \"django/django/test/utils.py\", line 381, in inner\n\treturn func(*args, **kwargs)\n File \"django/tests/apps/tests.py\", line 541, in test_explicit_default_app_config_with_empty_apps\n\twith self.settings(INSTALLED_APPS=['apps.explicit_default_config_with_empty_apps']):\n File \"django/django/test/utils.py\", line 336, in __enter__\n\treturn self.enable()\n File \"django/django/test/utils.py\", line 410, in enable\n\tapps.set_installed_apps(self.options['INSTALLED_APPS'])\n File \"django/django/apps/registry.py\", line 355, in set_installed_apps\n\tself.populate(installed)\n File \"django/django/apps/registry.py\", line 91, in populate\n\tapp_config = AppConfig.create(entry)\n File \"django/django/apps/config.py\", line 160, in create\n\tif new_entry == app_config_name:\nUnboundLocalError: local variable 'app_config_name' referenced before assignment\nLooks like a regression added in https://code.djangoproject.com/ticket/31180.\n",
  "hints_text": "",
  "created_at": "2020-08-09T13:01:34Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_explicit_default_app_config_empty_apps (apps.tests.DeprecationTests)\", \"test_explicit_default_app_config_without_apps (apps.tests.DeprecationTests)\"]",
  "PASS_TO_PASS": "[\"If single element in __path__, use it (in preference to __file__).\", \"test_duplicate_dunder_path_no_dunder_file (apps.tests.AppConfigTests)\", \"If the __path__ attr is empty, use __file__ if set.\", \"If the __path__ attr is empty and there is no __file__, raise.\", \"If path set as class attr, overrides __path__ and __file__.\", \"If the __path__ attr is length>1, use __file__ if set.\", \"If the __path__ attr is length>1 and there is no __file__, raise.\", \"If there is no __path__ attr, use __file__.\", \"If there is no __path__ or __file__, raise ImproperlyConfigured.\", \"If subclass sets path as class attr, no module attributes needed.\", \"test_repr (apps.tests.AppConfigTests)\", \"test_multiple_paths (apps.tests.NamespacePackageAppTests)\", \"test_multiple_paths_explicit_path (apps.tests.NamespacePackageAppTests)\", \"test_single_path (apps.tests.NamespacePackageAppTests)\", \"test_explicit_default_app_config (apps.tests.DeprecationTests)\", \"test_explicit_default_app_config_mismatch (apps.tests.DeprecationTests)\", \"test_explicit_default_app_config_warning (apps.tests.DeprecationTests)\", \"test_bad_app_config (apps.tests.AppsTests)\", \"test_duplicate_labels (apps.tests.AppsTests)\", \"test_duplicate_names (apps.tests.AppsTests)\", \"test_dynamic_load (apps.tests.AppsTests)\", \"test_get_app_config (apps.tests.AppsTests)\", \"test_get_app_configs (apps.tests.AppsTests)\", \"test_get_containing_app_config_apps_not_ready (apps.tests.AppsTests)\", \"test_get_model (apps.tests.AppsTests)\", \"test_import_exception_is_not_masked (apps.tests.AppsTests)\", \"test_is_installed (apps.tests.AppsTests)\", \"test_lazy_model_operation (apps.tests.AppsTests)\", \"test_model_clash (apps.tests.AppsTests)\", \"test_models_not_loaded (apps.tests.AppsTests)\", \"test_models_py (apps.tests.AppsTests)\", \"Load an app that doesn't provide an AppConfig class.\", \"test_no_such_app (apps.tests.AppsTests)\", \"test_no_such_app_config (apps.tests.AppsTests)\", \"test_no_such_app_config_with_choices (apps.tests.AppsTests)\", \"test_not_an_app_config (apps.tests.AppsTests)\", \"Load an app that provides an AppConfig class.\", \"test_ready (apps.tests.AppsTests)\", \"test_relabeling (apps.tests.AppsTests)\", \"test_singleton_master (apps.tests.AppsTests)\", \"Load an app that provides two AppConfig classes.\", \"test_two_configs_one_default_app (apps.tests.AppsTests)\", \"Load an app that provides two default AppConfig classes.\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.651152",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}