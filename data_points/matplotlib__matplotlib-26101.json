{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26101",
  "base_commit": "7ad3bc2d06fb8d000716e5be027d893d5bc06486",
  "patch": "diff --git a/lib/matplotlib/markers.py b/lib/matplotlib/markers.py\n--- a/lib/matplotlib/markers.py\n+++ b/lib/matplotlib/markers.py\n@@ -509,14 +509,12 @@ def _set_mathtext_path(self):\n         if len(text.vertices) == 0:\n             return\n \n-        xmin, ymin = text.vertices.min(axis=0)\n-        xmax, ymax = text.vertices.max(axis=0)\n-        width = xmax - xmin\n-        height = ymax - ymin\n-        max_dim = max(width, height)\n-        self._transform = Affine2D() \\\n-            .translate(-xmin + 0.5 * -width, -ymin + 0.5 * -height) \\\n-            .scale(1.0 / max_dim)\n+        bbox = text.get_extents()\n+        max_dim = max(bbox.width, bbox.height)\n+        self._transform = (\n+            Affine2D()\n+            .translate(-bbox.xmin + 0.5 * -bbox.width, -bbox.ymin + 0.5 * -bbox.height)\n+            .scale(1.0 / max_dim))\n         self._path = text\n         self._snap = False\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_marker.py b/lib/matplotlib/tests/test_marker.py\n--- a/lib/matplotlib/tests/test_marker.py\n+++ b/lib/matplotlib/tests/test_marker.py\n@@ -156,6 +156,18 @@ def draw_ref_marker(y, style, size):\n     ax_ref.set(xlim=(-0.5, 1.5), ylim=(-0.5, 1.5))\n \n \n+# The bullet mathtext marker is not quite a circle, so this is not a perfect match, but\n+# it is close enough to confirm that the text-based marker is centred correctly. But we\n+# still need a small tolerance to work around that difference.\n+@check_figures_equal(extensions=['png'], tol=1.86)\n+def test_text_marker(fig_ref, fig_test):\n+    ax_ref = fig_ref.add_subplot()\n+    ax_test = fig_test.add_subplot()\n+\n+    ax_ref.plot(0, 0, marker=r'o', markersize=100, markeredgewidth=0)\n+    ax_test.plot(0, 0, marker=r'$\\bullet$', markersize=100, markeredgewidth=0)\n+\n+\n @check_figures_equal()\n def test_marker_clipping(fig_ref, fig_test):\n     # Plotting multiple markers can trigger different optimized paths in\n",
  "problem_statement": "[Bug]: Star marker (using mathtext) is not center-aligned\n### Bug summary\n\nIs there any other way to center-align mathtext markers?\r\n![image](https://github.com/matplotlib/matplotlib/assets/16134605/1ae4f802-763a-4db1-b284-63854081bf84)\r\n\n\n### Code for reproduction\n\n```python\nfrom matplotlib import pyplot as plt\r\nplt.plot(10, 10, color='b', alpha=1.0, marker=\"*\", markersize=25)\r\nplt.plot(10, 10, color='g', alpha=1.0, marker=\"$\\star$\", markersize=25)\r\nplt.plot(10, 10, color='r', alpha=1.0, marker=\".\")\n```\n\n\n### Actual outcome\n\nAll markers using mathtext were not center-aligned\n\n### Expected outcome\n\ncenter-aligned markers (whether mathtext is used or not)\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.7.1\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n",
  "hints_text": "Unfortunately, We are kind of at the mercy of the text rendering and the bounding box that gives us for things going through `mathtext`, and I'm not sure there is any way around that.\r\n\r\nSince the symbols are designed to be incorporated into text rather than displayed independently, many of them are offset (though not all, and not all by the same amount, so not like there is an easy \"shift it over by 2 pts\" that can be applied).\r\n\r\nFor simple shapes, it is recommended to use the built in markers or paths rather than text, if that works for your use case. The mathtext markers are good in that they give a large number of symbols to choose from, but at the cost of rendering perfectly on the center, which is not a dealbreaker for all plots, but is for many.\r\n\r\nHere is a script that can help identify where characters will anchor, some do better than others:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import TextBox\r\nfrom matplotlib.transforms import IdentityTransform\r\nimport numpy as np\r\n\r\nfig, (ax, widgetax) = plt.subplots(nrows=2, figsize=(6, 4), dpi=100)\r\n\r\ndef update(s):\r\n    ax.clear()\r\n    ax.set(xlim=(0, 1), ylim=(0, 1), xticks=[], yticks=[])\r\n    ax.spines[:].set_visible(False)\r\n    text = ax.text(0.5, 0.5, fr'${s}$', fontsize=128, ha='center', va='center', zorder=1)\r\n    text.set_bbox({\"facecolor\":\"C2\", \"alpha\":.3, \"pad\":0})\r\n    try:\r\n        fig.draw_without_rendering()\r\n    except:\r\n        ax.clear()\r\n        ax.set(xlim=(0, 1), ylim=(0, 1), xticks=[], yticks=[])\r\n        ax.spines[:].set_visible(False)\r\n        text = ax.text(0.5, 0.5, fr'$invalid$', fontsize=128, ha='center', va='center', zorder=1)\r\n\r\n    bbox = text.get_window_extent()\r\n    vert = ax.vlines((bbox.xmax+bbox.xmin)/2, bbox.ymin, bbox.ymax, transform=IdentityTransform())\r\n    horiz = ax.hlines((bbox.ymax+bbox.ymin)/2, bbox.xmin, bbox.xmax, transform=IdentityTransform())\r\n    fig.canvas.draw_idle()\r\n\r\nupdate(r\"\\star\")\r\n\r\nwidget = TextBox(widgetax, \"text\", initial=r\"\\star\")\r\nwidget.on_submit(update)\r\n\r\n\r\nplt.show()\r\n```\r\n\r\n(You can update by typing into the bottom and hitting enter)\r\n\r\nThe green box is the reported bounding box, the blue lines are added at the center for each horizontal and vertical directions, crossing at the center, which is the anchor point for the marker.\r\n\r\n![Figure_1](https://github.com/matplotlib/matplotlib/assets/2501846/c432f4aa-bf00-4518-817f-09e277de3795)\r\n\nWe discussed this on a call, and coincidentally, I had found a bug about mathtext markers, but had not submitted any fix as it didn't seem related to the bug I _was_ fixing and I didn't have a way to prove it was wrong without any reproducer.\r\n\r\nHowever, it turns out that _this_ issue is a perfect reproducer for the bug I found. Now I can put together the fix I already have into a PR.\n@ksunden \r\nIt's sad that there is no clear way, but thank you very much for providing above good codes :)\r\nI'll try it out and use it for my project. thanks again!\n@QuLogic \r\nI'm glad that you found the bug again. it doesn't seem related to this, bug could you explain more about the bug / PR?\n@timegate as @QuLogic said, it actually looks like this is solvable after we looked at it closer (together). It may still not be absolutely perfect because it's based on a rectangle bounding box, but should be closer at least.\nThe technical details:\n\n- paths are stored as two arrays: the xy points as an Nx2 float array and a length N 1D integer array describing how the points are connected\n\n- one of the codes for the latter array is \"close the shape\" and thus it doesn't actually depend on the values in the xy array, but there still are some there to align the arrays\n\n- however that point, which doesn't actually mean anything to the path, is still currently used to determine the bounding box\n\n- the fix is to ignore such points in the bounding box computation \n\n- for a five pointed star there will still be a slight (~5%, I think) offset for the vertical component compared to the anchor point of the built in stars, which is the center of the circumscribing circle.\n\n- this is because it is determined by the midpoint of the bounding rectangle, which cuts off the bottom of that circle since the path does not extend that far down.\n@ksunden it's amazing! thanks for the detailed explanation. if there is an PR about above later, could you please post a pr link?",
  "created_at": "2023-06-10T02:46:30Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_marker.py::test_text_marker[png]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_marker.py::test_marker_fillstyle\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[o]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[x]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[None]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[$\\\\\\\\frac{1}{2}$]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[$\\\\u266b$]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[1]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[0]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker8]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker9]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker10]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker11]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker12]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker13]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker14]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker15]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker16]\", \"lib/matplotlib/tests/test_marker.py::test_markers_valid[marker17]\", \"lib/matplotlib/tests/test_marker.py::test_markers_invalid[square]\", \"lib/matplotlib/tests/test_marker.py::test_markers_invalid[marker1]\", \"lib/matplotlib/tests/test_marker.py::test_markers_invalid[marker2]\", \"lib/matplotlib/tests/test_marker.py::test_markers_invalid[marker3]\", \"lib/matplotlib/tests/test_marker.py::test_markers_invalid[marker4]\", \"lib/matplotlib/tests/test_marker.py::test_poly_marker[png]\", \"lib/matplotlib/tests/test_marker.py::test_poly_marker[pdf]\", \"lib/matplotlib/tests/test_marker.py::test_star_marker\", \"lib/matplotlib/tests/test_marker.py::test_asterisk_marker[png]\", \"lib/matplotlib/tests/test_marker.py::test_asterisk_marker[pdf]\", \"lib/matplotlib/tests/test_marker.py::test_marker_clipping[png]\", \"lib/matplotlib/tests/test_marker.py::test_marker_clipping[pdf]\", \"lib/matplotlib/tests/test_marker.py::test_marker_init_transforms\", \"lib/matplotlib/tests/test_marker.py::test_marker_init_joinstyle\", \"lib/matplotlib/tests/test_marker.py::test_marker_init_captyle\", \"lib/matplotlib/tests/test_marker.py::test_marker_transformed[marker0-transform0-expected0]\", \"lib/matplotlib/tests/test_marker.py::test_marker_transformed[marker1-transform1-expected1]\", \"lib/matplotlib/tests/test_marker.py::test_marker_transformed[marker2-transform2-expected2]\", \"lib/matplotlib/tests/test_marker.py::test_marker_transformed[marker3-transform3-expected3]\", \"lib/matplotlib/tests/test_marker.py::test_marker_rotated_invalid\", \"lib/matplotlib/tests/test_marker.py::test_marker_rotated[marker0-10-None-expected0]\", \"lib/matplotlib/tests/test_marker.py::test_marker_rotated[marker1-None-0.01-expected1]\", \"lib/matplotlib/tests/test_marker.py::test_marker_rotated[marker2-10-None-expected2]\", \"lib/matplotlib/tests/test_marker.py::test_marker_rotated[marker3-None-0.01-expected3]\", \"lib/matplotlib/tests/test_marker.py::test_marker_rotated[marker4-10-None-expected4]\", \"lib/matplotlib/tests/test_marker.py::test_marker_rotated[marker5-10-None-expected5]\", \"lib/matplotlib/tests/test_marker.py::test_marker_scaled\", \"lib/matplotlib/tests/test_marker.py::test_alt_transform\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.828065",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}