{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17010",
  "base_commit": "c36eaa91c111d7052f49b58744beb2c8afae9182",
  "patch": "diff --git a/sympy/functions/special/polynomials.py b/sympy/functions/special/polynomials.py\n--- a/sympy/functions/special/polynomials.py\n+++ b/sympy/functions/special/polynomials.py\n@@ -601,7 +601,7 @@ def eval(cls, n, x):\n                 if n == S.NegativeOne:\n                     # n can not be -1 here\n                     return S.Zero\n-                else:\n+                elif not (-n - 2).could_extract_minus_sign():\n                     return -chebyshevu(-n - 2, x)\n             # We can evaluate for some special values of x\n             if x == S.Zero:\n@@ -783,7 +783,7 @@ def eval(cls, n, x):\n             if x.could_extract_minus_sign():\n                 return S.NegativeOne**n * legendre(n, -x)\n             # L_{-n}(x)  --->  L_{n-1}(x)\n-            if n.could_extract_minus_sign():\n+            if n.could_extract_minus_sign() and not(-n - 1).could_extract_minus_sign():\n                 return legendre(-n - S.One, x)\n             # We can evaluate for some special values of x\n             if x == S.Zero:\n@@ -1088,12 +1088,14 @@ class laguerre(OrthogonalPolynomial):\n \n     @classmethod\n     def eval(cls, n, x):\n+        if n.is_integer is False:\n+            raise ValueError(\"Error: n should be an integer.\")\n         if not n.is_Number:\n             # Symbolic result L_n(x)\n             # L_{n}(-x)  --->  exp(-x) * L_{-n-1}(x)\n             # L_{-n}(x)  --->  exp(x) * L_{n-1}(-x)\n-            if n.could_extract_minus_sign():\n-                return exp(x) * laguerre(n - 1, -x)\n+            if n.could_extract_minus_sign() and not(-n - 1).could_extract_minus_sign():\n+                return exp(x)*laguerre(-n - 1, -x)\n             # We can evaluate for some special values of x\n             if x == S.Zero:\n                 return S.One\n@@ -1102,10 +1104,8 @@ def eval(cls, n, x):\n             elif x == S.Infinity:\n                 return S.NegativeOne**n * S.Infinity\n         else:\n-            # n is a given fixed integer, evaluate into polynomial\n             if n.is_negative:\n-                raise ValueError(\n-                    \"The index n must be nonnegative integer (got %r)\" % n)\n+                return exp(x)*laguerre(-n - 1, -x)\n             else:\n                 return cls._eval_at_order(n, x)\n \n@@ -1123,8 +1123,10 @@ def fdiff(self, argindex=2):\n     def _eval_rewrite_as_polynomial(self, n, x, **kwargs):\n         from sympy import Sum\n         # Make sure n \\in N_0\n-        if n.is_negative or n.is_integer is False:\n-            raise ValueError(\"Error: n should be a non-negative integer.\")\n+        if n.is_negative:\n+            return exp(x) * self._eval_rewrite_as_polynomial(-n - 1, -x, **kwargs)\n+        if n.is_integer is False:\n+            raise ValueError(\"Error: n should be an integer.\")\n         k = Dummy(\"k\")\n         kern = RisingFactorial(-n, k) / factorial(k)**2 * x**k\n         return Sum(kern, (k, 0, n))\n@@ -1193,7 +1195,7 @@ class assoc_laguerre(OrthogonalPolynomial):\n     References\n     ==========\n \n-    .. [1] https://en.wikipedia.org/wiki/Laguerre_polynomial#Assoc_laguerre_polynomials\n+    .. [1] https://en.wikipedia.org/wiki/Laguerre_polynomial#Generalized_Laguerre_polynomials\n     .. [2] http://mathworld.wolfram.com/AssociatedLaguerrePolynomial.html\n     .. [3] http://functions.wolfram.com/Polynomials/LaguerreL/\n     .. [4] http://functions.wolfram.com/Polynomials/LaguerreL3/\n",
  "test_patch": "diff --git a/sympy/functions/special/tests/test_spec_polynomials.py b/sympy/functions/special/tests/test_spec_polynomials.py\n--- a/sympy/functions/special/tests/test_spec_polynomials.py\n+++ b/sympy/functions/special/tests/test_spec_polynomials.py\n@@ -8,7 +8,8 @@\n from sympy.core.compatibility import range\n from sympy.core.expr import unchanged\n from sympy.core.function import ArgumentIndexError\n-from sympy.utilities.pytest import raises, skip\n+from sympy.utilities.pytest import raises\n+\n \n x = Symbol('x')\n \n@@ -154,12 +155,14 @@ def test_legendre():\n \n     X = legendre(n, x)\n     assert isinstance(X, legendre)\n+    assert unchanged(legendre, n, x)\n \n     assert legendre(n, 0) == sqrt(pi)/(gamma(S(1)/2 - n/2)*gamma(n/2 + 1))\n     assert legendre(n, 1) == 1\n     assert legendre(n, oo) == oo\n     assert legendre(-n, x) == legendre(n - 1, x)\n     assert legendre(n, -x) == (-1)**n*legendre(n, x)\n+    assert unchanged(legendre, -n + k, x)\n \n     assert conjugate(legendre(n, x)) == legendre(n, conjugate(x))\n \n@@ -244,6 +247,7 @@ def test_chebyshev():\n     n = Symbol(\"n\")\n     X = chebyshevt(n, x)\n     assert isinstance(X, chebyshevt)\n+    assert unchanged(chebyshevt, n, x)\n     assert chebyshevt(n, -x) == (-1)**n*chebyshevt(n, x)\n     assert chebyshevt(-n, x) == chebyshevt(n, x)\n \n@@ -258,8 +262,10 @@ def test_chebyshev():\n     X = chebyshevu(n, x)\n     assert isinstance(X, chebyshevu)\n \n+    y = Symbol('y')\n     assert chebyshevu(n, -x) == (-1)**n*chebyshevu(n, x)\n     assert chebyshevu(-n, x) == -chebyshevu(n - 2, x)\n+    assert unchanged(chebyshevu, -n + y, x)\n \n     assert chebyshevu(n, 0) == cos(pi*n/2)\n     assert chebyshevu(n, 1) == n + 1\n@@ -312,15 +318,14 @@ def test_hermite():\n \n def test_laguerre():\n     n = Symbol(\"n\")\n+    m = Symbol(\"m\", negative=True)\n \n     # Laguerre polynomials:\n     assert laguerre(0, x) == 1\n     assert laguerre(1, x) == -x + 1\n     assert laguerre(2, x) == x**2/2 - 2*x + 1\n     assert laguerre(3, x) == -x**3/6 + 3*x**2/2 - 3*x + 1\n-\n-    X = laguerre(Rational(5,2), x)\n-    assert isinstance(X, laguerre)\n+    assert laguerre(-2, x) == (x + 1)*exp(x)\n \n     X = laguerre(n, x)\n     assert isinstance(X, laguerre)\n@@ -335,21 +340,23 @@ def test_laguerre():\n \n     assert laguerre(n, x).rewrite(\"polynomial\").dummy_eq(\n         Sum(x**_k*RisingFactorial(-n, _k)/factorial(_k)**2, (_k, 0, n)))\n+    assert laguerre(m, x).rewrite(\"polynomial\").dummy_eq(\n+        exp(x)*Sum((-x)**_k*RisingFactorial(m + 1, _k)/factorial(_k)**2,\n+            (_k, 0, -m - 1)))\n \n     assert diff(laguerre(n, x), x) == -assoc_laguerre(n - 1, 1, x)\n \n+    k = Symbol('k')\n+    assert laguerre(-n, x) == exp(x)*laguerre(n - 1, -x)\n+    assert laguerre(-3, x) == exp(x)*laguerre(2, -x)\n+    assert unchanged(laguerre, -n + k, x)\n+\n     raises(ValueError, lambda: laguerre(-2.1, x))\n+    raises(ValueError, lambda: laguerre(Rational(5, 2), x))\n     raises(ArgumentIndexError, lambda: laguerre(n, x).fdiff(1))\n     raises(ArgumentIndexError, lambda: laguerre(n, x).fdiff(3))\n \n \n-def test_legendre_fail():\n-    skip(\"Infinite recursion kills Travis\")\n-    n = Symbol(\"n\")\n-    assert laguerre(-n, x) == exp(x)*laguerre(n-1, -x)\n-    assert laguerre(-3, x) == exp(x)*laguerre(2, -x)\n-\n-\n def test_assoc_laguerre():\n     n = Symbol(\"n\")\n     m = Symbol(\"m\")\n",
  "problem_statement": "Some uses of could_extract_minus_sign can lead to infinite recursion\nThe issue coming from https://github.com/sympy/sympy/issues/13102 was fixed, but there is another issue has come up in my pull request https://github.com/sympy/sympy/pull/13059. Several places in sympy/functions/special/polynomials.py use could_extract_minus_sign() in a way that can lead to infinite recursion. For example, in [`chebyshevu`](https://github.com/sympy/sympy/blob/dceb708ca035c568c816d9457af1b7ca9e57c0a5/sympy/functions/special/polynomials.py#L605-L609):\r\n\r\n```py\r\n            if n.could_extract_minus_sign():\r\n                if n == S.NegativeOne:\r\n                    return S.Zero\r\n                else:\r\n                    return -chebyshevu(-n - 2, x)\r\n```\r\n\r\nThe problem is that both `n.could_extract_minus_sign()` and `(-n - 2).could_extract_minus_sign()` could be True, leading to infinite recursion. This happens in my branch for `chebyshevu(n - 1, x)`, but probably an example could be found for master too. \r\n\r\nWe need a more robust way to canonicalize this. Ideally we'd want to remove the minus sign from the highest order term. Is there a fast way to do that? \n",
  "hints_text": "Actually I just thought of a much simpler way. Look at the numeric term (the `coeff` from `as_coeff_Add`), and canonicalize based on whichever is closer to 0. If the numeric term is -1 (so that the term in -n - 2 is also -1), then use `(n + 1).could_extract_minus_sign()`. \r\n\r\n@smichr what do you think? \n> so that the term in -n - 2 is also -1\r\n\r\nI am not following how this might be so -- can you tell me what the `n` is?\r\n\r\nAlso, what was `n` that cause the recursion error?\n> I am not following how this might be so -- can you tell me what the n is?\r\n\r\n```\r\n>>> -(n - 1) - 2\r\n-n - 1\r\n```\r\n\r\nSorry for the confusion for `n` the arg name of `chebyshevu` and `Symbol('n')`. I should probably use a different symbol name for the example. \r\n\r\n> Also, what was n that cause the recursion error?\r\n\r\n`chebyshevu(n - 1, x)`, but only in my branch, which has changed up the args ordering for Add and Mul. However, it seems you could probably find an example for master too, since `n.could_extract_minus_sign() == True` is no guarantee that `(-n - 2).could_extract_minus_sign() == False`. \nHere's an example that works in master: `chebyshevu(n - x - 2, x)`\nSo I'm suggesting \r\n\r\n```py\r\ncoeff, rest = n.as_coeff_Add()\r\nif coeff > -1:\r\n    n = -n - 2\r\nelif coeff == -1:\r\n    n = -n - 2 if rest.could_extract_minus_sign() else n\r\n```\r\n\r\nAnd similar logic for the other places in the file that have this problem. That will produce an arg with constant term closest to 0, using could_extract_minus_sign for the split case. \nOther instances of this I found in the file:\r\n\r\n[`legendre`](https://github.com/sympy/sympy/blob/dceb708ca035c568c816d9457af1b7ca9e57c0a5/sympy/functions/special/polynomials.py#L790): `n` -> `-n - 1`\r\n\r\n[`laguerre`](https://github.com/sympy/sympy/blob/dceb708ca035c568c816d9457af1b7ca9e57c0a5/sympy/functions/special/polynomials.py#L1088): `n` -> `n - 1`\r\n\r\nFor legendre the split case is `coeff == -S.Half`. For laguerre there is no split case, so we can just pick the original if the `coeff` is negative and `n - 1` otherwise. \n> no guarantee\r\n\r\nWhat you are proposing in terms of keeping track of the split point makes sense. And I agree that could_extract makes no guarantee about a new expression derived from n.",
  "created_at": "2019-06-11T12:04:43Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_chebyshev\", \"test_laguerre\"]",
  "PASS_TO_PASS": "[\"test_jacobi\", \"test_gegenbauer\", \"test_legendre\", \"test_assoc_legendre\", \"test_hermite\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.112254",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}