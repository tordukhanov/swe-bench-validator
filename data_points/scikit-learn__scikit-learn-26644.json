{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-26644",
  "base_commit": "33a1f1690e7a7007633f59b6bee32017f4229864",
  "patch": "diff --git a/sklearn/inspection/_plot/partial_dependence.py b/sklearn/inspection/_plot/partial_dependence.py\n--- a/sklearn/inspection/_plot/partial_dependence.py\n+++ b/sklearn/inspection/_plot/partial_dependence.py\n@@ -86,8 +86,9 @@ class PartialDependenceDisplay:\n \n         .. note::\n            The fast ``method='recursion'`` option is only available for\n-           ``kind='average'``. Plotting individual dependencies requires using\n-           the slower ``method='brute'`` option.\n+           `kind='average'` and `sample_weights=None`. Computing individual\n+           dependencies and doing weighted averages requires using the slower\n+           `method='brute'`.\n \n         .. versionadded:: 0.24\n            Add `kind` parameter with `'average'`, `'individual'`, and `'both'`\n@@ -247,6 +248,7 @@ def from_estimator(\n         X,\n         features,\n         *,\n+        sample_weight=None,\n         categorical_features=None,\n         feature_names=None,\n         target=None,\n@@ -337,6 +339,14 @@ def from_estimator(\n             with `kind='average'`). Each tuple must be of size 2.\n             If any entry is a string, then it must be in ``feature_names``.\n \n+        sample_weight : array-like of shape (n_samples,), default=None\n+            Sample weights are used to calculate weighted means when averaging the\n+            model output. If `None`, then samples are equally weighted. If\n+            `sample_weight` is not `None`, then `method` will be set to `'brute'`.\n+            Note that `sample_weight` is ignored for `kind='individual'`.\n+\n+            .. versionadded:: 1.3\n+\n         categorical_features : array-like of shape (n_features,) or shape \\\n                 (n_categorical_features,), dtype={bool, int, str}, default=None\n             Indicates the categorical features.\n@@ -409,7 +419,8 @@ def from_estimator(\n               computationally intensive.\n \n             - `'auto'`: the `'recursion'` is used for estimators that support it,\n-              and `'brute'` is used otherwise.\n+              and `'brute'` is used otherwise. If `sample_weight` is not `None`,\n+              then `'brute'` is used regardless of the estimator.\n \n             Please see :ref:`this note <pdp_method_differences>` for\n             differences between the `'brute'` and `'recursion'` method.\n@@ -464,9 +475,10 @@ def from_estimator(\n             - ``kind='average'`` results in the traditional PD plot;\n             - ``kind='individual'`` results in the ICE plot.\n \n-           Note that the fast ``method='recursion'`` option is only available for\n-           ``kind='average'``. Plotting individual dependencies requires using the\n-           slower ``method='brute'`` option.\n+           Note that the fast `method='recursion'` option is only available for\n+           `kind='average'` and `sample_weights=None`. Computing individual\n+           dependencies and doing weighted averages requires using the slower\n+           `method='brute'`.\n \n         centered : bool, default=False\n             If `True`, the ICE and PD lines will start at the origin of the\n@@ -693,6 +705,7 @@ def from_estimator(\n                 estimator,\n                 X,\n                 fxs,\n+                sample_weight=sample_weight,\n                 feature_names=feature_names,\n                 categorical_features=categorical_features,\n                 response_method=response_method,\n",
  "test_patch": "diff --git a/sklearn/inspection/_plot/tests/test_plot_partial_dependence.py b/sklearn/inspection/_plot/tests/test_plot_partial_dependence.py\n--- a/sklearn/inspection/_plot/tests/test_plot_partial_dependence.py\n+++ b/sklearn/inspection/_plot/tests/test_plot_partial_dependence.py\n@@ -1086,3 +1086,34 @@ def test_partial_dependence_display_kind_centered_interaction(\n     )\n \n     assert all([ln._y[0] == 0.0 for ln in disp.lines_.ravel() if ln is not None])\n+\n+\n+def test_partial_dependence_display_with_constant_sample_weight(\n+    pyplot,\n+    clf_diabetes,\n+    diabetes,\n+):\n+    \"\"\"Check that the utilization of a constant sample weight maintains the\n+    standard behavior.\n+    \"\"\"\n+    disp = PartialDependenceDisplay.from_estimator(\n+        clf_diabetes,\n+        diabetes.data,\n+        [0, 1],\n+        kind=\"average\",\n+        method=\"brute\",\n+    )\n+\n+    sample_weight = np.ones_like(diabetes.target)\n+    disp_sw = PartialDependenceDisplay.from_estimator(\n+        clf_diabetes,\n+        diabetes.data,\n+        [0, 1],\n+        sample_weight=sample_weight,\n+        kind=\"average\",\n+        method=\"brute\",\n+    )\n+\n+    assert np.array_equal(\n+        disp.pd_results[0][\"average\"], disp_sw.pd_results[0][\"average\"]\n+    )\n",
  "problem_statement": "partial_dependence should respect sample weights\n### Describe the workflow you want to enable\n\nCurrently, the inspect.partial_dependence funtions calculate arithmetic averages over predictions. For models fitted with sample weights, this is between suboptimal and wrong.\n\n### Describe your proposed solution\n\nAdd new argument \"sample_weight = None\". If vector of right length, replace arithmetic average of predictions by weighted averages.\r\n\r\nNote that this does not affect the calculation of ICE curves, just the aggregate.\n\n### Describe alternatives you've considered, if relevant\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "@mayer79, have you already started working on this issue? I would love to solve it if you didn't. :)\n@vitaliset Not yet started! I would be super happy if you could dig into this. \r\n\r\nI think there are two ways to calculate PDPs. For the model agnostic logic, we would probably need to replace `np.mean()` by `np.average()`. There is a second (fast exact) way for trees based on Friedman's algorithm. Here, I am not sure if the change is straightforward, but in the worst case we would just say \"The fast exact PDP for trees does not support case weights\".\nThanks for giving me the direction I should follow, @mayer79! ;) I took a look at it during the last few days, and here is what I found:\r\n\r\n___\r\n\r\n## `method='brute'`\r\n\r\n`np.average` does look like the right call here. From a quick and dirty change on the source code, it seems to be doing the trick!\r\n\r\nFor designing tests, I came up with something like:\r\n- Using `load_iris` and a few models, assert that the average for `sample_weight=[1, 0, ..., 0]` is equal to the ICE for the first example;\r\n- Using `load_iris` and a few models, assert that the average for `sample_weight=[1, 1, 0, ..., 0]` is equal to the average with `sample_weight=None` for the first two examples...\r\n\r\nDo you see any other tests that I should add?\r\n\r\n___\r\n\r\n## `method='recursion'`\r\n\r\nFor the `method='recursion'` (fast PDP for trees), the algorithm is harder to understand, but I found [this blog post](https://nicolas-hug.com/blog/pdps) from @NicolasHug that made going through the source code a lot easier to digest (thanks Nicolas!).\r\n\r\nFrom what I understand from the code, **it does not look at the given `X`** for this method. It only uses `X` to create the grid values it will explore.\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/c1cfc4d4f36f9c00413e20d0ef85bed208a502ca/sklearn/inspection/_partial_dependence.py#L523-L528\r\n\r\nNote that `grid` is just the grid of values we will iterate over for the PDP calculations: \r\n```python\r\nimport numpy as np\r\nfrom sklearn import __version__ as v\r\nprint(\"numpy:\", np.__version__, \". sklearn:\", v)\r\n>>> numpy: 1.23.3 . sklearn: 1.1.3\r\n\r\nfrom sklearn.inspection._partial_dependence import _grid_from_X\r\nfrom sklearn.utils import _safe_indexing\r\nfrom sklearn.datasets import load_diabetes\r\nX, _ = load_diabetes(return_X_y=True)\r\n\r\ngrid, values = \\\r\n_grid_from_X(X=_safe_indexing(X, [2, 8], axis=1), percentiles=(0,1), grid_resolution=100)\r\n\r\nprint(\"original shape of X:\", X.shape, \"shape of grid:\", grid.shape)\r\n>>> original shape of X:  (442, 10) shape of grid:  (10000, 2)\r\n\r\nprint(len(values), values[0].shape)\r\n>>> 2 (100,)\r\n\r\nfrom itertools import product\r\nprint((grid == np.array(list(product(values[0], values[1])))).all())\r\n>>> True\r\n```\r\n\r\nThe `grid` variable is not `X` with repeated rows (for each value of the grid) like we would expect for `method='brute'`. Inside the `_partial_dependence_brute` function we actually do this later:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/c1cfc4d4f36f9c00413e20d0ef85bed208a502ca/sklearn/inspection/_partial_dependence.py#L160-L163\r\n\r\nThis `grid` variable is what is being passed on the PDP calculations, not `X`:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/c1cfc4d4f36f9c00413e20d0ef85bed208a502ca/sklearn/inspection/_partial_dependence.py#L119-L120\r\n\r\nWhen looking for the average for a specific value in the grid, it does one run on the tree and checks the proportion of samples (from the **training data**) that pass through each leaf when we have a split (when the feature of the split is not the feature we are making the dependence plot of).\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/9268eea91f143f4f5619f7671fdabf3ecb9adf1a/sklearn/tree/_tree.pyx#L1225-L1227\r\n\r\nNote that `weighted_n_node_samples` is an attribute from the tree.\r\n\r\n___\r\n\r\n## `method='recursion'` uses the `sample_weight` from training data... but not always\r\n\r\nNonetheless, I found something \"odd\". There are two slightly different implementations of the `compute_partial_dependence` function on scikit-learnâ€”one for the models based on the CART implementation and one for the estimators of the HistGradientBoosting. The algorithms based on the CART implementation use the `sample_weight` of the `.fit` method through the `weighted_n_node_samples` attribute (code above).\r\n\r\nWhile the estimators of HistGradientBoosting doesn't. It just counts the number of samples on the leaf (even if it was fitted with `sample_weight`).\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/ff6f880755d12a380dbdac99f6b9d169aee8b588/sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx#L190-L192\r\n\r\nYou can see that looks right from this small code I ran:\r\n```python\r\nimport numpy as np\r\nfrom sklearn import __version__ as v\r\nprint(\"numpy:\", np.__version__, \". sklearn:\", v)\r\n>>> numpy: 1.23.3 . sklearn: 1.1.3\r\n\r\nfrom sklearn.datasets import load_diabetes\r\nX, y = load_diabetes(return_X_y=True)\r\nsample_weights = np.random.RandomState(42).uniform(0, 1, size=X.shape[0])\r\n\r\nfrom sklearn.tree import DecisionTreeRegressor\r\ndtr_nsw = DecisionTreeRegressor(max_depth=1, random_state=42).fit(X, y)\r\ndtr_sw  = DecisionTreeRegressor(max_depth=1, random_state=42).fit(X, y, sample_weight=sample_weights)\r\n\r\nprint(dtr_nsw.tree_.weighted_n_node_samples, dtr_sw.tree_.weighted_n_node_samples)\r\n>>> [442. 218. 224.] [218.28015122 108.90401865 109.37613257]\r\n\r\nfrom sklearn.ensemble import RandomForestRegressor\r\nrfr_nsw = RandomForestRegressor(max_depth=1, random_state=42).fit(X, y)\r\nrfr_sw  = RandomForestRegressor(max_depth=1, random_state=42).fit(X, y, sample_weight=sample_weights)\r\n\r\nprint(rfr_nsw.estimators_[0].tree_.weighted_n_node_samples, rfr_sw.estimators_[0].tree_.weighted_n_node_samples)\r\n>>> [442. 288. 154.] [226.79228463 148.44294465  78.34933998]\r\n\r\nfrom sklearn.ensemble import HistGradientBoostingRegressor\r\nhgbr_nsw = HistGradientBoostingRegressor(max_depth=2, random_state=42).fit(X, y)\r\nhgbr_sw  = HistGradientBoostingRegressor(max_depth=2, random_state=42).fit(X, y, sample_weight=sample_weights)\r\n\r\nimport pandas as pd\r\npd.DataFrame(hgbr_nsw._predictors[0][0].nodes)\r\n```\r\n![Imagem 14-12-2022 Ã s 18 23](https://user-images.githubusercontent.com/55899543/207718358-0de78ffa-ded0-4f45-9e9d-142a03905e2a.jpeg)\r\n```\r\npd.DataFrame(hgbr_sw._predictors[0][0].nodes)\r\n```\r\n![Imagem 14-12-2022 Ã s 18 28](https://user-images.githubusercontent.com/55899543/207718727-5304ece8-bf39-418d-804a-70fd95ea5d25.jpeg)\r\n\r\nThe `weighted_n_node_samples` attribute takes weighting in count (as it is a `float`) while the `.count` from predictors looks only at the number of samples at each node (as it is an `int`).\r\n\r\n___\r\n\r\n## Takeaways\r\n\r\n- The `method='brute'` should be straightforward, and I'll create a PR for it soon. I'm still determining the tests, but I can add extra ones during review time.\r\n- Because it explicitly doesn't use the `X` for the PDP calculations when we have `method='recursion'`, I don't think it makes sense to try to implement `sample_weight` on it, and I'll create an error for it.\r\n- Nonetheless, we can discuss the mismatch between calculating the PDP with training `sample_weight` or not that we see using different models and make it uniform across algorithms if we think this is relevant. It doesn't look like a big priority, but knowing we have this problem is nice. I don't think it should be that hard to keep track of the weighted samples on the `nodes` attribute.\nFantastic research! \r\n\r\nAdditional possible tests for \"brute\": PDP unweighted is the same as PDP with all weights 1.0. Same for all weights 2.0.\r\n\r\nMy feeling is : the \"recurse\" approach for trees should respect sample weights of the training data when tracking split weights. I cannot explain why the two tree-methods are different. Should we open an issue for clarification? \n> The algorithms based on the CART implementation use the sample_weight of the .fit method through the weighted_n_node_samples attribute (code above).\r\n> While the estimators of HistGradientBoosting doesn't.\r\n\r\nThat's correct - this is something that is explicitly not supported in the HGBDT trees yet:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/205f3b76ef8500c90c346c6c6fb6f4e589368278/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py#L1142-L1148\r\n\r\n(See https://github.com/scikit-learn/scikit-learn/pull/14696#issuecomment-548295813 for historical decision / context)\r\n\r\nI thought there was an open issue for that, but it looks like there isn't. Feel free to open one! ",
  "created_at": "2023-06-21T04:24:21Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_with_constant_sample_weight\"]",
  "PASS_TO_PASS": "[\"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence[10]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence[20]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[average-False-None-shape0]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-False-None-shape1]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-False-None-shape2]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-False-20-shape3]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-False-20-shape4]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-False-0.5-shape5]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-False-0.5-shape6]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[average-True-None-shape7]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-True-None-shape8]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-True-None-shape9]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-True-20-shape10]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-True-20-shape11]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-None]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-list]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-list]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-list]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-array]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-array]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-array]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-series]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-series]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-series]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-index]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-index]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-index]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_custom_axes\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_passing_numpy_axes[average-1]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_passing_numpy_axes[individual-50]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_passing_numpy_axes[both-51]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_incorrent_num_axes[2-2]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_incorrent_num_axes[3-1]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_same_axes\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_feature_name_reuse\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multioutput[0]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multioutput[1]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_dataframe\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data0-params0-target\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data1-params1-target\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data2-params2-target\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data3-params3-Feature\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data4-params4-Feature\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data5-params5-Each\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data6-params6-Each\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data7-params7-Each\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data8-params8-All\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data9-params9-feature_names\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data10-params10-When\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data11-params11-When\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data12-params12-When\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data13-params13-Expected\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data14-params14-Two-way\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data15-params15-It\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass_error[params0-target\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass_error[params1-target\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass_error[params2-Each\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_does_not_override_ylabel\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_categorical[categorical_features0-dataframe]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_categorical[categorical_features1-array]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_categorical[categorical_features2-array]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_legend\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_subsampling[average-expected_shape0]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_subsampling[individual-expected_shape1]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_subsampling[both-expected_shape2]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[individual-line_kw0-None]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[individual-line_kw1-None]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[average-line_kw2-None]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[average-line_kw3-xxx]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[both-line_kw4-average]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[both-line_kw5-xxx]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_grid_resolution_with_categorical[categorical_features0-dataframe]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_grid_resolution_with_categorical[categorical_features1-array]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_grid_resolution_with_categorical[categorical_features2-array]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[True-individual]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[True-average]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[True-both]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[False-individual]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[False-average]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[False-both]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_two_way[True]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_two_way[False]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_list\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features0-individual]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features1-both]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features2-individual]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features3-both]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features4-kind4]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features5-kind5]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw0-pd_line_kw0-ice_lines_kw0-expected_colors0]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[None-pd_line_kw1-ice_lines_kw1-expected_colors1]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw2-None-ice_lines_kw2-expected_colors2]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw3-pd_line_kw3-None-expected_colors3]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw4-None-None-expected_colors4]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw5-pd_line_kw5-ice_lines_kw5-expected_colors5]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_wrong_len_kind\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[individual]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[both]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[average]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[kind3]\", \"sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[kind4]\"]",
  "environment_setup_commit": "33a1f1690e7a7007633f59b6bee32017f4229864",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.026463",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}