{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-8929",
  "base_commit": "f40e9ffd766bb434a0181dd9db3886115d2dfb2f",
  "patch": "diff --git a/pylint/interfaces.py b/pylint/interfaces.py\n--- a/pylint/interfaces.py\n+++ b/pylint/interfaces.py\n@@ -35,3 +35,4 @@ class Confidence(NamedTuple):\n \n CONFIDENCE_LEVELS = [HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED]\n CONFIDENCE_LEVEL_NAMES = [i.name for i in CONFIDENCE_LEVELS]\n+CONFIDENCE_MAP = {i.name: i for i in CONFIDENCE_LEVELS}\ndiff --git a/pylint/lint/base_options.py b/pylint/lint/base_options.py\n--- a/pylint/lint/base_options.py\n+++ b/pylint/lint/base_options.py\n@@ -102,9 +102,10 @@ def _make_linter_options(linter: PyLinter) -> Options:\n                 \"metavar\": \"<format>\",\n                 \"short\": \"f\",\n                 \"group\": \"Reports\",\n-                \"help\": \"Set the output format. Available formats are text,\"\n-                \" parseable, colorized, json and msvs (visual studio).\"\n-                \" You can also give a reporter class, e.g. mypackage.mymodule.\"\n+                \"help\": \"Set the output format. Available formats are: text, \"\n+                \"parseable, colorized, json2 (improved json format), json \"\n+                \"(old json format) and msvs (visual studio). \"\n+                \"You can also give a reporter class, e.g. mypackage.mymodule.\"\n                 \"MyReporterClass.\",\n                 \"kwargs\": {\"linter\": linter},\n             },\ndiff --git a/pylint/reporters/__init__.py b/pylint/reporters/__init__.py\n--- a/pylint/reporters/__init__.py\n+++ b/pylint/reporters/__init__.py\n@@ -11,7 +11,7 @@\n from pylint import utils\n from pylint.reporters.base_reporter import BaseReporter\n from pylint.reporters.collecting_reporter import CollectingReporter\n-from pylint.reporters.json_reporter import JSONReporter\n+from pylint.reporters.json_reporter import JSON2Reporter, JSONReporter\n from pylint.reporters.multi_reporter import MultiReporter\n from pylint.reporters.reports_handler_mix_in import ReportsHandlerMixIn\n \n@@ -28,6 +28,7 @@ def initialize(linter: PyLinter) -> None:\n     \"BaseReporter\",\n     \"ReportsHandlerMixIn\",\n     \"JSONReporter\",\n+    \"JSON2Reporter\",\n     \"CollectingReporter\",\n     \"MultiReporter\",\n ]\ndiff --git a/pylint/reporters/json_reporter.py b/pylint/reporters/json_reporter.py\n--- a/pylint/reporters/json_reporter.py\n+++ b/pylint/reporters/json_reporter.py\n@@ -9,7 +9,7 @@\n import json\n from typing import TYPE_CHECKING, Optional, TypedDict\n \n-from pylint.interfaces import UNDEFINED\n+from pylint.interfaces import CONFIDENCE_MAP, UNDEFINED\n from pylint.message import Message\n from pylint.reporters.base_reporter import BaseReporter\n from pylint.typing import MessageLocationTuple\n@@ -37,8 +37,12 @@\n )\n \n \n-class BaseJSONReporter(BaseReporter):\n-    \"\"\"Report messages and layouts in JSON.\"\"\"\n+class JSONReporter(BaseReporter):\n+    \"\"\"Report messages and layouts in JSON.\n+\n+    Consider using JSON2Reporter instead, as it is superior and this reporter\n+    is no longer maintained.\n+    \"\"\"\n \n     name = \"json\"\n     extension = \"json\"\n@@ -54,25 +58,6 @@ def display_reports(self, layout: Section) -> None:\n     def _display(self, layout: Section) -> None:\n         \"\"\"Do nothing.\"\"\"\n \n-    @staticmethod\n-    def serialize(message: Message) -> OldJsonExport:\n-        raise NotImplementedError\n-\n-    @staticmethod\n-    def deserialize(message_as_json: OldJsonExport) -> Message:\n-        raise NotImplementedError\n-\n-\n-class JSONReporter(BaseJSONReporter):\n-\n-    \"\"\"\n-    TODO: 3.0: Remove this JSONReporter in favor of the new one handling abs-path\n-    and confidence.\n-\n-    TODO: 3.0: Add a new JSONReporter handling abs-path, confidence and scores.\n-    (Ultimately all other breaking change related to json for 3.0).\n-    \"\"\"\n-\n     @staticmethod\n     def serialize(message: Message) -> OldJsonExport:\n         return {\n@@ -96,7 +81,6 @@ def deserialize(message_as_json: OldJsonExport) -> Message:\n             symbol=message_as_json[\"symbol\"],\n             msg=message_as_json[\"message\"],\n             location=MessageLocationTuple(\n-                # TODO: 3.0: Add abs-path and confidence in a new JSONReporter\n                 abspath=message_as_json[\"path\"],\n                 path=message_as_json[\"path\"],\n                 module=message_as_json[\"module\"],\n@@ -106,10 +90,112 @@ def deserialize(message_as_json: OldJsonExport) -> Message:\n                 end_line=message_as_json[\"endLine\"],\n                 end_column=message_as_json[\"endColumn\"],\n             ),\n-            # TODO: 3.0: Make confidence available in a new JSONReporter\n             confidence=UNDEFINED,\n         )\n \n \n+class JSONMessage(TypedDict):\n+    type: str\n+    message: str\n+    messageId: str\n+    symbol: str\n+    confidence: str\n+    module: str\n+    path: str\n+    absolutePath: str\n+    line: int\n+    endLine: int | None\n+    column: int\n+    endColumn: int | None\n+    obj: str\n+\n+\n+class JSON2Reporter(BaseReporter):\n+    name = \"json2\"\n+    extension = \"json2\"\n+\n+    def display_reports(self, layout: Section) -> None:\n+        \"\"\"Don't do anything in this reporter.\"\"\"\n+\n+    def _display(self, layout: Section) -> None:\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def display_messages(self, layout: Section | None) -> None:\n+        \"\"\"Launch layouts display.\"\"\"\n+        output = {\n+            \"messages\": [self.serialize(message) for message in self.messages],\n+            \"statistics\": self.serialize_stats(),\n+        }\n+        print(json.dumps(output, indent=4), file=self.out)\n+\n+    @staticmethod\n+    def serialize(message: Message) -> JSONMessage:\n+        return JSONMessage(\n+            type=message.category,\n+            symbol=message.symbol,\n+            message=message.msg or \"\",\n+            messageId=message.msg_id,\n+            confidence=message.confidence.name,\n+            module=message.module,\n+            obj=message.obj,\n+            line=message.line,\n+            column=message.column,\n+            endLine=message.end_line,\n+            endColumn=message.end_column,\n+            path=message.path,\n+            absolutePath=message.abspath,\n+        )\n+\n+    @staticmethod\n+    def deserialize(message_as_json: JSONMessage) -> Message:\n+        return Message(\n+            msg_id=message_as_json[\"messageId\"],\n+            symbol=message_as_json[\"symbol\"],\n+            msg=message_as_json[\"message\"],\n+            location=MessageLocationTuple(\n+                abspath=message_as_json[\"absolutePath\"],\n+                path=message_as_json[\"path\"],\n+                module=message_as_json[\"module\"],\n+                obj=message_as_json[\"obj\"],\n+                line=message_as_json[\"line\"],\n+                column=message_as_json[\"column\"],\n+                end_line=message_as_json[\"endLine\"],\n+                end_column=message_as_json[\"endColumn\"],\n+            ),\n+            confidence=CONFIDENCE_MAP[message_as_json[\"confidence\"]],\n+        )\n+\n+    def serialize_stats(self) -> dict[str, str | int | dict[str, int]]:\n+        \"\"\"Serialize the linter stats into something JSON dumpable.\"\"\"\n+        stats = self.linter.stats\n+\n+        counts_dict = {\n+            \"fatal\": stats.fatal,\n+            \"error\": stats.error,\n+            \"warning\": stats.warning,\n+            \"refactor\": stats.refactor,\n+            \"convention\": stats.convention,\n+            \"info\": stats.info,\n+        }\n+\n+        # Calculate score based on the evaluation option\n+        evaluation = self.linter.config.evaluation\n+        try:\n+            note: int = eval(  # pylint: disable=eval-used\n+                evaluation, {}, {**counts_dict, \"statement\": stats.statement or 1}\n+            )\n+        except Exception as ex:  # pylint: disable=broad-except\n+            score: str | int = f\"An exception occurred while rating: {ex}\"\n+        else:\n+            score = round(note, 2)\n+\n+        return {\n+            \"messageTypeCount\": counts_dict,\n+            \"modulesLinted\": len(stats.by_module),\n+            \"score\": score,\n+        }\n+\n+\n def register(linter: PyLinter) -> None:\n     linter.register_reporter(JSONReporter)\n+    linter.register_reporter(JSON2Reporter)\ndiff --git a/pylint/testutils/_primer/primer_run_command.py b/pylint/testutils/_primer/primer_run_command.py\n--- a/pylint/testutils/_primer/primer_run_command.py\n+++ b/pylint/testutils/_primer/primer_run_command.py\n@@ -13,8 +13,7 @@\n \n from pylint.lint import Run\n from pylint.message import Message\n-from pylint.reporters import JSONReporter\n-from pylint.reporters.json_reporter import OldJsonExport\n+from pylint.reporters.json_reporter import JSONReporter, OldJsonExport\n from pylint.testutils._primer.package_to_lint import PackageToLint\n from pylint.testutils._primer.primer_command import (\n     PackageData,\n",
  "test_patch": "diff --git a/tests/reporters/unittest_json_reporter.py b/tests/reporters/unittest_json_reporter.py\n--- a/tests/reporters/unittest_json_reporter.py\n+++ b/tests/reporters/unittest_json_reporter.py\n@@ -8,15 +8,16 @@\n \n import json\n from io import StringIO\n+from pathlib import Path\n from typing import Any\n \n import pytest\n \n from pylint import checkers\n-from pylint.interfaces import UNDEFINED\n+from pylint.interfaces import HIGH, UNDEFINED\n from pylint.lint import PyLinter\n from pylint.message import Message\n-from pylint.reporters import JSONReporter\n+from pylint.reporters.json_reporter import JSON2Reporter, JSONReporter\n from pylint.reporters.ureports.nodes import EvaluationSection\n from pylint.typing import MessageLocationTuple\n \n@@ -132,6 +133,133 @@ def get_linter_result(score: bool, message: dict[str, Any]) -> list[dict[str, An\n     ],\n )\n def test_serialize_deserialize(message: Message) -> None:\n-    # TODO: 3.0: Add confidence handling, add path and abs path handling or a new JSONReporter\n     json_message = JSONReporter.serialize(message)\n     assert message == JSONReporter.deserialize(json_message)\n+\n+\n+def test_simple_json2_output() -> None:\n+    \"\"\"Test JSON2 reporter.\"\"\"\n+    message = {\n+        \"msg\": \"line-too-long\",\n+        \"line\": 1,\n+        \"args\": (1, 2),\n+        \"end_line\": 1,\n+        \"end_column\": 4,\n+    }\n+    expected = {\n+        \"messages\": [\n+            {\n+                \"type\": \"convention\",\n+                \"symbol\": \"line-too-long\",\n+                \"message\": \"Line too long (1/2)\",\n+                \"messageId\": \"C0301\",\n+                \"confidence\": \"HIGH\",\n+                \"module\": \"0123\",\n+                \"obj\": \"\",\n+                \"line\": 1,\n+                \"column\": 0,\n+                \"endLine\": 1,\n+                \"endColumn\": 4,\n+                \"path\": \"0123\",\n+                \"absolutePath\": \"0123\",\n+            }\n+        ],\n+        \"statistics\": {\n+            \"messageTypeCount\": {\n+                \"fatal\": 0,\n+                \"error\": 0,\n+                \"warning\": 0,\n+                \"refactor\": 0,\n+                \"convention\": 1,\n+                \"info\": 0,\n+            },\n+            \"modulesLinted\": 1,\n+            \"score\": 5.0,\n+        },\n+    }\n+    report = get_linter_result_for_v2(message=message)\n+    assert len(report) == 2\n+    assert json.dumps(report) == json.dumps(expected)\n+\n+\n+def get_linter_result_for_v2(message: dict[str, Any]) -> list[dict[str, Any]]:\n+    output = StringIO()\n+    reporter = JSON2Reporter(output)\n+    linter = PyLinter(reporter=reporter)\n+    checkers.initialize(linter)\n+    linter.config.persistent = 0\n+    linter.open()\n+    linter.set_current_module(\"0123\")\n+    linter.add_message(\n+        message[\"msg\"],\n+        line=message[\"line\"],\n+        args=message[\"args\"],\n+        end_lineno=message[\"end_line\"],\n+        end_col_offset=message[\"end_column\"],\n+        confidence=HIGH,\n+    )\n+    linter.stats.statement = 2\n+    reporter.display_messages(None)\n+    report_result = json.loads(output.getvalue())\n+    return report_result  # type: ignore[no-any-return]\n+\n+\n+@pytest.mark.parametrize(\n+    \"message\",\n+    [\n+        pytest.param(\n+            Message(\n+                msg_id=\"C0111\",\n+                symbol=\"missing-docstring\",\n+                location=MessageLocationTuple(\n+                    # The abspath is nonsensical, but should be serialized correctly\n+                    abspath=str(Path(__file__).parent),\n+                    path=__file__,\n+                    module=\"unittest_json_reporter\",\n+                    obj=\"obj\",\n+                    line=1,\n+                    column=3,\n+                    end_line=3,\n+                    end_column=5,\n+                ),\n+                msg=\"This is the actual message\",\n+                confidence=HIGH,\n+            ),\n+            id=\"everything-defined\",\n+        ),\n+        pytest.param(\n+            Message(\n+                msg_id=\"C0111\",\n+                symbol=\"missing-docstring\",\n+                location=MessageLocationTuple(\n+                    # The abspath is nonsensical, but should be serialized correctly\n+                    abspath=str(Path(__file__).parent),\n+                    path=__file__,\n+                    module=\"unittest_json_reporter\",\n+                    obj=\"obj\",\n+                    line=1,\n+                    column=3,\n+                    end_line=None,\n+                    end_column=None,\n+                ),\n+                msg=\"This is the actual message\",\n+                confidence=None,\n+            ),\n+            id=\"not-everything-defined\",\n+        ),\n+    ],\n+)\n+def test_serialize_deserialize_for_v2(message: Message) -> None:\n+    json_message = JSON2Reporter.serialize(message)\n+    assert message == JSON2Reporter.deserialize(json_message)\n+\n+\n+def test_json2_result_with_broken_score() -> None:\n+    \"\"\"Test that the JSON2 reporter can handle broken score evaluations.\"\"\"\n+    output = StringIO()\n+    reporter = JSON2Reporter(output)\n+    linter = PyLinter(reporter=reporter)\n+    linter.config.evaluation = \"1/0\"\n+    reporter.display_messages(None)\n+    report_result = json.loads(output.getvalue())\n+    assert \"division by zero\" in report_result[\"statistics\"][\"score\"]\ndiff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -176,10 +176,10 @@ def test_multi_format_output(tmp_path: Path) -> None:\n \n     source_file = tmp_path / \"somemodule.py\"\n     source_file.write_text('NOT_EMPTY = \"This module is not empty\"\\n')\n-    escaped_source_file = dumps(str(source_file))\n+    dumps(str(source_file))\n \n     nop_format = NopReporter.__module__ + \".\" + NopReporter.__name__\n-    formats = \",\".join([\"json:\" + str(json), \"text\", nop_format])\n+    formats = \",\".join([\"json2:\" + str(json), \"text\", nop_format])\n \n     with redirect_stdout(text):\n         linter = PyLinter()\n@@ -208,37 +208,7 @@ def test_multi_format_output(tmp_path: Path) -> None:\n         del linter.reporter\n \n     with open(json, encoding=\"utf-8\") as f:\n-        assert (\n-            f.read() == \"[\\n\"\n-            \"    {\\n\"\n-            '        \"type\": \"convention\",\\n'\n-            '        \"module\": \"somemodule\",\\n'\n-            '        \"obj\": \"\",\\n'\n-            '        \"line\": 1,\\n'\n-            '        \"column\": 0,\\n'\n-            '        \"endLine\": null,\\n'\n-            '        \"endColumn\": null,\\n'\n-            f'        \"path\": {escaped_source_file},\\n'\n-            '        \"symbol\": \"missing-module-docstring\",\\n'\n-            '        \"message\": \"Missing module docstring\",\\n'\n-            '        \"message-id\": \"C0114\"\\n'\n-            \"    },\\n\"\n-            \"    {\\n\"\n-            '        \"type\": \"convention\",\\n'\n-            '        \"module\": \"somemodule\",\\n'\n-            '        \"obj\": \"\",\\n'\n-            '        \"line\": 1,\\n'\n-            '        \"column\": 0,\\n'\n-            '        \"endLine\": null,\\n'\n-            '        \"endColumn\": null,\\n'\n-            f'        \"path\": {escaped_source_file},\\n'\n-            '        \"symbol\": \"line-too-long\",\\n'\n-            '        \"message\": \"Line too long (1/2)\",\\n'\n-            '        \"message-id\": \"C0301\"\\n'\n-            \"    }\\n\"\n-            \"]\\n\"\n-            \"direct output\\n\"\n-        )\n+        assert '\"messageId\": \"C0114\"' in f.read()\n \n     assert (\n         text.getvalue() == \"A NopReporter was initialized.\\n\"\ndiff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -31,7 +31,8 @@\n from pylint.constants import MAIN_CHECKER_NAME, MSG_TYPES_STATUS\n from pylint.lint.pylinter import PyLinter\n from pylint.message import Message\n-from pylint.reporters import BaseReporter, JSONReporter\n+from pylint.reporters import BaseReporter\n+from pylint.reporters.json_reporter import JSON2Reporter\n from pylint.reporters.text import ColorizedTextReporter, TextReporter\n from pylint.testutils._run import _add_rcfile_default_pylintrc\n from pylint.testutils._run import _Run as Run\n@@ -187,7 +188,7 @@ def test_all(self) -> None:\n         reporters = [\n             TextReporter(StringIO()),\n             ColorizedTextReporter(StringIO()),\n-            JSONReporter(StringIO()),\n+            JSON2Reporter(StringIO()),\n         ]\n         self._runtest(\n             [join(HERE, \"functional\", \"a\", \"arguments.py\")],\n@@ -347,8 +348,8 @@ def test_reject_empty_indent_strings(self) -> None:\n     def test_json_report_when_file_has_syntax_error(self) -> None:\n         out = StringIO()\n         module = join(HERE, \"regrtest_data\", \"syntax_error.py\")\n-        self._runtest([module], code=2, reporter=JSONReporter(out))\n-        output = json.loads(out.getvalue())\n+        self._runtest([module], code=2, reporter=JSON2Reporter(out))\n+        output = json.loads(out.getvalue())[\"messages\"]\n         assert isinstance(output, list)\n         assert len(output) == 1\n         assert isinstance(output[0], dict)\n@@ -372,8 +373,8 @@ def test_json_report_when_file_has_syntax_error(self) -> None:\n     def test_json_report_when_file_is_missing(self) -> None:\n         out = StringIO()\n         module = join(HERE, \"regrtest_data\", \"totally_missing.py\")\n-        self._runtest([module], code=1, reporter=JSONReporter(out))\n-        output = json.loads(out.getvalue())\n+        self._runtest([module], code=1, reporter=JSON2Reporter(out))\n+        output = json.loads(out.getvalue())[\"messages\"]\n         assert isinstance(output, list)\n         assert len(output) == 1\n         assert isinstance(output[0], dict)\n@@ -394,8 +395,8 @@ def test_json_report_when_file_is_missing(self) -> None:\n     def test_json_report_does_not_escape_quotes(self) -> None:\n         out = StringIO()\n         module = join(HERE, \"regrtest_data\", \"unused_variable.py\")\n-        self._runtest([module], code=4, reporter=JSONReporter(out))\n-        output = json.loads(out.getvalue())\n+        self._runtest([module], code=4, reporter=JSON2Reporter(out))\n+        output = json.loads(out.getvalue())[\"messages\"]\n         assert isinstance(output, list)\n         assert len(output) == 1\n         assert isinstance(output[0], dict)\n@@ -404,7 +405,7 @@ def test_json_report_does_not_escape_quotes(self) -> None:\n             \"module\": \"unused_variable\",\n             \"column\": 4,\n             \"message\": \"Unused variable 'variable'\",\n-            \"message-id\": \"W0612\",\n+            \"messageId\": \"W0612\",\n             \"line\": 4,\n             \"type\": \"warning\",\n         }\n@@ -1066,6 +1067,7 @@ def test_fail_on_info_only_exit_code(self, args: list[str], expected: int) -> No\n                 ),\n             ),\n             (\"json\", '\"message\": \"Unused variable \\'variable\\'\",'),\n+            (\"json2\", '\"message\": \"Unused variable \\'variable\\'\",'),\n         ],\n     )\n     def test_output_file_can_be_combined_with_output_format_option(\n",
  "problem_statement": "Exporting to JSON does not honor score option\n<!--\r\n  Hi there! Thank you for discovering and submitting an issue.\r\n\r\n  Before you submit this, make sure that the issue doesn't already exist\r\n  or if it is not closed.\r\n\r\n  Is your issue fixed on the preview release?: pip install pylint astroid --pre -U\r\n\r\n-->\r\n\r\n### Steps to reproduce\r\n1. Run pylint on some random Python file or module:\r\n```\r\npylint  ~/Desktop/pylint_test.py\r\n```\r\nAs you can see this outputs some warnings/scoring:\r\n```\r\n************* Module pylint_test\r\n/home/administrator/Desktop/pylint_test.py:1:0: C0111: Missing module docstring (missing-docstring)\r\n/home/administrator/Desktop/pylint_test.py:1:0: W0611: Unused import requests (unused-import)\r\n\r\n------------------------------------------------------------------\r\nYour code has been rated at 0.00/10 (previous run: 0.00/10, +0.00)\r\n```\r\n2. Now run the same command but with `-f json` to export it to JSON:\r\n```\r\npylint ~/Desktop/pylint_test.py  -f json\r\n```\r\nThe output doesn't contain the scores now anymore:\r\n```\r\n[\r\n    {\r\n        \"type\": \"convention\",\r\n        \"module\": \"pylint_test\",\r\n        \"obj\": \"\",\r\n        \"line\": 1,\r\n        \"column\": 0,\r\n        \"path\": \"/home/administrator/Desktop/pylint_test.py\",\r\n        \"symbol\": \"missing-docstring\",\r\n        \"message\": \"Missing module docstring\",\r\n        \"message-id\": \"C0111\"\r\n    },\r\n    {\r\n        \"type\": \"warning\",\r\n        \"module\": \"pylint_test\",\r\n        \"obj\": \"\",\r\n        \"line\": 1,\r\n        \"column\": 0,\r\n        \"path\": \"/home/administrator/Desktop/pylint_test.py\",\r\n        \"symbol\": \"unused-import\",\r\n        \"message\": \"Unused import requests\",\r\n        \"message-id\": \"W0611\"\r\n    }\r\n]\r\n```\r\n\r\n3. Now execute it with `-f json` again but also supply the `--score=y` option:\r\n```\r\n[\r\n    {\r\n        \"type\": \"convention\",\r\n        \"module\": \"pylint_test\",\r\n        \"obj\": \"\",\r\n        \"line\": 1,\r\n        \"column\": 0,\r\n        \"path\": \"/home/administrator/Desktop/pylint_test.py\",\r\n        \"symbol\": \"missing-docstring\",\r\n        \"message\": \"Missing module docstring\",\r\n        \"message-id\": \"C0111\"\r\n    },\r\n    {\r\n        \"type\": \"warning\",\r\n        \"module\": \"pylint_test\",\r\n        \"obj\": \"\",\r\n        \"line\": 1,\r\n        \"column\": 0,\r\n        \"path\": \"/home/administrator/Desktop/pylint_test.py\",\r\n        \"symbol\": \"unused-import\",\r\n        \"message\": \"Unused import requests\",\r\n        \"message-id\": \"W0611\"\r\n    }\r\n]\r\n```\r\n\r\n### Current behavior\r\nThe score is not outputted when exporting to JSON, not even when `--score=y` is activated.\r\n\r\n### Expected behavior\r\nThe score is added to the JSON, at least when `--score=y` is activated.\r\n\r\n### pylint --version output\r\n```\r\npylint 2.3.0\r\nastroid 2.2.0\r\nPython 3.7.5 (default, Nov 20 2019, 09:21:52) \r\n[GCC 9.2.1 20191008]\r\n```\r\n\r\n\n",
  "hints_text": "Thank you for the report, I can reproduce this bug. \nI have a fix, but I think this has the potential to break countless continuous integration and annoy a lot of persons, so I'm going to wait for a review by someone else before merging.\nThe fix is not going to be merged before a major version see https://github.com/PyCQA/pylint/pull/3514#issuecomment-619834791\nAhh that's a pity that it won't come in a minor release :( Is there an estimate on when 3.0 more or less lands?\nYeah, sorry about that. I don't think there is a release date for 3.0.0 yet, @PCManticore might want to correct me though.\nShouldn't you have a branch for your next major release so things like this won't bitrot?\nI created a 3.0.0.alpha branch, where it's fixed. Will close if we release alpha version ``3.0.0a0``.\nReleased in 3.0.0a0.\n🥳 thanks a lot @Pierre-Sassoulas!\nReopening because the change was reverted in the 3.0 alpha branch. We can also simply add a new reporter for json directly in 2.x branch and deprecate the other json reporter.",
  "created_at": "2023-08-05T16:56:45Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/reporters/unittest_json_reporter.py::test_simple_json_output_no_score\", \"tests/reporters/unittest_json_reporter.py::test_simple_json_output_no_score_with_end_line\", \"tests/reporters/unittest_json_reporter.py::test_serialize_deserialize[everything-defined]\", \"tests/reporters/unittest_json_reporter.py::test_simple_json2_output\", \"tests/reporters/unittest_json_reporter.py::test_serialize_deserialize_for_v2[everything-defined]\", \"tests/reporters/unittest_json_reporter.py::test_serialize_deserialize_for_v2[not-everything-defined]\", \"tests/reporters/unittest_json_reporter.py::test_json2_result_with_broken_score\", \"tests/reporters/unittest_reporting.py::test_template_option\", \"tests/reporters/unittest_reporting.py::test_template_option_default\", \"tests/reporters/unittest_reporting.py::test_template_option_end_line\", \"tests/reporters/unittest_reporting.py::test_template_option_non_existing\", \"tests/reporters/unittest_reporting.py::test_template_option_with_header\", \"tests/reporters/unittest_reporting.py::test_parseable_output_deprecated\", \"tests/reporters/unittest_reporting.py::test_parseable_output_regression\", \"tests/reporters/unittest_reporting.py::test_multi_format_output\", \"tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages\", \"tests/reporters/unittest_reporting.py::test_display_results_is_renamed\", \"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_disable_all\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_type_annotation_names\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntax_error\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]\", \"tests/test_self.py::TestRunTC::test_one_module_fatal_error\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json2-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\", \"tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided\", \"tests/test_self.py::TestRunTC::test_regex_paths_csv_validator\", \"tests/test_self.py::TestRunTC::test_max_inferred_for_complicated_class_hierarchy\", \"tests/test_self.py::TestRunTC::test_recursive\", \"tests/test_self.py::TestRunTC::test_recursive_globbing\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]\", \"tests/test_self.py::TestRunTC::test_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding\", \"tests/test_self.py::TestRunTC::test_encoding[good.py-]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]\", \"tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression\", \"tests/test_self.py::TestRunTC::test_output_no_header\", \"tests/test_self.py::TestRunTC::test_no_name_in_module\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name\", \"tests/test_self.py::TestCallbackOptions::test_generate_rcfile\", \"tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_generate_toml_config\", \"tests/test_self.py::TestCallbackOptions::test_generate_toml_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_errors_only\", \"tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable\", \"tests/test_self.py::TestCallbackOptions::test_verbose\", \"tests/test_self.py::TestCallbackOptions::test_enable_all_extensions\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "a0ce6e424e3a208f3aed1cbf6e16c40853bec3c0",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.920320",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}