{
  "repo": "django/django",
  "instance_id": "django__django-16745",
  "base_commit": "549d6ffeb6d626b023acc40c3bb2093b4b25b3d6",
  "patch": "diff --git a/django/core/validators.py b/django/core/validators.py\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -397,8 +397,37 @@ class StepValueValidator(BaseValidator):\n     message = _(\"Ensure this value is a multiple of step size %(limit_value)s.\")\n     code = \"step_size\"\n \n+    def __init__(self, limit_value, message=None, offset=None):\n+        super().__init__(limit_value, message)\n+        if offset is not None:\n+            self.message = _(\n+                \"Ensure this value is a multiple of step size %(limit_value)s, \"\n+                \"starting from %(offset)s, e.g. %(offset)s, %(valid_value1)s, \"\n+                \"%(valid_value2)s, and so on.\"\n+            )\n+        self.offset = offset\n+\n+    def __call__(self, value):\n+        if self.offset is None:\n+            super().__call__(value)\n+        else:\n+            cleaned = self.clean(value)\n+            limit_value = (\n+                self.limit_value() if callable(self.limit_value) else self.limit_value\n+            )\n+            if self.compare(cleaned, limit_value):\n+                offset = cleaned.__class__(self.offset)\n+                params = {\n+                    \"limit_value\": limit_value,\n+                    \"offset\": offset,\n+                    \"valid_value1\": offset + limit_value,\n+                    \"valid_value2\": offset + 2 * limit_value,\n+                }\n+                raise ValidationError(self.message, code=self.code, params=params)\n+\n     def compare(self, a, b):\n-        return not math.isclose(math.remainder(a, b), 0, abs_tol=1e-9)\n+        offset = 0 if self.offset is None else self.offset\n+        return not math.isclose(math.remainder(a - offset, b), 0, abs_tol=1e-9)\n \n \n @deconstructible\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -316,7 +316,9 @@ def __init__(self, *, max_value=None, min_value=None, step_size=None, **kwargs):\n         if min_value is not None:\n             self.validators.append(validators.MinValueValidator(min_value))\n         if step_size is not None:\n-            self.validators.append(validators.StepValueValidator(step_size))\n+            self.validators.append(\n+                validators.StepValueValidator(step_size, offset=min_value)\n+            )\n \n     def to_python(self, value):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_decimalfield.py b/tests/forms_tests/field_tests/test_decimalfield.py\n--- a/tests/forms_tests/field_tests/test_decimalfield.py\n+++ b/tests/forms_tests/field_tests/test_decimalfield.py\n@@ -152,6 +152,25 @@ def test_decimalfield_6(self):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.clean(\"1.1\")\n \n+    def test_decimalfield_step_size_min_value(self):\n+        f = DecimalField(\n+            step_size=decimal.Decimal(\"0.3\"),\n+            min_value=decimal.Decimal(\"-0.4\"),\n+        )\n+        self.assertWidgetRendersTo(\n+            f,\n+            '<input name=\"f\" min=\"-0.4\" step=\"0.3\" type=\"number\" id=\"id_f\" required>',\n+        )\n+        msg = (\n+            \"Ensure this value is a multiple of step size 0.3, starting from -0.4, \"\n+            \"e.g. -0.4, -0.1, 0.2, and so on.\"\n+        )\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean(\"1\")\n+        self.assertEqual(f.clean(\"0.2\"), decimal.Decimal(\"0.2\"))\n+        self.assertEqual(f.clean(2), decimal.Decimal(2))\n+        self.assertEqual(f.step_size, decimal.Decimal(\"0.3\"))\n+\n     def test_decimalfield_scientific(self):\n         f = DecimalField(max_digits=4, decimal_places=2)\n         with self.assertRaisesMessage(ValidationError, \"Ensure that there are no more\"):\ndiff --git a/tests/forms_tests/field_tests/test_floatfield.py b/tests/forms_tests/field_tests/test_floatfield.py\n--- a/tests/forms_tests/field_tests/test_floatfield.py\n+++ b/tests/forms_tests/field_tests/test_floatfield.py\n@@ -84,6 +84,18 @@ def test_floatfield_4(self):\n         self.assertEqual(-1.26, f.clean(\"-1.26\"))\n         self.assertEqual(f.step_size, 0.02)\n \n+    def test_floatfield_step_size_min_value(self):\n+        f = FloatField(step_size=0.02, min_value=0.01)\n+        msg = (\n+            \"Ensure this value is a multiple of step size 0.02, starting from 0.01, \"\n+            \"e.g. 0.01, 0.03, 0.05, and so on.\"\n+        )\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean(\"0.02\")\n+        self.assertEqual(f.clean(\"2.33\"), 2.33)\n+        self.assertEqual(f.clean(\"0.11\"), 0.11)\n+        self.assertEqual(f.step_size, 0.02)\n+\n     def test_floatfield_widget_attrs(self):\n         f = FloatField(widget=NumberInput(attrs={\"step\": 0.01, \"max\": 1.0, \"min\": 0.0}))\n         self.assertWidgetRendersTo(\ndiff --git a/tests/forms_tests/field_tests/test_integerfield.py b/tests/forms_tests/field_tests/test_integerfield.py\n--- a/tests/forms_tests/field_tests/test_integerfield.py\n+++ b/tests/forms_tests/field_tests/test_integerfield.py\n@@ -126,6 +126,22 @@ def test_integerfield_6(self):\n         self.assertEqual(12, f.clean(\"12\"))\n         self.assertEqual(f.step_size, 3)\n \n+    def test_integerfield_step_size_min_value(self):\n+        f = IntegerField(step_size=3, min_value=-1)\n+        self.assertWidgetRendersTo(\n+            f,\n+            '<input name=\"f\" min=\"-1\" step=\"3\" type=\"number\" id=\"id_f\" required>',\n+        )\n+        msg = (\n+            \"Ensure this value is a multiple of step size 3, starting from -1, e.g. \"\n+            \"-1, 2, 5, and so on.\"\n+        )\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean(\"9\")\n+        self.assertEqual(f.clean(\"2\"), 2)\n+        self.assertEqual(f.clean(\"-1\"), -1)\n+        self.assertEqual(f.step_size, 3)\n+\n     def test_integerfield_localized(self):\n         \"\"\"\n         A localized IntegerField's widget renders to a text input without any\ndiff --git a/tests/validators/tests.py b/tests/validators/tests.py\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -451,11 +451,39 @@\n     (StepValueValidator(3), 1, ValidationError),\n     (StepValueValidator(3), 8, ValidationError),\n     (StepValueValidator(3), 9, None),\n+    (StepValueValidator(2), 4, None),\n+    (StepValueValidator(2, offset=1), 3, None),\n+    (StepValueValidator(2, offset=1), 4, ValidationError),\n     (StepValueValidator(0.001), 0.55, None),\n     (StepValueValidator(0.001), 0.5555, ValidationError),\n+    (StepValueValidator(0.001, offset=0.0005), 0.5555, None),\n+    (StepValueValidator(0.001, offset=0.0005), 0.555, ValidationError),\n     (StepValueValidator(Decimal(0.02)), 0.88, None),\n     (StepValueValidator(Decimal(0.02)), Decimal(0.88), None),\n     (StepValueValidator(Decimal(0.02)), Decimal(0.77), ValidationError),\n+    (StepValueValidator(Decimal(0.02), offset=Decimal(0.01)), Decimal(0.77), None),\n+    (StepValueValidator(Decimal(2.0), offset=Decimal(0.1)), Decimal(0.1), None),\n+    (\n+        StepValueValidator(Decimal(0.02), offset=Decimal(0.01)),\n+        Decimal(0.88),\n+        ValidationError,\n+    ),\n+    (StepValueValidator(Decimal(\"1.2\"), offset=Decimal(\"2.2\")), Decimal(\"3.4\"), None),\n+    (\n+        StepValueValidator(Decimal(\"1.2\"), offset=Decimal(\"2.2\")),\n+        Decimal(\"1.2\"),\n+        ValidationError,\n+    ),\n+    (\n+        StepValueValidator(Decimal(\"-1.2\"), offset=Decimal(\"2.2\")),\n+        Decimal(\"1.1\"),\n+        ValidationError,\n+    ),\n+    (\n+        StepValueValidator(Decimal(\"-1.2\"), offset=Decimal(\"2.2\")),\n+        Decimal(\"1.0\"),\n+        None,\n+    ),\n     (URLValidator(EXTENDED_SCHEMES), \"file://localhost/path\", None),\n     (URLValidator(EXTENDED_SCHEMES), \"git://example.com/\", None),\n     (\n",
  "problem_statement": "StepValueValidator does not take into account min_value\nDescription\n\t\nIf you define a number input with <input type=\"number\" min=1 step=2>, client side this will only allow positive odd numbers. \nWe could generate the same input in a Django form with IntegerField(min_value=1, step_size=2) and Field.localize is False, which would then use MinValueValidator and StepValueValidator.\nWe then get into a problem as StepValueValidator always uses 0 as the base, so step_size=2 only even numbers are allowed. This then conflicts with the client side validation, and the user cannot submit any value for the input.\nI'm unsure if this is a bug or whether this is just a configuration problem, apologies if so, but the behaviour does seem to me to conflict with how min and step is handled by browsers.\n",
  "hints_text": "Thanks for the report! As far as I'm aware we should pass min_value to the StepValueValidator. Bug in 3a82b5f655446f0ca89e3b6a92b100aa458f348f.\nThanks for the report. I think this is a bug. We need to consider min value also with step_size",
  "created_at": "2023-04-09T09:19:48Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_basic_equality (validators.tests.TestValidatorEquality.test_basic_equality)\", \"test_decimal_equality (validators.tests.TestValidatorEquality.test_decimal_equality)\", \"test_email_equality (validators.tests.TestValidatorEquality.test_email_equality)\", \"test_file_extension_equality (validators.tests.TestValidatorEquality.test_file_extension_equality)\", \"test_prohibit_null_characters_validator_equality (validators.tests.TestValidatorEquality.test_prohibit_null_characters_validator_equality)\", \"test_regex_equality (validators.tests.TestValidatorEquality.test_regex_equality)\", \"test_regex_equality_blank (validators.tests.TestValidatorEquality.test_regex_equality_blank)\", \"test_regex_equality_nocache (validators.tests.TestValidatorEquality.test_regex_equality_nocache)\", \"test_integerfield_1 (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_1)\", \"test_integerfield_2 (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_2)\", \"test_integerfield_3 (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_3)\", \"test_integerfield_4 (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_4)\", \"test_integerfield_5 (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_5)\", \"test_integerfield_6 (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_6)\", \"test_integerfield_big_num (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_big_num)\", \"test_integerfield_float (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_float)\", \"A localized IntegerField's widget renders to a text input without any\", \"test_integerfield_step_size_min_value (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_step_size_min_value)\", \"Class-defined widget is not overwritten by __init__() (#22245).\", \"test_integerfield_unicode_number (forms_tests.field_tests.test_integerfield.IntegerFieldTest.test_integerfield_unicode_number)\", \"test_floatfield_1 (forms_tests.field_tests.test_floatfield.FloatFieldTest.test_floatfield_1)\", \"test_floatfield_2 (forms_tests.field_tests.test_floatfield.FloatFieldTest.test_floatfield_2)\", \"test_floatfield_3 (forms_tests.field_tests.test_floatfield.FloatFieldTest.test_floatfield_3)\", \"test_floatfield_4 (forms_tests.field_tests.test_floatfield.FloatFieldTest.test_floatfield_4)\", \"test_floatfield_changed (forms_tests.field_tests.test_floatfield.FloatFieldTest.test_floatfield_changed)\", \"A localized FloatField's widget renders to a text input without any\", \"test_floatfield_step_size_min_value (forms_tests.field_tests.test_floatfield.FloatFieldTest.test_floatfield_step_size_min_value)\", \"test_floatfield_support_decimal_separator (forms_tests.field_tests.test_floatfield.FloatFieldTest.test_floatfield_support_decimal_separator)\", \"test_floatfield_support_thousands_separator (forms_tests.field_tests.test_floatfield.FloatFieldTest.test_floatfield_support_thousands_separator)\", \"test_floatfield_widget_attrs (forms_tests.field_tests.test_floatfield.FloatFieldTest.test_floatfield_widget_attrs)\", \"test_decimalfield_1 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_1)\", \"test_decimalfield_2 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_2)\", \"test_decimalfield_3 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_3)\", \"test_decimalfield_4 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_4)\", \"test_decimalfield_5 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_5)\", \"test_decimalfield_6 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_6)\", \"test_decimalfield_changed (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_changed)\", \"A localized DecimalField's widget renders to a text input without\", \"test_decimalfield_scientific (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_scientific)\", \"test_decimalfield_step_size_min_value (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_step_size_min_value)\", \"test_decimalfield_support_decimal_separator (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_support_decimal_separator)\", \"test_decimalfield_support_thousands_separator (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_support_thousands_separator)\", \"test_decimalfield_widget_attrs (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_decimalfield_widget_attrs)\", \"test_enter_a_number_error (forms_tests.field_tests.test_decimalfield.DecimalFieldTest.test_enter_a_number_error)\", \"test_max_length_validator_message (validators.tests.TestValidators.test_max_length_validator_message)\", \"test_message_dict (validators.tests.TestValidators.test_message_dict)\", \"test_message_list (validators.tests.TestValidators.test_message_list)\", \"test_regex_validator_flags (validators.tests.TestValidators.test_regex_validator_flags)\", \"test_single_message (validators.tests.TestValidators.test_single_message)\", \"test_validators (validators.tests.TestValidators.test_validators)\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.769583",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}