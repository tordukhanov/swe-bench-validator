{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-14295",
  "base_commit": "15cc8f20a4f94ab1910bc865f40ec69d02a7c56c",
  "patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -534,6 +534,8 @@ def __init__(\n \n             det2im = self._read_det2im_kw(header, fobj, err=minerr)\n             cpdis = self._read_distortion_kw(header, fobj, dist=\"CPDIS\", err=minerr)\n+            self._fix_pre2012_scamp_tpv(header)\n+\n             sip = self._read_sip_kw(header, wcskey=key)\n             self._remove_sip_kw(header)\n \n@@ -714,12 +716,28 @@ def _fix_scamp(self):\n         SIP distortion parameters.\n \n         See https://github.com/astropy/astropy/issues/299.\n+\n+        SCAMP uses TAN projection exclusively. The case of CTYPE ending\n+        in -TAN should have been handled by ``_fix_pre2012_scamp_tpv()`` before\n+        calling this function.\n         \"\"\"\n-        # Nothing to be done if no WCS attached\n         if self.wcs is None:\n             return\n \n-        # Nothing to be done if no PV parameters attached\n+        # Delete SIP if CTYPE explicitly has '-TPV' code:\n+        ctype = [ct.strip().upper() for ct in self.wcs.ctype]\n+        if sum(ct.endswith(\"-TPV\") for ct in ctype) == 2:\n+            if self.sip is not None:\n+                self.sip = None\n+                warnings.warn(\n+                    \"Removed redundant SIP distortion parameters \"\n+                    + \"because CTYPE explicitly specifies TPV distortions\",\n+                    FITSFixedWarning,\n+                )\n+            return\n+\n+        # Nothing to be done if no PV parameters attached since SCAMP\n+        # encodes distortion coefficients using PV keywords\n         pv = self.wcs.get_pv()\n         if not pv:\n             return\n@@ -728,28 +746,28 @@ def _fix_scamp(self):\n         if self.sip is None:\n             return\n \n-        # Nothing to be done if any radial terms are present...\n-        # Loop over list to find any radial terms.\n-        # Certain values of the `j' index are used for storing\n-        # radial terms; refer to Equation (1) in\n-        # <http://web.ipac.caltech.edu/staff/shupe/reprints/SIP_to_PV_SPIE2012.pdf>.\n-        pv = np.asarray(pv)\n         # Loop over distinct values of `i' index\n-        for i in set(pv[:, 0]):\n+        has_scamp = False\n+        for i in {v[0] for v in pv}:\n             # Get all values of `j' index for this value of `i' index\n-            js = set(pv[:, 1][pv[:, 0] == i])\n-            # Find max value of `j' index\n-            max_j = max(js)\n-            for j in (3, 11, 23, 39):\n-                if j < max_j and j in js:\n-                    return\n-\n-        self.wcs.set_pv([])\n-        warnings.warn(\n-            \"Removed redundant SCAMP distortion parameters \"\n-            + \"because SIP parameters are also present\",\n-            FITSFixedWarning,\n-        )\n+            js = tuple(v[1] for v in pv if v[0] == i)\n+            if \"-TAN\" in self.wcs.ctype[i - 1].upper() and js and max(js) >= 5:\n+                # TAN projection *may* use PVi_j with j up to 4 - see\n+                # Sections 2.5, 2.6, and Table 13\n+                # in https://doi.org/10.1051/0004-6361:20021327\n+                has_scamp = True\n+                break\n+\n+        if has_scamp and all(ct.endswith(\"-SIP\") for ct in ctype):\n+            # Prefer SIP - see recommendations in Section 7 in\n+            # http://web.ipac.caltech.edu/staff/shupe/reprints/SIP_to_PV_SPIE2012.pdf\n+            self.wcs.set_pv([])\n+            warnings.warn(\n+                \"Removed redundant SCAMP distortion parameters \"\n+                + \"because SIP parameters are also present\",\n+                FITSFixedWarning,\n+            )\n+            return\n \n     def fix(self, translate_units=\"\", naxis=None):\n         \"\"\"\n@@ -1175,7 +1193,64 @@ def write_dist(num, cpdis):\n         write_dist(1, self.cpdis1)\n         write_dist(2, self.cpdis2)\n \n-    def _remove_sip_kw(self, header):\n+    def _fix_pre2012_scamp_tpv(self, header, wcskey=\"\"):\n+        \"\"\"\n+        Replace -TAN with TPV (for pre-2012 SCAMP headers that use -TAN\n+        in CTYPE). Ignore SIP if present. This follows recommendations in\n+        Section 7 in\n+        http://web.ipac.caltech.edu/staff/shupe/reprints/SIP_to_PV_SPIE2012.pdf.\n+\n+        This is to deal with pre-2012 headers that may contain TPV with a\n+        CTYPE that ends in '-TAN' (post-2012 they should end in '-TPV' when\n+        SCAMP has adopted the new TPV convention).\n+        \"\"\"\n+        if isinstance(header, (str, bytes)):\n+            return\n+\n+        wcskey = wcskey.strip().upper()\n+        cntype = [\n+            (nax, header.get(f\"CTYPE{nax}{wcskey}\", \"\").strip())\n+            for nax in range(1, self.naxis + 1)\n+        ]\n+\n+        tan_axes = [ct[0] for ct in cntype if ct[1].endswith(\"-TAN\")]\n+\n+        if len(tan_axes) == 2:\n+            # check if PVi_j with j >= 5 is present and if so, do not load SIP\n+            tan_to_tpv = False\n+            for nax in tan_axes:\n+                js = []\n+                for p in header[f\"PV{nax}_*{wcskey}\"].keys():\n+                    prefix = f\"PV{nax}_\"\n+                    if p.startswith(prefix):\n+                        p = p[len(prefix) :]\n+                        p = p.rstrip(wcskey)\n+                        try:\n+                            p = int(p)\n+                        except ValueError:\n+                            continue\n+                        js.append(p)\n+\n+                if js and max(js) >= 5:\n+                    tan_to_tpv = True\n+                    break\n+\n+            if tan_to_tpv:\n+                warnings.warn(\n+                    \"Removed redundant SIP distortion parameters \"\n+                    + \"because SCAMP' PV distortions are also present\",\n+                    FITSFixedWarning,\n+                )\n+                self._remove_sip_kw(header, del_order=True)\n+                for i in tan_axes:\n+                    kwd = f\"CTYPE{i:d}{wcskey}\"\n+                    if kwd in header:\n+                        header[kwd] = (\n+                            header[kwd].strip().upper().replace(\"-TAN\", \"-TPV\")\n+                        )\n+\n+    @staticmethod\n+    def _remove_sip_kw(header, del_order=False):\n         \"\"\"\n         Remove SIP information from a header.\n         \"\"\"\n@@ -1186,6 +1261,11 @@ def _remove_sip_kw(self, header):\n         }:\n             del header[key]\n \n+        if del_order:\n+            for kwd in [\"A_ORDER\", \"B_ORDER\", \"AP_ORDER\", \"BP_ORDER\"]:\n+                if kwd in header:\n+                    del header[kwd]\n+\n     def _read_sip_kw(self, header, wcskey=\"\"):\n         \"\"\"\n         Reads `SIP`_ header keywords and returns a `~astropy.wcs.Sip`\n",
  "test_patch": "diff --git a/astropy/wcs/tests/test_wcs.py b/astropy/wcs/tests/test_wcs.py\n--- a/astropy/wcs/tests/test_wcs.py\n+++ b/astropy/wcs/tests/test_wcs.py\n@@ -785,11 +785,16 @@ def test_validate_faulty_wcs():\n def test_error_message():\n     header = get_pkg_data_contents(\"data/invalid_header.hdr\", encoding=\"binary\")\n \n+    # make WCS transformation invalid\n+    hdr = fits.Header.fromstring(header)\n+    del hdr[\"PV?_*\"]\n+    hdr[\"PV1_1\"] = 110\n+    hdr[\"PV1_2\"] = 110\n+    hdr[\"PV2_1\"] = -110\n+    hdr[\"PV2_2\"] = -110\n     with pytest.raises(wcs.InvalidTransformError):\n-        # Both lines are in here, because 0.4 calls .set within WCS.__init__,\n-        # whereas 0.3 and earlier did not.\n         with pytest.warns(wcs.FITSFixedWarning):\n-            w = wcs.WCS(header, _do_set=False)\n+            w = wcs.WCS(hdr, _do_set=False)\n             w.all_pix2world([[536.0, 894.0]], 0)\n \n \n@@ -989,6 +994,106 @@ def test_sip_tpv_agreement():\n         )\n \n \n+def test_tpv_ctype_sip():\n+    sip_header = fits.Header.fromstring(\n+        get_pkg_data_contents(os.path.join(\"data\", \"siponly.hdr\"), encoding=\"binary\")\n+    )\n+    tpv_header = fits.Header.fromstring(\n+        get_pkg_data_contents(os.path.join(\"data\", \"tpvonly.hdr\"), encoding=\"binary\")\n+    )\n+    sip_header.update(tpv_header)\n+    sip_header[\"CTYPE1\"] = \"RA---TAN-SIP\"\n+    sip_header[\"CTYPE2\"] = \"DEC--TAN-SIP\"\n+\n+    with pytest.warns(\n+        wcs.FITSFixedWarning,\n+        match=\"Removed redundant SCAMP distortion parameters \"\n+        \"because SIP parameters are also present\",\n+    ):\n+        w_sip = wcs.WCS(sip_header)\n+\n+    assert w_sip.sip is not None\n+\n+\n+def test_tpv_ctype_tpv():\n+    sip_header = fits.Header.fromstring(\n+        get_pkg_data_contents(os.path.join(\"data\", \"siponly.hdr\"), encoding=\"binary\")\n+    )\n+    tpv_header = fits.Header.fromstring(\n+        get_pkg_data_contents(os.path.join(\"data\", \"tpvonly.hdr\"), encoding=\"binary\")\n+    )\n+    sip_header.update(tpv_header)\n+    sip_header[\"CTYPE1\"] = \"RA---TPV\"\n+    sip_header[\"CTYPE2\"] = \"DEC--TPV\"\n+\n+    with pytest.warns(\n+        wcs.FITSFixedWarning,\n+        match=\"Removed redundant SIP distortion parameters \"\n+        \"because CTYPE explicitly specifies TPV distortions\",\n+    ):\n+        w_sip = wcs.WCS(sip_header)\n+\n+    assert w_sip.sip is None\n+\n+\n+def test_tpv_ctype_tan():\n+    sip_header = fits.Header.fromstring(\n+        get_pkg_data_contents(os.path.join(\"data\", \"siponly.hdr\"), encoding=\"binary\")\n+    )\n+    tpv_header = fits.Header.fromstring(\n+        get_pkg_data_contents(os.path.join(\"data\", \"tpvonly.hdr\"), encoding=\"binary\")\n+    )\n+    sip_header.update(tpv_header)\n+    sip_header[\"CTYPE1\"] = \"RA---TAN\"\n+    sip_header[\"CTYPE2\"] = \"DEC--TAN\"\n+\n+    with pytest.warns(\n+        wcs.FITSFixedWarning,\n+        match=\"Removed redundant SIP distortion parameters \"\n+        \"because SCAMP' PV distortions are also present\",\n+    ):\n+        w_sip = wcs.WCS(sip_header)\n+\n+    assert w_sip.sip is None\n+\n+\n+def test_car_sip_with_pv():\n+    # https://github.com/astropy/astropy/issues/14255\n+    header_dict = {\n+        \"SIMPLE\": True,\n+        \"BITPIX\": -32,\n+        \"NAXIS\": 2,\n+        \"NAXIS1\": 1024,\n+        \"NAXIS2\": 1024,\n+        \"CRPIX1\": 512.0,\n+        \"CRPIX2\": 512.0,\n+        \"CDELT1\": 0.01,\n+        \"CDELT2\": 0.01,\n+        \"CRVAL1\": 120.0,\n+        \"CRVAL2\": 29.0,\n+        \"CTYPE1\": \"RA---CAR-SIP\",\n+        \"CTYPE2\": \"DEC--CAR-SIP\",\n+        \"PV1_1\": 120.0,\n+        \"PV1_2\": 29.0,\n+        \"PV1_0\": 1.0,\n+        \"A_ORDER\": 2,\n+        \"A_2_0\": 5.0e-4,\n+        \"B_ORDER\": 2,\n+        \"B_2_0\": 5.0e-4,\n+    }\n+\n+    w = wcs.WCS(header_dict)\n+\n+    assert w.sip is not None\n+\n+    assert w.wcs.get_pv() == [(1, 1, 120.0), (1, 2, 29.0), (1, 0, 1.0)]\n+\n+    assert np.allclose(\n+        w.all_pix2world(header_dict[\"CRPIX1\"], header_dict[\"CRPIX2\"], 1),\n+        [header_dict[\"CRVAL1\"], header_dict[\"CRVAL2\"]],\n+    )\n+\n+\n @pytest.mark.skipif(\n     _wcs.__version__[0] < \"5\", reason=\"TPV only works with wcslib 5.x or later\"\n )\n",
  "problem_statement": "Presence of SIP keywords leads to ignored PV keywords.\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n<!-- Please check that the development version still produces the same bug.\r\nYou can install development version with\r\npip install git+https://github.com/astropy/astropy\r\ncommand. -->\r\n\r\n### Description\r\nI am working on updating the fits header for one of our telescopes. We wanted to represent the distortions in SIP convention and the projection to be 'CAR'.\r\nWhile working on this, I noticed if SIP coefficients are present in the header and/or '-SIP' is added to CTYPEia keywords,\r\nastropy treats the PV keywords (PV1_0, PV1_1 and PV1_2) as \"redundant SCAMP distortions\".\r\n\r\nEarlier I could not figure out why the projection weren't going as I expected, and I suspected a bug in astropy wcs. After talking to Mark Calabretta about the difficulties I'm facing, that suspicion only grew stronger. The header was working as expected with WCSLIB but was giving unexpected behavior in astropy wcs.\r\n\r\nThe following would be one example header - \r\n```\r\nheader_dict = {\r\n'SIMPLE'  : True, \r\n'BITPIX'  : -32, \r\n'NAXIS'   :  2,\r\n'NAXIS1'  : 1024,\r\n'NAXIS2'  : 1024,\r\n'CRPIX1'  : 512.0,\r\n'CRPIX2'  : 512.0,\r\n'CDELT1'  : 0.01,\r\n'CDELT2'  : 0.01,\r\n'CRVAL1'  : 120.0,\r\n'CRVAL2'  : 29.0,\r\n'CTYPE1'  : 'RA---CAR-SIP',\r\n'CTYPE2'  : 'DEC--CAR-SIP',\r\n'PV1_1'   :120.0,\r\n'PV1_2'   :29.0,\r\n'PV1_0'   :1.0,\r\n'A_ORDER' :2,\r\n'A_2_0'   :5.0e-4,\r\n'B_ORDER' :2,\r\n'B_2_0'   :5.0e-4\r\n}\r\nfrom astropy.io import fits\r\nheader = fits.Header(header_dict)\r\n```\r\n\r\n### Expected behavior\r\nWhen you parse the wcs information from this header, the image should be centered at ra=120 and dec=29 with lines of constant ra and dec looking like the following image generated using wcslib - \r\n![wcsgrid_with_PV](https://user-images.githubusercontent.com/97835976/210666592-62860f54-f97a-4114-81bb-b50712194337.png)\r\n\r\n### Actual behavior\r\nIf I parse the wcs information using astropy wcs, it throws the following warning -\r\n`WARNING: FITSFixedWarning: Removed redundant SCAMP distortion parameters because SIP parameters are also present [astropy.wcs.wcs]`\r\nAnd the resulting grid is different.\r\nCode - \r\n```\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom astropy.wcs import WCS\r\nw = WCS(header)\r\nra = np.linspace(116, 126, 25)\r\ndec = np.linspace(25, 34, 25)\r\n\r\nfor r in ra:\r\n    x, y = w.all_world2pix(np.full_like(dec, r), dec, 0)\r\n    plt.plot(x, y, 'C0')\r\nfor d in dec:\r\n    x, y = w.all_world2pix(ra, np.full_like(ra, d), 0)\r\n    plt.plot(x, y, 'C0')\r\n\r\nplt.title('Lines of constant equatorial coordinates in pixel space')\r\nplt.xlabel('x')\r\nplt.ylabel('y')\r\n```\r\nGrid - \r\n![image](https://user-images.githubusercontent.com/97835976/210667514-4d2a033b-3571-4df5-9646-42e4cbb51026.png)\r\n\r\nThe astropy wcs grid/solution does not change whethere we keep or remove the PV keywords.\r\nFurthermore, the astropy grid can be recreated in wcslib, by removing the PV keywords.\r\n![wcsgrid_without_PV](https://user-images.githubusercontent.com/97835976/210667756-10336d93-1266-4ae6-ace1-27947746531c.png)\r\n\r\n\r\n### Steps to Reproduce\r\n<!-- Ideally a code example could be provided so we can run it ourselves. -->\r\n<!-- If you are pasting code, use triple backticks (```) around\r\nyour code snippet. -->\r\n<!-- If necessary, sanitize your screen output to be pasted so you do not\r\nreveal secrets like tokens and passwords. -->\r\n\r\n1. Initialize the header\r\n2. Parse the header using astropy.wcs.WCS\r\n3. Plot the graticule\r\n4. Remove the PV keywords and run again\r\n5. You will find the same graticule indicating that PV keywords are completely ignored.\r\n6.  Additionally, the graticules can be compared with the wcsgrid utility of wcslib.\r\n\r\n\r\n### System Details\r\n<!-- Even if you do not think this is necessary, it is useful information for the maintainers.\r\nPlease run the following snippet and paste the output below:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"Numpy\", numpy.__version__)\r\nimport erfa; print(\"pyerfa\", erfa.__version__)\r\nimport astropy; print(\"astropy\", astropy.__version__)\r\nimport scipy; print(\"Scipy\", scipy.__version__)\r\nimport matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\n-->\r\nLinux-6.0.11-200.fc36.x86_64-x86_64-with-glibc2.35\r\nPython 3.9.12 (main, Apr  5 2022, 06:56:58) \r\n[GCC 7.5.0]\r\nNumpy 1.21.5\r\npyerfa 2.0.0\r\nastropy 5.1\r\nScipy 1.7.3\r\nMatplotlib 3.5.1\nRemove heuristic code to handle PTF files which is causing a bug\n<!-- This comments are hidden when you submit the pull request,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- If you are new or need to be re-acquainted with Astropy\r\ncontributing workflow, please see\r\nhttp://docs.astropy.org/en/latest/development/workflow/development_workflow.html .\r\nThere is even a practical example at\r\nhttps://docs.astropy.org/en/latest/development/workflow/git_edit_workflow_examples.html#astropy-fix-example . -->\r\n\r\n<!-- Astropy coding style guidelines can be found here:\r\nhttps://docs.astropy.org/en/latest/development/codeguide.html#coding-style-conventions\r\nOur testing infrastructure enforces to follow a subset of the PEP8 to be\r\nfollowed. You can check locally whether your changes have followed these by\r\nrunning the following command:\r\n\r\ntox -e codestyle\r\n\r\n-->\r\n\r\n<!-- Please just have a quick search on GitHub to see if a similar\r\npull request has already been posted.\r\nWe have old closed pull requests that might provide useful code or ideas\r\nthat directly tie in with your pull request. -->\r\n\r\n<!-- We have several automatic features that run when a pull request is open.\r\nThey can appear daunting but do not worry because maintainers will help\r\nyou navigate them, if necessary. -->\r\n\r\n### Description\r\n<!-- Provide a general description of what your pull request does.\r\nComplete the following sentence and add relevant details as you see fit. -->\r\n\r\n<!-- In addition please ensure that the pull request title is descriptive\r\nand allows maintainers to infer the applicable subpackage(s). -->\r\n\r\n<!-- READ THIS FOR MANUAL BACKPORT FROM A MAINTAINER:\r\nApply \"skip-basebranch-check\" label **before** you open the PR! -->\r\n\r\nCurrently the `_fix_scamp` function remove any PV keywords when SIP distortions are present and no radial terms are present which should not  be the case. This function was put in place for solving https://github.com/astropy/astropy/issues/299 but it causes the bug #14255.\r\n\r\nWe can either keep adding heuristic code to fix the edge cases as they come up with or remove `_fix_scamp` and let the user deal with non-standard files. I'm opening a pull request for the latter following the discusison in #14255.\r\n\r\n<!-- If the pull request closes any open issues you can add this.\r\nIf you replace <Issue Number> with a number, GitHub will automatically link it.\r\nIf this pull request is unrelated to any issues, please remove\r\nthe following line. -->\r\n\r\nFixes #14255\r\n\r\n### Checklist for package maintainer(s)\r\n<!-- This section is to be filled by package maintainer(s) who will\r\nreview this pull request. -->\r\n\r\nThis checklist is meant to remind the package maintainer(s) who will review this pull request of some common things to look for. This list is not exhaustive.\r\n\r\n- [ ] Do the proposed changes actually accomplish desired goals?\r\n- [ ] Do the proposed changes follow the [Astropy coding guidelines](https://docs.astropy.org/en/latest/development/codeguide.html)?\r\n- [ ] Are tests added/updated as required? If so, do they follow the [Astropy testing guidelines](https://docs.astropy.org/en/latest/development/testguide.html)?\r\n- [ ] Are docs added/updated as required? If so, do they follow the [Astropy documentation guidelines](https://docs.astropy.org/en/latest/development/docguide.html#astropy-documentation-rules-and-guidelines)?\r\n- [ ] Is rebase and/or squash necessary? If so, please provide the author with appropriate instructions. Also see [\"When to rebase and squash commits\"](https://docs.astropy.org/en/latest/development/when_to_rebase.html).\r\n- [ ] Did the CI pass? If no, are the failures related? If you need to run daily and weekly cron jobs as part of the PR, please apply the `Extra CI` label. Codestyle issues can be fixed by the [bot](https://docs.astropy.org/en/latest/development/workflow/development_workflow.html#pre-commit).\r\n- [ ] Is a change log needed? If yes, did the change log check pass? If no, add the `no-changelog-entry-needed` label. If this is a manual backport, use the `skip-changelog-checks` label unless special changelog handling is necessary.\r\n- [ ] Is this a big PR that makes a \"What's new?\" entry worthwhile and if so, is (1) a \"what's new\" entry included in this PR and (2) the \"whatsnew-needed\" label applied?\r\n- [ ] Is a milestone set? Milestone must be set but `astropy-bot` check might be missing; do not let the green checkmark fool you.\r\n- [ ] At the time of adding the milestone, if the milestone set requires a backport to release branch(es), apply the appropriate `backport-X.Y.x` label(s) *before* merge.\r\n\n",
  "hints_text": "Welcome to Astropy 👋 and thank you for your first issue!\n\nA project member will respond to you as soon as possible; in the meantime, please double-check the [guidelines for submitting issues](https://github.com/astropy/astropy/blob/main/CONTRIBUTING.md#reporting-issues) and make sure you've provided the requested details.\n\nGitHub issues in the Astropy repository are used to track bug reports and feature requests; If your issue poses a question about how to use Astropy, please instead raise your question in the [Astropy Discourse user forum](https://community.openastronomy.org/c/astropy/8) and close this issue.\n\nIf you feel that this issue has not been responded to in a timely manner, please send a message directly to the [development mailing list](http://groups.google.com/group/astropy-dev).  If the issue is urgent or sensitive in nature (e.g., a security vulnerability) please send an e-mail directly to the private e-mail feedback@astropy.org.\nI have seen this issue discussed in https://github.com/astropy/astropy/issues/299 and https://github.com/astropy/astropy/issues/3559 with an fix in https://github.com/astropy/astropy/pull/1278 which was not perfect and causes the issue for me.\r\n\r\nhttps://github.com/astropy/astropy/blob/966be9fedbf55c23ba685d9d8a5d49f06fa1223c/astropy/wcs/wcs.py#L708-L752\r\n\r\nI'm using a CAR projection which needs the PV keywords.\r\nBy looking at the previous discussions and the implementation above some I propose some approaches to fix this.\r\n\r\n1. Check if the project type is TAN or TPV. I'm not at all familiar with SCAMP distortions but I vaguely remember that they are used on TAN projection. Do correct me if I'm wrong.\r\n2. As @stargaser suggested\r\n> SCAMP always makes a fourth-order polynomial with no radial terms. I think that would be the best fingerprint.\r\n\r\nCurrently, https://github.com/astropy/astropy/pull/1278 only checks if any radial terms are present but we can also check if 3rd and 4th order terms are definitely present.\r\n3. If wcslib supports SCAMP distortions now, then the filtering could be dropped altogether. I'm not sure whether it will cause any conflict between SIP and SCAMP distortions between wcslib when both distortions keyword are actually  present (not as projection parameters). \r\n\r\n@nden @mcara Mark Calabretta suggested you guys might be able to help with this.\r\n\nI am not familiar with SCAMP but proposed suggestions seem reasonable, at least at the first glance. I will have to read more about SCAMP distortions re-read this issue, etc. I did not participate in the discussions from a decade ago and so I'll have to look at those too.\r\n\r\n> I'm using a CAR projection which needs the PV keywords.\r\n\r\nThis is strange to me though. I modified your header and removed `SIP` (instead of `PV`). I then printed `Wcsprm`:\r\n\r\n```python\r\nheader_dict = {\r\n    'SIMPLE'  : True,\r\n    'BITPIX'  : -32,\r\n    'NAXIS'   :  2,\r\n    'NAXIS1'  : 1024,\r\n    'NAXIS2'  : 1024,\r\n    'CRPIX1'  : 512.0,\r\n    'CRPIX2'  : 512.0,\r\n    'CDELT1'  : 0.01,\r\n    'CDELT2'  : 0.01,\r\n    'CRVAL1'  : 120.0,\r\n    'CRVAL2'  : 29.0,\r\n    'CTYPE1'  : 'RA---CAR',\r\n    'CTYPE2'  : 'DEC--CAR',\r\n    'PV1_1'   :120.0,\r\n    'PV1_2'   :29.0,\r\n    'PV1_0'   :1.0,\r\n}\r\nfrom astropy.wcs import WCS\r\nw = WCS(header_dict)\r\nprint(w.wcs)\r\n```\r\n\r\nHere is an excerpt of what was reported:\r\n```\r\n   prj.*\r\n       flag: 203\r\n       code: \"CAR\"\r\n         r0: 57.295780\r\n         pv: (not used)\r\n       phi0: 120.000000\r\n     theta0: 29.000000\r\n     bounds: 7\r\n\r\n       name: \"plate caree\"\r\n   category: 2 (cylindrical)\r\n    pvrange: 0\r\n```\r\n\r\nSo, to me it seems that `CAR` projection does not use `PV` and this contradicts (at first glance) the statement _\"a CAR projection which needs the PV keywords\"_.\n`PV` keywords are not optional keywords in CAR projection to relate the native spherical coordinates with celestial coordinates (RA, Dec). By default they have values equal to zero, but in my case I need to define these parameters.\nAlso, from https://doi.org/10.1051/0004-6361:20021327 Table 13 one can see that `CAR` projection is not associated with any PV parameters.\n> Table 13 one can see that CAR projection is not associated with any PV parameters.\r\n\r\nYes, that is true. \r\nBut the description of Table 13 says that it only lists required parameters.\r\n\r\nAlso, PV1_1, and PV1_2 defines $\\theta_0$ and $\\phi_0$ which are accepted by almost all the projections to change the default value.\nYes, I should have read the footnote to Table 13 (and then Section 2.5).\nJust commenting out https://github.com/astropy/astropy/blob/966be9fedbf55c23ba685d9d8a5d49f06fa1223c/astropy/wcs/wcs.py#L793\r\nsolves the issue for me.\r\nBut, I don't know if that would be desirable as we might be back to square one with the old PTF images.\r\n\r\nOnce the appropriate approach for fixing this is decided, I can try to make a small PR.\nLooking at the sample listing for TPV - https://fits.gsfc.nasa.gov/registry/tpvwcs.html - I see that projection code is 'TPV' (in `CTYPE`). So I am not sure why we ignore `PV` if code is `SIP`. Maybe it was something that was dealing with pre-2012 FITS convention, with files created by SCAMP (pre-2012). How relevant is this nowadays? Maybe those who have legacy files should update `CTYPE`?\r\n\r\nIn any case, it looks like we should not be ignoring/deleting `PV` when `CTYPE` has `-SIP`.\r\n\r\nIt is not a good solution but it will allow you to use `astropy.wcs` with your file (until we figure out a permanent solution) if, after creating the WCS object (let's call it `w` as in my example above), you can run:\r\n\r\n```python\r\nw.wcs.set_pv([(1, 1, 120.0), (1, 0, 1.0), (1, 2, 29.0)])\r\nw.wcs.set()\r\n```\nYour solution proposed above is OK too as a temporary workaround.\nNOTE: A useful discussion can be found here: https://jira.lsstcorp.org/browse/DM-2883\n> I see that projection code is 'TPV' (in CTYPE). So I am not sure why we ignore PV if code is SIP. Maybe it was something that was dealing with pre-2012 FITS convention, with files created by SCAMP (pre-2012).\r\n\r\nYes. Apparently pre-2012 SCAMP just kept the CTYPE as `TAN` .\r\n\r\n> Maybe those who have legacy files should update CTYPE?\r\n\r\nThat would be my first thought as well instead of getting a pull request through. But, it's been in astropy for so long at this point.\r\n\r\n> Your` solution proposed above is OK too as a temporary workaround.\r\n\r\nBy just commenting out, I don't have to make any change to my header update code or more accurately the header reading code and the subsequent pipelines for our telescope. By commenting the line, we could work on the files now and later an astropy update will clean up things in the background (I'm hoping).\r\n\r\nFrom the discussion https://jira.lsstcorp.org/browse/DM-2883\r\n\r\n> David Berry reports:\r\n> \r\n> The FitsChan class in AST handles this as follows:\r\n> \r\n> 1) If the CTYPE in a FITS header uses TPV, then the the PVi_j headers are interpreted according to the conventions of the distorted TAN paper above.\r\n> \r\n> 2) For CTYPEs that use TAN, the interpretation of PVi_j values is controlled by the \"PolyTan\" attribute of the FitsChan. This can be set to an explicit value before reading the header to indicate the convention to use. If it is not set before reading the header, a heuristic is used to guess the most appropriate convention as follows:\r\n> \r\n> If the FitsChan contains any PVi_m keywords for the latitude axis, or if it contains PVi_m keywords for the longitude axis with \"m\" greater than 4, then the distorted TAN convention is used. Otherwise, the standard convention is used.\r\n> \r\n\r\nThis seems like something that could be reasonable and it is a combination of my points 1 and 2 earlier.\r\n\r\nIf we think about removing `fix_scamp` altogether, then we would have to consider the following - \r\n1. How does the old PTF fits files (which contains both SIP and TPV keywords with TAN projection) behave with current wcslib.\r\n2. How does other SCAMP fits files work with the current wcslib. I think if the projection is written as `TPV` then wcslib will handle it fine, I have no idea about CTYPE 'TAN'\nThe WCSLIB package ships with some test headers. One of the test header is about SIP and TPV.\r\n\r\n>  FITS header keyrecords used for testing the handling of the \"SIP\" (Simple\r\n>  Imaging Polynomial) and TPV distortions by WCSLIB.\r\n> \r\n>  This header was adapted from a pair of FITS files from the Palomar Transient\r\n>  Factory (IPAC) provided by David Shupe.  The same distortion was encoded in\r\n>  two ways, the primary representation uses the SIP convention, and the 'P'\r\n>  alternate the TPV projection.  Translations of both of these into other\r\n>  distortion functions were then added as alternates.\r\n\r\nIn the examples given, the headers have a CTYPE for `RA--TAN-SIP` for SIP distortions and `RA---TPV` for SCAMP distortions. So, as long as the files from SCAMP are of `TPV` CTYPE they should just work.\r\n\r\nThe file - [SIPTPV.txt](https://github.com/astropy/astropy/files/10367722/SIPTPV.txt)\r\nAlso can be found at wcslib/C/test/SIPTPV.keyrec\r\n\nSince I know nothing about SCAMP and do not know how these changes might affect those who do use SCAMP, I would like to hear opinions from those who might be affected by changes to SIP/SCAMP/TPV issue or from those who worked on the original issue: @lpsinger @stargaser @astrofrog \nMan, this takes me back. This was probably my first Astropy contribution.\r\n\r\nIs anyone on this PR going to be at AAS in Seattle this week?\nI'm attending the AAS in Seattle this week.\r\n\r\n> 2. As @stargaser suggested\r\n> \r\n> > SCAMP always makes a fourth-order polynomial with no radial terms. I think that would be the best fingerprint.\r\n> \r\n> Currently, #1278 only checks if any radial terms are present but we can also check if 3rd and 4th order terms are definitely present. 3. If wcslib supports SCAMP distortions now, then the filtering could be dropped altogether. I'm not sure whether it will cause any conflict between SIP and SCAMP distortions between wcslib when both distortions keyword are actually present (not as projection parameters).\r\n\r\nI think this would be the easiest solution that would satisfy the aims of #1278 to work with PTF files. I'm afraid it will not be possible to modify the headers of PTF files as the project has been over for several years now.\r\n\n>  I'm afraid it will not be possible to modify the headers of PTF files as the project has been over for several years now.\r\n\r\nI meant on a user level. Someone who is reading the PTF files can just remove the header keywords. \r\nOr maybe wcslib just handles it without issue now giving the intended wcs output? That has to be checked though.\nDoes anyone have any thoughts on this about how to proceed?\r\n\r\nAlso, @stargaser if you have access to the PTF files, could you just try to read them with the `fix_scamp` function removed? This might help us choose what route to take.\n> > I'm afraid it will not be possible to modify the headers of PTF files as the project has been over for several years now.\r\n> \r\n> I meant on a user level. Someone who is reading the PTF files can just remove the header keywords. Or maybe wcslib just handles it without issue now giving the intended wcs output? That has to be checked though.\r\n\r\nI am of the same opinion. Those who use SCAMP that does not use correct CTYPE should fix the CTYPE manually. It is not that hard. It is impossible to design software that can deal with every possible interpretation of the same keyword.\r\n\r\nTrue, in this case maybe we could have some sort of heuristic approach and \"we can also check if 3rd and 4th order terms are definitely present\" but really why do it at all? To me, the idea of FITS \"standard\" is not to have to guess anything, have heuristics, or software switches that \"tell\" the code (or \"us\") how to interpret things in a FITS file. IMO, the point of a standard and \"archival format\" is that things are unambiguous.\r\n\r\nI think if there are no other comments or proposals you should go ahead and make a PR to remove `_fix_scamp()`.\nSince this was an actual issue that users encountered, which after very considerable discussion we decided to fix, I think we cannot just remove it, but have to put a mechanism in place for telling the user how they can get back the previous behaviour -- e.g., by adding appropriate text to any error message that now arises. Or we could make the removal depend on a configuration item or so.\np.s. Of course, if at the present time, archives for PTF and other observatories do not have the issue any more, perhaps we can just remove it, but probably best to check that!",
  "created_at": "2023-01-23T06:51:46Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"astropy/wcs/tests/test_wcs.py::test_tpv_ctype_tpv\", \"astropy/wcs/tests/test_wcs.py::test_tpv_ctype_tan\", \"astropy/wcs/tests/test_wcs.py::test_car_sip_with_pv\"]",
  "PASS_TO_PASS": "[\"astropy/wcs/tests/test_wcs.py::TestMaps::test_consistency\", \"astropy/wcs/tests/test_wcs.py::TestMaps::test_maps\", \"astropy/wcs/tests/test_wcs.py::TestSpectra::test_consistency\", \"astropy/wcs/tests/test_wcs.py::TestSpectra::test_spectra\", \"astropy/wcs/tests/test_wcs.py::test_fixes\", \"astropy/wcs/tests/test_wcs.py::test_outside_sky\", \"astropy/wcs/tests/test_wcs.py::test_pix2world\", \"astropy/wcs/tests/test_wcs.py::test_load_fits_path\", \"astropy/wcs/tests/test_wcs.py::test_dict_init\", \"astropy/wcs/tests/test_wcs.py::test_extra_kwarg\", \"astropy/wcs/tests/test_wcs.py::test_3d_shapes\", \"astropy/wcs/tests/test_wcs.py::test_preserve_shape\", \"astropy/wcs/tests/test_wcs.py::test_broadcasting\", \"astropy/wcs/tests/test_wcs.py::test_shape_mismatch\", \"astropy/wcs/tests/test_wcs.py::test_invalid_shape\", \"astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords\", \"astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords_exception\", \"astropy/wcs/tests/test_wcs.py::test_to_header_string\", \"astropy/wcs/tests/test_wcs.py::test_to_fits\", \"astropy/wcs/tests/test_wcs.py::test_to_header_warning\", \"astropy/wcs/tests/test_wcs.py::test_no_comments_in_header\", \"astropy/wcs/tests/test_wcs.py::test_find_all_wcs_crash\", \"astropy/wcs/tests/test_wcs.py::test_validate\", \"astropy/wcs/tests/test_wcs.py::test_validate_wcs_tab\", \"astropy/wcs/tests/test_wcs.py::test_validate_with_2_wcses\", \"astropy/wcs/tests/test_wcs.py::test_crpix_maps_to_crval\", \"astropy/wcs/tests/test_wcs.py::test_all_world2pix\", \"astropy/wcs/tests/test_wcs.py::test_scamp_sip_distortion_parameters\", \"astropy/wcs/tests/test_wcs.py::test_fixes2\", \"astropy/wcs/tests/test_wcs.py::test_unit_normalization\", \"astropy/wcs/tests/test_wcs.py::test_footprint_to_file\", \"astropy/wcs/tests/test_wcs.py::test_validate_faulty_wcs\", \"astropy/wcs/tests/test_wcs.py::test_error_message\", \"astropy/wcs/tests/test_wcs.py::test_out_of_bounds\", \"astropy/wcs/tests/test_wcs.py::test_calc_footprint_1\", \"astropy/wcs/tests/test_wcs.py::test_calc_footprint_2\", \"astropy/wcs/tests/test_wcs.py::test_calc_footprint_3\", \"astropy/wcs/tests/test_wcs.py::test_sip\", \"astropy/wcs/tests/test_wcs.py::test_sub_3d_with_sip\", \"astropy/wcs/tests/test_wcs.py::test_printwcs\", \"astropy/wcs/tests/test_wcs.py::test_invalid_spherical\", \"astropy/wcs/tests/test_wcs.py::test_no_iteration\", \"astropy/wcs/tests/test_wcs.py::test_sip_tpv_agreement\", \"astropy/wcs/tests/test_wcs.py::test_tpv_ctype_sip\", \"astropy/wcs/tests/test_wcs.py::test_tpv_copy\", \"astropy/wcs/tests/test_wcs.py::test_hst_wcs\", \"astropy/wcs/tests/test_wcs.py::test_cpdis_comments\", \"astropy/wcs/tests/test_wcs.py::test_d2im_comments\", \"astropy/wcs/tests/test_wcs.py::test_sip_broken\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_crval\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_try2\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_p17\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_using_compare\", \"astropy/wcs/tests/test_wcs.py::test_passing_ImageHDU\", \"astropy/wcs/tests/test_wcs.py::test_inconsistent_sip\", \"astropy/wcs/tests/test_wcs.py::test_bounds_check\", \"astropy/wcs/tests/test_wcs.py::test_naxis\", \"astropy/wcs/tests/test_wcs.py::test_sip_with_altkey\", \"astropy/wcs/tests/test_wcs.py::test_to_fits_1\", \"astropy/wcs/tests/test_wcs.py::test_keyedsip\", \"astropy/wcs/tests/test_wcs.py::test_zero_size_input\", \"astropy/wcs/tests/test_wcs.py::test_scalar_inputs\", \"astropy/wcs/tests/test_wcs.py::test_footprint_contains\", \"astropy/wcs/tests/test_wcs.py::test_cunit\", \"astropy/wcs/tests/test_wcs.py::TestWcsWithTime::test_keywods2wcsprm\", \"astropy/wcs/tests/test_wcs.py::TestWcsWithTime::test_transforms\", \"astropy/wcs/tests/test_wcs.py::test_invalid_coordinate_masking\", \"astropy/wcs/tests/test_wcs.py::test_no_pixel_area\", \"astropy/wcs/tests/test_wcs.py::test_distortion_header\", \"astropy/wcs/tests/test_wcs.py::test_pixlist_wcs_colsel\", \"astropy/wcs/tests/test_wcs.py::test_time_axis_selection\", \"astropy/wcs/tests/test_wcs.py::test_temporal\", \"astropy/wcs/tests/test_wcs.py::test_swapaxes_same_val_roundtrip\"]",
  "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.537294",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}