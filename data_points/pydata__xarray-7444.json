{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-7444",
  "base_commit": "821dc24b5f3ed91b843a634bf8513a26046269ef",
  "patch": "diff --git a/xarray/core/common.py b/xarray/core/common.py\n--- a/xarray/core/common.py\n+++ b/xarray/core/common.py\n@@ -13,8 +13,14 @@\n from xarray.core import dtypes, duck_array_ops, formatting, formatting_html, ops\n from xarray.core.indexing import BasicIndexer, ExplicitlyIndexed\n from xarray.core.options import OPTIONS, _get_keep_attrs\n+from xarray.core.pdcompat import _convert_base_to_offset\n from xarray.core.pycompat import is_duck_dask_array\n-from xarray.core.utils import Frozen, either_dict_or_kwargs, is_scalar\n+from xarray.core.utils import (\n+    Frozen,\n+    either_dict_or_kwargs,\n+    emit_user_level_warning,\n+    is_scalar,\n+)\n \n try:\n     import cftime\n@@ -845,6 +851,12 @@ def _resample(\n             For frequencies that evenly subdivide 1 day, the \"origin\" of the\n             aggregated intervals. For example, for \"24H\" frequency, base could\n             range from 0 through 23.\n+\n+            .. deprecated:: 2023.03.0\n+                Following pandas, the ``base`` parameter is deprecated in favor\n+                of the ``origin`` and ``offset`` parameters, and will be removed\n+                in a future version of xarray.\n+\n         origin : {'epoch', 'start', 'start_day', 'end', 'end_day'}, pd.Timestamp, datetime.datetime, np.datetime64, or cftime.datetime, default 'start_day'\n             The datetime on which to adjust the grouping. The timezone of origin\n             must match the timezone of the index.\n@@ -860,6 +872,12 @@ def _resample(\n         loffset : timedelta or str, optional\n             Offset used to adjust the resampled time labels. Some pandas date\n             offset strings are supported.\n+\n+            .. deprecated:: 2023.03.0\n+                Following pandas, the ``loffset`` parameter is deprecated in favor\n+                of using time offset arithmetic, and will be removed in a future\n+                version of xarray.\n+\n         restore_coord_dims : bool, optional\n             If True, also restore the dimension order of multi-dimensional\n             coordinates.\n@@ -930,8 +948,8 @@ def _resample(\n         \"\"\"\n         # TODO support non-string indexer after removing the old API.\n \n-        from xarray.coding.cftimeindex import CFTimeIndex\n         from xarray.core.dataarray import DataArray\n+        from xarray.core.groupby import TimeResampleGrouper\n         from xarray.core.resample import RESAMPLE_DIM\n \n         if keep_attrs is not None:\n@@ -961,28 +979,36 @@ def _resample(\n         dim_name: Hashable = dim\n         dim_coord = self[dim]\n \n-        if isinstance(self._indexes[dim_name].to_pandas_index(), CFTimeIndex):\n-            from xarray.core.resample_cftime import CFTimeGrouper\n-\n-            grouper = CFTimeGrouper(\n-                freq=freq,\n-                closed=closed,\n-                label=label,\n-                base=base,\n-                loffset=loffset,\n-                origin=origin,\n-                offset=offset,\n+        if loffset is not None:\n+            emit_user_level_warning(\n+                \"Following pandas, the `loffset` parameter to resample will be deprecated \"\n+                \"in a future version of xarray.  Switch to using time offset arithmetic.\",\n+                FutureWarning,\n             )\n-        else:\n-            grouper = pd.Grouper(\n-                freq=freq,\n-                closed=closed,\n-                label=label,\n-                base=base,\n-                offset=offset,\n-                origin=origin,\n-                loffset=loffset,\n+\n+        if base is not None:\n+            emit_user_level_warning(\n+                \"Following pandas, the `base` parameter to resample will be deprecated in \"\n+                \"a future version of xarray.  Switch to using `origin` or `offset` instead.\",\n+                FutureWarning,\n             )\n+\n+        if base is not None and offset is not None:\n+            raise ValueError(\"base and offset cannot be present at the same time\")\n+\n+        if base is not None:\n+            index = self._indexes[dim_name].to_pandas_index()\n+            offset = _convert_base_to_offset(base, freq, index)\n+\n+        grouper = TimeResampleGrouper(\n+            freq=freq,\n+            closed=closed,\n+            label=label,\n+            origin=origin,\n+            offset=offset,\n+            loffset=loffset,\n+        )\n+\n         group = DataArray(\n             dim_coord, coords=dim_coord.coords, dims=dim_coord.dims, name=RESAMPLE_DIM\n         )\ndiff --git a/xarray/core/groupby.py b/xarray/core/groupby.py\n--- a/xarray/core/groupby.py\n+++ b/xarray/core/groupby.py\n@@ -40,6 +40,7 @@\n \n     from xarray.core.dataarray import DataArray\n     from xarray.core.dataset import Dataset\n+    from xarray.core.types import DatetimeLike, SideOptions\n     from xarray.core.utils import Frozen\n \n     GroupKey = Any\n@@ -245,7 +246,10 @@ def _unique_and_monotonic(group: T_Group) -> bool:\n     return index.is_unique and index.is_monotonic_increasing\n \n \n-def _apply_loffset(grouper, result):\n+def _apply_loffset(\n+    loffset: str | pd.DateOffset | datetime.timedelta | pd.Timedelta,\n+    result: pd.Series | pd.DataFrame,\n+):\n     \"\"\"\n     (copied from pandas)\n     if loffset is set, offset the result index\n@@ -258,17 +262,25 @@ def _apply_loffset(grouper, result):\n     result : Series or DataFrame\n         the result of resample\n     \"\"\"\n+    # pd.Timedelta is a subclass of datetime.timedelta so we do not need to\n+    # include it in instance checks.\n+    if not isinstance(loffset, (str, pd.DateOffset, datetime.timedelta)):\n+        raise ValueError(\n+            f\"`loffset` must be a str, pd.DateOffset, datetime.timedelta, or pandas.Timedelta object. \"\n+            f\"Got {loffset}.\"\n+        )\n+\n+    if isinstance(loffset, str):\n+        loffset = pd.tseries.frequencies.to_offset(loffset)\n \n     needs_offset = (\n-        isinstance(grouper.loffset, (pd.DateOffset, datetime.timedelta))\n+        isinstance(loffset, (pd.DateOffset, datetime.timedelta))\n         and isinstance(result.index, pd.DatetimeIndex)\n         and len(result.index) > 0\n     )\n \n     if needs_offset:\n-        result.index = result.index + grouper.loffset\n-\n-    grouper.loffset = None\n+        result.index = result.index + loffset\n \n \n class GroupBy(Generic[T_Xarray]):\n@@ -530,14 +542,7 @@ def __repr__(self) -> str:\n         )\n \n     def _get_index_and_items(self, index, grouper):\n-        from xarray.core.resample_cftime import CFTimeGrouper\n-\n-        s = pd.Series(np.arange(index.size), index)\n-        if isinstance(grouper, CFTimeGrouper):\n-            first_items = grouper.first_items(index)\n-        else:\n-            first_items = s.groupby(grouper).first()\n-            _apply_loffset(grouper, first_items)\n+        first_items = grouper.first_items(index)\n         full_index = first_items.index\n         if first_items.isnull().any():\n             first_items = first_items.dropna()\n@@ -1365,3 +1370,50 @@ class DatasetGroupBy(  # type: ignore[misc]\n     ImplementsDatasetReduce,\n ):\n     __slots__ = ()\n+\n+\n+class TimeResampleGrouper:\n+    def __init__(\n+        self,\n+        freq: str,\n+        closed: SideOptions | None,\n+        label: SideOptions | None,\n+        origin: str | DatetimeLike,\n+        offset: pd.Timedelta | datetime.timedelta | str | None,\n+        loffset: datetime.timedelta | str | None,\n+    ):\n+        self.freq = freq\n+        self.closed = closed\n+        self.label = label\n+        self.origin = origin\n+        self.offset = offset\n+        self.loffset = loffset\n+\n+    def first_items(self, index):\n+        from xarray import CFTimeIndex\n+        from xarray.core.resample_cftime import CFTimeGrouper\n+\n+        if isinstance(index, CFTimeIndex):\n+            grouper = CFTimeGrouper(\n+                freq=self.freq,\n+                closed=self.closed,\n+                label=self.label,\n+                origin=self.origin,\n+                offset=self.offset,\n+                loffset=self.loffset,\n+            )\n+            return grouper.first_items(index)\n+        else:\n+            s = pd.Series(np.arange(index.size), index)\n+            grouper = pd.Grouper(\n+                freq=self.freq,\n+                closed=self.closed,\n+                label=self.label,\n+                origin=self.origin,\n+                offset=self.offset,\n+            )\n+\n+            first_items = s.groupby(grouper).first()\n+            if self.loffset is not None:\n+                _apply_loffset(self.loffset, first_items)\n+        return first_items\ndiff --git a/xarray/core/pdcompat.py b/xarray/core/pdcompat.py\n--- a/xarray/core/pdcompat.py\n+++ b/xarray/core/pdcompat.py\n@@ -38,6 +38,10 @@\n from enum import Enum\n from typing import Literal\n \n+import pandas as pd\n+\n+from xarray.coding import cftime_offsets\n+\n \n def count_not_none(*args) -> int:\n     \"\"\"Compute the number of non-None arguments.\n@@ -68,3 +72,22 @@ def __repr__(self) -> str:\n     _NoDefault.no_default\n )  # Sentinel indicating the default value following pandas\n NoDefault = Literal[_NoDefault.no_default]  # For typing following pandas\n+\n+\n+def _convert_base_to_offset(base, freq, index):\n+    \"\"\"Required until we officially deprecate the base argument to resample.  This\n+    translates a provided `base` argument to an `offset` argument, following logic\n+    from pandas.\n+    \"\"\"\n+    from xarray.coding.cftimeindex import CFTimeIndex\n+\n+    if isinstance(index, pd.DatetimeIndex):\n+        freq = pd.tseries.frequencies.to_offset(freq)\n+        if isinstance(freq, pd.offsets.Tick):\n+            return pd.Timedelta(base * freq.nanos // freq.n)\n+    elif isinstance(index, CFTimeIndex):\n+        freq = cftime_offsets.to_offset(freq)\n+        if isinstance(freq, cftime_offsets.Tick):\n+            return base * freq.as_timedelta() // freq.n\n+    else:\n+        raise ValueError(\"Can only resample using a DatetimeIndex or CFTimeIndex.\")\ndiff --git a/xarray/core/resample_cftime.py b/xarray/core/resample_cftime.py\n--- a/xarray/core/resample_cftime.py\n+++ b/xarray/core/resample_cftime.py\n@@ -71,7 +71,6 @@ def __init__(\n         freq: str | BaseCFTimeOffset,\n         closed: SideOptions | None = None,\n         label: SideOptions | None = None,\n-        base: int | None = None,\n         loffset: str | datetime.timedelta | BaseCFTimeOffset | None = None,\n         origin: str | CFTimeDatetime = \"start_day\",\n         offset: str | datetime.timedelta | None = None,\n@@ -79,10 +78,6 @@ def __init__(\n         self.offset: datetime.timedelta | None\n         self.closed: SideOptions\n         self.label: SideOptions\n-\n-        if base is not None and offset is not None:\n-            raise ValueError(\"base and offset cannot be provided at the same time\")\n-\n         self.freq = to_offset(freq)\n         self.loffset = loffset\n         self.origin = origin\n@@ -122,9 +117,6 @@ def __init__(\n                 else:\n                     self.label = label\n \n-        if base is not None and isinstance(self.freq, Tick):\n-            offset = type(self.freq)(n=base % self.freq.n).as_timedelta()\n-\n         if offset is not None:\n             try:\n                 self.offset = _convert_offset_to_timedelta(offset)\n@@ -150,6 +142,16 @@ def first_items(self, index: CFTimeIndex):\n             index, self.freq, self.closed, self.label, self.origin, self.offset\n         )\n         if self.loffset is not None:\n+            if not isinstance(\n+                self.loffset, (str, datetime.timedelta, BaseCFTimeOffset)\n+            ):\n+                # BaseCFTimeOffset is not public API so we do not include it in\n+                # the error message for now.\n+                raise ValueError(\n+                    f\"`loffset` must be a str or datetime.timedelta object. \"\n+                    f\"Got {self.loffset}.\"\n+                )\n+\n             if isinstance(self.loffset, datetime.timedelta):\n                 labels = labels + self.loffset\n             else:\n",
  "test_patch": "diff --git a/xarray/tests/test_cftimeindex_resample.py b/xarray/tests/test_cftimeindex_resample.py\n--- a/xarray/tests/test_cftimeindex_resample.py\n+++ b/xarray/tests/test_cftimeindex_resample.py\n@@ -8,6 +8,7 @@\n import pytest\n \n import xarray as xr\n+from xarray.core.pdcompat import _convert_base_to_offset\n from xarray.core.resample_cftime import CFTimeGrouper\n \n cftime = pytest.importorskip(\"cftime\")\n@@ -130,17 +131,18 @@ def test_resample(freqs, closed, label, base, offset) -> None:\n     da_datetimeindex = da(datetime_index)\n     da_cftimeindex = da(cftime_index)\n \n-    compare_against_pandas(\n-        da_datetimeindex,\n-        da_cftimeindex,\n-        resample_freq,\n-        closed=closed,\n-        label=label,\n-        base=base,\n-        offset=offset,\n-        origin=origin,\n-        loffset=loffset,\n-    )\n+    with pytest.warns(FutureWarning, match=\"`loffset` parameter\"):\n+        compare_against_pandas(\n+            da_datetimeindex,\n+            da_cftimeindex,\n+            resample_freq,\n+            closed=closed,\n+            label=label,\n+            base=base,\n+            offset=offset,\n+            origin=origin,\n+            loffset=loffset,\n+        )\n \n \n @pytest.mark.parametrize(\n@@ -245,3 +247,43 @@ def test_timedelta_offset() -> None:\n     timedelta_result = da_cftime.resample(time=\"2D\", offset=timedelta).mean()\n     string_result = da_cftime.resample(time=\"2D\", offset=string).mean()\n     xr.testing.assert_identical(timedelta_result, string_result)\n+\n+\n+@pytest.mark.parametrize(\"loffset\", [\"12H\", datetime.timedelta(hours=-12)])\n+def test_resample_loffset_cftimeindex(loffset) -> None:\n+    datetimeindex = pd.date_range(\"2000-01-01\", freq=\"6H\", periods=10)\n+    da_datetimeindex = xr.DataArray(np.arange(10), [(\"time\", datetimeindex)])\n+\n+    cftimeindex = xr.cftime_range(\"2000-01-01\", freq=\"6H\", periods=10)\n+    da_cftimeindex = xr.DataArray(np.arange(10), [(\"time\", cftimeindex)])\n+\n+    with pytest.warns(FutureWarning, match=\"`loffset` parameter\"):\n+        result = da_cftimeindex.resample(time=\"24H\", loffset=loffset).mean()\n+        expected = da_datetimeindex.resample(time=\"24H\", loffset=loffset).mean()\n+\n+    result[\"time\"] = result.xindexes[\"time\"].to_pandas_index().to_datetimeindex()\n+    xr.testing.assert_identical(result, expected)\n+\n+\n+def test_resample_invalid_loffset_cftimeindex() -> None:\n+    times = xr.cftime_range(\"2000-01-01\", freq=\"6H\", periods=10)\n+    da = xr.DataArray(np.arange(10), [(\"time\", times)])\n+\n+    with pytest.raises(ValueError):\n+        da.resample(time=\"24H\", loffset=1)  # type: ignore\n+\n+\n+@pytest.mark.parametrize((\"base\", \"freq\"), [(1, \"10S\"), (17, \"3H\"), (15, \"5U\")])\n+def test__convert_base_to_offset(base, freq):\n+    # Verify that the cftime_offset adapted version of _convert_base_to_offset\n+    # produces the same result as the pandas version.\n+    datetimeindex = pd.date_range(\"2000\", periods=2)\n+    cftimeindex = xr.cftime_range(\"2000\", periods=2)\n+    pandas_result = _convert_base_to_offset(base, freq, datetimeindex)\n+    cftime_result = _convert_base_to_offset(base, freq, cftimeindex)\n+    assert pandas_result.to_pytimedelta() == cftime_result\n+\n+\n+def test__convert_base_to_offset_invalid_index():\n+    with pytest.raises(ValueError, match=\"Can only resample\"):\n+        _convert_base_to_offset(1, \"12H\", pd.Index([0]))\ndiff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -1,5 +1,6 @@\n from __future__ import annotations\n \n+import datetime\n import warnings\n \n import numpy as np\n@@ -16,6 +17,7 @@\n     assert_equal,\n     assert_identical,\n     create_test_data,\n+    has_pandas_version_two,\n     requires_dask,\n     requires_flox,\n     requires_scipy,\n@@ -1475,14 +1477,6 @@ def test_resample(self):\n         actual = array.resample(time=\"24H\").reduce(np.mean)\n         assert_identical(expected, actual)\n \n-        # Our use of `loffset` may change if we align our API with pandas' changes.\n-        # ref https://github.com/pydata/xarray/pull/4537\n-        actual = array.resample(time=\"24H\", loffset=\"-12H\").mean()\n-        expected_ = array.to_series().resample(\"24H\").mean()\n-        expected_.index += to_offset(\"-12H\")\n-        expected = DataArray.from_series(expected_)\n-        assert_identical(actual, expected)\n-\n         with pytest.raises(ValueError, match=r\"index must be monotonic\"):\n             array[[2, 0, 1]].resample(time=\"1D\")\n \n@@ -1802,12 +1796,15 @@ def test_upsample_interpolate_dask(self, chunked_time):\n             # done here due to floating point arithmetic\n             assert_allclose(expected, actual, rtol=1e-16)\n \n+    @pytest.mark.skipif(has_pandas_version_two, reason=\"requires pandas < 2.0.0\")\n     def test_resample_base(self) -> None:\n         times = pd.date_range(\"2000-01-01T02:03:01\", freq=\"6H\", periods=10)\n         array = DataArray(np.arange(10), [(\"time\", times)])\n \n         base = 11\n-        actual = array.resample(time=\"24H\", base=base).mean()\n+\n+        with pytest.warns(FutureWarning, match=\"the `base` parameter to resample\"):\n+            actual = array.resample(time=\"24H\", base=base).mean()\n         expected = DataArray(array.to_series().resample(\"24H\", base=base).mean())\n         assert_identical(expected, actual)\n \n@@ -1829,6 +1826,32 @@ def test_resample_origin(self) -> None:\n         expected = DataArray(array.to_series().resample(\"24H\", origin=origin).mean())\n         assert_identical(expected, actual)\n \n+    @pytest.mark.skipif(has_pandas_version_two, reason=\"requires pandas < 2.0.0\")\n+    @pytest.mark.parametrize(\n+        \"loffset\",\n+        [\n+            \"-12H\",\n+            datetime.timedelta(hours=-12),\n+            pd.Timedelta(hours=-12),\n+            pd.DateOffset(hours=-12),\n+        ],\n+    )\n+    def test_resample_loffset(self, loffset) -> None:\n+        times = pd.date_range(\"2000-01-01\", freq=\"6H\", periods=10)\n+        array = DataArray(np.arange(10), [(\"time\", times)])\n+\n+        with pytest.warns(FutureWarning, match=\"`loffset` parameter\"):\n+            actual = array.resample(time=\"24H\", loffset=loffset).mean()\n+        expected = DataArray(array.to_series().resample(\"24H\", loffset=loffset).mean())\n+        assert_identical(actual, expected)\n+\n+    def test_resample_invalid_loffset(self) -> None:\n+        times = pd.date_range(\"2000-01-01\", freq=\"6H\", periods=10)\n+        array = DataArray(np.arange(10), [(\"time\", times)])\n+\n+        with pytest.raises(ValueError, match=\"`loffset` must be\"):\n+            array.resample(time=\"24H\", loffset=1).mean()  # type: ignore\n+\n \n class TestDatasetResample:\n     def test_resample_and_first(self):\n",
  "problem_statement": "⚠️ Nightly upstream-dev CI failed ⚠️: `pandas` removed deprecated keyword arguments\n[Workflow Run URL](https://github.com/pydata/xarray/actions/runs/3484189981)\n<details><summary>Python 3.10 Test Summary</summary>\n\n```\nxarray/tests/test_calendar_ops.py::test_convert_calendar[2 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[4 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[2 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_calendar_ops.py::test_convert_calendar_missing[2 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_calendar_ops.py::test_convert_calendar_same_calendar[1 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_calendar_ops.py::test_interp_calendar[4 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_calendar_ops.py::test_interp_calendar_errors[1 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_cftime_offsets.py::test_date_range[4 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_cftime_offsets.py::test_date_range_errors[1 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_cftime_offsets.py::test_date_range_like[5 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_cftime_offsets.py::test_date_range_like_same_calendar[1 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_cftime_offsets.py::test_date_range_like_errors[1 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_cftimeindex_resample.py::test_resample[486 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_cftimeindex_resample.py::test_calendars[5 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_computation.py::test_polyval_cftime[4 failing variants]: TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_resample[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_da_resample_func_args[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_resample_first[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_resample_bad_resample_dim[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_resample_drop_nondim_coords[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_resample_keep_attrs[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_resample_skipna[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_upsample[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_nd[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_tolerance[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_bug_2197[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_regression_1605[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_dask[2 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDatasetResample::test_resample_and_first[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDatasetResample::test_resample_min_count[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_mean_with_keep_attrs[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDatasetResample::test_resample_loffset[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_mean_discarding_attrs[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDatasetResample::test_resample_drop_nondim_coords[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDatasetResample::test_resample_ds_da_are_the_same[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::TestDatasetResample::test_ds_resample_apply_func_args[1 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_groupby.py::test_resample_cumsum[2 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_units.py::TestDataArray::test_resample[2 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\nxarray/tests/test_units.py::TestDataset::test_resample[4 failing variants]: TypeError: Grouper.__init__() got an unexpected keyword argument 'base'\n```\n\n</details>\n\n",
  "hints_text": "Looks to be a result of https://github.com/pandas-dev/pandas/pull/49101/files\r\n\r\nSeems like we have to change to `origin` or `offset` somewhere\nYes, I think so too.  I can look into it more this weekend.  Clearly we need to change the code that relies on pandas immediately.  For resampling with a `CFTimeIndex` I may create a separate issue for implementing these new arguments (we can probably get those tests passing in the meantime, however).\nWe also still have https://github.com/pydata/xarray/issues/6985 open.\n\nMaybe we should try to catch Deprecation warnings in the nightly builds and raise an error / Automatic issue, so we can fix things before they break.\nI went ahead and actually implemented the `origin` and `offset` options for the `CFTimeIndex` version of resample as part of #7284.  It might be good to finish that and then we can decide how we would like to handle the deprecation.\r\n\r\n> Maybe we should try to catch Deprecation warnings in the nightly builds and raise an error / Automatic issue, so we can fix things before they break.\r\n\r\nI agree -- something like that would be useful in general.  In this particular case it seems like we were aware of it at one point, but just lost track after silencing it initially for compatibility reasons (https://github.com/pydata/xarray/pull/4292#issuecomment-691665611).  Unfortunately that means that this was silenced in user code as well.\nPerhaps we can at least restore the warning in #7284 in case our next release happens to take place before the next pandas release to give users somewhat of a heads up.  Apologies for being a bit out of the loop of #4292 at the time.\nmaybe we can extend the action / create a new one to open one issue per unique deprecation message. However, for that we'd need to log the warnings in the `reportlog` output, which as far as I can tell `pytest-reportlog` does not support at the moment.\nwe've got a few more errors now:\r\n```\r\nTypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'\r\n```\r\n\r\nI've renamed this issue to allow tracking more recent failures in new issues.\nShould we add some sort of deprecation warning regarding the use of the `base` argument with future versions of pandas before the next release?\r\n\r\n(I did not end up restoring the pandas warning in #7284)\n> Should we add some sort of deprecation warning regarding the use of the base argument with future versions of pandas before the next release?\r\n\r\nThat would be nice. It seems like we could also just do it in a later release?\nSorry I didn't get to adding the warning today.  I'll try and put something together over the weekend so that it gets into the release after today's.  I'm not sure exactly when pandas 2.0 will be out, but regardless I guess at least it could still be valuable for anyone who doesn't upgrade xarray and pandas at the same time.\nAs I think about this more, it wouldn't be too hard for us to support the `base` argument even after pandas removes it, so perhaps this isn't so urgent (at least as far as deprecation is concerned; we still need to make updates for compatibility, however).  The code to translate a `base` argument to an `offset` argument can be found [here](https://github.com/pandas-dev/pandas/blob/bca35ff73f101b29106111703021fccc8781be7a/pandas/core/resample.py#L1668-L1678), and is all possible with public API functionality.  I already did something similar for the CFTimeIndex resampling code in #7284.\r\n\r\nMaybe you were already thinking along those lines @dcherian.",
  "created_at": "2023-01-16T19:16:39Z",
  "version": "2022.09",
  "FAIL_TO_PASS": "[\"xarray/tests/test_groupby.py::test_consolidate_slices\", \"xarray/tests/test_groupby.py::test_groupby_dims_property\", \"xarray/tests/test_groupby.py::test_multi_index_groupby_map\", \"xarray/tests/test_groupby.py::test_reduce_numeric_only\", \"xarray/tests/test_groupby.py::test_multi_index_groupby_sum\", \"xarray/tests/test_groupby.py::test_groupby_da_datetime\", \"xarray/tests/test_groupby.py::test_groupby_duplicate_coordinate_labels\", \"xarray/tests/test_groupby.py::test_groupby_input_mutation\", \"xarray/tests/test_groupby.py::test_groupby_map_shrink_groups[obj0]\", \"xarray/tests/test_groupby.py::test_groupby_map_shrink_groups[obj1]\", \"xarray/tests/test_groupby.py::test_groupby_map_change_group_size[obj0]\", \"xarray/tests/test_groupby.py::test_groupby_map_change_group_size[obj1]\", \"xarray/tests/test_groupby.py::test_da_groupby_map_func_args\", \"xarray/tests/test_groupby.py::test_ds_groupby_map_func_args\", \"xarray/tests/test_groupby.py::test_da_groupby_empty\", \"xarray/tests/test_groupby.py::test_da_groupby_quantile\", \"xarray/tests/test_groupby.py::test_ds_groupby_quantile\", \"xarray/tests/test_groupby.py::test_groupby_quantile_interpolation_deprecated[False]\", \"xarray/tests/test_groupby.py::test_groupby_quantile_interpolation_deprecated[True]\", \"xarray/tests/test_groupby.py::test_da_groupby_assign_coords\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj0-x]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj0-y]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj0-z]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj0-month]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj1-x]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj1-y]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj1-z]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj1-month]\", \"xarray/tests/test_groupby.py::test_groupby_repr_datetime[obj0]\", \"xarray/tests/test_groupby.py::test_groupby_repr_datetime[obj1]\", \"xarray/tests/test_groupby.py::test_groupby_drops_nans\", \"xarray/tests/test_groupby.py::test_groupby_grouping_errors\", \"xarray/tests/test_groupby.py::test_groupby_reduce_dimension_error\", \"xarray/tests/test_groupby.py::test_groupby_multiple_string_args\", \"xarray/tests/test_groupby.py::test_groupby_bins_timeseries\", \"xarray/tests/test_groupby.py::test_groupby_none_group_name\", \"xarray/tests/test_groupby.py::test_groupby_getitem\", \"xarray/tests/test_groupby.py::test_groupby_dataset\", \"xarray/tests/test_groupby.py::test_groupby_dataset_returns_new_type\", \"xarray/tests/test_groupby.py::test_groupby_dataset_iter\", \"xarray/tests/test_groupby.py::test_groupby_dataset_errors\", \"xarray/tests/test_groupby.py::test_groupby_dataset_reduce\", \"xarray/tests/test_groupby.py::test_groupby_dataset_math[True]\", \"xarray/tests/test_groupby.py::test_groupby_dataset_math[False]\", \"xarray/tests/test_groupby.py::test_groupby_math_more\", \"xarray/tests/test_groupby.py::test_groupby_bins_math[True]\", \"xarray/tests/test_groupby.py::test_groupby_bins_math[False]\", \"xarray/tests/test_groupby.py::test_groupby_math_nD_group\", \"xarray/tests/test_groupby.py::test_groupby_dataset_math_virtual\", \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\", \"xarray/tests/test_groupby.py::test_groupby_dataset_nan\", \"xarray/tests/test_groupby.py::test_groupby_dataset_order\", \"xarray/tests/test_groupby.py::test_groupby_dataset_fillna\", \"xarray/tests/test_groupby.py::test_groupby_dataset_where\", \"xarray/tests/test_groupby.py::test_groupby_dataset_assign\", \"xarray/tests/test_groupby.py::test_groupby_dataset_map_dataarray_func\", \"xarray/tests/test_groupby.py::test_groupby_dataarray_map_dataset_func\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_stack_groupby_unsorted_coord\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_iter\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_properties\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-x-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-y-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-y-True]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-abc-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-x-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-y-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-y-True]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-abc-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-x-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-y-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-y-True]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-abc-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-x-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-y-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-y-True]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-abc-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_sum\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reductions[sum]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reductions[mean]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reductions[median]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_count\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[None-True]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[None-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[True-True]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[True-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[False-True]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[False-False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_keep_attrs[None]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_keep_attrs[True]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_keep_attrs[False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_center\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_ndarray\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_changes_metadata\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math_squeeze[True]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math_squeeze[False]\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math_not_aligned\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_coord_dims\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_first_and_last\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_multidim\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_multidim_map\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins_empty\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins_multidim\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins_sort\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_assign_coords\", \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_fillna\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_da_resample_func_args\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_first\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_bad_resample_dim\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_keep_attrs\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_skipna\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_nd\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_tolerance\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_base\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_origin\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[-12H]\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[loffset1]\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[loffset2]\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[loffset3]\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_invalid_loffset\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_and_first\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_min_count\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_mean_with_keep_attrs\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_loffset\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_mean_discarding_attrs\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_old_api\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_ds_da_are_the_same\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_ds_resample_apply_func_args\", \"xarray/tests/test_groupby.py::test_groupby_cumsum\", \"xarray/tests/test_groupby.py::test_groupby_cumprod\", \"xarray/tests/test_groupby.py::test_resample_cumsum[cumsum-expected_array0]\", \"xarray/tests/test_groupby.py::test_resample_cumsum[cumprod-expected_array1]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-8003D->4001D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-8003D->16006D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-8003D->21AS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-6H->3H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-6H->12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-6H->400T]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3D->D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3D->6D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11D->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3MS->MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3MS->6MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3MS->85D]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7M->3M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7M->14M]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7M->2QS-APR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-43QS-AUG->21QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-43QS-AUG->86QS-AUG]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-43QS-AUG->11A-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11Q-JUN->5Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11Q-JUN->22Q-JUN]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11Q-JUN->51MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3AS-MAR->AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3AS-MAR->6AS-MAR]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3AS-MAR->14Q-FEB]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7A-MAY->3A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7A-MAY->14A-MAY]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7A-MAY->85M]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[S-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[T-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[H-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[D-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[M-right]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[MS-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[Q-right]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[QS-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[A-right]\", \"xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[AS-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_calendars[gregorian]\", \"xarray/tests/test_cftimeindex_resample.py::test_calendars[noleap]\", \"xarray/tests/test_cftimeindex_resample.py::test_calendars[all_leap]\", \"xarray/tests/test_cftimeindex_resample.py::test_calendars[360_day]\", \"xarray/tests/test_cftimeindex_resample.py::test_calendars[julian]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[start_day-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[start_day-right]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[start-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[start-right]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[end-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[end-right]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[end_day-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[end_day-right]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[epoch-left]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[epoch-right]\", \"xarray/tests/test_cftimeindex_resample.py::test_origin[(1970,\", \"xarray/tests/test_cftimeindex_resample.py::test_base_and_offset_error\", \"xarray/tests/test_cftimeindex_resample.py::test_invalid_offset_error[foo]\", \"xarray/tests/test_cftimeindex_resample.py::test_invalid_offset_error[5MS]\", \"xarray/tests/test_cftimeindex_resample.py::test_invalid_offset_error[10]\", \"xarray/tests/test_cftimeindex_resample.py::test_timedelta_offset\", \"xarray/tests/test_cftimeindex_resample.py::test_resample_loffset_cftimeindex[12H]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample_loffset_cftimeindex[loffset1]\", \"xarray/tests/test_cftimeindex_resample.py::test_resample_invalid_loffset_cftimeindex\", \"xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset[1-10S]\", \"xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset[17-3H]\", \"xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset[15-5U]\", \"xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset_invalid_index\", \"xarray/tests/test_groupby.py::test_groupby_flox_kwargs[kwargs0]\", \"xarray/tests/test_groupby.py::test_groupby_flox_kwargs[kwargs1]\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_drop_nondim_coords\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_bug_2197\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_regression_1605\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_dask[True]\", \"xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_dask[False]\", \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_drop_nondim_coords\"]",
  "environment_setup_commit": "087ebbb78668bdf5d2d41c3b2553e3f29ce75be1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.906269",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}