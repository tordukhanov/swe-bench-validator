{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-11160",
  "base_commit": "87a3910e1734b69ccfcf12c5668d549fccffb7b0",
  "patch": "diff --git a/sklearn/metrics/classification.py b/sklearn/metrics/classification.py\n--- a/sklearn/metrics/classification.py\n+++ b/sklearn/metrics/classification.py\n@@ -1427,7 +1427,7 @@ def balanced_accuracy_score(y_true, y_pred, sample_weight=None):\n \n \n def classification_report(y_true, y_pred, labels=None, target_names=None,\n-                          sample_weight=None, digits=2):\n+                          sample_weight=None, digits=2, output_dict=False):\n     \"\"\"Build a text report showing the main classification metrics\n \n     Read more in the :ref:`User Guide <classification_report>`.\n@@ -1452,10 +1452,22 @@ def classification_report(y_true, y_pred, labels=None, target_names=None,\n     digits : int\n         Number of digits for formatting output floating point values\n \n+    output_dict: bool (default = False)\n+        If True, return output as dict\n+\n     Returns\n     -------\n-    report : string\n+    report : string / dict\n         Text summary of the precision, recall, F1 score for each class.\n+        Dictionary returned if output_dict is True. Dictionary has the\n+        following structure:\n+            {'label 1': {'precision':0.5,\n+                         'recall':1.0,\n+                         'f1-score':0.67,\n+                         'support':1},\n+             'label 2': { ... },\n+              ...\n+            }\n \n         The reported averages are a prevalence-weighted macro-average across\n         classes (equivalent to :func:`precision_recall_fscore_support` with\n@@ -1522,17 +1534,30 @@ class 2       1.00      0.67      0.80         3\n \n     row_fmt = u'{:>{width}s} ' + u' {:>9.{digits}f}' * 3 + u' {:>9}\\n'\n     rows = zip(target_names, p, r, f1, s)\n+\n+    avg_total = [np.average(p, weights=s),\n+                 np.average(r, weights=s),\n+                 np.average(f1, weights=s),\n+                 np.sum(s)]\n+\n+    if output_dict:\n+        report_dict = {label[0]: label[1:] for label in rows}\n+\n+        for label, scores in report_dict.items():\n+            report_dict[label] = dict(zip(headers, scores))\n+\n+        report_dict['avg / total'] = dict(zip(headers, avg_total))\n+\n+        return report_dict\n+\n     for row in rows:\n         report += row_fmt.format(*row, width=width, digits=digits)\n \n     report += u'\\n'\n \n-    # compute averages\n+    # append averages\n     report += row_fmt.format(last_line_heading,\n-                             np.average(p, weights=s),\n-                             np.average(r, weights=s),\n-                             np.average(f1, weights=s),\n-                             np.sum(s),\n+                             *avg_total,\n                              width=width, digits=digits)\n \n     return report\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_classification.py b/sklearn/metrics/tests/test_classification.py\n--- a/sklearn/metrics/tests/test_classification.py\n+++ b/sklearn/metrics/tests/test_classification.py\n@@ -12,7 +12,7 @@\n from sklearn.datasets import make_multilabel_classification\n from sklearn.preprocessing import label_binarize\n from sklearn.utils.validation import check_random_state\n-\n+from sklearn.utils.testing import assert_dict_equal\n from sklearn.utils.testing import assert_raises, clean_warning_registry\n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.testing import assert_equal\n@@ -101,6 +101,36 @@ def make_prediction(dataset=None, binary=False):\n ###############################################################################\n # Tests\n \n+def test_classification_report_dictionary_output():\n+\n+    # Test performance report with dictionary output\n+    iris = datasets.load_iris()\n+    y_true, y_pred, _ = make_prediction(dataset=iris, binary=False)\n+\n+    # print classification report with class names\n+    expected_report = {'setosa': {'precision': 0.82608695652173914,\n+                                  'recall': 0.79166666666666663,\n+                                  'f1-score': 0.8085106382978724,\n+                                  'support': 24},\n+                       'versicolor': {'precision': 0.33333333333333331,\n+                                      'recall': 0.096774193548387094,\n+                                      'f1-score': 0.15000000000000002,\n+                                      'support': 31},\n+                       'virginica': {'precision': 0.41860465116279072,\n+                                     'recall': 0.90000000000000002,\n+                                     'f1-score': 0.57142857142857151,\n+                                     'support': 20},\n+                       'avg / total': {'precision': 0.51375351084147847,\n+                                       'recall': 0.53333333333333333,\n+                                       'f1-score': 0.47310435663627154,\n+                                       'support': 75}}\n+\n+    report = classification_report(\n+        y_true, y_pred, labels=np.arange(len(iris.target_names)),\n+        target_names=iris.target_names, output_dict=True)\n+\n+    assert_dict_equal(report, expected_report)\n+\n \n def test_multilabel_accuracy_score_subset_accuracy():\n     # Dense label indicator matrix format\n",
  "problem_statement": "`classification_report` output options? \nIs it possible to add output options to http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html.  It would be really useful to have a `pd.DataFrame` output or `xr.DataArray` output.  Right now it outputs as a string that must be printed but it's difficult to use the results.  I can make a quick helper script if that could be useful? \n[MRG] Classification report Dict-of-Dicts output\n<!--\r\nThanks for contributing a pull request! Please ensure you have taken a look at\r\nthe contribution guidelines: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#Contributing-Pull-Requests\r\n-->\r\n#### Reference Issue\r\n<!-- Example: Fixes #1234 -->\r\nFixes #7845 \r\n\r\n#### What does this implement/fix? Explain your changes.\r\nThis PR adds an option of returning the classification report in the form of a Dictionary of Dictionaries.\r\n\r\n#### Any other comments?\r\nWill add tests for the code, if the code is approved.\r\n\r\n\r\n<!--\r\nPlease be aware that we are a loose team of volunteers so patience is\r\nnecessary; assistance handling other issues is very welcome. We value\r\nall user contributions, no matter how minor they are. If we are slow to\r\nreview, either the pull request needs some benchmarking, tinkering,\r\nconvincing, etc. or more likely the reviewers are simply busy. In either\r\ncase, we ask for your understanding during the review process.\r\nFor more information, see our FAQ on this topic:\r\nhttp://scikit-learn.org/dev/faq.html#why-is-my-pull-request-not-getting-any-attention.\r\n\r\nThanks for contributing!\r\n-->\r\n\n",
  "hints_text": "We're not going to accept a Pandas dependency etc. But a dict-of-arrays\noutput might be appropriarte.\n\nOn 9 November 2016 at 12:42, Josh L. Espinoza notifications@github.com\nwrote:\n\n> Is it possible to add output options to http://scikit-learn.org/\n> stable/modules/generated/sklearn.metrics.classification_report.html. It\n> would be really useful to have a pd.DataFrame output or xr.DataArray\n> output. Right now it outputs as a string that must be printed but it's\n> difficult to use the results. I can make a quick helper script if that\n> could be useful?\n> \n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/scikit-learn/scikit-learn/issues/7845, or mute the\n> thread\n> https://github.com/notifications/unsubscribe-auth/AAEz6_2dK_NQXmu2GvaIYPqc4PpSmyfMks5q8SUegaJpZM4KtG75\n> .\n\nSounds good to me.  I'll write something up tomorrow and send it over.\n\n> On Nov 8, 2016, at 6:07 PM, Joel Nothman notifications@github.com wrote:\n> \n> We're not going to accept a Pandas dependency etc. But a dict-of-arrays\n> output might be appropriarte.\n> \n> On 9 November 2016 at 12:42, Josh L. Espinoza notifications@github.com\n> wrote:\n> \n> > Is it possible to add output options to http://scikit-learn.org/\n> > stable/modules/generated/sklearn.metrics.classification_report.html. It\n> > would be really useful to have a pd.DataFrame output or xr.DataArray\n> > output. Right now it outputs as a string that must be printed but it's\n> > difficult to use the results. I can make a quick helper script if that\n> > could be useful?\n> > \n> > —\n> > You are receiving this because you are subscribed to this thread.\n> > Reply to this email directly, view it on GitHub\n> > https://github.com/scikit-learn/scikit-learn/issues/7845, or mute the\n> > thread\n> > https://github.com/notifications/unsubscribe-auth/AAEz6_2dK_NQXmu2GvaIYPqc4PpSmyfMks5q8SUegaJpZM4KtG75\n> > .\n> > \n> > —\n> > You are receiving this because you authored the thread.\n> > Reply to this email directly, view it on GitHub, or mute the thread.\n\nHi, I would like to work on this issue. Can I go ahead with it?\r\n\nThis might not be the most elegant way but it works: \r\n```\r\nfrom sklearn.metrics import classification_report\r\nfrom collections import defaultdict\r\n\r\ny_true = [0, 1, 2, 2, 2]\r\ny_pred = [0, 0, 2, 2, 1]\r\ntarget_names = ['class 0', 'class 1', 'class 2']\r\n\r\ndef report2dict(cr):\r\n    # Parse rows\r\n    tmp = list()\r\n    for row in cr.split(\"\\n\"):\r\n        parsed_row = [x for x in row.split(\"  \") if len(x) > 0]\r\n        if len(parsed_row) > 0:\r\n            tmp.append(parsed_row)\r\n    \r\n    # Store in dictionary\r\n    measures = tmp[0]\r\n\r\n    D_class_data = defaultdict(dict)\r\n    for row in tmp[1:]:\r\n        class_label = row[0]\r\n        for j, m in enumerate(measures):\r\n            D_class_data[class_label][m.strip()] = float(row[j + 1].strip())\r\n    return D_class_data\r\n\r\nreport2dict(classification_report(y_true, y_pred, target_names=target_names))\r\n# defaultdict(dict,\r\n#             {'avg / total': {'f1-score': 0.61,\r\n#               'precision': 0.7,\r\n#               'recall': 0.6,\r\n#               'support': 5.0},\r\n#              'class 0': {'f1-score': 0.67,\r\n#               'precision': 0.5,\r\n#               'recall': 1.0,\r\n#               'support': 1.0},\r\n#              'class 1': {'f1-score': 0.0,\r\n#               'precision': 0.0,\r\n#               'recall': 0.0,\r\n#               'support': 1.0},\r\n#              'class 2': {'f1-score': 0.8,\r\n#               'precision': 1.0,\r\n#               'recall': 0.67,\r\n#               'support': 3.0}})\r\n\r\npd.DataFrame(report2dict(classification_report(y_true, y_pred, target_names=target_names))).T\r\n#              f1-score  precision  recall  support\r\n# avg / total      0.61        0.7    0.60      5.0\r\n# class 0          0.67        0.5    1.00      1.0\r\n# class 1          0.00        0.0    0.00      1.0\r\n# class 2          0.80        1.0    0.67      3.0\r\n```\n@jolespin Would it not be a better way to formulate a dict-of-arrays classification report while creating the classification report itself, in sklearn/metrics. Instead of having to convert an existing classification report.\nYes, that makes a lot more sense.  The code above was just a quick fix if somebody needed something temporary to convert the output into something indexable.  I don't have time to work on this but if you could take it over that would be awesome 👍 \n@jnothman Shall I create a PR to add a dict-of-arrays output option to classification report?\r\n\nDict of dicts is okay too. Sure, let's see what others think of it once\nit's in code.\n\nOn 21 January 2017 at 05:06, wazeerzulfikar <notifications@github.com>\nwrote:\n\n> @jnothman <https://github.com/jnothman> Shall I create a PR to add a\n> dict-of-arrays output option to classification report?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/7845#issuecomment-274138830>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz66xeI5ostMLCz7RLuCXC9GRjtXyjks5rUPeogaJpZM4KtG75>\n> .\n>\n\n@jolespin thank you!\n@jolespin thank you!\r\nbut, There seems to be a space in variable 'class_label'.\r\n```\r\nclass_label = row[0].strip()\r\n```\r\nThis works well.\r\nThank you!\nThanks for the PR. There's quite a backlog of reviewing to do, so please be patient!\nAlso, at a glance, I think this should be marked MRG: you intend no further work before review.\n@jnothman  An assertion error is being raised in the travis build , but when running on my local machine the error is not raised. What could possibly be the reason for this?\r\n\nTry, please, to simplify the implementation.\r\n\r\nFormatting as string and then converting to float is not appropriate.\n@wazeerzulfikar thank you for your work!\r\nI see no further advancement has been made in the last 6 months.\r\n@jnothman are there any plans to milestone this?\nI don't think this is a roadmap-style feature. If someone submits a working, cleanly coded implementation, it will likely get merged, whenever that's done and reviewers are available.",
  "created_at": "2018-05-29T17:50:47Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_classification_report_dictionary_output\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_multilabel_accuracy_score_subset_accuracy\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_binary_single_class\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_extra_labels\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_ignored_labels\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_score_non_binary_class\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_duplicate_values\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_tied_values\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_fscore_support_errors\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_unused_pos_label\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_cohen_kappa\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_nan\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_numpy_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_jurman\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary_averaged\", \"sklearn/metrics/tests/test_classification.py::test_zero_precision_recall\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_sample_weight\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_multiclass_subset_labels\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_dtype\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_digits\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_unicode_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_long_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_no_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_classification_report\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_zero_one_loss_subset\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_hamming_loss\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_similarity_score\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_2\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels\", \"sklearn/metrics/tests/test_classification.py::test_prf_warnings\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings\", \"sklearn/metrics/tests/test_classification.py::test_prf_average_binary_data_non_binary\", \"sklearn/metrics/tests/test_classification.py::test__check_targets\", \"sklearn/metrics/tests/test_classification.py::test__check_targets_multiclass_with_both_y_true_and_y_pred_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_with_labels_none\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_with_missing_labels\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_invariance_lists\", \"sklearn/metrics/tests/test_classification.py::test_log_loss\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_pandas_input\", \"sklearn/metrics/tests/test_classification.py::test_brier_score_loss\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.959201",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}