{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-25672",
  "base_commit": "49a937e974190b4ab20c7506052ce8a67c129da1",
  "patch": "diff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py\n--- a/sklearn/metrics/_ranking.py\n+++ b/sklearn/metrics/_ranking.py\n@@ -1733,10 +1733,16 @@ def ndcg_score(y_true, y_score, *, k=None, sample_weight=None, ignore_ties=False\n     if y_true.min() < 0:\n         # TODO(1.4): Replace warning w/ ValueError\n         warnings.warn(\n-            \"ndcg_score should not be used on negative y_true values. ndcg_score will\"\n-            \" raise a ValueError on negative y_true values starting from version 1.4.\",\n+            \"ndcg_score should not be used on negative y_true values. ndcg_score\"\n+            \" will raise a ValueError on negative y_true values starting from\"\n+            \" version 1.4.\",\n             FutureWarning,\n         )\n+    if y_true.ndim > 1 and y_true.shape[1] <= 1:\n+        raise ValueError(\n+            \"Computing NDCG is only meaningful when there is more than 1 document. \"\n+            f\"Got {y_true.shape[1]} instead.\"\n+        )\n     _check_dcg_target_type(y_true)\n     gain = _ndcg_sample_scores(y_true, y_score, k=k, ignore_ties=ignore_ties)\n     return np.average(gain, weights=sample_weight)\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_ranking.py b/sklearn/metrics/tests/test_ranking.py\n--- a/sklearn/metrics/tests/test_ranking.py\n+++ b/sklearn/metrics/tests/test_ranking.py\n@@ -1535,7 +1535,6 @@ def test_lrap_error_raised():\n @pytest.mark.parametrize(\"n_classes\", (2, 5, 10))\n @pytest.mark.parametrize(\"random_state\", range(1))\n def test_alternative_lrap_implementation(n_samples, n_classes, random_state):\n-\n     check_alternative_lrap_implementation(\n         label_ranking_average_precision_score, n_classes, n_samples, random_state\n     )\n@@ -1835,6 +1834,17 @@ def test_ndcg_toy_examples(ignore_ties):\n     assert ndcg_score(y_true, y_score, ignore_ties=ignore_ties) == pytest.approx(1.0)\n \n \n+def test_ndcg_error_single_document():\n+    \"\"\"Check that we raise an informative error message when trying to\n+    compute NDCG with a single document.\"\"\"\n+    err_msg = (\n+        \"Computing NDCG is only meaningful when there is more than 1 document. \"\n+        \"Got 1 instead.\"\n+    )\n+    with pytest.raises(ValueError, match=err_msg):\n+        ndcg_score([[1]], [[1]])\n+\n+\n def test_ndcg_score():\n     _, y_true = make_multilabel_classification(random_state=0, n_classes=10)\n     y_score = -y_true + 1\n",
  "problem_statement": "NDCG score doesn't work with binary relevance and a list of 1 element\nSee this code example:\r\n```\r\n>>> t = [[1]]\r\n>>> p = [[0]]\r\n>>> metrics.ndcg_score(t, p)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/cbournhonesque/.pyenv/versions/bento/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 63, in inner_f\r\n    return f(*args, **kwargs)\r\n  File \"/Users/cbournhonesque/.pyenv/versions/bento/lib/python3.8/site-packages/sklearn/metrics/_ranking.py\", line 1567, in ndcg_score\r\n    _check_dcg_target_type(y_true)\r\n  File \"/Users/cbournhonesque/.pyenv/versions/bento/lib/python3.8/site-packages/sklearn/metrics/_ranking.py\", line 1307, in _check_dcg_target_type\r\n    raise ValueError(\r\nValueError: Only ('multilabel-indicator', 'continuous-multioutput', 'multiclass-multioutput') formats are supported. Got binary instead\r\n```\r\nIt works correctly when the number of elements is bigger than 1: https://stackoverflow.com/questions/64303839/how-to-calculate-ndcg-with-binary-relevances-using-sklearn\nMetric.ndcg score\n#### Reference Issues/PRs\r\n\r\nFixes  #21335 and #20119\r\n\r\n#### What does this implement/fix? Explain your changes.\r\n\r\nComputing [Normalized Discounted Cumulative Gain (NDCG)](https://en.wikipedia.org/wiki/Discounted_cumulative_gain#Normalized_DCG) does not make sense for single predictions. Throw an error if `y_true` is a list of length 1 for NDCG and DCG.\r\n\r\n#### Any other comments?\r\n\r\nTest that this throws the appropriate error by running:\r\n```python\r\nfrom sklearn.metrics import ndcg_score\r\n\r\ny_true = [[1]]\r\ny_pred = [[1]]\r\n\r\nprint(ndcg_score(y_true, y_pred))\r\n```\r\n\r\n<!--\r\nPlease be aware that we are a loose team of volunteers so patience is\r\nnecessary; assistance handling other issues is very welcome. We value\r\nall user contributions, no matter how minor they are. If we are slow to\r\nreview, either the pull request needs some benchmarking, tinkering,\r\nconvincing, etc. or more likely the reviewers are simply busy. In either\r\ncase, we ask for your understanding during the review process.\r\nFor more information, see our FAQ on this topic:\r\nhttp://scikit-learn.org/dev/faq.html#why-is-my-pull-request-not-getting-any-attention.\r\n\r\nThanks for contributing!\r\n-->\r\n\n",
  "hints_text": "It doesn't seem like a well-defined problem in the case of a single input to me. I'm not sure what you'd expect to get\nI'm skipping the computation if there are 0 relevant documents (any(truths) is False), since the metric is undefined.\r\nFor a single input, where truth = [1], I would expect to get 1 if prediction is 1, or 0 if predictions is 0 (according to the ndcg definition)\npinging @jeremiedbb and @jeromedockes who worked on the implementation.\n> I would expect to get 1 if prediction is 1, or 0 if predictions is 0 (according to the ndcg definition)\r\n\r\nwhich ndcg definition, could you point to a reference? (I ask because IIRC there is some variability in the definitions people use).\r\n\r\nNormalized DCG is the ratio between the DCG obtained for the predicted and true rankings, and in my understanding when there is only one possible ranking (when there is only one candidate as in this example), both rankings are the same so this ratio should be 1. (this is the value we obtain if we disable [this check](https://github.com/scikit-learn/scikit-learn/blob/5aecf201a3d9ee8896566a057b3a576f1e31d410/sklearn/metrics/_ranking.py#L1347)).\r\n\r\nhowever, ranking a list of length 1 is not meaningful, so if y_true has only one column it seems more likely that there was a mistake in the formatting/representation of the true gains, or that a user applied this ranking metric to a binary classification task. Therefore raising an error seems reasonable to me, but I guess the message could be improved (although it is hard to guess what was the mistake). showing a warning and returning 1.0 could also be an option\nnote this is a duplicate of #20119 AFAICT\nHI jerome, you are right, I made a mistake. I'm using the definition on wikipedia\r\nIt looks like the results would be 0.0 if the document isn't a relevant one (relevance=0), or 1.0 if it is (relevance > 0). So the returned value could be equal to `y_true[0] > 0.` ?\r\nIn any case, I think that just updating error messages but keeping the current behaviour could be fine too\nindeed when all documents are truly irrelevant and the ndcg is thus 0 / 0 (undefined) currently 0 is returned (as seen [here](https://github.com/scikit-learn/scikit-learn/blob/5aecf201a3d9ee8896566a057b3a576f1e31d410/sklearn/metrics/_ranking.py#L1516)).\r\n\r\nbut still I think measuring ndcg for a list of 1 document is not meaningful (regardless of the value of the relevance), so raising an error about the shape of y_true makes sense.\nSo we should improve the error message in this case.\nI am happy to work on this if it hasnâ€™t been assigned yet\n@georged4s I can see that #24482 has been open but it seems stalled. I think that you can claim the issue and propose a fix. You can also look at the review done in the older PR.\nThanks @glemaitre for replying and for the heads up. Cool, I will look into this one.\nI came here as I have suffered the same problem, it doesn't support binary targets.\r\n\r\nAlso, it would be great if it could be calculated simultaneously for a batch of users.\nHi, there doesn't seem to be a linked PR (excluding the stalled one), could I pick it up? \nPicking it up as part of the PyLadies \"Contribute to scikit-learn\" workshop\nHey there @mae5357, thank you for the contribution! Could you please:\r\n1. Add some tests to confirm that the new error is properly raised?\r\n2. Add a changelog entry describing the addition of the new error?\r\n\r\nRegarding the code, I wonder if it would make sense just to include the check in `_check_dcg_traget_type` that way we don't need to introduce a new private function that could otherwise be easily inline.\nI see a failed check on test coverege \nHi @mae5357 Do you plan to continue working on this? If not, I'd like to continue.",
  "created_at": "2023-02-23T19:32:21Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_ranking.py::test_ndcg_error_single_document\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_ranking.py::test_roc_curve[True]\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve[False]\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_end_points\", \"sklearn/metrics/tests/test_ranking.py::test_roc_returns_consistency\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_multi\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_confidence\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_hard\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_one_label\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_toydata\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_drop_intermediate\", \"sklearn/metrics/tests/test_ranking.py::test_roc_curve_fpr_tpr_increasing\", \"sklearn/metrics/tests/test_ranking.py::test_auc\", \"sklearn/metrics/tests/test_ranking.py::test_auc_errors\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovo_roc_auc_toydata[y_true0-labels0]\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovo_roc_auc_toydata[y_true1-None]\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovo_roc_auc_toydata[y_true2-labels2]\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovo_roc_auc_toydata[y_true3-None]\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovo_roc_auc_toydata_binary[y_true0-labels0]\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovo_roc_auc_toydata_binary[y_true1-labels1]\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovr_roc_auc_toydata[y_true0-None]\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovr_roc_auc_toydata[y_true1-None]\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovr_roc_auc_toydata[y_true2-labels2]\", \"sklearn/metrics/tests/test_ranking.py::test_multiclass_ovr_roc_auc_toydata[y_true3-labels3]\", \"sklearn/metrics/tests/test_ranking.py::test_perfect_imperfect_chance_multiclass_roc_auc[ovr-macro]\", \"sklearn/metrics/tests/test_ranking.py::test_perfect_imperfect_chance_multiclass_roc_auc[ovr-micro]\", \"sklearn/metrics/tests/test_ranking.py::test_perfect_imperfect_chance_multiclass_roc_auc[ovo-macro]\", \"sklearn/metrics/tests/test_ranking.py::test_micro_averaged_ovr_roc_auc[42]\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_labels_error[ovo-Parameter\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_labels_error[ovo-Number\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_labels_error[ovo-'y_true'\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_labels_error[ovr-Parameter\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_labels_error[ovr-Number\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_labels_error[ovr-'y_true'\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_error[average\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_error[sample_weight\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_error[Partial\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_error[multi_class='ovp'\", \"sklearn/metrics/tests/test_ranking.py::test_roc_auc_score_multiclass_error[multi_class\", \"sklearn/metrics/tests/test_ranking.py::test_auc_score_non_binary_class\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve_multiclass_error[det_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve_multiclass_error[precision_recall_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve_multiclass_error[roc_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve_implicit_pos_label[det_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve_implicit_pos_label[precision_recall_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve_implicit_pos_label[roc_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve_zero_sample_weight[det_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve_zero_sample_weight[precision_recall_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_binary_clf_curve_zero_sample_weight[roc_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_precision_recall_curve\", \"sklearn/metrics/tests/test_ranking.py::test_precision_recall_curve_toydata\", \"sklearn/metrics/tests/test_ranking.py::test_average_precision_constant_values\", \"sklearn/metrics/tests/test_ranking.py::test_average_precision_score_pos_label_errors\", \"sklearn/metrics/tests/test_ranking.py::test_score_scale_invariance\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true0-y_score0-expected_fpr0-expected_fnr0]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true1-y_score1-expected_fpr1-expected_fnr1]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true2-y_score2-expected_fpr2-expected_fnr2]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true3-y_score3-expected_fpr3-expected_fnr3]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true4-y_score4-expected_fpr4-expected_fnr4]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true5-y_score5-expected_fpr5-expected_fnr5]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true6-y_score6-expected_fpr6-expected_fnr6]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true7-y_score7-expected_fpr7-expected_fnr7]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true8-y_score8-expected_fpr8-expected_fnr8]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true9-y_score9-expected_fpr9-expected_fnr9]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true10-y_score10-expected_fpr10-expected_fnr10]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true11-y_score11-expected_fpr11-expected_fnr11]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true12-y_score12-expected_fpr12-expected_fnr12]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true13-y_score13-expected_fpr13-expected_fnr13]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true14-y_score14-expected_fpr14-expected_fnr14]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true15-y_score15-expected_fpr15-expected_fnr15]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true16-y_score16-expected_fpr16-expected_fnr16]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true17-y_score17-expected_fpr17-expected_fnr17]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true18-y_score18-expected_fpr18-expected_fnr18]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_toydata[y_true19-y_score19-expected_fpr19-expected_fnr19]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_tie_handling[y_true0-y_score0-expected_fpr0-expected_fnr0]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_tie_handling[y_true1-y_score1-expected_fpr1-expected_fnr1]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_tie_handling[y_true2-y_score2-expected_fpr2-expected_fnr2]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_tie_handling[y_true3-y_score3-expected_fpr3-expected_fnr3]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_tie_handling[y_true4-y_score4-expected_fpr4-expected_fnr4]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_tie_handling[y_true5-y_score5-expected_fpr5-expected_fnr5]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_tie_handling[y_true6-y_score6-expected_fpr6-expected_fnr6]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_tie_handling[y_true7-y_score7-expected_fpr7-expected_fnr7]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_sanity_check\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_constant_scores[0]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_constant_scores[0.25]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_constant_scores[0.5]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_constant_scores[0.75]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_constant_scores[1]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_perfect_scores[y_true0]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_perfect_scores[y_true1]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_perfect_scores[y_true2]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_perfect_scores[y_true3]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_perfect_scores[y_true4]\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_bad_input[y_true0-y_pred0-inconsistent\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_bad_input[y_true1-y_pred1-inconsistent\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_bad_input[y_true2-y_pred2-Only\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_bad_input[y_true3-y_pred3-Only\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_bad_input[y_true4-y_pred4-pos_label\", \"sklearn/metrics/tests/test_ranking.py::test_det_curve_pos_label\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[label_ranking_average_precision_score-check_lrap_toy]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[label_ranking_average_precision_score-check_lrap_without_tie_and_increasing_score]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[label_ranking_average_precision_score-check_lrap_only_ties]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[label_ranking_average_precision_score-check_zero_or_all_relevant_labels]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[_my_lrap-check_lrap_toy]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[_my_lrap-check_lrap_without_tie_and_increasing_score]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[_my_lrap-check_lrap_only_ties]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avp[_my_lrap-check_zero_or_all_relevant_labels]\", \"sklearn/metrics/tests/test_ranking.py::test_lrap_error_raised\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-2-1]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-2-2]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-2-8]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-2-20]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-5-1]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-5-2]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-5-8]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-5-20]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-10-1]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-10-2]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-10-8]\", \"sklearn/metrics/tests/test_ranking.py::test_alternative_lrap_implementation[0-10-20]\", \"sklearn/metrics/tests/test_ranking.py::test_lrap_sample_weighting_zero_labels\", \"sklearn/metrics/tests/test_ranking.py::test_coverage_error\", \"sklearn/metrics/tests/test_ranking.py::test_coverage_tie_handling\", \"sklearn/metrics/tests/test_ranking.py::test_coverage_1d_error_message[y_true0-y_score0]\", \"sklearn/metrics/tests/test_ranking.py::test_coverage_1d_error_message[y_true1-y_score1]\", \"sklearn/metrics/tests/test_ranking.py::test_coverage_1d_error_message[y_true2-y_score2]\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_loss\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_appropriate_input_shape\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_loss_ties_handling\", \"sklearn/metrics/tests/test_ranking.py::test_dcg_score\", \"sklearn/metrics/tests/test_ranking.py::test_dcg_ties\", \"sklearn/metrics/tests/test_ranking.py::test_ndcg_ignore_ties_with_k\", \"sklearn/metrics/tests/test_ranking.py::test_ndcg_negative_ndarray_warn\", \"sklearn/metrics/tests/test_ranking.py::test_ndcg_invariant\", \"sklearn/metrics/tests/test_ranking.py::test_ndcg_toy_examples[True]\", \"sklearn/metrics/tests/test_ranking.py::test_ndcg_toy_examples[False]\", \"sklearn/metrics/tests/test_ranking.py::test_ndcg_score\", \"sklearn/metrics/tests/test_ranking.py::test_partial_roc_auc_score\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score[y_true0-1-0.25]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score[y_true1-2-0.5]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score[y_true2-3-0.75]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_binary[y_score0-1-1]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_binary[y_score1-1-0.5]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_binary[y_score2-2-1]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_binary[y_score3-1-1]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_binary[y_score4-1-0.5]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_binary[y_score5-2-1]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_multiclass_with_labels[True-y_true0-0.75-labels0]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_multiclass_with_labels[True-y_true1-0.5-labels1]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_multiclass_with_labels[True-y_true2-0.5-labels2]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_multiclass_with_labels[True-y_true3-0.75-labels3]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_multiclass_with_labels[False-y_true0-0.75-labels0]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_multiclass_with_labels[False-y_true1-0.5-labels1]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_multiclass_with_labels[False-y_true2-0.5-labels2]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_multiclass_with_labels[False-y_true3-0.75-labels3]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_increasing\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_ties[y_true0-1-0.25]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_ties[y_true1-2-0.5]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_ties[y_true2-3-1]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_warning[y_true0-4]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_warning[y_true1-5]\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_error[y_true0-y_score0-None-y\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_error[y_true1-y_score1-None-Number\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_error[y_true2-y_score2-labels2-Parameter\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_error[y_true3-y_score3-labels3-Parameter\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_error[y_true4-y_score4-labels4-Number\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_error[y_true5-y_score5-labels5-'y_true'\", \"sklearn/metrics/tests/test_ranking.py::test_top_k_accuracy_score_error[y_true6-y_score6-None-`y_true`\", \"sklearn/metrics/tests/test_ranking.py::test_label_ranking_avg_precision_score_should_allow_csr_matrix_for_y_true_input\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes0-average_precision_score]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes0-det_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes0-precision_recall_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes0-roc_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes1-average_precision_score]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes1-det_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes1-precision_recall_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes1-roc_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes2-average_precision_score]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes2-det_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes2-precision_recall_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes2-roc_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes3-average_precision_score]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes3-det_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes3-precision_recall_curve]\", \"sklearn/metrics/tests/test_ranking.py::test_ranking_metric_pos_label_types[classes3-roc_curve]\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.021413",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}