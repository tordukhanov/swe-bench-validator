{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-4339",
  "base_commit": "9d959abd39cd787fa7b5d68327d19d3972fe888e",
  "patch": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -79,6 +79,7 @@ def __init__(\n         do_exit=UNUSED_PARAM_SENTINEL,\n     ):  # pylint: disable=redefined-builtin\n         self._rcfile = None\n+        self._output = None\n         self._version_asked = False\n         self._plugins = []\n         self.verbose = None\n@@ -92,6 +93,7 @@ def __init__(\n                     \"rcfile\": (self.cb_set_rcfile, True),\n                     \"load-plugins\": (self.cb_add_plugins, True),\n                     \"verbose\": (self.cb_verbose_mode, False),\n+                    \"output\": (self.cb_set_output, True),\n                 },\n             )\n         except ArgumentPreprocessingError as ex:\n@@ -111,6 +113,17 @@ def __init__(\n                         \"help\": \"Specify a configuration file to load.\",\n                     },\n                 ),\n+                (\n+                    \"output\",\n+                    {\n+                        \"action\": \"callback\",\n+                        \"callback\": Run._return_one,\n+                        \"group\": \"Commands\",\n+                        \"type\": \"string\",\n+                        \"metavar\": \"<file>\",\n+                        \"help\": \"Specify an output file.\",\n+                    },\n+                ),\n                 (\n                     \"init-hook\",\n                     {\n@@ -355,8 +368,18 @@ def __init__(\n         # load plugin specific configuration.\n         linter.load_plugin_configuration()\n \n-        linter.check(args)\n-        score_value = linter.generate_reports()\n+        if self._output:\n+            try:\n+                with open(self._output, \"w\") as output:\n+                    linter.reporter.set_output(output)\n+                    linter.check(args)\n+                    score_value = linter.generate_reports()\n+            except OSError as ex:\n+                print(ex, file=sys.stderr)\n+                sys.exit(32)\n+        else:\n+            linter.check(args)\n+            score_value = linter.generate_reports()\n \n         if do_exit is not UNUSED_PARAM_SENTINEL:\n             warnings.warn(\n@@ -381,6 +404,10 @@ def cb_set_rcfile(self, name, value):\n         \"\"\"callback for option preprocessing (i.e. before option parsing)\"\"\"\n         self._rcfile = value\n \n+    def cb_set_output(self, name, value):\n+        \"\"\"callback for option preprocessing (i.e. before option parsing)\"\"\"\n+        self._output = value\n+\n     def cb_add_plugins(self, name, value):\n         \"\"\"callback for option preprocessing (i.e. before option parsing)\"\"\"\n         self._plugins.extend(utils._splitstrip(value))\n",
  "test_patch": "diff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -45,6 +45,7 @@\n from copy import copy\n from io import StringIO\n from os.path import abspath, dirname, join\n+from pathlib import Path\n from typing import Generator, Optional\n from unittest import mock\n from unittest.mock import patch\n@@ -162,6 +163,21 @@ def _test_output(self, args, expected_output):\n         expected_output = self._clean_paths(expected_output)\n         assert expected_output.strip() in actual_output.strip()\n \n+    def _test_output_file(self, args, filename, expected_output):\n+        \"\"\"\n+        Run Pylint with the ``output`` option set (must be included in\n+        the ``args`` passed to this method!) and check the file content afterwards.\n+        \"\"\"\n+        out = StringIO()\n+        self._run_pylint(args, out=out)\n+        cmdline_output = out.getvalue()\n+        file_output = self._clean_paths(Path(filename).read_text(encoding=\"utf-8\"))\n+        expected_output = self._clean_paths(expected_output)\n+        assert (\n+            cmdline_output == \"\"\n+        ), \"Unexpected output to stdout/stderr while output option was set\"\n+        assert expected_output.strip() in file_output.strip()\n+\n     def test_pkginfo(self):\n         \"\"\"Make pylint check itself.\"\"\"\n         self._runtest([\"pylint.__pkginfo__\"], reporter=TextReporter(StringIO()), code=0)\n@@ -1031,3 +1047,82 @@ def test_regression_parallel_mode_without_filepath(self):\n             HERE, \"regrtest_data\", \"regression_missing_init_3564\", \"subdirectory/\"\n         )\n         self._test_output([path, \"-j2\"], expected_output=\"No such file or directory\")\n+\n+    def test_output_file_valid_path(self, tmpdir):\n+        path = join(HERE, \"regrtest_data\", \"unused_variable.py\")\n+        output_file = tmpdir / \"output.txt\"\n+        expected = \"Your code has been rated at 7.50/10\"\n+        self._test_output_file(\n+            [path, f\"--output={output_file}\"],\n+            output_file,\n+            expected_output=expected,\n+        )\n+\n+    def test_output_file_invalid_path_exits_with_code_32(self):\n+        path = join(HERE, \"regrtest_data\", \"unused_variable.py\")\n+        output_file = \"thisdirectorydoesnotexit/output.txt\"\n+        self._runtest([path, f\"--output={output_file}\"], code=32)\n+\n+    @pytest.mark.parametrize(\n+        \"output_format, expected_output\",\n+        [\n+            (\n+                \"text\",\n+                \"tests/regrtest_data/unused_variable.py:4:4: W0612: Unused variable 'variable' (unused-variable)\",\n+            ),\n+            (\n+                \"parseable\",\n+                \"tests/regrtest_data/unused_variable.py:4: [W0612(unused-variable), test] Unused variable 'variable'\",\n+            ),\n+            (\n+                \"msvs\",\n+                \"tests/regrtest_data/unused_variable.py(4): [W0612(unused-variable)test] Unused variable 'variable'\",\n+            ),\n+            (\n+                \"colorized\",\n+                \"tests/regrtest_data/unused_variable.py:4:4: W0612: \u001b[35mUnused variable 'variable'\u001b[0m (\u001b[35munused-variable\u001b[0m)\",\n+            ),\n+            (\"json\", '\"message\": \"Unused variable \\'variable\\'\",'),\n+        ],\n+    )\n+    def test_output_file_can_be_combined_with_output_format_option(\n+        self, tmpdir, output_format, expected_output\n+    ):\n+        path = join(HERE, \"regrtest_data\", \"unused_variable.py\")\n+        output_file = tmpdir / \"output.txt\"\n+        self._test_output_file(\n+            [path, f\"--output={output_file}\", f\"--output-format={output_format}\"],\n+            output_file,\n+            expected_output,\n+        )\n+\n+    def test_output_file_can_be_combined_with_custom_reporter(self, tmpdir):\n+        path = join(HERE, \"regrtest_data\", \"unused_variable.py\")\n+        output_file = tmpdir / \"output.txt\"\n+        # It does not really have to be a truly custom reporter.\n+        # It is only important that it is being passed explicitly to ``Run``.\n+        myreporter = TextReporter()\n+        self._run_pylint(\n+            [path, f\"--output={output_file}\"],\n+            out=sys.stdout,\n+            reporter=myreporter,\n+        )\n+        assert output_file.exists()\n+\n+    def test_output_file_specified_in_rcfile(self, tmpdir):\n+        output_file = tmpdir / \"output.txt\"\n+        rcfile = tmpdir / \"pylintrc\"\n+        rcfile_contents = textwrap.dedent(\n+            f\"\"\"\n+        [MASTER]\n+        output={output_file}\n+        \"\"\"\n+        )\n+        rcfile.write_text(rcfile_contents, encoding=\"utf-8\")\n+        path = join(HERE, \"regrtest_data\", \"unused_variable.py\")\n+        expected = \"Your code has been rated at 7.50/10\"\n+        self._test_output_file(\n+            [path, f\"--output={output_file}\", f\"--rcfile={rcfile}\"],\n+            output_file,\n+            expected_output=expected,\n+        )\n",
  "problem_statement": "Support output to a file to support tox on CI servers\nCurrently [`tox` cannot redirect commands to files](https://bitbucket.org/hpk42/tox/issues/73/pipe-output-of-command-into-file), which means when running Pylint from within `tox` there seems to be no way to output the results to a single (for example HTML) file that a CI server can store for display.\n\n`--file-output=y` used to be close to what is needed, but it [was removed in 2.0](https://docs.pylint.org/en/latest/whatsnew/changelog.html#what-s-new-in-pylint-2-0), and also created a different file for each module which is difficult to navigate.\n\nHere is the [StackOverflow question](https://stackoverflow.com/questions/10439481/save-pylint-message-to-a-file) that relates to this.\n\n`flake8` added this feature for the same reason: https://gitlab.com/pycqa/flake8/issues/15\n\n> ...however my main usage of flake8 is from within tox running under jenkins (using the violations plugin). Since tox doesn't support shell redirection...\n\n",
  "hints_text": "Why not redirecting pylint command in your tox file into a file?\n\n@PCManticore Because (and this was new to me as I hadn't tried before) [`tox` does not support file redirection](https://bitbucket.org/hpk42/tox/issues/73/pipe-output-of-command-into-file), so there is no way to do it that I am aware of.\n\nHello,\r\n\r\nI've the same problem when running pylint inside tox. And also this is more complicated once you need to develop a multiplatform application.\r\n\r\nThe only way to save the pylint stdout inside a file, is to tell tox to use bash or cmd, according with the platform, with '>' operator. Unfortunately, there's not a way to do so but creating multiple tox environments once for each platform, that is (of course) a huge waste of space and time.\r\n\r\nPerhaps makes the automation system really complicated and difficult to handle.\nThanks for the input @acerv It seems this will be definitely useful, so I'd be happy to reintegrate a `--file-output` functionality for the entire output.",
  "created_at": "2021-04-11T17:25:22Z",
  "version": "2.8",
  "FAIL_TO_PASS": "[\"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-tests/regrtest_data/unused_variable.py:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-tests/regrtest_data/unused_variable.py:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-tests/regrtest_data/unused_variable.py(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-tests/regrtest_data/unused_variable.py:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\"]",
  "PASS_TO_PASS": "[\"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_generate_config_option\", \"tests/test_self.py::TestRunTC::test_generate_config_option_order\", \"tests/test_self.py::TestRunTC::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestRunTC::test_generate_rcfile_no_obsolete_methods\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_help_message_option\", \"tests/test_self.py::TestRunTC::test_error_help_message_option\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_bug_2674\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_py3k_option\", \"tests/test_self.py::TestRunTC::test_py3k_jobs_option\", \"tests/test_self.py::TestRunTC::test_abbreviations_are_not_supported\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntaxerror\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory_with_pythonpath\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_duplicate_code_raw_strings\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\"]",
  "environment_setup_commit": "49a6206c7756307844c1c32c256afdf9836d7bce",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.907180",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}