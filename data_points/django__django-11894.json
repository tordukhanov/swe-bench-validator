{
  "repo": "django/django",
  "instance_id": "django__django-11894",
  "base_commit": "b7d05b2e5a7136ed92f77780dac9b44aef0bae59",
  "patch": "diff --git a/django/http/response.py b/django/http/response.py\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -197,8 +197,8 @@ def set_cookie(self, key, value='', max_age=None, expires=None, path='/',\n         if httponly:\n             self.cookies[key]['httponly'] = True\n         if samesite:\n-            if samesite.lower() not in ('lax', 'strict'):\n-                raise ValueError('samesite must be \"lax\" or \"strict\".')\n+            if samesite.lower() not in ('lax', 'none', 'strict'):\n+                raise ValueError('samesite must be \"lax\", \"none\", or \"strict\".')\n             self.cookies[key]['samesite'] = samesite\n \n     def setdefault(self, key, value):\n",
  "test_patch": "diff --git a/tests/responses/test_cookie.py b/tests/responses/test_cookie.py\n--- a/tests/responses/test_cookie.py\n+++ b/tests/responses/test_cookie.py\n@@ -81,13 +81,16 @@ def test_unicode_cookie(self):\n \n     def test_samesite(self):\n         response = HttpResponse()\n+        response.set_cookie('example', samesite='None')\n+        self.assertEqual(response.cookies['example']['samesite'], 'None')\n         response.set_cookie('example', samesite='Lax')\n         self.assertEqual(response.cookies['example']['samesite'], 'Lax')\n         response.set_cookie('example', samesite='strict')\n         self.assertEqual(response.cookies['example']['samesite'], 'strict')\n \n     def test_invalid_samesite(self):\n-        with self.assertRaisesMessage(ValueError, 'samesite must be \"lax\" or \"strict\".'):\n+        msg = 'samesite must be \"lax\", \"none\", or \"strict\".'\n+        with self.assertRaisesMessage(ValueError, msg):\n             HttpResponse().set_cookie('example', samesite='invalid')\n \n \n",
  "problem_statement": "Explicitly SameSite: None cookies.\nDescription\n\t\nWhen setting cookies (with .set_cookie and set_signed_cookie) the default value for the samesite argument is None but the problem here is that Django doesn't do anything with the None value.\nThis behaviour used to be fine because most browsers assumed that a missing samesite attribute on a cookie meant None. But now, Chrome has issued a warning that samesite has to be explicitly set to None else the cookies won't be sent for cross-origin requests.\nâ€‹https://www.chromestatus.com/feature/5633521622188032\n",
  "hints_text": "Hi. The link you've given implies that if samesite is None then we must set secure â€” â€‹we're not doing that so we should add an extra clause in there. Chrome has issued a warning that samesite has to be explicitly set to None else the cookies won't be sent for cross-origin requests. Is this the same point? (It reads differently to me at first glance.)\nReplying to Carlton Gibson: Hi. The link you've given implies that if samesite is None then we must set secure â€” â€‹we're not doing that so we should add an extra clause in there. Chrome has issued a warning that samesite has to be explicitly set to None else the cookies won't be sent for cross-origin requests. Is this the same point? (It reads differently to me at first glance.) My bad. The title of the ticket is misleading What I meant to say was to \"allow the option to set 'same-site' to 'None'\". At the moment, you can only set it to \"Strict\" or \"Lax\". This statement \"The link you've given implies that if samesite is None then we must set secure\" is correct but I think the best thing is to be as flexible as possible. Although Chrome's warning has good intentions, it is not a global browser standard and other users (For reasons best known to them) might want to set the secure flag without samesite and vice-versa. So in this case, the best option, In my opinion, is to allow \"None\" (as a string) without enforcing secure=True and at the same time preserve the current behaviour. Perhaps I jumped the gun with this but I've already opened a PR that communicates my intentions: â€‹https://github.com/django/django/pull/11894\nOK, thank for the update. Makes sense. I've re-titled again accordingly. ...I've already opened a PR ... Gun jumping of that kind we very much like. ðŸ™‚ Thanks.",
  "created_at": "2019-10-09T12:01:10Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_invalid_samesite (responses.test_cookie.SetCookieTests)\", \"test_samesite (responses.test_cookie.SetCookieTests)\"]",
  "PASS_TO_PASS": "[\"test_default (responses.test_cookie.DeleteCookieTests)\", \"test_delete_cookie_secure_prefix (responses.test_cookie.DeleteCookieTests)\", \"set_cookie() accepts an aware datetime as expiration time.\", \"Setting a cookie after deletion clears the expiry date.\", \"Cookie will expire when a distant expiration time is provided.\", \"test_httponly_cookie (responses.test_cookie.SetCookieTests)\", \"Cookie will expire if max_age is provided.\", \"Cookie will expire when a near expiration time is provided.\", \"HttpResponse.set_cookie() works with unicode data.\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.587653",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}