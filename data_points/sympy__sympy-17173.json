{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17173",
  "base_commit": "0ed1ecb4d4b5f078643fc6265f41c4d04ad3c9ce",
  "patch": "diff --git a/sympy/functions/combinatorial/factorials.py b/sympy/functions/combinatorial/factorials.py\n--- a/sympy/functions/combinatorial/factorials.py\n+++ b/sympy/functions/combinatorial/factorials.py\n@@ -578,6 +578,10 @@ def eval(cls, x, k):\n                                             r*(x - i),\n                                             range(1, abs(int(k)) + 1), 1)\n \n+        if k.is_integer == False:\n+            if x.is_integer and x.is_negative:\n+                return S.Zero\n+\n     def _eval_rewrite_as_gamma(self, x, k, **kwargs):\n         from sympy import gamma\n         return gamma(x + k) / gamma(x)\n",
  "test_patch": "diff --git a/sympy/functions/combinatorial/tests/test_comb_factorials.py b/sympy/functions/combinatorial/tests/test_comb_factorials.py\n--- a/sympy/functions/combinatorial/tests/test_comb_factorials.py\n+++ b/sympy/functions/combinatorial/tests/test_comb_factorials.py\n@@ -1,7 +1,7 @@\n from sympy import (S, Symbol, symbols, factorial, factorial2, Float, binomial,\n                    rf, ff, gamma, polygamma, EulerGamma, O, pi, nan,\n                    oo, zoo, simplify, expand_func, Product, Mul, Piecewise,\n-                   Mod, Eq, sqrt, Poly, Dummy)\n+                   Mod, Eq, sqrt, Poly, Dummy, I)\n from sympy.core.expr import unchanged\n from sympy.core.function import ArgumentIndexError\n from sympy.functions.combinatorial.factorials import subfactorial\n@@ -30,6 +30,14 @@ def test_rf_eval_apply():\n     assert rf(oo, -6) == oo\n     assert rf(-oo, -7) == oo\n \n+    assert rf(-1, pi) == 0\n+    assert rf(-5, 1 + I) == 0\n+\n+    assert unchanged(rf, -3, k)\n+    assert unchanged(rf, x, Symbol('k', integer=False))\n+    assert rf(-3, Symbol('k', integer=False)) == 0\n+    assert rf(Symbol('x', negative=True, integer=True), Symbol('k', integer=False)) == 0\n+\n     assert rf(x, 0) == 1\n     assert rf(x, 1) == x\n     assert rf(x, 2) == x*(x + 1)\n",
  "problem_statement": "Automatic evaluation of RisingFactorial(n, k) with n negative integer, k non-integer\n```\r\n>>> RisingFactorial(-1,pi)\r\nRisingFactorial(-1, pi)\r\n>>> N(RisingFactorial(-1,pi))\r\n0\r\n```\r\n\r\nThis could be evaluated automatically. Note that this causes problems when used in larger expressions, for example:\r\n\r\n```\r\n>>> N(asech(RisingFactorial(-1,pi)))\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/sympy/core/evalf.py\", line 1308, in evalf\r\n    rf = evalf_table[x.func]\r\nKeyError: asech\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/dist-packages/sympy/core/evalf.py\", line 1537, in N\r\n    return sympify(x).evalf(n, **options)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sympy/core/evalf.py\", line 1442, in evalf\r\n    result = evalf(self, prec + 4, options)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sympy/core/evalf.py\", line 1314, in evalf\r\n    xe = x._eval_evalf(prec)\r\n  File \"/usr/local/lib/python3.6/dist-packages/sympy/core/function.py\", line 586, in _eval_evalf\r\n    v = func(*args)\r\n  File \"/usr/local/lib/python3.6/dist-packages/mpmath/ctx_mp_python.py\", line 1035, in f_wrapped\r\n    retval = f(ctx, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/mpmath/functions/functions.py\", line 130, in asech\r\n    def asech(ctx, z): return ctx.acosh(ctx.one / z)\r\n  File \"<string>\", line 7, in __div__\r\n  File \"/usr/local/lib/python3.6/dist-packages/mpmath/libmp/libmpf.py\", line 960, in mpf_div\r\n    raise ZeroDivisionError\r\nZeroDivisionError\r\n```\n",
  "hints_text": "",
  "created_at": "2019-07-10T22:02:56Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_rf_eval_apply\"]",
  "PASS_TO_PASS": "[\"test_ff_eval_apply\", \"test_rf_ff_eval_hiprec\", \"test_rf_lambdify_mpmath\", \"test_factorial\", \"test_factorial_Mod\", \"test_factorial_diff\", \"test_factorial_series\", \"test_factorial_rewrite\", \"test_factorial2\", \"test_factorial2_rewrite\", \"test_binomial\", \"test_binomial_Mod\", \"test_binomial_diff\", \"test_binomial_rewrite\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.113728",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}