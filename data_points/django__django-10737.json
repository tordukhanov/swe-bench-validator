{
  "repo": "django/django",
  "instance_id": "django__django-10737",
  "base_commit": "a8e2a9bac6e548d6ab2e13af6171d2fdd3b8055b",
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1191,9 +1191,15 @@ def prepare_value(self, field, value):\n                     'can only be used to update, not to insert.' % (value, field)\n                 )\n             if value.contains_aggregate:\n-                raise FieldError(\"Aggregate functions are not allowed in this query\")\n+                raise FieldError(\n+                    'Aggregate functions are not allowed in this query '\n+                    '(%s=%r).' % (field.name, value)\n+                )\n             if value.contains_over_clause:\n-                raise FieldError('Window expressions are not allowed in this query.')\n+                raise FieldError(\n+                    'Window expressions are not allowed in this query (%s=%r).'\n+                    % (field.name, value)\n+                )\n         else:\n             value = field.get_db_prep_save(value, connection=self.connection)\n         return value\n@@ -1356,9 +1362,15 @@ def as_sql(self):\n             if hasattr(val, 'resolve_expression'):\n                 val = val.resolve_expression(self.query, allow_joins=False, for_save=True)\n                 if val.contains_aggregate:\n-                    raise FieldError(\"Aggregate functions are not allowed in this query\")\n+                    raise FieldError(\n+                        'Aggregate functions are not allowed in this query '\n+                        '(%s=%r).' % (field.name, val)\n+                    )\n                 if val.contains_over_clause:\n-                    raise FieldError('Window expressions are not allowed in this query.')\n+                    raise FieldError(\n+                        'Window expressions are not allowed in this query '\n+                        '(%s=%r).' % (field.name, val)\n+                    )\n             elif hasattr(val, 'prepare_database_save'):\n                 if field.remote_field:\n                     val = field.get_db_prep_save(\n",
  "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -264,7 +264,8 @@ def test_new_object_create(self):\n \n     def test_object_create_with_aggregate(self):\n         # Aggregates are not allowed when inserting new data\n-        with self.assertRaisesMessage(FieldError, 'Aggregate functions are not allowed in this query'):\n+        msg = 'Aggregate functions are not allowed in this query (num_employees=Max(Value(1))).'\n+        with self.assertRaisesMessage(FieldError, msg):\n             Company.objects.create(\n                 name='Company', num_employees=Max(Value(1)), num_chairs=1,\n                 ceo=Employee.objects.create(firstname=\"Just\", lastname=\"Doit\", salary=30),\ndiff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -670,7 +670,12 @@ def test_distinct_window_function(self):\n \n     def test_fail_update(self):\n         \"\"\"Window expressions can't be used in an UPDATE statement.\"\"\"\n-        msg = 'Window expressions are not allowed in this query'\n+        msg = (\n+            'Window expressions are not allowed in this query (salary=<Window: '\n+            'Max(Col(expressions_window_employee, expressions_window.Employee.salary)) '\n+            'OVER (PARTITION BY Col(expressions_window_employee, '\n+            'expressions_window.Employee.department))>).'\n+        )\n         with self.assertRaisesMessage(FieldError, msg):\n             Employee.objects.filter(department='Management').update(\n                 salary=Window(expression=Max('salary'), partition_by='department'),\n@@ -678,7 +683,10 @@ def test_fail_update(self):\n \n     def test_fail_insert(self):\n         \"\"\"Window expressions can't be used in an INSERT statement.\"\"\"\n-        msg = 'Window expressions are not allowed in this query'\n+        msg = (\n+            'Window expressions are not allowed in this query (salary=<Window: '\n+            'Sum(Value(10000), order_by=OrderBy(F(pk), descending=False)) OVER ()'\n+        )\n         with self.assertRaisesMessage(FieldError, msg):\n             Employee.objects.create(\n                 name='Jameson', department='Management', hire_date=datetime.date(2007, 7, 1),\ndiff --git a/tests/update/tests.py b/tests/update/tests.py\n--- a/tests/update/tests.py\n+++ b/tests/update/tests.py\n@@ -165,7 +165,11 @@ def test_update_annotated_queryset(self):\n         self.assertEqual(qs.update(another_value=F('alias')), 3)\n         # Update where aggregation annotation is used in update parameters\n         qs = DataPoint.objects.annotate(max=Max('value'))\n-        with self.assertRaisesMessage(FieldError, 'Aggregate functions are not allowed in this query'):\n+        msg = (\n+            'Aggregate functions are not allowed in this query '\n+            '(another_value=Max(Col(update_datapoint, update.DataPoint.value))).'\n+        )\n+        with self.assertRaisesMessage(FieldError, msg):\n             qs.update(another_value=F('max'))\n \n     def test_update_annotated_multi_table_queryset(self):\n@@ -185,5 +189,9 @@ def test_update_annotated_multi_table_queryset(self):\n         # self.assertEqual(updated, 1)\n         # Update where aggregation annotation is used in update parameters\n         qs = RelatedPoint.objects.annotate(max=Max('data__value'))\n-        with self.assertRaisesMessage(FieldError, 'Aggregate functions are not allowed in this query'):\n+        msg = (\n+            'Aggregate functions are not allowed in this query '\n+            '(name=Max(Col(update_datapoint, update.DataPoint.value))).'\n+        )\n+        with self.assertRaisesMessage(FieldError, msg):\n             qs.update(name=F('max'))\n",
  "problem_statement": "Raised FieldError's should include the field that caused the error\nDescription\n\t\nCurrently there are many places in ​django/db/models/sql/compiler.py that raise a FieldError however frustratingly the field that caused the error is not included.\nI'm proposing that, where possible, all raised FieldError's raised should include, as part of the error message, the field that caused the error.\n",
  "hints_text": "Replying to Jeff: Hello Jeff, I may be able to help you in patching this. Will you continue or could we work together?\nHi Shrey, sorry for the delay in getting back to you. I would still be happy to have you work on it with me if you are still interested.\n​PR (some test coverage is lacking)\nCan I take this issue forward ? If yes then I would assign this issue to myself and will add the test cases required.",
  "created_at": "2018-12-09T14:39:19Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_update_annotated_multi_table_queryset (update.tests.AdvancedTests)\", \"test_update_annotated_queryset (update.tests.AdvancedTests)\", \"Window expressions can't be used in an INSERT statement.\", \"Window expressions can't be used in an UPDATE statement.\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\"]",
  "PASS_TO_PASS": "[\"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_window_frame_notimplemented (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_filter (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_order_by (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_source_expression (expressions_window.tests.NonQueryWindowTests)\", \"test_unsupported_backend (expressions_window.tests.NonQueryWindowTests)\", \"test_window_frame_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_window_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_complex_expressions (expressions.tests.ExpressionsNumericTests)\", \"test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)\", \"test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)\", \"test_increment_value (expressions.tests.ExpressionsNumericTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_update (update.tests.AdvancedTests)\", \"test_update_all (update.tests.AdvancedTests)\", \"test_update_fk (update.tests.AdvancedTests)\", \"test_update_m2m_field (update.tests.AdvancedTests)\", \"test_update_multiple_fields (update.tests.AdvancedTests)\", \"test_update_multiple_objects (update.tests.AdvancedTests)\", \"test_update_respects_to_field (update.tests.AdvancedTests)\", \"test_update_slice_fail (update.tests.AdvancedTests)\", \"test_empty_update (update.tests.SimpleTest)\", \"test_empty_update_with_inheritance (update.tests.SimpleTest)\", \"test_foreign_key_update_with_id (update.tests.SimpleTest)\", \"test_nonempty_update (update.tests.SimpleTest)\", \"test_nonempty_update_with_inheritance (update.tests.SimpleTest)\", \"test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_avg_salary_department (expressions_window.tests.WindowFunctionTests)\", \"test_cume_dist (expressions_window.tests.WindowFunctionTests)\", \"test_dense_rank (expressions_window.tests.WindowFunctionTests)\", \"test_department_salary (expressions_window.tests.WindowFunctionTests)\", \"test_first_value (expressions_window.tests.WindowFunctionTests)\", \"test_function_list_of_values (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_lag (expressions_window.tests.WindowFunctionTests)\", \"test_last_value (expressions_window.tests.WindowFunctionTests)\", \"test_lead (expressions_window.tests.WindowFunctionTests)\", \"test_lead_default (expressions_window.tests.WindowFunctionTests)\", \"test_lead_offset (expressions_window.tests.WindowFunctionTests)\", \"test_max_per_year (expressions_window.tests.WindowFunctionTests)\", \"An alternative way to specify a query for FirstValue.\", \"test_multiple_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_multiple_partitioning (expressions_window.tests.WindowFunctionTests)\", \"test_nth_returns_null (expressions_window.tests.WindowFunctionTests)\", \"test_nthvalue (expressions_window.tests.WindowFunctionTests)\", \"test_ntile (expressions_window.tests.WindowFunctionTests)\", \"test_percent_rank (expressions_window.tests.WindowFunctionTests)\", \"A query with RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.\", \"test_rank (expressions_window.tests.WindowFunctionTests)\", \"test_row_number (expressions_window.tests.WindowFunctionTests)\", \"test_row_number_no_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_subquery_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_window_expression_within_subquery (expressions_window.tests.WindowFunctionTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.552349",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}