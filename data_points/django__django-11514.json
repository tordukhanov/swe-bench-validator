{
  "repo": "django/django",
  "instance_id": "django__django-11514",
  "base_commit": "8454f6dea49dddb821bfcb7569ea222bb487dfd1",
  "patch": "diff --git a/django/utils/cache.py b/django/utils/cache.py\n--- a/django/utils/cache.py\n+++ b/django/utils/cache.py\n@@ -250,7 +250,7 @@ def add_never_cache_headers(response):\n     Add headers to a response to indicate that a page should never be cached.\n     \"\"\"\n     patch_response_headers(response, cache_timeout=-1)\n-    patch_cache_control(response, no_cache=True, no_store=True, must_revalidate=True)\n+    patch_cache_control(response, no_cache=True, no_store=True, must_revalidate=True, private=True)\n \n \n def patch_vary_headers(response, newheaders):\n",
  "test_patch": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -478,5 +478,5 @@ def a_view(request):\n         r = a_view(HttpRequest())\n         self.assertEqual(\n             set(r['Cache-Control'].split(', ')),\n-            {'max-age=0', 'no-cache', 'no-store', 'must-revalidate'},\n+            {'max-age=0', 'no-cache', 'no-store', 'must-revalidate', 'private'},\n         )\n",
  "problem_statement": "Add Cache-Control: private to never_cache decorator.\nDescription\n\t\nIf a Django user wants to ensure that a resource is not cached.\nThe user might use never_cache decorator, however, sometimes it doesn't work as he or she expected, which means the resource is cached by CDN.\nThe reason why is that CDN providers cache the resource. For example, Fastly needs to set Cache-Control: private for HTTP header with the origin response. The document is below.\nâ€‹https://docs.fastly.com/guides/tutorials/cache-control-tutorial#do-not-cache\nCurrently Django's never_cache lacks Cache-Control: private, so I suggest to add this header to a response.\nThanks,\n",
  "hints_text": "",
  "created_at": "2019-06-26T04:28:07Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_never_cache_decorator (decorators.tests.NeverCacheDecoratorTest)\"]",
  "PASS_TO_PASS": "[\"test_deny_decorator (decorators.tests.XFrameOptionsDecoratorsTests)\", \"test_exempt_decorator (decorators.tests.XFrameOptionsDecoratorsTests)\", \"test_sameorigin_decorator (decorators.tests.XFrameOptionsDecoratorsTests)\", \"test_attributes (decorators.tests.DecoratorsTest)\", \"test_cache_page (decorators.tests.DecoratorsTest)\", \"test_require_safe_accepts_only_safe_methods (decorators.tests.DecoratorsTest)\", \"test_user_passes_test_composition (decorators.tests.DecoratorsTest)\", \"test_argumented (decorators.tests.MethodDecoratorTests)\", \"test_bad_iterable (decorators.tests.MethodDecoratorTests)\", \"test_class_decoration (decorators.tests.MethodDecoratorTests)\", \"test_descriptors (decorators.tests.MethodDecoratorTests)\", \"test_invalid_method_name_to_decorate (decorators.tests.MethodDecoratorTests)\", \"test_invalid_non_callable_attribute_decoration (decorators.tests.MethodDecoratorTests)\", \"A decorator that sets a new attribute on the method.\", \"test_preserve_attributes (decorators.tests.MethodDecoratorTests)\", \"test_preserve_signature (decorators.tests.MethodDecoratorTests)\", \"test_tuple_of_decorators (decorators.tests.MethodDecoratorTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.574485",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}