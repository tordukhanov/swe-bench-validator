{
  "repo": "mwaskom/seaborn",
  "instance_id": "mwaskom__seaborn-2996",
  "base_commit": "a5816697cbcab195a987f5e074204a052c13e1d5",
  "patch": "diff --git a/seaborn/_compat.py b/seaborn/_compat.py\n--- a/seaborn/_compat.py\n+++ b/seaborn/_compat.py\n@@ -144,14 +144,14 @@ def register_colormap(name, cmap):\n         mpl.cm.register_cmap(name, cmap)\n \n \n-def set_layout_engine(fig, algo):\n+def set_layout_engine(fig, engine):\n     \"\"\"Handle changes to auto layout engine interface in 3.6\"\"\"\n     if hasattr(fig, \"set_layout_engine\"):\n-        fig.set_layout_engine(algo)\n+        fig.set_layout_engine(engine)\n     else:\n-        if algo == \"tight\":\n+        if engine == \"tight\":\n             fig.set_tight_layout(True)\n-        elif algo == \"constrained\":\n+        elif engine == \"constrained\":\n             fig.set_constrained_layout(True)\n \n \ndiff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -694,7 +694,7 @@ def layout(\n         self,\n         *,\n         size: tuple[float, float] | Default = default,\n-        algo: str | None | Default = default,\n+        engine: str | None | Default = default,\n     ) -> Plot:\n         \"\"\"\n         Control the figure size and layout.\n@@ -710,8 +710,8 @@ def layout(\n         size : (width, height)\n             Size of the resulting figure, in inches. Size is inclusive of legend when\n             using pyplot, but not otherwise.\n-        algo : {{\"tight\", \"constrained\", None}}\n-            Name of algorithm for automatically adjusting the layout to remove overlap.\n+        engine : {{\"tight\", \"constrained\", None}}\n+            Name of method for automatically adjusting the layout to remove overlap.\n             The default depends on whether :meth:`Plot.on` is used.\n \n         Examples\n@@ -728,8 +728,8 @@ def layout(\n \n         if size is not default:\n             new._figure_spec[\"figsize\"] = size\n-        if algo is not default:\n-            new._layout_spec[\"algo\"] = algo\n+        if engine is not default:\n+            new._layout_spec[\"engine\"] = engine\n \n         return new\n \n@@ -1656,6 +1656,6 @@ def _finalize_figure(self, p: Plot) -> None:\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f\"{axis}lim\": (lo, hi)})\n \n-        algo_default = None if p._target is not None else \"tight\"\n-        layout_algo = p._layout_spec.get(\"algo\", algo_default)\n-        set_layout_engine(self._figure, layout_algo)\n+        engine_default = None if p._target is not None else \"tight\"\n+        layout_engine = p._layout_spec.get(\"engine\", engine_default)\n+        set_layout_engine(self._figure, layout_engine)\n",
  "test_patch": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -1305,8 +1305,8 @@ def test_layout_algo(self, algo):\n \n         p = Plot().facet([\"a\", \"b\"]).limit(x=(.1, .9))\n \n-        p1 = p.layout(algo=algo).plot()\n-        p2 = p.layout(algo=None).plot()\n+        p1 = p.layout(engine=algo).plot()\n+        p2 = p.layout(engine=None).plot()\n \n         # Force a draw (we probably need a method for this)\n         p1.save(io.BytesIO())\n",
  "problem_statement": "Rename layout(algo=) to layout(engine=)\nMatplotlib has settled on this term with the new `set_layout_engine` method in 3.6 so might as well be consistent with them.\r\n\r\nThe new API also ha some implications for how the parameter should be documented / typed.\n",
  "hints_text": "",
  "created_at": "2022-09-04T22:06:59Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"tests/_core/test_plot.py::TestFacetInterface::test_layout_algo[tight]\", \"tests/_core/test_plot.py::TestFacetInterface::test_layout_algo[constrained]\"]",
  "PASS_TO_PASS": "[\"tests/_core/test_plot.py::TestInit::test_empty\", \"tests/_core/test_plot.py::TestInit::test_data_only\", \"tests/_core/test_plot.py::TestInit::test_df_and_named_variables\", \"tests/_core/test_plot.py::TestInit::test_df_and_mixed_variables\", \"tests/_core/test_plot.py::TestInit::test_vector_variables_only\", \"tests/_core/test_plot.py::TestInit::test_vector_variables_no_index\", \"tests/_core/test_plot.py::TestInit::test_data_only_named\", \"tests/_core/test_plot.py::TestInit::test_positional_and_named_data\", \"tests/_core/test_plot.py::TestInit::test_positional_and_named_xy[x]\", \"tests/_core/test_plot.py::TestInit::test_positional_and_named_xy[y]\", \"tests/_core/test_plot.py::TestInit::test_positional_data_x_y\", \"tests/_core/test_plot.py::TestInit::test_positional_x_y\", \"tests/_core/test_plot.py::TestInit::test_positional_data_x\", \"tests/_core/test_plot.py::TestInit::test_positional_x\", \"tests/_core/test_plot.py::TestInit::test_positional_too_many\", \"tests/_core/test_plot.py::TestInit::test_unknown_keywords\", \"tests/_core/test_plot.py::TestLayerAddition::test_stat_nondefault\", \"tests/_core/test_plot.py::TestLayerAddition::test_variable_list\", \"tests/_core/test_plot.py::TestLayerAddition::test_type_checks\", \"tests/_core/test_plot.py::TestScaling::test_faceted_log_scale\", \"tests/_core/test_plot.py::TestScaling::test_paired_single_log_scale\", \"tests/_core/test_plot.py::TestPlotting::test_matplotlib_object_creation\", \"tests/_core/test_plot.py::TestPlotting::test_empty\", \"tests/_core/test_plot.py::TestPlotting::test_theme_default\", \"tests/_core/test_plot.py::TestPlotting::test_theme_error\", \"tests/_core/test_plot.py::TestPlotting::test_methods_clone\", \"tests/_core/test_plot.py::TestPlotting::test_default_is_no_pyplot\", \"tests/_core/test_plot.py::TestPlotting::test_with_pyplot\", \"tests/_core/test_plot.py::TestPlotting::test_show\", \"tests/_core/test_plot.py::TestPlotting::test_png_repr\", \"tests/_core/test_plot.py::TestPlotting::test_save\", \"tests/_core/test_plot.py::TestPlotting::test_layout_size\", \"tests/_core/test_plot.py::TestPlotting::test_on_type_check\", \"tests/_core/test_plot.py::TestPlotting::test_on_axes_with_subplots_error\", \"tests/_core/test_plot.py::TestPlotting::test_on_disables_layout_algo\", \"tests/_core/test_plot.py::TestPlotting::test_axis_labels_from_constructor\", \"tests/_core/test_plot.py::TestPlotting::test_limits\", \"tests/_core/test_plot.py::TestPlotting::test_labels_axis\", \"tests/_core/test_plot.py::TestPlotting::test_labels_facets\", \"tests/_core/test_plot.py::TestPlotting::test_title_single\", \"tests/_core/test_plot.py::TestPlotting::test_title_facet_function\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d[row]\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d_as_vector[row]\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-reverse]\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-reverse]\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d[col]\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d_as_vector[col]\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-subset]\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-subset]\", \"tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[subset]\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-expand]\", \"tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-expand]\", \"tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[expand]\", \"tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[reverse]\", \"tests/_core/test_plot.py::TestFacetInterface::test_2d\", \"tests/_core/test_plot.py::TestFacetInterface::test_axis_sharing\", \"tests/_core/test_plot.py::TestFacetInterface::test_col_wrapping\", \"tests/_core/test_plot.py::TestFacetInterface::test_row_wrapping\", \"tests/_core/test_plot.py::TestPairInterface::test_all_numeric[list]\", \"tests/_core/test_plot.py::TestPairInterface::test_all_numeric[Index]\", \"tests/_core/test_plot.py::TestPairInterface::test_single_variable_key_raises\", \"tests/_core/test_plot.py::TestPairInterface::test_single_dimension[x]\", \"tests/_core/test_plot.py::TestPairInterface::test_single_dimension[y]\", \"tests/_core/test_plot.py::TestPairInterface::test_non_cross\", \"tests/_core/test_plot.py::TestPairInterface::test_list_of_vectors\", \"tests/_core/test_plot.py::TestPairInterface::test_with_no_variables\", \"tests/_core/test_plot.py::TestPairInterface::test_with_facets\", \"tests/_core/test_plot.py::TestPairInterface::test_error_on_facet_overlap[variables0]\", \"tests/_core/test_plot.py::TestPairInterface::test_error_on_facet_overlap[variables1]\", \"tests/_core/test_plot.py::TestPairInterface::test_error_on_wrap_overlap[variables0]\", \"tests/_core/test_plot.py::TestPairInterface::test_error_on_wrap_overlap[variables1]\", \"tests/_core/test_plot.py::TestPairInterface::test_axis_sharing\", \"tests/_core/test_plot.py::TestPairInterface::test_axis_sharing_with_facets\", \"tests/_core/test_plot.py::TestPairInterface::test_x_wrapping\", \"tests/_core/test_plot.py::TestPairInterface::test_y_wrapping\", \"tests/_core/test_plot.py::TestPairInterface::test_non_cross_wrapping\", \"tests/_core/test_plot.py::TestPairInterface::test_cross_mismatched_lengths\", \"tests/_core/test_plot.py::TestPairInterface::test_two_variables_single_order_error\", \"tests/_core/test_plot.py::TestPairInterface::test_limits\", \"tests/_core/test_plot.py::TestPairInterface::test_labels\", \"tests/_core/test_plot.py::TestLabelVisibility::test_single_subplot\", \"tests/_core/test_plot.py::TestLabelVisibility::test_1d_column[facet_kws0-pair_kws0]\", \"tests/_core/test_plot.py::TestLabelVisibility::test_1d_column[facet_kws1-pair_kws1]\", \"tests/_core/test_plot.py::TestLabelVisibility::test_1d_row[facet_kws0-pair_kws0]\", \"tests/_core/test_plot.py::TestLabelVisibility::test_1d_row[facet_kws1-pair_kws1]\", \"tests/_core/test_plot.py::TestLabelVisibility::test_1d_column_wrapped\", \"tests/_core/test_plot.py::TestLabelVisibility::test_1d_row_wrapped\", \"tests/_core/test_plot.py::TestLabelVisibility::test_1d_column_wrapped_non_cross\", \"tests/_core/test_plot.py::TestLabelVisibility::test_2d\", \"tests/_core/test_plot.py::TestLabelVisibility::test_2d_unshared\", \"tests/_core/test_plot.py::TestHelpers::test_default_repr\"]",
  "environment_setup_commit": "d25872b0fc99dbf7e666a91f59bd4ed125186aa1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.836967",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}