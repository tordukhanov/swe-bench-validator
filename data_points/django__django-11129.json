{
  "repo": "django/django",
  "instance_id": "django__django-11129",
  "base_commit": "fb54aca5404a95bcd50d6d9010c34584965e3176",
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1613,10 +1613,26 @@ def trim_joins(self, targets, joins, path):\n             self.unref_alias(joins.pop())\n         return targets, joins[-1], joins\n \n+    @classmethod\n+    def _gen_col_aliases(cls, exprs):\n+        for expr in exprs:\n+            if isinstance(expr, Col):\n+                yield expr.alias\n+            else:\n+                yield from cls._gen_col_aliases(expr.get_source_expressions())\n+\n     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, simple_col=False):\n         if not allow_joins and LOOKUP_SEP in name:\n             raise FieldError(\"Joined field references are not permitted in this query\")\n-        if name in self.annotations:\n+        annotation = self.annotations.get(name)\n+        if annotation is not None:\n+            if not allow_joins:\n+                for alias in self._gen_col_aliases([annotation]):\n+                    if isinstance(self.alias_map[alias], Join):\n+                        raise FieldError(\n+                            'Joined field references are not permitted in '\n+                            'this query'\n+                        )\n             if summarize:\n                 # Summarize currently means we are doing an aggregate() query\n                 # which is executed as a wrapped subquery if any of the\n@@ -1624,7 +1640,7 @@ def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, simpl\n                 # that case we need to return a Ref to the subquery's annotation.\n                 return Ref(name, self.annotation_select[name])\n             else:\n-                return self.annotations[name]\n+                return annotation\n         else:\n             field_list = name.split(LOOKUP_SEP)\n             join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)\n",
  "test_patch": "diff --git a/tests/update/tests.py b/tests/update/tests.py\n--- a/tests/update/tests.py\n+++ b/tests/update/tests.py\n@@ -1,5 +1,6 @@\n from django.core.exceptions import FieldError\n from django.db.models import Count, F, Max\n+from django.db.models.functions import Concat, Lower\n from django.test import TestCase\n \n from .models import A, B, Bar, D, DataPoint, Foo, RelatedPoint\n@@ -182,16 +183,19 @@ def test_update_annotated_multi_table_queryset(self):\n         # Update where annotation is used for filtering\n         qs = DataPoint.objects.annotate(related_count=Count('relatedpoint'))\n         self.assertEqual(qs.filter(related_count=1).update(value='Foo'), 1)\n-        # Update where annotation is used in update parameters\n-        # #26539 - This isn't forbidden but also doesn't generate proper SQL\n-        # qs = RelatedPoint.objects.annotate(data_name=F('data__name'))\n-        # updated = qs.update(name=F('data_name'))\n-        # self.assertEqual(updated, 1)\n         # Update where aggregation annotation is used in update parameters\n         qs = RelatedPoint.objects.annotate(max=Max('data__value'))\n-        msg = (\n-            'Aggregate functions are not allowed in this query '\n-            '(name=Max(Col(update_datapoint, update.DataPoint.value))).'\n-        )\n+        msg = 'Joined field references are not permitted in this query'\n         with self.assertRaisesMessage(FieldError, msg):\n             qs.update(name=F('max'))\n+\n+    def test_update_with_joined_field_annotation(self):\n+        msg = 'Joined field references are not permitted in this query'\n+        for annotation in (\n+            F('data__name'),\n+            Lower('data__name'),\n+            Concat('data__name', 'data__value'),\n+        ):\n+            with self.subTest(annotation=annotation):\n+                with self.assertRaisesMessage(FieldError, msg):\n+                    RelatedPoint.objects.annotate(new_name=annotation).update(name=F('new_name'))\n",
  "problem_statement": "Incorrect error message with QuerySet.update() that requires a join on an annotated F expression\nDescription\n\t \n\t\t(last modified by Asif Saifuddin Auvi)\n\t \nI ran into a bit of a nasty error yesterday on Django 1.11, Postgres 9.5 where I was trying to do an update using an F expression where the value in that expression referred to an annotation of an annotation, each using a Case statement inside the annotation. The error message it was giving me was something like the following:\nProgrammingError\t\t\t\t\t\t Traceback (most recent call last)\n<ipython-input-1-29e48364245c> in <module>()\n----> 1 MyModel.objects.causing_problems()\n/usr/src/app/apps/myapp/managers.py in causing_problems(self)\n\t833\t\t\t\t ).update(\t\t\n--> 834\t\t\t\t\t\t my_field=F('my_annotated_field'),\n\t835\t\t\t\t )\n\t836 \n/usr/src/app/apps/django/db/models/query.py in update(self, **kwargs)\n\t645\t\t query._annotations = None\n\t646\t\t with transaction.atomic(using=self.db, savepoint=False):\n--> 647\t\t\t rows = query.get_compiler(self.db).execute_sql(CURSOR)\n\t648\t\t self._result_cache = None\n\t649\t\t return rows\n/usr/src/app/apps/django/db/models/sql/compiler.py in execute_sql(self, result_type)\n 1189\t\t related queries are not available.\n 1190\t\t \"\"\"\n-> 1191\t\t cursor = super(SQLUpdateCompiler, self).execute_sql(result_type)\n 1192\t\t try:\n 1193\t\t\t rows = cursor.rowcount if cursor else 0\n/usr/src/app/apps/django/db/models/sql/compiler.py in execute_sql(self, result_type, chunked_fetch)\n\t884\t\t\t\t # silencing when dropping Python 2 compatibility.\n\t885\t\t\t\t pass\n--> 886\t\t\t raise original_exception\n\t887 \n\t888\t\t if result_type == CURSOR:\nProgrammingError: missing FROM-clause entry for table \"myapp_mymodel\"\nLINE 1: ...false END, \"a_field\" = CASE WHEN CASE WHEN (\"myapp_my...\nSpent a while trying to debug where it was going wrong, ended up narrowing down the problem to trying to update a field using an F expression on an annotated field which included a join in it. I'm not sure if better error message would have helped in my case but in the much simpler test attached it'd be useful if the first and second assertions raised the same or similar error message.\n",
  "hints_text": "hi, I tried to fix on version 2. â€‹PR",
  "created_at": "2019-03-26T18:15:16Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_update_annotated_multi_table_queryset (update.tests.AdvancedTests)\", \"test_update_with_joined_field_annotation (update.tests.AdvancedTests)\"]",
  "PASS_TO_PASS": "[\"test_update (update.tests.AdvancedTests)\", \"test_update_all (update.tests.AdvancedTests)\", \"test_update_annotated_queryset (update.tests.AdvancedTests)\", \"test_update_fk (update.tests.AdvancedTests)\", \"test_update_m2m_field (update.tests.AdvancedTests)\", \"test_update_multiple_fields (update.tests.AdvancedTests)\", \"test_update_multiple_objects (update.tests.AdvancedTests)\", \"test_update_respects_to_field (update.tests.AdvancedTests)\", \"test_update_slice_fail (update.tests.AdvancedTests)\", \"test_empty_update (update.tests.SimpleTest)\", \"test_empty_update_with_inheritance (update.tests.SimpleTest)\", \"test_foreign_key_update_with_id (update.tests.SimpleTest)\", \"test_nonempty_update (update.tests.SimpleTest)\", \"test_nonempty_update_with_inheritance (update.tests.SimpleTest)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.561047",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}