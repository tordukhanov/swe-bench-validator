{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-12891",
  "base_commit": "691ceab8aea8f7c37ee89b1b806801239bb2dc69",
  "patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -18,6 +18,7 @@\n \n # LOCAL\n from astropy import config as _config\n+from astropy.utils.compat import NUMPY_LT_1_20, NUMPY_LT_1_22\n from astropy.utils.compat.misc import override__dir__\n from astropy.utils.data_info import ParentDtypeInfo\n from astropy.utils.exceptions import AstropyDeprecationWarning, AstropyWarning\n@@ -1788,19 +1789,34 @@ def _wrap_function(self, function, *args, unit=None, out=None, **kwargs):\n     def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):\n         return self._wrap_function(np.trace, offset, axis1, axis2, dtype,\n                                    out=out)\n-\n-    def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):\n-        return self._wrap_function(np.var, axis, dtype,\n-                                   out=out, ddof=ddof, keepdims=keepdims,\n-                                   unit=self.unit**2)\n-\n-    def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):\n-        return self._wrap_function(np.std, axis, dtype, out=out, ddof=ddof,\n-                                   keepdims=keepdims)\n-\n-    def mean(self, axis=None, dtype=None, out=None, keepdims=False):\n-        return self._wrap_function(np.mean, axis, dtype, out=out,\n-                                   keepdims=keepdims)\n+    if NUMPY_LT_1_20:\n+        def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):\n+            return self._wrap_function(np.var, axis, dtype,\n+                                       out=out, ddof=ddof, keepdims=keepdims,\n+                                       unit=self.unit**2)\n+    else:\n+        def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True):\n+            return self._wrap_function(np.var, axis, dtype,\n+                                       out=out, ddof=ddof, keepdims=keepdims, where=where,\n+                                       unit=self.unit**2)\n+\n+    if NUMPY_LT_1_20:\n+        def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):\n+            return self._wrap_function(np.std, axis, dtype, out=out, ddof=ddof,\n+                                       keepdims=keepdims)\n+    else:\n+        def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True):\n+            return self._wrap_function(np.std, axis, dtype, out=out, ddof=ddof,\n+                                       keepdims=keepdims, where=where)\n+\n+    if NUMPY_LT_1_20:\n+        def mean(self, axis=None, dtype=None, out=None, keepdims=False):\n+            return self._wrap_function(np.mean, axis, dtype, out=out,\n+                                       keepdims=keepdims)\n+    else:\n+        def mean(self, axis=None, dtype=None, out=None, keepdims=False, *, where=True):\n+            return self._wrap_function(np.mean, axis, dtype, out=out,\n+                                       keepdims=keepdims, where=where)\n \n     def round(self, decimals=0, out=None):\n         return self._wrap_function(np.round, decimals, out=out)\n@@ -1827,9 +1843,14 @@ def diff(self, n=1, axis=-1):\n     def ediff1d(self, to_end=None, to_begin=None):\n         return self._wrap_function(np.ediff1d, to_end, to_begin)\n \n-    def nansum(self, axis=None, out=None, keepdims=False):\n-        return self._wrap_function(np.nansum, axis,\n-                                   out=out, keepdims=keepdims)\n+    if NUMPY_LT_1_22:\n+        def nansum(self, axis=None, out=None, keepdims=False):\n+            return self._wrap_function(np.nansum, axis,\n+                                       out=out, keepdims=keepdims)\n+    else:\n+        def nansum(self, axis=None, out=None, keepdims=False, *, initial=None, where=True):\n+            return self._wrap_function(np.nansum, axis,\n+                                       out=out, keepdims=keepdims, initial=initial, where=where)\n \n     def insert(self, obj, values, axis=None):\n         \"\"\"\ndiff --git a/astropy/utils/masked/core.py b/astropy/utils/masked/core.py\n--- a/astropy/utils/masked/core.py\n+++ b/astropy/utils/masked/core.py\n@@ -1043,7 +1043,7 @@ def clip(self, min=None, max=None, out=None, **kwargs):\n             np.minimum(out, dmax, out=out, where=True if mmax is None else ~mmax)\n         return masked_out\n \n-    def mean(self, axis=None, dtype=None, out=None, keepdims=False):\n+    def mean(self, axis=None, dtype=None, out=None, keepdims=False, *, where=True):\n         # Implementation based on that in numpy/core/_methods.py\n         # Cast bool, unsigned int, and int to float64 by default,\n         # and do float16 at higher precision.\n@@ -1055,38 +1055,42 @@ def mean(self, axis=None, dtype=None, out=None, keepdims=False):\n                 dtype = np.dtype('f4')\n                 is_float16_result = out is None\n \n+        where = ~self.mask & where\n+\n         result = self.sum(axis=axis, dtype=dtype, out=out,\n-                          keepdims=keepdims, where=~self.mask)\n-        n = np.add.reduce(~self.mask, axis=axis, keepdims=keepdims)\n+                          keepdims=keepdims, where=where)\n+        n = np.add.reduce(where, axis=axis, keepdims=keepdims)\n         result /= n\n         if is_float16_result:\n             result = result.astype(self.dtype)\n         return result\n \n-    def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):\n+    def var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True):\n+        where_final = ~self.mask & where\n+\n         # Simplified implementation based on that in numpy/core/_methods.py\n-        n = np.add.reduce(~self.mask, axis=axis, keepdims=keepdims)[...]\n+        n = np.add.reduce(where_final, axis=axis, keepdims=keepdims)[...]\n \n         # Cast bool, unsigned int, and int to float64 by default.\n         if dtype is None and issubclass(self.dtype.type,\n                                         (np.integer, np.bool_)):\n             dtype = np.dtype('f8')\n-        mean = self.mean(axis=axis, dtype=dtype, keepdims=True)\n+        mean = self.mean(axis=axis, dtype=dtype, keepdims=True, where=where)\n \n         x = self - mean\n         x *= x.conjugate()  # Conjugate just returns x if not complex.\n \n         result = x.sum(axis=axis, dtype=dtype, out=out,\n-                       keepdims=keepdims, where=~x.mask)\n+                       keepdims=keepdims, where=where_final)\n         n -= ddof\n         n = np.maximum(n, 0, out=n)\n         result /= n\n         result._mask |= (n == 0)\n         return result\n \n-    def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False):\n+    def std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True):\n         result = self.var(axis=axis, dtype=dtype, out=out, ddof=ddof,\n-                          keepdims=keepdims)\n+                          keepdims=keepdims, where=where)\n         return np.sqrt(result, out=result)\n \n     def __bool__(self):\n@@ -1094,13 +1098,13 @@ def __bool__(self):\n         result = super().__bool__()\n         return result and not self.mask\n \n-    def any(self, axis=None, out=None, keepdims=False):\n+    def any(self, axis=None, out=None, keepdims=False, *, where=True):\n         return np.logical_or.reduce(self, axis=axis, out=out,\n-                                    keepdims=keepdims, where=~self.mask)\n+                                    keepdims=keepdims, where=~self.mask & where)\n \n-    def all(self, axis=None, out=None, keepdims=False):\n+    def all(self, axis=None, out=None, keepdims=False, *, where=True):\n         return np.logical_and.reduce(self, axis=axis, out=out,\n-                                     keepdims=keepdims, where=~self.mask)\n+                                     keepdims=keepdims, where=~self.mask & where)\n \n     # Following overrides needed since somehow the ndarray implementation\n     # does not actually call these.\n",
  "test_patch": "diff --git a/astropy/units/tests/test_quantity_array_methods.py b/astropy/units/tests/test_quantity_array_methods.py\n--- a/astropy/units/tests/test_quantity_array_methods.py\n+++ b/astropy/units/tests/test_quantity_array_methods.py\n@@ -7,7 +7,7 @@\n from numpy.testing import assert_array_equal\n \n from astropy import units as u\n-from astropy.utils.compat import NUMPY_LT_1_21_1\n+from astropy.utils.compat import NUMPY_LT_1_20, NUMPY_LT_1_21_1, NUMPY_LT_1_22\n \n \n class TestQuantityArrayCopy:\n@@ -168,6 +168,11 @@ def test_mean_inplace(self):\n         assert qi2 is qi\n         assert qi == 3.6 * u.m\n \n+    @pytest.mark.xfail(NUMPY_LT_1_20, reason=\"'where' keyword argument not supported for numpy < 1.20\")\n+    def test_mean_where(self):\n+        q1 = np.array([1., 2., 4., 5., 6., 7.]) * u.m\n+        assert_array_equal(np.mean(q1, where=q1 < 7 * u.m), 3.6 * u.m)\n+\n     def test_std(self):\n         q1 = np.array([1., 2.]) * u.m\n         assert_array_equal(np.std(q1), 0.5 * u.m)\n@@ -179,6 +184,11 @@ def test_std_inplace(self):\n         np.std(q1, out=qi)\n         assert qi == 0.5 * u.m\n \n+    @pytest.mark.xfail(NUMPY_LT_1_20, reason=\"'where' keyword argument not supported for numpy < 1.20\")\n+    def test_std_where(self):\n+        q1 = np.array([1., 2., 3.]) * u.m\n+        assert_array_equal(np.std(q1, where=q1 < 3 * u.m), 0.5 * u.m)\n+\n     def test_var(self):\n         q1 = np.array([1., 2.]) * u.m\n         assert_array_equal(np.var(q1), 0.25 * u.m ** 2)\n@@ -190,6 +200,11 @@ def test_var_inplace(self):\n         np.var(q1, out=qi)\n         assert qi == 0.25 * u.m ** 2\n \n+    @pytest.mark.xfail(NUMPY_LT_1_20, reason=\"'where' keyword argument not supported for numpy < 1.20\")\n+    def test_var_where(self):\n+        q1 = np.array([1., 2., 3.]) * u.m\n+        assert_array_equal(np.var(q1, where=q1 < 3 * u.m), 0.25 * u.m ** 2)\n+\n     def test_median(self):\n         q1 = np.array([1., 2., 4., 5., 6.]) * u.m\n         assert np.median(q1) == 4. * u.m\n@@ -210,6 +225,10 @@ def test_min_inplace(self):\n         np.min(q1, out=qi)\n         assert qi == 1. * u.m\n \n+    def test_min_where(self):\n+        q1 = np.array([0., 1., 2., 4., 5., 6.]) * u.m\n+        assert np.min(q1, initial=10 * u.m, where=q1 > 0 * u.m) == 1. * u.m\n+\n     def test_argmin(self):\n         q1 = np.array([6., 2., 4., 5., 6.]) * u.m\n         assert np.argmin(q1) == 1\n@@ -224,6 +243,10 @@ def test_max_inplace(self):\n         np.max(q1, out=qi)\n         assert qi == 6. * u.m\n \n+    def test_max_where(self):\n+        q1 = np.array([1., 2., 4., 5., 6., 7.]) * u.m\n+        assert np.max(q1, initial=0 * u.m, where=q1 < 7 * u.m) == 6. * u.m\n+\n     def test_argmax(self):\n         q1 = np.array([5., 2., 4., 5., 6.]) * u.m\n         assert np.argmax(q1) == 4\n@@ -285,6 +308,14 @@ def test_sum_inplace(self):\n         np.sum(q1, out=qi)\n         assert qi == 9. * u.m\n \n+    def test_sum_where(self):\n+\n+        q1 = np.array([1., 2., 6., 7.]) * u.m\n+        initial = 0 * u.m\n+        where = q1 < 7 * u.m\n+        assert np.all(q1.sum(initial=initial, where=where) == 9. * u.m)\n+        assert np.all(np.sum(q1, initial=initial, where=where) == 9. * u.m)\n+\n     def test_cumsum(self):\n \n         q1 = np.array([1, 2, 6]) * u.m\n@@ -327,6 +358,15 @@ def test_nansum_inplace(self):\n         assert qout2 is qi2\n         assert qi2 == np.nansum(q1.value) * q1.unit\n \n+    @pytest.mark.xfail(NUMPY_LT_1_22, reason=\"'where' keyword argument not supported for numpy < 1.22\")\n+    def test_nansum_where(self):\n+\n+        q1 = np.array([1., 2., np.nan, 4.]) * u.m\n+        initial = 0 * u.m\n+        where = q1 < 4 * u.m\n+        assert np.all(q1.nansum(initial=initial, where=where) == 3. * u.m)\n+        assert np.all(np.nansum(q1, initial=initial, where=where) == 3. * u.m)\n+\n     def test_prod(self):\n \n         q1 = np.array([1, 2, 6]) * u.m\ndiff --git a/astropy/utils/masked/tests/test_masked.py b/astropy/utils/masked/tests/test_masked.py\n--- a/astropy/utils/masked/tests/test_masked.py\n+++ b/astropy/utils/masked/tests/test_masked.py\n@@ -13,6 +13,7 @@\n from astropy.units import Quantity\n from astropy.coordinates import Longitude\n from astropy.utils.masked import Masked, MaskedNDArray\n+from astropy.utils.compat import NUMPY_LT_1_20\n \n \n def assert_masked_equal(a, b):\n@@ -781,6 +782,19 @@ def test_sum(self, axis):\n         assert_array_equal(ma_sum.unmasked, expected_data)\n         assert_array_equal(ma_sum.mask, expected_mask)\n \n+    @pytest.mark.parametrize('axis', (0, 1, None))\n+    def test_sum_where(self, axis):\n+        where = np.array([\n+            [True, False, False, ],\n+            [True, True, True, ],\n+        ])\n+        where_final = ~self.ma.mask & where\n+        ma_sum = self.ma.sum(axis, where=where_final)\n+        expected_data = self.ma.unmasked.sum(axis, where=where_final)\n+        expected_mask = np.logical_or.reduce(self.ma.mask, axis=axis, where=where_final) | (~where_final).all(axis)\n+        assert_array_equal(ma_sum.unmasked, expected_data)\n+        assert_array_equal(ma_sum.mask, expected_mask)\n+\n     @pytest.mark.parametrize('axis', (0, 1, None))\n     def test_cumsum(self, axis):\n         ma_sum = self.ma.cumsum(axis)\n@@ -824,6 +838,22 @@ def test_mean_inplace(self):\n         assert result is out\n         assert_masked_equal(out, expected)\n \n+    @pytest.mark.xfail(NUMPY_LT_1_20, reason=\"'where' keyword argument not supported for numpy < 1.20\")\n+    @pytest.mark.filterwarnings(\"ignore:.*encountered in.*divide\")\n+    @pytest.mark.filterwarnings(\"ignore:Mean of empty slice\")\n+    @pytest.mark.parametrize('axis', (0, 1, None))\n+    def test_mean_where(self, axis):\n+        where = np.array([\n+            [True, False, False, ],\n+            [True, True, True, ],\n+        ])\n+        where_final = ~self.ma.mask & where\n+        ma_mean = self.ma.mean(axis, where=where)\n+        expected_data = self.ma.unmasked.mean(axis, where=where_final)\n+        expected_mask = np.logical_or.reduce(self.ma.mask, axis=axis, where=where_final) | (~where_final).all(axis)\n+        assert_array_equal(ma_mean.unmasked, expected_data)\n+        assert_array_equal(ma_mean.mask, expected_mask)\n+\n     @pytest.mark.filterwarnings(\"ignore:.*encountered in.*divide\")\n     @pytest.mark.parametrize('axis', (0, 1, None))\n     def test_var(self, axis):\n@@ -851,6 +881,22 @@ def test_var_int16(self):\n         expected = ma.astype('f8').var()\n         assert_masked_equal(ma_var, expected)\n \n+    @pytest.mark.xfail(NUMPY_LT_1_20, reason=\"'where' keyword argument not supported for numpy < 1.20\")\n+    @pytest.mark.filterwarnings(\"ignore:.*encountered in.*divide\")\n+    @pytest.mark.filterwarnings(\"ignore:Degrees of freedom <= 0 for slice\")\n+    @pytest.mark.parametrize('axis', (0, 1, None))\n+    def test_var_where(self, axis):\n+        where = np.array([\n+            [True, False, False, ],\n+            [True, True, True, ],\n+        ])\n+        where_final = ~self.ma.mask & where\n+        ma_var = self.ma.var(axis, where=where)\n+        expected_data = self.ma.unmasked.var(axis, where=where_final)\n+        expected_mask = np.logical_or.reduce(self.ma.mask, axis=axis, where=where_final) | (~where_final).all(axis)\n+        assert_array_equal(ma_var.unmasked, expected_data)\n+        assert_array_equal(ma_var.mask, expected_mask)\n+\n     def test_std(self):\n         ma_std = self.ma.std(1, ddof=1)\n         ma_var1 = self.ma.var(1, ddof=1)\n@@ -864,6 +910,22 @@ def test_std_inplace(self):\n         assert result is out\n         assert_masked_equal(result, expected)\n \n+    @pytest.mark.xfail(NUMPY_LT_1_20, reason=\"'where' keyword argument not supported for numpy < 1.20\")\n+    @pytest.mark.filterwarnings(\"ignore:.*encountered in.*divide\")\n+    @pytest.mark.filterwarnings(\"ignore:Degrees of freedom <= 0 for slice\")\n+    @pytest.mark.parametrize('axis', (0, 1, None))\n+    def test_std_where(self, axis):\n+        where = np.array([\n+            [True, False, False, ],\n+            [True, True, True, ],\n+        ])\n+        where_final = ~self.ma.mask & where\n+        ma_std = self.ma.std(axis, where=where)\n+        expected_data = self.ma.unmasked.std(axis, where=where_final)\n+        expected_mask = np.logical_or.reduce(self.ma.mask, axis=axis, where=where_final) | (~where_final).all(axis)\n+        assert_array_equal(ma_std.unmasked, expected_data)\n+        assert_array_equal(ma_std.mask, expected_mask)\n+\n     @pytest.mark.parametrize('axis', (0, 1, None))\n     def test_min(self, axis):\n         ma_min = self.ma.min(axis)\n@@ -879,6 +941,19 @@ def test_min_with_masked_nan(self):\n         assert_array_equal(ma_min.unmasked, np.array(2.))\n         assert not ma_min.mask\n \n+    @pytest.mark.parametrize('axis', (0, 1, None))\n+    def test_min_where(self, axis):\n+        where = np.array([\n+            [True, False, False, ],\n+            [True, True, True, ],\n+        ])\n+        where_final = ~self.ma.mask & where\n+        ma_min = self.ma.min(axis, where=where_final, initial=np.inf)\n+        expected_data = self.ma.unmasked.min(axis, where=where_final, initial=np.inf)\n+        expected_mask = np.logical_or.reduce(self.ma.mask, axis=axis, where=where_final) | (~where_final).all(axis)\n+        assert_array_equal(ma_min.unmasked, expected_data)\n+        assert_array_equal(ma_min.mask, expected_mask)\n+\n     @pytest.mark.parametrize('axis', (0, 1, None))\n     def test_max(self, axis):\n         ma_max = self.ma.max(axis)\n@@ -888,6 +963,19 @@ def test_max(self, axis):\n         assert_array_equal(ma_max.unmasked, expected_data)\n         assert not np.any(ma_max.mask)\n \n+    @pytest.mark.parametrize('axis', (0, 1, None))\n+    def test_max_where(self, axis):\n+        where = np.array([\n+            [True, False, False, ],\n+            [True, True, True, ],\n+        ])\n+        where_final = ~self.ma.mask & where\n+        ma_max = self.ma.max(axis, where=where_final, initial=-np.inf)\n+        expected_data = self.ma.unmasked.max(axis, where=where_final, initial=-np.inf)\n+        expected_mask = np.logical_or.reduce(self.ma.mask, axis=axis, where=where_final) | (~where_final).all(axis)\n+        assert_array_equal(ma_max.unmasked, expected_data)\n+        assert_array_equal(ma_max.mask, expected_mask)\n+\n     @pytest.mark.parametrize('axis', (0, 1, None))\n     def test_argmin(self, axis):\n         ma_argmin = self.ma.argmin(axis)\n@@ -1020,6 +1108,22 @@ def test_any_inplace(self):\n         assert result is out\n         assert_masked_equal(result, expected)\n \n+    @pytest.mark.xfail(NUMPY_LT_1_20, reason=\"'where' keyword argument not supported for numpy < 1.20\")\n+    @pytest.mark.parametrize('method', ('all', 'any'))\n+    @pytest.mark.parametrize('axis', (0, 1, None))\n+    def test_all_and_any_where(self, method, axis):\n+        where = np.array([\n+            [True, False, False, ],\n+            [True, True, True, ],\n+        ])\n+        where_final = ~self.ma.mask & where\n+        ma_eq = self.ma == self.ma\n+        ma_any = getattr(ma_eq, method)(axis, where=where)\n+        expected_data = getattr(ma_eq.unmasked, method)(axis, where=where_final)\n+        expected_mask = np.logical_or.reduce(self.ma.mask, axis=axis, where=where_final) | (~where_final).all(axis)\n+        assert_array_equal(ma_any.unmasked, expected_data)\n+        assert_array_equal(ma_any.mask, expected_mask)\n+\n     @pytest.mark.parametrize('offset', (0, 1))\n     def test_diagonal(self, offset):\n         mda = self.ma.diagonal(offset=offset)\n",
  "problem_statement": "The `where` keyword argument of `np.mean` is not supported for `astropy.units.Quantity` instances.\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n### Description\r\n<!-- Provide a general description of the feature you would like. -->\r\n<!-- If you want to, you can suggest a draft design or API. -->\r\n<!-- This way we have a deeper discussion on the feature. -->\r\n\r\nApologies if there is a duplicate somewhere, I scoured all the issues for this problem and I couldn't find it mentioned yet.\r\n\r\nThe `where` keyword argument was added to `np.mean` and all the other `np.reduce`-based functions in version 1.20.0 of numpy,\r\nbut it doesn't seem to work yet with `astopy.units.Quantity`.\r\n\r\nDoes anyone know if there is some limitation in `astropy.units.Quantity` that is preventing this feature from being implemented?\r\n\r\nIf not, I could put some time towards updating `astropy.units.Quantity` to support this feature.\r\n\r\n### Additional context\r\n<!-- Add any other context or screenshots about the feature request here. -->\r\n<!-- This part is optional. -->\r\n\n",
  "hints_text": "",
  "created_at": "2022-02-24T23:49:13Z",
  "version": "4.3",
  "FAIL_TO_PASS": "[\"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_mean_where\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_std_where\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_var_where\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_mean_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_mean_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_mean_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_var_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_var_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_var_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_std_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_std_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_std_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any_where[0-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any_where[0-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any_where[1-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any_where[1-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any_where[None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any_where[None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_mean_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_mean_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_mean_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_var_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_var_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_var_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_std_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_std_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_std_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any_where[0-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any_where[0-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any_where[1-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any_where[1-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any_where[None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any_where[None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_mean_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_mean_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_mean_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_var_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_var_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_var_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_std_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_std_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_std_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any_where[0-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any_where[0-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any_where[1-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any_where[1-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any_where[None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any_where[None-any]\"]",
  "PASS_TO_PASS": "[\"astropy/units/tests/test_quantity_array_methods.py::TestQuantityArrayCopy::test_copy_on_creation\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityArrayCopy::test_to_copies\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityArrayCopy::test_si_copies\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityArrayCopy::test_getitem_is_view\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityArrayCopy::test_flat\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityReshapeFuncs::test_reshape\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityReshapeFuncs::test_squeeze\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityReshapeFuncs::test_ravel\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityReshapeFuncs::test_flatten\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityReshapeFuncs::test_transpose\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityReshapeFuncs::test_swapaxes\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityReshapeFuncs::test_flat_attributes\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_mean\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_mean_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_std\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_std_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_var\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_var_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_median\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_median_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_argmin\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_argmax\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_clip\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_clip_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_conj\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_ptp\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_ptp_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_round\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_round_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_sum\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_sum_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_cumsum\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_cumsum_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_nansum\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_nansum_inplace\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_prod\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_cumprod\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_diff\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_ediff1d\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_dot_meth\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_trace_func\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_trace_meth\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_clip_func\", \"astropy/units/tests/test_quantity_array_methods.py::TestQuantityStatsFuncs::test_clip_meth\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_item\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_take_put\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_slice\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_fill\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_repeat_compress_diagonal\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_view\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_slice_to_quantity\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_byte_type_view_field_changes\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_sort\", \"astropy/units/tests/test_quantity_array_methods.py::TestArrayConversion::test_not_implemented\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayInitialization::test_simple\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayInitialization::test_structured\", \"astropy/utils/masked/tests/test_masked.py::test_masked_ndarray_init\", \"astropy/utils/masked/tests/test_masked.py::test_cannot_initialize_with_masked\", \"astropy/utils/masked/tests/test_masked.py::test_cannot_just_use_anything_with_a_mask_attribute\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedClassCreation::test_setup\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedClassCreation::test_masked_list\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedClassCreation::test_from_list\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedClassCreation::test_masked_list_subclass\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedNDArraySubclassCreation::test_direct_creation\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedNDArraySubclassCreation::test_initialization_without_mask\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedNDArraySubclassCreation::test_initialization_with_masked_values[Masked]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedNDArraySubclassCreation::test_initialization_with_masked_values[MaskedArray]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedNDArraySubclassCreation::test_indirect_creation\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedNDArraySubclassCreation::test_can_initialize_with_masked_values\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedNDArraySubclassCreation::test_viewing\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityInitialization::test_simple\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityInitialization::test_structured\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityInitialization::test_masked_quantity_class_init\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityInitialization::test_masked_quantity_getting\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityInitialization::test_initialization_without_mask\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityInitialization::test_initialization_with_masked_values[Masked]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityInitialization::test_initialization_with_masked_values[MaskedArray]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_whole_mask_setting_simple\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_whole_mask_setting_structured\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_part_mask_setting[item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_part_mask_setting[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_part_mask_setting[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_part_mask_setting[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_part_mask_setting_structured[a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_part_mask_setting_structured[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_part_mask_setting_structured[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_part_mask_setting_structured[item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskSetting::test_part_mask_setting_structured[1]\", \"astropy/utils/masked/tests/test_masked.py::TestViewing::test_viewing_as_new_type\", \"astropy/utils/masked/tests/test_masked.py::TestViewing::test_viewing_as_new_dtype\", \"astropy/utils/masked/tests/test_masked.py::TestViewing::test_viewing_as_new_dtype_not_implemented[2f4]\", \"astropy/utils/masked/tests/test_masked.py::TestViewing::test_viewing_as_new_dtype_not_implemented[f8,f8,f8]\", \"astropy/utils/masked/tests/test_masked.py::TestViewing::test_viewing_as_something_impossible\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayCopyFilled::test_copy\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayCopyFilled::test_filled[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayCopyFilled::test_filled[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayCopyFilled::test_filled_no_fill_value\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayCopyFilled::test_filled_structured[fill_value0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayCopyFilled::test_filled_structured[fill_value1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayCopyFilled::test_flat\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityCopyFilled::test_copy\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityCopyFilled::test_filled[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityCopyFilled::test_filled[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityCopyFilled::test_filled_no_fill_value\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityCopyFilled::test_filled_structured[fill_value0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityCopyFilled::test_filled_structured[fill_value1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityCopyFilled::test_flat\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeCopyFilled::test_copy\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeCopyFilled::test_filled[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeCopyFilled::test_filled[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeCopyFilled::test_filled_no_fill_value\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeCopyFilled::test_filled_structured[fill_value0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeCopyFilled::test_filled_structured[fill_value1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeCopyFilled::test_flat\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayShaping::test_reshape\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayShaping::test_shape_setting\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayShaping::test_shape_setting_failure\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayShaping::test_ravel\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayShaping::test_transpose\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayShaping::test_iter\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem[item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem_structured[a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem_structured[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem_structured[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem_structured[item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem_structured[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_take[indices0-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_take[indices1-0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_take[indices2-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_take[indices3-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[None-item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[None-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[None-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[None-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[True-item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[True-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[True-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[True-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[False-item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[False-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[False-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem[False-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[None-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[None-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[None-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[None-item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[None-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[True-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[True-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[True-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[True-item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[True-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[False-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[False-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[False-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[False-item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_structured[False-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_np_ma_masked[item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_np_ma_masked[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_np_ma_masked[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_np_ma_masked[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_getitem_strings\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayItems::test_setitem_strings_np_ma_masked\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_getitem[item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_getitem[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_getitem[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_getitem[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_getitem_structured[a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_getitem_structured[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_getitem_structured[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_getitem_structured[item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_getitem_structured[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_take[indices0-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_take[indices1-0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_take[indices2-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_take[indices3-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[None-item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[None-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[None-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[None-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[True-item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[True-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[True-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[True-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[False-item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[False-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[False-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem[False-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[None-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[None-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[None-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[None-item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[None-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[True-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[True-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[True-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[True-item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[True-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[False-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[False-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[False-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[False-item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_structured[False-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_np_ma_masked[item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_np_ma_masked[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_np_ma_masked[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityItems::test_setitem_np_ma_masked[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_getitem[item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_getitem[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_getitem[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_getitem[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_getitem_structured[a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_getitem_structured[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_getitem_structured[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_getitem_structured[item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_getitem_structured[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_take[indices0-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_take[indices1-0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_take[indices2-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_take[indices3-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[None-item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[None-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[None-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[None-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[True-item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[True-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[True-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[True-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[False-item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[False-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[False-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem[False-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[None-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[None-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[None-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[None-item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[None-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[True-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[True-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[True-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[True-item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[True-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[False-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[False-item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[False-item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[False-item3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_structured[False-1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_np_ma_masked[item0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_np_ma_masked[item1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_np_ma_masked[item2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeItems::test_setitem_np_ma_masked[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_add_subtract[add]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_add_subtract[sub]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_equality[eq]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_equality[ne]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_matmul\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_matvec\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_vecmat\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_vecvec\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_equality_strings[eq]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_equality_strings[ne]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayOperators::test_not_implemented\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityOperators::test_add_subtract[add]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityOperators::test_add_subtract[sub]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityOperators::test_equality[eq]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityOperators::test_equality[ne]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityOperators::test_not_implemented\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityOperators::test_matmul\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityOperators::test_matvec\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityOperators::test_vecmat\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityOperators::test_vecvec\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeOperators::test_add_subtract[add]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeOperators::test_add_subtract[sub]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeOperators::test_equality[eq]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeOperators::test_equality[ne]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeOperators::test_not_implemented\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeOperators::test_matmul\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeOperators::test_matvec\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeOperators::test_vecmat\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeOperators::test_vecvec\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_round\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_sum[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_sum[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_sum[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_sum_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_sum_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_sum_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_cumsum[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_cumsum[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_cumsum[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_mean[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_mean[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_mean[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_mean_int16\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_mean_float16\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_mean_inplace\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_var[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_var[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_var[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_var_int16\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_std\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_std_inplace\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_min[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_min[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_min[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_min_with_masked_nan\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_min_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_min_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_min_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_max[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_max[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_max[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_max_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_max_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_max_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argmin[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argmin[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argmin[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argmin_only_one_unmasked_element\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argmax[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argmax[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argmax[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argsort[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argsort[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argsort[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_structured_argsort[0-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_structured_argsort[0-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_structured_argsort[0-order2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_structured_argsort[0-order3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_structured_argsort[1-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_structured_argsort[1-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_structured_argsort[1-order2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_structured_argsort[1-order3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argsort_error\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_sort[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_sort[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argpartition[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_argpartition[3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_partition[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_partition[3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_explicit\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[a-0-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[a-0-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[a-1-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[a-1-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[a-None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[a-None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[b-None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[b-None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[c-0-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[c-0-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[c-1-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[c-1-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[c-None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_all_and_any[c-None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_any_inplace\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_diagonal[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_diagonal[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_trace[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_trace[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_clip\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayMethods::test_clip_masked_min_max\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_round\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_sum[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_sum[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_sum[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_sum_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_sum_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_sum_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_cumsum[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_cumsum[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_cumsum[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_mean[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_mean[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_mean[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_mean_int16\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_mean_float16\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_mean_inplace\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_var[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_var[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_var[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_var_int16\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_std\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_std_inplace\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_min_with_masked_nan\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_min_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_min_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_min_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_max_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_max_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_max_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argmin[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argmin[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argmin[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argmin_only_one_unmasked_element\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argmax[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argmax[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argmax[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argsort[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argsort[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argsort[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_structured_argsort[0-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_structured_argsort[0-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_structured_argsort[0-order2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_structured_argsort[0-order3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_structured_argsort[1-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_structured_argsort[1-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_structured_argsort[1-order2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_structured_argsort[1-order3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argsort_error\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_sort[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_sort[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argpartition[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_argpartition[3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_partition[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_partition[3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_explicit\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[a-0-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[a-0-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[a-1-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[a-1-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[a-None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[a-None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[b-None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[b-None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[c-0-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[c-0-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[c-1-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[c-1-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[c-None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_all_and_any[c-None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_any_inplace\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_diagonal[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_diagonal[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_trace[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_trace[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_clip\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityMethods::test_clip_masked_min_max\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_round\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_sum[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_sum[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_sum[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_sum_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_sum_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_sum_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_cumsum[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_cumsum[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_cumsum[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_mean[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_mean[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_mean[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_mean_int16\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_mean_float16\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_mean_inplace\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_var[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_var[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_var[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_var_int16\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_std\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_std_inplace\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_min_with_masked_nan\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_min_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_min_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_min_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_max_where[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_max_where[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_max_where[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argmin[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argmin[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argmin[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argmin_only_one_unmasked_element\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argmax[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argmax[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argmax[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argsort[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argsort[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argsort[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_structured_argsort[0-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_structured_argsort[0-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_structured_argsort[0-order2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_structured_argsort[0-order3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_structured_argsort[1-None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_structured_argsort[1-a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_structured_argsort[1-order2]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_structured_argsort[1-order3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argsort_error\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_sort[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_sort[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argpartition[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_argpartition[3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_partition[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_partition[3]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_explicit\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[a-0-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[a-0-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[a-1-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[a-1-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[a-None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[a-None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[b-None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[b-None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[c-0-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[c-0-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[c-1-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[c-1-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[c-None-any]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_all_and_any[c-None-all]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_any_inplace\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_diagonal[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_diagonal[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_trace[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_trace[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_clip\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedLongitudeMethods::test_clip_masked_min_max\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayProductMethods::test_prod[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayProductMethods::test_prod[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayProductMethods::test_prod[None]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayProductMethods::test_cumprod[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayProductMethods::test_cumprod[1]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayProductMethods::test_cumprod[None]\", \"astropy/utils/masked/tests/test_masked.py::test_masked_str_explicit\", \"astropy/utils/masked/tests/test_masked.py::test_masked_repr_explicit\", \"astropy/utils/masked/tests/test_masked.py::test_masked_repr_summary\", \"astropy/utils/masked/tests/test_masked.py::test_masked_repr_nodata\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayRepr::test_array_str\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayRepr::test_scalar_str\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayRepr::test_array_repr\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayRepr::test_scalar_repr\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityRepr::test_array_str\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityRepr::test_scalar_str\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityRepr::test_array_repr\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityRepr::test_scalar_repr\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedRecarray::test_recarray_setting\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedRecarray::test_recarray_field_getting[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedRecarray::test_recarray_field_getting[a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedRecarray::test_recarray_field_setting[0]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedRecarray::test_recarray_field_setting[a]\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayInteractionWithNumpyMA::test_masked_array_from_masked\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedArrayInteractionWithNumpyMA::test_view_as_masked_array\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityInteractionWithNumpyMA::test_masked_array_from_masked\", \"astropy/utils/masked/tests/test_masked.py::TestMaskedQuantityInteractionWithNumpyMA::test_view_as_masked_array\"]",
  "environment_setup_commit": "298ccb478e6bf092953bca67a3d29dc6c35f6752",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.523274",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}