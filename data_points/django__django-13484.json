{
  "repo": "django/django",
  "instance_id": "django__django-13484",
  "base_commit": "292b3be698ef58aff9c215d62a444f66ead578c3",
  "patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -11,6 +11,7 @@\n \n from django.core import exceptions\n from django.utils.functional import cached_property\n+from django.utils.hashable import make_hashable\n \n from . import BLANK_CHOICE_DASH\n from .mixins import FieldCacheMixin\n@@ -115,6 +116,28 @@ def __repr__(self):\n             self.related_model._meta.model_name,\n         )\n \n+    @property\n+    def identity(self):\n+        return (\n+            self.field,\n+            self.model,\n+            self.related_name,\n+            self.related_query_name,\n+            tuple(sorted(make_hashable(self.limit_choices_to))),\n+            self.parent_link,\n+            self.on_delete,\n+            self.symmetrical,\n+            self.multiple,\n+        )\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, self.__class__):\n+            return NotImplemented\n+        return self.identity == other.identity\n+\n+    def __hash__(self):\n+        return hash(self.identity)\n+\n     def get_choices(\n         self, include_blank=True, blank_choice=BLANK_CHOICE_DASH,\n         limit_choices_to=None, ordering=(),\n@@ -215,6 +238,10 @@ def __getstate__(self):\n         state.pop('related_model', None)\n         return state\n \n+    @property\n+    def identity(self):\n+        return super().identity + (self.field_name,)\n+\n     def get_related_field(self):\n         \"\"\"\n         Return the Field in the 'to' object to which this relationship is tied.\n@@ -279,6 +306,14 @@ def __init__(self, field, to, related_name=None, related_query_name=None,\n         self.symmetrical = symmetrical\n         self.db_constraint = db_constraint\n \n+    @property\n+    def identity(self):\n+        return super().identity + (\n+            self.through,\n+            self.through_fields,\n+            self.db_constraint,\n+        )\n+\n     def get_related_field(self):\n         \"\"\"\n         Return the field in the 'to' object to which this relationship is tied.\n",
  "test_patch": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -219,6 +219,40 @@ def test_pickle_subquery_queryset_not_evaluated(self):\n         with self.assertNumQueries(0):\n             self.assert_pickles(groups)\n \n+    def test_pickle_filteredrelation(self):\n+        group = Group.objects.create(name='group')\n+        event_1 = Event.objects.create(title='Big event', group=group)\n+        event_2 = Event.objects.create(title='Small event', group=group)\n+        Happening.objects.bulk_create([\n+            Happening(event=event_1, number1=5),\n+            Happening(event=event_2, number1=3),\n+        ])\n+        groups = Group.objects.annotate(\n+            big_events=models.FilteredRelation(\n+                'event',\n+                condition=models.Q(event__title__startswith='Big'),\n+            ),\n+        ).annotate(sum_number=models.Sum('big_events__happening__number1'))\n+        groups_query = pickle.loads(pickle.dumps(groups.query))\n+        groups = Group.objects.all()\n+        groups.query = groups_query\n+        self.assertEqual(groups.get().sum_number, 5)\n+\n+    def test_pickle_filteredrelation_m2m(self):\n+        group = Group.objects.create(name='group')\n+        m2mmodel = M2MModel.objects.create()\n+        m2mmodel.groups.add(group)\n+        groups = Group.objects.annotate(\n+            first_m2mmodels=models.FilteredRelation(\n+                'm2mmodel',\n+                condition=models.Q(m2mmodel__pk__lt=10),\n+            ),\n+        ).annotate(count_groups=models.Count('first_m2mmodels__groups'))\n+        groups_query = pickle.loads(pickle.dumps(groups.query))\n+        groups = Group.objects.all()\n+        groups.query = groups_query\n+        self.assertEqual(groups.get().count_groups, 1)\n+\n     def test_annotation_with_callable_default(self):\n         # Happening.when has a callable default of datetime.datetime.now.\n         qs = Happening.objects.annotate(latest_time=models.Max('when'))\n",
  "problem_statement": "Queryset crashes when recreated from a pickled query with FilteredRelation used in aggregation.\nDescription\n\t\nI am pickling query objects (queryset.query) for later re-evaluation as per â€‹https://docs.djangoproject.com/en/2.2/ref/models/querysets/#pickling-querysets. However, when I tried to rerun a query that contains a FilteredRelation inside a filter, I get an psycopg2.errors.UndefinedTable: missing FROM-clause entry for table \"t3\" error.\nI created a minimum reproducible example.\nmodels.py\nfrom django.db import models\nclass Publication(models.Model):\n\ttitle = models.CharField(max_length=64)\nclass Session(models.Model):\n\tTYPE_CHOICES = (('A', 'A'), ('B', 'B'))\n\tpublication = models.ForeignKey(Publication, on_delete=models.CASCADE)\n\tsession_type = models.CharField(choices=TYPE_CHOICES, default='A', max_length=1)\n\tplace = models.CharField(max_length=16)\n\tvalue = models.PositiveIntegerField(default=1)\nThe actual code to cause the crash:\nimport pickle\nfrom django.db.models import FilteredRelation, Q, Sum\nfrom django_error.models import Publication, Session\np1 = Publication.objects.create(title='Foo')\np2 = Publication.objects.create(title='Bar')\nSession.objects.create(publication=p1, session_type='A', place='X', value=1)\nSession.objects.create(publication=p1, session_type='B', place='X', value=2)\nSession.objects.create(publication=p2, session_type='A', place='X', value=4)\nSession.objects.create(publication=p2, session_type='B', place='X', value=8)\nSession.objects.create(publication=p1, session_type='A', place='Y', value=1)\nSession.objects.create(publication=p1, session_type='B', place='Y', value=2)\nSession.objects.create(publication=p2, session_type='A', place='Y', value=4)\nSession.objects.create(publication=p2, session_type='B', place='Y', value=8)\nqs = Publication.objects.all().annotate(\n\trelevant_sessions=FilteredRelation('session', condition=Q(session__session_type='A'))\n).annotate(x=Sum('relevant_sessions__value'))\n# just print it out to make sure the query works\nprint(list(qs))\nqs2 = Publication.objects.all()\nqs2.query = pickle.loads(pickle.dumps(qs.query))\n# the following crashes with an error\n#\t psycopg2.errors.UndefinedTable: missing FROM-clause entry for table \"t3\"\n#\t LINE 1: ...n\".\"id\" = relevant_sessions.\"publication_id\" AND (T3.\"sessio...\nprint(list(qs2))\nIn the crashing query, there seems to be a difference in the table_map attribute - this is probably where the t3 table is coming from.\nPlease let me know if there is any more info required for hunting this down.\nCheers\nBeda\np.s.- I also tried in Django 3.1 and the behavior is the same.\np.p.s.- just to make sure, I am not interested in ideas on how to rewrite the query - the above is a very simplified version of what I use, so it would probably not be applicable anyway.\n",
  "hints_text": "Thanks for this ticket, I was able to reproduce this issue.\nTests.\nJust a note, the failing queryset does not have to be constructed by setting the query param of a newly created queryset - like this: qs2 = Publication.objects.all() qs2.query = pickle.loads(pickle.dumps(qs.query)) The same problem occurs even if the whole queryset is pickled and unpickled and then a copy is created by calling .all(). qs2 = pickle.loads(pickle.dumps(qs)).all()",
  "created_at": "2020-10-03T18:50:41Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_pickle_filteredrelation (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_filteredrelation_m2m (queryset_pickle.tests.PickleabilityTestCase)\"]",
  "PASS_TO_PASS": "[\"test_in_lookup_query_evaluation (queryset_pickle.tests.InLookupTests)\", \"test_in_lookup_queryset_evaluation (queryset_pickle.tests.InLookupTests)\", \"test_annotation_values (queryset_pickle.tests.PickleabilityTestCase)\", \"test_annotation_values_list (queryset_pickle.tests.PickleabilityTestCase)\", \"test_annotation_with_callable_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_datetime_callable_default_all (queryset_pickle.tests.PickleabilityTestCase)\", \"test_datetime_callable_default_filter (queryset_pickle.tests.PickleabilityTestCase)\", \"test_doesnotexist_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_doesnotexist_exception (queryset_pickle.tests.PickleabilityTestCase)\", \"test_filter_deferred (queryset_pickle.tests.PickleabilityTestCase)\", \"test_filter_reverse_fk (queryset_pickle.tests.PickleabilityTestCase)\", \"test_forward_relatedobjectdoesnotexist_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_manager_pickle (queryset_pickle.tests.PickleabilityTestCase)\", \"test_missing_django_version_unpickling (queryset_pickle.tests.PickleabilityTestCase)\", \"test_model_pickle (queryset_pickle.tests.PickleabilityTestCase)\", \"test_model_pickle_dynamic (queryset_pickle.tests.PickleabilityTestCase)\", \"test_model_pickle_m2m (queryset_pickle.tests.PickleabilityTestCase)\", \"test_multipleobjectsreturned_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_order_by_model_with_abstract_inheritance_and_meta_ordering (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_exists_kwargs_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_exists_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_exists_queryset_still_usable (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_queryset_still_usable (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_queryset_usable_outside_of_prefetch (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_related_idempotence (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_prefetch_related_with_m2m_and_objects_deletion (queryset_pickle.tests.PickleabilityTestCase)\", \"test_pickle_subquery_queryset_not_evaluated (queryset_pickle.tests.PickleabilityTestCase)\", \"test_related_field (queryset_pickle.tests.PickleabilityTestCase)\", \"test_reverse_one_to_one_relatedobjectdoesnotexist_class (queryset_pickle.tests.PickleabilityTestCase)\", \"test_specialized_queryset (queryset_pickle.tests.PickleabilityTestCase)\", \"test_standalone_method_as_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_staticmethod_as_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_string_as_default (queryset_pickle.tests.PickleabilityTestCase)\", \"test_unsupported_unpickle (queryset_pickle.tests.PickleabilityTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.659107",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}