{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-5201",
  "base_commit": "772b3dcc0b0770a843653783e5c93b4256e5ec6f",
  "patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -3,7 +3,9 @@\n \n import copy\n import optparse  # pylint: disable=deprecated-module\n+import pathlib\n import re\n+from typing import List, Pattern\n \n from pylint import utils\n \n@@ -25,6 +27,19 @@ def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n \n \n+def _regexp_paths_csv_validator(_, name: str, value: str) -> List[Pattern[str]]:\n+    patterns = []\n+    for val in _csv_validator(_, name, value):\n+        patterns.append(\n+            re.compile(\n+                str(pathlib.PureWindowsPath(val)).replace(\"\\\\\", \"\\\\\\\\\")\n+                + \"|\"\n+                + pathlib.PureWindowsPath(val).as_posix()\n+            )\n+        )\n+    return patterns\n+\n+\n def _choice_validator(choices, name, value):\n     if value not in choices:\n         msg = \"option %s: invalid value: %r, should be in %s\"\n@@ -80,6 +95,7 @@ def _py_version_validator(_, name, value):\n     \"float\": float,\n     \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n     \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n     \"yn\": _yn_validator,\n     \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n@@ -122,6 +138,7 @@ class Option(optparse.Option):\n     TYPES = optparse.Option.TYPES + (\n         \"regexp\",\n         \"regexp_csv\",\n+        \"regexp_paths_csv\",\n         \"csv\",\n         \"yn\",\n         \"multiple_choice\",\n@@ -132,6 +149,7 @@ class Option(optparse.Option):\n     TYPE_CHECKER = copy.copy(optparse.Option.TYPE_CHECKER)\n     TYPE_CHECKER[\"regexp\"] = _regexp_validator\n     TYPE_CHECKER[\"regexp_csv\"] = _regexp_csv_validator\n+    TYPE_CHECKER[\"regexp_paths_csv\"] = _regexp_paths_csv_validator\n     TYPE_CHECKER[\"csv\"] = _csv_validator\n     TYPE_CHECKER[\"yn\"] = _yn_validator\n     TYPE_CHECKER[\"multiple_choice\"] = _multiple_choices_validating_option\ndiff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -43,7 +43,7 @@ def expand_modules(\n     files_or_modules: List[str],\n     ignore_list: List[str],\n     ignore_list_re: List[Pattern],\n-    ignore_list_paths_re: List[Pattern],\n+    ignore_list_paths_re: List[Pattern[str]],\n ) -> Tuple[List[ModuleDescriptionDict], List[ErrorDescriptionDict]]:\n     \"\"\"take a list of files/modules/packages and return the list of tuple\n     (file, module name) which have to be actually checked\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -46,7 +46,14 @@\n     MessageLocationTuple,\n     ModuleDescriptionDict,\n )\n-from pylint.utils import ASTWalker, FileState, LinterStats, ModuleStats, utils\n+from pylint.utils import (\n+    ASTWalker,\n+    FileState,\n+    LinterStats,\n+    ModuleStats,\n+    get_global_option,\n+    utils,\n+)\n from pylint.utils.pragma_parser import (\n     OPTION_PO,\n     InvalidPragmaError,\n@@ -220,12 +227,12 @@ def make_options():\n             (\n                 \"ignore-paths\",\n                 {\n-                    \"type\": \"regexp_csv\",\n+                    \"type\": \"regexp_paths_csv\",\n                     \"metavar\": \"<pattern>[,<pattern>...]\",\n-                    \"dest\": \"ignore_list_paths_re\",\n-                    \"default\": (),\n-                    \"help\": \"Add files or directories matching the regex patterns to the\"\n-                    \" ignore-list. The regex matches against paths.\",\n+                    \"default\": [],\n+                    \"help\": \"Add files or directories matching the regex patterns to the \"\n+                    \"ignore-list. The regex matches against paths and can be in \"\n+                    \"Posix or Windows format.\",\n                 },\n             ),\n             (\n@@ -1101,7 +1108,7 @@ def _expand_files(self, modules) -> List[ModuleDescriptionDict]:\n             modules,\n             self.config.black_list,\n             self.config.black_list_re,\n-            self.config.ignore_list_paths_re,\n+            self._ignore_paths,\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n@@ -1259,6 +1266,7 @@ def open(self):\n                 self.config.extension_pkg_whitelist\n             )\n         self.stats.reset_message_count()\n+        self._ignore_paths = get_global_option(self, \"ignore-paths\")\n \n     def generate_reports(self):\n         \"\"\"close the whole package /module, it's time to make reports !\ndiff --git a/pylint/utils/utils.py b/pylint/utils/utils.py\n--- a/pylint/utils/utils.py\n+++ b/pylint/utils/utils.py\n@@ -56,16 +56,24 @@\n GLOBAL_OPTION_PATTERN = Literal[\n     \"no-docstring-rgx\", \"dummy-variables-rgx\", \"ignored-argument-names\"\n ]\n+GLOBAL_OPTION_PATTERN_LIST = Literal[\"ignore-paths\"]\n GLOBAL_OPTION_TUPLE_INT = Literal[\"py-version\"]\n GLOBAL_OPTION_NAMES = Union[\n     GLOBAL_OPTION_BOOL,\n     GLOBAL_OPTION_INT,\n     GLOBAL_OPTION_LIST,\n     GLOBAL_OPTION_PATTERN,\n+    GLOBAL_OPTION_PATTERN_LIST,\n     GLOBAL_OPTION_TUPLE_INT,\n ]\n T_GlobalOptionReturnTypes = TypeVar(\n-    \"T_GlobalOptionReturnTypes\", bool, int, List[str], Pattern[str], Tuple[int, ...]\n+    \"T_GlobalOptionReturnTypes\",\n+    bool,\n+    int,\n+    List[str],\n+    Pattern[str],\n+    List[Pattern[str]],\n+    Tuple[int, ...],\n )\n \n \n@@ -220,6 +228,15 @@ def get_global_option(\n     ...\n \n \n+@overload\n+def get_global_option(\n+    checker: \"BaseChecker\",\n+    option: GLOBAL_OPTION_PATTERN_LIST,\n+    default: Optional[List[Pattern[str]]] = None,\n+) -> List[Pattern[str]]:\n+    ...\n+\n+\n @overload\n def get_global_option(\n     checker: \"BaseChecker\",\n",
  "test_patch": "diff --git a/tests/lint/unittest_expand_modules.py b/tests/lint/unittest_expand_modules.py\n--- a/tests/lint/unittest_expand_modules.py\n+++ b/tests/lint/unittest_expand_modules.py\n@@ -4,10 +4,14 @@\n \n import re\n from pathlib import Path\n+from typing import Dict, Tuple, Type\n \n import pytest\n \n+from pylint.checkers import BaseChecker\n from pylint.lint.expand_modules import _is_in_ignore_list_re, expand_modules\n+from pylint.testutils import CheckerTestCase, set_config\n+from pylint.utils.utils import get_global_option\n \n \n def test__is_in_ignore_list_re_match() -> None:\n@@ -21,17 +25,6 @@ def test__is_in_ignore_list_re_match() -> None:\n     assert _is_in_ignore_list_re(\"src/tests/whatever.xml\", patterns)\n \n \n-def test__is_in_ignore_list_re_nomatch() -> None:\n-    patterns = [\n-        re.compile(\".*enchilada.*\"),\n-        re.compile(\"unittest_.*\"),\n-        re.compile(\".*tests/.*\"),\n-    ]\n-    assert not _is_in_ignore_list_re(\"test_utils.py\", patterns)\n-    assert not _is_in_ignore_list_re(\"enchilad.py\", patterns)\n-    assert not _is_in_ignore_list_re(\"src/tests.py\", patterns)\n-\n-\n TEST_DIRECTORY = Path(__file__).parent.parent\n INIT_PATH = str(TEST_DIRECTORY / \"lint/__init__.py\")\n EXPAND_MODULES = str(TEST_DIRECTORY / \"lint/unittest_expand_modules.py\")\n@@ -84,27 +77,70 @@ def test__is_in_ignore_list_re_nomatch() -> None:\n }\n \n \n-@pytest.mark.parametrize(\n-    \"files_or_modules,expected\",\n-    [\n-        ([__file__], [this_file]),\n-        (\n-            [Path(__file__).parent],\n-            [\n-                init_of_package,\n-                test_pylinter,\n-                test_utils,\n-                this_file_from_init,\n-                unittest_lint,\n-            ],\n-        ),\n-    ],\n-)\n-def test_expand_modules(files_or_modules, expected):\n-    ignore_list, ignore_list_re, ignore_list_paths_re = [], [], []\n-    modules, errors = expand_modules(\n-        files_or_modules, ignore_list, ignore_list_re, ignore_list_paths_re\n+class TestExpandModules(CheckerTestCase):\n+    \"\"\"Test the expand_modules function while allowing options to be set\"\"\"\n+\n+    class Checker(BaseChecker):\n+        \"\"\"This dummy checker is needed to allow options to be set\"\"\"\n+\n+        name = \"checker\"\n+        msgs: Dict[str, Tuple[str, ...]] = {}\n+        options = ((\"An option\", {\"An option\": \"dict\"}),)\n+\n+    CHECKER_CLASS: Type = Checker\n+\n+    @pytest.mark.parametrize(\n+        \"files_or_modules,expected\",\n+        [\n+            ([__file__], [this_file]),\n+            (\n+                [str(Path(__file__).parent)],\n+                [\n+                    init_of_package,\n+                    test_pylinter,\n+                    test_utils,\n+                    this_file_from_init,\n+                    unittest_lint,\n+                ],\n+            ),\n+        ],\n+    )\n+    @set_config(ignore_paths=\"\")\n+    def test_expand_modules(self, files_or_modules, expected):\n+        \"\"\"Test expand_modules with the default value of ignore-paths\"\"\"\n+        ignore_list, ignore_list_re = [], []\n+        modules, errors = expand_modules(\n+            files_or_modules,\n+            ignore_list,\n+            ignore_list_re,\n+            get_global_option(self, \"ignore-paths\"),\n+        )\n+        modules.sort(key=lambda d: d[\"name\"])\n+        assert modules == expected\n+        assert not errors\n+\n+    @pytest.mark.parametrize(\n+        \"files_or_modules,expected\",\n+        [\n+            ([__file__], []),\n+            (\n+                [str(Path(__file__).parent)],\n+                [\n+                    init_of_package,\n+                ],\n+            ),\n+        ],\n     )\n-    modules.sort(key=lambda d: d[\"name\"])\n-    assert modules == expected\n-    assert not errors\n+    @set_config(ignore_paths=\".*/lint/.*\")\n+    def test_expand_modules_with_ignore(self, files_or_modules, expected):\n+        \"\"\"Test expand_modules with a non-default value of ignore-paths\"\"\"\n+        ignore_list, ignore_list_re = [], []\n+        modules, errors = expand_modules(\n+            files_or_modules,\n+            ignore_list,\n+            ignore_list_re,\n+            get_global_option(self.checker, \"ignore-paths\"),\n+        )\n+        modules.sort(key=lambda d: d[\"name\"])\n+        assert modules == expected\n+        assert not errors\ndiff --git a/tests/unittest_config.py b/tests/unittest_config.py\n--- a/tests/unittest_config.py\n+++ b/tests/unittest_config.py\n@@ -16,10 +16,14 @@\n \n import re\n import sre_constants\n+from typing import Dict, Tuple, Type\n \n import pytest\n \n from pylint import config\n+from pylint.checkers import BaseChecker\n+from pylint.testutils import CheckerTestCase, set_config\n+from pylint.utils.utils import get_global_option\n \n RE_PATTERN_TYPE = getattr(re, \"Pattern\", getattr(re, \"_pattern_type\", None))\n \n@@ -65,3 +69,33 @@ def test__regexp_csv_validator_invalid() -> None:\n     pattern_strings = [\"test_.*\", \"foo\\\\.bar\", \"^baz)$\"]\n     with pytest.raises(sre_constants.error):\n         config.option._regexp_csv_validator(None, None, \",\".join(pattern_strings))\n+\n+\n+class TestPyLinterOptionSetters(CheckerTestCase):\n+    \"\"\"Class to check the set_config decorator and get_global_option util\n+    for options declared in PyLinter.\"\"\"\n+\n+    class Checker(BaseChecker):\n+        name = \"checker\"\n+        msgs: Dict[str, Tuple[str, ...]] = {}\n+        options = ((\"An option\", {\"An option\": \"dict\"}),)\n+\n+    CHECKER_CLASS: Type = Checker\n+\n+    @set_config(ignore_paths=\".*/tests/.*,.*\\\\ignore\\\\.*\")\n+    def test_ignore_paths_with_value(self) -> None:\n+        \"\"\"Test ignore-paths option with value\"\"\"\n+        options = get_global_option(self.checker, \"ignore-paths\")\n+\n+        assert any(i.match(\"dir/tests/file.py\") for i in options)\n+        assert any(i.match(\"dir\\\\tests\\\\file.py\") for i in options)\n+        assert any(i.match(\"dir/ignore/file.py\") for i in options)\n+        assert any(i.match(\"dir\\\\ignore\\\\file.py\") for i in options)\n+\n+    def test_ignore_paths_with_no_value(self) -> None:\n+        \"\"\"Test ignore-paths option with no value.\n+        Compare against actual list to see if validator works.\"\"\"\n+        options = get_global_option(self.checker, \"ignore-paths\")\n+\n+        # pylint: disable-next=use-implicit-booleaness-not-comparison\n+        assert options == []\n",
  "problem_statement": "ignore-paths: normalize path to PosixPath\n### Current problem\n\nIn a project of mine, there is an entire directory, \"dummy\", that I want to exclude running pylint in.  I've added the directory name to the \"ignore\" option and it works great when used from the command line.\r\n\r\n```toml\r\n# Files or directories to be skipped. They should be base names, not paths.\r\nignore = [\r\n  'dummy',\r\n]\r\n```\r\n\r\nHowever, when using vscode, the full path is provided.  It calls pylint like this:\r\n\r\n```\r\n~\\Documents\\<snip>\\.venv\\Scripts\\python.exe -m pylint --msg-template='{line},{column},{category},{symbol}:{msg} --reports=n --output-format=text ~\\Documents\\<snip>\\dummy\\file.py\r\n```\r\n\r\nIn this case, the ignore rule doesn't work and vscode still reports errors.  So I decided to switch to the \"ignore-paths\" option.  The following works:\r\n\r\n```toml\r\n# Add files or directories matching the regex patterns to the ignore-list. The\r\n# regex matches against paths.\r\nignore-paths = [\r\n  '.*/dummy/.*$',\r\n  '.*\\\\dummy\\\\.*$',\r\n]\r\n```\r\n\r\nHowever, I need to duplciate each path, onces for Linux (/ as path separator) and the second for Windows (\\ as path separator).  Would it be possible to normalize the paths (could use pathlib PosixPath) so that just the linux one would work on both systems?  Note also that vscode passes the full path, so starting the regex with a ^, like '^dummy/.*$', won't work.\n\n### Desired solution\n\nI'd like to be able to define the path only once in the \"ignore-paths\" settings.  Even better would be to respect the \"ignore\" setting even for a path provided with the full path (just as if it was run from the command line).\r\n\r\n```toml\r\n# Add files or directories matching the regex patterns to the ignore-list. The\r\n# regex matches against paths.\r\nignore-paths = [\r\n  '.*/dummy/.*$',\r\n]\r\n```\n\n### Additional context\n\n_No response_\n",
  "hints_text": "Thank you for opening the issue, this seems like a sensible thing to do.",
  "created_at": "2021-10-23T10:09:51Z",
  "version": "2.11",
  "FAIL_TO_PASS": "[\"tests/lint/unittest_expand_modules.py::TestExpandModules::test_expand_modules[files_or_modules0-expected0]\", \"tests/lint/unittest_expand_modules.py::TestExpandModules::test_expand_modules[files_or_modules1-expected1]\", \"tests/lint/unittest_expand_modules.py::TestExpandModules::test_expand_modules_with_ignore[files_or_modules0-expected0]\", \"tests/lint/unittest_expand_modules.py::TestExpandModules::test_expand_modules_with_ignore[files_or_modules1-expected1]\", \"tests/unittest_config.py::TestPyLinterOptionSetters::test_ignore_paths_with_value\", \"tests/unittest_config.py::TestPyLinterOptionSetters::test_ignore_paths_with_no_value\"]",
  "PASS_TO_PASS": "[\"tests/lint/unittest_expand_modules.py::test__is_in_ignore_list_re_match\", \"tests/unittest_config.py::test__regexp_validator_valid\", \"tests/unittest_config.py::test__regexp_validator_invalid\", \"tests/unittest_config.py::test__csv_validator_no_spaces\", \"tests/unittest_config.py::test__csv_validator_spaces\", \"tests/unittest_config.py::test__regexp_csv_validator_valid\", \"tests/unittest_config.py::test__regexp_csv_validator_invalid\"]",
  "environment_setup_commit": "2c687133e4fcdd73ae3afa2e79be2160b150bb82",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.909900",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}