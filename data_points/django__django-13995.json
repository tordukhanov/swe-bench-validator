{
  "repo": "django/django",
  "instance_id": "django__django-13995",
  "base_commit": "4372233ebf9acef606f3d2f7be4d6ba73b168084",
  "patch": "diff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py\n--- a/django/contrib/admindocs/views.py\n+++ b/django/contrib/admindocs/views.py\n@@ -16,6 +16,7 @@\n from django.template.engine import Engine\n from django.urls import get_mod_func, get_resolver, get_urlconf\n from django.utils.decorators import method_decorator\n+from django.utils.functional import cached_property\n from django.utils.inspect import (\n     func_accepts_kwargs, func_accepts_var_args, get_func_full_args,\n     method_has_no_args,\n@@ -250,7 +251,7 @@ def get_context_data(self, **kwargs):\n         methods = []\n         # Gather model methods.\n         for func_name, func in model.__dict__.items():\n-            if inspect.isfunction(func) or isinstance(func, property):\n+            if inspect.isfunction(func) or isinstance(func, (cached_property, property)):\n                 try:\n                     for exclude in MODEL_METHODS_EXCLUDE:\n                         if func_name.startswith(exclude):\n@@ -261,9 +262,10 @@ def get_context_data(self, **kwargs):\n                 verbose = verbose and (\n                     utils.parse_rst(cleandoc(verbose), 'model', _('model:') + opts.model_name)\n                 )\n-                # Show properties and methods without arguments as fields.\n-                # Otherwise, show as a 'method with arguments'.\n-                if isinstance(func, property):\n+                # Show properties, cached_properties, and methods without\n+                # arguments as fields. Otherwise, show as a 'method with\n+                # arguments'.\n+                if isinstance(func, (cached_property, property)):\n                     fields.append({\n                         'name': func_name,\n                         'data_type': get_return_data_type(func_name),\n",
  "test_patch": "diff --git a/tests/admin_docs/models.py b/tests/admin_docs/models.py\n--- a/tests/admin_docs/models.py\n+++ b/tests/admin_docs/models.py\n@@ -3,6 +3,7 @@\n \"\"\"\n \n from django.db import models\n+from django.utils.functional import cached_property\n \n \n class Company(models.Model):\n@@ -56,6 +57,10 @@ def dummy_function(self, baz, rox, *some_args, **some_kwargs):\n     def a_property(self):\n         return 'a_property'\n \n+    @cached_property\n+    def a_cached_property(self):\n+        return 'a_cached_property'\n+\n     def suffix_company_name(self, suffix='ltd'):\n         return self.company.name + suffix\n \ndiff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -232,6 +232,10 @@ def test_instance_of_property_methods_are_displayed(self):\n         \"\"\"Model properties are displayed as fields.\"\"\"\n         self.assertContains(self.response, '<td>a_property</td>')\n \n+    def test_instance_of_cached_property_methods_are_displayed(self):\n+        \"\"\"Model cached properties are displayed as fields.\"\"\"\n+        self.assertContains(self.response, '<td>a_cached_property</td>')\n+\n     def test_method_data_types(self):\n         company = Company.objects.create(name=\"Django\")\n         person = Person.objects.create(first_name=\"Human\", last_name=\"User\", company=company)\n",
  "problem_statement": "Add @cached_property in admindocs\nDescription\n\t \n\t\t(last modified by Nat S Dunn)\n\t \nFrom the documentation (â€‹https://docs.djangoproject.com/en/3.1/ref/contrib/admin/admindocs/): \"The models section of the admindocs page describes each model in the system along with all the fields, properties, and methods available on it.\"\nCurrently, properties decorated with @cached_property are not included. Please include them. And possibly include other (or all) descriptors/attributes.\n",
  "hints_text": "Agreed, we should include include cached properties (@cached_property). I'm not sure about other descriptors and attributes, not all of them are reasonable. I think we should end there.\nHow do you guys suggest the visualization of the @cached_property in the fields table? I thought about something like {field_name} (cached property) in the field column.\nReplying to Ramon Saraiva: I like the idea of indicating that it is a cached property using {field_name} (cached property) in the field column, but currently there is no distinction made for properties vs. fields, so if you were to do that, it would make sense to do the same thing for standard properties - {field_name} (property), which would be helpful, but that may be out of the scope of this issue. I'm not sure how that works. Thanks for taking this on, by the way!\nReplying to Nat S Dunn: Would be straight forward to also add {field_name} (property) to properties. Another way would be adding something to the Description column.\nReplying to Ramon Saraiva: Cool. I'd prefer it in the Fields column like in your original suggestion. The Description column can get pretty busy.",
  "created_at": "2021-02-10T12:35:34Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"Model cached properties are displayed as fields.\"]",
  "PASS_TO_PASS": "[\"test_simplify_regex (admin_docs.test_views.AdminDocViewFunctionsTests)\", \"test_builtin_fields (admin_docs.test_views.TestFieldType)\", \"test_custom_fields (admin_docs.test_views.TestFieldType)\", \"test_field_name (admin_docs.test_views.TestFieldType)\", \"test_app_not_found (admin_docs.test_views.TestModelDetailView)\", \"The ``description`` field should render correctly for each field type.\", \"Model properties are displayed as fields.\", \"test_method_data_types (admin_docs.test_views.TestModelDetailView)\", \"Methods that begin with strings defined in\", \"Methods that take arguments should also displayed.\", \"Methods with arguments should have their arguments displayed.\", \"Methods with keyword arguments should have their arguments displayed.\", \"Methods with multiple arguments should have all their arguments\", \"test_model_detail_title (admin_docs.test_views.TestModelDetailView)\", \"test_model_docstring_renders_correctly (admin_docs.test_views.TestModelDetailView)\", \"test_model_not_found (admin_docs.test_views.TestModelDetailView)\", \"test_model_with_many_to_one (admin_docs.test_views.TestModelDetailView)\", \"A model with ``related_name`` of `+` shouldn't show backward\", \"test_bookmarklets (admin_docs.test_views.AdminDocViewTests)\", \"Index view should correctly resolve view patterns when ROOT_URLCONF is\", \"test_index (admin_docs.test_views.AdminDocViewTests)\", \"test_missing_docutils (admin_docs.test_views.AdminDocViewTests)\", \"test_model_index (admin_docs.test_views.AdminDocViewTests)\", \"test_namespaced_view_detail (admin_docs.test_views.AdminDocViewTests)\", \"Without the sites framework, should not access SITE_ID or Site\", \"test_template_detail (admin_docs.test_views.AdminDocViewTests)\", \"test_templatefilter_index (admin_docs.test_views.AdminDocViewTests)\", \"test_templatetag_index (admin_docs.test_views.AdminDocViewTests)\", \"test_view_detail (admin_docs.test_views.AdminDocViewTests)\", \"Views that are methods can be displayed.\", \"test_view_detail_illegal_import (admin_docs.test_views.AdminDocViewTests)\", \"test_view_index (admin_docs.test_views.AdminDocViewTests)\", \"Views that are methods are listed correctly.\", \"test_bookmarklets (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_missing_docutils (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_model_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_namespaced_view_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_template_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_templatefilter_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_templatetag_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_detail_illegal_import (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.675397",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}