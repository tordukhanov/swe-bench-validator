{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10908",
  "base_commit": "67d06b18c68ee4452768f8a1e868565dd4354abf",
  "patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -971,6 +971,9 @@ def inverse_transform(self, X):\n \n     def get_feature_names(self):\n         \"\"\"Array mapping from feature integer indices to feature name\"\"\"\n+        if not hasattr(self, 'vocabulary_'):\n+            self._validate_vocabulary()\n+\n         self._check_vocabulary()\n \n         return [t for t, i in sorted(six.iteritems(self.vocabulary_),\n",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -269,7 +269,7 @@ def test_countvectorizer_custom_vocabulary_pipeline():\n     assert_equal(X.shape[1], len(what_we_like))\n \n \n-def test_countvectorizer_custom_vocabulary_repeated_indeces():\n+def test_countvectorizer_custom_vocabulary_repeated_indices():\n     vocab = {\"pizza\": 0, \"beer\": 0}\n     try:\n         CountVectorizer(vocabulary=vocab)\n@@ -543,7 +543,9 @@ def test_feature_names():\n \n     # test for Value error on unfitted/empty vocabulary\n     assert_raises(ValueError, cv.get_feature_names)\n+    assert_false(cv.fixed_vocabulary_)\n \n+    # test for vocabulary learned from data\n     X = cv.fit_transform(ALL_FOOD_DOCS)\n     n_samples, n_features = X.shape\n     assert_equal(len(cv.vocabulary_), n_features)\n@@ -557,6 +559,19 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+    # test for custom vocabulary\n+    vocab = ['beer', 'burger', 'celeri', 'coke', 'pizza',\n+             'salad', 'sparkling', 'tomato', 'water']\n+\n+    cv = CountVectorizer(vocabulary=vocab)\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(['beer', 'burger', 'celeri', 'coke', 'pizza', 'salad',\n+                        'sparkling', 'tomato', 'water'], feature_names)\n+    assert_true(cv.fixed_vocabulary_)\n+\n+    for idx, name in enumerate(feature_names):\n+        assert_equal(idx, cv.vocabulary_.get(name))\n+\n \n def test_vectorizer_max_features():\n     vec_factories = (\n",
  "problem_statement": "CountVectorizer's get_feature_names raise not NotFittedError when the vocabulary parameter is provided\nIf you initialize a `CounterVectorizer` and try to perform a transformation without training you will get a `NotFittedError` exception.\r\n\r\n```python\r\nIn [1]: from sklearn.feature_extraction.text import CountVectorizer\r\nIn [2]: vectorizer = CountVectorizer()\r\nIn [3]: corpus = [\r\n    ...:     'This is the first document.',\r\n    ...:     'This is the second second document.',\r\n    ...:     'And the third one.',\r\n    ...:     'Is this the first document?',\r\n    ...: ]\r\n\r\nIn [4]: vectorizer.transform(corpus)\r\nNotFittedError: CountVectorizer - Vocabulary wasn't fitted.\r\n```\r\nOn the other hand if you provide the `vocabulary` at the initialization of the vectorizer you could transform a corpus without a prior training, right?\r\n\r\n```python\r\nIn [1]: from sklearn.feature_extraction.text import CountVectorizer\r\n\r\nIn [2]: vectorizer = CountVectorizer()\r\n\r\nIn [3]: corpus = [\r\n    ...:     'This is the first document.',\r\n    ...:     'This is the second second document.',\r\n    ...:     'And the third one.',\r\n    ...:     'Is this the first document?',\r\n    ...: ]\r\n\r\nIn [4]: vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\r\n\r\nIn [5]: vectorizer = CountVectorizer(vocabulary=vocabulary)\r\n\r\nIn [6]: hasattr(vectorizer, \"vocabulary_\")\r\nOut[6]: False\r\n\r\nIn [7]: vectorizer.get_feature_names()\r\nNotFittedError: CountVectorizer - Vocabulary wasn't fitted.\r\n\r\nIn [8]: vectorizer.transform(corpus)\r\nOut[8]:\r\n<4x9 sparse matrix of type '<class 'numpy.int64'>'\r\n        with 19 stored elements in Compressed Sparse Row format>\r\n\r\nIn [9]: hasattr(vectorizer, \"vocabulary_\")\r\nOut[9]: True\r\n```\r\n\r\nThe `CountVectorizer`'s `transform` calls `_validate_vocabulary` method which sets the `vocabulary_` instance variable.\r\n\r\nIn the same manner I believe that the `get_feature_names` method should not raise `NotFittedError` if the vocabulary parameter is provided but the vectorizer has not been trained.\r\n\n",
  "hints_text": "I suppose we should support this case.â€‹\n\nI would like to claim this issue.\n@julietcl please consider finishing one of your previous claims first\nI'd like to take this on, if it's still available.\r\n\nI think so. Go ahead",
  "created_at": "2018-04-03T03:50:46Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/feature_extraction/tests/test_text.py::test_feature_names\"]",
  "PASS_TO_PASS": "[\"sklearn/feature_extraction/tests/test_text.py::test_strip_accents\", \"sklearn/feature_extraction/tests/test_text.py::test_to_ascii\", \"sklearn/feature_extraction/tests/test_text.py::test_word_analyzer_unigrams\", \"sklearn/feature_extraction/tests/test_text.py::test_word_analyzer_unigrams_and_bigrams\", \"sklearn/feature_extraction/tests/test_text.py::test_unicode_decode_error\", \"sklearn/feature_extraction/tests/test_text.py::test_char_ngram_analyzer\", \"sklearn/feature_extraction/tests/test_text.py::test_char_wb_ngram_analyzer\", \"sklearn/feature_extraction/tests/test_text.py::test_word_ngram_analyzer\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_custom_vocabulary\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_custom_vocabulary_pipeline\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_custom_vocabulary_repeated_indices\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_custom_vocabulary_gap_index\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_stop_words\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_empty_vocabulary\", \"sklearn/feature_extraction/tests/test_text.py::test_fit_countvectorizer_twice\", \"sklearn/feature_extraction/tests/test_text.py::test_tf_idf_smoothing\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidf_no_smoothing\", \"sklearn/feature_extraction/tests/test_text.py::test_sublinear_tf\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidf_vectorizer_setters\", \"sklearn/feature_extraction/tests/test_text.py::test_hashing_vectorizer\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_max_features\", \"sklearn/feature_extraction/tests/test_text.py::test_count_vectorizer_max_features\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_max_df\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_min_df\", \"sklearn/feature_extraction/tests/test_text.py::test_count_binary_occurrences\", \"sklearn/feature_extraction/tests/test_text.py::test_hashed_binary_occurrences\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_inverse_transform\", \"sklearn/feature_extraction/tests/test_text.py::test_count_vectorizer_pipeline_grid_selection\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_pipeline_grid_selection\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_pipeline_cross_validation\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_unicode\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidf_vectorizer_with_fixed_vocabulary\", \"sklearn/feature_extraction/tests/test_text.py::test_pickling_vectorizer\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_vocab_sets_when_pickling\", \"sklearn/feature_extraction/tests/test_text.py::test_countvectorizer_vocab_dicts_when_pickling\", \"sklearn/feature_extraction/tests/test_text.py::test_stop_words_removal\", \"sklearn/feature_extraction/tests/test_text.py::test_pickling_transformer\", \"sklearn/feature_extraction/tests/test_text.py::test_non_unique_vocab\", \"sklearn/feature_extraction/tests/test_text.py::test_hashingvectorizer_nan_in_docs\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidfvectorizer_binary\", \"sklearn/feature_extraction/tests/test_text.py::test_tfidfvectorizer_export_idf\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_vocab_clone\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizer_string_object_as_input\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizers_invalid_ngram_range[vec0]\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizers_invalid_ngram_range[vec1]\", \"sklearn/feature_extraction/tests/test_text.py::test_vectorizers_invalid_ngram_range[vec2]\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.956226",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}