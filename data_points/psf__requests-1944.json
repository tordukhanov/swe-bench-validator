{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1944",
  "base_commit": "5893cfcd90249a16d70bb829c23a78b690033c74",
  "patch": "diff --git a/requests/adapters.py b/requests/adapters.py\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -385,9 +385,4 @@ def send(self, request, stream=False, timeout=None, verify=True, cert=None, prox\n             else:\n                 raise\n \n-        r = self.build_response(request, resp)\n-\n-        if not stream:\n-            r.content\n-\n-        return r\n+        return self.build_response(request, resp)\ndiff --git a/requests/sessions.py b/requests/sessions.py\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -19,7 +19,8 @@\n from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT\n from .hooks import default_hooks, dispatch_hook\n from .utils import to_key_val_list, default_headers, to_native_string\n-from .exceptions import TooManyRedirects, InvalidSchema\n+from .exceptions import (\n+    TooManyRedirects, InvalidSchema, ChunkedEncodingError, ContentDecodingError)\n from .structures import CaseInsensitiveDict\n \n from .adapters import HTTPAdapter\n@@ -94,7 +95,10 @@ def resolve_redirects(self, resp, req, stream=False, timeout=None,\n         while resp.is_redirect:\n             prepared_request = req.copy()\n \n-            resp.content  # Consume socket so it can be released\n+            try:\n+                resp.content  # Consume socket so it can be released\n+            except (ChunkedEncodingError, ContentDecodingError, RuntimeError):\n+                resp.raw.read(decode_content=False)\n \n             if i >= self.max_redirects:\n                 raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)\n@@ -588,6 +592,9 @@ def send(self, request, **kwargs):\n             r = history.pop()\n             r.history = history\n \n+        if not stream:\n+            r.content\n+\n         return r\n \n     def get_adapter(self, url):\n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -917,6 +917,45 @@ def test_auth_is_retained_for_redirect_on_host(self):\n \n         assert h1 == h2\n \n+    def test_manual_redirect_with_partial_body_read(self):\n+        s = requests.Session()\n+        r1 = s.get(httpbin('redirect/2'), allow_redirects=False, stream=True)\n+        assert r1.is_redirect\n+        rg = s.resolve_redirects(r1, r1.request, stream=True)\n+\n+        # read only the first eight bytes of the response body,\n+        # then follow the redirect\n+        r1.iter_content(8)\n+        r2 = next(rg)\n+        assert r2.is_redirect\n+\n+        # read all of the response via iter_content,\n+        # then follow the redirect\n+        for _ in r2.iter_content():\n+            pass\n+        r3 = next(rg)\n+        assert not r3.is_redirect\n+\n+    def _patch_adapter_gzipped_redirect(self, session, url):\n+        adapter = session.get_adapter(url=url)\n+        org_build_response = adapter.build_response\n+        self._patched_response = False\n+\n+        def build_response(*args, **kwargs):\n+            resp = org_build_response(*args, **kwargs)\n+            if not self._patched_response:\n+                resp.raw.headers['content-encoding'] = 'gzip'\n+                self._patched_response = True\n+            return resp\n+\n+        adapter.build_response = build_response\n+\n+    def test_redirect_with_wrong_gzipped_header(self):\n+        s = requests.Session()\n+        url = httpbin('redirect/1')\n+        self._patch_adapter_gzipped_redirect(s, url)\n+        s.get(url)\n+\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n@@ -1321,7 +1360,7 @@ def test_data_argument_accepts_tuples(list_of_tuples):\n             hooks=default_hooks()\n         )\n         assert p.body == urlencode(data)\n-        \n+\n \n if __name__ == '__main__':\n     unittest.main()\n",
  "problem_statement": "Why decode the response body of a redirect?\nRequests fails on the URL `http://www.whatbird.com/forum/index.php?/gallery/image/291517-foo/`, which is a 301 redirect to\n\n```\nhttp://www.whatbird.com/forum/index.php?/gallery/image/291517-title-paused-jewel-allens-hummingbird-a-backyard-bird-painting-in-oil-by-camille-engel/\n```\n\n. The issue seems to be that the server's initial 301 response has a header falsely claiming that the response body (a simple HTML page) is gzipped, when it's actually uncompressed.\n\nWhen resolving redirects, Requests does (in `requests.sessions.resolve_redirects`):\n\n```\nresp.content  # Consume socket so it can be released\n```\n\nwhich attempts to decode\n\nOne could legitimately say this is the server's problem. However, conceptually, why decode the response body of a redirect, which won't get returned? Other programs (Chromium, Firefox, `curl`) don't do this. For example, `curl` gives an error, as expected, when not following redirects:\n\n```\n$ curl --compressed 'http://www.whatbird.com/forum/index.php?/gallery/image/291517-foo/'\ncurl: (61) Error while processing content unencoding: invalid code lengths set\n```\n\nwhereas it works if you add the `--location` flag (follow redirects).\n# Example of error\n\n```\nPython 3.3.2+ (default, Oct  9 2013, 14:56:03) \n[GCC 4.8.1] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import requests ; requests.get('http://www.whatbird.com/forum/index.php?/gallery/image/291517-foo/')\nTraceback (most recent call last):\n  File \"./requests/packages/urllib3/response.py\", line 199, in read\n    data = self._decoder.decompress(data)\nzlib.error: Error -3 while decompressing data: incorrect header check\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"./requests/models.py\", line 629, in generate\n    for chunk in self.raw.stream(chunk_size, decode_content=True):\n  File \"./requests/packages/urllib3/response.py\", line 236, in stream\n    data = self.read(amt=amt, decode_content=decode_content)\n  File \"./requests/packages/urllib3/response.py\", line 204, in read\n    e)\nrequests.packages.urllib3.exceptions.DecodeError: ('Received response with content-encoding: gzip, but failed to decode it.', error('Error -3 while decompressing data: incorrect header check',))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./requests/api.py\", line 55, in get\n    return request('get', url, **kwargs)\n  File \"./requests/api.py\", line 44, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"./requests/sessions.py\", line 393, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"./requests/sessions.py\", line 496, in send\n    r = adapter.send(request, **kwargs)\n  File \"./requests/adapters.py\", line 391, in send\n    r.content\n  File \"./requests/models.py\", line 691, in content\n    self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n  File \"./requests/models.py\", line 634, in generate\n    raise ContentDecodingError(e)\nrequests.exceptions.ContentDecodingError: ('Received response with content-encoding: gzip, but failed to decode it.', error('Error -3 while decompressing data: incorrect header check',))\n```\n\n",
  "hints_text": "You answered your own question when you pasted that line. The comment explains exactly why we consume the content. If we do not, then a user handling a great deal of redirects will run out of available connections that can be made. Sockets will sit in the ready state waiting to be read from. I think it also has the potential to cause a memory usage issue when the ref count does not reach 0 and the socket is not garbage collected. We should be, however, catching that error in `resolve_redirects`.\n\nThank you for raising this issue! I'll throw together a PR to patch this.\n\nI agree that consuming the raw response data from the socket is needed. I'm asking why we should _decode_ the data.\n\n(And thanks for the quick response.)\n\nWe decode the data because your assertion that it won't be read is false. You may read the response body from any redirect because we save it. Each redirect builds a _full_ response object that can be used exactly like any other. This is a very good thing, and won't be changed. =)\n\nThe fix, as @sigmavirus24 has suggested, is simply to catch this error.\n\nInteresting. It's very likely that this is a duplicate of https://github.com/shazow/urllib3/issues/206 / https://github.com/kennethreitz/requests/issues/1472 because there is also an 301 redirect in the curl output. @shazow \n\n@schlamar That's very interesting.\n\nHowever, this isn't a dupe, it's just related. The key is that we shouldn't really care even if we hit a legitimate decoding error when following redirects: we just want to do our best and then move on.\n\n@Lukasa hit the nail on the head :)\n\n> However, this isn't a dupe, it's just related.\n\nWhy do you think so? \n\nOn requests 1.2.3, I'm getting the same traceback than in #1472 with this URL:\n\n```\n>>> import requests ; requests.get('http://www.whatbird.com/forum/index.php?/gallery/image/291517-foo/')\nTraceback (most recent call last):\n  ...\n  File \"c:\\Python27\\lib\\site-packages\\requests\\packages\\urllib3\\response.py\", line 188, in read\n    \"failed to decode it.\" % content_encoding)\nrequests.packages.urllib3.exceptions.DecodeError: Received response with content-encoding: gzip, but failed to decode it\n```\n\n@schlamar So the issues you linked cause the exception, but they aren't the problem being referred to. The key problem in _this_ issue is that if we hit an error decoding the response body of a redirect, we'll stop following redirects. That _shouldn't_ happen: we understood enough of the message to follow the redirect, so there's no reason to stop following them. =)\n\nFixing the bugs you linked fixes the specific case in question, but not the general one.\n\n> Fixing the bugs you linked fixes the specific case in question, but not the general one.\n\nYes, but fixing _this_ bug should resolve the linked issues (which is what I wanted to say :)\n\nAhhhhh, I see. =)\n",
  "created_at": "2014-03-10T07:24:49Z",
  "version": "2.2",
  "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET\", \"test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET\", \"test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host\", \"test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header\", \"test_requests.py::RequestsTestCase::test_session_pickling\"]",
  "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES\", \"test_requests.py::RequestsTestCase::test_DIGEST_STREAM\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT\", \"test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA\", \"test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host\", \"test_requests.py::RequestsTestCase::test_autoset_header_values_are_native\", \"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_basicauth_with_netrc\", \"test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_items\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_keys\", \"test_requests.py::RequestsTestCase::test_cookie_as_dict_values\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_cookie_persists_via_api\", \"test_requests.py::RequestsTestCase::test_cookie_quote_wrapped\", \"test_requests.py::RequestsTestCase::test_cookie_removed_on_expire\", \"test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect\", \"test_requests.py::RequestsTestCase::test_custom_content_type\", \"test_requests.py::RequestsTestCase::test_decompress_gzip\", \"test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_fixes_1329\", \"test_requests.py::RequestsTestCase::test_generic_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars\", \"test_requests.py::RequestsTestCase::test_header_keys_are_native\", \"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\", \"test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent\", \"test_requests.py::RequestsTestCase::test_history_is_always_a_list\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read\", \"test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_prepared_from_session\", \"test_requests.py::RequestsTestCase::test_prepared_request_hook\", \"test_requests.py::RequestsTestCase::test_pyopenssl_redirect\", \"test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable\", \"test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie\", \"test_requests.py::RequestsTestCase::test_request_cookies_not_persisted\", \"test_requests.py::RequestsTestCase::test_request_ok_set\", \"test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden\", \"test_requests.py::RequestsTestCase::test_response_decode_unicode\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks\", \"test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks\", \"test_requests.py::RequestsTestCase::test_set_cookie_on_301\", \"test_requests.py::RequestsTestCase::test_status_raising\", \"test_requests.py::RequestsTestCase::test_time_elapsed_blank\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_get\", \"test_requests.py::RequestsTestCase::test_unicode_header_name\", \"test_requests.py::RequestsTestCase::test_unicode_method_name\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect\", \"test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param\", \"test_requests.py::RequestsTestCase::test_user_agent_transfers\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"test_requests.py::UtilsTestCase::test_address_in_network\", \"test_requests.py::UtilsTestCase::test_dotted_netmask\", \"test_requests.py::UtilsTestCase::test_get_auth_from_url\", \"test_requests.py::UtilsTestCase::test_get_environ_proxies\", \"test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges\", \"test_requests.py::UtilsTestCase::test_is_ipv4_address\", \"test_requests.py::UtilsTestCase::test_is_valid_cidr\", \"test_requests.py::UtilsTestCase::test_super_len_io_streams\", \"test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int\", \"test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str\", \"test_requests.py::TestMorselToCookieExpires::test_expires_none\", \"test_requests.py::TestMorselToCookieExpires::test_expires_valid_str\", \"test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str\", \"test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int\", \"test_requests.py::TestTimeout::test_stream_timeout\", \"test_requests.py::TestRedirects::test_requests_are_updated_each_time\", \"test_requests.py::test_data_argument_accepts_tuples\"]",
  "environment_setup_commit": "5893cfcd90249a16d70bb829c23a78b690033c74",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.851210",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}