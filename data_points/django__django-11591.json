{
  "repo": "django/django",
  "instance_id": "django__django-11591",
  "base_commit": "f13147c8de725eed7038941758469aeb9bd66503",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -401,7 +401,7 @@ def get(self, *args, **kwargs):\n         Perform the query and return a single object matching the given\n         keyword arguments.\n         \"\"\"\n-        clone = self.filter(*args, **kwargs)\n+        clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)\n         if self.query.can_filter() and not self.query.distinct_fields:\n             clone = clone.order_by()\n         limit = None\n@@ -890,6 +890,7 @@ def filter(self, *args, **kwargs):\n         Return a new QuerySet instance with the args ANDed to the existing\n         set.\n         \"\"\"\n+        self._not_support_combined_queries('filter')\n         return self._filter_or_exclude(False, *args, **kwargs)\n \n     def exclude(self, *args, **kwargs):\n@@ -897,6 +898,7 @@ def exclude(self, *args, **kwargs):\n         Return a new QuerySet instance with NOT (args) ANDed to the existing\n         set.\n         \"\"\"\n+        self._not_support_combined_queries('exclude')\n         return self._filter_or_exclude(True, *args, **kwargs)\n \n     def _filter_or_exclude(self, negate, *args, **kwargs):\n@@ -985,7 +987,7 @@ def select_related(self, *fields):\n \n         If select_related(None) is called, clear the list.\n         \"\"\"\n-\n+        self._not_support_combined_queries('select_related')\n         if self._fields is not None:\n             raise TypeError(\"Cannot call select_related() after .values() or .values_list()\")\n \n@@ -1007,6 +1009,7 @@ def prefetch_related(self, *lookups):\n         When prefetch_related() is called more than once, append to the list of\n         prefetch lookups. If prefetch_related(None) is called, clear the list.\n         \"\"\"\n+        self._not_support_combined_queries('prefetch_related')\n         clone = self._chain()\n         if lookups == (None,):\n             clone._prefetch_related_lookups = ()\n@@ -1025,6 +1028,7 @@ def annotate(self, *args, **kwargs):\n         Return a query set in which the returned objects have been annotated\n         with extra data or aggregations.\n         \"\"\"\n+        self._not_support_combined_queries('annotate')\n         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')\n         annotations = {}\n         for arg in args:\n@@ -1088,6 +1092,7 @@ def distinct(self, *field_names):\n     def extra(self, select=None, where=None, params=None, tables=None,\n               order_by=None, select_params=None):\n         \"\"\"Add extra SQL fragments to the query.\"\"\"\n+        self._not_support_combined_queries('extra')\n         assert self.query.can_filter(), \\\n             \"Cannot change a query once a slice has been taken\"\n         clone = self._chain()\n@@ -1109,6 +1114,7 @@ def defer(self, *fields):\n         The only exception to this is if None is passed in as the only\n         parameter, in which case removal all deferrals.\n         \"\"\"\n+        self._not_support_combined_queries('defer')\n         if self._fields is not None:\n             raise TypeError(\"Cannot call defer() after .values() or .values_list()\")\n         clone = self._chain()\n@@ -1124,6 +1130,7 @@ def only(self, *fields):\n         method and that are not already specified as deferred are loaded\n         immediately when the queryset is evaluated.\n         \"\"\"\n+        self._not_support_combined_queries('only')\n         if self._fields is not None:\n             raise TypeError(\"Cannot call only() after .values() or .values_list()\")\n         if fields == (None,):\n@@ -1312,6 +1319,13 @@ def _validate_values_are_expressions(values, method_name):\n                 )\n             )\n \n+    def _not_support_combined_queries(self, operation_name):\n+        if self.query.combinator:\n+            raise NotSupportedError(\n+                'Calling QuerySet.%s() after %s() is not supported.'\n+                % (operation_name, self.query.combinator)\n+            )\n+\n \n class InstanceCheckMeta(type):\n     def __instancecheck__(self, instance):\n",
  "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+from django.db import connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.db.utils import DatabaseError, NotSupportedError\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -258,3 +259,29 @@ def test_order_by_same_type(self):\n         numbers = list(range(10))\n         self.assertNumbersEqual(union.order_by('num'), numbers)\n         self.assertNumbersEqual(union.order_by('other_num'), reversed(numbers))\n+\n+    def test_unsupported_operations_on_combined_qs(self):\n+        qs = Number.objects.all()\n+        msg = 'Calling QuerySet.%s() after %s() is not supported.'\n+        combinators = ['union']\n+        if connection.features.supports_select_difference:\n+            combinators.append('difference')\n+        if connection.features.supports_select_intersection:\n+            combinators.append('intersection')\n+        for combinator in combinators:\n+            for operation in (\n+                'annotate',\n+                'defer',\n+                'exclude',\n+                'extra',\n+                'filter',\n+                'only',\n+                'prefetch_related',\n+                'select_related',\n+            ):\n+                with self.subTest(combinator=combinator, operation=operation):\n+                    with self.assertRaisesMessage(\n+                        NotSupportedError,\n+                        msg % (operation, combinator),\n+                    ):\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "problem_statement": "Raise a descriptive error on unsupported operations following QuerySet.union(), intersection(), and difference().\nDescription\n\t\nThe documentation for QuerySet.union() says, \"In addition, only LIMIT, OFFSET, and ORDER BY (i.e. slicing and order_by()) are allowed on the resulting QuerySet.\", however, there isn't any strict enforcement about this -- some operations like QuerySet.count() might appear to work. See #27982 and #27990 for confusion about this.\n",
  "hints_text": "â€‹WIP PR from Florian.\nI closed #28328 as a duplicate -- the case of trying to use only() after difference.\nI closed #30456 as an invalid -- the case of trying to use select_related() after union().\nI closed #30532 as a duplicate -- the case of trying to use filter() and exclude() after union().",
  "created_at": "2019-07-24T15:41:09Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.577840",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}