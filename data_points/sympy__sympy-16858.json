{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16858",
  "base_commit": "6ffc2f04ad820e3f592b2107e66a16fd4585ac02",
  "patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -163,6 +163,9 @@ def rv(symbol, cls, args):\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n+    def set(self):\n+        return Interval(self.a, self.b)\n+\n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n@@ -871,6 +874,8 @@ def ChiSquared(name, k):\n class DagumDistribution(SingleContinuousDistribution):\n     _argnames = ('p', 'a', 'b')\n \n+    set = Interval(0, oo)\n+\n     @staticmethod\n     def check(p, a, b):\n         _value_check(p > 0, \"Shape parameter p must be positive.\")\n@@ -1205,6 +1210,13 @@ def FDistribution(name, d1, d2):\n class FisherZDistribution(SingleContinuousDistribution):\n     _argnames = ('d1', 'd2')\n \n+    set = Interval(-oo, oo)\n+\n+    @staticmethod\n+    def check(d1, d2):\n+        _value_check(d1 > 0, \"Degree of freedom d1 must be positive.\")\n+        _value_check(d2 > 0, \"Degree of freedom d2 must be positive.\")\n+\n     def pdf(self, x):\n         d1, d2 = self.d1, self.d2\n         return (2*d1**(d1/2)*d2**(d2/2) / beta_fn(d1/2, d2/2) *\n@@ -1276,6 +1288,11 @@ class FrechetDistribution(SingleContinuousDistribution):\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(a, s, m):\n+        _value_check(a > 0, \"Shape parameter alpha must be positive.\")\n+        _value_check(s > 0, \"Scale parameter s must be positive.\")\n+\n     def __new__(cls, a, s=1, m=0):\n         a, s, m = list(map(sympify, (a, s, m)))\n         return Basic.__new__(cls, a, s, m)\n@@ -1551,6 +1568,10 @@ class GumbelDistribution(SingleContinuousDistribution):\n \n     set = Interval(-oo, oo)\n \n+    @staticmethod\n+    def check(beta, mu):\n+        _value_check(beta > 0, \"Scale parameter beta must be positive.\")\n+\n     def pdf(self, x):\n         beta, mu = self.beta, self.mu\n         z = (x - mu)/beta\n@@ -1564,7 +1585,7 @@ def _characteristic_function(self, t):\n         return gamma(1 - I*self.beta*t) * exp(I*self.mu*t)\n \n     def _moment_generating_function(self, t):\n-        return gamma(1 - self.beta*t) * exp(I*self.mu*t)\n+        return gamma(1 - self.beta*t) * exp(self.mu*t)\n \n def Gumbel(name, beta, mu):\n     r\"\"\"\n@@ -1765,6 +1786,13 @@ def Kumaraswamy(name, a, b):\n class LaplaceDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 'b')\n \n+    set = Interval(-oo, oo)\n+\n+    @staticmethod\n+    def check(mu, b):\n+        _value_check(b > 0, \"Scale parameter b must be positive.\")\n+        _value_check(mu.is_real, \"Location parameter mu should be real\")\n+\n     def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n@@ -1852,6 +1880,12 @@ def Laplace(name, mu, b):\n class LogisticDistribution(SingleContinuousDistribution):\n     _argnames = ('mu', 's')\n \n+    set = Interval(-oo, oo)\n+\n+    @staticmethod\n+    def check(mu, s):\n+        _value_check(s > 0, \"Scale parameter s must be positive.\")\n+\n     def pdf(self, x):\n         mu, s = self.mu, self.s\n         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n@@ -1864,7 +1898,7 @@ def _characteristic_function(self, t):\n         return Piecewise((exp(I*t*self.mu) * pi*self.s*t / sinh(pi*self.s*t), Ne(t, 0)), (S.One, True))\n \n     def _moment_generating_function(self, t):\n-        return exp(self.mu*t) * Beta(1 - self.s*t, 1 + self.s*t)\n+        return exp(self.mu*t) * beta_fn(1 - self.s*t, 1 + self.s*t)\n \n     def _quantile(self, p):\n         return self.mu - self.s*log(-S.One + S.One/p)\n@@ -2015,6 +2049,10 @@ class MaxwellDistribution(SingleContinuousDistribution):\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(a):\n+        _value_check(a > 0, \"Parameter a must be positive.\")\n+\n     def pdf(self, x):\n         a = self.a\n         return sqrt(2/pi)*x**2*exp(-x**2/(2*a**2))/a**3\n@@ -2085,6 +2123,11 @@ class NakagamiDistribution(SingleContinuousDistribution):\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(mu, omega):\n+        _value_check(mu >= S.Half, \"Shape parameter mu must be greater than equal to 1/2.\")\n+        _value_check(omega > 0, \"Spread parameter omega must be positive.\")\n+\n     def pdf(self, x):\n         mu, omega = self.mu, self.omega\n         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)\n@@ -2385,6 +2428,10 @@ class QuadraticUDistribution(SingleContinuousDistribution):\n     def set(self):\n         return Interval(self.a, self.b)\n \n+    @staticmethod\n+    def check(a, b):\n+        _value_check(b > a, \"Parameter b must be in range (%s, oo).\"%(a))\n+\n     def pdf(self, x):\n         a, b = self.a, self.b\n         alpha = 12 / (b-a)**3\n@@ -2553,6 +2600,10 @@ class RayleighDistribution(SingleContinuousDistribution):\n \n     set = Interval(0, oo)\n \n+    @staticmethod\n+    def check(sigma):\n+        _value_check(sigma > 0, \"Scale parameter sigma must be positive.\")\n+\n     def pdf(self, x):\n         sigma = self.sigma\n         return x/sigma**2*exp(-x**2/(2*sigma**2))\n@@ -2690,6 +2741,12 @@ def ShiftedGompertz(name, b, eta):\n class StudentTDistribution(SingleContinuousDistribution):\n     _argnames = ('nu',)\n \n+    set = Interval(-oo, oo)\n+\n+    @staticmethod\n+    def check(nu):\n+        _value_check(nu > 0, \"Degrees of freedom nu must be positive.\")\n+\n     def pdf(self, x):\n         nu = self.nu\n         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)\n@@ -2770,6 +2827,19 @@ def StudentT(name, nu):\n class TrapezoidalDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b', 'c', 'd')\n \n+    @property\n+    def set(self):\n+        return Interval(self.a, self.d)\n+\n+    @staticmethod\n+    def check(a, b, c, d):\n+        _value_check(a < d, \"Lower bound parameter a < %s. a = %s\"%(d, a))\n+        _value_check((a <= b, b < c),\n+        \"Level start parameter b must be in range [%s, %s). b = %s\"%(a, c, b))\n+        _value_check((b < c, c <= d),\n+        \"Level end parameter c must be in range (%s, %s]. c = %s\"%(b, d, c))\n+        _value_check(d >= c, \"Upper bound parameter d > %s. d = %s\"%(c, d))\n+\n     def pdf(self, x):\n         a, b, c, d = self.a, self.b, self.c, self.d\n         return Piecewise(\n@@ -2850,6 +2920,16 @@ def Trapezoidal(name, a, b, c, d):\n class TriangularDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b', 'c')\n \n+    @property\n+    def set(self):\n+        return Interval(self.a, self.b)\n+\n+    @staticmethod\n+    def check(a, b, c):\n+        _value_check(b > a, \"Parameter b > %s. b = %s\"%(a, b))\n+        _value_check((a <= c, c <= b),\n+        \"Parameter c must be in range [%s, %s]. c = %s\"%(a, b, c))\n+\n     def pdf(self, x):\n         a, b, c = self.a, self.b, self.c\n         return Piecewise(\n@@ -2864,7 +2944,7 @@ def _characteristic_function(self, t):\n \n     def _moment_generating_function(self, t):\n         a, b, c = self.a, self.b, self.c\n-        return 2 * ((b - c) * exp(a * t) - (b - a) * exp(c * t) + (c + a) * exp(b * t)) / (\n+        return 2 * ((b - c) * exp(a * t) - (b - a) * exp(c * t) + (c - a) * exp(b * t)) / (\n         (b - a) * (c - a) * (b - c) * t ** 2)\n \n \n@@ -2940,6 +3020,14 @@ def Triangular(name, a, b, c):\n class UniformDistribution(SingleContinuousDistribution):\n     _argnames = ('left', 'right')\n \n+    @property\n+    def set(self):\n+        return Interval(self.left, self.right)\n+\n+    @staticmethod\n+    def check(left, right):\n+        _value_check(left < right, \"Lower limit should be less than Upper limit.\")\n+\n     def pdf(self, x):\n         left, right = self.left, self.right\n         return Piecewise(\n@@ -3047,6 +3135,11 @@ class UniformSumDistribution(SingleContinuousDistribution):\n     def set(self):\n         return Interval(0, self.n)\n \n+    @staticmethod\n+    def check(n):\n+        _value_check((n > 0, n.is_integer),\n+        \"Parameter n must be positive integer.\")\n+\n     def pdf(self, x):\n         n = self.n\n         k = Dummy(\"k\")\n@@ -3292,6 +3385,10 @@ class WignerSemicircleDistribution(SingleContinuousDistribution):\n     def set(self):\n         return Interval(-self.R, self.R)\n \n+    @staticmethod\n+    def check(R):\n+        _value_check(R > 0, \"Radius R must be positive.\")\n+\n     def pdf(self, x):\n         R = self.R\n         return 2/(pi*R**2)*sqrt(R**2 - x**2)\ndiff --git a/sympy/stats/joint_rv_types.py b/sympy/stats/joint_rv_types.py\n--- a/sympy/stats/joint_rv_types.py\n+++ b/sympy/stats/joint_rv_types.py\n@@ -76,7 +76,8 @@ def set(self):\n         k = len(self.mu)\n         return S.Reals**k\n \n-    def check(self, mu, sigma):\n+    @staticmethod\n+    def check(mu, sigma):\n         _value_check(len(mu) == len(sigma.col(0)),\n             \"Size of the mean vector and covariance matrix are incorrect.\")\n         #check if covariance matrix is positive definite or not.\n@@ -117,7 +118,8 @@ def set(self):\n         k = len(self.mu)\n         return S.Reals**k\n \n-    def check(self, mu, sigma):\n+    @staticmethod\n+    def check(mu, sigma):\n         _value_check(len(mu) == len(sigma.col(0)),\n             \"Size of the mean vector and covariance matrix are incorrect.\")\n         #check if covariance matrix is positive definite or not.\n@@ -151,7 +153,8 @@ def set(self):\n         k = len(self.mu)\n         return S.Reals**k\n \n-    def check(self, mu, sigma, v):\n+    @staticmethod\n+    def check(mu, sigma, v):\n         _value_check(len(mu) == len(sigma.col(0)),\n             \"Size of the location vector and shape matrix are incorrect.\")\n         #check if covariance matrix is positive definite or not.\n@@ -196,7 +199,8 @@ class NormalGammaDistribution(JointDistribution):\n     _argnames = ['mu', 'lamda', 'alpha', 'beta']\n     is_Continuous=True\n \n-    def check(self, mu, lamda, alpha, beta):\n+    @staticmethod\n+    def check(mu, lamda, alpha, beta):\n         _value_check(mu.is_real, \"Location must be real.\")\n         _value_check(lamda > 0, \"Lambda must be positive\")\n         _value_check(alpha > 0, \"alpha must be positive\")\n@@ -258,7 +262,8 @@ class MultivariateBetaDistribution(JointDistribution):\n     _argnames = ['alpha']\n     is_Continuous = True\n \n-    def check(self, alpha):\n+    @staticmethod\n+    def check(alpha):\n         _value_check(len(alpha) >= 2, \"At least two categories should be passed.\")\n         for a_k in alpha:\n             _value_check((a_k > 0) != False, \"Each concentration parameter\"\n@@ -331,7 +336,8 @@ class MultivariateEwensDistribution(JointDistribution):\n     is_Discrete = True\n     is_Continuous = False\n \n-    def check(self, n, theta):\n+    @staticmethod\n+    def check(n, theta):\n         _value_check(isinstance(n, Integer) and (n > 0) == True,\n                         \"sample size should be positive integer.\")\n         _value_check(theta.is_positive, \"mutation rate should be positive.\")\n@@ -403,7 +409,8 @@ class MultinomialDistribution(JointDistribution):\n     is_Continuous=False\n     is_Discrete = True\n \n-    def check(self, n, p):\n+    @staticmethod\n+    def check(n, p):\n         _value_check(n > 0,\n                         \"number of trials must be a positve integer\")\n         for p_k in p:\n@@ -471,7 +478,8 @@ class NegativeMultinomialDistribution(JointDistribution):\n     is_Continuous=False\n     is_Discrete = True\n \n-    def check(self, k0, p):\n+    @staticmethod\n+    def check(k0, p):\n         _value_check(k0 > 0,\n                         \"number of failures must be a positve integer\")\n         for p_k in p:\n",
  "test_patch": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -1,13 +1,16 @@\n-from sympy import (Symbol, Abs, exp, S, N, pi, simplify, Interval, erf, erfc, Ne,\n-                   Eq, log, lowergamma, uppergamma, Sum, symbols, sqrt, And, gamma, beta,\n-                   Piecewise, Integral, sin, cos, tan, atan, besseli, factorial, binomial,\n-                   floor, expand_func, Rational, I, re, im, lambdify, hyper, diff, Or, Mul)\n+from sympy import (Symbol, Abs, exp, expint, S, N, pi, simplify, Interval, erf, erfc, Ne,\n+                   EulerGamma, Eq, log, lowergamma, uppergamma, Sum, symbols, sqrt, And,\n+                   gamma, beta, Piecewise, Integral, sin, cos, tan, atan, sinh, cosh,\n+                   besseli, factorial, binomial, floor, expand_func, Rational, I, re,\n+                   im, lambdify, hyper, diff, Or, Mul)\n from sympy.core.compatibility import range\n from sympy.external import import_module\n from sympy.functions.special.error_functions import erfinv\n+from sympy.functions.special.hyper import meijerg\n from sympy.sets.sets import Intersection, FiniteSet\n from sympy.stats import (P, E, where, density, variance, covariance, skewness,\n-                         given, pspace, cdf, characteristic_function, ContinuousRV, sample,\n+                         given, pspace, cdf, characteristic_function,\n+                         moment_generating_function, ContinuousRV, sample,\n                          Arcsin, Benini, Beta, BetaNoncentral, BetaPrime, Cauchy,\n                          Chi, ChiSquared,\n                          ChiNoncentral, Dagum, Erlang, Exponential,\n@@ -22,6 +25,7 @@\n from sympy.stats.joint_rv import JointPSpace\n from sympy.utilities.pytest import raises, XFAIL, slow, skip\n from sympy.utilities.randtest import verify_numerically as tn\n+from sympy import E as e\n \n oo = S.Infinity\n \n@@ -34,8 +38,8 @@ def test_single_normal():\n     X = Normal('x', 0, 1)\n     Y = X*sigma + mu\n \n-    assert simplify(E(Y)) == mu\n-    assert simplify(variance(Y)) == sigma**2\n+    assert E(Y) == mu\n+    assert variance(Y) == sigma**2\n     pdf = density(Y)\n     x = Symbol('x')\n     assert (pdf(x) ==\n@@ -46,12 +50,12 @@ def test_single_normal():\n     assert E(X, Eq(X, mu)) == mu\n \n \n-@XFAIL\n def test_conditional_1d():\n     X = Normal('x', 0, 1)\n     Y = given(X, X >= 0)\n+    z = Symbol('z')\n \n-    assert density(Y) == 2 * density(X)\n+    assert density(Y)(z) == 2 * density(X)(z)\n \n     assert Y.pspace.domain.set == Interval(0, oo)\n     assert E(Y) == sqrt(2) / sqrt(pi)\n@@ -108,7 +112,7 @@ def test_symbolic():\n     assert E(X + Y) == mu1 + mu2\n     assert E(a*X + b) == a*E(X) + b\n     assert variance(X) == s1**2\n-    assert simplify(variance(X + a*Y + b)) == variance(X) + a**2*variance(Y)\n+    assert variance(X + a*Y + b) == variance(X) + a**2*variance(Y)\n \n     assert E(Z) == 1/rate\n     assert E(a*Z + b) == a*E(Z) + b\n@@ -147,12 +151,144 @@ def test_characteristic_function():\n     Y = Normal('y', 1, 1)\n     cf = characteristic_function(Y)\n     assert cf(0) == 1\n-    assert simplify(cf(1)) == exp(I - S(1)/2)\n+    assert cf(1) == exp(I - S(1)/2)\n \n     Z = Exponential('z', 5)\n     cf = characteristic_function(Z)\n     assert cf(0) == 1\n-    assert simplify(cf(1)) == S(25)/26 + 5*I/26\n+    assert cf(1).expand() == S(25)/26 + 5*I/26\n+\n+def test_moment_generating_function():\n+    t = symbols('t', positive=True)\n+\n+    # Symbolic tests\n+    a, b, c = symbols('a b c')\n+\n+    mgf = moment_generating_function(Beta('x', a, b))(t)\n+    assert mgf == hyper((a,), (a + b,), t)\n+\n+    mgf = moment_generating_function(Chi('x', a))(t)\n+    assert mgf == sqrt(2)*t*gamma(a/2 + S(1)/2)*\\\n+        hyper((a/2 + S(1)/2,), (S(3)/2,), t**2/2)/gamma(a/2) +\\\n+        hyper((a/2,), (S(1)/2,), t**2/2)\n+\n+    mgf = moment_generating_function(ChiSquared('x', a))(t)\n+    assert mgf == (1 - 2*t)**(-a/2)\n+\n+    mgf = moment_generating_function(Erlang('x', a, b))(t)\n+    assert mgf == (1 - t/b)**(-a)\n+\n+    mgf = moment_generating_function(Exponential('x', a))(t)\n+    assert mgf == a/(a - t)\n+\n+    mgf = moment_generating_function(Gamma('x', a, b))(t)\n+    assert mgf == (-b*t + 1)**(-a)\n+\n+    mgf = moment_generating_function(Gumbel('x', a, b))(t)\n+    assert mgf == exp(b*t)*gamma(-a*t + 1)\n+\n+    mgf = moment_generating_function(Gompertz('x', a, b))(t)\n+    assert mgf == b*exp(b)*expint(t/a, b)\n+\n+    mgf = moment_generating_function(Laplace('x', a, b))(t)\n+    assert mgf == exp(a*t)/(-b**2*t**2 + 1)\n+\n+    mgf = moment_generating_function(Logistic('x', a, b))(t)\n+    assert mgf == exp(a*t)*beta(-b*t + 1, b*t + 1)\n+\n+    mgf = moment_generating_function(Normal('x', a, b))(t)\n+    assert mgf == exp(a*t + b**2*t**2/2)\n+\n+    mgf = moment_generating_function(Pareto('x', a, b))(t)\n+    assert mgf == b*(-a*t)**b*uppergamma(-b, -a*t)\n+\n+    mgf = moment_generating_function(QuadraticU('x', a, b))(t)\n+    assert str(mgf) == (\"(3*(t*(-4*b + (a + b)**2) + 4)*exp(b*t) - \"\n+    \"3*(t*(a**2 + 2*a*(b - 2) + b**2) + 4)*exp(a*t))/(t**2*(a - b)**3)\")\n+\n+    mgf = moment_generating_function(RaisedCosine('x', a, b))(t)\n+    assert mgf == pi**2*exp(a*t)*sinh(b*t)/(b*t*(b**2*t**2 + pi**2))\n+\n+    mgf = moment_generating_function(Rayleigh('x', a))(t)\n+    assert mgf == sqrt(2)*sqrt(pi)*a*t*(erf(sqrt(2)*a*t/2) + 1)\\\n+        *exp(a**2*t**2/2)/2 + 1\n+\n+    mgf = moment_generating_function(Triangular('x', a, b, c))(t)\n+    assert str(mgf) == (\"(-2*(-a + b)*exp(c*t) + 2*(-a + c)*exp(b*t) + \"\n+    \"2*(b - c)*exp(a*t))/(t**2*(-a + b)*(-a + c)*(b - c))\")\n+\n+    mgf = moment_generating_function(Uniform('x', a, b))(t)\n+    assert mgf == (-exp(a*t) + exp(b*t))/(t*(-a + b))\n+\n+    mgf = moment_generating_function(UniformSum('x', a))(t)\n+    assert mgf == ((exp(t) - 1)/t)**a\n+\n+    mgf = moment_generating_function(WignerSemicircle('x', a))(t)\n+    assert mgf == 2*besseli(1, a*t)/(a*t)\n+\n+    # Numeric tests\n+\n+    mgf = moment_generating_function(Beta('x', 1, 1))(t)\n+    assert mgf.diff(t).subs(t, 1) == hyper((2,), (3,), 1)/2\n+\n+    mgf = moment_generating_function(Chi('x', 1))(t)\n+    assert mgf.diff(t).subs(t, 1) == sqrt(2)*hyper((1,), (S(3)/2,), S(1)/2\n+    )/sqrt(pi) + hyper((S(3)/2,), (S(3)/2,), S(1)/2) + 2*sqrt(2)*hyper((2,),\n+    (S(5)/2,), S(1)/2)/(3*sqrt(pi))\n+\n+    mgf = moment_generating_function(ChiSquared('x', 1))(t)\n+    assert mgf.diff(t).subs(t, 1) == I\n+\n+    mgf = moment_generating_function(Erlang('x', 1, 1))(t)\n+    assert mgf.diff(t).subs(t, 0) == 1\n+\n+    mgf = moment_generating_function(Exponential('x', 1))(t)\n+    assert mgf.diff(t).subs(t, 0) == 1\n+\n+    mgf = moment_generating_function(Gamma('x', 1, 1))(t)\n+    assert mgf.diff(t).subs(t, 0) == 1\n+\n+    mgf = moment_generating_function(Gumbel('x', 1, 1))(t)\n+    assert mgf.diff(t).subs(t, 0) == EulerGamma + 1\n+\n+    mgf = moment_generating_function(Gompertz('x', 1, 1))(t)\n+    assert mgf.diff(t).subs(t, 1) == -e*meijerg(((), (1, 1)),\n+    ((0, 0, 0), ()), 1)\n+\n+    mgf = moment_generating_function(Laplace('x', 1, 1))(t)\n+    assert mgf.diff(t).subs(t, 0) == 1\n+\n+    mgf = moment_generating_function(Logistic('x', 1, 1))(t)\n+    assert mgf.diff(t).subs(t, 0) == beta(1, 1)\n+\n+    mgf = moment_generating_function(Normal('x', 0, 1))(t)\n+    assert mgf.diff(t).subs(t, 1) == exp(S(1)/2)\n+\n+    mgf = moment_generating_function(Pareto('x', 1, 1))(t)\n+    assert mgf.diff(t).subs(t, 0) == expint(1, 0)\n+\n+    mgf = moment_generating_function(QuadraticU('x', 1, 2))(t)\n+    assert mgf.diff(t).subs(t, 1) == -12*e - 3*exp(2)\n+\n+    mgf = moment_generating_function(RaisedCosine('x', 1, 1))(t)\n+    assert mgf.diff(t).subs(t, 1) == -2*e*pi**2*sinh(1)/\\\n+    (1 + pi**2)**2 + e*pi**2*cosh(1)/(1 + pi**2)\n+\n+    mgf = moment_generating_function(Rayleigh('x', 1))(t)\n+    assert mgf.diff(t).subs(t, 0) == sqrt(2)*sqrt(pi)/2\n+\n+    mgf = moment_generating_function(Triangular('x', 1, 3, 2))(t)\n+    assert mgf.diff(t).subs(t, 1) == -e + exp(3)\n+\n+    mgf = moment_generating_function(Uniform('x', 0, 1))(t)\n+    assert mgf.diff(t).subs(t, 1) == 1\n+\n+    mgf = moment_generating_function(UniformSum('x', 1))(t)\n+    assert mgf.diff(t).subs(t, 1) == 1\n+\n+    mgf = moment_generating_function(WignerSemicircle('x', 1))(t)\n+    assert mgf.diff(t).subs(t, 1) == -2*besseli(1, 1) + besseli(2, 1) +\\\n+        besseli(0, 1)\n \n \n def test_sample_continuous():\n@@ -451,7 +587,7 @@ def test_gamma():\n     X = Gamma('x', k, theta)\n     assert E(X) == k*theta\n     assert variance(X) == k*theta**2\n-    assert simplify(skewness(X)) == 2/sqrt(k)\n+    assert skewness(X).expand() == 2/sqrt(k)\n \n \n def test_gamma_inverse():\n@@ -554,7 +690,7 @@ def test_maxwell():\n     assert density(X)(x) == (sqrt(2)*x**2*exp(-x**2/(2*a**2))/\n         (sqrt(pi)*a**3))\n     assert E(X) == 2*sqrt(2)*a/sqrt(pi)\n-    assert simplify(variance(X)) == a**2*(-8 + 3*pi)/pi\n+    assert variance(X) == -8*a**2/pi + 3*a**2\n     assert cdf(X)(x) == erf(sqrt(2)*x/(2*a)) - sqrt(2)*x*exp(-x**2/(2*a**2))/(sqrt(pi)*a)\n     assert diff(cdf(X)(x), x) == density(X)(x)\n \n@@ -653,18 +789,14 @@ def test_trapezoidal():\n     assert variance(X) == S(5)/12\n     assert P(X < 2) == S(3)/4\n \n-@XFAIL\n def test_triangular():\n     a = Symbol(\"a\")\n     b = Symbol(\"b\")\n     c = Symbol(\"c\")\n \n     X = Triangular('x', a, b, c)\n-    assert density(X)(x) == Piecewise(\n-                 ((2*x - 2*a)/((-a + b)*(-a + c)), And(a <= x, x < c)),\n-                 (2/(-a + b), x == c),\n-                 ((-2*x + 2*b)/((-a + b)*(b - c)), And(x <= b, c < x)),\n-                 (0, True))\n+    assert str(density(X)(x)) == (\"Piecewise(((-2*a + 2*x)/((-a + b)*(-a + c)), (a <= x) & (c > x)), \"\n+    \"(2/(-a + b), Eq(c, x)), ((2*b - 2*x)/((-a + b)*(b - c)), (b >= x) & (c < x)), (0, True))\")\n \n \n def test_quadratic_u():\n@@ -681,8 +813,8 @@ def test_uniform():\n     w = Symbol('w', positive=True, finite=True)\n     X = Uniform('x', l, l + w)\n \n-    assert simplify(E(X)) == l + w/2\n-    assert simplify(variance(X)) == w**2/12\n+    assert E(X) == l + w/2\n+    assert variance(X).expand() == w**2/12\n \n     # With numbers all is well\n     X = Uniform('x', 3, 5)\n@@ -700,7 +832,7 @@ def test_uniform():\n     assert c(S(7)/2) == S(1)/4\n     assert c(5) == 1 and c(6) == 1\n \n-\n+@XFAIL\n def test_uniform_P():\n     \"\"\" This stopped working because SingleContinuousPSpace.compute_density no\n     longer calls integrate on a DiracDelta but rather just solves directly.\n@@ -738,8 +870,8 @@ def test_weibull():\n     a, b = symbols('a b', positive=True)\n     X = Weibull('x', a, b)\n \n-    assert simplify(E(X)) == simplify(a * gamma(1 + 1/b))\n-    assert simplify(variance(X)) == simplify(a**2 * gamma(1 + 2/b) - E(X)**2)\n+    assert E(X).expand() == a * gamma(1 + 1/b)\n+    assert variance(X).expand() == (a**2 * gamma(1 + 2/b) - E(X)**2).expand()\n     assert simplify(skewness(X)) == (2*gamma(1 + 1/b)**3 - 3*gamma(1 + 1/b)*gamma(1 + 2/b) + gamma(1 + 3/b))/(-gamma(1 + 1/b)**2 + gamma(1 + 2/b))**(S(3)/2)\n \n def test_weibull_numeric():\n@@ -795,22 +927,18 @@ def test_input_value_assertions():\n         fn('x', p, q)  # No error raised\n \n \n-@XFAIL\n def test_unevaluated():\n     X = Normal('x', 0, 1)\n-    assert E(X, evaluate=False) == (\n-        Integral(sqrt(2)*x*exp(-x**2/2)/(2*sqrt(pi)), (x, -oo, oo)))\n+    assert str(E(X, evaluate=False)) == (\"Integral(sqrt(2)*x*exp(-x**2/2)/\"\n+    \"(2*sqrt(pi)), (x, -oo, oo))\")\n \n-    assert E(X + 1, evaluate=False) == (\n-        Integral(sqrt(2)*x*exp(-x**2/2)/(2*sqrt(pi)), (x, -oo, oo)) + 1)\n+    assert str(E(X + 1, evaluate=False)) == (\"Integral(sqrt(2)*x*exp(-x**2/2)/\"\n+    \"(2*sqrt(pi)), (x, -oo, oo)) + 1\")\n \n-    assert P(X > 0, evaluate=False) == (\n-        Integral(sqrt(2)*exp(-x**2/2)/(2*sqrt(pi)), (x, 0, oo)))\n+    assert str(P(X > 0, evaluate=False)) == (\"Integral(sqrt(2)*exp(-_z**2/2)/\"\n+    \"(2*sqrt(pi)), (_z, 0, oo))\")\n \n-    assert P(X > 0, X**2 < 1, evaluate=False) == (\n-        Integral(sqrt(2)*exp(-x**2/2)/(2*sqrt(pi)*\n-            Integral(sqrt(2)*exp(-x**2/2)/(2*sqrt(pi)),\n-                (x, -1, 1))), (x, 0, 1)))\n+    assert P(X > 0, X**2 < 1, evaluate=False) == S(1)/2\n \n \n def test_probability_unevaluated():\n",
  "problem_statement": "Added missing checks and attributes to sympy.stats\n<!-- Your title above should be a short description of what\r\nwas changed. Do not include the issue number in the title. -->\r\n\r\n#### References to other Issues or PRs\r\n<!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\nformat, e.g. \"Fixes #1234\". See\r\nhttps://github.com/blog/1506-closing-issues-via-pull-requests . Please also\r\nwrite a comment on that issue linking back to this pull request once it is\r\nopen. -->\r\nN/A\r\n\r\n\r\n#### Brief description of what is fixed or changed\r\nMissing checks for parameters and set\r\nattributes have been added to various\r\ndistributions to enhance consistency\r\nand correctness.\r\n\r\n\r\n#### Other comments\r\nThese changes are made for enhancement of the code. This PR is made for receiving regular feedback on the code additions.\r\nStatus - Work In Progress\r\nPlease discuss with me on the changes I have made, so that I can present my view if I haven't made satisfactory changes. \r\n\r\n#### Release Notes\r\n\r\n<!-- Write the release notes for this release below. See\r\nhttps://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\non how to write release notes. The bot will check your release notes\r\nautomatically to see if they are formatted correctly. -->\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n* stats\r\n  * missing checks and attributes added to sympy.stats for distributions.\r\n<!-- END RELEASE NOTES -->\r\n\n",
  "hints_text": ":white_check_mark:\n\nHi, I am the [SymPy bot](https://github.com/sympy/sympy-bot) (v147). I'm here to help you write a release notes entry. Please read the [guide on how to write release notes](https://github.com/sympy/sympy/wiki/Writing-Release-Notes).\n\n\n\nYour release notes are in good order.\n\nHere is what the release notes will look like:\n* stats\n  * missing checks and attributes added to sympy.stats for distributions. ([#16571](https://github.com/sympy/sympy/pull/16571) by [@czgdp1807](https://github.com/czgdp1807))\n\nThis will be added to https://github.com/sympy/sympy/wiki/Release-Notes-for-1.5.\n\nNote: This comment will be updated with the latest check if you edit the pull request. You need to reload the page to see it. <details><summary>Click here to see the pull request description that was parsed.</summary>\n\n    <!-- Your title above should be a short description of what\r\n    was changed. Do not include the issue number in the title. -->\r\n\r\n    #### References to other Issues or PRs\r\n    <!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\n    format, e.g. \"Fixes #1234\". See\r\n    https://github.com/blog/1506-closing-issues-via-pull-requests . Please also\r\n    write a comment on that issue linking back to this pull request once it is\r\n    open. -->\r\n    N/A\r\n\r\n\r\n    #### Brief description of what is fixed or changed\r\n    Missing checks for parameters and set\r\n    attributes have been added to various\r\n    distributions to enhance consistency\r\n    and correctness.\r\n\r\n\r\n    #### Other comments\r\n    These changes are made for enhancement of the code. This PR is made for receiving regular feedback on the code additions.\r\n    Status - Work In Progress\r\n    Please discuss with me on the changes I have made, so that I can present my view if I haven't made satisfactory changes. \r\n\r\n    #### Release Notes\r\n\r\n    <!-- Write the release notes for this release below. See\r\n    https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\n    on how to write release notes. The bot will check your release notes\r\n    automatically to see if they are formatted correctly. -->\r\n\r\n    <!-- BEGIN RELEASE NOTES -->\r\n    * stats\r\n      * missing checks and attributes added to sympy.stats for distributions.\r\n    <!-- END RELEASE NOTES -->\r\n\n\n</details><p>\n\n# [Codecov](https://codecov.io/gh/sympy/sympy/pull/16571?src=pr&el=h1) Report\n> Merging [#16571](https://codecov.io/gh/sympy/sympy/pull/16571?src=pr&el=desc) into [master](https://codecov.io/gh/sympy/sympy/commit/fa19fc79ed1053b67c761962b1c13d22806c5de8?src=pr&el=desc) will **increase** coverage by `0.07%`.\n> The diff coverage is `94.871%`.\n\n```diff\n@@             Coverage Diff              @@\n##            master    #16571      +/-   ##\n============================================\n+ Coverage   73.748%   73.819%   +0.07%     \n============================================\n  Files          619       619              \n  Lines       158656    159426     +770     \n  Branches     37185     37400     +215     \n============================================\n+ Hits        117006    117687     +681     \n- Misses       36236     36282      +46     \n- Partials      5414      5457      +43\n```\n\n@czgdp1807 \r\nI have also added some tests for the same module in  #16557\r\nAlso done some documentation work. Currently, improving the documentation \r\nbut do check thos  out.\r\nWe can improve the tests for the module togather. It will be more effective.\r\n\n@jksuom Any reviews/comments on my additions, [this](https://github.com/sympy/sympy/pull/16571/commits/7586750516e43c9c07cd8041e54a177838624c84) and [this](https://github.com/sympy/sympy/pull/16571/commits/6bbb90102e5e68290434ee53263ae94c9999fb72). I am adding commits in chunks so that it's easier to review.\nI have corrected the tests for sampling according to [#16741 (comment)](https://github.com/sympy/sympy/issues/16741#issuecomment-487299356) in [the latest commit](https://github.com/sympy/sympy/pull/16571/commits/8ce1aa8ffcb87cd684f1bf5ae643820916448340). Please let me know if any changes are required.\n@jksuom Please review the [latest commit](https://github.com/sympy/sympy/pull/16571/commits/cdc6df358644c2c79792e75e1b7e03f883592d3b). \r\nNote:\r\nI cannot add `set` property to `UnifromDistribution` because it results in the following `NotImplemented` error. It would be great if you can tell me the reason behind this. I will be able to investigate only after a few days.\r\n```\r\n>>> from sympy import *\r\n>>> from sympy.stats import *\r\n>>> l = Symbol('l', real=True, finite=True)\r\n>>> w = Symbol('w', positive=True, finite=True)\r\n>>> X = Uniform('x', l, l + w)\r\n>>> P(X < l)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/gagandeep/sympy/sympy/stats/rv.py\", line 756, in probability\r\n    return result.doit()\r\n  File \"/home/gagandeep/sympy/sympy/integrals/integrals.py\", line 636, in doit\r\n    evalued_pw = piecewise_fold(Add(*piecewises))._eval_interval(x, a, b)\r\n  File \"/home/gagandeep/sympy/sympy/functions/elementary/piecewise.py\", line 621, in _eval_interval\r\n    return super(Piecewise, self)._eval_interval(sym, a, b)\r\n  File \"/home/gagandeep/sympy/sympy/core/expr.py\", line 887, in _eval_interval\r\n    B = self.subs(x, b)\r\n  File \"/home/gagandeep/sympy/sympy/core/basic.py\", line 997, in subs\r\n    rv = rv._subs(old, new, **kwargs)\r\n  File \"/home/gagandeep/sympy/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/home/gagandeep/sympy/sympy/core/basic.py\", line 1109, in _subs\r\n    rv = self._eval_subs(old, new)\r\n  File \"/home/gagandeep/sympy/sympy/functions/elementary/piecewise.py\", line 873, in _eval_subs\r\n    c = c._subs(old, new)\r\n  File \"/home/gagandeep/sympy/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/home/gagandeep/sympy/sympy/core/basic.py\", line 1111, in _subs\r\n    rv = fallback(self, old, new)\r\n  File \"/home/gagandeep/sympy/sympy/core/basic.py\", line 1083, in fallback\r\n    arg = arg._subs(old, new, **hints)\r\n  File \"/home/gagandeep/sympy/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/home/gagandeep/sympy/sympy/core/basic.py\", line 1111, in _subs\r\n    rv = fallback(self, old, new)\r\n  File \"/home/gagandeep/sympy/sympy/core/basic.py\", line 1088, in fallback\r\n    rv = self.func(*args)\r\n  File \"/home/gagandeep/sympy/sympy/core/relational.py\", line 637, in __new__\r\n    r = cls._eval_relation(lhs, rhs)\r\n  File \"/home/gagandeep/sympy/sympy/core/relational.py\", line 916, in _eval_relation\r\n    return _sympify(lhs.__ge__(rhs))\r\n  File \"/home/gagandeep/sympy/sympy/core/sympify.py\", line 417, in _sympify\r\n    return sympify(a, strict=True)\r\n  File \"/home/gagandeep/sympy/sympy/core/sympify.py\", line 339, in sympify\r\n    raise SympifyError(a)\r\nsympy.core.sympify.SympifyError: SympifyError: NotImplemented\r\n\r\n``` \n@supreet11agrawal @smichr Thanks for the comments and reviews. I will complete it after few clarifications in other PRs.",
  "created_at": "2019-05-18T10:10:04Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_moment_generating_function\"]",
  "PASS_TO_PASS": "[\"test_single_normal\", \"test_conditional_1d\", \"test_ContinuousDomain\", \"test_symbolic\", \"test_cdf\", \"test_characteristic_function\", \"test_sample_continuous\", \"test_ContinuousRV\", \"test_arcsin\", \"test_benini\", \"test_beta\", \"test_beta_noncentral\", \"test_betaprime\", \"test_cauchy\", \"test_chi\", \"test_chi_noncentral\", \"test_chi_squared\", \"test_dagum\", \"test_erlang\", \"test_exponential\", \"test_f_distribution\", \"test_fisher_z\", \"test_frechet\", \"test_gamma\", \"test_gamma_inverse\", \"test_gompertz\", \"test_gumbel\", \"test_kumaraswamy\", \"test_laplace\", \"test_logistic\", \"test_lognormal\", \"test_maxwell\", \"test_nakagami\", \"test_pareto\", \"test_pareto_numeric\", \"test_raised_cosine\", \"test_rayleigh\", \"test_shiftedgompertz\", \"test_studentt\", \"test_trapezoidal\", \"test_triangular\", \"test_quadratic_u\", \"test_uniform\", \"test_uniformsum\", \"test_von_mises\", \"test_weibull\", \"test_weibull_numeric\", \"test_wignersemicircle\", \"test_prefab_sampling\", \"test_input_value_assertions\", \"test_unevaluated\", \"test_probability_unevaluated\", \"test_density_unevaluated\", \"test_NormalDistribution\", \"test_random_parameters\", \"test_random_parameters_given\", \"test_conjugate_priors\", \"test_difficult_univariate\", \"test_issue_10003\", \"test_long_precomputed_cdf\", \"test_issue_13324\", \"test_FiniteSet_prob\", \"test_prob_neq\", \"test_union\", \"test_Or\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.110357",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}