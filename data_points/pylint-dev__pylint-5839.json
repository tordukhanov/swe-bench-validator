{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-5839",
  "base_commit": "15040ee7c42958606ae27aa32ccbe54371b83049",
  "patch": "diff --git a/pylint/checkers/__init__.py b/pylint/checkers/__init__.py\n--- a/pylint/checkers/__init__.py\n+++ b/pylint/checkers/__init__.py\n@@ -37,14 +37,15 @@\n 13: string_format\n 14: string_constant\n 15: stdlib\n-16: python3\n+16: python3 (This one was deleted but needs to be reserved for consistency with old messages)\n 17: refactoring\n .\n .\n .\n 24: non-ascii-names\n 25: unicode\n-26-50: not yet used: reserved for future internal checkers.\n+26: unsupported_version\n+27-50: not yet used: reserved for future internal checkers.\n This file is not updated. Use\n    script/get_unused_message_id_category.py\n to get the next free checker id.\ndiff --git a/pylint/checkers/unsupported_version.py b/pylint/checkers/unsupported_version.py\n--- a/pylint/checkers/unsupported_version.py\n+++ b/pylint/checkers/unsupported_version.py\n@@ -35,13 +35,13 @@ class UnsupportedVersionChecker(BaseChecker):\n     __implements__ = (IAstroidChecker,)\n     name = \"unsupported_version\"\n     msgs = {\n-        \"W1601\": (\n+        \"W2601\": (\n             \"F-strings are not supported by all versions included in the py-version setting\",\n             \"using-f-string-in-unsupported-version\",\n             \"Used when the py-version set by the user is lower than 3.6 and pylint encounters \"\n             \"a f-string.\",\n         ),\n-        \"W1602\": (\n+        \"W2602\": (\n             \"typing.final is not supported by all versions included in the py-version setting\",\n             \"using-final-decorator-in-unsupported-version\",\n             \"Used when the py-version set by the user is lower than 3.8 and pylint encounters \"\ndiff --git a/pylint/constants.py b/pylint/constants.py\n--- a/pylint/constants.py\n+++ b/pylint/constants.py\n@@ -2,7 +2,7 @@\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n import platform\n import sys\n-from typing import Dict\n+from typing import Dict, List, NamedTuple, Tuple\n \n import astroid\n import platformdirs\n@@ -72,3 +72,107 @@ class WarningScope:\n     \"class_const\": \"class constant\",\n     \"inlinevar\": \"inline iteration\",\n }\n+\n+\n+class DeletedMessage(NamedTuple):\n+    msgid: str\n+    symbol: str\n+    old_names: List[Tuple[str, str]] = []\n+\n+\n+DELETED_MSGID_PREFIXES = [\n+    16,  # the PY3K+ checker, see https://github.com/PyCQA/pylint/pull/4942\n+]\n+\n+DELETED_MESSAGES = [\n+    # Everything until the next comment is from the\n+    # PY3K+ checker, see https://github.com/PyCQA/pylint/pull/4942\n+    DeletedMessage(\"W1601\", \"apply-builtin\"),\n+    DeletedMessage(\"E1601\", \"print-statement\"),\n+    DeletedMessage(\"E1602\", \"parameter-unpacking\"),\n+    DeletedMessage(\n+        \"E1603\", \"unpacking-in-except\", [(\"W0712\", \"old-unpacking-in-except\")]\n+    ),\n+    DeletedMessage(\"E1604\", \"old-raise-syntax\", [(\"W0121\", \"old-old-raise-syntax\")]),\n+    DeletedMessage(\"E1605\", \"backtick\", [(\"W0333\", \"old-backtick\")]),\n+    DeletedMessage(\"E1609\", \"import-star-module-level\"),\n+    DeletedMessage(\"W1601\", \"apply-builtin\"),\n+    DeletedMessage(\"W1602\", \"basestring-builtin\"),\n+    DeletedMessage(\"W1603\", \"buffer-builtin\"),\n+    DeletedMessage(\"W1604\", \"cmp-builtin\"),\n+    DeletedMessage(\"W1605\", \"coerce-builtin\"),\n+    DeletedMessage(\"W1606\", \"execfile-builtin\"),\n+    DeletedMessage(\"W1607\", \"file-builtin\"),\n+    DeletedMessage(\"W1608\", \"long-builtin\"),\n+    DeletedMessage(\"W1609\", \"raw_input-builtin\"),\n+    DeletedMessage(\"W1610\", \"reduce-builtin\"),\n+    DeletedMessage(\"W1611\", \"standarderror-builtin\"),\n+    DeletedMessage(\"W1612\", \"unicode-builtin\"),\n+    DeletedMessage(\"W1613\", \"xrange-builtin\"),\n+    DeletedMessage(\"W1614\", \"coerce-method\"),\n+    DeletedMessage(\"W1615\", \"delslice-method\"),\n+    DeletedMessage(\"W1616\", \"getslice-method\"),\n+    DeletedMessage(\"W1617\", \"setslice-method\"),\n+    DeletedMessage(\"W1618\", \"no-absolute-import\"),\n+    DeletedMessage(\"W1619\", \"old-division\"),\n+    DeletedMessage(\"W1620\", \"dict-iter-method\"),\n+    DeletedMessage(\"W1621\", \"dict-view-method\"),\n+    DeletedMessage(\"W1622\", \"next-method-called\"),\n+    DeletedMessage(\"W1623\", \"metaclass-assignment\"),\n+    DeletedMessage(\n+        \"W1624\", \"indexing-exception\", [(\"W0713\", \"old-indexing-exception\")]\n+    ),\n+    DeletedMessage(\"W1625\", \"raising-string\", [(\"W0701\", \"old-raising-string\")]),\n+    DeletedMessage(\"W1626\", \"reload-builtin\"),\n+    DeletedMessage(\"W1627\", \"oct-method\"),\n+    DeletedMessage(\"W1628\", \"hex-method\"),\n+    DeletedMessage(\"W1629\", \"nonzero-method\"),\n+    DeletedMessage(\"W1630\", \"cmp-method\"),\n+    DeletedMessage(\"W1632\", \"input-builtin\"),\n+    DeletedMessage(\"W1633\", \"round-builtin\"),\n+    DeletedMessage(\"W1634\", \"intern-builtin\"),\n+    DeletedMessage(\"W1635\", \"unichr-builtin\"),\n+    DeletedMessage(\n+        \"W1636\", \"map-builtin-not-iterating\", [(\"W1631\", \"implicit-map-evaluation\")]\n+    ),\n+    DeletedMessage(\"W1637\", \"zip-builtin-not-iterating\"),\n+    DeletedMessage(\"W1638\", \"range-builtin-not-iterating\"),\n+    DeletedMessage(\"W1639\", \"filter-builtin-not-iterating\"),\n+    DeletedMessage(\"W1640\", \"using-cmp-argument\"),\n+    DeletedMessage(\"W1641\", \"eq-without-hash\"),\n+    DeletedMessage(\"W1642\", \"div-method\"),\n+    DeletedMessage(\"W1643\", \"idiv-method\"),\n+    DeletedMessage(\"W1644\", \"rdiv-method\"),\n+    DeletedMessage(\"W1645\", \"exception-message-attribute\"),\n+    DeletedMessage(\"W1646\", \"invalid-str-codec\"),\n+    DeletedMessage(\"W1647\", \"sys-max-int\"),\n+    DeletedMessage(\"W1648\", \"bad-python3-import\"),\n+    DeletedMessage(\"W1649\", \"deprecated-string-function\"),\n+    DeletedMessage(\"W1650\", \"deprecated-str-translate-call\"),\n+    DeletedMessage(\"W1651\", \"deprecated-itertools-function\"),\n+    DeletedMessage(\"W1652\", \"deprecated-types-field\"),\n+    DeletedMessage(\"W1653\", \"next-method-defined\"),\n+    DeletedMessage(\"W1654\", \"dict-items-not-iterating\"),\n+    DeletedMessage(\"W1655\", \"dict-keys-not-iterating\"),\n+    DeletedMessage(\"W1656\", \"dict-values-not-iterating\"),\n+    DeletedMessage(\"W1657\", \"deprecated-operator-function\"),\n+    DeletedMessage(\"W1658\", \"deprecated-urllib-function\"),\n+    DeletedMessage(\"W1659\", \"xreadlines-attribute\"),\n+    DeletedMessage(\"W1660\", \"deprecated-sys-function\"),\n+    DeletedMessage(\"W1661\", \"exception-escape\"),\n+    DeletedMessage(\"W1662\", \"comprehension-escape\"),\n+    # https://github.com/PyCQA/pylint/pull/3578\n+    DeletedMessage(\"W0312\", \"mixed-indentation\"),\n+    # https://github.com/PyCQA/pylint/pull/3577\n+    DeletedMessage(\n+        \"C0326\",\n+        \"bad-whitespace\",\n+        [\n+            (\"C0323\", \"no-space-after-operator\"),\n+            (\"C0324\", \"no-space-after-comma\"),\n+            (\"C0322\", \"no-space-before-operator\"),\n+        ],\n+    ),\n+    # https://github.com/PyCQA/pylint/pull/3571\n+    DeletedMessage(\"C0330\", \"bad-continuation\"),\n+]\ndiff --git a/script/get_unused_message_id_category.py b/script/get_unused_message_id_category.py\n--- a/script/get_unused_message_id_category.py\n+++ b/script/get_unused_message_id_category.py\n@@ -5,6 +5,7 @@\n from typing import List\n \n from pylint.checkers import initialize as initialize_checkers\n+from pylint.constants import DELETED_MSGID_PREFIXES\n from pylint.extensions import initialize as initialize_extensions\n from pylint.lint.pylinter import PyLinter\n \n@@ -18,6 +19,8 @@ def register_all_checkers_and_plugins(linter: \"PyLinter\") -> None:\n \n def get_next_code_category(message_ids: List[str]) -> int:\n     categories = sorted({int(i[:2]) for i in message_ids})\n+    # We add the prefixes for deleted checkers\n+    categories += DELETED_MSGID_PREFIXES\n     for i in categories:\n         if i + 1 not in categories:\n             return i + 1\n",
  "test_patch": "diff --git a/tests/message/test_no_removed_msgid_or_symbol_used.py b/tests/message/test_no_removed_msgid_or_symbol_used.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/message/test_no_removed_msgid_or_symbol_used.py\n@@ -0,0 +1,17 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n+\n+from pylint.constants import DELETED_MESSAGES\n+from pylint.lint import PyLinter\n+\n+\n+def test_no_removed_msgid_or_symbol_used(linter: PyLinter) -> None:\n+    \"\"\"Tests that we're not using deleted msgid or symbol.\n+\n+    This could cause occasional bugs, but more importantly confusion and inconsistencies\n+    when searching for old msgids online. See https://github.com/PyCQA/pylint/issues/5729\n+    \"\"\"\n+    for msgid, symbol, old_names in DELETED_MESSAGES:\n+        linter.msgs_store.message_id_store.register_message_definition(\n+            msgid, symbol, old_names\n+        )\n",
  "problem_statement": "Pylint needs to forbid to re-use the msgid or symbol of old deleted msgid/symbol\n### Bug description\r\n\r\nRight now it's possible to reuse old msgid that were removed, for example, everything from the python 3 checker (the problem was detected with ``using-f-string-in-unsupported-version`` vs ``apply-builtin``), or mixed-indentation, bad-whitespace, bad-continuation... maybe other that I don't remember that we deleted.\r\n\r\nWe have a mechanism in place for renamed message with old_name, but nothing for removed message.\r\n\r\nRelated to #5723 and https://github.com/PyCQA/pylint/issues/5607\r\n\r\nThis is going to cause occasional bug, but more than that confusion and inconsistencies when searching for the msgid online.\r\n\r\n### Expected behavior\r\n\r\nImpossible to use an old message id or symbol.\r\n\n",
  "hints_text": "I would suggest to see if we can find a way to do this in the form of a `test`. Registering a dict of `old_names` during runtime unnecessarily impacts performance. We could do something similar to how I recently added a check for non overlapping symbol prefixes.\n> Registering a dict of old_names during runtime unnecessarily impacts performance. \r\n\r\nI completely agree, I think we should probably generate an efficient and pre-checked message store that's why I think it's related to #5607. See https://github.com/PyCQA/flake8/pull/1545 for what I have in mind: There's code generation with a check that it's up to date (I don't expect 10% better performance though 😄 ).",
  "created_at": "2022-02-25T21:03:32Z",
  "version": "2.13",
  "FAIL_TO_PASS": "[\"tests/message/test_no_removed_msgid_or_symbol_used.py::test_no_removed_msgid_or_symbol_used\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "3b2fbaec045697d53bdd4435e59dbfc2b286df4b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.911456",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}