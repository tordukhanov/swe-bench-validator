{
  "repo": "django/django",
  "instance_id": "django__django-11115",
  "base_commit": "981dd6dd71ea80e5149c2eff564622e96c12b5be",
  "patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -1,3 +1,4 @@\n+import re\n from functools import update_wrapper\n from weakref import WeakSet\n \n@@ -106,7 +107,14 @@ def register(self, model_or_iterable, admin_class=None, **options):\n                 )\n \n             if model in self._registry:\n-                raise AlreadyRegistered('The model %s is already registered' % model.__name__)\n+                registered_admin = str(self._registry[model])\n+                msg = 'The model %s is already registered ' % model.__name__\n+                if registered_admin.endswith('.ModelAdmin'):\n+                    # Most likely registered without a ModelAdmin subclass.\n+                    msg += 'in app %r.' % re.sub(r'\\.ModelAdmin$', '', registered_admin)\n+                else:\n+                    msg += 'with %r.' % registered_admin\n+                raise AlreadyRegistered(msg)\n \n             # Ignore the registration if the model has been\n             # swapped out.\n",
  "test_patch": "diff --git a/tests/admin_registration/tests.py b/tests/admin_registration/tests.py\n--- a/tests/admin_registration/tests.py\n+++ b/tests/admin_registration/tests.py\n@@ -30,10 +30,19 @@ def test_registration_with_model_admin(self):\n \n     def test_prevent_double_registration(self):\n         self.site.register(Person)\n-        msg = 'The model Person is already registered'\n+        msg = \"The model Person is already registered in app 'admin_registration'.\"\n         with self.assertRaisesMessage(admin.sites.AlreadyRegistered, msg):\n             self.site.register(Person)\n \n+    def test_prevent_double_registration_for_custom_admin(self):\n+        class PersonAdmin(admin.ModelAdmin):\n+            pass\n+\n+        self.site.register(Person, PersonAdmin)\n+        msg = \"The model Person is already registered with 'admin_registration.PersonAdmin'.\"\n+        with self.assertRaisesMessage(admin.sites.AlreadyRegistered, msg):\n+            self.site.register(Person, PersonAdmin)\n+\n     def test_registration_with_star_star_options(self):\n         self.site.register(Person, search_fields=['name'])\n         self.assertEqual(self.site._registry[Person].search_fields, ['name'])\n",
  "problem_statement": "Make it easier to track down the offending models for AlreadyRegistered exceptions\nDescription\n\t\nI've just updated 20+ packages locally in a project's requirements file, one of which has caused:\n[2016-10-18 15:00:18,667] ERROR [django.request:256] Internal Server Error: /browserid/csrf/\nTraceback (most recent call last):\n File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 223, in get_response\n\tresponse = middleware_method(request, response)\n File \"/home/vagrant/venv/local/lib/python2.7/site-packages/debug_toolbar/middleware.py\", line 129, in process_response\n\tpanel.generate_stats(request, response)\n File \"/home/vagrant/venv/local/lib/python2.7/site-packages/debug_toolbar/panels/request.py\", line 41, in generate_stats\n\tmatch = resolve(request.path)\n File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/core/urlresolvers.py\", line 521, in resolve\n\treturn get_resolver(urlconf).resolve(path)\n File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/core/urlresolvers.py\", line 365, in resolve\n\tfor pattern in self.url_patterns:\n File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/core/urlresolvers.py\", line 401, in url_patterns\n\tpatterns = getattr(self.urlconf_module, \"urlpatterns\", self.urlconf_module)\n File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/core/urlresolvers.py\", line 395, in urlconf_module\n\tself._urlconf_module = import_module(self.urlconf_name)\n File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\n\t__import__(name)\n File \"/home/vagrant/treeherder/treeherder/config/urls.py\", line 12, in <module>\n\tbrowserid_admin.copy_registry(admin.site)\n File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django_browserid/admin.py\", line 39, in copy_registry\n\tself.register(model, modeladmin.__class__)\n File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/contrib/admin/sites.py\", line 90, in register\n\traise AlreadyRegistered('The model %s is already registered' % model.__name__)\nAlreadyRegistered: The model Site is already registered\nThis model isn't defined in the project's own models so in this particular case it must be django-browserid now clashing with one of the packages that was updated.\nRather than having to bisect, it would be much more helpful if this exception gave more details about the already-registered model, so I know which package/app is clashing with the later app's attempts to re-register it.\n",
  "hints_text": "It might be a good idea to add the model's __module__ field in front of the model name. Suppose for example I defined the model UserModel in app1.models. This would turn the resulting exception's message to AlreadyRegistered: The model app1.models.Site is already registered. Does this sound like a good addition?\nI'd think that providing the ModelAdmin label would be useful - the model is always going to be the one you're trying to register the \"current\" ModelAdmin for, so showing it's module or path is only going to be truly useful with multiple models of the same name? Perhaps something like: AlreadyRegistered: Cannot use myapp.admin.SecondModelAdmin for myotherapp.MyModel, because myotherapp.admin.MyModelAdmin is already registered Wording isn't perfect (for one thing, all of them say \"AlreadyRegistered: ... already registered\"), but you probably get the idea about surfacing as much information as possible. The previously registered ModelAdmin would have to be extracted from the _registry to get it's label, but that ought to be simple enough. I don't know whether shortening the model to applabel.modelname is better or worse than including it's actual module -- models are routinely referred to that way everywhere else, but given a ModelAdmin doesn't really have an applabel, that would have to show the full class name/module, so it might be inconsistent and confusing if the Model were shortened.\nI made a pull request for this ticket here: ​https://github.com/django/django/pull/7423\nI've gone back to reproduce the original case in the ticket description, using: b3740a2fdb80bf10276128cc51a77a7b107ea606 of ​https://github.com/mozilla/treeherder A vagrant up followed by pip install -U django-rest-swagger==2.0.5 a ./manage.py runserver and making a GET request to /browserid/csrf/ I'm not sure if this appeared in the logs previously, but higher up in them I now see: ImportError: No module named urls ...from the include('rest_framework_swagger.urls') in: ​https://github.com/mozilla/treeherder/blob/b3740a2fdb80bf10276128cc51a77a7b107ea606/treeherder/config/urls.py#L19 Commenting out that line prevents the AlreadyRegistered exception (django-rest-swagger 2.x changed the method of registering URLs). I'm guessing this was some bad interaction between import order and django_browserid's copy_registry(): ​https://github.com/mozilla/django-browserid/blob/v2.0.1/django_browserid/admin.py#L38-L39 If I try the proposed PR (ie using model._meta.label) under this testcase, I get: AttributeError: 'Options' object has no attribute 'label' So I'm not 100% sure how best to improve the error message in this presumably rather rare edge-case, so perhaps not worth fixing this. (Though in the more common case discussed by others above, an improved error message may still be helpful?)",
  "created_at": "2019-03-23T17:14:05Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_prevent_double_registration (admin_registration.tests.TestRegistration)\", \"test_prevent_double_registration_for_custom_admin (admin_registration.tests.TestRegistration)\"]",
  "PASS_TO_PASS": "[\"test_abstract_model (admin_registration.tests.TestRegistration)\", \"test_bare_registration (admin_registration.tests.TestRegistration)\", \"Checks for registered models should return true.\", \"Checks for unregistered models should return false.\", \"test_iterable_registration (admin_registration.tests.TestRegistration)\", \"test_registration_with_model_admin (admin_registration.tests.TestRegistration)\", \"test_registration_with_star_star_options (admin_registration.tests.TestRegistration)\", \"test_star_star_overrides (admin_registration.tests.TestRegistration)\", \"test_basic_registration (admin_registration.tests.TestRegistrationDecorator)\", \"test_custom_site_not_an_admin_site (admin_registration.tests.TestRegistrationDecorator)\", \"test_custom_site_registration (admin_registration.tests.TestRegistrationDecorator)\", \"test_empty_models_list_registration_fails (admin_registration.tests.TestRegistrationDecorator)\", \"test_multiple_registration (admin_registration.tests.TestRegistrationDecorator)\", \"test_wrapped_class_not_a_model_admin (admin_registration.tests.TestRegistrationDecorator)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.560754",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}