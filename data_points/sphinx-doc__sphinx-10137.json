{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10137",
  "base_commit": "3d25662550aba00d6e2e43d3ff76dce958079368",
  "patch": "diff --git a/sphinx/ext/extlinks.py b/sphinx/ext/extlinks.py\n--- a/sphinx/ext/extlinks.py\n+++ b/sphinx/ext/extlinks.py\n@@ -72,7 +72,11 @@ def check_uri(self, refnode: nodes.reference) -> None:\n                 uri_pattern = re.compile(re.escape(base_uri).replace('%s', '(?P<value>.+)'))\n \n             match = uri_pattern.match(uri)\n-            if match and match.groupdict().get('value'):\n+            if (\n+                match and\n+                match.groupdict().get('value') and\n+                '/' not in match.groupdict()['value']\n+            ):\n                 # build a replacement suggestion\n                 msg = __('hardcoded link %r could be replaced by an extlink '\n                          '(try using %r instead)')\n",
  "test_patch": "diff --git a/tests/roots/test-ext-extlinks-hardcoded-urls-multiple-replacements/index.rst b/tests/roots/test-ext-extlinks-hardcoded-urls-multiple-replacements/index.rst\n--- a/tests/roots/test-ext-extlinks-hardcoded-urls-multiple-replacements/index.rst\n+++ b/tests/roots/test-ext-extlinks-hardcoded-urls-multiple-replacements/index.rst\n@@ -17,6 +17,8 @@ https://github.com/octocat\n \n `replaceable link`_\n \n+`non replaceable link <https://github.com/sphinx-doc/sphinx/pulls>`_\n+\n .. hyperlinks\n \n .. _replaceable link: https://github.com/octocat\ndiff --git a/tests/test_ext_extlinks.py b/tests/test_ext_extlinks.py\n--- a/tests/test_ext_extlinks.py\n+++ b/tests/test_ext_extlinks.py\n@@ -28,6 +28,7 @@ def test_all_replacements_suggested_if_multiple_replacements_possible(app, warni\n     app.build()\n     warning_output = warning.getvalue()\n     # there should be six warnings for replaceable URLs, three pairs per link\n+    assert warning_output.count(\"WARNING: hardcoded link\") == 6\n     message = (\n         \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' \"\n         \"could be replaced by an extlink (try using '%s' instead)\"\n",
  "problem_statement": "Allow to bail out extlink replacement suggestion\nFeature added via https://github.com/sphinx-doc/sphinx/pull/9800. Consider the following ext link:\r\n```\r\n# conf.py\r\nextlinks = {\r\n    \"user\": (\"https://github.com/%s\", \"@\"),\r\n}\r\n```\r\nand the following text:\r\n```\r\nAll pull requests and merges to the ``main`` branch are tested using `GitHub Actions <https://github.com/features/actions>`_ .\r\n````\r\n\r\n```\r\nhardcoded link 'https://github.com/features/actions' could be replaced by an extlink (try using ':user:`features/actions`' instead)\r\n```\r\n\r\nCan we somehow bailout out the check here, or perhaps the suggestion should only apply if there's no `/` in the extlink, @tk0miya what do you think? cc @hoefling\r\n\n",
  "hints_text": "This affected me too on other project and what I find it quite problematic for two reasons:\r\n* it seems that this feature does not work on macos, I get this warning only on linux --- weird\r\n* i do not see any option to silence it and because I use strict mode, it broke the CI\r\n* people may want to avoid using sphinx specific constructs in order to keep the file editable and rendable by more tools\r\n\r\nThe only workaround that I see now is to pin-down sphinx to `<4.4.0`.\nI agree it's needed to control the check feature (#10113 is a related story). I'm not sure it's really needed to control the check by file or individual URL. So I'd like to add an option to enable/disable the checks for the whole of the project.\n> I'm not sure it's really needed to control the check by file or individual URL.\r\n\r\nI for one like this feature for all my sphinx only files, but then there's an index file used by pypi.org where a file-level exclude list would be helpful. The individual URL disable would be there to bypass bugs of detection without needing to turn off the feature entirely.\n>it seems that this feature does not work on macos, I get this warning only on linux --- weird\r\n\r\nIMO, this feature is not related to the OS. So I'm not sure why it does not work on macOS. How about call `make clean` before building?\r\n\r\n>people may want to avoid using sphinx specific constructs in order to keep the file editable and rendable by more tools\r\n\r\nUnderstandable. The PyPI's case is one of them.\r\n\n>The individual URL disable would be there to bypass bugs of detection without needing to turn off the feature entirely.\r\n\r\nPlease let me know what case do you want to disable the check? I can understand the PyPI's case. But another one is not yet.\n> Please let me know what case do you want to disable the check? I can understand the PyPI's case. But another one is not yet.\r\n\r\nSee my first post here https://github.com/sphinx-doc/sphinx/issues/10112#issue-1105628804 with the github actions link being suggested as a user link.\nI'm actually fine with reverting #9800 completely. While issuing the warnings actually makes sense for every hardcoded link that can be replaced with `intersphinx` (as suggested in #9626), it's just not worth it with `extlinks` since it now forces to use the roles even for unrelated URLs. In the example listed by @gaborbernat, it would mean\r\n```py\r\nextlinks = {\r\n    \"user\": (\"https://github.com/%s\", \"@\"),\r\n    \"feature\": (\"https://github.com/%s\", \"feat\"),\r\n}\r\n```\r\nand rewriting the link to ``` :feat:`GitHub Actions <actions>` ```, and it's just too much fuzz for a single link.\nHence why I was proposing that the suggestion should only apply if there's no `/` in the part represented by `%s`. I think that'd fix 99% of the cases here.\nI think extlinks can accept shortcuts contains `/`. For example, ```:repo:`sphinx-doc/sphinx` ``` should be allowed. So -1 for the rule.\nBe that so, but I don't think your commit solves this issue. Adding a global disable flag is not what this issue is about. I purposefully formulated it to keep the feature but allow disabling it where the check makes invalid suggestions :thinking: \nIndeed. My PR and your trouble are different topics. So the title of the PR is not good.\n> I think extlinks can accept shortcuts contains `/`. For example, `` :repo:`sphinx-doc/sphinx` `` should be allowed. So -1 for the rule.\r\n\r\nI'd also like to keep the possibility of using `/` in the replacement string.  Example: `` :pull:`1234/files` `` for directly linking to a PR's diff view.  Noticed this while working on https://github.com/syncthing/docs.  Glad to see activity on a quick fix in #10126.\n> I'd also like to keep the possibility of using `/` in the replacement string. Example: `` :pull:`1234/files` `` for directly linking to a PR's diff view.\r\n\r\nBut that's not what I said. I've said for full links where we'd suggest someone use an extlink only make the suggestion if the would-be replacement part `%s` would not contain a `/`. E.g. for `magic.com/a/b` with `extlink= {\"m\": \"magic.com/%s\" }` don't suggest because `%s` would be `a/b`, but do warn for `magic.com/c`. If the users already typed out an extlink (the situation you're describing) we'll not warn and we should not impose any restrictions.\nOkay sorry I misunderstood. You're only concerned about which cases are considered for the warning, not what actually works in the extlink roles. My bad, sorry for the noise. ",
  "created_at": "2022-01-26T20:55:51Z",
  "version": "5.3",
  "FAIL_TO_PASS": "[\"tests/test_ext_extlinks.py::test_all_replacements_suggested_if_multiple_replacements_possible\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_extlinks.py::test_extlinks_detect_candidates\", \"tests/test_ext_extlinks.py::test_replaceable_uris_emit_extlinks_warnings\"]",
  "environment_setup_commit": "0fd45397c1d5a252dca4d2be793e5a1bf189a74a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.030764",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}