{
  "repo": "django/django",
  "instance_id": "django__django-13066",
  "base_commit": "78c811334c9e5477b86fd113fa2c4a261e167d15",
  "patch": "diff --git a/django/contrib/auth/hashers.py b/django/contrib/auth/hashers.py\n--- a/django/contrib/auth/hashers.py\n+++ b/django/contrib/auth/hashers.py\n@@ -302,19 +302,20 @@ class Argon2PasswordHasher(BasePasswordHasher):\n     library = 'argon2'\n \n     time_cost = 2\n-    memory_cost = 512\n-    parallelism = 2\n+    memory_cost = 102400\n+    parallelism = 8\n \n     def encode(self, password, salt):\n         argon2 = self._load_library()\n+        params = self.params()\n         data = argon2.low_level.hash_secret(\n             password.encode(),\n             salt.encode(),\n-            time_cost=self.time_cost,\n-            memory_cost=self.memory_cost,\n-            parallelism=self.parallelism,\n-            hash_len=argon2.DEFAULT_HASH_LENGTH,\n-            type=argon2.low_level.Type.I,\n+            time_cost=params.time_cost,\n+            memory_cost=params.memory_cost,\n+            parallelism=params.parallelism,\n+            hash_len=params.hash_len,\n+            type=params.type,\n         )\n         return self.algorithm + data.decode('ascii')\n \n@@ -323,11 +324,7 @@ def verify(self, password, encoded):\n         algorithm, rest = encoded.split('$', 1)\n         assert algorithm == self.algorithm\n         try:\n-            return argon2.low_level.verify_secret(\n-                ('$' + rest).encode('ascii'),\n-                password.encode(),\n-                type=argon2.low_level.Type.I,\n-            )\n+            return argon2.PasswordHasher().verify('$' + rest, password)\n         except argon2.exceptions.VerificationError:\n             return False\n \n@@ -347,22 +344,34 @@ def safe_summary(self, encoded):\n         }\n \n     def must_update(self, encoded):\n-        (algorithm, variety, version, time_cost, memory_cost, parallelism,\n-            salt, data) = self._decode(encoded)\n+        algorithm, rest = encoded.split('$', 1)\n         assert algorithm == self.algorithm\n         argon2 = self._load_library()\n-        return (\n-            argon2.low_level.ARGON2_VERSION != version or\n-            self.time_cost != time_cost or\n-            self.memory_cost != memory_cost or\n-            self.parallelism != parallelism\n-        )\n+        current_params = argon2.extract_parameters('$' + rest)\n+        new_params = self.params()\n+        # Set salt_len to the salt_len of the current parameters because salt\n+        # is explicitly passed to argon2.\n+        new_params.salt_len = current_params.salt_len\n+        return current_params != new_params\n \n     def harden_runtime(self, password, encoded):\n         # The runtime for Argon2 is too complicated to implement a sensible\n         # hardening algorithm.\n         pass\n \n+    def params(self):\n+        argon2 = self._load_library()\n+        # salt_len is a noop, because we provide our own salt.\n+        return argon2.Parameters(\n+            type=argon2.low_level.Type.ID,\n+            version=argon2.low_level.ARGON2_VERSION,\n+            salt_len=argon2.DEFAULT_RANDOM_SALT_LENGTH,\n+            hash_len=argon2.DEFAULT_HASH_LENGTH,\n+            time_cost=self.time_cost,\n+            memory_cost=self.memory_cost,\n+            parallelism=self.parallelism,\n+        )\n+\n     def _decode(self, encoded):\n         \"\"\"\n         Split an encoded hash and return: (\n@@ -370,24 +379,13 @@ def _decode(self, encoded):\n             parallelism, salt, data,\n         ).\n         \"\"\"\n-        bits = encoded.split('$')\n-        if len(bits) == 5:\n-            # Argon2 < 1.3\n-            algorithm, variety, raw_params, salt, data = bits\n-            version = 0x10\n-        else:\n-            assert len(bits) == 6\n-            algorithm, variety, raw_version, raw_params, salt, data = bits\n-            assert raw_version.startswith('v=')\n-            version = int(raw_version[len('v='):])\n-        params = dict(bit.split('=', 1) for bit in raw_params.split(','))\n-        assert len(params) == 3 and all(x in params for x in ('t', 'm', 'p'))\n-        time_cost = int(params['t'])\n-        memory_cost = int(params['m'])\n-        parallelism = int(params['p'])\n+        argon2 = self._load_library()\n+        algorithm, rest = encoded.split('$', 1)\n+        params = argon2.extract_parameters('$' + rest)\n+        variety, *_, salt, data = rest.split('$')\n         return (\n-            algorithm, variety, version, time_cost, memory_cost, parallelism,\n-            salt, data,\n+            algorithm, variety, params.version, params.time_cost,\n+            params.memory_cost, params.parallelism, salt, data,\n         )\n \n \n",
  "test_patch": "diff --git a/tests/auth_tests/test_hashers.py b/tests/auth_tests/test_hashers.py\n--- a/tests/auth_tests/test_hashers.py\n+++ b/tests/auth_tests/test_hashers.py\n@@ -497,13 +497,13 @@ class TestUtilsHashPassArgon2(SimpleTestCase):\n     def test_argon2(self):\n         encoded = make_password('lètmein', hasher='argon2')\n         self.assertTrue(is_password_usable(encoded))\n-        self.assertTrue(encoded.startswith('argon2$'))\n+        self.assertTrue(encoded.startswith('argon2$argon2id$'))\n         self.assertTrue(check_password('lètmein', encoded))\n         self.assertFalse(check_password('lètmeinz', encoded))\n         self.assertEqual(identify_hasher(encoded).algorithm, 'argon2')\n         # Blank passwords\n         blank_encoded = make_password('', hasher='argon2')\n-        self.assertTrue(blank_encoded.startswith('argon2$'))\n+        self.assertTrue(blank_encoded.startswith('argon2$argon2id$'))\n         self.assertTrue(is_password_usable(blank_encoded))\n         self.assertTrue(check_password('', blank_encoded))\n         self.assertFalse(check_password(' ', blank_encoded))\n@@ -514,18 +514,24 @@ def test_argon2(self):\n         )\n         self.assertTrue(check_password('secret', encoded))\n         self.assertFalse(check_password('wrong', encoded))\n+        # Old hashes with version attribute.\n+        encoded = (\n+            'argon2$argon2i$v=19$m=8,t=1,p=1$c2FsdHNhbHQ$YC9+jJCrQhs5R6db7LlN8Q'\n+        )\n+        self.assertIs(check_password('secret', encoded), True)\n+        self.assertIs(check_password('wrong', encoded), False)\n \n     def test_argon2_upgrade(self):\n         self._test_argon2_upgrade('time_cost', 'time cost', 1)\n-        self._test_argon2_upgrade('memory_cost', 'memory cost', 16)\n+        self._test_argon2_upgrade('memory_cost', 'memory cost', 64)\n         self._test_argon2_upgrade('parallelism', 'parallelism', 1)\n \n     def test_argon2_version_upgrade(self):\n         hasher = get_hasher('argon2')\n         state = {'upgraded': False}\n         encoded = (\n-            'argon2$argon2i$m=8,t=1,p=1$c29tZXNhbHQ$gwQOXSNhxiOxPOA0+PY10P9QFO'\n-            '4NAYysnqRt1GSQLE55m+2GYDt9FEjPMHhP2Cuf0nOEXXMocVrsJAtNSsKyfg'\n+            'argon2$argon2id$v=19$m=102400,t=2,p=8$Y041dExhNkljRUUy$TMa6A8fPJh'\n+            'CAUXRhJXCXdw'\n         )\n \n         def setter(password):\n",
  "problem_statement": "Argon2id should be supported and become the default variety for Argon2PasswordHasher\nDescription\n\t \n\t\t(last modified by Si Feng)\n\t \nThere were three important changes in the upstream ​argon2-cffi library since Django 1.10 was released with Argon2 support:\n(Nov 10, 2016) argon2id support was added: ​https://github.com/hynek/argon2_cffi/commit/00120a9880a74a5aedb13ee343bf6ccd507bb2d8#diff-1efe26b4b54ac28232eaecb9107ee6ed\n(Apr 9, 2018) argon2id became its default type: ​https://github.com/hynek/argon2_cffi/pull/34/files\n(Aug 18, 2018) its hasher's default memory cost changed from 512 to 102400, and parallelism from 2 to 8, per ​RFC draft recommendations: ​https://github.com/hynek/argon2_cffi/commit/1ec39f8dc7a140b68099549b799301113576bde2\nWhen Django 1.10 was released, only argon2d and argon2i were available, hence the hard-coded argon2i variety in Argon2PasswordHasher.\nThough Django does not use its hasher, the memory_cost = 512 and parallelism = 2 in Argon2PasswordHasher were simply copied from argon2-cffi's hasher back then.\nNow we should sync Django with upstream updates.\n",
  "hints_text": "Great. Thanks. ​PR\n​New PR",
  "created_at": "2020-06-15T13:27:18Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_argon2 (auth_tests.test_hashers.TestUtilsHashPassArgon2)\", \"test_argon2_version_upgrade (auth_tests.test_hashers.TestUtilsHashPassArgon2)\"]",
  "PASS_TO_PASS": "[\"test_attributes (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_encode (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_harden_runtime (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_load_library_importerror (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_load_library_no_algorithm (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_must_update (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_safe_summary (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_verify (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_argon2_upgrade (auth_tests.test_hashers.TestUtilsHashPassArgon2)\", \"test_bad_algorithm (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_harden_runtime (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_sha256 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bytes (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_check_password_calls_harden_runtime (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_crypt (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_invalid_password (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_is_password_usable (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_low_level_pbkdf2 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_low_level_pbkdf2_sha1 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_md5 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_no_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_no_upgrade_on_incorrect_pass (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2_harden_runtime (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2_upgrade_new_hasher (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_sha1 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_simple (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unsalted_md5 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unsalted_sha1 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unspecified_password (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unusable (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.642258",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}