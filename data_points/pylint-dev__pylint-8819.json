{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-8819",
  "base_commit": "dc1f5f6cbb1e649feab8ae53ed8be88845afeaf1",
  "patch": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -13,7 +13,10 @@\n \n from pylint import reporters\n from pylint.config.config_file_parser import _ConfigurationFileParser\n-from pylint.config.exceptions import _UnrecognizedOptionError\n+from pylint.config.exceptions import (\n+    ArgumentPreprocessingError,\n+    _UnrecognizedOptionError,\n+)\n from pylint.utils import utils\n \n if TYPE_CHECKING:\n@@ -46,6 +49,9 @@ def _config_initialization(\n         print(ex, file=sys.stderr)\n         sys.exit(32)\n \n+    # Order --enable=all or --disable=all to come first.\n+    config_args = _order_all_first(config_args, joined=False)\n+\n     # Run init hook, if present, before loading plugins\n     if \"init-hook\" in config_data:\n         exec(utils._unquote(config_data[\"init-hook\"]))  # pylint: disable=exec-used\n@@ -73,6 +79,7 @@ def _config_initialization(\n \n     # Now we parse any options from the command line, so they can override\n     # the configuration file\n+    args_list = _order_all_first(args_list, joined=True)\n     parsed_args_list = linter._parse_command_line_configuration(args_list)\n \n     # Remove the positional arguments separator from the list of arguments if it exists\n@@ -147,3 +154,48 @@ def _config_initialization(\n             for arg in parsed_args_list\n         )\n     )\n+\n+\n+def _order_all_first(config_args: list[str], *, joined: bool) -> list[str]:\n+    \"\"\"Reorder config_args such that --enable=all or --disable=all comes first.\n+\n+    Raise if both are given.\n+\n+    If joined is True, expect args in the form '--enable=all,for-any-all'.\n+    If joined is False, expect args in the form '--enable', 'all,for-any-all'.\n+    \"\"\"\n+    indexes_to_prepend = []\n+    all_action = \"\"\n+\n+    for i, arg in enumerate(config_args):\n+        if joined and (arg.startswith(\"--enable=\") or arg.startswith(\"--disable=\")):\n+            value = arg.split(\"=\")[1]\n+        elif arg in {\"--enable\", \"--disable\"}:\n+            value = config_args[i + 1]\n+        else:\n+            continue\n+\n+        if \"all\" not in (msg.strip() for msg in value.split(\",\")):\n+            continue\n+\n+        arg = arg.split(\"=\")[0]\n+        if all_action and (arg != all_action):\n+            raise ArgumentPreprocessingError(\n+                \"--enable=all and --disable=all are incompatible.\"\n+            )\n+        all_action = arg\n+\n+        indexes_to_prepend.append(i)\n+        if not joined:\n+            indexes_to_prepend.append(i + 1)\n+\n+    returned_args = []\n+    for i in indexes_to_prepend:\n+        returned_args.append(config_args[i])\n+\n+    for i, arg in enumerate(config_args):\n+        if i in indexes_to_prepend:\n+            continue\n+        returned_args.append(arg)\n+\n+    return returned_args\n",
  "test_patch": "diff --git a/tests/config/functional/toml/toml_with_mutually_exclusive_disable_enable_all.toml b/tests/config/functional/toml/toml_with_mutually_exclusive_disable_enable_all.toml\nnew file mode 100644\n--- /dev/null\n+++ b/tests/config/functional/toml/toml_with_mutually_exclusive_disable_enable_all.toml\n@@ -0,0 +1,3 @@\n+[tool.pylint.\"messages control\"]\n+disable = \"all\"\n+enable = \"all\"\ndiff --git a/tests/config/functional/toml/toml_with_specific_disable_before_enable_all.toml b/tests/config/functional/toml/toml_with_specific_disable_before_enable_all.toml\nnew file mode 100644\n--- /dev/null\n+++ b/tests/config/functional/toml/toml_with_specific_disable_before_enable_all.toml\n@@ -0,0 +1,3 @@\n+[tool.pylint.\"messages control\"]\n+disable = \"fixme\"\n+enable = \"all\"\ndiff --git a/tests/config/functional/toml/toml_with_specific_enable_before_disable_all.toml b/tests/config/functional/toml/toml_with_specific_enable_before_disable_all.toml\nnew file mode 100644\n--- /dev/null\n+++ b/tests/config/functional/toml/toml_with_specific_enable_before_disable_all.toml\n@@ -0,0 +1,3 @@\n+[tool.pylint.\"messages control\"]\n+enable = \"fixme\"\n+disable = \"all\"\ndiff --git a/tests/config/test_config.py b/tests/config/test_config.py\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -11,6 +11,7 @@\n import pytest\n from pytest import CaptureFixture\n \n+from pylint.config.exceptions import ArgumentPreprocessingError\n from pylint.interfaces import CONFIDENCE_LEVEL_NAMES\n from pylint.lint import Run as LintRun\n from pylint.testutils import create_files\n@@ -20,6 +21,7 @@\n HERE = Path(__file__).parent.absolute()\n REGRTEST_DATA_DIR = HERE / \"..\" / \"regrtest_data\"\n EMPTY_MODULE = REGRTEST_DATA_DIR / \"empty.py\"\n+FIXME_MODULE = REGRTEST_DATA_DIR / \"fixme.py\"\n \n \n def check_configuration_file_reader(\n@@ -175,3 +177,45 @@ def test_clear_cache_post_run() -> None:\n \n     assert not run_before_edit.linter.stats.by_msg\n     assert run_after_edit.linter.stats.by_msg\n+\n+\n+def test_enable_all_disable_all_mutually_exclusive() -> None:\n+    with pytest.raises(ArgumentPreprocessingError):\n+        runner = Run([\"--enable=all\", \"--disable=all\", str(EMPTY_MODULE)], exit=False)\n+\n+    runner = Run([\"--enable=all\", \"--enable=all\", str(EMPTY_MODULE)], exit=False)\n+    assert not runner.linter.stats.by_msg\n+\n+    with pytest.raises(ArgumentPreprocessingError):\n+        run_using_a_configuration_file(\n+            HERE\n+            / \"functional\"\n+            / \"toml\"\n+            / \"toml_with_mutually_exclusive_disable_enable_all.toml\",\n+        )\n+\n+\n+def test_disable_before_enable_all_takes_effect() -> None:\n+    runner = Run([\"--disable=fixme\", \"--enable=all\", str(FIXME_MODULE)], exit=False)\n+    assert not runner.linter.stats.by_msg\n+\n+    _, _, toml_runner = run_using_a_configuration_file(\n+        HERE\n+        / \"functional\"\n+        / \"toml\"\n+        / \"toml_with_specific_disable_before_enable_all.toml\",\n+    )\n+    assert not toml_runner.linter.is_message_enabled(\"fixme\")\n+\n+\n+def test_enable_before_disable_all_takes_effect() -> None:\n+    runner = Run([\"--enable=fixme\", \"--disable=all\", str(FIXME_MODULE)], exit=False)\n+    assert runner.linter.stats.by_msg\n+\n+    _, _, toml_runner = run_using_a_configuration_file(\n+        HERE\n+        / \"functional\"\n+        / \"toml\"\n+        / \"toml_with_specific_enable_before_disable_all.toml\",\n+    )\n+    assert toml_runner.linter.is_message_enabled(\"fixme\")\ndiff --git a/tests/config/test_functional_config_loading.py b/tests/config/test_functional_config_loading.py\n--- a/tests/config/test_functional_config_loading.py\n+++ b/tests/config/test_functional_config_loading.py\n@@ -43,6 +43,11 @@\n     str(path.relative_to(FUNCTIONAL_DIR))\n     for ext in ACCEPTED_CONFIGURATION_EXTENSIONS\n     for path in FUNCTIONAL_DIR.rglob(f\"*.{ext}\")\n+    if (str_path := str(path))\n+    # The enable/disable all tests are not practical with this framework.\n+    # They require manually listing ~400 messages, which will\n+    # require constant updates.\n+    and \"enable_all\" not in str_path and \"disable_all\" not in str_path\n ]\n \n \ndiff --git a/tests/regrtest_data/fixme.py b/tests/regrtest_data/fixme.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/regrtest_data/fixme.py\n@@ -0,0 +1 @@\n+# TODO: implement\ndiff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -266,7 +266,7 @@ def test_enable_all_works(self) -> None:\n         \"\"\"\n         )\n         self._test_output(\n-            [module, \"--disable=all\", \"--enable=all\", \"-rn\"], expected_output=expected\n+            [module, \"--disable=I\", \"--enable=all\", \"-rn\"], expected_output=expected\n         )\n \n     def test_wrong_import_position_when_others_disabled(self) -> None:\n",
  "problem_statement": "enable/disable options in rcfile should not depend on the order with which they are specified\nHello,\r\ni'm running `pylint 2.5.3 / astroid 2.4.2`; i kinda understand why\r\n\r\n`$ pylint --enable=all --disable=fixme`\r\n\r\nbehaves differently than\r\n\r\n`$ pylint --disable=fixme --enable=all`\r\n\r\n(where the first command enables everything and then disable `fixme`, while the second command the disable option is overwritten by `enable=all`) but i dont think it should be the same in the rcfile: the `disable` section is (by default) before the `enable` section, so if i want to have the same effect of command1 i need to swap the sections around.\r\n\r\non the cli i can specify multiple enable/disable options, but that's not allowed in the rcfile, so the \r\n current result is extremely counter-intuitive; and rcfile with\r\n\r\n```\r\ndisable=fixme\r\nenable=all\r\n```\r\n\r\nis clear what result the user wants: to enable all checks _except_ for some, and i shouldnt need to move config options around.\r\n\r\ncan you please get that fixed?\r\n\r\nThanks!\n",
  "hints_text": "+1 from my side. Same goes for the pyproject.toml file\nThis should be done during a configuration refactor, or it will be a small patch on something old and already very patched using optparse. \nI tried to figure out where exactly this order sensitive disable/enable comes from since it affects CLI, init and toml config. Can you point me to the right place? I can try to open a PR\nEverything happens in ``Pylinter`` and I think the relevant class with the behavior for options parsing is ``config.OptionsManagerMixIn,`` (without absolute certainty). I would be interested in what you think of the current configuration and what you would do differentely if you take the time to understand how it works :)\nThanks for the hint. As far as I can say, the behavior comes from this code:\r\nhttps://github.com/PyCQA/pylint/blob/a12242b2f44d5244bd1cacc6bc78df8c9c8e4296/pylint/config/option_manager_mixin.py#L309-L318\r\n\r\n`parser.items(section)` is a list (so it's sorted), so the definition order is important. To be honest I'm not sure how to fix this since a very general loop is used\nI can't think of a solution that will keep this for loop in its current state either.\nAre there any plans to refactor the configuration module to use argparse and to modernize it a little bit?\r\nElse, I'm not quite sure how to proceed. I guess this would be a breaking change, because\r\n\r\n* `disable=all` ->`enable=bar` = `bar` \r\n* `enable=bar` -> `disable=all` = `all`\r\n\r\nBut the other way round, we also miss scenarios:\r\n* `enable=all` ->`disable=bar` = `all except bar` \r\n* `disable=bar` -> `enable=all` = `all`.\r\n\r\nSo both orders have up and downsides. A possible statement could be: \"It's not a bug, it's a feature 😄 \"\r\n\r\nElse maybe something like this (quite hacky and we need to decide on an order\r\n```python\r\n[...]\r\norder_sensitive_config = {}\r\nif option in [\"enable\", \"disable\"]:\r\n  order_sensitive_config[option] = value\r\n  continue\r\ntry: \r\n  self.global_set_option(option, value) \r\nexcept (KeyError, optparse.OptionError): \r\n   continue\r\n[...]\r\nif \"enable\" in order_sensitive_config:\r\n  self.global_set_option(\"enable\", order_sensitive_config[\"enable\"]) \r\nif \"disable\" in order_sensitive_config:\r\n  self.global_set_option(\"disable\", order_sensitive_config[\"disable\"]) \r\n\nI think the logical order is to always take ``all`` into account first, then the other one to enable or disable some of the message. Ie:\r\n\r\n    disable=all ->enable=bar = only bar\r\n    enable=bar -> disable=all = only bar\r\n    enable=all ->disable=bar = all except bar\r\n    disable=bar -> enable=all =all except bar\r\n\r\nMy reasoning is that you would not specify disable or enable when you use ``all`` for the other without wanting to modify the behavior of ``all``. Said another way, if enable=bar comes first it's effect will be completely canceled by disable=all, whereas the contrary is not true: all still has an effect on all other message than bar. So the user probably expect all to be taken into account first as they're not adding option for the sake of it.\r\n\r\nYou're right that it can be considered a breaking change, maybe we could move that to 3.0, or simply call that a bug fix, it depends on how \"intuitive\" this solution really is (maybe I've convinced myself but it will not be understood this way at all ?). Let me know what you think.\r\n\r\n> Are there any plans to refactor the configuration module to use argparse and to modernize it a little bit?\r\n\r\nThere are plans (https://github.com/PyCQA/pylint/projects/1) but this is not a priority for most contributors and as a maintainers most of our time consists of reviewing merge requests, triaging issues and implementing absolutely necessary changes like the new match pattern in python 3.10, so there's very little time for this kind of (very important) refactoring project.\r\n\r\n\r\n\r\n\r\n\nThanks a lot for this insights.\r\n\r\nI agree, it depends a lot how you look on this: It's either a breaking change or a bug fix. Since you asked what I would do: Personally, I would not use \"dynamic\" loops at all, but handle the options one by one. This leads obviously to more code, but options order dependencies and so in will disappear. But this is not possible w/o a refactoring.\r\n\r\nSo, what do you think about my approach above? It's not very nice, but I have o other idea. I like the idea to handle \"all\" special; this can be easily added.\nThank you. There's I think foor aspects to the refactor : \r\n- The loop is too generic. I agree with what you said.\r\n- optparse is very old and would benefit from an argparse revamp\r\n- Inheritance is used so everything is mixed up in Pylinter and even some checkers (composition and a class to handle the configuration, and the configuration only, would help imho)\r\n- There's call back code for some options which means the options parsing is all other the place and hard to understands\r\n\r\nIf you can refactor only this for loop without modifying the other aspect that's fine for me, but a preliminary refactor might help. In particular I think argparse design force each argument to be handled separately, and this for loop would simply disappear (?) as well as a lot of optparse code that you don't need to do anymore nowadays. I don't know about click or confuse but this would be another possibility.\r\n\nTo be honest, moving away from optparse to argparse/click (click is btw very nice) would be (as far as I can say) a very drastic change. I did only one small change so far in pylint, so I'm kind of afraid doing this change. As you said, there are many patches and callbacks making it hard to understand for beginners. In the end, the code is not even typed, which add just more complexity and hurdles.\r\n\r\nAny idea how we can move on from here?\r\n\r\nMaybe a complete drop of the old code with a fresh design could help?\n> Maybe a complete drop of the old code with a fresh design could help?\r\n\r\nYes, that would make a lot of sense especially for the transition to click or argparse. I think it's a lot easier to reproduce pylint's arg parsing from zero then replace the original code than to progressively refactor. It would be a breaking change though. I'm pretty sure that some strange bugs due to everything being done by hand with optparse are considered feature now. \nI spoke about confuse too, because it could help define a template yaml and have the argument to parse done automatically.\r\n\r\nhttps://confuse.readthedocs.io/en/latest/\r\n\r\n> Integration with command-line arguments via argparse or optparse from the standard library. Use argparse’s declarative API to allow command-line options to override configured defaults.\nI might miss a detail about confuse, but it seems not to support toml and ini out of the box, doesn't it?\r\nIn regards to a redesign, I'm not sure if I have enough time... sadly\nYes, we're handling a lot of possible file and format.  Maybe migrating to ``pyproject.toml`` only and providing a tool to convert old conf (setup.cfg, and pylintrc) and just using confuse would be easier than maintaining what we currently have. Probably not short term but this seems like something that could be done in the future. I understand that such a refactor is not acceptable when what you intended to do was simply fix a little bug in the order of parsing 😄 \nPinging @jacobtylerwalls as I'm not sure you're subscribed to this issue and I'd like some input from you as well.\r\n\r\nI have been thinking about this some more and I wonder if we should close this as `won't fix`. Although the current system is not that clearly documented (which we can/should do), it does work and is actually the most customisable. By using the order in which options are received it is also much clearer for the user what the \"final state\" will be.\r\nIf we obscure this by special casing `all` and parsing some disables before others this will only get worse.\r\n\r\n<s>Note that you can even use double `disable=` in `ini` and `toml` files, so you can have a `disable`, `enable` and then a `disable` again to get the \"final state\" just as you would like it to be,</s>\r\nI was wrong, this is not true.\nI think it's valuable and probably not too hard. It's not a great solution to have to move your rcfile choices around.\r\n\r\nProposal:\r\n- at any given \"layer\" of option providers, parse the \"all\"s first.\r\n- if a given layer has both enable all and disable all, either parse them in their order or raise an exception\r\n- that's it\r\n\r\nAll it \"breaks\" is the person who has `--disable=fixme --enable=all` in their config or rcfile and wants to get fixme messages nevertheless. Not a great thing to depend on, but it's going to exist out there. So should be a 3.0 thing.\n> * at any given \"layer\" of option providers, parse the \"all\"s first.\r\n\r\nThat would require pre-scanning all providers for the `enable` and `disable` options, pre-processing those and then removing them from the arguments that are processed normally by `argparse`. Obviously we could, but I just want to point out the specific layer of additional complexity.\nAn example of how the current behavior can be misleading is what happened in #8328 when we tried to document ``suppressed-message`` (the way a configuration file option / in file message control / CLI option, interact together is NOT intuitive).",
  "created_at": "2023-07-04T00:34:21Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/config/test_config.py::test_enable_all_disable_all_mutually_exclusive\", \"tests/config/test_config.py::test_disable_before_enable_all_takes_effect\", \"tests/config/test_config.py::test_enable_before_disable_all_takes_effect\"]",
  "PASS_TO_PASS": "[\"tests/config/test_config.py::test_can_read_toml_env_variable\", \"tests/config/test_config.py::test_unknown_message_id\", \"tests/config/test_config.py::test_unknown_option_name\", \"tests/config/test_config.py::test_unknown_short_option_name\", \"tests/config/test_config.py::test_unknown_confidence\", \"tests/config/test_config.py::test_empty_confidence\", \"tests/config/test_config.py::test_unknown_yes_no\", \"tests/config/test_config.py::test_unknown_py_version\", \"tests/config/test_config.py::test_regex_error\", \"tests/config/test_config.py::test_csv_regex_error\", \"tests/config/test_config.py::test_short_verbose\", \"tests/config/test_config.py::test_argument_separator\", \"tests/config/test_config.py::test_clear_cache_post_run\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/toml_with_enable.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/rich_types.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/toml_without_pylint.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/toml_with_unknown_option.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/toml_with_message_control.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_4580/top_level_disable.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_4580/correct_import_preferred_module.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_4580/rich_types.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_4580/valid_data_for_import.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_4580/valid_data_for_basic.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_4580/correct_basic_name_group.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_3181/toml_decode_error.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_3181/top_level_list_of_disable.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_3122/toml_with_missing_comma.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/unknown_msgid/enable_unknown_msgid.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[toml/issue_4746/loaded_plugin_does_not_exists.toml]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[ini/pylintrc_with_deleted_message.ini]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[ini/pylintrc_with_interpolation_error.ini]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[ini/pylintrc_with_missing_comma.ini]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[ini/pylintrc_with_message_control.ini]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[ini/pylintrc_with_quoted_init_hook.ini]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[ini/pylintrc_with_multi_line_init_hook.ini]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[tox/unrecognized_options/tox.ini]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[setup_cfg/setup_cfg_with_message_control.cfg]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[setup_cfg/issue_3630/not_setup.cfg]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[setup_cfg/issue_3630/setup.cfg]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[setup_cfg/do_not_read_other_tools_configuration/setup.cfg]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[setup_cfg/identical_name_in_flake8/setup.cfg]\", \"tests/config/test_functional_config_loading.py::test_functional_config_loading[setup_cfg/issue_4272/option_in_wrong_section.cfg]\", \"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_disable_all\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_type_annotation_names\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntax_error\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]\", \"tests/test_self.py::TestRunTC::test_one_module_fatal_error\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\", \"tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided\", \"tests/test_self.py::TestRunTC::test_regex_paths_csv_validator\", \"tests/test_self.py::TestRunTC::test_recursive\", \"tests/test_self.py::TestRunTC::test_recursive_globbing\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]\", \"tests/test_self.py::TestRunTC::test_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding\", \"tests/test_self.py::TestRunTC::test_encoding[good.py-]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]\", \"tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression\", \"tests/test_self.py::TestRunTC::test_output_no_header\", \"tests/test_self.py::TestRunTC::test_no_name_in_module\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name\", \"tests/test_self.py::TestCallbackOptions::test_generate_rcfile\", \"tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_generate_toml_config\", \"tests/test_self.py::TestCallbackOptions::test_generate_toml_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_errors_only\", \"tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable\", \"tests/test_self.py::TestCallbackOptions::test_verbose\", \"tests/test_self.py::TestCallbackOptions::test_enable_all_extensions\"]",
  "environment_setup_commit": "a0ce6e424e3a208f3aed1cbf6e16c40853bec3c0",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.919724",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}