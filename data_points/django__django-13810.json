{
  "repo": "django/django",
  "instance_id": "django__django-13810",
  "base_commit": "429d089d0a8fbd400e0c010708df4f0d16218970",
  "patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -51,11 +51,11 @@ def load_middleware(self, is_async=False):\n                 middleware_is_async = middleware_can_async\n             try:\n                 # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n+                adapted_handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n-                mw_instance = middleware(handler)\n+                mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):\n@@ -63,6 +63,8 @@ def load_middleware(self, is_async=False):\n                     else:\n                         logger.debug('MiddlewareNotUsed: %r', middleware_path)\n                 continue\n+            else:\n+                handler = adapted_handler\n \n             if mw_instance is None:\n                 raise ImproperlyConfigured(\n",
  "test_patch": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -181,6 +181,25 @@ def test_do_not_log_when_debug_is_false(self):\n             with self.assertLogs('django.request', 'DEBUG'):\n                 self.client.get('/middleware_exceptions/view/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware '\n+            'adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n \n @override_settings(\n     DEBUG=True,\n",
  "problem_statement": "MiddlewareNotUsed leaves undesired side effects when loading middleware in ASGI context\nDescription\n\t\nI experienced strange issues when working with ​ASGI , ​django-debug-toolbar and my own small middleware. It was hard problem to debug, I uploaded an example project here: ​https://github.com/hbielenia/asgi-djangotoolbar-bug (the name is misleading - I initially thought it's a bug with django-debug-toolbar).\nThe SESSION_FILE_PATH setting is intentionally broken to cause a 500 error. When starting the application and accessing /admin (any location really, but I wanted to leave it at a minimum and didn't add any views) it gives TypeError: object HttpResponse can't be used in 'await' expression. Commenting out asgi_djangotoolbar_bug.middleware.DummyMiddleware fixes the issue (in that I receive a 500 ImproperlyConfigured exception). I'm not sure about the overall role of django-debug-toolbar here - removing it causes Daphne to return a 500 error page but without debug information and there's no traceback in console either. I decided to leave it since it helped me approximate the causes of issue.\nI notice that in ​https://github.com/django/django/blob/3.1.4/django/core/handlers/base.py#L58 while MiddlewareNotUsed causes the loop to skip futher processing and go to next middleware, it does leave handler variable overwritten with output of self.adapt_method_mode(). On next pass, this handler is passed to next middleware instance, disregarding all the previous checks for (lack of) async support. This likely causes the middleware chain to be \"poisoned\" from this point onwards, resulting in last middleware in response cycle to return an HttpResponse as a synchronous middleware would, instead of coroutine that is expected.\nThis is probably avoided by adding async support to my middleware, but unless I'm missing something ​docs indicate it should work as it is. It is my intention that it's applied only on synchronous requests, so I didn't make it async compatible on purpose. If it's intentional in Django that every middleware needs to support async if the application is run as ASGI app, the documentation should probably state that clearly. Though it kinda defeats the purpose of having async_capable = False flag in the first place.\n",
  "hints_text": "Many thanks for the detailed report.",
  "created_at": "2020-12-26T12:31:18Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_async_and_sync_middleware_chain_async_call (middleware_exceptions.tests.MiddlewareNotUsedTests)\"]",
  "PASS_TO_PASS": "[\"test_missing_root_urlconf (middleware_exceptions.tests.RootUrlconfTests)\", \"test_do_not_log_when_debug_is_false (middleware_exceptions.tests.MiddlewareNotUsedTests)\", \"test_log (middleware_exceptions.tests.MiddlewareNotUsedTests)\", \"test_log_custom_message (middleware_exceptions.tests.MiddlewareNotUsedTests)\", \"test_raise_exception (middleware_exceptions.tests.MiddlewareNotUsedTests)\", \"test_exception_in_middleware_converted_before_prior_middleware (middleware_exceptions.tests.MiddlewareTests)\", \"test_exception_in_render_passed_to_process_exception (middleware_exceptions.tests.MiddlewareTests)\", \"test_process_template_response (middleware_exceptions.tests.MiddlewareTests)\", \"test_process_template_response_returns_none (middleware_exceptions.tests.MiddlewareTests)\", \"test_process_view_return_none (middleware_exceptions.tests.MiddlewareTests)\", \"test_process_view_return_response (middleware_exceptions.tests.MiddlewareTests)\", \"test_response_from_process_exception_short_circuits_remainder (middleware_exceptions.tests.MiddlewareTests)\", \"test_response_from_process_exception_when_return_response (middleware_exceptions.tests.MiddlewareTests)\", \"test_templateresponse_from_process_view_passed_to_process_template_response (middleware_exceptions.tests.MiddlewareTests)\", \"test_templateresponse_from_process_view_rendered (middleware_exceptions.tests.MiddlewareTests)\", \"test_view_exception_converted_before_middleware (middleware_exceptions.tests.MiddlewareTests)\", \"test_view_exception_handled_by_process_exception (middleware_exceptions.tests.MiddlewareTests)\", \"test_async_and_sync_middleware_async_call (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_async_and_sync_middleware_sync_call (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_async_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_async_middleware_async (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_not_sync_or_async_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_sync_decorated_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_sync_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_sync_middleware_async (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_exception_in_async_render_passed_to_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests)\", \"test_exception_in_render_passed_to_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests)\", \"test_process_template_response (middleware_exceptions.tests.AsyncMiddlewareTests)\", \"test_process_template_response_returns_none (middleware_exceptions.tests.AsyncMiddlewareTests)\", \"test_process_view_return_response (middleware_exceptions.tests.AsyncMiddlewareTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.671216",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}