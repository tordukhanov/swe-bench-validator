{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-8516",
  "base_commit": "9c151a65c86b4e780cc6b50ec2174b9b23af96de",
  "patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -62,13 +62,6 @@ def get_lock_path(path: _AnyPurePath) -> _AnyPurePath:\n     return path.joinpath(\".lock\")\n \n \n-def ensure_reset_dir(path: Path) -> None:\n-    \"\"\"Ensure the given path is an empty directory.\"\"\"\n-    if path.exists():\n-        rm_rf(path)\n-    path.mkdir()\n-\n-\n def on_rm_rf_error(func, path: str, exc, *, start_path: Path) -> bool:\n     \"\"\"Handle known read-only errors during rmtree.\n \n@@ -212,7 +205,7 @@ def _force_symlink(\n         pass\n \n \n-def make_numbered_dir(root: Path, prefix: str) -> Path:\n+def make_numbered_dir(root: Path, prefix: str, mode: int = 0o700) -> Path:\n     \"\"\"Create a directory with an increased number as suffix for the given prefix.\"\"\"\n     for i in range(10):\n         # try up to 10 times to create the folder\n@@ -220,7 +213,7 @@ def make_numbered_dir(root: Path, prefix: str) -> Path:\n         new_number = max_existing + 1\n         new_path = root.joinpath(f\"{prefix}{new_number}\")\n         try:\n-            new_path.mkdir()\n+            new_path.mkdir(mode=mode)\n         except Exception:\n             pass\n         else:\n@@ -352,13 +345,17 @@ def cleanup_numbered_dir(\n \n \n def make_numbered_dir_with_cleanup(\n-    root: Path, prefix: str, keep: int, lock_timeout: float\n+    root: Path,\n+    prefix: str,\n+    keep: int,\n+    lock_timeout: float,\n+    mode: int,\n ) -> Path:\n     \"\"\"Create a numbered dir with a cleanup lock and remove old ones.\"\"\"\n     e = None\n     for i in range(10):\n         try:\n-            p = make_numbered_dir(root, prefix)\n+            p = make_numbered_dir(root, prefix, mode)\n             lock_path = create_cleanup_lock(p)\n             register_cleanup_lock_removal(lock_path)\n         except Exception as exc:\ndiff --git a/src/_pytest/pytester.py b/src/_pytest/pytester.py\n--- a/src/_pytest/pytester.py\n+++ b/src/_pytest/pytester.py\n@@ -1456,7 +1456,7 @@ def runpytest_subprocess(\n             :py:class:`Pytester.TimeoutExpired`.\n         \"\"\"\n         __tracebackhide__ = True\n-        p = make_numbered_dir(root=self.path, prefix=\"runpytest-\")\n+        p = make_numbered_dir(root=self.path, prefix=\"runpytest-\", mode=0o700)\n         args = (\"--basetemp=%s\" % p,) + args\n         plugins = [x for x in self.plugins if isinstance(x, str)]\n         if plugins:\n@@ -1475,7 +1475,7 @@ def spawn_pytest(\n         The pexpect child is returned.\n         \"\"\"\n         basetemp = self.path / \"temp-pexpect\"\n-        basetemp.mkdir()\n+        basetemp.mkdir(mode=0o700)\n         invoke = \" \".join(map(str, self._getpytestargs()))\n         cmd = f\"{invoke} --basetemp={basetemp} {string}\"\n         return self.spawn(cmd, expect_timeout=expect_timeout)\ndiff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -7,10 +7,10 @@\n \n import attr\n \n-from .pathlib import ensure_reset_dir\n from .pathlib import LOCK_TIMEOUT\n from .pathlib import make_numbered_dir\n from .pathlib import make_numbered_dir_with_cleanup\n+from .pathlib import rm_rf\n from _pytest.compat import final\n from _pytest.compat import LEGACY_PATH\n from _pytest.compat import legacy_path\n@@ -94,20 +94,22 @@ def mktemp(self, basename: str, numbered: bool = True) -> Path:\n         basename = self._ensure_relative_to_basetemp(basename)\n         if not numbered:\n             p = self.getbasetemp().joinpath(basename)\n-            p.mkdir()\n+            p.mkdir(mode=0o700)\n         else:\n-            p = make_numbered_dir(root=self.getbasetemp(), prefix=basename)\n+            p = make_numbered_dir(root=self.getbasetemp(), prefix=basename, mode=0o700)\n             self._trace(\"mktemp\", p)\n         return p\n \n     def getbasetemp(self) -> Path:\n-        \"\"\"Return base temporary directory.\"\"\"\n+        \"\"\"Return the base temporary directory, creating it if needed.\"\"\"\n         if self._basetemp is not None:\n             return self._basetemp\n \n         if self._given_basetemp is not None:\n             basetemp = self._given_basetemp\n-            ensure_reset_dir(basetemp)\n+            if basetemp.exists():\n+                rm_rf(basetemp)\n+            basetemp.mkdir(mode=0o700)\n             basetemp = basetemp.resolve()\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n@@ -117,18 +119,41 @@ def getbasetemp(self) -> Path:\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n             try:\n-                rootdir.mkdir(exist_ok=True)\n+                rootdir.mkdir(mode=0o700, exist_ok=True)\n             except OSError:\n                 # getuser() likely returned illegal characters for the platform, use unknown back off mechanism\n                 rootdir = temproot.joinpath(\"pytest-of-unknown\")\n-                rootdir.mkdir(exist_ok=True)\n+                rootdir.mkdir(mode=0o700, exist_ok=True)\n+            # Because we use exist_ok=True with a predictable name, make sure\n+            # we are the owners, to prevent any funny business (on unix, where\n+            # temproot is usually shared).\n+            # Also, to keep things private, fixup any world-readable temp\n+            # rootdir's permissions. Historically 0o755 was used, so we can't\n+            # just error out on this, at least for a while.\n+            if hasattr(os, \"getuid\"):\n+                rootdir_stat = rootdir.stat()\n+                uid = os.getuid()\n+                # getuid shouldn't fail, but cpython defines such a case.\n+                # Let's hope for the best.\n+                if uid != -1:\n+                    if rootdir_stat.st_uid != uid:\n+                        raise OSError(\n+                            f\"The temporary directory {rootdir} is not owned by the current user. \"\n+                            \"Fix this and try again.\"\n+                        )\n+                    if (rootdir_stat.st_mode & 0o077) != 0:\n+                        os.chmod(rootdir, rootdir_stat.st_mode & ~0o077)\n             basetemp = make_numbered_dir_with_cleanup(\n-                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n+                prefix=\"pytest-\",\n+                root=rootdir,\n+                keep=3,\n+                lock_timeout=LOCK_TIMEOUT,\n+                mode=0o700,\n             )\n         assert basetemp is not None, basetemp\n-        self._basetemp = t = basetemp\n-        self._trace(\"new basetemp\", t)\n-        return t\n+        self._basetemp = basetemp\n+        self._trace(\"new basetemp\", basetemp)\n+        return basetemp\n \n \n @final\n",
  "test_patch": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -454,3 +454,44 @@ def test_tmp_path_factory_handles_invalid_dir_characters(\n     monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n     p = tmp_path_factory.getbasetemp()\n     assert \"pytest-of-unknown\" in str(p)\n+\n+\n+@pytest.mark.skipif(not hasattr(os, \"getuid\"), reason=\"checks unix permissions\")\n+def test_tmp_path_factory_create_directory_with_safe_permissions(\n+    tmp_path: Path, monkeypatch: MonkeyPatch\n+) -> None:\n+    \"\"\"Verify that pytest creates directories under /tmp with private permissions.\"\"\"\n+    # Use the test's tmp_path as the system temproot (/tmp).\n+    monkeypatch.setenv(\"PYTEST_DEBUG_TEMPROOT\", str(tmp_path))\n+    tmp_factory = TempPathFactory(None, lambda *args: None, _ispytest=True)\n+    basetemp = tmp_factory.getbasetemp()\n+\n+    # No world-readable permissions.\n+    assert (basetemp.stat().st_mode & 0o077) == 0\n+    # Parent too (pytest-of-foo).\n+    assert (basetemp.parent.stat().st_mode & 0o077) == 0\n+\n+\n+@pytest.mark.skipif(not hasattr(os, \"getuid\"), reason=\"checks unix permissions\")\n+def test_tmp_path_factory_fixes_up_world_readable_permissions(\n+    tmp_path: Path, monkeypatch: MonkeyPatch\n+) -> None:\n+    \"\"\"Verify that if a /tmp/pytest-of-foo directory already exists with\n+    world-readable permissions, it is fixed.\n+\n+    pytest used to mkdir with such permissions, that's why we fix it up.\n+    \"\"\"\n+    # Use the test's tmp_path as the system temproot (/tmp).\n+    monkeypatch.setenv(\"PYTEST_DEBUG_TEMPROOT\", str(tmp_path))\n+    tmp_factory = TempPathFactory(None, lambda *args: None, _ispytest=True)\n+    basetemp = tmp_factory.getbasetemp()\n+\n+    # Before - simulate bad perms.\n+    os.chmod(basetemp.parent, 0o777)\n+    assert (basetemp.parent.stat().st_mode & 0o077) != 0\n+\n+    tmp_factory = TempPathFactory(None, lambda *args: None, _ispytest=True)\n+    basetemp = tmp_factory.getbasetemp()\n+\n+    # After - fixed.\n+    assert (basetemp.parent.stat().st_mode & 0o077) == 0\n",
  "problem_statement": "Minor temporary directory security issue in pytest versions before 6.2.3\nA minor temporary directory security issue was found in pytest versions before 6.2.3. This issue is fixed in pytest 6.2.3.\r\n\r\npytest used to create directories under ``/tmp`` with world-readable\r\npermissions. This means that any user in the system was able to read\r\ninformation written by tests in temporary directories (such as those created by\r\nthe ``tmp_path``/``tmpdir`` fixture). Now the directories are created with\r\nprivate permissions.\r\n\r\npytest used to silenty use a pre-existing ``/tmp/pytest-of-<username>`` directory,\r\neven if owned by another user. This means another user could pre-create such a\r\ndirectory and gain control of another user's temporary directory. Now such a\r\ncondition results in an error.\n",
  "hints_text": "",
  "created_at": "2021-04-03T21:15:38Z",
  "version": "6.3",
  "FAIL_TO_PASS": "[\"testing/test_tmpdir.py::test_tmp_path_factory_create_directory_with_safe_permissions\", \"testing/test_tmpdir.py::test_tmp_path_factory_fixes_up_world_readable_permissions\"]",
  "PASS_TO_PASS": "[\"testing/test_tmpdir.py::TestTmpPathHandler::test_mktemp\", \"testing/test_tmpdir.py::TestTmpPathHandler::test_tmppath_relative_basetemp_absolute\", \"testing/test_tmpdir.py::test_get_user_uid_not_found\", \"testing/test_tmpdir.py::TestNumberedDir::test_make\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_lock_create\", \"testing/test_tmpdir.py::TestNumberedDir::test_lock_register_cleanup_removal\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_keep\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_locked\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_ignores_symlink\", \"testing/test_tmpdir.py::TestNumberedDir::test_removal_accepts_lock\", \"testing/test_tmpdir.py::TestRmRf::test_rm_rf\", \"testing/test_tmpdir.py::TestRmRf::test_rm_rf_with_read_only_file\", \"testing/test_tmpdir.py::TestRmRf::test_rm_rf_with_read_only_directory\", \"testing/test_tmpdir.py::TestRmRf::test_on_rm_rf_error\", \"testing/test_tmpdir.py::test_tmpdir_equals_tmp_path\", \"testing/test_tmpdir.py::test_tmp_path_factory_handles_invalid_dir_characters\", \"testing/test_tmpdir.py::test_tmp_path_fixture\", \"testing/test_tmpdir.py::TestConfigTmpPath::test_getbasetemp_custom_removes_old\", \"testing/test_tmpdir.py::test_mktemp[mypath-True]\", \"testing/test_tmpdir.py::test_mktemp[/mypath1-False]\", \"testing/test_tmpdir.py::test_mktemp[./mypath1-True]\", \"testing/test_tmpdir.py::test_mktemp[../mypath3-False]\", \"testing/test_tmpdir.py::test_mktemp[../../mypath4-False]\", \"testing/test_tmpdir.py::test_mktemp[mypath5/..-False]\", \"testing/test_tmpdir.py::test_mktemp[mypath6/../mypath6-True]\", \"testing/test_tmpdir.py::test_mktemp[mypath7/../mypath7/..-False]\", \"testing/test_tmpdir.py::test_tmpdir_always_is_realpath\", \"testing/test_tmpdir.py::test_tmp_path_always_is_realpath\", \"testing/test_tmpdir.py::test_tmp_path_too_long_on_parametrization\", \"testing/test_tmpdir.py::test_tmp_path_factory\", \"testing/test_tmpdir.py::test_tmp_path_fallback_tox_env\", \"testing/test_tmpdir.py::test_tmp_path_fallback_uid_not_found\", \"testing/test_tmpdir.py::test_basetemp_with_read_only_files\"]",
  "environment_setup_commit": "634312b14a45db8d60d72016e01294284e3a18d4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.943735",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}