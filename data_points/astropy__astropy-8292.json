{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-8292",
  "base_commit": "52d1c242e8b41c7b8279f1cc851bb48347dc8eeb",
  "patch": "diff --git a/astropy/units/equivalencies.py b/astropy/units/equivalencies.py\n--- a/astropy/units/equivalencies.py\n+++ b/astropy/units/equivalencies.py\n@@ -728,6 +728,6 @@ def with_H0(H0=None):\n         from astropy import cosmology\n         H0 = cosmology.default_cosmology.get().H0\n \n-    h100_val_unit = Unit(H0.to((si.km/si.s)/astrophys.Mpc).value/100 * astrophys.littleh)\n+    h100_val_unit = Unit(100/(H0.to_value((si.km/si.s)/astrophys.Mpc)) * astrophys.littleh)\n \n     return [(h100_val_unit, None)]\n",
  "test_patch": "diff --git a/astropy/units/tests/test_equivalencies.py b/astropy/units/tests/test_equivalencies.py\n--- a/astropy/units/tests/test_equivalencies.py\n+++ b/astropy/units/tests/test_equivalencies.py\n@@ -751,22 +751,21 @@ def test_plate_scale():\n \n def test_littleh():\n     H0_70 = 70*u.km/u.s/u.Mpc\n-    h100dist = 100 * u.Mpc/u.littleh\n+    h70dist = 70 * u.Mpc/u.littleh\n \n-    assert_quantity_allclose(h100dist.to(u.Mpc, u.with_H0(H0_70)), 70*u.Mpc)\n+    assert_quantity_allclose(h70dist.to(u.Mpc, u.with_H0(H0_70)), 100*u.Mpc)\n \n     # make sure using the default cosmology works\n-    H0_default_cosmo = cosmology.default_cosmology.get().H0\n-    assert_quantity_allclose(h100dist.to(u.Mpc, u.with_H0()),\n-                             H0_default_cosmo.value*u.Mpc)\n+    cosmodist = cosmology.default_cosmology.get().H0.value * u.Mpc/u.littleh\n+    assert_quantity_allclose(cosmodist.to(u.Mpc, u.with_H0()), 100*u.Mpc)\n \n     # Now try a luminosity scaling\n-    h1lum = 1 * u.Lsun * u.littleh**-2\n-    assert_quantity_allclose(h1lum.to(u.Lsun, u.with_H0(H0_70)), .49*u.Lsun)\n+    h1lum = .49 * u.Lsun * u.littleh**-2\n+    assert_quantity_allclose(h1lum.to(u.Lsun, u.with_H0(H0_70)), 1*u.Lsun)\n \n     # And the trickiest one: magnitudes.  Using H0=10 here for the round numbers\n     H0_10 = 10*u.km/u.s/u.Mpc\n     # assume the \"true\" magnitude M = 12.\n     # Then M - 5*log_10(h)  = M + 5 = 17\n-    withlittlehmag = 17 * (u.mag + u.MagUnit(u.littleh**2))\n+    withlittlehmag = 17 * (u.mag - u.MagUnit(u.littleh**2))\n     assert_quantity_allclose(withlittlehmag.to(u.mag, u.with_H0(H0_10)), 12*u.mag)\n",
  "problem_statement": "Problem with the `littleh` part of unit equivalencies?\nIn the newly added `littleh` equivalencies: http://docs.astropy.org/en/stable/units/equivalencies.html#unit-equivalencies \r\n\r\nWe notice that the implementation of `littleh` seems to be wrong, as highlighted in the following figure:\r\n\r\n![screen shot 2018-12-12 at 12 59 23](https://user-images.githubusercontent.com/7539807/49902062-c2c20c00-fe17-11e8-8368-66c294fc067d.png)\r\n\r\nIf `distance = 100 Mpc/h`, and `h=0.7`, should it be equivalent to 140 Mpc, instead of 70Mpc? \r\n\r\nI can reproduce this so it is not a typo...\r\n\n",
  "hints_text": "Note: This was implemented in #7970\n(I removed the `cosmology` label b/c this is not actually part of the cosmology package - it's really just units)\nThanks for catching this @dr-guangtou - indeed it's definitely wrong - was right in an earlier version, but somehow got flipped around in the process of a change of the implementation (and I guess the tests ended up getting re-written to reflect the incorrect implementation...).  \r\n\r\nmilestoning this for 3.1.1, as it's a pretty major \"wrongness\"",
  "created_at": "2018-12-15T03:47:56Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"astropy/units/tests/test_equivalencies.py::test_littleh\"]",
  "PASS_TO_PASS": "[\"astropy/units/tests/test_equivalencies.py::test_dimensionless_angles\", \"astropy/units/tests/test_equivalencies.py::test_logarithmic[log_unit0]\", \"astropy/units/tests/test_equivalencies.py::test_logarithmic[log_unit1]\", \"astropy/units/tests/test_equivalencies.py::test_logarithmic[log_unit2]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_frequency_0[doppler_optical]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_frequency_0[doppler_radio]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_frequency_0[doppler_relativistic]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_wavelength_0[doppler_optical]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_wavelength_0[doppler_radio]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_wavelength_0[doppler_relativistic]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_energy_0[doppler_optical]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_energy_0[doppler_radio]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_energy_0[doppler_relativistic]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_frequency_circle[doppler_optical]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_frequency_circle[doppler_radio]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_frequency_circle[doppler_relativistic]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_wavelength_circle[doppler_optical]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_wavelength_circle[doppler_radio]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_wavelength_circle[doppler_relativistic]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_energy_circle[doppler_optical]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_energy_circle[doppler_radio]\", \"astropy/units/tests/test_equivalencies.py::test_doppler_energy_circle[doppler_relativistic]\", \"astropy/units/tests/test_equivalencies.py::test_30kms[doppler_optical-999.899940784289]\", \"astropy/units/tests/test_equivalencies.py::test_30kms[doppler_radio-999.8999307714406]\", \"astropy/units/tests/test_equivalencies.py::test_30kms[doppler_relativistic-999.8999357778647]\", \"astropy/units/tests/test_equivalencies.py::test_bad_restfreqs[doppler_optical-5]\", \"astropy/units/tests/test_equivalencies.py::test_bad_restfreqs[doppler_radio-value1]\", \"astropy/units/tests/test_equivalencies.py::test_bad_restfreqs[doppler_relativistic-None]\", \"astropy/units/tests/test_equivalencies.py::test_massenergy\", \"astropy/units/tests/test_equivalencies.py::test_is_equivalent\", \"astropy/units/tests/test_equivalencies.py::test_parallax\", \"astropy/units/tests/test_equivalencies.py::test_parallax2\", \"astropy/units/tests/test_equivalencies.py::test_spectral\", \"astropy/units/tests/test_equivalencies.py::test_spectral2\", \"astropy/units/tests/test_equivalencies.py::test_spectral3\", \"astropy/units/tests/test_equivalencies.py::test_spectral4[in_val0-in_unit0]\", \"astropy/units/tests/test_equivalencies.py::test_spectral4[in_val1-in_unit1]\", \"astropy/units/tests/test_equivalencies.py::test_spectral4[in_val2-in_unit2]\", \"astropy/units/tests/test_equivalencies.py::test_spectral4[in_val3-in_unit3]\", \"astropy/units/tests/test_equivalencies.py::test_spectraldensity2\", \"astropy/units/tests/test_equivalencies.py::test_spectraldensity3\", \"astropy/units/tests/test_equivalencies.py::test_spectraldensity4\", \"astropy/units/tests/test_equivalencies.py::test_spectraldensity5\", \"astropy/units/tests/test_equivalencies.py::test_equivalent_units\", \"astropy/units/tests/test_equivalencies.py::test_equivalent_units2\", \"astropy/units/tests/test_equivalencies.py::test_trivial_equivalency\", \"astropy/units/tests/test_equivalencies.py::test_invalid_equivalency\", \"astropy/units/tests/test_equivalencies.py::test_irrelevant_equivalency\", \"astropy/units/tests/test_equivalencies.py::test_brightness_temperature\", \"astropy/units/tests/test_equivalencies.py::test_swapped_args_brightness_temperature\", \"astropy/units/tests/test_equivalencies.py::test_surfacebrightness\", \"astropy/units/tests/test_equivalencies.py::test_beam\", \"astropy/units/tests/test_equivalencies.py::test_thermodynamic_temperature\", \"astropy/units/tests/test_equivalencies.py::test_equivalency_context\", \"astropy/units/tests/test_equivalencies.py::test_equivalency_context_manager\", \"astropy/units/tests/test_equivalencies.py::test_temperature\", \"astropy/units/tests/test_equivalencies.py::test_temperature_energy\", \"astropy/units/tests/test_equivalencies.py::test_molar_mass_amu\", \"astropy/units/tests/test_equivalencies.py::test_compose_equivalencies\", \"astropy/units/tests/test_equivalencies.py::test_pixel_scale\", \"astropy/units/tests/test_equivalencies.py::test_plate_scale\"]",
  "environment_setup_commit": "de88208326dc4cd68be1c3030f4f6d2eddf04520",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.547729",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}