{
  "repo": "django/django",
  "instance_id": "django__django-14282",
  "base_commit": "3fec16e8acf0724b061a9e3cce25da898052bc9b",
  "patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -12,12 +12,19 @@ class PasswordResetTokenGenerator:\n     \"\"\"\n     key_salt = \"django.contrib.auth.tokens.PasswordResetTokenGenerator\"\n     algorithm = None\n-    secret = None\n+    _secret = None\n \n     def __init__(self):\n-        self.secret = self.secret or settings.SECRET_KEY\n         self.algorithm = self.algorithm or 'sha256'\n \n+    def _get_secret(self):\n+        return self._secret or settings.SECRET_KEY\n+\n+    def _set_secret(self, secret):\n+        self._secret = secret\n+\n+    secret = property(_get_secret, _set_secret)\n+\n     def make_token(self, user):\n         \"\"\"\n         Return a token that can be used once to do a password reset\n",
  "test_patch": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -3,7 +3,9 @@\n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.core.exceptions import ImproperlyConfigured\n from django.test import TestCase\n+from django.test.utils import override_settings\n \n from .models import CustomEmailField\n \n@@ -111,3 +113,30 @@ def test_token_with_different_secret(self):\n         # Tokens created with a different secret don't validate.\n         self.assertIs(p0.check_token(user, tk1), False)\n         self.assertIs(p1.check_token(user, tk0), False)\n+\n+    def test_token_with_different_secret_subclass(self):\n+        class CustomPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n+            secret = 'test-secret'\n+\n+        user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n+        custom_password_generator = CustomPasswordResetTokenGenerator()\n+        tk_custom = custom_password_generator.make_token(user)\n+        self.assertIs(custom_password_generator.check_token(user, tk_custom), True)\n+\n+        default_password_generator = PasswordResetTokenGenerator()\n+        self.assertNotEqual(\n+            custom_password_generator.secret,\n+            default_password_generator.secret,\n+        )\n+        self.assertEqual(default_password_generator.secret, settings.SECRET_KEY)\n+        # Tokens created with a different secret don't validate.\n+        tk_default = default_password_generator.make_token(user)\n+        self.assertIs(custom_password_generator.check_token(user, tk_default), False)\n+        self.assertIs(default_password_generator.check_token(user, tk_custom), False)\n+\n+    @override_settings(SECRET_KEY='')\n+    def test_secret_lazy_validation(self):\n+        default_token_generator = PasswordResetTokenGenerator()\n+        msg = 'The SECRET_KEY setting must not be empty.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            default_token_generator.secret\n",
  "problem_statement": "Cannot run makemigrations management command without a SECRET_KEY\nDescription\n\t\nI believe #29324 intended to fix this issue.\nSteps to reproduce:\n$ cd $(mktemp -d)\n$ python -m venv venv\n$ source venv/bin/activate\n$ pip install 'Django>=3.2'\n$ python -m django startproject foo\n$ sed -ri '/SECRET_KEY/d' foo/foo/settings.py # Remove SECRET_KEY from settings\n$ PYTHONPATH=foo DJANGO_SETTINGS_MODULE=\"foo.settings\" python -m django makemigrations --check\nThe output is attached.\n",
  "hints_text": "#29324 fix this issue for management commands that do not rely on the SECRET_KEY, as far as I'm aware check is not one of them. Have you tried with a custom management command?\nI am using the makemigrations command with the --check toggle to verify no new migrations are needed. I don’t think it needs a SECRET_KEY?\nHere’s a patch that solves the issue for me: ​https://github.com/django/django/pull/14282 That may help describe and reproduce the issue.\nI'm not sure about fixing this. It's a reasonable assumption that SECRET_KEY is necessary for all built-in commands. We cannot not guarantee that makemigrations or any other built-in command will work in the future without a SECRET_KEY.\nWe cannot not guarantee that makemigrations or any other built-in command will work in the future without a SECRET_KEY. That’s true. I’m not asking for all management commands to work without a SECRET_KEY, but for the commands to fail only when the SECRET_KEY is accessed. My goal is to avoid defining a SECRET_KEY in environments that do not need it. That’s the same goal as #29324 and corresponding release note mention ​https://docs.djangoproject.com/en/3.2/releases/3.2/#security: running management commands that do not rely on the SECRET_KEY without needing to provide a value. My project (the same as Jon in #29324) works around the limitation by generating a random string for SECRET_KEY when none is available. It is annoying to maintain logic to create values for unused settings. A regression in this area isn’t a big deal. IMO, maintaining it on a best-effort basis is sufficient, and can help simplifying the running on management commands for other projects.\nI think the proper fix would be to move PasswordResetTokenGenerator.secret to a property so it is only accessed when actually needed. This would also help tests that change the SECRET_KEY and then wonder why default_token_generator does not pick it up. Lazy* should be used as a last resort.\nThanks for the suggestion, it is a good improvement! I updated the patch ​https://github.com/django/django/pull/14282 to reflect it. Please let me know if that’s what you had in mind?",
  "created_at": "2021-04-19T08:13:32Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_secret_lazy_validation (auth_tests.test_tokens.TokenGeneratorTest)\"]",
  "PASS_TO_PASS": "[\"The token generated for a user created in the same request\", \"test_check_token_with_nonexistent_token_and_user (auth_tests.test_tokens.TokenGeneratorTest)\", \"test_make_token (auth_tests.test_tokens.TokenGeneratorTest)\", \"The token is valid after n seconds, but no greater.\", \"Updating the user email address invalidates the token.\", \"A valid token can be created with a secret other than SECRET_KEY by\", \"test_token_with_different_secret_subclass (auth_tests.test_tokens.TokenGeneratorTest)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.685785",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}