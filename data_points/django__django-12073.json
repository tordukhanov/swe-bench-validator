{
  "repo": "django/django",
  "instance_id": "django__django-12073",
  "base_commit": "cbe4d6203ff2d702b63dae52adbe7a50830a5cbe",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -21,7 +21,7 @@\n from django.db.models.expressions import Case, Expression, F, Value, When\n from django.db.models.fields import AutoField\n from django.db.models.functions import Cast, Trunc\n-from django.db.models.query_utils import FilteredRelation, InvalidQuery, Q\n+from django.db.models.query_utils import FilteredRelation, Q\n from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE\n from django.db.utils import NotSupportedError\n from django.utils import timezone\n@@ -1455,7 +1455,9 @@ def iterator(self):\n         try:\n             model_init_names, model_init_pos, annotation_fields = self.resolve_model_init_order()\n             if self.model._meta.pk.attname not in model_init_names:\n-                raise InvalidQuery('Raw query must include the primary key')\n+                raise exceptions.FieldDoesNotExist(\n+                    'Raw query must include the primary key'\n+                )\n             model_cls = self.model\n             fields = [self.model_fields.get(c) for c in self.columns]\n             converters = compiler.get_converters([\ndiff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -8,10 +8,13 @@\n import copy\n import functools\n import inspect\n+import warnings\n from collections import namedtuple\n \n+from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db.models.constants import LOOKUP_SEP\n from django.utils import tree\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n # PathInfo is used when converting lookups (fk__somecol). The contents\n # describe the relation in Model terms (model Options and Fields for both\n@@ -19,8 +22,29 @@\n PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')\n \n \n-class InvalidQuery(Exception):\n-    \"\"\"The query passed to raw() isn't a safe query to use with raw().\"\"\"\n+class InvalidQueryType(type):\n+    @property\n+    def _subclasses(self):\n+        return (FieldDoesNotExist, FieldError)\n+\n+    def __warn(self):\n+        warnings.warn(\n+            'The InvalidQuery exception class is deprecated. Use '\n+            'FieldDoesNotExist or FieldError instead.',\n+            category=RemovedInDjango40Warning,\n+            stacklevel=4,\n+        )\n+\n+    def __instancecheck__(self, instance):\n+        self.__warn()\n+        return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n+\n+    def __subclasscheck__(self, subclass):\n+        self.__warn()\n+        return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)\n+\n+\n+class InvalidQuery(Exception, metaclass=InvalidQueryType):\n     pass\n \n \n@@ -233,10 +257,11 @@ def select_related_descend(field, restricted, requested, load_fields, reverse=Fa\n     if load_fields:\n         if field.attname not in load_fields:\n             if restricted and field.name in requested:\n-                raise InvalidQuery(\"Field %s.%s cannot be both deferred\"\n-                                   \" and traversed using select_related\"\n-                                   \" at the same time.\" %\n-                                   (field.model._meta.object_name, field.name))\n+                msg = (\n+                    'Field %s.%s cannot be both deferred and traversed using '\n+                    'select_related at the same time.'\n+                ) % (field.model._meta.object_name, field.name)\n+                raise FieldError(msg)\n     return True\n \n \n",
  "test_patch": "diff --git a/tests/defer/tests.py b/tests/defer/tests.py\n--- a/tests/defer/tests.py\n+++ b/tests/defer/tests.py\n@@ -1,4 +1,4 @@\n-from django.db.models.query_utils import InvalidQuery\n+from django.core.exceptions import FieldError\n from django.test import TestCase\n \n from .models import (\n@@ -113,7 +113,7 @@ def test_defer_select_related_raises_invalid_query(self):\n             'Field Primary.related cannot be both deferred and traversed '\n             'using select_related at the same time.'\n         )\n-        with self.assertRaisesMessage(InvalidQuery, msg):\n+        with self.assertRaisesMessage(FieldError, msg):\n             Primary.objects.defer(\"related\").select_related(\"related\")[0]\n \n     def test_only_select_related_raises_invalid_query(self):\n@@ -121,7 +121,7 @@ def test_only_select_related_raises_invalid_query(self):\n             'Field Primary.related cannot be both deferred and traversed using '\n             'select_related at the same time.'\n         )\n-        with self.assertRaisesMessage(InvalidQuery, msg):\n+        with self.assertRaisesMessage(FieldError, msg):\n             Primary.objects.only(\"name\").select_related(\"related\")[0]\n \n     def test_defer_foreign_keys_are_deferred_and_not_traversed(self):\ndiff --git a/tests/queries/test_deprecation.py b/tests/queries/test_deprecation.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/queries/test_deprecation.py\n@@ -0,0 +1,30 @@\n+from contextlib import contextmanager\n+\n+from django.core.exceptions import FieldDoesNotExist, FieldError\n+from django.db.models.query_utils import InvalidQuery\n+from django.test import SimpleTestCase\n+from django.utils.deprecation import RemovedInDjango40Warning\n+\n+\n+class InvalidQueryTests(SimpleTestCase):\n+    @contextmanager\n+    def assert_warns(self):\n+        msg = (\n+            'The InvalidQuery exception class is deprecated. Use '\n+            'FieldDoesNotExist or FieldError instead.'\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango40Warning, msg):\n+            yield\n+\n+    def test_type(self):\n+        self.assertIsInstance(InvalidQuery(), InvalidQuery)\n+\n+    def test_isinstance(self):\n+        for exception in (FieldError, FieldDoesNotExist):\n+            with self.assert_warns(), self.subTest(exception.__name__):\n+                self.assertIsInstance(exception(), InvalidQuery)\n+\n+    def test_issubclass(self):\n+        for exception in (FieldError, FieldDoesNotExist, InvalidQuery):\n+            with self.assert_warns(), self.subTest(exception.__name__):\n+                self.assertIs(issubclass(exception, InvalidQuery), True)\ndiff --git a/tests/raw_query/tests.py b/tests/raw_query/tests.py\n--- a/tests/raw_query/tests.py\n+++ b/tests/raw_query/tests.py\n@@ -1,8 +1,8 @@\n from datetime import date\n from decimal import Decimal\n \n+from django.core.exceptions import FieldDoesNotExist\n from django.db.models.query import RawQuerySet\n-from django.db.models.query_utils import InvalidQuery\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -235,7 +235,8 @@ def test_missing_fields(self):\n \n     def test_missing_fields_without_PK(self):\n         query = \"SELECT first_name, dob FROM raw_query_author\"\n-        with self.assertRaisesMessage(InvalidQuery, 'Raw query must include the primary key'):\n+        msg = 'Raw query must include the primary key'\n+        with self.assertRaisesMessage(FieldDoesNotExist, msg):\n             list(Author.objects.raw(query))\n \n     def test_annotations(self):\n",
  "problem_statement": "Deprecate the barely documented InvalidQuery exception.\nDescription\n\t\nThe django.db.models.query.InvalidQuery exception is ​only mentioned once by name in the documentation without reference to its defining module.\nIt's used for the documented QuerySet.raw usage and ​abused for ​field deferring select related misuse.\nI suggest we replace the documented usage by raising FieldDoesNotExist instead and the latter undocumented abuse by raising FieldError while providing a deprecation shim to warn on usages of except InvalidQuery.\n",
  "hints_text": "",
  "created_at": "2019-11-15T21:23:02Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_isinstance (queries.test_deprecation.InvalidQueryTests)\", \"test_issubclass (queries.test_deprecation.InvalidQueryTests)\", \"test_defer_select_related_raises_invalid_query (defer.tests.DeferTests)\", \"test_only_select_related_raises_invalid_query (defer.tests.DeferTests)\", \"test_missing_fields_without_PK (raw_query.tests.RawQueryTests)\"]",
  "PASS_TO_PASS": "[\"test_type (queries.test_deprecation.InvalidQueryTests)\", \"test_defer_baseclass_when_subclass_has_added_field (defer.tests.BigChildDeferTests)\", \"test_defer_subclass (defer.tests.BigChildDeferTests)\", \"test_defer_subclass_both (defer.tests.BigChildDeferTests)\", \"test_only_baseclass_when_subclass_has_added_field (defer.tests.BigChildDeferTests)\", \"test_only_subclass (defer.tests.BigChildDeferTests)\", \"test_custom_refresh_on_deferred_loading (defer.tests.TestDefer2)\", \"test_defer_inheritance_pk_chaining (defer.tests.TestDefer2)\", \"test_defer_proxy (defer.tests.TestDefer2)\", \"test_eq (defer.tests.TestDefer2)\", \"test_refresh_not_loading_deferred_fields (defer.tests.TestDefer2)\", \"test_defer (defer.tests.DeferTests)\", \"test_defer_baseclass_when_subclass_has_no_added_fields (defer.tests.DeferTests)\", \"test_defer_extra (defer.tests.DeferTests)\", \"test_defer_foreign_keys_are_deferred_and_not_traversed (defer.tests.DeferTests)\", \"test_defer_none_to_clear_deferred_set (defer.tests.DeferTests)\", \"test_defer_on_an_already_deferred_field (defer.tests.DeferTests)\", \"test_defer_only_chaining (defer.tests.DeferTests)\", \"test_defer_values_does_not_defer (defer.tests.DeferTests)\", \"test_defer_with_select_related (defer.tests.DeferTests)\", \"test_get (defer.tests.DeferTests)\", \"test_only (defer.tests.DeferTests)\", \"test_only_baseclass_when_subclass_has_no_added_fields (defer.tests.DeferTests)\", \"test_only_none_raises_error (defer.tests.DeferTests)\", \"test_only_values_does_not_defer (defer.tests.DeferTests)\", \"test_only_with_select_related (defer.tests.DeferTests)\", \"test_saving_object_with_deferred_field (defer.tests.DeferTests)\", \"test_FK_raw_query (raw_query.tests.RawQueryTests)\", \"test_annotations (raw_query.tests.RawQueryTests)\", \"test_bool (raw_query.tests.RawQueryTests)\", \"test_db_column_handler (raw_query.tests.RawQueryTests)\", \"test_db_column_name_is_used_in_raw_query (raw_query.tests.RawQueryTests)\", \"test_decimal_parameter (raw_query.tests.RawQueryTests)\", \"test_extra_conversions (raw_query.tests.RawQueryTests)\", \"test_get_item (raw_query.tests.RawQueryTests)\", \"test_inheritance (raw_query.tests.RawQueryTests)\", \"test_iterator (raw_query.tests.RawQueryTests)\", \"test_len (raw_query.tests.RawQueryTests)\", \"test_many_to_many (raw_query.tests.RawQueryTests)\", \"test_missing_fields (raw_query.tests.RawQueryTests)\", \"test_multiple_iterations (raw_query.tests.RawQueryTests)\", \"test_order_handler (raw_query.tests.RawQueryTests)\", \"test_params (raw_query.tests.RawQueryTests)\", \"test_pk_with_mixed_case_db_column (raw_query.tests.RawQueryTests)\", \"test_query_count (raw_query.tests.RawQueryTests)\", \"test_query_representation (raw_query.tests.RawQueryTests)\", \"test_raw_query_lazy (raw_query.tests.RawQueryTests)\", \"test_rawqueryset_repr (raw_query.tests.RawQueryTests)\", \"test_result_caching (raw_query.tests.RawQueryTests)\", \"test_simple_raw_query (raw_query.tests.RawQueryTests)\", \"test_subquery_in_raw_sql (raw_query.tests.RawQueryTests)\", \"test_translations (raw_query.tests.RawQueryTests)\", \"test_white_space_query (raw_query.tests.RawQueryTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.592226",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}