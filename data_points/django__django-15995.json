{
  "repo": "django/django",
  "instance_id": "django__django-15995",
  "base_commit": "0701bb8e1f1771b36cdde45602ad377007e372b3",
  "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -647,15 +647,6 @@ def __init__(self, instance):\n \n             self.core_filters = {self.field.name: instance}\n \n-            # Even if this relation is not to pk, we require still pk value.\n-            # The wish is that the instance has been already saved to DB,\n-            # although having a pk value isn't a guarantee of that.\n-            if self.instance.pk is None:\n-                raise ValueError(\n-                    f\"{instance.__class__.__name__!r} instance needs to have a primary \"\n-                    f\"key value before this relationship can be used.\"\n-                )\n-\n         def __call__(self, *, manager):\n             manager = getattr(self.model, manager)\n             manager_class = create_reverse_many_to_one_manager(manager.__class__, rel)\n@@ -720,6 +711,14 @@ def _remove_prefetched_objects(self):\n                 pass  # nothing to clear from cache\n \n         def get_queryset(self):\n+            # Even if this relation is not to pk, we require still pk value.\n+            # The wish is that the instance has been already saved to DB,\n+            # although having a pk value isn't a guarantee of that.\n+            if self.instance.pk is None:\n+                raise ValueError(\n+                    f\"{self.instance.__class__.__name__!r} instance needs to have a \"\n+                    f\"primary key value before this relationship can be used.\"\n+                )\n             try:\n                 return self.instance._prefetched_objects_cache[\n                     self.field.remote_field.get_cache_name()\n",
  "test_patch": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -758,6 +758,9 @@ def test_relation_unsaved(self):\n         )\n         with self.assertRaisesMessage(ValueError, msg):\n             th.child_set.count()\n+        # The reverse foreign key manager can be created.\n+        self.assertEqual(th.child_set.model, Third)\n+\n         th.save()\n         # Now the model is saved, so we will need to execute a query.\n         with self.assertNumQueries(1):\n",
  "problem_statement": "Too aggressive pk control in create_reverse_many_to_one_manager\nDescription\n\t\nIn the context of #19580, Django now requires an instance pk to even instanciate a related manager [7ba6ebe9149a].\nNow I have a use case where I need to introspect the model used by a related manager (MyModel().related_set.model) and Django 4.1 refuses that with ValueError: 'MyModel' instance needs to have a primary key value before this relationship can be used.\nMy opinion is that is is too aggressive of a check and would suggest to let the __init__ succeed even if the instance has no pk. Other calls to _check_fk_val in the class seems sufficient to me to safeguard against shooting in the foot.\n",
  "hints_text": "I think this worth doing, having get_queryset perform self._check_fk_val() should catch the currently tested .all() case as well. In the mean time I think you should be able to use MyModel._meta.get_field(\"related_set\") for your introspection needs.\nReplying to Simon Charette: ... In the mean time I think you should be able to use MyModel._meta.get_field(\"related_set\") for your introspection needs. Thanks for the tip! I just needed to remove the _set as it's not part of the ManyToOneRel field name in _meta.",
  "created_at": "2022-08-24T18:55:30Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_relation_unsaved (many_to_one.tests.ManyToOneTests)\"]",
  "PASS_TO_PASS": "[\"test_add (many_to_one.tests.ManyToOneTests)\", \"test_add_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_add_remove_set_by_pk_raises (many_to_one.tests.ManyToOneTests)\", \"test_add_then_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_assign (many_to_one.tests.ManyToOneTests)\", \"test_assign_fk_id_none (many_to_one.tests.ManyToOneTests)\", \"test_assign_fk_id_value (many_to_one.tests.ManyToOneTests)\", \"test_cached_foreign_key_with_to_field_not_cleared_by_save (many_to_one.tests.ManyToOneTests)\", \"Model.save() invalidates stale ForeignKey relations after a primary key\", \"test_clear_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_create (many_to_one.tests.ManyToOneTests)\", \"test_create_relation_with_gettext_lazy (many_to_one.tests.ManyToOneTests)\", \"test_deepcopy_and_circular_references (many_to_one.tests.ManyToOneTests)\", \"test_delete (many_to_one.tests.ManyToOneTests)\", \"test_explicit_fk (many_to_one.tests.ManyToOneTests)\", \"test_fk_assignment_and_related_object_cache (many_to_one.tests.ManyToOneTests)\", \"test_fk_instantiation_outside_model (many_to_one.tests.ManyToOneTests)\", \"test_fk_to_bigautofield (many_to_one.tests.ManyToOneTests)\", \"test_fk_to_smallautofield (many_to_one.tests.ManyToOneTests)\", \"test_get (many_to_one.tests.ManyToOneTests)\", \"test_hasattr_related_object (many_to_one.tests.ManyToOneTests)\", \"test_manager_class_caching (many_to_one.tests.ManyToOneTests)\", \"test_multiple_foreignkeys (many_to_one.tests.ManyToOneTests)\", \"test_related_object (many_to_one.tests.ManyToOneTests)\", \"test_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_reverse_assignment_deprecation (many_to_one.tests.ManyToOneTests)\", \"test_reverse_foreign_key_instance_to_field_caching (many_to_one.tests.ManyToOneTests)\", \"test_reverse_selects (many_to_one.tests.ManyToOneTests)\", \"test_save_fk_after_parent_with_non_numeric_pk_set_on_child (many_to_one.tests.ManyToOneTests)\", \"test_save_nullable_fk_after_parent (many_to_one.tests.ManyToOneTests)\", \"test_save_nullable_fk_after_parent_with_to_field (many_to_one.tests.ManyToOneTests)\", \"test_save_parent_after_assign (many_to_one.tests.ManyToOneTests)\", \"test_select_related (many_to_one.tests.ManyToOneTests)\", \"test_selects (many_to_one.tests.ManyToOneTests)\", \"test_set (many_to_one.tests.ManyToOneTests)\", \"test_set_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_values_list_exception (many_to_one.tests.ManyToOneTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.744338",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}