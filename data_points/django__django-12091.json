{
  "repo": "django/django",
  "instance_id": "django__django-12091",
  "base_commit": "5d654e1e7104d2ce86ec1b9fe52865a7dca4b4be",
  "patch": "diff --git a/django/http/request.py b/django/http/request.py\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -1,6 +1,7 @@\n import cgi\n import codecs\n import copy\n+import warnings\n from io import BytesIO\n from itertools import chain\n from urllib.parse import quote, urlencode, urljoin, urlsplit\n@@ -15,6 +16,7 @@\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, ImmutableList, MultiValueDict,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.encoding import escape_uri_path, iri_to_uri\n from django.utils.functional import cached_property\n from django.utils.http import is_same_domain, limited_parse_qsl\n@@ -256,6 +258,11 @@ def is_secure(self):\n         return self.scheme == 'https'\n \n     def is_ajax(self):\n+        warnings.warn(\n+            'request.is_ajax() is deprecated. See Django 3.1 release notes '\n+            'for more details about this deprecation.',\n+            RemovedInDjango40Warning,\n+        )\n         return self.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest'\n \n     @property\ndiff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -48,12 +48,12 @@ def technical_500_response(request, exc_type, exc_value, tb, status_code=500):\n     the values returned from sys.exc_info() and friends.\n     \"\"\"\n     reporter = get_exception_reporter_class(request)(request, exc_type, exc_value, tb)\n-    if request.is_ajax():\n-        text = reporter.get_traceback_text()\n-        return HttpResponse(text, status=status_code, content_type='text/plain; charset=utf-8')\n-    else:\n+    if request.accepts('text/html'):\n         html = reporter.get_traceback_html()\n         return HttpResponse(html, status=status_code, content_type='text/html')\n+    else:\n+        text = reporter.get_traceback_text()\n+        return HttpResponse(text, status=status_code, content_type='text/plain; charset=utf-8')\n \n \n @functools.lru_cache()\ndiff --git a/django/views/i18n.py b/django/views/i18n.py\n--- a/django/views/i18n.py\n+++ b/django/views/i18n.py\n@@ -33,7 +33,7 @@ def set_language(request):\n     \"\"\"\n     next_url = request.POST.get('next', request.GET.get('next'))\n     if (\n-        (next_url or not request.is_ajax()) and\n+        (next_url or request.accepts('text/html')) and\n         not url_has_allowed_host_and_scheme(\n             url=next_url,\n             allowed_hosts={request.get_host()},\n",
  "test_patch": "diff --git a/tests/requests/test_is_ajax_deprecations.py b/tests/requests/test_is_ajax_deprecations.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/requests/test_is_ajax_deprecations.py\n@@ -0,0 +1,12 @@\n+from django.http import HttpRequest\n+from django.test import SimpleTestCase, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango40Warning\n+\n+\n+@ignore_warnings(category=RemovedInDjango40Warning)\n+class TestDeprecatedIsAjax(SimpleTestCase):\n+    def test_is_ajax(self):\n+        request = HttpRequest()\n+        self.assertIs(request.is_ajax(), False)\n+        request.META['HTTP_X_REQUESTED_WITH'] = 'XMLHttpRequest'\n+        self.assertIs(request.is_ajax(), True)\ndiff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1247,7 +1247,7 @@ def test_exception_report_uses_meta_filtering(self):\n         response = self.client.get(\n             '/raises500/',\n             HTTP_SECRET_HEADER='super_secret',\n-            HTTP_X_REQUESTED_WITH='XMLHttpRequest',\n+            HTTP_ACCEPT='application/json',\n         )\n         self.assertNotIn(b'super_secret', response.content)\n \n@@ -1289,17 +1289,17 @@ def test_hidden_settings_override(self):\n         )\n \n \n-class AjaxResponseExceptionReporterFilter(ExceptionReportTestMixin, LoggingCaptureMixin, SimpleTestCase):\n+class NonHTMLResponseExceptionReporterFilter(ExceptionReportTestMixin, LoggingCaptureMixin, SimpleTestCase):\n     \"\"\"\n     Sensitive information can be filtered out of error reports.\n \n-    Here we specifically test the plain text 500 debug-only error page served\n-    when it has been detected the request was sent by JS code. We don't check\n-    for (non)existence of frames vars in the traceback information section of\n-    the response content because we don't include them in these error pages.\n+    The plain text 500 debug-only error page is served when it has been\n+    detected the request doesn't accept HTML content. Don't check for\n+    (non)existence of frames vars in the traceback information section of the\n+    response content because they're not included in these error pages.\n     Refs #14614.\n     \"\"\"\n-    rf = RequestFactory(HTTP_X_REQUESTED_WITH='XMLHttpRequest')\n+    rf = RequestFactory(HTTP_ACCEPT='application/json')\n \n     def test_non_sensitive_request(self):\n         \"\"\"\n@@ -1346,8 +1346,8 @@ def test_custom_exception_reporter_filter(self):\n             self.verify_unsafe_response(custom_exception_reporter_filter_view, check_for_vars=False)\n \n     @override_settings(DEBUG=True, ROOT_URLCONF='view_tests.urls')\n-    def test_ajax_response_encoding(self):\n-        response = self.client.get('/raises500/', HTTP_X_REQUESTED_WITH='XMLHttpRequest')\n+    def test_non_html_response_encoding(self):\n+        response = self.client.get('/raises500/', HTTP_ACCEPT='application/json')\n         self.assertEqual(response['Content-Type'], 'text/plain; charset=utf-8')\n \n \ndiff --git a/tests/view_tests/tests/test_i18n.py b/tests/view_tests/tests/test_i18n.py\n--- a/tests/view_tests/tests/test_i18n.py\n+++ b/tests/view_tests/tests/test_i18n.py\n@@ -111,11 +111,12 @@ def test_setlang_default_redirect(self):\n \n     def test_setlang_performs_redirect_for_ajax_if_explicitly_requested(self):\n         \"\"\"\n-        The set_language view redirects to the \"next\" parameter for AJAX calls.\n+        The set_language view redirects to the \"next\" parameter for requests\n+        not accepting HTML response content.\n         \"\"\"\n         lang_code = self._get_inactive_language_code()\n         post_data = {'language': lang_code, 'next': '/'}\n-        response = self.client.post('/i18n/setlang/', post_data, HTTP_X_REQUESTED_WITH='XMLHttpRequest')\n+        response = self.client.post('/i18n/setlang/', post_data, HTTP_ACCEPT='application/json')\n         self.assertRedirects(response, '/')\n         self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n         with ignore_warnings(category=RemovedInDjango40Warning):\n@@ -123,12 +124,12 @@ def test_setlang_performs_redirect_for_ajax_if_explicitly_requested(self):\n \n     def test_setlang_doesnt_perform_a_redirect_to_referer_for_ajax(self):\n         \"\"\"\n-        The set_language view doesn't redirect to the HTTP referer header for\n-        AJAX calls.\n+        The set_language view doesn't redirect to the HTTP referer header if\n+        the request doesn't accept HTML response content.\n         \"\"\"\n         lang_code = self._get_inactive_language_code()\n         post_data = {'language': lang_code}\n-        headers = {'HTTP_REFERER': '/', 'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest'}\n+        headers = {'HTTP_REFERER': '/', 'HTTP_ACCEPT': 'application/json'}\n         response = self.client.post('/i18n/setlang/', post_data, **headers)\n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n@@ -137,11 +138,12 @@ def test_setlang_doesnt_perform_a_redirect_to_referer_for_ajax(self):\n \n     def test_setlang_doesnt_perform_a_default_redirect_for_ajax(self):\n         \"\"\"\n-        The set_language view returns 204 for AJAX calls by default.\n+        The set_language view returns 204 by default for requests not accepting\n+        HTML response content.\n         \"\"\"\n         lang_code = self._get_inactive_language_code()\n         post_data = {'language': lang_code}\n-        response = self.client.post('/i18n/setlang/', post_data, HTTP_X_REQUESTED_WITH='XMLHttpRequest')\n+        response = self.client.post('/i18n/setlang/', post_data, HTTP_ACCEPT='application/json')\n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n         with ignore_warnings(category=RemovedInDjango40Warning):\n@@ -149,11 +151,12 @@ def test_setlang_doesnt_perform_a_default_redirect_for_ajax(self):\n \n     def test_setlang_unsafe_next_for_ajax(self):\n         \"\"\"\n-        The fallback to root URL for the set_language view works for AJAX calls.\n+        The fallback to root URL for the set_language view works for requests\n+        not accepting HTML response content.\n         \"\"\"\n         lang_code = self._get_inactive_language_code()\n         post_data = {'language': lang_code, 'next': '//unsafe/redirection/'}\n-        response = self.client.post('/i18n/setlang/', post_data, HTTP_X_REQUESTED_WITH='XMLHttpRequest')\n+        response = self.client.post('/i18n/setlang/', post_data, HTTP_ACCEPT='application/json')\n         self.assertEqual(response.url, '/')\n         self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n \n",
  "problem_statement": "Deprecate HttpRequest.is_ajax.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nAs discussed on â€‹this django-developers thread this should be deprecated.\nIt inspects the non-standard header X-Requested-Wiith that is set by jQuery and maybe other frameworks. However jQuery's popularity, especially for making requests, is decreasing thanks to changes such as the new fetch() JS API.\nAlso in the cases this property is used to determine the kind of content to send to a client, it'd be better to inspect the HTTP standard Accept header.\nFor these reasons Flask has deprecated its similar property is_xhr.\n",
  "hints_text": "The first step would be to document current limitations of the method. Second step would be to avoid using it as much as possible in Django's own code. Finally the deprecation can take place. It remains to be shown how the â€‹request.accepts proposal can play a role here. A good exercise would be to replace that example: â€‹https://docs.djangoproject.com/en/2.2/topics/class-based-views/generic-editing/#ajax-example (or would you simply remove it?)",
  "created_at": "2019-11-18T08:31:16Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_setlang_doesnt_perform_a_default_redirect_for_ajax (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_doesnt_perform_a_redirect_to_referer_for_ajax (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_non_english_default_english_userpref (view_tests.tests.test_i18n.I18NViewTests)\", \"test_non_html_response_encoding (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\"]",
  "PASS_TO_PASS": "[\"test_sensitive_post_parameters_not_called (view_tests.tests.test_debug.DecoratorsTests)\", \"test_sensitive_variables_not_called (view_tests.tests.test_debug.DecoratorsTests)\", \"test_repr (view_tests.tests.test_debug.CallableSettingWrapperTests)\", \"test_cleansed_substitute_override (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_hidden_settings_override (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_setting_allows_custom_subclass (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_is_ajax (requests.test_is_ajax_deprecations.TestDeprecatedIsAjax)\", \"test_lang_from_translated_i18n_pattern (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_session_language_deprecation (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_cookie (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_decodes_http_referer_url (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_default_redirect (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_http_next (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_performs_redirect_for_ajax_if_explicitly_requested (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_redirect_to_referer (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_reversal (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_unsafe_next (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_setlang_unsafe_next_for_ajax (view_tests.tests.test_i18n.SetLanguageTests)\", \"test_handle_db_exception (view_tests.tests.test_debug.DebugViewQueriesAllowedTests)\", \"test_escaping (view_tests.tests.test_i18n.I18NViewTests)\", \"test_get_formats (view_tests.tests.test_i18n.I18NViewTests)\", \"test_i18n_different_non_english_languages (view_tests.tests.test_i18n.I18NViewTests)\", \"test_i18n_english_variant (view_tests.tests.test_i18n.I18NViewTests)\", \"test_i18n_fallback_language_plural (view_tests.tests.test_i18n.I18NViewTests)\", \"test_i18n_language_english_default (view_tests.tests.test_i18n.I18NViewTests)\", \"test_i18n_language_non_english_default (view_tests.tests.test_i18n.I18NViewTests)\", \"test_i18n_language_non_english_fallback (view_tests.tests.test_i18n.I18NViewTests)\", \"test_i18n_unknown_package_error (view_tests.tests.test_i18n.I18NViewTests)\", \"test_i18n_with_locale_paths (view_tests.tests.test_i18n.I18NViewTests)\", \"The javascript_catalog can be deployed with language settings\", \"test_jsi18n_USE_I18N_False (view_tests.tests.test_i18n.I18NViewTests)\", \"test_jsi18n_fallback_language (view_tests.tests.test_i18n.I18NViewTests)\", \"test_jsi18n_with_missing_en_files (view_tests.tests.test_i18n.I18NViewTests)\", \"test_jsoni18n (view_tests.tests.test_i18n.I18NViewTests)\", \"test_jsoni18n_with_missing_en_files (view_tests.tests.test_i18n.I18NViewTests)\", \"test_non_BMP_char (view_tests.tests.test_i18n.I18NViewTests)\", \"test_400 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_403 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_404 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_template_not_found_error (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"An exception report can be generated even for a disallowed host.\", \"test_message_only (view_tests.tests.test_debug.PlainTextReportTests)\", \"An exception report can be generated for just a request\", \"An exception report can be generated without request\", \"A simple exception report can be generated\", \"A message can be provided in addition to a request\", \"test_request_with_items_key (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"test_non_sensitive_request (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"test_paranoid_request (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"test_sensitive_request (view_tests.tests.test_debug.NonHTMLResponseExceptionReporterFilter)\", \"test_400 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_empty_path_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_classbased_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_default_urlconf_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_files (view_tests.tests.test_debug.DebugViewTests)\", \"test_no_template_source_loaders (view_tests.tests.test_debug.DebugViewTests)\", \"test_non_l10ned_numeric_ids (view_tests.tests.test_debug.DebugViewTests)\", \"test_regression_21530 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404_converter_raise_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_encoding (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_exceptions (view_tests.tests.test_debug.DebugViewTests)\", \"Tests for not existing file\", \"test_encoding_error (view_tests.tests.test_debug.ExceptionReporterTests)\", \"The ExceptionReporter supports Unix, Windows and Macintosh EOL markers\", \"test_exception_fetching_user (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_ignore_traceback_evaluation_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Safe strings in local variables are escaped.\", \"test_message_only (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Non-UTF-8 exceptions/values should not make the output generation choke.\", \"test_reporting_frames_for_cyclic_reference (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_source_not_match (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_without_source (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_of_nested_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_request_with_items_key (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_template_encoding (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Large values should not create a large HTML.\", \"test_unfrozen_importlib (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Unprintable values should not make the output generation choke.\", \"test_callable_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_callable_settings_forbidding_to_set_attributes (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_basic (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_ignore_case (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_recurses_in_dictionary (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_dict_setting_with_non_str_key (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_exception_report_uses_meta_filtering (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_multivalue_dict_key_error (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_non_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_paranoid_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_request_meta_filtering (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_keyword_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_method (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_settings_with_sensitive_keys (view_tests.tests.test_debug.ExceptionReporterFilterTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.592384",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}