{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-4684",
  "base_commit": "0f1eb96c924bad60ea87edd9139325adabfefa33",
  "patch": "diff --git a/xarray/coding/times.py b/xarray/coding/times.py\n--- a/xarray/coding/times.py\n+++ b/xarray/coding/times.py\n@@ -26,6 +26,7 @@\n _STANDARD_CALENDARS = {\"standard\", \"gregorian\", \"proleptic_gregorian\"}\n \n _NS_PER_TIME_DELTA = {\n+    \"ns\": 1,\n     \"us\": int(1e3),\n     \"ms\": int(1e6),\n     \"s\": int(1e9),\n@@ -35,7 +36,15 @@\n }\n \n TIME_UNITS = frozenset(\n-    [\"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\", \"microseconds\"]\n+    [\n+        \"days\",\n+        \"hours\",\n+        \"minutes\",\n+        \"seconds\",\n+        \"milliseconds\",\n+        \"microseconds\",\n+        \"nanoseconds\",\n+    ]\n )\n \n \n@@ -44,6 +53,7 @@ def _netcdf_to_numpy_timeunit(units):\n     if not units.endswith(\"s\"):\n         units = \"%ss\" % units\n     return {\n+        \"nanoseconds\": \"ns\",\n         \"microseconds\": \"us\",\n         \"milliseconds\": \"ms\",\n         \"seconds\": \"s\",\n@@ -151,21 +161,22 @@ def _decode_datetime_with_pandas(flat_num_dates, units, calendar):\n         # strings, in which case we fall back to using cftime\n         raise OutOfBoundsDatetime\n \n-    # fixes: https://github.com/pydata/pandas/issues/14068\n-    # these lines check if the the lowest or the highest value in dates\n-    # cause an OutOfBoundsDatetime (Overflow) error\n-    with warnings.catch_warnings():\n-        warnings.filterwarnings(\"ignore\", \"invalid value encountered\", RuntimeWarning)\n-        pd.to_timedelta(flat_num_dates.min(), delta) + ref_date\n-        pd.to_timedelta(flat_num_dates.max(), delta) + ref_date\n-\n-    # Cast input dates to integers of nanoseconds because `pd.to_datetime`\n-    # works much faster when dealing with integers\n-    # make _NS_PER_TIME_DELTA an array to ensure type upcasting\n-    flat_num_dates_ns_int = (\n-        flat_num_dates.astype(np.float64) * _NS_PER_TIME_DELTA[delta]\n-    ).astype(np.int64)\n+    # To avoid integer overflow when converting to nanosecond units for integer\n+    # dtypes smaller than np.int64 cast all integer-dtype arrays to np.int64\n+    # (GH 2002).\n+    if flat_num_dates.dtype.kind == \"i\":\n+        flat_num_dates = flat_num_dates.astype(np.int64)\n \n+    # Cast input ordinals to integers of nanoseconds because pd.to_timedelta\n+    # works much faster when dealing with integers (GH 1399).\n+    flat_num_dates_ns_int = (flat_num_dates * _NS_PER_TIME_DELTA[delta]).astype(\n+        np.int64\n+    )\n+\n+    # Use pd.to_timedelta to safely cast integer values to timedeltas,\n+    # and add those to a Timestamp to safely produce a DatetimeIndex.  This\n+    # ensures that we do not encounter integer overflow at any point in the\n+    # process without raising OutOfBoundsDatetime.\n     return (pd.to_timedelta(flat_num_dates_ns_int, \"ns\") + ref_date).values\n \n \n@@ -252,11 +263,24 @@ def decode_cf_timedelta(num_timedeltas, units):\n \n \n def _infer_time_units_from_diff(unique_timedeltas):\n-    for time_unit in [\"days\", \"hours\", \"minutes\", \"seconds\"]:\n+    # Note that the modulus operator was only implemented for np.timedelta64\n+    # arrays as of NumPy version 1.16.0.  Once our minimum version of NumPy\n+    # supported is greater than or equal to this we will no longer need to cast\n+    # unique_timedeltas to a TimedeltaIndex.  In the meantime, however, the\n+    # modulus operator works for TimedeltaIndex objects.\n+    unique_deltas_as_index = pd.TimedeltaIndex(unique_timedeltas)\n+    for time_unit in [\n+        \"days\",\n+        \"hours\",\n+        \"minutes\",\n+        \"seconds\",\n+        \"milliseconds\",\n+        \"microseconds\",\n+        \"nanoseconds\",\n+    ]:\n         delta_ns = _NS_PER_TIME_DELTA[_netcdf_to_numpy_timeunit(time_unit)]\n         unit_delta = np.timedelta64(delta_ns, \"ns\")\n-        diffs = unique_timedeltas / unit_delta\n-        if np.all(diffs == diffs.astype(int)):\n+        if np.all(unique_deltas_as_index % unit_delta == np.timedelta64(0, \"ns\")):\n             return time_unit\n     return \"seconds\"\n \n@@ -416,7 +440,15 @@ def encode_cf_datetime(dates, units=None, calendar=None):\n         # Wrap the dates in a DatetimeIndex to do the subtraction to ensure\n         # an OverflowError is raised if the ref_date is too far away from\n         # dates to be encoded (GH 2272).\n-        num = (pd.DatetimeIndex(dates.ravel()) - ref_date) / time_delta\n+        dates_as_index = pd.DatetimeIndex(dates.ravel())\n+        time_deltas = dates_as_index - ref_date\n+\n+        # Use floor division if time_delta evenly divides all differences\n+        # to preserve integer dtype if possible (GH 4045).\n+        if np.all(time_deltas % time_delta == np.timedelta64(0, \"ns\")):\n+            num = time_deltas // time_delta\n+        else:\n+            num = time_deltas / time_delta\n         num = num.values.reshape(dates.shape)\n \n     except (OutOfBoundsDatetime, OverflowError):\n",
  "test_patch": "diff --git a/xarray/tests/test_coding_times.py b/xarray/tests/test_coding_times.py\n--- a/xarray/tests/test_coding_times.py\n+++ b/xarray/tests/test_coding_times.py\n@@ -6,7 +6,7 @@\n import pytest\n from pandas.errors import OutOfBoundsDatetime\n \n-from xarray import DataArray, Dataset, Variable, coding, decode_cf\n+from xarray import DataArray, Dataset, Variable, coding, conventions, decode_cf\n from xarray.coding.times import (\n     cftime_to_nptime,\n     decode_cf_datetime,\n@@ -479,27 +479,36 @@ def test_decoded_cf_datetime_array_2d():\n     assert_array_equal(np.asarray(result), expected)\n \n \n+FREQUENCIES_TO_ENCODING_UNITS = {\n+    \"N\": \"nanoseconds\",\n+    \"U\": \"microseconds\",\n+    \"L\": \"milliseconds\",\n+    \"S\": \"seconds\",\n+    \"T\": \"minutes\",\n+    \"H\": \"hours\",\n+    \"D\": \"days\",\n+}\n+\n+\n+@pytest.mark.parametrize((\"freq\", \"units\"), FREQUENCIES_TO_ENCODING_UNITS.items())\n+def test_infer_datetime_units(freq, units):\n+    dates = pd.date_range(\"2000\", periods=2, freq=freq)\n+    expected = f\"{units} since 2000-01-01 00:00:00\"\n+    assert expected == coding.times.infer_datetime_units(dates)\n+\n+\n @pytest.mark.parametrize(\n     [\"dates\", \"expected\"],\n     [\n-        (pd.date_range(\"1900-01-01\", periods=5), \"days since 1900-01-01 00:00:00\"),\n-        (\n-            pd.date_range(\"1900-01-01 12:00:00\", freq=\"H\", periods=2),\n-            \"hours since 1900-01-01 12:00:00\",\n-        ),\n         (\n             pd.to_datetime([\"1900-01-01\", \"1900-01-02\", \"NaT\"]),\n             \"days since 1900-01-01 00:00:00\",\n         ),\n-        (\n-            pd.to_datetime([\"1900-01-01\", \"1900-01-02T00:00:00.005\"]),\n-            \"seconds since 1900-01-01 00:00:00\",\n-        ),\n         (pd.to_datetime([\"NaT\", \"1900-01-01\"]), \"days since 1900-01-01 00:00:00\"),\n         (pd.to_datetime([\"NaT\"]), \"days since 1970-01-01 00:00:00\"),\n     ],\n )\n-def test_infer_datetime_units(dates, expected):\n+def test_infer_datetime_units_with_NaT(dates, expected):\n     assert expected == coding.times.infer_datetime_units(dates)\n \n \n@@ -535,6 +544,7 @@ def test_infer_cftime_datetime_units(calendar, date_args, expected):\n         (\"1h\", \"hours\", np.int64(1)),\n         (\"1ms\", \"milliseconds\", np.int64(1)),\n         (\"1us\", \"microseconds\", np.int64(1)),\n+        (\"1ns\", \"nanoseconds\", np.int64(1)),\n         ([\"NaT\", \"0s\", \"1s\"], None, [np.nan, 0, 1]),\n         ([\"30m\", \"60m\"], \"hours\", [0.5, 1.0]),\n         (\"NaT\", \"days\", np.nan),\n@@ -958,3 +968,30 @@ def test_decode_ambiguous_time_warns(calendar):\n         assert not record\n \n     np.testing.assert_array_equal(result, expected)\n+\n+\n+@pytest.mark.parametrize(\"encoding_units\", FREQUENCIES_TO_ENCODING_UNITS.values())\n+@pytest.mark.parametrize(\"freq\", FREQUENCIES_TO_ENCODING_UNITS.keys())\n+def test_encode_cf_datetime_defaults_to_correct_dtype(encoding_units, freq):\n+    times = pd.date_range(\"2000\", periods=3, freq=freq)\n+    units = f\"{encoding_units} since 2000-01-01\"\n+    encoded, _, _ = coding.times.encode_cf_datetime(times, units)\n+\n+    numpy_timeunit = coding.times._netcdf_to_numpy_timeunit(encoding_units)\n+    encoding_units_as_timedelta = np.timedelta64(1, numpy_timeunit)\n+    if pd.to_timedelta(1, freq) >= encoding_units_as_timedelta:\n+        assert encoded.dtype == np.int64\n+    else:\n+        assert encoded.dtype == np.float64\n+\n+\n+@pytest.mark.parametrize(\"freq\", FREQUENCIES_TO_ENCODING_UNITS.keys())\n+def test_encode_decode_roundtrip(freq):\n+    # See GH 4045. Prior to GH 4684 this test would fail for frequencies of\n+    # \"S\", \"L\", \"U\", and \"N\".\n+    initial_time = pd.date_range(\"1678-01-01\", periods=1)\n+    times = initial_time.append(pd.date_range(\"1968\", periods=2, freq=freq))\n+    variable = Variable([\"time\"], times)\n+    encoded = conventions.encode_cf_variable(variable)\n+    decoded = conventions.decode_cf_variable(\"time\", encoded)\n+    assert_equal(variable, decoded)\n",
  "problem_statement": "Millisecond precision is lost on datetime64 during IO roundtrip\n<!-- A short summary of the issue, if appropriate -->\r\nI have millisecond-resolution time data as a coordinate on a DataArray. That data loses precision when round-tripping through disk.\r\n\r\n#### MCVE Code Sample\r\n<!-- In order for the maintainers to efficiently understand and prioritize issues, we ask you post a \"Minimal, Complete and Verifiable Example\" (MCVE): http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports -->\r\n\r\n[bug_data.p.zip](https://github.com/pydata/xarray/files/4595145/bug_data.p.zip)\r\n\r\nUnzip the data. It will result in a pickle file.\r\n\r\n```python\r\nbug_data_path = '/path/to/unzipped/bug_data.p'\r\ntmp_path = '~/Desktop/test.nc'\r\n\r\nwith open(bug_data_path, 'rb') as f:\r\n    data = pickle.load(f)\r\n\r\nselector = dict(animal=0, timepoint=0, wavelength='410', pair=0)\r\n\r\nbefore_disk_ts = data.time.sel(**selector).values[()]\r\n\r\ndata.time.encoding = {'units': 'microseconds since 1900-01-01', 'calendar': 'proleptic_gregorian'}\r\n\r\ndata.to_netcdf(tmp_path)\r\nafter_disk_ts = xr.load_dataarray(tmp_path).time.sel(**selector).values[()]\r\n\r\nprint(f'before roundtrip: {before_disk_ts}')\r\nprint(f' after roundtrip: {after_disk_ts}')\r\n```\r\noutput:\r\n```\r\nbefore roundtrip: 2017-02-22T16:24:10.586000000\r\nafter roundtrip:  2017-02-22T16:24:10.585999872\r\n```\r\n\r\n#### Expected Output\r\n```\r\nBefore: 2017-02-22T16:24:10.586000000\r\nAfter:  2017-02-22T16:24:10.586000000\r\n```\r\n\r\n#### Problem Description\r\n<!-- this should explain why the current behavior is a problem and why the expected output is a better solution -->\r\n\r\nAs you can see, I lose millisecond precision in this data. (The same happens when I use millisecond in the encoding).\r\n\r\n#### Versions\r\n\r\n<details><summary>Output of <tt>xr.show_versions()</tt></summary>\r\n\r\n<!-- Paste the output here xr.show_versions() here -->\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 22:05:27) \r\n[Clang 9.0.1 ]\r\npython-bits: 64\r\nOS: Darwin\r\nOS-release: 19.4.0\r\nmachine: x86_64\r\nprocessor: i386\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: None.UTF-8\r\nlibhdf5: 1.10.5\r\nlibnetcdf: 4.7.3\r\n\r\nxarray: 0.15.1\r\npandas: 1.0.1\r\nnumpy: 1.18.1\r\nscipy: 1.4.1\r\nnetCDF4: 1.5.3\r\npydap: None\r\nh5netcdf: 0.8.0\r\nh5py: 2.10.0\r\nNio: None\r\nzarr: None\r\ncftime: 1.0.4.2\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: None\r\ndask: 2.11.0\r\ndistributed: 2.14.0\r\nmatplotlib: 3.1.3\r\ncartopy: None\r\nseaborn: 0.10.0\r\nnumbagg: None\r\nsetuptools: 45.2.0.post20200209\r\npip: 20.0.2\r\nconda: None\r\npytest: 5.3.5\r\nIPython: 7.12.0\r\nsphinx: 2.4.3\r\n\r\n</details>\r\n\n",
  "hints_text": "This has something to do with the time values at some point being a float:\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> np.datetime64(\"2017-02-22T16:24:10.586000000\").astype(\"float64\").astype(np.dtype('<M8[ns]'))\r\nnumpy.datetime64('2017-02-22T16:24:10.585999872')\r\n```\r\n\r\nIt looks like this is happening somewhere in the [cftime](https://github.com/Unidata/cftime/blob/master/cftime/_cftime.pyx#L870) library.\nThanks for the report @half-adder.\r\n\r\nThis indeed is related to times being encoded as floats, but actually is not cftime-related (the times here not being encoded using cftime; we only use cftime for non-standard calendars and out of nanosecond-resolution bounds dates).  \r\n\r\nHere's a minimal working example that illustrates the issue with the current logic in [`coding.times.encode_cf_datetime`](https://github.com/pydata/xarray/blob/69548df9826cde9df6cbdae9c033c9fb1e62d493/xarray/coding/times.py#L343-L389):\r\n```\r\nIn [1]: import numpy as np; import pandas as pd\r\n\r\nIn [2]: times = pd.DatetimeIndex([np.datetime64(\"2017-02-22T16:27:08.732000000\")])\r\n\r\nIn [3]: reference = pd.Timestamp(\"1900-01-01\")\r\n\r\nIn [4]: units = np.timedelta64(1, \"us\")\r\n\r\nIn [5]: (times - reference).values[0]\r\nOut[5]: numpy.timedelta64(3696769628732000000,'ns')\r\n\r\nIn [6]: ((times - reference) / units).values[0]\r\nOut[6]: 3696769628732000.5\r\n```\r\nIn principle, we should be able to represent the difference between this date and the reference date in an integer amount of microseconds, but timedelta division produces a float.  We currently [try to cast these floats to integers when possible](https://github.com/pydata/xarray/blob/69548df9826cde9df6cbdae9c033c9fb1e62d493/xarray/coding/times.py#L388), but that's not always safe to do, e.g. in the case above.\r\n\r\nIt would be great to make roundtripping times -- particularly standard calendar datetimes like these -- more robust.  It's possible we could now leverage [floor division (i.e. `//`) of timedeltas within NumPy](https://github.com/numpy/numpy/pull/12308) for this (assuming we first check that the unit conversion divisor exactly divides each timedelta; if it doesn't we'd fall back to using floats):\r\n\r\n```\r\nIn [7]: ((times - reference) // units).values[0]\r\nOut[7]: 3696769628732000\r\n```\r\nThese precision issues can be tricky, however, so we'd need to think things through carefully.  Even if we fixed this on the encoding side, [things are converted to floats during decoding](https://github.com/pydata/xarray/blob/69548df9826cde9df6cbdae9c033c9fb1e62d493/xarray/coding/times.py#L125-L132), so we'd need to make a change there too.\nJust stumbled upon this as well. Internally, `datetime64[ns]` is simply an 8-byte int. Why on earth would it be serialized in a lossy way as a float64?...\r\n\r\nSimply telling it to `encoding={...: {'dtype': 'int64'}}` won't work since then it complains about serializing float as an int.\r\n\r\nIs there a way out of this, other than not using `M8[ns]` dtypes at all with xarray?\r\n\r\nThis is a huge issue, as anyone using nanosecond-precision timestamps with xarray would unknowingly and silently read wrong data after deserializing.\n> Internally, datetime64[ns] is simply an 8-byte int. Why on earth would it be serialized in a lossy way as a float64?...\r\n\r\nThe short answer is that [CF conventions allow for dates to be encoded with floating point values](https://cfconventions.org/Data/cf-conventions/cf-conventions-1.8/cf-conventions.html#time-coordinate), so we encounter that in data that xarray ingests from other sources (i.e. files that were not even produced with Python, let alone xarray).  If we didn't have to worry about roundtripping files that followed those conventions, I agree we would just encode everything with nanosecond units as `int64` values.  \r\n\r\n> This is a huge issue, as anyone using nanosecond-precision timestamps with xarray would unknowingly and silently read wrong data after deserializing.\r\n\r\nYes, I can see why this would be quite frustrating.  In principle we should be able to handle this (contributions are welcome); it just has not been a priority up to this point.  In my experience xarray's current encoding and decoding methods for standard calendar times work well up to at least second precision.\nCan we use the `encoding[\"dtype\"]` field to solve this? i.e. use `int64` when `encoding[\"dtype\"]` is not set and use the specified value when available?\n> In principle we should be able to handle this (contributions are welcome)\r\n\r\nI don't mind contributing but not knowing the netcdf stuff inside out I'm not sure I have a good vision on what's the proper way to do it. My use case is very simple - I have an in-memory xr.Dataset that I want to save() and then load() without losses.\r\n\r\nShould it just be an `xr.save(..., m8=True)` (or whatever that flag would be called), so that all of numpy's `M8[...]` and `m8[...]` would be serialized transparently (as int64, that is) without passing them through the whole cftime pipeline. It would be then nice, of course, if `xr.load` was also aware of this convention (via some special attribute or somehow else) and could convert them back like `.view('M8[ns]')` when loading. I think xarray should also throw an exception if it detects timestamps/timedeltas of nanosecond precision that it can't serialize without going through int-float-int routine (or automatically revert to using this transparent but netcdf-incompatible mode).\r\n\r\nMaybe this is not the proper way to do it - ideas welcome (there's also an open PR - #4400 - mind checking that out?)\n> Can we use the encoding[\"dtype\"] field to solve this? i.e. use int64 when encoding[\"dtype\"] is not set and use the specified value when available?\r\n\r\nI think a lot of logic needs to be reshuffled, because as of right now it will complain \"you can't store a float64 in int64\" or something along those lines, when trying to do it with a nanosecond timestamp.\nI would look here: https://github.com/pydata/xarray/blob/255bc8ee9cbe8b212e3262b0d4b2e32088a08064/xarray/coding/times.py#L440-L474",
  "created_at": "2020-12-12T21:43:57Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_coding_times.py::test_infer_datetime_units[N-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[U-microseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1ns-nanoseconds-numbers5]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[N-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[U-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[L-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[S-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[T-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[H-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[D-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip[N]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip[U]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip[L]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip[S]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates1-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates2-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates3-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates4-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates5-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates6-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates7-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates8-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates9-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates10-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates11-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates12-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates13-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates14-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates15-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates16-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates17-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates18-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates19-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates20-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates21-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates22-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates23-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[10-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates27-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates28-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates29-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates30-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates31-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates32-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates33-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates34-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates35-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates36-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates37-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates38-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates42-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates43-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates44-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates45-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates46-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates47-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates48-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates49-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates50-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates51-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates52-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates53-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates54-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates55-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates56-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[17093352.0-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates60-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates61-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates62-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-milliseconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-microseconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates69-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates70-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates71-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates72-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates73-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates74-hour\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_overflow\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_standard_units\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_iso_strings\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[360_day-720058.0]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[all_leap-732059.0]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[366_day-732059.0]\", \"xarray/tests/test_coding_times.py::test_decode_360_day_calendar\", \"xarray/tests/test_coding_times.py::test_decode_abbreviation\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates1-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates2-days\", \"xarray/tests/test_coding_times.py::test_decoded_cf_datetime_array_2d\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[S-seconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[T-minutes]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[H-hours]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[D-days]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates0-days\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates1-days\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates2-days\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args0-days\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args1-seconds\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args2-days\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1D-days-numbers0]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas1-days-numbers1]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1h-hours-numbers2]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1ms-milliseconds-numbers3]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1us-microseconds-numbers4]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas6-None-numbers6]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas7-hours-numbers7]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[NaT-days-nan]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas9-days-numbers9]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta_2d\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas0-days]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas1-hours]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas2-minutes]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas3-seconds]\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args0-0001-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args1-0010-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args2-0100-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args3-1000-02-03\", \"xarray/tests/test_coding_times.py::test_decode_cf[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_cf[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[julian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_cf[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[standard]\", \"xarray/tests/test_coding_times.py::test_decode_cf_time_bounds\", \"xarray/tests/test_coding_times.py::test_encode_time_bounds\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data0]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data1]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data0]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data1]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_overflow[shape0]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_overflow[shape1]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_overflow[shape2]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_pandas_min\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[360_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[365_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[366_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[all_leap]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[gregorian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[julian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[noleap]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[julian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[standard]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[N-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[N-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[N-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[N-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[N-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[N-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[U-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[U-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[U-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[U-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[U-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[U-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[L-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[L-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[L-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[L-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[L-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[S-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[S-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[S-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[S-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[S-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[S-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[T-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[T-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[T-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[T-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[T-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[T-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[H-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[H-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[H-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[H-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[H-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[H-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[D-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[D-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[D-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[D-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[D-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[D-days]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip[T]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip[H]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip[D]\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.881236",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}