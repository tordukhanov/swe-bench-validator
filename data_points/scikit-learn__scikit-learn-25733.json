{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-25733",
  "base_commit": "eae3f294d3ba8ae636730537faef4cdd612083ff",
  "patch": "diff --git a/sklearn/utils/deprecation.py b/sklearn/utils/deprecation.py\n--- a/sklearn/utils/deprecation.py\n+++ b/sklearn/utils/deprecation.py\n@@ -60,17 +60,18 @@ def _decorate_class(self, cls):\n         if self.extra:\n             msg += \"; %s\" % self.extra\n \n-        # FIXME: we should probably reset __new__ for full generality\n-        init = cls.__init__\n+        new = cls.__new__\n \n-        def wrapped(*args, **kwargs):\n+        def wrapped(cls, *args, **kwargs):\n             warnings.warn(msg, category=FutureWarning)\n-            return init(*args, **kwargs)\n+            if new is object.__new__:\n+                return object.__new__(cls)\n+            return new(cls, *args, **kwargs)\n \n-        cls.__init__ = wrapped\n+        cls.__new__ = wrapped\n \n-        wrapped.__name__ = \"__init__\"\n-        wrapped.deprecated_original = init\n+        wrapped.__name__ = \"__new__\"\n+        wrapped.deprecated_original = new\n \n         return cls\n \n",
  "test_patch": "diff --git a/sklearn/tests/test_docstring_parameters.py b/sklearn/tests/test_docstring_parameters.py\n--- a/sklearn/tests/test_docstring_parameters.py\n+++ b/sklearn/tests/test_docstring_parameters.py\n@@ -109,12 +109,11 @@ def test_docstring_parameters():\n                     \"Error for __init__ of %s in %s:\\n%s\" % (cls, name, w[0])\n                 )\n \n-            cls_init = getattr(cls, \"__init__\", None)\n-\n-            if _is_deprecated(cls_init):\n+            # Skip checks on deprecated classes\n+            if _is_deprecated(cls.__new__):\n                 continue\n-            elif cls_init is not None:\n-                this_incorrect += check_docstring_parameters(cls.__init__, cdoc)\n+\n+            this_incorrect += check_docstring_parameters(cls.__init__, cdoc)\n \n             for method_name in cdoc.methods:\n                 method = getattr(cls, method_name)\ndiff --git a/sklearn/utils/tests/test_deprecation.py b/sklearn/utils/tests/test_deprecation.py\n--- a/sklearn/utils/tests/test_deprecation.py\n+++ b/sklearn/utils/tests/test_deprecation.py\n@@ -36,6 +36,22 @@ class MockClass4:\n     pass\n \n \n+class MockClass5(MockClass1):\n+    \"\"\"Inherit from deprecated class but does not call super().__init__.\"\"\"\n+\n+    def __init__(self, a):\n+        self.a = a\n+\n+\n+@deprecated(\"a message\")\n+class MockClass6:\n+    \"\"\"A deprecated class that overrides __new__.\"\"\"\n+\n+    def __new__(cls, *args, **kwargs):\n+        assert len(args) > 0\n+        return super().__new__(cls)\n+\n+\n @deprecated()\n def mock_function():\n     return 10\n@@ -48,6 +64,10 @@ def test_deprecated():\n         MockClass2().method()\n     with pytest.warns(FutureWarning, match=\"deprecated\"):\n         MockClass3()\n+    with pytest.warns(FutureWarning, match=\"qwerty\"):\n+        MockClass5(42)\n+    with pytest.warns(FutureWarning, match=\"a message\"):\n+        MockClass6(42)\n     with pytest.warns(FutureWarning, match=\"deprecated\"):\n         val = mock_function()\n     assert val == 10\n@@ -56,10 +76,11 @@ def test_deprecated():\n def test_is_deprecated():\n     # Test if _is_deprecated helper identifies wrapping via deprecated\n     # NOTE it works only for class methods and functions\n-    assert _is_deprecated(MockClass1.__init__)\n+    assert _is_deprecated(MockClass1.__new__)\n     assert _is_deprecated(MockClass2().method)\n     assert _is_deprecated(MockClass3.__init__)\n     assert not _is_deprecated(MockClass4.__init__)\n+    assert _is_deprecated(MockClass5.__new__)\n     assert _is_deprecated(mock_function)\n \n \n",
  "problem_statement": "FutureWarning is not issued for deprecated class\nFutureWarning is not issued when using `BaseNB` as a baseclass but its `__init__()` is not called in the subclass, here: https://github.com/astroML/astroML/blob/master/astroML/classification/gmm_bayes.py#L15\r\n\r\n```\r\nIn [1]: from astroML.classification import GMMBayes                                                                                                                                \r\n\r\nIn [2]: GMMBayes()                                                                                                                                                                 \r\nOut[2]: GMMBayes(n_components=array([1]))\r\n```\r\n\r\nAs the comment suggest in your `deprecated` decorator, overriding ``__new__`` in the class decorator indeed solves this issue.\r\n\r\n```\r\nIn [4]: from astroML.classification import GMMBayes                                                                                                                                \r\n\r\nIn [5]: GMMBayes()                                                                                                                                                                 \r\n/Users/bsipocz/munka/devel/scikit-learn/sklearn/utils/deprecation.py:73: FutureWarning: Class BaseNB is deprecated; BaseNB is deprecated in version 0.22 and will be removed in version 0.24.\r\n  warnings.warn(msg, category=FutureWarning)\r\nOut[5]: GMMBayes(n_components=array([1]))\r\n```\r\n\r\nI'm  happy to open a PR with the fix.\r\n\r\nAlso, relatedly, I wonder whether you would be interested in using a generic deprecation package instead. Basically we have the same functionality in astropy (I feel it's actually has more features e.g. this works there out of the box, it helps with arg renames/removals, etc.), there is also a deprecated decorator in matplotlib, and also a very basic one in numpy. I feel that having one for the wider ecosystem would be beneficial instead of the current system where we all roll our own. \r\nAt the numfocus summit I recall some interest from the mpl side, so I'm happy to get the ball rolling in this quoter if it's a thumb up from multiple projects.\r\n\r\n\r\n\r\nDarwin-17.7.0-x86_64-i386-64bit\r\nPython 3.7.5 (default, Nov  1 2019, 02:16:38) \r\n[Clang 10.0.0 (clang-1000.11.45.5)]\r\nNumPy 1.19.0.dev0+63ef78b\r\nSciPy 1.4.1\r\nScikit-Learn 0.23.dev0\r\n\r\n\r\n\r\n\r\n\r\n\r\n\nQuick fix for class deprecation decorator\nThis is a quick and dirty fix for my use case, but looking at the astropy decorator I suspect there may be some corner cases that still doesn't work.\r\n\r\n\r\n#### Reference Issues/PRs\r\n\r\ncloses #15994 \r\n\r\n\r\n\r\n\n",
  "hints_text": "\n@NicolasHug - this has fallen through the cracks. I'll try to come back and wrap it up over the weekend.\nDid you still want to work on this?\nyes, can come back to it after the sprint/once the current PR is opened.",
  "created_at": "2023-03-01T10:45:25Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_deprecation.py::test_deprecated\", \"sklearn/utils/tests/test_deprecation.py::test_is_deprecated\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_deprecation.py::test_pickle\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.021981",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}