{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-19093",
  "base_commit": "64d28fe0534f6993695d11244ea740f783958dc8",
  "patch": "diff --git a/sympy/assumptions/handlers/matrices.py b/sympy/assumptions/handlers/matrices.py\n--- a/sympy/assumptions/handlers/matrices.py\n+++ b/sympy/assumptions/handlers/matrices.py\n@@ -78,6 +78,8 @@ def MatrixSymbol(expr, assumptions):\n     def ZeroMatrix(expr, assumptions):\n         return ask(Q.square(expr), assumptions)\n \n+    OneMatrix = ZeroMatrix\n+\n     @staticmethod\n     def Transpose(expr, assumptions):\n         return ask(Q.symmetric(expr.arg), assumptions)\n@@ -138,6 +140,10 @@ def MatrixSymbol(expr, assumptions):\n \n     ZeroMatrix = staticmethod(CommonHandler.AlwaysFalse)\n \n+    @staticmethod\n+    def OneMatrix(expr, assumptions):\n+        return expr.shape[0] == 1 and expr.shape[1] == 1\n+\n     @staticmethod\n     def Transpose(expr, assumptions):\n         return ask(Q.invertible(expr.arg), assumptions)\n@@ -286,6 +292,10 @@ def MatPow(expr, assumptions):\n \n     ZeroMatrix = staticmethod(CommonHandler.AlwaysFalse)\n \n+    @staticmethod\n+    def OneMatrix(expr, assumptions):\n+        return expr.shape[0] == 1 and expr.shape[1] == 1\n+\n     @staticmethod\n     def Transpose(expr, assumptions):\n         return ask(Q.fullrank(expr.arg), assumptions)\n@@ -337,6 +347,10 @@ def MatrixSymbol(expr, assumptions):\n \n     ZeroMatrix = staticmethod(CommonHandler.AlwaysFalse)\n \n+    @staticmethod\n+    def OneMatrix(expr, assumptions):\n+        return expr.shape[0] == 1 and expr.shape[1] == 1\n+\n     @staticmethod\n     def Transpose(expr, assumptions):\n         return ask(Q.positive_definite(expr.arg), assumptions)\n@@ -386,6 +400,10 @@ def MatrixSymbol(expr, assumptions):\n \n     Identity, ZeroMatrix = [staticmethod(CommonHandler.AlwaysTrue)]*2\n \n+    @staticmethod\n+    def OneMatrix(expr, assumptions):\n+        return expr.shape[0] == 1 and expr.shape[1] == 1\n+\n     @staticmethod\n     def Transpose(expr, assumptions):\n         return ask(Q.lower_triangular(expr.arg), assumptions)\n@@ -439,6 +457,10 @@ def MatrixSymbol(expr, assumptions):\n \n     Identity, ZeroMatrix = [staticmethod(CommonHandler.AlwaysTrue)]*2\n \n+    @staticmethod\n+    def OneMatrix(expr, assumptions):\n+        return expr.shape[0] == 1 and expr.shape[1] == 1\n+\n     @staticmethod\n     def Transpose(expr, assumptions):\n         return ask(Q.upper_triangular(expr.arg), assumptions)\n@@ -502,6 +524,10 @@ def MatrixSymbol(expr, assumptions):\n     def ZeroMatrix(expr, assumptions):\n         return True\n \n+    @staticmethod\n+    def OneMatrix(expr, assumptions):\n+        return expr.shape[0] == 1 and expr.shape[1] == 1\n+\n     @staticmethod\n     def Transpose(expr, assumptions):\n         return ask(Q.diagonal(expr.arg), assumptions)\n@@ -567,7 +593,7 @@ def MatPow(expr, assumptions):\n \n     HadamardProduct, Determinant, Trace, Transpose = [MatAdd]*4\n \n-    ZeroMatrix, Identity = [staticmethod(CommonHandler.AlwaysTrue)]*2\n+    ZeroMatrix, OneMatrix, Identity = [staticmethod(CommonHandler.AlwaysTrue)]*3\n \n     MatMul = staticmethod(partial(MatMul_elements, Q.integer_elements,\n                                                    Q.integer))\ndiff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -1,7 +1,9 @@\n from __future__ import print_function, division\n \n from sympy import ask, Q\n-from sympy.core import Basic, Add\n+from sympy.core import Basic, Add, Mul, S\n+from sympy.core.sympify import _sympify\n+from sympy.matrices.common import NonInvertibleMatrixError\n from sympy.strategies import typed, exhaust, condition, do_one, unpack\n from sympy.strategies.traverse import bottom_up\n from sympy.utilities import sift\n@@ -12,7 +14,7 @@\n from sympy.matrices.expressions.matadd import MatAdd\n from sympy.matrices.expressions.matpow import MatPow\n from sympy.matrices.expressions.transpose import Transpose, transpose\n-from sympy.matrices.expressions.trace import Trace\n+from sympy.matrices.expressions.trace import trace\n from sympy.matrices.expressions.determinant import det, Determinant\n from sympy.matrices.expressions.slice import MatrixSlice\n from sympy.matrices.expressions.inverse import Inverse\n@@ -186,12 +188,14 @@ def _eval_transpose(self):\n \n     def _eval_trace(self):\n         if self.rowblocksizes == self.colblocksizes:\n-            return Add(*[Trace(self.blocks[i, i])\n+            return Add(*[trace(self.blocks[i, i])\n                         for i in range(self.blockshape[0])])\n         raise NotImplementedError(\n             \"Can't perform trace of irregular blockshape\")\n \n     def _eval_determinant(self):\n+        if self.blockshape == (1, 1):\n+            return det(self.blocks[0, 0])\n         if self.blockshape == (2, 2):\n             [[A, B],\n              [C, D]] = self.blocks.tolist()\n@@ -306,7 +310,7 @@ class BlockDiagMatrix(BlockMatrix):\n     sympy.matrices.dense.diag\n     \"\"\"\n     def __new__(cls, *mats):\n-        return Basic.__new__(BlockDiagMatrix, *mats)\n+        return Basic.__new__(BlockDiagMatrix, *[_sympify(m) for m in mats])\n \n     @property\n     def diag(self):\n@@ -339,8 +343,22 @@ def rowblocksizes(self):\n     def colblocksizes(self):\n         return [block.cols for block in self.args]\n \n+    def _all_square_blocks(self):\n+        \"\"\"Returns true if all blocks are square\"\"\"\n+        return all(mat.is_square for mat in self.args)\n+\n+    def _eval_determinant(self):\n+        if self._all_square_blocks():\n+            return Mul(*[det(mat) for mat in self.args])\n+        # At least one block is non-square.  Since the entire matrix must be square we know there must\n+        # be at least two blocks in this matrix, in which case the entire matrix is necessarily rank-deficient\n+        return S.Zero\n+\n     def _eval_inverse(self, expand='ignored'):\n-        return BlockDiagMatrix(*[mat.inverse() for mat in self.args])\n+        if self._all_square_blocks():\n+            return BlockDiagMatrix(*[mat.inverse() for mat in self.args])\n+        # See comment in _eval_determinant()\n+        raise NonInvertibleMatrixError('Matrix det == 0; not invertible.')\n \n     def _eval_transpose(self):\n         return BlockDiagMatrix(*[mat.transpose() for mat in self.args])\n@@ -526,7 +544,7 @@ def bc_transpose(expr):\n \n def bc_inverse(expr):\n     if isinstance(expr.arg, BlockDiagMatrix):\n-        return expr._eval_inverse()\n+        return expr.inverse()\n \n     expr2 = blockinverse_1x1(expr)\n     if expr != expr2:\n@@ -540,15 +558,36 @@ def blockinverse_1x1(expr):\n     return expr\n \n def blockinverse_2x2(expr):\n-    if isinstance(expr.arg, BlockMatrix) and expr.arg.blockshape == (2, 2):\n+    if isinstance(expr.arg, BlockMatrix) and expr.arg.blockshape == (2, 2) and expr.arg.blocks[0, 0].is_square:\n         # Cite: The Matrix Cookbook Section 9.1.3\n         [[A, B],\n          [C, D]] = expr.arg.blocks.tolist()\n \n-        return BlockMatrix([[ (A - B*D.I*C).I,  (-A).I*B*(D - C*A.I*B).I],\n-                            [-(D - C*A.I*B).I*C*A.I,     (D - C*A.I*B).I]])\n-    else:\n-        return expr\n+        # Use one or the other formula, depending on whether A or D is known to be invertible or at least not known\n+        # to not be invertible.  Note that invertAbility of the other expressions M is not checked.\n+        A_invertible = ask(Q.invertible(A))\n+        D_invertible = ask(Q.invertible(D))\n+        if A_invertible == True:\n+            invert_A = True\n+        elif D_invertible == True:\n+            invert_A = False\n+        elif A_invertible != False:\n+            invert_A = True\n+        elif D_invertible != False:\n+            invert_A = False\n+        else:\n+            invert_A = True\n+\n+        if invert_A:\n+            AI = A.I\n+            MI = (D - C * AI * B).I\n+            return BlockMatrix([[AI + AI * B * MI * C * AI, -AI * B * MI], [-MI * C * AI, MI]])\n+        else:\n+            DI = D.I\n+            MI = (A - B * DI * C).I\n+            return BlockMatrix([[MI, -MI * B * DI], [-DI * C * MI, DI + DI * C * MI * B * DI]])\n+\n+    return expr\n \n def deblock(B):\n     \"\"\" Flatten a BlockMatrix of BlockMatrices \"\"\"\ndiff --git a/sympy/matrices/expressions/determinant.py b/sympy/matrices/expressions/determinant.py\n--- a/sympy/matrices/expressions/determinant.py\n+++ b/sympy/matrices/expressions/determinant.py\n@@ -1,7 +1,7 @@\n from __future__ import print_function, division\n \n from sympy import Basic, Expr, S, sympify\n-from .matexpr import ShapeError\n+from sympy.matrices.common import NonSquareMatrixError\n \n \n class Determinant(Expr):\n@@ -26,7 +26,7 @@ def __new__(cls, mat):\n             raise TypeError(\"Input to Determinant, %s, not a matrix\" % str(mat))\n \n         if not mat.is_square:\n-            raise ShapeError(\"Det of a non-square matrix\")\n+            raise NonSquareMatrixError(\"Det of a non-square matrix\")\n \n         return Basic.__new__(cls, mat)\n \ndiff --git a/sympy/matrices/expressions/hadamard.py b/sympy/matrices/expressions/hadamard.py\n--- a/sympy/matrices/expressions/hadamard.py\n+++ b/sympy/matrices/expressions/hadamard.py\n@@ -1,8 +1,9 @@\n from __future__ import print_function, division\n \n from sympy.core import Mul, sympify\n+from sympy.matrices.common import ShapeError\n from sympy.matrices.expressions.matexpr import (\n-    MatrixExpr, ShapeError, OneMatrix, ZeroMatrix\n+    MatrixExpr, OneMatrix, ZeroMatrix\n )\n from sympy.strategies import (\n     unpack, flatten, condition, exhaust, rm_id, sort\ndiff --git a/sympy/matrices/expressions/inverse.py b/sympy/matrices/expressions/inverse.py\n--- a/sympy/matrices/expressions/inverse.py\n+++ b/sympy/matrices/expressions/inverse.py\n@@ -3,7 +3,7 @@\n from sympy.core.sympify import _sympify\n from sympy.core import S, Basic\n \n-from sympy.matrices.expressions.matexpr import ShapeError\n+from sympy.matrices.common import NonSquareMatrixError\n from sympy.matrices.expressions.matpow import MatPow\n \n \n@@ -41,7 +41,7 @@ def __new__(cls, mat, exp=S.NegativeOne):\n         if not mat.is_Matrix:\n             raise TypeError(\"mat should be a matrix\")\n         if not mat.is_square:\n-            raise ShapeError(\"Inverse of non-square matrix %s\" % mat)\n+            raise NonSquareMatrixError(\"Inverse of non-square matrix %s\" % mat)\n         return Basic.__new__(cls, mat, exp)\n \n     @property\ndiff --git a/sympy/matrices/expressions/kronecker.py b/sympy/matrices/expressions/kronecker.py\n--- a/sympy/matrices/expressions/kronecker.py\n+++ b/sympy/matrices/expressions/kronecker.py\n@@ -4,7 +4,8 @@\n \n from sympy.core import Mul, prod, sympify\n from sympy.functions import adjoint\n-from sympy.matrices.expressions.matexpr import MatrixExpr, ShapeError, Identity\n+from sympy.matrices.common import ShapeError\n+from sympy.matrices.expressions.matexpr import MatrixExpr, Identity\n from sympy.matrices.expressions.transpose import transpose\n from sympy.matrices.matrices import MatrixBase\n from sympy.strategies import (\ndiff --git a/sympy/matrices/expressions/matadd.py b/sympy/matrices/expressions/matadd.py\n--- a/sympy/matrices/expressions/matadd.py\n+++ b/sympy/matrices/expressions/matadd.py\n@@ -5,12 +5,13 @@\n \n from sympy.core import Add, Basic, sympify\n from sympy.functions import adjoint\n+from sympy.matrices.common import ShapeError\n from sympy.matrices.matrices import MatrixBase\n from sympy.matrices.expressions.transpose import transpose\n from sympy.strategies import (rm_id, unpack, flatten, sort, condition,\n     exhaust, do_one, glom)\n-from sympy.matrices.expressions.matexpr import (MatrixExpr, ShapeError,\n-    ZeroMatrix, GenericZeroMatrix)\n+from sympy.matrices.expressions.matexpr import (MatrixExpr, ZeroMatrix,\n+    GenericZeroMatrix)\n from sympy.utilities import default_sort_key, sift\n \n # XXX: MatAdd should perhaps not subclass directly from Add\ndiff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -12,7 +12,7 @@\n from sympy.core.sympify import SympifyError, _sympify\n from sympy.functions import conjugate, adjoint\n from sympy.functions.special.tensor_functions import KroneckerDelta\n-from sympy.matrices import ShapeError\n+from sympy.matrices.common import NonSquareMatrixError, NonInvertibleMatrixError\n from sympy.simplify import simplify\n from sympy.utilities.misc import filldedent\n \n@@ -129,7 +129,7 @@ def __rmatmul__(self, other):\n     @call_highest_priority('__rpow__')\n     def __pow__(self, other):\n         if not self.is_square:\n-            raise ShapeError(\"Power of non-square matrix %s\" % self)\n+            raise NonSquareMatrixError(\"Power of non-square matrix %s\" % self)\n         elif self.is_Identity:\n             return self\n         elif other == S.Zero:\n@@ -265,6 +265,8 @@ def T(self):\n         return self.transpose()\n \n     def inverse(self):\n+        if not self.is_square:\n+            raise NonSquareMatrixError('Inverse of non-square matrix')\n         return self._eval_inverse()\n \n     def inv(self):\n@@ -969,11 +971,11 @@ def shape(self):\n     @call_highest_priority('__rpow__')\n     def __pow__(self, other):\n         if other != 1 and not self.is_square:\n-            raise ShapeError(\"Power of non-square matrix %s\" % self)\n+            raise NonSquareMatrixError(\"Power of non-square matrix %s\" % self)\n         if other == 0:\n             return Identity(self.rows)\n         if other < 1:\n-            raise ValueError(\"Matrix det == 0; not invertible.\")\n+            raise NonInvertibleMatrixError(\"Matrix det == 0; not invertible\")\n         return self\n \n     def _eval_transpose(self):\n@@ -985,6 +987,9 @@ def _eval_trace(self):\n     def _eval_determinant(self):\n         return S.Zero\n \n+    def _eval_inverse(self):\n+        raise NonInvertibleMatrixError(\"Matrix det == 0; not invertible.\")\n+\n     def conjugate(self):\n         return self\n \n@@ -1069,8 +1074,13 @@ def _eval_transpose(self):\n     def _eval_trace(self):\n         return S.One*self.rows\n \n+    def _is_1x1(self):\n+        \"\"\"Returns true if the matrix is known to be 1x1\"\"\"\n+        shape = self.shape\n+        return Eq(shape[0], 1) & Eq(shape[1], 1)\n+\n     def _eval_determinant(self):\n-        condition = Eq(self.shape[0], 1) & Eq(self.shape[1], 1)\n+        condition = self._is_1x1()\n         if condition == True:\n             return S.One\n         elif condition == False:\n@@ -1079,6 +1089,15 @@ def _eval_determinant(self):\n             from sympy import Determinant\n             return Determinant(self)\n \n+    def _eval_inverse(self):\n+        condition = self._is_1x1()\n+        if condition == True:\n+            return Identity(1)\n+        elif condition == False:\n+            raise NonInvertibleMatrixError(\"Matrix det == 0; not invertible.\")\n+        else:\n+            return Inverse(self)\n+\n     def conjugate(self):\n         return self\n \ndiff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -5,11 +5,12 @@\n from sympy.functions import adjoint\n from sympy.strategies import (rm_id, unpack, typed, flatten, exhaust,\n         do_one, new)\n+from sympy.matrices.common import ShapeError\n from sympy.matrices.matrices import MatrixBase\n \n from .inverse import Inverse\n from .matexpr import \\\n-    MatrixExpr, ShapeError, Identity, ZeroMatrix, OneMatrix, GenericIdentity\n+    MatrixExpr, Identity, ZeroMatrix, OneMatrix, GenericIdentity\n from .matpow import MatPow\n from .transpose import transpose\n from .permutation import PermutationMatrix\ndiff --git a/sympy/matrices/expressions/matpow.py b/sympy/matrices/expressions/matpow.py\n--- a/sympy/matrices/expressions/matpow.py\n+++ b/sympy/matrices/expressions/matpow.py\n@@ -1,9 +1,11 @@\n from __future__ import print_function, division\n \n-from .matexpr import MatrixExpr, ShapeError, Identity, ZeroMatrix\n+from sympy.matrices.common import NonSquareMatrixError\n+from .matexpr import MatrixExpr, Identity, ZeroMatrix\n from sympy.core import S\n from sympy.core.sympify import _sympify\n from sympy.matrices import MatrixBase\n+from sympy.matrices.common import NonInvertibleMatrixError\n \n from .permutation import PermutationMatrix\n \n@@ -40,7 +42,7 @@ def _entry(self, i, j, **kwargs):\n         if isinstance(A, MatPow):\n             # We still have a MatPow, make an explicit MatMul out of it.\n             if not A.base.is_square:\n-                raise ShapeError(\"Power of non-square matrix %s\" % A.base)\n+                raise NonSquareMatrixError(\"Power of non-square matrix %s\" % A.base)\n             elif A.exp.is_Integer and A.exp.is_positive:\n                 A = MatMul(*[A.base for k in range(A.exp)])\n             #elif A.exp.is_Integer and self.exp.is_negative:\n@@ -74,7 +76,7 @@ def doit(self, **kwargs):\n                 return base.func(Identity(base.shape[0]))\n             return Identity(base.shape[0])\n         elif isinstance(base, ZeroMatrix) and exp.is_negative:\n-            raise ValueError(\"Matrix determinant is 0, not invertible.\")\n+            raise NonInvertibleMatrixError(\"Matrix determinant is 0, not invertible\")\n         elif isinstance(base, (Identity, ZeroMatrix)):\n             return base\n         elif isinstance(base, PermutationMatrix):\ndiff --git a/sympy/matrices/expressions/trace.py b/sympy/matrices/expressions/trace.py\n--- a/sympy/matrices/expressions/trace.py\n+++ b/sympy/matrices/expressions/trace.py\n@@ -2,7 +2,7 @@\n \n from sympy import Basic, Expr, sympify, S\n from sympy.matrices.matrices import MatrixBase\n-from .matexpr import ShapeError\n+from sympy.matrices.common import NonSquareMatrixError\n \n \n class Trace(Expr):\n@@ -28,7 +28,7 @@ def __new__(cls, mat):\n             raise TypeError(\"input to Trace, %s, is not a matrix\" % str(mat))\n \n         if not mat.is_square:\n-            raise ShapeError(\"Trace of a non-square matrix\")\n+            raise NonSquareMatrixError(\"Trace of a non-square matrix\")\n \n         return Basic.__new__(cls, mat)\n \ndiff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -2141,7 +2141,7 @@ def vech(self, diagonal=True, check_symmetry=True):\n \n         c = self.cols\n         if c != self.rows:\n-            raise ShapeError(\"Matrix must be square\")\n+            raise NonSquareMatrixError(\"Matrix must be square\")\n         if check_symmetry:\n             self.simplify()\n             if self != self.transpose():\ndiff --git a/sympy/solvers/solvers.py b/sympy/solvers/solvers.py\n--- a/sympy/solvers/solvers.py\n+++ b/sympy/solvers/solvers.py\n@@ -41,6 +41,7 @@\n     separatevars)\n from sympy.simplify.sqrtdenest import sqrt_depth\n from sympy.simplify.fu import TR1\n+from sympy.matrices.common import NonInvertibleMatrixError\n from sympy.matrices import Matrix, zeros\n from sympy.polys import roots, cancel, factor, Poly, degree\n from sympy.polys.polyerrors import GeneratorsNeeded, PolynomialError\n@@ -2645,7 +2646,7 @@ def inv_quick(M):\n     n = M.rows\n     d = det(M)\n     if d == S.Zero:\n-        raise ValueError(\"Matrix det == 0; not invertible.\")\n+        raise NonInvertibleMatrixError(\"Matrix det == 0; not invertible\")\n     ret = zeros(n)\n     s1 = -1\n     for i in range(n):\ndiff --git a/sympy/stats/stochastic_process_types.py b/sympy/stats/stochastic_process_types.py\n--- a/sympy/stats/stochastic_process_types.py\n+++ b/sympy/stats/stochastic_process_types.py\n@@ -5,7 +5,7 @@\n                    Lambda, Mul, Dummy, IndexedBase, Add,\n                    linsolve, eye, Or, Not, Intersection,\n                    Union, Expr, Function, exp, cacheit,\n-                   Ge, Piecewise, Symbol)\n+                   Ge, Piecewise, Symbol, NonSquareMatrixError)\n from sympy.core.relational import Relational\n from sympy.logic.boolalg import Boolean\n from sympy.stats.joint_rv import JointDistributionHandmade, JointDistribution\n@@ -80,7 +80,7 @@ def _matrix_checks(matrix):\n         raise TypeError(\"Transition probabilities either should \"\n                             \"be a Matrix or a MatrixSymbol.\")\n     if matrix.shape[0] != matrix.shape[1]:\n-        raise ValueError(\"%s is not a square matrix\"%(matrix))\n+        raise NonSquareMatrixError(\"%s is not a square matrix\"%(matrix))\n     if isinstance(matrix, Matrix):\n         matrix = ImmutableMatrix(matrix.tolist())\n     return matrix\n",
  "test_patch": "diff --git a/sympy/assumptions/tests/test_matrices.py b/sympy/assumptions/tests/test_matrices.py\n--- a/sympy/assumptions/tests/test_matrices.py\n+++ b/sympy/assumptions/tests/test_matrices.py\n@@ -1,6 +1,6 @@\n from sympy import Q, ask, Symbol, DiagMatrix, DiagonalMatrix\n from sympy.matrices.expressions import (MatrixSymbol, Identity, ZeroMatrix,\n-        Trace, MatrixSlice, Determinant)\n+        OneMatrix, Trace, MatrixSlice, Determinant)\n from sympy.matrices.expressions.factorizations import LofLU\n from sympy.testing.pytest import XFAIL\n \n@@ -29,6 +29,8 @@ def test_invertible():\n     assert ask(Q.invertible(X.I)) is True\n     assert ask(Q.invertible(Identity(3))) is True\n     assert ask(Q.invertible(ZeroMatrix(3, 3))) is False\n+    assert ask(Q.invertible(OneMatrix(1, 1))) is True\n+    assert ask(Q.invertible(OneMatrix(3, 3))) is False\n     assert ask(Q.invertible(X), Q.fullrank(X) & Q.square(X))\n \n def test_singular():\n@@ -58,6 +60,9 @@ def test_symmetric():\n     assert ask(Q.symmetric(V1.T*(V1 + V2))) is True\n     assert ask(Q.symmetric(V1.T*(V1 + V2) + A1x1)) is True\n     assert ask(Q.symmetric(MatrixSlice(Y, (0, 1), (1, 2)))) is True\n+    assert ask(Q.symmetric(Identity(3))) is True\n+    assert ask(Q.symmetric(ZeroMatrix(3, 3))) is True\n+    assert ask(Q.symmetric(OneMatrix(3, 3))) is True\n \n def _test_orthogonal_unitary(predicate):\n     assert ask(predicate(X), predicate(X))\n@@ -89,6 +94,8 @@ def test_fullrank():\n     assert ask(Q.fullrank(X*Z), Q.fullrank(X) & Q.fullrank(Z)) is True\n     assert ask(Q.fullrank(Identity(3))) is True\n     assert ask(Q.fullrank(ZeroMatrix(3, 3))) is False\n+    assert ask(Q.fullrank(OneMatrix(1, 1))) is True\n+    assert ask(Q.fullrank(OneMatrix(3, 3))) is False\n     assert ask(Q.invertible(X), ~Q.fullrank(X)) == False\n \n \n@@ -107,6 +114,8 @@ def test_positive_definite():\n     assert not ask(Q.positive_definite(Y.T*X*Y), Q.positive_definite(X))\n     assert ask(Q.positive_definite(Identity(3))) is True\n     assert ask(Q.positive_definite(ZeroMatrix(3, 3))) is False\n+    assert ask(Q.positive_definite(OneMatrix(1, 1))) is True\n+    assert ask(Q.positive_definite(OneMatrix(3, 3))) is False\n     assert ask(Q.positive_definite(X + Z), Q.positive_definite(X) &\n             Q.positive_definite(Z)) is True\n     assert not ask(Q.positive_definite(-X), Q.positive_definite(X))\n@@ -119,6 +128,11 @@ def test_triangular():\n             Q.lower_triangular(Z)) is True\n     assert ask(Q.lower_triangular(Identity(3))) is True\n     assert ask(Q.lower_triangular(ZeroMatrix(3, 3))) is True\n+    assert ask(Q.upper_triangular(ZeroMatrix(3, 3))) is True\n+    assert ask(Q.lower_triangular(OneMatrix(1, 1))) is True\n+    assert ask(Q.upper_triangular(OneMatrix(1, 1))) is True\n+    assert ask(Q.lower_triangular(OneMatrix(3, 3))) is False\n+    assert ask(Q.upper_triangular(OneMatrix(3, 3))) is False\n     assert ask(Q.triangular(X), Q.unit_triangular(X))\n     assert ask(Q.upper_triangular(X**3), Q.upper_triangular(X))\n     assert ask(Q.lower_triangular(X**3), Q.lower_triangular(X))\n@@ -128,6 +142,8 @@ def test_diagonal():\n     assert ask(Q.diagonal(X + Z.T + Identity(2)), Q.diagonal(X) &\n                Q.diagonal(Z)) is True\n     assert ask(Q.diagonal(ZeroMatrix(3, 3)))\n+    assert ask(Q.diagonal(OneMatrix(1, 1))) is True\n+    assert ask(Q.diagonal(OneMatrix(3, 3))) is False\n     assert ask(Q.lower_triangular(X) & Q.upper_triangular(X), Q.diagonal(X))\n     assert ask(Q.diagonal(X), Q.lower_triangular(X) & Q.upper_triangular(X))\n     assert ask(Q.symmetric(X), Q.diagonal(X))\n@@ -214,6 +230,7 @@ def test_matrix_element_sets():\n     assert ask(Q.complex(X[1, 2]), Q.complex_elements(X))\n     assert ask(Q.integer_elements(Identity(3)))\n     assert ask(Q.integer_elements(ZeroMatrix(3, 3)))\n+    assert ask(Q.integer_elements(OneMatrix(3, 3)))\n     from sympy.matrices.expressions.fourier import DFT\n     assert ask(Q.complex_elements(DFT(3)))\n \ndiff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -1,10 +1,12 @@\n+from sympy import Trace\n from sympy.testing.pytest import raises\n from sympy.matrices.expressions.blockmatrix import (\n     block_collapse, bc_matmul, bc_block_plus_ident, BlockDiagMatrix,\n     BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse,\n     blockcut, reblock_2x2, deblock)\n from sympy.matrices.expressions import (MatrixSymbol, Identity,\n-        Inverse, trace, Transpose, det, ZeroMatrix)\n+        Inverse, trace, Transpose, det, ZeroMatrix, OneMatrix)\n+from sympy.matrices.common import NonInvertibleMatrixError\n from sympy.matrices import (\n     Matrix, ImmutableMatrix, ImmutableSparseMatrix)\n from sympy.core import Tuple, symbols, Expr\n@@ -119,6 +121,7 @@ def test_BlockMatrix_trace():\n     A, B, C, D = [MatrixSymbol(s, 3, 3) for s in 'ABCD']\n     X = BlockMatrix([[A, B], [C, D]])\n     assert trace(X) == trace(A) + trace(D)\n+    assert trace(BlockMatrix([ZeroMatrix(n, n)])) == 0\n \n def test_BlockMatrix_Determinant():\n     A, B, C, D = [MatrixSymbol(s, 3, 3) for s in 'ABCD']\n@@ -128,6 +131,8 @@ def test_BlockMatrix_Determinant():\n         assert det(X) == det(A) * det(D - C*A.I*B)\n \n     assert isinstance(det(X), Expr)\n+    assert det(BlockMatrix([A])) == det(A)\n+    assert det(BlockMatrix([ZeroMatrix(n, n)])) == 0\n \n def test_squareBlockMatrix():\n     A = MatrixSymbol('A', n, n)\n@@ -147,9 +152,6 @@ def test_squareBlockMatrix():\n     assert (X * MatrixSymbol('Q', n + m, n + m)).is_MatMul\n \n     assert block_collapse(Y.I) == A.I\n-    assert block_collapse(X.inverse()) == BlockMatrix([\n-        [(-B*D.I*C + A).I, -A.I*B*(D + -C*A.I*B).I],\n-        [-(D - C*A.I*B).I*C*A.I, (D - C*A.I*B).I]])\n \n     assert isinstance(X.inverse(), Inverse)\n \n@@ -158,6 +160,34 @@ def test_squareBlockMatrix():\n     Z = BlockMatrix([[Identity(n), B], [C, D]])\n     assert not Z.is_Identity\n \n+def test_BlockMatrix_inverse():\n+    A = MatrixSymbol('A', n, m)\n+    B = MatrixSymbol('B', n, n)\n+    C = MatrixSymbol('C', m, m)\n+    D = MatrixSymbol('D', m, n)\n+    X = BlockMatrix([[A, B], [C, D]])\n+    assert X.is_square\n+    assert isinstance(block_collapse(X.inverse()), Inverse)  # Can't inverse when A, D aren't square\n+\n+    # test code path for non-invertible D matrix\n+    A = MatrixSymbol('A', n, n)\n+    B = MatrixSymbol('B', n, m)\n+    C = MatrixSymbol('C', m, n)\n+    D = OneMatrix(m, m)\n+    X = BlockMatrix([[A, B], [C, D]])\n+    assert block_collapse(X.inverse()) == BlockMatrix([\n+        [A.I + A.I * B * (D - C * A.I * B).I * C * A.I, -A.I * B * (D - C * A.I * B).I],\n+        [-(D - C * A.I * B).I * C * A.I, (D - C * A.I * B).I],\n+    ])\n+\n+    # test code path for non-invertible A matrix\n+    A = OneMatrix(n, n)\n+    D = MatrixSymbol('D', m, m)\n+    X = BlockMatrix([[A, B], [C, D]])\n+    assert block_collapse(X.inverse()) == BlockMatrix([\n+        [(A - B * D.I * C).I, -(A - B * D.I * C).I * B * D.I],\n+        [-D.I * C * (A - B * D.I * C).I, D.I + D.I * C * (A - B * D.I * C).I * B * D.I],\n+    ])\n \n def test_BlockDiagMatrix():\n     A = MatrixSymbol('A', n, n)\n@@ -191,6 +221,58 @@ def test_BlockDiagMatrix():\n     assert (X._blockmul(M)).is_MatMul\n     assert (X._blockadd(M)).is_MatAdd\n \n+def test_BlockDiagMatrix_nonsquare():\n+    A = MatrixSymbol('A', n, m)\n+    B = MatrixSymbol('B', k, l)\n+    X = BlockDiagMatrix(A, B)\n+    assert X.shape == (n + k, m + l)\n+    assert X.shape == (n + k, m + l)\n+    assert X.rowblocksizes == [n, k]\n+    assert X.colblocksizes == [m, l]\n+    C = MatrixSymbol('C', n, m)\n+    D = MatrixSymbol('D', k, l)\n+    Y = BlockDiagMatrix(C, D)\n+    assert block_collapse(X + Y) == BlockDiagMatrix(A + C, B + D)\n+    assert block_collapse(X * Y.T) == BlockDiagMatrix(A * C.T, B * D.T)\n+    raises(NonInvertibleMatrixError, lambda: BlockDiagMatrix(A, C.T).inverse())\n+\n+def test_BlockDiagMatrix_determinant():\n+    A = MatrixSymbol('A', n, n)\n+    B = MatrixSymbol('B', m, m)\n+    assert det(BlockDiagMatrix()) == 1\n+    assert det(BlockDiagMatrix(A)) == det(A)\n+    assert det(BlockDiagMatrix(A, B)) == det(A) * det(B)\n+\n+    # non-square blocks\n+    C = MatrixSymbol('C', m, n)\n+    D = MatrixSymbol('D', n, m)\n+    assert det(BlockDiagMatrix(C, D)) == 0\n+\n+def test_BlockDiagMatrix_trace():\n+    assert trace(BlockDiagMatrix()) == 0\n+    assert trace(BlockDiagMatrix(ZeroMatrix(n, n))) == 0\n+    A = MatrixSymbol('A', n, n)\n+    assert trace(BlockDiagMatrix(A)) == trace(A)\n+    B = MatrixSymbol('B', m, m)\n+    assert trace(BlockDiagMatrix(A, B)) == trace(A) + trace(B)\n+\n+    # non-square blocks\n+    C = MatrixSymbol('C', m, n)\n+    D = MatrixSymbol('D', n, m)\n+    assert isinstance(trace(BlockDiagMatrix(C, D)), Trace)\n+\n+def test_BlockDiagMatrix_transpose():\n+    A = MatrixSymbol('A', n, m)\n+    B = MatrixSymbol('B', k, l)\n+    assert transpose(BlockDiagMatrix()) == BlockDiagMatrix()\n+    assert transpose(BlockDiagMatrix(A)) == BlockDiagMatrix(A.T)\n+    assert transpose(BlockDiagMatrix(A, B)) == BlockDiagMatrix(A.T, B.T)\n+\n+def test_issue_2460():\n+    bdm1 = BlockDiagMatrix(Matrix([i]), Matrix([j]))\n+    bdm2 = BlockDiagMatrix(Matrix([k]), Matrix([l]))\n+    assert block_collapse(bdm1 + bdm2) == BlockDiagMatrix(Matrix([i + k]), Matrix([j + l]))\n+\n def test_blockcut():\n     A = MatrixSymbol('A', n, m)\n     B = blockcut(A, (n/2, n/2), (m/2, m/2))\ndiff --git a/sympy/matrices/expressions/tests/test_inverse.py b/sympy/matrices/expressions/tests/test_inverse.py\n--- a/sympy/matrices/expressions/tests/test_inverse.py\n+++ b/sympy/matrices/expressions/tests/test_inverse.py\n@@ -1,6 +1,7 @@\n from sympy.core import symbols, S\n-from sympy.matrices.expressions import MatrixSymbol, Inverse, MatPow\n-from sympy.matrices import eye, Identity, ShapeError\n+from sympy.matrices.expressions import MatrixSymbol, Inverse, MatPow, ZeroMatrix, OneMatrix\n+from sympy.matrices.common import NonSquareMatrixError, NonInvertibleMatrixError\n+from sympy.matrices import eye, Identity\n from sympy.testing.pytest import raises\n from sympy import refine, Q\n \n@@ -13,9 +14,6 @@\n \n \n def test_inverse():\n-    raises(ShapeError, lambda: Inverse(A))\n-    raises(ShapeError, lambda: Inverse(A*B))\n-\n     assert Inverse(C).args == (C, S.NegativeOne)\n     assert Inverse(C).shape == (n, n)\n     assert Inverse(A*E).shape == (n, n)\n@@ -41,6 +39,16 @@ def test_inverse():\n     assert Inverse(eye(3)).doit() == eye(3)\n     assert Inverse(eye(3)).doit(deep=False) == eye(3)\n \n+    assert OneMatrix(1, 1).I == Identity(1)\n+    assert isinstance(OneMatrix(n, n).I, Inverse)\n+\n+def test_inverse_non_invertible():\n+    raises(NonSquareMatrixError, lambda: Inverse(A))\n+    raises(NonSquareMatrixError, lambda: Inverse(A*B))\n+    raises(NonSquareMatrixError, lambda: ZeroMatrix(n, m).I)\n+    raises(NonInvertibleMatrixError, lambda: ZeroMatrix(n, n).I)\n+    raises(NonSquareMatrixError, lambda: OneMatrix(n, m).I)\n+    raises(NonInvertibleMatrixError, lambda: OneMatrix(2, 2).I)\n \n def test_refine():\n     assert refine(C.I, Q.orthogonal(C)) == C.T\ndiff --git a/sympy/matrices/expressions/tests/test_matpow.py b/sympy/matrices/expressions/tests/test_matpow.py\n--- a/sympy/matrices/expressions/tests/test_matpow.py\n+++ b/sympy/matrices/expressions/tests/test_matpow.py\n@@ -2,7 +2,7 @@\n from sympy.core import symbols, pi, S\n from sympy.matrices import Identity, MatrixSymbol, ImmutableMatrix, ZeroMatrix\n from sympy.matrices.expressions import MatPow, MatAdd, MatMul\n-from sympy.matrices.expressions.matexpr import ShapeError\n+from sympy.matrices.common import ShapeError\n \n n, m, l, k = symbols('n m l k', integer=True)\n A = MatrixSymbol('A', n, m)\n",
  "problem_statement": "Regression: can't make expressions with mutable BlockDiagMatrix's\nThis used to work in 0.7.3 :\n\n``` Python\n>>> from sympy import Matrix, BlockDiagMatrix\n>>> from sympy.abc import x, y, z\n>>> bdm1 = BlockDiagMatrix(Matrix([x]), Matrix([y]))\n>>> bdm2 = BlockDiagMatrix(Matrix([y]), Matrix([z]))\n>>> bdm1 + bdm2\nTypeError: unhashable type: 'MutableDenseMatrix'\n```\n\n",
  "hints_text": "The solution clearly is that BlockDiagMatrix should convert MutableMatrix to ImmutableMatrix.\n\nI bisected to b085bab7427ce6b5c2ad7657f216445659b5c4a1\n",
  "created_at": "2020-04-08T21:22:25Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_invertible\", \"test_symmetric\", \"test_fullrank\", \"test_positive_definite\", \"test_triangular\", \"test_diagonal\", \"test_matrix_element_sets\", \"test_BlockMatrix_trace\", \"test_BlockMatrix_Determinant\", \"test_BlockMatrix_inverse\", \"test_BlockDiagMatrix_nonsquare\", \"test_BlockDiagMatrix_determinant\", \"test_BlockDiagMatrix_trace\", \"test_issue_2460\", \"test_inverse\", \"test_inverse_non_invertible\"]",
  "PASS_TO_PASS": "[\"test_square\", \"test_singular\", \"test_orthogonal\", \"test_unitary\", \"test_non_atoms\", \"test_MatrixSlice\", \"test_det_trace_positive\", \"test_field_assumptions\", \"test_matrix_element_sets_slices_blocks\", \"test_bc_matmul\", \"test_bc_matadd\", \"test_bc_transpose\", \"test_bc_dist_diag\", \"test_block_plus_ident\", \"test_BlockMatrix\", \"test_block_collapse_explicit_matrices\", \"test_issue_17624\", \"test_issue_18618\", \"test_squareBlockMatrix\", \"test_BlockDiagMatrix\", \"test_BlockDiagMatrix_transpose\", \"test_blockcut\", \"test_reblock_2x2\", \"test_deblock\", \"test_block_collapse_type\", \"test_refine\", \"test_entry\", \"test_as_explicit_symbol\", \"test_as_explicit_nonsquare_symbol\", \"test_as_explicit\", \"test_as_explicit_nonsquare\", \"test_doit_nonsquare_MatrixSymbol\", \"test_doit_square_MatrixSymbol_symsize\", \"test_doit_with_MatrixBase\", \"test_doit_nonsquare\", \"test_doit_equals_pow\", \"test_doit_nested_MatrixExpr\", \"test_identity_power\", \"test_zero_power\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.132012",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}