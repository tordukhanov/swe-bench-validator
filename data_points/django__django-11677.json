{
  "repo": "django/django",
  "instance_id": "django__django-11677",
  "base_commit": "7203efb799969b4662ecb58f4cefd2a5f2e0062b",
  "patch": "diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -184,18 +184,20 @@ def is_summary(self):\n         return any(child.is_summary for child in self.children)\n \n     @staticmethod\n-    def _resolve_rhs(rhs, query, *args, **kwargs):\n-        if hasattr(rhs, 'resolve_expression'):\n-            rhs = rhs.resolve_expression(query, *args, **kwargs)\n-        return rhs\n+    def _resolve_leaf(expr, query, *args, **kwargs):\n+        if hasattr(expr, 'resolve_expression'):\n+            expr = expr.resolve_expression(query, *args, **kwargs)\n+        return expr\n \n     @classmethod\n     def _resolve_node(cls, node, query, *args, **kwargs):\n         if hasattr(node, 'children'):\n             for child in node.children:\n                 cls._resolve_node(child, query, *args, **kwargs)\n+        if hasattr(node, 'lhs'):\n+            node.lhs = cls._resolve_leaf(node.lhs, query, *args, **kwargs)\n         if hasattr(node, 'rhs'):\n-            node.rhs = cls._resolve_rhs(node.rhs, query, *args, **kwargs)\n+            node.rhs = cls._resolve_leaf(node.rhs, query, *args, **kwargs)\n \n     def resolve_expression(self, *args, **kwargs):\n         clone = self.clone()\n",
  "test_patch": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -942,3 +942,17 @@ def test_exact_exists(self):\n             pk_exists=Exists(qs),\n         )\n         self.assertCountEqual(seasons, Season.objects.all())\n+\n+    def test_nested_outerref_lhs(self):\n+        tag = Tag.objects.create(name=self.au1.alias)\n+        tag.articles.add(self.a1)\n+        qs = Tag.objects.annotate(\n+            has_author_alias_match=Exists(\n+                Article.objects.annotate(\n+                    author_exists=Exists(\n+                        Author.objects.filter(alias=OuterRef(OuterRef('name')))\n+                    ),\n+                ).filter(author_exists=True)\n+            ),\n+        )\n+        self.assertEqual(qs.get(has_author_alias_match=True), tag)\n",
  "problem_statement": "Nested OuterRef not looking on the right model for the field.\nDescription\n\t \n\t\t(last modified by Aaron Lisman)\n\t \nI ran into this and made a test case for it. It seems similar to the test case above it. I'm not sure what's different about it and causing it to fail.\nLet me know if the query is just built wrong.\ndiff --git a/tests/expressions/models.py b/tests/expressions/models.py\nindex 42e4a37bb0..164bda3b3d 100644\n--- a/tests/expressions/models.py\n+++ b/tests/expressions/models.py\n@@ -83,6 +83,28 @@ class SimulationRun(models.Model):\n\t\t return \"%s (%s to %s)\" % (self.midpoint, self.start, self.end)\n \n \n+class Customer(models.Model):\n+\tname = models.TextField()\n+\n+\n+class Item(models.Model):\n+\tpass\n+\n+\n+class Invoice(models.Model):\n+\tINVOICE = 'invoice'\n+\tEXPENSE = 'expense'\n+\n+\tKIND_CHOICES = (\n+\t\t(INVOICE, 'Invoice'),\n+\t\t(EXPENSE, 'Expense'),\n+\t)\n+\n+\tkind = models.CharField(choices=KIND_CHOICES, max_length=255, default=None)\n+\towner = models.ForeignKey(Customer, models.CASCADE)\n+\titems = models.ManyToManyField(Item, related_name='invoices')\n+\n+\n class UUIDPK(models.Model):\n\t id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex d1e622a2d4..2c50744fc8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -24,7 +24,7 @@ from django.test.utils import Approximate\n \n from .models import (\n\t UUID, UUIDPK, Company, Employee, Experiment, Number, Result, SimulationRun,\n-\tTime,\n+\tTime, Customer, Item, Invoice\n )\n \n \n@@ -536,6 +536,55 @@ class BasicExpressionsTests(TestCase):\n\t\t # This is a contrived example. It exercises the double OuterRef form.\n\t\t self.assertCountEqual(outer, [first, second, third])\n \n+\tdef test_nested_subquery_outer_ref_3(self):\n+\t\tcustomer = Customer.objects.create(name='Test Customer')\n+\t\tother_customer = Customer.objects.create(name='Ohter Customer')\n+\n+\t\tunexpensed_invoice = Invoice.objects.create(kind=Invoice.INVOICE, owner=customer)\n+\t\tunexpensed_item_1 = Item.objects.create()\n+\t\tunexpensed_invoice.items.add(unexpensed_item_1)\n+\n+\t\tpartially_expensed_invoice = Invoice.objects.create(kind=Invoice.INVOICE, owner=customer)\n+\t\texpense_1 = Invoice.objects.create(kind=Invoice.EXPENSE, owner=customer)\n+\t\texpensed_item_1 = Item.objects.create()\n+\t\tunexpensed_item_2 = Item.objects.create()\n+\t\tpartially_expensed_invoice.items.add(expensed_item_1, unexpensed_item_2)\n+\t\texpense_1.items.add(expensed_item_1)\n+\n+\t\texpensed_invoice = Invoice.objects.create(kind=Invoice.INVOICE, owner=customer)\n+\t\tInvoice.objects.create(kind=Invoice.EXPENSE, owner=customer)\n+\t\texpensed_item_2 = Item.objects.create()\n+\t\texpensed_invoice.items.add(expensed_item_2)\n+\t\texpense_1.items.add(expensed_item_2)\n+\n+\t\tother_invoice = Invoice.objects.create(kind=Invoice.INVOICE, owner=other_customer)\n+\t\tother_invoice.items.add(unexpensed_item_1)\n+\t\tother_expense = Invoice.objects.create(kind=Invoice.EXPENSE, owner=other_customer)\n+\t\tother_expense.items.add(unexpensed_item_1)\n+\n+\t\tinner = Invoice.objects.filter(\n+\t\t\tkind=Invoice.EXPENSE,\n+\t\t\towner=OuterRef(OuterRef('owner')),\n+\t\t\titems=OuterRef('id'),\n+\t\t)\n+\t\tmiddle = Item.objects.filter(\n+\t\t\tinvoices=OuterRef('id'),\n+\t\t).annotate(\n+\t\t\texpensed=Exists(inner),\n+\t\t).filter(\n+\t\t\texpensed=False,\n+\t\t)\n+\t\touter = Invoice.objects.filter(\n+\t\t\tkind=Invoice.INVOICE,\n+\t\t\towner=customer,\n+\t\t).annotate(\n+\t\t\tunexpensed=Exists(middle),\n+\t\t)\n+\n+\t\tself.assertTrue(outer.get(pk=unexpensed_invoice.pk).unexpensed)\n+\t\tself.assertTrue(outer.get(pk=partially_expensed_invoice.pk).unexpensed)\n+\t\tself.assertFalse(outer.get(pk=expensed_invoice.pk).unexpensed)\n+\n\t def test_nested_subquery_outer_ref_with_autofield(self):\n\t\t first = Time.objects.create(time='09:00')\n\t\t second = Time.objects.create(time='17:00')\ndjango.core.exceptions.FieldError: Cannot resolve keyword 'owner' into field. Choices are: expensed, id, invoices\n",
  "hints_text": "I can't definitely say that it's a bug. Accepting for investigation.\nIMO this query join order should be like this: inner = Item.objects.filter( middle = Invoice.objects.filter( outer = Item.objects.filter( If you want to use nested outerref, middle query has to contain foreign keys. Otherwise, this usage needs to include deep related field. middle = Item.objects.filter(invoices=OuterRef('id'),).annotate( expensed=Exists(inner), owner=F('invoices__owner') ).filter(expensed=False,) or maybe not necessary nested outerref inner = Invoice.objects.filter( kind=Invoice.EXPENSE, owner=OuterRef('invoices__owner'), items=OuterRef('id'), )\nI also ran into this just now and can confirm that the bug exists in both 2.2.4 and master, tested with the models in tests/queries/models.py: def test_nested_outerref(self): from .models import Item, Node, Number Number.objects.create(num=5) Node.objects.create(num=5) qs = Number.objects.annotate( has_item=Exists( Item.objects.annotate( has_tag=Exists( Node.objects.filter(num=OuterRef(OuterRef('num'))) ) ).filter(has_tag=True) ) ) print(qs) This results in the following exception django.core.exceptions.FieldError: Cannot resolve keyword 'num' into field. Choices are: cover, created, creator, creator_id, has_tag, id, modified, name, note, note_id, tags\nThanks for the simplified test case Oskar, that's really valuable.",
  "created_at": "2019-08-17T01:59:04Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_nested_outerref_lhs (lookup.tests.LookupTests)\"]",
  "PASS_TO_PASS": "[\"test_chain_date_time_lookups (lookup.tests.LookupTests)\", \"test_count (lookup.tests.LookupTests)\", \"test_custom_field_none_rhs (lookup.tests.LookupTests)\", \"Lookup.can_use_none_as_rhs=True allows None as a lookup value.\", \"test_error_messages (lookup.tests.LookupTests)\", \"test_escaping (lookup.tests.LookupTests)\", \"test_exact_exists (lookup.tests.LookupTests)\", \"Transforms are used for __exact=None.\", \"test_exact_sliced_queryset_limit_one (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_limit_one_offset (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_not_limited_to_one (lookup.tests.LookupTests)\", \"test_exclude (lookup.tests.LookupTests)\", \"test_exists (lookup.tests.LookupTests)\", \"test_get_next_previous_by (lookup.tests.LookupTests)\", \"test_in (lookup.tests.LookupTests)\", \"test_in_bulk (lookup.tests.LookupTests)\", \"test_in_bulk_lots_of_ids (lookup.tests.LookupTests)\", \"test_in_bulk_non_unique_field (lookup.tests.LookupTests)\", \"test_in_bulk_with_field (lookup.tests.LookupTests)\", \"test_in_different_database (lookup.tests.LookupTests)\", \"test_in_keeps_value_ordering (lookup.tests.LookupTests)\", \"test_iterator (lookup.tests.LookupTests)\", \"test_lookup_collision (lookup.tests.LookupTests)\", \"test_lookup_date_as_str (lookup.tests.LookupTests)\", \"test_lookup_int_as_str (lookup.tests.LookupTests)\", \"test_none (lookup.tests.LookupTests)\", \"test_nonfield_lookups (lookup.tests.LookupTests)\", \"test_pattern_lookups_with_substr (lookup.tests.LookupTests)\", \"test_regex (lookup.tests.LookupTests)\", \"test_regex_backreferencing (lookup.tests.LookupTests)\", \"test_regex_non_ascii (lookup.tests.LookupTests)\", \"test_regex_non_string (lookup.tests.LookupTests)\", \"test_regex_null (lookup.tests.LookupTests)\", \"test_relation_nested_lookup_error (lookup.tests.LookupTests)\", \"test_unsupported_lookups (lookup.tests.LookupTests)\", \"test_values (lookup.tests.LookupTests)\", \"test_values_list (lookup.tests.LookupTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.580092",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}