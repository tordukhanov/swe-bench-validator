{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13283",
  "base_commit": "12705bb4371c294db4461882007f40a101d74a81",
  "patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -9,9 +9,14 @@\n from warnings import warn\n \n from ..tree import ExtraTreeRegressor\n-from ..utils import check_random_state, check_array\n+from ..utils import (\n+    check_random_state,\n+    check_array,\n+    gen_batches,\n+    get_chunk_n_rows,\n+)\n from ..utils.fixes import _joblib_parallel_args\n-from ..utils.validation import check_is_fitted\n+from ..utils.validation import check_is_fitted, _num_samples\n from ..base import OutlierMixin\n \n from .bagging import BaseBagging\n@@ -388,21 +393,69 @@ def score_samples(self, X):\n                              \"match the input. Model n_features is {0} and \"\n                              \"input n_features is {1}.\"\n                              \"\".format(self.n_features_, X.shape[1]))\n-        n_samples = X.shape[0]\n \n-        n_samples_leaf = np.zeros(n_samples, order=\"f\")\n-        depths = np.zeros(n_samples, order=\"f\")\n+        # Take the opposite of the scores as bigger is better (here less\n+        # abnormal)\n+        return -self._compute_chunked_score_samples(X)\n+\n+    @property\n+    def threshold_(self):\n+        if self.behaviour != 'old':\n+            raise AttributeError(\"threshold_ attribute does not exist when \"\n+                                 \"behaviour != 'old'\")\n+        warn(\"threshold_ attribute is deprecated in 0.20 and will\"\n+             \" be removed in 0.22.\", DeprecationWarning)\n+        return self._threshold_\n+\n+    def _compute_chunked_score_samples(self, X):\n+\n+        n_samples = _num_samples(X)\n \n         if self._max_features == X.shape[1]:\n             subsample_features = False\n         else:\n             subsample_features = True\n \n+        # We get as many rows as possible within our working_memory budget\n+        # (defined by sklearn.get_config()['working_memory']) to store\n+        # self._max_features in each row during computation.\n+        #\n+        # Note:\n+        #  - this will get at least 1 row, even if 1 row of score will\n+        #    exceed working_memory.\n+        #  - this does only account for temporary memory usage while loading\n+        #    the data needed to compute the scores -- the returned scores\n+        #    themselves are 1D.\n+\n+        chunk_n_rows = get_chunk_n_rows(row_bytes=16 * self._max_features,\n+                                        max_n_rows=n_samples)\n+        slices = gen_batches(n_samples, chunk_n_rows)\n+\n+        scores = np.zeros(n_samples, order=\"f\")\n+\n+        for sl in slices:\n+            # compute score on the slices of test samples:\n+            scores[sl] = self._compute_score_samples(X[sl], subsample_features)\n+\n+        return scores\n+\n+    def _compute_score_samples(self, X, subsample_features):\n+        \"\"\"Compute the score of each samples in X going through the extra trees.\n+\n+        Parameters\n+        ----------\n+        X : array-like or sparse matrix\n+\n+        subsample_features : bool,\n+            whether features should be subsampled\n+        \"\"\"\n+        n_samples = X.shape[0]\n+\n+        depths = np.zeros(n_samples, order=\"f\")\n+\n         for tree, features in zip(self.estimators_, self.estimators_features_):\n-            if subsample_features:\n-                X_subset = X[:, features]\n-            else:\n-                X_subset = X\n+            X_subset = X[:, features] if subsample_features else X\n+\n             leaves_index = tree.apply(X_subset)\n             node_indicator = tree.decision_path(X_subset)\n             n_samples_leaf = tree.tree_.n_node_samples[leaves_index]\n@@ -418,19 +471,7 @@ def score_samples(self, X):\n             / (len(self.estimators_)\n                * _average_path_length([self.max_samples_]))\n         )\n-\n-        # Take the opposite of the scores as bigger is better (here less\n-        # abnormal)\n-        return -scores\n-\n-    @property\n-    def threshold_(self):\n-        if self.behaviour != 'old':\n-            raise AttributeError(\"threshold_ attribute does not exist when \"\n-                                 \"behaviour != 'old'\")\n-        warn(\"threshold_ attribute is deprecated in 0.20 and will\"\n-             \" be removed in 0.22.\", DeprecationWarning)\n-        return self._threshold_\n+        return scores\n \n \n def _average_path_length(n_samples_leaf):\n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -29,6 +29,7 @@\n from sklearn.metrics import roc_auc_score\n \n from scipy.sparse import csc_matrix, csr_matrix\n+from unittest.mock import Mock, patch\n \n rng = check_random_state(0)\n \n@@ -325,3 +326,36 @@ def test_behaviour_param():\n     clf2 = IsolationForest(behaviour='new', contamination='auto').fit(X_train)\n     assert_array_equal(clf1.decision_function([[2., 2.]]),\n                        clf2.decision_function([[2., 2.]]))\n+\n+\n+# mock get_chunk_n_rows to actually test more than one chunk (here one\n+# chunk = 3 rows:\n+@patch(\n+    \"sklearn.ensemble.iforest.get_chunk_n_rows\",\n+    side_effect=Mock(**{\"return_value\": 3}),\n+)\n+@pytest.mark.parametrize(\n+    \"contamination, n_predict_calls\", [(0.25, 3), (\"auto\", 2)]\n+)\n+@pytest.mark.filterwarnings(\"ignore:threshold_ attribute\")\n+def test_iforest_chunks_works1(\n+    mocked_get_chunk, contamination, n_predict_calls\n+):\n+    test_iforest_works(contamination)\n+    assert mocked_get_chunk.call_count == n_predict_calls\n+\n+\n+# idem with chunk_size = 5 rows\n+@patch(\n+    \"sklearn.ensemble.iforest.get_chunk_n_rows\",\n+    side_effect=Mock(**{\"return_value\": 10}),\n+)\n+@pytest.mark.parametrize(\n+    \"contamination, n_predict_calls\", [(0.25, 3), (\"auto\", 2)]\n+)\n+@pytest.mark.filterwarnings(\"ignore:threshold_ attribute\")\n+def test_iforest_chunks_works2(\n+    mocked_get_chunk, contamination, n_predict_calls\n+):\n+    test_iforest_works(contamination)\n+    assert mocked_get_chunk.call_count == n_predict_calls\n",
  "problem_statement": "Isolation forest - decision_function & average_path_length method are memory inefficient\n#### Description\r\nIsolation forest consumes too much memory due to memory ineffecient implementation of anomoly score calculation. Due to this the parallelization with n_jobs is also impacted as anomoly score cannot be calculated in parallel for each tree.\r\n\r\n#### Steps/Code to Reproduce\r\nRun a simple Isolation forest with n_estimators as 10 and as 50 respectively.\r\nOn memory profiling, it can be seen that each building of tree is not taking much memory but in the end a lot of memory is consumed as a for loop is iteration over all trees and calculating the anomoly score of all trees together and then averaging it.\r\n-iforest.py line 267-281\r\n```py\r\n        for i, (tree, features) in enumerate(zip(self.estimators_,\r\n                                                 self.estimators_features_)):\r\n            if subsample_features:\r\n                X_subset = X[:, features]\r\n            else:\r\n                X_subset = X\r\n            leaves_index = tree.apply(X_subset)\r\n            node_indicator = tree.decision_path(X_subset)\r\n            n_samples_leaf[:, i] = tree.tree_.n_node_samples[leaves_index]\r\n            depths[:, i] = np.ravel(node_indicator.sum(axis=1))\r\n            depths[:, i] -= 1\r\n\r\n        depths += _average_path_length(n_samples_leaf)\r\n\r\n        scores = 2 ** (-depths.mean(axis=1) / _average_path_length(self.max_samples_))\r\n\r\n        # Take the opposite of the scores as bigger is better (here less\r\n        # abnormal) and add 0.5 (this value plays a special role as described\r\n        # in the original paper) to give a sense to scores = 0:\r\n        return 0.5 - scores\r\n````\r\n\r\nDue to this, in case of more no. of estimators(1000), the memory consumed is quite high.\r\n\r\n#### Expected Results\r\nPossible Solution:\r\nThe above for loop should only do the averaging of anomoly score from each estimator instead of calculation. The logic of isoforest anomoly score calculation can be moved to base estimator class so it is done for each tree( i guess bagging.py file-similar to other method available after fitting)\r\n#### Actual Results\r\nThe memory consumption is profound as we increase no. of estimators.\r\n```py\r\nmodel=Isolationforest()\r\nmodel.fit(data)\r\n```\r\n\r\nThe fit method calls decision function & average anomoly score which are taking quite a lot memory.\r\nthe memory spike is too high in the very end, that is in finall call to `average_path_length()` method.\r\n```\r\ndepths += _average_path_length(n_samples_leaf)\r\n```\r\n#### Versions\r\n\r\n<!-- Thanks for contributing! -->\r\n\r\n[isoForest_memoryConsumption.docx](https://github.com/scikit-learn/scikit-learn/files/2363437/isoForest_memoryConsumption.docx)\r\n\r\n\n",
  "hints_text": "Thank you for the report and the detailed analysis.\r\n\r\nA pull request to improve the memory usage in `IsolationForest` would be very much appreciated!\r\n\r\nAlso if possible please use code formatting in Github comments -- it really helps readability (I edited your comment above) , and it possible to use some other format than .docx for sharing documents (as it's difficult to open it on Linux). Thanks!\nThanks for a very prompt response.\r\nI'm new to GitHub, not really sure of the process here. :)\r\n\r\nWants to first confirm that it's a valid issue & possible to resolve memory consumption as I have mentioned.\r\nCurrent memory consumption is quite high(~5GB) for 1000 estimators.\r\n\r\nThe attached document has images too & so .docx. Any preference as what format to use for future sharing. \r\n\r\n\nIf I understand correctly, the issue is that in `IsolationForest.decision_function` one allocates two arrays `n_samples_leaf` and `depths` or shape `(n_samples, n_estimators)`. When n_samples is quite large (I imagine it's ~200k in your case?) for large `n_estimators` this can indeed take a lot of memory. Then there are even more such allocations in `_average_path_length`.\r\n\r\nI agree this can be probably optimized as you propose. The other alternative could be just to chunk X row wise then concatenate the results (see related discussion in https://github.com/scikit-learn/scikit-learn/pull/10280).\r\n\r\nIf you make a Pull Request with the proposed changes (see [Contributing docs](http://scikit-learn.org/stable/developers/contributing.html#how-to-contribute)), even if it's work in progress, it will be easier to discuss other possible solutions there while looking at the code diff.\r\n\r\n**Edit:** PDF might be simpler to open, or just posting the results in a comment on Github if it's not too much content. You can also hide some content with the [details tag](https://gist.github.com/citrusui/07978f14b11adada364ff901e27c7f61).\nHello, yes that exactly the issue with isolation forest. The dataset is indeed large 257K samples with 35 numerical features. However, that even needs to be more than that as per my needs and so looking for memory efficiency too in addition to time.\r\n\r\nI have gone through the links and they are quite useful to my specific usecases(I was even facing memory issues with sillloutte score and brute  algo).\r\nI'm also exploring dask package that works on chunks using dask arrays/dataframes and if can alternatively be used in places where sklearn is consuming memory.\r\n\r\nWill be first working on handling the data with chunks and probably in coming weeks will be making the PR for isoforest modification as have to go through the research paper on iso forest algo too. Also looking for other packages/languages than sklearn as how they are doing isoforest.\r\nHere's the bagging implementation seems quite different, i.e. I think the tree is getting build for each sample instead of simply making n_estimators tree and then apply on each sample- In any case I have to understand few other things before starting work/discussion on this in detail.\r\n\r\n\nworking on this for the sprint. So to avoid arrays of shape `(n_samples, n_estimators)` in memory, we can either:\r\n1) updating the average when going through the estimators which will decrease the in-memory shape down to `(n_samples,)`\r\n2) chunk the samples row wise\r\n\r\nWe can also do both options I guess.\r\nI'm not sure if 1) can be done easily though, looking into it.",
  "created_at": "2019-02-26T14:44:46Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/ensemble/tests/test_iforest.py::test_iforest_chunks_works1[0.25-3]\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_chunks_works1[auto-2]\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_chunks_works2[0.25-3]\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_chunks_works2[auto-2]\"]",
  "PASS_TO_PASS": "[\"sklearn/ensemble/tests/test_iforest.py::test_iforest\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_sparse\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_error\", \"sklearn/ensemble/tests/test_iforest.py::test_recalculate_max_depth\", \"sklearn/ensemble/tests/test_iforest.py::test_max_samples_attribute\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_parallel_regression\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_performance\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_works[0.25]\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_works[auto]\", \"sklearn/ensemble/tests/test_iforest.py::test_max_samples_consistency\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_subsampled_features\", \"sklearn/ensemble/tests/test_iforest.py::test_iforest_average_path_length\", \"sklearn/ensemble/tests/test_iforest.py::test_score_samples\", \"sklearn/ensemble/tests/test_iforest.py::test_deprecation\", \"sklearn/ensemble/tests/test_iforest.py::test_behaviour_param\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.991911",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}