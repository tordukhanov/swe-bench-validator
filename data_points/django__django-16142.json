{
  "repo": "django/django",
  "instance_id": "django__django-16142",
  "base_commit": "004f985b918d5ea36fbed9b050459dd22edaf396",
  "patch": "diff --git a/django/middleware/locale.py b/django/middleware/locale.py\n--- a/django/middleware/locale.py\n+++ b/django/middleware/locale.py\n@@ -16,28 +16,37 @@ class LocaleMiddleware(MiddlewareMixin):\n \n     response_redirect_class = HttpResponseRedirect\n \n+    def get_fallback_language(self, request):\n+        \"\"\"\n+        Return the fallback language for the current request based on the\n+        settings. If LANGUAGE_CODE is a variant not included in the supported\n+        languages, get_fallback_language() will try to fallback to a supported\n+        generic variant.\n+\n+        Can be overridden to have a fallback language depending on the request,\n+        e.g. based on top level domain.\n+        \"\"\"\n+        try:\n+            return translation.get_supported_language_variant(settings.LANGUAGE_CODE)\n+        except LookupError:\n+            return settings.LANGUAGE_CODE\n+\n     def process_request(self, request):\n         urlconf = getattr(request, \"urlconf\", settings.ROOT_URLCONF)\n-        (\n-            i18n_patterns_used,\n-            prefixed_default_language,\n-        ) = is_language_prefix_patterns_used(urlconf)\n+        i18n_patterns_used, _ = is_language_prefix_patterns_used(urlconf)\n         language = translation.get_language_from_request(\n             request, check_path=i18n_patterns_used\n         )\n-        language_from_path = translation.get_language_from_path(request.path_info)\n-        if (\n-            not language_from_path\n-            and i18n_patterns_used\n-            and not prefixed_default_language\n-        ):\n-            language = settings.LANGUAGE_CODE\n+        if not language:\n+            language = self.get_fallback_language(request)\n+\n         translation.activate(language)\n         request.LANGUAGE_CODE = translation.get_language()\n \n     def process_response(self, request, response):\n         language = translation.get_language()\n         language_from_path = translation.get_language_from_path(request.path_info)\n+        language_from_request = translation.get_language_from_request(request)\n         urlconf = getattr(request, \"urlconf\", settings.ROOT_URLCONF)\n         (\n             i18n_patterns_used,\n@@ -48,7 +57,7 @@ def process_response(self, request, response):\n             response.status_code == 404\n             and not language_from_path\n             and i18n_patterns_used\n-            and prefixed_default_language\n+            and (prefixed_default_language or language_from_request)\n         ):\n             # Maybe the language code is missing in the URL? Try adding the\n             # language prefix and redirecting to that URL.\ndiff --git a/django/utils/translation/trans_null.py b/django/utils/translation/trans_null.py\n--- a/django/utils/translation/trans_null.py\n+++ b/django/utils/translation/trans_null.py\n@@ -53,7 +53,7 @@ def check_for_language(x):\n \n \n def get_language_from_request(request, check_path=False):\n-    return settings.LANGUAGE_CODE\n+    return None\n \n \n def get_language_from_path(request):\ndiff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -578,11 +578,7 @@ def get_language_from_request(request, check_path=False):\n             return get_supported_language_variant(accept_lang)\n         except LookupError:\n             continue\n-\n-    try:\n-        return get_supported_language_variant(settings.LANGUAGE_CODE)\n-    except LookupError:\n-        return settings.LANGUAGE_CODE\n+    return None\n \n \n @functools.lru_cache(maxsize=1000)\n",
  "test_patch": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -2137,8 +2137,22 @@ def test_other_lang_with_prefix(self):\n         response = self.client.get(\"/fr/simple/\")\n         self.assertEqual(response.content, b\"Oui\")\n \n-    def test_unprefixed_language_other_than_accept_language(self):\n+    def test_unprefixed_language_with_accept_language(self):\n+        \"\"\"'Accept-Language' is respected.\"\"\"\n         response = self.client.get(\"/simple/\", HTTP_ACCEPT_LANGUAGE=\"fr\")\n+        self.assertRedirects(response, \"/fr/simple/\")\n+\n+    def test_unprefixed_language_with_cookie_language(self):\n+        \"\"\"A language set in the cookies is respected.\"\"\"\n+        self.client.cookies.load({settings.LANGUAGE_COOKIE_NAME: \"fr\"})\n+        response = self.client.get(\"/simple/\")\n+        self.assertRedirects(response, \"/fr/simple/\")\n+\n+    def test_unprefixed_language_with_non_valid_language(self):\n+        response = self.client.get(\"/simple/\", HTTP_ACCEPT_LANGUAGE=\"fi\")\n+        self.assertEqual(response.content, b\"Yes\")\n+        self.client.cookies.load({settings.LANGUAGE_COOKIE_NAME: \"fi\"})\n+        response = self.client.get(\"/simple/\")\n         self.assertEqual(response.content, b\"Yes\")\n \n     def test_page_with_dash(self):\n@@ -2214,10 +2228,7 @@ def test_get_language_from_request(self):\n \n     def test_get_language_from_request_null(self):\n         lang = trans_null.get_language_from_request(None)\n-        self.assertEqual(lang, \"en\")\n-        with override_settings(LANGUAGE_CODE=\"de\"):\n-            lang = trans_null.get_language_from_request(None)\n-            self.assertEqual(lang, \"de\")\n+        self.assertEqual(lang, None)\n \n     def test_specific_language_codes(self):\n         # issue 11915\n",
  "problem_statement": "get_language_from_request should not fallback to settings.LANGUAGE_CODE\nDescription\n\t \n\t\t(last modified by sergioisidoro)\n\t \nI'm writing a middleware to fallback to a different language depending on the TLD of the domain of the HTTP_HOST\nHowever, I noticed that get_language_from_request falls back to the settings default language, which will almost always take precedence in this case.\nThis is quite confusing, since settings.LANGUAGE_CODE is not \"from the request\", but from the application configuration, and it feels that the responsibility of falling back to the default language should lie in the Middleware, not in this function.\nSolution / Summary: get_language_from_request should return None, to communicate to the middleware that there was no language from request, and that the middleware should fallback to the default. Otherwise if the get_language_from_request returns \"EN\" we don't know if \"EN\" is actually a request preference, or because it came from the default settings.LANGUAGE_CODE\n",
  "hints_text": "",
  "created_at": "2022-10-02T11:41:57Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests)\", \"'Accept-Language' is respected.\", \"A language set in the cookies is respected.\"]",
  "PASS_TO_PASS": "[\"OSError is raised if the default language is unparseable.\", \"test_round_away_from_one (i18n.tests.UtilsTests)\", \"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_lazy (i18n.tests.TestModels)\", \"test_safestr (i18n.tests.TestModels)\", \"get_language_info return the first fallback language info if the lang_info\", \"test_localized_language_info (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo)\", \"test_check_for_language (i18n.tests.NonDjangoLanguageTests)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_i18n_app_dirs (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_app_dirs_ignore_django_apps (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests)\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests)\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests)\", \"Untranslated strings for territorial language variants use the\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests)\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"\\\"loading_app\\\" does not have translations for all languages provided by\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests)\", \"After setting LANGUAGE, the cache should be cleared and languages\", \"With a non-English LANGUAGE_CODE and if the active language is English\", \"test_get_language_from_path_null (i18n.tests.MiscTests)\", \"test_get_language_from_path_real (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests)\", \"test_parse_language_cookie (i18n.tests.MiscTests)\", \"test_parse_literal_http_header (i18n.tests.MiscTests)\", \"Testing HTTP header parsing. First, we test that we can parse the\", \"Some languages may have special fallbacks that don't follow the simple\", \"Subsequent language codes should be used when the language code is not\", \"Some browsers (Firefox, IE, etc.) use deprecated language codes. As these\", \"With i18n_patterns(..., prefix_default_language=False), the default\", \"A request for a nonexistent URL shouldn't cause a redirect to\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_unprefixed_language_with_non_valid_language (i18n.tests.UnprefixedDefaultLanguageTests)\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests)\", \"test_language_bidi_null (i18n.tests.TranslationTests)\", \"Format string interpolation should work with *_lazy objects.\", \"test_lazy_pickle (i18n.tests.TranslationTests)\", \"Translations on files with Mac or DOS end of lines will be converted\", \"Normally, French has 2 plurals. As other/locale/fr/LC_MESSAGES/django.po\", \"test_ngettext_lazy (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests)\", \"test_override (i18n.tests.TranslationTests)\", \"test_override_decorator (i18n.tests.TranslationTests)\", \"The language restored is the one used when the function was\", \"test_pgettext (i18n.tests.TranslationTests)\", \"Test plurals with ngettext. French differs from English in that 0 is singular.\", \"test_plural_null (i18n.tests.TranslationTests)\", \"Translating a string requiring no auto-escaping with gettext or pgettext\", \"test_to_language (i18n.tests.TranslationTests)\", \"test_to_locale (i18n.tests.TranslationTests)\", \"The first input format for DATE_INPUT_FORMATS, TIME_INPUT_FORMATS, and\", \"test_all_format_strings (i18n.tests.FormattingTests)\", \"The active locale's formats take precedence over the default settings\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests)\", \"test_get_custom_format (i18n.tests.FormattingTests)\", \"test_get_format_lazy_format (i18n.tests.FormattingTests)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests)\", \"Tests the iter_format_modules function.\", \"Tests the iter_format_modules function always yields format modules in\", \"Catalan locale with format i18n disabled translations will be used,\", \"test_l10n_enabled (i18n.tests.FormattingTests)\", \"Localization of numbers\", \"Test the {% localize %} templatetag and the localize/unlocalize filters.\", \"Form input with 'as_hidden' or 'as_text' is correctly localized.\", \"Tests if form input is correctly localized\", \"test_localized_input_func (i18n.tests.FormattingTests)\", \"A string representation is returned for unlocalized numbers.\", \"Tests django.utils.formats.sanitize_separators.\", \"test_sanitize_strftime_format (i18n.tests.FormattingTests)\", \"test_sanitize_strftime_format_with_escaped_percent (i18n.tests.FormattingTests)\", \"Check if sublocales fall back to the main locale\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.750010",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}