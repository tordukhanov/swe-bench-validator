{
  "repo": "django/django",
  "instance_id": "django__django-13667",
  "base_commit": "4cce1d13cfe9d8e56921c5fa8c61e3034dc8e20c",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1116,10 +1116,11 @@ def copy(self):\n     def external_aliases(self):\n         return self.query.external_aliases\n \n-    def as_sql(self, compiler, connection, template=None, **extra_context):\n+    def as_sql(self, compiler, connection, template=None, query=None, **extra_context):\n         connection.ops.check_expression_support(self)\n         template_params = {**self.extra, **extra_context}\n-        subquery_sql, sql_params = self.query.as_sql(compiler, connection)\n+        query = query or self.query\n+        subquery_sql, sql_params = query.as_sql(compiler, connection)\n         template_params['subquery'] = subquery_sql[1:-1]\n \n         template = template or template_params.get('template', self.template)\n@@ -1142,7 +1143,6 @@ class Exists(Subquery):\n     def __init__(self, queryset, negated=False, **kwargs):\n         self.negated = negated\n         super().__init__(queryset, **kwargs)\n-        self.query = self.query.exists()\n \n     def __invert__(self):\n         clone = self.copy()\n@@ -1150,7 +1150,14 @@ def __invert__(self):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n-        sql, params = super().as_sql(compiler, connection, template, **extra_context)\n+        query = self.query.exists(using=connection.alias)\n+        sql, params = super().as_sql(\n+            compiler,\n+            connection,\n+            template=template,\n+            query=query,\n+            **extra_context,\n+        )\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return sql, params\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -525,7 +525,7 @@ def get_count(self, using):\n     def has_filters(self):\n         return self.where\n \n-    def exists(self):\n+    def exists(self, using, limit=True):\n         q = self.clone()\n         if not q.distinct:\n             if q.group_by is True:\n@@ -534,14 +534,21 @@ def exists(self):\n                 # SELECT clause which is about to be cleared.\n                 q.set_group_by(allow_aliases=False)\n             q.clear_select_clause()\n+        if q.combined_queries and q.combinator == 'union':\n+            limit_combined = connections[using].features.supports_slicing_ordering_in_compound\n+            q.combined_queries = tuple(\n+                combined_query.exists(using, limit=limit_combined)\n+                for combined_query in q.combined_queries\n+            )\n         q.clear_ordering(True)\n-        q.set_limits(high=1)\n+        if limit:\n+            q.set_limits(high=1)\n         q.add_extra({'a': 1}, None, None, None, None, None)\n         q.set_extra_mask(['a'])\n         return q\n \n     def has_results(self, using):\n-        q = self.exists()\n+        q = self.exists(using)\n         compiler = q.get_compiler(using=using)\n         return compiler.has_results()\n \n",
  "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -3,6 +3,7 @@\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.test.utils import CaptureQueriesContext\n \n from .models import Number, ReservedName\n \n@@ -254,6 +255,41 @@ def test_count_intersection(self):\n         qs2 = Number.objects.filter(num__lte=5)\n         self.assertEqual(qs1.intersection(qs2).count(), 1)\n \n+    def test_exists_union(self):\n+        qs1 = Number.objects.filter(num__gte=5)\n+        qs2 = Number.objects.filter(num__lte=5)\n+        with CaptureQueriesContext(connection) as context:\n+            self.assertIs(qs1.union(qs2).exists(), True)\n+        captured_queries = context.captured_queries\n+        self.assertEqual(len(captured_queries), 1)\n+        captured_sql = captured_queries[0]['sql']\n+        self.assertNotIn(\n+            connection.ops.quote_name(Number._meta.pk.column),\n+            captured_sql,\n+        )\n+        self.assertEqual(\n+            captured_sql.count(connection.ops.limit_offset_sql(None, 1)),\n+            3 if connection.features.supports_slicing_ordering_in_compound else 1\n+        )\n+\n+    def test_exists_union_empty_result(self):\n+        qs = Number.objects.filter(pk__in=[])\n+        self.assertIs(qs.union(qs).exists(), False)\n+\n+    @skipUnlessDBFeature('supports_select_intersection')\n+    def test_exists_intersection(self):\n+        qs1 = Number.objects.filter(num__gt=5)\n+        qs2 = Number.objects.filter(num__lt=5)\n+        self.assertIs(qs1.intersection(qs1).exists(), True)\n+        self.assertIs(qs1.intersection(qs2).exists(), False)\n+\n+    @skipUnlessDBFeature('supports_select_difference')\n+    def test_exists_difference(self):\n+        qs1 = Number.objects.filter(num__gte=5)\n+        qs2 = Number.objects.filter(num__gte=3)\n+        self.assertIs(qs1.difference(qs2).exists(), False)\n+        self.assertIs(qs2.difference(qs1).exists(), True)\n+\n     def test_get_union(self):\n         qs = Number.objects.filter(num=2)\n         self.assertEqual(qs.union(qs).get().num, 2)\n",
  "problem_statement": "Augment QuerySet.exists() optimizations to .union().exists().\nDescription\n\t \n\t\t(last modified by Simon Charette)\n\t \nThe QuerySet.exists method performs optimization by ​clearing the select clause, ​dropping ordering, and limiting the number of results to 1 if possible.\nA similar optimization can be applied for combined queries when using QuerySet.union() as some query planers (e.g. MySQL) are not smart enough to prune changes down into combined queries.\nFor example, given filtered_authors.union(other_authors).exists() the currently generated is\nSELECT 1 FROM (SELECT * FROM authors WHERE ... ORDER BY ... UNION SELECT * FROM authors WHERE ... ORDER BY ...) LIMIT 1;\nBut some planers won't be smart enough to realize that both * and ORDER BY are not necessary and fetch all matching rows. In order to help them we should generate the following SQL\nSELECT 1 FROM (SELECT 1 FROM authors WHERE ... LIMIT 1 UNION SELECT 1 FROM authors WHERE ... LIMIT 1) LIMIT 1;\nThis can already be done manually through filtered_authors.order_by().values(Value(1))[:1].union(other_authors.order_by().values(Value(1))[:1]).exists() but that involves a lot of boilerplate.\nNote that the optimization is only possible in this form for union and not for intersection and difference since they require both sets to be unaltered.\n",
  "hints_text": "PR ​https://github.com/django/django/pull/13667",
  "created_at": "2020-11-11T22:27:30Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_exists_union (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_empty_qs_union_with_ordered_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_with_filters_unsupported_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression_and_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_none (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order_on_annotation (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.666036",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}