{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-5404",
  "base_commit": "40c5a9d9f2a37631812395ecf356f5c957f092b9",
  "patch": "diff --git a/src/_pytest/doctest.py b/src/_pytest/doctest.py\n--- a/src/_pytest/doctest.py\n+++ b/src/_pytest/doctest.py\n@@ -3,6 +3,7 @@\n import platform\n import sys\n import traceback\n+import warnings\n from contextlib import contextmanager\n \n import pytest\n@@ -12,6 +13,7 @@\n from _pytest.compat import safe_getattr\n from _pytest.fixtures import FixtureRequest\n from _pytest.outcomes import Skipped\n+from _pytest.warning_types import PytestWarning\n \n DOCTEST_REPORT_CHOICE_NONE = \"none\"\n DOCTEST_REPORT_CHOICE_CDIFF = \"cdiff\"\n@@ -368,10 +370,18 @@ def _patch_unwrap_mock_aware():\n     else:\n \n         def _mock_aware_unwrap(obj, stop=None):\n-            if stop is None:\n-                return real_unwrap(obj, stop=_is_mocked)\n-            else:\n+            try:\n+                if stop is None or stop is _is_mocked:\n+                    return real_unwrap(obj, stop=_is_mocked)\n                 return real_unwrap(obj, stop=lambda obj: _is_mocked(obj) or stop(obj))\n+            except Exception as e:\n+                warnings.warn(\n+                    \"Got %r when unwrapping %r.  This is usually caused \"\n+                    \"by a violation of Python's object protocol; see e.g. \"\n+                    \"https://github.com/pytest-dev/pytest/issues/5080\" % (e, obj),\n+                    PytestWarning,\n+                )\n+                raise\n \n         inspect.unwrap = _mock_aware_unwrap\n         try:\n",
  "test_patch": "diff --git a/testing/test_doctest.py b/testing/test_doctest.py\n--- a/testing/test_doctest.py\n+++ b/testing/test_doctest.py\n@@ -1,7 +1,10 @@\n+import inspect\n import textwrap\n \n import pytest\n from _pytest.compat import MODULE_NOT_FOUND_ERROR\n+from _pytest.doctest import _is_mocked\n+from _pytest.doctest import _patch_unwrap_mock_aware\n from _pytest.doctest import DoctestItem\n from _pytest.doctest import DoctestModule\n from _pytest.doctest import DoctestTextfile\n@@ -1224,3 +1227,24 @@ class Example(object):\n     )\n     result = testdir.runpytest(\"--doctest-modules\")\n     result.stdout.fnmatch_lines([\"* 1 passed *\"])\n+\n+\n+class Broken:\n+    def __getattr__(self, _):\n+        raise KeyError(\"This should be an AttributeError\")\n+\n+\n+@pytest.mark.parametrize(  # pragma: no branch (lambdas are not called)\n+    \"stop\", [None, _is_mocked, lambda f: None, lambda f: False, lambda f: True]\n+)\n+def test_warning_on_unwrap_of_broken_object(stop):\n+    bad_instance = Broken()\n+    assert inspect.unwrap.__module__ == \"inspect\"\n+    with _patch_unwrap_mock_aware():\n+        assert inspect.unwrap.__module__ != \"inspect\"\n+        with pytest.warns(\n+            pytest.PytestWarning, match=\"^Got KeyError.* when unwrapping\"\n+        ):\n+            with pytest.raises(KeyError):\n+                inspect.unwrap(bad_instance, stop=stop)\n+    assert inspect.unwrap.__module__ == \"inspect\"\n",
  "problem_statement": "KeyError: '__wrapped__' with from xxx import yyy\n# Checklist\r\n\r\n- [X] Include a detailed description of the bug or suggestion\r\n- [ ] `pip list` of the virtual environment you are using\r\n- [X] pytest and operating system versions\r\n- [X] Minimal example if possible\r\n\r\n# Description\r\n\r\nI implemented `tox` and `pytest` for automated testing.  When I run the [MWE](https://github.com/ZaydH/pytest_bug), I get a `KeyError: '__wrapped__'` when I perform a `from xxx import yyy`.  \r\n\r\nIn the example I included, I do not get the KeyError if I comment out the line: \r\n\r\n...\r\nfrom sty import fg\r\n...\r\n\r\n\r\n# Pip List\r\n\r\nNo virtual environment used.\r\n\r\n# Version Info\r\n\r\n*Python*: 3.6.5 & 3.7.1\r\n*PyTest*: 4.4.0\r\n*OS*: MacOS Mojave 10.14.4\r\n\r\n# MWE\r\n\r\nI created a very simple [repo](https://github.com/ZaydH/pytest_bug).  If I clone the repo and call either `tox` or `pytest` in the root directory, I get the error.\r\n\r\n# Example Error Message\r\n\r\n```\r\n➜  pytest_bug git:(master) ✗ tox\r\nGLOB sdist-make: /Users/zayd/repos/pytest_bug/setup.py\r\npy36 recreate: /Users/zayd/repos/pytest_bug/.tox/py36\r\npy36 installdeps: pytest, sty\r\npy36 inst: /Users/zayd/repos/pytest_bug/.tox/.tmp/package/1/stratego-0.0.0.zip\r\npy36 installed: atomicwrites==1.3.0,attrs==19.1.0,more-itertools==7.0.0,pluggy==0.9.0,py==1.8.0,pytest==4.4.0,six==1.12.0,stratego==0.0.0,sty==1.0.0b9\r\npy36 run-test-pre: PYTHONHASHSEED='591797669'\r\npy36 run-test: commands[0] | pytest\r\n============================================================================================================== test session starts ==============================================================================================================\r\nplatform darwin -- Python 3.6.5, pytest-4.4.0, py-1.8.0, pluggy-0.9.0\r\ncachedir: .tox/py36/.pytest_cache\r\nrootdir: /Users/zayd/repos/pytest_bug, inifile: tox.ini\r\ncollected 0 items / 1 errors                                                                                                                                                                                                                    \r\n\r\n==================================================================================================================== ERRORS =====================================================================================================================\r\n_____________________________________________________________________________________________________ ERROR collecting stratego/printer.py ______________________________________________________________________________________________________\r\n../../.pyenv/versions/3.6.5/Python.framework/Versions/3.6/lib/python3.6/doctest.py:933: in find\r\n    self._find(tests, obj, name, module, source_lines, globs, {})\r\n.tox/py36/lib/python3.6/site-packages/_pytest/doctest.py:406: in _find\r\n    self, tests, obj, name, module, source_lines, globs, seen\r\n../../.pyenv/versions/3.6.5/Python.framework/Versions/3.6/lib/python3.6/doctest.py:992: in _find\r\n    if ((inspect.isroutine(inspect.unwrap(val))\r\n.tox/py36/lib/python3.6/site-packages/_pytest/doctest.py:377: in _mock_aware_unwrap\r\n    return real_unwrap(obj, stop=_is_mocked)\r\n../../.pyenv/versions/3.6.5/Python.framework/Versions/3.6/lib/python3.6/inspect.py:512: in unwrap\r\n    while _is_wrapper(func):\r\n../../.pyenv/versions/3.6.5/Python.framework/Versions/3.6/lib/python3.6/inspect.py:506: in _is_wrapper\r\n    return hasattr(f, '__wrapped__') and not stop(f)\r\nE   KeyError: '__wrapped__'\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n============================================================================================================ 1 error in 0.25 seconds ============================================================================================================\r\nERROR: InvocationError for command /Users/zayd/repos/pytest_bug/.tox/py36/bin/pytest (exited with code 2)\r\n____________________________________________________________________________________________________________________ summary ____________________________________________________________________________________________________________________\r\nERROR:   py36: commands failed\r\n```\r\n\r\nMy apologies if this bug is obvious or I am doing something wrong.  \n",
  "hints_text": "https://github.com/feluxe/sty/blob/master/sty/primitive.py#L62-L66 is incorrect\r\n\r\nthe  problem is a bug in sty\nhttps://github.com/feluxe/sty/issues/17\nThank you.  Since I was able to `import` without `from` it did not occur to me this could be an `sty` problem.  It feels like this is good to close since nothing can be done on your side.  Do you agree?\npytest could error better to help identifying the object or even ignore \"broken\" objects in the given context and only issuing a warning to take note of the issue\nIn this case it's actually an error from the standard library, caused by an invalid third-party library.  This is impossible to detect in general, and very hard even in \"normal\" cases, so IMO trying to issue a warning is impractical.\nthe mock aware unwrap is code in pytest that monkeypatches the stdlib",
  "created_at": "2019-06-05T08:10:48Z",
  "version": "4.6",
  "FAIL_TO_PASS": "[\"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[None]\", \"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[_is_mocked]\", \"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[<lambda>0]\", \"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[<lambda>1]\", \"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[<lambda>2]\"]",
  "PASS_TO_PASS": "[\"testing/test_doctest.py::TestDoctests::test_collect_testtextfile\", \"testing/test_doctest.py::TestDoctests::test_collect_module_empty\", \"testing/test_doctest.py::TestDoctests::test_collect_module_single_modulelevel_doctest\", \"testing/test_doctest.py::TestDoctests::test_collect_module_two_doctest_one_modulelevel\", \"testing/test_doctest.py::TestDoctests::test_collect_module_two_doctest_no_modulelevel\", \"testing/test_doctest.py::TestDoctests::test_simple_doctestfile\", \"testing/test_doctest.py::TestDoctests::test_new_pattern\", \"testing/test_doctest.py::TestDoctests::test_multiple_patterns\", \"testing/test_doctest.py::TestDoctests::test_encoding[foo-ascii]\", \"testing/test_doctest.py::TestDoctests::test_encoding[\\\\xf6\\\\xe4\\\\xfc-latin1]\", \"testing/test_doctest.py::TestDoctests::test_encoding[\\\\xf6\\\\xe4\\\\xfc-utf-8]\", \"testing/test_doctest.py::TestDoctests::test_doctest_unexpected_exception\", \"testing/test_doctest.py::TestDoctests::test_doctest_skip\", \"testing/test_doctest.py::TestDoctests::test_docstring_partial_context_around_error\", \"testing/test_doctest.py::TestDoctests::test_docstring_full_context_around_error\", \"testing/test_doctest.py::TestDoctests::test_doctest_linedata_missing\", \"testing/test_doctest.py::TestDoctests::test_doctest_unex_importerror_only_txt\", \"testing/test_doctest.py::TestDoctests::test_doctest_unex_importerror_with_module\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule_external_and_issue116\", \"testing/test_doctest.py::TestDoctests::test_txtfile_failing\", \"testing/test_doctest.py::TestDoctests::test_txtfile_with_fixtures\", \"testing/test_doctest.py::TestDoctests::test_txtfile_with_usefixtures_in_ini\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule_with_fixtures\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule_three_tests\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule_two_tests_one_fail\", \"testing/test_doctest.py::TestDoctests::test_ignored_whitespace\", \"testing/test_doctest.py::TestDoctests::test_non_ignored_whitespace\", \"testing/test_doctest.py::TestDoctests::test_ignored_whitespace_glob\", \"testing/test_doctest.py::TestDoctests::test_non_ignored_whitespace_glob\", \"testing/test_doctest.py::TestDoctests::test_contains_unicode\", \"testing/test_doctest.py::TestDoctests::test_ignore_import_errors_on_doctest\", \"testing/test_doctest.py::TestDoctests::test_junit_report_for_doctest\", \"testing/test_doctest.py::TestDoctests::test_unicode_doctest\", \"testing/test_doctest.py::TestDoctests::test_unicode_doctest_module\", \"testing/test_doctest.py::TestDoctests::test_print_unicode_value\", \"testing/test_doctest.py::TestDoctests::test_reportinfo\", \"testing/test_doctest.py::TestDoctests::test_valid_setup_py\", \"testing/test_doctest.py::TestDoctests::test_invalid_setup_py\", \"testing/test_doctest.py::TestLiterals::test_allow_unicode[ini]\", \"testing/test_doctest.py::TestLiterals::test_allow_unicode[comment]\", \"testing/test_doctest.py::TestLiterals::test_allow_bytes[ini]\", \"testing/test_doctest.py::TestLiterals::test_allow_bytes[comment]\", \"testing/test_doctest.py::TestLiterals::test_unicode_string\", \"testing/test_doctest.py::TestLiterals::test_bytes_literal\", \"testing/test_doctest.py::TestDoctestSkips::test_one_skipped[text]\", \"testing/test_doctest.py::TestDoctestSkips::test_one_skipped[module]\", \"testing/test_doctest.py::TestDoctestSkips::test_one_skipped_failed[text]\", \"testing/test_doctest.py::TestDoctestSkips::test_one_skipped_failed[module]\", \"testing/test_doctest.py::TestDoctestSkips::test_all_skipped[text]\", \"testing/test_doctest.py::TestDoctestSkips::test_all_skipped[module]\", \"testing/test_doctest.py::TestDoctestSkips::test_vacuous_all_skipped[text]\", \"testing/test_doctest.py::TestDoctestSkips::test_vacuous_all_skipped[module]\", \"testing/test_doctest.py::TestDoctestSkips::test_continue_on_failure\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_doctest_module_session_fixture\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[True-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[True-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[True-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[True-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[False-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[False-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[False-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[False-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-True-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-True-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-True-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-True-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-False-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-False-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-False-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-False-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-True-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-True-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-True-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-True-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-False-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-False-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-False-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-False-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_auto_use_request_attributes[module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_auto_use_request_attributes[session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_auto_use_request_attributes[class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_auto_use_request_attributes[function]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_doctestfile[module]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_doctestfile[session]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_doctestfile[class]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_doctestfile[function]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_pyfile[module]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_pyfile[session]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_pyfile[class]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_pyfile[function]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_udiff[udiff]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_udiff[UDIFF]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_udiff[uDiFf]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_cdiff\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_ndiff\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_none_or_only_first_failure[none]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_none_or_only_first_failure[only_first_failure]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_invalid\", \"testing/test_doctest.py::test_doctest_mock_objects_dont_recurse_missbehaved[unittest.mock]\"]",
  "environment_setup_commit": "d5843f89d3c008ddcb431adbc335b080a79e617e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.928041",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}