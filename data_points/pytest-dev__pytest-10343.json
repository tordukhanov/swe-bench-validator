{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-10343",
  "base_commit": "2be1b8f3559570c456f4bf64fea8067e368dcdfd",
  "patch": "diff --git a/src/_pytest/warning_types.py b/src/_pytest/warning_types.py\n--- a/src/_pytest/warning_types.py\n+++ b/src/_pytest/warning_types.py\n@@ -158,12 +158,15 @@ def warn_explicit_for(method: FunctionType, message: PytestWarning) -> None:\n     filename = inspect.getfile(method)\n     module = method.__module__\n     mod_globals = method.__globals__\n-\n-    warnings.warn_explicit(\n-        message,\n-        type(message),\n-        filename=filename,\n-        module=module,\n-        registry=mod_globals.setdefault(\"__warningregistry__\", {}),\n-        lineno=lineno,\n-    )\n+    try:\n+        warnings.warn_explicit(\n+            message,\n+            type(message),\n+            filename=filename,\n+            module=module,\n+            registry=mod_globals.setdefault(\"__warningregistry__\", {}),\n+            lineno=lineno,\n+        )\n+    except Warning as w:\n+        # If warnings are errors (e.g. -Werror), location information gets lost, so we add it to the message.\n+        raise type(w)(f\"{w}\\n at {filename}:{lineno}\") from None\n",
  "test_patch": "diff --git a/testing/test_warning_types.py b/testing/test_warning_types.py\n--- a/testing/test_warning_types.py\n+++ b/testing/test_warning_types.py\n@@ -36,3 +36,11 @@ def test():\n     )\n     result = pytester.runpytest()\n     result.stdout.fnmatch_lines([\"E       pytest.PytestWarning: some warning\"])\n+\n+\n+@pytest.mark.filterwarnings(\"error\")\n+def test_warn_explicit_for_annotates_errors_with_location():\n+    with pytest.raises(Warning, match=\"(?m)test\\n at .*python_api.py:\\\\d+\"):\n+        warning_types.warn_explicit_for(\n+            pytest.raises, warning_types.PytestWarning(\"test\")  # type: ignore\n+        )\n",
  "problem_statement": "Old-style hookimpl warning has no location information\nThe old-style hookimpl deprecation warning from #9118 has no way to see where the culprit is implemented. I'm now getting:\r\n\r\n```\r\npytest.PytestDeprecationWarning: The hookimpl pytest_configure uses old-style configuration options (marks or attributes).\r\nPlease use the pytest.hookimpl(trylast=True) decorator instead\r\n```\r\n\r\nwith no easy way to figure out what the problem is. I have 12 plugins installed, all of which might have a `pytest_configure`, and I'd rather not have to find out manually which one is the culprit. The error message should show either the plugin that's coming from, or at least the Python file it's in.\nOld-style hookimpl warning has no location information\nThe old-style hookimpl deprecation warning from #9118 has no way to see where the culprit is implemented. I'm now getting:\r\n\r\n```\r\npytest.PytestDeprecationWarning: The hookimpl pytest_configure uses old-style configuration options (marks or attributes).\r\nPlease use the pytest.hookimpl(trylast=True) decorator instead\r\n```\r\n\r\nwith no easy way to figure out what the problem is. I have 12 plugins installed, all of which might have a `pytest_configure`, and I'd rather not have to find out manually which one is the culprit. The error message should show either the plugin that's coming from, or at least the Python file it's in.\n",
  "hints_text": "I'll ensure to include the filename in the warning, this is another fatal flaw of the warning system \nAh, I agree this is somewhat of a problem with Python warnings. The location is indeed included when showing them as normal warnings, but not when turning them into exceptions (via `filterwarnings = error` or `-Werror`.\ni will make warn_explicit_for handle this better\nI'll ensure to include the filename in the warning, this is another fatal flaw of the warning system \nAh, I agree this is somewhat of a problem with Python warnings. The location is indeed included when showing them as normal warnings, but not when turning them into exceptions (via `filterwarnings = error` or `-Werror`.\ni will make warn_explicit_for handle this better",
  "created_at": "2022-10-06T09:45:16Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"testing/test_warning_types.py::test_warn_explicit_for_annotates_errors_with_location\"]",
  "PASS_TO_PASS": "[\"testing/test_warning_types.py::test_warning_types[PytestWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestAssertRewriteWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestCacheWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestConfigWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestCollectionWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestDeprecationWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestRemovedIn8Warning]\", \"testing/test_warning_types.py::test_warning_types[PytestReturnNotNoneWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestExperimentalApiWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestUnhandledCoroutineWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestUnknownMarkWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestUnraisableExceptionWarning]\", \"testing/test_warning_types.py::test_warning_types[PytestUnhandledThreadExceptionWarning]\", \"testing/test_warning_types.py::test_pytest_warnings_repr_integration_test\"]",
  "environment_setup_commit": "572b5657d7ca557593418ce0319fabff88800c73",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.921412",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}