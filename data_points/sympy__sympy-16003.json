{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16003",
  "base_commit": "701441853569d370506514083b995d11f9a130bd",
  "patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -423,10 +423,14 @@ def _print_Derivative(self, e):\n         if requires_partial(e):\n             diff_symbol = 'partialdiff'\n         x.appendChild(self.dom.createElement(diff_symbol))\n-\n         x_1 = self.dom.createElement('bvar')\n-        for sym in e.variables:\n+\n+        for sym, times in reversed(e.variable_count):\n             x_1.appendChild(self._print(sym))\n+            if times > 1:\n+                degree = self.dom.createElement('degree')\n+                degree.appendChild(self._print(sympify(times)))\n+                x_1.appendChild(degree)\n \n         x.appendChild(x_1)\n         x.appendChild(self._print(e.expr))\n@@ -839,39 +843,52 @@ def _print_Number(self, e):\n         return x\n \n     def _print_Derivative(self, e):\n-        mrow = self.dom.createElement('mrow')\n-        x = self.dom.createElement('mo')\n+\n         if requires_partial(e):\n-            x.appendChild(self.dom.createTextNode('&#x2202;'))\n-            y = self.dom.createElement('mo')\n-            y.appendChild(self.dom.createTextNode('&#x2202;'))\n+            d = '&#x2202;'\n         else:\n-            x.appendChild(self.dom.createTextNode(self.mathml_tag(e)))\n-            y = self.dom.createElement('mo')\n-            y.appendChild(self.dom.createTextNode(self.mathml_tag(e)))\n-\n-        brac = self.dom.createElement('mfenced')\n-        brac.appendChild(self._print(e.expr))\n-        mrow = self.dom.createElement('mrow')\n-        mrow.appendChild(x)\n-        mrow.appendChild(brac)\n-\n-        for sym in e.variables:\n-            frac = self.dom.createElement('mfrac')\n-            m = self.dom.createElement('mrow')\n-            x = self.dom.createElement('mo')\n-            if requires_partial(e):\n-                x.appendChild(self.dom.createTextNode('&#x2202;'))\n+            d = self.mathml_tag(e)\n+\n+        # Determine denominator\n+        m = self.dom.createElement('mrow')\n+        dim = 0 # Total diff dimension, for numerator\n+        for sym, num in reversed(e.variable_count):\n+            dim += num\n+            if num >= 2:\n+                x = self.dom.createElement('msup')\n+                xx = self.dom.createElement('mo')\n+                xx.appendChild(self.dom.createTextNode(d))\n+                x.appendChild(xx)\n+                x.appendChild(self._print(num))\n             else:\n-                x.appendChild(self.dom.createTextNode(self.mathml_tag(e)))\n-            y = self._print(sym)\n+                x = self.dom.createElement('mo')\n+                x.appendChild(self.dom.createTextNode(d))\n             m.appendChild(x)\n+            y = self._print(sym)\n             m.appendChild(y)\n-            frac.appendChild(mrow)\n-            frac.appendChild(m)\n-            mrow = frac\n \n-        return frac\n+        mnum = self.dom.createElement('mrow')\n+        if dim >= 2:\n+            x = self.dom.createElement('msup')\n+            xx = self.dom.createElement('mo')\n+            xx.appendChild(self.dom.createTextNode(d))\n+            x.appendChild(xx)\n+            x.appendChild(self._print(dim))\n+        else:\n+            x = self.dom.createElement('mo')\n+            x.appendChild(self.dom.createTextNode(d))\n+\n+        mnum.appendChild(x)\n+        mrow = self.dom.createElement('mrow')\n+        frac = self.dom.createElement('mfrac')\n+        frac.appendChild(mnum)\n+        frac.appendChild(m)\n+        mrow.appendChild(frac)\n+\n+        # Print function\n+        mrow.appendChild(self._print(e.expr))\n+\n+        return mrow\n \n     def _print_Function(self, e):\n         mrow = self.dom.createElement('mrow')\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py\n--- a/sympy/printing/tests/test_mathml.py\n+++ b/sympy/printing/tests/test_mathml.py\n@@ -1,7 +1,7 @@\n from sympy import diff, Integral, Limit, sin, Symbol, Integer, Rational, cos, \\\n     tan, asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh, E, I, oo, \\\n     pi, GoldenRatio, EulerGamma, Sum, Eq, Ne, Ge, Lt, Float, Matrix, Basic, S, \\\n-    MatrixSymbol\n+    MatrixSymbol, Function, Derivative\n from sympy.stats.rv import RandomSymbol\n from sympy.printing.mathml import mathml, MathMLContentPrinter, MathMLPresentationPrinter, \\\n     MathMLPrinter\n@@ -508,22 +508,28 @@ def test_presentation_mathml_functions():\n         ].childNodes[0].nodeValue == 'x'\n \n     mml_2 = mpp._print(diff(sin(x), x, evaluate=False))\n-    assert mml_2.nodeName == 'mfrac'\n+    assert mml_2.nodeName == 'mrow'\n     assert mml_2.childNodes[0].childNodes[0\n-        ].childNodes[0].nodeValue == '&dd;'\n-    assert mml_2.childNodes[0].childNodes[1\n+        ].childNodes[0].childNodes[0].nodeValue == '&dd;'\n+    assert mml_2.childNodes[1].childNodes[1\n         ].nodeName == 'mfenced'\n-    assert mml_2.childNodes[1].childNodes[\n-        0].childNodes[0].nodeValue == '&dd;'\n+    assert mml_2.childNodes[0].childNodes[1\n+        ].childNodes[0].childNodes[0].nodeValue == '&dd;'\n \n     mml_3 = mpp._print(diff(cos(x*y), x, evaluate=False))\n-    assert mml_3.nodeName == 'mfrac'\n+    assert mml_3.childNodes[0].nodeName == 'mfrac'\n     assert mml_3.childNodes[0].childNodes[0\n-        ].childNodes[0].nodeValue == '&#x2202;'\n-    assert mml_2.childNodes[0].childNodes[1\n-        ].nodeName == 'mfenced'\n-    assert mml_3.childNodes[1].childNodes[\n-        0].childNodes[0].nodeValue == '&#x2202;'\n+        ].childNodes[0].childNodes[0].nodeValue == '&#x2202;'\n+    assert mml_3.childNodes[1].childNodes[0\n+        ].childNodes[0].nodeValue == 'cos'\n+\n+\n+def test_print_derivative():\n+    f = Function('f')\n+    z = Symbol('z')\n+    d = Derivative(f(x, y, z), x, z, x, z, z, y)\n+    assert mathml(d) == r'<apply><partialdiff/><bvar><ci>y</ci><ci>z</ci><degree><cn>2</cn></degree><ci>x</ci><ci>z</ci><ci>x</ci></bvar><apply><f/><ci>x</ci><ci>y</ci><ci>z</ci></apply></apply>'\n+    assert mathml(d, printer='presentation') == r'<mrow><mfrac><mrow><msup><mo>&#x2202;</mo><mn>6</mn></msup></mrow><mrow><mo>&#x2202;</mo><mi>y</mi><msup><mo>&#x2202;</mo><mn>2</mn></msup><mi>z</mi><mo>&#x2202;</mo><mi>x</mi><mo>&#x2202;</mo><mi>z</mi><mo>&#x2202;</mo><mi>x</mi></mrow></mfrac><mrow><mi>f</mi><mfenced><mi>x</mi><mi>y</mi><mi>z</mi></mfenced></mrow></mrow>'\n \n \n def test_presentation_mathml_limits():\n",
  "problem_statement": "MathML presentation printing of multiple derivatives messed up\nCurrently, the MathML presentation printed version of the expression `Derivative(f(x, y, z), x, z, x, z, z, y)`\r\nlooks like:\r\n![image](https://user-images.githubusercontent.com/8114497/52842849-a3d64380-3100-11e9-845f-8abacba54635.png)\r\n\r\nwhile a proper rending would be more along the lines of the LaTeX equivalent:\r\n![image](https://user-images.githubusercontent.com/8114497/52843456-78545880-3102-11e9-9d73-1d2d515a888c.png)\r\n\r\nHence, the `_print_Derivative` method should be improved, first and foremost to print all the derivative variables on a single line and to get the correct power in the numerator.\r\n\r\nIt is also preferred if the actual function ends up on a separate line (not sure if there is some logic to tell when this should or should not happen).\r\n\r\nIf possible, the logic to group adjacent identical terms can be applied, see the discussion and code in #15975 which gives an idea of how to implement it.\r\n\n[To be closed] Added _print_derivative2 methods from #3926\n<!-- Your title above should be a short description of what\r\nwas changed. Do not include the issue number in the title. -->\r\n\r\n#### References to other Issues or PRs\r\n<!-- If this pull request fixes an issue, write \"Fixes #NNNN\" in that exact\r\nformat, e.g. \"Fixes #1234\". See\r\nhttps://github.com/blog/1506-closing-issues-via-pull-requests . Please also\r\nwrite a comment on that issue linking back to this pull request once it is\r\nopen. -->\r\nCloses #3926 \r\n\r\n#### Brief description of what is fixed or changed\r\nAs the attached diff in #3926 was pretty large due to line endings, I extracted the interesting parts, the methods `_print_derivative2` for LaTex, pretty and MathML printers.\r\n\r\n#### Other comments\r\nNot sure what to do with it. It looked quite promising in the original PR. Maybe one should have a switch to select between these two methods of printing?\r\n\r\nI have not checked the code more than modifying it to work with current Python and sympy version, at least from a \"no-static-warnings-in-Spyder\"-perspective.\r\n\r\n#### Release Notes\r\n\r\n<!-- Write the release notes for this release below. See\r\nhttps://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information\r\non how to write release notes. The bot will check your release notes\r\nautomatically to see if they are formatted correctly. -->\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\nNO ENTRY\r\n<!-- END RELEASE NOTES -->\r\n\nMathML presentation printing of multiple derivatives messed up\nCurrently, the MathML presentation printed version of the expression `Derivative(f(x, y, z), x, z, x, z, z, y)`\r\nlooks like:\r\n![image](https://user-images.githubusercontent.com/8114497/52842849-a3d64380-3100-11e9-845f-8abacba54635.png)\r\n\r\nwhile a proper rending would be more along the lines of the LaTeX equivalent:\r\n![image](https://user-images.githubusercontent.com/8114497/52843456-78545880-3102-11e9-9d73-1d2d515a888c.png)\r\n\r\nHence, the `_print_Derivative` method should be improved, first and foremost to print all the derivative variables on a single line and to get the correct power in the numerator.\r\n\r\nIt is also preferred if the actual function ends up on a separate line (not sure if there is some logic to tell when this should or should not happen).\r\n\r\nIf possible, the logic to group adjacent identical terms can be applied, see the discussion and code in #15975 which gives an idea of how to implement it.\r\n\n",
  "hints_text": "\n\n",
  "created_at": "2019-02-16T11:52:43Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_presentation_mathml_functions\", \"test_print_derivative\"]",
  "PASS_TO_PASS": "[\"test_mathml_printer\", \"test_content_printmethod\", \"test_content_mathml_core\", \"test_content_mathml_functions\", \"test_content_mathml_limits\", \"test_content_mathml_integrals\", \"test_content_mathml_matrices\", \"test_content_mathml_sums\", \"test_content_mathml_tuples\", \"test_content_mathml_add\", \"test_content_mathml_Rational\", \"test_content_mathml_constants\", \"test_content_mathml_trig\", \"test_content_mathml_relational\", \"test_content_symbol\", \"test_content_mathml_greek\", \"test_content_mathml_order\", \"test_content_settings\", \"test_presentation_printmethod\", \"test_presentation_mathml_core\", \"test_presentation_mathml_limits\", \"test_presentation_mathml_integrals\", \"test_presentation_mathml_matrices\", \"test_presentation_mathml_sums\", \"test_presentation_mathml_add\", \"test_presentation_mathml_Rational\", \"test_presentation_mathml_constants\", \"test_presentation_mathml_trig\", \"test_presentation_mathml_relational\", \"test_presentation_symbol\", \"test_presentation_mathml_greek\", \"test_presentation_mathml_order\", \"test_presentation_settings\", \"test_toprettyxml_hooking\", \"test_print_basic\", \"test_root_notation_print\", \"test_print_matrix_symbol\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.105110",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}