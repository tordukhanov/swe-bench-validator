{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14699",
  "base_commit": "6e95230e0ee183a4fb8803a7e49d7744f0a0025c",
  "patch": "diff --git a/sympy/physics/vector/frame.py b/sympy/physics/vector/frame.py\n--- a/sympy/physics/vector/frame.py\n+++ b/sympy/physics/vector/frame.py\n@@ -697,7 +697,8 @@ def orientnew(self, newname, rot_type, amounts, rot_order='',\n \n         \"\"\"\n \n-        newframe = self.__class__(newname, variables, indices, latexs)\n+        newframe = self.__class__(newname, variables=variables,\n+                                  indices=indices, latexs=latexs)\n         newframe.orient(self, rot_type, amounts, rot_order)\n         return newframe\n \n",
  "test_patch": "diff --git a/sympy/physics/vector/tests/test_frame.py b/sympy/physics/vector/tests/test_frame.py\n--- a/sympy/physics/vector/tests/test_frame.py\n+++ b/sympy/physics/vector/tests/test_frame.py\n@@ -166,6 +166,59 @@ class MyReferenceFrame(ReferenceFrame):\n     assert isinstance(C, MyReferenceFrame)\n \n \n+def test_orientnew_respects_input_indices():\n+    N = ReferenceFrame('N')\n+    q1 = dynamicsymbols('q1')\n+    A = N.orientnew('a', 'Axis', [q1, N.z])\n+    #modify default indices:\n+    minds = [x+'1' for x in N.indices]\n+    B = N.orientnew('b', 'Axis', [q1, N.z], indices=minds)\n+\n+    assert N.indices == A.indices\n+    assert B.indices == minds\n+\n+def test_orientnew_respects_input_latexs():\n+    N = ReferenceFrame('N')\n+    q1 = dynamicsymbols('q1')\n+    A = N.orientnew('a', 'Axis', [q1, N.z])\n+\n+    #build default and alternate latex_vecs:\n+    def_latex_vecs = [(r\"\\mathbf{\\hat{%s}_%s}\" % (A.name.lower(),\n+                      A.indices[0])), (r\"\\mathbf{\\hat{%s}_%s}\" %\n+                      (A.name.lower(), A.indices[1])),\n+                      (r\"\\mathbf{\\hat{%s}_%s}\" % (A.name.lower(),\n+                      A.indices[2]))]\n+\n+    name = 'b'\n+    indices = [x+'1' for x in N.indices]\n+    new_latex_vecs = [(r\"\\mathbf{\\hat{%s}_{%s}}\" % (name.lower(),\n+                      indices[0])), (r\"\\mathbf{\\hat{%s}_{%s}}\" %\n+                      (name.lower(), indices[1])),\n+                      (r\"\\mathbf{\\hat{%s}_{%s}}\" % (name.lower(),\n+                      indices[2]))]\n+\n+    B = N.orientnew(name, 'Axis', [q1, N.z], latexs=new_latex_vecs)\n+\n+    assert A.latex_vecs == def_latex_vecs\n+    assert B.latex_vecs == new_latex_vecs\n+    assert B.indices != indices\n+\n+def test_orientnew_respects_input_variables():\n+    N = ReferenceFrame('N')\n+    q1 = dynamicsymbols('q1')\n+    A = N.orientnew('a', 'Axis', [q1, N.z])\n+\n+    #build non-standard variable names\n+    name = 'b'\n+    new_variables = ['notb_'+x+'1' for x in N.indices]\n+    B = N.orientnew(name, 'Axis', [q1, N.z], variables=new_variables)\n+\n+    for j,var in enumerate(A.varlist):\n+        assert var.name == A.name + '_' + A.indices[j]\n+\n+    for j,var in enumerate(B.varlist):\n+        assert var.name == new_variables[j]\n+\n def test_issue_10348():\n     u = dynamicsymbols('u:3')\n     I = ReferenceFrame('I')\n",
  "problem_statement": "orientnew in sympy.physics.mechanics does not support indices\n```\nThere is no option for setting the indices when using the orientnew method on a ReferenceFrame in sympy.physics.mechanics.\n\nYou can specify indices in a reference frame as so:\n\nA = ReferenceFrame('A', indices=('1', '2', '3'))\n\nbut not when creating a reference frame via orientnew:\n\nB = A.orientnew('B', 'Axis', [theta, A['1']], indices=('1', '2', '3'))\n\nSome sort of global setting at the beginning of a script would also be nice if you know that all of the indices in a section of your script will be setup with the same style of indices.\n```\n\nOriginal issue for #5880: http://code.google.com/p/sympy/issues/detail?id=2781\nOriginal author: https://code.google.com/u/110966557175293116547/\n\n",
  "hints_text": "```\n**Labels:** Mechanics  \n\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2781#c1\nOriginal author: https://code.google.com/u/101069955704897915480/\n\n```\n**Cc:** gilbertg...@gmail.com hazelnu...@gmail.com  \n\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2781#c2\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\n```\nOne way to fix this would be to add kwargs to orientnew and passing them to the constructor of the new reference frame, line 958 of essential.py\n\nA cleaner solution would be to add a class member variable (static class member?  not sure of terminology here) that you set once at the beginning of your script, like:\n\n>>> ReferenceFrame.indices = ('1', '2', '3')\n\nand then these would be used for the remainder of your script and you wouldn't have to constantly be passing in the indices argument.\n\nHowever, this approach could get tricky if you have some frames you want to index with the 'x', 'y', 'z' convention and others which you want to use the '1', '2', '3' convention.  Requiring the user to specify indices all the time would avoid this but be a bit more typing and visual noise for derivations that use a single set of indices other than the 'x', 'y', 'z' ones.\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2781#c3\nOriginal author: https://code.google.com/u/118331842568896227320/\n\n```\nI don't think that it is too much typing and visual noise for the user to type out the indices each time a reference frame is created. It would be the easier of the two solutions to simply implement the kwargs. You don't create that many reference frames in a typical script, and if you did need to create lots of reference frames you'd probably create them with a loop and store them in a list or something. Then it is easy to supply the same indices to each reference frame.\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2781#c4\nOriginal author: https://code.google.com/u/110966557175293116547/\n\n```\nDid https://github.com/sympy/sympy/pull/706 fix this? (It is referenced in the pull blurb.)\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2781#c5\nOriginal author: https://code.google.com/u/117933771799683895267/\n\n```\nYes, 706 fixed this.\nAlthough now I realize that the docstring for orientnew wasn't updated properly. The Parameter list should include the two new optional parameters.\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2781#c6\nOriginal author: https://code.google.com/u/102887550923201014259/\n",
  "created_at": "2018-05-04T18:30:31Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_orientnew_respects_input_indices\", \"test_orientnew_respects_input_latexs\", \"test_orientnew_respects_input_variables\"]",
  "PASS_TO_PASS": "[\"test_coordinate_vars\", \"test_ang_vel\", \"test_dcm\", \"test_orientnew_respects_parent_class\", \"test_issue_10348\", \"test_issue_11503\", \"test_partial_velocity\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.094907",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}