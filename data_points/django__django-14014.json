{
  "repo": "django/django",
  "instance_id": "django__django-14014",
  "base_commit": "45bef6706ae7436b5c2c503018b21ff70b2e6728",
  "patch": "diff --git a/django/db/backends/sqlite3/introspection.py b/django/db/backends/sqlite3/introspection.py\n--- a/django/db/backends/sqlite3/introspection.py\n+++ b/django/db/backends/sqlite3/introspection.py\n@@ -413,7 +413,7 @@ def get_constraints(self, cursor, table_name):\n                     }\n                 constraints[index]['columns'].append(column)\n             # Add type and column orders for indexes\n-            if constraints[index]['index'] and not constraints[index]['unique']:\n+            if constraints[index]['index']:\n                 # SQLite doesn't support any index type other than b-tree\n                 constraints[index]['type'] = Index.suffix\n                 orders = self._get_index_columns_orders(sql)\n",
  "test_patch": "diff --git a/tests/introspection/models.py b/tests/introspection/models.py\n--- a/tests/introspection/models.py\n+++ b/tests/introspection/models.py\n@@ -80,3 +80,18 @@ class Meta:\n         constraints = [\n             models.CheckConstraint(name='up_votes_gte_0_check', check=models.Q(up_votes__gte=0)),\n         ]\n+\n+\n+class UniqueConstraintConditionModel(models.Model):\n+    name = models.CharField(max_length=255)\n+    color = models.CharField(max_length=32, null=True)\n+\n+    class Meta:\n+        required_db_features = {'supports_partial_indexes'}\n+        constraints = [\n+            models.UniqueConstraint(\n+                fields=['name'],\n+                name='cond_name_without_color_uniq',\n+                condition=models.Q(color__isnull=True),\n+            ),\n+        ]\ndiff --git a/tests/introspection/tests.py b/tests/introspection/tests.py\n--- a/tests/introspection/tests.py\n+++ b/tests/introspection/tests.py\n@@ -6,7 +6,7 @@\n \n from .models import (\n     Article, ArticleReporter, CheckConstraintModel, City, Comment, Country,\n-    District, Reporter,\n+    District, Reporter, UniqueConstraintConditionModel,\n )\n \n \n@@ -221,6 +221,19 @@ def test_get_constraints_indexes_orders(self):\n                 indexes_verified += 1\n         self.assertEqual(indexes_verified, len(expected_columns))\n \n+    @skipUnlessDBFeature('supports_index_column_ordering', 'supports_partial_indexes')\n+    def test_get_constraints_unique_indexes_orders(self):\n+        with connection.cursor() as cursor:\n+            constraints = connection.introspection.get_constraints(\n+                cursor,\n+                UniqueConstraintConditionModel._meta.db_table,\n+            )\n+        self.assertIn('cond_name_without_color_uniq', constraints)\n+        constraint = constraints['cond_name_without_color_uniq']\n+        self.assertIs(constraint['unique'], True)\n+        self.assertEqual(constraint['columns'], ['name'])\n+        self.assertEqual(constraint['orders'], ['ASC'])\n+\n     def test_get_constraints(self):\n         def assertDetails(details, cols, primary_key=False, unique=False, index=False, check=False, foreign_key=None):\n             # Different backends have different values for same constraints:\n",
  "problem_statement": "Introspection doesn't return column order for unique constraints on SQLite.\nDescription\n\t\nIntrospection doesn't return column order for unique constraints on SQLite.\n",
  "hints_text": "",
  "created_at": "2021-02-17T09:55:34Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_get_constraints_unique_indexes_orders (introspection.tests.IntrospectionTests)\"]",
  "PASS_TO_PASS": "[\"test_bigautofield (introspection.tests.IntrospectionTests)\", \"test_django_table_names (introspection.tests.IntrospectionTests)\", \"test_django_table_names_retval_type (introspection.tests.IntrospectionTests)\", \"test_get_constraints (introspection.tests.IntrospectionTests)\", \"test_get_constraints_index_types (introspection.tests.IntrospectionTests)\", \"Indexes have the 'orders' key with a list of 'ASC'/'DESC' values.\", \"test_get_key_columns (introspection.tests.IntrospectionTests)\", \"test_get_primary_key_column (introspection.tests.IntrospectionTests)\", \"test_get_relations (introspection.tests.IntrospectionTests)\", \"With SQLite, foreign keys can be added with different syntaxes and\", \"test_get_table_description_col_lengths (introspection.tests.IntrospectionTests)\", \"test_get_table_description_names (introspection.tests.IntrospectionTests)\", \"test_get_table_description_nullable (introspection.tests.IntrospectionTests)\", \"test_get_table_description_types (introspection.tests.IntrospectionTests)\", \"test_installed_models (introspection.tests.IntrospectionTests)\", \"test_sequence_list (introspection.tests.IntrospectionTests)\", \"test_smallautofield (introspection.tests.IntrospectionTests)\", \"test_table_names (introspection.tests.IntrospectionTests)\", \"test_table_names_with_views (introspection.tests.IntrospectionTests)\", \"test_unmanaged_through_model (introspection.tests.IntrospectionTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.676075",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}