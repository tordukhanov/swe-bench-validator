{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-11544",
  "base_commit": "89808c6f49e1738765d18309244dca0156ee28f6",
  "patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -406,7 +406,8 @@ def _check_uri(self, uri: str, hyperlink: Hyperlink) -> tuple[str, str, int]:\n                     _user_agent=self.user_agent,\n                     _tls_info=(self.tls_verify, self.tls_cacerts),\n                 ) as response:\n-                    if response.ok and anchor and not contains_anchor(response, anchor):\n+                    if (self.check_anchors and response.ok and anchor\n+                            and not contains_anchor(response, anchor)):\n                         raise Exception(__(f'Anchor {anchor!r} not found'))\n \n                 # Copy data we need from the (closed) response\n",
  "test_patch": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -152,6 +152,7 @@ def test_defaults(app):\n     }\n     # looking for '#top' and '#does-not-exist' not found should fail\n     assert rowsby[\"http://localhost:7777/#top\"][\"info\"] == \"Anchor 'top' not found\"\n+    assert rowsby[\"http://localhost:7777/#top\"][\"status\"] == \"broken\"\n     assert rowsby[\"http://localhost:7777#does-not-exist\"][\"info\"] == \"Anchor 'does-not-exist' not found\"\n     # images should fail\n     assert \"Not Found for url: http://localhost:7777/image.png\" in rowsby[\"http://localhost:7777/image.png\"][\"info\"]\n@@ -166,6 +167,22 @@ def test_defaults(app):\n     }\n \n \n+@pytest.mark.sphinx(\n+    'linkcheck', testroot='linkcheck', freshenv=True,\n+    confoverrides={'linkcheck_anchors': False})\n+def test_check_link_response_only(app):\n+    with http_server(DefaultsHandler):\n+        app.build()\n+\n+    # JSON output\n+    assert (app.outdir / 'output.json').exists()\n+    content = (app.outdir / 'output.json').read_text(encoding='utf8')\n+\n+    rows = [json.loads(x) for x in content.splitlines()]\n+    rowsby = {row[\"uri\"]: row for row in rows}\n+    assert rowsby[\"http://localhost:7777/#top\"][\"status\"] == \"working\"\n+\n+\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck-too-many-retries', freshenv=True)\n def test_too_many_retries(app):\n     with http_server(DefaultsHandler):\n",
  "problem_statement": "linkcheck failing after Sphinx 7.1.0 release\n### Describe the bug\n\nStarting with `Sphinx 7.1.0`, my package(s) started reporting `linkcheck` failures due to \"Anchor not found\", e.g., https://github.com/astropy/photutils/actions/runs/5688763395/job/15419142358.\r\n\r\nReverting to Sphinx 7.0.1 fixes the issue.\r\n\r\n`git bisect` reveals the issue started with e45fb5e61b6ea3ee707a9e4ee8792f45c9246fae, this PR: https://github.com/sphinx-doc/sphinx/pull/11432\n\n### How to Reproduce\n\n$ git clone git@github.com:astropy/photutils.git\r\n$ cd photutils\r\n$ tox -e linkcheck\r\n\n\n### Environment Information\n\n```text\nPlatform:              darwin; (macOS-13.5-x86_64-i386-64bit)\r\nPython version:        3.11.3 (main, May 26 2023, 21:36:22) [Clang 14.0.3 (clang-1403.0.22.14.1)])\r\nPython implementation: CPython\r\nSphinx version:        7.1.1\r\nDocutils version:      0.20.1\r\nJinja2 version:        3.1.2\r\nPygments version:      2.15.1\n```\n\n\n### Sphinx extensions\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "cc: @pllim\nI wouldn't have suspected Sphinx itself. Thanks for investigating!\n@larrybradley @pllim @adamtheturtle thanks for reporting this (both here and in #11532).  The [regression](https://github.com/sphinx-doc/sphinx/pull/11432#discussion_r1279598982) was indeed introduced in #11432.\r\n\r\nI'm working on fix for this and hope to have that in place relatively soon - a fixup should optimistically be available within the next few days.\r\n\r\nDespite the problem, to try to make the most of a learning opportunity: could I ask out of curiosity why you prefer to run linkchecking with anchor checking disabled?\n@jayaddison Thanks.  It's been so long that I don't even recall setting `linkcheck_anchors = False`. Perhaps it was because of this statement from the docs:\r\n\"Since this requires downloading the whole document, itâ€™s considerably slower when enabled.\"\r\n\r\nI may just switch to `linkcheck_anchors = True`.",
  "created_at": "2023-07-31T22:21:47Z",
  "version": "7.1",
  "FAIL_TO_PASS": "[\"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date\"]",
  "PASS_TO_PASS": "[\"tests/test_build_linkcheck.py::test_defaults\", \"tests/test_build_linkcheck.py::test_check_link_response_only\", \"tests/test_build_linkcheck.py::test_too_many_retries\", \"tests/test_build_linkcheck.py::test_raw_node\", \"tests/test_build_linkcheck.py::test_anchors_ignored\", \"tests/test_build_linkcheck.py::test_anchors_ignored_for_url\", \"tests/test_build_linkcheck.py::test_raises_for_invalid_status\", \"tests/test_build_linkcheck.py::test_auth_header_uses_first_match\", \"tests/test_build_linkcheck.py::test_auth_header_no_match\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_default\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_GET\", \"tests/test_build_linkcheck.py::test_linkcheck_allowed_redirects\", \"tests/test_build_linkcheck.py::test_invalid_ssl\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file\", \"tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header\", \"tests/test_build_linkcheck.py::test_too_many_requests_user_timeout\", \"tests/test_build_linkcheck.py::test_limit_rate_default_sleep\", \"tests/test_build_linkcheck.py::test_limit_rate_user_max_delay\", \"tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time\", \"tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time\", \"tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time\", \"tests/test_build_linkcheck.py::test_connection_contention\", \"tests/test_build_linkcheck.py::test_get_after_head_raises_connection_error\", \"tests/test_build_linkcheck.py::test_linkcheck_exclude_documents\"]",
  "environment_setup_commit": "89808c6f49e1738765d18309244dca0156ee28f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.038293",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}