{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15976",
  "base_commit": "701441853569d370506514083b995d11f9a130bd",
  "patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -743,11 +743,6 @@ def _print_Sum(self, e):\n         return mrow\n \n     def _print_Symbol(self, sym, style='plain'):\n-        x = self.dom.createElement('mi')\n-\n-        if style == 'bold':\n-            x.setAttribute('mathvariant', 'bold')\n-\n         def join(items):\n             if len(items) > 1:\n                 mrow = self.dom.createElement('mrow')\n@@ -781,24 +776,24 @@ def translate(s):\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n+                x = mname\n             else:\n-                msub = self.dom.createElement('msub')\n-                msub.appendChild(mname)\n-                msub.appendChild(join(subs))\n-                x.appendChild(msub)\n+                x = self.dom.createElement('msub')\n+                x.appendChild(mname)\n+                x.appendChild(join(subs))\n         else:\n             if len(subs) == 0:\n-                msup = self.dom.createElement('msup')\n-                msup.appendChild(mname)\n-                msup.appendChild(join(supers))\n-                x.appendChild(msup)\n+                x = self.dom.createElement('msup')\n+                x.appendChild(mname)\n+                x.appendChild(join(supers))\n             else:\n-                msubsup = self.dom.createElement('msubsup')\n-                msubsup.appendChild(mname)\n-                msubsup.appendChild(join(subs))\n-                msubsup.appendChild(join(supers))\n-                x.appendChild(msubsup)\n+                x = self.dom.createElement('msubsup')\n+                x.appendChild(mname)\n+                x.appendChild(join(subs))\n+                x.appendChild(join(supers))\n+        # Set bold font?\n+        if style == 'bold':\n+            x.setAttribute('mathvariant', 'bold')\n         return x\n \n     def _print_MatrixSymbol(self, sym):\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py\n--- a/sympy/printing/tests/test_mathml.py\n+++ b/sympy/printing/tests/test_mathml.py\n@@ -735,103 +735,86 @@ def test_presentation_symbol():\n     del mml\n \n     mml = mpp._print(Symbol(\"x^2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n     del mml\n \n     mml = mpp._print(Symbol(\"x__2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n     del mml\n \n     mml = mpp._print(Symbol(\"x_2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msub'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.nodeName == 'msub'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n     del mml\n \n     mml = mpp._print(Symbol(\"x^3_2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msubsup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[2].childNodes[0].nodeValue == '3'\n+    assert mml.nodeName == 'msubsup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[2].childNodes[0].nodeValue == '3'\n     del mml\n \n     mml = mpp._print(Symbol(\"x__3_2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msubsup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[2].childNodes[0].nodeValue == '3'\n+    assert mml.nodeName == 'msubsup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[2].childNodes[0].nodeValue == '3'\n     del mml\n \n     mml = mpp._print(Symbol(\"x_2_a\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msub'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mrow'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].childNodes[\n-        0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].nodeName == 'mo'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].childNodes[\n-        0].nodeValue == ' '\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].childNodes[\n-        0].nodeValue == 'a'\n+    assert mml.nodeName == 'msub'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mrow'\n+    assert mml.childNodes[1].childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[1].childNodes[1].nodeName == 'mo'\n+    assert mml.childNodes[1].childNodes[1].childNodes[0].nodeValue == ' '\n+    assert mml.childNodes[1].childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[2].childNodes[0].nodeValue == 'a'\n     del mml\n \n     mml = mpp._print(Symbol(\"x^2^a\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mrow'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].childNodes[\n-        0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].nodeName == 'mo'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].childNodes[\n-        0].nodeValue == ' '\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].childNodes[\n-        0].nodeValue == 'a'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mrow'\n+    assert mml.childNodes[1].childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[1].childNodes[1].nodeName == 'mo'\n+    assert mml.childNodes[1].childNodes[1].childNodes[0].nodeValue == ' '\n+    assert mml.childNodes[1].childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[2].childNodes[0].nodeValue == 'a'\n     del mml\n \n     mml = mpp._print(Symbol(\"x__2__a\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mrow'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].childNodes[\n-        0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].nodeName == 'mo'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].childNodes[\n-        0].nodeValue == ' '\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].childNodes[\n-        0].nodeValue == 'a'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mrow'\n+    assert mml.childNodes[1].childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[1].childNodes[1].nodeName == 'mo'\n+    assert mml.childNodes[1].childNodes[1].childNodes[0].nodeValue == ' '\n+    assert mml.childNodes[1].childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[2].childNodes[0].nodeValue == 'a'\n     del mml\n \n \n",
  "problem_statement": "A symbol ending with a number is made invisible when printing with MathML\nA variable with a number, such as x1, is made invisible when printing in a MathML format.\r\n`import sympy\r\nfrom sympy.printing.mathml import mathml\r\n\r\nx2, y, z = sympy.symbols('x2 y z')\r\ny = x2*z+x2**3\r\nf = open('sympy_test.html', 'w')\r\nf.write('\\n')\r\nf.write('\\n')\r\nf.write('\\n')\r\nf.write('\\n')\r\nf.write(sympy.mathml(y, printer='presentation')+'\\n')\r\nf.write('\\n')\r\nf.write('\\n')\r\nf.write('\\n')\r\nf.close()`\r\n\r\nViewing the output in Safari 12.0.2:\r\n<img width=\"93\" alt=\"screen shot 2018-12-31 at 12 21 00 pm\" src=\"https://user-images.githubusercontent.com/46286768/50567565-48d8c080-0cfb-11e9-84d2-5738f1c2e2ba.png\">\r\n\r\nIf 'x' is used instead of 'x2', it works as expected:\r\nx, y, z = sympy.symbols('x y z')\r\ny = x*z+x**3\r\n<img width=\"78\" alt=\"screen shot 2018-12-31 at 12 26 24 pm\" src=\"https://user-images.githubusercontent.com/46286768/50567570-542bec00-0cfb-11e9-986d-015e0023a2a1.png\">\r\n\r\nBTW, I'm on a MacBook Pro, OS 10.14.2, Sympy 1.3, in Eclipse 2018-19, and Python 3.7.\n",
  "hints_text": "I found the MathML code that seems to be in error, when symbol with a number in it is used, the following code is generated:\r\n`<mi><msub><mi>r</mi><mi>2</mi></msub></mi>`\r\n\r\nIt looks like an extra set of <mi></mi> tags are present, when they are removed:\r\n`<msub><mi>r</mi><mi>2</mi></msub>`\r\n\r\nthe rendered output has the symbol in it.\nI tried this on a Windows machine today and it works correctly. It doesn't on the MacBook Pro I'm using, OS 10.14.2.\nI am able to reproduce this behaviour on Safari. Unfortunately, Chrome does not support MathML.\r\n\r\nThe html code with MathML for `x2*z + x2**3` is:\r\n```html\r\n<html>\r\n    <body>\r\n        <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\r\n\r\n            <!-- The line following is the generated MathML code -->\r\n            <mrow><msup><mrow><mfenced><mi><msub><mi>x</mi><mi>2</mi></msub></mi></mfenced></mrow><mn>3</mn></msup><mo>+</mo><mrow><mi><msub><mi>x</mi><mi>2</mi></msub></mi><mo>&InvisibleTimes;</mo><mi>z</mi></mrow></mrow>\r\n\r\n        </math>\r\n    </body>\r\n</html>\r\n```\r\n\r\nRemoving the pair of `mi` tags around `<msub><mi>x</mi><mi>2</mi></msub>` works.\nI tried on a Ubuntu machine with chrome and Mozilla and it works fine for me.\nYes it seems to be specific to Safari. As a workaround I\"m using a regular\nexpression to find and remove any extra <mi> tags..\n\nOn Fri, Jan 18, 2019 at 1:59 AM Ritu Raj Singh <notifications@github.com>\nwrote:\n\n> I tried on a Ubuntu machine with chrome and Mozilla and it works fine for\n> me.\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sympy/sympy/issues/15718#issuecomment-455473509>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AsJHsGDSN-_HPPndcgRdjUKSpZhsyb9Oks5vEYzzgaJpZM4ZlqHG>\n> .\n>\n\nLooking at https://www.tutorialspoint.com/online_mathml_editor.php\r\n\r\n`<mi><msub><mi>r</mi><mi>2</mi></msub></mi>` gives x2 just as written.\r\n\r\n`<msub><mi>r</mi><mi>2</mi></msub>` gives x2 with the 2 as a subscript.\r\n\r\nSo, while Safari could render it better, it still seems like the current output is not correct (as it is clear that it tries to render it with subscripts, `<msub>`).",
  "created_at": "2019-02-13T15:02:37Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_presentation_symbol\"]",
  "PASS_TO_PASS": "[\"test_mathml_printer\", \"test_content_printmethod\", \"test_content_mathml_core\", \"test_content_mathml_functions\", \"test_content_mathml_limits\", \"test_content_mathml_integrals\", \"test_content_mathml_matrices\", \"test_content_mathml_sums\", \"test_content_mathml_tuples\", \"test_content_mathml_add\", \"test_content_mathml_Rational\", \"test_content_mathml_constants\", \"test_content_mathml_trig\", \"test_content_mathml_relational\", \"test_content_symbol\", \"test_content_mathml_greek\", \"test_content_mathml_order\", \"test_content_settings\", \"test_presentation_printmethod\", \"test_presentation_mathml_core\", \"test_presentation_mathml_functions\", \"test_presentation_mathml_limits\", \"test_presentation_mathml_integrals\", \"test_presentation_mathml_matrices\", \"test_presentation_mathml_sums\", \"test_presentation_mathml_add\", \"test_presentation_mathml_Rational\", \"test_presentation_mathml_constants\", \"test_presentation_mathml_trig\", \"test_presentation_mathml_relational\", \"test_presentation_mathml_greek\", \"test_presentation_mathml_order\", \"test_presentation_settings\", \"test_toprettyxml_hooking\", \"test_print_basic\", \"test_root_notation_print\", \"test_print_matrix_symbol\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.104939",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}