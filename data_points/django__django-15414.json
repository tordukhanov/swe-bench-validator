{
  "repo": "django/django",
  "instance_id": "django__django-15414",
  "base_commit": "d70b4bea18c96e518ce14dca96085e9265e8ebb6",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -725,6 +725,7 @@ def bulk_update(self, objs, fields, batch_size=None):\n             )\n         # PK is used twice in the resulting update query, once in the filter\n         # and once in the WHEN. Each field will also have one CAST.\n+        self._for_write = True\n         connection = connections[self.db]\n         max_batch_size = connection.ops.bulk_batch_size([\"pk\", \"pk\"] + fields, objs)\n         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n@@ -746,9 +747,10 @@ def bulk_update(self, objs, fields, batch_size=None):\n                 update_kwargs[field.attname] = case_statement\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n         rows_updated = 0\n+        queryset = self.using(self.db)\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\n-                rows_updated += self.filter(pk__in=pks).update(**update_kwargs)\n+                rows_updated += queryset.filter(pk__in=pks).update(**update_kwargs)\n         return rows_updated\n \n     bulk_update.alters_data = True\n",
  "test_patch": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -3,13 +3,15 @@\n from django.core.exceptions import FieldDoesNotExist\n from django.db.models import F\n from django.db.models.functions import Lower\n-from django.test import TestCase, skipUnlessDBFeature\n+from django.db.utils import IntegrityError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n \n from .models import (\n     Article,\n     CustomDbColumn,\n     CustomPk,\n     Detail,\n+    Food,\n     Individual,\n     JSONFieldNullable,\n     Member,\n@@ -25,6 +27,11 @@\n )\n \n \n+class WriteToOtherRouter:\n+    def db_for_write(self, model, **hints):\n+        return \"other\"\n+\n+\n class BulkUpdateNoteTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n@@ -107,6 +114,8 @@ def test_functions(self):\n \n \n class BulkUpdateTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n     def test_no_fields(self):\n         msg = \"Field names must be given to bulk_update().\"\n         with self.assertRaisesMessage(ValueError, msg):\n@@ -302,3 +311,20 @@ def test_unspecified_unsaved_parent(self):\n         parent.refresh_from_db()\n         self.assertEqual(parent.f, 42)\n         self.assertIsNone(parent.single)\n+\n+    @override_settings(DATABASE_ROUTERS=[WriteToOtherRouter()])\n+    def test_database_routing(self):\n+        note = Note.objects.create(note=\"create\")\n+        note.note = \"bulk_update\"\n+        with self.assertNumQueries(1, using=\"other\"):\n+            Note.objects.bulk_update([note], fields=[\"note\"])\n+\n+    @override_settings(DATABASE_ROUTERS=[WriteToOtherRouter()])\n+    def test_database_routing_batch_atomicity(self):\n+        f1 = Food.objects.create(name=\"Banana\")\n+        f2 = Food.objects.create(name=\"Apple\")\n+        f1.name = \"Kiwi\"\n+        f2.name = \"Kiwi\"\n+        with self.assertRaises(IntegrityError):\n+            Food.objects.bulk_update([f1, f2], fields=[\"name\"], batch_size=1)\n+        self.assertIs(Food.objects.filter(name=\"Kiwi\").exists(), False)\n",
  "problem_statement": "QuerySet.bulk_update() should perform atomic writes against routed db_for_write.\nDescription\n\t\nDiscovered in https://code.djangoproject.com/ticket/33501#comment:3 but the summary is that bulk_update doesn't set self._for_write = True prior to accessing self.db so the latter is actually db_for_read and that includes the transaction.atomic block creation.\n",
  "hints_text": "Good catch!",
  "created_at": "2022-02-09T06:44:32Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_database_routing_batch_atomicity (queries.test_bulk_update.BulkUpdateTests)\"]",
  "PASS_TO_PASS": "[\"test_batch_size (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_foreign_keys_do_not_lookup (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_functions (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_multiple_fields (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_set_field_to_null (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_set_mixed_fields_to_null (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_simple (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_unsaved_models (queries.test_bulk_update.BulkUpdateNoteTests)\", \"test_booleanfield (queries.test_bulk_update.BulkUpdateTests)\", \"test_custom_db_columns (queries.test_bulk_update.BulkUpdateTests)\", \"test_custom_pk (queries.test_bulk_update.BulkUpdateTests)\", \"test_database_routing (queries.test_bulk_update.BulkUpdateTests)\", \"test_datetime_field (queries.test_bulk_update.BulkUpdateTests)\", \"test_empty_objects (queries.test_bulk_update.BulkUpdateTests)\", \"test_f_expression (queries.test_bulk_update.BulkUpdateTests)\", \"test_falsey_pk_value (queries.test_bulk_update.BulkUpdateTests)\", \"test_field_references (queries.test_bulk_update.BulkUpdateTests)\", \"test_inherited_fields (queries.test_bulk_update.BulkUpdateTests)\", \"test_invalid_batch_size (queries.test_bulk_update.BulkUpdateTests)\", \"test_ipaddressfield (queries.test_bulk_update.BulkUpdateTests)\", \"test_json_field (queries.test_bulk_update.BulkUpdateTests)\", \"test_large_batch (queries.test_bulk_update.BulkUpdateTests)\", \"test_no_fields (queries.test_bulk_update.BulkUpdateTests)\", \"test_nonexistent_field (queries.test_bulk_update.BulkUpdateTests)\", \"test_nullable_fk_after_related_save (queries.test_bulk_update.BulkUpdateTests)\", \"test_only_concrete_fields_allowed (queries.test_bulk_update.BulkUpdateTests)\", \"test_unsaved_parent (queries.test_bulk_update.BulkUpdateTests)\", \"test_unspecified_unsaved_parent (queries.test_bulk_update.BulkUpdateTests)\", \"test_update_custom_primary_key (queries.test_bulk_update.BulkUpdateTests)\", \"test_update_primary_key (queries.test_bulk_update.BulkUpdateTests)\", \"test_updated_rows_when_passing_duplicates (queries.test_bulk_update.BulkUpdateTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.728665",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}