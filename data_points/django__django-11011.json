{
  "repo": "django/django",
  "instance_id": "django__django-11011",
  "base_commit": "398afba084679f1055926f6f91bd33fe124a92c5",
  "patch": "diff --git a/django/http/response.py b/django/http/response.py\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -436,15 +436,17 @@ def set_headers(self, filelike):\n             else:\n                 self['Content-Type'] = 'application/octet-stream'\n \n-        if self.as_attachment:\n-            filename = self.filename or os.path.basename(filename)\n-            if filename:\n-                try:\n-                    filename.encode('ascii')\n-                    file_expr = 'filename=\"{}\"'.format(filename)\n-                except UnicodeEncodeError:\n-                    file_expr = \"filename*=utf-8''{}\".format(quote(filename))\n-                self['Content-Disposition'] = 'attachment; {}'.format(file_expr)\n+        filename = self.filename or os.path.basename(filename)\n+        if filename:\n+            disposition = 'attachment' if self.as_attachment else 'inline'\n+            try:\n+                filename.encode('ascii')\n+                file_expr = 'filename=\"{}\"'.format(filename)\n+            except UnicodeEncodeError:\n+                file_expr = \"filename*=utf-8''{}\".format(quote(filename))\n+            self['Content-Disposition'] = '{}; {}'.format(disposition, file_expr)\n+        elif self.as_attachment:\n+            self['Content-Disposition'] = 'attachment'\n \n \n class HttpResponseRedirectBase(HttpResponse):\n",
  "test_patch": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -14,12 +14,21 @@ def test_file_from_disk_response(self):\n         response = FileResponse(open(__file__, 'rb'))\n         self.assertEqual(response['Content-Length'], str(os.path.getsize(__file__)))\n         self.assertIn(response['Content-Type'], ['text/x-python', 'text/plain'])\n+        self.assertEqual(response['Content-Disposition'], 'inline; filename=\"test_fileresponse.py\"')\n         response.close()\n \n     def test_file_from_buffer_response(self):\n         response = FileResponse(io.BytesIO(b'binary content'))\n         self.assertEqual(response['Content-Length'], '14')\n         self.assertEqual(response['Content-Type'], 'application/octet-stream')\n+        self.assertFalse(response.has_header('Content-Disposition'))\n+        self.assertEqual(list(response), [b'binary content'])\n+\n+    def test_file_from_buffer_unnamed_attachment(self):\n+        response = FileResponse(io.BytesIO(b'binary content'), as_attachment=True)\n+        self.assertEqual(response['Content-Length'], '14')\n+        self.assertEqual(response['Content-Type'], 'application/octet-stream')\n+        self.assertEqual(response['Content-Disposition'], 'attachment')\n         self.assertEqual(list(response), [b'binary content'])\n \n     @skipIf(sys.platform == 'win32', \"Named pipes are Unix-only.\")\n",
  "problem_statement": "Make FileResponse always set Content-Disposition header.\nDescription\n\t \n\t\t(last modified by Piotr Kunicki)\n\t \nFileResponse currently sets the Content-Disposition header only if as_attachment is true.\nSetting it explicitly to, e.g. 'inline; filename=\"example.png\"' in the other case would allow the browser to set a default name for that inline file in case a user attempts to download it with the 'Save image as...' option.\nThat filename value is also visible in the title of the tab when image is being viewed directly in Firefox (at least v56).\nCreated a pull request: â€‹https://github.com/django/django/pull/11011\n",
  "hints_text": "The feature request makes sense but it's still missing tests.\nSorry for beginner questions, but: as in, you want me to add some unit tests? No problem, but wouldn't a single test be enough? All this change does, after all, is setting Content-Disposition when as_attachment=False, so checking if it works shouldn't require more. I also noticed there's no unit test checking if setting a custom filename works, so i added it to the same one test. What else to add?",
  "created_at": "2019-02-21T03:25:10Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_file_from_buffer_unnamed_attachment (responses.test_fileresponse.FileResponseTests)\", \"test_file_from_disk_response (responses.test_fileresponse.FileResponseTests)\"]",
  "PASS_TO_PASS": "[\"test_compressed_response (responses.test_fileresponse.FileResponseTests)\", \"test_file_from_buffer_response (responses.test_fileresponse.FileResponseTests)\", \"test_file_from_disk_as_attachment (responses.test_fileresponse.FileResponseTests)\", \"test_file_from_named_pipe_response (responses.test_fileresponse.FileResponseTests)\", \"test_unicode_attachment (responses.test_fileresponse.FileResponseTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.555976",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}