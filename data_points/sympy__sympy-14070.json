{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14070",
  "base_commit": "888f16155784747383083a8cd48a7f0089780899",
  "patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -982,7 +982,7 @@ def goodlog(l):\n         for k in list(log1.keys()):\n             log1[Mul(*k)] = log(logcombine(Mul(*[\n                 l.args[0]**Mul(*c) for c, l in log1.pop(k)]),\n-                force=force))\n+                force=force), evaluate=False)\n \n         # logs that have oppositely signed coefficients can divide\n         for k in ordered(list(log1.keys())):\n@@ -994,7 +994,9 @@ def goodlog(l):\n                 num, den = k, -k\n                 if num.count_ops() > den.count_ops():\n                     num, den = den, num\n-                other.append(num*log(log1.pop(num).args[0]/log1.pop(den).args[0]))\n+                other.append(\n+                    num*log(log1.pop(num).args[0]/log1.pop(den).args[0],\n+                            evaluate=False))\n             else:\n                 other.append(k*log1.pop(k))\n \n",
  "test_patch": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -470,6 +470,14 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+def test_issue_5950():\n+    x, y = symbols(\"x,y\", positive=True)\n+    assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n+    assert logcombine(log(x) - log(y)) == log(x/y)\n+    assert logcombine(log(Rational(3,2), evaluate=False) - log(2)) == \\\n+        log(Rational(3,4), evaluate=False)\n+\n+\n def test_posify():\n     from sympy.abc import x\n \n",
  "problem_statement": "logcombine(log(3) - log(2)) does nothing\n```\nlogcombine(log(3) - log(2)) should return log(3/2) but it doesn't. This used to work in 0.6.7.\n```\n\nOriginal issue for #5950: http://code.google.com/p/sympy/issues/detail?id=2851\nOriginal author: https://code.google.com/u/101272611947379421629/\n\n",
  "hints_text": "```\nBisected to:\n\ncommit 9dc1d111d489624eef3b0c9481c3e6d99cd869e0\nAuthor: Chris Smith <smichr@gmail.com>\nDate:   Fri May 20 00:11:41 2011 +0545\n\n    2397: log expansion changes\n\n        Expansion of a log was being done in an as_numer_denom method;\n        it should be done in _eval_expand_log where rules are followed\n        concerning when the expansion shold be allowed. When this is\n        handled there, the as_numer_denom method is no longer needed\n        for log. But then tests fail because Rationals don't automatically\n        expand, e.g. log(1/2) doesn't become -log(2). They also fail when\n        simplifications that relied on that forced expansion of log(x/y)\n        into log(x) - log(y) no longer can do the expansion so the\n        force keyword was introduced to the log_expand method.\n\n        A few failing solver tests needed tweaking.\n\n        The expand docstring was PEP8'ed and edited a little.\n\n**Cc:** smi...@gmail.com  \n\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c1\nOriginal author: https://code.google.com/u/101272611947379421629/\n\n```\nIt's because we have:\n\nIn [46]: log(S(3)/2)\nOut[46]: -log(2) + log(3)\n\nso obviously it's impossible for logcombine to combine them.  Perhaps this should be removed?  We also automatically pull out perfect powers:\n\nIn [47]: log(16)\nOut[47]: 4⋅log(2)\n\nIn [49]: log(S(16)/9)\nOut[49]: -2⋅log(3) + 4⋅log(2)\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c2\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\n```\nBy the way, I remember being not sure about this change.  Perhaps Chris will remember where the discussion was.  I think the motivation was to make it easier for certain expressions to automatically cancel.  But I now think that we should not automatically expand logs.  Rather, make expand_log call factorint() and expand it completely.\n\n**Status:** NeedsDecision  \n\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c3\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\n```\nRight, I had forgotten about that, but if you step through the code, you can see that it doesn't even try to return log(3/2), and there is the same problem with    logcombine(log(x) - log(2)): it should return log(x/2) (which isn't autoconverted back to log(x) - log(2)) but it doesn't.\n\nSo there are really 2 separate issues here.\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c4\nOriginal author: https://code.google.com/u/101272611947379421629/\n\n```\nsee also duplicate(?) issue 5808\n```\n\nReferenced issues: #5808\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c5\nOriginal author: https://code.google.com/u/117933771799683895267/\n\n```\nare you referring to the discussion on issue 5496 ?\n```\n\nReferenced issues: #5496\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c6\nOriginal author: https://code.google.com/u/117933771799683895267/\n\n```\nTo me it seems like `log(x/2)` should autoexpand like `sqrt(4*x)`\n\n2*sqrt(x)\n\nlog(x/2)\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c7\nOriginal author: https://code.google.com/u/117933771799683895267/\n\n```\nI don't mind if the autoevaluation goes away, but the logic for it should not be duplicated (which makes tracking down logic errors difficult). Could eval be given a keyword so that expansion can be done optionally (e.g. not at instantiation but log expand could call the routine to have it autoexpand). It would be nice to allow sqrt to not autocombine, too, so sqrt(2) + x*sqrt(10) could be expanded and factored to sqrt(2)*(1 + x*sqrt(5)).\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c8\nOriginal author: https://code.google.com/u/117933771799683895267/\n\n```\n> are you referring to the discussion on issue 5496 ?\n\nNo, that wasn't it.  There was some lengthy discussion that we had about what logs should do with numeric arguments.\n\n>  It would be nice to allow sqrt to not autocombine, too, so sqrt(2) + x*sqrt(10) could be expanded and factored to sqrt(2)*(1 + x*sqrt(5)).\n\nBut that can already work:\n\nIn [117]: sqrt(2)*(1 + x*sqrt(5))\nOut[117]: \n  ___ ⎛  ___      ⎞\n╲╱ 2 ⋅⎝╲╱ 5 ⋅x + 1⎠\n```\n\nReferenced issues: #5496\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c9\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\n```\nYes, it will stay...but how do you factor it into that form. Maybe\nthere is a factor option...?\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c10\nOriginal author: https://code.google.com/u/117933771799683895267/\n\n```\nWhatever function (I'm not sure which would do it right now), would manually do it I guess.\n\nI guess we could modify factor() to do it as part of the preprocessing (right now, it treats algebraic numbers as generators, if I remember correctly).\n```\n\nOriginal comment: http://code.google.com/p/sympy/issues/detail?id=2851#c11\nOriginal author: https://code.google.com/u/asmeurer@gmail.com/\n\n@asmeurer @smichr do you think the issue is valid?\n\nIt still doesn't work:\n\n```\nIn [26]: logcombine(log(3) - log(2))\nOut[26]: -log(2) + log(3)\n```\n\nI want to work on this issue",
  "created_at": "2018-02-03T12:14:13Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_issue_5950\"]",
  "PASS_TO_PASS": "[\"test_issue_3557\", \"test_simplify_complex\", \"test_simplify_ratio\", \"test_simplify_measure\", \"test_simplify_rational\", \"test_simplify_issue_1308\", \"test_issue_5652\", \"test_simplify_fail1\", \"test_nthroot\", \"test_separatevars\", \"test_separatevars_advanced_factor\", \"test_hypersimp\", \"test_nsimplify\", \"test_issue_9448\", \"test_extract_minus_sign\", \"test_diff\", \"test_logcombine_1\", \"test_logcombine_complex_coeff\", \"test_posify\", \"test_issue_4194\", \"test_as_content_primitive\", \"test_signsimp\", \"test_Piecewise\", \"test_polymorphism\", \"test_issue_from_PR1599\", \"test_issue_6811\", \"test_issue_6920\", \"test_issue_7001\", \"test_inequality_no_auto_simplify\", \"test_issue_9398\", \"test_issue_9324_simplify\", \"test_issue_13474\", \"test_simplify_function_inverse\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.091440",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}