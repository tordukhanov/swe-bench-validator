{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-6368",
  "base_commit": "197c99634551401d7e39be04fdae53350c9cf198",
  "patch": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -622,16 +622,68 @@ def __repr__(self):\n \n \n def _iter_rewritable_modules(package_files):\n+    \"\"\"\n+    Given an iterable of file names in a source distribution, return the \"names\" that should\n+    be marked for assertion rewrite (for example the package \"pytest_mock/__init__.py\" should\n+    be added as \"pytest_mock\" in the assertion rewrite mechanism.\n+\n+    This function has to deal with dist-info based distributions and egg based distributions\n+    (which are still very much in use for \"editable\" installs).\n+\n+    Here are the file names as seen in a dist-info based distribution:\n+\n+        pytest_mock/__init__.py\n+        pytest_mock/_version.py\n+        pytest_mock/plugin.py\n+        pytest_mock.egg-info/PKG-INFO\n+\n+    Here are the file names as seen in an egg based distribution:\n+\n+        src/pytest_mock/__init__.py\n+        src/pytest_mock/_version.py\n+        src/pytest_mock/plugin.py\n+        src/pytest_mock.egg-info/PKG-INFO\n+        LICENSE\n+        setup.py\n+\n+    We have to take in account those two distribution flavors in order to determine which\n+    names should be considered for assertion rewriting.\n+\n+    More information:\n+        https://github.com/pytest-dev/pytest-mock/issues/167\n+    \"\"\"\n+    package_files = list(package_files)\n+    seen_some = False\n     for fn in package_files:\n         is_simple_module = \"/\" not in fn and fn.endswith(\".py\")\n         is_package = fn.count(\"/\") == 1 and fn.endswith(\"__init__.py\")\n         if is_simple_module:\n             module_name, _ = os.path.splitext(fn)\n-            yield module_name\n+            # we ignore \"setup.py\" at the root of the distribution\n+            if module_name != \"setup\":\n+                seen_some = True\n+                yield module_name\n         elif is_package:\n             package_name = os.path.dirname(fn)\n+            seen_some = True\n             yield package_name\n \n+    if not seen_some:\n+        # at this point we did not find any packages or modules suitable for assertion\n+        # rewriting, so we try again by stripping the first path component (to account for\n+        # \"src\" based source trees for example)\n+        # this approach lets us have the common case continue to be fast, as egg-distributions\n+        # are rarer\n+        new_package_files = []\n+        for fn in package_files:\n+            parts = fn.split(\"/\")\n+            new_fn = \"/\".join(parts[1:])\n+            if new_fn:\n+                new_package_files.append(new_fn)\n+        if new_package_files:\n+            for _module in _iter_rewritable_modules(new_package_files):\n+                yield _module\n+\n \n class Config(object):\n     \"\"\" access to configuration values, pluginmanager and plugin hooks.  \"\"\"\n",
  "test_patch": "diff --git a/testing/test_config.py b/testing/test_config.py\n--- a/testing/test_config.py\n+++ b/testing/test_config.py\n@@ -431,15 +431,21 @@ def test_confcutdir_check_isdir(self, testdir):\n     @pytest.mark.parametrize(\n         \"names, expected\",\n         [\n+            # dist-info based distributions root are files as will be put in PYTHONPATH\n             ([\"bar.py\"], [\"bar\"]),\n-            ([\"foo\", \"bar.py\"], []),\n-            ([\"foo\", \"bar.pyc\"], []),\n-            ([\"foo\", \"__init__.py\"], [\"foo\"]),\n-            ([\"foo\", \"bar\", \"__init__.py\"], []),\n+            ([\"foo/bar.py\"], [\"bar\"]),\n+            ([\"foo/bar.pyc\"], []),\n+            ([\"foo/__init__.py\"], [\"foo\"]),\n+            ([\"bar/__init__.py\", \"xz.py\"], [\"bar\", \"xz\"]),\n+            ([\"setup.py\"], []),\n+            # egg based distributions root contain the files from the dist root\n+            ([\"src/bar/__init__.py\"], [\"bar\"]),\n+            ([\"src/bar/__init__.py\", \"setup.py\"], [\"bar\"]),\n+            ([\"source/python/bar/__init__.py\", \"setup.py\"], [\"bar\"]),\n         ],\n     )\n     def test_iter_rewritable_modules(self, names, expected):\n-        assert list(_iter_rewritable_modules([\"/\".join(names)])) == expected\n+        assert list(_iter_rewritable_modules(names)) == expected\n \n \n class TestConfigFromdictargs(object):\n",
  "problem_statement": "Module re-write doesn't work with non dist-info based installations\nMore context behind this issue is available at: https://github.com/pytest-dev/pytest-mock/issues/167\r\n\r\nTL;DR:\r\n\r\nThe function `_iter_rewritable_modules` doesn't detect modules that can be rewritten, if they are installed by a method which doesn't adopt the dist-info format.\r\n\r\nAn easy way to reproduce the problem is to: `pip install pytest-mock` in one environment and `pip install -e 'git+https://github.com/pytest-dev/pytest-mock#egg=pytest-mock'` in another and compare the output for:\r\n```python\r\nimport importlib_metadata\r\nfrom _pytest.config import _iter_rewritable_modules\r\n\r\nfor x in importlib_metadata.distributions():\r\n  if x.metadata['Name']=='pytest-mock':\r\n    for _file in x.files:\r\n      print(\"file: {}; module_or_pkg_name: {}\".format(str(_file), list(_iter_rewritable_modules([str(_file)]))))\r\n```\r\n\r\nBecause of this problem, rpm maintainers are unable to run the tests for pytest-mock, since they rely on `python setup.py install` which creates egg-info directories.\n",
  "hints_text": "Copying the output from https://github.com/pytest-dev/pytest-mock/issues/167#issuecomment-548662953:\r\n\r\nOutput from dist-info:\r\n\r\n```\r\nfile: pytest_mock-1.11.3.dev2+g1c5e8e9.d20191031.dist-info/INSTALLER; module_or_pkg_name: []\r\nfile: pytest_mock-1.11.3.dev2+g1c5e8e9.d20191031.dist-info/LICENSE; module_or_pkg_name: []\r\nfile: pytest_mock-1.11.3.dev2+g1c5e8e9.d20191031.dist-info/METADATA; module_or_pkg_name: []\r\nfile: pytest_mock-1.11.3.dev2+g1c5e8e9.d20191031.dist-info/RECORD; module_or_pkg_name: []\r\nfile: pytest_mock-1.11.3.dev2+g1c5e8e9.d20191031.dist-info/WHEEL; module_or_pkg_name: []\r\nfile: pytest_mock-1.11.3.dev2+g1c5e8e9.d20191031.dist-info/entry_points.txt; module_or_pkg_name: []\r\nfile: pytest_mock-1.11.3.dev2+g1c5e8e9.d20191031.dist-info/top_level.txt; module_or_pkg_name: []\r\nfile: pytest_mock/__init__.py; module_or_pkg_name: ['pytest_mock'] <---------- Good!\r\nfile: pytest_mock/__pycache__/__init__.cpython-36.pyc; module_or_pkg_name: []\r\nfile: pytest_mock/__pycache__/_version.cpython-36.pyc; module_or_pkg_name: []\r\nfile: pytest_mock/__pycache__/plugin.cpython-36.pyc; module_or_pkg_name: []\r\nfile: pytest_mock/_version.py; module_or_pkg_name: []\r\nfile: pytest_mock/plugin.py; module_or_pkg_name: []\r\n```\r\n\r\nFrom egg:\r\n\r\n```\r\nfile: .gitignore; module_or_pkg_name: []\r\nfile: .pre-commit-config.yaml; module_or_pkg_name: []\r\nfile: CHANGELOG.rst; module_or_pkg_name: []\r\nfile: HOWTORELEASE.rst; module_or_pkg_name: []\r\nfile: LICENSE; module_or_pkg_name: []\r\nfile: README.rst; module_or_pkg_name: []\r\nfile: setup.cfg; module_or_pkg_name: []\r\nfile: setup.py; module_or_pkg_name: ['setup'] <-------- ?????????????\r\nfile: tox.ini; module_or_pkg_name: []\r\nfile: .github/FUNDING.yml; module_or_pkg_name: []\r\nfile: .github/workflows/main.yml; module_or_pkg_name: []\r\nfile: src/pytest_mock/__init__.py; module_or_pkg_name: [] <-------- Hey, why u ditch me?\r\nfile: src/pytest_mock/_version.py; module_or_pkg_name: []\r\nfile: src/pytest_mock/plugin.py; module_or_pkg_name: []\r\nfile: src/pytest_mock.egg-info/PKG-INFO; module_or_pkg_name: []\r\nfile: src/pytest_mock.egg-info/SOURCES.txt; module_or_pkg_name: []\r\nfile: src/pytest_mock.egg-info/dependency_links.txt; module_or_pkg_name: []\r\nfile: src/pytest_mock.egg-info/entry_points.txt; module_or_pkg_name: []\r\nfile: src/pytest_mock.egg-info/requires.txt; module_or_pkg_name: []\r\nfile: src/pytest_mock.egg-info/top_level.txt; module_or_pkg_name: []\r\nfile: tests/test_pytest_mock.py; module_or_pkg_name: []\r\n```",
  "created_at": "2019-12-25T11:47:59Z",
  "version": "4.6",
  "FAIL_TO_PASS": "[\"testing/test_config.py::TestConfigAPI::test_iter_rewritable_modules[names1-expected1]\", \"testing/test_config.py::TestConfigAPI::test_iter_rewritable_modules[names5-expected5]\", \"testing/test_config.py::TestConfigAPI::test_iter_rewritable_modules[names6-expected6]\", \"testing/test_config.py::TestConfigAPI::test_iter_rewritable_modules[names7-expected7]\", \"testing/test_config.py::TestConfigAPI::test_iter_rewritable_modules[names8-expected8]\"]",
  "PASS_TO_PASS": "[\"testing/test_config.py::TestParseIni::test_getcfg_empty_path\", \"testing/test_config.py::TestConfigAPI::test_iter_rewritable_modules[names0-expected0]\", \"testing/test_config.py::TestConfigAPI::test_iter_rewritable_modules[names2-expected2]\", \"testing/test_config.py::TestConfigAPI::test_iter_rewritable_modules[names3-expected3]\", \"testing/test_config.py::TestConfigAPI::test_iter_rewritable_modules[names4-expected4]\", \"testing/test_config.py::TestConfigFromdictargs::test_basic_behavior\", \"testing/test_config.py::TestConfigFromdictargs::test_origargs\", \"testing/test_config.py::TestConfigFromdictargs::test_inifilename\", \"testing/test_config.py::test_get_plugin_specs_as_list\", \"testing/test_config.py::test_collect_pytest_prefix_bug\", \"testing/test_config.py::TestRootdir::test_simple_noini\", \"testing/test_config.py::TestRootdir::test_with_ini[setup.cfg]\", \"testing/test_config.py::TestRootdir::test_with_ini[tox.ini]\", \"testing/test_config.py::TestRootdir::test_with_ini[pytest.ini]\", \"testing/test_config.py::TestRootdir::test_pytestini_overrides_empty_other[setup.cfg]\", \"testing/test_config.py::TestRootdir::test_pytestini_overrides_empty_other[tox.ini]\", \"testing/test_config.py::TestRootdir::test_setuppy_fallback\", \"testing/test_config.py::TestRootdir::test_nothing\", \"testing/test_config.py::TestRootdir::test_with_specific_inifile\", \"testing/test_config.py::TestOverrideIniArgs::test_with_arg_outside_cwd_without_inifile\", \"testing/test_config.py::TestOverrideIniArgs::test_with_arg_outside_cwd_with_inifile\", \"testing/test_config.py::TestOverrideIniArgs::test_with_non_dir_arg[dirs0]\", \"testing/test_config.py::TestOverrideIniArgs::test_with_non_dir_arg[dirs1]\", \"testing/test_config.py::TestOverrideIniArgs::test_with_non_dir_arg[dirs2]\", \"testing/test_config.py::TestOverrideIniArgs::test_with_existing_file_in_subdir\", \"testing/test_config.py::TestOverrideIniArgs::test_addopts_before_initini\", \"testing/test_config.py::TestOverrideIniArgs::test_addopts_from_env_not_concatenated\", \"testing/test_config.py::TestOverrideIniArgs::test_override_ini_does_not_contain_paths\", \"testing/test_config.py::TestParseIni::test_getcfg_and_config[pytest-pytest.ini]\", \"testing/test_config.py::TestParseIni::test_getcfg_and_config[tool:pytest-setup.cfg]\", \"testing/test_config.py::TestParseIni::test_setupcfg_uses_toolpytest_with_pytest\", \"testing/test_config.py::TestParseIni::test_append_parse_args\", \"testing/test_config.py::TestParseIni::test_tox_ini_wrong_version\", \"testing/test_config.py::TestParseIni::test_ini_names[tool:pytest-setup.cfg]\", \"testing/test_config.py::TestParseIni::test_ini_names[pytest-tox.ini]\", \"testing/test_config.py::TestParseIni::test_ini_names[pytest-pytest.ini]\", \"testing/test_config.py::TestParseIni::test_toxini_before_lower_pytestini\", \"testing/test_config.py::TestParseIni::test_ini_parse_error\", \"testing/test_config.py::TestConfigCmdlineParsing::test_parsing_again_fails\", \"testing/test_config.py::TestConfigCmdlineParsing::test_explicitly_specified_config_file_is_loaded\", \"testing/test_config.py::TestConfigCmdlineParsing::test_absolute_win32_path\", \"testing/test_config.py::TestConfigAPI::test_config_trace\", \"testing/test_config.py::TestConfigAPI::test_config_getoption\", \"testing/test_config.py::TestConfigAPI::test_config_getoption_unicode\", \"testing/test_config.py::TestConfigAPI::test_config_getvalueorskip\", \"testing/test_config.py::TestConfigAPI::test_config_getvalueorskip_None\", \"testing/test_config.py::TestConfigAPI::test_getoption\", \"testing/test_config.py::TestConfigAPI::test_getconftest_pathlist\", \"testing/test_config.py::TestConfigAPI::test_addini\", \"testing/test_config.py::TestConfigAPI::test_addini_pathlist\", \"testing/test_config.py::TestConfigAPI::test_addini_args\", \"testing/test_config.py::TestConfigAPI::test_addini_linelist\", \"testing/test_config.py::TestConfigAPI::test_addini_bool[True-True]\", \"testing/test_config.py::TestConfigAPI::test_addini_bool[no-False]\", \"testing/test_config.py::TestConfigAPI::test_addini_bool[no-ini-True]\", \"testing/test_config.py::TestConfigAPI::test_addinivalue_line_existing\", \"testing/test_config.py::TestConfigAPI::test_addinivalue_line_new\", \"testing/test_config.py::TestConfigAPI::test_confcutdir_check_isdir\", \"testing/test_config.py::test_options_on_small_file_do_not_blow_up\", \"testing/test_config.py::test_preparse_ordering_with_setuptools\", \"testing/test_config.py::test_setuptools_importerror_issue1479\", \"testing/test_config.py::test_importlib_metadata_broken_distribution\", \"testing/test_config.py::test_plugin_preparse_prevents_setuptools_loading[True]\", \"testing/test_config.py::test_plugin_preparse_prevents_setuptools_loading[False]\", \"testing/test_config.py::test_disable_plugin_autoload[parse_args0-True]\", \"testing/test_config.py::test_disable_plugin_autoload[parse_args1-False]\", \"testing/test_config.py::test_cmdline_processargs_simple\", \"testing/test_config.py::test_invalid_options_show_extra_information\", \"testing/test_config.py::test_consider_args_after_options_for_rootdir[args0]\", \"testing/test_config.py::test_consider_args_after_options_for_rootdir[args1]\", \"testing/test_config.py::test_consider_args_after_options_for_rootdir[args2]\", \"testing/test_config.py::test_consider_args_after_options_for_rootdir[args3]\", \"testing/test_config.py::test_toolongargs_issue224\", \"testing/test_config.py::test_config_in_subdirectory_colon_command_line_issue2148\", \"testing/test_config.py::test_notify_exception\", \"testing/test_config.py::test_no_terminal_discovery_error\", \"testing/test_config.py::test_load_initial_conftest_last_ordering\", \"testing/test_config.py::test_collect_pytest_prefix_bug_integration\", \"testing/test_config.py::TestOverrideIniArgs::test_override_ini_names[setup.cfg]\", \"testing/test_config.py::TestOverrideIniArgs::test_override_ini_names[tox.ini]\", \"testing/test_config.py::TestOverrideIniArgs::test_override_ini_names[pytest.ini]\", \"testing/test_config.py::TestOverrideIniArgs::test_override_ini_pathlist\", \"testing/test_config.py::TestOverrideIniArgs::test_override_multiple_and_default\", \"testing/test_config.py::TestOverrideIniArgs::test_override_ini_usage_error_bad_style\", \"testing/test_config.py::TestOverrideIniArgs::test_override_ini_handled_asap[True]\", \"testing/test_config.py::TestOverrideIniArgs::test_override_ini_handled_asap[False]\", \"testing/test_config.py::TestOverrideIniArgs::test_addopts_from_ini_not_concatenated\", \"testing/test_config.py::TestOverrideIniArgs::test_multiple_override_ini_options\", \"testing/test_config.py::test_help_via_addopts\", \"testing/test_config.py::test_help_and_version_after_argument_error\", \"testing/test_config.py::test_config_does_not_load_blocked_plugin_from_args\", \"testing/test_config.py::test_config_blocked_default_plugins[python]\", \"testing/test_config.py::test_config_blocked_default_plugins[terminal]\", \"testing/test_config.py::test_config_blocked_default_plugins[debugging]\", \"testing/test_config.py::test_config_blocked_default_plugins[unittest]\", \"testing/test_config.py::test_config_blocked_default_plugins[capture]\", \"testing/test_config.py::test_config_blocked_default_plugins[skipping]\", \"testing/test_config.py::test_config_blocked_default_plugins[tmpdir]\", \"testing/test_config.py::test_config_blocked_default_plugins[monkeypatch]\", \"testing/test_config.py::test_config_blocked_default_plugins[recwarn]\", \"testing/test_config.py::test_config_blocked_default_plugins[pastebin]\", \"testing/test_config.py::test_config_blocked_default_plugins[nose]\", \"testing/test_config.py::test_config_blocked_default_plugins[assertion]\", \"testing/test_config.py::test_config_blocked_default_plugins[junitxml]\", \"testing/test_config.py::test_config_blocked_default_plugins[resultlog]\", \"testing/test_config.py::test_config_blocked_default_plugins[doctest]\", \"testing/test_config.py::test_config_blocked_default_plugins[cacheprovider]\", \"testing/test_config.py::test_config_blocked_default_plugins[freeze_support]\", \"testing/test_config.py::test_config_blocked_default_plugins[setuponly]\", \"testing/test_config.py::test_config_blocked_default_plugins[setupplan]\", \"testing/test_config.py::test_config_blocked_default_plugins[stepwise]\", \"testing/test_config.py::test_config_blocked_default_plugins[warnings]\", \"testing/test_config.py::test_config_blocked_default_plugins[logging]\", \"testing/test_config.py::test_config_blocked_default_plugins[reports]\"]",
  "environment_setup_commit": "d5843f89d3c008ddcb431adbc335b080a79e617e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.932184",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}