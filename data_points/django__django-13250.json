{
  "repo": "django/django",
  "instance_id": "django__django-13250",
  "base_commit": "bac5777bff8e8d8189193438b5af52f158a3f2a4",
  "patch": "diff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -295,6 +295,9 @@ class BaseDatabaseFeatures:\n     has_native_json_field = False\n     # Does the backend use PostgreSQL-style JSON operators like '->'?\n     has_json_operators = False\n+    # Does the backend support __contains and __contained_by lookups for\n+    # a JSONField?\n+    supports_json_field_contains = True\n \n     def __init__(self, connection):\n         self.connection = connection\ndiff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -60,6 +60,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     allows_multiple_constraints_on_same_fields = False\n     supports_boolean_expr_in_select_clause = False\n     supports_primitives_in_json_field = False\n+    supports_json_field_contains = False\n \n     @cached_property\n     def introspected_field_types(self):\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -5,7 +5,6 @@\n import decimal\n import functools\n import hashlib\n-import json\n import math\n import operator\n import re\n@@ -235,7 +234,6 @@ def get_new_connection(self, conn_params):\n         create_deterministic_function('DEGREES', 1, none_guard(math.degrees))\n         create_deterministic_function('EXP', 1, none_guard(math.exp))\n         create_deterministic_function('FLOOR', 1, none_guard(math.floor))\n-        create_deterministic_function('JSON_CONTAINS', 2, _sqlite_json_contains)\n         create_deterministic_function('LN', 1, none_guard(math.log))\n         create_deterministic_function('LOG', 2, none_guard(lambda x, y: math.log(y, x)))\n         create_deterministic_function('LPAD', 3, _sqlite_lpad)\n@@ -601,11 +599,3 @@ def _sqlite_lpad(text, length, fill_text):\n @none_guard\n def _sqlite_rpad(text, length, fill_text):\n     return (text + fill_text * length)[:length]\n-\n-\n-@none_guard\n-def _sqlite_json_contains(haystack, needle):\n-    target, candidate = json.loads(haystack), json.loads(needle)\n-    if isinstance(target, dict) and isinstance(candidate, dict):\n-        return target.items() >= candidate.items()\n-    return target == candidate\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -43,6 +43,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     supports_aggregate_filter_clause = Database.sqlite_version_info >= (3, 30, 1)\n     supports_order_by_nulls_modifier = Database.sqlite_version_info >= (3, 30, 0)\n     order_by_nulls_first = True\n+    supports_json_field_contains = False\n \n     @cached_property\n     def supports_atomic_references_rename(self):\ndiff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -140,28 +140,30 @@ class DataContains(PostgresOperatorLookup):\n     postgres_operator = '@>'\n \n     def as_sql(self, compiler, connection):\n+        if not connection.features.supports_json_field_contains:\n+            raise NotSupportedError(\n+                'contains lookup is not supported on this database backend.'\n+            )\n         lhs, lhs_params = self.process_lhs(compiler, connection)\n         rhs, rhs_params = self.process_rhs(compiler, connection)\n         params = tuple(lhs_params) + tuple(rhs_params)\n         return 'JSON_CONTAINS(%s, %s)' % (lhs, rhs), params\n \n-    def as_oracle(self, compiler, connection):\n-        raise NotSupportedError('contains lookup is not supported on Oracle.')\n-\n \n class ContainedBy(PostgresOperatorLookup):\n     lookup_name = 'contained_by'\n     postgres_operator = '<@'\n \n     def as_sql(self, compiler, connection):\n+        if not connection.features.supports_json_field_contains:\n+            raise NotSupportedError(\n+                'contained_by lookup is not supported on this database backend.'\n+            )\n         lhs, lhs_params = self.process_lhs(compiler, connection)\n         rhs, rhs_params = self.process_rhs(compiler, connection)\n         params = tuple(rhs_params) + tuple(lhs_params)\n         return 'JSON_CONTAINS(%s, %s)' % (rhs, lhs), params\n \n-    def as_oracle(self, compiler, connection):\n-        raise NotSupportedError('contained_by lookup is not supported on Oracle.')\n-\n \n class HasKeyLookup(PostgresOperatorLookup):\n     logical_operator = None\n",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -1,6 +1,6 @@\n import operator\n import uuid\n-from unittest import mock, skipIf, skipUnless\n+from unittest import mock, skipIf\n \n from django import forms\n from django.core import serializers\n@@ -441,17 +441,20 @@ def test_has_any_keys(self):\n             [self.objs[3], self.objs[4], self.objs[6]],\n         )\n \n-    @skipIf(\n-        connection.vendor == 'oracle',\n-        \"Oracle doesn't support contains lookup.\",\n-    )\n+    @skipUnlessDBFeature('supports_json_field_contains')\n     def test_contains(self):\n         tests = [\n             ({}, self.objs[2:5] + self.objs[6:8]),\n             ({'baz': {'a': 'b', 'c': 'd'}}, [self.objs[7]]),\n+            ({'baz': {'a': 'b'}}, [self.objs[7]]),\n+            ({'baz': {'c': 'd'}}, [self.objs[7]]),\n             ({'k': True, 'l': False}, [self.objs[6]]),\n             ({'d': ['e', {'f': 'g'}]}, [self.objs[4]]),\n+            ({'d': ['e']}, [self.objs[4]]),\n+            ({'d': [{'f': 'g'}]}, [self.objs[4]]),\n             ([1, [2]], [self.objs[5]]),\n+            ([1], [self.objs[5]]),\n+            ([[2]], [self.objs[5]]),\n             ({'n': [None]}, [self.objs[4]]),\n             ({'j': None}, [self.objs[4]]),\n         ]\n@@ -460,38 +463,32 @@ def test_contains(self):\n                 qs = NullableJSONModel.objects.filter(value__contains=value)\n                 self.assertSequenceEqual(qs, expected)\n \n-    @skipUnless(\n-        connection.vendor == 'oracle',\n-        \"Oracle doesn't support contains lookup.\",\n-    )\n+    @skipIfDBFeature('supports_json_field_contains')\n     def test_contains_unsupported(self):\n-        msg = 'contains lookup is not supported on Oracle.'\n+        msg = 'contains lookup is not supported on this database backend.'\n         with self.assertRaisesMessage(NotSupportedError, msg):\n             NullableJSONModel.objects.filter(\n                 value__contains={'baz': {'a': 'b', 'c': 'd'}},\n             ).get()\n \n-    @skipUnlessDBFeature('supports_primitives_in_json_field')\n+    @skipUnlessDBFeature(\n+        'supports_primitives_in_json_field',\n+        'supports_json_field_contains',\n+    )\n     def test_contains_primitives(self):\n         for value in self.primitives:\n             with self.subTest(value=value):\n                 qs = NullableJSONModel.objects.filter(value__contains=value)\n                 self.assertIs(qs.exists(), True)\n \n-    @skipIf(\n-        connection.vendor == 'oracle',\n-        \"Oracle doesn't support contained_by lookup.\",\n-    )\n+    @skipUnlessDBFeature('supports_json_field_contains')\n     def test_contained_by(self):\n         qs = NullableJSONModel.objects.filter(value__contained_by={'a': 'b', 'c': 14, 'h': True})\n         self.assertSequenceEqual(qs, self.objs[2:4])\n \n-    @skipUnless(\n-        connection.vendor == 'oracle',\n-        \"Oracle doesn't support contained_by lookup.\",\n-    )\n+    @skipIfDBFeature('supports_json_field_contains')\n     def test_contained_by_unsupported(self):\n-        msg = 'contained_by lookup is not supported on Oracle.'\n+        msg = 'contained_by lookup is not supported on this database backend.'\n         with self.assertRaisesMessage(NotSupportedError, msg):\n             NullableJSONModel.objects.filter(value__contained_by={'a': 'b'}).get()\n \n@@ -679,19 +676,25 @@ def test_lookups_with_key_transform(self):\n             ('value__baz__has_any_keys', ['a', 'x']),\n             ('value__has_key', KeyTextTransform('foo', 'value')),\n         )\n-        # contained_by and contains lookups are not supported on Oracle.\n-        if connection.vendor != 'oracle':\n-            tests += (\n-                ('value__contains', KeyTransform('bax', 'value')),\n-                ('value__baz__contained_by', {'a': 'b', 'c': 'd', 'e': 'f'}),\n-                (\n-                    'value__contained_by',\n-                    KeyTransform('x', RawSQL(\n-                        self.raw_sql,\n-                        ['{\"x\": {\"a\": \"b\", \"c\": 1, \"d\": \"e\"}}'],\n-                    )),\n-                ),\n-            )\n+        for lookup, value in tests:\n+            with self.subTest(lookup=lookup):\n+                self.assertIs(NullableJSONModel.objects.filter(\n+                    **{lookup: value},\n+                ).exists(), True)\n+\n+    @skipUnlessDBFeature('supports_json_field_contains')\n+    def test_contains_contained_by_with_key_transform(self):\n+        tests = [\n+            ('value__contains', KeyTransform('bax', 'value')),\n+            ('value__baz__contained_by', {'a': 'b', 'c': 'd', 'e': 'f'}),\n+            (\n+                'value__contained_by',\n+                KeyTransform('x', RawSQL(\n+                    self.raw_sql,\n+                    ['{\"x\": {\"a\": \"b\", \"c\": 1, \"d\": \"e\"}}'],\n+                )),\n+            ),\n+        ]\n         for lookup, value in tests:\n             with self.subTest(lookup=lookup):\n                 self.assertIs(NullableJSONModel.objects.filter(\n",
  "problem_statement": "JSONField's __contains and __contained_by lookups don't work with nested values on SQLite.\nDescription\n\t\nSQLite doesn't provide a native way for testing containment of JSONField. The current implementation works only for basic examples without supporting nested structures and doesn't follow \"the general principle that the contained object must match the containing object as to structure and data contents, possibly after discarding some non-matching array elements or object key/value pairs from the containing object\".\nI'm not sure if it's feasible to emulate it in Python.\nSome (not really complicated) examples that don't work:\ndiff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex 9a9e1a1286..1acc5af73e 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -449,9 +449,14 @@ class TestQuerying(TestCase):\n\t\t tests = [\n\t\t\t ({}, self.objs[2:5] + self.objs[6:8]),\n\t\t\t ({'baz': {'a': 'b', 'c': 'd'}}, [self.objs[7]]),\n+\t\t\t({'baz': {'a': 'b'}}, [self.objs[7]]),\n+\t\t\t({'baz': {'c': 'd'}}, [self.objs[7]]),\n\t\t\t ({'k': True, 'l': False}, [self.objs[6]]),\n\t\t\t ({'d': ['e', {'f': 'g'}]}, [self.objs[4]]),\n+\t\t\t({'d': ['e']}, [self.objs[4]]),\n\t\t\t ([1, [2]], [self.objs[5]]),\n+\t\t\t([1], [self.objs[5]]),\n+\t\t\t([[2]], [self.objs[5]]),\n\t\t\t ({'n': [None]}, [self.objs[4]]),\n\t\t\t ({'j': None}, [self.objs[4]]),\n\t\t ]\n",
  "hints_text": "OK, grrrr... — Just a case of doc-ing the limitations. 🤨 (Thanks)\nDraft.\nI've attached a draft solution but it's really hot and it doesn't handle list with dicts (...deep rabbit hole). IMO we should drop support for these lookups on SQLite, at least for now. Testing containment of JSONField is really complicated, I hope SQLite and Oracle will prepare native solutions in future versions.",
  "created_at": "2020-07-28T10:26:49Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_contained_by_unsupported (model_fields.test_jsonfield.TestQuerying)\", \"test_contains_unsupported (model_fields.test_jsonfield.TestQuerying)\"]",
  "PASS_TO_PASS": "[\"test_deconstruct (model_fields.test_jsonfield.TestMethods)\", \"test_deconstruct_custom_encoder_decoder (model_fields.test_jsonfield.TestMethods)\", \"test_get_transforms (model_fields.test_jsonfield.TestMethods)\", \"test_key_transform_text_lookup_mixin_non_key_transform (model_fields.test_jsonfield.TestMethods)\", \"test_custom_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_decoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_validation_error (model_fields.test_jsonfield.TestValidation)\", \"test_formfield (model_fields.test_jsonfield.TestFormField)\", \"test_formfield_custom_encoder_decoder (model_fields.test_jsonfield.TestFormField)\", \"test_custom_encoder_decoder (model_fields.test_jsonfield.JSONFieldTests)\", \"test_db_check_constraints (model_fields.test_jsonfield.JSONFieldTests)\", \"test_invalid_value (model_fields.test_jsonfield.JSONFieldTests)\", \"test_dumping (model_fields.test_jsonfield.TestSerialization)\", \"test_loading (model_fields.test_jsonfield.TestSerialization)\", \"test_xml_serialization (model_fields.test_jsonfield.TestSerialization)\", \"test_dict (model_fields.test_jsonfield.TestSaveLoad)\", \"test_json_null_different_from_sql_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_list (model_fields.test_jsonfield.TestSaveLoad)\", \"test_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_primitives (model_fields.test_jsonfield.TestSaveLoad)\", \"test_realistic_object (model_fields.test_jsonfield.TestSaveLoad)\", \"test_deep_lookup_array (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_mixed (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_objs (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_values (model_fields.test_jsonfield.TestQuerying)\", \"test_exact (model_fields.test_jsonfield.TestQuerying)\", \"test_exact_complex (model_fields.test_jsonfield.TestQuerying)\", \"test_has_any_keys (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_deep (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_list (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_null_value (model_fields.test_jsonfield.TestQuerying)\", \"test_has_keys (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key_or_none (model_fields.test_jsonfield.TestQuerying)\", \"test_key_contains (model_fields.test_jsonfield.TestQuerying)\", \"test_key_endswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_icontains (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iendswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iexact (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iregex (model_fields.test_jsonfield.TestQuerying)\", \"test_key_istartswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_regex (model_fields.test_jsonfield.TestQuerying)\", \"test_key_sql_injection_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_startswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_lookups_with_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_and_exact_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_exclude (model_fields.test_jsonfield.TestQuerying)\", \"test_obj_subquery_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_by_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_count (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_list_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_lookup_obj_target (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_obj_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_usage_in_subquery (model_fields.test_jsonfield.TestQuerying)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.649433",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}