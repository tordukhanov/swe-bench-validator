{
  "repo": "django/django",
  "instance_id": "django__django-16635",
  "base_commit": "dde2537fbb04ad78a673092a931b449245a2d6ae",
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1304,6 +1304,7 @@ def create_altered_indexes(self):\n \n     def generate_added_indexes(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n+            dependencies = self._get_dependencies_for_model(app_label, model_name)\n             for index in alt_indexes[\"added_indexes\"]:\n                 self.add_operation(\n                     app_label,\n@@ -1311,6 +1312,7 @@ def generate_added_indexes(self):\n                         model_name=model_name,\n                         index=index,\n                     ),\n+                    dependencies=dependencies,\n                 )\n \n     def generate_removed_indexes(self):\n@@ -1367,6 +1369,7 @@ def generate_added_constraints(self):\n             app_label,\n             model_name,\n         ), alt_constraints in self.altered_constraints.items():\n+            dependencies = self._get_dependencies_for_model(app_label, model_name)\n             for constraint in alt_constraints[\"added_constraints\"]:\n                 self.add_operation(\n                     app_label,\n@@ -1374,6 +1377,7 @@ def generate_added_constraints(self):\n                         model_name=model_name,\n                         constraint=constraint,\n                     ),\n+                    dependencies=dependencies,\n                 )\n \n     def generate_removed_constraints(self):\n@@ -1425,6 +1429,22 @@ def _get_dependencies_for_foreign_key(app_label, model_name, field, project_stat\n             dependencies.append((through_app_label, through_object_name, None, True))\n         return dependencies\n \n+    def _get_dependencies_for_model(self, app_label, model_name):\n+        \"\"\"Return foreign key dependencies of the given model.\"\"\"\n+        dependencies = []\n+        model_state = self.to_state.models[app_label, model_name]\n+        for field in model_state.fields.values():\n+            if field.is_relation:\n+                dependencies.extend(\n+                    self._get_dependencies_for_foreign_key(\n+                        app_label,\n+                        model_name,\n+                        field,\n+                        self.to_state,\n+                    )\n+                )\n+        return dependencies\n+\n     def _get_altered_foo_together_operations(self, option_name):\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get(\n",
  "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2720,6 +2720,65 @@ def test_add_constraints(self):\n             changes, \"testapp\", 0, 0, model_name=\"author\", constraint=added_constraint\n         )\n \n+    def test_add_constraints_with_new_model(self):\n+        book_with_unique_title_and_pony = ModelState(\n+            \"otherapp\",\n+            \"Book\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"title\", models.CharField(max_length=200)),\n+                (\"pony\", models.ForeignKey(\"otherapp.Pony\", models.CASCADE)),\n+            ],\n+            {\n+                \"constraints\": [\n+                    models.UniqueConstraint(\n+                        fields=[\"title\", \"pony\"],\n+                        name=\"unique_title_pony\",\n+                    )\n+                ]\n+            },\n+        )\n+        changes = self.get_changes(\n+            [self.book_with_no_author],\n+            [book_with_unique_title_and_pony, self.other_pony],\n+        )\n+\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(\n+            changes,\n+            \"otherapp\",\n+            0,\n+            [\"CreateModel\", \"AddField\", \"AddConstraint\"],\n+        )\n+\n+    def test_add_index_with_new_model(self):\n+        book_with_index_title_and_pony = ModelState(\n+            \"otherapp\",\n+            \"Book\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"title\", models.CharField(max_length=200)),\n+                (\"pony\", models.ForeignKey(\"otherapp.Pony\", models.CASCADE)),\n+            ],\n+            {\n+                \"indexes\": [\n+                    models.Index(fields=[\"title\", \"pony\"], name=\"index_title_pony\"),\n+                ]\n+            },\n+        )\n+        changes = self.get_changes(\n+            [self.book_with_no_author],\n+            [book_with_index_title_and_pony, self.other_pony],\n+        )\n+\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(\n+            changes,\n+            \"otherapp\",\n+            0,\n+            [\"CreateModel\", \"AddField\", \"AddIndex\"],\n+        )\n+\n     def test_remove_constraints(self):\n         \"\"\"Test change detection of removed constraints.\"\"\"\n         changes = self.get_changes(\n",
  "problem_statement": "Migrations tries to add constraint before adding a foreign key.\nDescription\n\t \n\t\t(last modified by Raphael Beekmann)\n\t \nHello,\nI have a model, already created through previous migrations, and in a new migration I added a new field with an UniqueConstraint. The migrations script try to create the constraint first and then the new field, resulting an error : \ndjango.core.exceptions.FieldDoesNotExist: NewModel has no field named 'category'\nTo reproduce the bug : \nCreate a project with two models linked together with a One-to-Many relation and an unique constraint : \nclass Type(models.Model):\n\tname = models.CharField(max_length=10)\nclass Model(models.Model):\n\tname = models.CharField(max_length=10)\n\ttype = models.ForeignKey(Type, on_delete=models.SET_NULL, null=True)\n\tdate = models.DateField(auto_now=True)\n\tclass Meta:\n\t\tconstraints = (\n\t\t\tmodels.UniqueConstraint(fields=('date', 'type'), name='unique_type_for_date'),\n\t\t)\nCreate a migration file with manage.py makemigrations\nAdd a new model with another One-to-Many relation and unique constraint. The models looks like this : \nclass Type(models.Model):\n\tname = models.CharField(max_length=10)\nclass Category(models.Model):\n\tname = models.CharField(max_length=10)\nclass Model(models.Model):\n\tname = models.CharField(max_length=10)\n\ttype = models.ForeignKey(Type, on_delete=models.SET_NULL, null=True)\n\tcategory = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n\tdate = models.DateField(auto_now=True)\n\tclass Meta:\n\t\tconstraints = (\n\t\t\tmodels.UniqueConstraint(fields=('date', 'type'), name='unique_type_for_date'),\n\t\t\tmodels.UniqueConstraint(fields=('date', 'category'), name='unique_category_for_date'),\n\t\t)\nCreate a new migration file. The order of the migration's steps are incorrect and the migration crash : \nclass Migration(migrations.Migration):\n\tdependencies = [\n\t\t('app', '0001_initial'),\n\t]\n\toperations = [\n\t\tmigrations.CreateModel(\n\t\t\tname='Category',\n\t\t\tfields=[\n\t\t\t\t('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n\t\t\t\t('name', models.CharField(max_length=10)),\n\t\t\t],\n\t\t),\n\t\tmigrations.AddConstraint(\n\t\t\tmodel_name='model',\n\t\t\tconstraint=models.UniqueConstraint(fields=('date', 'category'), name='unique_category_for_date'),\n\t\t),\n\t\tmigrations.AddField(\n\t\t\tmodel_name='model',\n\t\t\tname='category',\n\t\t\tfield=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.category'),\n\t\t),\n\t]\n",
  "hints_text": "Thanks for the report, however I cannot reproduce this issue. For me, makemigrations generates operations in the correct order. Please reopen the ticket if you can debug your issue and provide a small project that reproduces it.\nThanks for the reproducible scenario.\nFor anyone interested in fixing this issue the bug lies in django.db.migrations.autodetector.MigrationAutodetector in each alteration and addition methods that relate to indexes and constraints and call add_operation without specifying dependencies. If you look at how _generate_altered_foo_together is implement it â€‹does it right by building dependencies for foreign keys references in (index|unique)_together. The same needs to be done for indexes and constraints but since they also support expressions and conditions these needs to be considered as well. Basically a set of fields references from .fields, .expressions, .include and .condition has to be extracted and for each Index and Constraint and _get_dependencies_for_foreign_key has to be called for each remote fields and combined to be passed as dependencies to the add_operation call. Doing so for .fields and .include are trivial, for .expressions and .condition I would refer to Expression.flatten as it's used in UniqueConstraint.validate that might be a good reason to add Expression.field_refs method of simply make F.get_refs return {self.name} so Expression.get_refs can be used generically (for alias and field references). All that to say this is #25551 back from the dead 7 years later with new APIs.",
  "created_at": "2023-03-07T20:01:24Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_add_constraints_with_new_model (migrations.test_autodetector.AutodetectorTests.test_add_constraints_with_new_model)\", \"test_add_index_with_new_model (migrations.test_autodetector.AutodetectorTests.test_add_index_with_new_model)\"]",
  "PASS_TO_PASS": "[\"test_auto (migrations.test_autodetector.MigrationSuggestNameTests.test_auto)\", \"test_many_operations_suffix (migrations.test_autodetector.MigrationSuggestNameTests.test_many_operations_suffix)\", \"test_no_operations (migrations.test_autodetector.MigrationSuggestNameTests.test_no_operations)\", \"test_no_operations_initial (migrations.test_autodetector.MigrationSuggestNameTests.test_no_operations_initial)\", \"test_none_name (migrations.test_autodetector.MigrationSuggestNameTests.test_none_name)\", \"test_none_name_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests.test_none_name_with_initial_true)\", \"test_operation_with_invalid_chars_in_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests.test_operation_with_invalid_chars_in_suggested_name)\", \"test_operation_with_no_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests.test_operation_with_no_suggested_name)\", \"test_single_operation (migrations.test_autodetector.MigrationSuggestNameTests.test_single_operation)\", \"test_single_operation_long_name (migrations.test_autodetector.MigrationSuggestNameTests.test_single_operation_long_name)\", \"test_two_create_models (migrations.test_autodetector.MigrationSuggestNameTests.test_two_create_models)\", \"test_two_create_models_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests.test_two_create_models_with_initial_true)\", \"test_two_operations (migrations.test_autodetector.MigrationSuggestNameTests.test_two_operations)\", \"Added fields will be created before using them in index_together.\", \"test_add_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_add_index_together)\", \"test_add_model_order_with_respect_to_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_add_model_order_with_respect_to_index_together)\", \"Fields are altered after deleting some index_together.\", \"test_create_model_and_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_create_model_and_index_together)\", \"Empty index_together shouldn't generate a migration.\", \"index_together doesn't generate a migration if no changes have been\", \"index_together triggers on ordering changes.\", \"test_index_together_remove_fk (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_index_together_remove_fk)\", \"test_partly_alter_index_together_decrease (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_partly_alter_index_together_decrease)\", \"test_partly_alter_index_together_increase (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_partly_alter_index_together_increase)\", \"Removed fields will be removed after updating index_together.\", \"test_remove_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_remove_index_together)\", \"Fields are renamed before updating index_together.\", \"test_rename_index_together_to_index (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_rename_index_together_to_index)\", \"test_rename_index_together_to_index_extra_options (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_rename_index_together_to_index_extra_options)\", \"test_rename_index_together_to_index_order_fields (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_rename_index_together_to_index_order_fields)\", \"test_set_alter_order_with_respect_to_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_set_alter_order_with_respect_to_index_together)\", \"Setting order_with_respect_to when adding the FK too does\", \"#23405 - Adding a NOT NULL and blank `CharField` or `TextField`\", \"Test change detection of new constraints.\", \"test_add_custom_fk_with_hardcoded_to (migrations.test_autodetector.AutodetectorTests.test_add_custom_fk_with_hardcoded_to)\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests.test_add_date_fields_with_auto_now_add_asking_for_default)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests.test_add_date_fields_with_auto_now_add_not_asking_for_null_addition)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests.test_add_date_fields_with_auto_now_not_asking_for_default)\", \"Tests autodetection of new fields.\", \"Added fields will be created before using them in unique_together.\", \"#22030 - Adding a field with a default should work.\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"Setting order_with_respect_to when adding the whole model\", \"test_add_model_order_with_respect_to_index_constraint (migrations.test_autodetector.AutodetectorTests.test_add_model_order_with_respect_to_index_constraint)\", \"test_add_model_order_with_respect_to_unique_together (migrations.test_autodetector.AutodetectorTests.test_add_model_order_with_respect_to_unique_together)\", \"Removing a base field takes place before adding a new inherited model\", \"#23405 - Adding a NOT NULL and non-blank `CharField` or `TextField`\", \"Tests unique_together detection.\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"test_alter_db_table_comment_add (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_add)\", \"test_alter_db_table_comment_change (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_change)\", \"test_alter_db_table_comment_no_changes (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_no_changes)\", \"test_alter_db_table_comment_remove (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_remove)\", \"Alter_db_table doesn't generate a migration if no changes have been made.\", \"Tests detection for removing db_table in model's options.\", \"Tests when model and db_table changes, autodetector must create two\", \"Fields are altered after deleting some unique_together.\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests.test_alter_field_to_fk_dependency_other_app)\", \"#23609 - Tests autodetection of nullable to non-nullable alterations.\", \"ForeignKeys are altered _before_ the model they used to\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests.test_alter_many_to_many)\", \"Changing the model managers adds a new operation.\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"test_alter_regex_string_to_compiled_regex (migrations.test_autodetector.AutodetectorTests.test_alter_regex_string_to_compiled_regex)\", \"test_alter_unique_together_fk_to_m2m (migrations.test_autodetector.AutodetectorTests.test_alter_unique_together_fk_to_m2m)\", \"Tests auto-naming of migrations for graph matching.\", \"test_arrange_for_graph_with_multiple_initial (migrations.test_autodetector.AutodetectorTests.test_arrange_for_graph_with_multiple_initial)\", \"Bases of other models come first.\", \"test_bases_first_mixed_case_app_label (migrations.test_autodetector.AutodetectorTests.test_bases_first_mixed_case_app_label)\", \"#23315 - The dependency resolver knows to put all CreateModel\", \"#23322 - The dependency resolver knows to explicitly resolve\", \"Having a circular ForeignKey dependency automatically\", \"#23938 - Changing a concrete field into a ManyToManyField\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests.test_create_model_and_unique_together)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"Adding a m2m with a through model and the models that use it should be\", \"test_create_with_through_model_separate_apps (migrations.test_autodetector.AutodetectorTests.test_create_with_through_model_separate_apps)\", \"Two instances which deconstruct to the same value aren't considered a\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"#22951 -- Uninstantiated classes with deconstruct are correctly returned\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests.test_default_related_name_option)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests.test_different_regex_does_alter)\", \"Empty unique_together shouldn't generate a migration.\", \"A dependency to an app with no migrations uses __first__.\", \"Having a ForeignKey automatically adds a dependency.\", \"#23100 - ForeignKeys correctly depend on other apps' models.\", \"Removing an FK and the model it targets in the same change must remove\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests.test_identical_regex_doesnt_alter)\", \"Tests when model changes but db_table stays as-is, autodetector must not\", \"A dependency to an app with existing migrations uses the\", \"A model with a m2m field that specifies a \\\"through\\\" model cannot be\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests.test_managed_to_unmanaged)\", \"#23938 - Changing a ManyToManyField into a concrete field\", \"Removing a ManyToManyField and the \\\"through\\\" model in the same change\", \"Removing a model that contains a ManyToManyField and the \\\"through\\\" model\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests.test_mti_inheritance_model_removal)\", \"Inheriting models doesn't move *_ptr fields into AddField operations.\", \"Nested deconstruction is applied recursively to the args/kwargs of\", \"Tests autodetection of new models.\", \"If two models with a ForeignKey from one to the other are removed at the\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_parse_number (migrations.test_autodetector.AutodetectorTests.test_parse_number)\", \"test_partly_alter_unique_together_decrease (migrations.test_autodetector.AutodetectorTests.test_partly_alter_unique_together_decrease)\", \"test_partly_alter_unique_together_increase (migrations.test_autodetector.AutodetectorTests.test_partly_alter_unique_together_increase)\", \"A relation used as the primary key is kept as part of CreateModel.\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"#23415 - The autodetector must correctly deal with custom FK on proxy\", \"FK dependencies still work on proxy models.\", \"test_proxy_non_model_parent (migrations.test_autodetector.AutodetectorTests.test_proxy_non_model_parent)\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests.test_proxy_to_mti_with_fk_to_proxy)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests.test_proxy_to_mti_with_fk_to_proxy_proxy)\", \"Removing order_with_respect_to when removing the FK too does\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"Removed fields will be removed after updating unique_together.\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"Fields are renamed before updating unique_together.\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests.test_rename_field_foreign_key_to_field)\", \"RenameField is used if a field is renamed and db_column equal to the\", \"test_rename_field_with_renamed_model (migrations.test_autodetector.AutodetectorTests.test_rename_field_with_renamed_model)\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests.test_rename_foreign_object_fields)\", \"test_rename_indexes (migrations.test_autodetector.AutodetectorTests.test_rename_indexes)\", \"Tests autodetection of renamed models that are used in M2M relations as\", \"Tests autodetection of renamed models.\", \"Model name is case-insensitive. Changing case doesn't lead to any\", \"The migration to rename a model pointed to by a foreign key in another\", \"#24537 - The order of fields in a model does not influence\", \"Tests autodetection of renamed models while simultaneously renaming one\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests.test_rename_referenced_primary_key)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests.test_rename_related_field_preserved_db_column)\", \"test_renamed_referenced_m2m_model_case (migrations.test_autodetector.AutodetectorTests.test_renamed_referenced_m2m_model_case)\", \"#22300 - Adding an FK in the same \\\"spot\\\" as a deleted CharField should\", \"A migration with a FK between two models of the same app does\", \"#22275 - A migration with circular FK dependency does not try\", \"A migration with a FK between two models of the same app\", \"Setting order_with_respect_to adds a field.\", \"test_set_alter_order_with_respect_to_index_constraint_unique_together (migrations.test_autodetector.AutodetectorTests.test_set_alter_order_with_respect_to_index_constraint_unique_together)\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests.test_supports_functools_partial)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests.test_swappable)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests.test_swappable_changed)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests.test_swappable_circular_multi_mti)\", \"Swappable models get their CreateModel first.\", \"test_swappable_lowercase (migrations.test_autodetector.AutodetectorTests.test_swappable_lowercase)\", \"test_swappable_many_to_many_model_case (migrations.test_autodetector.AutodetectorTests.test_swappable_many_to_many_model_case)\", \"Trim does not remove dependencies but does remove unwanted apps.\", \"unique_together doesn't generate a migration if no\", \"unique_together also triggers on ordering changes.\", \"Tests unique_together and field removal detection & ordering\", \"The autodetector correctly deals with managed models.\", \"#23415 - The autodetector must correctly deal with custom FK on\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests.test_unmanaged_delete)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests.test_unmanaged_to_managed)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.765790",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}