{
  "repo": "django/django",
  "instance_id": "django__django-12513",
  "base_commit": "828e3b1335e2614d338a630fd5b5f88d38a6b5d2",
  "patch": "diff --git a/django/contrib/auth/signals.py b/django/contrib/auth/signals.py\n--- a/django/contrib/auth/signals.py\n+++ b/django/contrib/auth/signals.py\n@@ -1,5 +1,5 @@\n from django.dispatch import Signal\n \n-user_logged_in = Signal(providing_args=['request', 'user'])\n-user_login_failed = Signal(providing_args=['credentials', 'request'])\n-user_logged_out = Signal(providing_args=['request', 'user'])\n+user_logged_in = Signal()\n+user_login_failed = Signal()\n+user_logged_out = Signal()\ndiff --git a/django/core/signals.py b/django/core/signals.py\n--- a/django/core/signals.py\n+++ b/django/core/signals.py\n@@ -1,6 +1,6 @@\n from django.dispatch import Signal\n \n-request_started = Signal(providing_args=[\"environ\", \"scope\"])\n+request_started = Signal()\n request_finished = Signal()\n-got_request_exception = Signal(providing_args=[\"request\"])\n-setting_changed = Signal(providing_args=[\"setting\", \"value\", \"enter\"])\n+got_request_exception = Signal()\n+setting_changed = Signal()\ndiff --git a/django/db/backends/signals.py b/django/db/backends/signals.py\n--- a/django/db/backends/signals.py\n+++ b/django/db/backends/signals.py\n@@ -1,3 +1,3 @@\n from django.dispatch import Signal\n \n-connection_created = Signal(providing_args=[\"connection\"])\n+connection_created = Signal()\ndiff --git a/django/db/models/signals.py b/django/db/models/signals.py\n--- a/django/db/models/signals.py\n+++ b/django/db/models/signals.py\n@@ -3,7 +3,7 @@\n from django.db.models.utils import make_model_tuple\n from django.dispatch import Signal\n \n-class_prepared = Signal(providing_args=[\"class\"])\n+class_prepared = Signal()\n \n \n class ModelSignal(Signal):\n@@ -34,20 +34,16 @@ def disconnect(self, receiver=None, sender=None, dispatch_uid=None, apps=None):\n         )\n \n \n-pre_init = ModelSignal(providing_args=[\"instance\", \"args\", \"kwargs\"], use_caching=True)\n-post_init = ModelSignal(providing_args=[\"instance\"], use_caching=True)\n+pre_init = ModelSignal(use_caching=True)\n+post_init = ModelSignal(use_caching=True)\n \n-pre_save = ModelSignal(providing_args=[\"instance\", \"raw\", \"using\", \"update_fields\"],\n-                       use_caching=True)\n-post_save = ModelSignal(providing_args=[\"instance\", \"raw\", \"created\", \"using\", \"update_fields\"], use_caching=True)\n+pre_save = ModelSignal(use_caching=True)\n+post_save = ModelSignal(use_caching=True)\n \n-pre_delete = ModelSignal(providing_args=[\"instance\", \"using\"], use_caching=True)\n-post_delete = ModelSignal(providing_args=[\"instance\", \"using\"], use_caching=True)\n+pre_delete = ModelSignal(use_caching=True)\n+post_delete = ModelSignal(use_caching=True)\n \n-m2m_changed = ModelSignal(\n-    providing_args=[\"action\", \"instance\", \"reverse\", \"model\", \"pk_set\", \"using\"],\n-    use_caching=True,\n-)\n+m2m_changed = ModelSignal(use_caching=True)\n \n-pre_migrate = Signal(providing_args=[\"app_config\", \"verbosity\", \"interactive\", \"using\", \"apps\", \"plan\"])\n-post_migrate = Signal(providing_args=[\"app_config\", \"verbosity\", \"interactive\", \"using\", \"apps\", \"plan\"])\n+pre_migrate = Signal()\n+post_migrate = Signal()\ndiff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -1,6 +1,8 @@\n import threading\n+import warnings\n import weakref\n \n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.inspect import func_accepts_kwargs\n \n \n@@ -28,14 +30,16 @@ class Signal:\n     def __init__(self, providing_args=None, use_caching=False):\n         \"\"\"\n         Create a new signal.\n-\n-        providing_args\n-            A list of the arguments this signal can pass along in a send() call.\n         \"\"\"\n         self.receivers = []\n-        if providing_args is None:\n-            providing_args = []\n-        self.providing_args = set(providing_args)\n+        if providing_args is not None:\n+            warnings.warn(\n+                'The providing_args argument is deprecated. As it is purely '\n+                'documentational, it has no replacement. If you rely on this '\n+                'argument as documentation, you can move the text to a code '\n+                'comment or docstring.',\n+                RemovedInDjango40Warning, stacklevel=2,\n+            )\n         self.lock = threading.Lock()\n         self.use_caching = use_caching\n         # For convenience we create empty caches even if they are not used.\n@@ -187,9 +191,7 @@ def send_robust(self, sender, **named):\n                 occur).\n \n             named\n-                Named arguments which will be passed to receivers. These\n-                arguments must be a subset of the argument names defined in\n-                providing_args.\n+                Named arguments which will be passed to receivers.\n \n         Return a list of tuple pairs [(receiver, response), ... ].\n \ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -21,7 +21,7 @@\n from django.utils.version import get_version_tuple\n \n autoreload_started = Signal()\n-file_changed = Signal(providing_args=['file_path', 'kind'])\n+file_changed = Signal()\n \n DJANGO_AUTORELOAD_ENV = 'RUN_MAIN'\n \n",
  "test_patch": "diff --git a/django/test/signals.py b/django/test/signals.py\n--- a/django/test/signals.py\n+++ b/django/test/signals.py\n@@ -14,7 +14,7 @@\n from django.utils.formats import FORMAT_SETTINGS, reset_format_cache\n from django.utils.functional import empty\n \n-template_rendered = Signal(providing_args=[\"template\", \"context\"])\n+template_rendered = Signal()\n \n # Most setting_changed receivers are supposed to be added below,\n # except for cases where the receiver is related to a contrib app.\ndiff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -29,10 +29,10 @@ def a(self, val, **kwargs):\n         return val\n \n \n-a_signal = Signal(providing_args=[\"val\"])\n-b_signal = Signal(providing_args=[\"val\"])\n-c_signal = Signal(providing_args=[\"val\"])\n-d_signal = Signal(providing_args=[\"val\"], use_caching=True)\n+a_signal = Signal()\n+b_signal = Signal()\n+c_signal = Signal()\n+d_signal = Signal(use_caching=True)\n \n \n class DispatcherTests(SimpleTestCase):\ndiff --git a/tests/signals/test_deprecation.py b/tests/signals/test_deprecation.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/signals/test_deprecation.py\n@@ -0,0 +1,22 @@\n+import warnings\n+\n+from django.dispatch import Signal\n+from django.test import SimpleTestCase\n+from django.utils.deprecation import RemovedInDjango40Warning\n+\n+\n+class SignalDeprecationTests(SimpleTestCase):\n+    def test_providing_args_warning(self):\n+        msg = (\n+            'The providing_args argument is deprecated. As it is purely '\n+            'documentational, it has no replacement. If you rely on this '\n+            'argument as documentation, you can move the text to a code '\n+            'comment or docstring.'\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango40Warning, msg):\n+            Signal(providing_args=['arg1', 'arg2'])\n+\n+    def test_without_providing_args_does_not_warn(self):\n+        with warnings.catch_warnings(record=True) as recorded:\n+            Signal()\n+        self.assertEqual(len(recorded), 0)\n",
  "problem_statement": "Deprecate providing_args argument from Signal\nDescription\n\t\nThe argument is and always has been purely documentational. It provides no functionality or checking. Therefore, these values are stored in memory for no real use.\nDocumentation can be handled just as easily by a code comment or real documentation articles.\nOn a more practical level, I rarely signals, so I recently had to look up their interface. Seeing this providing_args argument required me to think about how to best use it, only to realize it actually goes unused. We can remove this cognitive distraction from the docs.\nIt has caused other small confusion in the past: #19579.\n",
  "hints_text": "",
  "created_at": "2020-03-01T17:34:20Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_providing_args_warning (signals.test_deprecation.SignalDeprecationTests)\"]",
  "PASS_TO_PASS": "[\"test_receiver_signal_list (dispatch.tests.ReceiverTestCase)\", \"test_receiver_single_signal (dispatch.tests.ReceiverTestCase)\", \"test_without_providing_args_does_not_warn (signals.test_deprecation.SignalDeprecationTests)\", \"test_cached_garbaged_collected (dispatch.tests.DispatcherTests)\", \"test_cannot_connect_no_kwargs (dispatch.tests.DispatcherTests)\", \"test_cannot_connect_non_callable (dispatch.tests.DispatcherTests)\", \"test_disconnection (dispatch.tests.DispatcherTests)\", \"test_garbage_collected (dispatch.tests.DispatcherTests)\", \"test_has_listeners (dispatch.tests.DispatcherTests)\", \"test_multiple_registration (dispatch.tests.DispatcherTests)\", \"test_send (dispatch.tests.DispatcherTests)\", \"test_send_connected_no_sender (dispatch.tests.DispatcherTests)\", \"test_send_different_no_sender (dispatch.tests.DispatcherTests)\", \"test_send_no_receivers (dispatch.tests.DispatcherTests)\", \"test_send_robust_fail (dispatch.tests.DispatcherTests)\", \"test_send_robust_ignored_sender (dispatch.tests.DispatcherTests)\", \"test_send_robust_no_receivers (dispatch.tests.DispatcherTests)\", \"test_send_robust_success (dispatch.tests.DispatcherTests)\", \"test_uid_registration (dispatch.tests.DispatcherTests)\", \"test_values_returned_by_disconnection (dispatch.tests.DispatcherTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.628937",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}