{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15085",
  "base_commit": "694baf9686c9a092e280283d6d58d2e17867f040",
  "patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -168,6 +168,7 @@ class C89CodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n+        'allow_unknown_functions': True,\n         'contract': True,\n         'dereference': set(),\n         'error_on_reserved': False,\ndiff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py\n--- a/sympy/printing/codeprinter.py\n+++ b/sympy/printing/codeprinter.py\n@@ -53,7 +53,8 @@ class CodePrinter(StrPrinter):\n         'error_on_reserved': False,\n         'reserved_word_suffix': '_',\n         'human': True,\n-        'inline': False\n+        'inline': False,\n+        'allow_unknown_functions': True,\n     }\n \n     def __init__(self, settings=None):\n@@ -381,6 +382,8 @@ def _print_Function(self, expr):\n         elif hasattr(expr, '_imp_') and isinstance(expr._imp_, Lambda):\n             # inlined function\n             return self._print(expr._imp_(*expr.args))\n+        elif expr.is_Function and self._settings.get('allow_unknown_functions', True):\n+            return '%s(%s)' % (self._print(expr.func), ', '.join(map(self._print, expr.args)))\n         else:\n             return self._print_not_supported(expr)\n \ndiff --git a/sympy/printing/fcode.py b/sympy/printing/fcode.py\n--- a/sympy/printing/fcode.py\n+++ b/sympy/printing/fcode.py\n@@ -98,6 +98,7 @@ class FCodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n+        'allow_unknown_functions': True,\n         'source_format': 'fixed',\n         'contract': True,\n         'standard': 77,\ndiff --git a/sympy/printing/glsl.py b/sympy/printing/glsl.py\n--- a/sympy/printing/glsl.py\n+++ b/sympy/printing/glsl.py\n@@ -50,6 +50,7 @@ class GLSLPrinter(CodePrinter):\n         'precision': 9,\n         'user_functions': {},\n         'human': True,\n+        'allow_unknown_functions': True,\n         'contract': True,\n         'error_on_reserved': False,\n         'reserved_word_suffix': '_'\ndiff --git a/sympy/printing/jscode.py b/sympy/printing/jscode.py\n--- a/sympy/printing/jscode.py\n+++ b/sympy/printing/jscode.py\n@@ -55,6 +55,7 @@ class JavascriptCodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n+        'allow_unknown_functions': True,\n         'contract': True\n     }\n \ndiff --git a/sympy/printing/julia.py b/sympy/printing/julia.py\n--- a/sympy/printing/julia.py\n+++ b/sympy/printing/julia.py\n@@ -62,6 +62,7 @@ class JuliaCodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n+        'allow_unknown_functions': True,\n         'contract': True,\n         'inline': True,\n     }\ndiff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -47,6 +47,7 @@ class MCodePrinter(CodePrinter):\n         'precision': 15,\n         'user_functions': {},\n         'human': True,\n+        'allow_unknown_functions': True,\n     }\n \n     _number_symbols = set()\ndiff --git a/sympy/printing/octave.py b/sympy/printing/octave.py\n--- a/sympy/printing/octave.py\n+++ b/sympy/printing/octave.py\n@@ -73,6 +73,7 @@ class OctaveCodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n+        'allow_unknown_functions': True,\n         'contract': True,\n         'inline': True,\n     }\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_ccode.py b/sympy/printing/tests/test_ccode.py\n--- a/sympy/printing/tests/test_ccode.py\n+++ b/sympy/printing/tests/test_ccode.py\n@@ -133,7 +133,8 @@ def test_ccode_inline_function():\n \n def test_ccode_exceptions():\n     assert ccode(gamma(x), standard='C99') == \"tgamma(x)\"\n-    assert 'not supported in c' in ccode(gamma(x), standard='C89').lower()\n+    gamma_c89 = ccode(gamma(x), standard='C89', allow_unknown_functions=False)\n+    assert 'not supported in c' in gamma_c89.lower()\n     assert ccode(ceiling(x)) == \"ceil(x)\"\n     assert ccode(Abs(x)) == \"fabs(x)\"\n     assert ccode(gamma(x)) == \"tgamma(x)\"\ndiff --git a/sympy/printing/tests/test_fcode.py b/sympy/printing/tests/test_fcode.py\n--- a/sympy/printing/tests/test_fcode.py\n+++ b/sympy/printing/tests/test_fcode.py\n@@ -168,10 +168,10 @@ def test_implicit():\n def test_not_fortran():\n     x = symbols('x')\n     g = Function('g')\n-    assert fcode(\n-        gamma(x)) == \"C     Not supported in Fortran:\\nC     gamma\\n      gamma(x)\"\n+    gamma_f = fcode(gamma(x), allow_unknown_functions=False)\n+    assert gamma_f == \"C     Not supported in Fortran:\\nC     gamma\\n      gamma(x)\"\n     assert fcode(Integral(sin(x))) == \"C     Not supported in Fortran:\\nC     Integral\\n      Integral(sin(x), x)\"\n-    assert fcode(g(x)) == \"C     Not supported in Fortran:\\nC     g\\n      g(x)\"\n+    assert fcode(g(x), allow_unknown_functions=False) == \"C     Not supported in Fortran:\\nC     g\\n      g(x)\"\n \n \n def test_user_functions():\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -12,6 +12,7 @@\n     DotProduct, Eq, Dummy, sinc, erf, erfc, factorial, gamma, loggamma,\n     digamma, RisingFactorial, besselj, bessely, besseli, besselk)\n from sympy.printing.lambdarepr import LambdaPrinter\n+from sympy.printing.pycode import NumPyPrinter\n from sympy.utilities.lambdify import implemented_function\n from sympy.utilities.pytest import skip\n from sympy.utilities.decorator import conserve_mpmath_dps\n@@ -361,6 +362,23 @@ def test_numpy_matrix():\n     #Check that the types are arrays and matrices\n     assert isinstance(f(1, 2, 3), numpy.ndarray)\n \n+    # gh-15071\n+    class dot(Function):\n+        pass\n+    x_dot_mtx = dot(x, Matrix([[2], [1], [0]]))\n+    f_dot1 = lambdify(x, x_dot_mtx)\n+    inp = numpy.zeros((17, 3))\n+    assert numpy.all(f_dot1(inp) == 0)\n+\n+    strict_kw = dict(allow_unknown_functions=False, inline=True, fully_qualified_modules=False)\n+    p2 = NumPyPrinter(dict(user_functions={'dot': 'dot'}, **strict_kw))\n+    f_dot2 = lambdify(x, x_dot_mtx, printer=p2)\n+    assert numpy.all(f_dot2(inp) == 0)\n+\n+    p3 = NumPyPrinter(strict_kw)\n+    # The line below should probably fail upon construction (before calling with \"(inp)\"):\n+    raises(Exception, lambda: lambdify(x, x_dot_mtx, printer=p3)(inp))\n+\n def test_numpy_transpose():\n     if not numpy:\n         skip(\"numpy not installed.\")\n",
  "problem_statement": "[regression] lambdify with Matrix: `NameError: name 'Matrix' is not defined`\nI'm trying to create a lambda function from a sympy expression that involves a dot product with a `sympy.Matrix`. Since at least sympy 1.2, this fails.\r\n\r\nMWE:\r\n```python\r\nfrom sympy import Matrix\r\nimport sympy\r\nimport numpy\r\n\r\n\r\nclass dot(sympy.Function):\r\n    pass\r\n\r\n\r\n# def vector2vector(x):\r\n#     out = numpy.array(x)\r\n#     if len(out.shape) == 2 and out.shape[1] == 1:\r\n#         out = out[:, 0]\r\n#     return out\r\n\r\n# mods = [{\"ImmutableDenseMatrix\": vector2vector}, \"numpy\"]\r\n\r\nx = sympy.Symbol(\"x\")\r\nexpr = dot(x, Matrix([[2], [1], [0]]))\r\nf = sympy.lambdify(x, expr)\r\n\r\nX = numpy.zeros((17, 3))\r\nval = f(X)\r\n```\r\nError message:\r\n```\r\n  File \"<lambdifygenerated-1>\", line 4, in _lambdifygenerated\r\nNameError: name 'Matrix' is not defined\r\n```\n",
  "hints_text": "Bisected to 998946c03c0934b2bb638f182d728a31120488e7 CC @bjodah ",
  "created_at": "2018-08-13T21:06:14Z",
  "version": "1.2",
  "FAIL_TO_PASS": "[\"test_ccode_exceptions\", \"test_not_fortran\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_ccode_sqrt\", \"test_ccode_Pow\", \"test_ccode_Max\", \"test_ccode_constants_mathh\", \"test_ccode_constants_other\", \"test_ccode_Rational\", \"test_ccode_Integer\", \"test_ccode_functions\", \"test_ccode_inline_function\", \"test_ccode_user_functions\", \"test_ccode_boolean\", \"test_ccode_Relational\", \"test_ccode_Piecewise\", \"test_ccode_sinc\", \"test_ccode_Piecewise_deep\", \"test_ccode_ITE\", \"test_ccode_settings\", \"test_ccode_Indexed\", \"test_Element\", \"test_ccode_Indexed_without_looking_for_contraction\", \"test_ccode_loops_matrix_vector\", \"test_dummy_loops\", \"test_ccode_loops_add\", \"test_ccode_loops_multiple_contractions\", \"test_ccode_loops_addfactor\", \"test_ccode_loops_multiple_terms\", \"test_dereference_printing\", \"test_Matrix_printing\", \"test_ccode_reserved_words\", \"test_ccode_sign\", \"test_ccode_Assignment\", \"test_ccode_For\", \"test_ccode_Max_Min\", \"test_ccode_standard\", \"test_CCodePrinter\", \"test_C89CodePrinter\", \"test_C99CodePrinter\", \"test_C99CodePrinter__precision\", \"test_get_math_macros\", \"test_ccode_Declaration\", \"test_C99CodePrinter_custom_type\", \"test_MatrixElement_printing\", \"test_subclass_CCodePrinter\", \"test_ccode_math_macros\", \"test_ccode_Type\", \"test_fcode_sign\", \"test_fcode_Pow\", \"test_fcode_Rational\", \"test_fcode_Integer\", \"test_fcode_Float\", \"test_fcode_functions\", \"test_case\", \"test_fcode_functions_with_integers\", \"test_fcode_NumberSymbol\", \"test_fcode_complex\", \"test_implicit\", \"test_user_functions\", \"test_inline_function\", \"test_assign_to\", \"test_line_wrapping\", \"test_fcode_precedence\", \"test_fcode_Logical\", \"test_fcode_Xlogical\", \"test_fcode_Relational\", \"test_fcode_Piecewise\", \"test_wrap_fortran\", \"test_wrap_fortran_keep_d0\", \"test_settings\", \"test_free_form_code_line\", \"test_free_form_continuation_line\", \"test_free_form_comment_line\", \"test_loops\", \"test_fcode_Indexed_without_looking_for_contraction\", \"test_derived_classes\", \"test_indent\", \"test_fcode_For\", \"test_fcode_Declaration\", \"test_aug_assign\", \"test_no_args\", \"test_single_arg\", \"test_list_args\", \"test_nested_args\", \"test_str_args\", \"test_own_namespace_1\", \"test_own_namespace_2\", \"test_own_module\", \"test_bad_args\", \"test_atoms\", \"test_sympy_lambda\", \"test_math_lambda\", \"test_mpmath_lambda\", \"test_number_precision\", \"test_mpmath_precision\", \"test_math_transl\", \"test_mpmath_transl\", \"test_exponentiation\", \"test_sqrt\", \"test_trig\", \"test_vector_simple\", \"test_vector_discontinuous\", \"test_trig_symbolic\", \"test_trig_float\", \"test_docs\", \"test_math\", \"test_sin\", \"test_matrix\", \"test_issue9474\", \"test_integral\", \"test_sym_single_arg\", \"test_sym_list_args\", \"test_sym_integral\", \"test_namespace_order\", \"test_namespace_type\", \"test_imps\", \"test_imps_errors\", \"test_imps_wrong_args\", \"test_lambdify_imps\", \"test_dummification\", \"test_curly_matrix_symbol\", \"test_python_keywords\", \"test_lambdify_docstring\", \"test_special_printers\", \"test_true_false\", \"test_issue_2790\", \"test_issue_12092\", \"test_ITE\", \"test_Min_Max\", \"test_issue_12173\", \"test_sinc_mpmath\", \"test_lambdify_dummy_arg\", \"test_lambdify_mixed_symbol_dummy_args\", \"test_lambdify_inspect\"]",
  "environment_setup_commit": "e53e809176de9aa0fb62e85689f8cdb669d4cacb",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.096424",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}