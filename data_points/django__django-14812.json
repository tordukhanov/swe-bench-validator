{
  "repo": "django/django",
  "instance_id": "django__django-14812",
  "base_commit": "b8824e8d17434957650517370f739e340867c381",
  "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1009,9 +1009,17 @@ def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):\n         fks_to_parent = [f for f in opts.fields if f.name == fk_name]\n         if len(fks_to_parent) == 1:\n             fk = fks_to_parent[0]\n-            if not isinstance(fk, ForeignKey) or \\\n-                    (fk.remote_field.model != parent_model and\n-                     fk.remote_field.model not in parent_model._meta.get_parent_list()):\n+            parent_list = parent_model._meta.get_parent_list()\n+            if not isinstance(fk, ForeignKey) or (\n+                # ForeignKey to proxy models.\n+                fk.remote_field.model._meta.proxy and\n+                fk.remote_field.model._meta.proxy_for_model not in parent_list\n+            ) or (\n+                # ForeignKey to concrete models.\n+                not fk.remote_field.model._meta.proxy and\n+                fk.remote_field.model != parent_model and\n+                fk.remote_field.model not in parent_list\n+            ):\n                 raise ValueError(\n                     \"fk_name '%s' is not a ForeignKey to '%s'.\" % (fk_name, parent_model._meta.label)\n                 )\n@@ -1021,11 +1029,15 @@ def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):\n             )\n     else:\n         # Try to discover what the ForeignKey from model to parent_model is\n+        parent_list = parent_model._meta.get_parent_list()\n         fks_to_parent = [\n             f for f in opts.fields\n             if isinstance(f, ForeignKey) and (\n                 f.remote_field.model == parent_model or\n-                f.remote_field.model in parent_model._meta.get_parent_list()\n+                f.remote_field.model in parent_list or (\n+                    f.remote_field.model._meta.proxy and\n+                    f.remote_field.model._meta.proxy_for_model in parent_list\n+                )\n             )\n         ]\n         if len(fks_to_parent) == 1:\n",
  "test_patch": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -4,7 +4,7 @@\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F, Field, Model\n+from django.db.models import CASCADE, F, Field, ForeignKey, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -1121,6 +1121,33 @@ class TestModelAdmin(ModelAdmin):\n \n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n+    def test_proxy_model_parent(self):\n+        class Parent(Model):\n+            pass\n+\n+        class ProxyChild(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class ProxyProxyChild(ProxyChild):\n+            class Meta:\n+                proxy = True\n+\n+        class Related(Model):\n+            proxy_child = ForeignKey(ProxyChild, on_delete=CASCADE)\n+\n+        class InlineFkName(admin.TabularInline):\n+            model = Related\n+            fk_name = 'proxy_child'\n+\n+        class InlineNoFkName(admin.TabularInline):\n+            model = Related\n+\n+        class ProxyProxyChildAdminFkName(admin.ModelAdmin):\n+            inlines = [InlineFkName, InlineNoFkName]\n+\n+        self.assertIsValid(ProxyProxyChildAdminFkName, ProxyProxyChild)\n+\n \n class ExtraCheckTests(CheckTestCase):\n \n",
  "problem_statement": "ModelAdmin for proxy model with InlineModelAdmin for proxy superclass reference results in admin.E202\nDescription\n\t \n\t\t(last modified by Lucas Weyne)\n\t \nThis is similar to #30273, but in this case, the InlineModelAdmin.model is a model with references to a proxy superclass\nAssume the following Django models:\nclass Reporter(models.Model):\n\tname = models.CharField(max_length=50)\nclass Journalist(Reporter):\n\tclass Meta:\n\t\tproxy = True\nclass SpecialJournalist(Journalist):\n\tclass Meta:\n\t\tproxy = True \nclass Article(models.Model):\n\tjournalist = models.ForeignKey(Journalist, on_delete=models.CASCADE)\nRegister model admins as follows (exemplary):\nclass ArticleInline(admin.TabularInline):\n\tmodel = Article\n\tfk_name = 'journalist'\n@admin.register(SpecialJournalist)\nclass SpecialJournalistAdmin(admin.ModelAdmin):\n\tinlines = [ArticleInline]\nThis will result in the following error:\n<class 'ArticleInline'>: (admin.E202) fk_name 'journalist' is not a ForeignKey to 'SpecialJournalist'.\nThis problem occurs on this check this check: â€‹https://github.com/django/django/blob/3.1.13/django/forms/models.py#L1006\nA ValueError is raised because the result for SpecialJournalist._meta.get_parent_list() does not include Journalist:\n>>> SpecialJournalist._meta.get_parent_list()\n[<class 'Reporter'>]\n",
  "hints_text": "Test project to see this error\nThanks for the report.",
  "created_at": "2021-08-30T16:51:46Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_proxy_model_parent (modeladmin.test_checks.FkNameCheckTests)\"]",
  "PASS_TO_PASS": "[\"test_not_integer (modeladmin.test_checks.ListMaxShowAllCheckTests)\", \"test_valid_case (modeladmin.test_checks.ListMaxShowAllCheckTests)\", \"test_actions_not_unique (modeladmin.test_checks.ActionsCheckTests)\", \"test_actions_unique (modeladmin.test_checks.ActionsCheckTests)\", \"test_custom_permissions_require_matching_has_method (modeladmin.test_checks.ActionsCheckTests)\", \"test_not_integer (modeladmin.test_checks.MinNumCheckTests)\", \"test_valid_case (modeladmin.test_checks.MinNumCheckTests)\", \"test_not_integer (modeladmin.test_checks.ListPerPageCheckTests)\", \"test_valid_case (modeladmin.test_checks.ListPerPageCheckTests)\", \"test_not_integer (modeladmin.test_checks.ExtraCheckTests)\", \"test_valid_case (modeladmin.test_checks.ExtraCheckTests)\", \"test_duplicate_fields (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_duplicate_fields_in_fieldsets (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_fieldsets_with_custom_form_validation (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_item_not_a_pair (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_missing_fields_key (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_non_iterable_item (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_not_iterable (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_second_element_of_item_not_a_dict (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_specified_both_fields_and_fieldsets (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_valid_case (modeladmin.test_checks.FieldsetsCheckTests)\", \"test_field_attname (modeladmin.test_checks.RawIdCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.RawIdCheckTests)\", \"test_missing_field (modeladmin.test_checks.RawIdCheckTests)\", \"test_not_iterable (modeladmin.test_checks.RawIdCheckTests)\", \"test_valid_case (modeladmin.test_checks.RawIdCheckTests)\", \"test_duplicate_fields_in_fields (modeladmin.test_checks.FieldsCheckTests)\", \"test_inline (modeladmin.test_checks.FieldsCheckTests)\", \"test_not_boolean (modeladmin.test_checks.SaveAsCheckTests)\", \"test_valid_case (modeladmin.test_checks.SaveAsCheckTests)\", \"test_fieldsets_with_custom_form_validation (modeladmin.test_checks.FormCheckTests)\", \"test_invalid_type (modeladmin.test_checks.FormCheckTests)\", \"test_valid_case (modeladmin.test_checks.FormCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.FilterHorizontalCheckTests)\", \"test_missing_field (modeladmin.test_checks.FilterHorizontalCheckTests)\", \"test_not_iterable (modeladmin.test_checks.FilterHorizontalCheckTests)\", \"test_valid_case (modeladmin.test_checks.FilterHorizontalCheckTests)\", \"test_invalid_type (modeladmin.test_checks.ListSelectRelatedCheckTests)\", \"test_valid_case (modeladmin.test_checks.ListSelectRelatedCheckTests)\", \"test_inline_without_formset_class (modeladmin.test_checks.FormsetCheckTests)\", \"test_invalid_type (modeladmin.test_checks.FormsetCheckTests)\", \"test_valid_case (modeladmin.test_checks.FormsetCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_missing_field (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_related_invalid_field_type (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_related_valid_case (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_valid_case (modeladmin.test_checks.DateHierarchyCheckTests)\", \"test_not_integer (modeladmin.test_checks.MaxNumCheckTests)\", \"test_valid_case (modeladmin.test_checks.MaxNumCheckTests)\", \"test_not_iterable (modeladmin.test_checks.SearchFieldsCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.FilterVerticalCheckTests)\", \"test_missing_field (modeladmin.test_checks.FilterVerticalCheckTests)\", \"test_not_iterable (modeladmin.test_checks.FilterVerticalCheckTests)\", \"test_valid_case (modeladmin.test_checks.FilterVerticalCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_missing_field (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_missing_field_again (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_not_dictionary (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_not_list_or_tuple (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_one_to_one_field (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_valid_case (modeladmin.test_checks.PrepopulatedFieldsCheckTests)\", \"test_autocomplete_e036 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_e037 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_e039 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_e040 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_e38 (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_is_onetoone (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_autocomplete_is_valid (modeladmin.test_checks.AutocompleteFieldsTests)\", \"test_both_list_editable_and_list_display_links (modeladmin.test_checks.ListDisplayEditableTests)\", \"The first item in list_display can be in list_editable as long as\", \"The first item in list_display cannot be in list_editable if\", \"The first item in list_display can be the same as the first in\", \"The first item in list_display cannot be the same as the first item\", \"list_display and list_editable can contain the same values\", \"test_None_is_valid_case (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"list_display_links is checked for list/tuple/None even if\", \"list_display_links check is skipped if get_list_display() is overridden.\", \"test_missing_field (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"test_missing_in_list_display (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"test_not_iterable (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"test_valid_case (modeladmin.test_checks.ListDisplayLinksCheckTests)\", \"test_not_boolean (modeladmin.test_checks.SaveOnTopCheckTests)\", \"test_valid_case (modeladmin.test_checks.SaveOnTopCheckTests)\", \"test_invalid_callable (modeladmin.test_checks.InlinesCheckTests)\", \"test_invalid_model (modeladmin.test_checks.InlinesCheckTests)\", \"test_invalid_model_type (modeladmin.test_checks.InlinesCheckTests)\", \"test_missing_model_field (modeladmin.test_checks.InlinesCheckTests)\", \"test_not_correct_inline_field (modeladmin.test_checks.InlinesCheckTests)\", \"test_not_iterable (modeladmin.test_checks.InlinesCheckTests)\", \"test_not_model_admin (modeladmin.test_checks.InlinesCheckTests)\", \"test_valid_case (modeladmin.test_checks.InlinesCheckTests)\", \"test_missing_field (modeladmin.test_checks.FkNameCheckTests)\", \"test_valid_case (modeladmin.test_checks.FkNameCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_invalid_value (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_missing_field (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_not_dictionary (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_valid_case (modeladmin.test_checks.RadioFieldsCheckTests)\", \"test_callable (modeladmin.test_checks.ListFilterTests)\", \"test_list_filter_is_func (modeladmin.test_checks.ListFilterTests)\", \"test_list_filter_validation (modeladmin.test_checks.ListFilterTests)\", \"test_missing_field (modeladmin.test_checks.ListFilterTests)\", \"test_not_associated_with_field_name (modeladmin.test_checks.ListFilterTests)\", \"test_not_callable (modeladmin.test_checks.ListFilterTests)\", \"test_not_filter (modeladmin.test_checks.ListFilterTests)\", \"test_not_filter_again (modeladmin.test_checks.ListFilterTests)\", \"test_not_filter_again_again (modeladmin.test_checks.ListFilterTests)\", \"test_not_list_filter_class (modeladmin.test_checks.ListFilterTests)\", \"test_valid_case (modeladmin.test_checks.ListFilterTests)\", \"test_invalid_expression (modeladmin.test_checks.OrderingCheckTests)\", \"test_not_iterable (modeladmin.test_checks.OrderingCheckTests)\", \"test_random_marker_not_alone (modeladmin.test_checks.OrderingCheckTests)\", \"test_valid_case (modeladmin.test_checks.OrderingCheckTests)\", \"test_valid_complex_case (modeladmin.test_checks.OrderingCheckTests)\", \"test_valid_expression (modeladmin.test_checks.OrderingCheckTests)\", \"test_valid_random_marker_case (modeladmin.test_checks.OrderingCheckTests)\", \"test_invalid_field_type (modeladmin.test_checks.ListDisplayTests)\", \"test_missing_field (modeladmin.test_checks.ListDisplayTests)\", \"test_not_iterable (modeladmin.test_checks.ListDisplayTests)\", \"test_valid_case (modeladmin.test_checks.ListDisplayTests)\", \"test_valid_field_accessible_via_instance (modeladmin.test_checks.ListDisplayTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.704654",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}