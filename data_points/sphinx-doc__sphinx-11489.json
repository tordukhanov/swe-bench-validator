{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-11489",
  "base_commit": "d15a837c6108ee219d80e956fd6b8f16a833aed2",
  "patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -262,6 +262,8 @@ def __init__(self, config: Config,\n \n         self.anchors_ignore: list[re.Pattern[str]] = list(\n             map(re.compile, config.linkcheck_anchors_ignore))\n+        self.anchors_ignore_for_url: list[re.Pattern[str]] = list(\n+            map(re.compile, config.linkcheck_anchors_ignore_for_url))\n         self.documents_exclude: list[re.Pattern[str]] = list(\n             map(re.compile, config.linkcheck_exclude_documents))\n         self.auth = [(re.compile(pattern), auth_info) for pattern, auth_info\n@@ -359,10 +361,16 @@ def _retrieval_methods(self,\n \n     def _check_uri(self, uri: str, hyperlink: Hyperlink) -> tuple[str, str, int]:\n         req_url, delimiter, anchor = uri.partition('#')\n-        for rex in self.anchors_ignore if delimiter and anchor else []:\n-            if rex.match(anchor):\n-                anchor = ''\n-                break\n+        if delimiter and anchor:\n+            for rex in self.anchors_ignore:\n+                if rex.match(anchor):\n+                    anchor = ''\n+                    break\n+            else:\n+                for rex in self.anchors_ignore_for_url:\n+                    if rex.match(req_url):\n+                        anchor = ''\n+                        break\n \n         # handle non-ASCII URIs\n         try:\n@@ -610,6 +618,7 @@ def setup(app: Sphinx) -> dict[str, Any]:\n     # Anchors starting with ! are ignored since they are\n     # commonly used for dynamic pages\n     app.add_config_value('linkcheck_anchors_ignore', ['^!'], False)\n+    app.add_config_value('linkcheck_anchors_ignore_for_url', (), False, (tuple, list))\n     app.add_config_value('linkcheck_rate_limit_timeout', 300.0, False)\n \n     app.add_event('linkcheck-process-uri')\n",
  "test_patch": "diff --git a/tests/roots/test-linkcheck-anchors-ignore-for-url/conf.py b/tests/roots/test-linkcheck-anchors-ignore-for-url/conf.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-anchors-ignore-for-url/conf.py\n@@ -0,0 +1,3 @@\n+exclude_patterns = ['_build']\n+linkcheck_anchors = True\n+linkcheck_timeout = 0.05\ndiff --git a/tests/roots/test-linkcheck-anchors-ignore-for-url/index.rst b/tests/roots/test-linkcheck-anchors-ignore-for-url/index.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-anchors-ignore-for-url/index.rst\n@@ -0,0 +1,7 @@\n+* `Example valid url, no anchor <http://localhost:7777/valid>`_\n+* `Example valid url, valid anchor <http://localhost:7777/valid#valid-anchor>`_\n+* `Example valid url, invalid anchor <http://localhost:7777/valid#invalid-anchor>`_\n+* `Example ignored url, no anchor <http://localhost:7777/ignored>`_\n+* `Example ignored url, invalid anchor <http://localhost:7777/ignored#invalid-anchor>`_\n+* `Example invalid url, no anchor <http://localhost:7777/invalid>`_\n+* `Example invalid url, invalid anchor <http://localhost:7777/invalid#anchor>`_\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -232,6 +232,64 @@ def test_anchors_ignored(app):\n     assert not content\n \n \n+class AnchorsIgnoreForUrlHandler(http.server.BaseHTTPRequestHandler):\n+    def do_HEAD(self):\n+        if self.path in {'/valid', '/ignored'}:\n+            self.send_response(200, \"OK\")\n+        else:\n+            self.send_response(404, \"Not Found\")\n+        self.end_headers()\n+\n+    def do_GET(self):\n+        self.do_HEAD()\n+        if self.path == '/valid':\n+            self.wfile.write(b\"<h1 id='valid-anchor'>valid anchor</h1>\\n\")\n+        elif self.path == '/ignored':\n+            self.wfile.write(b\"no anchor but page exists\\n\")\n+\n+\n+@pytest.mark.sphinx(\n+    'linkcheck', testroot='linkcheck-anchors-ignore-for-url', freshenv=True,\n+    confoverrides={'linkcheck_anchors_ignore_for_url': [\n+        'http://localhost:7777/ignored',  # existing page\n+        'http://localhost:7777/invalid',  # unknown page\n+    ]})\n+def test_anchors_ignored_for_url(app):\n+    with http_server(AnchorsIgnoreForUrlHandler):\n+        app.build()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.json').read_text(encoding='utf8')\n+\n+    attrs = ('filename', 'lineno', 'status', 'code', 'uri', 'info')\n+    data = [json.loads(x) for x in content.splitlines()]\n+    assert len(data) == 7\n+    assert all(all(attr in row for attr in attrs) for row in data)\n+\n+    # rows may be unsorted due to network latency or\n+    # the order the threads are processing the links\n+    rows = {r['uri']: {'status': r['status'], 'info': r['info']} for r in data}\n+\n+    assert rows['http://localhost:7777/valid']['status'] == 'working'\n+    assert rows['http://localhost:7777/valid#valid-anchor']['status'] == 'working'\n+    assert rows['http://localhost:7777/valid#invalid-anchor'] == {\n+        'status': 'broken',\n+        'info': \"Anchor 'invalid-anchor' not found\",\n+    }\n+\n+    assert rows['http://localhost:7777/ignored']['status'] == 'working'\n+    assert rows['http://localhost:7777/ignored#invalid-anchor']['status'] == 'working'\n+\n+    assert rows['http://localhost:7777/invalid'] == {\n+        'status': 'broken',\n+        'info': '404 Client Error: Not Found for url: http://localhost:7777/invalid',\n+    }\n+    assert rows['http://localhost:7777/invalid#anchor'] == {\n+        'status': 'broken',\n+        'info': '404 Client Error: Not Found for url: http://localhost:7777/invalid',\n+    }\n+\n+\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver-anchor', freshenv=True)\n def test_raises_for_invalid_status(app):\n     class InternalServerErrorHandler(http.server.BaseHTTPRequestHandler):\n",
  "problem_statement": "Allow disabling linkcheck anchor checks for specific URLs\n**Is your feature request related to a problem? Please describe.**\r\nIt appears GitHub has made the Markdown renderer/file viewer require JavaScript which breaks linkcheck anchor checks. \r\n\r\n**Describe the solution you'd like**\r\n\r\nA config which disables the linkcheck anchors check based on a regex of the entire URL would allow for cases like these to be handled while still validating whether the page itself exists and keep anchor checks enabled for others.\r\n\r\n```python\r\nlinkcheck_anchors_disabled = [\r\n   # Requires JavaScript\r\n   r'https://github.com'\r\n]\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\n\r\nThis is what [the page](https://github.com/NixOS/nix.dev/blob/master/CONTRIBUTING.md#user-content-vision) looks like without JavaScript enabled:\r\n\r\n<img width=\"1007\" alt=\"Capture d’écran 2023-07-07 à 17 00 57\" src=\"https://github.com/sphinx-doc/sphinx/assets/18437312/bed935cb-f044-4cae-9f73-6bba242a3bd8\">\r\n\r\n- Related issue: https://github.com/NixOS/nix.dev/issues/631\r\n\n",
  "hints_text": "@yukiisbored Just to be clear, if the url is\r\n\r\n- `https://github.com/org/repo#anchor`, or\r\n- `https://github.com/org/repo/blob/main/file.ext#anchor`,\r\n\r\nyou want `linkcheck` to only check that `https://github.com/org/repo` and `https://github.com/org/repo/blob/main/file.ext` exist **without** checking the anchors in the README or in `file.ext` respectively ? \n@picnixz yup, that is correct.",
  "created_at": "2023-07-16T12:13:26Z",
  "version": "7.1",
  "FAIL_TO_PASS": "[\"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header\"]",
  "PASS_TO_PASS": "[\"tests/test_build_linkcheck.py::test_defaults\", \"tests/test_build_linkcheck.py::test_too_many_retries\", \"tests/test_build_linkcheck.py::test_raw_node\", \"tests/test_build_linkcheck.py::test_anchors_ignored\", \"tests/test_build_linkcheck.py::test_anchors_ignored_for_url\", \"tests/test_build_linkcheck.py::test_raises_for_invalid_status\", \"tests/test_build_linkcheck.py::test_auth_header_uses_first_match\", \"tests/test_build_linkcheck.py::test_auth_header_no_match\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_default\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_GET\", \"tests/test_build_linkcheck.py::test_linkcheck_allowed_redirects\", \"tests/test_build_linkcheck.py::test_invalid_ssl\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file\", \"tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date\", \"tests/test_build_linkcheck.py::test_too_many_requests_user_timeout\", \"tests/test_build_linkcheck.py::test_limit_rate_default_sleep\", \"tests/test_build_linkcheck.py::test_limit_rate_user_max_delay\", \"tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time\", \"tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time\", \"tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time\", \"tests/test_build_linkcheck.py::test_connection_contention\", \"tests/test_build_linkcheck.py::test_get_after_head_raises_connection_error\", \"tests/test_build_linkcheck.py::test_linkcheck_exclude_documents\"]",
  "environment_setup_commit": "89808c6f49e1738765d18309244dca0156ee28f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.037511",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}