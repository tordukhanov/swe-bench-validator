{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-22991",
  "base_commit": "953790680ac667adb869e1f1cba2f2b534cc6f0b",
  "patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -59,7 +59,7 @@\n from matplotlib import cbook\n from matplotlib import _docstring\n from matplotlib.backend_bases import FigureCanvasBase, MouseButton\n-from matplotlib.figure import Figure, figaspect\n+from matplotlib.figure import Figure, FigureBase, figaspect\n from matplotlib.gridspec import GridSpec, SubplotSpec\n from matplotlib import rcParams, rcParamsDefault, get_backend, rcParamsOrig\n from matplotlib.rcsetup import interactive_bk as _interactive_bk\n@@ -690,7 +690,7 @@ def figure(num=None,  # autoincrement if None, else integer from 1-N\n \n     Parameters\n     ----------\n-    num : int or str or `.Figure`, optional\n+    num : int or str or `.Figure` or `.SubFigure`, optional\n         A unique identifier for the figure.\n \n         If a figure with that identifier already exists, this figure is made\n@@ -702,7 +702,8 @@ def figure(num=None,  # autoincrement if None, else integer from 1-N\n         will be used for the ``Figure.number`` attribute, otherwise, an\n         auto-generated integer value is used (starting at 1 and incremented\n         for each new figure). If *num* is a string, the figure label and the\n-        window title is set to this value.\n+        window title is set to this value.  If num is a ``SubFigure``, its\n+        parent ``Figure`` is activated.\n \n     figsize : (float, float), default: :rc:`figure.figsize`\n         Width, height in inches.\n@@ -753,11 +754,11 @@ def figure(num=None,  # autoincrement if None, else integer from 1-N\n     `~matplotlib.rcParams` defines the default values, which can be modified\n     in the matplotlibrc file.\n     \"\"\"\n-    if isinstance(num, Figure):\n+    if isinstance(num, FigureBase):\n         if num.canvas.manager is None:\n             raise ValueError(\"The passed figure is not managed by pyplot\")\n         _pylab_helpers.Gcf.set_active(num.canvas.manager)\n-        return num\n+        return num.figure\n \n     allnums = get_fignums()\n     next_num = max(allnums) + 1 if allnums else 1\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_pyplot.py b/lib/matplotlib/tests/test_pyplot.py\n--- a/lib/matplotlib/tests/test_pyplot.py\n+++ b/lib/matplotlib/tests/test_pyplot.py\n@@ -343,3 +343,27 @@ def test_fallback_position():\n     axtest = plt.axes([0.2, 0.2, 0.5, 0.5], position=[0.1, 0.1, 0.8, 0.8])\n     np.testing.assert_allclose(axtest.bbox.get_points(),\n                                axref.bbox.get_points())\n+\n+\n+def test_set_current_figure_via_subfigure():\n+    fig1 = plt.figure()\n+    subfigs = fig1.subfigures(2)\n+\n+    plt.figure()\n+    assert plt.gcf() != fig1\n+\n+    current = plt.figure(subfigs[1])\n+    assert plt.gcf() == fig1\n+    assert current == fig1\n+\n+\n+def test_set_current_axes_on_subfigure():\n+    fig = plt.figure()\n+    subfigs = fig.subfigures(2)\n+\n+    ax = subfigs[0].subplots(1, squeeze=True)\n+    subfigs[1].subplots(1, squeeze=True)\n+\n+    assert plt.gca() != ax\n+    plt.sca(ax)\n+    assert plt.gca() == ax\n",
  "problem_statement": "[Bug]: Can't use `plt.sca()` on axes created using subfigures\n### Bug summary\n\nUsing `plt.sca()` on an axes created using subfigures result in an error.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure()\r\nsubfigs = fig.subfigures(2, 1)\r\n\r\naxarr = subfigs[0].subplots(2, 2)\r\n\r\nplt.sca(axarr[0, 0])\n```\n\n\n### Actual outcome\n\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/me/.local/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 1085, in sca\r\n    figure(ax.figure)\r\n  File \"/home/me/.local/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 773, in figure\r\n    num = int(num)  # crude validation of num argument\r\nTypeError: int() argument must be a string, a bytes-like object or a number, not 'SubFigure'\r\n```\r\n\n\n### Expected outcome\n\nIt should set the given ax as the current axe, as done by the code below:\r\n```\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, axarr = plt.subplots(2, 2)\r\n\r\nplt.sca(axarr[0, 0])\r\n```\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUBuntu 20.04\n\n### Matplotlib Version\n\n3.5.1\n\n### Matplotlib Backend\n\nQtAgg\n\n### Python version\n\n3.8.10\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n",
  "hints_text": "The fix for this is likely to relax the type checking in `plt.figure` to accept `FigureBase` and to make sure that top level `Figure` is still the one set as the current figure.\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/89b21b517df0b2a9c378913bae8e1f184988b554/lib/matplotlib/pyplot.py#L755-L759 is the first place that needs to be updated to detect a `SubFigure` and try to make the top most `Figure` active (remember they can be deeply nested).\r\n\r\nOnce that is fixed there may need to be some additional work in https://github.com/matplotlib/matplotlib/blob/89b21b517df0b2a9c378913bae8e1f184988b554/lib/matplotlib/figure.py#L1506-L1510 but that looks correct to me.\r\n\r\n\r\nTasks \r\n - fix `plt.figure` to deal with being passed a `SubFigure`\r\n - verify that `Figure.sca` works as expected on nested axes\r\n - add a test\nMe and my colleague are going to try it!",
  "created_at": "2022-05-06T12:35:45Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_pyplot.py::test_set_current_figure_via_subfigure\", \"lib/matplotlib/tests/test_pyplot.py::test_set_current_axes_on_subfigure\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_pyplot.py::test_pyplot_up_to_date\", \"lib/matplotlib/tests/test_pyplot.py::test_copy_docstring_and_deprecators\", \"lib/matplotlib/tests/test_pyplot.py::test_pyplot_box\", \"lib/matplotlib/tests/test_pyplot.py::test_stackplot_smoke\", \"lib/matplotlib/tests/test_pyplot.py::test_nrows_error\", \"lib/matplotlib/tests/test_pyplot.py::test_ioff\", \"lib/matplotlib/tests/test_pyplot.py::test_ion\", \"lib/matplotlib/tests/test_pyplot.py::test_nested_ion_ioff\", \"lib/matplotlib/tests/test_pyplot.py::test_close\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_reuse\", \"lib/matplotlib/tests/test_pyplot.py::test_axes_kwargs\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_replace_projection\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_kwarg_collision\", \"lib/matplotlib/tests/test_pyplot.py::test_gca_kwargs\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_projection_reuse\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_polar_normalization\", \"lib/matplotlib/tests/test_pyplot.py::test_subplot_change_projection\", \"lib/matplotlib/tests/test_pyplot.py::test_polar_second_call\", \"lib/matplotlib/tests/test_pyplot.py::test_fallback_position\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.797766",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}