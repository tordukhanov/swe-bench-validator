{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13068",
  "base_commit": "2288ecd4e9c4d3722d72b7f4a6555a34f4f04fc7",
  "patch": "diff --git a/astropy/time/core.py b/astropy/time/core.py\n--- a/astropy/time/core.py\n+++ b/astropy/time/core.py\n@@ -655,9 +655,6 @@ def precision(self):\n     @precision.setter\n     def precision(self, val):\n         del self.cache\n-        if not isinstance(val, int) or val < 0 or val > 9:\n-            raise ValueError('precision attribute must be an int between '\n-                             '0 and 9')\n         self._time.precision = val\n \n     @property\ndiff --git a/astropy/time/formats.py b/astropy/time/formats.py\n--- a/astropy/time/formats.py\n+++ b/astropy/time/formats.py\n@@ -230,6 +230,18 @@ def masked(self):\n     def jd2_filled(self):\n         return np.nan_to_num(self.jd2) if self.masked else self.jd2\n \n+    @property\n+    def precision(self):\n+        return self._precision\n+\n+    @precision.setter\n+    def precision(self, val):\n+        #Verify precision is 0-9 (inclusive)\n+        if not isinstance(val, int) or val < 0 or val > 9:\n+            raise ValueError('precision attribute must be an int between '\n+                             '0 and 9')\n+        self._precision = val\n+\n     @lazyproperty\n     def cache(self):\n         \"\"\"\n",
  "test_patch": "diff --git a/astropy/time/tests/test_basic.py b/astropy/time/tests/test_basic.py\n--- a/astropy/time/tests/test_basic.py\n+++ b/astropy/time/tests/test_basic.py\n@@ -259,6 +259,20 @@ def test_precision(self):\n         assert t.iso == '2010-01-01 00:00:00.000000000'\n         assert t.tai.utc.iso == '2010-01-01 00:00:00.000000000'\n \n+    def test_precision_input(self):\n+        \"\"\"Verifies that precision can only be 0-9 (inclusive). Any other\n+        value should raise a ValueError exception.\"\"\"\n+\n+        err_message = 'precision attribute must be an int'\n+\n+        with pytest.raises(ValueError, match=err_message):\n+            t = Time('2010-01-01 00:00:00', format='iso', scale='utc',\n+                     precision=10)\n+\n+        with pytest.raises(ValueError, match=err_message):\n+            t = Time('2010-01-01 00:00:00', format='iso', scale='utc')\n+            t.precision = -1\n+\n     def test_transforms(self):\n         \"\"\"Transform from UTC to all supported time scales (TAI, TCB, TCG,\n         TDB, TT, UT1, UTC).  This requires auxiliary information (latitude and\n",
  "problem_statement": "Time from astropy.time not precise\nHello,\r\n\r\nI encounter difficulties with Time. I'm working on a package to perform photometry and occultation. \r\n\r\nFor this last case, data need times values accurately estimated. Of course, data coming from different camera will will have different time format in the header.\r\n\r\nto manage this without passing long time to build a time parser, i decided to use Time object which do exactly what i need. The problem is, i dont arrive to make accurate conversion between different format using Time.\r\n\r\nlet's do an exemple:\r\n\r\n```\r\nt1 = '2022-03-24T23:13:41.390999'\r\nt1 = Time(t1, format = 'isot', precision = len(t1.split('.')[-1]))\r\nt2 = t1.to_value('jd')\r\n# result is 2459663.4678401737\r\n```\r\nnow let's do reverse\r\n\r\n```\r\nt2 = Time(t2, format = 'jd', precision = len(str(t2).split('.')[-1]))\r\nt3 = t2.to_value('isot')\r\n# result is 2022-03-24T23:13:41.0551352177\r\n```\r\nas you can see i don't fall back on the same value and the difference is quite high. I would like to fall back on the original one.\r\n\r\nthank you in advance\r\n\n",
  "hints_text": "Welcome to Astropy ðŸ‘‹ and thank you for your first issue!\n\nA project member will respond to you as soon as possible; in the meantime, please double-check the [guidelines for submitting issues](https://github.com/astropy/astropy/blob/main/CONTRIBUTING.md#reporting-issues) and make sure you've provided the requested details.\n\nGitHub issues in the Astropy repository are used to track bug reports and feature requests; If your issue poses a question about how to use Astropy, please instead raise your question in the [Astropy Discourse user forum](https://community.openastronomy.org/c/astropy/8) and close this issue.\n\nIf you feel that this issue has not been responded to in a timely manner, please leave a comment mentioning our software support engineer @embray, or send a message directly to the [development mailing list](http://groups.google.com/group/astropy-dev).  If the issue is urgent or sensitive in nature (e.g., a security vulnerability) please send an e-mail directly to the private e-mail feedback@astropy.org.\n@mhvk will have the answer I guess, but it seems the issue comes from the use of `precision`, which probably does not do what you expect. And should be <= 9 :\r\n\r\n> precision: int between 0 and 9 inclusive\r\n    Decimal precision when outputting seconds as floating point.\r\n\r\nThe interesting thing is that when precision is > 9 the results are incorrect:\r\n\r\n```\r\nIn [52]: for p in range(15):\r\n    ...:     print(f'{p:2d}', Time(t2, format = 'jd', precision = p).to_value('isot'))\r\n    ...: \r\n 0 2022-03-24T23:13:41\r\n 1 2022-03-24T23:13:41.4\r\n 2 2022-03-24T23:13:41.39\r\n 3 2022-03-24T23:13:41.391\r\n 4 2022-03-24T23:13:41.3910\r\n 5 2022-03-24T23:13:41.39101\r\n 6 2022-03-24T23:13:41.391012\r\n 7 2022-03-24T23:13:41.3910118\r\n 8 2022-03-24T23:13:41.39101177\r\n 9 2022-03-24T23:13:41.391011775\r\n10 2022-03-24T23:13:41.0551352177\r\n11 2022-03-24T23:13:41.00475373422\r\n12 2022-03-24T23:13:41.-00284414132\r\n13 2022-03-24T23:13:41.0000514624247\r\n14 2022-03-24T23:13:41.00000108094123\r\n```\r\n\r\nTo get a better precision you can use `.to_value('jd', 'long')`: (and the weird results with `precision > 9` remain)\r\n\r\n```\r\nIn [53]: t2 = t1.to_value('jd', 'long'); t2\r\nOut[53]: 2459663.4678401735996\r\n\r\nIn [54]: for p in range(15):\r\n    ...:     print(f'{p:2d}', Time(t2, format = 'jd', precision = p).to_value('isot'))\r\n    ...: \r\n 0 2022-03-24T23:13:41\r\n 1 2022-03-24T23:13:41.4\r\n 2 2022-03-24T23:13:41.39\r\n 3 2022-03-24T23:13:41.391\r\n 4 2022-03-24T23:13:41.3910\r\n 5 2022-03-24T23:13:41.39100\r\n 6 2022-03-24T23:13:41.390999\r\n 7 2022-03-24T23:13:41.3909990\r\n 8 2022-03-24T23:13:41.39099901\r\n 9 2022-03-24T23:13:41.390999005\r\n10 2022-03-24T23:13:41.0551334172\r\n11 2022-03-24T23:13:41.00475357898\r\n12 2022-03-24T23:13:41.-00284404844\r\n13 2022-03-24T23:13:41.0000514607441\r\n14 2022-03-24T23:13:41.00000108090593\r\n```\n`astropy.time.Time` uses two float 64 to obtain very high precision, from the docs:\r\n\r\n> All time manipulations and arithmetic operations are done internally using two 64-bit floats to represent time. Floating point algorithms from [1](https://docs.astropy.org/en/stable/time/index.html#id2) are used so that the [Time](https://docs.astropy.org/en/stable/api/astropy.time.Time.html#astropy.time.Time) object maintains sub-nanosecond precision over times spanning the age of the universe.\r\n\r\nhttps://docs.astropy.org/en/stable/time/index.html\r\n\r\nBy doing `t1.to_value('jd')` you combine the two floats into a single float, loosing precision. However, the difference should not be 2 seconds, rather in the microsecond range.\r\n\r\nWhen I leave out the precision argument or setting it to 9 for nanosecond precision, I get a difference of 12Âµs when going through the single jd float, which is expected:\r\n\r\n```\r\nfrom astropy.time import Time\r\nimport astropy.units as u\r\n\r\n\r\nisot = '2022-03-24T23:13:41.390999'\r\n\r\nt1 = Time(isot, format = 'isot', precision=9)\r\njd = t1.to_value('jd')\r\nt2 = Time(jd, format='jd', precision=9)\r\n\r\nprint(f\"Original:       {t1.isot}\")\r\nprint(f\"Converted back: {t2.isot}\")\r\nprint(f\"Difference:     {(t2 - t1).to(u.us):.2f}\")\r\n\r\nt3 = Time(t1.jd1, t1.jd2, format='jd', precision=9)\r\nprint(f\"Using jd1+jd2:  {t3.isot}\")\r\nprint(f\"Difference:     {(t3 - t1).to(u.ns):.2f}\")\r\n```\r\n\r\nprints:\r\n\r\n```\r\nOriginal:       2022-03-24T23:13:41.390999000\r\nConverted back: 2022-03-24T23:13:41.391011775\r\nDifference:     12.77 us\r\nUsing jd1+jd2:  2022-03-24T23:13:41.390999000\r\nDifference:     0.00 ns\r\n```\nThank you for your answers.\r\n\r\ndo they are a way to have access to this two floats? if i use jd tranformation it's because it's more easy for me to manipulate numbers. \n@antoinech13 See my example, it accesses `t1.jd1` and `t1.jd2`.\noh yes thank you.\nProbably we should keep this open to address the issue with precsion > 9 that @saimn found?\nsorry. yes indeed\nHello, I'm not familiar with this repository, but from my quick skimming it seems that using a precision outside of the range 0-9 (inclusive) is intended to trigger an exception. (see [here](https://github.com/astropy/astropy/blob/main/astropy/time/core.py#L610-L611), note that this line is part of the `TimeBase` class which `Time` inherits from). Though someone more familiar with the repository can correct me if I'm wrong.\r\n\r\nEdit:\r\nIt seems the exception was only written for the setter and not for the case where `Time()` is initialized with the precision. Thus:\r\n```\r\n>>> from astropy.time import Time\r\n>>> t1 = Time(123, fromat=\"jd\")\r\n>>> t1.precision = 10\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/brett/env/lib/python3.8/site-packages/astropy/time/core.py\", line 610, in precision\r\n    raise ValueError('precision attribute must be an int between '\r\nValueError: precision attribute must be an int between 0 and 9\r\n```\r\nproduces the exception, but \r\n```\r\n>>> t2 = Time(123, format=\"jd\", precision=10)\r\n>>> \r\n```\r\ndoes not.\r\n\n@saimn - good catch on the precision issue, this is not expected but seems to be the cause of the original problem.\r\n\r\nThis precision is just being passed straight through to ERFA, which clearly is not doing any validation on that value. It looks like giving a value > 9 actually causes a bug in the output, yikes.\nFYI @antoinech13 - the `precision` argument only impacts the precision of the seconds output in string formats like `isot`. So setting the precision for a `jd` format `Time` object is generally not necessary.\n@taldcroft - I looked and indeed there is no specific check in https://github.com/liberfa/erfa/blob/master/src/d2tf.c, though the comment notes:\r\n```\r\n**  2) The largest positive useful value for ndp is determined by the\r\n**     size of days, the format of double on the target platform, and\r\n**     the risk of overflowing ihmsf[3].  On a typical platform, for\r\n**     days up to 1.0, the available floating-point precision might\r\n**     correspond to ndp=12.  However, the practical limit is typically\r\n**     ndp=9, set by the capacity of a 32-bit int, or ndp=4 if int is\r\n**     only 16 bits.\r\n```\r\nThis is actually a bit misleading, since the fraction of the second is stored in a 32-bit int, so it cannot possibly store more than 9 digits. Indeed,\r\n```\r\nIn [31]: from erfa import d2tf\r\n\r\nIn [32]: d2tf(9, 1-2**-47)\r\nOut[32]: (b'+', (23, 59, 59, 999999999))\r\n\r\nIn [33]: d2tf(10, 1-2**-47)\r\nOut[33]: (b'+', (23, 59, 59, 1410065407))\r\n\r\nIn [34]: np.int32('9'*10)\r\nOut[34]: 1410065407\r\n\r\nIn [36]: np.int32('9'*9)\r\nOut[36]: 999999999\r\n```\nAs for how to fix this, right now we do check `precision` as a property, but not on input:\r\n```\r\nIn [42]: t = Time('J2000')\r\n\r\nIn [43]: t = Time('J2000', precision=10)\r\n\r\nIn [44]: t.precision\r\nOut[44]: 10\r\n\r\nIn [45]: t.precision = 10\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-45-59f84a57d617> in <module>\r\n----> 1 t.precision = 10\r\n\r\n/usr/lib/python3/dist-packages/astropy/time/core.py in precision(self, val)\r\n    608         del self.cache\r\n    609         if not isinstance(val, int) or val < 0 or val > 9:\r\n--> 610             raise ValueError('precision attribute must be an int between '\r\n    611                              '0 and 9')\r\n    612         self._time.precision = val\r\n\r\nValueError: precision attribute must be an int between 0 and 9\r\n```\r\nSeems reasonable to check on input as well.",
  "created_at": "2022-04-05T19:35:35Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/time/tests/test_basic.py::TestBasic::test_precision_input\"]",
  "PASS_TO_PASS": "[\"astropy/time/tests/test_basic.py::TestBasic::test_different_dimensions\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jd]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[mjd]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[decimalyear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[unix]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[unix_tai]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[cxcsec]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[gps]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[plot_date]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[stardate]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[datetime]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[ymdhms]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[iso]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[isot]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[yday]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[datetime64]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[fits]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[byear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jyear]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[byear_str]\", \"astropy/time/tests/test_basic.py::TestBasic::test_empty_value[jyear_str]\", \"astropy/time/tests/test_basic.py::TestBasic::test_copy_time[2455197.5]\", \"astropy/time/tests/test_basic.py::TestBasic::test_copy_time[value1]\", \"astropy/time/tests/test_basic.py::TestBasic::test_getitem\", \"astropy/time/tests/test_basic.py::TestBasic::test_properties\", \"astropy/time/tests/test_basic.py::TestBasic::test_precision\", \"astropy/time/tests/test_basic.py::TestBasic::test_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_transforms_no_location\", \"astropy/time/tests/test_basic.py::TestBasic::test_location\", \"astropy/time/tests/test_basic.py::TestBasic::test_location_array\", \"astropy/time/tests/test_basic.py::TestBasic::test_all_scale_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_creating_all_formats\", \"astropy/time/tests/test_basic.py::TestBasic::test_local_format_transforms\", \"astropy/time/tests/test_basic.py::TestBasic::test_datetime\", \"astropy/time/tests/test_basic.py::TestBasic::test_datetime64\", \"astropy/time/tests/test_basic.py::TestBasic::test_epoch_transform\", \"astropy/time/tests/test_basic.py::TestBasic::test_input_validation\", \"astropy/time/tests/test_basic.py::TestBasic::test_utc_leap_sec\", \"astropy/time/tests/test_basic.py::TestBasic::test_init_from_time_objects\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d0]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d1]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d2]\", \"astropy/time/tests/test_basic.py::TestVal2::test_unused_val2_raises[d3]\", \"astropy/time/tests/test_basic.py::TestVal2::test_val2\", \"astropy/time/tests/test_basic.py::TestVal2::test_val_broadcasts_against_val2\", \"astropy/time/tests/test_basic.py::TestVal2::test_broadcast_not_writable\", \"astropy/time/tests/test_basic.py::TestVal2::test_broadcast_one_not_writable\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_input_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_input_subformat_fail\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_bad_input_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_output_subformat\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_fits_format\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_yday_format\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_scale_input\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_fits_scale\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_scale_default\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_epoch_times\", \"astropy/time/tests/test_basic.py::TestSubFormat::test_plot_date\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_example\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_longdouble\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_longdouble_one_val\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[mjd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[unix]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_longdouble_for_other_types[cxcsec]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_input\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_output[str]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_subformat_output[bytes]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[jd-2451544.5333981-2451544.5-0.0333981]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[decimalyear-2000.54321-2000.0-0.54321]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[cxcsec-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[unix-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[gps-100.0123456-100.0123456-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[byear-1950.1-1950.1-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_explicit_string_other_formats[jyear-2000.1-2000.1-None]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_basic_subformat_setting\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_basic_subformat_cache_does_not_crash\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[jd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[mjd]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[cxcsec]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[unix]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[gps]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_does_not_affect_string[jyear]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_decimal_context_caching\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-long-longdouble]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-decimal-Decimal]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_timedelta_basic[sec-str-str]\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_need_format_argument\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_wrong_in_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_wrong_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_not_allowed_subfmt\", \"astropy/time/tests/test_basic.py::TestNumericalSubFormat::test_switch_to_format_with_no_out_subfmt\", \"astropy/time/tests/test_basic.py::TestSofaErrors::test_bad_time\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_immutable_input\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_replicate\", \"astropy/time/tests/test_basic.py::TestCopyReplicate::test_copy\", \"astropy/time/tests/test_basic.py::TestStardate::test_iso_to_stardate\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates0]\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates1]\", \"astropy/time/tests/test_basic.py::TestStardate::test_stardate_to_iso[dates2]\", \"astropy/time/tests/test_basic.py::test_python_builtin_copy\", \"astropy/time/tests/test_basic.py::test_now\", \"astropy/time/tests/test_basic.py::test_decimalyear\", \"astropy/time/tests/test_basic.py::test_fits_year0\", \"astropy/time/tests/test_basic.py::test_fits_year10000\", \"astropy/time/tests/test_basic.py::test_dir\", \"astropy/time/tests/test_basic.py::test_time_from_epoch_jds\", \"astropy/time/tests/test_basic.py::test_bool\", \"astropy/time/tests/test_basic.py::test_len_size\", \"astropy/time/tests/test_basic.py::test_TimeFormat_scale\", \"astropy/time/tests/test_basic.py::test_byteorder\", \"astropy/time/tests/test_basic.py::test_datetime_tzinfo\", \"astropy/time/tests/test_basic.py::test_subfmts_regex\", \"astropy/time/tests/test_basic.py::test_set_format_basic\", \"astropy/time/tests/test_basic.py::test_unix_tai_format\", \"astropy/time/tests/test_basic.py::test_set_format_shares_subfmt\", \"astropy/time/tests/test_basic.py::test_set_format_does_not_share_subfmt\", \"astropy/time/tests/test_basic.py::test_replicate_value_error\", \"astropy/time/tests/test_basic.py::test_remove_astropy_time\", \"astropy/time/tests/test_basic.py::test_isiterable\", \"astropy/time/tests/test_basic.py::test_to_datetime\", \"astropy/time/tests/test_basic.py::test_cache\", \"astropy/time/tests/test_basic.py::test_epoch_date_jd_is_day_fraction\", \"astropy/time/tests/test_basic.py::test_sum_is_equivalent\", \"astropy/time/tests/test_basic.py::test_string_valued_columns\", \"astropy/time/tests/test_basic.py::test_bytes_input\", \"astropy/time/tests/test_basic.py::test_writeable_flag\", \"astropy/time/tests/test_basic.py::test_setitem_location\", \"astropy/time/tests/test_basic.py::test_setitem_from_python_objects\", \"astropy/time/tests/test_basic.py::test_setitem_from_time_objects\", \"astropy/time/tests/test_basic.py::test_setitem_bad_item\", \"astropy/time/tests/test_basic.py::test_setitem_deltas\", \"astropy/time/tests/test_basic.py::test_subclass\", \"astropy/time/tests/test_basic.py::test_strftime_scalar\", \"astropy/time/tests/test_basic.py::test_strftime_array\", \"astropy/time/tests/test_basic.py::test_strftime_array_2\", \"astropy/time/tests/test_basic.py::test_strftime_leapsecond\", \"astropy/time/tests/test_basic.py::test_strptime_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_array\", \"astropy/time/tests/test_basic.py::test_strptime_badinput\", \"astropy/time/tests/test_basic.py::test_strptime_input_bytes_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_input_bytes_array\", \"astropy/time/tests/test_basic.py::test_strptime_leapsecond\", \"astropy/time/tests/test_basic.py::test_strptime_3_digit_year\", \"astropy/time/tests/test_basic.py::test_strptime_fracsec_scalar\", \"astropy/time/tests/test_basic.py::test_strptime_fracsec_array\", \"astropy/time/tests/test_basic.py::test_strftime_scalar_fracsec\", \"astropy/time/tests/test_basic.py::test_strftime_scalar_fracsec_precision\", \"astropy/time/tests/test_basic.py::test_strftime_array_fracsec\", \"astropy/time/tests/test_basic.py::test_insert_time\", \"astropy/time/tests/test_basic.py::test_insert_exceptions\", \"astropy/time/tests/test_basic.py::test_datetime64_no_format\", \"astropy/time/tests/test_basic.py::test_hash_time\", \"astropy/time/tests/test_basic.py::test_hash_time_delta\", \"astropy/time/tests/test_basic.py::test_get_time_fmt_exception_messages\", \"astropy/time/tests/test_basic.py::test_ymdhms_defaults\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs0-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[False-kwargs1-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs0-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-tm_input0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-tm_input1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_table_like[True-kwargs1-recarray]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_array\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_scalar[kwargs0]\", \"astropy/time/tests/test_basic.py::test_ymdhms_init_from_dict_scalar[kwargs1]\", \"astropy/time/tests/test_basic.py::test_ymdhms_exceptions\", \"astropy/time/tests/test_basic.py::test_ymdhms_masked\", \"astropy/time/tests/test_basic.py::test_ymdhms_output\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[mjd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[decimalyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[unix]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[unix_tai]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[cxcsec]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[gps]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[plot_date]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[stardate]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[datetime]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[ymdhms]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[iso]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[isot]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[yday]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[datetime64]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[fits]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[byear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[byear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_ecsv[jyear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[mjd]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[decimalyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[unix]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[unix_tai]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[cxcsec]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[gps]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[plot_date]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[stardate]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[datetime]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[ymdhms]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[iso]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[isot]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[yday]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[datetime64]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[fits]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[byear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jyear]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[byear_str]\", \"astropy/time/tests/test_basic.py::test_write_every_format_to_fits[jyear_str]\", \"astropy/time/tests/test_basic.py::test_broadcasting_writeable\", \"astropy/time/tests/test_basic.py::test_format_subformat_compatibility\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jd-TimeJD]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[mjd-TimeMJD]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[decimalyear-TimeDecimalYear]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[unix-TimeUnix]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[unix_tai-TimeUnixTai]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[cxcsec-TimeCxcSec]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[gps-TimeGPS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[plot_date-TimePlotDate]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[stardate-TimeStardate]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[datetime-TimeDatetime]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[ymdhms-TimeYMDHMS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[iso-TimeISO]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[isot-TimeISOT]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[yday-TimeYearDayTime]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[datetime64-TimeDatetime64]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[fits-TimeFITS]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[byear-TimeBesselianEpoch]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jyear-TimeJulianEpoch]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[byear_str-TimeBesselianEpochString]\", \"astropy/time/tests/test_basic.py::test_to_value_with_subfmt_for_every_format[jyear_str-TimeJulianEpochString]\", \"astropy/time/tests/test_basic.py::test_location_init[None]\", \"astropy/time/tests/test_basic.py::test_location_init[location1]\", \"astropy/time/tests/test_basic.py::test_location_init_fail\", \"astropy/time/tests/test_basic.py::test_linspace\", \"astropy/time/tests/test_basic.py::test_linspace_steps\", \"astropy/time/tests/test_basic.py::test_linspace_fmts\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.524744",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}