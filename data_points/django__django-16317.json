{
  "repo": "django/django",
  "instance_id": "django__django-16317",
  "base_commit": "744a1af7f943106e30d538e6ace55c2c66ccd791",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -732,11 +732,8 @@ def _check_bulk_create_options(\n                     \"update_fields.\"\n                 )\n             if unique_fields:\n-                # Primary key is allowed in unique_fields.\n                 unique_fields = [\n-                    self.model._meta.get_field(name)\n-                    for name in unique_fields\n-                    if name != \"pk\"\n+                    self.model._meta.get_field(name) for name in unique_fields\n                 ]\n                 if any(not f.concrete or f.many_to_many for f in unique_fields):\n                     raise ValueError(\n@@ -785,6 +782,12 @@ def bulk_create(\n                 raise ValueError(\"Can't bulk create a multi-table inherited model\")\n         if not objs:\n             return objs\n+        opts = self.model._meta\n+        if unique_fields:\n+            # Primary key is allowed in unique_fields.\n+            unique_fields = [\n+                opts.pk.name if name == \"pk\" else name for name in unique_fields\n+            ]\n         on_conflict = self._check_bulk_create_options(\n             ignore_conflicts,\n             update_conflicts,\n@@ -792,7 +795,6 @@ def bulk_create(\n             unique_fields,\n         )\n         self._for_write = True\n-        opts = self.model._meta\n         fields = opts.concrete_fields\n         objs = list(objs)\n         self._prepare_for_bulk_create(objs)\n",
  "test_patch": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -595,6 +595,39 @@ def test_update_conflicts_two_fields_unique_fields_first(self):\n     def test_update_conflicts_two_fields_unique_fields_second(self):\n         self._test_update_conflicts_two_fields([\"f2\"])\n \n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n+    )\n+    def test_update_conflicts_unique_fields_pk(self):\n+        TwoFields.objects.bulk_create(\n+            [\n+                TwoFields(f1=1, f2=1, name=\"a\"),\n+                TwoFields(f1=2, f2=2, name=\"b\"),\n+            ]\n+        )\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        obj1 = TwoFields.objects.get(f1=1)\n+        obj2 = TwoFields.objects.get(f1=2)\n+        conflicting_objects = [\n+            TwoFields(pk=obj1.pk, f1=3, f2=3, name=\"c\"),\n+            TwoFields(pk=obj2.pk, f1=4, f2=4, name=\"d\"),\n+        ]\n+        TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"pk\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+        self.assertCountEqual(\n+            TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n+            [\n+                {\"f1\": 1, \"f2\": 1, \"name\": \"c\"},\n+                {\"f1\": 2, \"f2\": 2, \"name\": \"d\"},\n+            ],\n+        )\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n",
  "problem_statement": "QuerySet.bulk_create() crashes on \"pk\" in unique_fields.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nQuerySet.bulk_create() crashes on \"pk\" in unique_fields which should be allowed.\n File \"/django/django/db/backends/utils.py\", line 89, in _execute\n\treturn self.cursor.execute(sql, params)\ndjango.db.utils.ProgrammingError: column \"pk\" does not exist\nLINE 1: ...S (3127, 3, 3, 'c'), (3128, 4, 4, 'd') ON CONFLICT(\"pk\") DO ...\nBug in 0f6946495a8ec955b471ca1baaf408ceb53d4796.\n",
  "hints_text": "",
  "created_at": "2022-11-22T12:08:16Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_update_conflicts_unique_fields_pk (bulk_create.tests.BulkCreateTests)\"]",
  "PASS_TO_PASS": "[\"test_batch_same_vals (bulk_create.tests.BulkCreateTests)\", \"test_bulk_insert_expressions (bulk_create.tests.BulkCreateTests)\", \"test_bulk_insert_nullable_fields (bulk_create.tests.BulkCreateTests)\", \"test_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_empty_model (bulk_create.tests.BulkCreateTests)\", \"test_explicit_batch_size (bulk_create.tests.BulkCreateTests)\", \"test_explicit_batch_size_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_explicit_batch_size_respects_max_batch_size (bulk_create.tests.BulkCreateTests)\", \"test_ignore_conflicts_ignore (bulk_create.tests.BulkCreateTests)\", \"test_ignore_update_conflicts_exclusive (bulk_create.tests.BulkCreateTests)\", \"test_invalid_batch_size_exception (bulk_create.tests.BulkCreateTests)\", \"test_large_batch (bulk_create.tests.BulkCreateTests)\", \"test_large_batch_efficiency (bulk_create.tests.BulkCreateTests)\", \"Test inserting a large batch with objects having primary key set\", \"test_large_single_field_batch (bulk_create.tests.BulkCreateTests)\", \"test_long_and_short_text (bulk_create.tests.BulkCreateTests)\", \"Inserting non-ASCII values with a length in the range 2001 to 4000\", \"test_multi_table_inheritance_unsupported (bulk_create.tests.BulkCreateTests)\", \"test_non_auto_increment_pk (bulk_create.tests.BulkCreateTests)\", \"test_non_auto_increment_pk_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_nullable_fk_after_parent (bulk_create.tests.BulkCreateTests)\", \"test_nullable_fk_after_parent_bulk_create (bulk_create.tests.BulkCreateTests)\", \"test_proxy_inheritance_supported (bulk_create.tests.BulkCreateTests)\", \"test_set_pk_and_insert_single_item (bulk_create.tests.BulkCreateTests)\", \"test_set_pk_and_query_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_set_state (bulk_create.tests.BulkCreateTests)\", \"test_set_state_with_pk_specified (bulk_create.tests.BulkCreateTests)\", \"test_simple (bulk_create.tests.BulkCreateTests)\", \"test_unsaved_parent (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_invalid_unique_fields (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_invalid_update_fields (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_no_update_fields (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_nonexistent_update_fields (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_pk_in_update_fields (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_two_fields_unique_fields_both (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_two_fields_unique_fields_first (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_two_fields_unique_fields_second (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_unique_fields (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_unique_fields_required (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_unique_two_fields_unique_fields_both (bulk_create.tests.BulkCreateTests)\", \"test_update_conflicts_unique_two_fields_unique_fields_one (bulk_create.tests.BulkCreateTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.753324",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}