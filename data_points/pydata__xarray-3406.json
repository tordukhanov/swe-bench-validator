{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-3406",
  "base_commit": "fb0cf7b5fe56519a933ffcecbce9e9327fe236a6",
  "patch": "diff --git a/xarray/core/groupby.py b/xarray/core/groupby.py\n--- a/xarray/core/groupby.py\n+++ b/xarray/core/groupby.py\n@@ -361,6 +361,13 @@ def __init__(\n                 group_indices = [slice(i, i + 1) for i in group_indices]\n             unique_coord = group\n         else:\n+            if group.isnull().any():\n+                # drop any NaN valued groups.\n+                # also drop obj values where group was NaN\n+                # Use where instead of reindex to account for duplicate coordinate labels.\n+                obj = obj.where(group.notnull(), drop=True)\n+                group = group.dropna(group_dim)\n+\n             # look through group to find the unique values\n             unique_values, group_indices = unique_value_groups(\n                 safe_cast_to_index(group), sort=(bins is None)\n",
  "test_patch": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -5,7 +5,7 @@\n import xarray as xr\n from xarray.core.groupby import _consolidate_slices\n \n-from . import assert_allclose, assert_identical, raises_regex\n+from . import assert_allclose, assert_equal, assert_identical, raises_regex\n \n \n @pytest.fixture\n@@ -48,14 +48,14 @@ def test_groupby_dims_property(dataset):\n def test_multi_index_groupby_apply(dataset):\n     # regression test for GH873\n     ds = dataset.isel(z=1, drop=True)[[\"foo\"]]\n-    doubled = 2 * ds\n-    group_doubled = (\n+    expected = 2 * ds\n+    actual = (\n         ds.stack(space=[\"x\", \"y\"])\n         .groupby(\"space\")\n         .apply(lambda x: 2 * x)\n         .unstack(\"space\")\n     )\n-    assert doubled.equals(group_doubled)\n+    assert_equal(expected, actual)\n \n \n def test_multi_index_groupby_sum():\n@@ -66,7 +66,7 @@ def test_multi_index_groupby_sum():\n     )\n     expected = ds.sum(\"z\")\n     actual = ds.stack(space=[\"x\", \"y\"]).groupby(\"space\").sum(\"z\").unstack(\"space\")\n-    assert expected.equals(actual)\n+    assert_equal(expected, actual)\n \n \n def test_groupby_da_datetime():\n@@ -86,7 +86,7 @@ def test_groupby_da_datetime():\n     expected = xr.DataArray(\n         [3, 7], coords=dict(reference_date=reference_dates), dims=\"reference_date\"\n     )\n-    assert actual.equals(expected)\n+    assert_equal(expected, actual)\n \n \n def test_groupby_duplicate_coordinate_labels():\n@@ -94,7 +94,7 @@ def test_groupby_duplicate_coordinate_labels():\n     array = xr.DataArray([1, 2, 3], [(\"x\", [1, 1, 2])])\n     expected = xr.DataArray([3, 3], [(\"x\", [1, 2])])\n     actual = array.groupby(\"x\").sum()\n-    assert expected.equals(actual)\n+    assert_equal(expected, actual)\n \n \n def test_groupby_input_mutation():\n@@ -263,6 +263,72 @@ def test_groupby_repr_datetime(obj):\n     assert actual == expected\n \n \n+def test_groupby_drops_nans():\n+    # GH2383\n+    # nan in 2D data variable (requires stacking)\n+    ds = xr.Dataset(\n+        {\n+            \"variable\": ((\"lat\", \"lon\", \"time\"), np.arange(60.0).reshape((4, 3, 5))),\n+            \"id\": ((\"lat\", \"lon\"), np.arange(12.0).reshape((4, 3))),\n+        },\n+        coords={\"lat\": np.arange(4), \"lon\": np.arange(3), \"time\": np.arange(5)},\n+    )\n+\n+    ds[\"id\"].values[0, 0] = np.nan\n+    ds[\"id\"].values[3, 0] = np.nan\n+    ds[\"id\"].values[-1, -1] = np.nan\n+\n+    grouped = ds.groupby(ds.id)\n+\n+    # non reduction operation\n+    expected = ds.copy()\n+    expected.variable.values[0, 0, :] = np.nan\n+    expected.variable.values[-1, -1, :] = np.nan\n+    expected.variable.values[3, 0, :] = np.nan\n+    actual = grouped.apply(lambda x: x).transpose(*ds.variable.dims)\n+    assert_identical(actual, expected)\n+\n+    # reduction along grouped dimension\n+    actual = grouped.mean()\n+    stacked = ds.stack({\"xy\": [\"lat\", \"lon\"]})\n+    expected = (\n+        stacked.variable.where(stacked.id.notnull()).rename({\"xy\": \"id\"}).to_dataset()\n+    )\n+    expected[\"id\"] = stacked.id.values\n+    assert_identical(actual, expected.dropna(\"id\").transpose(*actual.dims))\n+\n+    # reduction operation along a different dimension\n+    actual = grouped.mean(\"time\")\n+    expected = ds.mean(\"time\").where(ds.id.notnull())\n+    assert_identical(actual, expected)\n+\n+    # NaN in non-dimensional coordinate\n+    array = xr.DataArray([1, 2, 3], [(\"x\", [1, 2, 3])])\n+    array[\"x1\"] = (\"x\", [1, 1, np.nan])\n+    expected = xr.DataArray(3, [(\"x1\", [1])])\n+    actual = array.groupby(\"x1\").sum()\n+    assert_equal(expected, actual)\n+\n+    # NaT in non-dimensional coordinate\n+    array[\"t\"] = (\n+        \"x\",\n+        [\n+            np.datetime64(\"2001-01-01\"),\n+            np.datetime64(\"2001-01-01\"),\n+            np.datetime64(\"NaT\"),\n+        ],\n+    )\n+    expected = xr.DataArray(3, [(\"t\", [np.datetime64(\"2001-01-01\")])])\n+    actual = array.groupby(\"t\").sum()\n+    assert_equal(expected, actual)\n+\n+    # test for repeated coordinate labels\n+    array = xr.DataArray([0, 1, 2, 4, 3, 4], [(\"x\", [np.nan, 1, 1, np.nan, 2, np.nan])])\n+    expected = xr.DataArray([3, 3], [(\"x\", [1, 2])])\n+    actual = array.groupby(\"x\").sum()\n+    assert_equal(expected, actual)\n+\n+\n def test_groupby_grouping_errors():\n     dataset = xr.Dataset({\"foo\": (\"x\", [1, 1, 1])}, {\"x\": [1, 2, 3]})\n     with raises_regex(ValueError, \"None of the data falls within bins with edges\"):\n",
  "problem_statement": "groupby().apply() on variable with NaNs raises IndexError\n#### Code Sample\r\n\r\n```python\r\nimport xarray as xr\r\nimport numpy as np\r\n\r\ndef standardize(x):\r\n      return (x - x.mean()) / x.std()\r\n\r\nds = xr.Dataset()\r\nds[\"variable\"] = xr.DataArray(np.random.rand(4,3,5), \r\n                               {\"lat\":np.arange(4), \"lon\":np.arange(3), \"time\":np.arange(5)}, \r\n                               (\"lat\", \"lon\", \"time\"),\r\n                              )\r\n\r\nds[\"id\"] = xr.DataArray(np.arange(12.0).reshape((4,3)),\r\n                         {\"lat\": np.arange(4), \"lon\":np.arange(3)},\r\n                         (\"lat\", \"lon\"),\r\n                        )\r\n\r\nds[\"id\"].values[0,0] = np.nan\r\n\r\nds.groupby(\"id\").apply(standardize)\r\n```\r\n#### Problem description\r\n\r\nThis results in an IndexError. This is mildly confusing, it took me a little while to figure out the NaN's were to blame. I'm guessing the NaN doesn't get filtered out everywhere.\r\n\r\nThe traceback:\r\n```\r\n\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-2-267ba57bc264> in <module>()\r\n     15 ds[\"id\"].values[0,0] = np.nan\r\n     16\r\n---> 17 ds.groupby(\"id\").apply(standardize)\r\n\r\nC:\\Miniconda3\\envs\\main\\lib\\site-packages\\xarray\\core\\groupby.py in apply(self, func, **kwargs)\r\n    607         kwargs.pop('shortcut', None)  # ignore shortcut if set (for now)\r\n    608         applied = (func(ds, **kwargs) for ds in self._iter_grouped())\r\n--> 609         return self._combine(applied)\r\n    610\r\n    611     def _combine(self, applied):\r\n\r\nC:\\Miniconda3\\envs\\main\\lib\\site-packages\\xarray\\core\\groupby.py in _combine(self, applied)\r\n    614         coord, dim, positions = self._infer_concat_args(applied_example)\r\n    615         combined = concat(applied, dim)\r\n--> 616         combined = _maybe_reorder(combined, dim, positions)\r\n    617         if coord is not None:\r\n    618             combined[coord.name] = coord\r\n\r\nC:\\Miniconda3\\envs\\main\\lib\\site-packages\\xarray\\core\\groupby.py in _maybe_reorder(xarray_obj, dim, positions)\r\n    428\r\n    429 def _maybe_reorder(xarray_obj, dim, positions):\r\n--> 430     order = _inverse_permutation_indices(positions)\r\n    431\r\n    432     if order is None:\r\n\r\nC:\\Miniconda3\\envs\\main\\lib\\site-packages\\xarray\\core\\groupby.py in _inverse_permutation_indices(positions)\r\n    109         positions = [np.arange(sl.start, sl.stop, sl.step) for sl in positions]\r\n    110\r\n--> 111     indices = nputils.inverse_permutation(np.concatenate(positions))\r\n    112     return indices\r\n    113\r\n\r\nC:\\Miniconda3\\envs\\main\\lib\\site-packages\\xarray\\core\\nputils.py in inverse_permutation(indices)\r\n     52     # use intp instead of int64 because of windows :(\r\n     53     inverse_permutation = np.empty(len(indices), dtype=np.intp)\r\n---> 54     inverse_permutation[indices] = np.arange(len(indices), dtype=np.intp)\r\n     55     return inverse_permutation\r\n     56\r\n\r\nIndexError: index 11 is out of bounds for axis 0 with size 11\r\n\r\n``` \r\n\r\n#### Expected Output\r\n\r\nMy assumption was that it would throw out the values that fall within the NaN group, like`pandas`:\r\n\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame()\r\ndf[\"var\"] = np.random.rand(10)\r\ndf[\"id\"] = np.arange(10)\r\ndf[\"id\"].iloc[0:2] = np.nan\r\ndf.groupby(\"id\").mean()\r\n```\r\n\r\nOut:\r\n```python\r\n          var\r\nid\r\n2.0  0.565366\r\n3.0  0.744443\r\n4.0  0.190983\r\n5.0  0.196922\r\n6.0  0.377282\r\n7.0  0.141419\r\n8.0  0.957526\r\n9.0  0.207360\r\n```\r\n\r\n#### Output of ``xr.show_versions()``\r\n\r\n<details>\r\n\r\n```\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.6.5.final.0\r\npython-bits: 64\r\nOS: Windows\r\nOS-release: 7\r\nmachine: AMD64\r\nprocessor: Intel64 Family 6 Model 45 Stepping 7, GenuineIntel\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: None\r\nLOCALE: None.None\r\n\r\nxarray: 0.10.8\r\npandas: 0.23.3\r\nnumpy: 1.15.0\r\nscipy: 1.1.0\r\nnetCDF4: 1.4.0\r\nh5netcdf: 0.6.1\r\nh5py: 2.8.0\r\nNio: None\r\nzarr: None\r\nbottleneck: 1.2.1\r\ncyordereddict: None\r\ndask: 0.18.2\r\ndistributed: 1.22.0\r\nmatplotlib: 2.2.2\r\ncartopy: None\r\nseaborn: None\r\nsetuptools: 40.0.0\r\npip: 18.0\r\nconda: None\r\npytest: 3.7.1\r\nIPython: 6.4.0\r\nsphinx: 1.7.5\r\n```\r\n\r\n</details>\r\n\n",
  "hints_text": "I agree, this is definitely confusing. We should probably drop these groups automatically, like pandas.",
  "created_at": "2019-10-16T04:04:46Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_groupby.py::test_groupby_drops_nans\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_groupby.py::test_consolidate_slices\", \"xarray/tests/test_groupby.py::test_groupby_dims_property\", \"xarray/tests/test_groupby.py::test_multi_index_groupby_apply\", \"xarray/tests/test_groupby.py::test_multi_index_groupby_sum\", \"xarray/tests/test_groupby.py::test_groupby_da_datetime\", \"xarray/tests/test_groupby.py::test_groupby_duplicate_coordinate_labels\", \"xarray/tests/test_groupby.py::test_groupby_input_mutation\", \"xarray/tests/test_groupby.py::test_da_groupby_apply_func_args\", \"xarray/tests/test_groupby.py::test_ds_groupby_apply_func_args\", \"xarray/tests/test_groupby.py::test_da_groupby_empty\", \"xarray/tests/test_groupby.py::test_da_groupby_quantile\", \"xarray/tests/test_groupby.py::test_da_groupby_assign_coords\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj0-z]\", \"xarray/tests/test_groupby.py::test_groupby_repr[obj1-z]\", \"xarray/tests/test_groupby.py::test_groupby_grouping_errors\", \"xarray/tests/test_groupby.py::test_groupby_reduce_dimension_error\", \"xarray/tests/test_groupby.py::test_groupby_bins_timeseries\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.871223",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}