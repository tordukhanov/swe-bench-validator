{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-9798",
  "base_commit": "6a6a32ceca8db2bb8c8385f7fe54dc335f48663a",
  "patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -319,7 +319,6 @@ def __repr__(self) -> str:\n \n     def _repr_compare(self, other_side: Sequence[float]) -> List[str]:\n         import math\n-        import numpy as np\n \n         if len(self.expected) != len(other_side):\n             return [\n@@ -340,7 +339,7 @@ def _repr_compare(self, other_side: Sequence[float]) -> List[str]:\n                 abs_diff = abs(approx_value.expected - other_value)\n                 max_abs_diff = max(max_abs_diff, abs_diff)\n                 if other_value == 0.0:\n-                    max_rel_diff = np.inf\n+                    max_rel_diff = math.inf\n                 else:\n                     max_rel_diff = max(max_rel_diff, abs_diff / abs(other_value))\n                 different_ids.append(i)\n",
  "test_patch": "diff --git a/testing/python/approx.py b/testing/python/approx.py\n--- a/testing/python/approx.py\n+++ b/testing/python/approx.py\n@@ -92,9 +92,7 @@ def do_assert(lhs, rhs, expected_message, verbosity_level=0):\n \n \n class TestApprox:\n-    def test_error_messages(self, assert_approx_raises_regex):\n-        np = pytest.importorskip(\"numpy\")\n-\n+    def test_error_messages_native_dtypes(self, assert_approx_raises_regex):\n         assert_approx_raises_regex(\n             2.0,\n             1.0,\n@@ -135,6 +133,22 @@ def test_error_messages(self, assert_approx_raises_regex):\n             ],\n         )\n \n+        # Specific test for comparison with 0.0 (relative diff will be 'inf')\n+        assert_approx_raises_regex(\n+            [0.0],\n+            [1.0],\n+            [\n+                r\"  comparison failed. Mismatched elements: 1 / 1:\",\n+                rf\"  Max absolute difference: {SOME_FLOAT}\",\n+                r\"  Max relative difference: inf\",\n+                r\"  Index \\| Obtained\\s+\\| Expected   \",\n+                rf\"\\s*0\\s*\\| {SOME_FLOAT} \\| {SOME_FLOAT} ± {SOME_FLOAT}\",\n+            ],\n+        )\n+\n+    def test_error_messages_numpy_dtypes(self, assert_approx_raises_regex):\n+        np = pytest.importorskip(\"numpy\")\n+\n         a = np.linspace(0, 100, 20)\n         b = np.linspace(0, 100, 20)\n         a[10] += 0.5\n@@ -175,18 +189,6 @@ def test_error_messages(self, assert_approx_raises_regex):\n         )\n \n         # Specific test for comparison with 0.0 (relative diff will be 'inf')\n-        assert_approx_raises_regex(\n-            [0.0],\n-            [1.0],\n-            [\n-                r\"  comparison failed. Mismatched elements: 1 / 1:\",\n-                rf\"  Max absolute difference: {SOME_FLOAT}\",\n-                r\"  Max relative difference: inf\",\n-                r\"  Index \\| Obtained\\s+\\| Expected   \",\n-                rf\"\\s*0\\s*\\| {SOME_FLOAT} \\| {SOME_FLOAT} ± {SOME_FLOAT}\",\n-            ],\n-        )\n-\n         assert_approx_raises_regex(\n             np.array([0.0]),\n             np.array([1.0]),\n",
  "problem_statement": "ModuleNotFoundError for Numpy when pytest.approx fails\n<!--\r\nThanks for submitting an issue!\r\n\r\nQuick check-list while reporting bugs:\r\n-->\r\n\r\n### Description of the bug:\r\nWhen using `pytest.approx` to compare lists in a test, a `ModuleNotFoundError` is raised for Numpy whenever the test fails. If the test succeeds, there is no such error.\r\n\r\nIt appears that `pytest.approx` does _not_ require Numpy to run, but the error message requires Numpy to display the details. Since `pytest.approx` does not require Numpy to function correctly, it should not require Numpy to display the error.\r\n\r\n### Output of `pip list` from the virtual environment:\r\n```\r\nPackage    Version\r\n---------- -------\r\nattrs      21.4.0\r\niniconfig  1.1.1\r\npackaging  21.3\r\npip        22.0.3\r\npluggy     1.0.0\r\npy         1.11.0\r\npyparsing  3.0.7\r\npytest     7.0.1\r\nsetuptools 49.2.1\r\ntomli      2.0.1\r\n```\r\n\r\n### pytest and operating system versions:\r\n```\r\n$ python --version\r\nPython 3.9.0\r\n$ python -m pytest --version\r\npytest 7.0.1\r\n```\r\nmacOS Big Sur\r\n\r\nVersion 11.6.2\r\n\r\n### Minimal example:\r\n```python\r\nimport pytest\r\ndef test_approx():\r\n    assert [1, 2] == pytest.approx([1.001, 2.002])\r\n```\r\n#### Actual Result:\r\n```\r\n$ pytest\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.9.0, pytest-7.0.1, pluggy-1.0.0\r\nrootdir: ****\r\ncollected 1 item                                                               \r\n\r\ntest_approx.py F                                                         [100%]\r\n\r\n=================================== FAILURES ===================================\r\n_________________________________ test_approx __________________________________\r\n\r\n    def test_approx():\r\n>       assert [1, 2] == pytest.approx([1.001, 2.002])\r\nE       AssertionError: assert [1, 2] == approx([1.001...02 ± 2.0e-06])\r\nE         (pytest_assertion plugin: representation of details failed: /Users/adalessa/Downloads/diffusion-master 2/venv/lib/python3.9/site-packages/_pytest/python_api.py:323: ModuleNotFoundError: No module named 'numpy'.\r\nE          Probably an object has a faulty __repr__.)\r\n\r\ntest_approx.py:5: AssertionError\r\n=========================== short test summary info ============================\r\nFAILED test_approx.py::test_approx - AssertionError: assert [1, 2] == approx(...\r\n============================== 1 failed in 0.04s ===============================\r\n```\r\n#### Expected result:\r\nNo `ModuleNotFoundError: No module named 'numpy'.` which makes the whole error message confusing and leads you to believe it failed because Numpy is not installed instead of the fact it was an assertion error.\r\n\n",
  "hints_text": "Hi, I am a beginner and I am looking for the first issue to work on. Could I try to work on this one? Is there anyone else who started contributing? \r\nThank you for the answer in advance. \n@dzht19 please go ahead!\r\n\r\nThe offending line is here:\r\n\r\nhttps://github.com/pytest-dev/pytest/blob/9318b2cb7f81252fec215e1cce4c5de021bda180/src/_pytest/python_api.py#L343\r\n\r\n`np.inf` should be replaced by `math.inf`, and the numpy import at the beginning of the function should be removed. Also we should fix our test suite: `TestApprox.test_error_messages` currently tests scalars, lists and numpy arrays, but it uses `importorskip` at the beginning, so we skip the tests if numpy is not installed. We should split the test into two: one which tests everything not-numpy related, and one which tests numpy-data and depends on numpy.\nHi @dzht19,\r\n\r\nAny progress on this?\n> Hi @dzht19,\r\n> \r\n> Any progress on this?\r\n\r\nHi, Yes. I hope to finish till the end of the week. ",
  "created_at": "2022-03-20T14:26:09Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"testing/python/approx.py::TestApprox::test_error_messages_native_dtypes\"]",
  "PASS_TO_PASS": "[\"testing/python/approx.py::TestApprox::test_repr_string\", \"testing/python/approx.py::TestApprox::test_repr_complex_numbers\", \"testing/python/approx.py::TestApprox::test_bool\", \"testing/python/approx.py::TestApprox::test_operator_overloading\", \"testing/python/approx.py::TestApprox::test_exactly_equal\", \"testing/python/approx.py::TestApprox::test_opposite_sign\", \"testing/python/approx.py::TestApprox::test_zero_tolerance\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-None]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[None--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[1e+100--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100--1e+100]\", \"testing/python/approx.py::TestApprox::test_negative_tolerance_message\", \"testing/python/approx.py::TestApprox::test_inf_tolerance\", \"testing/python/approx.py::TestApprox::test_inf_tolerance_expecting_zero\", \"testing/python/approx.py::TestApprox::test_nan_tolerance\", \"testing/python/approx.py::TestApprox::test_reasonable_defaults\", \"testing/python/approx.py::TestApprox::test_default_tolerances\", \"testing/python/approx.py::TestApprox::test_custom_tolerances\", \"testing/python/approx.py::TestApprox::test_relative_tolerance\", \"testing/python/approx.py::TestApprox::test_absolute_tolerance\", \"testing/python/approx.py::TestApprox::test_expecting_zero\", \"testing/python/approx.py::TestApprox::test_expecting_inf\", \"testing/python/approx.py::TestApprox::test_expecting_nan\", \"testing/python/approx.py::TestApprox::test_int\", \"testing/python/approx.py::TestApprox::test_decimal\", \"testing/python/approx.py::TestApprox::test_fraction\", \"testing/python/approx.py::TestApprox::test_complex\", \"testing/python/approx.py::TestApprox::test_list\", \"testing/python/approx.py::TestApprox::test_list_decimal\", \"testing/python/approx.py::TestApprox::test_list_wrong_len\", \"testing/python/approx.py::TestApprox::test_tuple\", \"testing/python/approx.py::TestApprox::test_tuple_wrong_len\", \"testing/python/approx.py::TestApprox::test_tuple_vs_other\", \"testing/python/approx.py::TestApprox::test_dict\", \"testing/python/approx.py::TestApprox::test_dict_decimal\", \"testing/python/approx.py::TestApprox::test_dict_wrong_len\", \"testing/python/approx.py::TestApprox::test_dict_nonnumeric\", \"testing/python/approx.py::TestApprox::test_dict_vs_other\", \"testing/python/approx.py::TestApprox::test_doctests\", \"testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-list]\", \"testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-dict]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[None]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[nested-str]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[dict-with-string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[nested-str]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[dict-with-string]\", \"testing/python/approx.py::TestApprox::test_nonnumeric_dict_repr\", \"testing/python/approx.py::TestApprox::test_nonnumeric_list_repr\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<=]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>=]\", \"testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>]\", \"testing/python/approx.py::TestApprox::test_generic_ordered_sequence\", \"testing/python/approx.py::TestApprox::test_allow_ordered_sequences_only\", \"testing/python/approx.py::TestApprox::test_unicode_plus_minus\"]",
  "environment_setup_commit": "572b5657d7ca557593418ce0319fabff88800c73",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.948334",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}