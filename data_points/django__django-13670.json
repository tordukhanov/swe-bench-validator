{
  "repo": "django/django",
  "instance_id": "django__django-13670",
  "base_commit": "c448e614c60cc97c6194c62052363f4f501e0953",
  "patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -325,8 +325,8 @@ def W(self):\n         return self.data.isocalendar()[1]\n \n     def y(self):\n-        \"Year, 2 digits; e.g. '99'\"\n-        return str(self.data.year)[2:]\n+        \"\"\"Year, 2 digits with leading zeros; e.g. '99'.\"\"\"\n+        return '%02d' % (self.data.year % 100)\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n",
  "test_patch": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -165,3 +165,16 @@ def test_r_format_with_non_en_locale(self):\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n             )\n+\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n",
  "problem_statement": "dateformat.y() doesn't support years < 1000.\nDescription\n\t \n\t\t(last modified by Sam)\n\t \nWhen using the the dateformat of django with a date before 999 (or 99 and 9 for similar matters) and the format character \"y\" no leading zero will be printed. This is not consistent with the way the python datetime module and PHP handle that character \"y\" in format strings:\ndjango (version 3.1):\n>>> import datetime\n>>> from django.utils import dateformat\n>>> dateformat.format(datetime.datetime(123, 4, 5, 6, 7), \"y\")\n'3'\npython (version 3.8):\n>>> import datetime\n>>> datetime.datetime(123, 4, 5, 6, 7).strftime(\"%y\")\n'23'\nphp (version 7.4):\necho date(\"y\", strtotime(\"0123-04-05 06:07:00\"))\n23\nI have a pull-request ready for this: â€‹https://github.com/django/django/pull/13614\n",
  "hints_text": "",
  "created_at": "2020-11-12T11:45:51Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_year_before_1000 (utils_tests.test_dateformat.DateFormatTests)\"]",
  "PASS_TO_PASS": "[\"test_am_pm (utils_tests.test_dateformat.DateFormatTests)\", \"test_date (utils_tests.test_dateformat.DateFormatTests)\", \"test_date_formats (utils_tests.test_dateformat.DateFormatTests)\", \"test_dateformat (utils_tests.test_dateformat.DateFormatTests)\", \"test_datetime_with_local_tzinfo (utils_tests.test_dateformat.DateFormatTests)\", \"test_datetime_with_tzinfo (utils_tests.test_dateformat.DateFormatTests)\", \"test_day_of_year_leap (utils_tests.test_dateformat.DateFormatTests)\", \"test_empty_format (utils_tests.test_dateformat.DateFormatTests)\", \"test_epoch (utils_tests.test_dateformat.DateFormatTests)\", \"test_futuredates (utils_tests.test_dateformat.DateFormatTests)\", \"test_invalid_time_format_specifiers (utils_tests.test_dateformat.DateFormatTests)\", \"test_microsecond (utils_tests.test_dateformat.DateFormatTests)\", \"test_naive_ambiguous_datetime (utils_tests.test_dateformat.DateFormatTests)\", \"test_naive_datetime (utils_tests.test_dateformat.DateFormatTests)\", \"test_r_format_with_non_en_locale (utils_tests.test_dateformat.DateFormatTests)\", \"test_time_formats (utils_tests.test_dateformat.DateFormatTests)\", \"test_timezones (utils_tests.test_dateformat.DateFormatTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.666194",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}