{
  "repo": "django/django",
  "instance_id": "django__django-11216",
  "base_commit": "34ec52269ade54af31a021b12969913129571a3f",
  "patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -55,6 +55,7 @@ class HashedFilesMixin:\n             (r\"\"\"(@import\\s*[\"']\\s*(.*?)[\"'])\"\"\", \"\"\"@import url(\"%s\")\"\"\"),\n         )),\n     )\n+    keep_intermediate_files = True\n \n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n@@ -297,8 +298,9 @@ def path_level(name):\n                         self.delete(hashed_name)\n                     # then save the processed result\n                     content_file = ContentFile(content.encode())\n-                    # Save intermediate file for reference\n-                    saved_name = self._save(hashed_name, content_file)\n+                    if self.keep_intermediate_files:\n+                        # Save intermediate file for reference\n+                        self._save(hashed_name, content_file)\n                     hashed_name = self.hashed_name(name, content_file)\n \n                     if self.exists(hashed_name):\n@@ -370,6 +372,7 @@ class ManifestFilesMixin(HashedFilesMixin):\n     manifest_version = '1.0'  # the manifest format standard\n     manifest_name = 'staticfiles.json'\n     manifest_strict = True\n+    keep_intermediate_files = False\n \n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n",
  "test_patch": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -445,6 +445,18 @@ def test_missing_entry(self):\n         # File exists on disk\n         self.hashed_file_path(missing_file_name)\n \n+    def test_intermediate_files(self):\n+        cached_files = os.listdir(os.path.join(settings.STATIC_ROOT, 'cached'))\n+        # Intermediate files shouldn't be created for reference.\n+        self.assertEqual(\n+            len([\n+                cached_file\n+                for cached_file in cached_files\n+                if cached_file.startswith('relative.')\n+            ]),\n+            2,\n+        )\n+\n \n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.SimpleStorage')\n class TestCollectionSimpleStorage(CollectionTestCase):\n",
  "problem_statement": "Prevent ManifestStaticFilesStorage from leaving behind intermediate files\nDescription\n\t\nCurrently when using ManifestStaticFilesStorage, collectstatic generates duplicate versions of some files. \nFor example looking at the output for contrib.admin for Django 1.11.5, there is:\nadmin/css/base.css\nadmin/css/base.5af66c1b1797.css\nadmin/css/base.6b517d0d5813.css\nadmin/css/base.31652d31b392.css\nThis is exacerbated when using something like WhiteNoise's CompressedStaticFilesMixin, which then has to spend extra time generating gzip and Brotli compressed versions of every file (or else try and work around it: ​evansd/whitenoise#147).\nThis was called unavoidable/working as intended according to:\nhttps://code.djangoproject.com/ticket/24452#comment:16\n​https://github.com/django/django/pull/6507\nHowever now that it's looking like CachedStaticFilesStorage will end up being removed (​mailing list thread; or at the very least we're discouraging people from using it, since it's buggy in several scenarios) - the intermediate files needn't be left behind.\nEven before CachedStaticFilesStorage ends up being removed, we could perhaps add a keep_intermediate_files property to HashedFilesMixin, that is set to False for CachedStaticFilesStorage and True for ManifestStaticFilesStorage, allowing us to fix the latter in the meantime.\n",
  "hints_text": "​PR",
  "created_at": "2019-04-13T13:17:07Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_intermediate_files (staticfiles_tests.test_storage.TestCollectionManifestStorage)\"]",
  "PASS_TO_PASS": "[\"test_warning (staticfiles_tests.test_storage.TestCachedStaticFilesStorageDeprecation)\", \"test_collect_static_files_default_permissions (staticfiles_tests.test_storage.TestStaticFilePermissions)\", \"test_collect_static_files_permissions (staticfiles_tests.test_storage.TestStaticFilePermissions)\", \"test_collect_static_files_subclass_of_static_storage (staticfiles_tests.test_storage.TestStaticFilePermissions)\", \"test_multi_extension_patterns (staticfiles_tests.test_storage.TestExtraPatternsStorage)\", \"test_template_tag_return (staticfiles_tests.test_storage.TestCollectionSimpleStorage)\", \"test_template_tag_simple_content (staticfiles_tests.test_storage.TestCollectionSimpleStorage)\", \"test_file_change_after_collectstatic (staticfiles_tests.test_storage.TestCollectionHashedFilesCache)\", \"test_cache_invalidation (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_cache_key_memcache_validation (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_corrupt_intermediate_files (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_css_import_case_insensitive (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_import_loop (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"See #18050\", \"test_path_ignored_completely (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_path_with_fragment (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_path_with_querystring (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_path_with_querystring_and_fragment (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_post_processing (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_post_processing_failure (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_template_tag_absolute (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_template_tag_absolute_root (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_template_tag_deep_relative (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_template_tag_relative (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_template_tag_return (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_template_tag_simple_content (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_template_tag_url (staticfiles_tests.test_storage.TestCollectionCachedStorage)\", \"test_clear_empties_manifest (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_css_import_case_insensitive (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_import_loop (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_loaded_cache (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_manifest_exists (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_missing_entry (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_parse_cache (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_ignored_completely (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_with_fragment (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_with_querystring (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_with_querystring_and_fragment (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_post_processing (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_post_processing_failure (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_absolute (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_absolute_root (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_deep_relative (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_relative (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_return (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_simple_content (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_url (staticfiles_tests.test_storage.TestCollectionManifestStorage)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.564965",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}