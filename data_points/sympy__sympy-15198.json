{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15198",
  "base_commit": "115dd821a4b9ec94ca1bd339a8c0d63f31a12167",
  "patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -445,6 +445,7 @@ def group_isomorphism(G, H, isomorphism=True):\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n+    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.perm_groups import PermutationGroup\n     >>> from sympy.combinatorics.free_groups import free_group\n     >>> from sympy.combinatorics.fp_groups import FpGroup\ndiff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -168,7 +168,7 @@ class C89CodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n-        'allow_unknown_functions': True,\n+        'allow_unknown_functions': False,\n         'contract': True,\n         'dereference': set(),\n         'error_on_reserved': False,\ndiff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py\n--- a/sympy/printing/codeprinter.py\n+++ b/sympy/printing/codeprinter.py\n@@ -54,7 +54,7 @@ class CodePrinter(StrPrinter):\n         'reserved_word_suffix': '_',\n         'human': True,\n         'inline': False,\n-        'allow_unknown_functions': True,\n+        'allow_unknown_functions': False,\n     }\n \n     def __init__(self, settings=None):\n@@ -382,7 +382,7 @@ def _print_Function(self, expr):\n         elif hasattr(expr, '_imp_') and isinstance(expr._imp_, Lambda):\n             # inlined function\n             return self._print(expr._imp_(*expr.args))\n-        elif expr.is_Function and self._settings.get('allow_unknown_functions', True):\n+        elif expr.is_Function and self._settings.get('allow_unknown_functions', False):\n             return '%s(%s)' % (self._print(expr.func), ', '.join(map(self._print, expr.args)))\n         else:\n             return self._print_not_supported(expr)\ndiff --git a/sympy/printing/fcode.py b/sympy/printing/fcode.py\n--- a/sympy/printing/fcode.py\n+++ b/sympy/printing/fcode.py\n@@ -98,7 +98,7 @@ class FCodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n-        'allow_unknown_functions': True,\n+        'allow_unknown_functions': False,\n         'source_format': 'fixed',\n         'contract': True,\n         'standard': 77,\ndiff --git a/sympy/printing/glsl.py b/sympy/printing/glsl.py\n--- a/sympy/printing/glsl.py\n+++ b/sympy/printing/glsl.py\n@@ -50,7 +50,7 @@ class GLSLPrinter(CodePrinter):\n         'precision': 9,\n         'user_functions': {},\n         'human': True,\n-        'allow_unknown_functions': True,\n+        'allow_unknown_functions': False,\n         'contract': True,\n         'error_on_reserved': False,\n         'reserved_word_suffix': '_'\ndiff --git a/sympy/printing/jscode.py b/sympy/printing/jscode.py\n--- a/sympy/printing/jscode.py\n+++ b/sympy/printing/jscode.py\n@@ -55,7 +55,7 @@ class JavascriptCodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n-        'allow_unknown_functions': True,\n+        'allow_unknown_functions': False,\n         'contract': True\n     }\n \ndiff --git a/sympy/printing/julia.py b/sympy/printing/julia.py\n--- a/sympy/printing/julia.py\n+++ b/sympy/printing/julia.py\n@@ -62,7 +62,7 @@ class JuliaCodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n-        'allow_unknown_functions': True,\n+        'allow_unknown_functions': False,\n         'contract': True,\n         'inline': True,\n     }\ndiff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -47,7 +47,7 @@ class MCodePrinter(CodePrinter):\n         'precision': 15,\n         'user_functions': {},\n         'human': True,\n-        'allow_unknown_functions': True,\n+        'allow_unknown_functions': False,\n     }\n \n     _number_symbols = set()\ndiff --git a/sympy/printing/octave.py b/sympy/printing/octave.py\n--- a/sympy/printing/octave.py\n+++ b/sympy/printing/octave.py\n@@ -78,7 +78,7 @@ class OctaveCodePrinter(CodePrinter):\n         'precision': 17,\n         'user_functions': {},\n         'human': True,\n-        'allow_unknown_functions': True,\n+        'allow_unknown_functions': False,\n         'contract': True,\n         'inline': True,\n     }\ndiff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -425,6 +425,7 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n                 for k in m:\n                     user_functions[k] = k\n         printer = Printer({'fully_qualified_modules': False, 'inline': True,\n+                           'allow_unknown_functions': True,\n                            'user_functions': user_functions})\n \n     # Get the names of the args, for creating a docstring\ndiff --git a/sympy/utilities/runtests.py b/sympy/utilities/runtests.py\n--- a/sympy/utilities/runtests.py\n+++ b/sympy/utilities/runtests.py\n@@ -145,13 +145,14 @@ def setup_pprint():\n     import sympy.interactive.printing as interactive_printing\n \n     # force pprint to be in ascii mode in doctests\n-    pprint_use_unicode(False)\n+    use_unicode_prev = pprint_use_unicode(False)\n \n     # hook our nice, hash-stable strprinter\n     init_printing(pretty_print=False)\n \n     # Prevent init_printing() in doctests from affecting other doctests\n     interactive_printing.NO_GLOBAL = True\n+    return use_unicode_prev\n \n def run_in_subprocess_with_hash_randomization(\n         function, function_args=(),\n@@ -657,6 +658,8 @@ def _doctest(*paths, **kwargs):\n     Returns 0 if tests passed and 1 if they failed.  See the docstrings of\n     ``doctest()`` and ``test()`` for more information.\n     \"\"\"\n+    from sympy import pprint_use_unicode\n+\n     normal = kwargs.get(\"normal\", False)\n     verbose = kwargs.get(\"verbose\", False)\n     colors = kwargs.get(\"colors\", True)\n@@ -822,7 +825,7 @@ def _doctest(*paths, **kwargs):\n             continue\n         old_displayhook = sys.displayhook\n         try:\n-            setup_pprint()\n+            use_unicode_prev = setup_pprint()\n             out = sympytestfile(\n                 rst_file, module_relative=False, encoding='utf-8',\n                 optionflags=pdoctest.ELLIPSIS | pdoctest.NORMALIZE_WHITESPACE |\n@@ -835,6 +838,7 @@ def _doctest(*paths, **kwargs):\n             # if True\n             import sympy.interactive.printing as interactive_printing\n             interactive_printing.NO_GLOBAL = False\n+            pprint_use_unicode(use_unicode_prev)\n \n         rstfailed, tested = out\n         if tested:\n@@ -1344,6 +1348,7 @@ def test_file(self, filename):\n \n         from sympy.core.compatibility import StringIO\n         import sympy.interactive.printing as interactive_printing\n+        from sympy import pprint_use_unicode\n \n         rel_name = filename[len(self._root_dir) + 1:]\n         dirname, file = os.path.split(filename)\n@@ -1354,7 +1359,6 @@ def test_file(self, filename):\n             # So we have to temporarily extend sys.path to import them\n             sys.path.insert(0, dirname)\n             module = file[:-3]  # remove \".py\"\n-        setup_pprint()\n         try:\n             module = pdoctest._normalize_module(module)\n             tests = SymPyDocTestFinder().find(module)\n@@ -1366,7 +1370,6 @@ def test_file(self, filename):\n         finally:\n             if rel_name.startswith(\"examples\"):\n                 del sys.path[0]\n-            interactive_printing.NO_GLOBAL = False\n \n         tests = [test for test in tests if len(test.examples) > 0]\n         # By default tests are sorted by alphabetical order by function name.\n@@ -1412,6 +1415,10 @@ def test_file(self, filename):\n                 # comes by default with a \"from sympy import *\"\n                 #exec('from sympy import *') in test.globs\n             test.globs['print_function'] = print_function\n+\n+            old_displayhook = sys.displayhook\n+            use_unicode_prev = setup_pprint()\n+\n             try:\n                 f, t = runner.run(test, compileflags=future_flags,\n                                   out=new.write, clear_globs=False)\n@@ -1423,6 +1430,10 @@ def test_file(self, filename):\n                 self._reporter.doctest_fail(test.name, new.getvalue())\n             else:\n                 self._reporter.test_pass()\n+                sys.displayhook = old_displayhook\n+                interactive_printing.NO_GLOBAL = False\n+                pprint_use_unicode(use_unicode_prev)\n+\n         self._reporter.leaving_filename()\n \n     def get_test_files(self, dir, pat='*.py', init_only=True):\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_ccode.py b/sympy/printing/tests/test_ccode.py\n--- a/sympy/printing/tests/test_ccode.py\n+++ b/sympy/printing/tests/test_ccode.py\n@@ -133,8 +133,12 @@ def test_ccode_inline_function():\n \n def test_ccode_exceptions():\n     assert ccode(gamma(x), standard='C99') == \"tgamma(x)\"\n+    gamma_c89 = ccode(gamma(x), standard='C89')\n+    assert 'not supported in c' in gamma_c89.lower()\n     gamma_c89 = ccode(gamma(x), standard='C89', allow_unknown_functions=False)\n     assert 'not supported in c' in gamma_c89.lower()\n+    gamma_c89 = ccode(gamma(x), standard='C89', allow_unknown_functions=True)\n+    assert not 'not supported in c' in gamma_c89.lower()\n     assert ccode(ceiling(x)) == \"ceil(x)\"\n     assert ccode(Abs(x)) == \"fabs(x)\"\n     assert ccode(gamma(x)) == \"tgamma(x)\"\ndiff --git a/sympy/printing/tests/test_fcode.py b/sympy/printing/tests/test_fcode.py\n--- a/sympy/printing/tests/test_fcode.py\n+++ b/sympy/printing/tests/test_fcode.py\n@@ -168,10 +168,10 @@ def test_implicit():\n def test_not_fortran():\n     x = symbols('x')\n     g = Function('g')\n-    gamma_f = fcode(gamma(x), allow_unknown_functions=False)\n+    gamma_f = fcode(gamma(x))\n     assert gamma_f == \"C     Not supported in Fortran:\\nC     gamma\\n      gamma(x)\"\n     assert fcode(Integral(sin(x))) == \"C     Not supported in Fortran:\\nC     Integral\\n      Integral(sin(x), x)\"\n-    assert fcode(g(x), allow_unknown_functions=False) == \"C     Not supported in Fortran:\\nC     g\\n      g(x)\"\n+    assert fcode(g(x)) == \"C     Not supported in Fortran:\\nC     g\\n      g(x)\"\n \n \n def test_user_functions():\ndiff --git a/sympy/printing/tests/test_octave.py b/sympy/printing/tests/test_octave.py\n--- a/sympy/printing/tests/test_octave.py\n+++ b/sympy/printing/tests/test_octave.py\n@@ -374,6 +374,15 @@ def test_octave_not_supported():\n     )\n \n \n+def test_octave_not_supported_not_on_whitelist():\n+    from sympy import assoc_laguerre\n+    assert mcode(assoc_laguerre(x, y, z)) == (\n+        \"% Not supported in Octave:\\n\"\n+        \"% assoc_laguerre\\n\"\n+        \"assoc_laguerre(x, y, z)\"\n+    )\n+\n+\n def test_octave_expint():\n     assert mcode(expint(1, x)) == \"expint(x)\"\n     assert mcode(expint(2, x)) == (\n",
  "problem_statement": "1.3rc1 codegen regression in octave/julia/jscode\n@asmeurer @bjodah I have a (minor?) regression in codeprinting from e99b756df3291a666ee2d2288daec4253014df40\r\nCan one of you double-check that commit before 1.3?\r\n\r\nOctave codegen prints `laguerre` but is supposed to error on `assoc_laguerre` (untested, apparently).  The above commit breaks that.\n",
  "hints_text": "",
  "created_at": "2018-09-06T18:44:39Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_ccode_exceptions\", \"test_not_fortran\", \"test_octave_not_supported_not_on_whitelist\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_ccode_sqrt\", \"test_ccode_Pow\", \"test_ccode_Max\", \"test_ccode_constants_mathh\", \"test_ccode_constants_other\", \"test_ccode_Rational\", \"test_ccode_Integer\", \"test_ccode_functions\", \"test_ccode_inline_function\", \"test_ccode_user_functions\", \"test_ccode_boolean\", \"test_ccode_Relational\", \"test_ccode_Piecewise\", \"test_ccode_sinc\", \"test_ccode_Piecewise_deep\", \"test_ccode_ITE\", \"test_ccode_settings\", \"test_ccode_Indexed\", \"test_Element\", \"test_ccode_Indexed_without_looking_for_contraction\", \"test_ccode_loops_matrix_vector\", \"test_dummy_loops\", \"test_ccode_loops_add\", \"test_ccode_loops_multiple_contractions\", \"test_ccode_loops_addfactor\", \"test_ccode_loops_multiple_terms\", \"test_dereference_printing\", \"test_Matrix_printing\", \"test_ccode_reserved_words\", \"test_ccode_sign\", \"test_ccode_Assignment\", \"test_ccode_For\", \"test_ccode_Max_Min\", \"test_ccode_standard\", \"test_CCodePrinter\", \"test_C89CodePrinter\", \"test_C99CodePrinter\", \"test_C99CodePrinter__precision\", \"test_get_math_macros\", \"test_ccode_Declaration\", \"test_C99CodePrinter_custom_type\", \"test_MatrixElement_printing\", \"test_subclass_CCodePrinter\", \"test_ccode_math_macros\", \"test_ccode_Type\", \"test_fcode_sign\", \"test_fcode_Pow\", \"test_fcode_Rational\", \"test_fcode_Integer\", \"test_fcode_Float\", \"test_fcode_functions\", \"test_case\", \"test_fcode_functions_with_integers\", \"test_fcode_NumberSymbol\", \"test_fcode_complex\", \"test_implicit\", \"test_user_functions\", \"test_inline_function\", \"test_assign_to\", \"test_line_wrapping\", \"test_fcode_precedence\", \"test_fcode_Logical\", \"test_fcode_Xlogical\", \"test_fcode_Relational\", \"test_fcode_Piecewise\", \"test_wrap_fortran\", \"test_wrap_fortran_keep_d0\", \"test_settings\", \"test_free_form_code_line\", \"test_free_form_continuation_line\", \"test_free_form_comment_line\", \"test_loops\", \"test_fcode_Indexed_without_looking_for_contraction\", \"test_derived_classes\", \"test_indent\", \"test_fcode_For\", \"test_fcode_Declaration\", \"test_aug_assign\", \"test_Integer\", \"test_Rational\", \"test_Function\", \"test_Function_change_name\", \"test_minmax\", \"test_Pow\", \"test_basic_ops\", \"test_1_over_x_and_sqrt\", \"test_mix_number_mult_symbols\", \"test_mix_number_pow_symbols\", \"test_imag\", \"test_constants\", \"test_constants_other\", \"test_boolean\", \"test_KroneckerDelta\", \"test_Matrices\", \"test_vector_entries_hadamard\", \"test_MatrixSymbol\", \"test_special_matrices\", \"test_containers\", \"test_octave_noninline\", \"test_octave_piecewise\", \"test_octave_piecewise_times_const\", \"test_octave_matrix_assign_to\", \"test_octave_matrix_assign_to_more\", \"test_octave_matrix_1x1\", \"test_octave_matrix_elements\", \"test_octave_boolean\", \"test_octave_not_supported\", \"test_octave_expint\", \"test_trick_indent_with_end_else_words\", \"test_haramard\", \"test_sparse\", \"test_sinc\", \"test_trigfun\", \"test_specfun\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.096747",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}