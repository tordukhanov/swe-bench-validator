{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18030",
  "base_commit": "7501960ea18912f9055a32be50bda30805fc0c95",
  "patch": "diff --git a/sympy/polys/polyfuncs.py b/sympy/polys/polyfuncs.py\n--- a/sympy/polys/polyfuncs.py\n+++ b/sympy/polys/polyfuncs.py\n@@ -2,7 +2,7 @@\n \n from __future__ import print_function, division\n \n-from sympy.core import S, Basic, Add, Mul, symbols\n+from sympy.core import S, Basic, Add, Mul, symbols, Dummy\n from sympy.core.compatibility import range\n from sympy.functions.combinatorial.factorials import factorial\n from sympy.polys.polyerrors import (\n@@ -205,13 +205,14 @@ def horner(f, *gens, **args):\n @public\n def interpolate(data, x):\n     \"\"\"\n-    Construct an interpolating polynomial for the data points.\n+    Construct an interpolating polynomial for the data points\n+    evaluated at point x (which can be symbolic or numeric).\n \n     Examples\n     ========\n \n     >>> from sympy.polys.polyfuncs import interpolate\n-    >>> from sympy.abc import x\n+    >>> from sympy.abc import a, b, x\n \n     A list is interpreted as though it were paired with a range starting\n     from 1:\n@@ -232,30 +233,39 @@ def interpolate(data, x):\n     >>> interpolate({-1: 2, 1: 2, 2: 5}, x)\n     x**2 + 1\n \n+    If the interpolation is going to be used only once then the\n+    value of interest can be passed instead of passing a symbol:\n+\n+    >>> interpolate([1, 4, 9], 5)\n+    25\n+\n+    Symbolic coordinates are also supported:\n+\n+    >>> [(i,interpolate((a, b), i)) for i in range(1, 4)]\n+    [(1, a), (2, b), (3, -a + 2*b)]\n     \"\"\"\n     n = len(data)\n-    poly = None\n \n     if isinstance(data, dict):\n+        if x in data:\n+            return S(data[x])\n         X, Y = list(zip(*data.items()))\n-        poly = interpolating_poly(n, x, X, Y)\n     else:\n         if isinstance(data[0], tuple):\n             X, Y = list(zip(*data))\n-            poly = interpolating_poly(n, x, X, Y)\n+            if x in X:\n+                return S(Y[X.index(x)])\n         else:\n+            if x in range(1, n + 1):\n+                return S(data[x - 1])\n             Y = list(data)\n+            X = list(range(1, n + 1))\n \n-            numert = Mul(*[(x - i) for i in range(1, n + 1)])\n-            denom = -factorial(n - 1) if n%2 == 0 else factorial(n - 1)\n-            coeffs = []\n-            for i in range(1, n + 1):\n-                coeffs.append(numert/(x - i)/denom)\n-                denom = denom/(i - n)*i\n-\n-            poly = Add(*[coeff*y for coeff, y in zip(coeffs, Y)])\n-\n-    return poly.expand()\n+    try:\n+        return interpolating_poly(n, x, X, Y).expand()\n+    except ValueError:\n+        d = Dummy()\n+        return interpolating_poly(n, d, X, Y).expand().subs(d, x)\n \n \n @public\ndiff --git a/sympy/polys/specialpolys.py b/sympy/polys/specialpolys.py\n--- a/sympy/polys/specialpolys.py\n+++ b/sympy/polys/specialpolys.py\n@@ -4,6 +4,7 @@\n \n from sympy.core import Add, Mul, Symbol, sympify, Dummy, symbols\n from sympy.core.compatibility import range, string_types\n+from sympy.core.containers import Tuple\n from sympy.core.singleton import S\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.ntheory import nextprime\n@@ -19,7 +20,7 @@\n from sympy.polys.polyclasses import DMP\n from sympy.polys.polytools import Poly, PurePoly\n from sympy.polys.polyutils import _analyze_gens\n-from sympy.utilities import subsets, public\n+from sympy.utilities import subsets, public, filldedent\n \n \n @public\n@@ -142,15 +143,29 @@ def random_poly(x, n, inf, sup, domain=ZZ, polys=False):\n \n @public\n def interpolating_poly(n, x, X='x', Y='y'):\n-    \"\"\"Construct Lagrange interpolating polynomial for ``n`` data points. \"\"\"\n+    \"\"\"Construct Lagrange interpolating polynomial for ``n``\n+    data points. If a sequence of values are given for ``X`` and ``Y``\n+    then the first ``n`` values will be used.\n+    \"\"\"\n+    ok = getattr(x, 'free_symbols', None)\n+\n     if isinstance(X, string_types):\n         X = symbols(\"%s:%s\" % (X, n))\n+    elif ok and ok & Tuple(*X).free_symbols:\n+        ok = False\n \n     if isinstance(Y, string_types):\n         Y = symbols(\"%s:%s\" % (Y, n))\n+    elif ok and ok & Tuple(*Y).free_symbols:\n+        ok = False\n+\n+    if not ok:\n+        raise ValueError(filldedent('''\n+            Expecting symbol for x that does not appear in X or Y.\n+            Use `interpolate(list(zip(X, Y)), x)` instead.'''))\n \n     coeffs = []\n-    numert = Mul(*[(x - u) for u in X])\n+    numert = Mul(*[x - X[i] for i in range(n)])\n \n     for i in range(n):\n         numer = numert/(x - X[i])\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_polyfuncs.py b/sympy/polys/tests/test_polyfuncs.py\n--- a/sympy/polys/tests/test_polyfuncs.py\n+++ b/sympy/polys/tests/test_polyfuncs.py\n@@ -84,6 +84,11 @@ def test_interpolate():\n         -S(13)*x**3/24 + S(12)*x**2 - S(2003)*x/24 + 187\n     assert interpolate([(1, 3), (0, 6), (2, 5), (5, 7), (-2, 4)], x) == \\\n         S(-61)*x**4/280 + S(247)*x**3/210 + S(139)*x**2/280 - S(1871)*x/420 + 6\n+    assert interpolate((9, 4, 9), 3) == 9\n+    assert interpolate((1, 9, 16), 1) is S.One\n+    assert interpolate(((x, 1), (2, 3)), x) is S.One\n+    assert interpolate(dict([(x, 1), (2, 3)]), x) is S.One\n+    assert interpolate(((2, x), (1, 3)), x) == x**2 - 4*x + 6\n \n \n def test_rational_interpolate():\ndiff --git a/sympy/polys/tests/test_specialpolys.py b/sympy/polys/tests/test_specialpolys.py\n--- a/sympy/polys/tests/test_specialpolys.py\n+++ b/sympy/polys/tests/test_specialpolys.py\n@@ -1,6 +1,6 @@\n \"\"\"Tests for functions for generating interesting polynomials. \"\"\"\n \n-from sympy import Poly, ZZ, symbols, sqrt, prime, Add\n+from sympy import Poly, ZZ, symbols, sqrt, prime, Add, S\n from sympy.utilities.iterables import permute_signs\n from sympy.utilities.pytest import raises\n \n@@ -96,6 +96,20 @@ def test_interpolating_poly():\n         y2*(x - x0)*(x - x1)*(x - x3)/((x2 - x0)*(x2 - x1)*(x2 - x3)) + \\\n         y3*(x - x0)*(x - x1)*(x - x2)/((x3 - x0)*(x3 - x1)*(x3 - x2))\n \n+    raises(ValueError, lambda:\n+        interpolating_poly(2, x, (x, 2), (1, 3)))\n+    raises(ValueError, lambda:\n+        interpolating_poly(2, x, (x + y, 2), (1, 3)))\n+    raises(ValueError, lambda:\n+        interpolating_poly(2, x + y, (x, 2), (1, 3)))\n+    raises(ValueError, lambda:\n+        interpolating_poly(2, 3, (4, 5), (6, 7)))\n+    raises(ValueError, lambda:\n+        interpolating_poly(2, 3, (4, 5), (6, 7, 8)))\n+    assert interpolating_poly(0, x, (1, 2), (3, 4)) == 0\n+    assert interpolating_poly(1, x, (1, 2), (3, 4)) == 3\n+    assert interpolating_poly(2, x, (1, 2), (3, 4)) == x + 2\n+\n \n def test_fateman_poly_F_1():\n     f, g, h = fateman_poly_F_1(1)\n",
  "problem_statement": "interpolate could provide value instead of nan\n```python\r\n>>> y = (18,25,43,70,115)\r\n>>> interpolate(y,5)\r\nnan\r\n```\r\nSince the default x value for interpolation is `range(1, len(y)+1)` the interpolation at 5 could just return 115 instead of nan.\n",
  "hints_text": "The simplest fix is to have the function check to see if x is not a symbol:\r\n```python\r\n>>> interpolate((1,2,3),1)\r\nnan\r\n>>> interpolate((1,2,3),x).subs(x,1)\r\n1\r\n```\r\nSo in the function a check at the top would be like\r\n```python\r\nif not isinstance(x, Symbol):\r\n    d = Dummy()\r\n    return interpolate(data, d).subs(d, x)\r\n```\r\nOr the docstring could be annotated to say that `x` should be a Symbol.\nThere now exist two functions, `interpolate` and `interpolating_poly`, that construct an interpolating polynomial, only their parameters are slightly different. It is reasonable that `interpolating_poly` would return a polynomial (expression) in the given symbol. However, `interpolate` could return the *value* of the polynomial at the given *point*. So I am +1 for this change.",
  "created_at": "2019-12-09T15:00:53Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_interpolate\", \"test_interpolating_poly\"]",
  "PASS_TO_PASS": "[\"test_symmetrize\", \"test_horner\", \"test_rational_interpolate\", \"test_swinnerton_dyer_poly\", \"test_cyclotomic_poly\", \"test_symmetric_poly\", \"test_random_poly\", \"test_fateman_poly_F_1\", \"test_fateman_poly_F_2\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.119028",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}