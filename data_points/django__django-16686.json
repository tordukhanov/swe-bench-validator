{
  "repo": "django/django",
  "instance_id": "django__django-16686",
  "base_commit": "f5c5c571d3b87a78d005ea6f21959388d1747696",
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2135,11 +2135,6 @@ def add_fields(self, field_names, allow_m2m=True):\n                 # For lookups spanning over relationships, show the error\n                 # from the model on which the lookup failed.\n                 raise\n-            elif name in self.annotations:\n-                raise FieldError(\n-                    \"Cannot select the '%s' alias. Use annotate() to promote \"\n-                    \"it.\" % name\n-                )\n             else:\n                 names = sorted(\n                     [\n@@ -2385,7 +2380,17 @@ def set_values(self, fields):\n                         extra_names.append(f)\n                     elif f in self.annotation_select:\n                         annotation_names.append(f)\n+                    elif f in self.annotations:\n+                        raise FieldError(\n+                            f\"Cannot select the '{f}' alias. Use annotate() to \"\n+                            \"promote it.\"\n+                        )\n                     else:\n+                        # Call `names_to_path` to ensure a FieldError including\n+                        # annotations about to be masked as valid choices if\n+                        # `f` is not resolvable.\n+                        if self.annotation_select:\n+                            self.names_to_path(f.split(LOOKUP_SEP), self.model._meta)\n                         field_names.append(f)\n             self.set_extra_mask(extra_names)\n             self.set_annotation_mask(annotation_names)\n",
  "test_patch": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -33,6 +33,7 @@\n     Lower,\n     Trim,\n )\n+from django.db.models.sql.query import get_field_names_from_opts\n from django.test import TestCase, skipUnlessDBFeature\n from django.test.utils import register_lookup\n \n@@ -465,6 +466,16 @@ def test_filter_wrong_annotation(self):\n                 )\n             )\n \n+    def test_values_wrong_annotation(self):\n+        expected_message = (\n+            \"Cannot resolve keyword 'annotation_typo' into field. Choices are: %s\"\n+        )\n+        article_fields = \", \".join(\n+            [\"annotation\"] + sorted(get_field_names_from_opts(Book._meta))\n+        )\n+        with self.assertRaisesMessage(FieldError, expected_message % article_fields):\n+            Book.objects.annotate(annotation=Value(1)).values_list(\"annotation_typo\")\n+\n     def test_decimal_annotation(self):\n         salary = Decimal(10) ** -Employee._meta.get_field(\"salary\").decimal_places\n         Employee.objects.create(\n",
  "problem_statement": "values() doesn't mention annotations as valid choices on resolving error\nDescription\n\t\nWhen doing\nBook.objects.annotate(annotation=Value(1)).values(\"annotation_type\")\nThe resulting FieldError doesn't mention annotation as a valid choice\nFieldError: Cannot resolve keyword 'annotation_typo' into field. Choices are: age, book, book_contact_set, friends, id, name\n",
  "hints_text": "",
  "created_at": "2023-03-25T18:39:07Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_values_wrong_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_values_wrong_annotation)\"]",
  "PASS_TO_PASS": "[\"test_aggregate_alias (annotations.tests.AliasTests.test_aggregate_alias)\", \"test_alias_after_annotation (annotations.tests.AliasTests.test_alias_after_annotation)\", \"test_alias_annotate_with_aggregation (annotations.tests.AliasTests.test_alias_annotate_with_aggregation)\", \"test_alias_annotation_expression (annotations.tests.AliasTests.test_alias_annotation_expression)\", \"test_alias_default_alias_expression (annotations.tests.AliasTests.test_alias_default_alias_expression)\", \"test_alias_sql_injection (annotations.tests.AliasTests.test_alias_sql_injection)\", \"test_basic_alias (annotations.tests.AliasTests.test_basic_alias)\", \"test_basic_alias_annotation (annotations.tests.AliasTests.test_basic_alias_annotation)\", \"test_basic_alias_f_annotation (annotations.tests.AliasTests.test_basic_alias_f_annotation)\", \"test_basic_alias_f_transform_annotation (annotations.tests.AliasTests.test_basic_alias_f_transform_annotation)\", \"test_dates_alias (annotations.tests.AliasTests.test_dates_alias)\", \"test_datetimes_alias (annotations.tests.AliasTests.test_datetimes_alias)\", \"test_defer_only_alias (annotations.tests.AliasTests.test_defer_only_alias)\", \"test_filter_alias_agg_with_double_f (annotations.tests.AliasTests.test_filter_alias_agg_with_double_f)\", \"test_filter_alias_with_double_f (annotations.tests.AliasTests.test_filter_alias_with_double_f)\", \"test_filter_alias_with_f (annotations.tests.AliasTests.test_filter_alias_with_f)\", \"test_joined_alias_annotation (annotations.tests.AliasTests.test_joined_alias_annotation)\", \"test_order_by_alias (annotations.tests.AliasTests.test_order_by_alias)\", \"test_order_by_alias_aggregate (annotations.tests.AliasTests.test_order_by_alias_aggregate)\", \"test_overwrite_alias_with_annotation (annotations.tests.AliasTests.test_overwrite_alias_with_annotation)\", \"test_overwrite_annotation_with_alias (annotations.tests.AliasTests.test_overwrite_annotation_with_alias)\", \"test_update_with_alias (annotations.tests.AliasTests.test_update_with_alias)\", \"test_values_alias (annotations.tests.AliasTests.test_values_alias)\", \"test_aggregate_over_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_aggregate_over_annotation)\", \"test_aggregate_over_full_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_aggregate_over_full_expression_annotation)\", \"test_alias_forbidden_chars (annotations.tests.NonAggregateAnnotationTestCase.test_alias_forbidden_chars)\", \"test_alias_sql_injection (annotations.tests.NonAggregateAnnotationTestCase.test_alias_sql_injection)\", \"test_annotate_exists (annotations.tests.NonAggregateAnnotationTestCase.test_annotate_exists)\", \"test_annotate_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_annotate_with_aggregation)\", \"test_annotation_aggregate_with_m2o (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_aggregate_with_m2o)\", \"test_annotation_and_alias_filter_in_subquery (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_and_alias_filter_in_subquery)\", \"test_annotation_and_alias_filter_related_in_subquery (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_and_alias_filter_related_in_subquery)\", \"test_annotation_exists_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_exists_aggregate_values_chaining)\", \"test_annotation_exists_none_query (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_exists_none_query)\", \"test_annotation_filter_with_subquery (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_filter_with_subquery)\", \"test_annotation_in_f_grouped_by_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_in_f_grouped_by_annotation)\", \"test_annotation_reverse_m2m (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_reverse_m2m)\", \"test_annotation_subquery_and_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_subquery_and_aggregate_values_chaining)\", \"test_annotation_subquery_outerref_transform (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_subquery_outerref_transform)\", \"test_annotation_with_m2m (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_with_m2m)\", \"test_arguments_must_be_expressions (annotations.tests.NonAggregateAnnotationTestCase.test_arguments_must_be_expressions)\", \"test_basic_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_basic_annotation)\", \"test_basic_f_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_basic_f_annotation)\", \"test_boolean_value_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_boolean_value_annotation)\", \"test_chaining_annotation_filter_with_m2m (annotations.tests.NonAggregateAnnotationTestCase.test_chaining_annotation_filter_with_m2m)\", \"test_chaining_transforms (annotations.tests.NonAggregateAnnotationTestCase.test_chaining_transforms)\", \"Columns are aligned in the correct order for resolve_columns. This test\", \"test_column_field_ordering_with_deferred (annotations.tests.NonAggregateAnnotationTestCase.test_column_field_ordering_with_deferred)\", \"test_combined_annotation_commutative (annotations.tests.NonAggregateAnnotationTestCase.test_combined_annotation_commutative)\", \"test_combined_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_combined_expression_annotation_with_aggregation)\", \"test_combined_f_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_combined_f_expression_annotation_with_aggregation)\", \"test_custom_functions (annotations.tests.NonAggregateAnnotationTestCase.test_custom_functions)\", \"test_custom_functions_can_ref_other_functions (annotations.tests.NonAggregateAnnotationTestCase.test_custom_functions_can_ref_other_functions)\", \"test_custom_transform_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_custom_transform_annotation)\", \"test_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_decimal_annotation)\", \"Deferred attributes can be referenced by an annotation,\", \"test_empty_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_empty_expression_annotation)\", \"test_empty_queryset_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_empty_queryset_annotation)\", \"test_filter_agg_with_double_f (annotations.tests.NonAggregateAnnotationTestCase.test_filter_agg_with_double_f)\", \"test_filter_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation)\", \"test_filter_annotation_with_double_f (annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation_with_double_f)\", \"test_filter_annotation_with_f (annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation_with_f)\", \"test_filter_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_filter_decimal_annotation)\", \"test_filter_wrong_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_filter_wrong_annotation)\", \"test_full_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_full_expression_annotation)\", \"test_full_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_full_expression_annotation_with_aggregation)\", \"test_full_expression_wrapped_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_full_expression_wrapped_annotation)\", \"test_grouping_by_q_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_grouping_by_q_expression_annotation)\", \"test_joined_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_joined_annotation)\", \"test_joined_transformed_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_joined_transformed_annotation)\", \"test_mixed_type_annotation_date_interval (annotations.tests.NonAggregateAnnotationTestCase.test_mixed_type_annotation_date_interval)\", \"test_mixed_type_annotation_numbers (annotations.tests.NonAggregateAnnotationTestCase.test_mixed_type_annotation_numbers)\", \"Fields on an inherited model can be referenced by an\", \"Annotating None onto a model round-trips\", \"test_order_by_aggregate (annotations.tests.NonAggregateAnnotationTestCase.test_order_by_aggregate)\", \"test_order_by_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_order_by_annotation)\", \"test_q_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_q_expression_annotation_with_aggregation)\", \"test_raw_sql_with_inherited_field (annotations.tests.NonAggregateAnnotationTestCase.test_raw_sql_with_inherited_field)\", \"test_update_with_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_update_with_annotation)\", \"Annotations can reference fields in a values clause,\", \"test_values_with_pk_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_values_with_pk_annotation)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.768620",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}