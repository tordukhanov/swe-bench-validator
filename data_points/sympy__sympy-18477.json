{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18477",
  "base_commit": "93d836fcdb38c6b3235f785adc45b34eb2a64a9e",
  "patch": "diff --git a/sympy/printing/glsl.py b/sympy/printing/glsl.py\n--- a/sympy/printing/glsl.py\n+++ b/sympy/printing/glsl.py\n@@ -53,7 +53,7 @@ class GLSLPrinter(CodePrinter):\n         'allow_unknown_functions': False,\n         'contract': True,\n         'error_on_reserved': False,\n-        'reserved_word_suffix': '_'\n+        'reserved_word_suffix': '_',\n     }\n \n     def __init__(self, settings={}):\ndiff --git a/sympy/printing/jscode.py b/sympy/printing/jscode.py\n--- a/sympy/printing/jscode.py\n+++ b/sympy/printing/jscode.py\n@@ -57,7 +57,7 @@ class JavascriptCodePrinter(CodePrinter):\n         'user_functions': {},\n         'human': True,\n         'allow_unknown_functions': False,\n-        'contract': True\n+        'contract': True,\n     }  # type: Dict[str, Any]\n \n     def __init__(self, settings={}):\ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -125,6 +125,7 @@ class LatexPrinter(Printer):\n     printmethod = \"_latex\"\n \n     _default_settings = {\n+        \"full_prec\": False,\n         \"fold_frac_powers\": False,\n         \"fold_func_brackets\": False,\n         \"fold_short_frac\": None,\n@@ -144,6 +145,8 @@ class LatexPrinter(Printer):\n         \"gothic_re_im\": False,\n         \"decimal_separator\": \"period\",\n         \"perm_cyclic\": True,\n+        \"min\": None,\n+        \"max\": None,\n     }  # type: Dict[str, Any]\n \n     def __init__(self, settings=None):\n@@ -414,7 +417,10 @@ def _print_AppliedPermutation(self, expr):\n     def _print_Float(self, expr):\n         # Based off of that in StrPrinter\n         dps = prec_to_dps(expr._prec)\n-        str_real = mlib.to_str(expr._mpf_, dps, strip_zeros=True)\n+        strip = False if self._settings['full_prec'] else True\n+        low = self._settings[\"min\"] if \"min\" in self._settings else None\n+        high = self._settings[\"max\"] if \"max\" in self._settings else None\n+        str_real = mlib.to_str(expr._mpf_, dps, strip_zeros=strip, min_fixed=low, max_fixed=high)\n \n         # Must always have a mul symbol (as 2.5 10^{20} just looks odd)\n         # thus we use the number separator\n@@ -2550,8 +2556,8 @@ def translate(s):\n         return s\n \n \n-def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n-          fold_short_frac=None, inv_trig_style=\"abbreviated\",\n+def latex(expr, full_prec=False, min=None, max=None, fold_frac_powers=False,\n+          fold_func_brackets=False, fold_short_frac=None, inv_trig_style=\"abbreviated\",\n           itex=False, ln_notation=False, long_frac_ratio=None,\n           mat_delim=\"[\", mat_str=None, mode=\"plain\", mul_symbol=None,\n           order=None, symbol_names=None, root_notation=True,\n@@ -2561,6 +2567,8 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n \n     Parameters\n     ==========\n+    full_prec: boolean, optional\n+        If set to True, a floating point number is printed with full precision.\n     fold_frac_powers : boolean, optional\n         Emit ``^{p/q}`` instead of ``^{\\frac{p}{q}}`` for fractional powers.\n     fold_func_brackets : boolean, optional\n@@ -2628,6 +2636,12 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n         when ``comma`` is specified. Lists, sets, and tuple are printed with semicolon\n         separating the elements when ``comma`` is chosen. For example, [1; 2; 3] when\n         ``comma`` is chosen and [1,2,3] for when ``period`` is chosen.\n+    min: Integer or None, optional\n+        Sets the lower bound for the exponent to print floating point numbers in\n+        fixed-point format.\n+    max: Integer or None, optional\n+        Sets the upper bound for the exponent to print floating point numbers in\n+        fixed-point format.\n \n     Notes\n     =====\n@@ -2739,6 +2753,7 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n         symbol_names = {}\n \n     settings = {\n+        'full_prec': full_prec,\n         'fold_frac_powers': fold_frac_powers,\n         'fold_func_brackets': fold_func_brackets,\n         'fold_short_frac': fold_short_frac,\n@@ -2758,6 +2773,8 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n         'gothic_re_im': gothic_re_im,\n         'decimal_separator': decimal_separator,\n         'perm_cyclic' : perm_cyclic,\n+        'min': min,\n+        'max': max,\n     }\n \n     return LatexPrinter(settings).doprint(expr)\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -92,7 +92,7 @@ class AbstractPythonCodePrinter(CodePrinter):\n         inline=True,\n         fully_qualified_modules=True,\n         contract=False,\n-        standard='python3'\n+        standard='python3',\n     )\n \n     def __init__(self, settings=None):\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -24,6 +24,8 @@ class StrPrinter(Printer):\n         \"sympy_integers\": False,\n         \"abbrev\": False,\n         \"perm_cyclic\": True,\n+        \"min\": None,\n+        \"max\": None,\n     }  # type: Dict[str, Any]\n \n     _relationals = dict()  # type: Dict[str, str]\n@@ -691,7 +693,9 @@ def _print_Float(self, expr):\n             strip = True\n         elif self._settings[\"full_prec\"] == \"auto\":\n             strip = self._print_level > 1\n-        rv = mlib_to_str(expr._mpf_, dps, strip_zeros=strip)\n+        low = self._settings[\"min\"] if \"min\" in self._settings else None\n+        high = self._settings[\"max\"] if \"max\" in self._settings else None\n+        rv = mlib_to_str(expr._mpf_, dps, strip_zeros=strip, min_fixed=low, max_fixed=high)\n         if rv.startswith('-.0'):\n             rv = '-0.' + rv[3:]\n         elif rv.startswith('.0'):\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -214,6 +214,14 @@ def test_latex_Float():\n     assert latex(Float(1.0e-100)) == r\"1.0 \\cdot 10^{-100}\"\n     assert latex(Float(1.0e-100), mul_symbol=\"times\") == \\\n         r\"1.0 \\times 10^{-100}\"\n+    assert latex(Float('10000.0'), full_prec=False, min=-2, max=2) == \\\n+        r\"1.0 \\cdot 10^{4}\"\n+    assert latex(Float('10000.0'), full_prec=False, min=-2, max=4) == \\\n+        r\"1.0 \\cdot 10^{4}\"\n+    assert latex(Float('10000.0'), full_prec=False, min=-2, max=5) == \\\n+        r\"10000.0\"\n+    assert latex(Float('0.099999'), full_prec=True,  min=-2, max=5) == \\\n+        r\"9.99990000000000 \\cdot 10^{-2}\"\n \n \n def test_latex_vector_expressions():\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -513,6 +513,10 @@ def test_Float():\n                                      '5028841971693993751058209749445923')\n     assert str(pi.round(-1)) == '0.0'\n     assert str((pi**400 - (pi**400).round(1)).n(2)) == '-0.e+88'\n+    assert sstr(Float(\"100\"), full_prec=False, min=-2, max=2) == '1.0e+2'\n+    assert sstr(Float(\"100\"), full_prec=False, min=-2, max=3) == '100.0'\n+    assert sstr(Float(\"0.1\"), full_prec=False, min=-2, max=3) == '0.1'\n+    assert sstr(Float(\"0.099\"), min=-2, max=3) == '9.90000000000000e-2'\n \n \n def test_Relational():\n",
  "problem_statement": "Allow to set min_fixed and max_fixed for Float in the printers\nThe mpmath printer has `min_fixed` and `max_fixed` settings, which should be exposed to the printers. Right now, only the `strip_zeros` option is exposed. \n\nWe should also unify the Float printer for the various printers. For example, the LaTeX printer doesn't have the same behavior as the string printer. \n\n",
  "hints_text": "Related: http://stackoverflow.com/q/25222681/161801\n\nTo fix issue #7847 I have done the following changes to the code in sympy/sympy/printing/str.py\nWill this work?\n\n``` python\nclass StrPrinter(Printer):\n    printmethod = \"_sympystr\"\n    _default_settings = {\n        \"order\": None,\n        \"full_prec\": \"auto\",\n        \"min\": None,\n        \"max\": None,\n    }\n```\n\n``` python\ndef _print_Float(self, expr):\n        prec = expr._prec\n        low = self._settings[\"min\"]\n        high = self._settings[\"max\"]\n        if prec < 5:\n            dps = 0\n        else:\n            dps = prec_to_dps(expr._prec) \n        if self._settings[\"full_prec\"] is True:\n            strip = False\n        elif self._settings[\"full_prec\"] is False:\n            strip = True\n        elif self._settings[\"full_prec\"] == \"auto\":\n            strip = self._print_level > 1\n        if low is None:\n            low = min(-(dps//3), -5)\n        if high is None:\n            high = dps\n        rv = mlib.to_str(expr._mpf_, dps, strip_zeros=strip, min_fixed=low, max_fixed=high)\n        if rv.startswith('-.0'):\n            rv = '-0.' + rv[3:]\n        elif rv.startswith('.0'):\n            rv = '0.' + rv[2:]\n        return rv\n```\n\n@MridulS You should send a pull request for your changes. \n\n@hargup I just wanted to confirm whether this will work or not.\n\n> I just wanted to confirm whether this will work or not\n\nWe can see that at the Pull Request, there we can see the results of the travis build. Also the reviewers will be able to directly pull your changes on the local into their local system. If you have made the changes sending the pull request should not be much work.\n\n@MridulS  Hello the bug has been fixed? \nIf not, would like to know more information to resolve this bug. You need help to implement anything else?\n\n@lohmanndouglas You could add @MridulS's github fork of sympy as a remote and pull down his branch with his fix in https://github.com/sympy/sympy/issues/7847. Then play with it and see if it works.\n\n@moorepants unfortunately i have deleted that branch. @lohmanndouglas you can still see the changes I tried at https://github.com/sympy/sympy/commit/61838749a78082453be4e779cb68e88605d49244\n\nIs this issue fixed? I would like to take this on.\n@Yathartha22 I think this is still open, if you're still interested --- though it's been a while...\r\n\r\nThe [SO question that (partially) prompted this has over 1000 views](https://stackoverflow.com/questions/25222681/scientific-exponential-notation-with-sympy-in-an-ipython-notebook) now.\nSure I will take this up.\nIs this issue fixed? If not I'd like to work on it.\nI don't think so. I don't see any cross-referenced pull requests listed here. ",
  "created_at": "2020-01-27T08:27:23Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_latex_Float\", \"test_Float\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_productset\", \"test_set_operators_parenthesis\", \"test_latex_Complexes\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_mathieu\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_fancyset_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_KroneckerProduct_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_14041\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_AppliedPermutation\", \"test_PermutationMatrix\", \"test_imaginary_unit\", \"test_text_re_im\", \"test_DiffGeomMethods\", \"test_unit_printing\", \"test_issue_17092\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_EulerGamma\", \"test_Exp\", \"test_factorial\", \"test_Function\", \"test_Geometry\", \"test_GoldenRatio\", \"test_TribonacciConstant\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integer\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_sqrt\", \"test_Rational\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_GroebnerBasis\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_empty_printer\", \"test_RandomDomain\", \"test_FiniteSet\", \"test_UniversalSet\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\", \"test_MatrixExpressions\", \"test_Subs_printing\", \"test_issue_15716\", \"test_str_special_matrices\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.123293",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}