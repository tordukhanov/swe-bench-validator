{
  "repo": "django/django",
  "instance_id": "django__django-12734",
  "base_commit": "505fec6badba0622bbf97bb659188c3d62a9bc58",
  "patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -358,11 +358,28 @@ def _alter_field(self, model, old_field, new_field, old_type, new_type,\n             return self.execute(self._rename_field_sql(model._meta.db_table, old_field, new_field, new_type))\n         # Alter by remaking table\n         self._remake_table(model, alter_field=(old_field, new_field))\n-        # Rebuild tables with FKs pointing to this field if the PK type changed.\n-        if old_field.primary_key and new_field.primary_key and old_type != new_type:\n-            for rel in new_field.model._meta.related_objects:\n-                if not rel.many_to_many:\n-                    self._remake_table(rel.related_model)\n+        # Rebuild tables with FKs pointing to this field.\n+        if new_field.unique and old_type != new_type:\n+            related_models = set()\n+            opts = new_field.model._meta\n+            for remote_field in opts.related_objects:\n+                # Ignore self-relationship since the table was already rebuilt.\n+                if remote_field.related_model == model:\n+                    continue\n+                if not remote_field.many_to_many:\n+                    if remote_field.field_name == new_field.name:\n+                        related_models.add(remote_field.related_model)\n+                elif new_field.primary_key and remote_field.through._meta.auto_created:\n+                    related_models.add(remote_field.through)\n+            if new_field.primary_key:\n+                for many_to_many in opts.many_to_many:\n+                    # Ignore self-relationship since the table was already rebuilt.\n+                    if many_to_many.related_model == model:\n+                        continue\n+                    if many_to_many.remote_field.through._meta.auto_created:\n+                        related_models.add(many_to_many.remote_field.through)\n+            for related_model in related_models:\n+                self._remake_table(related_model)\n \n     def _alter_many_to_many(self, model, old_field, new_field, strict):\n         \"\"\"Alter M2Ms to repoint their to= endpoints.\"\"\"\n",
  "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -3,7 +3,6 @@\n     IntegrityError, connection, migrations, models, transaction,\n )\n from django.db.migrations.migration import Migration\n-from django.db.migrations.operations import CreateModel\n from django.db.migrations.operations.fields import FieldOperation\n from django.db.migrations.state import ModelState, ProjectState\n from django.db.transaction import atomic\n@@ -1276,6 +1275,16 @@ def test_alter_field_pk_fk(self):\n         Tests the AlterField operation on primary keys changes any FKs pointing to it.\n         \"\"\"\n         project_state = self.set_up_test_model(\"test_alflpkfk\", related_model=True)\n+        project_state = self.apply_operations('test_alflpkfk', project_state, [\n+            migrations.CreateModel('Stable', fields=[\n+                ('ponies', models.ManyToManyField('Pony')),\n+            ]),\n+            migrations.AddField(\n+                'Pony',\n+                'stables',\n+                models.ManyToManyField('Stable'),\n+            ),\n+        ])\n         # Test the state alteration\n         operation = migrations.AlterField(\"Pony\", \"id\", models.FloatField(primary_key=True))\n         new_state = project_state.clone()\n@@ -1295,8 +1304,26 @@ def assertIdTypeEqualsFkType():\n                     for c in connection.introspection.get_table_description(cursor, \"test_alflpkfk_rider\")\n                     if c.name == \"pony_id\"\n                 ][0]\n+                m2m_fk_type, m2m_fk_null = [\n+                    (c.type_code, c.null_ok)\n+                    for c in connection.introspection.get_table_description(\n+                        cursor,\n+                        'test_alflpkfk_pony_stables',\n+                    ) if c.name == 'pony_id'\n+                ][0]\n+                remote_m2m_fk_type, remote_m2m_fk_null = [\n+                    (c.type_code, c.null_ok)\n+                    for c in connection.introspection.get_table_description(\n+                        cursor,\n+                        'test_alflpkfk_stable_ponies',\n+                    ) if c.name == 'pony_id'\n+                ][0]\n             self.assertEqual(id_type, fk_type)\n+            self.assertEqual(id_type, m2m_fk_type)\n+            self.assertEqual(id_type, remote_m2m_fk_type)\n             self.assertEqual(id_null, fk_null)\n+            self.assertEqual(id_null, m2m_fk_null)\n+            self.assertEqual(id_null, remote_m2m_fk_null)\n \n         assertIdTypeEqualsFkType()\n         # Test the database alteration\n@@ -1314,7 +1341,7 @@ def test_alter_field_reloads_state_on_fk_with_to_field_target_type_change(self):\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel('Rider', fields=[\n                 ('id', models.AutoField(primary_key=True)),\n-                ('code', models.PositiveIntegerField(unique=True)),\n+                ('code', models.IntegerField(unique=True)),\n             ]),\n             migrations.CreateModel('Pony', fields=[\n                 ('id', models.AutoField(primary_key=True)),\n@@ -1327,6 +1354,18 @@ def test_alter_field_reloads_state_on_fk_with_to_field_target_type_change(self):\n             models.CharField(max_length=100, unique=True),\n         )\n         self.apply_operations(app_label, project_state, operations=[operation])\n+        id_type, id_null = [\n+            (c.type_code, c.null_ok)\n+            for c in self.get_table_description('%s_rider' % app_label)\n+            if c.name == 'code'\n+        ][0]\n+        fk_type, fk_null = [\n+            (c.type_code, c.null_ok)\n+            for c in self.get_table_description('%s_pony' % app_label)\n+            if c.name == 'rider_id'\n+        ][0]\n+        self.assertEqual(id_type, fk_type)\n+        self.assertEqual(id_null, fk_null)\n \n     @skipUnlessDBFeature('supports_foreign_keys')\n     def test_alter_field_reloads_state_on_fk_with_to_field_related_name_target_type_change(self):\n@@ -1754,7 +1793,7 @@ def test_add_constraint(self):\n     def test_add_constraint_percent_escaping(self):\n         app_label = 'add_constraint_string_quoting'\n         operations = [\n-            CreateModel(\n+            migrations.CreateModel(\n                 'Author',\n                 fields=[\n                     ('id', models.AutoField(primary_key=True)),\n@@ -1820,7 +1859,7 @@ def test_add_or_constraint(self):\n     def test_add_constraint_combinable(self):\n         app_label = 'test_addconstraint_combinable'\n         operations = [\n-            CreateModel(\n+            migrations.CreateModel(\n                 'Book',\n                 fields=[\n                     ('id', models.AutoField(primary_key=True)),\n@@ -2917,7 +2956,11 @@ def test_indexes_ignore_swapped(self):\n class TestCreateModel(SimpleTestCase):\n \n     def test_references_model_mixin(self):\n-        CreateModel('name', [], bases=(Mixin, models.Model)).references_model('other_model', 'migrations')\n+        migrations.CreateModel(\n+            'name',\n+            fields=[],\n+            bases=(Mixin, models.Model),\n+        ).references_model('other_model', 'migrations')\n \n \n class FieldOperationTests(SimpleTestCase):\n",
  "problem_statement": "Migration doesn't detect precision changes in fields that ManyToMany points to.\nDescription\n\t\nIn my case was:\nmodels.py:\nclass Vulnerability(models.Model):\n\tcve_id = models.CharField(max_length=15, primary_key=True)\n\tapp = models.ManyToManyField(AppVersion)\n\tclass Meta:\n\t\tmanaged = True\nLater, i changed cve_id max_length to 100 and did migration:\noperations = [\n\t\tmigrations.AlterField(\n\t\t\tmodel_name='vulnerability',\n\t\t\tname='cve_id',\n\t\t\tfield=models.CharField(max_length=100, primary_key=True, serialize=False),\n\t\t),\n\t]\nIn result:\ncve_id field length was changed, but vulnerability_id field length in table vulnerability_app remain unchanged\n",
  "hints_text": "Thanks I was able to reproduce this issue on SQLite (ForeignKeys are not affected).\nI have not been able to reproduce this on my machine. Could you kindly provide me with a minimal code sample, so that I could get a hint of what's going wrong here? Replying to felixxm: Thanks I was able to reproduce this issue on SQLite (ForeignKeys are not affected).\nSanskar it's possible the issue is only present on SQLite because it deals with column alterations in a different way since it doesn't support ALTER TABLE. The idea is that is you have the follow models class Author(models.Model): pass class Book(models.Model): isbn = models.CharField(max_length=10, primary_key=True) authors = models.ManyToManyField(Author) Django will automatically created a trough model # Automatically created by Django class Book_Authors(models.Model): book= models.ForeignKey(Book) # This is a models.CharField(max_length=10) referring to Book.isbn author = models.ForeignKey(Author) Now the reported issue is that if you If you change Book.isbn.max_length to 13 the Book_Authors.book field in the intermediary table that backs the Book.authors many-to-many relationship currently doesn't change to max_length=13. ​The re-pointing logic currently lives in BaseDatabaseSchemaEditor._alter_field but it's possible that it's only ​an issue with SQLite schema editor. By a quick glance at the code it looks like it could be a SQLite only issue due to ​this particular line.\nReplying to Simon Charette: ​The re-pointing logic currently lives in BaseDatabaseSchemaEditor._alter_field but it's possible that it's only ​an issue with SQLite schema editor. By a quick glance at the code it looks like it could be a SQLite only issue due to ​this particular line. After I did a bit of digging, it seems like ​this particular line was indeed the culprit. Instead of calling related_objects on new_field.model._meta, if we call _get_fields(forward=False, reverse=True, include_hidden=True) on the same, the ForeignKey in the through Model changes its type according to the ManyToManyField.\nThat makes sense, good old model level cache biting us again. If related_objects gets out of sync it's likely because we forgot to clear something in AlterField.state_forwards and my money is on is_referenced_by_foreign_key not taking into account ManyToManyField defined without an explicit through since that won't create any entry in state.models.\nDart I'll assign this to me if you don't mind since I have an idea of how to address this issue thanks to Sanskar's investigation.\nReplying to Simon Charette: That makes sense, good old model level cache biting us again. If related_objects gets out of sync it's likely because we forgot to clear something in AlterField.state_forwards and my money is on is_referenced_by_foreign_key not taking into account ManyToManyField defined without an explicit through since that won't create any entry in state.models. Hey Simon, I don't know if this helps, but while I was playing around with this issue, calling related_objects on new_field.model._meta, always gave me an empty ImmutableList, but calling _get_fields(forward=False, reverse=True, include_hidden=True) gave me an ImmutableList of a ManyToOneRel. If we look at ​related_objects right now, it only returns Relation objects which are not hidden or their field's many_to_many attribute is True. I am not quite sure whether this is intended or a bug though. Cheers Sanskar",
  "created_at": "2020-04-17T05:00:59Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_alter_field_pk_fk (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)\"]",
  "PASS_TO_PASS": "[\"test_references_model_mixin (migrations.test_operations.TestCreateModel)\", \"test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_model (migrations.test_operations.FieldOperationTests)\", \"test_add_field_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_create_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_delete_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_indexes_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_add_binaryfield (migrations.test_operations.OperationTests)\", \"test_add_charfield (migrations.test_operations.OperationTests)\", \"test_add_constraint (migrations.test_operations.OperationTests)\", \"test_add_constraint_combinable (migrations.test_operations.OperationTests)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)\", \"test_add_field (migrations.test_operations.OperationTests)\", \"test_add_field_m2m (migrations.test_operations.OperationTests)\", \"test_add_field_preserve_default (migrations.test_operations.OperationTests)\", \"test_add_index (migrations.test_operations.OperationTests)\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_add_or_constraint (migrations.test_operations.OperationTests)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_textfield (migrations.test_operations.OperationTests)\", \"test_alter_field (migrations.test_operations.OperationTests)\", \"test_alter_field_m2m (migrations.test_operations.OperationTests)\", \"test_alter_field_pk (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_with_index (migrations.test_operations.OperationTests)\", \"test_alter_fk (migrations.test_operations.OperationTests)\", \"test_alter_fk_non_fk (migrations.test_operations.OperationTests)\", \"test_alter_index_together (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests)\", \"test_alter_model_managers (migrations.test_operations.OperationTests)\", \"test_alter_model_managers_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_options (migrations.test_operations.OperationTests)\", \"test_alter_model_options_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_table (migrations.test_operations.OperationTests)\", \"test_alter_model_table_m2m (migrations.test_operations.OperationTests)\", \"test_alter_model_table_none (migrations.test_operations.OperationTests)\", \"test_alter_model_table_noop (migrations.test_operations.OperationTests)\", \"test_alter_order_with_respect_to (migrations.test_operations.OperationTests)\", \"test_alter_unique_together (migrations.test_operations.OperationTests)\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests)\", \"A field may be migrated from AutoField to BigAutoField.\", \"test_column_name_quoting (migrations.test_operations.OperationTests)\", \"test_create_model (migrations.test_operations.OperationTests)\", \"test_create_model_inheritance (migrations.test_operations.OperationTests)\", \"test_create_model_m2m (migrations.test_operations.OperationTests)\", \"test_create_model_managers (migrations.test_operations.OperationTests)\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_unique_after (migrations.test_operations.OperationTests)\", \"test_create_proxy_model (migrations.test_operations.OperationTests)\", \"test_create_unmanaged_model (migrations.test_operations.OperationTests)\", \"test_delete_model (migrations.test_operations.OperationTests)\", \"test_delete_mti_model (migrations.test_operations.OperationTests)\", \"test_delete_proxy_model (migrations.test_operations.OperationTests)\", \"test_model_with_bigautofield (migrations.test_operations.OperationTests)\", \"test_remove_constraint (migrations.test_operations.OperationTests)\", \"test_remove_field (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)\", \"test_remove_fk (migrations.test_operations.OperationTests)\", \"test_remove_index (migrations.test_operations.OperationTests)\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_rename_field (migrations.test_operations.OperationTests)\", \"test_rename_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"RenameModel renames a many-to-many column after a RenameField.\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests)\", \"test_rename_missing_field (migrations.test_operations.OperationTests)\", \"test_rename_model (migrations.test_operations.OperationTests)\", \"test_rename_model_state_forwards (migrations.test_operations.OperationTests)\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_fk (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_superclass_fk (migrations.test_operations.OperationTests)\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests)\", \"test_run_python (migrations.test_operations.OperationTests)\", \"test_run_python_atomic (migrations.test_operations.OperationTests)\", \"test_run_python_noop (migrations.test_operations.OperationTests)\", \"test_run_python_related_assignment (migrations.test_operations.OperationTests)\", \"test_run_sql (migrations.test_operations.OperationTests)\", \"test_run_sql_noop (migrations.test_operations.OperationTests)\", \"test_run_sql_params (migrations.test_operations.OperationTests)\", \"test_run_sql_params_invalid (migrations.test_operations.OperationTests)\", \"test_separate_database_and_state (migrations.test_operations.OperationTests)\", \"test_separate_database_and_state2 (migrations.test_operations.OperationTests)\", \"A field may be migrated from SmallAutoField to AutoField.\", \"A field may be migrated from SmallAutoField to BigAutoField.\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.633636",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}