{
  "repo": "django/django",
  "instance_id": "django__django-12748",
  "base_commit": "5220ca8d8a109721378e8d4c7f32e342c3a83af6",
  "patch": "diff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -26,7 +26,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     supports_atomic_references_rename = Database.sqlite_version_info >= (3, 26, 0)\n     can_create_inline_fk = False\n     supports_paramstyle_pyformat = False\n-    supports_sequence_reset = False\n     can_clone_databases = True\n     supports_temporal_subtraction = True\n     ignores_table_name_case = True\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -201,13 +201,33 @@ def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False\n             # Simulate TRUNCATE CASCADE by recursively collecting the tables\n             # referencing the tables to be flushed.\n             tables = set(chain.from_iterable(self._references_graph(table) for table in tables))\n-        # Note: No requirement for reset of auto-incremented indices (cf. other\n-        # sql_flush() implementations). Just return SQL at this point\n-        return ['%s %s %s;' % (\n+        sql = ['%s %s %s;' % (\n             style.SQL_KEYWORD('DELETE'),\n             style.SQL_KEYWORD('FROM'),\n             style.SQL_FIELD(self.quote_name(table))\n         ) for table in tables]\n+        if reset_sequences:\n+            sequences = [{'table': table} for table in tables]\n+            sql.extend(self.sequence_reset_by_name_sql(style, sequences))\n+        return sql\n+\n+    def sequence_reset_by_name_sql(self, style, sequences):\n+        if not sequences:\n+            return []\n+        return [\n+            '%s %s %s %s = 0 %s %s %s (%s);' % (\n+                style.SQL_KEYWORD('UPDATE'),\n+                style.SQL_TABLE(self.quote_name('sqlite_sequence')),\n+                style.SQL_KEYWORD('SET'),\n+                style.SQL_FIELD(self.quote_name('seq')),\n+                style.SQL_KEYWORD('WHERE'),\n+                style.SQL_FIELD(self.quote_name('name')),\n+                style.SQL_KEYWORD('IN'),\n+                ', '.join([\n+                    \"'%s'\" % sequence_info['table'] for sequence_info in sequences\n+                ]),\n+            ),\n+        ]\n \n     def adapt_datetimefield_value(self, value):\n         if value is None:\n",
  "test_patch": "diff --git a/tests/backends/sqlite/test_operations.py b/tests/backends/sqlite/test_operations.py\n--- a/tests/backends/sqlite/test_operations.py\n+++ b/tests/backends/sqlite/test_operations.py\n@@ -40,7 +40,6 @@ def test_sql_flush_allow_cascade(self):\n         )\n \n     def test_sql_flush_sequences(self):\n-        # sequences doesn't change statements on SQLite.\n         self.assertEqual(\n             connection.ops.sql_flush(\n                 no_style(),\n@@ -50,11 +49,12 @@ def test_sql_flush_sequences(self):\n             [\n                 'DELETE FROM \"backends_person\";',\n                 'DELETE FROM \"backends_tag\";',\n+                'UPDATE \"sqlite_sequence\" SET \"seq\" = 0 WHERE \"name\" IN '\n+                '(\\'backends_person\\', \\'backends_tag\\');',\n             ],\n         )\n \n     def test_sql_flush_sequences_allow_cascade(self):\n-        # sequences doesn't change statements on SQLite.\n         statements = connection.ops.sql_flush(\n             no_style(),\n             [Person._meta.db_table, Tag._meta.db_table],\n@@ -63,7 +63,7 @@ def test_sql_flush_sequences_allow_cascade(self):\n         )\n         self.assertEqual(\n             # The tables are processed in an unordered set.\n-            sorted(statements),\n+            sorted(statements[:-1]),\n             [\n                 'DELETE FROM \"backends_person\";',\n                 'DELETE FROM \"backends_tag\";',\n@@ -72,3 +72,14 @@ def test_sql_flush_sequences_allow_cascade(self):\n                 'zzzzzzzzzzzzzzzzzzzzzzz\";',\n             ],\n         )\n+        self.assertIs(statements[-1].startswith(\n+            'UPDATE \"sqlite_sequence\" SET \"seq\" = 0 WHERE \"name\" IN ('\n+        ), True)\n+        self.assertIn(\"'backends_person'\", statements[-1])\n+        self.assertIn(\"'backends_tag'\", statements[-1])\n+        self.assertIn(\n+            \"'backends_verylongmodelnamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"\n+            \"zzzz_m2m_also_quite_long_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"\n+            \"zzz'\",\n+            statements[-1],\n+        )\n",
  "problem_statement": "Add support to reset sequences on SQLite\nDescription\n\t\nCan use the internal sqlite_sequence table:\nâ€‹https://sqlite.org/fileformat2.html#seqtab\n",
  "hints_text": "",
  "created_at": "2020-04-18T16:45:01Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_sql_flush_sequences (backends.sqlite.test_operations.SQLiteOperationsTests)\", \"test_sql_flush_sequences_allow_cascade (backends.sqlite.test_operations.SQLiteOperationsTests)\"]",
  "PASS_TO_PASS": "[\"test_sql_flush (backends.sqlite.test_operations.SQLiteOperationsTests)\", \"test_sql_flush_allow_cascade (backends.sqlite.test_operations.SQLiteOperationsTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.634296",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}