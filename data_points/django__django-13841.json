{
  "repo": "django/django",
  "instance_id": "django__django-13841",
  "base_commit": "cfe47b7686df0c4c87270a83d6d7f933323ed7e6",
  "patch": "diff --git a/django/contrib/auth/password_validation.py b/django/contrib/auth/password_validation.py\n--- a/django/contrib/auth/password_validation.py\n+++ b/django/contrib/auth/password_validation.py\n@@ -8,7 +8,7 @@\n from django.core.exceptions import (\n     FieldDoesNotExist, ImproperlyConfigured, ValidationError,\n )\n-from django.utils.functional import lazy\n+from django.utils.functional import cached_property, lazy\n from django.utils.html import format_html, format_html_join\n from django.utils.module_loading import import_string\n from django.utils.translation import gettext as _, ngettext\n@@ -167,9 +167,14 @@ class CommonPasswordValidator:\n     https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7\n     The password list must be lowercased to match the comparison in validate().\n     \"\"\"\n-    DEFAULT_PASSWORD_LIST_PATH = Path(__file__).resolve().parent / 'common-passwords.txt.gz'\n+\n+    @cached_property\n+    def DEFAULT_PASSWORD_LIST_PATH(self):\n+        return Path(__file__).resolve().parent / 'common-passwords.txt.gz'\n \n     def __init__(self, password_list_path=DEFAULT_PASSWORD_LIST_PATH):\n+        if password_list_path is CommonPasswordValidator.DEFAULT_PASSWORD_LIST_PATH:\n+            password_list_path = self.DEFAULT_PASSWORD_LIST_PATH\n         try:\n             with gzip.open(password_list_path, 'rt', encoding='utf-8') as f:\n                 self.passwords = {x.strip() for x in f}\ndiff --git a/django/forms/renderers.py b/django/forms/renderers.py\n--- a/django/forms/renderers.py\n+++ b/django/forms/renderers.py\n@@ -7,8 +7,6 @@\n from django.utils.functional import cached_property\n from django.utils.module_loading import import_string\n \n-ROOT = Path(__file__).parent\n-\n \n @functools.lru_cache()\n def get_default_renderer():\n@@ -33,7 +31,7 @@ def get_template(self, template_name):\n     def engine(self):\n         return self.backend({\n             'APP_DIRS': True,\n-            'DIRS': [ROOT / self.backend.app_dirname],\n+            'DIRS': [Path(__file__).parent / self.backend.app_dirname],\n             'NAME': 'djangoforms',\n             'OPTIONS': {},\n         })\ndiff --git a/django/utils/version.py b/django/utils/version.py\n--- a/django/utils/version.py\n+++ b/django/utils/version.py\n@@ -77,6 +77,10 @@ def get_git_changeset():\n     This value isn't guaranteed to be unique, but collisions are very unlikely,\n     so it's sufficient for generating the development version numbers.\n     \"\"\"\n+    # Repository may not be found if __file__ is undefined, e.g. in a frozen\n+    # module.\n+    if '__file__' not in globals():\n+        return None\n     repo_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n     git_log = subprocess.run(\n         'git log --pretty=format:%ct --quiet -1 HEAD',\ndiff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -26,7 +26,15 @@\n     libraries={'i18n': 'django.templatetags.i18n'},\n )\n \n-CURRENT_DIR = Path(__file__).parent\n+\n+def builtin_template_path(name):\n+    \"\"\"\n+    Return a path to a builtin template.\n+\n+    Avoid calling this function at the module level or in a class-definition\n+    because __file__ may not exist, e.g. in frozen environments.\n+    \"\"\"\n+    return Path(__file__).parent / 'templates' / name\n \n \n class ExceptionCycleWarning(UserWarning):\n@@ -248,11 +256,11 @@ class ExceptionReporter:\n \n     @property\n     def html_template_path(self):\n-        return CURRENT_DIR / 'templates' / 'technical_500.html'\n+        return builtin_template_path('technical_500.html')\n \n     @property\n     def text_template_path(self):\n-        return CURRENT_DIR / 'templates' / 'technical_500.txt'\n+        return builtin_template_path('technical_500.txt')\n \n     def __init__(self, request, exc_type, exc_value, tb, is_email=False):\n         self.request = request\n@@ -534,7 +542,7 @@ def technical_404_response(request, exception):\n             module = obj.__module__\n             caller = '%s.%s' % (module, caller)\n \n-    with Path(CURRENT_DIR, 'templates', 'technical_404.html').open(encoding='utf-8') as fh:\n+    with builtin_template_path('technical_404.html').open(encoding='utf-8') as fh:\n         t = DEBUG_ENGINE.from_string(fh.read())\n     reporter_filter = get_default_exception_reporter_filter()\n     c = Context({\n@@ -553,7 +561,7 @@ def technical_404_response(request, exception):\n \n def default_urlconf(request):\n     \"\"\"Create an empty URLconf 404 error response.\"\"\"\n-    with Path(CURRENT_DIR, 'templates', 'default_urlconf.html').open(encoding='utf-8') as fh:\n+    with builtin_template_path('default_urlconf.html').open(encoding='utf-8') as fh:\n         t = DEBUG_ENGINE.from_string(fh.read())\n     c = Context({\n         'version': get_docs_version(),\n",
  "test_patch": "diff --git a/tests/version/tests.py b/tests/version/tests.py\n--- a/tests/version/tests.py\n+++ b/tests/version/tests.py\n@@ -1,17 +1,37 @@\n+from unittest import skipUnless\n+\n+import django.utils.version\n from django import get_version\n from django.test import SimpleTestCase\n-from django.utils.version import get_complete_version, get_version_tuple\n+from django.utils.version import (\n+    get_complete_version, get_git_changeset, get_version_tuple,\n+)\n \n \n class VersionTests(SimpleTestCase):\n \n     def test_development(self):\n+        get_git_changeset.cache_clear()\n         ver_tuple = (1, 4, 0, 'alpha', 0)\n         # This will return a different result when it's run within or outside\n         # of a git clone: 1.4.devYYYYMMDDHHMMSS or 1.4.\n         ver_string = get_version(ver_tuple)\n         self.assertRegex(ver_string, r'1\\.4(\\.dev[0-9]+)?')\n \n+    @skipUnless(\n+        hasattr(django.utils.version, '__file__'),\n+        'test_development() checks the same when __file__ is already missing, '\n+        'e.g. in a frozen environments'\n+    )\n+    def test_development_no_file(self):\n+        get_git_changeset.cache_clear()\n+        version_file = django.utils.version.__file__\n+        try:\n+            del django.utils.version.__file__\n+            self.test_development()\n+        finally:\n+            django.utils.version.__file__ = version_file\n+\n     def test_releases(self):\n         tuples_to_strings = (\n             ((1, 4, 0, 'alpha', 1), '1.4a1'),\n",
  "problem_statement": "Access __file__ lazily rather than at module level\nDescription\n\t \n\t\t(last modified by William Schwartz)\n\t \nSo-called frozen Python environments (such as those mentioned in #30950) that do not set all modules' ​__file__ variable, which ​need not be defined, cannot even import Django (without some workarounds) because a small number of Django modules use __file__ at the module level, in a class defined at the module level, or in a function that is called automatically upon import.\nFive modules that use __file__ like this are likely to be imported when using Django and thereby cause a frozen Python to crash with a NameError or similar exception.\nImporting django.forms.renderers can be avoided only by avoiding both forms and the ORM altogether as it's imported from django.db.models.\nImporting django.views.debug might be avoidable if DEBUG=False or by avoiding all of the views and URLs APIs.\ndjango.utils.version's get_git_changeset is called when django is imported in pre-alpha development versions.\nImporting django.contrib.auth.password_validation is only avoidable by not using the Auth app.\ndjango.utils.translation.trans_real uses __file__ to find Django's localization files upon activation; this avoidable only by setting USE_I18N=False. Dealing with trans_real is sufficiently thorny (and, being an English speaker with English-speaking clients, I can avoid it for now) that I will not address it further here except to say that it might need to be part of the larger discussion at #30950.\nWhat this ticket is not\nI am not proposing removing use of __file__ at this time. That would require a longer discussion of intended semantics such as #30950. This ticket is only about removing use of __file__ at the module (or class definition) level in Django application code (not test code). Further I am not proposing banning use of __file__ at the module level at this time, hence minimal new tests and no update to the Django coding style documentation. That too would require a longer conversation.\nProposed fixes\nI have pushed ​PR GH-13841 to address the four of those modules other than trans_real. I dealt with each module's use of __file__ in separate commits to make them easier to discuss and separate/cherry-pick if needed. Below I link to the individual commits as I discuss each of the four modules. These first two are fairly easy, but the second two may require further consideration.\ndjango.forms.renders (​54d539c)\nRemove the undocumented module constant ROOT and replace its single use.\ndjango.utils.version (​f4edc6e)\nTreat the lack of module-global __file__ the same as a failure of git log by returning None from get_git_changeset.\ndjango.views.debug (​07f46b7)\nThe module-level constant CURRENT_DIR is used only in the module itself and is undocumented, so I'm assuming it's an obscure private symbol that no one will miss. I've replaced it with a module-level private function _builtin_template_path that refactors and centralizes finding built-in templates for the entire module.\nThe one tricky part is that #32105 added the html_template_path and text_template_path attributes django.views.debug.ExceptionReporter. I didn't want to disturb #32105's goal of making the template paths easily override-able, so I avoided calling _builtin_template_path in the class definition by making detecting the presence of the attributes in __init__ and setting defaults there. Alternatives include making the attributes properties with setters or cached properties without setters.\ndjango.contrib.auth.password_validation (​24aa80b)\nThe CommonPasswordValidator-class constant DEFAULT_PASSWORD_LIST_PATH is used only in one place, the class's instance constructor. While the nature of DEFAULT_PASSWORD_LIST_PATH is not documented, its existence is inside the docs for the ​constructor's signature. I've changed DEFAULT_PASSWORD_LIST_PATH from a class constant into an instance attribute. Another possibility is making DEFAULT_PASSWORD_LIST_PATH be a django.utils.functional.classproperty.\n",
  "hints_text": "",
  "created_at": "2021-01-04T20:40:02Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_development_no_file (version.tests.VersionTests)\"]",
  "PASS_TO_PASS": "[\"test_development (version.tests.VersionTests)\", \"test_get_version_invalid_version (version.tests.VersionTests)\", \"test_get_version_tuple (version.tests.VersionTests)\", \"test_releases (version.tests.VersionTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.672889",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}