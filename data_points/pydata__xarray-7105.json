{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-7105",
  "base_commit": "50ea159bfd0872635ebf4281e741f3c87f0bef6b",
  "patch": "diff --git a/xarray/core/alignment.py b/xarray/core/alignment.py\n--- a/xarray/core/alignment.py\n+++ b/xarray/core/alignment.py\n@@ -24,8 +24,15 @@\n \n from . import dtypes\n from .common import DataWithCoords\n-from .indexes import Index, Indexes, PandasIndex, PandasMultiIndex, indexes_all_equal\n-from .utils import is_dict_like, is_full_slice, safe_cast_to_index\n+from .indexes import (\n+    Index,\n+    Indexes,\n+    PandasIndex,\n+    PandasMultiIndex,\n+    indexes_all_equal,\n+    safe_cast_to_index,\n+)\n+from .utils import is_dict_like, is_full_slice\n from .variable import Variable, as_compatible_data, calculate_dimensions\n \n if TYPE_CHECKING:\ndiff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -757,6 +757,9 @@ def as_numpy(self: T_DataArray) -> T_DataArray:\n     def _in_memory(self) -> bool:\n         return self.variable._in_memory\n \n+    def _to_index(self) -> pd.Index:\n+        return self.variable._to_index()\n+\n     def to_index(self) -> pd.Index:\n         \"\"\"Convert this variable to a pandas.Index. Only possible for 1D\n         arrays.\ndiff --git a/xarray/core/groupby.py b/xarray/core/groupby.py\n--- a/xarray/core/groupby.py\n+++ b/xarray/core/groupby.py\n@@ -27,20 +27,17 @@\n from .common import ImplementsArrayReduce, ImplementsDatasetReduce\n from .concat import concat\n from .formatting import format_array_flat\n-from .indexes import create_default_index_implicit, filter_indexes_from_coords\n+from .indexes import (\n+    create_default_index_implicit,\n+    filter_indexes_from_coords,\n+    safe_cast_to_index,\n+)\n from .npcompat import QUANTILE_METHODS, ArrayLike\n from .ops import IncludeCumMethods\n from .options import _get_keep_attrs\n from .pycompat import integer_types\n from .types import Dims, T_Xarray\n-from .utils import (\n-    either_dict_or_kwargs,\n-    hashable,\n-    is_scalar,\n-    maybe_wrap_array,\n-    peek_at,\n-    safe_cast_to_index,\n-)\n+from .utils import either_dict_or_kwargs, hashable, is_scalar, maybe_wrap_array, peek_at\n from .variable import IndexVariable, Variable\n \n if TYPE_CHECKING:\ndiff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -133,6 +133,48 @@ def __getitem__(self, indexer: Any):\n         raise NotImplementedError()\n \n \n+def _maybe_cast_to_cftimeindex(index: pd.Index) -> pd.Index:\n+    from ..coding.cftimeindex import CFTimeIndex\n+\n+    if len(index) > 0 and index.dtype == \"O\":\n+        try:\n+            return CFTimeIndex(index)\n+        except (ImportError, TypeError):\n+            return index\n+    else:\n+        return index\n+\n+\n+def safe_cast_to_index(array: Any) -> pd.Index:\n+    \"\"\"Given an array, safely cast it to a pandas.Index.\n+\n+    If it is already a pandas.Index, return it unchanged.\n+\n+    Unlike pandas.Index, if the array has dtype=object or dtype=timedelta64,\n+    this function will not attempt to do automatic type conversion but will\n+    always return an index with dtype=object.\n+    \"\"\"\n+    from .dataarray import DataArray\n+    from .variable import Variable\n+\n+    if isinstance(array, pd.Index):\n+        index = array\n+    elif isinstance(array, (DataArray, Variable)):\n+        # returns the original multi-index for pandas.MultiIndex level coordinates\n+        index = array._to_index()\n+    elif isinstance(array, Index):\n+        index = array.to_pandas_index()\n+    elif isinstance(array, PandasIndexingAdapter):\n+        index = array.array\n+    else:\n+        kwargs = {}\n+        if hasattr(array, \"dtype\") and array.dtype.kind == \"O\":\n+            kwargs[\"dtype\"] = object\n+        index = pd.Index(np.asarray(array), **kwargs)\n+\n+    return _maybe_cast_to_cftimeindex(index)\n+\n+\n def _sanitize_slice_element(x):\n     from .dataarray import DataArray\n     from .variable import Variable\n@@ -236,7 +278,7 @@ def __init__(self, array: Any, dim: Hashable, coord_dtype: Any = None):\n         # make a shallow copy: cheap and because the index name may be updated\n         # here or in other constructors (cannot use pd.Index.rename as this\n         # constructor is also called from PandasMultiIndex)\n-        index = utils.safe_cast_to_index(array).copy()\n+        index = safe_cast_to_index(array).copy()\n \n         if index.name is None:\n             index.name = dim\n@@ -637,7 +679,7 @@ def stack(\n         \"\"\"\n         _check_dim_compat(variables, all_dims=\"different\")\n \n-        level_indexes = [utils.safe_cast_to_index(var) for var in variables.values()]\n+        level_indexes = [safe_cast_to_index(var) for var in variables.values()]\n         for name, idx in zip(variables, level_indexes):\n             if isinstance(idx, pd.MultiIndex):\n                 raise ValueError(\ndiff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -24,7 +24,6 @@\n     NDArrayMixin,\n     either_dict_or_kwargs,\n     get_valid_numpy_dtype,\n-    safe_cast_to_index,\n     to_0d_array,\n )\n \n@@ -1415,6 +1414,8 @@ class PandasIndexingAdapter(ExplicitlyIndexedNDArrayMixin):\n     __slots__ = (\"array\", \"_dtype\")\n \n     def __init__(self, array: pd.Index, dtype: DTypeLike = None):\n+        from .indexes import safe_cast_to_index\n+\n         self.array = safe_cast_to_index(array)\n \n         if dtype is None:\ndiff --git a/xarray/core/utils.py b/xarray/core/utils.py\n--- a/xarray/core/utils.py\n+++ b/xarray/core/utils.py\n@@ -62,18 +62,6 @@ def wrapper(*args, **kwargs):\n     return wrapper\n \n \n-def _maybe_cast_to_cftimeindex(index: pd.Index) -> pd.Index:\n-    from ..coding.cftimeindex import CFTimeIndex\n-\n-    if len(index) > 0 and index.dtype == \"O\":\n-        try:\n-            return CFTimeIndex(index)\n-        except (ImportError, TypeError):\n-            return index\n-    else:\n-        return index\n-\n-\n def get_valid_numpy_dtype(array: np.ndarray | pd.Index):\n     \"\"\"Return a numpy compatible dtype from either\n     a numpy array or a pandas.Index.\n@@ -112,34 +100,6 @@ def maybe_coerce_to_str(index, original_coords):\n     return index\n \n \n-def safe_cast_to_index(array: Any) -> pd.Index:\n-    \"\"\"Given an array, safely cast it to a pandas.Index.\n-\n-    If it is already a pandas.Index, return it unchanged.\n-\n-    Unlike pandas.Index, if the array has dtype=object or dtype=timedelta64,\n-    this function will not attempt to do automatic type conversion but will\n-    always return an index with dtype=object.\n-    \"\"\"\n-    if isinstance(array, pd.Index):\n-        index = array\n-    elif hasattr(array, \"to_index\"):\n-        # xarray Variable\n-        index = array.to_index()\n-    elif hasattr(array, \"to_pandas_index\"):\n-        # xarray Index\n-        index = array.to_pandas_index()\n-    elif hasattr(array, \"array\") and isinstance(array.array, pd.Index):\n-        # xarray PandasIndexingAdapter\n-        index = array.array\n-    else:\n-        kwargs = {}\n-        if hasattr(array, \"dtype\") and array.dtype.kind == \"O\":\n-            kwargs[\"dtype\"] = object\n-        index = pd.Index(np.asarray(array), **kwargs)\n-    return _maybe_cast_to_cftimeindex(index)\n-\n-\n def maybe_wrap_array(original, new_array):\n     \"\"\"Wrap a transformed array with __array_wrap__ if it can be done safely.\n \ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -577,6 +577,9 @@ def to_index_variable(self) -> IndexVariable:\n \n     to_coord = utils.alias(to_index_variable, \"to_coord\")\n \n+    def _to_index(self) -> pd.Index:\n+        return self.to_index_variable()._to_index()\n+\n     def to_index(self) -> pd.Index:\n         \"\"\"Convert this variable to a pandas.Index\"\"\"\n         return self.to_index_variable().to_index()\n@@ -2943,7 +2946,7 @@ def equals(self, other, equiv=None):\n             return False\n \n     def _data_equals(self, other):\n-        return self.to_index().equals(other.to_index())\n+        return self._to_index().equals(other._to_index())\n \n     def to_index_variable(self) -> IndexVariable:\n         \"\"\"Return this variable as an xarray.IndexVariable\"\"\"\n@@ -2951,10 +2954,11 @@ def to_index_variable(self) -> IndexVariable:\n \n     to_coord = utils.alias(to_index_variable, \"to_coord\")\n \n-    def to_index(self) -> pd.Index:\n-        \"\"\"Convert this variable to a pandas.Index\"\"\"\n+    def _to_index(self) -> pd.Index:\n         # n.b. creating a new pandas.Index from an old pandas.Index is\n-        # basically free as pandas.Index objects are immutable\n+        # basically free as pandas.Index objects are immutable.\n+        # n.b.2. this method returns the multi-index instance for\n+        # a pandas multi-index level variable.\n         assert self.ndim == 1\n         index = self._data.array\n         if isinstance(index, pd.MultiIndex):\n@@ -2969,6 +2973,16 @@ def to_index(self) -> pd.Index:\n             index = index.set_names(self.name)\n         return index\n \n+    def to_index(self) -> pd.Index:\n+        \"\"\"Convert this variable to a pandas.Index\"\"\"\n+        index = self._to_index()\n+        level = getattr(self._data, \"level\", None)\n+        if level is not None:\n+            # return multi-index level converted to a single index\n+            return index.get_level_values(level)\n+        else:\n+            return index\n+\n     @property\n     def level_names(self) -> list[str] | None:\n         \"\"\"Return MultiIndex level names or None if this IndexVariable has no\n",
  "test_patch": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2737,7 +2737,7 @@ def test_copy(self) -> None:\n             assert_identical(data, copied)\n             assert data.encoding == copied.encoding\n             # Note: IndexVariable objects with string dtype are always\n-            # copied because of xarray.core.util.safe_cast_to_index.\n+            # copied because of xarray.core.indexes.safe_cast_to_index.\n             # Limiting the test to data variables.\n             for k in data.data_vars:\n                 v0 = data.variables[k]\ndiff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -1,6 +1,7 @@\n from __future__ import annotations\n \n import copy\n+from datetime import datetime\n from typing import Any\n \n import numpy as np\n@@ -8,6 +9,7 @@\n import pytest\n \n import xarray as xr\n+from xarray.coding.cftimeindex import CFTimeIndex\n from xarray.core.indexes import (\n     Hashable,\n     Index,\n@@ -15,10 +17,12 @@\n     PandasIndex,\n     PandasMultiIndex,\n     _asarray_tuplesafe,\n+    safe_cast_to_index,\n )\n from xarray.core.variable import IndexVariable, Variable\n \n-from . import assert_identical\n+from . import assert_array_equal, assert_identical, requires_cftime\n+from .test_coding_times import _all_cftime_date_types\n \n \n def test_asarray_tuplesafe() -> None:\n@@ -656,3 +660,41 @@ def test_copy_indexes(self, indexes) -> None:\n         assert index_vars.keys() == indexes.variables.keys()\n         for new, original in zip(index_vars.values(), indexes.variables.values()):\n             assert_identical(new, original)\n+\n+\n+def test_safe_cast_to_index():\n+    dates = pd.date_range(\"2000-01-01\", periods=10)\n+    x = np.arange(5)\n+    td = x * np.timedelta64(1, \"D\")\n+    for expected, array in [\n+        (dates, dates.values),\n+        (pd.Index(x, dtype=object), x.astype(object)),\n+        (pd.Index(td), td),\n+        (pd.Index(td, dtype=object), td.astype(object)),\n+    ]:\n+        actual = safe_cast_to_index(array)\n+        assert_array_equal(expected, actual)\n+        assert expected.dtype == actual.dtype\n+\n+\n+@requires_cftime\n+def test_safe_cast_to_index_cftimeindex():\n+    date_types = _all_cftime_date_types()\n+    for date_type in date_types.values():\n+        dates = [date_type(1, 1, day) for day in range(1, 20)]\n+        expected = CFTimeIndex(dates)\n+        actual = safe_cast_to_index(np.array(dates))\n+        assert_array_equal(expected, actual)\n+        assert expected.dtype == actual.dtype\n+        assert isinstance(actual, type(expected))\n+\n+\n+# Test that datetime.datetime objects are never used in a CFTimeIndex\n+@requires_cftime\n+def test_safe_cast_to_index_datetime_datetime():\n+    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+\n+    expected = pd.Index(dates)\n+    actual = safe_cast_to_index(np.array(dates))\n+    assert_array_equal(expected, actual)\n+    assert isinstance(actual, pd.Index)\ndiff --git a/xarray/tests/test_utils.py b/xarray/tests/test_utils.py\n--- a/xarray/tests/test_utils.py\n+++ b/xarray/tests/test_utils.py\n@@ -1,18 +1,15 @@\n from __future__ import annotations\n \n-from datetime import datetime\n from typing import Hashable\n \n import numpy as np\n import pandas as pd\n import pytest\n \n-from xarray.coding.cftimeindex import CFTimeIndex\n from xarray.core import duck_array_ops, utils\n from xarray.core.utils import either_dict_or_kwargs, iterate_nested\n \n-from . import assert_array_equal, requires_cftime, requires_dask\n-from .test_coding_times import _all_cftime_date_types\n+from . import assert_array_equal, requires_dask\n \n \n class TestAlias:\n@@ -26,21 +23,6 @@ def new_method():\n             old_method()\n \n \n-def test_safe_cast_to_index():\n-    dates = pd.date_range(\"2000-01-01\", periods=10)\n-    x = np.arange(5)\n-    td = x * np.timedelta64(1, \"D\")\n-    for expected, array in [\n-        (dates, dates.values),\n-        (pd.Index(x, dtype=object), x.astype(object)),\n-        (pd.Index(td), td),\n-        (pd.Index(td, dtype=object), td.astype(object)),\n-    ]:\n-        actual = utils.safe_cast_to_index(array)\n-        assert_array_equal(expected, actual)\n-        assert expected.dtype == actual.dtype\n-\n-\n @pytest.mark.parametrize(\n     \"a, b, expected\", [[\"a\", \"b\", np.array([\"a\", \"b\"])], [1, 2, pd.Index([1, 2])]]\n )\n@@ -68,29 +50,6 @@ def test_maybe_coerce_to_str_minimal_str_dtype():\n     assert expected.dtype == actual.dtype\n \n \n-@requires_cftime\n-def test_safe_cast_to_index_cftimeindex():\n-    date_types = _all_cftime_date_types()\n-    for date_type in date_types.values():\n-        dates = [date_type(1, 1, day) for day in range(1, 20)]\n-        expected = CFTimeIndex(dates)\n-        actual = utils.safe_cast_to_index(np.array(dates))\n-        assert_array_equal(expected, actual)\n-        assert expected.dtype == actual.dtype\n-        assert isinstance(actual, type(expected))\n-\n-\n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n-\n-    expected = pd.Index(dates)\n-    actual = utils.safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n-\n-\n class TestArrayEquiv:\n     def test_0d(self):\n         # verify our work around for pd.isnull not working for 0-dimensional\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2300,6 +2300,11 @@ def test_to_index(self):\n         v = IndexVariable([\"time\"], data, {\"foo\": \"bar\"})\n         assert pd.Index(data, name=\"time\").identical(v.to_index())\n \n+    def test_to_index_multiindex_level(self):\n+        midx = pd.MultiIndex.from_product([[\"a\", \"b\"], [1, 2]], names=(\"one\", \"two\"))\n+        ds = Dataset(coords={\"x\": midx})\n+        assert ds.one.variable.to_index().equals(midx.get_level_values(\"one\"))\n+\n     def test_multiindex_default_level_names(self):\n         midx = pd.MultiIndex.from_product([[\"a\", \"b\"], [1, 2]])\n         v = IndexVariable([\"x\"], midx, {\"foo\": \"bar\"})\n",
  "problem_statement": "groupby(multi-index level) not working correctly on a multi-indexed DataArray or DataSet\n### What happened?\n\nrun the code block below with `2022.6.0`\r\n```\r\nmidx = pd.MultiIndex.from_product([list(\"abc\"), [0, 1]], names=(\"one\", \"two\"))\r\n\r\nmda = xr.DataArray(np.random.rand(6, 3), [(\"x\", midx), (\"y\", range(3))])\r\n\r\nmda.groupby(\"one\").groups\r\n```\r\noutput:\r\n```\r\nIn [15]: mda.groupby(\"one\").groups\r\nOut[15]: \r\n{('a', 0): [0],\r\n ('a', 1): [1],\r\n ('b', 0): [2],\r\n ('b', 1): [3],\r\n ('c', 0): [4],\r\n ('c', 1): [5]}\r\n```\n\n### What did you expect to happen?\n\nas it was with `2022.3.0`\r\n```\r\nIn [6]: mda.groupby(\"one\").groups\r\nOut[6]: {'a': [0, 1], 'b': [2, 3], 'c': [4, 5]}\r\n```\n\n### Minimal Complete Verifiable Example\n\n```Python\nimport pandas as pd\r\nimport numpy as np\r\nimport xarray as XR\r\n\r\nmidx = pd.MultiIndex.from_product([list(\"abc\"), [0, 1]], names=(\"one\", \"two\"))\r\n\r\nmda = xr.DataArray(np.random.rand(6, 3), [(\"x\", midx), (\"y\", range(3))])\r\n\r\nmda.groupby(\"one\").groups\n```\n\n\n### MVCE confirmation\n\n- [X] Minimal example — the example is as focused as reasonably possible to demonstrate the underlying issue in xarray.\n- [X] Complete example — the example is self-contained, including all data and the text of any traceback.\n- [X] Verifiable example — the example copy & pastes into an IPython prompt or [Binder notebook](https://mybinder.org/v2/gh/pydata/xarray/main?urlpath=lab/tree/doc/examples/blank_template.ipynb), returning the result.\n- [X] New issue — a search of GitHub Issues suggests this is not a duplicate.\n\n### Relevant log output\n\n```Python\nN/A\n```\n\n\n### Anything else we need to know?\n\nN/A\n\n### Environment\n\n<details>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.8.10 (default, Mar 15 2022, 12:22:08) \r\n[GCC 9.4.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 5.11.0-1025-aws\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: C.UTF-8\r\nLOCALE: ('en_US', 'UTF-8')\r\nlibhdf5: 1.12.0\r\nlibnetcdf: 4.7.4\r\n\r\nxarray: 2022.6.0\r\npandas: 1.4.3\r\nnumpy: 1.22.4\r\nscipy: 1.7.3\r\nnetCDF4: 1.5.8\r\npydap: None\r\nh5netcdf: None\r\nh5py: None\r\nNio: None\r\nzarr: None\r\ncftime: 1.5.1.1\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: 1.2.10\r\ncfgrib: None\r\niris: None\r\nbottleneck: 1.3.2\r\ndask: 2022.04.1\r\ndistributed: 2022.4.1\r\nmatplotlib: 3.5.1\r\ncartopy: 0.20.3\r\nseaborn: 0.11.2\r\nnumbagg: None\r\nfsspec: 2022.01.0\r\ncupy: None\r\npint: None\r\nsparse: None\r\nflox: None\r\nnumpy_groupies: None\r\nsetuptools: 45.2.0\r\npip: 22.2\r\nconda: None\r\npytest: 7.1.2\r\nIPython: 7.31.0\r\nsphinx: None\r\n</details>\r\n\n",
  "hints_text": "@benbovy I tracked this down to\r\n\r\n``` python\r\n>>> mda.one.to_index()\r\n# v2022.06.0\r\nMultiIndex([('a', 0),\r\n            ('a', 1),\r\n            ('b', 0),\r\n            ('b', 1),\r\n            ('c', 0),\r\n            ('c', 1)],\r\n           names=['one', 'two'])\r\n\r\n# v2022.03.0\r\nIndex(['a', 'a', 'b', 'b', 'c', 'c'], dtype='object', name='x')\r\n```\r\n\r\nWe call `to_index` here in `safe_cast_to_index`:\r\nhttps://github.com/pydata/xarray/blob/f8fee902360f2330ab8c002d54480d357365c172/xarray/core/utils.py#L115-L140\r\n\r\nNot sure if the fix should be only in the GroupBy specifically or more generally in `safe_cast_to_index`\r\n\r\nThe GroupBy context is\r\nhttps://github.com/pydata/xarray/blob/f8fee902360f2330ab8c002d54480d357365c172/xarray/core/groupby.py#L434\nAfter trying to dig down further into the code, I saw that grouping over levels seems to be broken generally (up-to-date main branch at time of writing), i.e.\r\n\r\n```python \r\nimport pandas as pd\r\nimport numpy as np\r\nimport xarray as xr\r\n\r\nmidx = pd.MultiIndex.from_product([list(\"abc\"), [0, 1]], names=(\"one\", \"two\"))\r\nmda = xr.DataArray(np.random.rand(6, 3), [(\"x\", midx), (\"y\", range(3))])\r\nmda.groupby(\"one\").sum()\r\n```\r\n\r\nraises:\r\n```python\r\n\r\n  File \".../xarray/xarray/core/_reductions.py\", line 5055, in sum\r\n    return self.reduce(\r\n\r\n  File \".../xarray/xarray/core/groupby.py\", line 1191, in reduce\r\n    return self.map(reduce_array, shortcut=shortcut)\r\n\r\n  File \".../xarray/xarray/core/groupby.py\", line 1095, in map\r\n    return self._combine(applied, shortcut=shortcut)\r\n\r\n  File \".../xarray/xarray/core/groupby.py\", line 1127, in _combine\r\n    index, index_vars = create_default_index_implicit(coord)\r\n\r\n  File \".../xarray/xarray/core/indexes.py\", line 974, in create_default_index_implicit\r\n    index = PandasMultiIndex(array, name)\r\n\r\n  File \".../xarray/xarray/core/indexes.py\", line 552, in __init__\r\n    raise ValueError(\r\n\r\nValueError: conflicting multi-index level name 'one' with dimension 'one'\r\n```\r\nin the function ``create_default_index_implicit``. I am still a bit puzzled how to approach this. Any idea @benbovy?\nThanks @emmaai for the issue report and thanks @dcherian and @FabianHofmann for tracking it down.\r\n\r\nThere is a lot of complexity related to `pandas.MultiIndex` special cases and it's been difficult to avoid new issues arising during the index refactor.\r\n\r\n`create_default_index_implicit` has some hacks to create xarray objects directly from `pandas.MultiIndex` instances (e.g., `xr.Dataset(coords={\"x\": pd_midx})`) or even from xarray objects wrapping multi-indexes. The error raised here suggests that the issue should fixed before this call... Probably in `safe_cast_to_index` indeed.\r\n\r\nWe should probably avoid using `.to_index()` internally, or should we even deprecate it?  The fact that `mda.one.to_index()` (in v2022.3.0) doesn't return the same result than `mda.indexes[\"one\"]` adds more confusion than it adds value. Actually, in the long-term I'd be for deprecating all `pandas.MultiIndex` special cases in Xarray.\r\n\r\n\r\n",
  "created_at": "2022-09-29T14:44:22Z",
  "version": "2022.06",
  "FAIL_TO_PASS": "[\"xarray/tests/test_dataset.py::TestDataset::test_repr\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_period_index\", \"xarray/tests/test_dataset.py::TestDataset::test_unicode_data\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_nep18\", \"xarray/tests/test_dataset.py::TestDataset::test_info\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_1d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_0d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_compat\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_asarray\", \"xarray/tests/test_dataset.py::TestDataset::test_get_index\", \"xarray/tests/test_dataset.py::TestDataset::test_attr_access\", \"xarray/tests/test_dataset.py::TestDataset::test_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_modify_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_modify\", \"xarray/tests/test_dataset.py::TestDataset::test_update_index\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_set\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape\", \"xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_failures\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals\", \"xarray/tests/test_dataset.py::TestDataset::test_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_chunks_does_not_load_data\", \"xarray/tests/test_dataset.py::TestDataset::test_isel\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy_convert_index_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_sel\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_categorical\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_categorical_error\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_index\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_drop_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_head\", \"xarray/tests/test_dataset.py::TestDataset::test_tail\", \"xarray/tests/test_dataset.py::TestDataset::test_thin\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_method\", \"xarray/tests/test_dataset.py::TestDataset::test_loc\", \"xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_like\", \"xarray/tests/test_dataset.py::TestDataset::test_to_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_attrs_encoding\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_warning\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_method\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_align\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exact\", \"xarray/tests/test_dataset.py::TestDataset::test_align_override\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_align_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_align_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_align_non_unique\", \"xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_align_index_var_attrs[left]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_index_var_attrs[override]\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_multi_index\", \"xarray/tests/test_dataset.py::TestDataset::test_variable_indexing\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_variables\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_copy\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_rename\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_old_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dimension_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dimension_coord_warnings\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_perserve_attrs_encoding\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_swap_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index_deindexed_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[foo-False-dropped0-converted0-renamed0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[foo-True-dropped1-converted1-renamed1]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[x-False-dropped2-converted2-renamed2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[x-True-dropped3-converted3-renamed3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg4-False-dropped4-converted4-renamed4]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg5-True-dropped5-converted5-renamed5]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg6-False-dropped6-converted6-renamed6]\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg7-True-dropped7-converted7-renamed7]\", \"xarray/tests/test_dataset.py::TestDataset::test_reorder_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_set_xindex\", \"xarray/tests/test_dataset.py::TestDataset::test_set_xindex_options\", \"xarray/tests/test_dataset.py::TestDataset::test_stack\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[True-expected_keys0]\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[False-expected_keys1]\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[None-expected_keys2]\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_multi_index\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_non_dim_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_update\", \"xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_update_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_update_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_multiple_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_time_season\", \"xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list0-data0-Different\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list1-data1-Empty\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list2-data2-assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords_existing_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_all_multiindex_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_to_array\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_categorical\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns\", \"xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_pickle\", \"xarray/tests/test_dataset.py::TestDataset::test_lazy_load\", \"xarray/tests/test_dataset.py::TestDataset::test_dropna\", \"xarray/tests/test_dataset.py::TestDataset::test_fillna\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]\", \"xarray/tests/test_dataset.py::TestDataset::test_where\", \"xarray/tests/test_dataset.py::TestDataset::test_where_other\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim1-expected0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim2-expected1]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim3-expected2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-time-expected3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim1-expected0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim2-expected1]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim3-expected2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-time-expected3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_strings\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-None]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-None]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-None]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_method[midpoint]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_method[lower]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_interpolation_deprecated[midpoint]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_interpolation_deprecated[lower]\", \"xarray/tests/test_dataset.py::TestDataset::test_rank_use_bottleneck\", \"xarray/tests/test_dataset.py::TestDataset::test_count\", \"xarray/tests/test_dataset.py::TestDataset::test_map\", \"xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math\", \"xarray/tests/test_dataset.py::TestDataset::test_unary_ops\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_multidim\", \"xarray/tests/test_dataset.py::TestDataset::test_real_and_imag\", \"xarray/tests/test_dataset.py::TestDataset::test_setattr_raises\", \"xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting\", \"xarray/tests/test_dataset.py::TestDataset::test_full_like\", \"xarray/tests/test_dataset.py::TestDataset::test_combine_first\", \"xarray/tests/test_dataset.py::TestDataset::test_sortby\", \"xarray/tests/test_dataset.py::TestDataset::test_attribute_access\", \"xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_output\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_warnings\", \"xarray/tests/test_dataset.py::TestDataset::test_pad\", \"xarray/tests/test_dataset.py::TestDataset::test_astype_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-python-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-python-python]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-None-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-None-python]\", \"xarray/tests/test_dataset.py::test_isin[numpy-test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[numpy-test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[numpy-test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dataset\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_error_message_on_set_supplied\", \"xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[numpy-3]\", \"xarray/tests/test_dataset.py::test_dir_non_string[1-numpy]\", \"xarray/tests/test_dataset.py::test_dir_unicode[1-numpy]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[numpy-2]\", \"xarray/tests/test_dataset.py::test_differentiate[1-True]\", \"xarray/tests/test_dataset.py::test_differentiate[1-False]\", \"xarray/tests/test_dataset.py::test_differentiate[2-True]\", \"xarray/tests/test_dataset.py::test_differentiate[2-False]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[True]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[False]\", \"xarray/tests/test_dataset.py::test_integrate[True]\", \"xarray/tests/test_dataset.py::test_integrate[False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-False]\", \"xarray/tests/test_dataset.py::test_no_dict\", \"xarray/tests/test_dataset.py::test_subclass_slots\", \"xarray/tests/test_dataset.py::test_weakref\", \"xarray/tests/test_dataset.py::test_deepcopy_obj_array\", \"xarray/tests/test_dataset.py::test_deepcopy_recursive\", \"xarray/tests/test_dataset.py::test_clip[1-numpy]\", \"xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[first]\", \"xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[last]\", \"xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[False]\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_numpy\", \"xarray/tests/test_dataset.py::test_string_keys_typing\", \"xarray/tests/test_dataset.py::test_transpose_error\", \"xarray/tests/test_indexes.py::test_asarray_tuplesafe\", \"xarray/tests/test_indexes.py::TestIndex::test_from_variables\", \"xarray/tests/test_indexes.py::TestIndex::test_concat\", \"xarray/tests/test_indexes.py::TestIndex::test_stack\", \"xarray/tests/test_indexes.py::TestIndex::test_unstack\", \"xarray/tests/test_indexes.py::TestIndex::test_create_variables\", \"xarray/tests/test_indexes.py::TestIndex::test_to_pandas_index\", \"xarray/tests/test_indexes.py::TestIndex::test_isel\", \"xarray/tests/test_indexes.py::TestIndex::test_sel\", \"xarray/tests/test_indexes.py::TestIndex::test_join\", \"xarray/tests/test_indexes.py::TestIndex::test_reindex_like\", \"xarray/tests/test_indexes.py::TestIndex::test_equals\", \"xarray/tests/test_indexes.py::TestIndex::test_roll\", \"xarray/tests/test_indexes.py::TestIndex::test_rename\", \"xarray/tests/test_indexes.py::TestIndex::test_copy[True]\", \"xarray/tests/test_indexes.py::TestIndex::test_copy[False]\", \"xarray/tests/test_indexes.py::TestIndex::test_getitem\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_constructor\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_from_variables\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_from_variables_index_adapter\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_periods\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_str_dtype[str]\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_str_dtype[bytes]\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_empty\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_concat_dim_error\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_create_variables\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_to_pandas_index\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_sel\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_sel_boolean\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_sel_datetime\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_sel_unsorted_datetime_index_raises\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_equals\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_join\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_reindex_like\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_rename\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_copy\", \"xarray/tests/test_indexes.py::TestPandasIndex::test_getitem\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_constructor\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_from_variables\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_concat\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_stack\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_stack_non_unique\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_unstack\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_create_variables\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_sel\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_join\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_rename\", \"xarray/tests/test_indexes.py::TestPandasMultiIndex::test_copy\", \"xarray/tests/test_indexes.py::TestIndexes::test_interface[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_interface[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_variables[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_variables[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_dims[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_dims[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_unique[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_unique[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_is_multi[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_is_multi[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_all_coords[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_all_coords[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_all_dims[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_get_all_dims[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_group_by_index[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_group_by_index[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_to_pandas_indexes[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_to_pandas_indexes[xr_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_copy_indexes[pd_index]\", \"xarray/tests/test_indexes.py::TestIndexes::test_copy_indexes[xr_index]\", \"xarray/tests/test_indexes.py::test_safe_cast_to_index\", \"xarray/tests/test_utils.py::TestAlias::test\", \"xarray/tests/test_utils.py::test_maybe_coerce_to_str[a-b-expected0]\", \"xarray/tests/test_utils.py::test_maybe_coerce_to_str[1-2-expected1]\", \"xarray/tests/test_utils.py::test_maybe_coerce_to_str_minimal_str_dtype\", \"xarray/tests/test_utils.py::TestArrayEquiv::test_0d\", \"xarray/tests/test_utils.py::TestDictionaries::test_equivalent\", \"xarray/tests/test_utils.py::TestDictionaries::test_safe\", \"xarray/tests/test_utils.py::TestDictionaries::test_unsafe\", \"xarray/tests/test_utils.py::TestDictionaries::test_compat_dict_intersection\", \"xarray/tests/test_utils.py::TestDictionaries::test_compat_dict_union\", \"xarray/tests/test_utils.py::TestDictionaries::test_dict_equiv\", \"xarray/tests/test_utils.py::TestDictionaries::test_frozen\", \"xarray/tests/test_utils.py::test_repr_object\", \"xarray/tests/test_utils.py::test_repr_object_magic_methods\", \"xarray/tests/test_utils.py::test_is_remote_uri\", \"xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_sorted_uniform\", \"xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_sorted_not_uniform\", \"xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_not_sorted_uniform\", \"xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_not_sorted_not_uniform\", \"xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_two_numbers\", \"xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_relative_tolerance\", \"xarray/tests/test_utils.py::Test_hashable::test_hashable\", \"xarray/tests/test_utils.py::test_hidden_key_dict\", \"xarray/tests/test_utils.py::test_either_dict_or_kwargs\", \"xarray/tests/test_utils.py::test_infix_dims[supplied0-all_0-expected0]\", \"xarray/tests/test_utils.py::test_infix_dims[supplied1-all_1-expected1]\", \"xarray/tests/test_utils.py::test_infix_dims[supplied2-all_2-expected2]\", \"xarray/tests/test_utils.py::test_infix_dims[supplied3-all_3-expected3]\", \"xarray/tests/test_utils.py::test_infix_dims[supplied4-all_4-expected4]\", \"xarray/tests/test_utils.py::test_infix_dims[supplied5-all_5-expected5]\", \"xarray/tests/test_utils.py::test_infix_dims_errors[supplied0-all_0]\", \"xarray/tests/test_utils.py::test_infix_dims_errors[supplied1-all_1]\", \"xarray/tests/test_utils.py::test_iterate_nested[nested_list0-expected0]\", \"xarray/tests/test_utils.py::test_iterate_nested[nested_list1-expected1]\", \"xarray/tests/test_utils.py::test_iterate_nested[nested_list2-expected2]\", \"xarray/tests/test_utils.py::test_iterate_nested[nested_list3-expected3]\", \"xarray/tests/test_utils.py::test_iterate_nested[nested_list4-expected4]\", \"xarray/tests/test_utils.py::test_iterate_nested[nested_list5-expected5]\", \"xarray/tests/test_variable.py::TestVariable::test_properties\", \"xarray/tests/test_variable.py::TestVariable::test_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_dict\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_1d\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_int\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_float\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_string\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_object\", \"xarray/tests/test_variable.py::TestVariable::test_0d_object_array_with_list\", \"xarray/tests/test_variable.py::TestVariable::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_0d_time_data\", \"xarray/tests/test_variable.py::TestVariable::test_object_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_data\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestVariable::test_1d_math\", \"xarray/tests/test_variable.py::TestVariable::test_1d_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_array_interface\", \"xarray/tests/test_variable.py::TestVariable::test___array__\", \"xarray/tests/test_variable.py::TestVariable::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_eq_all_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestVariable::test_concat\", \"xarray/tests/test_variable.py::TestVariable::test_concat_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestVariable::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestVariable::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy_deep_recursive\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index\", \"xarray/tests/test_variable.py::TestVariable::test_copy_with_data\", \"xarray/tests/test_variable.py::TestVariable::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestVariable::test_replace\", \"xarray/tests/test_variable.py::TestVariable::test_real_and_imag\", \"xarray/tests/test_variable.py::TestVariable::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestVariable::test_multiindex\", \"xarray/tests/test_variable.py::TestVariable::test_load\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_advanced\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_uint\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_error\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg0-np_arg0]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg1-np_arg1]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg2-np_arg2]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg3-np_arg3]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg4-np_arg4]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window[x-3]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window[y-5]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_1d\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims0-center0]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims0-center1]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims1-center0]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims1-center1]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims2-center0]\", \"xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims2-center1]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-window0-x_w-True]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-3-window_dim1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-3-x_w-center2]\", \"xarray/tests/test_variable.py::TestVariable::test_data_and_values\", \"xarray/tests/test_variable.py::TestVariable::test_numpy_same_methods\", \"xarray/tests/test_variable.py::TestVariable::test_0d_str\", \"xarray/tests/test_variable.py::TestVariable::test_0d_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_equals_and_identical\", \"xarray/tests/test_variable.py::TestVariable::test_broadcast_equals\", \"xarray/tests/test_variable.py::TestVariable::test_no_conflicts\", \"xarray/tests/test_variable.py::TestVariable::test_as_variable\", \"xarray/tests/test_variable.py::TestVariable::test_repr\", \"xarray/tests/test_variable.py::TestVariable::test_repr_lazy_data\", \"xarray/tests/test_variable.py::TestVariable::test_detect_indexer_type\", \"xarray/tests/test_variable.py::TestVariable::test_indexer_type\", \"xarray/tests/test_variable.py::TestVariable::test_items\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_basic\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_2d_input\", \"xarray/tests/test_variable.py::TestVariable::test_isel\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_numpy_string\", \"xarray/tests/test_variable.py::TestVariable::test_indexing_0d_unicode\", \"xarray/tests/test_variable.py::TestVariable::test_shift[fill_value0]\", \"xarray/tests/test_variable.py::TestVariable::test_shift[2]\", \"xarray/tests/test_variable.py::TestVariable::test_shift[2.0]\", \"xarray/tests/test_variable.py::TestVariable::test_shift2d\", \"xarray/tests/test_variable.py::TestVariable::test_roll\", \"xarray/tests/test_variable.py::TestVariable::test_roll_consistency\", \"xarray/tests/test_variable.py::TestVariable::test_transpose\", \"xarray/tests/test_variable.py::TestVariable::test_transpose_0d\", \"xarray/tests/test_variable.py::TestVariable::test_squeeze\", \"xarray/tests/test_variable.py::TestVariable::test_get_axis_num\", \"xarray/tests/test_variable.py::TestVariable::test_set_dims\", \"xarray/tests/test_variable.py::TestVariable::test_set_dims_object_dtype\", \"xarray/tests/test_variable.py::TestVariable::test_stack\", \"xarray/tests/test_variable.py::TestVariable::test_stack_errors\", \"xarray/tests/test_variable.py::TestVariable::test_unstack\", \"xarray/tests/test_variable.py::TestVariable::test_unstack_errors\", \"xarray/tests/test_variable.py::TestVariable::test_unstack_2d\", \"xarray/tests/test_variable.py::TestVariable::test_stack_unstack_consistency\", \"xarray/tests/test_variable.py::TestVariable::test_broadcasting_math\", \"xarray/tests/test_variable.py::TestVariable::test_broadcasting_failures\", \"xarray/tests/test_variable.py::TestVariable::test_inplace_math\", \"xarray/tests/test_variable.py::TestVariable::test_inplace_math_error\", \"xarray/tests/test_variable.py::TestVariable::test_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-None]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_method[False-midpoint]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_method[False-lower]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_interpolation_deprecation[midpoint]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_interpolation_deprecation[lower]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[-0.1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[1.1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q3]\", \"xarray/tests/test_variable.py::TestVariable::test_rank_use_bottleneck\", \"xarray/tests/test_variable.py::TestVariable::test_big_endian_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_funcs\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keep_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_binary_ops_keep_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_count\", \"xarray/tests/test_variable.py::TestVariable::test_setitem\", \"xarray/tests/test_variable.py::TestVariable::test_setitem_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen_2d\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen_keep_attrs\", \"xarray/tests/test_variable.py::TestIndexVariable::test_properties\", \"xarray/tests/test_variable.py::TestIndexVariable::test_attrs\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_dict\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_int\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_float\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_string\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_object\", \"xarray/tests/test_variable.py::TestIndexVariable::test_0d_object_array_with_list\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestIndexVariable::test_0d_time_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_object_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_1d_math\", \"xarray/tests/test_variable.py::TestIndexVariable::test_1d_reduce\", \"xarray/tests/test_variable.py::TestIndexVariable::test_array_interface\", \"xarray/tests/test_variable.py::TestIndexVariable::test___array__\", \"xarray/tests/test_variable.py::TestIndexVariable::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_eq_all_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_attrs\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_deep_recursive\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestIndexVariable::test_replace\", \"xarray/tests/test_variable.py::TestIndexVariable::test_real_and_imag\", \"xarray/tests/test_variable.py::TestIndexVariable::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestIndexVariable::test_multiindex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_load\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestIndexVariable::test_init\", \"xarray/tests/test_variable.py::TestIndexVariable::test_to_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_to_index_multiindex_level\", \"xarray/tests/test_variable.py::TestIndexVariable::test_multiindex_default_level_names\", \"xarray/tests/test_variable.py::TestIndexVariable::test_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_name\", \"xarray/tests/test_variable.py::TestIndexVariable::test_level_names\", \"xarray/tests/test_variable.py::TestIndexVariable::test_get_level_variable\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_periods\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_multiindex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[str]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[bytes]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_coordinate_alias\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64\", \"xarray/tests/test_variable.py::TestIndexVariable::test_to_index_variable_copy\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_unchanged_types\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_converted_types\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_masked_array\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_zeros_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_ones_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_unsupported_type\", \"xarray/tests/test_variable.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_NumpyIndexingAdapter\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_LazilyIndexedArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_CopyOnWriteArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_MemoryCachedArray\", \"xarray/tests/test_variable.py::test_clip\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_numpy[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_numpy[IndexVariable]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_dataset.py::TestDataset::test_chunk\", \"xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_rank\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-numexpr-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[numpy-numexpr-python]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-python-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-python-python]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-None-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-None-python]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-numexpr-pandas]\", \"xarray/tests/test_dataset.py::TestDataset::test_query[dask-numexpr-python]\", \"xarray/tests/test_dataset.py::test_isin[dask-test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[dask-test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[dask-test_elements2]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[dask-3]\", \"xarray/tests/test_dataset.py::test_dir_non_string[1-dask]\", \"xarray/tests/test_dataset.py::test_dir_unicode[1-dask]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[dask-2]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[True]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[False]\", \"xarray/tests/test_dataset.py::test_cumulative_integrate[True]\", \"xarray/tests/test_dataset.py::test_cumulative_integrate[False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]\", \"xarray/tests/test_dataset.py::test_clip[1-dask]\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_dask\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_pint\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_sparse\", \"xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_pint_wrapping_dask\", \"xarray/tests/test_indexes.py::test_safe_cast_to_index_cftimeindex\", \"xarray/tests/test_indexes.py::test_safe_cast_to_index_datetime_datetime\", \"xarray/tests/test_utils.py::test_dask_array_is_scalar\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion_scalar\", \"xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion_scalar\", \"xarray/tests/test_variable.py::TestVariable::test_0d_timedelta\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_use_bottleneck\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-0.25]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-0.25]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_method[True-midpoint]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_method[True-lower]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_chunked_dim_error\", \"xarray/tests/test_variable.py::TestVariable::test_rank_dask_raises\", \"xarray/tests/test_variable.py::TestVariable::test_rank\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims_dask\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_properties\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_dict\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_int\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_float\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_string\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_object\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_0d_time_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_object_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_1d_math\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_1d_reduce\", \"xarray/tests/test_variable.py::TestVariableWithDask::test___array__\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_deep_recursive\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_replace\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_real_and_imag\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_load\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_advanced\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_error\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg0-np_arg0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg1-np_arg1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg2-np_arg2]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg3-np_arg3]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg4-np_arg4]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window[x-3]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window[y-5]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims0-center0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims0-center1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims1-center0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims1-center1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims2-center0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims2-center1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-window0-x_w-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-3-window_dim1-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-3-x_w-center2]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_chunk\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_fancy\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-3-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-3-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-8-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-8-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-11-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-11-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-3-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-3-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-8-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-8-y]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-11-x]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-11-y]\", \"xarray/tests/test_variable.py::TestVariableWithSparse::test_as_sparse\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_datetime\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_DaskIndexingAdapter\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_dask[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_dask[IndexVariable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint[IndexVariable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_sparse[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint_wrapping_dask[Variable]\", \"xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint_wrapping_dask[IndexVariable]\"]",
  "environment_setup_commit": "50ea159bfd0872635ebf4281e741f3c87f0bef6b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.901969",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}