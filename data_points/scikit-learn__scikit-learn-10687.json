{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10687",
  "base_commit": "69e9111b437084f99011dde6ab8ccc848c8c3783",
  "patch": "diff --git a/sklearn/linear_model/coordinate_descent.py b/sklearn/linear_model/coordinate_descent.py\n--- a/sklearn/linear_model/coordinate_descent.py\n+++ b/sklearn/linear_model/coordinate_descent.py\n@@ -762,8 +762,12 @@ def fit(self, X, y, check_input=True):\n \n         if n_targets == 1:\n             self.n_iter_ = self.n_iter_[0]\n+            self.coef_ = coef_[0]\n+            self.dual_gap_ = dual_gaps_[0]\n+        else:\n+            self.coef_ = coef_\n+            self.dual_gap_ = dual_gaps_\n \n-        self.coef_, self.dual_gap_ = map(np.squeeze, [coef_, dual_gaps_])\n         self._set_intercept(X_offset, y_offset, X_scale)\n \n         # workaround since _set_intercept will cast self.coef_ into X.dtype\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_coordinate_descent.py b/sklearn/linear_model/tests/test_coordinate_descent.py\n--- a/sklearn/linear_model/tests/test_coordinate_descent.py\n+++ b/sklearn/linear_model/tests/test_coordinate_descent.py\n@@ -803,3 +803,9 @@ def test_enet_l1_ratio():\n         est.fit(X, y[:, None])\n         est_desired.fit(X, y[:, None])\n     assert_array_almost_equal(est.coef_, est_desired.coef_, decimal=5)\n+\n+\n+def test_coef_shape_not_zero():\n+    est_no_intercept = Lasso(fit_intercept=False)\n+    est_no_intercept.fit(np.c_[np.ones(3)], np.ones(3))\n+    assert est_no_intercept.coef_.shape == (1,)\n",
  "problem_statement": "Shape of `coef_` wrong for linear_model.Lasso when using `fit_intercept=False` \n<!--\r\nIf your issue is a usage question, submit it here instead:\r\n- StackOverflow with the scikit-learn tag: http://stackoverflow.com/questions/tagged/scikit-learn\r\n- Mailing List: https://mail.python.org/mailman/listinfo/scikit-learn\r\nFor more information, see User Questions: http://scikit-learn.org/stable/support.html#user-questions\r\n-->\r\n\r\n<!-- Instructions For Filing a Bug: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#filing-bugs -->\r\n\r\n#### Description\r\nShape of `coef_` wrong for linear_model.Lasso when using `fit_intercept=False` \r\n\r\n#### Steps/Code to Reproduce\r\nExample:\r\n\r\n```python\r\nimport numpy as np\r\nfrom sklearn import linear_model\r\n\r\nest_intercept = linear_model.Lasso(fit_intercept=True)\r\nest_intercept.fit(np.c_[np.ones(3)], np.ones(3))\r\nassert est_intercept.coef_.shape  == (1,)\r\n```\r\n\r\n```python\r\nimport numpy as np\r\nfrom sklearn import linear_model\r\n\r\nest_no_intercept = linear_model.Lasso(fit_intercept=False)\r\nest_no_intercept.fit(np.c_[np.ones(3)], np.ones(3))\r\nassert est_no_intercept.coef_.shape  == (1,)\r\n```\r\n\r\n#### Expected Results\r\nthe second snippet should not raise, but it does. The first snippet is ok. I pasted it as a reference\r\n\r\n#### Actual Results\r\n```python\r\nIn [2]: %paste\r\nimport numpy as np\r\nfrom sklearn import linear_model\r\nest_intercept = linear_model.Lasso(fit_intercept=True)\r\nest_intercept.fit(np.c_[np.ones(3)], np.ones(3))\r\nassert est_intercept.coef_.shape  == (1,)\r\n\r\n\r\n\r\nIn [3]: %paste\r\nimport numpy as np\r\nfrom sklearn import linear_model\r\n\r\nest_no_intercept = linear_model.Lasso(fit_intercept=False)\r\nest_no_intercept.fit(np.c_[np.ones(3)], np.ones(3))\r\nassert est_no_intercept.coef_.shape  == (1,)\r\n\r\n\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-3-5ffa9cfd4df7> in <module>()\r\n      4 est_no_intercept = linear_model.Lasso(fit_intercept=False)\r\n      5 est_no_intercept.fit(np.c_[np.ones(3)], np.ones(3))\r\n----> 6 assert est_no_intercept.coef_.shape  == (1,)\r\n\r\nAssertionError:\r\n```\r\n\r\n#### Versions\r\nLinux-3.2.0-4-amd64-x86_64-with-debian-7.11\r\n('Python', '2.7.3 (default, Mar 13 2014, 11:03:55) \\n[GCC 4.7.2]')\r\n('NumPy', '1.13.3')\r\n('SciPy', '0.19.1')\r\n('Scikit-Learn', '0.18.2')\r\n\r\n\r\n\r\n<!-- Thanks for contributing! -->\r\n\n[MRG] Shape of `coef_` wrong for linear_model.Lasso when using `fit_intercept=False`\n<!--\r\nThanks for contributing a pull request! Please ensure you have taken a look at\r\nthe contribution guidelines: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#Contributing-Pull-Requests\r\n-->\r\n#### Reference Issue\r\nFixes #10571 \n",
  "hints_text": "So coef_ is a 0-dimensional array. Sounds like a misuse of `np.squeeze`.\nHi, Jnothman, I am new to this community, may I try this one? @jnothman \nSure, if you understand the problem: add a test, fix it, and open a pull\nrequest.\n\n@jnothman  \r\nThis problem happens to Elastic Net too. Not just Lasso. But I did not find it in Ridge. Do you think we should create another issue ticket for the similar problem in Elastic Net?\r\n\r\nI will compare the codes between Lasso/ Elastic Net and Ridge and try to get it fixed. I am not quite familiar with the whole process but still learning. So if I got some further questions, may I ask you here ?\r\n\r\nPlease refer to the codes below for the Elastic Net:\r\n`\r\nimport numpy as np\r\nfrom sklearn import linear_model\r\n\r\nest_intercept = linear_model.ElasticNet(fit_intercept=True)\r\nest_intercept.fit(np.c_[np.ones(3)], np.ones(3))\r\nassert est_intercept.coef_.shape  == (1,)\r\n\r\n\r\nimport numpy as np\r\nfrom sklearn import linear_model\r\n\r\nest_no_intercept = linear_model.ElasticNet(fit_intercept=False)\r\nest_no_intercept.fit(np.c_[np.ones(3)], np.ones(3))\r\nassert est_no_intercept.coef_.shape  == (1,)\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-12-6eba976ab91b>\", line 6, in <module>\r\n    assert est_no_intercept.coef_.shape  == (1,)\r\n\r\nAssertionError\r\n`\nlasso and elasticnet share an underlying implementation. no need to create\na second issue, but the pr should fix both\n\nOn 2 Feb 2018 2:47 pm, \"XunOuyang\" <notifications@github.com> wrote:\n\n> @jnothman <https://github.com/jnothman>\n> This problem happens to Elastic Net too. Not just Lasso. But I did not\n> find it in Ridge. Do you think we should create another issue ticket for\n> the similar problem in Elastic Net?\n>\n> I will compare the codes between Lasso/ Elastic Net and Ridge and try to\n> get it fixed. I am not quite familiar with the whole process but still\n> learning. So if I got some further questions, may I ask you here ?\n>\n> `\n> import numpy as np\n> from sklearn import linear_model\n>\n> est_intercept = linear_model.ElasticNet(fit_intercept=True)\n> est_intercept.fit(np.c_[np.ones(3)], np.ones(3))\n> assert est_intercept.coef_.shape == (1,)\n>\n> import numpy as np\n> from sklearn import linear_model\n>\n> est_no_intercept = linear_model.ElasticNet(fit_intercept=False)\n> est_no_intercept.fit(np.c_[np.ones(3)], np.ones(3))\n> assert est_no_intercept.coef_.shape == (1,)\n>\n> Traceback (most recent call last):\n>\n> File \"\", line 6, in\n> assert est_no_intercept.coef_.shape == (1,)\n>\n> AssertionError\n> `\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/10571#issuecomment-362478035>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz637mj3jZkxbbyubR_EWxoJQSkm07ks5tQoVEgaJpZM4R1eTP>\n> .\n>\n\n@jnothman\r\nHi, I'm a newcomer and I just checked it out.\r\n\r\nI used this test:\r\n\r\n```python\r\ndef test_elastic_net_no_intercept_coef_shape():\r\n    X = [[-1], [0], [1]]\r\n    y = [-1, 0, 1]\r\n\r\n    for intercept in [True, False]:\r\n        clf = ElasticNet(fit_intercept=intercept)\r\n        clf.fit(X, y)\r\n        coef_ = clf.coef_\r\n        assert_equal(coef_.shape, (1,))\r\n```\r\n\r\nthe lines I debugged in ElasticNet.fit() \r\n\r\n``` python\r\n        import pdb; pdb.set_trace()\r\n        self.coef_, self.dual_gap_ = map(np.squeeze, [coef_, dual_gaps_])\r\n\r\n        self._set_intercept(X_offset, y_offset, X_scale)\r\n\r\n        # workaround since _set_intercept will cast self.coef_ into X.dtype\r\n        self.coef_ = np.asarray(self.coef_, dtype=X.dtype)\r\n        \r\n        # return self for chaining fit and predict calls\r\n        return self\r\n```\r\n\r\nand here's the results of debugging: \r\n\r\n```python\r\ntest_coordinate_descent.py \r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB set_trace (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n\r\n******** with intercept\r\n\r\n> /scikit-learn/sklearn/linear_model/coordinate_descent.py(763)fit()\r\n-> self.coef_, self.dual_gap_ = map(np.squeeze, [coef_, dual_gaps_])\r\n(Pdb) coef_\r\narray([[ 0.14285714]]) # before np.squeeze\r\n\r\n(Pdb) next\r\n> /scikit-learn/sklearn/linear_model/coordinate_descent.py(765)fit()\r\n-> self._set_intercept(X_offset, y_offset, X_scale)\r\n(Pdb) self.coef_\r\narray(0.14285714285714285) # after np.squeeze\r\n\r\n(Pdb) next\r\n> /scikit-learn/sklearn/linear_model/coordinate_descent.py(768)fit()\r\n-> self.coef_ = np.asarray(self.coef_, dtype=X.dtype)\r\n(Pdb) self.coef_\r\narray([ 0.14285714]) # after set_intercept\r\n\r\n(Pdb) next\r\n> /scikit-learn/sklearn/linear_model/coordinate_descent.py(771)fit()\r\n-> return self\r\n(Pdb) self.coef_\r\narray([ 0.14285714]) # after np.asarray\r\n\r\n\r\n******** without intercept\r\n\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB set_trace (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /scikit-learn/sklearn/linear_model/coordinate_descent.py(763)fit()\r\n-> self.coef_, self.dual_gap_ = map(np.squeeze, [coef_, dual_gaps_])\r\n(Pdb) coef_\r\narray([[ 0.14285714]]) # before np.squeeze\r\n\r\n(Pdb) next\r\n> /scikit-learn/sklearn/linear_model/coordinate_descent.py(765)fit()\r\n-> self._set_intercept(X_offset, y_offset, X_scale)\r\n(Pdb) self.coef_\r\narray(0.14285714285714285) # after np.squeeze\r\n\r\n(Pdb) next\r\n> /scikit-learn/sklearn/linear_model/coordinate_descent.py(768)fit()\r\n-> self.coef_ = np.asarray(self.coef_, dtype=X.dtype)\r\n(Pdb) self.coef_\r\narray(0.14285714285714285) # after set_intercept\r\n\r\n(Pdb) next\r\n> /scikit-learn/sklearn/linear_model/coordinate_descent.py(771)fit()\r\n-> return self\r\n(Pdb) self.coef_\r\narray(0.14285714285714285) # after np.asarray\r\n```\r\nso if the test case I used is correct it seems like what causes this (or doesn't handle the case) is `base.LinearModel._set_intercept`\r\n```python\r\n    def _set_intercept(self, X_offset, y_offset, X_scale):\r\n        \"\"\"Set the intercept_\r\n        \"\"\"\r\n        if self.fit_intercept:\r\n            self.coef_ = self.coef_ / X_scale\r\n            self.intercept_ = y_offset - np.dot(X_offset, self.coef_.T)\r\n        else:\r\n            self.intercept_ = 0.\r\n```\r\nI think it's related to the broadcasting occurring at `self.coef_ = self.coef_ / X_scale ` , which doesn't happen in the second case. \r\n\r\nIf that's indeed the case, should it be fixed in this function (which is used by other modules too) or bypass it somehow locally on ElasticNet.fit() ?\r\n\n@dorcoh, thanks for your analysis. I don't have the attention span now to look through it in detail but perhaps you'd like to review the current patch at #10616 to see if it agrees with your intuitions about what the issue is, and comment there.\nyou have travis failures.\n@agramfort I've made changes, don't know if it is optimal enough. I think you should review it.\nAlso I have AppVeyor failures on `PYTHON_ARCH=64` which I can not explain.",
  "created_at": "2018-02-24T16:37:13Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/linear_model/tests/test_coordinate_descent.py::test_coef_shape_not_zero\"]",
  "PASS_TO_PASS": "[\"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_zero\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_toy\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_toy\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv_with_some_model_selection\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_path_return_models_vs_new_return_gives_same_coefficients\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_path_parameters\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_alpha_warning\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_cv_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_uniform_targets\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multi_task_lasso_and_enet\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_readonly_data\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multi_task_lasso_readonly_data\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_multitarget\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multioutput_enetcv_error\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multitask_enet_and_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_1d_multioutput_enet_and_multitask_enet_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_1d_multioutput_lasso_and_multitask_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_input_dtype_enet_and_lassocv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_precompute_invalid_argument\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_random_descent\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_dense_descent_paths\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_check_input_false\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_True[True]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_True[False]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_False_check_input_False\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_overrided_gram_matrix\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_non_float_y\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_float_precision\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_l1_ratio\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.953523",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}