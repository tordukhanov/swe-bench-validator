{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17103",
  "base_commit": "d85c30ef80cb6a4b9c53250bf4f549c8759b1141",
  "patch": "diff --git a/sympy/printing/tensorflow.py b/sympy/printing/tensorflow.py\n--- a/sympy/printing/tensorflow.py\n+++ b/sympy/printing/tensorflow.py\n@@ -1,12 +1,14 @@\n from distutils.version import LooseVersion as V\n \n-from sympy import Mul\n+from sympy import Mul, S\n+from sympy.codegen.cfunctions import Sqrt\n from sympy.core.compatibility import Iterable\n from sympy.external import import_module\n from sympy.printing.precedence import PRECEDENCE\n from sympy.printing.pycode import AbstractPythonCodePrinter\n import sympy\n \n+tensorflow = import_module('tensorflow')\n \n class TensorflowPrinter(AbstractPythonCodePrinter):\n     \"\"\"\n@@ -16,52 +18,73 @@ class TensorflowPrinter(AbstractPythonCodePrinter):\n     printmethod = \"_tensorflowcode\"\n \n     mapping = {\n-        sympy.Abs: \"tensorflow.abs\",\n-        sympy.sign: \"tensorflow.sign\",\n-        sympy.ceiling: \"tensorflow.ceil\",\n-        sympy.floor: \"tensorflow.floor\",\n-        sympy.log: \"tensorflow.log\",\n-        sympy.exp: \"tensorflow.exp\",\n-        sympy.sqrt: \"tensorflow.sqrt\",\n-        sympy.cos: \"tensorflow.cos\",\n-        sympy.acos: \"tensorflow.acos\",\n-        sympy.sin: \"tensorflow.sin\",\n-        sympy.asin: \"tensorflow.asin\",\n-        sympy.tan: \"tensorflow.tan\",\n-        sympy.atan: \"tensorflow.atan\",\n-        sympy.atan2: \"tensorflow.atan2\",\n-        sympy.cosh: \"tensorflow.cosh\",\n-        sympy.acosh: \"tensorflow.acosh\",\n-        sympy.sinh: \"tensorflow.sinh\",\n-        sympy.asinh: \"tensorflow.asinh\",\n-        sympy.tanh: \"tensorflow.tanh\",\n-        sympy.atanh: \"tensorflow.atanh\",\n-        sympy.re: \"tensorflow.real\",\n-        sympy.im: \"tensorflow.imag\",\n-        sympy.arg: \"tensorflow.angle\",\n-        sympy.erf: \"tensorflow.erf\",\n-        sympy.loggamma: \"tensorflow.gammaln\",\n-        sympy.Pow: \"tensorflow.pow\",\n-        sympy.Eq: \"tensorflow.equal\",\n-        sympy.Ne: \"tensorflow.not_equal\",\n-        sympy.StrictGreaterThan: \"tensorflow.greater\",\n-        sympy.StrictLessThan: \"tensorflow.less\",\n-        sympy.LessThan: \"tensorflow.less_equal\",\n-        sympy.GreaterThan: \"tensorflow.greater_equal\",\n-        sympy.And: \"tensorflow.logical_and\",\n-        sympy.Or: \"tensorflow.logical_or\",\n-        sympy.Not: \"tensorflow.logical_not\",\n-        sympy.Max: \"tensorflow.maximum\",\n-        sympy.Min: \"tensorflow.minimum\",\n+        sympy.Abs: \"tensorflow.math.abs\",\n+        sympy.sign: \"tensorflow.math.sign\",\n+\n+        # XXX May raise error for ints.\n+        sympy.ceiling: \"tensorflow.math.ceil\",\n+        sympy.floor: \"tensorflow.math.floor\",\n+        sympy.log: \"tensorflow.math.log\",\n+        sympy.exp: \"tensorflow.math.exp\",\n+        Sqrt: \"tensorflow.math.sqrt\",\n+        sympy.cos: \"tensorflow.math.cos\",\n+        sympy.acos: \"tensorflow.math.acos\",\n+        sympy.sin: \"tensorflow.math.sin\",\n+        sympy.asin: \"tensorflow.math.asin\",\n+        sympy.tan: \"tensorflow.math.tan\",\n+        sympy.atan: \"tensorflow.math.atan\",\n+        sympy.atan2: \"tensorflow.math.atan2\",\n+        # XXX Also may give NaN for complex results.\n+        sympy.cosh: \"tensorflow.math.cosh\",\n+        sympy.acosh: \"tensorflow.math.acosh\",\n+        sympy.sinh: \"tensorflow.math.sinh\",\n+        sympy.asinh: \"tensorflow.math.asinh\",\n+        sympy.tanh: \"tensorflow.math.tanh\",\n+        sympy.atanh: \"tensorflow.math.atanh\",\n+\n+        sympy.re: \"tensorflow.math.real\",\n+        sympy.im: \"tensorflow.math.imag\",\n+        sympy.arg: \"tensorflow.math.angle\",\n+\n+        # XXX May raise error for ints and complexes\n+        sympy.erf: \"tensorflow.math.erf\",\n+        sympy.loggamma: \"tensorflow.math.lgamma\",\n+\n+        sympy.Eq: \"tensorflow.math.equal\",\n+        sympy.Ne: \"tensorflow.math.not_equal\",\n+        sympy.StrictGreaterThan: \"tensorflow.math.greater\",\n+        sympy.StrictLessThan: \"tensorflow.math.less\",\n+        sympy.LessThan: \"tensorflow.math.less_equal\",\n+        sympy.GreaterThan: \"tensorflow.math.greater_equal\",\n+\n+        sympy.And: \"tensorflow.math.logical_and\",\n+        sympy.Or: \"tensorflow.math.logical_or\",\n+        sympy.Not: \"tensorflow.math.logical_not\",\n+        sympy.Max: \"tensorflow.math.maximum\",\n+        sympy.Min: \"tensorflow.math.minimum\",\n+\n         # Matrices\n-        sympy.MatAdd: \"tensorflow.add\",\n-        sympy.HadamardProduct: \"tensorflow.multiply\",\n-        sympy.Trace: \"tensorflow.trace\",\n-        sympy.Determinant : \"tensorflow.matrix_determinant\",\n-        sympy.Inverse: \"tensorflow.matrix_inverse\",\n-        sympy.Transpose: \"tensorflow.matrix_transpose\",\n+        sympy.MatAdd: \"tensorflow.math.add\",\n+        sympy.HadamardProduct: \"tensorflow.math.multiply\",\n+        sympy.Trace: \"tensorflow.linalg.trace\",\n+\n+        # XXX May raise error for integer matrices.\n+        sympy.Determinant : \"tensorflow.linalg.det\",\n     }\n \n+    _default_settings = dict(\n+        AbstractPythonCodePrinter._default_settings,\n+        tensorflow_version=None\n+    )\n+\n+    def __init__(self, settings=None):\n+        super(TensorflowPrinter, self).__init__(settings)\n+\n+        version = self._settings['tensorflow_version']\n+        if version is None and tensorflow:\n+            version = tensorflow.__version__\n+        self.tensorflow_version = version\n+\n     def _print_Function(self, expr):\n         op = self.mapping.get(type(expr), None)\n         if op is None:\n@@ -79,11 +102,25 @@ def _print_Function(self, expr):\n     _print_Application = _print_Function\n     _print_MatrixExpr = _print_Function\n     # TODO: a better class structure would avoid this mess:\n+    _print_Relational = _print_Function\n     _print_Not = _print_Function\n     _print_And = _print_Function\n     _print_Or = _print_Function\n-    _print_Transpose = _print_Function\n+    _print_HadamardProduct = _print_Function\n     _print_Trace = _print_Function\n+    _print_Determinant = _print_Function\n+\n+    def _print_Inverse(self, expr):\n+        op = self._module_format('tensorflow.linalg.inv')\n+        return \"{}({})\".format(op, self._print(expr.arg))\n+\n+    def _print_Transpose(self, expr):\n+        version = self.tensorflow_version\n+        if version and V(version) < V('1.14'):\n+            op = self._module_format('tensorflow.matrix_transpose')\n+        else:\n+            op = self._module_format('tensorflow.linalg.matrix_transpose')\n+        return \"{}({})\".format(op, self._print(expr.arg))\n \n     def _print_Derivative(self, expr):\n         variables = expr.variables\n@@ -100,27 +137,38 @@ def unfold(expr, args):\n         return unfold(expr.expr, variables)\n \n     def _print_Piecewise(self, expr):\n-        tensorflow = import_module('tensorflow')\n-        if tensorflow and V(tensorflow.__version__) < '1.0':\n-            tensorflow_piecewise = \"select\"\n+        version = self.tensorflow_version\n+        if version and V(version) < V('1.0'):\n+            tensorflow_piecewise = \"tensorflow.select\"\n         else:\n-            tensorflow_piecewise = \"where\"\n+            tensorflow_piecewise = \"tensorflow.where\"\n \n         from sympy import Piecewise\n         e, cond = expr.args[0].args\n         if len(expr.args) == 1:\n             return '{0}({1}, {2}, {3})'.format(\n-                tensorflow_piecewise,\n+                self._module_format(tensorflow_piecewise),\n                 self._print(cond),\n                 self._print(e),\n                 0)\n \n         return '{0}({1}, {2}, {3})'.format(\n-            tensorflow_piecewise,\n+            self._module_format(tensorflow_piecewise),\n             self._print(cond),\n             self._print(e),\n             self._print(Piecewise(*expr.args[1:])))\n \n+    def _print_Pow(self, expr):\n+        # XXX May raise error for\n+        # int**float or int**complex or float**complex\n+        base, exp = expr.args\n+        if expr.exp == S.Half:\n+            return \"{}({})\".format(\n+                self._module_format(\"tensorflow.math.sqrt\"), self._print(base))\n+        return \"{}({}, {})\".format(\n+            self._module_format(\"tensorflow.math.pow\"),\n+            self._print(base), self._print(exp))\n+\n     def _print_MatrixBase(self, expr):\n         tensorflow_f = \"tensorflow.Variable\" if expr.free_symbols else \"tensorflow.constant\"\n         data = \"[\"+\", \".join([\"[\"+\", \".join([self._print(j) for j in i])+\"]\" for i in expr.tolist()])+\"]\"\n@@ -136,13 +184,16 @@ def _print_MatMul(self, expr):\n         if args:\n             return \"%s*%s\" % (\n                 self.parenthesize(Mul.fromiter(args), PRECEDENCE[\"Mul\"]),\n-                self._expand_fold_binary_op(\"tensorflow.matmul\", mat_args)\n+                self._expand_fold_binary_op(\n+                    \"tensorflow.linalg.matmul\", mat_args)\n             )\n         else:\n-            return self._expand_fold_binary_op(\"tensorflow.matmul\", mat_args)\n+            return self._expand_fold_binary_op(\n+                \"tensorflow.linalg.matmul\", mat_args)\n \n     def _print_MatPow(self, expr):\n-        return self._expand_fold_binary_op(\"tensorflow.matmul\", [expr.base]*expr.exp)\n+        return self._expand_fold_binary_op(\n+            \"tensorflow.linalg.matmul\", [expr.base]*expr.exp)\n \n     def _print_Assignment(self, expr):\n         # TODO: is this necessary?\n@@ -169,7 +220,7 @@ def _print_CodegenArrayTensorProduct(self, expr):\n         letters = self._get_letter_generator_for_einsum()\n         contraction_string = \",\".join([\"\".join([next(letters) for j in range(i)]) for i in expr.subranks])\n         return '%s(\"%s\", %s)' % (\n-                self._module_format('tensorflow.einsum'),\n+                self._module_format('tensorflow.linalg.einsum'),\n                 contraction_string,\n                 \", \".join([self._print(arg) for arg in expr.args])\n         )\n@@ -185,7 +236,7 @@ def _print_CodegenArrayContraction(self, expr):\n         if isinstance(base, CodegenArrayTensorProduct):\n             elems = [\"%s\" % (self._print(arg)) for arg in base.args]\n             return \"%s(\\\"%s\\\", %s)\" % (\n-                self._module_format(\"tensorflow.einsum\"),\n+                self._module_format(\"tensorflow.linalg.einsum\"),\n                 contraction_string,\n                 \", \".join(elems)\n             )\n@@ -211,7 +262,7 @@ def _print_CodegenArrayDiagonal(self, expr):\n         diagonal_string, letters_free, letters_dum = self._get_einsum_string(subranks, diagonal_indices)\n         elems = [self._print(i) for i in elems]\n         return '%s(\"%s\", %s)' % (\n-            self._module_format(\"tensorflow.einsum\"),\n+            self._module_format(\"tensorflow.linalg.einsum\"),\n             \"{0}->{1}{2}\".format(diagonal_string, \"\".join(letters_free), \"\".join(letters_dum)),\n             \", \".join(elems)\n         )\n@@ -224,9 +275,9 @@ def _print_CodegenArrayPermuteDims(self, expr):\n         )\n \n     def _print_CodegenArrayElementwiseAdd(self, expr):\n-        return self._expand_fold_binary_op('tensorflow.add', expr.args)\n+        return self._expand_fold_binary_op('tensorflow.math.add', expr.args)\n \n \n-def tensorflow_code(expr):\n-    printer = TensorflowPrinter()\n+def tensorflow_code(expr, **settings):\n+    printer = TensorflowPrinter(settings)\n     return printer.doprint(expr)\ndiff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -11,6 +11,8 @@\n import textwrap\n import linecache\n \n+from types import FunctionType\n+\n from sympy.core.compatibility import (exec_, is_sequence, iterable,\n     NotIterable, string_types, range, builtins, PY3)\n from sympy.utilities.misc import filldedent\n@@ -82,15 +84,7 @@\n NUMPY_TRANSLATIONS = {}\n SCIPY_TRANSLATIONS = {}\n \n-TENSORFLOW_TRANSLATIONS = {\n-    \"Abs\": \"abs\",\n-    \"ceiling\": \"ceil\",\n-    \"im\": \"imag\",\n-    \"ln\": \"log\",\n-    \"Mod\": \"mod\",\n-    \"conjugate\": \"conj\",\n-    \"re\": \"real\",\n-}\n+TENSORFLOW_TRANSLATIONS = {}\n \n NUMEXPR_TRANSLATIONS = {}\n \n@@ -100,7 +94,7 @@\n     \"mpmath\": (MPMATH, MPMATH_DEFAULT, MPMATH_TRANSLATIONS, (\"from mpmath import *\",)),\n     \"numpy\": (NUMPY, NUMPY_DEFAULT, NUMPY_TRANSLATIONS, (\"import numpy; from numpy import *; from numpy.linalg import *\",)),\n     \"scipy\": (SCIPY, SCIPY_DEFAULT, SCIPY_TRANSLATIONS, (\"import numpy; import scipy; from scipy import *; from scipy.special import *\",)),\n-    \"tensorflow\": (TENSORFLOW, TENSORFLOW_DEFAULT, TENSORFLOW_TRANSLATIONS, (\"from tensorflow import *\",)),\n+    \"tensorflow\": (TENSORFLOW, TENSORFLOW_DEFAULT, TENSORFLOW_TRANSLATIONS, (\"import tensorflow\",)),\n     \"sympy\": (SYMPY, SYMPY_DEFAULT, {}, (\n         \"from sympy.functions import *\",\n         \"from sympy.matrices import *\",\n@@ -588,21 +582,45 @@ def _lambdifygenerated(x):\n     Usage with Tensorflow:\n \n     >>> import tensorflow as tf\n-    >>> from sympy import Max, sin\n+    >>> from sympy import Max, sin, lambdify\n+    >>> from sympy.abc import x\n+\n     >>> f = Max(x, sin(x))\n     >>> func = lambdify(x, f, 'tensorflow')\n+\n+    After tensorflow v2, eager execution is enabled by default.\n+    If you want to get the compatible result across tensorflow v1 and v2\n+    as same as this tutorial, run this line.\n+\n+    >>> tf.compat.v1.enable_eager_execution()\n+\n+    If you have eager execution enabled, you can get the result out\n+    immediately as you can use numpy.\n+\n+    If you pass tensorflow objects, you may get an ``EagerTensor``\n+    object instead of value.\n+\n     >>> result = func(tf.constant(1.0))\n-    >>> print(result) # a tf.Tensor representing the result of the calculation\n-    Tensor(\"Maximum:0\", shape=(), dtype=float32)\n-    >>> sess = tf.Session()\n-    >>> sess.run(result) # compute result\n-    1.0\n-    >>> var = tf.Variable(1.0)\n-    >>> sess.run(tf.global_variables_initializer())\n-    >>> sess.run(func(var)) # also works for tf.Variable and tf.Placeholder\n+    >>> print(result)\n+    tf.Tensor(1.0, shape=(), dtype=float32)\n+    >>> print(result.__class__)\n+    <class 'tensorflow.python.framework.ops.EagerTensor'>\n+\n+    You can use ``.numpy()`` to get the numpy value of the tensor.\n+\n+    >>> result.numpy()\n     1.0\n-    >>> tensor = tf.constant([[1.0, 2.0], [3.0, 4.0]]) # works with any shape tensor\n-    >>> sess.run(func(tensor))\n+\n+    >>> var = tf.Variable(2.0)\n+    >>> result = func(var) # also works for tf.Variable and tf.Placeholder\n+    >>> result.numpy()\n+    2.0\n+\n+    And it works with any shape array.\n+\n+    >>> tensor = tf.constant([[1.0, 2.0], [3.0, 4.0]])\n+    >>> result = func(tensor)\n+    >>> result.numpy()\n     [[1. 2.]\n      [3. 4.]]\n \n@@ -763,9 +781,16 @@ def _lambdifygenerated(x):\n     for mod, keys in (getattr(printer, 'module_imports', None) or {}).items():\n         for k in keys:\n             if k not in namespace:\n-                imp_mod_lines.append(\"from %s import %s\" % (mod, k))\n-    for ln in imp_mod_lines:\n-        exec_(ln, {}, namespace)\n+                ln = \"from %s import %s\" % (mod, k)\n+                try:\n+                    exec_(ln, {}, namespace)\n+                except ImportError:\n+                    # Tensorflow 2.0 has issues with importing a specific\n+                    # function from its submodule.\n+                    # https://github.com/tensorflow/tensorflow/issues/33022\n+                    ln = \"%s = %s.%s\" % (k, mod, k)\n+                    exec_(ln, {}, namespace)\n+                imp_mod_lines.append(ln)\n \n     # Provide lambda expression with builtins, and compatible implementation of range\n     namespace.update({'builtins':builtins, 'range':range})\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_tensorflow.py b/sympy/printing/tests/test_tensorflow.py\n--- a/sympy/printing/tests/test_tensorflow.py\n+++ b/sympy/printing/tests/test_tensorflow.py\n@@ -1,19 +1,31 @@\n import random\n \n-from sympy.printing.tensorflow import TensorflowPrinter\n-from sympy.printing.tensorflow import tensorflow_code\n-from sympy import (eye, symbols, MatrixSymbol, Symbol, Matrix, symbols, sin,\n-        exp, Function, Derivative, Trace)\n+from sympy import symbols, Symbol, Function, Derivative\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayTensorProduct, CodegenArrayElementwiseAdd,\n         CodegenArrayPermuteDims, CodegenArrayDiagonal)\n+from sympy.core.relational import Eq, Ne, Ge, Gt, Le, Lt\n+from sympy.external import import_module\n+from sympy.functions import \\\n+    Abs, Max, Min, ceiling, exp, floor, sign, sin, asin, sqrt, cos, \\\n+    acos, tan, atan, atan2, cosh, acosh, sinh, asinh, tanh, atanh, \\\n+    re, im, arg, erf, loggamma, log\n+from sympy.matrices import Matrix, MatrixBase, eye, randMatrix\n+from sympy.matrices.expressions import \\\n+    Determinant, HadamardProduct, Inverse, MatrixSymbol, Trace\n+from sympy.printing.tensorflow import TensorflowPrinter, tensorflow_code\n from sympy.utilities.lambdify import lambdify\n-\n from sympy.utilities.pytest import skip\n-from sympy.external import import_module\n+\n \n tf = tensorflow = import_module(\"tensorflow\")\n \n+if tensorflow:\n+    # Hide Tensorflow warnings\n+    import os\n+    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n+\n+\n M = MatrixSymbol(\"M\", 3, 3)\n N = MatrixSymbol(\"N\", 3, 3)\n P = MatrixSymbol(\"P\", 3, 3)\n@@ -25,57 +37,279 @@\n     llo = [[j for j in range(i, i+3)] for i in range(0, 9, 3)]\n     m3x3 = tf.constant(llo)\n     m3x3sympy = Matrix(llo)\n-    session = tf.Session()\n \n \n-def _compare_tensorflow_matrix(variables, expr):\n+def _compare_tensorflow_matrix(variables, expr, use_float=False):\n     f = lambdify(variables, expr, 'tensorflow')\n-    random_matrices = [Matrix([[random.randint(0, 10) for k in\n-        range(i.shape[1])] for j in range(i.shape[0])]) for i in variables]\n-    random_variables = [eval(tensorflow_code(i)) for i in\n-            random_matrices]\n-    r = session.run(f(*random_variables))\n-    e = expr.subs({k: v for k, v in zip(variables, random_matrices)}).doit()\n+    if not use_float:\n+        random_matrices = [randMatrix(v.rows, v.cols) for v in variables]\n+    else:\n+        random_matrices = [randMatrix(v.rows, v.cols)/100. for v in variables]\n+\n+    graph = tf.Graph()\n+    r = None\n+    with graph.as_default():\n+        random_variables = [eval(tensorflow_code(i)) for i in random_matrices]\n+        session = tf.compat.v1.Session(graph=graph)\n+        r = session.run(f(*random_variables))\n+\n+    e = expr.subs({k: v for k, v in zip(variables, random_matrices)})\n+    e = e.doit()\n     if e.is_Matrix:\n+        if not isinstance(e, MatrixBase):\n+            e = e.as_explicit()\n         e = e.tolist()\n-    assert (r == e).all()\n \n+    if not use_float:\n+        assert (r == e).all()\n+    else:\n+        r = [i for row in r for i in row]\n+        e = [i for row in e for i in row]\n+        assert all(\n+            abs(a-b) < 10**-(4-int(log(abs(a), 10))) for a, b in zip(r, e))\n+\n+\n+def _compare_tensorflow_matrix_scalar(variables, expr):\n+    f = lambdify(variables, expr, 'tensorflow')\n+    random_matrices = [\n+        randMatrix(v.rows, v.cols).evalf() / 100 for v in variables]\n+\n+    graph = tf.Graph()\n+    r = None\n+    with graph.as_default():\n+        random_variables = [eval(tensorflow_code(i)) for i in random_matrices]\n+        session = tf.compat.v1.Session(graph=graph)\n+        r = session.run(f(*random_variables))\n+\n+    e = expr.subs({k: v for k, v in zip(variables, random_matrices)})\n+    e = e.doit()\n+    assert abs(r-e) < 10**-6\n+\n+\n+def _compare_tensorflow_scalar(\n+    variables, expr, rng=lambda: random.randint(0, 10)):\n+    f = lambdify(variables, expr, 'tensorflow')\n+    rvs = [rng() for v in variables]\n+\n+    graph = tf.Graph()\n+    r = None\n+    with graph.as_default():\n+        tf_rvs = [eval(tensorflow_code(i)) for i in rvs]\n+        session = tf.compat.v1.Session(graph=graph)\n+        r = session.run(f(*tf_rvs))\n+\n+    e = expr.subs({k: v for k, v in zip(variables, rvs)}).evalf().doit()\n+    assert abs(r-e) < 10**-6\n+\n+\n+def _compare_tensorflow_relational(\n+    variables, expr, rng=lambda: random.randint(0, 10)):\n+    f = lambdify(variables, expr, 'tensorflow')\n+    rvs = [rng() for v in variables]\n \n-def test_tensorflow_matrix():\n+    graph = tf.Graph()\n+    r = None\n+    with graph.as_default():\n+        tf_rvs = [eval(tensorflow_code(i)) for i in rvs]\n+        session = tf.compat.v1.Session(graph=graph)\n+        r = session.run(f(*tf_rvs))\n+\n+    e = expr.subs({k: v for k, v in zip(variables, rvs)}).doit()\n+    assert r == e\n+\n+\n+def test_tensorflow_printing():\n+    assert tensorflow_code(eye(3)) == \\\n+        \"tensorflow.constant([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\"\n+\n+    expr = Matrix([[x, sin(y)], [exp(z), -t]])\n+    assert tensorflow_code(expr) == \\\n+        \"tensorflow.Variable(\" \\\n+            \"[[x, tensorflow.math.sin(y)],\" \\\n+            \" [tensorflow.math.exp(z), -t]])\"\n+\n+\n+def test_tensorflow_math():\n     if not tf:\n         skip(\"TensorFlow not installed\")\n \n-    assert tensorflow_code(eye(3)) == \"tensorflow.constant([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\"\n+    expr = Abs(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.abs(x)\"\n+    _compare_tensorflow_scalar((x,), expr)\n \n-    expr = Matrix([[x, sin(y)], [exp(z), -t]])\n-    assert tensorflow_code(expr) == \"tensorflow.Variable([[x, tensorflow.sin(y)], [tensorflow.exp(z), -t]])\"\n+    expr = sign(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.sign(x)\"\n+    _compare_tensorflow_scalar((x,), expr)\n+\n+    expr = ceiling(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.ceil(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = floor(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.floor(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = exp(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.exp(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = sqrt(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.sqrt(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = x ** 4\n+    assert tensorflow_code(expr) == \"tensorflow.math.pow(x, 4)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = cos(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.cos(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = acos(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.acos(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = sin(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.sin(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = asin(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.asin(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = tan(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.tan(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = atan(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.atan(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = atan2(y, x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.atan2(y, x)\"\n+    _compare_tensorflow_scalar((y, x), expr, rng=lambda: random.random())\n+\n+    expr = cosh(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.cosh(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.random())\n+\n+    expr = acosh(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.acosh(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.uniform(1, 2))\n+\n+    expr = sinh(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.sinh(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.uniform(1, 2))\n+\n+    expr = asinh(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.asinh(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.uniform(1, 2))\n+\n+    expr = tanh(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.tanh(x)\"\n+    _compare_tensorflow_scalar((x,), expr, rng=lambda: random.uniform(1, 2))\n+\n+    expr = atanh(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.atanh(x)\"\n+    _compare_tensorflow_scalar(\n+        (x,), expr, rng=lambda: random.uniform(-.5, .5))\n+\n+    expr = erf(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.erf(x)\"\n+    _compare_tensorflow_scalar(\n+        (x,), expr, rng=lambda: random.random())\n+\n+    expr = loggamma(x)\n+    assert tensorflow_code(expr) == \"tensorflow.math.lgamma(x)\"\n+    _compare_tensorflow_scalar(\n+        (x,), expr, rng=lambda: random.random())\n+\n+\n+def test_tensorflow_complexes():\n+    assert tensorflow_code(re(x)) == \"tensorflow.math.real(x)\"\n+    assert tensorflow_code(im(x)) == \"tensorflow.math.imag(x)\"\n+    assert tensorflow_code(arg(x)) == \"tensorflow.math.angle(x)\"\n+\n+\n+def test_tensorflow_relational():\n+    if not tf:\n+        skip(\"TensorFlow not installed\")\n+\n+    expr = Eq(x, y)\n+    assert tensorflow_code(expr) == \"tensorflow.math.equal(x, y)\"\n+    _compare_tensorflow_relational((x, y), expr)\n+\n+    expr = Ne(x, y)\n+    assert tensorflow_code(expr) == \"tensorflow.math.not_equal(x, y)\"\n+    _compare_tensorflow_relational((x, y), expr)\n+\n+    expr = Ge(x, y)\n+    assert tensorflow_code(expr) == \"tensorflow.math.greater_equal(x, y)\"\n+    _compare_tensorflow_relational((x, y), expr)\n+\n+    expr = Gt(x, y)\n+    assert tensorflow_code(expr) == \"tensorflow.math.greater(x, y)\"\n+    _compare_tensorflow_relational((x, y), expr)\n+\n+    expr = Le(x, y)\n+    assert tensorflow_code(expr) == \"tensorflow.math.less_equal(x, y)\"\n+    _compare_tensorflow_relational((x, y), expr)\n+\n+    expr = Lt(x, y)\n+    assert tensorflow_code(expr) == \"tensorflow.math.less(x, y)\"\n+    _compare_tensorflow_relational((x, y), expr)\n+\n+\n+def test_tensorflow_matrices():\n+    if not tf:\n+        skip(\"TensorFlow not installed\")\n \n     expr = M\n     assert tensorflow_code(expr) == \"M\"\n     _compare_tensorflow_matrix((M,), expr)\n \n     expr = M + N\n-    assert tensorflow_code(expr) == \"tensorflow.add(M, N)\"\n+    assert tensorflow_code(expr) == \"tensorflow.math.add(M, N)\"\n+    _compare_tensorflow_matrix((M, N), expr)\n+\n+    expr = M * N\n+    assert tensorflow_code(expr) == \"tensorflow.linalg.matmul(M, N)\"\n     _compare_tensorflow_matrix((M, N), expr)\n \n-    expr = M*N\n-    assert tensorflow_code(expr) == \"tensorflow.matmul(M, N)\"\n+    expr = HadamardProduct(M, N)\n+    assert tensorflow_code(expr) == \"tensorflow.math.multiply(M, N)\"\n     _compare_tensorflow_matrix((M, N), expr)\n \n     expr = M*N*P*Q\n-    assert tensorflow_code(expr) == \"tensorflow.matmul(tensorflow.matmul(tensorflow.matmul(M, N), P), Q)\"\n+    assert tensorflow_code(expr) == \\\n+        \"tensorflow.linalg.matmul(\" \\\n+            \"tensorflow.linalg.matmul(\" \\\n+                \"tensorflow.linalg.matmul(M, N), P), Q)\"\n     _compare_tensorflow_matrix((M, N, P, Q), expr)\n \n     expr = M**3\n-    assert tensorflow_code(expr) == \"tensorflow.matmul(tensorflow.matmul(M, M), M)\"\n+    assert tensorflow_code(expr) == \\\n+        \"tensorflow.linalg.matmul(tensorflow.linalg.matmul(M, M), M)\"\n     _compare_tensorflow_matrix((M,), expr)\n \n-    expr = M.T\n-    assert tensorflow_code(expr) == \"tensorflow.matrix_transpose(M)\"\n+    expr = Trace(M)\n+    assert tensorflow_code(expr) == \"tensorflow.linalg.trace(M)\"\n     _compare_tensorflow_matrix((M,), expr)\n \n-    expr = Trace(M)\n-    assert tensorflow_code(expr) == \"tensorflow.trace(M)\"\n+    expr = Determinant(M)\n+    assert tensorflow_code(expr) == \"tensorflow.linalg.det(M)\"\n+    _compare_tensorflow_matrix_scalar((M,), expr)\n+\n+    expr = Inverse(M)\n+    assert tensorflow_code(expr) == \"tensorflow.linalg.inv(M)\"\n+    _compare_tensorflow_matrix((M,), expr, use_float=True)\n+\n+    expr = M.T\n+    assert tensorflow_code(expr, tensorflow_version='1.14') == \\\n+        \"tensorflow.linalg.matrix_transpose(M)\"\n+    assert tensorflow_code(expr, tensorflow_version='1.13') == \\\n+        \"tensorflow.matrix_transpose(M)\"\n+\n     _compare_tensorflow_matrix((M,), expr)\n \n \n@@ -83,84 +317,95 @@ def test_codegen_einsum():\n     if not tf:\n         skip(\"TensorFlow not installed\")\n \n-    session = tf.Session()\n+    graph = tf.Graph()\n+    with graph.as_default():\n+        session = tf.compat.v1.Session(graph=graph)\n \n-    M = MatrixSymbol(\"M\", 2, 2)\n-    N = MatrixSymbol(\"N\", 2, 2)\n+        M = MatrixSymbol(\"M\", 2, 2)\n+        N = MatrixSymbol(\"N\", 2, 2)\n \n-    cg = CodegenArrayContraction.from_MatMul(M*N)\n-    f = lambdify((M, N), cg, 'tensorflow')\n+        cg = CodegenArrayContraction.from_MatMul(M*N)\n+        f = lambdify((M, N), cg, 'tensorflow')\n \n-    ma = tf.constant([[1, 2], [3, 4]])\n-    mb = tf.constant([[1,-2], [-1, 3]])\n-    y = session.run(f(ma, mb))\n-    c = session.run(tf.matmul(ma, mb))\n-    assert (y == c).all()\n+        ma = tf.constant([[1, 2], [3, 4]])\n+        mb = tf.constant([[1,-2], [-1, 3]])\n+        y = session.run(f(ma, mb))\n+        c = session.run(tf.matmul(ma, mb))\n+        assert (y == c).all()\n \n \n def test_codegen_extra():\n     if not tf:\n         skip(\"TensorFlow not installed\")\n \n-    session = tf.Session()\n-\n-    M = MatrixSymbol(\"M\", 2, 2)\n-    N = MatrixSymbol(\"N\", 2, 2)\n-    P = MatrixSymbol(\"P\", 2, 2)\n-    Q = MatrixSymbol(\"Q\", 2, 2)\n-    ma = tf.constant([[1, 2], [3, 4]])\n-    mb = tf.constant([[1,-2], [-1, 3]])\n-    mc = tf.constant([[2, 0], [1, 2]])\n-    md = tf.constant([[1,-1], [4, 7]])\n-\n-    cg = CodegenArrayTensorProduct(M, N)\n-    assert tensorflow_code(cg) == 'tensorflow.einsum(\"ab,cd\", M, N)'\n-    f = lambdify((M, N), cg, 'tensorflow')\n-    y = session.run(f(ma, mb))\n-    c = session.run(tf.einsum(\"ij,kl\", ma, mb))\n-    assert (y == c).all()\n-\n-    cg = CodegenArrayElementwiseAdd(M, N)\n-    assert tensorflow_code(cg) == 'tensorflow.add(M, N)'\n-    f = lambdify((M, N), cg, 'tensorflow')\n-    y = session.run(f(ma, mb))\n-    c = session.run(ma + mb)\n-    assert (y == c).all()\n-\n-    cg = CodegenArrayElementwiseAdd(M, N, P)\n-    assert tensorflow_code(cg) == 'tensorflow.add(tensorflow.add(M, N), P)'\n-    f = lambdify((M, N, P), cg, 'tensorflow')\n-    y = session.run(f(ma, mb, mc))\n-    c = session.run(ma + mb + mc)\n-    assert (y == c).all()\n-\n-    cg = CodegenArrayElementwiseAdd(M, N, P, Q)\n-    assert tensorflow_code(cg) == 'tensorflow.add(tensorflow.add(tensorflow.add(M, N), P), Q)'\n-    f = lambdify((M, N, P, Q), cg, 'tensorflow')\n-    y = session.run(f(ma, mb, mc, md))\n-    c = session.run(ma + mb + mc + md)\n-    assert (y == c).all()\n-\n-    cg = CodegenArrayPermuteDims(M, [1, 0])\n-    assert tensorflow_code(cg) == 'tensorflow.transpose(M, [1, 0])'\n-    f = lambdify((M,), cg, 'tensorflow')\n-    y = session.run(f(ma))\n-    c = session.run(tf.transpose(ma))\n-    assert (y == c).all()\n-\n-    cg = CodegenArrayPermuteDims(CodegenArrayTensorProduct(M, N), [1, 2, 3, 0])\n-    assert tensorflow_code(cg) == 'tensorflow.transpose(tensorflow.einsum(\"ab,cd\", M, N), [1, 2, 3, 0])'\n-    f = lambdify((M, N), cg, 'tensorflow')\n-    y = session.run(f(ma, mb))\n-    c = session.run(tf.transpose(tf.einsum(\"ab,cd\", ma, mb), [1, 2, 3, 0]))\n-    assert (y == c).all()\n-\n-    cg = CodegenArrayDiagonal(CodegenArrayTensorProduct(M, N), (1, 2))\n-    assert tensorflow_code(cg) == 'tensorflow.einsum(\"ab,bc->acb\", M, N)'\n-    f = lambdify((M, N), cg, 'tensorflow')\n-    y = session.run(f(ma, mb))\n-    c = session.run(tf.einsum(\"ab,bc->acb\", ma, mb))\n-    assert (y == c).all()\n+    graph = tf.Graph()\n+    with graph.as_default():\n+        session = tf.compat.v1.Session()\n+\n+        M = MatrixSymbol(\"M\", 2, 2)\n+        N = MatrixSymbol(\"N\", 2, 2)\n+        P = MatrixSymbol(\"P\", 2, 2)\n+        Q = MatrixSymbol(\"Q\", 2, 2)\n+        ma = tf.constant([[1, 2], [3, 4]])\n+        mb = tf.constant([[1,-2], [-1, 3]])\n+        mc = tf.constant([[2, 0], [1, 2]])\n+        md = tf.constant([[1,-1], [4, 7]])\n+\n+        cg = CodegenArrayTensorProduct(M, N)\n+        assert tensorflow_code(cg) == \\\n+            'tensorflow.linalg.einsum(\"ab,cd\", M, N)'\n+        f = lambdify((M, N), cg, 'tensorflow')\n+        y = session.run(f(ma, mb))\n+        c = session.run(tf.einsum(\"ij,kl\", ma, mb))\n+        assert (y == c).all()\n+\n+        cg = CodegenArrayElementwiseAdd(M, N)\n+        assert tensorflow_code(cg) == 'tensorflow.math.add(M, N)'\n+        f = lambdify((M, N), cg, 'tensorflow')\n+        y = session.run(f(ma, mb))\n+        c = session.run(ma + mb)\n+        assert (y == c).all()\n+\n+        cg = CodegenArrayElementwiseAdd(M, N, P)\n+        assert tensorflow_code(cg) == \\\n+            'tensorflow.math.add(tensorflow.math.add(M, N), P)'\n+        f = lambdify((M, N, P), cg, 'tensorflow')\n+        y = session.run(f(ma, mb, mc))\n+        c = session.run(ma + mb + mc)\n+        assert (y == c).all()\n+\n+        cg = CodegenArrayElementwiseAdd(M, N, P, Q)\n+        assert tensorflow_code(cg) == \\\n+            'tensorflow.math.add(' \\\n+                'tensorflow.math.add(tensorflow.math.add(M, N), P), Q)'\n+        f = lambdify((M, N, P, Q), cg, 'tensorflow')\n+        y = session.run(f(ma, mb, mc, md))\n+        c = session.run(ma + mb + mc + md)\n+        assert (y == c).all()\n+\n+        cg = CodegenArrayPermuteDims(M, [1, 0])\n+        assert tensorflow_code(cg) == 'tensorflow.transpose(M, [1, 0])'\n+        f = lambdify((M,), cg, 'tensorflow')\n+        y = session.run(f(ma))\n+        c = session.run(tf.transpose(ma))\n+        assert (y == c).all()\n+\n+        cg = CodegenArrayPermuteDims(CodegenArrayTensorProduct(M, N), [1, 2, 3, 0])\n+        assert tensorflow_code(cg) == \\\n+            'tensorflow.transpose(' \\\n+                'tensorflow.linalg.einsum(\"ab,cd\", M, N), [1, 2, 3, 0])'\n+        f = lambdify((M, N), cg, 'tensorflow')\n+        y = session.run(f(ma, mb))\n+        c = session.run(tf.transpose(tf.einsum(\"ab,cd\", ma, mb), [1, 2, 3, 0]))\n+        assert (y == c).all()\n+\n+        cg = CodegenArrayDiagonal(CodegenArrayTensorProduct(M, N), (1, 2))\n+        assert tensorflow_code(cg) == \\\n+            'tensorflow.linalg.einsum(\"ab,bc->acb\", M, N)'\n+        f = lambdify((M, N), cg, 'tensorflow')\n+        y = session.run(f(ma, mb))\n+        c = session.run(tf.einsum(\"ab,bc->acb\", ma, mb))\n+        assert (y == c).all()\n \n \n def test_MatrixElement_printing():\n@@ -172,11 +417,10 @@ def test_MatrixElement_printing():\n     assert tensorflow_code(3 * A[0, 0]) == \"3*A[0, 0]\"\n \n     F = C[0, 0].subs(C, A - B)\n-    assert tensorflow_code(F) == \"(tensorflow.add((-1)*B, A))[0, 0]\"\n+    assert tensorflow_code(F) == \"(tensorflow.math.add((-1)*B, A))[0, 0]\"\n \n \n def test_tensorflow_Derivative():\n-    f = Function(\"f\")\n-\n     expr = Derivative(sin(x), x)\n-    assert tensorflow_code(expr) == \"tensorflow.gradients(tensorflow.sin(x), x)[0]\"\n+    assert tensorflow_code(expr) == \\\n+        \"tensorflow.gradients(tensorflow.math.sin(x), x)[0]\"\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -11,8 +11,11 @@\n     true, false, And, Or, Not, ITE, Min, Max, floor, diff, IndexedBase, Sum,\n     DotProduct, Eq, Dummy, sinc, erf, erfc, factorial, gamma, loggamma,\n     digamma, RisingFactorial, besselj, bessely, besseli, besselk, S, beta,\n-    MatrixSymbol, chebyshevt, chebyshevu, legendre, hermite, laguerre,\n-    gegenbauer, assoc_legendre, assoc_laguerre, jacobi, fresnelc, fresnels)\n+    MatrixSymbol, fresnelc, fresnels)\n+from sympy.functions.elementary.complexes import re, im, Abs, arg\n+from sympy.functions.special.polynomials import \\\n+    chebyshevt, chebyshevu, legendre, hermite, laguerre, gegenbauer, \\\n+    assoc_legendre, assoc_laguerre, jacobi\n from sympy.printing.lambdarepr import LambdaPrinter\n from sympy.printing.pycode import NumPyPrinter\n from sympy.utilities.lambdify import implemented_function, lambdastr\n@@ -204,17 +207,6 @@ def test_scipy_transl():\n         assert scip in scipy.__dict__ or scip in scipy.special.__dict__\n \n \n-def test_tensorflow_transl():\n-    if not tensorflow:\n-        skip(\"tensorflow not installed\")\n-\n-    from sympy.utilities.lambdify import TENSORFLOW_TRANSLATIONS\n-    for sym, tens in TENSORFLOW_TRANSLATIONS.items():\n-        assert sym in sympy.__dict__\n-        # XXX __dict__ is not supported after tensorflow 1.14.0\n-        assert tens in tensorflow.__all__\n-\n-\n def test_numpy_translation_abs():\n     if not numpy:\n         skip(\"numpy not installed.\")\n@@ -571,9 +563,10 @@ def test_tensorflow_basic_math():\n         skip(\"tensorflow not installed.\")\n     expr = Max(sin(x), Abs(1/(x+2)))\n     func = lambdify(x, expr, modules=\"tensorflow\")\n-    a = tensorflow.constant(0, dtype=tensorflow.float32)\n-    s = tensorflow.Session()\n-    assert func(a).eval(session=s) == 0.5\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        a = tensorflow.constant(0, dtype=tensorflow.float32)\n+        assert func(a).eval(session=s) == 0.5\n \n \n def test_tensorflow_placeholders():\n@@ -581,9 +574,10 @@ def test_tensorflow_placeholders():\n         skip(\"tensorflow not installed.\")\n     expr = Max(sin(x), Abs(1/(x+2)))\n     func = lambdify(x, expr, modules=\"tensorflow\")\n-    a = tensorflow.placeholder(dtype=tensorflow.float32)\n-    s = tensorflow.Session()\n-    assert func(a).eval(session=s, feed_dict={a: 0}) == 0.5\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        a = tensorflow.compat.v1.placeholder(dtype=tensorflow.float32)\n+        assert func(a).eval(session=s, feed_dict={a: 0}) == 0.5\n \n \n def test_tensorflow_variables():\n@@ -591,13 +585,11 @@ def test_tensorflow_variables():\n         skip(\"tensorflow not installed.\")\n     expr = Max(sin(x), Abs(1/(x+2)))\n     func = lambdify(x, expr, modules=\"tensorflow\")\n-    a = tensorflow.Variable(0, dtype=tensorflow.float32)\n-    s = tensorflow.Session()\n-    if V(tensorflow.__version__) < '1.0':\n-        s.run(tensorflow.initialize_all_variables())\n-    else:\n-        s.run(tensorflow.global_variables_initializer())\n-    assert func(a).eval(session=s) == 0.5\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        a = tensorflow.Variable(0, dtype=tensorflow.float32)\n+        s.run(a.initializer)\n+        assert func(a).eval(session=s, feed_dict={a: 0}) == 0.5\n \n \n def test_tensorflow_logical_operations():\n@@ -605,10 +597,9 @@ def test_tensorflow_logical_operations():\n         skip(\"tensorflow not installed.\")\n     expr = Not(And(Or(x, y), y))\n     func = lambdify([x, y], expr, modules=\"tensorflow\")\n-    a = tensorflow.constant(False)\n-    b = tensorflow.constant(True)\n-    s = tensorflow.Session()\n-    assert func(a, b).eval(session=s) == 0\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        assert func(False, True).eval(session=s) == False\n \n \n def test_tensorflow_piecewise():\n@@ -616,11 +607,11 @@ def test_tensorflow_piecewise():\n         skip(\"tensorflow not installed.\")\n     expr = Piecewise((0, Eq(x,0)), (-1, x < 0), (1, x > 0))\n     func = lambdify(x, expr, modules=\"tensorflow\")\n-    a = tensorflow.placeholder(dtype=tensorflow.float32)\n-    s = tensorflow.Session()\n-    assert func(a).eval(session=s, feed_dict={a: -1}) == -1\n-    assert func(a).eval(session=s, feed_dict={a: 0}) == 0\n-    assert func(a).eval(session=s, feed_dict={a: 1}) == 1\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        assert func(-1).eval(session=s) == -1\n+        assert func(0).eval(session=s) == 0\n+        assert func(1).eval(session=s) == 1\n \n \n def test_tensorflow_multi_max():\n@@ -628,9 +619,9 @@ def test_tensorflow_multi_max():\n         skip(\"tensorflow not installed.\")\n     expr = Max(x, -x, x**2)\n     func = lambdify(x, expr, modules=\"tensorflow\")\n-    a = tensorflow.placeholder(dtype=tensorflow.float32)\n-    s = tensorflow.Session()\n-    assert func(a).eval(session=s, feed_dict={a: -2}) == 4\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        assert func(-2).eval(session=s) == 4\n \n \n def test_tensorflow_multi_min():\n@@ -638,9 +629,9 @@ def test_tensorflow_multi_min():\n         skip(\"tensorflow not installed.\")\n     expr = Min(x, -x, x**2)\n     func = lambdify(x, expr, modules=\"tensorflow\")\n-    a = tensorflow.placeholder(dtype=tensorflow.float32)\n-    s = tensorflow.Session()\n-    assert func(a).eval(session=s, feed_dict={a: -2}) == -2\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        assert func(-2).eval(session=s) == -2\n \n \n def test_tensorflow_relational():\n@@ -648,9 +639,50 @@ def test_tensorflow_relational():\n         skip(\"tensorflow not installed.\")\n     expr = x >= 0\n     func = lambdify(x, expr, modules=\"tensorflow\")\n-    a = tensorflow.placeholder(dtype=tensorflow.float32)\n-    s = tensorflow.Session()\n-    assert func(a).eval(session=s, feed_dict={a: 1})\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        assert func(1).eval(session=s) == True\n+\n+\n+def test_tensorflow_complexes():\n+    if not tensorflow:\n+        skip(\"tensorflow not installed\")\n+\n+    func1 = lambdify(x, re(x), modules=\"tensorflow\")\n+    func2 = lambdify(x, im(x), modules=\"tensorflow\")\n+    func3 = lambdify(x, Abs(x), modules=\"tensorflow\")\n+    func4 = lambdify(x, arg(x), modules=\"tensorflow\")\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        # For versions before\n+        # https://github.com/tensorflow/tensorflow/issues/30029\n+        # resolved, using python numeric types may not work\n+        a = tensorflow.constant(1+2j)\n+        assert func1(a).eval(session=s) == 1\n+        assert func2(a).eval(session=s) == 2\n+\n+        tensorflow_result = func3(a).eval(session=s)\n+        sympy_result = Abs(1 + 2j).evalf()\n+        assert abs(tensorflow_result-sympy_result) < 10**-6\n+\n+        tensorflow_result = func4(a).eval(session=s)\n+        sympy_result = arg(1 + 2j).evalf()\n+        assert abs(tensorflow_result-sympy_result) < 10**-6\n+\n+\n+def test_tensorflow_array_arg():\n+    # Test for issue 14655 (tensorflow part)\n+    if not tensorflow:\n+        skip(\"tensorflow not installed.\")\n+\n+    f = lambdify([[x, y]], x*x + y, 'tensorflow')\n+\n+    with tensorflow.compat.v1.Session() as s:\n+        fcall = f(tensorflow.constant([2.0, 1.0]))\n+        assert fcall.eval(session=s) == 5.0\n+\n+\n+#================== Test symbolic ==================================\n \n \n def test_integral():\n@@ -658,8 +690,6 @@ def test_integral():\n     l = lambdify(x, Integral(f(x), (x, -oo, oo)), modules=\"sympy\")\n     assert l(x) == Integral(exp(-x**2), (x, -oo, oo))\n \n-#================== Test symbolic ==================================\n-\n \n def test_sym_single_arg():\n     f = lambdify(x, x * y)\n@@ -969,19 +999,6 @@ def test_numpy_array_arg():\n     assert f(numpy.array([2.0, 1.0])) == 5\n \n \n-def test_tensorflow_array_arg():\n-    # Test for issue 14655 (tensorflow part)\n-    if not tensorflow:\n-        skip(\"tensorflow not installed.\")\n-\n-    f = lambdify([[x, y]], x*x + y, 'tensorflow')\n-\n-    fcall = f(tensorflow.constant([2.0, 1.0]))\n-\n-    s = tensorflow.Session()\n-    assert s.run(fcall) == 5\n-\n-\n def test_scipy_fns():\n     if not scipy:\n         skip(\"scipy not installed\")\n",
  "problem_statement": "Deprecation warnings for tensorflow tests\nSome deprecation warnings are being raised\r\n\r\nhttps://travis-ci.org/sympy/sympy/jobs/550709866#L5339\r\n\r\n```\r\nsympy/utilities/tests/test_lambdify.py[94] .....................................\r\n..........WARNING: Logging before flag parsing goes to stderr.\r\nW0626 10:19:13.783303 139710713874240 deprecation_wrapper.py:119] From /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/sympy-1.5.dev0-py3.6.egg/sympy/utilities/tests/test_lambdify.py:564: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\r\nOMP: Info #212: KMP_AFFINITY: decoding x2APIC ids.\r\nOMP: Info #210: KMP_AFFINITY: Affinity capable, using global cpuid leaf 11 info\r\nOMP: Info #154: KMP_AFFINITY: Initial OS proc set respected: 0,1\r\nOMP: Info #156: KMP_AFFINITY: 2 available OS procs\r\nOMP: Info #157: KMP_AFFINITY: Uniform topology\r\nOMP: Info #179: KMP_AFFINITY: 1 packages x 1 cores/pkg x 2 threads/core (1 total cores)\r\nOMP: Info #214: KMP_AFFINITY: OS proc to physical thread map:\r\nOMP: Info #171: KMP_AFFINITY: OS proc 0 maps to package 0 thread 0 \r\nOMP: Info #171: KMP_AFFINITY: OS proc 1 maps to package 0 thread 1 \r\nOMP: Info #250: KMP_AFFINITY: pid 24658 tid 24658 thread 0 bound to OS proc set 0\r\n.W0626 10:19:13.808431 139710713874240 deprecation_wrapper.py:119] From /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/sympy-1.5.dev0-py3.6.egg/sympy/utilities/tests/test_lambdify.py:573: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\r\n.W0626 10:19:13.841703 139710713874240 deprecation_wrapper.py:119] From /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/sympy-1.5.dev0-py3.6.egg/sympy/utilities/tests/test_lambdify.py:588: The name tf.global_variables_initializer is deprecated. Please use tf.compat.v1.global_variables_initializer instead.\r\n..W0626 10:19:13.888353 139710713874240 deprecation.py:323] From <lambdifygenerated-143>:2: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\r\nInstructions for updating:\r\nUse tf.where in 2.0, which has the same broadcast rule as np.where\r\n...........................................                   [OK]\r\n```\r\n\r\nSo, these things may have to be investigated before the tests can be broken in the future.\n",
  "hints_text": "",
  "created_at": "2019-06-26T05:30:46Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_tensorflow_printing\", \"test_tensorflow_complexes\", \"test_MatrixElement_printing\"]",
  "PASS_TO_PASS": "[\"test_no_args\", \"test_single_arg\", \"test_list_args\", \"test_nested_args\", \"test_str_args\", \"test_own_namespace_1\", \"test_own_namespace_2\", \"test_own_module\", \"test_bad_args\", \"test_atoms\", \"test_sympy_lambda\", \"test_math_lambda\", \"test_mpmath_lambda\", \"test_number_precision\", \"test_mpmath_precision\", \"test_math_transl\", \"test_mpmath_transl\", \"test_exponentiation\", \"test_sqrt\", \"test_trig\", \"test_vector_simple\", \"test_vector_discontinuous\", \"test_trig_symbolic\", \"test_trig_float\", \"test_docs\", \"test_math\", \"test_sin\", \"test_matrix\", \"test_issue9474\", \"test_integral\", \"test_sym_single_arg\", \"test_sym_list_args\", \"test_sym_integral\", \"test_namespace_order\", \"test_namespace_type\", \"test_imps\", \"test_imps_errors\", \"test_imps_wrong_args\", \"test_lambdify_imps\", \"test_dummification\", \"test_curly_matrix_symbol\", \"test_python_keywords\", \"test_lambdify_docstring\", \"test_special_printers\", \"test_true_false\", \"test_issue_2790\", \"test_issue_12092\", \"test_issue_14911\", \"test_ITE\", \"test_Min_Max\", \"test_issue_12173\", \"test_sinc_mpmath\", \"test_lambdify_dummy_arg\", \"test_lambdify_mixed_symbol_dummy_args\", \"test_lambdify_inspect\", \"test_issue_14941\", \"test_lambdify_Derivative_arg_issue_16468\", \"test_imag_real\", \"test_single_e\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.112960",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}