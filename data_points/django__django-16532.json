{
  "repo": "django/django",
  "instance_id": "django__django-16532",
  "base_commit": "ce8189eea007882bbe6db22f86b0965e718bd341",
  "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -407,20 +407,12 @@ def database_forwards(self, app_label, schema_editor, from_state, to_state):\n                     or not new_field.remote_field.through._meta.auto_created\n                 ):\n                     continue\n-                # Rename the M2M table that's based on this model's name.\n-                old_m2m_model = old_field.remote_field.through\n-                new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n-                # Rename the column in the M2M table that's based on this\n-                # model's name.\n-                schema_editor.alter_field(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n-                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                # Rename columns and the M2M table.\n+                schema_editor._alter_many_to_many(\n+                    new_model,\n+                    old_field,\n+                    new_field,\n+                    strict=False,\n                 )\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n",
  "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1058,6 +1058,75 @@ def test_rename_model_with_m2m(self):\n             Pony._meta.get_field(\"riders\").remote_field.through.objects.count(), 2\n         )\n \n+    def test_rename_model_with_m2m_models_in_different_apps_with_same_name(self):\n+        app_label_1 = \"test_rmw_m2m_1\"\n+        app_label_2 = \"test_rmw_m2m_2\"\n+        project_state = self.apply_operations(\n+            app_label_1,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Rider\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                    ],\n+                ),\n+            ],\n+        )\n+        project_state = self.apply_operations(\n+            app_label_2,\n+            project_state,\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Rider\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"riders\", models.ManyToManyField(f\"{app_label_1}.Rider\")),\n+                    ],\n+                ),\n+            ],\n+        )\n+        m2m_table = f\"{app_label_2}_rider_riders\"\n+        self.assertColumnExists(m2m_table, \"from_rider_id\")\n+        self.assertColumnExists(m2m_table, \"to_rider_id\")\n+\n+        Rider_1 = project_state.apps.get_model(app_label_1, \"Rider\")\n+        Rider_2 = project_state.apps.get_model(app_label_2, \"Rider\")\n+        rider_2 = Rider_2.objects.create()\n+        rider_2.riders.add(Rider_1.objects.create())\n+        # Rename model.\n+        project_state_2 = project_state.clone()\n+        project_state = self.apply_operations(\n+            app_label_2,\n+            project_state,\n+            operations=[migrations.RenameModel(\"Rider\", \"Pony\")],\n+            atomic=connection.features.supports_atomic_references_rename,\n+        )\n+\n+        m2m_table = f\"{app_label_2}_pony_riders\"\n+        self.assertColumnExists(m2m_table, \"pony_id\")\n+        self.assertColumnExists(m2m_table, \"rider_id\")\n+\n+        Rider_1 = project_state.apps.get_model(app_label_1, \"Rider\")\n+        Rider_2 = project_state.apps.get_model(app_label_2, \"Pony\")\n+        rider_2 = Rider_2.objects.create()\n+        rider_2.riders.add(Rider_1.objects.create())\n+        self.assertEqual(Rider_1.objects.count(), 2)\n+        self.assertEqual(Rider_2.objects.count(), 2)\n+        self.assertEqual(\n+            Rider_2._meta.get_field(\"riders\").remote_field.through.objects.count(), 2\n+        )\n+        # Reversal.\n+        self.unapply_operations(\n+            app_label_2,\n+            project_state_2,\n+            operations=[migrations.RenameModel(\"Rider\", \"Pony\")],\n+            atomic=connection.features.supports_atomic_references_rename,\n+        )\n+        m2m_table = f\"{app_label_2}_rider_riders\"\n+        self.assertColumnExists(m2m_table, \"to_rider_id\")\n+        self.assertColumnExists(m2m_table, \"from_rider_id\")\n+\n     def test_rename_model_with_db_table_rename_m2m(self):\n         app_label = \"test_rmwdbrm2m\"\n         project_state = self.apply_operations(\n",
  "problem_statement": "Duplicate model names in M2M relationship causes RenameModel migration failure\nDescription\n\t\nExample code is here: â€‹https://github.com/jzmiller1/edemo\nI have a django project with two apps, incidents and vault, that both have a model named Incident. The vault Incident model has an M2M involving the incidents Incident model. When the table is created for this M2M relationship the automatic field names are \"from_incident_id\" and \"to_incident_id\" since models have the same names.\nIf I then try to use a RenameModel in a migration... \n\toperations = [\n\t\tmigrations.RenameModel(\n\t\t\told_name='Incident',\n\t\t\tnew_name='Folder',\n\t\t),\n\t]\nit fails with this traceback:\nTracking file by folder pattern: migrations\nOperations to perform:\n Apply all migrations: admin, auth, contenttypes, incidents, sessions, vault\nRunning migrations:\n Applying vault.0002_rename_incident_folder...Traceback (most recent call last):\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/db/models/options.py\", line 668, in get_field\n\treturn self.fields_map[field_name]\nKeyError: 'incident'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n File \"/Users/zacmiller/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-P/ch-0/222.4345.23/PyCharm.app/Contents/plugins/python/helpers/pycharm/django_manage.py\", line 52, in <module>\n\trun_command()\n File \"/Users/zacmiller/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-P/ch-0/222.4345.23/PyCharm.app/Contents/plugins/python/helpers/pycharm/django_manage.py\", line 46, in run_command\n\trun_module(manage_file, None, '__main__', True)\n File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/runpy.py\", line 209, in run_module\n\treturn _run_module_code(code, init_globals, run_name, mod_spec)\n File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/runpy.py\", line 96, in _run_module_code\n\t_run_code(code, mod_globals, init_globals,\n File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/runpy.py\", line 86, in _run_code\n\texec(code, run_globals)\n File \"/Users/zacmiller/PycharmProjects/edemo/manage.py\", line 22, in <module>\n\tmain()\n File \"/Users/zacmiller/PycharmProjects/edemo/manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/core/management/__init__.py\", line 446, in execute_from_command_line\n\tutility.execute()\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/core/management/__init__.py\", line 440, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/core/management/base.py\", line 402, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/core/management/base.py\", line 448, in execute\n\toutput = self.handle(*args, **options)\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/core/management/base.py\", line 96, in wrapped\n\tres = handle_func(*args, **kwargs)\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/core/management/commands/migrate.py\", line 349, in handle\n\tpost_migrate_state = executor.migrate(\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/db/migrations/executor.py\", line 135, in migrate\n\tstate = self._migrate_all_forwards(\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/db/migrations/executor.py\", line 167, in _migrate_all_forwards\n\tstate = self.apply_migration(\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/db/migrations/executor.py\", line 252, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/db/migrations/migration.py\", line 130, in apply\n\toperation.database_forwards(\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/db/migrations/operations/models.py\", line 422, in database_forwards\n\told_m2m_model._meta.get_field(old_model._meta.model_name),\n File \"/Users/zacmiller/PycharmProjects/virtualenvs/edemo/lib/python3.10/site-packages/django/db/models/options.py\", line 670, in get_field\n\traise FieldDoesNotExist(\ndjango.core.exceptions.FieldDoesNotExist: Incident_incidents has no field named 'incident'\n",
  "hints_text": "Thanks for the report.\nMariusz , if the names of models are same (but different apps), are there any expected names of the cloumns for m2m db table? Can it be incident_id and incidents_incident_id since two db columns cannot have same name?\nI did some further testing and you don't encounter the same issue going in the other direction. For example, in the demo project if I rename incidents.Incident the migration generated works fine and properly updates the M2M on vault.Incident. The M2M table is updated and the from/to are removed from both. After that you can do a rename on the model with the M2M. Just an FYI for anyone who might be looking for a work around.\nThanks zac! I did some digging in the code and found out that even though the field names are from/to_incident , they are referring to the correct models: CREATE TABLE \"vault_incident\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"name\" varchar(10) NOT NULL); CREATE TABLE \"vault_incident_incidents\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"from_incident_id\" bigint NOT NULL REFERENCES \"vault_incident\" (\"id\") DEFERRABLE INITIALLY DEFERRED, \"to_incident_id\" bigint NOT NULL REFERENCE S \"incidents_incident\" (\"id\") DEFERRABLE INITIALLY DEFERRED); The problem is caused in renaming fields of m2m model â€‹here. One of the solutions can be checking app names + model name together and if model names are same but apps are different the name of fields can be (like in above case) incident_id and incidents_incident_id. Feel free to share if anyone has a better solution. Thanks!\nâ€‹Draft PR\nHi, the PR is ready for review !\nPer â€‹Simon's comment.",
  "created_at": "2023-02-07T19:32:11Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_rename_model_with_m2m_models_in_different_apps_with_same_name (migrations.test_operations.OperationTests.test_rename_model_with_m2m_models_in_different_apps_with_same_name)\"]",
  "PASS_TO_PASS": "[\"test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests.test_reference_field_by_through_fields)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests.test_references_field_by_from_fields)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests.test_references_field_by_name)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests.test_references_field_by_remote_field_model)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests.test_references_field_by_through)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests.test_references_field_by_to_fields)\", \"test_references_model (migrations.test_operations.FieldOperationTests.test_references_model)\", \"test_references_model_mixin (migrations.test_operations.TestCreateModel.test_references_model_mixin)\", \"Tests the AddField operation.\", \"The CreateTable operation ignores swapped models.\", \"Tests the DeleteModel operation ignores swapped models.\", \"Add/RemoveIndex operations ignore swapped models.\", \"Tests the AddField operation on TextField/BinaryField.\", \"Tests the AddField operation on TextField.\", \"test_add_constraint (migrations.test_operations.OperationTests.test_add_constraint)\", \"test_add_constraint_combinable (migrations.test_operations.OperationTests.test_add_constraint_combinable)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests.test_add_constraint_percent_escaping)\", \"test_add_covering_unique_constraint (migrations.test_operations.OperationTests.test_add_covering_unique_constraint)\", \"test_add_deferred_unique_constraint (migrations.test_operations.OperationTests.test_add_deferred_unique_constraint)\", \"Tests the AddField operation with a ManyToManyField.\", \"Tests the AddField operation's state alteration\", \"test_add_func_index (migrations.test_operations.OperationTests.test_add_func_index)\", \"test_add_func_unique_constraint (migrations.test_operations.OperationTests.test_add_func_unique_constraint)\", \"Test the AddIndex operation.\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests.test_add_index_state_forwards)\", \"test_add_or_constraint (migrations.test_operations.OperationTests.test_add_or_constraint)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests.test_add_partial_unique_constraint)\", \"Tests the AlterField operation.\", \"AlterField operation is a noop when adding only a db_column and the\", \"test_alter_field_m2m (migrations.test_operations.OperationTests.test_alter_field_m2m)\", \"The AlterField operation on primary keys (things like PostgreSQL's\", \"Tests the AlterField operation on primary keys changes any FKs pointing to it.\", \"test_alter_field_pk_fk_char_to_int (migrations.test_operations.OperationTests.test_alter_field_pk_fk_char_to_int)\", \"AlterField operation of db_collation on primary keys changes any FKs\", \"test_alter_field_pk_mti_and_fk_to_base (migrations.test_operations.OperationTests.test_alter_field_pk_mti_and_fk_to_base)\", \"test_alter_field_pk_mti_fk (migrations.test_operations.OperationTests.test_alter_field_pk_mti_fk)\", \"test_alter_field_reloads_state_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests.test_alter_field_reloads_state_fk_with_to_field_related_name_target_type_change)\", \"If AlterField doesn't reload state appropriately, the second AlterField\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests.test_alter_field_reloads_state_on_fk_with_to_field_target_type_change)\", \"test_alter_field_with_func_index (migrations.test_operations.OperationTests.test_alter_field_with_func_index)\", \"test_alter_field_with_func_unique_constraint (migrations.test_operations.OperationTests.test_alter_field_with_func_unique_constraint)\", \"Test AlterField operation with an index to ensure indexes created via\", \"Creating and then altering an FK works correctly\", \"Altering an FK to a non-FK works (#23244)\", \"Tests the AlterIndexTogether operation.\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests.test_alter_index_together_remove)\", \"test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests.test_alter_index_together_remove_with_unique_together)\", \"The managers on a model are set.\", \"Tests the AlterModelOptions operation.\", \"The AlterModelOptions operation removes keys from the dict (#23121)\", \"Tests the AlterModelTable operation.\", \"AlterModelTable should rename auto-generated M2M tables.\", \"test_alter_model_table_m2m_field (migrations.test_operations.OperationTests.test_alter_model_table_m2m_field)\", \"Tests the AlterModelTable operation if the table name is set to None.\", \"Tests the AlterModelTable operation if the table name is not changed.\", \"Tests the AlterOrderWithRespectTo operation.\", \"Tests the AlterUniqueTogether operation.\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests.test_alter_unique_together_remove)\", \"A field may be migrated from AutoField to BigAutoField.\", \"Column names that are SQL keywords shouldn't cause problems when used\", \"Creation of models with a FK to a PK with db_collation.\", \"Tests the CreateModel operation.\", \"Tests the CreateModel operation on a multi-table inheritance setup.\", \"Test the creation of a model with a ManyToMany field and the\", \"test_create_model_with_boolean_expression_in_check_constraint (migrations.test_operations.OperationTests.test_create_model_with_boolean_expression_in_check_constraint)\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests.test_create_model_with_constraint)\", \"test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests.test_create_model_with_deferred_unique_constraint)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests.test_create_model_with_duplicate_base)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests.test_create_model_with_duplicate_field_name)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests.test_create_model_with_duplicate_manager_name)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests.test_create_model_with_partial_unique_constraint)\", \"Tests the CreateModel operation directly followed by an\", \"CreateModel ignores proxy models.\", \"CreateModel ignores unmanaged models.\", \"Tests the DeleteModel operation.\", \"test_delete_mti_model (migrations.test_operations.OperationTests.test_delete_mti_model)\", \"Tests the DeleteModel operation ignores proxy models.\", \"A model with BigAutoField can be created.\", \"test_remove_constraint (migrations.test_operations.OperationTests.test_remove_constraint)\", \"test_remove_covering_unique_constraint (migrations.test_operations.OperationTests.test_remove_covering_unique_constraint)\", \"test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests.test_remove_deferred_unique_constraint)\", \"Tests the RemoveField operation.\", \"test_remove_field_m2m (migrations.test_operations.OperationTests.test_remove_field_m2m)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests.test_remove_field_m2m_with_through)\", \"Tests the RemoveField operation on a foreign key.\", \"test_remove_func_index (migrations.test_operations.OperationTests.test_remove_func_index)\", \"test_remove_func_unique_constraint (migrations.test_operations.OperationTests.test_remove_func_unique_constraint)\", \"Test the RemoveIndex operation.\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests.test_remove_index_state_forwards)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests.test_remove_partial_unique_constraint)\", \"test_remove_unique_together_on_pk_field (migrations.test_operations.OperationTests.test_remove_unique_together_on_pk_field)\", \"test_remove_unique_together_on_unique_field (migrations.test_operations.OperationTests.test_remove_unique_together_on_unique_field)\", \"Tests the RenameField operation.\", \"test_rename_field_case (migrations.test_operations.OperationTests.test_rename_field_case)\", \"test_rename_field_index_together (migrations.test_operations.OperationTests.test_rename_field_index_together)\", \"If RenameField doesn't reload state appropriately, the AlterField\", \"test_rename_field_unique_together (migrations.test_operations.OperationTests.test_rename_field_unique_together)\", \"test_rename_field_with_db_column (migrations.test_operations.OperationTests.test_rename_field_with_db_column)\", \"test_rename_index (migrations.test_operations.OperationTests.test_rename_index)\", \"test_rename_index_arguments (migrations.test_operations.OperationTests.test_rename_index_arguments)\", \"test_rename_index_state_forwards (migrations.test_operations.OperationTests.test_rename_index_state_forwards)\", \"test_rename_index_state_forwards_unnamed_index (migrations.test_operations.OperationTests.test_rename_index_state_forwards_unnamed_index)\", \"test_rename_index_unknown_unnamed_index (migrations.test_operations.OperationTests.test_rename_index_unknown_unnamed_index)\", \"test_rename_index_unnamed_index (migrations.test_operations.OperationTests.test_rename_index_unnamed_index)\", \"RenameModel renames a many-to-many column after a RenameField.\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests.test_rename_m2m_target_model)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests.test_rename_m2m_through_model)\", \"test_rename_missing_field (migrations.test_operations.OperationTests.test_rename_missing_field)\", \"Tests the RenameModel operation.\", \"RenameModel operations shouldn't trigger the caching of rendered apps\", \"test_rename_model_with_db_table_rename_m2m (migrations.test_operations.OperationTests.test_rename_model_with_db_table_rename_m2m)\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests.test_rename_model_with_m2m)\", \"Tests the RenameModel operation on model with self referential FK.\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests.test_rename_model_with_self_referential_m2m)\", \"Tests the RenameModel operation on a model which has a superclass that\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests.test_rename_referenced_field_state_forward)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests.test_repoint_field_m2m)\", \"Tests the RunPython operation\", \"Tests the RunPython operation correctly handles the \\\"atomic\\\" keyword\", \"#24098 - Tests no-op RunPython operations.\", \"#24282 - Model changes to a FK reverse side update the model\", \"Tests the RunSQL operation.\", \"test_run_sql_add_missing_semicolon_on_collect_sql (migrations.test_operations.OperationTests.test_run_sql_add_missing_semicolon_on_collect_sql)\", \"#24098 - Tests no-op RunSQL operations.\", \"#23426 - RunSQL should accept parameters.\", \"#23426 - RunSQL should fail when a list of statements with an incorrect\", \"Tests the SeparateDatabaseAndState operation.\", \"A complex SeparateDatabaseAndState operation: Multiple operations both\", \"A field may be migrated from SmallAutoField to AutoField.\", \"A field may be migrated from SmallAutoField to BigAutoField.\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.761651",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}