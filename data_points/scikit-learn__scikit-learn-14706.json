{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14706",
  "base_commit": "2812bb151fa03f8e5cc0785fbcd5845252d3a477",
  "patch": "diff --git a/sklearn/kernel_approximation.py b/sklearn/kernel_approximation.py\n--- a/sklearn/kernel_approximation.py\n+++ b/sklearn/kernel_approximation.py\n@@ -518,6 +518,7 @@ class Nystroem(BaseEstimator, TransformerMixin):\n \n     sklearn.metrics.pairwise.kernel_metrics : List of built-in kernels.\n     \"\"\"\n+\n     def __init__(self, kernel=\"rbf\", gamma=None, coef0=None, degree=None,\n                  kernel_params=None, n_components=100, random_state=None):\n         self.kernel = kernel\n@@ -600,7 +601,7 @@ def _get_kernel_params(self):\n         params = self.kernel_params\n         if params is None:\n             params = {}\n-        if not callable(self.kernel):\n+        if not callable(self.kernel) and self.kernel != 'precomputed':\n             for param in (KERNEL_PARAMS[self.kernel]):\n                 if getattr(self, param) is not None:\n                     params[param] = getattr(self, param)\n@@ -609,6 +610,7 @@ def _get_kernel_params(self):\n                     self.coef0 is not None or\n                     self.degree is not None):\n                 raise ValueError(\"Don't pass gamma, coef0 or degree to \"\n-                                 \"Nystroem if using a callable kernel.\")\n+                                 \"Nystroem if using a callable \"\n+                                 \"or precomputed kernel\")\n \n         return params\n",
  "test_patch": "diff --git a/sklearn/tests/test_kernel_approximation.py b/sklearn/tests/test_kernel_approximation.py\n--- a/sklearn/tests/test_kernel_approximation.py\n+++ b/sklearn/tests/test_kernel_approximation.py\n@@ -254,3 +254,24 @@ def linear_kernel(X, Y):\n         ny = Nystroem(kernel=linear_kernel, **param)\n         with pytest.raises(ValueError, match=msg):\n             ny.fit(X)\n+\n+\n+def test_nystroem_precomputed_kernel():\n+    # Non-regression: test Nystroem on precomputed kernel.\n+    # PR - 14706\n+    rnd = np.random.RandomState(12)\n+    X = rnd.uniform(size=(10, 4))\n+\n+    K = polynomial_kernel(X, degree=2, coef0=.1)\n+    nystroem = Nystroem(kernel='precomputed', n_components=X.shape[0])\n+    X_transformed = nystroem.fit_transform(K)\n+    assert_array_almost_equal(np.dot(X_transformed, X_transformed.T), K)\n+\n+    # if degree, gamma or coef0 is passed, we raise a ValueError\n+    msg = \"Don't pass gamma, coef0 or degree to Nystroem\"\n+    params = ({'gamma': 1}, {'coef0': 1}, {'degree': 2})\n+    for param in params:\n+        ny = Nystroem(kernel='precomputed', n_components=X.shape[0],\n+                      **param)\n+        with pytest.raises(ValueError, match=msg):\n+            ny.fit(K)\n",
  "problem_statement": "kernel_approximation.Nystroem does not support precomputed kernel\nThe documentation says that precomputed kernels are supported in Nystroem, but in reality it does not seem to be the case: https://scikit-learn.org/stable/modules/kernel_approximation.html\r\n\r\n> By default Nystroem uses the rbf kernel, but it can use any kernel function or a precomputed kernel matrix.\r\n\r\nExample code:\r\n```python\r\nfrom sklearn.kernel_approximation import Nystroem\r\nnys = Nystroem(kernel='precomputed')\r\nnys.fit_transform(K)\r\n```\r\nLeads to `KeyError: 'precomputed'`\n",
  "hints_text": "Indeed, `Nystroem` uses the kernel parameter in two ways:\r\n- in `sklearn.metrics.pairwise.pairwise_kernels`, which does accept `metric='precomputed'`\r\n- in `sklearn.metrics.pairwise.KERNEL_PARAMS`, which does not contain a \"precomputed\" key.\r\n\r\nThis is a bug, \"precomputed\" should be added in `KERNEL_PARAMS`, and we also need a non-regression test.\r\n\r\nThanks for the report ! Do you want to fix it ?\nI would like to work on this. can I take this up?\nYes, go ahead, I did not have time so far to look at it.\r\n\r\nI am unsure, since I have not studied the theory, but maybe there is a bigger issue with the Nystroem implementation:\r\n\r\nGiving `n` features to Nystroem, it still produces `n` features with `.fit_transform`, only now the features are of a different dimensionality (`n_components`). I was hoping Nystroem would actually only store/compute a kernel matrix of `n_components` x `n`. (see storage and complexity: https://en.wikipedia.org/wiki/Low-rank_matrix_approximations#Nystr%C3%B6m_approximation)\r\n\r\nIn its current state, it seems you still reach a `n` x `n` kernel matrix, which defeats the purpose of using Nystroem, right? For example, Nystroem should make it possible to do Kernel Ridge Regression with many training examples (large `n`), which would typically be very expensive.\r\n\r\nMaybe I misunderstand how it is supposed to work. The example on scikit-learn actually increases the dimensionality of the features from 64 to 300: https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.Nystroem.html#sklearn.kernel_approximation.Nystroem which seems like a strange example to me. The score is improved, but this is not an application where memory or complexity is reduced.\r\n",
  "created_at": "2019-08-21T12:29:34Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_kernel_approximation.py::test_nystroem_precomputed_kernel\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_kernel_approximation.py::test_additive_chi2_sampler\", \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\", \"sklearn/tests/test_kernel_approximation.py::test_rbf_sampler\", \"sklearn/tests/test_kernel_approximation.py::test_input_validation\", \"sklearn/tests/test_kernel_approximation.py::test_nystroem_approximation\", \"sklearn/tests/test_kernel_approximation.py::test_nystroem_default_parameters\", \"sklearn/tests/test_kernel_approximation.py::test_nystroem_singular_kernel\", \"sklearn/tests/test_kernel_approximation.py::test_nystroem_poly_kernel_params\", \"sklearn/tests/test_kernel_approximation.py::test_nystroem_callable\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.006855",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}