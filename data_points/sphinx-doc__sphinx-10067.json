{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10067",
  "base_commit": "e1fa6c79be8b3928c21e312a0c0e65e1cfd9a7f7",
  "patch": "diff --git a/sphinx/application.py b/sphinx/application.py\n--- a/sphinx/application.py\n+++ b/sphinx/application.py\n@@ -266,7 +266,7 @@ def _init_i18n(self) -> None:\n         \"\"\"Load translated strings from the configured localedirs if enabled in\n         the configuration.\n         \"\"\"\n-        if self.config.language is None:\n+        if self.config.language == 'en':\n             self.translator, has_translation = locale.init([], None)\n         else:\n             logger.info(bold(__('loading translations [%s]... ') % self.config.language),\n@@ -285,8 +285,7 @@ def _init_i18n(self) -> None:\n             locale_dirs += [path.join(package_dir, 'locale')]\n \n             self.translator, has_translation = locale.init(locale_dirs, self.config.language)\n-            if has_translation or self.config.language == 'en':\n-                # \"en\" never needs to be translated\n+            if has_translation:\n                 logger.info(__('done'))\n             else:\n                 logger.info(__('not available for built-in messages'))\ndiff --git a/sphinx/builders/html/__init__.py b/sphinx/builders/html/__init__.py\n--- a/sphinx/builders/html/__init__.py\n+++ b/sphinx/builders/html/__init__.py\n@@ -326,7 +326,7 @@ def init_js_files(self) -> None:\n             attrs.setdefault('priority', 800)  # User's JSs are loaded after extensions'\n             self.add_js_file(filename, **attrs)\n \n-        if self.config.language and self._get_translations_js():\n+        if self._get_translations_js():\n             self.add_js_file('translations.js')\n \n     def add_js_file(self, filename: str, **kwargs: Any) -> None:\n@@ -431,8 +431,6 @@ def prepare_writing(self, docnames: Set[str]) -> None:\n         if self.search:\n             from sphinx.search import IndexBuilder\n             lang = self.config.html_search_language or self.config.language\n-            if not lang:\n-                lang = 'en'\n             self.indexer = IndexBuilder(self.env, lang,\n                                         self.config.html_search_options,\n                                         self.config.html_search_scorer)\n@@ -767,10 +765,9 @@ def create_pygments_style_file(self) -> None:\n \n     def copy_translation_js(self) -> None:\n         \"\"\"Copy a JavaScript file for translations.\"\"\"\n-        if self.config.language is not None:\n-            jsfile = self._get_translations_js()\n-            if jsfile:\n-                copyfile(jsfile, path.join(self.outdir, '_static', 'translations.js'))\n+        jsfile = self._get_translations_js()\n+        if jsfile:\n+            copyfile(jsfile, path.join(self.outdir, '_static', 'translations.js'))\n \n     def copy_stemmer_js(self) -> None:\n         \"\"\"Copy a JavaScript file for stemmer.\"\"\"\ndiff --git a/sphinx/builders/latex/__init__.py b/sphinx/builders/latex/__init__.py\n--- a/sphinx/builders/latex/__init__.py\n+++ b/sphinx/builders/latex/__init__.py\n@@ -170,9 +170,8 @@ def init_context(self) -> None:\n         self.context.update(ADDITIONAL_SETTINGS.get(self.config.latex_engine, {}))\n \n         # Add special settings for (latex_engine, language_code)\n-        if self.config.language:\n-            key = (self.config.latex_engine, self.config.language[:2])\n-            self.context.update(ADDITIONAL_SETTINGS.get(key, {}))\n+        key = (self.config.latex_engine, self.config.language[:2])\n+        self.context.update(ADDITIONAL_SETTINGS.get(key, {}))\n \n         # Apply user settings to context\n         self.context.update(self.config.latex_elements)\n@@ -203,7 +202,7 @@ def update_context(self) -> None:\n \n     def init_babel(self) -> None:\n         self.babel = ExtBabel(self.config.language, not self.context['babel'])\n-        if self.config.language and not self.babel.is_supported_language():\n+        if not self.babel.is_supported_language():\n             # emit warning if specified language is invalid\n             # (only emitting, nothing changed to processing)\n             logger.warning(__('no Babel option known for language %r'),\n@@ -232,12 +231,11 @@ def init_multilingual(self) -> None:\n             self.context['classoptions'] += ',' + self.babel.get_language()\n             # this branch is not taken for xelatex/lualatex if default settings\n             self.context['multilingual'] = self.context['babel']\n-            if self.config.language:\n-                self.context['shorthandoff'] = SHORTHANDOFF\n+            self.context['shorthandoff'] = SHORTHANDOFF\n \n-                # Times fonts don't work with Cyrillic languages\n-                if self.babel.uses_cyrillic() and 'fontpkg' not in self.config.latex_elements:\n-                    self.context['fontpkg'] = ''\n+            # Times fonts don't work with Cyrillic languages\n+            if self.babel.uses_cyrillic() and 'fontpkg' not in self.config.latex_elements:\n+                self.context['fontpkg'] = ''\n         elif self.context['polyglossia']:\n             self.context['classoptions'] += ',' + self.babel.get_language()\n             options = self.babel.get_mainlanguage_options()\n@@ -380,14 +378,10 @@ def copy_support_files(self) -> None:\n         # configure usage of xindy (impacts Makefile and latexmkrc)\n         # FIXME: convert this rather to a confval with suitable default\n         #        according to language ? but would require extra documentation\n-        if self.config.language:\n-            xindy_lang_option = \\\n-                XINDY_LANG_OPTIONS.get(self.config.language[:2],\n-                                       '-L general -C utf8 ')\n-            xindy_cyrillic = self.config.language[:2] in XINDY_CYRILLIC_SCRIPTS\n-        else:\n-            xindy_lang_option = '-L english -C utf8 '\n-            xindy_cyrillic = False\n+        xindy_lang_option = XINDY_LANG_OPTIONS.get(self.config.language[:2],\n+                                                   '-L general -C utf8 ')\n+        xindy_cyrillic = self.config.language[:2] in XINDY_CYRILLIC_SCRIPTS\n+\n         context = {\n             'latex_engine':      self.config.latex_engine,\n             'xindy_use':         self.config.latex_use_xindy,\n@@ -474,7 +468,7 @@ def default_latex_engine(config: Config) -> str:\n     \"\"\" Better default latex_engine settings for specific languages. \"\"\"\n     if config.language == 'ja':\n         return 'uplatex'\n-    elif (config.language or '').startswith('zh'):\n+    elif config.language.startswith('zh'):\n         return 'xelatex'\n     elif config.language == 'el':\n         return 'xelatex'\ndiff --git a/sphinx/builders/latex/util.py b/sphinx/builders/latex/util.py\n--- a/sphinx/builders/latex/util.py\n+++ b/sphinx/builders/latex/util.py\n@@ -20,7 +20,7 @@ def __init__(self, language_code: str, use_polyglossia: bool = False) -> None:\n         self.language_code = language_code\n         self.use_polyglossia = use_polyglossia\n         self.supported = True\n-        super().__init__(language_code or '')\n+        super().__init__(language_code)\n \n     def uses_cyrillic(self) -> bool:\n         return self.language in self.cyrillic_languages\ndiff --git a/sphinx/config.py b/sphinx/config.py\n--- a/sphinx/config.py\n+++ b/sphinx/config.py\n@@ -100,7 +100,7 @@ class Config:\n         # the real default is locale-dependent\n         'today_fmt': (None, 'env', [str]),\n \n-        'language': (None, 'env', [str]),\n+        'language': ('en', 'env', [str]),\n         'locale_dirs': (['locales'], 'env', []),\n         'figure_language_filename': ('{root}.{language}{ext}', 'env', [str]),\n         'gettext_allow_fuzzy_translations': (False, 'gettext', []),\ndiff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -261,7 +261,7 @@ def _update_settings(self, config: Config) -> None:\n         \"\"\"Update settings by new config.\"\"\"\n         self.settings['input_encoding'] = config.source_encoding\n         self.settings['trim_footnote_reference_space'] = config.trim_footnote_reference_space\n-        self.settings['language_code'] = config.language or 'en'\n+        self.settings['language_code'] = config.language\n \n         # Allow to disable by 3rd party extension (workaround)\n         self.settings.setdefault('smart_quotes', True)\ndiff --git a/sphinx/environment/collectors/asset.py b/sphinx/environment/collectors/asset.py\n--- a/sphinx/environment/collectors/asset.py\n+++ b/sphinx/environment/collectors/asset.py\n@@ -64,18 +64,16 @@ def process_doc(self, app: Sphinx, doctree: nodes.document) -> None:\n                 rel_imgpath, full_imgpath = app.env.relfn2path(imguri, docname)\n                 node['uri'] = rel_imgpath\n \n-                if app.config.language:\n-                    # Search language-specific figures at first\n-                    i18n_imguri = get_image_filename_for_language(imguri, app.env)\n-                    _, full_i18n_imgpath = app.env.relfn2path(i18n_imguri, docname)\n-                    self.collect_candidates(app.env, full_i18n_imgpath, candidates, node)\n+                # Search language-specific figures at first\n+                i18n_imguri = get_image_filename_for_language(imguri, app.env)\n+                _, full_i18n_imgpath = app.env.relfn2path(i18n_imguri, docname)\n+                self.collect_candidates(app.env, full_i18n_imgpath, candidates, node)\n \n                 self.collect_candidates(app.env, full_imgpath, candidates, node)\n             else:\n-                if app.config.language:\n-                    # substitute imguri by figure_language_filename\n-                    # (ex. foo.png -> foo.en.png)\n-                    imguri = search_image_for_language(imguri, app.env)\n+                # substitute imguri by figure_language_filename\n+                # (ex. foo.png -> foo.en.png)\n+                imguri = search_image_for_language(imguri, app.env)\n \n                 # Update `node['uri']` to a relative path from srcdir\n                 # from a relative path from current document.\ndiff --git a/sphinx/util/i18n.py b/sphinx/util/i18n.py\n--- a/sphinx/util/i18n.py\n+++ b/sphinx/util/i18n.py\n@@ -10,14 +10,16 @@\n \n import os\n import re\n+import warnings\n from datetime import datetime, timezone\n from os import path\n-from typing import TYPE_CHECKING, Callable, Generator, List, NamedTuple, Optional, Tuple, Union\n+from typing import TYPE_CHECKING, Callable, Generator, List, NamedTuple, Tuple, Union\n \n import babel.dates\n from babel.messages.mofile import write_mo\n from babel.messages.pofile import read_po\n \n+from sphinx.deprecation import RemovedInSphinx70Warning\n from sphinx.errors import SphinxError\n from sphinx.locale import __\n from sphinx.util import logging\n@@ -173,9 +175,11 @@ def docname_to_domain(docname: str, compaction: Union[bool, str]) -> str:\n date_format_re = re.compile('(%s)' % '|'.join(date_format_mappings))\n \n \n-def babel_format_date(date: datetime, format: str, locale: Optional[str],\n+def babel_format_date(date: datetime, format: str, locale: str,\n                       formatter: Callable = babel.dates.format_date) -> str:\n     if locale is None:\n+        warnings.warn('The locale argument for babel_format_date() becomes required.',\n+                      RemovedInSphinx70Warning)\n         locale = 'en'\n \n     # Check if we have the tzinfo attribute. If not we cannot do any time\n@@ -194,7 +198,7 @@ def babel_format_date(date: datetime, format: str, locale: Optional[str],\n         return format\n \n \n-def format_date(format: str, date: datetime = None, language: Optional[str] = None) -> str:\n+def format_date(format: str, date: datetime = None, language: str = None) -> str:\n     if date is None:\n         # If time is not specified, try to use $SOURCE_DATE_EPOCH variable\n         # See https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal\n@@ -204,6 +208,11 @@ def format_date(format: str, date: datetime = None, language: Optional[str] = No\n         else:\n             date = datetime.now(timezone.utc).astimezone()\n \n+    if language is None:\n+        warnings.warn('The language argument for format_date() becomes required.',\n+                      RemovedInSphinx70Warning)\n+        language = 'en'\n+\n     result = []\n     tokens = date_format_re.split(format)\n     for token in tokens:\n@@ -229,9 +238,6 @@ def format_date(format: str, date: datetime = None, language: Optional[str] = No\n \n \n def get_image_filename_for_language(filename: str, env: \"BuildEnvironment\") -> str:\n-    if not env.config.language:\n-        return filename\n-\n     filename_format = env.config.figure_language_filename\n     d = dict()\n     d['root'], d['ext'] = path.splitext(filename)\n@@ -252,9 +258,6 @@ def get_image_filename_for_language(filename: str, env: \"BuildEnvironment\") -> s\n \n \n def search_image_for_language(filename: str, env: \"BuildEnvironment\") -> str:\n-    if not env.config.language:\n-        return filename\n-\n     translated = get_image_filename_for_language(filename, env)\n     _, abspath = env.relfn2path(translated)\n     if path.exists(abspath):\ndiff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -333,7 +333,7 @@ def __init__(self, document: nodes.document, builder: \"LaTeXBuilder\",\n         if self.config.numfig and self.config.math_numfig:\n             sphinxpkgoptions.append('mathnumfig')\n \n-        if (self.config.language not in {None, 'en', 'ja'} and\n+        if (self.config.language not in {'en', 'ja'} and\n                 'fncychap' not in self.config.latex_elements):\n             # use Sonny style if any language specified (except English)\n             self.elements['fncychap'] = (r'\\usepackage[Sonny]{fncychap}' + CR +\n@@ -341,7 +341,7 @@ def __init__(self, document: nodes.document, builder: \"LaTeXBuilder\",\n                                          r'\\ChTitleVar{\\Large\\normalfont\\sffamily}')\n \n         self.babel = self.builder.babel\n-        if self.config.language and not self.babel.is_supported_language():\n+        if not self.babel.is_supported_language():\n             # emit warning if specified language is invalid\n             # (only emitting, nothing changed to processing)\n             logger.warning(__('no Babel option known for language %r'),\n",
  "test_patch": "diff --git a/tests/test_build_latex.py b/tests/test_build_latex.py\n--- a/tests/test_build_latex.py\n+++ b/tests/test_build_latex.py\n@@ -528,7 +528,7 @@ def test_babel_with_no_language_settings(app, status, warning):\n     assert '\\\\usepackage[Bjarne]{fncychap}' in result\n     assert ('\\\\addto\\\\captionsenglish{\\\\renewcommand{\\\\contentsname}{Table of content}}\\n'\n             in result)\n-    assert '\\\\shorthandoff' not in result\n+    assert '\\\\shorthandoff{\"}' in result\n \n     # sphinxmessages.sty\n     result = (app.outdir / 'sphinxmessages.sty').read_text()\ndiff --git a/tests/test_util_i18n.py b/tests/test_util_i18n.py\n--- a/tests/test_util_i18n.py\n+++ b/tests/test_util_i18n.py\n@@ -98,15 +98,6 @@ def test_format_date():\n def test_get_filename_for_language(app):\n     app.env.temp_data['docname'] = 'index'\n \n-    # language is None\n-    app.env.config.language = None\n-    assert app.env.config.language is None\n-    assert i18n.get_image_filename_for_language('foo.png', app.env) == 'foo.png'\n-    assert i18n.get_image_filename_for_language('foo.bar.png', app.env) == 'foo.bar.png'\n-    assert i18n.get_image_filename_for_language('subdir/foo.png', app.env) == 'subdir/foo.png'\n-    assert i18n.get_image_filename_for_language('../foo.png', app.env) == '../foo.png'\n-    assert i18n.get_image_filename_for_language('foo', app.env) == 'foo'\n-\n     # language is en\n     app.env.config.language = 'en'\n     assert i18n.get_image_filename_for_language('foo.png', app.env) == 'foo.en.png'\n@@ -115,15 +106,6 @@ def test_get_filename_for_language(app):\n     assert i18n.get_image_filename_for_language('../foo.png', app.env) == '../foo.en.png'\n     assert i18n.get_image_filename_for_language('foo', app.env) == 'foo.en'\n \n-    # modify figure_language_filename and language is None\n-    app.env.config.language = None\n-    app.env.config.figure_language_filename = 'images/{language}/{root}{ext}'\n-    assert i18n.get_image_filename_for_language('foo.png', app.env) == 'foo.png'\n-    assert i18n.get_image_filename_for_language('foo.bar.png', app.env) == 'foo.bar.png'\n-    assert i18n.get_image_filename_for_language('subdir/foo.png', app.env) == 'subdir/foo.png'\n-    assert i18n.get_image_filename_for_language('../foo.png', app.env) == '../foo.png'\n-    assert i18n.get_image_filename_for_language('foo', app.env) == 'foo'\n-\n     # modify figure_language_filename and language is 'en'\n     app.env.config.language = 'en'\n     app.env.config.figure_language_filename = 'images/{language}/{root}{ext}'\n",
  "problem_statement": "To improve accessibility, set language in conf.py using sphinx-quickstart\n**Is your feature request related to a problem? Please describe.**\r\nBy default, Sphinx documentation does not include the language, for example in `docs/conf.py`\r\n`language = 'en'`\r\n\r\nresult in built web pages:\r\n`<html lang=\"en\">`\r\n\r\nThis leads to the following accessibility issue identified by [Lighthouse](https://developers.google.com/web/tools/lighthouse/):\r\n\r\n`<html> element does not have a [lang] attribute `\r\n> If a page doesn't specify a lang attribute, a screen reader assumes that the page is in the default language that the user chose when setting up the screen reader. If the page isn't actually in the default language, then the screen reader might not announce the page's text correctly. [Learn more](https://web.dev/html-has-lang/?utm_source=lighthouse&utm_medium=lr).`\r\n\r\nAlso, Sphinx sites thus do not by default take advantage of the [features offered by setting the language](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-language).\r\n\r\nThis [accessibility issue is present in major sites including NumPy](https://googlechrome.github.io/lighthouse/viewer/?psiurl=https%3A%2F%2Fnumpy.org%2Fdoc%2Fstable%2F&strategy=mobile&category=performance&category=accessibility&category=best-practices&category=seo&category=pwa&utm_source=lh-chrome-ext).\r\n\r\n**Describe the solution you'd like**\r\nUser already enters language when they run sphinx-quickstart:\r\n```\r\nFor a list of supported codes, see\r\nhttps://www.sphinx-doc.org/en/master/usage/configuration.html#confval-language.\r\n> Project language [en]: \r\n```\r\n\r\nso it should automatically set that `language` value in the generated `conf.py` file.\r\n\r\nIt would also be nice if there was some prompt to set the `language` of existing Sphinx installations, upon an update of Sphinx version, or build of the documentation, for example.\r\n\r\n**Describe alternatives you've considered**\r\nStatus quo, which retains accessibility issue.\r\n\r\n**Additional context**\r\nRelated issue: #10056.\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2022-01-08T17:42:55Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"tests/test_build_latex.py::test_babel_with_no_language_settings\"]",
  "PASS_TO_PASS": "[\"tests/test_build_latex.py::test_writer\", \"tests/test_build_latex.py::test_latex_warnings\", \"tests/test_build_latex.py::test_latex_basic\", \"tests/test_build_latex.py::test_latex_basic_manual\", \"tests/test_build_latex.py::test_latex_basic_howto\", \"tests/test_build_latex.py::test_latex_basic_manual_ja\", \"tests/test_build_latex.py::test_latex_basic_howto_ja\", \"tests/test_build_latex.py::test_latex_theme\", \"tests/test_build_latex.py::test_latex_theme_papersize\", \"tests/test_build_latex.py::test_latex_theme_options\", \"tests/test_build_latex.py::test_latex_additional_settings_for_language_code\", \"tests/test_build_latex.py::test_latex_additional_settings_for_greek\", \"tests/test_build_latex.py::test_latex_title_after_admonitions\", \"tests/test_build_latex.py::test_latex_release\", \"tests/test_build_latex.py::test_numref\", \"tests/test_build_latex.py::test_numref_with_prefix1\", \"tests/test_build_latex.py::test_numref_with_prefix2\", \"tests/test_build_latex.py::test_numref_with_language_ja\", \"tests/test_build_latex.py::test_latex_obey_numfig_is_false\", \"tests/test_build_latex.py::test_latex_obey_numfig_secnum_depth_is_zero\", \"tests/test_build_latex.py::test_latex_obey_numfig_secnum_depth_is_two\", \"tests/test_build_latex.py::test_latex_obey_numfig_but_math_numfig_false\", \"tests/test_build_latex.py::test_latex_add_latex_package\", \"tests/test_build_latex.py::test_babel_with_language_de\", \"tests/test_build_latex.py::test_babel_with_language_ru\", \"tests/test_build_latex.py::test_babel_with_language_tr\", \"tests/test_build_latex.py::test_babel_with_language_ja\", \"tests/test_build_latex.py::test_babel_with_unknown_language\", \"tests/test_build_latex.py::test_polyglossia_with_language_de\", \"tests/test_build_latex.py::test_polyglossia_with_language_de_1901\", \"tests/test_build_latex.py::test_footnote\", \"tests/test_build_latex.py::test_reference_in_caption_and_codeblock_in_footnote\", \"tests/test_build_latex.py::test_latex_show_urls_is_inline\", \"tests/test_build_latex.py::test_latex_show_urls_is_footnote\", \"tests/test_build_latex.py::test_latex_show_urls_is_no\", \"tests/test_build_latex.py::test_latex_show_urls_footnote_and_substitutions\", \"tests/test_build_latex.py::test_image_in_section\", \"tests/test_build_latex.py::test_latex_logo_if_not_found\", \"tests/test_build_latex.py::test_toctree_maxdepth_manual\", \"tests/test_build_latex.py::test_toctree_maxdepth_howto\", \"tests/test_build_latex.py::test_toctree_not_found\", \"tests/test_build_latex.py::test_toctree_without_maxdepth\", \"tests/test_build_latex.py::test_toctree_with_deeper_maxdepth\", \"tests/test_build_latex.py::test_latex_toplevel_sectioning_is_None\", \"tests/test_build_latex.py::test_latex_toplevel_sectioning_is_part\", \"tests/test_build_latex.py::test_latex_toplevel_sectioning_is_part_with_howto\", \"tests/test_build_latex.py::test_latex_toplevel_sectioning_is_chapter\", \"tests/test_build_latex.py::test_latex_toplevel_sectioning_is_chapter_with_howto\", \"tests/test_build_latex.py::test_latex_toplevel_sectioning_is_section\", \"tests/test_build_latex.py::test_latex_table_tabulars\", \"tests/test_build_latex.py::test_latex_table_longtable\", \"tests/test_build_latex.py::test_latex_table_complex_tables\", \"tests/test_build_latex.py::test_latex_table_custom_template_caseA\", \"tests/test_build_latex.py::test_latex_table_custom_template_caseB\", \"tests/test_build_latex.py::test_latex_table_custom_template_caseC\", \"tests/test_build_latex.py::test_latex_raw_directive\", \"tests/test_build_latex.py::test_latex_images\", \"tests/test_build_latex.py::test_latex_index\", \"tests/test_build_latex.py::test_latex_equations\", \"tests/test_build_latex.py::test_latex_image_in_parsed_literal\", \"tests/test_build_latex.py::test_latex_nested_enumerated_list\", \"tests/test_build_latex.py::test_latex_thebibliography\", \"tests/test_build_latex.py::test_latex_glossary\", \"tests/test_build_latex.py::test_latex_labels\", \"tests/test_build_latex.py::test_latex_figure_in_admonition\", \"tests/test_build_latex.py::test_default_latex_documents\", \"tests/test_build_latex.py::test_index_on_title\", \"tests/test_build_latex.py::test_texescape_for_non_unicode_supported_engine\", \"tests/test_build_latex.py::test_texescape_for_unicode_supported_engine\", \"tests/test_build_latex.py::test_latex_elements_extrapackages\", \"tests/test_build_latex.py::test_latex_nested_tables\", \"tests/test_build_latex.py::test_latex_container\", \"tests/test_util_i18n.py::test_catalog_info_for_file_and_path\", \"tests/test_util_i18n.py::test_catalog_info_for_sub_domain_file_and_path\", \"tests/test_util_i18n.py::test_catalog_outdated\", \"tests/test_util_i18n.py::test_catalog_write_mo\", \"tests/test_util_i18n.py::test_get_filename_for_language\", \"tests/test_util_i18n.py::test_CatalogRepository\"]",
  "environment_setup_commit": "60775ec4c4ea08509eee4b564cbf90f316021aff",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.030323",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}