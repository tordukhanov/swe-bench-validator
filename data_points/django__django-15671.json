{
  "repo": "django/django",
  "instance_id": "django__django-15671",
  "base_commit": "667105877e6723c6985399803a364848891513cc",
  "patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -6,7 +6,7 @@\n from django.forms.widgets import CheckboxInput, HiddenInput, NumberInput\n from django.utils.functional import cached_property\n from django.utils.translation import gettext_lazy as _\n-from django.utils.translation import ngettext\n+from django.utils.translation import ngettext_lazy\n \n __all__ = (\"BaseFormSet\", \"formset_factory\", \"all_valid\")\n \n@@ -61,6 +61,16 @@ class BaseFormSet(RenderableFormMixin):\n             \"ManagementForm data is missing or has been tampered with. Missing fields: \"\n             \"%(field_names)s. You may need to file a bug report if the issue persists.\"\n         ),\n+        \"too_many_forms\": ngettext_lazy(\n+            \"Please submit at most %(num)d form.\",\n+            \"Please submit at most %(num)d forms.\",\n+            \"num\",\n+        ),\n+        \"too_few_forms\": ngettext_lazy(\n+            \"Please submit at least %(num)d form.\",\n+            \"Please submit at least %(num)d forms.\",\n+            \"num\",\n+        ),\n     }\n \n     template_name_div = \"django/forms/formsets/div.html\"\n@@ -425,12 +435,7 @@ def full_clean(self):\n                 TOTAL_FORM_COUNT\n             ] > self.absolute_max:\n                 raise ValidationError(\n-                    ngettext(\n-                        \"Please submit at most %d form.\",\n-                        \"Please submit at most %d forms.\",\n-                        self.max_num,\n-                    )\n-                    % self.max_num,\n+                    self.error_messages[\"too_many_forms\"] % {\"num\": self.max_num},\n                     code=\"too_many_forms\",\n                 )\n             if (\n@@ -441,12 +446,7 @@ def full_clean(self):\n                 < self.min_num\n             ):\n                 raise ValidationError(\n-                    ngettext(\n-                        \"Please submit at least %d form.\",\n-                        \"Please submit at least %d forms.\",\n-                        self.min_num,\n-                    )\n-                    % self.min_num,\n+                    self.error_messages[\"too_few_forms\"] % {\"num\": self.min_num},\n                     code=\"too_few_forms\",\n                 )\n             # Give self.clean() a chance to do cross-form validation.\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -404,6 +404,37 @@ def test_formset_validate_max_flag(self):\n             '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>',\n         )\n \n+    def test_formset_validate_max_flag_custom_error(self):\n+        data = {\n+            \"choices-TOTAL_FORMS\": \"2\",\n+            \"choices-INITIAL_FORMS\": \"0\",\n+            \"choices-MIN_NUM_FORMS\": \"0\",\n+            \"choices-MAX_NUM_FORMS\": \"2\",\n+            \"choices-0-choice\": \"Zero\",\n+            \"choices-0-votes\": \"0\",\n+            \"choices-1-choice\": \"One\",\n+            \"choices-1-votes\": \"1\",\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(\n+            data,\n+            auto_id=False,\n+            prefix=\"choices\",\n+            error_messages={\n+                \"too_many_forms\": \"Number of submitted forms should be at most %(num)d.\"\n+            },\n+        )\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            [\"Number of submitted forms should be at most 1.\"],\n+        )\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\">'\n+            \"<li>Number of submitted forms should be at most 1.</li></ul>\",\n+        )\n+\n     def test_formset_validate_min_flag(self):\n         \"\"\"\n         If validate_min is set and min_num is more than TOTAL_FORMS in the\n@@ -431,6 +462,37 @@ def test_formset_validate_min_flag(self):\n             \"Please submit at least 3 forms.</li></ul>\",\n         )\n \n+    def test_formset_validate_min_flag_custom_formatted_error(self):\n+        data = {\n+            \"choices-TOTAL_FORMS\": \"2\",\n+            \"choices-INITIAL_FORMS\": \"0\",\n+            \"choices-MIN_NUM_FORMS\": \"0\",\n+            \"choices-MAX_NUM_FORMS\": \"0\",\n+            \"choices-0-choice\": \"Zero\",\n+            \"choices-0-votes\": \"0\",\n+            \"choices-1-choice\": \"One\",\n+            \"choices-1-votes\": \"1\",\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(\n+            data,\n+            auto_id=False,\n+            prefix=\"choices\",\n+            error_messages={\n+                \"too_few_forms\": \"Number of submitted forms should be at least %(num)d.\"\n+            },\n+        )\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            [\"Number of submitted forms should be at least 3.\"],\n+        )\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\">'\n+            \"<li>Number of submitted forms should be at least 3.</li></ul>\",\n+        )\n+\n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n         min_num validation doesn't consider unchanged forms with initial data\n",
  "problem_statement": "Allow overriding FormSet's error messages for too few and too many forms.\nDescription\n\t\nMoving the messages to default_error_messages enables overriding them via the error_messages argument when instantiating the FormSet.\nI would prefer being able to override them via inlineformset_factory, but that is for another day.\n",
  "hints_text": "Thanks for the ticket, sounds reasonable. Please submit PR via GitHub. Tests and release notes are required.",
  "created_at": "2022-05-08T00:32:56Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_formset_validate_max_flag_custom_error (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_min_flag_custom_formatted_error (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_max_flag_custom_error (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_formset_validate_min_flag_custom_formatted_error (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\"]",
  "PASS_TO_PASS": "[\"all_valid() validates all forms, even when some are invalid.\", \"test_valid (forms_tests.tests.test_formsets.AllValidTests)\", \"is_multipart() works with an empty formset.\", \"An empty formset still calls clean()\", \"Media is available on empty formset.\", \"test_as_div (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_p (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_table (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_ul (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_div (forms_tests.tests.test_formsets.Jinja2FormsetAsTagTests)\", \"test_as_p (forms_tests.tests.test_formsets.Jinja2FormsetAsTagTests)\", \"test_as_table (forms_tests.tests.test_formsets.Jinja2FormsetAsTagTests)\", \"test_as_ul (forms_tests.tests.test_formsets.Jinja2FormsetAsTagTests)\", \"test_customize_management_form_error (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_empty_forms_are_unbound (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_form_errors_are_caught_by_formset (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_management_form_invalid_data (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_no_data_error (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_with_management_data_attrs_work_fine (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_absolute_max_invalid (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_absolute_max_with_max_num (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A FormSet constructor takes the same arguments as Form. Create a\", \"A form that's displayed as blank may be submitted as blank.\", \"test_can_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"FormSets have a clean() hook for doing extra validation that isn't tied\", \"A custom renderer passed to a formset_factory() is passed to all forms\", \"test_default_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Deleting prefilled data is an error. Removing data from form fields\", \"test_disable_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"More than 1 empty form can be displayed using formset_factory's\", \"Ordering fields are allowed to be left blank. If they are left blank,\", \"test_form_kwargs_empty_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Custom kwargs set on the formset instance are passed to the\", \"Form kwargs can be passed dynamically in a formset.\", \"Formsets call is_valid() on each form.\", \"Formset's forms use the formset's error_class.\", \"FormSet.has_changed() is True if any data is passed to its forms, even\", \"A FormSet can be prefilled with existing data by providing a list of\", \"Formset instances are iterable.\", \"A formsets without any forms evaluates as True.\", \"Formset works with SplitDateTimeField(initial=datetime.datetime.now).\", \"A valid formset should have 0 total errors.\", \"test_formset_total_error_count_with_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"If validate_max is set and max_num is less than TOTAL_FORMS in the\", \"test_formset_validate_min_excludes_empty_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"If validate_min is set and min_num is more than TOTAL_FORMS in the\", \"min_num validation doesn't consider unchanged forms with initial data\", \"test_formset_validation (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A formset's ManagementForm is validated once per FormSet.is_valid()\", \"formset_factory's can_delete argument adds a boolean \\\"delete\\\" field to\", \"test_formset_with_deletion_custom_widget (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"deleted_forms works on a valid formset even if a deleted form would\", \"If a form is filled with something and can_delete is also checked, that\", \"FormSets with ordering + deletion.\", \"formset_factory's can_order argument adds an integer field to each\", \"test_formsets_with_ordering_custom_widget (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A formset has a hard limit on the number of forms instantiated.\", \"test_html_safe (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Can increase the built-in forms limit via a higher max_num.\", \"Can get ordered_forms from a valid formset even if a deleted form\", \"test_limited_max_forms_two (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"max_num has no effect when extra is less than max_num.\", \"Limiting the maximum number of forms with max_num.\", \"The management form class has field names matching the constants.\", \"The management form has the correct prefix.\", \"test_max_num_with_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"If max_num is 0 then no form is rendered at all, regardless of extra,\", \"test_max_num_zero_with_initial (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"More than 1 empty form can also be displayed using formset_factory's\", \"More than 1 empty form can be displayed using min_num.\", \"The extra argument works when the formset is pre-filled with initial\", \"One form from initial and extra=3 with max_num=2 results in the one\", \"More initial forms than max_num results in all initial forms being\", \"test_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"If non_form_errors() is called without calling is_valid() first,\", \"Ordering works with blank fieldsets.\", \"test_repr (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_repr_do_not_trigger_validation (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"If at least one field is filled out on a blank form, it will be\", \"A partially completed form is invalid.\", \"Just one form may be completed.\", \"test_template_name_can_be_overridden (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_template_name_uses_renderer_value (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_validate_max_ignores_forms_marked_for_deletion (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_absolute_max (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_absolute_max_invalid (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_absolute_max_with_max_num (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_can_delete_extra_formset_forms (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_default_absolute_max (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_disable_delete_extra_formset_forms (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_form_kwargs_empty_form (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_formset_total_error_count_with_non_form_errors (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_formset_validate_min_excludes_empty_forms (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_formset_validation (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_formset_with_deletion_custom_widget (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_formsets_with_ordering_custom_widget (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_html_safe (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_limited_max_forms_two (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_max_num_with_initial_data (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_max_num_zero_with_initial (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_non_form_errors (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_repr (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_repr_do_not_trigger_validation (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_template_name_can_be_overridden (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_template_name_uses_renderer_value (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\", \"test_validate_max_ignores_forms_marked_for_deletion (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.737208",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}