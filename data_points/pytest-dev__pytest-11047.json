{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-11047",
  "base_commit": "fbfd4b50050080413c8faca5368b9cb9b1ac9313",
  "patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -5,7 +5,11 @@\n import re\n from contextlib import contextmanager\n from contextlib import nullcontext\n+from datetime import datetime\n+from datetime import timedelta\n+from datetime import timezone\n from io import StringIO\n+from logging import LogRecord\n from pathlib import Path\n from typing import AbstractSet\n from typing import Dict\n@@ -53,7 +57,25 @@ def _remove_ansi_escape_sequences(text: str) -> str:\n     return _ANSI_ESCAPE_SEQ.sub(\"\", text)\n \n \n-class ColoredLevelFormatter(logging.Formatter):\n+class DatetimeFormatter(logging.Formatter):\n+    \"\"\"A logging formatter which formats record with\n+    :func:`datetime.datetime.strftime` formatter instead of\n+    :func:`time.strftime` in case of microseconds in format string.\n+    \"\"\"\n+\n+    def formatTime(self, record: LogRecord, datefmt=None) -> str:\n+        if datefmt and \"%f\" in datefmt:\n+            ct = self.converter(record.created)\n+            tz = timezone(timedelta(seconds=ct.tm_gmtoff), ct.tm_zone)\n+            # Construct `datetime.datetime` object from `struct_time`\n+            # and msecs information from `record`\n+            dt = datetime(*ct[0:6], microsecond=round(record.msecs * 1000), tzinfo=tz)\n+            return dt.strftime(datefmt)\n+        # Use `logging.Formatter` for non-microsecond formats\n+        return super().formatTime(record, datefmt)\n+\n+\n+class ColoredLevelFormatter(DatetimeFormatter):\n     \"\"\"A logging formatter which colorizes the %(levelname)..s part of the\n     log format passed to __init__.\"\"\"\n \n@@ -625,7 +647,7 @@ def __init__(self, config: Config) -> None:\n             config, \"log_file_date_format\", \"log_date_format\"\n         )\n \n-        log_file_formatter = logging.Formatter(\n+        log_file_formatter = DatetimeFormatter(\n             log_file_format, datefmt=log_file_date_format\n         )\n         self.log_file_handler.setFormatter(log_file_formatter)\n@@ -669,7 +691,7 @@ def _create_formatter(self, log_format, log_date_format, auto_indent):\n                 create_terminal_writer(self._config), log_format, log_date_format\n             )\n         else:\n-            formatter = logging.Formatter(log_format, log_date_format)\n+            formatter = DatetimeFormatter(log_format, log_date_format)\n \n         formatter._style = PercentStyleMultiline(\n             formatter._style._fmt, auto_indent=auto_indent\n",
  "test_patch": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -1234,3 +1234,100 @@ def test_log_cli_works(caplog):\n         \"WARNING  disabled:test_log_disabling_works_with_log_cli.py:7 This string will be suppressed.\"\n     )\n     assert not result.stderr.lines\n+\n+\n+def test_without_date_format_log(pytester: Pytester) -> None:\n+    \"\"\"Check that date is not printed by default.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        logger = logging.getLogger(__name__)\n+\n+        def test_foo():\n+            logger.warning('text')\n+            assert False\n+        \"\"\"\n+    )\n+    result = pytester.runpytest()\n+    assert result.ret == 1\n+    result.stdout.fnmatch_lines(\n+        [\"WARNING  test_without_date_format_log:test_without_date_format_log.py:6 text\"]\n+    )\n+\n+\n+def test_date_format_log(pytester: Pytester) -> None:\n+    \"\"\"Check that log_date_format affects output.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        logger = logging.getLogger(__name__)\n+\n+        def test_foo():\n+            logger.warning('text')\n+            assert False\n+        \"\"\"\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        log_format=%(asctime)s; %(levelname)s; %(message)s\n+        log_date_format=%Y-%m-%d %H:%M:%S\n+    \"\"\"\n+    )\n+    result = pytester.runpytest()\n+    assert result.ret == 1\n+    result.stdout.re_match_lines([r\"^[0-9-]{10} [0-9:]{8}; WARNING; text\"])\n+\n+\n+def test_date_format_percentf_log(pytester: Pytester) -> None:\n+    \"\"\"Make sure that microseconds are printed in log.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        logger = logging.getLogger(__name__)\n+\n+        def test_foo():\n+            logger.warning('text')\n+            assert False\n+        \"\"\"\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        log_format=%(asctime)s; %(levelname)s; %(message)s\n+        log_date_format=%Y-%m-%d %H:%M:%S.%f\n+    \"\"\"\n+    )\n+    result = pytester.runpytest()\n+    assert result.ret == 1\n+    result.stdout.re_match_lines([r\"^[0-9-]{10} [0-9:]{8}.[0-9]{6}; WARNING; text\"])\n+\n+\n+def test_date_format_percentf_tz_log(pytester: Pytester) -> None:\n+    \"\"\"Make sure that timezone and microseconds are properly formatted together.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        logger = logging.getLogger(__name__)\n+\n+        def test_foo():\n+            logger.warning('text')\n+            assert False\n+        \"\"\"\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        log_format=%(asctime)s; %(levelname)s; %(message)s\n+        log_date_format=%Y-%m-%d %H:%M:%S.%f%z\n+    \"\"\"\n+    )\n+    result = pytester.runpytest()\n+    assert result.ret == 1\n+    result.stdout.re_match_lines(\n+        [r\"^[0-9-]{10} [0-9:]{8}.[0-9]{6}[+-][0-9\\.]+; WARNING; text\"]\n+    )\n",
  "problem_statement": "support sub-second granularity/precision in `--log-date-format` (strftime `%f`)\n***tl;dr*** pytest processing strftime `%f` specifier from `--log-*-date-format` arguments would allow me to accurately merge log messages from disparate sub-systems\r\n\r\n### What's the problem?\r\n\r\nTests I run have pytest log messages that print at the second granularity for the datetimestamp, e.g. `2023-05-11T13:45:34`. At the same time, other log file messages not generated by pytest print sub-second datetimestamps, e.g. `2023-05-11T13:45:34.123`.\r\n\r\nWhen reviewing the various logs, there are many message from other system components that are printing many log messages per second. Because pytest log messages are lacking sub-second precision, I am unable to align pytest log messages within other system log messages.\r\n\r\n#### contrived example\r\n\r\nFor example, the system-under-test generates a log file like:\r\n```text\r\n2023-05-11T13:45:34.001 starting the frobulator\r\n2023-05-11T13:45:34.100 wiggling the waggulator\r\n2023-05-11T13:45:34.200 stopping the frobulator\r\n2023-05-11T13:45:34.301 starting the frobulator\r\n2023-05-11T13:45:34.400 poking the prokulator\r\n2023-05-11T13:45:34.450 prokulator response ERROR_NOT_ONLINE\r\n2023-05-11T13:45:34.500 stopping the frobulator\r\n2023-05-11T13:45:34.600 starting the frobulator\r\n2023-05-11T13:45:34.700 juggling some bowling pins\r\n2023-05-11T13:45:34.750 DROPPED A PIN!\r\n2023-05-11T13:45:34.800 stopping the frobulator\r\n2023-05-11T13:45:34.839 ERROR 0x0F009001 STOPPING THE frobulator\r\n```\r\nand the driver of tests, pytest, generates a log file like:\r\n```text\r\n2023-05-11T13:45:34 checking device\r\n2023-05-11T13:45:34 ping device\r\n2023-05-11T13:45:34 device error!\r\n```\r\n\r\nThe pytest log messages cannot be precisely ordered among the other log messages that occurred during the datetime second `2023-05-11T13:45:34`, there were many things that occurred in the other system components within that second.\r\n\r\n#### current confusion\r\n\r\nGiven the following pytest code\r\n\r\n```Python\r\nimport logging\r\nimport pytest\r\n\r\nlogging.basicConfig()\r\nlogger = logging.getLogger(__name__)\r\n\r\ndef test_logger():\r\n    logger.error(\"test_logger()ERROR\")\r\n    logger.warning(\"test_logger()WARNING\")\r\n```\r\n\r\nTo add sub-second granularity, it seems sensible to add `%f` within the `--log-cli-date-format`\r\n\r\n```text\r\n$ python -m pytest \\\r\n         -v -v \\\r\n         --log-cli-date-format=\"%Y%m%dT%H%M%S.%f\" \\\r\n         --capture=tee-sys \\\r\n         -k \"test_logger\"\r\n```\r\n\r\nbut then I see the confusing output of\r\n\r\n```text\r\n20230511T181007.%f: ERROR : [test_main.py:27 - test_logger()] : test_logger()ERROR\r\n20230511T181007.%f: WARNING : [test_main.py:28 - test_logger()] : test_logger()WARNING\r\n```\r\n\r\npytest logging is ignoring the strftime `%f` specifier!\r\n\r\n---\r\n\r\n### pytest feature request\r\n\r\nI want pytest log messages to print sub-second granularity, e.g. process strftime `%f` within `--log-date-format=\"...%f...\"` settings.\r\n\r\n#### Describe the solution you'd like\r\n<!-- A clear and concise description of what you want to happen. -->\r\n\r\nSupport strftime `%f` specifier in the various settings for _date-format_, e.g. `--log-date-format`, `--log-cli-date-format`, `--log-file-date-format`.\r\n\r\n<!-- Provide examples of real-world use cases that this would enable and how it solves the problem described above. -->\r\n\r\nIn my complex testing system, this means _all_ log messages would be printed to millisecond precision. This allows engineers investigating issues to more accurately merge disparate testing system logs by their natural ordering mechanism of a datetimestamp.\r\n\r\n---\r\n\r\n### Alternative Solutions\r\n\r\n<!-- Have you tried to workaround the problem using a pytest plugin or other tools? Or a different approach to solving this issue? Please elaborate here. -->\r\n\r\nI can set the `logging` format to include `%(msecs)03d`.\r\nHowever, it's a little confusing to have to manipulate log datetimestamps by two different mechanisms, `--log-cli-format` and `--log-cli-date-format`.\r\n\r\n#### example workaround\r\n\r\nOn the command-line run:\r\n```text\r\n$ python -m pytest \\\r\n         -v -v \\\r\n         --log-cli-date-format=\"%Y%m%dT%H%M%S.\" \\\r\n         --log-cli-format=\"%(asctime)s%(msecs)03d: %(levelname)s : [%(filename)s:%(lineno)s - %(funcName)s()] : %(message)s\" \\\r\n         --capture=tee-sys \\\r\n         -k \"test_logger\"\r\n```\r\nThis prints datetimestamps with millisecond precision\r\n```text\r\n20230511T180748.192: ERROR : [test_main.py:27 - test_logger()] : test_logger()ERROR\r\n20230511T180748.195: WARNING : [test_main.py:28 - test_logger()] : test_logger()WARNING\r\n```\r\n\r\n<br />\r\n\r\n### Summary\r\n\r\nIt is more intuitive for pytest to process the Python strftime `%f` specifier within all `--*-date-format` options.\n",
  "hints_text": "",
  "created_at": "2023-05-28T11:13:56Z",
  "version": "7.4",
  "FAIL_TO_PASS": "[\"testing/logging/test_reporting.py::test_date_format_percentf_log\", \"testing/logging/test_reporting.py::test_date_format_percentf_tz_log\"]",
  "PASS_TO_PASS": "[\"[100%]\", \"[\", \"[100%]------------------------------\", \"testing/logging/test_reporting.py::test_live_logging_suspends_capture[True]\", \"testing/logging/test_reporting.py::test_live_logging_suspends_capture[False]\", \"testing/logging/test_reporting.py::test_nothing_logged\", \"testing/logging/test_reporting.py::test_messages_logged\", \"testing/logging/test_reporting.py::test_root_logger_affected\", \"testing/logging/test_reporting.py::test_log_cli_level_log_level_interaction\", \"testing/logging/test_reporting.py::test_setup_logging\", \"testing/logging/test_reporting.py::test_teardown_logging\", \"testing/logging/test_reporting.py::test_log_cli_enabled_disabled[True]\", \"testing/logging/test_reporting.py::test_log_cli_enabled_disabled[False]\", \"testing/logging/test_reporting.py::test_log_cli_default_level\", \"testing/logging/test_reporting.py::test_log_cli_default_level_multiple_tests\", \"testing/logging/test_reporting.py::test_log_cli_default_level_sections\", \"testing/logging/test_reporting.py::test_live_logs_unknown_sections\", \"testing/logging/test_reporting.py::test_sections_single_new_line_after_test_outcome\", \"testing/logging/test_reporting.py::test_log_cli_level\", \"testing/logging/test_reporting.py::test_log_cli_ini_level\", \"testing/logging/test_reporting.py::test_log_cli_auto_enable[]\", \"testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-level=WARNING]\", \"testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-file-level=WARNING]\", \"testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-cli-level=WARNING]\", \"testing/logging/test_reporting.py::test_log_file_cli\", \"testing/logging/test_reporting.py::test_log_file_cli_level\", \"testing/logging/test_reporting.py::test_log_level_not_changed_by_default\", \"testing/logging/test_reporting.py::test_log_file_ini\", \"testing/logging/test_reporting.py::test_log_file_ini_level\", \"testing/logging/test_reporting.py::test_log_file_unicode\", \"testing/logging/test_reporting.py::test_collection_live_logging\", \"testing/logging/test_reporting.py::test_collection_collect_only_live_logging[]\", \"testing/logging/test_reporting.py::test_collection_collect_only_live_logging[-q]\", \"testing/logging/test_reporting.py::test_collection_collect_only_live_logging[-qq]\", \"testing/logging/test_reporting.py::test_collection_logging_to_file\", \"testing/logging/test_reporting.py::test_log_in_hooks\", \"testing/logging/test_reporting.py::test_log_in_runtest_logreport\", \"testing/logging/test_reporting.py::test_log_set_path\", \"testing/logging/test_reporting.py::test_colored_captured_log\", \"testing/logging/test_reporting.py::test_colored_ansi_esc_caplogtext\", \"testing/logging/test_reporting.py::test_logging_emit_error\", \"testing/logging/test_reporting.py::test_logging_emit_error_supressed\", \"testing/logging/test_reporting.py::test_log_file_cli_subdirectories_are_successfully_created\", \"testing/logging/test_reporting.py::test_disable_loggers\", \"testing/logging/test_reporting.py::test_disable_loggers_does_not_propagate\", \"testing/logging/test_reporting.py::test_log_disabling_works_with_log_cli\", \"testing/logging/test_reporting.py::test_without_date_format_log\", \"testing/logging/test_reporting.py::test_date_format_log\"]",
  "environment_setup_commit": "797b924fc44189d0b9c2ad905410f0bd89461ab7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.924074",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}