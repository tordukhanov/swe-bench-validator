{
  "repo": "django/django",
  "instance_id": "django__django-14785",
  "base_commit": "93f3b7a0ba2969109940775a18515728603afac6",
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2,6 +2,7 @@\n import copy\n import datetime\n import decimal\n+import math\n import operator\n import uuid\n import warnings\n@@ -1539,6 +1540,12 @@ def to_python(self, value):\n         if value is None:\n             return value\n         if isinstance(value, float):\n+            if math.isnan(value):\n+                raise exceptions.ValidationError(\n+                    self.error_messages['invalid'],\n+                    code='invalid',\n+                    params={'value': value},\n+                )\n             return self.context.create_decimal_from_float(value)\n         try:\n             return decimal.Decimal(value)\n",
  "test_patch": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+import math\n from decimal import Decimal\n \n from django.core import validators\n@@ -65,6 +66,13 @@ def test_save_without_float_conversion(self):\n         bd = BigD.objects.get(pk=bd.pk)\n         self.assertEqual(bd.d, Decimal('12.9'))\n \n+    def test_save_nan_invalid(self):\n+        msg = '“nan” value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            BigD.objects.create(d=float('nan'))\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            BigD.objects.create(d=math.nan)\n+\n     def test_fetch_from_db_without_float_rounding(self):\n         big_decimal = BigD.objects.create(d=Decimal('.100000000000000000000000000005'))\n         big_decimal.refresh_from_db()\n",
  "problem_statement": "NaN can be stored in DecimalField but cannot be retrieved\nDescription\n\t \n\t\t(last modified by dennisvang)\n\t \nDescription\nIf, for whatever reason, a NaN value (either float('nan'), math.nan, or numpy.nan) is stored in a DecimalField using sqlite3, the object cannot be retrieved from the database.\nAttempts to do so will raise TypeError: argument must be int or float\nThis issue also breaks e.g. the admin changelist view.\nSteps to reproduce\nCreate a brand new project using python 3.8.10 and django 3.2.6 with the default sqlite3 backend (optionally with numpy 1.21.2).\nCreate a model with a DecimalField:\nclass MyModel(models.Model):\n\tvalue = models.DecimalField(max_digits=10, decimal_places=5)\nProgrammatically create a model instance with value=float('nan') (or math.nan, or numpy.nan), then try to retrieve the object from the database (or refresh from database).\nobj = MyModel.objects.create(value=float('nan'))\n# the following raises a \"TypeError: argument must be int or float\"\nobj.refresh_from_db() \nVisiting the admin change view (or changelist view) for the model will also raise the error. \nTraceback:\nInternal Server Error: /nanbug/mymodel/1/change/\nTraceback (most recent call last):\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 47, in inner\n\tresponse = get_response(request)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/core/handlers/base.py\", line 181, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 616, in wrapper\n\treturn self.admin_site.admin_view(view)(*args, **kwargs)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/views/decorators/cache.py\", line 44, in _wrapped_view_func\n\tresponse = view_func(request, *args, **kwargs)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/contrib/admin/sites.py\", line 232, in inner\n\treturn view(request, *args, **kwargs)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1660, in change_view\n\treturn self.changeform_view(request, object_id, form_url, extra_context)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/utils/decorators.py\", line 43, in _wrapper\n\treturn bound_method(*args, **kwargs)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1540, in changeform_view\n\treturn self._changeform_view(request, object_id, form_url, extra_context)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1561, in _changeform_view\n\tobj = self.get_object(request, unquote(object_id), to_field)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 763, in get_object\n\treturn queryset.get(**{field.name: object_id})\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/db/models/query.py\", line 431, in get\n\tnum = len(clone)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/db/models/query.py\", line 262, in __len__\n\tself._fetch_all()\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/db/models/query.py\", line 1324, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/db/models/query.py\", line 68, in __iter__\n\tfor row in compiler.results_iter(results):\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/db/models/sql/compiler.py\", line 1122, in apply_converters\n\tvalue = converter(value, expression, connection)\n File \"/home/.../.local/share/virtualenvs/howto-GW7qAAiJ/lib/python3.8/site-packages/django/db/backends/sqlite3/operations.py\", line 313, in converter\n\treturn create_decimal(value).quantize(quantize_value, context=expression.output_field.context)\nTypeError: argument must be int or float\n",
  "hints_text": "Verified on main, problem is that the value returned from sqlite is NaN as a string, rather than float('nan'), and create_decimal_from_float is strict about it's accepted types. I've not verified whether it would affect any other backends, but presuming it doesn't, it shouldn't be too problematic to fix the converter given it'll only apply for the sqlite3 backend. ipdb> converter <function DatabaseOperations.get_decimalfield_converter.<locals>.converter at 0x1119105e0> ipdb> type(value) <class 'str'> ipdb> value 'NaN'\nReplying to Keryn Knight: Verified on main, problem is that the value returned from sqlite is NaN as a string, rather than float('nan'), and create_decimal_from_float is strict about it's accepted types. I've not verified whether it would affect any other backends, but presuming it doesn't, it shouldn't be too problematic to fix the converter given it'll only apply for the sqlite3 backend. Storing NaN also doesn't work on MySQL and Oracle. Moreover DecimalValidator raises ValidationError on it. I don't think it's supported, I'd adjust DecimalField.to_python() to raise an exception in this case.\nUnfortunately I don't have a postgresql database available at the moment to test the minimal example, but using postgresql in production, NaN values caused errors at a later stage, viz. during template rendering. For example: TypeError: bad operand type for abs(): 'str' in ... django/utils/numberformat.py\", line 44, in format if abs(exponent) + len(digits) > 200:\nNaN values caused errors at a later stage, viz. during template rendering. For example: ... Exactly, as far as I'm aware it has never been supported. That's why I'd adjust DecimalField.to_python() to raise an exception in this case.",
  "created_at": "2021-08-21T15:31:20Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_save_nan_invalid (model_fields.test_decimalfield.DecimalFieldTests)\"]",
  "PASS_TO_PASS": "[\"test_default (model_fields.test_decimalfield.DecimalFieldTests)\", \"Should be able to filter decimal fields using strings (#8023).\", \"test_get_prep_value (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_invalid_value (model_fields.test_decimalfield.DecimalFieldTests)\", \"Really big values can be used in a filter statement.\", \"test_max_decimal_places_validation (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_max_digits_validation (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_max_whole_digits_validation (model_fields.test_decimalfield.DecimalFieldTests)\", \"Trailing zeros in the fractional part aren't truncated.\", \"Ensure decimals don't go through a corrupting float conversion during\", \"test_to_python (model_fields.test_decimalfield.DecimalFieldTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.703212",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}