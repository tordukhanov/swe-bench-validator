{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-23267",
  "base_commit": "9dbcbe291e3bea11fc56c12ba3256a9d4cb4cf2f",
  "patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -246,14 +246,35 @@ class Colorbar:\n     alpha : float\n         The colorbar transparency between 0 (transparent) and 1 (opaque).\n \n-    orientation : {'vertical', 'horizontal'}\n+    orientation : None or {'vertical', 'horizontal'}\n+        If None, use the value determined by *location*. If both\n+        *orientation* and *location* are None then defaults to 'vertical'.\n \n     ticklocation : {'auto', 'left', 'right', 'top', 'bottom'}\n+        The location of the colorbar ticks. The *ticklocation* must match\n+        *orientation*. For example, a horizontal colorbar can only have ticks\n+        at the top or the bottom. If 'auto', the ticks will be the same as\n+        *location*, so a colorbar to the left will have ticks to the left. If\n+        *location* is None, the ticks will be at the bottom for a horizontal\n+        colorbar and at the right for a vertical.\n \n     drawedges : bool\n+        Whether to draw lines at color boundaries.\n \n     filled : bool\n+\n     %(_colormap_kw_doc)s\n+\n+    location : None or {'left', 'right', 'top', 'bottom'}\n+        Set the *orientation* and *ticklocation* of the colorbar using a\n+        single argument. Colorbars on the left and right are vertical,\n+        colorbars at the top and bottom are horizontal. The *ticklocation* is\n+        the same as *location*, so if *location* is 'top', the ticks are on\n+        the top. *orientation* and/or *ticklocation* can be provided as well\n+        and overrides the value set by *location*, but there will be an error\n+        for incompatible combinations.\n+\n+        .. versionadded:: 3.7\n     \"\"\"\n \n     n_rasterize = 50  # rasterize solids if number of colors >= n_rasterize\n@@ -264,7 +285,7 @@ def __init__(self, ax, mappable=None, *, cmap=None,\n                  alpha=None,\n                  values=None,\n                  boundaries=None,\n-                 orientation='vertical',\n+                 orientation=None,\n                  ticklocation='auto',\n                  extend=None,\n                  spacing='uniform',  # uniform or proportional\n@@ -275,6 +296,7 @@ def __init__(self, ax, mappable=None, *, cmap=None,\n                  extendfrac=None,\n                  extendrect=False,\n                  label='',\n+                 location=None,\n                  ):\n \n         if mappable is None:\n@@ -305,14 +327,23 @@ def __init__(self, ax, mappable=None, *, cmap=None,\n         mappable.colorbar_cid = mappable.callbacks.connect(\n             'changed', self.update_normal)\n \n+        location_orientation = _get_orientation_from_location(location)\n+\n         _api.check_in_list(\n-            ['vertical', 'horizontal'], orientation=orientation)\n+            [None, 'vertical', 'horizontal'], orientation=orientation)\n         _api.check_in_list(\n             ['auto', 'left', 'right', 'top', 'bottom'],\n             ticklocation=ticklocation)\n         _api.check_in_list(\n             ['uniform', 'proportional'], spacing=spacing)\n \n+        if location_orientation is not None and orientation is not None:\n+            if location_orientation != orientation:\n+                raise TypeError(\n+                    \"location and orientation are mutually exclusive\")\n+        else:\n+            orientation = orientation or location_orientation or \"vertical\"\n+\n         self.ax = ax\n         self.ax._axes_locator = _ColorbarAxesLocator(self)\n \n@@ -365,7 +396,8 @@ def __init__(self, ax, mappable=None, *, cmap=None,\n         self.__scale = None  # linear, log10 for now.  Hopefully more?\n \n         if ticklocation == 'auto':\n-            ticklocation = 'bottom' if orientation == 'horizontal' else 'right'\n+            ticklocation = _get_ticklocation_from_orientation(\n+                orientation) if location is None else location\n         self.ticklocation = ticklocation\n \n         self.set_label(label)\n@@ -1330,25 +1362,36 @@ def drag_pan(self, button, key, x, y):\n \n def _normalize_location_orientation(location, orientation):\n     if location is None:\n-        location = _api.check_getitem(\n-            {None: \"right\", \"vertical\": \"right\", \"horizontal\": \"bottom\"},\n-            orientation=orientation)\n+        location = _get_ticklocation_from_orientation(orientation)\n     loc_settings = _api.check_getitem({\n-        \"left\":   {\"location\": \"left\", \"orientation\": \"vertical\",\n-                   \"anchor\": (1.0, 0.5), \"panchor\": (0.0, 0.5), \"pad\": 0.10},\n-        \"right\":  {\"location\": \"right\", \"orientation\": \"vertical\",\n-                   \"anchor\": (0.0, 0.5), \"panchor\": (1.0, 0.5), \"pad\": 0.05},\n-        \"top\":    {\"location\": \"top\", \"orientation\": \"horizontal\",\n-                   \"anchor\": (0.5, 0.0), \"panchor\": (0.5, 1.0), \"pad\": 0.05},\n-        \"bottom\": {\"location\": \"bottom\", \"orientation\": \"horizontal\",\n-                   \"anchor\": (0.5, 1.0), \"panchor\": (0.5, 0.0), \"pad\": 0.15},\n+        \"left\":   {\"location\": \"left\", \"anchor\": (1.0, 0.5),\n+                   \"panchor\": (0.0, 0.5), \"pad\": 0.10},\n+        \"right\":  {\"location\": \"right\", \"anchor\": (0.0, 0.5),\n+                   \"panchor\": (1.0, 0.5), \"pad\": 0.05},\n+        \"top\":    {\"location\": \"top\", \"anchor\": (0.5, 0.0),\n+                   \"panchor\": (0.5, 1.0), \"pad\": 0.05},\n+        \"bottom\": {\"location\": \"bottom\", \"anchor\": (0.5, 1.0),\n+                   \"panchor\": (0.5, 0.0), \"pad\": 0.15},\n     }, location=location)\n+    loc_settings[\"orientation\"] = _get_orientation_from_location(location)\n     if orientation is not None and orientation != loc_settings[\"orientation\"]:\n         # Allow the user to pass both if they are consistent.\n         raise TypeError(\"location and orientation are mutually exclusive\")\n     return loc_settings\n \n \n+def _get_orientation_from_location(location):\n+    return _api.check_getitem(\n+        {None: None, \"left\": \"vertical\", \"right\": \"vertical\",\n+         \"top\": \"horizontal\", \"bottom\": \"horizontal\"}, location=location)\n+\n+\n+def _get_ticklocation_from_orientation(orientation):\n+    return _api.check_getitem(\n+        {None: \"right\", \"vertical\": \"right\", \"horizontal\": \"bottom\"},\n+        orientation=orientation)\n+\n+\n @_docstring.interpd\n def make_axes(parents, location=None, orientation=None, fraction=0.15,\n               shrink=1.0, aspect=20, **kwargs):\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -1149,3 +1149,34 @@ def test_title_text_loc():\n     # colorbar axes, including its extend triangles....\n     assert (cb.ax.title.get_window_extent(fig.canvas.get_renderer()).ymax >\n             cb.ax.spines['outline'].get_window_extent().ymax)\n+\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_passing_location(fig_ref, fig_test):\n+    ax_ref = fig_ref.add_subplot()\n+    im = ax_ref.imshow([[0, 1], [2, 3]])\n+    ax_ref.figure.colorbar(im, cax=ax_ref.inset_axes([0, 1.05, 1, 0.05]),\n+                           orientation=\"horizontal\", ticklocation=\"top\")\n+    ax_test = fig_test.add_subplot()\n+    im = ax_test.imshow([[0, 1], [2, 3]])\n+    ax_test.figure.colorbar(im, cax=ax_test.inset_axes([0, 1.05, 1, 0.05]),\n+                            location=\"top\")\n+\n+\n+@pytest.mark.parametrize(\"kwargs,error,message\", [\n+    ({'location': 'top', 'orientation': 'vertical'}, TypeError,\n+     \"location and orientation are mutually exclusive\"),\n+    ({'location': 'top', 'orientation': 'vertical', 'cax': True}, TypeError,\n+     \"location and orientation are mutually exclusive\"),  # Different to above\n+    ({'ticklocation': 'top', 'orientation': 'vertical', 'cax': True},\n+     ValueError, \"'top' is not a valid value for position\"),\n+    ({'location': 'top', 'extendfrac': (0, None)}, ValueError,\n+     \"invalid value for extendfrac\"),\n+    ])\n+def test_colorbar_errors(kwargs, error, message):\n+    fig, ax = plt.subplots()\n+    im = ax.imshow([[0, 1], [2, 3]])\n+    if kwargs.get('cax', None) is True:\n+        kwargs['cax'] = ax.inset_axes([0, 1.05, 1, 0.05])\n+    with pytest.raises(error, match=message):\n+        fig.colorbar(im, **kwargs)\n",
  "problem_statement": "[ENH]: Colorbar should support location kwarg that sets both orientation and ticklocation\n### Problem\n\nWhen colorbar autocreates an Axes, one can pass `location`, which also sets the colorbar's orientation and the ticklocation (left for a left colorbar, right for a right colorbar, etc.).  When one instead passes a manually created Axes (e.g. using inset_axes, as suggested by the colorbar_placement.py example), the `location` kwarg is not accepted (because things are directly passed to the Colorbar class); one needs to explicitly set `orientation` and `ticklocation` (the latter is not even documented by `Figure.colorbar`):\r\n```python\r\nfrom pylab import *\r\nsfs = figure(layout=\"constrained\").subfigures(1, 2)\r\nax = sfs[0].add_subplot()\r\nim = ax.imshow([[0, 1], [2, 3]])\r\nax.figure.colorbar(im, location=\"top\")\r\nax = sfs[1].add_subplot()\r\nim = ax.imshow([[0, 1], [2, 3]])\r\nax.figure.colorbar(im, cax=ax.inset_axes([0, 1.05, 1, 0.05]),\r\n                   orientation=\"horizontal\", ticklocation=\"top\")\r\nshow()\r\n```\n\n### Proposed solution\n\nAdd a `location` kwarg to the Colorbar constructor which sets both `orientation` and `ticklocation`, and is mutually exclusive with them.\r\n... or at least better document the workaround.\n",
  "hints_text": "I assume that setting `location` should override `orientation`? Since `orientation` has a default non-None value. Or should one change the default value to None to be able to detect which value was set?",
  "created_at": "2022-06-14T09:11:23Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_passing_location[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs1-TypeError-location\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_shape[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_length[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-horizontal]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-vertical]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-True]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-False]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_false\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_east[standard]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_east[constrained]\", \"lib/matplotlib/tests/test_colorbar.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_gridspec_make_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_scatter[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[no\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[with\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure_cl\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbarbase\", \"lib/matplotlib/tests/test_colorbar.py::test_parentless_mappable\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_closed_patch[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_minorticks_on_off\", \"lib/matplotlib/tests/test_colorbar.py::test_cbar_minorticks_for_rc_xyminortickvisible\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autoticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_autotickslog\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[both]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[min]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[max]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_powernorm_extension\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_axes_kw\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_log_minortick_labels\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_renorm\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[%4.2e]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[{x:.2e}]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_scale_reset\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks_2\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_inverted_ticks\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_no_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_mappable_2d_alpha\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_label\", \"lib/matplotlib/tests/test_colorbar.py::test_keeping_xlabel[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim0]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim1]\", \"lib/matplotlib/tests/test_colorbar.py::test_anchored_cbar_position_using_specgrid\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_change_lim_scale[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_axes_handles_same_functions[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_inset_colorbar_layout\", \"lib/matplotlib/tests/test_colorbar.py::test_twoslope_colorbar[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_remove_cb_whose_mappable_has_no_figure[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_aspects\", \"lib/matplotlib/tests/test_colorbar.py::test_proportional_colorbars[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_drawedges[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_contourf_extend_patches[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_negative_boundarynorm\", \"lib/matplotlib/tests/test_colorbar.py::test_boundaries[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_no_warning_rcparams_grid_true\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_set_formatter_locator\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_alpha[png]\", \"lib/matplotlib/tests/test_colorbar.py::test_offset_text_loc\", \"lib/matplotlib/tests/test_colorbar.py::test_title_text_loc\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs0-TypeError-location\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs2-ValueError-'top'\", \"lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs3-ValueError-invalid\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.801521",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}