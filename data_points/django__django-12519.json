{
  "repo": "django/django",
  "instance_id": "django__django-12519",
  "base_commit": "d4fff711d4c97356bd6ba1273d2a5e349326eb5f",
  "patch": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -364,3 +364,10 @@ def mysql_version(self):\n     @cached_property\n     def mysql_is_mariadb(self):\n         return 'mariadb' in self.mysql_server_info.lower()\n+\n+    @cached_property\n+    def sql_mode(self):\n+        with self.cursor() as cursor:\n+            cursor.execute('SELECT @@sql_mode')\n+            sql_mode = cursor.fetchone()\n+        return set(sql_mode[0].split(',') if sql_mode else ())\ndiff --git a/django/db/backends/mysql/validation.py b/django/db/backends/mysql/validation.py\n--- a/django/db/backends/mysql/validation.py\n+++ b/django/db/backends/mysql/validation.py\n@@ -10,11 +10,7 @@ def check(self, **kwargs):\n         return issues\n \n     def _check_sql_mode(self, **kwargs):\n-        with self.connection.cursor() as cursor:\n-            cursor.execute(\"SELECT @@sql_mode\")\n-            sql_mode = cursor.fetchone()\n-        modes = set(sql_mode[0].split(',') if sql_mode else ())\n-        if not (modes & {'STRICT_TRANS_TABLES', 'STRICT_ALL_TABLES'}):\n+        if not (self.connection.sql_mode & {'STRICT_TRANS_TABLES', 'STRICT_ALL_TABLES'}):\n             return [checks.Warning(\n                 \"MySQL Strict Mode is not set for database connection '%s'\" % self.connection.alias,\n                 hint=\"MySQL's Strict Mode fixes many data integrity problems in MySQL, \"\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -6,6 +6,7 @@\n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import NotSupportedError, connection\n from django.db.models import fields\n+from django.db.models.constants import LOOKUP_SEP\n from django.db.models.query_utils import Q\n from django.utils.deconstruct import deconstructible\n from django.utils.functional import cached_property\n@@ -559,6 +560,14 @@ def as_sql(self, *args, **kwargs):\n             'only be used in a subquery.'\n         )\n \n+    def resolve_expression(self, *args, **kwargs):\n+        col = super().resolve_expression(*args, **kwargs)\n+        # FIXME: Rename possibly_multivalued to multivalued and fix detection\n+        # for non-multivalued JOINs (e.g. foreign key fields). This should take\n+        # into accountÂ only many-to-many and one-to-many relationships.\n+        col.possibly_multivalued = LOOKUP_SEP in self.name\n+        return col\n+\n     def relabeled_clone(self, relabels):\n         return self\n \n@@ -747,6 +756,7 @@ def as_sql(self, compiler, connection):\n class Col(Expression):\n \n     contains_column_references = True\n+    possibly_multivalued = False\n \n     def __init__(self, alias, target, output_field=None):\n         if output_field is None:\n@@ -1042,7 +1052,10 @@ def as_sql(self, compiler, connection, template=None, **extra_context):\n     def get_group_by_cols(self, alias=None):\n         if alias:\n             return [Ref(alias, self)]\n-        return self.query.get_external_cols()\n+        external_cols = self.query.get_external_cols()\n+        if any(col.possibly_multivalued for col in external_cols):\n+            return [self]\n+        return external_cols\n \n \n class Exists(Subquery):\n",
  "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,6 +1,7 @@\n import datetime\n import re\n from decimal import Decimal\n+from unittest import skipIf\n \n from django.core.exceptions import FieldError\n from django.db import connection\n@@ -1190,6 +1191,26 @@ def test_aggregation_subquery_annotation_values(self):\n             },\n         ])\n \n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    @skipIf(\n+        connection.vendor == 'mysql' and 'ONLY_FULL_GROUP_BY' in connection.sql_mode,\n+        'GROUP BY optimization does not work properly when ONLY_FULL_GROUP_BY '\n+        'mode is enabled on MySQL, see #31331.',\n+    )\n+    def test_aggregation_subquery_annotation_multivalued(self):\n+        \"\"\"\n+        Subquery annotations must be included in the GROUP BY if they use\n+        potentially multivalued relations (contain the LOOKUP_SEP).\n+        \"\"\"\n+        subquery_qs = Author.objects.filter(\n+            pk=OuterRef('pk'),\n+            book__name=OuterRef('book__name'),\n+        ).values('pk')\n+        author_qs = Author.objects.annotate(\n+            subquery_id=Subquery(subquery_qs),\n+        ).annotate(count=Count('book'))\n+        self.assertEqual(author_qs.count(), Author.objects.count())\n+\n     def test_aggregation_order_by_not_selected_annotation_values(self):\n         result_asc = [\n             self.b4.pk,\n@@ -1248,6 +1269,7 @@ def test_group_by_exists_annotation(self):\n         ).annotate(total=Count('*'))\n         self.assertEqual(dict(has_long_books_breakdown), {True: 2, False: 3})\n \n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n     def test_aggregation_subquery_annotation_related_field(self):\n         publisher = Publisher.objects.create(name=self.a9.name, num_awards=2)\n         book = Book.objects.create(\n@@ -1267,3 +1289,8 @@ def test_aggregation_subquery_annotation_related_field(self):\n             contact_publisher__isnull=False,\n         ).annotate(count=Count('authors'))\n         self.assertSequenceEqual(books_qs, [book])\n+        # FIXME: GROUP BY doesn't need to include a subquery with\n+        # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n+        # with self.assertNumQueries(1) as ctx:\n+        #     self.assertSequenceEqual(books_qs, [book])\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\ndiff --git a/tests/check_framework/test_database.py b/tests/check_framework/test_database.py\n--- a/tests/check_framework/test_database.py\n+++ b/tests/check_framework/test_database.py\n@@ -2,7 +2,7 @@\n from unittest import mock\n \n from django.core.checks.database import check_database_backends\n-from django.db import connection\n+from django.db import connection, connections\n from django.test import TestCase\n \n \n@@ -18,6 +18,12 @@ def test_database_checks_called(self, mocked_check):\n \n     @unittest.skipUnless(connection.vendor == 'mysql', 'Test only for MySQL')\n     def test_mysql_strict_mode(self):\n+        def _clean_sql_mode():\n+            for alias in self.databases:\n+                if hasattr(connections[alias], 'sql_mode'):\n+                    del connections[alias].sql_mode\n+\n+        _clean_sql_mode()\n         good_sql_modes = [\n             'STRICT_TRANS_TABLES,STRICT_ALL_TABLES',\n             'STRICT_TRANS_TABLES',\n@@ -29,6 +35,7 @@ def test_mysql_strict_mode(self):\n                 return_value=(response,)\n             ):\n                 self.assertEqual(check_database_backends(databases=self.databases), [])\n+            _clean_sql_mode()\n \n         bad_sql_modes = ['', 'WHATEVER']\n         for response in bad_sql_modes:\n@@ -40,3 +47,4 @@ def test_mysql_strict_mode(self):\n                 result = check_database_backends(databases=self.databases)\n                 self.assertEqual(len(result), 2)\n                 self.assertEqual([r.id for r in result], ['mysql.W002', 'mysql.W002'])\n+            _clean_sql_mode()\n",
  "problem_statement": "Subquery annotations are omitted in group by query section if multiple annotation are declared\nDescription\n\t \n\t\t(last modified by Johannes Maron)\n\t \nSadly there is more regression in Django 3.0.2 even after #31094.\nBackground: It's the same query as #31094. I tried upgrading to Django 3.0.2 and now I get duplicate results. Even tho they query should be distinct. Where on 2.2 the queryset yields 490 results, it's 519 on 3.0.\nA quick diff on the queries still reveals a different grouped by section:\nThis is the new query on 3.0.2:\nSELECT DISTINCT \"camps_offer\".\"id\",\n\t\t\t\t\"camps_offer\".\"title\",\n\t\t\t\t\"camps_offer\".\"slug\",\n\t\t\t\t\"camps_offer\".\"is_active\",\n\t\t\t\t\"camps_offer\".\"modified\",\n\t\t\t\t\"camps_offer\".\"created\",\n\t\t\t\t\"camps_offer\".\"provider_id\",\n\t\t\t\t\"camps_offer\".\"activity_type\",\n\t\t\t\t\"camps_offer\".\"description\",\n\t\t\t\t\"camps_offer\".\"highlights\",\n\t\t\t\t\"camps_offer\".\"important_information\",\n\t\t\t\t\"camps_offer\".\"min_age\",\n\t\t\t\t\"camps_offer\".\"max_age\",\n\t\t\t\t\"camps_offer\".\"food\",\n\t\t\t\t\"camps_offer\".\"video\",\n\t\t\t\t\"camps_offer\".\"accommodation\",\n\t\t\t\t\"camps_offer\".\"accommodation_type\",\n\t\t\t\t\"camps_offer\".\"room_type\",\n\t\t\t\t\"camps_offer\".\"room_size_min\",\n\t\t\t\t\"camps_offer\".\"room_size_max\",\n\t\t\t\t\"camps_offer\".\"external_url\",\n\t\t\t\t\"camps_offer\".\"application_form\",\n\t\t\t\t\"camps_offer\".\"caseload\",\n\t\t\t\t\"camps_offer\".\"field_trips\",\n\t\t\t\tMIN(T4.\"retail_price\") AS \"min_retail_price\",\n\t\t\t\t(SELECT U0.\"id\"\n\t\t\t\t FROM \"camps_servicepackage\" U0\n\t\t\t\t\t\t INNER JOIN \"camps_region\" U2 ON (U0.\"region_id\" = U2.\"id\")\n\t\t\t\t WHERE (U0.\"company_id\" = 1 AND U0.\"option\" = \"camps_offer\".\"activity_type\" AND\n\t\t\t\t\t\tST_Contains(U2.\"locations\", T4.\"position\"))\n\t\t\t\t LIMIT 1)\t\t\t AS \"in_package\",\n\t\t\t\t\"camps_provider\".\"id\",\n\t\t\t\t\"camps_provider\".\"title\",\n\t\t\t\t\"camps_provider\".\"slug\",\n\t\t\t\t\"camps_provider\".\"is_active\",\n\t\t\t\t\"camps_provider\".\"modified\",\n\t\t\t\t\"camps_provider\".\"created\",\n\t\t\t\t\"camps_provider\".\"logo\",\n\t\t\t\t\"camps_provider\".\"description\",\n\t\t\t\t\"camps_provider\".\"video\",\n\t\t\t\t\"camps_provider\".\"external_url\",\n\t\t\t\t\"camps_provider\".\"terms\",\n\t\t\t\t\"camps_provider\".\"cancellation_policy\",\n\t\t\t\t\"camps_provider\".\"privacy_policy\",\n\t\t\t\t\"camps_provider\".\"application_form\"\nFROM \"camps_offer\"\n\t\t LEFT OUTER JOIN \"camps_bookingoption\" ON (\"camps_offer\".\"id\" = \"camps_bookingoption\".\"offer_id\")\n\t\t INNER JOIN \"camps_provider\" ON (\"camps_offer\".\"provider_id\" = \"camps_provider\".\"id\")\n\t\t INNER JOIN \"camps_bookingoption\" T4 ON (\"camps_offer\".\"id\" = T4.\"offer_id\")\nWHERE (\"camps_offer\".\"is_active\" = True AND \"camps_provider\".\"is_active\" = True AND\n\t T4.\"end\" >= STATEMENT_TIMESTAMP() AND T4.\"is_active\" = True AND \"camps_offer\".\"max_age\" >= 5 AND\n\t \"camps_offer\".\"min_age\" <= 13 AND (SELECT U0.\"id\"\n\t\t\t\t\t\t\t\t\t\t FROM \"camps_servicepackage\" U0\n\t\t\t\t\t\t\t\t\t\t\t\t INNER JOIN \"camps_region\" U2 ON (U0.\"region_id\" = U2.\"id\")\n\t\t\t\t\t\t\t\t\t\t WHERE (U0.\"company_id\" = 1 AND U0.\"option\" = \"camps_offer\".\"activity_type\" AND\n\t\t\t\t\t\t\t\t\t\t\t\t ST_Contains(U2.\"locations\", T4.\"position\"))\n\t\t\t\t\t\t\t\t\t\t LIMIT 1) IS NOT NULL)\nGROUP BY \"camps_offer\".\"id\", T4.\"position\", \"camps_provider\".\"id\"\nORDER BY \"camps_offer\".\"created\" ASC\nAnd what it was (and should be) on 2.2.9:\nSELECT DISTINCT \"camps_offer\".\"id\",\n\t\t\t\t\"camps_offer\".\"title\",\n\t\t\t\t\"camps_offer\".\"slug\",\n\t\t\t\t\"camps_offer\".\"is_active\",\n\t\t\t\t\"camps_offer\".\"modified\",\n\t\t\t\t\"camps_offer\".\"created\",\n\t\t\t\t\"camps_offer\".\"provider_id\",\n\t\t\t\t\"camps_offer\".\"activity_type\",\n\t\t\t\t\"camps_offer\".\"description\",\n\t\t\t\t\"camps_offer\".\"highlights\",\n\t\t\t\t\"camps_offer\".\"important_information\",\n\t\t\t\t\"camps_offer\".\"min_age\",\n\t\t\t\t\"camps_offer\".\"max_age\",\n\t\t\t\t\"camps_offer\".\"food\",\n\t\t\t\t\"camps_offer\".\"video\",\n\t\t\t\t\"camps_offer\".\"accommodation\",\n\t\t\t\t\"camps_offer\".\"accommodation_type\",\n\t\t\t\t\"camps_offer\".\"room_type\",\n\t\t\t\t\"camps_offer\".\"room_size_min\",\n\t\t\t\t\"camps_offer\".\"room_size_max\",\n\t\t\t\t\"camps_offer\".\"external_url\",\n\t\t\t\t\"camps_offer\".\"application_form\",\n\t\t\t\t\"camps_offer\".\"caseload\",\n\t\t\t\t\"camps_offer\".\"field_trips\",\n\t\t\t\tMIN(T4.\"retail_price\") AS \"min_retail_price\",\n\t\t\t\t(SELECT U0.\"id\"\n\t\t\t\t FROM \"camps_servicepackage\" U0\n\t\t\t\t\t\t INNER JOIN \"camps_region\" U2 ON (U0.\"region_id\" = U2.\"id\")\n\t\t\t\t WHERE (U0.\"company_id\" = 1 AND U0.\"option\" = (\"camps_offer\".\"activity_type\") AND\n\t\t\t\t\t\tST_Contains(U2.\"locations\", (T4.\"position\")))\n\t\t\t\t LIMIT 1)\t\t\t AS \"in_package\",\n\t\t\t\t\"camps_provider\".\"id\",\n\t\t\t\t\"camps_provider\".\"title\",\n\t\t\t\t\"camps_provider\".\"slug\",\n\t\t\t\t\"camps_provider\".\"is_active\",\n\t\t\t\t\"camps_provider\".\"modified\",\n\t\t\t\t\"camps_provider\".\"created\",\n\t\t\t\t\"camps_provider\".\"logo\",\n\t\t\t\t\"camps_provider\".\"description\",\n\t\t\t\t\"camps_provider\".\"video\",\n\t\t\t\t\"camps_provider\".\"external_url\",\n\t\t\t\t\"camps_provider\".\"terms\",\n\t\t\t\t\"camps_provider\".\"cancellation_policy\",\n\t\t\t\t\"camps_provider\".\"privacy_policy\",\n\t\t\t\t\"camps_provider\".\"application_form\"\nFROM \"camps_offer\"\n\t\t LEFT OUTER JOIN \"camps_bookingoption\" ON (\"camps_offer\".\"id\" = \"camps_bookingoption\".\"offer_id\")\n\t\t INNER JOIN \"camps_provider\" ON (\"camps_offer\".\"provider_id\" = \"camps_provider\".\"id\")\n\t\t INNER JOIN \"camps_bookingoption\" T4 ON (\"camps_offer\".\"id\" = T4.\"offer_id\")\nWHERE (\"camps_offer\".\"is_active\" = True AND \"camps_provider\".\"is_active\" = True AND\n\t T4.\"end\" >= (STATEMENT_TIMESTAMP()) AND T4.\"is_active\" = True AND (SELECT U0.\"id\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FROM \"camps_servicepackage\" U0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t INNER JOIN \"camps_region\" U2 ON (U0.\"region_id\" = U2.\"id\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t WHERE (U0.\"company_id\" = 1 AND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t U0.\"option\" = (\"camps_offer\".\"activity_type\") AND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ST_Contains(U2.\"locations\", (T4.\"position\")))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t LIMIT 1) IS NOT NULL)\nGROUP BY \"camps_offer\".\"id\",\n\t\t (SELECT U0.\"id\"\n\t\t FROM \"camps_servicepackage\" U0\n\t\t\t\t INNER JOIN \"camps_region\" U2 ON (U0.\"region_id\" = U2.\"id\")\n\t\t WHERE (U0.\"company_id\" = 1 AND U0.\"option\" = (\"camps_offer\".\"activity_type\") AND\n\t\t\t\t ST_Contains(U2.\"locations\", (T4.\"position\")))\n\t\t LIMIT 1), \"camps_provider\".\"id\"\nORDER BY \"camps_offer\".\"created\" ASC\n",
  "hints_text": "Johannes, I need to repeat my gentle request for a queryset (see comment:2 and comment:6 ) Can you provide a queryset? It's really hard to restore the original queryset from a raw SQL.\nI really try but without a queryset I was not able to reproduce this issue.\n@felixxm, it seems that Subquery annotation are omitted from the grouping section in 3.0. I will try to create a test case today. If you add the following test to 2.2.* anywhere in tests.aggregation it will pass, in 3.0 it will fail, because the subquery is missing from the grouping bit: def test_filtered_aggregate_ref_subquery_annotation_e_31150(self): from django.db.models import OuterRef, Subquery aggs = Author.objects.annotate( earliest_book_year=Subquery( Book.objects.filter( contact__pk=OuterRef('pk'), ).order_by('pubdate').values('pubdate__year')[:1] ), ).annotate(max_id=Max('id')) print(aggs.query) self.assertIn(str(aggs.query), \"\"\" SELECT \"aggregation_author\".\"id\", \"aggregation_author\".\"name\", \"aggregation_author\".\"age\", (SELECT django_date_extract('year', U0.\"pubdate\") FROM \"aggregation_book\" U0 WHERE U0.\"contact_id\" = (\"aggregation_author\".\"id\") ORDER BY U0.\"pubdate\" ASC LIMIT 1) AS \"earliest_book_year\", MAX(\"aggregation_author\".\"id\") AS \"max_id\" FROM \"aggregation_author\" GROUP BY \"aggregation_author\".\"id\", \"aggregation_author\".\"name\", \"aggregation_author\".\"age\", (SELECT django_date_extract('year', U0.\"pubdate\") FROM \"aggregation_book\" U0 WHERE U0.\"contact_id\" = (\"aggregation_author\".\"id\") ORDER BY U0.\"pubdate\" ASC LIMIT 1) \"\"\")\nOK, thank you for the test case Joe. I added the import line so it pops straight into ,aggregation.tests.AggregateTestCase and then, yes, there's a change of behaviour between 2.2 and 3.0.\nThe generated query effectively changed but the returned resultset should be the same since the subquery is a function of the outer query's primary key and the query is grouped by the outer query primary key. I don't think asserting against the generated query string is a proper test case; the generated SQL will change between Django versions but the returned result set should be the same.\nYes. I didnât take the test case as final. Just illustrating the issue. ð If itâs equivalent then thereâs no issue, but Iâm assuming Joe is seeing what he thinks is a substantive regression?\nReplying to Simon Charette: The generated query effectively changed but the returned resultset should be the same since the subquery is a function of the outer query's primary key and the query is grouped by the outer query primary key. I came from a wrong result set and deduced the error from here on out. It took me a while to figure it out to, but sadly grouping by the outer reference is not the same as grouping by the query. Here an example: with t_w_douplicates as ( select abs(n) as pk, n as val from generate_series(-2, 2, 1) n ) select pk, ( select n from generate_series(2, 2) n where n = val ) from t_w_douplicates where ( select n from generate_series(2, 2) n where n = val ) is null GROUP BY pk, ( select n from generate_series(2, 2) n where n = val ); Which returns (0, null) (1, null) (2, null) And just using the outer ref: with t_w_douplicates as ( select abs(n) as pk, n as val from generate_series(-2, 2, 1) n ) select pk, ( select n from generate_series(2, 2) n where n = val ) from t_w_douplicates where ( select n from generate_series(2, 2) n where n = val ) is null GROUP BY pk, val; Which returns 4 results: (2, null) (1, null) (0, null) (1, null) I don't think asserting against the generated query string is a proper test case; the generated SQL will change between Django versions but the returned result set should be the same. Certainly, haha, that was just to illustrate how to get from the ORM to the SQL query in the description. The SQL sample now, shows how they produce different result sets.\nThanks for the extra details, I think I have a better picture of what's happening here. In the cases where an outer query spawns a multi-valued relationship and the subquery references one of these multi-valued relationship we must keep grouping by the subquery. In your original reports the INNER JOIN \"camps_bookingoption\" T4 joins spawns multiple rows for the same camps.Offer and then your subquery filter against (T4.\"position\"). In ORM terms that means we must keep returning self in Subquery.get_group_by_cols when any of our OuterRef include a __ which could point to a multi-valued relationship. We could go a bit further and only disable the optimization if any of the outer-ref in the __ chain is multi-valued by relying on getattr(rel, 'many_to_many', True) introspection but in all cases that means adding a way to taint Col instances with whether or not they are/could be multi-valued so get_group_by_cols can return self if any of get_external_cols is multi-valued I could see this tainting as being useful to warn about #10060 in the future since the logic could be based on this column or alias tainting. I'm happy to submit a patch or discuss any alternatives but it feels like the above solution solves the reported problem while maintaining the optimization for most of the cases.\nI give a quick shot at the above solution and came with this rough patch âhttps://github.com/django/django/compare/master...charettes:ticket-31150 Johannes, could you give it a shot and report whether or not it addresses your problem? Do you confirm your original queryset was using an OuterRef with a reference to an outer-query multi-valued relationship?\nI tested Simon's patch applied to 3.0.3 and it now works as expected. So yes, I'd say go ahead!",
  "created_at": "2020-03-02T12:53:06Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_aggregation_subquery_annotation_multivalued (aggregation.tests.AggregateTestCase)\"]",
  "PASS_TO_PASS": "[\"test_database_checks_called (check_framework.test_database.DatabaseCheckTests)\", \"test_add_implementation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_alias (aggregation.tests.AggregateTestCase)\", \"test_aggregate_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_in_order_by (aggregation.tests.AggregateTestCase)\", \"test_aggregate_multi_join (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_expressions (aggregation.tests.AggregateTestCase)\", \"test_aggregation_order_by_not_selected_annotation_values (aggregation.tests.AggregateTestCase)\", \"Subquery annotations are excluded from the GROUP BY if they are\", \"test_aggregation_subquery_annotation_exists (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_related_field (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_basic (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer_select_related (aggregation.tests.AggregateTestCase)\", \"test_annotate_m2m (aggregation.tests.AggregateTestCase)\", \"test_annotate_ordering (aggregation.tests.AggregateTestCase)\", \"test_annotate_over_annotate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_list (aggregation.tests.AggregateTestCase)\", \"test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotation (aggregation.tests.AggregateTestCase)\", \"test_annotation_expressions (aggregation.tests.AggregateTestCase)\", \"test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase)\", \"test_avg_decimal_field (aggregation.tests.AggregateTestCase)\", \"test_avg_duration_field (aggregation.tests.AggregateTestCase)\", \"test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)\", \"test_combine_different_types (aggregation.tests.AggregateTestCase)\", \"test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase)\", \"test_complex_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_count (aggregation.tests.AggregateTestCase)\", \"test_count_distinct_expression (aggregation.tests.AggregateTestCase)\", \"test_count_star (aggregation.tests.AggregateTestCase)\", \"test_dates_with_aggregation (aggregation.tests.AggregateTestCase)\", \"test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase)\", \"test_distinct_on_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_aggregate (aggregation.tests.AggregateTestCase)\", \"test_even_more_aggregate (aggregation.tests.AggregateTestCase)\", \"test_expression_on_aggregation (aggregation.tests.AggregateTestCase)\", \"test_filter_aggregate (aggregation.tests.AggregateTestCase)\", \"test_filtering (aggregation.tests.AggregateTestCase)\", \"test_fkey_aggregate (aggregation.tests.AggregateTestCase)\", \"test_group_by_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_group_by_subquery_annotation (aggregation.tests.AggregateTestCase)\", \"test_grouped_annotation_in_group_by (aggregation.tests.AggregateTestCase)\", \"test_missing_output_field_raises_error (aggregation.tests.AggregateTestCase)\", \"test_more_aggregation (aggregation.tests.AggregateTestCase)\", \"test_multi_arg_aggregate (aggregation.tests.AggregateTestCase)\", \"test_multiple_aggregates (aggregation.tests.AggregateTestCase)\", \"test_non_grouped_annotation_not_in_group_by (aggregation.tests.AggregateTestCase)\", \"test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase)\", \"test_nonfield_annotation (aggregation.tests.AggregateTestCase)\", \"test_order_of_precedence (aggregation.tests.AggregateTestCase)\", \"test_related_aggregate (aggregation.tests.AggregateTestCase)\", \"test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase)\", \"test_single_aggregate (aggregation.tests.AggregateTestCase)\", \"test_sum_distinct_aggregate (aggregation.tests.AggregateTestCase)\", \"test_sum_duration_field (aggregation.tests.AggregateTestCase)\", \"test_ticket11881 (aggregation.tests.AggregateTestCase)\", \"test_ticket12886 (aggregation.tests.AggregateTestCase)\", \"test_ticket17424 (aggregation.tests.AggregateTestCase)\", \"test_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.629623",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}