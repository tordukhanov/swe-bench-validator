{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-23742",
  "base_commit": "942aa77a4ba1bd5b50e22c0246240b27ba925305",
  "patch": "diff --git a/examples/user_interfaces/embedding_webagg_sgskip.py b/examples/user_interfaces/embedding_webagg_sgskip.py\n--- a/examples/user_interfaces/embedding_webagg_sgskip.py\n+++ b/examples/user_interfaces/embedding_webagg_sgskip.py\n@@ -30,7 +30,7 @@\n \n \n import matplotlib as mpl\n-from matplotlib.backends.backend_webagg_core import (\n+from matplotlib.backends.backend_webagg import (\n     FigureManagerWebAgg, new_figure_manager_given_figure)\n from matplotlib.figure import Figure\n \ndiff --git a/lib/matplotlib/backends/backend_webagg_core.py b/lib/matplotlib/backends/backend_webagg_core.py\n--- a/lib/matplotlib/backends/backend_webagg_core.py\n+++ b/lib/matplotlib/backends/backend_webagg_core.py\n@@ -427,7 +427,9 @@ def set_history_buttons(self):\n \n \n class FigureManagerWebAgg(backend_bases.FigureManagerBase):\n-    _toolbar2_class = ToolbarCls = NavigationToolbar2WebAgg\n+    # This must be None to not break ipympl\n+    _toolbar2_class = None\n+    ToolbarCls = NavigationToolbar2WebAgg\n \n     def __init__(self, canvas, num):\n         self.web_sockets = set()\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_webagg.py b/lib/matplotlib/tests/test_backend_webagg.py\n--- a/lib/matplotlib/tests/test_backend_webagg.py\n+++ b/lib/matplotlib/tests/test_backend_webagg.py\n@@ -2,6 +2,7 @@\n import os\n import sys\n import pytest\n+import matplotlib.backends.backend_webagg_core\n \n \n @pytest.mark.parametrize(\"backend\", [\"webagg\", \"nbagg\"])\n@@ -25,3 +26,8 @@ def test_webagg_fallback(backend):\n     ret = subprocess.call([sys.executable, \"-c\", test_code], env=env)\n \n     assert ret == 0\n+\n+\n+def test_webagg_core_no_toolbar():\n+    fm = matplotlib.backends.backend_webagg_core.FigureManagerWebAgg\n+    assert fm._toolbar2_class is None\n",
  "problem_statement": "[Bug]: Bug with toolbar instantiation in notebook\n### Bug summary\r\n\r\nIn MNE-Python we have an abstraction layer for widgets+toolbars. Until today's latest `pip --pre` install it was working fine. Now it fails with:\r\n\r\n```\r\nE   TraitError: The 'toolbar' trait of a Canvas instance expected a Toolbar or None, not the NavigationToolbar2WebAgg at '0x7fce12bf6f80'.\r\n```\r\n\r\nSee https://dev.azure.com/mne-tools/mne-python/_build/results?buildId=21230&view=logs&jobId=2b5832ae-6860-5681-a4e1-fd132048f8b4&j=2b5832ae-6860-5681-a4e1-fd132048f8b4&t=5b9d2bdb-d99e-53c3-c7bb-7166fe849ae1\r\n\r\n### Code for reproduction\r\n\r\nI'll work on boiling it down to a MWE tomorrow hopefully. Could also be a bug with traitlets. But the code that runs on the CIs is essentially this in a notebook I think:\r\n\r\n```python\r\nplt.ioff()\r\nfig, ax = plt.subplots()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n<details>\r\n<summary>Full traceback</summary>\r\n\r\n```\r\nE   nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:\r\nE   ------------------\r\nE   \"\"\"Test the GUI widgets abstraction in notebook.\"\"\"\r\nE   from mne.viz import set_3d_backend\r\nE   from mne.viz.backends.renderer import _get_backend\r\nE   from mne.viz.backends.tests.test_abstract import _do_widget_tests\r\nE   from IPython import get_ipython\r\nE   \r\nE   set_3d_backend('notebook')\r\nE   backend = _get_backend()\r\nE   \r\nE   ipython = get_ipython()\r\nE   ipython.magic('%matplotlib widget')\r\nE   \r\nE   _do_widget_tests(backend)\r\nE   ------------------\r\nE   \r\nE   ---------------------------------------------------------------------------\r\nE   TraitError                                Traceback (most recent call last)\r\nE   Input In [1], in <cell line: 13>()\r\nE        10 ipython = get_ipython()\r\nE        11 ipython.magic('%matplotlib widget')\r\nE   ---> 13 _do_widget_tests(backend)\r\nE   \r\nE   File ~/work/1/s/mne/viz/backends/tests/test_abstract.py:23, in _do_widget_tests(backend)\r\nE        21 renderer.sphere([0, 0, 0], 'red', 1)\r\nE        22 central_layout._add_widget(renderer.plotter)\r\nE   ---> 23 canvas = backend._Canvas(5, 5, 96)\r\nE        24 canvas.ax.plot(range(10), range(10), label='plot')\r\nE        25 central_layout._add_widget(canvas)\r\nE   \r\n```\r\n\r\n</details>\r\n\r\n### Expected outcome\r\n\r\nNo error\r\n\r\n### Additional information\r\n\r\n*EDIT*: ipympl 0.9.2\r\n\r\n### Operating system\r\n\r\nUbuntu (GH actions), or macOS M1 (locally)\r\n\r\n### Matplotlib Version\r\n\r\n3.6.0rc1\r\n\r\n### Matplotlib Backend\r\n\r\nNotebook\r\n\r\n### Python version\r\n\r\n3.10\r\n\r\n### Jupyter version\r\n\r\n*EDIT*: 6.4.11\r\n\r\n### Installation\r\n\r\npip\n",
  "hints_text": "Okay I can replicate on 3.6.0.rc0 in a notebook with just:\r\n```\r\n%matplotlib widget\r\nimport matplotlib.pyplot as plt\r\nfig, ax = plt.subplots()\r\n```\r\n\r\n<details>\r\n<summary>Traceback</summary>\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTraitError                                Traceback (most recent call last)\r\nInput In [1], in <cell line: 3>()\r\n      1 get_ipython().run_line_magic('matplotlib', 'widget')\r\n      2 import matplotlib.pyplot as plt\r\n----> 3 fig, ax = plt.subplots()\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/matplotlib/pyplot.py:1430, in subplots(nrows, ncols, sharex, sharey, squeeze, width_ratios, height_ratios, subplot_kw, gridspec_kw, **fig_kw)\r\n   1284 def subplots(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True,\r\n   1285              width_ratios=None, height_ratios=None,\r\n   1286              subplot_kw=None, gridspec_kw=None, **fig_kw):\r\n   1287     \"\"\"\r\n   1288     Create a figure and a set of subplots.\r\n   1289 \r\n   (...)\r\n   1428 \r\n   1429     \"\"\"\r\n-> 1430     fig = figure(**fig_kw)\r\n   1431     axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey,\r\n   1432                        squeeze=squeeze, subplot_kw=subplot_kw,\r\n   1433                        gridspec_kw=gridspec_kw, height_ratios=height_ratios,\r\n   1434                        width_ratios=width_ratios)\r\n   1435     return fig, axs\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/matplotlib/_api/deprecation.py:454, in make_keyword_only.<locals>.wrapper(*args, **kwargs)\r\n    448 if len(args) > name_idx:\r\n    449     warn_deprecated(\r\n    450         since, message=\"Passing the %(name)s %(obj_type)s \"\r\n    451         \"positionally is deprecated since Matplotlib %(since)s; the \"\r\n    452         \"parameter will become keyword-only %(removal)s.\",\r\n    453         name=name, obj_type=f\"parameter of {func.__name__}()\")\r\n--> 454 return func(*args, **kwargs)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/matplotlib/pyplot.py:771, in figure(num, figsize, dpi, facecolor, edgecolor, frameon, FigureClass, clear, **kwargs)\r\n    761 if len(allnums) == max_open_warning >= 1:\r\n    762     _api.warn_external(\r\n    763         f\"More than {max_open_warning} figures have been opened. \"\r\n    764         f\"Figures created through the pyplot interface \"\r\n   (...)\r\n    768         f\"Consider using `matplotlib.pyplot.close()`.\",\r\n    769         RuntimeWarning)\r\n--> 771 manager = new_figure_manager(\r\n    772     num, figsize=figsize, dpi=dpi,\r\n    773     facecolor=facecolor, edgecolor=edgecolor, frameon=frameon,\r\n    774     FigureClass=FigureClass, **kwargs)\r\n    775 fig = manager.canvas.figure\r\n    776 if fig_label:\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/matplotlib/pyplot.py:347, in new_figure_manager(*args, **kwargs)\r\n    345 \"\"\"Create a new figure manager instance.\"\"\"\r\n    346 _warn_if_gui_out_of_main_thread()\r\n--> 347 return _get_backend_mod().new_figure_manager(*args, **kwargs)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/matplotlib/backend_bases.py:3505, in _Backend.new_figure_manager(cls, num, *args, **kwargs)\r\n   3503 fig_cls = kwargs.pop('FigureClass', Figure)\r\n   3504 fig = fig_cls(*args, **kwargs)\r\n-> 3505 return cls.new_figure_manager_given_figure(num, fig)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/ipympl/backend_nbagg.py:487, in _Backend_ipympl.new_figure_manager_given_figure(num, figure)\r\n    485 if 'nbagg.transparent' in rcParams and rcParams['nbagg.transparent']:\r\n    486     figure.patch.set_alpha(0)\r\n--> 487 manager = FigureManager(canvas, num)\r\n    489 if is_interactive():\r\n    490     _Backend_ipympl._to_show.append(figure)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/ipympl/backend_nbagg.py:459, in FigureManager.__init__(self, canvas, num)\r\n    458 def __init__(self, canvas, num):\r\n--> 459     FigureManagerWebAgg.__init__(self, canvas, num)\r\n    460     self.web_sockets = [self.canvas]\r\n    461     self.toolbar = Toolbar(self.canvas)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/matplotlib/backends/backend_webagg_core.py:434, in FigureManagerWebAgg.__init__(self, canvas, num)\r\n    432 def __init__(self, canvas, num):\r\n    433     self.web_sockets = set()\r\n--> 434     super().__init__(canvas, num)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/matplotlib/backend_bases.py:2796, in FigureManagerBase.__init__(self, canvas, num)\r\n   2791 self.toolmanager = (ToolManager(canvas.figure)\r\n   2792                     if mpl.rcParams['toolbar'] == 'toolmanager'\r\n   2793                     else None)\r\n   2794 if (mpl.rcParams[\"toolbar\"] == \"toolbar2\"\r\n   2795         and self._toolbar2_class):\r\n-> 2796     self.toolbar = self._toolbar2_class(self.canvas)\r\n   2797 elif (mpl.rcParams[\"toolbar\"] == \"toolmanager\"\r\n   2798         and self._toolmanager_toolbar_class):\r\n   2799     self.toolbar = self._toolmanager_toolbar_class(self.toolmanager)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/matplotlib/backends/backend_webagg_core.py:397, in NavigationToolbar2WebAgg.__init__(self, canvas)\r\n    395 self.message = ''\r\n    396 self._cursor = None  # Remove with deprecation.\r\n--> 397 super().__init__(canvas)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/matplotlib/backend_bases.py:2938, in NavigationToolbar2.__init__(self, canvas)\r\n   2936 def __init__(self, canvas):\r\n   2937     self.canvas = canvas\r\n-> 2938     canvas.toolbar = self\r\n   2939     self._nav_stack = cbook.Stack()\r\n   2940     # This cursor will be set after the initial draw.\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/traitlets/traitlets.py:712, in TraitType.__set__(self, obj, value)\r\n    710     raise TraitError('The \"%s\" trait is read-only.' % self.name)\r\n    711 else:\r\n--> 712     self.set(obj, value)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/traitlets/traitlets.py:686, in TraitType.set(self, obj, value)\r\n    685 def set(self, obj, value):\r\n--> 686     new_value = self._validate(obj, value)\r\n    687     try:\r\n    688         old_value = obj._trait_values[self.name]\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/traitlets/traitlets.py:718, in TraitType._validate(self, obj, value)\r\n    716     return value\r\n    717 if hasattr(self, \"validate\"):\r\n--> 718     value = self.validate(obj, value)  # type:ignore[attr-defined]\r\n    719 if obj._cross_validation_lock is False:\r\n    720     value = self._cross_validate(obj, value)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/traitlets/traitlets.py:2029, in Instance.validate(self, obj, value)\r\n   2027     return value\r\n   2028 else:\r\n-> 2029     self.error(obj, value)\r\n\r\nFile ~/opt/miniconda3/envs/mne/lib/python3.10/site-packages/traitlets/traitlets.py:824, in TraitType.error(self, obj, value, error, info)\r\n    818 else:\r\n    819     e = \"The '{}' trait expected {}, not {}.\".format(\r\n    820         self.name,\r\n    821         self.info(),\r\n    822         describe(\"the\", value),\r\n    823     )\r\n--> 824 raise TraitError(e)\r\n\r\nTraitError: The 'toolbar' trait of a Canvas instance expected a Toolbar or None, not the NavigationToolbar2WebAgg at '0x10f474310'.\r\n```\r\n\r\n</details>\nI have seen this error and even remember debugging it, but I do not remember if I found the problem or if I switch to an older environment with the plan to come back (because I was under time pressure for something else).  It is quite frustrating....\nhttps://github.com/matplotlib/ipympl/issues/426 and https://github.com/matplotlib/matplotlib/pull/22454 look related, but this has apparent come back?\n9369769ea7b4692043233b6f1463326a93120315 via https://github.com/matplotlib/matplotlib/pull/23498 un-did the fix in #22454 .\r\n\r\nLooking how to address both this issue and `examples/user_interfaces/embedding_webagg_sgskip.py`\nThe facts here are:\r\n\r\n - we re-organized the backends to pull as much of the toolbar initialization logic into one place as possible\r\n - the `Toolbar` class to used is controlled by the `_toolbar2_class` private attribute which if None the backend_bases does not try to make a toolbar\r\n - `ipympl` inherits from webagg_core and does not (yet) set this private attribute\r\n - the Canvas in ipympl uses traitlets and type-checks the toolbar to be its toolbar (which is in turn also a `DOMWidget` and has all of the sync mechanics with the js frontend)\r\n - therefor webagg_core's classes must not set `FigureManager._toolbar2_class` (this is what #22454 did)\r\n - that fix in turn broke an example which is what #23498 fixed ",
  "created_at": "2022-08-26T01:13:33Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_webagg.py::test_webagg_core_no_toolbar\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_webagg.py::test_webagg_fallback[webagg]\", \"lib/matplotlib/tests/test_backend_webagg.py::test_webagg_fallback[nbagg]\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.805528",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}