{
  "repo": "django/django",
  "instance_id": "django__django-13620",
  "base_commit": "966b5b49b6521483f1c90b4499c4c80e80136de3",
  "patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -120,7 +120,12 @@ def call_command(command_name, *args, **options):\n         for s_opt in parser._actions if s_opt.option_strings\n     }\n     arg_options = {opt_mapping.get(key, key): value for key, value in options.items()}\n-    parse_args = [str(a) for a in args]\n+    parse_args = []\n+    for arg in args:\n+        if isinstance(arg, (list, tuple)):\n+            parse_args += map(str, arg)\n+        else:\n+            parse_args.append(str(arg))\n \n     def get_actions(parser):\n         # Parser actions and actions from sub-parser choices.\n@@ -139,15 +144,19 @@ def get_actions(parser):\n     }\n     # Any required arguments which are passed in via **options must be passed\n     # to parse_args().\n-    parse_args += [\n-        min(opt.option_strings)\n-        if isinstance(opt, (_AppendConstAction, _CountAction, _StoreConstAction))\n-        else '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if (\n+    for opt in parser_actions:\n+        if (\n             opt.dest in options and\n             (opt.required or opt in mutually_exclusive_required_options)\n-        )\n-    ]\n+        ):\n+            parse_args.append(min(opt.option_strings))\n+            if isinstance(opt, (_AppendConstAction, _CountAction, _StoreConstAction)):\n+                continue\n+            value = arg_options[opt.dest]\n+            if isinstance(value, (list, tuple)):\n+                parse_args += map(str, value)\n+            else:\n+                parse_args.append(str(value))\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     # Raise an error if any unknown options were passed.\n",
  "test_patch": "diff --git a/tests/user_commands/management/commands/mutually_exclusive_required.py b/tests/user_commands/management/commands/mutually_exclusive_required.py\n--- a/tests/user_commands/management/commands/mutually_exclusive_required.py\n+++ b/tests/user_commands/management/commands/mutually_exclusive_required.py\n@@ -7,6 +7,7 @@ def add_arguments(self, parser):\n         group = parser.add_mutually_exclusive_group(required=True)\n         group.add_argument('--foo-id', type=int, nargs='?', default=None)\n         group.add_argument('--foo-name', type=str, nargs='?', default=None)\n+        group.add_argument('--foo-list', type=int, nargs='+')\n         group.add_argument('--append_const', action='append_const', const=42)\n         group.add_argument('--const', action='store_const', const=31)\n         group.add_argument('--count', action='count')\ndiff --git a/tests/user_commands/management/commands/required_list_option.py b/tests/user_commands/management/commands/required_list_option.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/user_commands/management/commands/required_list_option.py\n@@ -0,0 +1,10 @@\n+from django.core.management.base import BaseCommand\n+\n+\n+class Command(BaseCommand):\n+    def add_arguments(self, parser):\n+        parser.add_argument('--foo-list', nargs='+', type=int, required=True)\n+\n+    def handle(self, *args, **options):\n+        for option, value in options.items():\n+            self.stdout.write('%s=%s' % (option, value))\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -244,8 +244,9 @@ def test_mutually_exclusive_group_required_options(self):\n         management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n         self.assertIn('foo_name', out.getvalue())\n         msg = (\n-            'Error: one of the arguments --foo-id --foo-name --append_const '\n-            '--const --count --flag_false --flag_true is required'\n+            'Error: one of the arguments --foo-id --foo-name --foo-list '\n+            '--append_const --const --count --flag_false --flag_true is '\n+            'required'\n         )\n         with self.assertRaisesMessage(CommandError, msg):\n             management.call_command('mutually_exclusive_required', stdout=out)\n@@ -275,6 +276,22 @@ def test_mutually_exclusive_group_required_const_options(self):\n                 )\n                 self.assertIn(expected_output, out.getvalue())\n \n+    def test_required_list_option(self):\n+        tests = [\n+            (('--foo-list', [1, 2]), {}),\n+            ((), {'foo_list': [1, 2]}),\n+        ]\n+        for command in ['mutually_exclusive_required', 'required_list_option']:\n+            for args, kwargs in tests:\n+                with self.subTest(command=command, args=args, kwargs=kwargs):\n+                    out = StringIO()\n+                    management.call_command(\n+                        command,\n+                        *args,\n+                        **{**kwargs, 'stdout': out},\n+                    )\n+                    self.assertIn('foo_list=[1, 2]', out.getvalue())\n+\n     def test_required_const_options(self):\n         args = {\n             'append_const': [42],\n",
  "problem_statement": "Support for list arguments inside exclusive required groups\nDescription\n\t \n\t\t(last modified by Mark Gajdosik)\n\t \nAre there any plans to add support for the following?\nfrom django.core.management import BaseCommand\nclass Command(BaseCommand):\n\tdef add_arguments(self, parser):\n\t\tgroup = parser.add_mutually_exclusive_group(required=True)\n\t\tgroup.add_argument('--foo', nargs='+', type=int)\n\tdef handle(self, *args, **options):\n\t\tpass\nWhen calling the above using call_command:\ncall_command('call_command_test', foo=[1, 2, 3])\n# Raises: django.core.management.base.CommandError: Error: argument --foo: invalid int value: '[1, 2, 3]'\ncall_command('call_command_test', '--foo=1', '--foo=2', '--foo=3')\n# Option 'foo' will be of value [3]\nI can't think of any workarounds other than setting type=str (somehow, that works fine) and coercing manually. Thank you!\n",
  "hints_text": "I think we need to add proper handling for required arguments with nargs as well.\nReplying to Hasan Ramezani: I think we need to add proper handling for required arguments with nargs as well. That would always be neat. I couldn't get it to work with the current {}={} syntax and the list comprehension: # Any required arguments which are passed in via **options must be passed # to parse_args(). for opt in parser_actions: if ( opt.dest in options and (opt.required or opt in mutually_exclusive_required_options) ): parse_args.append(min(opt.option_strings)) value = arg_options[opt.dest] if isinstance(value, (list, tuple)): parse_args += map(str, value) else: parse_args.append(str(value))\nThanks for this report. Yes we should change parse_args to the list of arguments and their values without using the = syntax, e.g. pass ['--foo', '1', '2'] instead of ['--foo=1 2']. All of these calls should be supported: management.call_command('command', foo=[1, 2]) management.call_command('command', '--foo', [1, 2])",
  "created_at": "2020-10-29T18:35:54Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_required_list_option (user_commands.tests.CommandTests)\", \"test_requires_system_checks_empty (user_commands.tests.CommandTests)\"]",
  "PASS_TO_PASS": "[\"test_requires_system_checks_false (user_commands.tests.DeprecationTests)\", \"test_requires_system_checks_true (user_commands.tests.DeprecationTests)\", \"test_requires_system_checks_warning (user_commands.tests.DeprecationTests)\", \"test_get_random_secret_key (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests)\", \"test_call_command_no_checks (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests)\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)\", \"test_check_migrations (user_commands.tests.CommandTests)\", \"test_command (user_commands.tests.CommandTests)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests)\", \"test_command_style (user_commands.tests.CommandTests)\", \"BaseCommand.create_parser() passes kwargs to CommandParser.\", \"test_discover_commands_in_eggs (user_commands.tests.CommandTests)\", \"An unknown command raises CommandError\", \"test_find_command_without_PATH (user_commands.tests.CommandTests)\", \"test_language_preserved (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_const_options (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests)\", \"test_no_translations_deactivate_translations (user_commands.tests.CommandTests)\", \"test_output_transaction (user_commands.tests.CommandTests)\", \"test_outputwrapper_flush (user_commands.tests.CommandTests)\", \"test_required_const_options (user_commands.tests.CommandTests)\", \"test_requires_system_checks_invalid (user_commands.tests.CommandTests)\", \"test_requires_system_checks_specific (user_commands.tests.CommandTests)\", \"test_subparser (user_commands.tests.CommandTests)\", \"test_subparser_dest_args (user_commands.tests.CommandTests)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests)\", \"Exception raised in a command should raise CommandError with\", \"test_disallowed_abbreviated_options (user_commands.tests.CommandRunTests)\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)\", \"test_skip_checks (user_commands.tests.CommandRunTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.664756",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}