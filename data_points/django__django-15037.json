{
  "repo": "django/django",
  "instance_id": "django__django-15037",
  "base_commit": "dab48b7482295956973879d15bfd4d3bb0718772",
  "patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -116,13 +116,17 @@ def table2model(table_name):\n                         extra_params['unique'] = True\n \n                     if is_relation:\n+                        ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop('unique', False) or extra_params.get('primary_key'):\n                             rel_type = 'OneToOneField'\n                         else:\n                             rel_type = 'ForeignKey'\n+                            ref_pk_column = connection.introspection.get_primary_key_column(cursor, ref_db_table)\n+                            if ref_pk_column and ref_pk_column != ref_db_column:\n+                                extra_params['to_field'] = ref_db_column\n                         rel_to = (\n-                            \"self\" if relations[column_name][1] == table_name\n-                            else table2model(relations[column_name][1])\n+                            'self' if ref_db_table == table_name\n+                            else table2model(ref_db_table)\n                         )\n                         if rel_to in known_models:\n                             field_type = '%s(%s' % (rel_type, rel_to)\n",
  "test_patch": "diff --git a/tests/inspectdb/models.py b/tests/inspectdb/models.py\n--- a/tests/inspectdb/models.py\n+++ b/tests/inspectdb/models.py\n@@ -21,6 +21,12 @@ class PeopleMoreData(models.Model):\n     license = models.CharField(max_length=255)\n \n \n+class ForeignKeyToField(models.Model):\n+    to_field_fk = models.ForeignKey(\n+        PeopleMoreData, models.CASCADE, to_field='people_unique',\n+    )\n+\n+\n class DigitsInColumnName(models.Model):\n     all_digits = models.CharField(max_length=11, db_column='123')\n     leading_digit = models.CharField(max_length=11, db_column='4extra')\ndiff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,6 +204,16 @@ def test_attribute_name_not_python_keyword(self):\n             output,\n         )\n \n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_field(self):\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', \"\n+            \"models.DO_NOTHING, to_field='people_unique_id')\",\n+            out.getvalue(),\n+        )\n+\n     def test_digits_column_name_introspection(self):\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n",
  "problem_statement": "Foreign key to a specific field is not handled in inspectdb\nDescription\n\t \n\t\t(last modified by Tim Graham)\n\t \nif you have a DB like that\nCREATE TABLE foo ( id serial primary key, other_id int UNIQUE);\nCREATE TABLE bar (\n\tid serial primary key, other_id int,\n\tconstraint myconst \n\tFOREIGN KEY(other_id) references foo(other_id)\n);\nthe generated model for the bar table will have the other_id be a FK to foo and not foo(other_id).\nI'm attaching a potential fix for this. Sorry I had no time for the UTs.\n",
  "hints_text": "simple patch to handle FK to non pk field.\nit seems I cannot reproduce outside of my own code...\nI will check it!",
  "created_at": "2021-10-30T15:21:38Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_foreign_key_to_field (inspectdb.tests.InspectDBTestCase)\"]",
  "PASS_TO_PASS": "[\"inspectdb --include-views creates models for database views.\", \"test_attribute_name_not_python_keyword (inspectdb.tests.InspectDBTestCase)\", \"test_char_field_db_collation (inspectdb.tests.InspectDBTestCase)\", \"Introspection of column names consist/start with digits (#16536/#17676)\", \"Test introspection of various Django field types\", \"Introspection errors should not crash the command, and the error should\", \"test_json_field (inspectdb.tests.InspectDBTestCase)\", \"By default the command generates models with `Meta.managed = False` (#14305)\", \"Introspection of column names containing special characters,\", \"test_stealth_table_name_filter_option (inspectdb.tests.InspectDBTestCase)\", \"Introspection of table names containing special characters,\", \"inspectdb can inspect a subset of tables by passing the table names as\", \"test_text_field_db_collation (inspectdb.tests.InspectDBTestCase)\", \"test_unique_together_meta (inspectdb.tests.InspectDBTestCase)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.712371",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}