{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-6196",
  "base_commit": "98bb5bf8ebf15fbce960533e5983a71351a1fe3f",
  "patch": "diff --git a/pylint/checkers/utils.py b/pylint/checkers/utils.py\n--- a/pylint/checkers/utils.py\n+++ b/pylint/checkers/utils.py\n@@ -12,16 +12,17 @@\n import re\n import string\n import warnings\n-from collections.abc import Callable, Iterable\n+from collections.abc import Iterable\n from functools import lru_cache, partial\n from re import Match\n-from typing import TypeVar\n+from typing import Callable, TypeVar\n \n import _string\n import astroid.objects\n from astroid import TooManyLevelsError, nodes\n from astroid.context import InferenceContext\n \n+from pylint.checkers.base_checker import BaseChecker\n from pylint.constants import TYPING_TYPE_CHECKS_GUARDS\n \n COMP_NODE_TYPES = (\n@@ -223,6 +224,8 @@\n )\n \n T_Node = TypeVar(\"T_Node\", bound=nodes.NodeNG)\n+CheckerT = TypeVar(\"CheckerT\", bound=BaseChecker)\n+AstCallback = Callable[[CheckerT, T_Node], None]\n \n \n class NoSuchArgumentError(Exception):\n@@ -424,8 +427,16 @@ def overrides_a_method(class_node: nodes.ClassDef, name: str) -> bool:\n     return False\n \n \n-def check_messages(*messages: str) -> Callable:\n-    \"\"\"Decorator to store messages that are handled by a checker method.\"\"\"\n+def only_required_for_messages(*messages: str) -> Callable[[AstCallback], AstCallback]:\n+    \"\"\"Decorator to store messages that are handled by a checker method as an\n+    attribute of the function object.\n+\n+    This information is used by ``ASTWalker`` to decide whether to call the decorated\n+    method or not. If none of the messages is enabled, the method will be skipped.\n+    Therefore, the list of messages must be well maintained at all times!\n+    This decorator only has an effect on ``visit_*`` and ``leave_*`` methods\n+    of a class inheriting from ``BaseChecker`` and implementing ``IAstroidChecker``.\n+    \"\"\"\n \n     def store_messages(func):\n         func.checks_msgs = messages\n@@ -434,6 +445,20 @@ def store_messages(func):\n     return store_messages\n \n \n+def check_messages(*messages: str) -> Callable[[AstCallback], AstCallback]:\n+    \"\"\"Kept for backwards compatibility, deprecated.\n+\n+    Use only_required_for_messages instead, which conveys the intent of the decorator much clearer.\n+    \"\"\"\n+    warnings.warn(\n+        \"utils.check_messages will be removed in favour of calling \"\n+        \"utils.only_required_for_messages in pylint 3.0\",\n+        DeprecationWarning,\n+    )\n+\n+    return only_required_for_messages(*messages)\n+\n+\n class IncompleteFormatString(Exception):\n     \"\"\"A format string ended in the middle of a format specifier.\"\"\"\n \n",
  "test_patch": "diff --git a/tests/checkers/unittest_utils.py b/tests/checkers/unittest_utils.py\n--- a/tests/checkers/unittest_utils.py\n+++ b/tests/checkers/unittest_utils.py\n@@ -473,3 +473,18 @@ def test_deprecation_is_inside_lambda() -> None:\n     with pytest.warns(DeprecationWarning) as records:\n         utils.is_inside_lambda(nodes.NodeNG())\n         assert len(records) == 1\n+\n+\n+def test_deprecation_check_messages() -> None:\n+    with pytest.warns(DeprecationWarning) as records:\n+\n+        class Checker:  # pylint: disable=unused-variable\n+            @utils.check_messages(\"my-message\")\n+            def visit_assname(self, node):\n+                pass\n+\n+        assert len(records) == 1\n+        assert (\n+            records[0].message.args[0]\n+            == \"utils.check_messages will be removed in favour of calling utils.only_required_for_messages in pylint 3.0\"\n+        )\ndiff --git a/tests/utils/unittest_ast_walker.py b/tests/utils/unittest_ast_walker.py\n--- a/tests/utils/unittest_ast_walker.py\n+++ b/tests/utils/unittest_ast_walker.py\n@@ -8,7 +8,7 @@\n \n import astroid\n \n-from pylint.checkers.utils import check_messages\n+from pylint.checkers.utils import only_required_for_messages\n from pylint.utils import ASTWalker\n \n \n@@ -24,23 +24,23 @@ class Checker:\n         def __init__(self) -> None:\n             self.called: set[str] = set()\n \n-        @check_messages(\"first-message\")\n+        @only_required_for_messages(\"first-message\")\n         def visit_module(self, module):  # pylint: disable=unused-argument\n             self.called.add(\"module\")\n \n-        @check_messages(\"second-message\")\n+        @only_required_for_messages(\"second-message\")\n         def visit_call(self, module):\n             raise NotImplementedError\n \n-        @check_messages(\"second-message\", \"third-message\")\n+        @only_required_for_messages(\"second-message\", \"third-message\")\n         def visit_assignname(self, module):  # pylint: disable=unused-argument\n             self.called.add(\"assignname\")\n \n-        @check_messages(\"second-message\")\n+        @only_required_for_messages(\"second-message\")\n         def leave_assignname(self, module):\n             raise NotImplementedError\n \n-    def test_check_messages(self) -> None:\n+    def test_only_required_for_messages(self) -> None:\n         linter = self.MockLinter(\n             {\"first-message\": True, \"second-message\": False, \"third-message\": True}\n         )\n@@ -55,7 +55,7 @@ class Checker:\n             def __init__(self) -> None:\n                 self.called = False\n \n-            @check_messages(\"first-message\")\n+            @only_required_for_messages(\"first-message\")\n             def visit_assname(self, node):  # pylint: disable=unused-argument\n                 self.called = True\n \n",
  "problem_statement": "Use, misuse and confusion of ``@check_messages`` decorator\n### Current problem\n\nThe work on #5953 showed that specifically enabling just a single message is sometimes not working as expected.\r\nThis is due to either missing message declaration in a checkers ``msgs`` attribute or the incorrect usage of the ``@check_messages`` decorator.\r\nIdeally I would like to implement a new, optional checker aimed at Pylint core development and custom checker development.\r\nThis checker would focus on correct message declaration and handling. \r\nI already started working on it, but noticed that there is especially quite some problems with the ``@check_messages`` decorator. I totally understand that, because while being extensively used across all checker classes, there is not a single word on its purpose and effect in the documentation. Its docstring is also not really helpful, you have to dig deeper into the codebase to understand what it does.\n\n### Desired solution\n\nBefore continuing my work on the new checker, I want to address and clarify some questions about the intended use of ``@check_messages``. \r\nAfter that this issue can be closed with a PR that extends the documentation, and if necessary some code changes.\r\n\r\nA brief explanation on what ``@check_messages`` does:\r\nIt helps the ``ASTWalker`` decide whether a callback for the current node type should be called or not. \r\nThis is done by adding the list of messages passed in as a ``checks_messages`` attribute on method object.\r\nWhen a checker is added to the ``ASTWalker`` instance, it loops over all of its methods. Every method starting with ``visit_`` or ``leave_`` is now checked for the ``checks_messages`` attribute:\r\n* if the attribute does not exist, this method will be added to the list of callbacks\r\n* if it exists and at least one message of the ``checks_messages`` list is enabled, this method will be added to the list of callbacks\r\n* otherwise, it will not be added to the list of callbacks and will therefore **not** be executed\r\n\r\nEssentially this means:\r\n1. The main (and only) intent of the ``@check_messages`` decorator is to improve performance\r\n2. Placing the ``@check_messages`` decorator on any method which is not a \"top level callback\" (methods starting with ``visit_`` or ``leave_`` does not have any effect\r\n3. Forgetting to apply the ``@check_messages`` decorator has no negative functional consequences, it only affects performance (which, of course, is always an issue)\r\n4. Applying the decorator but forgetting to add messages that are emitted from this callback can lead to false negatives: if none of the messages actually included in the decorator are enabled, it will not be called\r\n5. Applying the decorator to a callback that not only emits messages but also does other things can have nasty side effects (false positives, false negatives, crashes)\r\n\r\n**What I want to gain a consensus on:**\r\n1. Do we want to keep the name ``check_messages``? I don't think it really conveys the effect it has on the decorated method.\r\n2. What shall we regard as best practice for this decorator? Should every callback be decorated and the list of messages must always be correct and consistent, or should we rather advise to use it only in cases where we expect a significant speedup when this callback is omitted?\r\n3. Do we want to keep the restriction that this decorator only has an effect on the \"top level callbacks\"? Seeing that a lot of those callbacks can emit quite a lot of messages and the logic for the checks is often split up into several subfunctions, it would be more flexible and also more robust (as it is easier to keep track of the messages that need to be included in the decorator) if one could apply it on the subfunctions rather than on the top level callback.\r\n\r\nLooking over the code base there are quite a lot of places where the decorator is not used correctly:\r\n* used with simply passing in all messages (which has the same effect as just omitting it): ``@check_messages(*MSGS)``\r\n* used on methods that are not a callback (which has no effect)\r\n* Used, but not including all messages possibly emitted by the callback\n\n### Additional context\n\n_No response_\n",
  "hints_text": "Let me give an example on this point, as I think it is the most problematic:\r\n\r\n> Applying the decorator to a callback that not only emits messages but also does other things can have nasty side effects (false positives, false negatives, crashes)\r\n\r\nThe checker I wanted to prepare has a good example for that. The relevant parts can be stripped down to this:\r\n\r\n```python\r\nclass MessagesChecker(BaseChecker):\r\n    \"\"\"Checks if messages are handled correctly in checker classes.\"\"\"\r\n\r\n    __implements__ = (IAstroidChecker,)\r\n    name = \"messages_checker\"\r\n\r\n    def __init__(self, linter: PyLinter) -> None:\r\n        super().__init__(linter)\r\n        # List of all messages defined in the checker's msgs attribute\r\n        self._defined_messages = None\r\n\r\n    def visit_classdef(self, node: nodes.ClassDef) -> None:\r\n        if not _is_checker_class(node):\r\n            return\r\n        self._defined_messages = _get_defined_messages(node)\r\n\r\n    @check_messages(\"undefined-message\")\r\n    def visit_call(self, node: nodes.Call) -> None:\r\n        ... # omitted: check if this is a ``self.add_message`` call and extract the msgid\r\n        if msgid not in self._defined_messages:\r\n            self.add_message(\"undefined-message\", node=node, args=(msgid,))\r\n```\r\n``visit_classdef`` does not emit messages itself, so it is not decorated with ``@check_messages``. But it sets the ``self._defined_messages`` attribute, which is needed by ``visit_call``.\r\n\r\nNow imagine a new message is added, for example \"inconsistent-message-ids\", which is checked from the ``visit_classdef`` method. One could be very tempted to now apply the ``@check_messages`` decorator to ``visit_classdef``:\r\n\r\n```python\r\n    \"\"\"Checks if messages are handled correctly in checker classes.\"\"\"\r\n\r\n    __implements__ = (IAstroidChecker,)\r\n    name = \"messages_checker\"\r\n\r\n    def __init__(self, linter: PyLinter) -> None:\r\n        super().__init__(linter)\r\n        # List of all messages defined in the checker's msgs attribute\r\n        self._defined_messages: Dict[Str, nodes.Dict] = {}\r\n\r\n    @check_messages(\"inconsistent-message-ids\")  # <-- ADDED\r\n    def visit_classdef(self, node: nodes.ClassDef) -> None:\r\n        if not _is_checker_class(node):\r\n            return\r\n        self._defined_messages = _get_defined_messages(node)\r\n        self._check_inconsistent_message_ids()  # <-- ADDED\r\n\r\n    @check_messages(\"undefined-message\")\r\n    def visit_call(self, node: nodes.Call) -> None:\r\n        ... # omitted: check if this is a ``self.add_message`` call and extract the msgid\r\n        if msgid not in self._defined_messages:\r\n            self.add_message(\"undefined-message\", node=node, args=(msgid,))\r\n```\r\nLooks good, doesn't it? \r\nBut if you decide you don't want to be bothered by the new message and run with ``--disable=inconsistent-message-ids``, you will be greeted with:\r\n```shell\r\nTypeError: argument of type 'NoneType' is not iterable\r\n```\r\n\r\nSo, what happened? By adding the ``@check_messages`` decorator to ``visit_classdef``, we told ``ASTWalker`` that he can safely skip this callback if none of the messages passed into it is enabled, leaving ``self._defined_messages`` on its default ``None`` value. \r\n\r\n\r\n**My proposal:**\r\nIt would be best to rename ``check_messages`` to something like ``only_required_for``.\r\nIt very clearly conveys *where this decorator can be placed*, and maybe even gives a small hint *what the effect of this decorator may be*.\r\nEvery developer would be a lot more hesitant to just add ``@only_required_for(\"inconsistent-message-ids\")`` to any existing code as in the example above, while ``@check_messages(\"inconsistent-message-ids\")`` seemed the reasonable thing to do.\r\n\r\nWe could do this in steps:\r\n1. Rename ``check_messages`` to ``only_required_for`` with a meaningful docstring, but keep ``check_messages`` as alias. This way we do not have to fix all occurrences in the code base in a single PR and also remain compatible with custom checkers users may have wrote that still use ``check_messages``.\r\n2. Add clear documentation what ``only_required_for`` does in [How to write a Checker](https://pylint.pycqa.org/en/latest/how_tos/custom_checkers.html#how-to-write-a-checker)\r\n3. Replace and clean up the ``@check_messages`` decorators on existing checkers - we could do one checker per PR to ease reviews.\r\n4. Issue a ``DeprecationWarning`` if ``check_messages`` is used instead of ``only_required_for``\r\n\r\nWhat do you think?\r\n\r\n\n@DudeNr33 Thanks for this extensive write-up. I agree with most points here and I think this can/is indeed problematic.\r\n\r\nI had one question though: have you checked how much of a performance benefit this actually gives? Even if we rename to `only_required_for` it is easy to miss it in `visit_` methods of 100+ lines (which there are). I think knowing the actual performance benefit would be important to know if we should even keep supporting this functionality or just deprecate it altogether.\n> @DudeNr33 Thanks for this extensive write-up.\r\n\r\nYeah that's very useful I was using it without understanding it properly personally. It probably contributed to hard to debug issues along the way.\r\n\r\nI like the proposed steps. \r\n\r\nIf the performance improvment is worth it, we could also create our own internal checker to verify that it's on a function when there is no side effectand conversely  that there is no side effects if it's on a function.\n> I had one question though: have you checked how much of a performance benefit this actually gives\r\n\r\nNo, I haven't. The question is what we should measure here. \r\nMeasuring the impact of disabling just a single message could be done with a script. But I already saw that a lot of times many messages are not properly included in existing ``@check_messages`` decorators, so the results would not really mean that much.\r\nProbably more interesting would be the performance gains for users who run ``pylint`` with just specific categories, for example just \"-E\", or who disable specific message categories. \r\nI wrote a small script to get a first estimate (it only runs ``pylint`` once, so no real statistics...):\r\n\r\n**With check_messages active:**\r\nDisabled category: E - Elapsed time: 19.727s (28 callbacks ignored)\r\nDisabled category: F - Elapsed time: 15.952s (4 callbacks ignored)\r\nDisabled category: R - Elapsed time: 6.632s  (10 callbacks ignored)\r\nDisabled category: C - Elapsed time: 15.851s (15 callbacks ignored)\r\nDisabled category: W - Elapsed time: 14.878s (38 callbacks ignored)\r\nDisabled category: I - Elapsed time: 15.685s (4 callbacks ignored)\r\n\r\n**With check_messages replaced with a dummy:**\r\nDisabled category: E - Elapsed time: 20.557s\r\nDisabled category: F - Elapsed time: 15.454s\r\nDisabled category: R - Elapsed time: 6.865s\r\nDisabled category: C - Elapsed time: 15.518s\r\nDisabled category: W - Elapsed time: 15.054s\r\nDisabled category: I - Elapsed time: 15.827s\r\n\r\nThe reason we also have similar speedups in the second time is that if none of the messages a checker has is enabled, the whole checker will be ignored - this is done without relying on ``check_messages``, but by inspecting the ``msgs`` attribute directly.\r\n\r\nWe can see that the difference between the two runs is marginal. As stated above a lot of ``@check_messages`` decorator are missing actually emittable messages this callback has, so I would expect the differences to be even less if we would put in the effort to fix the ``check_messages`` calls.\r\n\r\nIf we want to aim for performance I guess it would be more promising to write the ``only_required_for`` decorator in such a way it can be applied to any function/method. That way we could determine the most expensive subfunctions/checks by profiling and then make them ``skippable``.\r\n\r\nFor completeness, here the quick'n'dirty script:\r\n```python\r\nimport time\r\nfrom contextlib import suppress\r\nfrom pathlib import Path\r\n\r\nfrom pylint.lint import Run\r\n\r\nif __name__ == \"__main__\":\r\n    categories = [\"E\", \"F\", \"R\", \"C\", \"W\", \"I\"]\r\n    for category in categories:\r\n        start = time.perf_counter()\r\n        with suppress(SystemExit):\r\n            Run(\r\n                [\r\n                    str(Path(__file__).parent.parent / \"pylint\"),\r\n                    \"--enable=all\",\r\n                    f\"--disable={category}\",\r\n                    \"--output-format=pylint.testutils.MinimalTestReporter\",\r\n                ]\r\n            )\r\n        end = time.perf_counter()\r\n        print(f\"Disabled category: {category} - Elapsed time: {end-start:0.3f}s\")\r\n```\r\n\nHmm, since the documentation project is likely to find all these issues it is very likely that all `check_messages` call will be correct after that project has finished.\r\n\r\nWhat about creating a `must_always_be_checked` decorator that we can add to `visit_` or `leave_` calls with side-effects? That way we don't accidentally add the decorator to functions that don't have them but keep the possible performance benefits that these can create. The speed up for disabling `R` is quite significant.\r\n\nThe speed-up when running with ``--disable=R`` comes mainly from disabling whole checkers (namely ``SimilarChecker``):\r\n\r\n> The reason we also have similar speedups in the second time is that if none of the messages a checker has is enabled, the whole checker will be ignored - this is done without relying on check_messages, but by inspecting the msgs attribute directly.\r\n\r\nCan you give an example for ``must_always_be_checked``? Would this be an alternative to ``only_required_for``/``check_messages``, or an addition? \n> Can you give an example for `must_always_be_checked`? Would this be an alternative to `only_required_for`/`check_messages`, or an addition?\r\n\r\n> 5. Applying the decorator to a callback that not only emits messages but also does other things can have nasty side effects (false positives, false negatives, crashes)\r\n\r\nThis was mostly in relation to the above point. I think that in the `NamesConsumer` there might be `visits` that set up stuff for later?\nThere might be a benefit to separating messages inside checker to reduce this complexity. For example the \"basic\" checker is dispatched between multiple classes so it seems to be possible.\r\n\r\nhttps://github.com/PyCQA/pylint/blob/main/pylint/checkers/base/basic_checker.py#L36\r\nhttps://github.com/PyCQA/pylint/blob/main/pylint/checkers/base/basic_checker.py#L105\r\nhttps://github.com/PyCQA/pylint/blob/main/pylint/checkers/base/comparison_checker.py#L24\r\n\r\nThere is a benefit with doing checks only once instead of doing it in each class but if it's possible to separate them, we're creating a mess by putting two independent check in the same ``visit_*``. Say ``visit_compare`` in the comparison checker, could probably be in multiple class because check nan, singleton and literal comparison looks independent (https://github.com/PyCQA/pylint/blob/main/pylint/checkers/base/comparison_checker.py#L245)\nA counterpoint to that is that many of these `visit_` calls will then infer values. Depending on the order and difficulty of inference these calls might fall outside of the cache and become rather expensive if separated into different classes.\r\n\r\nI explored passing a pre-inferred value to `visit_` calls but never followed up on it. \n> There is a benefit with doing checks only once instead of doing it in each class but if it's possible to separate them, we're creating a mess by putting two independent check in the same ``visit_*``\r\n\r\nI agree, bloating the ``visit_*`` method itself is not good for maintainability.\r\nBut in this case I would prefer splitting the checks for each message in subfunctions, as can bee seen in the first three lines of the ``visit_compare`` you mentioned.\r\n\r\nThis, of course, makes it harder to keep track of all messages that can be possibly emitted by this ``visit_*`` method.\r\nIf we want to keep ``check_messages`` or some renamed variant of it for possible performance gains, I would prefer to make it work on any method of a checker, not just ``visit_*`` or ``leave_*``. And then apply it only to the subfunctions, and not the ``visit_*`` callback itself.\r\n\r\n\r\n> For example the \"basic\" checker is dispatched between multiple classes so it seems to be possible.\r\n\r\nI am confused on what the benefit of this ``_BasicChecker`` class is besides not having to repeat the checker ``name`` and ``__implements__`` in each subclass. \n> I am confused on what the benefit of this _BasicChecker class is besides not having to repeat the checker name and __implements__ in each subclass.\r\n\r\nApparently nothing else, I opened a MR to check with the full test suites (#6091).\nShould we vote for the future of ``check_messages``?\r\n\r\n- ❤️ leave it as is, just check and correct the usage of it across the codebase\r\n- 🚀 rename it to ``only_required_for`` and check and correct usage of it\r\n- 🎉 remove its usage entirely and issue ``DeprecationWarning`` if it is applied\r\n\r\nMaybe also @cdce8p and @jacobtylerwalls want to cast their vote on this?\r\nPersonally I am torn between option 2 and 3 because the performance benefit seems marginal, but I'm still a bit more in favour of renaming. \nAre we sure the renaming (and thus `DeprecationWarning` on the old name) are worth the hassle?\nOh, it's public? I didn't realize that. Is it documented anywhere? I didn't realize we were talking about deprecation warnings.\nWe need some sort of definition of the public API footprint. I wouldn't know where to get that info.\n> Oh, it's public? I didn't realize that. Is it documented anywhere? I didn't realize we were talking about deprecation warnings.\r\n\r\nAt this point I don't know: but it is an non-underscored function in `utils`. I would consider it highly likely that some (old) plugin has imported it. Especially since most plugins will likely just copy a basic checker from `pylint` when they start working on their checkers. It's likely that they just copied this as well.\n> It's likely that they just copied this as well.\r\n\r\nYep: https://sourcegraph.com/github.com/chromium/chromium/-/blob/third_party/pylint/pylint/checkers/python3.py\r\n\r\nAlright. I'm changing my vote to \"let's document this in the development guide somewhere\"\nI'm voting that as well. I do think the suggested name is much better, but I am not sure if the hassle of changing it is worth it.\n> We need some sort of definition of the public API footprint.\r\n\r\nThe public API is/was undocumented so it's always a guess as to how much use there is in downstream libraries. For example confidences could be refactored to an ordered enum and save us a lot of trouble but I **suppose** it's used somewhere and we can't just do that. Creating such a document would be nice but we'll still need to guess what was public API because we could be wrong and pointing to this document when we break a widely used API (https://github.com/PyCQA/pylint/issues/4399) is not going to save us :) \r\n\r\n\r\n>  > It's likely that they just copied this as well.\r\n\r\n> Yep: https://sourcegraph.com/github.com/chromium/chromium/-/blob/third_party/pylint/pylint/checkers/python3.py\r\n\r\nThe python3 checker is not based on pylint, it's pylint's code directly (we removed it from pylint a while ago). The doc do not talk about the decorator : https://pylint.pycqa.org/en/latest/how_tos/custom_checkers.html, nor does the examples uses it : https://github.com/PyCQA/pylint/tree/main/examples. Of course it's still possible that someone at some point copy pasted one of our checker with the decorator in it so we should be safe about it.\r\n\r\nThe documentation project for each message as shown that there are a lot of issue with this decorator, maybe 25% of message don't work alone if other messages are disabled. I'm not sure keeping the name is a good idea when it creates so much hard to debug issues in our own code (before @DudeNr33 had the good idea to check what it actually does 😄). It's also going to create problems in downstream code where it's used imo.\r\n\r\nSo I think we should rename it to ``only_required_for``, check correct usage in our code, and deprecate ``check_messages`` with a warning explaining why it's a dangerous decorator. Then we remove ``check_messages`` in 3.0. It's a lot of work but probably less than having to explain it to newcomers or downstream library maintainers and debugging the issues it creates.\nSorry for being so indecisive! A self-documenting name is probably less effort than writing a hard-to-understand paragraph people might not find. So let's do the rename/deprecation warnings 👍🏻 ",
  "created_at": "2022-04-05T17:52:58Z",
  "version": "2.14",
  "FAIL_TO_PASS": "[\"tests/checkers/unittest_utils.py::testIsBuiltin[min-True]\", \"tests/checkers/unittest_utils.py::testIsBuiltin[__builtins__-True]\", \"tests/checkers/unittest_utils.py::testIsBuiltin[__path__-False]\", \"tests/checkers/unittest_utils.py::testIsBuiltin[__file__-False]\", \"tests/checkers/unittest_utils.py::testIsBuiltin[whatever-False]\", \"tests/checkers/unittest_utils.py::testIsBuiltin[mybuiltin-False]\", \"tests/checkers/unittest_utils.py::testGetArgumentFromCallError[foo(3)-kw0]\", \"tests/checkers/unittest_utils.py::testGetArgumentFromCallError[foo(one=a,\", \"tests/checkers/unittest_utils.py::testGetArgumentFromCallExists[foo(bar=3)-kw0]\", \"tests/checkers/unittest_utils.py::testGetArgumentFromCallExists[foo(a,\", \"tests/checkers/unittest_utils.py::testGetArgumentFromCall\", \"tests/checkers/unittest_utils.py::test_error_of_type\", \"tests/checkers/unittest_utils.py::test_node_ignores_exception\", \"tests/checkers/unittest_utils.py::test_is_subclass_of_node_b_derived_from_node_a\", \"tests/checkers/unittest_utils.py::test_is_subclass_of_node_b_not_derived_from_node_a\", \"tests/checkers/unittest_utils.py::test_is_subclass_of_not_classdefs\", \"tests/checkers/unittest_utils.py::test_parse_format_method_string\", \"tests/checkers/unittest_utils.py::test_inherit_from_std_ex_recursive_definition\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_simple\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_if_simple\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_if_elseif_else\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_while\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_while_else\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_for\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_for_else\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_try\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_try_except_else\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_try_except_finally\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_try_except_else_finally\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_with\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_method\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_decorator\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_class\", \"tests/checkers/unittest_utils.py::test_get_node_last_lineno_combined\", \"tests/checkers/unittest_utils.py::test_if_sys_guard\", \"tests/checkers/unittest_utils.py::test_if_typing_guard\", \"tests/checkers/unittest_utils.py::test_is_empty_literal\", \"tests/checkers/unittest_utils.py::test_deprecation_is_inside_lambda\", \"tests/checkers/unittest_utils.py::test_deprecation_check_messages\", \"tests/utils/unittest_ast_walker.py::TestASTWalker::test_only_required_for_messages\", \"tests/utils/unittest_ast_walker.py::TestASTWalker::test_deprecated_methods\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "680edebc686cad664bbed934a490aeafa775f163",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.912207",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}