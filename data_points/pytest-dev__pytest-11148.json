{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-11148",
  "base_commit": "2f7415cfbc4b6ca62f9013f1abd27136f46b9653",
  "patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -523,6 +523,8 @@ def import_path(\n \n     if mode is ImportMode.importlib:\n         module_name = module_name_from_path(path, root)\n+        with contextlib.suppress(KeyError):\n+            return sys.modules[module_name]\n \n         for meta_importer in sys.meta_path:\n             spec = meta_importer.find_spec(module_name, [str(path.parent)])\n",
  "test_patch": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1315,3 +1315,38 @@ def test_stuff():\n     )\n     res = pytester.runpytest()\n     res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+\n+\n+def test_doctest_and_normal_imports_with_importlib(pytester: Pytester) -> None:\n+    \"\"\"\n+    Regression test for #10811: previously import_path with ImportMode.importlib would\n+    not return a module if already in sys.modules, resulting in modules being imported\n+    multiple times, which causes problems with modules that have import side effects.\n+    \"\"\"\n+    # Uses the exact reproducer form #10811, given it is very minimal\n+    # and illustrates the problem well.\n+    pytester.makepyfile(\n+        **{\n+            \"pmxbot/commands.py\": \"from . import logging\",\n+            \"pmxbot/logging.py\": \"\",\n+            \"tests/__init__.py\": \"\",\n+            \"tests/test_commands.py\": \"\"\"\n+                import importlib\n+                from pmxbot import logging\n+\n+                class TestCommands:\n+                    def test_boo(self):\n+                        assert importlib.import_module('pmxbot.logging') is logging\n+                \"\"\",\n+        }\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        addopts=\n+            --doctest-modules\n+            --import-mode importlib\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_subprocess()\n+    result.stdout.fnmatch_lines(\"*1 passed*\")\ndiff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -7,6 +7,7 @@\n from types import ModuleType\n from typing import Any\n from typing import Generator\n+from typing import Iterator\n \n import pytest\n from _pytest.monkeypatch import MonkeyPatch\n@@ -282,29 +283,36 @@ def test_invalid_path(self, tmp_path: Path) -> None:\n             import_path(tmp_path / \"invalid.py\", root=tmp_path)\n \n     @pytest.fixture\n-    def simple_module(self, tmp_path: Path) -> Path:\n-        fn = tmp_path / \"_src/tests/mymod.py\"\n+    def simple_module(\n+        self, tmp_path: Path, request: pytest.FixtureRequest\n+    ) -> Iterator[Path]:\n+        name = f\"mymod_{request.node.name}\"\n+        fn = tmp_path / f\"_src/tests/{name}.py\"\n         fn.parent.mkdir(parents=True)\n         fn.write_text(\"def foo(x): return 40 + x\", encoding=\"utf-8\")\n-        return fn\n+        module_name = module_name_from_path(fn, root=tmp_path)\n+        yield fn\n+        sys.modules.pop(module_name, None)\n \n-    def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n+    def test_importmode_importlib(\n+        self, simple_module: Path, tmp_path: Path, request: pytest.FixtureRequest\n+    ) -> None:\n         \"\"\"`importlib` mode does not change sys.path.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n         assert module.foo(2) == 42  # type: ignore[attr-defined]\n         assert str(simple_module.parent) not in sys.path\n         assert module.__name__ in sys.modules\n-        assert module.__name__ == \"_src.tests.mymod\"\n+        assert module.__name__ == f\"_src.tests.mymod_{request.node.name}\"\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n-    def test_importmode_twice_is_different_module(\n+    def test_remembers_previous_imports(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n-        \"\"\"`importlib` mode always returns a new module.\"\"\"\n+        \"\"\"`importlib` mode called remembers previous module (#10341, #10811).\"\"\"\n         module1 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n         module2 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n-        assert module1 is not module2\n+        assert module1 is module2\n \n     def test_no_meta_path_found(\n         self, simple_module: Path, monkeypatch: MonkeyPatch, tmp_path: Path\n@@ -317,6 +325,9 @@ def test_no_meta_path_found(\n         # mode='importlib' fails if no spec is found to load the module\n         import importlib.util\n \n+        # Force module to be re-imported.\n+        del sys.modules[module.__name__]\n+\n         monkeypatch.setattr(\n             importlib.util, \"spec_from_file_location\", lambda *args: None\n         )\n",
  "problem_statement": "Module imported twice under import-mode=importlib\nIn pmxbot/pmxbot@7f189ad, I'm attempting to switch pmxbot off of pkg_resources style namespace packaging to PEP 420 namespace packages. To do so, I've needed to switch to `importlib` for the `import-mode` and re-organize the tests to avoid import errors on the tests.\r\n\r\nYet even after working around these issues, the tests are failing when the effect of `core.initialize()` doesn't seem to have had any effect.\r\n\r\nInvestigating deeper, I see that initializer is executed and performs its actions (setting a class variable `pmxbot.logging.Logger.store`), but when that happens, there are two different versions of `pmxbot.logging` present, one in `sys.modules` and another found in `tests.unit.test_commands.logging`:\r\n\r\n```\r\n=========================================================================== test session starts ===========================================================================\r\nplatform darwin -- Python 3.11.1, pytest-7.2.0, pluggy-1.0.0\r\ncachedir: .tox/python/.pytest_cache\r\nrootdir: /Users/jaraco/code/pmxbot/pmxbot, configfile: pytest.ini\r\nplugins: black-0.3.12, mypy-0.10.3, jaraco.test-5.3.0, checkdocs-2.9.0, flake8-1.1.1, enabler-2.0.0, jaraco.mongodb-11.2.1, pmxbot-1122.14.3.dev13+g7f189ad\r\ncollected 421 items / 180 deselected / 241 selected                                                                                                                       \r\nrun-last-failure: rerun previous 240 failures (skipped 14 files)\r\n\r\ntests/unit/test_commands.py E\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\ncls = <class 'tests.unit.test_commands.TestCommands'>\r\n\r\n    @classmethod\r\n    def setup_class(cls):\r\n        path = os.path.dirname(os.path.abspath(__file__))\r\n        configfile = os.path.join(path, 'testconf.yaml')\r\n        config = pmxbot.dictlib.ConfigDict.from_yaml(configfile)\r\n        cls.bot = core.initialize(config)\r\n>       logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\nE       AttributeError: type object 'Logger' has no attribute 'store'\r\n\r\ntests/unit/test_commands.py:37: AttributeError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /Users/jaraco/code/pmxbot/pmxbot/tests/unit/test_commands.py(37)setup_class()\r\n-> logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\n(Pdb) logging.Logger\r\n<class 'pmxbot.logging.Logger'>\r\n(Pdb) logging\r\n<module 'pmxbot.logging' from '/Users/jaraco/code/pmxbot/pmxbot/pmxbot/logging.py'>\r\n(Pdb) import sys\r\n(Pdb) sys.modules['pmxbot.logging']\r\n<module 'pmxbot.logging' from '/Users/jaraco/code/pmxbot/pmxbot/pmxbot/logging.py'>\r\n(Pdb) sys.modules['pmxbot.logging'] is logging\r\nFalse\r\n```\r\n\r\nI haven't yet made a minimal reproducer, but I wanted to first capture this condition.\r\n\n",
  "hints_text": "In pmxbot/pmxbot@3adc54c, I've managed to pare down the project to a bare minimum reproducer. The issue only happens when `import-mode=importlib` and `doctest-modules` and one of the modules imports another module.\r\n\r\nThis issue may be related to (or same as) #10341.\r\n\r\nI think you'll agree this is pretty basic behavior that should be supported.\r\n\r\nI'm not even aware of a good workaround.\nHey @jaraco, thanks for the reproducer! \r\n\r\nI found the problem, will open a PR shortly.",
  "created_at": "2023-06-29T00:04:33Z",
  "version": "8.0",
  "FAIL_TO_PASS": "[\"testing/test_pathlib.py::TestImportPath::test_remembers_previous_imports\", \"testing/acceptance_test.py::test_doctest_and_normal_imports_with_importlib\"]",
  "PASS_TO_PASS": "[\"testing/acceptance_test.py::TestGeneralUsage::test_docstring_on_hookspec\", \"testing/acceptance_test.py::TestInvocationVariants::test_invoke_with_invalid_type\", \"testing/acceptance_test.py::TestInvocationVariants::test_invoke_plugin_api\", \"testing/acceptance_test.py::TestInvocationVariants::test_core_backward_compatibility\", \"testing/acceptance_test.py::TestInvocationVariants::test_has_plugin\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[*.py-foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[*.py-bar/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[test_*.py-foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[tests/*.py-tests/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[/c/*.py-/c/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[/c/foo/*.py-/c/foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[tests/**/test*.py-tests/foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[tests/**/doc/test*.py-tests/foo/bar/doc/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[tests/**/doc/**/test*.py-tests/foo/doc/bar/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching_abspath\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[*.py-foo.pyc]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[*.py-foo/foo.pyc]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/*.py-foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[/c/*.py-/d/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[/c/foo/*.py-/d/foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/**/test*.py-tests/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/**/test*.py-foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/**/doc/test*.py-tests/foo/bar/doc/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/**/doc/test*.py-tests/foo/bar/test_foo.py]\", \"testing/test_pathlib.py::TestImportPath::test_smoke_test\", \"testing/test_pathlib.py::TestImportPath::test_import_path_missing_file\", \"testing/test_pathlib.py::TestImportPath::test_renamed_dir_creates_mismatch\", \"testing/test_pathlib.py::TestImportPath::test_messy_name\", \"testing/test_pathlib.py::TestImportPath::test_dir\", \"testing/test_pathlib.py::TestImportPath::test_a\", \"testing/test_pathlib.py::TestImportPath::test_b\", \"testing/test_pathlib.py::TestImportPath::test_c\", \"testing/test_pathlib.py::TestImportPath::test_d\", \"testing/test_pathlib.py::TestImportPath::test_import_after\", \"testing/test_pathlib.py::TestImportPath::test_check_filepath_consistency\", \"testing/test_pathlib.py::TestImportPath::test_issue131_on__init__\", \"testing/test_pathlib.py::TestImportPath::test_ensuresyspath_append\", \"testing/test_pathlib.py::TestImportPath::test_invalid_path\", \"testing/test_pathlib.py::TestImportPath::test_importmode_importlib\", \"testing/test_pathlib.py::TestImportPath::test_no_meta_path_found\", \"testing/test_pathlib.py::test_resolve_package_path\", \"testing/test_pathlib.py::test_package_unimportable\", \"testing/test_pathlib.py::test_access_denied_during_cleanup\", \"testing/test_pathlib.py::test_long_path_during_cleanup\", \"testing/test_pathlib.py::test_get_extended_length_path_str\", \"testing/test_pathlib.py::test_suppress_error_removing_lock\", \"testing/test_pathlib.py::test_bestrelpath\", \"testing/test_pathlib.py::test_commonpath\", \"testing/test_pathlib.py::test_visit_ignores_errors\", \"testing/test_pathlib.py::TestImportLibMode::test_importmode_importlib_with_dataclass\", \"testing/test_pathlib.py::TestImportLibMode::test_importmode_importlib_with_pickle\", \"testing/test_pathlib.py::TestImportLibMode::test_importmode_importlib_with_pickle_separate_modules\", \"testing/test_pathlib.py::TestImportLibMode::test_module_name_from_path\", \"testing/test_pathlib.py::TestImportLibMode::test_insert_missing_modules\", \"testing/test_pathlib.py::TestImportLibMode::test_parent_contains_child_module_attribute\", \"testing/acceptance_test.py::TestGeneralUsage::test_config_error\", \"testing/acceptance_test.py::TestGeneralUsage::test_root_conftest_syntax_error\", \"testing/acceptance_test.py::TestGeneralUsage::test_early_hook_error_issue38_1\", \"testing/acceptance_test.py::TestGeneralUsage::test_early_hook_configure_error_issue38\", \"testing/acceptance_test.py::TestGeneralUsage::test_file_not_found\", \"testing/acceptance_test.py::TestGeneralUsage::test_file_not_found_unconfigure_issue143\", \"testing/acceptance_test.py::TestGeneralUsage::test_config_preparse_plugin_option\", \"testing/acceptance_test.py::TestGeneralUsage::test_early_load_setuptools_name[True]\", \"testing/acceptance_test.py::TestGeneralUsage::test_early_load_setuptools_name[False]\", \"testing/acceptance_test.py::TestGeneralUsage::test_assertion_rewrite[prepend]\", \"testing/acceptance_test.py::TestGeneralUsage::test_assertion_rewrite[append]\", \"testing/acceptance_test.py::TestGeneralUsage::test_assertion_rewrite[importlib]\", \"testing/acceptance_test.py::TestGeneralUsage::test_nested_import_error\", \"testing/acceptance_test.py::TestGeneralUsage::test_not_collectable_arguments\", \"testing/acceptance_test.py::TestGeneralUsage::test_better_reporting_on_conftest_load_failure\", \"testing/acceptance_test.py::TestGeneralUsage::test_early_skip\", \"testing/acceptance_test.py::TestGeneralUsage::test_issue88_initial_file_multinodes\", \"testing/acceptance_test.py::TestGeneralUsage::test_issue93_initialnode_importing_capturing\", \"testing/acceptance_test.py::TestGeneralUsage::test_conftest_printing_shows_if_error\", \"testing/acceptance_test.py::TestGeneralUsage::test_issue109_sibling_conftests_not_loaded\", \"testing/acceptance_test.py::TestGeneralUsage::test_directory_skipped\", \"testing/acceptance_test.py::TestGeneralUsage::test_multiple_items_per_collector_byid\", \"testing/acceptance_test.py::TestGeneralUsage::test_skip_on_generated_funcarg_id\", \"testing/acceptance_test.py::TestGeneralUsage::test_direct_addressing_selects\", \"testing/acceptance_test.py::TestGeneralUsage::test_direct_addressing_notfound\", \"testing/acceptance_test.py::TestGeneralUsage::test_initialization_error_issue49\", \"testing/acceptance_test.py::TestGeneralUsage::test_issue134_report_error_when_collecting_member[test_fun.py::test_a]\", \"testing/acceptance_test.py::TestGeneralUsage::test_report_all_failed_collections_initargs\", \"testing/acceptance_test.py::TestGeneralUsage::test_namespace_import_doesnt_confuse_import_hook\", \"testing/acceptance_test.py::TestGeneralUsage::test_unknown_option\", \"testing/acceptance_test.py::TestGeneralUsage::test_getsourcelines_error_issue553\", \"testing/acceptance_test.py::TestGeneralUsage::test_plugins_given_as_strings\", \"testing/acceptance_test.py::TestGeneralUsage::test_parametrized_with_bytes_regex\", \"testing/acceptance_test.py::TestGeneralUsage::test_parametrized_with_null_bytes\", \"testing/acceptance_test.py::TestInvocationVariants::test_earlyinit\", \"testing/acceptance_test.py::TestInvocationVariants::test_pydoc\", \"testing/acceptance_test.py::TestInvocationVariants::test_import_star_pytest\", \"testing/acceptance_test.py::TestInvocationVariants::test_double_pytestcmdline\", \"testing/acceptance_test.py::TestInvocationVariants::test_python_minus_m_invocation_ok\", \"testing/acceptance_test.py::TestInvocationVariants::test_python_minus_m_invocation_fail\", \"testing/acceptance_test.py::TestInvocationVariants::test_python_pytest_package\", \"testing/acceptance_test.py::TestInvocationVariants::test_invoke_with_path\", \"testing/acceptance_test.py::TestInvocationVariants::test_pyargs_importerror\", \"testing/acceptance_test.py::TestInvocationVariants::test_pyargs_only_imported_once\", \"testing/acceptance_test.py::TestInvocationVariants::test_pyargs_filename_looks_like_module\", \"testing/acceptance_test.py::TestInvocationVariants::test_cmdline_python_package\", \"testing/acceptance_test.py::TestInvocationVariants::test_cmdline_python_namespace_package\", \"testing/acceptance_test.py::TestInvocationVariants::test_invoke_test_and_doctestmodules\", \"testing/acceptance_test.py::TestInvocationVariants::test_cmdline_python_package_symlink\", \"testing/acceptance_test.py::TestInvocationVariants::test_cmdline_python_package_not_exists\", \"testing/acceptance_test.py::TestInvocationVariants::test_doctest_id\", \"testing/acceptance_test.py::TestDurations::test_calls\", \"testing/acceptance_test.py::TestDurations::test_calls_show_2\", \"testing/acceptance_test.py::TestDurations::test_calls_showall\", \"testing/acceptance_test.py::TestDurations::test_calls_showall_verbose\", \"testing/acceptance_test.py::TestDurations::test_with_deselected\", \"testing/acceptance_test.py::TestDurations::test_with_failing_collection\", \"testing/acceptance_test.py::TestDurations::test_with_not\", \"testing/acceptance_test.py::TestDurationsWithFixture::test_setup_function\", \"testing/acceptance_test.py::test_zipimport_hook\", \"testing/acceptance_test.py::test_import_plugin_unicode_name\", \"testing/acceptance_test.py::test_pytest_plugins_as_module\", \"testing/acceptance_test.py::test_deferred_hook_checking\", \"testing/acceptance_test.py::test_fixture_order_respects_scope\", \"testing/acceptance_test.py::test_fixture_mock_integration\", \"testing/acceptance_test.py::test_usage_error_code\", \"testing/acceptance_test.py::test_warn_on_async_function\", \"testing/acceptance_test.py::test_warn_on_async_gen_function\", \"testing/acceptance_test.py::test_no_brokenpipeerror_message\", \"testing/acceptance_test.py::test_function_return_non_none_warning\", \"testing/acceptance_test.py::test_fixture_values_leak\", \"testing/acceptance_test.py::test_frame_leak_on_failing_test\", \"testing/acceptance_test.py::test_pdb_can_be_rewritten\", \"testing/acceptance_test.py::test_tee_stdio_captures_and_live_prints\"]",
  "environment_setup_commit": "10056865d2a4784934ce043908a0e78d0578f677",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.924936",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}