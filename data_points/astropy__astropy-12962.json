{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-12962",
  "base_commit": "d21dc232d8626b3aff24784628a6e85d177784ae",
  "patch": "diff --git a/astropy/nddata/ccddata.py b/astropy/nddata/ccddata.py\n--- a/astropy/nddata/ccddata.py\n+++ b/astropy/nddata/ccddata.py\n@@ -270,7 +270,8 @@ def uncertainty(self, value):\n             self._uncertainty = value\n \n     def to_hdu(self, hdu_mask='MASK', hdu_uncertainty='UNCERT',\n-               hdu_flags=None, wcs_relax=True, key_uncertainty_type='UTYPE'):\n+               hdu_flags=None, wcs_relax=True,\n+               key_uncertainty_type='UTYPE', as_image_hdu=False):\n         \"\"\"Creates an HDUList object from a CCDData object.\n \n         Parameters\n@@ -297,6 +298,11 @@ def to_hdu(self, hdu_mask='MASK', hdu_uncertainty='UNCERT',\n \n             .. versionadded:: 3.1\n \n+        as_image_hdu : bool\n+            If this option is `True`, the first item of the returned\n+            `~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead\n+            of the default `~astropy.io.fits.PrimaryHDU`.\n+\n         Raises\n         ------\n         ValueError\n@@ -343,7 +349,11 @@ def to_hdu(self, hdu_mask='MASK', hdu_uncertainty='UNCERT',\n             # not header.\n             wcs_header = self.wcs.to_header(relax=wcs_relax)\n             header.extend(wcs_header, useblanks=False, update=True)\n-        hdus = [fits.PrimaryHDU(self.data, header)]\n+\n+        if as_image_hdu:\n+            hdus = [fits.ImageHDU(self.data, header)]\n+        else:\n+            hdus = [fits.PrimaryHDU(self.data, header)]\n \n         if hdu_mask and self.mask is not None:\n             # Always assuming that the mask is a np.ndarray (check that it has\n@@ -667,7 +677,8 @@ def fits_ccddata_reader(filename, hdu=0, unit=None, hdu_uncertainty='UNCERT',\n \n def fits_ccddata_writer(\n         ccd_data, filename, hdu_mask='MASK', hdu_uncertainty='UNCERT',\n-        hdu_flags=None, key_uncertainty_type='UTYPE', **kwd):\n+        hdu_flags=None, key_uncertainty_type='UTYPE', as_image_hdu=False,\n+        **kwd):\n     \"\"\"\n     Write CCDData object to FITS file.\n \n@@ -691,6 +702,11 @@ def fits_ccddata_writer(\n \n         .. versionadded:: 3.1\n \n+    as_image_hdu : bool\n+        If this option is `True`, the first item of the returned\n+        `~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead of\n+        the default `~astropy.io.fits.PrimaryHDU`.\n+\n     kwd :\n         All additional keywords are passed to :py:mod:`astropy.io.fits`\n \n@@ -708,7 +724,10 @@ def fits_ccddata_writer(\n     \"\"\"\n     hdu = ccd_data.to_hdu(\n         hdu_mask=hdu_mask, hdu_uncertainty=hdu_uncertainty,\n-        key_uncertainty_type=key_uncertainty_type, hdu_flags=hdu_flags)\n+        key_uncertainty_type=key_uncertainty_type, hdu_flags=hdu_flags,\n+        as_image_hdu=as_image_hdu)\n+    if as_image_hdu:\n+        hdu.insert(0, fits.PrimaryHDU())\n     hdu.writeto(filename, **kwd)\n \n \n",
  "test_patch": "diff --git a/astropy/nddata/tests/test_ccddata.py b/astropy/nddata/tests/test_ccddata.py\n--- a/astropy/nddata/tests/test_ccddata.py\n+++ b/astropy/nddata/tests/test_ccddata.py\n@@ -196,6 +196,20 @@ def test_ccddata_writer(tmpdir):\n     np.testing.assert_array_equal(ccd_data.data, ccd_disk.data)\n \n \n+def test_ccddata_writer_as_imagehdu(tmpdir):\n+    ccd_data = create_ccd_data()\n+    filename = tmpdir.join('test.fits').strpath\n+    ccd_data.write(filename, as_image_hdu=False)\n+    with fits.open(filename) as hdus:\n+        assert len(hdus) == 1\n+\n+    filename = tmpdir.join('test2.fits').strpath\n+    ccd_data.write(filename, as_image_hdu=True)\n+    with fits.open(filename) as hdus:\n+        assert len(hdus) == 2\n+        assert isinstance(hdus[1], fits.ImageHDU)\n+\n+\n def test_ccddata_meta_is_case_sensitive():\n     ccd_data = create_ccd_data()\n     key = 'SoMeKEY'\n@@ -291,6 +305,14 @@ def test_to_hdu():\n     np.testing.assert_array_equal(fits_hdulist[0].data, ccd_data.data)\n \n \n+def test_to_hdu_as_imagehdu():\n+    ccd_data = create_ccd_data()\n+    fits_hdulist = ccd_data.to_hdu(as_image_hdu=False)\n+    assert isinstance(fits_hdulist[0], fits.PrimaryHDU)\n+    fits_hdulist = ccd_data.to_hdu(as_image_hdu=True)\n+    assert isinstance(fits_hdulist[0], fits.ImageHDU)\n+\n+\n def test_copy():\n     ccd_data = create_ccd_data()\n     ccd_copy = ccd_data.copy()\n",
  "problem_statement": "Convert CCDData to ImageHDU\n### Description\r\nAs far as I can tell, currently there's no way to directly convert a `CCDData` object to an `ImageHDU` object. If we write it to a file using `CCDData.write()` it will always create a file where the first HDU is a `PrimaryHDU` that contains the `CCDData.data`, followed by optionally some `ImageHDU`s that contain mask or uncertainty. If we instead use `CCDData.to_hdu()`, it will return an `HDUList` equivalent to the file it writes with `CCDData.write()`, that is, the `CCDData.data` is stored in the first element of the `HDUList`, which is always a `PrimaryHDU`.\r\n\r\nThis is somewhat unexpected given that you can already do it the other way around (that is, convert a `ImageHDU` object to a `CCDData` object):\r\n\r\n```python\r\nfits.HDUList([\r\n    fits.PrimaryHDU(),\r\n    fits.ImageHDU(data=np.ones((2, 2))),\r\n    fits.ImageHDU(data=np.ones((5, 5)), header=fits.Header({'BUNIT': 'm'})),\r\n]).writeto('test.fits')  # create example file\r\n\r\nccd_image = CCDData.read('test.fits', hdu=2)  # you can successfully read the 5x5 ImageHDU\r\n```\r\nThe problem is that if we then want to use this `ccd_image` as an extension to another FITS file, there's no obvious way to get an `ImageHDU` which would allow us to do that.  As far as I can tell, there's also no trivial way to convert a `PrimaryHDU` to a `ImageHDU`. We could manually create a new `ImageHDU` by copying the data from the `PrimaryHDU`, as well as its relevant cards and so on... but this seems unnecessarily complicated.\r\n\r\nI propose the following interfaces:\r\n\r\n```python\r\n# Option A: add a new parameter to CCDData.to_hdu() for this functionality\r\nhdus = ccd_image.to_hdu(as_image_hdu=True)  # This returns a HDUList where the first element is an ImageHDU instead of a PrimaryHDU\r\n\r\n# Option B: create a new convenience function\r\nhdu = fits.ccddata_to_image_hdu(ccd_image) # This returns a single ImageHDU\r\n\r\n# Option C: allowing the user to append the image to an existing FITS file\r\nccd_image.write('test.fits', append=True) # appends original ImageHDU to existing file\r\n```\r\n\r\n\r\n\r\n### Additional context\r\nThis seems somewhat similar to the situation with `Table` and `BinTableHDU`. In that case, we can also specify an `hdu` parameter when reading:\r\n\r\n```python\r\nfits.BinTableHDU.from_columns([\r\n    fits.Column(name='test', format='J', array=(1, 2))\r\n]).writeto('table.fits')  # creates a new file with a PrimaryHDU followed by this BinTableHDU\r\nt = Table.read('table.fits', hdu=1) # reads the BinTableHDU as a Table\r\n```\r\n\r\nFrom here we can use:\r\n\r\n```python\r\nt.write('new_table.fits')  #  creates a new file with a PrimaryHDU followed by the original BinTableHDU\r\nt.write('existing_table.fits', append=True)  # appends original BinTableHDU to existing file\r\nhdu = fits.table_to_hdu(t)  # returns original BinTableHDU\r\n```\n",
  "hints_text": "According to this line, that interface already exists:\r\n\r\nhttps://github.com/astropy/astropy/blob/40ba5e4c609d2760152898b8d92a146e3e38c744/astropy/nddata/ccddata.py#L709\r\n\r\nhttps://docs.astropy.org/en/latest/api/astropy.nddata.CCDData.html#astropy.nddata.CCDData.to_hdu\nMaybe it just needs some tune up to write the HDU format that you want instead of a whole new interface. (Your Option A)\nYes, I know that `ccd_data.to_hdu()` already exists. My problem with it is that it returns the data as an `HDUList` with a `PrimaryHDU`, not as an `ImageHDU`. This is why I proposed adding an optional parameter to it (option A). Option B and C are basically inspired on the existing interfaces for converting `Tables` back to `BinTableHDU`s, which also seem good options to me. Any of these 3 options would be really useful to me, but I don't necessarily think we need all of them at the same time.\nYes, I replied before coffee kicked in, sorry. ðŸ˜… \r\n\r\nMy vote is Option A but we should wait to hear from @mwcraig .\nOption A sounds very useful to me too.\nI agree that Option A sounds good -- thanks for the detailed report and thoughtful suggestions, @kYwzor. Are you interested in writing a pull request to implement this? I would have some time this week to help you out if you are interested.\r\n\r\nIf not, I should be able to open a PR myself this week. \nI've never contributed to a big package like this, but I can give it a try.\r\n\r\nThere seems to be consensus for `ccd_data.to_hdu(as_image_hdu=True)`, but I'm not sure that we're all in agreement regarding what exactly this should return. I see essentially three options:\r\n\r\n1. Return an `HDUList` where the first element is an empty `PrimaryHDU`, followed by an `ImageHDU` which contains data/headers coming from the `CCDData` object, possibly followed by `ImageHDU`s containing mask and/or uncertainty (if they are present in the `CCDData` object).\r\n2. Same as option 1, but without the `PrimaryHDU` (the first element is an `ImageHDU`).\r\n3. Return just an `ImageHDU` (not an `HDUList`), even if mask or uncertainty exist.\r\n\r\nOption 1 is probably more consistent with the usual behavior when returning `HDUList`s (I think when Astropy builds an `HDUList` for the user, it's usually returned in a state that can be directly written to a file). The argument for option 2 is that if you're using `as_image_hdu` you probably don't intend on directly writing the returning `HDUList` to a file (otherwise you'd likely just use the default parameters), so adding a PrimaryHDU may be unnecessary bloat. Although I'm not a fan of option 3, it might be what someone expects from a parameter named \"as_image_hdu\"... but it would be pretty weird to completely drop mask/uncertainty and to return a different type of object, so maybe we could have a better name for this parameter.\r\n\r\nI think option 1 is probably the best option because if you don't want the PrimaryHDU (option 2) you can easily do that with `hdus.pop(0)` and if you only want the ImageHDU (option 3) you can get it via `hdus[1]`, so it seems like it should fit everyone's needs.\n> 1. Return an HDUList where the first element is an empty PrimaryHDU, followed by an ImageHDU which contains data/headers coming from the CCDData object, possibly followed by ImageHDUs containing mask and/or uncertainty (if they are present in the CCDData object).\r\n> 2. Same as option 1, but without the PrimaryHDU (the first element is an ImageHDU).\r\n> 3. Return just an ImageHDU (not an HDUList), even if mask or uncertainty exist.\r\n\r\nI lean towards 2 since the keyword indicates you want the HDU as an `ImageHDU` -- it might be even clearer if the keyword were named `as_image_hdu_only` or something like that. Let's wait to see what @pllim and @saimn have to say too. \r\n\r\nContributing follows a fairly standard set of steps, [detailed at length here](https://docs.astropy.org/en/latest/development/workflow/development_workflow.html). Boiled down to essentials, it is: fork the repo in github, clone your fork to your computer, *make a new branch* and then make your changes. Include a test of the new feature -- in this case it could be a straightforward one that makes sure an `ImageHDU` is returned if the keyword is used. Commit your changes, push to your fork, then open a pull request.\r\n\r\nIf you run into questions along the way feel free to ask here or in the #nddata channel in the [astropy slack](https://astropy.slack.com/) workspace.\r\n\nFrom an \"outsider\" perspective (in terms of `CCDData` usage), I would prefer a solution that is the closest to what `.write()` would have done, but returns the object instead of writing it to a file. You can name the keyword whatever that makes sense to you in that regard. I think that behavior is the least surprising one.\r\n\r\nOf course, I don't use it a lot, so I can be overruled.\nI also lean towards 2 since I think the use case would to construct manually the HDUList with possibly more than 1 CCDData object. Having the PrimaryHDU could also be useful, but maybe that should be a different option in `CCDData.write`.",
  "created_at": "2022-03-17T01:25:15Z",
  "version": "4.3",
  "FAIL_TO_PASS": "[\"astropy/nddata/tests/test_ccddata.py::test_ccddata_writer_as_imagehdu\", \"astropy/nddata/tests/test_ccddata.py::test_to_hdu_as_imagehdu\"]",
  "PASS_TO_PASS": "[\"astropy/nddata/tests/test_ccddata.py::test_ccddata_empty\", \"astropy/nddata/tests/test_ccddata.py::test_ccddata_must_have_unit\", \"astropy/nddata/tests/test_ccddata.py::test_ccddata_unit_cannot_be_set_to_none\", \"astropy/nddata/tests/test_ccddata.py::test_ccddata_meta_header_conflict\", \"astropy/nddata/tests/test_ccddata.py::test_ccddata_simple\", \"astropy/nddata/tests/test_ccddata.py::test_ccddata_init_with_string_electron_unit\", \"astropy/nddata/tests/test_ccddata.py::test_initialize_from_FITS\", \"astropy/nddata/tests/test_ccddata.py::test_initialize_from_fits_with_unit_in_header\", \"astropy/nddata/tests/test_ccddata.py::test_initialize_from_fits_with_ADU_in_header\", \"astropy/nddata/tests/test_ccddata.py::test_initialize_from_fits_with_invalid_unit_in_header\", \"astropy/nddata/tests/test_ccddata.py::test_initialize_from_fits_with_technically_invalid_but_not_really\", \"astropy/nddata/tests/test_ccddata.py::test_initialize_from_fits_with_data_in_different_extension\", \"astropy/nddata/tests/test_ccddata.py::test_initialize_from_fits_with_extension\", \"astropy/nddata/tests/test_ccddata.py::test_write_unit_to_hdu\", \"astropy/nddata/tests/test_ccddata.py::test_initialize_from_FITS_bad_keyword_raises_error\", \"astropy/nddata/tests/test_ccddata.py::test_ccddata_writer\", \"astropy/nddata/tests/test_ccddata.py::test_ccddata_meta_is_case_sensitive\", \"astropy/nddata/tests/test_ccddata.py::test_ccddata_meta_is_not_fits_header\", \"astropy/nddata/tests/test_ccddata.py::test_fromMEF\", \"astropy/nddata/tests/test_ccddata.py::test_metafromheader\", \"astropy/nddata/tests/test_ccddata.py::test_metafromdict\", \"astropy/nddata/tests/test_ccddata.py::test_header2meta\", \"astropy/nddata/tests/test_ccddata.py::test_metafromstring_fail\", \"astropy/nddata/tests/test_ccddata.py::test_setting_bad_uncertainty_raises_error\", \"astropy/nddata/tests/test_ccddata.py::test_setting_uncertainty_with_array\", \"astropy/nddata/tests/test_ccddata.py::test_setting_uncertainty_wrong_shape_raises_error\", \"astropy/nddata/tests/test_ccddata.py::test_to_hdu\", \"astropy/nddata/tests/test_ccddata.py::test_copy\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[True-2.0-multiply-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[True-2.0-divide-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[True-operand1-multiply-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[True-operand1-divide-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[True-operand2-multiply-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[True-operand2-divide-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[False-2.0-multiply-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[False-2.0-divide-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[False-operand1-multiply-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[False-operand1-divide-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[False-operand2-multiply-True]\", \"astropy/nddata/tests/test_ccddata.py::test_mult_div_overload[False-operand2-divide-True]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[True-2.0-UnitsError-add-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[True-2.0-UnitsError-subtract-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[True-operand1-UnitsError-add-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[True-operand1-UnitsError-subtract-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[True-operand2-False-add-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[True-operand2-False-subtract-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[False-2.0-UnitsError-add-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[False-2.0-UnitsError-subtract-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[False-operand1-UnitsError-add-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[False-operand1-UnitsError-subtract-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[False-operand2-False-add-False]\", \"astropy/nddata/tests/test_ccddata.py::test_add_sub_overload[False-operand2-False-subtract-False]\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_overload_fails\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_no_wcs_compare\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_with_wcs_compare\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_with_wcs_compare_fail\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_overload_ccddata_operand\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_overload_differing_units\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_add_with_array\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_subtract_with_array\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_multiply_with_array\", \"astropy/nddata/tests/test_ccddata.py::test_arithmetic_divide_with_array\", \"astropy/nddata/tests/test_ccddata.py::test_history_preserved_if_metadata_is_fits_header\", \"astropy/nddata/tests/test_ccddata.py::test_infol_logged_if_unit_in_fits_header\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_attribute\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_keywords_removed_from_header\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_SIP_coefficient_keywords_removed\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_keyword_removal_for_wcs_test_files\", \"astropy/nddata/tests/test_ccddata.py::test_read_wcs_not_creatable\", \"astropy/nddata/tests/test_ccddata.py::test_header\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_arithmetic\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_arithmetic_ccd[multiply]\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_arithmetic_ccd[divide]\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_arithmetic_ccd[add]\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_arithmetic_ccd[subtract]\", \"astropy/nddata/tests/test_ccddata.py::test_wcs_sip_handling\", \"astropy/nddata/tests/test_ccddata.py::test_mask_arithmetic_ccd[multiply]\", \"astropy/nddata/tests/test_ccddata.py::test_mask_arithmetic_ccd[divide]\", \"astropy/nddata/tests/test_ccddata.py::test_mask_arithmetic_ccd[add]\", \"astropy/nddata/tests/test_ccddata.py::test_mask_arithmetic_ccd[subtract]\", \"astropy/nddata/tests/test_ccddata.py::test_write_read_multiextensionfits_mask_default\", \"astropy/nddata/tests/test_ccddata.py::test_write_read_multiextensionfits_uncertainty_default[StdDevUncertainty]\", \"astropy/nddata/tests/test_ccddata.py::test_write_read_multiextensionfits_uncertainty_default[VarianceUncertainty]\", \"astropy/nddata/tests/test_ccddata.py::test_write_read_multiextensionfits_uncertainty_default[InverseVariance]\", \"astropy/nddata/tests/test_ccddata.py::test_write_read_multiextensionfits_uncertainty_different_uncertainty_key[StdDevUncertainty]\", \"astropy/nddata/tests/test_ccddata.py::test_write_read_multiextensionfits_uncertainty_different_uncertainty_key[VarianceUncertainty]\", \"astropy/nddata/tests/test_ccddata.py::test_write_read_multiextensionfits_uncertainty_different_uncertainty_key[InverseVariance]\", \"astropy/nddata/tests/test_ccddata.py::test_write_read_multiextensionfits_not\", \"astropy/nddata/tests/test_ccddata.py::test_write_read_multiextensionfits_custom_ext_names\", \"astropy/nddata/tests/test_ccddata.py::test_read_old_style_multiextensionfits\", \"astropy/nddata/tests/test_ccddata.py::test_wcs\", \"astropy/nddata/tests/test_ccddata.py::test_recognized_fits_formats_for_read_write\", \"astropy/nddata/tests/test_ccddata.py::test_stddevuncertainty_compat_descriptor_no_parent\", \"astropy/nddata/tests/test_ccddata.py::test_stddevuncertainty_compat_descriptor_no_weakref\", \"astropy/nddata/tests/test_ccddata.py::test_read_returns_image\", \"astropy/nddata/tests/test_ccddata.py::test_sliced_ccdata_to_hdu\"]",
  "environment_setup_commit": "298ccb478e6bf092953bca67a3d29dc6c35f6752",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.523881",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}