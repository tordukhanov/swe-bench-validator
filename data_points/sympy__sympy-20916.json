{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-20916",
  "base_commit": "82298df6a51491bfaad0c6d1980e7e3ca808ae93",
  "patch": "diff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -7,7 +7,7 @@\n from collections.abc import Iterable\n from sympy import Derivative\n \n-_name_with_digits_p = re.compile(r'^([a-zA-Z]+)([0-9]+)$')\n+_name_with_digits_p = re.compile(r'^([^\\W\\d_]+)(\\d+)$', re.U)\n \n \n def split_super_sub(text):\n@@ -60,7 +60,7 @@ def split_super_sub(text):\n         else:\n             raise RuntimeError(\"This should never happen.\")\n \n-    # make a little exception when a name ends with digits, i.e. treat them\n+    # Make a little exception when a name ends with digits, i.e. treat them\n     # as a subscript too.\n     m = _name_with_digits_p.match(name)\n     if m:\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_conventions.py b/sympy/printing/tests/test_conventions.py\n--- a/sympy/printing/tests/test_conventions.py\n+++ b/sympy/printing/tests/test_conventions.py\n@@ -1,3 +1,5 @@\n+# -*- coding: utf-8 -*-\n+\n from sympy import symbols, Derivative, Integral, exp, cos, oo, Function\n from sympy.functions.special.bessel import besselj\n from sympy.functions.special.polynomials import legendre\n@@ -29,6 +31,17 @@ def test_super_sub():\n     assert split_super_sub(\"x__a__b__c__d\") == (\"x\", [\"a\", \"b\", \"c\", \"d\"], [])\n     assert split_super_sub(\"alpha_11\") == (\"alpha\", [], [\"11\"])\n     assert split_super_sub(\"alpha_11_11\") == (\"alpha\", [], [\"11\", \"11\"])\n+    assert split_super_sub(\"w1\") == (\"w\", [], [\"1\"])\n+    assert split_super_sub(\"wùüô\") == (\"w\", [], [\"ùüô\"])\n+    assert split_super_sub(\"w11\") == (\"w\", [], [\"11\"])\n+    assert split_super_sub(\"wùüôùüô\") == (\"w\", [], [\"ùüôùüô\"])\n+    assert split_super_sub(\"wùüô2ùüô\") == (\"w\", [], [\"ùüô2ùüô\"])\n+    assert split_super_sub(\"w1^a\") == (\"w\", [\"a\"], [\"1\"])\n+    assert split_super_sub(\"œâ1\") == (\"œâ\", [], [\"1\"])\n+    assert split_super_sub(\"œâ11\") == (\"œâ\", [], [\"11\"])\n+    assert split_super_sub(\"œâ1^a\") == (\"œâ\", [\"a\"], [\"1\"])\n+    assert split_super_sub(\"œâùüô^Œ±\") == (\"œâ\", [\"Œ±\"], [\"ùüô\"])\n+    assert split_super_sub(\"œâùüô2^3Œ±\") == (\"œâ\", [\"3Œ±\"], [\"ùüô2\"])\n     assert split_super_sub(\"\") == (\"\", [], [])\n \n \ndiff --git a/sympy/testing/quality_unicode.py b/sympy/testing/quality_unicode.py\n--- a/sympy/testing/quality_unicode.py\n+++ b/sympy/testing/quality_unicode.py\n@@ -44,6 +44,7 @@\n     r'*/sympy/vector/tests/test_printing.py',\n     r'*/sympy/parsing/tests/test_sympy_parser.py',\n     r'*/sympy/printing/pretty/tests/test_pretty.py',\n+    r'*/sympy/printing/tests/test_conventions.py',\n     r'*/sympy/printing/tests/test_preview.py',\n     r'*/liealgebras/type_g.py',\n     r'*/liealgebras/weyl_group.py',\n",
  "problem_statement": "pprint unicode does not format subscripts on Greek letters\nGood:\r\n\r\n[ -t‚ÇÄ‚ãÖw‚ÇÄ   -t‚ÇÅ‚ãÖw‚ÇÄ   -t‚ÇÇ‚ãÖw‚ÇÄ]\r\n\r\n\r\nBad:\r\n\r\n[ -t‚ÇÄ‚ãÖœâ0   -t‚ÇÅ‚ãÖœâ0   -t‚ÇÇ‚ãÖœâ0]\r\n\r\n\r\n\n",
  "hints_text": "Could you provide the code which generates this?\n```\r\nimport sympy as sp\r\nw=[sp.Symbol(f'w{i}') for i in range(4)]\r\nœâ=[sp.Symbol(f'œâ{i}') for i in range(4)]\r\nsp.pprint(w) # -> [w‚ÇÄ, w‚ÇÅ, w‚ÇÇ, w‚ÇÉ]\r\nsp.pprint(œâ) # -> [œâ0, œâ1, œâ2, œâ3]\r\n```\r\n\nNot sure what the standard syntax is for defining variables with subscripts, but if you add an underscore between the main part of the variable and the subscript, it should render correctly:\r\n\r\n```pycon\r\n>>> œâ=[sp.Symbol(f'œâ_{i}') for i in range(4)]\r\n>>> sp.pprint(œâ)\r\n[œâ‚ÇÄ, œâ‚ÇÅ, œâ‚ÇÇ, œâ‚ÇÉ]\r\n```\nOk, thanks.   But I can't see why Greek letters should be treated any differently to Latin.   That's ethnic bias!\nThis is a bug. They should both work properly. It looks like there is a regular expression in sympy/printing/conventions.py that assumes that the letter parts of symbol names are ASCII letters. It is using `[a-zA-Z]` but it should be using `\\w` so that it matches Unicode word characters. ",
  "created_at": "2021-02-06T05:44:34Z",
  "version": "1.8",
  "FAIL_TO_PASS": "[\"test_super_sub\"]",
  "PASS_TO_PASS": "[\"test_requires_partial\"]",
  "environment_setup_commit": "3ac1464b8840d5f8b618a654f9fbf09c452fe969",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.140753",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}