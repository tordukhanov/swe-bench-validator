{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-9681",
  "base_commit": "fc72ffa39ed3b34b21fba83d6f80144ab0ae8a36",
  "patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -603,11 +603,20 @@ def insert_missing_modules(modules: Dict[str, ModuleType], module_name: str) ->\n     module_parts = module_name.split(\".\")\n     while module_name:\n         if module_name not in modules:\n-            module = ModuleType(\n-                module_name,\n-                doc=\"Empty module created by pytest's importmode=importlib.\",\n-            )\n-            modules[module_name] = module\n+            try:\n+                # If sys.meta_path is empty, calling import_module will issue\n+                # a warning and raise ModuleNotFoundError. To avoid the\n+                # warning, we check sys.meta_path explicitly and raise the error\n+                # ourselves to fall back to creating a dummy module.\n+                if not sys.meta_path:\n+                    raise ModuleNotFoundError\n+                importlib.import_module(module_name)\n+            except ModuleNotFoundError:\n+                module = ModuleType(\n+                    module_name,\n+                    doc=\"Empty module created by pytest's importmode=importlib.\",\n+                )\n+                modules[module_name] = module\n         module_parts.pop(-1)\n         module_name = \".\".join(module_parts)\n \n",
  "test_patch": "diff --git a/testing/test_collection.py b/testing/test_collection.py\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1507,6 +1507,35 @@ def test_modules_not_importable_as_side_effect(self, pytester: Pytester) -> None\n             ]\n         )\n \n+    def test_using_python_path(self, pytester: Pytester) -> None:\n+        \"\"\"\n+        Dummy modules created by insert_missing_modules should not get in\n+        the way of modules that could be imported via python path (#9645).\n+        \"\"\"\n+        pytester.makeini(\n+            \"\"\"\n+            [pytest]\n+            pythonpath = .\n+            addopts = --import-mode importlib\n+            \"\"\"\n+        )\n+        pytester.makepyfile(\n+            **{\n+                \"tests/__init__.py\": \"\",\n+                \"tests/conftest.py\": \"\",\n+                \"tests/subpath/__init__.py\": \"\",\n+                \"tests/subpath/helper.py\": \"\",\n+                \"tests/subpath/test_something.py\": \"\"\"\n+                import tests.subpath.helper\n+\n+                def test_something():\n+                    assert True\n+                \"\"\",\n+            }\n+        )\n+        result = pytester.runpytest()\n+        result.stdout.fnmatch_lines(\"*1 passed in*\")\n+\n \n def test_does_not_crash_on_error_from_decorated_function(pytester: Pytester) -> None:\n     \"\"\"Regression test for an issue around bad exception formatting due to\ndiff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -562,15 +562,20 @@ def test_module_name_from_path(self, tmp_path: Path) -> None:\n         result = module_name_from_path(Path(\"/home/foo/test_foo.py\"), Path(\"/bar\"))\n         assert result == \"home.foo.test_foo\"\n \n-    def test_insert_missing_modules(self) -> None:\n-        modules = {\"src.tests.foo\": ModuleType(\"src.tests.foo\")}\n-        insert_missing_modules(modules, \"src.tests.foo\")\n-        assert sorted(modules) == [\"src\", \"src.tests\", \"src.tests.foo\"]\n+    def test_insert_missing_modules(\n+        self, monkeypatch: MonkeyPatch, tmp_path: Path\n+    ) -> None:\n+        monkeypatch.chdir(tmp_path)\n+        # Use 'xxx' and 'xxy' as parent names as they are unlikely to exist and\n+        # don't end up being imported.\n+        modules = {\"xxx.tests.foo\": ModuleType(\"xxx.tests.foo\")}\n+        insert_missing_modules(modules, \"xxx.tests.foo\")\n+        assert sorted(modules) == [\"xxx\", \"xxx.tests\", \"xxx.tests.foo\"]\n \n         mod = ModuleType(\"mod\", doc=\"My Module\")\n-        modules = {\"src\": mod}\n-        insert_missing_modules(modules, \"src\")\n-        assert modules == {\"src\": mod}\n+        modules = {\"xxy\": mod}\n+        insert_missing_modules(modules, \"xxy\")\n+        assert modules == {\"xxy\": mod}\n \n         modules = {}\n         insert_missing_modules(modules, \"\")\n",
  "problem_statement": "7.0.0 regression: Existence of conftest.py messes up package discovery with importlib + pythonpath mode (ModuleNotFoundError: No module named 'tests.<test-packages>')\nConsider the following demo project:\r\n\r\n**`setup.cfg`**\r\n```ini\r\n# The idea is to use `pythonpath = .` to enable imports from the `tests` folder\r\n# like `import tests.<subpackages>`.\r\n# Note that all involved directories have proper __init__.py, and importing e.g.\r\n# `import tests.subpath.helper` works from a Python REPL.\r\n[tool:pytest]\r\npythonpath = .\r\naddopts =\r\n    --import-mode importlib\r\n```\r\n\r\n**`tests/__init__.py`**\r\n```python\r\n# just empty\r\n```\r\n\r\n**`tests/conftest.py`** (existence of this file breaks package discovery)\r\n```python\r\n# just empty\r\n```\r\n\r\n**`tests/subpath/__init__.py`**\r\n```python\r\n# just empty\r\n```\r\n\r\n**`tests/subpath/helper.py`**\r\n```python\r\n# just empty\r\n```\r\n\r\n**`tests/subpath/test_something.py`**\r\n```python\r\nimport tests.subpath.helper\r\n\r\n\r\ndef test_something():\r\n    assert True\r\n```\r\n\r\npytest (version 7.0.0) errors with:\r\n\r\n```\r\n______________________________________________________________________________________________________________________________________________ ERROR collecting tests/subpath/test_something.py _______________________________________________________________________________________________________________________________________________\r\nImportError while importing test module '/tmp/demo_project/tests/subpath/test_something.py'.\r\nHint: make sure your test modules/packages have valid Python names.\r\nTraceback:\r\ntests/subpath/test_something.py:1: in <module>\r\n    import tests.subpath.helper\r\nE   ModuleNotFoundError: No module named 'tests.subpath'; 'tests' is not a package\r\n=========================================================================================================================================================== short test summary info ===========================================================================================================================================================\r\nERROR tests/subpath/test_something.py\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n============================================================================================================================================================== 1 error in 0.08s ===============================================================================================================================================================\r\n```\r\n\r\nWhat's particularly surprising: The example works, when renaming the `conftest.py` to e.g. `conftest2.py`. I.e., it seems that the existence of the `conftest.py` implies that it is no longer possible to import from `tests`. Imports like this used to work with pre 7 pytest versions in `importlib` mode despite the existence of a `conftest.py`.\r\n\n",
  "hints_text": "Bisected to b706a2c04840a8057610f41071fbcf3da1290eb5 (PR #7870), cc @nicoddemus.\nHi @bluenote10, \r\n\r\nThanks for the detailed report, we definitely appreciate it.\r\n\r\n> What's particularly surprising: The example works, when renaming the conftest.py to e.g. conftest2.py\r\n\r\nThat's because `conftest2.py` are not special to pytest, while `conftest.py` files are handled specially. But I can see why it might seem surprising at first. 👍 \r\n\r\n> Imports like this used to work with pre 7 pytest versions in importlib mode despite the existence of a conftest.py.\r\n\r\nJust to clarify to make sure we are not missing anything: `pythonpaths` was added in 7.0.0, so `pythonpaths` in the `pytest.ini` had no effect in prior versions. How did you configure the PYHONPATH in pytest<7, with the directory layout you posted?\n> Just to clarify to make sure we are not missing anything: pythonpaths was added in 7.0.0, so pythonpaths in the pytest.ini had no effect in prior versions. How did you configure the PYHONPATH in pytest<7, with the directory layout you posted?\r\n\r\nIndeed, pre 7.0.0 we did nothing special at all to import from `tests` irrespective of the import mode, but we need to use the recommended `importlib` for some internal reasons.\r\n\r\nI've only added `pythonpath = .` (note: not `pythonpaths`, which was the name used by the old plugin) to be fully explicit, in the hope that pytest will then allow to import from all the top-level folders like `tests`. Most likely this is the default behaviour anyway, and the problem hasn't anything to do with `pythonpath` at all (when not specifying it the import fails as well).\nOK, thanks.\r\n\r\nSo to be crystal clear: if we remove `pythonpath` from your example, then running the command `pytest` in pytest 6 **works**, but in pytest 7 it **does not work**, giving the `ModuleNotFoundError` above, right?\r\n\r\n(Sorry if I'm being pedantic, but having an accurate understanding is important)\n> So to be crystal clear: if we remove pythonpath from your example, then running the command pytest in pytest 6 works, but in pytest 7 it does not work, giving the ModuleNotFoundError above, right?\r\n\r\nThis is exactly what we are observing with our actual project: We tried to update from pytest 6.2.5 to 7.0.0 and all of a sudden all imports towards `tests.<test-package>` fail with `ModuleNotFoundError`. The only related non-standard option we are using is the `importlib` mode.\r\n\r\nUnfortunately, the reproduction example doesn't seem to fully reflect that, because it also fails with pytest < 7 😞 I need to further investigate why this actually used to work in our real project at all. So I'm no longer fully sure whether it is truly a 7.0 regression. In any case importing from `tests` used to work, and in particular when specifying `pythonpath = .` in 7.0, it probably should according to the documentation.\nAhh OK thanks.\r\n\r\n>  In any case importing from tests used to work, and in particular when specifying pythonpath = . in 7.0, it probably should according to the documentation.\r\n\r\nI agree, I will investigate. Thanks again.\nI tested it with `PYTHONPATH=.`",
  "created_at": "2022-02-13T12:46:19Z",
  "version": "7.1",
  "FAIL_TO_PASS": "[\"testing/test_collection.py::TestImportModeImportlib::test_using_python_path\"]",
  "PASS_TO_PASS": "[\"testing/test_collection.py::TestCollector::test_collect_versus_item\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[*.py-foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[*.py-bar/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[test_*.py-foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[tests/*.py-tests/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[/c/*.py-/c/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[/c/foo/*.py-/c/foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[tests/**/test*.py-tests/foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[tests/**/doc/test*.py-tests/foo/bar/doc/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching[tests/**/doc/**/test*.py-tests/foo/doc/bar/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_matching_abspath\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[*.py-foo.pyc]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[*.py-foo/foo.pyc]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/*.py-foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[/c/*.py-/d/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[/c/foo/*.py-/d/foo/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/**/test*.py-tests/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/**/test*.py-foo/test_foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/**/doc/test*.py-tests/foo/bar/doc/foo.py]\", \"testing/test_pathlib.py::TestFNMatcherPort::test_not_matching[tests/**/doc/test*.py-tests/foo/bar/test_foo.py]\", \"testing/test_pathlib.py::TestImportPath::test_smoke_test\", \"testing/test_pathlib.py::TestImportPath::test_import_path_missing_file\", \"testing/test_pathlib.py::TestImportPath::test_renamed_dir_creates_mismatch\", \"testing/test_pathlib.py::TestImportPath::test_messy_name\", \"testing/test_pathlib.py::TestImportPath::test_dir\", \"testing/test_pathlib.py::TestImportPath::test_a\", \"testing/test_pathlib.py::TestImportPath::test_b\", \"testing/test_pathlib.py::TestImportPath::test_c\", \"testing/test_pathlib.py::TestImportPath::test_d\", \"testing/test_pathlib.py::TestImportPath::test_import_after\", \"testing/test_pathlib.py::TestImportPath::test_check_filepath_consistency\", \"testing/test_pathlib.py::TestImportPath::test_issue131_on__init__\", \"testing/test_pathlib.py::TestImportPath::test_ensuresyspath_append\", \"testing/test_pathlib.py::TestImportPath::test_invalid_path\", \"testing/test_pathlib.py::TestImportPath::test_importmode_importlib\", \"testing/test_pathlib.py::TestImportPath::test_importmode_twice_is_different_module\", \"testing/test_pathlib.py::TestImportPath::test_no_meta_path_found\", \"testing/test_pathlib.py::test_resolve_package_path\", \"testing/test_pathlib.py::test_package_unimportable\", \"testing/test_pathlib.py::test_access_denied_during_cleanup\", \"testing/test_pathlib.py::test_long_path_during_cleanup\", \"testing/test_pathlib.py::test_get_extended_length_path_str\", \"testing/test_pathlib.py::test_suppress_error_removing_lock\", \"testing/test_pathlib.py::test_bestrelpath\", \"testing/test_pathlib.py::test_commonpath\", \"testing/test_pathlib.py::test_visit_ignores_errors\", \"testing/test_pathlib.py::TestImportLibMode::test_importmode_importlib_with_dataclass\", \"testing/test_pathlib.py::TestImportLibMode::test_importmode_importlib_with_pickle\", \"testing/test_pathlib.py::TestImportLibMode::test_importmode_importlib_with_pickle_separate_modules\", \"testing/test_pathlib.py::TestImportLibMode::test_module_name_from_path\", \"testing/test_pathlib.py::TestImportLibMode::test_insert_missing_modules\", \"testing/test_collection.py::TestCollector::test_check_equality\", \"testing/test_collection.py::TestCollector::test_getparent_and_accessors\", \"testing/test_collection.py::TestCollector::test_getcustomfile_roundtrip\", \"testing/test_collection.py::TestCollector::test_can_skip_class_with_test_attr\", \"testing/test_collection.py::TestCollectFS::test_ignored_certain_directories\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_custom_norecursedirs\", \"testing/test_collection.py::TestCollectFS::test_testpaths_ini\", \"testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_file\", \"testing/test_collection.py::TestPrunetraceback::test_custom_repr_failure\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_path\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_not_called_on_argument\", \"testing/test_collection.py::TestCustomConftests::test_collectignore_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_collectignoreglob_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_pytest_fs_collect_hooks_are_seen\", \"testing/test_collection.py::TestCustomConftests::test_pytest_collect_file_from_sister_dir\", \"testing/test_collection.py::TestSession::test_collect_topdir\", \"testing/test_collection.py::TestSession::test_collect_protocol_single_function\", \"testing/test_collection.py::TestSession::test_collect_protocol_method\", \"testing/test_collection.py::TestSession::test_collect_custom_nodes_multi_id\", \"testing/test_collection.py::TestSession::test_collect_subdir_event_ordering\", \"testing/test_collection.py::TestSession::test_collect_two_commandline_args\", \"testing/test_collection.py::TestSession::test_serialization_byid\", \"testing/test_collection.py::TestSession::test_find_byid_without_instance_parents\", \"testing/test_collection.py::Test_getinitialnodes::test_global_file\", \"testing/test_collection.py::Test_getinitialnodes::test_pkgfile\", \"testing/test_collection.py::Test_genitems::test_check_collect_hashes\", \"testing/test_collection.py::Test_genitems::test_example_items1\", \"testing/test_collection.py::Test_genitems::test_class_and_functions_discovery_using_glob\", \"testing/test_collection.py::test_matchnodes_two_collections_same_file\", \"testing/test_collection.py::TestNodeKeywords::test_no_under\", \"testing/test_collection.py::TestNodeKeywords::test_issue345\", \"testing/test_collection.py::TestNodeKeywords::test_keyword_matching_is_case_insensitive_by_default\", \"testing/test_collection.py::TestNodeKeywords::test_duplicates_handled_correctly\", \"testing/test_collection.py::TestNodeKeywords::test_unpacked_marks_added_to_keywords\", \"testing/test_collection.py::test_exit_on_collection_error\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_smaller_than_n_errors\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_bigger_than_n_errors\", \"testing/test_collection.py::test_continue_on_collection_errors\", \"testing/test_collection.py::test_continue_on_collection_errors_maxfail\", \"testing/test_collection.py::test_fixture_scope_sibling_conftests\", \"testing/test_collection.py::test_collect_init_tests\", \"testing/test_collection.py::test_collect_invalid_signature_message\", \"testing/test_collection.py::test_collect_handles_raising_on_dunder_class\", \"testing/test_collection.py::test_collect_with_chdir_during_import\", \"testing/test_collection.py::test_collect_symlink_file_arg\", \"testing/test_collection.py::test_collect_symlink_out_of_tree\", \"testing/test_collection.py::test_collectignore_via_conftest\", \"testing/test_collection.py::test_collect_pkg_init_and_file_in_args\", \"testing/test_collection.py::test_collect_pkg_init_only\", \"testing/test_collection.py::test_collect_sub_with_symlinks[True]\", \"testing/test_collection.py::test_collect_sub_with_symlinks[False]\", \"testing/test_collection.py::test_collector_respects_tbstyle\", \"testing/test_collection.py::test_does_not_eagerly_collect_packages\", \"testing/test_collection.py::test_does_not_put_src_on_path\", \"testing/test_collection.py::test_fscollector_from_parent\", \"testing/test_collection.py::test_class_from_parent\", \"testing/test_collection.py::TestImportModeImportlib::test_collect_duplicate_names\", \"testing/test_collection.py::TestImportModeImportlib::test_conftest\", \"testing/test_collection.py::TestImportModeImportlib::test_modules_importable_as_side_effect\", \"testing/test_collection.py::TestImportModeImportlib::test_modules_not_importable_as_side_effect\", \"testing/test_collection.py::test_does_not_crash_on_error_from_decorated_function\", \"testing/test_collection.py::test_does_not_crash_on_recursive_symlink\", \"testing/test_collection.py::test_collect_pyargs_with_testpaths\"]",
  "environment_setup_commit": "4a8f8ada431974f2837260af3ed36299fd382814",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.947477",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}