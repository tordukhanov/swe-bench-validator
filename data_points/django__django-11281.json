{
  "repo": "django/django",
  "instance_id": "django__django-11281",
  "base_commit": "2b03e8e9e8205ae3a3aa128764277e70b7c30803",
  "patch": "diff --git a/django/contrib/admin/models.py b/django/contrib/admin/models.py\n--- a/django/contrib/admin/models.py\n+++ b/django/contrib/admin/models.py\n@@ -73,14 +73,14 @@ def __repr__(self):\n \n     def __str__(self):\n         if self.is_addition():\n-            return gettext('Added \"%(object)s\".') % {'object': self.object_repr}\n+            return gettext('Added “%(object)s”.') % {'object': self.object_repr}\n         elif self.is_change():\n-            return gettext('Changed \"%(object)s\" - %(changes)s') % {\n+            return gettext('Changed “%(object)s” — %(changes)s') % {\n                 'object': self.object_repr,\n                 'changes': self.get_change_message(),\n             }\n         elif self.is_deletion():\n-            return gettext('Deleted \"%(object)s.\"') % {'object': self.object_repr}\n+            return gettext('Deleted “%(object)s.”') % {'object': self.object_repr}\n \n         return gettext('LogEntry Object')\n \n@@ -108,7 +108,7 @@ def get_change_message(self):\n                 if 'added' in sub_message:\n                     if sub_message['added']:\n                         sub_message['added']['name'] = gettext(sub_message['added']['name'])\n-                        messages.append(gettext('Added {name} \"{object}\".').format(**sub_message['added']))\n+                        messages.append(gettext('Added {name} “{object}”.').format(**sub_message['added']))\n                     else:\n                         messages.append(gettext('Added.'))\n \n@@ -118,7 +118,7 @@ def get_change_message(self):\n                     )\n                     if 'name' in sub_message['changed']:\n                         sub_message['changed']['name'] = gettext(sub_message['changed']['name'])\n-                        messages.append(gettext('Changed {fields} for {name} \"{object}\".').format(\n+                        messages.append(gettext('Changed {fields} for {name} “{object}”.').format(\n                             **sub_message['changed']\n                         ))\n                     else:\n@@ -126,7 +126,7 @@ def get_change_message(self):\n \n                 elif 'deleted' in sub_message:\n                     sub_message['deleted']['name'] = gettext(sub_message['deleted']['name'])\n-                    messages.append(gettext('Deleted {name} \"{object}\".').format(**sub_message['deleted']))\n+                    messages.append(gettext('Deleted {name} “{object}”.').format(**sub_message['deleted']))\n \n             change_message = ' '.join(msg[0].upper() + msg[1:] for msg in messages)\n             return change_message or gettext('No fields changed.')\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -269,7 +269,7 @@ def formfield_for_manytomany(self, db_field, request, **kwargs):\n         form_field = db_field.formfield(**kwargs)\n         if (isinstance(form_field.widget, SelectMultiple) and\n                 not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))):\n-            msg = _('Hold down \"Control\", or \"Command\" on a Mac, to select more than one.')\n+            msg = _('Hold down “Control”, or “Command” on a Mac, to select more than one.')\n             help_text = form_field.help_text\n             form_field.help_text = format_lazy('{} {}', help_text, msg) if help_text else msg\n         return form_field\n@@ -1202,7 +1202,7 @@ def response_add(self, request, obj, post_url_continue=None):\n                 \"_saveasnew\" in request.POST and self.save_as_continue and\n                 self.has_change_permission(request, obj)\n         ):\n-            msg = _('The {name} \"{obj}\" was added successfully.')\n+            msg = _('The {name} “{obj}” was added successfully.')\n             if self.has_change_permission(request, obj):\n                 msg += ' ' + _('You may edit it again below.')\n             self.message_user(request, format_html(msg, **msg_dict), messages.SUCCESS)\n@@ -1216,7 +1216,7 @@ def response_add(self, request, obj, post_url_continue=None):\n \n         elif \"_addanother\" in request.POST:\n             msg = format_html(\n-                _('The {name} \"{obj}\" was added successfully. You may add another {name} below.'),\n+                _('The {name} “{obj}” was added successfully. You may add another {name} below.'),\n                 **msg_dict\n             )\n             self.message_user(request, msg, messages.SUCCESS)\n@@ -1226,7 +1226,7 @@ def response_add(self, request, obj, post_url_continue=None):\n \n         else:\n             msg = format_html(\n-                _('The {name} \"{obj}\" was added successfully.'),\n+                _('The {name} “{obj}” was added successfully.'),\n                 **msg_dict\n             )\n             self.message_user(request, msg, messages.SUCCESS)\n@@ -1266,7 +1266,7 @@ def response_change(self, request, obj):\n         }\n         if \"_continue\" in request.POST:\n             msg = format_html(\n-                _('The {name} \"{obj}\" was changed successfully. You may edit it again below.'),\n+                _('The {name} “{obj}” was changed successfully. You may edit it again below.'),\n                 **msg_dict\n             )\n             self.message_user(request, msg, messages.SUCCESS)\n@@ -1276,7 +1276,7 @@ def response_change(self, request, obj):\n \n         elif \"_saveasnew\" in request.POST:\n             msg = format_html(\n-                _('The {name} \"{obj}\" was added successfully. You may edit it again below.'),\n+                _('The {name} “{obj}” was added successfully. You may edit it again below.'),\n                 **msg_dict\n             )\n             self.message_user(request, msg, messages.SUCCESS)\n@@ -1289,7 +1289,7 @@ def response_change(self, request, obj):\n \n         elif \"_addanother\" in request.POST:\n             msg = format_html(\n-                _('The {name} \"{obj}\" was changed successfully. You may add another {name} below.'),\n+                _('The {name} “{obj}” was changed successfully. You may add another {name} below.'),\n                 **msg_dict\n             )\n             self.message_user(request, msg, messages.SUCCESS)\n@@ -1301,7 +1301,7 @@ def response_change(self, request, obj):\n \n         else:\n             msg = format_html(\n-                _('The {name} \"{obj}\" was changed successfully.'),\n+                _('The {name} “{obj}” was changed successfully.'),\n                 **msg_dict\n             )\n             self.message_user(request, msg, messages.SUCCESS)\n@@ -1422,7 +1422,7 @@ def response_delete(self, request, obj_display, obj_id):\n \n         self.message_user(\n             request,\n-            _('The %(name)s \"%(obj)s\" was deleted successfully.') % {\n+            _('The %(name)s “%(obj)s” was deleted successfully.') % {\n                 'name': opts.verbose_name,\n                 'obj': obj_display,\n             },\n@@ -1501,7 +1501,7 @@ def _get_obj_does_not_exist_redirect(self, request, opts, object_id):\n         Create a message informing the user that the object doesn't exist\n         and return a redirect to the admin index page.\n         \"\"\"\n-        msg = _(\"\"\"%(name)s with ID \"%(key)s\" doesn't exist. Perhaps it was deleted?\"\"\") % {\n+        msg = _('%(name)s with ID “%(key)s” doesn’t exist. Perhaps it was deleted?') % {\n             'name': opts.verbose_name,\n             'key': unquote(object_id),\n         }\ndiff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -73,7 +73,7 @@ class UserCreationForm(forms.ModelForm):\n     password.\n     \"\"\"\n     error_messages = {\n-        'password_mismatch': _(\"The two password fields didn't match.\"),\n+        'password_mismatch': _('The two password fields didn’t match.'),\n     }\n     password1 = forms.CharField(\n         label=_(\"Password\"),\n@@ -134,9 +134,9 @@ class UserChangeForm(forms.ModelForm):\n     password = ReadOnlyPasswordHashField(\n         label=_(\"Password\"),\n         help_text=_(\n-            \"Raw passwords are not stored, so there is no way to see this \"\n-            \"user's password, but you can change the password using \"\n-            \"<a href=\\\"{}\\\">this form</a>.\"\n+            'Raw passwords are not stored, so there is no way to see this '\n+            'user’s password, but you can change the password using '\n+            '<a href=\"{}\">this form</a>.'\n         ),\n     )\n \n@@ -314,7 +314,7 @@ class SetPasswordForm(forms.Form):\n     password\n     \"\"\"\n     error_messages = {\n-        'password_mismatch': _(\"The two password fields didn't match.\"),\n+        'password_mismatch': _('The two password fields didn’t match.'),\n     }\n     new_password1 = forms.CharField(\n         label=_(\"New password\"),\n@@ -387,7 +387,7 @@ class AdminPasswordChangeForm(forms.Form):\n     A form used to change the password of a user in the admin interface.\n     \"\"\"\n     error_messages = {\n-        'password_mismatch': _(\"The two password fields didn't match.\"),\n+        'password_mismatch': _('The two password fields didn’t match.'),\n     }\n     required_css_class = 'required'\n     password1 = forms.CharField(\ndiff --git a/django/contrib/auth/password_validation.py b/django/contrib/auth/password_validation.py\n--- a/django/contrib/auth/password_validation.py\n+++ b/django/contrib/auth/password_validation.py\n@@ -154,7 +154,7 @@ def validate(self, password, user=None):\n                     )\n \n     def get_help_text(self):\n-        return _(\"Your password can't be too similar to your other personal information.\")\n+        return _('Your password can’t be too similar to your other personal information.')\n \n \n class CommonPasswordValidator:\n@@ -185,7 +185,7 @@ def validate(self, password, user=None):\n             )\n \n     def get_help_text(self):\n-        return _(\"Your password can't be a commonly used password.\")\n+        return _('Your password can’t be a commonly used password.')\n \n \n class NumericPasswordValidator:\n@@ -200,4 +200,4 @@ def validate(self, password, user=None):\n             )\n \n     def get_help_text(self):\n-        return _(\"Your password can't be entirely numeric.\")\n+        return _('Your password can’t be entirely numeric.')\ndiff --git a/django/contrib/contenttypes/views.py b/django/contrib/contenttypes/views.py\n--- a/django/contrib/contenttypes/views.py\n+++ b/django/contrib/contenttypes/views.py\n@@ -21,7 +21,7 @@ def shortcut(request, content_type_id, object_id):\n         obj = content_type.get_object_for_this_type(pk=object_id)\n     except (ObjectDoesNotExist, ValueError):\n         raise Http404(\n-            _(\"Content type %(ct_id)s object %(obj_id)s doesn't exist\") %\n+            _('Content type %(ct_id)s object %(obj_id)s doesn’t exist') %\n             {'ct_id': content_type_id, 'obj_id': object_id}\n         )\n \n@@ -29,7 +29,7 @@ def shortcut(request, content_type_id, object_id):\n         get_absolute_url = obj.get_absolute_url\n     except AttributeError:\n         raise Http404(\n-            _(\"%(ct_name)s objects don't have a get_absolute_url() method\") %\n+            _('%(ct_name)s objects don’t have a get_absolute_url() method') %\n             {'ct_name': content_type.name}\n         )\n     absurl = get_absolute_url()\ndiff --git a/django/contrib/flatpages/forms.py b/django/contrib/flatpages/forms.py\n--- a/django/contrib/flatpages/forms.py\n+++ b/django/contrib/flatpages/forms.py\n@@ -9,7 +9,7 @@ class FlatpageForm(forms.ModelForm):\n         label=_(\"URL\"),\n         max_length=100,\n         regex=r'^[-\\w/\\.~]+$',\n-        help_text=_(\"Example: '/about/contact/'. Make sure to have leading and trailing slashes.\"),\n+        help_text=_('Example: “/about/contact/”. Make sure to have leading and trailing slashes.'),\n         error_messages={\n             \"invalid\": _(\n                 \"This value must contain only letters, numbers, dots, \"\n@@ -26,7 +26,7 @@ def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n         if not self._trailing_slash_required():\n             self.fields['url'].help_text = _(\n-                \"Example: '/about/contact'. Make sure to have a leading slash.\"\n+                'Example: “/about/contact”. Make sure to have a leading slash.'\n             )\n \n     def _trailing_slash_required(self):\ndiff --git a/django/contrib/flatpages/migrations/0001_initial.py b/django/contrib/flatpages/migrations/0001_initial.py\n--- a/django/contrib/flatpages/migrations/0001_initial.py\n+++ b/django/contrib/flatpages/migrations/0001_initial.py\n@@ -18,8 +18,8 @@ class Migration(migrations.Migration):\n                 ('enable_comments', models.BooleanField(default=False, verbose_name='enable comments')),\n                 ('template_name', models.CharField(\n                     help_text=(\n-                        \"Example: 'flatpages/contact_page.html'. If this isn't provided, the system will use \"\n-                        \"'flatpages/default.html'.\"\n+                        'Example: “flatpages/contact_page.html”. If this isn’t provided, the system will use '\n+                        '“flatpages/default.html”.'\n                     ), max_length=70, verbose_name='template name', blank=True\n                 )),\n                 ('registration_required', models.BooleanField(\ndiff --git a/django/contrib/flatpages/models.py b/django/contrib/flatpages/models.py\n--- a/django/contrib/flatpages/models.py\n+++ b/django/contrib/flatpages/models.py\n@@ -15,8 +15,8 @@ class FlatPage(models.Model):\n         max_length=70,\n         blank=True,\n         help_text=_(\n-            \"Example: 'flatpages/contact_page.html'. If this isn't provided, \"\n-            \"the system will use 'flatpages/default.html'.\"\n+            'Example: “flatpages/contact_page.html”. If this isn’t provided, '\n+            'the system will use “flatpages/default.html”.'\n         ),\n     )\n     registration_required = models.BooleanField(\ndiff --git a/django/contrib/gis/db/models/fields.py b/django/contrib/gis/db/models/fields.py\n--- a/django/contrib/gis/db/models/fields.py\n+++ b/django/contrib/gis/db/models/fields.py\n@@ -198,7 +198,7 @@ class GeometryField(BaseSpatialField):\n     \"\"\"\n     The base Geometry field -- maps to the OpenGIS Specification Geometry type.\n     \"\"\"\n-    description = _(\"The base Geometry field -- maps to the OpenGIS Specification Geometry type.\")\n+    description = _('The base Geometry field — maps to the OpenGIS Specification Geometry type.')\n     form_class = forms.GeometryField\n     # The OpenGIS Geometry name.\n     geom_type = 'GEOMETRY'\ndiff --git a/django/contrib/gis/views.py b/django/contrib/gis/views.py\n--- a/django/contrib/gis/views.py\n+++ b/django/contrib/gis/views.py\n@@ -11,7 +11,7 @@ def feed(request, url, feed_dict=None):\n     try:\n         f = feed_dict[slug]\n     except KeyError:\n-        raise Http404(_(\"Slug %r isn't registered.\") % slug)\n+        raise Http404(_('Slug %r isn’t registered.') % slug)\n \n     instance = f()\n     instance.feed_url = getattr(f, 'feed_url', None) or request.path\ndiff --git a/django/contrib/postgres/fields/hstore.py b/django/contrib/postgres/fields/hstore.py\n--- a/django/contrib/postgres/fields/hstore.py\n+++ b/django/contrib/postgres/fields/hstore.py\n@@ -15,7 +15,7 @@ class HStoreField(CheckFieldDefaultMixin, Field):\n     empty_strings_allowed = False\n     description = _('Map of strings to strings/nulls')\n     default_error_messages = {\n-        'not_a_string': _('The value of \"%(key)s\" is not a string or null.'),\n+        'not_a_string': _('The value of “%(key)s” is not a string or null.'),\n     }\n     _default_hint = ('dict', '{}')\n \ndiff --git a/django/contrib/postgres/forms/jsonb.py b/django/contrib/postgres/forms/jsonb.py\n--- a/django/contrib/postgres/forms/jsonb.py\n+++ b/django/contrib/postgres/forms/jsonb.py\n@@ -16,7 +16,7 @@ class JSONString(str):\n \n class JSONField(forms.CharField):\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value must be valid JSON.\"),\n+        'invalid': _('“%(value)s” value must be valid JSON.'),\n     }\n     widget = forms.Textarea\n \ndiff --git a/django/contrib/redirects/migrations/0001_initial.py b/django/contrib/redirects/migrations/0001_initial.py\n--- a/django/contrib/redirects/migrations/0001_initial.py\n+++ b/django/contrib/redirects/migrations/0001_initial.py\n@@ -20,11 +20,11 @@ class Migration(migrations.Migration):\n                 )),\n                 ('old_path', models.CharField(\n                     help_text=(\n-                        \"This should be an absolute path, excluding the domain name. Example: '/events/search/'.\"\n+                        'This should be an absolute path, excluding the domain name. Example: “/events/search/”.'\n                     ), max_length=200, verbose_name='redirect from', db_index=True\n                 )),\n                 ('new_path', models.CharField(\n-                    help_text=\"This can be either an absolute path (as above) or a full URL starting with 'http://'.\",\n+                    help_text='This can be either an absolute path (as above) or a full URL starting with “http://”.',\n                     max_length=200, verbose_name='redirect to', blank=True\n                 )),\n             ],\ndiff --git a/django/contrib/redirects/models.py b/django/contrib/redirects/models.py\n--- a/django/contrib/redirects/models.py\n+++ b/django/contrib/redirects/models.py\n@@ -9,13 +9,13 @@ class Redirect(models.Model):\n         _('redirect from'),\n         max_length=200,\n         db_index=True,\n-        help_text=_(\"This should be an absolute path, excluding the domain name. Example: '/events/search/'.\"),\n+        help_text=_('This should be an absolute path, excluding the domain name. Example: “/events/search/”.'),\n     )\n     new_path = models.CharField(\n         _('redirect to'),\n         max_length=200,\n         blank=True,\n-        help_text=_(\"This can be either an absolute path (as above) or a full URL starting with 'http://'.\"),\n+        help_text=_('This can be either an absolute path (as above) or a full URL starting with “http://”.'),\n     )\n \n     class Meta:\ndiff --git a/django/core/validators.py b/django/core/validators.py\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -236,14 +236,14 @@ def __eq__(self, other):\n validate_slug = RegexValidator(\n     slug_re,\n     # Translators: \"letters\" means latin letters: a-z and A-Z.\n-    _(\"Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.\"),\n+    _('Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.'),\n     'invalid'\n )\n \n slug_unicode_re = _lazy_re_compile(r'^[-\\w]+\\Z')\n validate_unicode_slug = RegexValidator(\n     slug_unicode_re,\n-    _(\"Enter a valid 'slug' consisting of Unicode letters, numbers, underscores, or hyphens.\"),\n+    _('Enter a valid “slug” consisting of Unicode letters, numbers, underscores, or hyphens.'),\n     'invalid'\n )\n \n@@ -466,8 +466,8 @@ def __eq__(self, other):\n @deconstructible\n class FileExtensionValidator:\n     message = _(\n-        \"File extension '%(extension)s' is not allowed. \"\n-        \"Allowed extensions are: '%(allowed_extensions)s'.\"\n+        'File extension “%(extension)s” is not allowed. '\n+        'Allowed extensions are: %(allowed_extensions)s.'\n     )\n     code = 'invalid_extension'\n \ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -899,7 +899,7 @@ class AutoField(Field):\n \n     empty_strings_allowed = False\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value must be an integer.\"),\n+        'invalid': _('“%(value)s” value must be an integer.'),\n     }\n \n     def __init__(self, *args, **kwargs):\n@@ -986,8 +986,8 @@ def rel_db_type(self, connection):\n class BooleanField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value must be either True or False.\"),\n-        'invalid_nullable': _(\"'%(value)s' value must be either True, False, or None.\"),\n+        'invalid': _('“%(value)s” value must be either True or False.'),\n+        'invalid_nullable': _('“%(value)s” value must be either True, False, or None.'),\n     }\n     description = _(\"Boolean (Either True or False)\")\n \n@@ -1143,10 +1143,10 @@ def _check_fix_default_value(self):\n class DateField(DateTimeCheckMixin, Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value has an invalid date format. It must be \"\n-                     \"in YYYY-MM-DD format.\"),\n-        'invalid_date': _(\"'%(value)s' value has the correct format (YYYY-MM-DD) \"\n-                          \"but it is an invalid date.\"),\n+        'invalid': _('“%(value)s” value has an invalid date format. It must be '\n+                     'in YYYY-MM-DD format.'),\n+        'invalid_date': _('“%(value)s” value has the correct format (YYYY-MM-DD) '\n+                          'but it is an invalid date.'),\n     }\n     description = _(\"Date (without time)\")\n \n@@ -1286,13 +1286,13 @@ def formfield(self, **kwargs):\n class DateTimeField(DateField):\n     empty_strings_allowed = False\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ] format.\"),\n-        'invalid_date': _(\"'%(value)s' value has the correct format \"\n+        'invalid': _('“%(value)s” value has an invalid format. It must be in '\n+                     'YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ] format.'),\n+        'invalid_date': _(\"“%(value)s” value has the correct format \"\n                           \"(YYYY-MM-DD) but it is an invalid date.\"),\n-        'invalid_datetime': _(\"'%(value)s' value has the correct format \"\n-                              \"(YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]) \"\n-                              \"but it is an invalid date/time.\"),\n+        'invalid_datetime': _('“%(value)s” value has the correct format '\n+                              '(YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]) '\n+                              'but it is an invalid date/time.'),\n     }\n     description = _(\"Date (with time)\")\n \n@@ -1442,7 +1442,7 @@ def formfield(self, **kwargs):\n class DecimalField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value must be a decimal number.\"),\n+        'invalid': _('“%(value)s” value must be a decimal number.'),\n     }\n     description = _(\"Decimal number\")\n \n@@ -1583,8 +1583,8 @@ class DurationField(Field):\n     \"\"\"\n     empty_strings_allowed = False\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n+        'invalid': _('“%(value)s” value has an invalid format. It must be in '\n+                     '[DD] [[HH:]MM:]ss[.uuuuuu] format.')\n     }\n     description = _(\"Duration\")\n \n@@ -1725,7 +1725,7 @@ def get_internal_type(self):\n class FloatField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value must be a float.\"),\n+        'invalid': _('“%(value)s” value must be a float.'),\n     }\n     description = _(\"Floating point number\")\n \n@@ -1760,7 +1760,7 @@ def formfield(self, **kwargs):\n class IntegerField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value must be an integer.\"),\n+        'invalid': _('“%(value)s” value must be an integer.'),\n     }\n     description = _(\"Integer\")\n \n@@ -1967,8 +1967,8 @@ def formfield(self, **kwargs):\n \n class NullBooleanField(BooleanField):\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value must be either None, True or False.\"),\n-        'invalid_nullable': _(\"'%(value)s' value must be either None, True or False.\"),\n+        'invalid': _('“%(value)s” value must be either None, True or False.'),\n+        'invalid_nullable': _('“%(value)s” value must be either None, True or False.'),\n     }\n     description = _(\"Boolean (Either True, False or None)\")\n \n@@ -2099,10 +2099,10 @@ def formfield(self, **kwargs):\n class TimeField(DateTimeCheckMixin, Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"HH:MM[:ss[.uuuuuu]] format.\"),\n-        'invalid_time': _(\"'%(value)s' value has the correct format \"\n-                          \"(HH:MM[:ss[.uuuuuu]]) but it is an invalid time.\"),\n+        'invalid': _('“%(value)s” value has an invalid format. It must be in '\n+                     'HH:MM[:ss[.uuuuuu]] format.'),\n+        'invalid_time': _('“%(value)s” value has the correct format '\n+                          '(HH:MM[:ss[.uuuuuu]]) but it is an invalid time.'),\n     }\n     description = _(\"Time\")\n \n@@ -2317,7 +2317,7 @@ def to_python(self, value):\n \n class UUIDField(Field):\n     default_error_messages = {\n-        'invalid': _(\"'%(value)s' is not a valid UUID.\"),\n+        'invalid': _('“%(value)s” is not a valid UUID.'),\n     }\n     description = _('Universally unique identifier')\n     empty_strings_allowed = False\ndiff --git a/django/forms/models.py b/django/forms/models.py\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1272,7 +1272,7 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         'list': _('Enter a list of values.'),\n         'invalid_choice': _('Select a valid choice. %(value)s is not one of the'\n                             ' available choices.'),\n-        'invalid_pk_value': _('\"%(pk)s\" is not a valid value.')\n+        'invalid_pk_value': _('“%(pk)s” is not a valid value.')\n     }\n \n     def __init__(self, queryset, **kwargs):\ndiff --git a/django/forms/utils.py b/django/forms/utils.py\n--- a/django/forms/utils.py\n+++ b/django/forms/utils.py\n@@ -159,7 +159,7 @@ def from_current_timezone(value):\n             return timezone.make_aware(value, current_timezone)\n         except Exception as exc:\n             raise ValidationError(\n-                _('%(datetime)s couldn\\'t be interpreted '\n+                _('%(datetime)s couldn’t be interpreted '\n                   'in time zone %(current_timezone)s; it '\n                   'may be ambiguous or it may not exist.'),\n                 code='ambiguous_timezone',\ndiff --git a/django/views/csrf.py b/django/views/csrf.py\n--- a/django/views/csrf.py\n+++ b/django/views/csrf.py\n@@ -112,21 +112,21 @@ def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME):\n         'reason': reason,\n         'no_referer': reason == REASON_NO_REFERER,\n         'no_referer1': _(\n-            \"You are seeing this message because this HTTPS site requires a \"\n-            \"'Referer header' to be sent by your Web browser, but none was \"\n-            \"sent. This header is required for security reasons, to ensure \"\n-            \"that your browser is not being hijacked by third parties.\"),\n+            'You are seeing this message because this HTTPS site requires a '\n+            '“Referer header” to be sent by your Web browser, but none was '\n+            'sent. This header is required for security reasons, to ensure '\n+            'that your browser is not being hijacked by third parties.'),\n         'no_referer2': _(\n-            \"If you have configured your browser to disable 'Referer' headers, \"\n-            \"please re-enable them, at least for this site, or for HTTPS \"\n-            \"connections, or for 'same-origin' requests.\"),\n+            'If you have configured your browser to disable “Referer” headers, '\n+            'please re-enable them, at least for this site, or for HTTPS '\n+            'connections, or for “same-origin” requests.'),\n         'no_referer3': _(\n-            \"If you are using the <meta name=\\\"referrer\\\" \"\n-            \"content=\\\"no-referrer\\\"> tag or including the 'Referrer-Policy: \"\n-            \"no-referrer' header, please remove them. The CSRF protection \"\n-            \"requires the 'Referer' header to do strict referer checking. If \"\n-            \"you're concerned about privacy, use alternatives like \"\n-            \"<a rel=\\\"noreferrer\\\" ...> for links to third-party sites.\"),\n+            'If you are using the <meta name=\"referrer\" '\n+            'content=\\\"no-referrer\\\"> tag or including the “Referrer-Policy: '\n+            'no-referrer” header, please remove them. The CSRF protection '\n+            'requires the “Referer” header to do strict referer checking. If '\n+            'you’re concerned about privacy, use alternatives like '\n+            '<a rel=\\\"noreferrer\\\" …> for links to third-party sites.'),\n         'no_cookie': reason == REASON_NO_CSRF_COOKIE,\n         'no_cookie1': _(\n             \"You are seeing this message because this site requires a CSRF \"\n@@ -134,9 +134,9 @@ def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME):\n             \"security reasons, to ensure that your browser is not being \"\n             \"hijacked by third parties.\"),\n         'no_cookie2': _(\n-            \"If you have configured your browser to disable cookies, please \"\n-            \"re-enable them, at least for this site, or for 'same-origin' \"\n-            \"requests.\"),\n+            'If you have configured your browser to disable cookies, please '\n+            're-enable them, at least for this site, or for “same-origin” '\n+            'requests.'),\n         'DEBUG': settings.DEBUG,\n         'docs_version': get_docs_version(),\n         'more': _(\"More information is available with DEBUG=True.\"),\ndiff --git a/django/views/generic/dates.py b/django/views/generic/dates.py\n--- a/django/views/generic/dates.py\n+++ b/django/views/generic/dates.py\n@@ -620,7 +620,7 @@ def _date_from_string(year, year_format, month='', month_format='', day='', day_\n     try:\n         return datetime.datetime.strptime(datestr, format).date()\n     except ValueError:\n-        raise Http404(_(\"Invalid date string '%(datestr)s' given format '%(format)s'\") % {\n+        raise Http404(_('Invalid date string “%(datestr)s” given format “%(format)s”') % {\n             'datestr': datestr,\n             'format': format,\n         })\ndiff --git a/django/views/generic/list.py b/django/views/generic/list.py\n--- a/django/views/generic/list.py\n+++ b/django/views/generic/list.py\n@@ -64,7 +64,7 @@ def paginate_queryset(self, queryset, page_size):\n             if page == 'last':\n                 page_number = paginator.num_pages\n             else:\n-                raise Http404(_(\"Page is not 'last', nor can it be converted to an int.\"))\n+                raise Http404(_('Page is not “last”, nor can it be converted to an int.'))\n         try:\n             page = paginator.page(page_number)\n             return (paginator, page, page.object_list, page.has_other_pages())\n@@ -151,7 +151,7 @@ def get(self, request, *args, **kwargs):\n             else:\n                 is_empty = not self.object_list\n             if is_empty:\n-                raise Http404(_(\"Empty list and '%(class_name)s.allow_empty' is False.\") % {\n+                raise Http404(_('Empty list and “%(class_name)s.allow_empty” is False.') % {\n                     'class_name': self.__class__.__name__,\n                 })\n         context = self.get_context_data()\ndiff --git a/django/views/static.py b/django/views/static.py\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -39,7 +39,7 @@ def serve(request, path, document_root=None, show_indexes=False):\n             return directory_index(path, fullpath)\n         raise Http404(_(\"Directory indexes are not allowed here.\"))\n     if not fullpath.exists():\n-        raise Http404(_('\"%(path)s\" does not exist') % {'path': fullpath})\n+        raise Http404(_('“%(path)s” does not exist') % {'path': fullpath})\n     # Respect the If-Modified-Since header.\n     statobj = fullpath.stat()\n     if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'),\n",
  "test_patch": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1115,7 +1115,7 @@ def test_no_user(self):\n             '{{ entry|safe }}'\n             '{% endfor %}'\n         )\n-        self.assertEqual(t.render(Context({})), 'Added \"<User: jondoe>\".')\n+        self.assertEqual(t.render(Context({})), 'Added “<User: jondoe>”.')\n \n     def test_missing_args(self):\n         msg = \"'get_admin_log' statements require two arguments\"\ndiff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -105,7 +105,7 @@ def test_model_index(self):\n \n     def test_template_detail(self):\n         response = self.client.get(reverse('django-admindocs-templates', args=['admin_doc/template_detail.html']))\n-        self.assertContains(response, '<h1>Template: \"admin_doc/template_detail.html\"</h1>', html=True)\n+        self.assertContains(response, '<h1>Template: <q>admin_doc/template_detail.html</q></h1>', html=True)\n \n     def test_missing_docutils(self):\n         utils.docutils_is_available = False\ndiff --git a/tests/admin_utils/test_logentry.py b/tests/admin_utils/test_logentry.py\n--- a/tests/admin_utils/test_logentry.py\n+++ b/tests/admin_utils/test_logentry.py\n@@ -131,9 +131,9 @@ def test_logentry_change_message_formsets(self):\n         )\n         self.assertEqual(\n             logentry.get_change_message(),\n-            'Changed Domain. Added article \"Added article\". '\n-            'Changed Title and not_a_form_field for article \"Changed Title\". '\n-            'Deleted article \"Title second article\".'\n+            'Changed Domain. Added article “Added article”. '\n+            'Changed Title and not_a_form_field for article “Changed Title”. '\n+            'Deleted article “Title second article”.'\n         )\n \n         with translation.override('fr'):\ndiff --git a/tests/admin_views/admin.py b/tests/admin_views/admin.py\n--- a/tests/admin_views/admin.py\n+++ b/tests/admin_views/admin.py\n@@ -899,7 +899,7 @@ class StateAdminForm(forms.ModelForm):\n     class Meta:\n         model = State\n         fields = '__all__'\n-        labels = {\"name\": \"State name (from form's Meta.labels)\"}\n+        labels = {'name': 'State name (from form’s Meta.labels)'}\n \n     @property\n     def changed_data(self):\ndiff --git a/tests/admin_views/test_history_view.py b/tests/admin_views/test_history_view.py\n--- a/tests/admin_views/test_history_view.py\n+++ b/tests/admin_views/test_history_view.py\n@@ -39,7 +39,7 @@ def test_changed_message_uses_form_lables(self):\n         logentry = LogEntry.objects.filter(content_type__model__iexact='state').latest('id')\n         self.assertEqual(\n             logentry.get_change_message(),\n-            'Changed State name (from form\\'s Meta.labels), '\n+            'Changed State name (from form’s Meta.labels), '\n             'nolabel_form_field and not_a_form_field. '\n-            'Changed City verbose_name for city \"%s\".' % city\n+            'Changed City verbose_name for city “%s”.' % city\n         )\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -227,7 +227,7 @@ def test_basic_edit_GET_string_PK(self):\n         self.assertRedirects(response, reverse('admin:index'))\n         self.assertEqual(\n             [m.message for m in response.context['messages']],\n-            [\"\"\"section with ID \"abc/<b>\" doesn't exist. Perhaps it was deleted?\"\"\"]\n+            ['section with ID “abc/<b>” doesn’t exist. Perhaps it was deleted?']\n         )\n \n     def test_basic_edit_GET_old_url_redirect(self):\n@@ -248,7 +248,7 @@ def test_basic_inheritance_GET_string_PK(self):\n         self.assertRedirects(response, reverse('admin:index'))\n         self.assertEqual(\n             [m.message for m in response.context['messages']],\n-            [\"\"\"super villain with ID \"abc\" doesn't exist. Perhaps it was deleted?\"\"\"]\n+            ['super villain with ID “abc” doesn’t exist. Perhaps it was deleted?']\n         )\n \n     def test_basic_add_POST(self):\n@@ -1705,7 +1705,7 @@ def test_add_view(self):\n         self.assertEqual(Article.objects.count(), 4)\n         article = Article.objects.latest('pk')\n         response = self.client.get(reverse('admin:admin_views_article_change', args=(article.pk,)))\n-        self.assertContains(response, '<li class=\"success\">The article \"Døm ikke\" was added successfully.</li>')\n+        self.assertContains(response, '<li class=\"success\">The article “Døm ikke” was added successfully.</li>')\n         article.delete()\n         self.client.get(reverse('admin:logout'))\n \n@@ -2113,7 +2113,7 @@ def test_delete_view_nonexistent_obj(self):\n         self.assertRedirects(response, reverse('admin:index'))\n         self.assertEqual(\n             [m.message for m in response.context['messages']],\n-            [\"\"\"article with ID \"nonexistent\" doesn't exist. Perhaps it was deleted?\"\"\"]\n+            ['article with ID “nonexistent” doesn’t exist. Perhaps it was deleted?']\n         )\n \n     def test_history_view(self):\n@@ -2170,7 +2170,7 @@ def test_history_view_bad_url(self):\n         self.assertRedirects(response, reverse('admin:index'))\n         self.assertEqual(\n             [m.message for m in response.context['messages']],\n-            [\"\"\"article with ID \"foo\" doesn't exist. Perhaps it was deleted?\"\"\"]\n+            ['article with ID “foo” doesn’t exist. Perhaps it was deleted?']\n         )\n \n     def test_conditionally_show_add_section_link(self):\n@@ -2399,7 +2399,7 @@ def test_post_save_message_no_forbidden_links_visible(self):\n         response = self.client.post(reverse('admin:admin_views_article_add'), post_data, follow=True)\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The article \"Fun &amp; games\" was added successfully.</li>',\n+            '<li class=\"success\">The article “Fun &amp; games” was added successfully.</li>',\n             html=True\n         )\n \n@@ -3689,7 +3689,7 @@ def test_change_view(self):\n                 self.assertRedirects(response, reverse('admin:index'))\n                 self.assertEqual(\n                     [m.message for m in response.context['messages']],\n-                    [\"\"\"empty model with ID \"1\" doesn't exist. Perhaps it was deleted?\"\"\"]\n+                    ['empty model with ID “1” doesn’t exist. Perhaps it was deleted?']\n                 )\n \n     def test_add_model_modeladmin_defer_qs(self):\n@@ -3709,8 +3709,8 @@ def test_add_model_modeladmin_defer_qs(self):\n         pk = CoverLetter.objects.all()[0].pk\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The cover letter \"<a href=\"%s\">'\n-            'Candidate, Best</a>\" was added successfully.</li>' %\n+            '<li class=\"success\">The cover letter “<a href=\"%s\">'\n+            'Candidate, Best</a>” was added successfully.</li>' %\n             reverse('admin:admin_views_coverletter_change', args=(pk,)), html=True\n         )\n \n@@ -3728,8 +3728,8 @@ def test_add_model_modeladmin_defer_qs(self):\n         sm = ShortMessage.objects.all()[0]\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The short message \"<a href=\"%s\">'\n-            '%s</a>\" was added successfully.</li>' %\n+            '<li class=\"success\">The short message “<a href=\"%s\">'\n+            '%s</a>” was added successfully.</li>' %\n             (reverse('admin:admin_views_shortmessage_change', args=(sm.pk,)), sm), html=True\n         )\n \n@@ -3750,8 +3750,8 @@ def test_add_model_modeladmin_only_qs(self):\n         pk = Telegram.objects.all()[0].pk\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The telegram \"<a href=\"%s\">'\n-            'Urgent telegram</a>\" was added successfully.</li>' %\n+            '<li class=\"success\">The telegram “<a href=\"%s\">'\n+            'Urgent telegram</a>” was added successfully.</li>' %\n             reverse('admin:admin_views_telegram_change', args=(pk,)), html=True\n         )\n \n@@ -3769,8 +3769,8 @@ def test_add_model_modeladmin_only_qs(self):\n         p = Paper.objects.all()[0]\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The paper \"<a href=\"%s\">'\n-            '%s</a>\" was added successfully.</li>' %\n+            '<li class=\"success\">The paper “<a href=\"%s\">'\n+            '%s</a>” was added successfully.</li>' %\n             (reverse('admin:admin_views_paper_change', args=(p.pk,)), p), html=True\n         )\n \n@@ -3795,8 +3795,8 @@ def test_edit_model_modeladmin_defer_qs(self):\n         # representation is set by model's __str__()\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The cover letter \"<a href=\"%s\">'\n-            'John Doe II</a>\" was changed successfully.</li>' %\n+            '<li class=\"success\">The cover letter “<a href=\"%s\">'\n+            'John Doe II</a>” was changed successfully.</li>' %\n             reverse('admin:admin_views_coverletter_change', args=(cl.pk,)), html=True\n         )\n \n@@ -3818,8 +3818,8 @@ def test_edit_model_modeladmin_defer_qs(self):\n         # instance representation is set by __str__().\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The short message \"<a href=\"%s\">'\n-            '%s</a>\" was changed successfully.</li>' %\n+            '<li class=\"success\">The short message “<a href=\"%s\">'\n+            '%s</a>” was changed successfully.</li>' %\n             (reverse('admin:admin_views_shortmessage_change', args=(sm.pk,)), sm), html=True\n         )\n \n@@ -3843,8 +3843,8 @@ def test_edit_model_modeladmin_only_qs(self):\n         # representation is set by model's __str__()\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The telegram \"<a href=\"%s\">'\n-            'Telegram without typo</a>\" was changed successfully.</li>' %\n+            '<li class=\"success\">The telegram “<a href=\"%s\">'\n+            'Telegram without typo</a>” was changed successfully.</li>' %\n             reverse('admin:admin_views_telegram_change', args=(t.pk,)), html=True\n         )\n \n@@ -3865,8 +3865,8 @@ def test_edit_model_modeladmin_only_qs(self):\n         # instance representation is set by __str__().\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The paper \"<a href=\"%s\">'\n-            '%s</a>\" was changed successfully.</li>' %\n+            '<li class=\"success\">The paper “<a href=\"%s\">'\n+            '%s</a>” was changed successfully.</li>' %\n             (reverse('admin:admin_views_paper_change', args=(p.pk,)), p), html=True\n         )\n \n@@ -5161,8 +5161,8 @@ def test_save_continue_editing_button(self):\n         response = self.client.get(new_user_url)\n         self.assertContains(\n             response,\n-            '<li class=\"success\">The user \"<a href=\"%s\">'\n-            '%s</a>\" was added successfully. You may edit it again below.</li>'\n+            '<li class=\"success\">The user “<a href=\"%s\">'\n+            '%s</a>” was added successfully. You may edit it again below.</li>'\n             % (new_user_url, new_user),\n             html=True,\n         )\n@@ -5175,7 +5175,7 @@ def test_password_mismatch(self):\n         })\n         self.assertEqual(response.status_code, 200)\n         self.assertFormError(response, 'adminform', 'password', [])\n-        self.assertFormError(response, 'adminform', 'password2', [\"The two password fields didn't match.\"])\n+        self.assertFormError(response, 'adminform', 'password2', ['The two password fields didn’t match.'])\n \n     def test_user_fk_add_popup(self):\n         \"\"\"User addition through a FK popup should return the appropriate JavaScript response.\"\"\"\ndiff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -181,7 +181,7 @@ class AdvisorAdmin(admin.ModelAdmin):\n         f = ma.formfield_for_dbfield(Advisor._meta.get_field('companies'), request=None)\n         self.assertEqual(\n             f.help_text,\n-            'Hold down \"Control\", or \"Command\" on a Mac, to select more than one.'\n+            'Hold down “Control”, or “Command” on a Mac, to select more than one.'\n         )\n \n \ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -236,7 +236,7 @@ def test_password_help_text(self):\n         form = UserCreationForm()\n         self.assertEqual(\n             form.fields['password1'].help_text,\n-            '<ul><li>Your password can&#x27;t be too similar to your other personal information.</li></ul>'\n+            '<ul><li>Your password can’t be too similar to your other personal information.</li></ul>'\n         )\n \n     @override_settings(AUTH_PASSWORD_VALIDATORS=[\ndiff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -178,7 +178,7 @@ def username(self):\n     def test_help_text(self):\n         self.assertEqual(\n             UserAttributeSimilarityValidator().get_help_text(),\n-            \"Your password can't be too similar to your other personal information.\"\n+            'Your password can’t be too similar to your other personal information.'\n         )\n \n \n@@ -210,7 +210,7 @@ def test_validate_django_supplied_file(self):\n     def test_help_text(self):\n         self.assertEqual(\n             CommonPasswordValidator().get_help_text(),\n-            \"Your password can't be a commonly used password.\"\n+            'Your password can’t be a commonly used password.'\n         )\n \n \n@@ -227,7 +227,7 @@ def test_validate(self):\n     def test_help_text(self):\n         self.assertEqual(\n             NumericPasswordValidator().get_help_text(),\n-            \"Your password can't be entirely numeric.\"\n+            'Your password can’t be entirely numeric.'\n         )\n \n \ndiff --git a/tests/flatpages_tests/test_forms.py b/tests/flatpages_tests/test_forms.py\n--- a/tests/flatpages_tests/test_forms.py\n+++ b/tests/flatpages_tests/test_forms.py\n@@ -51,8 +51,8 @@ def test_flatpage_requires_trailing_slash_with_append_slash(self):\n         with translation.override('en'):\n             self.assertEqual(\n                 form.fields['url'].help_text,\n-                \"Example: '/about/contact/'. Make sure to have leading and \"\n-                \"trailing slashes.\"\n+                'Example: “/about/contact/”. Make sure to have leading and '\n+                'trailing slashes.'\n             )\n             self.assertFalse(form.is_valid())\n             self.assertEqual(form.errors['url'], [\"URL is missing a trailing slash.\"])\n@@ -64,7 +64,7 @@ def test_flatpage_doesnt_requires_trailing_slash_without_append_slash(self):\n         with translation.override('en'):\n             self.assertEqual(\n                 form.fields['url'].help_text,\n-                \"Example: '/about/contact'. Make sure to have a leading slash.\"\n+                'Example: “/about/contact”. Make sure to have a leading slash.'\n             )\n \n     def test_flatpage_admin_form_url_uniqueness_validation(self):\ndiff --git a/tests/forms_tests/field_tests/test_imagefield.py b/tests/forms_tests/field_tests/test_imagefield.py\n--- a/tests/forms_tests/field_tests/test_imagefield.py\n+++ b/tests/forms_tests/field_tests/test_imagefield.py\n@@ -66,7 +66,7 @@ def test_file_extension_validation(self):\n         with open(img_path, 'rb') as img_file:\n             img_data = img_file.read()\n         img_file = SimpleUploadedFile('1x1.txt', img_data)\n-        with self.assertRaisesMessage(ValidationError, \"File extension 'txt' is not allowed.\"):\n+        with self.assertRaisesMessage(ValidationError, 'File extension “txt” is not allowed.'):\n             f.clean(img_file)\n \n     def test_widget_attrs_default_accept(self):\ndiff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -276,7 +276,7 @@ class SomeForm(Form):\n         self.assertHTMLEqual(\n             t.render(Context({'form': f})),\n             '<ul class=\"errorlist\"><li>field<ul class=\"errorlist\">'\n-            '<li>&quot;&lt;script&gt;&quot; is not a valid value.</li>'\n+            '<li>“&lt;script&gt;” is not a valid value.</li>'\n             '</ul></li></ul>'\n         )\n \ndiff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1275,7 +1275,7 @@ def test_identical_regex_doesnt_alter(self):\n             \"testapp\", \"model\", [(\"id\", models.AutoField(primary_key=True, validators=[\n                 RegexValidator(\n                     re.compile('^[-a-zA-Z0-9_]+\\\\Z'),\n-                    \"Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.\",\n+                    'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.',\n                     'invalid'\n                 )\n             ]))]\n@@ -1292,7 +1292,7 @@ def test_different_regex_does_alter(self):\n             \"testapp\", \"model\", [(\"id\", models.AutoField(primary_key=True, validators=[\n                 RegexValidator(\n                     re.compile('^[a-z]+\\\\Z', 32),\n-                    \"Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.\",\n+                    'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.',\n                     'invalid'\n                 )\n             ]))]\ndiff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -21,7 +21,7 @@ def test_to_python(self):\n         # Uses default rounding of ROUND_HALF_EVEN.\n         self.assertEqual(f.to_python(2.0625), Decimal('2.062'))\n         self.assertEqual(f.to_python(2.1875), Decimal('2.188'))\n-        msg = \"'abc' value must be a decimal number.\"\n+        msg = '“abc” value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \ndiff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -74,8 +74,8 @@ def test_invalid_string(self):\n         self.assertEqual(cm.exception.code, 'invalid')\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n-            \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+            '“not a datetime” value has an invalid format. '\n+            'It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.'\n         )\n \n \ndiff --git a/tests/model_fields/test_uuid.py b/tests/model_fields/test_uuid.py\n--- a/tests/model_fields/test_uuid.py\n+++ b/tests/model_fields/test_uuid.py\n@@ -133,7 +133,7 @@ def test_invalid_uuid(self):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('550e8400', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n-        self.assertEqual(cm.exception.message % cm.exception.params, \"'550e8400' is not a valid UUID.\")\n+        self.assertEqual(cm.exception.message % cm.exception.params, '“550e8400” is not a valid UUID.')\n \n     def test_uuid_instance_ok(self):\n         field = models.UUIDField()\ndiff --git a/tests/model_forms/test_uuid.py b/tests/model_forms/test_uuid.py\n--- a/tests/model_forms/test_uuid.py\n+++ b/tests/model_forms/test_uuid.py\n@@ -29,5 +29,5 @@ def test_update_save_error(self):\n \n     def test_model_multiple_choice_field_uuid_pk(self):\n         f = forms.ModelMultipleChoiceField(UUIDPK.objects.all())\n-        with self.assertRaisesMessage(ValidationError, \"'invalid_uuid' is not a valid UUID.\"):\n+        with self.assertRaisesMessage(ValidationError, '“invalid_uuid” is not a valid UUID.'):\n             f.clean(['invalid_uuid'])\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1358,7 +1358,7 @@ def test_save_with_data_errors(self):\n         self.assertEqual(f.errors['name'], ['This field is required.'])\n         self.assertEqual(\n             f.errors['slug'],\n-            [\"Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.\"]\n+            ['Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.']\n         )\n         self.assertEqual(f.cleaned_data, {'url': 'foo'})\n         msg = \"The Category could not be created because the data didn't validate.\"\ndiff --git a/tests/postgres_tests/test_hstore.py b/tests/postgres_tests/test_hstore.py\n--- a/tests/postgres_tests/test_hstore.py\n+++ b/tests/postgres_tests/test_hstore.py\n@@ -251,7 +251,7 @@ def test_not_a_string(self):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean({'a': 1}, None)\n         self.assertEqual(cm.exception.code, 'not_a_string')\n-        self.assertEqual(cm.exception.message % cm.exception.params, 'The value of \"a\" is not a string or null.')\n+        self.assertEqual(cm.exception.message % cm.exception.params, 'The value of “a” is not a string or null.')\n \n     def test_none_allowed_as_value(self):\n         field = HStoreField()\ndiff --git a/tests/postgres_tests/test_json.py b/tests/postgres_tests/test_json.py\n--- a/tests/postgres_tests/test_json.py\n+++ b/tests/postgres_tests/test_json.py\n@@ -426,7 +426,7 @@ def test_invalid(self):\n         field = forms.JSONField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('{some badly formed: json}')\n-        self.assertEqual(cm.exception.messages[0], \"'{some badly formed: json}' value must be valid JSON.\")\n+        self.assertEqual(cm.exception.messages[0], '“{some badly formed: json}” value must be valid JSON.')\n \n     def test_formfield(self):\n         model_field = JSONField()\ndiff --git a/tests/timezones/tests.py b/tests/timezones/tests.py\n--- a/tests/timezones/tests.py\n+++ b/tests/timezones/tests.py\n@@ -1103,8 +1103,8 @@ def test_form_with_non_existent_time(self):\n             self.assertFalse(form.is_valid())\n             self.assertEqual(\n                 form.errors['dt'], [\n-                    \"2011-03-27 02:30:00 couldn't be interpreted in time zone \"\n-                    \"Europe/Paris; it may be ambiguous or it may not exist.\"\n+                    '2011-03-27 02:30:00 couldn’t be interpreted in time zone '\n+                    'Europe/Paris; it may be ambiguous or it may not exist.'\n                 ]\n             )\n \n@@ -1114,8 +1114,8 @@ def test_form_with_ambiguous_time(self):\n             self.assertFalse(form.is_valid())\n             self.assertEqual(\n                 form.errors['dt'], [\n-                    \"2011-10-30 02:30:00 couldn't be interpreted in time zone \"\n-                    \"Europe/Paris; it may be ambiguous or it may not exist.\"\n+                    '2011-10-30 02:30:00 couldn’t be interpreted in time zone '\n+                    'Europe/Paris; it may be ambiguous or it may not exist.'\n                 ]\n             )\n \ndiff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -250,7 +250,7 @@ def test_format_lazy(self):\n \n         # The format string can be lazy. (string comes from contrib.admin)\n         s = format_lazy(\n-            gettext_lazy(\"Added {name} \\\"{object}\\\".\"),\n+            gettext_lazy('Added {name} “{object}”.'),\n             name='article', object='My first try',\n         )\n         with override('fr'):\ndiff --git a/tests/validation/test_error_messages.py b/tests/validation/test_error_messages.py\n--- a/tests/validation/test_error_messages.py\n+++ b/tests/validation/test_error_messages.py\n@@ -13,49 +13,49 @@ def _test_validation_messages(self, field, value, expected):\n \n     def test_autofield_field_raises_error_message(self):\n         f = models.AutoField(primary_key=True)\n-        self._test_validation_messages(f, 'fõo', [\"'fõo' value must be an integer.\"])\n+        self._test_validation_messages(f, 'fõo', ['“fõo” value must be an integer.'])\n \n     def test_integer_field_raises_error_message(self):\n         f = models.IntegerField()\n-        self._test_validation_messages(f, 'fõo', [\"'fõo' value must be an integer.\"])\n+        self._test_validation_messages(f, 'fõo', ['“fõo” value must be an integer.'])\n \n     def test_boolean_field_raises_error_message(self):\n         f = models.BooleanField()\n-        self._test_validation_messages(f, 'fõo', [\"'fõo' value must be either True or False.\"])\n+        self._test_validation_messages(f, 'fõo', ['“fõo” value must be either True or False.'])\n \n     def test_nullable_boolean_field_raises_error_message(self):\n         f = models.BooleanField(null=True)\n-        self._test_validation_messages(f, 'fõo', [\"'fõo' value must be either True, False, or None.\"])\n+        self._test_validation_messages(f, 'fõo', ['“fõo” value must be either True, False, or None.'])\n \n     def test_float_field_raises_error_message(self):\n         f = models.FloatField()\n-        self._test_validation_messages(f, 'fõo', [\"'fõo' value must be a float.\"])\n+        self._test_validation_messages(f, 'fõo', ['“fõo” value must be a float.'])\n \n     def test_decimal_field_raises_error_message(self):\n         f = models.DecimalField()\n-        self._test_validation_messages(f, 'fõo', [\"'fõo' value must be a decimal number.\"])\n+        self._test_validation_messages(f, 'fõo', ['“fõo” value must be a decimal number.'])\n \n     def test_null_boolean_field_raises_error_message(self):\n         f = models.NullBooleanField()\n-        self._test_validation_messages(f, 'fõo', [\"'fõo' value must be either None, True or False.\"])\n+        self._test_validation_messages(f, 'fõo', ['“fõo” value must be either None, True or False.'])\n \n     def test_date_field_raises_error_message(self):\n         f = models.DateField()\n         self._test_validation_messages(\n             f, 'fõo',\n-            [\"'fõo' value has an invalid date format. It must be in YYYY-MM-DD format.\"]\n+            ['“fõo” value has an invalid date format. It must be in YYYY-MM-DD format.']\n         )\n         self._test_validation_messages(\n             f, 'aaaa-10-10',\n-            [\"'aaaa-10-10' value has an invalid date format. It must be in YYYY-MM-DD format.\"]\n+            ['“aaaa-10-10” value has an invalid date format. It must be in YYYY-MM-DD format.']\n         )\n         self._test_validation_messages(\n             f, '2011-13-10',\n-            [\"'2011-13-10' value has the correct format (YYYY-MM-DD) but it is an invalid date.\"]\n+            ['“2011-13-10” value has the correct format (YYYY-MM-DD) but it is an invalid date.']\n         )\n         self._test_validation_messages(\n             f, '2011-10-32',\n-            [\"'2011-10-32' value has the correct format (YYYY-MM-DD) but it is an invalid date.\"]\n+            ['“2011-10-32” value has the correct format (YYYY-MM-DD) but it is an invalid date.']\n         )\n \n     def test_datetime_field_raises_error_message(self):\n@@ -63,18 +63,18 @@ def test_datetime_field_raises_error_message(self):\n         # Wrong format\n         self._test_validation_messages(\n             f, 'fõo',\n-            [\"'fõo' value has an invalid format. It must be in YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ] format.\"]\n+            ['“fõo” value has an invalid format. It must be in YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ] format.']\n         )\n         # Correct format but invalid date\n         self._test_validation_messages(\n             f, '2011-10-32',\n-            [\"'2011-10-32' value has the correct format (YYYY-MM-DD) but it is an invalid date.\"]\n+            ['“2011-10-32” value has the correct format (YYYY-MM-DD) but it is an invalid date.']\n         )\n         # Correct format but invalid date/time\n         self._test_validation_messages(\n             f, '2011-10-32 10:10',\n-            [\"'2011-10-32 10:10' value has the correct format (YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]) \"\n-             \"but it is an invalid date/time.\"]\n+            ['“2011-10-32 10:10” value has the correct format (YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]) '\n+             'but it is an invalid date/time.']\n         )\n \n     def test_time_field_raises_error_message(self):\n@@ -82,10 +82,10 @@ def test_time_field_raises_error_message(self):\n         # Wrong format\n         self._test_validation_messages(\n             f, 'fõo',\n-            [\"'fõo' value has an invalid format. It must be in HH:MM[:ss[.uuuuuu]] format.\"]\n+            ['“fõo” value has an invalid format. It must be in HH:MM[:ss[.uuuuuu]] format.']\n         )\n         # Correct format but invalid time\n         self._test_validation_messages(\n             f, '25:50',\n-            [\"'25:50' value has the correct format (HH:MM[:ss[.uuuuuu]]) but it is an invalid time.\"]\n+            ['“25:50” value has the correct format (HH:MM[:ss[.uuuuuu]]) but it is an invalid time.']\n         )\ndiff --git a/tests/view_tests/tests/test_csrf.py b/tests/view_tests/tests/test_csrf.py\n--- a/tests/view_tests/tests/test_csrf.py\n+++ b/tests/view_tests/tests/test_csrf.py\n@@ -44,22 +44,22 @@ def test_no_referer(self):\n         self.assertContains(\n             response,\n             'You are seeing this message because this HTTPS site requires a '\n-            '&#x27;Referer header&#x27; to be sent by your Web browser, but '\n+            '“Referer header” to be sent by your Web browser, but '\n             'none was sent.',\n             status_code=403,\n         )\n         self.assertContains(\n             response,\n-            'If you have configured your browser to disable &#x27;Referer&#x27; '\n+            'If you have configured your browser to disable “Referer” '\n             'headers, please re-enable them, at least for this site, or for '\n-            'HTTPS connections, or for &#x27;same-origin&#x27; requests.',\n+            'HTTPS connections, or for “same-origin” requests.',\n             status_code=403,\n         )\n         self.assertContains(\n             response,\n             'If you are using the &lt;meta name=&quot;referrer&quot; '\n             'content=&quot;no-referrer&quot;&gt; tag or including the '\n-            '&#x27;Referrer-Policy: no-referrer&#x27; header, please remove them.',\n+            '“Referrer-Policy: no-referrer” header, please remove them.',\n             status_code=403,\n         )\n \n",
  "problem_statement": "Improve typography of user facing strings.\nDescription\n\t\nInspired by comment: https://code.djangoproject.com/ticket/30399#comment:2\nPrefer:\n“” for quotes\n’ for contractions\n— rather than --\n… rather than ...\n",
  "hints_text": "​https://github.com/django/django/pull/11281\nAgreed, but we have to skip all messages that can appear in a shell output (see #30184).\nAs for me, #30184 is hopefully not the last word on this issue. Preventing all users from having good typographic output (that is real readability improvements) just because some systems will not make the effort to transition to UTF-8 is not fair. As we are wrapping those outputs anyway, I think that we should be able to detect the output encoding, and add some ascii simplification/conversion when the output does not support UTF-8.\nAgreed - It seems a shame that we can't have nice things because the Windows Command Prompt has been neglected for so long. There is an interesting ​article on how this is already being fixed, but it will take time until the majority of users do not have a broken command prompt. I was already looking into sprucing up some of the command output and was considering the exact same possibility of substituting some ASCII alternatives on terminals that do not support UTF-8. Give me a few weeks and I'll resurrect my branch for this to see if there is a possible way forward. In the meantime, we should stick with the policy of not supporting unicode in shell output. Also, out of interest, we only support Python 3.6+ for Django 3.0 which includes ​PEP 528 and ​PEP 529 and this may mean that issues such as #30184 and #30324 become a thing of the past anyway. I haven't tested this to make sure though, and the ability to disable unicode shell output would be a good idea anyway.\n+1 there. We should be able to push users forward at this point in history. Not exactly the same issue but we had a user on Django Dev hitting a unicode error on macOS too, which means they’d set a non-unicode locale (for unknown reason). I feel like we should be able to emit a decent warning in this kind of case linking to a doc explaining what they need to do. (I’ve found myself on servers with broken/primitive locales plenty of times too… similar would help there.) Anyhow, that’s just emoting at this point.",
  "created_at": "2019-04-25T02:38:11Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"{% get_admin_log %} works without specifying a user.\", \"test_help_text (auth_tests.test_validators.UserAttributeSimilarityValidatorTest)\", \"test_model_multiple_choice_field_uuid_pk (model_forms.test_uuid.ModelFormBaseTest)\", \"test_to_python (model_fields.test_decimalfield.DecimalFieldTests)\", \"m2m fields help text as it applies to admin app (#9321).\", \"test_password_help_text (auth_tests.test_forms.UserCreationFormTest)\", \"test_flatpage_doesnt_requires_trailing_slash_without_append_slash (flatpages_tests.test_forms.FlatpageAdminFormTests)\", \"test_flatpage_requires_trailing_slash_with_append_slash (flatpages_tests.test_forms.FlatpageAdminFormTests)\", \"test_help_text (auth_tests.test_validators.NumericPasswordValidatorTest)\", \"test_invalid_string (model_fields.test_durationfield.TestValidation)\", \"test_invalid_uuid (model_fields.test_uuid.TestValidation)\", \"test_help_text (auth_tests.test_validators.CommonPasswordValidatorTest)\", \"test_autofield_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_boolean_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_date_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_datetime_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_decimal_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_float_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_integer_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_null_boolean_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_nullable_boolean_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_time_field_raises_error_message (validation.test_error_messages.ValidationMessagesTest)\", \"test_error_messages_escaping (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_save_with_data_errors (model_forms.tests.ModelFormBasicTests)\", \"test_no_referer (view_tests.tests.test_csrf.CsrfViewTests)\", \"test_file_extension_validation (forms_tests.field_tests.test_imagefield.ImageFieldTest)\", \"test_form_with_ambiguous_time (timezones.tests.NewFormsTests)\", \"test_form_with_non_existent_time (timezones.tests.NewFormsTests)\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_changed_message_uses_form_lables (admin_views.test_history_view.AdminHistoryViewTests)\", \"test_add_model_modeladmin_defer_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_add_model_modeladmin_only_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_change_view (admin_views.tests.AdminCustomQuerysetTest)\", \"test_edit_model_modeladmin_defer_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_edit_model_modeladmin_only_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_password_mismatch (admin_views.tests.UserAdminTest)\", \"test_save_continue_editing_button (admin_views.tests.UserAdminTest)\", \"Test add view restricts access and actually adds items.\", \"test_delete_view_nonexistent_obj (admin_views.tests.AdminViewPermissionsTest)\", \"test_history_view_bad_url (admin_views.tests.AdminViewPermissionsTest)\", \"test_post_save_message_no_forbidden_links_visible (admin_views.tests.AdminViewPermissionsTest)\", \"test_basic_edit_GET_string_PK (admin_views.tests.AdminViewBasicTest)\", \"test_basic_inheritance_GET_string_PK (admin_views.tests.AdminViewBasicTest)\"]",
  "PASS_TO_PASS": "[\"test_custom_user_pk_not_named_id (admin_changelist.tests.GetAdminLogTests)\", \"test_missing_args (admin_changelist.tests.GetAdminLogTests)\", \"test_non_integer_limit (admin_changelist.tests.GetAdminLogTests)\", \"test_without_as (admin_changelist.tests.GetAdminLogTests)\", \"test_without_for_user (admin_changelist.tests.GetAdminLogTests)\", \"test_modelchoicefield (forms_tests.tests.test_error_messages.ModelChoiceFieldErrorMessagesTestCase)\", \"test_model_form_clean_applies_to_model (model_forms.tests.CustomCleanTests)\", \"test_override_clean (model_forms.tests.CustomCleanTests)\", \"test_validate (auth_tests.test_validators.UserAttributeSimilarityValidatorTest)\", \"test_validate_property (auth_tests.test_validators.UserAttributeSimilarityValidatorTest)\", \"test_exact (model_fields.test_durationfield.TestQuerying)\", \"test_gt (model_fields.test_durationfield.TestQuerying)\", \"test_create_save_error (model_forms.test_uuid.ModelFormBaseTest)\", \"test_update_save_error (model_forms.test_uuid.ModelFormBaseTest)\", \"test_exact (model_fields.test_uuid.TestQuerying)\", \"test_isnull (model_fields.test_uuid.TestQuerying)\", \"test_create_empty (model_fields.test_durationfield.TestSaveLoad)\", \"test_fractional_seconds (model_fields.test_durationfield.TestSaveLoad)\", \"test_simple_roundtrip (model_fields.test_durationfield.TestSaveLoad)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_missing_passwords (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_non_matching_passwords (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_one_password (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_success (auth_tests.test_forms.AdminPasswordChangeFormTest)\", \"test_field_order (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_incorrect_password (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_password_verification (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.PasswordChangeFormTest)\", \"test_success (auth_tests.test_forms.PasswordChangeFormTest)\", \"Data for a ManyToManyField is a list rather than a lazy QuerySet.\", \"test_null_handling (model_fields.test_uuid.TestSaveLoad)\", \"test_pk_validated (model_fields.test_uuid.TestSaveLoad)\", \"test_str_instance_bad_hyphens (model_fields.test_uuid.TestSaveLoad)\", \"test_str_instance_hyphens (model_fields.test_uuid.TestSaveLoad)\", \"test_str_instance_no_hyphens (model_fields.test_uuid.TestSaveLoad)\", \"test_uuid_instance (model_fields.test_uuid.TestSaveLoad)\", \"test_wrong_value (model_fields.test_uuid.TestSaveLoad)\", \"test_default (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_filter_with_strings (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_get_prep_value (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_lookup_really_big_value (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_max_decimal_places_validation (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_max_digits_validation (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_max_whole_digits_validation (model_fields.test_decimalfield.DecimalFieldTests)\", \"Trailing zeros in the fractional part aren't truncated.\", \"test_save_without_float_conversion (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_model_form_applies_localize_to_all_fields (model_forms.tests.LocalizedModelFormTest)\", \"test_model_form_applies_localize_to_some_fields (model_forms.tests.LocalizedModelFormTest)\", \"test_model_form_refuses_arbitrary_string (model_forms.tests.LocalizedModelFormTest)\", \"test_callable_called_each_time_form_is_instantiated (model_forms.tests.LimitChoicesToTests)\", \"test_custom_field_with_queryset_but_no_limit_choices_to (model_forms.tests.LimitChoicesToTests)\", \"test_fields_for_model_applies_limit_choices_to (model_forms.tests.LimitChoicesToTests)\", \"test_limit_choices_to_callable_for_fk_rel (model_forms.tests.LimitChoicesToTests)\", \"test_limit_choices_to_callable_for_m2m_rel (model_forms.tests.LimitChoicesToTests)\", \"test_simplify_regex (admin_docs.test_views.AdminDocViewFunctionsTests)\", \"test_creation (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_two_level_foreign_keys (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_underlying_field (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_update_with_related_model_id (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_update_with_related_model_instance (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_uuid_pk_on_bulk_create (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_uuid_pk_on_save (model_fields.test_uuid.TestAsPrimaryKey)\", \"test_CharField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_DateField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_DateTimeField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_EmailField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_FileField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_ForeignKey (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_IntegerField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_TextField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_TimeField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_URLField (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_choices_with_radio_fields (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_field_with_choices (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_filtered_many_to_many (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_formfield_overrides (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_formfield_overrides_for_custom_field (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_formfield_overrides_for_datetime_field (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_formfield_overrides_widget_instances (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_inheritance (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_many_to_many (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_radio_fields_ForeignKey (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_raw_id_ForeignKey (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_raw_id_many_to_many (admin_widgets.tests.AdminFormfieldForDBFieldTests)\", \"test_auto_now_and_auto_now_add (timezones.tests.LegacyDatabaseTests)\", \"test_aware_datetime_unsupported (timezones.tests.LegacyDatabaseTests)\", \"test_cursor_execute_accepts_naive_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_cursor_execute_returns_naive_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_filter_date_field_with_aware_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_naive_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_naive_datetime_with_microsecond (timezones.tests.LegacyDatabaseTests)\", \"test_query_aggregation (timezones.tests.LegacyDatabaseTests)\", \"test_query_annotation (timezones.tests.LegacyDatabaseTests)\", \"test_query_datetime_lookups (timezones.tests.LegacyDatabaseTests)\", \"test_query_datetimes (timezones.tests.LegacyDatabaseTests)\", \"test_query_filter (timezones.tests.LegacyDatabaseTests)\", \"test_raw_sql (timezones.tests.LegacyDatabaseTests)\", \"test_both_passwords (auth_tests.test_forms.UserCreationFormTest)\", \"test_custom_form (auth_tests.test_forms.UserCreationFormTest)\", \"test_custom_form_hidden_username_field (auth_tests.test_forms.UserCreationFormTest)\", \"test_custom_form_with_different_username_field (auth_tests.test_forms.UserCreationFormTest)\", \"test_duplicate_normalized_unicode (auth_tests.test_forms.UserCreationFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.UserCreationFormTest)\", \"test_invalid_data (auth_tests.test_forms.UserCreationFormTest)\", \"test_normalize_username (auth_tests.test_forms.UserCreationFormTest)\", \"test_password_verification (auth_tests.test_forms.UserCreationFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.UserCreationFormTest)\", \"test_success (auth_tests.test_forms.UserCreationFormTest)\", \"test_unicode_username (auth_tests.test_forms.UserCreationFormTest)\", \"test_user_already_exists (auth_tests.test_forms.UserCreationFormTest)\", \"UserCreationForm password validation uses all of the form's data.\", \"test_username_field_autocapitalize_none (auth_tests.test_forms.UserCreationFormTest)\", \"test_validates_password (auth_tests.test_forms.UserCreationFormTest)\", \"test_flatpage_admin_form_edit (flatpages_tests.test_forms.FlatpageAdminFormTests)\", \"The flatpage admin form correctly enforces url uniqueness among flatpages of the same site\", \"The flatpage admin form correctly validates urls\", \"test_flatpage_nosites (flatpages_tests.test_forms.FlatpageAdminFormTests)\", \"test_flatpage_requires_leading_slash (flatpages_tests.test_forms.FlatpageAdminFormTests)\", \"test_help_text (auth_tests.test_validators.MinimumLengthValidatorTest)\", \"test_validate (auth_tests.test_validators.MinimumLengthValidatorTest)\", \"test_validate (auth_tests.test_validators.NumericPasswordValidatorTest)\", \"test_custom_login_allowed_policy (auth_tests.test_forms.AuthenticationFormTest)\", \"test_get_invalid_login_error (auth_tests.test_forms.AuthenticationFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.AuthenticationFormTest)\", \"test_inactive_user (auth_tests.test_forms.AuthenticationFormTest)\", \"test_inactive_user_i18n (auth_tests.test_forms.AuthenticationFormTest)\", \"An invalid login doesn't leak the inactive status of a user.\", \"test_integer_username (auth_tests.test_forms.AuthenticationFormTest)\", \"test_invalid_username (auth_tests.test_forms.AuthenticationFormTest)\", \"test_login_failed (auth_tests.test_forms.AuthenticationFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.AuthenticationFormTest)\", \"test_success (auth_tests.test_forms.AuthenticationFormTest)\", \"test_unicode_username (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_autocapitalize_none (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_label (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_label_empty_string (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_label_not_set (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_max_length_defaults_to_254 (auth_tests.test_forms.AuthenticationFormTest)\", \"test_username_field_max_length_matches_user_model (auth_tests.test_forms.AuthenticationFormTest)\", \"test_ascii_validator (auth_tests.test_validators.UsernameValidatorsTests)\", \"test_unicode_validator (auth_tests.test_validators.UsernameValidatorsTests)\", \"test_abstract_inherited_unique (model_forms.tests.UniqueTest)\", \"test_abstract_inherited_unique_together (model_forms.tests.UniqueTest)\", \"Ensure keys and blank character strings are tested for uniqueness.\", \"Test for primary_key being in the form and failing validation.\", \"test_inherited_unique (model_forms.tests.UniqueTest)\", \"test_inherited_unique_for_date (model_forms.tests.UniqueTest)\", \"test_inherited_unique_together (model_forms.tests.UniqueTest)\", \"test_multiple_field_unique_together (model_forms.tests.UniqueTest)\", \"test_override_unique_for_date_message (model_forms.tests.UniqueTest)\", \"test_override_unique_message (model_forms.tests.UniqueTest)\", \"test_override_unique_together_message (model_forms.tests.UniqueTest)\", \"test_simple_unique (model_forms.tests.UniqueTest)\", \"test_unique_for_date (model_forms.tests.UniqueTest)\", \"test_unique_for_date_in_exclude (model_forms.tests.UniqueTest)\", \"test_unique_for_date_with_nullable_date (model_forms.tests.UniqueTest)\", \"test_unique_null (model_forms.tests.UniqueTest)\", \"ModelForm test of unique_together constraint\", \"test_unique_together_exclusion (model_forms.tests.UniqueTest)\", \"test_empty_password_validator_help_text_html (auth_tests.test_validators.PasswordValidationTest)\", \"test_get_default_password_validators (auth_tests.test_validators.PasswordValidationTest)\", \"test_get_password_validators_custom (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_changed (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_changed_with_custom_validator (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_validators_help_text_html (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_validators_help_text_html_escaping (auth_tests.test_validators.PasswordValidationTest)\", \"test_password_validators_help_texts (auth_tests.test_validators.PasswordValidationTest)\", \"test_validate_password (auth_tests.test_validators.PasswordValidationTest)\", \"test_formfield (model_fields.test_durationfield.TestFormField)\", \"test_dumping (model_fields.test_durationfield.TestSerialization)\", \"test_loading (model_fields.test_durationfield.TestSerialization)\", \"test_render (admin_widgets.tests.FilteredSelectMultipleWidgetTest)\", \"test_stacked_render (admin_widgets.tests.FilteredSelectMultipleWidgetTest)\", \"test_attrs (admin_widgets.tests.AdminUUIDWidgetTests)\", \"test_deconstruct (model_fields.test_uuid.TestMethods)\", \"test_to_python (model_fields.test_uuid.TestMethods)\", \"test_to_python_int_too_large (model_fields.test_uuid.TestMethods)\", \"test_to_python_int_values (model_fields.test_uuid.TestMethods)\", \"test_uuid_instance_ok (model_fields.test_uuid.TestValidation)\", \"test_assignment_of_none (model_forms.tests.ModelOneToOneFieldTests)\", \"test_assignment_of_none_null_false (model_forms.tests.ModelOneToOneFieldTests)\", \"test_modelform_onetoonefield (model_forms.tests.ModelOneToOneFieldTests)\", \"test_modelform_subclassed_model (model_forms.tests.ModelOneToOneFieldTests)\", \"test_onetoonefield (model_forms.tests.ModelOneToOneFieldTests)\", \"test_dumping (model_fields.test_uuid.TestSerialization)\", \"test_loading (model_fields.test_uuid.TestSerialization)\", \"test_nullable_loading (model_fields.test_uuid.TestSerialization)\", \"test_modelform_factory_metaclass (model_forms.tests.CustomMetaclassTestCase)\", \"test_bad_callback (model_forms.tests.FormFieldCallbackTests)\", \"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\", \"A custom formfield_callback is used if provided\", \"Regression for #15315: modelform_factory should accept widgets\", \"test_inherit_after_custom_callback (model_forms.tests.FormFieldCallbackTests)\", \"Regression for #19733\", \"test_attrs (admin_widgets.tests.AdminDateWidgetTest)\", \"test_localization (admin_widgets.tests.AdminSplitDateTimeWidgetTest)\", \"test_render (admin_widgets.tests.AdminSplitDateTimeWidgetTest)\", \"test_validate (auth_tests.test_validators.CommonPasswordValidatorTest)\", \"test_validate_custom_list (auth_tests.test_validators.CommonPasswordValidatorTest)\", \"test_validate_django_supplied_file (auth_tests.test_validators.CommonPasswordValidatorTest)\", \"test_attrs (admin_widgets.tests.AdminTimeWidgetTest)\", \"test_field_removal (model_forms.tests.ModelFormInheritanceTests)\", \"test_field_removal_name_clashes (model_forms.tests.ModelFormInheritanceTests)\", \"test_form_subclass_inheritance (model_forms.tests.ModelFormInheritanceTests)\", \"test_setattr_raises_validation_error_field_specific (model_forms.tests.StrictAssignmentTests)\", \"test_setattr_raises_validation_error_non_field (model_forms.tests.StrictAssignmentTests)\", \"test_notrequired_overrides_notblank (model_forms.tests.ValidationTest)\", \"test_validates_with_replaced_field_excluded (model_forms.tests.ValidationTest)\", \"test_validates_with_replaced_field_not_specified (model_forms.tests.ValidationTest)\", \"test_custom_error_messages (model_forms.tests.ModelFormCustomErrorTests)\", \"test_model_clean_error_messages (model_forms.tests.ModelFormCustomErrorTests)\", \"test_bug_19349_render_with_none_value (auth_tests.test_forms.ReadOnlyPasswordHashTest)\", \"test_readonly_field_has_changed (auth_tests.test_forms.ReadOnlyPasswordHashTest)\", \"test_render (auth_tests.test_forms.ReadOnlyPasswordHashTest)\", \"test_custom_widget_render (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_no_can_add_related (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_on_delete_cascade_rel_cant_delete_related (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_select_multiple_widget_cant_change_delete_related (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_widget_delegates_value_omitted_from_data (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_widget_is_hidden (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_widget_is_not_hidden (admin_widgets.tests.RelatedFieldWidgetWrapperTests)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.SetPasswordFormTest)\", \"test_password_verification (auth_tests.test_forms.SetPasswordFormTest)\", \"test_password_whitespace_not_stripped (auth_tests.test_forms.SetPasswordFormTest)\", \"test_success (auth_tests.test_forms.SetPasswordFormTest)\", \"test_validates_password (auth_tests.test_forms.SetPasswordFormTest)\", \"test_get_context_validates_url (admin_widgets.tests.AdminURLWidgetTest)\", \"test_render (admin_widgets.tests.AdminURLWidgetTest)\", \"test_render_idn (admin_widgets.tests.AdminURLWidgetTest)\", \"test_render_quoting (admin_widgets.tests.AdminURLWidgetTest)\", \"test_builtin_fields (admin_docs.test_views.TestFieldType)\", \"test_custom_fields (admin_docs.test_views.TestFieldType)\", \"test_field_name (admin_docs.test_views.TestFieldType)\", \"test_fk_related_model_not_in_admin (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_fk_to_self_model_not_in_admin (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_proper_manager_for_label_lookup (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_relations_to_non_primary_key (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_render (admin_widgets.tests.ForeignKeyRawIdWidgetTest)\", \"test_aware_datetime_in_utc (timezones.tests.SerializationTests)\", \"test_naive_datetime (timezones.tests.SerializationTests)\", \"test_naive_datetime_with_microsecond (timezones.tests.SerializationTests)\", \"test_callable_field_default (model_forms.tests.OtherModelFormTests)\", \"test_choices_type (model_forms.tests.OtherModelFormTests)\", \"test_foreignkeys_which_use_to_field (model_forms.tests.OtherModelFormTests)\", \"test_iterable_model_m2m (model_forms.tests.OtherModelFormTests)\", \"test_media_on_modelform (model_forms.tests.OtherModelFormTests)\", \"test_model_field_that_returns_none_to_exclude_itself_with_explicit_fields (model_forms.tests.OtherModelFormTests)\", \"test_prefetch_related_queryset (model_forms.tests.OtherModelFormTests)\", \"test_m2m_related_model_not_in_admin (admin_widgets.tests.ManyToManyRawIdWidgetTest)\", \"test_render (admin_widgets.tests.ManyToManyRawIdWidgetTest)\", \"test_article_form (model_forms.tests.ModelFormBaseTest)\", \"test_bad_form (model_forms.tests.ModelFormBaseTest)\", \"test_base_form (model_forms.tests.ModelFormBaseTest)\", \"test_blank_false_with_null_true_foreign_key_field (model_forms.tests.ModelFormBaseTest)\", \"test_blank_with_null_foreign_key_field (model_forms.tests.ModelFormBaseTest)\", \"test_confused_form (model_forms.tests.ModelFormBaseTest)\", \"test_default_filefield (model_forms.tests.ModelFormBaseTest)\", \"test_default_not_populated_on_checkboxselectmultiple (model_forms.tests.ModelFormBaseTest)\", \"test_default_not_populated_on_non_empty_value_in_cleaned_data (model_forms.tests.ModelFormBaseTest)\", \"test_default_not_populated_on_optional_checkbox_input (model_forms.tests.ModelFormBaseTest)\", \"test_default_not_populated_on_selectmultiple (model_forms.tests.ModelFormBaseTest)\", \"test_default_populated_on_optional_field (model_forms.tests.ModelFormBaseTest)\", \"test_default_selectdatewidget (model_forms.tests.ModelFormBaseTest)\", \"test_default_splitdatetime_field (model_forms.tests.ModelFormBaseTest)\", \"test_empty_fields_on_modelform (model_forms.tests.ModelFormBaseTest)\", \"test_empty_fields_to_construct_instance (model_forms.tests.ModelFormBaseTest)\", \"test_empty_fields_to_fields_for_model (model_forms.tests.ModelFormBaseTest)\", \"test_exclude_and_validation (model_forms.tests.ModelFormBaseTest)\", \"test_exclude_fields (model_forms.tests.ModelFormBaseTest)\", \"test_exclude_fields_with_string (model_forms.tests.ModelFormBaseTest)\", \"test_exclude_nonexistent_field (model_forms.tests.ModelFormBaseTest)\", \"test_extra_declared_field_model_form (model_forms.tests.ModelFormBaseTest)\", \"test_extra_field_model_form (model_forms.tests.ModelFormBaseTest)\", \"test_extra_field_modelform_factory (model_forms.tests.ModelFormBaseTest)\", \"test_extra_fields (model_forms.tests.ModelFormBaseTest)\", \"test_invalid_meta_model (model_forms.tests.ModelFormBaseTest)\", \"test_limit_fields_with_string (model_forms.tests.ModelFormBaseTest)\", \"test_limit_nonexistent_field (model_forms.tests.ModelFormBaseTest)\", \"test_missing_fields_attribute (model_forms.tests.ModelFormBaseTest)\", \"test_mixmodel_form (model_forms.tests.ModelFormBaseTest)\", \"test_no_model_class (model_forms.tests.ModelFormBaseTest)\", \"test_orderfields2_form (model_forms.tests.ModelFormBaseTest)\", \"test_orderfields_form (model_forms.tests.ModelFormBaseTest)\", \"test_override_field (model_forms.tests.ModelFormBaseTest)\", \"test_prefixed_form_with_default_field (model_forms.tests.ModelFormBaseTest)\", \"test_renderer_kwarg (model_forms.tests.ModelFormBaseTest)\", \"test_replace_field (model_forms.tests.ModelFormBaseTest)\", \"test_replace_field_variant_2 (model_forms.tests.ModelFormBaseTest)\", \"test_replace_field_variant_3 (model_forms.tests.ModelFormBaseTest)\", \"test_save_blank_false_with_required_false (model_forms.tests.ModelFormBaseTest)\", \"test_save_blank_null_unique_charfield_saves_null (model_forms.tests.ModelFormBaseTest)\", \"test_subcategory_form (model_forms.tests.ModelFormBaseTest)\", \"test_subclassmeta_form (model_forms.tests.ModelFormBaseTest)\", \"test_cleaned_data (auth_tests.test_forms.PasswordResetFormTest)\", \"test_custom_email_constructor (auth_tests.test_forms.PasswordResetFormTest)\", \"test_custom_email_field (auth_tests.test_forms.PasswordResetFormTest)\", \"test_custom_email_subject (auth_tests.test_forms.PasswordResetFormTest)\", \"test_html_autocomplete_attributes (auth_tests.test_forms.PasswordResetFormTest)\", \"test_inactive_user (auth_tests.test_forms.PasswordResetFormTest)\", \"test_invalid_email (auth_tests.test_forms.PasswordResetFormTest)\", \"test_nonexistent_email (auth_tests.test_forms.PasswordResetFormTest)\", \"test_preserve_username_case (auth_tests.test_forms.PasswordResetFormTest)\", \"test_save_html_email_template_name (auth_tests.test_forms.PasswordResetFormTest)\", \"test_save_plaintext_email (auth_tests.test_forms.PasswordResetFormTest)\", \"test_unusable_password (auth_tests.test_forms.PasswordResetFormTest)\", \"test_clean_does_deduplicate_values (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_field (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_field_22745 (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_number_of_queries (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_required_false (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_run_validators (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_model_multiple_choice_show_hidden_initial (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_show_hidden_initial_changed_queries_efficiently (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_to_field_name_with_initial_data (model_forms.tests.ModelMultipleChoiceFieldTests)\", \"test_compress_sequence (utils_tests.test_text.TestUtilsText)\", \"test_get_text_list (utils_tests.test_text.TestUtilsText)\", \"test_get_valid_filename (utils_tests.test_text.TestUtilsText)\", \"test_normalize_newlines (utils_tests.test_text.TestUtilsText)\", \"test_phone2numeric (utils_tests.test_text.TestUtilsText)\", \"test_slugify (utils_tests.test_text.TestUtilsText)\", \"test_smart_split (utils_tests.test_text.TestUtilsText)\", \"test_truncate_chars (utils_tests.test_text.TestUtilsText)\", \"test_truncate_html_words (utils_tests.test_text.TestUtilsText)\", \"test_truncate_words (utils_tests.test_text.TestUtilsText)\", \"test_unescape_entities (utils_tests.test_text.TestUtilsText)\", \"test_unescape_entities_deprecated (utils_tests.test_text.TestUtilsText)\", \"test_unescape_string_literal (utils_tests.test_text.TestUtilsText)\", \"test_wrap (utils_tests.test_text.TestUtilsText)\", \"test_booleanfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_charfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_choicefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_datefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_datetimefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_decimalfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_emailfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_filefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_floatfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_generic_ipaddressfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_integerfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_multiplechoicefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_regexfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_splitdatetimefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_subclassing_errorlist (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_timefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_urlfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase)\", \"test_big_integer_field (model_forms.tests.ModelOtherFieldTests)\", \"test_http_prefixing (model_forms.tests.ModelOtherFieldTests)\", \"test_modelform_non_editable_field (model_forms.tests.ModelOtherFieldTests)\", \"Check basic URL field validation on model forms\", \"test_auto_id (model_forms.tests.ModelFormBasicTests)\", \"test_base_form (model_forms.tests.ModelFormBasicTests)\", \"test_basic_creation (model_forms.tests.ModelFormBasicTests)\", \"test_custom_form_fields (model_forms.tests.ModelFormBasicTests)\", \"test_initial_values (model_forms.tests.ModelFormBasicTests)\", \"test_m2m_editing (model_forms.tests.ModelFormBasicTests)\", \"test_m2m_initial_callable (model_forms.tests.ModelFormBasicTests)\", \"test_multi_fields (model_forms.tests.ModelFormBasicTests)\", \"test_recleaning_model_form_instance (model_forms.tests.ModelFormBasicTests)\", \"test_runtime_choicefield_populated (model_forms.tests.ModelFormBasicTests)\", \"test_save_commit_false (model_forms.tests.ModelFormBasicTests)\", \"test_subset_fields (model_forms.tests.ModelFormBasicTests)\", \"A custom CSRF_FAILURE_TEMPLATE_NAME is used.\", \"An exception is raised if a nonexistent template is supplied.\", \"test_no_cookies (view_tests.tests.test_csrf.CsrfViewTests)\", \"test_no_django_template_engine (view_tests.tests.test_csrf.CsrfViewTests)\", \"An invalid request is rejected with a localized error message.\", \"test_imagefield_annotate_with_bitmap_image_after_clean (forms_tests.field_tests.test_imagefield.ImageFieldTest)\", \"test_imagefield_annotate_with_image_after_clean (forms_tests.field_tests.test_imagefield.ImageFieldTest)\", \"test_widge_attrs_accept_false (forms_tests.field_tests.test_imagefield.ImageFieldTest)\", \"test_widge_attrs_accept_specified (forms_tests.field_tests.test_imagefield.ImageFieldTest)\", \"test_widget_attrs_default_accept (forms_tests.field_tests.test_imagefield.ImageFieldTest)\", \"test_clean_false (model_forms.tests.FileAndImageFieldTests)\", \"test_clean_false_required (model_forms.tests.FileAndImageFieldTests)\", \"test_clear_and_file_contradiction (model_forms.tests.FileAndImageFieldTests)\", \"test_custom_file_field_save (model_forms.tests.FileAndImageFieldTests)\", \"test_file_field_data (model_forms.tests.FileAndImageFieldTests)\", \"test_file_field_multiple_save (model_forms.tests.FileAndImageFieldTests)\", \"FilePathField(blank=True) includes the empty option.\", \"test_filefield_required_false (model_forms.tests.FileAndImageFieldTests)\", \"test_full_clear (model_forms.tests.FileAndImageFieldTests)\", \"test_image_field (model_forms.tests.FileAndImageFieldTests)\", \"test_render_empty_file_field (model_forms.tests.FileAndImageFieldTests)\", \"test_error_messages_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_field_type_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_help_text_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_label_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_widget_overrides (model_forms.tests.TestFieldOverridesByFormMeta)\", \"test_unsaved_fk (model_fields.test_uuid.TestAsPrimaryKeyTransactionTests)\", \"test_form (timezones.tests.LegacyFormsTests)\", \"test_form_with_ambiguous_time (timezones.tests.LegacyFormsTests)\", \"test_form_with_non_existent_time (timezones.tests.LegacyFormsTests)\", \"test_model_form (timezones.tests.LegacyFormsTests)\", \"test_split_form (timezones.tests.LegacyFormsTests)\", \"test_date_and_time_template_filters (timezones.tests.TemplateTests)\", \"test_date_and_time_template_filters_honor_localtime (timezones.tests.TemplateTests)\", \"test_get_current_timezone_templatetag (timezones.tests.TemplateTests)\", \"test_get_current_timezone_templatetag_invalid_argument (timezones.tests.TemplateTests)\", \"test_get_current_timezone_templatetag_with_pytz (timezones.tests.TemplateTests)\", \"test_localtime_filters_do_not_raise_exceptions (timezones.tests.TemplateTests)\", \"test_localtime_filters_with_pytz (timezones.tests.TemplateTests)\", \"test_localtime_templatetag_and_filters (timezones.tests.TemplateTests)\", \"test_localtime_templatetag_invalid_argument (timezones.tests.TemplateTests)\", \"test_now_template_tag_uses_current_time_zone (timezones.tests.TemplateTests)\", \"test_timezone_templatetag (timezones.tests.TemplateTests)\", \"test_timezone_templatetag_invalid_argument (timezones.tests.TemplateTests)\", \"test_timezone_templatetag_with_pytz (timezones.tests.TemplateTests)\", \"test_tz_template_context_processor (timezones.tests.TemplateTests)\", \"test_filter_choices_by_request_user (admin_widgets.tests.AdminFormfieldForDBFieldWithRequestTests)\", \"test_changelist_ForeignKey (admin_widgets.tests.AdminForeignKeyWidgetChangeList)\", \"test_form (timezones.tests.NewFormsTests)\", \"test_form_with_explicit_timezone (timezones.tests.NewFormsTests)\", \"test_form_with_other_timezone (timezones.tests.NewFormsTests)\", \"test_localized_form (timezones.tests.NewFormsTests)\", \"test_localized_model_form (timezones.tests.NewFormsTests)\", \"test_model_form (timezones.tests.NewFormsTests)\", \"test_split_form (timezones.tests.NewFormsTests)\", \"test_readonly_fields (admin_widgets.tests.AdminFileWidgetTests)\", \"test_render (admin_widgets.tests.AdminFileWidgetTests)\", \"test_render_required (admin_widgets.tests.AdminFileWidgetTests)\", \"test_auto_now_and_auto_now_add (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_local_timezone (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_local_timezone_with_microsecond (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_other_timezone (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_utc (timezones.tests.NewDatabaseTests)\", \"test_cursor_execute_accepts_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_cursor_execute_returns_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_datetime_from_date (timezones.tests.NewDatabaseTests)\", \"test_filter_date_field_with_aware_datetime (timezones.tests.NewDatabaseTests)\", \"test_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_naive_datetime_with_microsecond (timezones.tests.NewDatabaseTests)\", \"test_null_datetime (timezones.tests.NewDatabaseTests)\", \"test_query_aggregation (timezones.tests.NewDatabaseTests)\", \"test_query_annotation (timezones.tests.NewDatabaseTests)\", \"test_query_convert_timezones (timezones.tests.NewDatabaseTests)\", \"test_query_datetime_lookups (timezones.tests.NewDatabaseTests)\", \"test_query_datetime_lookups_in_other_timezone (timezones.tests.NewDatabaseTests)\", \"test_query_datetimes (timezones.tests.NewDatabaseTests)\", \"test_query_datetimes_in_other_timezone (timezones.tests.NewDatabaseTests)\", \"test_query_filter (timezones.tests.NewDatabaseTests)\", \"test_query_filter_with_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_query_filter_with_pytz_timezones (timezones.tests.NewDatabaseTests)\", \"test_raw_sql (timezones.tests.NewDatabaseTests)\", \"test_update_with_timedelta (timezones.tests.NewDatabaseTests)\", \"test_invalid_target_id (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_label_and_url_for_value_invalid_uuid (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_nonexistent_target_id (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_url_params_from_lookup_dict_any_iterable (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_url_params_from_lookup_dict_callable (admin_widgets.tests.AdminForeignKeyRawIdWidget)\", \"test_change_editable (timezones.tests.AdminTests)\", \"test_change_editable_in_other_timezone (timezones.tests.AdminTests)\", \"test_change_readonly (timezones.tests.AdminTests)\", \"test_change_readonly_in_other_timezone (timezones.tests.AdminTests)\", \"test_changelist (timezones.tests.AdminTests)\", \"test_changelist_in_other_timezone (timezones.tests.AdminTests)\", \"test_add_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of new constraints.\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new fields.\", \"test_add_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"#22030 - Adding a field with a default should work.\", \"Tests index/unique_together detection.\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"test_add_model_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_non_blank_textfield_and_charfield (migrations.test_autodetector.AutodetectorTests)\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"test_alter_db_table_no_changes (migrations.test_autodetector.AutodetectorTests)\", \"Tests detection for removing db_table in model's options.\", \"test_alter_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_oneoff_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_with_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_to_not_null_without_default (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_fk_before_model_deletion (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_model_managers (migrations.test_autodetector.AutodetectorTests)\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"Tests auto-naming of migrations for graph matching.\", \"Bases of other models come first.\", \"test_circular_dependency_mixed_addcreate (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable2 (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_dependency_swappable_self (migrations.test_autodetector.AutodetectorTests)\", \"test_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_concrete_field_changed_to_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"test_create_with_through_model (migrations.test_autodetector.AutodetectorTests)\", \"test_custom_deconstructible (migrations.test_autodetector.AutodetectorTests)\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"test_deconstruct_type (migrations.test_autodetector.AutodetectorTests)\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_empty_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_first_dependency (migrations.test_autodetector.AutodetectorTests)\", \"Having a ForeignKey automatically adds a dependency.\", \"test_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"test_foo_together_no_changes (migrations.test_autodetector.AutodetectorTests)\", \"test_foo_together_ordering (migrations.test_autodetector.AutodetectorTests)\", \"Tests unique_together and field removal detection & ordering\", \"test_foreign_key_removed_before_target_model (migrations.test_autodetector.AutodetectorTests)\", \"test_keep_db_table_with_model_change (migrations.test_autodetector.AutodetectorTests)\", \"test_last_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_m2m_w_through_multistep_remove (migrations.test_autodetector.AutodetectorTests)\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_changed_to_concrete_field (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_removed_before_through_model (migrations.test_autodetector.AutodetectorTests)\", \"test_many_to_many_removed_before_through_model_2 (migrations.test_autodetector.AutodetectorTests)\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)\", \"#23956 - Inheriting models doesn't move *_ptr fields into AddField operations.\", \"test_nested_deconstructible_objects (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new models.\", \"test_non_circular_foreignkey_dependency_removal (migrations.test_autodetector.AutodetectorTests)\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_pk_fk_included (migrations.test_autodetector.AutodetectorTests)\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"test_proxy_custom_pk (migrations.test_autodetector.AutodetectorTests)\", \"FK dependencies still work on proxy models.\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_remove_alter_order_with_respect_to (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"test_remove_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"test_rename_field_and_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_m2m_through_model (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of renamed models.\", \"test_rename_model_reverse_relation_dependencies (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_with_fks_in_different_position (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_model_with_renamed_rel_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_replace_string_with_foreignkey (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_circular_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_circular_fk_dependency_with_unique_together_and_indexes (migrations.test_autodetector.AutodetectorTests)\", \"test_same_app_no_fk_dependency (migrations.test_autodetector.AutodetectorTests)\", \"Setting order_with_respect_to adds a field.\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)\", \"Swappable models get their CreateModel first.\", \"test_trim_apps (migrations.test_autodetector.AutodetectorTests)\", \"The autodetector correctly deals with managed models.\", \"test_unmanaged_custom_pk (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)\", \"test_action_flag_choices (admin_utils.test_logentry.LogEntryTests)\", \"test_log_action (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_change_message (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_change_message_localized_datetime_input (admin_utils.test_logentry.LogEntryTests)\", \"LogEntry.change_message was a string before Django 1.10.\", \"test_logentry_get_admin_url (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_get_edited_object (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_repr (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_save (admin_utils.test_logentry.LogEntryTests)\", \"test_logentry_unicode (admin_utils.test_logentry.LogEntryTests)\", \"test_proxy_model_content_type_is_used_for_log_entries (admin_utils.test_logentry.LogEntryTests)\", \"test_recentactions_without_content_type (admin_utils.test_logentry.LogEntryTests)\", \"test_bug_14242 (auth_tests.test_forms.UserChangeFormTest)\", \"test_bug_17944_empty_password (auth_tests.test_forms.UserChangeFormTest)\", \"test_bug_17944_unknown_password_algorithm (auth_tests.test_forms.UserChangeFormTest)\", \"test_bug_17944_unmanageable_password (auth_tests.test_forms.UserChangeFormTest)\", \"The change form does not return the password value\", \"test_bug_19349_bound_password_field (auth_tests.test_forms.UserChangeFormTest)\", \"test_custom_form (auth_tests.test_forms.UserChangeFormTest)\", \"test_password_excluded (auth_tests.test_forms.UserChangeFormTest)\", \"test_unusable_password (auth_tests.test_forms.UserChangeFormTest)\", \"test_username_field_autocapitalize_none (auth_tests.test_forms.UserChangeFormTest)\", \"test_username_validity (auth_tests.test_forms.UserChangeFormTest)\", \"test_should_be_able_to_edit_related_objects_on_add_view (admin_views.tests.AdminCustomSaveRelatedTests)\", \"test_should_be_able_to_edit_related_objects_on_change_view (admin_views.tests.AdminCustomSaveRelatedTests)\", \"test_should_be_able_to_edit_related_objects_on_changelist_view (admin_views.tests.AdminCustomSaveRelatedTests)\", \"test_explicitly_provided_pk (admin_views.tests.GetFormsetsWithInlinesArgumentTest)\", \"test_implicitly_generated_pk (admin_views.tests.GetFormsetsWithInlinesArgumentTest)\", \"test_builtin_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"list_editable edits use a filtered queryset to limit memory usage.\", \"test_computed_list_display_localization (admin_changelist.tests.ChangeListTests)\", \"test_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_custom_lookup_with_pk_shortcut (admin_changelist.tests.ChangeListTests)\", \"test_custom_paginator (admin_changelist.tests.ChangeListTests)\", \"test_deterministic_order_for_model_ordered_by_its_manager (admin_changelist.tests.ChangeListTests)\", \"test_deterministic_order_for_unordered_model (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_inherited_m2m_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_m2m_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_m2m_to_inherited_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_many_to_many_at_second_level_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_non_unique_related_object_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_non_unique_related_object_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_through_m2m_at_second_level_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_through_m2m_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_list_display (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_list_display_links (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_get_edited_object_ids (admin_changelist.tests.ChangeListTests)\", \"test_get_list_editable_queryset (admin_changelist.tests.ChangeListTests)\", \"test_get_select_related_custom_method (admin_changelist.tests.ChangeListTests)\", \"test_multiuser_edit (admin_changelist.tests.ChangeListTests)\", \"test_no_distinct_for_m2m_in_list_filter_without_params (admin_changelist.tests.ChangeListTests)\", \"#15185 -- Allow no links from the 'change list' view grid.\", \"test_object_tools_displayed_no_add_permission (admin_changelist.tests.ChangeListTests)\", \"test_pagination (admin_changelist.tests.ChangeListTests)\", \"test_pagination_page_range (admin_changelist.tests.ChangeListTests)\", \"test_pk_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_result_list_editable (admin_changelist.tests.ChangeListTests)\", \"test_result_list_editable_html (admin_changelist.tests.ChangeListTests)\", \"test_result_list_empty_changelist_value (admin_changelist.tests.ChangeListTests)\", \"test_result_list_html (admin_changelist.tests.ChangeListTests)\", \"test_result_list_set_empty_value_display_in_model_admin (admin_changelist.tests.ChangeListTests)\", \"test_result_list_set_empty_value_display_on_admin_site (admin_changelist.tests.ChangeListTests)\", \"test_select_related_as_empty_tuple (admin_changelist.tests.ChangeListTests)\", \"test_select_related_as_tuple (admin_changelist.tests.ChangeListTests)\", \"test_select_related_preserved (admin_changelist.tests.ChangeListTests)\", \"test_show_all (admin_changelist.tests.ChangeListTests)\", \"test_spanning_relations_with_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_specified_ordering_by_f_expression (admin_changelist.tests.ChangeListTests)\", \"test_specified_ordering_by_f_expression_without_asc_desc (admin_changelist.tests.ChangeListTests)\", \"test_total_ordering_optimization (admin_changelist.tests.ChangeListTests)\", \"test_tuple_list_display (admin_changelist.tests.ChangeListTests)\", \"test_client_logout_url_can_be_used_to_login (admin_views.tests.AdminViewLogoutTests)\", \"test_logout (admin_views.tests.AdminViewLogoutTests)\", \"test_app_not_found (admin_docs.test_views.TestModelDetailView)\", \"test_descriptions_render_correctly (admin_docs.test_views.TestModelDetailView)\", \"Model properties are displayed as fields.\", \"test_method_data_types (admin_docs.test_views.TestModelDetailView)\", \"test_method_excludes (admin_docs.test_views.TestModelDetailView)\", \"test_methods_with_arguments (admin_docs.test_views.TestModelDetailView)\", \"test_methods_with_arguments_display_arguments (admin_docs.test_views.TestModelDetailView)\", \"test_methods_with_arguments_display_arguments_default_value (admin_docs.test_views.TestModelDetailView)\", \"test_methods_with_multiple_arguments_display_arguments (admin_docs.test_views.TestModelDetailView)\", \"test_model_detail_title (admin_docs.test_views.TestModelDetailView)\", \"test_model_docstring_renders_correctly (admin_docs.test_views.TestModelDetailView)\", \"test_model_not_found (admin_docs.test_views.TestModelDetailView)\", \"test_model_with_many_to_one (admin_docs.test_views.TestModelDetailView)\", \"test_model_with_no_backward_relations_render_only_relevant_fields (admin_docs.test_views.TestModelDetailView)\", \"test_secure_view_shows_login_if_not_logged_in (admin_views.tests.SecureViewTests)\", \"test_staff_member_required_decorator_works_with_argument (admin_views.tests.SecureViewTests)\", \"Object history button link should work and contain the pk value quoted.\", \"Link to the changeform of the object in changelist should use reverse() and be quoted -- #18072\", \"The link from the delete confirmation page referring back to the changeform of the object should be quoted\", \"Retrieving the object using urlencoded form of primary key should work\", \"test_get_history_view (admin_views.tests.AdminViewStringPrimaryKeyTest)\", \"The link from the recent actions list referring to the changeform of the object should be quoted\", \"As soon as an object is added using \\\"Save and continue editing\\\"\", \"'View on site should' work properly with char fields\", \"A model with a primary key that ends with add or is `add` should be visible\", \"A model with a primary key that ends with delete should be visible\", \"A model with a primary key that ends with history should be visible\", \"test_custom_admin_site_app_index_view_and_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_index_view_and_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_login_form (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_login_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_logout_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_password_change_done_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_password_change_template (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_password_change_with_extra_context (admin_views.tests.CustomModelAdminTest)\", \"test_custom_admin_site_view (admin_views.tests.CustomModelAdminTest)\", \"test_pwd_change_custom_template (admin_views.tests.CustomModelAdminTest)\", \"test_lang_name_present (admin_views.tests.ValidXHTMLTests)\", \"test_GET_parent_add (admin_views.tests.TestInlineNotEditable)\", \"Admin index views don't break when user's ModelAdmin removes standard urls\", \"test_save_as_continue_false (admin_views.tests.SaveAsTests)\", \"'save as' creates a new person\", \"test_save_as_new_with_inlines_with_validation_errors (admin_views.tests.SaveAsTests)\", \"test_save_as_new_with_validation_errors (admin_views.tests.SaveAsTests)\", \"test_save_as_new_with_validation_errors_with_inlines (admin_views.tests.SaveAsTests)\", \"test_all_fields_hidden (admin_views.tests.TestLabelVisibility)\", \"test_all_fields_visible (admin_views.tests.TestLabelVisibility)\", \"test_mixin (admin_views.tests.TestLabelVisibility)\", \"test_generic_content_object_in_list_display (admin_views.tests.TestGenericRelations)\", \"Test for ticket 2445 changes to admin.\", \"test_unicode_delete (admin_views.tests.AdminViewUnicodeTest)\", \"test_unicode_edit (admin_views.tests.AdminViewUnicodeTest)\", \"test_custom_changelist (admin_views.tests.TestCustomChangeList)\", \"test_form_has_multipart_enctype (admin_views.tests.AdminInlineFileUploadTest)\", \"test_inline_file_upload_edit_validation_error_post (admin_views.tests.AdminInlineFileUploadTest)\", \"test_inline (admin_views.tests.AdminInheritedInlinesTest)\", \"test_change_form_URL_has_correct_value (admin_views.tests.AdminViewFormUrlTest)\", \"test_initial_data_can_be_overridden (admin_views.tests.AdminViewFormUrlTest)\", \"test_message_debug (admin_views.tests.AdminUserMessageTest)\", \"test_message_error (admin_views.tests.AdminUserMessageTest)\", \"test_message_extra_tags (admin_views.tests.AdminUserMessageTest)\", \"test_message_info (admin_views.tests.AdminUserMessageTest)\", \"test_message_success (admin_views.tests.AdminUserMessageTest)\", \"test_message_warning (admin_views.tests.AdminUserMessageTest)\", \"The right link is displayed if view_on_site is a callable\", \"The 'View on site' button is not displayed if view_on_site is False\", \"The 'View on site' button is displayed if view_on_site is True\", \"test_prepopulated_maxlength_localized (admin_views.tests.PrePopulatedTest)\", \"test_prepopulated_off (admin_views.tests.PrePopulatedTest)\", \"test_prepopulated_on (admin_views.tests.PrePopulatedTest)\", \"test_view_only_add_form (admin_views.tests.PrePopulatedTest)\", \"test_view_only_change_form (admin_views.tests.PrePopulatedTest)\", \"test_add_view_form_and_formsets_run_validation (admin_views.tests.AdminViewOnSiteTests)\", \"test_change_view_form_and_formsets_run_validation (admin_views.tests.AdminViewOnSiteTests)\", \"The view_on_site value is either a boolean or a callable\", \"None is returned if model doesn't have get_absolute_url\", \"The default behavior is followed if view_on_site is True\", \"test_add (admin_views.tests.AdminViewProxyModelPermissionsTests)\", \"test_change (admin_views.tests.AdminViewProxyModelPermissionsTests)\", \"test_delete (admin_views.tests.AdminViewProxyModelPermissionsTests)\", \"test_view (admin_views.tests.AdminViewProxyModelPermissionsTests)\", \"Check the never-cache status of the JavaScript i18n view\", \"Check the never-cache status of the main index\", \"Check the never-cache status of an application index\", \"Check the never-cache status of login views\", \"Check the never-cache status of logout view\", \"Check the never-cache status of a model add page\", \"Check the never-cache status of a model delete page\", \"Check the never-cache status of a model history page\", \"Check the never-cache status of a model index\", \"Check the never-cache status of a model edit page\", \"Check the never-cache status of the password change view\", \"Check the never-cache status of the password change done view\", \"Regression test for 14880\", \"Regression test for 20182\", \"test_list_display_method_same_name_as_reverse_accessor (admin_views.tests.RawIdFieldsTest)\", \"test_js_minified_only_if_debug_is_false (admin_views.tests.AdminJavaScriptTest)\", \"test_beginning_matches (admin_views.tests.AdminSearchTest)\", \"test_exact_matches (admin_views.tests.AdminSearchTest)\", \"test_no_total_count (admin_views.tests.AdminSearchTest)\", \"test_pluggable_search (admin_views.tests.AdminSearchTest)\", \"test_reset_link (admin_views.tests.AdminSearchTest)\", \"A search that mentions sibling models\", \"test_with_fk_to_field (admin_views.tests.AdminSearchTest)\", \"test_group_permission_performance (admin_views.tests.GroupAdminTest)\", \"test_save_button (admin_views.tests.GroupAdminTest)\", \"test_empty (admin_views.tests.DateHierarchyTests)\", \"test_multiple_years (admin_views.tests.DateHierarchyTests)\", \"test_related_field (admin_views.tests.DateHierarchyTests)\", \"test_single (admin_views.tests.DateHierarchyTests)\", \"test_within_month (admin_views.tests.DateHierarchyTests)\", \"test_within_year (admin_views.tests.DateHierarchyTests)\", \"test_app_model_in_app_index_body_class (admin_views.tests.CSSTest)\", \"test_app_model_in_delete_confirmation_body_class (admin_views.tests.CSSTest)\", \"test_app_model_in_delete_selected_confirmation_body_class (admin_views.tests.CSSTest)\", \"test_app_model_in_form_body_class (admin_views.tests.CSSTest)\", \"test_app_model_in_list_body_class (admin_views.tests.CSSTest)\", \"test_changelist_field_classes (admin_views.tests.CSSTest)\", \"test_field_prefix_css_classes (admin_views.tests.CSSTest)\", \"test_index_css_classes (admin_views.tests.CSSTest)\", \"test_cyclic (admin_views.tests.AdminViewDeletedObjectsTest)\", \"The delete view uses ModelAdmin.get_deleted_objects().\", \"test_generic_relations (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_generic_relations_with_related_query_name (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_inheritance (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_multiple_fkeys_to_same_instance (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_multiple_fkeys_to_same_model (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_nesting (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_not_registered (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_perms_needed (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_post_delete_protected (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_protected (admin_views.tests.AdminViewDeletedObjectsTest)\", \"test_bookmarklets (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_missing_docutils (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_model_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_namespaced_view_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_no_sites_framework (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_templatefilter_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_templatetag_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_detail_as_method (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_detail_illegal_import (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_index_with_method (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_change_password_template (admin_views.tests.AdminCustomTemplateTests)\", \"test_custom_model_admin_templates (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_change_list (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_change_form (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_delete_confirmation (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_delete_selected_confirmation (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_index (admin_views.tests.AdminCustomTemplateTests)\", \"test_extended_bodyclass_template_login (admin_views.tests.AdminCustomTemplateTests)\", \"test_filter_with_custom_template (admin_views.tests.AdminCustomTemplateTests)\", \"test_changelist_view (admin_views.tests.AdminCustomQuerysetTest)\", \"test_changelist_view_count_queries (admin_views.tests.AdminCustomQuerysetTest)\", \"test_history_view_custom_qs (admin_views.tests.AdminCustomQuerysetTest)\", \"test_changelist_input_html (admin_views.tests.AdminViewListEditable)\", \"test_custom_pk (admin_views.tests.AdminViewListEditable)\", \"test_inheritance (admin_views.tests.AdminViewListEditable)\", \"test_inheritance_2 (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_action_choices (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_action_submit (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_ordering (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_pagination (admin_views.tests.AdminViewListEditable)\", \"test_list_editable_popup (admin_views.tests.AdminViewListEditable)\", \"test_non_field_errors (admin_views.tests.AdminViewListEditable)\", \"test_non_form_errors (admin_views.tests.AdminViewListEditable)\", \"test_non_form_errors_is_errorlist (admin_views.tests.AdminViewListEditable)\", \"test_pk_hidden_fields (admin_views.tests.AdminViewListEditable)\", \"Similarly as test_pk_hidden_fields, but when the hidden pk fields are\", \"test_post_messages (admin_views.tests.AdminViewListEditable)\", \"test_post_submission (admin_views.tests.AdminViewListEditable)\", \"test_bookmarklets (admin_docs.test_views.AdminDocViewTests)\", \"test_index (admin_docs.test_views.AdminDocViewTests)\", \"test_missing_docutils (admin_docs.test_views.AdminDocViewTests)\", \"test_model_index (admin_docs.test_views.AdminDocViewTests)\", \"test_namespaced_view_detail (admin_docs.test_views.AdminDocViewTests)\", \"test_no_sites_framework (admin_docs.test_views.AdminDocViewTests)\", \"test_templatefilter_index (admin_docs.test_views.AdminDocViewTests)\", \"test_templatetag_index (admin_docs.test_views.AdminDocViewTests)\", \"test_view_detail (admin_docs.test_views.AdminDocViewTests)\", \"test_view_detail_as_method (admin_docs.test_views.AdminDocViewTests)\", \"test_view_detail_illegal_import (admin_docs.test_views.AdminDocViewTests)\", \"test_view_index (admin_docs.test_views.AdminDocViewTests)\", \"test_view_index_with_method (admin_docs.test_views.AdminDocViewTests)\", \"test_filters (admin_views.tests.AdminDocsTest)\", \"test_tags (admin_views.tests.AdminDocsTest)\", \"A model with a character PK can be saved as inlines. Regression for #10992\", \"A model with an explicit autofield primary key can be saved as inlines. Regression for #8093\", \"An inherited model can be saved as inlines. Regression for #11042\", \"A model with an integer PK can be saved as inlines. Regression for #10992\", \"test_ordered_inline (admin_views.tests.AdminInlineTests)\", \"A simple model can be saved as inlines\", \"test_simple_inline_permissions (admin_views.tests.AdminInlineTests)\", \"test_add_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_assert_url_equal (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_change_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_changelist_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_delete_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_url_prefix (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)\", \"test_change_form_renders_correct_null_choice_value (admin_views.tests.ReadonlyTest)\", \"test_correct_autoescaping (admin_views.tests.ReadonlyTest)\", \"test_label_suffix_translated (admin_views.tests.ReadonlyTest)\", \"test_readonly_field_overrides (admin_views.tests.ReadonlyTest)\", \"test_readonly_get (admin_views.tests.ReadonlyTest)\", \"Regression test for #13004\", \"test_readonly_manytomany_backwards_ref (admin_views.tests.ReadonlyTest)\", \"test_readonly_manytomany_forwards_ref (admin_views.tests.ReadonlyTest)\", \"test_readonly_onetoone_backwards_ref (admin_views.tests.ReadonlyTest)\", \"test_readonly_post (admin_views.tests.ReadonlyTest)\", \"test_readonly_text_field (admin_views.tests.ReadonlyTest)\", \"test_user_password_change_limited_queryset (admin_views.tests.ReadonlyTest)\", \"test_add_view (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_assert_url_equal (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_change_view (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_changelist_view (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_delete_view (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_url_prefix (admin_views.tests.AdminKeepChangeListFiltersTests)\", \"test_form_url_present_in_context (admin_views.tests.UserAdminTest)\", \"test_save_add_another_button (admin_views.tests.UserAdminTest)\", \"test_save_button (admin_views.tests.UserAdminTest)\", \"User addition through a FK popup should return the appropriate JavaScript response.\", \"User change through a FK popup should return the appropriate JavaScript response.\", \"User deletion through a FK popup should return the appropriate JavaScript response.\", \"test_user_permission_performance (admin_views.tests.UserAdminTest)\", \"User with add permission to a section but view-only for inlines.\", \"test_app_list_permissions (admin_views.tests.AdminViewPermissionsTest)\", \"Change view should restrict access and allow users to edit items.\", \"A POST redirects to changelist without modifications.\", \"test_change_view_save_as_new (admin_views.tests.AdminViewPermissionsTest)\", \"User has view and add permissions on the inline model.\", \"User has view and delete permissions on the inline model.\", \"test_change_view_with_view_only_inlines (admin_views.tests.AdminViewPermissionsTest)\", \"test_change_view_without_object_change_permission (admin_views.tests.AdminViewPermissionsTest)\", \"test_conditionally_show_add_section_link (admin_views.tests.AdminViewPermissionsTest)\", \"test_conditionally_show_change_section_link (admin_views.tests.AdminViewPermissionsTest)\", \"test_conditionally_show_delete_section_link (admin_views.tests.AdminViewPermissionsTest)\", \"Delete view should restrict access and actually delete items.\", \"test_delete_view_with_no_default_permissions (admin_views.tests.AdminViewPermissionsTest)\", \"test_disabled_permissions_when_logged_in (admin_views.tests.AdminViewPermissionsTest)\", \"test_disabled_staff_permissions_when_logged_in (admin_views.tests.AdminViewPermissionsTest)\", \"Regression test for #19327\", \"test_has_module_permission (admin_views.tests.AdminViewPermissionsTest)\", \"History view should restrict access.\", \"test_login (admin_views.tests.AdminViewPermissionsTest)\", \"test_login_has_permission (admin_views.tests.AdminViewPermissionsTest)\", \"test_login_page_notice_for_non_staff_users (admin_views.tests.AdminViewPermissionsTest)\", \"test_login_redirect_for_direct_get (admin_views.tests.AdminViewPermissionsTest)\", \"test_login_successfully_redirects_to_original_URL (admin_views.tests.AdminViewPermissionsTest)\", \"test_overriding_has_module_permission (admin_views.tests.AdminViewPermissionsTest)\", \"test_shortcut_view_only_available_to_staff (admin_views.tests.AdminViewPermissionsTest)\", \"test_L10N_deactivated (admin_views.tests.AdminViewBasicTest)\", \"test_add_with_GET_args (admin_views.tests.AdminViewBasicTest)\", \"test_adminsite_display_site_url (admin_views.tests.AdminViewBasicTest)\", \"test_allowed_filtering_15103 (admin_views.tests.AdminViewBasicTest)\", \"test_allows_attributeerror_to_bubble_up (admin_views.tests.AdminViewBasicTest)\", \"test_basic_add_GET (admin_views.tests.AdminViewBasicTest)\", \"test_basic_add_POST (admin_views.tests.AdminViewBasicTest)\", \"test_basic_edit_GET (admin_views.tests.AdminViewBasicTest)\", \"test_basic_edit_GET_old_url_redirect (admin_views.tests.AdminViewBasicTest)\", \"test_basic_edit_POST (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_column_field_classes (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_null_boolean_display (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_callable (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_callable_query_expression (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_callable_query_expression_reverse (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_model (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_model_admin (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_model_admin_reverse (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_model_meta (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_multiple (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_override_model_admin (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_preserve_queryset_ordering (admin_views.tests.AdminViewBasicTest)\", \"test_change_list_sorting_property (admin_views.tests.AdminViewBasicTest)\", \"Changes to ManyToManyFields are included in the object's history.\", \"test_change_view_with_show_delete_extra_context (admin_views.tests.AdminViewBasicTest)\", \"test_changelist_with_no_change_url (admin_views.tests.AdminViewBasicTest)\", \"test_date_hierarchy_timezone_dst (admin_views.tests.AdminViewBasicTest)\", \"test_disallowed_filtering (admin_views.tests.AdminViewBasicTest)\", \"test_disallowed_to_field (admin_views.tests.AdminViewBasicTest)\", \"test_edit_save_as (admin_views.tests.AdminViewBasicTest)\", \"test_edit_save_as_delete_inline (admin_views.tests.AdminViewBasicTest)\", \"test_get_sortable_by_columns_subset (admin_views.tests.AdminViewBasicTest)\", \"test_get_sortable_by_no_column (admin_views.tests.AdminViewBasicTest)\", \"Joins shouldn't be performed for <FK>_id fields in list display.\", \"Joins shouldn't be performed for <O2O>_id fields in list display.\", \"test_hide_change_password (admin_views.tests.AdminViewBasicTest)\", \"test_i18n_language_non_english_default (admin_views.tests.AdminViewBasicTest)\", \"test_i18n_language_non_english_fallback (admin_views.tests.AdminViewBasicTest)\", \"Ensure incorrect lookup parameters are handled gracefully.\", \"test_invalid_appindex_url (admin_views.tests.AdminViewBasicTest)\", \"Ensure is_null is handled correctly.\", \"test_jsi18n_with_context (admin_views.tests.AdminViewBasicTest)\", \"Ensure admin changelist filters do not contain objects excluded via limit_choices_to.\", \"test_logout_and_password_change_URLs (admin_views.tests.AdminViewBasicTest)\", \"test_multiple_sort_same_field (admin_views.tests.AdminViewBasicTest)\", \"test_named_group_field_choices_change_list (admin_views.tests.AdminViewBasicTest)\", \"test_named_group_field_choices_filter (admin_views.tests.AdminViewBasicTest)\", \"test_popup_add_POST (admin_views.tests.AdminViewBasicTest)\", \"test_popup_dismiss_related (admin_views.tests.AdminViewBasicTest)\", \"test_relation_spanning_filters (admin_views.tests.AdminViewBasicTest)\", \"test_resolve_admin_views (admin_views.tests.AdminViewBasicTest)\", \"test_sort_indicators_admin_order (admin_views.tests.AdminViewBasicTest)\", \"test_sortable_by_columns_subset (admin_views.tests.AdminViewBasicTest)\", \"test_sortable_by_no_column (admin_views.tests.AdminViewBasicTest)\", \"test_trailing_slash_required (admin_views.tests.AdminViewBasicTest)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.567108",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}