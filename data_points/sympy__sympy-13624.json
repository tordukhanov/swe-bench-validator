{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13624",
  "base_commit": "a67e45eecc972b53e95effb09fe503a05325d3f5",
  "patch": "diff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py\n--- a/sympy/printing/codeprinter.py\n+++ b/sympy/printing/codeprinter.py\n@@ -308,7 +308,7 @@ def _print_Assignment(self, expr):\n                 code0 = self._print(temp)\n                 lines.append(code0)\n             return \"\\n\".join(lines)\n-        elif self._settings[\"contract\"] and (lhs.has(IndexedBase) or\n+        elif self._settings.get(\"contract\", False) and (lhs.has(IndexedBase) or\n                 rhs.has(IndexedBase)):\n             # Here we check if there is looping to be done, and if so\n             # print the required loops.\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -112,6 +112,9 @@ def _module_format(self, fqn, register=True):\n     def _format_code(self, lines):\n         return lines\n \n+    def _get_statement(self, codestring):\n+        return \"%s\" % codestring\n+\n     def _get_comment(self, text):\n         return \"  # {0}\".format(text)\n \n",
  "test_patch": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n+\n+from sympy.codegen import Assignment\n from sympy.core import Expr, Mod, symbols\n from sympy.core.numbers import pi\n from sympy.logic import And, Or\n@@ -24,6 +26,7 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n     assert prntr.doprint(acos(x)) == 'math.acos(x)'\n+    assert prntr.doprint(Assignment(x, 2)) == 'x = 2'\n \n \n def test_SciPyPrinter():\n",
  "problem_statement": "Python code printer (pycode) should support Assignment\nThere is a lookup on 'contract', either we should give it a default in the `PythonCodePrinter` or we should make the code accessing `_settings` use `.get` with a default.\r\n\r\n```\r\nIn [3]: from sympy.printing.pycode import pycode\r\n\r\nIn [4]: from sympy.codegen.ast import Assignment\r\n\r\nIn [5]: pycode(Assignment(x, 3))\r\nKeyError\r\n...\r\n/home/bjorn/vc/sympy/sympy/printing/codeprinter.pyc in _print_Assignment(self, expr)\r\n    309                 lines.append(code0)\r\n    310             return \"\\n\".join(lines)\r\n--> 311         elif self._settings[\"contract\"] and (lhs.has(IndexedBase) or\r\n    312                 rhs.has(IndexedBase)):\r\n    313             # Here we check if there is looping to be done, and if so\r\n\r\nKeyError: 'contract'\r\n```\n",
  "hints_text": "Hi @bjodah! I'd like to make my first contribution. Can I work on this issue?\nSure! You can have a look here for how to get started: https://github.com/sympy/sympy/wiki/Development-workflow\nHi @bjodah !\r\nAs you stated, I made the code accessing `_settings` use `.get` with a default `False`.\r\nBut now I am getting some other error\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"sympy/printing/pycode.py\", line 187, in pycode\r\n    return PythonCodePrinter(settings).doprint(expr)\r\n  File \"sympy/printing/codeprinter.py\", line 100, in doprint\r\n    lines = self._print(expr).splitlines()\r\n  File \"sympy/printing/printer.py\", line 257, in _print\r\n    return getattr(self, printmethod)(expr, *args, **kwargs)\r\n  File \"sympy/printing/codeprinter.py\", line 319, in _print_Assignment\r\n    return self._get_statement(\"%s = %s\" % (lhs_code, rhs_code))\r\n  File \"sympy/printing/codeprinter.py\", line 250, in _get_statement\r\n    raise NotImplementedError(\"This function must be implemented by \"\r\nNotImplementedError: This function must be implemented by subclass of CodePrinter.\r\n```\r\nHow can I implement this function?",
  "created_at": "2017-11-18T12:14:09Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_PythonCodePrinter\"]",
  "PASS_TO_PASS": "[\"test_SciPyPrinter\", \"test_pycode_reserved_words\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.085536",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}