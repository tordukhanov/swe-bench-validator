{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8539",
  "base_commit": "e888a4424939fd34590e5443838709d00d8d8874",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2656,6 +2656,8 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_config_value('autodoc_mock_imports', [], True)\n     app.add_config_value('autodoc_typehints', \"signature\", True,\n                          ENUM(\"signature\", \"description\", \"none\"))\n+    app.add_config_value('autodoc_typehints_description_target', 'all', True,\n+                         ENUM('all', 'documented'))\n     app.add_config_value('autodoc_type_aliases', {}, True)\n     app.add_config_value('autodoc_warningiserror', True, True)\n     app.add_config_value('autodoc_inherit_docstrings', True, True)\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, Set, cast\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -42,8 +42,6 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         return\n     if app.config.autodoc_typehints != 'description':\n         return\n-    if objtype == 'class' and app.config.autoclass_content not in ('init', 'both'):\n-        return\n \n     try:\n         signature = cast(addnodes.desc_signature, contentnode.parent[0])\n@@ -63,7 +61,10 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            if app.config.autodoc_typehints_description_target == \"all\":\n+                modify_field_list(field_list, annotations[fullname])\n+            else:\n+                augment_descriptions_with_types(field_list, annotations[fullname])\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -126,6 +127,52 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n \n+def augment_descriptions_with_types(\n+    node: nodes.field_list,\n+    annotations: Dict[str, str],\n+) -> None:\n+    fields = cast(Iterable[nodes.field], node)\n+    has_description = set()  # type: Set[str]\n+    has_type = set()  # type: Set[str]\n+    for field in fields:\n+        field_name = field[0].astext()\n+        parts = re.split(' +', field_name)\n+        if parts[0] == 'param':\n+            if len(parts) == 2:\n+                # :param xxx:\n+                has_description.add(parts[1])\n+            elif len(parts) > 2:\n+                # :param xxx yyy:\n+                name = ' '.join(parts[2:])\n+                has_description.add(name)\n+                has_type.add(name)\n+        elif parts[0] == 'type':\n+            name = ' '.join(parts[1:])\n+            has_type.add(name)\n+        elif parts[0] == 'return':\n+            has_description.add('return')\n+        elif parts[0] == 'rtype':\n+            has_type.add('return')\n+\n+    # Add 'type' for parameters with a description but no declared type.\n+    for name in annotations:\n+        if name == 'return':\n+            continue\n+        if name in has_description and name not in has_type:\n+            field = nodes.field()\n+            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            node += field\n+\n+    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n+    if 'return' in annotations:\n+        if 'return' in has_description and 'return' not in has_type:\n+            field = nodes.field()\n+            field += nodes.field_name('', 'rtype')\n+            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            node += field\n+\n+\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n     app.connect('object-description-transform', merge_typehints)\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -68,3 +68,13 @@ def missing_attr(c,\n                  ):\n     # type: (...) -> str\n     return a + (b or \"\")\n+\n+\n+class _ClassWithDocumentedInit:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        \"\"\"\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -682,6 +682,90 @@ def test_autodoc_typehints_description(app):\n             in context)\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented'})\n+def test_autodoc_typehints_description_no_undoc(app):\n+    # No :type: or :rtype: will be injected for `incr`, which does not have\n+    # a description for its parameters or its return. `tuple_args` does\n+    # describe them, so :type: and :rtype: will be added.\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.incr\\n'\n+        '\\n'\n+        '.. autofunction:: target.typehints.tuple_args\\n'\n+        '\\n'\n+        '   :param x: arg\\n'\n+        '   :return: another tuple\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.incr(a, b=1)\\n'\n+            '\\n'\n+            'target.typehints.tuple_args(x)\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*Tuple**[**int**, **Union**[**int**, **str**]**]*) -- arg\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      another tuple\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      Tuple[int, int]\\n'\n+            in context)\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_documented_init(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithDocumentedInit\\n'\n+        '   :special-members: __init__\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('class target.typehints._ClassWithDocumentedInit(x)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) --\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      None\\n'\n+            '\\n'\n+            '   __init__(x)\\n'\n+            '\\n'\n+            '      Init docstring.\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **x** (*int*) -- Some integer\\n'\n+            '\\n'\n+            '      Return type:\\n'\n+            '         None\\n' == context)\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented'})\n+def test_autodoc_typehints_description_with_documented_init_no_undoc(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithDocumentedInit\\n'\n+        '   :special-members: __init__\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('class target.typehints._ClassWithDocumentedInit(x)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   __init__(x)\\n'\n+            '\\n'\n+            '      Init docstring.\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **x** (*int*) -- Some integer\\n' == context)\n+\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n def test_autodoc_typehints_description_for_invalid_node(app):\n",
  "problem_statement": "autodoc_typehints='description' does not combine well with autoclass_content='class'\nWith this configuration:\r\n\r\n~~~~~~~~ python\r\nextensions = [\r\n    'sphinx.ext.autodoc',\r\n    'sphinx.ext.autodoc.typehints',\r\n]\r\nautodoc_default_options = {\r\n    'members': True,\r\n    'special-members': '__init__',\r\n}\r\nautoclass_content = 'class'\r\nautodoc_typehints = 'description'\r\n~~~~~~~~\r\n\r\nType hints from the `__init__` method are reflected in `:param ...` descriptions (given explicitly in the docstrings), and are also generated for the class itself.\r\n\r\n**To Reproduce**\r\n```\r\n$ (unpack attached tarball)\r\n$ cd typehints-error\r\n$ tox\r\n$ # open docs/build/html/index.html and see extraneous partial \"Parameters\" section\r\n```\r\n\r\n**Expected behavior**\r\nNo \"Parameters\" section should be added to the class docs if already present for the `__init__` docs simply because of the type hints.\r\n\r\n**Your project**\r\nSample attached.\r\n[typehints-error.tar.gz](https://github.com/sphinx-doc/sphinx/files/4344782/typehints-error.tar.gz)\r\n\r\n**Environment info**\r\n- OS: Ubuntu 18.04\r\n- Python version: 3.7, 3.8, 3.9\r\n- Sphinx version: 2.4.4\r\n\nautodoc_typehints=\"description\" doesn't use __init__ type hints\n**Describe the bug**\r\nType hints attached to the `__init__` method are not used when `autodoc_typehints=\"description\"`, but are used when `autodoc_typehints=\"signature\"`.\r\n\r\n**To Reproduce**\r\nCreate `module.py` with these contents:\r\n```py\r\nclass Person(object):\r\n    \"\"\"Represent a person.\r\n\r\n    Args:\r\n        name: The person's name\r\n    \"\"\"\r\n    def __init__(self, name: str) -> None:\r\n        self.name = name\r\n\r\n    def greet(self, salutation: str) -> None:\r\n        \"\"\"Print a custom greeting to this person.\r\n\r\n        Args:\r\n            salutation: The words to begin the greeting.\r\n        \"\"\"\r\n        print(salutation + \", \" + self.name + \"!\")\r\n```\r\n\r\nCreate `index.rst` with these contents:\r\n```rest\r\n.. automodule:: module\r\n   :members:\r\n```\r\n\r\nGenerate documentation into an `html` directory:\r\n```console\r\npython3.8 -msphinx -aE -C -D 'extensions=sphinx.ext.autodoc,sphinx.ext.napoleon' -D autodoc_typehints=description . html\r\n```\r\n\r\n**Expected behavior**\r\nThe `name` parameter of the `Person` constructor should have a `(str)` type annotation, like the `salutation` parameter of `greet` does. When `autodoc_typehints=\"signature\"`, the signature does include the `: str` type annotation. Adding `-D autoclass_content=both` causes the type hint to be used, but:\r\n\r\n1. I believe the type hint should be used even for `autoclass_content=\"class\"` like it is if `autodoc_typehints=\"signature\"`, and\r\n2. Using `autoclass_content=both` causes a `Return type: None` annotation to be added, which is not helpful for a constructor and which doesn't match the behavior of `autodoc_typehints=\"signature\"` (there's no `-> None` in that case).\r\n\r\n**Environment info**\r\n- OS: Linux\r\n- Python version: 3.8.5\r\n- Sphinx version: 3.2.1\r\n- Sphinx extensions:  sphinx.ext.autodoc and sphinx.ext.napoleon\r\n\r\n**Additional context**\r\nThis appears to be intentional behavior as it was the fix for #7329, but I believe it is incorrect because it is inconsistent with how signature type hints are handled.\n",
  "hints_text": "\nThe bug reported in #7329 was that, when `autodoc_typehints=\"description\"`, `autoclass_content=\"class\"`, and `__init__` is documented separately from the class because `special-members` includes `__init__`, the constructor parameters would be duplicated in both the class documentation and the `__init__` method documentation, and the documentation for the parameters attached to the class docstring would be missing the parameter description and have only the type. This happened because `autodoc_typehints=\"description\"` will add parameters with annotations to the documentation even if they weren't already present in the docstring.\r\n\r\n[The fix that was applied](https://github.com/sphinx-doc/sphinx/pull/7336/commits/4399982a86bc90c97ecd167d2cdb78dd357e1cae) makes it so that `autodoc_typehints=\"description\"` will never modify a class docstring if `autoclass_content=\"class\"`.\r\n\r\nThis means that `autodoc_typehints=\"description\"` is broken when `autoclass_content=\"class\"` (the default) and arguments are documented in the class docstring (as both the Google and Numpy style docstrings do).\r\n\r\nI suggest instead changing `sphinx.ext.autodoc.typehints.modify_field_list` to never add a `:param:`, only add a `:type:` for parameters with a pre-existing `:param:`, and to likewise only add an `:rtype:` if there was already a `:return:`. This would fix several issues:\r\n- The bug noted in #7329 will be fixed: only the `__init__` docstring has a `:param:` in it, so the class description will be left unchanged by `autodoc_typehints`\r\n- It will now be possible to have parameters that have type hints, but that are not shown in the documentation. I've been surprised in the past when an entry got added to my documentation for `kwargs` with only a declared type and no description; this would fix that.\r\n- A function that returns `None` will no longer have `Return type: None` added unconditionally. While this is not incorrect, it is distracting, adds little value, and takes up valuable space.\r\n\r\nThe fix for #7329 fixed one special case of `autodoc_typehints=\"description\"` documenting only a parameter's type without any description. This proposal would fix the general case by putting the user in control of which parameters are documented and reenabling automatic `:type:` documentation for constructor parameters.",
  "created_at": "2020-12-15T01:06:47Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init_no_undoc\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\"]",
  "environment_setup_commit": "8939a75efaa911a12dbe6edccedf261e88bf7eef",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.055709",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}