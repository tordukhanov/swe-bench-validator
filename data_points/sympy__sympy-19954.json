{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-19954",
  "base_commit": "6f54459aa0248bf1467ad12ee6333d8bc924a642",
  "patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2194,18 +2194,19 @@ def _number_blocks(blocks):\n                 # check if the system is minimal with\n                 # respect to the already discovere ones\n                 minimal = True\n-                to_remove = []\n+                blocks_remove_mask = [False] * len(blocks)\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        blocks_remove_mask[i] = True\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n                 # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                blocks = [b for i, b in enumerate(blocks) if not blocks_remove_mask[i]]\n+                num_blocks = [n for i, n in enumerate(num_blocks) if not blocks_remove_mask[i]]\n+                rep_blocks = [r for i, r in enumerate(rep_blocks) if not blocks_remove_mask[i]]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,6 +905,14 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n \n @slow\n def test_presentation():\n",
  "problem_statement": "sylow_subgroup() IndexError \nI use sympy 1.6.1, with numpy 1.18.5, scipy 1.4.1, under Python '3.8.5 (default, Aug  5 2020, 09:44:06) [MSC v.1916 64 bit (AMD64)]'. \r\n\r\nThe code that I run as the following gives IndexError for sylow_subgroup():\r\n\r\nfrom sympy.combinatorics import DihedralGroup, PermutationGroup, Permutation\r\n\r\nG = DihedralGroup(18)\r\n\r\nS2 = G.sylow_subgroup(p=2)\r\n \r\nTraceback (most recent call last):\r\n  File \"<input>\", line 7, in <module>\r\n  File \"D:\\anaconda38\\envs\\default\\lib\\site-packages\\sympy\\combinatorics\\perm_groups.py\", line 4370, in sylow_subgroup\r\n    blocks = self.minimal_blocks()\r\n  File \"D:\\anaconda38\\envs\\default\\lib\\site-packages\\sympy\\combinatorics\\perm_groups.py\", line 2207, in minimal_blocks\r\n    del num_blocks[i], blocks[i]\r\nIndexError: list assignment index out of range\r\n\r\nThe same error shows up as well when I set: \r\nG = DihedralGroup(2*25)\r\n\r\nS2 = G.sylow_subgroup(p=2)\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2020-08-12T06:07:32Z",
  "version": "1.7",
  "FAIL_TO_PASS": "[\"test_sylow_subgroup\"]",
  "PASS_TO_PASS": "[\"test_has\", \"test_generate\", \"test_order\", \"test_equality\", \"test_stabilizer\", \"test_center\", \"test_centralizer\", \"test_coset_rank\", \"test_coset_factor\", \"test_orbits\", \"test_is_normal\", \"test_eq\", \"test_derived_subgroup\", \"test_is_solvable\", \"test_rubik1\", \"test_direct_product\", \"test_orbit_rep\", \"test_schreier_vector\", \"test_random_pr\", \"test_is_alt_sym\", \"test_minimal_block\", \"test_minimal_blocks\", \"test_max_div\", \"test_is_primitive\", \"test_random_stab\", \"test_transitivity_degree\", \"test_schreier_sims_random\", \"test_baseswap\", \"test_schreier_sims_incremental\", \"test_subgroup_search\", \"test_normal_closure\", \"test_derived_series\", \"test_lower_central_series\", \"test_commutator\", \"test_is_nilpotent\", \"test_is_trivial\", \"test_pointwise_stabilizer\", \"test_make_perm\", \"test_elements\", \"test_is_group\", \"test_PermutationGroup\", \"test_coset_transvesal\", \"test_coset_table\", \"test_subgroup\", \"test_generator_product\", \"test_polycyclic\", \"test_elementary\", \"test_perfect\", \"test_index\", \"test_cyclic\", \"test_abelian_invariants\", \"test_composition_series\", \"test_is_symmetric\", \"test_conjugacy_class\", \"test_conjugacy_classes\", \"test_coset_class\"]",
  "environment_setup_commit": "cffd4e0f86fefd4802349a9f9b19ed70934ea354",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.135632",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}