{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-24370",
  "base_commit": "36a36f87dd3ac94593d8de186efd3532c77f5191",
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -2423,7 +2423,7 @@ def __floordiv__(self, other):\n             return NotImplemented\n         if isinstance(other, Integer):\n             return Integer(self.p // other)\n-        return Integer(divmod(self, other)[0])\n+        return divmod(self, other)[0]\n \n     def __rfloordiv__(self, other):\n         return Integer(Integer(other).p // self.p)\n",
  "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -16,6 +16,7 @@\n from sympy.core.symbol import Dummy, Symbol\n from sympy.core.sympify import sympify\n from sympy.functions.combinatorial.factorials import factorial\n+from sympy.functions.elementary.integers import floor\n from sympy.functions.combinatorial.numbers import fibonacci\n from sympy.functions.elementary.exponential import exp, log\n from sympy.functions.elementary.miscellaneous import sqrt, cbrt\n@@ -121,6 +122,7 @@ def test_mod():\n \n \n def test_divmod():\n+    x = Symbol(\"x\")\n     assert divmod(S(12), S(8)) == Tuple(1, 4)\n     assert divmod(-S(12), S(8)) == Tuple(-2, 4)\n     assert divmod(S.Zero, S.One) == Tuple(0, 0)\n@@ -128,6 +130,7 @@ def test_divmod():\n     raises(ZeroDivisionError, lambda: divmod(S.One, S.Zero))\n     assert divmod(S(12), 8) == Tuple(1, 4)\n     assert divmod(12, S(8)) == Tuple(1, 4)\n+    assert S(1024)//x == 1024//x == floor(1024/x)\n \n     assert divmod(S(\"2\"), S(\"3/2\")) == Tuple(S(\"1\"), S(\"1/2\"))\n     assert divmod(S(\"3/2\"), S(\"2\")) == Tuple(S(\"0\"), S(\"3/2\"))\n",
  "problem_statement": "Floor division with sympy.Integer gives: Argument of Integer should be of numeric type, got floor(1024/s0)\n```\r\nimport sympy\r\n\r\ns0 = sympy.Symbol('s0')\r\nsympy.Integer(1024)//s0\r\n```\r\n\r\ngives\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/numbers.py\", line 2098, in __new__\r\n    ival = int(i)\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/expr.py\", line 320, in __int__\r\n    raise TypeError(\"Cannot convert symbols to int\")\r\nTypeError: Cannot convert symbols to int\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"repro.py\", line 4, in <module>\r\n    sympy.Integer(1024)//s0\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/decorators.py\", line 65, in __sympifyit_wrapper\r\n    return func(a, b)\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/numbers.py\", line 2426, in __floordiv__\r\n    return Integer(divmod(self, other)[0])\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/cache.py\", line 72, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/numbers.py\", line 2100, in __new__\r\n    raise TypeError(\r\nTypeError: Argument of Integer should be of numeric type, got floor(1024/s0).\r\n```\r\n\r\noddly enough, it works if the lhs is a plain Python int.\nFloor division with sympy.Integer gives: Argument of Integer should be of numeric type, got floor(1024/s0)\n```\r\nimport sympy\r\n\r\ns0 = sympy.Symbol('s0')\r\nsympy.Integer(1024)//s0\r\n```\r\n\r\ngives\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/numbers.py\", line 2098, in __new__\r\n    ival = int(i)\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/expr.py\", line 320, in __int__\r\n    raise TypeError(\"Cannot convert symbols to int\")\r\nTypeError: Cannot convert symbols to int\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"repro.py\", line 4, in <module>\r\n    sympy.Integer(1024)//s0\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/decorators.py\", line 65, in __sympifyit_wrapper\r\n    return func(a, b)\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/numbers.py\", line 2426, in __floordiv__\r\n    return Integer(divmod(self, other)[0])\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/cache.py\", line 72, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/Users/ezyang/Dev/sympy/sympy/core/numbers.py\", line 2100, in __new__\r\n    raise TypeError(\r\nTypeError: Argument of Integer should be of numeric type, got floor(1024/s0).\r\n```\r\n\r\noddly enough, it works if the lhs is a plain Python int.\n",
  "hints_text": "The fix seems to be\r\n```diff\r\ndiff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\r\nindex 3b1aec2..52f7ea4 100644\r\n--- a/sympy/core/numbers.py\r\n+++ b/sympy/core/numbers.py\r\n@@ -2423,7 +2423,7 @@ def __floordiv__(self, other):\r\n             return NotImplemented\r\n         if isinstance(other, Integer):\r\n             return Integer(self.p // other)\r\n-        return Integer(divmod(self, other)[0])\r\n+        return divmod(self, other)[0]\r\n \r\n     def __rfloordiv__(self, other):\r\n         return Integer(Integer(other).p // self.p)\r\n```\nThe fix seems to be\r\n```diff\r\ndiff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\r\nindex 3b1aec2..52f7ea4 100644\r\n--- a/sympy/core/numbers.py\r\n+++ b/sympy/core/numbers.py\r\n@@ -2423,7 +2423,7 @@ def __floordiv__(self, other):\r\n             return NotImplemented\r\n         if isinstance(other, Integer):\r\n             return Integer(self.p // other)\r\n-        return Integer(divmod(self, other)[0])\r\n+        return divmod(self, other)[0]\r\n \r\n     def __rfloordiv__(self, other):\r\n         return Integer(Integer(other).p // self.p)\r\n```",
  "created_at": "2022-12-11T14:10:23Z",
  "version": "1.12",
  "FAIL_TO_PASS": "[\"test_divmod\"]",
  "PASS_TO_PASS": "[\"test_seterr\", \"test_mod\", \"test_igcd\", \"test_igcd_lehmer\", \"test_igcd2\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Number_cmp\", \"test_Rational_cmp\", \"test_Float\", \"test_zero_not_false\", \"test_float_mpf\", \"test_Float_RealElement\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_issue_14289\", \"test_Float_from_tuple\", \"test_Infinity\", \"test_Infinity_2\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_Infinity_inequations\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_integer_log\", \"test_isqrt\", \"test_powers_Integer\", \"test_powers_Rational\", \"test_powers_Float\", \"test_lshift_Integer\", \"test_rshift_Integer\", \"test_and_Integer\", \"test_xor_Integer\", \"test_or_Integer\", \"test_invert_Integer\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_int_NumberSymbols\", \"test_real_bug\", \"test_bug_sqrt\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_issue_13890\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_TribonacciConstant_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_rounding_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Catalan_rewrite\", \"test_bool_eq\", \"test_Float_eq\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_simplify_AlgebraicNumber\", \"test_Float_idempotence\", \"test_comp1\", \"test_issue_9491\", \"test_issue_10063\", \"test_issue_10020\", \"test_invert_numbers\", \"test_mod_inverse\", \"test_golden_ratio_rewrite_as_sqrt\", \"test_tribonacci_constant_rewrite_as_sqrt\", \"test_comparisons_with_unknown_type\", \"test_NumberSymbol_comparison\", \"test_Integer_precision\", \"test_Integer_ceiling_floor\", \"test_ComplexInfinity\", \"test_Infinity_floor_ceiling_power\", \"test_One_power\", \"test_NegativeInfinity\", \"test_issue_6133\", \"test_abc\", \"test_floordiv\", \"test_negation\"]",
  "environment_setup_commit": "c6cb7c5602fa48034ab1bd43c2347a7e8488f12e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.156317",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}