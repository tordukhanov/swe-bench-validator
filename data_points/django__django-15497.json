{
  "repo": "django/django",
  "instance_id": "django__django-15497",
  "base_commit": "d46e158ee21cb067a65d44699e6dce00b3dab8e3",
  "patch": "diff --git a/django/http/request.py b/django/http/request.py\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -261,7 +261,8 @@ def scheme(self):\n                 )\n             header_value = self.META.get(header)\n             if header_value is not None:\n-                return \"https\" if header_value == secure_value else \"http\"\n+                header_value, *_ = header_value.split(\",\", 1)\n+                return \"https\" if header_value.strip() == secure_value else \"http\"\n         return self._get_scheme()\n \n     def is_secure(self):\n",
  "test_patch": "diff --git a/tests/settings_tests/tests.py b/tests/settings_tests/tests.py\n--- a/tests/settings_tests/tests.py\n+++ b/tests/settings_tests/tests.py\n@@ -424,6 +424,26 @@ def test_set_with_xheader_right(self):\n         req.META[\"HTTP_X_FORWARDED_PROTO\"] = \"https\"\n         self.assertIs(req.is_secure(), True)\n \n+    @override_settings(SECURE_PROXY_SSL_HEADER=(\"HTTP_X_FORWARDED_PROTO\", \"https\"))\n+    def test_set_with_xheader_leftmost_right(self):\n+        req = HttpRequest()\n+        req.META[\"HTTP_X_FORWARDED_PROTO\"] = \"https, http\"\n+        self.assertIs(req.is_secure(), True)\n+        req.META[\"HTTP_X_FORWARDED_PROTO\"] = \"https  , http\"\n+        self.assertIs(req.is_secure(), True)\n+\n+    @override_settings(SECURE_PROXY_SSL_HEADER=(\"HTTP_X_FORWARDED_PROTO\", \"https\"))\n+    def test_set_with_xheader_leftmost_not_secure(self):\n+        req = HttpRequest()\n+        req.META[\"HTTP_X_FORWARDED_PROTO\"] = \"http, https\"\n+        self.assertIs(req.is_secure(), False)\n+\n+    @override_settings(SECURE_PROXY_SSL_HEADER=(\"HTTP_X_FORWARDED_PROTO\", \"https\"))\n+    def test_set_with_xheader_multiple_not_secure(self):\n+        req = HttpRequest()\n+        req.META[\"HTTP_X_FORWARDED_PROTO\"] = \"http ,wrongvalue,http,http\"\n+        self.assertIs(req.is_secure(), False)\n+\n     @override_settings(SECURE_PROXY_SSL_HEADER=(\"HTTP_X_FORWARDED_PROTO\", \"https\"))\n     def test_xheader_preferred_to_underlying_request(self):\n         class ProxyRequest(HttpRequest):\n",
  "problem_statement": "Add support for multiple values for the x-forwarded-proto header\nDescription\n\t\nWhen Django is deployed behind more than one proxy, the proxy behavior is sometimes to list the protocol as a comma-separated list. \nHowever, currently, Django expects only one value for the x-forwarded-proto header, instead of parsing it as a list of values and setting the protocol accordingly.\nx-forwarded-proto is a non-standard header, so there isn't a specification for its use, but different reverse-proxy vendors do use it in different ways, and some append the protocol as a comma-separated value from left-to-right (left being the furthermost proxy and rightmost being the closest). \nSimilar issues have been raised and implemented in other projects, for example:\nTornado: \nIssue: ​https://github.com/tornadoweb/tornado/issues/2161\nImplementation: ​https://github.com/tornadoweb/tornado/blob/00c9e0ae31a5a0d12e09109fb77ffe391bfe1131/tornado/httpserver.py#L347-L350\nRuby: \nIssue: ​https://bugs.ruby-lang.org/issues/10789\nImplemenation: ​https://github.com/ruby/ruby/blob/d92f09a5eea009fa28cd046e9d0eb698e3d94c5c/tool/lib/webrick/httprequest.rb#L614-L616\nReactor-Netty:\n​https://github.com/reactor/reactor-netty/issues/976\nImplementation: ​https://github.com/reactor/reactor-netty/commit/e190d5bbf65d88d3a0240cd60b81e1ee1907030e\nMost implementation use the leftmost-value or rightmost value. I would expect that provided that you are certain that the initial proxy can be trusted, that the left-most value makes the most sense, since it represent the original value at the entry-point for the HTTP request which is often where TLS is being terminated. \nCommon example of this behavior is when using mulitple AWS proxies such as API Gateway proxying to an elastic load balancer.\n",
  "hints_text": "",
  "created_at": "2022-03-10T18:35:33Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_set_with_xheader_leftmost_right (settings_tests.tests.SecureProxySslHeaderTest)\"]",
  "PASS_TO_PASS": "[\"test_override_settings_inheritance (settings_tests.tests.ChildDecoratedTestCase)\", \"test_max_recursion_error (settings_tests.tests.ClassDecoratedTestCaseSuper)\", \"Overriding a method on a super class and then calling that method on\", \"test_method_override (settings_tests.tests.ClassDecoratedTestCase)\", \"test_override (settings_tests.tests.ClassDecoratedTestCase)\", \"Settings are overridden within setUpClass (#21281).\", \"test_configure (settings_tests.tests.IsOverriddenTest)\", \"test_evaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_module (settings_tests.tests.IsOverriddenTest)\", \"test_override (settings_tests.tests.IsOverriddenTest)\", \"test_settings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_unevaluated_lazysettings_repr (settings_tests.tests.IsOverriddenTest)\", \"test_usersettingsholder_repr (settings_tests.tests.IsOverriddenTest)\", \"test_tuple_settings (settings_tests.tests.TestListSettings)\", \"test_method_override (settings_tests.tests.FullyDecoratedTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTestCase)\", \"test_already_configured (settings_tests.tests.SettingsTests)\", \"test_class_decorator (settings_tests.tests.SettingsTests)\", \"test_context_manager (settings_tests.tests.SettingsTests)\", \"test_decorator (settings_tests.tests.SettingsTests)\", \"test_incorrect_timezone (settings_tests.tests.SettingsTests)\", \"test_no_secret_key (settings_tests.tests.SettingsTests)\", \"test_no_settings_module (settings_tests.tests.SettingsTests)\", \"test_nonupper_settings_ignored_in_default_settings (settings_tests.tests.SettingsTests)\", \"test_nonupper_settings_prohibited_in_configure (settings_tests.tests.SettingsTests)\", \"test_override (settings_tests.tests.SettingsTests)\", \"test_override_change (settings_tests.tests.SettingsTests)\", \"test_override_doesnt_leak (settings_tests.tests.SettingsTests)\", \"Allow deletion of a setting in an overridden settings set (#18824)\", \"override_settings uses the actual _wrapped attribute at\", \"test_settings_delete (settings_tests.tests.SettingsTests)\", \"test_settings_delete_wrapped (settings_tests.tests.SettingsTests)\", \"test_signal_callback_context_manager (settings_tests.tests.SettingsTests)\", \"test_signal_callback_decorator (settings_tests.tests.SettingsTests)\", \"test_use_deprecated_pytz_deprecation (settings_tests.tests.SettingsTests)\", \"test_use_tz_false_deprecation (settings_tests.tests.SettingsTests)\", \"test_none (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_leftmost_not_secure (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_multiple_not_secure (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_right (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_with_xheader_wrong (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_set_without_xheader (settings_tests.tests.SecureProxySslHeaderTest)\", \"test_xheader_preferred_to_underlying_request (settings_tests.tests.SecureProxySslHeaderTest)\", \"Regression test for #19031\", \"test_add_script_name_prefix (settings_tests.tests.MediaURLStaticURLPrefixTest)\", \"test_not_prefixed (settings_tests.tests.MediaURLStaticURLPrefixTest)\", \"test_decorated_testcase_module (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_decorated_testcase_name (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_nested_order (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_no_ops (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_list_override_strings (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_method_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"test_override (settings_tests.tests.FullyDecoratedTranTestCase)\", \"Receiver fails on both enter and exit.\", \"Receiver fails on enter only.\", \"Receiver fails on exit only.\", \"Error is raised correctly when reusing the same override_settings\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.731647",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}