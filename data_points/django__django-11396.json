{
  "repo": "django/django",
  "instance_id": "django__django-11396",
  "base_commit": "59f04d6b8f6c7c7a1039185bd2c5653ea91f7ff7",
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -5,7 +5,8 @@\n \n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.expressions import OrderBy, Random, RawSQL, Ref\n+from django.db.models.expressions import OrderBy, Random, RawSQL, Ref, Value\n+from django.db.models.functions import Cast\n from django.db.models.query_utils import QueryWrapper, select_related_descend\n from django.db.models.sql.constants import (\n     CURSOR, GET_ITERATOR_CHUNK_SIZE, MULTI, NO_RESULTS, ORDER_DIR, SINGLE,\n@@ -278,6 +279,9 @@ def get_order_by(self):\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n+                if isinstance(field, Value):\n+                    # output_field must be resolved for constants.\n+                    field = Cast(field, field.output_field)\n                 if not isinstance(field, OrderBy):\n                     field = field.asc()\n                 if not self.query.standard_ordering:\n@@ -299,10 +303,13 @@ def get_order_by(self):\n                     True))\n                 continue\n             if col in self.query.annotations:\n-                # References to an expression which is masked out of the SELECT clause\n-                order_by.append((\n-                    OrderBy(self.query.annotations[col], descending=descending),\n-                    False))\n+                # References to an expression which is masked out of the SELECT\n+                # clause.\n+                expr = self.query.annotations[col]\n+                if isinstance(expr, Value):\n+                    # output_field must be resolved for constants.\n+                    expr = Cast(expr, expr.output_field)\n+                order_by.append((OrderBy(expr, descending=descending), False))\n                 continue\n \n             if '.' in field:\n",
  "test_patch": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,7 +1,10 @@\n from datetime import datetime\n from operator import attrgetter\n \n-from django.db.models import Count, DateTimeField, F, Max, OuterRef, Subquery\n+from django.core.exceptions import FieldError\n+from django.db.models import (\n+    CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n+)\n from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n@@ -402,6 +405,36 @@ def test_order_by_f_expression_duplicates(self):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_constant_value(self):\n+        # Order by annotated constant from selected columns.\n+        qs = Article.objects.annotate(\n+            constant=Value('1', output_field=CharField()),\n+        ).order_by('constant', '-headline')\n+        self.assertSequenceEqual(qs, [self.a4, self.a3, self.a2, self.a1])\n+        # Order by annotated constant which is out of selected columns.\n+        self.assertSequenceEqual(\n+            qs.values_list('headline', flat=True), [\n+                'Article 4',\n+                'Article 3',\n+                'Article 2',\n+                'Article 1',\n+            ],\n+        )\n+        # Order by constant.\n+        qs = Article.objects.order_by(Value('1', output_field=CharField()), '-headline')\n+        self.assertSequenceEqual(qs, [self.a4, self.a3, self.a2, self.a1])\n+\n+    def test_order_by_constant_value_without_output_field(self):\n+        msg = 'Cannot resolve expression type, unknown output_field'\n+        qs = Article.objects.annotate(constant=Value('1')).order_by('constant')\n+        for ordered_qs in (\n+            qs,\n+            qs.values('headline'),\n+            Article.objects.order_by(Value('1')),\n+        ):\n+            with self.subTest(ordered_qs=ordered_qs), self.assertRaisesMessage(FieldError, msg):\n+                ordered_qs.first()\n+\n     def test_related_ordering_duplicate_table_reference(self):\n         \"\"\"\n         An ordering referencing a model with an ordering referencing a model\n",
  "problem_statement": "Cannot order query by constant value on PostgreSQL\nDescription\n\t \n\t\t(last modified by Sven R. Kunze)\n\t \nMyModel.objects.annotate(my_column=Value('asdf')).order_by('my_column').values_list('id')\nProgrammingError: non-integer constant in ORDER BY\nLINE 1: ...odel\".\"id\" FROM \"mymodel\" ORDER BY 'asdf' ASC...\nDoes it qualify as a bug this time? ;-)\n",
  "hints_text": "I don't see what the use of ordering by a constant string value is. Anyway, it looks like this is a database limitation.\nI don't see what the use of ordering by a constant string value is. Reducing code complexity (e.g. fewer ifs). The code overview from #26192: # 1 create complex queryset ... more code # 2 annotate and add extra where ... more code # 3 add order (maybe referring to the extra column) ... more code # 4 wrap paginator around queryset ... more code # 5 create values_list of paged queryset ... more code # 6 evaluate <<<< crash The code above spread over several files and few thousand lines builds up a quite complex query. Each point contribute to the final queryset (actually more than one queryset). In order to reduce coupling and code complexity, adding a constant column make things straightforward (otherwise we would need to check if the column was added). it looks like this is a database limitation. Are you sure? From what I know of SQL, it's possible to order by column name (a string) or by column index (a number). Django just creates invalid SQL. Why does Django not refer the column order_by by name (or index) and instead inserts a value?\nSorry for misunderstanding, however, I cannot reproduce a crash on the stable/1.8.x branch: from django.db.models import Value from polls.models import Question Question.objects.annotate(my_column=Value('asdf')).order_by('my_column').values_list('id') [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,)] Tested on SQLite, PostgreSQL, and MySQL. Can you provide more details to reproduce?\nInteresting. We upgraded to 1.8.9 and use PostgreSQL 9.3.10. Our testsuite runs without errors. Can you provide your query string? I would be interested in how the order clause looks. Ours: SELECT \"mymodel\".\"id\" FROM \"app_mymodel\" ORDER BY 'asdf' ASC\nstr(Question.objects.annotate(my_column=Value('asdf')).order_by('my_column').values_list('id').query) 'SELECT \"polls_question\".\"id\" FROM \"polls_question\" ORDER BY asdf ASC' PostgreSQL 9.5.0 and psycopg2 2.6.1 here.\npsycopg2 2.5.1 psql: =# SELECT \"mymodel\".\"id\" FROM \"mymodel\" ORDER BY 'asdf' ASC; ERROR: non-integer constant in ORDER BY LINE 1: ...odel\".\"id\" FROM \"mymodel\" ORDER BY 'asdf' ASC... ^ =# SELECT \"mymodel\".\"id\" FROM \"mymodel\" ORDER BY \"asdf\" ASC; ERROR: column \"asdf\" does not exist LINE 1: ...odel\".\"id\" FROM \"mymodel\" ORDER BY \"asdf\" ASC... ^ SELECT \"mymodel\".\"id\" FROM \"mymodel\" ORDER BY asdf ASC; ERROR: column \"asdf\" does not exist LINE 1: ...odel\".\"id\" FROM \"mymodel\" ORDER BY asdf ASC; ^\nI can reproduce on PostgreSQL now (not sure if the issue affects other databases). Looks like the query needs to be something like SELECT \"polls_question\".\"id\" FROM \"polls_question\" ORDER BY 'asdf'::text ASC; ​reference\nThat seems to work. On the other hand, your comment (\"I don't see what the use of ordering by a constant string value is\") made me think of another way: SELECT \"polls_question\".\"id\" FROM \"polls_question\"; Dropping the order clause entirely might even solve that problem for other databases.\nHi I added a ​PR. IMO when we use value expression in order by but don't include in select columns, the query occurs incorrectly.",
  "created_at": "2019-05-21T18:25:06Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_order_by_constant_value_without_output_field (ordering.tests.OrderingTests)\", \"test_order_by_f_expression (ordering.tests.OrderingTests)\"]",
  "PASS_TO_PASS": "[\"test_default_ordering (ordering.tests.OrderingTests)\", \"F expressions can be used in Meta.ordering.\", \"test_default_ordering_override (ordering.tests.OrderingTests)\", \"test_deprecated_values_annotate (ordering.tests.OrderingTests)\", \"test_extra_ordering (ordering.tests.OrderingTests)\", \"test_extra_ordering_quoting (ordering.tests.OrderingTests)\", \"test_extra_ordering_with_table_name (ordering.tests.OrderingTests)\", \"test_no_reordering_after_slicing (ordering.tests.OrderingTests)\", \"test_order_by_constant_value (ordering.tests.OrderingTests)\", \"test_order_by_f_expression_duplicates (ordering.tests.OrderingTests)\", \"test_order_by_fk_attname (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first (ordering.tests.OrderingTests)\", \"test_order_by_nulls_first_and_last (ordering.tests.OrderingTests)\", \"test_order_by_nulls_last (ordering.tests.OrderingTests)\", \"test_order_by_override (ordering.tests.OrderingTests)\", \"test_order_by_pk (ordering.tests.OrderingTests)\", \"test_orders_nulls_first_on_filtered_subquery (ordering.tests.OrderingTests)\", \"test_random_ordering (ordering.tests.OrderingTests)\", \"test_related_ordering_duplicate_table_reference (ordering.tests.OrderingTests)\", \"test_reverse_meta_ordering_pure (ordering.tests.OrderingTests)\", \"test_reverse_ordering_pure (ordering.tests.OrderingTests)\", \"test_reversed_ordering (ordering.tests.OrderingTests)\", \"test_stop_slicing (ordering.tests.OrderingTests)\", \"test_stop_start_slicing (ordering.tests.OrderingTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.571017",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}