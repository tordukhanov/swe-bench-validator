{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14544",
  "base_commit": "7e7b5092991cf7a7cf6bd95d56b08deef5eb9847",
  "patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -6,9 +6,10 @@\n # Author: Andreas Mueller\n #         Joris Van den Bossche\n # License: BSD\n-\n+import warnings\n from itertools import chain\n \n+import numbers\n import numpy as np\n from scipy import sparse\n from joblib import Parallel, delayed\n@@ -394,6 +395,34 @@ def _validate_output(self, result):\n                     \"The output of the '{0}' transformer should be 2D (scipy \"\n                     \"matrix, array, or pandas DataFrame).\".format(name))\n \n+    def _validate_features(self, n_features, feature_names):\n+        \"\"\"Ensures feature counts and names are the same during fit and\n+        transform.\n+\n+        TODO: It should raise an error from v0.24\n+        \"\"\"\n+\n+        if ((self._feature_names_in is None or feature_names is None)\n+                and self._n_features == n_features):\n+            return\n+\n+        neg_col_present = np.any([_is_negative_indexing(col)\n+                                  for col in self._columns])\n+        if neg_col_present and self._n_features != n_features:\n+            raise RuntimeError(\"At least one negative column was used to \"\n+                               \"indicate columns, and the new data's number \"\n+                               \"of columns does not match the data given \"\n+                               \"during fit. \"\n+                               \"Please make sure the data during fit and \"\n+                               \"transform have the same number of columns.\")\n+\n+        if (self._n_features != n_features or\n+                np.any(self._feature_names_in != np.asarray(feature_names))):\n+            warnings.warn(\"Given feature/column names or counts do not match \"\n+                          \"the ones for the data given during fit. This will \"\n+                          \"fail from v0.24.\",\n+                          DeprecationWarning)\n+\n     def _log_message(self, name, idx, total):\n         if not self.verbose:\n             return None\n@@ -470,6 +499,11 @@ def fit_transform(self, X, y=None):\n             sparse matrices.\n \n         \"\"\"\n+        # TODO: this should be `feature_names_in_` when we start having it\n+        if hasattr(X, \"columns\"):\n+            self._feature_names_in = np.asarray(X.columns)\n+        else:\n+            self._feature_names_in = None\n         X = _check_X(X)\n         self._validate_transformers()\n         self._validate_column_callables(X)\n@@ -518,6 +552,10 @@ def transform(self, X):\n         \"\"\"\n         check_is_fitted(self, 'transformers_')\n         X = _check_X(X)\n+        if hasattr(X, \"columns\"):\n+            X_feature_names = np.asarray(X.columns)\n+        else:\n+            X_feature_names = None\n \n         if self._n_features > X.shape[1]:\n             raise ValueError('Number of features of the input must be equal '\n@@ -527,6 +565,8 @@ def transform(self, X):\n                              .format(self._n_features, X.shape[1]))\n \n         # No column reordering allowed for named cols combined with remainder\n+        # TODO: remove this mechanism in 0.24, once we enforce strict column\n+        # name order and count. See #14237 for details.\n         if (self._remainder[2] is not None and\n                 hasattr(self, '_df_columns') and\n                 hasattr(X, 'columns')):\n@@ -538,6 +578,7 @@ def transform(self, X):\n                                  'and for transform when using the '\n                                  'remainder keyword')\n \n+        self._validate_features(X.shape[1], X_feature_names)\n         Xs = self._fit_transform(X, None, _transform_one, fitted=True)\n         self._validate_output(Xs)\n \n@@ -707,3 +748,13 @@ def make_column_transformer(*transformers, **kwargs):\n                              remainder=remainder,\n                              sparse_threshold=sparse_threshold,\n                              verbose=verbose)\n+\n+\n+def _is_negative_indexing(key):\n+    # TODO: remove in v0.24\n+    def is_neg(x): return isinstance(x, numbers.Integral) and x < 0\n+    if isinstance(key, slice):\n+        return is_neg(key.start) or is_neg(key.stop)\n+    elif _check_key_type(key, int):\n+        return np.any(np.asarray(key) < 0)\n+    return False\n",
  "test_patch": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -3,6 +3,7 @@\n \"\"\"\n import re\n \n+import warnings\n import numpy as np\n from scipy import sparse\n import pytest\n@@ -498,7 +499,10 @@ def test_column_transformer_invalid_columns(remainder):\n     ct = ColumnTransformer([('trans', Trans(), col)], remainder=remainder)\n     ct.fit(X_array)\n     X_array_more = np.array([[0, 1, 2], [2, 4, 6], [3, 6, 9]]).T\n-    ct.transform(X_array_more)  # Should accept added columns\n+    msg = (\"Given feature/column names or counts do not match the ones for \"\n+           \"the data given during fit.\")\n+    with pytest.warns(DeprecationWarning, match=msg):\n+        ct.transform(X_array_more)  # Should accept added columns, for now\n     X_array_fewer = np.array([[0, 1, 2], ]).T\n     err_msg = 'Number of features'\n     with pytest.raises(ValueError, match=err_msg):\n@@ -1096,13 +1100,16 @@ def test_column_transformer_reordered_column_names_remainder(explicit_colname):\n \n     tf.fit(X_fit_df)\n     err_msg = 'Column ordering must be equal'\n+    warn_msg = (\"Given feature/column names or counts do not match the ones \"\n+                \"for the data given during fit.\")\n     with pytest.raises(ValueError, match=err_msg):\n         tf.transform(X_trans_df)\n \n     # No error for added columns if ordering is identical\n     X_extended_df = X_fit_df.copy()\n     X_extended_df['third'] = [3, 6, 9]\n-    tf.transform(X_extended_df)  # No error should be raised\n+    with pytest.warns(DeprecationWarning, match=warn_msg):\n+        tf.transform(X_extended_df)  # No error should be raised, for now\n \n     # No 'columns' AttributeError when transform input is a numpy array\n     X_array = X_fit_array.copy()\n@@ -1111,6 +1118,56 @@ def test_column_transformer_reordered_column_names_remainder(explicit_colname):\n         tf.transform(X_array)\n \n \n+def test_feature_name_validation():\n+    \"\"\"Tests if the proper warning/error is raised if the columns do not match\n+    during fit and transform.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = np.ones(shape=(3, 2))\n+    X_extra = np.ones(shape=(3, 3))\n+    df = pd.DataFrame(X, columns=['a', 'b'])\n+    df_extra = pd.DataFrame(X_extra, columns=['a', 'b', 'c'])\n+\n+    tf = ColumnTransformer([('bycol', Trans(), ['a', 'b'])])\n+    tf.fit(df)\n+\n+    msg = (\"Given feature/column names or counts do not match the ones for \"\n+           \"the data given during fit.\")\n+    with pytest.warns(DeprecationWarning, match=msg):\n+        tf.transform(df_extra)\n+\n+    tf = ColumnTransformer([('bycol', Trans(), [0])])\n+    tf.fit(df)\n+\n+    with pytest.warns(DeprecationWarning, match=msg):\n+        tf.transform(X_extra)\n+\n+    with warnings.catch_warnings(record=True) as warns:\n+        tf.transform(X)\n+    assert not warns\n+\n+    tf = ColumnTransformer([('bycol', Trans(), ['a'])],\n+                           remainder=Trans())\n+    tf.fit(df)\n+    with pytest.warns(DeprecationWarning, match=msg):\n+        tf.transform(df_extra)\n+\n+    tf = ColumnTransformer([('bycol', Trans(), [0, -1])])\n+    tf.fit(df)\n+    msg = \"At least one negative column was used to\"\n+    with pytest.raises(RuntimeError, match=msg):\n+        tf.transform(df_extra)\n+\n+    tf = ColumnTransformer([('bycol', Trans(), slice(-1, -3, -1))])\n+    tf.fit(df)\n+    with pytest.raises(RuntimeError, match=msg):\n+        tf.transform(df_extra)\n+\n+    with warnings.catch_warnings(record=True) as warns:\n+        tf.transform(df)\n+    assert not warns\n+\n+\n @pytest.mark.parametrize(\"array_type\", [np.asarray, sparse.csr_matrix])\n def test_column_transformer_mask_indexing(array_type):\n     # Regression test for #14510\n",
  "problem_statement": "RFC ColumnTransformer input validation and requirements\nThere have been some issues around ColumnTransformer input requirements that I think we might want to discuss more explicitly. Examples are an actual bug when changing columns: #14237 and how to define number of input features #13603.\r\nRelated is also the idea of checking for column name consistency: #7242\r\n\r\nMainly I'm asking whether it makes sense to have the same requirements for ColumnTransformer as for other estimators.\r\n\r\nColumnTransformer is the only estimator that addresses columns by name, and so reordering columns doesn't impact the model and actually everything works fine. Should we still aim for checking for reordering of columns?\r\n\r\nRight now, ``transform`` even works if we add additional columns to ``X``, which makes sense, since it only cares about the columns it is using.\r\n\r\nShould we allow that going forward as long as remainder is not used? (if remainder is used, the result of ``ColumnTransformer`` would have a different shape and downstream estimators would break, so I think we shouldn't support it in this case).\r\n\r\nIn either case, what's ``n_features_in_`` for a ColumnTransformer? The number of columns in ``X`` during ``fit`` or the number of columns actually used?\r\nDoes it even make sense to define it if we allow adding other columns that are ignored?\n",
  "hints_text": "Actually, whether adding a column works depends on how the columns were specified:\r\n```python\r\nimport pandas as pd\r\nfrom sklearn.compose import make_column_transformer\r\n\r\ndf = pd.DataFrame({\r\n  'boro': ['Manhattan', 'Queens', 'Manhattan', 'Brooklyn', 'Brooklyn', 'Bronx'],\r\n  'salary': [103, 89, 142, 54, 63, 219],\r\n  'vegan': ['No', 'No','No','Yes', 'Yes', 'No']})\r\n\r\ncategorical = df.dtypes == object\r\npreprocess = make_column_transformer(\r\n    (StandardScaler(), ~categorical),\r\n    (OneHotEncoder(), categorical))\r\npreprocess.fit_transform(df)\r\ndf2 = df.copy()\r\ndf2['notused'] = 1\r\npreprocess.transform(df2)\r\n```\r\n```python_tb\r\nIndexingError  \r\n```\r\nAnd reordering the columns:\r\n```python\r\npreprocess.transform(df.loc[:, ::-1])\r\n```\r\npasses through the ColumnTransformer but what is passed on is wrong.\r\n\r\nbut\r\n```python\r\ncategorical = ['boro', 'vegan']\r\ncontinuous = ['salary']\r\npreprocess = make_column_transformer(\r\n    (StandardScaler(), continuous),\r\n    (OneHotEncoder(), categorical))\r\npreprocess.fit_transform(df)\r\ndf['notused'] = 1\r\npreprocess.transform(df)\r\n```\r\n\r\nworks, and reordering columns also works:\r\n```python\r\npreprocess.transform(df.loc[:, ::-1)\r\n```\nSimilarly, reordering columns should work if you use names for indexing, but not if you use boolean masks. That's ... interesting ... behavior, I would say.\nFour approaches I could think of:\r\n\r\n1) Be strict and require that columns match exactly (with order). That would break code that currently works, but also might show some errors that currently hidden. Might be a bit inconvenient as it doesn't really allow subsetting columns flexibly.\r\n\r\n2) Be strict and require that columns match exactly *unless* they are specified by names. Then it should work on currently working use-cases, but error on things that are currently silent bugs.\r\n\r\n3) If the input is a pandas dataframe, always use the column names (from fit) to store the column identities, no matter how the user provided them originally, and allow reordering of columns and adding columns that are not used. Downside: behavior might change between when a numpy array is passed and when a dataframe is passed. I would need to think about this more.\r\n\r\n4) Keep things the way they are, i.e silent bug if reordering on booleans and integers and erroring on adding columns on booleans and integers and things working as expected using string names.\r\n\r\nAs I said above, if ``remainder`` is used we probably shouldn't allow adding extra columns for ``transform`` if we do (though we could also just ignore all columns not present during fit).\nFrom a user with an (admittedly ancient) usability background who very recently tripped over their own assumptions on named columns and their implications:\r\n- I have/had a strong association of by-name implying flexible-ordering (and vice-versa)\r\n- At the same time, I was oblivious of the fact that this implies different rules for how columns specified by name vs by index were handled, particularly with `remainder`\r\n- I have a hard time remembering what works with one type of usage of the same parameter versus another, particularly in combination with other parameters\r\n\r\nFrom this very subjective list, I would distill that:\r\n- clarity and consistency beat convenience\r\n\r\nMy main wish would be for the whole Pipeline/Transformer/Estimator API to be as consistent as possible in the choice of which of the rules that @amueller laid out above should be in effect. Option number 1 seems to match this the closest. I don't quite understand the part \"...inconvenient  as it doesn't really allow subsetting columns flexibly\", however. Isn't it this flexibility (as I understand you mean between fit and transform) which only causes problems with other transformers? I can't see a practical use case for the flexibility to have more/fewer columns between fit and transform.\r\n\r\nReading my own ramblings (stream of consciousness indeed), I would not see a lot of harm for the end user in deprecating the ability to specify columns by name and only allow numeric indices/slices, because:\r\n- If the user starts out with column names, it's easy for them to create indices to pass to `ColumnTransformer`\r\n- Numeric indices intuitively imply fixed ordering, which I understand is a standard for other transformers anyway\r\n\r\nThe documentation could then refer users seeking more convenience to the contribution [sklearn-pandas](scikit-learn-contrib/sklearn-pandas).\r\n\r\nSo this is more or less a 180 degree change from my initial suggestion, but I found myself using a lot of `if`s even explaining the problem in the issue and pull request, which made me aware it might be possible to reduce complexity (externally and internally) a little bit.\r\n\r\n\nThank you for your input. I agree with most of your assessment, though not entirely with your conclusion. Ideally we'd get as much consistency and convenience as possible.\r\nI also have a hard time wrapping my head around the current behavior, which is clearly not a great thing.\r\n\r\nAdding extra columns during transform indeed would not be possible with any other transformer and would be a bad idea. However, if you think of ColumnTransformer going from \"whatever was in the database / CSV\" to something that's structured for scikit-learn, it makes sense to allow dropping columns from the test set that were not in the training set. Often the training set is collected in a different way then the test set and there might be extra columns in the test set that are not relevant to the model.\r\nClearly this could easily be fixed by dropping those before passing them into the ColumnTransformer, so it's not that big a deal.\r\n\r\nI'm not sure why you wouldn't allow using strings for indexing. We could allow strings for indexing and still require the order to be fixed. This might not correspond entirely to your mental model (or mine) but I also don't see any real downside to allowing that if we test for consistency and have a good error message.\r\n\r\nGenerally I think it's desirable that the behavior is as consistent as possible between the different ways to specify columns, which is not what's currently the case.\nAlso: users will be annoyed if we forbid things that were allowed previously \"just because\" ;)\nGood points. I did not really mean that clarity and convenience were a zero-sum-tradeoff to me (clarity begets convenience, the other way round... not so sure).\r\n\r\nIf ColumnTransformer wants to be used by users preparing raw data for scikit-learn (\"pipeline ingestion adaptor\"), as well as snugly inside a pipeline (\"good pipeline citizen\"), maybe it tries to be different things to different people? Not saying that it should be split up or anything, but this thought somehow stuck with me after re-reading the issue(s).\r\n\r\nMaybe some sort of `relax_pipeline_compatibility=False` kwarg? (Yes, I know, \"just make it an option\", the epitome of lazy interface design -- the irony is not lost to me ;). But in this case, it would clean up a lot of those `if`s at least in its default mode while it still could be used in \"clean up this mess\" mode if needed. Although my preference would be to let the user do this cleanup themselves)\r\n\r\nRegarding not allowing strings for indexing: ~~I suggest this because of (at least my) pretty strong intuitive understanding that by-name equals flexible ordering, and to keep other users from the same wrong assumption (admittedly subjective, would have to ask more users).~~ Edit: reading comprehension. :) I guess it depends on how many users have this assumption and would have to be \"corrected\" by the doc/errors (if we end up correcting most of them, we might be the ones in need of correcting).\r\n\r\nRegarding taking something away from users ([relevant xkcd - of course!](https://xkcd.com/1172/)). True, but it's still so new that they might not have used it yet... ;)\nI am happy with 1 as an interim solution at least. I would also consider\nallowing appended columns in a DataFrame. I would also consider 3 for the\nfuture but as you point out we would be making a new requirement that you\nneed to transform a DataFrame if you fit a DataFrame\n\nI quite like option one, especially since we can first warn the user of the change in the order and say we won't be accepting this soon.\r\n\r\nOption 3 worries me cause it's an implicit behavior which the user might not understand the implications of.\r\n\r\nI understand @amueller 's point on the difference between test and train sets, but I rather leave input validation to the user and not enter that realm in sklearn. That said, I'd still half-heartedly be okay with option 2. \nI'm fine with 1) if we do a deprecation cycle. I'm not sure it's convenient for users.\r\nRight now we allow extra columns in the test set in some cases that are ignored. If we deprecate that and then reintroduce that it's a bit weird and inconvenient. So I'm not sure if doing 1 first and then doing 3 is good because we send weird signals to the user. But I guess it wouldn't be the end of the world?\r\n\r\n@adrinjalali I'm not sure I understand what you mean by input validation.\r\nRight now we have even more implicit behavior because the behavior in 3 is what we're doing right now if names are passed but not otherwise.\r\n\nShould we try and implement this now that the release is out? @adrinjalali do you want to take this? @NicolasHug ?\r\nI can also give it a shot.\r\n\r\nI think clarifying this will be useful on the way to feature names\nI can take this @amueller ",
  "created_at": "2019-08-01T16:37:40Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[drop]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[passthrough]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_reordered_column_names_remainder[first]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_reordered_column_names_remainder[second]\", \"sklearn/compose/tests/test_column_transformer.py::test_feature_name_validation\"]",
  "PASS_TO_PASS": "[\"sklearn/compose/tests/test_column_transformer.py::test_column_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_dataframe\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-pandas]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-numpy]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-pandas]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-numpy]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_array\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_list\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_stacking\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_mixed_cols_sparse\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_threshold\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_error_msg_1D\", \"sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output\", \"sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output_pandas\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_pandas\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_kwargs\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_named_estimators\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_cloning\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_feature_names\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_special_strings\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[pd-index]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key5]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key6]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key7]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key8]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_remaining_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drops_all_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drop_all_sparse_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params_with_remainder\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est0-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est1-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est2-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est3-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est4-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est5-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit-est6-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est0-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est1-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est2-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est3-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est4-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est5-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_verbose[fit_transform-est6-\\\\\\\\[ColumnTransformer\\\\\\\\].*\\\\\\\\(1\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators_set_params\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_callable_specifier\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_negative_column_indexes\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_mask_indexing[asarray]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_mask_indexing[csr_matrix]\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.005762",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}