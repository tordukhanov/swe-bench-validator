{
  "repo": "django/django",
  "instance_id": "django__django-14179",
  "base_commit": "5b618f239ceb884c9380cf42361c7cc69bf1e208",
  "patch": "diff --git a/django/middleware/csrf.py b/django/middleware/csrf.py\n--- a/django/middleware/csrf.py\n+++ b/django/middleware/csrf.py\n@@ -226,12 +226,17 @@ def _set_token(self, request, response):\n \n     def _origin_verified(self, request):\n         request_origin = request.META['HTTP_ORIGIN']\n-        good_origin = '%s://%s' % (\n-            'https' if request.is_secure() else 'http',\n-            request.get_host(),\n-        )\n-        if request_origin == good_origin:\n-            return True\n+        try:\n+            good_host = request.get_host()\n+        except DisallowedHost:\n+            pass\n+        else:\n+            good_origin = '%s://%s' % (\n+                'https' if request.is_secure() else 'http',\n+                good_host,\n+            )\n+            if request_origin == good_origin:\n+                return True\n         if request_origin in self.allowed_origins_exact:\n             return True\n         try:\n",
  "test_patch": "diff --git a/tests/csrf_tests/tests.py b/tests/csrf_tests/tests.py\n--- a/tests/csrf_tests/tests.py\n+++ b/tests/csrf_tests/tests.py\n@@ -319,6 +319,15 @@ def test_https_malformed_host(self):\n         response = mw.process_view(req, token_view, (), {})\n         self.assertEqual(response.status_code, 403)\n \n+    def test_origin_malformed_host(self):\n+        req = self._get_POST_no_csrf_cookie_request()\n+        req._is_secure_override = True\n+        req.META['HTTP_HOST'] = '@malformed'\n+        req.META['HTTP_ORIGIN'] = 'https://www.evil.org'\n+        mw = CsrfViewMiddleware(token_view)\n+        response = mw.process_view(req, token_view, (), {})\n+        self.assertEqual(response.status_code, 403)\n+\n     @override_settings(DEBUG=True)\n     def test_https_malformed_referer(self):\n         \"\"\"\n",
  "problem_statement": "Handle request.get_host() raising DisallowedHost in CsrfViewMiddleware._origin_verified()\nDescription\n\t\nCurrently, on this line, CsrfViewMiddleware._origin_verified() doesn't handle request.get_host() raising DisallowedHost:\n​https://github.com/django/django/blob/41e6b2a3c5e723256506b9ff49437d52a1f3bf43/django/middleware/csrf.py#L229-L231\nSince Django was previously fixed to handle request.get_host() raising DisallowedHost elsewhere in CsrfViewMiddleware.process_view() (see ticket #28693), it seems like it should be handled here, too.\n",
  "hints_text": "It might be better to perform host validation elsewhere in Django as suggested in #27575 so that DisallowedHost doesn't need to be caught everywhere.\nAnother option would be for get_host() to accept an argument that causes it to return e.g. None on a disallowed host instead of raising DisallowedHost. That would make people more aware of that possibility and give callers another option aside from a try-except for handling that case.\nThanks for the report. I attached a test.\nThanks, Mariusz. However, do you know for sure that's testing the right code path? _origin_verified() only gets called when if request.method not in ('GET', 'HEAD', 'OPTIONS', 'TRACE'), but the test appears to be GET. I could be wrong though since my observation is based on inspection rather than running the test.\nRegression test.\nReplying to Chris Jerdonek: Thanks, Mariusz. However, do you know for sure that's testing the right code path? _origin_verified() only gets called when if request.method not in ('GET', 'HEAD', 'OPTIONS', 'TRACE'), but the test appears to be GET. I could be wrong though since my observation is based on inspection rather than running the test. Test crashes because method is not set in this case. I updated attached test to use the POST method. Replying to Tim Graham: It might be better to perform host validation elsewhere in Django as suggested in #27575 so that DisallowedHost doesn't need to be caught everywhere. This can be tricky, so I'd fix this case independently and discuss the options in #27575.\nTest crashes because method is not set in this case. I updated attached test to use the POST method. It might be good to fix _get_GET_no_csrf_cookie_request() so that the method is indeed set to GET.\nReplying to Chris Jerdonek: It might be good to fix _get_GET_no_csrf_cookie_request() so that the method is indeed set to GET. Agreed, ​PR.",
  "created_at": "2021-03-25T07:43:34Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_origin_malformed_host (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"test_origin_malformed_host (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\"]",
  "PASS_TO_PASS": "[\"A request with a bad origin is rejected.\", \"A request with an origin with wrong protocol is rejected.\", \"A POST request with an origin that can't be parsed by urlparse() is\", \"A request with an origin with the wrong protocol compared to\", \"A request with a null origin is rejected.\", \"The csrf token is reset from a bare secret.\", \"The csrf token used in posts is changed on every request (although\", \"CSRF cookie age can be set using settings.CSRF_COOKIE_AGE.\", \"CSRF cookie age does not have max age set and therefore uses\", \"test_csrf_cookie_samesite (csrf_tests.tests.CsrfViewMiddlewareTests)\", \"The token may be passed in a header instead of in the form.\", \"settings.CSRF_HEADER_NAME can be used to customize the CSRF header name\", \"ensure_csrf_cookie() doesn't log warnings (#19436).\", \"The ensure_csrf_cookie() decorator works without middleware.\", \"The ensure_csrf_cookie() decorator works with the CsrfViewMiddleware\", \"get_token still works for a view decorated with 'csrf_exempt'.\", \"get_token() works for a view decorated solely with requires_csrf_token.\", \"A POST request with an origin added to the CSRF_TRUSTED_ORIGINS\", \"A POST HTTP request with a good origin is accepted.\", \"A POST HTTPS request with a good origin is accepted.\", \"A POST request with an origin that matches a CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a bad referer is rejected\", \"A POST HTTPS request with a referer added to the CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a referer that matches a CSRF_TRUSTED_ORIGINS\", \"A POST HTTPS request with a good referer is accepted.\", \"A POST HTTPS request with a good referer is accepted where the referer\", \"A POST HTTPS request is accepted when USE_X_FORWARDED_PORT=True.\", \"A POST HTTPS request with a good referer should be accepted from a\", \"CsrfViewMiddleware generates a 403 response if it receives an HTTPS\", \"A POST HTTPS request with a bad referer is rejected.\", \"A POST HTTPS request from an insecure referer should be rejected.\", \"OSErrors during POST data reading are caught and treated as if the\", \"If both a cookie and a token is present, the middleware lets it through.\", \"If a CSRF cookie is present but no token, the middleware rejects\", \"If a CSRF cookie is present and no token, but the csrf_exempt decorator\", \"If no CSRF cookies is present, the middleware rejects the incoming\", \"If get_token() is not called, the view middleware does not\", \"If the token contains non-alphanumeric characters, it is ignored and a\", \"If the token is longer than expected, it is ignored and a new token is\", \"HTTP PUT and DELETE can get through with X-CSRFToken and a cookie.\", \"HTTP PUT and DELETE methods have protection\", \"A new token is sent if the csrf_cookie is the empty string.\", \"CsrfTokenNode works when no CSRF cookie is set.\", \"CsrfTokenNode works when a CSRF cookie is set.\", \"CsrfTokenNode works when a CSRF cookie is created by\", \"test_no_session_on_request (csrf_tests.tests.CsrfViewMiddlewareUseSessionsTests)\", \"The session isn't saved if the CSRF cookie is unchanged.\", \"CsrfTokenNode works when a CSRF cookie is created by the middleware\", \"test_csrf_token_on_404_stays_constant (csrf_tests.tests.CsrfInErrorHandlingViewsTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.683816",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}