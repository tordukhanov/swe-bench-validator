{
  "repo": "django/django",
  "instance_id": "django__django-11823",
  "base_commit": "1e0dcd6c8bfa4519c21014c73eb510620dd1a000",
  "patch": "diff --git a/django/middleware/cache.py b/django/middleware/cache.py\n--- a/django/middleware/cache.py\n+++ b/django/middleware/cache.py\n@@ -63,6 +63,7 @@ class UpdateCacheMiddleware(MiddlewareMixin):\n     \"\"\"\n     def __init__(self, get_response=None):\n         self.cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n+        self.page_timeout = None\n         self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n         self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n         self.cache = caches[self.cache_alias]\n@@ -89,15 +90,18 @@ def process_response(self, request, response):\n         if 'private' in response.get('Cache-Control', ()):\n             return response\n \n-        # Try to get the timeout from the \"max-age\" section of the \"Cache-\n-        # Control\" header before reverting to using the default cache_timeout\n-        # length.\n-        timeout = get_max_age(response)\n+        # Page timeout takes precedence over the \"max-age\" and the default\n+        # cache timeout.\n+        timeout = self.page_timeout\n         if timeout is None:\n-            timeout = self.cache_timeout\n-        elif timeout == 0:\n-            # max-age was set to 0, don't bother caching.\n-            return response\n+            # The timeout from the \"max-age\" section of the \"Cache-Control\"\n+            # header takes precedence over the default cache timeout.\n+            timeout = get_max_age(response)\n+            if timeout is None:\n+                timeout = self.cache_timeout\n+            elif timeout == 0:\n+                # max-age was set to 0, don't cache.\n+                return response\n         patch_response_headers(response, timeout)\n         if timeout and response.status_code == 200:\n             cache_key = learn_cache_key(request, response, timeout, self.key_prefix, cache=self.cache)\n@@ -160,7 +164,7 @@ class CacheMiddleware(UpdateCacheMiddleware, FetchFromCacheMiddleware):\n     Also used as the hook point for the cache decorator, which is generated\n     using the decorator-from-middleware utility.\n     \"\"\"\n-    def __init__(self, get_response=None, cache_timeout=None, **kwargs):\n+    def __init__(self, get_response=None, cache_timeout=None, page_timeout=None, **kwargs):\n         self.get_response = get_response\n         # We need to differentiate between \"provided, but using default value\",\n         # and \"not provided\". If the value is provided using a default, then\n@@ -186,4 +190,5 @@ def __init__(self, get_response=None, cache_timeout=None, **kwargs):\n         if cache_timeout is None:\n             cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n         self.cache_timeout = cache_timeout\n+        self.page_timeout = page_timeout\n         self.cache = caches[self.cache_alias]\ndiff --git a/django/views/decorators/cache.py b/django/views/decorators/cache.py\n--- a/django/views/decorators/cache.py\n+++ b/django/views/decorators/cache.py\n@@ -20,7 +20,7 @@ def cache_page(timeout, *, cache=None, key_prefix=None):\n     into account on caching -- just like the middleware does.\n     \"\"\"\n     return decorator_from_middleware_with_args(CacheMiddleware)(\n-        cache_timeout=timeout, cache_alias=cache, key_prefix=key_prefix\n+        page_timeout=timeout, cache_alias=cache, key_prefix=key_prefix,\n     )\n \n \n",
  "test_patch": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -2188,6 +2188,29 @@ def test_view_decorator(self):\n         response = other_with_prefix_view(request, '16')\n         self.assertEqual(response.content, b'Hello World 16')\n \n+    def test_cache_page_timeout(self):\n+        # Page timeout takes precedence over the \"max-age\" section of the\n+        # \"Cache-Control\".\n+        tests = [\n+            (1, 3),  # max_age < page_timeout.\n+            (3, 1),  # max_age > page_timeout.\n+        ]\n+        for max_age, page_timeout in tests:\n+            with self.subTest(max_age=max_age, page_timeout=page_timeout):\n+                view = cache_page(timeout=page_timeout)(\n+                    cache_control(max_age=max_age)(hello_world_view)\n+                )\n+                request = self.factory.get('/view/')\n+                response = view(request, '1')\n+                self.assertEqual(response.content, b'Hello World 1')\n+                time.sleep(1)\n+                response = view(request, '2')\n+                self.assertEqual(\n+                    response.content,\n+                    b'Hello World 1' if page_timeout > max_age else b'Hello World 2',\n+                )\n+            cache.clear()\n+\n     def test_cached_control_private_not_cached(self):\n         \"\"\"Responses with 'Cache-Control: private' are not cached.\"\"\"\n         view_with_private_cache = cache_page(3)(cache_control(private=True)(hello_world_view))\n",
  "problem_statement": "cache_control() \"max_age\" overrides cache_page() \"timeout\"\nDescription\n\t\nIf you decorate a view with both cache_control(max_age=3600) and cache_page(timeout=3600*24), the server side cache uses the max_age value instead of the timeout value. \nThe comments in UpdateCacheMiddleware.process_response() indicate it's trying to set the timeout by first looking for the max-age header before reverting to the default cache_timeout :\nTry to get the timeout from the \"max-age\" section of the \"Cache-\nControl\" header before reverting to using the default cache_timeout\nlength.\nHowever, cache_page(timeout=3600*24) is explicitly setting the cache_timeout so that is what should be used. \nIn summary, if a user wants the client-side cache to be shorter-lived than the server-side cache, it is currently not possible using these two decorators.\n",
  "hints_text": "OK, yes, this seems legitimate. Current behaviour was deliberately introduced in #5813 (f2f6e70b08b1142055e33e75f58cfe7fbb5d868f). (Looking at tickets for Core+(Cache+system) there are a few on similar topics, though not exactly so.)\nI have an idea of how to solve this but I assume the core developers have a better understanding of why it was done this way in the first place, and what else it'll affect. Is it worth me submitting a patch? Please let me know how I can help.\nHi Danny. Perhaps a post to the DevelopersMailingList, explaining as clearly as possible what's going on, and your idea, would be the best way to go. That way, you're likely to get the feedback you need. Thanks!\nThanks. I posted a new topic on that list. â€‹https://groups.google.com/forum/#!topic/django-developers/BwTZFMpqd6U",
  "created_at": "2019-09-26T18:42:25Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"Add doesn't do anything in dummy cache backend\", \"clear does nothing for the dummy cache backend\", \"All data types are ignored equally by the dummy cache\", \"Dummy cache values can't be decremented\", \"Dummy cache versions can't be decremented\", \"Cache deletion is transparently ignored on the dummy cache backend\", \"delete_many does nothing for the dummy cache backend\", \"test_delete_many_invalid_key (cache.tests.DummyCacheTests)\", \"Expiration has no effect on the dummy cache\", \"get_many returns nothing for the dummy cache backend\", \"test_get_many_invalid_key (cache.tests.DummyCacheTests)\", \"test_get_or_set (cache.tests.DummyCacheTests)\", \"test_get_or_set_callable (cache.tests.DummyCacheTests)\", \"The has_key method doesn't ever return True for the dummy cache backend\", \"The in operator doesn't ever return True for the dummy cache backend\", \"Dummy cache values can't be incremented\", \"Dummy cache versions can't be incremented\", \"Nonexistent keys aren't found in the dummy cache backend\", \"set_many does nothing for the dummy cache backend\", \"test_set_many_invalid_key (cache.tests.DummyCacheTests)\", \"Dummy cache backend ignores cache set calls\", \"Dummy cache can't do touch().\", \"Unicode values are ignored by the dummy cache\", \"test_304_response_has_http_caching_headers_but_not_cached (cache.tests.CacheMiddlewareTest)\", \"test_cache_page_timeout (cache.tests.CacheMiddlewareTest)\", \"Responses with 'Cache-Control: private' are not cached.\", \"test_constructor (cache.tests.CacheMiddlewareTest)\", \"test_middleware (cache.tests.CacheMiddlewareTest)\", \"test_sensitive_cookie_not_cached (cache.tests.CacheMiddlewareTest)\", \"test_view_decorator (cache.tests.CacheMiddlewareTest)\", \"test_add (cache.tests.LocMemCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_binary_string (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_add (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_delete (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_has_key (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.LocMemCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.LocMemCacheTests)\", \"test_clear (cache.tests.LocMemCacheTests)\", \"test_close (cache.tests.LocMemCacheTests)\", \"test_cull (cache.tests.LocMemCacheTests)\", \"test_custom_key_func (cache.tests.LocMemCacheTests)\", \"test_data_types (cache.tests.LocMemCacheTests)\", \"test_decr (cache.tests.LocMemCacheTests)\", \"test_decr_version (cache.tests.LocMemCacheTests)\", \"test_delete (cache.tests.LocMemCacheTests)\", \"test_delete_many (cache.tests.LocMemCacheTests)\", \"test_delete_nonexistent (cache.tests.LocMemCacheTests)\", \"test_expiration (cache.tests.LocMemCacheTests)\", \"test_float_timeout (cache.tests.LocMemCacheTests)\", \"test_forever_timeout (cache.tests.LocMemCacheTests)\", \"test_get_many (cache.tests.LocMemCacheTests)\", \"test_get_or_set (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.LocMemCacheTests)\", \"test_get_or_set_racing (cache.tests.LocMemCacheTests)\", \"test_get_or_set_version (cache.tests.LocMemCacheTests)\", \"test_has_key (cache.tests.LocMemCacheTests)\", \"test_in (cache.tests.LocMemCacheTests)\", \"test_incr (cache.tests.LocMemCacheTests)\", \"incr/decr does not modify expiry time (matches memcached behavior)\", \"test_incr_version (cache.tests.LocMemCacheTests)\", \"test_invalid_key_characters (cache.tests.LocMemCacheTests)\", \"test_invalid_key_length (cache.tests.LocMemCacheTests)\", \"#20613/#18541 -- Ensures pickling is done outside of the lock.\", \"test_long_timeout (cache.tests.LocMemCacheTests)\", \"get() moves cache keys.\", \"incr() moves cache keys.\", \"set() moves cache keys.\", \"Multiple locmem caches are isolated\", \"test_prefix (cache.tests.LocMemCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_set_many (cache.tests.LocMemCacheTests)\", \"test_set_many_expiration (cache.tests.LocMemCacheTests)\", \"test_simple (cache.tests.LocMemCacheTests)\", \"test_touch (cache.tests.LocMemCacheTests)\", \"test_unicode (cache.tests.LocMemCacheTests)\", \"test_zero_cull (cache.tests.LocMemCacheTests)\", \"test_zero_timeout (cache.tests.LocMemCacheTests)\", \"test_add (cache.tests.FileBasedCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_binary_string (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCacheTests)\", \"test_clear (cache.tests.FileBasedCacheTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCacheTests)\", \"test_close (cache.tests.FileBasedCacheTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_cull (cache.tests.FileBasedCacheTests)\", \"test_custom_key_func (cache.tests.FileBasedCacheTests)\", \"test_data_types (cache.tests.FileBasedCacheTests)\", \"test_decr (cache.tests.FileBasedCacheTests)\", \"test_decr_version (cache.tests.FileBasedCacheTests)\", \"test_delete (cache.tests.FileBasedCacheTests)\", \"test_delete_many (cache.tests.FileBasedCacheTests)\", \"test_delete_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCacheTests)\", \"test_expiration (cache.tests.FileBasedCacheTests)\", \"test_float_timeout (cache.tests.FileBasedCacheTests)\", \"test_forever_timeout (cache.tests.FileBasedCacheTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCacheTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCacheTests)\", \"test_get_many (cache.tests.FileBasedCacheTests)\", \"test_get_or_set (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_version (cache.tests.FileBasedCacheTests)\", \"test_has_key (cache.tests.FileBasedCacheTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCacheTests)\", \"test_in (cache.tests.FileBasedCacheTests)\", \"test_incr (cache.tests.FileBasedCacheTests)\", \"test_incr_version (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_length (cache.tests.FileBasedCacheTests)\", \"test_long_timeout (cache.tests.FileBasedCacheTests)\", \"test_prefix (cache.tests.FileBasedCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_set_many (cache.tests.FileBasedCacheTests)\", \"test_set_many_expiration (cache.tests.FileBasedCacheTests)\", \"test_simple (cache.tests.FileBasedCacheTests)\", \"test_touch (cache.tests.FileBasedCacheTests)\", \"test_unicode (cache.tests.FileBasedCacheTests)\", \"test_zero_cull (cache.tests.FileBasedCacheTests)\", \"test_zero_timeout (cache.tests.FileBasedCacheTests)\", \"test_add (cache.tests.FileBasedCachePathLibTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)\", \"test_binary_string (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCachePathLibTests)\", \"test_clear (cache.tests.FileBasedCachePathLibTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCachePathLibTests)\", \"test_close (cache.tests.FileBasedCachePathLibTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCachePathLibTests)\", \"test_cull (cache.tests.FileBasedCachePathLibTests)\", \"test_custom_key_func (cache.tests.FileBasedCachePathLibTests)\", \"test_data_types (cache.tests.FileBasedCachePathLibTests)\", \"test_decr (cache.tests.FileBasedCachePathLibTests)\", \"test_decr_version (cache.tests.FileBasedCachePathLibTests)\", \"test_delete (cache.tests.FileBasedCachePathLibTests)\", \"test_delete_many (cache.tests.FileBasedCachePathLibTests)\", \"test_delete_nonexistent (cache.tests.FileBasedCachePathLibTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCachePathLibTests)\", \"test_expiration (cache.tests.FileBasedCachePathLibTests)\", \"test_float_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_forever_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCachePathLibTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCachePathLibTests)\", \"test_get_many (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_callable_returning_none (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_version (cache.tests.FileBasedCachePathLibTests)\", \"test_has_key (cache.tests.FileBasedCachePathLibTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCachePathLibTests)\", \"test_in (cache.tests.FileBasedCachePathLibTests)\", \"test_incr (cache.tests.FileBasedCachePathLibTests)\", \"test_incr_version (cache.tests.FileBasedCachePathLibTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCachePathLibTests)\", \"test_invalid_key_length (cache.tests.FileBasedCachePathLibTests)\", \"test_long_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_prefix (cache.tests.FileBasedCachePathLibTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)\", \"test_set_many (cache.tests.FileBasedCachePathLibTests)\", \"test_set_many_expiration (cache.tests.FileBasedCachePathLibTests)\", \"test_simple (cache.tests.FileBasedCachePathLibTests)\", \"test_touch (cache.tests.FileBasedCachePathLibTests)\", \"test_unicode (cache.tests.FileBasedCachePathLibTests)\", \"test_zero_cull (cache.tests.FileBasedCachePathLibTests)\", \"test_zero_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_add (cache.tests.DBCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_binary_string (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_versioning_add (cache.tests.DBCacheTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheTests)\", \"test_clear (cache.tests.DBCacheTests)\", \"test_close (cache.tests.DBCacheTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheTests)\", \"test_cull (cache.tests.DBCacheTests)\", \"test_custom_key_func (cache.tests.DBCacheTests)\", \"test_data_types (cache.tests.DBCacheTests)\", \"test_decr (cache.tests.DBCacheTests)\", \"test_decr_version (cache.tests.DBCacheTests)\", \"test_delete (cache.tests.DBCacheTests)\", \"test_delete_many (cache.tests.DBCacheTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheTests)\", \"test_delete_nonexistent (cache.tests.DBCacheTests)\", \"test_expiration (cache.tests.DBCacheTests)\", \"test_float_timeout (cache.tests.DBCacheTests)\", \"test_forever_timeout (cache.tests.DBCacheTests)\", \"test_get_many (cache.tests.DBCacheTests)\", \"test_get_many_num_queries (cache.tests.DBCacheTests)\", \"test_get_or_set (cache.tests.DBCacheTests)\", \"test_get_or_set_callable (cache.tests.DBCacheTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheTests)\", \"test_get_or_set_racing (cache.tests.DBCacheTests)\", \"test_get_or_set_version (cache.tests.DBCacheTests)\", \"test_has_key (cache.tests.DBCacheTests)\", \"test_in (cache.tests.DBCacheTests)\", \"test_incr (cache.tests.DBCacheTests)\", \"test_incr_version (cache.tests.DBCacheTests)\", \"test_invalid_key_characters (cache.tests.DBCacheTests)\", \"test_invalid_key_length (cache.tests.DBCacheTests)\", \"test_long_timeout (cache.tests.DBCacheTests)\", \"test_prefix (cache.tests.DBCacheTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_set_many (cache.tests.DBCacheTests)\", \"test_set_many_expiration (cache.tests.DBCacheTests)\", \"test_simple (cache.tests.DBCacheTests)\", \"test_touch (cache.tests.DBCacheTests)\", \"test_unicode (cache.tests.DBCacheTests)\", \"test_zero_cull (cache.tests.DBCacheTests)\", \"test_zero_timeout (cache.tests.DBCacheTests)\", \"test_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_binary_string (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheWithTimeZoneTests)\", \"test_clear (cache.tests.DBCacheWithTimeZoneTests)\", \"test_close (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_with_table_argument (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_custom_key_func (cache.tests.DBCacheWithTimeZoneTests)\", \"test_data_types (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_nonexistent (cache.tests.DBCacheWithTimeZoneTests)\", \"test_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_float_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_forever_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable_returning_none (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_racing (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_in (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_characters (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_length (cache.tests.DBCacheWithTimeZoneTests)\", \"test_long_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_prefix (cache.tests.DBCacheWithTimeZoneTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_simple (cache.tests.DBCacheWithTimeZoneTests)\", \"test_touch (cache.tests.DBCacheWithTimeZoneTests)\", \"test_unicode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_timeout (cache.tests.DBCacheWithTimeZoneTests)\"]",
  "PASS_TO_PASS": "[\"Nonexistent cache keys return as None/default.\", \"set_many() returns an empty list when all keys are inserted.\", \"If None is cached, get() returns it instead of the default.\", \"test_createcachetable_observes_database_router (cache.tests.CreateCacheTableForDBCacheTests)\", \"test_cache_key_varies_by_url (cache.tests.CacheUtils)\", \"test_get_cache_key (cache.tests.CacheUtils)\", \"test_get_cache_key_with_query (cache.tests.CacheUtils)\", \"test_learn_cache_key (cache.tests.CacheUtils)\", \"test_patch_cache_control (cache.tests.CacheUtils)\", \"test_patch_vary_headers (cache.tests.CacheUtils)\", \"test_per_thread (cache.tests.CacheHandlerTest)\", \"test_same_instance (cache.tests.CacheHandlerTest)\", \"test_close (cache.tests.CacheClosingTests)\", \"test_get_cache_key (cache.tests.TestWithTemplateResponse)\", \"test_get_cache_key_with_query (cache.tests.TestWithTemplateResponse)\", \"test_patch_vary_headers (cache.tests.TestWithTemplateResponse)\", \"test_long_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_proper_escaping (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_ints_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_many_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_one_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_unicode_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_without_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_cache_key_varies_by_url (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key_with_query (cache.tests.PrefixedCacheUtils)\", \"test_learn_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_patch_cache_control (cache.tests.PrefixedCacheUtils)\", \"test_patch_vary_headers (cache.tests.PrefixedCacheUtils)\", \"test_custom_key_validation (cache.tests.CustomCacheKeyValidationTests)\", \"Memory caches that have the TIMEOUT parameter set to `None` in the\", \"Memory caches that have the TIMEOUT parameter set to `None` will set\", \"Caches that have the TIMEOUT parameter undefined in the default\", \"Memory caches that have the TIMEOUT parameter unset will set cache\", \"The default expiration time of a cache key is 5 minutes.\", \"test_head_caches_correctly (cache.tests.CacheHEADTest)\", \"test_head_with_cached_get (cache.tests.CacheHEADTest)\", \"test_cache_key_i18n_formatting (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_timezone (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.CacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.CacheI18nTest)\", \"test_middleware (cache.tests.CacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_formatting (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_timezone (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.PrefixedCacheI18nTest)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.585611",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}