{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10320",
  "base_commit": "33610201dc7a69859b05381845ae1a11be8f9136",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1580,6 +1580,20 @@ def format_args(self, **kwargs: Any) -> str:\n \n         return stringify_signature(sig, show_return_annotation=False, **kwargs)\n \n+    def _find_signature(self) -> Tuple[str, str]:\n+        result = super()._find_signature()\n+        if result is not None:\n+            # Strip a return value from signature of constructor in docstring (first entry)\n+            result = (result[0], None)\n+\n+        for i, sig in enumerate(self._signatures):\n+            if sig.endswith(' -> None'):\n+                # Strip a return value from signatures of constructor in docstring (subsequent\n+                # entries)\n+                self._signatures[i] = sig[:-8]\n+\n+        return result\n+\n     def format_signature(self, **kwargs: Any) -> str:\n         if self.doc_as_attr:\n             return ''\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/docstring_signature.py b/tests/roots/test-ext-autodoc/target/docstring_signature.py\n--- a/tests/roots/test-ext-autodoc/target/docstring_signature.py\n+++ b/tests/roots/test-ext-autodoc/target/docstring_signature.py\n@@ -22,10 +22,12 @@ def __init__(self):\n class E:\n     def __init__(self):\n         \"\"\"E(foo: int, bar: int, baz: int) -> None \\\\\n-        E(foo: str, bar: str, baz: str) -> None\"\"\"\n+        E(foo: str, bar: str, baz: str) -> None \\\\\n+        E(foo: float, bar: float, baz: float)\"\"\"\n \n \n class F:\n     def __init__(self):\n         \"\"\"F(foo: int, bar: int, baz: int) -> None\n-        F(foo: str, bar: str, baz: str) -> None\"\"\"\n+        F(foo: str, bar: str, baz: str) -> None\n+        F(foo: float, bar: float, baz: float)\"\"\"\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -467,13 +467,15 @@ def test_autoclass_content_and_docstring_signature_init(app):\n         '   :module: target.docstring_signature',\n         '',\n         '',\n-        '.. py:class:: E(foo: int, bar: int, baz: int) -> None',\n-        '              E(foo: str, bar: str, baz: str) -> None',\n+        '.. py:class:: E(foo: int, bar: int, baz: int)',\n+        '              E(foo: str, bar: str, baz: str)',\n+        '              E(foo: float, bar: float, baz: float)',\n         '   :module: target.docstring_signature',\n         '',\n         '',\n-        '.. py:class:: F(foo: int, bar: int, baz: int) -> None',\n-        '              F(foo: str, bar: str, baz: str) -> None',\n+        '.. py:class:: F(foo: int, bar: int, baz: int)',\n+        '              F(foo: str, bar: str, baz: str)',\n+        '              F(foo: float, bar: float, baz: float)',\n         '   :module: target.docstring_signature',\n         '',\n     ]\n@@ -510,13 +512,15 @@ def test_autoclass_content_and_docstring_signature_both(app):\n         '   :module: target.docstring_signature',\n         '',\n         '',\n-        '.. py:class:: E(foo: int, bar: int, baz: int) -> None',\n-        '              E(foo: str, bar: str, baz: str) -> None',\n+        '.. py:class:: E(foo: int, bar: int, baz: int)',\n+        '              E(foo: str, bar: str, baz: str)',\n+        '              E(foo: float, bar: float, baz: float)',\n         '   :module: target.docstring_signature',\n         '',\n         '',\n-        '.. py:class:: F(foo: int, bar: int, baz: int) -> None',\n-        '              F(foo: str, bar: str, baz: str) -> None',\n+        '.. py:class:: F(foo: int, bar: int, baz: int)',\n+        '              F(foo: str, bar: str, baz: str)',\n+        '              F(foo: float, bar: float, baz: float)',\n         '   :module: target.docstring_signature',\n         '',\n     ]\n",
  "problem_statement": "Overridden, overloaded class docstring return type rendered as None\n### Describe the bug\r\n\r\nSome overloaded class definitions show ``None`` as a return type, when there shouldn't be any return type.\r\n\r\nThis seems to happen when the overloaded functions are overridden in the final docstring.\r\n\r\nA class without this problem is also provided for comparison.\r\n\r\n### How to Reproduce\r\n\r\nExactly the same as https://github.com/sphinx-doc/sphinx/issues/10278\r\n\r\n### Expected behavior\r\n\r\n![image](https://user-images.githubusercontent.com/12326241/159285983-75d83f0b-4824-47ba-a511-2a28d54396c8.png)\r\n\r\n\r\n### Your project\r\n\r\nhttps://github.com/pybricks/sphinx-issues-minimal\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/12326241/159285933-1385e59f-1d7c-47be-8a85-69bc980db8be.png)\r\n\r\n\r\n### OS\r\n\r\nUbuntu\r\n\r\n### Python version\r\n\r\n3.8.3\r\n\r\n### Sphinx version\r\n\r\n4.4.0\r\n\r\n### Sphinx extensions\r\n\r\n'sphinx.ext.autodoc', 'sphinx.ext.napoleon', 'sphinx_rtd_theme'\r\n\r\n### Extra tools\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nRelated Sphinx issue: https://github.com/sphinx-doc/sphinx/issues/10281\r\n\r\nThis was originally reported in https://github.com/pybricks/pybricks-api/issues/87\n",
  "hints_text": "This is not related to overloaded constructors. Autodoc automatically fills return value annotation to the signature definitions in the docstring excluding the first entry unexpectedly. So I reproduced this with this class:\r\n```\r\nclass Foo:\r\n    \"\"\"Foo()\r\n    Foo(x: int)\r\n    Foo(x: int, y: int)\r\n\r\n    docstring\r\n    \"\"\"\r\n```\r\n\r\nI agree this is not unexpected behavior. So I'll fix this soon.\r\n\r\nNote: The example you given uses `autoclass_content = 'both'` option. Then autodoc refers the docstring of `MyComplex.__init__()` method too.",
  "created_at": "2022-04-02T05:48:38Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_mixed\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_new\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified_for_class_alias\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified_for_generic_alias\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified_for_newtype_alias\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\"]",
  "environment_setup_commit": "60775ec4c4ea08509eee4b564cbf90f316021aff",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.031549",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}