{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-25744",
  "base_commit": "2c867b8f822eb7a684f0d5c4359e4426e1c9cfe0",
  "patch": "diff --git a/sklearn/tree/_classes.py b/sklearn/tree/_classes.py\n--- a/sklearn/tree/_classes.py\n+++ b/sklearn/tree/_classes.py\n@@ -99,16 +99,16 @@ class BaseDecisionTree(MultiOutputMixin, BaseEstimator, metaclass=ABCMeta):\n         \"max_depth\": [Interval(Integral, 1, None, closed=\"left\"), None],\n         \"min_samples_split\": [\n             Interval(Integral, 2, None, closed=\"left\"),\n-            Interval(Real, 0.0, 1.0, closed=\"right\"),\n+            Interval(\"real_not_int\", 0.0, 1.0, closed=\"right\"),\n         ],\n         \"min_samples_leaf\": [\n             Interval(Integral, 1, None, closed=\"left\"),\n-            Interval(Real, 0.0, 1.0, closed=\"neither\"),\n+            Interval(\"real_not_int\", 0.0, 1.0, closed=\"neither\"),\n         ],\n         \"min_weight_fraction_leaf\": [Interval(Real, 0.0, 0.5, closed=\"both\")],\n         \"max_features\": [\n             Interval(Integral, 1, None, closed=\"left\"),\n-            Interval(Real, 0.0, 1.0, closed=\"right\"),\n+            Interval(\"real_not_int\", 0.0, 1.0, closed=\"right\"),\n             StrOptions({\"auto\", \"sqrt\", \"log2\"}, deprecated={\"auto\"}),\n             None,\n         ],\ndiff --git a/sklearn/utils/_param_validation.py b/sklearn/utils/_param_validation.py\n--- a/sklearn/utils/_param_validation.py\n+++ b/sklearn/utils/_param_validation.py\n@@ -364,9 +364,12 @@ class Interval(_Constraint):\n \n     Parameters\n     ----------\n-    type : {numbers.Integral, numbers.Real}\n+    type : {numbers.Integral, numbers.Real, \"real_not_int\"}\n         The set of numbers in which to set the interval.\n \n+        If \"real_not_int\", only reals that don't have the integer type\n+        are allowed. For example 1.0 is allowed but 1 is not.\n+\n     left : float or int or None\n         The left bound of the interval. None means left bound is -∞.\n \n@@ -392,14 +395,6 @@ class Interval(_Constraint):\n     `[0, +∞) U {+∞}`.\n     \"\"\"\n \n-    @validate_params(\n-        {\n-            \"type\": [type],\n-            \"left\": [Integral, Real, None],\n-            \"right\": [Integral, Real, None],\n-            \"closed\": [StrOptions({\"left\", \"right\", \"both\", \"neither\"})],\n-        }\n-    )\n     def __init__(self, type, left, right, *, closed):\n         super().__init__()\n         self.type = type\n@@ -410,6 +405,18 @@ def __init__(self, type, left, right, *, closed):\n         self._check_params()\n \n     def _check_params(self):\n+        if self.type not in (Integral, Real, \"real_not_int\"):\n+            raise ValueError(\n+                \"type must be either numbers.Integral, numbers.Real or 'real_not_int'.\"\n+                f\" Got {self.type} instead.\"\n+            )\n+\n+        if self.closed not in (\"left\", \"right\", \"both\", \"neither\"):\n+            raise ValueError(\n+                \"closed must be either 'left', 'right', 'both' or 'neither'. \"\n+                f\"Got {self.closed} instead.\"\n+            )\n+\n         if self.type is Integral:\n             suffix = \"for an interval over the integers.\"\n             if self.left is not None and not isinstance(self.left, Integral):\n@@ -424,6 +431,11 @@ def _check_params(self):\n                 raise ValueError(\n                     f\"right can't be None when closed == {self.closed} {suffix}\"\n                 )\n+        else:\n+            if self.left is not None and not isinstance(self.left, Real):\n+                raise TypeError(\"Expecting left to be a real number.\")\n+            if self.right is not None and not isinstance(self.right, Real):\n+                raise TypeError(\"Expecting right to be a real number.\")\n \n         if self.right is not None and self.left is not None and self.right <= self.left:\n             raise ValueError(\n@@ -447,8 +459,13 @@ def __contains__(self, val):\n             return False\n         return True\n \n+    def _has_valid_type(self, val):\n+        if self.type == \"real_not_int\":\n+            return isinstance(val, Real) and not isinstance(val, Integral)\n+        return isinstance(val, self.type)\n+\n     def is_satisfied_by(self, val):\n-        if not isinstance(val, self.type):\n+        if not self._has_valid_type(val):\n             return False\n \n         return val in self\n",
  "test_patch": "diff --git a/sklearn/tree/tests/test_tree.py b/sklearn/tree/tests/test_tree.py\n--- a/sklearn/tree/tests/test_tree.py\n+++ b/sklearn/tree/tests/test_tree.py\n@@ -2425,3 +2425,25 @@ def test_tree_deserialization_from_read_only_buffer(tmpdir):\n         clf.tree_,\n         \"The trees of the original and loaded classifiers are not equal.\",\n     )\n+\n+\n+@pytest.mark.parametrize(\"Tree\", ALL_TREES.values())\n+def test_min_sample_split_1_error(Tree):\n+    \"\"\"Check that an error is raised when min_sample_split=1.\n+\n+    non-regression test for issue gh-25481.\n+    \"\"\"\n+    X = np.array([[0, 0], [1, 1]])\n+    y = np.array([0, 1])\n+\n+    # min_samples_split=1.0 is valid\n+    Tree(min_samples_split=1.0).fit(X, y)\n+\n+    # min_samples_split=1 is invalid\n+    tree = Tree(min_samples_split=1)\n+    msg = (\n+        r\"'min_samples_split' .* must be an int in the range \\[2, inf\\) \"\n+        r\"or a float in the range \\(0.0, 1.0\\]\"\n+    )\n+    with pytest.raises(ValueError, match=msg):\n+        tree.fit(X, y)\ndiff --git a/sklearn/utils/tests/test_param_validation.py b/sklearn/utils/tests/test_param_validation.py\n--- a/sklearn/utils/tests/test_param_validation.py\n+++ b/sklearn/utils/tests/test_param_validation.py\n@@ -662,3 +662,10 @@ def fit(self, X=None, y=None):\n     # does not raise, even though \"b\" is not in the constraints dict and \"a\" is not\n     # a parameter of the estimator.\n     ThirdPartyEstimator(b=0).fit()\n+\n+\n+def test_interval_real_not_int():\n+    \"\"\"Check for the type \"real_not_int\" in the Interval constraint.\"\"\"\n+    constraint = Interval(\"real_not_int\", 0, 1, closed=\"both\")\n+    assert constraint.is_satisfied_by(1.0)\n+    assert not constraint.is_satisfied_by(1)\n",
  "problem_statement": "Setting min_samples_split=1 in DecisionTreeClassifier does not raise exception\n### Describe the bug\n\nIf `min_samples_split` is set to 1, an exception should be raised according to the paramter's constraints:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/e2e705021eb6c9f23f0972f119b56e37cd7567ef/sklearn/tree/_classes.py#L100-L103\r\n\r\nHowever, `DecisionTreeClassifier` accepts `min_samples_split=1` without complaining.\r\n\r\nWith scikit-survival 1.0, this raises an exception as expected:\r\n```\r\nValueError: min_samples_split == 1, must be >= 2.\r\n```\r\n\r\nI suspect that this has to do with the Intervals of the constraints overlapping. `min_samples_split=1` satisfies the `Real` constraint, whereas the `Integral` constraint should have precedence.\n\n### Steps/Code to Reproduce\n\n```python\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nfrom sklearn.datasets import load_iris\r\n\r\nX, y = load_iris(return_X_y=True)\r\nt = DecisionTreeClassifier(min_samples_split=1)\r\nt.fit(X, y)\r\n```\n\n### Expected Results\n\n```\r\nsklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.\r\n```\n\n### Actual Results\n\nNo exception is raised.\n\n### Versions\n\n```shell\nSystem:\r\n    python: 3.10.8 | packaged by conda-forge | (main, Nov 22 2022, 08:26:04) [GCC 10.4.0]\r\nexecutable: /…/bin/python\r\n   machine: Linux-6.1.6-100.fc36.x86_64-x86_64-with-glibc2.35\r\n\r\nPython dependencies:\r\n      sklearn: 1.3.dev0\r\n          pip: 22.2.2\r\n   setuptools: 63.2.0\r\n        numpy: 1.24.1\r\n        scipy: 1.10.0\r\n       Cython: None\r\n       pandas: None\r\n   matplotlib: None\r\n       joblib: 1.2.0\r\nthreadpoolctl: 3.1.0\r\n\r\nBuilt with OpenMP: True\r\n\r\nthreadpoolctl info:\r\n       user_api: openmp\r\n   internal_api: openmp\r\n         prefix: libgomp\r\n       filepath: /…/lib/libgomp.so.1.0.0\r\n        version: None\r\n    num_threads: 16\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /…/lib/python3.10/site-packages/numpy.libs/libopenblas64_p-r0-15028c96.3.21.so\r\n        version: 0.3.21\r\nthreading_layer: pthreads\r\n   architecture: Zen\r\n    num_threads: 16\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /…/lib/python3.10/site-packages/scipy.libs/libopenblasp-r0-41284840.3.18.so\r\n        version: 0.3.18\r\nthreading_layer: pthreads\r\n   architecture: Zen\r\n    num_threads: 16\n```\n\n",
  "hints_text": "I think that this is on purpose. Otherwise, we would have used `closed=\"neither\"` for the `Real` case and `1` is qualified as a `Real`.\r\n\r\nAt least this is not a regression since the code in the past would have failed and now we allow it to be considered as 100% of the train set.\r\n\r\nIf we exclude `1` it means that we don't accept both 100% and 1. I don't know if this is something that we want.\nNote that with sklearn 1.0, `min_samples_split=1.0` does not raise an exception, only `min_samples_split=1`.\nReading the docstring, I agree it is strange to interpret the integer `1` as 100%:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/baefe83933df9abecc2c16769d42e52b2694a9c8/sklearn/tree/_classes.py#L635-L638\r\n\r\nFrom the docstring, `min_samples_split=1` is interpreted as 1 sample, which does not make any sense. \r\n\r\nI think we should be able to specify \"1.0\" but not \"1\" in our parameter validation framework. @jeremiedbb What do you think of having a way to reject `Integral`, such as:\r\n\r\n```python\r\nInterval(Real, 0.0, 1.0, closed=\"right\", invalid_type=Integral),\r\n```\r\n\r\nIf we have a way to specify a `invalid_type`, then I prefer to reject `min_samples_split=1` as we did in previous versions. \nAlso note that `min_samples_split=1.0` and `min_samples_split=1` do not result in the same behavior:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/baefe83933df9abecc2c16769d42e52b2694a9c8/sklearn/tree/_classes.py#L257-L263\r\n\r\nIf `min_samples_split=1`, the actual `min_samples_split` is determine by `min_samples_leaf`:\r\n```python\r\nmin_samples_split = max(min_samples_split, 2 * min_samples_leaf)\r\n```\r\n\r\nIf `min_samples_split=1.0` and assuming there are more than 2 samples in the data, `min_samples_split = n_samples`:\r\n```python\r\nmin_samples_split = int(ceil(self.min_samples_split * n_samples))\r\n```",
  "created_at": "2023-03-02T17:04:42Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/tree/tests/test_tree.py::test_min_sample_split_1_error[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_sample_split_1_error[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_sample_split_1_error[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_sample_split_1_error[ExtraTreeRegressor]\", \"sklearn/utils/tests/test_param_validation.py::test_interval_real_not_int\"]",
  "PASS_TO_PASS": "[\"sklearn/tree/tests/test_tree.py::test_classification_toy\", \"sklearn/tree/tests/test_tree.py::test_weighted_classification_toy\", \"sklearn/tree/tests/test_tree.py::test_regression_toy[squared_error-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_regression_toy[squared_error-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_regression_toy[absolute_error-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_regression_toy[absolute_error-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_regression_toy[friedman_mse-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_regression_toy[friedman_mse-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_regression_toy[poisson-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_regression_toy[poisson-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_xor\", \"sklearn/tree/tests/test_tree.py::test_iris\", \"sklearn/tree/tests/test_tree.py::test_diabetes_overfit[squared_error-DecisionTreeRegressor-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_overfit[squared_error-ExtraTreeRegressor-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_overfit[absolute_error-DecisionTreeRegressor-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_overfit[absolute_error-ExtraTreeRegressor-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_overfit[friedman_mse-DecisionTreeRegressor-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_overfit[friedman_mse-ExtraTreeRegressor-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_overfit[poisson-DecisionTreeRegressor-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_overfit[poisson-ExtraTreeRegressor-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_underfit[squared_error-15-mean_squared_error-60-DecisionTreeRegressor-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_underfit[squared_error-15-mean_squared_error-60-ExtraTreeRegressor-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_underfit[absolute_error-20-mean_squared_error-60-DecisionTreeRegressor-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_underfit[absolute_error-20-mean_squared_error-60-ExtraTreeRegressor-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_underfit[friedman_mse-15-mean_squared_error-60-DecisionTreeRegressor-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_underfit[friedman_mse-15-mean_squared_error-60-ExtraTreeRegressor-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_underfit[poisson-15-mean_poisson_deviance-30-DecisionTreeRegressor-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_diabetes_underfit[poisson-15-mean_poisson_deviance-30-ExtraTreeRegressor-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_probability\", \"sklearn/tree/tests/test_tree.py::test_arrayrepr\", \"sklearn/tree/tests/test_tree.py::test_pure_set\", \"sklearn/tree/tests/test_tree.py::test_numerical_stability\", \"sklearn/tree/tests/test_tree.py::test_importances\", \"sklearn/tree/tests/test_tree.py::test_importances_raises\", \"sklearn/tree/tests/test_tree.py::test_importances_gini_equal_squared_error\", \"sklearn/tree/tests/test_tree.py::test_max_features\", \"sklearn/tree/tests/test_tree.py::test_error\", \"sklearn/tree/tests/test_tree.py::test_min_samples_split\", \"sklearn/tree/tests/test_tree.py::test_min_samples_leaf\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_dense_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_dense_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_dense_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_dense_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_sparse_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_sparse_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_sparse_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_on_sparse_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_dense_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_dense_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_dense_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_dense_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_sparse_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_sparse_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_sparse_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_fraction_leaf_with_min_samples_leaf_on_sparse_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_impurity_decrease\", \"sklearn/tree/tests/test_tree.py::test_pickle\", \"sklearn/tree/tests/test_tree.py::test_multioutput\", \"sklearn/tree/tests/test_tree.py::test_classes_shape\", \"sklearn/tree/tests/test_tree.py::test_unbalanced_iris\", \"sklearn/tree/tests/test_tree.py::test_memory_layout\", \"sklearn/tree/tests/test_tree.py::test_sample_weight\", \"sklearn/tree/tests/test_tree.py::test_sample_weight_invalid\", \"sklearn/tree/tests/test_tree.py::test_class_weights[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_class_weights[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_class_weight_errors[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_class_weight_errors[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_max_leaf_nodes\", \"sklearn/tree/tests/test_tree.py::test_max_leaf_nodes_max_depth\", \"sklearn/tree/tests/test_tree.py::test_arrays_persist\", \"sklearn/tree/tests/test_tree.py::test_only_constant_features\", \"sklearn/tree/tests/test_tree.py::test_behaviour_constant_feature_after_splits\", \"sklearn/tree/tests/test_tree.py::test_with_only_one_non_constant_features\", \"sklearn/tree/tests/test_tree.py::test_big_input\", \"sklearn/tree/tests/test_tree.py::test_realloc\", \"sklearn/tree/tests/test_tree.py::test_huge_allocations\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[clf_small-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[clf_small-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[clf_small-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[clf_small-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[toy-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[toy-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[toy-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[toy-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[digits-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[digits-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[digits-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[digits-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[multilabel-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[multilabel-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[multilabel-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[multilabel-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-pos-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-pos-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-pos-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-pos-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-neg-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-neg-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-neg-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-neg-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-mix-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-mix-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-mix-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[sparse-mix-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[zeros-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[zeros-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[zeros-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input[zeros-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input_reg_trees[diabetes-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input_reg_trees[diabetes-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input_reg_trees[reg_small-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse_input_reg_trees[reg_small-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-pos-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-pos-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-pos-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-pos-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-neg-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-neg-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-neg-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-neg-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-mix-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-mix-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-mix-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-sparse-mix-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-zeros-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-zeros-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-zeros-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_parameters-zeros-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-pos-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-pos-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-pos-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-pos-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-neg-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-neg-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-neg-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-neg-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-mix-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-mix-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-mix-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-sparse-mix-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-zeros-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-zeros-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-zeros-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_sparse[check_sparse_criterion-zeros-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_explicit_sparse_zeros[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_explicit_sparse_zeros[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_explicit_sparse_zeros[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_explicit_sparse_zeros[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_1d_input[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_1d_input[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_1d_input[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_1d_input[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_leaf_split_level[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_leaf_split_level[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_leaf_split_level[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_min_weight_leaf_split_level[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_all_trees[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_all_trees[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_all_trees[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_all_trees[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_sparse_trees[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_sparse_trees[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_sparse_trees[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_public_apply_sparse_trees[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_decision_path_hardcoded\", \"sklearn/tree/tests/test_tree.py::test_decision_path[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_decision_path[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_decision_path[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_decision_path[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_no_sparse_y_support[DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_no_sparse_y_support[ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_no_sparse_y_support[DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_no_sparse_y_support[ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_mae\", \"sklearn/tree/tests/test_tree.py::test_criterion_copy\", \"sklearn/tree/tests/test_tree.py::test_empty_leaf_infinite_threshold\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-clf_small-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-clf_small-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-digits-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-digits-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-iris-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-iris-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-multilabel-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-multilabel-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-mix-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-mix-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-neg-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-neg-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-pos-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-sparse-pos-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-toy-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-toy-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-zeros-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[DecisionTreeClassifier-zeros-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-clf_small-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-clf_small-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-digits-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-digits-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-iris-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-iris-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-multilabel-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-multilabel-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-mix-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-mix-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-neg-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-neg-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-pos-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-sparse-pos-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-toy-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-toy-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-zeros-gini]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_classifier_are_subtrees[ExtraTreeClassifier-zeros-log_loss]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-iris-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-iris-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-iris-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-iris-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-diabetes-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-diabetes-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-diabetes-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-diabetes-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-digits-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-digits-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-digits-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-digits-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-toy-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-toy-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-toy-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-toy-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-clf_small-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-clf_small-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-clf_small-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-clf_small-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-reg_small-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-reg_small-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-reg_small-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-reg_small-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-multilabel-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-multilabel-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-multilabel-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-multilabel-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-pos-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-pos-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-pos-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-pos-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-neg-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-neg-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-neg-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-neg-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-mix-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-mix-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-mix-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-sparse-mix-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-zeros-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-zeros-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-zeros-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[DecisionTreeRegressor-zeros-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-iris-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-iris-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-iris-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-iris-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-diabetes-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-diabetes-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-diabetes-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-diabetes-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-digits-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-digits-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-digits-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-digits-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-toy-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-toy-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-toy-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-toy-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-clf_small-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-clf_small-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-clf_small-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-clf_small-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-reg_small-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-reg_small-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-reg_small-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-reg_small-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-multilabel-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-multilabel-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-multilabel-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-multilabel-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-pos-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-pos-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-pos-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-pos-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-neg-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-neg-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-neg-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-neg-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-mix-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-mix-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-mix-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-sparse-mix-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-zeros-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-zeros-absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-zeros-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_prune_tree_regression_are_subtrees[ExtraTreeRegressor-zeros-poisson]\", \"sklearn/tree/tests/test_tree.py::test_prune_single_node_tree\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[dense-best-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[dense-best-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[dense-best-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[dense-best-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[dense-random-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[dense-random-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[dense-random-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[dense-random-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csr-best-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csr-best-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csr-best-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csr-best-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csr-random-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csr-random-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csr-random-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csr-random-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csc-best-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csc-best-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csc-best-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csc-best-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csc-random-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csc-random-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csc-random-DecisionTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_apply_path_readonly_all_trees[csc-random-ExtraTreeRegressor]\", \"sklearn/tree/tests/test_tree.py::test_balance_property[DecisionTreeRegressor-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_balance_property[DecisionTreeRegressor-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_balance_property[DecisionTreeRegressor-poisson]\", \"sklearn/tree/tests/test_tree.py::test_balance_property[ExtraTreeRegressor-squared_error]\", \"sklearn/tree/tests/test_tree.py::test_balance_property[ExtraTreeRegressor-friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_balance_property[ExtraTreeRegressor-poisson]\", \"sklearn/tree/tests/test_tree.py::test_poisson_zero_nodes[0]\", \"sklearn/tree/tests/test_tree.py::test_poisson_zero_nodes[1]\", \"sklearn/tree/tests/test_tree.py::test_poisson_zero_nodes[2]\", \"sklearn/tree/tests/test_tree.py::test_poisson_vs_mse\", \"sklearn/tree/tests/test_tree.py::test_decision_tree_regressor_sample_weight_consistency[squared_error]\", \"sklearn/tree/tests/test_tree.py::test_decision_tree_regressor_sample_weight_consistency[absolute_error]\", \"sklearn/tree/tests/test_tree.py::test_decision_tree_regressor_sample_weight_consistency[friedman_mse]\", \"sklearn/tree/tests/test_tree.py::test_decision_tree_regressor_sample_weight_consistency[poisson]\", \"sklearn/tree/tests/test_tree.py::test_criterion_entropy_same_as_log_loss[2-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_criterion_entropy_same_as_log_loss[2-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_criterion_entropy_same_as_log_loss[4-DecisionTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_criterion_entropy_same_as_log_loss[4-ExtraTreeClassifier]\", \"sklearn/tree/tests/test_tree.py::test_different_endianness_pickle\", \"sklearn/tree/tests/test_tree.py::test_different_endianness_joblib_pickle\", \"sklearn/tree/tests/test_tree.py::test_different_bitness_pickle\", \"sklearn/tree/tests/test_tree.py::test_different_bitness_joblib_pickle\", \"sklearn/tree/tests/test_tree.py::test_check_n_classes\", \"sklearn/tree/tests/test_tree.py::test_check_value_ndarray\", \"sklearn/tree/tests/test_tree.py::test_check_node_ndarray\", \"sklearn/tree/tests/test_tree.py::test_max_features_auto_deprecated\", \"sklearn/tree/tests/test_tree.py::test_splitter_serializable[BestSplitter]\", \"sklearn/tree/tests/test_tree.py::test_splitter_serializable[RandomSplitter]\", \"sklearn/tree/tests/test_tree.py::test_splitter_serializable[BestSparseSplitter]\", \"sklearn/tree/tests/test_tree.py::test_splitter_serializable[RandomSparseSplitter]\", \"sklearn/tree/tests/test_tree.py::test_tree_deserialization_from_read_only_buffer\", \"sklearn/utils/tests/test_param_validation.py::test_interval_range[Integral]\", \"sklearn/utils/tests/test_param_validation.py::test_interval_range[Real]\", \"sklearn/utils/tests/test_param_validation.py::test_interval_inf_in_bounds\", \"sklearn/utils/tests/test_param_validation.py::test_nan_not_in_interval[interval0]\", \"sklearn/utils/tests/test_param_validation.py::test_nan_not_in_interval[interval1]\", \"sklearn/utils/tests/test_param_validation.py::test_interval_errors[params0-TypeError-Expecting\", \"sklearn/utils/tests/test_param_validation.py::test_interval_errors[params1-TypeError-Expecting\", \"sklearn/utils/tests/test_param_validation.py::test_interval_errors[params2-ValueError-left\", \"sklearn/utils/tests/test_param_validation.py::test_interval_errors[params3-ValueError-right\", \"sklearn/utils/tests/test_param_validation.py::test_interval_errors[params4-ValueError-right\", \"sklearn/utils/tests/test_param_validation.py::test_stroptions\", \"sklearn/utils/tests/test_param_validation.py::test_options\", \"sklearn/utils/tests/test_param_validation.py::test_instances_of_type_human_readable[int-int]\", \"sklearn/utils/tests/test_param_validation.py::test_instances_of_type_human_readable[Integral-int]\", \"sklearn/utils/tests/test_param_validation.py::test_instances_of_type_human_readable[Real-float]\", \"sklearn/utils/tests/test_param_validation.py::test_instances_of_type_human_readable[ndarray-numpy.ndarray]\", \"sklearn/utils/tests/test_param_validation.py::test_hasmethods\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val[constraint0]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val[constraint1]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val[constraint2]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val[constraint3]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val[constraint4]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val[constraint5]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val[constraint6]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val[constraint7]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val[constraint8]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval0-real_interval0]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval1-real_interval1]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval2-real_interval2]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval3-real_interval3]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval4-real_interval4]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval5-real_interval5]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval6-real_interval6]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval7-real_interval7]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval8-real_interval8]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval9-real_interval9]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval10-real_interval10]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval11-real_interval11]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval12-real_interval12]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval13-real_interval13]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval14-real_interval14]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval15-real_interval15]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval16-real_interval16]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_2_intervals[integer_interval17-real_interval17]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_all_valid[constraints0]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_all_valid[constraints1]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_all_valid[constraints2]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_all_valid[constraints3]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_all_valid[constraints4]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_all_valid[constraints5]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_all_valid[constraints6]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_all_valid[constraints7]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_invalid_param_val_all_valid[constraints8]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint0]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint1]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint2]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint3]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint4]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint5]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint6]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint7]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint8]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint9]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint10]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint11]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint12]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint13]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint14]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint15]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint16]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint17]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint18]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint19]\", \"sklearn/utils/tests/test_param_validation.py::test_generate_valid_param[constraint20]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[constraint_declaration0-0.42]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[constraint_declaration1-42]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[constraint_declaration2-b]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[constraint_declaration3-float64]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[callable-<lambda>]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[None-None]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[array-like-value6]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[array-like-value7]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[sparse\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[random_state-0]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[random_state-value10]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[random_state-None]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[_Class-value12]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[int-1]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[Real-0.5]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[boolean-False]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[verbose-1]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[missing_values--1]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[missing_values--1.0]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[missing_values-None]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[missing_values-nan0]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[missing_values-nan1]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[missing_values-missing]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[constraint_declaration23-value23]\", \"sklearn/utils/tests/test_param_validation.py::test_is_satisfied_by[cv_object-5]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[constraint_declaration0-Interval]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[constraint_declaration1-StrOptions]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[constraint_declaration2-Options]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[array-like-_ArrayLikes]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[sparse\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[random_state-_RandomStates]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[None-_NoneConstraint]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[callable-_Callables]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[int-_InstancesOf]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[boolean-_Booleans]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[verbose-_VerboseHelper]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[missing_values-_MissingValues]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[constraint_declaration12-HasMethods]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint[cv_object-_CVObjects]\", \"sklearn/utils/tests/test_param_validation.py::test_make_constraint_unknown\", \"sklearn/utils/tests/test_param_validation.py::test_validate_params\", \"sklearn/utils/tests/test_param_validation.py::test_validate_params_missing_params\", \"sklearn/utils/tests/test_param_validation.py::test_decorate_validated_function\", \"sklearn/utils/tests/test_param_validation.py::test_validate_params_method\", \"sklearn/utils/tests/test_param_validation.py::test_validate_params_estimator\", \"sklearn/utils/tests/test_param_validation.py::test_stroptions_deprecated_subset\", \"sklearn/utils/tests/test_param_validation.py::test_hidden_constraint\", \"sklearn/utils/tests/test_param_validation.py::test_hidden_stroptions\", \"sklearn/utils/tests/test_param_validation.py::test_validate_params_set_param_constraints_attribute\", \"sklearn/utils/tests/test_param_validation.py::test_boolean_constraint_deprecated_int\", \"sklearn/utils/tests/test_param_validation.py::test_no_validation\", \"sklearn/utils/tests/test_param_validation.py::test_pandas_na_constraint_with_pd_na\", \"sklearn/utils/tests/test_param_validation.py::test_iterable_not_string\", \"sklearn/utils/tests/test_param_validation.py::test_cv_objects\", \"sklearn/utils/tests/test_param_validation.py::test_third_party_estimator\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.022160",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}