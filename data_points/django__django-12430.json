{
  "repo": "django/django",
  "instance_id": "django__django-12430",
  "base_commit": "20ba3ce4ac8e8438070568ffba76f7d8d4986a53",
  "patch": "diff --git a/django/core/cache/__init__.py b/django/core/cache/__init__.py\n--- a/django/core/cache/__init__.py\n+++ b/django/core/cache/__init__.py\n@@ -12,7 +12,7 @@\n \n See docs/topics/cache.txt for information on the public API.\n \"\"\"\n-from threading import local\n+from asgiref.local import Local\n \n from django.conf import settings\n from django.core import signals\n@@ -61,7 +61,7 @@ class CacheHandler:\n     Ensure only one instance of each alias exists per thread.\n     \"\"\"\n     def __init__(self):\n-        self._caches = local()\n+        self._caches = Local()\n \n     def __getitem__(self, alias):\n         try:\n",
  "test_patch": "diff --git a/tests/async/tests.py b/tests/async/tests.py\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -4,6 +4,7 @@\n \n from asgiref.sync import async_to_sync\n \n+from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import SynchronousOnlyOperation\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n@@ -11,6 +12,18 @@\n from .models import SimpleModel\n \n \n+@skipIf(sys.platform == 'win32' and (3, 8, 0) < sys.version_info < (3, 8, 1), 'https://bugs.python.org/issue38563')\n+class CacheTest(SimpleTestCase):\n+    def test_caches_local(self):\n+        @async_to_sync\n+        async def async_cache():\n+            return caches[DEFAULT_CACHE_ALIAS]\n+\n+        cache_1 = async_cache()\n+        cache_2 = async_cache()\n+        self.assertIs(cache_1, cache_2)\n+\n+\n @skipIf(sys.platform == 'win32' and (3, 8, 0) < sys.version_info < (3, 8, 1), 'https://bugs.python.org/issue38563')\n class DatabaseConnectionTest(SimpleTestCase):\n     \"\"\"A database connection cannot be used in an async context.\"\"\"\n",
  "problem_statement": "Possible data loss when using caching from async code.\nDescription\n\t\nCacheHandler use threading.local instead of asgiref.local.Local, hence it's a chance of data corruption if someone tries to use caching from async code. There is a potential race condition if two coroutines touch the same cache object at exactly the same time.\n",
  "hints_text": "",
  "created_at": "2020-02-07T02:03:56Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_caches_local (async.tests.CacheTest)\"]",
  "PASS_TO_PASS": "[\"test_async_unsafe (async.tests.AsyncUnsafeTest)\", \"test_async_unsafe_suppressed (async.tests.AsyncUnsafeTest)\", \"test_get_async_connection (async.tests.DatabaseConnectionTest)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.624664",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}