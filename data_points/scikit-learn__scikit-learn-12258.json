{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12258",
  "base_commit": "a7a834bdb7a51ec260ff005715d50ab6ed01a16b",
  "patch": "diff --git a/sklearn/metrics/cluster/unsupervised.py b/sklearn/metrics/cluster/unsupervised.py\n--- a/sklearn/metrics/cluster/unsupervised.py\n+++ b/sklearn/metrics/cluster/unsupervised.py\n@@ -185,7 +185,8 @@ def silhouette_samples(X, labels, metric='euclidean', **kwds):\n         The metric to use when calculating distance between instances in a\n         feature array. If metric is a string, it must be one of the options\n         allowed by :func:`sklearn.metrics.pairwise.pairwise_distances`. If X is\n-        the distance array itself, use \"precomputed\" as the metric.\n+        the distance array itself, use \"precomputed\" as the metric. Precomputed\n+        distance matrices must have 0 along the diagonal.\n \n     `**kwds` : optional keyword parameters\n         Any further parameters are passed directly to the distance function.\n@@ -210,6 +211,15 @@ def silhouette_samples(X, labels, metric='euclidean', **kwds):\n \n     \"\"\"\n     X, labels = check_X_y(X, labels, accept_sparse=['csc', 'csr'])\n+\n+    # Check for diagonal entries in precomputed distance matrix\n+    if metric == 'precomputed':\n+        if np.any(np.diagonal(X)):\n+            raise ValueError(\n+                'The precomputed distance matrix contains non-zero '\n+                'elements on the diagonal. Use np.fill_diagonal(X, 0).'\n+            )\n+\n     le = LabelEncoder()\n     labels = le.fit_transform(labels)\n     n_samples = len(labels)\n",
  "test_patch": "diff --git a/sklearn/metrics/cluster/tests/test_unsupervised.py b/sklearn/metrics/cluster/tests/test_unsupervised.py\n--- a/sklearn/metrics/cluster/tests/test_unsupervised.py\n+++ b/sklearn/metrics/cluster/tests/test_unsupervised.py\n@@ -168,6 +168,22 @@ def test_non_numpy_labels():\n         silhouette_score(list(X), list(y)) == silhouette_score(X, y))\n \n \n+def test_silhouette_nonzero_diag():\n+    # Construct a zero-diagonal matrix\n+    dists = pairwise_distances(\n+        np.array([[0.2, 0.1, 0.12, 1.34, 1.11, 1.6]]).transpose())\n+\n+    # Construct a nonzero-diagonal distance matrix\n+    diag_dists = dists.copy()\n+    np.fill_diagonal(diag_dists, 1)\n+\n+    labels = [0, 0, 0, 1, 1, 1]\n+\n+    assert_raise_message(ValueError, \"distance matrix contains non-zero\",\n+                         silhouette_samples,\n+                         diag_dists, labels, metric='precomputed')\n+\n+\n def assert_raises_on_only_one_label(func):\n     \"\"\"Assert message when there is only one label\"\"\"\n     rng = np.random.RandomState(seed=0)\n",
  "problem_statement": "silhouette_samples gives incorrect result from precomputed distance matrix with diagonal entries\n#### Description\r\nsilhouette_samples gives incorrect result from precomputed distance matrix with diagonal entries.\r\n\r\nWhen using silhouette_samples and metric='precomputed', if the input distance matrix has non-zero values along the diagonal then the silhouette scores are incorrect.\r\n\r\n**Suggested Solution**\r\nBefore calculating the scores the diagonal entries of a precomputed distance matrix should be set to zero.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\nExample:\r\n```python\r\nimport numpy as np\r\nfrom sklearn.metrics.pairwise import pairwise_distances\r\nfrom sklearn.metrics import silhouette_samples\r\n\r\ndists = pairwise_distances(np.array([[0.2, 0.1, 0.12, 1.34, 1.11, 1.6]]).transpose())\r\ndiag_dists = np.diag(np.ones(6)) + dists\r\n\r\nlabels = [0,0,0,1,1,1]\r\n\r\nprint(silhouette_samples(diag_dists, labels, metric = 'precomputed'))\r\n```\r\n\r\n#### Expected Results\r\n[0.92173913, 0.952, 0.95934959, 0.79583333, 0.62886598, 0.74315068]\r\n\r\n#### Actual Results\r\n[0.48695652, 0.552, 0.55284553, 0.37916667, 0.11340206, 0.40068493]\r\n\r\n#### Versions\r\nDarwin-17.7.0-x86_64-i386-64bit\r\nPython 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 12:04:33) \r\n[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]\r\nNumPy 1.15.1\r\nSciPy 1.1.0\r\nScikit-Learn 0.20.0\n",
  "hints_text": "(Also, hi Stephen!)\nCould you explain why you want to handle this case?\n\nI would rather raise an error if the diag is not close to 0.\n\n(Also, upgrading to 0.20 may give you much better performance for silhoette calculations on large samples)\nHi Joel!\r\n\r\nI'd like to handle this case because it isn't completely clear from the documentation. The equations used to explain the behaviour of the function do not require the use of the diagonal entries, yet they are still involved in the calculation. Likely this is for ease of implementation and speed.\r\n\r\nThanks for the tip about 0.2. I have updated now (and updated the original issue text).\nBut why, when silhouette deals in distances, would you have the distance from a point to itself not equal to 0? Or is it just that you are filling the matrix in a way that leaves these cells arbitrary, and you had expected the resultsÂ to be invariant to their value?\nThe latter. The values in the diagonal cells are arbitrary and I expected the result to be invariant to their value.\r\n\r\nI understand that the distance matrices produced by pairwise_distances (which I think recently was changed to paired_distances) will always have these values set to 0. However my distance matrix did not conform to this format.\n[No, paired and pairwise do different things and have for at least 5 years. Pairwise calculates distances over a cartesian product of two sets of samples (defaulting to a set and itself). Paired deals with specified pairings.]\r\n\r\nSo let's do a little validation and raise an error if the diagonal is non-zero.\nFeel free to submit a PR\n> [No, paired and pairwise do different things and have for at least 5 years. Pairwise calculates distances over a cartesian product of two sets of samples (defaulting to a set and itself). Paired deals with specified pairings.]\r\n\r\nYes you're right. Seems like my browser was pushing me to metrics.pairwise.pairwise_distances instead of metrics.pairwise_distances, leading me to believe that it had been removed.\nIf this is still in need of fixing, I'd like to take this on.",
  "created_at": "2018-10-03T12:36:54Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/metrics/cluster/tests/test_unsupervised.py::test_silhouette_nonzero_diag\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/cluster/tests/test_unsupervised.py::test_silhouette\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_cluster_size_1\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_silhouette_paper_example\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_correct_labelsize\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_non_encoded_labels\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_non_numpy_labels\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_calinski_harabasz_score\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_deprecated_calinski_harabaz_score\", \"sklearn/metrics/cluster/tests/test_unsupervised.py::test_davies_bouldin_score\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.963807",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}