{
  "repo": "django/django",
  "instance_id": "django__django-12951",
  "base_commit": "2aac176e86204785f0f2ec4838049d8fed70870e",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -876,8 +876,11 @@ class When(Expression):\n     conditional = False\n \n     def __init__(self, condition=None, then=None, **lookups):\n-        if lookups and condition is None:\n-            condition, lookups = Q(**lookups), None\n+        if lookups:\n+            if condition is None:\n+                condition, lookups = Q(**lookups), None\n+            elif getattr(condition, 'conditional', False):\n+                condition, lookups = Q(condition, **lookups), None\n         if condition is None or not getattr(condition, 'conditional', False) or lookups:\n             raise TypeError(\n                 'When() supports a Q object, a boolean expression, or lookups '\n",
  "test_patch": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -6,7 +6,7 @@\n \n from django.core.exceptions import FieldError\n from django.db.models import (\n-    BinaryField, Case, CharField, Count, DurationField, F,\n+    BinaryField, BooleanField, Case, CharField, Count, DurationField, F,\n     GenericIPAddressField, IntegerField, Max, Min, Q, Sum, TextField,\n     TimeField, UUIDField, Value, When,\n )\n@@ -312,6 +312,17 @@ def test_in_subquery(self):\n             transform=attrgetter('integer', 'integer2')\n         )\n \n+    def test_condition_with_lookups(self):\n+        qs = CaseTestModel.objects.annotate(\n+            test=Case(\n+                When(Q(integer2=1), string='2', then=Value(False)),\n+                When(Q(integer2=1), string='1', then=Value(True)),\n+                default=Value(False),\n+                output_field=BooleanField(),\n+            ),\n+        )\n+        self.assertIs(qs.get(integer=1).test, True)\n+\n     def test_case_reuse(self):\n         SOME_CASE = Case(\n             When(pk=0, then=Value('0')),\n@@ -1350,6 +1361,8 @@ def test_invalid_when_constructor_args(self):\n             When(condition=object())\n         with self.assertRaisesMessage(TypeError, msg):\n             When(condition=Value(1, output_field=IntegerField()))\n+        with self.assertRaisesMessage(TypeError, msg):\n+            When(Value(1, output_field=IntegerField()), string='1')\n         with self.assertRaisesMessage(TypeError, msg):\n             When()\n \n",
  "problem_statement": "Cannot mix Exists expression with keyword arguments to When\nDescription\n\t \n\t\t(last modified by Ryan Heard)\n\t \nI don't seem to be able to provide an Exists expression to When alongside keyword arguments like you can with filter. For instance, consider:\nclass State(models.Model):\n pass\nclass County(models.Model):\n name = CharField(max_length=50)\n state = ForeignKey(State, related_name='counties')\nI can execute the following query just fine:\nCounty.objects.filter(\n Exists(State.objects.filter(counties=OuterRef('pk'), name=\"Texas\")),\n name=\"Dallas\",\n)\nBut a similar query using When does not work:\n>>> County.objects.annotate(\n status=Case(\n\tWhen(Exists(State.objects.filter(counties=OuterRef('pk'), name=\"Texas\")), name=\"Dallas\", then=Value(\"DALLAS COUNTY\")),\n\tdefault=Value(\"ELSEWHERE\"),\n))\nTypeError: When() supports a Q object, a boolean expression, or lookups as a condition.\nInstead the arguments must be wrapped in a Q object:\n>>> County.objects.annotate(\n status=Case(\n\tWhen(Q(Exists(State.objects.filter(counties=OuterRef('pk'), name=\"Texas\")), name=\"Dallas\"), then=Value(\"DALLAS COUNTY\")),\n\tdefault=Value(\"ELSEWHERE\"),\n))\nThis is inconvenient and inconsistent with how filter works, as shown.\nWhen's init method can be modified to allow similar input as filter. â€‹Code is in a branch in my repo, but as this is my first time contributing to Django, I want to make sure I open a ticket and get feedback first.\nAlso I wasn't sure how to classify this. I wasn't sure if it was a bug, as I wasn't sure if it was designed this way.\n",
  "hints_text": "",
  "created_at": "2020-05-21T23:59:07Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_condition_with_lookups (expressions_case.tests.CaseExpressionTests)\"]",
  "PASS_TO_PASS": "[\"test_empty_q_object (expressions_case.tests.CaseWhenTests)\", \"test_invalid_when_constructor_args (expressions_case.tests.CaseWhenTests)\", \"test_only_when_arguments (expressions_case.tests.CaseWhenTests)\", \"test_conditional_aggregation_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_conditional_update_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_filter_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_hash (expressions_case.tests.CaseDocumentationExamples)\", \"test_lookup_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_simple_example (expressions_case.tests.CaseDocumentationExamples)\", \"test_aggregate (expressions_case.tests.CaseExpressionTests)\", \"test_aggregate_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_aggregate_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_exclude (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_values_not_in_order_by (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_aggregation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_annotation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_empty_when (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_in_clause (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_with_join_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_annotate_without_default (expressions_case.tests.CaseExpressionTests)\", \"test_case_reuse (expressions_case.tests.CaseExpressionTests)\", \"test_combined_expression (expressions_case.tests.CaseExpressionTests)\", \"test_combined_q_object (expressions_case.tests.CaseExpressionTests)\", \"test_filter (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_aggregation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_annotation_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_predicate (expressions_case.tests.CaseExpressionTests)\", \"test_filter_with_join_in_value (expressions_case.tests.CaseExpressionTests)\", \"test_filter_without_default (expressions_case.tests.CaseExpressionTests)\", \"test_in_subquery (expressions_case.tests.CaseExpressionTests)\", \"test_join_promotion (expressions_case.tests.CaseExpressionTests)\", \"test_join_promotion_multiple_annotations (expressions_case.tests.CaseExpressionTests)\", \"test_lookup_different_fields (expressions_case.tests.CaseExpressionTests)\", \"test_lookup_in_condition (expressions_case.tests.CaseExpressionTests)\", \"test_m2m_exclude (expressions_case.tests.CaseExpressionTests)\", \"test_m2m_reuse (expressions_case.tests.CaseExpressionTests)\", \"test_order_by_conditional_explicit (expressions_case.tests.CaseExpressionTests)\", \"test_order_by_conditional_implicit (expressions_case.tests.CaseExpressionTests)\", \"test_update (expressions_case.tests.CaseExpressionTests)\", \"test_update_big_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_binary (expressions_case.tests.CaseExpressionTests)\", \"test_update_boolean (expressions_case.tests.CaseExpressionTests)\", \"test_update_date (expressions_case.tests.CaseExpressionTests)\", \"test_update_date_time (expressions_case.tests.CaseExpressionTests)\", \"test_update_decimal (expressions_case.tests.CaseExpressionTests)\", \"test_update_duration (expressions_case.tests.CaseExpressionTests)\", \"test_update_email (expressions_case.tests.CaseExpressionTests)\", \"test_update_file (expressions_case.tests.CaseExpressionTests)\", \"test_update_file_path (expressions_case.tests.CaseExpressionTests)\", \"test_update_fk (expressions_case.tests.CaseExpressionTests)\", \"test_update_float (expressions_case.tests.CaseExpressionTests)\", \"test_update_generic_ip_address (expressions_case.tests.CaseExpressionTests)\", \"test_update_image (expressions_case.tests.CaseExpressionTests)\", \"test_update_null_boolean (expressions_case.tests.CaseExpressionTests)\", \"test_update_null_boolean_old (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_big_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_positive_small_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_slug (expressions_case.tests.CaseExpressionTests)\", \"test_update_small_integer (expressions_case.tests.CaseExpressionTests)\", \"test_update_string (expressions_case.tests.CaseExpressionTests)\", \"test_update_text (expressions_case.tests.CaseExpressionTests)\", \"test_update_time (expressions_case.tests.CaseExpressionTests)\", \"test_update_url (expressions_case.tests.CaseExpressionTests)\", \"test_update_uuid (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_expression_as_condition (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_expression_as_value (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_join_in_condition_raise_field_error (expressions_case.tests.CaseExpressionTests)\", \"test_update_with_join_in_predicate_raise_field_error (expressions_case.tests.CaseExpressionTests)\", \"test_update_without_default (expressions_case.tests.CaseExpressionTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.639311",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}