{
  "repo": "django/django",
  "instance_id": "django__django-13800",
  "base_commit": "3eb98743dcaa0b7abd2d5832cba8cc9cb586a964",
  "patch": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -14,10 +14,6 @@ class MessageEncoder(json.JSONEncoder):\n     \"\"\"\n     message_key = '__json_message'\n \n-    def __init__(self, *args, **kwargs):\n-        kwargs.setdefault('separators', (',', ':'))\n-        super().__init__(*args, **kwargs)\n-\n     def default(self, obj):\n         if isinstance(obj, Message):\n             # Using 0/1 here instead of False/True to produce more compact json\n@@ -51,6 +47,18 @@ def decode(self, s, **kwargs):\n         return self.process_messages(decoded)\n \n \n+class MessageSerializer:\n+    def dumps(self, obj):\n+        return json.dumps(\n+            obj,\n+            separators=(',', ':'),\n+            cls=MessageEncoder,\n+        ).encode('latin-1')\n+\n+    def loads(self, data):\n+        return json.loads(data.decode('latin-1'), cls=MessageDecoder)\n+\n+\n class CookieStorage(BaseStorage):\n     \"\"\"\n     Store messages in a cookie.\n@@ -152,9 +160,7 @@ def _encode(self, messages, encode_empty=False):\n         also contains a hash to ensure that the data was not tampered with.\n         \"\"\"\n         if messages or encode_empty:\n-            encoder = MessageEncoder()\n-            value = encoder.encode(messages)\n-            return self.signer.sign(value)\n+            return self.signer.sign_object(messages, serializer=MessageSerializer, compress=True)\n \n     def _decode(self, data):\n         \"\"\"\n@@ -166,13 +172,21 @@ def _decode(self, data):\n         if not data:\n             return None\n         try:\n-            decoded = self.signer.unsign(data)\n+            return self.signer.unsign_object(data, serializer=MessageSerializer)\n+        # RemovedInDjango41Warning: when the deprecation ends, replace with:\n+        #\n+        # except (signing.BadSignature, json.JSONDecodeError):\n+        #     pass\n         except signing.BadSignature:\n             # RemovedInDjango40Warning: when the deprecation ends, replace\n             # with:\n             #   decoded = None.\n             decoded = self._legacy_decode(data)\n+        except json.JSONDecodeError:\n+            decoded = self.signer.unsign(data)\n+\n         if decoded:\n+            # RemovedInDjango41Warning.\n             try:\n                 return json.loads(decoded, cls=MessageDecoder)\n             except json.JSONDecodeError:\n",
  "test_patch": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,4 +1,5 @@\n import json\n+import random\n \n from django.conf import settings\n from django.contrib.messages import constants\n@@ -6,8 +7,10 @@\n from django.contrib.messages.storage.cookie import (\n     CookieStorage, MessageDecoder, MessageEncoder,\n )\n+from django.core.signing import get_cookie_signer\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import ignore_warnings\n+from django.utils.crypto import get_random_string\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.safestring import SafeData, mark_safe\n \n@@ -71,7 +74,9 @@ def test_cookie_setings(self):\n         response = self.get_response()\n         storage.add(constants.INFO, 'test')\n         storage.update(response)\n-        self.assertIn('test', response.cookies['messages'].value)\n+        messages = storage._decode(response.cookies['messages'].value)\n+        self.assertEqual(len(messages), 1)\n+        self.assertEqual(messages[0].message, 'test')\n         self.assertEqual(response.cookies['messages']['domain'], '.example.com')\n         self.assertEqual(response.cookies['messages']['expires'], '')\n         self.assertIs(response.cookies['messages']['secure'], True)\n@@ -116,15 +121,30 @@ def test_max_cookie_length(self):\n         # size which will fit 4 messages into the cookie, but not 5.\n         # See also FallbackTest.test_session_fallback\n         msg_size = int((CookieStorage.max_cookie_size - 54) / 4.5 - 37)\n+        first_msg = None\n+        # Generate the same (tested) content every time that does not get run\n+        # through zlib compression.\n+        random.seed(42)\n         for i in range(5):\n-            storage.add(constants.INFO, str(i) * msg_size)\n+            msg = get_random_string(msg_size)\n+            storage.add(constants.INFO, msg)\n+            if i == 0:\n+                first_msg = msg\n         unstored_messages = storage.update(response)\n \n         cookie_storing = self.stored_messages_count(storage, response)\n         self.assertEqual(cookie_storing, 4)\n \n         self.assertEqual(len(unstored_messages), 1)\n-        self.assertEqual(unstored_messages[0].message, '0' * msg_size)\n+        self.assertEqual(unstored_messages[0].message, first_msg)\n+\n+    def test_message_rfc6265(self):\n+        non_compliant_chars = ['\\\\', ',', ';', '\"']\n+        messages = ['\\\\te,st', ';m\"e', '\\u2019', '123\"NOTRECEIVED\"']\n+        storage = self.get_storage()\n+        encoded = storage._encode(messages)\n+        for illegal in non_compliant_chars:\n+            self.assertEqual(encoded.find(illegal), -1)\n \n     def test_json_encoder_decoder(self):\n         \"\"\"\n@@ -172,6 +192,19 @@ def test_legacy_hash_decode(self):\n         decoded_messages = storage._decode(encoded_messages)\n         self.assertEqual(messages, decoded_messages)\n \n+    def test_legacy_encode_decode(self):\n+        # RemovedInDjango41Warning: pre-Django 3.2 encoded messages will be\n+        # invalid.\n+        storage = self.storage_class(self.get_request())\n+        messages = ['this', 'that']\n+        # Encode/decode a message using the pre-Django 3.2 format.\n+        encoder = MessageEncoder()\n+        value = encoder.encode(messages)\n+        signer = get_cookie_signer(salt=storage.key_salt)\n+        encoded_messages = signer.sign(value)\n+        decoded_messages = storage._decode(encoded_messages)\n+        self.assertEqual(messages, decoded_messages)\n+\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_default_hashing_algorithm(self):\n         messages = Message(constants.DEBUG, ['this', 'that'])\ndiff --git a/tests/messages_tests/test_fallback.py b/tests/messages_tests/test_fallback.py\n--- a/tests/messages_tests/test_fallback.py\n+++ b/tests/messages_tests/test_fallback.py\n@@ -1,8 +1,11 @@\n+import random\n+\n from django.contrib.messages import constants\n from django.contrib.messages.storage.fallback import (\n     CookieStorage, FallbackStorage,\n )\n from django.test import SimpleTestCase\n+from django.utils.crypto import get_random_string\n \n from .base import BaseTests\n from .test_cookie import set_cookie_data, stored_cookie_messages_count\n@@ -128,8 +131,11 @@ def test_session_fallback(self):\n         response = self.get_response()\n         # see comment in CookieTests.test_cookie_max_length()\n         msg_size = int((CookieStorage.max_cookie_size - 54) / 4.5 - 37)\n+        # Generate the same (tested) content every time that does not get run\n+        # through zlib compression.\n+        random.seed(42)\n         for i in range(5):\n-            storage.add(constants.INFO, str(i) * msg_size)\n+            storage.add(constants.INFO, get_random_string(msg_size))\n         storage.update(response)\n         cookie_storing = self.stored_cookie_messages_count(storage, response)\n         self.assertEqual(cookie_storing, 4)\n@@ -143,7 +149,10 @@ def test_session_fallback_only(self):\n         \"\"\"\n         storage = self.get_storage()\n         response = self.get_response()\n-        storage.add(constants.INFO, 'x' * 5000)\n+        # Generate the same (tested) content every time that does not get run\n+        # through zlib compression.\n+        random.seed(42)\n+        storage.add(constants.INFO, get_random_string(5000))\n         storage.update(response)\n         cookie_storing = self.stored_cookie_messages_count(storage, response)\n         self.assertEqual(cookie_storing, 0)\ndiff --git a/tests/messages_tests/test_mixins.py b/tests/messages_tests/test_mixins.py\n--- a/tests/messages_tests/test_mixins.py\n+++ b/tests/messages_tests/test_mixins.py\n@@ -1,3 +1,4 @@\n+from django.core.signing import b64_decode\n from django.test import SimpleTestCase, override_settings\n from django.urls import reverse\n \n@@ -11,4 +12,8 @@ def test_set_messages_success(self):\n         author = {'name': 'John Doe', 'slug': 'success-msg'}\n         add_url = reverse('add_success_msg')\n         req = self.client.post(add_url, author)\n-        self.assertIn(ContactFormViewWithMsg.success_message % author, req.cookies['messages'].value)\n+        # Uncompressed message is stored in the cookie.\n+        value = b64_decode(\n+            req.cookies['messages'].value.split(\":\")[0].encode(),\n+        ).decode()\n+        self.assertIn(ContactFormViewWithMsg.success_message % author, value)\n",
  "problem_statement": "Not RFC 6265 compliant cookies in contrib.messages.\nDescription\n\t \n\t\t(last modified by Nico Giefing)\n\t \nHi \nA Customer of mine is using a WAF which is handling Cookies as it is described tin the RFC: â€‹https://tools.ietf.org/html/rfc6265\nThe issue now is that Django is trying to use an escape-character in cookie-Values which is not supported in the RFC \nan example of such a cookie: \nmessages=\\\"123\\\\\\\"NOTRECEIVED\\\"\"\nPlease consider to get this fixed so there can be a protection of this system.\nRegards,\nNico\n",
  "hints_text": "Django uses Python's http.cookies._unquote() to better match the behavior of browsers, see #26158. messages=\\\"123\\\\\\\"NOTRECEIVED\\\"\" is parsed to {'messages': '123\"NOTRECEIVED\"'} which seems correct to me. What value do you expect?\nAs described in the RFC, in a cookie value a backslash \"\\\" is not to be used. The issue is that a \" will be seen as the end of the cookie value on every device in the middle (WAF) and therefore not the full cookie value will get through to the webserver. Please let me know if you need more guidance.\nDjango uses Python's â€‹http.cookies.SimpleCookie class, and as far as I'm aware we don't escape any characters in Django. It looks that it has already been reported in â€‹Python bug tracker, see â€‹https://bugs.python.org/issue19670. I don't think that we should switch to BaseCookie. You can start a discussion on DevelopersMailingList if you don't agree.\nGiven that you CC'ed me I am going to reopen this :) The spec is rather clear on what is allowed and we should try (when we generate cookies) to comply. This should at least apply to cookies Django core/contrib apps (d.c.messages) generates. I am not sure if we want to put encoding handling into our general cookie handling; I'd probably leave that to the enduser if they want to store weird data there :D\nAn initial approach can look like this: diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py index b51e292aa0..c75ed75940 100644 --- a/django/contrib/messages/storage/cookie.py +++ b/django/contrib/messages/storage/cookie.py @@ -1,5 +1,7 @@ import json +from urllib.parse import quote, unquote + from django.conf import settings from django.contrib.messages.storage.base import BaseStorage, Message from django.core import signing @@ -8,6 +10,9 @@ from django.utils.crypto import constant_time_compare, salted_hmac from django.utils.safestring import SafeData, mark_safe +SAFE_COOKIE_CHARS = \"!#$%&'()*+/:<=>?@[]^`{|}\" + + class MessageEncoder(json.JSONEncoder): \"\"\" Compactly serialize instances of the ``Message`` class as JSON. @@ -24,6 +29,9 @@ class MessageEncoder(json.JSONEncoder): return message return super().default(obj) + def encode(self, obj): + return quote(super().encode(obj), safe=SAFE_COOKIE_CHARS) + class MessageDecoder(json.JSONDecoder): \"\"\" @@ -43,7 +51,7 @@ class MessageDecoder(json.JSONDecoder): return obj def decode(self, s, **kwargs): - decoded = super().decode(s, **kwargs) + decoded = super().decode(unquote(s), **kwargs) return self.process_messages(decoded) diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py index 5d5fb42d67..af7f36f8d0 100644 --- a/tests/messages_tests/test_cookie.py +++ b/tests/messages_tests/test_cookie.py @@ -182,3 +182,12 @@ class CookieTests(BaseTests, SimpleTestCase): self.assertEqual(decoded, messages) storage_default = self.get_storage() self.assertNotEqual(encoded, storage_default._encode(messages)) + + def test_rfc_6265_encoding(self): + storage = self.storage_class(self.get_request()) + msg_1 = Message(constants.INFO, 'Test me') + msg_2 = Message(constants.INFO, 'Test me \\\\again') + example_messages = [msg_1, msg_2] + encoded = storage._encode(example_messages) + expected = '[[%22__json_message%22%2C0%2C20%2C%22Test%20me%22]%2C[%22__json_message%22%2C0%2C20%2C%22Test%20me%20%5C%5Cagain%22]]' + self.assertEqual(encoded.split(':')[0], expected) That said, this makes messages quite a bit longer :/\nAgreed, we should fix cookies values from contrib.messages. I misunderstood the ticket description. Thanks Florian.\nWell technically it applies to the whole request.cookies interface; but I don't see any feasible fix there. It would a) be highly backwards incompatible and b) cookies might require coordination with the frontend JS -- so it is better if the user can decide what to encode and how. I mean in the best case one doesn't store much in cookies either way, they do not perform well with concurrent requests for instanceâ€¦\nHi, I would like to work on this ticket. I'm happy to get started on it this week, and would appreciate guidance on what tests we can do for backwards compatibility and the increase in message size (especially given the 4KB size limit for header fields set by Django).\nHi Craig, as for the message size I think it would be great if we could do something similar to signing.dumps (ie run zlib over the data). This will probably require us to add support for that in the Signer class in the first place; but it might be a nice addition.\nHi Florian, that's a great idea. Doing so also makes sure that the characters used in the cookie are acceptable for RFC 6265. I'll start work on it today.\nI have implemented the initial approach according to the comment above. One thing to note is that when the cookie is accessed through the value attribute, it will need an unquote, for cases like req.cookies['messages'].value. This could be attempted with a property to manage access to the value attribute to apply the unquote in there, so that any client code that uses that method of access can remain unchanged. The compression has proved to be a bit tricky, due to changing between bytes and strings, but the approach that I am taking is to factor out the compression code from signing.dumps and loads into signing.compress and decompress. It was encouraging to see swapping the quote unquote for singing.dumps signing.loads works out of the box, if we want all our message cookies timestamped, which I assume that we don't. But anyway, that works. I'll be back on the case later this week. Thanks for your tips, PR forthcoming.\nâ€‹PR - it's a work in progress\nHi All, I figure I should probably give some historical context about cookie quoting for the record. It mostly matches the analysis so far on the ticket: When I refactored request.COOKIE (parse_cookie()) back in 2016, I was surprised that the cookie RFCs don't accurately describe how browsers work. I had to test browers myself to figure stuff out. The RFCs gave no guidance as to how to encode cookies, so there's really no official standard for how to encode/decode, and in that respect leaving it up to the application itself to do the encoding could make sense from a Django perspective. I did also notice that using % url quoting was what a lot of frameworks were using for encoding, so that is becoming more and more of an ad-hoc standard, despite not being in the RFC. (Percent encoding makes it really easy to encode/decode in Javascript.). In 2016 I decided not to touch this encoding issue because I wanted to minimize backwards-compatible issues, so I kept using Python's http.cookies._unquote() (slash encoding) for backwards compatibility. (Again, browsers don't automatically unquote anything in cookies, so it's not a browser-compatibility thing) I think long-term it would be great to stop encoding cookies using http.cookies. _quote(), as I think it's really just a python-specific way of quoting cookies, and as this issue states, it ends up creating invalid cookies. (invalid according the RFC at least. Browsers don't care and they work fine with many of what the RFC considers invalid characters.) Part of me thinks it would be nice if Django continued to handle cookie encoding automatically and switch to % encoding, but I think that's going to lead to double encoding/decoding in some cases with the current api. Maybe we could have a response.set_cookie('name', 'value', encode=True/False) to control whether Django applies % encoding or not? We'd probably also need to have request.cookies.get('name', decode=True/False). Anyway, I think the safest and most minimal thing to do is to modify the messages framework to % url quote cookies as PR 13690 suggests. I don't have a clear picture for a more general framework-wide fix, but I at least wanted to write my story down somewhere in case it's helpful.\nHi Colin, thanks for your story. It's good to know more of the background. Adding a boolean flag is sensible even in the Messages module, since if we change the encoding it would interfere with any existing client code that uses the stored message value. I guess the default argument should be encode=False.\nAnyway, I think the safest and most minimal thing to do is to modify the messages framework to % url quote cookies as PR 13690 suggests. I don't have a clear picture for a more general framework-wide fix, but I at least wanted to write my story down somewhere in case it's helpful. I kinda agree, but encoding like I suggested introduces quite an overhead. In that sense I think it would make sense to (if we are changing it anyways) ensure that we can generate even shorter messages. This is the reason why I suggested to move compress into the signer base classes. This way the messaging framework could benefit from shorter messages while automatically ensuring compatibility with the RFC (the created base64 only contains valid chars).\nHi All, I've updated the PR with the compress_b64encode and b64decode_decompress methods extracted into the django.core.signing module. I could use some help with the names, should they be compress and decompress or mention the b64 encoding as in the current PR? Also, the encoding from string to bytestring and back again needs some thinking. If the compress/decompress methods are going to be used by client code (as indeed they might be to extract raw messages from req.cookies['messages'].value) then getting decompress to return a string instead of a bytestring would be better. And compress should be modified to accept a string. That will probably be my next step when I get back to this during the week.\nReplying to Craig Smith: Hi All, I've updated the PR with the compress_b64encode and b64decode_decompress methods extracted into the django.core.signing module. I could use some help with the names, should they be compress and decompress or mention the b64 encoding as in the current PR? Personally I would have made those a feature of the signer class itself. This way we do not have to replicate the code everywhere. Also, the encoding from string to bytestring and back again needs some thinking. If the compress/decompress methods are going to be used by client code (as indeed they might be to extract raw messages from req.cookies['messages'].value) then getting decompress to return a string instead of a bytestring would be better. And compress should be modified to accept a string. That will probably be my next step when I get back to this during the week. As a general rule we should use bytes only on interfaces where it is needed and stay with strings as long as possible I think.\nThanks for clarifying those points Florian, I will make some adjustments.\nHi All, I'm having a terrible time of it due to encoding back and forth, and the fact that different encodings are used from place to place - utf-8, latin-1 and ascii (in session file storage). It feels like if I take a break from it and start over next week I could get somewhere - in the meantime, I am reading up on Unicode... If anyone else would like to jump in please do, if not, I'll get back into it next week. The original suggestion to use quote unquote works and can be found in â€‹this commit. I might submit a separate PR just for that one, in case we can go with that.\nHi All, I have started over. This the new â€‹PR. Still some more work to do on it though. I have opted to use latin-1 to encode internal to the new functions as we use latin-1 elsewhere. I was surprised when using utf-8 that a character was unrecognised when calling decompress_b64(request.cookies['messages'].value) in the messages_tests.test_mixins.test_set_messages_success test. But using latin-1 works. UTF-8 would be better, IMHO because we could store messages in many more languages, but those changes would need to be a bit more widespread and possibly have a bigger impact. But as the latin-1 character set is contained in utf-8, all we'd need to do is change our latin-1 encodings to utf-8 - is that something we should do here, or maybe bring it up on the mailing list? Going forward, I will add tests, in particular to confirm RFC6265 compliant message cookies, and I will attempt integrating the new functions as methods of the signer base class. Another question: signing.dumps currently takes a compress=False keyword arg, should this be passed through to the sign method? Or should the sign method compress and base64 encode by default? Thanks for reading.\nHi Craig, I've looked through it and thought a bit about it: I have opted to use latin-1 to encode internal to the new functions as we use latin-1 elsewhere. I was surprised when using utf-8 that a character was unrecognised That sounds like a bug to fix. latin-1 encoding will simply not work in the general case (Try calling compress_b64 with u'â‚¬'). We run messages through MessageEncoder which will result in a JSON string which is always encodable to utf-8 (especially since ensure_ascii is true). Going forward, I will add tests, in particular to confirm RFC6265 compliant message cookies We also will need tests and a backwards compatibility for old existing messages. and I will attempt integrating the new functions as methods of the signer base class. I'd hold off on that now till we figured out the str/bytes/encoding issues -- we might have fond another hornet nest here :)\nHi Florian, thanks for your feedback. I see what you mean about the Euro symbol and unicode characters in general. To get around this I added a charset parameter to the compress/decompress methods. So we can use utf-8 by default, but latin-1 where required. We need to use latin-1 in the signing.dumps/loads functions, since the signing.JSONSerializer uses it. Swapping it out leads us into that hornet's nest. The two tests that require latin-1 are messages_tests.test_mixins.test_set_messages_success and messages_tests.test_cookie.test_cookie_settings. This happens because of one or two calls to storage.add and storage.update . As an experiment I replaced all occurrences of latin-1 and iso-8859-1 with utf-8 to see if those tests would pass - they wouldn't. So it's from a dependency outside of django, most likely to do with WSGI, which uses latin-1 somehow. The bytes in particular are 0x91 and 0x92, which are left and right single quote characters in latin-1. Maybe we should open another ticket about removing the iso-8859-1 charset. Or at least pushing it back further toward the dependency boundary. I will get back onto this in a few days and come up with those extra tests. And then probably need to add documentation about the new methods.\nI have added a few tests that cover the new functions. If someone can review it and confirm that no further changes are needed, after that I will add some documentation of the new functions in the signing module. For reference it is this â€‹PR\nHi Craig, I've looked through your pull request and I finally understand why you needed the bunch of encode/decode stuff everywhere. Personally as a result of that I think the code is now rather ugly (certainly not your fault, but rather ours since we have a mix of bytes and strings everywhere here). I have an idea that I want to try out to directly use signing.loads/dumps in the message cookie backend; which might make this all (a bit?) easier. I'll try to put something up as a draft PR and maybe we can find a nice way out of this mess :)\nI started a discussion on the dev mailing list on how to get signing usage under control: â€‹https://groups.google.com/g/django-developers/c/X4N_71xeATM -- I think it would be good if we find some consensus there and then build upon that.",
  "created_at": "2020-12-21T22:34:04Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_set_messages_success (messages_tests.test_mixins.SuccessMessageMixinTests)\", \"test_message_rfc6265 (messages_tests.test_cookie.CookieTests)\"]",
  "PASS_TO_PASS": "[\"test_add (messages_tests.test_cookie.CookieTests)\", \"test_add_lazy_translation (messages_tests.test_cookie.CookieTests)\", \"test_add_update (messages_tests.test_cookie.CookieTests)\", \"test_context_processor_message_levels (messages_tests.test_cookie.CookieTests)\", \"test_cookie_setings (messages_tests.test_cookie.CookieTests)\", \"test_custom_tags (messages_tests.test_cookie.CookieTests)\", \"test_default_hashing_algorithm (messages_tests.test_cookie.CookieTests)\", \"test_default_level (messages_tests.test_cookie.CookieTests)\", \"test_existing_add (messages_tests.test_cookie.CookieTests)\", \"test_existing_add_read_update (messages_tests.test_cookie.CookieTests)\", \"test_existing_read (messages_tests.test_cookie.CookieTests)\", \"test_existing_read_add_update (messages_tests.test_cookie.CookieTests)\", \"test_full_request_response_cycle (messages_tests.test_cookie.CookieTests)\", \"test_get (messages_tests.test_cookie.CookieTests)\", \"test_get_bad_cookie (messages_tests.test_cookie.CookieTests)\", \"test_high_level (messages_tests.test_cookie.CookieTests)\", \"test_json_encoder_decoder (messages_tests.test_cookie.CookieTests)\", \"test_legacy_encode_decode (messages_tests.test_cookie.CookieTests)\", \"test_legacy_hash_decode (messages_tests.test_cookie.CookieTests)\", \"test_level_tag (messages_tests.test_cookie.CookieTests)\", \"test_low_level (messages_tests.test_cookie.CookieTests)\", \"test_max_cookie_length (messages_tests.test_cookie.CookieTests)\", \"test_middleware_disabled (messages_tests.test_cookie.CookieTests)\", \"test_middleware_disabled_fail_silently (messages_tests.test_cookie.CookieTests)\", \"test_multiple_posts (messages_tests.test_cookie.CookieTests)\", \"test_no_update (messages_tests.test_cookie.CookieTests)\", \"test_safedata (messages_tests.test_cookie.CookieTests)\", \"test_settings_level (messages_tests.test_cookie.CookieTests)\", \"test_tags (messages_tests.test_cookie.CookieTests)\", \"test_with_template_response (messages_tests.test_cookie.CookieTests)\", \"test_add (messages_tests.test_fallback.FallbackTests)\", \"test_add_lazy_translation (messages_tests.test_fallback.FallbackTests)\", \"test_add_update (messages_tests.test_fallback.FallbackTests)\", \"test_context_processor_message_levels (messages_tests.test_fallback.FallbackTests)\", \"test_custom_tags (messages_tests.test_fallback.FallbackTests)\", \"test_default_level (messages_tests.test_fallback.FallbackTests)\", \"test_existing_add (messages_tests.test_fallback.FallbackTests)\", \"test_existing_add_read_update (messages_tests.test_fallback.FallbackTests)\", \"test_existing_read (messages_tests.test_fallback.FallbackTests)\", \"test_existing_read_add_update (messages_tests.test_fallback.FallbackTests)\", \"test_flush_used_backends (messages_tests.test_fallback.FallbackTests)\", \"test_full_request_response_cycle (messages_tests.test_fallback.FallbackTests)\", \"test_get (messages_tests.test_fallback.FallbackTests)\", \"test_get_empty (messages_tests.test_fallback.FallbackTests)\", \"test_get_fallback (messages_tests.test_fallback.FallbackTests)\", \"test_get_fallback_only (messages_tests.test_fallback.FallbackTests)\", \"test_high_level (messages_tests.test_fallback.FallbackTests)\", \"test_level_tag (messages_tests.test_fallback.FallbackTests)\", \"test_low_level (messages_tests.test_fallback.FallbackTests)\", \"test_middleware_disabled (messages_tests.test_fallback.FallbackTests)\", \"test_middleware_disabled_fail_silently (messages_tests.test_fallback.FallbackTests)\", \"test_multiple_posts (messages_tests.test_fallback.FallbackTests)\", \"test_no_fallback (messages_tests.test_fallback.FallbackTests)\", \"test_no_update (messages_tests.test_fallback.FallbackTests)\", \"test_session_fallback (messages_tests.test_fallback.FallbackTests)\", \"test_session_fallback_only (messages_tests.test_fallback.FallbackTests)\", \"test_settings_level (messages_tests.test_fallback.FallbackTests)\", \"test_tags (messages_tests.test_fallback.FallbackTests)\", \"test_with_template_response (messages_tests.test_fallback.FallbackTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.670327",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}