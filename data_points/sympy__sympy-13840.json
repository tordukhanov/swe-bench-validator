{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13840",
  "base_commit": "8be967b5b2b81365c12030c41da68230e39cdf33",
  "patch": "diff --git a/sympy/printing/rcode.py b/sympy/printing/rcode.py\n--- a/sympy/printing/rcode.py\n+++ b/sympy/printing/rcode.py\n@@ -22,7 +22,6 @@\n known_functions = {\n     #\"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n     \"Abs\": \"abs\",\n-    \"gamma\": \"gamma\",\n     \"sin\": \"sin\",\n     \"cos\": \"cos\",\n     \"tan\": \"tan\",\n@@ -42,6 +41,13 @@\n     \"floor\": \"floor\",\n     \"ceiling\": \"ceiling\",\n     \"sign\": \"sign\",\n+    \"Max\": \"max\",\n+    \"Min\": \"min\",\n+    \"factorial\": \"factorial\",\n+    \"gamma\": \"gamma\",\n+    \"digamma\": \"digamma\",\n+    \"trigamma\": \"trigamma\",\n+    \"beta\": \"beta\",\n }\n \n # These are the core reserved words in the R language. Taken from:\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_rcode.py b/sympy/printing/tests/test_rcode.py\n--- a/sympy/printing/tests/test_rcode.py\n+++ b/sympy/printing/tests/test_rcode.py\n@@ -1,7 +1,7 @@\n from sympy.core import (S, pi, oo, Symbol, symbols, Rational, Integer,\n                         GoldenRatio, EulerGamma, Catalan, Lambda, Dummy, Eq)\n from sympy.functions import (Piecewise, sin, cos, Abs, exp, ceiling, sqrt,\n-                             gamma, sign, Max)\n+                             gamma, sign, Max, Min, factorial, beta)\n from sympy.sets import Range\n from sympy.logic import ITE\n from sympy.codegen import For, aug_assign, Assignment\n@@ -82,6 +82,8 @@ def test_rcode_Integer():\n \n def test_rcode_functions():\n     assert rcode(sin(x) ** cos(x)) == \"sin(x)^cos(x)\"\n+    assert rcode(factorial(x) + gamma(y)) == \"factorial(x) + gamma(y)\"\n+    assert rcode(beta(Min(x, y), Max(x, y))) == \"beta(min(x, y), max(x, y))\"\n \n \n def test_rcode_inline_function():\n",
  "problem_statement": "Max & Min converting using SymPy\nWhy many languages likes js and R cannot be converted from Max & Min?\r\n![image](https://user-images.githubusercontent.com/26391392/34533015-54ffb7d4-f086-11e7-945a-5708f6739d5d.png)\r\n\n",
  "hints_text": "I suppose these should be added, considering  JavaScript does have `Math.max` and `Math.min`. \r\n\r\nMeanwhile, there is a workaround: Max(x, y) is equivalent to `(x+y+Abs(x-y))/2`, and Abs is supported. \r\n```\r\n>>> jscode((1+y+Abs(1-y)) / 2)\r\n'(1/2)*y + (1/2)*Math.abs(y - 1) + 1/2'\r\n```\r\nSimilarly, Min(x, y) is equivalent to (x+y-Abs(x-y))/2.\r\n  ",
  "created_at": "2018-01-05T02:48:34Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_rcode_functions\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_rcode_sqrt\", \"test_rcode_Pow\", \"test_rcode_Max\", \"test_rcode_constants_mathh\", \"test_rcode_constants_other\", \"test_rcode_Rational\", \"test_rcode_Integer\", \"test_rcode_exceptions\", \"test_rcode_user_functions\", \"test_rcode_boolean\", \"test_rcode_Relational\", \"test_rcode_Piecewise\", \"test_rcode_sinc\", \"test_rcode_Piecewise_deep\", \"test_rcode_ITE\", \"test_rcode_settings\", \"test_dereference_printing\", \"test_Matrix_printing\", \"test_rcode_sgn\", \"test_rcode_Assignment\", \"test_rcode_For\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.088292",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}