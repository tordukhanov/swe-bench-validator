{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10495",
  "base_commit": "d6aa098dadc5eddca5287e823cacef474ac0d23f",
  "patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -516,6 +516,15 @@ def check_array(array, accept_sparse=False, dtype=\"numeric\", order=None,\n             # To ensure that array flags are maintained\n             array = np.array(array, dtype=dtype, order=order, copy=copy)\n \n+        # in the future np.flexible dtypes will be handled like object dtypes\n+        if dtype_numeric and np.issubdtype(array.dtype, np.flexible):\n+            warnings.warn(\n+                \"Beginning in version 0.22, arrays of strings will be \"\n+                \"interpreted as decimal numbers if parameter 'dtype' is \"\n+                \"'numeric'. It is recommended that you convert the array to \"\n+                \"type np.float64 before passing it to check_array.\",\n+                FutureWarning)\n+\n         # make sure we actually converted to numeric:\n         if dtype_numeric and array.dtype.kind == \"O\":\n             array = array.astype(np.float64)\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_validation.py b/sklearn/utils/tests/test_validation.py\n--- a/sklearn/utils/tests/test_validation.py\n+++ b/sklearn/utils/tests/test_validation.py\n@@ -285,6 +285,42 @@ def test_check_array():\n     result = check_array(X_no_array)\n     assert_true(isinstance(result, np.ndarray))\n \n+    # deprecation warning if string-like array with dtype=\"numeric\"\n+    X_str = [['a', 'b'], ['c', 'd']]\n+    assert_warns_message(\n+        FutureWarning,\n+        \"arrays of strings will be interpreted as decimal numbers if \"\n+        \"parameter 'dtype' is 'numeric'. It is recommended that you convert \"\n+        \"the array to type np.float64 before passing it to check_array.\",\n+        check_array, X_str, \"numeric\")\n+    assert_warns_message(\n+        FutureWarning,\n+        \"arrays of strings will be interpreted as decimal numbers if \"\n+        \"parameter 'dtype' is 'numeric'. It is recommended that you convert \"\n+        \"the array to type np.float64 before passing it to check_array.\",\n+        check_array, np.array(X_str, dtype='U'), \"numeric\")\n+    assert_warns_message(\n+        FutureWarning,\n+        \"arrays of strings will be interpreted as decimal numbers if \"\n+        \"parameter 'dtype' is 'numeric'. It is recommended that you convert \"\n+        \"the array to type np.float64 before passing it to check_array.\",\n+        check_array, np.array(X_str, dtype='S'), \"numeric\")\n+\n+    # deprecation warning if byte-like array with dtype=\"numeric\"\n+    X_bytes = [[b'a', b'b'], [b'c', b'd']]\n+    assert_warns_message(\n+        FutureWarning,\n+        \"arrays of strings will be interpreted as decimal numbers if \"\n+        \"parameter 'dtype' is 'numeric'. It is recommended that you convert \"\n+        \"the array to type np.float64 before passing it to check_array.\",\n+        check_array, X_bytes, \"numeric\")\n+    assert_warns_message(\n+        FutureWarning,\n+        \"arrays of strings will be interpreted as decimal numbers if \"\n+        \"parameter 'dtype' is 'numeric'. It is recommended that you convert \"\n+        \"the array to type np.float64 before passing it to check_array.\",\n+        check_array, np.array(X_bytes, dtype='V1'), \"numeric\")\n+\n \n def test_check_array_pandas_dtype_object_conversion():\n     # test that data-frame like objects with dtype object\n",
  "problem_statement": "check_array(X, dtype='numeric') should fail if X has strings\nCurrently, dtype='numeric' is defined as \"dtype is preserved unless array.dtype is object\". This seems overly lenient and strange behaviour, as in #9342 where @qinhanmin2014 shows that `check_array(['a', 'b', 'c'], dtype='numeric')` works without error and produces an array of strings! This behaviour is not tested and it's hard to believe that it is useful and intended. Perhaps we need a deprecation cycle, but I think dtype='numeric' should raise an error, or attempt to coerce, if the data does not actually have a numeric, real-valued dtype. \ncheck_array(X, dtype='numeric') should fail if X has strings\nCurrently, dtype='numeric' is defined as \"dtype is preserved unless array.dtype is object\". This seems overly lenient and strange behaviour, as in #9342 where @qinhanmin2014 shows that `check_array(['a', 'b', 'c'], dtype='numeric')` works without error and produces an array of strings! This behaviour is not tested and it's hard to believe that it is useful and intended. Perhaps we need a deprecation cycle, but I think dtype='numeric' should raise an error, or attempt to coerce, if the data does not actually have a numeric, real-valued dtype. \n",
  "hints_text": "ping @jnothman \r\n\r\n> This seems overly lenient and strange behaviour, as in #9342 where @qinhanmin2014 shows that check_array(['a', 'b', 'c'], dtype='numeric') works without error and produces an array of strings!\r\n\r\nI think you mean #9835 (https://github.com/scikit-learn/scikit-learn/pull/9835#issuecomment-348069380) ?\r\n\r\nYes, from my perspective, if it is not intended, it seems a bug.\nit seems memorising four digit numbers is not my speciality\n\nFive now!\r\nAnd I'm not entirely sure what my intended behavior was, but I agree with your assessment. This should error on strings.\nI think, @amueller, for the next little while, the mere knowledge that a\nnumber has five digits leaves the first with distinctly low entropy\n\nWell, I guess it's one more bit, though ;)\n@jnothman I'd be happy to give this a go with some limited guidance if no one else is working on it already. Looks like the behavior you noted comes from [this line](https://github.com/scikit-learn/scikit-learn/blob/202b5321f1798c4980abf69ac8c0a0969f01a2ec/sklearn/utils/validation.py#L480), where we're checking the array against the numpy object type when we'd like to check it against string and unicode types as well -- the `[['a', 'b', 'c']]` list in your example appears to be cast to the numpy unicode array type in your example by the time it reaches that line. Sound right?\nI'd also be curious to hear what you had in mind in terms of longer term solution, i.e., what would replace `check_array` if deprecated?\r\n> Perhaps we need a deprecation cycle\nSomething like that. Basically if dtype_numeric and array.dtype is not an\nobject dtype or a numeric dtype, we should raise.\n\nOn 17 January 2018 at 13:17, Ryan <notifications@github.com> wrote:\n\n> @jnothman <https://github.com/jnothman> I'd be happy to give this a go\n> with some limited guidance if no one else is working on it already. Looks\n> like the behavior you noted comes from this line\n> <https://github.com/scikit-learn/scikit-learn/blob/202b5321f1798c4980abf69ac8c0a0969f01a2ec/sklearn/utils/validation.py#L480>,\n> where we're checking the array against the numpy object type when we'd like\n> to check it against string and unicode types as well -- the [['a', 'b',\n> 'c']] list in your example appears to be cast to the numpy unicode array\n> type in your example by the time it reaches that line. Sound right?\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/10229#issuecomment-358173231>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz69hcymywNoXaDwoNalOeRc93uF3Uks5tLVg8gaJpZM4QwJIl>\n> .\n>\n\nWe wouldn't deprecate `check_array` entirely, but we would warn for two releases that \"In the future, this data with dtype('Uxx') would be rejected because it is not of a numeric dtype.\"\nping @jnothman \r\n\r\n> This seems overly lenient and strange behaviour, as in #9342 where @qinhanmin2014 shows that check_array(['a', 'b', 'c'], dtype='numeric') works without error and produces an array of strings!\r\n\r\nI think you mean #9835 (https://github.com/scikit-learn/scikit-learn/pull/9835#issuecomment-348069380) ?\r\n\r\nYes, from my perspective, if it is not intended, it seems a bug.\nit seems memorising four digit numbers is not my speciality\n\nFive now!\r\nAnd I'm not entirely sure what my intended behavior was, but I agree with your assessment. This should error on strings.\nI think, @amueller, for the next little while, the mere knowledge that a\nnumber has five digits leaves the first with distinctly low entropy\n\nWell, I guess it's one more bit, though ;)\n@jnothman I'd be happy to give this a go with some limited guidance if no one else is working on it already. Looks like the behavior you noted comes from [this line](https://github.com/scikit-learn/scikit-learn/blob/202b5321f1798c4980abf69ac8c0a0969f01a2ec/sklearn/utils/validation.py#L480), where we're checking the array against the numpy object type when we'd like to check it against string and unicode types as well -- the `[['a', 'b', 'c']]` list in your example appears to be cast to the numpy unicode array type in your example by the time it reaches that line. Sound right?\nI'd also be curious to hear what you had in mind in terms of longer term solution, i.e., what would replace `check_array` if deprecated?\r\n> Perhaps we need a deprecation cycle\nSomething like that. Basically if dtype_numeric and array.dtype is not an\nobject dtype or a numeric dtype, we should raise.\n\nOn 17 January 2018 at 13:17, Ryan <notifications@github.com> wrote:\n\n> @jnothman <https://github.com/jnothman> I'd be happy to give this a go\n> with some limited guidance if no one else is working on it already. Looks\n> like the behavior you noted comes from this line\n> <https://github.com/scikit-learn/scikit-learn/blob/202b5321f1798c4980abf69ac8c0a0969f01a2ec/sklearn/utils/validation.py#L480>,\n> where we're checking the array against the numpy object type when we'd like\n> to check it against string and unicode types as well -- the [['a', 'b',\n> 'c']] list in your example appears to be cast to the numpy unicode array\n> type in your example by the time it reaches that line. Sound right?\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/10229#issuecomment-358173231>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz69hcymywNoXaDwoNalOeRc93uF3Uks5tLVg8gaJpZM4QwJIl>\n> .\n>\n\nWe wouldn't deprecate `check_array` entirely, but we would warn for two releases that \"In the future, this data with dtype('Uxx') would be rejected because it is not of a numeric dtype.\"",
  "created_at": "2018-01-18T03:11:24Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_validation.py::test_check_array\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_validation.py::test_as_float_array\", \"sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X0]\", \"sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X1]\", \"sklearn/utils/tests/test_validation.py::test_np_matrix\", \"sklearn/utils/tests/test_validation.py::test_memmap\", \"sklearn/utils/tests/test_validation.py::test_ordering\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-inf-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-allow-nan]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-inf-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-allow-nan]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_pandas_dtype_object_conversion\", \"sklearn/utils/tests/test_validation.py::test_check_array_on_mock_dataframe\", \"sklearn/utils/tests/test_validation.py::test_check_array_dtype_stability\", \"sklearn/utils/tests/test_validation.py::test_check_array_dtype_warning\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_type_exception\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_no_exception\", \"sklearn/utils/tests/test_validation.py::test_check_array_min_samples_and_features_messages\", \"sklearn/utils/tests/test_validation.py::test_check_array_complex_data_error\", \"sklearn/utils/tests/test_validation.py::test_has_fit_parameter\", \"sklearn/utils/tests/test_validation.py::test_check_symmetric\", \"sklearn/utils/tests/test_validation.py::test_check_is_fitted\", \"sklearn/utils/tests/test_validation.py::test_check_consistent_length\", \"sklearn/utils/tests/test_validation.py::test_check_dataframe_fit_attribute\", \"sklearn/utils/tests/test_validation.py::test_suppress_validation\", \"sklearn/utils/tests/test_validation.py::test_check_memory\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.952408",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}