{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-7052",
  "base_commit": "ddccd5c538220ab7b8fdab390c64e29be97ee00b",
  "patch": "diff --git a/xarray/core/alignment.py b/xarray/core/alignment.py\n--- a/xarray/core/alignment.py\n+++ b/xarray/core/alignment.py\n@@ -38,7 +38,7 @@\n if TYPE_CHECKING:\n     from .dataarray import DataArray\n     from .dataset import Dataset\n-    from .types import JoinOptions, T_DataArray, T_DataArrayOrSet, T_Dataset\n+    from .types import JoinOptions, T_DataArray, T_Dataset, T_DataWithCoords\n \n DataAlignable = TypeVar(\"DataAlignable\", bound=DataWithCoords)\n \n@@ -944,8 +944,8 @@ def _get_broadcast_dims_map_common_coords(args, exclude):\n \n \n def _broadcast_helper(\n-    arg: T_DataArrayOrSet, exclude, dims_map, common_coords\n-) -> T_DataArrayOrSet:\n+    arg: T_DataWithCoords, exclude, dims_map, common_coords\n+) -> T_DataWithCoords:\n \n     from .dataarray import DataArray\n     from .dataset import Dataset\n@@ -976,14 +976,16 @@ def _broadcast_dataset(ds: T_Dataset) -> T_Dataset:\n \n     # remove casts once https://github.com/python/mypy/issues/12800 is resolved\n     if isinstance(arg, DataArray):\n-        return cast(\"T_DataArrayOrSet\", _broadcast_array(arg))\n+        return cast(\"T_DataWithCoords\", _broadcast_array(arg))\n     elif isinstance(arg, Dataset):\n-        return cast(\"T_DataArrayOrSet\", _broadcast_dataset(arg))\n+        return cast(\"T_DataWithCoords\", _broadcast_dataset(arg))\n     else:\n         raise ValueError(\"all input must be Dataset or DataArray objects\")\n \n \n-def broadcast(*args, exclude=None):\n+# TODO: this typing is too restrictive since it cannot deal with mixed\n+# DataArray and Dataset types...? Is this a problem?\n+def broadcast(*args: T_DataWithCoords, exclude=None) -> tuple[T_DataWithCoords, ...]:\n     \"\"\"Explicitly broadcast any number of DataArray or Dataset objects against\n     one another.\n \ndiff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -22,7 +22,7 @@\n \n from ..coding.calendar_ops import convert_calendar, interp_calendar\n from ..coding.cftimeindex import CFTimeIndex\n-from ..plot.plot import _PlotMethods\n+from ..plot.accessor import DataArrayPlotAccessor\n from ..plot.utils import _get_units_from_attrs\n from . import alignment, computation, dtypes, indexing, ops, utils\n from ._reductions import DataArrayReductions\n@@ -4189,7 +4189,7 @@ def _inplace_binary_op(self: T_DataArray, other: Any, f: Callable) -> T_DataArra\n     def _copy_attrs_from(self, other: DataArray | Dataset | Variable) -> None:\n         self.attrs = other.attrs\n \n-    plot = utils.UncachedAccessor(_PlotMethods)\n+    plot = utils.UncachedAccessor(DataArrayPlotAccessor)\n \n     def _title_for_slice(self, truncate: int = 50) -> str:\n         \"\"\"\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -35,7 +35,7 @@\n \n from ..coding.calendar_ops import convert_calendar, interp_calendar\n from ..coding.cftimeindex import CFTimeIndex, _parse_array_of_cftime_strings\n-from ..plot.dataset_plot import _Dataset_PlotMethods\n+from ..plot.accessor import DatasetPlotAccessor\n from . import alignment\n from . import dtypes as xrdtypes\n from . import duck_array_ops, formatting, formatting_html, ops, utils\n@@ -7483,7 +7483,7 @@ def imag(self: T_Dataset) -> T_Dataset:\n         \"\"\"\n         return self.map(lambda x: x.imag, keep_attrs=True)\n \n-    plot = utils.UncachedAccessor(_Dataset_PlotMethods)\n+    plot = utils.UncachedAccessor(DatasetPlotAccessor)\n \n     def filter_by_attrs(self: T_Dataset, **kwargs) -> T_Dataset:\n         \"\"\"Returns a ``Dataset`` with variables that match specific conditions.\n@@ -8575,7 +8575,9 @@ def curvefit(\n             or not isinstance(coords, Iterable)\n         ):\n             coords = [coords]\n-        coords_ = [self[coord] if isinstance(coord, str) else coord for coord in coords]\n+        coords_: Sequence[DataArray] = [\n+            self[coord] if isinstance(coord, str) else coord for coord in coords\n+        ]\n \n         # Determine whether any coords are dims on self\n         for coord in coords_:\ndiff --git a/xarray/core/pycompat.py b/xarray/core/pycompat.py\n--- a/xarray/core/pycompat.py\n+++ b/xarray/core/pycompat.py\n@@ -1,6 +1,7 @@\n from __future__ import annotations\n \n from importlib import import_module\n+from typing import Any, Literal\n \n import numpy as np\n from packaging.version import Version\n@@ -9,6 +10,8 @@\n \n integer_types = (int, np.integer)\n \n+ModType = Literal[\"dask\", \"pint\", \"cupy\", \"sparse\"]\n+\n \n class DuckArrayModule:\n     \"\"\"\n@@ -18,7 +21,12 @@ class DuckArrayModule:\n     https://github.com/pydata/xarray/pull/5561#discussion_r664815718\n     \"\"\"\n \n-    def __init__(self, mod):\n+    module: ModType | None\n+    version: Version\n+    type: tuple[type[Any]]  # TODO: improve this? maybe Generic\n+    available: bool\n+\n+    def __init__(self, mod: ModType) -> None:\n         try:\n             duck_array_module = import_module(mod)\n             duck_array_version = Version(duck_array_module.__version__)\ndiff --git a/xarray/core/types.py b/xarray/core/types.py\n--- a/xarray/core/types.py\n+++ b/xarray/core/types.py\n@@ -162,7 +162,10 @@ def dtype(self) -> np.dtype:\n CoarsenBoundaryOptions = Literal[\"exact\", \"trim\", \"pad\"]\n SideOptions = Literal[\"left\", \"right\"]\n \n+ScaleOptions = Literal[\"linear\", \"symlog\", \"log\", \"logit\", None]\n HueStyleOptions = Literal[\"continuous\", \"discrete\", None]\n+AspectOptions = Union[Literal[\"auto\", \"equal\"], float, None]\n+ExtendOptions = Literal[\"neither\", \"both\", \"min\", \"max\", None]\n \n # TODO: Wait until mypy supports recursive objects in combination with typevars\n _T = TypeVar(\"_T\")\ndiff --git a/xarray/plot/__init__.py b/xarray/plot/__init__.py\n--- a/xarray/plot/__init__.py\n+++ b/xarray/plot/__init__.py\n@@ -1,6 +1,24 @@\n+\"\"\"\n+Use this module directly:\n+    import xarray.plot as xplt\n+\n+Or use the methods on a DataArray or Dataset:\n+    DataArray.plot._____\n+    Dataset.plot._____\n+\"\"\"\n+from .dataarray_plot import (\n+    contour,\n+    contourf,\n+    hist,\n+    imshow,\n+    line,\n+    pcolormesh,\n+    plot,\n+    step,\n+    surface,\n+)\n from .dataset_plot import scatter\n from .facetgrid import FacetGrid\n-from .plot import contour, contourf, hist, imshow, line, pcolormesh, plot, step, surface\n \n __all__ = [\n     \"plot\",\ndiff --git a/xarray/plot/accessor.py b/xarray/plot/accessor.py\nnew file mode 100644\n--- /dev/null\n+++ b/xarray/plot/accessor.py\n@@ -0,0 +1,1301 @@\n+from __future__ import annotations\n+\n+import functools\n+from typing import TYPE_CHECKING, Any, Hashable, Iterable, Literal, NoReturn, overload\n+\n+import numpy as np\n+\n+# Accessor methods have the same name as plotting methods, so we need a different namespace\n+from . import dataarray_plot, dataset_plot\n+\n+if TYPE_CHECKING:\n+    from matplotlib.axes import Axes\n+    from matplotlib.collections import LineCollection, PathCollection, QuadMesh\n+    from matplotlib.colors import Normalize\n+    from matplotlib.container import BarContainer\n+    from matplotlib.contour import QuadContourSet\n+    from matplotlib.image import AxesImage\n+    from matplotlib.quiver import Quiver\n+    from mpl_toolkits.mplot3d.art3d import Line3D, Poly3DCollection\n+    from numpy.typing import ArrayLike\n+\n+    from ..core.dataarray import DataArray\n+    from ..core.dataset import Dataset\n+    from ..core.types import AspectOptions, HueStyleOptions, ScaleOptions\n+    from .facetgrid import FacetGrid\n+\n+\n+class DataArrayPlotAccessor:\n+    \"\"\"\n+    Enables use of xarray.plot functions as attributes on a DataArray.\n+    For example, DataArray.plot.imshow\n+    \"\"\"\n+\n+    _da: DataArray\n+\n+    __slots__ = (\"_da\",)\n+    __doc__ = dataarray_plot.plot.__doc__\n+\n+    def __init__(self, darray: DataArray) -> None:\n+        self._da = darray\n+\n+    # Should return Any such that the user does not run into problems\n+    # with the many possible return values\n+    @functools.wraps(dataarray_plot.plot, assigned=(\"__doc__\", \"__annotations__\"))\n+    def __call__(self, **kwargs) -> Any:\n+        return dataarray_plot.plot(self._da, **kwargs)\n+\n+    @functools.wraps(dataarray_plot.hist)\n+    def hist(self, *args, **kwargs) -> tuple[np.ndarray, np.ndarray, BarContainer]:\n+        return dataarray_plot.hist(self._da, *args, **kwargs)\n+\n+    @overload\n+    def line(  # type: ignore[misc]  # None is hashable :(\n+        self,\n+        *args: Any,\n+        row: None = None,  # no wrap -> primitive\n+        col: None = None,  # no wrap -> primitive\n+        figsize: Iterable[float] | None = None,\n+        aspect: AspectOptions = None,\n+        size: float | None = None,\n+        ax: Axes | None = None,\n+        hue: Hashable | None = None,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        xincrease: bool | None = None,\n+        yincrease: bool | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        add_legend: bool = True,\n+        _labels: bool = True,\n+        **kwargs: Any,\n+    ) -> list[Line3D]:\n+        ...\n+\n+    @overload\n+    def line(\n+        self,\n+        *args: Any,\n+        row: Hashable,  # wrap -> FacetGrid\n+        col: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        aspect: AspectOptions = None,\n+        size: float | None = None,\n+        ax: Axes | None = None,\n+        hue: Hashable | None = None,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        xincrease: bool | None = None,\n+        yincrease: bool | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        add_legend: bool = True,\n+        _labels: bool = True,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @overload\n+    def line(\n+        self,\n+        *args: Any,\n+        row: Hashable | None = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        figsize: Iterable[float] | None = None,\n+        aspect: AspectOptions = None,\n+        size: float | None = None,\n+        ax: Axes | None = None,\n+        hue: Hashable | None = None,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        xincrease: bool | None = None,\n+        yincrease: bool | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        add_legend: bool = True,\n+        _labels: bool = True,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @functools.wraps(dataarray_plot.line)\n+    def line(self, *args, **kwargs) -> list[Line3D] | FacetGrid[DataArray]:\n+        return dataarray_plot.line(self._da, *args, **kwargs)\n+\n+    @overload\n+    def step(  # type: ignore[misc]  # None is hashable :(\n+        self,\n+        *args: Any,\n+        where: Literal[\"pre\", \"post\", \"mid\"] = \"pre\",\n+        drawstyle: str | None = None,\n+        ds: str | None = None,\n+        row: None = None,  # no wrap -> primitive\n+        col: None = None,  # no wrap -> primitive\n+        **kwargs: Any,\n+    ) -> list[Line3D]:\n+        ...\n+\n+    @overload\n+    def step(\n+        self,\n+        *args: Any,\n+        where: Literal[\"pre\", \"post\", \"mid\"] = \"pre\",\n+        drawstyle: str | None = None,\n+        ds: str | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        col: Hashable | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @overload\n+    def step(\n+        self,\n+        *args: Any,\n+        where: Literal[\"pre\", \"post\", \"mid\"] = \"pre\",\n+        drawstyle: str | None = None,\n+        ds: str | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @functools.wraps(dataarray_plot.step)\n+    def step(self, *args, **kwargs) -> list[Line3D] | FacetGrid[DataArray]:\n+        return dataarray_plot.step(self._da, *args, **kwargs)\n+\n+    @overload\n+    def scatter(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        z: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        markersize: Hashable | None = None,\n+        linewidth: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: float | None = None,\n+        ax: Axes | None = None,\n+        row: None = None,  # no wrap -> primitive\n+        col: None = None,  # no wrap -> primitive\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_legend: bool | None = None,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool | Iterable[bool] = True,\n+        add_title: bool = True,\n+        subplot_kws: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        cmap=None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        extend=None,\n+        levels=None,\n+        **kwargs,\n+    ) -> PathCollection:\n+        ...\n+\n+    @overload\n+    def scatter(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        z: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        markersize: Hashable | None = None,\n+        linewidth: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: float | None = None,\n+        ax: Axes | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_legend: bool | None = None,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool | Iterable[bool] = True,\n+        add_title: bool = True,\n+        subplot_kws: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        cmap=None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        extend=None,\n+        levels=None,\n+        **kwargs,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @overload\n+    def scatter(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        z: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        markersize: Hashable | None = None,\n+        linewidth: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: float | None = None,\n+        ax: Axes | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_legend: bool | None = None,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool | Iterable[bool] = True,\n+        add_title: bool = True,\n+        subplot_kws: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        cmap=None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        extend=None,\n+        levels=None,\n+        **kwargs,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @functools.wraps(dataarray_plot.scatter)\n+    def scatter(self, *args, **kwargs):\n+        return dataarray_plot.scatter(self._da, *args, **kwargs)\n+\n+    @overload\n+    def imshow(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: None = None,  # no wrap -> primitive\n+        col: None = None,  # no wrap -> primitive\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> AxesImage:\n+        ...\n+\n+    @overload\n+    def imshow(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @overload\n+    def imshow(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @functools.wraps(dataarray_plot.imshow)\n+    def imshow(self, *args, **kwargs) -> AxesImage:\n+        return dataarray_plot.imshow(self._da, *args, **kwargs)\n+\n+    @overload\n+    def contour(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: None = None,  # no wrap -> primitive\n+        col: None = None,  # no wrap -> primitive\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> QuadContourSet:\n+        ...\n+\n+    @overload\n+    def contour(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @overload\n+    def contour(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @functools.wraps(dataarray_plot.contour)\n+    def contour(self, *args, **kwargs) -> QuadContourSet:\n+        return dataarray_plot.contour(self._da, *args, **kwargs)\n+\n+    @overload\n+    def contourf(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: None = None,  # no wrap -> primitive\n+        col: None = None,  # no wrap -> primitive\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> QuadContourSet:\n+        ...\n+\n+    @overload\n+    def contourf(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @overload\n+    def contourf(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid:\n+        ...\n+\n+    @functools.wraps(dataarray_plot.contourf)\n+    def contourf(self, *args, **kwargs) -> QuadContourSet:\n+        return dataarray_plot.contourf(self._da, *args, **kwargs)\n+\n+    @overload\n+    def pcolormesh(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: None = None,  # no wrap -> primitive\n+        col: None = None,  # no wrap -> primitive\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> QuadMesh:\n+        ...\n+\n+    @overload\n+    def pcolormesh(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid:\n+        ...\n+\n+    @overload\n+    def pcolormesh(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid:\n+        ...\n+\n+    @functools.wraps(dataarray_plot.pcolormesh)\n+    def pcolormesh(self, *args, **kwargs) -> QuadMesh:\n+        return dataarray_plot.pcolormesh(self._da, *args, **kwargs)\n+\n+    @overload\n+    def surface(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: None = None,  # no wrap -> primitive\n+        col: None = None,  # no wrap -> primitive\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> Poly3DCollection:\n+        ...\n+\n+    @overload\n+    def surface(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid:\n+        ...\n+\n+    @overload\n+    def surface(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        ax: Axes | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap=None,\n+        center=None,\n+        robust: bool = False,\n+        extend=None,\n+        levels=None,\n+        infer_intervals=None,\n+        colors=None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> FacetGrid:\n+        ...\n+\n+    @functools.wraps(dataarray_plot.surface)\n+    def surface(self, *args, **kwargs) -> Poly3DCollection:\n+        return dataarray_plot.surface(self._da, *args, **kwargs)\n+\n+\n+class DatasetPlotAccessor:\n+    \"\"\"\n+    Enables use of xarray.plot functions as attributes on a Dataset.\n+    For example, Dataset.plot.scatter\n+    \"\"\"\n+\n+    _ds: Dataset\n+    __slots__ = (\"_ds\",)\n+\n+    def __init__(self, dataset: Dataset) -> None:\n+        self._ds = dataset\n+\n+    def __call__(self, *args, **kwargs) -> NoReturn:\n+        raise ValueError(\n+            \"Dataset.plot cannot be called directly. Use \"\n+            \"an explicit plot method, e.g. ds.plot.scatter(...)\"\n+        )\n+\n+    @overload\n+    def scatter(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        z: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        markersize: Hashable | None = None,\n+        linewidth: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: float | None = None,\n+        ax: Axes | None = None,\n+        row: None = None,  # no wrap -> primitive\n+        col: None = None,  # no wrap -> primitive\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_legend: bool | None = None,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool | Iterable[bool] = True,\n+        add_title: bool = True,\n+        subplot_kws: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        cmap=None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        extend=None,\n+        levels=None,\n+        **kwargs: Any,\n+    ) -> PathCollection:\n+        ...\n+\n+    @overload\n+    def scatter(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        z: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        markersize: Hashable | None = None,\n+        linewidth: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: float | None = None,\n+        ax: Axes | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_legend: bool | None = None,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool | Iterable[bool] = True,\n+        add_title: bool = True,\n+        subplot_kws: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        cmap=None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        extend=None,\n+        levels=None,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @overload\n+    def scatter(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        z: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        markersize: Hashable | None = None,\n+        linewidth: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: float | None = None,\n+        ax: Axes | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_legend: bool | None = None,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool | Iterable[bool] = True,\n+        add_title: bool = True,\n+        subplot_kws: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        cmap=None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        extend=None,\n+        levels=None,\n+        **kwargs: Any,\n+    ) -> FacetGrid[DataArray]:\n+        ...\n+\n+    @functools.wraps(dataset_plot.scatter)\n+    def scatter(self, *args, **kwargs) -> PathCollection | FacetGrid[DataArray]:\n+        return dataset_plot.scatter(self._ds, *args, **kwargs)\n+\n+    @overload\n+    def quiver(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        u: Hashable | None = None,\n+        v: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        col: None = None,  # no wrap -> primitive\n+        row: None = None,  # no wrap -> primitive\n+        ax: Axes | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        col_wrap: int | None = None,\n+        sharex: bool = True,\n+        sharey: bool = True,\n+        aspect: AspectOptions = None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        add_guide: bool | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        infer_intervals=None,\n+        center=None,\n+        levels=None,\n+        robust: bool | None = None,\n+        colors=None,\n+        extend=None,\n+        cmap=None,\n+        **kwargs: Any,\n+    ) -> Quiver:\n+        ...\n+\n+    @overload\n+    def quiver(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        u: Hashable | None = None,\n+        v: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        row: Hashable | None = None,\n+        ax: Axes | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        col_wrap: int | None = None,\n+        sharex: bool = True,\n+        sharey: bool = True,\n+        aspect: AspectOptions = None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        add_guide: bool | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        infer_intervals=None,\n+        center=None,\n+        levels=None,\n+        robust: bool | None = None,\n+        colors=None,\n+        extend=None,\n+        cmap=None,\n+        **kwargs: Any,\n+    ) -> FacetGrid:\n+        ...\n+\n+    @overload\n+    def quiver(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        u: Hashable | None = None,\n+        v: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        col: Hashable | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        ax: Axes | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        col_wrap: int | None = None,\n+        sharex: bool = True,\n+        sharey: bool = True,\n+        aspect: AspectOptions = None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        add_guide: bool | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        infer_intervals=None,\n+        center=None,\n+        levels=None,\n+        robust: bool | None = None,\n+        colors=None,\n+        extend=None,\n+        cmap=None,\n+        **kwargs: Any,\n+    ) -> FacetGrid:\n+        ...\n+\n+    @functools.wraps(dataset_plot.quiver)\n+    def quiver(self, *args, **kwargs) -> Quiver | FacetGrid:\n+        return dataset_plot.quiver(self._ds, *args, **kwargs)\n+\n+    @overload\n+    def streamplot(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        u: Hashable | None = None,\n+        v: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        col: None = None,  # no wrap -> primitive\n+        row: None = None,  # no wrap -> primitive\n+        ax: Axes | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        col_wrap: int | None = None,\n+        sharex: bool = True,\n+        sharey: bool = True,\n+        aspect: AspectOptions = None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        add_guide: bool | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        infer_intervals=None,\n+        center=None,\n+        levels=None,\n+        robust: bool | None = None,\n+        colors=None,\n+        extend=None,\n+        cmap=None,\n+        **kwargs: Any,\n+    ) -> LineCollection:\n+        ...\n+\n+    @overload\n+    def streamplot(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        u: Hashable | None = None,\n+        v: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        col: Hashable,  # wrap -> FacetGrid\n+        row: Hashable | None = None,\n+        ax: Axes | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        col_wrap: int | None = None,\n+        sharex: bool = True,\n+        sharey: bool = True,\n+        aspect: AspectOptions = None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        add_guide: bool | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        infer_intervals=None,\n+        center=None,\n+        levels=None,\n+        robust: bool | None = None,\n+        colors=None,\n+        extend=None,\n+        cmap=None,\n+        **kwargs: Any,\n+    ) -> FacetGrid:\n+        ...\n+\n+    @overload\n+    def streamplot(\n+        self,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        u: Hashable | None = None,\n+        v: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        col: Hashable | None = None,\n+        row: Hashable,  # wrap -> FacetGrid\n+        ax: Axes | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        col_wrap: int | None = None,\n+        sharex: bool = True,\n+        sharey: bool = True,\n+        aspect: AspectOptions = None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        add_guide: bool | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        infer_intervals=None,\n+        center=None,\n+        levels=None,\n+        robust: bool | None = None,\n+        colors=None,\n+        extend=None,\n+        cmap=None,\n+        **kwargs: Any,\n+    ) -> FacetGrid:\n+        ...\n+\n+    @functools.wraps(dataset_plot.streamplot)\n+    def streamplot(self, *args, **kwargs) -> LineCollection | FacetGrid:\n+        return dataset_plot.streamplot(self._ds, *args, **kwargs)\ndiff --git a/xarray/plot/dataarray_plot.py b/xarray/plot/dataarray_plot.py\nnew file mode 100644\n--- /dev/null\n+++ b/xarray/plot/dataarray_plot.py\n@@ -0,0 +1,2456 @@\n+from __future__ import annotations\n+\n+import functools\n+import warnings\n+from typing import (\n+    TYPE_CHECKING,\n+    Any,\n+    Callable,\n+    Hashable,\n+    Iterable,\n+    Literal,\n+    MutableMapping,\n+    overload,\n+)\n+\n+import numpy as np\n+import pandas as pd\n+from packaging.version import Version\n+\n+from ..core.alignment import broadcast\n+from ..core.concat import concat\n+from .facetgrid import _easy_facetgrid\n+from .utils import (\n+    _LINEWIDTH_RANGE,\n+    _MARKERSIZE_RANGE,\n+    _add_colorbar,\n+    _add_legend,\n+    _assert_valid_xy,\n+    _determine_guide,\n+    _ensure_plottable,\n+    _infer_interval_breaks,\n+    _infer_xy_labels,\n+    _Normalize,\n+    _process_cmap_cbar_kwargs,\n+    _rescale_imshow_rgb,\n+    _resolve_intervals_1dplot,\n+    _resolve_intervals_2dplot,\n+    _update_axes,\n+    get_axis,\n+    import_matplotlib_pyplot,\n+    label_from_attrs,\n+)\n+\n+if TYPE_CHECKING:\n+    from matplotlib.axes import Axes\n+    from matplotlib.collections import PathCollection, QuadMesh\n+    from matplotlib.colors import Colormap, Normalize\n+    from matplotlib.container import BarContainer\n+    from matplotlib.contour import QuadContourSet\n+    from matplotlib.image import AxesImage\n+    from mpl_toolkits.mplot3d.art3d import Line3D, Poly3DCollection\n+    from numpy.typing import ArrayLike\n+\n+    from ..core.dataarray import DataArray\n+    from ..core.types import (\n+        AspectOptions,\n+        ExtendOptions,\n+        HueStyleOptions,\n+        ScaleOptions,\n+        T_DataArray,\n+    )\n+    from .facetgrid import FacetGrid\n+\n+\n+def _infer_line_data(\n+    darray: DataArray, x: Hashable | None, y: Hashable | None, hue: Hashable | None\n+) -> tuple[DataArray, DataArray, DataArray | None, str]:\n+\n+    ndims = len(darray.dims)\n+\n+    if x is not None and y is not None:\n+        raise ValueError(\"Cannot specify both x and y kwargs for line plots.\")\n+\n+    if x is not None:\n+        _assert_valid_xy(darray, x, \"x\")\n+\n+    if y is not None:\n+        _assert_valid_xy(darray, y, \"y\")\n+\n+    if ndims == 1:\n+        huename = None\n+        hueplt = None\n+        huelabel = \"\"\n+\n+        if x is not None:\n+            xplt = darray[x]\n+            yplt = darray\n+\n+        elif y is not None:\n+            xplt = darray\n+            yplt = darray[y]\n+\n+        else:  # Both x & y are None\n+            dim = darray.dims[0]\n+            xplt = darray[dim]\n+            yplt = darray\n+\n+    else:\n+        if x is None and y is None and hue is None:\n+            raise ValueError(\"For 2D inputs, please specify either hue, x or y.\")\n+\n+        if y is None:\n+            if hue is not None:\n+                _assert_valid_xy(darray, hue, \"hue\")\n+            xname, huename = _infer_xy_labels(darray=darray, x=x, y=hue)\n+            xplt = darray[xname]\n+            if xplt.ndim > 1:\n+                if huename in darray.dims:\n+                    otherindex = 1 if darray.dims.index(huename) == 0 else 0\n+                    otherdim = darray.dims[otherindex]\n+                    yplt = darray.transpose(otherdim, huename, transpose_coords=False)\n+                    xplt = xplt.transpose(otherdim, huename, transpose_coords=False)\n+                else:\n+                    raise ValueError(\n+                        \"For 2D inputs, hue must be a dimension\"\n+                        \" i.e. one of \" + repr(darray.dims)\n+                    )\n+\n+            else:\n+                (xdim,) = darray[xname].dims\n+                (huedim,) = darray[huename].dims\n+                yplt = darray.transpose(xdim, huedim)\n+\n+        else:\n+            yname, huename = _infer_xy_labels(darray=darray, x=y, y=hue)\n+            yplt = darray[yname]\n+            if yplt.ndim > 1:\n+                if huename in darray.dims:\n+                    otherindex = 1 if darray.dims.index(huename) == 0 else 0\n+                    otherdim = darray.dims[otherindex]\n+                    xplt = darray.transpose(otherdim, huename, transpose_coords=False)\n+                    yplt = yplt.transpose(otherdim, huename, transpose_coords=False)\n+                else:\n+                    raise ValueError(\n+                        \"For 2D inputs, hue must be a dimension\"\n+                        \" i.e. one of \" + repr(darray.dims)\n+                    )\n+\n+            else:\n+                (ydim,) = darray[yname].dims\n+                (huedim,) = darray[huename].dims\n+                xplt = darray.transpose(ydim, huedim)\n+\n+        huelabel = label_from_attrs(darray[huename])\n+        hueplt = darray[huename]\n+\n+    return xplt, yplt, hueplt, huelabel\n+\n+\n+def _infer_plot_dims(\n+    darray: DataArray,\n+    dims_plot: MutableMapping[str, Hashable],\n+    default_guess: Iterable[str] = (\"x\", \"hue\", \"size\"),\n+) -> MutableMapping[str, Hashable]:\n+    \"\"\"\n+    Guess what dims to plot if some of the values in dims_plot are None which\n+    happens when the user has not defined all available ways of visualizing\n+    the data.\n+\n+    Parameters\n+    ----------\n+    darray : DataArray\n+        The DataArray to check.\n+    dims_plot : T_DimsPlot\n+        Dims defined by the user to plot.\n+    default_guess : Iterable[str], optional\n+        Default values and order to retrieve dims if values in dims_plot is\n+        missing, default: (\"x\", \"hue\", \"size\").\n+    \"\"\"\n+    dims_plot_exist = {k: v for k, v in dims_plot.items() if v is not None}\n+    dims_avail = tuple(v for v in darray.dims if v not in dims_plot_exist.values())\n+\n+    # If dims_plot[k] isn't defined then fill with one of the available dims:\n+    for k, v in zip(default_guess, dims_avail):\n+        if dims_plot.get(k, None) is None:\n+            dims_plot[k] = v\n+\n+    for k, v in dims_plot.items():\n+        _assert_valid_xy(darray, v, k)\n+\n+    return dims_plot\n+\n+\n+def _infer_line_data2(\n+    darray: T_DataArray,\n+    dims_plot: MutableMapping[str, Hashable],\n+    plotfunc_name: None | str = None,\n+) -> dict[str, T_DataArray]:\n+    # Guess what dims to use if some of the values in plot_dims are None:\n+    dims_plot = _infer_plot_dims(darray, dims_plot)\n+\n+    # If there are more than 1 dimension in the array than stack all the\n+    # dimensions so the plotter can plot anything:\n+    if darray.ndim > 1:\n+        # When stacking dims the lines will continue connecting. For floats\n+        # this can be solved by adding a nan element inbetween the flattening\n+        # points:\n+        dims_T = []\n+        if np.issubdtype(darray.dtype, np.floating):\n+            for v in [\"z\", \"x\"]:\n+                dim = dims_plot.get(v, None)\n+                if (dim is not None) and (dim in darray.dims):\n+                    darray_nan = np.nan * darray.isel({dim: -1})\n+                    darray = concat([darray, darray_nan], dim=dim)\n+                    dims_T.append(dims_plot[v])\n+\n+        # Lines should never connect to the same coordinate when stacked,\n+        # transpose to avoid this as much as possible:\n+        darray = darray.transpose(..., *dims_T)\n+\n+        # Array is now ready to be stacked:\n+        darray = darray.stack(_stacked_dim=darray.dims)\n+\n+    # Broadcast together all the chosen variables:\n+    out = dict(y=darray)\n+    out.update({k: darray[v] for k, v in dims_plot.items() if v is not None})\n+    out = dict(zip(out.keys(), broadcast(*(out.values()))))\n+\n+    return out\n+\n+\n+# return type is Any due to the many different possibilities\n+def plot(\n+    darray: DataArray,\n+    *,\n+    row: Hashable | None = None,\n+    col: Hashable | None = None,\n+    col_wrap: int | None = None,\n+    ax: Axes | None = None,\n+    hue: Hashable | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    **kwargs: Any,\n+) -> Any:\n+    \"\"\"\n+    Default plot of DataArray using :py:mod:`matplotlib:matplotlib.pyplot`.\n+\n+    Calls xarray plotting function based on the dimensions of\n+    the squeezed DataArray.\n+\n+    =============== ===========================\n+    Dimensions      Plotting function\n+    =============== ===========================\n+    1               :py:func:`xarray.plot.line`\n+    2               :py:func:`xarray.plot.pcolormesh`\n+    Anything else   :py:func:`xarray.plot.hist`\n+    =============== ===========================\n+\n+    Parameters\n+    ----------\n+    darray : DataArray\n+    row : Hashable or None, optional\n+        If passed, make row faceted plots on this dimension name.\n+    col : Hashable or None, optional\n+        If passed, make column faceted plots on this dimension name.\n+    col_wrap : int or None, optional\n+        Use together with ``col`` to wrap faceted plots.\n+    ax : matplotlib axes object, optional\n+        Axes on which to plot. By default, use the current axes.\n+        Mutually exclusive with ``size``, ``figsize`` and facets.\n+    hue : Hashable or None, optional\n+        If passed, make faceted line plots with hue on this dimension name.\n+    subplot_kws : dict, optional\n+        Dictionary of keyword arguments for Matplotlib subplots\n+        (see :py:meth:`matplotlib:matplotlib.figure.Figure.add_subplot`).\n+    **kwargs : optional\n+        Additional keyword arguments for Matplotlib.\n+\n+    See Also\n+    --------\n+    xarray.DataArray.squeeze\n+    \"\"\"\n+    darray = darray.squeeze().compute()\n+\n+    plot_dims = set(darray.dims)\n+    plot_dims.discard(row)\n+    plot_dims.discard(col)\n+    plot_dims.discard(hue)\n+\n+    ndims = len(plot_dims)\n+\n+    plotfunc: Callable\n+    if ndims in [1, 2]:\n+        if row or col:\n+            kwargs[\"subplot_kws\"] = subplot_kws\n+            kwargs[\"row\"] = row\n+            kwargs[\"col\"] = col\n+            kwargs[\"col_wrap\"] = col_wrap\n+        if ndims == 1:\n+            plotfunc = line\n+            kwargs[\"hue\"] = hue\n+        elif ndims == 2:\n+            if hue:\n+                plotfunc = line\n+                kwargs[\"hue\"] = hue\n+            else:\n+                plotfunc = pcolormesh\n+                kwargs[\"subplot_kws\"] = subplot_kws\n+    else:\n+        if row or col or hue:\n+            raise ValueError(\n+                \"Only 1d and 2d plots are supported for facets in xarray. \"\n+                \"See the package `Seaborn` for more options.\"\n+            )\n+        plotfunc = hist\n+\n+    kwargs[\"ax\"] = ax\n+\n+    return plotfunc(darray, **kwargs)\n+\n+\n+@overload\n+def line(  # type: ignore[misc]  # None is hashable :(\n+    darray: DataArray,\n+    *args: Any,\n+    row: None = None,  # no wrap -> primitive\n+    col: None = None,  # no wrap -> primitive\n+    figsize: Iterable[float] | None = None,\n+    aspect: AspectOptions = None,\n+    size: float | None = None,\n+    ax: Axes | None = None,\n+    hue: Hashable | None = None,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    xincrease: bool | None = None,\n+    yincrease: bool | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    add_legend: bool = True,\n+    _labels: bool = True,\n+    **kwargs: Any,\n+) -> list[Line3D]:\n+    ...\n+\n+\n+@overload\n+def line(\n+    darray,\n+    *args: Any,\n+    row: Hashable,  # wrap -> FacetGrid\n+    col: Hashable | None = None,\n+    figsize: Iterable[float] | None = None,\n+    aspect: AspectOptions = None,\n+    size: float | None = None,\n+    ax: Axes | None = None,\n+    hue: Hashable | None = None,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    xincrease: bool | None = None,\n+    yincrease: bool | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    add_legend: bool = True,\n+    _labels: bool = True,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@overload\n+def line(\n+    darray,\n+    *args: Any,\n+    row: Hashable | None = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    figsize: Iterable[float] | None = None,\n+    aspect: AspectOptions = None,\n+    size: float | None = None,\n+    ax: Axes | None = None,\n+    hue: Hashable | None = None,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    xincrease: bool | None = None,\n+    yincrease: bool | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    add_legend: bool = True,\n+    _labels: bool = True,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+# This function signature should not change so that it can use\n+# matplotlib format strings\n+def line(\n+    darray: DataArray,\n+    *args: Any,\n+    row: Hashable | None = None,\n+    col: Hashable | None = None,\n+    figsize: Iterable[float] | None = None,\n+    aspect: AspectOptions = None,\n+    size: float | None = None,\n+    ax: Axes | None = None,\n+    hue: Hashable | None = None,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    xincrease: bool | None = None,\n+    yincrease: bool | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    add_legend: bool = True,\n+    _labels: bool = True,\n+    **kwargs: Any,\n+) -> list[Line3D] | FacetGrid[DataArray]:\n+    \"\"\"\n+    Line plot of DataArray values.\n+\n+    Wraps :py:func:`matplotlib:matplotlib.pyplot.plot`.\n+\n+    Parameters\n+    ----------\n+    darray : DataArray\n+        Either 1D or 2D. If 2D, one of ``hue``, ``x`` or ``y`` must be provided.\n+    row : Hashable, optional\n+        If passed, make row faceted plots on this dimension name.\n+    col : Hashable, optional\n+        If passed, make column faceted plots on this dimension name.\n+    figsize : tuple, optional\n+        A tuple (width, height) of the figure in inches.\n+        Mutually exclusive with ``size`` and ``ax``.\n+    aspect : \"auto\", \"equal\", scalar or None, optional\n+        Aspect ratio of plot, so that ``aspect * size`` gives the *width* in\n+        inches. Only used if a ``size`` is provided.\n+    size : scalar, optional\n+        If provided, create a new figure for the plot with the given size:\n+        *height* (in inches) of each plot. See also: ``aspect``.\n+    ax : matplotlib axes object, optional\n+        Axes on which to plot. By default, the current is used.\n+        Mutually exclusive with ``size`` and ``figsize``.\n+    hue : Hashable, optional\n+        Dimension or coordinate for which you want multiple lines plotted.\n+        If plotting against a 2D coordinate, ``hue`` must be a dimension.\n+    x, y : Hashable, optional\n+        Dimension, coordinate or multi-index level for *x*, *y* axis.\n+        Only one of these may be specified.\n+        The other will be used for values from the DataArray on which this\n+        plot method is called.\n+    xincrease : bool or None, optional\n+        Should the values on the *x* axis be increasing from left to right?\n+        if ``None``, use the default for the Matplotlib function.\n+    yincrease : bool or None, optional\n+        Should the values on the *y* axis be increasing from top to bottom?\n+        if ``None``, use the default for the Matplotlib function.\n+    xscale, yscale : {'linear', 'symlog', 'log', 'logit'}, optional\n+        Specifies scaling for the *x*- and *y*-axis, respectively.\n+    xticks, yticks : array-like, optional\n+        Specify tick locations for *x*- and *y*-axis.\n+    xlim, ylim : array-like, optional\n+        Specify *x*- and *y*-axis limits.\n+    add_legend : bool, default: True\n+        Add legend with *y* axis coordinates (2D inputs only).\n+    *args, **kwargs : optional\n+        Additional arguments to :py:func:`matplotlib:matplotlib.pyplot.plot`.\n+\n+    Returns\n+    -------\n+    primitive : list of Line3D or FacetGrid\n+        When either col or row is given, returns a FacetGrid, otherwise\n+        a list of matplotlib Line3D objects.\n+    \"\"\"\n+    # Handle facetgrids first\n+    if row or col:\n+        allargs = locals().copy()\n+        allargs.update(allargs.pop(\"kwargs\"))\n+        allargs.pop(\"darray\")\n+        return _easy_facetgrid(darray, line, kind=\"line\", **allargs)\n+\n+    ndims = len(darray.dims)\n+    if ndims > 2:\n+        raise ValueError(\n+            \"Line plots are for 1- or 2-dimensional DataArrays. \"\n+            \"Passed DataArray has {ndims} \"\n+            \"dimensions\".format(ndims=ndims)\n+        )\n+\n+    # The allargs dict passed to _easy_facetgrid above contains args\n+    if args == ():\n+        args = kwargs.pop(\"args\", ())\n+    else:\n+        assert \"args\" not in kwargs\n+\n+    ax = get_axis(figsize, size, aspect, ax)\n+    xplt, yplt, hueplt, hue_label = _infer_line_data(darray, x, y, hue)\n+\n+    # Remove pd.Intervals if contained in xplt.values and/or yplt.values.\n+    xplt_val, yplt_val, x_suffix, y_suffix, kwargs = _resolve_intervals_1dplot(\n+        xplt.to_numpy(), yplt.to_numpy(), kwargs\n+    )\n+    xlabel = label_from_attrs(xplt, extra=x_suffix)\n+    ylabel = label_from_attrs(yplt, extra=y_suffix)\n+\n+    _ensure_plottable(xplt_val, yplt_val)\n+\n+    primitive = ax.plot(xplt_val, yplt_val, *args, **kwargs)\n+\n+    if _labels:\n+        if xlabel is not None:\n+            ax.set_xlabel(xlabel)\n+\n+        if ylabel is not None:\n+            ax.set_ylabel(ylabel)\n+\n+        ax.set_title(darray._title_for_slice())\n+\n+    if darray.ndim == 2 and add_legend:\n+        assert hueplt is not None\n+        ax.legend(handles=primitive, labels=list(hueplt.to_numpy()), title=hue_label)\n+\n+    # Rotate dates on xlabels\n+    # Do this without calling autofmt_xdate so that x-axes ticks\n+    # on other subplots (if any) are not deleted.\n+    # https://stackoverflow.com/questions/17430105/autofmt-xdate-deletes-x-axis-labels-of-all-subplots\n+    if np.issubdtype(xplt.dtype, np.datetime64):\n+        for xlabels in ax.get_xticklabels():\n+            xlabels.set_rotation(30)\n+            xlabels.set_ha(\"right\")\n+\n+    _update_axes(ax, xincrease, yincrease, xscale, yscale, xticks, yticks, xlim, ylim)\n+\n+    return primitive\n+\n+\n+@overload\n+def step(  # type: ignore[misc]  # None is hashable :(\n+    darray: DataArray,\n+    *args: Any,\n+    where: Literal[\"pre\", \"post\", \"mid\"] = \"pre\",\n+    drawstyle: str | None = None,\n+    ds: str | None = None,\n+    row: None = None,  # no wrap -> primitive\n+    col: None = None,  # no wrap -> primitive\n+    **kwargs: Any,\n+) -> list[Line3D]:\n+    ...\n+\n+\n+@overload\n+def step(\n+    darray: DataArray,\n+    *args: Any,\n+    where: Literal[\"pre\", \"post\", \"mid\"] = \"pre\",\n+    drawstyle: str | None = None,\n+    ds: str | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    col: Hashable | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@overload\n+def step(\n+    darray: DataArray,\n+    *args: Any,\n+    where: Literal[\"pre\", \"post\", \"mid\"] = \"pre\",\n+    drawstyle: str | None = None,\n+    ds: str | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+def step(\n+    darray: DataArray,\n+    *args: Any,\n+    where: Literal[\"pre\", \"post\", \"mid\"] = \"pre\",\n+    drawstyle: str | None = None,\n+    ds: str | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable | None = None,\n+    **kwargs: Any,\n+) -> list[Line3D] | FacetGrid[DataArray]:\n+    \"\"\"\n+    Step plot of DataArray values.\n+\n+    Similar to :py:func:`matplotlib:matplotlib.pyplot.step`.\n+\n+    Parameters\n+    ----------\n+    where : {'pre', 'post', 'mid'}, default: 'pre'\n+        Define where the steps should be placed:\n+\n+        - ``'pre'``: The y value is continued constantly to the left from\n+          every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n+          value ``y[i]``.\n+        - ``'post'``: The y value is continued constantly to the right from\n+          every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n+          value ``y[i]``.\n+        - ``'mid'``: Steps occur half-way between the *x* positions.\n+\n+        Note that this parameter is ignored if one coordinate consists of\n+        :py:class:`pandas.Interval` values, e.g. as a result of\n+        :py:func:`xarray.Dataset.groupby_bins`. In this case, the actual\n+        boundaries of the interval are used.\n+    drawstyle, ds : str or None, optional\n+        Additional drawstyle. Only use one of drawstyle and ds.\n+    row : Hashable, optional\n+        If passed, make row faceted plots on this dimension name.\n+    col : Hashable, optional\n+        If passed, make column faceted plots on this dimension name.\n+    *args, **kwargs : optional\n+        Additional arguments for :py:func:`xarray.plot.line`.\n+\n+    Returns\n+    -------\n+    primitive : list of Line3D or FacetGrid\n+        When either col or row is given, returns a FacetGrid, otherwise\n+        a list of matplotlib Line3D objects.\n+    \"\"\"\n+    if where not in {\"pre\", \"post\", \"mid\"}:\n+        raise ValueError(\"'where' argument to step must be 'pre', 'post' or 'mid'\")\n+\n+    if ds is not None:\n+        if drawstyle is None:\n+            drawstyle = ds\n+        else:\n+            raise TypeError(\"ds and drawstyle are mutually exclusive\")\n+    if drawstyle is None:\n+        drawstyle = \"\"\n+    drawstyle = \"steps-\" + where + drawstyle\n+\n+    return line(darray, *args, drawstyle=drawstyle, col=col, row=row, **kwargs)\n+\n+\n+def hist(\n+    darray: DataArray,\n+    *args: Any,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    xincrease: bool | None = None,\n+    yincrease: bool | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    **kwargs: Any,\n+) -> tuple[np.ndarray, np.ndarray, BarContainer]:\n+    \"\"\"\n+    Histogram of DataArray.\n+\n+    Wraps :py:func:`matplotlib:matplotlib.pyplot.hist`.\n+\n+    Plots *N*-dimensional arrays by first flattening the array.\n+\n+    Parameters\n+    ----------\n+    darray : DataArray\n+        Can have any number of dimensions.\n+    figsize : Iterable of float, optional\n+        A tuple (width, height) of the figure in inches.\n+        Mutually exclusive with ``size`` and ``ax``.\n+    aspect : \"auto\", \"equal\", scalar or None, optional\n+        Aspect ratio of plot, so that ``aspect * size`` gives the *width* in\n+        inches. Only used if a ``size`` is provided.\n+    size : scalar, optional\n+        If provided, create a new figure for the plot with the given size:\n+        *height* (in inches) of each plot. See also: ``aspect``.\n+    ax : matplotlib axes object, optional\n+        Axes on which to plot. By default, use the current axes.\n+        Mutually exclusive with ``size`` and ``figsize``.\n+    xincrease : bool or None, optional\n+        Should the values on the *x* axis be increasing from left to right?\n+        if ``None``, use the default for the Matplotlib function.\n+    yincrease : bool or None, optional\n+        Should the values on the *y* axis be increasing from top to bottom?\n+        if ``None``, use the default for the Matplotlib function.\n+    xscale, yscale : {'linear', 'symlog', 'log', 'logit'}, optional\n+        Specifies scaling for the *x*- and *y*-axis, respectively.\n+    xticks, yticks : array-like, optional\n+        Specify tick locations for *x*- and *y*-axis.\n+    xlim, ylim : array-like, optional\n+        Specify *x*- and *y*-axis limits.\n+    **kwargs : optional\n+        Additional keyword arguments to :py:func:`matplotlib:matplotlib.pyplot.hist`.\n+\n+    \"\"\"\n+    assert len(args) == 0\n+\n+    ax = get_axis(figsize, size, aspect, ax)\n+\n+    no_nan = np.ravel(darray.to_numpy())\n+    no_nan = no_nan[pd.notnull(no_nan)]\n+\n+    primitive = ax.hist(no_nan, **kwargs)\n+\n+    ax.set_title(darray._title_for_slice())\n+    ax.set_xlabel(label_from_attrs(darray))\n+\n+    _update_axes(ax, xincrease, yincrease, xscale, yscale, xticks, yticks, xlim, ylim)\n+\n+    return primitive\n+\n+\n+def _plot1d(plotfunc):\n+    \"\"\"Decorator for common 1d plotting logic.\"\"\"\n+    commondoc = \"\"\"\n+    Parameters\n+    ----------\n+    darray : DataArray\n+        Must be 2 dimensional, unless creating faceted plots.\n+    x : Hashable or None, optional\n+        Coordinate for x axis. If None use darray.dims[1].\n+    y : Hashable or None, optional\n+        Coordinate for y axis. If None use darray.dims[0].\n+    z : Hashable or None, optional\n+        If specified plot 3D and use this coordinate for *z* axis.\n+    hue : Hashable or None, optional\n+        Dimension or coordinate for which you want multiple lines plotted.\n+    hue_style: {'discrete', 'continuous'} or None, optional\n+        How to use the ``hue`` variable:\n+\n+        - ``'continuous'`` -- continuous color scale\n+          (default for numeric ``hue`` variables)\n+        - ``'discrete'`` -- a color for each unique value,\n+          using the default color cycle\n+          (default for non-numeric ``hue`` variables)\n+\n+    markersize: Hashable or None, optional\n+        scatter only. Variable by which to vary size of scattered points.\n+    linewidth: Hashable or None, optional\n+        Variable by which to vary linewidth.\n+    row : Hashable, optional\n+        If passed, make row faceted plots on this dimension name.\n+    col : Hashable, optional\n+        If passed, make column faceted plots on this dimension name.\n+    col_wrap : int, optional\n+        Use together with ``col`` to wrap faceted plots\n+    ax : matplotlib axes object, optional\n+        If None, uses the current axis. Not applicable when using facets.\n+    figsize : Iterable[float] or None, optional\n+        A tuple (width, height) of the figure in inches.\n+        Mutually exclusive with ``size`` and ``ax``.\n+    size : scalar, optional\n+        If provided, create a new figure for the plot with the given size.\n+        Height (in inches) of each plot. See also: ``aspect``.\n+    aspect : \"auto\", \"equal\", scalar or None, optional\n+        Aspect ratio of plot, so that ``aspect * size`` gives the width in\n+        inches. Only used if a ``size`` is provided.\n+    xincrease : bool or None, default: True\n+        Should the values on the x axes be increasing from left to right?\n+        if None, use the default for the matplotlib function.\n+    yincrease : bool or None, default: True\n+        Should the values on the y axes be increasing from top to bottom?\n+        if None, use the default for the matplotlib function.\n+    add_legend : bool or None, optional\n+        If True use xarray metadata to add a legend.\n+    add_colorbar : bool or None, optional\n+        If True add a colorbar.\n+    add_labels : bool or None, optional\n+        If True use xarray metadata to label axes\n+    add_title : bool or None, optional\n+        If True use xarray metadata to add a title\n+    subplot_kws : dict, optional\n+        Dictionary of keyword arguments for matplotlib subplots. Only applies\n+        to FacetGrid plotting.\n+    xscale : {'linear', 'symlog', 'log', 'logit'} or None, optional\n+        Specifies scaling for the x-axes.\n+    yscale : {'linear', 'symlog', 'log', 'logit'} or None, optional\n+        Specifies scaling for the y-axes.\n+    xticks : ArrayLike or None, optional\n+        Specify tick locations for x-axes.\n+    yticks : ArrayLike or None, optional\n+        Specify tick locations for y-axes.\n+    xlim : ArrayLike or None, optional\n+        Specify x-axes limits.\n+    ylim : ArrayLike or None, optional\n+        Specify y-axes limits.\n+    cmap : matplotlib colormap name or colormap, optional\n+        The mapping from data values to color space. Either a\n+        Matplotlib colormap name or object. If not provided, this will\n+        be either ``'viridis'`` (if the function infers a sequential\n+        dataset) or ``'RdBu_r'`` (if the function infers a diverging\n+        dataset).\n+        See :doc:`Choosing Colormaps in Matplotlib <matplotlib:tutorials/colors/colormaps>`\n+        for more information.\n+\n+        If *seaborn* is installed, ``cmap`` may also be a\n+        `seaborn color palette <https://seaborn.pydata.org/tutorial/color_palettes.html>`_.\n+        Note: if ``cmap`` is a seaborn color palette,\n+        ``levels`` must also be specified.\n+    vmin : float or None, optional\n+        Lower value to anchor the colormap, otherwise it is inferred from the\n+        data and other keyword arguments. When a diverging dataset is inferred,\n+        setting `vmin` or `vmax` will fix the other by symmetry around\n+        ``center``. Setting both values prevents use of a diverging colormap.\n+        If discrete levels are provided as an explicit list, both of these\n+        values are ignored.\n+    vmax : float or None, optional\n+        Upper value to anchor the colormap, otherwise it is inferred from the\n+        data and other keyword arguments. When a diverging dataset is inferred,\n+        setting `vmin` or `vmax` will fix the other by symmetry around\n+        ``center``. Setting both values prevents use of a diverging colormap.\n+        If discrete levels are provided as an explicit list, both of these\n+        values are ignored.\n+    norm : matplotlib.colors.Normalize, optional\n+        If ``norm`` has ``vmin`` or ``vmax`` specified, the corresponding\n+        kwarg must be ``None``.\n+    extend : {'neither', 'both', 'min', 'max'}, optional\n+        How to draw arrows extending the colorbar beyond its limits. If not\n+        provided, ``extend`` is inferred from ``vmin``, ``vmax`` and the data limits.\n+    levels : int or array-like, optional\n+        Split the colormap (``cmap``) into discrete color intervals. If an integer\n+        is provided, \"nice\" levels are chosen based on the data range: this can\n+        imply that the final number of levels is not exactly the expected one.\n+        Setting ``vmin`` and/or ``vmax`` with ``levels=N`` is equivalent to\n+        setting ``levels=np.linspace(vmin, vmax, N)``.\n+    **kwargs : optional\n+        Additional arguments to wrapped matplotlib function\n+\n+    Returns\n+    -------\n+    artist :\n+        The same type of primitive artist that the wrapped matplotlib\n+        function returns\n+    \"\"\"\n+\n+    # Build on the original docstring\n+    plotfunc.__doc__ = f\"{plotfunc.__doc__}\\n{commondoc}\"\n+\n+    @functools.wraps(\n+        plotfunc, assigned=(\"__module__\", \"__name__\", \"__qualname__\", \"__doc__\")\n+    )\n+    def newplotfunc(\n+        darray: DataArray,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        z: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        markersize: Hashable | None = None,\n+        linewidth: Hashable | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        ax: Axes | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: float | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_legend: bool | None = None,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool | Iterable[bool] = True,\n+        add_title: bool = True,\n+        subplot_kws: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        cmap: str | Colormap | None = None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        extend: ExtendOptions = None,\n+        levels: ArrayLike | None = None,\n+        **kwargs,\n+    ) -> Any:\n+        # All 1d plots in xarray share this function signature.\n+        # Method signature below should be consistent.\n+\n+        if subplot_kws is None:\n+            subplot_kws = dict()\n+\n+        # Handle facetgrids first\n+        if row or col:\n+            if z is not None:\n+                subplot_kws.update(projection=\"3d\")\n+\n+            allargs = locals().copy()\n+            allargs.update(allargs.pop(\"kwargs\"))\n+            allargs.pop(\"darray\")\n+            allargs[\"plotfunc\"] = globals()[plotfunc.__name__]\n+\n+            return _easy_facetgrid(darray, kind=\"plot1d\", **allargs)\n+\n+        # The allargs dict passed to _easy_facetgrid above contains args\n+        if args == ():\n+            args = kwargs.pop(\"args\", ())\n+\n+        if args:\n+            assert \"args\" not in kwargs\n+            # TODO: Deprecated since 2022.10:\n+            msg = \"Using positional arguments is deprecated for plot methods, use keyword arguments instead.\"\n+            assert x is None\n+            x = args[0]\n+            if len(args) > 1:\n+                assert y is None\n+                y = args[1]\n+            if len(args) > 2:\n+                assert z is None\n+                z = args[2]\n+            if len(args) > 3:\n+                assert hue is None\n+                hue = args[3]\n+            if len(args) > 4:\n+                raise ValueError(msg)\n+            else:\n+                warnings.warn(msg, DeprecationWarning, stacklevel=2)\n+        del args\n+\n+        _is_facetgrid = kwargs.pop(\"_is_facetgrid\", False)\n+\n+        if markersize is not None:\n+            size_ = markersize\n+            size_r = _MARKERSIZE_RANGE\n+        else:\n+            size_ = linewidth\n+            size_r = _LINEWIDTH_RANGE\n+\n+        # Get data to plot:\n+        dims_plot = dict(x=x, z=z, hue=hue, size=size_)\n+        plts = _infer_line_data2(darray, dims_plot, plotfunc.__name__)\n+        xplt = plts.pop(\"x\", None)\n+        yplt = plts.pop(\"y\", None)\n+        zplt = plts.pop(\"z\", None)\n+        kwargs.update(zplt=zplt)\n+        hueplt = plts.pop(\"hue\", None)\n+        sizeplt = plts.pop(\"size\", None)\n+\n+        # Handle size and hue:\n+        hueplt_norm = _Normalize(data=hueplt)\n+        kwargs.update(hueplt=hueplt_norm.values)\n+        sizeplt_norm = _Normalize(\n+            data=sizeplt, width=size_r, _is_facetgrid=_is_facetgrid\n+        )\n+        kwargs.update(sizeplt=sizeplt_norm.values)\n+        cmap_params_subset = kwargs.pop(\"cmap_params_subset\", {})\n+        cbar_kwargs = kwargs.pop(\"cbar_kwargs\", {})\n+\n+        if hueplt_norm.data is not None:\n+            if not hueplt_norm.data_is_numeric:\n+                # Map hue values back to its original value:\n+                cbar_kwargs.update(format=hueplt_norm.format, ticks=hueplt_norm.ticks)\n+                levels = kwargs.get(\"levels\", hueplt_norm.levels)\n+\n+            cmap_params, cbar_kwargs = _process_cmap_cbar_kwargs(\n+                plotfunc,\n+                hueplt_norm.values.data,\n+                **locals(),\n+            )\n+\n+            # subset that can be passed to scatter, hist2d\n+            if not cmap_params_subset:\n+                ckw = {vv: cmap_params[vv] for vv in (\"vmin\", \"vmax\", \"norm\", \"cmap\")}\n+                cmap_params_subset.update(**ckw)\n+\n+        if z is not None:\n+            if ax is None:\n+                subplot_kws.update(projection=\"3d\")\n+            ax = get_axis(figsize, size, aspect, ax, **subplot_kws)\n+            # Using 30, 30 minimizes rotation of the plot. Making it easier to\n+            # build on your intuition from 2D plots:\n+            plt = import_matplotlib_pyplot()\n+            if Version(plt.matplotlib.__version__) < Version(\"3.5.0\"):\n+                ax.view_init(azim=30, elev=30)\n+            else:\n+                # https://github.com/matplotlib/matplotlib/pull/19873\n+                ax.view_init(azim=30, elev=30, vertical_axis=\"y\")\n+        else:\n+            ax = get_axis(figsize, size, aspect, ax, **subplot_kws)\n+\n+        primitive = plotfunc(\n+            xplt,\n+            yplt,\n+            ax=ax,\n+            add_labels=add_labels,\n+            **cmap_params_subset,\n+            **kwargs,\n+        )\n+\n+        if np.any(np.asarray(add_labels)) and add_title:\n+            ax.set_title(darray._title_for_slice())\n+\n+        add_colorbar_, add_legend_ = _determine_guide(\n+            hueplt_norm,\n+            sizeplt_norm,\n+            add_colorbar,\n+            add_legend,\n+            plotfunc_name=plotfunc.__name__,\n+        )\n+\n+        if add_colorbar_:\n+            if \"label\" not in cbar_kwargs:\n+                cbar_kwargs[\"label\"] = label_from_attrs(hueplt_norm.data)\n+\n+            _add_colorbar(\n+                primitive, ax, kwargs.get(\"cbar_ax\", None), cbar_kwargs, cmap_params\n+            )\n+\n+        if add_legend_:\n+            if plotfunc.__name__ == \"hist\":\n+                ax.legend(\n+                    handles=primitive[-1],\n+                    labels=list(hueplt_norm.values.to_numpy()),\n+                    title=label_from_attrs(hueplt_norm.data),\n+                )\n+            elif plotfunc.__name__ in [\"scatter\", \"line\"]:\n+                _add_legend(\n+                    hueplt_norm\n+                    if add_legend or not add_colorbar_\n+                    else _Normalize(None),\n+                    sizeplt_norm,\n+                    primitive,\n+                    legend_ax=ax,\n+                    plotfunc=plotfunc.__name__,\n+                )\n+            else:\n+                ax.legend(\n+                    handles=primitive,\n+                    labels=list(hueplt_norm.values.to_numpy()),\n+                    title=label_from_attrs(hueplt_norm.data),\n+                )\n+\n+        _update_axes(\n+            ax, xincrease, yincrease, xscale, yscale, xticks, yticks, xlim, ylim\n+        )\n+\n+        return primitive\n+\n+    # we want to actually expose the signature of newplotfunc\n+    # and not the copied **kwargs from the plotfunc which\n+    # functools.wraps adds, so delete the wrapped attr\n+    del newplotfunc.__wrapped__\n+\n+    return newplotfunc\n+\n+\n+def _add_labels(\n+    add_labels: bool | Iterable[bool],\n+    darrays: Iterable[DataArray],\n+    suffixes: Iterable[str],\n+    rotate_labels: Iterable[bool],\n+    ax: Axes,\n+) -> None:\n+    # Set x, y, z labels:\n+    add_labels = [add_labels] * 3 if isinstance(add_labels, bool) else add_labels\n+    for axis, add_label, darray, suffix, rotate_label in zip(\n+        (\"x\", \"y\", \"z\"), add_labels, darrays, suffixes, rotate_labels\n+    ):\n+        if darray is None:\n+            continue\n+\n+        if add_label:\n+            label = label_from_attrs(darray, extra=suffix)\n+            if label is not None:\n+                getattr(ax, f\"set_{axis}label\")(label)\n+\n+        if rotate_label and np.issubdtype(darray.dtype, np.datetime64):\n+            # Rotate dates on xlabels\n+            # Do this without calling autofmt_xdate so that x-axes ticks\n+            # on other subplots (if any) are not deleted.\n+            # https://stackoverflow.com/questions/17430105/autofmt-xdate-deletes-x-axis-labels-of-all-subplots\n+            for labels in getattr(ax, f\"get_{axis}ticklabels\")():\n+                labels.set_rotation(30)\n+                labels.set_ha(\"right\")\n+\n+\n+@overload\n+def scatter(\n+    darray: DataArray,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    z: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    markersize: Hashable | None = None,\n+    linewidth: Hashable | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: float | None = None,\n+    ax: Axes | None = None,\n+    row: None = None,  # no wrap -> primitive\n+    col: None = None,  # no wrap -> primitive\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_legend: bool | None = None,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool | Iterable[bool] = True,\n+    add_title: bool = True,\n+    subplot_kws: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    cmap: str | Colormap | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    **kwargs,\n+) -> PathCollection:\n+    ...\n+\n+\n+@overload\n+def scatter(\n+    darray: DataArray,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    z: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    markersize: Hashable | None = None,\n+    linewidth: Hashable | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: float | None = None,\n+    ax: Axes | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_legend: bool | None = None,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool | Iterable[bool] = True,\n+    add_title: bool = True,\n+    subplot_kws: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    cmap: str | Colormap | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    **kwargs,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@overload\n+def scatter(\n+    darray: DataArray,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    z: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    markersize: Hashable | None = None,\n+    linewidth: Hashable | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: float | None = None,\n+    ax: Axes | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    col: Hashable | None = None,\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_legend: bool | None = None,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool | Iterable[bool] = True,\n+    add_title: bool = True,\n+    subplot_kws: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    cmap: str | Colormap | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    **kwargs,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@_plot1d\n+def scatter(\n+    xplt: DataArray | None,\n+    yplt: DataArray | None,\n+    ax: Axes,\n+    add_labels: bool | Iterable[bool] = True,\n+    **kwargs,\n+) -> PathCollection:\n+    \"\"\"Scatter variables against each other.\n+\n+    Wraps :py:func:`matplotlib:matplotlib.pyplot.scatter`.\n+    \"\"\"\n+    plt = import_matplotlib_pyplot()\n+\n+    if \"u\" in kwargs or \"v\" in kwargs:\n+        raise ValueError(\"u, v are not allowed in scatter plots.\")\n+\n+    zplt: DataArray | None = kwargs.pop(\"zplt\", None)\n+    hueplt: DataArray | None = kwargs.pop(\"hueplt\", None)\n+    sizeplt: DataArray | None = kwargs.pop(\"sizeplt\", None)\n+\n+    # Add a white border to make it easier seeing overlapping markers:\n+    kwargs.update(edgecolors=kwargs.pop(\"edgecolors\", \"w\"))\n+\n+    if hueplt is not None:\n+        kwargs.update(c=hueplt.to_numpy().ravel())\n+\n+    if sizeplt is not None:\n+        kwargs.update(s=sizeplt.to_numpy().ravel())\n+\n+    if Version(plt.matplotlib.__version__) < Version(\"3.5.0\"):\n+        # Plot the data. 3d plots has the z value in upward direction\n+        # instead of y. To make jumping between 2d and 3d easy and intuitive\n+        # switch the order so that z is shown in the depthwise direction:\n+        axis_order = [\"x\", \"z\", \"y\"]\n+    else:\n+        # Switching axis order not needed in 3.5.0, can also simplify the code\n+        # that uses axis_order:\n+        # https://github.com/matplotlib/matplotlib/pull/19873\n+        axis_order = [\"x\", \"y\", \"z\"]\n+\n+    plts_dict: dict[str, DataArray | None] = dict(x=xplt, y=yplt, z=zplt)\n+    plts_or_none = [plts_dict[v] for v in axis_order]\n+    plts = [p for p in plts_or_none if p is not None]\n+    primitive = ax.scatter(*[p.to_numpy().ravel() for p in plts], **kwargs)\n+    _add_labels(add_labels, plts, (\"\", \"\", \"\"), (True, False, False), ax)\n+\n+    return primitive\n+\n+\n+def _plot2d(plotfunc):\n+    \"\"\"Decorator for common 2d plotting logic.\"\"\"\n+    commondoc = \"\"\"\n+    Parameters\n+    ----------\n+    darray : DataArray\n+        Must be two-dimensional, unless creating faceted plots.\n+    x : Hashable or None, optional\n+        Coordinate for *x* axis. If ``None``, use ``darray.dims[1]``.\n+    y : Hashable or None, optional\n+        Coordinate for *y* axis. If ``None``, use ``darray.dims[0]``.\n+    figsize : Iterable or float or None, optional\n+        A tuple (width, height) of the figure in inches.\n+        Mutually exclusive with ``size`` and ``ax``.\n+    size : scalar, optional\n+        If provided, create a new figure for the plot with the given size:\n+        *height* (in inches) of each plot. See also: ``aspect``.\n+    aspect : \"auto\", \"equal\", scalar or None, optional\n+        Aspect ratio of plot, so that ``aspect * size`` gives the *width* in\n+        inches. Only used if a ``size`` is provided.\n+    ax : matplotlib axes object, optional\n+        Axes on which to plot. By default, use the current axes.\n+        Mutually exclusive with ``size`` and ``figsize``.\n+    row : Hashable or None, optional\n+        If passed, make row faceted plots on this dimension name.\n+    col : Hashable or None, optional\n+        If passed, make column faceted plots on this dimension name.\n+    col_wrap : int, optional\n+        Use together with ``col`` to wrap faceted plots.\n+    xincrease : None, True, or False, optional\n+        Should the values on the *x* axis be increasing from left to right?\n+        If ``None``, use the default for the Matplotlib function.\n+    yincrease : None, True, or False, optional\n+        Should the values on the *y* axis be increasing from top to bottom?\n+        If ``None``, use the default for the Matplotlib function.\n+    add_colorbar : bool, optional\n+        Add colorbar to axes.\n+    add_labels : bool, optional\n+        Use xarray metadata to label axes.\n+    vmin : float or None, optional\n+        Lower value to anchor the colormap, otherwise it is inferred from the\n+        data and other keyword arguments. When a diverging dataset is inferred,\n+        setting `vmin` or `vmax` will fix the other by symmetry around\n+        ``center``. Setting both values prevents use of a diverging colormap.\n+        If discrete levels are provided as an explicit list, both of these\n+        values are ignored.\n+    vmax : float or None, optional\n+        Upper value to anchor the colormap, otherwise it is inferred from the\n+        data and other keyword arguments. When a diverging dataset is inferred,\n+        setting `vmin` or `vmax` will fix the other by symmetry around\n+        ``center``. Setting both values prevents use of a diverging colormap.\n+        If discrete levels are provided as an explicit list, both of these\n+        values are ignored.\n+    cmap : matplotlib colormap name or colormap, optional\n+        The mapping from data values to color space. If not provided, this\n+        will be either be ``'viridis'`` (if the function infers a sequential\n+        dataset) or ``'RdBu_r'`` (if the function infers a diverging dataset).\n+        See :doc:`Choosing Colormaps in Matplotlib <matplotlib:tutorials/colors/colormaps>`\n+        for more information.\n+\n+        If *seaborn* is installed, ``cmap`` may also be a\n+        `seaborn color palette <https://seaborn.pydata.org/tutorial/color_palettes.html>`_.\n+        Note: if ``cmap`` is a seaborn color palette and the plot type\n+        is not ``'contour'`` or ``'contourf'``, ``levels`` must also be specified.\n+    center : float, optional\n+        The value at which to center the colormap. Passing this value implies\n+        use of a diverging colormap. Setting it to ``False`` prevents use of a\n+        diverging colormap.\n+    robust : bool, optional\n+        If ``True`` and ``vmin`` or ``vmax`` are absent, the colormap range is\n+        computed with 2nd and 98th percentiles instead of the extreme values.\n+    extend : {'neither', 'both', 'min', 'max'}, optional\n+        How to draw arrows extending the colorbar beyond its limits. If not\n+        provided, ``extend`` is inferred from ``vmin``, ``vmax`` and the data limits.\n+    levels : int or array-like, optional\n+        Split the colormap (``cmap``) into discrete color intervals. If an integer\n+        is provided, \"nice\" levels are chosen based on the data range: this can\n+        imply that the final number of levels is not exactly the expected one.\n+        Setting ``vmin`` and/or ``vmax`` with ``levels=N`` is equivalent to\n+        setting ``levels=np.linspace(vmin, vmax, N)``.\n+    infer_intervals : bool, optional\n+        Only applies to pcolormesh. If ``True``, the coordinate intervals are\n+        passed to pcolormesh. If ``False``, the original coordinates are used\n+        (this can be useful for certain map projections). The default is to\n+        always infer intervals, unless the mesh is irregular and plotted on\n+        a map projection.\n+    colors : str or array-like of color-like, optional\n+        A single color or a sequence of colors. If the plot type is not ``'contour'``\n+        or ``'contourf'``, the ``levels`` argument is required.\n+    subplot_kws : dict, optional\n+        Dictionary of keyword arguments for Matplotlib subplots. Only used\n+        for 2D and faceted plots.\n+        (see :py:meth:`matplotlib:matplotlib.figure.Figure.add_subplot`).\n+    cbar_ax : matplotlib axes object, optional\n+        Axes in which to draw the colorbar.\n+    cbar_kwargs : dict, optional\n+        Dictionary of keyword arguments to pass to the colorbar\n+        (see :meth:`matplotlib:matplotlib.figure.Figure.colorbar`).\n+    xscale : {'linear', 'symlog', 'log', 'logit'} or None, optional\n+        Specifies scaling for the x-axes.\n+    yscale : {'linear', 'symlog', 'log', 'logit'} or None, optional\n+        Specifies scaling for the y-axes.\n+    xticks : ArrayLike or None, optional\n+        Specify tick locations for x-axes.\n+    yticks : ArrayLike or None, optional\n+        Specify tick locations for y-axes.\n+    xlim : ArrayLike or None, optional\n+        Specify x-axes limits.\n+    ylim : ArrayLike or None, optional\n+        Specify y-axes limits.\n+    norm : matplotlib.colors.Normalize, optional\n+        If ``norm`` has ``vmin`` or ``vmax`` specified, the corresponding\n+        kwarg must be ``None``.\n+    **kwargs : optional\n+        Additional keyword arguments to wrapped Matplotlib function.\n+\n+    Returns\n+    -------\n+    artist :\n+        The same type of primitive artist that the wrapped Matplotlib\n+        function returns.\n+    \"\"\"\n+\n+    # Build on the original docstring\n+    plotfunc.__doc__ = f\"{plotfunc.__doc__}\\n{commondoc}\"\n+\n+    @functools.wraps(\n+        plotfunc, assigned=(\"__module__\", \"__name__\", \"__qualname__\", \"__doc__\")\n+    )\n+    def newplotfunc(\n+        darray: DataArray,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: float | None = None,\n+        ax: Axes | None = None,\n+        row: Hashable | None = None,\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        xincrease: bool | None = True,\n+        yincrease: bool | None = True,\n+        add_colorbar: bool | None = None,\n+        add_labels: bool = True,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        cmap: str | Colormap | None = None,\n+        center: float | None = None,\n+        robust: bool = False,\n+        extend: ExtendOptions = None,\n+        levels: ArrayLike | None = None,\n+        infer_intervals=None,\n+        colors: str | ArrayLike | None = None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        xscale: ScaleOptions = None,\n+        yscale: ScaleOptions = None,\n+        xticks: ArrayLike | None = None,\n+        yticks: ArrayLike | None = None,\n+        xlim: ArrayLike | None = None,\n+        ylim: ArrayLike | None = None,\n+        norm: Normalize | None = None,\n+        **kwargs: Any,\n+    ) -> Any:\n+        # All 2d plots in xarray share this function signature.\n+\n+        if args:\n+            # TODO: Deprecated since 2022.10:\n+            msg = \"Using positional arguments is deprecated for plot methods, use keyword arguments instead.\"\n+            assert x is None\n+            x = args[0]\n+            if len(args) > 1:\n+                assert y is None\n+                y = args[1]\n+            if len(args) > 2:\n+                raise ValueError(msg)\n+            else:\n+                warnings.warn(msg, DeprecationWarning, stacklevel=2)\n+        del args\n+\n+        # Decide on a default for the colorbar before facetgrids\n+        if add_colorbar is None:\n+            add_colorbar = True\n+            if plotfunc.__name__ == \"contour\" or (\n+                plotfunc.__name__ == \"surface\" and cmap is None\n+            ):\n+                add_colorbar = False\n+        imshow_rgb = plotfunc.__name__ == \"imshow\" and darray.ndim == (\n+            3 + (row is not None) + (col is not None)\n+        )\n+        if imshow_rgb:\n+            # Don't add a colorbar when showing an image with explicit colors\n+            add_colorbar = False\n+            # Matplotlib does not support normalising RGB data, so do it here.\n+            # See eg. https://github.com/matplotlib/matplotlib/pull/10220\n+            if robust or vmax is not None or vmin is not None:\n+                darray = _rescale_imshow_rgb(darray.as_numpy(), vmin, vmax, robust)\n+                vmin, vmax, robust = None, None, False\n+\n+        if subplot_kws is None:\n+            subplot_kws = dict()\n+\n+        if plotfunc.__name__ == \"surface\" and not kwargs.get(\"_is_facetgrid\", False):\n+            if ax is None:\n+                # TODO: Importing Axes3D is no longer necessary in matplotlib >= 3.2.\n+                # Remove when minimum requirement of matplotlib is 3.2:\n+                from mpl_toolkits.mplot3d import Axes3D  # type: ignore  # noqa: F401\n+\n+                # delete so it does not end up in locals()\n+                del Axes3D\n+\n+                # Need to create a \"3d\" Axes instance for surface plots\n+                subplot_kws[\"projection\"] = \"3d\"\n+\n+            # In facet grids, shared axis labels don't make sense for surface plots\n+            sharex = False\n+            sharey = False\n+\n+        # Handle facetgrids first\n+        if row or col:\n+            allargs = locals().copy()\n+            del allargs[\"darray\"]\n+            del allargs[\"imshow_rgb\"]\n+            allargs.update(allargs.pop(\"kwargs\"))\n+            # Need the decorated plotting function\n+            allargs[\"plotfunc\"] = globals()[plotfunc.__name__]\n+            return _easy_facetgrid(darray, kind=\"dataarray\", **allargs)\n+\n+        plt = import_matplotlib_pyplot()\n+\n+        if (\n+            plotfunc.__name__ == \"surface\"\n+            and not kwargs.get(\"_is_facetgrid\", False)\n+            and ax is not None\n+        ):\n+            import mpl_toolkits  # type: ignore\n+\n+            if not isinstance(ax, mpl_toolkits.mplot3d.Axes3D):\n+                raise ValueError(\n+                    \"If ax is passed to surface(), it must be created with \"\n+                    'projection=\"3d\"'\n+                )\n+\n+        rgb = kwargs.pop(\"rgb\", None)\n+        if rgb is not None and plotfunc.__name__ != \"imshow\":\n+            raise ValueError('The \"rgb\" keyword is only valid for imshow()')\n+        elif rgb is not None and not imshow_rgb:\n+            raise ValueError(\n+                'The \"rgb\" keyword is only valid for imshow()'\n+                \"with a three-dimensional array (per facet)\"\n+            )\n+\n+        xlab, ylab = _infer_xy_labels(\n+            darray=darray, x=x, y=y, imshow=imshow_rgb, rgb=rgb\n+        )\n+\n+        xval = darray[xlab]\n+        yval = darray[ylab]\n+\n+        if xval.ndim > 1 or yval.ndim > 1 or plotfunc.__name__ == \"surface\":\n+            # Passing 2d coordinate values, need to ensure they are transposed the same\n+            # way as darray.\n+            # Also surface plots always need 2d coordinates\n+            xval = xval.broadcast_like(darray)\n+            yval = yval.broadcast_like(darray)\n+            dims = darray.dims\n+        else:\n+            dims = (yval.dims[0], xval.dims[0])\n+\n+        # May need to transpose for correct x, y labels\n+        # xlab may be the name of a coord, we have to check for dim names\n+        if imshow_rgb:\n+            # For RGB[A] images, matplotlib requires the color dimension\n+            # to be last.  In Xarray the order should be unimportant, so\n+            # we transpose to (y, x, color) to make this work.\n+            yx_dims = (ylab, xlab)\n+            dims = yx_dims + tuple(d for d in darray.dims if d not in yx_dims)\n+\n+        if dims != darray.dims:\n+            darray = darray.transpose(*dims, transpose_coords=True)\n+\n+        # better to pass the ndarrays directly to plotting functions\n+        xvalnp = xval.to_numpy()\n+        yvalnp = yval.to_numpy()\n+\n+        # Pass the data as a masked ndarray too\n+        zval = darray.to_masked_array(copy=False)\n+\n+        # Replace pd.Intervals if contained in xval or yval.\n+        xplt, xlab_extra = _resolve_intervals_2dplot(xvalnp, plotfunc.__name__)\n+        yplt, ylab_extra = _resolve_intervals_2dplot(yvalnp, plotfunc.__name__)\n+\n+        _ensure_plottable(xplt, yplt, zval)\n+\n+        cmap_params, cbar_kwargs = _process_cmap_cbar_kwargs(\n+            plotfunc,\n+            zval.data,\n+            **locals(),\n+            _is_facetgrid=kwargs.pop(\"_is_facetgrid\", False),\n+        )\n+\n+        if \"contour\" in plotfunc.__name__:\n+            # extend is a keyword argument only for contour and contourf, but\n+            # passing it to the colorbar is sufficient for imshow and\n+            # pcolormesh\n+            kwargs[\"extend\"] = cmap_params[\"extend\"]\n+            kwargs[\"levels\"] = cmap_params[\"levels\"]\n+            # if colors == a single color, matplotlib draws dashed negative\n+            # contours. we lose this feature if we pass cmap and not colors\n+            if isinstance(colors, str):\n+                cmap_params[\"cmap\"] = None\n+                kwargs[\"colors\"] = colors\n+\n+        if \"pcolormesh\" == plotfunc.__name__:\n+            kwargs[\"infer_intervals\"] = infer_intervals\n+            kwargs[\"xscale\"] = xscale\n+            kwargs[\"yscale\"] = yscale\n+\n+        if \"imshow\" == plotfunc.__name__ and isinstance(aspect, str):\n+            # forbid usage of mpl strings\n+            raise ValueError(\"plt.imshow's `aspect` kwarg is not available in xarray\")\n+\n+        ax = get_axis(figsize, size, aspect, ax, **subplot_kws)\n+\n+        primitive = plotfunc(\n+            xplt,\n+            yplt,\n+            zval,\n+            ax=ax,\n+            cmap=cmap_params[\"cmap\"],\n+            vmin=cmap_params[\"vmin\"],\n+            vmax=cmap_params[\"vmax\"],\n+            norm=cmap_params[\"norm\"],\n+            **kwargs,\n+        )\n+\n+        # Label the plot with metadata\n+        if add_labels:\n+            ax.set_xlabel(label_from_attrs(darray[xlab], xlab_extra))\n+            ax.set_ylabel(label_from_attrs(darray[ylab], ylab_extra))\n+            ax.set_title(darray._title_for_slice())\n+            if plotfunc.__name__ == \"surface\":\n+                ax.set_zlabel(label_from_attrs(darray))\n+\n+        if add_colorbar:\n+            if add_labels and \"label\" not in cbar_kwargs:\n+                cbar_kwargs[\"label\"] = label_from_attrs(darray)\n+            cbar = _add_colorbar(primitive, ax, cbar_ax, cbar_kwargs, cmap_params)\n+        elif cbar_ax is not None or cbar_kwargs:\n+            # inform the user about keywords which aren't used\n+            raise ValueError(\n+                \"cbar_ax and cbar_kwargs can't be used with add_colorbar=False.\"\n+            )\n+\n+        # origin kwarg overrides yincrease\n+        if \"origin\" in kwargs:\n+            yincrease = None\n+\n+        _update_axes(\n+            ax, xincrease, yincrease, xscale, yscale, xticks, yticks, xlim, ylim\n+        )\n+\n+        # Rotate dates on xlabels\n+        # Do this without calling autofmt_xdate so that x-axes ticks\n+        # on other subplots (if any) are not deleted.\n+        # https://stackoverflow.com/questions/17430105/autofmt-xdate-deletes-x-axis-labels-of-all-subplots\n+        if np.issubdtype(xplt.dtype, np.datetime64):\n+            for xlabels in ax.get_xticklabels():\n+                xlabels.set_rotation(30)\n+                xlabels.set_ha(\"right\")\n+\n+        return primitive\n+\n+    # we want to actually expose the signature of newplotfunc\n+    # and not the copied **kwargs from the plotfunc which\n+    # functools.wraps adds, so delete the wrapped attr\n+    del newplotfunc.__wrapped__\n+\n+    return newplotfunc\n+\n+\n+@overload\n+def imshow(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: float | None = None,\n+    ax: Axes | None = None,\n+    row: None = None,  # no wrap -> primitive\n+    col: None = None,  # no wrap -> primitive\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> AxesImage:\n+    ...\n+\n+\n+@overload\n+def imshow(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@overload\n+def imshow(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    col: Hashable | None = None,\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@_plot2d\n+def imshow(\n+    x: np.ndarray, y: np.ndarray, z: np.ma.core.MaskedArray, ax: Axes, **kwargs: Any\n+) -> AxesImage:\n+    \"\"\"\n+    Image plot of 2D DataArray.\n+\n+    Wraps :py:func:`matplotlib:matplotlib.pyplot.imshow`.\n+\n+    While other plot methods require the DataArray to be strictly\n+    two-dimensional, ``imshow`` also accepts a 3D array where some\n+    dimension can be interpreted as RGB or RGBA color channels and\n+    allows this dimension to be specified via the kwarg ``rgb=``.\n+\n+    Unlike :py:func:`matplotlib:matplotlib.pyplot.imshow`, which ignores ``vmin``/``vmax``\n+    for RGB(A) data,\n+    xarray *will* use ``vmin`` and ``vmax`` for RGB(A) data\n+    by applying a single scaling factor and offset to all bands.\n+    Passing  ``robust=True`` infers ``vmin`` and ``vmax``\n+    :ref:`in the usual way <robust-plotting>`.\n+    Additionally the y-axis is not inverted by default, you can\n+    restore the matplotlib behavior by setting `yincrease=False`.\n+\n+    .. note::\n+        This function needs uniformly spaced coordinates to\n+        properly label the axes. Call :py:meth:`DataArray.plot` to check.\n+\n+    The pixels are centered on the coordinates. For example, if the coordinate\n+    value is 3.2, then the pixels for those coordinates will be centered on 3.2.\n+    \"\"\"\n+\n+    if x.ndim != 1 or y.ndim != 1:\n+        raise ValueError(\n+            \"imshow requires 1D coordinates, try using pcolormesh or contour(f)\"\n+        )\n+\n+    def _center_pixels(x):\n+        \"\"\"Center the pixels on the coordinates.\"\"\"\n+        if np.issubdtype(x.dtype, str):\n+            # When using strings as inputs imshow converts it to\n+            # integers. Choose extent values which puts the indices in\n+            # in the center of the pixels:\n+            return 0 - 0.5, len(x) - 0.5\n+\n+        try:\n+            # Center the pixels assuming uniform spacing:\n+            xstep = 0.5 * (x[1] - x[0])\n+        except IndexError:\n+            # Arbitrary default value, similar to matplotlib behaviour:\n+            xstep = 0.1\n+\n+        return x[0] - xstep, x[-1] + xstep\n+\n+    # Center the pixels:\n+    left, right = _center_pixels(x)\n+    top, bottom = _center_pixels(y)\n+\n+    defaults: dict[str, Any] = {\"origin\": \"upper\", \"interpolation\": \"nearest\"}\n+\n+    if not hasattr(ax, \"projection\"):\n+        # not for cartopy geoaxes\n+        defaults[\"aspect\"] = \"auto\"\n+\n+    # Allow user to override these defaults\n+    defaults.update(kwargs)\n+\n+    if defaults[\"origin\"] == \"upper\":\n+        defaults[\"extent\"] = [left, right, bottom, top]\n+    else:\n+        defaults[\"extent\"] = [left, right, top, bottom]\n+\n+    if z.ndim == 3:\n+        # matplotlib imshow uses black for missing data, but Xarray makes\n+        # missing data transparent.  We therefore add an alpha channel if\n+        # there isn't one, and set it to transparent where data is masked.\n+        if z.shape[-1] == 3:\n+            alpha = np.ma.ones(z.shape[:2] + (1,), dtype=z.dtype)\n+            if np.issubdtype(z.dtype, np.integer):\n+                alpha *= 255\n+            z = np.ma.concatenate((z, alpha), axis=2)\n+        else:\n+            z = z.copy()\n+        z[np.any(z.mask, axis=-1), -1] = 0\n+\n+    primitive = ax.imshow(z, **defaults)\n+\n+    # If x or y are strings the ticklabels have been replaced with\n+    # integer indices. Replace them back to strings:\n+    for axis, v in [(\"x\", x), (\"y\", y)]:\n+        if np.issubdtype(v.dtype, str):\n+            getattr(ax, f\"set_{axis}ticks\")(np.arange(len(v)))\n+            getattr(ax, f\"set_{axis}ticklabels\")(v)\n+\n+    return primitive\n+\n+\n+@overload\n+def contour(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: float | None = None,\n+    ax: Axes | None = None,\n+    row: None = None,  # no wrap -> primitive\n+    col: None = None,  # no wrap -> primitive\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> QuadContourSet:\n+    ...\n+\n+\n+@overload\n+def contour(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@overload\n+def contour(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    col: Hashable | None = None,\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@_plot2d\n+def contour(\n+    x: np.ndarray, y: np.ndarray, z: np.ndarray, ax: Axes, **kwargs: Any\n+) -> QuadContourSet:\n+    \"\"\"\n+    Contour plot of 2D DataArray.\n+\n+    Wraps :py:func:`matplotlib:matplotlib.pyplot.contour`.\n+    \"\"\"\n+    primitive = ax.contour(x, y, z, **kwargs)\n+    return primitive\n+\n+\n+@overload\n+def contourf(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: None = None,  # no wrap -> primitive\n+    col: None = None,  # no wrap -> primitive\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> QuadContourSet:\n+    ...\n+\n+\n+@overload\n+def contourf(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@overload\n+def contourf(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    col: Hashable | None = None,\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@_plot2d\n+def contourf(\n+    x: np.ndarray, y: np.ndarray, z: np.ndarray, ax: Axes, **kwargs: Any\n+) -> QuadContourSet:\n+    \"\"\"\n+    Filled contour plot of 2D DataArray.\n+\n+    Wraps :py:func:`matplotlib:matplotlib.pyplot.contourf`.\n+    \"\"\"\n+    primitive = ax.contourf(x, y, z, **kwargs)\n+    return primitive\n+\n+\n+@overload\n+def pcolormesh(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: None = None,  # no wrap -> primitive\n+    col: None = None,  # no wrap -> primitive\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> QuadMesh:\n+    ...\n+\n+\n+@overload\n+def pcolormesh(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@overload\n+def pcolormesh(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    col: Hashable | None = None,\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@_plot2d\n+def pcolormesh(\n+    x: np.ndarray,\n+    y: np.ndarray,\n+    z: np.ndarray,\n+    ax: Axes,\n+    xscale: ScaleOptions | None = None,\n+    yscale: ScaleOptions | None = None,\n+    infer_intervals=None,\n+    **kwargs: Any,\n+) -> QuadMesh:\n+    \"\"\"\n+    Pseudocolor plot of 2D DataArray.\n+\n+    Wraps :py:func:`matplotlib:matplotlib.pyplot.pcolormesh`.\n+    \"\"\"\n+\n+    # decide on a default for infer_intervals (GH781)\n+    x = np.asarray(x)\n+    if infer_intervals is None:\n+        if hasattr(ax, \"projection\"):\n+            if len(x.shape) == 1:\n+                infer_intervals = True\n+            else:\n+                infer_intervals = False\n+        else:\n+            infer_intervals = True\n+\n+    if (\n+        infer_intervals\n+        and not np.issubdtype(x.dtype, str)\n+        and (\n+            (np.shape(x)[0] == np.shape(z)[1])\n+            or ((x.ndim > 1) and (np.shape(x)[1] == np.shape(z)[1]))\n+        )\n+    ):\n+        if len(x.shape) == 1:\n+            x = _infer_interval_breaks(x, check_monotonic=True, scale=xscale)\n+        else:\n+            # we have to infer the intervals on both axes\n+            x = _infer_interval_breaks(x, axis=1, scale=xscale)\n+            x = _infer_interval_breaks(x, axis=0, scale=xscale)\n+\n+    if (\n+        infer_intervals\n+        and not np.issubdtype(y.dtype, str)\n+        and (np.shape(y)[0] == np.shape(z)[0])\n+    ):\n+        if len(y.shape) == 1:\n+            y = _infer_interval_breaks(y, check_monotonic=True, scale=yscale)\n+        else:\n+            # we have to infer the intervals on both axes\n+            y = _infer_interval_breaks(y, axis=1, scale=yscale)\n+            y = _infer_interval_breaks(y, axis=0, scale=yscale)\n+\n+    primitive = ax.pcolormesh(x, y, z, **kwargs)\n+\n+    # by default, pcolormesh picks \"round\" values for bounds\n+    # this results in ugly looking plots with lots of surrounding whitespace\n+    if not hasattr(ax, \"projection\") and x.ndim == 1 and y.ndim == 1:\n+        # not a cartopy geoaxis\n+        ax.set_xlim(x[0], x[-1])\n+        ax.set_ylim(y[0], y[-1])\n+\n+    return primitive\n+\n+\n+@overload\n+def surface(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: None = None,  # no wrap -> primitive\n+    col: None = None,  # no wrap -> primitive\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> Poly3DCollection:\n+    ...\n+\n+\n+@overload\n+def surface(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@overload\n+def surface(\n+    darray: DataArray,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    *,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: AspectOptions = None,\n+    ax: Axes | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    col: Hashable | None = None,\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool = True,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    cmap: str | Colormap | None = None,\n+    center: float | None = None,\n+    robust: bool = False,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    infer_intervals=None,\n+    colors: str | ArrayLike | None = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    norm: Normalize | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@_plot2d\n+def surface(\n+    x: np.ndarray, y: np.ndarray, z: np.ndarray, ax: Axes, **kwargs: Any\n+) -> Poly3DCollection:\n+    \"\"\"\n+    Surface plot of 2D DataArray.\n+\n+    Wraps :py:meth:`matplotlib:mpl_toolkits.mplot3d.axes3d.Axes3D.plot_surface`.\n+    \"\"\"\n+    primitive = ax.plot_surface(x, y, z, **kwargs)\n+    return primitive\ndiff --git a/xarray/plot/dataset_plot.py b/xarray/plot/dataset_plot.py\n--- a/xarray/plot/dataset_plot.py\n+++ b/xarray/plot/dataset_plot.py\n@@ -2,11 +2,12 @@\n \n import functools\n import inspect\n-from typing import TYPE_CHECKING, Any, Callable, Hashable, Mapping\n+import warnings\n+from typing import TYPE_CHECKING, Any, Callable, Hashable, Iterable, TypeVar, overload\n \n from ..core.alignment import broadcast\n+from . import dataarray_plot\n from .facetgrid import _easy_facetgrid\n-from .plot import _PlotMethods\n from .utils import (\n     _add_colorbar,\n     _get_nice_quiver_magnitude,\n@@ -16,24 +17,16 @@\n )\n \n if TYPE_CHECKING:\n-    from ..core.dataarray import DataArray\n-    from ..core.types import T_Dataset\n-\n-\n-class _Dataset_PlotMethods:\n-    \"\"\"\n-    Enables use of xarray.plot functions as attributes on a Dataset.\n-    For example, Dataset.plot.scatter\n-    \"\"\"\n+    from matplotlib.axes import Axes\n+    from matplotlib.collections import LineCollection, PathCollection\n+    from matplotlib.colors import Colormap, Normalize\n+    from matplotlib.quiver import Quiver\n+    from numpy.typing import ArrayLike\n \n-    def __init__(self, dataset):\n-        self._ds = dataset\n-\n-    def __call__(self, *args, **kwargs):\n-        raise ValueError(\n-            \"Dataset.plot cannot be called directly. Use \"\n-            \"an explicit plot method, e.g. ds.plot.scatter(...)\"\n-        )\n+    from ..core.dataarray import DataArray\n+    from ..core.dataset import Dataset\n+    from ..core.types import AspectOptions, ExtendOptions, HueStyleOptions, ScaleOptions\n+    from .facetgrid import FacetGrid\n \n \n def _dsplot(plotfunc):\n@@ -42,64 +35,62 @@ def _dsplot(plotfunc):\n     ----------\n \n     ds : Dataset\n-    x, y : str\n-        Variable names for the *x* and *y* grid positions.\n-    u, v : str, optional\n-        Variable names for the *u* and *v* velocities\n-        (in *x* and *y* direction, respectively; quiver/streamplot plots only).\n-    hue: str, optional\n+    x : Hashable or None, optional\n+        Variable name for x-axis.\n+    y : Hashable or None, optional\n+        Variable name for y-axis.\n+    u : Hashable or None, optional\n+        Variable name for the *u* velocity (in *x* direction).\n+        quiver/streamplot plots only.\n+    v : Hashable or None, optional\n+        Variable name for the *v* velocity (in *y* direction).\n+        quiver/streamplot plots only.\n+    hue: Hashable or None, optional\n         Variable by which to color scatter points or arrows.\n-    hue_style: {'continuous', 'discrete'}, optional\n+    hue_style: {'continuous', 'discrete'} or None, optional\n         How to use the ``hue`` variable:\n \n         - ``'continuous'`` -- continuous color scale\n           (default for numeric ``hue`` variables)\n         - ``'discrete'`` -- a color for each unique value, using the default color cycle\n           (default for non-numeric ``hue`` variables)\n-    markersize: str, optional\n-        Variable by which to vary the size of scattered points (scatter plot only).\n-    size_norm: matplotlib.colors.Normalize or tuple, optional\n-        Used to normalize the ``markersize`` variable.\n-        If a tuple is passed, the values will be passed to\n-        :py:class:`matplotlib:matplotlib.colors.Normalize` as arguments.\n-        Default: no normalization (``vmin=None``, ``vmax=None``, ``clip=False``).\n-    scale: scalar, optional\n-        Quiver only. Number of data units per arrow length unit.\n-        Use this to control the length of the arrows: larger values lead to\n-        smaller arrows.\n-    add_guide: bool, optional, default: True\n-        Add a guide that depends on ``hue_style``:\n \n-        - ``'continuous'`` -- build a colorbar\n-        - ``'discrete'`` -- build a legend\n-    row : str, optional\n+    row : Hashable or None, optional\n         If passed, make row faceted plots on this dimension name.\n-    col : str, optional\n+    col : Hashable or None, optional\n         If passed, make column faceted plots on this dimension name.\n     col_wrap : int, optional\n         Use together with ``col`` to wrap faceted plots.\n-    ax : matplotlib axes object, optional\n+    ax : matplotlib axes object or None, optional\n         If ``None``, use the current axes. Not applicable when using facets.\n-    subplot_kws : dict, optional\n+    figsize : Iterable[float] or None, optional\n+        A tuple (width, height) of the figure in inches.\n+        Mutually exclusive with ``size`` and ``ax``.\n+    size : scalar, optional\n+        If provided, create a new figure for the plot with the given size.\n+        Height (in inches) of each plot. See also: ``aspect``.\n+    aspect : \"auto\", \"equal\", scalar or None, optional\n+        Aspect ratio of plot, so that ``aspect * size`` gives the width in\n+        inches. Only used if a ``size`` is provided.\n+    sharex : bool or None, optional\n+        If True all subplots share the same x-axis.\n+    sharey : bool or None, optional\n+        If True all subplots share the same y-axis.\n+    add_guide: bool or None, optional\n+        Add a guide that depends on ``hue_style``:\n+\n+        - ``'continuous'`` -- build a colorbar\n+        - ``'discrete'`` -- build a legend\n+\n+    subplot_kws : dict or None, optional\n         Dictionary of keyword arguments for Matplotlib subplots\n         (see :py:meth:`matplotlib:matplotlib.figure.Figure.add_subplot`).\n         Only applies to FacetGrid plotting.\n-    aspect : scalar, optional\n-        Aspect ratio of plot, so that ``aspect * size`` gives the *width* in\n-        inches. Only used if a ``size`` is provided.\n-    size : scalar, optional\n-        If provided, create a new figure for the plot with the given size:\n-        *height* (in inches) of each plot. See also: ``aspect``.\n-    norm : matplotlib.colors.Normalize, optional\n-        If ``norm`` has ``vmin`` or ``vmax`` specified, the corresponding\n-        kwarg must be ``None``.\n-    vmin, vmax : float, optional\n-        Values to anchor the colormap, otherwise they are inferred from the\n-        data and other keyword arguments. When a diverging dataset is inferred,\n-        setting one of these values will fix the other by symmetry around\n-        ``center``. Setting both values prevents use of a diverging colormap.\n-        If discrete levels are provided as an explicit list, both of these\n-        values are ignored.\n+    cbar_kwargs : dict, optional\n+        Dictionary of keyword arguments to pass to the colorbar\n+        (see :meth:`matplotlib:matplotlib.figure.Figure.colorbar`).\n+    cbar_ax : matplotlib axes object, optional\n+        Axes in which to draw the colorbar.\n     cmap : matplotlib colormap name or colormap, optional\n         The mapping from data values to color space. Either a\n         Matplotlib colormap name or object. If not provided, this will\n@@ -113,9 +104,25 @@ def _dsplot(plotfunc):\n         `seaborn color palette <https://seaborn.pydata.org/tutorial/color_palettes.html>`_.\n         Note: if ``cmap`` is a seaborn color palette,\n         ``levels`` must also be specified.\n-    colors : str or array-like of color-like, optional\n-        A single color or a list of colors. The ``levels`` argument\n-        is required.\n+    vmin : float or None, optional\n+        Lower value to anchor the colormap, otherwise it is inferred from the\n+        data and other keyword arguments. When a diverging dataset is inferred,\n+        setting `vmin` or `vmax` will fix the other by symmetry around\n+        ``center``. Setting both values prevents use of a diverging colormap.\n+        If discrete levels are provided as an explicit list, both of these\n+        values are ignored.\n+    vmax : float or None, optional\n+        Upper value to anchor the colormap, otherwise it is inferred from the\n+        data and other keyword arguments. When a diverging dataset is inferred,\n+        setting `vmin` or `vmax` will fix the other by symmetry around\n+        ``center``. Setting both values prevents use of a diverging colormap.\n+        If discrete levels are provided as an explicit list, both of these\n+        values are ignored.\n+    norm : matplotlib.colors.Normalize, optional\n+        If ``norm`` has ``vmin`` or ``vmax`` specified, the corresponding\n+        kwarg must be ``None``.\n+    infer_intervals: bool | None\n+        If True the intervals are infered.\n     center : float, optional\n         The value at which to center the colormap. Passing this value implies\n         use of a diverging colormap. Setting it to ``False`` prevents use of a\n@@ -123,6 +130,9 @@ def _dsplot(plotfunc):\n     robust : bool, optional\n         If ``True`` and ``vmin`` or ``vmax`` are absent, the colormap range is\n         computed with 2nd and 98th percentiles instead of the extreme values.\n+    colors : str or array-like of color-like, optional\n+        A single color or a list of colors. The ``levels`` argument\n+        is required.\n     extend : {'neither', 'both', 'min', 'max'}, optional\n         How to draw arrows extending the colorbar beyond its limits. If not\n         provided, ``extend`` is inferred from ``vmin``, ``vmax`` and the data limits.\n@@ -139,40 +149,66 @@ def _dsplot(plotfunc):\n     # Build on the original docstring\n     plotfunc.__doc__ = f\"{plotfunc.__doc__}\\n{commondoc}\"\n \n-    @functools.wraps(plotfunc)\n+    @functools.wraps(\n+        plotfunc, assigned=(\"__module__\", \"__name__\", \"__qualname__\", \"__doc__\")\n+    )\n     def newplotfunc(\n-        ds,\n-        x=None,\n-        y=None,\n-        u=None,\n-        v=None,\n-        hue=None,\n-        hue_style=None,\n-        col=None,\n-        row=None,\n-        ax=None,\n-        figsize=None,\n-        size=None,\n-        col_wrap=None,\n-        sharex=True,\n-        sharey=True,\n-        aspect=None,\n-        subplot_kws=None,\n-        add_guide=None,\n-        cbar_kwargs=None,\n-        cbar_ax=None,\n-        vmin=None,\n-        vmax=None,\n-        norm=None,\n-        infer_intervals=None,\n-        center=None,\n-        levels=None,\n-        robust=None,\n-        colors=None,\n-        extend=None,\n-        cmap=None,\n-        **kwargs,\n-    ):\n+        ds: Dataset,\n+        *args: Any,\n+        x: Hashable | None = None,\n+        y: Hashable | None = None,\n+        u: Hashable | None = None,\n+        v: Hashable | None = None,\n+        hue: Hashable | None = None,\n+        hue_style: HueStyleOptions = None,\n+        row: Hashable | None = None,\n+        col: Hashable | None = None,\n+        col_wrap: int | None = None,\n+        ax: Axes | None = None,\n+        figsize: Iterable[float] | None = None,\n+        size: float | None = None,\n+        aspect: AspectOptions = None,\n+        sharex: bool = True,\n+        sharey: bool = True,\n+        add_guide: bool | None = None,\n+        subplot_kws: dict[str, Any] | None = None,\n+        cbar_kwargs: dict[str, Any] | None = None,\n+        cbar_ax: Axes | None = None,\n+        cmap: str | Colormap | None = None,\n+        vmin: float | None = None,\n+        vmax: float | None = None,\n+        norm: Normalize | None = None,\n+        infer_intervals: bool | None = None,\n+        center: float | None = None,\n+        robust: bool | None = None,\n+        colors: str | ArrayLike | None = None,\n+        extend: ExtendOptions = None,\n+        levels: ArrayLike | None = None,\n+        **kwargs: Any,\n+    ) -> Any:\n+\n+        if args:\n+            # TODO: Deprecated since 2022.10:\n+            msg = \"Using positional arguments is deprecated for plot methods, use keyword arguments instead.\"\n+            assert x is None\n+            x = args[0]\n+            if len(args) > 1:\n+                assert y is None\n+                y = args[1]\n+            if len(args) > 2:\n+                assert u is None\n+                u = args[2]\n+            if len(args) > 3:\n+                assert v is None\n+                v = args[3]\n+            if len(args) > 4:\n+                assert hue is None\n+                hue = args[4]\n+            if len(args) > 5:\n+                raise ValueError(msg)\n+            else:\n+                warnings.warn(msg, DeprecationWarning, stacklevel=2)\n+        del args\n \n         _is_facetgrid = kwargs.pop(\"_is_facetgrid\", False)\n         if _is_facetgrid:  # facetgrid call\n@@ -271,61 +307,138 @@ def newplotfunc(\n \n         return primitive\n \n-    @functools.wraps(newplotfunc)\n-    def plotmethod(\n-        _PlotMethods_obj,\n-        x=None,\n-        y=None,\n-        u=None,\n-        v=None,\n-        hue=None,\n-        hue_style=None,\n-        col=None,\n-        row=None,\n-        ax=None,\n-        figsize=None,\n-        col_wrap=None,\n-        sharex=True,\n-        sharey=True,\n-        aspect=None,\n-        size=None,\n-        subplot_kws=None,\n-        add_guide=None,\n-        cbar_kwargs=None,\n-        cbar_ax=None,\n-        vmin=None,\n-        vmax=None,\n-        norm=None,\n-        infer_intervals=None,\n-        center=None,\n-        levels=None,\n-        robust=None,\n-        colors=None,\n-        extend=None,\n-        cmap=None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        The method should have the same signature as the function.\n-\n-        This just makes the method work on Plotmethods objects,\n-        and passes all the other arguments straight through.\n-        \"\"\"\n-        allargs = locals()\n-        allargs[\"ds\"] = _PlotMethods_obj._ds\n-        allargs.update(kwargs)\n-        for arg in [\"_PlotMethods_obj\", \"newplotfunc\", \"kwargs\"]:\n-            del allargs[arg]\n-        return newplotfunc(**allargs)\n-\n-    # Add to class _PlotMethods\n-    setattr(_Dataset_PlotMethods, plotmethod.__name__, plotmethod)\n+    # we want to actually expose the signature of newplotfunc\n+    # and not the copied **kwargs from the plotfunc which\n+    # functools.wraps adds, so delete the wrapped attr\n+    del newplotfunc.__wrapped__\n \n     return newplotfunc\n \n \n+@overload\n+def quiver(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    u: Hashable | None = None,\n+    v: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    col: None = None,  # no wrap -> primitive\n+    row: None = None,  # no wrap -> primitive\n+    ax: Axes | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    col_wrap: int | None = None,\n+    sharex: bool = True,\n+    sharey: bool = True,\n+    aspect: AspectOptions = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    add_guide: bool | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    infer_intervals: bool | None = None,\n+    center: float | None = None,\n+    levels: ArrayLike | None = None,\n+    robust: bool | None = None,\n+    colors: str | ArrayLike | None = None,\n+    extend: ExtendOptions = None,\n+    cmap: str | Colormap | None = None,\n+    **kwargs: Any,\n+) -> Quiver:\n+    ...\n+\n+\n+@overload\n+def quiver(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    u: Hashable | None = None,\n+    v: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    row: Hashable | None = None,\n+    ax: Axes | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    col_wrap: int | None = None,\n+    sharex: bool = True,\n+    sharey: bool = True,\n+    aspect: AspectOptions = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    add_guide: bool | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    infer_intervals: bool | None = None,\n+    center: float | None = None,\n+    levels: ArrayLike | None = None,\n+    robust: bool | None = None,\n+    colors: str | ArrayLike | None = None,\n+    extend: ExtendOptions = None,\n+    cmap: str | Colormap | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[Dataset]:\n+    ...\n+\n+\n+@overload\n+def quiver(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    u: Hashable | None = None,\n+    v: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    col: Hashable | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    ax: Axes | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    col_wrap: int | None = None,\n+    sharex: bool = True,\n+    sharey: bool = True,\n+    aspect: AspectOptions = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    add_guide: bool | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    infer_intervals: bool | None = None,\n+    center: float | None = None,\n+    levels: ArrayLike | None = None,\n+    robust: bool | None = None,\n+    colors: str | ArrayLike | None = None,\n+    extend: ExtendOptions = None,\n+    cmap: str | Colormap | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[Dataset]:\n+    ...\n+\n+\n @_dsplot\n-def quiver(ds, x, y, ax, u, v, **kwargs):\n+def quiver(\n+    ds: Dataset,\n+    x: Hashable,\n+    y: Hashable,\n+    ax: Axes,\n+    u: Hashable,\n+    v: Hashable,\n+    **kwargs: Any,\n+) -> Quiver:\n     \"\"\"Quiver plot of Dataset variables.\n \n     Wraps :py:func:`matplotlib:matplotlib.pyplot.quiver`.\n@@ -335,9 +448,9 @@ def quiver(ds, x, y, ax, u, v, **kwargs):\n     if x is None or y is None or u is None or v is None:\n         raise ValueError(\"Must specify x, y, u, v for quiver plots.\")\n \n-    x, y, u, v = broadcast(ds[x], ds[y], ds[u], ds[v])\n+    dx, dy, du, dv = broadcast(ds[x], ds[y], ds[u], ds[v])\n \n-    args = [x.values, y.values, u.values, v.values]\n+    args = [dx.values, dy.values, du.values, dv.values]\n     hue = kwargs.pop(\"hue\")\n     cmap_params = kwargs.pop(\"cmap_params\")\n \n@@ -356,8 +469,130 @@ def quiver(ds, x, y, ax, u, v, **kwargs):\n     return hdl\n \n \n+@overload\n+def streamplot(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    u: Hashable | None = None,\n+    v: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    col: None = None,  # no wrap -> primitive\n+    row: None = None,  # no wrap -> primitive\n+    ax: Axes | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    col_wrap: int | None = None,\n+    sharex: bool = True,\n+    sharey: bool = True,\n+    aspect: AspectOptions = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    add_guide: bool | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    infer_intervals: bool | None = None,\n+    center: float | None = None,\n+    levels: ArrayLike | None = None,\n+    robust: bool | None = None,\n+    colors: str | ArrayLike | None = None,\n+    extend: ExtendOptions = None,\n+    cmap: str | Colormap | None = None,\n+    **kwargs: Any,\n+) -> LineCollection:\n+    ...\n+\n+\n+@overload\n+def streamplot(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    u: Hashable | None = None,\n+    v: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    row: Hashable | None = None,\n+    ax: Axes | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    col_wrap: int | None = None,\n+    sharex: bool = True,\n+    sharey: bool = True,\n+    aspect: AspectOptions = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    add_guide: bool | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    infer_intervals: bool | None = None,\n+    center: float | None = None,\n+    levels: ArrayLike | None = None,\n+    robust: bool | None = None,\n+    colors: str | ArrayLike | None = None,\n+    extend: ExtendOptions = None,\n+    cmap: str | Colormap | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[Dataset]:\n+    ...\n+\n+\n+@overload\n+def streamplot(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    u: Hashable | None = None,\n+    v: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    col: Hashable | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    ax: Axes | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    col_wrap: int | None = None,\n+    sharex: bool = True,\n+    sharey: bool = True,\n+    aspect: AspectOptions = None,\n+    subplot_kws: dict[str, Any] | None = None,\n+    add_guide: bool | None = None,\n+    cbar_kwargs: dict[str, Any] | None = None,\n+    cbar_ax: Axes | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    infer_intervals: bool | None = None,\n+    center: float | None = None,\n+    levels: ArrayLike | None = None,\n+    robust: bool | None = None,\n+    colors: str | ArrayLike | None = None,\n+    extend: ExtendOptions = None,\n+    cmap: str | Colormap | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[Dataset]:\n+    ...\n+\n+\n @_dsplot\n-def streamplot(ds, x, y, ax, u, v, **kwargs):\n+def streamplot(\n+    ds: Dataset,\n+    x: Hashable,\n+    y: Hashable,\n+    ax: Axes,\n+    u: Hashable,\n+    v: Hashable,\n+    **kwargs: Any,\n+) -> LineCollection:\n     \"\"\"Plot streamlines of Dataset variables.\n \n     Wraps :py:func:`matplotlib:matplotlib.pyplot.streamplot`.\n@@ -372,25 +607,27 @@ def streamplot(ds, x, y, ax, u, v, **kwargs):\n     # the dimension of x must be the second dimension. 'y' cannot vary with 'columns' so\n     # the dimension of y must be the first dimension. If x and y are both 2d, assume the\n     # user has got them right already.\n-    if len(ds[x].dims) == 1:\n-        xdim = ds[x].dims[0]\n-    if len(ds[y].dims) == 1:\n-        ydim = ds[y].dims[0]\n+    xdim = ds[x].dims[0] if len(ds[x].dims) == 1 else None\n+    ydim = ds[y].dims[0] if len(ds[y].dims) == 1 else None\n     if xdim is not None and ydim is None:\n-        ydim = set(ds[y].dims) - {xdim}\n+        ydims = set(ds[y].dims) - {xdim}\n+        if len(ydims) == 1:\n+            ydim = next(iter(ydims))\n     if ydim is not None and xdim is None:\n-        xdim = set(ds[x].dims) - {ydim}\n+        xdims = set(ds[x].dims) - {ydim}\n+        if len(xdims) == 1:\n+            xdim = next(iter(xdims))\n \n-    x, y, u, v = broadcast(ds[x], ds[y], ds[u], ds[v])\n+    dx, dy, du, dv = broadcast(ds[x], ds[y], ds[u], ds[v])\n \n     if xdim is not None and ydim is not None:\n         # Need to ensure the arrays are transposed correctly\n-        x = x.transpose(ydim, xdim)\n-        y = y.transpose(ydim, xdim)\n-        u = u.transpose(ydim, xdim)\n-        v = v.transpose(ydim, xdim)\n+        dx = dx.transpose(ydim, xdim)\n+        dy = dy.transpose(ydim, xdim)\n+        du = du.transpose(ydim, xdim)\n+        dv = dv.transpose(ydim, xdim)\n \n-    args = [x.values, y.values, u.values, v.values]\n+    args = [dx.values, dy.values, du.values, dv.values]\n     hue = kwargs.pop(\"hue\")\n     cmap_params = kwargs.pop(\"cmap_params\")\n \n@@ -410,12 +647,12 @@ def streamplot(ds, x, y, ax, u, v, **kwargs):\n     return hdl.lines\n \n \n-def _attach_to_plot_class(plotfunc: Callable) -> None:\n-    \"\"\"\n-    Set the function to the plot class and add a common docstring.\n+F = TypeVar(\"F\", bound=Callable)\n \n-    Use this decorator when relying on DataArray.plot methods for\n-    creating the Dataset plot.\n+\n+def _update_doc_to_dataset(dataarray_plotfunc: Callable) -> Callable[[F], F]:\n+    \"\"\"\n+    Add a common docstring by re-using the DataArray one.\n \n     TODO: Reduce code duplication.\n \n@@ -424,42 +661,48 @@ def _attach_to_plot_class(plotfunc: Callable) -> None:\n       handle the conversion between Dataset and DataArray.\n     * Improve docstring handling, maybe reword the DataArray versions to\n       explain Datasets better.\n-    * Consider automatically adding all _PlotMethods to\n-      _Dataset_PlotMethods.\n \n     Parameters\n     ----------\n-    plotfunc : function\n+    dataarray_plotfunc : Callable\n         Function that returns a finished plot primitive.\n     \"\"\"\n-    # Build on the original docstring:\n-    original_doc = getattr(_PlotMethods, plotfunc.__name__, object)\n-    commondoc = original_doc.__doc__\n-    if commondoc is not None:\n-        doc_warning = (\n-            f\"This docstring was copied from xr.DataArray.plot.{original_doc.__name__}.\"\n-            \" Some inconsistencies may exist.\"\n-        )\n-        # Add indentation so it matches the original doc:\n-        commondoc = f\"\\n\\n    {doc_warning}\\n\\n    {commondoc}\"\n+\n+    # Build on the original docstring\n+    da_doc = dataarray_plotfunc.__doc__\n+    if da_doc is None:\n+        raise NotImplementedError(\"DataArray plot method requires a docstring\")\n+\n+    da_str = \"\"\"\n+    Parameters\n+    ----------\n+    darray : DataArray\n+    \"\"\"\n+    ds_str = \"\"\"\n+\n+    The `y` DataArray will be used as base, any other variables are added as coords.\n+\n+    Parameters\n+    ----------\n+    ds : Dataset\n+    \"\"\"\n+    # TODO: improve this?\n+    if da_str in da_doc:\n+        ds_doc = da_doc.replace(da_str, ds_str).replace(\"darray\", \"ds\")\n     else:\n-        commondoc = \"\"\n-    plotfunc.__doc__ = (\n-        f\"    {plotfunc.__doc__}\\n\\n\"\n-        \"    The `y` DataArray will be used as base,\"\n-        \"    any other variables are added as coords.\\n\\n\"\n-        f\"{commondoc}\"\n-    )\n+        ds_doc = da_doc\n \n-    @functools.wraps(plotfunc)\n-    def plotmethod(self, *args, **kwargs):\n-        return plotfunc(self._ds, *args, **kwargs)\n+    @functools.wraps(dataarray_plotfunc)\n+    def wrapper(dataset_plotfunc: F) -> F:\n+        dataset_plotfunc.__doc__ = ds_doc\n+        return dataset_plotfunc\n \n-    # Add to class _PlotMethods\n-    setattr(_Dataset_PlotMethods, plotmethod.__name__, plotmethod)\n+    return wrapper\n \n \n-def _normalize_args(plotmethod: str, args, kwargs) -> dict[str, Any]:\n+def _normalize_args(\n+    plotmethod: str, args: tuple[Any, ...], kwargs: dict[str, Any]\n+) -> dict[str, Any]:\n     from ..core.dataarray import DataArray\n \n     # Determine positional arguments keyword by inspecting the\n@@ -474,7 +717,7 @@ def _normalize_args(plotmethod: str, args, kwargs) -> dict[str, Any]:\n     return locals_\n \n \n-def _temp_dataarray(ds: T_Dataset, y: Hashable, locals_: Mapping) -> DataArray:\n+def _temp_dataarray(ds: Dataset, y: Hashable, locals_: dict[str, Any]) -> DataArray:\n     \"\"\"Create a temporary datarray with extra coords.\"\"\"\n     from ..core.dataarray import DataArray\n \n@@ -499,12 +742,175 @@ def _temp_dataarray(ds: T_Dataset, y: Hashable, locals_: Mapping) -> DataArray:\n     return DataArray(_y, coords=coords)\n \n \n-@_attach_to_plot_class\n-def scatter(ds: T_Dataset, x: Hashable, y: Hashable, *args, **kwargs):\n+@overload\n+def scatter(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    z: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    markersize: Hashable | None = None,\n+    linewidth: Hashable | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: float | None = None,\n+    ax: Axes | None = None,\n+    row: None = None,  # no wrap -> primitive\n+    col: None = None,  # no wrap -> primitive\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_legend: bool | None = None,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool | Iterable[bool] = True,\n+    add_title: bool = True,\n+    subplot_kws: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    cmap: str | Colormap | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    **kwargs: Any,\n+) -> PathCollection:\n+    ...\n+\n+\n+@overload\n+def scatter(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    z: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    markersize: Hashable | None = None,\n+    linewidth: Hashable | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: float | None = None,\n+    ax: Axes | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable,  # wrap -> FacetGrid\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_legend: bool | None = None,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool | Iterable[bool] = True,\n+    add_title: bool = True,\n+    subplot_kws: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    cmap: str | Colormap | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@overload\n+def scatter(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    z: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    markersize: Hashable | None = None,\n+    linewidth: Hashable | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: float | None = None,\n+    ax: Axes | None = None,\n+    row: Hashable,  # wrap -> FacetGrid\n+    col: Hashable | None = None,\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_legend: bool | None = None,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool | Iterable[bool] = True,\n+    add_title: bool = True,\n+    subplot_kws: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    cmap: str | Colormap | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    **kwargs: Any,\n+) -> FacetGrid[DataArray]:\n+    ...\n+\n+\n+@_update_doc_to_dataset(dataarray_plot.scatter)\n+def scatter(\n+    ds: Dataset,\n+    *args: Any,\n+    x: Hashable | None = None,\n+    y: Hashable | None = None,\n+    z: Hashable | None = None,\n+    hue: Hashable | None = None,\n+    hue_style: HueStyleOptions = None,\n+    markersize: Hashable | None = None,\n+    linewidth: Hashable | None = None,\n+    figsize: Iterable[float] | None = None,\n+    size: float | None = None,\n+    aspect: float | None = None,\n+    ax: Axes | None = None,\n+    row: Hashable | None = None,\n+    col: Hashable | None = None,\n+    col_wrap: int | None = None,\n+    xincrease: bool | None = True,\n+    yincrease: bool | None = True,\n+    add_legend: bool | None = None,\n+    add_colorbar: bool | None = None,\n+    add_labels: bool | Iterable[bool] = True,\n+    add_title: bool = True,\n+    subplot_kws: dict[str, Any] | None = None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+    cmap: str | Colormap | None = None,\n+    vmin: float | None = None,\n+    vmax: float | None = None,\n+    norm: Normalize | None = None,\n+    extend: ExtendOptions = None,\n+    levels: ArrayLike | None = None,\n+    **kwargs: Any,\n+) -> PathCollection | FacetGrid[DataArray]:\n     \"\"\"Scatter plot Dataset data variables against each other.\"\"\"\n-    plotmethod = \"scatter\"\n-    kwargs.update(x=x)\n-    locals_ = _normalize_args(plotmethod, args, kwargs)\n+    locals_ = locals()\n+    del locals_[\"ds\"]\n+    locals_.update(locals_.pop(\"kwargs\", {}))\n     da = _temp_dataarray(ds, y, locals_)\n \n-    return getattr(da.plot, plotmethod)(*locals_.pop(\"args\", ()), **locals_)\n+    return da.plot.scatter(*locals_.pop(\"args\", ()), **locals_)\ndiff --git a/xarray/plot/facetgrid.py b/xarray/plot/facetgrid.py\n--- a/xarray/plot/facetgrid.py\n+++ b/xarray/plot/facetgrid.py\n@@ -3,18 +3,27 @@\n import functools\n import itertools\n import warnings\n-from typing import TYPE_CHECKING, Any, Callable, Hashable, Iterable, Literal\n+from typing import (\n+    TYPE_CHECKING,\n+    Any,\n+    Callable,\n+    Generic,\n+    Hashable,\n+    Iterable,\n+    Literal,\n+    TypeVar,\n+)\n \n import numpy as np\n \n from ..core.formatting import format_item\n+from ..core.types import HueStyleOptions, T_Xarray\n from .utils import (\n     _LINEWIDTH_RANGE,\n     _MARKERSIZE_RANGE,\n     _add_legend,\n     _determine_guide,\n     _get_nice_quiver_magnitude,\n-    _infer_meta_data,\n     _infer_xy_labels,\n     _Normalize,\n     _parse_size,\n@@ -32,9 +41,6 @@\n     from matplotlib.quiver import QuiverKey\n     from matplotlib.text import Annotation\n \n-    from ..core.dataarray import DataArray\n-    from ..core.types import HueStyleOptions, Self\n-\n # Overrides axes.labelsize, xtick.major.size, ytick.major.size\n # from mpl.rcParams\n _FONTSIZE = \"small\"\n@@ -55,7 +61,10 @@ def _nicetitle(coord, value, maxchar, template):\n     return title\n \n \n-class FacetGrid:\n+T_FacetGrid = TypeVar(\"T_FacetGrid\", bound=\"FacetGrid\")\n+\n+\n+class FacetGrid(Generic[T_Xarray]):\n     \"\"\"\n     Initialize the Matplotlib figure and FacetGrid object.\n \n@@ -96,7 +105,7 @@ class FacetGrid:\n         sometimes the rightmost grid positions in the bottom row.\n     \"\"\"\n \n-    data: DataArray\n+    data: T_Xarray\n     name_dicts: np.ndarray\n     fig: Figure\n     axes: np.ndarray\n@@ -121,7 +130,7 @@ class FacetGrid:\n \n     def __init__(\n         self,\n-        data: DataArray,\n+        data: T_Xarray,\n         col: Hashable | None = None,\n         row: Hashable | None = None,\n         col_wrap: int | None = None,\n@@ -135,8 +144,8 @@ def __init__(\n         \"\"\"\n         Parameters\n         ----------\n-        data : DataArray\n-            xarray DataArray to be plotted.\n+        data : DataArray or Dataset\n+            DataArray or Dataset to be plotted.\n         row, col : str\n             Dimension names that define subsets of the data, which will be drawn\n             on separate facets in the grid.\n@@ -278,8 +287,12 @@ def _bottom_axes(self) -> np.ndarray:\n         return self.axes[-1, :]\n \n     def map_dataarray(\n-        self, func: Callable, x: Hashable | None, y: Hashable | None, **kwargs: Any\n-    ) -> FacetGrid:\n+        self: T_FacetGrid,\n+        func: Callable,\n+        x: Hashable | None,\n+        y: Hashable | None,\n+        **kwargs: Any,\n+    ) -> T_FacetGrid:\n         \"\"\"\n         Apply a plotting function to a 2d facet's subset of the data.\n \n@@ -347,8 +360,12 @@ def map_dataarray(\n         return self\n \n     def map_plot1d(\n-        self, func: Callable, x: Hashable, y: Hashable, **kwargs: Any\n-    ) -> Self:\n+        self: T_FacetGrid,\n+        func: Callable,\n+        x: Hashable | None,\n+        y: Hashable | None,\n+        **kwargs: Any,\n+    ) -> T_FacetGrid:\n         \"\"\"\n         Apply a plotting function to a 1d facet's subset of the data.\n \n@@ -404,7 +421,7 @@ def map_plot1d(\n             size = kwargs.get(_size, None)\n \n             sizeplt = self.data[size] if size else None\n-            sizeplt_norm = _Normalize(sizeplt, _size_r)\n+            sizeplt_norm = _Normalize(data=sizeplt, width=_size_r)\n             if size:\n                 self.data[size] = sizeplt_norm.values\n                 kwargs.update(**{_size: size})\n@@ -501,7 +518,7 @@ def map_plot1d(\n         return self\n \n     def map_dataarray_line(\n-        self,\n+        self: T_FacetGrid,\n         func: Callable,\n         x: Hashable | None,\n         y: Hashable | None,\n@@ -509,8 +526,8 @@ def map_dataarray_line(\n         add_legend: bool = True,\n         _labels=None,\n         **kwargs: Any,\n-    ) -> FacetGrid:\n-        from .plot import _infer_line_data\n+    ) -> T_FacetGrid:\n+        from .dataarray_plot import _infer_line_data\n \n         for d, ax in zip(self.name_dicts.flat, self.axes.flat):\n             # None is the sentinel value\n@@ -543,7 +560,7 @@ def map_dataarray_line(\n         return self\n \n     def map_dataset(\n-        self,\n+        self: T_FacetGrid,\n         func: Callable,\n         x: Hashable | None = None,\n         y: Hashable | None = None,\n@@ -551,7 +568,8 @@ def map_dataset(\n         hue_style: HueStyleOptions = None,\n         add_guide: bool | None = None,\n         **kwargs: Any,\n-    ) -> FacetGrid:\n+    ) -> T_FacetGrid:\n+        from .dataset_plot import _infer_meta_data\n \n         kwargs[\"add_guide\"] = False\n \n@@ -706,7 +724,7 @@ def _get_largest_lims(self) -> dict[str, tuple[float, float]]:\n         Examples\n         --------\n         >>> ds = xr.tutorial.scatter_example_dataset(seed=42)\n-        >>> fg = ds.plot.scatter(\"A\", \"B\", hue=\"y\", row=\"x\", col=\"w\")\n+        >>> fg = ds.plot.scatter(x=\"A\", y=\"B\", hue=\"y\", row=\"x\", col=\"w\")\n         >>> round(fg._get_largest_lims()[\"x\"][0], 3)\n         -0.334\n         \"\"\"\n@@ -748,7 +766,7 @@ def _set_lims(\n         Examples\n         --------\n         >>> ds = xr.tutorial.scatter_example_dataset(seed=42)\n-        >>> fg = ds.plot.scatter(\"A\", \"B\", hue=\"y\", row=\"x\", col=\"w\")\n+        >>> fg = ds.plot.scatter(x=\"A\", y=\"B\", hue=\"y\", row=\"x\", col=\"w\")\n         >>> fg._set_lims(x=(-0.3, 0.3), y=(0, 2), z=(0, 4))\n         >>> fg.axes[0, 0].get_xlim(), fg.axes[0, 0].get_ylim()\n         ((-0.3, 0.3), (0.0, 2.0))\n@@ -899,7 +917,9 @@ def set_ticks(\n             ):\n                 tick.label1.set_fontsize(fontsize)\n \n-    def map(self, func: Callable, *args: Any, **kwargs: Any) -> FacetGrid:\n+    def map(\n+        self: T_FacetGrid, func: Callable, *args: Hashable, **kwargs: Any\n+    ) -> T_FacetGrid:\n         \"\"\"\n         Apply a plotting function to each facet's subset of the data.\n \n@@ -910,7 +930,7 @@ def map(self, func: Callable, *args: Any, **kwargs: Any) -> FacetGrid:\n             must plot to the currently active matplotlib Axes and take a\n             `color` keyword argument. If faceting on the `hue` dimension,\n             it must also take a `label` keyword argument.\n-        *args : strings\n+        *args : Hashable\n             Column names in self.data that identify variables with data to\n             plot. The data for each variable is passed to `func` in the\n             order the variables are specified in the call.\n@@ -941,7 +961,7 @@ def map(self, func: Callable, *args: Any, **kwargs: Any) -> FacetGrid:\n \n \n def _easy_facetgrid(\n-    data: DataArray,\n+    data: T_Xarray,\n     plotfunc: Callable,\n     kind: Literal[\"line\", \"dataarray\", \"dataset\", \"plot1d\"],\n     x: Hashable | None = None,\n@@ -957,7 +977,7 @@ def _easy_facetgrid(\n     ax: Axes | None = None,\n     figsize: Iterable[float] | None = None,\n     **kwargs: Any,\n-) -> FacetGrid:\n+) -> FacetGrid[T_Xarray]:\n     \"\"\"\n     Convenience method to call xarray.plot.FacetGrid from 2d plotting methods\n \n@@ -1001,4 +1021,6 @@ def _easy_facetgrid(\n     if kind == \"dataset\":\n         return g.map_dataset(plotfunc, x, y, **kwargs)\n \n-    raise ValueError(f\"kind must be one of `line`, `dataarray`, `dataset`, got {kind}\")\n+    raise ValueError(\n+        f\"kind must be one of `line`, `dataarray`, `dataset` or `plot1d`, got {kind}\"\n+    )\ndiff --git a/xarray/plot/plot.py b/xarray/plot/plot.py\ndeleted file mode 100644\n--- a/xarray/plot/plot.py\n+++ /dev/null\n@@ -1,1555 +0,0 @@\n-\"\"\"\n-Use this module directly:\n-    import xarray.plot as xplt\n-\n-Or use the methods on a DataArray or Dataset:\n-    DataArray.plot._____\n-    Dataset.plot._____\n-\"\"\"\n-from __future__ import annotations\n-\n-import functools\n-from typing import TYPE_CHECKING, Any, Hashable, Iterable, MutableMapping, Sequence\n-\n-import numpy as np\n-import pandas as pd\n-from packaging.version import Version\n-\n-from ..core.alignment import broadcast\n-from ..core.concat import concat\n-from .facetgrid import _easy_facetgrid\n-from .utils import (\n-    _LINEWIDTH_RANGE,\n-    _MARKERSIZE_RANGE,\n-    _add_colorbar,\n-    _add_legend,\n-    _assert_valid_xy,\n-    _determine_guide,\n-    _ensure_plottable,\n-    _infer_interval_breaks,\n-    _infer_xy_labels,\n-    _Normalize,\n-    _process_cmap_cbar_kwargs,\n-    _rescale_imshow_rgb,\n-    _resolve_intervals_1dplot,\n-    _resolve_intervals_2dplot,\n-    _update_axes,\n-    get_axis,\n-    import_matplotlib_pyplot,\n-    label_from_attrs,\n-)\n-\n-if TYPE_CHECKING:\n-    from ..core.types import T_DataArray\n-    from .facetgrid import FacetGrid\n-\n-    try:\n-        import matplotlib.pyplot as plt\n-    except ImportError:\n-        plt: Any = None  # type: ignore\n-\n-    Collection = plt.matplotlib.collections.Collection\n-\n-\n-def _infer_line_data(darray, x, y, hue):\n-\n-    ndims = len(darray.dims)\n-\n-    if x is not None and y is not None:\n-        raise ValueError(\"Cannot specify both x and y kwargs for line plots.\")\n-\n-    if x is not None:\n-        _assert_valid_xy(darray, x, \"x\")\n-\n-    if y is not None:\n-        _assert_valid_xy(darray, y, \"y\")\n-\n-    if ndims == 1:\n-        huename = None\n-        hueplt = None\n-        huelabel = \"\"\n-\n-        if x is not None:\n-            xplt = darray[x]\n-            yplt = darray\n-\n-        elif y is not None:\n-            xplt = darray\n-            yplt = darray[y]\n-\n-        else:  # Both x & y are None\n-            dim = darray.dims[0]\n-            xplt = darray[dim]\n-            yplt = darray\n-\n-    else:\n-        if x is None and y is None and hue is None:\n-            raise ValueError(\"For 2D inputs, please specify either hue, x or y.\")\n-\n-        if y is None:\n-            if hue is not None:\n-                _assert_valid_xy(darray, hue, \"hue\")\n-            xname, huename = _infer_xy_labels(darray=darray, x=x, y=hue)\n-            xplt = darray[xname]\n-            if xplt.ndim > 1:\n-                if huename in darray.dims:\n-                    otherindex = 1 if darray.dims.index(huename) == 0 else 0\n-                    otherdim = darray.dims[otherindex]\n-                    yplt = darray.transpose(otherdim, huename, transpose_coords=False)\n-                    xplt = xplt.transpose(otherdim, huename, transpose_coords=False)\n-                else:\n-                    raise ValueError(\n-                        \"For 2D inputs, hue must be a dimension\"\n-                        \" i.e. one of \" + repr(darray.dims)\n-                    )\n-\n-            else:\n-                (xdim,) = darray[xname].dims\n-                (huedim,) = darray[huename].dims\n-                yplt = darray.transpose(xdim, huedim)\n-\n-        else:\n-            yname, huename = _infer_xy_labels(darray=darray, x=y, y=hue)\n-            yplt = darray[yname]\n-            if yplt.ndim > 1:\n-                if huename in darray.dims:\n-                    otherindex = 1 if darray.dims.index(huename) == 0 else 0\n-                    otherdim = darray.dims[otherindex]\n-                    xplt = darray.transpose(otherdim, huename, transpose_coords=False)\n-                    yplt = yplt.transpose(otherdim, huename, transpose_coords=False)\n-                else:\n-                    raise ValueError(\n-                        \"For 2D inputs, hue must be a dimension\"\n-                        \" i.e. one of \" + repr(darray.dims)\n-                    )\n-\n-            else:\n-                (ydim,) = darray[yname].dims\n-                (huedim,) = darray[huename].dims\n-                xplt = darray.transpose(ydim, huedim)\n-\n-        huelabel = label_from_attrs(darray[huename])\n-        hueplt = darray[huename]\n-\n-    return xplt, yplt, hueplt, huelabel\n-\n-\n-def _infer_plot_dims(\n-    darray: T_DataArray,\n-    dims_plot: MutableMapping[str, Hashable],\n-    default_guess: Iterable[str] = (\"x\", \"hue\", \"size\"),\n-) -> MutableMapping[str, Hashable]:\n-    \"\"\"\n-    Guess what dims to plot if some of the values in dims_plot are None which\n-    happens when the user has not defined all available ways of visualizing\n-    the data.\n-\n-    Parameters\n-    ----------\n-    darray : T_DataArray\n-        The DataArray to check.\n-    dims_plot : T_DimsPlot\n-        Dims defined by the user to plot.\n-    default_guess : Iterable[str], optional\n-        Default values and order to retrieve dims if values in dims_plot is\n-        missing, default: (\"x\", \"hue\", \"size\").\n-    \"\"\"\n-    dims_plot_exist = {k: v for k, v in dims_plot.items() if v is not None}\n-    dims_avail = tuple(v for v in darray.dims if v not in dims_plot_exist.values())\n-\n-    # If dims_plot[k] isn't defined then fill with one of the available dims:\n-    for k, v in zip(default_guess, dims_avail):\n-        if dims_plot.get(k, None) is None:\n-            dims_plot[k] = v\n-\n-    for k, v in dims_plot.items():\n-        _assert_valid_xy(darray, v, k)\n-\n-    return dims_plot\n-\n-\n-def _infer_line_data2(\n-    darray: T_DataArray,\n-    dims_plot: MutableMapping[str, Hashable],\n-    plotfunc_name: None | str = None,\n-) -> dict[str, T_DataArray]:\n-    # Guess what dims to use if some of the values in plot_dims are None:\n-    dims_plot = _infer_plot_dims(darray, dims_plot)\n-\n-    # If there are more than 1 dimension in the array than stack all the\n-    # dimensions so the plotter can plot anything:\n-    if darray.ndim > 1:\n-        # When stacking dims the lines will continue connecting. For floats\n-        # this can be solved by adding a nan element inbetween the flattening\n-        # points:\n-        dims_T = []\n-        if np.issubdtype(darray.dtype, np.floating):\n-            for v in [\"z\", \"x\"]:\n-                dim = dims_plot.get(v, None)\n-                if (dim is not None) and (dim in darray.dims):\n-                    darray_nan = np.nan * darray.isel({dim: -1})\n-                    darray = concat([darray, darray_nan], dim=dim)\n-                    dims_T.append(dims_plot[v])\n-\n-        # Lines should never connect to the same coordinate when stacked,\n-        # transpose to avoid this as much as possible:\n-        darray = darray.transpose(..., *dims_T)\n-\n-        # Array is now ready to be stacked:\n-        darray = darray.stack(_stacked_dim=darray.dims)\n-\n-    # Broadcast together all the chosen variables:\n-    out = dict(y=darray)\n-    out.update({k: darray[v] for k, v in dims_plot.items() if v is not None})\n-    out = dict(zip(out.keys(), broadcast(*(out.values()))))\n-\n-    return out\n-\n-\n-def plot(\n-    darray,\n-    row=None,\n-    col=None,\n-    col_wrap=None,\n-    ax=None,\n-    hue=None,\n-    rtol=0.01,\n-    subplot_kws=None,\n-    **kwargs,\n-):\n-    \"\"\"\n-    Default plot of DataArray using :py:mod:`matplotlib:matplotlib.pyplot`.\n-\n-    Calls xarray plotting function based on the dimensions of\n-    the squeezed DataArray.\n-\n-    =============== ===========================\n-    Dimensions      Plotting function\n-    =============== ===========================\n-    1               :py:func:`xarray.plot.line`\n-    2               :py:func:`xarray.plot.pcolormesh`\n-    Anything else   :py:func:`xarray.plot.hist`\n-    =============== ===========================\n-\n-    Parameters\n-    ----------\n-    darray : DataArray\n-    row : str, optional\n-        If passed, make row faceted plots on this dimension name.\n-    col : str, optional\n-        If passed, make column faceted plots on this dimension name.\n-    hue : str, optional\n-        If passed, make faceted line plots with hue on this dimension name.\n-    col_wrap : int, optional\n-        Use together with ``col`` to wrap faceted plots.\n-    ax : matplotlib axes object, optional\n-        Axes on which to plot. By default, use the current axes.\n-        Mutually exclusive with ``size``, ``figsize`` and facets.\n-    rtol : float, optional\n-        Relative tolerance used to determine if the indexes\n-        are uniformly spaced. Usually a small positive number.\n-    subplot_kws : dict, optional\n-        Dictionary of keyword arguments for Matplotlib subplots\n-        (see :py:meth:`matplotlib:matplotlib.figure.Figure.add_subplot`).\n-    **kwargs : optional\n-        Additional keyword arguments for Matplotlib.\n-\n-    See Also\n-    --------\n-    xarray.DataArray.squeeze\n-    \"\"\"\n-    darray = darray.squeeze().compute()\n-\n-    plot_dims = set(darray.dims)\n-    plot_dims.discard(row)\n-    plot_dims.discard(col)\n-    plot_dims.discard(hue)\n-\n-    ndims = len(plot_dims)\n-\n-    error_msg = (\n-        \"Only 1d and 2d plots are supported for facets in xarray. \"\n-        \"See the package `Seaborn` for more options.\"\n-    )\n-\n-    if ndims in [1, 2]:\n-        if row or col:\n-            kwargs[\"subplot_kws\"] = subplot_kws\n-            kwargs[\"row\"] = row\n-            kwargs[\"col\"] = col\n-            kwargs[\"col_wrap\"] = col_wrap\n-        if ndims == 1:\n-            plotfunc = line\n-            kwargs[\"hue\"] = hue\n-        elif ndims == 2:\n-            if hue:\n-                plotfunc = line\n-                kwargs[\"hue\"] = hue\n-            else:\n-                plotfunc = pcolormesh\n-                kwargs[\"subplot_kws\"] = subplot_kws\n-    else:\n-        if row or col or hue:\n-            raise ValueError(error_msg)\n-        plotfunc = hist\n-\n-    kwargs[\"ax\"] = ax\n-\n-    return plotfunc(darray, **kwargs)\n-\n-\n-# This function signature should not change so that it can use\n-# matplotlib format strings\n-def line(\n-    darray,\n-    *args,\n-    row=None,\n-    col=None,\n-    figsize=None,\n-    aspect=None,\n-    size=None,\n-    ax=None,\n-    hue=None,\n-    x=None,\n-    y=None,\n-    xincrease=None,\n-    yincrease=None,\n-    xscale=None,\n-    yscale=None,\n-    xticks=None,\n-    yticks=None,\n-    xlim=None,\n-    ylim=None,\n-    add_legend=True,\n-    _labels=True,\n-    **kwargs,\n-):\n-    \"\"\"\n-    Line plot of DataArray values.\n-\n-    Wraps :py:func:`matplotlib:matplotlib.pyplot.plot`.\n-\n-    Parameters\n-    ----------\n-    darray : DataArray\n-        Either 1D or 2D. If 2D, one of ``hue``, ``x`` or ``y`` must be provided.\n-    figsize : tuple, optional\n-        A tuple (width, height) of the figure in inches.\n-        Mutually exclusive with ``size`` and ``ax``.\n-    aspect : scalar, optional\n-        Aspect ratio of plot, so that ``aspect * size`` gives the *width* in\n-        inches. Only used if a ``size`` is provided.\n-    size : scalar, optional\n-        If provided, create a new figure for the plot with the given size:\n-        *height* (in inches) of each plot. See also: ``aspect``.\n-    ax : matplotlib axes object, optional\n-        Axes on which to plot. By default, the current is used.\n-        Mutually exclusive with ``size`` and ``figsize``.\n-    hue : str, optional\n-        Dimension or coordinate for which you want multiple lines plotted.\n-        If plotting against a 2D coordinate, ``hue`` must be a dimension.\n-    x, y : str, optional\n-        Dimension, coordinate or multi-index level for *x*, *y* axis.\n-        Only one of these may be specified.\n-        The other will be used for values from the DataArray on which this\n-        plot method is called.\n-    xscale, yscale : {'linear', 'symlog', 'log', 'logit'}, optional\n-        Specifies scaling for the *x*- and *y*-axis, respectively.\n-    xticks, yticks : array-like, optional\n-        Specify tick locations for *x*- and *y*-axis.\n-    xlim, ylim : array-like, optional\n-        Specify *x*- and *y*-axis limits.\n-    xincrease : None, True, or False, optional\n-        Should the values on the *x* axis be increasing from left to right?\n-        if ``None``, use the default for the Matplotlib function.\n-    yincrease : None, True, or False, optional\n-        Should the values on the *y* axis be increasing from top to bottom?\n-        if ``None``, use the default for the Matplotlib function.\n-    add_legend : bool, optional\n-        Add legend with *y* axis coordinates (2D inputs only).\n-    *args, **kwargs : optional\n-        Additional arguments to :py:func:`matplotlib:matplotlib.pyplot.plot`.\n-    \"\"\"\n-    # Handle facetgrids first\n-    if row or col:\n-        allargs = locals().copy()\n-        allargs.update(allargs.pop(\"kwargs\"))\n-        allargs.pop(\"darray\")\n-        return _easy_facetgrid(darray, line, kind=\"line\", **allargs)\n-\n-    ndims = len(darray.dims)\n-    if ndims > 2:\n-        raise ValueError(\n-            \"Line plots are for 1- or 2-dimensional DataArrays. \"\n-            \"Passed DataArray has {ndims} \"\n-            \"dimensions\".format(ndims=ndims)\n-        )\n-\n-    # The allargs dict passed to _easy_facetgrid above contains args\n-    if args == ():\n-        args = kwargs.pop(\"args\", ())\n-    else:\n-        assert \"args\" not in kwargs\n-\n-    ax = get_axis(figsize, size, aspect, ax)\n-    xplt, yplt, hueplt, hue_label = _infer_line_data(darray, x, y, hue)\n-\n-    # Remove pd.Intervals if contained in xplt.values and/or yplt.values.\n-    xplt_val, yplt_val, x_suffix, y_suffix, kwargs = _resolve_intervals_1dplot(\n-        xplt.to_numpy(), yplt.to_numpy(), kwargs\n-    )\n-    xlabel = label_from_attrs(xplt, extra=x_suffix)\n-    ylabel = label_from_attrs(yplt, extra=y_suffix)\n-\n-    _ensure_plottable(xplt_val, yplt_val)\n-\n-    primitive = ax.plot(xplt_val, yplt_val, *args, **kwargs)\n-\n-    if _labels:\n-        if xlabel is not None:\n-            ax.set_xlabel(xlabel)\n-\n-        if ylabel is not None:\n-            ax.set_ylabel(ylabel)\n-\n-        ax.set_title(darray._title_for_slice())\n-\n-    if darray.ndim == 2 and add_legend:\n-        ax.legend(handles=primitive, labels=list(hueplt.to_numpy()), title=hue_label)\n-\n-    # Rotate dates on xlabels\n-    # Do this without calling autofmt_xdate so that x-axes ticks\n-    # on other subplots (if any) are not deleted.\n-    # https://stackoverflow.com/questions/17430105/autofmt-xdate-deletes-x-axis-labels-of-all-subplots\n-    if np.issubdtype(xplt.dtype, np.datetime64):\n-        for xlabels in ax.get_xticklabels():\n-            xlabels.set_rotation(30)\n-            xlabels.set_ha(\"right\")\n-\n-    _update_axes(ax, xincrease, yincrease, xscale, yscale, xticks, yticks, xlim, ylim)\n-\n-    return primitive\n-\n-\n-def step(darray, *args, where=\"pre\", drawstyle=None, ds=None, **kwargs):\n-    \"\"\"\n-    Step plot of DataArray values.\n-\n-    Similar to :py:func:`matplotlib:matplotlib.pyplot.step`.\n-\n-    Parameters\n-    ----------\n-    where : {'pre', 'post', 'mid'}, default: 'pre'\n-        Define where the steps should be placed:\n-\n-        - ``'pre'``: The y value is continued constantly to the left from\n-          every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n-          value ``y[i]``.\n-        - ``'post'``: The y value is continued constantly to the right from\n-          every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n-          value ``y[i]``.\n-        - ``'mid'``: Steps occur half-way between the *x* positions.\n-\n-        Note that this parameter is ignored if one coordinate consists of\n-        :py:class:`pandas.Interval` values, e.g. as a result of\n-        :py:func:`xarray.Dataset.groupby_bins`. In this case, the actual\n-        boundaries of the interval are used.\n-    *args, **kwargs : optional\n-        Additional arguments for :py:func:`xarray.plot.line`.\n-    \"\"\"\n-    if where not in {\"pre\", \"post\", \"mid\"}:\n-        raise ValueError(\"'where' argument to step must be 'pre', 'post' or 'mid'\")\n-\n-    if ds is not None:\n-        if drawstyle is None:\n-            drawstyle = ds\n-        else:\n-            raise TypeError(\"ds and drawstyle are mutually exclusive\")\n-    if drawstyle is None:\n-        drawstyle = \"\"\n-    drawstyle = \"steps-\" + where + drawstyle\n-\n-    return line(darray, *args, drawstyle=drawstyle, **kwargs)\n-\n-\n-def hist(\n-    darray,\n-    figsize=None,\n-    size=None,\n-    aspect=None,\n-    ax=None,\n-    xincrease=None,\n-    yincrease=None,\n-    xscale=None,\n-    yscale=None,\n-    xticks=None,\n-    yticks=None,\n-    xlim=None,\n-    ylim=None,\n-    **kwargs,\n-):\n-    \"\"\"\n-    Histogram of DataArray.\n-\n-    Wraps :py:func:`matplotlib:matplotlib.pyplot.hist`.\n-\n-    Plots *N*-dimensional arrays by first flattening the array.\n-\n-    Parameters\n-    ----------\n-    darray : DataArray\n-        Can have any number of dimensions.\n-    figsize : tuple, optional\n-        A tuple (width, height) of the figure in inches.\n-        Mutually exclusive with ``size`` and ``ax``.\n-    aspect : scalar, optional\n-        Aspect ratio of plot, so that ``aspect * size`` gives the *width* in\n-        inches. Only used if a ``size`` is provided.\n-    size : scalar, optional\n-        If provided, create a new figure for the plot with the given size:\n-        *height* (in inches) of each plot. See also: ``aspect``.\n-    ax : matplotlib axes object, optional\n-        Axes on which to plot. By default, use the current axes.\n-        Mutually exclusive with ``size`` and ``figsize``.\n-    **kwargs : optional\n-        Additional keyword arguments to :py:func:`matplotlib:matplotlib.pyplot.hist`.\n-\n-    \"\"\"\n-    ax = get_axis(figsize, size, aspect, ax)\n-\n-    no_nan = np.ravel(darray.to_numpy())\n-    no_nan = no_nan[pd.notnull(no_nan)]\n-\n-    primitive = ax.hist(no_nan, **kwargs)\n-\n-    ax.set_title(darray._title_for_slice())\n-    ax.set_xlabel(label_from_attrs(darray))\n-\n-    _update_axes(ax, xincrease, yincrease, xscale, yscale, xticks, yticks, xlim, ylim)\n-\n-    return primitive\n-\n-\n-# MUST run before any 2d plotting functions are defined since\n-# _plot2d decorator adds them as methods here.\n-class _PlotMethods:\n-    \"\"\"\n-    Enables use of xarray.plot functions as attributes on a DataArray.\n-    For example, DataArray.plot.imshow\n-    \"\"\"\n-\n-    __slots__ = (\"_da\",)\n-\n-    def __init__(self, darray):\n-        self._da = darray\n-\n-    def __call__(self, **kwargs):\n-        return plot(self._da, **kwargs)\n-\n-    # we can't use functools.wraps here since that also modifies the name / qualname\n-    __doc__ = __call__.__doc__ = plot.__doc__\n-    __call__.__wrapped__ = plot  # type: ignore[attr-defined]\n-    __call__.__annotations__ = plot.__annotations__\n-\n-    @functools.wraps(hist)\n-    def hist(self, ax=None, **kwargs):\n-        return hist(self._da, ax=ax, **kwargs)\n-\n-    @functools.wraps(line)\n-    def line(self, *args, **kwargs):\n-        return line(self._da, *args, **kwargs)\n-\n-    @functools.wraps(step)\n-    def step(self, *args, **kwargs):\n-        return step(self._da, *args, **kwargs)\n-\n-\n-def override_signature(f):\n-    def wrapper(func):\n-        func.__wrapped__ = f\n-\n-        return func\n-\n-    return wrapper\n-\n-\n-def _plot1d(plotfunc):\n-    \"\"\"\n-    Decorator for common 1d plotting logic.\n-\n-    Also adds the 1d plot method to class _PlotMethods.\n-    \"\"\"\n-    commondoc = \"\"\"\n-    Parameters\n-    ----------\n-    darray : DataArray\n-        Must be 2 dimensional, unless creating faceted plots\n-    x : string, optional\n-        Coordinate for x axis. If None use darray.dims[1]\n-    y : string, optional\n-        Coordinate for y axis. If None use darray.dims[0]\n-    hue : string, optional\n-        Dimension or coordinate for which you want multiple lines plotted.\n-    figsize : tuple, optional\n-        A tuple (width, height) of the figure in inches.\n-        Mutually exclusive with ``size`` and ``ax``.\n-    aspect : scalar, optional\n-        Aspect ratio of plot, so that ``aspect * size`` gives the width in\n-        inches. Only used if a ``size`` is provided.\n-    size : scalar, optional\n-        If provided, create a new figure for the plot with the given size.\n-        Height (in inches) of each plot. See also: ``aspect``.\n-    ax : matplotlib.axes.Axes, optional\n-        Axis on which to plot this figure. By default, use the current axis.\n-        Mutually exclusive with ``size`` and ``figsize``.\n-    row : string, optional\n-        If passed, make row faceted plots on this dimension name\n-    col : string, optional\n-        If passed, make column faceted plots on this dimension name\n-    col_wrap : int, optional\n-        Use together with ``col`` to wrap faceted plots\n-    xscale, yscale : 'linear', 'symlog', 'log', 'logit', optional\n-        Specifies scaling for the x- and y-axes respectively\n-    xticks, yticks : Specify tick locations for x- and y-axes\n-    xlim, ylim : Specify x- and y-axes limits\n-    xincrease : None, True, or False, optional\n-        Should the values on the x axes be increasing from left to right?\n-        if None, use the default for the matplotlib function.\n-    yincrease : None, True, or False, optional\n-        Should the values on the y axes be increasing from top to bottom?\n-        if None, use the default for the matplotlib function.\n-    add_labels : bool, optional\n-        Use xarray metadata to label axes\n-    subplot_kws : dict, optional\n-        Dictionary of keyword arguments for matplotlib subplots. Only used\n-        for FacetGrid plots.\n-    **kwargs : optional\n-        Additional arguments to wrapped matplotlib function\n-\n-    Returns\n-    -------\n-    artist :\n-        The same type of primitive artist that the wrapped matplotlib\n-        function returns\n-    \"\"\"\n-\n-    # Build on the original docstring\n-    plotfunc.__doc__ = f\"{plotfunc.__doc__}\\n{commondoc}\"\n-\n-    # plotfunc and newplotfunc have different signatures:\n-    # - plotfunc: (x, y, z, ax, **kwargs)\n-    # - newplotfunc: (darray, *args, x, y, **kwargs)\n-    # where plotfunc accepts numpy arrays, while newplotfunc accepts a DataArray\n-    # and variable names. newplotfunc also explicitly lists most kwargs, so we\n-    # need to shorten it\n-    def signature(\n-        darray: T_DataArray, *args, x: Hashable, **kwargs\n-    ) -> Collection | FacetGrid:\n-        pass\n-\n-    @override_signature(signature)\n-    @functools.wraps(plotfunc)\n-    def newplotfunc(\n-        darray: T_DataArray,\n-        *args,\n-        x: Hashable = None,\n-        y: Hashable = None,\n-        z: Hashable = None,\n-        hue: Hashable = None,\n-        hue_style=None,\n-        markersize: Hashable = None,\n-        linewidth: Hashable = None,\n-        figsize=None,\n-        size=None,\n-        aspect=None,\n-        ax=None,\n-        row: Hashable = None,\n-        col: Hashable = None,\n-        col_wrap=None,\n-        xincrease=True,\n-        yincrease=True,\n-        add_legend: bool | None = None,\n-        add_colorbar: bool | None = None,\n-        add_labels: bool | Sequence[bool] = True,\n-        add_title: bool = True,\n-        subplot_kws: dict | None = None,\n-        xscale=None,\n-        yscale=None,\n-        xticks=None,\n-        yticks=None,\n-        xlim=None,\n-        ylim=None,\n-        cmap=None,\n-        vmin=None,\n-        vmax=None,\n-        norm=None,\n-        extend=None,\n-        levels=None,\n-        **kwargs,\n-    ) -> Collection | FacetGrid:\n-        # All 1d plots in xarray share this function signature.\n-        # Method signature below should be consistent.\n-\n-        if subplot_kws is None:\n-            subplot_kws = dict()\n-\n-        # Handle facetgrids first\n-        if row or col:\n-            if z is not None:\n-                subplot_kws.update(projection=\"3d\")\n-\n-            allargs = locals().copy()\n-            allargs.update(allargs.pop(\"kwargs\"))\n-            allargs.pop(\"darray\")\n-            allargs[\"plotfunc\"] = globals()[plotfunc.__name__]\n-\n-            return _easy_facetgrid(darray, kind=\"plot1d\", **allargs)\n-\n-        # The allargs dict passed to _easy_facetgrid above contains args\n-        if args == ():\n-            args = kwargs.pop(\"args\", ())\n-        else:\n-            assert \"args\" not in kwargs\n-\n-        _is_facetgrid = kwargs.pop(\"_is_facetgrid\", False)\n-\n-        if markersize is not None:\n-            size_ = markersize\n-            size_r = _MARKERSIZE_RANGE\n-        else:\n-            size_ = linewidth\n-            size_r = _LINEWIDTH_RANGE\n-\n-        # Get data to plot:\n-        dims_plot = dict(x=x, z=z, hue=hue, size=size_)\n-        plts = _infer_line_data2(darray, dims_plot, plotfunc.__name__)\n-        xplt = plts.pop(\"x\", None)\n-        yplt = plts.pop(\"y\", None)\n-        zplt = plts.pop(\"z\", None)\n-        kwargs.update(zplt=zplt)\n-        hueplt = plts.pop(\"hue\", None)\n-        sizeplt = plts.pop(\"size\", None)\n-\n-        # Handle size and hue:\n-        hueplt_norm = _Normalize(hueplt)\n-        kwargs.update(hueplt=hueplt_norm.values)\n-        sizeplt_norm = _Normalize(sizeplt, size_r, _is_facetgrid)\n-        kwargs.update(sizeplt=sizeplt_norm.values)\n-        cmap_params_subset = kwargs.pop(\"cmap_params_subset\", {})\n-        cbar_kwargs = kwargs.pop(\"cbar_kwargs\", {})\n-\n-        if hueplt_norm.data is not None:\n-            if not hueplt_norm.data_is_numeric:\n-                # Map hue values back to its original value:\n-                cbar_kwargs.update(format=hueplt_norm.format, ticks=hueplt_norm.ticks)\n-                levels = kwargs.get(\"levels\", hueplt_norm.levels)\n-\n-            cmap_params, cbar_kwargs = _process_cmap_cbar_kwargs(\n-                plotfunc,\n-                hueplt_norm.values.data,\n-                **locals(),\n-            )\n-\n-            # subset that can be passed to scatter, hist2d\n-            if not cmap_params_subset:\n-                ckw = {vv: cmap_params[vv] for vv in (\"vmin\", \"vmax\", \"norm\", \"cmap\")}\n-                cmap_params_subset.update(**ckw)\n-\n-        if z is not None:\n-            if ax is None:\n-                subplot_kws.update(projection=\"3d\")\n-            ax = get_axis(figsize, size, aspect, ax, **subplot_kws)\n-            # Using 30, 30 minimizes rotation of the plot. Making it easier to\n-            # build on your intuition from 2D plots:\n-            plt = import_matplotlib_pyplot()\n-            if Version(plt.matplotlib.__version__) < Version(\"3.5.0\"):\n-                ax.view_init(azim=30, elev=30)\n-            else:\n-                # https://github.com/matplotlib/matplotlib/pull/19873\n-                ax.view_init(azim=30, elev=30, vertical_axis=\"y\")\n-        else:\n-            ax = get_axis(figsize, size, aspect, ax, **subplot_kws)\n-\n-        primitive = plotfunc(\n-            xplt,\n-            yplt,\n-            *args,\n-            ax=ax,\n-            add_labels=add_labels,\n-            **cmap_params_subset,\n-            **kwargs,\n-        )\n-\n-        if np.any(add_labels) and add_title:\n-            ax.set_title(darray._title_for_slice())\n-\n-        add_colorbar_, add_legend_ = _determine_guide(\n-            hueplt_norm,\n-            sizeplt_norm,\n-            add_colorbar,\n-            add_legend,\n-            plotfunc_name=plotfunc.__name__,\n-        )\n-\n-        if add_colorbar_:\n-            if \"label\" not in cbar_kwargs:\n-                cbar_kwargs[\"label\"] = label_from_attrs(hueplt_norm.data)\n-\n-            _add_colorbar(\n-                primitive, ax, kwargs.get(\"cbar_ax\", None), cbar_kwargs, cmap_params\n-            )\n-\n-        if add_legend_:\n-            if plotfunc.__name__ == \"hist\":\n-                ax.legend(\n-                    handles=primitive[-1],\n-                    labels=list(hueplt_norm.values.to_numpy()),\n-                    title=label_from_attrs(hueplt_norm.data),\n-                )\n-            elif plotfunc.__name__ in [\"scatter\", \"line\"]:\n-                _add_legend(\n-                    hueplt_norm\n-                    if add_legend or not add_colorbar_\n-                    else _Normalize(None),\n-                    sizeplt_norm,\n-                    primitive,\n-                    legend_ax=ax,\n-                    plotfunc=plotfunc.__name__,\n-                )\n-            else:\n-                ax.legend(\n-                    handles=primitive,\n-                    labels=list(hueplt_norm.values.to_numpy()),\n-                    title=label_from_attrs(hueplt_norm.data),\n-                )\n-\n-        _update_axes(\n-            ax, xincrease, yincrease, xscale, yscale, xticks, yticks, xlim, ylim\n-        )\n-\n-        return primitive\n-\n-    # For use as DataArray.plot.plotmethod\n-    @functools.wraps(newplotfunc)\n-    def plotmethod(\n-        _PlotMethods_obj,\n-        *args,\n-        x: Hashable = None,\n-        y: Hashable = None,\n-        z: Hashable = None,\n-        hue: Hashable = None,\n-        hue_style=None,\n-        markersize: Hashable = None,\n-        linewidth: Hashable = None,\n-        figsize=None,\n-        size=None,\n-        aspect=None,\n-        ax=None,\n-        row: Hashable = None,\n-        col: Hashable = None,\n-        col_wrap=None,\n-        xincrease=True,\n-        yincrease=True,\n-        add_legend: bool | None = None,\n-        add_colorbar: bool | None = None,\n-        add_labels: bool | Sequence[bool] = True,\n-        subplot_kws=None,\n-        xscale=None,\n-        yscale=None,\n-        xticks=None,\n-        yticks=None,\n-        xlim=None,\n-        ylim=None,\n-        cmap=None,\n-        vmin=None,\n-        vmax=None,\n-        norm=None,\n-        extend=None,\n-        levels=None,\n-        **kwargs,\n-    ) -> Collection:\n-        \"\"\"\n-        The method should have the same signature as the function.\n-\n-        This just makes the method work on Plotmethods objects,\n-        and passes all the other arguments straight through.\n-        \"\"\"\n-        allargs = locals().copy()\n-        allargs[\"darray\"] = _PlotMethods_obj._da\n-        allargs.update(kwargs)\n-        for arg in [\"_PlotMethods_obj\", \"newplotfunc\", \"kwargs\"]:\n-            del allargs[arg]\n-        return newplotfunc(**allargs)\n-\n-    # Add to class _PlotMethods\n-    setattr(_PlotMethods, plotmethod.__name__, plotmethod)\n-\n-    return newplotfunc\n-\n-\n-def _add_labels(\n-    add_labels: bool | Sequence[bool],\n-    darrays: Sequence[T_DataArray],\n-    suffixes: Iterable[str],\n-    rotate_labels: Iterable[bool],\n-    ax,\n-) -> None:\n-    # Set x, y, z labels:\n-    add_labels = [add_labels] * 3 if isinstance(add_labels, bool) else add_labels\n-    for axis, add_label, darray, suffix, rotate_label in zip(\n-        (\"x\", \"y\", \"z\"), add_labels, darrays, suffixes, rotate_labels\n-    ):\n-        if darray is None:\n-            continue\n-\n-        if add_label:\n-            label = label_from_attrs(darray, extra=suffix)\n-            if label is not None:\n-                getattr(ax, f\"set_{axis}label\")(label)\n-\n-        if rotate_label and np.issubdtype(darray.dtype, np.datetime64):\n-            # Rotate dates on xlabels\n-            # Do this without calling autofmt_xdate so that x-axes ticks\n-            # on other subplots (if any) are not deleted.\n-            # https://stackoverflow.com/questions/17430105/autofmt-xdate-deletes-x-axis-labels-of-all-subplots\n-            for labels in getattr(ax, f\"get_{axis}ticklabels\")():\n-                labels.set_rotation(30)\n-                labels.set_ha(\"right\")\n-\n-\n-@_plot1d\n-def scatter(\n-    xplt, yplt, *args, ax, add_labels: bool | Sequence[bool] = True, **kwargs\n-) -> plt.scatter:\n-    plt = import_matplotlib_pyplot()\n-\n-    zplt = kwargs.pop(\"zplt\", None)\n-    hueplt = kwargs.pop(\"hueplt\", None)\n-    sizeplt = kwargs.pop(\"sizeplt\", None)\n-\n-    # Add a white border to make it easier seeing overlapping markers:\n-    kwargs.update(edgecolors=kwargs.pop(\"edgecolors\", \"w\"))\n-\n-    if hueplt is not None:\n-        kwargs.update(c=hueplt.to_numpy().ravel())\n-\n-    if sizeplt is not None:\n-        kwargs.update(s=sizeplt.to_numpy().ravel())\n-\n-    if Version(plt.matplotlib.__version__) < Version(\"3.5.0\"):\n-        # Plot the data. 3d plots has the z value in upward direction\n-        # instead of y. To make jumping between 2d and 3d easy and intuitive\n-        # switch the order so that z is shown in the depthwise direction:\n-        axis_order = [\"x\", \"z\", \"y\"]\n-    else:\n-        # Switching axis order not needed in 3.5.0, can also simplify the code\n-        # that uses axis_order:\n-        # https://github.com/matplotlib/matplotlib/pull/19873\n-        axis_order = [\"x\", \"y\", \"z\"]\n-\n-    plts_dict = dict(x=xplt, y=yplt, z=zplt)\n-    plts = [plts_dict[v] for v in axis_order if plts_dict[v] is not None]\n-    primitive = ax.scatter(*[v.to_numpy().ravel() for v in plts], **kwargs)\n-    _add_labels(add_labels, plts, (\"\", \"\", \"\"), (True, False, False), ax)\n-\n-    return primitive\n-\n-\n-def _plot2d(plotfunc):\n-    \"\"\"\n-    Decorator for common 2d plotting logic\n-\n-    Also adds the 2d plot method to class _PlotMethods\n-    \"\"\"\n-    commondoc = \"\"\"\n-    Parameters\n-    ----------\n-    darray : DataArray\n-        Must be two-dimensional, unless creating faceted plots.\n-    x : str, optional\n-        Coordinate for *x* axis. If ``None``, use ``darray.dims[1]``.\n-    y : str, optional\n-        Coordinate for *y* axis. If ``None``, use ``darray.dims[0]``.\n-    figsize : tuple, optional\n-        A tuple (width, height) of the figure in inches.\n-        Mutually exclusive with ``size`` and ``ax``.\n-    aspect : scalar, optional\n-        Aspect ratio of plot, so that ``aspect * size`` gives the *width* in\n-        inches. Only used if a ``size`` is provided.\n-    size : scalar, optional\n-        If provided, create a new figure for the plot with the given size:\n-        *height* (in inches) of each plot. See also: ``aspect``.\n-    ax : matplotlib axes object, optional\n-        Axes on which to plot. By default, use the current axes.\n-        Mutually exclusive with ``size`` and ``figsize``.\n-    row : string, optional\n-        If passed, make row faceted plots on this dimension name.\n-    col : string, optional\n-        If passed, make column faceted plots on this dimension name.\n-    col_wrap : int, optional\n-        Use together with ``col`` to wrap faceted plots.\n-    xscale, yscale : {'linear', 'symlog', 'log', 'logit'}, optional\n-        Specifies scaling for the *x*- and *y*-axis, respectively.\n-    xticks, yticks : array-like, optional\n-        Specify tick locations for *x*- and *y*-axis.\n-    xlim, ylim : array-like, optional\n-        Specify *x*- and *y*-axis limits.\n-    xincrease : None, True, or False, optional\n-        Should the values on the *x* axis be increasing from left to right?\n-        If ``None``, use the default for the Matplotlib function.\n-    yincrease : None, True, or False, optional\n-        Should the values on the *y* axis be increasing from top to bottom?\n-        If ``None``, use the default for the Matplotlib function.\n-    add_colorbar : bool, optional\n-        Add colorbar to axes.\n-    add_labels : bool, optional\n-        Use xarray metadata to label axes.\n-    norm : matplotlib.colors.Normalize, optional\n-        If ``norm`` has ``vmin`` or ``vmax`` specified, the corresponding\n-        kwarg must be ``None``.\n-    vmin, vmax : float, optional\n-        Values to anchor the colormap, otherwise they are inferred from the\n-        data and other keyword arguments. When a diverging dataset is inferred,\n-        setting one of these values will fix the other by symmetry around\n-        ``center``. Setting both values prevents use of a diverging colormap.\n-        If discrete levels are provided as an explicit list, both of these\n-        values are ignored.\n-    cmap : matplotlib colormap name or colormap, optional\n-        The mapping from data values to color space. If not provided, this\n-        will be either be ``'viridis'`` (if the function infers a sequential\n-        dataset) or ``'RdBu_r'`` (if the function infers a diverging dataset).\n-        See :doc:`Choosing Colormaps in Matplotlib <matplotlib:tutorials/colors/colormaps>`\n-        for more information.\n-\n-        If *seaborn* is installed, ``cmap`` may also be a\n-        `seaborn color palette <https://seaborn.pydata.org/tutorial/color_palettes.html>`_.\n-        Note: if ``cmap`` is a seaborn color palette and the plot type\n-        is not ``'contour'`` or ``'contourf'``, ``levels`` must also be specified.\n-    colors : str or array-like of color-like, optional\n-        A single color or a sequence of colors. If the plot type is not ``'contour'``\n-        or ``'contourf'``, the ``levels`` argument is required.\n-    center : float, optional\n-        The value at which to center the colormap. Passing this value implies\n-        use of a diverging colormap. Setting it to ``False`` prevents use of a\n-        diverging colormap.\n-    robust : bool, optional\n-        If ``True`` and ``vmin`` or ``vmax`` are absent, the colormap range is\n-        computed with 2nd and 98th percentiles instead of the extreme values.\n-    extend : {'neither', 'both', 'min', 'max'}, optional\n-        How to draw arrows extending the colorbar beyond its limits. If not\n-        provided, ``extend`` is inferred from ``vmin``, ``vmax`` and the data limits.\n-    levels : int or array-like, optional\n-        Split the colormap (``cmap``) into discrete color intervals. If an integer\n-        is provided, \"nice\" levels are chosen based on the data range: this can\n-        imply that the final number of levels is not exactly the expected one.\n-        Setting ``vmin`` and/or ``vmax`` with ``levels=N`` is equivalent to\n-        setting ``levels=np.linspace(vmin, vmax, N)``.\n-    infer_intervals : bool, optional\n-        Only applies to pcolormesh. If ``True``, the coordinate intervals are\n-        passed to pcolormesh. If ``False``, the original coordinates are used\n-        (this can be useful for certain map projections). The default is to\n-        always infer intervals, unless the mesh is irregular and plotted on\n-        a map projection.\n-    subplot_kws : dict, optional\n-        Dictionary of keyword arguments for Matplotlib subplots. Only used\n-        for 2D and faceted plots.\n-        (see :py:meth:`matplotlib:matplotlib.figure.Figure.add_subplot`).\n-    cbar_ax : matplotlib axes object, optional\n-        Axes in which to draw the colorbar.\n-    cbar_kwargs : dict, optional\n-        Dictionary of keyword arguments to pass to the colorbar\n-        (see :meth:`matplotlib:matplotlib.figure.Figure.colorbar`).\n-    **kwargs : optional\n-        Additional keyword arguments to wrapped Matplotlib function.\n-\n-    Returns\n-    -------\n-    artist :\n-        The same type of primitive artist that the wrapped Matplotlib\n-        function returns.\n-    \"\"\"\n-\n-    # Build on the original docstring\n-    plotfunc.__doc__ = f\"{plotfunc.__doc__}\\n{commondoc}\"\n-\n-    # plotfunc and newplotfunc have different signatures:\n-    # - plotfunc: (x, y, z, ax, **kwargs)\n-    # - newplotfunc: (darray, x, y, **kwargs)\n-    # where plotfunc accepts numpy arrays, while newplotfunc accepts a DataArray\n-    # and variable names. newplotfunc also explicitly lists most kwargs, so we\n-    # need to shorten it\n-    def signature(darray, x, y, **kwargs):\n-        pass\n-\n-    @override_signature(signature)\n-    @functools.wraps(plotfunc)\n-    def newplotfunc(\n-        darray,\n-        x=None,\n-        y=None,\n-        figsize=None,\n-        size=None,\n-        aspect=None,\n-        ax=None,\n-        row=None,\n-        col=None,\n-        col_wrap=None,\n-        xincrease=True,\n-        yincrease=True,\n-        add_colorbar=None,\n-        add_labels=True,\n-        vmin=None,\n-        vmax=None,\n-        cmap=None,\n-        center=None,\n-        robust=False,\n-        extend=None,\n-        levels=None,\n-        infer_intervals=None,\n-        colors=None,\n-        subplot_kws=None,\n-        cbar_ax=None,\n-        cbar_kwargs=None,\n-        xscale=None,\n-        yscale=None,\n-        xticks=None,\n-        yticks=None,\n-        xlim=None,\n-        ylim=None,\n-        norm=None,\n-        **kwargs,\n-    ):\n-        # All 2d plots in xarray share this function signature.\n-        # Method signature below should be consistent.\n-\n-        # Decide on a default for the colorbar before facetgrids\n-        if add_colorbar is None:\n-            add_colorbar = True\n-            if plotfunc.__name__ == \"contour\" or (\n-                plotfunc.__name__ == \"surface\" and cmap is None\n-            ):\n-                add_colorbar = False\n-        imshow_rgb = plotfunc.__name__ == \"imshow\" and darray.ndim == (\n-            3 + (row is not None) + (col is not None)\n-        )\n-        if imshow_rgb:\n-            # Don't add a colorbar when showing an image with explicit colors\n-            add_colorbar = False\n-            # Matplotlib does not support normalising RGB data, so do it here.\n-            # See eg. https://github.com/matplotlib/matplotlib/pull/10220\n-            if robust or vmax is not None or vmin is not None:\n-                darray = _rescale_imshow_rgb(darray.as_numpy(), vmin, vmax, robust)\n-                vmin, vmax, robust = None, None, False\n-\n-        if subplot_kws is None:\n-            subplot_kws = dict()\n-\n-        if plotfunc.__name__ == \"surface\" and not kwargs.get(\"_is_facetgrid\", False):\n-            if ax is None:\n-                # TODO: Importing Axes3D is no longer necessary in matplotlib >= 3.2.\n-                # Remove when minimum requirement of matplotlib is 3.2:\n-                from mpl_toolkits.mplot3d import Axes3D  # type: ignore  # noqa: F401\n-\n-                # delete so it does not end up in locals()\n-                del Axes3D\n-\n-                # Need to create a \"3d\" Axes instance for surface plots\n-                subplot_kws[\"projection\"] = \"3d\"\n-\n-            # In facet grids, shared axis labels don't make sense for surface plots\n-            sharex = False\n-            sharey = False\n-\n-        # Handle facetgrids first\n-        if row or col:\n-            allargs = locals().copy()\n-            del allargs[\"darray\"]\n-            del allargs[\"imshow_rgb\"]\n-            allargs.update(allargs.pop(\"kwargs\"))\n-            # Need the decorated plotting function\n-            allargs[\"plotfunc\"] = globals()[plotfunc.__name__]\n-            return _easy_facetgrid(darray, kind=\"dataarray\", **allargs)\n-\n-        plt = import_matplotlib_pyplot()\n-\n-        if (\n-            plotfunc.__name__ == \"surface\"\n-            and not kwargs.get(\"_is_facetgrid\", False)\n-            and ax is not None\n-        ):\n-            import mpl_toolkits  # type: ignore\n-\n-            if not isinstance(ax, mpl_toolkits.mplot3d.Axes3D):\n-                raise ValueError(\n-                    \"If ax is passed to surface(), it must be created with \"\n-                    'projection=\"3d\"'\n-                )\n-\n-        rgb = kwargs.pop(\"rgb\", None)\n-        if rgb is not None and plotfunc.__name__ != \"imshow\":\n-            raise ValueError('The \"rgb\" keyword is only valid for imshow()')\n-        elif rgb is not None and not imshow_rgb:\n-            raise ValueError(\n-                'The \"rgb\" keyword is only valid for imshow()'\n-                \"with a three-dimensional array (per facet)\"\n-            )\n-\n-        xlab, ylab = _infer_xy_labels(\n-            darray=darray, x=x, y=y, imshow=imshow_rgb, rgb=rgb\n-        )\n-\n-        xval = darray[xlab]\n-        yval = darray[ylab]\n-\n-        if xval.ndim > 1 or yval.ndim > 1 or plotfunc.__name__ == \"surface\":\n-            # Passing 2d coordinate values, need to ensure they are transposed the same\n-            # way as darray.\n-            # Also surface plots always need 2d coordinates\n-            xval = xval.broadcast_like(darray)\n-            yval = yval.broadcast_like(darray)\n-            dims = darray.dims\n-        else:\n-            dims = (yval.dims[0], xval.dims[0])\n-\n-        # May need to transpose for correct x, y labels\n-        # xlab may be the name of a coord, we have to check for dim names\n-        if imshow_rgb:\n-            # For RGB[A] images, matplotlib requires the color dimension\n-            # to be last.  In Xarray the order should be unimportant, so\n-            # we transpose to (y, x, color) to make this work.\n-            yx_dims = (ylab, xlab)\n-            dims = yx_dims + tuple(d for d in darray.dims if d not in yx_dims)\n-\n-        if dims != darray.dims:\n-            darray = darray.transpose(*dims, transpose_coords=True)\n-\n-        # better to pass the ndarrays directly to plotting functions\n-        xval = xval.to_numpy()\n-        yval = yval.to_numpy()\n-\n-        # Pass the data as a masked ndarray too\n-        zval = darray.to_masked_array(copy=False)\n-\n-        # Replace pd.Intervals if contained in xval or yval.\n-        xplt, xlab_extra = _resolve_intervals_2dplot(xval, plotfunc.__name__)\n-        yplt, ylab_extra = _resolve_intervals_2dplot(yval, plotfunc.__name__)\n-\n-        _ensure_plottable(xplt, yplt, zval)\n-\n-        cmap_params, cbar_kwargs = _process_cmap_cbar_kwargs(\n-            plotfunc,\n-            zval.data,\n-            **locals(),\n-            _is_facetgrid=kwargs.pop(\"_is_facetgrid\", False),\n-        )\n-\n-        if \"contour\" in plotfunc.__name__:\n-            # extend is a keyword argument only for contour and contourf, but\n-            # passing it to the colorbar is sufficient for imshow and\n-            # pcolormesh\n-            kwargs[\"extend\"] = cmap_params[\"extend\"]\n-            kwargs[\"levels\"] = cmap_params[\"levels\"]\n-            # if colors == a single color, matplotlib draws dashed negative\n-            # contours. we lose this feature if we pass cmap and not colors\n-            if isinstance(colors, str):\n-                cmap_params[\"cmap\"] = None\n-                kwargs[\"colors\"] = colors\n-\n-        if \"pcolormesh\" == plotfunc.__name__:\n-            kwargs[\"infer_intervals\"] = infer_intervals\n-            kwargs[\"xscale\"] = xscale\n-            kwargs[\"yscale\"] = yscale\n-\n-        if \"imshow\" == plotfunc.__name__ and isinstance(aspect, str):\n-            # forbid usage of mpl strings\n-            raise ValueError(\"plt.imshow's `aspect` kwarg is not available in xarray\")\n-\n-        ax = get_axis(figsize, size, aspect, ax, **subplot_kws)\n-\n-        primitive = plotfunc(\n-            xplt,\n-            yplt,\n-            zval,\n-            ax=ax,\n-            cmap=cmap_params[\"cmap\"],\n-            vmin=cmap_params[\"vmin\"],\n-            vmax=cmap_params[\"vmax\"],\n-            norm=cmap_params[\"norm\"],\n-            **kwargs,\n-        )\n-\n-        # Label the plot with metadata\n-        if add_labels:\n-            ax.set_xlabel(label_from_attrs(darray[xlab], xlab_extra))\n-            ax.set_ylabel(label_from_attrs(darray[ylab], ylab_extra))\n-            ax.set_title(darray._title_for_slice())\n-            if plotfunc.__name__ == \"surface\":\n-                ax.set_zlabel(label_from_attrs(darray))\n-\n-        if add_colorbar:\n-            if add_labels and \"label\" not in cbar_kwargs:\n-                cbar_kwargs[\"label\"] = label_from_attrs(darray)\n-            cbar = _add_colorbar(primitive, ax, cbar_ax, cbar_kwargs, cmap_params)\n-        elif cbar_ax is not None or cbar_kwargs:\n-            # inform the user about keywords which aren't used\n-            raise ValueError(\n-                \"cbar_ax and cbar_kwargs can't be used with add_colorbar=False.\"\n-            )\n-\n-        # origin kwarg overrides yincrease\n-        if \"origin\" in kwargs:\n-            yincrease = None\n-\n-        _update_axes(\n-            ax, xincrease, yincrease, xscale, yscale, xticks, yticks, xlim, ylim\n-        )\n-\n-        # Rotate dates on xlabels\n-        # Do this without calling autofmt_xdate so that x-axes ticks\n-        # on other subplots (if any) are not deleted.\n-        # https://stackoverflow.com/questions/17430105/autofmt-xdate-deletes-x-axis-labels-of-all-subplots\n-        if np.issubdtype(xplt.dtype, np.datetime64):\n-            for xlabels in ax.get_xticklabels():\n-                xlabels.set_rotation(30)\n-                xlabels.set_ha(\"right\")\n-\n-        return primitive\n-\n-    # For use as DataArray.plot.plotmethod\n-    @functools.wraps(newplotfunc)\n-    def plotmethod(\n-        _PlotMethods_obj,\n-        x=None,\n-        y=None,\n-        figsize=None,\n-        size=None,\n-        aspect=None,\n-        ax=None,\n-        row=None,\n-        col=None,\n-        col_wrap=None,\n-        xincrease=True,\n-        yincrease=True,\n-        add_colorbar=None,\n-        add_labels=True,\n-        vmin=None,\n-        vmax=None,\n-        cmap=None,\n-        colors=None,\n-        center=None,\n-        robust=False,\n-        extend=None,\n-        levels=None,\n-        infer_intervals=None,\n-        subplot_kws=None,\n-        cbar_ax=None,\n-        cbar_kwargs=None,\n-        xscale=None,\n-        yscale=None,\n-        xticks=None,\n-        yticks=None,\n-        xlim=None,\n-        ylim=None,\n-        norm=None,\n-        **kwargs,\n-    ):\n-        \"\"\"\n-        The method should have the same signature as the function.\n-\n-        This just makes the method work on Plotmethods objects,\n-        and passes all the other arguments straight through.\n-        \"\"\"\n-        allargs = locals()\n-        allargs[\"darray\"] = _PlotMethods_obj._da\n-        allargs.update(kwargs)\n-        for arg in [\"_PlotMethods_obj\", \"newplotfunc\", \"kwargs\"]:\n-            del allargs[arg]\n-        return newplotfunc(**allargs)\n-\n-    # Add to class _PlotMethods\n-    setattr(_PlotMethods, plotmethod.__name__, plotmethod)\n-\n-    return newplotfunc\n-\n-\n-@_plot2d\n-def imshow(x, y, z, ax, **kwargs):\n-    \"\"\"\n-    Image plot of 2D DataArray.\n-\n-    Wraps :py:func:`matplotlib:matplotlib.pyplot.imshow`.\n-\n-    While other plot methods require the DataArray to be strictly\n-    two-dimensional, ``imshow`` also accepts a 3D array where some\n-    dimension can be interpreted as RGB or RGBA color channels and\n-    allows this dimension to be specified via the kwarg ``rgb=``.\n-\n-    Unlike :py:func:`matplotlib:matplotlib.pyplot.imshow`, which ignores ``vmin``/``vmax``\n-    for RGB(A) data,\n-    xarray *will* use ``vmin`` and ``vmax`` for RGB(A) data\n-    by applying a single scaling factor and offset to all bands.\n-    Passing  ``robust=True`` infers ``vmin`` and ``vmax``\n-    :ref:`in the usual way <robust-plotting>`.\n-\n-    .. note::\n-        This function needs uniformly spaced coordinates to\n-        properly label the axes. Call :py:meth:`DataArray.plot` to check.\n-\n-    The pixels are centered on the coordinates. For example, if the coordinate\n-    value is 3.2, then the pixels for those coordinates will be centered on 3.2.\n-    \"\"\"\n-\n-    if x.ndim != 1 or y.ndim != 1:\n-        raise ValueError(\n-            \"imshow requires 1D coordinates, try using pcolormesh or contour(f)\"\n-        )\n-\n-    def _center_pixels(x):\n-        \"\"\"Center the pixels on the coordinates.\"\"\"\n-        if np.issubdtype(x.dtype, str):\n-            # When using strings as inputs imshow converts it to\n-            # integers. Choose extent values which puts the indices in\n-            # in the center of the pixels:\n-            return 0 - 0.5, len(x) - 0.5\n-\n-        try:\n-            # Center the pixels assuming uniform spacing:\n-            xstep = 0.5 * (x[1] - x[0])\n-        except IndexError:\n-            # Arbitrary default value, similar to matplotlib behaviour:\n-            xstep = 0.1\n-\n-        return x[0] - xstep, x[-1] + xstep\n-\n-    # Center the pixels:\n-    left, right = _center_pixels(x)\n-    top, bottom = _center_pixels(y)\n-\n-    defaults = {\"origin\": \"upper\", \"interpolation\": \"nearest\"}\n-\n-    if not hasattr(ax, \"projection\"):\n-        # not for cartopy geoaxes\n-        defaults[\"aspect\"] = \"auto\"\n-\n-    # Allow user to override these defaults\n-    defaults.update(kwargs)\n-\n-    if defaults[\"origin\"] == \"upper\":\n-        defaults[\"extent\"] = [left, right, bottom, top]\n-    else:\n-        defaults[\"extent\"] = [left, right, top, bottom]\n-\n-    if z.ndim == 3:\n-        # matplotlib imshow uses black for missing data, but Xarray makes\n-        # missing data transparent.  We therefore add an alpha channel if\n-        # there isn't one, and set it to transparent where data is masked.\n-        if z.shape[-1] == 3:\n-            alpha = np.ma.ones(z.shape[:2] + (1,), dtype=z.dtype)\n-            if np.issubdtype(z.dtype, np.integer):\n-                alpha *= 255\n-            z = np.ma.concatenate((z, alpha), axis=2)\n-        else:\n-            z = z.copy()\n-        z[np.any(z.mask, axis=-1), -1] = 0\n-\n-    primitive = ax.imshow(z, **defaults)\n-\n-    # If x or y are strings the ticklabels have been replaced with\n-    # integer indices. Replace them back to strings:\n-    for axis, v in [(\"x\", x), (\"y\", y)]:\n-        if np.issubdtype(v.dtype, str):\n-            getattr(ax, f\"set_{axis}ticks\")(np.arange(len(v)))\n-            getattr(ax, f\"set_{axis}ticklabels\")(v)\n-\n-    return primitive\n-\n-\n-@_plot2d\n-def contour(x, y, z, ax, **kwargs):\n-    \"\"\"\n-    Contour plot of 2D DataArray.\n-\n-    Wraps :py:func:`matplotlib:matplotlib.pyplot.contour`.\n-    \"\"\"\n-    primitive = ax.contour(x, y, z, **kwargs)\n-    return primitive\n-\n-\n-@_plot2d\n-def contourf(x, y, z, ax, **kwargs):\n-    \"\"\"\n-    Filled contour plot of 2D DataArray.\n-\n-    Wraps :py:func:`matplotlib:matplotlib.pyplot.contourf`.\n-    \"\"\"\n-    primitive = ax.contourf(x, y, z, **kwargs)\n-    return primitive\n-\n-\n-@_plot2d\n-def pcolormesh(x, y, z, ax, xscale=None, yscale=None, infer_intervals=None, **kwargs):\n-    \"\"\"\n-    Pseudocolor plot of 2D DataArray.\n-\n-    Wraps :py:func:`matplotlib:matplotlib.pyplot.pcolormesh`.\n-    \"\"\"\n-\n-    # decide on a default for infer_intervals (GH781)\n-    x = np.asarray(x)\n-    if infer_intervals is None:\n-        if hasattr(ax, \"projection\"):\n-            if len(x.shape) == 1:\n-                infer_intervals = True\n-            else:\n-                infer_intervals = False\n-        else:\n-            infer_intervals = True\n-\n-    if (\n-        infer_intervals\n-        and not np.issubdtype(x.dtype, str)\n-        and (\n-            (np.shape(x)[0] == np.shape(z)[1])\n-            or ((x.ndim > 1) and (np.shape(x)[1] == np.shape(z)[1]))\n-        )\n-    ):\n-        if len(x.shape) == 1:\n-            x = _infer_interval_breaks(x, check_monotonic=True, scale=xscale)\n-        else:\n-            # we have to infer the intervals on both axes\n-            x = _infer_interval_breaks(x, axis=1, scale=xscale)\n-            x = _infer_interval_breaks(x, axis=0, scale=xscale)\n-\n-    if (\n-        infer_intervals\n-        and not np.issubdtype(y.dtype, str)\n-        and (np.shape(y)[0] == np.shape(z)[0])\n-    ):\n-        if len(y.shape) == 1:\n-            y = _infer_interval_breaks(y, check_monotonic=True, scale=yscale)\n-        else:\n-            # we have to infer the intervals on both axes\n-            y = _infer_interval_breaks(y, axis=1, scale=yscale)\n-            y = _infer_interval_breaks(y, axis=0, scale=yscale)\n-\n-    primitive = ax.pcolormesh(x, y, z, **kwargs)\n-\n-    # by default, pcolormesh picks \"round\" values for bounds\n-    # this results in ugly looking plots with lots of surrounding whitespace\n-    if not hasattr(ax, \"projection\") and x.ndim == 1 and y.ndim == 1:\n-        # not a cartopy geoaxis\n-        ax.set_xlim(x[0], x[-1])\n-        ax.set_ylim(y[0], y[-1])\n-\n-    return primitive\n-\n-\n-@_plot2d\n-def surface(x, y, z, ax, **kwargs):\n-    \"\"\"\n-    Surface plot of 2D DataArray.\n-\n-    Wraps :py:meth:`matplotlib:mpl_toolkits.mplot3d.axes3d.Axes3D.plot_surface`.\n-    \"\"\"\n-    primitive = ax.plot_surface(x, y, z, **kwargs)\n-    return primitive\ndiff --git a/xarray/plot/utils.py b/xarray/plot/utils.py\n--- a/xarray/plot/utils.py\n+++ b/xarray/plot/utils.py\n@@ -5,7 +5,17 @@\n import warnings\n from datetime import datetime\n from inspect import getfullargspec\n-from typing import TYPE_CHECKING, Any, Callable, Hashable, Iterable, Mapping, Sequence\n+from typing import (\n+    TYPE_CHECKING,\n+    Any,\n+    Callable,\n+    Hashable,\n+    Iterable,\n+    Mapping,\n+    Sequence,\n+    TypeVar,\n+    overload,\n+)\n \n import numpy as np\n import pandas as pd\n@@ -31,8 +41,13 @@\n \n if TYPE_CHECKING:\n     from matplotlib.axes import Axes\n+    from matplotlib.colors import Normalize\n+    from matplotlib.ticker import FuncFormatter\n+    from numpy.typing import ArrayLike\n \n     from ..core.dataarray import DataArray\n+    from ..core.dataset import Dataset\n+    from ..core.types import AspectOptions, ScaleOptions\n \n     try:\n         import matplotlib.pyplot as plt\n@@ -42,8 +57,8 @@\n ROBUST_PERCENTILE = 2.0\n \n # copied from seaborn\n-_MARKERSIZE_RANGE = np.array([18.0, 72.0])\n-_LINEWIDTH_RANGE = np.array([1.5, 6.0])\n+_MARKERSIZE_RANGE = (18.0, 72.0)\n+_LINEWIDTH_RANGE = (1.5, 6.0)\n \n \n def import_matplotlib_pyplot():\n@@ -319,7 +334,10 @@ def _determine_cmap_params(\n \n \n def _infer_xy_labels_3d(\n-    darray: DataArray, x: Hashable | None, y: Hashable | None, rgb: Hashable | None\n+    darray: DataArray | Dataset,\n+    x: Hashable | None,\n+    y: Hashable | None,\n+    rgb: Hashable | None,\n ) -> tuple[Hashable, Hashable]:\n     \"\"\"\n     Determine x and y labels for showing RGB images.\n@@ -378,7 +396,7 @@ def _infer_xy_labels_3d(\n \n \n def _infer_xy_labels(\n-    darray: DataArray,\n+    darray: DataArray | Dataset,\n     x: Hashable | None,\n     y: Hashable | None,\n     imshow: bool = False,\n@@ -417,7 +435,9 @@ def _infer_xy_labels(\n \n \n # TODO: Can by used to more than x or y, rename?\n-def _assert_valid_xy(darray: DataArray, xy: Hashable | None, name: str) -> None:\n+def _assert_valid_xy(\n+    darray: DataArray | Dataset, xy: Hashable | None, name: str\n+) -> None:\n     \"\"\"\n     make sure x and y passed to plotting functions are valid\n     \"\"\"\n@@ -441,7 +461,7 @@ def _assert_valid_xy(darray: DataArray, xy: Hashable | None, name: str) -> None:\n def get_axis(\n     figsize: Iterable[float] | None = None,\n     size: float | None = None,\n-    aspect: float | None = None,\n+    aspect: AspectOptions = None,\n     ax: Axes | None = None,\n     **subplot_kws: Any,\n ) -> Axes:\n@@ -462,10 +482,14 @@ def get_axis(\n     if size is not None:\n         if ax is not None:\n             raise ValueError(\"cannot provide both `size` and `ax` arguments\")\n-        if aspect is None:\n+        if aspect is None or aspect == \"auto\":\n             width, height = mpl.rcParams[\"figure.figsize\"]\n-            aspect = width / height\n-        figsize = (size * aspect, size)\n+            faspect = width / height\n+        elif aspect == \"equal\":\n+            faspect = 1\n+        else:\n+            faspect = aspect\n+        figsize = (size * faspect, size)\n         _, ax = plt.subplots(figsize=figsize, subplot_kw=subplot_kws)\n         return ax\n \n@@ -757,16 +781,16 @@ def _rescale_imshow_rgb(darray, vmin, vmax, robust):\n \n \n def _update_axes(\n-    ax,\n-    xincrease,\n-    yincrease,\n-    xscale=None,\n-    yscale=None,\n-    xticks=None,\n-    yticks=None,\n-    xlim=None,\n-    ylim=None,\n-):\n+    ax: Axes,\n+    xincrease: bool | None,\n+    yincrease: bool | None,\n+    xscale: ScaleOptions = None,\n+    yscale: ScaleOptions = None,\n+    xticks: ArrayLike | None = None,\n+    yticks: ArrayLike | None = None,\n+    xlim: ArrayLike | None = None,\n+    ylim: ArrayLike | None = None,\n+) -> None:\n     \"\"\"\n     Update axes with provided parameters\n     \"\"\"\n@@ -885,7 +909,7 @@ def _process_cmap_cbar_kwargs(\n     levels=None,\n     _is_facetgrid=False,\n     **kwargs,\n-):\n+) -> tuple[dict[str, Any], dict[str, Any]]:\n     \"\"\"\n     Parameters\n     ----------\n@@ -895,8 +919,8 @@ def _process_cmap_cbar_kwargs(\n \n     Returns\n     -------\n-    cmap_params\n-    cbar_kwargs\n+    cmap_params : dict\n+    cbar_kwargs : dict\n     \"\"\"\n     if func.__name__ == \"surface\":\n         # Leave user to specify cmap settings for surface plots\n@@ -1284,21 +1308,40 @@ def _infer_meta_data(ds, x, y, hue, hue_style, add_guide, funcname):\n     }\n \n \n+@overload\n+def _parse_size(\n+    data: None,\n+    norm: tuple[float | None, float | None, bool] | Normalize | None,\n+) -> None:\n+    ...\n+\n+\n+@overload\n+def _parse_size(\n+    data: DataArray,\n+    norm: tuple[float | None, float | None, bool] | Normalize | None,\n+) -> pd.Series:\n+    ...\n+\n+\n # copied from seaborn\n-def _parse_size(data, norm):\n+def _parse_size(\n+    data: DataArray | None,\n+    norm: tuple[float | None, float | None, bool] | Normalize | None,\n+) -> None | pd.Series:\n \n     import matplotlib as mpl\n \n     if data is None:\n         return None\n \n-    data = data.values.flatten()\n+    flatdata = data.values.flatten()\n \n-    if not _is_numeric(data):\n-        levels = np.unique(data)\n+    if not _is_numeric(flatdata):\n+        levels = np.unique(flatdata)\n         numbers = np.arange(1, 1 + len(levels))[::-1]\n     else:\n-        levels = numbers = np.sort(np.unique(data))\n+        levels = numbers = np.sort(np.unique(flatdata))\n \n     min_width, max_width = _MARKERSIZE_RANGE\n     # width_range = min_width, max_width\n@@ -1310,6 +1353,7 @@ def _parse_size(data, norm):\n     elif not isinstance(norm, mpl.colors.Normalize):\n         err = \"``size_norm`` must be None, tuple, or Normalize object.\"\n         raise ValueError(err)\n+    assert isinstance(norm, mpl.colors.Normalize)\n \n     norm.clip = True\n     if not norm.scaled():\n@@ -1325,6 +1369,9 @@ def _parse_size(data, norm):\n     return pd.Series(sizes)\n \n \n+T = TypeVar(\"T\", np.ndarray, \"DataArray\")\n+\n+\n class _Normalize(Sequence):\n     \"\"\"\n     Normalize numerical or categorical values to numerical values.\n@@ -1341,6 +1388,13 @@ class _Normalize(Sequence):\n         The default is None.\n     \"\"\"\n \n+    _data: DataArray | None\n+    _data_is_numeric: bool\n+    _width: tuple[float, float] | None\n+    _unique: np.ndarray\n+    _unique_index: np.ndarray\n+    _unique_inverse: np.ndarray | DataArray\n+\n     __slots__ = (\n         \"_data\",\n         \"_data_is_numeric\",\n@@ -1348,17 +1402,24 @@ class _Normalize(Sequence):\n         \"_unique\",\n         \"_unique_index\",\n         \"_unique_inverse\",\n-        \"plt\",\n     )\n \n-    def __init__(self, data, width=None, _is_facetgrid=False):\n+    def __init__(\n+        self,\n+        data: DataArray | None,\n+        width: tuple[float, float] | None = None,\n+        _is_facetgrid: bool = False,\n+    ) -> None:\n         self._data = data\n         self._width = width if not _is_facetgrid else None\n-        self.plt = import_matplotlib_pyplot()\n \n         pint_array_type = DuckArrayModule(\"pint\").type\n-        to_unique = data.to_numpy() if isinstance(self._type, pint_array_type) else data\n-        unique, unique_inverse = np.unique(to_unique, return_inverse=True)\n+        to_unique = (\n+            data.to_numpy()  # type: ignore[union-attr]\n+            if isinstance(self._type, pint_array_type)\n+            else data\n+        )\n+        unique, unique_inverse = np.unique(to_unique, return_inverse=True)  # type: ignore[call-overload]\n         self._unique = unique\n         self._unique_index = np.arange(0, unique.size)\n         if data is not None:\n@@ -1382,12 +1443,12 @@ def __getitem__(self, key):\n         return self._unique[key]\n \n     @property\n-    def _type(self):\n-        data = self.data\n-        return data.data if data is not None else data\n+    def _type(self) -> Any | None:  # same as DataArray.data?\n+        da = self.data\n+        return da.data if da is not None else da\n \n     @property\n-    def data(self):\n+    def data(self) -> DataArray | None:\n         return self._data\n \n     @property\n@@ -1403,7 +1464,7 @@ def data_is_numeric(self) -> bool:\n         \"\"\"\n         return self._data_is_numeric\n \n-    def _calc_widths(self, y):\n+    def _calc_widths(self, y: T | None) -> T | None:\n         if self._width is None or y is None:\n             return y\n \n@@ -1414,15 +1475,14 @@ def _calc_widths(self, y):\n \n         return widths\n \n-    def _indexes_centered(self, x) -> None | Any:\n+    def _indexes_centered(self, x: T) -> T | None:\n         \"\"\"\n         Offset indexes to make sure being in the center of self.levels.\n         [\"a\", \"b\", \"c\"] -> [1, 3, 5]\n         \"\"\"\n         if self.data is None:\n             return None\n-        else:\n-            return x * 2 + 1\n+        return x * 2 + 1\n \n     @property\n     def values(self):\n@@ -1527,7 +1587,7 @@ def _lookup_arr(self, x) -> np.ndarray:\n         return self._lookup.sort_index().reindex(x, method=\"nearest\").to_numpy()\n \n     @property\n-    def format(self) -> plt.FuncFormatter:\n+    def format(self) -> FuncFormatter:\n         \"\"\"\n         Return a FuncFormatter that maps self.values elements back to\n         the original value as a string. Useful with plt.colorbar.\n@@ -1545,11 +1605,12 @@ def format(self) -> plt.FuncFormatter:\n         >>> aa.format(1)\n         '3.0'\n         \"\"\"\n+        plt = import_matplotlib_pyplot()\n \n         def _func(x: Any, pos: None | Any = None):\n             return f\"{self._lookup_arr([x])[0]}\"\n \n-        return self.plt.FuncFormatter(_func)\n+        return plt.FuncFormatter(_func)\n \n     @property\n     def func(self) -> Callable[[Any, None | Any], Any]:\n",
  "test_patch": "diff --git a/xarray/tests/__init__.py b/xarray/tests/__init__.py\n--- a/xarray/tests/__init__.py\n+++ b/xarray/tests/__init__.py\n@@ -4,7 +4,6 @@\n import platform\n import warnings\n from contextlib import contextmanager, nullcontext\n-from typing import Any\n from unittest import mock  # noqa: F401\n \n import numpy as np\n@@ -43,7 +42,9 @@\n )\n \n \n-def _importorskip(modname: str, minversion: str | None = None) -> tuple[bool, Any]:\n+def _importorskip(\n+    modname: str, minversion: str | None = None\n+) -> tuple[bool, pytest.MarkDecorator]:\n     try:\n         mod = importlib.import_module(modname)\n         has = True\ndiff --git a/xarray/tests/test_plot.py b/xarray/tests/test_plot.py\n--- a/xarray/tests/test_plot.py\n+++ b/xarray/tests/test_plot.py\n@@ -5,7 +5,7 @@\n import math\n from copy import copy\n from datetime import datetime\n-from typing import Any\n+from typing import Any, Callable, Hashable, Literal\n \n import numpy as np\n import pandas as pd\n@@ -14,8 +14,8 @@\n import xarray as xr\n import xarray.plot as xplt\n from xarray import DataArray, Dataset\n+from xarray.plot.dataarray_plot import _infer_interval_breaks\n from xarray.plot.dataset_plot import _infer_meta_data\n-from xarray.plot.plot import _infer_interval_breaks\n from xarray.plot.utils import (\n     _assert_valid_xy,\n     _build_discrete_cmap,\n@@ -170,16 +170,16 @@ def contourf_called(self, plotmethod):\n \n class TestPlot(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setup_array(self):\n+    def setup_array(self) -> None:\n         self.darray = DataArray(easy_array((2, 3, 4)))\n \n-    def test_accessor(self):\n-        from ..plot.plot import _PlotMethods\n+    def test_accessor(self) -> None:\n+        from xarray.plot.accessor import DataArrayPlotAccessor\n \n-        assert DataArray.plot is _PlotMethods\n-        assert isinstance(self.darray.plot, _PlotMethods)\n+        assert DataArray.plot is DataArrayPlotAccessor\n+        assert isinstance(self.darray.plot, DataArrayPlotAccessor)\n \n-    def test_label_from_attrs(self):\n+    def test_label_from_attrs(self) -> None:\n         da = self.darray.copy()\n         assert \"\" == label_from_attrs(da)\n \n@@ -209,7 +209,7 @@ def test_label_from_attrs(self):\n         da.attrs = dict(long_name=long_latex_name)\n         assert label_from_attrs(da) == long_latex_name\n \n-    def test1d(self):\n+    def test1d(self) -> None:\n         self.darray[:, 0, 0].plot()\n \n         with pytest.raises(ValueError, match=r\"x must be one of None, 'dim_0'\"):\n@@ -218,14 +218,14 @@ def test1d(self):\n         with pytest.raises(TypeError, match=r\"complex128\"):\n             (self.darray[:, 0, 0] + 1j).plot()\n \n-    def test_1d_bool(self):\n+    def test_1d_bool(self) -> None:\n         xr.ones_like(self.darray[:, 0, 0], dtype=bool).plot()\n \n-    def test_1d_x_y_kw(self):\n+    def test_1d_x_y_kw(self) -> None:\n         z = np.arange(10)\n         da = DataArray(np.cos(z), dims=[\"z\"], coords=[z], name=\"f\")\n \n-        xy = [[None, None], [None, \"z\"], [\"z\", None]]\n+        xy: list[list[None | str]] = [[None, None], [None, \"z\"], [\"z\", None]]\n \n         f, ax = plt.subplots(3, 1)\n         for aa, (x, y) in enumerate(xy):\n@@ -241,7 +241,7 @@ def test_1d_x_y_kw(self):\n         with pytest.raises(ValueError, match=rf\"y {error_msg}\"):\n             da.plot(y=\"f\")\n \n-    def test_multiindex_level_as_coord(self):\n+    def test_multiindex_level_as_coord(self) -> None:\n         da = xr.DataArray(\n             np.arange(5),\n             dims=\"x\",\n@@ -258,7 +258,7 @@ def test_multiindex_level_as_coord(self):\n             assert_array_equal(h.get_ydata(), da[y].values)\n \n     # Test for bug in GH issue #2725\n-    def test_infer_line_data(self):\n+    def test_infer_line_data(self) -> None:\n         current = DataArray(\n             name=\"I\",\n             data=np.array([5, 8]),\n@@ -277,7 +277,7 @@ def test_infer_line_data(self):\n         line = current.plot.line()[0]\n         assert_array_equal(line.get_xdata(), current.coords[\"t\"].values)\n \n-    def test_line_plot_along_1d_coord(self):\n+    def test_line_plot_along_1d_coord(self) -> None:\n         # Test for bug in GH #3334\n         x_coord = xr.DataArray(data=[0.1, 0.2], dims=[\"x\"])\n         t_coord = xr.DataArray(data=[10, 20], dims=[\"t\"])\n@@ -294,7 +294,7 @@ def test_line_plot_along_1d_coord(self):\n         line = da.plot(y=\"time\", hue=\"x\")[0]\n         assert_array_equal(line.get_ydata(), da.coords[\"time\"].values)\n \n-    def test_line_plot_wrong_hue(self):\n+    def test_line_plot_wrong_hue(self) -> None:\n         da = xr.DataArray(\n             data=np.array([[0, 1], [5, 9]]),\n             dims=[\"x\", \"t\"],\n@@ -303,7 +303,7 @@ def test_line_plot_wrong_hue(self):\n         with pytest.raises(ValueError, match=\"hue must be one of\"):\n             da.plot(x=\"t\", hue=\"wrong_coord\")\n \n-    def test_2d_line(self):\n+    def test_2d_line(self) -> None:\n         with pytest.raises(ValueError, match=r\"hue\"):\n             self.darray[:, :, 0].plot.line()\n \n@@ -316,7 +316,7 @@ def test_2d_line(self):\n         with pytest.raises(ValueError, match=r\"Cannot\"):\n             self.darray[:, :, 0].plot.line(x=\"dim_1\", y=\"dim_0\", hue=\"dim_1\")\n \n-    def test_2d_line_accepts_legend_kw(self):\n+    def test_2d_line_accepts_legend_kw(self) -> None:\n         self.darray[:, :, 0].plot.line(x=\"dim_0\", add_legend=False)\n         assert not plt.gca().get_legend()\n         plt.cla()\n@@ -325,21 +325,21 @@ def test_2d_line_accepts_legend_kw(self):\n         # check whether legend title is set\n         assert plt.gca().get_legend().get_title().get_text() == \"dim_1\"\n \n-    def test_2d_line_accepts_x_kw(self):\n+    def test_2d_line_accepts_x_kw(self) -> None:\n         self.darray[:, :, 0].plot.line(x=\"dim_0\")\n         assert plt.gca().get_xlabel() == \"dim_0\"\n         plt.cla()\n         self.darray[:, :, 0].plot.line(x=\"dim_1\")\n         assert plt.gca().get_xlabel() == \"dim_1\"\n \n-    def test_2d_line_accepts_hue_kw(self):\n+    def test_2d_line_accepts_hue_kw(self) -> None:\n         self.darray[:, :, 0].plot.line(hue=\"dim_0\")\n         assert plt.gca().get_legend().get_title().get_text() == \"dim_0\"\n         plt.cla()\n         self.darray[:, :, 0].plot.line(hue=\"dim_1\")\n         assert plt.gca().get_legend().get_title().get_text() == \"dim_1\"\n \n-    def test_2d_coords_line_plot(self):\n+    def test_2d_coords_line_plot(self) -> None:\n         lon, lat = np.meshgrid(np.linspace(-20, 20, 5), np.linspace(0, 30, 4))\n         lon += lat / 10\n         lat += lon / 10\n@@ -360,7 +360,7 @@ def test_2d_coords_line_plot(self):\n         with pytest.raises(ValueError, match=\"For 2D inputs, hue must be a dimension\"):\n             da.plot.line(x=\"lon\", hue=\"lat\")\n \n-    def test_2d_coord_line_plot_coords_transpose_invariant(self):\n+    def test_2d_coord_line_plot_coords_transpose_invariant(self) -> None:\n         # checks for bug reported in GH #3933\n         x = np.arange(10)\n         y = np.arange(20)\n@@ -371,20 +371,20 @@ def test_2d_coord_line_plot_coords_transpose_invariant(self):\n             ds[\"v\"] = ds.x + ds.y\n             ds[\"v\"].plot.line(y=\"z\", hue=\"x\")\n \n-    def test_2d_before_squeeze(self):\n+    def test_2d_before_squeeze(self) -> None:\n         a = DataArray(easy_array((1, 5)))\n         a.plot()\n \n-    def test2d_uniform_calls_imshow(self):\n+    def test2d_uniform_calls_imshow(self) -> None:\n         assert self.imshow_called(self.darray[:, :, 0].plot.imshow)\n \n     @pytest.mark.slow\n-    def test2d_nonuniform_calls_contourf(self):\n+    def test2d_nonuniform_calls_contourf(self) -> None:\n         a = self.darray[:, :, 0]\n         a.coords[\"dim_1\"] = [2, 1, 89]\n         assert self.contourf_called(a.plot.contourf)\n \n-    def test2d_1d_2d_coordinates_contourf(self):\n+    def test2d_1d_2d_coordinates_contourf(self) -> None:\n         sz = (20, 10)\n         depth = easy_array(sz)\n         a = DataArray(\n@@ -396,7 +396,7 @@ def test2d_1d_2d_coordinates_contourf(self):\n         a.plot.contourf(x=\"time\", y=\"depth\")\n         a.plot.contourf(x=\"depth\", y=\"time\")\n \n-    def test2d_1d_2d_coordinates_pcolormesh(self):\n+    def test2d_1d_2d_coordinates_pcolormesh(self) -> None:\n         # Test with equal coordinates to catch bug from #5097\n         sz = 10\n         y2d, x2d = np.meshgrid(np.arange(sz), np.arange(sz))\n@@ -424,7 +424,7 @@ def test2d_1d_2d_coordinates_pcolormesh(self):\n             _, unique_counts = np.unique(v[:-1], axis=0, return_counts=True)\n             assert np.all(unique_counts == 1)\n \n-    def test_contourf_cmap_set(self):\n+    def test_contourf_cmap_set(self) -> None:\n         a = DataArray(easy_array((4, 4)), dims=[\"z\", \"time\"])\n \n         cmap = mpl.cm.viridis\n@@ -451,7 +451,7 @@ def test_contourf_cmap_set(self):\n         # check the set_over color\n         assert pl.cmap(np.inf) == cmap(np.inf)\n \n-    def test_contourf_cmap_set_with_bad_under_over(self):\n+    def test_contourf_cmap_set_with_bad_under_over(self) -> None:\n         a = DataArray(easy_array((4, 4)), dims=[\"z\", \"time\"])\n \n         # make a copy here because we want a local cmap that we will modify.\n@@ -487,13 +487,13 @@ def test_contourf_cmap_set_with_bad_under_over(self):\n         # check the set_over color has been kept\n         assert pl.cmap(np.inf) == cmap(np.inf)\n \n-    def test3d(self):\n+    def test3d(self) -> None:\n         self.darray.plot()\n \n-    def test_can_pass_in_axis(self):\n+    def test_can_pass_in_axis(self) -> None:\n         self.pass_in_axis(self.darray.plot)\n \n-    def test__infer_interval_breaks(self):\n+    def test__infer_interval_breaks(self) -> None:\n         assert_array_equal([-0.5, 0.5, 1.5], _infer_interval_breaks([0, 1]))\n         assert_array_equal(\n             [-0.5, 0.5, 5.0, 9.5, 10.5], _infer_interval_breaks([0, 1, 9, 10])\n@@ -518,7 +518,7 @@ def test__infer_interval_breaks(self):\n         with pytest.raises(ValueError):\n             _infer_interval_breaks(np.array([0, 2, 1]), check_monotonic=True)\n \n-    def test__infer_interval_breaks_logscale(self):\n+    def test__infer_interval_breaks_logscale(self) -> None:\n         \"\"\"\n         Check if interval breaks are defined in the logspace if scale=\"log\"\n         \"\"\"\n@@ -538,7 +538,7 @@ def test__infer_interval_breaks_logscale(self):\n         x = _infer_interval_breaks(x, axis=0, scale=\"log\")\n         np.testing.assert_allclose(x, expected_interval_breaks)\n \n-    def test__infer_interval_breaks_logscale_invalid_coords(self):\n+    def test__infer_interval_breaks_logscale_invalid_coords(self) -> None:\n         \"\"\"\n         Check error is raised when passing non-positive coordinates with logscale\n         \"\"\"\n@@ -551,7 +551,7 @@ def test__infer_interval_breaks_logscale_invalid_coords(self):\n         with pytest.raises(ValueError):\n             _infer_interval_breaks(x, scale=\"log\")\n \n-    def test_geo_data(self):\n+    def test_geo_data(self) -> None:\n         # Regression test for gh2250\n         # Realistic coordinates taken from the example dataset\n         lat = np.array(\n@@ -583,7 +583,7 @@ def test_geo_data(self):\n         ax = plt.gca()\n         assert ax.has_data()\n \n-    def test_datetime_dimension(self):\n+    def test_datetime_dimension(self) -> None:\n         nrow = 3\n         ncol = 4\n         time = pd.date_range(\"2000-01-01\", periods=nrow)\n@@ -596,7 +596,7 @@ def test_datetime_dimension(self):\n \n     @pytest.mark.slow\n     @pytest.mark.filterwarnings(\"ignore:tight_layout cannot\")\n-    def test_convenient_facetgrid(self):\n+    def test_convenient_facetgrid(self) -> None:\n         a = easy_array((10, 15, 4))\n         d = DataArray(a, dims=[\"y\", \"x\", \"z\"])\n         d.coords[\"z\"] = list(\"abcd\")\n@@ -613,7 +613,7 @@ def test_convenient_facetgrid(self):\n             d[0].plot(x=\"x\", y=\"y\", col=\"z\", ax=plt.gca())\n \n     @pytest.mark.slow\n-    def test_subplot_kws(self):\n+    def test_subplot_kws(self) -> None:\n         a = easy_array((10, 15, 4))\n         d = DataArray(a, dims=[\"y\", \"x\", \"z\"])\n         d.coords[\"z\"] = list(\"abcd\")\n@@ -630,7 +630,7 @@ def test_subplot_kws(self):\n             assert ax.get_facecolor()[0:3] == mpl.colors.to_rgb(\"r\")\n \n     @pytest.mark.slow\n-    def test_plot_size(self):\n+    def test_plot_size(self) -> None:\n         self.darray[:, 0, 0].plot(figsize=(13, 5))\n         assert tuple(plt.gcf().get_size_inches()) == (13, 5)\n \n@@ -657,7 +657,7 @@ def test_plot_size(self):\n \n     @pytest.mark.slow\n     @pytest.mark.filterwarnings(\"ignore:tight_layout cannot\")\n-    def test_convenient_facetgrid_4d(self):\n+    def test_convenient_facetgrid_4d(self) -> None:\n         a = easy_array((10, 15, 2, 3))\n         d = DataArray(a, dims=[\"y\", \"x\", \"columns\", \"rows\"])\n         g = d.plot(x=\"x\", y=\"y\", col=\"columns\", row=\"rows\")\n@@ -669,28 +669,28 @@ def test_convenient_facetgrid_4d(self):\n         with pytest.raises(ValueError, match=r\"[Ff]acet\"):\n             d.plot(x=\"x\", y=\"y\", col=\"columns\", ax=plt.gca())\n \n-    def test_coord_with_interval(self):\n+    def test_coord_with_interval(self) -> None:\n         \"\"\"Test line plot with intervals.\"\"\"\n         bins = [-1, 0, 1, 2]\n         self.darray.groupby_bins(\"dim_0\", bins).mean(...).plot()\n \n-    def test_coord_with_interval_x(self):\n+    def test_coord_with_interval_x(self) -> None:\n         \"\"\"Test line plot with intervals explicitly on x axis.\"\"\"\n         bins = [-1, 0, 1, 2]\n         self.darray.groupby_bins(\"dim_0\", bins).mean(...).plot(x=\"dim_0_bins\")\n \n-    def test_coord_with_interval_y(self):\n+    def test_coord_with_interval_y(self) -> None:\n         \"\"\"Test line plot with intervals explicitly on y axis.\"\"\"\n         bins = [-1, 0, 1, 2]\n         self.darray.groupby_bins(\"dim_0\", bins).mean(...).plot(y=\"dim_0_bins\")\n \n-    def test_coord_with_interval_xy(self):\n+    def test_coord_with_interval_xy(self) -> None:\n         \"\"\"Test line plot with intervals on both x and y axes.\"\"\"\n         bins = [-1, 0, 1, 2]\n         self.darray.groupby_bins(\"dim_0\", bins).mean(...).dim_0_bins.plot()\n \n     @pytest.mark.parametrize(\"dim\", (\"x\", \"y\"))\n-    def test_labels_with_units_with_interval(self, dim):\n+    def test_labels_with_units_with_interval(self, dim) -> None:\n         \"\"\"Test line plot with intervals and a units attribute.\"\"\"\n         bins = [-1, 0, 1, 2]\n         arr = self.darray.groupby_bins(\"dim_0\", bins).mean(...)\n@@ -706,75 +706,75 @@ def test_labels_with_units_with_interval(self, dim):\n \n class TestPlot1D(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         d = [0, 1.1, 0, 2]\n         self.darray = DataArray(d, coords={\"period\": range(len(d))}, dims=\"period\")\n         self.darray.period.attrs[\"units\"] = \"s\"\n \n-    def test_xlabel_is_index_name(self):\n+    def test_xlabel_is_index_name(self) -> None:\n         self.darray.plot()\n         assert \"period [s]\" == plt.gca().get_xlabel()\n \n-    def test_no_label_name_on_x_axis(self):\n+    def test_no_label_name_on_x_axis(self) -> None:\n         self.darray.plot(y=\"period\")\n         assert \"\" == plt.gca().get_xlabel()\n \n-    def test_no_label_name_on_y_axis(self):\n+    def test_no_label_name_on_y_axis(self) -> None:\n         self.darray.plot()\n         assert \"\" == plt.gca().get_ylabel()\n \n-    def test_ylabel_is_data_name(self):\n+    def test_ylabel_is_data_name(self) -> None:\n         self.darray.name = \"temperature\"\n         self.darray.attrs[\"units\"] = \"degrees_Celsius\"\n         self.darray.plot()\n         assert \"temperature [degrees_Celsius]\" == plt.gca().get_ylabel()\n \n-    def test_xlabel_is_data_name(self):\n+    def test_xlabel_is_data_name(self) -> None:\n         self.darray.name = \"temperature\"\n         self.darray.attrs[\"units\"] = \"degrees_Celsius\"\n         self.darray.plot(y=\"period\")\n         assert \"temperature [degrees_Celsius]\" == plt.gca().get_xlabel()\n \n-    def test_format_string(self):\n+    def test_format_string(self) -> None:\n         self.darray.plot.line(\"ro\")\n \n-    def test_can_pass_in_axis(self):\n+    def test_can_pass_in_axis(self) -> None:\n         self.pass_in_axis(self.darray.plot.line)\n \n-    def test_nonnumeric_index(self):\n+    def test_nonnumeric_index(self) -> None:\n         a = DataArray([1, 2, 3], {\"letter\": [\"a\", \"b\", \"c\"]}, dims=\"letter\")\n         a.plot.line()\n \n-    def test_primitive_returned(self):\n+    def test_primitive_returned(self) -> None:\n         p = self.darray.plot.line()\n         assert isinstance(p[0], mpl.lines.Line2D)\n \n     @pytest.mark.slow\n-    def test_plot_nans(self):\n+    def test_plot_nans(self) -> None:\n         self.darray[1] = np.nan\n         self.darray.plot.line()\n \n-    def test_x_ticks_are_rotated_for_time(self):\n+    def test_x_ticks_are_rotated_for_time(self) -> None:\n         time = pd.date_range(\"2000-01-01\", \"2000-01-10\")\n         a = DataArray(np.arange(len(time)), [(\"t\", time)])\n         a.plot.line()\n         rotation = plt.gca().get_xticklabels()[0].get_rotation()\n         assert rotation != 0\n \n-    def test_xyincrease_false_changes_axes(self):\n+    def test_xyincrease_false_changes_axes(self) -> None:\n         self.darray.plot.line(xincrease=False, yincrease=False)\n         xlim = plt.gca().get_xlim()\n         ylim = plt.gca().get_ylim()\n         diffs = xlim[1] - xlim[0], ylim[1] - ylim[0]\n         assert all(x < 0 for x in diffs)\n \n-    def test_slice_in_title(self):\n+    def test_slice_in_title(self) -> None:\n         self.darray.coords[\"d\"] = 10.009\n         self.darray.plot.line()\n         title = plt.gca().get_title()\n         assert \"d = 10.01\" == title\n \n-    def test_slice_in_title_single_item_array(self):\n+    def test_slice_in_title_single_item_array(self) -> None:\n         \"\"\"Edge case for data of shape (1, N) or (N, 1).\"\"\"\n         darray = self.darray.expand_dims({\"d\": np.array([10.009])})\n         darray.plot.line(x=\"period\")\n@@ -784,55 +784,55 @@ def test_slice_in_title_single_item_array(self):\n \n class TestPlotStep(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         self.darray = DataArray(easy_array((2, 3, 4)))\n \n-    def test_step(self):\n+    def test_step(self) -> None:\n         hdl = self.darray[0, 0].plot.step()\n         assert \"steps\" in hdl[0].get_drawstyle()\n \n     @pytest.mark.parametrize(\"where\", [\"pre\", \"post\", \"mid\"])\n-    def test_step_with_where(self, where):\n+    def test_step_with_where(self, where) -> None:\n         hdl = self.darray[0, 0].plot.step(where=where)\n         assert hdl[0].get_drawstyle() == f\"steps-{where}\"\n \n-    def test_step_with_hue(self):\n+    def test_step_with_hue(self) -> None:\n         hdl = self.darray[0].plot.step(hue=\"dim_2\")\n         assert hdl[0].get_drawstyle() == \"steps-pre\"\n \n     @pytest.mark.parametrize(\"where\", [\"pre\", \"post\", \"mid\"])\n-    def test_step_with_hue_and_where(self, where):\n+    def test_step_with_hue_and_where(self, where) -> None:\n         hdl = self.darray[0].plot.step(hue=\"dim_2\", where=where)\n         assert hdl[0].get_drawstyle() == f\"steps-{where}\"\n \n-    def test_drawstyle_steps(self):\n+    def test_drawstyle_steps(self) -> None:\n         hdl = self.darray[0].plot(hue=\"dim_2\", drawstyle=\"steps\")\n         assert hdl[0].get_drawstyle() == \"steps\"\n \n     @pytest.mark.parametrize(\"where\", [\"pre\", \"post\", \"mid\"])\n-    def test_drawstyle_steps_with_where(self, where):\n+    def test_drawstyle_steps_with_where(self, where) -> None:\n         hdl = self.darray[0].plot(hue=\"dim_2\", drawstyle=f\"steps-{where}\")\n         assert hdl[0].get_drawstyle() == f\"steps-{where}\"\n \n-    def test_coord_with_interval_step(self):\n+    def test_coord_with_interval_step(self) -> None:\n         \"\"\"Test step plot with intervals.\"\"\"\n         bins = [-1, 0, 1, 2]\n         self.darray.groupby_bins(\"dim_0\", bins).mean(...).plot.step()\n         assert len(plt.gca().lines[0].get_xdata()) == ((len(bins) - 1) * 2)\n \n-    def test_coord_with_interval_step_x(self):\n+    def test_coord_with_interval_step_x(self) -> None:\n         \"\"\"Test step plot with intervals explicitly on x axis.\"\"\"\n         bins = [-1, 0, 1, 2]\n         self.darray.groupby_bins(\"dim_0\", bins).mean(...).plot.step(x=\"dim_0_bins\")\n         assert len(plt.gca().lines[0].get_xdata()) == ((len(bins) - 1) * 2)\n \n-    def test_coord_with_interval_step_y(self):\n+    def test_coord_with_interval_step_y(self) -> None:\n         \"\"\"Test step plot with intervals explicitly on y axis.\"\"\"\n         bins = [-1, 0, 1, 2]\n         self.darray.groupby_bins(\"dim_0\", bins).mean(...).plot.step(y=\"dim_0_bins\")\n         assert len(plt.gca().lines[0].get_xdata()) == ((len(bins) - 1) * 2)\n \n-    def test_coord_with_interval_step_x_and_y_raises_valueeerror(self):\n+    def test_coord_with_interval_step_x_and_y_raises_valueeerror(self) -> None:\n         \"\"\"Test that step plot with intervals both on x and y axes raises an error.\"\"\"\n         arr = xr.DataArray(\n             [pd.Interval(0, 1), pd.Interval(1, 2)],\n@@ -844,41 +844,41 @@ def test_coord_with_interval_step_x_and_y_raises_valueeerror(self):\n \n class TestPlotHistogram(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         self.darray = DataArray(easy_array((2, 3, 4)))\n \n-    def test_3d_array(self):\n+    def test_3d_array(self) -> None:\n         self.darray.plot.hist()\n \n-    def test_xlabel_uses_name(self):\n+    def test_xlabel_uses_name(self) -> None:\n         self.darray.name = \"testpoints\"\n         self.darray.attrs[\"units\"] = \"testunits\"\n         self.darray.plot.hist()\n         assert \"testpoints [testunits]\" == plt.gca().get_xlabel()\n \n-    def test_title_is_histogram(self):\n+    def test_title_is_histogram(self) -> None:\n         self.darray.coords[\"d\"] = 10\n         self.darray.plot.hist()\n         assert \"d = 10\" == plt.gca().get_title()\n \n-    def test_can_pass_in_kwargs(self):\n+    def test_can_pass_in_kwargs(self) -> None:\n         nbins = 5\n         self.darray.plot.hist(bins=nbins)\n         assert nbins == len(plt.gca().patches)\n \n-    def test_can_pass_in_axis(self):\n+    def test_can_pass_in_axis(self) -> None:\n         self.pass_in_axis(self.darray.plot.hist)\n \n-    def test_primitive_returned(self):\n+    def test_primitive_returned(self) -> None:\n         h = self.darray.plot.hist()\n         assert isinstance(h[-1][0], mpl.patches.Rectangle)\n \n     @pytest.mark.slow\n-    def test_plot_nans(self):\n+    def test_plot_nans(self) -> None:\n         self.darray[0, 0, 0] = np.nan\n         self.darray.plot.hist()\n \n-    def test_hist_coord_with_interval(self):\n+    def test_hist_coord_with_interval(self) -> None:\n         (\n             self.darray.groupby_bins(\"dim_0\", [-1, 0, 1, 2])\n             .mean(...)\n@@ -889,10 +889,10 @@ def test_hist_coord_with_interval(self):\n @requires_matplotlib\n class TestDetermineCmapParams:\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         self.data = np.linspace(0, 1, num=100)\n \n-    def test_robust(self):\n+    def test_robust(self) -> None:\n         cmap_params = _determine_cmap_params(self.data, robust=True)\n         assert cmap_params[\"vmin\"] == np.percentile(self.data, 2)\n         assert cmap_params[\"vmax\"] == np.percentile(self.data, 98)\n@@ -901,7 +901,7 @@ def test_robust(self):\n         assert cmap_params[\"levels\"] is None\n         assert cmap_params[\"norm\"] is None\n \n-    def test_center(self):\n+    def test_center(self) -> None:\n         cmap_params = _determine_cmap_params(self.data, center=0.5)\n         assert cmap_params[\"vmax\"] - 0.5 == 0.5 - cmap_params[\"vmin\"]\n         assert cmap_params[\"cmap\"] == \"RdBu_r\"\n@@ -909,22 +909,22 @@ def test_center(self):\n         assert cmap_params[\"levels\"] is None\n         assert cmap_params[\"norm\"] is None\n \n-    def test_cmap_sequential_option(self):\n+    def test_cmap_sequential_option(self) -> None:\n         with xr.set_options(cmap_sequential=\"magma\"):\n             cmap_params = _determine_cmap_params(self.data)\n             assert cmap_params[\"cmap\"] == \"magma\"\n \n-    def test_cmap_sequential_explicit_option(self):\n+    def test_cmap_sequential_explicit_option(self) -> None:\n         with xr.set_options(cmap_sequential=mpl.cm.magma):\n             cmap_params = _determine_cmap_params(self.data)\n             assert cmap_params[\"cmap\"] == mpl.cm.magma\n \n-    def test_cmap_divergent_option(self):\n+    def test_cmap_divergent_option(self) -> None:\n         with xr.set_options(cmap_divergent=\"magma\"):\n             cmap_params = _determine_cmap_params(self.data, center=0.5)\n             assert cmap_params[\"cmap\"] == \"magma\"\n \n-    def test_nan_inf_are_ignored(self):\n+    def test_nan_inf_are_ignored(self) -> None:\n         cmap_params1 = _determine_cmap_params(self.data)\n         data = self.data\n         data[50:55] = np.nan\n@@ -934,7 +934,7 @@ def test_nan_inf_are_ignored(self):\n         assert cmap_params1[\"vmax\"] == cmap_params2[\"vmax\"]\n \n     @pytest.mark.slow\n-    def test_integer_levels(self):\n+    def test_integer_levels(self) -> None:\n         data = self.data + 1\n \n         # default is to cover full data range but with no guarantee on Nlevels\n@@ -973,7 +973,7 @@ def test_integer_levels(self):\n         assert cmap_params[\"cmap\"].name == \"viridis\"\n         assert cmap_params[\"extend\"] == \"both\"\n \n-    def test_list_levels(self):\n+    def test_list_levels(self) -> None:\n         data = self.data + 1\n \n         orig_levels = [0, 1, 2, 3, 4, 5]\n@@ -990,7 +990,7 @@ def test_list_levels(self):\n             cmap_params = _determine_cmap_params(data, levels=wrap_levels(orig_levels))\n             assert_array_equal(cmap_params[\"levels\"], orig_levels)\n \n-    def test_divergentcontrol(self):\n+    def test_divergentcontrol(self) -> None:\n         neg = self.data - 0.1\n         pos = self.data\n \n@@ -1068,7 +1068,7 @@ def test_divergentcontrol(self):\n         # specifying levels makes cmap a Colormap object\n         assert cmap_params[\"cmap\"].name == \"RdBu_r\"\n \n-    def test_norm_sets_vmin_vmax(self):\n+    def test_norm_sets_vmin_vmax(self) -> None:\n         vmin = self.data.min()\n         vmax = self.data.max()\n \n@@ -1112,13 +1112,13 @@ def setUp(self):\n         plt.close(\"all\")\n \n     @pytest.mark.slow\n-    def test_recover_from_seaborn_jet_exception(self):\n+    def test_recover_from_seaborn_jet_exception(self) -> None:\n         pal = _color_palette(\"jet\", 4)\n         assert type(pal) == np.ndarray\n         assert len(pal) == 4\n \n     @pytest.mark.slow\n-    def test_build_discrete_cmap(self):\n+    def test_build_discrete_cmap(self) -> None:\n         for (cmap, levels, extend, filled) in [\n             (\"jet\", [0, 1], \"both\", False),\n             (\"hot\", [-4, 4], \"max\", True),\n@@ -1136,7 +1136,7 @@ def test_build_discrete_cmap(self):\n                 assert ncmap.colorbar_extend == \"max\"\n \n     @pytest.mark.slow\n-    def test_discrete_colormap_list_of_levels(self):\n+    def test_discrete_colormap_list_of_levels(self) -> None:\n         for extend, levels in [\n             (\"max\", [-1, 2, 4, 8, 10]),\n             (\"both\", [2, 5, 10, 11]),\n@@ -1155,7 +1155,7 @@ def test_discrete_colormap_list_of_levels(self):\n                 assert len(levels) - 1 == len(primitive.cmap.colors)\n \n     @pytest.mark.slow\n-    def test_discrete_colormap_int_levels(self):\n+    def test_discrete_colormap_int_levels(self) -> None:\n         for extend, levels, vmin, vmax, cmap in [\n             (\"neither\", 7, None, None, None),\n             (\"neither\", 7, None, 20, mpl.cm.RdBu),\n@@ -1181,13 +1181,13 @@ def test_discrete_colormap_int_levels(self):\n                     assert \"max\" == primitive.cmap.colorbar_extend\n                 assert levels >= len(primitive.cmap.colors)\n \n-    def test_discrete_colormap_list_levels_and_vmin_or_vmax(self):\n+    def test_discrete_colormap_list_levels_and_vmin_or_vmax(self) -> None:\n         levels = [0, 5, 10, 15]\n         primitive = self.darray.plot(levels=levels, vmin=-3, vmax=20)\n         assert primitive.norm.vmax == max(levels)\n         assert primitive.norm.vmin == min(levels)\n \n-    def test_discrete_colormap_provided_boundary_norm(self):\n+    def test_discrete_colormap_provided_boundary_norm(self) -> None:\n         norm = mpl.colors.BoundaryNorm([0, 5, 10, 15], 4)\n         primitive = self.darray.plot.contourf(norm=norm)\n         np.testing.assert_allclose(primitive.levels, norm.boundaries)\n@@ -1201,11 +1201,15 @@ class Common2dMixin:\n     Should have the same name as the method.\n     \"\"\"\n \n+    darray: DataArray\n+    plotfunc: staticmethod\n+    pass_in_axis: Callable\n+\n     # Needs to be overridden in TestSurface for facet grid plots\n     subplot_kws: dict[Any, Any] | None = None\n \n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         da = DataArray(\n             easy_array((10, 15), start=-1),\n             dims=[\"y\", \"x\"],\n@@ -1218,7 +1222,7 @@ def setUp(self):\n         ds[\"y2d\"] = DataArray(y, dims=[\"y\", \"x\"])\n         ds = ds.set_coords([\"x2d\", \"y2d\"])\n         # set darray and plot method\n-        self.darray = ds.testvar\n+        self.darray: DataArray = ds.testvar\n \n         # Add CF-compliant metadata\n         self.darray.attrs[\"long_name\"] = \"a_long_name\"\n@@ -1230,30 +1234,30 @@ def setUp(self):\n \n         self.plotmethod = getattr(self.darray.plot, self.plotfunc.__name__)\n \n-    def test_label_names(self):\n+    def test_label_names(self) -> None:\n         self.plotmethod()\n         assert \"x_long_name [x_units]\" == plt.gca().get_xlabel()\n         assert \"y_long_name [y_units]\" == plt.gca().get_ylabel()\n \n-    def test_1d_raises_valueerror(self):\n+    def test_1d_raises_valueerror(self) -> None:\n         with pytest.raises(ValueError, match=r\"DataArray must be 2d\"):\n             self.plotfunc(self.darray[0, :])\n \n-    def test_bool(self):\n+    def test_bool(self) -> None:\n         xr.ones_like(self.darray, dtype=bool).plot()\n \n-    def test_complex_raises_typeerror(self):\n+    def test_complex_raises_typeerror(self) -> None:\n         with pytest.raises(TypeError, match=r\"complex128\"):\n             (self.darray + 1j).plot()\n \n-    def test_3d_raises_valueerror(self):\n+    def test_3d_raises_valueerror(self) -> None:\n         a = DataArray(easy_array((2, 3, 4)))\n         if self.plotfunc.__name__ == \"imshow\":\n             pytest.skip()\n         with pytest.raises(ValueError, match=r\"DataArray must be 2d\"):\n             self.plotfunc(a)\n \n-    def test_nonnumeric_index(self):\n+    def test_nonnumeric_index(self) -> None:\n         a = DataArray(easy_array((3, 2)), coords=[[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\n         if self.plotfunc.__name__ == \"surface\":\n             # ax.plot_surface errors with nonnumerics:\n@@ -1262,7 +1266,7 @@ def test_nonnumeric_index(self):\n         else:\n             self.plotfunc(a)\n \n-    def test_multiindex_raises_typeerror(self):\n+    def test_multiindex_raises_typeerror(self) -> None:\n         a = DataArray(\n             easy_array((3, 2)),\n             dims=(\"x\", \"y\"),\n@@ -1272,10 +1276,10 @@ def test_multiindex_raises_typeerror(self):\n         with pytest.raises(TypeError, match=r\"[Pp]lot\"):\n             self.plotfunc(a)\n \n-    def test_can_pass_in_axis(self):\n+    def test_can_pass_in_axis(self) -> None:\n         self.pass_in_axis(self.plotmethod)\n \n-    def test_xyincrease_defaults(self):\n+    def test_xyincrease_defaults(self) -> None:\n \n         # With default settings the axis must be ordered regardless\n         # of the coords order.\n@@ -1291,28 +1295,28 @@ def test_xyincrease_defaults(self):\n         bounds = plt.gca().get_xlim()\n         assert bounds[0] < bounds[1]\n \n-    def test_xyincrease_false_changes_axes(self):\n+    def test_xyincrease_false_changes_axes(self) -> None:\n         self.plotmethod(xincrease=False, yincrease=False)\n         xlim = plt.gca().get_xlim()\n         ylim = plt.gca().get_ylim()\n         diffs = xlim[0] - 14, xlim[1] - 0, ylim[0] - 9, ylim[1] - 0\n         assert all(abs(x) < 1 for x in diffs)\n \n-    def test_xyincrease_true_changes_axes(self):\n+    def test_xyincrease_true_changes_axes(self) -> None:\n         self.plotmethod(xincrease=True, yincrease=True)\n         xlim = plt.gca().get_xlim()\n         ylim = plt.gca().get_ylim()\n         diffs = xlim[0] - 0, xlim[1] - 14, ylim[0] - 0, ylim[1] - 9\n         assert all(abs(x) < 1 for x in diffs)\n \n-    def test_x_ticks_are_rotated_for_time(self):\n+    def test_x_ticks_are_rotated_for_time(self) -> None:\n         time = pd.date_range(\"2000-01-01\", \"2000-01-10\")\n         a = DataArray(np.random.randn(2, len(time)), [(\"xx\", [1, 2]), (\"t\", time)])\n         a.plot(x=\"t\")\n         rotation = plt.gca().get_xticklabels()[0].get_rotation()\n         assert rotation != 0\n \n-    def test_plot_nans(self):\n+    def test_plot_nans(self) -> None:\n         x1 = self.darray[:5]\n         x2 = self.darray.copy()\n         x2[5:] = np.nan\n@@ -1323,25 +1327,25 @@ def test_plot_nans(self):\n \n     @pytest.mark.filterwarnings(\"ignore::UserWarning\")\n     @pytest.mark.filterwarnings(\"ignore:invalid value encountered\")\n-    def test_can_plot_all_nans(self):\n+    def test_can_plot_all_nans(self) -> None:\n         # regression test for issue #1780\n         self.plotfunc(DataArray(np.full((2, 2), np.nan)))\n \n     @pytest.mark.filterwarnings(\"ignore: Attempting to set\")\n-    def test_can_plot_axis_size_one(self):\n+    def test_can_plot_axis_size_one(self) -> None:\n         if self.plotfunc.__name__ not in (\"contour\", \"contourf\"):\n             self.plotfunc(DataArray(np.ones((1, 1))))\n \n-    def test_disallows_rgb_arg(self):\n+    def test_disallows_rgb_arg(self) -> None:\n         with pytest.raises(ValueError):\n             # Always invalid for most plots.  Invalid for imshow with 2D data.\n             self.plotfunc(DataArray(np.ones((2, 2))), rgb=\"not None\")\n \n-    def test_viridis_cmap(self):\n+    def test_viridis_cmap(self) -> None:\n         cmap_name = self.plotmethod(cmap=\"viridis\").get_cmap().name\n         assert \"viridis\" == cmap_name\n \n-    def test_default_cmap(self):\n+    def test_default_cmap(self) -> None:\n         cmap_name = self.plotmethod().get_cmap().name\n         assert \"RdBu_r\" == cmap_name\n \n@@ -1349,26 +1353,26 @@ def test_default_cmap(self):\n         assert \"viridis\" == cmap_name\n \n     @requires_seaborn\n-    def test_seaborn_palette_as_cmap(self):\n+    def test_seaborn_palette_as_cmap(self) -> None:\n         cmap_name = self.plotmethod(levels=2, cmap=\"husl\").get_cmap().name\n         assert \"husl\" == cmap_name\n \n-    def test_can_change_default_cmap(self):\n+    def test_can_change_default_cmap(self) -> None:\n         cmap_name = self.plotmethod(cmap=\"Blues\").get_cmap().name\n         assert \"Blues\" == cmap_name\n \n-    def test_diverging_color_limits(self):\n+    def test_diverging_color_limits(self) -> None:\n         artist = self.plotmethod()\n         vmin, vmax = artist.get_clim()\n         assert round(abs(-vmin - vmax), 7) == 0\n \n-    def test_xy_strings(self):\n-        self.plotmethod(\"y\", \"x\")\n+    def test_xy_strings(self) -> None:\n+        self.plotmethod(x=\"y\", y=\"x\")\n         ax = plt.gca()\n         assert \"y_long_name [y_units]\" == ax.get_xlabel()\n         assert \"x_long_name [x_units]\" == ax.get_ylabel()\n \n-    def test_positional_coord_string(self):\n+    def test_positional_coord_string(self) -> None:\n         self.plotmethod(y=\"x\")\n         ax = plt.gca()\n         assert \"x_long_name [x_units]\" == ax.get_ylabel()\n@@ -1379,26 +1383,26 @@ def test_positional_coord_string(self):\n         assert \"x_long_name [x_units]\" == ax.get_xlabel()\n         assert \"y_long_name [y_units]\" == ax.get_ylabel()\n \n-    def test_bad_x_string_exception(self):\n+    def test_bad_x_string_exception(self) -> None:\n \n         with pytest.raises(ValueError, match=r\"x and y cannot be equal.\"):\n             self.plotmethod(x=\"y\", y=\"y\")\n \n         error_msg = \"must be one of None, 'x', 'x2d', 'y', 'y2d'\"\n         with pytest.raises(ValueError, match=rf\"x {error_msg}\"):\n-            self.plotmethod(\"not_a_real_dim\", \"y\")\n+            self.plotmethod(x=\"not_a_real_dim\", y=\"y\")\n         with pytest.raises(ValueError, match=rf\"x {error_msg}\"):\n             self.plotmethod(x=\"not_a_real_dim\")\n         with pytest.raises(ValueError, match=rf\"y {error_msg}\"):\n             self.plotmethod(y=\"not_a_real_dim\")\n         self.darray.coords[\"z\"] = 100\n \n-    def test_coord_strings(self):\n+    def test_coord_strings(self) -> None:\n         # 1d coords (same as dims)\n         assert {\"x\", \"y\"} == set(self.darray.dims)\n         self.plotmethod(y=\"y\", x=\"x\")\n \n-    def test_non_linked_coords(self):\n+    def test_non_linked_coords(self) -> None:\n         # plot with coordinate names that are not dimensions\n         self.darray.coords[\"newy\"] = self.darray.y + 150\n         # Normal case, without transpose\n@@ -1410,7 +1414,7 @@ def test_non_linked_coords(self):\n         # simply ensure that these high coords were passed over\n         assert np.min(ax.get_ylim()) > 100.0\n \n-    def test_non_linked_coords_transpose(self):\n+    def test_non_linked_coords_transpose(self) -> None:\n         # plot with coordinate names that are not dimensions,\n         # and with transposed y and x axes\n         # This used to raise an error with pcolormesh and contour\n@@ -1424,7 +1428,7 @@ def test_non_linked_coords_transpose(self):\n         # simply ensure that these high coords were passed over\n         assert np.min(ax.get_xlim()) > 100.0\n \n-    def test_multiindex_level_as_coord(self):\n+    def test_multiindex_level_as_coord(self) -> None:\n         da = DataArray(\n             easy_array((3, 2)),\n             dims=(\"x\", \"y\"),\n@@ -1445,7 +1449,7 @@ def test_multiindex_level_as_coord(self):\n         with pytest.raises(ValueError, match=r\"y must be one of None, 'a', 'b', 'x'\"):\n             self.plotfunc(da, x=\"a\", y=\"y\")\n \n-    def test_default_title(self):\n+    def test_default_title(self) -> None:\n         a = DataArray(easy_array((4, 3, 2)), dims=[\"a\", \"b\", \"c\"])\n         a.coords[\"c\"] = [0, 1]\n         a.coords[\"d\"] = \"foo\"\n@@ -1453,11 +1457,11 @@ def test_default_title(self):\n         title = plt.gca().get_title()\n         assert \"c = 1, d = foo\" == title or \"d = foo, c = 1\" == title\n \n-    def test_colorbar_default_label(self):\n+    def test_colorbar_default_label(self) -> None:\n         self.plotmethod(add_colorbar=True)\n         assert \"a_long_name [a_units]\" in text_in_fig()\n \n-    def test_no_labels(self):\n+    def test_no_labels(self) -> None:\n         self.darray.name = \"testvar\"\n         self.darray.attrs[\"units\"] = \"test_units\"\n         self.plotmethod(add_labels=False)\n@@ -1469,7 +1473,7 @@ def test_no_labels(self):\n         ]:\n             assert string not in alltxt\n \n-    def test_colorbar_kwargs(self):\n+    def test_colorbar_kwargs(self) -> None:\n         # replace label\n         self.darray.attrs.pop(\"long_name\")\n         self.darray.attrs[\"units\"] = \"test_units\"\n@@ -1520,7 +1524,7 @@ def test_colorbar_kwargs(self):\n             cbar_kwargs={\"label\": \"label\"},\n         )\n \n-    def test_verbose_facetgrid(self):\n+    def test_verbose_facetgrid(self) -> None:\n         a = easy_array((10, 15, 3))\n         d = DataArray(a, dims=[\"y\", \"x\", \"z\"])\n         g = xplt.FacetGrid(d, col=\"z\", subplot_kws=self.subplot_kws)\n@@ -1528,15 +1532,14 @@ def test_verbose_facetgrid(self):\n         for ax in g.axes.flat:\n             assert ax.has_data()\n \n-    def test_2d_function_and_method_signature_same(self):\n-        func_sig = inspect.getcallargs(self.plotfunc, self.darray)\n-        method_sig = inspect.getcallargs(self.plotmethod)\n-        del method_sig[\"_PlotMethods_obj\"]\n-        del func_sig[\"darray\"]\n-        assert func_sig == method_sig\n+    def test_2d_function_and_method_signature_same(self) -> None:\n+        func_sig = inspect.signature(self.plotfunc)\n+        method_sig = inspect.signature(self.plotmethod)\n+        for argname, param in method_sig.parameters.items():\n+            assert func_sig.parameters[argname] == param\n \n     @pytest.mark.filterwarnings(\"ignore:tight_layout cannot\")\n-    def test_convenient_facetgrid(self):\n+    def test_convenient_facetgrid(self) -> None:\n         a = easy_array((10, 15, 4))\n         d = DataArray(a, dims=[\"y\", \"x\", \"z\"])\n         g = self.plotfunc(d, x=\"x\", y=\"y\", col=\"z\", col_wrap=2)\n@@ -1568,7 +1571,7 @@ def test_convenient_facetgrid(self):\n                 assert \"\" == ax.get_xlabel()\n \n     @pytest.mark.filterwarnings(\"ignore:tight_layout cannot\")\n-    def test_convenient_facetgrid_4d(self):\n+    def test_convenient_facetgrid_4d(self) -> None:\n         a = easy_array((10, 15, 2, 3))\n         d = DataArray(a, dims=[\"y\", \"x\", \"columns\", \"rows\"])\n         g = self.plotfunc(d, x=\"x\", y=\"y\", col=\"columns\", row=\"rows\")\n@@ -1578,7 +1581,7 @@ def test_convenient_facetgrid_4d(self):\n             assert ax.has_data()\n \n     @pytest.mark.filterwarnings(\"ignore:This figure includes\")\n-    def test_facetgrid_map_only_appends_mappables(self):\n+    def test_facetgrid_map_only_appends_mappables(self) -> None:\n         a = easy_array((10, 15, 2, 3))\n         d = DataArray(a, dims=[\"y\", \"x\", \"columns\", \"rows\"])\n         g = self.plotfunc(d, x=\"x\", y=\"y\", col=\"columns\", row=\"rows\")\n@@ -1590,7 +1593,7 @@ def test_facetgrid_map_only_appends_mappables(self):\n \n         assert expected == actual\n \n-    def test_facetgrid_cmap(self):\n+    def test_facetgrid_cmap(self) -> None:\n         # Regression test for GH592\n         data = np.random.random(size=(20, 25, 12)) + np.linspace(-3, 3, 12)\n         d = DataArray(data, dims=[\"x\", \"y\", \"time\"])\n@@ -1600,7 +1603,7 @@ def test_facetgrid_cmap(self):\n         # check that all colormaps are the same\n         assert len({m.get_cmap().name for m in fg._mappables}) == 1\n \n-    def test_facetgrid_cbar_kwargs(self):\n+    def test_facetgrid_cbar_kwargs(self) -> None:\n         a = easy_array((10, 15, 2, 3))\n         d = DataArray(a, dims=[\"y\", \"x\", \"columns\", \"rows\"])\n         g = self.plotfunc(\n@@ -1616,25 +1619,25 @@ def test_facetgrid_cbar_kwargs(self):\n         if g.cbar is not None:\n             assert get_colorbar_label(g.cbar) == \"test_label\"\n \n-    def test_facetgrid_no_cbar_ax(self):\n+    def test_facetgrid_no_cbar_ax(self) -> None:\n         a = easy_array((10, 15, 2, 3))\n         d = DataArray(a, dims=[\"y\", \"x\", \"columns\", \"rows\"])\n         with pytest.raises(ValueError):\n             self.plotfunc(d, x=\"x\", y=\"y\", col=\"columns\", row=\"rows\", cbar_ax=1)\n \n-    def test_cmap_and_color_both(self):\n+    def test_cmap_and_color_both(self) -> None:\n         with pytest.raises(ValueError):\n             self.plotmethod(colors=\"k\", cmap=\"RdBu\")\n \n-    def test_2d_coord_with_interval(self):\n+    def test_2d_coord_with_interval(self) -> None:\n         for dim in self.darray.dims:\n             gp = self.darray.groupby_bins(dim, range(15), restore_coord_dims=True).mean(\n-                dim\n+                [dim]\n             )\n             for kind in [\"imshow\", \"pcolormesh\", \"contourf\", \"contour\"]:\n                 getattr(gp.plot, kind)()\n \n-    def test_colormap_error_norm_and_vmin_vmax(self):\n+    def test_colormap_error_norm_and_vmin_vmax(self) -> None:\n         norm = mpl.colors.LogNorm(0.1, 1e1)\n \n         with pytest.raises(ValueError):\n@@ -1650,17 +1653,17 @@ class TestContourf(Common2dMixin, PlotTestCase):\n     plotfunc = staticmethod(xplt.contourf)\n \n     @pytest.mark.slow\n-    def test_contourf_called(self):\n+    def test_contourf_called(self) -> None:\n         # Having both statements ensures the test works properly\n         assert not self.contourf_called(self.darray.plot.imshow)\n         assert self.contourf_called(self.darray.plot.contourf)\n \n-    def test_primitive_artist_returned(self):\n+    def test_primitive_artist_returned(self) -> None:\n         artist = self.plotmethod()\n         assert isinstance(artist, mpl.contour.QuadContourSet)\n \n     @pytest.mark.slow\n-    def test_extend(self):\n+    def test_extend(self) -> None:\n         artist = self.plotmethod()\n         assert artist.extend == \"neither\"\n \n@@ -1678,7 +1681,7 @@ def test_extend(self):\n         assert artist.extend == \"max\"\n \n     @pytest.mark.slow\n-    def test_2d_coord_names(self):\n+    def test_2d_coord_names(self) -> None:\n         self.plotmethod(x=\"x2d\", y=\"y2d\")\n         # make sure labels came out ok\n         ax = plt.gca()\n@@ -1686,7 +1689,7 @@ def test_2d_coord_names(self):\n         assert \"y2d\" == ax.get_ylabel()\n \n     @pytest.mark.slow\n-    def test_levels(self):\n+    def test_levels(self) -> None:\n         artist = self.plotmethod(levels=[-0.5, -0.4, 0.1])\n         assert artist.extend == \"both\"\n \n@@ -1705,7 +1708,7 @@ class TestContour(Common2dMixin, PlotTestCase):\n     def _color_as_tuple(c):\n         return tuple(c[:3])\n \n-    def test_colors(self):\n+    def test_colors(self) -> None:\n \n         # with single color, we don't want rgb array\n         artist = self.plotmethod(colors=\"k\")\n@@ -1722,7 +1725,7 @@ def test_colors(self):\n         # the last color is now under \"over\"\n         assert self._color_as_tuple(artist.cmap._rgba_over) == (0.0, 0.0, 1.0)\n \n-    def test_colors_np_levels(self):\n+    def test_colors_np_levels(self) -> None:\n \n         # https://github.com/pydata/xarray/issues/3284\n         levels = np.array([-0.5, 0.0, 0.5, 1.0])\n@@ -1732,23 +1735,23 @@ def test_colors_np_levels(self):\n         # the last color is now under \"over\"\n         assert self._color_as_tuple(artist.cmap._rgba_over) == (0.0, 0.0, 1.0)\n \n-    def test_cmap_and_color_both(self):\n+    def test_cmap_and_color_both(self) -> None:\n         with pytest.raises(ValueError):\n             self.plotmethod(colors=\"k\", cmap=\"RdBu\")\n \n-    def list_of_colors_in_cmap_raises_error(self):\n+    def list_of_colors_in_cmap_raises_error(self) -> None:\n         with pytest.raises(ValueError, match=r\"list of colors\"):\n             self.plotmethod(cmap=[\"k\", \"b\"])\n \n     @pytest.mark.slow\n-    def test_2d_coord_names(self):\n+    def test_2d_coord_names(self) -> None:\n         self.plotmethod(x=\"x2d\", y=\"y2d\")\n         # make sure labels came out ok\n         ax = plt.gca()\n         assert \"x2d\" == ax.get_xlabel()\n         assert \"y2d\" == ax.get_ylabel()\n \n-    def test_single_level(self):\n+    def test_single_level(self) -> None:\n         # this used to raise an error, but not anymore since\n         # add_colorbar defaults to false\n         self.plotmethod(levels=[0.1])\n@@ -1759,23 +1762,23 @@ class TestPcolormesh(Common2dMixin, PlotTestCase):\n \n     plotfunc = staticmethod(xplt.pcolormesh)\n \n-    def test_primitive_artist_returned(self):\n+    def test_primitive_artist_returned(self) -> None:\n         artist = self.plotmethod()\n         assert isinstance(artist, mpl.collections.QuadMesh)\n \n-    def test_everything_plotted(self):\n+    def test_everything_plotted(self) -> None:\n         artist = self.plotmethod()\n         assert artist.get_array().size == self.darray.size\n \n     @pytest.mark.slow\n-    def test_2d_coord_names(self):\n+    def test_2d_coord_names(self) -> None:\n         self.plotmethod(x=\"x2d\", y=\"y2d\")\n         # make sure labels came out ok\n         ax = plt.gca()\n         assert \"x2d\" == ax.get_xlabel()\n         assert \"y2d\" == ax.get_ylabel()\n \n-    def test_dont_infer_interval_breaks_for_cartopy(self):\n+    def test_dont_infer_interval_breaks_for_cartopy(self) -> None:\n         # Regression for GH 781\n         ax = plt.gca()\n         # Simulate a Cartopy Axis\n@@ -1794,7 +1797,7 @@ class TestPcolormeshLogscale(PlotTestCase):\n     plotfunc = staticmethod(xplt.pcolormesh)\n \n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         self.boundaries = (-1, 9, -4, 3)\n         shape = (8, 11)\n         x = np.logspace(self.boundaries[0], self.boundaries[1], shape[1])\n@@ -1807,7 +1810,7 @@ def setUp(self):\n         )\n         self.darray = da\n \n-    def test_interval_breaks_logspace(self):\n+    def test_interval_breaks_logspace(self) -> None:\n         \"\"\"\n         Check if the outer vertices of the pcolormesh are the expected values\n \n@@ -1838,22 +1841,22 @@ class TestImshow(Common2dMixin, PlotTestCase):\n     plotfunc = staticmethod(xplt.imshow)\n \n     @pytest.mark.slow\n-    def test_imshow_called(self):\n+    def test_imshow_called(self) -> None:\n         # Having both statements ensures the test works properly\n         assert not self.imshow_called(self.darray.plot.contourf)\n         assert self.imshow_called(self.darray.plot.imshow)\n \n-    def test_xy_pixel_centered(self):\n+    def test_xy_pixel_centered(self) -> None:\n         self.darray.plot.imshow(yincrease=False)\n         assert np.allclose([-0.5, 14.5], plt.gca().get_xlim())\n         assert np.allclose([9.5, -0.5], plt.gca().get_ylim())\n \n-    def test_default_aspect_is_auto(self):\n+    def test_default_aspect_is_auto(self) -> None:\n         self.darray.plot.imshow()\n         assert \"auto\" == plt.gca().get_aspect()\n \n     @pytest.mark.slow\n-    def test_cannot_change_mpl_aspect(self):\n+    def test_cannot_change_mpl_aspect(self) -> None:\n \n         with pytest.raises(ValueError, match=r\"not available in xarray\"):\n             self.darray.plot.imshow(aspect=\"equal\")\n@@ -1864,45 +1867,45 @@ def test_cannot_change_mpl_aspect(self):\n         assert tuple(plt.gcf().get_size_inches()) == (10, 5)\n \n     @pytest.mark.slow\n-    def test_primitive_artist_returned(self):\n+    def test_primitive_artist_returned(self) -> None:\n         artist = self.plotmethod()\n         assert isinstance(artist, mpl.image.AxesImage)\n \n     @pytest.mark.slow\n     @requires_seaborn\n-    def test_seaborn_palette_needs_levels(self):\n+    def test_seaborn_palette_needs_levels(self) -> None:\n         with pytest.raises(ValueError):\n             self.plotmethod(cmap=\"husl\")\n \n-    def test_2d_coord_names(self):\n+    def test_2d_coord_names(self) -> None:\n         with pytest.raises(ValueError, match=r\"requires 1D coordinates\"):\n             self.plotmethod(x=\"x2d\", y=\"y2d\")\n \n-    def test_plot_rgb_image(self):\n+    def test_plot_rgb_image(self) -> None:\n         DataArray(\n             easy_array((10, 15, 3), start=0), dims=[\"y\", \"x\", \"band\"]\n         ).plot.imshow()\n         assert 0 == len(find_possible_colorbars())\n \n-    def test_plot_rgb_image_explicit(self):\n+    def test_plot_rgb_image_explicit(self) -> None:\n         DataArray(\n             easy_array((10, 15, 3), start=0), dims=[\"y\", \"x\", \"band\"]\n         ).plot.imshow(y=\"y\", x=\"x\", rgb=\"band\")\n         assert 0 == len(find_possible_colorbars())\n \n-    def test_plot_rgb_faceted(self):\n+    def test_plot_rgb_faceted(self) -> None:\n         DataArray(\n             easy_array((2, 2, 10, 15, 3), start=0), dims=[\"a\", \"b\", \"y\", \"x\", \"band\"]\n         ).plot.imshow(row=\"a\", col=\"b\")\n         assert 0 == len(find_possible_colorbars())\n \n-    def test_plot_rgba_image_transposed(self):\n+    def test_plot_rgba_image_transposed(self) -> None:\n         # We can handle the color axis being in any position\n         DataArray(\n             easy_array((4, 10, 15), start=0), dims=[\"band\", \"y\", \"x\"]\n         ).plot.imshow()\n \n-    def test_warns_ambigious_dim(self):\n+    def test_warns_ambigious_dim(self) -> None:\n         arr = DataArray(easy_array((3, 3, 3)), dims=[\"y\", \"x\", \"band\"])\n         with pytest.warns(UserWarning):\n             arr.plot.imshow()\n@@ -1910,40 +1913,45 @@ def test_warns_ambigious_dim(self):\n         arr.plot.imshow(rgb=\"band\")\n         arr.plot.imshow(x=\"x\", y=\"y\")\n \n-    def test_rgb_errors_too_many_dims(self):\n+    def test_rgb_errors_too_many_dims(self) -> None:\n         arr = DataArray(easy_array((3, 3, 3, 3)), dims=[\"y\", \"x\", \"z\", \"band\"])\n         with pytest.raises(ValueError):\n             arr.plot.imshow(rgb=\"band\")\n \n-    def test_rgb_errors_bad_dim_sizes(self):\n+    def test_rgb_errors_bad_dim_sizes(self) -> None:\n         arr = DataArray(easy_array((5, 5, 5)), dims=[\"y\", \"x\", \"band\"])\n         with pytest.raises(ValueError):\n             arr.plot.imshow(rgb=\"band\")\n \n-    def test_normalize_rgb_imshow(self):\n-        for kwargs in (\n-            dict(vmin=-1),\n-            dict(vmax=2),\n-            dict(vmin=-1, vmax=1),\n-            dict(vmin=0, vmax=0),\n-            dict(vmin=0, robust=True),\n-            dict(vmax=-1, robust=True),\n-        ):\n-            da = DataArray(easy_array((5, 5, 3), start=-0.6, stop=1.4))\n-            arr = da.plot.imshow(**kwargs).get_array()\n-            assert 0 <= arr.min() <= arr.max() <= 1, kwargs\n+    @pytest.mark.parametrize(\n+        [\"vmin\", \"vmax\", \"robust\"],\n+        [\n+            (-1, None, False),\n+            (None, 2, False),\n+            (-1, 1, False),\n+            (0, 0, False),\n+            (0, None, True),\n+            (None, -1, True),\n+        ],\n+    )\n+    def test_normalize_rgb_imshow(\n+        self, vmin: float | None, vmax: float | None, robust: bool\n+    ) -> None:\n+        da = DataArray(easy_array((5, 5, 3), start=-0.6, stop=1.4))\n+        arr = da.plot.imshow(vmin=vmin, vmax=vmax, robust=robust).get_array()\n+        assert 0 <= arr.min() <= arr.max() <= 1\n \n-    def test_normalize_rgb_one_arg_error(self):\n+    def test_normalize_rgb_one_arg_error(self) -> None:\n         da = DataArray(easy_array((5, 5, 3), start=-0.6, stop=1.4))\n         # If passed one bound that implies all out of range, error:\n-        for kwargs in [dict(vmax=-1), dict(vmin=2)]:\n+        for vmin, vmax in ((None, -1), (2, None)):\n             with pytest.raises(ValueError):\n-                da.plot.imshow(**kwargs)\n+                da.plot.imshow(vmin=vmin, vmax=vmax)\n         # If passed two that's just moving the range, *not* an error:\n-        for kwargs in [dict(vmax=-1, vmin=-1.2), dict(vmin=2, vmax=2.1)]:\n-            da.plot.imshow(**kwargs)\n+        for vmin2, vmax2 in ((-1.2, -1), (2, 2.1)):\n+            da.plot.imshow(vmin=vmin2, vmax=vmax2)\n \n-    def test_imshow_rgb_values_in_valid_range(self):\n+    def test_imshow_rgb_values_in_valid_range(self) -> None:\n         da = DataArray(np.arange(75, dtype=\"uint8\").reshape((5, 5, 3)))\n         _, ax = plt.subplots()\n         out = da.plot.imshow(ax=ax).get_array()\n@@ -1951,12 +1959,12 @@ def test_imshow_rgb_values_in_valid_range(self):\n         assert (out[..., :3] == da.values).all()  # Compare without added alpha\n \n     @pytest.mark.filterwarnings(\"ignore:Several dimensions of this array\")\n-    def test_regression_rgb_imshow_dim_size_one(self):\n+    def test_regression_rgb_imshow_dim_size_one(self) -> None:\n         # Regression: https://github.com/pydata/xarray/issues/1966\n         da = DataArray(easy_array((1, 3, 3), start=0.0, stop=1.0))\n         da.plot.imshow()\n \n-    def test_origin_overrides_xyincrease(self):\n+    def test_origin_overrides_xyincrease(self) -> None:\n         da = DataArray(easy_array((3, 2)), coords=[[-2, 0, 2], [-1, 1]])\n         with figure_context():\n             da.plot.imshow(origin=\"upper\")\n@@ -1974,12 +1982,12 @@ class TestSurface(Common2dMixin, PlotTestCase):\n     plotfunc = staticmethod(xplt.surface)\n     subplot_kws = {\"projection\": \"3d\"}\n \n-    def test_primitive_artist_returned(self):\n+    def test_primitive_artist_returned(self) -> None:\n         artist = self.plotmethod()\n         assert isinstance(artist, mpl_toolkits.mplot3d.art3d.Poly3DCollection)\n \n     @pytest.mark.slow\n-    def test_2d_coord_names(self):\n+    def test_2d_coord_names(self) -> None:\n         self.plotmethod(x=\"x2d\", y=\"y2d\")\n         # make sure labels came out ok\n         ax = plt.gca()\n@@ -1987,34 +1995,34 @@ def test_2d_coord_names(self):\n         assert \"y2d\" == ax.get_ylabel()\n         assert f\"{self.darray.long_name} [{self.darray.units}]\" == ax.get_zlabel()\n \n-    def test_xyincrease_false_changes_axes(self):\n+    def test_xyincrease_false_changes_axes(self) -> None:\n         # Does not make sense for surface plots\n         pytest.skip(\"does not make sense for surface plots\")\n \n-    def test_xyincrease_true_changes_axes(self):\n+    def test_xyincrease_true_changes_axes(self) -> None:\n         # Does not make sense for surface plots\n         pytest.skip(\"does not make sense for surface plots\")\n \n-    def test_can_pass_in_axis(self):\n+    def test_can_pass_in_axis(self) -> None:\n         self.pass_in_axis(self.plotmethod, subplot_kw={\"projection\": \"3d\"})\n \n-    def test_default_cmap(self):\n+    def test_default_cmap(self) -> None:\n         # Does not make sense for surface plots with default arguments\n         pytest.skip(\"does not make sense for surface plots\")\n \n-    def test_diverging_color_limits(self):\n+    def test_diverging_color_limits(self) -> None:\n         # Does not make sense for surface plots with default arguments\n         pytest.skip(\"does not make sense for surface plots\")\n \n-    def test_colorbar_kwargs(self):\n+    def test_colorbar_kwargs(self) -> None:\n         # Does not make sense for surface plots with default arguments\n         pytest.skip(\"does not make sense for surface plots\")\n \n-    def test_cmap_and_color_both(self):\n+    def test_cmap_and_color_both(self) -> None:\n         # Does not make sense for surface plots with default arguments\n         pytest.skip(\"does not make sense for surface plots\")\n \n-    def test_seaborn_palette_as_cmap(self):\n+    def test_seaborn_palette_as_cmap(self) -> None:\n         # seaborn does not work with mpl_toolkits.mplot3d\n         with pytest.raises(ValueError):\n             super().test_seaborn_palette_as_cmap()\n@@ -2022,7 +2030,7 @@ def test_seaborn_palette_as_cmap(self):\n     # Need to modify this test for surface(), because all subplots should have labels,\n     # not just left and bottom\n     @pytest.mark.filterwarnings(\"ignore:tight_layout cannot\")\n-    def test_convenient_facetgrid(self):\n+    def test_convenient_facetgrid(self) -> None:\n         a = easy_array((10, 15, 4))\n         d = DataArray(a, dims=[\"y\", \"x\", \"z\"])\n         g = self.plotfunc(d, x=\"x\", y=\"y\", col=\"z\", col_wrap=2)\n@@ -2041,28 +2049,28 @@ def test_convenient_facetgrid(self):\n             assert \"y\" == ax.get_ylabel()\n             assert \"x\" == ax.get_xlabel()\n \n-    def test_viridis_cmap(self):\n+    def test_viridis_cmap(self) -> None:\n         return super().test_viridis_cmap()\n \n-    def test_can_change_default_cmap(self):\n+    def test_can_change_default_cmap(self) -> None:\n         return super().test_can_change_default_cmap()\n \n-    def test_colorbar_default_label(self):\n+    def test_colorbar_default_label(self) -> None:\n         return super().test_colorbar_default_label()\n \n-    def test_facetgrid_map_only_appends_mappables(self):\n+    def test_facetgrid_map_only_appends_mappables(self) -> None:\n         return super().test_facetgrid_map_only_appends_mappables()\n \n \n class TestFacetGrid(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         d = easy_array((10, 15, 3))\n         self.darray = DataArray(d, dims=[\"y\", \"x\", \"z\"], coords={\"z\": [\"a\", \"b\", \"c\"]})\n         self.g = xplt.FacetGrid(self.darray, col=\"z\")\n \n     @pytest.mark.slow\n-    def test_no_args(self):\n+    def test_no_args(self) -> None:\n         self.g.map_dataarray(xplt.contourf, \"x\", \"y\")\n \n         # Don't want colorbar labeled with 'None'\n@@ -2073,7 +2081,7 @@ def test_no_args(self):\n             assert ax.has_data()\n \n     @pytest.mark.slow\n-    def test_names_appear_somewhere(self):\n+    def test_names_appear_somewhere(self) -> None:\n         self.darray.name = \"testvar\"\n         self.g.map_dataarray(xplt.contourf, \"x\", \"y\")\n         for k, ax in zip(\"abc\", self.g.axes.flat):\n@@ -2085,7 +2093,7 @@ def test_names_appear_somewhere(self):\n             assert label in alltxt\n \n     @pytest.mark.slow\n-    def test_text_not_super_long(self):\n+    def test_text_not_super_long(self) -> None:\n         self.darray.coords[\"z\"] = [100 * letter for letter in \"abc\"]\n         g = xplt.FacetGrid(self.darray, col=\"z\")\n         g.map_dataarray(xplt.contour, \"x\", \"y\")\n@@ -2097,7 +2105,7 @@ def test_text_not_super_long(self):\n         assert t0.endswith(\"...\")\n \n     @pytest.mark.slow\n-    def test_colorbar(self):\n+    def test_colorbar(self) -> None:\n         vmin = self.darray.values.min()\n         vmax = self.darray.values.max()\n         expected = np.array((vmin, vmax))\n@@ -2111,7 +2119,7 @@ def test_colorbar(self):\n         assert 1 == len(find_possible_colorbars())\n \n     @pytest.mark.slow\n-    def test_empty_cell(self):\n+    def test_empty_cell(self) -> None:\n         g = xplt.FacetGrid(self.darray, col=\"z\", col_wrap=2)\n         g.map_dataarray(xplt.imshow, \"x\", \"y\")\n \n@@ -2120,12 +2128,12 @@ def test_empty_cell(self):\n         assert not bottomright.get_visible()\n \n     @pytest.mark.slow\n-    def test_norow_nocol_error(self):\n+    def test_norow_nocol_error(self) -> None:\n         with pytest.raises(ValueError, match=r\"[Rr]ow\"):\n             xplt.FacetGrid(self.darray)\n \n     @pytest.mark.slow\n-    def test_groups(self):\n+    def test_groups(self) -> None:\n         self.g.map_dataarray(xplt.imshow, \"x\", \"y\")\n         upperleft_dict = self.g.name_dicts[0, 0]\n         upperleft_array = self.darray.loc[upperleft_dict]\n@@ -2134,19 +2142,19 @@ def test_groups(self):\n         assert_equal(upperleft_array, z0)\n \n     @pytest.mark.slow\n-    def test_float_index(self):\n+    def test_float_index(self) -> None:\n         self.darray.coords[\"z\"] = [0.1, 0.2, 0.4]\n         g = xplt.FacetGrid(self.darray, col=\"z\")\n         g.map_dataarray(xplt.imshow, \"x\", \"y\")\n \n     @pytest.mark.slow\n-    def test_nonunique_index_error(self):\n+    def test_nonunique_index_error(self) -> None:\n         self.darray.coords[\"z\"] = [0.1, 0.2, 0.2]\n         with pytest.raises(ValueError, match=r\"[Uu]nique\"):\n             xplt.FacetGrid(self.darray, col=\"z\")\n \n     @pytest.mark.slow\n-    def test_robust(self):\n+    def test_robust(self) -> None:\n         z = np.zeros((20, 20, 2))\n         darray = DataArray(z, dims=[\"y\", \"x\", \"z\"])\n         darray[:, :, 1] = 1\n@@ -2168,7 +2176,7 @@ def test_robust(self):\n         assert largest < 21\n \n     @pytest.mark.slow\n-    def test_can_set_vmin_vmax(self):\n+    def test_can_set_vmin_vmax(self) -> None:\n         vmin, vmax = 50.0, 1000.0\n         expected = np.array((vmin, vmax))\n         self.g.map_dataarray(xplt.imshow, \"x\", \"y\", vmin=vmin, vmax=vmax)\n@@ -2178,7 +2186,7 @@ def test_can_set_vmin_vmax(self):\n             assert np.allclose(expected, clim)\n \n     @pytest.mark.slow\n-    def test_vmin_vmax_equal(self):\n+    def test_vmin_vmax_equal(self) -> None:\n         # regression test for GH3734\n         fg = self.g.map_dataarray(xplt.imshow, \"x\", \"y\", vmin=50, vmax=50)\n         for mappable in fg._mappables:\n@@ -2186,14 +2194,14 @@ def test_vmin_vmax_equal(self):\n \n     @pytest.mark.slow\n     @pytest.mark.filterwarnings(\"ignore\")\n-    def test_can_set_norm(self):\n+    def test_can_set_norm(self) -> None:\n         norm = mpl.colors.SymLogNorm(0.1)\n         self.g.map_dataarray(xplt.imshow, \"x\", \"y\", norm=norm)\n         for image in plt.gcf().findobj(mpl.image.AxesImage):\n             assert image.norm is norm\n \n     @pytest.mark.slow\n-    def test_figure_size(self):\n+    def test_figure_size(self) -> None:\n \n         assert_array_equal(self.g.fig.get_size_inches(), (10, 3))\n \n@@ -2216,7 +2224,7 @@ def test_figure_size(self):\n             g = xplt.plot(self.darray, row=2, col=\"z\", ax=plt.gca(), size=6)\n \n     @pytest.mark.slow\n-    def test_num_ticks(self):\n+    def test_num_ticks(self) -> None:\n         nticks = 99\n         maxticks = nticks + 1\n         self.g.map_dataarray(xplt.imshow, \"x\", \"y\")\n@@ -2231,14 +2239,14 @@ def test_num_ticks(self):\n             assert yticks >= nticks / 2.0\n \n     @pytest.mark.slow\n-    def test_map(self):\n+    def test_map(self) -> None:\n         assert self.g._finalized is False\n         self.g.map(plt.contourf, \"x\", \"y\", ...)\n         assert self.g._finalized is True\n         self.g.map(lambda: None)\n \n     @pytest.mark.slow\n-    def test_map_dataset(self):\n+    def test_map_dataset(self) -> None:\n         g = xplt.FacetGrid(self.darray.to_dataset(name=\"foo\"), col=\"z\")\n         g.map(plt.contourf, \"x\", \"y\", \"foo\")\n \n@@ -2257,7 +2265,7 @@ def test_map_dataset(self):\n         assert 1 == len(find_possible_colorbars())\n \n     @pytest.mark.slow\n-    def test_set_axis_labels(self):\n+    def test_set_axis_labels(self) -> None:\n         g = self.g.map_dataarray(xplt.contourf, \"x\", \"y\")\n         g.set_axis_labels(\"longitude\", \"latitude\")\n         alltxt = text_in_fig()\n@@ -2265,7 +2273,7 @@ def test_set_axis_labels(self):\n             assert label in alltxt\n \n     @pytest.mark.slow\n-    def test_facetgrid_colorbar(self):\n+    def test_facetgrid_colorbar(self) -> None:\n         a = easy_array((10, 15, 4))\n         d = DataArray(a, dims=[\"y\", \"x\", \"z\"], name=\"foo\")\n \n@@ -2279,7 +2287,7 @@ def test_facetgrid_colorbar(self):\n         assert 0 == len(find_possible_colorbars())\n \n     @pytest.mark.slow\n-    def test_facetgrid_polar(self):\n+    def test_facetgrid_polar(self) -> None:\n         # test if polar projection in FacetGrid does not raise an exception\n         self.darray.plot.pcolormesh(\n             col=\"z\", subplot_kws=dict(projection=\"polar\"), sharex=False, sharey=False\n@@ -2289,7 +2297,7 @@ def test_facetgrid_polar(self):\n @pytest.mark.filterwarnings(\"ignore:tight_layout cannot\")\n class TestFacetGrid4d(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         a = easy_array((10, 15, 3, 2))\n         darray = DataArray(a, dims=[\"y\", \"x\", \"col\", \"row\"])\n         darray.coords[\"col\"] = np.array(\n@@ -2301,7 +2309,7 @@ def setUp(self):\n \n         self.darray = darray\n \n-    def test_title_kwargs(self):\n+    def test_title_kwargs(self) -> None:\n         g = xplt.FacetGrid(self.darray, col=\"col\", row=\"row\")\n         g.set_titles(template=\"{value}\", weight=\"bold\")\n \n@@ -2314,7 +2322,7 @@ def test_title_kwargs(self):\n             assert property_in_axes_text(\"weight\", \"bold\", label, ax)\n \n     @pytest.mark.slow\n-    def test_default_labels(self):\n+    def test_default_labels(self) -> None:\n         g = xplt.FacetGrid(self.darray, col=\"col\", row=\"row\")\n         assert (2, 3) == g.axes.shape\n \n@@ -2344,10 +2352,10 @@ def test_default_labels(self):\n @pytest.mark.filterwarnings(\"ignore:tight_layout cannot\")\n class TestFacetedLinePlotsLegend(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         self.darray = xr.tutorial.scatter_example_dataset()\n \n-    def test_legend_labels(self):\n+    def test_legend_labels(self) -> None:\n         fg = self.darray.A.plot.line(col=\"x\", row=\"w\", hue=\"z\")\n         all_legend_labels = [t.get_text() for t in fg.figlegend.texts]\n         # labels in legend should be ['0', '1', '2', '3']\n@@ -2357,7 +2365,7 @@ def test_legend_labels(self):\n @pytest.mark.filterwarnings(\"ignore:tight_layout cannot\")\n class TestFacetedLinePlots(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         self.darray = DataArray(\n             np.random.randn(10, 6, 3, 4),\n             dims=[\"hue\", \"x\", \"col\", \"row\"],\n@@ -2371,14 +2379,14 @@ def setUp(self):\n         self.darray.col.attrs[\"units\"] = \"colunits\"\n         self.darray.row.attrs[\"units\"] = \"rowunits\"\n \n-    def test_facetgrid_shape(self):\n+    def test_facetgrid_shape(self) -> None:\n         g = self.darray.plot(row=\"row\", col=\"col\", hue=\"hue\")\n         assert g.axes.shape == (len(self.darray.row), len(self.darray.col))\n \n         g = self.darray.plot(row=\"col\", col=\"row\", hue=\"hue\")\n         assert g.axes.shape == (len(self.darray.col), len(self.darray.row))\n \n-    def test_unnamed_args(self):\n+    def test_unnamed_args(self) -> None:\n         g = self.darray.plot.line(\"o--\", row=\"row\", col=\"col\", hue=\"hue\")\n         lines = [\n             q for q in g.axes.flat[0].get_children() if isinstance(q, mpl.lines.Line2D)\n@@ -2387,7 +2395,7 @@ def test_unnamed_args(self):\n         assert lines[0].get_marker() == \"o\"\n         assert lines[0].get_linestyle() == \"--\"\n \n-    def test_default_labels(self):\n+    def test_default_labels(self) -> None:\n         g = self.darray.plot(row=\"row\", col=\"col\", hue=\"hue\")\n         # Rightmost column should be labeled\n         for label, ax in zip(self.darray.coords[\"row\"].values, g.axes[:, -1]):\n@@ -2401,7 +2409,7 @@ def test_default_labels(self):\n         for ax in g.axes[:, 0]:\n             assert substring_in_axes(self.darray.name, ax)\n \n-    def test_test_empty_cell(self):\n+    def test_test_empty_cell(self) -> None:\n         g = (\n             self.darray.isel(row=1)\n             .drop_vars(\"row\")\n@@ -2411,7 +2419,7 @@ def test_test_empty_cell(self):\n         assert not bottomright.has_data()\n         assert not bottomright.get_visible()\n \n-    def test_set_axis_labels(self):\n+    def test_set_axis_labels(self) -> None:\n         g = self.darray.plot(row=\"row\", col=\"col\", hue=\"hue\")\n         g.set_axis_labels(\"longitude\", \"latitude\")\n         alltxt = text_in_fig()\n@@ -2419,15 +2427,15 @@ def test_set_axis_labels(self):\n         assert \"longitude\" in alltxt\n         assert \"latitude\" in alltxt\n \n-    def test_axes_in_faceted_plot(self):\n+    def test_axes_in_faceted_plot(self) -> None:\n         with pytest.raises(ValueError):\n             self.darray.plot.line(row=\"row\", col=\"col\", x=\"x\", ax=plt.axes())\n \n-    def test_figsize_and_size(self):\n+    def test_figsize_and_size(self) -> None:\n         with pytest.raises(ValueError):\n-            self.darray.plot.line(row=\"row\", col=\"col\", x=\"x\", size=3, figsize=4)\n+            self.darray.plot.line(row=\"row\", col=\"col\", x=\"x\", size=3, figsize=(4, 3))\n \n-    def test_wrong_num_of_dimensions(self):\n+    def test_wrong_num_of_dimensions(self) -> None:\n         with pytest.raises(ValueError):\n             self.darray.plot(row=\"row\", hue=\"hue\")\n             self.darray.plot.line(row=\"row\", hue=\"hue\")\n@@ -2436,7 +2444,7 @@ def test_wrong_num_of_dimensions(self):\n @requires_matplotlib\n class TestDatasetQuiverPlots(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         das = [\n             DataArray(\n                 np.random.randn(3, 3, 4, 4),\n@@ -2455,7 +2463,7 @@ def setUp(self):\n         ds[\"mag\"] = np.hypot(ds.u, ds.v)\n         self.ds = ds\n \n-    def test_quiver(self):\n+    def test_quiver(self) -> None:\n         with figure_context():\n             hdl = self.ds.isel(row=0, col=0).plot.quiver(x=\"x\", y=\"y\", u=\"u\", v=\"v\")\n             assert isinstance(hdl, mpl.quiver.Quiver)\n@@ -2467,13 +2475,14 @@ def test_quiver(self):\n                 x=\"x\", y=\"y\", u=\"u\", v=\"v\", hue=\"mag\", hue_style=\"discrete\"\n             )\n \n-    def test_facetgrid(self):\n+    def test_facetgrid(self) -> None:\n         with figure_context():\n             fg = self.ds.plot.quiver(\n                 x=\"x\", y=\"y\", u=\"u\", v=\"v\", row=\"row\", col=\"col\", scale=1, hue=\"mag\"\n             )\n             for handle in fg._mappables:\n                 assert isinstance(handle, mpl.quiver.Quiver)\n+            assert fg.quiverkey is not None\n             assert \"uunits\" in fg.quiverkey.text.get_text()\n \n         with figure_context():\n@@ -2519,7 +2528,7 @@ def test_add_guide(self, add_guide, hue_style, legend, colorbar):\n @requires_matplotlib\n class TestDatasetStreamplotPlots(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         das = [\n             DataArray(\n                 np.random.randn(3, 3, 2, 2),\n@@ -2538,7 +2547,7 @@ def setUp(self):\n         ds[\"mag\"] = np.hypot(ds.u, ds.v)\n         self.ds = ds\n \n-    def test_streamline(self):\n+    def test_streamline(self) -> None:\n         with figure_context():\n             hdl = self.ds.isel(row=0, col=0).plot.streamplot(x=\"x\", y=\"y\", u=\"u\", v=\"v\")\n             assert isinstance(hdl, mpl.collections.LineCollection)\n@@ -2550,7 +2559,7 @@ def test_streamline(self):\n                 x=\"x\", y=\"y\", u=\"u\", v=\"v\", hue=\"mag\", hue_style=\"discrete\"\n             )\n \n-    def test_facetgrid(self):\n+    def test_facetgrid(self) -> None:\n         with figure_context():\n             fg = self.ds.plot.streamplot(\n                 x=\"x\", y=\"y\", u=\"u\", v=\"v\", row=\"row\", col=\"col\", hue=\"mag\"\n@@ -2574,7 +2583,7 @@ def test_facetgrid(self):\n @requires_matplotlib\n class TestDatasetScatterPlots(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         das = [\n             DataArray(\n                 np.random.randn(3, 3, 4, 4),\n@@ -2593,21 +2602,52 @@ def setUp(self):\n         ds.B.attrs[\"units\"] = \"Bunits\"\n         self.ds = ds\n \n-    def test_accessor(self):\n-        from ..plot.dataset_plot import _Dataset_PlotMethods\n+    def test_accessor(self) -> None:\n+        from ..plot.accessor import DatasetPlotAccessor\n+\n+        assert Dataset.plot is DatasetPlotAccessor\n+        assert isinstance(self.ds.plot, DatasetPlotAccessor)\n+\n+    @pytest.mark.parametrize(\n+        \"add_guide, hue_style, legend, colorbar\",\n+        [\n+            (None, None, False, True),\n+            (False, None, False, False),\n+            (True, None, False, True),\n+            (True, \"continuous\", False, True),\n+            (False, \"discrete\", False, False),\n+            (True, \"discrete\", True, False),\n+        ],\n+    )\n+    def test_add_guide(\n+        self,\n+        add_guide: bool | None,\n+        hue_style: Literal[\"continuous\", \"discrete\", None],\n+        legend: bool,\n+        colorbar: bool,\n+    ) -> None:\n \n-        assert Dataset.plot is _Dataset_PlotMethods\n-        assert isinstance(self.ds.plot, _Dataset_PlotMethods)\n+        meta_data = _infer_meta_data(\n+            self.ds,\n+            x=\"A\",\n+            y=\"B\",\n+            hue=\"hue\",\n+            hue_style=hue_style,\n+            add_guide=add_guide,\n+            funcname=\"scatter\",\n+        )\n+        assert meta_data[\"add_legend\"] is legend\n+        assert meta_data[\"add_colorbar\"] is colorbar\n \n-    def test_facetgrid_shape(self):\n+    def test_facetgrid_shape(self) -> None:\n         g = self.ds.plot.scatter(x=\"A\", y=\"B\", row=\"row\", col=\"col\")\n         assert g.axes.shape == (len(self.ds.row), len(self.ds.col))\n \n         g = self.ds.plot.scatter(x=\"A\", y=\"B\", row=\"col\", col=\"row\")\n         assert g.axes.shape == (len(self.ds.col), len(self.ds.row))\n \n-    def test_default_labels(self):\n-        g = self.ds.plot.scatter(\"A\", \"B\", row=\"row\", col=\"col\", hue=\"hue\")\n+    def test_default_labels(self) -> None:\n+        g = self.ds.plot.scatter(x=\"A\", y=\"B\", row=\"row\", col=\"col\", hue=\"hue\")\n \n         # Top row should be labeled\n         for label, ax in zip(self.ds.coords[\"col\"].values, g.axes[0, :]):\n@@ -2621,22 +2661,34 @@ def test_default_labels(self):\n         for ax in g.axes[:, 0]:\n             assert ax.get_ylabel() == \"B [Bunits]\"\n \n-    def test_axes_in_faceted_plot(self):\n+    def test_axes_in_faceted_plot(self) -> None:\n         with pytest.raises(ValueError):\n             self.ds.plot.scatter(x=\"A\", y=\"B\", row=\"row\", ax=plt.axes())\n \n-    def test_figsize_and_size(self):\n+    def test_figsize_and_size(self) -> None:\n         with pytest.raises(ValueError):\n-            self.ds.plot.scatter(x=\"A\", y=\"B\", row=\"row\", size=3, figsize=4)\n+            self.ds.plot.scatter(x=\"A\", y=\"B\", row=\"row\", size=3, figsize=(4, 3))\n \n     @pytest.mark.parametrize(\n         \"x, y, hue, add_legend, add_colorbar, error_type\",\n         [\n-            (\"A\", \"The Spanish Inquisition\", None, None, None, KeyError),\n-            (\"The Spanish Inquisition\", \"B\", None, None, True, ValueError),\n+            pytest.param(\n+                \"A\", \"The Spanish Inquisition\", None, None, None, KeyError, id=\"bad_y\"\n+            ),\n+            pytest.param(\n+                \"The Spanish Inquisition\", \"B\", None, None, True, ValueError, id=\"bad_x\"\n+            ),\n         ],\n     )\n-    def test_bad_args(self, x, y, hue, add_legend, add_colorbar, error_type):\n+    def test_bad_args(\n+        self,\n+        x: Hashable,\n+        y: Hashable,\n+        hue: Hashable | None,\n+        add_legend: bool | None,\n+        add_colorbar: bool | None,\n+        error_type: type[Exception],\n+    ):\n         with pytest.raises(error_type):\n             self.ds.plot.scatter(\n                 x=x, y=y, hue=hue, add_legend=add_legend, add_colorbar=add_colorbar\n@@ -2644,7 +2696,7 @@ def test_bad_args(self, x, y, hue, add_legend, add_colorbar, error_type):\n \n     @pytest.mark.xfail(reason=\"datetime,timedelta hue variable not supported.\")\n     @pytest.mark.parametrize(\"hue_style\", [\"discrete\", \"continuous\"])\n-    def test_datetime_hue(self, hue_style):\n+    def test_datetime_hue(self, hue_style: Literal[\"discrete\", \"continuous\"]) -> None:\n         ds2 = self.ds.copy()\n         ds2[\"hue\"] = pd.date_range(\"2000-1-1\", periods=4)\n         ds2.plot.scatter(x=\"A\", y=\"B\", hue=\"hue\", hue_style=hue_style)\n@@ -2652,30 +2704,35 @@ def test_datetime_hue(self, hue_style):\n         ds2[\"hue\"] = pd.timedelta_range(\"-1D\", periods=4, freq=\"D\")\n         ds2.plot.scatter(x=\"A\", y=\"B\", hue=\"hue\", hue_style=hue_style)\n \n-    def test_facetgrid_hue_style(self):\n-        # Can't move this to pytest.mark.parametrize because py37-bare-minimum\n-        # doesn't have matplotlib.\n-        for hue_style in (\"discrete\", \"continuous\"):\n-            g = self.ds.plot.scatter(\n-                x=\"A\", y=\"B\", row=\"row\", col=\"col\", hue=\"hue\", hue_style=hue_style\n-            )\n-            # 'discrete' and 'continuous', should be single PathCollection\n-            assert isinstance(g._mappables[-1], mpl.collections.PathCollection)\n+    @pytest.mark.parametrize(\"hue_style\", [\"discrete\", \"continuous\"])\n+    def test_facetgrid_hue_style(\n+        self, hue_style: Literal[\"discrete\", \"continuous\"]\n+    ) -> None:\n+        g = self.ds.plot.scatter(\n+            x=\"A\", y=\"B\", row=\"row\", col=\"col\", hue=\"hue\", hue_style=hue_style\n+        )\n+        assert isinstance(g._mappables[-1], mpl.collections.PathCollection)\n \n     @pytest.mark.parametrize(\n-        \"x, y, hue, markersize\", [(\"A\", \"B\", \"x\", \"col\"), (\"x\", \"row\", \"A\", \"B\")]\n+        [\"x\", \"y\", \"hue\", \"markersize\"],\n+        [(\"A\", \"B\", \"x\", \"col\"), (\"x\", \"row\", \"A\", \"B\")],\n     )\n-    def test_scatter(self, x, y, hue, markersize):\n+    def test_scatter(\n+        self, x: Hashable, y: Hashable, hue: Hashable, markersize: Hashable\n+    ) -> None:\n         self.ds.plot.scatter(x=x, y=y, hue=hue, markersize=markersize)\n \n-    def test_non_numeric_legend(self):\n+        with pytest.raises(ValueError, match=r\"u, v\"):\n+            self.ds.plot.scatter(x=x, y=y, u=\"col\", v=\"row\")\n+\n+    def test_non_numeric_legend(self) -> None:\n         ds2 = self.ds.copy()\n         ds2[\"hue\"] = [\"a\", \"b\", \"c\", \"d\"]\n         pc = ds2.plot.scatter(x=\"A\", y=\"B\", hue=\"hue\")\n         # should make a discrete legend\n         assert pc.axes.legend_ is not None\n \n-    def test_legend_labels(self):\n+    def test_legend_labels(self) -> None:\n         # regression test for #4126: incorrect legend labels\n         ds2 = self.ds.copy()\n         ds2[\"hue\"] = [\"a\", \"a\", \"b\", \"b\"]\n@@ -2690,11 +2747,13 @@ def test_legend_labels(self):\n         ]\n         assert actual == expected\n \n-    def test_legend_labels_facetgrid(self):\n+    def test_legend_labels_facetgrid(self) -> None:\n         ds2 = self.ds.copy()\n         ds2[\"hue\"] = [\"d\", \"a\", \"c\", \"b\"]\n         g = ds2.plot.scatter(x=\"A\", y=\"B\", hue=\"hue\", markersize=\"x\", col=\"col\")\n-        actual = tuple(t.get_text() for t in g.figlegend.texts)\n+        legend = g.figlegend\n+        assert legend is not None\n+        actual = tuple(t.get_text() for t in legend.texts)\n         expected = (\n             \"x [xunits]\",\n             \"$\\\\mathdefault{0}$\",\n@@ -2703,14 +2762,14 @@ def test_legend_labels_facetgrid(self):\n         )\n         assert actual == expected\n \n-    def test_add_legend_by_default(self):\n+    def test_add_legend_by_default(self) -> None:\n         sc = self.ds.plot.scatter(x=\"A\", y=\"B\", hue=\"hue\")\n         assert len(sc.figure.axes) == 2\n \n \n class TestDatetimePlot(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         \"\"\"\n         Create a DataArray with a time-axis that contains datetime objects.\n         \"\"\"\n@@ -2722,11 +2781,11 @@ def setUp(self):\n \n         self.darray = darray\n \n-    def test_datetime_line_plot(self):\n+    def test_datetime_line_plot(self) -> None:\n         # test if line plot raises no Exception\n         self.darray.plot.line()\n \n-    def test_datetime_units(self):\n+    def test_datetime_units(self) -> None:\n         # test that matplotlib-native datetime works:\n         fig, ax = plt.subplots()\n         ax.plot(self.darray[\"time\"], self.darray)\n@@ -2735,7 +2794,7 @@ def test_datetime_units(self):\n         # mpl.dates.AutoDateLocator passes and no other subclasses:\n         assert type(ax.xaxis.get_major_locator()) is mpl.dates.AutoDateLocator\n \n-    def test_datetime_plot1d(self):\n+    def test_datetime_plot1d(self) -> None:\n         # Test that matplotlib-native datetime works:\n         p = self.darray.plot.line()\n         ax = p[0].axes\n@@ -2744,7 +2803,7 @@ def test_datetime_plot1d(self):\n         # mpl.dates.AutoDateLocator passes and no other subclasses:\n         assert type(ax.xaxis.get_major_locator()) is mpl.dates.AutoDateLocator\n \n-    def test_datetime_plot2d(self):\n+    def test_datetime_plot2d(self) -> None:\n         # Test that matplotlib-native datetime works:\n         da = DataArray(\n             np.arange(3 * 4).reshape(3, 4),\n@@ -2768,7 +2827,7 @@ def test_datetime_plot2d(self):\n @requires_cftime\n class TestCFDatetimePlot(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         \"\"\"\n         Create a DataArray with a time-axis that contains cftime.datetime\n         objects.\n@@ -2781,13 +2840,13 @@ def setUp(self):\n \n         self.darray = darray\n \n-    def test_cfdatetime_line_plot(self):\n+    def test_cfdatetime_line_plot(self) -> None:\n         self.darray.isel(x=0).plot.line()\n \n-    def test_cfdatetime_pcolormesh_plot(self):\n+    def test_cfdatetime_pcolormesh_plot(self) -> None:\n         self.darray.plot.pcolormesh()\n \n-    def test_cfdatetime_contour_plot(self):\n+    def test_cfdatetime_contour_plot(self) -> None:\n         self.darray.plot.contour()\n \n \n@@ -2795,7 +2854,7 @@ def test_cfdatetime_contour_plot(self):\n @pytest.mark.skipif(has_nc_time_axis, reason=\"nc_time_axis is installed\")\n class TestNcAxisNotInstalled(PlotTestCase):\n     @pytest.fixture(autouse=True)\n-    def setUp(self):\n+    def setUp(self) -> None:\n         \"\"\"\n         Create a DataArray with a time-axis that contains cftime.datetime\n         objects.\n@@ -2809,7 +2868,7 @@ def setUp(self):\n \n         self.darray = darray\n \n-    def test_ncaxis_notinstalled_line_plot(self):\n+    def test_ncaxis_notinstalled_line_plot(self) -> None:\n         with pytest.raises(ImportError, match=r\"optional `nc-time-axis`\"):\n             self.darray.plot.line()\n \n@@ -2847,60 +2906,60 @@ def data_array_logspaced(self, request):\n             )\n \n     @pytest.mark.parametrize(\"xincrease\", [True, False])\n-    def test_xincrease_kwarg(self, data_array, xincrease):\n+    def test_xincrease_kwarg(self, data_array, xincrease) -> None:\n         with figure_context():\n             data_array.plot(xincrease=xincrease)\n             assert plt.gca().xaxis_inverted() == (not xincrease)\n \n     @pytest.mark.parametrize(\"yincrease\", [True, False])\n-    def test_yincrease_kwarg(self, data_array, yincrease):\n+    def test_yincrease_kwarg(self, data_array, yincrease) -> None:\n         with figure_context():\n             data_array.plot(yincrease=yincrease)\n             assert plt.gca().yaxis_inverted() == (not yincrease)\n \n     @pytest.mark.parametrize(\"xscale\", [\"linear\", \"logit\", \"symlog\"])\n-    def test_xscale_kwarg(self, data_array, xscale):\n+    def test_xscale_kwarg(self, data_array, xscale) -> None:\n         with figure_context():\n             data_array.plot(xscale=xscale)\n             assert plt.gca().get_xscale() == xscale\n \n     @pytest.mark.parametrize(\"yscale\", [\"linear\", \"logit\", \"symlog\"])\n-    def test_yscale_kwarg(self, data_array, yscale):\n+    def test_yscale_kwarg(self, data_array, yscale) -> None:\n         with figure_context():\n             data_array.plot(yscale=yscale)\n             assert plt.gca().get_yscale() == yscale\n \n-    def test_xscale_log_kwarg(self, data_array_logspaced):\n+    def test_xscale_log_kwarg(self, data_array_logspaced) -> None:\n         xscale = \"log\"\n         with figure_context():\n             data_array_logspaced.plot(xscale=xscale)\n             assert plt.gca().get_xscale() == xscale\n \n-    def test_yscale_log_kwarg(self, data_array_logspaced):\n+    def test_yscale_log_kwarg(self, data_array_logspaced) -> None:\n         yscale = \"log\"\n         with figure_context():\n             data_array_logspaced.plot(yscale=yscale)\n             assert plt.gca().get_yscale() == yscale\n \n-    def test_xlim_kwarg(self, data_array):\n+    def test_xlim_kwarg(self, data_array) -> None:\n         with figure_context():\n             expected = (0.0, 1000.0)\n             data_array.plot(xlim=[0, 1000])\n             assert plt.gca().get_xlim() == expected\n \n-    def test_ylim_kwarg(self, data_array):\n+    def test_ylim_kwarg(self, data_array) -> None:\n         with figure_context():\n             data_array.plot(ylim=[0, 1000])\n             expected = (0.0, 1000.0)\n             assert plt.gca().get_ylim() == expected\n \n-    def test_xticks_kwarg(self, data_array):\n+    def test_xticks_kwarg(self, data_array) -> None:\n         with figure_context():\n             data_array.plot(xticks=np.arange(5))\n             expected = np.arange(5).tolist()\n             assert_array_equal(plt.gca().get_xticks(), expected)\n \n-    def test_yticks_kwarg(self, data_array):\n+    def test_yticks_kwarg(self, data_array) -> None:\n         with figure_context():\n             data_array.plot(yticks=np.arange(5))\n             expected = np.arange(5)\n@@ -2909,7 +2968,7 @@ def test_yticks_kwarg(self, data_array):\n \n @requires_matplotlib\n @pytest.mark.parametrize(\"plotfunc\", [\"pcolormesh\", \"contourf\", \"contour\"])\n-def test_plot_transposed_nondim_coord(plotfunc):\n+def test_plot_transposed_nondim_coord(plotfunc) -> None:\n     x = np.linspace(0, 10, 101)\n     h = np.linspace(3, 7, 101)\n     s = np.linspace(0, 1, 51)\n@@ -2927,7 +2986,7 @@ def test_plot_transposed_nondim_coord(plotfunc):\n \n @requires_matplotlib\n @pytest.mark.parametrize(\"plotfunc\", [\"pcolormesh\", \"imshow\"])\n-def test_plot_transposes_properly(plotfunc):\n+def test_plot_transposes_properly(plotfunc) -> None:\n     # test that we aren't mistakenly transposing when the 2 dimensions have equal sizes.\n     da = xr.DataArray([np.sin(2 * np.pi / 10 * np.arange(10))] * 10, dims=(\"y\", \"x\"))\n     with figure_context():\n@@ -2939,7 +2998,7 @@ def test_plot_transposes_properly(plotfunc):\n \n \n @requires_matplotlib\n-def test_facetgrid_single_contour():\n+def test_facetgrid_single_contour() -> None:\n     # regression test for GH3569\n     x, y = np.meshgrid(np.arange(12), np.arange(12))\n     z = xr.DataArray(np.sqrt(x**2 + y**2))\n@@ -2987,6 +3046,8 @@ def test_get_axis_raises():\n         pytest.param(None, 5, None, False, {}, id=\"size\"),\n         pytest.param(None, 5.5, None, False, {\"label\": \"test\"}, id=\"size_kwargs\"),\n         pytest.param(None, 5, 1, False, {}, id=\"size+aspect\"),\n+        pytest.param(None, 5, \"auto\", False, {}, id=\"auto_aspect\"),\n+        pytest.param(None, 5, \"equal\", False, {}, id=\"equal_aspect\"),\n         pytest.param(None, None, None, True, {}, id=\"ax\"),\n         pytest.param(None, None, None, False, {}, id=\"default\"),\n         pytest.param(None, None, None, False, {\"label\": \"test\"}, id=\"default_kwargs\"),\n@@ -3036,7 +3097,7 @@ def test_get_axis_current() -> None:\n \n \n @requires_matplotlib\n-def test_maybe_gca():\n+def test_maybe_gca() -> None:\n \n     with figure_context():\n         ax = _maybe_gca(aspect=1)\n@@ -3076,7 +3137,9 @@ def test_maybe_gca():\n         (\"A\", \"B\", \"z\", \"y\", \"x\", \"w\", None, True, True),\n     ],\n )\n-def test_datarray_scatter(x, y, z, hue, markersize, row, col, add_legend, add_colorbar):\n+def test_datarray_scatter(\n+    x, y, z, hue, markersize, row, col, add_legend, add_colorbar\n+) -> None:\n     \"\"\"Test datarray scatter. Merge with TestPlot1D eventually.\"\"\"\n     ds = xr.tutorial.scatter_example_dataset()\n \n",
  "problem_statement": "Plot accessors miss static typing\n### What happened?\n\nThe plot accessors i.e. `dataarray.plot` of type `_PlotMethods` are missing static typing especially of function attributes. See #6947 for an example.\r\n\r\nThe problem is that many plotting methods are added using hooks via decorators, something that mypy does not understand.\r\n\n\n### What did you expect to happen?\n\nAs a quick fix: type the plot accessors as `_PlotMethods | Any` to avoid false positives in mypy.\r\n\r\nBetter to either restructure the accessor with static methods instead of hooks or figure out another way of telling static type checkers about these methods.\r\n\r\nAnyway: mypy should not complain.\n\n### Minimal Complete Verifiable Example\n\n```Python\nimport xarray as xr\r\n\r\nda = xr.DataArray([[1,2,3], [4,5,6]], dims=[\"x\", \"y\"])\r\nda.plot.contourf(x=\"x\", y=\"y\")\r\n# mypy complains:\r\n# error: \"_PlotMethods\" has no attribute \"contourf\"\n```\n\n\n### MVCE confirmation\n\n- [X] Minimal example — the example is as focused as reasonably possible to demonstrate the underlying issue in xarray.\n- [X] Complete example — the example is self-contained, including all data and the text of any traceback.\n- [X] Verifiable example — the example copy & pastes into an IPython prompt or [Binder notebook](https://mybinder.org/v2/gh/pydata/xarray/main?urlpath=lab/tree/doc/examples/blank_template.ipynb), returning the result.\n- [X] New issue — a search of GitHub Issues suggests this is not a duplicate.\n\n### Relevant log output\n\n_No response_\n\n### Anything else we need to know?\n\n_No response_\n\n### Environment\n\nOn mobile, can edit it later if required.\r\nNewest xarray should have this problem, before the accessor was Any.\n",
  "hints_text": "",
  "created_at": "2022-09-18T17:40:36Z",
  "version": "2022.06",
  "FAIL_TO_PASS": "[\"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[month]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[day]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[hour]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[minute]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[second]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[microsecond]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[nanosecond]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[week]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[weekofyear]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[dayofweek]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[weekday]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[dayofyear]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[quarter]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[date]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[time]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_month_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_month_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_quarter_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_quarter_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_year_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_year_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_leap_year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[year-year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[week-week]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[weekday-day]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_calendar\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_strftime\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_not_datetime_type\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_seasons\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[floor-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[ceil-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[round-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_not_datetime_type\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[days]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[seconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[microseconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[nanoseconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[floor-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[ceil-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[round-D]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[month]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[day]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[hour]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[minute]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[second]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[microsecond]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[nanosecond]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[week]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[weekofyear]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[dayofweek]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[weekday]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[dayofyear]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[quarter]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[date]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[time]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_month_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_month_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_quarter_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_quarter_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_year_start]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_year_end]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_leap_year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[year]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[week]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[weekday]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[floor-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[ceil-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[round-D]\", \"xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[strftime-%Y-%m-%d\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[days]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[seconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[microseconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[nanoseconds]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[floor-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[ceil-D]\", \"xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[round-D]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[365_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[360_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[julian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[all_leap-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[366_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_calendar_cftime[365_day]\", \"xarray/tests/test_accessor_dt.py::test_calendar_cftime[360_day]\", \"xarray/tests/test_accessor_dt.py::test_calendar_cftime[julian]\", \"xarray/tests/test_accessor_dt.py::test_calendar_cftime[all_leap]\", \"xarray/tests/test_accessor_dt.py::test_calendar_cftime[366_day]\", \"xarray/tests/test_accessor_dt.py::test_calendar_cftime[gregorian]\", \"xarray/tests/test_accessor_dt.py::test_calendar_cftime[proleptic_gregorian]\", \"xarray/tests/test_accessor_dt.py::test_calendar_datetime64_2d\", \"xarray/tests/test_accessor_dt.py::test_calendar_datetime64_3d_dask\", \"xarray/tests/test_accessor_dt.py::test_calendar_dask_cftime\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[365_day]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[360_day]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[julian]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[all_leap]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[366_day]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[gregorian]\", \"xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[proleptic_gregorian]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[365_day]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[360_day]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[julian]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[all_leap]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[366_day]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[gregorian]\", \"xarray/tests/test_accessor_dt.py::test_date_cftime[proleptic_gregorian]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[365_day]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[360_day]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[julian]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[all_leap]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[366_day]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[gregorian]\", \"xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[proleptic_gregorian]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-year]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-month]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-day]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-hour]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-dayofyear]\", \"xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-dayofweek]\", \"xarray/tests/test_accessor_dt.py::test_seasons[365_day]\", \"xarray/tests/test_accessor_dt.py::test_seasons[360_day]\", \"xarray/tests/test_accessor_dt.py::test_seasons[julian]\", \"xarray/tests/test_accessor_dt.py::test_seasons[all_leap]\", \"xarray/tests/test_accessor_dt.py::test_seasons[366_day]\", \"xarray/tests/test_accessor_dt.py::test_seasons[gregorian]\", \"xarray/tests/test_accessor_dt.py::test_seasons[proleptic_gregorian]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[365_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[365_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[360_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[360_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[julian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[julian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[all_leap-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[all_leap-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[366_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[366_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[proleptic_gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[proleptic_gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[365_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[365_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[360_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[360_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[julian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[julian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[all_leap-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[all_leap-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[366_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[366_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[proleptic_gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[proleptic_gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[365_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[365_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[360_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[360_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[julian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[julian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[all_leap-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[all_leap-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[366_day-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[366_day-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[gregorian-True]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[proleptic_gregorian-False]\", \"xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[proleptic_gregorian-True]\", \"xarray/tests/test_plot.py::TestPlot::test_accessor\", \"xarray/tests/test_plot.py::TestPlot::test_label_from_attrs\", \"xarray/tests/test_plot.py::TestPlot::test1d\", \"xarray/tests/test_plot.py::TestPlot::test_1d_bool\", \"xarray/tests/test_plot.py::TestPlot::test_1d_x_y_kw\", \"xarray/tests/test_plot.py::TestPlot::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestPlot::test_infer_line_data\", \"xarray/tests/test_plot.py::TestPlot::test_line_plot_along_1d_coord\", \"xarray/tests/test_plot.py::TestPlot::test_line_plot_wrong_hue\", \"xarray/tests/test_plot.py::TestPlot::test_2d_line\", \"xarray/tests/test_plot.py::TestPlot::test_2d_line_accepts_legend_kw\", \"xarray/tests/test_plot.py::TestPlot::test_2d_line_accepts_x_kw\", \"xarray/tests/test_plot.py::TestPlot::test_2d_line_accepts_hue_kw\", \"xarray/tests/test_plot.py::TestPlot::test_2d_coords_line_plot\", \"xarray/tests/test_plot.py::TestPlot::test_2d_coord_line_plot_coords_transpose_invariant\", \"xarray/tests/test_plot.py::TestPlot::test_2d_before_squeeze\", \"xarray/tests/test_plot.py::TestPlot::test2d_uniform_calls_imshow\", \"xarray/tests/test_plot.py::TestPlot::test2d_1d_2d_coordinates_contourf\", \"xarray/tests/test_plot.py::TestPlot::test2d_1d_2d_coordinates_pcolormesh\", \"xarray/tests/test_plot.py::TestPlot::test_contourf_cmap_set\", \"xarray/tests/test_plot.py::TestPlot::test_contourf_cmap_set_with_bad_under_over\", \"xarray/tests/test_plot.py::TestPlot::test3d\", \"xarray/tests/test_plot.py::TestPlot::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestPlot::test__infer_interval_breaks\", \"xarray/tests/test_plot.py::TestPlot::test__infer_interval_breaks_logscale\", \"xarray/tests/test_plot.py::TestPlot::test__infer_interval_breaks_logscale_invalid_coords\", \"xarray/tests/test_plot.py::TestPlot::test_geo_data\", \"xarray/tests/test_plot.py::TestPlot::test_datetime_dimension\", \"xarray/tests/test_plot.py::TestPlot::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestPlot::test_subplot_kws\", \"xarray/tests/test_plot.py::TestPlot::test_plot_size\", \"xarray/tests/test_plot.py::TestPlot::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestPlot::test_coord_with_interval\", \"xarray/tests/test_plot.py::TestPlot::test_coord_with_interval_x\", \"xarray/tests/test_plot.py::TestPlot::test_coord_with_interval_y\", \"xarray/tests/test_plot.py::TestPlot::test_coord_with_interval_xy\", \"xarray/tests/test_plot.py::TestPlot::test_labels_with_units_with_interval[x]\", \"xarray/tests/test_plot.py::TestPlot::test_labels_with_units_with_interval[y]\", \"xarray/tests/test_plot.py::TestPlot1D::test_xlabel_is_index_name\", \"xarray/tests/test_plot.py::TestPlot1D::test_no_label_name_on_x_axis\", \"xarray/tests/test_plot.py::TestPlot1D::test_no_label_name_on_y_axis\", \"xarray/tests/test_plot.py::TestPlot1D::test_ylabel_is_data_name\", \"xarray/tests/test_plot.py::TestPlot1D::test_xlabel_is_data_name\", \"xarray/tests/test_plot.py::TestPlot1D::test_format_string\", \"xarray/tests/test_plot.py::TestPlot1D::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestPlot1D::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestPlot1D::test_primitive_returned\", \"xarray/tests/test_plot.py::TestPlot1D::test_plot_nans\", \"xarray/tests/test_plot.py::TestPlot1D::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestPlot1D::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestPlot1D::test_slice_in_title\", \"xarray/tests/test_plot.py::TestPlot1D::test_slice_in_title_single_item_array\", \"xarray/tests/test_plot.py::TestPlotStep::test_step\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_where[pre]\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_where[post]\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_where[mid]\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_hue\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_hue_and_where[pre]\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_hue_and_where[post]\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_hue_and_where[mid]\", \"xarray/tests/test_plot.py::TestPlotStep::test_drawstyle_steps\", \"xarray/tests/test_plot.py::TestPlotStep::test_drawstyle_steps_with_where[pre]\", \"xarray/tests/test_plot.py::TestPlotStep::test_drawstyle_steps_with_where[post]\", \"xarray/tests/test_plot.py::TestPlotStep::test_drawstyle_steps_with_where[mid]\", \"xarray/tests/test_plot.py::TestPlotStep::test_coord_with_interval_step\", \"xarray/tests/test_plot.py::TestPlotStep::test_coord_with_interval_step_x\", \"xarray/tests/test_plot.py::TestPlotStep::test_coord_with_interval_step_y\", \"xarray/tests/test_plot.py::TestPlotStep::test_coord_with_interval_step_x_and_y_raises_valueeerror\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_3d_array\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_xlabel_uses_name\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_title_is_histogram\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_can_pass_in_kwargs\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_primitive_returned\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_plot_nans\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_hist_coord_with_interval\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_robust\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_center\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_cmap_sequential_option\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_cmap_sequential_explicit_option\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_cmap_divergent_option\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_nan_inf_are_ignored\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_integer_levels\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_list_levels\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_divergentcontrol\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_norm_sets_vmin_vmax\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_recover_from_seaborn_jet_exception\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_build_discrete_cmap\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_discrete_colormap_list_of_levels\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_discrete_colormap_int_levels\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_discrete_colormap_list_levels_and_vmin_or_vmax\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_discrete_colormap_provided_boundary_norm\", \"xarray/tests/test_plot.py::TestContourf::test_label_names\", \"xarray/tests/test_plot.py::TestContourf::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestContourf::test_bool\", \"xarray/tests/test_plot.py::TestContourf::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestContourf::test_3d_raises_valueerror\", \"xarray/tests/test_plot.py::TestContourf::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestContourf::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestContourf::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestContourf::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestContourf::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestContourf::test_xyincrease_true_changes_axes\", \"xarray/tests/test_plot.py::TestContourf::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestContourf::test_plot_nans\", \"xarray/tests/test_plot.py::TestContourf::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestContourf::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestContourf::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestContourf::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_default_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_diverging_color_limits\", \"xarray/tests/test_plot.py::TestContourf::test_xy_strings\", \"xarray/tests/test_plot.py::TestContourf::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestContourf::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestContourf::test_coord_strings\", \"xarray/tests/test_plot.py::TestContourf::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestContourf::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestContourf::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestContourf::test_default_title\", \"xarray/tests/test_plot.py::TestContourf::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestContourf::test_no_labels\", \"xarray/tests/test_plot.py::TestContourf::test_colorbar_kwargs\", \"xarray/tests/test_plot.py::TestContourf::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestContourf::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestContourf::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestContourf::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestContourf::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestContourf::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestContourf::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestContourf::test_cmap_and_color_both\", \"xarray/tests/test_plot.py::TestContourf::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestContourf::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestContourf::test_primitive_artist_returned\", \"xarray/tests/test_plot.py::TestContourf::test_extend\", \"xarray/tests/test_plot.py::TestContourf::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestContourf::test_levels\", \"xarray/tests/test_plot.py::TestContour::test_label_names\", \"xarray/tests/test_plot.py::TestContour::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestContour::test_bool\", \"xarray/tests/test_plot.py::TestContour::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestContour::test_3d_raises_valueerror\", \"xarray/tests/test_plot.py::TestContour::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestContour::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestContour::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestContour::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestContour::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestContour::test_xyincrease_true_changes_axes\", \"xarray/tests/test_plot.py::TestContour::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestContour::test_plot_nans\", \"xarray/tests/test_plot.py::TestContour::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestContour::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestContour::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestContour::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestContour::test_default_cmap\", \"xarray/tests/test_plot.py::TestContour::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestContour::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestContour::test_diverging_color_limits\", \"xarray/tests/test_plot.py::TestContour::test_xy_strings\", \"xarray/tests/test_plot.py::TestContour::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestContour::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestContour::test_coord_strings\", \"xarray/tests/test_plot.py::TestContour::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestContour::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestContour::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestContour::test_default_title\", \"xarray/tests/test_plot.py::TestContour::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestContour::test_no_labels\", \"xarray/tests/test_plot.py::TestContour::test_colorbar_kwargs\", \"xarray/tests/test_plot.py::TestContour::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestContour::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestContour::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestContour::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestContour::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestContour::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestContour::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestContour::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestContour::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestContour::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestContour::test_colors\", \"xarray/tests/test_plot.py::TestContour::test_colors_np_levels\", \"xarray/tests/test_plot.py::TestContour::test_cmap_and_color_both\", \"xarray/tests/test_plot.py::TestContour::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestContour::test_single_level\", \"xarray/tests/test_plot.py::TestPcolormesh::test_label_names\", \"xarray/tests/test_plot.py::TestPcolormesh::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestPcolormesh::test_bool\", \"xarray/tests/test_plot.py::TestPcolormesh::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestPcolormesh::test_3d_raises_valueerror\", \"xarray/tests/test_plot.py::TestPcolormesh::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestPcolormesh::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestPcolormesh::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestPcolormesh::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestPcolormesh::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestPcolormesh::test_xyincrease_true_changes_axes\", \"xarray/tests/test_plot.py::TestPcolormesh::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestPcolormesh::test_plot_nans\", \"xarray/tests/test_plot.py::TestPcolormesh::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestPcolormesh::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestPcolormesh::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestPcolormesh::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_default_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_diverging_color_limits\", \"xarray/tests/test_plot.py::TestPcolormesh::test_xy_strings\", \"xarray/tests/test_plot.py::TestPcolormesh::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestPcolormesh::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestPcolormesh::test_coord_strings\", \"xarray/tests/test_plot.py::TestPcolormesh::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestPcolormesh::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestPcolormesh::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestPcolormesh::test_default_title\", \"xarray/tests/test_plot.py::TestPcolormesh::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestPcolormesh::test_no_labels\", \"xarray/tests/test_plot.py::TestPcolormesh::test_colorbar_kwargs\", \"xarray/tests/test_plot.py::TestPcolormesh::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestPcolormesh::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestPcolormesh::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestPcolormesh::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestPcolormesh::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestPcolormesh::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestPcolormesh::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestPcolormesh::test_cmap_and_color_both\", \"xarray/tests/test_plot.py::TestPcolormesh::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestPcolormesh::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestPcolormesh::test_primitive_artist_returned\", \"xarray/tests/test_plot.py::TestPcolormesh::test_everything_plotted\", \"xarray/tests/test_plot.py::TestPcolormesh::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestPcolormesh::test_dont_infer_interval_breaks_for_cartopy\", \"xarray/tests/test_plot.py::TestPcolormeshLogscale::test_interval_breaks_logspace\", \"xarray/tests/test_plot.py::TestImshow::test_label_names\", \"xarray/tests/test_plot.py::TestImshow::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestImshow::test_bool\", \"xarray/tests/test_plot.py::TestImshow::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestImshow::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestImshow::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestImshow::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestImshow::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestImshow::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestImshow::test_xyincrease_true_changes_axes\", \"xarray/tests/test_plot.py::TestImshow::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestImshow::test_plot_nans\", \"xarray/tests/test_plot.py::TestImshow::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestImshow::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestImshow::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestImshow::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_default_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_diverging_color_limits\", \"xarray/tests/test_plot.py::TestImshow::test_xy_strings\", \"xarray/tests/test_plot.py::TestImshow::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestImshow::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestImshow::test_coord_strings\", \"xarray/tests/test_plot.py::TestImshow::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestImshow::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestImshow::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestImshow::test_default_title\", \"xarray/tests/test_plot.py::TestImshow::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestImshow::test_no_labels\", \"xarray/tests/test_plot.py::TestImshow::test_colorbar_kwargs\", \"xarray/tests/test_plot.py::TestImshow::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestImshow::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestImshow::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestImshow::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestImshow::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestImshow::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestImshow::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestImshow::test_cmap_and_color_both\", \"xarray/tests/test_plot.py::TestImshow::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestImshow::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestImshow::test_imshow_called\", \"xarray/tests/test_plot.py::TestImshow::test_xy_pixel_centered\", \"xarray/tests/test_plot.py::TestImshow::test_default_aspect_is_auto\", \"xarray/tests/test_plot.py::TestImshow::test_cannot_change_mpl_aspect\", \"xarray/tests/test_plot.py::TestImshow::test_primitive_artist_returned\", \"xarray/tests/test_plot.py::TestImshow::test_seaborn_palette_needs_levels\", \"xarray/tests/test_plot.py::TestImshow::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestImshow::test_plot_rgb_image\", \"xarray/tests/test_plot.py::TestImshow::test_plot_rgb_image_explicit\", \"xarray/tests/test_plot.py::TestImshow::test_plot_rgb_faceted\", \"xarray/tests/test_plot.py::TestImshow::test_plot_rgba_image_transposed\", \"xarray/tests/test_plot.py::TestImshow::test_warns_ambigious_dim\", \"xarray/tests/test_plot.py::TestImshow::test_rgb_errors_too_many_dims\", \"xarray/tests/test_plot.py::TestImshow::test_rgb_errors_bad_dim_sizes\", \"xarray/tests/test_plot.py::TestImshow::test_normalize_rgb_imshow[-1-None-False]\", \"xarray/tests/test_plot.py::TestImshow::test_normalize_rgb_imshow[None-2-False]\", \"xarray/tests/test_plot.py::TestImshow::test_normalize_rgb_imshow[-1-1-False]\", \"xarray/tests/test_plot.py::TestImshow::test_normalize_rgb_imshow[0-0-False]\", \"xarray/tests/test_plot.py::TestImshow::test_normalize_rgb_imshow[0-None-True]\", \"xarray/tests/test_plot.py::TestImshow::test_normalize_rgb_imshow[None--1-True]\", \"xarray/tests/test_plot.py::TestImshow::test_normalize_rgb_one_arg_error\", \"xarray/tests/test_plot.py::TestImshow::test_imshow_rgb_values_in_valid_range\", \"xarray/tests/test_plot.py::TestImshow::test_regression_rgb_imshow_dim_size_one\", \"xarray/tests/test_plot.py::TestImshow::test_origin_overrides_xyincrease\", \"xarray/tests/test_plot.py::TestSurface::test_label_names\", \"xarray/tests/test_plot.py::TestSurface::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestSurface::test_bool\", \"xarray/tests/test_plot.py::TestSurface::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestSurface::test_3d_raises_valueerror\", \"xarray/tests/test_plot.py::TestSurface::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestSurface::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestSurface::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestSurface::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestSurface::test_plot_nans\", \"xarray/tests/test_plot.py::TestSurface::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestSurface::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestSurface::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestSurface::test_xy_strings\", \"xarray/tests/test_plot.py::TestSurface::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestSurface::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestSurface::test_coord_strings\", \"xarray/tests/test_plot.py::TestSurface::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestSurface::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestSurface::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestSurface::test_default_title\", \"xarray/tests/test_plot.py::TestSurface::test_no_labels\", \"xarray/tests/test_plot.py::TestSurface::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestSurface::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestSurface::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestSurface::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestSurface::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestSurface::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestSurface::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestSurface::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestSurface::test_primitive_artist_returned\", \"xarray/tests/test_plot.py::TestSurface::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestSurface::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestSurface::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestSurface::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestSurface::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestSurface::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestSurface::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestSurface::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestFacetGrid::test_no_args\", \"xarray/tests/test_plot.py::TestFacetGrid::test_names_appear_somewhere\", \"xarray/tests/test_plot.py::TestFacetGrid::test_text_not_super_long\", \"xarray/tests/test_plot.py::TestFacetGrid::test_colorbar\", \"xarray/tests/test_plot.py::TestFacetGrid::test_empty_cell\", \"xarray/tests/test_plot.py::TestFacetGrid::test_norow_nocol_error\", \"xarray/tests/test_plot.py::TestFacetGrid::test_groups\", \"xarray/tests/test_plot.py::TestFacetGrid::test_float_index\", \"xarray/tests/test_plot.py::TestFacetGrid::test_nonunique_index_error\", \"xarray/tests/test_plot.py::TestFacetGrid::test_robust\", \"xarray/tests/test_plot.py::TestFacetGrid::test_can_set_vmin_vmax\", \"xarray/tests/test_plot.py::TestFacetGrid::test_vmin_vmax_equal\", \"xarray/tests/test_plot.py::TestFacetGrid::test_can_set_norm\", \"xarray/tests/test_plot.py::TestFacetGrid::test_figure_size\", \"xarray/tests/test_plot.py::TestFacetGrid::test_num_ticks\", \"xarray/tests/test_plot.py::TestFacetGrid::test_map\", \"xarray/tests/test_plot.py::TestFacetGrid::test_map_dataset\", \"xarray/tests/test_plot.py::TestFacetGrid::test_set_axis_labels\", \"xarray/tests/test_plot.py::TestFacetGrid::test_facetgrid_colorbar\", \"xarray/tests/test_plot.py::TestFacetGrid::test_facetgrid_polar\", \"xarray/tests/test_plot.py::TestFacetGrid4d::test_title_kwargs\", \"xarray/tests/test_plot.py::TestFacetGrid4d::test_default_labels\", \"xarray/tests/test_plot.py::TestFacetedLinePlotsLegend::test_legend_labels\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_facetgrid_shape\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_unnamed_args\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_default_labels\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_test_empty_cell\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_set_axis_labels\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_axes_in_faceted_plot\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_figsize_and_size\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_wrong_num_of_dimensions\", \"xarray/tests/test_plot.py::TestDatasetQuiverPlots::test_quiver\", \"xarray/tests/test_plot.py::TestDatasetQuiverPlots::test_facetgrid\", \"xarray/tests/test_plot.py::TestDatasetQuiverPlots::test_add_guide[None-None-False-True]\", \"xarray/tests/test_plot.py::TestDatasetQuiverPlots::test_add_guide[False-None-False-False]\", \"xarray/tests/test_plot.py::TestDatasetQuiverPlots::test_add_guide[True-None-False-True]\", \"xarray/tests/test_plot.py::TestDatasetQuiverPlots::test_add_guide[True-continuous-False-True]\", \"xarray/tests/test_plot.py::TestDatasetStreamplotPlots::test_streamline\", \"xarray/tests/test_plot.py::TestDatasetStreamplotPlots::test_facetgrid\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_accessor\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[None-None-False-True]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[False-None-False-False]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[True-None-False-True]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[True-continuous-False-True]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[False-discrete-False-False]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[True-discrete-True-False]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_facetgrid_shape\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_default_labels\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_axes_in_faceted_plot\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_figsize_and_size\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_bad_args[bad_y]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_bad_args[bad_x]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_facetgrid_hue_style[discrete]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_facetgrid_hue_style[continuous]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_scatter[A-B-x-col]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_scatter[x-row-A-B]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_non_numeric_legend\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_legend_labels\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_legend_labels_facetgrid\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_legend_by_default\", \"xarray/tests/test_plot.py::TestDatetimePlot::test_datetime_line_plot\", \"xarray/tests/test_plot.py::TestDatetimePlot::test_datetime_units\", \"xarray/tests/test_plot.py::TestDatetimePlot::test_datetime_plot1d\", \"xarray/tests/test_plot.py::TestDatetimePlot::test_datetime_plot2d\", \"xarray/tests/test_plot.py::TestCFDatetimePlot::test_cfdatetime_line_plot\", \"xarray/tests/test_plot.py::TestCFDatetimePlot::test_cfdatetime_pcolormesh_plot\", \"xarray/tests/test_plot.py::TestCFDatetimePlot::test_cfdatetime_contour_plot\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[1-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[1-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[2-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[2-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[3-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[3-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[1-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[1-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[2-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[2-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[3-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[3-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[1-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[1-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[1-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[2-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[2-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[2-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[3-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[3-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[3-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[1-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[1-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[1-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[2-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[2-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[2-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[3-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[3-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[3-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_log_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_log_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_log_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_log_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xlim_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xlim_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xlim_kwarg[3]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_ylim_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_ylim_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_ylim_kwarg[3]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xticks_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xticks_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xticks_kwarg[3]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yticks_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yticks_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yticks_kwarg[3]\", \"xarray/tests/test_plot.py::test_plot_transposed_nondim_coord[pcolormesh]\", \"xarray/tests/test_plot.py::test_plot_transposed_nondim_coord[contourf]\", \"xarray/tests/test_plot.py::test_plot_transposed_nondim_coord[contour]\", \"xarray/tests/test_plot.py::test_plot_transposes_properly[pcolormesh]\", \"xarray/tests/test_plot.py::test_plot_transposes_properly[imshow]\", \"xarray/tests/test_plot.py::test_facetgrid_single_contour\", \"xarray/tests/test_plot.py::test_get_axis_raises\", \"xarray/tests/test_plot.py::test_get_axis[figsize]\", \"xarray/tests/test_plot.py::test_get_axis[figsize_kwargs]\", \"xarray/tests/test_plot.py::test_get_axis[size]\", \"xarray/tests/test_plot.py::test_get_axis[size_kwargs]\", \"xarray/tests/test_plot.py::test_get_axis[size+aspect]\", \"xarray/tests/test_plot.py::test_get_axis[auto_aspect]\", \"xarray/tests/test_plot.py::test_get_axis[equal_aspect]\", \"xarray/tests/test_plot.py::test_get_axis[ax]\", \"xarray/tests/test_plot.py::test_get_axis[default]\", \"xarray/tests/test_plot.py::test_get_axis[default_kwargs]\", \"xarray/tests/test_plot.py::test_get_axis_cartopy[figsize]\", \"xarray/tests/test_plot.py::test_get_axis_cartopy[size]\", \"xarray/tests/test_plot.py::test_get_axis_cartopy[size+aspect]\", \"xarray/tests/test_plot.py::test_get_axis_cartopy[default]\", \"xarray/tests/test_plot.py::test_get_axis_current\", \"xarray/tests/test_plot.py::test_maybe_gca\", \"xarray/tests/test_plot.py::test_datarray_scatter[A-B-None-None-None-None-None-None-None]\", \"xarray/tests/test_plot.py::test_datarray_scatter[B-A-None-w-None-None-None-True-None]\", \"xarray/tests/test_plot.py::test_datarray_scatter[A-B-None-y-x-None-None-True-True]\", \"xarray/tests/test_plot.py::test_datarray_scatter[A-B-z-None-None-None-None-None-None]\", \"xarray/tests/test_plot.py::test_datarray_scatter[B-A-z-w-None-None-None-True-None]\", \"xarray/tests/test_plot.py::test_datarray_scatter[A-B-z-y-x-None-None-True-True]\", \"xarray/tests/test_plot.py::test_datarray_scatter[A-B-z-y-x-w-None-True-True]\", \"xarray/tests/test_plot.py::test_assert_valid_xy\"]",
  "environment_setup_commit": "50ea159bfd0872635ebf4281e741f3c87f0bef6b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.900169",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}