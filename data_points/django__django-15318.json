{
  "repo": "django/django",
  "instance_id": "django__django-15318",
  "base_commit": "b7f263551c64e3f80544892e314ed5b0b22cc7c8",
  "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -627,6 +627,15 @@ def __init__(self, instance):\n \n             self.core_filters = {self.field.name: instance}\n \n+            # Even if this relation is not to pk, we require still pk value.\n+            # The wish is that the instance has been already saved to DB,\n+            # although having a pk value isn't a guarantee of that.\n+            if self.instance.pk is None:\n+                raise ValueError(\n+                    f\"{instance.__class__.__name__!r} instance needs to have a primary \"\n+                    f\"key value before this relationship can be used.\"\n+                )\n+\n         def __call__(self, *, manager):\n             manager = getattr(self.model, manager)\n             manager_class = create_reverse_many_to_one_manager(manager.__class__, rel)\n@@ -634,6 +643,14 @@ def __call__(self, *, manager):\n \n         do_not_call_in_templates = True\n \n+        def _check_fk_val(self):\n+            for field in self.field.foreign_related_fields:\n+                if getattr(self.instance, field.attname) is None:\n+                    raise ValueError(\n+                        f'\"{self.instance!r}\" needs to have a value for field '\n+                        f'\"{field.attname}\" before this relationship can be used.'\n+                    )\n+\n         def _apply_rel_filters(self, queryset):\n             \"\"\"\n             Filter the queryset for the instance this manager is bound to.\n@@ -714,6 +731,7 @@ def get_prefetch_queryset(self, instances, queryset=None):\n             return queryset, rel_obj_attr, instance_attr, False, cache_name, False\n \n         def add(self, *objs, bulk=True):\n+            self._check_fk_val()\n             self._remove_prefetched_objects()\n             db = router.db_for_write(self.model, instance=self.instance)\n \n@@ -752,6 +770,7 @@ def check_and_update_obj(obj):\n         add.alters_data = True\n \n         def create(self, **kwargs):\n+            self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n             return super(RelatedManager, self.db_manager(db)).create(**kwargs)\n@@ -759,6 +778,7 @@ def create(self, **kwargs):\n         create.alters_data = True\n \n         def get_or_create(self, **kwargs):\n+            self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n             return super(RelatedManager, self.db_manager(db)).get_or_create(**kwargs)\n@@ -766,6 +786,7 @@ def get_or_create(self, **kwargs):\n         get_or_create.alters_data = True\n \n         def update_or_create(self, **kwargs):\n+            self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n             return super(RelatedManager, self.db_manager(db)).update_or_create(**kwargs)\n@@ -779,6 +800,7 @@ def update_or_create(self, **kwargs):\n             def remove(self, *objs, bulk=True):\n                 if not objs:\n                     return\n+                self._check_fk_val()\n                 val = self.field.get_foreign_related_value(self.instance)\n                 old_ids = set()\n                 for obj in objs:\n@@ -802,6 +824,7 @@ def remove(self, *objs, bulk=True):\n             remove.alters_data = True\n \n             def clear(self, *, bulk=True):\n+                self._check_fk_val()\n                 self._clear(self, bulk)\n \n             clear.alters_data = True\n@@ -822,6 +845,7 @@ def _clear(self, queryset, bulk):\n             _clear.alters_data = True\n \n         def set(self, objs, *, bulk=True, clear=False):\n+            self._check_fk_val()\n             # Force evaluation of `objs` in case it's a queryset whose value\n             # could be affected by `manager.clear()`. Refs #19816.\n             objs = tuple(objs)\n",
  "test_patch": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -738,14 +738,16 @@ def test_fk_instantiation_outside_model(self):\n         self.assertEqual(\"id\", cat.remote_field.get_related_field().name)\n \n     def test_relation_unsaved(self):\n-        # The <field>_set manager does not join on Null value fields (#17541)\n         Third.objects.create(name=\"Third 1\")\n         Third.objects.create(name=\"Third 2\")\n         th = Third(name=\"testing\")\n-        # The object isn't saved and thus the relation field is null - we won't even\n-        # execute a query in this case.\n-        with self.assertNumQueries(0):\n-            self.assertEqual(th.child_set.count(), 0)\n+        # The object isn't saved and the relation cannot be used.\n+        msg = (\n+            \"'Third' instance needs to have a primary key value before this \"\n+            \"relationship can be used.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            th.child_set.count()\n         th.save()\n         # Now the model is saved, so we will need to execute a query.\n         with self.assertNumQueries(1):\ndiff --git a/tests/many_to_one_null/tests.py b/tests/many_to_one_null/tests.py\n--- a/tests/many_to_one_null/tests.py\n+++ b/tests/many_to_one_null/tests.py\n@@ -146,3 +146,36 @@ def test_related_null_to_field(self):\n         self.assertIs(d1.car, None)\n         with self.assertNumQueries(0):\n             self.assertEqual(list(c1.drivers.all()), [])\n+\n+    def test_unsaved(self):\n+        msg = (\n+            \"'Car' instance needs to have a primary key value before this relationship \"\n+            \"can be used.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Car(make=\"Ford\").drivers.all()\n+\n+    def test_related_null_to_field_related_managers(self):\n+        car = Car.objects.create(make=None)\n+        driver = Driver.objects.create()\n+        msg = (\n+            f'\"{car!r}\" needs to have a value for field \"make\" before this '\n+            f\"relationship can be used.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            car.drivers.add(driver)\n+        with self.assertRaisesMessage(ValueError, msg):\n+            car.drivers.create()\n+        with self.assertRaisesMessage(ValueError, msg):\n+            car.drivers.get_or_create()\n+        with self.assertRaisesMessage(ValueError, msg):\n+            car.drivers.update_or_create()\n+        with self.assertRaisesMessage(ValueError, msg):\n+            car.drivers.remove(driver)\n+        with self.assertRaisesMessage(ValueError, msg):\n+            car.drivers.clear()\n+        with self.assertRaisesMessage(ValueError, msg):\n+            car.drivers.set([driver])\n+\n+        with self.assertNumQueries(0):\n+            self.assertEqual(car.drivers.count(), 0)\ndiff --git a/tests/null_queries/tests.py b/tests/null_queries/tests.py\n--- a/tests/null_queries/tests.py\n+++ b/tests/null_queries/tests.py\n@@ -44,9 +44,14 @@ def test_none_as_null(self):\n         with self.assertRaisesMessage(ValueError, \"Cannot use None as a query value\"):\n             Choice.objects.filter(id__gt=None)\n \n-        # Related managers use __exact=None implicitly if the object hasn't been saved.\n-        p2 = Poll(question=\"How?\")\n-        self.assertEqual(repr(p2.choice_set.all()), \"<QuerySet []>\")\n+    def test_unsaved(self):\n+        poll = Poll(question=\"How?\")\n+        msg = (\n+            \"'Poll' instance needs to have a primary key value before this \"\n+            \"relationship can be used.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            poll.choice_set.all()\n \n     def test_reverse_relations(self):\n         \"\"\"\n",
  "problem_statement": "Unify reverse foreign key and m2m unsaved model querying\nDescription\n\t\nCurrently when querying unsaved reverse relations the behavior differs.\nUsing model:\nclass Foo(models.Model):\n\tfk = models.ForeignKey('self', related_name='fk_rev')\n\tm2m = models.ManyToManyField('self')\nand test case:\nprint(Foo().fk_rev.all())\nprint(Foo().m2m.all())\nWe get [] from the first filter, but an error\nValueError: \"<Foo: Foo object>\" needs to have a value for field \"from_foo\" before this many-to-many relationship can be used.\nfrom the second filter.\nSo, m2m fields can't be filtered if the object isn't saved, but reverse fk fields can be filtered.\nThere is a (slightly stale) patch for #17541 which makes fk fields and m2m fields work consistently. The changes in behavior are:\n* Nullable many-to-many and foreign key relations will return an empty\n queryset when the relation field is null. For many-to-many this was\n previously an error (no change for foreign keys).\n* Trying to add objects to a foreign key relation when the relation field\n is null is now an error (no change for m2m).\n* Trying to use a relation of any kind when the object isn't saved is now\n an error (no change for m2m).\nI think we can squeeze these changes in as bug-fixes. These are slight backwards compatibility changes, but to me it seems that almost always the changes will be visible only in code that isn't working as intended. If these are seen as something likely breaking working code, then I don't see any way to make the APIs consistent.\nThe #17541 patch is available from: â€‹https://github.com/akaariai/django/compare/ticket_17541\n",
  "hints_text": "Reviewing my own ticket as \"DDN\".\nYes, it's better to error loudly on operations that can't work because the database didn't generate an id for the object yet.\nI think this would allow removing the two lines added in a4c20ae85b40c49e28d1b2227208e4f00d7820df. Marking as \"Easy pickings\" since rebasing Anssi's original patch might not be too difficult.\nI will create a new branch, and make the changes made in â€‹https://github.com/django/django/compare/master...akaariai:ticket_17541 Will that be correct?\nYes, you should â€‹rebase the branch and update the release notes for 1.11.\nHi, I'm interested in contributing to Django and have been advised to start with some of the 'easy pickings' tasks. I've seen it's been unassigned and is still open, is this something I can pick up? Cheers, Michael\nI left comments for improvement on the rebased â€‹PR.\nThanks Tim, I'll add more tests next week\nadded comments in the PR\nHey guys, is this ticket still need a fix ?\nHi there, I was also wondering if further work is needed? From Tim's final comment in the pull request, it seems that most of the changes from Ansi's patch still haven't been updated in master. Thanks\nI think someone else could pick this up considering we haven't heard from Andrey in a while.\nNewbie here, but I've begun reading through this problem and would like to take a crack at it. Andrey's pull request seems most of the way there, and if the comments remain valid that gives me a starting point. Thoughts?\nThat's a correct assessment of the situation.\nPlease review the latest PR, that is rebased with the master here: â€‹https://github.com/django/django/pull/8570 The tests look okay to me. Please suggest any more tests if required. Thanks!\nComments on â€‹PR\nHi everyone, I'm interested in contributing to Django, so would like to finish this easy pick if needed. From comments on PR I can see there is only few things left, adjustments to tests and docs. Advise me if there is anything else left.\nI've created a PR to fix this issue. Please review and let me know if any change required. Thanks â€‹https://github.com/django/django/pull/11807\nCan I claim this? I think I can move this forward\nI'd like to try finish this\nNeed some help with the ticket. PR: â€‹https://github.com/django/django/pull/13784. Thanks!\nRebased the previous PR â€‹https://github.com/django/django/pull/11807. I would like to get some clarification on this old ticket, took it under easy-pickings tag. â€‹https://github.com/django/django/pull/11807#pullrequestreview-344544165 - this is the last comment from where I started to search next steps to complete the ticket. It leads to the undone comments: â€‹https://github.com/django/django/pull/8570#pullrequestreview-113177526 Should I move all tests from m2m_through_regress to many_to_many or some particular tests? â€‹https://github.com/django/django/pull/8570#pullrequestreview-113506649 I see prepared changelogs in comment â€‹https://github.com/django/django/pull/11807#issuecomment-612404721, but don't know where to place them in codebase. Could you explain? Thanks!\nPR has been updated â€‹https://github.com/django/django/pull/13784\nThanks for this patch, however it's not ready for review. Please fix tests and isort.\nReplying to Mariusz Felisiak: Thanks for this patch, however it's not ready for review. Please fix tests and isort. Hello, it seems I need help to fix this error. I'm not sure code from previous contributor is correct and I don't fully understand the subject of this bug (m2m relations). What is better to do: remove label easy pickings and try another bug or someone could help me with fixing this bug? P.S. Please, don't think for nagging. I really don't want to drop the ticket silently and want to continue to contribute at the same time. Thanks in advance with your advice how best to proceed.\nI would like to look at code and try to improve the patch.\nReplying to Pavel Druzhinin: Replying to Mariusz Felisiak: Thanks for this patch, however it's not ready for review. Please fix tests and isort. Hello, it seems I need help to fix this error. I'm not sure code from previous contributor is correct and I don't fully understand the subject of this bug (m2m relations). What is better to do: remove label easy pickings and try another bug or someone could help me with fixing this bug? P.S. Please, don't think for nagging. I really don't want to drop the ticket silently and want to continue to contribute at the same time. Thanks in advance with your advice how best to proceed. Would you like to carry on with the ticket? I can help you. After reading comments and code my understanding is to make FK reverse working the same way as m2m when id=None, what is done in code, but message is a bit different, it would be good to have similar message in both cases. It will require amend m2m tests as well after update with current django version.\nReplying to raydeal: Replying to Pavel Druzhinin: Replying to Mariusz Felisiak: Thanks for this patch, however it's not ready for review. Please fix tests and isort. Hello, it seems I need help to fix this error. I'm not sure code from previous contributor is correct and I don't fully understand the subject of this bug (m2m relations). What is better to do: remove label easy pickings and try another bug or someone could help me with fixing this bug? P.S. Please, don't think for nagging. I really don't want to drop the ticket silently and want to continue to contribute at the same time. Thanks in advance with your advice how best to proceed. Would you like to carry on with the ticket? I can help you. After reading comments and code my understanding is to make FK reverse working the same way as m2m when id=None, what is done in code, but message is a bit different, it would be good to have similar message in both cases. It will require amend m2m tests as well after update with current django version. you should take over the ticket and create a new PR as it seems he is not able to fix the issue\nReplying to Asif Saifuddin Auvi: Replying to raydeal: Replying to Pavel Druzhinin: Replying to Mariusz Felisiak: Thanks for this patch, however it's not ready for review. Please fix tests and isort. Hello, it seems I need help to fix this error. I'm not sure code from previous contributor is correct and I don't fully understand the subject of this bug (m2m relations). What is better to do: remove label easy pickings and try another bug or someone could help me with fixing this bug? P.S. Please, don't think for nagging. I really don't want to drop the ticket silently and want to continue to contribute at the same time. Thanks in advance with your advice how best to proceed. Would you like to carry on with the ticket? I can help you. After reading comments and code my understanding is to make FK reverse working the same way as m2m when id=None, what is done in code, but message is a bit different, it would be good to have similar message in both cases. It will require amend m2m tests as well after update with current django version. you should take over the ticket and create a new PR as it seems he is not able to fix the issue I agree with this proposal, you could change an assignee. Thanks!\nraydeal if you are currently unable to work on this ticket then you can assign it to me.\nReplying to Ayush Joshi: raydeal if you are currently unable to work on this ticket then you can assign it to me. I am working on the ticket",
  "created_at": "2022-01-14T12:56:39Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_unsaved (null_queries.tests.NullQueriesTests)\", \"test_related_null_to_field_related_managers (many_to_one_null.tests.ManyToOneNullTests)\", \"test_unsaved (many_to_one_null.tests.ManyToOneNullTests)\", \"test_relation_unsaved (many_to_one.tests.ManyToOneTests)\"]",
  "PASS_TO_PASS": "[\"Regression test for the use of None as a query value.\", \"Querying across reverse relations and then another relation should\", \"test_add_efficiency (many_to_one_null.tests.ManyToOneNullTests)\", \"test_assign_clear_related_set (many_to_one_null.tests.ManyToOneNullTests)\", \"test_assign_with_queryset (many_to_one_null.tests.ManyToOneNullTests)\", \"test_clear_efficiency (many_to_one_null.tests.ManyToOneNullTests)\", \"test_created_via_related_set (many_to_one_null.tests.ManyToOneNullTests)\", \"test_created_without_related (many_to_one_null.tests.ManyToOneNullTests)\", \"test_get_related (many_to_one_null.tests.ManyToOneNullTests)\", \"test_related_null_to_field (many_to_one_null.tests.ManyToOneNullTests)\", \"test_related_set (many_to_one_null.tests.ManyToOneNullTests)\", \"test_remove_from_wrong_set (many_to_one_null.tests.ManyToOneNullTests)\", \"test_set (many_to_one_null.tests.ManyToOneNullTests)\", \"test_set_clear_non_bulk (many_to_one_null.tests.ManyToOneNullTests)\", \"test_add (many_to_one.tests.ManyToOneTests)\", \"test_add_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_add_remove_set_by_pk_raises (many_to_one.tests.ManyToOneTests)\", \"test_add_then_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_assign (many_to_one.tests.ManyToOneTests)\", \"test_assign_fk_id_none (many_to_one.tests.ManyToOneTests)\", \"test_assign_fk_id_value (many_to_one.tests.ManyToOneTests)\", \"test_cached_foreign_key_with_to_field_not_cleared_by_save (many_to_one.tests.ManyToOneTests)\", \"Model.save() invalidates stale ForeignKey relations after a primary key\", \"test_clear_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_create (many_to_one.tests.ManyToOneTests)\", \"test_create_relation_with_gettext_lazy (many_to_one.tests.ManyToOneTests)\", \"test_deepcopy_and_circular_references (many_to_one.tests.ManyToOneTests)\", \"test_delete (many_to_one.tests.ManyToOneTests)\", \"test_explicit_fk (many_to_one.tests.ManyToOneTests)\", \"test_fk_assignment_and_related_object_cache (many_to_one.tests.ManyToOneTests)\", \"test_fk_instantiation_outside_model (many_to_one.tests.ManyToOneTests)\", \"test_fk_to_bigautofield (many_to_one.tests.ManyToOneTests)\", \"test_fk_to_smallautofield (many_to_one.tests.ManyToOneTests)\", \"test_get (many_to_one.tests.ManyToOneTests)\", \"test_hasattr_related_object (many_to_one.tests.ManyToOneTests)\", \"test_manager_class_caching (many_to_one.tests.ManyToOneTests)\", \"test_multiple_foreignkeys (many_to_one.tests.ManyToOneTests)\", \"test_related_object (many_to_one.tests.ManyToOneTests)\", \"test_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_reverse_assignment_deprecation (many_to_one.tests.ManyToOneTests)\", \"test_reverse_foreign_key_instance_to_field_caching (many_to_one.tests.ManyToOneTests)\", \"test_reverse_selects (many_to_one.tests.ManyToOneTests)\", \"test_save_fk_after_parent_with_non_numeric_pk_set_on_child (many_to_one.tests.ManyToOneTests)\", \"test_save_nullable_fk_after_parent (many_to_one.tests.ManyToOneTests)\", \"test_save_nullable_fk_after_parent_with_to_field (many_to_one.tests.ManyToOneTests)\", \"test_select_related (many_to_one.tests.ManyToOneTests)\", \"test_selects (many_to_one.tests.ManyToOneTests)\", \"test_set (many_to_one.tests.ManyToOneTests)\", \"test_set_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_values_list_exception (many_to_one.tests.ManyToOneTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.725285",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}