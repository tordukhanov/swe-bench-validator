{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-8263",
  "base_commit": "e4bee4aa1b393d128e3df419d3ff91f8de626f37",
  "patch": "diff --git a/astropy/units/core.py b/astropy/units/core.py\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -2022,8 +2022,10 @@ def __init__(self, scale, bases, powers, decompose=False,\n                         \"bases must be sequence of UnitBase instances\")\n             powers = [validate_power(p) for p in powers]\n \n-        if not decompose and len(bases) == 1:\n-            # Short-cut; with one unit there's nothing to expand and gather.\n+        if not decompose and len(bases) == 1 and powers[0] >= 0:\n+            # Short-cut; with one unit there's nothing to expand and gather,\n+            # as that has happened already when creating the unit.  But do only\n+            # positive powers, since for negative powers we need to re-sort.\n             unit = bases[0]\n             power = powers[0]\n             if power == 1:\n@@ -2038,6 +2040,7 @@ def __init__(self, scale, bases, powers, decompose=False,\n                 self._bases = unit.bases\n                 self._powers = [operator.mul(*resolve_fractions(p, power))\n                                 for p in unit.powers]\n+\n             self._scale = sanitize_scale(scale)\n         else:\n             # Regular case: use inputs as preliminary scale, bases, and powers,\n",
  "test_patch": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -807,3 +807,15 @@ def test_unit_summary_prefixes():\n             assert prefixes == 'No'\n         elif unit.name == 'vox':\n             assert prefixes == 'Yes'\n+\n+\n+def test_raise_to_negative_power():\n+    \"\"\"Test that order of bases is changed when raising to negative power.\n+\n+    Regression test for https://github.com/astropy/astropy/issues/8260\n+    \"\"\"\n+    m2s2 = u.m ** 2 / u.s **2\n+    spm = m2s2 ** (-1 / 2)\n+    assert spm.bases == [u.s, u.m]\n+    assert spm.powers == [1, -1]\n+    assert spm == u.s / u.m\n",
  "problem_statement": "units: 's / m' and 's / m' are not convertible\nTo paraphrase from https://github.com/PlasmaPy/PlasmaPy/issues/587, exceptions like `astropy.units.core.UnitConversionError: 's / m' and 's / m' are not convertible` (and a few other cases with first, second and third powers of second over meter, curiously) started popping up in our travis tests as seen at https://travis-ci.org/PlasmaPy/PlasmaPy/jobs/466396211 .\r\n\r\n\r\n\r\nFor a brief overview, running `python setup.py test -d` and getting into `plasmapy.physics.distribution.Maxwellian_1D`:\r\n\r\n```python\r\n(Pdb) distFunc\r\n<Quantity 5.91632969e-07 s / m>\r\n(Pdb) p u.s / u.m\r\nUnit(\"s / m\")\r\n(Pdb) p distFunc\r\n<Quantity 5.91632969e-07 s / m>\r\n(Pdb) p distFunc.unit\r\nUnit(\"s / m\")\r\n(Pdb) p distFunc.to(u.s / u.m)\r\n*** astropy.units.core.UnitConversionError: 's / m' and 's / m' are not convertible\r\n```\r\n\r\n I've managed to figure out that this is localized to `astropy` 3.1. As suggested by @astrofrog on slack, I ran `git bisect` with `pytest --doctest-modules $PLASMAPY/plasmapy/physics/distribution.py` and I was able to identify the first bad commit as\r\n```git\r\n3a478ca29e86144d6c5a0305dde86169a647ff63 is the first bad commit\r\ncommit 3a478ca29e86144d6c5a0305dde86169a647ff63\r\nAuthor: Marten van Kerkwijk <mhvk@astro.utoronto.ca>\r\nDate:   Thu Jul 12 21:01:28 2018 -0700\r\n\r\n    Further short-cuts for single-unit CompositeUnit initialization.\r\n\r\n:040000 040000 1ba7cb9440215ab641197f91ef1623ad9bb39378 5c02db4ede9146ec12f84f57a0382f4900777544 M      astropy\r\n```\r\n\r\nI'm currently trying to find out the exact cause of this bug in that commit, but I figured it's best to submit this issue here before I accidentally close this tab or something.\n",
  "hints_text": "Thanks for the details. That commit was part of #7649 . cc @mhvk \nHere's a more detailed traceback done from 3a478ca2:\r\n\r\n```python\r\nplasmapy/physics/tests/test_distribution.py:21 (test_astropy)\r\ndef test_astropy():\r\n        v=1*u.m/u.s\r\n>       Maxwellian_1D(v=v, T=30000 * u.K, particle='e', v_drift=0 * u.m / u.s)\r\n\r\nplasmapy/physics/tests/test_distribution.py:24: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nplasmapy/physics/distribution.py:142: in Maxwellian_1D\r\n    return distFunc.to(u.s / u.m)\r\n../../astropy/astropy/units/quantity.py:669: in to\r\n    return self._new_view(self._to_value(unit, equivalencies), unit)\r\n../../astropy/astropy/units/quantity.py:641: in _to_value\r\n    equivalencies=equivalencies)\r\n../../astropy/astropy/units/core.py:984: in to\r\n    return self._get_converter(other, equivalencies=equivalencies)(value)\r\n../../astropy/astropy/units/core.py:915: in _get_converter\r\n    raise exc\r\n../../astropy/astropy/units/core.py:901: in _get_converter\r\n    self, other, self._normalize_equivalencies(equivalencies))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = Unit(\"s / m\"), unit = Unit(\"s / m\"), other = Unit(\"s / m\")\r\nequivalencies = []\r\n\r\n    def _apply_equivalencies(self, unit, other, equivalencies):\r\n        \"\"\"\r\n        Internal function (used from `_get_converter`) to apply\r\n        equivalence pairs.\r\n        \"\"\"\r\n        def make_converter(scale1, func, scale2):\r\n            def convert(v):\r\n                return func(_condition_arg(v) / scale1) * scale2\r\n            return convert\r\n    \r\n        for funit, tunit, a, b in equivalencies:\r\n            if tunit is None:\r\n                try:\r\n                    ratio_in_funit = (other.decompose() /\r\n                                      unit.decompose()).decompose([funit])\r\n                    return make_converter(ratio_in_funit.scale, a, 1.)\r\n                except UnitsError:\r\n                    pass\r\n            else:\r\n                try:\r\n                    scale1 = funit._to(unit)\r\n                    scale2 = tunit._to(other)\r\n                    return make_converter(scale1, a, scale2)\r\n                except UnitsError:\r\n                    pass\r\n                try:\r\n                    scale1 = tunit._to(unit)\r\n                    scale2 = funit._to(other)\r\n                    return make_converter(scale1, b, scale2)\r\n                except UnitsError:\r\n                    pass\r\n    \r\n        def get_err_str(unit):\r\n            unit_str = unit.to_string('unscaled')\r\n            physical_type = unit.physical_type\r\n            if physical_type != 'unknown':\r\n                unit_str = \"'{0}' ({1})\".format(\r\n                    unit_str, physical_type)\r\n            else:\r\n                unit_str = \"'{0}'\".format(unit_str)\r\n            return unit_str\r\n    \r\n        unit_str = get_err_str(unit)\r\n        other_str = get_err_str(other)\r\n    \r\n        raise UnitConversionError(\r\n            \"{0} and {1} are not convertible\".format(\r\n>               unit_str, other_str))\r\nE       astropy.units.core.UnitConversionError: 's / m' and 's / m' are not convertible\r\n\r\n../../astropy/astropy/units/core.py:885: UnitConversionError\r\n```\nI think I've got something. At the end of the problematic `Maxwellian_1D` function, we have a `return distFunc.to(u.s / u.m)`. In what follows, `unit` is the unit of `distFunc` and `other` is `u.s / u.m`:\r\n\r\n```python\r\n(plasmapy-tests) 18:07:23 dominik: ~/Code/PlasmaPy/PlasmaPy $ pytest --doctest-modules --pdb plasmapy/physics/distribution.py  \r\n=========================================================================== test session starts ============================================================================\r\nplatform linux -- Python 3.7.0, pytest-4.0.1, py-1.7.0, pluggy-0.8.0\r\nrootdir: /home/dominik/Code/PlasmaPy/PlasmaPy, inifile: setup.cfg\r\nplugins: remotedata-0.3.1, openfiles-0.3.1, doctestplus-0.2.0, arraydiff-0.2\r\ncollected 8 items                                                                                                                                                          \r\n\r\nplasmapy/physics/distribution.py F\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n098         \\equiv \\frac{1}{\\sqrt{\\pi v_{Th}^2}} e^{-(v - v_{drift})^2 / v_{Th}^2}\r\n099 \r\n100     where :math:`v_{Th} = \\sqrt{2 k_B T / m}` is the thermal speed\r\n101 \r\n102     Examples\r\n103     --------\r\n104     >>> from plasmapy.physics import Maxwellian_1D\r\n105     >>> from astropy import units as u\r\n106     >>> v=1*u.m/u.s\r\n107     >>> Maxwellian_1D(v=v, T=30000 * u.K, particle='e', v_drift=0 * u.m / u.s)\r\nUNEXPECTED EXCEPTION: UnitConversionError(\"'s / m' and 's / m' are not convertible\")\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/dominik/.miniconda3/envs/plasmapy-tests/lib/python3.7/doctest.py\", line 1329, in __run\r\n    compileflags, 1), test.globs)\r\n\r\n  File \"<doctest plasmapy.physics.distribution.Maxwellian_1D[3]>\", line 1, in <module>\r\n\r\n  File \"/home/dominik/Code/PlasmaPy/PlasmaPy/plasmapy/physics/distribution.py\", line 142, in Maxwellian_1D\r\n    return distFunc.to(u.s / u.m)\r\n\r\n  File \"/home/dominik/Code/astropy/astropy/units/quantity.py\", line 669, in to\r\n    return self._new_view(self._to_value(unit, equivalencies), unit)\r\n\r\n  File \"/home/dominik/Code/astropy/astropy/units/quantity.py\", line 641, in _to_value\r\n    equivalencies=equivalencies)\r\n\r\n  File \"/home/dominik/Code/astropy/astropy/units/core.py\", line 984, in to\r\n    return self._get_converter(other, equivalencies=equivalencies)(value)\r\n\r\n  File \"/home/dominik/Code/astropy/astropy/units/core.py\", line 915, in _get_converter\r\n    raise exc\r\n\r\n  File \"/home/dominik/Code/astropy/astropy/units/core.py\", line 901, in _get_converter\r\n    self, other, self._normalize_equivalencies(equivalencies))\r\n\r\n  File \"/home/dominik/Code/astropy/astropy/units/core.py\", line 885, in _apply_equivalencies\r\n    unit_str, other_str))\r\n\r\nastropy.units.core.UnitConversionError: 's / m' and 's / m' are not convertible\r\n\r\n/home/dominik/Code/PlasmaPy/PlasmaPy/plasmapy/physics/distribution.py:107: UnexpectedException\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /home/dominik/Code/astropy/astropy/units/core.py(885)_apply_equivalencies()\r\n-> unit_str, other_str))\r\n(Pdb) p vars(unit)\r\n{'_bases': [Unit(\"m\"), Unit(\"s\")], '_powers': [-1.0, 1.0], '_scale': 1.0, '_decomposed_cache': Unit(\"s / m\")}\r\n(Pdb) p vars(other)\r\n{'_scale': 1.0, '_bases': [Unit(\"s\"), Unit(\"m\")], '_powers': [1, -1], '_decomposed_cache': Unit(\"s / m\")}\r\n```\r\n\r\nSo I think this has something to do with that the fact that `_powers` are **floats** in one case and `int`s in another. It may also have to do with the fact that `_bases` don't have the same ordering and thus you can't simply (as I assume this does somewhere... haven't been able to track it down) cast powers to a common numeric type and check if they agree. They have to be sorted with the same ordering that sorts `_bases` first.\nDamn, and here I just moved the `units` module indicator to `stable`! I'll try to trace down further (the hints certainly are helpful!)\nOK, here is an astropy-only version (proving it is purely an astropy bug):\r\n```\r\nimport astropy.units as u\r\nv2 = 1*u.m**2/u.s**2\r\n(v2 ** (-1/2)).to(u.s/u.m)\r\n# UnitConversionError: 's / m' and 's / m' are not convertible\r\n```\r\n\nThe real problem is that the *order* of the powers is flipped, which means the bases are not sorted.",
  "created_at": "2018-12-11T20:02:50Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"astropy/units/tests/test_units.py::test_raise_to_negative_power\"]",
  "PASS_TO_PASS": "[\"astropy/units/tests/test_units.py::test_getting_started\", \"astropy/units/tests/test_units.py::test_initialisation\", \"astropy/units/tests/test_units.py::test_invalid_power\", \"astropy/units/tests/test_units.py::test_invalid_compare\", \"astropy/units/tests/test_units.py::test_convert\", \"astropy/units/tests/test_units.py::test_convert_fail\", \"astropy/units/tests/test_units.py::test_composite\", \"astropy/units/tests/test_units.py::test_str\", \"astropy/units/tests/test_units.py::test_repr\", \"astropy/units/tests/test_units.py::test_represents\", \"astropy/units/tests/test_units.py::test_units_conversion\", \"astropy/units/tests/test_units.py::test_units_manipulation\", \"astropy/units/tests/test_units.py::test_decompose\", \"astropy/units/tests/test_units.py::test_dimensionless_to_si\", \"astropy/units/tests/test_units.py::test_dimensionless_to_cgs\", \"astropy/units/tests/test_units.py::test_unknown_unit\", \"astropy/units/tests/test_units.py::test_multiple_solidus\", \"astropy/units/tests/test_units.py::test_unknown_unit3\", \"astropy/units/tests/test_units.py::test_invalid_scale\", \"astropy/units/tests/test_units.py::test_cds_power\", \"astropy/units/tests/test_units.py::test_register\", \"astropy/units/tests/test_units.py::test_in_units\", \"astropy/units/tests/test_units.py::test_null_unit\", \"astropy/units/tests/test_units.py::test_unrecognized_equivalency\", \"astropy/units/tests/test_units.py::test_unit_noarg\", \"astropy/units/tests/test_units.py::test_convertible_exception\", \"astropy/units/tests/test_units.py::test_convertible_exception2\", \"astropy/units/tests/test_units.py::test_invalid_type\", \"astropy/units/tests/test_units.py::test_steradian\", \"astropy/units/tests/test_units.py::test_decompose_bases\", \"astropy/units/tests/test_units.py::test_complex_compose\", \"astropy/units/tests/test_units.py::test_equiv_compose\", \"astropy/units/tests/test_units.py::test_empty_compose\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[%]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[A]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[AB]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[AU]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Angstrom]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Ba]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Bi]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Bol]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Bq]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[C]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Ci]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[D]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[F]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Fr]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[G]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Gal]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[H]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Hz]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[J]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Jy]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[K]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[M_e]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[M_p]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[N]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Ohm]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[P]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Pa]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[R]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Ry]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[S]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[ST]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[St]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Sun]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[T]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[V]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[W]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[Wb]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[a]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[abC]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[adu]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[arcmin]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[arcsec]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[bar]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[barn]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[beam]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[bin]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[bit]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[bol]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[byte]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[cd]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[chan]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[cm]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[ct]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[cycle]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[d]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[dB]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[deg]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[deg_C]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[dex]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[dyn]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[eV]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[earthMass]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[earthRad]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[electron]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[erg]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[fortnight]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[g]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[h]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[hourangle]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[jupiterMass]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[jupiterRad]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[k]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[kg]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[l]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[littleh]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[lm]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[lx]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[lyr]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[m]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[mag]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[mas]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[mgy]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[micron]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[min]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[mol]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[pc]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[ph]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[pix]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[rad]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[s]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[sday]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[solLum]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[solMass]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[solRad]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[sr]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[statA]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[t]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[u]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[uas]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[vox]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[wk]\", \"astropy/units/tests/test_units.py::test_compose_roundtrip[yr]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[Ba]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[Bi]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[C]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[D]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[Fr]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[G]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[Gal]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[K]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[P]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[St]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[abC]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[cd]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[cm]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[dyn]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[erg]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[g]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[k]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[mol]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[rad]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[s]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[sr]\", \"astropy/units/tests/test_units.py::test_compose_cgs_to_si[statA]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[%]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[A]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[Angstrom]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[Bq]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[C]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[Ci]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[F]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[H]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[Hz]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[J]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[K]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[N]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[Ohm]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[Pa]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[S]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[T]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[V]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[W]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[Wb]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[a]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[arcmin]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[arcsec]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[bar]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[cd]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[d]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[deg]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[eV]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[fortnight]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[g]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[h]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[hourangle]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[kg]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[l]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[lm]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[lx]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[m]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[mas]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[micron]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[min]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[mol]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[rad]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[s]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[sday]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[sr]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[t]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[uas]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[wk]\", \"astropy/units/tests/test_units.py::test_compose_si_to_cgs[yr]\", \"astropy/units/tests/test_units.py::test_to_cgs\", \"astropy/units/tests/test_units.py::test_decompose_to_cgs\", \"astropy/units/tests/test_units.py::test_compose_issue_579\", \"astropy/units/tests/test_units.py::test_compose_prefix_unit\", \"astropy/units/tests/test_units.py::test_self_compose\", \"astropy/units/tests/test_units.py::test_compose_failed\", \"astropy/units/tests/test_units.py::test_compose_fractional_powers\", \"astropy/units/tests/test_units.py::test_compose_best_unit_first\", \"astropy/units/tests/test_units.py::test_compose_no_duplicates\", \"astropy/units/tests/test_units.py::test_long_int\", \"astropy/units/tests/test_units.py::test_endian_independence\", \"astropy/units/tests/test_units.py::test_radian_base\", \"astropy/units/tests/test_units.py::test_no_as\", \"astropy/units/tests/test_units.py::test_no_duplicates_in_names\", \"astropy/units/tests/test_units.py::test_pickling\", \"astropy/units/tests/test_units.py::test_pickle_unrecognized_unit\", \"astropy/units/tests/test_units.py::test_duplicate_define\", \"astropy/units/tests/test_units.py::test_all_units\", \"astropy/units/tests/test_units.py::test_repr_latex\", \"astropy/units/tests/test_units.py::test_operations_with_strings\", \"astropy/units/tests/test_units.py::test_comparison\", \"astropy/units/tests/test_units.py::test_compose_into_arbitrary_units\", \"astropy/units/tests/test_units.py::test_unit_multiplication_with_string\", \"astropy/units/tests/test_units.py::test_unit_division_by_string\", \"astropy/units/tests/test_units.py::test_sorted_bases\", \"astropy/units/tests/test_units.py::test_megabit\", \"astropy/units/tests/test_units.py::test_composite_unit_get_format_name\", \"astropy/units/tests/test_units.py::test_unicode_policy\", \"astropy/units/tests/test_units.py::test_suggestions\", \"astropy/units/tests/test_units.py::test_fits_hst_unit\", \"astropy/units/tests/test_units.py::test_barn_prefixes\", \"astropy/units/tests/test_units.py::test_fractional_powers\", \"astropy/units/tests/test_units.py::test_inherit_docstrings\", \"astropy/units/tests/test_units.py::test_sqrt_mag\", \"astropy/units/tests/test_units.py::test_composite_compose\", \"astropy/units/tests/test_units.py::test_data_quantities\", \"astropy/units/tests/test_units.py::test_compare_with_none\", \"astropy/units/tests/test_units.py::test_validate_power_detect_fraction\", \"astropy/units/tests/test_units.py::test_complex_fractional_rounding_errors\", \"astropy/units/tests/test_units.py::test_fractional_rounding_errors_simple\", \"astropy/units/tests/test_units.py::test_enable_unit_groupings\", \"astropy/units/tests/test_units.py::test_unit_summary_prefixes\"]",
  "environment_setup_commit": "de88208326dc4cd68be1c3030f4f6d2eddf04520",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.547517",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}