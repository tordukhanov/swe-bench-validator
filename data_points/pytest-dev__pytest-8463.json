{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-8463",
  "base_commit": "35df3e68d57fcd62a60b2a8568b09fa3674f36a8",
  "patch": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -917,8 +917,10 @@ def __init__(\n         :type: PytestPluginManager\n         \"\"\"\n \n+        from .compat import PathAwareHookProxy\n+\n         self.trace = self.pluginmanager.trace.root.get(\"config\")\n-        self.hook = self.pluginmanager.hook\n+        self.hook = PathAwareHookProxy(self.pluginmanager.hook)\n         self._inicache: Dict[str, Any] = {}\n         self._override_ini: Sequence[str] = ()\n         self._opt2dest: Dict[str, str] = {}\ndiff --git a/src/_pytest/config/compat.py b/src/_pytest/config/compat.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/_pytest/config/compat.py\n@@ -0,0 +1,62 @@\n+import functools\n+import warnings\n+from pathlib import Path\n+from typing import Optional\n+\n+from ..compat import LEGACY_PATH\n+from ..deprecated import HOOK_LEGACY_PATH_ARG\n+from _pytest.nodes import _imply_path\n+\n+# hookname: (Path, LEGACY_PATH)\n+imply_paths_hooks = {\n+    \"pytest_ignore_collect\": (\"fspath\", \"path\"),\n+    \"pytest_collect_file\": (\"fspath\", \"path\"),\n+    \"pytest_pycollect_makemodule\": (\"fspath\", \"path\"),\n+    \"pytest_report_header\": (\"startpath\", \"startdir\"),\n+    \"pytest_report_collectionfinish\": (\"startpath\", \"startdir\"),\n+}\n+\n+\n+class PathAwareHookProxy:\n+    \"\"\"\n+    this helper wraps around hook callers\n+    until pluggy supports fixingcalls, this one will do\n+\n+    it currently doesnt return full hook caller proxies for fixed hooks,\n+    this may have to be changed later depending on bugs\n+    \"\"\"\n+\n+    def __init__(self, hook_caller):\n+        self.__hook_caller = hook_caller\n+\n+    def __dir__(self):\n+        return dir(self.__hook_caller)\n+\n+    def __getattr__(self, key, _wraps=functools.wraps):\n+        hook = getattr(self.__hook_caller, key)\n+        if key not in imply_paths_hooks:\n+            self.__dict__[key] = hook\n+            return hook\n+        else:\n+            path_var, fspath_var = imply_paths_hooks[key]\n+\n+            @_wraps(hook)\n+            def fixed_hook(**kw):\n+\n+                path_value: Optional[Path] = kw.pop(path_var, None)\n+                fspath_value: Optional[LEGACY_PATH] = kw.pop(fspath_var, None)\n+                if fspath_value is not None:\n+                    warnings.warn(\n+                        HOOK_LEGACY_PATH_ARG.format(\n+                            pylib_path_arg=fspath_var, pathlib_path_arg=path_var\n+                        ),\n+                        stacklevel=2,\n+                    )\n+                path_value, fspath_value = _imply_path(path_value, fspath_value)\n+                kw[path_var] = path_value\n+                kw[fspath_var] = fspath_value\n+                return hook(**kw)\n+\n+            fixed_hook.__name__ = key\n+            self.__dict__[key] = fixed_hook\n+            return fixed_hook\ndiff --git a/src/_pytest/deprecated.py b/src/_pytest/deprecated.py\n--- a/src/_pytest/deprecated.py\n+++ b/src/_pytest/deprecated.py\n@@ -95,6 +95,12 @@\n     \"see https://docs.pytest.org/en/latest/deprecations.html#node-fspath-in-favor-of-pathlib-and-node-path\",\n )\n \n+HOOK_LEGACY_PATH_ARG = UnformattedWarning(\n+    PytestDeprecationWarning,\n+    \"The ({pylib_path_arg}: py.path.local) argument is deprecated, please use ({pathlib_path_arg}: pathlib.Path)\\n\"\n+    \"see https://docs.pytest.org/en/latest/deprecations.html\"\n+    \"#py-path-local-arguments-for-hooks-replaced-with-pathlib-path\",\n+)\n # You want to make some `__init__` or function \"private\".\n #\n #   def my_private_function(some, args):\ndiff --git a/src/_pytest/main.py b/src/_pytest/main.py\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -551,7 +551,9 @@ def gethookproxy(self, fspath: \"os.PathLike[str]\"):\n         remove_mods = pm._conftest_plugins.difference(my_conftestmodules)\n         if remove_mods:\n             # One or more conftests are not in use at this fspath.\n-            proxy = FSHookProxy(pm, remove_mods)\n+            from .config.compat import PathAwareHookProxy\n+\n+            proxy = PathAwareHookProxy(FSHookProxy(pm, remove_mods))\n         else:\n             # All plugins are active for this fspath.\n             proxy = self.config.hook\n@@ -561,9 +563,8 @@ def _recurse(self, direntry: \"os.DirEntry[str]\") -> bool:\n         if direntry.name == \"__pycache__\":\n             return False\n         fspath = Path(direntry.path)\n-        path = legacy_path(fspath)\n         ihook = self.gethookproxy(fspath.parent)\n-        if ihook.pytest_ignore_collect(fspath=fspath, path=path, config=self.config):\n+        if ihook.pytest_ignore_collect(fspath=fspath, config=self.config):\n             return False\n         norecursepatterns = self.config.getini(\"norecursedirs\")\n         if any(fnmatch_ex(pat, fspath) for pat in norecursepatterns):\n@@ -573,7 +574,6 @@ def _recurse(self, direntry: \"os.DirEntry[str]\") -> bool:\n     def _collectfile(\n         self, fspath: Path, handle_dupes: bool = True\n     ) -> Sequence[nodes.Collector]:\n-        path = legacy_path(fspath)\n         assert (\n             fspath.is_file()\n         ), \"{!r} is not a file (isdir={!r}, exists={!r}, islink={!r})\".format(\n@@ -581,9 +581,7 @@ def _collectfile(\n         )\n         ihook = self.gethookproxy(fspath)\n         if not self.isinitpath(fspath):\n-            if ihook.pytest_ignore_collect(\n-                fspath=fspath, path=path, config=self.config\n-            ):\n+            if ihook.pytest_ignore_collect(fspath=fspath, config=self.config):\n                 return ()\n \n         if handle_dupes:\n@@ -595,7 +593,7 @@ def _collectfile(\n                 else:\n                     duplicate_paths.add(fspath)\n \n-        return ihook.pytest_collect_file(fspath=fspath, path=path, parent=self)  # type: ignore[no-any-return]\n+        return ihook.pytest_collect_file(fspath=fspath, parent=self)  # type: ignore[no-any-return]\n \n     @overload\n     def perform_collect(\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -188,9 +188,7 @@ def pytest_pyfunc_call(pyfuncitem: \"Function\") -> Optional[object]:\n     return True\n \n \n-def pytest_collect_file(\n-    fspath: Path, path: LEGACY_PATH, parent: nodes.Collector\n-) -> Optional[\"Module\"]:\n+def pytest_collect_file(fspath: Path, parent: nodes.Collector) -> Optional[\"Module\"]:\n     if fspath.suffix == \".py\":\n         if not parent.session.isinitpath(fspath):\n             if not path_matches_patterns(\n@@ -198,9 +196,7 @@ def pytest_collect_file(\n             ):\n                 return None\n         ihook = parent.session.gethookproxy(fspath)\n-        module: Module = ihook.pytest_pycollect_makemodule(\n-            fspath=fspath, path=path, parent=parent\n-        )\n+        module: Module = ihook.pytest_pycollect_makemodule(fspath=fspath, parent=parent)\n         return module\n     return None\n \n@@ -675,9 +671,8 @@ def _recurse(self, direntry: \"os.DirEntry[str]\") -> bool:\n         if direntry.name == \"__pycache__\":\n             return False\n         fspath = Path(direntry.path)\n-        path = legacy_path(fspath)\n         ihook = self.session.gethookproxy(fspath.parent)\n-        if ihook.pytest_ignore_collect(fspath=fspath, path=path, config=self.config):\n+        if ihook.pytest_ignore_collect(fspath=fspath, config=self.config):\n             return False\n         norecursepatterns = self.config.getini(\"norecursedirs\")\n         if any(fnmatch_ex(pat, fspath) for pat in norecursepatterns):\n@@ -687,7 +682,6 @@ def _recurse(self, direntry: \"os.DirEntry[str]\") -> bool:\n     def _collectfile(\n         self, fspath: Path, handle_dupes: bool = True\n     ) -> Sequence[nodes.Collector]:\n-        path = legacy_path(fspath)\n         assert (\n             fspath.is_file()\n         ), \"{!r} is not a file (isdir={!r}, exists={!r}, islink={!r})\".format(\n@@ -695,9 +689,7 @@ def _collectfile(\n         )\n         ihook = self.session.gethookproxy(fspath)\n         if not self.session.isinitpath(fspath):\n-            if ihook.pytest_ignore_collect(\n-                fspath=fspath, path=path, config=self.config\n-            ):\n+            if ihook.pytest_ignore_collect(fspath=fspath, config=self.config):\n                 return ()\n \n         if handle_dupes:\n@@ -709,7 +701,7 @@ def _collectfile(\n                 else:\n                     duplicate_paths.add(fspath)\n \n-        return ihook.pytest_collect_file(fspath=fspath, path=path, parent=self)  # type: ignore[no-any-return]\n+        return ihook.pytest_collect_file(fspath=fspath, parent=self)  # type: ignore[no-any-return]\n \n     def collect(self) -> Iterable[Union[nodes.Item, nodes.Collector]]:\n         this_path = self.path.parent\ndiff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -716,7 +716,7 @@ def pytest_sessionstart(self, session: \"Session\") -> None:\n                 msg += \" -- \" + str(sys.executable)\n             self.write_line(msg)\n             lines = self.config.hook.pytest_report_header(\n-                config=self.config, startpath=self.startpath, startdir=self.startdir\n+                config=self.config, startpath=self.startpath\n             )\n             self._write_report_lines_from_hooks(lines)\n \n@@ -753,7 +753,6 @@ def pytest_collection_finish(self, session: \"Session\") -> None:\n         lines = self.config.hook.pytest_report_collectionfinish(\n             config=self.config,\n             startpath=self.startpath,\n-            startdir=self.startdir,\n             items=session.items,\n         )\n         self._write_report_lines_from_hooks(lines)\n",
  "test_patch": "diff --git a/testing/deprecated_test.py b/testing/deprecated_test.py\n--- a/testing/deprecated_test.py\n+++ b/testing/deprecated_test.py\n@@ -1,10 +1,13 @@\n import re\n+import sys\n import warnings\n from unittest import mock\n \n import pytest\n from _pytest import deprecated\n+from _pytest.compat import legacy_path\n from _pytest.pytester import Pytester\n+from pytest import PytestDeprecationWarning\n \n \n @pytest.mark.parametrize(\"attribute\", pytest.collect.__all__)  # type: ignore\n@@ -153,3 +156,25 @@ def test_raising_unittest_skiptest_during_collection_is_deprecated(\n             \"*PytestDeprecationWarning: Raising unittest.SkipTest*\",\n         ]\n     )\n+\n+\n+@pytest.mark.parametrize(\"hooktype\", [\"hook\", \"ihook\"])\n+def test_hookproxy_warnings_for_fspath(tmp_path, hooktype, request):\n+    path = legacy_path(tmp_path)\n+\n+    PATH_WARN_MATCH = r\".*path: py\\.path\\.local\\) argument is deprecated, please use \\(fspath: pathlib\\.Path.*\"\n+    if hooktype == \"ihook\":\n+        hooks = request.node.ihook\n+    else:\n+        hooks = request.config.hook\n+\n+    with pytest.warns(PytestDeprecationWarning, match=PATH_WARN_MATCH) as r:\n+        l1 = sys._getframe().f_lineno\n+        hooks.pytest_ignore_collect(config=request.config, path=path, fspath=tmp_path)\n+        l2 = sys._getframe().f_lineno\n+\n+    (record,) = r\n+    assert record.filename == __file__\n+    assert l1 < record.lineno < l2\n+\n+    hooks.pytest_ignore_collect(config=request.config, fspath=tmp_path)\n",
  "problem_statement": "resolve startpath/fspath parameter regressions\nthe introductin of various `startpath`/`fspath` hooks in the hookspecs\r\n\r\n as a non-optional and non-inmplied parameter is practically a api breaking change\r\n\r\nback in 2018 i decoded to close the upstream issue in https://github.com/pytest-dev/pluggy/issues/15 as its pretty much insanely complex to alter the hooks where callers and callees are not under good control\r\n\r\nthe pr adding them is #8144\r\n\r\nCC @bluetech \r\n\r\ni believe/fear the correct solution would be to deprecate the old hook names, introduce a new hook version and have invoking/implementing the old one trigger a deprecation warning\nWrong color formatting output with FAILED test.\n**Context**\r\nI'm using Pytest to test a Flask webapp, when I execute my tests there is one of them that FAILS at the middel of the sequence, so the format of the following text will be red instead of green when they PASS.\r\n\r\n**Steps to reproduce**: \r\n1. Create a set of tests.\r\n2. Place one test that will **fail** in order to be executed at the middle of the test execution.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\nWheter the test fails the color will be red and if it's a pass, the color will be green.\r\n\r\n**Screenshots**\r\n[Here's a screenshot of the issue](https://imgur.com/oqGbbme.png)\r\n[VS Code detailed information](https://imgur.com/FKBo6Yl.png)\r\n\r\n**Environment:**\r\n - OS: Xubuntu 20.10\r\n - Python Version 3.8.6\r\n - Pytest version 6.2.2\r\n - Flask version 1.1.2\r\n\r\n**Additional context**\r\nI'm using a Terminal hosted by VS Code (v1.53.2)\r\n\r\nPS: I would love to contribute as it's my first ever issue reported but I can't figure out at the source code where is this coded.\n",
  "hints_text": "Sorry I missed this issue.\r\n\r\nSo if I understand correctly, the issue is about *invoking* the hooks, rather than implementing them.\r\n\r\nThe hooks affected are:\r\n\r\n- `pytest_ignore_collect`\r\n- `pytest_collect_file`\r\n- `pytest_pycollect_makemodule`\r\n- `pytest_report_header`\r\n- `pytest_report_collectionfinish`\r\n\r\nBefore we go and try to revert the changes (or just accept them), I'd like to audit plugins to see if this is an issue in practice, i.e. if there are plugins which actually *invoke* these, and how difficult it will be to make them compatible. Usually of course, only pytest invokes its hooks. I'll try to do it soon. If you already know of any plugins which do this let me know.\ni'm aware of at least `pytest_sugar`\r\n\r\ni couldn't do a deeper audit myself yet\r\n\r\ni would consider it fitting to do a major version bump for this one and just calling it a day\r\n\r\ncc @nicoddemus for opinions on that\r\n\r\nof course pr's for plugins we know of should also help\nI looked at my corpus of 680 plugins and found 6 cases:\r\n\r\n```\r\npytest-mutagen/src/pytest_mutagen/plugin.py\r\n48:            return ihook.pytest_pycollect_makemodule(path=path, parent=parent)\r\n\r\npytest-sugar/pytest_sugar.py\r\n250:        lines = self.config.hook.pytest_report_header(\r\n\r\npytest-tldr/pytest_tldr.py\r\n158:            headers = self.config.hook.pytest_report_header(\r\n\r\npytest-idapro/pytest_idapro/plugin_internal.py\r\n180:        self.config.hook.pytest_report_header(config=self.config,\r\n\r\npytest-it/src/pytest_it/plugin.py\r\n257:        lines = self.config.hook.pytest_report_collectionfinish(\r\n\r\npytest-litf/pytest_litf.py\r\n241:        lines = self.config.hook.pytest_report_collectionfinish(\r\n```\r\n\r\nI think I can send PRs for them.\r\n\r\nBesides, I think we shouldn't guarantee API stability for *invoking* hooks. Seems to me pluggy was carefully designed to allow it, and that it would be an overall negative to freeze all hooks.\r\n\r\nI don't think this should require a major bump.\r\n\r\nWDYT?\nits a major release, we break apis\r\n\r\nas for pluggy, the current suggestion is **new api gets **new hook name**, deprecating the old hook name\r\npluggy was not carefully designed to allow it, in fact when we tried to layer it into pluggy it turned out to be very complex\r\n\r\nin my book new api same hook name is a  breaking change\npytest never says that invoking its own hooks is stable API. Hook-invoking is not documented anywhere, except in the \"write your hooks\" section. It seems to me an unreasonable backward compatibility burden to guarantee this.\r\n\r\nAdvantages of defining new hooks:\r\n- Plugins which invoke the modified hooks keep working without update.\r\n\r\nDisadvantages:\r\n- Defining multiple hooks which do the same thing breaks things like `try_first` and hook wrappers, which *are* covered by stability guarantees.\r\n- Adds mental overhead for plugin authors.\r\n- Causes forward compat problems.\r\n\r\nOn balance, I think we shouldn't define new hooks, and we should document that invoking our own hooks has this compat hazard.\ni agree that we shouldn't  define new hooks, but let me be very clear, this is a breaking api change, it must get a major bump.\r\nits an exposed api that never had a potential instability as part of a external contract\r\n\r\nif we had hook invocation as a private property, i'd agree with the minor bump, but it is a public attribute, it gets a major bump\r\n\n> i agree that we shouldn't define new hooks\r\n\r\nThanks.\r\n\r\n> its an exposed api that never had a potential instability as part of a external contract\r\n\r\nThis part I don't really agree with. I think the rule for this case should be \"we never said it was public, therefore it's not\", and not \"we never said it was *not* public, therefore it is\".\r\n\r\nIt is really difficult to develop a project if you have to assume all internal details are public-by-default, especially in Python. So when a plugin is using an undocumented API, they have to be prepared for breakage.\r\n\r\nIt will also be very difficult to develop pytest if you have to assume that core hooks may be invoked by external plugins. When I develop I assume that core hooks are only invoked by core.\r\n\r\nThe reason I'm against just doing a major version bump is that it will be a major discouragement from ever adding new args to hooks, which will hamper making improvements.\r\n\r\n> if we had hook invocation as a private property, i'd agree with the minor bump, but it is a public attribute, it gets a major bump\r\n\r\nThe hook invocation mechanism must be public because users are free to define their own hooks.\nI see nothing wrong with major version bumps, even many times\n\nAgain we break a api that is incidentally exposed as public, so its a major version, i don't see any room to argue on this\n\nThe only alternative I'm open to discuss there is using calver instead \n\n\n\nHey folks,\r\n\r\nI don't see a problem with doing a major bump, even if we use that opportunity to say that from that version onward, calling those hooks is subject to future breakages, so be prepared. We don't have to consider that just because we are assuming a breaking API change and doing a major bump, that forever now we need to keep the same API stable. We can do a major bump, break the API, and mark it as unstable. One approach doesn't exclude the other.\r\n\r\nMoving forward, do we want to mark those hooks as \"unstable\" to be called by plugins?\r\n\r\n\ni really don't like the idea of \"unstable apis\" there - no matter how you document unstable, its going to eats some peoples code\r\n\r\ni'd rather do a major release when we have to change a hook, \nSo what I'm going to do it finish the existing changed I made, revert 592b32bd69cb43aace8cd5525fa0b3712ee767be so it doesn't block the release or force a major release, and write a comment on what work remains to get rid of py.path.\n@bluetech again, its absolutely fine to do a major release and i don't like to undo this work !\nIn situations like this I always prefer to revert first to fix the blocker instead of it being a fait accompli...\nI don't follow what the blocker is then \nI'm also OK with releasing 7.0.0rc1.\r\n\r\nHowever I worry this problem is not documented anywhere. We should add a backward incompatible note, and also a big changelog entry, before releasing anything: users are often upset by breakages, even more so if there's no communication of the rationale or how to fix the breakage.\n> I don't follow what the blocker is then\r\n\r\nI think for 7.x we should have the py.path (pending)deprecation situation in order, which is not the case yet. In the meanwhile it would be rude of me to leave master in an un-realeasable state.\n> I think for 7.x we should have the py.path (pending)deprecation situation in order\r\n\r\nAhh I see thanks. But what do you see as \"pending\"? I think we might have different perceptions here.\nMostly what I wrote here: https://github.com/pytest-dev/pytest/pull/8251#issuecomment-796852908\nAhh thanks, I missed that. Can we turn that into an issue?\r\n\r\n\r\n\r\n\n@bluetech @nicoddemus i have an idea for a potential solution,\r\n\r\nim wireing up a POC now that will get us backward-compatibility\nThis is intended, so that it's clear that something failed in the past even with longer outputs.",
  "created_at": "2021-03-18T22:18:16Z",
  "version": "6.3",
  "FAIL_TO_PASS": "[\"testing/deprecated_test.py::test_hookproxy_warnings_for_fspath[hook]\", \"testing/deprecated_test.py::test_hookproxy_warnings_for_fspath[ihook]\"]",
  "PASS_TO_PASS": "[\"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Collector]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Module]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Function]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Instance]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Session]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Item]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Class]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[File]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[_fillfuncargs]\", \"testing/deprecated_test.py::test_fillfuncargs_is_deprecated\", \"testing/deprecated_test.py::test_fillfixtures_is_deprecated\", \"testing/deprecated_test.py::test_yield_fixture_is_deprecated\", \"testing/deprecated_test.py::test_private_is_deprecated\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_capturelog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_catchlog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_faulthandler]\", \"testing/deprecated_test.py::test_minus_k_dash_is_deprecated\", \"testing/deprecated_test.py::test_minus_k_colon_is_deprecated\", \"testing/deprecated_test.py::test_fscollector_gethookproxy_isinitpath\", \"testing/deprecated_test.py::test_strict_option_is_deprecated\", \"testing/deprecated_test.py::test_raising_unittest_skiptest_during_collection_is_deprecated\"]",
  "environment_setup_commit": "634312b14a45db8d60d72016e01294284e3a18d4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.943409",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}