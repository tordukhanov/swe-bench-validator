{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13280",
  "base_commit": "face9daf045846bb0a39bfb396432c8685570cdd",
  "patch": "diff --git a/sklearn/naive_bayes.py b/sklearn/naive_bayes.py\n--- a/sklearn/naive_bayes.py\n+++ b/sklearn/naive_bayes.py\n@@ -460,8 +460,14 @@ def _update_class_log_prior(self, class_prior=None):\n                                  \" classes.\")\n             self.class_log_prior_ = np.log(class_prior)\n         elif self.fit_prior:\n+            with warnings.catch_warnings():\n+                # silence the warning when count is 0 because class was not yet\n+                # observed\n+                warnings.simplefilter(\"ignore\", RuntimeWarning)\n+                log_class_count = np.log(self.class_count_)\n+\n             # empirical prior, with sample_weight taken into account\n-            self.class_log_prior_ = (np.log(self.class_count_) -\n+            self.class_log_prior_ = (log_class_count -\n                                      np.log(self.class_count_.sum()))\n         else:\n             self.class_log_prior_ = np.full(n_classes, -np.log(n_classes))\n",
  "test_patch": "diff --git a/sklearn/tests/test_naive_bayes.py b/sklearn/tests/test_naive_bayes.py\n--- a/sklearn/tests/test_naive_bayes.py\n+++ b/sklearn/tests/test_naive_bayes.py\n@@ -18,6 +18,7 @@\n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.testing import assert_greater\n from sklearn.utils.testing import assert_warns\n+from sklearn.utils.testing import assert_no_warnings\n \n from sklearn.naive_bayes import GaussianNB, BernoulliNB\n from sklearn.naive_bayes import MultinomialNB, ComplementNB\n@@ -244,6 +245,33 @@ def check_partial_fit(cls):\n     assert_array_equal(clf1.feature_count_, clf3.feature_count_)\n \n \n+def test_mnb_prior_unobserved_targets():\n+    # test smoothing of prior for yet unobserved targets\n+\n+    # Create toy training data\n+    X = np.array([[0, 1], [1, 0]])\n+    y = np.array([0, 1])\n+\n+    clf = MultinomialNB()\n+\n+    assert_no_warnings(\n+        clf.partial_fit, X, y, classes=[0, 1, 2]\n+    )\n+\n+    assert clf.predict([[0, 1]]) == 0\n+    assert clf.predict([[1, 0]]) == 1\n+    assert clf.predict([[1, 1]]) == 0\n+\n+    # add a training example with previously unobserved class\n+    assert_no_warnings(\n+        clf.partial_fit, [[1, 1]], [2]\n+    )\n+\n+    assert clf.predict([[0, 1]]) == 0\n+    assert clf.predict([[1, 0]]) == 1\n+    assert clf.predict([[1, 1]]) == 2\n+\n+\n @pytest.mark.parametrize(\"cls\", [MultinomialNB, BernoulliNB])\n def test_discretenb_partial_fit(cls):\n     check_partial_fit(cls)\n",
  "problem_statement": "partial_fit does not account for unobserved target values when fitting priors to data\nMy understanding is that priors should be fitted to the data using observed target frequencies **and a variant of [Laplace smoothing](https://en.wikipedia.org/wiki/Additive_smoothing) to avoid assigning 0 probability to targets  not yet observed.**\r\n\r\n\r\nIt seems the implementation of `partial_fit` does not account for unobserved targets at the time of the first training batch when computing priors.\r\n\r\n```python\r\n    import numpy as np\r\n    import sklearn\r\n    from sklearn.naive_bayes import MultinomialNB\r\n    \r\n    print('scikit-learn version:', sklearn.__version__)\r\n    \r\n    # Create toy training data\r\n    X = np.random.randint(5, size=(6, 100))\r\n    y = np.array([1, 2, 3, 4, 5, 6])\r\n    \r\n    # All possible targets\r\n    classes = np.append(y, 7)\r\n    \r\n    clf = MultinomialNB()\r\n    clf.partial_fit(X, y, classes=classes)\r\n```\r\n-----------------------------------\r\n    /home/skojoian/.local/lib/python3.6/site-packages/sklearn/naive_bayes.py:465: RuntimeWarning: divide by zero encountered in log\r\n      self.class_log_prior_ = (np.log(self.class_count_) -\r\n    scikit-learn version: 0.20.2\r\n\r\nThis behavior is not very intuitive to me. It seems `partial_fit` requires `classes` for the right reason, but doesn't actually offset target frequencies to account for unobserved targets.\n",
  "hints_text": "I can reproduce the bug. Thanks for reporting. I will work on the fix.",
  "created_at": "2019-02-26T14:08:41Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_naive_bayes.py::test_mnb_prior_unobserved_targets\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_naive_bayes.py::test_gnb\", \"sklearn/tests/test_naive_bayes.py::test_gnb_prior\", \"sklearn/tests/test_naive_bayes.py::test_gnb_sample_weight\", \"sklearn/tests/test_naive_bayes.py::test_gnb_neg_priors\", \"sklearn/tests/test_naive_bayes.py::test_gnb_priors\", \"sklearn/tests/test_naive_bayes.py::test_gnb_priors_sum_isclose\", \"sklearn/tests/test_naive_bayes.py::test_gnb_wrong_nb_priors\", \"sklearn/tests/test_naive_bayes.py::test_gnb_prior_greater_one\", \"sklearn/tests/test_naive_bayes.py::test_gnb_prior_large_bias\", \"sklearn/tests/test_naive_bayes.py::test_check_update_with_no_data\", \"sklearn/tests/test_naive_bayes.py::test_gnb_pfit_wrong_nb_features\", \"sklearn/tests/test_naive_bayes.py::test_discrete_prior\", \"sklearn/tests/test_naive_bayes.py::test_mnnb[dense]\", \"sklearn/tests/test_naive_bayes.py::test_mnnb[sparse]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_partial_fit[MultinomialNB]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_partial_fit[BernoulliNB]\", \"sklearn/tests/test_naive_bayes.py::test_gnb_partial_fit\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_pickle[BernoulliNB]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_pickle[MultinomialNB]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_pickle[GaussianNB]\", \"sklearn/tests/test_naive_bayes.py::test_input_check_fit[BernoulliNB]\", \"sklearn/tests/test_naive_bayes.py::test_input_check_fit[MultinomialNB]\", \"sklearn/tests/test_naive_bayes.py::test_input_check_fit[GaussianNB]\", \"sklearn/tests/test_naive_bayes.py::test_input_check_partial_fit[BernoulliNB]\", \"sklearn/tests/test_naive_bayes.py::test_input_check_partial_fit[MultinomialNB]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_predict_proba\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_uniform_prior[BernoulliNB]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_uniform_prior[MultinomialNB]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_provide_prior[BernoulliNB]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_provide_prior[MultinomialNB]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_provide_prior_with_partial_fit[BernoulliNB]\", \"sklearn/tests/test_naive_bayes.py::test_discretenb_provide_prior_with_partial_fit[MultinomialNB]\", \"sklearn/tests/test_naive_bayes.py::test_sample_weight_multiclass[BernoulliNB]\", \"sklearn/tests/test_naive_bayes.py::test_sample_weight_multiclass[MultinomialNB]\", \"sklearn/tests/test_naive_bayes.py::test_sample_weight_mnb\", \"sklearn/tests/test_naive_bayes.py::test_coef_intercept_shape\", \"sklearn/tests/test_naive_bayes.py::test_check_accuracy_on_digits\", \"sklearn/tests/test_naive_bayes.py::test_feature_log_prob_bnb\", \"sklearn/tests/test_naive_bayes.py::test_bnb\", \"sklearn/tests/test_naive_bayes.py::test_cnb\", \"sklearn/tests/test_naive_bayes.py::test_naive_bayes_scale_invariance\", \"sklearn/tests/test_naive_bayes.py::test_alpha\", \"sklearn/tests/test_naive_bayes.py::test_alpha_vector\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.991699",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}