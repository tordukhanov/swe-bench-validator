{
  "repo": "django/django",
  "instance_id": "django__django-14960",
  "base_commit": "4ff500f2948bfc332b3f4159021cad06e91943d3",
  "patch": "diff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py\n--- a/django/contrib/auth/management/commands/createsuperuser.py\n+++ b/django/contrib/auth/management/commands/createsuperuser.py\n@@ -124,6 +124,8 @@ def handle(self, *args, **options):\n                 for field_name in self.UserModel.REQUIRED_FIELDS:\n                     field = self.UserModel._meta.get_field(field_name)\n                     user_data[field_name] = options[field_name]\n+                    if user_data[field_name] is not None:\n+                        user_data[field_name] = field.clean(user_data[field_name], None)\n                     while user_data[field_name] is None:\n                         message = self._get_input_message(field)\n                         input_value = self.get_input_data(field, message)\n",
  "test_patch": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -531,6 +531,66 @@ def test(self):\n \n         test(self)\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')\n+    def test_validate_fk(self):\n+        email = Email.objects.create(email='mymail@gmail.com')\n+        Group.objects.all().delete()\n+        nonexistent_group_id = 1\n+        msg = f'group instance with id {nonexistent_group_id} does not exist.'\n+\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command(\n+                'createsuperuser',\n+                interactive=False,\n+                username=email.pk,\n+                email=email.email,\n+                group=nonexistent_group_id,\n+                verbosity=0,\n+            )\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')\n+    def test_validate_fk_environment_variable(self):\n+        email = Email.objects.create(email='mymail@gmail.com')\n+        Group.objects.all().delete()\n+        nonexistent_group_id = 1\n+        msg = f'group instance with id {nonexistent_group_id} does not exist.'\n+\n+        with mock.patch.dict(\n+            os.environ,\n+            {'DJANGO_SUPERUSER_GROUP': str(nonexistent_group_id)},\n+        ):\n+            with self.assertRaisesMessage(CommandError, msg):\n+                call_command(\n+                    'createsuperuser',\n+                    interactive=False,\n+                    username=email.pk,\n+                    email=email.email,\n+                    verbosity=0,\n+                )\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')\n+    def test_validate_fk_via_option_interactive(self):\n+        email = Email.objects.create(email='mymail@gmail.com')\n+        Group.objects.all().delete()\n+        nonexistent_group_id = 1\n+        msg = f'group instance with id {nonexistent_group_id} does not exist.'\n+\n+        @mock_inputs({\n+            'password': 'nopasswd',\n+            'Username (Email.id): ': email.pk,\n+            'Email (Email.email): ': email.email,\n+        })\n+        def test(self):\n+            with self.assertRaisesMessage(CommandError, msg):\n+                call_command(\n+                    'createsuperuser',\n+                    group=nonexistent_group_id,\n+                    stdin=MockTTY(),\n+                    verbosity=0,\n+                )\n+\n+        test(self)\n+\n     @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithM2m')\n     def test_fields_with_m2m(self):\n         new_io = StringIO()\n",
  "problem_statement": "createsuperuser does not validate REQUIRED_FIELDS values in interactive mode when passed by command-line.\nDescription\n\t\ncreatesuperuser command will alway perform a field validation using field.clean when creating a new user. In non-interactive mode, it is done ​here. In interactive mode, it is performed in ​`get_input_data` when the value is requested from input. But if the valued was passed using -- command, the field is never validated.\nThe consequence is it ends up passing a non-validated string to ​`UserManager.create_superuser` instead of a integer corresponding to an actual PK in DB.\n",
  "hints_text": "​PR\nIn da266b3: Refs #29628, Refs #33178 -- Made createsuperuser validate password against required fields passed in options.\nIn 224fa0bc: [4.0.x] Refs #29628, Refs #33178 -- Made createsuperuser validate password against required fields passed in options. Backport of da266b3c5ca4bb7581d7a3cc51bc820e78cf64f0 from main",
  "created_at": "2021-10-08T13:34:21Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_validate_fk_via_option_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\"]",
  "PASS_TO_PASS": "[\"test_input_not_found (auth_tests.test_management.MockInputTests)\", \"test_actual_implementation (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_existing (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_i18n (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_simple (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_with_database (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"changepassword --database should operate on the specified DB.\", \"test_createsuperuser_command_suggested_username_with_database_option (auth_tests.test_management.MultiDBCreatesuperuserTestCase)\", \"createsuperuser --database should operate on the specified DB.\", \"`post_migrate` handler ordering isn't guaranteed. Simulate a case\", \"test_default_permissions (auth_tests.test_management.CreatePermissionsTests)\", \"A proxy model's permissions use its own content type rather than the\", \"#24075 - Permissions shouldn't be created or deleted if the ContentType\", \"test_get_pass (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_get_pass_no_input (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_nonexistent_username (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"A CommandError should be raised if the user enters in passwords which\", \"The system username is used if --username isn't provided.\", \"Executing the changepassword management command should change joe's password\", \"#21627 -- Executing the changepassword management command should allow\", \"A CommandError should be thrown by handle() if the user enters in\", \"Check the operation of the createsuperuser management command\", \"Creation fails if --username is blank.\", \"test_blank_username_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"createsuperuser uses a default username when one isn't provided.\", \"test_email_in_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_environment_variable_m2m_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username already exists.\", \"call_command() gets username='janet' and interactive=True.\", \"test_fields_with_fk (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_fk_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_fk_via_option_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_and_through (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_interactive_blank (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username fails validation.\", \"test_keyboard_interrupt (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_no_email_argument (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_non_ascii_verbose_name (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"You can pass a stdin object as an option and it should be\", \"Creation should fail if the password fails validation.\", \"Password validation can be bypassed by entering 'y' at the prompt.\", \"If the command is not called from a TTY, it should be skipped and a\", \"A superuser can be created when a custom user model is in use\", \"A Custom superuser won't be created when a required field isn't provided\", \"test_swappable_user_username_non_unique (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_fk (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_fk_environment_variable (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_required_fields (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_required_fields_via_option (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation should fail if the user enters blank passwords.\", \"Creation should fail if the user enters mismatched passwords.\", \"test_verbosity_zero (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.709743",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}