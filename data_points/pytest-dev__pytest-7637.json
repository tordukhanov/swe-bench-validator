{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7637",
  "base_commit": "d69abff2c7de8bc65b7f1ef867dec5b5b9c564bd",
  "patch": "diff --git a/src/_pytest/fixtures.py b/src/_pytest/fixtures.py\n--- a/src/_pytest/fixtures.py\n+++ b/src/_pytest/fixtures.py\n@@ -2,6 +2,7 @@\n import inspect\n import os\n import sys\n+import warnings\n from collections import defaultdict\n from collections import deque\n from types import TracebackType\n@@ -45,6 +46,7 @@\n from _pytest.config import _PluggyPlugin\n from _pytest.config import Config\n from _pytest.config.argparsing import Parser\n+from _pytest.deprecated import FILLFUNCARGS\n from _pytest.mark import ParameterSet\n from _pytest.outcomes import fail\n from _pytest.outcomes import TEST_OUTCOME\n@@ -359,8 +361,7 @@ def reorder_items_atscope(\n \n def fillfixtures(function: \"Function\") -> None:\n     \"\"\"Fill missing funcargs for a test function.\"\"\"\n-    # Uncomment this after 6.0 release (#7361)\n-    # warnings.warn(FILLFUNCARGS, stacklevel=2)\n+    warnings.warn(FILLFUNCARGS, stacklevel=2)\n     try:\n         request = function._request\n     except AttributeError:\ndiff --git a/src/_pytest/hookspec.py b/src/_pytest/hookspec.py\n--- a/src/_pytest/hookspec.py\n+++ b/src/_pytest/hookspec.py\n@@ -13,6 +13,7 @@\n from pluggy import HookspecMarker\n \n from _pytest.compat import TYPE_CHECKING\n+from _pytest.deprecated import WARNING_CAPTURED_HOOK\n \n if TYPE_CHECKING:\n     import pdb\n@@ -723,9 +724,7 @@ def pytest_terminal_summary(\n     \"\"\"\n \n \n-# Uncomment this after 6.0 release (#7361)\n-# @hookspec(historic=True, warn_on_impl=WARNING_CAPTURED_HOOK)\n-@hookspec(historic=True)\n+@hookspec(historic=True, warn_on_impl=WARNING_CAPTURED_HOOK)\n def pytest_warning_captured(\n     warning_message: \"warnings.WarningMessage\",\n     when: \"Literal['config', 'collect', 'runtest']\",\ndiff --git a/src/_pytest/mark/__init__.py b/src/_pytest/mark/__init__.py\n--- a/src/_pytest/mark/__init__.py\n+++ b/src/_pytest/mark/__init__.py\n@@ -1,5 +1,6 @@\n \"\"\"Generic mechanism for marking and selecting python functions.\"\"\"\n import typing\n+import warnings\n from typing import AbstractSet\n from typing import List\n from typing import Optional\n@@ -22,6 +23,8 @@\n from _pytest.config import hookimpl\n from _pytest.config import UsageError\n from _pytest.config.argparsing import Parser\n+from _pytest.deprecated import MINUS_K_COLON\n+from _pytest.deprecated import MINUS_K_DASH\n from _pytest.store import StoreKey\n \n if TYPE_CHECKING:\n@@ -185,14 +188,12 @@ def deselect_by_keyword(items: \"List[Item]\", config: Config) -> None:\n \n     if keywordexpr.startswith(\"-\"):\n         # To be removed in pytest 7.0.0.\n-        # Uncomment this after 6.0 release (#7361)\n-        # warnings.warn(MINUS_K_DASH, stacklevel=2)\n+        warnings.warn(MINUS_K_DASH, stacklevel=2)\n         keywordexpr = \"not \" + keywordexpr[1:]\n     selectuntil = False\n     if keywordexpr[-1:] == \":\":\n         # To be removed in pytest 7.0.0.\n-        # Uncomment this after 6.0 release (#7361)\n-        # warnings.warn(MINUS_K_COLON, stacklevel=2)\n+        warnings.warn(MINUS_K_COLON, stacklevel=2)\n         selectuntil = True\n         keywordexpr = keywordexpr[:-1]\n \ndiff --git a/src/pytest/collect.py b/src/pytest/collect.py\n--- a/src/pytest/collect.py\n+++ b/src/pytest/collect.py\n@@ -1,10 +1,11 @@\n import sys\n+import warnings\n from types import ModuleType\n from typing import Any\n from typing import List\n \n import pytest\n-\n+from _pytest.deprecated import PYTEST_COLLECT_MODULE\n \n COLLECT_FAKEMODULE_ATTRIBUTES = [\n     \"Collector\",\n@@ -31,8 +32,7 @@ def __dir__(self) -> List[str]:\n     def __getattr__(self, name: str) -> Any:\n         if name not in self.__all__:\n             raise AttributeError(name)\n-        # Uncomment this after 6.0 release (#7361)\n-        # warnings.warn(PYTEST_COLLECT_MODULE.format(name=name), stacklevel=2)\n+        warnings.warn(PYTEST_COLLECT_MODULE.format(name=name), stacklevel=2)\n         return getattr(pytest, name)\n \n \n",
  "test_patch": "diff --git a/testing/deprecated_test.py b/testing/deprecated_test.py\n--- a/testing/deprecated_test.py\n+++ b/testing/deprecated_test.py\n@@ -6,7 +6,6 @@\n from _pytest.pytester import Testdir\n \n \n-@pytest.mark.skip(reason=\"should be reintroduced in 6.1: #7361\")\n @pytest.mark.parametrize(\"attribute\", pytest.collect.__all__)  # type: ignore\n # false positive due to dynamic attribute\n def test_pytest_collect_module_deprecated(attribute):\n@@ -24,7 +23,6 @@ def test_external_plugins_integrated(testdir, plugin):\n         testdir.parseconfig(\"-p\", plugin)\n \n \n-@pytest.mark.skip(reason=\"should be reintroduced in 6.1: #7361\")\n def test_fillfuncargs_is_deprecated() -> None:\n     with pytest.warns(\n         pytest.PytestDeprecationWarning,\n@@ -33,7 +31,6 @@ def test_fillfuncargs_is_deprecated() -> None:\n         pytest._fillfuncargs(mock.Mock())\n \n \n-@pytest.mark.skip(reason=\"should be reintroduced in 6.1: #7361\")\n def test_minus_k_dash_is_deprecated(testdir) -> None:\n     threepass = testdir.makepyfile(\n         test_threepass=\"\"\"\n@@ -46,7 +43,6 @@ def test_three(): assert 1\n     result.stdout.fnmatch_lines([\"*The `-k '-expr'` syntax*deprecated*\"])\n \n \n-@pytest.mark.skip(reason=\"should be reintroduced in 6.1: #7361\")\n def test_minus_k_colon_is_deprecated(testdir) -> None:\n     threepass = testdir.makepyfile(\n         test_threepass=\"\"\"\n",
  "problem_statement": "Reintroduce warnings postponed in 6.0\nA few warnings were introduced near the 6.0 release, so we can't comply with the \"2 versions minimum with warnings\", so for 6.0 these warnings were suppressed in https://github.com/pytest-dev/pytest/pull/7362.\r\n\r\nWe should reintroduce them in 6.1.\n",
  "hints_text": "",
  "created_at": "2020-08-12T12:21:36Z",
  "version": "6.0",
  "FAIL_TO_PASS": "[\"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Collector]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Module]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Function]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Instance]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Session]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Item]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Class]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[File]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[_fillfuncargs]\", \"testing/deprecated_test.py::test_fillfuncargs_is_deprecated\", \"testing/deprecated_test.py::test_minus_k_dash_is_deprecated\", \"testing/deprecated_test.py::test_minus_k_colon_is_deprecated\"]",
  "PASS_TO_PASS": "[\"testing/deprecated_test.py::test_external_plugins_integrated[pytest_capturelog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_catchlog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_faulthandler]\", \"testing/deprecated_test.py::test_fscollector_gethookproxy_isinitpath\"]",
  "environment_setup_commit": "634cde9506eb1f48dec3ec77974ee8dc952207c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.939181",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}