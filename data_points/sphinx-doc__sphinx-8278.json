{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8278",
  "base_commit": "a8abb9995f71b9bc02b6f83592751c779ae0f75a",
  "patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -58,17 +58,19 @@ def parse(code: str, mode: str = 'exec') -> \"ast.AST\":\n         return ast.parse(code, mode=mode)\n \n \n-def unparse(node: Optional[ast.AST]) -> Optional[str]:\n+def unparse(node: Optional[ast.AST], code: str = '') -> Optional[str]:\n     \"\"\"Unparse an AST to string.\"\"\"\n     if node is None:\n         return None\n     elif isinstance(node, str):\n         return node\n-    return _UnparseVisitor().visit(node)\n+    return _UnparseVisitor(code).visit(node)\n \n \n # a greatly cut-down version of `ast._Unparser`\n class _UnparseVisitor(ast.NodeVisitor):\n+    def __init__(self, code: str = '') -> None:\n+        self.code = code\n \n     def _visit_op(self, node: ast.AST) -> str:\n         return OPERATORS[node.__class__]\n@@ -195,6 +197,11 @@ def visit_Tuple(self, node: ast.Tuple) -> str:\n         def visit_Constant(self, node: ast.Constant) -> str:\n             if node.value is Ellipsis:\n                 return \"...\"\n+            elif isinstance(node.value, (int, float, complex)):\n+                if self.code and sys.version_info > (3, 8):\n+                    return ast.get_source_segment(self.code, node)\n+                else:\n+                    return repr(node.value)\n             else:\n                 return repr(node.value)\n \ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -600,13 +600,14 @@ def stringify_signature(sig: inspect.Signature, show_annotation: bool = True,\n \n def signature_from_str(signature: str) -> inspect.Signature:\n     \"\"\"Create a Signature object from string.\"\"\"\n-    module = ast.parse('def func' + signature + ': pass')\n+    code = 'def func' + signature + ': pass'\n+    module = ast.parse(code)\n     function = cast(ast.FunctionDef, module.body[0])  # type: ignore\n \n-    return signature_from_ast(function)\n+    return signature_from_ast(function, code)\n \n \n-def signature_from_ast(node: ast.FunctionDef) -> inspect.Signature:\n+def signature_from_ast(node: ast.FunctionDef, code: str = '') -> inspect.Signature:\n     \"\"\"Create a Signature object from AST *node*.\"\"\"\n     args = node.args\n     defaults = list(args.defaults)\n@@ -626,9 +627,9 @@ def signature_from_ast(node: ast.FunctionDef) -> inspect.Signature:\n             if defaults[i] is Parameter.empty:\n                 default = Parameter.empty\n             else:\n-                default = ast_unparse(defaults[i])\n+                default = ast_unparse(defaults[i], code)\n \n-            annotation = ast_unparse(arg.annotation) or Parameter.empty\n+            annotation = ast_unparse(arg.annotation, code) or Parameter.empty\n             params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY,\n                                     default=default, annotation=annotation))\n \n@@ -636,29 +637,29 @@ def signature_from_ast(node: ast.FunctionDef) -> inspect.Signature:\n         if defaults[i + posonlyargs] is Parameter.empty:\n             default = Parameter.empty\n         else:\n-            default = ast_unparse(defaults[i + posonlyargs])\n+            default = ast_unparse(defaults[i + posonlyargs], code)\n \n-        annotation = ast_unparse(arg.annotation) or Parameter.empty\n+        annotation = ast_unparse(arg.annotation, code) or Parameter.empty\n         params.append(Parameter(arg.arg, Parameter.POSITIONAL_OR_KEYWORD,\n                                 default=default, annotation=annotation))\n \n     if args.vararg:\n-        annotation = ast_unparse(args.vararg.annotation) or Parameter.empty\n+        annotation = ast_unparse(args.vararg.annotation, code) or Parameter.empty\n         params.append(Parameter(args.vararg.arg, Parameter.VAR_POSITIONAL,\n                                 annotation=annotation))\n \n     for i, arg in enumerate(args.kwonlyargs):\n-        default = ast_unparse(args.kw_defaults[i]) or Parameter.empty\n-        annotation = ast_unparse(arg.annotation) or Parameter.empty\n+        default = ast_unparse(args.kw_defaults[i], code) or Parameter.empty\n+        annotation = ast_unparse(arg.annotation, code) or Parameter.empty\n         params.append(Parameter(arg.arg, Parameter.KEYWORD_ONLY, default=default,\n                                 annotation=annotation))\n \n     if args.kwarg:\n-        annotation = ast_unparse(args.kwarg.annotation) or Parameter.empty\n+        annotation = ast_unparse(args.kwarg.annotation, code) or Parameter.empty\n         params.append(Parameter(args.kwarg.arg, Parameter.VAR_KEYWORD,\n                                 annotation=annotation))\n \n-    return_annotation = ast_unparse(node.returns) or Parameter.empty\n+    return_annotation = ast_unparse(node.returns, code) or Parameter.empty\n \n     return inspect.Signature(params, return_annotation=return_annotation)\n \n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -386,6 +386,19 @@ def test_pyfunction_signature_full_py38(app):\n                                       [desc_parameter, desc_sig_operator, \"/\"])])\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 8), reason='python 3.8+ is required.')\n+def test_pyfunction_with_number_literals(app):\n+    text = \".. py:function:: hello(age=0x10, height=1_6_0)\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree[1][0][1],\n+                [desc_parameterlist, ([desc_parameter, ([desc_sig_name, \"age\"],\n+                                                        [desc_sig_operator, \"=\"],\n+                                                        [nodes.inline, \"0x10\"])],\n+                                      [desc_parameter, ([desc_sig_name, \"height\"],\n+                                                        [desc_sig_operator, \"=\"],\n+                                                        [nodes.inline, \"1_6_0\"])])])\n+\n+\n def test_optional_pyfunction_signature(app):\n     text = \".. py:function:: compile(source [, filename [, symbol]]) -> ast object\"\n     doctree = restructuredtext.parse(app, text)\ndiff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -58,7 +58,7 @@\n ])\n def test_unparse(source, expected):\n     module = ast.parse(source)\n-    assert ast.unparse(module.body[0].value) == expected\n+    assert ast.unparse(module.body[0].value, source) == expected\n \n \n def test_unparse_None():\n@@ -66,8 +66,12 @@ def test_unparse_None():\n \n \n @pytest.mark.skipif(sys.version_info < (3, 8), reason='python 3.8+ is required.')\n-def test_unparse_py38():\n-    source = \"lambda x=0, /, y=1, *args, z, **kwargs: x + y + z\"\n-    expected = \"lambda x=0, /, y=1, *args, z, **kwargs: ...\"\n+@pytest.mark.parametrize('source,expected', [\n+    (\"lambda x=0, /, y=1, *args, z, **kwargs: x + y + z\",\n+     \"lambda x=0, /, y=1, *args, z, **kwargs: ...\"),    # posonlyargs\n+    (\"0x1234\", \"0x1234\"),                               # Constant\n+    (\"1_000_000\", \"1_000_000\"),                         # Constant\n+])\n+def test_unparse_py38(source, expected):\n     module = ast.parse(source)\n-    assert ast.unparse(module.body[0].value) == expected\n+    assert ast.unparse(module.body[0].value, source) == expected\n",
  "problem_statement": "Sphinx changes number system from hexadecimal to decimal for function default arguments\n**Describe the bug**\r\n\r\nWhen documenting a function, which requires a default argument specified in hexadecimal:\r\n```\r\n.. function:: lcd.print(msg, x, y, color=0xffffff, transparent=False)\r\n```\r\n\r\nSphinx 3.2.1 will render HTML documentation where the hexadecimal value is in a different number system, than what was specified by the user (decimal), as seen in the following output from the above input:\r\n\r\n![Screenshot 2020-09-30 at 14 32 21](https://user-images.githubusercontent.com/55204/94685496-c777ed00-0329-11eb-9ce1-d6f452d790ad.png)\r\n\r\n**Expected behavior**\r\nThe expected behaviour would be to present the default argument in the same radix/number system as the user typed in, thus in this case the documentation would also display the value in hexadecimal.\r\n\r\nIn the above example of with colors, it is unintuitive what the color 16777215 might refer to, but it's easy read RGB colors in hexadecimal format - e.g. 0xffffff is white, thus which number system is used can make a huge difference. The same for example goes for e.g. specifying access rights for files (`chmod`)\r\n\r\n**Screenshots**\r\n![Screenshot 2020-09-30 at 14 32 21](https://user-images.githubusercontent.com/55204/94685496-c777ed00-0329-11eb-9ce1-d6f452d790ad.png)\r\n\r\n**Environment info**\r\n- OS: Mac OS X 10.14.6\r\n- Python version: 3.8.5\r\n- Sphinx version: 3.2.1\r\n- Sphinx extensions:  None\r\n- Extra tools: None\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2020-10-04T01:41:40Z",
  "version": "3.3",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_pycode_ast.py::test_unparse[a\", \"tests/test_pycode_ast.py::test_unparse[os.path-os.path]\", \"tests/test_pycode_ast.py::test_unparse[1\", \"tests/test_pycode_ast.py::test_unparse[b'bytes'-b'bytes']\", \"tests/test_pycode_ast.py::test_unparse[object()-object()]\", \"tests/test_pycode_ast.py::test_unparse[{'key1':\", \"tests/test_pycode_ast.py::test_unparse[...-...]\", \"tests/test_pycode_ast.py::test_unparse[Tuple[int,\", \"tests/test_pycode_ast.py::test_unparse[~\", \"tests/test_pycode_ast.py::test_unparse[lambda\", \"tests/test_pycode_ast.py::test_unparse[[1,\", \"tests/test_pycode_ast.py::test_unparse[sys-sys]\", \"tests/test_pycode_ast.py::test_unparse[not\", \"tests/test_pycode_ast.py::test_unparse[{1,\", \"tests/test_pycode_ast.py::test_unparse['str'-'str']\", \"tests/test_pycode_ast.py::test_unparse[+\", \"tests/test_pycode_ast.py::test_unparse[-\", \"tests/test_pycode_ast.py::test_unparse[(1,\", \"tests/test_pycode_ast.py::test_unparse[()-()]\", \"tests/test_pycode_ast.py::test_unparse_py38[lambda\", \"tests/test_pycode_ast.py::test_unparse_py38[0x1234-0x1234]\", \"tests/test_pycode_ast.py::test_unparse_py38[1_000_000-1_000_000]\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_exceptions_module_is_ignored\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_pycode_ast.py::test_unparse[1234-1234_0]\", \"tests/test_pycode_ast.py::test_unparse[1234-1234_1]\", \"tests/test_pycode_ast.py::test_unparse_None\"]",
  "environment_setup_commit": "3b85187ffa3401e88582073c23188c147857a8a3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.053318",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}