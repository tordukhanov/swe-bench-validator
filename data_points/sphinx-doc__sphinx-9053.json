{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9053",
  "base_commit": "3ad1e5e7d1a5fa38e94124e8afc441764a95cdd9",
  "patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -237,7 +237,7 @@ def _entries_from_toctree(toctreenode: addnodes.toctree, parents: List[str],\n         newnode = addnodes.compact_paragraph('', '')\n         caption = toctree.attributes.get('caption')\n         if caption:\n-            caption_node = nodes.caption(caption, '', *[nodes.Text(caption)])\n+            caption_node = nodes.title(caption, '', *[nodes.Text(caption)])\n             caption_node.line = toctree.line\n             caption_node.source = toctree.source\n             caption_node.rawsource = toctree['rawcaption']\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -404,7 +404,12 @@ def depart_term(self, node: Element) -> None:\n \n     # overwritten\n     def visit_title(self, node: Element) -> None:\n-        super().visit_title(node)\n+        if isinstance(node.parent, addnodes.compact_paragraph) and node.parent.get('toctree'):\n+            self.body.append(self.starttag(node, 'p', '', CLASS='caption'))\n+            self.body.append('<span class=\"caption-text\">')\n+            self.context.append('</span></p>\\n')\n+        else:\n+            super().visit_title(node)\n         self.add_secnumber(node)\n         self.add_fignumber(node.parent)\n         if isinstance(node.parent, nodes.table):\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -355,7 +355,12 @@ def depart_term(self, node: Element) -> None:\n \n     # overwritten\n     def visit_title(self, node: Element) -> None:\n-        super().visit_title(node)\n+        if isinstance(node.parent, addnodes.compact_paragraph) and node.parent.get('toctree'):\n+            self.body.append(self.starttag(node, 'p', '', CLASS='caption'))\n+            self.body.append('<span class=\"caption-text\">')\n+            self.context.append('</span></p>\\n')\n+        else:\n+            super().visit_title(node)\n         self.add_secnumber(node)\n         self.add_fignumber(node.parent)\n         if isinstance(node.parent, nodes.table):\n",
  "test_patch": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -10,7 +10,7 @@\n \n import pytest\n from docutils import nodes\n-from docutils.nodes import bullet_list, caption, comment, list_item, reference\n+from docutils.nodes import bullet_list, comment, list_item, reference, title\n \n from sphinx import addnodes\n from sphinx.addnodes import compact_paragraph, only\n@@ -211,7 +211,7 @@ def test_get_toctree_for(app):\n     app.build()\n     toctree = TocTree(app.env).get_toctree_for('index', app.builder, collapse=False)\n     assert_node(toctree,\n-                [compact_paragraph, ([caption, \"Table of Contents\"],\n+                [compact_paragraph, ([title, \"Table of Contents\"],\n                                      bullet_list,\n                                      bullet_list,\n                                      bullet_list)])\n@@ -251,7 +251,7 @@ def test_get_toctree_for_collapse(app):\n     app.build()\n     toctree = TocTree(app.env).get_toctree_for('index', app.builder, collapse=True)\n     assert_node(toctree,\n-                [compact_paragraph, ([caption, \"Table of Contents\"],\n+                [compact_paragraph, ([title, \"Table of Contents\"],\n                                      bullet_list,\n                                      bullet_list,\n                                      bullet_list)])\n@@ -283,7 +283,7 @@ def test_get_toctree_for_maxdepth(app):\n     toctree = TocTree(app.env).get_toctree_for('index', app.builder,\n                                                collapse=False, maxdepth=3)\n     assert_node(toctree,\n-                [compact_paragraph, ([caption, \"Table of Contents\"],\n+                [compact_paragraph, ([title, \"Table of Contents\"],\n                                      bullet_list,\n                                      bullet_list,\n                                      bullet_list)])\n@@ -329,7 +329,7 @@ def test_get_toctree_for_includehidden(app):\n     toctree = TocTree(app.env).get_toctree_for('index', app.builder, collapse=False,\n                                                includehidden=False)\n     assert_node(toctree,\n-                [compact_paragraph, ([caption, \"Table of Contents\"],\n+                [compact_paragraph, ([title, \"Table of Contents\"],\n                                      bullet_list,\n                                      bullet_list)])\n \ndiff --git a/tests/test_intl.py b/tests/test_intl.py\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -622,11 +622,8 @@ def test_html_meta(app):\n     assert expected_expr in result\n     expected_expr = '<meta content=\"I18N, SPHINX, MARKUP\" name=\"keywords\" />'\n     assert expected_expr in result\n-    if docutils.__version_info__ < (0, 17):\n-        expected_expr = '<p class=\"caption\"><span class=\"caption-text\">HIDDEN TOC</span></p>'\n-        assert expected_expr in result\n-    else:\n-        expected_expr = '<p><span class=\"caption-text\">HIDDEN TOC</span></p>'\n+    expected_expr = '<p class=\"caption\"><span class=\"caption-text\">HIDDEN TOC</span></p>'\n+    assert expected_expr in result\n \n \n @sphinx_intl\n",
  "problem_statement": "test: Do test with docutils-0.17b1\n### Feature or Bugfix\r\n- Testing\r\n\n",
  "hints_text": "",
  "created_at": "2021-04-04T04:00:18Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"tests/test_environment_toctree.py::test_get_toctree_for\", \"tests/test_environment_toctree.py::test_get_toctree_for_collapse\", \"tests/test_environment_toctree.py::test_get_toctree_for_maxdepth\", \"tests/test_environment_toctree.py::test_get_toctree_for_includehidden\"]",
  "PASS_TO_PASS": "[\"tests/test_environment_toctree.py::test_process_doc\", \"tests/test_environment_toctree.py::test_glob\", \"tests/test_environment_toctree.py::test_get_toc_for\", \"tests/test_environment_toctree.py::test_get_toc_for_only\", \"tests/test_environment_toctree.py::test_get_toc_for_tocdepth\", \"tests/test_intl.py::test_text_emit_warnings\", \"tests/test_intl.py::test_text_warning_node\", \"tests/test_intl.py::test_text_title_underline\", \"tests/test_intl.py::test_text_subdirs\", \"tests/test_intl.py::test_text_inconsistency_warnings\", \"tests/test_intl.py::test_text_literalblock_warnings\", \"tests/test_intl.py::test_text_definition_terms\", \"tests/test_intl.py::test_text_glossary_term\", \"tests/test_intl.py::test_text_glossary_term_inconsistencies\", \"tests/test_intl.py::test_gettext_section\", \"tests/test_intl.py::test_text_section\", \"tests/test_intl.py::test_text_seealso\", \"tests/test_intl.py::test_text_figure_captions\", \"tests/test_intl.py::test_text_rubric\", \"tests/test_intl.py::test_text_docfields\", \"tests/test_intl.py::test_text_admonitions\", \"tests/test_intl.py::test_gettext_table\", \"tests/test_intl.py::test_text_table\", \"tests/test_intl.py::test_text_toctree\", \"tests/test_intl.py::test_gettext_topic\", \"tests/test_intl.py::test_text_topic\", \"tests/test_intl.py::test_gettext_definition_terms\", \"tests/test_intl.py::test_gettext_glossary_terms\", \"tests/test_intl.py::test_gettext_glossary_term_inconsistencies\", \"tests/test_intl.py::test_gettext_literalblock\", \"tests/test_intl.py::test_gettext_buildr_ignores_only_directive\", \"tests/test_intl.py::test_gettext_dont_rebuild_mo\", \"tests/test_intl.py::test_html_footnotes\", \"tests/test_intl.py::test_html_undefined_refs\", \"tests/test_intl.py::test_html_index_entries\", \"tests/test_intl.py::test_html_versionchanges\", \"tests/test_intl.py::test_html_docfields\", \"tests/test_intl.py::test_html_template\", \"tests/test_intl.py::test_html_rebuild_mo\", \"tests/test_intl.py::test_xml_footnotes\", \"tests/test_intl.py::test_xml_footnote_backlinks\", \"tests/test_intl.py::test_xml_refs_in_python_domain\", \"tests/test_intl.py::test_xml_keep_external_links\", \"tests/test_intl.py::test_xml_role_xref\", \"tests/test_intl.py::test_xml_warnings\", \"tests/test_intl.py::test_text_references\", \"tests/test_intl.py::test_image_glob_intl\", \"tests/test_intl.py::test_image_glob_intl_using_figure_language_filename\", \"tests/test_intl.py::test_customize_system_message\"]",
  "environment_setup_commit": "8939a75efaa911a12dbe6edccedf261e88bf7eef",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.062348",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}