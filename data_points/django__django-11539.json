{
  "repo": "django/django",
  "instance_id": "django__django-11539",
  "base_commit": "f197c3dd9130b18397022605c27ffe5755f329d7",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1567,9 +1567,32 @@ def _check_unique_together(cls):\n \n     @classmethod\n     def _check_indexes(cls):\n-        \"\"\"Check the fields of indexes.\"\"\"\n+        \"\"\"Check the fields and names of indexes.\"\"\"\n+        errors = []\n+        for index in cls._meta.indexes:\n+            # Index name can't start with an underscore or a number, restricted\n+            # for cross-database compatibility with Oracle.\n+            if index.name[0] == '_' or index.name[0].isdigit():\n+                errors.append(\n+                    checks.Error(\n+                        \"The index name '%s' cannot start with an underscore \"\n+                        \"or a number.\" % index.name,\n+                        obj=cls,\n+                        id='models.E033',\n+                    ),\n+                )\n+            if len(index.name) > index.max_name_length:\n+                errors.append(\n+                    checks.Error(\n+                        \"The index name '%s' cannot be longer than %d \"\n+                        \"characters.\" % (index.name, index.max_name_length),\n+                        obj=cls,\n+                        id='models.E034',\n+                    ),\n+                )\n         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]\n-        return cls._check_local_fields(fields, 'indexes')\n+        errors.extend(cls._check_local_fields(fields, 'indexes'))\n+        return errors\n \n     @classmethod\n     def _check_local_fields(cls, fields, option):\ndiff --git a/django/db/models/indexes.py b/django/db/models/indexes.py\n--- a/django/db/models/indexes.py\n+++ b/django/db/models/indexes.py\n@@ -33,28 +33,10 @@ def __init__(self, *, fields=(), name=None, db_tablespace=None, opclasses=(), co\n             for field_name in self.fields\n         ]\n         self.name = name or ''\n-        if self.name:\n-            errors = self.check_name()\n-            if len(self.name) > self.max_name_length:\n-                errors.append('Index names cannot be longer than %s characters.' % self.max_name_length)\n-            if errors:\n-                raise ValueError(errors)\n         self.db_tablespace = db_tablespace\n         self.opclasses = opclasses\n         self.condition = condition\n \n-    def check_name(self):\n-        errors = []\n-        # Name can't start with an underscore on Oracle; prepend D if needed.\n-        if self.name[0] == '_':\n-            errors.append('Index names cannot start with an underscore (_).')\n-            self.name = 'D%s' % self.name[1:]\n-        # Name can't start with a number on Oracle; prepend D if needed.\n-        elif self.name[0].isdigit():\n-            errors.append('Index names cannot start with a number (0-9).')\n-            self.name = 'D%s' % self.name[1:]\n-        return errors\n-\n     def _get_condition_sql(self, model, schema_editor):\n         if self.condition is None:\n             return None\n@@ -122,7 +104,8 @@ def set_name_with_model(self, model):\n             'Index too long for multiple database support. Is self.suffix '\n             'longer than 3 characters?'\n         )\n-        self.check_name()\n+        if self.name[0] == '_' or self.name[0].isdigit():\n+            self.name = 'D%s' % self.name[1:]\n \n     def __repr__(self):\n         return \"<%s: fields='%s'%s>\" % (\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -296,6 +296,39 @@ class Meta:\n \n         self.assertEqual(Bar.check(), [])\n \n+    def test_name_constraints(self):\n+        class Model(models.Model):\n+            class Meta:\n+                indexes = [\n+                    models.Index(fields=['id'], name='_index_name'),\n+                    models.Index(fields=['id'], name='5index_name'),\n+                ]\n+\n+        self.assertEqual(Model.check(), [\n+            Error(\n+                \"The index name '%sindex_name' cannot start with an \"\n+                \"underscore or a number.\" % prefix,\n+                obj=Model,\n+                id='models.E033',\n+            ) for prefix in ('_', '5')\n+        ])\n+\n+    def test_max_name_length(self):\n+        index_name = 'x' * 31\n+\n+        class Model(models.Model):\n+            class Meta:\n+                indexes = [models.Index(fields=['id'], name=index_name)]\n+\n+        self.assertEqual(Model.check(), [\n+            Error(\n+                \"The index name '%s' cannot be longer than 30 characters.\"\n+                % index_name,\n+                obj=Model,\n+                id='models.E034',\n+            ),\n+        ])\n+\n \n @isolate_apps('invalid_models_tests')\n class FieldNamesTests(SimpleTestCase):\ndiff --git a/tests/model_indexes/tests.py b/tests/model_indexes/tests.py\n--- a/tests/model_indexes/tests.py\n+++ b/tests/model_indexes/tests.py\n@@ -63,20 +63,6 @@ def test_condition_must_be_q(self):\n         with self.assertRaisesMessage(ValueError, 'Index.condition must be a Q instance.'):\n             models.Index(condition='invalid', name='long_book_idx')\n \n-    def test_max_name_length(self):\n-        msg = 'Index names cannot be longer than 30 characters.'\n-        with self.assertRaisesMessage(ValueError, msg):\n-            models.Index(fields=['title'], name='looooooooooooong_index_name_idx')\n-\n-    def test_name_constraints(self):\n-        msg = 'Index names cannot start with an underscore (_).'\n-        with self.assertRaisesMessage(ValueError, msg):\n-            models.Index(fields=['title'], name='_name_starting_with_underscore')\n-\n-        msg = 'Index names cannot start with a number (0-9).'\n-        with self.assertRaisesMessage(ValueError, msg):\n-            models.Index(fields=['title'], name='5name_starting_with_number')\n-\n     def test_name_auto_generation(self):\n         index = models.Index(fields=['author'])\n         index.set_name_with_model(Book)\n",
  "problem_statement": "Move index name checks from Index.__init__ into system checks.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nIndex names assertions should be moved to system checks to keep code cleaner and more consistent.\n",
  "hints_text": "â€‹PR",
  "created_at": "2019-07-04T14:51:31Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_max_name_length (invalid_models_tests.test_models.IndexesTests)\", \"test_name_constraints (invalid_models_tests.test_models.IndexesTests)\"]",
  "PASS_TO_PASS": "[\"test_check_constraints (invalid_models_tests.test_models.ConstraintsTests)\", \"test_db_column_clash (invalid_models_tests.test_models.FieldNamesTests)\", \"test_ending_with_underscore (invalid_models_tests.test_models.FieldNamesTests)\", \"test_including_separator (invalid_models_tests.test_models.FieldNamesTests)\", \"test_pk (invalid_models_tests.test_models.FieldNamesTests)\", \"test_abstract_children (model_indexes.tests.SimpleIndexesTests)\", \"test_clone (model_indexes.tests.SimpleIndexesTests)\", \"test_condition_must_be_q (model_indexes.tests.SimpleIndexesTests)\", \"test_condition_requires_index_name (model_indexes.tests.SimpleIndexesTests)\", \"test_deconstruct_with_condition (model_indexes.tests.SimpleIndexesTests)\", \"test_deconstruction (model_indexes.tests.SimpleIndexesTests)\", \"test_eq (model_indexes.tests.SimpleIndexesTests)\", \"test_fields_tuple (model_indexes.tests.SimpleIndexesTests)\", \"test_index_fields_type (model_indexes.tests.SimpleIndexesTests)\", \"test_name_auto_generation (model_indexes.tests.SimpleIndexesTests)\", \"test_name_auto_generation_with_quoted_db_table (model_indexes.tests.SimpleIndexesTests)\", \"test_name_set (model_indexes.tests.SimpleIndexesTests)\", \"test_opclasses_and_fields_same_length (model_indexes.tests.SimpleIndexesTests)\", \"test_opclasses_requires_index_name (model_indexes.tests.SimpleIndexesTests)\", \"test_opclasses_requires_list_or_tuple (model_indexes.tests.SimpleIndexesTests)\", \"test_raises_error_without_field (model_indexes.tests.SimpleIndexesTests)\", \"test_repr (model_indexes.tests.SimpleIndexesTests)\", \"test_suffix (model_indexes.tests.SimpleIndexesTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_list (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_m2m (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_valid_model (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_list (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_field_name_clash_with_child_accessor (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_id_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_inheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multigeneration_inheritance (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multiinheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_just_order_with_respect_to_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_just_ordering_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_lazy_reference_checks (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_autogenerated_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_field_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_to_concrete_and_proxy_allowed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_unmanaged_shadow_models_not_checked (invalid_models_tests.test_models.OtherModelTests)\", \"test_missing_parent_link (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_beginning_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_contains_double_underscores (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_ending_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_non_valid (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_allows_registered_lookups (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_non_iterable (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_non_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_two_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_with_order_with_respect_to (invalid_models_tests.test_models.OtherModelTests)\", \"test_property_and_related_field_accessor_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_single_primary_key (invalid_models_tests.test_models.OtherModelTests)\", \"test_swappable_missing_app (invalid_models_tests.test_models.OtherModelTests)\", \"test_swappable_missing_app_name (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_m2m_through_same_model_with_different_through_fields (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_m2m_through_same_relationship (invalid_models_tests.test_models.OtherModelTests)\", \"test_unique_primary_key (invalid_models_tests.test_models.OtherModelTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.575546",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}