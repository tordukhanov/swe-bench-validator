{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-5365",
  "base_commit": "3960ea3ba08f81d211899827612550f6ac2de804",
  "patch": "diff --git a/xarray/__init__.py b/xarray/__init__.py\n--- a/xarray/__init__.py\n+++ b/xarray/__init__.py\n@@ -16,7 +16,16 @@\n from .core.alignment import align, broadcast\n from .core.combine import combine_by_coords, combine_nested\n from .core.common import ALL_DIMS, full_like, ones_like, zeros_like\n-from .core.computation import apply_ufunc, corr, cov, dot, polyval, unify_chunks, where\n+from .core.computation import (\n+    apply_ufunc,\n+    corr,\n+    cov,\n+    cross,\n+    dot,\n+    polyval,\n+    unify_chunks,\n+    where,\n+)\n from .core.concat import concat\n from .core.dataarray import DataArray\n from .core.dataset import Dataset\n@@ -60,6 +69,7 @@\n     \"dot\",\n     \"cov\",\n     \"corr\",\n+    \"cross\",\n     \"full_like\",\n     \"get_options\",\n     \"infer_freq\",\ndiff --git a/xarray/core/computation.py b/xarray/core/computation.py\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -36,6 +36,7 @@\n \n if TYPE_CHECKING:\n     from .coordinates import Coordinates\n+    from .dataarray import DataArray\n     from .dataset import Dataset\n     from .types import T_Xarray\n \n@@ -1373,6 +1374,214 @@ def _cov_corr(da_a, da_b, dim=None, ddof=0, method=None):\n         return corr\n \n \n+def cross(\n+    a: Union[DataArray, Variable], b: Union[DataArray, Variable], *, dim: Hashable\n+) -> Union[DataArray, Variable]:\n+    \"\"\"\n+    Compute the cross product of two (arrays of) vectors.\n+\n+    The cross product of `a` and `b` in :math:`R^3` is a vector\n+    perpendicular to both `a` and `b`. The vectors in `a` and `b` are\n+    defined by the values along the dimension `dim` and can have sizes\n+    1, 2 or 3. Where the size of either `a` or `b` is\n+    1 or 2, the remaining components of the input vector is assumed to\n+    be zero and the cross product calculated accordingly. In cases where\n+    both input vectors have dimension 2, the z-component of the cross\n+    product is returned.\n+\n+    Parameters\n+    ----------\n+    a, b : DataArray or Variable\n+        Components of the first and second vector(s).\n+    dim : hashable\n+        The dimension along which the cross product will be computed.\n+        Must be available in both vectors.\n+\n+    Examples\n+    --------\n+    Vector cross-product with 3 dimensions:\n+\n+    >>> a = xr.DataArray([1, 2, 3])\n+    >>> b = xr.DataArray([4, 5, 6])\n+    >>> xr.cross(a, b, dim=\"dim_0\")\n+    <xarray.DataArray (dim_0: 3)>\n+    array([-3,  6, -3])\n+    Dimensions without coordinates: dim_0\n+\n+    Vector cross-product with 2 dimensions, returns in the perpendicular\n+    direction:\n+\n+    >>> a = xr.DataArray([1, 2])\n+    >>> b = xr.DataArray([4, 5])\n+    >>> xr.cross(a, b, dim=\"dim_0\")\n+    <xarray.DataArray ()>\n+    array(-3)\n+\n+    Vector cross-product with 3 dimensions but zeros at the last axis\n+    yields the same results as with 2 dimensions:\n+\n+    >>> a = xr.DataArray([1, 2, 0])\n+    >>> b = xr.DataArray([4, 5, 0])\n+    >>> xr.cross(a, b, dim=\"dim_0\")\n+    <xarray.DataArray (dim_0: 3)>\n+    array([ 0,  0, -3])\n+    Dimensions without coordinates: dim_0\n+\n+    One vector with dimension 2:\n+\n+    >>> a = xr.DataArray(\n+    ...     [1, 2],\n+    ...     dims=[\"cartesian\"],\n+    ...     coords=dict(cartesian=([\"cartesian\"], [\"x\", \"y\"])),\n+    ... )\n+    >>> b = xr.DataArray(\n+    ...     [4, 5, 6],\n+    ...     dims=[\"cartesian\"],\n+    ...     coords=dict(cartesian=([\"cartesian\"], [\"x\", \"y\", \"z\"])),\n+    ... )\n+    >>> xr.cross(a, b, dim=\"cartesian\")\n+    <xarray.DataArray (cartesian: 3)>\n+    array([12, -6, -3])\n+    Coordinates:\n+      * cartesian  (cartesian) <U1 'x' 'y' 'z'\n+\n+    One vector with dimension 2 but coords in other positions:\n+\n+    >>> a = xr.DataArray(\n+    ...     [1, 2],\n+    ...     dims=[\"cartesian\"],\n+    ...     coords=dict(cartesian=([\"cartesian\"], [\"x\", \"z\"])),\n+    ... )\n+    >>> b = xr.DataArray(\n+    ...     [4, 5, 6],\n+    ...     dims=[\"cartesian\"],\n+    ...     coords=dict(cartesian=([\"cartesian\"], [\"x\", \"y\", \"z\"])),\n+    ... )\n+    >>> xr.cross(a, b, dim=\"cartesian\")\n+    <xarray.DataArray (cartesian: 3)>\n+    array([-10,   2,   5])\n+    Coordinates:\n+      * cartesian  (cartesian) <U1 'x' 'y' 'z'\n+\n+    Multiple vector cross-products. Note that the direction of the\n+    cross product vector is defined by the right-hand rule:\n+\n+    >>> a = xr.DataArray(\n+    ...     [[1, 2, 3], [4, 5, 6]],\n+    ...     dims=(\"time\", \"cartesian\"),\n+    ...     coords=dict(\n+    ...         time=([\"time\"], [0, 1]),\n+    ...         cartesian=([\"cartesian\"], [\"x\", \"y\", \"z\"]),\n+    ...     ),\n+    ... )\n+    >>> b = xr.DataArray(\n+    ...     [[4, 5, 6], [1, 2, 3]],\n+    ...     dims=(\"time\", \"cartesian\"),\n+    ...     coords=dict(\n+    ...         time=([\"time\"], [0, 1]),\n+    ...         cartesian=([\"cartesian\"], [\"x\", \"y\", \"z\"]),\n+    ...     ),\n+    ... )\n+    >>> xr.cross(a, b, dim=\"cartesian\")\n+    <xarray.DataArray (time: 2, cartesian: 3)>\n+    array([[-3,  6, -3],\n+           [ 3, -6,  3]])\n+    Coordinates:\n+      * time       (time) int64 0 1\n+      * cartesian  (cartesian) <U1 'x' 'y' 'z'\n+\n+    Cross can be called on Datasets by converting to DataArrays and later\n+    back to a Dataset:\n+\n+    >>> ds_a = xr.Dataset(dict(x=(\"dim_0\", [1]), y=(\"dim_0\", [2]), z=(\"dim_0\", [3])))\n+    >>> ds_b = xr.Dataset(dict(x=(\"dim_0\", [4]), y=(\"dim_0\", [5]), z=(\"dim_0\", [6])))\n+    >>> c = xr.cross(\n+    ...     ds_a.to_array(\"cartesian\"), ds_b.to_array(\"cartesian\"), dim=\"cartesian\"\n+    ... )\n+    >>> c.to_dataset(dim=\"cartesian\")\n+    <xarray.Dataset>\n+    Dimensions:  (dim_0: 1)\n+    Dimensions without coordinates: dim_0\n+    Data variables:\n+        x        (dim_0) int64 -3\n+        y        (dim_0) int64 6\n+        z        (dim_0) int64 -3\n+\n+    See Also\n+    --------\n+    numpy.cross : Corresponding numpy function\n+    \"\"\"\n+\n+    if dim not in a.dims:\n+        raise ValueError(f\"Dimension {dim!r} not on a\")\n+    elif dim not in b.dims:\n+        raise ValueError(f\"Dimension {dim!r} not on b\")\n+\n+    if not 1 <= a.sizes[dim] <= 3:\n+        raise ValueError(\n+            f\"The size of {dim!r} on a must be 1, 2, or 3 to be \"\n+            f\"compatible with a cross product but is {a.sizes[dim]}\"\n+        )\n+    elif not 1 <= b.sizes[dim] <= 3:\n+        raise ValueError(\n+            f\"The size of {dim!r} on b must be 1, 2, or 3 to be \"\n+            f\"compatible with a cross product but is {b.sizes[dim]}\"\n+        )\n+\n+    all_dims = list(dict.fromkeys(a.dims + b.dims))\n+\n+    if a.sizes[dim] != b.sizes[dim]:\n+        # Arrays have different sizes. Append zeros where the smaller\n+        # array is missing a value, zeros will not affect np.cross:\n+\n+        if (\n+            not isinstance(a, Variable)  # Only used to make mypy happy.\n+            and dim in getattr(a, \"coords\", {})\n+            and not isinstance(b, Variable)  # Only used to make mypy happy.\n+            and dim in getattr(b, \"coords\", {})\n+        ):\n+            # If the arrays have coords we know which indexes to fill\n+            # with zeros:\n+            a, b = align(\n+                a,\n+                b,\n+                fill_value=0,\n+                join=\"outer\",\n+                exclude=set(all_dims) - {dim},\n+            )\n+        elif min(a.sizes[dim], b.sizes[dim]) == 2:\n+            # If the array doesn't have coords we can only infer\n+            # that it has composite values if the size is at least 2.\n+            # Once padded, rechunk the padded array because apply_ufunc\n+            # requires core dimensions not to be chunked:\n+            if a.sizes[dim] < b.sizes[dim]:\n+                a = a.pad({dim: (0, 1)}, constant_values=0)\n+                # TODO: Should pad or apply_ufunc handle correct chunking?\n+                a = a.chunk({dim: -1}) if is_duck_dask_array(a.data) else a\n+            else:\n+                b = b.pad({dim: (0, 1)}, constant_values=0)\n+                # TODO: Should pad or apply_ufunc handle correct chunking?\n+                b = b.chunk({dim: -1}) if is_duck_dask_array(b.data) else b\n+        else:\n+            raise ValueError(\n+                f\"{dim!r} on {'a' if a.sizes[dim] == 1 else 'b'} is incompatible:\"\n+                \" dimensions without coordinates must have have a length of 2 or 3\"\n+            )\n+\n+    c = apply_ufunc(\n+        np.cross,\n+        a,\n+        b,\n+        input_core_dims=[[dim], [dim]],\n+        output_core_dims=[[dim] if a.sizes[dim] == 3 else []],\n+        dask=\"parallelized\",\n+        output_dtypes=[np.result_type(a, b)],\n+    )\n+    c = c.transpose(*all_dims, missing_dims=\"ignore\")\n+\n+    return c\n+\n+\n def dot(*arrays, dims=None, **kwargs):\n     \"\"\"Generalized dot product for xarray objects. Like np.einsum, but\n     provides a simpler interface based on array dimensions.\n",
  "test_patch": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1952,3 +1952,110 @@ def test_polyval(use_dask, use_datetime) -> None:\n     da_pv = xr.polyval(da.x, coeffs)\n \n     xr.testing.assert_allclose(da, da_pv.T)\n+\n+\n+@pytest.mark.parametrize(\"use_dask\", [False, True])\n+@pytest.mark.parametrize(\n+    \"a, b, ae, be, dim, axis\",\n+    [\n+        [\n+            xr.DataArray([1, 2, 3]),\n+            xr.DataArray([4, 5, 6]),\n+            [1, 2, 3],\n+            [4, 5, 6],\n+            \"dim_0\",\n+            -1,\n+        ],\n+        [\n+            xr.DataArray([1, 2]),\n+            xr.DataArray([4, 5, 6]),\n+            [1, 2],\n+            [4, 5, 6],\n+            \"dim_0\",\n+            -1,\n+        ],\n+        [\n+            xr.Variable(dims=[\"dim_0\"], data=[1, 2, 3]),\n+            xr.Variable(dims=[\"dim_0\"], data=[4, 5, 6]),\n+            [1, 2, 3],\n+            [4, 5, 6],\n+            \"dim_0\",\n+            -1,\n+        ],\n+        [\n+            xr.Variable(dims=[\"dim_0\"], data=[1, 2]),\n+            xr.Variable(dims=[\"dim_0\"], data=[4, 5, 6]),\n+            [1, 2],\n+            [4, 5, 6],\n+            \"dim_0\",\n+            -1,\n+        ],\n+        [  # Test dim in the middle:\n+            xr.DataArray(\n+                np.arange(0, 5 * 3 * 4).reshape((5, 3, 4)),\n+                dims=[\"time\", \"cartesian\", \"var\"],\n+                coords=dict(\n+                    time=([\"time\"], np.arange(0, 5)),\n+                    cartesian=([\"cartesian\"], [\"x\", \"y\", \"z\"]),\n+                    var=([\"var\"], [1, 1.5, 2, 2.5]),\n+                ),\n+            ),\n+            xr.DataArray(\n+                np.arange(0, 5 * 3 * 4).reshape((5, 3, 4)) + 1,\n+                dims=[\"time\", \"cartesian\", \"var\"],\n+                coords=dict(\n+                    time=([\"time\"], np.arange(0, 5)),\n+                    cartesian=([\"cartesian\"], [\"x\", \"y\", \"z\"]),\n+                    var=([\"var\"], [1, 1.5, 2, 2.5]),\n+                ),\n+            ),\n+            np.arange(0, 5 * 3 * 4).reshape((5, 3, 4)),\n+            np.arange(0, 5 * 3 * 4).reshape((5, 3, 4)) + 1,\n+            \"cartesian\",\n+            1,\n+        ],\n+        [  # Test 1 sized arrays with coords:\n+            xr.DataArray(\n+                np.array([1]),\n+                dims=[\"cartesian\"],\n+                coords=dict(cartesian=([\"cartesian\"], [\"z\"])),\n+            ),\n+            xr.DataArray(\n+                np.array([4, 5, 6]),\n+                dims=[\"cartesian\"],\n+                coords=dict(cartesian=([\"cartesian\"], [\"x\", \"y\", \"z\"])),\n+            ),\n+            [0, 0, 1],\n+            [4, 5, 6],\n+            \"cartesian\",\n+            -1,\n+        ],\n+        [  # Test filling inbetween with coords:\n+            xr.DataArray(\n+                [1, 2],\n+                dims=[\"cartesian\"],\n+                coords=dict(cartesian=([\"cartesian\"], [\"x\", \"z\"])),\n+            ),\n+            xr.DataArray(\n+                [4, 5, 6],\n+                dims=[\"cartesian\"],\n+                coords=dict(cartesian=([\"cartesian\"], [\"x\", \"y\", \"z\"])),\n+            ),\n+            [1, 0, 2],\n+            [4, 5, 6],\n+            \"cartesian\",\n+            -1,\n+        ],\n+    ],\n+)\n+def test_cross(a, b, ae, be, dim: str, axis: int, use_dask: bool) -> None:\n+    expected = np.cross(ae, be, axis=axis)\n+\n+    if use_dask:\n+        if not has_dask:\n+            pytest.skip(\"test for dask.\")\n+        a = a.chunk()\n+        b = b.chunk()\n+\n+    actual = xr.cross(a, b, dim=dim)\n+    xr.testing.assert_duckarray_allclose(expected, actual)\n",
  "problem_statement": "Feature request: vector cross product\nxarray currently has the `xarray.dot()` function for calculating arbitrary dot products which is indeed very handy.\r\nSometimes, especially for physical applications I also need a vector cross product. I' wondering whether you would be interested in having ` xarray.cross` as a wrapper of [`numpy.cross`.](https://docs.scipy.org/doc/numpy/reference/generated/numpy.cross.html) I currently use the following implementation:\r\n\r\n```python\r\ndef cross(a, b, spatial_dim, output_dtype=None):\r\n    \"\"\"xarray-compatible cross product\r\n    \r\n    Compatible with dask, parallelization uses a.dtype as output_dtype\r\n    \"\"\"\r\n    # TODO find spatial dim default by looking for unique 3(or 2)-valued dim?\r\n    for d in (a, b):\r\n        if spatial_dim not in d.dims:\r\n            raise ValueError('dimension {} not in {}'.format(spatial_dim, d))\r\n        if d.sizes[spatial_dim] != 3:  #TODO handle 2-valued cases\r\n            raise ValueError('dimension {} has not length 3 in {}'.format(d))\r\n        \r\n    if output_dtype is None: \r\n        output_dtype = a.dtype  # TODO some better way to determine default?\r\n    c = xr.apply_ufunc(np.cross, a, b,\r\n                       input_core_dims=[[spatial_dim], [spatial_dim]], \r\n                       output_core_dims=[[spatial_dim]], \r\n                       dask='parallelized', output_dtypes=[output_dtype]\r\n                      )\r\n    return c\r\n\r\n```\r\n\r\n#### Example usage\r\n\r\n```python\r\nimport numpy as np\r\nimport xarray as xr\r\na = xr.DataArray(np.empty((10, 3)), dims=['line', 'cartesian'])\r\nb = xr.full_like(a, 1)\r\nc = cross(a, b, 'cartesian')\r\n```\r\n\r\n#### Main question\r\nDo you want such a function (and possibly associated `DataArray.cross` methods) in the `xarray` namespace, or should it be in some other package?  I didn't find a package which would be a good fit as this is close to core numpy functionality and isn't as domain specific as some geo packages. I'm not aware of some \"xrphysics\" package.\r\n\r\nI could make a PR if you'd want to have it in `xarray` directly.\r\n\r\n#### Output of ``xr.show_versions()``\r\n<details>\r\n# Paste the output here xr.show_versions() here\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.7.3 (default, Mar 27 2019, 22:11:17) \r\n[GCC 7.3.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 4.9.0-9-amd64\r\nmachine: x86_64\r\nprocessor: \r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: en_US.UTF-8\r\nlibhdf5: 1.10.4\r\nlibnetcdf: 4.6.1\r\n\r\nxarray: 0.12.3\r\npandas: 0.24.2\r\nnumpy: 1.16.4\r\nscipy: 1.3.0\r\nnetCDF4: 1.4.2\r\npydap: None\r\nh5netcdf: 0.7.4\r\nh5py: 2.9.0\r\nNio: None\r\nzarr: None\r\ncftime: 1.0.3.4\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: 1.2.1\r\ndask: 2.1.0\r\ndistributed: 2.1.0\r\nmatplotlib: 3.1.0\r\ncartopy: None\r\nseaborn: 0.9.0\r\nnumbagg: None\r\nsetuptools: 41.0.1\r\npip: 19.1.1\r\nconda: 4.7.11\r\npytest: 5.0.1\r\nIPython: 7.6.1\r\nsphinx: 2.1.2\r\n</details>\r\n\n",
  "hints_text": "Very useful :+1: \r\nI would add:\r\n```\r\n    try:\r\n        c.attrs[\"units\"] = a.attrs[\"units\"] + '*' + b.attrs[\"units\"]\r\n    except KeyError:\r\n        pass\r\n```\r\nto preserve units - but I am not sure that is in scope for xarray.\nit is not, but we have been working on [unit aware arrays with `pint`](https://github.com/pydata/xarray/issues/3594). Once that is done, unit propagation should work automatically.",
  "created_at": "2021-05-23T13:03:42Z",
  "version": "0.18",
  "FAIL_TO_PASS": "[\"xarray/tests/test_computation.py::test_cross[a0-b0-ae0-be0-dim_0--1-False]\", \"xarray/tests/test_computation.py::test_cross[a1-b1-ae1-be1-dim_0--1-False]\", \"xarray/tests/test_computation.py::test_cross[a2-b2-ae2-be2-dim_0--1-False]\", \"xarray/tests/test_computation.py::test_cross[a3-b3-ae3-be3-dim_0--1-False]\", \"xarray/tests/test_computation.py::test_cross[a4-b4-ae4-be4-cartesian-1-False]\", \"xarray/tests/test_computation.py::test_cross[a5-b5-ae5-be5-cartesian--1-False]\", \"xarray/tests/test_computation.py::test_cross[a6-b6-ae6-be6-cartesian--1-False]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_computation.py::test_signature_properties\", \"xarray/tests/test_computation.py::test_result_name\", \"xarray/tests/test_computation.py::test_ordered_set_union\", \"xarray/tests/test_computation.py::test_ordered_set_intersection\", \"xarray/tests/test_computation.py::test_join_dict_keys\", \"xarray/tests/test_computation.py::test_collect_dict_values\", \"xarray/tests/test_computation.py::test_apply_identity\", \"xarray/tests/test_computation.py::test_apply_two_inputs\", \"xarray/tests/test_computation.py::test_apply_1d_and_0d\", \"xarray/tests/test_computation.py::test_apply_two_outputs\", \"xarray/tests/test_computation.py::test_apply_dask_parallelized_two_outputs\", \"xarray/tests/test_computation.py::test_apply_input_core_dimension\", \"xarray/tests/test_computation.py::test_apply_output_core_dimension\", \"xarray/tests/test_computation.py::test_apply_exclude\", \"xarray/tests/test_computation.py::test_apply_groupby_add\", \"xarray/tests/test_computation.py::test_unified_dim_sizes\", \"xarray/tests/test_computation.py::test_broadcast_compat_data_1d\", \"xarray/tests/test_computation.py::test_broadcast_compat_data_2d\", \"xarray/tests/test_computation.py::test_keep_attrs\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[default]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[False]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[True]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[override]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[no_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[default]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[False]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[True]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[override]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[no_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[default]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[False]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[True]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[override]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[no_conflicts]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-coord]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-data]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-dim]\", \"xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-coord]\", \"xarray/tests/test_computation.py::test_dataset_join\", \"xarray/tests/test_computation.py::test_apply_dask\", \"xarray/tests/test_computation.py::test_apply_dask_parallelized_one_arg\", \"xarray/tests/test_computation.py::test_apply_dask_parallelized_two_args\", \"xarray/tests/test_computation.py::test_apply_dask_parallelized_errors\", \"xarray/tests/test_computation.py::test_apply_dask_multiple_inputs\", \"xarray/tests/test_computation.py::test_apply_dask_new_output_dimension\", \"xarray/tests/test_computation.py::test_apply_dask_new_output_sizes\", \"xarray/tests/test_computation.py::test_vectorize\", \"xarray/tests/test_computation.py::test_vectorize_dask\", \"xarray/tests/test_computation.py::test_vectorize_dask_dtype\", \"xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array0]\", \"xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array1]\", \"xarray/tests/test_computation.py::test_vectorize_exclude_dims\", \"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\", \"xarray/tests/test_computation.py::test_corr_only_dataarray\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-1]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-0]\", \"xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-1]\", \"xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-0]\", \"xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-1]\", \"xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-0]\", \"xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-1]\", \"xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-0]\", \"xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-1]\", \"xarray/tests/test_computation.py::test_corr[None-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr[None-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr[None-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_corr[time-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr[time-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr[time-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a0-da_b0]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a1-da_b1]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a2-da_b2]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a3-da_b3]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a4-da_b4]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a5-da_b5]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a6-da_b6]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a7-da_b7]\", \"xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a8-da_b8]\", \"xarray/tests/test_computation.py::test_corr_dtype_error\", \"xarray/tests/test_computation.py::test_autocov[None-da_a0]\", \"xarray/tests/test_computation.py::test_autocov[None-da_a1]\", \"xarray/tests/test_computation.py::test_autocov[None-da_a2]\", \"xarray/tests/test_computation.py::test_autocov[None-da_a3]\", \"xarray/tests/test_computation.py::test_autocov[None-da_a4]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a0]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a1]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a2]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a3]\", \"xarray/tests/test_computation.py::test_autocov[time-da_a4]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a0]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a1]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a2]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a3]\", \"xarray/tests/test_computation.py::test_autocov[x-da_a4]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a0]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a1]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a2]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a3]\", \"xarray/tests/test_computation.py::test_autocov[dim3-da_a4]\", \"xarray/tests/test_computation.py::test_vectorize_dask_new_output_dims\", \"xarray/tests/test_computation.py::test_output_wrong_number\", \"xarray/tests/test_computation.py::test_output_wrong_dims\", \"xarray/tests/test_computation.py::test_output_wrong_dim_size\", \"xarray/tests/test_computation.py::test_dot[True]\", \"xarray/tests/test_computation.py::test_dot[False]\", \"xarray/tests/test_computation.py::test_dot_align_coords[True]\", \"xarray/tests/test_computation.py::test_dot_align_coords[False]\", \"xarray/tests/test_computation.py::test_where\", \"xarray/tests/test_computation.py::test_polyval[True-True]\", \"xarray/tests/test_computation.py::test_polyval[True-False]\", \"xarray/tests/test_computation.py::test_polyval[False-True]\", \"xarray/tests/test_computation.py::test_polyval[False-False]\", \"xarray/tests/test_computation.py::test_cross[a0-b0-ae0-be0-dim_0--1-True]\", \"xarray/tests/test_computation.py::test_cross[a1-b1-ae1-be1-dim_0--1-True]\", \"xarray/tests/test_computation.py::test_cross[a2-b2-ae2-be2-dim_0--1-True]\", \"xarray/tests/test_computation.py::test_cross[a3-b3-ae3-be3-dim_0--1-True]\", \"xarray/tests/test_computation.py::test_cross[a4-b4-ae4-be4-cartesian-1-True]\", \"xarray/tests/test_computation.py::test_cross[a5-b5-ae5-be5-cartesian--1-True]\", \"xarray/tests/test_computation.py::test_cross[a6-b6-ae6-be6-cartesian--1-True]\"]",
  "environment_setup_commit": "4f1e2d37b662079e830c9672400fabc19b44a376",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.889856",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}