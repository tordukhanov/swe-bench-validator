{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13368",
  "base_commit": "afd432137fd840adc182f0bad87f405cb80efac7",
  "patch": "diff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py\n--- a/sklearn/model_selection/_validation.py\n+++ b/sklearn/model_selection/_validation.py\n@@ -876,10 +876,11 @@ def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,\n             float_min = np.finfo(predictions.dtype).min\n             default_values = {'decision_function': float_min,\n                               'predict_log_proba': float_min,\n-                              'predict_proba': 0}\n+                              'predict_proba': 0.0}\n             predictions_for_all_classes = np.full((_num_samples(predictions),\n                                                    n_classes),\n-                                                  default_values[method])\n+                                                  default_values[method],\n+                                                  predictions.dtype)\n             predictions_for_all_classes[:, estimator.classes_] = predictions\n             predictions = predictions_for_all_classes\n     return predictions, test\n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_validation.py b/sklearn/model_selection/tests/test_validation.py\n--- a/sklearn/model_selection/tests/test_validation.py\n+++ b/sklearn/model_selection/tests/test_validation.py\n@@ -975,6 +975,26 @@ def test_cross_val_predict_pandas():\n         cross_val_predict(clf, X_df, y_ser)\n \n \n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+def test_cross_val_predict_unbalanced():\n+    X, y = make_classification(n_samples=100, n_features=2, n_redundant=0,\n+                               n_informative=2, n_clusters_per_class=1,\n+                               random_state=1)\n+    # Change the first sample to a new class\n+    y[0] = 2\n+    clf = LogisticRegression(random_state=1)\n+    cv = StratifiedKFold(n_splits=2, random_state=1)\n+    train, test = list(cv.split(X, y))\n+    yhat_proba = cross_val_predict(clf, X, y, cv=cv, method=\"predict_proba\")\n+    assert y[test[0]][0] == 2  # sanity check for further assertions\n+    assert np.all(yhat_proba[test[0]][:, 2] == 0)\n+    assert np.all(yhat_proba[test[0]][:, 0:1] > 0)\n+    assert np.all(yhat_proba[test[1]] > 0)\n+    assert_array_almost_equal(yhat_proba.sum(axis=1), np.ones(y.shape),\n+                              decimal=12)\n+\n+\n @pytest.mark.filterwarnings('ignore: You should specify a value')  # 0.22\n def test_cross_val_score_sparse_fit_params():\n     iris = load_iris()\n",
  "problem_statement": "cross_val_predict returns bad prediction when evaluated on a dataset with very few samples\n#### Description\r\n`cross_val_predict` returns bad prediction when evaluated on a dataset with very few samples on 1 class, causing class being ignored on some CV splits.\r\n\r\n#### Steps/Code to Reproduce\r\n```python\r\nfrom sklearn.datasets import *\r\nfrom sklearn.linear_model import *\r\nfrom sklearn.model_selection import *\r\nX, y = make_classification(n_samples=100, n_features=2, n_redundant=0, n_informative=2,\r\n                           random_state=1, n_clusters_per_class=1)\r\n# Change the first sample to a new class\r\ny[0] = 2\r\nclf = LogisticRegression()\r\ncv = StratifiedKFold(n_splits=2, random_state=1)\r\ntrain, test = list(cv.split(X, y))\r\nyhat_proba = cross_val_predict(clf, X, y, cv=cv, method=\"predict_proba\")\r\nprint(yhat_proba)\r\n```\r\n\r\n#### Expected Results\r\n```\r\n[[0.06105412 0.93894588 0.        ]\r\n [0.92512247 0.07487753 0.        ]\r\n [0.93896471 0.06103529 0.        ]\r\n [0.04345507 0.95654493 0.        ]\r\n```\r\n\r\n#### Actual Results\r\n```\r\n[[0. 0. 0.        ]\r\n [0. 0. 0.        ]\r\n [0. 0. 0.        ]\r\n [0. 0. 0.        ]\r\n```\r\n#### Versions\r\nVerified on the scikit latest dev version.\r\n\n",
  "hints_text": "",
  "created_at": "2019-03-01T17:46:46Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_unbalanced\"]",
  "PASS_TO_PASS": "[\"sklearn/model_selection/tests/test_validation.py::test_cross_val_score\", \"sklearn/model_selection/tests/test_validation.py::test_cross_validate_many_jobs\", \"sklearn/model_selection/tests/test_validation.py::test_cross_validate_invalid_scoring_param\", \"sklearn/model_selection/tests/test_validation.py::test_cross_validate\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_predict_groups\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_pandas\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_mask\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_precomputed\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_fit_params\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_score_func\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_errors\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_regression\", \"sklearn/model_selection/tests/test_validation.py::test_permutation_score\", \"sklearn/model_selection/tests/test_validation.py::test_permutation_test_score_allow_nans\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_allow_nans\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_multilabel\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_decision_function_shape\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_predict_proba_shape\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_predict_log_proba_shape\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_input_types\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_pandas\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_sparse_fit_params\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_unsupervised\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_verbose\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_incremental_learning_not_possible\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_incremental_learning\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_incremental_learning_unsupervised\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_batch_and_incremental_learning_are_equal\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_n_sample_range_out_of_bounds\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_remove_duplicate_sample_sizes\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_with_boolean_indices\", \"sklearn/model_selection/tests/test_validation.py::test_learning_curve_with_shuffle\", \"sklearn/model_selection/tests/test_validation.py::test_validation_curve\", \"sklearn/model_selection/tests/test_validation.py::test_validation_curve_clone_estimator\", \"sklearn/model_selection/tests/test_validation.py::test_validation_curve_cv_splits_consistency\", \"sklearn/model_selection/tests/test_validation.py::test_check_is_permutation\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_sparse_prediction\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_with_method\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_method_checking\", \"sklearn/model_selection/tests/test_validation.py::test_gridsearchcv_cross_val_predict_with_method\", \"sklearn/model_selection/tests/test_validation.py::test_cross_val_predict_class_subset\", \"sklearn/model_selection/tests/test_validation.py::test_score_memmap\", \"sklearn/model_selection/tests/test_validation.py::test_permutation_test_score_pandas\", \"sklearn/model_selection/tests/test_validation.py::test_fit_and_score_failing\", \"sklearn/model_selection/tests/test_validation.py::test_fit_and_score_working\", \"sklearn/model_selection/tests/test_validation.py::test_fit_and_score_verbosity[False-three_params_scorer-[CV]\", \"sklearn/model_selection/tests/test_validation.py::test_fit_and_score_verbosity[True-three_params_scorer-[CV]\", \"sklearn/model_selection/tests/test_validation.py::test_fit_and_score_verbosity[True-scorer2-[CV]\", \"sklearn/model_selection/tests/test_validation.py::test_score\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.993304",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}