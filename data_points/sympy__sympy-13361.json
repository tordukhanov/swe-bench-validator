{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13361",
  "base_commit": "30379ea6e225e37833a764ac2da7b7fadf5fe374",
  "patch": "diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -371,7 +371,7 @@ def calc_part(expr, nexpr):\n                 x = fzero\n             nint += int(no*(mpf_cmp(x or fzero, fzero) == no))\n         nint = from_int(nint)\n-        return nint, fastlog(nint) + 10\n+        return nint, INF\n \n     re_, im_, re_acc, im_acc = None, None, None, None\n \n",
  "test_patch": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -255,6 +255,8 @@ def test_evalf_integer_parts():\n     assert ceiling(x).evalf(subs={x: 3.*I}) == 3*I\n     assert ceiling(x).evalf(subs={x: 2. + 3*I}) == 2 + 3*I\n \n+    assert float((floor(1.5, evaluate=False)+1/9).evalf()) == 1 + 1/9\n+    assert float((floor(0.5, evaluate=False)+20).evalf()) == 20\n \n def test_evalf_trig_zero_detection():\n     a = sin(160*pi, evaluate=False)\n",
  "problem_statement": "evalf with subs argument incorrectly evaluates expressions with floor\n```\r\nx = Symbol('x')\r\nsrepr((floor(x)+20).evalf(subs={x:0.5}))\r\n```\r\nreturns `Float('16.0', precision=1)` instead of 20. (Python 3.6.1, SymPy 1.1.1). It seems that incorrect `precision=1` attribute is somehow attached to the result of `floor(0.5)`, which is why 20 is then rounded to the nearest power of 2. \r\n\r\nConsidering that `(floor(x)+20).subs({x:0.5}).evalf()` works correctly, perhaps a fix would be to make `expr.evalf(subs=dict)` pass its subs argument to `subs` first, i.e., act the same as `expr.subs(dict).evalf()`\r\n\r\nBased on a [Stack Overflow post](https://stackoverflow.com/a/46453201)\n",
  "hints_text": "",
  "created_at": "2017-09-28T13:22:32Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_evalf_integer_parts\"]",
  "PASS_TO_PASS": "[\"test_evalf_helpers\", \"test_evalf_basic\", \"test_cancellation\", \"test_evalf_powers\", \"test_evalf_rump\", \"test_evalf_complex\", \"test_evalf_complex_powers\", \"test_evalf_exponentiation\", \"test_evalf_complex_cancellation\", \"test_evalf_logs\", \"test_evalf_trig\", \"test_evalf_near_integers\", \"test_evalf_ramanujan\", \"test_evalf_bugs\", \"test_evalf_trig_zero_detection\", \"test_evalf_sum\", \"test_evalf_divergent_series\", \"test_evalf_product\", \"test_evalf_py_methods\", \"test_evalf_power_subs_bugs\", \"test_evalf_arguments\", \"test_implemented_function_evalf\", \"test_evaluate_false\", \"test_evalf_relational\", \"test_issue_5486\", \"test_issue_5486_bug\", \"test_bugs\", \"test_subs\", \"test_issue_4956_5204\", \"test_old_docstring\", \"test_issue_4806\", \"test_evalf_mul\", \"test_scaled_zero\", \"test_chop_value\", \"test_infinities\", \"test_to_mpmath\", \"test_issue_6632_evalf\", \"test_issue_4945\", \"test_evalf_integral\", \"test_issue_8821_highprec_from_str\", \"test_issue_8853\", \"test_issue_9326\", \"test_issue_10323\", \"test_AssocOp_Function\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.083068",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}