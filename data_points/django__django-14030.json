{
  "repo": "django/django",
  "instance_id": "django__django-14030",
  "base_commit": "277eea8fcced7f04f3800617f189beb349a3212e",
  "patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -14,6 +14,7 @@\n )\n from django.template.response import TemplateResponse\n from django.urls import NoReverseMatch, Resolver404, resolve, reverse\n+from django.utils.decorators import method_decorator\n from django.utils.functional import LazyObject\n from django.utils.module_loading import import_string\n from django.utils.text import capfirst\n@@ -357,7 +358,7 @@ def i18n_javascript(self, request, extra_context=None):\n         \"\"\"\n         return JavaScriptCatalog.as_view(packages=['django.contrib.admin'])(request)\n \n-    @never_cache\n+    @method_decorator(never_cache)\n     def logout(self, request, extra_context=None):\n         \"\"\"\n         Log out the user for the given HttpRequest.\n@@ -379,7 +380,7 @@ def logout(self, request, extra_context=None):\n         request.current_app = self.name\n         return LogoutView.as_view(**defaults)(request)\n \n-    @never_cache\n+    @method_decorator(never_cache)\n     def login(self, request, extra_context=None):\n         \"\"\"\n         Display the login form for the given HttpRequest.\n@@ -514,7 +515,7 @@ def get_app_list(self, request):\n \n         return app_list\n \n-    @never_cache\n+    @method_decorator(never_cache)\n     def index(self, request, extra_context=None):\n         \"\"\"\n         Display the main admin index page, which lists all of the installed\ndiff --git a/django/views/decorators/cache.py b/django/views/decorators/cache.py\n--- a/django/views/decorators/cache.py\n+++ b/django/views/decorators/cache.py\n@@ -1,5 +1,6 @@\n from functools import wraps\n \n+from django.http import HttpRequest\n from django.middleware.cache import CacheMiddleware\n from django.utils.cache import add_never_cache_headers, patch_cache_control\n from django.utils.decorators import decorator_from_middleware_with_args\n@@ -28,6 +29,12 @@ def cache_control(**kwargs):\n     def _cache_controller(viewfunc):\n         @wraps(viewfunc)\n         def _cache_controlled(request, *args, **kw):\n+            if not isinstance(request, HttpRequest):\n+                raise TypeError(\n+                    \"cache_control didn't receive an HttpRequest. If you are \"\n+                    \"decorating a classmethod, be sure to use \"\n+                    \"@method_decorator.\"\n+                )\n             response = viewfunc(request, *args, **kw)\n             patch_cache_control(response, **kwargs)\n             return response\n@@ -41,6 +48,11 @@ def never_cache(view_func):\n     \"\"\"\n     @wraps(view_func)\n     def _wrapped_view_func(request, *args, **kwargs):\n+        if not isinstance(request, HttpRequest):\n+            raise TypeError(\n+                \"never_cache didn't receive an HttpRequest. If you are \"\n+                \"decorating a classmethod, be sure to use @method_decorator.\"\n+            )\n         response = view_func(request, *args, **kwargs)\n         add_never_cache_headers(response)\n         return response\n",
  "test_patch": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -470,7 +470,7 @@ def a_view(request):\n         self.assertIsNone(r.get('X-Frame-Options', None))\n \n \n-class NeverCacheDecoratorTest(TestCase):\n+class NeverCacheDecoratorTest(SimpleTestCase):\n     def test_never_cache_decorator(self):\n         @never_cache\n         def a_view(request):\n@@ -480,3 +480,30 @@ def a_view(request):\n             set(r.headers['Cache-Control'].split(', ')),\n             {'max-age=0', 'no-cache', 'no-store', 'must-revalidate', 'private'},\n         )\n+\n+    def test_never_cache_decorator_http_request(self):\n+        class MyClass:\n+            @never_cache\n+            def a_view(self, request):\n+                return HttpResponse()\n+        msg = (\n+            \"never_cache didn't receive an HttpRequest. If you are decorating \"\n+            \"a classmethod, be sure to use @method_decorator.\"\n+        )\n+        with self.assertRaisesMessage(TypeError, msg):\n+            MyClass().a_view(HttpRequest())\n+\n+\n+class CacheControlDecoratorTest(SimpleTestCase):\n+    def test_cache_control_decorator_http_request(self):\n+        class MyClass:\n+            @cache_control(a='b')\n+            def a_view(self, request):\n+                return HttpResponse()\n+\n+        msg = (\n+            \"cache_control didn't receive an HttpRequest. If you are \"\n+            \"decorating a classmethod, be sure to use @method_decorator.\"\n+        )\n+        with self.assertRaisesMessage(TypeError, msg):\n+            MyClass().a_view(HttpRequest())\n",
  "problem_statement": "Admin never_cache decorators needs method_decorator\nDescription\n\t\nThe login and logout views in Django's admin site are using the never_cache decorator, but they are both instance methods, so they need to use the method_decorator.\nThis is not a bug because the never_cache decorator is only operating on the response. The first argument to the decorator is supposed to be the request, but it is in-fact the admin_site instance (self). All the arguments are then passed to the view function and the decorator operate on the response.\nIf you try to use a different decorator that uses the request (such as required_http_methods) you will fail. \nAttributeError: 'CustomAdminSite' object has no attribute 'method'\nRelated issue from long time ago:\nhttps://code.djangoproject.com/ticket/18923\n",
  "hints_text": "Thanks for the report.\nâ€‹PR",
  "created_at": "2021-02-22T07:35:19Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_cache_control_decorator_http_request (decorators.tests.CacheControlDecoratorTest)\", \"test_never_cache_decorator_http_request (decorators.tests.NeverCacheDecoratorTest)\"]",
  "PASS_TO_PASS": "[\"Built-in decorators set certain attributes of the wrapped function.\", \"test_cache_page (decorators.tests.DecoratorsTest)\", \"Test for the require_safe decorator.\", \"The user_passes_test decorator can be applied multiple times (#9474).\", \"test_never_cache_decorator (decorators.tests.NeverCacheDecoratorTest)\", \"test_argumented (decorators.tests.MethodDecoratorTests)\", \"test_bad_iterable (decorators.tests.MethodDecoratorTests)\", \"@method_decorator can be used to decorate a class and its methods.\", \"test_descriptors (decorators.tests.MethodDecoratorTests)\", \"@method_decorator on a nonexistent method raises an error.\", \"@method_decorator on a non-callable attribute raises an error.\", \"A decorator that sets a new attribute on the method.\", \"test_preserve_attributes (decorators.tests.MethodDecoratorTests)\", \"test_preserve_signature (decorators.tests.MethodDecoratorTests)\", \"@method_decorator can accept a tuple of decorators.\", \"Ensures @xframe_options_deny properly sets the X-Frame-Options header.\", \"Ensures @xframe_options_exempt properly instructs the\", \"Ensures @xframe_options_sameorigin properly sets the X-Frame-Options\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.678711",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}