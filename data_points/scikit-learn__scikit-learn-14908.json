{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14908",
  "base_commit": "a1f514f2e1f20f71f282d867ae0e8db3a5c4a13c",
  "patch": "diff --git a/sklearn/dummy.py b/sklearn/dummy.py\n--- a/sklearn/dummy.py\n+++ b/sklearn/dummy.py\n@@ -143,13 +143,16 @@ def fit(self, X, y, sample_weight=None):\n          self.n_classes_,\n          self.class_prior_) = class_distribution(y, sample_weight)\n \n-        if (self.strategy == \"constant\" and\n-                any(constant[k] not in self.classes_[k]\n-                    for k in range(self.n_outputs_))):\n-            # Checking in case of constant strategy if the constant\n-            # provided by the user is in y.\n-            raise ValueError(\"The constant target value must be \"\n-                             \"present in training data\")\n+        if self.strategy == \"constant\":\n+            for k in range(self.n_outputs_):\n+                if not any(constant[k][0] == c for c in self.classes_[k]):\n+                    # Checking in case of constant strategy if the constant\n+                    # provided by the user is in y.\n+                    err_msg = (\"The constant target value must be present in \"\n+                               \"the training data. You provided constant={}. \"\n+                               \"Possible values are: {}.\"\n+                               .format(self.constant, list(self.classes_[k])))\n+                    raise ValueError(err_msg)\n \n         if self.n_outputs_ == 1 and not self.output_2d_:\n             self.n_classes_ = self.n_classes_[0]\n",
  "test_patch": "diff --git a/sklearn/tests/test_dummy.py b/sklearn/tests/test_dummy.py\n--- a/sklearn/tests/test_dummy.py\n+++ b/sklearn/tests/test_dummy.py\n@@ -534,14 +534,32 @@ def test_constant_strategy_multioutput():\n     _check_predict_proba(clf, X, y)\n \n \n-def test_constant_strategy_exceptions():\n-    X = [[0], [0], [0], [0]]  # ignored\n-    y = [2, 1, 2, 2]\n-    clf = DummyClassifier(strategy=\"constant\", random_state=0)\n-    assert_raises(ValueError, clf.fit, X, y)\n-    clf = DummyClassifier(strategy=\"constant\", random_state=0,\n-                          constant=[2, 0])\n-    assert_raises(ValueError, clf.fit, X, y)\n+@pytest.mark.parametrize('y, params, err_msg', [\n+    ([2, 1, 2, 2],\n+     {'random_state': 0},\n+     \"Constant.*has to be specified\"),\n+    ([2, 1, 2, 2],\n+     {'constant': [2, 0]},\n+     \"Constant.*should have shape\"),\n+    (np.transpose([[2, 1, 2, 2], [2, 1, 2, 2]]),\n+     {'constant': 2},\n+     \"Constant.*should have shape\"),\n+    ([2, 1, 2, 2],\n+     {'constant': 'my-constant'},\n+     \"constant=my-constant.*Possible values.*\\\\[1, 2]\"),\n+    (np.transpose([[2, 1, 2, 2], [2, 1, 2, 2]]),\n+     {'constant': [2, 'unknown']},\n+     \"constant=\\\\[2, 'unknown'].*Possible values.*\\\\[1, 2]\")],\n+    ids=[\"no-constant\", \"too-many-constant\", \"not-enough-output\",\n+         \"single-output\", \"multi-output\"]\n+)\n+def test_constant_strategy_exceptions(y, params, err_msg):\n+    X = [[0], [0], [0], [0]]\n+\n+    clf = DummyClassifier(strategy=\"constant\", **params)\n+\n+    with pytest.raises(ValueError, match=err_msg):\n+        clf.fit(X, y)\n \n \n def test_classification_sample_weight():\n",
  "problem_statement": "Error could be improved with DummyClassifier constant strategy when constant value not in training data\n```py\r\nfrom sklearn.dummy import DummyClassifier\r\nclf = DummyClassifier(strategy='constant', constant='not-in-dataset')\r\nclf.fit([[1., 2.]], ['class1'])\r\n```\r\n\r\nError:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-3-6096dbf560dd> in <module>\r\n----> 1 clf.fit([[1., 2.]], ['class1'])\r\n\r\n~/miniconda3/lib/python3.7/site-packages/sklearn/dummy.py in fit(self, X, y, sample_weight)\r\n    149             # Checking in case of constant strategy if the constant\r\n    150             # provided by the user is in y.\r\n--> 151             raise ValueError(\"The constant target value must be \"\r\n    152                              \"present in training data\")\r\n    153 \r\n\r\nValueError: The constant target value must be present in training data\r\n```\r\n\r\nWe could add in the error message what constant value was provided (in this case `not-in-dataset`) and what the possible values are. This could be something like this (improvement more than welcome):\r\n\r\n```\r\nThe constant target value must be present in the training data.\r\nYou provided: constant='not-in-dataset'. Possible values are: ['class1'].\r\n```\r\n\r\nContext: this was seen during the EuroScipy tutorial. The adult census dataset classes has a space in it at the beginning  ` <=50K` and the provided value did not have the space. Putting what the provided value was and what were the possible values would have helped the user fixing the problem.\r\n\r\n \n",
  "hints_text": "ok, I am looking at this issue\n@LakshKD we are having the scikit-learn sprint at EuroScipy. Unless you are here too, would you mind trying to find another issue to work on?\r\n\r\nHopefully you don't mind too much. Basically I think this issue is ideal for someone who is getting started with scikit-learn and I see you are already a scikit-learn contributor.\nI'm working on this\n> @LakshKD we are having the scikit-learn sprint at EuroScipy. Unless you are here too, would you mind trying to find another issue to work on?\r\n> \r\n> Hopefully you don't mind too much. Basically I think this issue is ideal for someone who is getting started with scikit-learn and I see you are already a scikit-learn contributor.\r\n\r\nok no problem\nThanks a lot for your understanding @LakshKD!",
  "created_at": "2019-09-06T12:22:44Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_dummy.py::test_constant_strategy_exceptions[single-output]\", \"sklearn/tests/test_dummy.py::test_constant_strategy_exceptions[multi-output]\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_dummy.py::test_most_frequent_and_prior_strategy\", \"sklearn/tests/test_dummy.py::test_most_frequent_and_prior_strategy_with_2d_column_y\", \"sklearn/tests/test_dummy.py::test_most_frequent_and_prior_strategy_multioutput\", \"sklearn/tests/test_dummy.py::test_stratified_strategy\", \"sklearn/tests/test_dummy.py::test_stratified_strategy_multioutput\", \"sklearn/tests/test_dummy.py::test_uniform_strategy\", \"sklearn/tests/test_dummy.py::test_uniform_strategy_multioutput\", \"sklearn/tests/test_dummy.py::test_string_labels\", \"sklearn/tests/test_dummy.py::test_classifier_score_with_None[y0-y_test0]\", \"sklearn/tests/test_dummy.py::test_classifier_score_with_None[y1-y_test1]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[stratified]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[most_frequent]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[prior]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[uniform]\", \"sklearn/tests/test_dummy.py::test_classifier_prediction_independent_of_X[constant]\", \"sklearn/tests/test_dummy.py::test_classifier_exceptions\", \"sklearn/tests/test_dummy.py::test_mean_strategy_regressor\", \"sklearn/tests/test_dummy.py::test_mean_strategy_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_regressor_exceptions\", \"sklearn/tests/test_dummy.py::test_median_strategy_regressor\", \"sklearn/tests/test_dummy.py::test_median_strategy_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_quantile_strategy_regressor\", \"sklearn/tests/test_dummy.py::test_quantile_strategy_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_quantile_invalid\", \"sklearn/tests/test_dummy.py::test_quantile_strategy_empty_train\", \"sklearn/tests/test_dummy.py::test_constant_strategy_regressor\", \"sklearn/tests/test_dummy.py::test_constant_strategy_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_y_mean_attribute_regressor\", \"sklearn/tests/test_dummy.py::test_unknown_strategey_regressor\", \"sklearn/tests/test_dummy.py::test_constants_not_specified_regressor\", \"sklearn/tests/test_dummy.py::test_constant_size_multioutput_regressor\", \"sklearn/tests/test_dummy.py::test_constant_strategy\", \"sklearn/tests/test_dummy.py::test_constant_strategy_multioutput\", \"sklearn/tests/test_dummy.py::test_constant_strategy_exceptions[no-constant]\", \"sklearn/tests/test_dummy.py::test_constant_strategy_exceptions[too-many-constant]\", \"sklearn/tests/test_dummy.py::test_constant_strategy_exceptions[not-enough-output]\", \"sklearn/tests/test_dummy.py::test_classification_sample_weight\", \"sklearn/tests/test_dummy.py::test_constant_strategy_sparse_target\", \"sklearn/tests/test_dummy.py::test_uniform_strategy_sparse_target_warning\", \"sklearn/tests/test_dummy.py::test_stratified_strategy_sparse_target\", \"sklearn/tests/test_dummy.py::test_most_frequent_and_prior_strategy_sparse_target\", \"sklearn/tests/test_dummy.py::test_dummy_regressor_sample_weight\", \"sklearn/tests/test_dummy.py::test_dummy_regressor_on_3D_array\", \"sklearn/tests/test_dummy.py::test_dummy_classifier_on_3D_array\", \"sklearn/tests/test_dummy.py::test_dummy_regressor_return_std\", \"sklearn/tests/test_dummy.py::test_regressor_score_with_None[y0-y_test0]\", \"sklearn/tests/test_dummy.py::test_regressor_score_with_None[y1-y_test1]\", \"sklearn/tests/test_dummy.py::test_regressor_prediction_independent_of_X[mean]\", \"sklearn/tests/test_dummy.py::test_regressor_prediction_independent_of_X[median]\", \"sklearn/tests/test_dummy.py::test_regressor_prediction_independent_of_X[quantile]\", \"sklearn/tests/test_dummy.py::test_regressor_prediction_independent_of_X[constant]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[stratified]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[most_frequent]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[prior]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[uniform]\", \"sklearn/tests/test_dummy.py::test_dtype_of_classifier_probas[constant]\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.009655",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}