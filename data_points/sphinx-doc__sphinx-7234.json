{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7234",
  "base_commit": "0e89979355c6c88adb960a7272c633d5afd34e67",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -14,7 +14,8 @@\n import re\n import warnings\n from types import ModuleType\n-from typing import Any, Callable, Dict, Iterator, List, Sequence, Set, Tuple, Union\n+from typing import Any, Callable, Dict, Iterator, List, Sequence, Set, Tuple, Type, Union\n+from unittest.mock import patch\n \n from docutils.statemachine import StringList\n \n@@ -1056,6 +1057,62 @@ def add_directive_header(self, sig: str) -> None:\n             self.add_line('   :async:', sourcename)\n \n \n+class SingledispatchFunctionDocumenter(FunctionDocumenter):\n+    \"\"\"\n+    Specialized Documenter subclass for singledispatch'ed functions.\n+    \"\"\"\n+    objtype = 'singledispatch_function'\n+    directivetype = 'function'\n+    member_order = 30\n+\n+    # before FunctionDocumenter\n+    priority = FunctionDocumenter.priority + 1\n+\n+    @classmethod\n+    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n+                            ) -> bool:\n+        return (super().can_document_member(member, membername, isattr, parent) and\n+                inspect.is_singledispatch_function(member))\n+\n+    def add_directive_header(self, sig: str) -> None:\n+        sourcename = self.get_sourcename()\n+\n+        # intercept generated directive headers\n+        # TODO: It is very hacky to use mock to intercept header generation\n+        with patch.object(self, 'add_line') as add_line:\n+            super().add_directive_header(sig)\n+\n+        # output first line of header\n+        self.add_line(*add_line.call_args_list[0][0])\n+\n+        # inserts signature of singledispatch'ed functions\n+        for typ, func in self.object.registry.items():\n+            if typ is object:\n+                pass  # default implementation. skipped.\n+            else:\n+                self.annotate_to_first_argument(func, typ)\n+\n+                documenter = FunctionDocumenter(self.directive, '')\n+                documenter.object = func\n+                self.add_line('   %s%s' % (self.format_name(),\n+                                           documenter.format_signature()),\n+                              sourcename)\n+\n+        # output remains of directive header\n+        for call in add_line.call_args_list[1:]:\n+            self.add_line(*call[0])\n+\n+    def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n+        \"\"\"Annotate type hint to the first argument of function if needed.\"\"\"\n+        sig = inspect.signature(func)\n+        if len(sig.parameters) == 0:\n+            return\n+\n+        name = list(sig.parameters)[0]\n+        if name not in func.__annotations__:\n+            func.__annotations__[name] = typ\n+\n+\n class DecoratorDocumenter(FunctionDocumenter):\n     \"\"\"\n     Specialized Documenter subclass for decorator functions.\n@@ -1400,6 +1457,66 @@ def document_members(self, all_members: bool = False) -> None:\n         pass\n \n \n+class SingledispatchMethodDocumenter(MethodDocumenter):\n+    \"\"\"\n+    Specialized Documenter subclass for singledispatch'ed methods.\n+    \"\"\"\n+    objtype = 'singledispatch_method'\n+    directivetype = 'method'\n+    member_order = 50\n+\n+    # before MethodDocumenter\n+    priority = MethodDocumenter.priority + 1\n+\n+    @classmethod\n+    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n+                            ) -> bool:\n+        if super().can_document_member(member, membername, isattr, parent) and parent.object:\n+            meth = parent.object.__dict__.get(membername)\n+            return inspect.is_singledispatch_method(meth)\n+        else:\n+            return False\n+\n+    def add_directive_header(self, sig: str) -> None:\n+        sourcename = self.get_sourcename()\n+\n+        # intercept generated directive headers\n+        # TODO: It is very hacky to use mock to intercept header generation\n+        with patch.object(self, 'add_line') as add_line:\n+            super().add_directive_header(sig)\n+\n+        # output first line of header\n+        self.add_line(*add_line.call_args_list[0][0])\n+\n+        # inserts signature of singledispatch'ed functions\n+        meth = self.parent.__dict__.get(self.objpath[-1])\n+        for typ, func in meth.dispatcher.registry.items():\n+            if typ is object:\n+                pass  # default implementation. skipped.\n+            else:\n+                self.annotate_to_first_argument(func, typ)\n+\n+                documenter = MethodDocumenter(self.directive, '')\n+                documenter.object = func\n+                self.add_line('   %s%s' % (self.format_name(),\n+                                           documenter.format_signature()),\n+                              sourcename)\n+\n+        # output remains of directive header\n+        for call in add_line.call_args_list[1:]:\n+            self.add_line(*call[0])\n+\n+    def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n+        \"\"\"Annotate type hint to the first argument of function if needed.\"\"\"\n+        sig = inspect.signature(func, bound_method=True)\n+        if len(sig.parameters) == 0:\n+            return\n+\n+        name = list(sig.parameters)[0]\n+        if name not in func.__annotations__:\n+            func.__annotations__[name] = typ\n+\n+\n class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  # type: ignore\n     \"\"\"\n     Specialized Documenter subclass for attributes.\n@@ -1612,8 +1729,10 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_autodocumenter(DataDocumenter)\n     app.add_autodocumenter(DataDeclarationDocumenter)\n     app.add_autodocumenter(FunctionDocumenter)\n+    app.add_autodocumenter(SingledispatchFunctionDocumenter)\n     app.add_autodocumenter(DecoratorDocumenter)\n     app.add_autodocumenter(MethodDocumenter)\n+    app.add_autodocumenter(SingledispatchMethodDocumenter)\n     app.add_autodocumenter(AttributeDocumenter)\n     app.add_autodocumenter(PropertyDocumenter)\n     app.add_autodocumenter(InstanceAttributeDocumenter)\ndiff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -72,12 +72,14 @@ def setup_documenters(app: Any) -> None:\n         FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n         InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n         SlotsAttributeDocumenter, DataDeclarationDocumenter,\n+        SingledispatchFunctionDocumenter,\n     )\n     documenters = [\n         ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n         FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n         InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n         SlotsAttributeDocumenter, DataDeclarationDocumenter,\n+        SingledispatchFunctionDocumenter,\n     ]  # type: List[Type[Documenter]]\n     for documenter in documenters:\n         app.registry.add_documenter(documenter.objtype, documenter)\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -224,6 +224,26 @@ def isattributedescriptor(obj: Any) -> bool:\n         return False\n \n \n+def is_singledispatch_function(obj: Any) -> bool:\n+    \"\"\"Check if the object is singledispatch function.\"\"\"\n+    if (inspect.isfunction(obj) and\n+            hasattr(obj, 'dispatch') and\n+            hasattr(obj, 'register') and\n+            obj.dispatch.__module__ == 'functools'):\n+        return True\n+    else:\n+        return False\n+\n+\n+def is_singledispatch_method(obj: Any) -> bool:\n+    \"\"\"Check if the object is singledispatch method.\"\"\"\n+    try:\n+        from functools import singledispatchmethod  # type: ignore\n+        return isinstance(obj, singledispatchmethod)\n+    except ImportError:  # py35-37\n+        return False\n+\n+\n def isfunction(obj: Any) -> bool:\n     \"\"\"Check if the object is function.\"\"\"\n     return inspect.isfunction(unwrap(obj))\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/singledispatch.py b/tests/roots/test-ext-autodoc/target/singledispatch.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/singledispatch.py\n@@ -0,0 +1,19 @@\n+from functools import singledispatch\n+\n+\n+@singledispatch\n+def func(arg, kwarg=None):\n+    \"\"\"A function for general use.\"\"\"\n+    pass\n+\n+\n+@func.register(int)\n+def _func_int(arg, kwarg=None):\n+    \"\"\"A function for int.\"\"\"\n+    pass\n+\n+\n+@func.register(str)\n+def _func_str(arg, kwarg=None):\n+    \"\"\"A function for str.\"\"\"\n+    pass\ndiff --git a/tests/roots/test-ext-autodoc/target/singledispatchmethod.py b/tests/roots/test-ext-autodoc/target/singledispatchmethod.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/singledispatchmethod.py\n@@ -0,0 +1,20 @@\n+from functools import singledispatchmethod\n+\n+\n+class Foo:\n+    \"\"\"docstring\"\"\"\n+\n+    @singledispatchmethod\n+    def meth(self, arg, kwarg=None):\n+        \"\"\"A method for general use.\"\"\"\n+        pass\n+\n+    @meth.register(int)\n+    def _meth_int(self, arg, kwarg=None):\n+        \"\"\"A method for int.\"\"\"\n+        pass\n+\n+    @meth.register(str)\n+    def _meth_str(self, arg, kwarg=None):\n+        \"\"\"A method for str.\"\"\"\n+        pass\ndiff --git a/tests/test_autodoc.py b/tests/test_autodoc.py\n--- a/tests/test_autodoc.py\n+++ b/tests/test_autodoc.py\n@@ -1563,3 +1563,49 @@ def test_autodoc_for_egged_code(app):\n         '   :module: sample',\n         ''\n     ]\n+\n+\n+@pytest.mark.usefixtures('setup_test')\n+def test_singledispatch():\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.singledispatch', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.singledispatch',\n+        '',\n+        '',\n+        '.. py:function:: func(arg, kwarg=None)',\n+        '   func(arg: int, kwarg=None)',\n+        '   func(arg: str, kwarg=None)',\n+        '   :module: target.singledispatch',\n+        '',\n+        '   A function for general use.',\n+        '   '\n+    ]\n+\n+\n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='singledispatchmethod is available since python3.8')\n+@pytest.mark.usefixtures('setup_test')\n+def test_singledispatchmethod():\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.singledispatchmethod', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.singledispatchmethod',\n+        '',\n+        '',\n+        '.. py:class:: Foo',\n+        '   :module: target.singledispatchmethod',\n+        '',\n+        '   docstring',\n+        '   ',\n+        '   ',\n+        '   .. py:method:: Foo.meth(arg, kwarg=None)',\n+        '      Foo.meth(arg: int, kwarg=None)',\n+        '      Foo.meth(arg: str, kwarg=None)',\n+        '      :module: target.singledispatchmethod',\n+        '   ',\n+        '      A method for general use.',\n+        '      '\n+    ]\n",
  "problem_statement": "Support for `@singledispatch` functions\nIt would be nice if there was some mechanism to automagically pick up the overloads to a `@functools.singledispatch` function and list them together... e.g.\n\n```\n<Doc for the \"master\" function>\n<links to the available overloads>\n```\n\n",
  "hints_text": "",
  "created_at": "2020-03-01T13:26:01Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/test_autodoc.py::test_singledispatch\", \"tests/test_autodoc.py::test_singledispatchmethod\"]",
  "PASS_TO_PASS": "[\"tests/test_autodoc.py::test_parse_name\", \"tests/test_autodoc.py::test_format_signature\", \"tests/test_autodoc.py::test_get_doc\", \"tests/test_autodoc.py::test_new_documenter\", \"tests/test_autodoc.py::test_attrgetter_using\", \"tests/test_autodoc.py::test_py_module\", \"tests/test_autodoc.py::test_autodoc_decorator\", \"tests/test_autodoc.py::test_autodoc_exception\", \"tests/test_autodoc.py::test_autodoc_warnings\", \"tests/test_autodoc.py::test_autodoc_attributes\", \"tests/test_autodoc.py::test_autodoc_members\", \"tests/test_autodoc.py::test_autodoc_exclude_members\", \"tests/test_autodoc.py::test_autodoc_undoc_members\", \"tests/test_autodoc.py::test_autodoc_inherited_members\", \"tests/test_autodoc.py::test_autodoc_inherited_members_Base\", \"tests/test_autodoc.py::test_autodoc_inherited_members_None\", \"tests/test_autodoc.py::test_autodoc_imported_members\", \"tests/test_autodoc.py::test_autodoc_special_members\", \"tests/test_autodoc.py::test_autodoc_ignore_module_all\", \"tests/test_autodoc.py::test_autodoc_noindex\", \"tests/test_autodoc.py::test_autodoc_subclass_of_builtin_class\", \"tests/test_autodoc.py::test_autodoc_inner_class\", \"tests/test_autodoc.py::test_autodoc_classmethod\", \"tests/test_autodoc.py::test_autodoc_staticmethod\", \"tests/test_autodoc.py::test_autodoc_descriptor\", \"tests/test_autodoc.py::test_autodoc_c_module\", \"tests/test_autodoc.py::test_autodoc_member_order\", \"tests/test_autodoc.py::test_autodoc_module_scope\", \"tests/test_autodoc.py::test_autodoc_class_scope\", \"tests/test_autodoc.py::test_class_attributes\", \"tests/test_autodoc.py::test_instance_attributes\", \"tests/test_autodoc.py::test_slots\", \"tests/test_autodoc.py::test_enum_class\", \"tests/test_autodoc.py::test_descriptor_class\", \"tests/test_autodoc.py::test_autofunction_for_callable\", \"tests/test_autodoc.py::test_autofunction_for_method\", \"tests/test_autodoc.py::test_abstractmethods\", \"tests/test_autodoc.py::test_partialfunction\", \"tests/test_autodoc.py::test_imported_partialfunction_should_not_shown_without_imported_members\", \"tests/test_autodoc.py::test_bound_method\", \"tests/test_autodoc.py::test_coroutine\", \"tests/test_autodoc.py::test_partialmethod\", \"tests/test_autodoc.py::test_partialmethod_undoc_members\", \"tests/test_autodoc.py::test_autodoc_typed_instance_variables\", \"tests/test_autodoc.py::test_autodoc_Annotated\", \"tests/test_autodoc.py::test_autodoc_for_egged_code\"]",
  "environment_setup_commit": "50d2d289e150cb429de15770bdd48a723de8c45d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.038701",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}