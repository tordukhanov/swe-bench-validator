{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7831",
  "base_commit": "b56772102e138b0a5d83f02e0031eb075c854921",
  "patch": "diff --git a/sphinx/ext/autodoc/type_comment.py b/sphinx/ext/autodoc/type_comment.py\n--- a/sphinx/ext/autodoc/type_comment.py\n+++ b/sphinx/ext/autodoc/type_comment.py\n@@ -128,6 +128,9 @@ def update_annotations_using_type_comments(app: Sphinx, obj: Any, bound_method:\n \n             if 'return' not in obj.__annotations__:\n                 obj.__annotations__['return'] = type_sig.return_annotation\n+    except KeyError as exc:\n+        logger.warning(__(\"Failed to update signature for %r: parameter not found: %s\"),\n+                       obj, exc)\n     except NotImplementedError as exc:  # failed to ast.unparse()\n         logger.warning(__(\"Failed to parse type_comment for %r: %s\"), obj, exc)\n \ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n import builtins\n+import contextlib\n import enum\n import inspect\n import re\n@@ -421,6 +422,17 @@ def is_builtin_class_method(obj: Any, attr_name: str) -> bool:\n     return getattr(builtins, name, None) is cls\n \n \n+def _should_unwrap(subject: Callable) -> bool:\n+    \"\"\"Check the function should be unwrapped on getting signature.\"\"\"\n+    if (safe_getattr(subject, '__globals__', None) and\n+            subject.__globals__.get('__name__') == 'contextlib' and  # type: ignore\n+            subject.__globals__.get('__file__') == contextlib.__file__):  # type: ignore\n+        # contextmanger should be unwrapped\n+        return True\n+\n+    return False\n+\n+\n def signature(subject: Callable, bound_method: bool = False, follow_wrapped: bool = False\n               ) -> inspect.Signature:\n     \"\"\"Return a Signature object for the given *subject*.\n@@ -431,7 +443,10 @@ def signature(subject: Callable, bound_method: bool = False, follow_wrapped: boo\n     \"\"\"\n     try:\n         try:\n-            signature = inspect.signature(subject, follow_wrapped=follow_wrapped)\n+            if _should_unwrap(subject):\n+                signature = inspect.signature(subject)\n+            else:\n+                signature = inspect.signature(subject, follow_wrapped=follow_wrapped)\n         except ValueError:\n             # follow built-in wrappers up (ex. functools.lru_cache)\n             signature = inspect.signature(subject)\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/wrappedfunction.py b/tests/roots/test-ext-autodoc/target/wrappedfunction.py\n--- a/tests/roots/test-ext-autodoc/target/wrappedfunction.py\n+++ b/tests/roots/test-ext-autodoc/target/wrappedfunction.py\n@@ -1,8 +1,15 @@\n-# for py32 or above\n+from contextlib import contextmanager\n from functools import lru_cache\n+from typing import Generator\n \n \n @lru_cache(maxsize=None)\n def slow_function(message, timeout):\n     \"\"\"This function is slow.\"\"\"\n     print(message)\n+\n+\n+@contextmanager\n+def feeling_good(x: int, y: int) -> Generator:\n+    \"\"\"You'll feel better in this context!\"\"\"\n+    yield\ndiff --git a/tests/test_ext_autodoc_autofunction.py b/tests/test_ext_autodoc_autofunction.py\n--- a/tests/test_ext_autodoc_autofunction.py\n+++ b/tests/test_ext_autodoc_autofunction.py\n@@ -146,3 +146,16 @@ def test_wrapped_function(app):\n         '   This function is slow.',\n         '',\n     ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_wrapped_function_contextmanager(app):\n+    actual = do_autodoc(app, 'function', 'target.wrappedfunction.feeling_good')\n+    assert list(actual) == [\n+        '',\n+        '.. py:function:: feeling_good(x: int, y: int) -> Generator',\n+        '   :module: target.wrappedfunction',\n+        '',\n+        \"   You'll feel better in this context!\",\n+        '',\n+    ]\n",
  "problem_statement": "regression in 3.1.0 for methods which are `contextmanager`s and have a type comment\n**Describe the bug**\r\n\r\nmethods decorated with `@contextmanager` trigger errors similar to this when built with sphinx 3.1.0 (this worked in 3.0.4):\r\n\r\n```\r\nerror while formatting arguments for flake8.options.manager.OptionManager.group:\r\n```\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n$ git clone https://github.com/pycqa/flake8\r\n$ cd flake8\r\n$ tox -e docs\r\n```\r\n\r\n**Expected behavior**\r\nThis should work!\r\n\r\n**Your project**\r\nhttps://github.com/pycqa/flake8\r\n\r\n**Screenshots**\r\nN/A\r\n\r\n**Environment info**\r\n- OS: ubuntu 20.04\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0\r\n- Sphinx extensions:  sphinx-rtd-theme, sphinx-prompt\r\n- Extra tools: N/A\r\n\r\n**Additional context**\r\nN/A\r\n\r\nFrom a bisection, this is the commit which introduced the regression: 3a81ffa79afc42a409bb073a8ad83bbaefb271c4\r\n\r\nCC @tk0miya\n",
  "hints_text": "Might have similar cause to @classproperty issue described in #7805 \nNote: I confirmed with following Dockerfile:\r\n```\r\nFROM python:3.8-slim\r\n\r\nRUN apt update; apt install -y git make build-essential vim\r\nRUN git clone https://github.com/pycqa/flake8\r\nWORKDIR /flake8\r\nRUN git checkout 181bb46098dddf7e2d45319ea654b4b4d58c2840\r\nRUN pip3 install tox\r\nRUN tox -e docs --notest\r\nRUN sed --in-place -e 's/-W/-WT/' tox.ini\r\nRUN tox -e docs\r\n```\r\n\r\nI got this traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/events.py\", line 110, in emit\r\n    results.append(listener.handler(self.app, *args))\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/ext/autodoc/type_comment.py\", line 125, in update_annotations_using_type_comments\r\n    annotation = type_sig.parameters[param.name].annotation\r\nKeyError: 'kwds'\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/ext/autodoc/__init__.py\", line 419, in format_signature\r\n    args = self._call_format_args(**kwargs)\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/ext/autodoc/__init__.py\", line 404, in _call_format_args\r\n    return self.format_args()\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/ext/autodoc/__init__.py\", line 1745, in format_args\r\n    self.env.app.emit('autodoc-before-process-signature', self.object, True)\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/application.py\", line 450, in emit\r\n    return self.events.emit(event, *args, allowed_exceptions=allowed_exceptions)\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/events.py\", line 117, in emit\r\n    raise ExtensionError(__(\"Handler %r for event %r threw an exception\") %\r\nsphinx.errors.ExtensionError: Handler <function update_annotations_using_type_comments at 0x7fe24704fca0> for event 'autodoc-before-process-signature' threw an exception\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/cmd/build.py\", line 280, in build_main\r\n    app.build(args.force_all, filenames)\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/application.py\", line 348, in build\r\n    self.builder.build_update()\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/builders/__init__.py\", line 297, in build_update\r\n    self.build(to_build,\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/builders/__init__.py\", line 311, in build\r\n    updated_docnames = set(self.read())\r\n  File \"/usr/local/lib/python3.8/contextlib.py\", line 120, in __exit__\r\n    next(self.gen)\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/util/logging.py\", line 213, in pending_warnings\r\n    memhandler.flushTo(logger)\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/util/logging.py\", line 178, in flushTo\r\n    logger.handle(record)\r\n  File \"/usr/local/lib/python3.8/logging/__init__.py\", line 1587, in handle\r\n    self.callHandlers(record)\r\n  File \"/usr/local/lib/python3.8/logging/__init__.py\", line 1649, in callHandlers\r\n    hdlr.handle(record)\r\n  File \"/usr/local/lib/python3.8/logging/__init__.py\", line 946, in handle\r\n    rv = self.filter(record)\r\n  File \"/usr/local/lib/python3.8/logging/__init__.py\", line 807, in filter\r\n    result = f.filter(record)\r\n  File \"/flake8/.tox/docs/lib/python3.8/site-packages/sphinx/util/logging.py\", line 419, in filter\r\n    raise exc from record.exc_info[1]\r\nsphinx.errors.SphinxWarning: error while formatting arguments for flake8.processor.FileProcessor.inside_multiline:\r\n\r\nWarning, treated as error:\r\nerror while formatting arguments for flake8.processor.FileProcessor.inside_multiline:\r\nERROR: InvocationError for command /flake8/.tox/docs/bin/sphinx-build -E -WT -c docs/source/ -b html docs/source/ docs/build/html (exited with code 2)\r\n```",
  "created_at": "2020-06-13T16:20:46Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_autofunction.py::test_wrapped_function_contextmanager\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_autofunction.py::test_classes\", \"tests/test_ext_autodoc_autofunction.py::test_callable\", \"tests/test_ext_autodoc_autofunction.py::test_method\", \"tests/test_ext_autodoc_autofunction.py::test_builtin_function\", \"tests/test_ext_autodoc_autofunction.py::test_methoddescriptor\", \"tests/test_ext_autodoc_autofunction.py::test_decorated\", \"tests/test_ext_autodoc_autofunction.py::test_singledispatch\", \"tests/test_ext_autodoc_autofunction.py::test_cfunction\", \"tests/test_ext_autodoc_autofunction.py::test_wrapped_function\"]",
  "environment_setup_commit": "5afc77ee27fc01c57165ab260d3a76751f9ddb35",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.047034",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}