{
  "repo": "django/django",
  "instance_id": "django__django-13112",
  "base_commit": "09914ccf688974e068941f55412b930729bafa06",
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -582,7 +582,11 @@ def deconstruct(self):\n         if self.remote_field.parent_link:\n             kwargs['parent_link'] = self.remote_field.parent_link\n         if isinstance(self.remote_field.model, str):\n-            kwargs['to'] = self.remote_field.model.lower()\n+            if '.' in self.remote_field.model:\n+                app_label, model_name = self.remote_field.model.split('.')\n+                kwargs['to'] = '%s.%s' % (app_label, model_name.lower())\n+            else:\n+                kwargs['to'] = self.remote_field.model.lower()\n         else:\n             kwargs['to'] = self.remote_field.model._meta.label_lower\n         # If swappable is True, then see if we're actually pointing to the target\n",
  "test_patch": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,34 @@ class Meta:\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_reference_mixed_case_app_label(self):\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "problem_statement": "makemigrations crashes for ForeignKey with mixed-case app name.\nDescription\n\t\nWhen i run \"python3 manage.py migrate\" on Django 3.1b1 shows me that error (Please, note that the code works well in 3.0)\nValueError: The field DJ_RegLogin.Content.category was declared with a lazy reference to 'dj_reglogin.category', but app 'dj_reglogin' isn't installed.\nmodel.py (Conflict Part)\nclass Category(models.Model):\n\ttitle = models.CharField(max_length=100, db_index=True)\n\tslug = models.SlugField(max_length=100, db_index=True)\n\tclass Meta:\n\t\tverbose_name = 'Category'\n\t\tverbose_name_plural = 'Categories'\n\tdef __str__(self):\n\t\treturn self.title\n\tdef get_absolute_url(self):\n\t\treturn reverse('view_blog_category', None, kwargs={'slug': self.slug})\nclass Content(models.Model):\n\ttitle = models.CharField(max_length=100, unique=True)\n\tslug = models.SlugField(max_length=100, unique=True)\n\tbody = RichTextField(config_name='default')\n\tposted = models.DateTimeField(db_index=True, auto_now_add=True)\n\tsites = models.ManyToManyField(Site)\n\tip = models.GenericIPAddressField(editable=False)\n\tcategory = models.ForeignKey(Category, on_delete=models.CASCADE)\n\tuser = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False, editable=False)\n\tstatus = models.CharField(max_length=10, choices=STATUS_CHOICES, default='draft')\n\tdef __str__(self):\n\t\treturn self.title\n\tdef get_absolute_url(self):\n\t\treturn reverse('view_blog_post', None, kwargs={'slug': self.slug})\nsettings.py (Related to issue part)\nINSTALLED_APPS = [\n\t'DJ_RegLogin',\n\t'django.contrib.admin',\n\t'django.contrib.auth',\n\t'django.contrib.contenttypes',\n\t'django.contrib.sessions',\n\t'django.contrib.messages',\n\t'django.contrib.staticfiles',\n\t'social_django',\n\t'ckeditor',\n\t'django.contrib.sites',\n\t'django.contrib.flatpages',\n\t'django.contrib.sitemaps',\n]\napps.py\nfrom django.apps import AppConfig\nclass DJ_RegLoginConfig(AppConfig):\n\tname = 'DJ_RegLogin'\n\tverbose_name = \"Contents\"\n",
  "hints_text": "Thanks for the report. Regression in 9e1b6b8a66af4c2197e5b1b41eb9dbb36e4f6502. Reproduced at fbe82f82555bc25dccb476c749ca062f0b522be3.\nPotential fix: diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py index d517d7269b..894d931d50 100644 --- a/django/db/models/fields/related.py +++ b/django/db/models/fields/related.py @@ -582,7 +582,8 @@ class ForeignObject(RelatedField): if self.remote_field.parent_link: kwargs['parent_link'] = self.remote_field.parent_link if isinstance(self.remote_field.model, str): - kwargs['to'] = self.remote_field.model.lower() + app_label, model_name = self.remote_field.model.split('.') + kwargs['to'] = '%s.%s' % (app_label, model_name.lower()) else: kwargs['to'] = self.remote_field.model._meta.label_lower # If swappable is True, then see if we're actually pointing to the target\nThat fix looks good to me.\nWonder if a longer term solution is to use case insensitive identifier for app labels as well.\nReplying to Simon Charette: Wonder if a longer term solution is to use case insensitive identifier for app labels as well. Maybe, I'm afraid that it will create some regressions, since app labels were always ðŸ¤” case sensitive in migrations . This small patch should be fine for backport.\nAgreed, safer to stick to the less intrusive backport for the time being.",
  "created_at": "2020-06-26T04:51:38Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_reference_mixed_case_app_label (migrations.test_state.StateTests)\"]",
  "PASS_TO_PASS": "[\"test_abstract_model_children_inherit_indexes (migrations.test_state.ModelStateTests)\", \"test_bound_field_sanity_check (migrations.test_state.ModelStateTests)\", \"test_create_swappable (migrations.test_state.ModelStateTests)\", \"test_create_swappable_from_abstract (migrations.test_state.ModelStateTests)\", \"test_custom_manager_swappable (migrations.test_state.ModelStateTests)\", \"test_custom_model_base (migrations.test_state.ModelStateTests)\", \"test_explicit_index_name (migrations.test_state.ModelStateTests)\", \"test_fields_immutability (migrations.test_state.ModelStateTests)\", \"test_fields_ordering_equality (migrations.test_state.ModelStateTests)\", \"test_from_model_constraints (migrations.test_state.ModelStateTests)\", \"test_order_with_respect_to_private_field (migrations.test_state.ModelStateTests)\", \"test_repr (migrations.test_state.ModelStateTests)\", \"test_sanity_check_through (migrations.test_state.ModelStateTests)\", \"test_sanity_check_to (migrations.test_state.ModelStateTests)\", \"test_sanity_index_name (migrations.test_state.ModelStateTests)\", \"test_abstract_base (migrations.test_state.RelatedModelsTests)\", \"test_base (migrations.test_state.RelatedModelsTests)\", \"test_base_to_base_fk (migrations.test_state.RelatedModelsTests)\", \"test_base_to_subclass_fk (migrations.test_state.RelatedModelsTests)\", \"test_circle (migrations.test_state.RelatedModelsTests)\", \"test_direct_fk (migrations.test_state.RelatedModelsTests)\", \"test_direct_hidden_fk (migrations.test_state.RelatedModelsTests)\", \"test_direct_m2m (migrations.test_state.RelatedModelsTests)\", \"test_direct_m2m_self (migrations.test_state.RelatedModelsTests)\", \"test_fk_through_proxy (migrations.test_state.RelatedModelsTests)\", \"test_generic_fk (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_base (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_extern_fk (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_self (migrations.test_state.RelatedModelsTests)\", \"test_multiple_bases (migrations.test_state.RelatedModelsTests)\", \"test_multiple_mixed_bases (migrations.test_state.RelatedModelsTests)\", \"test_multiple_nested_bases (migrations.test_state.RelatedModelsTests)\", \"test_nested_abstract_base (migrations.test_state.RelatedModelsTests)\", \"test_nested_base (migrations.test_state.RelatedModelsTests)\", \"test_nested_fk (migrations.test_state.RelatedModelsTests)\", \"test_nested_proxy_base (migrations.test_state.RelatedModelsTests)\", \"test_proxy_base (migrations.test_state.RelatedModelsTests)\", \"test_two_sided (migrations.test_state.RelatedModelsTests)\", \"test_unrelated (migrations.test_state.RelatedModelsTests)\", \"test_add_relations (migrations.test_state.StateTests)\", \"test_apps_bulk_update (migrations.test_state.StateTests)\", \"test_choices_iterator (migrations.test_state.StateTests)\", \"test_create (migrations.test_state.StateTests)\", \"test_custom_base_manager (migrations.test_state.StateTests)\", \"test_custom_default_manager (migrations.test_state.StateTests)\", \"test_custom_default_manager_added_to_the_model_state (migrations.test_state.StateTests)\", \"test_custom_default_manager_named_objects_with_false_migration_flag (migrations.test_state.StateTests)\", \"test_dangling_references_throw_error (migrations.test_state.StateTests)\", \"test_equality (migrations.test_state.StateTests)\", \"test_ignore_order_wrt (migrations.test_state.StateTests)\", \"test_manager_refer_correct_model_version (migrations.test_state.StateTests)\", \"test_no_duplicate_managers (migrations.test_state.StateTests)\", \"test_real_apps (migrations.test_state.StateTests)\", \"test_reload_model_relationship_consistency (migrations.test_state.StateTests)\", \"test_reload_related_model_on_non_relational_fields (migrations.test_state.StateTests)\", \"test_remove_relations (migrations.test_state.StateTests)\", \"test_render (migrations.test_state.StateTests)\", \"test_render_model_inheritance (migrations.test_state.StateTests)\", \"test_render_model_with_multiple_inheritance (migrations.test_state.StateTests)\", \"test_render_project_dependencies (migrations.test_state.StateTests)\", \"test_render_unique_app_labels (migrations.test_state.StateTests)\", \"test_self_relation (migrations.test_state.StateTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.643899",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}