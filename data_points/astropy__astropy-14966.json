{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-14966",
  "base_commit": "f3f3b5def16a5a28ae655f51e08356e5f661ffb6",
  "patch": "diff --git a/astropy/table/groups.py b/astropy/table/groups.py\n--- a/astropy/table/groups.py\n+++ b/astropy/table/groups.py\n@@ -74,10 +74,15 @@ def _table_group_by(table, keys):\n             )\n         )\n \n+    # TODO: don't use represent_mixins_as_columns here, but instead ensure that\n+    # keys_sort.argsort(kind=\"stable\") works for all columns (including mixins).\n+\n     # If there is not already an available index and table_keys is a Table then ensure\n     # that all cols (including mixins) are in a form that can sorted with the code below.\n     if not table_index and isinstance(table_keys, Table):\n-        table_keys = represent_mixins_as_columns(table_keys)\n+        table_keys_sort = represent_mixins_as_columns(table_keys)\n+    else:\n+        table_keys_sort = table_keys\n \n     # Get the argsort index `idx_sort`, accounting for particulars\n     try:\n@@ -85,13 +90,15 @@ def _table_group_by(table, keys):\n         if table_index is not None:\n             idx_sort = table_index.sorted_data()\n         else:\n-            idx_sort = table_keys.argsort(kind=\"mergesort\")\n+            idx_sort = table_keys_sort.argsort(kind=\"stable\")\n         stable_sort = True\n     except TypeError:\n+        # TODO: is this still needed?\n+\n         # Some versions (likely 1.6 and earlier) of numpy don't support\n         # 'mergesort' for all data types.  MacOSX (Darwin) doesn't have a stable\n         # sort by default, nor does Windows, while Linux does (or appears to).\n-        idx_sort = table_keys.argsort()\n+        idx_sort = table_keys_sort.argsort()\n         stable_sort = platform.system() not in (\"Darwin\", \"Windows\")\n \n     # Finally do the actual sort of table_keys values\n@@ -136,21 +143,28 @@ def column_group_by(column, keys):\n     from .serialize import represent_mixins_as_columns\n     from .table import Table\n \n-    if isinstance(keys, Table):\n-        keys = represent_mixins_as_columns(keys)\n-        keys = keys.as_array()\n+    # TODO: don't use represent_mixins_as_columns here, but instead ensure that\n+    # keys_sort.argsort(kind=\"stable\") works for all columns (including mixins).\n \n-    if not isinstance(keys, np.ndarray):\n-        raise TypeError(f\"Keys input must be numpy array, but got {type(keys)}\")\n+    if isinstance(keys, Table):\n+        keys_sort = represent_mixins_as_columns(keys)\n+    else:\n+        keys_sort = keys\n \n-    if len(keys) != len(column):\n+    if len(keys_sort) != len(column):\n         raise ValueError(\n             \"Input keys array length {} does not match column length {}\".format(\n                 len(keys), len(column)\n             )\n         )\n \n-    idx_sort = keys.argsort()\n+    try:\n+        idx_sort = keys_sort.argsort(kind=\"stable\")\n+    except AttributeError:\n+        raise TypeError(\n+            f\"keys input ({keys.__class__.__name__}) must have an `argsort` method\"\n+        )\n+\n     keys = keys[idx_sort]\n \n     # Get all keys\n",
  "test_patch": "diff --git a/astropy/table/tests/conftest.py b/astropy/table/tests/conftest.py\n--- a/astropy/table/tests/conftest.py\n+++ b/astropy/table/tests/conftest.py\n@@ -204,8 +204,7 @@ def mixin_cols(request):\n     return cols\n \n \n-@pytest.fixture(params=[False, True])\n-def T1(request):\n+def _get_test_table():\n     T = QTable.read(\n         [\n             \" a b c d\",\n@@ -224,11 +223,46 @@ def T1(request):\n     T.meta.update({\"ta\": 1})\n     T[\"c\"].meta.update({\"a\": 1})\n     T[\"c\"].description = \"column c\"\n+    return T\n+\n+\n+@pytest.fixture()\n+def T1b(request):\n+    \"\"\"Basic table\"\"\"\n+    T = _get_test_table()\n+    return T\n+\n+\n+@pytest.fixture(params=[False, True])\n+def T1(request):\n+    \"\"\"Basic table with or without index on integer column a\"\"\"\n+    T = _get_test_table()\n     if request.param:\n         T.add_index(\"a\")\n     return T\n \n \n+@pytest.fixture(params=[False, True])\n+def T1q(request):\n+    \"\"\"Basic table where a column is integer or Quantity\"\"\"\n+    T = _get_test_table()\n+    if request.param:\n+        T[\"a\"] = T[\"a\"] * u.m\n+    return T\n+\n+\n+@pytest.fixture(params=[(False, False), (False, True), (True, False), (True, True)])\n+def T1m(request):\n+    \"\"\"Basic table with or without index on column a, where a is integer or Quantity\"\"\"\n+    T = _get_test_table()\n+    add_index, is_quantity = request.param\n+    if is_quantity:\n+        T[\"a\"] = T[\"a\"] * u.m\n+    if add_index:\n+        T.add_index(\"a\")\n+    return T\n+\n+\n @pytest.fixture(params=[Table, QTable])\n def operation_table_type(request):\n     return request.param\ndiff --git a/astropy/table/tests/test_groups.py b/astropy/table/tests/test_groups.py\n--- a/astropy/table/tests/test_groups.py\n+++ b/astropy/table/tests/test_groups.py\n@@ -6,6 +6,7 @@\n from astropy import coordinates, time\n from astropy import units as u\n from astropy.table import Column, NdarrayMixin, QTable, Table, table_helpers, unique\n+from astropy.time import Time\n from astropy.utils.compat import NUMPY_LT_1_22, NUMPY_LT_1_22_1\n from astropy.utils.exceptions import AstropyUserWarning\n \n@@ -14,22 +15,38 @@ def sort_eq(list1, list2):\n     return sorted(list1) == sorted(list2)\n \n \n-def test_column_group_by(T1):\n-    for masked in (False, True):\n-        t1 = QTable(T1, masked=masked)\n-        t1a = t1[\"a\"].copy()\n-\n-        # Group by a Column (i.e. numpy array)\n-        t1ag = t1a.group_by(t1[\"a\"])\n-        assert np.all(t1ag.groups.indices == np.array([0, 1, 4, 8]))\n-\n-        # Group by a Table\n-        t1ag = t1a.group_by(t1[\"a\", \"b\"])\n+def test_column_group_by(T1q):\n+    \"\"\"Test grouping a Column by various key types.\"\"\"\n+    # T1q[\"a\"] could be Column or Quantity, so force the object we want to group to be\n+    # Column. Then later we are using the \"a\" column as a grouping key.\n+    t1a = Column(T1q[\"a\"])\n+    unit = T1q[\"a\"].unit or 1\n+\n+    # Group by a Column (i.e. numpy array)\n+    t1ag = t1a.group_by(T1q[\"a\"])\n+    keys = t1ag.groups.keys\n+    assert np.all(t1ag.groups.indices == np.array([0, 1, 4, 8]))\n+    assert np.all(keys == np.array([0, 1, 2]) * unit)\n+\n+    # Group by a Table and numpy structured array\n+    for t1ag, key_unit in (\n+        (t1a.group_by(T1q[\"a\", \"b\"]), unit),\n+        (t1a.group_by(T1q[\"a\", \"b\"].as_array()), 1),\n+    ):\n         assert np.all(t1ag.groups.indices == np.array([0, 1, 3, 4, 5, 7, 8]))\n+        keys = t1ag.groups.keys\n+        assert keys.dtype.names == (\"a\", \"b\")\n+        assert np.all(keys[\"a\"] == np.array([0, 1, 1, 2, 2, 2]) * key_unit)\n+        assert np.all(keys[\"b\"] == np.array([\"a\", \"a\", \"b\", \"a\", \"b\", \"c\"]))\n \n-        # Group by a numpy structured array\n-        t1ag = t1a.group_by(t1[\"a\", \"b\"].as_array())\n-        assert np.all(t1ag.groups.indices == np.array([0, 1, 3, 4, 5, 7, 8]))\n+\n+def test_column_group_by_no_argsort(T1b):\n+    t1a = T1b[\"a\"]\n+    with pytest.raises(\n+        TypeError, match=r\"keys input \\(list\\) must have an `argsort` method\"\n+    ):\n+        # Pass a Python list with no argsort method\n+        t1a.group_by(list(range(len(t1a))))\n \n \n def test_table_group_by(T1):\n@@ -112,24 +129,42 @@ def test_table_group_by(T1):\n         ]\n \n \n-def test_groups_keys(T1):\n-    tg = T1.group_by(\"a\")\n+def test_groups_keys(T1m: QTable):\n+    tg = T1m.group_by(\"a\")\n+    unit = T1m[\"a\"].unit or 1\n     keys = tg.groups.keys\n     assert keys.dtype.names == (\"a\",)\n-    assert np.all(keys[\"a\"] == np.array([0, 1, 2]))\n+    assert np.all(keys[\"a\"] == np.array([0, 1, 2]) * unit)\n \n-    tg = T1.group_by([\"a\", \"b\"])\n+    tg = T1m.group_by([\"a\", \"b\"])\n     keys = tg.groups.keys\n     assert keys.dtype.names == (\"a\", \"b\")\n-    assert np.all(keys[\"a\"] == np.array([0, 1, 1, 2, 2, 2]))\n+    assert np.all(keys[\"a\"] == np.array([0, 1, 1, 2, 2, 2]) * unit)\n     assert np.all(keys[\"b\"] == np.array([\"a\", \"a\", \"b\", \"a\", \"b\", \"c\"]))\n \n     # Grouping by Column ignores column name\n-    tg = T1.group_by(T1[\"b\"])\n+    tg = T1m.group_by(T1m[\"b\"])\n     keys = tg.groups.keys\n     assert keys.dtype.names is None\n \n \n+def test_groups_keys_time(T1b: QTable):\n+    \"\"\"Group a table with a time column using that column as a key.\"\"\"\n+    T1b = T1b.copy()\n+    T1b[\"a\"] = Time(T1b[\"a\"], format=\"cxcsec\")\n+\n+    tg = T1b.group_by(\"a\")\n+    keys = tg.groups.keys\n+    assert keys.dtype.names == (\"a\",)\n+    assert np.all(keys[\"a\"] == Time(np.array([0, 1, 2]), format=\"cxcsec\"))\n+\n+    tg = T1b.group_by([\"a\", \"b\"])\n+    keys = tg.groups.keys\n+    assert keys.dtype.names == (\"a\", \"b\")\n+    assert np.all(keys[\"a\"] == Time(np.array([0, 1, 1, 2, 2, 2]), format=\"cxcsec\"))\n+    assert np.all(keys[\"b\"] == np.array([\"a\", \"a\", \"b\", \"a\", \"b\", \"c\"]))\n+\n+\n def test_groups_iterator(T1):\n     tg = T1.group_by(\"a\")\n     for ii, group in enumerate(tg.groups):\n",
  "problem_statement": "QTable: Group keys don't have a unit\n### Description\n\nWhen grouping a QTable with a column that contains a quantity, the keys only contain a float with a value, but not the full quantity:\r\n\r\n```Python\r\n>>> from astropy.table import QTable\r\n>>> import astropy.units as u\r\n>>> tbl = QTable({\"length\": [1., 1., 2., 3., 1., 2.,]*u.m})\r\n>>> gtbl = tbl.group_by('length')\r\n>>> for cols in gtbl.groups.keys:\r\n...     print(cols)\r\n...     print(dict(cols))\r\n... \r\nlength\r\n  m   \r\n------\r\n   1.0\r\n{'length': 1.0}\r\nlength\r\n  m   \r\n------\r\n   2.0\r\n{'length': 2.0}\r\nlength\r\n  m   \r\n------\r\n   3.0\r\n{'length': 3.0}\r\n```\r\n\n\n### Expected behavior\n\nThe keys should be complete, i.e. for a quantity column it should be a quantity with the proper unit.\n\n### How to Reproduce\n\n_No response_\n\n### Versions\n\n* Linux-6.1.0-9-amd64-x86_64-with-glibc2.36 (Debian bookworm)\r\n* Python 3.11.4 (main, Jun  7 2023, 10:13:09) [GCC 12.2.0]\r\n* astropy 5.2.1 (also checked with 5.3)\r\n* Numpy 1.24.2\r\n* pyerfa 2.0.0.3\r\n* Scipy 1.10.1\r\n* Matplotlib 3.6.3\r\n\n",
  "hints_text": "@olebole - this should be possible without too much disruption. I have an idea for a lightweight fix, but it might also be done as part of #14942.",
  "created_at": "2023-06-20T15:57:47Z",
  "version": "5.2",
  "FAIL_TO_PASS": "[\"astropy/table/tests/test_groups.py::test_column_group_by[True]\", \"astropy/table/tests/test_groups.py::test_column_group_by_no_argsort\", \"astropy/table/tests/test_groups.py::test_groups_keys_time\"]",
  "PASS_TO_PASS": "[\"astropy/table/tests/test_groups.py::test_column_group_by[False]\", \"astropy/table/tests/test_groups.py::test_table_group_by[False]\", \"astropy/table/tests/test_groups.py::test_table_group_by[True]\", \"astropy/table/tests/test_groups.py::test_groups_keys[T1m0]\", \"astropy/table/tests/test_groups.py::test_groups_keys[T1m1]\", \"astropy/table/tests/test_groups.py::test_groups_keys[T1m2]\", \"astropy/table/tests/test_groups.py::test_groups_keys[T1m3]\", \"astropy/table/tests/test_groups.py::test_groups_iterator[False]\", \"astropy/table/tests/test_groups.py::test_groups_iterator[True]\", \"astropy/table/tests/test_groups.py::test_grouped_copy[False]\", \"astropy/table/tests/test_groups.py::test_grouped_copy[True]\", \"astropy/table/tests/test_groups.py::test_grouped_slicing[False]\", \"astropy/table/tests/test_groups.py::test_grouped_slicing[True]\", \"astropy/table/tests/test_groups.py::test_group_column_from_table[False]\", \"astropy/table/tests/test_groups.py::test_group_column_from_table[True]\", \"astropy/table/tests/test_groups.py::test_table_groups_mask_index[False]\", \"astropy/table/tests/test_groups.py::test_table_groups_mask_index[True]\", \"astropy/table/tests/test_groups.py::test_table_groups_array_index[False]\", \"astropy/table/tests/test_groups.py::test_table_groups_array_index[True]\", \"astropy/table/tests/test_groups.py::test_table_groups_slicing[False]\", \"astropy/table/tests/test_groups.py::test_table_groups_slicing[True]\", \"astropy/table/tests/test_groups.py::test_grouped_item_access[False]\", \"astropy/table/tests/test_groups.py::test_grouped_item_access[True]\", \"astropy/table/tests/test_groups.py::test_mutable_operations[False]\", \"astropy/table/tests/test_groups.py::test_mutable_operations[True]\", \"astropy/table/tests/test_groups.py::test_group_by_masked[False]\", \"astropy/table/tests/test_groups.py::test_group_by_masked[True]\", \"astropy/table/tests/test_groups.py::test_group_by_errors[False]\", \"astropy/table/tests/test_groups.py::test_group_by_errors[True]\", \"astropy/table/tests/test_groups.py::test_groups_keys_meta[False]\", \"astropy/table/tests/test_groups.py::test_groups_keys_meta[True]\", \"astropy/table/tests/test_groups.py::test_table_aggregate[False]\", \"astropy/table/tests/test_groups.py::test_table_aggregate[True]\", \"astropy/table/tests/test_groups.py::test_table_aggregate_reduceat[False]\", \"astropy/table/tests/test_groups.py::test_table_aggregate_reduceat[True]\", \"astropy/table/tests/test_groups.py::test_column_aggregate[False]\", \"astropy/table/tests/test_groups.py::test_column_aggregate[True]\", \"astropy/table/tests/test_groups.py::test_column_aggregate_f8\", \"astropy/table/tests/test_groups.py::test_table_filter\", \"astropy/table/tests/test_groups.py::test_column_filter\", \"astropy/table/tests/test_groups.py::test_group_mixins\", \"astropy/table/tests/test_groups.py::test_group_mixins_unsupported[col0]\", \"astropy/table/tests/test_groups.py::test_group_mixins_unsupported[col1]\", \"astropy/table/tests/test_groups.py::test_group_mixins_unsupported[col2]\", \"astropy/table/tests/test_groups.py::test_group_stable_sort[False]\", \"astropy/table/tests/test_groups.py::test_group_stable_sort[True]\"]",
  "environment_setup_commit": "362f6df12abf9bd769d4915fabf955c993ea22cf",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.543810",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}