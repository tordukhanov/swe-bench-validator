{
  "repo": "django/django",
  "instance_id": "django__django-12508",
  "base_commit": "b9e2355eb07938829a1a31ed7b60e5f72d4b92e3",
  "patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -26,7 +26,9 @@ class CommandError(Exception):\n     error) is the preferred way to indicate that something has gone\n     wrong in the execution of a command.\n     \"\"\"\n-    pass\n+    def __init__(self, *args, returncode=1, **kwargs):\n+        self.returncode = returncode\n+        super().__init__(*args, **kwargs)\n \n \n class SystemCheckError(CommandError):\n@@ -326,8 +328,8 @@ def run_from_argv(self, argv):\n         handle_default_options(options)\n         try:\n             self.execute(*args, **cmd_options)\n-        except Exception as e:\n-            if options.traceback or not isinstance(e, CommandError):\n+        except CommandError as e:\n+            if options.traceback:\n                 raise\n \n             # SystemCheckError takes care of its own formatting.\n@@ -335,7 +337,7 @@ def run_from_argv(self, argv):\n                 self.stderr.write(str(e), lambda x: x)\n             else:\n                 self.stderr.write('%s: %s' % (e.__class__.__name__, e))\n-            sys.exit(1)\n+            sys.exit(e.returncode)\n         finally:\n             try:\n                 connections.close_all()\ndiff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -1,3 +1,5 @@\n+import subprocess\n+\n from django.core.management.base import BaseCommand, CommandError\n from django.db import DEFAULT_DB_ALIAS, connections\n \n@@ -15,17 +17,27 @@ def add_arguments(self, parser):\n             '--database', default=DEFAULT_DB_ALIAS,\n             help='Nominates a database onto which to open a shell. Defaults to the \"default\" database.',\n         )\n+        parameters = parser.add_argument_group('parameters', prefix_chars='--')\n+        parameters.add_argument('parameters', nargs='*')\n \n     def handle(self, **options):\n         connection = connections[options['database']]\n         try:\n-            connection.client.runshell()\n-        except OSError:\n-            # Note that we're assuming OSError means that the client program\n-            # isn't installed. There's a possibility OSError would be raised\n-            # for some other reason, in which case this error message would be\n-            # inaccurate. Still, this message catches the common case.\n+            connection.client.runshell(options['parameters'])\n+        except FileNotFoundError:\n+            # Note that we're assuming the FileNotFoundError relates to the\n+            # command missing. It could be raised for some other reason, in\n+            # which case this error message would be inaccurate. Still, this\n+            # message catches the common case.\n             raise CommandError(\n                 'You appear not to have the %r program installed or on your path.' %\n                 connection.client.executable_name\n             )\n+        except subprocess.CalledProcessError as e:\n+            raise CommandError(\n+                '\"%s\" returned non-zero exit status %s.' % (\n+                    ' '.join(e.cmd),\n+                    e.returncode,\n+                ),\n+                returncode=e.returncode,\n+            )\ndiff --git a/django/db/backends/base/client.py b/django/db/backends/base/client.py\n--- a/django/db/backends/base/client.py\n+++ b/django/db/backends/base/client.py\n@@ -8,5 +8,5 @@ def __init__(self, connection):\n         # connection is an instance of BaseDatabaseWrapper.\n         self.connection = connection\n \n-    def runshell(self):\n+    def runshell(self, parameters):\n         raise NotImplementedError('subclasses of BaseDatabaseClient must provide a runshell() method')\ndiff --git a/django/db/backends/mysql/client.py b/django/db/backends/mysql/client.py\n--- a/django/db/backends/mysql/client.py\n+++ b/django/db/backends/mysql/client.py\n@@ -7,7 +7,7 @@ class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'mysql'\n \n     @classmethod\n-    def settings_to_cmd_args(cls, settings_dict):\n+    def settings_to_cmd_args(cls, settings_dict, parameters):\n         args = [cls.executable_name]\n         db = settings_dict['OPTIONS'].get('db', settings_dict['NAME'])\n         user = settings_dict['OPTIONS'].get('user', settings_dict['USER'])\n@@ -41,8 +41,9 @@ def settings_to_cmd_args(cls, settings_dict):\n             args += [\"--ssl-key=%s\" % client_key]\n         if db:\n             args += [db]\n+        args.extend(parameters)\n         return args\n \n-    def runshell(self):\n-        args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)\n+    def runshell(self, parameters):\n+        args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict, parameters)\n         subprocess.run(args, check=True)\ndiff --git a/django/db/backends/mysql/creation.py b/django/db/backends/mysql/creation.py\n--- a/django/db/backends/mysql/creation.py\n+++ b/django/db/backends/mysql/creation.py\n@@ -55,9 +55,9 @@ def _clone_test_db(self, suffix, verbosity, keepdb=False):\n         self._clone_db(source_database_name, target_database_name)\n \n     def _clone_db(self, source_database_name, target_database_name):\n-        dump_args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)[1:]\n+        dump_args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict, [])[1:]\n         dump_cmd = ['mysqldump', *dump_args[:-1], '--routines', '--events', source_database_name]\n-        load_cmd = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)\n+        load_cmd = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict, [])\n         load_cmd[-1] = target_database_name\n \n         with subprocess.Popen(dump_cmd, stdout=subprocess.PIPE) as dump_proc:\ndiff --git a/django/db/backends/oracle/client.py b/django/db/backends/oracle/client.py\n--- a/django/db/backends/oracle/client.py\n+++ b/django/db/backends/oracle/client.py\n@@ -8,10 +8,11 @@ class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'sqlplus'\n     wrapper_name = 'rlwrap'\n \n-    def runshell(self):\n+    def runshell(self, parameters):\n         conn_string = self.connection._connect_string()\n         args = [self.executable_name, \"-L\", conn_string]\n         wrapper_path = shutil.which(self.wrapper_name)\n         if wrapper_path:\n             args = [wrapper_path, *args]\n+        args.extend(parameters)\n         subprocess.run(args, check=True)\ndiff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -9,7 +9,7 @@ class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'psql'\n \n     @classmethod\n-    def runshell_db(cls, conn_params):\n+    def runshell_db(cls, conn_params, parameters):\n         args = [cls.executable_name]\n \n         host = conn_params.get('host', '')\n@@ -29,6 +29,7 @@ def runshell_db(cls, conn_params):\n         if port:\n             args += ['-p', str(port)]\n         args += [dbname]\n+        args.extend(parameters)\n \n         sigint_handler = signal.getsignal(signal.SIGINT)\n         subprocess_env = os.environ.copy()\n@@ -50,5 +51,5 @@ def runshell_db(cls, conn_params):\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n \n-    def runshell(self):\n-        DatabaseClient.runshell_db(self.connection.get_connection_params())\n+    def runshell(self, parameters):\n+        self.runshell_db(self.connection.get_connection_params(), parameters)\ndiff --git a/django/db/backends/sqlite3/client.py b/django/db/backends/sqlite3/client.py\n--- a/django/db/backends/sqlite3/client.py\n+++ b/django/db/backends/sqlite3/client.py\n@@ -6,9 +6,10 @@\n class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'sqlite3'\n \n-    def runshell(self):\n+    def runshell(self, parameters):\n         # TODO: Remove str() when dropping support for PY37.\n         # args parameter accepts path-like objects on Windows since Python 3.8.\n         args = [self.executable_name,\n                 str(self.connection.settings_dict['NAME'])]\n+        args.extend(parameters)\n         subprocess.run(args, check=True)\n",
  "test_patch": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -76,5 +76,23 @@ def test_ssl_certificate_is_added(self):\n                 },\n             }))\n \n-    def get_command_line_arguments(self, connection_settings):\n-        return DatabaseClient.settings_to_cmd_args(connection_settings)\n+    def test_parameters(self):\n+        self.assertEqual(\n+            ['mysql', 'somedbname', '--help'],\n+            self.get_command_line_arguments(\n+                {\n+                    'NAME': 'somedbname',\n+                    'USER': None,\n+                    'PASSWORD': None,\n+                    'HOST': None,\n+                    'PORT': None,\n+                    'OPTIONS': {},\n+                },\n+                ['--help'],\n+            ),\n+        )\n+\n+    def get_command_line_arguments(self, connection_settings, parameters=None):\n+        if parameters is None:\n+            parameters = []\n+        return DatabaseClient.settings_to_cmd_args(connection_settings, parameters)\ndiff --git a/tests/dbshell/test_oracle.py b/tests/dbshell/test_oracle.py\n--- a/tests/dbshell/test_oracle.py\n+++ b/tests/dbshell/test_oracle.py\n@@ -8,17 +8,19 @@\n \n @skipUnless(connection.vendor == 'oracle', 'Oracle tests')\n class OracleDbshellTests(SimpleTestCase):\n-    def _run_dbshell(self, rlwrap=False):\n+    def _run_dbshell(self, rlwrap=False, parameters=None):\n         \"\"\"Run runshell command and capture its arguments.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             self.subprocess_args = list(*args)\n             return CompletedProcess(self.subprocess_args, 0)\n \n+        if parameters is None:\n+            parameters = []\n         client = DatabaseClient(connection)\n         self.subprocess_args = None\n         with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             with mock.patch('shutil.which', return_value='/usr/bin/rlwrap' if rlwrap else None):\n-                client.runshell()\n+                client.runshell(parameters)\n         return self.subprocess_args\n \n     def test_without_rlwrap(self):\n@@ -32,3 +34,9 @@ def test_with_rlwrap(self):\n             self._run_dbshell(rlwrap=True),\n             ['/usr/bin/rlwrap', 'sqlplus', '-L', connection._connect_string()],\n         )\n+\n+    def test_parameters(self):\n+        self.assertEqual(\n+            self._run_dbshell(parameters=['-HELP']),\n+            ['sqlplus', '-L', connection._connect_string(), '-HELP'],\n+        )\ndiff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -9,7 +9,7 @@\n \n class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n \n-    def _run_it(self, dbinfo):\n+    def _run_it(self, dbinfo, parameters=None):\n         \"\"\"\n         That function invokes the runshell command, while mocking\n         subprocess.run(). It returns a 2-tuple with:\n@@ -21,8 +21,11 @@ def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n             # PostgreSQL environment variables.\n             self.pg_env = {key: env[key] for key in env if key.startswith('PG')}\n             return subprocess.CompletedProcess(self.subprocess_args, 0)\n+\n+        if parameters is None:\n+            parameters = []\n         with mock.patch('subprocess.run', new=_mock_subprocess_run):\n-            DatabaseClient.runshell_db(dbinfo)\n+            DatabaseClient.runshell_db(dbinfo, parameters)\n         return self.subprocess_args, self.pg_env\n \n     def test_basic(self):\n@@ -104,6 +107,12 @@ def test_accent(self):\n             )\n         )\n \n+    def test_parameters(self):\n+        self.assertEqual(\n+            self._run_it({'database': 'dbname'}, ['--help']),\n+            (['psql', 'dbname', '--help'], {}),\n+        )\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n@@ -114,6 +123,6 @@ def _mock_subprocess_run(*args, **kwargs):\n         # The default handler isn't SIG_IGN.\n         self.assertNotEqual(sigint_handler, signal.SIG_IGN)\n         with mock.patch('subprocess.run', new=_mock_subprocess_run):\n-            DatabaseClient.runshell_db({})\n+            DatabaseClient.runshell_db({}, [])\n         # dbshell restores the original handler.\n         self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\ndiff --git a/tests/dbshell/test_sqlite.py b/tests/dbshell/test_sqlite.py\n--- a/tests/dbshell/test_sqlite.py\n+++ b/tests/dbshell/test_sqlite.py\n@@ -9,15 +9,17 @@\n \n @skipUnless(connection.vendor == 'sqlite', 'SQLite tests.')\n class SqliteDbshellCommandTestCase(SimpleTestCase):\n-    def _run_dbshell(self):\n+    def _run_dbshell(self, parameters=None):\n         \"\"\"Run runshell command and capture its arguments.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             self.subprocess_args = list(*args)\n             return CompletedProcess(self.subprocess_args, 0)\n \n+        if parameters is None:\n+            parameters = []\n         client = DatabaseClient(connection)\n         with mock.patch('subprocess.run', new=_mock_subprocess_run):\n-            client.runshell()\n+            client.runshell(parameters)\n         return self.subprocess_args\n \n     def test_path_name(self):\n@@ -29,3 +31,13 @@ def test_path_name(self):\n                 self._run_dbshell(),\n                 ['sqlite3', 'test.db.sqlite3'],\n             )\n+\n+    def test_parameters(self):\n+        with mock.patch.dict(\n+            connection.settings_dict,\n+            {'NAME': Path('test.db.sqlite3')},\n+        ):\n+            self.assertEqual(\n+                self._run_dbshell(['-help']),\n+                ['sqlite3', 'test.db.sqlite3', '-help'],\n+            )\ndiff --git a/tests/dbshell/tests.py b/tests/dbshell/tests.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/dbshell/tests.py\n@@ -0,0 +1,17 @@\n+from unittest import mock\n+\n+from django.core.management import call_command\n+from django.core.management.base import CommandError\n+from django.db import connection\n+from django.test import SimpleTestCase\n+\n+\n+class DbshellCommandTestCase(SimpleTestCase):\n+    def test_command_missing(self):\n+        msg = (\n+            'You appear not to have the %r program installed or on your path.'\n+            % connection.client.executable_name\n+        )\n+        with self.assertRaisesMessage(CommandError, msg):\n+            with mock.patch('subprocess.run', side_effect=FileNotFoundError):\n+                call_command('dbshell')\ndiff --git a/tests/user_commands/management/commands/dance.py b/tests/user_commands/management/commands/dance.py\n--- a/tests/user_commands/management/commands/dance.py\n+++ b/tests/user_commands/management/commands/dance.py\n@@ -15,7 +15,7 @@ def add_arguments(self, parser):\n     def handle(self, *args, **options):\n         example = options[\"example\"]\n         if example == \"raise\":\n-            raise CommandError()\n+            raise CommandError(returncode=3)\n         if options['verbosity'] > 0:\n             self.stdout.write(\"I don't feel like dancing %s.\" % options[\"style\"])\n             self.stdout.write(','.join(options))\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -57,12 +57,14 @@ def test_system_exit(self):\n         \"\"\" Exception raised in a command should raise CommandError with\n             call_command, but SystemExit when run from command line\n         \"\"\"\n-        with self.assertRaises(CommandError):\n+        with self.assertRaises(CommandError) as cm:\n             management.call_command('dance', example=\"raise\")\n+        self.assertEqual(cm.exception.returncode, 3)\n         dance.Command.requires_system_checks = False\n         try:\n-            with captured_stderr() as stderr, self.assertRaises(SystemExit):\n+            with captured_stderr() as stderr, self.assertRaises(SystemExit) as cm:\n                 management.ManagementUtility(['manage.py', 'dance', '--example=raise']).execute()\n+            self.assertEqual(cm.exception.code, 3)\n         finally:\n             dance.Command.requires_system_checks = True\n         self.assertIn(\"CommandError\", stderr.getvalue())\n",
  "problem_statement": "Add support for ./manage.py dbshell -c SQL\nDescription\n\t\nAt the moment you cannot run specific SQL directly with dbshell:\n./manage.py dbshell -c \"select * from auth_group\"\nYou have to use pipes, that are not always convenient:\necho \"select * from auth_group\" | ./manage.py dbshell\nIf we add -c argument, it would be in sync with shell command, where you could provide commands already.\n",
  "hints_text": "This seems reasonable, at first glance at least. The trick will be to pass the command to each of the backend clients correctly, but there's no reason that's not possible right? Accepting on that basis. A PR is very welcome.\nIt should be easy to implement since we don’t need to use database-specific backend Something like that: from django.db import connection if command: cursor = connection.cursor() cursor.execute(command) # show `cursor.fetchall()` result\nany progress on this one? Is the previously suggested approach good enough? If so, I'd love to give a try?\nNo progress AKAIK. Maybe it would be easier to call database-specific CLI tool with right parameters than run cursor. Pros: No need to care about printing results (user could execute SELECT) Could run commands that are unique for the CLI (e.g. \\dt to show tables in psql) Cons: Each backend would need its own command to run (but we already have dbshell, so we know name of binary; just need a parameter to execute a query). Each backend would show results in its own format, so you cannot e. g. save result as cab file) Another completely different approach would be to pass all command line arguments provided to dbshell, e.g. after “—“ divider to database CLI app. For example: ./manage.py dbshell — -c “select * from auth_user”\nI don't think opening a cursor is the right way. My mental model of dbshell is that it always passes through to the underlying tool, which can have subtle implications on even what SQL/commands are accepted. I am actually most in favour of passing all arguments through after a -- divider as that is the most flexible.\n​https://github.com/django/django/pull/10186\n\"Ready for checkin\" is set by a patch reviewer. And the patch isn't ready for review without tests and documentation.\nSo the PR is closed due to missing Tests and Documentation. Does anybody care that I take this? I could make a PR based on the original one and add tests and docs\nAbsolutely, feel free to work on issues obviously stalled. Just credit original patch writers if appropriate.\n​PR",
  "created_at": "2020-02-29T08:15:13Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_basic_params_specified_in_settings (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_can_connect_using_sockets (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_fails_with_keyerror_on_incomplete_config (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_options_override_settings_proper_values (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_parameters (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_ssl_certificate_is_added (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_accent (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_basic (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_column (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_nopass (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_parameters (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"SIGINT is ignored in Python and passed to psql to abort queries.\", \"test_ssl_certificate (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_parameters (dbshell.test_sqlite.SqliteDbshellCommandTestCase)\", \"test_path_name (dbshell.test_sqlite.SqliteDbshellCommandTestCase)\", \"Exception raised in a command should raise CommandError with\"]",
  "PASS_TO_PASS": "[\"test_get_random_secret_key (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests)\", \"test_command_missing (dbshell.tests.DbshellCommandTestCase)\", \"test_call_command_no_checks (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests)\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)\", \"test_check_migrations (user_commands.tests.CommandTests)\", \"test_command (user_commands.tests.CommandTests)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests)\", \"test_command_style (user_commands.tests.CommandTests)\", \"BaseCommand.create_parser() passes kwargs to CommandParser.\", \"test_discover_commands_in_eggs (user_commands.tests.CommandTests)\", \"An unknown command raises CommandError\", \"test_find_command_without_PATH (user_commands.tests.CommandTests)\", \"test_language_preserved (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests)\", \"test_no_translations_deactivate_translations (user_commands.tests.CommandTests)\", \"test_output_transaction (user_commands.tests.CommandTests)\", \"test_subparser (user_commands.tests.CommandTests)\", \"test_subparser_dest_args (user_commands.tests.CommandTests)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests)\", \"test_disallowed_abbreviated_options (user_commands.tests.CommandRunTests)\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)\", \"test_skip_checks (user_commands.tests.CommandRunTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.628717",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}