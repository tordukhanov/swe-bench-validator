{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26122",
  "base_commit": "6391678cc16042ceebb1dec1a6e2aa224ce77366",
  "patch": "diff --git a/galleries/examples/misc/demo_ribbon_box.py b/galleries/examples/misc/demo_ribbon_box.py\n--- a/galleries/examples/misc/demo_ribbon_box.py\n+++ b/galleries/examples/misc/demo_ribbon_box.py\n@@ -86,7 +86,7 @@ def main():\n     background_gradient[:, :, :3] = [1, 1, 0]\n     background_gradient[:, :, 3] = [[0.1, 0.3], [0.3, 0.5]]  # alpha channel\n     ax.imshow(background_gradient, interpolation=\"bicubic\", zorder=0.1,\n-              extent=(0, 1, 0, 1), transform=ax.transAxes, aspect=\"auto\")\n+              extent=(0, 1, 0, 1), transform=ax.transAxes)\n \n     plt.show()\n \ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -5530,12 +5530,12 @@ def imshow(self, X, cmap=None, norm=None, *, aspect=None,\n \n         The input may either be actual RGB(A) data, or 2D scalar data, which\n         will be rendered as a pseudocolor image. For displaying a grayscale\n-        image set up the colormapping using the parameters\n+        image, set up the colormapping using the parameters\n         ``cmap='gray', vmin=0, vmax=255``.\n \n         The number of pixels used to render an image is set by the Axes size\n-        and the *dpi* of the figure. This can lead to aliasing artifacts when\n-        the image is resampled because the displayed image size will usually\n+        and the figure *dpi*. This can lead to aliasing artifacts when\n+        the image is resampled, because the displayed image size will usually\n         not match the size of *X* (see\n         :doc:`/gallery/images_contours_and_fields/image_antialiasing`).\n         The resampling can be controlled via the *interpolation* parameter\n@@ -5570,7 +5570,7 @@ def imshow(self, X, cmap=None, norm=None, *, aspect=None,\n \n             This parameter is ignored if *X* is RGB(A).\n \n-        aspect : {'equal', 'auto'} or float, default: :rc:`image.aspect`\n+        aspect : {'equal', 'auto'} or float or None, default: None\n             The aspect ratio of the Axes.  This parameter is particularly\n             relevant for images since it determines whether data pixels are\n             square.\n@@ -5585,6 +5585,11 @@ def imshow(self, X, cmap=None, norm=None, *, aspect=None,\n               that the data fit in the Axes. In general, this will result in\n               non-square pixels.\n \n+            Normally, None (the default) means to use :rc:`image.aspect`.  However, if\n+            the image uses a transform that does not contain the axes data transform,\n+            then None means to not modify the axes aspect at all (in that case, directly\n+            call `.Axes.set_aspect` if desired).\n+\n         interpolation : str, default: :rc:`image.interpolation`\n             The interpolation method used.\n \n@@ -5718,9 +5723,6 @@ def imshow(self, X, cmap=None, norm=None, *, aspect=None,\n         `~matplotlib.pyplot.imshow` expects RGB images adopting the straight\n         (unassociated) alpha representation.\n         \"\"\"\n-        if aspect is None:\n-            aspect = mpl.rcParams['image.aspect']\n-        self.set_aspect(aspect)\n         im = mimage.AxesImage(self, cmap=cmap, norm=norm,\n                               interpolation=interpolation, origin=origin,\n                               extent=extent, filternorm=filternorm,\n@@ -5728,6 +5730,13 @@ def imshow(self, X, cmap=None, norm=None, *, aspect=None,\n                               interpolation_stage=interpolation_stage,\n                               **kwargs)\n \n+        if aspect is None and not (\n+                im.is_transform_set()\n+                and not im.get_transform().contains_branch(self.transData)):\n+            aspect = mpl.rcParams['image.aspect']\n+        if aspect is not None:\n+            self.set_aspect(aspect)\n+\n         im.set_data(X)\n         im.set_alpha(alpha)\n         if im.get_clip_path() is None:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_image.py b/lib/matplotlib/tests/test_image.py\n--- a/lib/matplotlib/tests/test_image.py\n+++ b/lib/matplotlib/tests/test_image.py\n@@ -1491,3 +1491,14 @@ def test_axesimage_get_shape():\n     im.set_data(z)\n     assert im.get_shape() == (4, 3)\n     assert im.get_size() == im.get_shape()\n+\n+\n+def test_non_transdata_image_does_not_touch_aspect():\n+    ax = plt.figure().add_subplot()\n+    im = np.arange(4).reshape((2, 2))\n+    ax.imshow(im, transform=ax.transAxes)\n+    assert ax.get_aspect() == \"auto\"\n+    ax.imshow(im, transform=Affine2D().scale(2) + ax.transData)\n+    assert ax.get_aspect() == 1\n+    ax.imshow(im, transform=ax.transAxes, aspect=2)\n+    assert ax.get_aspect() == 2\n",
  "problem_statement": "imshow() should not modify axes aspect if transform != ax.transData.\nCurrently, imshow() automatically updates the axes aspect via the `aspect` kwarg; its default, None, means `rcParams[\"image.aspect\"]`, which is \"equal\" by default (i.e., square image pixels).\r\n\r\nIf the `transform` kwarg is also passed, and set to something else[1] than `ax.transData` (the default), then setting the aspect is clearly not useful (the image is not going to be drawn in data coordinates so it should not affect the relative size of x- and y-data).  In that case, the default of `aspect=None` should just mean \"don't modify the aspect\".\r\n\r\n[1] Really, this should be \"something that does not contains transData as a branch\", as in #13642.\r\n\r\nThe current behavior is the reason why #14057 and #14117 need to explicitly set the aspect to \"auto\" in or after the last imshow() call (otherwise, some head-scratching occurs).\r\n\r\nOn the other hand, making this change would once again lead to some seriously non-obvious interaction between parameters (the meaning of `aspect=None` depends on the value of `transform`), which I'm not sure is great either :/\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: linux\r\n  * Matplotlib version: master/any\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): qt5agg\r\n  * Python version: 37\r\n\r\n\n",
  "hints_text": "Hi,\r\nIf no one is working on this issue than i would like to give it a shot. Can you please guide how can i address this issue?\r\n\r\nThanks.\nI honestly do not think that this is a \"good first issue\", especially due to the part about `transData` being a branch of some other transform. So in order not to confuse newcomers too much, I think it makes sense to remove that first-issue-label.\nWhere is the transform kwarg?\r\n\r\nhttps://matplotlib.org/3.1.3/api/_as_gen/matplotlib.pyplot.imshow.html\nIt falls though via `**kwargs` to eventually hit https://matplotlib.org/3.1.3/api/_as_gen/matplotlib.artist.Artist.set_transform.html#matplotlib.artist.Artist.set_transform via at call to https://github.com/matplotlib/matplotlib/blob/cfd5463edaafd1a2300f9b122ccbbdc983d8b8eb/lib/matplotlib/artist.py#L968-L993 \nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!",
  "created_at": "2023-06-14T09:23:45Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_image.py::test_non_transdata_image_does_not_touch_aspect\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_image.py::test_image_interps[png]\", \"lib/matplotlib/tests/test_image.py::test_image_interps[pdf]\", \"lib/matplotlib/tests/test_image.py::test_alpha_interp[png]\", \"lib/matplotlib/tests/test_image.py::test_interp_nearest_vs_none[pdf]\", \"lib/matplotlib/tests/test_image.py::test_figimage[png-False]\", \"lib/matplotlib/tests/test_image.py::test_figimage[png-True]\", \"lib/matplotlib/tests/test_image.py::test_figimage[pdf-False]\", \"lib/matplotlib/tests/test_image.py::test_figimage[pdf-True]\", \"lib/matplotlib/tests/test_image.py::test_image_python_io\", \"lib/matplotlib/tests/test_image.py::test_imshow_antialiased[png-5-2-hanning]\", \"lib/matplotlib/tests/test_image.py::test_imshow_antialiased[png-5-5-nearest]\", \"lib/matplotlib/tests/test_image.py::test_imshow_antialiased[png-5-10-nearest]\", \"lib/matplotlib/tests/test_image.py::test_imshow_antialiased[png-3-2.9-hanning]\", \"lib/matplotlib/tests/test_image.py::test_imshow_antialiased[png-3-9.1-nearest]\", \"lib/matplotlib/tests/test_image.py::test_imshow_zoom[png]\", \"lib/matplotlib/tests/test_image.py::test_imshow_pil[png]\", \"lib/matplotlib/tests/test_image.py::test_imshow_pil[pdf]\", \"lib/matplotlib/tests/test_image.py::test_imread_pil_uint16\", \"lib/matplotlib/tests/test_image.py::test_imread_fspath\", \"lib/matplotlib/tests/test_image.py::test_imsave[png]\", \"lib/matplotlib/tests/test_image.py::test_imsave[jpg]\", \"lib/matplotlib/tests/test_image.py::test_imsave[jpeg]\", \"lib/matplotlib/tests/test_image.py::test_imsave[tiff]\", \"lib/matplotlib/tests/test_image.py::test_imsave_fspath[png]\", \"lib/matplotlib/tests/test_image.py::test_imsave_fspath[pdf]\", \"lib/matplotlib/tests/test_image.py::test_imsave_fspath[ps]\", \"lib/matplotlib/tests/test_image.py::test_imsave_fspath[eps]\", \"lib/matplotlib/tests/test_image.py::test_imsave_fspath[svg]\", \"lib/matplotlib/tests/test_image.py::test_imsave_color_alpha\", \"lib/matplotlib/tests/test_image.py::test_imsave_pil_kwargs_png\", \"lib/matplotlib/tests/test_image.py::test_imsave_pil_kwargs_tiff\", \"lib/matplotlib/tests/test_image.py::test_image_alpha[png]\", \"lib/matplotlib/tests/test_image.py::test_image_alpha[pdf]\", \"lib/matplotlib/tests/test_image.py::test_cursor_data\", \"lib/matplotlib/tests/test_image.py::test_format_cursor_data[data0-[10001.000]]\", \"lib/matplotlib/tests/test_image.py::test_format_cursor_data[data1-[0.123]]\", \"lib/matplotlib/tests/test_image.py::test_format_cursor_data[data2-[]]\", \"lib/matplotlib/tests/test_image.py::test_format_cursor_data[data3-[1.0000000000000000]]\", \"lib/matplotlib/tests/test_image.py::test_format_cursor_data[data4-[-1.0000000000000000]]\", \"lib/matplotlib/tests/test_image.py::test_image_clip[png]\", \"lib/matplotlib/tests/test_image.py::test_image_clip[pdf]\", \"lib/matplotlib/tests/test_image.py::test_image_cliprect[png]\", \"lib/matplotlib/tests/test_image.py::test_image_cliprect[pdf]\", \"lib/matplotlib/tests/test_image.py::test_imshow[png]\", \"lib/matplotlib/tests/test_image.py::test_imshow[pdf]\", \"lib/matplotlib/tests/test_image.py::test_imshow_10_10_1[png]\", \"lib/matplotlib/tests/test_image.py::test_imshow_10_10_2\", \"lib/matplotlib/tests/test_image.py::test_imshow_10_10_5\", \"lib/matplotlib/tests/test_image.py::test_no_interpolation_origin[png]\", \"lib/matplotlib/tests/test_image.py::test_no_interpolation_origin[pdf]\", \"lib/matplotlib/tests/test_image.py::test_image_shift[pdf]\", \"lib/matplotlib/tests/test_image.py::test_image_edges\", \"lib/matplotlib/tests/test_image.py::test_image_composite_background[png]\", \"lib/matplotlib/tests/test_image.py::test_image_composite_background[pdf]\", \"lib/matplotlib/tests/test_image.py::test_image_composite_alpha[png]\", \"lib/matplotlib/tests/test_image.py::test_image_composite_alpha[pdf]\", \"lib/matplotlib/tests/test_image.py::test_clip_path_disables_compositing[pdf]\", \"lib/matplotlib/tests/test_image.py::test_rasterize_dpi[pdf]\", \"lib/matplotlib/tests/test_image.py::test_bbox_image_inverted[png]\", \"lib/matplotlib/tests/test_image.py::test_bbox_image_inverted[pdf]\", \"lib/matplotlib/tests/test_image.py::test_get_window_extent_for_AxisImage\", \"lib/matplotlib/tests/test_image.py::test_zoom_and_clip_upper_origin[png]\", \"lib/matplotlib/tests/test_image.py::test_nonuniformimage_setcmap\", \"lib/matplotlib/tests/test_image.py::test_nonuniformimage_setnorm\", \"lib/matplotlib/tests/test_image.py::test_jpeg_2d\", \"lib/matplotlib/tests/test_image.py::test_jpeg_alpha\", \"lib/matplotlib/tests/test_image.py::test_axesimage_setdata\", \"lib/matplotlib/tests/test_image.py::test_figureimage_setdata\", \"lib/matplotlib/tests/test_image.py::test_setdata_xya[NonUniformImage-x0-y0-a0]\", \"lib/matplotlib/tests/test_image.py::test_setdata_xya[PcolorImage-x1-y1-a1]\", \"lib/matplotlib/tests/test_image.py::test_minimized_rasterized\", \"lib/matplotlib/tests/test_image.py::test_load_from_url\", \"lib/matplotlib/tests/test_image.py::test_log_scale_image[png]\", \"lib/matplotlib/tests/test_image.py::test_log_scale_image[pdf]\", \"lib/matplotlib/tests/test_image.py::test_rotate_image[png]\", \"lib/matplotlib/tests/test_image.py::test_rotate_image[pdf]\", \"lib/matplotlib/tests/test_image.py::test_image_preserve_size\", \"lib/matplotlib/tests/test_image.py::test_image_preserve_size2\", \"lib/matplotlib/tests/test_image.py::test_mask_image_over_under[png]\", \"lib/matplotlib/tests/test_image.py::test_mask_image[png]\", \"lib/matplotlib/tests/test_image.py::test_mask_image[pdf]\", \"lib/matplotlib/tests/test_image.py::test_mask_image_all\", \"lib/matplotlib/tests/test_image.py::test_imshow_endianess[png]\", \"lib/matplotlib/tests/test_image.py::test_imshow_masked_interpolation[png]\", \"lib/matplotlib/tests/test_image.py::test_imshow_masked_interpolation[pdf]\", \"lib/matplotlib/tests/test_image.py::test_imshow_no_warn_invalid\", \"lib/matplotlib/tests/test_image.py::test_imshow_clips_rgb_to_valid_range[dtype0]\", \"lib/matplotlib/tests/test_image.py::test_imshow_clips_rgb_to_valid_range[dtype1]\", \"lib/matplotlib/tests/test_image.py::test_imshow_clips_rgb_to_valid_range[dtype2]\", \"lib/matplotlib/tests/test_image.py::test_imshow_clips_rgb_to_valid_range[dtype3]\", \"lib/matplotlib/tests/test_image.py::test_imshow_clips_rgb_to_valid_range[dtype4]\", \"lib/matplotlib/tests/test_image.py::test_imshow_clips_rgb_to_valid_range[dtype5]\", \"lib/matplotlib/tests/test_image.py::test_imshow_clips_rgb_to_valid_range[dtype6]\", \"lib/matplotlib/tests/test_image.py::test_imshow_flatfield[png]\", \"lib/matplotlib/tests/test_image.py::test_imshow_bignumbers[png]\", \"lib/matplotlib/tests/test_image.py::test_imshow_bignumbers_real[png]\", \"lib/matplotlib/tests/test_image.py::test_empty_imshow[Normalize]\", \"lib/matplotlib/tests/test_image.py::test_empty_imshow[LogNorm]\", \"lib/matplotlib/tests/test_image.py::test_empty_imshow[<lambda>0]\", \"lib/matplotlib/tests/test_image.py::test_empty_imshow[<lambda>1]\", \"lib/matplotlib/tests/test_image.py::test_imshow_float16\", \"lib/matplotlib/tests/test_image.py::test_imshow_float128\", \"lib/matplotlib/tests/test_image.py::test_imshow_bool\", \"lib/matplotlib/tests/test_image.py::test_full_invalid\", \"lib/matplotlib/tests/test_image.py::test_composite[True-1-ps-\", \"lib/matplotlib/tests/test_image.py::test_composite[True-1-svg-<image]\", \"lib/matplotlib/tests/test_image.py::test_composite[False-2-ps-\", \"lib/matplotlib/tests/test_image.py::test_composite[False-2-svg-<image]\", \"lib/matplotlib/tests/test_image.py::test_relim\", \"lib/matplotlib/tests/test_image.py::test_unclipped\", \"lib/matplotlib/tests/test_image.py::test_respects_bbox\", \"lib/matplotlib/tests/test_image.py::test_image_cursor_formatting\", \"lib/matplotlib/tests/test_image.py::test_image_array_alpha[png]\", \"lib/matplotlib/tests/test_image.py::test_image_array_alpha[pdf]\", \"lib/matplotlib/tests/test_image.py::test_image_array_alpha_validation\", \"lib/matplotlib/tests/test_image.py::test_exact_vmin\", \"lib/matplotlib/tests/test_image.py::test_image_placement[pdf]\", \"lib/matplotlib/tests/test_image.py::test_quantitynd\", \"lib/matplotlib/tests/test_image.py::test_imshow_quantitynd\", \"lib/matplotlib/tests/test_image.py::test_norm_change[png]\", \"lib/matplotlib/tests/test_image.py::test_huge_range_log[png--1]\", \"lib/matplotlib/tests/test_image.py::test_huge_range_log[png-1]\", \"lib/matplotlib/tests/test_image.py::test_spy_box[png]\", \"lib/matplotlib/tests/test_image.py::test_spy_box[pdf]\", \"lib/matplotlib/tests/test_image.py::test_nonuniform_and_pcolor[png]\", \"lib/matplotlib/tests/test_image.py::test_rgba_antialias[png]\", \"lib/matplotlib/tests/test_image.py::test_large_image[png-row-8388608-2\\\\\\\\*\\\\\\\\*23\", \"lib/matplotlib/tests/test_image.py::test_large_image[png-col-16777216-2\\\\\\\\*\\\\\\\\*24\", \"lib/matplotlib/tests/test_image.py::test_str_norms[png]\", \"lib/matplotlib/tests/test_image.py::test__resample_valid_output\", \"lib/matplotlib/tests/test_image.py::test_axesimage_get_shape\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.828667",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}