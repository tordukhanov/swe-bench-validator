{
  "repo": "django/django",
  "instance_id": "django__django-17087",
  "base_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,7 @@ def serialize(self):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n",
  "test_patch": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -211,6 +211,10 @@ class NestedChoices(models.TextChoices):\n         X = \"X\", \"X value\"\n         Y = \"Y\", \"Y value\"\n \n+        @classmethod\n+        def method(cls):\n+            return cls.X\n+\n     def safe_exec(self, string, value=None):\n         d = {}\n         try:\n@@ -468,6 +472,15 @@ def test_serialize_nested_class(self):\n                     ),\n                 )\n \n+    def test_serialize_nested_class_method(self):\n+        self.assertSerializedResultEqual(\n+            self.NestedChoices.method,\n+            (\n+                \"migrations.test_writer.WriterTests.NestedChoices.method\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n",
  "problem_statement": "Class methods from nested classes cannot be used as Field.default.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nGiven the following model:\n \nclass Profile(models.Model):\n\tclass Capability(models.TextChoices):\n\t\tBASIC = (\"BASIC\", \"Basic\")\n\t\tPROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n\t\t\n\t\t@classmethod\n\t\tdef default(cls) -> list[str]:\n\t\t\treturn [cls.BASIC]\n\tcapabilities = ArrayField(\n\t\tmodels.CharField(choices=Capability.choices, max_length=30, blank=True),\n\t\tnull=True,\n\t\tdefault=Capability.default\n\t)\nThe resulting migration contained the following:\n # ...\n\t migrations.AddField(\n\t\t model_name='profile',\n\t\t name='capabilities',\n\t\t field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), default=appname.models.Capability.default, null=True, size=None),\n\t ),\n # ...\nAs you can see, migrations.AddField is passed as argument \"default\" a wrong value \"appname.models.Capability.default\", which leads to an error when trying to migrate. The right value should be \"appname.models.Profile.Capability.default\".\n",
  "hints_text": "Thanks for the report. It seems that FunctionTypeSerializer should use __qualname__ instead of __name__: django/db/migrations/serializer.py diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py index d88cda6e20..06657ebaab 100644 a b class FunctionTypeSerializer(BaseSerializer): 168168 ): 169169 klass = self.value.__self__ 170170 module = klass.__module__ 171 return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), { 171 return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), { 172172 \"import %s\" % module 173173 } 174174 # Further error checking Would you like to prepare a patch? (regression test is required)\nAlso to nitpick the terminology: Capability is a nested class, not a subclass. (fyi for anyone preparing tests/commit message)\nReplying to David Sanders: Also to nitpick the terminology: Capability is a nested class, not a subclass. (fyi for anyone preparing tests/commit message) You're right, that was inaccurate. Thanks for having fixed the title\nReplying to Mariusz Felisiak: Thanks for the report. It seems that FunctionTypeSerializer should use __qualname__ instead of __name__: django/db/migrations/serializer.py diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py index d88cda6e20..06657ebaab 100644 a b class FunctionTypeSerializer(BaseSerializer): 168168 ): 169169 klass = self.value.__self__ 170170 module = klass.__module__ 171 return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), { 171 return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), { 172172 \"import %s\" % module 173173 } 174174 # Further error checking Would you like to prepare a patch? (regression test is required) I would be very happy to prepare a patch, i will do my best to write a test that's coherent with the current suite\nI would be very happy to prepare a patch, i will do my best to write a test that's coherent with the current suite You can check tests in tests.migrations.test_writer.WriterTests, e.g. test_serialize_nested_class().",
  "created_at": "2023-07-17T20:28:41Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_serialize_nested_class_method (migrations.test_writer.WriterTests.test_serialize_nested_class_method)\"]",
  "PASS_TO_PASS": "[\"test_args_kwargs_signature (migrations.test_writer.OperationWriterTests.test_args_kwargs_signature)\", \"test_args_signature (migrations.test_writer.OperationWriterTests.test_args_signature)\", \"test_empty_signature (migrations.test_writer.OperationWriterTests.test_empty_signature)\", \"test_expand_args_signature (migrations.test_writer.OperationWriterTests.test_expand_args_signature)\", \"test_kwargs_signature (migrations.test_writer.OperationWriterTests.test_kwargs_signature)\", \"test_multiline_args_signature (migrations.test_writer.OperationWriterTests.test_multiline_args_signature)\", \"test_nested_args_signature (migrations.test_writer.OperationWriterTests.test_nested_args_signature)\", \"test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests.test_nested_operation_expand_args_signature)\", \"test_custom_operation (migrations.test_writer.WriterTests.test_custom_operation)\", \"test_deconstruct_class_arguments (migrations.test_writer.WriterTests.test_deconstruct_class_arguments)\", \"Test comments at top of file.\", \"test_migration_path (migrations.test_writer.WriterTests.test_migration_path)\", \"django.db.models shouldn't be imported if unused.\", \"test_register_non_serializer (migrations.test_writer.WriterTests.test_register_non_serializer)\", \"test_register_serializer (migrations.test_writer.WriterTests.test_register_serializer)\", \"test_serialize_builtin_types (migrations.test_writer.WriterTests.test_serialize_builtin_types)\", \"test_serialize_builtins (migrations.test_writer.WriterTests.test_serialize_builtins)\", \"test_serialize_choices (migrations.test_writer.WriterTests.test_serialize_choices)\", \"Ticket #22943: Test serialization of class-based validators, including\", \"test_serialize_collections (migrations.test_writer.WriterTests.test_serialize_collections)\", \"Make sure compiled regex can be serialized.\", \"test_serialize_complex_func_index (migrations.test_writer.WriterTests.test_serialize_complex_func_index)\", \"test_serialize_constants (migrations.test_writer.WriterTests.test_serialize_constants)\", \"test_serialize_datetime (migrations.test_writer.WriterTests.test_serialize_datetime)\", \"Ticket #22679: makemigrations generates invalid code for (an empty\", \"test_serialize_enum_flags (migrations.test_writer.WriterTests.test_serialize_enum_flags)\", \"test_serialize_enums (migrations.test_writer.WriterTests.test_serialize_enums)\", \"test_serialize_fields (migrations.test_writer.WriterTests.test_serialize_fields)\", \"test_serialize_frozensets (migrations.test_writer.WriterTests.test_serialize_frozensets)\", \"test_serialize_functions (migrations.test_writer.WriterTests.test_serialize_functions)\", \"test_serialize_functools_partial (migrations.test_writer.WriterTests.test_serialize_functools_partial)\", \"test_serialize_functools_partialmethod (migrations.test_writer.WriterTests.test_serialize_functools_partialmethod)\", \"test_serialize_iterators (migrations.test_writer.WriterTests.test_serialize_iterators)\", \"test_serialize_lazy_objects (migrations.test_writer.WriterTests.test_serialize_lazy_objects)\", \"A reference in a local scope can't be serialized.\", \"test_serialize_managers (migrations.test_writer.WriterTests.test_serialize_managers)\", \"test_serialize_multiline_strings (migrations.test_writer.WriterTests.test_serialize_multiline_strings)\", \"test_serialize_nested_class (migrations.test_writer.WriterTests.test_serialize_nested_class)\", \"test_serialize_numbers (migrations.test_writer.WriterTests.test_serialize_numbers)\", \"test_serialize_path_like (migrations.test_writer.WriterTests.test_serialize_path_like)\", \"test_serialize_pathlib (migrations.test_writer.WriterTests.test_serialize_pathlib)\", \"test_serialize_range (migrations.test_writer.WriterTests.test_serialize_range)\", \"test_serialize_set (migrations.test_writer.WriterTests.test_serialize_set)\", \"test_serialize_settings (migrations.test_writer.WriterTests.test_serialize_settings)\", \"test_serialize_strings (migrations.test_writer.WriterTests.test_serialize_strings)\", \"test_serialize_timedelta (migrations.test_writer.WriterTests.test_serialize_timedelta)\", \"test_serialize_type_model (migrations.test_writer.WriterTests.test_serialize_type_model)\", \"test_serialize_type_none (migrations.test_writer.WriterTests.test_serialize_type_none)\", \"An unbound method used within a class body can be serialized.\", \"test_serialize_uuid (migrations.test_writer.WriterTests.test_serialize_uuid)\", \"Tests serializing a simple migration.\", \"test_sorted_dependencies (migrations.test_writer.WriterTests.test_sorted_dependencies)\", \"#24155 - Tests ordering of imports.\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.780854",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}