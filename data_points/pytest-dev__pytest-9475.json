{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-9475",
  "base_commit": "71baf24b6d41da6704433ca9909b5e6d954564b9",
  "patch": "diff --git a/src/_pytest/pytester.py b/src/_pytest/pytester.py\n--- a/src/_pytest/pytester.py\n+++ b/src/_pytest/pytester.py\n@@ -596,11 +596,15 @@ def assert_outcomes(\n         errors: int = 0,\n         xpassed: int = 0,\n         xfailed: int = 0,\n-        warnings: int = 0,\n-        deselected: int = 0,\n+        warnings: Optional[int] = None,\n+        deselected: Optional[int] = None,\n     ) -> None:\n-        \"\"\"Assert that the specified outcomes appear with the respective\n-        numbers (0 means it didn't occur) in the text output from a test run.\"\"\"\n+        \"\"\"\n+        Assert that the specified outcomes appear with the respective\n+        numbers (0 means it didn't occur) in the text output from a test run.\n+\n+        ``warnings`` and ``deselected`` are only checked if not None.\n+        \"\"\"\n         __tracebackhide__ = True\n         from _pytest.pytester_assertions import assert_outcomes\n \ndiff --git a/src/_pytest/pytester_assertions.py b/src/_pytest/pytester_assertions.py\n--- a/src/_pytest/pytester_assertions.py\n+++ b/src/_pytest/pytester_assertions.py\n@@ -4,6 +4,7 @@\n # hence cannot be subject to assertion rewriting, which requires a\n # module to not be already imported.\n from typing import Dict\n+from typing import Optional\n from typing import Sequence\n from typing import Tuple\n from typing import Union\n@@ -42,8 +43,8 @@ def assert_outcomes(\n     errors: int = 0,\n     xpassed: int = 0,\n     xfailed: int = 0,\n-    warnings: int = 0,\n-    deselected: int = 0,\n+    warnings: Optional[int] = None,\n+    deselected: Optional[int] = None,\n ) -> None:\n     \"\"\"Assert that the specified outcomes appear with the respective\n     numbers (0 means it didn't occur) in the text output from a test run.\"\"\"\n@@ -56,8 +57,6 @@ def assert_outcomes(\n         \"errors\": outcomes.get(\"errors\", 0),\n         \"xpassed\": outcomes.get(\"xpassed\", 0),\n         \"xfailed\": outcomes.get(\"xfailed\", 0),\n-        \"warnings\": outcomes.get(\"warnings\", 0),\n-        \"deselected\": outcomes.get(\"deselected\", 0),\n     }\n     expected = {\n         \"passed\": passed,\n@@ -66,7 +65,11 @@ def assert_outcomes(\n         \"errors\": errors,\n         \"xpassed\": xpassed,\n         \"xfailed\": xfailed,\n-        \"warnings\": warnings,\n-        \"deselected\": deselected,\n     }\n+    if warnings is not None:\n+        obtained[\"warnings\"] = outcomes.get(\"warnings\", 0)\n+        expected[\"warnings\"] = warnings\n+    if deselected is not None:\n+        obtained[\"deselected\"] = outcomes.get(\"deselected\", 0)\n+        expected[\"deselected\"] = deselected\n     assert obtained == expected\n",
  "test_patch": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -835,6 +835,8 @@ def test_with_warning():\n     )\n     result = pytester.runpytest()\n     result.assert_outcomes(passed=1, warnings=1)\n+    # If warnings is not passed, it is not checked at all.\n+    result.assert_outcomes(passed=1)\n \n \n def test_pytester_outcomes_deselected(pytester: Pytester) -> None:\n@@ -849,3 +851,5 @@ def test_two():\n     )\n     result = pytester.runpytest(\"-k\", \"test_one\")\n     result.assert_outcomes(passed=1, deselected=1)\n+    # If deselected is not passed, it is not checked at all.\n+    result.assert_outcomes(passed=1)\n",
  "problem_statement": "[prerelease] `deselected` addition to `assert_outcomes()` is backwards-incompatible\n#9133 added a new `deselected` parameter to `assert_outcomes()`, cc @okken.\r\n\r\nHowever, this actually is an incompatible change: Doing e.g. `result = testdir.runpytest(\"-k\", \"test_not_found_by_ini\")` followed by `result.assert_outcomes(passed=2)` worked fine before, but now fails because the now included `'deselected': ...` does not equal `'deselected': 0`.\r\n\r\nThis breaks pytest-bdd: https://github.com/pytest-dev/pytest-bdd/issues/466 - I could swear I also saw another project in #9415 fail after fixing the initial issue it had, but then Christmas and stuff came along and now I don't remember which one it was, and of course can't find it anymore.\r\n\r\nA (quite) [rough search](https://sourcegraph.com/search?q=context:global+%28testdir%7Cpytester%29%5C..*-k+lang:python+-file:.*/%3Ftesting/%28test_terminal%7Cacceptance_test%7Ctest_runner%7Ctest_collection%7Ctest_pytester%7Ctest_debugging%7Ctest_mark%7Cdeprecated_test%7Ctest_terminal%7Cpython/%29.*+-repo:pytest-dev/pytest-bdd&patternType=regexp) reveals that more projects might be affected by this (excludes to avoid matches in copies of pytest's source code).\r\n\r\nSome examples I could dig up (but haven't verified):\r\n\r\n- [test_parametrization.py - schemathesis/schemathesis - Sourcegraph](https://sourcegraph.com/github.com/schemathesis/schemathesis/-/blob/test/test_parametrization.py?L445:14)\r\n- [test_ipa_run_tests.py - freeipa/freeipa - Sourcegraph](https://sourcegraph.com/github.com/freeipa/freeipa/-/blob/ipatests/test_ipatests_plugins/test_ipa_run_tests.py?L117:17) (maybe)\r\n- [test_parametrized.py - pytest-dev/pytest-play - Sourcegraph](https://sourcegraph.com/github.com/pytest-dev/pytest-play/-/blob/tests/test_parametrized.py?L94:14)\r\n\r\nI think the change in itself makes sense, but at the same time fixes like https://github.com/pytest-dev/pytest-bdd/pull/470 are a bit cumbersome.\r\n\r\nTwo questions:\r\n\r\n- What should we do about this for 7.0? (even if the answer just is \"live with it and document it as backwards-incompatible in the changelog)\r\n- What (if anything) should we do about this so that it doesn't happen again for future releases? I guess not much we can do, as long as we want to assume 0 for outcomes which have not been given...\n",
  "hints_text": "@okken would you like to make the deselected a optional parameter to ensure this is caught\r\n\r\ni believe we have to make certain new features \"explicit optionals\" instead of implied optionals\r\n\r\nthis one is a easy miss, i'm pretty sure at least 3 of us missed this when glancing at the pr before, and we would miss a issue like that again, as making it visible would require a explicit and elaborate design of the matcher to begin with\r\n\r\nthis type of regression is pretty much only caught by overly detailed test suites, so given the circumstances we rather ought to focus on making it inexpensive to react on them\r\n\r\nlets try to make it a actual optional parameter before 7.0 but not get hung up on it in case it turns out tricky",
  "created_at": "2022-01-04T14:01:03Z",
  "version": "7.1",
  "FAIL_TO_PASS": "[\"testing/test_pytester.py::test_pytester_assert_outcomes_warnings\", \"testing/test_pytester.py::test_pytester_outcomes_deselected\"]",
  "PASS_TO_PASS": "[\"testing/test_pytester.py::test_hookrecorder_basic[apiclass]\", \"testing/test_pytester.py::test_hookrecorder_basic[api]\", \"testing/test_pytester.py::TestSysModulesSnapshot::test_remove_added\", \"testing/test_pytester.py::TestSysModulesSnapshot::test_add_removed\", \"testing/test_pytester.py::TestSysModulesSnapshot::test_restore_reloaded\", \"testing/test_pytester.py::TestSysModulesSnapshot::test_preserve_modules\", \"testing/test_pytester.py::TestSysModulesSnapshot::test_preserve_container\", \"testing/test_pytester.py::TestSysPathsSnapshot::test_restore[path]\", \"testing/test_pytester.py::TestSysPathsSnapshot::test_restore[meta_path]\", \"testing/test_pytester.py::TestSysPathsSnapshot::test_preserve_container[path]\", \"testing/test_pytester.py::TestSysPathsSnapshot::test_preserve_container[meta_path]\", \"testing/test_pytester.py::test_linematcher_with_nonlist\", \"testing/test_pytester.py::test_linematcher_match_failure\", \"testing/test_pytester.py::test_linematcher_consecutive\", \"testing/test_pytester.py::test_linematcher_no_matching[no_fnmatch_line]\", \"testing/test_pytester.py::test_linematcher_no_matching[no_re_match_line]\", \"testing/test_pytester.py::test_linematcher_no_matching_after_match\", \"testing/test_pytester.py::test_linematcher_string_api\", \"testing/test_pytester.py::test_pytest_addopts_before_pytester\", \"testing/test_pytester.py::test_run_result_repr\", \"testing/test_pytester.py::test_parse_summary_line_always_plural\", \"testing/test_pytester.py::test_parseconfig\", \"testing/test_pytester.py::test_pytester_runs_with_plugin\", \"testing/test_pytester.py::test_pytester_with_doctest\", \"testing/test_pytester.py::test_runresult_assertion_on_xfail\", \"testing/test_pytester.py::test_runresult_assertion_on_xpassed\", \"testing/test_pytester.py::test_xpassed_with_strict_is_considered_a_failure\", \"testing/test_pytester.py::test_makepyfile_unicode\", \"testing/test_pytester.py::test_makepyfile_utf8\", \"testing/test_pytester.py::TestInlineRunModulesCleanup::test_inline_run_test_module_not_cleaned_up\", \"testing/test_pytester.py::TestInlineRunModulesCleanup::test_inline_run_taking_and_restoring_a_sys_modules_snapshot\", \"testing/test_pytester.py::TestInlineRunModulesCleanup::test_inline_run_sys_modules_snapshot_restore_preserving_modules\", \"testing/test_pytester.py::TestInlineRunModulesCleanup::test_external_test_module_imports_not_cleaned_up\", \"testing/test_pytester.py::test_assert_outcomes_after_pytest_error\", \"testing/test_pytester.py::test_cwd_snapshot\", \"testing/test_pytester.py::test_pytester_subprocess_via_runpytest_arg\", \"testing/test_pytester.py::test_unicode_args\", \"testing/test_pytester.py::test_run_stdin\", \"testing/test_pytester.py::test_popen_stdin_pipe\", \"testing/test_pytester.py::test_popen_stdin_bytes\", \"testing/test_pytester.py::test_popen_default_stdin_stderr_and_stdin_None\", \"testing/test_pytester.py::test_pytester_outcomes_with_multiple_errors\", \"testing/test_pytester.py::test_makefile_joins_absolute_path\", \"testing/test_pytester.py::test_pytester_makefile_dot_prefixes_extension_with_warning\", \"testing/test_pytester.py::test_pytester_subprocess\", \"testing/test_pytester.py::test_pytester_run_no_timeout\", \"testing/test_pytester.py::test_pytester_run_with_timeout\", \"testing/test_pytester.py::test_pytester_run_timeout_expires\"]",
  "environment_setup_commit": "4a8f8ada431974f2837260af3ed36299fd382814",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.947009",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}