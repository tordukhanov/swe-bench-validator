{
  "repo": "django/django",
  "instance_id": "django__django-10301",
  "base_commit": "76dfa834e7ceeca97cd8e3cfa86651a955aa3f0c",
  "patch": "diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -569,7 +569,7 @@ def subtract_temporals(self, internal_type, lhs, rhs):\n         if internal_type == 'DateField':\n             lhs_sql, lhs_params = lhs\n             rhs_sql, rhs_params = rhs\n-            return \"NUMTODSINTERVAL(%s - %s, 'DAY')\" % (lhs_sql, rhs_sql), lhs_params + rhs_params\n+            return \"NUMTODSINTERVAL(TO_NUMBER(%s - %s), 'DAY')\" % (lhs_sql, rhs_sql), lhs_params + rhs_params\n         return super().subtract_temporals(internal_type, lhs, rhs)\n \n     def bulk_batch_size(self, fields, objs):\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -3,6 +3,7 @@\n \"\"\"\n import datetime\n import decimal\n+import functools\n import math\n import operator\n import re\n@@ -34,6 +35,19 @@ def decoder(conv_func):\n     return lambda s: conv_func(s.decode())\n \n \n+def none_guard(func):\n+    \"\"\"\n+    Decorator that returns None if any of the arguments to the decorated\n+    function are None. Many SQL functions return NULL if any of their arguments\n+    are NULL. This decorator simplifies the implementation of this for the\n+    custom functions registered below.\n+    \"\"\"\n+    @functools.wraps(func)\n+    def wrapper(*args, **kwargs):\n+        return None if None in args else func(*args, **kwargs)\n+    return wrapper\n+\n+\n Database.register_converter(\"bool\", b'1'.__eq__)\n Database.register_converter(\"time\", decoder(parse_time))\n Database.register_converter(\"datetime\", decoder(parse_datetime))\n@@ -171,30 +185,30 @@ def get_new_connection(self, conn_params):\n         conn.create_function(\"django_time_trunc\", 2, _sqlite_time_trunc)\n         conn.create_function(\"django_time_diff\", 2, _sqlite_time_diff)\n         conn.create_function(\"django_timestamp_diff\", 2, _sqlite_timestamp_diff)\n-        conn.create_function(\"regexp\", 2, _sqlite_regexp)\n         conn.create_function(\"django_format_dtdelta\", 3, _sqlite_format_dtdelta)\n+        conn.create_function('regexp', 2, _sqlite_regexp)\n+        conn.create_function('ACOS', 1, none_guard(math.acos))\n+        conn.create_function('ASIN', 1, none_guard(math.asin))\n+        conn.create_function('ATAN', 1, none_guard(math.atan))\n+        conn.create_function('ATAN2', 2, none_guard(math.atan2))\n+        conn.create_function('CEILING', 1, none_guard(math.ceil))\n+        conn.create_function('COS', 1, none_guard(math.cos))\n+        conn.create_function('COT', 1, none_guard(lambda x: 1 / math.tan(x)))\n+        conn.create_function('DEGREES', 1, none_guard(math.degrees))\n+        conn.create_function('EXP', 1, none_guard(math.exp))\n+        conn.create_function('FLOOR', 1, none_guard(math.floor))\n+        conn.create_function('LN', 1, none_guard(math.log))\n+        conn.create_function('LOG', 2, none_guard(lambda x, y: math.log(y, x)))\n         conn.create_function('LPAD', 3, _sqlite_lpad)\n-        conn.create_function('REPEAT', 2, operator.mul)\n-        conn.create_function('RPAD', 3, _sqlite_rpad)\n-        conn.create_function('ACOS', 1, math.acos)\n-        conn.create_function('ASIN', 1, math.asin)\n-        conn.create_function('ATAN', 1, math.atan)\n-        conn.create_function('ATAN2', 2, math.atan2)\n-        conn.create_function('CEILING', 1, math.ceil)\n-        conn.create_function('COS', 1, math.cos)\n-        conn.create_function('COT', 1, lambda x: 1 / math.tan(x))\n-        conn.create_function('DEGREES', 1, math.degrees)\n-        conn.create_function('EXP', 1, math.exp)\n-        conn.create_function('FLOOR', 1, math.floor)\n-        conn.create_function('LN', 1, math.log)\n-        conn.create_function('LOG', 2, lambda x, y: math.log(y, x))\n-        conn.create_function('MOD', 2, math.fmod)\n+        conn.create_function('MOD', 2, none_guard(math.fmod))\n         conn.create_function('PI', 0, lambda: math.pi)\n-        conn.create_function('POWER', 2, operator.pow)\n-        conn.create_function('RADIANS', 1, math.radians)\n-        conn.create_function('SIN', 1, math.sin)\n-        conn.create_function('SQRT', 1, math.sqrt)\n-        conn.create_function('TAN', 1, math.tan)\n+        conn.create_function('POWER', 2, none_guard(operator.pow))\n+        conn.create_function('RADIANS', 1, none_guard(math.radians))\n+        conn.create_function('REPEAT', 2, none_guard(operator.mul))\n+        conn.create_function('RPAD', 3, _sqlite_rpad)\n+        conn.create_function('SIN', 1, none_guard(math.sin))\n+        conn.create_function('SQRT', 1, none_guard(math.sqrt))\n+        conn.create_function('TAN', 1, none_guard(math.tan))\n         conn.execute('PRAGMA foreign_keys = ON')\n         return conn\n \n@@ -356,6 +370,8 @@ def _sqlite_date_trunc(lookup_type, dt):\n \n \n def _sqlite_time_trunc(lookup_type, dt):\n+    if dt is None:\n+        return None\n     try:\n         dt = backend_utils.typecast_time(dt)\n     except (ValueError, TypeError):\n@@ -432,6 +448,7 @@ def _sqlite_time_extract(lookup_type, dt):\n     return getattr(dt, lookup_type)\n \n \n+@none_guard\n def _sqlite_format_dtdelta(conn, lhs, rhs):\n     \"\"\"\n     LHS and RHS can be either:\n@@ -452,6 +469,7 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):\n     return str(out)\n \n \n+@none_guard\n def _sqlite_time_diff(lhs, rhs):\n     left = backend_utils.typecast_time(lhs)\n     right = backend_utils.typecast_time(rhs)\n@@ -467,21 +485,25 @@ def _sqlite_time_diff(lhs, rhs):\n     )\n \n \n+@none_guard\n def _sqlite_timestamp_diff(lhs, rhs):\n     left = backend_utils.typecast_timestamp(lhs)\n     right = backend_utils.typecast_timestamp(rhs)\n     return duration_microseconds(left - right)\n \n \n+@none_guard\n def _sqlite_regexp(re_pattern, re_string):\n-    return bool(re.search(re_pattern, str(re_string))) if re_string is not None else False\n+    return bool(re.search(re_pattern, str(re_string)))\n \n \n+@none_guard\n def _sqlite_lpad(text, length, fill_text):\n     if len(text) >= length:\n         return text[:length]\n     return (fill_text * length)[:length - len(text)] + text\n \n \n+@none_guard\n def _sqlite_rpad(text, length, fill_text):\n     return (text + fill_text * length)[:length]\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -218,16 +218,20 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize\n \n     def convert_value(self, value, expression, connection):\n         if isinstance(self.output_field, DateTimeField):\n-            if settings.USE_TZ:\n-                if value is None:\n-                    raise ValueError(\n-                        \"Database returned an invalid datetime value. \"\n-                        \"Are time zone definitions for your database installed?\"\n-                    )\n+            if not settings.USE_TZ:\n+                pass\n+            elif value is not None:\n                 value = value.replace(tzinfo=None)\n                 value = timezone.make_aware(value, self.tzinfo)\n+            elif not connection.features.has_zoneinfo_database:\n+                raise ValueError(\n+                    'Database returned an invalid datetime value. Are time '\n+                    'zone definitions for your database installed?'\n+                )\n         elif isinstance(value, datetime):\n-            if isinstance(self.output_field, DateField):\n+            if value is None:\n+                pass\n+            elif isinstance(self.output_field, DateField):\n                 value = value.date()\n             elif isinstance(self.output_field, TimeField):\n                 value = value.time()\ndiff --git a/django/db/models/functions/text.py b/django/db/models/functions/text.py\n--- a/django/db/models/functions/text.py\n+++ b/django/db/models/functions/text.py\n@@ -139,7 +139,7 @@ class LPad(BytesToCharFieldConversionMixin, Func):\n     function = 'LPAD'\n \n     def __init__(self, expression, length, fill_text=Value(' '), **extra):\n-        if not hasattr(length, 'resolve_expression') and length < 0:\n+        if not hasattr(length, 'resolve_expression') and length is not None and length < 0:\n             raise ValueError(\"'length' must be greater or equal to 0.\")\n         super().__init__(expression, length, fill_text, **extra)\n \n@@ -165,13 +165,14 @@ class Repeat(BytesToCharFieldConversionMixin, Func):\n     function = 'REPEAT'\n \n     def __init__(self, expression, number, **extra):\n-        if not hasattr(number, 'resolve_expression') and number < 0:\n+        if not hasattr(number, 'resolve_expression') and number is not None and number < 0:\n             raise ValueError(\"'number' must be greater or equal to 0.\")\n         super().__init__(expression, number, **extra)\n \n     def as_oracle(self, compiler, connection, **extra_context):\n         expression, number = self.source_expressions\n-        rpad = RPad(expression, Length(expression) * number, expression)\n+        length = None if number is None else Length(expression) * number\n+        rpad = RPad(expression, length, expression)\n         return rpad.as_sql(compiler, connection, **extra_context)\n \n \n",
  "test_patch": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -59,6 +59,22 @@ def test_memory_db_test_name(self):\n         creation = DatabaseWrapper(settings_dict).creation\n         self.assertEqual(creation._get_test_db_name(), creation.connection.settings_dict['TEST']['NAME'])\n \n+    def test_regexp_function(self):\n+        tests = (\n+            ('test', r'[0-9]+', False),\n+            ('test', r'[a-z]+', True),\n+            ('test', None, None),\n+            (None, r'[a-z]+', None),\n+            (None, None, None),\n+        )\n+        for string, pattern, expected in tests:\n+            with self.subTest((string, pattern)):\n+                with connection.cursor() as cursor:\n+                    cursor.execute('SELECT %s REGEXP %s', [string, pattern])\n+                    value = cursor.fetchone()[0]\n+                value = bool(value) if value in {0, 1} else value\n+                self.assertIs(value, expected)\n+\n \n @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')\n @isolate_apps('backends')\ndiff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -66,11 +66,14 @@ class DateFunctionTests(TestCase):\n \n     def create_model(self, start_datetime, end_datetime):\n         return DTModel.objects.create(\n-            name=start_datetime.isoformat(),\n-            start_datetime=start_datetime, end_datetime=end_datetime,\n-            start_date=start_datetime.date(), end_date=end_datetime.date(),\n-            start_time=start_datetime.time(), end_time=end_datetime.time(),\n-            duration=(end_datetime - start_datetime),\n+            name=start_datetime.isoformat() if start_datetime else 'None',\n+            start_datetime=start_datetime,\n+            end_datetime=end_datetime,\n+            start_date=start_datetime.date() if start_datetime else None,\n+            end_date=end_datetime.date() if end_datetime else None,\n+            start_time=start_datetime.time() if start_datetime else None,\n+            end_time=end_datetime.time() if end_datetime else None,\n+            duration=(end_datetime - start_datetime) if start_datetime and end_datetime else None,\n         )\n \n     def test_extract_year_exact_lookup(self):\n@@ -215,6 +218,12 @@ def test_extract_func(self):\n         self.assertEqual(DTModel.objects.filter(start_date__month=Extract('start_date', 'month')).count(), 2)\n         self.assertEqual(DTModel.objects.filter(start_time__hour=Extract('start_time', 'hour')).count(), 2)\n \n+    def test_extract_none(self):\n+        self.create_model(None, None)\n+        for t in (Extract('start_datetime', 'year'), Extract('start_date', 'year'), Extract('start_time', 'hour')):\n+            with self.subTest(t):\n+                self.assertIsNone(DTModel.objects.annotate(extracted=t).first().extracted)\n+\n     @skipUnlessDBFeature('has_native_duration_field')\n     def test_extract_duration(self):\n         start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n@@ -608,6 +617,12 @@ def test_time_kind(kind):\n         qs = DTModel.objects.filter(start_datetime__date=Trunc('start_datetime', 'day', output_field=DateField()))\n         self.assertEqual(qs.count(), 2)\n \n+    def test_trunc_none(self):\n+        self.create_model(None, None)\n+        for t in (Trunc('start_datetime', 'year'), Trunc('start_date', 'year'), Trunc('start_time', 'hour')):\n+            with self.subTest(t):\n+                self.assertIsNone(DTModel.objects.annotate(truncated=t).first().truncated)\n+\n     def test_trunc_year_func(self):\n         start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n         end_datetime = truncate_to(datetime(2016, 6, 15, 14, 10, 50, 123), 'year')\n@@ -761,6 +776,10 @@ def test_trunc_date_func(self):\n         with self.assertRaisesMessage(ValueError, \"Cannot truncate TimeField 'start_time' to DateField\"):\n             list(DTModel.objects.annotate(truncated=TruncDate('start_time', output_field=TimeField())))\n \n+    def test_trunc_date_none(self):\n+        self.create_model(None, None)\n+        self.assertIsNone(DTModel.objects.annotate(truncated=TruncDate('start_datetime')).first().truncated)\n+\n     def test_trunc_time_func(self):\n         start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n@@ -785,6 +804,10 @@ def test_trunc_time_func(self):\n         with self.assertRaisesMessage(ValueError, \"Cannot truncate DateField 'start_date' to TimeField\"):\n             list(DTModel.objects.annotate(truncated=TruncTime('start_date', output_field=DateField())))\n \n+    def test_trunc_time_none(self):\n+        self.create_model(None, None)\n+        self.assertIsNone(DTModel.objects.annotate(truncated=TruncTime('start_datetime')).first().truncated)\n+\n     def test_trunc_day_func(self):\n         start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n         end_datetime = truncate_to(datetime(2016, 6, 15, 14, 10, 50, 123), 'day')\ndiff --git a/tests/db_functions/math/test_abs.py b/tests/db_functions/math/test_abs.py\n--- a/tests/db_functions/math/test_abs.py\n+++ b/tests/db_functions/math/test_abs.py\n@@ -10,6 +10,11 @@\n \n class AbsTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_abs=Abs('normal')).first()\n+        self.assertIsNone(obj.null_abs)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-0.8'), n2=Decimal('1.2'))\n         obj = DecimalModel.objects.annotate(n1_abs=Abs('n1'), n2_abs=Abs('n2')).first()\ndiff --git a/tests/db_functions/math/test_acos.py b/tests/db_functions/math/test_acos.py\n--- a/tests/db_functions/math/test_acos.py\n+++ b/tests/db_functions/math/test_acos.py\n@@ -11,6 +11,11 @@\n \n class ACosTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_acos=ACos('normal')).first()\n+        self.assertIsNone(obj.null_acos)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-0.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_acos=ACos('n1'), n2_acos=ACos('n2')).first()\ndiff --git a/tests/db_functions/math/test_asin.py b/tests/db_functions/math/test_asin.py\n--- a/tests/db_functions/math/test_asin.py\n+++ b/tests/db_functions/math/test_asin.py\n@@ -11,6 +11,11 @@\n \n class ASinTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_asin=ASin('normal')).first()\n+        self.assertIsNone(obj.null_asin)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('0.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_asin=ASin('n1'), n2_asin=ASin('n2')).first()\ndiff --git a/tests/db_functions/math/test_atan.py b/tests/db_functions/math/test_atan.py\n--- a/tests/db_functions/math/test_atan.py\n+++ b/tests/db_functions/math/test_atan.py\n@@ -11,6 +11,11 @@\n \n class ATanTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_atan=ATan('normal')).first()\n+        self.assertIsNone(obj.null_atan)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_atan=ATan('n1'), n2_atan=ATan('n2')).first()\ndiff --git a/tests/db_functions/math/test_atan2.py b/tests/db_functions/math/test_atan2.py\n--- a/tests/db_functions/math/test_atan2.py\n+++ b/tests/db_functions/math/test_atan2.py\n@@ -9,6 +9,15 @@\n \n class ATan2Tests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create(big=100)\n+        obj = IntegerModel.objects.annotate(\n+            null_atan2_sn=ATan2('small', 'normal'),\n+            null_atan2_nb=ATan2('normal', 'big'),\n+        ).first()\n+        self.assertIsNone(obj.null_atan2_sn)\n+        self.assertIsNone(obj.null_atan2_nb)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-9.9'), n2=Decimal('4.6'))\n         obj = DecimalModel.objects.annotate(n_atan2=ATan2('n1', 'n2')).first()\ndiff --git a/tests/db_functions/math/test_ceil.py b/tests/db_functions/math/test_ceil.py\n--- a/tests/db_functions/math/test_ceil.py\n+++ b/tests/db_functions/math/test_ceil.py\n@@ -11,6 +11,11 @@\n \n class CeilTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_ceil=Ceil('normal')).first()\n+        self.assertIsNone(obj.null_ceil)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_ceil=Ceil('n1'), n2_ceil=Ceil('n2')).first()\ndiff --git a/tests/db_functions/math/test_cos.py b/tests/db_functions/math/test_cos.py\n--- a/tests/db_functions/math/test_cos.py\n+++ b/tests/db_functions/math/test_cos.py\n@@ -11,6 +11,11 @@\n \n class CosTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_cos=Cos('normal')).first()\n+        self.assertIsNone(obj.null_cos)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_cos=Cos('n1'), n2_cos=Cos('n2')).first()\ndiff --git a/tests/db_functions/math/test_cot.py b/tests/db_functions/math/test_cot.py\n--- a/tests/db_functions/math/test_cot.py\n+++ b/tests/db_functions/math/test_cot.py\n@@ -11,6 +11,11 @@\n \n class CotTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_cot=Cot('normal')).first()\n+        self.assertIsNone(obj.null_cot)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_cot=Cot('n1'), n2_cot=Cot('n2')).first()\ndiff --git a/tests/db_functions/math/test_degrees.py b/tests/db_functions/math/test_degrees.py\n--- a/tests/db_functions/math/test_degrees.py\n+++ b/tests/db_functions/math/test_degrees.py\n@@ -11,6 +11,11 @@\n \n class DegreesTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_degrees=Degrees('normal')).first()\n+        self.assertIsNone(obj.null_degrees)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_degrees=Degrees('n1'), n2_degrees=Degrees('n2')).first()\ndiff --git a/tests/db_functions/math/test_exp.py b/tests/db_functions/math/test_exp.py\n--- a/tests/db_functions/math/test_exp.py\n+++ b/tests/db_functions/math/test_exp.py\n@@ -11,6 +11,11 @@\n \n class ExpTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_exp=Exp('normal')).first()\n+        self.assertIsNone(obj.null_exp)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_exp=Exp('n1'), n2_exp=Exp('n2')).first()\ndiff --git a/tests/db_functions/math/test_floor.py b/tests/db_functions/math/test_floor.py\n--- a/tests/db_functions/math/test_floor.py\n+++ b/tests/db_functions/math/test_floor.py\n@@ -11,6 +11,11 @@\n \n class FloorTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_floor=Floor('normal')).first()\n+        self.assertIsNone(obj.null_floor)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_floor=Floor('n1'), n2_floor=Floor('n2')).first()\ndiff --git a/tests/db_functions/math/test_ln.py b/tests/db_functions/math/test_ln.py\n--- a/tests/db_functions/math/test_ln.py\n+++ b/tests/db_functions/math/test_ln.py\n@@ -11,6 +11,11 @@\n \n class LnTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_ln=Ln('normal')).first()\n+        self.assertIsNone(obj.null_ln)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_ln=Ln('n1'), n2_ln=Ln('n2')).first()\ndiff --git a/tests/db_functions/math/test_log.py b/tests/db_functions/math/test_log.py\n--- a/tests/db_functions/math/test_log.py\n+++ b/tests/db_functions/math/test_log.py\n@@ -9,6 +9,15 @@\n \n class LogTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create(big=100)\n+        obj = IntegerModel.objects.annotate(\n+            null_log_small=Log('small', 'normal'),\n+            null_log_normal=Log('normal', 'big'),\n+        ).first()\n+        self.assertIsNone(obj.null_log_small)\n+        self.assertIsNone(obj.null_log_normal)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('12.9'), n2=Decimal('3.6'))\n         obj = DecimalModel.objects.annotate(n_log=Log('n1', 'n2')).first()\ndiff --git a/tests/db_functions/math/test_mod.py b/tests/db_functions/math/test_mod.py\n--- a/tests/db_functions/math/test_mod.py\n+++ b/tests/db_functions/math/test_mod.py\n@@ -9,6 +9,15 @@\n \n class ModTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create(big=100)\n+        obj = IntegerModel.objects.annotate(\n+            null_mod_small=Mod('small', 'normal'),\n+            null_mod_normal=Mod('normal', 'big'),\n+        ).first()\n+        self.assertIsNone(obj.null_mod_small)\n+        self.assertIsNone(obj.null_mod_normal)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-9.9'), n2=Decimal('4.6'))\n         obj = DecimalModel.objects.annotate(n_mod=Mod('n1', 'n2')).first()\ndiff --git a/tests/db_functions/math/test_power.py b/tests/db_functions/math/test_power.py\n--- a/tests/db_functions/math/test_power.py\n+++ b/tests/db_functions/math/test_power.py\n@@ -8,6 +8,15 @@\n \n class PowerTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create(big=100)\n+        obj = IntegerModel.objects.annotate(\n+            null_power_small=Power('small', 'normal'),\n+            null_power_normal=Power('normal', 'big'),\n+        ).first()\n+        self.assertIsNone(obj.null_power_small)\n+        self.assertIsNone(obj.null_power_normal)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('1.0'), n2=Decimal('-0.6'))\n         obj = DecimalModel.objects.annotate(n_power=Power('n1', 'n2')).first()\ndiff --git a/tests/db_functions/math/test_radians.py b/tests/db_functions/math/test_radians.py\n--- a/tests/db_functions/math/test_radians.py\n+++ b/tests/db_functions/math/test_radians.py\n@@ -11,6 +11,11 @@\n \n class RadiansTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_radians=Radians('normal')).first()\n+        self.assertIsNone(obj.null_radians)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_radians=Radians('n1'), n2_radians=Radians('n2')).first()\ndiff --git a/tests/db_functions/math/test_round.py b/tests/db_functions/math/test_round.py\n--- a/tests/db_functions/math/test_round.py\n+++ b/tests/db_functions/math/test_round.py\n@@ -10,6 +10,11 @@\n \n class RoundTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_round=Round('normal')).first()\n+        self.assertIsNone(obj.null_round)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_round=Round('n1'), n2_round=Round('n2')).first()\ndiff --git a/tests/db_functions/math/test_sin.py b/tests/db_functions/math/test_sin.py\n--- a/tests/db_functions/math/test_sin.py\n+++ b/tests/db_functions/math/test_sin.py\n@@ -11,6 +11,11 @@\n \n class SinTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_sin=Sin('normal')).first()\n+        self.assertIsNone(obj.null_sin)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_sin=Sin('n1'), n2_sin=Sin('n2')).first()\ndiff --git a/tests/db_functions/math/test_sqrt.py b/tests/db_functions/math/test_sqrt.py\n--- a/tests/db_functions/math/test_sqrt.py\n+++ b/tests/db_functions/math/test_sqrt.py\n@@ -11,6 +11,11 @@\n \n class SqrtTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_sqrt=Sqrt('normal')).first()\n+        self.assertIsNone(obj.null_sqrt)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_sqrt=Sqrt('n1'), n2_sqrt=Sqrt('n2')).first()\ndiff --git a/tests/db_functions/math/test_tan.py b/tests/db_functions/math/test_tan.py\n--- a/tests/db_functions/math/test_tan.py\n+++ b/tests/db_functions/math/test_tan.py\n@@ -11,6 +11,11 @@\n \n class TanTests(TestCase):\n \n+    def test_null(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_tan=Tan('normal')).first()\n+        self.assertIsNone(obj.null_tan)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_tan=Tan('n1'), n2_tan=Tan('n2')).first()\ndiff --git a/tests/db_functions/text/test_pad.py b/tests/db_functions/text/test_pad.py\n--- a/tests/db_functions/text/test_pad.py\n+++ b/tests/db_functions/text/test_pad.py\n@@ -1,3 +1,4 @@\n+from django.db import connection\n from django.db.models import CharField, Value\n from django.db.models.functions import Length, LPad, RPad\n from django.test import TestCase\n@@ -8,6 +9,7 @@\n class PadTests(TestCase):\n     def test_pad(self):\n         Author.objects.create(name='John', alias='j')\n+        none_value = '' if connection.features.interprets_empty_strings_as_nulls else None\n         tests = (\n             (LPad('name', 7, Value('xy')), 'xyxJohn'),\n             (RPad('name', 7, Value('xy')), 'Johnxyx'),\n@@ -21,6 +23,10 @@ def test_pad(self):\n             (RPad('name', 2), 'Jo'),\n             (LPad('name', 0), ''),\n             (RPad('name', 0), ''),\n+            (LPad('name', None), none_value),\n+            (RPad('name', None), none_value),\n+            (LPad('goes_by', 1), none_value),\n+            (RPad('goes_by', 1), none_value),\n         )\n         for function, padded_name in tests:\n             with self.subTest(function=function):\ndiff --git a/tests/db_functions/text/test_repeat.py b/tests/db_functions/text/test_repeat.py\n--- a/tests/db_functions/text/test_repeat.py\n+++ b/tests/db_functions/text/test_repeat.py\n@@ -1,3 +1,4 @@\n+from django.db import connection\n from django.db.models import CharField, Value\n from django.db.models.functions import Length, Repeat\n from django.test import TestCase\n@@ -8,11 +9,14 @@\n class RepeatTests(TestCase):\n     def test_basic(self):\n         Author.objects.create(name='John', alias='xyz')\n+        none_value = '' if connection.features.interprets_empty_strings_as_nulls else None\n         tests = (\n             (Repeat('name', 0), ''),\n             (Repeat('name', 2), 'JohnJohn'),\n             (Repeat('name', Length('alias'), output_field=CharField()), 'JohnJohnJohn'),\n             (Repeat(Value('x'), 3, output_field=CharField()), 'xxx'),\n+            (Repeat('name', None), none_value),\n+            (Repeat('goes_by', 1), none_value),\n         )\n         for function, repeated_text in tests:\n             with self.subTest(function=function):\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1249,6 +1249,12 @@ def test_durationfield_add(self):\n         ]\n         self.assertEqual(delta_math, ['e4'])\n \n+        queryset = Experiment.objects.annotate(shifted=ExpressionWrapper(\n+            F('start') + Value(None, output_field=models.DurationField()),\n+            output_field=models.DateTimeField(),\n+        ))\n+        self.assertIsNone(queryset.first().shifted)\n+\n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_date_subtraction(self):\n         queryset = Experiment.objects.annotate(\n@@ -1266,6 +1272,18 @@ def test_date_subtraction(self):\n         less_than_5_days = {e.name for e in queryset.filter(completion_duration__lt=datetime.timedelta(days=5))}\n         self.assertEqual(less_than_5_days, {'e0', 'e1', 'e2'})\n \n+        queryset = Experiment.objects.annotate(difference=ExpressionWrapper(\n+            F('completed') - Value(None, output_field=models.DateField()),\n+            output_field=models.DurationField(),\n+        ))\n+        self.assertIsNone(queryset.first().difference)\n+\n+        queryset = Experiment.objects.annotate(shifted=ExpressionWrapper(\n+            F('completed') - Value(None, output_field=models.DurationField()),\n+            output_field=models.DateField(),\n+        ))\n+        self.assertIsNone(queryset.first().shifted)\n+\n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_time_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n@@ -1280,6 +1298,18 @@ def test_time_subtraction(self):\n             datetime.timedelta(hours=1, minutes=15, seconds=15, microseconds=2345)\n         )\n \n+        queryset = Time.objects.annotate(difference=ExpressionWrapper(\n+            F('time') - Value(None, output_field=models.TimeField()),\n+            output_field=models.DurationField(),\n+        ))\n+        self.assertIsNone(queryset.first().difference)\n+\n+        queryset = Time.objects.annotate(shifted=ExpressionWrapper(\n+            F('time') - Value(None, output_field=models.DurationField()),\n+            output_field=models.TimeField(),\n+        ))\n+        self.assertIsNone(queryset.first().shifted)\n+\n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_datetime_subtraction(self):\n         under_estimate = [\n@@ -1292,6 +1322,18 @@ def test_datetime_subtraction(self):\n         ]\n         self.assertEqual(over_estimate, ['e4'])\n \n+        queryset = Experiment.objects.annotate(difference=ExpressionWrapper(\n+            F('start') - Value(None, output_field=models.DateTimeField()),\n+            output_field=models.DurationField(),\n+        ))\n+        self.assertIsNone(queryset.first().difference)\n+\n+        queryset = Experiment.objects.annotate(shifted=ExpressionWrapper(\n+            F('start') - Value(None, output_field=models.DurationField()),\n+            output_field=models.DateTimeField(),\n+        ))\n+        self.assertIsNone(queryset.first().shifted)\n+\n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_datetime_subtraction_microseconds(self):\n         delta = datetime.timedelta(microseconds=8999999999999999)\n",
  "problem_statement": "SQLite functions crashes on NULL values\nDescription\n\t\nIn [14]: TestModel2.objects.annotate(null=models.Value(None, output_field=models.IntegerField())).values(pow=models.F('null') ** models.F('null')).first()\n---------------------------------------------------------------------------\nOperationalError\t\t\t\t\t\t Traceback (most recent call last)\n~/dev/django/django/db/backends/utils.py in _execute(self, sql, params, *ignored_wrapper_args)\n\t 84\t\t\t else:\n---> 85\t\t\t\t return self.cursor.execute(sql, params)\n\t 86\n~/dev/django/django/db/backends/sqlite3/base.py in execute(self, query, params)\n\t295\t\t query = self.convert_query(query)\n--> 296\t\t return Database.Cursor.execute(self, query, params)\n\t297\nOperationalError: user-defined function raised exception\n",
  "hints_text": "Hmmm. Not sure we'll be able to do anything about this. (Postgres certainly behaves better.) Could you ​enable callback trackbacks on the client? We can then see the error. I'll guess it'll be this: >>> None ** None Traceback (most recent call last): File \"<console>\", line 1, in <module> TypeError: unsupported operand type(s) for ** or pow(): 'NoneType' and 'NoneType' If so we may just have to workaround it by using a function for pow which checks for None. This works: >>> TestModel.objects.annotate(null=Value(None,output_field=models.IntegerField())).values(pow=models.F('null')).first() {'pow': None} So it's just the ** operation.\nReplying to Carlton Gibson: I'll guess it'll be this: >>> None ** None Traceback (most recent call last): File \"<console>\", line 1, in <module> TypeError: unsupported operand type(s) for ** or pow(): 'NoneType' and 'NoneType' It is. By SQLite functions I meant user-defined function created here: ​https://github.com/django/django/blob/6dd4edb1b4f5441c5f543e29395039839c50d10b/django/db/backends/sqlite3/base.py#L158-L175 The list (incomplete?) of functions that crash on NULL values: ​_sqlite_time_diff ​_sqlite_timestamp_diff ​_sqlite_lpad ​_sqlite_rpad ​_sqlite_power\nOK, thanks for the clarification. We could certainly consider a PR adding test cases and a bulletproofing to the functions we're shipping.",
  "created_at": "2018-08-16T00:36:27Z",
  "version": "2.2",
  "FAIL_TO_PASS": "[\"test_decimal (db_functions.math.test_exp.ExpTests)\"]",
  "PASS_TO_PASS": "[\"test_parameter_escaping (backends.sqlite.tests.EscapingChecks)\", \"test_parameter_escaping (backends.sqlite.tests.EscapingChecksDebug)\", \"test_large_number_of_parameters (backends.sqlite.tests.LastExecutedQueryTest)\", \"test_no_interpolation (backends.sqlite.tests.LastExecutedQueryTest)\", \"test_parameter_quoting (backends.sqlite.tests.LastExecutedQueryTest)\", \"test_decimal (db_functions.math.test_abs.AbsTests)\", \"test_float (db_functions.math.test_abs.AbsTests)\", \"test_integer (db_functions.math.test_abs.AbsTests)\", \"test_null (db_functions.math.test_abs.AbsTests)\", \"test_transform (db_functions.math.test_abs.AbsTests)\", \"test_decimal (db_functions.math.test_degrees.DegreesTests)\", \"test_float (db_functions.math.test_degrees.DegreesTests)\", \"test_integer (db_functions.math.test_degrees.DegreesTests)\", \"test_transform (db_functions.math.test_degrees.DegreesTests)\", \"test_decimal (db_functions.math.test_atan.ATanTests)\", \"test_float (db_functions.math.test_atan.ATanTests)\", \"test_integer (db_functions.math.test_atan.ATanTests)\", \"test_transform (db_functions.math.test_atan.ATanTests)\", \"test_decimal (db_functions.math.test_cos.CosTests)\", \"test_float (db_functions.math.test_cos.CosTests)\", \"test_integer (db_functions.math.test_cos.CosTests)\", \"test_transform (db_functions.math.test_cos.CosTests)\", \"test_decimal (db_functions.math.test_cot.CotTests)\", \"test_float (db_functions.math.test_cot.CotTests)\", \"test_integer (db_functions.math.test_cot.CotTests)\", \"test_transform (db_functions.math.test_cot.CotTests)\", \"test_float (db_functions.math.test_exp.ExpTests)\", \"test_integer (db_functions.math.test_exp.ExpTests)\", \"test_transform (db_functions.math.test_exp.ExpTests)\", \"test_decimal (db_functions.math.test_floor.FloorTests)\", \"test_float (db_functions.math.test_floor.FloorTests)\", \"test_integer (db_functions.math.test_floor.FloorTests)\", \"test_transform (db_functions.math.test_floor.FloorTests)\", \"test_aggregation (backends.sqlite.tests.Tests)\", \"test_autoincrement (backends.sqlite.tests.Tests)\", \"A named in-memory db should be allowed where supported.\", \"test_float (db_functions.math.test_asin.ASinTests)\", \"test_integer (db_functions.math.test_asin.ASinTests)\", \"test_transform (db_functions.math.test_asin.ASinTests)\", \"test_decimal (db_functions.math.test_atan2.ATan2Tests)\", \"test_float (db_functions.math.test_atan2.ATan2Tests)\", \"test_integer (db_functions.math.test_atan2.ATan2Tests)\", \"test_decimal (db_functions.math.test_acos.ACosTests)\", \"test_float (db_functions.math.test_acos.ACosTests)\", \"test_integer (db_functions.math.test_acos.ACosTests)\", \"test_transform (db_functions.math.test_acos.ACosTests)\", \"test_decimal (db_functions.math.test_ln.LnTests)\", \"test_float (db_functions.math.test_ln.LnTests)\", \"test_integer (db_functions.math.test_ln.LnTests)\", \"test_transform (db_functions.math.test_ln.LnTests)\", \"test_decimal (db_functions.math.test_power.PowerTests)\", \"test_float (db_functions.math.test_power.PowerTests)\", \"test_integer (db_functions.math.test_power.PowerTests)\", \"test_negative_number (db_functions.text.test_repeat.RepeatTests)\", \"test_decimal (db_functions.math.test_ceil.CeilTests)\", \"test_float (db_functions.math.test_ceil.CeilTests)\", \"test_integer (db_functions.math.test_ceil.CeilTests)\", \"test_transform (db_functions.math.test_ceil.CeilTests)\", \"test_decimal (db_functions.math.test_log.LogTests)\", \"test_float (db_functions.math.test_log.LogTests)\", \"test_integer (db_functions.math.test_log.LogTests)\", \"test_decimal (db_functions.math.test_mod.ModTests)\", \"test_float (db_functions.math.test_mod.ModTests)\", \"test_integer (db_functions.math.test_mod.ModTests)\", \"test_decimal (db_functions.math.test_sin.SinTests)\", \"test_float (db_functions.math.test_sin.SinTests)\", \"test_integer (db_functions.math.test_sin.SinTests)\", \"test_transform (db_functions.math.test_sin.SinTests)\", \"test_decimal (db_functions.math.test_radians.RadiansTests)\", \"test_float (db_functions.math.test_radians.RadiansTests)\", \"test_integer (db_functions.math.test_radians.RadiansTests)\", \"test_transform (db_functions.math.test_radians.RadiansTests)\", \"test_decimal (db_functions.math.test_sqrt.SqrtTests)\", \"test_float (db_functions.math.test_sqrt.SqrtTests)\", \"test_integer (db_functions.math.test_sqrt.SqrtTests)\", \"test_transform (db_functions.math.test_sqrt.SqrtTests)\", \"test_decimal (db_functions.math.test_tan.TanTests)\", \"test_float (db_functions.math.test_tan.TanTests)\", \"test_integer (db_functions.math.test_tan.TanTests)\", \"test_transform (db_functions.math.test_tan.TanTests)\", \"test_decimal (db_functions.math.test_round.RoundTests)\", \"test_float (db_functions.math.test_round.RoundTests)\", \"test_integer (db_functions.math.test_round.RoundTests)\", \"test_null (db_functions.math.test_round.RoundTests)\", \"test_transform (db_functions.math.test_round.RoundTests)\", \"test_combined_with_length (db_functions.text.test_pad.PadTests)\", \"test_pad_negative_length (db_functions.text.test_pad.PadTests)\", \"test_complex_expressions (expressions.tests.ExpressionsNumericTests)\", \"test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)\", \"test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)\", \"test_increment_value (expressions.tests.ExpressionsNumericTests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_database_sharing_in_threads (backends.sqlite.tests.ThreadSharing)\", \"test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_field_rename_inside_atomic_block (backends.sqlite.tests.SchemaTests)\", \"test_table_rename_inside_atomic_block (backends.sqlite.tests.SchemaTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_extract_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func_explicit_timezone_priority (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_timezone_applied_before_truncation (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\"]",
  "environment_setup_commit": "4fc35a9c3efdc9154efce28cb23cb84f8834517e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.550290",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}