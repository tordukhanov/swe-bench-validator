{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-5356",
  "base_commit": "a8f4e56d8ca63252706c6200dcfb036078be39a7",
  "patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -113,14 +113,18 @@ def _parse_parametrize_args(argnames, argvalues, **_):\n             force_tuple = len(argnames) == 1\n         else:\n             force_tuple = False\n-        parameters = [\n+        return argnames, force_tuple\n+\n+    @staticmethod\n+    def _parse_parametrize_parameters(argvalues, force_tuple):\n+        return [\n             ParameterSet.extract_from(x, force_tuple=force_tuple) for x in argvalues\n         ]\n-        return argnames, parameters\n \n     @classmethod\n     def _for_parametrize(cls, argnames, argvalues, func, config, function_definition):\n-        argnames, parameters = cls._parse_parametrize_args(argnames, argvalues)\n+        argnames, force_tuple = cls._parse_parametrize_args(argnames, argvalues)\n+        parameters = cls._parse_parametrize_parameters(argvalues, force_tuple)\n         del argvalues\n \n         if parameters:\n",
  "test_patch": "diff --git a/testing/test_mark.py b/testing/test_mark.py\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -413,6 +413,28 @@ def test_func(a, b):\n     assert result.ret == 0\n \n \n+def test_parametrize_iterator(testdir):\n+    \"\"\"parametrize should work with generators (#5354).\"\"\"\n+    py_file = testdir.makepyfile(\n+        \"\"\"\\\n+        import pytest\n+\n+        def gen():\n+            yield 1\n+            yield 2\n+            yield 3\n+\n+        @pytest.mark.parametrize('a', gen())\n+        def test(a):\n+            assert a >= 1\n+        \"\"\"\n+    )\n+    result = testdir.runpytest(py_file)\n+    assert result.ret == 0\n+    # should not skip any tests\n+    result.stdout.fnmatch_lines([\"*3 passed*\"])\n+\n+\n class TestFunctional(object):\n     def test_merging_markers_deep(self, testdir):\n         # issue 199 - propagate markers into nested classes\n",
  "problem_statement": "Version 4.6.0 skips tests without apparent reason\nSince version 4.6.0 pytest skips tests without apparent reason: https://travis-ci.org/Snawoot/postfix-mta-sts-resolver/jobs/540181138\r\n\r\n- [x] output of `pip list` from the virtual environment you are using: **[HERE](https://travis-ci.org/Snawoot/postfix-mta-sts-resolver/jobs/540181138#L476)**\r\n- [x] pytest and operating system versions: **pytest 4.6.0 on Ubuntu Xenial @ Travis CI**\r\n- [x] minimal example if possible: **link above**\r\n\r\nI can't understand why it happens, so I had to immediately rollback to 4.5.0 and fix this version in dev dependencies.\r\n\n",
  "hints_text": "Can you add `-rs` (it should add additional reporting information about skipped tests)\nThis appears to be the minimal case to reproduce this:\r\n\r\n```python\r\nimport itertools\r\n\r\nimport pytest\r\n\r\nAS = (1, 2, 3)\r\nBS = (4, 5, 6)\r\n\r\n\r\n@pytest.mark.parametrize(('a', 'b'), itertools.product(AS, BS))\r\ndef test(a, b):\r\n    pass\r\n```\r\n\r\nA workaround is to apply this diff:\r\n\r\n```diff\r\n-@pytest.mark.parametrize(('a', 'b'), itertools.product(AS, BS))\r\n+@pytest.mark.parametrize(('a', 'b'), tuple(itertools.product(AS, BS)))\r\n```\r\n\r\nlooking now to see what regressed this ðŸ¤” \nThere should be a warning \nw/ `-rs` it produces this:\r\n\r\n```console\r\n$ pytest t.py -rs\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.6.7, pytest-4.6.0, py-1.8.0, pluggy-0.12.0\r\nrootdir: /home/asottile/workspace/pyupgrade\r\ncollected 1 item                                                               \r\n\r\nt.py s                                                                   [100%]\r\n\r\n=========================== short test summary info ============================\r\nSKIPPED [1] t.py:9: got empty parameter set ('a', 'b'), function test at /home/asottile/workspace/pyupgrade/t.py:8\r\n========================== 1 skipped in 0.01 seconds ===========================\r\n```\nLooks like this regressed in https://github.com/pytest-dev/pytest/pull/5254  CC @Sup3rGeo\n@asottile Thank you! Workaround does just fine. Here is output with `-rs` option if still needed: https://travis-ci.org/Snawoot/postfix-mta-sts-resolver/jobs/540200985",
  "created_at": "2019-06-01T20:51:42Z",
  "version": "4.6",
  "FAIL_TO_PASS": "[\"testing/test_mark.py::test_parametrize_iterator\"]",
  "PASS_TO_PASS": "[\"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[py.test-mark]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[py.test-param]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[pytest-mark]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[pytest-param]\", \"testing/test_mark.py::TestMark::test_pytest_mark_notcallable\", \"testing/test_mark.py::TestMark::test_mark_with_param\", \"testing/test_mark.py::TestMark::test_pytest_mark_name_starts_with_underscore\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs0-rhs0-True]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs1-rhs1-False]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs2-bar-False]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[foo-rhs3-False]\", \"testing/test_mark.py::test_addmarker_order\", \"testing/test_mark.py::test_pytest_param_id_requires_string\", \"testing/test_mark.py::test_pytest_param_id_allows_none_or_string[None]\", \"testing/test_mark.py::test_pytest_param_id_allows_none_or_string[hello\", \"testing/test_mark.py::test_pytest_param_warning_on_unknown_kwargs\", \"testing/test_mark.py::test_marked_class_run_twice\", \"testing/test_mark.py::test_ini_markers\", \"testing/test_mark.py::test_markers_option\", \"testing/test_mark.py::test_ini_markers_whitespace\", \"testing/test_mark.py::test_marker_without_description\", \"testing/test_mark.py::test_markers_option_with_plugin_in_current_dir\", \"testing/test_mark.py::test_mark_on_pseudo_function\", \"testing/test_mark.py::test_strict_prohibits_unregistered_markers[--strict-markers]\", \"testing/test_mark.py::test_strict_prohibits_unregistered_markers[--strict]\", \"testing/test_mark.py::test_mark_option[spec0]\", \"testing/test_mark.py::test_mark_option[spec1]\", \"testing/test_mark.py::test_mark_option[spec2]\", \"testing/test_mark.py::test_mark_option[spec3]\", \"testing/test_mark.py::test_mark_option_custom[spec0]\", \"testing/test_mark.py::test_mark_option_custom[spec1]\", \"testing/test_mark.py::test_keyword_option_custom[spec0]\", \"testing/test_mark.py::test_keyword_option_custom[spec1]\", \"testing/test_mark.py::test_keyword_option_custom[spec2]\", \"testing/test_mark.py::test_keyword_option_custom[spec3]\", \"testing/test_mark.py::test_keyword_option_considers_mark\", \"testing/test_mark.py::test_keyword_option_parametrize[spec0]\", \"testing/test_mark.py::test_keyword_option_parametrize[spec1]\", \"testing/test_mark.py::test_keyword_option_parametrize[spec2]\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[spec0]\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[spec1]\", \"testing/test_mark.py::test_parametrized_collected_from_command_line\", \"testing/test_mark.py::test_parametrized_collect_with_wrong_args\", \"testing/test_mark.py::test_parametrized_with_kwargs\", \"testing/test_mark.py::TestFunctional::test_merging_markers_deep\", \"testing/test_mark.py::TestFunctional::test_mark_decorator_subclass_does_not_propagate_to_base\", \"testing/test_mark.py::TestFunctional::test_mark_should_not_pass_to_siebling_class\", \"testing/test_mark.py::TestFunctional::test_mark_decorator_baseclasses_merged\", \"testing/test_mark.py::TestFunctional::test_mark_closest\", \"testing/test_mark.py::TestFunctional::test_mark_with_wrong_marker\", \"testing/test_mark.py::TestFunctional::test_mark_dynamically_in_funcarg\", \"testing/test_mark.py::TestFunctional::test_no_marker_match_on_unmarked_names\", \"testing/test_mark.py::TestFunctional::test_invalid_m_option\", \"testing/test_mark.py::TestFunctional::test_keywords_at_node_level\", \"testing/test_mark.py::TestFunctional::test_keyword_added_for_session\", \"testing/test_mark.py::TestFunctional::test_mark_from_parameters\", \"testing/test_mark.py::TestKeywordSelection::test_select_simple\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[xxx]\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[xxx\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[TestClass]\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[TestClass\", \"testing/test_mark.py::TestKeywordSelection::test_select_starton\", \"testing/test_mark.py::TestKeywordSelection::test_keyword_extra\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[None]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[skip]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[xfail]\", \"testing/test_mark.py::test_parameterset_for_fail_at_collect\", \"testing/test_mark.py::test_parameterset_for_parametrize_bad_markname\", \"testing/test_mark.py::test_mark_expressions_no_smear\", \"testing/test_mark.py::test_markers_from_parametrize\"]",
  "environment_setup_commit": "d5843f89d3c008ddcb431adbc335b080a79e617e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.927793",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}