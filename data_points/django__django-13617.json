{
  "repo": "django/django",
  "instance_id": "django__django-13617",
  "base_commit": "9ca22c7733efeeb140b75585c6387ef2cb861d19",
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2210,8 +2210,10 @@ def set_values(self, fields):\n                         field_names.append(f)\n             self.set_extra_mask(extra_names)\n             self.set_annotation_mask(annotation_names)\n+            selected = frozenset(field_names + extra_names + annotation_names)\n         else:\n             field_names = [f.attname for f in self.model._meta.concrete_fields]\n+            selected = frozenset(field_names)\n         # Selected annotations must be known before setting the GROUP BY\n         # clause.\n         if self.group_by is True:\n@@ -2225,7 +2227,7 @@ def set_values(self, fields):\n             # the selected fields anymore.\n             group_by = []\n             for expr in self.group_by:\n-                if isinstance(expr, Ref) and expr.refs not in field_names:\n+                if isinstance(expr, Ref) and expr.refs not in selected:\n                     expr = self.annotations[expr.refs]\n                 group_by.append(expr)\n             self.group_by = tuple(group_by)\n",
  "test_patch": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -9,7 +9,7 @@\n     Subquery, Sum, Value, When,\n )\n from django.db.models.expressions import RawSQL\n-from django.db.models.functions import Coalesce, Length, Lower\n+from django.db.models.functions import Coalesce, ExtractYear, Length, Lower\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -658,6 +658,25 @@ def test_annotation_exists_aggregate_values_chaining(self):\n             datetime.date(2008, 11, 3),\n         ])\n \n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    def test_annotation_subquery_and_aggregate_values_chaining(self):\n+        qs = Book.objects.annotate(\n+            pub_year=ExtractYear('pubdate')\n+        ).values('pub_year').annotate(\n+            top_rating=Subquery(\n+                Book.objects.filter(\n+                    pubdate__year=OuterRef('pub_year')\n+                ).order_by('-rating').values('rating')[:1]\n+            ),\n+            total_pages=Sum('pages'),\n+        ).values('pub_year', 'total_pages', 'top_rating')\n+        self.assertCountEqual(qs, [\n+            {'pub_year': 1991, 'top_rating': 5.0, 'total_pages': 946},\n+            {'pub_year': 1995, 'top_rating': 4.0, 'total_pages': 1132},\n+            {'pub_year': 2007, 'top_rating': 4.5, 'total_pages': 447},\n+            {'pub_year': 2008, 'top_rating': 4.0, 'total_pages': 1178},\n+        ])\n+\n     def test_annotation_aggregate_with_m2o(self):\n         if connection.vendor == 'mysql' and 'ONLY_FULL_GROUP_BY' in connection.sql_mode:\n             self.skipTest(\n",
  "problem_statement": "Aggregation over subquery annotation GROUP BY produces wrong results\nDescription\n\t \n\t\t(last modified by Christian Klus)\n\t \nStarting in django 3.0.7, specifically after patch #31566 I noticed some of my more complex queries returning incorrect results. I think I've narrowed it down to a simpler test case:\nExample query:\nBook.objects.all().annotate(\n\tpub_year=TruncYear('pubdate')\n).order_by().values('pub_year').annotate(\n\ttotal_pages=Sum('pages'),\n\ttop_rating=Subquery(\n\t\tBook.objects.filter(\n\t\t\tpubdate__year=OuterRef('pub_year')\n\t\t).order_by('rating').values('rating')[:1]\n\t)\n).values('pub_year', 'total_pages', 'top_rating')\nGenerated SQL on 3.0.6:\nSELECT\n django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\") AS \"pub_year\",\n SUM(\"aggregation_regress_book\".\"pages\") AS \"total_pages\",\n (\n\tSELECT U0.\"rating\"\n\tFROM \"aggregation_regress_book\" U0\n\tWHERE\n\t django_date_extract('year', U0.\"pubdate\") = django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\")\n\tORDER BY U0.\"rating\" ASC LIMIT 1\n ) AS \"top_rating\"\nFROM \"aggregation_regress_book\"\nGROUP BY\n django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\"),\n \"top_rating\"\nGenerated SQL on current master:\nSELECT\n django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\", NULL, NULL) AS \"pub_year\",\n SUM(\"aggregation_regress_book\".\"pages\") AS \"total_pages\",\n (\n\tSELECT U0.\"rating\"\n\tFROM \"aggregation_regress_book\" U0\n\tWHERE\n\t django_date_extract('year', U0.\"pubdate\") = django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\", NULL, NULL)\n\tORDER BY U0.\"rating\" ASC LIMIT 1\n ) AS \"top_rating\"\nFROM \"aggregation_regress_book\"\nGROUP BY\n django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\", NULL, NULL),\n (\n\tSELECT U0.\"rating\"\n\tFROM \"aggregation_regress_book\" U0\n\tWHERE\n\t django_date_extract('year', U0.\"pubdate\") = django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\", NULL, NULL)\n\tORDER BY U0.\"rating\" ASC LIMIT 1\n ),\n \"aggregation_regress_book\".\"pubdate\"\nI see two separate issues here:\n\"aggregation_regress_book\".\"pubdate\" is being added to the group by clause incorrectly (this issue probably predates the patch mentioned above)\nEven though the subquery is in the select statement, the alias is not being used and instead the subquery is reevaluated. This nearly doubles the cost of one of my queries that is experiencing this problem.\nI don't know much about the ORM internals, but here is my naive patch for the second issue:\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ee98984826..6ea287d6cb 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2220,7 +2220,7 @@ class Query(BaseExpression):\n\t\t\t # the selected fields anymore.\n\t\t\t group_by = []\n\t\t\t for expr in self.group_by:\n-\t\t\t\tif isinstance(expr, Ref) and expr.refs not in field_names:\n+\t\t\t\tif isinstance(expr, Ref) and expr.refs not in field_names + annotation_names:\n\t\t\t\t\t expr = self.annotations[expr.refs]\n\t\t\t\t group_by.append(expr)\n\t\t\t self.group_by = tuple(group_by)\nI'd appreciate anyone with deeper knowlege of the ORM to chime in and let me know if I'm on the right track. Tests are passing locally.\nThe resulting query on master:\nSELECT\n django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\", NULL, NULL) AS \"pub_year\",\n SUM(\"aggregation_regress_book\".\"pages\") AS \"total_pages\",\n (\n\tSELECT U0.\"rating\"\n\tFROM \"aggregation_regress_book\" U0\n\tWHERE\n\t django_date_extract('year', U0.\"pubdate\") = django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\", NULL, NULL)\n\tORDER BY U0.\"rating\" ASC LIMIT 1\n ) AS \"top_rating\"\nFROM \"aggregation_regress_book\"\nGROUP BY\n django_date_trunc('year', \"aggregation_regress_book\".\"pubdate\", NULL, NULL),\n \"top_rating\"\n",
  "hints_text": "Here's the test case I used (not sure if it's in the right location). It succeeds on 3.0.6 and fails on subsequent releases. tests/aggregation_regress/tests.py diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py index 7604335257..dac995e1fc 100644 a b from django.contrib.contenttypes.models import ContentType 88from django.core.exceptions import FieldError 99from django.db import connection 1010from django.db.models import ( 11 Aggregate, Avg, Case, Count, DecimalField, F, IntegerField, Max, Q, StdDev, 12 Sum, Value, Variance, When, 11 Aggregate, Avg, Case, Count, DecimalField, F, IntegerField, Max, OuterRef, 12 Q, StdDev, Subquery, Sum, Value, Variance, When 1313) 14from django.db.models.functions import TruncYear 1415from django.test import TestCase, skipUnlessAnyDBFeature, skipUnlessDBFeature 1516from django.test.utils import Approximate 1617 … … class AggregationTests(TestCase): 102103 s2.books.add(cls.b1, cls.b3, cls.b5, cls.b6) 103104 s3.books.add(cls.b3, cls.b4, cls.b6) 104105 106 def test_groupby_after_aggregation_and_subquery(self): 107 self.assertEqual( 108 Book.objects.all().annotate( 109 pub_year=TruncYear('pubdate') 110 ).order_by().values('pub_year').annotate( 111 total_pages=Sum('pages'), 112 top_rating=Subquery( 113 Book.objects.filter( 114 pubdate__year=OuterRef('pub_year') 115 ).order_by('rating').values('rating')[:1] 116 ) 117 ).values('pub_year', 'total_pages', 'top_rating').count(), 118 4 119 ) 120 105121 def assertObjectAttrs(self, obj, **kwargs): 106122 for attr, value in kwargs.items(): 107123 self.assertEqual(getattr(obj, attr), value)\nThanks for the report and test Christian, I think you analysis is right; all members of the SELECT clause should be considered. Could you submit a PR on Github including your test and the following changes django/db/models/sql/query.py diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py index ee98984826..96819803c0 100644 a b def set_values(self, fields): 22052205 field_names.append(f) 22062206 self.set_extra_mask(extra_names) 22072207 self.set_annotation_mask(annotation_names) 2208 selected = frozenset(field_names + extra_names + annotation_names) 22082209 else: 22092210 field_names = [f.attname for f in self.model._meta.concrete_fields] 2211 selected = frozenset(field_names) 22102212 # Selected annotations must be known before setting the GROUP BY 22112213 # clause. 22122214 if self.group_by is True: … … def set_values(self, fields): 22202222 # the selected fields anymore. 22212223 group_by = [] 22222224 for expr in self.group_by: 2223 if isinstance(expr, Ref) and expr.refs not in field_names: 2225 if isinstance(expr, Ref) and expr.refs not in selected: 22242226 expr = self.annotations[expr.refs] 22252227 group_by.append(expr) 22262228 self.group_by = tuple(group_by)",
  "created_at": "2020-10-27T18:27:20Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_annotation_subquery_and_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase)\"]",
  "PASS_TO_PASS": "[\"test_aggregate_alias (annotations.tests.AliasTests)\", \"test_alias_after_annotation (annotations.tests.AliasTests)\", \"test_alias_annotate_with_aggregation (annotations.tests.AliasTests)\", \"test_alias_annotation_expression (annotations.tests.AliasTests)\", \"test_alias_default_alias_expression (annotations.tests.AliasTests)\", \"test_basic_alias (annotations.tests.AliasTests)\", \"test_basic_alias_annotation (annotations.tests.AliasTests)\", \"test_basic_alias_f_annotation (annotations.tests.AliasTests)\", \"test_datetimes_alias (annotations.tests.AliasTests)\", \"test_filter_alias_agg_with_double_f (annotations.tests.AliasTests)\", \"test_filter_alias_with_double_f (annotations.tests.AliasTests)\", \"test_filter_alias_with_f (annotations.tests.AliasTests)\", \"test_joined_alias_annotation (annotations.tests.AliasTests)\", \"test_order_by_alias (annotations.tests.AliasTests)\", \"test_order_by_alias_aggregate (annotations.tests.AliasTests)\", \"test_overwrite_alias_with_annotation (annotations.tests.AliasTests)\", \"test_overwrite_annotation_with_alias (annotations.tests.AliasTests)\", \"test_update_with_alias (annotations.tests.AliasTests)\", \"test_values_alias (annotations.tests.AliasTests)\", \"test_aggregate_over_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_exists (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_aggregate_with_m2o (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_exists_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_filter_with_subquery (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_in_f_grouped_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_reverse_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_arguments_must_be_expressions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_f_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_boolean_value_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_chaining_annotation_filter_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering_with_deferred (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_annotation_commutative (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_f_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions_can_ref_other_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_defer_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_empty_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_agg_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_wrong_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_joined_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_date_interval (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_numbers (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mti_annotations (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_null_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_aggregate (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_q_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_raw_sql_with_inherited_field (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_update_with_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_with_pk_annotation (annotations.tests.NonAggregateAnnotationTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.664563",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}