{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8459",
  "base_commit": "68aa4fb29e7dfe521749e1e14f750d7afabb3481",
  "patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -27,7 +27,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj)\n+            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -777,6 +777,28 @@ def test_autodoc_type_aliases(app):\n     ]\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'myint': 'myint'}})\n+def test_autodoc_typehints_description_and_type_aliases(app):\n+    (app.srcdir / 'annotations.rst').write_text('.. autofunction:: target.annotations.sum')\n+    app.build()\n+    context = (app.outdir / 'annotations.txt').read_text()\n+    assert ('target.annotations.sum(x, y)\\n'\n+            '\\n'\n+            '   docstring\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **x** (*myint*) --\\n'\n+            '\\n'\n+            '      * **y** (*myint*) --\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      myint\\n' == context)\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autodoc_default_options(app):\n     # no settings\n",
  "problem_statement": "autodoc_type_aliases doesn't work when autodoc_typehints is set to \"description\"\n**Describe the bug**\r\nautodoc_type_aliases doesn't work when autodoc_typehints is set to \"description\".\r\n\r\n**To Reproduce**\r\n\r\ntypes.py\r\n```python\r\nfrom __future__ import annotations\r\n\r\nfrom typing import Any, Dict\r\n\r\nJSONObject = Dict[str, Any]\r\n\r\n\r\ndef sphinx_doc(data: JSONObject) -> JSONObject:\r\n    \"\"\"Does it work.\r\n\r\n    Args:\r\n        data: Does it args.\r\n\r\n    Returns:\r\n        Does it work in return.\r\n    \"\"\"\r\n    return {}\r\n\r\n```\r\n\r\nconf.py\r\n```python\r\nautodoc_typehints = 'description'\r\nautodoc_type_aliases = {\r\n    'JSONObject': 'types.JSONObject',\r\n}\r\n```\r\n\r\nI get,\r\n```\r\ntypes.sphinx_doc(data)\r\nDoes it work.\r\n\r\nParameters\r\ndata (Dict[str, Any]) – Does it args.\r\n\r\nReturns\r\nDoes it work in return.\r\n\r\nReturn type\r\nDict[str, Any]\r\n```\r\n\r\nThen if I remove `autodoc_typehints = 'description'`\r\nI get,\r\n```\r\ntypes.sphinx_doc(data: types.JSONObject) → types.JSONObject\r\nDoes it work.\r\n\r\nParameters\r\ndata – Does it args.\r\n\r\nReturns\r\nDoes it work in return.\r\n```\r\n\r\n**Expected behavior**\r\n\r\n`types.JSONObject` instead of `Dict[str, Any]` in both cases.\r\n\r\n\r\n**Environment info**\r\n- OS: Mac Catalina 10.15.7\r\n- Python version: 3.7.9\r\n- Sphinx version: 3.3.1\r\n- Sphinx extensions:      sphinx.ext.autodoc, sphinx.ext.napoleon, sphinxarg.ext\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2020-11-20T16:44:10Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\"]",
  "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.054476",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}