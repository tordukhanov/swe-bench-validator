{
  "repo": "django/django",
  "instance_id": "django__django-13884",
  "base_commit": "fdfbc66331292def201c9344e3cd29fbcbcd076a",
  "patch": "diff --git a/django/urls/base.py b/django/urls/base.py\n--- a/django/urls/base.py\n+++ b/django/urls/base.py\n@@ -1,4 +1,4 @@\n-from urllib.parse import urlsplit, urlunsplit\n+from urllib.parse import unquote, urlsplit, urlunsplit\n \n from asgiref.local import Local\n \n@@ -163,7 +163,8 @@ def translate_url(url, lang_code):\n     \"\"\"\n     parsed = urlsplit(url)\n     try:\n-        match = resolve(parsed.path)\n+        # URL may be encoded.\n+        match = resolve(unquote(parsed.path))\n     except Resolver404:\n         pass\n     else:\ndiff --git a/django/views/i18n.py b/django/views/i18n.py\n--- a/django/views/i18n.py\n+++ b/django/views/i18n.py\n@@ -2,7 +2,6 @@\n import json\n import os\n import re\n-from urllib.parse import unquote\n \n from django.apps import apps\n from django.conf import settings\n@@ -39,8 +38,6 @@ def set_language(request):\n         )\n     ):\n         next_url = request.META.get('HTTP_REFERER')\n-        # HTTP_REFERER may be encoded.\n-        next_url = next_url and unquote(next_url)\n         if not url_has_allowed_host_and_scheme(\n             url=next_url,\n             allowed_hosts={request.get_host()},\n",
  "test_patch": "diff --git a/tests/view_tests/tests/test_i18n.py b/tests/view_tests/tests/test_i18n.py\n--- a/tests/view_tests/tests/test_i18n.py\n+++ b/tests/view_tests/tests/test_i18n.py\n@@ -169,12 +169,14 @@ def test_setlang_cookie(self):\n \n     def test_setlang_decodes_http_referer_url(self):\n         \"\"\"\n-        The set_language view decodes the HTTP_REFERER URL.\n+        The set_language view decodes the HTTP_REFERER URL and preserves an\n+        encoded query string.\n         \"\"\"\n         # The URL & view must exist for this to work as a regression test.\n         self.assertEqual(reverse('with_parameter', kwargs={'parameter': 'x'}), '/test-setlang/x/')\n         lang_code = self._get_inactive_language_code()\n-        encoded_url = '/test-setlang/%C3%A4/'  # (%C3%A4 decodes to ä)\n+        # %C3%A4 decodes to ä, %26 to &.\n+        encoded_url = '/test-setlang/%C3%A4/?foo=bar&baz=alpha%26omega'\n         response = self.client.post('/i18n/setlang/', {'language': lang_code}, HTTP_REFERER=encoded_url)\n         self.assertRedirects(response, encoded_url, fetch_redirect_response=False)\n         self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n",
  "problem_statement": "i18n.set_language unquotes next_url and produces wrong url for url params containing \"&\" character\nDescription\n\t \n\t\t(last modified by Johannes Maron)\n\t \nWhen changing the language and the current URL parameter include a parameter value with an encoded \"&\" like \n?paramter=some%20%26%20thing\nthe redirect response from set_langauge is \n?paramter=some%20&%20thing\nwhere I would still expect the same URL from as in the beginning.\nI've written a Django test that shows this bug:\ndef test_set_language_url_params():\n\tfrom django.test import RequestFactory\n\tfrom django.views.i18n import set_language\n\trf = RequestFactory()\n\trequest = rf.post(\"\", next=\"\")\n\trequest.META['HTTP_REFERER'] = '/someurl/?paramter=some%20%26%20thing'\n\tresponse = set_language(request)\n\tassert response.url == '/someurl/?paramter=some%20%26%20thing'\ni18n.set_language unquotes next_url and produces wrong url for url params containing \"&\" character\nDescription\n\t \n\t\t(last modified by Johannes Maron)\n\t \nWhen changing the language and the current URL parameter include a parameter value with an encoded \"&\" like \n?paramter=some%20%26%20thing\nthe redirect response from set_langauge is \n?paramter=some%20&%20thing\nwhere I would still expect the same URL from as in the beginning.\nI've written a Django test that shows this bug:\ndef test_set_language_url_params():\n\tfrom django.test import RequestFactory\n\tfrom django.views.i18n import set_language\n\trf = RequestFactory()\n\trequest = rf.post(\"\", next=\"\")\n\trequest.META['HTTP_REFERER'] = '/someurl/?paramter=some%20%26%20thing'\n\tresponse = set_language(request)\n\tassert response.url == '/someurl/?paramter=some%20%26%20thing'\n",
  "hints_text": "After some serious digging, the bug was introduced here: ​https://github.com/django/django/commit/9e3f141701b96b6974b3386f83dc76e70a41377d via #26466. The problem seems to be, that the URL is not properly parsed. The path and GET attributes needs to be handled differently for that to work.\nI can also confirm what Chrome and Firefox both send an encoded path, but they do not \"re\"-encode the query.\nAfter some serious digging, the bug was introduced here: ​https://github.com/django/django/commit/9e3f141701b96b6974b3386f83dc76e70a41377d via #26466. The problem seems to be, that the URL is not properly parsed. The path and GET attributes needs to be handled differently for that to work.\nI can also confirm what Chrome and Firefox both send an encoded path, but they do not \"re\"-encode the query.",
  "created_at": "2021-01-12T21:25:58Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"The set_language view decodes the HTTP_REFERER URL and preserves an\"]",
  "PASS_TO_PASS": "[\"test_lang_from_translated_i18n_pattern (view_tests.tests.test_i18n.SetLanguageTests)\", \"The set_language view can be used to change the session language.\", \"test_setlang_cookie (view_tests.tests.test_i18n.SetLanguageTests)\", \"The set_language view redirects to '/' when there isn't a referer or\", \"The set_language view returns 204 by default for requests not accepting\", \"The set_language view doesn't redirect to the HTTP referer header if\", \"The set_language view only redirects to the 'next' argument if it is\", \"The set_language view redirects to the \\\"next\\\" parameter for requests\", \"The set_language view redirects to the URL in the referer header when\", \"test_setlang_reversal (view_tests.tests.test_i18n.SetLanguageTests)\", \"The fallback to root URL for the set_language view works for requests\", \"test_escaping (view_tests.tests.test_i18n.I18NViewTests)\", \"test_get_formats (view_tests.tests.test_i18n.I18NViewTests)\", \"Similar to above but with neither default or requested language being\", \"test_i18n_english_variant (view_tests.tests.test_i18n.I18NViewTests)\", \"The fallback to a language with less plural forms maintains the real\", \"Check if the JavaScript i18n view returns a complete language catalog\", \"Check if the Javascript i18n view returns an empty language catalog\", \"Makes sure that the fallback language is still working properly\", \"test_i18n_unknown_package_error (view_tests.tests.test_i18n.I18NViewTests)\", \"test_i18n_with_locale_paths (view_tests.tests.test_i18n.I18NViewTests)\", \"The javascript_catalog can be deployed with language settings\", \"test_jsi18n_USE_I18N_False (view_tests.tests.test_i18n.I18NViewTests)\", \"Let's make sure that the fallback language is still working properly\", \"The javascript_catalog shouldn't load the fallback language in the\", \"The json_catalog returns the language catalog and settings as JSON.\", \"Same as above for the json_catalog view. Here we also check for the\", \"Non-BMP characters should not break the javascript_catalog (#21725).\", \"Same as above with the difference that there IS an 'en' translation\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.673087",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}