{
  "repo": "pallets/flask",
  "instance_id": "pallets__flask-4575",
  "base_commit": "bd56d19b167822a9a23e2e9e2a07ccccc36baa8d",
  "patch": "diff --git a/src/flask/__init__.py b/src/flask/__init__.py\n--- a/src/flask/__init__.py\n+++ b/src/flask/__init__.py\n@@ -1,7 +1,6 @@\n from markupsafe import escape\n from markupsafe import Markup\n from werkzeug.exceptions import abort as abort\n-from werkzeug.utils import redirect as redirect\n \n from . import json as json\n from .app import Flask as Flask\n@@ -23,6 +22,7 @@\n from .helpers import get_flashed_messages as get_flashed_messages\n from .helpers import get_template_attribute as get_template_attribute\n from .helpers import make_response as make_response\n+from .helpers import redirect as redirect\n from .helpers import send_file as send_file\n from .helpers import send_from_directory as send_from_directory\n from .helpers import stream_with_context as stream_with_context\ndiff --git a/src/flask/app.py b/src/flask/app.py\n--- a/src/flask/app.py\n+++ b/src/flask/app.py\n@@ -22,6 +22,7 @@\n from werkzeug.routing import RequestRedirect\n from werkzeug.routing import RoutingException\n from werkzeug.routing import Rule\n+from werkzeug.utils import redirect as _wz_redirect\n from werkzeug.wrappers import Response as BaseResponse\n \n from . import cli\n@@ -1630,6 +1631,16 @@ def async_to_sync(\n \n         return asgiref_async_to_sync(func)\n \n+    def redirect(self, location: str, code: int = 302) -> BaseResponse:\n+        \"\"\"Create a redirect response object.\n+\n+        :param location: the url of the redirect\n+        :param code: http return code\n+\n+        .. versionadded:: 2.2\n+        \"\"\"\n+        return _wz_redirect(location, code=code, Response=self.response_class)\n+\n     def make_response(self, rv: ResponseReturnValue) -> Response:\n         \"\"\"Convert the return value from a view function to an instance of\n         :attr:`response_class`.\ndiff --git a/src/flask/helpers.py b/src/flask/helpers.py\n--- a/src/flask/helpers.py\n+++ b/src/flask/helpers.py\n@@ -12,6 +12,7 @@\n import werkzeug.utils\n from werkzeug.routing import BuildError\n from werkzeug.urls import url_quote\n+from werkzeug.utils import redirect as _wz_redirect\n \n from .globals import _app_ctx_stack\n from .globals import _request_ctx_stack\n@@ -21,6 +22,7 @@\n from .signals import message_flashed\n \n if t.TYPE_CHECKING:  # pragma: no cover\n+    from werkzeug.wrappers import Response as BaseResponse\n     from .wrappers import Response\n \n \n@@ -340,6 +342,28 @@ def external_url_handler(error, endpoint, values):\n     return rv\n \n \n+def redirect(\n+    location: str, code: int = 302, Response: t.Optional[t.Type[\"BaseResponse\"]] = None\n+) -> \"BaseResponse\":\n+    \"\"\"Create a redirect response object.\n+\n+    If :data:`~flask.current_app` is available, it will use\n+    :meth:`~flask.app.Flask.redirect`, otherwise it will use\n+    :func:`werkzeug.utils.redirect`.\n+\n+    :param location: The URL to redirect to.\n+    :param code: The status code for the redirect.\n+    :param Response: The response class to use. Not used when\n+        ``current_app`` is active, which uses ``app.response_class``.\n+\n+    .. versionadded:: 2.2\n+    \"\"\"\n+    if current_app:\n+        return current_app.redirect(location, code=code)\n+\n+    return _wz_redirect(location, code=code, Response=Response)\n+\n+\n def get_template_attribute(template_name: str, attribute: str) -> t.Any:\n     \"\"\"Loads a macro (or variable) a template exports.  This can be used to\n     invoke a macro from within Python code.  If you for example have a\n",
  "test_patch": "diff --git a/tests/test_helpers.py b/tests/test_helpers.py\n--- a/tests/test_helpers.py\n+++ b/tests/test_helpers.py\n@@ -158,6 +158,22 @@ def post(self):\n         assert flask.url_for(\"myview\", _method=\"POST\") == \"/myview/create\"\n \n \n+def test_redirect_no_app():\n+    response = flask.redirect(\"https://localhost\", 307)\n+    assert response.location == \"https://localhost\"\n+    assert response.status_code == 307\n+\n+\n+def test_redirect_with_app(app):\n+    def redirect(location, code=302):\n+        raise ValueError\n+\n+    app.redirect = redirect\n+\n+    with app.app_context(), pytest.raises(ValueError):\n+        flask.redirect(\"other\")\n+\n+\n class TestNoImports:\n     \"\"\"Test Flasks are created without import.\n \n",
  "problem_statement": "Move `redirect` to the `Flask` app object\nAdd a `redirect` method to the `Flask` app object. Similar to functions like `flask.json.dumps`, `flask.redirect` should look for a `current_app` and call its `redirect` method. This will allow applications to override the redirect behavior.\n",
  "hints_text": "I'm at the sprint and will start on this.",
  "created_at": "2022-05-02T16:46:41Z",
  "version": "2.2",
  "FAIL_TO_PASS": "[\"tests/test_helpers.py::test_redirect_with_app\"]",
  "PASS_TO_PASS": "[\"tests/test_helpers.py::test_redirect_no_app\", \"tests/test_helpers.py::TestNoImports::test_name_with_import_error\", \"tests/test_helpers.py::TestHelpers::test_get_debug_flag[-False-False]\", \"tests/test_helpers.py::TestHelpers::test_get_debug_flag[0-False-False]\", \"tests/test_helpers.py::TestHelpers::test_get_debug_flag[False-False-False]\", \"tests/test_helpers.py::TestHelpers::test_get_debug_flag[No-False-False]\", \"tests/test_helpers.py::TestHelpers::test_get_debug_flag[True-True-True]\", \"tests/test_helpers.py::TestHelpers::test_get_env[-production-False]\", \"tests/test_helpers.py::TestHelpers::test_get_env[production-production-False]\", \"tests/test_helpers.py::TestHelpers::test_get_env[development-development-True]\", \"tests/test_helpers.py::TestHelpers::test_get_env[other-other-False]\", \"tests/test_helpers.py::TestHelpers::test_open_resource[r]\", \"tests/test_helpers.py::TestHelpers::test_open_resource[rb]\", \"tests/test_helpers.py::TestHelpers::test_open_resource[rt]\", \"tests/test_helpers.py::TestHelpers::test_open_resource_exceptions[w]\", \"tests/test_helpers.py::TestHelpers::test_open_resource_exceptions[x]\", \"tests/test_helpers.py::TestHelpers::test_open_resource_exceptions[a]\", \"tests/test_helpers.py::TestHelpers::test_open_resource_exceptions[r+]\"]",
  "environment_setup_commit": "98ca00d54532bfdf858fe663f8fb3cc260c2048b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.843931",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}