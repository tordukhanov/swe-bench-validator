{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10097",
  "base_commit": "ce6803a18679f7085561b66ec1945ed4005e2d1d",
  "patch": "diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -242,7 +242,7 @@ def add_target_and_index(self, firstname: str, sig: str, signode: desc_signature\n             descr = _('%s command line option') % currprogram\n         else:\n             descr = _('command line option')\n-        for option in sig.split(', '):\n+        for option in signode.get('allnames', []):\n             entry = '; '.join([descr, option])\n             self.indexnode['entries'].append(('pair', entry, signode['ids'][0], '', None))\n \n",
  "test_patch": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -97,6 +97,9 @@ def test_cmd_option_with_optional_value(app):\n                           [desc, ([desc_signature, ([desc_name, '-j'],\n                                                     [desc_addname, '[=N]'])],\n                                   [desc_content, ()])]))\n+    assert_node(doctree[0], addnodes.index,\n+                entries=[('pair', 'command line option; -j', 'cmdoption-j', '', None)])\n+\n     objects = list(app.env.get_domain(\"std\").get_objects())\n     assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n \n@@ -355,10 +358,8 @@ def test_multiple_cmdoptions(app):\n                                                     [desc_addname, \" directory\"])],\n                                   [desc_content, ()])]))\n     assert_node(doctree[0], addnodes.index,\n-                entries=[('pair', 'cmd command line option; -o directory',\n-                          'cmdoption-cmd-o', '', None),\n-                         ('pair', 'cmd command line option; --output directory',\n-                          'cmdoption-cmd-o', '', None)])\n+                entries=[('pair', 'cmd command line option; -o', 'cmdoption-cmd-o', '', None),\n+                         ('pair', 'cmd command line option; --output', 'cmdoption-cmd-o', '', None)])\n     assert ('cmd', '-o') in domain.progoptions\n     assert ('cmd', '--output') in domain.progoptions\n     assert domain.progoptions[('cmd', '-o')] == ('index', 'cmdoption-cmd-o')\n",
  "problem_statement": "Latex: long option name overflows in Index\n### Describe the bug\r\n\r\nLet's consider something like:\r\n\r\n```rst\r\n.. option:: -Wauggest-attribute=[pure|const|noreturn|format|cold|malloc]\r\n\r\n   Suggest it.\r\n```\r\n\r\nLeads to the following with `xelatex`.\r\n\r\n![Screenshot from 2021-12-16 17-37-36](https://user-images.githubusercontent.com/2658545/146412212-f44aeef4-c712-4ca5-9866-02c1681b0069.png)\r\n\r\n@jfbu\r\n\r\n### How to Reproduce\r\n\r\nBuild snippet.\r\n\r\n### Expected behavior\r\n\r\n_No response_\r\n\r\n### Your project\r\n\r\nBuild the snippet\r\n\r\n### Screenshots\r\n\r\n_No response_\r\n\r\n### OS\r\n\r\nLinux\r\n\r\n### Python version\r\n\r\n3.8\r\n\r\n### Sphinx version\r\n\r\n4.3.0\r\n\r\n### Sphinx extensions\r\n\r\n_No response_\r\n\r\n### Extra tools\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_\n",
  "hints_text": "Sphinx's `make latexpdf` uses LaTeX. And LaTeX has its limitations. Often as author of a document you can work around them, depending on level of mastering LaTeX. But solving all layout problems in a general way is impossible. Sphinx goes to great lengths already for some problems with grid tables and other areas.\r\n\r\nIn the case at hand, take any LaTeX document and add\r\n\r\n```\r\nsuccessful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful|successful\r\n```\r\n\r\nto the tex file and compile to pdf. You will end up with a line extending and disappearing into the margin. Turns out TeX will not even hyphenate the word `successful` in this context, independent whether using pdftex or xetex, roman or monospace font family. And it never inserts out-of-the-box a linebreak at a `|`.\r\n\r\nHowever in the Sphinx case you can look at the files in the latex build repertory and contributing to the latex runs. You will see in the file with extension `.ind` that contains the LaTeX mark-up for that part of the document typesetting the index that the `|` has been escaped to `\\textbar{}`. \r\n\r\nAs LaTeX is a macro language you can redefine `\\textbar` to allow a linebreak. You probably want to localize this to the index so the simplest is to check the Sphinx docs for the latex index, search for `index` in the [sphinx latex docs](https://www.sphinx-doc.org/en/master/latex.html) you will see keys `'makeindex'` and `'printindex'`. Modifying the later default definition we can do this\r\n\r\n```\r\nlatex_elements = {\r\n    'printindex': r\"\"\"\r\n\\let\\originaltextbar\\textbar\\def\\textbar{\\originaltextbar\\linebreak[0]}\r\n\\printindex\r\n\"\"\",\r\n}\r\n```\r\n\r\nand there will linebreaks (inside the column of the per default 2-columns layout for the index) after the `|`.\r\n\r\nYou may wish to combine this (or replace this) with one or both of these additional LaTeX snippets inside the `'printindex'` key value:\r\n- `\\footnotesize\\raggedright` to use a smaller font size and avoid TeX stretching whitespace to try to justify paragraphs,\r\n- `\\def\\twocolumn[#1]{#1}` to have a one-column, not two-column layout.\r\n\r\nIt is also possible to try to do something with the macro `\\sphinxstyleindexentry` which one sees in the `.ind` file is the meaning assigned to the `\\spxentry` mark-up. Its default, found in the `sphinxlatexstyletext.sty` file one finds in the latex build repertory of the current project is `\\def\\sphinxstyleindexentry   #1{\\texttt{#1}}` which simply says it uses monospace font. It is possible to redefine this to do whatever is needed, but will be reexecuted at each index entry. Hence I preferred the approach above which does a global redefinition of `\\textbar` at the final part of the document where the index is printed.\r\n\nThanks for the suggestions. To be honest, the issue is related to #9965, where I would ideally do something like:\r\n\r\n```rst\r\n.. option:: -Wauggest-attribute=:samp:`={style}`\r\n\r\n  :samp:`{style}` can any of `[pure|const|noreturn|format|cold|malloc]`\r\n\r\n   Suggest it.\r\n```\r\n\r\nNote it's important *style* is in italic as it symbols that `style` is a variable and not one of the option values.\r\nWhat do you think about it?\nHow about changing the ``option`` directive to no put the part after ``=`` in the index entry? That is, the offending case will just get the index entry ``-Wsuggest-attribute``.\n> How about changing the `option` directive to no put the part after `=` in the index entry? That is, the offending case will just get the index entry `-Wsuggest-attribute`.\r\n\r\nGood idea, I've just made a pull request.",
  "created_at": "2022-01-13T17:27:25Z",
  "version": "4.4",
  "FAIL_TO_PASS": "[\"tests/test_domain_std.py::test_cmd_option_with_optional_value\", \"tests/test_domain_std.py::test_multiple_cmdoptions\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_std.py::test_process_doc_handle_figure_caption\", \"tests/test_domain_std.py::test_process_doc_handle_table_title\", \"tests/test_domain_std.py::test_get_full_qualified_name\", \"tests/test_domain_std.py::test_cmd_option_starting_with_bracket\", \"tests/test_domain_std.py::test_glossary\", \"tests/test_domain_std.py::test_glossary_warning\", \"tests/test_domain_std.py::test_glossary_comment\", \"tests/test_domain_std.py::test_glossary_comment2\", \"tests/test_domain_std.py::test_glossary_sorted\", \"tests/test_domain_std.py::test_glossary_alphanumeric\", \"tests/test_domain_std.py::test_glossary_conflicted_labels\", \"tests/test_domain_std.py::test_cmdoption\", \"tests/test_domain_std.py::test_cmdoption_for_None\", \"tests/test_domain_std.py::test_productionlist\", \"tests/test_domain_std.py::test_productionlist2\", \"tests/test_domain_std.py::test_disabled_docref\", \"tests/test_domain_std.py::test_labeled_rubric\", \"tests/test_domain_std.py::test_inline_target\"]",
  "environment_setup_commit": "0938c193ea6f56dbb930bfb323602bc4e2b7b9c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.030622",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}