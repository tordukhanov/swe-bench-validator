{
  "repo": "django/django",
  "instance_id": "django__django-12803",
  "base_commit": "35f89d199c94ebc72b06d5c44077401aa2eae47f",
  "patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -98,8 +98,7 @@ def hashed_name(self, name, content=None, filename=None):\n                 content.close()\n         path, filename = os.path.split(clean_name)\n         root, ext = os.path.splitext(filename)\n-        if file_hash is not None:\n-            file_hash = \".%s\" % file_hash\n+        file_hash = ('.%s' % file_hash) if file_hash else ''\n         hashed_name = os.path.join(path, \"%s%s%s\" %\n                                    (root, file_hash, ext))\n         unparsed_name = list(parsed_name)\n",
  "test_patch": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -88,3 +88,8 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n             ),\n         ),\n     )\n+\n+\n+class NoneHashStorage(ManifestStaticFilesStorage):\n+    def file_hash(self, name, content=None):\n+        return None\ndiff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -386,6 +386,15 @@ def test_intermediate_files(self):\n         )\n \n \n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n+class TestCollectionNoneHashStorage(CollectionTestCase):\n+    hashed_file_path = hashed_file_path\n+\n+    def test_hashed_name(self):\n+        relpath = self.hashed_file_path('cached/styles.css')\n+        self.assertEqual(relpath, 'cached/styles.css')\n+\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.SimpleStorage')\n class TestCollectionSimpleStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "problem_statement": "ManifestFilesMixin.file_hash() returning None get's included in hashed filename as 'None'.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nWhen returning a string from a custom ManifestFilesMixin.file_hash() implementation, the resulting file name is <file_path>.<custom_hash>.<ext> as expected, whereas returning None results in <file_path>None.<ext>.\nâ€‹Discussion on django-developers supports this behaviour being unintended.\nBehavior appears to have been introduced with #17896 which split the file hashing into a separate method.\nThe following test, when included in the test_storage.TestCollectionManifestStorage test class demonstrates the bug:\ndef test_hashed_name_unchanged_when_file_hash_is_None(self):\n\twith mock.patch('django.contrib.staticfiles.storage.ManifestStaticFilesStorage.file_hash', return_value=None):\n\t\tself.assertEqual(storage.staticfiles_storage.hashed_name('test/file.txt'), 'test/file.txt')\nAs suggested by the name of my test, my opinion is that the correct behaviour should be that if file_hash returns None, then no hash is inserted into the filename and it therefore remains unchanged.\nWith that in mind, a possible solution is to change the following lines in the hashed_name() method (~line 100 in staticfiles.storage):\nif file_hash is not None:\n\tfile_hash = \".%s\" % file_hash\nhashed_name = os.path.join(path, \"%s%s%s\" % (root, file_hash, ext))\nto\nif file_hash is None:\n\tfile_hash = \"\"\nelse:\n\tfile_hash = \".%s\" % file_hash\nhashed_name = os.path.join(path, \"%s%s%s\" % (root, file_hash, ext))\n",
  "hints_text": "",
  "created_at": "2020-04-26T20:22:37Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_hashed_name (staticfiles_tests.test_storage.TestCollectionNoneHashStorage)\"]",
  "PASS_TO_PASS": "[\"test_multi_extension_patterns (staticfiles_tests.test_storage.TestExtraPatternsStorage)\", \"test_collect_static_files_default_permissions (staticfiles_tests.test_storage.TestStaticFilePermissions)\", \"test_collect_static_files_permissions (staticfiles_tests.test_storage.TestStaticFilePermissions)\", \"test_collect_static_files_subclass_of_static_storage (staticfiles_tests.test_storage.TestStaticFilePermissions)\", \"test_template_tag_return (staticfiles_tests.test_storage.TestCollectionSimpleStorage)\", \"test_template_tag_simple_content (staticfiles_tests.test_storage.TestCollectionSimpleStorage)\", \"test_file_change_after_collectstatic (staticfiles_tests.test_storage.TestCollectionHashedFilesCache)\", \"test_clear_empties_manifest (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_css_import_case_insensitive (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_import_loop (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"See #18050\", \"test_intermediate_files (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_loaded_cache (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_manifest_does_not_exist (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_manifest_does_not_ignore_permission_error (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_manifest_exists (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_missing_entry (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_parse_cache (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_ignored_completely (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_with_fragment (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_with_querystring (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_path_with_querystring_and_fragment (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_post_processing (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_post_processing_failure (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_absolute (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_absolute_root (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_deep_relative (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_relative (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_return (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_simple_content (staticfiles_tests.test_storage.TestCollectionManifestStorage)\", \"test_template_tag_url (staticfiles_tests.test_storage.TestCollectionManifestStorage)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.635657",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}