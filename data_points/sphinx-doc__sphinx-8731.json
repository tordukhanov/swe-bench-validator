{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8731",
  "base_commit": "a71028bf9e18cf9fb6314c8a13a467d724cd9328",
  "patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -59,6 +59,19 @@\n _SINGLETONS = (\"None\", \"True\", \"False\", \"Ellipsis\")\n \n \n+def _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:\n+    \"\"\"Convert type specification to reference in reST.\"\"\"\n+    if _type in translations:\n+        return translations[_type]\n+    else:\n+        if _type == 'None':\n+            return ':obj:`None`'\n+        else:\n+            return ':class:`%s`' % _type\n+\n+    return _type\n+\n+\n class GoogleDocstring:\n     \"\"\"Convert Google style docstrings to reStructuredText.\n \n@@ -265,6 +278,10 @@ def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n+\n+        if _type and self._config.napoleon_preprocess_types:\n+            _type = _convert_type_spec(_type, self._config.napoleon_type_aliases or {})\n+\n         indent = self._get_indent(line) + 1\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n@@ -293,7 +310,8 @@ def _consume_inline_attribute(self) -> Tuple[str, List[str]]:\n         _descs = self.__class__(_descs, self._config).lines()\n         return _type, _descs\n \n-    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n+    def _consume_returns_section(self, preprocess_types: bool = False\n+                                 ) -> List[Tuple[str, str, List[str]]]:\n         lines = self._dedent(self._consume_to_next_section())\n         if lines:\n             before, colon, after = self._partition_field_on_colon(lines[0])\n@@ -307,6 +325,10 @@ def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n \n                 _type = before\n \n+            if (_type and preprocess_types and\n+                    self._config.napoleon_preprocess_types):\n+                _type = _convert_type_spec(_type, self._config.napoleon_type_aliases or {})\n+\n             _desc = self.__class__(_desc, self._config).lines()\n             return [(_name, _type, _desc,)]\n         else:\n@@ -652,7 +674,7 @@ def _parse_custom_params_style_section(self, section: str) -> List[str]:\n         return self._format_fields(section, self._consume_fields())\n \n     def _parse_custom_returns_style_section(self, section: str) -> List[str]:\n-        fields = self._consume_returns_section()\n+        fields = self._consume_returns_section(preprocess_types=True)\n         return self._format_fields(section, fields)\n \n     def _parse_usage_section(self, section: str) -> List[str]:\n@@ -778,7 +800,7 @@ def _parse_warns_section(self, section: str) -> List[str]:\n         return self._format_fields(_('Warns'), self._consume_fields())\n \n     def _parse_yields_section(self, section: str) -> List[str]:\n-        fields = self._consume_returns_section()\n+        fields = self._consume_returns_section(preprocess_types=True)\n         return self._format_fields(_('Yields'), fields)\n \n     def _partition_field_on_colon(self, line: str) -> Tuple[str, str, str]:\n@@ -1170,7 +1192,8 @@ def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n         _desc = self.__class__(_desc, self._config).lines()\n         return _name, _type, _desc\n \n-    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n+    def _consume_returns_section(self, preprocess_types: bool = False\n+                                 ) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n \n     def _consume_section_header(self) -> str:\n",
  "test_patch": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1167,6 +1167,30 @@ def test_pep526_annotations(self):\n \"\"\"\n             self.assertEqual(expected, actual)\n \n+    def test_preprocess_types(self):\n+        docstring = \"\"\"\\\n+Do as you please\n+\n+Yield:\n+   str:Extended\n+\"\"\"\n+        actual = str(GoogleDocstring(docstring))\n+        expected = \"\"\"\\\n+Do as you please\n+\n+:Yields: *str* -- Extended\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_preprocess_types=True)\n+        actual = str(GoogleDocstring(docstring, config))\n+        expected = \"\"\"\\\n+Do as you please\n+\n+:Yields: :class:`str` -- Extended\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n \n class NumpyDocstringTest(BaseDocstringTest):\n     docstrings = [(\n",
  "problem_statement": "Return type for Yield attribute not properly hyperlinked in apidocs\n**Describe the bug**\r\nTypically when one defines a return value in a method they will use the following syntax:\r\n\r\n```\r\nReturns:\r\n    int:\r\n        some value\r\n```\r\n\r\nWhen doing so the return type, `int` in this case, is hyperlinked to the api docs for the appropriate data type (ie: using interphinx). \r\n\r\nHowever, when writing doc strings for generators using the same / similar syntax provided by the Yield attribute, the data type associated with the generator is not appropriately decorated. Taking the previous example code snippet and making a small modification as show below is sufficient to demonstrate the change in behavior:\r\n\r\n```\r\nYields:\r\n    int:\r\n        some value\r\n```\r\n\r\nThe HTML markup produced by this code snippet simply format the data type using custom font formatting based on the theme, but it fails to associate / generate the hyperlink for the API docs for the data type as is done by the Return attribute.\r\n\r\nNOTE: I am using the apidocs Sphinx extension to generate the API docs for my projects in case that has any impact on this behavior.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n\r\n$ git clone git@github.com:TheFriendlyCoder/friendlypins.git\r\n$ cd friendlypins\r\n$ pip install -r requirements.txt\r\n$ tax -e py38-docs\r\n$ open htmldocs/index.html\r\n# Navigate to the docs for the board class (ie: htmldocs/api/friendlypins.board.html#friendlypins.board.Board.pins)\r\n```\r\n\r\n**Expected behavior**\r\nThe data type should be decorated / marked up the same way it appears when using the Return attribute when using the Yield attribute\r\n\r\n**Your project**\r\nhttps://github.com/TheFriendlyCoder/friendlypins\r\n\r\n**Screenshots**\r\nExample output generated on ReadTheDocs: https://friendlypins.readthedocs.io/en/latest/api/friendlypins.board.html#friendlypins.board.Board.pins\r\n\r\n**Environment info**\r\n- OS: MacOS\r\n- Python version: 3.8.0\r\n- Sphinx version: 3.1.2\r\n- Sphinx extensions:  sphinx.ext.autodoc, sphinx.ext.napoleon, sphinx.ext.intersphinx\r\n- Extra tools: any web browser (safari, chrome, firefox, IE)\r\n\r\n**Additional context**\r\n\r\n- https://github.com/sphinx-contrib/napoleon/issues/25 (I thought this might be a bug with the napoleon extension so I reported it here first, but they recommended I report the issue here instead)\r\n\r\n\n",
  "hints_text": "What about introducing a `:ytype:` field that would specify the type of the yielded values, just as `:rtype:` ? :) \r\nThen napoleon can use this to link to the type. ",
  "created_at": "2021-01-23T05:17:35Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_preprocess_types\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::NamedtupleSubclassTest::test_attributes_docstring\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_no_type\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_ref_in_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_attributes_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_code_block_in_returns_section\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_custom_generic_sections\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_keywords_with_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_kwargs_in_arguments\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_noindex\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_pep526_annotations\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_section_header_formatting\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_convert_numpy_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_multiple_parameters\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameter_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_without_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens_invalid\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_return_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_section_header_underline_length\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_see_also_refs\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_token_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_tokenize_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_type_preprocessor\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute_strip_signature_backslash\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_yield_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*args,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_pep526_annotations\"]",
  "environment_setup_commit": "4f8cb861e3b29186b38248fe81e4944fd987fcce",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.061193",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}