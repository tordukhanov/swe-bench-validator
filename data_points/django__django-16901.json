{
  "repo": "django/django",
  "instance_id": "django__django-16901",
  "base_commit": "ee36e101e8f8c0acde4bb148b738ab7034e902a0",
  "patch": "diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -6,6 +6,7 @@\n \n from django.core.exceptions import EmptyResultSet, FullResultSet\n from django.db.models.expressions import Case, When\n+from django.db.models.functions import Mod\n from django.db.models.lookups import Exact\n from django.utils import tree\n from django.utils.functional import cached_property\n@@ -129,12 +130,16 @@ def as_sql(self, compiler, connection):\n             # Convert if the database doesn't support XOR:\n             #   a XOR b XOR c XOR ...\n             # to:\n-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1\n+            #   (a OR b OR c OR ...) AND MOD(a + b + c + ..., 2) == 1\n+            # The result of an n-ary XOR is true when an odd number of operands\n+            # are true.\n             lhs = self.__class__(self.children, OR)\n             rhs_sum = reduce(\n                 operator.add,\n                 (Case(When(c, then=1), default=0) for c in self.children),\n             )\n+            if len(self.children) > 2:\n+                rhs_sum = Mod(rhs_sum, 2)\n             rhs = Exact(1, rhs_sum)\n             return self.__class__([lhs, rhs], AND, self.negated).as_sql(\n                 compiler, connection\n",
  "test_patch": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -19,6 +19,27 @@ def test_filter(self):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n+    def test_filter_multiple(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(\n+            qs,\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)\n+            ],\n+        )\n+\n     def test_filter_negated(self):\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n",
  "problem_statement": "On databases lacking XOR, Q(…) ^ Q(…) ^ Q(…) wrongly interpreted as exactly-one rather than parity\nDescription\n\t\nOn databases that don’t natively support XOR, such as PostgreSQL, Django generates incorrect fallback SQL for Q(…) ^ Q(…) ^ Q(…) with more than 2 arguments. The ​correct interpretation, and the interpretation of databases natively supporting XOR (e.g. ​MySQL), is that a ^ b ^ c is true when an odd number of the arguments are true. But Django’s fallback interpretation is that a ^ b ^ c is true when exactly one argument is true:\n>>> from django.db.models import Q\n>>> from my_app.models import Client\n>>> Client.objects.filter(Q(id=37)).count()\n1\n>>> Client.objects.filter(Q(id=37) ^ Q(id=37)).count()\n0\n>>> Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37)).count()\n0\n>>> Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)).count()\n0\n>>> Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)).count()\n0\n(Expected: 1, 0, 1, 0, 1.)\nThis was introduced in #29865.\n",
  "hints_text": "",
  "created_at": "2023-05-30T05:08:34Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_filter_multiple (xor_lookups.tests.XorLookupsTests.test_filter_multiple)\"]",
  "PASS_TO_PASS": "[\"test_empty_in (xor_lookups.tests.XorLookupsTests.test_empty_in)\", \"test_exclude (xor_lookups.tests.XorLookupsTests.test_exclude)\", \"test_filter (xor_lookups.tests.XorLookupsTests.test_filter)\", \"test_filter_negated (xor_lookups.tests.XorLookupsTests.test_filter_negated)\", \"test_pk_q (xor_lookups.tests.XorLookupsTests.test_pk_q)\", \"test_stages (xor_lookups.tests.XorLookupsTests.test_stages)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.775091",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}