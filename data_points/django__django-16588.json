{
  "repo": "django/django",
  "instance_id": "django__django-16588",
  "base_commit": "ad18a0102cc2968914232814c6554763f15abbe3",
  "patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -3,7 +3,7 @@\n import re\n import types\n import warnings\n-from decimal import ROUND_HALF_UP, Context, Decimal, InvalidOperation\n+from decimal import ROUND_HALF_UP, Context, Decimal, InvalidOperation, getcontext\n from functools import wraps\n from inspect import unwrap\n from operator import itemgetter\n@@ -184,6 +184,7 @@ def floatformat(text, arg=-1):\n     units = len(tupl[1])\n     units += -tupl[2] if m else tupl[2]\n     prec = abs(p) + units + 1\n+    prec = max(getcontext().prec, prec)\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\n",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -113,6 +113,10 @@ def test_zero_values(self):\n         )\n         self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n         self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0.0000\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.0000\"), 2), \"0.00\")\n+        self.assertEqual(floatformat(\"0.000000\", 4), \"0.0000\")\n+        self.assertEqual(floatformat(Decimal(\"0.000000\"), 4), \"0.0000\")\n \n     def test_negative_zero_values(self):\n         tests = [\n",
  "problem_statement": "floatformat() crashes on \"0.0000\"\nDescription\n\t\nSimilar to #34272 the current Django code (both 4.2b1 and latest git) crash on using the floatformat template filter with\n0 values.\nfrom decimal import Decimal\nfrom django.template.defaultfilters import floatformat\nfloatformat('0.0000', 2)\nfloatformat(Decimal('0.0000'), 2)\nBoth throw ValueError: valid range for prec is [1, MAX_PREC]\nUsing git bisect I tracked the bug to commit 08c5a787262c1ae57f6517d4574b54a5fcaad124.\nWhen one uses \"0.0000\": floatformat:2 the current code results in a precision of 0 which is\nnot allowed:\ntupl = d.as_tuple()\t\t\t\t # with d being \"0.0000\" returns (sign=0,digits=(0,),exponent=-4)\nunits = len(tupl[1])\t\t\t\t # equals 1\nunits += -tupl[2] if m else tupl[2] # 1 + (-4)\nprec = abs(p) + units + 1\t\t\t # 2 (number of requested decimals) + (-3) + 1 equals 0\nrounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))\n",
  "hints_text": "Fix floatformat for zero values",
  "created_at": "2023-02-22T11:48:19Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_zero_values (template_tests.filter_tests.test_floatformat.FunctionTests.test_zero_values)\"]",
  "PASS_TO_PASS": "[\"test_floatformat01 (template_tests.filter_tests.test_floatformat.FloatformatTests.test_floatformat01)\", \"test_floatformat02 (template_tests.filter_tests.test_floatformat.FloatformatTests.test_floatformat02)\", \"test_float_dunder_method (template_tests.filter_tests.test_floatformat.FunctionTests.test_float_dunder_method)\", \"test_force_grouping (template_tests.filter_tests.test_floatformat.FunctionTests.test_force_grouping)\", \"test_infinity (template_tests.filter_tests.test_floatformat.FunctionTests.test_infinity)\", \"test_inputs (template_tests.filter_tests.test_floatformat.FunctionTests.test_inputs)\", \"#15789\", \"test_negative_zero_values (template_tests.filter_tests.test_floatformat.FunctionTests.test_negative_zero_values)\", \"test_unlocalize (template_tests.filter_tests.test_floatformat.FunctionTests.test_unlocalize)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.762898",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}