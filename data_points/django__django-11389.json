{
  "repo": "django/django",
  "instance_id": "django__django-11389",
  "base_commit": "df28ebd6c89d68e781020a6a4e8405c0154e8e40",
  "patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -206,6 +206,9 @@ def _get_session(self, no_load=False):\n \n     _session = property(_get_session)\n \n+    def get_session_cookie_age(self):\n+        return settings.SESSION_COOKIE_AGE\n+\n     def get_expiry_age(self, **kwargs):\n         \"\"\"Get the number of seconds until the session expires.\n \n@@ -225,7 +228,7 @@ def get_expiry_age(self, **kwargs):\n             expiry = self.get('_session_expiry')\n \n         if not expiry:   # Checks both None and 0 cases\n-            return settings.SESSION_COOKIE_AGE\n+            return self.get_session_cookie_age()\n         if not isinstance(expiry, datetime):\n             return expiry\n         delta = expiry - modification\n@@ -249,7 +252,7 @@ def get_expiry_date(self, **kwargs):\n \n         if isinstance(expiry, datetime):\n             return expiry\n-        expiry = expiry or settings.SESSION_COOKIE_AGE   # Checks both None and 0 cases\n+        expiry = expiry or self.get_session_cookie_age()\n         return modification + timedelta(seconds=expiry)\n \n     def set_expiry(self, value):\ndiff --git a/django/contrib/sessions/backends/file.py b/django/contrib/sessions/backends/file.py\n--- a/django/contrib/sessions/backends/file.py\n+++ b/django/contrib/sessions/backends/file.py\n@@ -69,7 +69,7 @@ def _expiry_date(self, session_data):\n         Return the expiry time of the file storing the session's content.\n         \"\"\"\n         return session_data.get('_session_expiry') or (\n-            self._last_modification() + datetime.timedelta(seconds=settings.SESSION_COOKIE_AGE)\n+            self._last_modification() + datetime.timedelta(seconds=self.get_session_cookie_age())\n         )\n \n     def load(self):\ndiff --git a/django/contrib/sessions/backends/signed_cookies.py b/django/contrib/sessions/backends/signed_cookies.py\n--- a/django/contrib/sessions/backends/signed_cookies.py\n+++ b/django/contrib/sessions/backends/signed_cookies.py\n@@ -1,4 +1,3 @@\n-from django.conf import settings\n from django.contrib.sessions.backends.base import SessionBase\n from django.core import signing\n \n@@ -16,7 +15,7 @@ def load(self):\n                 self.session_key,\n                 serializer=self.serializer,\n                 # This doesn't handle non-default expiry dates, see #19201\n-                max_age=settings.SESSION_COOKIE_AGE,\n+                max_age=self.get_session_cookie_age(),\n                 salt='django.contrib.sessions.backends.signed_cookies',\n             )\n         except Exception:\n",
  "test_patch": "diff --git a/tests/sessions_tests/models.py b/tests/sessions_tests/models.py\n--- a/tests/sessions_tests/models.py\n+++ b/tests/sessions_tests/models.py\n@@ -38,3 +38,6 @@ def create_model_instance(self, data):\n         obj.account_id = account_id\n \n         return obj\n+\n+    def get_session_cookie_age(self):\n+        return 60 * 60 * 24  # One day.\ndiff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -454,6 +454,7 @@ class DatabaseSessionWithTimeZoneTests(DatabaseSessionTests):\n class CustomDatabaseSessionTests(DatabaseSessionTests):\n     backend = CustomDatabaseSession\n     session_engine = 'sessions_tests.models'\n+    custom_session_cookie_age = 60 * 60 * 24  # One day.\n \n     def test_extra_session_field(self):\n         # Set the account ID to be picked up by a custom session storage\n@@ -473,6 +474,17 @@ def test_extra_session_field(self):\n         s = self.model.objects.get(session_key=self.session.session_key)\n         self.assertIsNone(s.account_id)\n \n+    def test_custom_expiry_reset(self):\n+        self.session.set_expiry(None)\n+        self.session.set_expiry(10)\n+        self.session.set_expiry(None)\n+        self.assertEqual(self.session.get_expiry_age(), self.custom_session_cookie_age)\n+\n+    def test_default_expiry(self):\n+        self.assertEqual(self.session.get_expiry_age(), self.custom_session_cookie_age)\n+        self.session.set_expiry(0)\n+        self.assertEqual(self.session.get_expiry_age(), self.custom_session_cookie_age)\n+\n \n class CacheDBSessionTests(SessionTestsMixin, TestCase):\n \n",
  "problem_statement": "Allow SessionStore's to be easily overridden to make dynamic the session cookie age\nDescription\n\t\nIf I want to make dynamic my SESSION_COOKIE_AGE setting based on certain parameters of the session I need to reimplement in my SessionStore subclasses the following methods:\nget_expiry_age\nget_expiry_date\njust to override the points where settings.SESSION_COOKIE_AGE is used.\n",
  "hints_text": "I've created a pull request: â€‹https://github.com/django/django/pull/9318\nThat seems useful.\nActually, it looks like you can call SessionStore.set_expiry? One place to do so would be in a middleware that's listed below the session middleware, when processing a response. class SessionExpiryPolicyMiddleware(object): def __init__(self, get_response): self.get_response = get_response def __call__(self, request): response = self.get_response(request) if response.session.modified and response.status_code != 500: response.session.set_expiry(response.session.calculate_expiry()) return response\nYou are right that could be a way to achieve this, I know there are other ways to do this but don't you think that the responsible of calculating Session expirations should be the SessionStore not a middleware?\nI think it would be worth discussing in the django-developers mailing list.\nA test should be added so the change isn't inadvertently refactored away.",
  "created_at": "2019-05-19T20:18:28Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_custom_expiry_reset (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_default_expiry (sessions_tests.tests.CustomDatabaseSessionTests)\"]",
  "PASS_TO_PASS": "[\"test_clear (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CookieSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CookieSessionTests)\", \"test_cycle (sessions_tests.tests.CookieSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CookieSessionTests)\", \"test_decode (sessions_tests.tests.CookieSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CookieSessionTests)\", \"test_default_expiry (sessions_tests.tests.CookieSessionTests)\", \"test_delete (sessions_tests.tests.CookieSessionTests)\", \"test_flush (sessions_tests.tests.CookieSessionTests)\", \"test_get_empty (sessions_tests.tests.CookieSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CookieSessionTests)\", \"test_has_key (sessions_tests.tests.CookieSessionTests)\", \"test_invalid_key (sessions_tests.tests.CookieSessionTests)\", \"test_items (sessions_tests.tests.CookieSessionTests)\", \"test_keys (sessions_tests.tests.CookieSessionTests)\", \"test_new_session (sessions_tests.tests.CookieSessionTests)\", \"test_pop (sessions_tests.tests.CookieSessionTests)\", \"test_pop_default (sessions_tests.tests.CookieSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CookieSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CookieSessionTests)\", \"test_save (sessions_tests.tests.CookieSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CookieSessionTests)\", \"Falsey values (Such as an empty string) are rejected.\", \"test_session_key_is_read_only (sessions_tests.tests.CookieSessionTests)\", \"Strings shorter than 8 characters are rejected.\", \"Strings of length 8 and up are accepted and stored.\", \"test_setdefault (sessions_tests.tests.CookieSessionTests)\", \"test_store (sessions_tests.tests.CookieSessionTests)\", \"test_unpickling_exception (sessions_tests.tests.CookieSessionTests)\", \"test_update (sessions_tests.tests.CookieSessionTests)\", \"test_values (sessions_tests.tests.CookieSessionTests)\", \"test_actual_expiry (sessions_tests.tests.CacheSessionTests)\", \"test_clear (sessions_tests.tests.CacheSessionTests)\", \"test_create_and_save (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CacheSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CacheSessionTests)\", \"test_cycle (sessions_tests.tests.CacheSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CacheSessionTests)\", \"test_decode (sessions_tests.tests.CacheSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CacheSessionTests)\", \"test_default_cache (sessions_tests.tests.CacheSessionTests)\", \"test_default_expiry (sessions_tests.tests.CacheSessionTests)\", \"test_delete (sessions_tests.tests.CacheSessionTests)\", \"test_flush (sessions_tests.tests.CacheSessionTests)\", \"test_get_empty (sessions_tests.tests.CacheSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CacheSessionTests)\", \"test_has_key (sessions_tests.tests.CacheSessionTests)\", \"test_invalid_key (sessions_tests.tests.CacheSessionTests)\", \"test_items (sessions_tests.tests.CacheSessionTests)\", \"test_keys (sessions_tests.tests.CacheSessionTests)\", \"test_load_overlong_key (sessions_tests.tests.CacheSessionTests)\", \"test_new_session (sessions_tests.tests.CacheSessionTests)\", \"test_non_default_cache (sessions_tests.tests.CacheSessionTests)\", \"test_pop (sessions_tests.tests.CacheSessionTests)\", \"test_pop_default (sessions_tests.tests.CacheSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CacheSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheSessionTests)\", \"test_save (sessions_tests.tests.CacheSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CacheSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CacheSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.CacheSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheSessionTests)\", \"test_setdefault (sessions_tests.tests.CacheSessionTests)\", \"test_store (sessions_tests.tests.CacheSessionTests)\", \"test_update (sessions_tests.tests.CacheSessionTests)\", \"test_values (sessions_tests.tests.CacheSessionTests)\", \"test_empty_session_saved (sessions_tests.tests.SessionMiddlewareTests)\", \"test_flush_empty_without_session_cookie_doesnt_set_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_no_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_samesite_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_secure_session_cookie (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_delete_on_end (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_delete_on_end_with_custom_domain_and_path (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_save_on_500 (sessions_tests.tests.SessionMiddlewareTests)\", \"test_session_update_error_redirect (sessions_tests.tests.SessionMiddlewareTests)\", \"test_actual_expiry (sessions_tests.tests.CacheDBSessionTests)\", \"test_clear (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionTests)\", \"test_cycle (sessions_tests.tests.CacheDBSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionTests)\", \"test_decode (sessions_tests.tests.CacheDBSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionTests)\", \"test_default_expiry (sessions_tests.tests.CacheDBSessionTests)\", \"test_delete (sessions_tests.tests.CacheDBSessionTests)\", \"test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionTests)\", \"test_flush (sessions_tests.tests.CacheDBSessionTests)\", \"test_get_empty (sessions_tests.tests.CacheDBSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionTests)\", \"test_has_key (sessions_tests.tests.CacheDBSessionTests)\", \"test_invalid_key (sessions_tests.tests.CacheDBSessionTests)\", \"test_items (sessions_tests.tests.CacheDBSessionTests)\", \"test_keys (sessions_tests.tests.CacheDBSessionTests)\", \"test_load_overlong_key (sessions_tests.tests.CacheDBSessionTests)\", \"test_new_session (sessions_tests.tests.CacheDBSessionTests)\", \"test_non_default_cache (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop_default (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionTests)\", \"test_save (sessions_tests.tests.CacheDBSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.CacheDBSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheDBSessionTests)\", \"test_setdefault (sessions_tests.tests.CacheDBSessionTests)\", \"test_store (sessions_tests.tests.CacheDBSessionTests)\", \"test_update (sessions_tests.tests.CacheDBSessionTests)\", \"test_values (sessions_tests.tests.CacheDBSessionTests)\", \"test_actual_expiry (sessions_tests.tests.FileSessionTests)\", \"test_clear (sessions_tests.tests.FileSessionTests)\", \"test_clearsessions_command (sessions_tests.tests.FileSessionTests)\", \"test_configuration_check (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.FileSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.FileSessionTests)\", \"test_cycle (sessions_tests.tests.FileSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.FileSessionTests)\", \"test_decode (sessions_tests.tests.FileSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.FileSessionTests)\", \"test_default_expiry (sessions_tests.tests.FileSessionTests)\", \"test_delete (sessions_tests.tests.FileSessionTests)\", \"test_flush (sessions_tests.tests.FileSessionTests)\", \"test_get_empty (sessions_tests.tests.FileSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.FileSessionTests)\", \"test_has_key (sessions_tests.tests.FileSessionTests)\", \"test_invalid_key (sessions_tests.tests.FileSessionTests)\", \"test_invalid_key_backslash (sessions_tests.tests.FileSessionTests)\", \"test_invalid_key_forwardslash (sessions_tests.tests.FileSessionTests)\", \"test_items (sessions_tests.tests.FileSessionTests)\", \"test_keys (sessions_tests.tests.FileSessionTests)\", \"test_new_session (sessions_tests.tests.FileSessionTests)\", \"test_pop (sessions_tests.tests.FileSessionTests)\", \"test_pop_default (sessions_tests.tests.FileSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.FileSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.FileSessionTests)\", \"test_save (sessions_tests.tests.FileSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.FileSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.FileSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.FileSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.FileSessionTests)\", \"test_setdefault (sessions_tests.tests.FileSessionTests)\", \"test_store (sessions_tests.tests.FileSessionTests)\", \"test_update (sessions_tests.tests.FileSessionTests)\", \"test_values (sessions_tests.tests.FileSessionTests)\", \"test_actual_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_clear (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_cycle (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_decode (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_default_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_delete (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_flush (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_get_empty (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_has_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_invalid_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_items (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_keys (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_load_overlong_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_new_session (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_non_default_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop_default (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_save (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_setdefault (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_store (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_update (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_values (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)\", \"test_actual_expiry (sessions_tests.tests.DatabaseSessionTests)\", \"test_clear (sessions_tests.tests.DatabaseSessionTests)\", \"test_clearsessions_command (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionTests)\", \"test_cycle (sessions_tests.tests.DatabaseSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionTests)\", \"test_decode (sessions_tests.tests.DatabaseSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionTests)\", \"test_default_expiry (sessions_tests.tests.DatabaseSessionTests)\", \"test_delete (sessions_tests.tests.DatabaseSessionTests)\", \"test_flush (sessions_tests.tests.DatabaseSessionTests)\", \"test_get_empty (sessions_tests.tests.DatabaseSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionTests)\", \"test_has_key (sessions_tests.tests.DatabaseSessionTests)\", \"test_invalid_key (sessions_tests.tests.DatabaseSessionTests)\", \"test_items (sessions_tests.tests.DatabaseSessionTests)\", \"test_keys (sessions_tests.tests.DatabaseSessionTests)\", \"test_new_session (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop_default (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionTests)\", \"test_save (sessions_tests.tests.DatabaseSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionTests)\", \"test_session_get_decoded (sessions_tests.tests.DatabaseSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.DatabaseSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.DatabaseSessionTests)\", \"Session repr should be the session key.\", \"test_sessionmanager_save (sessions_tests.tests.DatabaseSessionTests)\", \"test_setdefault (sessions_tests.tests.DatabaseSessionTests)\", \"test_store (sessions_tests.tests.DatabaseSessionTests)\", \"test_update (sessions_tests.tests.DatabaseSessionTests)\", \"test_values (sessions_tests.tests.DatabaseSessionTests)\", \"test_actual_expiry (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_clear (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_clearsessions_command (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_cycle (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_decode (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_delete (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_extra_session_field (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_flush (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_get_empty (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_has_key (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_invalid_key (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_items (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_keys (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_new_session (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop_default (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop_default_named_argument (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_save (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_session_get_decoded (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_session_key_is_read_only (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_sessionmanager_save (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_setdefault (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_store (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_update (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_values (sessions_tests.tests.CustomDatabaseSessionTests)\", \"test_actual_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_clear (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_clearsessions_command (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_cycle (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_decode (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_default_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_delete (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_flush (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_get_empty (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_has_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_invalid_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_items (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_keys (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_new_session (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop_default (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_save (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_session_get_decoded (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_session_load_does_not_create_record (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_sessionmanager_save (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_setdefault (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_store (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_update (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\", \"test_values (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.570720",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}