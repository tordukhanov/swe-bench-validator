{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-11384",
  "base_commit": "496e776108957d8c049cbef49522cef4c1955e2f",
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1605,7 +1605,7 @@ def _print_FourierSeries(self, s):\n         return self._print_Add(s.truncate()) + self._print(' + \\ldots')\n \n     def _print_FormalPowerSeries(self, s):\n-        return self._print_Add(s.truncate())\n+        return self._print_Add(s.infinite)\n \n     def _print_FiniteField(self, expr):\n         return r\"\\mathbb{F}_{%s}\" % expr.mod\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1629,7 +1629,7 @@ def _print_FourierSeries(self, s):\n         return self._print_Add(s.truncate()) + self._print(dots)\n \n     def _print_FormalPowerSeries(self, s):\n-        return self._print_Add(s.truncate())\n+        return self._print_Add(s.infinite)\n \n     def _print_SeqFormula(self, s):\n         if self._use_unicode:\n",
  "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -3430,20 +3430,32 @@ def test_pretty_FourierSeries():\n def test_pretty_FormalPowerSeries():\n     f = fps(log(1 + x))\n \n+\n     ascii_str = \\\n \"\"\"\\\n-     2    3    4    5        \\n\\\n-    x    x    x    x     / 6\\\\\\n\\\n-x - -- + -- - -- + -- + O\\\\x /\\n\\\n-    2    3    4    5         \\\n+  oo             \\n\\\n+____             \\n\\\n+\\   `            \\n\\\n+ \\         -k  k \\n\\\n+  \\   -(-1)  *x  \\n\\\n+  /   -----------\\n\\\n+ /         k     \\n\\\n+/___,            \\n\\\n+k = 1            \\\n \"\"\"\n \n     ucode_str = \\\n u(\"\"\"\\\n-     2    3    4    5        \\n\\\n-    x    x    x    x     ⎛ 6⎞\\n\\\n-x - ── + ── - ── + ── + O⎝x ⎠\\n\\\n-    2    3    4    5         \\\n+  ∞              \\n\\\n+ ____            \\n\\\n+ ╲               \\n\\\n+  ╲        -k  k \\n\\\n+   ╲  -(-1)  ⋅x  \\n\\\n+   ╱  ───────────\\n\\\n+  ╱        k     \\n\\\n+ ╱               \\n\\\n+ ‾‾‾‾            \\n\\\n+k = 1            \\\n \"\"\")\n \n     assert pretty(f) == ascii_str\ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -600,7 +600,7 @@ def test_latex_FourierSeries():\n \n \n def test_latex_FormalPowerSeries():\n-    latex_str = r'x - \\frac{x^{2}}{2} + \\frac{x^{3}}{3} - \\frac{x^{4}}{4} + \\frac{x^{5}}{5} + \\mathcal{O}\\left(x^{6}\\right)'\n+    latex_str = r'\\sum_{k=1}^{\\infty} - \\frac{\\left(-1\\right)^{- k}}{k} x^{k}'\n     assert latex(fps(log(1 + x))) == latex_str\n \n \n",
  "problem_statement": "fps should print as a formal power series\nWhen I first used `fps`, I didn't realize it really was a formal power series as it claims to be, because it prints like a normal series (same as `series`)\n\n```\nIn [21]: fps(sin(x))\nOut[21]:\n     3     5\n    x     x     ⎛ 6⎞\nx - ── + ─── + O⎝x ⎠\n    6    120\n```\n\nBut if you look at the string form, you see\n\n```\nIn [22]: print(fps(sin(x)))\nFormalPowerSeries(sin(x), x, 0, 1, (SeqFormula(Piecewise(((-1/4)**(_k/2 - 1/2)/(RisingFactorial(3/2, _k/2 - 1/2)*factorial(_k/2 - 1/2)), Eq(Mod(_k, 2), 1)), (0, True)), (_k, 2, oo)), SeqFormula(x**_k, (_k, 0, oo)), x))\n```\n\nThat is, it really does represent it as the formula `Sum((-1)**n/factorial(2*n + 1)*x**n, (n, 0, oo))` (albiet, not simplified). It out to print it like this, so you can see that that's what it's working with.\n\nSide question: if you enter something it can't compute, it just returns the function\n\n```\nIn [25]: fps(tan(x))\nOut[25]: tan(x)\n```\n\nIs that intentional? It seems like it ought to raise an exception in that case. \n\n@leosartaj \n\n",
  "hints_text": "> That is, it really does represent it as the formula Sum((-1)**n/factorial(2_n + 1)_x**n, (n, 0, oo)) (albiet, not simplified). It out to print it like this, so you can see that that's what it's working with.\n\nI got to admit that not much discussion was done on the printing aspect of Formal Power Series.  When I first wrote the code, I tried to keep it as similar as possible to what series has to offer. Since, Formal Power Series is all about a formula computed for the series expansion, I guess this is a good idea. +1\n\n> Side question: if you enter something it can't compute, it just returns the function\n> \n> In [25]: fps(tan(x))\n> Out[25]: tan(x)\n> Is that intentional? It seems like it ought to raise an exception in that case.\n\nThis is again similar to what series does. Return it in the original form, if it's unable to compute the expansion. \n\n```\n>>> series(log(x))\nlog(x)\n```\n\nIf we want to raise an exception, the inability to compute can be from various reasons:\n1. This is simply not covered by the algorithm.\n2. SymPy does not have the required capabilities(eg. we need to construct a differential equation as part of the algorithm).\n3. There is some bug in the code (that can be fixed ofcourse).\n\nI am not sure here. Should we raise an exception or keep it just like `series`?\n\nI guess it depends on what the use-cases for fps are.  FWIW, I think series returning expressions unchanged is not so great either (but that's somewhat part of a bigger problem, where the type of series produced by `series` is not very well-defined). \n",
  "created_at": "2016-07-11T22:33:27Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_pretty_FourierSeries\"]",
  "PASS_TO_PASS": "[\"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_issue_7117\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_lambda\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_pretty_sets\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_paranthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_units\", \"test_gammas\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_pretty_primenu\", \"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_symbols\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_latex_numbers\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_Modules\", \"test_Hadamard\", \"test_ZeroMatrix\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_8409\", \"test_issue_2934\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.071844",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}