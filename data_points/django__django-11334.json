{
  "repo": "django/django",
  "instance_id": "django__django-11334",
  "base_commit": "8d010f39869f107820421631111417298d1c5bb9",
  "patch": "diff --git a/django/template/library.py b/django/template/library.py\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -1,6 +1,6 @@\n import functools\n from importlib import import_module\n-from inspect import getfullargspec\n+from inspect import getfullargspec, unwrap\n \n from django.utils.html import conditional_escape\n from django.utils.itercompat import is_iterable\n@@ -106,7 +106,7 @@ def hello(*args, **kwargs):\n             return 'world'\n         \"\"\"\n         def dec(func):\n-            params, varargs, varkw, defaults, kwonly, kwonly_defaults, _ = getfullargspec(func)\n+            params, varargs, varkw, defaults, kwonly, kwonly_defaults, _ = getfullargspec(unwrap(func))\n             function_name = (name or getattr(func, '_decorated_function', func).__name__)\n \n             @functools.wraps(func)\n@@ -143,7 +143,7 @@ def show_results(poll):\n             return {'choices': choices}\n         \"\"\"\n         def dec(func):\n-            params, varargs, varkw, defaults, kwonly, kwonly_defaults, _ = getfullargspec(func)\n+            params, varargs, varkw, defaults, kwonly, kwonly_defaults, _ = getfullargspec(unwrap(func))\n             function_name = (name or getattr(func, '_decorated_function', func).__name__)\n \n             @functools.wraps(func)\n",
  "test_patch": "diff --git a/tests/template_tests/test_library.py b/tests/template_tests/test_library.py\n--- a/tests/template_tests/test_library.py\n+++ b/tests/template_tests/test_library.py\n@@ -1,3 +1,5 @@\n+import functools\n+\n from django.template import Library\n from django.template.base import Node\n from django.test import SimpleTestCase\n@@ -61,6 +63,15 @@ def func():\n             return ''\n         self.assertIn('name', self.library.tags)\n \n+    def test_inclusion_tag_wrapped(self):\n+        @self.library.inclusion_tag('template.html')\n+        @functools.lru_cache(maxsize=32)\n+        def func():\n+            return ''\n+        func_wrapped = self.library.tags['func'].__wrapped__\n+        self.assertIs(func_wrapped, func)\n+        self.assertTrue(hasattr(func_wrapped, 'cache_info'))\n+\n \n class SimpleTagRegistrationTests(SimpleTestCase):\n \n@@ -90,6 +101,15 @@ def test_simple_tag_invalid(self):\n         with self.assertRaisesMessage(ValueError, msg):\n             self.library.simple_tag('invalid')\n \n+    def test_simple_tag_wrapped(self):\n+        @self.library.simple_tag\n+        @functools.lru_cache(maxsize=32)\n+        def func():\n+            return ''\n+        func_wrapped = self.library.tags['func'].__wrapped__\n+        self.assertIs(func_wrapped, func)\n+        self.assertTrue(hasattr(func_wrapped, 'cache_info'))\n+\n \n class TagRegistrationTests(SimpleTestCase):\n \n",
  "problem_statement": "Django's template library tags cant use already decorated things like lru_cache because of getfullargspec\nDescription\n\t\nDjango's template library tags cant use already decorated things like lru_cache because of getfullargspec. I have a tag that requires to be lru_cached but i cant use it without an helper.\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"/usr/lib64/python3.7/threading.py\", line 917, in _bootstrap_inner\n\tself.run()\n File \"/usr/lib64/python3.7/threading.py\", line 865, in run\n\tself._target(*self._args, **self._kwargs)\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/utils/autoreload.py\", line 54, in wrapper\n\tfn(*args, **kwargs)\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/core/management/commands/runserver.py\", line 117, in inner_run\n\tself.check(display_num_errors=True)\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/core/management/base.py\", line 390, in check\n\tinclude_deployment_checks=include_deployment_checks,\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/core/management/base.py\", line 377, in _run_checks\n\treturn checks.run_checks(**kwargs)\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/core/checks/registry.py\", line 72, in run_checks\n\tnew_errors = check(app_configs=app_configs)\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/contrib/admin/checks.py\", line 79, in check_dependencies\n\tfor engine in engines.all():\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/template/utils.py\", line 90, in all\n\treturn [self[alias] for alias in self]\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/template/utils.py\", line 90, in <listcomp>\n\treturn [self[alias] for alias in self]\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/template/utils.py\", line 81, in __getitem__\n\tengine = engine_cls(params)\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/template/backends/django.py\", line 25, in __init__\n\toptions['libraries'] = self.get_templatetag_libraries(libraries)\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/template/backends/django.py\", line 43, in get_templatetag_libraries\n\tlibraries = get_installed_libraries()\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/template/backends/django.py\", line 108, in get_installed_libraries\n\tfor name in get_package_libraries(pkg):\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/template/backends/django.py\", line 121, in get_package_libraries\n\tmodule = import_module(entry[1])\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/importlib/__init__.py\", line 127, in import_module\n\treturn _bootstrap._gcd_import(name[level:], package, level)\n File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\n File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\n File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\n File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\n File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\n File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n File \"/home/batuhan/qubic/aspava/social/templatetags/renderer.py\", line 25, in <module>\n\t@lru_cache(None)\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/template/library.py\", line 132, in simple_tag\n\treturn dec(func)\n File \"/home/batuhan/.local/share/virtualenvs/aspava-SBPNYCrJ/lib/python3.7/site-packages/django/template/library.py\", line 109, in dec\n\tparams, varargs, varkw, defaults, kwonly, kwonly_defaults, _ = getfullargspec(func)\n File \"/usr/lib64/python3.7/inspect.py\", line 1132, in getfullargspec\n\traise TypeError('unsupported callable') from ex\nTypeError: unsupported callable\nIt can be solved with unwrapping the function like templates/base.py did.\n",
  "hints_text": "",
  "created_at": "2019-05-07T02:19:11Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_inclusion_tag_wrapped (template_tests.test_library.InclusionTagRegistrationTests)\", \"test_simple_tag_wrapped (template_tests.test_library.SimpleTagRegistrationTests)\"]",
  "PASS_TO_PASS": "[\"test_inclusion_tag (template_tests.test_library.InclusionTagRegistrationTests)\", \"test_inclusion_tag_name (template_tests.test_library.InclusionTagRegistrationTests)\", \"test_filter (template_tests.test_library.FilterRegistrationTests)\", \"test_filter_call (template_tests.test_library.FilterRegistrationTests)\", \"test_filter_invalid (template_tests.test_library.FilterRegistrationTests)\", \"test_filter_name_arg (template_tests.test_library.FilterRegistrationTests)\", \"test_filter_name_kwarg (template_tests.test_library.FilterRegistrationTests)\", \"test_filter_parens (template_tests.test_library.FilterRegistrationTests)\", \"test_tag (template_tests.test_library.TagRegistrationTests)\", \"test_tag_call (template_tests.test_library.TagRegistrationTests)\", \"test_tag_invalid (template_tests.test_library.TagRegistrationTests)\", \"test_tag_name_arg (template_tests.test_library.TagRegistrationTests)\", \"test_tag_name_kwarg (template_tests.test_library.TagRegistrationTests)\", \"test_tag_parens (template_tests.test_library.TagRegistrationTests)\", \"test_simple_tag (template_tests.test_library.SimpleTagRegistrationTests)\", \"test_simple_tag_invalid (template_tests.test_library.SimpleTagRegistrationTests)\", \"test_simple_tag_name_kwarg (template_tests.test_library.SimpleTagRegistrationTests)\", \"test_simple_tag_parens (template_tests.test_library.SimpleTagRegistrationTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.569208",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}