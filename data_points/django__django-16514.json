{
  "repo": "django/django",
  "instance_id": "django__django-16514",
  "base_commit": "1964e4367f293336b47e30af6e10a5eca5fdfb35",
  "patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -336,6 +336,7 @@ def each_context(self, request):\n             \"available_apps\": self.get_app_list(request),\n             \"is_popup\": False,\n             \"is_nav_sidebar_enabled\": self.enable_nav_sidebar,\n+            \"log_entries\": self.get_log_entries(request),\n         }\n \n     def password_change(self, request, extra_context=None):\n@@ -588,6 +589,11 @@ def app_index(self, request, app_label, extra_context=None):\n             context,\n         )\n \n+    def get_log_entries(self, request):\n+        from django.contrib.admin.models import LogEntry\n+\n+        return LogEntry.objects.select_related(\"content_type\", \"user\")\n+\n \n class DefaultAdminSite(LazyObject):\n     def _setup(self):\ndiff --git a/django/contrib/admin/templatetags/log.py b/django/contrib/admin/templatetags/log.py\n--- a/django/contrib/admin/templatetags/log.py\n+++ b/django/contrib/admin/templatetags/log.py\n@@ -1,5 +1,4 @@\n from django import template\n-from django.contrib.admin.models import LogEntry\n \n register = template.Library()\n \n@@ -12,16 +11,13 @@ def __repr__(self):\n         return \"<GetAdminLog Node>\"\n \n     def render(self, context):\n-        if self.user is None:\n-            entries = LogEntry.objects.all()\n-        else:\n+        entries = context[\"log_entries\"]\n+        if self.user is not None:\n             user_id = self.user\n             if not user_id.isdigit():\n                 user_id = context[self.user].pk\n-            entries = LogEntry.objects.filter(user__pk=user_id)\n-        context[self.varname] = entries.select_related(\"content_type\", \"user\")[\n-            : int(self.limit)\n-        ]\n+            entries = entries.filter(user__pk=user_id)\n+        context[self.varname] = entries[: int(self.limit)]\n         return \"\"\n \n \n",
  "test_patch": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1595,7 +1595,12 @@ def test_custom_user_pk_not_named_id(self):\n         {% get_admin_log %} works if the user model's primary key isn't named\n         'id'.\n         \"\"\"\n-        context = Context({\"user\": CustomIdUser()})\n+        context = Context(\n+            {\n+                \"user\": CustomIdUser(),\n+                \"log_entries\": LogEntry.objects.all(),\n+            }\n+        )\n         template = Template(\n             \"{% load log %}{% get_admin_log 10 as admin_log for_user user %}\"\n         )\n@@ -1608,6 +1613,7 @@ def test_no_user(self):\n         user.save()\n         ct = ContentType.objects.get_for_model(User)\n         LogEntry.objects.log_action(user.pk, ct.pk, user.pk, repr(user), 1)\n+        context = Context({\"log_entries\": LogEntry.objects.all()})\n         t = Template(\n             \"{% load log %}\"\n             \"{% get_admin_log 100 as admin_log %}\"\n@@ -1615,7 +1621,7 @@ def test_no_user(self):\n             \"{{ entry|safe }}\"\n             \"{% endfor %}\"\n         )\n-        self.assertEqual(t.render(Context({})), \"Added “<User: jondoe>”.\")\n+        self.assertEqual(t.render(context), \"Added “<User: jondoe>”.\")\n \n     def test_missing_args(self):\n         msg = \"'get_admin_log' statements require two arguments\"\ndiff --git a/tests/admin_utils/admin.py b/tests/admin_utils/admin.py\n--- a/tests/admin_utils/admin.py\n+++ b/tests/admin_utils/admin.py\n@@ -35,3 +35,19 @@ class SiteAdmin(admin.ModelAdmin):\n site.register(Article)\n site.register(ArticleProxy)\n site.register(Site, SiteAdmin)\n+\n+\n+class CustomAdminSite(admin.AdminSite):\n+    def get_log_entries(self, request):\n+        from django.contrib.contenttypes.models import ContentType\n+\n+        log_entries = super().get_log_entries(request)\n+        return log_entries.filter(\n+            content_type__in=ContentType.objects.get_for_models(\n+                *self._registry.keys()\n+            ).values()\n+        )\n+\n+\n+custom_site = CustomAdminSite(name=\"custom_admin\")\n+custom_site.register(Article)\ndiff --git a/tests/admin_utils/test_logentry.py b/tests/admin_utils/test_logentry.py\n--- a/tests/admin_utils/test_logentry.py\n+++ b/tests/admin_utils/test_logentry.py\n@@ -10,7 +10,7 @@\n from django.utils import translation\n from django.utils.html import escape\n \n-from .models import Article, ArticleProxy, Site\n+from .models import Article, ArticleProxy, Car, Site\n \n \n @override_settings(ROOT_URLCONF=\"admin_utils.urls\")\n@@ -318,3 +318,30 @@ def test_action_flag_choices(self):\n             with self.subTest(action_flag=action_flag):\n                 log = LogEntry(action_flag=action_flag)\n                 self.assertEqual(log.get_action_flag_display(), display_name)\n+\n+    def test_hook_get_log_entries(self):\n+        LogEntry.objects.log_action(\n+            self.user.pk,\n+            ContentType.objects.get_for_model(Article).pk,\n+            self.a1.pk,\n+            \"Article changed\",\n+            CHANGE,\n+            change_message=\"Article changed message\",\n+        )\n+        c1 = Car.objects.create()\n+        LogEntry.objects.log_action(\n+            self.user.pk,\n+            ContentType.objects.get_for_model(Car).pk,\n+            c1.pk,\n+            \"Car created\",\n+            ADDITION,\n+            change_message=\"Car created message\",\n+        )\n+        response = self.client.get(reverse(\"admin:index\"))\n+        self.assertContains(response, \"Article changed\")\n+        self.assertContains(response, \"Car created\")\n+\n+        # site \"custom_admin\" only renders log entries of registered models\n+        response = self.client.get(reverse(\"custom_admin:index\"))\n+        self.assertContains(response, \"Article changed\")\n+        self.assertNotContains(response, \"Car created\")\ndiff --git a/tests/admin_utils/urls.py b/tests/admin_utils/urls.py\n--- a/tests/admin_utils/urls.py\n+++ b/tests/admin_utils/urls.py\n@@ -1,7 +1,8 @@\n from django.urls import path\n \n-from .admin import site\n+from .admin import custom_site, site\n \n urlpatterns = [\n     path(\"test_admin/admin/\", site.urls),\n+    path(\"test_admin/custom_admin/\", custom_site.urls),\n ]\n",
  "problem_statement": "Admin Site shall filter LogEntries by registered models\nDescription\n\t\nThis ticket has been discussed here: ​https://groups.google.com/g/django-developers/c/OyTo0P2TfAE\nIf an implementer registers more than one AdminSite, one might expect that only changes on models registered at that specific site are logged.\nThis currently is not the case, all registered sites show all entries of LogEntry. It is confusing for users to access a specific site and see log entries for models they can't access.\n",
  "hints_text": "I'm always sceptical about new Admin API, but I'm going to Accept this, as I can see the use-case. (+0) I've left ​comments on the first PR. Summary: IMO, we should add only the minimal hook to let folks customise the LogEntry QuerySet, and document that, but not add the initially suggested helper methods and AdminSite flag attributes.",
  "created_at": "2023-01-31T15:31:20Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_hook_get_log_entries (admin_utils.test_logentry.LogEntryTests.test_hook_get_log_entries)\"]",
  "PASS_TO_PASS": "[\"{% get_admin_log %} works if the user model's primary key isn't named\", \"test_missing_args (admin_changelist.tests.GetAdminLogTests.test_missing_args)\", \"{% get_admin_log %} works without specifying a user.\", \"test_non_integer_limit (admin_changelist.tests.GetAdminLogTests.test_non_integer_limit)\", \"test_without_as (admin_changelist.tests.GetAdminLogTests.test_without_as)\", \"test_without_for_user (admin_changelist.tests.GetAdminLogTests.test_without_for_user)\", \"test_action_flag_choices (admin_utils.test_logentry.LogEntryTests.test_action_flag_choices)\", \"test_log_action (admin_utils.test_logentry.LogEntryTests.test_log_action)\", \"LogEntry.change_message is stored as a dumped JSON structure to be able\", \"All messages for changed formsets are logged in a change message.\", \"Localized date/time inputs shouldn't affect changed form data detection.\", \"LogEntry.change_message was a string before Django 1.10.\", \"LogEntry.get_admin_url returns a URL to edit the entry's object or\", \"LogEntry.get_edited_object() returns the edited object of a LogEntry\", \"test_logentry_repr (admin_utils.test_logentry.LogEntryTests.test_logentry_repr)\", \"LogEntry.action_time is a timestamp of the date when the entry was\", \"test_logentry_unicode (admin_utils.test_logentry.LogEntryTests.test_logentry_unicode)\", \"Log entries for proxy models should have the proxy model's contenttype\", \"If a LogEntry is missing content_type it will not display it in span\", \"test_builtin_lookup_in_search_fields (admin_changelist.tests.ChangeListTests.test_builtin_lookup_in_search_fields)\", \"test_changelist_search_form_validation (admin_changelist.tests.ChangeListTests.test_changelist_search_form_validation)\", \"list_editable edits use a filtered queryset to limit memory usage.\", \"test_clear_all_filters_link (admin_changelist.tests.ChangeListTests.test_clear_all_filters_link)\", \"test_clear_all_filters_link_callable_filter (admin_changelist.tests.ChangeListTests.test_clear_all_filters_link_callable_filter)\", \"Regression test for #13196: output of functions should be  localized\", \"test_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests.test_custom_lookup_in_search_fields)\", \"test_custom_lookup_with_pk_shortcut (admin_changelist.tests.ChangeListTests.test_custom_lookup_with_pk_shortcut)\", \"test_custom_paginator (admin_changelist.tests.ChangeListTests.test_custom_paginator)\", \"The primary key is used in the ordering of the changelist's results to\", \"Regression tests for #14206: dynamic list_display support.\", \"Regression tests for #16257: dynamic list_display_links support.\", \"Regression tests for ticket #17646: dynamic list_filter support.\", \"test_dynamic_search_fields (admin_changelist.tests.ChangeListTests.test_dynamic_search_fields)\", \"test_get_edited_object_ids (admin_changelist.tests.ChangeListTests.test_get_edited_object_ids)\", \"test_get_list_editable_queryset (admin_changelist.tests.ChangeListTests.test_get_list_editable_queryset)\", \"test_get_list_editable_queryset_with_regex_chars_in_prefix (admin_changelist.tests.ChangeListTests.test_get_list_editable_queryset_with_regex_chars_in_prefix)\", \"test_get_select_related_custom_method (admin_changelist.tests.ChangeListTests.test_get_select_related_custom_method)\", \"test_list_editable_atomicity (admin_changelist.tests.ChangeListTests.test_list_editable_atomicity)\", \"test_many_search_terms (admin_changelist.tests.ChangeListTests.test_many_search_terms)\", \"All rows containing each of the searched words are returned, where each\", \"Simultaneous edits of list_editable fields on the changelist by\", \"test_no_clear_all_filters_link (admin_changelist.tests.ChangeListTests.test_no_clear_all_filters_link)\", \"Regression test for #13902: When using a ManyToMany in list_filter,\", \"When using a ManyToMany in search_fields at the second level behind a\", \"Regressions tests for #15819: If a field listed in list_filters is a\", \"Regressions tests for #15819: If a field listed in search_fields\", \"When using a ManyToMany in list_filter at the second level behind a\", \"If a ManyToManyField is in list_filter but isn't in any lookup params,\", \"#15185 -- Allow no links from the 'change list' view grid.\", \"When ModelAdmin.has_add_permission() returns False, the object-tools\", \"Regression tests for #12893: Pagination in admins changelist doesn't\", \"Regression tests for ticket #15653: ensure the number of pages\", \"test_pk_in_search_fields (admin_changelist.tests.ChangeListTests.test_pk_in_search_fields)\", \"Searches over multi-valued relationships return rows from related\", \"test_repr (admin_changelist.tests.ChangeListTests.test_repr)\", \"Regression test for #14312: list_editable with pagination\", \"Regression tests for #11791: Inclusion tag result_list generates a\", \"Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\", \"Inclusion tag result_list generates a table when with default\", \"Empty value display can be set in ModelAdmin or individual fields.\", \"Empty value display can be set on AdminSite.\", \"test_search_help_text (admin_changelist.tests.ChangeListTests.test_search_help_text)\", \"test_select_related_as_empty_tuple (admin_changelist.tests.ChangeListTests.test_select_related_as_empty_tuple)\", \"test_select_related_as_tuple (admin_changelist.tests.ChangeListTests.test_select_related_as_tuple)\", \"Regression test for #10348: ChangeList.get_queryset() shouldn't\", \"test_select_related_preserved_when_multi_valued_in_search_fields (admin_changelist.tests.ChangeListTests.test_select_related_preserved_when_multi_valued_in_search_fields)\", \"test_show_all (admin_changelist.tests.ChangeListTests.test_show_all)\", \"test_spanning_relations_with_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests.test_spanning_relations_with_custom_lookup_in_search_fields)\", \"test_specified_ordering_by_f_expression (admin_changelist.tests.ChangeListTests.test_specified_ordering_by_f_expression)\", \"test_specified_ordering_by_f_expression_without_asc_desc (admin_changelist.tests.ChangeListTests.test_specified_ordering_by_f_expression_without_asc_desc)\", \"test_total_ordering_optimization (admin_changelist.tests.ChangeListTests.test_total_ordering_optimization)\", \"test_total_ordering_optimization_meta_constraints (admin_changelist.tests.ChangeListTests.test_total_ordering_optimization_meta_constraints)\", \"test_tuple_list_display (admin_changelist.tests.ChangeListTests.test_tuple_list_display)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.760701",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}