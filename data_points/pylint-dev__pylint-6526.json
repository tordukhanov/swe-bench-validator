{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-6526",
  "base_commit": "0220a39f6d4dddd1bf8f2f6d83e11db58a093fbe",
  "patch": "diff --git a/pylint/lint/caching.py b/pylint/lint/caching.py\n--- a/pylint/lint/caching.py\n+++ b/pylint/lint/caching.py\n@@ -16,7 +16,12 @@\n def _get_pdata_path(\n     base_name: Path, recurs: int, pylint_home: Path = Path(PYLINT_HOME)\n ) -> Path:\n-    underscored_name = \"_\".join(str(p) for p in base_name.parts)\n+    # We strip all characters that can't be used in a filename\n+    # Also strip '/' and '\\\\' because we want to create a single file, not sub-directories\n+    underscored_name = \"_\".join(\n+        str(p.replace(\":\", \"_\").replace(\"/\", \"_\").replace(\"\\\\\", \"_\"))\n+        for p in base_name.parts\n+    )\n     return pylint_home / f\"{underscored_name}_{recurs}.stats\"\n \n \n",
  "test_patch": "diff --git a/tests/lint/test_caching.py b/tests/lint/test_caching.py\n--- a/tests/lint/test_caching.py\n+++ b/tests/lint/test_caching.py\n@@ -5,6 +5,7 @@\n # Pytest fixtures work like this by design\n # pylint: disable=redefined-outer-name\n \n+import sys\n from pathlib import Path\n \n import pytest\n@@ -18,15 +19,67 @@\n \n \n @pytest.mark.parametrize(\n-    \"path,recur,expected\",\n+    \"path,recur,pylint_home,expected\",\n     [\n-        [\"\", 1, PYLINT_HOME_PATH / \"_1.stats\"],\n-        [\"\", 2, PYLINT_HOME_PATH / \"_2.stats\"],\n-        [\"a/path\", 42, PYLINT_HOME_PATH / \"a_path_42.stats\"],\n+        [\"\", 1, PYLINT_HOME_PATH, PYLINT_HOME_PATH / \"_1.stats\"],\n+        [\"\", 2, PYLINT_HOME_PATH, PYLINT_HOME_PATH / \"_2.stats\"],\n+        [\"a/path\", 42, PYLINT_HOME_PATH, PYLINT_HOME_PATH / \"a_path_42.stats\"],\n     ],\n )\n-def test__get_pdata_path(path: str, recur: int, expected: Path) -> None:\n-    assert _get_pdata_path(Path(path), recur) == expected\n+def test__get_pdata_path(\n+    path: str, recur: int, pylint_home: Path, expected: Path\n+) -> None:\n+    assert _get_pdata_path(Path(path), recur, pylint_home) == expected\n+\n+\n+@pytest.mark.skipif(sys.platform == \"win32\", reason=\"Path type of *nix\")\n+@pytest.mark.parametrize(\n+    \"path,recur,pylint_home,expected\",\n+    [\n+        [\n+            \"/workspace/MyDir/test.py\",\n+            1,\n+            Path(\"/root/.cache/pylint\"),\n+            Path(\"/root/.cache/pylint\") / \"__workspace_MyDir_test.py_1.stats\",\n+        ],\n+        [\n+            \"/workspace/MyDir/test.py\",\n+            1,\n+            Path(\"//host/computer/.cache\"),\n+            Path(\"//host/computer/.cache\") / \"__workspace_MyDir_test.py_1.stats\",\n+        ],\n+    ],\n+)\n+def test__get_pdata_path_nix(\n+    path: str, recur: int, pylint_home: Path, expected: Path\n+) -> None:\n+    \"\"\"test__get_pdata_path but specifically for *nix system paths.\"\"\"\n+    assert _get_pdata_path(Path(path), recur, pylint_home) == expected\n+\n+\n+@pytest.mark.skipif(sys.platform != \"win32\", reason=\"Path type of windows\")\n+@pytest.mark.parametrize(\n+    \"path,recur,pylint_home,expected\",\n+    [\n+        [\n+            \"D:\\\\MyDir\\\\test.py\",\n+            1,\n+            Path(\"C:\\\\Users\\\\MyPylintHome\"),\n+            Path(\"C:\\\\Users\\\\MyPylintHome\") / \"D___MyDir_test.py_1.stats\",\n+        ],\n+        [\n+            \"C:\\\\MyDir\\\\test.py\",\n+            1,\n+            Path(\"C:\\\\Users\\\\MyPylintHome\"),\n+            Path(\"C:\\\\Users\\\\MyPylintHome\") / \"C___MyDir_test.py_1.stats\",\n+        ],\n+    ],\n+)\n+def test__get_pdata_path_windows(\n+    path: str, recur: int, pylint_home: Path, expected: Path\n+) -> None:\n+    \"\"\"test__get_pdata_path but specifically for windows.\"\"\"\n+    assert _get_pdata_path(Path(path), recur, pylint_home) == expected\n \n \n @pytest.fixture\n",
  "problem_statement": "How does pylint decide where it should put stat files?\n### Question\r\n\r\nI am from the VS Code python extension team, working on building an extension for VS Code using pylint. We have pre-release version out. An issue was reported on the extension that it creates pylint stat files in the project directory. We are not specifically passing anything to change the stat file location (see issue here https://github.com/microsoft/vscode-pylint/issues/30).\r\n\r\nGenerally, the stat files go into pre-set directory like %USERPROFILE%/AppData/Local/pylint on windows. What can cause these to be written to the current working directory.\r\n\r\nWe use pass the source code into pylint via stdin, and the only two arguments we use are `--reports=n`, `--output-format=json`. Any clue to debug this would be helpful.\r\n\r\n\r\n### Documentation for future user\r\n\r\nI could not find fall back location for the stat files and when would the fallback location be used.\r\n\r\n### Additional context\r\n\r\nWe use `runpy.run_module` to run pylint, and we send source to pylint via stdin. \r\nRelevant code here: https://github.com/microsoft/vscode-pylint/blob/725fc7ae415a9638e2a44e922cf5133efde62811/bundled/linter/utils.py#L146-L168\r\n\r\n\r\n\n",
  "hints_text": "One thing that could prevent using the XDG_HOME is if an env var for PYLINTHOME exists.\r\n\r\nRelevant code:\r\nhttps://github.com/PyCQA/pylint/blob/main/pylint/constants.py#L54\r\nhttps://github.com/PyCQA/pylint/blob/main/pylint/config/__init__.py#L39\nAnother issue might be that by using `stdin` the `FileItem` used by our main `PyLinter` class has a non-sensical file name.\r\nThat file name is used by the following function to determine a part of the file to be saved to:\r\nhttps://github.com/PyCQA/pylint/blob/ae5ed5c57a8f9a60a37bd010be052b08aa864de7/pylint/lint/pylinter.py#L1038\r\n\r\nI followed the mentioned topic somewhat but haven't fully kept up. Is there an easily reproducible example? I'd be happy to try and investigate what is happening inside `save_results`.\r\n```diff\r\ndiff --git a/pylint/config/__init__.py b/pylint/config/__init__.py\r\nindex b8fb0a0b..87b9ef24 100644\r\n--- a/pylint/config/__init__.py\r\n+++ b/pylint/config/__init__.py\r\n@@ -95,12 +95,15 @@ def load_results(base):\r\n \r\n \r\n def save_results(results, base):\r\n+    print(base)\r\n+    print(PYLINT_HOME)\r\n     if not os.path.exists(PYLINT_HOME):\r\n         try:\r\n             os.makedirs(PYLINT_HOME)\r\n         except OSError:\r\n             print(f\"Unable to create directory {PYLINT_HOME}\", file=sys.stderr)\r\n     data_file = _get_pdata_path(base, 1)\r\n+    print(data_file)\r\n     try:\r\n         with open(data_file, \"wb\") as stream:\r\n             pickle.dump(results, stream)\r\n```\r\n\r\nCould also help investigate some of the variables within that function.\n@DanielNoord @Pierre-Sassoulas Thanks for the input, I will try and look into it.\r\n\r\nfor the minimal repro, unfortunately we have not been able to narrow down the parameters that cause. It seems to be specific to the permissions and how the server hosting pylint itself is launched. The information above might help narrow this down.\n@karthiknadig Feel free to ping me in the other issue if needed! I'd be glad to provide any other diffs or fix-branches that might solve the issue. From what I gathered from the discussion until now it is still not clear whether the issue is with the user, the extension or pylint's internals. Happy to help narrow that down!\nI have opened the issue for the extension. I think I found the reason (https://github.com/microsoft/vscode-pylint/issues/30#issuecomment-1103733138) and there is now a reproducible example (https://github.com/microsoft/vscode-pylint/issues/30#issuecomment-1102970279).\nJust to update: I have been working on a fix in https://github.com/DanielNoord/pylint/pull/135. I just need to test with the original reporter once more if this does indeed work and then I'll submit the patch.",
  "created_at": "2022-05-06T14:39:49Z",
  "version": "2.14",
  "FAIL_TO_PASS": "[\"tests/lint/test_caching.py::test__get_pdata_path_nix[/test.py-1-pylint_home0-expected0]\", \"tests/lint/test_caching.py::test__get_pdata_path_nix[/test.py-1-pylint_home1-expected1]\"]",
  "PASS_TO_PASS": "[\"tests/lint/test_caching.py::test__get_pdata_path[-1-pylint_home0-expected0]\", \"tests/lint/test_caching.py::test__get_pdata_path[-2-pylint_home1-expected1]\", \"tests/lint/test_caching.py::test__get_pdata_path[a/path-42-pylint_home2-expected2]\", \"tests/lint/test_caching.py::test_save_and_load_result[.tests/]\", \"tests/lint/test_caching.py::test_save_and_load_result[.tests/a/path/]\", \"tests/lint/test_caching.py::test_save_and_load_not_a_linter_stats[.tests]\", \"tests/lint/test_caching.py::test_save_and_load_not_a_linter_stats[.tests/a/path/]\"]",
  "environment_setup_commit": "680edebc686cad664bbed934a490aeafa775f163",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.913676",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}