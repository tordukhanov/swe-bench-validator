{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10577",
  "base_commit": "b90661d6a46aa3619d3eec94d5281f5888add501",
  "patch": "diff --git a/examples/svm/plot_separating_hyperplane_unbalanced.py b/examples/svm/plot_separating_hyperplane_unbalanced.py\n--- a/examples/svm/plot_separating_hyperplane_unbalanced.py\n+++ b/examples/svm/plot_separating_hyperplane_unbalanced.py\n@@ -29,14 +29,17 @@\n import numpy as np\n import matplotlib.pyplot as plt\n from sklearn import svm\n+from sklearn.datasets import make_blobs\n \n-# we create clusters with 1000 and 100 points\n-rng = np.random.RandomState(0)\n+# we create two clusters of random points\n n_samples_1 = 1000\n n_samples_2 = 100\n-X = np.r_[1.5 * rng.randn(n_samples_1, 2),\n-          0.5 * rng.randn(n_samples_2, 2) + [2, 2]]\n-y = [0] * (n_samples_1) + [1] * (n_samples_2)\n+centers = [[0.0, 0.0], [2.0, 2.0]]\n+clusters_std = [1.5, 0.5]\n+X, y = make_blobs(n_samples=[n_samples_1, n_samples_2],\n+                  centers=centers,\n+                  cluster_std=clusters_std,\n+                  random_state=0, shuffle=False)\n \n # fit the model and get the separating hyperplane\n clf = svm.SVC(kernel='linear', C=1.0)\ndiff --git a/sklearn/datasets/samples_generator.py b/sklearn/datasets/samples_generator.py\n--- a/sklearn/datasets/samples_generator.py\n+++ b/sklearn/datasets/samples_generator.py\n@@ -11,6 +11,7 @@\n import numpy as np\n from scipy import linalg\n import scipy.sparse as sp\n+from collections import Iterable\n \n from ..preprocessing import MultiLabelBinarizer\n from ..utils import check_array, check_random_state\n@@ -696,7 +697,7 @@ def make_moons(n_samples=100, shuffle=True, noise=None, random_state=None):\n     return X, y\n \n \n-def make_blobs(n_samples=100, n_features=2, centers=3, cluster_std=1.0,\n+def make_blobs(n_samples=100, n_features=2, centers=None, cluster_std=1.0,\n                center_box=(-10.0, 10.0), shuffle=True, random_state=None):\n     \"\"\"Generate isotropic Gaussian blobs for clustering.\n \n@@ -704,15 +705,21 @@ def make_blobs(n_samples=100, n_features=2, centers=3, cluster_std=1.0,\n \n     Parameters\n     ----------\n-    n_samples : int, optional (default=100)\n-        The total number of points equally divided among clusters.\n+    n_samples : int or array-like, optional (default=100)\n+        If int, it is the the total number of points equally divided among\n+        clusters.\n+        If array-like, each element of the sequence indicates\n+        the number of samples per cluster.\n \n     n_features : int, optional (default=2)\n         The number of features for each sample.\n \n     centers : int or array of shape [n_centers, n_features], optional\n-        (default=3)\n+        (default=None)\n         The number of centers to generate, or the fixed center locations.\n+        If n_samples is an int and centers is None, 3 centers are generated.\n+        If n_samples is array-like, centers must be\n+        either None or an array of length equal to the length of n_samples.\n \n     cluster_std : float or sequence of floats, optional (default=1.0)\n         The standard deviation of the clusters.\n@@ -747,6 +754,12 @@ def make_blobs(n_samples=100, n_features=2, centers=3, cluster_std=1.0,\n     (10, 2)\n     >>> y\n     array([0, 0, 1, 0, 2, 2, 2, 1, 1, 0])\n+    >>> X, y = make_blobs(n_samples=[3, 3, 4], centers=None, n_features=2,\n+    ...                   random_state=0)\n+    >>> print(X.shape)\n+    (10, 2)\n+    >>> y\n+    array([0, 1, 2, 0, 2, 2, 2, 1, 1, 0])\n \n     See also\n     --------\n@@ -754,12 +767,46 @@ def make_blobs(n_samples=100, n_features=2, centers=3, cluster_std=1.0,\n     \"\"\"\n     generator = check_random_state(random_state)\n \n-    if isinstance(centers, numbers.Integral):\n-        centers = generator.uniform(center_box[0], center_box[1],\n-                                    size=(centers, n_features))\n+    if isinstance(n_samples, numbers.Integral):\n+        # Set n_centers by looking at centers arg\n+        if centers is None:\n+            centers = 3\n+\n+        if isinstance(centers, numbers.Integral):\n+            n_centers = centers\n+            centers = generator.uniform(center_box[0], center_box[1],\n+                                        size=(n_centers, n_features))\n+\n+        else:\n+            centers = check_array(centers)\n+            n_features = centers.shape[1]\n+            n_centers = centers.shape[0]\n+\n     else:\n-        centers = check_array(centers)\n-        n_features = centers.shape[1]\n+        # Set n_centers by looking at [n_samples] arg\n+        n_centers = len(n_samples)\n+        if centers is None:\n+            centers = generator.uniform(center_box[0], center_box[1],\n+                                        size=(n_centers, n_features))\n+        try:\n+            assert len(centers) == n_centers\n+        except TypeError:\n+            raise ValueError(\"Parameter `centers` must be array-like. \"\n+                             \"Got {!r} instead\".format(centers))\n+        except AssertionError:\n+            raise ValueError(\"Length of `n_samples` not consistent\"\n+                             \" with number of centers. Got n_samples = {} \"\n+                             \"and centers = {}\".format(n_samples, centers))\n+        else:\n+            centers = check_array(centers)\n+            n_features = centers.shape[1]\n+\n+    # stds: if cluster_std is given as list, it must be consistent\n+    # with the n_centers\n+    if (hasattr(cluster_std, \"__len__\") and len(cluster_std) != n_centers):\n+        raise ValueError(\"Length of `clusters_std` not consistent with \"\n+                         \"number of centers. Got centers = {} \"\n+                         \"and cluster_std = {}\".format(centers, cluster_std))\n \n     if isinstance(cluster_std, numbers.Real):\n         cluster_std = np.ones(len(centers)) * cluster_std\n@@ -767,22 +814,25 @@ def make_blobs(n_samples=100, n_features=2, centers=3, cluster_std=1.0,\n     X = []\n     y = []\n \n-    n_centers = centers.shape[0]\n-    n_samples_per_center = [int(n_samples // n_centers)] * n_centers\n+    if isinstance(n_samples, Iterable):\n+        n_samples_per_center = n_samples\n+    else:\n+        n_samples_per_center = [int(n_samples // n_centers)] * n_centers\n \n-    for i in range(n_samples % n_centers):\n-        n_samples_per_center[i] += 1\n+        for i in range(n_samples % n_centers):\n+            n_samples_per_center[i] += 1\n \n     for i, (n, std) in enumerate(zip(n_samples_per_center, cluster_std)):\n-        X.append(centers[i] + generator.normal(scale=std,\n-                                               size=(n, n_features)))\n+        X.append(generator.normal(loc=centers[i], scale=std,\n+                                  size=(n, n_features)))\n         y += [i] * n\n \n     X = np.concatenate(X)\n     y = np.array(y)\n \n     if shuffle:\n-        indices = np.arange(n_samples)\n+        total_n_samples = np.sum(n_samples)\n+        indices = np.arange(total_n_samples)\n         generator.shuffle(indices)\n         X = X[indices]\n         y = y[indices]\n",
  "test_patch": "diff --git a/sklearn/datasets/tests/test_samples_generator.py b/sklearn/datasets/tests/test_samples_generator.py\n--- a/sklearn/datasets/tests/test_samples_generator.py\n+++ b/sklearn/datasets/tests/test_samples_generator.py\n@@ -4,6 +4,7 @@\n from functools import partial\n \n import numpy as np\n+import pytest\n import scipy.sparse as sp\n from sklearn.externals.six.moves import zip\n \n@@ -14,6 +15,7 @@\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_less\n from sklearn.utils.testing import assert_raises\n+from sklearn.utils.testing import assert_raise_message\n \n from sklearn.datasets import make_classification\n from sklearn.datasets import make_multilabel_classification\n@@ -238,13 +240,72 @@ def test_make_blobs():\n     X, y = make_blobs(random_state=0, n_samples=50, n_features=2,\n                       centers=cluster_centers, cluster_std=cluster_stds)\n \n-    assert_equal(X.shape, (50, 2), \"X shape mismatch\")\n-    assert_equal(y.shape, (50,), \"y shape mismatch\")\n+    assert X.shape == (50, 2), \"X shape mismatch\"\n+    assert y.shape == (50,), \"y shape mismatch\"\n     assert_equal(np.unique(y).shape, (3,), \"Unexpected number of blobs\")\n     for i, (ctr, std) in enumerate(zip(cluster_centers, cluster_stds)):\n         assert_almost_equal((X[y == i] - ctr).std(), std, 1, \"Unexpected std\")\n \n \n+def test_make_blobs_n_samples_list():\n+    n_samples = [50, 30, 20]\n+    X, y = make_blobs(n_samples=n_samples, n_features=2, random_state=0)\n+\n+    assert X.shape == (sum(n_samples), 2), \"X shape mismatch\"\n+    assert all(np.bincount(y, minlength=len(n_samples)) == n_samples), \\\n+        \"Incorrect number of samples per blob\"\n+\n+\n+def test_make_blobs_n_samples_list_with_centers():\n+    n_samples = [20, 20, 20]\n+    centers = np.array([[0.0, 0.0], [1.0, 1.0], [0.0, 1.0]])\n+    cluster_stds = np.array([0.05, 0.2, 0.4])\n+    X, y = make_blobs(n_samples=n_samples, centers=centers,\n+                      cluster_std=cluster_stds, random_state=0)\n+\n+    assert X.shape == (sum(n_samples), 2), \"X shape mismatch\"\n+    assert all(np.bincount(y, minlength=len(n_samples)) == n_samples), \\\n+        \"Incorrect number of samples per blob\"\n+    for i, (ctr, std) in enumerate(zip(centers, cluster_stds)):\n+        assert_almost_equal((X[y == i] - ctr).std(), std, 1, \"Unexpected std\")\n+\n+\n+@pytest.mark.parametrize(\n+    \"n_samples\",\n+    [[5, 3, 0],\n+     np.array([5, 3, 0]),\n+     tuple([5, 3, 0])]\n+)\n+def test_make_blobs_n_samples_centers_none(n_samples):\n+    centers = None\n+    X, y = make_blobs(n_samples=n_samples, centers=centers, random_state=0)\n+\n+    assert X.shape == (sum(n_samples), 2), \"X shape mismatch\"\n+    assert all(np.bincount(y, minlength=len(n_samples)) == n_samples), \\\n+        \"Incorrect number of samples per blob\"\n+\n+\n+def test_make_blobs_error():\n+    n_samples = [20, 20, 20]\n+    centers = np.array([[0.0, 0.0], [1.0, 1.0], [0.0, 1.0]])\n+    cluster_stds = np.array([0.05, 0.2, 0.4])\n+    wrong_centers_msg = (\"Length of `n_samples` not consistent \"\n+                         \"with number of centers. Got n_samples = {} \"\n+                         \"and centers = {}\".format(n_samples, centers[:-1]))\n+    assert_raise_message(ValueError, wrong_centers_msg,\n+                         make_blobs, n_samples, centers=centers[:-1])\n+    wrong_std_msg = (\"Length of `clusters_std` not consistent with \"\n+                     \"number of centers. Got centers = {} \"\n+                     \"and cluster_std = {}\".format(centers, cluster_stds[:-1]))\n+    assert_raise_message(ValueError, wrong_std_msg,\n+                         make_blobs, n_samples,\n+                         centers=centers, cluster_std=cluster_stds[:-1])\n+    wrong_type_msg = (\"Parameter `centers` must be array-like. \"\n+                      \"Got {!r} instead\".format(3))\n+    assert_raise_message(ValueError, wrong_type_msg,\n+                         make_blobs, n_samples, centers=3)\n+\n+\n def test_make_friedman1():\n     X, y = make_friedman1(n_samples=5, n_features=10, noise=0.0,\n                           random_state=0)\n",
  "problem_statement": "Allow n_samples to be a tuple in make_blobs\nI'd like make_blobs to accept lists or tuples for n_samples to generate imbalanced classes. Could be used here for example:\r\n\r\nhttp://scikit-learn.org/dev/auto_examples/svm/plot_separating_hyperplane_unbalanced.html#sphx-glr-auto-examples-svm-plot-separating-hyperplane-unbalanced-py\n",
  "hints_text": "@amueller You mean something like `make_blobs(n_samples=[50,30,20])` for example? I am working on this.",
  "created_at": "2018-02-02T17:19:08Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/datasets/tests/test_samples_generator.py::test_make_blobs_n_samples_list\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_blobs_n_samples_list_with_centers\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_blobs_n_samples_centers_none[n_samples0]\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_blobs_n_samples_centers_none[n_samples1]\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_blobs_n_samples_centers_none[n_samples2]\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_blobs_error\"]",
  "PASS_TO_PASS": "[\"sklearn/datasets/tests/test_samples_generator.py::test_make_classification\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_classification_informative_features\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_multilabel_classification_return_sequences\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_multilabel_classification_return_indicator\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_multilabel_classification_return_indicator_sparse\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_hastie_10_2\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_regression\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_regression_multitarget\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_blobs\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_friedman1\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_friedman2\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_friedman3\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_low_rank_matrix\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_sparse_coded_signal\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_sparse_uncorrelated\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_spd_matrix\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_swiss_roll\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_s_curve\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_biclusters\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_checkerboard\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_moons\", \"sklearn/datasets/tests/test_samples_generator.py::test_make_circles\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.953052",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}