{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17394",
  "base_commit": "e486f1b79432c474ad29a1d1a3d11e60b1caae88",
  "patch": "diff --git a/sympy/functions/special/beta_functions.py b/sympy/functions/special/beta_functions.py\n--- a/sympy/functions/special/beta_functions.py\n+++ b/sympy/functions/special/beta_functions.py\n@@ -109,3 +109,6 @@ def _eval_is_real(self):\n \n     def _eval_conjugate(self):\n         return self.func(self.args[0].conjugate(), self.args[1].conjugate())\n+\n+    def _eval_rewrite_as_gamma(self, x, y, **kwargs):\n+        return self._eval_expand_func(**kwargs)\ndiff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py\n--- a/sympy/printing/codeprinter.py\n+++ b/sympy/printing/codeprinter.py\n@@ -61,6 +61,7 @@ class CodePrinter(StrPrinter):\n     _rewriteable_functions = {\n             'erf2': 'erf',\n             'Li': 'li',\n+            'beta': 'gamma'\n     }\n \n     def __init__(self, settings=None):\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -449,6 +449,11 @@ def _print_Rational(self, expr):\n     def _print_Half(self, expr):\n         return self._print_Rational(expr)\n \n+    _print_lowergamma = CodePrinter._print_not_supported\n+    _print_uppergamma = CodePrinter._print_not_supported\n+    _print_fresnelc = CodePrinter._print_not_supported\n+    _print_fresnels = CodePrinter._print_not_supported\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n@@ -490,6 +495,9 @@ def pycode(expr, **settings):\n _not_in_mpmath = 'log1p log2'.split()\n _in_mpmath = [(k, v) for k, v in _known_functions_math.items() if k not in _not_in_mpmath]\n _known_functions_mpmath = dict(_in_mpmath, **{\n+    'beta': 'beta',\n+    'fresnelc': 'fresnelc',\n+    'fresnels': 'fresnels',\n     'sign': 'sign',\n })\n _known_constants_mpmath = {\n@@ -503,6 +511,8 @@ class MpmathPrinter(PythonCodePrinter):\n     \"\"\"\n     printmethod = \"_mpmathcode\"\n \n+    language = \"Python with mpmath\"\n+\n     _kf = dict(chain(\n         _known_functions.items(),\n         [(k, 'mpmath.' + v) for k, v in _known_functions_mpmath.items()]\n@@ -581,6 +591,7 @@ class NumPyPrinter(PythonCodePrinter):\n     logical operators, etc.\n     \"\"\"\n     printmethod = \"_numpycode\"\n+    language = \"Python with NumPy\"\n \n     _kf = dict(chain(\n         PythonCodePrinter._kf.items(),\n@@ -783,6 +794,11 @@ def _print_CodegenArrayPermuteDims(self, expr):\n     def _print_CodegenArrayElementwiseAdd(self, expr):\n         return self._expand_fold_binary_op('numpy.add', expr.args)\n \n+    _print_lowergamma = CodePrinter._print_not_supported\n+    _print_uppergamma = CodePrinter._print_not_supported\n+    _print_fresnelc = CodePrinter._print_not_supported\n+    _print_fresnels = CodePrinter._print_not_supported\n+\n \n for k in NumPyPrinter._kf:\n     setattr(NumPyPrinter, '_print_%s' % k, _print_known_func)\n@@ -811,6 +827,7 @@ def _print_CodegenArrayElementwiseAdd(self, expr):\n     'hermite': 'eval_hermite',\n     'laguerre': 'eval_laguerre',\n     'assoc_laguerre': 'eval_genlaguerre',\n+    'beta': 'beta'\n }\n \n _known_constants_scipy_constants = {\n@@ -822,6 +839,8 @@ def _print_CodegenArrayElementwiseAdd(self, expr):\n \n class SciPyPrinter(NumPyPrinter):\n \n+    language = \"Python with SciPy\"\n+\n     _kf = dict(chain(\n         NumPyPrinter._kf.items(),\n         [(k, 'scipy.special.' + v) for k, v in _known_functions_scipy_special.items()]\n@@ -850,6 +869,31 @@ def _print_assoc_legendre(self, expr):\n             self._print(expr.args[1]),\n             self._print(expr.args[2]))\n \n+    def _print_lowergamma(self, expr):\n+        return \"{0}({2})*{1}({2}, {3})\".format(\n+            self._module_format('scipy.special.gamma'),\n+            self._module_format('scipy.special.gammainc'),\n+            self._print(expr.args[0]),\n+            self._print(expr.args[1]))\n+\n+    def _print_uppergamma(self, expr):\n+        return \"{0}({2})*{1}({2}, {3})\".format(\n+            self._module_format('scipy.special.gamma'),\n+            self._module_format('scipy.special.gammaincc'),\n+            self._print(expr.args[0]),\n+            self._print(expr.args[1]))\n+\n+    def _print_fresnels(self, expr):\n+        return \"{0}({1})[0]\".format(\n+                self._module_format(\"scipy.special.fresnel\"),\n+                self._print(expr.args[0]))\n+\n+    def _print_fresnelc(self, expr):\n+        return \"{0}({1})[1]\".format(\n+                self._module_format(\"scipy.special.fresnel\"),\n+                self._print(expr.args[0]))\n+\n+\n for k in SciPyPrinter._kf:\n     setattr(SciPyPrinter, '_print_%s' % k, _print_known_func)\n \n@@ -859,6 +903,8 @@ def _print_assoc_legendre(self, expr):\n \n class SymPyPrinter(PythonCodePrinter):\n \n+    language = \"Python with SymPy\"\n+\n     _kf = {k: 'sympy.' + v for k, v in chain(\n         _known_functions.items(),\n         _known_functions_math.items()\ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -484,7 +484,7 @@ def BetaNoncentral(name, alpha, beta, lamda):\n \n     Compute cdf with specific 'x', 'alpha', 'beta' and 'lamda' values as follows :\n     >>> cdf(BetaNoncentral(\"x\", 1, 1, 1), evaluate=False)(2).doit()\n-    exp(-1/2)*Integral(Sum(2**(-_k)*_x**_k/(beta(_k + 1, 1)*factorial(_k)), (_k, 0, oo)), (_x, 0, 2))\n+    2*exp(1/2)\n \n     The argument evaluate=False prevents an attempt at evaluation\n     of the sum for general x, before the argument 2 is passed.\n",
  "test_patch": "diff --git a/sympy/functions/special/tests/test_beta_functions.py b/sympy/functions/special/tests/test_beta_functions.py\n--- a/sympy/functions/special/tests/test_beta_functions.py\n+++ b/sympy/functions/special/tests/test_beta_functions.py\n@@ -18,3 +18,5 @@ def test_beta():\n     assert conjugate(beta(x, y)) == beta(conjugate(x), conjugate(y))\n \n     raises(ArgumentIndexError, lambda: beta(x, y).fdiff(3))\n+\n+    assert beta(x, y).rewrite(gamma) == gamma(x)*gamma(y)/gamma(x + y)\ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -5,7 +5,6 @@\n from sympy.codegen.ast import none\n from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational\n-from sympy.core.singleton import S\n from sympy.core.numbers import pi\n from sympy.functions import acos, Piecewise, sign, sqrt\n from sympy.logic import And, Or\n@@ -161,3 +160,64 @@ def test_NumPyPrinter_print_seq():\n     n = NumPyPrinter()\n \n     assert n._print_seq(range(2)) == '(0, 1,)'\n+\n+\n+def test_issue_16535_16536():\n+    from sympy import lowergamma, uppergamma\n+\n+    a = symbols('a')\n+    expr1 = lowergamma(a, x)\n+    expr2 = uppergamma(a, x)\n+\n+    prntr = SciPyPrinter()\n+    assert prntr.doprint(expr1) == 'scipy.special.gamma(a)*scipy.special.gammainc(a, x)'\n+    assert prntr.doprint(expr2) == 'scipy.special.gamma(a)*scipy.special.gammaincc(a, x)'\n+\n+    prntr = NumPyPrinter()\n+    assert prntr.doprint(expr1) == '  # Not supported in Python with NumPy:\\n  # lowergamma\\nlowergamma(a, x)'\n+    assert prntr.doprint(expr2) == '  # Not supported in Python with NumPy:\\n  # uppergamma\\nuppergamma(a, x)'\n+\n+    prntr = PythonCodePrinter()\n+    assert prntr.doprint(expr1) == '  # Not supported in Python:\\n  # lowergamma\\nlowergamma(a, x)'\n+    assert prntr.doprint(expr2) == '  # Not supported in Python:\\n  # uppergamma\\nuppergamma(a, x)'\n+\n+\n+def test_fresnel_integrals():\n+    from sympy import fresnelc, fresnels\n+\n+    expr1 = fresnelc(x)\n+    expr2 = fresnels(x)\n+\n+    prntr = SciPyPrinter()\n+    assert prntr.doprint(expr1) == 'scipy.special.fresnel(x)[1]'\n+    assert prntr.doprint(expr2) == 'scipy.special.fresnel(x)[0]'\n+\n+    prntr = NumPyPrinter()\n+    assert prntr.doprint(expr1) == '  # Not supported in Python with NumPy:\\n  # fresnelc\\nfresnelc(x)'\n+    assert prntr.doprint(expr2) == '  # Not supported in Python with NumPy:\\n  # fresnels\\nfresnels(x)'\n+\n+    prntr = PythonCodePrinter()\n+    assert prntr.doprint(expr1) == '  # Not supported in Python:\\n  # fresnelc\\nfresnelc(x)'\n+    assert prntr.doprint(expr2) == '  # Not supported in Python:\\n  # fresnels\\nfresnels(x)'\n+\n+    prntr = MpmathPrinter()\n+    assert prntr.doprint(expr1) == 'mpmath.fresnelc(x)'\n+    assert prntr.doprint(expr2) == 'mpmath.fresnels(x)'\n+\n+\n+def test_beta():\n+    from sympy import beta\n+\n+    expr = beta(x, y)\n+\n+    prntr = SciPyPrinter()\n+    assert prntr.doprint(expr) == 'scipy.special.beta(x, y)'\n+\n+    prntr = NumPyPrinter()\n+    assert prntr.doprint(expr) == 'math.gamma(x)*math.gamma(y)/math.gamma(x + y)'\n+\n+    prntr = PythonCodePrinter()\n+    assert prntr.doprint(expr) == 'math.gamma(x)*math.gamma(y)/math.gamma(x + y)'\n+\n+    prntr = MpmathPrinter()\n+    assert prntr.doprint(expr) ==  'mpmath.beta(x, y)'\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -10,16 +10,16 @@\n     Float, Matrix, Lambda, Piecewise, exp, E, Integral, oo, I, Abs, Function,\n     true, false, And, Or, Not, ITE, Min, Max, floor, diff, IndexedBase, Sum,\n     DotProduct, Eq, Dummy, sinc, erf, erfc, factorial, gamma, loggamma,\n-    digamma, RisingFactorial, besselj, bessely, besseli, besselk, S,\n+    digamma, RisingFactorial, besselj, bessely, besseli, besselk, S, beta,\n     MatrixSymbol, chebyshevt, chebyshevu, legendre, hermite, laguerre,\n-    gegenbauer, assoc_legendre, assoc_laguerre, jacobi)\n+    gegenbauer, assoc_legendre, assoc_laguerre, jacobi, fresnelc, fresnels)\n from sympy.printing.lambdarepr import LambdaPrinter\n from sympy.printing.pycode import NumPyPrinter\n from sympy.utilities.lambdify import implemented_function, lambdastr\n from sympy.utilities.pytest import skip\n from sympy.utilities.decorator import conserve_mpmath_dps\n from sympy.external import import_module\n-from sympy.functions.special.gamma_functions import uppergamma,lowergamma\n+from sympy.functions.special.gamma_functions import uppergamma, lowergamma\n \n import sympy\n \n@@ -1186,3 +1186,51 @@ def test_issue_16930():\n def test_single_e():\n     f = lambdify(x, E)\n     assert f(23) == exp(1.0)\n+\n+\n+def test_issue_16536():\n+    if not scipy:\n+        skip(\"scipy not installed\")\n+\n+    a = symbols('a')\n+    f1 = lowergamma(a, x)\n+    F = lambdify((a, x), f1, modules='scipy')\n+    assert abs(lowergamma(1, 3) - F(1, 3)) <= 1e-10\n+\n+    f2 = uppergamma(a, x)\n+    F = lambdify((a, x), f2, modules='scipy')\n+    assert abs(uppergamma(1, 3) - F(1, 3)) <= 1e-10\n+\n+\n+def test_fresnel_integrals_scipy():\n+    if not scipy:\n+        skip(\"scipy not installed\")\n+\n+    f1 = fresnelc(x)\n+    f2 = fresnels(x)\n+    F1 = lambdify(x, f1, modules='scipy')\n+    F2 = lambdify(x, f2, modules='scipy')\n+\n+    assert abs(fresnelc(1.3) - F1(1.3)) <= 1e-10\n+    assert abs(fresnels(1.3) - F2(1.3)) <= 1e-10\n+\n+\n+def test_beta_scipy():\n+    if not scipy:\n+        skip(\"scipy not installed\")\n+\n+    f = beta(x, y)\n+    F = lambdify((x, y), f, modules='scipy')\n+\n+    assert abs(beta(1.3, 2.3) - F(1.3, 2.3)) <= 1e-10\n+\n+\n+@XFAIL\n+def test_beta_math():\n+    # Not clear why it is not working since pycode(beta(x, y))\n+    # gives 'math.gamma(x)*math.gamma(y)/math.gamma(x + y)'\n+\n+    f = beta(x, y)\n+    F = lambdify((x, y), f, modules='math')\n+\n+    assert abs(beta(1.3, 2.3) - F(1.3, 2.3)) <= 1e-10\n",
  "problem_statement": "lambdify[scipy]: upper/lowergamma should print as gammainc (and scale)\nLet\r\n```\r\nf = lowergamma(a, x)\r\n```\r\nThen here are some attempts at lambdifying:\r\n```\r\nF = lambdify((a, x), f, modules='scipy')\r\nF?\r\nIn [78]: F?\r\nSignature: F(a, x)\r\nDocstring:\r\nCreated with lambdify. Signature:\r\n\r\nfunc(a, x)\r\n\r\nExpression:\r\n\r\nlowergamma(a, x)\r\n\r\nSource code:\r\n\r\ndef _lambdifygenerated(a, x):\r\n    return (lowergamma(a, x))\r\n```\r\n\r\n  * This is wrong.  It should be `gammainc` and `gammaincc` for the upper incomplete gamma fcn.\r\n  * SciPy implements the *regularized* incomplete gamma function:\r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.special.gammainc.html\r\nSo some care will need to be taken (see #16533).\r\n  * `modules='numpy'` should fail with the unsupported function thing (see #16535 for `modules='math'`)\r\n  * See also #15134.\n",
  "hints_text": "",
  "created_at": "2019-08-12T22:11:58Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_issue_16535_16536\", \"test_fresnel_integrals\"]",
  "PASS_TO_PASS": "[\"test_PythonCodePrinter\", \"test_PythonCodePrinter_standard\", \"test_MpmathPrinter\", \"test_NumPyPrinter\", \"test_SciPyPrinter\", \"test_pycode_reserved_words\", \"test_sqrt\", \"test_printmethod\", \"test_codegen_ast_nodes\", \"test_issue_14283\", \"test_NumPyPrinter_print_seq\", \"test_no_args\", \"test_single_arg\", \"test_list_args\", \"test_nested_args\", \"test_str_args\", \"test_own_namespace_1\", \"test_own_namespace_2\", \"test_own_module\", \"test_bad_args\", \"test_atoms\", \"test_sympy_lambda\", \"test_math_lambda\", \"test_mpmath_lambda\", \"test_number_precision\", \"test_mpmath_precision\", \"test_math_transl\", \"test_mpmath_transl\", \"test_exponentiation\", \"test_trig\", \"test_vector_simple\", \"test_vector_discontinuous\", \"test_trig_symbolic\", \"test_trig_float\", \"test_docs\", \"test_math\", \"test_sin\", \"test_matrix\", \"test_issue9474\", \"test_integral\", \"test_sym_single_arg\", \"test_sym_list_args\", \"test_sym_integral\", \"test_namespace_order\", \"test_namespace_type\", \"test_imps\", \"test_imps_errors\", \"test_imps_wrong_args\", \"test_lambdify_imps\", \"test_dummification\", \"test_curly_matrix_symbol\", \"test_python_keywords\", \"test_lambdify_docstring\", \"test_special_printers\", \"test_true_false\", \"test_issue_2790\", \"test_issue_12092\", \"test_issue_14911\", \"test_ITE\", \"test_Min_Max\", \"test_issue_12173\", \"test_sinc_mpmath\", \"test_lambdify_dummy_arg\", \"test_lambdify_mixed_symbol_dummy_args\", \"test_lambdify_inspect\", \"test_issue_14941\", \"test_lambdify_Derivative_arg_issue_16468\", \"test_imag_real\", \"test_single_e\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.116529",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}