{
  "repo": "django/django",
  "instance_id": "django__django-11501",
  "base_commit": "4b32d039dbb59b3c3e76587df5c58150e752d9ac",
  "patch": "diff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py\n--- a/django/contrib/auth/management/commands/createsuperuser.py\n+++ b/django/contrib/auth/management/commands/createsuperuser.py\n@@ -2,6 +2,7 @@\n Management utility to create superusers.\n \"\"\"\n import getpass\n+import os\n import sys\n \n from django.contrib.auth import get_user_model\n@@ -138,6 +139,13 @@ def handle(self, *args, **options):\n                     user_data[PASSWORD_FIELD] = password\n             else:\n                 # Non-interactive mode.\n+                # Use password from environment variable, if provided.\n+                if PASSWORD_FIELD in user_data and 'DJANGO_SUPERUSER_PASSWORD' in os.environ:\n+                    user_data[PASSWORD_FIELD] = os.environ['DJANGO_SUPERUSER_PASSWORD']\n+                # Use username from environment variable, if not provided in\n+                # options.\n+                if username is None:\n+                    username = os.environ.get('DJANGO_SUPERUSER_' + self.UserModel.USERNAME_FIELD.upper())\n                 if username is None:\n                     raise CommandError('You must use --%s with --noinput.' % self.UserModel.USERNAME_FIELD)\n                 else:\n@@ -147,11 +155,12 @@ def handle(self, *args, **options):\n \n                 user_data[self.UserModel.USERNAME_FIELD] = username\n                 for field_name in self.UserModel.REQUIRED_FIELDS:\n-                    if options[field_name]:\n-                        field = self.UserModel._meta.get_field(field_name)\n-                        user_data[field_name] = field.clean(options[field_name], None)\n-                    else:\n+                    env_var = 'DJANGO_SUPERUSER_' + field_name.upper()\n+                    value = options[field_name] or os.environ.get(env_var)\n+                    if not value:\n                         raise CommandError('You must use --%s with --noinput.' % field_name)\n+                    field = self.UserModel._meta.get_field(field_name)\n+                    user_data[field_name] = field.clean(value, None)\n \n             self.UserModel._default_manager.db_manager(database).create_superuser(**user_data)\n             if options['verbosity'] >= 1:\n",
  "test_patch": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1,5 +1,6 @@\n import builtins\n import getpass\n+import os\n import sys\n from datetime import date\n from io import StringIO\n@@ -905,6 +906,61 @@ def test(self):\n \n         test(self)\n \n+    @mock.patch.dict(os.environ, {\n+        'DJANGO_SUPERUSER_PASSWORD': 'test_password',\n+        'DJANGO_SUPERUSER_USERNAME': 'test_superuser',\n+        'DJANGO_SUPERUSER_EMAIL': 'joe@somewhere.org',\n+        'DJANGO_SUPERUSER_FIRST_NAME': 'ignored_first_name',\n+    })\n+    def test_environment_variable_non_interactive(self):\n+        call_command('createsuperuser', interactive=False, stdout=StringIO())\n+        user = User.objects.get(username='test_superuser')\n+        self.assertEqual(user.email, 'joe@somewhere.org')\n+        self.assertTrue(user.check_password('test_password'))\n+        # Environment variables are ignored for non-required fields.\n+        self.assertEqual(user.first_name, '')\n+\n+    @mock.patch.dict(os.environ, {\n+        'DJANGO_SUPERUSER_USERNAME': 'test_superuser',\n+        'DJANGO_SUPERUSER_EMAIL': 'joe@somewhere.org',\n+    })\n+    def test_ignore_environment_variable_non_interactive(self):\n+        # Environment variables are ignored in non-interactive mode, if\n+        # provided by a command line arguments.\n+        call_command(\n+            'createsuperuser',\n+            interactive=False,\n+            username='cmd_superuser',\n+            email='cmd@somewhere.org',\n+            stdout=StringIO(),\n+        )\n+        user = User.objects.get(username='cmd_superuser')\n+        self.assertEqual(user.email, 'cmd@somewhere.org')\n+        self.assertFalse(user.has_usable_password())\n+\n+    @mock.patch.dict(os.environ, {\n+        'DJANGO_SUPERUSER_PASSWORD': 'test_password',\n+        'DJANGO_SUPERUSER_USERNAME': 'test_superuser',\n+        'DJANGO_SUPERUSER_EMAIL': 'joe@somewhere.org',\n+    })\n+    def test_ignore_environment_variable_interactive(self):\n+        # Environment variables are ignored in interactive mode.\n+        @mock_inputs({'password': 'cmd_password'})\n+        def test(self):\n+            call_command(\n+                'createsuperuser',\n+                interactive=True,\n+                username='cmd_superuser',\n+                email='cmd@somewhere.org',\n+                stdin=MockTTY(),\n+                stdout=StringIO(),\n+            )\n+            user = User.objects.get(username='cmd_superuser')\n+            self.assertEqual(user.email, 'cmd@somewhere.org')\n+            self.assertTrue(user.check_password('cmd_password'))\n+\n+        test(self)\n+\n \n class MultiDBCreatesuperuserTestCase(TestCase):\n     databases = {'default', 'other'}\n",
  "problem_statement": "Make createsuperuser inspect environment variables for username and password\nDescription\n\t\nThe createsuperuser management command is not quite suitable for scripting, even with the --no-input flag, as it doesn't set a password. The management command should inspect some environment variables (e.g. DJANGO_SUPERUSER_{USERNAME_FIELD.upper()} and DJANGO_SUPERUSER_PASSWORD) to pick up the username, password and possibly all other required fields.\n",
  "hints_text": "I'm not certain if using createsuperuser in non-interactive mode with environment variables is simpler than writing a ​standalone script to handle this use case. Did you give any thought to this?\nReplying to Tim Graham: I'm not certain if using createsuperuser in non-interactive mode with environment variables is simpler than writing a ​standalone script to handle this use case. Did you give any thought to this? Yes, I gave it some thought. The logic in createsuperuser for ensuring all required fields are present, selecting the right database, etc is already there. With more and more automated deployments for Django projects I think having this feature built-in is essential. I think I'd have createsuperuser fallback to the environment variables if they are present unless fields are overridden by command line arguments: user_data = {} for field in required_fields: if field in options: user_data[field] = options[field] elif 'DJANGO_SUPERUSER_' + field.upper() in os.environ: user_data[field] = os.environ['DJANGO_SUPERUSER_' + field.upper()] elif options['interactive']: user_data[field] = ask_for_field_value(field) else: raise CommandError('Missing value for %s' % field) That's a rough draft!\nI guess it could help to define the scope of the use case. Would this be meant for creating one initial superuser. Should it ease creating many superusers? That might help clarify the need to have all fields pulled from environment variables rather than just the password. This seems to add some complication and I'd like to keep things as simple as possible. I think the minimal script for anything more complicated is straightforward. If you're running in non-interactive mode, error handling doesn't seem like a priority. import django django.setup() from django.contrib.auth import get_user_model UserModel = get_user_model() UserModel._default_manager.db_manager('default').create_superuser()\nIt's for the initial superuser when you can't run the management command in interactive mode. The only field as for AbstractBaseUser is password that needs to be passed via environment variables. However, if you have another required field that contains sensitive parameters (e.g. API key) and that is a required field you want to have that handled through environment variables as well. Hence my though, let's use the command arguments in the first place (e.g. for username), fallback to environment variables (that allows for sensitive values) and fail if that's not defined. I'm not sure if we _need_ support for env vars in the interactive mode, i believe it wouldn't hurt, though. Not sure how complex that change might get if that's added.\nAnother potential script friendly solution would be to read the password from a file. Other non-Django commands implement such a feature. For example, ​ldapsearch -y passwdfile and the ​PostgreSQL password file.\nFor our use case, SUPERUSER_PASSWORD works to drop the dependency to expect in automation code. ​PR\nNot sure if that would completely address the ticket, but the patch is incomplete without tests and documentation.\nFTR there is an external solution for this that you can install with PyPi package djcli. As such this is a wontfix for me.\n@Tim Graham, do we still need this? do you prefer to read the password from the file or environment variable?",
  "created_at": "2019-06-21T21:39:42Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\"]",
  "PASS_TO_PASS": "[\"test_actual_implementation (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_existing (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_i18n (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_simple (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_input_not_found (auth_tests.test_management.MockInputTests)\", \"test_that_changepassword_command_with_database_option_uses_given_db (auth_tests.test_management.MultiDBChangepasswordManagementCommandTestCase)\", \"test_createsuperuser_command_with_database_option (auth_tests.test_management.MultiDBCreatesuperuserTestCase)\", \"test_create_permissions_checks_contenttypes_created (auth_tests.test_management.CreatePermissionsTests)\", \"test_default_permissions (auth_tests.test_management.CreatePermissionsTests)\", \"test_permission_with_proxy_content_type_created (auth_tests.test_management.CreatePermissionsTests)\", \"test_unavailable_models (auth_tests.test_management.CreatePermissionsTests)\", \"test_get_pass (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_get_pass_no_input (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_nonexistent_username (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_password_validation (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"The system username is used if --username isn't provided.\", \"Executing the changepassword management command should change joe's password\", \"test_that_changepassword_command_works_with_nonascii_output (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_that_max_tries_exits_1 (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"Check the operation of the createsuperuser management command\", \"Creation fails if --username is blank.\", \"test_blank_username_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"createsuperuser uses a default username when one isn't provided.\", \"test_email_in_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username already exists.\", \"call_command() gets username='janet' and interactive=True.\", \"test_fields_with_fk (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_fk_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username fails validation.\", \"test_keyboard_interrupt (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_no_email_argument (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_non_ascii_verbose_name (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_passing_stdin (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_password_validation (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_password_validation_bypass (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_skip_if_not_in_TTY (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"A superuser can be created when a custom user model is in use\", \"A Custom superuser won't be created when a required field isn't provided\", \"test_swappable_user_username_non_unique (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_required_fields (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validation_blank_password_entered (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validation_mismatched_passwords (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_verbosity_zero (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.574303",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}