{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16334",
  "base_commit": "356a73cd676e0c3f1a1c3057a6895db0d82a1be7",
  "patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -437,6 +437,9 @@ def _eval_is_positive(self):\n                 return True\n             if self.exp.is_odd:\n                 return False\n+        elif self.base.is_zero:\n+            if self.exp.is_real:\n+                return self.exp.is_zero\n         elif self.base.is_nonpositive:\n             if self.exp.is_odd:\n                 return False\n@@ -459,6 +462,9 @@ def _eval_is_negative(self):\n         elif self.base.is_positive:\n             if self.exp.is_real:\n                 return False\n+        elif self.base.is_zero:\n+            if self.exp.is_real:\n+                return False\n         elif self.base.is_nonnegative:\n             if self.exp.is_nonnegative:\n                 return False\n",
  "test_patch": "diff --git a/sympy/core/tests/test_assumptions.py b/sympy/core/tests/test_assumptions.py\n--- a/sympy/core/tests/test_assumptions.py\n+++ b/sympy/core/tests/test_assumptions.py\n@@ -786,6 +786,32 @@ def test_Mul_is_prime_composite():\n     assert ( (x+1)*(y+1) ).is_prime is None\n     assert ( (x+1)*(y+1) ).is_composite is None\n \n+\n+def test_Pow_is_pos_neg():\n+    z = Symbol('z', real=True)\n+    w = Symbol('w', nonpositive=True)\n+\n+    assert (S(-1)**S(2)).is_positive is True\n+    assert (S(1)**z).is_positive is True\n+    assert (S(-1)**S(3)).is_positive is False\n+    assert (S(0)**S(0)).is_positive is True  # 0**0 is 1\n+    assert (w**S(3)).is_positive is False\n+    assert (w**S(2)).is_positive is None\n+    assert (I**2).is_positive is False\n+    assert (I**4).is_positive is True\n+\n+    # tests emerging from #16332 issue\n+    p = Symbol('p', zero=True)\n+    q = Symbol('q', zero=False, real=True)\n+    j = Symbol('j', zero=False, even=True)\n+    x = Symbol('x', zero=True)\n+    y = Symbol('y', zero=True)\n+    assert (p**q).is_positive is False\n+    assert (p**q).is_negative is False\n+    assert (p**j).is_positive is False\n+    assert (x**y).is_positive is True   # 0**0\n+    assert (x**y).is_negative is False\n+\n def test_Pow_is_prime_composite():\n     from sympy import Pow\n     x = Symbol('x', positive=True, integer=True)\n",
  "problem_statement": "S(0)**real(!=0) should be (0 or zoo) and hence non-positive. \nConsider the following code from master:\r\n```py\r\n>>> from sympy import symbols, ask, Q\r\n>>> from sympy.abc import x,y,z\r\n>>> p = symbols('p', real=True, zero=False)\r\n>>> q = symbols('q', zero=True)\r\n>>> (q**p).is_positive\r\n>>>\r\n```\r\nSince `0**a`(where a is real and non-zero) should always be (0 or `zoo`). Therefore, the result should have been `False`.\r\n\n",
  "hints_text": "",
  "created_at": "2019-03-19T10:40:10Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_Pow_is_pos_neg\"]",
  "PASS_TO_PASS": "[\"test_symbol_unset\", \"test_zero\", \"test_one\", \"test_negativeone\", \"test_infinity\", \"test_neg_infinity\", \"test_zoo\", \"test_nan\", \"test_pos_rational\", \"test_neg_rational\", \"test_pi\", \"test_E\", \"test_I\", \"test_symbol_real\", \"test_symbol_imaginary\", \"test_symbol_zero\", \"test_symbol_positive\", \"test_neg_symbol_positive\", \"test_symbol_nonpositive\", \"test_neg_symbol_nonpositive\", \"test_symbol_falsepositive\", \"test_symbol_falsepositive_mul\", \"test_neg_symbol_falsepositive\", \"test_neg_symbol_falsenegative\", \"test_symbol_falsepositive_real\", \"test_neg_symbol_falsepositive_real\", \"test_symbol_falsenonnegative\", \"test_symbol_falsenonnegative_real\", \"test_neg_symbol_falsenonnegative_real\", \"test_prime\", \"test_composite\", \"test_prime_symbol\", \"test_symbol_noncommutative\", \"test_other_symbol\", \"test_issue_3825\", \"test_issue_4822\", \"test_hash_vs_typeinfo\", \"test_hash_vs_typeinfo_2\", \"test_hash_vs_eq\", \"test_Add_is_pos_neg\", \"test_Add_is_imaginary\", \"test_Add_is_algebraic\", \"test_Mul_is_algebraic\", \"test_Pow_is_algebraic\", \"test_Mul_is_prime_composite\", \"test_Pow_is_prime_composite\", \"test_Mul_is_infinite\", \"test_special_is_rational\", \"test_sanitize_assumptions\", \"test_special_assumptions\", \"test_inconsistent\", \"test_issue_6631\", \"test_issue_2730\", \"test_issue_4149\", \"test_issue_2920\", \"test_issue_7899\", \"test_issue_8075\", \"test_issue_8642\", \"test_issues_8632_8633_8638_8675_8992\", \"test_issue_9115_9150\", \"test_issue_9165\", \"test_issue_10024\", \"test_issue_10302\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.106905",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}