{
  "repo": "django/django",
  "instance_id": "django__django-11088",
  "base_commit": "dc53f2135b341ef0b6203ecb0a1894cdbd174a9c",
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2252,6 +2252,21 @@ def __init__(self, *args, **kwargs):\n         if self.max_length is not None:\n             self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n+    def check(self, **kwargs):\n+        return [*super().check(**kwargs), *self._check_str_default_value()]\n+\n+    def _check_str_default_value(self):\n+        if self.has_default() and isinstance(self.default, str):\n+            return [\n+                checks.Error(\n+                    \"BinaryField's default cannot be a string. Use bytes \"\n+                    \"content instead.\",\n+                    obj=self,\n+                    id='fields.E170',\n+                )\n+            ]\n+        return []\n+\n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n         if self.editable:\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -39,6 +39,33 @@ class Model(models.Model):\n         ])\n \n \n+@isolate_apps('invalid_models_tests')\n+class BinaryFieldTests(SimpleTestCase):\n+\n+    def test_valid_default_value(self):\n+        class Model(models.Model):\n+            field1 = models.BinaryField(default=b'test')\n+            field2 = models.BinaryField(default=None)\n+\n+        for field_name in ('field1', 'field2'):\n+            field = Model._meta.get_field(field_name)\n+            self.assertEqual(field.check(), [])\n+\n+    def test_str_default_value(self):\n+        class Model(models.Model):\n+            field = models.BinaryField(default='test')\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"BinaryField's default cannot be a string. Use bytes content \"\n+                \"instead.\",\n+                obj=field,\n+                id='fields.E170',\n+            ),\n+        ])\n+\n+\n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n \n",
  "problem_statement": "default='' (non-bytestring) on BinaryField crashes some migration operations\nDescription\n\t \n\t\t(last modified by James)\n\t \nDescription\nInitial migration has a default value '' for BinaryField. \nLater, change default value to b'' and migrate.\nTrying to undo this migration fails. It seems like '' is allowed during migration, but not in reverse migration.\nRelated issue\n#22851 Default value for BinaryField\nReproduce\nPython 3.6.0, Django 1.10.6, Postgres 9.5.4\nstartproject djangoproject\nstartapp firstapp\nfirstapp/models.py:\nclass TableOne(models.Model):\n\tfield1 = models.BinaryField(default = '')\nmakemigrations firstapp\nmigrate firstapp 0001\nModify firstapp/models.py\nclass TableOne(models.Model):\n\tfield1 = models.BinaryField(default = b'')\nmigrate firstapp 0002\nmigrate firstapp 0001\nError: TypeError: can't escape str to binary\nTraceback (most recent call last):\n File \"manage.py\", line 22, in <module>\n\texecute_from_command_line(sys.argv)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 367, in execute_from_command_line\n\tutility.execute()\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 359, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\core\\management\\base.py\", line 294, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\core\\management\\base.py\", line 345, in execute\n\toutput = self.handle(*args, **options)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\core\\management\\commands\\migrate.py\", line 204, in handle\n\tfake_initial=fake_initial,\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 119, in migrate\n\tstate = self._migrate_all_backwards(plan, full_plan, fake=fake)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 194, in _migrate_all_backwards\n\tself.unapply_migration(states[migration], migration, fake=fake)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 264, in unapply_migration\n\tstate = migration.unapply(state, schema_editor)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\migrations\\migration.py\", line 178, in unapply\n\toperation.database_backwards(self.app_label, schema_editor, from_state, to_state)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\migrations\\operations\\fields.py\", line 210, in database_backwards\n\tself.database_forwards(app_label, schema_editor, from_state, to_state)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\migrations\\operations\\fields.py\", line 205, in database_forwards\n\tschema_editor.alter_field(from_model, from_field, to_field)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\backends\\base\\schema.py\", line 506, in alter_field\n\told_db_params, new_db_params, strict)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\backends\\postgresql\\schema.py\", line 118, in _alter_field\n\tnew_db_params, strict,\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\backends\\base\\schema.py\", line 660, in _alter_field\n\tparams,\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\backends\\base\\schema.py\", line 112, in execute\n\tcursor.execute(sql, params)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 80, in execute\n\treturn super(CursorDebugWrapper, self).execute(sql, params)\n File \"C:\\Py\\py3_64\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 65, in execute\n\treturn self.cursor.execute(sql, params)\nTypeError: can't escape str to binary\nNotes\nsite-packages\\django\\db\\backends\\base\\shema.py def effective_default(self, field): \ndetermines default as an empty <class 'str'>, when (default = '')\nPossible Fix?\nsite-packages\\django\\db\\backends\\base\\shema.py ~line 197\ndef effective_default(self, field):\n\t\tif field.has_default():\n\t\t\tdefault = field.get_default()\n\t\t\tif field.get_internal_type() == \"BinaryField\" and not default:\n\t\t\t\tdefault = six.binary_type()\n\t\telif not field.null and field.blank and field.empty_strings_allowed:\n\t\t\tif field.get_internal_type() == \"BinaryField\":\n\t\t\t\tdefault = six.binary_type()\n\t\t\telse:\n\t\t\t\tdefault = six.text_type()\n\t\telif getattr(field, 'auto_now', False)\n",
  "hints_text": "While doing a quick test, I noticed that a non-bytestring also crashes with AddField (forward). I'm not sure about the proper resolution (perhaps a system check error for an invalid default?) but the inconsistency is certainly unexpected.\nIt didn't crash when I using sqlite3, maybe related to Postgres, right?\nI would also suggest a system check to prevent default strings in the first place. Something like: diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py index b2e9b18351..af4671c0f6 100644 --- a/django/db/models/fields/__init__.py +++ b/django/db/models/fields/__init__.py @@ -2292,6 +2292,22 @@ class BinaryField(Field): if self.max_length is not None: self.validators.append(validators.MaxLengthValidator(self.max_length)) + def check(self, **kwargs): + errors = super().check(**kwargs) + errors.extend(self._check_default_is_not_str(**kwargs)) + return errors + + def _check_default_is_not_str(self, **kwargs): + if self.has_default() and isinstance(self.default, str): + return [ + checks.Error( + \"BinaryField 'default' cannot be a string, use bytes content instead.\", + obj=self, + id='fields.E170', + ) + ] + return [] + def deconstruct(self): name, path, args, kwargs = super().deconstruct() del kwargs['editable']",
  "created_at": "2019-03-17T20:52:14Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_str_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\"]",
  "PASS_TO_PASS": "[\"test_valid_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\", \"test_non_nullable_blank (invalid_models_tests.test_ordinary_fields.GenericIPAddressFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_upload_to_callable_not_checked (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_upload_to_starts_with_slash (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_default_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.IntegerFieldTests)\", \"test_forbidden_files_and_folders (invalid_models_tests.test_ordinary_fields.FilePathFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\", \"test_bad_values_of_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_decimal_places_greater_than_max_digits (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_negative_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_required_attributes (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_auto_now_and_auto_now_add_raise_error (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_pillow_installed (invalid_models_tests.test_ordinary_fields.ImageFieldTests)\", \"test_bad_db_index_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_validators (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_containing_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_containing_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_bad_structure (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_iterable_of_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_lazy_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_missing_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_negative_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_non_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"Two letters isn't a valid choice pair.\", \"test_str_max_length_type (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_str_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.CharFieldTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.559504",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}