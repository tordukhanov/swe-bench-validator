{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25281",
  "base_commit": "5aee26d0a52c237c5b4fafcb843e392907ab45b3",
  "patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -23,6 +23,7 @@\n \n import itertools\n import logging\n+import numbers\n import time\n \n import numpy as np\n@@ -517,6 +518,9 @@ def val_or_rc(val, rc_name):\n             if not self.isaxes and loc in [0, 'best']:\n                 loc = 'upper right'\n \n+        type_err_message = (\"loc must be string, coordinate tuple, or\"\n+                            f\" an integer 0-10, not {loc!r}\")\n+\n         # handle outside legends:\n         self._outside_loc = None\n         if isinstance(loc, str):\n@@ -535,6 +539,19 @@ def val_or_rc(val, rc_name):\n                     loc = locs[0] + ' ' + locs[1]\n             # check that loc is in acceptable strings\n             loc = _api.check_getitem(self.codes, loc=loc)\n+        elif np.iterable(loc):\n+            # coerce iterable into tuple\n+            loc = tuple(loc)\n+            # validate the tuple represents Real coordinates\n+            if len(loc) != 2 or not all(isinstance(e, numbers.Real) for e in loc):\n+                raise ValueError(type_err_message)\n+        elif isinstance(loc, int):\n+            # validate the integer represents a string numeric value\n+            if loc < 0 or loc > 10:\n+                raise ValueError(type_err_message)\n+        else:\n+            # all other cases are invalid values of loc\n+            raise ValueError(type_err_message)\n \n         if self.isaxes and self._outside_loc:\n             raise ValueError(\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -1219,3 +1219,79 @@ def test_ncol_ncols(fig_test, fig_ref):\n     ncols = 3\n     fig_test.legend(strings, ncol=ncols)\n     fig_ref.legend(strings, ncols=ncols)\n+\n+\n+def test_loc_invalid_tuple_exception():\n+    # check that exception is raised if the loc arg\n+    # of legend is not a 2-tuple of numbers\n+    fig, ax = plt.subplots()\n+    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n+                       'tuple, or an integer 0-10, not \\\\(1.1,\\\\)')):\n+        ax.legend(loc=(1.1, ))\n+\n+    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n+                       'tuple, or an integer 0-10, not \\\\(0.481, 0.4227, 0.4523\\\\)')):\n+        ax.legend(loc=(0.481, 0.4227, 0.4523))\n+\n+    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n+                       'tuple, or an integer 0-10, not \\\\(0.481, \\'go blue\\'\\\\)')):\n+        ax.legend(loc=(0.481, \"go blue\"))\n+\n+\n+def test_loc_valid_tuple():\n+    fig, ax = plt.subplots()\n+    ax.legend(loc=(0.481, 0.442))\n+    ax.legend(loc=(1, 2))\n+\n+\n+def test_loc_valid_list():\n+    fig, ax = plt.subplots()\n+    ax.legend(loc=[0.481, 0.442])\n+    ax.legend(loc=[1, 2])\n+\n+\n+def test_loc_invalid_list_exception():\n+    fig, ax = plt.subplots()\n+    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n+                       'tuple, or an integer 0-10, not \\\\[1.1, 2.2, 3.3\\\\]')):\n+        ax.legend(loc=[1.1, 2.2, 3.3])\n+\n+\n+def test_loc_invalid_type():\n+    fig, ax = plt.subplots()\n+    with pytest.raises(ValueError, match=(\"loc must be string, coordinate \"\n+                       \"tuple, or an integer 0-10, not {'not': True}\")):\n+        ax.legend(loc={'not': True})\n+\n+\n+def test_loc_validation_numeric_value():\n+    fig, ax = plt.subplots()\n+    ax.legend(loc=0)\n+    ax.legend(loc=1)\n+    ax.legend(loc=5)\n+    ax.legend(loc=10)\n+    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n+                       'tuple, or an integer 0-10, not 11')):\n+        ax.legend(loc=11)\n+\n+    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n+                       'tuple, or an integer 0-10, not -1')):\n+        ax.legend(loc=-1)\n+\n+\n+def test_loc_validation_string_value():\n+    fig, ax = plt.subplots()\n+    ax.legend(loc='best')\n+    ax.legend(loc='upper right')\n+    ax.legend(loc='best')\n+    ax.legend(loc='upper right')\n+    ax.legend(loc='upper left')\n+    ax.legend(loc='lower left')\n+    ax.legend(loc='lower right')\n+    ax.legend(loc='right')\n+    ax.legend(loc='center left')\n+    ax.legend(loc='center right')\n+    ax.legend(loc='lower center')\n+    ax.legend(loc='upper center')\n+    with pytest.raises(ValueError, match=\"'wrong' is not a valid value for\"):\n+        ax.legend(loc='wrong')\n",
  "problem_statement": "[Bug]: Validation not performed for `loc` argument to `legend`\n### Bug summary\n\nWhen passing non-str `loc` values to `legend`, validation is not performed. So even for invalid inputs, errors are raised only when we call `show()`\n\n### Code for reproduction\n\n```python\n>>> import matplotlib.pyplot as plt\r\n>>> import matplotlib as mpl\r\n>>> xs, ys = [1,2,3], [2,3,1]\r\n>>> fig, ax = plt.subplots(3)\r\n>>> ax[0].scatter(xs, ys, label='loc-tuple-arg')\r\n<matplotlib.collections.PathCollection object at 0x0000019D4099ED60>\r\n>>> ax[0].legend(loc=(1.1, .5, 1.1, \"abc\"))\r\n<matplotlib.legend.Legend object at 0x0000019D4099EF10>\r\n>>> plt.show()\n```\n\n\n### Actual outcome\n\n```\r\nException in Tkinter callback\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 1892, in __call__\r\n    return self.func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 814, in callit\r\n    func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 251, in idle_draw\r\n    self.draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_tkagg.py\", line 10, in draw\r\n    super().draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\", line 405, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\figure.py\", line 3071, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3107, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 641, in draw\r\n    bbox = self._legend_box.get_window_extent(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 354, in get_window_extent\r\n    px, py = self.get_offset(w, h, xd, yd, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 291, in get_offset\r\n    return (self._offset(width, height, xdescent, ydescent, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 617, in _findoffset\r\n    fx, fy = self._loc\r\nValueError: too many values to unpack (expected 2)\r\nException in Tkinter callback\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 1892, in __call__\r\n    return self.func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 814, in callit\r\n    func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 251, in idle_draw\r\n    self.draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_tkagg.py\", line 10, in draw\r\n    super().draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\", line 405, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\figure.py\", line 3071, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3107, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 641, in draw\r\n    bbox = self._legend_box.get_window_extent(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 354, in get_window_extent\r\n    px, py = self.get_offset(w, h, xd, yd, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 291, in get_offset\r\n    return (self._offset(width, height, xdescent, ydescent, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 617, in _findoffset\r\n    fx, fy = self._loc\r\nValueError: too many values to unpack (expected 2)\r\n```\n\n### Expected outcome\n\nErrors should be raised when invalid arguments are passed to `loc`. Similar to what we get when we pass an invalid string value as shown:\r\n```\r\n>>> ax[0].legend(loc=\"abcd\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\axes\\_axes.py\", line 307, in legend\r\n    self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 454, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 470, in __init__\r\n    loc = _api.check_getitem(self.codes, loc=loc)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\_api\\__init__.py\", line 190, in check_getitem\r\n    raise ValueError(\r\nValueError: 'abcd' is not a valid value for loc; supported values are 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center'\r\n```\n\n### Additional information\n\n- Do you know why this bug is happening?\r\nhttps://github.com/matplotlib/matplotlib/blob/ab7917a89dc56165d695fa4b90200f2cacafcd59/lib/matplotlib/legend.py#L608-L615\r\n\r\nNo validation is done when setting values for `_loc_real`. We do check strings on line 473, which is why we don't face this issue there.\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.2\n\n### Matplotlib Backend\n\n'TkAgg'\n\n### Python version\n\n3.9.7\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n",
  "hints_text": "The work here is to :\r\n\r\n - sort out what the validation _should be_ (read the code where the above traceback starts)\r\n - add logic to `Legend.__init__` to validate loc\r\n - add tests\r\n - update docstring to legend (in both `Legend` and `Axes.legend`)\r\n\r\nThis is a good first issue because it should only require understanding a narrow section of the code and no API design (it is already broken for these inputs, we just want it to break _better_).\nHi. can i try this?\n@sod-lol Please do!  We do not really assign issues or require you to get permission before you start working on an issue.\n@tacaswell hello sir can you give me some resources to work on this issue\n@tacaswell i want to work on this,please assign this issue to me\n@Gairick52 there is already a PR for this....\n@iofall  Hello sir,i want to work on this issue,please assign this to me\n> @iofall Hello sir,i want to work on this issue,please assign this to me\r\n\r\nOnly maintainers can assign people to issues. Also, there is already a PR linked to this issue. You can try finding other issues to work on or provide any inputs if you have to the already linked PR.\n@iofall please share me beginner's  developer's guide\n> @iofall please share me beginner's developer's guide\r\n\r\nHere is the link to the contributing guide - https://matplotlib.org/devdocs/devel/contributing.html",
  "created_at": "2023-02-22T05:06:30Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_loc_invalid_tuple_exception\", \"lib/matplotlib/tests/test_legend.py::test_loc_invalid_list_exception\", \"lib/matplotlib/tests/test_legend.py::test_loc_invalid_type\", \"lib/matplotlib/tests/test_legend.py::test_loc_validation_numeric_value\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_legend_ordereddict\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto4\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto5\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[png]\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore\", \"lib/matplotlib/tests/test_legend.py::test_labels_first[png]\", \"lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[png]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[png]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_rc[png]\", \"lib/matplotlib/tests/test_legend.py::test_rc[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[png]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_remove\", \"lib/matplotlib/tests/test_legend.py::test_reverse_legend_handles_and_labels\", \"lib/matplotlib/tests/test_legend.py::test_reverse_legend_display[png]\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs\", \"lib/matplotlib/tests/test_legend.py::test_figure_legend_outside\", \"lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]\", \"lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend\", \"lib/matplotlib/tests/test_legend.py::test_nanscatter\", \"lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]\", \"lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes\", \"lib/matplotlib/tests/test_legend.py::test_handler_numpoints\", \"lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning\", \"lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend\", \"lib/matplotlib/tests/test_legend.py::test_shadow_framealpha\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_empty\", \"lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent\", \"lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]\", \"lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_linecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markeredgecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markerfacecolor_iterable\", \"lib/matplotlib/tests/test_legend.py::test_legend_pathcollection_labelcolor_markfacecolor_cmap\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_get_set_draggable\", \"lib/matplotlib/tests/test_legend.py::test_legend_draggable[True]\", \"lib/matplotlib/tests/test_legend.py::test_legend_draggable[False]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_handles\", \"lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc\", \"lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception\", \"lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_text_axes\", \"lib/matplotlib/tests/test_legend.py::test_handlerline2d\", \"lib/matplotlib/tests/test_legend.py::test_subfigure_legend\", \"lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color\", \"lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]\", \"lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_loc_valid_tuple\", \"lib/matplotlib/tests/test_legend.py::test_loc_valid_list\", \"lib/matplotlib/tests/test_legend.py::test_loc_validation_string_value\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.818891",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}