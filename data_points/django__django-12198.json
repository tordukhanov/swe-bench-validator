{
  "repo": "django/django",
  "instance_id": "django__django-12198",
  "base_commit": "d6505273cd889886caca57884fa79941b18c2ea6",
  "patch": "diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py\n--- a/django/contrib/auth/__init__.py\n+++ b/django/contrib/auth/__init__.py\n@@ -63,8 +63,9 @@ def authenticate(request=None, **credentials):\n     If the given credentials are valid, return a User object.\n     \"\"\"\n     for backend, backend_path in _get_backends(return_tuples=True):\n+        backend_signature = inspect.signature(backend.authenticate)\n         try:\n-            inspect.getcallargs(backend.authenticate, request, **credentials)\n+            backend_signature.bind(request, **credentials)\n         except TypeError:\n             # This backend doesn't accept these credentials as arguments. Try the next one.\n             continue\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1916,9 +1916,8 @@ def set_group_by(self):\n         group_by = list(self.select)\n         if self.annotation_select:\n             for alias, annotation in self.annotation_select.items():\n-                try:\n-                    inspect.getcallargs(annotation.get_group_by_cols, alias=alias)\n-                except TypeError:\n+                signature = inspect.signature(annotation.get_group_by_cols)\n+                if 'alias' not in signature.parameters:\n                     annotation_class = annotation.__class__\n                     msg = (\n                         '`alias=None` must be added to the signature of '\ndiff --git a/django/template/base.py b/django/template/base.py\n--- a/django/template/base.py\n+++ b/django/template/base.py\n@@ -50,10 +50,10 @@\n '<html></html>'\n \"\"\"\n \n+import inspect\n import logging\n import re\n from enum import Enum\n-from inspect import getcallargs, getfullargspec, unwrap\n \n from django.template.context import BaseContext\n from django.utils.formats import localize\n@@ -707,9 +707,9 @@ def args_check(name, func, provided):\n         # First argument, filter input, is implied.\n         plen = len(provided) + 1\n         # Check to see if a decorator is providing the real function.\n-        func = unwrap(func)\n+        func = inspect.unwrap(func)\n \n-        args, _, _, defaults, _, _, _ = getfullargspec(func)\n+        args, _, _, defaults, _, _, _ = inspect.getfullargspec(func)\n         alen = len(args)\n         dlen = len(defaults or [])\n         # Not enough OR Too many\n@@ -857,8 +857,9 @@ def _resolve_lookup(self, context):\n                         try:  # method call (assuming no args required)\n                             current = current()\n                         except TypeError:\n+                            signature = inspect.signature(current)\n                             try:\n-                                getcallargs(current)\n+                                signature.bind()\n                             except TypeError:  # arguments *were* required\n                                 current = context.template.engine.string_if_invalid  # invalid method call\n                             else:\n",
  "test_patch": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -13,6 +13,7 @@\n from django.test import (\n     SimpleTestCase, TestCase, modify_settings, override_settings,\n )\n+from django.views.decorators.debug import sensitive_variables\n \n from .models import (\n     CustomPermissionsUser, CustomUser, CustomUserWithoutIsActiveField,\n@@ -642,6 +643,12 @@ def authenticate(self):\n         pass\n \n \n+class SkippedBackendWithDecoratedMethod:\n+    @sensitive_variables()\n+    def authenticate(self):\n+        pass\n+\n+\n class AuthenticateTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n@@ -664,6 +671,13 @@ def test_skips_backends_without_arguments(self):\n         \"\"\"\n         self.assertEqual(authenticate(username='test', password='test'), self.user1)\n \n+    @override_settings(AUTHENTICATION_BACKENDS=(\n+        'auth_tests.test_auth_backends.SkippedBackendWithDecoratedMethod',\n+        'django.contrib.auth.backends.ModelBackend',\n+    ))\n+    def test_skips_backends_with_decorated_method(self):\n+        self.assertEqual(authenticate(username='test', password='test'), self.user1)\n+\n \n class ImproperlyConfiguredUserModelTest(TestCase):\n     \"\"\"\n",
  "problem_statement": "Allow sensitive_variables() to preserve the signature of its decorated function\nDescription\n\t\nWhen the method authenticate of a custom AuthenticationBackend is decorated with sensitive_variables, inspect.getcallargs will always match.\nCalling the authenticate function will attempt to call this backend with any set of credentials and will raise an uncaught TypeError for an unmatching backend.\nAuthentication with such decorated backends used to work in version 1.6.\n",
  "hints_text": "Could you please try â€‹bisecting to find the commit where the behavior changed?\nIt is commit b89c2a5d9eb70ca36629ef657c98e3371e9a5c4f.\nThanks! I'm not sure what can be done to fix this. Any ideas?\nNothing apart from going back to the previous masking of TypeError... I think that these two behaviours go against each other...\nIt might be possible to allow sensitive_variables to preserve the signature of whatever it decorates. Here's code that works until @sensitive_variables is added: import inspect from django.views.decorators.debug import sensitive_variables class Backend(object): @sensitive_variables def authenticate(self, username=None, password=None): print(username) inspect.getcallargs(Backend().authenticate, username='foo', password='bar')\nWhat about something like this: def sensitive_variables(*variables): def decorator(func): @functools.wraps(func) def sensitive_variables_wrapper(*func_args, **func_kwargs): ... # Keep the original function for inspection in `authenticate` sensitive_variables_wrapper.sensitive_variables_func = func return sensitive_variables_wrapper return decorator Function authenticate would then check the sensitive_variables_func first.",
  "created_at": "2019-12-09T16:59:47Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_skips_backends_with_decorated_method (auth_tests.test_auth_backends.AuthenticateTests)\"]",
  "PASS_TO_PASS": "[\"test_get_all_permissions (auth_tests.test_auth_backends.AnonymousUserBackendTest)\", \"test_has_module_perms (auth_tests.test_auth_backends.AnonymousUserBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.AnonymousUserBackendTest)\", \"test_has_perms (auth_tests.test_auth_backends.AnonymousUserBackendTest)\", \"test_raises_exception (auth_tests.test_auth_backends.NoBackendsTest)\", \"test_get_all_permissions (auth_tests.test_auth_backends.BaseBackendTest)\", \"test_get_group_permissions (auth_tests.test_auth_backends.BaseBackendTest)\", \"test_get_user_permissions (auth_tests.test_auth_backends.BaseBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.BaseBackendTest)\", \"test_has_module_perms (auth_tests.test_auth_backends.InActiveUserBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.InActiveUserBackendTest)\", \"test_skips_backends_without_arguments (auth_tests.test_auth_backends.AuthenticateTests)\", \"A TypeError within a backend is propagated properly (#18171).\", \"test_get_all_permissions (auth_tests.test_auth_backends.RowlevelBackendTest)\", \"test_get_group_permissions (auth_tests.test_auth_backends.RowlevelBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.RowlevelBackendTest)\", \"test_changed_backend_settings (auth_tests.test_auth_backends.ChangedBackendSettingsTest)\", \"test_authenticates (auth_tests.test_auth_backends.PermissionDeniedBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.PermissionDeniedBackendTest)\", \"test_has_perm_denied (auth_tests.test_auth_backends.PermissionDeniedBackendTest)\", \"user is not authenticated after a backend raises permission denied #2550\", \"test_authenticate (auth_tests.test_auth_backends.AllowAllUsersModelBackendTest)\", \"test_get_user (auth_tests.test_auth_backends.AllowAllUsersModelBackendTest)\", \"test_backend_path (auth_tests.test_auth_backends.ImportedBackendTests)\", \"test_backend_path_login_with_explicit_backends (auth_tests.test_auth_backends.SelectingBackendTests)\", \"test_backend_path_login_without_authenticate_multiple_backends (auth_tests.test_auth_backends.SelectingBackendTests)\", \"test_backend_path_login_without_authenticate_single_backend (auth_tests.test_auth_backends.SelectingBackendTests)\", \"test_non_string_backend (auth_tests.test_auth_backends.SelectingBackendTests)\", \"test_does_not_shadow_exception (auth_tests.test_auth_backends.ImproperlyConfiguredUserModelTest)\", \"test_authenticate (auth_tests.test_auth_backends.CustomUserModelBackendAuthenticateTest)\", \"test_login (auth_tests.test_auth_backends.UUIDUserTests)\", \"test_anonymous_has_no_permissions (auth_tests.test_auth_backends.ModelBackendTest)\", \"test_authenticate_inactive (auth_tests.test_auth_backends.ModelBackendTest)\", \"test_authenticate_user_without_is_active_field (auth_tests.test_auth_backends.ModelBackendTest)\", \"Hasher is run once regardless of whether the user exists. Refs #20760.\", \"test_authentication_without_credentials (auth_tests.test_auth_backends.ModelBackendTest)\", \"test_custom_perms (auth_tests.test_auth_backends.ModelBackendTest)\", \"A superuser has all permissions. Refs #14795.\", \"Regressiontest for #12462\", \"test_has_perm (auth_tests.test_auth_backends.ModelBackendTest)\", \"test_inactive_has_no_permissions (auth_tests.test_auth_backends.ModelBackendTest)\", \"test_anonymous_has_no_permissions (auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest)\", \"test_authentication_without_credentials (auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest)\", \"test_custom_perms (auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest)\", \"test_inactive_has_no_permissions (auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest)\", \"test_anonymous_has_no_permissions (auth_tests.test_auth_backends.ExtensionUserModelBackendTest)\", \"test_authentication_without_credentials (auth_tests.test_auth_backends.ExtensionUserModelBackendTest)\", \"test_custom_perms (auth_tests.test_auth_backends.ExtensionUserModelBackendTest)\", \"test_has_perm (auth_tests.test_auth_backends.ExtensionUserModelBackendTest)\", \"test_inactive_has_no_permissions (auth_tests.test_auth_backends.ExtensionUserModelBackendTest)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.618330",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}