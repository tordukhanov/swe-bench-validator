{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7395",
  "base_commit": "7887615374656da0556966b8cd37d2af8dac2654",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -551,12 +551,23 @@ def get_signature_prefix(self, sig: str) -> str:\n     def needs_arglist(self) -> bool:\n         return True\n \n-    def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:\n+    def add_target_and_index(self, name_cls: Tuple[str, str], sig: str,\n+                             signode: desc_signature) -> None:\n+        super().add_target_and_index(name_cls, sig, signode)\n+        modname = self.options.get('module', self.env.ref_context.get('py:module'))\n+        node_id = signode['ids'][0]\n+\n         name, cls = name_cls\n         if modname:\n-            return _('%s() (in module %s)') % (name, modname)\n+            text = _('%s() (in module %s)') % (name, modname)\n+            self.indexnode['entries'].append(('single', text, node_id, '', None))\n         else:\n-            return _('%s() (built-in function)') % name\n+            text = '%s; %s()' % (pairindextypes['builtin'], name)\n+            self.indexnode['entries'].append(('pair', text, node_id, '', None))\n+\n+    def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:\n+        # add index in own add_target_and_index() instead.\n+        return None\n \n \n class PyDecoratorFunction(PyFunction):\n@@ -915,8 +926,8 @@ def run(self) -> List[Node]:\n             # the platform and synopsis aren't printed; in fact, they are only\n             # used in the modindex currently\n             ret.append(target)\n-            indextext = _('%s (module)') % modname\n-            inode = addnodes.index(entries=[('single', indextext, node_id, '', None)])\n+            indextext = '%s; %s' % (pairindextypes['module'], modname)\n+            inode = addnodes.index(entries=[('pair', indextext, node_id, '', None)])\n             ret.append(inode)\n         return ret\n \n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -461,6 +461,7 @@ def test_pydata(app):\n \n def test_pyfunction(app):\n     text = (\".. py:function:: func1\\n\"\n+            \".. py:module:: example\\n\"\n             \".. py:function:: func2\\n\"\n             \"   :async:\\n\")\n     domain = app.env.get_domain('py')\n@@ -469,15 +470,25 @@ def test_pyfunction(app):\n                           [desc, ([desc_signature, ([desc_name, \"func1\"],\n                                                     [desc_parameterlist, ()])],\n                                   [desc_content, ()])],\n+                          nodes.target,\n+                          addnodes.index,\n                           addnodes.index,\n                           [desc, ([desc_signature, ([desc_annotation, \"async \"],\n+                                                    [desc_addname, \"example.\"],\n                                                     [desc_name, \"func2\"],\n                                                     [desc_parameterlist, ()])],\n                                   [desc_content, ()])]))\n+    assert_node(doctree[0], addnodes.index,\n+                entries=[('pair', 'built-in function; func1()', 'func1', '', None)])\n+    assert_node(doctree[3], addnodes.index,\n+                entries=[('pair', 'module; example', 'module-example', '', None)])\n+    assert_node(doctree[4], addnodes.index,\n+                entries=[('single', 'func2() (in module example)', 'example.func2', '', None)])\n+\n     assert 'func1' in domain.objects\n     assert domain.objects['func1'] == ('index', 'func1', 'function')\n-    assert 'func2' in domain.objects\n-    assert domain.objects['func2'] == ('index', 'func2', 'function')\n+    assert 'example.func2' in domain.objects\n+    assert domain.objects['example.func2'] == ('index', 'example.func2', 'function')\n \n \n def test_pymethod_options(app):\n",
  "problem_statement": "The index directive with \"builtin\" type generates different index entry than the function directive\n```\r\n.. index::\r\n   builtin: max\r\n```\r\nand\r\n```\r\n.. function:: max(iterable, *[, key, default])\r\n```\r\ngenerate similar but different index entries.\r\n\r\nThe former generates:\r\n```\r\nmax\r\n    built-in function\r\n```\r\nThe latter generates:\r\n```\r\nmax() (built-in function)\r\n```\r\nDifferences:\r\n\r\n1. Parenthesis are added or not after the name of the function.\r\n2. Parenthesis are added or not around \"built-in function\".\r\n3. It takes one or two lines.\r\n4. \"max\" is a link or not.\r\n\r\nLink: https://docs.python.org/3/genindex-M.html\r\n\r\nThis issue was reported on the Python bug tracker: https://bugs.python.org/issue21352.\r\n\r\nWould be nice to unify and merge index entries generated by \"function\" and \"index\".\n",
  "hints_text": "Unfortunately, python specific index types (like `builtin`) were deprecated in 10 years ago: https://github.com/sphinx-doc/sphinx/commit/3e9182550a#diff-238bd7cedf25808f7e89537fbcd798dcR188-R189\r\nAnd we are considering to remove it in future: #6970 . But we need to consider about it more deeply...\nWhat should be used in the Python documentation?",
  "created_at": "2020-03-28T16:33:05Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_pyfunction\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_exceptions_module_is_ignored\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\"]",
  "environment_setup_commit": "50d2d289e150cb429de15770bdd48a723de8c45d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.040590",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}