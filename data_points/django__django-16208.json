{
  "repo": "django/django",
  "instance_id": "django__django-16208",
  "base_commit": "c0a93d39411004300dfda2deb3dc093b69ac6368",
  "patch": "diff --git a/django/db/backends/base/base.py b/django/db/backends/base/base.py\n--- a/django/db/backends/base/base.py\n+++ b/django/db/backends/base/base.py\n@@ -8,6 +8,8 @@\n from collections import deque\n from contextlib import contextmanager\n \n+from django.db.backends.utils import debug_transaction\n+\n try:\n     import zoneinfo\n except ImportError:\n@@ -307,12 +309,12 @@ def _cursor(self, name=None):\n \n     def _commit(self):\n         if self.connection is not None:\n-            with self.wrap_database_errors:\n+            with debug_transaction(self, \"COMMIT\"), self.wrap_database_errors:\n                 return self.connection.commit()\n \n     def _rollback(self):\n         if self.connection is not None:\n-            with self.wrap_database_errors:\n+            with debug_transaction(self, \"ROLLBACK\"), self.wrap_database_errors:\n                 return self.connection.rollback()\n \n     def _close(self):\n@@ -488,9 +490,11 @@ def set_autocommit(\n \n         if start_transaction_under_autocommit:\n             self._start_transaction_under_autocommit()\n-        else:\n+        elif autocommit:\n             self._set_autocommit(autocommit)\n-\n+        else:\n+            with debug_transaction(self, \"BEGIN\"):\n+                self._set_autocommit(autocommit)\n         self.autocommit = autocommit\n \n         if autocommit and self.run_commit_hooks_on_set_autocommit_on:\ndiff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py\n--- a/django/db/backends/oracle/base.py\n+++ b/django/db/backends/oracle/base.py\n@@ -13,6 +13,7 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.db import IntegrityError\n from django.db.backends.base.base import BaseDatabaseWrapper\n+from django.db.backends.utils import debug_transaction\n from django.utils.asyncio import async_unsafe\n from django.utils.encoding import force_bytes, force_str\n from django.utils.functional import cached_property\n@@ -306,7 +307,7 @@ def create_cursor(self, name=None):\n \n     def _commit(self):\n         if self.connection is not None:\n-            with wrap_oracle_errors():\n+            with debug_transaction(self, \"COMMIT\"), wrap_oracle_errors():\n                 return self.connection.commit()\n \n     # Oracle doesn't support releasing savepoints. But we fake them when query\ndiff --git a/django/db/backends/utils.py b/django/db/backends/utils.py\n--- a/django/db/backends/utils.py\n+++ b/django/db/backends/utils.py\n@@ -144,6 +144,35 @@ def debug_sql(\n             )\n \n \n+@contextmanager\n+def debug_transaction(connection, sql):\n+    start = time.monotonic()\n+    try:\n+        yield\n+    finally:\n+        if connection.queries_logged:\n+            stop = time.monotonic()\n+            duration = stop - start\n+            connection.queries_log.append(\n+                {\n+                    \"sql\": \"%s\" % sql,\n+                    \"time\": \"%.3f\" % duration,\n+                }\n+            )\n+            logger.debug(\n+                \"(%.3f) %s; args=%s; alias=%s\",\n+                duration,\n+                sql,\n+                None,\n+                connection.alias,\n+                extra={\n+                    \"duration\": duration,\n+                    \"sql\": sql,\n+                    \"alias\": connection.alias,\n+                },\n+            )\n+\n+\n def split_tzname_delta(tzname):\n     \"\"\"\n     Split a time zone name into a 3-tuple of (name, sign, offset).\n",
  "test_patch": "diff --git a/tests/backends/base/test_base.py b/tests/backends/base/test_base.py\n--- a/tests/backends/base/test_base.py\n+++ b/tests/backends/base/test_base.py\n@@ -1,10 +1,16 @@\n from unittest.mock import MagicMock, patch\n \n-from django.db import DEFAULT_DB_ALIAS, connection, connections\n+from django.db import DEFAULT_DB_ALIAS, connection, connections, transaction\n from django.db.backends.base.base import BaseDatabaseWrapper\n-from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.test import (\n+    SimpleTestCase,\n+    TestCase,\n+    TransactionTestCase,\n+    skipUnlessDBFeature,\n+)\n+from django.test.utils import CaptureQueriesContext, override_settings\n \n-from ..models import Square\n+from ..models import Person, Square\n \n \n class DatabaseWrapperTests(SimpleTestCase):\n@@ -55,6 +61,57 @@ def test_check_database_version_supported_with_none_as_database_version(self):\n             connection.check_database_version_supported()\n \n \n+class DatabaseWrapperLoggingTests(TransactionTestCase):\n+    available_apps = []\n+\n+    @override_settings(DEBUG=True)\n+    def test_commit_debug_log(self):\n+        conn = connections[DEFAULT_DB_ALIAS]\n+        with CaptureQueriesContext(conn):\n+            with self.assertLogs(\"django.db.backends\", \"DEBUG\") as cm:\n+                with transaction.atomic():\n+                    Person.objects.create(first_name=\"first\", last_name=\"last\")\n+\n+                self.assertGreaterEqual(len(conn.queries_log), 3)\n+                self.assertEqual(conn.queries_log[-3][\"sql\"], \"BEGIN\")\n+                self.assertRegex(\n+                    cm.output[0],\n+                    r\"DEBUG:django.db.backends:\\(\\d+.\\d{3}\\) \"\n+                    rf\"BEGIN; args=None; alias={DEFAULT_DB_ALIAS}\",\n+                )\n+                self.assertEqual(conn.queries_log[-1][\"sql\"], \"COMMIT\")\n+                self.assertRegex(\n+                    cm.output[-1],\n+                    r\"DEBUG:django.db.backends:\\(\\d+.\\d{3}\\) \"\n+                    rf\"COMMIT; args=None; alias={DEFAULT_DB_ALIAS}\",\n+                )\n+\n+    @override_settings(DEBUG=True)\n+    def test_rollback_debug_log(self):\n+        conn = connections[DEFAULT_DB_ALIAS]\n+        with CaptureQueriesContext(conn):\n+            with self.assertLogs(\"django.db.backends\", \"DEBUG\") as cm:\n+                with self.assertRaises(Exception), transaction.atomic():\n+                    Person.objects.create(first_name=\"first\", last_name=\"last\")\n+                    raise Exception(\"Force rollback\")\n+\n+                self.assertEqual(conn.queries_log[-1][\"sql\"], \"ROLLBACK\")\n+                self.assertRegex(\n+                    cm.output[-1],\n+                    r\"DEBUG:django.db.backends:\\(\\d+.\\d{3}\\) \"\n+                    rf\"ROLLBACK; args=None; alias={DEFAULT_DB_ALIAS}\",\n+                )\n+\n+    def test_no_logs_without_debug(self):\n+        with self.assertNoLogs(\"django.db.backends\", \"DEBUG\"):\n+            with self.assertRaises(Exception), transaction.atomic():\n+                Person.objects.create(first_name=\"first\", last_name=\"last\")\n+                raise Exception(\"Force rollback\")\n+\n+            conn = connections[DEFAULT_DB_ALIAS]\n+            self.assertEqual(len(conn.queries_log), 0)\n+\n+\n class ExecuteWrapperTests(TestCase):\n     @staticmethod\n     def call_execute(connection, params=None):\n",
  "problem_statement": "Log when DB transactions are commited and rollbacked.\nDescription\n\t\nBackground: I was debugging database calls today with the django.db.backends log.\nProblem: The BEGIN SQL calls show up in the logs, but there is no way to see when the transaction is commited or if it is rolled back. \nAs easy solution would be to log commits and rollbacks as well.\n",
  "hints_text": "Patch: â€‹https://github.com/django/django/pull/12219\nNote: BEGIN is logged only on SQLite as a workaround to start a transaction explicitly in autocommit mode, you will not find it in loggers for other databases.\nAuthor updated patch\nDiscussed w/ Simon while at DjangoCon US 2022 Sprints, will grab this to try to get this over the line.",
  "created_at": "2022-10-20T22:22:01Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_commit_debug_log (backends.base.test_base.DatabaseWrapperLoggingTests)\", \"test_rollback_debug_log (backends.base.test_base.DatabaseWrapperLoggingTests)\"]",
  "PASS_TO_PASS": "[\"test_check_database_version_supported_with_none_as_database_version (backends.base.test_base.DatabaseWrapperTests)\", \"test_get_database_version (backends.base.test_base.DatabaseWrapperTests)\", \"The \\\"initialization\\\" class attributes like client_class and\", \"test_initialization_display_name (backends.base.test_base.DatabaseWrapperTests)\", \"test_repr (backends.base.test_base.DatabaseWrapperTests)\", \"test_database_queried (backends.base.test_base.ExecuteWrapperTests)\", \"test_nested_wrapper_invoked (backends.base.test_base.ExecuteWrapperTests)\", \"test_outer_wrapper_blocks (backends.base.test_base.ExecuteWrapperTests)\", \"test_wrapper_connection_specific (backends.base.test_base.ExecuteWrapperTests)\", \"test_wrapper_gets_sql (backends.base.test_base.ExecuteWrapperTests)\", \"test_wrapper_invoked (backends.base.test_base.ExecuteWrapperTests)\", \"test_wrapper_invoked_many (backends.base.test_base.ExecuteWrapperTests)\", \"test_multi_database_init_connection_state_called_once (backends.base.test_base.MultiDatabaseTests)\", \"test_no_logs_without_debug (backends.base.test_base.DatabaseWrapperLoggingTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.750636",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}