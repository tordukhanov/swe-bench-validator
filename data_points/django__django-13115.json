{
  "repo": "django/django",
  "instance_id": "django__django-13115",
  "base_commit": "8984cab8a80af8555b1ccfa5b552d411b47f9bca",
  "patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -95,6 +95,14 @@ def __init__(\n             raise ValueError(\n                 'UniqueConstraint with conditions cannot be deferred.'\n             )\n+        if include and deferrable:\n+            raise ValueError(\n+                'UniqueConstraint with include fields cannot be deferred.'\n+            )\n+        if opclasses and deferrable:\n+            raise ValueError(\n+                'UniqueConstraint with opclasses cannot be deferred.'\n+            )\n         if not isinstance(deferrable, (type(None), Deferrable)):\n             raise ValueError(\n                 'UniqueConstraint.deferrable must be a Deferrable instance.'\n",
  "test_patch": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -406,6 +406,26 @@ def test_deferrable_with_condition(self):\n                 deferrable=models.Deferrable.DEFERRED,\n             )\n \n+    def test_deferrable_with_include(self):\n+        message = 'UniqueConstraint with include fields cannot be deferred.'\n+        with self.assertRaisesMessage(ValueError, message):\n+            models.UniqueConstraint(\n+                fields=['name'],\n+                name='name_inc_color_color_unique',\n+                include=['color'],\n+                deferrable=models.Deferrable.DEFERRED,\n+            )\n+\n+    def test_deferrable_with_opclasses(self):\n+        message = 'UniqueConstraint with opclasses cannot be deferred.'\n+        with self.assertRaisesMessage(ValueError, message):\n+            models.UniqueConstraint(\n+                fields=['name'],\n+                name='name_text_pattern_ops_unique',\n+                opclasses=['text_pattern_ops'],\n+                deferrable=models.Deferrable.DEFERRED,\n+            )\n+\n     def test_invalid_defer_argument(self):\n         message = 'UniqueConstraint.deferrable must be a Deferrable instance.'\n         with self.assertRaisesMessage(ValueError, message):\n",
  "problem_statement": "Add errors when UniqueConstraint.deferrable is combined with index specific parameters\nDescription\n\t\nUniqueConstraint should throw an error when deferrable is combined with parameters which require the usage of an explicit unique index through CREATE UNIQUE INDEX. This was missed when UniqueConstraint.include and UniqueConstraint.opclasses was added. We should also add documentation about this incompatibility.\n",
  "hints_text": "",
  "created_at": "2020-06-26T18:45:13Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_deferrable_with_include (constraints.tests.UniqueConstraintTests)\", \"test_deferrable_with_opclasses (constraints.tests.UniqueConstraintTests)\"]",
  "PASS_TO_PASS": "[\"test_constraint_sql (constraints.tests.BaseConstraintTests)\", \"test_create_sql (constraints.tests.BaseConstraintTests)\", \"test_remove_sql (constraints.tests.BaseConstraintTests)\", \"test_abstract_name (constraints.tests.CheckConstraintTests)\", \"test_database_constraint (constraints.tests.CheckConstraintTests)\", \"test_database_constraint_expression (constraints.tests.CheckConstraintTests)\", \"test_database_constraint_expressionwrapper (constraints.tests.CheckConstraintTests)\", \"test_deconstruction (constraints.tests.CheckConstraintTests)\", \"test_eq (constraints.tests.CheckConstraintTests)\", \"test_invalid_check_types (constraints.tests.CheckConstraintTests)\", \"test_name (constraints.tests.CheckConstraintTests)\", \"test_repr (constraints.tests.CheckConstraintTests)\", \"test_condition_must_be_q (constraints.tests.UniqueConstraintTests)\", \"test_database_constraint (constraints.tests.UniqueConstraintTests)\", \"test_database_constraint_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_deferrable (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_include (constraints.tests.UniqueConstraintTests)\", \"test_deconstruction_with_opclasses (constraints.tests.UniqueConstraintTests)\", \"test_deferrable_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_eq (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_deferrable (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_include (constraints.tests.UniqueConstraintTests)\", \"test_eq_with_opclasses (constraints.tests.UniqueConstraintTests)\", \"test_invalid_defer_argument (constraints.tests.UniqueConstraintTests)\", \"test_invalid_include_argument (constraints.tests.UniqueConstraintTests)\", \"test_invalid_opclasses_argument (constraints.tests.UniqueConstraintTests)\", \"test_model_validation (constraints.tests.UniqueConstraintTests)\", \"Partial unique constraints are ignored by Model.validate_unique().\", \"test_name (constraints.tests.UniqueConstraintTests)\", \"test_opclasses_and_fields_same_length (constraints.tests.UniqueConstraintTests)\", \"test_repr (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_condition (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_deferrable (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_include (constraints.tests.UniqueConstraintTests)\", \"test_repr_with_opclasses (constraints.tests.UniqueConstraintTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.644040",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}