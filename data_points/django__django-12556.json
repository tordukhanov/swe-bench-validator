{
  "repo": "django/django",
  "instance_id": "django__django-12556",
  "base_commit": "5cc2c63f902412cdd9a8ebbabbd953aa8e2180c0",
  "patch": "diff --git a/django/contrib/auth/hashers.py b/django/contrib/auth/hashers.py\n--- a/django/contrib/auth/hashers.py\n+++ b/django/contrib/auth/hashers.py\n@@ -185,7 +185,8 @@ def _load_library(self):\n \n     def salt(self):\n         \"\"\"Generate a cryptographically secure nonce salt in ASCII.\"\"\"\n-        return get_random_string()\n+        # 12 returns a 71-bit value, log_2((26+26+10)^12) =~ 71 bits\n+        return get_random_string(12)\n \n     def verify(self, password, encoded):\n         \"\"\"Check if the given password is correct.\"\"\"\ndiff --git a/django/db/backends/oracle/creation.py b/django/db/backends/oracle/creation.py\n--- a/django/db/backends/oracle/creation.py\n+++ b/django/db/backends/oracle/creation.py\n@@ -341,7 +341,7 @@ def _test_database_passwd(self):\n         password = self._test_settings_get('PASSWORD')\n         if password is None and self._test_user_create():\n             # Oracle passwords are limited to 30 chars and can't contain symbols.\n-            password = get_random_string(length=30)\n+            password = get_random_string(30)\n         return password\n \n     def _test_database_tblspace(self):\ndiff --git a/django/utils/crypto.py b/django/utils/crypto.py\n--- a/django/utils/crypto.py\n+++ b/django/utils/crypto.py\n@@ -4,8 +4,10 @@\n import hashlib\n import hmac\n import secrets\n+import warnings\n \n from django.conf import settings\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.encoding import force_bytes\n \n \n@@ -44,15 +46,31 @@ def salted_hmac(key_salt, value, secret=None, *, algorithm='sha1'):\n     return hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n \n \n-def get_random_string(length=12,\n-                      allowed_chars='abcdefghijklmnopqrstuvwxyz'\n-                                    'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):\n+NOT_PROVIDED = object()  # RemovedInDjango40Warning.\n+\n+\n+# RemovedInDjango40Warning: when the deprecation ends, replace with:\n+#   def get_random_string(self, length, allowed_chars='...'):\n+def get_random_string(length=NOT_PROVIDED, allowed_chars=(\n+    'abcdefghijklmnopqrstuvwxyz'\n+    'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n+)):\n     \"\"\"\n     Return a securely generated random string.\n \n-    The default length of 12 with the a-z, A-Z, 0-9 character set returns\n-    a 71-bit value. log_2((26+26+10)^12) =~ 71 bits\n+    The bit length of the returned value can be calculated with the formula:\n+        log_2(len(allowed_chars)^length)\n+\n+    For example, with default `allowed_chars` (26+26+10), this gives:\n+      * length: 12, bit length =~ 71 bits\n+      * length: 22, bit length =~ 131 bits\n     \"\"\"\n+    if length is NOT_PROVIDED:\n+        warnings.warn(\n+            'Not providing a length argument is deprecated.',\n+            RemovedInDjango40Warning,\n+        )\n+        length = 12\n     return ''.join(secrets.choice(allowed_chars) for i in range(length))\n \n \n",
  "test_patch": "diff --git a/tests/utils_tests/test_crypto.py b/tests/utils_tests/test_crypto.py\n--- a/tests/utils_tests/test_crypto.py\n+++ b/tests/utils_tests/test_crypto.py\n@@ -1,10 +1,12 @@\n import hashlib\n import unittest\n \n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, ignore_warnings\n from django.utils.crypto import (\n-    InvalidAlgorithm, constant_time_compare, pbkdf2, salted_hmac,\n+    InvalidAlgorithm, constant_time_compare, get_random_string, pbkdf2,\n+    salted_hmac,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n \n class TestUtilsCryptoMisc(SimpleTestCase):\n@@ -183,3 +185,14 @@ def test_regression_vectors(self):\n     def test_default_hmac_alg(self):\n         kwargs = {'password': b'password', 'salt': b'salt', 'iterations': 1, 'dklen': 20}\n         self.assertEqual(pbkdf2(**kwargs), hashlib.pbkdf2_hmac(hash_name=hashlib.sha256().name, **kwargs))\n+\n+\n+class DeprecationTests(SimpleTestCase):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_get_random_string(self):\n+        self.assertEqual(len(get_random_string()), 12)\n+\n+    def test_get_random_string_warning(self):\n+        msg = 'Not providing a length argument is deprecated.'\n+        with self.assertRaisesMessage(RemovedInDjango40Warning, msg):\n+            get_random_string()\n",
  "problem_statement": "Deprecate using get_random_string without an explicit length\nDescription\n\t\ndjango.utils.crypto.get_random_string currently has a default length value (12). I think we should force callers to specify the length value and not count on a default.\n",
  "hints_text": "",
  "created_at": "2020-03-11T08:49:53Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_get_random_string_warning (utils_tests.test_crypto.DeprecationTests)\"]",
  "PASS_TO_PASS": "[\"test_get_random_string (utils_tests.test_crypto.DeprecationTests)\", \"test_constant_time_compare (utils_tests.test_crypto.TestUtilsCryptoMisc)\", \"test_invalid_algorithm (utils_tests.test_crypto.TestUtilsCryptoMisc)\", \"test_salted_hmac (utils_tests.test_crypto.TestUtilsCryptoMisc)\", \"test_default_hmac_alg (utils_tests.test_crypto.TestUtilsCryptoPBKDF2)\", \"test_public_vectors (utils_tests.test_crypto.TestUtilsCryptoPBKDF2)\", \"test_regression_vectors (utils_tests.test_crypto.TestUtilsCryptoPBKDF2)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.630501",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}