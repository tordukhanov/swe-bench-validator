{
  "repo": "django/django",
  "instance_id": "django__django-13528",
  "base_commit": "e18156b6c35908f2a4026287b5225a6a4da8af1a",
  "patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -119,9 +119,20 @@ def floatformat(text, arg=-1):\n     * {{ num2|floatformat:\"-3\" }} displays \"34\"\n     * {{ num3|floatformat:\"-3\" }} displays \"34.260\"\n \n+    If arg has the 'g' suffix, force the result to be grouped by the\n+    THOUSAND_SEPARATOR for the active locale. When the active locale is\n+    en (English):\n+\n+    * {{ 6666.6666|floatformat:\"2g\" }} displays \"6,666.67\"\n+    * {{ 10000|floatformat:\"g\" }} displays \"10,000\"\n+\n     If the input float is infinity or NaN, display the string representation\n     of that value.\n     \"\"\"\n+    force_grouping = False\n+    if isinstance(arg, str) and arg.endswith('g'):\n+        force_grouping = True\n+        arg = arg[:-1] or -1\n     try:\n         input_val = repr(text)\n         d = Decimal(input_val)\n@@ -141,7 +152,9 @@ def floatformat(text, arg=-1):\n         return input_val\n \n     if not m and p < 0:\n-        return mark_safe(formats.number_format('%d' % (int(d)), 0))\n+        return mark_safe(\n+            formats.number_format('%d' % (int(d)), 0, force_grouping=force_grouping),\n+        )\n \n     exp = Decimal(1).scaleb(-abs(p))\n     # Set the precision high enough to avoid an exception (#15789).\n@@ -161,7 +174,9 @@ def floatformat(text, arg=-1):\n     if sign and rounded_d:\n         digits.append('-')\n     number = ''.join(reversed(digits))\n-    return mark_safe(formats.number_format(number, abs(p)))\n+    return mark_safe(\n+        formats.number_format(number, abs(p), force_grouping=force_grouping),\n+    )\n \n \n @register.filter(is_safe=True)\n",
  "test_patch": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -560,6 +560,14 @@ def test_l10n_disabled(self):\n             self.assertEqual('des. 31, 2009, 8:50 p.m.', Template('{{ dt }}').render(self.ctxt))\n             self.assertEqual('66666.67', Template('{{ n|floatformat:2 }}').render(self.ctxt))\n             self.assertEqual('100000.0', Template('{{ f|floatformat }}').render(self.ctxt))\n+            self.assertEqual(\n+                '66666.67',\n+                Template('{{ n|floatformat:\"2g\" }}').render(self.ctxt),\n+            )\n+            self.assertEqual(\n+                '100000.0',\n+                Template('{{ f|floatformat:\"g\" }}').render(self.ctxt),\n+            )\n             self.assertEqual('10:15 a.m.', Template('{{ t|time:\"TIME_FORMAT\" }}').render(self.ctxt))\n             self.assertEqual('12/31/2009', Template('{{ d|date:\"SHORT_DATE_FORMAT\" }}').render(self.ctxt))\n             self.assertEqual(\n@@ -734,6 +742,14 @@ def test_l10n_enabled(self):\n                 self.assertEqual('31 de desembre de 2009 a les 20:50', Template('{{ dt }}').render(self.ctxt))\n                 self.assertEqual('66666,67', Template('{{ n|floatformat:2 }}').render(self.ctxt))\n                 self.assertEqual('100000,0', Template('{{ f|floatformat }}').render(self.ctxt))\n+                self.assertEqual(\n+                    '66.666,67',\n+                    Template('{{ n|floatformat:\"2g\" }}').render(self.ctxt),\n+                )\n+                self.assertEqual(\n+                    '100.000,0',\n+                    Template('{{ f|floatformat:\"g\" }}').render(self.ctxt),\n+                )\n                 self.assertEqual('10:15', Template('{{ t|time:\"TIME_FORMAT\" }}').render(self.ctxt))\n                 self.assertEqual('31/12/2009', Template('{{ d|date:\"SHORT_DATE_FORMAT\" }}').render(self.ctxt))\n                 self.assertEqual(\n@@ -935,6 +951,14 @@ def test_l10n_enabled(self):\n                 self.assertEqual('Dec. 31, 2009, 8:50 p.m.', Template('{{ dt }}').render(self.ctxt))\n                 self.assertEqual('66666.67', Template('{{ n|floatformat:2 }}').render(self.ctxt))\n                 self.assertEqual('100000.0', Template('{{ f|floatformat }}').render(self.ctxt))\n+                self.assertEqual(\n+                    '66,666.67',\n+                    Template('{{ n|floatformat:\"2g\" }}').render(self.ctxt),\n+                )\n+                self.assertEqual(\n+                    '100,000.0',\n+                    Template('{{ f|floatformat:\"g\" }}').render(self.ctxt),\n+                )\n                 self.assertEqual('12/31/2009', Template('{{ d|date:\"SHORT_DATE_FORMAT\" }}').render(self.ctxt))\n                 self.assertEqual(\n                     '12/31/2009 8:50 p.m.',\ndiff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -2,6 +2,8 @@\n \n from django.template.defaultfilters import floatformat\n from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+from django.utils import translation\n from django.utils.safestring import mark_safe\n \n from ..utils import setup\n@@ -58,6 +60,19 @@ def test_inputs(self):\n         self.assertEqual(floatformat(1.5e-15, -20), '0.00000000000000150000')\n         self.assertEqual(floatformat(1.00000000000000015, 16), '1.0000000000000002')\n \n+    @override_settings(USE_L10N=True)\n+    def test_force_grouping(self):\n+        with translation.override('en'):\n+            self.assertEqual(floatformat(10000, 'g'), '10,000')\n+            self.assertEqual(floatformat(66666.666, '1g'), '66,666.7')\n+            # Invalid suffix.\n+            self.assertEqual(floatformat(10000, 'g2'), '10000')\n+        with translation.override('de', deactivate=True):\n+            self.assertEqual(floatformat(10000, 'g'), '10.000')\n+            self.assertEqual(floatformat(66666.666, '1g'), '66.666,7')\n+            # Invalid suffix.\n+            self.assertEqual(floatformat(10000, 'g2'), '10000')\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), '0.000000')\n         self.assertEqual(floatformat(0, 7), '0.0000000')\n",
  "problem_statement": "Incorrect separators when chaining floatformat to intcomma in some locales\nDescription\n\t\nWhen u use floatvalue \"2\" and intcomma together in a template the output of intcomma won't be internationalized.\nSince intcomma wont work with decimals in django 1.5.1 i tried to convert a decimal to a float in a template, but it wont give me the excepted output.\nWhen i have the value of 1000.11 it should be 1000,11 in germany, with intcomma(float(1000,11)) i get 1.000,11. But when i use Decimal(1000,11)|floatvalue\"2\"|intcomma, i will get 1,000,11. Thats a bug or maybe an unwanted behavior.\n",
  "hints_text": "Replying to c.schmitt@…: When u use floatvalue \"2\" and intcomma together in a template the output of intcomma won't be internationalized. Since intcomma wont work with decimals in django 1.5.1 i tried to convert a decimal to a float in a template, but it wont give me the excepted output. When i have the value of 1000.11 it should be 1000,11 in germany, with intcomma(float(1000,11)) i get 1.000,11. But when i use Decimal(1000,11)|floatvalue\"2\"|intcomma, i will get 1,000,11. Thats a bug or maybe an unwanted behavior. i meant floatformat not floatvalue.\nThis is the actual humanize function: @register.filter(is_safe=True) def intcomma(value, use_l10n=True): \"\"\" Converts an integer to a string containing commas every three digits. For example, 3000 becomes '3,000' and 45000 becomes '45,000'. \"\"\" if settings.USE_L10N and use_l10n: try: if not isinstance(value, float): value = int(value) except (TypeError, ValueError): return intcomma(value, False) else: return number_format(value, force_grouping=True) orig = force_text(value) new = re.sub(\"^(-?\\d+)(\\d{3})\", '\\g<1>,\\g<2>', orig) if orig == new: return new else: return intcomma(new, use_l10n) The problem is that floatformat returns a SafeText type, so it isn't a instance of float and intcomma gets recalled with use_l10n=False. So this line gets called: new = re.sub(\"^(-?\\d+)(\\d{3})\", '\\g<1>,\\g<2>', orig) This line will add an , to every 3rd place on the SafeText type so a string of: 1000,11 or 1000000,11 will be 1,000,11 or 1,000,000,11 which could get converted to an integer, so the next time intcomma gets called, it will just say that it won't get changed so it returns the SafeText String that is incorrect and won't make any sense. So this will be an uncorrect return value it should return either the correct output of 1.000.000,11 or nothing since it isn't a valid number. So I think it would be better to better check the value for localized format numbers or maybe better make a SafeDecimal or SafeFloat variable as a output of floatformat. Even this won't fix it: ​https://github.com/django/django/pull/785/files since floatformat will return SafeText a localized version of a Decimal value.\nBasically, the issue is that both intcomma and floatformat take numbers (or number-convertible values) to output a string representation. So chaining them is basically broken. One strategy would be to try harder to make those string representation transformed back to numbers, but then the first transformation would be lost. I'm of the opinion that either one of these filters should be able to do all necessary transformations. For example, we could imagine that the floatformat argument takes an optional g suffix to indicate grouping. So the result of Decimal(1000,11)|floatvalue:\"2g\" would be 1.000,11 for German (i.e. numberformat would be passed force_grouping=True in floatformat filter).\nwouldn't it be better to make them type safe? Like raise an error if intcomma or floatformat won't get 'numbers' or 'localized_numbers'?\nThis is still problem in Django 1.10.\nShould we try to parse value to float? Something like try to find float separator with regex, and convert it before isinstance check\nFor the specific German case a fix: '|'.join(intcomma(floatformat(amount, 2)).rsplit(',', 1)).replace(',', '.').replace('|', ',') Maybe this helps anybody... In my opinion a currency-filter with optional thousand separators would solve this issue for most people.\n​PR",
  "created_at": "2020-10-12T03:42:33Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_force_grouping (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_l10n_disabled (i18n.tests.FormattingTests)\", \"test_l10n_enabled (i18n.tests.FormattingTests)\"]",
  "PASS_TO_PASS": "[\"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_lazy (i18n.tests.TestModels)\", \"test_safestr (i18n.tests.TestModels)\", \"OSError is raised if the default language is unparseable.\", \"test_round_away_from_one (i18n.tests.UtilsTests)\", \"test_fallback_language_code (i18n.tests.TestLanguageInfo)\", \"test_localized_language_info (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo)\", \"test_check_for_language (i18n.tests.NonDjangoLanguageTests)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_floatformat01 (template_tests.filter_tests.test_floatformat.FloatformatTests)\", \"test_floatformat02 (template_tests.filter_tests.test_floatformat.FloatformatTests)\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests)\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests)\", \"test_i18n_app_dirs (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_app_dirs_ignore_django_apps (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests)\", \"test_sparse_territory_catalog (i18n.tests.TranslationFallbackI18NTests)\", \"test_default_lang_without_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_no_redirect_on_404 (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_unprefixed_language_other_than_accept_language (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_cache_resetting (i18n.tests.MiscTests)\", \"test_english_fallback (i18n.tests.MiscTests)\", \"test_get_language_from_path_null (i18n.tests.MiscTests)\", \"test_get_language_from_path_real (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests)\", \"test_parse_language_cookie (i18n.tests.MiscTests)\", \"test_parse_literal_http_header (i18n.tests.MiscTests)\", \"test_parse_spec_http_header (i18n.tests.MiscTests)\", \"test_special_fallback_language (i18n.tests.MiscTests)\", \"test_support_for_deprecated_chinese_language_codes (i18n.tests.MiscTests)\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests)\", \"test_translation_loading (i18n.tests.TranslationLoadingTests)\", \"test_float_dunder_method (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_infinity (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_inputs (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_low_decimal_precision (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_negative_zero_values (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_zero_values (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_language_not_saved_to_session (i18n.tests.LocaleMiddlewareTests)\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests)\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests)\", \"test_language_bidi_null (i18n.tests.TranslationTests)\", \"test_lazy_objects (i18n.tests.TranslationTests)\", \"test_lazy_pickle (i18n.tests.TranslationTests)\", \"test_legacy_aliases (i18n.tests.TranslationTests)\", \"test_maclines (i18n.tests.TranslationTests)\", \"test_multiple_plurals_per_language (i18n.tests.TranslationTests)\", \"test_ngettext_lazy (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests)\", \"test_override (i18n.tests.TranslationTests)\", \"test_override_decorator (i18n.tests.TranslationTests)\", \"test_override_exit (i18n.tests.TranslationTests)\", \"test_pgettext (i18n.tests.TranslationTests)\", \"test_plural (i18n.tests.TranslationTests)\", \"test_plural_null (i18n.tests.TranslationTests)\", \"test_safe_status (i18n.tests.TranslationTests)\", \"test_to_language (i18n.tests.TranslationTests)\", \"test_to_locale (i18n.tests.TranslationTests)\", \"test_admin_javascript_supported_input_formats (i18n.tests.FormattingTests)\", \"test_all_format_strings (i18n.tests.FormattingTests)\", \"test_false_like_locale_formats (i18n.tests.FormattingTests)\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests)\", \"test_get_custom_format (i18n.tests.FormattingTests)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests)\", \"test_get_format_modules_stability (i18n.tests.FormattingTests)\", \"test_iter_format_modules (i18n.tests.FormattingTests)\", \"test_iter_format_modules_stability (i18n.tests.FormattingTests)\", \"test_locale_independent (i18n.tests.FormattingTests)\", \"test_localize_templatetag_and_filter (i18n.tests.FormattingTests)\", \"test_localized_as_text_as_hidden_input (i18n.tests.FormattingTests)\", \"test_localized_input (i18n.tests.FormattingTests)\", \"test_localized_input_func (i18n.tests.FormattingTests)\", \"A string representation is returned for unlocalized numbers.\", \"test_sanitize_separators (i18n.tests.FormattingTests)\", \"test_sub_locales (i18n.tests.FormattingTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.660551",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}