{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26479",
  "base_commit": "04492d95a12328373161d7b8ffc8c2f4b0575974",
  "patch": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -841,7 +841,7 @@ def _print_ps(\n         if papertype is None:\n             papertype = mpl.rcParams['ps.papersize']\n         papertype = papertype.lower()\n-        _api.check_in_list(['auto', *papersize], papertype=papertype)\n+        _api.check_in_list(['figure', 'auto', *papersize], papertype=papertype)\n \n         orientation = _api.check_getitem(\n             _Orientation, orientation=orientation.lower())\n@@ -873,24 +873,16 @@ def _print_figure(\n         width, height = self.figure.get_size_inches()\n         if papertype == 'auto':\n             _api.warn_deprecated(\"3.8\", name=\"papertype='auto'\",\n-                                 addendum=\"Pass an explicit paper type, or omit the \"\n-                                 \"*papertype* argument entirely.\")\n+                                 addendum=\"Pass an explicit paper type, 'figure', or \"\n+                                 \"omit the *papertype* argument entirely.\")\n             papertype = _get_papertype(*orientation.swap_if_landscape((width, height)))\n \n-        if is_eps:\n+        if is_eps or papertype == 'figure':\n             paper_width, paper_height = width, height\n         else:\n             paper_width, paper_height = orientation.swap_if_landscape(\n                 papersize[papertype])\n \n-            if mpl.rcParams['ps.usedistiller']:\n-                # distillers improperly clip eps files if pagesize is too small\n-                if width > paper_width or height > paper_height:\n-                    papertype = _get_papertype(\n-                        *orientation.swap_if_landscape((width, height)))\n-                    paper_width, paper_height = orientation.swap_if_landscape(\n-                        papersize[papertype])\n-\n         # center the figure on the paper\n         xo = 72 * 0.5 * (paper_width - width)\n         yo = 72 * 0.5 * (paper_height - height)\n@@ -921,10 +913,10 @@ def print_figure_impl(fh):\n             if is_eps:\n                 print(\"%!PS-Adobe-3.0 EPSF-3.0\", file=fh)\n             else:\n-                print(f\"%!PS-Adobe-3.0\\n\"\n-                      f\"%%DocumentPaperSizes: {papertype}\\n\"\n-                      f\"%%Pages: 1\\n\",\n-                      end=\"\", file=fh)\n+                print(\"%!PS-Adobe-3.0\", file=fh)\n+                if papertype != 'figure':\n+                    print(f\"%%DocumentPaperSizes: {papertype}\", file=fh)\n+                print(\"%%Pages: 1\", file=fh)\n             print(f\"%%LanguageLevel: 3\\n\"\n                   f\"{dsc_comments}\\n\"\n                   f\"%%Orientation: {orientation.name}\\n\"\n@@ -1061,7 +1053,7 @@ def _print_figure_tex(\n             # set the paper size to the figure size if is_eps. The\n             # resulting ps file has the given size with correct bounding\n             # box so that there is no need to call 'pstoeps'\n-            if is_eps:\n+            if is_eps or papertype == 'figure':\n                 paper_width, paper_height = orientation.swap_if_landscape(\n                     self.figure.get_size_inches())\n             else:\n@@ -1160,9 +1152,14 @@ def gs_distill(tmpfile, eps=False, ptype='letter', bbox=None, rotated=False):\n     \"\"\"\n \n     if eps:\n-        paper_option = \"-dEPSCrop\"\n+        paper_option = [\"-dEPSCrop\"]\n+    elif ptype == \"figure\":\n+        # The bbox will have its lower-left corner at (0, 0), so upper-right\n+        # corner corresponds with paper size.\n+        paper_option = [f\"-dDEVICEWIDTHPOINTS={bbox[2]}\",\n+                        f\"-dDEVICEHEIGHTPOINTS={bbox[3]}\"]\n     else:\n-        paper_option = \"-sPAPERSIZE=%s\" % ptype\n+        paper_option = [f\"-sPAPERSIZE={ptype}\"]\n \n     psfile = tmpfile + '.ps'\n     dpi = mpl.rcParams['ps.distiller.res']\n@@ -1170,7 +1167,7 @@ def gs_distill(tmpfile, eps=False, ptype='letter', bbox=None, rotated=False):\n     cbook._check_and_log_subprocess(\n         [mpl._get_executable_info(\"gs\").executable,\n          \"-dBATCH\", \"-dNOPAUSE\", \"-r%d\" % dpi, \"-sDEVICE=ps2write\",\n-         paper_option, \"-sOutputFile=%s\" % psfile, tmpfile],\n+         *paper_option, f\"-sOutputFile={psfile}\", tmpfile],\n         _log)\n \n     os.remove(tmpfile)\n@@ -1196,6 +1193,16 @@ def xpdf_distill(tmpfile, eps=False, ptype='letter', bbox=None, rotated=False):\n     mpl._get_executable_info(\"gs\")  # Effectively checks for ps2pdf.\n     mpl._get_executable_info(\"pdftops\")\n \n+    if eps:\n+        paper_option = [\"-dEPSCrop\"]\n+    elif ptype == \"figure\":\n+        # The bbox will have its lower-left corner at (0, 0), so upper-right\n+        # corner corresponds with paper size.\n+        paper_option = [f\"-dDEVICEWIDTHPOINTS#{bbox[2]}\",\n+                        f\"-dDEVICEHEIGHTPOINTS#{bbox[3]}\"]\n+    else:\n+        paper_option = [f\"-sPAPERSIZE#{ptype}\"]\n+\n     with TemporaryDirectory() as tmpdir:\n         tmppdf = pathlib.Path(tmpdir, \"tmp.pdf\")\n         tmpps = pathlib.Path(tmpdir, \"tmp.ps\")\n@@ -1208,7 +1215,7 @@ def xpdf_distill(tmpfile, eps=False, ptype='letter', bbox=None, rotated=False):\n              \"-sAutoRotatePages#None\",\n              \"-sGrayImageFilter#FlateEncode\",\n              \"-sColorImageFilter#FlateEncode\",\n-             \"-dEPSCrop\" if eps else \"-sPAPERSIZE#%s\" % ptype,\n+             *paper_option,\n              tmpfile, tmppdf], _log)\n         cbook._check_and_log_subprocess(\n             [\"pdftops\", \"-paper\", \"match\", \"-level3\", tmppdf, tmpps], _log)\ndiff --git a/lib/matplotlib/rcsetup.py b/lib/matplotlib/rcsetup.py\n--- a/lib/matplotlib/rcsetup.py\n+++ b/lib/matplotlib/rcsetup.py\n@@ -441,13 +441,13 @@ def validate_ps_distiller(s):\n def _validate_papersize(s):\n     # Re-inline this validator when the 'auto' deprecation expires.\n     s = ValidateInStrings(\"ps.papersize\",\n-                          [\"auto\", \"letter\", \"legal\", \"ledger\",\n+                          [\"figure\", \"auto\", \"letter\", \"legal\", \"ledger\",\n                            *[f\"{ab}{i}\" for ab in \"ab\" for i in range(11)]],\n                           ignorecase=True)(s)\n     if s == \"auto\":\n         _api.warn_deprecated(\"3.8\", name=\"ps.papersize='auto'\",\n-                             addendum=\"Pass an explicit paper type, or omit the \"\n-                             \"*ps.papersize* rcParam entirely.\")\n+                             addendum=\"Pass an explicit paper type, figure, or omit \"\n+                             \"the *ps.papersize* rcParam entirely.\")\n     return s\n \n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -20,6 +20,7 @@\n \n # This tests tends to hit a TeX cache lock on AppVeyor.\n @pytest.mark.flaky(reruns=3)\n+@pytest.mark.parametrize('papersize', ['letter', 'figure'])\n @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])\n @pytest.mark.parametrize('format, use_log, rcParams', [\n     ('ps', False, {}),\n@@ -38,7 +39,19 @@\n     'eps afm',\n     'eps with usetex'\n ])\n-def test_savefig_to_stringio(format, use_log, rcParams, orientation):\n+def test_savefig_to_stringio(format, use_log, rcParams, orientation, papersize):\n+    if rcParams.get(\"ps.usedistiller\") == \"ghostscript\":\n+        try:\n+            mpl._get_executable_info(\"gs\")\n+        except mpl.ExecutableNotFoundError as exc:\n+            pytest.skip(str(exc))\n+    elif rcParams.get(\"ps.userdistiller\") == \"xpdf\":\n+        try:\n+            mpl._get_executable_info(\"gs\")  # Effectively checks for ps2pdf.\n+            mpl._get_executable_info(\"pdftops\")\n+        except mpl.ExecutableNotFoundError as exc:\n+            pytest.skip(str(exc))\n+\n     mpl.rcParams.update(rcParams)\n \n     fig, ax = plt.subplots()\n@@ -54,15 +67,15 @@ def test_savefig_to_stringio(format, use_log, rcParams, orientation):\n             title += \" \\N{MINUS SIGN}\\N{EURO SIGN}\"\n         ax.set_title(title)\n         allowable_exceptions = []\n-        if rcParams.get(\"ps.usedistiller\"):\n-            allowable_exceptions.append(mpl.ExecutableNotFoundError)\n         if rcParams.get(\"text.usetex\"):\n             allowable_exceptions.append(RuntimeError)\n         if rcParams.get(\"ps.useafm\"):\n             allowable_exceptions.append(mpl.MatplotlibDeprecationWarning)\n         try:\n-            fig.savefig(s_buf, format=format, orientation=orientation)\n-            fig.savefig(b_buf, format=format, orientation=orientation)\n+            fig.savefig(s_buf, format=format, orientation=orientation,\n+                        papertype=papersize)\n+            fig.savefig(b_buf, format=format, orientation=orientation,\n+                        papertype=papersize)\n         except tuple(allowable_exceptions) as exc:\n             pytest.skip(str(exc))\n \n@@ -71,6 +84,27 @@ def test_savefig_to_stringio(format, use_log, rcParams, orientation):\n         s_val = s_buf.getvalue().encode('ascii')\n         b_val = b_buf.getvalue()\n \n+        if format == 'ps':\n+            # Default figsize = (8, 6) inches = (576, 432) points = (203.2, 152.4) mm.\n+            # Landscape orientation will swap dimensions.\n+            if rcParams.get(\"ps.usedistiller\") == \"xpdf\":\n+                # Some versions specifically show letter/203x152, but not all,\n+                # so we can only use this simpler test.\n+                if papersize == 'figure':\n+                    assert b'letter' not in s_val.lower()\n+                else:\n+                    assert b'letter' in s_val.lower()\n+            elif rcParams.get(\"ps.usedistiller\") or rcParams.get(\"text.usetex\"):\n+                width = b'432.0' if orientation == 'landscape' else b'576.0'\n+                wanted = (b'-dDEVICEWIDTHPOINTS=' + width if papersize == 'figure'\n+                          else b'-sPAPERSIZE')\n+                assert wanted in s_val\n+            else:\n+                if papersize == 'figure':\n+                    assert b'%%DocumentPaperSizes' not in s_val\n+                else:\n+                    assert b'%%DocumentPaperSizes' in s_val\n+\n         # Strip out CreationDate: ghostscript and cairo don't obey\n         # SOURCE_DATE_EPOCH, and that environment variable is already tested in\n         # test_determinism.\n",
  "problem_statement": "Postscript backend gives wrong page sizes\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nWhen creating a Figure of exactly A4 size, the PS backend chooses \"letter\" as document type, leading to additional borders of the output in x direction and undesired cropping in y direction.\r\n\r\n**Code for reproduction**\r\n\r\n```python\r\nimport matplotlib as mpl\r\nmpl.use(\"PS\")\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\n# Use \"exact\" A4 paper size in inches as used in PS backend.\r\n\r\n# In fact, it is wrong, because it is rounded to only two digits,\r\n# where actually the ISO standardized values (ISO 216) are given\r\n# in millimeters.\r\n\r\nA4_SIZE_IN = (8.27, 11.69)\r\n\r\ndef get_empty_page(figsize):\r\n    fig, ax = plt.subplots(\r\n        subplot_kw={\r\n            \"position\": (0, 0, 1, 1),\r\n            \"autoscale_on\": False,\r\n            \"xmargin\": 0,\r\n            \"ymargin\": 0,\r\n        },\r\n        figsize=figsize\r\n    )\r\n    fig.dpi = 72\r\n    ax.tick_params(direction=\"in\")\r\n    ax.set_axis_off()  # turns off ticks, labels, frame, grid\r\n    return fig, ax\r\n\r\nfig, ax = get_empty_page(figsize=A4_SIZE_IN)\r\n\r\n# Put blue circles exactly in the corners of the figure.\r\n# They shall appear as quarter circles in the output.\r\nax.plot([0, 1], [1, 0], \"bo\", ms=100)\r\n\r\nfig.savefig(\"size_wo_papertype.ps\")\r\nfig.savefig(\"size_w_papertype.ps\", papertype=\"a4\")\r\n```\r\n\r\n**Actual outcome**\r\n\r\nWhen not specifying the papertype explicitly, the PS backend chooses \"letter\" format as can be seen from the resulting postscript output. It should, instead, choose A4 format. When specifying the papertype explicitly, the output looks fine.\r\n\r\n\r\n**Expected outcome**\r\n\r\nThe PS backend should choose A4 format if the Figure is exactly this size. Anyway, nothing should ever be cropped off the Figure. If the Figure does not fit one papertype, the next larger one should be chosen.\r\nI also do not understand why the output of the PS backend is restricted to a handfull of explicit paper sizes in the first place. Postscript does well support arbitrary page sizes. Can someone explain why matplotlib chose to only support the given sizes? This is not transparent to the user, who expects to get output of exactly the size of his/her desired Figure object.\r\n\r\n**Matplotlib version**\r\n  * Operating system: Ubuntu 19.04\r\n  * Matplotlib version: 3.1.1\r\n  * Matplotlib backend: PS\r\n  * Python version: 3.7.4\r\n  * Jupyter version: 1.0.0\r\n  * Other libraries: \r\n\r\nMatplotlib was installed via conda.\r\n\n",
  "hints_text": "This appears to have been added in 8b01579 without explaining why (before that commit, ps simply did not set the DocumentPaperSize entry).\r\nI agree there's no particular reason to restrict postscript output to a fixed number of sizes; conversely other output formats (in particular, pdf) may benefit from this kind of sizing-to-papersize.  So as always, the main remaining question is what would be a better API and how do we do the transition...\nThanks, @anntzer for your thoughts on this! In my opinion, the default output size should be `Figure.size` in all cases. This is also what the user knows from other backends.\r\nWhether or not there is the additional option to provide different predefined output sizes (for example for printing on paper) is, indeed, a different question.\nI agree with you.\r\nOne possible way forward (for example) may be (I haven't ironed out the details) to extend rcParams[\"savefig.bbox\"] (currently just \"bbox\" or \"standard\") to also support other papersizes (either a name (\"A4\", etc.) or a pair of floats (width, height)), and likewise for the `bbox_inches` kwarg to savefig(), and deprecate rcParams[\"ps.papersize\"].\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!",
  "created_at": "2023-08-09T09:45:45Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-portrait-figure]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-landscape-figure]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-portrait-figure]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-landscape-figure]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-portrait-letter]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-landscape-letter]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-portrait-letter]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-landscape-letter]\", \"lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps\", \"lib/matplotlib/tests/test_backend_ps.py::test_patheffects\", \"lib/matplotlib/tests/test_backend_ps.py::test_transparency[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_bbox\", \"lib/matplotlib/tests/test_backend_ps.py::test_failing_latex\", \"lib/matplotlib/tests/test_backend_ps.py::test_useafm[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_type3_font[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_colored_hatch_zero_linewidth[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_text_clip[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_d_glyph\", \"lib/matplotlib/tests/test_backend_ps.py::test_type42_font_without_prep[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_fonttype[3]\", \"lib/matplotlib/tests/test_backend_ps.py::test_fonttype[42]\", \"lib/matplotlib/tests/test_backend_ps.py::test_linedash\", \"lib/matplotlib/tests/test_backend_ps.py::test_empty_line\", \"lib/matplotlib/tests/test_backend_ps.py::test_no_duplicate_definition\", \"lib/matplotlib/tests/test_backend_ps.py::test_path_collection[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_colorbar_shift[eps]\", \"lib/matplotlib/tests/test_backend_ps.py::test_auto_papersize_deprecation\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.833944",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}