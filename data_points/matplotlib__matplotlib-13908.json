{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-13908",
  "base_commit": "dd18211687623c5fa57658990277440814d422f0",
  "patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -723,6 +723,8 @@ def __init__(self, axes, pickradius=15):\n             `.Axis.contains`.\n         \"\"\"\n         martist.Artist.__init__(self)\n+        self._remove_overlapping_locs = True\n+\n         self.set_figure(axes.figure)\n \n         self.isDefault_label = True\n@@ -754,6 +756,17 @@ def __init__(self, axes, pickradius=15):\n     majorTicks = _LazyTickList(major=True)\n     minorTicks = _LazyTickList(major=False)\n \n+    def get_remove_overlapping_locs(self):\n+        return self._remove_overlapping_locs\n+\n+    def set_remove_overlapping_locs(self, val):\n+        self._remove_overlapping_locs = bool(val)\n+\n+    remove_overlapping_locs = property(\n+        get_remove_overlapping_locs, set_remove_overlapping_locs,\n+        doc=('If minor ticker locations that overlap with major '\n+             'ticker locations should be trimmed.'))\n+\n     def set_label_coords(self, x, y, transform=None):\n         \"\"\"\n         Set the coordinates of the label.\n@@ -1064,23 +1077,29 @@ def _update_ticks(self):\n         Update ticks (position and labels) using the current data interval of\n         the axes.  Return the list of ticks that will be drawn.\n         \"\"\"\n-\n-        major_locs = self.major.locator()\n-        major_ticks = self.get_major_ticks(len(major_locs))\n+        major_locs = self.get_majorticklocs()\n         major_labels = self.major.formatter.format_ticks(major_locs)\n+        major_ticks = self.get_major_ticks(len(major_locs))\n+        self.major.formatter.set_locs(major_locs)\n         for tick, loc, label in zip(major_ticks, major_locs, major_labels):\n             tick.update_position(loc)\n             tick.set_label1(label)\n             tick.set_label2(label)\n-        minor_locs = self.minor.locator()\n-        minor_ticks = self.get_minor_ticks(len(minor_locs))\n+        minor_locs = self.get_minorticklocs()\n         minor_labels = self.minor.formatter.format_ticks(minor_locs)\n+        minor_ticks = self.get_minor_ticks(len(minor_locs))\n+        self.minor.formatter.set_locs(minor_locs)\n         for tick, loc, label in zip(minor_ticks, minor_locs, minor_labels):\n             tick.update_position(loc)\n             tick.set_label1(label)\n             tick.set_label2(label)\n         ticks = [*major_ticks, *minor_ticks]\n \n+        # mark the ticks that we will not be using as not visible\n+        for t in (self.minorTicks[len(minor_locs):] +\n+                  self.majorTicks[len(major_locs):]):\n+            t.set_visible(False)\n+\n         view_low, view_high = self.get_view_interval()\n         if view_low > view_high:\n             view_low, view_high = view_high, view_low\n@@ -1322,9 +1341,10 @@ def get_minorticklocs(self):\n         # Use the transformed view limits as scale.  1e-5 is the default rtol\n         # for np.isclose.\n         tol = (hi - lo) * 1e-5\n-        minor_locs = [\n-            loc for loc, tr_loc in zip(minor_locs, tr_minor_locs)\n-            if not np.isclose(tr_loc, tr_major_locs, atol=tol, rtol=0).any()]\n+        if self.remove_overlapping_locs:\n+            minor_locs = [\n+                loc for loc, tr_loc in zip(minor_locs, tr_minor_locs)\n+                if ~np.isclose(tr_loc, tr_major_locs, atol=tol, rtol=0).any()]\n         return minor_locs\n \n     def get_ticklocs(self, minor=False):\n@@ -1390,7 +1410,7 @@ def get_minor_formatter(self):\n     def get_major_ticks(self, numticks=None):\n         'Get the tick instances; grow as necessary.'\n         if numticks is None:\n-            numticks = len(self.get_major_locator()())\n+            numticks = len(self.get_majorticklocs())\n \n         while len(self.majorTicks) < numticks:\n             # Update the new tick label properties from the old.\n@@ -1404,7 +1424,7 @@ def get_major_ticks(self, numticks=None):\n     def get_minor_ticks(self, numticks=None):\n         'Get the minor tick instances; grow as necessary.'\n         if numticks is None:\n-            numticks = len(self.get_minor_locator()())\n+            numticks = len(self.get_minorticklocs())\n \n         while len(self.minorTicks) < numticks:\n             # Update the new tick label properties from the old.\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_ticker.py b/lib/matplotlib/tests/test_ticker.py\n--- a/lib/matplotlib/tests/test_ticker.py\n+++ b/lib/matplotlib/tests/test_ticker.py\n@@ -923,3 +923,49 @@ def minorticksubplot(xminor, yminor, i):\n     minorticksubplot(True, False, 2)\n     minorticksubplot(False, True, 3)\n     minorticksubplot(True, True, 4)\n+\n+\n+@pytest.mark.parametrize('remove_overlapping_locs, expected_num',\n+                         ((True, 6),\n+                          (None, 6),  # this tests the default\n+                          (False, 9)))\n+def test_remove_overlap(remove_overlapping_locs, expected_num):\n+    import numpy as np\n+    import matplotlib.dates as mdates\n+\n+    t = np.arange(\"2018-11-03\", \"2018-11-06\", dtype=\"datetime64\")\n+    x = np.ones(len(t))\n+\n+    fig, ax = plt.subplots()\n+    ax.plot(t, x)\n+\n+    ax.xaxis.set_major_locator(mdates.DayLocator())\n+    ax.xaxis.set_major_formatter(mdates.DateFormatter('\\n%a'))\n+\n+    ax.xaxis.set_minor_locator(mdates.HourLocator((0, 6, 12, 18)))\n+    ax.xaxis.set_minor_formatter(mdates.DateFormatter('%H:%M'))\n+    # force there to be extra ticks\n+    ax.xaxis.get_minor_ticks(15)\n+    if remove_overlapping_locs is not None:\n+        ax.xaxis.remove_overlapping_locs = remove_overlapping_locs\n+\n+    # check that getter/setter exists\n+    current = ax.xaxis.remove_overlapping_locs\n+    assert (current == ax.xaxis.get_remove_overlapping_locs())\n+    plt.setp(ax.xaxis, remove_overlapping_locs=current)\n+    new = ax.xaxis.remove_overlapping_locs\n+    assert (new == ax.xaxis.remove_overlapping_locs)\n+\n+    # check that the accessors filter correctly\n+    # this is the method that does the actual filtering\n+    assert len(ax.xaxis.get_minorticklocs()) == expected_num\n+    # these three are derivative\n+    assert len(ax.xaxis.get_minor_ticks()) == expected_num\n+    assert len(ax.xaxis.get_minorticklabels()) == expected_num\n+    assert len(ax.xaxis.get_minorticklines()) == expected_num*2\n+\n+    # force a draw to call _update_ticks under the hood\n+    fig.canvas.draw()\n+    # check that the correct number of ticks report them selves as\n+    # visible\n+    assert sum(t.get_visible() for t in ax.xaxis.minorTicks) == expected_num\n",
  "problem_statement": "Minor ticklabels are missing at positions of major ticks.\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nMinor ticklabels are missing at positions of major ticks.\r\n\r\n**Code for reproduction**\r\n\r\n```\r\nimport numpy as np\r\nimport matplotlib.dates as mdates\r\nimport matplotlib.pyplot as plt\r\n\r\nt = np.arange(\"2018-11-03\", \"2018-11-06\", dtype=\"datetime64\")\r\nx = np.random.rand(len(t))\r\n\r\nfig, ax = plt.subplots()\r\nax.plot(t,x)\r\n\r\nax.xaxis.set_major_locator(mdates.DayLocator())\r\nax.xaxis.set_major_formatter(mdates.DateFormatter('\\n%a'))\r\n\r\nax.xaxis.set_minor_locator(mdates.HourLocator((0,6,12,18)))\r\nax.xaxis.set_minor_formatter(mdates.DateFormatter('%H:%M'))\r\n\r\nplt.show()\r\n```\r\n\r\n**Actual outcome**\r\n\r\nThe above code run with current master produces\r\n\r\n![image](https://user-images.githubusercontent.com/23121882/53986707-332eaf80-411f-11e9-9d0b-4d1df4bae02a.png)\r\n\r\nThe minor ticklabels showing the `00:00` hours are missing.\r\n\r\n**Expected outcome**\r\n\r\nThe expected outcome would be the same as when running the code with matplotlib 3.0.2 or below:\r\n\r\n![image](https://user-images.githubusercontent.com/23121882/53986815-7b4dd200-411f-11e9-84d2-e820792bf6ce.png)\r\n\r\nI would expect to see the hours throughout.\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: Win8\r\n  * Matplotlib version: master\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): any\r\n  * Python version: 3.6\r\n\r\n\n",
  "hints_text": "There is no minor tick there anymore so there won’t be a label. What’s wrong w putting the HH:MM in the major label?\nActually, I don't think there is anything wrong with that. It's more that the previous code suddenly broke. Was this an intentional change? \nYes though I’m on my phone and can’t look up the PRs.  Recent ones by @anntzer and or myself.  Basically minor ticks no longer include major ticks.   So no more over strike on the ticking and no more heuristic guessing if a labeled minor tick is really a major tick.  \nYes, that comes from https://github.com/matplotlib/matplotlib/pull/13314.  I guess this could have been better documented; on the other hand the issue that #13314 fixed did keep coming up again and again, so trying to play whack-a-mole by fixing it one locator at a time is a bit an endless task.\r\n\r\nNote that in the example here, your formatters are actually not really independent from one another (you need to embed the newline in the major formatter), so I think the solution with the new API (`ax.xaxis.set_major_formatter(mdates.DateFormatter('%H%M\\n%a'))` looks just fine.  (But yes, I acknowledge it's an API break.)\nI see. Now reading the API change note, \"Minor Locator no longer try to avoid overstriking major Locators\", it seems to tell me the opposite, because obviously the minor locator does avoid the major locations. \r\n\r\nMay I suggest to write an additional what's new entry that is understandable by normal people and shows what is changed and why that is?\nDo you want to give it a try?  You are obviously more aware of the cases that have been broken.  (If not I'll do it, that's fine too.)\nIs there any way to revert back to the old behaviour?\nRight now, no.  Could perhaps be switched with a new flag (with the note that in that case, even loglocators don't try to avoid crashing minor and major ticks).\nFor a what's new entry maybe show the effect as follows:\r\n\r\n```\r\nax.xaxis.set_major_locator(mticker.MultipleLocator(10))\r\nax.xaxis.set_minor_locator(mticker.MultipleLocator(2))\r\nax.xaxis.set_minor_formatter(mticker.ScalarFormatter())\r\nax.grid(which=\"both\", axis=\"x\")\r\n```\r\npreviously:  \r\n![majorminorchange_3 0 2](https://user-images.githubusercontent.com/23121882/53999892-84ea3080-4145-11e9-8409-e97551b0f3ca.png)\r\n\r\nnow:  \r\n![majorminorchange_3 0 2 post1846 gfd40d7d74](https://user-images.githubusercontent.com/23121882/53999898-8b78a800-4145-11e9-95fe-e682117fc982.png)\r\n\r\nI mean this really looks like a great improvement, but maybe someone relies on the major and minor ticks/grids overlapping? \nI think a what's new entry would still be useful, since noone reads API change notes. (Reading through the recent [API changes](https://matplotlib.org/api/api_changes.html#api-changes-for-3-0-0) actually a lot of them should have been mentionned in the what's new section?! Or maybe I don't quite understand the difference between what's new and API change notes?)\r\n\r\n\r\nAlso, how do you revert this change? Previously you could still write your own ticker in order not to tick some locations. Arguably, the new behaviour is much better for most standard cases. However for special cases, with this change, you cannot write any ticker to force a tick at a specific location if it happens to be part of the major ticks. Not even a `FixedLocator` will work, right? \r\n\r\nConcrete example:\r\n\r\n```\r\nax.set_xticks([0.2], minor=True)\r\nax.grid(which=\"minor\", axis=\"x\")\r\n```\r\n\r\npreviously:\r\n![image](https://user-images.githubusercontent.com/23121882/54054874-b3bae200-41eb-11e9-8f2c-1a431d503c81.png)\r\n\r\nnow:\r\n\r\n![image](https://user-images.githubusercontent.com/23121882/54054913-ccc39300-41eb-11e9-9ad8-8795f263fa31.png)\r\n\r\nQuestion: How to get the gridline back?\nI’m not opposed to having a way to get all the ticks back, but I’m not clear on what the practical problem is versus a theoretical one.   If you need a bunch of vertical lines at arbitrary locations axvline does that for you.  This makes all the practical cases much better at the cost of a few obscure cases being a bit harder.  I’d need a bit more to convince me that adding API to toggle this behaviour is worth the fuss. \r\n\r\nI think what’s new is for new features.  API changes is for changes to existing features.  At least in my mind.  OTOH Id support merging these two under what’s new and just labelling the API changes as such.  \n> I’m not clear on what the practical problem is versus a theoretical one. \r\n\r\nThat *is* a theoretical problem indeed. You type something in (`ax.set_xticks(..)`) and don't get out what you asked for, like\r\n\r\n```\r\nyou > Please give me a tick at position 0.2\r\ninterpreter > Na, I don't feel like doing that is a good idea; I will ignore your command.\r\n```\r\n\r\n> If you need a bunch of vertical lines at arbitrary locations axvline does that for you. \r\n\r\nSure, there is no need for `.grid` at all, given that there is a `Line2D` object available.\r\n\r\n\r\n> I think what’s new is for new features. API changes is for changes to existing features. \r\n\r\nI think I would argue that things like  \"Hey look, we've fixed this long standing bug.\" or \"If you use good old command `x` your plot will now look like `y`.\" are still somehow *news* people are interested in reading the What's new section.\r\n\n> interpreter > Na, I don't feel like doing that is a good idea; I will ignore your command.\r\n\r\nThats correct - #13314 says that minor ticks are exclusive of major ticks by definition, so if you ask to put a minor tick where a major tick is, you won't get it.  \r\n\r\nI'm still not clear what the use-case is, but if you need to hack around this definition: \r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax =plt.subplots()\r\nax.set_xticks([0.2001], minor=True)\r\nax.grid(which=\"minor\", axis=\"x\")\r\nplt.show()\r\n```\r\n\r\nthough I note that going more decimal places (0.20001) excludes the tick, which seems a bit too much slop...  (well, its `rtol=1e-5`)\nOn my phone but note that #11575 is close to (though not exactly) the opposite of what @ImportanceOfBeingErnest mentioned above: users were complaining that set_xticks did not cause the minor ticks to be excluded from colliding locations. \nThe fact that log scales use major and minor locators is more an implementation detail, #11575 could be solved differently as well. In general, I'm not at all opposing the **default** Locators to exclude minor ticks at major tick positions. \r\n\r\nIf the decision is indeed to redefine the notions of major and minor in the sense of *\"minor ticks are exclusive of major ticks by definition\"*, that *is* a major change in the semantics and a \"What's new\" entry is the very least one needs for that. \nI don't mind moving/duplicating the api_changes to the whatsnew.\r\nIf you want to put up an alternate PR to fix issue #11575 and the other similar issues, and revert #13314, I won't block it either.\r\nHaving a different behavior for default and nondefault locators (what's even a \"default\" locator?) seems strange, though.\nBy \"default\" I meant all those cases where the user does not type in `.set_minor_locator` or `.set_xticks`; that would in addition to normal plots be e.g. `plt.semilogy`, `plt.plot(<list of datetimes>)` etc. \r\nBut I fully agree that different behaviour is in general undesired. I also acknowledge that this change is useful for all but a few edge cases. \r\nIt's really more a principle thing: major and minor locators are not independent of each other any more. (A use case would be the original issue where in addition you use a different color or font(size) for the major and minor labels.) \r\n\r\nThe best would be an opt-out option for this behaviour. (But I currently wouldn't know where to put that. In the locators? In the axes?)  \r\nIf people really think, that is not necessary, adding a note in the what's new/Api change that says something like *\"We feel this change best reflects how people would use major and minor locators; however if you have a usecase where this is causes problems, please do file a report on the issue tracker.\"* might be the way to go.\n> By \"default\" I meant all those cases where the user does not type in .set_minor_locator or .set_xticks; \r\n\r\nBut all #11575 *is* a case where the user uses set_xticks but wants collision suppression...\r\n\r\n> A use case would be the original issue where in addition you use a different color or font(size) for the major and minor labels.\r\n\r\nThe real fix would be to allow text objects with variable color or size (I mean, here you can have two different colors (major/minor) but not three, so that's clearly a hack).\r\n\r\n-----\r\n\r\nCan you open a PR to add whatever note you want to the api_changes and possibly move it to the whatsnew?  I think we should try to keep this as is, and, if there's too much pushback against it, we can consider adding the opt-out in a future release.\n> Can you open a PR [...] ?\r\n\r\nNo sorry, I can't. I did try and it came out too sarcastic to be publishable. \nDo you want to block 3.1 over that?  (That's fine with me, but you need to ask for it :))\nNo, I don't want to block 3.1 over this. I gave some arguments above, and if they are not shared by others, I might simply be wrong in my analysis. \nOK, let's just ping @tacaswell to get his opinion as well then, if he wants to chime in before the 3.1 release.\nSuggest we add to tomorrow’s agenda.  \nDiscussed on call\r\n\r\nhttps://paper.dropbox.com/doc/Matplotlib-2019-meeting-agenda--AaCmZlKDONJlV5crSSBPDIBjAg-aAmENlkgepgsMeDZtlsYu#:h2=13618:-Minor-tick-supression-w\r\n\r\nPrimary plan is to try to add a public API for controlling the de-confliction\r\nBackup plan is to revert this and try again for 3.2",
  "created_at": "2019-04-09T02:29:24Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_ticker.py::test_remove_overlap[True-6]\", \"lib/matplotlib/tests/test_ticker.py::test_remove_overlap[None-6]\", \"lib/matplotlib/tests/test_ticker.py::test_remove_overlap[False-9]\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_ticker.py::TestMaxNLocator::test_basic[20-100-expected0]\", \"lib/matplotlib/tests/test_ticker.py::TestMaxNLocator::test_basic[0.001-0.0001-expected1]\", \"lib/matplotlib/tests/test_ticker.py::TestMaxNLocator::test_basic[-1000000000000000.0-1000000000000000.0-expected2]\", \"lib/matplotlib/tests/test_ticker.py::TestMaxNLocator::test_basic[0-8.5e-51-expected3]\", \"lib/matplotlib/tests/test_ticker.py::TestMaxNLocator::test_basic[-8.5e-51-0-expected4]\", \"lib/matplotlib/tests/test_ticker.py::TestMaxNLocator::test_integer[-0.1-1.1-None-expected0]\", \"lib/matplotlib/tests/test_ticker.py::TestMaxNLocator::test_integer[-0.1-0.95-None-expected1]\", \"lib/matplotlib/tests/test_ticker.py::TestMaxNLocator::test_integer[1-55-steps2-expected2]\", \"lib/matplotlib/tests/test_ticker.py::TestLinearLocator::test_basic\", \"lib/matplotlib/tests/test_ticker.py::TestLinearLocator::test_set_params\", \"lib/matplotlib/tests/test_ticker.py::TestMultipleLocator::test_basic\", \"lib/matplotlib/tests/test_ticker.py::TestMultipleLocator::test_view_limits\", \"lib/matplotlib/tests/test_ticker.py::TestMultipleLocator::test_view_limits_round_numbers\", \"lib/matplotlib/tests/test_ticker.py::TestMultipleLocator::test_set_params\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_basic\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_low_number_of_majorticks[0-0]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_low_number_of_majorticks[1-0]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_using_all_default_major_steps\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_number_of_minor_ticks[1-5]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_number_of_minor_ticks[2-4]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_number_of_minor_ticks[2.5-5]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_number_of_minor_ticks[5-5]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_number_of_minor_ticks[10-5]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_additional[lim0-ref0]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_additional[lim1-ref1]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_additional[lim2-ref2]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_additional[lim3-ref3]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_additional[lim4-ref4]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_additional[lim5-ref5]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_additional[lim6-ref6]\", \"lib/matplotlib/tests/test_ticker.py::TestAutoMinorLocator::test_additional[lim7-ref7]\", \"lib/matplotlib/tests/test_ticker.py::TestLogLocator::test_basic\", \"lib/matplotlib/tests/test_ticker.py::TestLogLocator::test_switch_to_autolocator\", \"lib/matplotlib/tests/test_ticker.py::TestLogLocator::test_set_params\", \"lib/matplotlib/tests/test_ticker.py::TestNullLocator::test_set_params\", \"lib/matplotlib/tests/test_ticker.py::TestLogitLocator::test_set_params\", \"lib/matplotlib/tests/test_ticker.py::TestFixedLocator::test_set_params\", \"lib/matplotlib/tests/test_ticker.py::TestIndexLocator::test_set_params\", \"lib/matplotlib/tests/test_ticker.py::TestSymmetricalLogLocator::test_set_params\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[123-189-0]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[-189--123-0]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[12341-12349-12340]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[-12349--12341--12340]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[99999.5-100010.5-100000]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[-100010.5--99999.5--100000]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[99990.5-100000.5-100000]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[-100000.5--99990.5--100000]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[1233999-1234001-1234000]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[-1234001--1233999--1234000]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[1-1-1]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[123-123-0]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[0.4538-0.4578-0.45]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[3789.12-3783.1-3780]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[45124.3-45831.75-45000]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[0.000721-0.0007243-0.00072]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[12592.82-12591.43-12590]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[9.0-12.0-0]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[900.0-1200.0-0]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[1900.0-1200.0-0]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[0.99-1.01-1]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[9.99-10.01-10]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[99.99-100.01-100]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[5.99-6.01-6]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[15.99-16.01-16]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[-0.452-0.492-0]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[-0.492-0.492-0]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[12331.4-12350.5-12300]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_offset_value[-12335.3-12335.3-0]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_use_offset[True]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_use_offset[False]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[False-scilimits0-lim0-0-False]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits1-lim1-0-False]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits2-lim2-0-False]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits3-lim3-2-False]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits4-lim4-2-False]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits5-lim5--3-False]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits7-lim7-5-False]\", \"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits8-lim8-6-False]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[2.0-True-4-locs0-positions0-expected0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[2.0-False-10-locs1-positions1-expected1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[2.0-False-50-locs2-positions2-expected2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[5.0-True-4-locs0-positions0-expected0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[5.0-False-10-locs1-positions1-expected1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[5.0-False-50-locs2-positions2-expected2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[10.0-True-4-locs0-positions0-expected0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[10.0-False-10-locs1-positions1-expected1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[10.0-False-50-locs2-positions2-expected2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[3.141592653589793-True-4-locs0-positions0-expected0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[3.141592653589793-False-10-locs1-positions1-expected1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[3.141592653589793-False-50-locs2-positions2-expected2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[2.718281828459045-True-4-locs0-positions0-expected0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[2.718281828459045-False-10-locs1-positions1-expected1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_basic[2.718281828459045-False-50-locs2-positions2-expected2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterExponent::test_blank\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterMathtext::test_min_exponent[0-1-$\\\\\\\\mathdefault{10^{0}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterMathtext::test_min_exponent[0-0.01-$\\\\\\\\mathdefault{10^{-2}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterMathtext::test_min_exponent[0-100.0-$\\\\\\\\mathdefault{10^{2}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterMathtext::test_min_exponent[3-1-$\\\\\\\\mathdefault{1}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterMathtext::test_min_exponent[3-0.01-$\\\\\\\\mathdefault{0.01}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterMathtext::test_min_exponent[3-100.0-$\\\\\\\\mathdefault{100}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterMathtext::test_min_exponent[3-0.001-$\\\\\\\\mathdefault{10^{-3}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterMathtext::test_min_exponent[3-1000.0-$\\\\\\\\mathdefault{10^{3}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[2-0.03125-$\\\\\\\\mathdefault{2^{-5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[2-1-$\\\\\\\\mathdefault{2^{0}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[2-32-$\\\\\\\\mathdefault{2^{5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[2-0.0375-$\\\\\\\\mathdefault{1.2\\\\\\\\times2^{-5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[2-1.2-$\\\\\\\\mathdefault{1.2\\\\\\\\times2^{0}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[2-38.4-$\\\\\\\\mathdefault{1.2\\\\\\\\times2^{5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10--1-$\\\\\\\\mathdefault{-10^{0}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10-1e-05-$\\\\\\\\mathdefault{10^{-5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10-1-$\\\\\\\\mathdefault{10^{0}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10-100000-$\\\\\\\\mathdefault{10^{5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10-2e-05-$\\\\\\\\mathdefault{2\\\\\\\\times10^{-5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10-2-$\\\\\\\\mathdefault{2\\\\\\\\times10^{0}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10-200000-$\\\\\\\\mathdefault{2\\\\\\\\times10^{5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10-5e-05-$\\\\\\\\mathdefault{5\\\\\\\\times10^{-5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10-5-$\\\\\\\\mathdefault{5\\\\\\\\times10^{0}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatterSciNotation::test_basic[10-500000-$\\\\\\\\mathdefault{5\\\\\\\\times10^{5}}$]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654e-05-0.001-3.142e-5]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0003141592654-0.001-3.142e-4]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.003141592654-0.001-3.142e-3]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.03141592654-0.001-3.142e-2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.3141592654-0.001-3.142e-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654-0.001-3.142]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31.41592654-0.001-3.142e1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314.1592654-0.001-3.142e2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3141.592654-0.001-3.142e3]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31415.92654-0.001-3.142e4]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314159.2654-0.001-3.142e5]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1e-05-0.001-1e-5]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0001-0.001-1e-4]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.001-0.001-1e-3]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.01-0.001-1e-2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.1-0.001-1e-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1-0.001-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10-0.001-10]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100-0.001-100]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1000-0.001-1000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10000-0.001-1e4]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100000-0.001-1e5]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654e-05-0.015-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0003141592654-0.015-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.003141592654-0.015-0.003]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.03141592654-0.015-0.031]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.3141592654-0.015-0.314]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654-0.015-3.142]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31.41592654-0.015-31.416]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314.1592654-0.015-314.159]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3141.592654-0.015-3141.593]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31415.92654-0.015-31415.927]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314159.2654-0.015-314159.265]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1e-05-0.015-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0001-0.015-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.001-0.015-0.001]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.01-0.015-0.01]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.1-0.015-0.1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1-0.015-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10-0.015-10]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100-0.015-100]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1000-0.015-1000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10000-0.015-10000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100000-0.015-100000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654e-05-0.5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0003141592654-0.5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.003141592654-0.5-0.003]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.03141592654-0.5-0.031]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.3141592654-0.5-0.314]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654-0.5-3.142]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31.41592654-0.5-31.416]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314.1592654-0.5-314.159]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3141.592654-0.5-3141.593]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31415.92654-0.5-31415.927]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314159.2654-0.5-314159.265]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1e-05-0.5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0001-0.5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.001-0.5-0.001]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.01-0.5-0.01]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.1-0.5-0.1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1-0.5-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10-0.5-10]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100-0.5-100]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1000-0.5-1000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10000-0.5-10000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100000-0.5-100000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654e-05-5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0003141592654-5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.003141592654-5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.03141592654-5-0.03]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.3141592654-5-0.31]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654-5-3.14]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31.41592654-5-31.42]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314.1592654-5-314.16]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3141.592654-5-3141.59]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31415.92654-5-31415.93]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314159.2654-5-314159.27]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1e-05-5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0001-5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.001-5-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.01-5-0.01]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.1-5-0.1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1-5-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10-5-10]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100-5-100]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1000-5-1000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10000-5-10000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100000-5-100000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654e-05-100-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0003141592654-100-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.003141592654-100-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.03141592654-100-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.3141592654-100-0.3]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654-100-3.1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31.41592654-100-31.4]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314.1592654-100-314.2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3141.592654-100-3141.6]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31415.92654-100-31415.9]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314159.2654-100-314159.3]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1e-05-100-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0001-100-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.001-100-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.01-100-0]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.1-100-0.1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1-100-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10-100-10]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100-100-100]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1000-100-1000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10000-100-10000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100000-100-100000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654e-05-1000000.0-3.1e-5]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0003141592654-1000000.0-3.1e-4]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.003141592654-1000000.0-3.1e-3]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.03141592654-1000000.0-3.1e-2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.3141592654-1000000.0-3.1e-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3.141592654-1000000.0-3.1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31.41592654-1000000.0-3.1e1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314.1592654-1000000.0-3.1e2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[3141.592654-1000000.0-3.1e3]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[31415.92654-1000000.0-3.1e4]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[314159.2654-1000000.0-3.1e5]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1e-05-1000000.0-1e-5]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.0001-1000000.0-1e-4]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.001-1000000.0-1e-3]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.01-1000000.0-1e-2]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[0.1-1000000.0-1e-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1-1000000.0-1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10-1000000.0-10]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100-1000000.0-100]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[1000-1000000.0-1000]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[10000-1000000.0-1e4]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_pprint[100000-1000000.0-1e5]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_sublabel\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_LogFormatter_call[1]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_LogFormatter_call[10]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_LogFormatter_call[100]\", \"lib/matplotlib/tests/test_ticker.py::TestLogFormatter::test_LogFormatter_call[1000]\", \"lib/matplotlib/tests/test_ticker.py::TestFormatStrFormatter::test_basic\", \"lib/matplotlib/tests/test_ticker.py::TestStrMethodFormatter::test_basic[{x:05d}-input0-00002]\", \"lib/matplotlib/tests/test_ticker.py::TestStrMethodFormatter::test_basic[{x:03d}-{pos:02d}-input1-002-01]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[False--1234.56789-expected0]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True--1234.56789-expected1]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[False--1.23456789-expected2]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True--1.23456789-expected3]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[False--0.123456789-expected4]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True--0.123456789-expected5]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[False--0.00123456789-expected6]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True--0.00123456789-expected7]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True--0.0-expected8]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-0-expected9]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-0-expected10]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-1.23456789e-06-expected11]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-0.123456789-expected12]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-0.1-expected13]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-1-expected14]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-1.23456789-expected15]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-999.9-expected16]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-999.9999-expected17]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[False--999.9999-expected18]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True--999.9999-expected19]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-1000-expected20]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-1001-expected21]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-100001-expected22]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-987654.321-expected23]\", \"lib/matplotlib/tests/test_ticker.py::TestEngFormatter::test_params[True-1.23e+27-expected24]\", \"lib/matplotlib/tests/test_ticker.py::test_engformatter_usetex_useMathText\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_basic[decimals=0,\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_basic[decimals=1,\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_basic[autodecimal,\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_basic[None\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_basic[Empty\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_basic[Custom\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_latex[False-False-50\\\\\\\\{t}%]\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_latex[False-True-50\\\\\\\\\\\\\\\\\\\\\\\\{t\\\\\\\\}\\\\\\\\%]\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_latex[True-False-50\\\\\\\\{t}%]\", \"lib/matplotlib/tests/test_ticker.py::TestPercentFormatter::test_latex[True-True-50\\\\\\\\{t}%]\", \"lib/matplotlib/tests/test_ticker.py::test_majformatter_type\", \"lib/matplotlib/tests/test_ticker.py::test_minformatter_type\", \"lib/matplotlib/tests/test_ticker.py::test_majlocator_type\", \"lib/matplotlib/tests/test_ticker.py::test_minlocator_type\", \"lib/matplotlib/tests/test_ticker.py::test_minorticks_rc\"]",
  "environment_setup_commit": "d0628598f8d9ec7b0da6b60e7b29be2067b6ea17",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.784770",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}