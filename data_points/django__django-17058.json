{
  "repo": "django/django",
  "instance_id": "django__django-17058",
  "base_commit": "98cfb90182a8baa806fc4e09e294b6cfc5d09eff",
  "patch": "diff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -27,6 +27,11 @@ class BaseDatabaseFeatures:\n     # Does the backend allow inserting duplicate rows when a unique_together\n     # constraint exists and some fields are nullable but not all of them?\n     supports_partially_nullable_unique_constraints = True\n+\n+    # Does the backend supports specifying whether NULL values should be\n+    # considered distinct in unique constraints?\n+    supports_nulls_distinct_unique_constraints = False\n+\n     # Does the backend support initially deferrable unique constraints?\n     supports_deferrable_unique_constraints = False\n \ndiff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -129,7 +129,7 @@ class BaseDatabaseSchemaEditor:\n     )\n     sql_create_unique_index = (\n         \"CREATE UNIQUE INDEX %(name)s ON %(table)s \"\n-        \"(%(columns)s)%(include)s%(condition)s\"\n+        \"(%(columns)s)%(include)s%(condition)s%(nulls_distinct)s\"\n     )\n     sql_rename_index = \"ALTER INDEX %(old_name)s RENAME TO %(new_name)s\"\n     sql_delete_index = \"DROP INDEX %(name)s\"\n@@ -1675,12 +1675,20 @@ def _deferrable_constraint_sql(self, deferrable):\n         if deferrable == Deferrable.IMMEDIATE:\n             return \" DEFERRABLE INITIALLY IMMEDIATE\"\n \n+    def _unique_index_nulls_distinct_sql(self, nulls_distinct):\n+        if nulls_distinct is False:\n+            return \" NULLS NOT DISTINCT\"\n+        elif nulls_distinct is True:\n+            return \" NULLS DISTINCT\"\n+        return \"\"\n+\n     def _unique_supported(\n         self,\n         condition=None,\n         deferrable=None,\n         include=None,\n         expressions=None,\n+        nulls_distinct=None,\n     ):\n         return (\n             (not condition or self.connection.features.supports_partial_indexes)\n@@ -1692,6 +1700,10 @@ def _unique_supported(\n             and (\n                 not expressions or self.connection.features.supports_expression_indexes\n             )\n+            and (\n+                nulls_distinct is None\n+                or self.connection.features.supports_nulls_distinct_unique_constraints\n+            )\n         )\n \n     def _unique_sql(\n@@ -1704,17 +1716,26 @@ def _unique_sql(\n         include=None,\n         opclasses=None,\n         expressions=None,\n+        nulls_distinct=None,\n     ):\n         if not self._unique_supported(\n             condition=condition,\n             deferrable=deferrable,\n             include=include,\n             expressions=expressions,\n+            nulls_distinct=nulls_distinct,\n         ):\n             return None\n-        if condition or include or opclasses or expressions:\n-            # Databases support conditional, covering, and functional unique\n-            # constraints via a unique index.\n+\n+        if (\n+            condition\n+            or include\n+            or opclasses\n+            or expressions\n+            or nulls_distinct is not None\n+        ):\n+            # Databases support conditional, covering, functional unique,\n+            # and nulls distinct constraints via a unique index.\n             sql = self._create_unique_sql(\n                 model,\n                 fields,\n@@ -1723,6 +1744,7 @@ def _unique_sql(\n                 include=include,\n                 opclasses=opclasses,\n                 expressions=expressions,\n+                nulls_distinct=nulls_distinct,\n             )\n             if sql:\n                 self.deferred_sql.append(sql)\n@@ -1746,12 +1768,14 @@ def _create_unique_sql(\n         include=None,\n         opclasses=None,\n         expressions=None,\n+        nulls_distinct=None,\n     ):\n         if not self._unique_supported(\n             condition=condition,\n             deferrable=deferrable,\n             include=include,\n             expressions=expressions,\n+            nulls_distinct=nulls_distinct,\n         ):\n             return None\n \n@@ -1782,6 +1806,7 @@ def _create_unique_sql(\n             condition=self._index_condition_sql(condition),\n             deferrable=self._deferrable_constraint_sql(deferrable),\n             include=self._index_include_sql(model, include),\n+            nulls_distinct=self._unique_index_nulls_distinct_sql(nulls_distinct),\n         )\n \n     def _unique_constraint_name(self, table, columns, quote=True):\n@@ -1804,12 +1829,14 @@ def _delete_unique_sql(\n         include=None,\n         opclasses=None,\n         expressions=None,\n+        nulls_distinct=None,\n     ):\n         if not self._unique_supported(\n             condition=condition,\n             deferrable=deferrable,\n             include=include,\n             expressions=expressions,\n+            nulls_distinct=nulls_distinct,\n         ):\n             return None\n         if condition or include or opclasses or expressions:\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -132,6 +132,13 @@ def is_postgresql_13(self):\n     def is_postgresql_14(self):\n         return self.connection.pg_version >= 140000\n \n+    @cached_property\n+    def is_postgresql_15(self):\n+        return self.connection.pg_version >= 150000\n+\n     has_bit_xor = property(operator.attrgetter(\"is_postgresql_14\"))\n     supports_covering_spgist_indexes = property(operator.attrgetter(\"is_postgresql_14\"))\n     supports_unlimited_charfield = True\n+    supports_nulls_distinct_unique_constraints = property(\n+        operator.attrgetter(\"is_postgresql_15\")\n+    )\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -2442,6 +2442,29 @@ def _check_constraints(cls, databases):\n                         id=\"models.W044\",\n                     )\n                 )\n+            if not (\n+                connection.features.supports_nulls_distinct_unique_constraints\n+                or (\n+                    \"supports_nulls_distinct_unique_constraints\"\n+                    in cls._meta.required_db_features\n+                )\n+            ) and any(\n+                isinstance(constraint, UniqueConstraint)\n+                and constraint.nulls_distinct is not None\n+                for constraint in cls._meta.constraints\n+            ):\n+                errors.append(\n+                    checks.Warning(\n+                        \"%s does not support unique constraints with \"\n+                        \"nulls distinct.\" % connection.display_name,\n+                        hint=(\n+                            \"A constraint won't be created. Silence this \"\n+                            \"warning if you don't care about it.\"\n+                        ),\n+                        obj=cls,\n+                        id=\"models.W047\",\n+                    )\n+                )\n             fields = set(\n                 chain.from_iterable(\n                     (*constraint.fields, *constraint.include)\ndiff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -186,6 +186,7 @@ def __init__(\n         deferrable=None,\n         include=None,\n         opclasses=(),\n+        nulls_distinct=None,\n         violation_error_code=None,\n         violation_error_message=None,\n     ):\n@@ -216,13 +217,15 @@ def __init__(\n                 \"Use django.contrib.postgres.indexes.OpClass() instead.\"\n             )\n         if not isinstance(deferrable, (NoneType, Deferrable)):\n-            raise ValueError(\n+            raise TypeError(\n                 \"UniqueConstraint.deferrable must be a Deferrable instance.\"\n             )\n         if not isinstance(include, (NoneType, list, tuple)):\n-            raise ValueError(\"UniqueConstraint.include must be a list or tuple.\")\n+            raise TypeError(\"UniqueConstraint.include must be a list or tuple.\")\n         if not isinstance(opclasses, (list, tuple)):\n-            raise ValueError(\"UniqueConstraint.opclasses must be a list or tuple.\")\n+            raise TypeError(\"UniqueConstraint.opclasses must be a list or tuple.\")\n+        if not isinstance(nulls_distinct, (NoneType, bool)):\n+            raise TypeError(\"UniqueConstraint.nulls_distinct must be a bool.\")\n         if opclasses and len(fields) != len(opclasses):\n             raise ValueError(\n                 \"UniqueConstraint.fields and UniqueConstraint.opclasses must \"\n@@ -233,6 +236,7 @@ def __init__(\n         self.deferrable = deferrable\n         self.include = tuple(include) if include else ()\n         self.opclasses = opclasses\n+        self.nulls_distinct = nulls_distinct\n         self.expressions = tuple(\n             F(expression) if isinstance(expression, str) else expression\n             for expression in expressions\n@@ -284,6 +288,7 @@ def constraint_sql(self, model, schema_editor):\n             include=include,\n             opclasses=self.opclasses,\n             expressions=expressions,\n+            nulls_distinct=self.nulls_distinct,\n         )\n \n     def create_sql(self, model, schema_editor):\n@@ -302,6 +307,7 @@ def create_sql(self, model, schema_editor):\n             include=include,\n             opclasses=self.opclasses,\n             expressions=expressions,\n+            nulls_distinct=self.nulls_distinct,\n         )\n \n     def remove_sql(self, model, schema_editor):\n@@ -318,10 +324,11 @@ def remove_sql(self, model, schema_editor):\n             include=include,\n             opclasses=self.opclasses,\n             expressions=expressions,\n+            nulls_distinct=self.nulls_distinct,\n         )\n \n     def __repr__(self):\n-        return \"<%s:%s%s%s%s%s%s%s%s%s>\" % (\n+        return \"<%s:%s%s%s%s%s%s%s%s%s%s>\" % (\n             self.__class__.__qualname__,\n             \"\" if not self.fields else \" fields=%s\" % repr(self.fields),\n             \"\" if not self.expressions else \" expressions=%s\" % repr(self.expressions),\n@@ -330,6 +337,11 @@ def __repr__(self):\n             \"\" if self.deferrable is None else \" deferrable=%r\" % self.deferrable,\n             \"\" if not self.include else \" include=%s\" % repr(self.include),\n             \"\" if not self.opclasses else \" opclasses=%s\" % repr(self.opclasses),\n+            (\n+                \"\"\n+                if self.nulls_distinct is None\n+                else \" nulls_distinct=%r\" % self.nulls_distinct\n+            ),\n             (\n                 \"\"\n                 if self.violation_error_code is None\n@@ -353,6 +365,7 @@ def __eq__(self, other):\n                 and self.include == other.include\n                 and self.opclasses == other.opclasses\n                 and self.expressions == other.expressions\n+                and self.nulls_distinct is other.nulls_distinct\n                 and self.violation_error_code == other.violation_error_code\n                 and self.violation_error_message == other.violation_error_message\n             )\n@@ -370,6 +383,8 @@ def deconstruct(self):\n             kwargs[\"include\"] = self.include\n         if self.opclasses:\n             kwargs[\"opclasses\"] = self.opclasses\n+        if self.nulls_distinct is not None:\n+            kwargs[\"nulls_distinct\"] = self.nulls_distinct\n         return path, self.expressions, kwargs\n \n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n@@ -381,9 +396,15 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n                     return\n                 field = model._meta.get_field(field_name)\n                 lookup_value = getattr(instance, field.attname)\n-                if lookup_value is None or (\n-                    lookup_value == \"\"\n-                    and connections[using].features.interprets_empty_strings_as_nulls\n+                if (\n+                    self.nulls_distinct is not False\n+                    and lookup_value is None\n+                    or (\n+                        lookup_value == \"\"\n+                        and connections[\n+                            using\n+                        ].features.interprets_empty_strings_as_nulls\n+                    )\n                 ):\n                     # A composite constraint containing NULL value cannot cause\n                     # a violation since NULL != NULL in SQL.\n",
  "test_patch": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -503,6 +503,27 @@ def test_eq_with_expressions(self):\n         self.assertEqual(constraint, mock.ANY)\n         self.assertNotEqual(constraint, another_constraint)\n \n+    def test_eq_with_nulls_distinct(self):\n+        constraint_1 = models.UniqueConstraint(\n+            Lower(\"title\"),\n+            nulls_distinct=False,\n+            name=\"book_func_nulls_distinct_uq\",\n+        )\n+        constraint_2 = models.UniqueConstraint(\n+            Lower(\"title\"),\n+            nulls_distinct=True,\n+            name=\"book_func_nulls_distinct_uq\",\n+        )\n+        constraint_3 = models.UniqueConstraint(\n+            Lower(\"title\"),\n+            name=\"book_func_nulls_distinct_uq\",\n+        )\n+        self.assertEqual(constraint_1, constraint_1)\n+        self.assertEqual(constraint_1, mock.ANY)\n+        self.assertNotEqual(constraint_1, constraint_2)\n+        self.assertNotEqual(constraint_1, constraint_3)\n+        self.assertNotEqual(constraint_2, constraint_3)\n+\n     def test_repr(self):\n         fields = [\"foo\", \"bar\"]\n         name = \"unique_fields\"\n@@ -560,6 +581,18 @@ def test_repr_with_opclasses(self):\n             \"opclasses=['text_pattern_ops', 'varchar_pattern_ops']>\",\n         )\n \n+    def test_repr_with_nulls_distinct(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"foo\", \"bar\"],\n+            name=\"nulls_distinct_fields\",\n+            nulls_distinct=False,\n+        )\n+        self.assertEqual(\n+            repr(constraint),\n+            \"<UniqueConstraint: fields=('foo', 'bar') name='nulls_distinct_fields' \"\n+            \"nulls_distinct=False>\",\n+        )\n+\n     def test_repr_with_expressions(self):\n         constraint = models.UniqueConstraint(\n             Lower(\"title\"),\n@@ -679,6 +712,24 @@ def test_deconstruction_with_opclasses(self):\n             },\n         )\n \n+    def test_deconstruction_with_nulls_distinct(self):\n+        fields = [\"foo\", \"bar\"]\n+        name = \"unique_fields\"\n+        constraint = models.UniqueConstraint(\n+            fields=fields, name=name, nulls_distinct=True\n+        )\n+        path, args, kwargs = constraint.deconstruct()\n+        self.assertEqual(path, \"django.db.models.UniqueConstraint\")\n+        self.assertEqual(args, ())\n+        self.assertEqual(\n+            kwargs,\n+            {\n+                \"fields\": tuple(fields),\n+                \"name\": name,\n+                \"nulls_distinct\": True,\n+            },\n+        )\n+\n     def test_deconstruction_with_expressions(self):\n         name = \"unique_fields\"\n         constraint = models.UniqueConstraint(Lower(\"title\"), name=name)\n@@ -995,7 +1046,7 @@ def test_deferrable_with_expressions(self):\n \n     def test_invalid_defer_argument(self):\n         message = \"UniqueConstraint.deferrable must be a Deferrable instance.\"\n-        with self.assertRaisesMessage(ValueError, message):\n+        with self.assertRaisesMessage(TypeError, message):\n             models.UniqueConstraint(\n                 fields=[\"name\"],\n                 name=\"name_invalid\",\n@@ -1013,7 +1064,7 @@ def test_include_database_constraint(self):\n \n     def test_invalid_include_argument(self):\n         msg = \"UniqueConstraint.include must be a list or tuple.\"\n-        with self.assertRaisesMessage(ValueError, msg):\n+        with self.assertRaisesMessage(TypeError, msg):\n             models.UniqueConstraint(\n                 name=\"uniq_include\",\n                 fields=[\"field\"],\n@@ -1022,13 +1073,20 @@ def test_invalid_include_argument(self):\n \n     def test_invalid_opclasses_argument(self):\n         msg = \"UniqueConstraint.opclasses must be a list or tuple.\"\n-        with self.assertRaisesMessage(ValueError, msg):\n+        with self.assertRaisesMessage(TypeError, msg):\n             models.UniqueConstraint(\n                 name=\"uniq_opclasses\",\n                 fields=[\"field\"],\n                 opclasses=\"jsonb_path_ops\",\n             )\n \n+    def test_invalid_nulls_distinct_argument(self):\n+        msg = \"UniqueConstraint.nulls_distinct must be a bool.\"\n+        with self.assertRaisesMessage(TypeError, msg):\n+            models.UniqueConstraint(\n+                name=\"uniq_opclasses\", fields=[\"field\"], nulls_distinct=\"NULLS DISTINCT\"\n+            )\n+\n     def test_opclasses_and_fields_same_length(self):\n         msg = (\n             \"UniqueConstraint.fields and UniqueConstraint.opclasses must have \"\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -2753,6 +2753,52 @@ class Meta:\n \n         self.assertEqual(Model.check(databases=self.databases), [])\n \n+    def test_unique_constraint_nulls_distinct(self):\n+        class Model(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=[\"name\"],\n+                        name=\"name_uq_distinct_null\",\n+                        nulls_distinct=True,\n+                    ),\n+                ]\n+\n+        warn = Warning(\n+            f\"{connection.display_name} does not support unique constraints with nulls \"\n+            \"distinct.\",\n+            hint=(\n+                \"A constraint won't be created. Silence this warning if you don't care \"\n+                \"about it.\"\n+            ),\n+            obj=Model,\n+            id=\"models.W047\",\n+        )\n+        expected = (\n+            []\n+            if connection.features.supports_nulls_distinct_unique_constraints\n+            else [warn]\n+        )\n+        self.assertEqual(Model.check(databases=self.databases), expected)\n+\n+    def test_unique_constraint_nulls_distinct_required_db_features(self):\n+        class Model(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=[\"name\"],\n+                        name=\"name_uq_distinct_null\",\n+                        nulls_distinct=True,\n+                    ),\n+                ]\n+                required_db_features = {\"supports_nulls_distinct_unique_constraints\"}\n+\n+        self.assertEqual(Model.check(databases=self.databases), [])\n+\n     @skipUnlessDBFeature(\"supports_expression_indexes\")\n     def test_func_unique_constraint_expression_custom_lookup(self):\n         class Model(models.Model):\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3318,6 +3318,43 @@ def test_func_unique_constraint_nondeterministic(self):\n             with self.assertRaises(DatabaseError):\n                 editor.add_constraint(Author, constraint)\n \n+    @skipUnlessDBFeature(\"supports_nulls_distinct_unique_constraints\")\n+    def test_unique_constraint_nulls_distinct(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        nulls_distinct = UniqueConstraint(\n+            F(\"height\"), name=\"distinct_height\", nulls_distinct=True\n+        )\n+        nulls_not_distinct = UniqueConstraint(\n+            F(\"weight\"), name=\"not_distinct_weight\", nulls_distinct=False\n+        )\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, nulls_distinct)\n+            editor.add_constraint(Author, nulls_not_distinct)\n+        Author.objects.create(name=\"\", height=None, weight=None)\n+        Author.objects.create(name=\"\", height=None, weight=1)\n+        with self.assertRaises(IntegrityError):\n+            Author.objects.create(name=\"\", height=1, weight=None)\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, nulls_distinct)\n+            editor.remove_constraint(Author, nulls_not_distinct)\n+        constraints = self.get_constraints(Author._meta.db_table)\n+        self.assertNotIn(nulls_distinct.name, constraints)\n+        self.assertNotIn(nulls_not_distinct.name, constraints)\n+\n+    @skipIfDBFeature(\"supports_nulls_distinct_unique_constraints\")\n+    def test_unique_constraint_nulls_distinct_unsupported(self):\n+        # UniqueConstraint is ignored on databases that don't support\n+        # NULLS [NOT] DISTINCT.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(\n+            F(\"name\"), name=\"func_name_uq\", nulls_distinct=True\n+        )\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            self.assertIsNone(editor.add_constraint(Author, constraint))\n+            self.assertIsNone(editor.remove_constraint(Author, constraint))\n+\n     @ignore_warnings(category=RemovedInDjango51Warning)\n     def test_index_together(self):\n         \"\"\"\ndiff --git a/tests/validation/models.py b/tests/validation/models.py\n--- a/tests/validation/models.py\n+++ b/tests/validation/models.py\n@@ -217,3 +217,17 @@ class Meta:\n                 condition=models.Q(color__isnull=True),\n             ),\n         ]\n+\n+\n+class UniqueConstraintNullsDistinctProduct(models.Model):\n+    name = models.CharField(max_length=255, blank=True, null=True)\n+\n+    class Meta:\n+        required_db_features = {\"supports_nulls_distinct_unique_constraints\"}\n+        constraints = [\n+            models.UniqueConstraint(\n+                fields=[\"name\"],\n+                name=\"name_nulls_not_distinct_uniq\",\n+                nulls_distinct=False,\n+            ),\n+        ]\ndiff --git a/tests/validation/test_constraints.py b/tests/validation/test_constraints.py\n--- a/tests/validation/test_constraints.py\n+++ b/tests/validation/test_constraints.py\n@@ -6,6 +6,7 @@\n     ChildUniqueConstraintProduct,\n     Product,\n     UniqueConstraintConditionProduct,\n+    UniqueConstraintNullsDistinctProduct,\n     UniqueConstraintProduct,\n )\n \n@@ -93,3 +94,25 @@ def test_full_clean_with_partial_unique_constraints_disabled(self):\n         UniqueConstraintConditionProduct.objects.create(name=\"product\")\n         product = UniqueConstraintConditionProduct(name=\"product\")\n         product.full_clean(validate_constraints=False)\n+\n+    @skipUnlessDBFeature(\"supports_nulls_distinct_unique_constraints\")\n+    def test_full_clean_with_nulls_distinct_unique_constraints(self):\n+        UniqueConstraintNullsDistinctProduct.objects.create(name=None)\n+        product = UniqueConstraintNullsDistinctProduct(name=None)\n+        with self.assertRaises(ValidationError) as cm:\n+            product.full_clean()\n+        self.assertEqual(\n+            cm.exception.message_dict,\n+            {\n+                \"name\": [\n+                    \"Unique constraint nulls distinct product with this Name \"\n+                    \"already exists.\"\n+                ]\n+            },\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_nulls_distinct_unique_constraints\")\n+    def test_full_clean_with_nulls_distinct_unique_constraints_disabled(self):\n+        UniqueConstraintNullsDistinctProduct.objects.create(name=None)\n+        product = UniqueConstraintNullsDistinctProduct(name=None)\n+        product.full_clean(validate_constraints=False)\n",
  "problem_statement": "Add support for NULLS [NOT] DISTINCT to UniqueConstraint\nDescription\n\t \n\t\t(last modified by Simon Charette)\n\t \nPostgresSQL 15 is one of the first databases to implement the F292 SQL feature present in the 2023 standard that allows to specify whether or not null values should be considered as distinct in unique constraints.\nWhile most backends default to implicit NULLS DISTINCT some backends don't, most notably SQL Server (cff59bedc23fd4d53557f677ddc42402b56963d0).\nI suggest we add a nulls_distinct:Optional[bool]=None option to UniqueConstraint so it preserves it's default to backend treatment of nulls behaviour while allowing it to be set explicitly on backends that support it.\n​Article on the subject\n​SQL:F292\n​Recent thread on the subject in the forums\n",
  "hints_text": "",
  "created_at": "2023-07-09T17:26:07Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_constraint_sql (constraints.tests.BaseConstraintTests.test_constraint_sql)\", \"test_contains_expressions (constraints.tests.BaseConstraintTests.test_contains_expressions)\", \"test_create_sql (constraints.tests.BaseConstraintTests.test_create_sql)\", \"test_custom_violation_code_message (constraints.tests.BaseConstraintTests.test_custom_violation_code_message)\", \"test_custom_violation_error_message (constraints.tests.BaseConstraintTests.test_custom_violation_error_message)\", \"test_custom_violation_error_message_clone (constraints.tests.BaseConstraintTests.test_custom_violation_error_message_clone)\", \"test_deconstruction (constraints.tests.BaseConstraintTests.test_deconstruction)\", \"test_default_violation_error_message (constraints.tests.BaseConstraintTests.test_default_violation_error_message)\", \"test_deprecation (constraints.tests.BaseConstraintTests.test_deprecation)\", \"test_name_required (constraints.tests.BaseConstraintTests.test_name_required)\", \"test_positional_arguments (constraints.tests.BaseConstraintTests.test_positional_arguments)\", \"test_remove_sql (constraints.tests.BaseConstraintTests.test_remove_sql)\", \"test_validate (constraints.tests.BaseConstraintTests.test_validate)\", \"test_multiple_autofields (invalid_models_tests.test_models.MultipleAutoFieldsTests.test_multiple_autofields)\", \"test_db_table_comment (invalid_models_tests.test_models.DbTableCommentTests.test_db_table_comment)\", \"test_db_table_comment_required_db_features (invalid_models_tests.test_models.DbTableCommentTests.test_db_table_comment_required_db_features)\", \"test_full_clean_with_check_constraints (validation.test_constraints.PerformConstraintChecksTest.test_full_clean_with_check_constraints)\", \"test_full_clean_with_check_constraints_disabled (validation.test_constraints.PerformConstraintChecksTest.test_full_clean_with_check_constraints_disabled)\", \"test_full_clean_with_check_constraints_on_child_model (validation.test_constraints.PerformConstraintChecksTest.test_full_clean_with_check_constraints_on_child_model)\", \"test_full_clean_with_partial_unique_constraints (validation.test_constraints.PerformConstraintChecksTest.test_full_clean_with_partial_unique_constraints)\", \"test_full_clean_with_partial_unique_constraints_disabled (validation.test_constraints.PerformConstraintChecksTest.test_full_clean_with_partial_unique_constraints_disabled)\", \"test_full_clean_with_unique_constraints (validation.test_constraints.PerformConstraintChecksTest.test_full_clean_with_unique_constraints)\", \"test_full_clean_with_unique_constraints_disabled (validation.test_constraints.PerformConstraintChecksTest.test_full_clean_with_unique_constraints_disabled)\", \"test_db_column_clash (invalid_models_tests.test_models.FieldNamesTests.test_db_column_clash)\", \"test_ending_with_underscore (invalid_models_tests.test_models.FieldNamesTests.test_ending_with_underscore)\", \"test_including_separator (invalid_models_tests.test_models.FieldNamesTests.test_including_separator)\", \"test_pk (invalid_models_tests.test_models.FieldNamesTests.test_pk)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests.test_list_containing_non_iterable)\", \"test_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests.test_non_iterable)\", \"test_non_list (invalid_models_tests.test_models.UniqueTogetherTests.test_non_list)\", \"test_pointing_to_fk (invalid_models_tests.test_models.UniqueTogetherTests.test_pointing_to_fk)\", \"test_pointing_to_m2m (invalid_models_tests.test_models.UniqueTogetherTests.test_pointing_to_m2m)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.UniqueTogetherTests.test_pointing_to_missing_field)\", \"test_valid_model (invalid_models_tests.test_models.UniqueTogetherTests.test_valid_model)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.IndexTogetherTests.test_list_containing_non_iterable)\", \"test_non_iterable (invalid_models_tests.test_models.IndexTogetherTests.test_non_iterable)\", \"test_non_list (invalid_models_tests.test_models.IndexTogetherTests.test_non_list)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexTogetherTests.test_pointing_to_fk)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexTogetherTests.test_pointing_to_m2m_field)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexTogetherTests.test_pointing_to_missing_field)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexTogetherTests.test_pointing_to_non_local_field)\", \"test_check_jsonfield (invalid_models_tests.test_models.JSONFieldTests.test_check_jsonfield)\", \"test_check_jsonfield_required_db_features (invalid_models_tests.test_models.JSONFieldTests.test_check_jsonfield_required_db_features)\", \"test_ordering_pointing_to_json_field_value (invalid_models_tests.test_models.JSONFieldTests.test_ordering_pointing_to_json_field_value)\", \"test_abstract_name (constraints.tests.CheckConstraintTests.test_abstract_name)\", \"test_database_constraint (constraints.tests.CheckConstraintTests.test_database_constraint)\", \"test_database_constraint_unicode (constraints.tests.CheckConstraintTests.test_database_constraint_unicode)\", \"test_deconstruction (constraints.tests.CheckConstraintTests.test_deconstruction)\", \"test_eq (constraints.tests.CheckConstraintTests.test_eq)\", \"test_invalid_check_types (constraints.tests.CheckConstraintTests.test_invalid_check_types)\", \"test_name (constraints.tests.CheckConstraintTests.test_name)\", \"test_repr (constraints.tests.CheckConstraintTests.test_repr)\", \"test_repr_with_violation_error_code (constraints.tests.CheckConstraintTests.test_repr_with_violation_error_code)\", \"test_repr_with_violation_error_message (constraints.tests.CheckConstraintTests.test_repr_with_violation_error_message)\", \"test_validate (constraints.tests.CheckConstraintTests.test_validate)\", \"test_validate_boolean_expressions (constraints.tests.CheckConstraintTests.test_validate_boolean_expressions)\", \"test_validate_custom_error (constraints.tests.CheckConstraintTests.test_validate_custom_error)\", \"test_validate_nullable_field_with_none (constraints.tests.CheckConstraintTests.test_validate_nullable_field_with_none)\", \"test_validate_rawsql_expressions_noop (constraints.tests.CheckConstraintTests.test_validate_rawsql_expressions_noop)\", \"test_diamond_mti_common_parent (invalid_models_tests.test_models.ShadowingFieldsTests.test_diamond_mti_common_parent)\", \"test_field_name_clash_with_child_accessor (invalid_models_tests.test_models.ShadowingFieldsTests.test_field_name_clash_with_child_accessor)\", \"test_field_name_clash_with_m2m_through (invalid_models_tests.test_models.ShadowingFieldsTests.test_field_name_clash_with_m2m_through)\", \"test_id_clash (invalid_models_tests.test_models.ShadowingFieldsTests.test_id_clash)\", \"test_inheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests.test_inheritance_clash)\", \"test_multigeneration_inheritance (invalid_models_tests.test_models.ShadowingFieldsTests.test_multigeneration_inheritance)\", \"test_multiinheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests.test_multiinheritance_clash)\", \"test_func_index (invalid_models_tests.test_models.IndexesTests.test_func_index)\", \"test_func_index_complex_expression_custom_lookup (invalid_models_tests.test_models.IndexesTests.test_func_index_complex_expression_custom_lookup)\", \"test_func_index_pointing_to_fk (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_fk)\", \"test_func_index_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_m2m_field)\", \"test_func_index_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_missing_field)\", \"test_func_index_pointing_to_missing_field_nested (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_missing_field_nested)\", \"test_func_index_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests.test_func_index_pointing_to_non_local_field)\", \"test_func_index_required_db_features (invalid_models_tests.test_models.IndexesTests.test_func_index_required_db_features)\", \"test_index_with_condition (invalid_models_tests.test_models.IndexesTests.test_index_with_condition)\", \"test_index_with_condition_required_db_features (invalid_models_tests.test_models.IndexesTests.test_index_with_condition_required_db_features)\", \"test_index_with_include (invalid_models_tests.test_models.IndexesTests.test_index_with_include)\", \"test_index_with_include_required_db_features (invalid_models_tests.test_models.IndexesTests.test_index_with_include_required_db_features)\", \"test_max_name_length (invalid_models_tests.test_models.IndexesTests.test_max_name_length)\", \"test_name_constraints (invalid_models_tests.test_models.IndexesTests.test_name_constraints)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexesTests.test_pointing_to_fk)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests.test_pointing_to_m2m_field)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests.test_pointing_to_missing_field)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests.test_pointing_to_non_local_field)\", \"test_condition_must_be_q (constraints.tests.UniqueConstraintTests.test_condition_must_be_q)\", \"test_database_constraint (constraints.tests.UniqueConstraintTests.test_database_constraint)\", \"test_database_constraint_with_condition (constraints.tests.UniqueConstraintTests.test_database_constraint_with_condition)\", \"test_deconstruction (constraints.tests.UniqueConstraintTests.test_deconstruction)\", \"test_deconstruction_with_condition (constraints.tests.UniqueConstraintTests.test_deconstruction_with_condition)\", \"test_deconstruction_with_deferrable (constraints.tests.UniqueConstraintTests.test_deconstruction_with_deferrable)\", \"test_deconstruction_with_expressions (constraints.tests.UniqueConstraintTests.test_deconstruction_with_expressions)\", \"test_deconstruction_with_include (constraints.tests.UniqueConstraintTests.test_deconstruction_with_include)\", \"test_deconstruction_with_nulls_distinct (constraints.tests.UniqueConstraintTests.test_deconstruction_with_nulls_distinct)\", \"test_deconstruction_with_opclasses (constraints.tests.UniqueConstraintTests.test_deconstruction_with_opclasses)\", \"test_deferrable_with_condition (constraints.tests.UniqueConstraintTests.test_deferrable_with_condition)\", \"test_deferrable_with_expressions (constraints.tests.UniqueConstraintTests.test_deferrable_with_expressions)\", \"test_deferrable_with_include (constraints.tests.UniqueConstraintTests.test_deferrable_with_include)\", \"test_deferrable_with_opclasses (constraints.tests.UniqueConstraintTests.test_deferrable_with_opclasses)\", \"test_eq (constraints.tests.UniqueConstraintTests.test_eq)\", \"test_eq_with_condition (constraints.tests.UniqueConstraintTests.test_eq_with_condition)\", \"test_eq_with_deferrable (constraints.tests.UniqueConstraintTests.test_eq_with_deferrable)\", \"test_eq_with_expressions (constraints.tests.UniqueConstraintTests.test_eq_with_expressions)\", \"test_eq_with_include (constraints.tests.UniqueConstraintTests.test_eq_with_include)\", \"test_eq_with_nulls_distinct (constraints.tests.UniqueConstraintTests.test_eq_with_nulls_distinct)\", \"test_eq_with_opclasses (constraints.tests.UniqueConstraintTests.test_eq_with_opclasses)\", \"test_expressions_and_fields_mutually_exclusive (constraints.tests.UniqueConstraintTests.test_expressions_and_fields_mutually_exclusive)\", \"test_expressions_with_opclasses (constraints.tests.UniqueConstraintTests.test_expressions_with_opclasses)\", \"test_invalid_defer_argument (constraints.tests.UniqueConstraintTests.test_invalid_defer_argument)\", \"test_invalid_include_argument (constraints.tests.UniqueConstraintTests.test_invalid_include_argument)\", \"test_invalid_nulls_distinct_argument (constraints.tests.UniqueConstraintTests.test_invalid_nulls_distinct_argument)\", \"test_invalid_opclasses_argument (constraints.tests.UniqueConstraintTests.test_invalid_opclasses_argument)\", \"test_model_validation (constraints.tests.UniqueConstraintTests.test_model_validation)\", \"test_model_validation_constraint_no_code_error (constraints.tests.UniqueConstraintTests.test_model_validation_constraint_no_code_error)\", \"Partial unique constraints are not ignored by\", \"test_name (constraints.tests.UniqueConstraintTests.test_name)\", \"test_opclasses_and_fields_same_length (constraints.tests.UniqueConstraintTests.test_opclasses_and_fields_same_length)\", \"test_repr (constraints.tests.UniqueConstraintTests.test_repr)\", \"test_repr_with_condition (constraints.tests.UniqueConstraintTests.test_repr_with_condition)\", \"test_repr_with_deferrable (constraints.tests.UniqueConstraintTests.test_repr_with_deferrable)\", \"test_repr_with_expressions (constraints.tests.UniqueConstraintTests.test_repr_with_expressions)\", \"test_repr_with_include (constraints.tests.UniqueConstraintTests.test_repr_with_include)\", \"test_repr_with_nulls_distinct (constraints.tests.UniqueConstraintTests.test_repr_with_nulls_distinct)\", \"test_repr_with_opclasses (constraints.tests.UniqueConstraintTests.test_repr_with_opclasses)\", \"test_repr_with_violation_error_code (constraints.tests.UniqueConstraintTests.test_repr_with_violation_error_code)\", \"test_repr_with_violation_error_message (constraints.tests.UniqueConstraintTests.test_repr_with_violation_error_message)\", \"test_requires_field_or_expression (constraints.tests.UniqueConstraintTests.test_requires_field_or_expression)\", \"test_requires_name (constraints.tests.UniqueConstraintTests.test_requires_name)\", \"test_validate (constraints.tests.UniqueConstraintTests.test_validate)\", \"test_validate_condition (constraints.tests.UniqueConstraintTests.test_validate_condition)\", \"test_validate_conditon_custom_error (constraints.tests.UniqueConstraintTests.test_validate_conditon_custom_error)\", \"test_validate_expression (constraints.tests.UniqueConstraintTests.test_validate_expression)\", \"test_validate_expression_condition (constraints.tests.UniqueConstraintTests.test_validate_expression_condition)\", \"test_validate_expression_str (constraints.tests.UniqueConstraintTests.test_validate_expression_str)\", \"test_validate_ordered_expression (constraints.tests.UniqueConstraintTests.test_validate_ordered_expression)\", \"test_check_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_fk)\", \"test_check_constraint_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_joined_fields)\", \"test_check_constraint_pointing_to_joined_fields_complex_check (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_joined_fields_complex_check)\", \"test_check_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_m2m_field)\", \"test_check_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_missing_field)\", \"test_check_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_non_local_field)\", \"test_check_constraint_pointing_to_pk (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_pk)\", \"test_check_constraint_pointing_to_reverse_fk (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_reverse_fk)\", \"test_check_constraint_pointing_to_reverse_o2o (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_pointing_to_reverse_o2o)\", \"test_check_constraint_raw_sql_check (invalid_models_tests.test_models.ConstraintsTests.test_check_constraint_raw_sql_check)\", \"test_check_constraints (invalid_models_tests.test_models.ConstraintsTests.test_check_constraints)\", \"test_check_constraints_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_check_constraints_required_db_features)\", \"test_deferrable_unique_constraint (invalid_models_tests.test_models.ConstraintsTests.test_deferrable_unique_constraint)\", \"test_deferrable_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_deferrable_unique_constraint_required_db_features)\", \"test_func_unique_constraint (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint)\", \"test_func_unique_constraint_expression_custom_lookup (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_expression_custom_lookup)\", \"test_func_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_fk)\", \"test_func_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_m2m_field)\", \"test_func_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_missing_field)\", \"test_func_unique_constraint_pointing_to_missing_field_nested (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_missing_field_nested)\", \"test_func_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_pointing_to_non_local_field)\", \"test_func_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_func_unique_constraint_required_db_features)\", \"test_unique_constraint_condition_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_condition_pointing_to_joined_fields)\", \"test_unique_constraint_condition_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_condition_pointing_to_missing_field)\", \"test_unique_constraint_nulls_distinct (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_nulls_distinct)\", \"test_unique_constraint_nulls_distinct_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_nulls_distinct_required_db_features)\", \"test_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_fk)\", \"test_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_m2m_field)\", \"test_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_missing_field)\", \"test_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_non_local_field)\", \"test_unique_constraint_pointing_to_reverse_o2o (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_pointing_to_reverse_o2o)\", \"test_unique_constraint_with_condition (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_with_condition)\", \"test_unique_constraint_with_condition_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_with_condition_required_db_features)\", \"test_unique_constraint_with_include (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_with_include)\", \"test_unique_constraint_with_include_required_db_features (invalid_models_tests.test_models.ConstraintsTests.test_unique_constraint_with_include_required_db_features)\", \"test_just_order_with_respect_to_no_errors (invalid_models_tests.test_models.OtherModelTests.test_just_order_with_respect_to_no_errors)\", \"test_just_ordering_no_errors (invalid_models_tests.test_models.OtherModelTests.test_just_ordering_no_errors)\", \"test_lazy_reference_checks (invalid_models_tests.test_models.OtherModelTests.test_lazy_reference_checks)\", \"test_m2m_autogenerated_table_name_clash (invalid_models_tests.test_models.OtherModelTests.test_m2m_autogenerated_table_name_clash)\", \"test_m2m_autogenerated_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests.test_m2m_autogenerated_table_name_clash_database_routers_installed)\", \"test_m2m_field_table_name_clash (invalid_models_tests.test_models.OtherModelTests.test_m2m_field_table_name_clash)\", \"test_m2m_field_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests.test_m2m_field_table_name_clash_database_routers_installed)\", \"test_m2m_table_name_clash (invalid_models_tests.test_models.OtherModelTests.test_m2m_table_name_clash)\", \"test_m2m_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests.test_m2m_table_name_clash_database_routers_installed)\", \"test_m2m_to_concrete_and_proxy_allowed (invalid_models_tests.test_models.OtherModelTests.test_m2m_to_concrete_and_proxy_allowed)\", \"test_m2m_unmanaged_shadow_models_not_checked (invalid_models_tests.test_models.OtherModelTests.test_m2m_unmanaged_shadow_models_not_checked)\", \"test_name_beginning_with_underscore (invalid_models_tests.test_models.OtherModelTests.test_name_beginning_with_underscore)\", \"test_name_contains_double_underscores (invalid_models_tests.test_models.OtherModelTests.test_name_contains_double_underscores)\", \"test_name_ending_with_underscore (invalid_models_tests.test_models.OtherModelTests.test_name_ending_with_underscore)\", \"test_non_valid (invalid_models_tests.test_models.OtherModelTests.test_non_valid)\", \"test_onetoone_with_explicit_parent_link_parent_model (invalid_models_tests.test_models.OtherModelTests.test_onetoone_with_explicit_parent_link_parent_model)\", \"test_onetoone_with_parent_model (invalid_models_tests.test_models.OtherModelTests.test_onetoone_with_parent_model)\", \"test_ordering_allows_registered_lookups (invalid_models_tests.test_models.OtherModelTests.test_ordering_allows_registered_lookups)\", \"test_ordering_non_iterable (invalid_models_tests.test_models.OtherModelTests.test_ordering_non_iterable)\", \"test_ordering_pointing_multiple_times_to_model_fields (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_multiple_times_to_model_fields)\", \"test_ordering_pointing_to_foreignkey_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_foreignkey_field)\", \"test_ordering_pointing_to_lookup_not_transform (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_lookup_not_transform)\", \"test_ordering_pointing_to_missing_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_missing_field)\", \"test_ordering_pointing_to_missing_foreignkey_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_missing_foreignkey_field)\", \"test_ordering_pointing_to_missing_related_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_missing_related_field)\", \"test_ordering_pointing_to_missing_related_model_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_missing_related_model_field)\", \"test_ordering_pointing_to_non_related_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_non_related_field)\", \"test_ordering_pointing_to_related_model_pk (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_related_model_pk)\", \"test_ordering_pointing_to_two_related_model_field (invalid_models_tests.test_models.OtherModelTests.test_ordering_pointing_to_two_related_model_field)\", \"test_ordering_with_order_with_respect_to (invalid_models_tests.test_models.OtherModelTests.test_ordering_with_order_with_respect_to)\", \"test_property_and_related_field_accessor_clash (invalid_models_tests.test_models.OtherModelTests.test_property_and_related_field_accessor_clash)\", \"test_single_primary_key (invalid_models_tests.test_models.OtherModelTests.test_single_primary_key)\", \"test_swappable_missing_app (invalid_models_tests.test_models.OtherModelTests.test_swappable_missing_app)\", \"test_swappable_missing_app_name (invalid_models_tests.test_models.OtherModelTests.test_swappable_missing_app_name)\", \"test_two_m2m_through_same_model_with_different_through_fields (invalid_models_tests.test_models.OtherModelTests.test_two_m2m_through_same_model_with_different_through_fields)\", \"test_two_m2m_through_same_relationship (invalid_models_tests.test_models.OtherModelTests.test_two_m2m_through_same_relationship)\", \"test_unique_primary_key (invalid_models_tests.test_models.OtherModelTests.test_unique_primary_key)\", \"test_add_auto_field (schema.tests.SchemaTests.test_add_auto_field)\", \"effective_default() should be used for DateField, DateTimeField, and\", \"Tests adding fields to models\", \"Tests binary fields get a sane default (#22851)\", \"test_add_field_db_collation (schema.tests.SchemaTests.test_add_field_db_collation)\", \"test_add_field_default_dropped (schema.tests.SchemaTests.test_add_field_default_dropped)\", \"test_add_field_default_nullable (schema.tests.SchemaTests.test_add_field_default_nullable)\", \"Tests adding fields to models with a default that is not directly\", \"test_add_field_durationfield_with_default (schema.tests.SchemaTests.test_add_field_durationfield_with_default)\", \"test_add_field_o2o_nullable (schema.tests.SchemaTests.test_add_field_o2o_nullable)\", \"Adding a field and removing it removes all deferred sql referring to it.\", \"Tests adding fields to models with a temporary default\", \"Tests adding fields to models with a temporary default where\", \"#23987 - effective_default() should be used as the field default when\", \"Regression test for #23009.\", \"test_add_foreign_key_quoted_db_table (schema.tests.SchemaTests.test_add_foreign_key_quoted_db_table)\", \"test_add_foreign_object (schema.tests.SchemaTests.test_add_foreign_object)\", \"Tests index addition and removal\", \"test_add_textfield_default_nullable (schema.tests.SchemaTests.test_add_textfield_default_nullable)\", \"test_add_textfield_unhashable_default (schema.tests.SchemaTests.test_add_textfield_unhashable_default)\", \"Tests simple altering of fields\", \"test_alter_auto_field_quoted_db_column (schema.tests.SchemaTests.test_alter_auto_field_quoted_db_column)\", \"test_alter_auto_field_to_char_field (schema.tests.SchemaTests.test_alter_auto_field_to_char_field)\", \"test_alter_auto_field_to_integer_field (schema.tests.SchemaTests.test_alter_auto_field_to_integer_field)\", \"test_alter_autofield_pk_to_bigautofield_pk (schema.tests.SchemaTests.test_alter_autofield_pk_to_bigautofield_pk)\", \"test_alter_autofield_pk_to_smallautofield_pk (schema.tests.SchemaTests.test_alter_autofield_pk_to_smallautofield_pk)\", \"#24307 - Should skip an alter statement on databases with\", \"test_alter_db_table_case (schema.tests.SchemaTests.test_alter_db_table_case)\", \"test_alter_field_add_index_to_integerfield (schema.tests.SchemaTests.test_alter_field_add_index_to_integerfield)\", \"test_alter_field_choices_noop (schema.tests.SchemaTests.test_alter_field_choices_noop)\", \"test_alter_field_db_collation (schema.tests.SchemaTests.test_alter_field_db_collation)\", \"test_alter_field_default_dropped (schema.tests.SchemaTests.test_alter_field_default_dropped)\", \"No queries are performed when changing field attributes that don't\", \"test_alter_field_fk_keeps_index (schema.tests.SchemaTests.test_alter_field_fk_keeps_index)\", \"test_alter_field_fk_to_o2o (schema.tests.SchemaTests.test_alter_field_fk_to_o2o)\", \"test_alter_field_o2o_keeps_unique (schema.tests.SchemaTests.test_alter_field_o2o_keeps_unique)\", \"test_alter_field_o2o_to_fk (schema.tests.SchemaTests.test_alter_field_o2o_to_fk)\", \"test_alter_field_type_and_db_collation (schema.tests.SchemaTests.test_alter_field_type_and_db_collation)\", \"test_alter_field_type_preserve_db_collation (schema.tests.SchemaTests.test_alter_field_type_preserve_db_collation)\", \"Tests altering of FKs\", \"#25492 - Altering a foreign key's structure and data in the same\", \"#24163 - Tests altering of ForeignKey to OneToOneField\", \"Should be able to convert an implicit \\\"id\\\" field to an explicit \\\"id\\\"\", \"Should be able to rename an IntegerField(primary_key=True) to\", \"test_alter_not_unique_field_to_primary_key (schema.tests.SchemaTests.test_alter_not_unique_field_to_primary_key)\", \"#23609 - Tests handling of default values when altering from NULL to NOT NULL.\", \"#23738 - Can change a nullable field with default to non-nullable\", \"test_alter_null_with_default_value_deferred_constraints (schema.tests.SchemaTests.test_alter_null_with_default_value_deferred_constraints)\", \"Changing a field type shouldn't affect the not null status.\", \"#24163 - Tests altering of OneToOneField to ForeignKey\", \"Changing the primary key field name of a model with a self-referential\", \"test_alter_primary_key_db_collation (schema.tests.SchemaTests.test_alter_primary_key_db_collation)\", \"test_alter_primary_key_quoted_db_table (schema.tests.SchemaTests.test_alter_primary_key_quoted_db_table)\", \"test_alter_primary_key_the_same_name (schema.tests.SchemaTests.test_alter_primary_key_the_same_name)\", \"Should be able to rename an SmallIntegerField(primary_key=True) to\", \"test_alter_text_field (schema.tests.SchemaTests.test_alter_text_field)\", \"#25002 - Test conversion of text field to date field.\", \"#25002 - Test conversion of text field to datetime field.\", \"test_alter_text_field_to_not_null_with_default_value (schema.tests.SchemaTests.test_alter_text_field_to_not_null_with_default_value)\", \"#25002 - Test conversion of text field to time field.\", \"#24447 - Tests adding a FK constraint for an existing column\", \"test_autofield_to_o2o (schema.tests.SchemaTests.test_autofield_to_o2o)\", \"test_char_field_pk_to_auto_field (schema.tests.SchemaTests.test_char_field_pk_to_auto_field)\", \"test_char_field_with_db_index_to_fk (schema.tests.SchemaTests.test_char_field_with_db_index_to_fk)\", \"test_check_constraint_timedelta_param (schema.tests.SchemaTests.test_check_constraint_timedelta_param)\", \"Tests creating/deleting CHECK constraints\", \"test_ci_cs_db_collation (schema.tests.SchemaTests.test_ci_cs_db_collation)\", \"test_composed_check_constraint_with_fk (schema.tests.SchemaTests.test_composed_check_constraint_with_fk)\", \"test_composed_constraint_with_fk (schema.tests.SchemaTests.test_composed_constraint_with_fk)\", \"test_composed_desc_func_index_with_fk (schema.tests.SchemaTests.test_composed_desc_func_index_with_fk)\", \"test_composed_desc_index_with_fk (schema.tests.SchemaTests.test_composed_desc_index_with_fk)\", \"test_composed_func_index_with_fk (schema.tests.SchemaTests.test_composed_func_index_with_fk)\", \"test_composed_func_transform_index_with_fk (schema.tests.SchemaTests.test_composed_func_transform_index_with_fk)\", \"test_composed_index_with_fk (schema.tests.SchemaTests.test_composed_index_with_fk)\", \"test_composite_func_index (schema.tests.SchemaTests.test_composite_func_index)\", \"test_composite_func_index_field_and_expression (schema.tests.SchemaTests.test_composite_func_index_field_and_expression)\", \"test_composite_func_unique_constraint (schema.tests.SchemaTests.test_composite_func_unique_constraint)\", \"Ensures transaction is correctly closed when an error occurs\", \"Tests creating models with index_together already defined\", \"Tries creating a model's table, and then deleting it.\", \"Tries creating a model's table, and then deleting it when it has a\", \"test_db_collation_charfield (schema.tests.SchemaTests.test_db_collation_charfield)\", \"test_db_collation_textfield (schema.tests.SchemaTests.test_db_collation_textfield)\", \"Tests renaming of the table\", \"Creating tables out of FK order, then repointing, works\", \"The db_constraint parameter is respected\", \"Creating a FK to a proxy model creates database constraints.\", \"Regression test for #21497.\", \"test_func_index (schema.tests.SchemaTests.test_func_index)\", \"test_func_index_calc (schema.tests.SchemaTests.test_func_index_calc)\", \"test_func_index_cast (schema.tests.SchemaTests.test_func_index_cast)\", \"test_func_index_collate (schema.tests.SchemaTests.test_func_index_collate)\", \"test_func_index_collate_f_ordered (schema.tests.SchemaTests.test_func_index_collate_f_ordered)\", \"test_func_index_f (schema.tests.SchemaTests.test_func_index_f)\", \"test_func_index_f_decimalfield (schema.tests.SchemaTests.test_func_index_f_decimalfield)\", \"test_func_index_invalid_topmost_expressions (schema.tests.SchemaTests.test_func_index_invalid_topmost_expressions)\", \"test_func_index_json_key_transform (schema.tests.SchemaTests.test_func_index_json_key_transform)\", \"test_func_index_json_key_transform_cast (schema.tests.SchemaTests.test_func_index_json_key_transform_cast)\", \"test_func_index_lookups (schema.tests.SchemaTests.test_func_index_lookups)\", \"test_func_index_multiple_wrapper_references (schema.tests.SchemaTests.test_func_index_multiple_wrapper_references)\", \"test_func_index_nondeterministic (schema.tests.SchemaTests.test_func_index_nondeterministic)\", \"test_func_index_nonexistent_field (schema.tests.SchemaTests.test_func_index_nonexistent_field)\", \"test_func_unique_constraint (schema.tests.SchemaTests.test_func_unique_constraint)\", \"test_func_unique_constraint_collate (schema.tests.SchemaTests.test_func_unique_constraint_collate)\", \"test_func_unique_constraint_lookups (schema.tests.SchemaTests.test_func_unique_constraint_lookups)\", \"test_func_unique_constraint_nondeterministic (schema.tests.SchemaTests.test_func_unique_constraint_nondeterministic)\", \"test_func_unique_constraint_nonexistent_field (schema.tests.SchemaTests.test_func_unique_constraint_nonexistent_field)\", \"test_func_unique_constraint_partial (schema.tests.SchemaTests.test_func_unique_constraint_partial)\", \"Tests removing and adding index_together constraints on a model.\", \"Tests removing and adding index_together constraints that include\", \"Tests creation/altering of indexes\", \"test_m2m (schema.tests.SchemaTests.test_m2m)\", \"test_m2m_create (schema.tests.SchemaTests.test_m2m_create)\", \"test_m2m_create_custom (schema.tests.SchemaTests.test_m2m_create_custom)\", \"test_m2m_create_inherited (schema.tests.SchemaTests.test_m2m_create_inherited)\", \"test_m2m_create_through (schema.tests.SchemaTests.test_m2m_create_through)\", \"test_m2m_create_through_custom (schema.tests.SchemaTests.test_m2m_create_through_custom)\", \"test_m2m_create_through_inherited (schema.tests.SchemaTests.test_m2m_create_through_inherited)\", \"test_m2m_custom (schema.tests.SchemaTests.test_m2m_custom)\", \"test_m2m_db_constraint (schema.tests.SchemaTests.test_m2m_db_constraint)\", \"test_m2m_db_constraint_custom (schema.tests.SchemaTests.test_m2m_db_constraint_custom)\", \"test_m2m_db_constraint_inherited (schema.tests.SchemaTests.test_m2m_db_constraint_inherited)\", \"test_m2m_inherited (schema.tests.SchemaTests.test_m2m_inherited)\", \"test_m2m_rename_field_in_target_model (schema.tests.SchemaTests.test_m2m_rename_field_in_target_model)\", \"test_m2m_repoint (schema.tests.SchemaTests.test_m2m_repoint)\", \"test_m2m_repoint_custom (schema.tests.SchemaTests.test_m2m_repoint_custom)\", \"test_m2m_repoint_inherited (schema.tests.SchemaTests.test_m2m_repoint_inherited)\", \"test_m2m_through_alter (schema.tests.SchemaTests.test_m2m_through_alter)\", \"test_m2m_through_alter_custom (schema.tests.SchemaTests.test_m2m_through_alter_custom)\", \"test_m2m_through_alter_inherited (schema.tests.SchemaTests.test_m2m_through_alter_inherited)\", \"test_m2m_through_remove (schema.tests.SchemaTests.test_m2m_through_remove)\", \"Table names are stripped of their namespace/schema before being used to\", \"When a primary key that's pointed to by a ForeignKey with\", \"Indexes defined with ordering (ASC/DESC) defined on column\", \"Tests altering of the primary key\", \"Foreign keys without database level constraint don't prevent the field\", \"Foreign keys without database level constraint don't prevent the table\", \"#23065 - Constraint names must be quoted if they contain capital letters.\", \"Changing db_index to False doesn't remove indexes from Meta.indexes.\", \"test_remove_field (schema.tests.SchemaTests.test_remove_field)\", \"test_remove_field_check_does_not_remove_meta_constraints (schema.tests.SchemaTests.test_remove_field_check_does_not_remove_meta_constraints)\", \"test_remove_field_unique_does_not_remove_meta_constraints (schema.tests.SchemaTests.test_remove_field_unique_does_not_remove_meta_constraints)\", \"test_remove_ignored_unique_constraint_not_create_fk_index (schema.tests.SchemaTests.test_remove_ignored_unique_constraint_not_create_fk_index)\", \"test_remove_index_together_does_not_remove_meta_indexes (schema.tests.SchemaTests.test_remove_index_together_does_not_remove_meta_indexes)\", \"test_remove_indexed_field (schema.tests.SchemaTests.test_remove_indexed_field)\", \"test_remove_unique_together_does_not_remove_meta_constraints (schema.tests.SchemaTests.test_remove_unique_together_does_not_remove_meta_constraints)\", \"test_rename_field_with_check_to_truncated_name (schema.tests.SchemaTests.test_rename_field_with_check_to_truncated_name)\", \"Renaming a field shouldn't affect a database default.\", \"Renaming a field shouldn't affect the not null status.\", \"test_rename_referenced_field (schema.tests.SchemaTests.test_rename_referenced_field)\", \"test_rename_table_renames_deferred_sql_references (schema.tests.SchemaTests.test_rename_table_renames_deferred_sql_references)\", \"test_text_field_with_db_index (schema.tests.SchemaTests.test_text_field_with_db_index)\", \"test_text_field_with_db_index_to_fk (schema.tests.SchemaTests.test_text_field_with_db_index_to_fk)\", \"Tests removing and adding unique constraints to a single column.\", \"test_unique_constraint (schema.tests.SchemaTests.test_unique_constraint)\", \"test_unique_constraint_field_and_expression (schema.tests.SchemaTests.test_unique_constraint_field_and_expression)\", \"test_unique_constraint_nulls_distinct_unsupported (schema.tests.SchemaTests.test_unique_constraint_nulls_distinct_unsupported)\", \"test_unique_name_quoting (schema.tests.SchemaTests.test_unique_name_quoting)\", \"Tests removing and adding unique_together constraints on a model.\", \"Tests removing and adding unique_together constraints that include\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.779659",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}