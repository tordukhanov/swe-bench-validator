{
  "repo": "django/django",
  "instance_id": "django__django-10973",
  "base_commit": "ddb293685235fd09e932805771ae97f72e817181",
  "patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -2,17 +2,9 @@\n import signal\n import subprocess\n \n-from django.core.files.temp import NamedTemporaryFile\n from django.db.backends.base.client import BaseDatabaseClient\n \n \n-def _escape_pgpass(txt):\n-    \"\"\"\n-    Escape a fragment of a PostgreSQL .pgpass file.\n-    \"\"\"\n-    return txt.replace('\\\\', '\\\\\\\\').replace(':', '\\\\:')\n-\n-\n class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'psql'\n \n@@ -34,38 +26,17 @@ def runshell_db(cls, conn_params):\n             args += ['-p', str(port)]\n         args += [dbname]\n \n-        temp_pgpass = None\n         sigint_handler = signal.getsignal(signal.SIGINT)\n+        subprocess_env = os.environ.copy()\n+        if passwd:\n+            subprocess_env['PGPASSWORD'] = str(passwd)\n         try:\n-            if passwd:\n-                # Create temporary .pgpass file.\n-                temp_pgpass = NamedTemporaryFile(mode='w+')\n-                try:\n-                    print(\n-                        _escape_pgpass(host) or '*',\n-                        str(port) or '*',\n-                        _escape_pgpass(dbname) or '*',\n-                        _escape_pgpass(user) or '*',\n-                        _escape_pgpass(passwd),\n-                        file=temp_pgpass,\n-                        sep=':',\n-                        flush=True,\n-                    )\n-                    os.environ['PGPASSFILE'] = temp_pgpass.name\n-                except UnicodeEncodeError:\n-                    # If the current locale can't encode the data, let the\n-                    # user input the password manually.\n-                    pass\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            subprocess.run(args, check=True, env=subprocess_env)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n-            if temp_pgpass:\n-                temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n-                    del os.environ['PGPASSFILE']\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n",
  "test_patch": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,6 @@\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -11,23 +12,17 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n     def _run_it(self, dbinfo):\n         \"\"\"\n         That function invokes the runshell command, while mocking\n-        subprocess.call. It returns a 2-tuple with:\n+        subprocess.run(). It returns a 2-tuple with:\n         - The command line list\n-        - The content of the file pointed by environment PGPASSFILE, or None.\n+        - The the value of the PGPASSWORD environment variable, or None.\n         \"\"\"\n-        def _mock_subprocess_call(*args):\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n             self.subprocess_args = list(*args)\n-            if 'PGPASSFILE' in os.environ:\n-                with open(os.environ['PGPASSFILE']) as f:\n-                    self.pgpass = f.read().strip()  # ignore line endings\n-            else:\n-                self.pgpass = None\n-            return 0\n-        self.subprocess_args = None\n-        self.pgpass = None\n-        with mock.patch('subprocess.call', new=_mock_subprocess_call):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n-        return self.subprocess_args, self.pgpass\n+        return self.subprocess_args, self.pgpassword\n \n     def test_basic(self):\n         self.assertEqual(\n@@ -39,7 +34,7 @@ def test_basic(self):\n                 'port': '444',\n             }), (\n                 ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n-                'somehost:444:dbname:someuser:somepassword',\n+                'somepassword',\n             )\n         )\n \n@@ -66,28 +61,13 @@ def test_column(self):\n                 'port': '444',\n             }), (\n                 ['psql', '-U', 'some:user', '-h', '::1', '-p', '444', 'dbname'],\n-                '\\\\:\\\\:1:444:dbname:some\\\\:user:some\\\\:password',\n-            )\n-        )\n-\n-    def test_escape_characters(self):\n-        self.assertEqual(\n-            self._run_it({\n-                'database': 'dbname',\n-                'user': 'some\\\\user',\n-                'password': 'some\\\\password',\n-                'host': 'somehost',\n-                'port': '444',\n-            }), (\n-                ['psql', '-U', 'some\\\\user', '-h', 'somehost', '-p', '444', 'dbname'],\n-                'somehost:444:dbname:some\\\\\\\\user:some\\\\\\\\password',\n+                'some:password',\n             )\n         )\n \n     def test_accent(self):\n         username = 'rôle'\n         password = 'sésame'\n-        pgpass_string = 'somehost:444:dbname:%s:%s' % (username, password)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -97,20 +77,20 @@ def test_accent(self):\n                 'port': '444',\n             }), (\n                 ['psql', '-U', username, '-h', 'somehost', '-p', '444', 'dbname'],\n-                pgpass_string,\n+                password,\n             )\n         )\n \n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n-        def _mock_subprocess_call(*args):\n+        def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n             self.assertEqual(handler, signal.SIG_IGN)\n \n         sigint_handler = signal.getsignal(signal.SIGINT)\n         # The default handler isn't SIG_IGN.\n         self.assertNotEqual(sigint_handler, signal.SIG_IGN)\n-        with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n         self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "problem_statement": "Use subprocess.run and PGPASSWORD for client in postgres backend\nDescription\n\t\n​subprocess.run was added in python 3.5 (which is the minimum version since Django 2.1). This function allows you to pass a custom environment for the subprocess.\nUsing this in django.db.backends.postgres.client to set PGPASSWORD simplifies the code and makes it more reliable.\n",
  "hints_text": "",
  "created_at": "2019-02-11T01:19:56Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_accent (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_basic (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_column (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_nopass (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"SIGINT is ignored in Python and passed to psql to abort quries.\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.554520",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}