{
  "repo": "django/django",
  "instance_id": "django__django-13236",
  "base_commit": "20799cc0a6d98816b9ef0577e24691bd26b80d7d",
  "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -538,6 +538,8 @@ def alter_field(self, model, old_field, new_field, strict=False):\n         If `strict` is True, raise errors if the old column does not match\n         `old_field` precisely.\n         \"\"\"\n+        if not self._field_should_be_altered(old_field, new_field):\n+            return\n         # Ensure this field is even column-based\n         old_db_params = old_field.db_parameters(connection=self.connection)\n         old_type = old_db_params['type']\n@@ -1034,6 +1036,13 @@ def _field_indexes_sql(self, model, field):\n             output.append(self._create_index_sql(model, [field]))\n         return output\n \n+    def _field_should_be_altered(self, old_field, new_field):\n+        # Don't alter when changing only a field name.\n+        return (\n+            old_field.column != new_field.column or\n+            old_field.deconstruct()[1:] != new_field.deconstruct()[1:]\n+        )\n+\n     def _field_should_be_indexed(self, model, field):\n         return field.db_index and not field.unique\n \ndiff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -99,6 +99,8 @@ def alter_db_table(self, model, old_db_table, new_db_table, disable_constraints=\n             super().alter_db_table(model, old_db_table, new_db_table)\n \n     def alter_field(self, model, old_field, new_field, strict=False):\n+        if not self._field_should_be_altered(old_field, new_field):\n+            return\n         old_field_name = old_field.name\n         table_name = model._meta.db_table\n         _, old_column_name = old_field.get_attname_column()\n",
  "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1632,6 +1632,48 @@ def test_rename_field(self):\n         self.assertEqual(definition[1], [])\n         self.assertEqual(definition[2], {'model_name': \"Pony\", 'old_name': \"pink\", 'new_name': \"blue\"})\n \n+    def test_rename_field_with_db_column(self):\n+        project_state = self.apply_operations('test_rfwdbc', ProjectState(), operations=[\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('field', models.IntegerField(db_column='db_field')),\n+                ('fk_field', models.ForeignKey(\n+                    'Pony',\n+                    models.CASCADE,\n+                    db_column='db_fk_field',\n+                )),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameField('Pony', 'field', 'renamed_field')\n+        operation.state_forwards('test_rfwdbc', new_state)\n+        self.assertIn('renamed_field', new_state.models['test_rfwdbc', 'pony'].fields)\n+        self.assertNotIn('field', new_state.models['test_rfwdbc', 'pony'].fields)\n+        self.assertColumnExists('test_rfwdbc_pony', 'db_field')\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards('test_rfwdbc', editor, project_state, new_state)\n+        self.assertColumnExists('test_rfwdbc_pony', 'db_field')\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards('test_rfwdbc', editor, new_state, project_state)\n+        self.assertColumnExists('test_rfwdbc_pony', 'db_field')\n+\n+        new_state = project_state.clone()\n+        operation = migrations.RenameField('Pony', 'fk_field', 'renamed_fk_field')\n+        operation.state_forwards('test_rfwdbc', new_state)\n+        self.assertIn('renamed_fk_field', new_state.models['test_rfwdbc', 'pony'].fields)\n+        self.assertNotIn('fk_field', new_state.models['test_rfwdbc', 'pony'].fields)\n+        self.assertColumnExists('test_rfwdbc_pony', 'db_fk_field')\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards('test_rfwdbc', editor, project_state, new_state)\n+        self.assertColumnExists('test_rfwdbc_pony', 'db_fk_field')\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards('test_rfwdbc', editor, new_state, project_state)\n+        self.assertColumnExists('test_rfwdbc_pony', 'db_fk_field')\n+\n     def test_rename_missing_field(self):\n         state = ProjectState()\n         state.add_model(ModelState('app', 'model', []))\n",
  "problem_statement": "RenameField with db_column should be a noop.\nDescription\n\t \n\t\t(last modified by Iuri de Silvio)\n\t \nRenameField with db_column should be a noop because it is only the Django column that changed, the database still have the same db_column.\n",
  "hints_text": "",
  "created_at": "2020-07-25T10:08:53Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_rename_field_with_db_column (migrations.test_operations.OperationTests)\"]",
  "PASS_TO_PASS": "[\"test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_model (migrations.test_operations.FieldOperationTests)\", \"test_references_model_mixin (migrations.test_operations.TestCreateModel)\", \"test_add_field_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_create_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_delete_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_indexes_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_add_binaryfield (migrations.test_operations.OperationTests)\", \"test_add_charfield (migrations.test_operations.OperationTests)\", \"test_add_constraint (migrations.test_operations.OperationTests)\", \"test_add_constraint_combinable (migrations.test_operations.OperationTests)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)\", \"test_add_covering_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_field (migrations.test_operations.OperationTests)\", \"test_add_field_m2m (migrations.test_operations.OperationTests)\", \"test_add_field_preserve_default (migrations.test_operations.OperationTests)\", \"test_add_index (migrations.test_operations.OperationTests)\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_add_or_constraint (migrations.test_operations.OperationTests)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_textfield (migrations.test_operations.OperationTests)\", \"test_alter_field (migrations.test_operations.OperationTests)\", \"test_alter_field_m2m (migrations.test_operations.OperationTests)\", \"test_alter_field_pk (migrations.test_operations.OperationTests)\", \"test_alter_field_pk_fk (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_with_index (migrations.test_operations.OperationTests)\", \"test_alter_fk (migrations.test_operations.OperationTests)\", \"test_alter_fk_non_fk (migrations.test_operations.OperationTests)\", \"test_alter_index_together (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests)\", \"test_alter_model_managers (migrations.test_operations.OperationTests)\", \"test_alter_model_managers_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_options (migrations.test_operations.OperationTests)\", \"test_alter_model_options_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_table (migrations.test_operations.OperationTests)\", \"test_alter_model_table_m2m (migrations.test_operations.OperationTests)\", \"test_alter_model_table_none (migrations.test_operations.OperationTests)\", \"test_alter_model_table_noop (migrations.test_operations.OperationTests)\", \"test_alter_order_with_respect_to (migrations.test_operations.OperationTests)\", \"test_alter_unique_together (migrations.test_operations.OperationTests)\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests)\", \"A field may be migrated from AutoField to BigAutoField.\", \"test_column_name_quoting (migrations.test_operations.OperationTests)\", \"test_create_model (migrations.test_operations.OperationTests)\", \"test_create_model_inheritance (migrations.test_operations.OperationTests)\", \"test_create_model_m2m (migrations.test_operations.OperationTests)\", \"test_create_model_managers (migrations.test_operations.OperationTests)\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_unique_after (migrations.test_operations.OperationTests)\", \"test_create_proxy_model (migrations.test_operations.OperationTests)\", \"test_create_unmanaged_model (migrations.test_operations.OperationTests)\", \"test_delete_model (migrations.test_operations.OperationTests)\", \"test_delete_mti_model (migrations.test_operations.OperationTests)\", \"test_delete_proxy_model (migrations.test_operations.OperationTests)\", \"test_model_with_bigautofield (migrations.test_operations.OperationTests)\", \"test_remove_constraint (migrations.test_operations.OperationTests)\", \"test_remove_covering_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_field (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)\", \"test_remove_fk (migrations.test_operations.OperationTests)\", \"test_remove_index (migrations.test_operations.OperationTests)\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_rename_field (migrations.test_operations.OperationTests)\", \"test_rename_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"RenameModel renames a many-to-many column after a RenameField.\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests)\", \"test_rename_missing_field (migrations.test_operations.OperationTests)\", \"test_rename_model (migrations.test_operations.OperationTests)\", \"test_rename_model_state_forwards (migrations.test_operations.OperationTests)\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_fk (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_superclass_fk (migrations.test_operations.OperationTests)\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests)\", \"test_run_python (migrations.test_operations.OperationTests)\", \"test_run_python_atomic (migrations.test_operations.OperationTests)\", \"test_run_python_noop (migrations.test_operations.OperationTests)\", \"test_run_python_related_assignment (migrations.test_operations.OperationTests)\", \"test_run_sql (migrations.test_operations.OperationTests)\", \"test_run_sql_noop (migrations.test_operations.OperationTests)\", \"test_run_sql_params (migrations.test_operations.OperationTests)\", \"test_run_sql_params_invalid (migrations.test_operations.OperationTests)\", \"test_separate_database_and_state (migrations.test_operations.OperationTests)\", \"test_separate_database_and_state2 (migrations.test_operations.OperationTests)\", \"A field may be migrated from SmallAutoField to AutoField.\", \"A field may be migrated from SmallAutoField to BigAutoField.\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.648340",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}