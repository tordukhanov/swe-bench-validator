{
  "repo": "django/django",
  "instance_id": "django__django-16693",
  "base_commit": "45ecd9acca9b36093e274f47b6877a5f79108d9e",
  "patch": "diff --git a/django/template/context.py b/django/template/context.py\n--- a/django/template/context.py\n+++ b/django/template/context.py\n@@ -251,7 +251,15 @@ def bind_template(self, template):\n         processors = template.engine.template_context_processors + self._processors\n         updates = {}\n         for processor in processors:\n-            updates.update(processor(self.request))\n+            context = processor(self.request)\n+            try:\n+                updates.update(context)\n+            except TypeError as e:\n+                raise TypeError(\n+                    f\"Context processor {processor.__qualname__} didn't return a \"\n+                    \"dictionary.\"\n+                ) from e\n+\n         self.dicts[self._processors_index] = updates\n \n         try:\n",
  "test_patch": "diff --git a/tests/template_tests/test_context.py b/tests/template_tests/test_context.py\n--- a/tests/template_tests/test_context.py\n+++ b/tests/template_tests/test_context.py\n@@ -10,7 +10,7 @@\n     VariableDoesNotExist,\n )\n from django.template.context import RenderContext\n-from django.test import RequestFactory, SimpleTestCase\n+from django.test import RequestFactory, SimpleTestCase, override_settings\n \n \n class ContextTests(SimpleTestCase):\n@@ -222,6 +222,10 @@ def test_set_upward_with_push_no_match(self):\n         self.assertEqual(c.dicts[-1][\"a\"], 2)\n \n \n+def context_process_returning_none(request):\n+    return None\n+\n+\n class RequestContextTests(SimpleTestCase):\n     request_factory = RequestFactory()\n \n@@ -276,3 +280,26 @@ def test_modify_context_and_render(self):\n         context = RequestContext(request, {})\n         context[\"foo\"] = \"foo\"\n         self.assertEqual(template.render(context), \"foo\")\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+                \"OPTIONS\": {\n+                    \"context_processors\": [\n+                        \"django.template.context_processors.request\",\n+                        \"template_tests.test_context.context_process_returning_none\",\n+                    ],\n+                },\n+            }\n+        ],\n+    )\n+    def test_template_context_processor_returning_none(self):\n+        request_context = RequestContext(HttpRequest())\n+        msg = (\n+            \"Context processor context_process_returning_none didn't return a \"\n+            \"dictionary.\"\n+        )\n+        with self.assertRaisesMessage(TypeError, msg):\n+            with request_context.bind_template(Template(\"\")):\n+                pass\n",
  "problem_statement": "Improve error message for incorrect context processors\nDescription\n\t\nIf you write a template context processor but return the wrong type, for example None by missing the return statement:\ndef data(request):\n\tdata = {\"something\": True}\nThen currently the error message is very mysterious:\nInternal Server Error: /\nTraceback (most recent call last):\n ...\n File \"/..../site-packages/django/template/backends/django.py\", line 61, in render\n\treturn self.template.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/..../site-packages/django/template/base.py\", line 173, in render\n\twith context.bind_template(self):\n File \"/.../lib/python3.11/contextlib.py\", line 137, in __enter__\n\treturn next(self.gen)\n\t\t ^^^^^^^^^^^^^^\n File \"/..../site-packages/django/template/context.py\", line 254, in bind_template\n\tupdates.update(processor(self.request))\nTypeError: 'NoneType' object is not iterable\nIf a view returns the wrong type, Django raises a nice error message:\nThe view example.views.index didn't return an HttpResponse object. It returned None instead.\nI suggest we do the same for context processors. If we use try/except around the updates.update() line, it will not slow down normal processing any noticeable amount, thanks to Python 3.11's “zero-cost” exception handling: ​https://docs.python.org/3.11/whatsnew/3.11.html#misc\n",
  "hints_text": "",
  "created_at": "2023-03-28T08:23:24Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_template_context_processor_returning_none (template_tests.test_context.RequestContextTests.test_template_context_processor_returning_none)\"]",
  "PASS_TO_PASS": "[\"test_context (template_tests.test_context.ContextTests.test_context)\", \"#21765 -- equality comparison should work\", \"#24273 -- Copy twice shouldn't raise an exception\", \"test_flatten_context (template_tests.test_context.ContextTests.test_flatten_context)\", \"Context.push() with a Context argument should work.\", \"test_push_context_manager (template_tests.test_context.ContextTests.test_push_context_manager)\", \"test_push_context_manager_with_context_object (template_tests.test_context.ContextTests.test_push_context_manager_with_context_object)\", \"test_push_proper_layering (template_tests.test_context.ContextTests.test_push_proper_layering)\", \"test_render_context (template_tests.test_context.ContextTests.test_render_context)\", \"#17778 -- Variable shouldn't resolve RequestContext methods\", \"test_set_upward (template_tests.test_context.ContextTests.test_set_upward)\", \"test_set_upward_empty_context (template_tests.test_context.ContextTests.test_set_upward_empty_context)\", \"The highest context which has the given key is used.\", \"The highest context is used if the given key isn't found.\", \"test_setdefault (template_tests.test_context.ContextTests.test_setdefault)\", \"test_update_context_manager (template_tests.test_context.ContextTests.test_update_context_manager)\", \"test_update_context_manager_with_context_object (template_tests.test_context.ContextTests.test_update_context_manager_with_context_object)\", \"test_update_proper_layering (template_tests.test_context.ContextTests.test_update_proper_layering)\", \"test_context_comparable (template_tests.test_context.RequestContextTests.test_context_comparable)\", \"#15721 -- ``{% include %}`` and ``RequestContext`` should work\", \"test_modify_context_and_render (template_tests.test_context.RequestContextTests.test_modify_context_and_render)\", \"Optimized RequestContext construction (#7116).\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.768904",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}