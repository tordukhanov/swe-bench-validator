{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-15086",
  "base_commit": "21fc1d97452d4e3a6d744d0eef95ecaf7e87859c",
  "patch": "diff --git a/sklearn/linear_model/coordinate_descent.py b/sklearn/linear_model/coordinate_descent.py\n--- a/sklearn/linear_model/coordinate_descent.py\n+++ b/sklearn/linear_model/coordinate_descent.py\n@@ -1112,7 +1112,8 @@ def fit(self, X, y):\n             # Let us not impose fortran ordering so far: it is\n             # not useful for the cross-validation loop and will be done\n             # by the model fitting itself\n-            X = check_array(X, 'csc', copy=False)\n+            X = check_array(X, 'csc', dtype=[np.float64, np.float32],\n+                            copy=False)\n             if sparse.isspmatrix(X):\n                 if (hasattr(reference_to_old_X, \"data\") and\n                    not np.may_share_memory(reference_to_old_X.data, X.data)):\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_coordinate_descent.py b/sklearn/linear_model/tests/test_coordinate_descent.py\n--- a/sklearn/linear_model/tests/test_coordinate_descent.py\n+++ b/sklearn/linear_model/tests/test_coordinate_descent.py\n@@ -888,3 +888,13 @@ def fit(self, X, y):\n     clf = LassoCV(precompute=precompute)\n     clf.fit(X, y)\n     assert calls > 0\n+\n+\n+def test_multi_task_lasso_cv_dtype():\n+    n_samples, n_features = 10, 3\n+    rng = np.random.RandomState(42)\n+    X = rng.binomial(1, .5, size=(n_samples, n_features))\n+    X = X.astype(int)  # make it explicit that X is int\n+    y = X[:, [0, 0]].copy()\n+    est = MultiTaskLassoCV(n_alphas=5, fit_intercept=True).fit(X, y)\n+    assert_array_almost_equal(est.coef_, [[1, 0, 0]] * 2, decimal=3)\n",
  "problem_statement": "MultiTaskLassoCV with fit_intercept=True returns wrong results\nThere is something wrong with `MultiTaskLassoCV` and binary features. It always returns the same mse for all the alphas and hence chooses a huge regularization zeroing out all coefficients. The same holds for `MultiTaskElasticNet` too. However, this doesn't happen with `LassoCV`. Moreover it doesn't happen if I set `fit_intercept=False`, or if I generate random normal features.\r\n\r\nI am working on anaconda, windows system, with python 3.7.1 and with scikit-learn v0.21.3, numpy v1.16.2.\r\n\r\nConsider the following code:\r\n```python\r\nimport numpy as np\r\nfrom sklearn.linear_model import MultiTaskLassoCV, LassoCV\r\nnp.random.seed(123)\r\nn = 1000\r\nd = 3\r\nX = np.random.binomial(1, .5, size=(n, d))\r\ny = X[:, [0, 0]].copy()\r\nest = MultiTaskLassoCV(n_alphas=5, fit_intercept=True).fit(X, y)\r\nprint(est.alpha_)\r\nprint(est.mse_path_)\r\nprint(est.coef_)\r\nprint(est.intercept_)\r\n```\r\nIt returns\r\n```\r\n0.35353076317627596\r\n[[0.25018905 0.2499848  0.24997129]\r\n [0.25018905 0.2499848  0.24997129]\r\n [0.25018905 0.2499848  0.24997129]\r\n [0.25018905 0.2499848  0.24997129]\r\n [0.25018905 0.2499848  0.24997129]]\r\n[[ 0. -0.  0.]\r\n [ 0. -0.  0.]]\r\n[0.496 0.496]\r\n```\r\n\r\nOn the other hand, if I generate normal features X, then things are good:\r\n```python\r\nimport numpy as np\r\nfrom sklearn.linear_model import MultiTaskLassoCV, LassoCV\r\nnp.random.seed(123)\r\nn = 1000\r\nd = 3\r\nX = np.random.normal(0, 1, size=(n, d))\r\ny = X[:, [0, 0]].copy()\r\nest = MultiTaskLassoCV(n_alphas=5, fit_intercept=True).fit(X, y)\r\nprint(est.alpha_)\r\nprint(est.mse_path_)\r\nprint(est.coef_)\r\nprint(est.intercept_)\r\n```\r\nwhich returns:\r\n```\r\n0.0012801092295924427\r\n[[7.79350312e-01 9.01338896e-01 9.76488985e-01]\r\n [2.46452208e-02 2.85028386e-02 3.34510373e-02]\r\n [7.79350312e-04 9.01338896e-04 1.05781468e-03]\r\n [2.46452208e-05 2.85028386e-05 3.34510373e-05]\r\n [7.79350312e-07 9.01338896e-07 1.05781468e-06]]\r\n[[ 0.999  0.    -0.   ]\r\n [ 0.999  0.    -0.   ]]\r\n[2.72463186e-06 2.72463186e-06]\r\n```\r\n\r\nAlso weirdly if I set `fit_intercept=False`, then things are good even with binary features:\r\n```python\r\nimport numpy as np\r\nfrom sklearn.linear_model import MultiTaskLassoCV, LassoCV\r\nnp.random.seed(123)\r\nn = 1000\r\nd = 3\r\nX = np.random.binomial(1, .5, size=(n, d))\r\ny = X[:, [0, 0]].copy()\r\nest = MultiTaskLassoCV(n_alphas=5, fit_intercept=False).fit(X, y)\r\nprint(est.alpha_)\r\nprint(est.mse_path_)\r\nprint(est.coef_)\r\nprint(est.intercept_)\r\n```\r\nwhich returns\r\n```\r\n0.0007014499269370555\r\n[[5.05988024e-01 4.83136584e-01 4.89033340e-01]\r\n [1.63288855e-02 1.52781203e-02 1.54645920e-02]\r\n [5.16364698e-04 4.83136584e-04 4.89033340e-04]\r\n [1.63288855e-05 1.52781203e-05 1.54645920e-05]\r\n [5.16364698e-07 4.83136584e-07 4.89033340e-07]]\r\n[[0.999 0.    0.   ]\r\n [0.999 0.    0.   ]]\r\n0.0\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2019-09-24T20:11:18Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/linear_model/tests/test_coordinate_descent.py::test_multi_task_lasso_cv_dtype\"]",
  "PASS_TO_PASS": "[\"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_zero\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_toy\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_toy\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv_with_some_model_selection\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_cv_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_path_return_models_vs_new_return_gives_same_coefficients\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_path_parameters\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_alpha_warning\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_cv_positive_constraint\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_uniform_targets\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multi_task_lasso_and_enet\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_readonly_data\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multi_task_lasso_readonly_data\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_multitarget\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multioutput_enetcv_error\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_multitask_enet_and_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_1d_multioutput_enet_and_multitask_enet_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_1d_multioutput_lasso_and_multitask_lasso_cv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_input_dtype_enet_and_lassocv\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_precompute_invalid_argument\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_random_descent\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_dense_descent_paths\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_check_input_false\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_True[True]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_True[False]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_copy_X_False_check_input_False\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_overrided_gram_matrix\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_non_float_y[ElasticNet]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lasso_non_float_y[Lasso]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_float_precision\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_l1_ratio\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_coef_shape_not_zero\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_coordinate_descent[Lasso-1-kwargs0]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_coordinate_descent[Lasso-1-kwargs1]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_coordinate_descent[MultiTaskLasso-2-kwargs2]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_coordinate_descent[MultiTaskLasso-2-kwargs3]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_convergence_warnings\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_sparse_input_convergence_warning\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lassoCV_does_not_set_precompute[True-True]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lassoCV_does_not_set_precompute[auto-False]\", \"sklearn/linear_model/tests/test_coordinate_descent.py::test_lassoCV_does_not_set_precompute[False-False]\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.010844",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}