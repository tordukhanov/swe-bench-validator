{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-6820",
  "base_commit": "b3523ae86eb68467dca536122bc4034639887a63",
  "patch": "diff --git a/pylint/config/utils.py b/pylint/config/utils.py\n--- a/pylint/config/utils.py\n+++ b/pylint/config/utils.py\n@@ -201,16 +201,30 @@ def _enable_all_extensions(run: Run, value: str | None) -> None:\n \n \n PREPROCESSABLE_OPTIONS: dict[\n-    str, tuple[bool, Callable[[Run, str | None], None]]\n+    str, tuple[bool, Callable[[Run, str | None], None], int]\n ] = {  # pylint: disable=consider-using-namedtuple-or-dataclass\n-    \"--init-hook\": (True, _init_hook),\n-    \"--rcfile\": (True, _set_rcfile),\n-    \"--output\": (True, _set_output),\n-    \"--load-plugins\": (True, _add_plugins),\n-    \"--verbose\": (False, _set_verbose_mode),\n-    \"-v\": (False, _set_verbose_mode),\n-    \"--enable-all-extensions\": (False, _enable_all_extensions),\n+    # pylint: disable=wrong-spelling-in-comment\n+    # Argparse by default allows abbreviations. It behaves differently\n+    # if you turn this off, so we also turn it on. We mimick this\n+    # by allowing some abbreviations or incorrect spelling here.\n+    # The integer at the end of the tuple indicates how many letters\n+    # should match, include the '-'. 0 indicates a full match.\n+    #\n+    # Clashes with --init-(import)\n+    \"--init-hook\": (True, _init_hook, 8),\n+    # Clashes with --r(ecursive)\n+    \"--rcfile\": (True, _set_rcfile, 4),\n+    # Clashes with --output(-format)\n+    \"--output\": (True, _set_output, 0),\n+    # Clashes with --lo(ng-help)\n+    \"--load-plugins\": (True, _add_plugins, 5),\n+    # Clashes with --v(ariable-rgx)\n+    \"--verbose\": (False, _set_verbose_mode, 4),\n+    \"-v\": (False, _set_verbose_mode, 2),\n+    # Clashes with --enable\n+    \"--enable-all-extensions\": (False, _enable_all_extensions, 9),\n }\n+# pylint: enable=wrong-spelling-in-comment\n \n \n def _preprocess_options(run: Run, args: Sequence[str]) -> list[str]:\n@@ -230,12 +244,21 @@ def _preprocess_options(run: Run, args: Sequence[str]) -> list[str]:\n         except ValueError:\n             option, value = argument, None\n \n-        if option not in PREPROCESSABLE_OPTIONS:\n+        matched_option = None\n+        for option_name, data in PREPROCESSABLE_OPTIONS.items():\n+            to_match = data[2]\n+            if to_match == 0:\n+                if option == option_name:\n+                    matched_option = option_name\n+            elif option.startswith(option_name[:to_match]):\n+                matched_option = option_name\n+\n+        if matched_option is None:\n             processed_args.append(argument)\n             i += 1\n             continue\n \n-        takearg, cb = PREPROCESSABLE_OPTIONS[option]\n+        takearg, cb, _ = PREPROCESSABLE_OPTIONS[matched_option]\n \n         if takearg and value is None:\n             i += 1\n",
  "test_patch": "diff --git a/tests/config/test_find_default_config_files.py b/tests/config/test_find_default_config_files.py\n--- a/tests/config/test_find_default_config_files.py\n+++ b/tests/config/test_find_default_config_files.py\n@@ -165,6 +165,21 @@ def test_verbose_output_no_config(capsys: CaptureFixture) -> None:\n             assert \"No config file found, using default configuration\" in out.err\n \n \n+@pytest.mark.usefixtures(\"pop_pylintrc\")\n+def test_verbose_abbreviation(capsys: CaptureFixture) -> None:\n+    \"\"\"Test that we correctly handle an abbreviated pre-processable option.\"\"\"\n+    with tempdir() as chroot:\n+        with fake_home():\n+            chroot_path = Path(chroot)\n+            testutils.create_files([\"a/b/c/d/__init__.py\"])\n+            os.chdir(chroot_path / \"a/b/c\")\n+            with pytest.raises(SystemExit):\n+                Run([\"--ve\"])\n+            out = capsys.readouterr()\n+            # This output only exists when launched in verbose mode\n+            assert \"No config file found, using default configuration\" in out.err\n+\n+\n @pytest.mark.parametrize(\n     \"content,expected\",\n     [\n",
  "problem_statement": "Using ``--load-plugin`` instead of ``--load-plugins`` in CLI silently fail to load the plugin\n### Bug description\r\n\r\nSee [this comment](https://github.com/PyCQA/pylint/issues/6803#issuecomment-1145152401)\r\n\r\n``pylint b.py --load-plugins=pylint.extensions.redefined_loop_name``\r\n```\r\n************* Module b\r\nb.py:5:8: W2901: Redefining 'instrument' from loop (line 3) (redefined-loop-name)\r\n```\r\n\r\n### Command used\r\n\r\n```shell\r\npylint b.py --load-plugin=pylint.extensions.redefined_loop_name\r\n```\r\n\r\n### Pylint output\r\n\r\n```shell\r\nNo warning, ``redefined-loop-name`` or anything else.\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nWarning that load-plugin is not the right argument.\r\n\r\n### Pylint version\r\n\r\n```shell\r\n2.14.0\r\n```\r\n\n",
  "hints_text": "Not sure what the best approach is here. We allow abbreviations of arguments as `argparse` behaves differently on <3.8 (I think, but don't pin me on the version) if you don't allow abbreviations.\r\nHowever, `load-plugins` is handled by an `if \"load-plugins\"` check. So while `argparse` recognises it as the abbreviation of an existing configuration option, it doesn't know how to handle it and our `if` statement doesn't allow catching such abbreviations.\nShould we handle it a little like argparse maybe changing the condition to ``if \"load-plugins\".startswith(option) and len(option) > 6`` ?",
  "created_at": "2022-06-03T07:58:00Z",
  "version": "2.15",
  "FAIL_TO_PASS": "[\"tests/config/test_find_default_config_files.py::test_verbose_abbreviation\"]",
  "PASS_TO_PASS": "[\"tests/config/test_find_default_config_files.py::test_pylintrc\", \"tests/config/test_find_default_config_files.py::test_pylintrc_parentdir\", \"tests/config/test_find_default_config_files.py::test_pylintrc_parentdir_no_package\", \"tests/config/test_find_default_config_files.py::test_verbose_output_no_config\", \"tests/config/test_find_default_config_files.py::test_toml_has_config[-False]\", \"tests/config/test_find_default_config_files.py::test_toml_has_config[(not\", \"tests/config/test_find_default_config_files.py::test_toml_has_config[\\\\n[build-system]\", \"tests/config/test_find_default_config_files.py::test_toml_has_config[\\\\n[tool.pylint]\", \"tests/config/test_find_default_config_files.py::test_cfg_has_config[-False]\", \"tests/config/test_find_default_config_files.py::test_cfg_has_config[(not\", \"tests/config/test_find_default_config_files.py::test_cfg_has_config[\\\\n[metadata]\", \"tests/config/test_find_default_config_files.py::test_non_existent_home\"]",
  "environment_setup_commit": "e90702074e68e20dc8e5df5013ee3ecf22139c3e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.914299",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}