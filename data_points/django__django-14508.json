{
  "repo": "django/django",
  "instance_id": "django__django-14508",
  "base_commit": "316cc34d046ad86e100227772294f906fae1c2e5",
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -782,11 +782,7 @@ def contribute_to_class(self, cls, name, private_only=False):\n         self.model = cls\n         cls._meta.add_field(self, private=private_only)\n         if self.column:\n-            # Don't override classmethods with the descriptor. This means that\n-            # if you have a classmethod and a field with the same name, then\n-            # such fields can't be deferred (we don't have a check for this).\n-            if not getattr(cls, self.attname, None):\n-                setattr(cls, self.attname, self.descriptor_class(self))\n+            setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n             # Don't override a get_FOO_display() method defined explicitly on\n             # this class, but don't check methods derived from inheritance, to\n",
  "test_patch": "diff --git a/tests/check_framework/tests.py b/tests/check_framework/tests.py\n--- a/tests/check_framework/tests.py\n+++ b/tests/check_framework/tests.py\n@@ -314,6 +314,12 @@ class ModelWithDescriptorCalledCheck(models.Model):\n                 obj=ModelWithAttributeCalledCheck,\n                 id='models.E020'\n             ),\n+            Error(\n+                \"The 'ModelWithFieldCalledCheck.check()' class method is \"\n+                \"currently overridden by %r.\" % ModelWithFieldCalledCheck.check,\n+                obj=ModelWithFieldCalledCheck,\n+                id='models.E020'\n+            ),\n             Error(\n                 \"The 'ModelWithRelatedManagerCalledCheck.check()' class method is \"\n                 \"currently overridden by %r.\" % ModelWithRelatedManagerCalledCheck.check,\ndiff --git a/tests/defer/models.py b/tests/defer/models.py\n--- a/tests/defer/models.py\n+++ b/tests/defer/models.py\n@@ -44,3 +44,16 @@ def refresh_from_db(self, using=None, fields=None, **kwargs):\n             if fields.intersection(deferred_fields):\n                 fields = fields.union(deferred_fields)\n         super().refresh_from_db(using, fields, **kwargs)\n+\n+\n+class ShadowParent(models.Model):\n+    \"\"\"\n+    ShadowParent declares a scalar, rather than a field. When this is\n+    overridden, the field value, rather than the scalar value must still be\n+    used when the field is deferred.\n+    \"\"\"\n+    name = 'aphrodite'\n+\n+\n+class ShadowChild(ShadowParent):\n+    name = models.CharField(default='adonis', max_length=6)\ndiff --git a/tests/defer/tests.py b/tests/defer/tests.py\n--- a/tests/defer/tests.py\n+++ b/tests/defer/tests.py\n@@ -3,6 +3,7 @@\n \n from .models import (\n     BigChild, Child, ChildProxy, Primary, RefreshPrimaryProxy, Secondary,\n+    ShadowChild,\n )\n \n \n@@ -165,6 +166,11 @@ def test_only_baseclass_when_subclass_has_no_added_fields(self):\n         self.assertEqual(obj.name, \"c1\")\n         self.assertEqual(obj.value, \"foo\")\n \n+    def test_defer_of_overridden_scalar(self):\n+        ShadowChild.objects.create()\n+        obj = ShadowChild.objects.defer('name').get()\n+        self.assertEqual(obj.name, 'adonis')\n+\n \n class BigChildDeferTests(AssertionMixin, TestCase):\n     @classmethod\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1212,9 +1212,8 @@ def test_property_and_related_field_accessor_clash(self):\n         class Model(models.Model):\n             fk = models.ForeignKey('self', models.CASCADE)\n \n-            @property\n-            def fk_id(self):\n-                pass\n+        # Override related field accessor.\n+        Model.fk_id = property(lambda self: 'ERROR')\n \n         self.assertEqual(Model.check(), [\n             Error(\ndiff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -34,7 +34,12 @@ class DerivedGrandChild(AbstractDescendant):\n         self.assertEqual(DerivedChild._meta.get_field('name').max_length, 50)\n         self.assertEqual(DerivedGrandChild._meta.get_field('name').max_length, 50)\n \n-    def test_multiple_inheritance_cannot_shadow_inherited_field(self):\n+    def test_multiple_inheritance_allows_inherited_field(self):\n+        \"\"\"\n+        Single layer multiple inheritance is as expected, deriving the\n+        inherited field from the first base.\n+        \"\"\"\n+\n         class ParentA(models.Model):\n             name = models.CharField(max_length=255)\n \n@@ -50,14 +55,76 @@ class Meta:\n         class Child(ParentA, ParentB):\n             pass\n \n-        self.assertEqual(Child.check(), [\n-            Error(\n-                \"The field 'name' clashes with the field 'name' from model \"\n-                \"'model_inheritance.child'.\",\n-                obj=Child._meta.get_field('name'),\n-                id='models.E006',\n-            ),\n-        ])\n+        self.assertEqual(Child.check(), [])\n+        inherited_field = Child._meta.get_field('name')\n+        self.assertTrue(isinstance(inherited_field, models.CharField))\n+        self.assertEqual(inherited_field.max_length, 255)\n+\n+    def test_diamond_shaped_multiple_inheritance_is_depth_first(self):\n+        \"\"\"\n+        In contrast to standard Python MRO, resolution of inherited fields is\n+        strictly depth-first, rather than breadth-first in diamond-shaped cases.\n+\n+        This is because a copy of the parent field descriptor is placed onto\n+        the model class in ModelBase.__new__(), rather than the attribute\n+        lookup going via bases. (It only **looks** like inheritance.)\n+\n+        Here, Child inherits name from Root, rather than ParentB.\n+        \"\"\"\n+\n+        class Root(models.Model):\n+            name = models.CharField(max_length=255)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ParentA(Root):\n+            class Meta:\n+                abstract = True\n+\n+        class ParentB(Root):\n+            name = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(ParentA, ParentB):\n+            pass\n+\n+        self.assertEqual(Child.check(), [])\n+        inherited_field = Child._meta.get_field('name')\n+        self.assertTrue(isinstance(inherited_field, models.CharField))\n+        self.assertEqual(inherited_field.max_length, 255)\n+\n+    def test_target_field_may_be_pushed_down(self):\n+        \"\"\"\n+        Where the Child model needs to inherit a field from a different base\n+        than that given by depth-first resolution, the target field can be\n+        **pushed down** by being re-declared.\n+        \"\"\"\n+\n+        class Root(models.Model):\n+            name = models.CharField(max_length=255)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ParentA(Root):\n+            class Meta:\n+                abstract = True\n+\n+        class ParentB(Root):\n+            name = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(ParentA, ParentB):\n+            name = models.IntegerField()\n+\n+        self.assertEqual(Child.check(), [])\n+        inherited_field = Child._meta.get_field('name')\n+        self.assertTrue(isinstance(inherited_field, models.IntegerField))\n \n     def test_multiple_inheritance_cannot_shadow_concrete_inherited_field(self):\n         class ConcreteParent(models.Model):\ndiff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -2,6 +2,7 @@\n \n from django.core.exceptions import FieldError, ValidationError\n from django.db import connection, models\n+from django.db.models.query_utils import DeferredAttribute\n from django.test import SimpleTestCase, TestCase\n from django.test.utils import CaptureQueriesContext, isolate_apps\n \n@@ -222,6 +223,36 @@ def test_queryset_class_getitem(self):\n         self.assertIs(models.QuerySet[Post, Post], models.QuerySet)\n         self.assertIs(models.QuerySet[Post, int, str], models.QuerySet)\n \n+    def test_shadow_parent_attribute_with_field(self):\n+        class ScalarParent(models.Model):\n+            foo = 1\n+\n+        class ScalarOverride(ScalarParent):\n+            foo = models.IntegerField()\n+\n+        self.assertEqual(type(ScalarOverride.foo), DeferredAttribute)\n+\n+    def test_shadow_parent_property_with_field(self):\n+        class PropertyParent(models.Model):\n+            @property\n+            def foo(self):\n+                pass\n+\n+        class PropertyOverride(PropertyParent):\n+            foo = models.IntegerField()\n+\n+        self.assertEqual(type(PropertyOverride.foo), DeferredAttribute)\n+\n+    def test_shadow_parent_method_with_field(self):\n+        class MethodParent(models.Model):\n+            def foo(self):\n+                pass\n+\n+        class MethodOverride(MethodParent):\n+            foo = models.IntegerField()\n+\n+        self.assertEqual(type(MethodOverride.foo), DeferredAttribute)\n+\n \n class ModelInheritanceDataTests(TestCase):\n     @classmethod\n",
  "problem_statement": "Overwriting a property with field during model inheritance.\nDescription\n\t\nDocumentation says (in â€‹https://docs.djangoproject.com/en/1.3/topics/db/models/#field-name-hiding-is-not-permitted paragraph) that:\nThis restriction only applies to attributes which are Field instances. Normal Python attributes can be overridden if you wish. It also only applies to the name of the attribute as Python sees it: if you are manually specifying the database column name, you can have the same column name appearing in both a child and an ancestor model for multi-table inheritance (they are columns in two different database tables).\nHowever.. I came up today with setup like this:\n 1 from django.db import models\n 2 \n 3 # Create your models here.\n 4 \n 5 class SomeTestModel(models.Model):\n 6\t some_field = models.CharField(max_length=100)\n 7 \n 8\t class Meta:\n 9\t\t abstract = True\n10 \n11\t @property\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n12\t def other_field(self):\n13\t\t return \"[OTHER] %s\" % self.some_field\n14 \n15 \n16 \n17 class OtherModel(SomeTestModel):\n18\t other_field = models.CharField(max_length=100)\n19 \n20 \n21 class AndMoreOther(SomeTestModel):\n22\t not_important_field = models.CharField(max_length=100)\nAnd then if you do:\n>>> from testapp.models import *\n>>> o = OtherModel()\nTraceback (most recent call last):\n File \"<console>\", line 1, in <module>\n File \"/home/arturstudio/PROJEKTY/tempdjango/inh/src/django/django/db/models/base.py\", line 357, in __init__\n\tsetattr(self, field.attname, val)\nAttributeError: can't set attribute\nSince my models where a lot bigger and more complicate, it took me almost all day to figure out that the problem was a @property from a base model, and my suggestion is that there should be at least a warning somewhere (during model's init perhaps) that could be more precise about why attribute couldn't been set. (or attribute to which object (either Model or Field).\nI tried it on 1.2 and 1.4 pre-alpha SVN-16338\nTo reproduce you just need to put the models.py from above in some app.\n",
  "hints_text": "I can confirm that this bug exists. It happens with CharFields, but not ForeignKeys. I haven't actually checked, but I'm guessing that the problem lies in the use of contribute_to_class, which would mean that the attribute with the field's name would never actually be set on the class - and thus the property would not be overridden... If that is the problem, one possible solution would be to just always set the attribute with the field's name to None.\nI made this work by defining the property dynamically inside the parent model definition: class SomeTestModel(models.Model): some_field = models.CharField(max_length=100) class Meta: abstract = True @classmethod def __new__(cls, *args, **kwargs): inst = models.Model.__new__(cls, *args, **kwargs) if cls is SomeTestModel: inst.other_field = property(lambda x: \"[OTHER] %s\" % getattr(x, 'some_field')) return inst\nAdded a try ... except statement that throws a more descriptive error message. That way the user can know the error lies within the use of the @property descriptor and can simply modify the name of the field.\nI don't think the proposed error-reraising is a good idea. For one thing, we can't be sure that the AttributeError is in fact due to a property from an abstract base class, it could be due to a definition of __setattr__, a metaclass, or possibly other even more diabolical things. For another, when we can avoid it it's a bad idea to obscure the original traceback by catching one exception and raising another one in its place. melinath's suggestion to set all fields as class attributes so they override descriptors from a parent class is certainly worth considering, as it would make models behave more like regular Python classes. This could result in some backwards-incompatibility; would need to look into it more to get a clearer sense of what cases might cause trouble, but I think it's probably acceptable if documented in the release notes.\nSets attributes with property decorators to the class with a None value\nI modified the add_to_class method to check if the value of the attribute is a property. If it is it sets the attribute to the class with a None value. I took melinath's suggestion too set the field's name to None.This does fix the bug, and does not break test in model_inheritance_regress. However, as developer carljm, pointed out, backwards-incompatibility may be present as the patch adds 4 unit test failures.\nPatch no longer applies cleanly.\nI stumbled upon this bug lately using django 1.8 and am willing to provide a patch. The main problem seems that creating an attribute containing a django field on a model does not overwrite any descriptors (with __set__ defined) from ancestor classes, which does not match the behavior of standard python classes. It makes sense to me that the attributes corresponding to model fields are not set until the class is instantiated, since the values for these fields are not available on class creation. Therefore my suggested solution would be very similar to Thomas_Moronez's patch. What confuses me though is that the proposed patch seems to not call contribute_to_class. In my opinion there are three possible solutions: delete overwrite all class attributes with None that will be overwritten by fields later (e.g. in add_to_class after the \"contribute-to-class\" check\") delete overwrite class attributes with None that have a __set__ method defined set the class attributes to a specific value (e.g. a to be written class) to mark them as to be overwritten later (melinath's suggestion) Is this still considered a bug and if so which one is the preferred solution?\nâ€‹PR",
  "created_at": "2021-06-09T15:04:31Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_model_check_method_not_shadowed (check_framework.tests.CheckFrameworkReservedNamesTests)\", \"In contrast to standard Python MRO, resolution of inherited fields is\", \"Single layer multiple inheritance is as expected, deriving the\", \"test_shadow_parent_attribute_with_field (model_inheritance.tests.ModelInheritanceTests)\", \"test_shadow_parent_method_with_field (model_inheritance.tests.ModelInheritanceTests)\", \"test_shadow_parent_property_with_field (model_inheritance.tests.ModelInheritanceTests)\", \"test_defer_of_overridden_scalar (defer.tests.DeferTests)\"]",
  "PASS_TO_PASS": "[\"test_register_and_run_checks (check_framework.tests.SystemCheckFrameworkTests)\", \"test_register_no_kwargs_error (check_framework.tests.SystemCheckFrameworkTests)\", \"test_register_run_checks_non_iterable (check_framework.tests.SystemCheckFrameworkTests)\", \"test_equal_to_same_constructed_check (check_framework.tests.MessageTests)\", \"test_equal_to_self (check_framework.tests.MessageTests)\", \"test_invalid_level (check_framework.tests.MessageTests)\", \"test_not_equal_to_different_constructed_check (check_framework.tests.MessageTests)\", \"test_not_equal_to_non_check (check_framework.tests.MessageTests)\", \"test_printing (check_framework.tests.MessageTests)\", \"test_printing_field_error (check_framework.tests.MessageTests)\", \"test_printing_manager_error (check_framework.tests.MessageTests)\", \"test_printing_model_error (check_framework.tests.MessageTests)\", \"test_printing_no_hint (check_framework.tests.MessageTests)\", \"test_printing_no_object (check_framework.tests.MessageTests)\", \"test_printing_with_given_id (check_framework.tests.MessageTests)\", \"test_registered_check_did_run (check_framework.tests.ChecksRunDuringTests)\", \"test_abstract_fk_related_name (model_inheritance.tests.InheritanceSameModelNameTests)\", \"test_silenced_error (check_framework.tests.SilencingCheckTests)\", \"test_silenced_warning (check_framework.tests.SilencingCheckTests)\", \"test_unique (model_inheritance.tests.InheritanceUniqueTests)\", \"test_unique_together (model_inheritance.tests.InheritanceUniqueTests)\", \"test_check_jsonfield (invalid_models_tests.test_models.JSONFieldTests)\", \"test_check_jsonfield_required_db_features (invalid_models_tests.test_models.JSONFieldTests)\", \"test_ordering_pointing_to_json_field_value (invalid_models_tests.test_models.JSONFieldTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_list (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_list (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_m2m (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_valid_model (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_db_column_clash (invalid_models_tests.test_models.FieldNamesTests)\", \"test_ending_with_underscore (invalid_models_tests.test_models.FieldNamesTests)\", \"test_including_separator (invalid_models_tests.test_models.FieldNamesTests)\", \"test_pk (invalid_models_tests.test_models.FieldNamesTests)\", \"test_field_name_clash_with_child_accessor (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_id_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_inheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multigeneration_inheritance (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multiinheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_fail_level (check_framework.tests.CheckCommandTests)\", \"test_given_app (check_framework.tests.CheckCommandTests)\", \"test_given_tag (check_framework.tests.CheckCommandTests)\", \"test_invalid_tag (check_framework.tests.CheckCommandTests)\", \"test_list_deployment_check_included (check_framework.tests.CheckCommandTests)\", \"test_list_deployment_check_omitted (check_framework.tests.CheckCommandTests)\", \"test_list_tags (check_framework.tests.CheckCommandTests)\", \"test_list_tags_empty (check_framework.tests.CheckCommandTests)\", \"test_simple_call (check_framework.tests.CheckCommandTests)\", \"test_tags_deployment_check_included (check_framework.tests.CheckCommandTests)\", \"test_tags_deployment_check_omitted (check_framework.tests.CheckCommandTests)\", \"test_defer_baseclass_when_subclass_has_added_field (defer.tests.BigChildDeferTests)\", \"test_defer_subclass (defer.tests.BigChildDeferTests)\", \"test_defer_subclass_both (defer.tests.BigChildDeferTests)\", \"test_only_baseclass_when_subclass_has_added_field (defer.tests.BigChildDeferTests)\", \"test_only_subclass (defer.tests.BigChildDeferTests)\", \"test_custom_refresh_on_deferred_loading (defer.tests.TestDefer2)\", \"When an inherited model is fetched from the DB, its PK is also fetched.\", \"Ensure select_related together with only on a proxy model behaves\", \"test_eq (defer.tests.TestDefer2)\", \"test_refresh_not_loading_deferred_fields (defer.tests.TestDefer2)\", \"test_abstract_model_with_regular_python_mixin_mro (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_cannot_override_indirect_abstract_field (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_multi_inheritance_field_clashes (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_multiple_inheritance_cannot_shadow_concrete_inherited_field (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_override_field_with_attr (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_override_one2one_relation_auto_field_clashes (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_overriding_field_removed_by_concrete_model (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_reverse_foreign_key (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_shadow_related_name_when_set_to_none (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_shadowed_fkey_id (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_single_parent (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"Where the Child model needs to inherit a field from a different base\", \"test_virtual_field (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_abstract (model_inheritance.tests.ModelInheritanceTests)\", \"test_abstract_parent_link (model_inheritance.tests.ModelInheritanceTests)\", \"Creating a child with non-abstract parents only issues INSERTs.\", \"test_custompk_m2m (model_inheritance.tests.ModelInheritanceTests)\", \"test_eq (model_inheritance.tests.ModelInheritanceTests)\", \"test_inherited_ordering_pk_desc (model_inheritance.tests.ModelInheritanceTests)\", \"test_init_subclass (model_inheritance.tests.ModelInheritanceTests)\", \"test_meta_fields_and_ordering (model_inheritance.tests.ModelInheritanceTests)\", \"test_mixin_init (model_inheritance.tests.ModelInheritanceTests)\", \"test_model_with_distinct_accessors (model_inheritance.tests.ModelInheritanceTests)\", \"test_model_with_distinct_related_query_name (model_inheritance.tests.ModelInheritanceTests)\", \"test_queryset_class_getitem (model_inheritance.tests.ModelInheritanceTests)\", \"test_reverse_relation_for_different_hierarchy_tree (model_inheritance.tests.ModelInheritanceTests)\", \"test_set_name (model_inheritance.tests.ModelInheritanceTests)\", \"Updating a field of a model subclass doesn't issue an UPDATE\", \"test_defer (defer.tests.DeferTests)\", \"test_defer_baseclass_when_subclass_has_no_added_fields (defer.tests.DeferTests)\", \"test_defer_extra (defer.tests.DeferTests)\", \"test_defer_foreign_keys_are_deferred_and_not_traversed (defer.tests.DeferTests)\", \"test_defer_none_to_clear_deferred_set (defer.tests.DeferTests)\", \"test_defer_on_an_already_deferred_field (defer.tests.DeferTests)\", \"test_defer_only_chaining (defer.tests.DeferTests)\", \"test_defer_select_related_raises_invalid_query (defer.tests.DeferTests)\", \"test_defer_values_does_not_defer (defer.tests.DeferTests)\", \"test_defer_with_select_related (defer.tests.DeferTests)\", \"test_get (defer.tests.DeferTests)\", \"test_only (defer.tests.DeferTests)\", \"test_only_baseclass_when_subclass_has_no_added_fields (defer.tests.DeferTests)\", \"test_only_none_raises_error (defer.tests.DeferTests)\", \"test_only_select_related_raises_invalid_query (defer.tests.DeferTests)\", \"test_only_values_does_not_defer (defer.tests.DeferTests)\", \"test_only_with_select_related (defer.tests.DeferTests)\", \"test_saving_object_with_deferred_field (defer.tests.DeferTests)\", \"test_exclude_inherited_on_null (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_filter_inherited_model (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_filter_inherited_on_null (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_filter_on_parent_returns_object_of_parent_type (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_inherited_does_not_exist_exception (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_inherited_multiple_objects_returned_exception (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_cache_reuse (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_child_one_to_one_link (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_child_one_to_one_link_on_nonrelated_objects (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_fields_available_for_filtering_in_child_model (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_related_objects_for_inherited_models (model_inheritance.tests.ModelInheritanceDataTests)\", \"#23370 - Should be able to defer child fields when using\", \"test_select_related_works_on_parent_model_fields (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_update_inherited_model (model_inheritance.tests.ModelInheritanceDataTests)\", \"Update queries do not generate unnecessary queries (#18304).\", \"test_update_works_on_parent_and_child_models_at_once (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_values_works_on_parent_model_fields (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_just_order_with_respect_to_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_just_ordering_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_lazy_reference_checks (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_autogenerated_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_autogenerated_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_field_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_field_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_to_concrete_and_proxy_allowed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_unmanaged_shadow_models_not_checked (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_beginning_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_contains_double_underscores (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_ending_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_non_valid (invalid_models_tests.test_models.OtherModelTests)\", \"test_onetoone_with_explicit_parent_link_parent_model (invalid_models_tests.test_models.OtherModelTests)\", \"test_onetoone_with_parent_model (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_allows_registered_lookups (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_non_iterable (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_multiple_times_to_model_fields (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_lookup_not_transform (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_non_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_related_model_pk (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_two_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_with_order_with_respect_to (invalid_models_tests.test_models.OtherModelTests)\", \"test_property_and_related_field_accessor_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_single_primary_key (invalid_models_tests.test_models.OtherModelTests)\", \"test_swappable_missing_app (invalid_models_tests.test_models.OtherModelTests)\", \"test_swappable_missing_app_name (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_m2m_through_same_model_with_different_through_fields (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_m2m_through_same_relationship (invalid_models_tests.test_models.OtherModelTests)\", \"test_unique_primary_key (invalid_models_tests.test_models.OtherModelTests)\", \"test_func_index (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_complex_expression_custom_lookup (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_fk (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_missing_field_nested (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_required_db_features (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_condition (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_condition_required_db_features (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_include (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_include_required_db_features (invalid_models_tests.test_models.IndexesTests)\", \"test_max_name_length (invalid_models_tests.test_models.IndexesTests)\", \"test_name_constraints (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests)\", \"test_check_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_joined_fields_complex_check (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_pk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_reverse_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_reverse_o2o (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraints (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraints_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_deferrable_unique_constraint (invalid_models_tests.test_models.ConstraintsTests)\", \"test_deferrable_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_expression_custom_lookup (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_pointing_to_missing_field_nested (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_condition_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_condition_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_reverse_o2o (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_condition (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_condition_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_include (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_include_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.695671",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}