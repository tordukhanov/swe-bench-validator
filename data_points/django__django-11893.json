{
  "repo": "django/django",
  "instance_id": "django__django-11893",
  "base_commit": "0f843fdd5b9b2f2307148465cd60f4e1b2befbb4",
  "patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -25,7 +25,7 @@\n     URLInput,\n )\n from django.utils import formats\n-from django.utils.dateparse import parse_duration\n+from django.utils.dateparse import parse_datetime, parse_duration\n from django.utils.duration import duration_string\n from django.utils.ipv6 import clean_ipv6_address\n from django.utils.regex_helper import _lazy_re_compile\n@@ -459,7 +459,12 @@ def to_python(self, value):\n         if isinstance(value, datetime.date):\n             result = datetime.datetime(value.year, value.month, value.day)\n             return from_current_timezone(result)\n-        result = super().to_python(value)\n+        try:\n+            result = parse_datetime(value.strip())\n+        except ValueError:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n+        if not result:\n+            result = super().to_python(value)\n         return from_current_timezone(result)\n \n     def strptime(self, value, format):\n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_datetimefield.py b/tests/forms_tests/field_tests/test_datetimefield.py\n--- a/tests/forms_tests/field_tests/test_datetimefield.py\n+++ b/tests/forms_tests/field_tests/test_datetimefield.py\n@@ -2,6 +2,7 @@\n \n from django.forms import DateTimeField, ValidationError\n from django.test import SimpleTestCase\n+from django.utils.timezone import get_fixed_timezone, utc\n \n \n class DateTimeFieldTest(SimpleTestCase):\n@@ -31,6 +32,19 @@ def test_datetimefield_clean(self):\n             ('10/25/06 14:30:00', datetime(2006, 10, 25, 14, 30)),\n             ('10/25/06 14:30', datetime(2006, 10, 25, 14, 30)),\n             ('10/25/06', datetime(2006, 10, 25, 0, 0)),\n+            # ISO 8601 formats.\n+            (\n+                '2014-09-23T22:34:41.614804',\n+                datetime(2014, 9, 23, 22, 34, 41, 614804),\n+            ),\n+            ('2014-09-23T22:34:41', datetime(2014, 9, 23, 22, 34, 41)),\n+            ('2014-09-23T22:34', datetime(2014, 9, 23, 22, 34)),\n+            ('2014-09-23', datetime(2014, 9, 23, 0, 0)),\n+            ('2014-09-23T22:34Z', datetime(2014, 9, 23, 22, 34, tzinfo=utc)),\n+            (\n+                '2014-09-23T22:34+07:00',\n+                datetime(2014, 9, 23, 22, 34, tzinfo=get_fixed_timezone(420)),\n+            ),\n             # Whitespace stripping.\n             (' 2006-10-25   14:30:45 ', datetime(2006, 10, 25, 14, 30, 45)),\n             (' 2006-10-25 ', datetime(2006, 10, 25, 0, 0)),\n@@ -39,6 +53,11 @@ def test_datetimefield_clean(self):\n             (' 10/25/2006 ', datetime(2006, 10, 25, 0, 0)),\n             (' 10/25/06 14:30:45 ', datetime(2006, 10, 25, 14, 30, 45)),\n             (' 10/25/06 ', datetime(2006, 10, 25, 0, 0)),\n+            (\n+                ' 2014-09-23T22:34:41.614804 ',\n+                datetime(2014, 9, 23, 22, 34, 41, 614804),\n+            ),\n+            (' 2014-09-23T22:34Z ', datetime(2014, 9, 23, 22, 34, tzinfo=utc)),\n         ]\n         f = DateTimeField()\n         for value, expected_datetime in tests:\n@@ -54,9 +73,11 @@ def test_datetimefield_clean_invalid(self):\n             f.clean('2006-10-25 4:30 p.m.')\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.clean('   ')\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean('2014-09-23T28:23')\n         f = DateTimeField(input_formats=['%Y %m %d %I:%M %p'])\n         with self.assertRaisesMessage(ValidationError, msg):\n-            f.clean('2006-10-25 14:30:45')\n+            f.clean('2006.10.25 14:30:45')\n \n     def test_datetimefield_clean_input_formats(self):\n         tests = [\n@@ -72,6 +93,8 @@ def test_datetimefield_clean_input_formats(self):\n                     datetime(2006, 10, 25, 14, 30, 59, 200),\n                 ),\n                 ('2006 10 25 2:30 PM', datetime(2006, 10, 25, 14, 30)),\n+                # ISO-like formats are always accepted.\n+                ('2006-10-25 14:30:45', datetime(2006, 10, 25, 14, 30, 45)),\n             )),\n             ('%Y.%m.%d %H:%M:%S.%f', (\n                 (\ndiff --git a/tests/forms_tests/tests/test_input_formats.py b/tests/forms_tests/tests/test_input_formats.py\n--- a/tests/forms_tests/tests/test_input_formats.py\n+++ b/tests/forms_tests/tests/test_input_formats.py\n@@ -703,7 +703,7 @@ def test_localized_dateTimeField_with_inputformat(self):\n         f = forms.DateTimeField(input_formats=[\"%H.%M.%S %m.%d.%Y\", \"%H.%M %m-%d-%Y\"], localize=True)\n         # Parse a date in an unaccepted format; get an error\n         with self.assertRaises(forms.ValidationError):\n-            f.clean('2010-12-21 13:30:05')\n+            f.clean('2010/12/21 13:30:05')\n         with self.assertRaises(forms.ValidationError):\n             f.clean('1:30:05 PM 21/12/2010')\n         with self.assertRaises(forms.ValidationError):\n@@ -711,8 +711,12 @@ def test_localized_dateTimeField_with_inputformat(self):\n \n         # Parse a date in a valid format, get a parsed result\n         result = f.clean('13.30.05 12.21.2010')\n-        self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))\n-\n+        self.assertEqual(datetime(2010, 12, 21, 13, 30, 5), result)\n+        # ISO format is always valid.\n+        self.assertEqual(\n+            f.clean('2010-12-21 13:30:05'),\n+            datetime(2010, 12, 21, 13, 30, 5),\n+        )\n         # The parsed result does a round trip to the same format\n         text = f.widget.format_value(result)\n         self.assertEqual(text, \"21.12.2010 13:30:05\")\n@@ -733,7 +737,7 @@ def test_dateTimeField(self):\n         f = forms.DateTimeField()\n         # Parse a date in an unaccepted format; get an error\n         with self.assertRaises(forms.ValidationError):\n-            f.clean('2010-12-21 13:30:05')\n+            f.clean('2010/12/21 13:30:05')\n \n         # Parse a date in a valid format, get a parsed result\n         result = f.clean('1:30:05 PM 21/12/2010')\n@@ -756,7 +760,7 @@ def test_localized_dateTimeField(self):\n         f = forms.DateTimeField(localize=True)\n         # Parse a date in an unaccepted format; get an error\n         with self.assertRaises(forms.ValidationError):\n-            f.clean('2010-12-21 13:30:05')\n+            f.clean('2010/12/21 13:30:05')\n \n         # Parse a date in a valid format, get a parsed result\n         result = f.clean('1:30:05 PM 21/12/2010')\n@@ -781,7 +785,7 @@ def test_dateTimeField_with_inputformat(self):\n         with self.assertRaises(forms.ValidationError):\n             f.clean('13:30:05 21.12.2010')\n         with self.assertRaises(forms.ValidationError):\n-            f.clean('2010-12-21 13:30:05')\n+            f.clean('2010/12/21 13:30:05')\n \n         # Parse a date in a valid format, get a parsed result\n         result = f.clean('12.21.2010 13:30:05')\n@@ -806,7 +810,7 @@ def test_localized_dateTimeField_with_inputformat(self):\n         with self.assertRaises(forms.ValidationError):\n             f.clean('13:30:05 21.12.2010')\n         with self.assertRaises(forms.ValidationError):\n-            f.clean('2010-12-21 13:30:05')\n+            f.clean('2010/12/21 13:30:05')\n \n         # Parse a date in a valid format, get a parsed result\n         result = f.clean('12.21.2010 13:30:05')\n@@ -877,7 +881,7 @@ def test_dateTimeField_with_inputformat(self):\n         f = forms.DateTimeField(input_formats=[\"%I:%M:%S %p %d.%m.%Y\", \"%I:%M %p %d-%m-%Y\"])\n         # Parse a date in an unaccepted format; get an error\n         with self.assertRaises(forms.ValidationError):\n-            f.clean('2010-12-21 13:30:05')\n+            f.clean('2010/12/21 13:30:05')\n \n         # Parse a date in a valid format, get a parsed result\n         result = f.clean('1:30:05 PM 21.12.2010')\n@@ -900,7 +904,7 @@ def test_localized_dateTimeField_with_inputformat(self):\n         f = forms.DateTimeField(input_formats=[\"%I:%M:%S %p %d.%m.%Y\", \"%I:%M %p %d-%m-%Y\"], localize=True)\n         # Parse a date in an unaccepted format; get an error\n         with self.assertRaises(forms.ValidationError):\n-            f.clean('2010-12-21 13:30:05')\n+            f.clean('2010/12/21 13:30:05')\n \n         # Parse a date in a valid format, get a parsed result\n         result = f.clean('1:30:05 PM 21.12.2010')\ndiff --git a/tests/timezones/tests.py b/tests/timezones/tests.py\n--- a/tests/timezones/tests.py\n+++ b/tests/timezones/tests.py\n@@ -1081,11 +1081,6 @@ def test_form_with_other_timezone(self):\n             self.assertTrue(form.is_valid())\n             self.assertEqual(form.cleaned_data['dt'], datetime.datetime(2011, 9, 1, 10, 20, 30, tzinfo=UTC))\n \n-    def test_form_with_explicit_timezone(self):\n-        form = EventForm({'dt': '2011-09-01 17:20:30+07:00'})\n-        # Datetime inputs formats don't allow providing a time zone.\n-        self.assertFalse(form.is_valid())\n-\n     def test_form_with_non_existent_time(self):\n         with timezone.override(pytz.timezone('Europe/Paris')):\n             form = EventForm({'dt': '2011-03-27 02:30:00'})\n",
  "problem_statement": "DateTimeField doesn't accept ISO 8601 formatted date string\nDescription\n\t\nDateTimeField doesn't accept ISO 8601 formatted date string. Differene is that ISO format allows date and time separator to be capital T letter. (Format being YYYY-MM-DDTHH:MM:SS. Django expects to have only space as a date and time separator.\n",
  "hints_text": "ISO8601 is a good machine format, but not a particularly nice human readable format. Form processing is primarily about human-readable input. If you disagree, the DateTimeField input formats are configurable (DATETIME_INPUT_FORMATS), so you can add ISO8601 format in your own projects if you want.\nI think the problem can't be resolved with DATETIME_INPUT_FORMATS tweaking. ISO8601 format allows timezone info: '2010-09-01T19:52:15+04:00'. Such strings can't be parsed with python's strptime because python's strptime doesn't support '%z' format char (​http://bugs.python.org/issue6641). So DATETIME_INPUT_FORMATS directive is not helpful for ISO8601 handling. The solution is probably to use custom form field.\nReplying to russellm: ISO8601 is a good machine format, but not a particularly nice human readable format. Form processing is primarily about human-readable input. If you disagree, the DateTimeField input formats are configurable (DATETIME_INPUT_FORMATS), so you can add ISO8601 format in your own projects if you want. Hi Russell, I understand your reasoning at the time this was closed for not supporting the T separator. However, this is not relevant again because of the way HTML5 provides the new Input Types. By default, using the datetime-local Input Type results in the format of YYYY-MM-DDTHH:MM. It would definitely make it nice to allow for that Input Type default to work properly with DateTimeField.\nReopening, considering comment:3, Python issue 6641 being fixed on Python 3 and the presence of django.utils.formats.ISO_INPUT_FORMATS.\nNote that this is not yet really reopened. An oversight?\nAs kmike mentioned above, customizing the form field with an input_formats containing the timezone marker %z doesn't help — at least on Python 2.7. For anyone hitting this, I worked around it by using a custom form field and overriding the strptime method: from django.utils.dateparse import parse_datetime from django.utils.encoding import force_str class ISODateTimeField(forms.DateTimeField): def strptime(self, value, format): return parse_datetime(force_str(value)) I use Django's own parse_datetime utility. Note this is limited to ISO datetimes, and effectively any input_formats are omitted.\nInterest for this is revived by the HTML5 <input type=\"datetime-local\"> which is sending input formatted with ISO 8601. ​https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local ​https://djangotricks.blogspot.com/2019/10/working-with-dates-and-times-in-forms.html ​PR",
  "created_at": "2019-10-09T10:14:53Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"Localized DateTimeFields with manually specified input formats can accept those formats\", \"test_datetimefield_clean (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest)\", \"test_datetimefield_clean_input_formats (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest)\", \"test_datetimefield_clean_invalid (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest)\"]",
  "PASS_TO_PASS": "[\"DateFields can parse dates in the default format\", \"DateFields with manually specified input formats can accept those formats\", \"Localized DateFields act as unlocalized widgets\", \"Localized DateFields with manually specified input formats can accept those formats\", \"DateTimeFields can parse dates in the default format\", \"DateTimeFields with manually specified input formats can accept those formats\", \"Localized DateTimeFields act as unlocalized widgets\", \"Localized DateFields in a non-localized environment act as unlocalized widgets\", \"Localized TimeFields act as unlocalized widgets\", \"Localized TimeFields with manually specified input formats can accept those formats\", \"TimeFields can parse dates in the default format\", \"TimeFields with manually specified input formats can accept those formats\", \"Localized TimeFields in a non-localized environment act as unlocalized widgets\", \"Localized DateTimeFields in a non-localized environment act as unlocalized widgets\", \"test_auto_now_and_auto_now_add (timezones.tests.LegacyDatabaseTests)\", \"test_aware_datetime_unsupported (timezones.tests.LegacyDatabaseTests)\", \"test_cursor_execute_accepts_naive_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_cursor_execute_returns_naive_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_filter_date_field_with_aware_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_naive_datetime (timezones.tests.LegacyDatabaseTests)\", \"test_naive_datetime_with_microsecond (timezones.tests.LegacyDatabaseTests)\", \"test_query_aggregation (timezones.tests.LegacyDatabaseTests)\", \"test_query_annotation (timezones.tests.LegacyDatabaseTests)\", \"test_query_datetime_lookups (timezones.tests.LegacyDatabaseTests)\", \"test_query_datetimes (timezones.tests.LegacyDatabaseTests)\", \"test_query_filter (timezones.tests.LegacyDatabaseTests)\", \"test_raw_sql (timezones.tests.LegacyDatabaseTests)\", \"test_datetimefield_changed (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest)\", \"test_datetimefield_not_required (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest)\", \"test_aware_datetime_in_utc (timezones.tests.SerializationTests)\", \"test_naive_datetime (timezones.tests.SerializationTests)\", \"test_naive_datetime_with_microsecond (timezones.tests.SerializationTests)\", \"test_form (timezones.tests.LegacyFormsTests)\", \"test_form_with_ambiguous_time (timezones.tests.LegacyFormsTests)\", \"test_form_with_non_existent_time (timezones.tests.LegacyFormsTests)\", \"test_model_form (timezones.tests.LegacyFormsTests)\", \"test_split_form (timezones.tests.LegacyFormsTests)\", \"test_date_and_time_template_filters (timezones.tests.TemplateTests)\", \"test_date_and_time_template_filters_honor_localtime (timezones.tests.TemplateTests)\", \"test_get_current_timezone_templatetag (timezones.tests.TemplateTests)\", \"test_get_current_timezone_templatetag_invalid_argument (timezones.tests.TemplateTests)\", \"test_get_current_timezone_templatetag_with_pytz (timezones.tests.TemplateTests)\", \"test_localtime_filters_do_not_raise_exceptions (timezones.tests.TemplateTests)\", \"test_localtime_filters_with_pytz (timezones.tests.TemplateTests)\", \"test_localtime_templatetag_and_filters (timezones.tests.TemplateTests)\", \"test_localtime_templatetag_invalid_argument (timezones.tests.TemplateTests)\", \"test_now_template_tag_uses_current_time_zone (timezones.tests.TemplateTests)\", \"test_timezone_templatetag (timezones.tests.TemplateTests)\", \"test_timezone_templatetag_invalid_argument (timezones.tests.TemplateTests)\", \"test_timezone_templatetag_with_pytz (timezones.tests.TemplateTests)\", \"test_tz_template_context_processor (timezones.tests.TemplateTests)\", \"test_form (timezones.tests.NewFormsTests)\", \"test_form_with_ambiguous_time (timezones.tests.NewFormsTests)\", \"test_form_with_non_existent_time (timezones.tests.NewFormsTests)\", \"test_form_with_other_timezone (timezones.tests.NewFormsTests)\", \"test_localized_form (timezones.tests.NewFormsTests)\", \"test_localized_model_form (timezones.tests.NewFormsTests)\", \"test_model_form (timezones.tests.NewFormsTests)\", \"test_split_form (timezones.tests.NewFormsTests)\", \"test_auto_now_and_auto_now_add (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_local_timezone (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_local_timezone_with_microsecond (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_other_timezone (timezones.tests.NewDatabaseTests)\", \"test_aware_datetime_in_utc (timezones.tests.NewDatabaseTests)\", \"test_cursor_execute_accepts_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_cursor_execute_returns_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_datetime_from_date (timezones.tests.NewDatabaseTests)\", \"test_filter_date_field_with_aware_datetime (timezones.tests.NewDatabaseTests)\", \"test_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_naive_datetime_with_microsecond (timezones.tests.NewDatabaseTests)\", \"test_null_datetime (timezones.tests.NewDatabaseTests)\", \"test_query_aggregation (timezones.tests.NewDatabaseTests)\", \"test_query_annotation (timezones.tests.NewDatabaseTests)\", \"test_query_convert_timezones (timezones.tests.NewDatabaseTests)\", \"test_query_datetime_lookups (timezones.tests.NewDatabaseTests)\", \"test_query_datetime_lookups_in_other_timezone (timezones.tests.NewDatabaseTests)\", \"test_query_datetimes (timezones.tests.NewDatabaseTests)\", \"test_query_datetimes_in_other_timezone (timezones.tests.NewDatabaseTests)\", \"test_query_filter (timezones.tests.NewDatabaseTests)\", \"test_query_filter_with_naive_datetime (timezones.tests.NewDatabaseTests)\", \"test_query_filter_with_pytz_timezones (timezones.tests.NewDatabaseTests)\", \"test_raw_sql (timezones.tests.NewDatabaseTests)\", \"test_update_with_timedelta (timezones.tests.NewDatabaseTests)\", \"test_change_editable (timezones.tests.AdminTests)\", \"test_change_editable_in_other_timezone (timezones.tests.AdminTests)\", \"test_change_readonly (timezones.tests.AdminTests)\", \"test_change_readonly_in_other_timezone (timezones.tests.AdminTests)\", \"test_changelist (timezones.tests.AdminTests)\", \"test_changelist_in_other_timezone (timezones.tests.AdminTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.587339",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}