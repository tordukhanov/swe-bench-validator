{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10360",
  "base_commit": "d951e55bc3419dbda809ed0aca17addeed8e9e30",
  "patch": "diff --git a/sphinx/domains/c.py b/sphinx/domains/c.py\n--- a/sphinx/domains/c.py\n+++ b/sphinx/domains/c.py\n@@ -21,8 +21,8 @@\n from sphinx.transforms import SphinxTransform\n from sphinx.transforms.post_transforms import ReferencesResolver\n from sphinx.util import logging\n-from sphinx.util.cfamily import (ASTAttribute, ASTBaseBase, ASTBaseParenExprList, BaseParser,\n-                                 DefinitionError, NoOldIdError, StringifyTransform,\n+from sphinx.util.cfamily import (ASTAttributeList, ASTBaseBase, ASTBaseParenExprList,\n+                                 BaseParser, DefinitionError, NoOldIdError, StringifyTransform,\n                                  UnsupportedMultiCharacterCharLiteral, anon_identifier_re,\n                                  binary_literal_re, char_literal_re, float_literal_re,\n                                  float_literal_suffix_re, hex_literal_re, identifier_re,\n@@ -687,7 +687,7 @@ def describe_signature(self, signode: Any, mode: str,\n \n \n class ASTParameters(ASTBase):\n-    def __init__(self, args: List[ASTFunctionParameter], attrs: List[ASTAttribute]) -> None:\n+    def __init__(self, args: List[ASTFunctionParameter], attrs: ASTAttributeList) -> None:\n         self.args = args\n         self.attrs = attrs\n \n@@ -705,9 +705,9 @@ def _stringify(self, transform: StringifyTransform) -> str:\n             first = False\n             res.append(str(a))\n         res.append(')')\n-        for attr in self.attrs:\n+        if len(self.attrs) != 0:\n             res.append(' ')\n-            res.append(transform(attr))\n+            res.append(transform(self.attrs))\n         return ''.join(res)\n \n     def describe_signature(self, signode: TextElement, mode: str,\n@@ -732,14 +732,14 @@ def describe_signature(self, signode: TextElement, mode: str,\n                 arg.describe_signature(signode, 'markType', env, symbol=symbol)\n             signode += addnodes.desc_sig_punctuation(')', ')')\n \n-        for attr in self.attrs:\n+        if len(self.attrs) != 0:\n             signode += addnodes.desc_sig_space()\n-            attr.describe_signature(signode)\n+            self.attrs.describe_signature(signode)\n \n \n class ASTDeclSpecsSimple(ASTBaseBase):\n     def __init__(self, storage: str, threadLocal: str, inline: bool,\n-                 restrict: bool, volatile: bool, const: bool, attrs: List[Any]) -> None:\n+                 restrict: bool, volatile: bool, const: bool, attrs: ASTAttributeList) -> None:\n         self.storage = storage\n         self.threadLocal = threadLocal\n         self.inline = inline\n@@ -761,7 +761,8 @@ def mergeWith(self, other: \"ASTDeclSpecsSimple\") -> \"ASTDeclSpecsSimple\":\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n         res: List[str] = []\n-        res.extend(transform(attr) for attr in self.attrs)\n+        if len(self.attrs) != 0:\n+            res.append(transform(self.attrs))\n         if self.storage:\n             res.append(self.storage)\n         if self.threadLocal:\n@@ -778,14 +779,15 @@ def _stringify(self, transform: StringifyTransform) -> str:\n \n     def describe_signature(self, modifiers: List[Node]) -> None:\n         def _add(modifiers: List[Node], text: str) -> None:\n-            if len(modifiers) > 0:\n+            if len(modifiers) != 0:\n                 modifiers.append(addnodes.desc_sig_space())\n             modifiers.append(addnodes.desc_sig_keyword(text, text))\n \n-        for attr in self.attrs:\n-            if len(modifiers) > 0:\n-                modifiers.append(addnodes.desc_sig_space())\n-            modifiers.append(attr.describe_signature(modifiers))\n+        if len(modifiers) != 0 and len(self.attrs) != 0:\n+            modifiers.append(addnodes.desc_sig_space())\n+        tempNode = nodes.TextElement()\n+        self.attrs.describe_signature(tempNode)\n+        modifiers.extend(tempNode.children)\n         if self.storage:\n             _add(modifiers, self.storage)\n         if self.threadLocal:\n@@ -1002,7 +1004,7 @@ def describe_signature(self, signode: TextElement, mode: str,\n \n class ASTDeclaratorPtr(ASTDeclarator):\n     def __init__(self, next: ASTDeclarator, restrict: bool, volatile: bool, const: bool,\n-                 attrs: Any) -> None:\n+                 attrs: ASTAttributeList) -> None:\n         assert next\n         self.next = next\n         self.restrict = restrict\n@@ -1025,9 +1027,8 @@ def require_space_after_declSpecs(self) -> bool:\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n         res = ['*']\n-        for a in self.attrs:\n-            res.append(transform(a))\n-        if len(self.attrs) > 0 and (self.restrict or self.volatile or self.const):\n+        res.append(transform(self.attrs))\n+        if len(self.attrs) != 0 and (self.restrict or self.volatile or self.const):\n             res.append(' ')\n         if self.restrict:\n             res.append('restrict')\n@@ -1049,9 +1050,8 @@ def describe_signature(self, signode: TextElement, mode: str,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n         verify_description_mode(mode)\n         signode += addnodes.desc_sig_punctuation('*', '*')\n-        for a in self.attrs:\n-            a.describe_signature(signode)\n-        if len(self.attrs) > 0 and (self.restrict or self.volatile or self.const):\n+        self.attrs.describe_signature(signode)\n+        if len(self.attrs) != 0 and (self.restrict or self.volatile or self.const):\n             signode += addnodes.desc_sig_space()\n \n         def _add_anno(signode: TextElement, text: str) -> None:\n@@ -1374,9 +1374,11 @@ def describe_signature(self, signode: TextElement, mode: str,\n \n \n class ASTEnumerator(ASTBase):\n-    def __init__(self, name: ASTNestedName, init: ASTInitializer) -> None:\n+    def __init__(self, name: ASTNestedName, init: Optional[ASTInitializer],\n+                 attrs: ASTAttributeList) -> None:\n         self.name = name\n         self.init = init\n+        self.attrs = attrs\n \n     def get_id(self, version: int, objectType: str, symbol: \"Symbol\") -> str:\n         return symbol.get_full_nested_name().get_id(version)\n@@ -1384,6 +1386,9 @@ def get_id(self, version: int, objectType: str, symbol: \"Symbol\") -> str:\n     def _stringify(self, transform: StringifyTransform) -> str:\n         res = []\n         res.append(transform(self.name))\n+        if len(self.attrs) != 0:\n+            res.append(' ')\n+            res.append(transform(self.attrs))\n         if self.init:\n             res.append(transform(self.init))\n         return ''.join(res)\n@@ -1392,6 +1397,9 @@ def describe_signature(self, signode: TextElement, mode: str,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n         verify_description_mode(mode)\n         self.name.describe_signature(signode, mode, env, symbol)\n+        if len(self.attrs) != 0:\n+            signode += addnodes.desc_sig_space()\n+            self.attrs.describe_signature(signode)\n         if self.init:\n             self.init.describe_signature(signode, 'markType', env, symbol)\n \n@@ -2641,13 +2649,7 @@ def _parse_parameters(self, paramMode: str) -> ASTParameters:\n                         'Expecting \",\" or \")\" in parameters, '\n                         'got \"%s\".' % self.current_char)\n \n-        attrs = []\n-        while True:\n-            attr = self._parse_attribute()\n-            if attr is None:\n-                break\n-            attrs.append(attr)\n-\n+        attrs = self._parse_attribute_list()\n         return ASTParameters(args, attrs)\n \n     def _parse_decl_specs_simple(self, outer: str, typed: bool) -> ASTDeclSpecsSimple:\n@@ -2706,7 +2708,7 @@ def _parse_decl_specs_simple(self, outer: str, typed: bool) -> ASTDeclSpecsSimpl\n                 continue\n             break\n         return ASTDeclSpecsSimple(storage, threadLocal, inline,\n-                                  restrict, volatile, const, attrs)\n+                                  restrict, volatile, const, ASTAttributeList(attrs))\n \n     def _parse_decl_specs(self, outer: str, typed: bool = True) -> ASTDeclSpecs:\n         if outer:\n@@ -2838,7 +2840,7 @@ def _parse_declarator(self, named: Union[bool, str], paramMode: str,\n             next = self._parse_declarator(named, paramMode, typed)\n             return ASTDeclaratorPtr(next=next,\n                                     restrict=restrict, volatile=volatile, const=const,\n-                                    attrs=attrs)\n+                                    attrs=ASTAttributeList(attrs))\n         if typed and self.current_char == '(':  # note: peeking, not skipping\n             # maybe this is the beginning of params, try that first,\n             # otherwise assume it's noptr->declarator > ( ptr-declarator )\n@@ -3033,6 +3035,7 @@ def _parse_enum(self) -> ASTEnum:\n \n     def _parse_enumerator(self) -> ASTEnumerator:\n         name = self._parse_nested_name()\n+        attrs = self._parse_attribute_list()\n         self.skip_ws()\n         init = None\n         if self.skip_string('='):\n@@ -3043,7 +3046,7 @@ def parser() -> ASTExpression:\n \n             initVal = self._parse_expression_fallback([], parser)\n             init = ASTInitializer(initVal)\n-        return ASTEnumerator(name, init)\n+        return ASTEnumerator(name, init, attrs)\n \n     def parse_pre_v3_type_definition(self) -> ASTDeclaration:\n         self.skip_ws()\ndiff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -21,8 +21,8 @@\n from sphinx.transforms import SphinxTransform\n from sphinx.transforms.post_transforms import ReferencesResolver\n from sphinx.util import logging\n-from sphinx.util.cfamily import (ASTAttribute, ASTBaseBase, ASTBaseParenExprList, BaseParser,\n-                                 DefinitionError, NoOldIdError, StringifyTransform,\n+from sphinx.util.cfamily import (ASTAttributeList, ASTBaseBase, ASTBaseParenExprList,\n+                                 BaseParser, DefinitionError, NoOldIdError, StringifyTransform,\n                                  UnsupportedMultiCharacterCharLiteral, anon_identifier_re,\n                                  binary_literal_re, char_literal_re, float_literal_re,\n                                  float_literal_suffix_re, hex_literal_re, identifier_re,\n@@ -2048,7 +2048,7 @@ class ASTParametersQualifiers(ASTBase):\n     def __init__(self, args: List[ASTFunctionParameter], volatile: bool, const: bool,\n                  refQual: Optional[str], exceptionSpec: ASTNoexceptSpec,\n                  trailingReturn: \"ASTType\",\n-                 override: bool, final: bool, attrs: List[ASTAttribute],\n+                 override: bool, final: bool, attrs: ASTAttributeList,\n                  initializer: Optional[str]) -> None:\n         self.args = args\n         self.volatile = volatile\n@@ -2118,9 +2118,9 @@ def _stringify(self, transform: StringifyTransform) -> str:\n             res.append(' final')\n         if self.override:\n             res.append(' override')\n-        for attr in self.attrs:\n+        if len(self.attrs) != 0:\n             res.append(' ')\n-            res.append(transform(attr))\n+            res.append(transform(self.attrs))\n         if self.initializer:\n             res.append(' = ')\n             res.append(self.initializer)\n@@ -2171,9 +2171,9 @@ def _add_anno(signode: TextElement, text: str) -> None:\n             _add_anno(signode, 'final')\n         if self.override:\n             _add_anno(signode, 'override')\n-        for attr in self.attrs:\n+        if len(self.attrs) != 0:\n             signode += addnodes.desc_sig_space()\n-            attr.describe_signature(signode)\n+            self.attrs.describe_signature(signode)\n         if self.initializer:\n             signode += addnodes.desc_sig_space()\n             signode += addnodes.desc_sig_punctuation('=', '=')\n@@ -2211,7 +2211,7 @@ def __init__(self, storage: str, threadLocal: bool, inline: bool, virtual: bool,\n                  explicitSpec: Optional[ASTExplicitSpec],\n                  consteval: bool, constexpr: bool, constinit: bool,\n                  volatile: bool, const: bool, friend: bool,\n-                 attrs: List[ASTAttribute]) -> None:\n+                 attrs: ASTAttributeList) -> None:\n         self.storage = storage\n         self.threadLocal = threadLocal\n         self.inline = inline\n@@ -2243,7 +2243,8 @@ def mergeWith(self, other: \"ASTDeclSpecsSimple\") -> \"ASTDeclSpecsSimple\":\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n         res: List[str] = []\n-        res.extend(transform(attr) for attr in self.attrs)\n+        if len(self.attrs) != 0:\n+            res.append(transform(self.attrs))\n         if self.storage:\n             res.append(self.storage)\n         if self.threadLocal:\n@@ -2270,12 +2271,8 @@ def _stringify(self, transform: StringifyTransform) -> str:\n \n     def describe_signature(self, signode: TextElement,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n-        addSpace = False\n-        for attr in self.attrs:\n-            if addSpace:\n-                signode += addnodes.desc_sig_space()\n-            addSpace = True\n-            attr.describe_signature(signode)\n+        self.attrs.describe_signature(signode)\n+        addSpace = len(self.attrs) != 0\n \n         def _add(signode: TextElement, text: str) -> bool:\n             if addSpace:\n@@ -2592,7 +2589,7 @@ def describe_signature(self, signode: TextElement, mode: str,\n \n class ASTDeclaratorPtr(ASTDeclarator):\n     def __init__(self, next: ASTDeclarator, volatile: bool, const: bool,\n-                 attrs: List[ASTAttribute]) -> None:\n+                 attrs: ASTAttributeList) -> None:\n         assert next\n         self.next = next\n         self.volatile = volatile\n@@ -2620,9 +2617,8 @@ def require_space_after_declSpecs(self) -> bool:\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n         res = ['*']\n-        for a in self.attrs:\n-            res.append(transform(a))\n-        if len(self.attrs) > 0 and (self.volatile or self.const):\n+        res.append(transform(self.attrs))\n+        if len(self.attrs) != 0 and (self.volatile or self.const):\n             res.append(' ')\n         if self.volatile:\n             res.append('volatile')\n@@ -2677,9 +2673,8 @@ def describe_signature(self, signode: TextElement, mode: str,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n         verify_description_mode(mode)\n         signode += addnodes.desc_sig_punctuation('*', '*')\n-        for a in self.attrs:\n-            a.describe_signature(signode)\n-        if len(self.attrs) > 0 and (self.volatile or self.const):\n+        self.attrs.describe_signature(signode)\n+        if len(self.attrs) != 0 and (self.volatile or self.const):\n             signode += addnodes.desc_sig_space()\n \n         def _add_anno(signode: TextElement, text: str) -> None:\n@@ -2697,7 +2692,7 @@ def _add_anno(signode: TextElement, text: str) -> None:\n \n \n class ASTDeclaratorRef(ASTDeclarator):\n-    def __init__(self, next: ASTDeclarator, attrs: List[ASTAttribute]) -> None:\n+    def __init__(self, next: ASTDeclarator, attrs: ASTAttributeList) -> None:\n         assert next\n         self.next = next\n         self.attrs = attrs\n@@ -2727,9 +2722,8 @@ def require_space_after_declSpecs(self) -> bool:\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n         res = ['&']\n-        for a in self.attrs:\n-            res.append(transform(a))\n-        if len(self.attrs) > 0 and self.next.require_space_after_declSpecs():\n+        res.append(transform(self.attrs))\n+        if len(self.attrs) != 0 and self.next.require_space_after_declSpecs():\n             res.append(' ')\n         res.append(transform(self.next))\n         return ''.join(res)\n@@ -2758,8 +2752,7 @@ def describe_signature(self, signode: TextElement, mode: str,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n         verify_description_mode(mode)\n         signode += addnodes.desc_sig_punctuation('&', '&')\n-        for a in self.attrs:\n-            a.describe_signature(signode)\n+        self.attrs.describe_signature(signode)\n         if len(self.attrs) > 0 and self.next.require_space_after_declSpecs():\n             signode += addnodes.desc_sig_space()\n         self.next.describe_signature(signode, mode, env, symbol)\n@@ -3349,7 +3342,7 @@ def describe_signature(self, signode: TextElement, mode: str,\n \n class ASTClass(ASTBase):\n     def __init__(self, name: ASTNestedName, final: bool, bases: List[ASTBaseClass],\n-                 attrs: List[ASTAttribute]) -> None:\n+                 attrs: ASTAttributeList) -> None:\n         self.name = name\n         self.final = final\n         self.bases = bases\n@@ -3360,8 +3353,9 @@ def get_id(self, version: int, objectType: str, symbol: \"Symbol\") -> str:\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n         res = []\n-        for attr in self.attrs:\n-            res.append(transform(attr) + ' ')\n+        res.append(transform(self.attrs))\n+        if len(self.attrs) != 0:\n+            res.append(' ')\n         res.append(transform(self.name))\n         if self.final:\n             res.append(' final')\n@@ -3378,8 +3372,8 @@ def _stringify(self, transform: StringifyTransform) -> str:\n     def describe_signature(self, signode: TextElement, mode: str,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n         verify_description_mode(mode)\n-        for attr in self.attrs:\n-            attr.describe_signature(signode)\n+        self.attrs.describe_signature(signode)\n+        if len(self.attrs) != 0:\n             signode += addnodes.desc_sig_space()\n         self.name.describe_signature(signode, mode, env, symbol=symbol)\n         if self.final:\n@@ -3398,7 +3392,7 @@ def describe_signature(self, signode: TextElement, mode: str,\n \n \n class ASTUnion(ASTBase):\n-    def __init__(self, name: ASTNestedName, attrs: List[ASTAttribute]) -> None:\n+    def __init__(self, name: ASTNestedName, attrs: ASTAttributeList) -> None:\n         self.name = name\n         self.attrs = attrs\n \n@@ -3409,23 +3403,24 @@ def get_id(self, version: int, objectType: str, symbol: \"Symbol\") -> str:\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n         res = []\n-        for attr in self.attrs:\n-            res.append(transform(attr) + ' ')\n+        res.append(transform(self.attrs))\n+        if len(self.attrs) != 0:\n+            res.append(' ')\n         res.append(transform(self.name))\n         return ''.join(res)\n \n     def describe_signature(self, signode: TextElement, mode: str,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n         verify_description_mode(mode)\n-        for attr in self.attrs:\n-            attr.describe_signature(signode)\n+        self.attrs.describe_signature(signode)\n+        if len(self.attrs) != 0:\n             signode += addnodes.desc_sig_space()\n         self.name.describe_signature(signode, mode, env, symbol=symbol)\n \n \n class ASTEnum(ASTBase):\n     def __init__(self, name: ASTNestedName, scoped: str, underlyingType: ASTType,\n-                 attrs: List[ASTAttribute]) -> None:\n+                 attrs: ASTAttributeList) -> None:\n         self.name = name\n         self.scoped = scoped\n         self.underlyingType = underlyingType\n@@ -3441,8 +3436,9 @@ def _stringify(self, transform: StringifyTransform) -> str:\n         if self.scoped:\n             res.append(self.scoped)\n             res.append(' ')\n-        for attr in self.attrs:\n-            res.append(transform(attr) + ' ')\n+        res.append(transform(self.attrs))\n+        if len(self.attrs) != 0:\n+            res.append(' ')\n         res.append(transform(self.name))\n         if self.underlyingType:\n             res.append(' : ')\n@@ -3453,8 +3449,8 @@ def describe_signature(self, signode: TextElement, mode: str,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n         verify_description_mode(mode)\n         # self.scoped has been done by the CPPEnumObject\n-        for attr in self.attrs:\n-            attr.describe_signature(signode)\n+        self.attrs.describe_signature(signode)\n+        if len(self.attrs) != 0:\n             signode += addnodes.desc_sig_space()\n         self.name.describe_signature(signode, mode, env, symbol=symbol)\n         if self.underlyingType:\n@@ -3466,9 +3462,11 @@ def describe_signature(self, signode: TextElement, mode: str,\n \n \n class ASTEnumerator(ASTBase):\n-    def __init__(self, name: ASTNestedName, init: ASTInitializer) -> None:\n+    def __init__(self, name: ASTNestedName, init: Optional[ASTInitializer],\n+                 attrs: ASTAttributeList) -> None:\n         self.name = name\n         self.init = init\n+        self.attrs = attrs\n \n     def get_id(self, version: int, objectType: str, symbol: \"Symbol\") -> str:\n         if version == 1:\n@@ -3478,6 +3476,9 @@ def get_id(self, version: int, objectType: str, symbol: \"Symbol\") -> str:\n     def _stringify(self, transform: StringifyTransform) -> str:\n         res = []\n         res.append(transform(self.name))\n+        if len(self.attrs) != 0:\n+            res.append(' ')\n+            res.append(transform(self.attrs))\n         if self.init:\n             res.append(transform(self.init))\n         return ''.join(res)\n@@ -3486,6 +3487,9 @@ def describe_signature(self, signode: TextElement, mode: str,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n         verify_description_mode(mode)\n         self.name.describe_signature(signode, mode, env, symbol)\n+        if len(self.attrs) != 0:\n+            signode += addnodes.desc_sig_space()\n+            self.attrs.describe_signature(signode)\n         if self.init:\n             self.init.describe_signature(signode, 'markType', env, symbol)\n \n@@ -6118,12 +6122,7 @@ def _parse_parameters_and_qualifiers(self, paramMode: str) -> ASTParametersQuali\n             override = self.skip_word_and_ws(\n                 'override')  # they can be permuted\n \n-        attrs = []\n-        while True:\n-            attr = self._parse_attribute()\n-            if attr is None:\n-                break\n-            attrs.append(attr)\n+        attrs = self._parse_attribute_list()\n \n         self.skip_ws()\n         initializer = None\n@@ -6235,7 +6234,7 @@ def _parse_decl_specs_simple(self, outer: str, typed: bool) -> ASTDeclSpecsSimpl\n             break\n         return ASTDeclSpecsSimple(storage, threadLocal, inline, virtual,\n                                   explicitSpec, consteval, constexpr, constinit,\n-                                  volatile, const, friend, attrs)\n+                                  volatile, const, friend, ASTAttributeList(attrs))\n \n     def _parse_decl_specs(self, outer: str, typed: bool = True) -> ASTDeclSpecs:\n         if outer:\n@@ -6332,7 +6331,7 @@ def _parse_declarator(self, named: Union[bool, str], paramMode: str,\n             self.skip_ws()\n             volatile = False\n             const = False\n-            attrs = []\n+            attrList = []\n             while 1:\n                 if not volatile:\n                     volatile = self.skip_word_and_ws('volatile')\n@@ -6344,19 +6343,15 @@ def _parse_declarator(self, named: Union[bool, str], paramMode: str,\n                         continue\n                 attr = self._parse_attribute()\n                 if attr is not None:\n-                    attrs.append(attr)\n+                    attrList.append(attr)\n                     continue\n                 break\n             next = self._parse_declarator(named, paramMode, typed)\n-            return ASTDeclaratorPtr(next=next, volatile=volatile, const=const, attrs=attrs)\n+            return ASTDeclaratorPtr(next=next, volatile=volatile, const=const,\n+                                    attrs=ASTAttributeList(attrList))\n         # TODO: shouldn't we parse an R-value ref here first?\n         if typed and self.skip_string(\"&\"):\n-            attrs = []\n-            while 1:\n-                attr = self._parse_attribute()\n-                if attr is None:\n-                    break\n-                attrs.append(attr)\n+            attrs = self._parse_attribute_list()\n             next = self._parse_declarator(named, paramMode, typed)\n             return ASTDeclaratorRef(next=next, attrs=attrs)\n         if typed and self.skip_string(\"...\"):\n@@ -6628,12 +6623,7 @@ def _parse_concept(self) -> ASTConcept:\n         return ASTConcept(nestedName, initializer)\n \n     def _parse_class(self) -> ASTClass:\n-        attrs = []\n-        while 1:\n-            attr = self._parse_attribute()\n-            if attr is None:\n-                break\n-            attrs.append(attr)\n+        attrs = self._parse_attribute_list()\n         name = self._parse_nested_name()\n         self.skip_ws()\n         final = self.skip_word_and_ws('final')\n@@ -6664,24 +6654,13 @@ def _parse_class(self) -> ASTClass:\n         return ASTClass(name, final, bases, attrs)\n \n     def _parse_union(self) -> ASTUnion:\n-        attrs = []\n-        while 1:\n-            attr = self._parse_attribute()\n-            if attr is None:\n-                break\n-            attrs.append(attr)\n+        attrs = self._parse_attribute_list()\n         name = self._parse_nested_name()\n         return ASTUnion(name, attrs)\n \n     def _parse_enum(self) -> ASTEnum:\n         scoped = None  # is set by CPPEnumObject\n-        attrs = []\n-        while 1:\n-            attr = self._parse_attribute()\n-            if attr is None:\n-                break\n-            attrs.append(attr)\n-        self.skip_ws()\n+        attrs = self._parse_attribute_list()\n         name = self._parse_nested_name()\n         self.skip_ws()\n         underlyingType = None\n@@ -6691,6 +6670,7 @@ def _parse_enum(self) -> ASTEnum:\n \n     def _parse_enumerator(self) -> ASTEnumerator:\n         name = self._parse_nested_name()\n+        attrs = self._parse_attribute_list()\n         self.skip_ws()\n         init = None\n         if self.skip_string('='):\n@@ -6700,7 +6680,7 @@ def parser() -> ASTExpression:\n                 return self._parse_constant_expression(inTemplate=False)\n             initVal = self._parse_expression_fallback([], parser)\n             init = ASTInitializer(initVal)\n-        return ASTEnumerator(name, init)\n+        return ASTEnumerator(name, init, attrs)\n \n     # ==========================================================================\n \ndiff --git a/sphinx/util/cfamily.py b/sphinx/util/cfamily.py\n--- a/sphinx/util/cfamily.py\n+++ b/sphinx/util/cfamily.py\n@@ -192,6 +192,30 @@ def describe_signature(self, signode: TextElement) -> None:\n         signode.append(nodes.Text(txt, txt))\n \n \n+class ASTAttributeList(ASTBaseBase):\n+    def __init__(self, attrs: List[ASTAttribute]) -> None:\n+        self.attrs = attrs\n+\n+    def __len__(self) -> int:\n+        return len(self.attrs)\n+\n+    def __add__(self, other: \"ASTAttributeList\") -> \"ASTAttributeList\":\n+        return ASTAttributeList(self.attrs + other.attrs)\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return ' '.join(transform(attr) for attr in self.attrs)\n+\n+    def describe_signature(self, signode: TextElement) -> None:\n+        if len(self.attrs) == 0:\n+            return\n+        self.attrs[0].describe_signature(signode)\n+        if len(self.attrs) == 1:\n+            return\n+        for attr in self.attrs[1:]:\n+            signode.append(addnodes.desc_sig_space())\n+            attr.describe_signature(signode)\n+\n+\n ################################################################################\n \n class ASTBaseParenExprList(ASTBaseBase):\n@@ -423,5 +447,14 @@ def _parse_attribute(self) -> Optional[ASTAttribute]:\n \n         return None\n \n+    def _parse_attribute_list(self) -> ASTAttributeList:\n+        res = []\n+        while True:\n+            attr = self._parse_attribute()\n+            if attr is None:\n+                break\n+            res.append(attr)\n+        return ASTAttributeList(res)\n+\n     def _parse_paren_expression_list(self) -> ASTBaseParenExprList:\n         raise NotImplementedError\n",
  "test_patch": "diff --git a/tests/test_domain_c.py b/tests/test_domain_c.py\n--- a/tests/test_domain_c.py\n+++ b/tests/test_domain_c.py\n@@ -573,13 +573,17 @@ def test_domain_c_ast_attributes():\n           output='__attribute__(()) static inline void f()')\n     check('function', '[[attr1]] [[attr2]] void f()', {1: 'f'})\n     # position: declarator\n-    check('member', 'int *[[attr]] i', {1: 'i'})\n-    check('member', 'int *const [[attr]] volatile i', {1: 'i'},\n-          output='int *[[attr]] volatile const i')\n-    check('member', 'int *[[attr]] *i', {1: 'i'})\n+    check('member', 'int *[[attr1]] [[attr2]] i', {1: 'i'})\n+    check('member', 'int *const [[attr1]] [[attr2]] volatile i', {1: 'i'},\n+          output='int *[[attr1]] [[attr2]] volatile const i')\n+    check('member', 'int *[[attr1]] [[attr2]] *i', {1: 'i'})\n     # position: parameters\n     check('function', 'void f() [[attr1]] [[attr2]]', {1: 'f'})\n \n+    # position: enumerator\n+    check('enumerator', '{key}Foo [[attr1]] [[attr2]]', {1: 'Foo'})\n+    check('enumerator', '{key}Foo [[attr1]] [[attr2]] = 42', {1: 'Foo'})\n+\n     # issue michaeljones/breathe#500\n     check('function', 'LIGHTGBM_C_EXPORT int LGBM_BoosterFree(int handle)',\n           {1: 'LGBM_BoosterFree'})\ndiff --git a/tests/test_domain_cpp.py b/tests/test_domain_cpp.py\n--- a/tests/test_domain_cpp.py\n+++ b/tests/test_domain_cpp.py\n@@ -623,7 +623,7 @@ def test_domain_cpp_ast_function_definitions():\n \n     # exceptions from return type mangling\n     check('function', 'template<typename T> C()', {2: 'I0E1Cv'})\n-    check('function', 'template<typename T> operator int()', {1: None, 2: 'I0Ecviv'})\n+    check('function', 'template<typename T> operator int()', {2: 'I0Ecviv'})\n \n     # trailing return types\n     ids = {1: 'f', 2: '1fv'}\n@@ -691,7 +691,7 @@ def test_domain_cpp_ast_operators():\n     check('function', 'void operator>()', {1: \"gt-operator\", 2: \"gtv\"})\n     check('function', 'void operator<=()', {1: \"lte-operator\", 2: \"lev\"})\n     check('function', 'void operator>=()', {1: \"gte-operator\", 2: \"gev\"})\n-    check('function', 'void operator<=>()', {1: None, 2: \"ssv\"})\n+    check('function', 'void operator<=>()', {2: \"ssv\"})\n     check('function', 'void operator!()', {1: \"not-operator\", 2: \"ntv\"})\n     check('function', 'void operator not()', {2: \"ntv\"})\n     check('function', 'void operator&&()', {1: \"sand-operator\", 2: \"aav\"})\n@@ -983,18 +983,21 @@ def test_domain_cpp_ast_attributes():\n           output='__attribute__(()) static inline void f()')\n     check('function', '[[attr1]] [[attr2]] void f()', {1: 'f', 2: '1fv'})\n     # position: declarator\n-    check('member', 'int *[[attr]] i', {1: 'i__iP', 2: '1i'})\n-    check('member', 'int *const [[attr]] volatile i', {1: 'i__iPVC', 2: '1i'},\n-          output='int *[[attr]] volatile const i')\n-    check('member', 'int &[[attr]] i', {1: 'i__iR', 2: '1i'})\n-    check('member', 'int *[[attr]] *i', {1: 'i__iPP', 2: '1i'})\n+    check('member', 'int *[[attr1]] [[attr2]] i', {1: 'i__iP', 2: '1i'})\n+    check('member', 'int *const [[attr1]] [[attr2]] volatile i', {1: 'i__iPVC', 2: '1i'},\n+          output='int *[[attr1]] [[attr2]] volatile const i')\n+    check('member', 'int &[[attr1]] [[attr2]] i', {1: 'i__iR', 2: '1i'})\n+    check('member', 'int *[[attr1]] [[attr2]] *i', {1: 'i__iPP', 2: '1i'})\n     # position: parameters and qualifiers\n     check('function', 'void f() [[attr1]] [[attr2]]', {1: 'f', 2: '1fv'})\n \n     # position: class, union, enum\n-    check('class', '{key}[[nodiscard]] Foo', {1: 'Foo', 2: '3Foo'}, key='class')\n-    check('union', '{key}[[nodiscard]] Foo', {1: None, 2: '3Foo'}, key='union')\n-    check('enum', '{key}[[nodiscard]] Foo', {1: None, 2: '3Foo'}, key='enum')\n+    check('class', '{key}[[attr1]] [[attr2]] Foo', {1: 'Foo', 2: '3Foo'}, key='class')\n+    check('union', '{key}[[attr1]] [[attr2]] Foo', {2: '3Foo'}, key='union')\n+    check('enum', '{key}[[attr1]] [[attr2]] Foo', {2: '3Foo'}, key='enum')\n+    # position: enumerator\n+    check('enumerator', '{key}Foo [[attr1]] [[attr2]]', {2: '3Foo'})\n+    check('enumerator', '{key}Foo [[attr1]] [[attr2]] = 42', {2: '3Foo'})\n \n \n def test_domain_cpp_ast_xref_parsing():\n",
  "problem_statement": "enum value with attribute misparsed\n### Describe the bug\n\nIn C/C++, `enum` values can have an attribute like `__attribute__((__deprecated__))`, but these do not get properly parsed.\n\n### How to Reproduce\n\nHere is an example where this occurred. This enum has a deprecated value `JXL_TYPE_BOOLEAN`. The macro `JXL_DEPRECATED` is defined elsewhere, but it is included in `c_id_attributes` and `cpp_id_attributes`, so that shouldn't be the problem.\r\n\r\n```\r\n/** Data type for the sample values per channel per pixel.\r\n */\r\ntypedef enum {\r\n  /** Use 32-bit single-precision floating point values, with range 0.0-1.0\r\n   * (within gamut, may go outside this range for wide color gamut). Floating\r\n   * point output, either JXL_TYPE_FLOAT or JXL_TYPE_FLOAT16, is recommended\r\n   * for HDR and wide gamut images when color profile conversion is required. */\r\n  JXL_TYPE_FLOAT = 0,\r\n\r\n  /** DEPRECATED: Bitpacked 1-bit. As an alternative, use JXL_TYPE_UINT8.\r\n   */\r\n  JXL_TYPE_BOOLEAN JXL_DEPRECATED,\r\n[...]\r\n```\r\n\r\nWhen building documentation from this, it is parsing it as if the enum value is `JXL_DEPRECATED`, not `JXL_TYPE_BOOLEAN` as it should be. When there are two or more enum values deprecated like this, it results in `Duplicate C++ declaration`.\n\n### Expected behavior\n\nJust like attributes for function definitions, attributes for enum values should be ignored when parsing.\n\n### Your project\n\nhttps://libjxl.readthedocs.io/en/latest/\n\n### Screenshots\n\n_No response_\n\n### OS\n\nLinux\n\n### Python version\n\n3.9.10\n\n### Sphinx version\n\n4.5.0\n\n### Sphinx extensions\n\n_No response_\n\n### Extra tools\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2022-04-17T15:30:43Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"tests/test_domain_c.py::test_domain_c_ast_attributes\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_attributes\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_c.py::test_domain_c_ast_expressions\", \"tests/test_domain_c.py::test_domain_c_ast_fundamental_types\", \"tests/test_domain_c.py::test_domain_c_ast_type_definitions\", \"tests/test_domain_c.py::test_domain_c_ast_macro_definitions\", \"tests/test_domain_c.py::test_domain_c_ast_member_definitions\", \"tests/test_domain_c.py::test_domain_c_ast_function_definitions\", \"tests/test_domain_c.py::test_domain_c_ast_nested_name\", \"tests/test_domain_c.py::test_domain_c_ast_struct_definitions\", \"tests/test_domain_c.py::test_domain_c_ast_union_definitions\", \"tests/test_domain_c.py::test_domain_c_ast_enum_definitions\", \"tests/test_domain_c.py::test_domain_c_ast_anon_definitions\", \"tests/test_domain_c.py::test_domain_c_ast_initializers\", \"tests/test_domain_c.py::test_extra_keywords\", \"tests/test_domain_c.py::test_domain_c_build\", \"tests/test_domain_c.py::test_domain_c_build_namespace\", \"tests/test_domain_c.py::test_domain_c_build_anon_dup_decl\", \"tests/test_domain_c.py::test_domain_c_build_semicolon\", \"tests/test_domain_c.py::test_domain_c_build_function_param_target\", \"tests/test_domain_c.py::test_domain_c_build_ns_lookup\", \"tests/test_domain_c.py::test_domain_c_build_field_role\", \"tests/test_domain_c.py::test_domain_c_build_intersphinx\", \"tests/test_domain_c.py::test_domain_c_parse_cfunction\", \"tests/test_domain_c.py::test_domain_c_parse_cmember\", \"tests/test_domain_c.py::test_domain_c_parse_cvar\", \"tests/test_domain_c.py::test_domain_c_parse_noindexentry\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_fundamental_types\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_expressions\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_type_definitions\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_concept_definitions\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_member_definitions\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_function_definitions\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_operators\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_nested_name\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_class_definitions\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_union_definitions\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_enum_definitions\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_anon_definitions\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_templates\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_placeholder_types\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_requires_clauses\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_template_args\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_initializers\", \"tests/test_domain_cpp.py::test_domain_cpp_ast_xref_parsing\", \"tests/test_domain_cpp.py::test_domain_cpp_build_multi_decl_lookup\", \"tests/test_domain_cpp.py::test_domain_cpp_build_warn_template_param_qualified_name\", \"tests/test_domain_cpp.py::test_domain_cpp_build_backslash_ok_true\", \"tests/test_domain_cpp.py::test_domain_cpp_build_semicolon\", \"tests/test_domain_cpp.py::test_domain_cpp_build_backslash_ok_false\", \"tests/test_domain_cpp.py::test_domain_cpp_build_anon_dup_decl\", \"tests/test_domain_cpp.py::test_domain_cpp_build_misuse_of_roles\", \"tests/test_domain_cpp.py::test_domain_cpp_build_with_add_function_parentheses_is_True\", \"tests/test_domain_cpp.py::test_domain_cpp_build_with_add_function_parentheses_is_False\", \"tests/test_domain_cpp.py::test_domain_cpp_build_xref_consistency\", \"tests/test_domain_cpp.py::test_domain_cpp_build_field_role\", \"tests/test_domain_cpp.py::test_domain_cpp_build_intersphinx\", \"tests/test_domain_cpp.py::test_domain_cpp_parse_noindexentry\", \"tests/test_domain_cpp.py::test_domain_cpp_parse_mix_decl_duplicate\"]",
  "environment_setup_commit": "60775ec4c4ea08509eee4b564cbf90f316021aff",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.032526",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}