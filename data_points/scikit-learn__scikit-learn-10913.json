{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-10913",
  "base_commit": "3dab1c4fcc2e34aff69e2c2361620e982820fce4",
  "patch": "diff --git a/sklearn/preprocessing/label.py b/sklearn/preprocessing/label.py\n--- a/sklearn/preprocessing/label.py\n+++ b/sklearn/preprocessing/label.py\n@@ -9,6 +9,7 @@\n from collections import defaultdict\n import itertools\n import array\n+import warnings\n \n import numpy as np\n import scipy.sparse as sp\n@@ -684,6 +685,7 @@ class MultiLabelBinarizer(BaseEstimator, TransformerMixin):\n     sklearn.preprocessing.OneHotEncoder : encode categorical integer features\n         using a one-hot aka one-of-K scheme.\n     \"\"\"\n+\n     def __init__(self, classes=None, sparse_output=False):\n         self.classes = classes\n         self.sparse_output = sparse_output\n@@ -794,9 +796,19 @@ def _transform(self, y, class_mapping):\n         \"\"\"\n         indices = array.array('i')\n         indptr = array.array('i', [0])\n+        unknown = set()\n         for labels in y:\n-            indices.extend(set(class_mapping[label] for label in labels))\n+            index = set()\n+            for label in labels:\n+                try:\n+                    index.add(class_mapping[label])\n+                except KeyError:\n+                    unknown.add(label)\n+            indices.extend(index)\n             indptr.append(len(indices))\n+        if unknown:\n+            warnings.warn('unknown class(es) {0} will be ignored'\n+                          .format(sorted(unknown, key=str)))\n         data = np.ones(len(indices), dtype=int)\n \n         return sp.csr_matrix((data, indices, indptr),\n",
  "test_patch": "diff --git a/sklearn/preprocessing/tests/test_label.py b/sklearn/preprocessing/tests/test_label.py\n--- a/sklearn/preprocessing/tests/test_label.py\n+++ b/sklearn/preprocessing/tests/test_label.py\n@@ -14,6 +14,7 @@\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_warns_message\n from sklearn.utils.testing import ignore_warnings\n \n from sklearn.preprocessing.label import LabelBinarizer\n@@ -307,10 +308,17 @@ def test_multilabel_binarizer_empty_sample():\n def test_multilabel_binarizer_unknown_class():\n     mlb = MultiLabelBinarizer()\n     y = [[1, 2]]\n-    assert_raises(KeyError, mlb.fit(y).transform, [[0]])\n-\n-    mlb = MultiLabelBinarizer(classes=[1, 2])\n-    assert_raises(KeyError, mlb.fit_transform, [[0]])\n+    Y = np.array([[1, 0], [0, 1]])\n+    w = 'unknown class(es) [0, 4] will be ignored'\n+    matrix = assert_warns_message(UserWarning, w,\n+                                  mlb.fit(y).transform, [[4, 1], [2, 0]])\n+    assert_array_equal(matrix, Y)\n+\n+    Y = np.array([[1, 0, 0], [0, 1, 0]])\n+    mlb = MultiLabelBinarizer(classes=[1, 2, 3])\n+    matrix = assert_warns_message(UserWarning, w,\n+                                  mlb.fit(y).transform, [[4, 1], [2, 0]])\n+    assert_array_equal(matrix, Y)\n \n \n def test_multilabel_binarizer_given_classes():\n",
  "problem_statement": "MultiLabelBinarizer breaks when seeing unseen labels...should there be an option to handle this instead?\n<!-- Instructions For Filing a Bug: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#filing-bugs -->\r\n\r\n#### Description\r\nI am not sure if it's intended for MultiLabelBinarizer to fit and transform only seen data or not. \r\n\r\nHowever, there are many times that it is not possible/not in our interest to know all of the classes that we're fitting at training time. \r\nFor convenience, I am wondering if there should be another parameter that allows us to ignore the unseen classes by just setting them to 0? \r\n\r\n#### Proposed Modification\r\nExample:\r\n```python\r\nfrom sklearn.preprocessing import MultiLabelBinarizer\r\nmlb = MultiLabelBinarizer(ignore_unseen=True)\r\n\r\ny_train = [['a'],['a', 'b'], ['a', 'b', 'c']]\r\nmlb.fit(y_train)\r\n\r\ny_test = [['a'],['b'],['d']]\r\nmlb.transform(y_test)\r\n```\r\nResult: \r\narray([[1, 0, 0],\r\n       [0, 1, 0],\r\n       [0, 0, 0]])\r\n\r\n(the current version 0.19.0 would say ` KeyError: 'd'`)\r\n\r\nI can open a PR for this if this is a desired behavior.\r\n\r\nOthers also have similar issue:\r\nhttps://stackoverflow.com/questions/31503874/using-multilabelbinarizer-on-test-data-with-labels-not-in-the-training-set\r\n\n",
  "hints_text": "Yes, I suppose such a setting would be useful.\n\nOn 6 January 2018 at 06:13, Ploy Temiyasathit <notifications@github.com>\nwrote:\n\n> Description\n>\n> I am not sure if it's intended for MultiLabelBinarizer to fit and\n> transform only seen data or not.\n>\n> However, there are many times that it is not possible/not in our interest\n> to know all of the classes that we're fitting at training time.\n> For convenience, I am wondering if there should be another parameter that\n> allows us to ignore the unseen classes by just setting them to 0?\n> Proposed Modification\n>\n> Example:\n>\n> from sklearn.preprocessing import MultiLabelBinarizer\n> mlb = MultiLabelBinarizer(ignore_unseen=True)\n>\n> y_train = [['a'],['a', 'b'], ['a', 'b', 'c']]\n> mlb.fit(y_train)\n>\n> y_test = [['a'],['b'],['d']]\n> mlb.transform(y_test)\n>\n> Result:\n> array([[1, 0, 0],\n> [0, 1, 0],\n> [0, 0, 0]])\n>\n> (the current version 0.19.0 would say KeyError: 'd')\n>\n> I can open a PR for this if this is a desired behavior.\n>\n> Others also have similar issue:\n> https://stackoverflow.com/questions/31503874/using-\n> multilabelbinarizer-on-test-data-with-labels-not-in-the-training-set\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/10410>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz60OD_hPXjQlFF7Qus2WI5LT4pFtCks5tHnPzgaJpZM4RU1I5>\n> .\n>\n\nThe original poster stated they would like to submit a PR, so let's wait.\n\nOK. I'm taking this then.\nif no one is working, I'd like to take up this issue?\n@mohdsanadzakirizvi looks like the OP said they will deliver\n@mohdsanadzakirizvi Hey, sorry for not having much update recently. I've started working on it though, so I guess I will continue.",
  "created_at": "2018-04-03T18:38:27Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_unknown_class\"]",
  "PASS_TO_PASS": "[\"sklearn/preprocessing/tests/test_label.py::test_label_binarizer\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer_unseen_labels\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer_set_label_encoding\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarizer_errors\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_fit_transform\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_errors\", \"sklearn/preprocessing/tests/test_label.py::test_label_encoder_empty_array\", \"sklearn/preprocessing/tests/test_label.py::test_sparse_output_multilabel_binarizer\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_empty_sample\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_given_classes\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_same_length_sequence\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_non_integer_labels\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_non_unique\", \"sklearn/preprocessing/tests/test_label.py::test_multilabel_binarizer_inverse_validation\", \"sklearn/preprocessing/tests/test_label.py::test_label_binarize_with_class_order\", \"sklearn/preprocessing/tests/test_label.py::test_invalid_input_label_binarize\", \"sklearn/preprocessing/tests/test_label.py::test_inverse_binarize_multiclass\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.956364",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}