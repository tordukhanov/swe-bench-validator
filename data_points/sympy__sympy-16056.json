{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16056",
  "base_commit": "93a65b9bb8a615906e73d5885ff03076bcabc555",
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -3141,7 +3141,7 @@ def __new__(cls):\n         return AtomicExpr.__new__(cls)\n \n     def _latex(self, printer):\n-        return r\"\\mathrm{NaN}\"\n+        return r\"\\text{NaN}\"\n \n     @_sympifyit('other', NotImplemented)\n     def __add__(self, other):\n@@ -3585,7 +3585,7 @@ class TribonacciConstant(with_metaclass(Singleton, NumberSymbol)):\n     __slots__ = []\n \n     def _latex(self, printer):\n-        return r\"\\mathrm{TribonacciConstant}\"\n+        return r\"\\text{TribonacciConstant}\"\n \n     def __int__(self):\n         return 2\ndiff --git a/sympy/diffgeom/diffgeom.py b/sympy/diffgeom/diffgeom.py\n--- a/sympy/diffgeom/diffgeom.py\n+++ b/sympy/diffgeom/diffgeom.py\n@@ -39,7 +39,7 @@ def __new__(cls, name, dim):\n         return obj\n \n     def _latex(self, printer, *args):\n-        return r'\\mathrm{%s}' % self.name\n+        return r'\\text{%s}' % self.name\n \n \n class Patch(Basic):\n@@ -83,7 +83,7 @@ def dim(self):\n         return self.manifold.dim\n \n     def _latex(self, printer, *args):\n-        return r'\\mathrm{%s}_{%s}' % (self.name, self.manifold._latex(printer, *args))\n+        return r'\\text{%s}_{%s}' % (self.name, self.manifold._latex(printer, *args))\n \n \n class CoordSystem(Basic):\n@@ -341,7 +341,7 @@ def point_to_coords(self, point):\n     ##########################################################################\n \n     def _latex(self, printer, *args):\n-        return r'\\mathrm{%s}^{\\mathrm{%s}}_{%s}' % (\n+        return r'\\text{%s}^{\\text{%s}}_{%s}' % (\n             self.name, self.patch.name, self.patch.manifold._latex(printer, *args))\n \n \ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -139,6 +139,7 @@ class LatexPrinter(Printer):\n         \"root_notation\": True,\n         \"mat_symbol_style\": \"plain\",\n         \"imaginary_unit\": \"i\",\n+        \"gothic_re_im\": False,\n     }\n \n     def __init__(self, settings=None):\n@@ -200,7 +201,7 @@ def __init__(self, settings=None):\n     def parenthesize(self, item, level, strict=False):\n         prec_val = precedence_traditional(item)\n         if (prec_val < level) or ((not strict) and prec_val <= level):\n-            return r\"\\left(%s\\right)\" % self._print(item)\n+            return r\"\\left({}\\right)\".format(self._print(item))\n         else:\n             return self._print(item)\n \n@@ -314,13 +315,13 @@ def _print_Basic(self, expr):\n             r\"\\left(%s\\right)\" % \", \".join(ls)\n \n     def _print_bool(self, e):\n-        return r\"\\mathrm{%s}\" % e\n+        return r\"\\text{%s}\" % e\n \n     _print_BooleanTrue = _print_bool\n     _print_BooleanFalse = _print_bool\n \n     def _print_NoneType(self, e):\n-        return r\"\\mathrm{%s}\" % e\n+        return r\"\\text{%s}\" % e\n \n     def _print_Add(self, expr, order=None):\n         if self.order == 'none':\n@@ -898,12 +899,18 @@ def _print_Abs(self, expr, exp=None):\n     _print_Determinant = _print_Abs\n \n     def _print_re(self, expr, exp=None):\n-        tex = r\"\\Re{%s}\" % self.parenthesize(expr.args[0], PRECEDENCE['Atom'])\n+        if self._settings['gothic_re_im']:\n+            tex = r\"\\Re{%s}\" % self.parenthesize(expr.args[0], PRECEDENCE['Atom'])\n+        else:\n+            tex = r\"\\operatorname{{re}}{{{}}}\".format(self.parenthesize(expr.args[0], PRECEDENCE['Atom']))\n \n         return self._do_exponent(tex, exp)\n \n     def _print_im(self, expr, exp=None):\n-        tex = r\"\\Im{%s}\" % self.parenthesize(expr.args[0], PRECEDENCE['Func'])\n+        if self._settings['gothic_re_im']:\n+            tex = r\"\\Im{%s}\" % self.parenthesize(expr.args[0], PRECEDENCE['Atom'])\n+        else:\n+            tex = r\"\\operatorname{{im}}{{{}}}\".format(self.parenthesize(expr.args[0], PRECEDENCE['Atom']))\n \n         return self._do_exponent(tex, exp)\n \n@@ -1505,7 +1512,7 @@ def _print_Transpose(self, expr):\n \n     def _print_Trace(self, expr):\n         mat = expr.arg\n-        return r\"\\mathrm{tr}\\left(%s \\right)\" % self._print(mat)\n+        return r\"\\operatorname{tr}\\left(%s \\right)\" % self._print(mat)\n \n     def _print_Adjoint(self, expr):\n         mat = expr.arg\n@@ -1782,12 +1789,12 @@ def _print_ProductSet(self, p):\n \n     def _print_RandomDomain(self, d):\n         if hasattr(d, 'as_boolean'):\n-            return 'Domain: ' + self._print(d.as_boolean())\n+            return '\\\\text{Domain: }' + self._print(d.as_boolean())\n         elif hasattr(d, 'set'):\n-            return ('Domain: ' + self._print(d.symbols) + ' in ' +\n+            return ('\\\\text{Domain: }' + self._print(d.symbols) + '\\\\text{ in }' +\n                     self._print(d.set))\n         elif hasattr(d, 'symbols'):\n-            return 'Domain on ' + self._print(d.symbols)\n+            return '\\\\text{Domain on }' + self._print(d.symbols)\n         else:\n             return self._print(None)\n \n@@ -2073,55 +2080,38 @@ def _print_catalan(self, expr, exp=None):\n             tex = r\"%s^{%s}\" % (tex, self._print(exp))\n         return tex\n \n+    def _print_UnifiedTransform(self, expr, s, inverse=False):\n+        return r\"\\mathcal{{{}}}{}_{{{}}}\\left[{}\\right]\\left({}\\right)\".format(s, '^{-1}' if inverse else '', self._print(expr.args[1]), self._print(expr.args[0]), self._print(expr.args[2]))\n+\n     def _print_MellinTransform(self, expr):\n-        return r\"\\mathcal{M}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'M')\n \n     def _print_InverseMellinTransform(self, expr):\n-        return r\"\\mathcal{M}^{-1}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'M', True)\n \n     def _print_LaplaceTransform(self, expr):\n-        return r\"\\mathcal{L}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'L')\n \n     def _print_InverseLaplaceTransform(self, expr):\n-        return r\"\\mathcal{L}^{-1}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'L', True)\n \n     def _print_FourierTransform(self, expr):\n-        return r\"\\mathcal{F}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'F')\n \n     def _print_InverseFourierTransform(self, expr):\n-        return r\"\\mathcal{F}^{-1}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'F', True)\n \n     def _print_SineTransform(self, expr):\n-        return r\"\\mathcal{SIN}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'SIN')\n \n     def _print_InverseSineTransform(self, expr):\n-        return r\"\\mathcal{SIN}^{-1}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'SIN', True)\n \n     def _print_CosineTransform(self, expr):\n-        return r\"\\mathcal{COS}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'COS')\n \n     def _print_InverseCosineTransform(self, expr):\n-        return r\"\\mathcal{COS}^{-1}_{%s}\\left[%s\\right]\\left(%s\\right)\" % \\\n-            (self._print(expr.args[1]), self._print(expr.args[0]),\n-             self._print(expr.args[2]))\n+        return self._print_UnifiedTransform(expr, 'COS', True)\n \n     def _print_DMP(self, p):\n         try:\n@@ -2165,7 +2155,7 @@ def _print_CompositeMorphism(self, morphism):\n         return component_names + pretty_morphism\n \n     def _print_Category(self, morphism):\n-        return \"\\\\mathbf{%s}\" % self._print(Symbol(morphism.name))\n+        return r\"\\mathbf{{{}}}\".format(self._print(Symbol(morphism.name)))\n \n     def _print_Diagram(self, diagram):\n         if not diagram.premises:\n@@ -2198,20 +2188,20 @@ def _print_DiagramGrid(self, grid):\n         return latex_result\n \n     def _print_FreeModule(self, M):\n-        return '{%s}^{%s}' % (self._print(M.ring), self._print(M.rank))\n+        return '{{{}}}^{{{}}}'.format(self._print(M.ring), self._print(M.rank))\n \n     def _print_FreeModuleElement(self, m):\n         # Print as row vector for convenience, for now.\n-        return r\"\\left[ %s \\right]\" % \",\".join(\n-            '{' + self._print(x) + '}' for x in m)\n+        return r\"\\left[ {} \\right]\".format(\",\".join(\n+            '{' + self._print(x) + '}' for x in m))\n \n     def _print_SubModule(self, m):\n-        return r\"\\left\\langle %s \\right\\rangle\" % \",\".join(\n-            '{' + self._print(x) + '}' for x in m.gens)\n+        return r\"\\left\\langle {} \\right\\rangle\".format(\",\".join(\n+            '{' + self._print(x) + '}' for x in m.gens))\n \n     def _print_ModuleImplementedIdeal(self, m):\n-        return r\"\\left\\langle %s \\right\\rangle\" % \",\".join(\n-            '{' + self._print(x) + '}' for [x] in m._module.gens)\n+        return r\"\\left\\langle {} \\right\\rangle\".format(\",\".join(\n+            '{' + self._print(x) + '}' for [x] in m._module.gens))\n \n     def _print_Quaternion(self, expr):\n         # TODO: This expression is potentially confusing,\n@@ -2223,49 +2213,47 @@ def _print_Quaternion(self, expr):\n \n     def _print_QuotientRing(self, R):\n         # TODO nicer fractions for few generators...\n-        return r\"\\frac{%s}{%s}\" % (self._print(R.ring),\n-                                   self._print(R.base_ideal))\n+        return r\"\\frac{{{}}}{{{}}}\".format(self._print(R.ring),\n+                 self._print(R.base_ideal))\n \n     def _print_QuotientRingElement(self, x):\n-        return r\"{%s} + {%s}\" % (self._print(x.data),\n-                                 self._print(x.ring.base_ideal))\n+        return r\"{{{}}} + {{{}}}\".format(self._print(x.data),\n+                 self._print(x.ring.base_ideal))\n \n     def _print_QuotientModuleElement(self, m):\n-        return r\"{%s} + {%s}\" % (self._print(m.data),\n-                                 self._print(m.module.killed_module))\n+        return r\"{{{}}} + {{{}}}\".format(self._print(m.data),\n+                 self._print(m.module.killed_module))\n \n     def _print_QuotientModule(self, M):\n         # TODO nicer fractions for few generators...\n-        return r\"\\frac{%s}{%s}\" % (self._print(M.base),\n-                                   self._print(M.killed_module))\n+        return r\"\\frac{{{}}}{{{}}}\".format(self._print(M.base),\n+                 self._print(M.killed_module))\n \n     def _print_MatrixHomomorphism(self, h):\n-        return r\"{%s} : {%s} \\to {%s}\" % (self._print(h._sympy_matrix()),\n-                                          self._print(h.domain),\n-                                          self._print(h.codomain))\n+        return r\"{{{}}} : {{{}}} \\to {{{}}}\".format(self._print(h._sympy_matrix()),\n+            self._print(h.domain), self._print(h.codomain))\n \n     def _print_BaseScalarField(self, field):\n         string = field._coord_sys._names[field._index]\n-        return r'\\boldsymbol{\\mathrm{%s}}' % self._print(Symbol(string))\n+        return r'\\mathbf{{{}}}'.format(self._print(Symbol(string)))\n \n     def _print_BaseVectorField(self, field):\n         string = field._coord_sys._names[field._index]\n-        return r'\\partial_{%s}' % self._print(Symbol(string))\n+        return r'\\partial_{{{}}}'.format(self._print(Symbol(string)))\n \n     def _print_Differential(self, diff):\n         field = diff._form_field\n         if hasattr(field, '_coord_sys'):\n             string = field._coord_sys._names[field._index]\n-            return r'\\mathrm{d}%s' % self._print(Symbol(string))\n+            return r'\\operatorname{{d}}{}'.format(self._print(Symbol(string)))\n         else:\n-            return 'd(%s)' % self._print(field)\n             string = self._print(field)\n-            return r'\\mathrm{d}\\left(%s\\right)' % string\n+            return r'\\operatorname{{d}}\\left({}\\right)'.format(string)\n \n     def _print_Tr(self, p):\n         # TODO: Handle indices\n         contents = self._print(p.args[0])\n-        return r'\\mbox{Tr}\\left(%s\\right)' % (contents)\n+        return r'\\operatorname{{tr}}\\left({}\\right)'.format(contents)\n \n     def _print_totient(self, expr, exp=None):\n         if exp is not None:\n@@ -2347,7 +2335,7 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n           itex=False, ln_notation=False, long_frac_ratio=None,\n           mat_delim=\"[\", mat_str=None, mode=\"plain\", mul_symbol=None,\n           order=None, symbol_names=None, root_notation=True,\n-          mat_symbol_style=\"plain\", imaginary_unit=\"i\"):\n+          mat_symbol_style=\"plain\", imaginary_unit=\"i\", gothic_re_im=False):\n     r\"\"\"Convert the given expression to LaTeX string representation.\n \n     Parameters\n@@ -2408,8 +2396,11 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n         a MatrixSymbol A will be printed as ``\\mathbf{A}``, otherwise as ``A``.\n     imaginary_unit : string, optional\n         String to use for the imaginary unit. Defined options are \"i\" (default)\n-        and \"j\". Adding \"b\" or \"t\" in front gives ``\\mathrm`` or ``\\text``, so\n-        \"bi\" leads to ``\\mathrm{i}`` which gives `\\mathrm{i}`.\n+        and \"j\". Adding \"r\" or \"t\" in front gives ``\\mathrm`` or ``\\text``, so\n+        \"ri\" leads to ``\\mathrm{i}`` which gives `\\mathrm{i}`.\n+    gothic_re_im : boolean, optional\n+        If set to ``True``, `\\Re` and `\\Im` is used for ``re`` and ``im``, respectively.\n+        The default is ``False`` leading to `\\operatorname{re}` and `\\operatorname{im}`.\n \n     Notes\n     =====\n@@ -2537,6 +2528,7 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n         'root_notation': root_notation,\n         'mat_symbol_style': mat_symbol_style,\n         'imaginary_unit': imaginary_unit,\n+        'gothic_re_im': gothic_re_im,\n     }\n \n     return LatexPrinter(settings).doprint(expr)\n",
  "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -1644,12 +1644,12 @@ def test_latex():\n     assert latex(pi) == r\"\\pi\"\n     assert latex(E) == r\"e\"\n     assert latex(GoldenRatio) == r\"\\phi\"\n-    assert latex(TribonacciConstant) == r\"\\mathrm{TribonacciConstant}\"\n+    assert latex(TribonacciConstant) == r\"\\text{TribonacciConstant}\"\n     assert latex(EulerGamma) == r\"\\gamma\"\n     assert latex(oo) == r\"\\infty\"\n     assert latex(-oo) == r\"-\\infty\"\n     assert latex(zoo) == r\"\\tilde{\\infty}\"\n-    assert latex(nan) == r\"\\mathrm{NaN}\"\n+    assert latex(nan) == r\"\\text{NaN}\"\n     assert latex(I) == r\"i\"\n \n \ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -34,7 +34,7 @@\n from sympy.logic import Implies\n from sympy.logic.boolalg import And, Or, Xor\n from sympy.physics.quantum import Commutator, Operator\n-from sympy.physics.units import degree, radian, kg, meter, R\n+from sympy.physics.units import degree, radian, kg, meter\n from sympy.core.trace import Tr\n from sympy.core.compatibility import range\n from sympy.combinatorics.permutations import Cycle, Permutation\n@@ -154,11 +154,11 @@ def test_latex_basic():\n \n \n def test_latex_builtins():\n-    assert latex(True) == r\"\\mathrm{True}\"\n-    assert latex(False) == r\"\\mathrm{False}\"\n-    assert latex(None) == r\"\\mathrm{None}\"\n-    assert latex(true) == r\"\\mathrm{True}\"\n-    assert latex(false) == r'\\mathrm{False}'\n+    assert latex(True) == r\"\\text{True}\"\n+    assert latex(False) == r\"\\text{False}\"\n+    assert latex(None) == r\"\\text{None}\"\n+    assert latex(true) == r\"\\text{True}\"\n+    assert latex(false) == r'\\text{False}'\n \n \n def test_latex_SingularityFunction():\n@@ -373,9 +373,10 @@ def test_latex_functions():\n     assert latex(Max(x, y)**2) == r\"\\max\\left(x, y\\right)^{2}\"\n     assert latex(Abs(x)) == r\"\\left|{x}\\right|\"\n     assert latex(Abs(x)**2) == r\"\\left|{x}\\right|^{2}\"\n-    assert latex(re(x)) == r\"\\Re{\\left(x\\right)}\"\n-    assert latex(re(x + y)) == r\"\\Re{\\left(x\\right)} + \\Re{\\left(y\\right)}\"\n-    assert latex(im(x)) == r\"\\Im{x}\"\n+    assert latex(re(x)) == r\"\\operatorname{re}{\\left(x\\right)}\"\n+    assert latex(re(x + y)) == \\\n+        r\"\\operatorname{re}{\\left(x\\right)} + \\operatorname{re}{\\left(y\\right)}\"\n+    assert latex(im(x)) == r\"\\operatorname{im}{\\left(x\\right)}\"\n     assert latex(conjugate(x)) == r\"\\overline{x}\"\n     assert latex(conjugate(x)**2) == r\"\\overline{x}^{2}\"\n     assert latex(conjugate(x**2)) == r\"\\overline{x}^{2}\"\n@@ -392,7 +393,8 @@ def test_latex_functions():\n         r\"O\\left(x; \\left( x, \\  y\\right)\\rightarrow \\left( 0, \\  0\\right)\\right)\"\n     assert latex(Order(x, x, y)) == \\\n         r\"O\\left(x; \\left( x, \\  y\\right)\\rightarrow \\left( 0, \\  0\\right)\\right)\"\n-    assert latex(Order(x, (x, oo), (y, oo))) == r\"O\\left(x; \\left( x, \\  y\\right)\\rightarrow \\left( \\infty, \\  \\infty\\right)\\right)\"\n+    assert latex(Order(x, (x, oo), (y, oo))) == \\\n+        r\"O\\left(x; \\left( x, \\  y\\right)\\rightarrow \\left( \\infty, \\  \\infty\\right)\\right)\"\n     assert latex(lowergamma(x, y)) == r'\\gamma\\left(x, y\\right)'\n     assert latex(lowergamma(x, y)**2) == r'\\gamma^{2}\\left(x, y\\right)'\n     assert latex(uppergamma(x, y)) == r'\\Gamma\\left(x, y\\right)'\n@@ -400,8 +402,8 @@ def test_latex_functions():\n \n     assert latex(cot(x)) == r'\\cot{\\left(x \\right)}'\n     assert latex(coth(x)) == r'\\coth{\\left(x \\right)}'\n-    assert latex(re(x)) == r'\\Re{\\left(x\\right)}'\n-    assert latex(im(x)) == r'\\Im{x}'\n+    assert latex(re(x)) == r'\\operatorname{re}{\\left(x\\right)}'\n+    assert latex(im(x)) == r'\\operatorname{im}{\\left(x\\right)}'\n     assert latex(root(x, y)) == r'x^{\\frac{1}{y}}'\n     assert latex(arg(x)) == r'\\arg{\\left(x \\right)}'\n     assert latex(zeta(x)) == r'\\zeta\\left(x\\right)'\n@@ -536,7 +538,8 @@ def test_hyper_printing():\n \n     assert latex(meijerg(Tuple(pi, pi, x), Tuple(1),\n                          (0, 1), Tuple(1, 2, 3/pi), z)) == \\\n-        r'{G_{4, 5}^{2, 3}\\left(\\begin{matrix} \\pi, \\pi, x & 1 \\\\0, 1 & 1, 2, \\frac{3}{\\pi} \\end{matrix} \\middle| {z} \\right)}'\n+        r'{G_{4, 5}^{2, 3}\\left(\\begin{matrix} \\pi, \\pi, x & 1 \\\\0, 1 & 1, 2, '\\\n+        r'\\frac{3}{\\pi} \\end{matrix} \\middle| {z} \\right)}'\n     assert latex(meijerg(Tuple(), Tuple(1), (0,), Tuple(), z)) == \\\n         r'{G_{1, 1}^{1, 0}\\left(\\begin{matrix}  & 1 \\\\0 &  \\end{matrix} \\middle| {z} \\right)}'\n     assert latex(hyper((x, 2), (3,), z)) == \\\n@@ -881,7 +884,8 @@ def test_latex_ComplexRegion():\n     assert latex(ComplexRegion(Interval(3, 5)*Interval(4, 6))) == \\\n         r\"\\left\\{x + y i\\; |\\; x, y \\in \\left[3, 5\\right] \\times \\left[4, 6\\right] \\right\\}\"\n     assert latex(ComplexRegion(Interval(0, 1)*Interval(0, 2*pi), polar=True)) == \\\n-        r\"\\left\\{r \\left(i \\sin{\\left(\\theta \\right)} + \\cos{\\left(\\theta \\right)}\\right)\\; |\\; r, \\theta \\in \\left[0, 1\\right] \\times \\left[0, 2 \\pi\\right) \\right\\}\"\n+        r\"\\left\\{r \\left(i \\sin{\\left(\\theta \\right)} + \\cos{\\left(\\theta \"\\\n+        r\"\\right)}\\right)\\; |\\; r, \\theta \\in \\left[0, 1\\right] \\times \\left[0, 2 \\pi\\right) \\right\\}\"\n \n \n def test_latex_Contains():\n@@ -1279,12 +1283,15 @@ def test_latex_Poly():\n \n def test_latex_Poly_order():\n     assert latex(Poly([a, 1, b, 2, c, 3], x)) == \\\n-        '\\\\operatorname{Poly}{\\\\left( a x^{5} + x^{4} + b x^{3} + 2 x^{2} + c x + 3, x, domain=\\\\mathbb{Z}\\\\left[a, b, c\\\\right] \\\\right)}'\n+        '\\\\operatorname{Poly}{\\\\left( a x^{5} + x^{4} + b x^{3} + 2 x^{2} + c'\\\n+        ' x + 3, x, domain=\\\\mathbb{Z}\\\\left[a, b, c\\\\right] \\\\right)}'\n     assert latex(Poly([a, 1, b+c, 2, 3], x)) == \\\n-        '\\\\operatorname{Poly}{\\\\left( a x^{4} + x^{3} + \\\\left(b + c\\\\right) x^{2} + 2 x + 3, x, domain=\\\\mathbb{Z}\\\\left[a, b, c\\\\right] \\\\right)}'\n+        '\\\\operatorname{Poly}{\\\\left( a x^{4} + x^{3} + \\\\left(b + c\\\\right) '\\\n+        'x^{2} + 2 x + 3, x, domain=\\\\mathbb{Z}\\\\left[a, b, c\\\\right] \\\\right)}'\n     assert latex(Poly(a*x**3 + x**2*y - x*y - c*y**3 - b*x*y**2 + y - a*x + b,\n                       (x, y))) == \\\n-        '\\\\operatorname{Poly}{\\\\left( a x^{3} + x^{2}y -  b xy^{2} - xy -  a x -  c y^{3} + y + b, x, y, domain=\\\\mathbb{Z}\\\\left[a, b, c\\\\right] \\\\right)}'\n+        '\\\\operatorname{Poly}{\\\\left( a x^{3} + x^{2}y -  b xy^{2} - xy -  '\\\n+        'a x -  c y^{3} + y + b, x, y, domain=\\\\mathbb{Z}\\\\left[a, b, c\\\\right] \\\\right)}'\n \n \n def test_latex_ComplexRootOf():\n@@ -1367,18 +1374,22 @@ def test_latex_MatrixSlice():\n \n def test_latex_RandomDomain():\n     from sympy.stats import Normal, Die, Exponential, pspace, where\n+    from sympy.stats.rv import RandomDomain\n+\n     X = Normal('x1', 0, 1)\n-    assert latex(where(X > 0)) == r\"Domain: 0 < x_{1} \\wedge x_{1} < \\infty\"\n+    assert latex(where(X > 0)) == r\"\\text{Domain: }0 < x_{1} \\wedge x_{1} < \\infty\"\n \n     D = Die('d1', 6)\n-    assert latex(where(D > 4)) == r\"Domain: d_{1} = 5 \\vee d_{1} = 6\"\n+    assert latex(where(D > 4)) == r\"\\text{Domain: }d_{1} = 5 \\vee d_{1} = 6\"\n \n     A = Exponential('a', 1)\n     B = Exponential('b', 1)\n     assert latex(\n         pspace(Tuple(A, B)).domain) == \\\n-        r\"Domain: 0 \\leq a \\wedge 0 \\leq b \\wedge a < \\infty \\wedge b < \\infty\"\n+        r\"\\text{Domain: }0 \\leq a \\wedge 0 \\leq b \\wedge a < \\infty \\wedge b < \\infty\"\n \n+    assert latex(RandomDomain(FiniteSet(x), FiniteSet(1, 2))) == \\\n+        r'\\text{Domain: }\\left\\{x\\right\\}\\text{ in }\\left\\{1, 2\\right\\}'\n \n def test_PrettyPoly():\n     from sympy.polys.domains import QQ\n@@ -1504,15 +1515,20 @@ def test_Modules():\n \n     Q = F / M\n     assert latex(Q) == \\\n-        r\"\\frac{{\\mathbb{Q}\\left[x, y\\right]}^{2}}{\\left\\langle {\\left[ {x},{y} \\right]},{\\left[ {1},{x^{2}} \\right]} \\right\\rangle}\"\n+        r\"\\frac{{\\mathbb{Q}\\left[x, y\\right]}^{2}}{\\left\\langle {\\left[ {x},\"\\\n+        r\"{y} \\right]},{\\left[ {1},{x^{2}} \\right]} \\right\\rangle}\"\n     assert latex(Q.submodule([1, x**3/2], [2, y])) == \\\n-        r\"\\left\\langle {{\\left[ {1},{\\frac{x^{3}}{2}} \\right]} + {\\left\\langle {\\left[ {x},{y} \\right]},{\\left[ {1},{x^{2}} \\right]} \\right\\rangle}},{{\\left[ {2},{y} \\right]} + {\\left\\langle {\\left[ {x},{y} \\right]},{\\left[ {1},{x^{2}} \\right]} \\right\\rangle}} \\right\\rangle\"\n+        r\"\\left\\langle {{\\left[ {1},{\\frac{x^{3}}{2}} \\right]} + {\\left\"\\\n+        r\"\\langle {\\left[ {x},{y} \\right]},{\\left[ {1},{x^{2}} \\right]} \"\\\n+        r\"\\right\\rangle}},{{\\left[ {2},{y} \\right]} + {\\left\\langle {\\left[ \"\\\n+        r\"{x},{y} \\right]},{\\left[ {1},{x^{2}} \\right]} \\right\\rangle}} \\right\\rangle\"\n \n     h = homomorphism(QQ.old_poly_ring(x).free_module(2),\n                      QQ.old_poly_ring(x).free_module(2), [0, 0])\n \n     assert latex(h) == \\\n-        r\"{\\left[\\begin{matrix}0 & 0\\\\0 & 0\\end{matrix}\\right]} : {{\\mathbb{Q}\\left[x\\right]}^{2}} \\to {{\\mathbb{Q}\\left[x\\right]}^{2}}\"\n+        r\"{\\left[\\begin{matrix}0 & 0\\\\0 & 0\\end{matrix}\\right]} : \"\\\n+        r\"{{\\mathbb{Q}\\left[x\\right]}^{2}} \\to {{\\mathbb{Q}\\left[x\\right]}^{2}}\"\n \n \n def test_QuotientRing():\n@@ -1528,7 +1544,7 @@ def test_Tr():\n     #TODO: Handle indices\n     A, B = symbols('A B', commutative=False)\n     t = Tr(A*B)\n-    assert latex(t) == r'\\mbox{Tr}\\left(A B\\right)'\n+    assert latex(t) == r'\\operatorname{tr}\\left(A B\\right)'\n \n \n def test_Adjoint():\n@@ -1931,7 +1947,7 @@ def test_WedgeProduct_printing():\n     from sympy.diffgeom.rn import R2\n     from sympy.diffgeom import WedgeProduct\n     wp = WedgeProduct(R2.dx, R2.dy)\n-    assert latex(wp) == r\"\\mathrm{d}x \\wedge \\mathrm{d}y\"\n+    assert latex(wp) == r\"\\operatorname{d}x \\wedge \\operatorname{d}y\"\n \n \n def test_issue_14041():\n@@ -2045,15 +2061,17 @@ def test_issue_15353():\n     # Obtained from nonlinsolve([(sin(a*x)),cos(a*x)],[x,a])\n     sol = ConditionSet(Tuple(x, a), FiniteSet(sin(a*x), cos(a*x)), S.Complexes)\n     assert latex(sol) == \\\n-        r'\\left\\{\\left( x, \\  a\\right) \\mid \\left( x, \\  a\\right) \\in \\mathbb{C} \\wedge \\left\\{\\sin{\\left(a x \\right)}, \\cos{\\left(a x \\right)}\\right\\} \\right\\}'\n+        r'\\left\\{\\left( x, \\  a\\right) \\mid \\left( x, \\  a\\right) \\in '\\\n+        r'\\mathbb{C} \\wedge \\left\\{\\sin{\\left(a x \\right)}, \\cos{\\left(a x '\\\n+        r'\\right)}\\right\\} \\right\\}'\n \n \n def test_trace():\n     # Issue 15303\n     from sympy import trace\n     A = MatrixSymbol(\"A\", 2, 2)\n-    assert latex(trace(A)) == r\"\\mathrm{tr}\\left(A \\right)\"\n-    assert latex(trace(A**2)) == r\"\\mathrm{tr}\\left(A^{2} \\right)\"\n+    assert latex(trace(A)) == r\"\\operatorname{tr}\\left(A \\right)\"\n+    assert latex(trace(A**2)) == r\"\\operatorname{tr}\\left(A^{2} \\right)\"\n \n \n def test_print_basic():\n@@ -2088,9 +2106,9 @@ def test_MatrixSymbol_bold():\n     from sympy import trace\n     A = MatrixSymbol(\"A\", 2, 2)\n     assert latex(trace(A), mat_symbol_style='bold') == \\\n-        r\"\\mathrm{tr}\\left(\\mathbf{A} \\right)\"\n+        r\"\\operatorname{tr}\\left(\\mathbf{A} \\right)\"\n     assert latex(trace(A), mat_symbol_style='plain') == \\\n-        r\"\\mathrm{tr}\\left(A \\right)\"\n+        r\"\\operatorname{tr}\\left(A \\right)\"\n \n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n@@ -2113,3 +2131,28 @@ def test_imaginary_unit():\n     assert latex(1 + I, imaginary_unit='foo') == '1 + foo'\n     assert latex(I, imaginary_unit=\"ti\") == '\\\\text{i}'\n     assert latex(I, imaginary_unit=\"tj\") == '\\\\text{j}'\n+\n+\n+def test_text_re_im():\n+    assert latex(im(x), gothic_re_im=True) ==  r'\\Im{\\left(x\\right)}'\n+    assert latex(im(x), gothic_re_im=False) ==  r'\\operatorname{im}{\\left(x\\right)}'\n+    assert latex(re(x), gothic_re_im=True) ==  r'\\Re{\\left(x\\right)}'\n+    assert latex(re(x), gothic_re_im=False) ==  r'\\operatorname{re}{\\left(x\\right)}'\n+\n+\n+def test_DiffGeomMethods():\n+    from sympy.diffgeom import Manifold, Patch, CoordSystem, BaseScalarField, Differential\n+    from sympy.diffgeom.rn import R2\n+    m = Manifold('M', 2)\n+    assert latex(m) == r'\\text{M}'\n+    p = Patch('P', m)\n+    assert latex(p) == r'\\text{P}_{\\text{M}}'\n+    rect = CoordSystem('rect', p)\n+    assert latex(rect) == r'\\text{rect}^{\\text{P}}_{\\text{M}}'\n+    b = BaseScalarField(rect, 0)\n+    assert latex(b) ==  r'\\mathbf{rect_{0}}'\n+\n+    g = Function('g')\n+    s_field = g(R2.x, R2.y)\n+    assert latex(Differential(s_field)) == \\\n+        r'\\operatorname{d}\\left(g{\\left(\\mathbf{x},\\mathbf{y} \\right)}\\right)'\n",
  "problem_statement": "LaTeX priniting: \\mathrm vs. \\text\nIt turns out that both `\\mathrm` and `\\text` is used for printing \"text\" in the LaTeX printing routines. It seems like there should be one that is standard and that it should be possible to change that by configuration.\r\n\r\n### \\text\r\n * **Pro** adapts the font to the used math-font, not necessarily a Roman font\r\n * **Con** Relies on the `amsmath` (or some other `ams*` package\r\n\r\n### \\mathrm\r\n * **Pro** works in default LaTeX without importing any packages\r\n * **Con** always gives a Roman (Serif) font, even if the current math font is not Roman\r\n\r\nSome quick grep:ing tells us that there are 123 instances of `\\mathrm` and 46 instances of `\\text` in the .py-files.\r\n\r\nIdeally, this should be configurable, but even then we need to decide on a standard. Personally, I will set it to `\\text` the second it is implemented, but the package dependency may be confusing for newer users. (It seems like both options works in e.g. iPython but I have not explicitly tested, just not noted any issue.)\r\n\r\nProbably the easiest way to implement it is to add a helper function `print_text` or something so people do not have to test at every single instance.\n",
  "hints_text": "I should probably add that many of these instances are probably from documentation, so the effort to implement it will not be to manually change 169 instances.\nI think that \\text and \\mathrm are intended for different kinds of use. \\mathrm is used for symbols like 'sin' that contain typically only a few letters. \\text is used for non-mathematical comments like 'otherwise', and the font is the current font used outside math.\nThere is also `\\operatorname` which seems to be the best of two worlds. When it comes to operator names. This is used 183 times. So maybe it is less of a issue than I initially thought.\r\n\r\nThe main problem with `\\mathrm` as I see it is if you are using your equations in a presentation with Beamer and the template is using a san-serif font. In this case all math will also be using a sans font, including sin etc, except for stuff put in `\\mathrm` (one can of course redefine that font as well, but that doesn't seem like the right thing to do.\r\n\r\nLooking a bit more into it, the current usage of `\\mathrm` consists of primarily these classes:\r\n * To make a d in e.g. dt for an integral or differential non-italic (can be argued what the best way is) (primarily in documentation, but maybe whatever the correct way is should be used in the code?)\r\n * For \"for\" (should be text, in documentation, `\\text` is used in printing)\r\n * For some specific functions (in documentation), should most of the time be operatorname instead\r\n * For some constants in core, like NaN and True. I think this is not correct as there is not point in having NaN in Roman in an otherwise non-Roman equation\r\n\r\nSo should be quite manageable. \nIt is my understanding that \\operatorname will also use a math font (\\mathrm, I think) but will also add automatic space around the name in question, so \"\\operatorname{sin}x\" will print \"sin\", a (thin) space and \"x\".\nYou may be correct. I'll try to confirm my (old) experience with Beamer etc and see what I get out of that.\nI believe our LaTeX printer already assumes amsmath is used in several places. I don't use LaTeX much, but are there instances where amsmath can't be used? \nI remembered correctly. This is an output from beamer with the different options:\r\n![image](https://user-images.githubusercontent.com/8114497/52373097-25233b80-2a5a-11e9-8d26-d74860eda71f.png)\r\nThis shows quite clearly why `\\mathrm` isn't a good idea (and why `\\operatorname` is better for operators, as it uses the same spacing). The other spacing one can somehow ignore though, as of course it is possible to get it to be identical, but it requires figuring out what it is.\nRegarding amsmath: I do not know of any such case. I am thinking more from the perspective that many people have a hard time getting started with LaTeX and packages and so on. But I think that `\\operatorname` and `\\text` is still the way to go. Unless there are some symbols that for sure should be written in a Roman font.\nIn latex.py, `\\mathrm` is used in the printers for `bool`, `NoneType`, `Trace`, `BaseScalarField`, and `Differential` (which has some unreachable code btw). For Trace we should obviously be using `\\operatorname`, but for the others I'm not so sure. `\\text` is currently used only in the Piecewise printer. \nRegarding amsmath I realized that \\dddot and \\ddddot are from amsmath, so #15982 added a bit more amsmath dependencies... (They were already used in the physics.vector printer earlier though.)\nEven `matrix` requires amsmath, according to [this](https://en.wikibooks.org/wiki/LaTeX/Mathematics#cite_note-amsmath-3). I've never heard anyone complain about it. amsmath comes with LaTeX and is fully supported by MathJax, so I don't think there is an issue there.\r\n\r\nThe main compatibility issues for LaTeX are that it should be supported by MathJax (but virtually everything is), and it should be supported by matplotlib's mathtext if possible. ",
  "created_at": "2019-02-23T19:47:42Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_latex_builtins\", \"test_latex_functions\", \"test_latex_RandomDomain\", \"test_Tr\", \"test_WedgeProduct_printing\", \"test_trace\", \"test_MatrixSymbol_bold\", \"test_text_re_im\"]",
  "PASS_TO_PASS": "[\"test_seterr\", \"test_mod\", \"test_divmod\", \"test_igcd\", \"test_igcd_lehmer\", \"test_igcd2\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Number_cmp\", \"test_Rational_cmp\", \"test_Float\", \"test_float_mpf\", \"test_Float_RealElement\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_issue_14289\", \"test_Float_from_tuple\", \"test_Infinity\", \"test_Infinity_2\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_Infinity_inequations\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_integer_log\", \"test_isqrt\", \"test_powers_Integer\", \"test_powers_Rational\", \"test_powers_Float\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_long\", \"test_real_bug\", \"test_bug_sqrt\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_issue_13890\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_TribonacciConstant_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Float_eq\", \"test_int_NumberSymbols\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_simplify_AlgebraicNumber\", \"test_Float_idempotence\", \"test_comp\", \"test_issue_9491\", \"test_issue_10063\", \"test_issue_10020\", \"test_invert_numbers\", \"test_mod_inverse\", \"test_golden_ratio_rewrite_as_sqrt\", \"test_tribonacci_constant_rewrite_as_sqrt\", \"test_comparisons_with_unknown_type\", \"test_NumberSymbol_comparison\", \"test_Integer_precision\", \"test_Integer_ceiling_floor\", \"test_ComplexInfinity\", \"test_Infinity_floor_ceiling_power\", \"test_One_power\", \"test_NegativeInfinity\", \"test_printmethod\", \"test_latex_basic\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Adjoint\", \"test_Hadamard\", \"test_ZeroMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_7117\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_KroneckerProduct_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_issue_14041\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_issue_15353\", \"test_print_basic\", \"test_imaginary_unit\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.105488",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}