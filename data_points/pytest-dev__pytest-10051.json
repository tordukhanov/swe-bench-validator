{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-10051",
  "base_commit": "aa55975c7d3f6c9f6d7f68accc41bb7cadf0eb9a",
  "patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -40,7 +40,6 @@\n else:\n     logging_StreamHandler = logging.StreamHandler\n \n-\n DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n _ANSI_ESCAPE_SEQ = re.compile(r\"\\x1b\\[[\\d;]+m\")\n@@ -345,6 +344,10 @@ def reset(self) -> None:\n         self.records = []\n         self.stream = StringIO()\n \n+    def clear(self) -> None:\n+        self.records.clear()\n+        self.stream = StringIO()\n+\n     def handleError(self, record: logging.LogRecord) -> None:\n         if logging.raiseExceptions:\n             # Fail the test if the log message is bad (emit failed).\n@@ -440,7 +443,7 @@ def messages(self) -> List[str]:\n \n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n-        self.handler.reset()\n+        self.handler.clear()\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\n",
  "test_patch": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -172,6 +172,24 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+def test_clear_for_call_stage(caplog, logging_during_setup_and_teardown):\n+    logger.info(\"a_call_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n+\n+    caplog.clear()\n+\n+    assert caplog.get_records(\"call\") == []\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n+\n+    logging.info(\"a_call_log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log_after_clear\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n+\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n",
  "problem_statement": "caplog.get_records and caplog.clear conflict\n# Description\r\n\r\n`caplog.get_records()` gets decoupled from actual caplog records when `caplog.clear()` is called. As a result, after `caplog.clear()` is called, `caplog.get_records()` is frozen: it does not get cleared, nor does it get new records.\r\n\r\nDuring test set up it is [set to the same list](https://github.com/pytest-dev/pytest/blob/28e8c8582ea947704655a3c3f2d57184831336fd/src/_pytest/logging.py#L699) as `caplog.records`, but the latter gets [replaced rather than cleared](https://github.com/pytest-dev/pytest/blob/28e8c8582ea947704655a3c3f2d57184831336fd/src/_pytest/logging.py#L345) in `caplog.clear()`, which diverges the two objects.\r\n\r\n# Reproductive example\r\n```python\r\nimport logging\r\n\r\ndef test(caplog) -> None:\r\n    def verify_consistency() -> None:\r\n        assert caplog.get_records(\"call\") == caplog.records\r\n\r\n    verify_consistency()\r\n    logging.warning(\"test\")\r\n    verify_consistency()\r\n    caplog.clear()\r\n    verify_consistency()  # fails: assert [<LogRecord: ...y, 8, \"test\">] == []\r\n```\r\n\r\n# Environment details\r\nArch Linux, Python 3.9.10:\r\n```\r\nPackage    Version\r\n---------- -------\r\nattrs      21.4.0\r\niniconfig  1.1.1\r\npackaging  21.3\r\npip        22.0.4\r\npluggy     1.0.0\r\npy         1.11.0\r\npyparsing  3.0.8\r\npytest     7.1.1\r\nsetuptools 60.10.0\r\ntomli      2.0.1\r\nwheel      0.37.1\r\n```\n",
  "hints_text": "",
  "created_at": "2022-06-15T17:39:53Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"testing/logging/test_fixture.py::test_clear_for_call_stage\"]",
  "PASS_TO_PASS": "[\"testing/logging/test_fixture.py::test_change_level\", \"testing/logging/test_fixture.py::test_with_statement\", \"testing/logging/test_fixture.py::test_log_access\", \"testing/logging/test_fixture.py::test_messages\", \"testing/logging/test_fixture.py::test_record_tuples\", \"testing/logging/test_fixture.py::test_unicode\", \"testing/logging/test_fixture.py::test_clear\", \"testing/logging/test_fixture.py::test_caplog_captures_for_all_stages\", \"testing/logging/test_fixture.py::test_fixture_help\", \"testing/logging/test_fixture.py::test_change_level_undo\", \"testing/logging/test_fixture.py::test_change_level_undos_handler_level\", \"testing/logging/test_fixture.py::test_ini_controls_global_log_level\", \"testing/logging/test_fixture.py::test_caplog_can_override_global_log_level\", \"testing/logging/test_fixture.py::test_caplog_captures_despite_exception\", \"testing/logging/test_fixture.py::test_log_report_captures_according_to_config_option_upon_failure\"]",
  "environment_setup_commit": "572b5657d7ca557593418ce0319fabff88800c73",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.920728",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}