{
  "repo": "django/django",
  "instance_id": "django__django-12407",
  "base_commit": "86908785076b2bbc31b908781da6b6ad1779b18b",
  "patch": "diff --git a/django/template/loader_tags.py b/django/template/loader_tags.py\n--- a/django/template/loader_tags.py\n+++ b/django/template/loader_tags.py\n@@ -168,12 +168,16 @@ def render(self, context):\n         template = self.template.resolve(context)\n         # Does this quack like a Template?\n         if not callable(getattr(template, 'render', None)):\n-            # If not, try the cache and get_template().\n-            template_name = template\n+            # If not, try the cache and select_template().\n+            template_name = template or ()\n+            if isinstance(template_name, str):\n+                template_name = (template_name,)\n+            else:\n+                template_name = tuple(template_name)\n             cache = context.render_context.dicts[0].setdefault(self, {})\n             template = cache.get(template_name)\n             if template is None:\n-                template = context.template.engine.get_template(template_name)\n+                template = context.template.engine.select_template(template_name)\n                 cache[template_name] = template\n         # Use the base.Template of a backends.django.Template.\n         elif hasattr(template, 'template'):\n",
  "test_patch": "diff --git a/tests/template_tests/syntax_tests/test_include.py b/tests/template_tests/syntax_tests/test_include.py\n--- a/tests/template_tests/syntax_tests/test_include.py\n+++ b/tests/template_tests/syntax_tests/test_include.py\n@@ -243,6 +243,26 @@ def test_include_template_argument(self):\n         output = outer_tmpl.render(ctx)\n         self.assertEqual(output, 'This worked!')\n \n+    def test_include_template_iterable(self):\n+        engine = Engine.get_default()\n+        outer_temp = engine.from_string('{% include var %}')\n+        tests = [\n+            ('admin/fail.html', 'index.html'),\n+            ['admin/fail.html', 'index.html'],\n+        ]\n+        for template_names in tests:\n+            with self.subTest(template_names):\n+                output = outer_temp.render(Context({'var': template_names}))\n+                self.assertEqual(output, 'index\\n')\n+\n+    def test_include_template_none(self):\n+        engine = Engine.get_default()\n+        outer_temp = engine.from_string('{% include var %}')\n+        ctx = Context({'var': None})\n+        msg = 'No template names provided'\n+        with self.assertRaisesMessage(TemplateDoesNotExist, msg):\n+            outer_temp.render(ctx)\n+\n     def test_include_from_loader_get_template(self):\n         tmpl = loader.get_template('include_tpl.html')  # {% include tmpl %}\n         output = tmpl.render({'tmpl': loader.get_template('index.html')})\n",
  "problem_statement": "{% include %} uses get_template where it could select_template\nDescription\n\t\nIt'd be nice if the Include template tag was sensible enough to allow fallbacks by selecting the most appropriate template, as things like render/render_to_response/render_to_string do. It's tripped me up on more than one occasion, and it seems a trivial feature to support, from my limited testing.\n>>> from django.template import Template, Context\n>>> tmpl = Template('{% include var %}')\n>>> ctx = Context({'var':'admin/base.html'})\n>>> ctx\n[{'var': 'admin/base.html'}]\n>>> tmpl.render(ctx)\n... some HTML output ...\n>>> ctx.update({'var':['admin/base.html', 'admin/fail.html']})\n{'var': ['admin/base.html', 'admin/fail.html']}\n>>> tmpl.render(ctx)\nTraceback (most recent call last):\n File \"<console>\", line 1, in <module>\n File \"/path/django/template/base.py\", line 140, in render\n\treturn self._render(context)\n File \"/path/django/template/base.py\", line 134, in _render\n\treturn self.nodelist.render(context)\n File \"/path/django/template/base.py\", line 823, in render\n\tbit = self.render_node(node, context)\n File \"/path/django/template/debug.py\", line 74, in render_node\n\treturn node.render(context)\n File \"/path/django/template/loader_tags.py\", line 165, in render\n\ttemplate = get_template(template_name)\n File \"/path/django/template/loader.py\", line 145, in get_template\n\ttemplate, origin = find_template(template_name)\n File \"/path/django/template/loader.py\", line 138, in find_template\n\traise TemplateDoesNotExist(name)\nTemplateDoesNotExist: ['admin/base.html', 'admin/fail.html']\nThe 'fix' is to change â€‹this line from get_template to select_template, though this might now be slightly complicated by the recent changes in 5cdacbda034af928f5033c9afc7b50ee0b13f75c to allow for rendering of Template instances.\nChanging to select_template on 1.4 yields the results I'd expect:\n>>> from django.template import Template, Context \n>>> tmpl = Template('{% include var %}')\n>>> ctx = Context({'var':['admin/base.html', 'admin/fail.html']})\n>>> tmpl.render(ctx)\n... some HTML output ...\nBoth the above shell sessions assume django.contrib.admin is in INSTALLED_APPS.\n",
  "hints_text": "I now have a working patch + test for this, but because it introduces another slightly different way of selecting a template based on the given arguments, I'm holding off on opening a PR, to see if there's merit to refactoring template selection into one place; see #21065 for the details.\nI agree that this should follow upon a resolution of #21065. Three different ways of selecting templates seems like two too many already.",
  "created_at": "2020-02-02T16:53:25Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_include_template_iterable (template_tests.syntax_tests.test_include.IncludeTests)\", \"test_include_template_none (template_tests.syntax_tests.test_include.IncludeTests)\"]",
  "PASS_TO_PASS": "[\"test_include01 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include02 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include03 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include04 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include06 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include07 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include08 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include09 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include10 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include11 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include12 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include13 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include14 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_empty (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error01 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error02 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error03 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error04 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error05 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error06 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error07 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error08 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error09 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_error10 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_fail1 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_include_fail2 (template_tests.syntax_tests.test_include.IncludeTagTests)\", \"test_extends_include_missing_baseloader (template_tests.syntax_tests.test_include.IncludeTests)\", \"test_extends_include_missing_cachedloader (template_tests.syntax_tests.test_include.IncludeTests)\", \"test_include_cache (template_tests.syntax_tests.test_include.IncludeTests)\", \"test_include_from_loader_get_template (template_tests.syntax_tests.test_include.IncludeTests)\", \"test_include_immediate_missing (template_tests.syntax_tests.test_include.IncludeTests)\", \"test_include_missing_template (template_tests.syntax_tests.test_include.IncludeTests)\", \"test_include_recursive (template_tests.syntax_tests.test_include.IncludeTests)\", \"test_include_template_argument (template_tests.syntax_tests.test_include.IncludeTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.624412",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}