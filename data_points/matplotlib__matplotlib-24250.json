{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-24250",
  "base_commit": "f6e75121e11b6ba918c5f6e5c2cc1b9f4fccc8b0",
  "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2445,10 +2445,6 @@ def __init__(self,\n         # pickling.\n         self._canvas_callbacks = cbook.CallbackRegistry(\n             signals=FigureCanvasBase.events)\n-        self._button_pick_id = self._canvas_callbacks._connect_picklable(\n-            'button_press_event', self.pick)\n-        self._scroll_pick_id = self._canvas_callbacks._connect_picklable(\n-            'scroll_event', self.pick)\n         connect = self._canvas_callbacks._connect_picklable\n         self._mouse_key_ids = [\n             connect('key_press_event', backend_bases._key_handler),\n@@ -2459,6 +2455,8 @@ def __init__(self,\n             connect('scroll_event', backend_bases._mouse_handler),\n             connect('motion_notify_event', backend_bases._mouse_handler),\n         ]\n+        self._button_pick_id = connect('button_press_event', self.pick)\n+        self._scroll_pick_id = connect('scroll_event', self.pick)\n \n         if figsize is None:\n             figsize = mpl.rcParams['figure.figsize']\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_bases.py b/lib/matplotlib/tests/test_backend_bases.py\n--- a/lib/matplotlib/tests/test_backend_bases.py\n+++ b/lib/matplotlib/tests/test_backend_bases.py\n@@ -2,7 +2,7 @@\n \n from matplotlib import path, transforms\n from matplotlib.backend_bases import (\n-    FigureCanvasBase, LocationEvent, MouseButton, MouseEvent,\n+    FigureCanvasBase, KeyEvent, LocationEvent, MouseButton, MouseEvent,\n     NavigationToolbar2, RendererBase)\n from matplotlib.backend_tools import RubberbandBase\n from matplotlib.figure import Figure\n@@ -124,12 +124,18 @@ def test_pick():\n     fig = plt.figure()\n     fig.text(.5, .5, \"hello\", ha=\"center\", va=\"center\", picker=True)\n     fig.canvas.draw()\n+\n     picks = []\n-    fig.canvas.mpl_connect(\"pick_event\", lambda event: picks.append(event))\n-    start_event = MouseEvent(\n-        \"button_press_event\", fig.canvas, *fig.transFigure.transform((.5, .5)),\n-        MouseButton.LEFT)\n-    fig.canvas.callbacks.process(start_event.name, start_event)\n+    def handle_pick(event):\n+        assert event.mouseevent.key == \"a\"\n+        picks.append(event)\n+    fig.canvas.mpl_connect(\"pick_event\", handle_pick)\n+\n+    KeyEvent(\"key_press_event\", fig.canvas, \"a\")._process()\n+    MouseEvent(\"button_press_event\", fig.canvas,\n+               *fig.transFigure.transform((.5, .5)),\n+               MouseButton.LEFT)._process()\n+    KeyEvent(\"key_release_event\", fig.canvas, \"a\")._process()\n     assert len(picks) == 1\n \n \n",
  "problem_statement": "[Bug]: pick events do not forward mouseevent-key on Linux\n### Bug summary\r\n\r\nSomehow on `CentOS Linux 7` keyboard-buttons are not forwarded with `pick_events`... on `Windows 10` everything works as expected.\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nf, ax = plt.subplots()\r\ns = ax.scatter([1,2,3,4], [1,2,3,4], s=1000)\r\ns.set_picker(True)\r\n\r\ndef doit(event):\r\n    if event.name == \"button_press_event\":\r\n        print(event.name, event.key)\r\n    if event.name == \"pick_event\":\r\n        print(event.name, event.mouseevent.key)\r\n\r\nf.canvas.mpl_connect(\"button_press_event\", doit)\r\nf.canvas.mpl_connect(\"pick_event\", doit)\r\n```\r\n\r\n\r\n### Actual outcome\r\nWhen clicking on one of the datapoints while pressing the buttons `1` `2` and `3` the following happens:\r\n\r\non Windows I get:\r\n\r\n```python\r\npick_event 1\r\nbutton_press_event 1\r\npick_event 2\r\nbutton_press_event 2\r\npick_event 3\r\nbutton_press_event 3\r\n```\r\non CentOS Linux I get:\r\n\r\n```python\r\npick_event None\r\nbutton_press_event 1\r\npick_event None\r\nbutton_press_event 2\r\npick_event None\r\nbutton_press_event 3\r\n```\r\n\r\n### Expected outcome\r\n\r\nThe same output for both OS\r\n\r\n### Operating system\r\n\r\nWindows / Linux CentOS7\r\n\r\n### Matplotlib Version\r\n\r\n3.6.1\r\n\r\n### Matplotlib Backend\r\n\r\nQt5Agg\r\n\r\n### Python version\r\n\r\n3.9.13\r\n\r\n\r\n### Installation\r\n\r\nconda\n",
  "hints_text": "(As I have some issues with my Qt install, I tried it with tk and wx and get None for both types of events... Also on CentOS 7.)\n@oscargus \r\nThanks for the response! That's even worse ðŸ˜…  Do you have any idea what's going on here?\r\n(as far as I know this is the correct way of determining if a key is pressed while a mouse-button is clicked...)\nOh, I wouldn't trust my statement so much...\r\n\r\nLer me fet back tomorrow (left the office now) with the proper outcome.\r\n\r\nNo, I do not really know what is going on, but I seem to recall that there is something with Wayland not reporting keys correctly. Will try to dig up that issue.\nManaged to reproduce this issue on EndeavourOS.\n@oscargus the issue happens also on X11, not only Wayland\n@oscargus It took me a while to sort out, you have to hold down '1\" (or really any key) as this is looking at the key board key not the mouse button).  I was also thrown using 1, 2, 3 as those are the names of the mouse buttons.  If I hold 'a' down I get\r\n\r\n\r\n```\r\npick_event None\r\nbutton_press_event a\r\npick_event None\r\nbutton_press_event a\r\n```\r\n\r\nwhich matches the OP. \r\n\r\nThis a regression from 3.5, likely due to the refactoring of the event tracking done in https://github.com/matplotlib/matplotlib/pull/16931 but have not bisected to be sure.\r\n\r\nattn @anntzer \nIndeed, this occurs because both (1) attaching the key attribute to the mouseevent and (2) emitting the pick_event are now done by callbacks, and we just need to ensure that callback (1) comes before callback (2), i.e.\r\n```patch\r\ndiff --git i/lib/matplotlib/figure.py w/lib/matplotlib/figure.py\r\nindex 1636e20101..2bbd5254b9 100644\r\n--- i/lib/matplotlib/figure.py\r\n+++ w/lib/matplotlib/figure.py\r\n@@ -2444,10 +2444,6 @@ class Figure(FigureBase):\r\n         # pickling.\r\n         self._canvas_callbacks = cbook.CallbackRegistry(\r\n             signals=FigureCanvasBase.events)\r\n-        self._button_pick_id = self._canvas_callbacks._connect_picklable(\r\n-            'button_press_event', self.pick)\r\n-        self._scroll_pick_id = self._canvas_callbacks._connect_picklable(\r\n-            'scroll_event', self.pick)\r\n         connect = self._canvas_callbacks._connect_picklable\r\n         self._mouse_key_ids = [\r\n             connect('key_press_event', backend_bases._key_handler),\r\n@@ -2458,6 +2454,10 @@ class Figure(FigureBase):\r\n             connect('scroll_event', backend_bases._mouse_handler),\r\n             connect('motion_notify_event', backend_bases._mouse_handler),\r\n         ]\r\n+        self._button_pick_id = self._canvas_callbacks._connect_picklable(\r\n+            'button_press_event', self.pick)\r\n+        self._scroll_pick_id = self._canvas_callbacks._connect_picklable(\r\n+            'scroll_event', self.pick)\r\n \r\n         if figsize is None:\r\n             figsize = mpl.rcParams['figure.figsize']\r\n```\r\nfixes the issue AFAICT.\r\n\r\nFeel free to pick up the patch, or I'll make a PR if no one else does.",
  "created_at": "2022-10-22T09:52:56Z",
  "version": "3.6",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_backend_bases.py::test_pick\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_backend_bases.py::test_uses_per_path\", \"lib/matplotlib/tests/test_backend_bases.py::test_canvas_ctor\", \"lib/matplotlib/tests/test_backend_bases.py::test_get_default_filename\", \"lib/matplotlib/tests/test_backend_bases.py::test_canvas_change\", \"lib/matplotlib/tests/test_backend_bases.py::test_non_gui_warning\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[42-24]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[None-42]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[None-None]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[200-100.01]\", \"lib/matplotlib/tests/test_backend_bases.py::test_location_event_position[205.75-2.0]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_zoom\", \"lib/matplotlib/tests/test_backend_bases.py::test_widgetlock_zoompan\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-1-expected0-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[zoom-3-expected1-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-1-expected2-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-vertical-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-vertical-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-horizontal-imshow]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_colorbar[pan-3-expected3-horizontal-contourf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolbar_zoompan\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[svg]\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[ps]\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[pdf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_draw[pgf]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend0-expectedxlim0-expectedylim0]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend1-expectedxlim1-expectedylim1]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend2-expectedxlim2-expectedylim2]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend3-expectedxlim3-expectedylim3]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend4-expectedxlim4-expectedylim4]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend5-expectedxlim5-expectedylim5]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend6-expectedxlim6-expectedylim6]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[None-mouseend7-expectedxlim7-expectedylim7]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend8-expectedxlim8-expectedylim8]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend9-expectedxlim9-expectedylim9]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend10-expectedxlim10-expectedylim10]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend11-expectedxlim11-expectedylim11]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend12-expectedxlim12-expectedylim12]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[shift-mouseend13-expectedxlim13-expectedylim13]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[x-mouseend14-expectedxlim14-expectedylim14]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[y-mouseend15-expectedxlim15-expectedylim15]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[control-mouseend16-expectedxlim16-expectedylim16]\", \"lib/matplotlib/tests/test_backend_bases.py::test_interactive_pan[control-mouseend17-expectedxlim17-expectedylim17]\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolmanager_remove\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolmanager_get_tool\", \"lib/matplotlib/tests/test_backend_bases.py::test_toolmanager_update_keymap\"]",
  "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.809230",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}