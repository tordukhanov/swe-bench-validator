{
  "repo": "django/django",
  "instance_id": "django__django-16830",
  "base_commit": "601ffb0da3a8c3900164b356c585650c00d238b0",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -832,6 +832,26 @@ async def asave(\n \n     asave.alters_data = True\n \n+    @classmethod\n+    def _validate_force_insert(cls, force_insert):\n+        if force_insert is False:\n+            return ()\n+        if force_insert is True:\n+            return (cls,)\n+        if not isinstance(force_insert, tuple):\n+            raise TypeError(\"force_insert must be a bool or tuple.\")\n+        for member in force_insert:\n+            if not isinstance(member, ModelBase):\n+                raise TypeError(\n+                    f\"Invalid force_insert member. {member!r} must be a model subclass.\"\n+                )\n+            if not issubclass(cls, member):\n+                raise TypeError(\n+                    f\"Invalid force_insert member. {member.__qualname__} must be a \"\n+                    f\"base of {cls.__qualname__}.\"\n+                )\n+        return force_insert\n+\n     def save_base(\n         self,\n         raw=False,\n@@ -873,7 +893,11 @@ def save_base(\n         with context_manager:\n             parent_inserted = False\n             if not raw:\n-                parent_inserted = self._save_parents(cls, using, update_fields)\n+                # Validate force insert only when parents are inserted.\n+                force_insert = self._validate_force_insert(force_insert)\n+                parent_inserted = self._save_parents(\n+                    cls, using, update_fields, force_insert\n+                )\n             updated = self._save_table(\n                 raw,\n                 cls,\n@@ -900,7 +924,9 @@ def save_base(\n \n     save_base.alters_data = True\n \n-    def _save_parents(self, cls, using, update_fields, updated_parents=None):\n+    def _save_parents(\n+        self, cls, using, update_fields, force_insert, updated_parents=None\n+    ):\n         \"\"\"Save all the parents of cls using values from self.\"\"\"\n         meta = cls._meta\n         inserted = False\n@@ -919,13 +945,14 @@ def _save_parents(self, cls, using, update_fields, updated_parents=None):\n                     cls=parent,\n                     using=using,\n                     update_fields=update_fields,\n+                    force_insert=force_insert,\n                     updated_parents=updated_parents,\n                 )\n                 updated = self._save_table(\n                     cls=parent,\n                     using=using,\n                     update_fields=update_fields,\n-                    force_insert=parent_inserted,\n+                    force_insert=parent_inserted or issubclass(parent, force_insert),\n                 )\n                 if not updated:\n                     inserted = True\n",
  "test_patch": "diff --git a/tests/extra_regress/models.py b/tests/extra_regress/models.py\n--- a/tests/extra_regress/models.py\n+++ b/tests/extra_regress/models.py\n@@ -10,7 +10,7 @@ class RevisionableModel(models.Model):\n     title = models.CharField(blank=True, max_length=255)\n     when = models.DateTimeField(default=datetime.datetime.now)\n \n-    def save(self, *args, force_insert=None, force_update=None, **kwargs):\n+    def save(self, *args, force_insert=False, force_update=False, **kwargs):\n         super().save(\n             *args, force_insert=force_insert, force_update=force_update, **kwargs\n         )\ndiff --git a/tests/force_insert_update/models.py b/tests/force_insert_update/models.py\n--- a/tests/force_insert_update/models.py\n+++ b/tests/force_insert_update/models.py\n@@ -30,3 +30,13 @@ class SubSubCounter(SubCounter):\n class WithCustomPK(models.Model):\n     name = models.IntegerField(primary_key=True)\n     value = models.IntegerField()\n+\n+\n+class OtherSubCounter(Counter):\n+    other_counter_ptr = models.OneToOneField(\n+        Counter, primary_key=True, parent_link=True, on_delete=models.CASCADE\n+    )\n+\n+\n+class DiamondSubSubCounter(SubCounter, OtherSubCounter):\n+    pass\ndiff --git a/tests/force_insert_update/tests.py b/tests/force_insert_update/tests.py\n--- a/tests/force_insert_update/tests.py\n+++ b/tests/force_insert_update/tests.py\n@@ -1,9 +1,11 @@\n-from django.db import DatabaseError, IntegrityError, transaction\n+from django.db import DatabaseError, IntegrityError, models, transaction\n from django.test import TestCase\n \n from .models import (\n     Counter,\n+    DiamondSubSubCounter,\n     InheritedCounter,\n+    OtherSubCounter,\n     ProxyCounter,\n     SubCounter,\n     SubSubCounter,\n@@ -76,6 +78,29 @@ def test_force_update_on_inherited_model_without_fields(self):\n \n \n class ForceInsertInheritanceTests(TestCase):\n+    def test_force_insert_not_bool_or_tuple(self):\n+        msg = \"force_insert must be a bool or tuple.\"\n+        with self.assertRaisesMessage(TypeError, msg), transaction.atomic():\n+            Counter().save(force_insert=1)\n+        with self.assertRaisesMessage(TypeError, msg), transaction.atomic():\n+            Counter().save(force_insert=\"test\")\n+        with self.assertRaisesMessage(TypeError, msg), transaction.atomic():\n+            Counter().save(force_insert=[])\n+\n+    def test_force_insert_not_model(self):\n+        msg = f\"Invalid force_insert member. {object!r} must be a model subclass.\"\n+        with self.assertRaisesMessage(TypeError, msg), transaction.atomic():\n+            Counter().save(force_insert=(object,))\n+        instance = Counter()\n+        msg = f\"Invalid force_insert member. {instance!r} must be a model subclass.\"\n+        with self.assertRaisesMessage(TypeError, msg), transaction.atomic():\n+            Counter().save(force_insert=(instance,))\n+\n+    def test_force_insert_not_base(self):\n+        msg = \"Invalid force_insert member. SubCounter must be a base of Counter.\"\n+        with self.assertRaisesMessage(TypeError, msg):\n+            Counter().save(force_insert=(SubCounter,))\n+\n     def test_force_insert_false(self):\n         with self.assertNumQueries(3):\n             obj = SubCounter.objects.create(pk=1, value=0)\n@@ -87,6 +112,10 @@ def test_force_insert_false(self):\n             SubCounter(pk=obj.pk, value=2).save(force_insert=False)\n         obj.refresh_from_db()\n         self.assertEqual(obj.value, 2)\n+        with self.assertNumQueries(2):\n+            SubCounter(pk=obj.pk, value=3).save(force_insert=())\n+        obj.refresh_from_db()\n+        self.assertEqual(obj.value, 3)\n \n     def test_force_insert_false_with_existing_parent(self):\n         parent = Counter.objects.create(pk=1, value=1)\n@@ -96,13 +125,59 @@ def test_force_insert_false_with_existing_parent(self):\n     def test_force_insert_parent(self):\n         with self.assertNumQueries(3):\n             SubCounter(pk=1, value=1).save(force_insert=True)\n+        # Force insert a new parent and don't UPDATE first.\n+        with self.assertNumQueries(2):\n+            SubCounter(pk=2, value=1).save(force_insert=(Counter,))\n+        with self.assertNumQueries(2):\n+            SubCounter(pk=3, value=1).save(force_insert=(models.Model,))\n \n     def test_force_insert_with_grandparent(self):\n         with self.assertNumQueries(4):\n             SubSubCounter(pk=1, value=1).save(force_insert=True)\n+        # Force insert parents on all levels and don't UPDATE first.\n+        with self.assertNumQueries(3):\n+            SubSubCounter(pk=2, value=1).save(force_insert=(models.Model,))\n+        with self.assertNumQueries(3):\n+            SubSubCounter(pk=3, value=1).save(force_insert=(Counter,))\n+        # Force insert only the last parent.\n+        with self.assertNumQueries(4):\n+            SubSubCounter(pk=4, value=1).save(force_insert=(SubCounter,))\n \n     def test_force_insert_with_existing_grandparent(self):\n         # Force insert only the last child.\n         grandparent = Counter.objects.create(pk=1, value=1)\n         with self.assertNumQueries(4):\n             SubSubCounter(pk=grandparent.pk, value=1).save(force_insert=True)\n+        # Force insert a parent, and don't force insert a grandparent.\n+        grandparent = Counter.objects.create(pk=2, value=1)\n+        with self.assertNumQueries(3):\n+            SubSubCounter(pk=grandparent.pk, value=1).save(force_insert=(SubCounter,))\n+        # Force insert parents on all levels, grandparent conflicts.\n+        grandparent = Counter.objects.create(pk=3, value=1)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            SubSubCounter(pk=grandparent.pk, value=1).save(force_insert=(Counter,))\n+\n+    def test_force_insert_diamond_mti(self):\n+        # Force insert all parents.\n+        with self.assertNumQueries(4):\n+            DiamondSubSubCounter(pk=1, value=1).save(\n+                force_insert=(Counter, SubCounter, OtherSubCounter)\n+            )\n+        with self.assertNumQueries(4):\n+            DiamondSubSubCounter(pk=2, value=1).save(force_insert=(models.Model,))\n+        # Force insert parents, and don't force insert a common grandparent.\n+        with self.assertNumQueries(5):\n+            DiamondSubSubCounter(pk=3, value=1).save(\n+                force_insert=(SubCounter, OtherSubCounter)\n+            )\n+        grandparent = Counter.objects.create(pk=4, value=1)\n+        with self.assertNumQueries(4):\n+            DiamondSubSubCounter(pk=grandparent.pk, value=1).save(\n+                force_insert=(SubCounter, OtherSubCounter),\n+            )\n+        # Force insert all parents, grandparent conflicts.\n+        grandparent = Counter.objects.create(pk=5, value=1)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            DiamondSubSubCounter(pk=grandparent.pk, value=1).save(\n+                force_insert=(models.Model,)\n+            )\n",
  "problem_statement": "force_insert flag is not passed when saving parents on inherited models.\nDescription\n\t\nWe're using non-abstract model inheritance (table per model class) and issuing our own primary keys. When saving we pass force_insert=True to prevent the extra UPDATE statement that precedes the INSERT. The force_insert flag is respected on the child table but not on the parent. So given:\nclass ParentModel(models.Model):\n\tid = models.BigIntegerField(primary_key=True)\nclass ChildModel(ParentModel):\n\tpass\nChildModel(id=1).save(force_insert=True)\nWe'll see queries:\nUPDATE app_parentmodel (no rows affected)\nINSERT app_parentmodel\nINSERT app_childmodel\nThis is because Model.save_base doesn't pass force_insert along to Model._save_parents, and onto Model._save_table. Doing so would prevent the extra UPDATE and respect the spirit of the force_insert feature. This is a change I've made locally and seems to work / is pretty straightforward. I'm curious though if there's intent behind not carrying the force_insert functionality through for parents. I couldn't find any discussion on the topic.\nFor context about why this is particularly problematic in our case -- we're using MySQL w/ Innodb and Innodb will take out different exclusive locks for the UPDATE and INSERT in question -- so if you're creating new ChildModel instances in parallel you can get deadlocks when multiple threads issue query #1 and then need a lock with insert intention in order to get #2.\n",
  "hints_text": "Sounds reasonable.\nI started working on this. As is normal, it's note quite as easy as I hoped. The manager .create() methods assume force_insert and there's some previous behavior in tests (and so presumably in the wild) where code might do: parent = ParentModel.objects.create() child = ChildModel.objects.create(parent=parent) The create method will pass force_insert, so the second line fails because it attempts to insert the parent again. A prior attempt from @akaariai suggested breaking this behavior (which I'm game for, if the team suggests). I can't think of a reasonable alternative that doesn't involve some other backwards-incompatible change (like making force_insert an explicit argument to create). Here's the unmerged commit from @akaraaia: ​https://github.com/akaariai/django/commit/57384c7936fbd8d760a36c47a41ecef18e451308 From the (effectively duplicate) ticket: https://code.djangoproject.com/ticket/18305\nI want to work on this ticket. Can I get some help about it ?\nThis issue seems to be closed on ​https://github.com/django/django/commit/6b4834952dcce0db5cbc1534635c00ff8573a6d8 . Tested this with the current main with the following test. class Counter(models.Model): name = models.CharField(max_length=10) value = models.IntegerField() class SubCounter(Counter): pass def test_force_insert_on_im(self): a = Counter(id=1, name=\"Counter\", value=3).save() a = SubCounter(id=1, name=\"Subcounter\", value=2).save(force_insert=True) cntr = Counter.objects.first() subcntr = SubCounter.objects.first() self.assertEqual(subcntr.name, cntr.name) self.assertEqual(subcntr.value, cntr.value)\nThis is not fixed. force_insert is not passed to _save_parents() etc. Also, this ticket was accepted in 2019 so I'm not sure how it could be fixed 6 years earlier 🤔 Please don't close tickets without sending PR with tests confirming that they have been fixed.\nSorry about that. Just wanted to add the comment, I thought It would suggest about closing instead of actually closing them . will try to look into the _save_parents() method\nPR ​https://github.com/django/django/pull/16830\nHello phill-tornroth, I'm trying to reproduce the reported issue in order to properly review the proposed PR. I'm not able to generate the three queries you mentioned (UPDATE, INSERT, INSERT). What I see using sqlite, PG or MySQL is the same thing: 1. SELECT 1 AS `a` FROM `ticket_30382_parentmodel` WHERE `ticket_30382_parentmodel`.`id` = 1 LIMIT 1 2. INSERT INTO `ticket_30382_parentmodel` (`id`) VALUES (1) 3. INSERT INTO `ticket_30382_childmodel` (`parentmodel_ptr_id`) VALUES (1) Could you share your setup to provide instructions in how to reproduce the reported problem? My models.py: from django.db import models class ParentModel(models.Model): id = models.BigIntegerField(primary_key=True) class ChildModel(ParentModel): pass My tests.py: from django.test import TestCase from .models import ChildModel class Ticke30382TestCase(TestCase): def test_force_insert_save(self): with self.assertNumQueries(0): ChildModel(id=1).save(force_insert=True) My test run: ====================================================================== FAIL: test_force_insert_save (ticket_30382.tests.Ticke30382TestCase.test_force_insert_save) ---------------------------------------------------------------------- Traceback (most recent call last): File \"/home/nessita/fellowship/projectfromrepo/ticket_30382/tests.py\", line 9, in test_force_insert_save with self.assertNumQueries(0): File \"/home/nessita/.virtualenvs/djangodev/lib/python3.11/site-packages/django/test/testcases.py\", line 99, in __exit__ self.test_case.assertEqual( AssertionError: 3 != 0 : 3 queries executed, 0 expected Captured queries were: 1. SELECT 1 AS `a` FROM `ticket_30382_parentmodel` WHERE `ticket_30382_parentmodel`.`id` = 1 LIMIT 1 2. INSERT INTO `ticket_30382_parentmodel` (`id`) VALUES (1) 3. INSERT INTO `ticket_30382_childmodel` (`parentmodel_ptr_id`) VALUES (1) ---------------------------------------------------------------------- Ran 1 test in 0.038s Thanks!\nHi Natalia, Try replacing your models.py with the following and it would probably work. There seems to be another bug that goes beyond reported here. When the primary key field is the only field in the model it generates an extra select statement. Created another ticket #34549 for that. Check for better explanation. There are two cases, case-1 : https://code.djangoproject.com/ticket/34549#comment:1 and case-2: https://code.djangoproject.com/ticket/34549#comment:2 class ParentModel(models.Model): id = models.BigIntegerField(primary_key=True) name = models.CharField(max_length=10) class ChildModel(ParentModel): pass\nThank you Akash, your comment helped me reproduce the reported issue. In summary, a Parent model with at least two fields, id and name for example, would generate these queries for ChildModel(id=1).save(force_insert=True): 1. UPDATE \"ticket_30382_parentmodel\" SET \"name\" = '' WHERE \"ticket_30382_parentmodel\".\"id\" = 1 2. INSERT INTO \"ticket_30382_parentmodel\" (\"id\", \"name\") VALUES (1, '') 3. INSERT INTO \"ticket_30382_childmodel\" (\"parentmodel_ptr_id\") VALUES (1) I also added a test for the alternate code: parent = ParentModel.objects.create(id=1) ChildModel.objects.create(parentmodel_ptr=parent) which generates these queries: 1. INSERT INTO \"ticket_30382_parentmodel\" (\"id\", \"name\") VALUES (1, '') 2. UPDATE \"ticket_30382_parentmodel\" SET \"name\" = '' WHERE \"ticket_30382_parentmodel\".\"id\" = 1 3. INSERT INTO \"ticket_30382_childmodel\" (\"parentmodel_ptr_id\") VALUES (1) When testing this same code with the proposed PR, the first case gets fixed as expected, these are the queries I get for the reported code (so YEY): 1. INSERT INTO \"ticket_30382_parentmodel\" (\"id\", \"name\") VALUES (1, '') 2. INSERT INTO \"ticket_30382_childmodel\" (\"parentmodel_ptr_id\") VALUES (1) But for the second code snippet (create parent and then create child) I get an extra query (so HUM). Is this expected? I wouldn't think so... 1. INSERT INTO \"ticket_30382_parentmodel\" (\"id\", \"name\") VALUES (1, '') 2. UPDATE \"ticket_30382_parentmodel\" SET \"name\" = '' WHERE \"ticket_30382_parentmodel\".\"id\" = 1 3. SELECT 1 AS \"a\" FROM \"ticket_30382_childmodel\" WHERE \"ticket_30382_childmodel\".\"parentmodel_ptr_id\" = 1 LIMIT 1 4. INSERT INTO \"ticket_30382_childmodel\" (\"parentmodel_ptr_id\") VALUES (1)\nHi Natalia, Finally found a way to optimize the extra query :). Updated the patch accordingly.\nRemoved inspection of a stack frame but the solution still continues to be hacky.\nLink to the google group discussion: ​https://groups.google.com/g/django-developers/c/YJBoOapR_gQ/m/s5AWbN-PAQAJ",
  "created_at": "2023-05-06T16:07:09Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_force_insert_diamond_mti (force_insert_update.tests.ForceInsertInheritanceTests.test_force_insert_diamond_mti)\", \"test_force_insert_not_base (force_insert_update.tests.ForceInsertInheritanceTests.test_force_insert_not_base)\", \"test_force_insert_not_bool_or_tuple (force_insert_update.tests.ForceInsertInheritanceTests.test_force_insert_not_bool_or_tuple)\", \"test_force_insert_not_model (force_insert_update.tests.ForceInsertInheritanceTests.test_force_insert_not_model)\", \"test_force_insert_parent (force_insert_update.tests.ForceInsertInheritanceTests.test_force_insert_parent)\", \"test_force_insert_with_existing_grandparent (force_insert_update.tests.ForceInsertInheritanceTests.test_force_insert_with_existing_grandparent)\", \"test_force_insert_with_grandparent (force_insert_update.tests.ForceInsertInheritanceTests.test_force_insert_with_grandparent)\"]",
  "PASS_TO_PASS": "[\"test_force_update (force_insert_update.tests.ForceTests.test_force_update)\", \"test_force_update_on_inherited_model (force_insert_update.tests.InheritanceTests.test_force_update_on_inherited_model)\", \"Issue 13864: force_update fails on subclassed models, if they don't\", \"test_force_update_on_proxy_model (force_insert_update.tests.InheritanceTests.test_force_update_on_proxy_model)\", \"test_force_insert_false (force_insert_update.tests.ForceInsertInheritanceTests.test_force_insert_false)\", \"test_force_insert_false_with_existing_parent (force_insert_update.tests.ForceInsertInheritanceTests.test_force_insert_false_with_existing_parent)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.773226",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}