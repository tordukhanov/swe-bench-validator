{
  "repo": "django/django",
  "instance_id": "django__django-16092",
  "base_commit": "599f3e2cda50ab084915ffd08edb5ad6cad61415",
  "patch": "diff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -201,6 +201,15 @@ class BaseDatabaseFeatures:\n     # Does the backend require literal defaults, rather than parameterized ones?\n     requires_literal_defaults = False\n \n+    # Does the backend support functions in defaults?\n+    supports_expression_defaults = True\n+\n+    # Does the backend support the DEFAULT keyword in insert queries?\n+    supports_default_keyword_in_insert = True\n+\n+    # Does the backend support the DEFAULT keyword in bulk insert queries?\n+    supports_default_keyword_in_bulk_insert = True\n+\n     # Does the backend require a connection reset after each material schema change?\n     connection_persists_old_columns = False\n \n@@ -361,6 +370,9 @@ class BaseDatabaseFeatures:\n     # SQL template override for tests.aggregation.tests.NowUTC\n     test_now_utc_template = None\n \n+    # SQL to create a model instance using the database defaults.\n+    insert_test_table_with_defaults = None\n+\n     # A set of dotted paths to tests in Django's test suite that are expected\n     # to fail on this database.\n     django_test_expected_failures = set()\ndiff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -12,7 +12,7 @@\n     Table,\n )\n from django.db.backends.utils import names_digest, split_identifier, truncate_name\n-from django.db.models import Deferrable, Index\n+from django.db.models import NOT_PROVIDED, Deferrable, Index\n from django.db.models.sql import Query\n from django.db.transaction import TransactionManagementError, atomic\n from django.utils import timezone\n@@ -296,6 +296,12 @@ def _iter_column_sql(\n             yield self._comment_sql(field.db_comment)\n         # Work out nullability.\n         null = field.null\n+        # Add database default.\n+        if field.db_default is not NOT_PROVIDED:\n+            default_sql, default_params = self.db_default_sql(field)\n+            yield f\"DEFAULT {default_sql}\"\n+            params.extend(default_params)\n+            include_default = False\n         # Include a default value, if requested.\n         include_default = (\n             include_default\n@@ -400,6 +406,22 @@ def _column_default_sql(self, field):\n         \"\"\"\n         return \"%s\"\n \n+    def db_default_sql(self, field):\n+        \"\"\"Return the sql and params for the field's database default.\"\"\"\n+        from django.db.models.expressions import Value\n+\n+        sql = \"%s\" if isinstance(field.db_default, Value) else \"(%s)\"\n+        query = Query(model=field.model)\n+        compiler = query.get_compiler(connection=self.connection)\n+        default_sql, params = compiler.compile(field.db_default)\n+        if self.connection.features.requires_literal_defaults:\n+            # Some databases doesn't support parameterized defaults (Oracle,\n+            # SQLite). If this is the case, the individual schema backend\n+            # should implement prepare_default().\n+            default_sql %= tuple(self.prepare_default(p) for p in params)\n+            params = []\n+        return sql % default_sql, params\n+\n     @staticmethod\n     def _effective_default(field):\n         # This method allows testing its logic without a connection.\n@@ -1025,6 +1047,21 @@ def _alter_field(\n             )\n             actions.append(fragment)\n             post_actions.extend(other_actions)\n+\n+        if new_field.db_default is not NOT_PROVIDED:\n+            if (\n+                old_field.db_default is NOT_PROVIDED\n+                or new_field.db_default != old_field.db_default\n+            ):\n+                actions.append(\n+                    self._alter_column_database_default_sql(model, old_field, new_field)\n+                )\n+        elif old_field.db_default is not NOT_PROVIDED:\n+            actions.append(\n+                self._alter_column_database_default_sql(\n+                    model, old_field, new_field, drop=True\n+                )\n+            )\n         # When changing a column NULL constraint to NOT NULL with a given\n         # default value, we need to perform 4 steps:\n         #  1. Add a default for new incoming writes\n@@ -1033,7 +1070,11 @@ def _alter_field(\n         #  4. Drop the default again.\n         # Default change?\n         needs_database_default = False\n-        if old_field.null and not new_field.null:\n+        if (\n+            old_field.null\n+            and not new_field.null\n+            and new_field.db_default is NOT_PROVIDED\n+        ):\n             old_default = self.effective_default(old_field)\n             new_default = self.effective_default(new_field)\n             if (\n@@ -1051,9 +1092,9 @@ def _alter_field(\n             if fragment:\n                 null_actions.append(fragment)\n         # Only if we have a default and there is a change from NULL to NOT NULL\n-        four_way_default_alteration = new_field.has_default() and (\n-            old_field.null and not new_field.null\n-        )\n+        four_way_default_alteration = (\n+            new_field.has_default() or new_field.db_default is not NOT_PROVIDED\n+        ) and (old_field.null and not new_field.null)\n         if actions or null_actions:\n             if not four_way_default_alteration:\n                 # If we don't have to do a 4-way default alteration we can\n@@ -1074,15 +1115,20 @@ def _alter_field(\n                     params,\n                 )\n             if four_way_default_alteration:\n+                if new_field.db_default is NOT_PROVIDED:\n+                    default_sql = \"%s\"\n+                    params = [new_default]\n+                else:\n+                    default_sql, params = self.db_default_sql(new_field)\n                 # Update existing rows with default value\n                 self.execute(\n                     self.sql_update_with_default\n                     % {\n                         \"table\": self.quote_name(model._meta.db_table),\n                         \"column\": self.quote_name(new_field.column),\n-                        \"default\": \"%s\",\n+                        \"default\": default_sql,\n                     },\n-                    [new_default],\n+                    params,\n                 )\n                 # Since we didn't run a NOT NULL change before we need to do it\n                 # now\n@@ -1264,6 +1310,34 @@ def _alter_column_default_sql(self, model, old_field, new_field, drop=False):\n             params,\n         )\n \n+    def _alter_column_database_default_sql(\n+        self, model, old_field, new_field, drop=False\n+    ):\n+        \"\"\"\n+        Hook to specialize column database default alteration.\n+\n+        Return a (sql, params) fragment to add or drop (depending on the drop\n+        argument) a default to new_field's column.\n+        \"\"\"\n+        if drop:\n+            sql = self.sql_alter_column_no_default\n+            default_sql = \"\"\n+            params = []\n+        else:\n+            sql = self.sql_alter_column_default\n+            default_sql, params = self.db_default_sql(new_field)\n+\n+        new_db_params = new_field.db_parameters(connection=self.connection)\n+        return (\n+            sql\n+            % {\n+                \"column\": self.quote_name(new_field.column),\n+                \"type\": new_db_params[\"type\"],\n+                \"default\": default_sql,\n+            },\n+            params,\n+        )\n+\n     def _alter_column_type_sql(\n         self, model, old_field, new_field, new_type, old_collation, new_collation\n     ):\ndiff --git a/django/db/backends/mysql/features.py b/django/db/backends/mysql/features.py\n--- a/django/db/backends/mysql/features.py\n+++ b/django/db/backends/mysql/features.py\n@@ -51,6 +51,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     # COLLATE must be wrapped in parentheses because MySQL treats COLLATE as an\n     # indexed expression.\n     collate_as_index_expression = True\n+    insert_test_table_with_defaults = \"INSERT INTO {} () VALUES ()\"\n \n     supports_order_by_nulls_modifier = False\n     order_by_nulls_first = True\n@@ -342,3 +343,9 @@ def can_rename_index(self):\n         if self.connection.mysql_is_mariadb:\n             return self.connection.mysql_version >= (10, 5, 2)\n         return True\n+\n+    @cached_property\n+    def supports_expression_defaults(self):\n+        if self.connection.mysql_is_mariadb:\n+            return True\n+        return self.connection.mysql_version >= (8, 0, 13)\ndiff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -209,11 +209,15 @@ def _delete_composed_index(self, model, fields, *args):\n         self._create_missing_fk_index(model, fields=fields)\n         return super()._delete_composed_index(model, fields, *args)\n \n-    def _set_field_new_type_null_status(self, field, new_type):\n+    def _set_field_new_type(self, field, new_type):\n         \"\"\"\n-        Keep the null property of the old field. If it has changed, it will be\n-        handled separately.\n+        Keep the NULL and DEFAULT properties of the old field. If it has\n+        changed, it will be handled separately.\n         \"\"\"\n+        if field.db_default is not NOT_PROVIDED:\n+            default_sql, params = self.db_default_sql(field)\n+            default_sql %= tuple(self.quote_value(p) for p in params)\n+            new_type += f\" DEFAULT {default_sql}\"\n         if field.null:\n             new_type += \" NULL\"\n         else:\n@@ -223,7 +227,7 @@ def _set_field_new_type_null_status(self, field, new_type):\n     def _alter_column_type_sql(\n         self, model, old_field, new_field, new_type, old_collation, new_collation\n     ):\n-        new_type = self._set_field_new_type_null_status(old_field, new_type)\n+        new_type = self._set_field_new_type(old_field, new_type)\n         return super()._alter_column_type_sql(\n             model, old_field, new_field, new_type, old_collation, new_collation\n         )\n@@ -242,7 +246,7 @@ def _field_db_check(self, field, field_db_params):\n         return field_db_params[\"check\"]\n \n     def _rename_field_sql(self, table, old_field, new_field, new_type):\n-        new_type = self._set_field_new_type_null_status(old_field, new_type)\n+        new_type = self._set_field_new_type(old_field, new_type)\n         return super()._rename_field_sql(table, old_field, new_field, new_type)\n \n     def _alter_column_comment_sql(self, model, new_field, new_type, new_db_comment):\n@@ -252,3 +256,18 @@ def _alter_column_comment_sql(self, model, new_field, new_type, new_db_comment):\n     def _comment_sql(self, comment):\n         comment_sql = super()._comment_sql(comment)\n         return f\" COMMENT {comment_sql}\"\n+\n+    def _alter_column_null_sql(self, model, old_field, new_field):\n+        if new_field.db_default is NOT_PROVIDED:\n+            return super()._alter_column_null_sql(model, old_field, new_field)\n+\n+        new_db_params = new_field.db_parameters(connection=self.connection)\n+        type_sql = self._set_field_new_type(new_field, new_db_params[\"type\"])\n+        return (\n+            \"MODIFY %(column)s %(type)s\"\n+            % {\n+                \"column\": self.quote_name(new_field.column),\n+                \"type\": type_sql,\n+            },\n+            [],\n+        )\ndiff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -32,6 +32,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     atomic_transactions = False\n     nulls_order_largest = True\n     requires_literal_defaults = True\n+    supports_default_keyword_in_bulk_insert = False\n     closed_cursor_error_class = InterfaceError\n     bare_select_suffix = \" FROM DUAL\"\n     # Select for update with limit can be achieved on Oracle, but not with the\n@@ -130,6 +131,9 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n         \"annotations.tests.NonAggregateAnnotationTestCase.\"\n         \"test_custom_functions_can_ref_other_functions\",\n     }\n+    insert_test_table_with_defaults = (\n+        \"INSERT INTO {} VALUES (DEFAULT, DEFAULT, DEFAULT)\"\n+    )\n \n     @cached_property\n     def introspected_field_types(self):\ndiff --git a/django/db/backends/oracle/introspection.py b/django/db/backends/oracle/introspection.py\n--- a/django/db/backends/oracle/introspection.py\n+++ b/django/db/backends/oracle/introspection.py\n@@ -156,7 +156,7 @@ def get_table_description(self, cursor, table_name):\n         field_map = {\n             column: (\n                 display_size,\n-                default if default != \"NULL\" else None,\n+                default.rstrip() if default and default != \"NULL\" else None,\n                 collation,\n                 is_autofield,\n                 is_json,\ndiff --git a/django/db/backends/oracle/schema.py b/django/db/backends/oracle/schema.py\n--- a/django/db/backends/oracle/schema.py\n+++ b/django/db/backends/oracle/schema.py\n@@ -198,7 +198,9 @@ def _generate_temp_name(self, for_name):\n         return self.normalize_name(for_name + \"_\" + suffix)\n \n     def prepare_default(self, value):\n-        return self.quote_value(value)\n+        # Replace % with %% as %-formatting is applied in\n+        # FormatStylePlaceholderCursor._fix_for_params().\n+        return self.quote_value(value).replace(\"%\", \"%%\")\n \n     def _field_should_be_indexed(self, model, field):\n         create_index = super()._field_should_be_indexed(model, field)\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -76,6 +76,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n         \"swedish_ci\": \"sv-x-icu\",\n     }\n     test_now_utc_template = \"STATEMENT_TIMESTAMP() AT TIME ZONE 'UTC'\"\n+    insert_test_table_with_defaults = \"INSERT INTO {} DEFAULT VALUES\"\n \n     django_test_skips = {\n         \"opclasses are PostgreSQL only.\": {\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -59,6 +59,8 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n             PRIMARY KEY(column_1, column_2)\n         )\n     \"\"\"\n+    insert_test_table_with_defaults = 'INSERT INTO {} (\"null\") VALUES (1)'\n+    supports_default_keyword_in_insert = False\n \n     @cached_property\n     def django_test_skips(self):\ndiff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -6,7 +6,7 @@\n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n from django.db.backends.ddl_references import Statement\n from django.db.backends.utils import strip_quotes\n-from django.db.models import UniqueConstraint\n+from django.db.models import NOT_PROVIDED, UniqueConstraint\n from django.db.transaction import atomic\n \n \n@@ -233,9 +233,13 @@ def is_self_referential(f):\n         if create_field:\n             body[create_field.name] = create_field\n             # Choose a default and insert it into the copy map\n-            if not create_field.many_to_many and create_field.concrete:\n+            if (\n+                create_field.db_default is NOT_PROVIDED\n+                and not create_field.many_to_many\n+                and create_field.concrete\n+            ):\n                 mapping[create_field.column] = self.prepare_default(\n-                    self.effective_default(create_field),\n+                    self.effective_default(create_field)\n                 )\n         # Add in any altered fields\n         for alter_field in alter_fields:\n@@ -244,9 +248,13 @@ def is_self_referential(f):\n             mapping.pop(old_field.column, None)\n             body[new_field.name] = new_field\n             if old_field.null and not new_field.null:\n+                if new_field.db_default is NOT_PROVIDED:\n+                    default = self.prepare_default(self.effective_default(new_field))\n+                else:\n+                    default, _ = self.db_default_sql(new_field)\n                 case_sql = \"coalesce(%(col)s, %(default)s)\" % {\n                     \"col\": self.quote_name(old_field.column),\n-                    \"default\": self.prepare_default(self.effective_default(new_field)),\n+                    \"default\": default,\n                 }\n                 mapping[new_field.column] = case_sql\n             else:\n@@ -381,6 +389,8 @@ def delete_model(self, model, handle_autom2m=True):\n \n     def add_field(self, model, field):\n         \"\"\"Create a field on a model.\"\"\"\n+        from django.db.models.expressions import Value\n+\n         # Special-case implicit M2M tables.\n         if field.many_to_many and field.remote_field.through._meta.auto_created:\n             self.create_model(field.remote_field.through)\n@@ -394,6 +404,12 @@ def add_field(self, model, field):\n             # COLUMN statement because DROP DEFAULT is not supported in\n             # ALTER TABLE.\n             or self.effective_default(field) is not None\n+            # Fields with non-constant defaults cannot by handled by ALTER\n+            # TABLE ADD COLUMN statement.\n+            or (\n+                field.db_default is not NOT_PROVIDED\n+                and not isinstance(field.db_default, Value)\n+            )\n         ):\n             self._remake_table(model, create_field=field)\n         else:\ndiff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1040,6 +1040,7 @@ def _generate_added_field(self, app_label, model_name, field_name):\n         preserve_default = (\n             field.null\n             or field.has_default()\n+            or field.db_default is not models.NOT_PROVIDED\n             or field.many_to_many\n             or (field.blank and field.empty_strings_allowed)\n             or (isinstance(field, time_fields) and field.auto_now)\n@@ -1187,6 +1188,7 @@ def generate_altered_fields(self):\n                         old_field.null\n                         and not new_field.null\n                         and not new_field.has_default()\n+                        and new_field.db_default is models.NOT_PROVIDED\n                         and not new_field.many_to_many\n                     ):\n                         field = new_field.clone()\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -971,8 +971,10 @@ def _save_table(\n             not raw\n             and not force_insert\n             and self._state.adding\n-            and meta.pk.default\n-            and meta.pk.default is not NOT_PROVIDED\n+            and (\n+                (meta.pk.default and meta.pk.default is not NOT_PROVIDED)\n+                or (meta.pk.db_default and meta.pk.db_default is not NOT_PROVIDED)\n+            )\n         ):\n             force_insert = True\n         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -176,6 +176,8 @@ class BaseExpression:\n     filterable = True\n     # Can the expression can be used as a source expression in Window?\n     window_compatible = False\n+    # Can the expression be used as a database default value?\n+    allowed_default = False\n \n     def __init__(self, output_field=None):\n         if output_field is not None:\n@@ -733,6 +735,10 @@ def resolve_expression(\n         c.rhs = rhs\n         return c\n \n+    @cached_property\n+    def allowed_default(self):\n+        return self.lhs.allowed_default and self.rhs.allowed_default\n+\n \n class DurationExpression(CombinedExpression):\n     def compile(self, side, compiler, connection):\n@@ -804,6 +810,8 @@ def as_sql(self, compiler, connection):\n class F(Combinable):\n     \"\"\"An object capable of resolving references to existing query objects.\"\"\"\n \n+    allowed_default = False\n+\n     def __init__(self, name):\n         \"\"\"\n         Arguments:\n@@ -987,6 +995,10 @@ def copy(self):\n         copy.extra = self.extra.copy()\n         return copy\n \n+    @cached_property\n+    def allowed_default(self):\n+        return all(expression.allowed_default for expression in self.source_expressions)\n+\n \n @deconstructible(path=\"django.db.models.Value\")\n class Value(SQLiteNumericMixin, Expression):\n@@ -995,6 +1007,7 @@ class Value(SQLiteNumericMixin, Expression):\n     # Provide a default value for `for_save` in order to allow unresolved\n     # instances to be compiled until a decision is taken in #25425.\n     for_save = False\n+    allowed_default = True\n \n     def __init__(self, value, output_field=None):\n         \"\"\"\n@@ -1069,6 +1082,8 @@ def empty_result_set_value(self):\n \n \n class RawSQL(Expression):\n+    allowed_default = True\n+\n     def __init__(self, sql, params, output_field=None):\n         if output_field is None:\n             output_field = fields.Field()\n@@ -1110,6 +1125,13 @@ def as_sql(self, compiler, connection):\n         return \"*\", []\n \n \n+class DatabaseDefault(Expression):\n+    \"\"\"Placeholder expression for the database default in an insert query.\"\"\"\n+\n+    def as_sql(self, compiler, connection):\n+        return \"DEFAULT\", []\n+\n+\n class Col(Expression):\n     contains_column_references = True\n     possibly_multivalued = False\n@@ -1213,6 +1235,7 @@ def as_sqlite(self, compiler, connection, **extra_context):\n \n \n class OrderByList(Func):\n+    allowed_default = False\n     template = \"ORDER BY %(expressions)s\"\n \n     def __init__(self, *expressions, **extra):\n@@ -1270,6 +1293,10 @@ def as_sql(self, compiler, connection):\n     def __repr__(self):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n+    @property\n+    def allowed_default(self):\n+        return self.expression.allowed_default\n+\n \n class NegatedExpression(ExpressionWrapper):\n     \"\"\"The logical negation of a conditional expression.\"\"\"\n@@ -1397,6 +1424,10 @@ def get_group_by_cols(self):\n             cols.extend(source.get_group_by_cols())\n         return cols\n \n+    @cached_property\n+    def allowed_default(self):\n+        return self.condition.allowed_default and self.result.allowed_default\n+\n \n @deconstructible(path=\"django.db.models.Case\")\n class Case(SQLiteNumericMixin, Expression):\n@@ -1494,6 +1525,12 @@ def get_group_by_cols(self):\n             return self.default.get_group_by_cols()\n         return super().get_group_by_cols()\n \n+    @cached_property\n+    def allowed_default(self):\n+        return self.default.allowed_default and all(\n+            case_.allowed_default for case_ in self.cases\n+        )\n+\n \n class Subquery(BaseExpression, Combinable):\n     \"\"\"\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -202,6 +202,7 @@ def __init__(\n         validators=(),\n         error_messages=None,\n         db_comment=None,\n+        db_default=NOT_PROVIDED,\n     ):\n         self.name = name\n         self.verbose_name = verbose_name  # May be set by set_attributes_from_name\n@@ -212,6 +213,13 @@ def __init__(\n         self.remote_field = rel\n         self.is_relation = self.remote_field is not None\n         self.default = default\n+        if db_default is not NOT_PROVIDED and not hasattr(\n+            db_default, \"resolve_expression\"\n+        ):\n+            from django.db.models.expressions import Value\n+\n+            db_default = Value(db_default)\n+        self.db_default = db_default\n         self.editable = editable\n         self.serialize = serialize\n         self.unique_for_date = unique_for_date\n@@ -263,6 +271,7 @@ def check(self, **kwargs):\n         return [\n             *self._check_field_name(),\n             *self._check_choices(),\n+            *self._check_db_default(**kwargs),\n             *self._check_db_index(),\n             *self._check_db_comment(**kwargs),\n             *self._check_null_allowed_for_primary_keys(),\n@@ -379,6 +388,39 @@ def _check_choices(self):\n             )\n         ]\n \n+    def _check_db_default(self, databases=None, **kwargs):\n+        from django.db.models.expressions import Value\n+\n+        if (\n+            self.db_default is NOT_PROVIDED\n+            or isinstance(self.db_default, Value)\n+            or databases is None\n+        ):\n+            return []\n+        errors = []\n+        for db in databases:\n+            if not router.allow_migrate_model(db, self.model):\n+                continue\n+            connection = connections[db]\n+\n+            if not getattr(self.db_default, \"allowed_default\", False) and (\n+                connection.features.supports_expression_defaults\n+            ):\n+                msg = f\"{self.db_default} cannot be used in db_default.\"\n+                errors.append(checks.Error(msg, obj=self, id=\"fields.E012\"))\n+\n+            if not (\n+                connection.features.supports_expression_defaults\n+                or \"supports_expression_defaults\"\n+                in self.model._meta.required_db_features\n+            ):\n+                msg = (\n+                    f\"{connection.display_name} does not support default database \"\n+                    \"values with expressions (db_default).\"\n+                )\n+                errors.append(checks.Error(msg, obj=self, id=\"fields.E011\"))\n+        return errors\n+\n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n             return [\n@@ -558,6 +600,7 @@ def deconstruct(self):\n             \"null\": False,\n             \"db_index\": False,\n             \"default\": NOT_PROVIDED,\n+            \"db_default\": NOT_PROVIDED,\n             \"editable\": True,\n             \"serialize\": True,\n             \"unique_for_date\": None,\n@@ -876,7 +919,10 @@ def db_tablespace(self):\n     @property\n     def db_returning(self):\n         \"\"\"Private API intended only to be used by Django itself.\"\"\"\n-        return False\n+        return (\n+            self.db_default is not NOT_PROVIDED\n+            and connection.features.can_return_columns_from_insert\n+        )\n \n     def set_attributes_from_name(self, name):\n         self.name = self.name or name\n@@ -929,7 +975,13 @@ def get_internal_type(self):\n \n     def pre_save(self, model_instance, add):\n         \"\"\"Return field's value just before saving.\"\"\"\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if not connection.features.supports_default_keyword_in_insert:\n+            from django.db.models.expressions import DatabaseDefault\n+\n+            if isinstance(value, DatabaseDefault):\n+                return self.db_default\n+        return value\n \n     def get_prep_value(self, value):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n@@ -968,6 +1020,11 @@ def _get_default(self):\n                 return self.default\n             return lambda: self.default\n \n+        if self.db_default is not NOT_PROVIDED:\n+            from django.db.models.expressions import DatabaseDefault\n+\n+            return DatabaseDefault\n+\n         if (\n             not self.empty_strings_allowed\n             or self.null\ndiff --git a/django/db/models/functions/comparison.py b/django/db/models/functions/comparison.py\n--- a/django/db/models/functions/comparison.py\n+++ b/django/db/models/functions/comparison.py\n@@ -105,6 +105,7 @@ def as_oracle(self, compiler, connection, **extra_context):\n class Collate(Func):\n     function = \"COLLATE\"\n     template = \"%(expressions)s %(function)s %(collation)s\"\n+    allowed_default = False\n     # Inspired from\n     # https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS\n     collation_re = _lazy_re_compile(r\"^[\\w\\-]+$\")\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -185,6 +185,10 @@ def select_format(self, compiler, sql, params):\n             sql = f\"CASE WHEN {sql} THEN 1 ELSE 0 END\"\n         return sql, params\n \n+    @cached_property\n+    def allowed_default(self):\n+        return self.lhs.allowed_default and self.rhs.allowed_default\n+\n \n class Transform(RegisterLookupMixin, Func):\n     \"\"\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -654,10 +654,19 @@ async def acreate(self, **kwargs):\n         return await sync_to_async(self.create)(**kwargs)\n \n     def _prepare_for_bulk_create(self, objs):\n+        from django.db.models.expressions import DatabaseDefault\n+\n+        connection = connections[self.db]\n         for obj in objs:\n             if obj.pk is None:\n                 # Populate new PK values.\n                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)\n+            if not connection.features.supports_default_keyword_in_bulk_insert:\n+                for field in obj._meta.fields:\n+                    value = getattr(obj, field.attname)\n+                    if isinstance(value, DatabaseDefault):\n+                        setattr(obj, field.attname, field.db_default)\n+\n             obj._prepare_related_fields_for_save(operation_name=\"bulk_create\")\n \n     def _check_bulk_create_options(\n",
  "test_patch": "diff --git a/tests/basic/models.py b/tests/basic/models.py\n--- a/tests/basic/models.py\n+++ b/tests/basic/models.py\n@@ -49,5 +49,9 @@ class PrimaryKeyWithDefault(models.Model):\n     uuid = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n \n+class PrimaryKeyWithDbDefault(models.Model):\n+    uuid = models.IntegerField(primary_key=True, db_default=1)\n+\n+\n class ChildPrimaryKeyWithDefault(PrimaryKeyWithDefault):\n     pass\ndiff --git a/tests/basic/tests.py b/tests/basic/tests.py\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -20,6 +20,7 @@\n     ArticleSelectOnSave,\n     ChildPrimaryKeyWithDefault,\n     FeaturedArticle,\n+    PrimaryKeyWithDbDefault,\n     PrimaryKeyWithDefault,\n     SelfRef,\n )\n@@ -175,6 +176,11 @@ def test_save_primary_with_default(self):\n         with self.assertNumQueries(1):\n             PrimaryKeyWithDefault().save()\n \n+    def test_save_primary_with_db_default(self):\n+        # An UPDATE attempt is skipped when a primary key has db_default.\n+        with self.assertNumQueries(1):\n+            PrimaryKeyWithDbDefault().save()\n+\n     def test_save_parent_primary_with_default(self):\n         # An UPDATE attempt is skipped when an inherited primary key has\n         # default.\ndiff --git a/tests/field_defaults/models.py b/tests/field_defaults/models.py\n--- a/tests/field_defaults/models.py\n+++ b/tests/field_defaults/models.py\n@@ -12,6 +12,8 @@\n from datetime import datetime\n \n from django.db import models\n+from django.db.models.functions import Coalesce, ExtractYear, Now, Pi\n+from django.db.models.lookups import GreaterThan\n \n \n class Article(models.Model):\n@@ -20,3 +22,45 @@ class Article(models.Model):\n \n     def __str__(self):\n         return self.headline\n+\n+\n+class DBArticle(models.Model):\n+    \"\"\"\n+    Values or expressions can be passed as the db_default parameter to a field.\n+    When the object is created without an explicit value passed in, the\n+    database will insert the default value automatically.\n+    \"\"\"\n+\n+    headline = models.CharField(max_length=100, db_default=\"Default headline\")\n+    pub_date = models.DateTimeField(db_default=Now())\n+\n+    class Meta:\n+        required_db_features = {\"supports_expression_defaults\"}\n+\n+\n+class DBDefaults(models.Model):\n+    both = models.IntegerField(default=1, db_default=2)\n+    null = models.FloatField(null=True, db_default=1.1)\n+\n+\n+class DBDefaultsFunction(models.Model):\n+    number = models.FloatField(db_default=Pi())\n+    year = models.IntegerField(db_default=ExtractYear(Now()))\n+    added = models.FloatField(db_default=Pi() + 4.5)\n+    multiple_subfunctions = models.FloatField(db_default=Coalesce(4.5, Pi()))\n+    case_when = models.IntegerField(\n+        db_default=models.Case(models.When(GreaterThan(2, 1), then=3), default=4)\n+    )\n+\n+    class Meta:\n+        required_db_features = {\"supports_expression_defaults\"}\n+\n+\n+class DBDefaultsPK(models.Model):\n+    language_code = models.CharField(primary_key=True, max_length=2, db_default=\"en\")\n+\n+\n+class DBDefaultsFK(models.Model):\n+    language_code = models.ForeignKey(\n+        DBDefaultsPK, db_default=\"fr\", on_delete=models.CASCADE\n+    )\ndiff --git a/tests/field_defaults/tests.py b/tests/field_defaults/tests.py\n--- a/tests/field_defaults/tests.py\n+++ b/tests/field_defaults/tests.py\n@@ -1,8 +1,28 @@\n from datetime import datetime\n+from math import pi\n \n-from django.test import TestCase\n+from django.db import connection\n+from django.db.models import Case, F, FloatField, Value, When\n+from django.db.models.expressions import (\n+    Expression,\n+    ExpressionList,\n+    ExpressionWrapper,\n+    Func,\n+    OrderByList,\n+    RawSQL,\n+)\n+from django.db.models.functions import Collate\n+from django.db.models.lookups import GreaterThan\n+from django.test import SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n-from .models import Article\n+from .models import (\n+    Article,\n+    DBArticle,\n+    DBDefaults,\n+    DBDefaultsFK,\n+    DBDefaultsFunction,\n+    DBDefaultsPK,\n+)\n \n \n class DefaultTests(TestCase):\n@@ -14,3 +34,171 @@ def test_field_defaults(self):\n         self.assertIsInstance(a.id, int)\n         self.assertEqual(a.headline, \"Default headline\")\n         self.assertLess((now - a.pub_date).seconds, 5)\n+\n+    @skipUnlessDBFeature(\n+        \"can_return_columns_from_insert\", \"supports_expression_defaults\"\n+    )\n+    def test_field_db_defaults_returning(self):\n+        a = DBArticle()\n+        a.save()\n+        self.assertIsInstance(a.id, int)\n+        self.assertEqual(a.headline, \"Default headline\")\n+        self.assertIsInstance(a.pub_date, datetime)\n+\n+    @skipIfDBFeature(\"can_return_columns_from_insert\")\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_field_db_defaults_refresh(self):\n+        a = DBArticle()\n+        a.save()\n+        a.refresh_from_db()\n+        self.assertIsInstance(a.id, int)\n+        self.assertEqual(a.headline, \"Default headline\")\n+        self.assertIsInstance(a.pub_date, datetime)\n+\n+    def test_null_db_default(self):\n+        obj1 = DBDefaults.objects.create()\n+        if not connection.features.can_return_columns_from_insert:\n+            obj1.refresh_from_db()\n+        self.assertEqual(obj1.null, 1.1)\n+\n+        obj2 = DBDefaults.objects.create(null=None)\n+        self.assertIsNone(obj2.null)\n+\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_db_default_function(self):\n+        m = DBDefaultsFunction.objects.create()\n+        if not connection.features.can_return_columns_from_insert:\n+            m.refresh_from_db()\n+        self.assertAlmostEqual(m.number, pi)\n+        self.assertEqual(m.year, datetime.now().year)\n+        self.assertAlmostEqual(m.added, pi + 4.5)\n+        self.assertEqual(m.multiple_subfunctions, 4.5)\n+\n+    @skipUnlessDBFeature(\"insert_test_table_with_defaults\")\n+    def test_both_default(self):\n+        create_sql = connection.features.insert_test_table_with_defaults\n+        with connection.cursor() as cursor:\n+            cursor.execute(create_sql.format(DBDefaults._meta.db_table))\n+        obj1 = DBDefaults.objects.get()\n+        self.assertEqual(obj1.both, 2)\n+\n+        obj2 = DBDefaults.objects.create()\n+        self.assertEqual(obj2.both, 1)\n+\n+    def test_pk_db_default(self):\n+        obj1 = DBDefaultsPK.objects.create()\n+        if not connection.features.can_return_columns_from_insert:\n+            # refresh_from_db() cannot be used because that needs the pk to\n+            # already be known to Django.\n+            obj1 = DBDefaultsPK.objects.get(pk=\"en\")\n+        self.assertEqual(obj1.pk, \"en\")\n+        self.assertEqual(obj1.language_code, \"en\")\n+\n+        obj2 = DBDefaultsPK.objects.create(language_code=\"de\")\n+        self.assertEqual(obj2.pk, \"de\")\n+        self.assertEqual(obj2.language_code, \"de\")\n+\n+    def test_foreign_key_db_default(self):\n+        parent1 = DBDefaultsPK.objects.create(language_code=\"fr\")\n+        child1 = DBDefaultsFK.objects.create()\n+        if not connection.features.can_return_columns_from_insert:\n+            child1.refresh_from_db()\n+        self.assertEqual(child1.language_code, parent1)\n+\n+        parent2 = DBDefaultsPK.objects.create()\n+        if not connection.features.can_return_columns_from_insert:\n+            # refresh_from_db() cannot be used because that needs the pk to\n+            # already be known to Django.\n+            parent2 = DBDefaultsPK.objects.get(pk=\"en\")\n+        child2 = DBDefaultsFK.objects.create(language_code=parent2)\n+        self.assertEqual(child2.language_code, parent2)\n+\n+    @skipUnlessDBFeature(\n+        \"can_return_columns_from_insert\", \"supports_expression_defaults\"\n+    )\n+    def test_case_when_db_default_returning(self):\n+        m = DBDefaultsFunction.objects.create()\n+        self.assertEqual(m.case_when, 3)\n+\n+    @skipIfDBFeature(\"can_return_columns_from_insert\")\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_case_when_db_default_no_returning(self):\n+        m = DBDefaultsFunction.objects.create()\n+        m.refresh_from_db()\n+        self.assertEqual(m.case_when, 3)\n+\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_bulk_create_all_db_defaults(self):\n+        articles = [DBArticle(), DBArticle()]\n+        DBArticle.objects.bulk_create(articles)\n+\n+        headlines = DBArticle.objects.values_list(\"headline\", flat=True)\n+        self.assertSequenceEqual(headlines, [\"Default headline\", \"Default headline\"])\n+\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_bulk_create_all_db_defaults_one_field(self):\n+        pub_date = datetime.now()\n+        articles = [DBArticle(pub_date=pub_date), DBArticle(pub_date=pub_date)]\n+        DBArticle.objects.bulk_create(articles)\n+\n+        headlines = DBArticle.objects.values_list(\"headline\", \"pub_date\")\n+        self.assertSequenceEqual(\n+            headlines,\n+            [\n+                (\"Default headline\", pub_date),\n+                (\"Default headline\", pub_date),\n+            ],\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_bulk_create_mixed_db_defaults(self):\n+        articles = [DBArticle(), DBArticle(headline=\"Something else\")]\n+        DBArticle.objects.bulk_create(articles)\n+\n+        headlines = DBArticle.objects.values_list(\"headline\", flat=True)\n+        self.assertCountEqual(headlines, [\"Default headline\", \"Something else\"])\n+\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_bulk_create_mixed_db_defaults_function(self):\n+        instances = [DBDefaultsFunction(), DBDefaultsFunction(year=2000)]\n+        DBDefaultsFunction.objects.bulk_create(instances)\n+\n+        years = DBDefaultsFunction.objects.values_list(\"year\", flat=True)\n+        self.assertCountEqual(years, [2000, datetime.now().year])\n+\n+\n+class AllowedDefaultTests(SimpleTestCase):\n+    def test_allowed(self):\n+        class Max(Func):\n+            function = \"MAX\"\n+\n+        tests = [\n+            Value(10),\n+            Max(1, 2),\n+            RawSQL(\"Now()\", ()),\n+            Value(10) + Value(7),  # Combined expression.\n+            ExpressionList(Value(1), Value(2)),\n+            ExpressionWrapper(Value(1), output_field=FloatField()),\n+            Case(When(GreaterThan(2, 1), then=3), default=4),\n+        ]\n+        for expression in tests:\n+            with self.subTest(expression=expression):\n+                self.assertIs(expression.allowed_default, True)\n+\n+    def test_disallowed(self):\n+        class Max(Func):\n+            function = \"MAX\"\n+\n+        tests = [\n+            Expression(),\n+            F(\"field\"),\n+            Max(F(\"count\"), 1),\n+            Value(10) + F(\"count\"),  # Combined expression.\n+            ExpressionList(F(\"count\"), Value(2)),\n+            ExpressionWrapper(F(\"count\"), output_field=FloatField()),\n+            Collate(Value(\"John\"), \"nocase\"),\n+            OrderByList(\"field\"),\n+        ]\n+        for expression in tests:\n+            with self.subTest(expression=expression):\n+                self.assertIs(expression.allowed_default, False)\ndiff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -4,6 +4,7 @@\n from django.core.checks import Error\n from django.core.checks import Warning as DjangoWarning\n from django.db import connection, models\n+from django.db.models.functions import Coalesce, Pi\n from django.test import SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.test.utils import isolate_apps, override_settings\n from django.utils.functional import lazy\n@@ -1057,3 +1058,109 @@ class Meta:\n \n         errors = Model._meta.get_field(\"field\").check(databases=self.databases)\n         self.assertEqual(errors, [])\n+\n+\n+@isolate_apps(\"invalid_models_tests\")\n+class InvalidDBDefaultTests(TestCase):\n+    def test_db_default(self):\n+        class Model(models.Model):\n+            field = models.FloatField(db_default=Pi())\n+\n+        field = Model._meta.get_field(\"field\")\n+        errors = field.check(databases=self.databases)\n+\n+        if connection.features.supports_expression_defaults:\n+            expected_errors = []\n+        else:\n+            msg = (\n+                f\"{connection.display_name} does not support default database values \"\n+                \"with expressions (db_default).\"\n+            )\n+            expected_errors = [Error(msg=msg, obj=field, id=\"fields.E011\")]\n+        self.assertEqual(errors, expected_errors)\n+\n+    def test_db_default_literal(self):\n+        class Model(models.Model):\n+            field = models.IntegerField(db_default=1)\n+\n+        field = Model._meta.get_field(\"field\")\n+        errors = field.check(databases=self.databases)\n+        self.assertEqual(errors, [])\n+\n+    def test_db_default_required_db_features(self):\n+        class Model(models.Model):\n+            field = models.FloatField(db_default=Pi())\n+\n+            class Meta:\n+                required_db_features = {\"supports_expression_defaults\"}\n+\n+        field = Model._meta.get_field(\"field\")\n+        errors = field.check(databases=self.databases)\n+        self.assertEqual(errors, [])\n+\n+    def test_db_default_expression_invalid(self):\n+        expression = models.F(\"field_name\")\n+\n+        class Model(models.Model):\n+            field = models.FloatField(db_default=expression)\n+\n+        field = Model._meta.get_field(\"field\")\n+        errors = field.check(databases=self.databases)\n+\n+        if connection.features.supports_expression_defaults:\n+            msg = f\"{expression} cannot be used in db_default.\"\n+            expected_errors = [Error(msg=msg, obj=field, id=\"fields.E012\")]\n+        else:\n+            msg = (\n+                f\"{connection.display_name} does not support default database values \"\n+                \"with expressions (db_default).\"\n+            )\n+            expected_errors = [Error(msg=msg, obj=field, id=\"fields.E011\")]\n+        self.assertEqual(errors, expected_errors)\n+\n+    def test_db_default_expression_required_db_features(self):\n+        expression = models.F(\"field_name\")\n+\n+        class Model(models.Model):\n+            field = models.FloatField(db_default=expression)\n+\n+            class Meta:\n+                required_db_features = {\"supports_expression_defaults\"}\n+\n+        field = Model._meta.get_field(\"field\")\n+        errors = field.check(databases=self.databases)\n+\n+        if connection.features.supports_expression_defaults:\n+            msg = f\"{expression} cannot be used in db_default.\"\n+            expected_errors = [Error(msg=msg, obj=field, id=\"fields.E012\")]\n+        else:\n+            expected_errors = []\n+        self.assertEqual(errors, expected_errors)\n+\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_db_default_combined_invalid(self):\n+        expression = models.Value(4.5) + models.F(\"field_name\")\n+\n+        class Model(models.Model):\n+            field = models.FloatField(db_default=expression)\n+\n+        field = Model._meta.get_field(\"field\")\n+        errors = field.check(databases=self.databases)\n+\n+        msg = f\"{expression} cannot be used in db_default.\"\n+        expected_error = Error(msg=msg, obj=field, id=\"fields.E012\")\n+        self.assertEqual(errors, [expected_error])\n+\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_db_default_function_arguments_invalid(self):\n+        expression = Coalesce(models.Value(4.5), models.F(\"field_name\"))\n+\n+        class Model(models.Model):\n+            field = models.FloatField(db_default=expression)\n+\n+        field = Model._meta.get_field(\"field\")\n+        errors = field.check(databases=self.databases)\n+\n+        msg = f\"{expression} cannot be used in db_default.\"\n+        expected_error = Error(msg=msg, obj=field, id=\"fields.E012\")\n+        self.assertEqual(errors, [expected_error])\ndiff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -269,6 +269,14 @@ class AutodetectorTests(BaseAutodetectorTests):\n             (\"name\", models.CharField(max_length=200, default=\"Ada Lovelace\")),\n         ],\n     )\n+    author_name_db_default = ModelState(\n+        \"testapp\",\n+        \"Author\",\n+        [\n+            (\"id\", models.AutoField(primary_key=True)),\n+            (\"name\", models.CharField(max_length=200, db_default=\"Ada Lovelace\")),\n+        ],\n+    )\n     author_name_check_constraint = ModelState(\n         \"testapp\",\n         \"Author\",\n@@ -1289,6 +1297,21 @@ def test_add_field(self):\n         self.assertOperationTypes(changes, \"testapp\", 0, [\"AddField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n+    @mock.patch(\n+        \"django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition\",\n+        side_effect=AssertionError(\"Should not have prompted for not null addition\"),\n+    )\n+    def test_add_not_null_field_with_db_default(self, mocked_ask_method):\n+        changes = self.get_changes([self.author_empty], [self.author_name_db_default])\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(changes, \"testapp\", 0, [\"AddField\"])\n+        self.assertOperationAttributes(\n+            changes, \"testapp\", 0, 0, name=\"name\", preserve_default=True\n+        )\n+        self.assertOperationFieldAttributes(\n+            changes, \"testapp\", 0, 0, db_default=models.Value(\"Ada Lovelace\")\n+        )\n+\n     @mock.patch(\n         \"django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition\",\n         side_effect=AssertionError(\"Should not have prompted for not null addition\"),\n@@ -1478,6 +1501,23 @@ def test_alter_field_to_not_null_with_default(self, mocked_ask_method):\n             changes, \"testapp\", 0, 0, default=\"Ada Lovelace\"\n         )\n \n+    @mock.patch(\n+        \"django.db.migrations.questioner.MigrationQuestioner.ask_not_null_alteration\",\n+        side_effect=AssertionError(\"Should not have prompted for not null alteration\"),\n+    )\n+    def test_alter_field_to_not_null_with_db_default(self, mocked_ask_method):\n+        changes = self.get_changes(\n+            [self.author_name_null], [self.author_name_db_default]\n+        )\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(changes, \"testapp\", 0, [\"AlterField\"])\n+        self.assertOperationAttributes(\n+            changes, \"testapp\", 0, 0, name=\"name\", preserve_default=True\n+        )\n+        self.assertOperationFieldAttributes(\n+            changes, \"testapp\", 0, 0, db_default=models.Value(\"Ada Lovelace\")\n+        )\n+\n     @mock.patch(\n         \"django.db.migrations.questioner.MigrationQuestioner.ask_not_null_alteration\",\n         return_value=models.NOT_PROVIDED,\ndiff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -292,6 +292,13 @@ def set_up_test_model(\n                     (\"id\", models.AutoField(primary_key=True)),\n                     (\"pink\", models.IntegerField(default=3)),\n                     (\"weight\", models.FloatField()),\n+                    (\"green\", models.IntegerField(null=True)),\n+                    (\n+                        \"yellow\",\n+                        models.CharField(\n+                            blank=True, null=True, db_default=\"Yellow\", max_length=20\n+                        ),\n+                    ),\n                 ],\n                 options=model_options,\n             )\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1,14 +1,18 @@\n+import math\n+\n from django.core.exceptions import FieldDoesNotExist\n from django.db import IntegrityError, connection, migrations, models, transaction\n from django.db.migrations.migration import Migration\n from django.db.migrations.operations.fields import FieldOperation\n from django.db.migrations.state import ModelState, ProjectState\n-from django.db.models.functions import Abs\n+from django.db.models.expressions import Value\n+from django.db.models.functions import Abs, Pi\n from django.db.transaction import atomic\n from django.test import (\n     SimpleTestCase,\n     ignore_warnings,\n     override_settings,\n+    skipIfDBFeature,\n     skipUnlessDBFeature,\n )\n from django.test.utils import CaptureQueriesContext\n@@ -1340,7 +1344,7 @@ def test_add_field(self):\n         self.assertEqual(operation.describe(), \"Add field height to Pony\")\n         self.assertEqual(operation.migration_name_fragment, \"pony_height\")\n         project_state, new_state = self.make_test_state(\"test_adfl\", operation)\n-        self.assertEqual(len(new_state.models[\"test_adfl\", \"pony\"].fields), 4)\n+        self.assertEqual(len(new_state.models[\"test_adfl\", \"pony\"].fields), 6)\n         field = new_state.models[\"test_adfl\", \"pony\"].fields[\"height\"]\n         self.assertEqual(field.default, 5)\n         # Test the database alteration\n@@ -1528,7 +1532,7 @@ def test_add_field_preserve_default(self):\n         )\n         new_state = project_state.clone()\n         operation.state_forwards(\"test_adflpd\", new_state)\n-        self.assertEqual(len(new_state.models[\"test_adflpd\", \"pony\"].fields), 4)\n+        self.assertEqual(len(new_state.models[\"test_adflpd\", \"pony\"].fields), 6)\n         field = new_state.models[\"test_adflpd\", \"pony\"].fields[\"height\"]\n         self.assertEqual(field.default, models.NOT_PROVIDED)\n         # Test the database alteration\n@@ -1547,6 +1551,169 @@ def test_add_field_preserve_default(self):\n             sorted(definition[2]), [\"field\", \"model_name\", \"name\", \"preserve_default\"]\n         )\n \n+    def test_add_field_database_default(self):\n+        \"\"\"The AddField operation can set and unset a database default.\"\"\"\n+        app_label = \"test_adfldd\"\n+        table_name = f\"{app_label}_pony\"\n+        project_state = self.set_up_test_model(app_label)\n+        operation = migrations.AddField(\n+            \"Pony\", \"height\", models.FloatField(null=True, db_default=4)\n+        )\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        self.assertEqual(len(new_state.models[app_label, \"pony\"].fields), 6)\n+        field = new_state.models[app_label, \"pony\"].fields[\"height\"]\n+        self.assertEqual(field.default, models.NOT_PROVIDED)\n+        self.assertEqual(field.db_default, Value(4))\n+        project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4)\n+        self.assertColumnNotExists(table_name, \"height\")\n+        # Add field.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertColumnExists(table_name, \"height\")\n+        new_model = new_state.apps.get_model(app_label, \"pony\")\n+        old_pony = new_model.objects.get()\n+        self.assertEqual(old_pony.height, 4)\n+        new_pony = new_model.objects.create(weight=5)\n+        if not connection.features.can_return_columns_from_insert:\n+            new_pony.refresh_from_db()\n+        self.assertEqual(new_pony.height, 4)\n+        # Reversal.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertColumnNotExists(table_name, \"height\")\n+        # Deconstruction.\n+        definition = operation.deconstruct()\n+        self.assertEqual(definition[0], \"AddField\")\n+        self.assertEqual(definition[1], [])\n+        self.assertEqual(\n+            definition[2],\n+            {\n+                \"field\": field,\n+                \"model_name\": \"Pony\",\n+                \"name\": \"height\",\n+            },\n+        )\n+\n+    def test_add_field_database_default_special_char_escaping(self):\n+        app_label = \"test_adflddsce\"\n+        table_name = f\"{app_label}_pony\"\n+        project_state = self.set_up_test_model(app_label)\n+        old_pony_pk = (\n+            project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4).pk\n+        )\n+        tests = [\"%\", \"'\", '\"']\n+        for db_default in tests:\n+            with self.subTest(db_default=db_default):\n+                operation = migrations.AddField(\n+                    \"Pony\",\n+                    \"special_char\",\n+                    models.CharField(max_length=1, db_default=db_default),\n+                )\n+                new_state = project_state.clone()\n+                operation.state_forwards(app_label, new_state)\n+                self.assertEqual(len(new_state.models[app_label, \"pony\"].fields), 6)\n+                field = new_state.models[app_label, \"pony\"].fields[\"special_char\"]\n+                self.assertEqual(field.default, models.NOT_PROVIDED)\n+                self.assertEqual(field.db_default, Value(db_default))\n+                self.assertColumnNotExists(table_name, \"special_char\")\n+                with connection.schema_editor() as editor:\n+                    operation.database_forwards(\n+                        app_label, editor, project_state, new_state\n+                    )\n+                self.assertColumnExists(table_name, \"special_char\")\n+                new_model = new_state.apps.get_model(app_label, \"pony\")\n+                try:\n+                    new_pony = new_model.objects.create(weight=5)\n+                    if not connection.features.can_return_columns_from_insert:\n+                        new_pony.refresh_from_db()\n+                    self.assertEqual(new_pony.special_char, db_default)\n+\n+                    old_pony = new_model.objects.get(pk=old_pony_pk)\n+                    if connection.vendor != \"oracle\" or db_default != \"'\":\n+                        # The single quotation mark ' is properly quoted and is\n+                        # set for new rows on Oracle, however it is not set on\n+                        # existing rows. Skip the assertion as it's probably a\n+                        # bug in Oracle.\n+                        self.assertEqual(old_pony.special_char, db_default)\n+                finally:\n+                    with connection.schema_editor() as editor:\n+                        operation.database_backwards(\n+                            app_label, editor, new_state, project_state\n+                        )\n+\n+    @skipUnlessDBFeature(\"supports_expression_defaults\")\n+    def test_add_field_database_default_function(self):\n+        app_label = \"test_adflddf\"\n+        table_name = f\"{app_label}_pony\"\n+        project_state = self.set_up_test_model(app_label)\n+        operation = migrations.AddField(\n+            \"Pony\", \"height\", models.FloatField(db_default=Pi())\n+        )\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        self.assertEqual(len(new_state.models[app_label, \"pony\"].fields), 6)\n+        field = new_state.models[app_label, \"pony\"].fields[\"height\"]\n+        self.assertEqual(field.default, models.NOT_PROVIDED)\n+        self.assertEqual(field.db_default, Pi())\n+        project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4)\n+        self.assertColumnNotExists(table_name, \"height\")\n+        # Add field.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertColumnExists(table_name, \"height\")\n+        new_model = new_state.apps.get_model(app_label, \"pony\")\n+        old_pony = new_model.objects.get()\n+        self.assertAlmostEqual(old_pony.height, math.pi)\n+        new_pony = new_model.objects.create(weight=5)\n+        if not connection.features.can_return_columns_from_insert:\n+            new_pony.refresh_from_db()\n+        self.assertAlmostEqual(old_pony.height, math.pi)\n+\n+    def test_add_field_both_defaults(self):\n+        \"\"\"The AddField operation with both default and db_default.\"\"\"\n+        app_label = \"test_adflbddd\"\n+        table_name = f\"{app_label}_pony\"\n+        project_state = self.set_up_test_model(app_label)\n+        operation = migrations.AddField(\n+            \"Pony\", \"height\", models.FloatField(default=3, db_default=4)\n+        )\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        self.assertEqual(len(new_state.models[app_label, \"pony\"].fields), 6)\n+        field = new_state.models[app_label, \"pony\"].fields[\"height\"]\n+        self.assertEqual(field.default, 3)\n+        self.assertEqual(field.db_default, Value(4))\n+        project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4)\n+        self.assertColumnNotExists(table_name, \"height\")\n+        # Add field.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertColumnExists(table_name, \"height\")\n+        new_model = new_state.apps.get_model(app_label, \"pony\")\n+        old_pony = new_model.objects.get()\n+        self.assertEqual(old_pony.height, 4)\n+        new_pony = new_model.objects.create(weight=5)\n+        if not connection.features.can_return_columns_from_insert:\n+            new_pony.refresh_from_db()\n+        self.assertEqual(new_pony.height, 3)\n+        # Reversal.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertColumnNotExists(table_name, \"height\")\n+        # Deconstruction.\n+        definition = operation.deconstruct()\n+        self.assertEqual(definition[0], \"AddField\")\n+        self.assertEqual(definition[1], [])\n+        self.assertEqual(\n+            definition[2],\n+            {\n+                \"field\": field,\n+                \"model_name\": \"Pony\",\n+                \"name\": \"height\",\n+            },\n+        )\n+\n     def test_add_field_m2m(self):\n         \"\"\"\n         Tests the AddField operation with a ManyToManyField.\n@@ -1558,7 +1725,7 @@ def test_add_field_m2m(self):\n         )\n         new_state = project_state.clone()\n         operation.state_forwards(\"test_adflmm\", new_state)\n-        self.assertEqual(len(new_state.models[\"test_adflmm\", \"pony\"].fields), 4)\n+        self.assertEqual(len(new_state.models[\"test_adflmm\", \"pony\"].fields), 6)\n         # Test the database alteration\n         self.assertTableNotExists(\"test_adflmm_pony_stables\")\n         with connection.schema_editor() as editor:\n@@ -1727,7 +1894,7 @@ def test_remove_field(self):\n         self.assertEqual(operation.migration_name_fragment, \"remove_pony_pink\")\n         new_state = project_state.clone()\n         operation.state_forwards(\"test_rmfl\", new_state)\n-        self.assertEqual(len(new_state.models[\"test_rmfl\", \"pony\"].fields), 2)\n+        self.assertEqual(len(new_state.models[\"test_rmfl\", \"pony\"].fields), 4)\n         # Test the database alteration\n         self.assertColumnExists(\"test_rmfl_pony\", \"pink\")\n         with connection.schema_editor() as editor:\n@@ -1934,6 +2101,146 @@ def test_alter_field(self):\n         self.assertEqual(definition[1], [])\n         self.assertEqual(sorted(definition[2]), [\"field\", \"model_name\", \"name\"])\n \n+    def test_alter_field_add_database_default(self):\n+        app_label = \"test_alfladd\"\n+        project_state = self.set_up_test_model(app_label)\n+        operation = migrations.AlterField(\n+            \"Pony\", \"weight\", models.FloatField(db_default=4.5)\n+        )\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        old_weight = project_state.models[app_label, \"pony\"].fields[\"weight\"]\n+        self.assertIs(old_weight.db_default, models.NOT_PROVIDED)\n+        new_weight = new_state.models[app_label, \"pony\"].fields[\"weight\"]\n+        self.assertEqual(new_weight.db_default, Value(4.5))\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            project_state.apps.get_model(app_label, \"pony\").objects.create()\n+        # Alter field.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        pony = new_state.apps.get_model(app_label, \"pony\").objects.create()\n+        if not connection.features.can_return_columns_from_insert:\n+            pony.refresh_from_db()\n+        self.assertEqual(pony.weight, 4.5)\n+        # Reversal.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            project_state.apps.get_model(app_label, \"pony\").objects.create()\n+        # Deconstruction.\n+        definition = operation.deconstruct()\n+        self.assertEqual(definition[0], \"AlterField\")\n+        self.assertEqual(definition[1], [])\n+        self.assertEqual(\n+            definition[2],\n+            {\n+                \"field\": new_weight,\n+                \"model_name\": \"Pony\",\n+                \"name\": \"weight\",\n+            },\n+        )\n+\n+    def test_alter_field_change_default_to_database_default(self):\n+        \"\"\"The AlterField operation changing default to db_default.\"\"\"\n+        app_label = \"test_alflcdtdd\"\n+        project_state = self.set_up_test_model(app_label)\n+        operation = migrations.AlterField(\n+            \"Pony\", \"pink\", models.IntegerField(db_default=4)\n+        )\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        old_pink = project_state.models[app_label, \"pony\"].fields[\"pink\"]\n+        self.assertEqual(old_pink.default, 3)\n+        self.assertIs(old_pink.db_default, models.NOT_PROVIDED)\n+        new_pink = new_state.models[app_label, \"pony\"].fields[\"pink\"]\n+        self.assertIs(new_pink.default, models.NOT_PROVIDED)\n+        self.assertEqual(new_pink.db_default, Value(4))\n+        pony = project_state.apps.get_model(app_label, \"pony\").objects.create(weight=1)\n+        self.assertEqual(pony.pink, 3)\n+        # Alter field.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        pony = new_state.apps.get_model(app_label, \"pony\").objects.create(weight=1)\n+        if not connection.features.can_return_columns_from_insert:\n+            pony.refresh_from_db()\n+        self.assertEqual(pony.pink, 4)\n+        # Reversal.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        pony = project_state.apps.get_model(app_label, \"pony\").objects.create(weight=1)\n+        self.assertEqual(pony.pink, 3)\n+\n+    def test_alter_field_change_nullable_to_database_default_not_null(self):\n+        \"\"\"\n+        The AlterField operation changing a null field to db_default.\n+        \"\"\"\n+        app_label = \"test_alflcntddnn\"\n+        project_state = self.set_up_test_model(app_label)\n+        operation = migrations.AlterField(\n+            \"Pony\", \"green\", models.IntegerField(db_default=4)\n+        )\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        old_green = project_state.models[app_label, \"pony\"].fields[\"green\"]\n+        self.assertIs(old_green.db_default, models.NOT_PROVIDED)\n+        new_green = new_state.models[app_label, \"pony\"].fields[\"green\"]\n+        self.assertEqual(new_green.db_default, Value(4))\n+        old_pony = project_state.apps.get_model(app_label, \"pony\").objects.create(\n+            weight=1\n+        )\n+        self.assertIsNone(old_pony.green)\n+        # Alter field.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        old_pony.refresh_from_db()\n+        self.assertEqual(old_pony.green, 4)\n+        pony = new_state.apps.get_model(app_label, \"pony\").objects.create(weight=1)\n+        if not connection.features.can_return_columns_from_insert:\n+            pony.refresh_from_db()\n+        self.assertEqual(pony.green, 4)\n+        # Reversal.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        pony = project_state.apps.get_model(app_label, \"pony\").objects.create(weight=1)\n+        self.assertIsNone(pony.green)\n+\n+    @skipIfDBFeature(\"interprets_empty_strings_as_nulls\")\n+    def test_alter_field_change_blank_nullable_database_default_to_not_null(self):\n+        app_label = \"test_alflcbnddnn\"\n+        table_name = f\"{app_label}_pony\"\n+        project_state = self.set_up_test_model(app_label)\n+        default = \"Yellow\"\n+        operation = migrations.AlterField(\n+            \"Pony\",\n+            \"yellow\",\n+            models.CharField(blank=True, db_default=default, max_length=20),\n+        )\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        self.assertColumnNull(table_name, \"yellow\")\n+        pony = project_state.apps.get_model(app_label, \"pony\").objects.create(\n+            weight=1, yellow=None\n+        )\n+        self.assertIsNone(pony.yellow)\n+        # Alter field.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertColumnNotNull(table_name, \"yellow\")\n+        pony.refresh_from_db()\n+        self.assertEqual(pony.yellow, default)\n+        pony = new_state.apps.get_model(app_label, \"pony\").objects.create(weight=1)\n+        if not connection.features.can_return_columns_from_insert:\n+            pony.refresh_from_db()\n+        self.assertEqual(pony.yellow, default)\n+        # Reversal.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertColumnNull(table_name, \"yellow\")\n+        pony = project_state.apps.get_model(app_label, \"pony\").objects.create(\n+            weight=1, yellow=None\n+        )\n+        self.assertIsNone(pony.yellow)\n+\n     def test_alter_field_add_db_column_noop(self):\n         \"\"\"\n         AlterField operation is a noop when adding only a db_column and the\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2102,6 +2102,33 @@ def test_rename_keep_null_status(self):\n         with self.assertRaises(IntegrityError):\n             NoteRename.objects.create(detail_info=None)\n \n+    @isolate_apps(\"schema\")\n+    def test_rename_keep_db_default(self):\n+        \"\"\"Renaming a field shouldn't affect a database default.\"\"\"\n+\n+        class AuthorDbDefault(Model):\n+            birth_year = IntegerField(db_default=1985)\n+\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        self.isolated_local_models = [AuthorDbDefault]\n+        with connection.schema_editor() as editor:\n+            editor.create_model(AuthorDbDefault)\n+        columns = self.column_classes(AuthorDbDefault)\n+        self.assertEqual(columns[\"birth_year\"][1].default, \"1985\")\n+\n+        old_field = AuthorDbDefault._meta.get_field(\"birth_year\")\n+        new_field = IntegerField(db_default=1985)\n+        new_field.set_attributes_from_name(\"renamed_year\")\n+        new_field.model = AuthorDbDefault\n+        with connection.schema_editor(\n+            atomic=connection.features.supports_atomic_references_rename\n+        ) as editor:\n+            editor.alter_field(AuthorDbDefault, old_field, new_field, strict=True)\n+        columns = self.column_classes(AuthorDbDefault)\n+        self.assertEqual(columns[\"renamed_year\"][1].default, \"1985\")\n+\n     @skipUnlessDBFeature(\n         \"supports_column_check_constraints\", \"can_introspect_check_constraints\"\n     )\n",
  "problem_statement": "Add Field.db_default for defining database defaults\nDescription\n\t \n\t\t(last modified by Anders Hovmöller)\n\t \n​https://github.com/django/django/pull/13709\nApply this diff to django/core/mamagement.py\nShould work on any database. \n75a76,77\nif f.default <> meta.fields.NOT_PROVIDED:\nfield_output.append(\"DEFAULT '%s'\" % (f.default,))\n",
  "hints_text": "I'm marking this as a wontfix because we don't have a way of converting Python objects to SQL-friendly syntax, for insertion into the \"DEFAULT\" clause in a CREATE TABLE statement. For example, the default value \"John's test\", which has a quote in it, may have to be represented differently in SQL, depending on the backend. Unfortunately, not all of the database modules (psycopg, MySQLdb, etc.) expose functionality that quotes the values.\nGOAL: Django should express the structure and relationships of the models in the database schema as fully as possible within the capabilities of a specific backend. This is important when working with other tools that do not use the Django ORM. PROBLEM: When django-admin creates sql statements in response to the 'sql','sqlclear' and related sub-commands, string concatenation is used rather than the parameterized queries that are used in the normal object manipulation code. If default values for fields contain delimiting characters(',\",;,etc), the resulting sql will contain errors. The string describing the default value must be processed by a backend-specific character-escaping method that will alter any problem characters before it can be inserted into the sql statement. SOLUTION: When describing a field with a default value, if the backend has a method called escapechars(), a sql 'DEFAULT' clause is assembled and inserted. If no such method exists, no additional clause is inserted, though the Django objects still produce default values. IMPLEMENTATION: Postgresql: Updated and tested Sqlite: Updated, not tested Mysql: Not updated MS-MSQL: Not updated Extra notes: pymysqldb exposes a quoting function that could simply be wrapped. I'll update this patch again when I get the ability to test the other backends. Help is appreciated. However, patch only adds new functionality. Unmodified backends should continue to work as before.\nSecond rev, with addition of escaping function\nRe-marking as wontfix.\npatch updated for pending release of 0.95\nI have updated my patch to the current svn with magic-removal mainlined in. The patch now supports all backends, as well. I would like to get this in in time for the 0.95 release.\nupdate for 2900\nit would be nice to see this merged into the trunk. as i stated in #django, an ORM can't do everything so there is a need for custom sql. it frustrates me when i do an INSERT, but it doesn't know what to default to. try doing: I actually needed this today: INSERT INTO tbl DEFAULT VALUES;\n0.92 is long gone.\nAgain, this is wontfix for the reasons Adrian articulated.\nMilestone Version 1.0 deleted\nI am reopening this as the reasons Adrian articulated were addressed in later patches without further rebuttal. Default values would be very useful in introspective upgrading of databases, although other means of providing values to new fields per existing row through a more complete upgrade architecture would also be desirable. I have a few issues with how this patch works. The first is that the user is to provide the default value in the format of a string to the database, not in the format of a value of the field. This can be solved easily with the Field get_db_prep_save: newest patch, management,py, new line 173: escaped_string = django.db.backend.escapechars(f.get_db_prep_save(f.default)) Furthermore the code makes the assumption that values shall be quoted with single quotes. It would be more appropriate for the escapechars interface to return an entire quoted string usable as a value (move the single quotes into each escapechars function, making new line 174 in the same file like:) field_output.append(style.SQL_KEYWORD(\"DEFAULT %s\" % (escaped_string,))) Furthermore, the implementation of the escapechars (or otherwise named) function should be done as much as is possible and appropriate using routines provided by the various backends (psycodb, etc.). The DB-API way of dealing with escaped values is via the cursor execute. That would change these two lines to something like: field_output.append(style.SQL_KEYWORD(\"DEFAULT %%s\") field_output_params.append(f.get_db_prep_save(f.default)) However this last way would require complete reworking of the management.py everything to support passing these params around with the sql strings, and emulation of DB-API execute substitution, for each backend, to output SQL statements. It would be nice if the DB-API interface also provided something like execute_sql(...) and executemany_sql(...) which returned strings such that execute(execute_sql(...)) and execute(...) were functionally equivalent. I'd also be tempted to rename escapechars to escapedefault due to its very specific intent, or to escapeparam if it is intended to work on what DB-API calls parameters in general. Furthermore, default values for fields should be reflected in the admin interface.\n& once again around the Design-Decision-needed loop...\nStill needs to address the issue of callable defaults -- since those are calculated on the fly at the time of insertion, it's not going to be possible to express them in SQL.\nOnce again, I'm marking wontfix. Let's bring this up on django-dev if more debate is needed.\nHi, bumping up here old ticket. I think this is a very important feature, as I'm writing the sql my self for this reason. any solutions?\nPlease reopen it and implement using INSERT ... RETURNING (for postgres). This may be optional behaviour dependent on db engine used. Defaults computed at the database level are very important. This may be optional feature, but it should be available. The database is most important and long-lived part of any bigger system. Python-like callbacks passed as defaults shouldn't be supported, of course. They may behave same as before and they should not be listed in RETURNING clause.\nThere was a discussion on this topic, with some partial work to support the feature, about two years ago: ​https://groups.google.com/d/topic/django-developers/3mcro17Gb40/discussion\nReopening as per the mailing list discussion in the previous comment.\nFurther justification for this feature -- it makes zero-downtime DB migrations easier: #29266.\nHi. Django 3.x generates sql with drop default: ALTER TABLE \"x\" ADD COLUMN \"y\" integer DEFAULT 0 NOT NULL CHECK (\"y\" >= 0); ALTER TABLE \"x\" ALTER COLUMN \"y\" DROP DEFAULT; The whole thing is about not adding DROP DEFAULT. How about some kind of option for database backend?\nCurrently using this ​https://github.com/3YOURMIND/django-add-default-value to run migrations without downtime using MySQL in strict mode.\nHi. 15 years have passed since this important bug report. Every time we're uploading new version of the application, which includes new not nullable fields in db tables, our service is failing. Db changes are applied first, then app services are restarting on all servers (it takes few minutes). During this time old version loaded into memory is failing due to missing defaults: IntegrityError null value in column \"X\" violates not-null constraint DETAIL: Failing row contains (...) For us, default values must be set at the database layer. Please add support of db_default attribute.",
  "created_at": "2022-09-24T10:16:45Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_allowed (field_defaults.tests.AllowedDefaultTests.test_allowed)\", \"test_disallowed (field_defaults.tests.AllowedDefaultTests.test_disallowed)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.UUIDFieldTests.test_choices_named_group)\", \"test_manager_method_attributes (basic.tests.ManagerTest.test_manager_method_attributes)\", \"test_manager_method_signature (basic.tests.ManagerTest.test_manager_method_signature)\", \"This test ensures that the correct set of methods from `QuerySet`\", \"test_references_model_mixin (migrations.test_operations.TestCreateModel.test_references_model_mixin)\", \"test_non_nullable_blank (invalid_models_tests.test_ordinary_fields.GenericIPAddressFieldTests.test_non_nullable_blank)\", \"test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests.test_reference_field_by_through_fields)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests.test_references_field_by_from_fields)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests.test_references_field_by_name)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests.test_references_field_by_remote_field_model)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests.test_references_field_by_through)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests.test_references_field_by_to_fields)\", \"test_references_model (migrations.test_operations.FieldOperationTests.test_references_model)\", \"test_str_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests.test_str_default_value)\", \"test_valid_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests.test_valid_default_value)\", \"test_invalid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests.test_invalid_default)\", \"test_valid_callable_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests.test_valid_callable_default)\", \"test_valid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests.test_valid_default)\", \"test_valid_default_none (invalid_models_tests.test_ordinary_fields.JSONFieldTests.test_valid_default_none)\", \"test_forbidden_files_and_folders (invalid_models_tests.test_ordinary_fields.FilePathFieldTests.test_forbidden_files_and_folders)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.AutoFieldTests.test_max_length_warning)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.AutoFieldTests.test_primary_key)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.AutoFieldTests.test_valid_case)\", \"test_auto (migrations.test_autodetector.MigrationSuggestNameTests.test_auto)\", \"test_many_operations_suffix (migrations.test_autodetector.MigrationSuggestNameTests.test_many_operations_suffix)\", \"test_no_operations (migrations.test_autodetector.MigrationSuggestNameTests.test_no_operations)\", \"test_no_operations_initial (migrations.test_autodetector.MigrationSuggestNameTests.test_no_operations_initial)\", \"test_none_name (migrations.test_autodetector.MigrationSuggestNameTests.test_none_name)\", \"test_none_name_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests.test_none_name_with_initial_true)\", \"test_operation_with_invalid_chars_in_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests.test_operation_with_invalid_chars_in_suggested_name)\", \"test_operation_with_no_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests.test_operation_with_no_suggested_name)\", \"test_single_operation (migrations.test_autodetector.MigrationSuggestNameTests.test_single_operation)\", \"test_single_operation_long_name (migrations.test_autodetector.MigrationSuggestNameTests.test_single_operation_long_name)\", \"test_two_create_models (migrations.test_autodetector.MigrationSuggestNameTests.test_two_create_models)\", \"test_two_create_models_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests.test_two_create_models_with_initial_true)\", \"test_two_operations (migrations.test_autodetector.MigrationSuggestNameTests.test_two_operations)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.IntegerFieldTests.test_max_length_warning)\", \"test_db_comment (invalid_models_tests.test_ordinary_fields.DbCommentTests.test_db_comment)\", \"test_db_comment_required_db_features (invalid_models_tests.test_ordinary_fields.DbCommentTests.test_db_comment_required_db_features)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.TextFieldTests.test_db_collation)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.TextFieldTests.test_db_collation_required_db_features)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.FileFieldTests.test_primary_key)\", \"test_upload_to_callable_not_checked (invalid_models_tests.test_ordinary_fields.FileFieldTests.test_upload_to_callable_not_checked)\", \"test_upload_to_starts_with_slash (invalid_models_tests.test_ordinary_fields.FileFieldTests.test_upload_to_starts_with_slash)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.FileFieldTests.test_valid_case)\", \"test_valid_default_case (invalid_models_tests.test_ordinary_fields.FileFieldTests.test_valid_default_case)\", \"test_db_default (invalid_models_tests.test_ordinary_fields.InvalidDBDefaultTests.test_db_default)\", \"test_db_default_combined_invalid (invalid_models_tests.test_ordinary_fields.InvalidDBDefaultTests.test_db_default_combined_invalid)\", \"test_db_default_expression_invalid (invalid_models_tests.test_ordinary_fields.InvalidDBDefaultTests.test_db_default_expression_invalid)\", \"test_db_default_expression_required_db_features (invalid_models_tests.test_ordinary_fields.InvalidDBDefaultTests.test_db_default_expression_required_db_features)\", \"test_db_default_function_arguments_invalid (invalid_models_tests.test_ordinary_fields.InvalidDBDefaultTests.test_db_default_function_arguments_invalid)\", \"test_db_default_literal (invalid_models_tests.test_ordinary_fields.InvalidDBDefaultTests.test_db_default_literal)\", \"test_db_default_required_db_features (invalid_models_tests.test_ordinary_fields.InvalidDBDefaultTests.test_db_default_required_db_features)\", \"test_bad_values_of_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests.test_bad_values_of_max_digits_and_decimal_places)\", \"test_decimal_places_greater_than_max_digits (invalid_models_tests.test_ordinary_fields.DecimalFieldTests.test_decimal_places_greater_than_max_digits)\", \"test_negative_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests.test_negative_max_digits_and_decimal_places)\", \"test_required_attributes (invalid_models_tests.test_ordinary_fields.DecimalFieldTests.test_required_attributes)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.DecimalFieldTests.test_valid_field)\", \"test_select_on_save (basic.tests.SelectOnSaveTests.test_select_on_save)\", \"select_on_save works correctly if the database doesn't return correct\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests.test_fix_default_value)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests.test_fix_default_value_tz)\", \"test_both_default (field_defaults.tests.DefaultTests.test_both_default)\", \"test_bulk_create_all_db_defaults (field_defaults.tests.DefaultTests.test_bulk_create_all_db_defaults)\", \"test_bulk_create_all_db_defaults_one_field (field_defaults.tests.DefaultTests.test_bulk_create_all_db_defaults_one_field)\", \"test_bulk_create_mixed_db_defaults (field_defaults.tests.DefaultTests.test_bulk_create_mixed_db_defaults)\", \"test_bulk_create_mixed_db_defaults_function (field_defaults.tests.DefaultTests.test_bulk_create_mixed_db_defaults_function)\", \"test_case_when_db_default_returning (field_defaults.tests.DefaultTests.test_case_when_db_default_returning)\", \"test_db_default_function (field_defaults.tests.DefaultTests.test_db_default_function)\", \"test_field_db_defaults_returning (field_defaults.tests.DefaultTests.test_field_db_defaults_returning)\", \"test_field_defaults (field_defaults.tests.DefaultTests.test_field_defaults)\", \"test_foreign_key_db_default (field_defaults.tests.DefaultTests.test_foreign_key_db_default)\", \"test_null_db_default (field_defaults.tests.DefaultTests.test_null_db_default)\", \"test_pk_db_default (field_defaults.tests.DefaultTests.test_pk_db_default)\", \"test_all_lookup (basic.tests.ModelLookupTest.test_all_lookup)\", \"test_does_not_exist (basic.tests.ModelLookupTest.test_does_not_exist)\", \"test_equal_lookup (basic.tests.ModelLookupTest.test_equal_lookup)\", \"test_lookup_by_primary_key (basic.tests.ModelLookupTest.test_lookup_by_primary_key)\", \"test_rich_lookup (basic.tests.ModelLookupTest.test_rich_lookup)\", \"test_too_many (basic.tests.ModelLookupTest.test_too_many)\", \"test_autofields_generate_different_values_for_each_instance (basic.tests.ModelInstanceCreationTests.test_autofields_generate_different_values_for_each_instance)\", \"test_can_create_instance_using_kwargs (basic.tests.ModelInstanceCreationTests.test_can_create_instance_using_kwargs)\", \"You can initialize a model instance using positional arguments,\", \"You can leave off the value for an AutoField when creating an\", \"test_can_mix_and_match_position_and_kwargs (basic.tests.ModelInstanceCreationTests.test_can_mix_and_match_position_and_kwargs)\", \"test_cannot_create_instance_with_invalid_kwargs (basic.tests.ModelInstanceCreationTests.test_cannot_create_instance_with_invalid_kwargs)\", \"as much precision in *seconds*\", \"test_leaving_off_a_field_with_default_set_the_default_will_be_saved (basic.tests.ModelInstanceCreationTests.test_leaving_off_a_field_with_default_set_the_default_will_be_saved)\", \"test_object_is_not_written_to_database_until_save_was_called (basic.tests.ModelInstanceCreationTests.test_object_is_not_written_to_database_until_save_was_called)\", \"test_positional_and_keyword_args_for_the_same_field (basic.tests.ModelInstanceCreationTests.test_positional_and_keyword_args_for_the_same_field)\", \"test_querysets_checking_for_membership (basic.tests.ModelInstanceCreationTests.test_querysets_checking_for_membership)\", \"test_save_parent_primary_with_default (basic.tests.ModelInstanceCreationTests.test_save_parent_primary_with_default)\", \"test_save_primary_with_db_default (basic.tests.ModelInstanceCreationTests.test_save_primary_with_db_default)\", \"test_save_primary_with_default (basic.tests.ModelInstanceCreationTests.test_save_primary_with_default)\", \"test_saving_an_object_again_does_not_create_a_new_object (basic.tests.ModelInstanceCreationTests.test_saving_an_object_again_does_not_create_a_new_object)\", \"test_auto_now_and_auto_now_add_raise_error (invalid_models_tests.test_ordinary_fields.DateFieldTests.test_auto_now_and_auto_now_add_raise_error)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateFieldTests.test_fix_default_value)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateFieldTests.test_fix_default_value_tz)\", \"Added fields will be created before using them in index_together.\", \"test_add_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_add_index_together)\", \"test_add_model_order_with_respect_to_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_add_model_order_with_respect_to_index_together)\", \"Fields are altered after deleting some index_together.\", \"test_create_model_and_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_create_model_and_index_together)\", \"Empty index_together shouldn't generate a migration.\", \"index_together doesn't generate a migration if no changes have been\", \"index_together triggers on ordering changes.\", \"test_index_together_remove_fk (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_index_together_remove_fk)\", \"test_partly_alter_index_together_decrease (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_partly_alter_index_together_decrease)\", \"test_partly_alter_index_together_increase (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_partly_alter_index_together_increase)\", \"Removed fields will be removed after updating index_together.\", \"test_remove_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_remove_index_together)\", \"Fields are renamed before updating index_together.\", \"test_rename_index_together_to_index (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_rename_index_together_to_index)\", \"test_rename_index_together_to_index_extra_options (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_rename_index_together_to_index_extra_options)\", \"test_rename_index_together_to_index_order_fields (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_rename_index_together_to_index_order_fields)\", \"test_set_alter_order_with_respect_to_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests.test_set_alter_order_with_respect_to_index_together)\", \"test_bad_db_index_value (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_bad_db_index_value)\", \"test_bad_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_bad_max_length_value)\", \"test_bad_validators (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_bad_validators)\", \"test_choices_containing_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_choices_containing_lazy)\", \"test_choices_containing_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_choices_containing_non_pairs)\", \"test_choices_in_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_choices_in_max_length)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_choices_named_group)\", \"test_choices_named_group_bad_structure (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_choices_named_group_bad_structure)\", \"test_choices_named_group_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_choices_named_group_lazy)\", \"test_choices_named_group_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_choices_named_group_non_pairs)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_db_collation)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_db_collation_required_db_features)\", \"test_iterable_of_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_iterable_of_iterable_choices)\", \"test_lazy_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_lazy_choices)\", \"test_missing_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_missing_max_length)\", \"test_negative_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_negative_max_length)\", \"test_non_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_non_iterable_choices)\", \"Two letters isn't a valid choice pair.\", \"test_str_max_length_type (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_str_max_length_type)\", \"test_str_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_str_max_length_value)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.CharFieldTests.test_valid_field)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.TimeFieldTests.test_fix_default_value)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.TimeFieldTests.test_fix_default_value_tz)\", \"test_lookup_in_fields (basic.tests.ModelRefreshTests.test_lookup_in_fields)\", \"test_prefetched_cache_cleared (basic.tests.ModelRefreshTests.test_prefetched_cache_cleared)\", \"test_refresh (basic.tests.ModelRefreshTests.test_refresh)\", \"test_refresh_clears_one_to_one_field (basic.tests.ModelRefreshTests.test_refresh_clears_one_to_one_field)\", \"refresh_from_db() clear cached reverse relations.\", \"test_refresh_fk (basic.tests.ModelRefreshTests.test_refresh_fk)\", \"test_refresh_fk_on_delete_set_null (basic.tests.ModelRefreshTests.test_refresh_fk_on_delete_set_null)\", \"test_refresh_no_fields (basic.tests.ModelRefreshTests.test_refresh_no_fields)\", \"test_refresh_null_fk (basic.tests.ModelRefreshTests.test_refresh_null_fk)\", \"test_refresh_unsaved (basic.tests.ModelRefreshTests.test_refresh_unsaved)\", \"test_unknown_kwarg (basic.tests.ModelRefreshTests.test_unknown_kwarg)\", \"test_create_method (basic.tests.ModelTest.test_create_method)\", \"gettext_lazy objects work when saving model instances\", \"test_delete_and_access_field (basic.tests.ModelTest.test_delete_and_access_field)\", \"test_emptyqs (basic.tests.ModelTest.test_emptyqs)\", \"test_emptyqs_customqs (basic.tests.ModelTest.test_emptyqs_customqs)\", \"test_emptyqs_values (basic.tests.ModelTest.test_emptyqs_values)\", \"test_emptyqs_values_order (basic.tests.ModelTest.test_emptyqs_values_order)\", \"test_eq (basic.tests.ModelTest.test_eq)\", \"test_extra_method_select_argument_with_dashes (basic.tests.ModelTest.test_extra_method_select_argument_with_dashes)\", \"test_extra_method_select_argument_with_dashes_and_values (basic.tests.ModelTest.test_extra_method_select_argument_with_dashes_and_values)\", \"test_hash (basic.tests.ModelTest.test_hash)\", \"test_hash_function (basic.tests.ModelTest.test_hash_function)\", \"test_manually_specify_primary_key (basic.tests.ModelTest.test_manually_specify_primary_key)\", \"test_microsecond_precision (basic.tests.ModelTest.test_microsecond_precision)\", \"test_missing_hash_not_inherited (basic.tests.ModelTest.test_missing_hash_not_inherited)\", \"test_multiple_objects_max_num_fetched (basic.tests.ModelTest.test_multiple_objects_max_num_fetched)\", \"test_not_equal_and_equal_operators_behave_as_expected_on_instances (basic.tests.ModelTest.test_not_equal_and_equal_operators_behave_as_expected_on_instances)\", \"test_objects_attribute_is_only_available_on_the_class_itself (basic.tests.ModelTest.test_objects_attribute_is_only_available_on_the_class_itself)\", \"test_queryset_delete_removes_all_items_in_that_queryset (basic.tests.ModelTest.test_queryset_delete_removes_all_items_in_that_queryset)\", \"test_specified_parent_hash_inherited (basic.tests.ModelTest.test_specified_parent_hash_inherited)\", \"test_ticket_20278 (basic.tests.ModelTest.test_ticket_20278)\", \"test_unicode_data (basic.tests.ModelTest.test_unicode_data)\", \"test_year_lookup_edge_case (basic.tests.ModelTest.test_year_lookup_edge_case)\", \"test_pillow_installed (invalid_models_tests.test_ordinary_fields.ImageFieldTests.test_pillow_installed)\", \"Tests the AddField operation.\", \"The CreateTable operation ignores swapped models.\", \"Tests the DeleteModel operation ignores swapped models.\", \"Add/RemoveIndex operations ignore swapped models.\", \"Setting order_with_respect_to when adding the FK too does\", \"#23405 - Adding a NOT NULL and blank `CharField` or `TextField`\", \"Test change detection of new constraints.\", \"test_add_constraints_with_new_model (migrations.test_autodetector.AutodetectorTests.test_add_constraints_with_new_model)\", \"test_add_custom_fk_with_hardcoded_to (migrations.test_autodetector.AutodetectorTests.test_add_custom_fk_with_hardcoded_to)\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests.test_add_date_fields_with_auto_now_add_asking_for_default)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests.test_add_date_fields_with_auto_now_add_not_asking_for_null_addition)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests.test_add_date_fields_with_auto_now_not_asking_for_default)\", \"Tests autodetection of new fields.\", \"Added fields will be created before using them in unique_together.\", \"#22030 - Adding a field with a default should work.\", \"test_add_index_with_new_model (migrations.test_autodetector.AutodetectorTests.test_add_index_with_new_model)\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"Setting order_with_respect_to when adding the whole model\", \"test_add_model_order_with_respect_to_constraint (migrations.test_autodetector.AutodetectorTests.test_add_model_order_with_respect_to_constraint)\", \"test_add_model_order_with_respect_to_index (migrations.test_autodetector.AutodetectorTests.test_add_model_order_with_respect_to_index)\", \"test_add_model_order_with_respect_to_unique_together (migrations.test_autodetector.AutodetectorTests.test_add_model_order_with_respect_to_unique_together)\", \"Removing a base field takes place before adding a new inherited model\", \"#23405 - Adding a NOT NULL and non-blank `CharField` or `TextField`\", \"test_add_not_null_field_with_db_default (migrations.test_autodetector.AutodetectorTests.test_add_not_null_field_with_db_default)\", \"Tests unique_together detection.\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"test_alter_db_table_comment_add (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_add)\", \"test_alter_db_table_comment_change (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_change)\", \"test_alter_db_table_comment_no_changes (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_no_changes)\", \"test_alter_db_table_comment_remove (migrations.test_autodetector.AutodetectorTests.test_alter_db_table_comment_remove)\", \"Alter_db_table doesn't generate a migration if no changes have been made.\", \"Tests detection for removing db_table in model's options.\", \"Tests when model and db_table changes, autodetector must create two\", \"Fields are altered after deleting some unique_together.\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests.test_alter_field_to_fk_dependency_other_app)\", \"#23609 - Tests autodetection of nullable to non-nullable alterations.\", \"test_alter_field_to_not_null_with_db_default (migrations.test_autodetector.AutodetectorTests.test_alter_field_to_not_null_with_db_default)\", \"ForeignKeys are altered _before_ the model they used to\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests.test_alter_many_to_many)\", \"Changing the model managers adds a new operation.\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"test_alter_regex_string_to_compiled_regex (migrations.test_autodetector.AutodetectorTests.test_alter_regex_string_to_compiled_regex)\", \"test_alter_unique_together_fk_to_m2m (migrations.test_autodetector.AutodetectorTests.test_alter_unique_together_fk_to_m2m)\", \"Tests auto-naming of migrations for graph matching.\", \"test_arrange_for_graph_with_multiple_initial (migrations.test_autodetector.AutodetectorTests.test_arrange_for_graph_with_multiple_initial)\", \"Bases of other models come first.\", \"test_bases_first_mixed_case_app_label (migrations.test_autodetector.AutodetectorTests.test_bases_first_mixed_case_app_label)\", \"#23315 - The dependency resolver knows to put all CreateModel\", \"#23322 - The dependency resolver knows to explicitly resolve\", \"Having a circular ForeignKey dependency automatically\", \"#23938 - Changing a concrete field into a ManyToManyField\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests.test_create_model_and_unique_together)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"Adding a m2m with a through model and the models that use it should be\", \"test_create_with_through_model_separate_apps (migrations.test_autodetector.AutodetectorTests.test_create_with_through_model_separate_apps)\", \"Two instances which deconstruct to the same value aren't considered a\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"#22951 -- Uninstantiated classes with deconstruct are correctly returned\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests.test_default_related_name_option)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests.test_different_regex_does_alter)\", \"Empty unique_together shouldn't generate a migration.\", \"A dependency to an app with no migrations uses __first__.\", \"Having a ForeignKey automatically adds a dependency.\", \"#23100 - ForeignKeys correctly depend on other apps' models.\", \"Removing an FK and the model it targets in the same change must remove\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests.test_identical_regex_doesnt_alter)\", \"Tests when model changes but db_table stays as-is, autodetector must not\", \"A dependency to an app with existing migrations uses the\", \"A model with a m2m field that specifies a \\\"through\\\" model cannot be\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests.test_managed_to_unmanaged)\", \"#23938 - Changing a ManyToManyField into a concrete field\", \"Removing a ManyToManyField and the \\\"through\\\" model in the same change\", \"Removing a model that contains a ManyToManyField and the \\\"through\\\" model\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests.test_mti_inheritance_model_removal)\", \"Inheriting models doesn't move *_ptr fields into AddField operations.\", \"Nested deconstruction is applied recursively to the args/kwargs of\", \"Tests autodetection of new models.\", \"If two models with a ForeignKey from one to the other are removed at the\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_parse_number (migrations.test_autodetector.AutodetectorTests.test_parse_number)\", \"test_partly_alter_unique_together_decrease (migrations.test_autodetector.AutodetectorTests.test_partly_alter_unique_together_decrease)\", \"test_partly_alter_unique_together_increase (migrations.test_autodetector.AutodetectorTests.test_partly_alter_unique_together_increase)\", \"A relation used as the primary key is kept as part of CreateModel.\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"#23415 - The autodetector must correctly deal with custom FK on proxy\", \"FK dependencies still work on proxy models.\", \"test_proxy_non_model_parent (migrations.test_autodetector.AutodetectorTests.test_proxy_non_model_parent)\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests.test_proxy_to_mti_with_fk_to_proxy)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests.test_proxy_to_mti_with_fk_to_proxy_proxy)\", \"Removing order_with_respect_to when removing the FK too does\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"Removed fields will be removed after updating unique_together.\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"Fields are renamed before updating unique_together.\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests.test_rename_field_foreign_key_to_field)\", \"RenameField is used if a field is renamed and db_column equal to the\", \"test_rename_field_with_renamed_model (migrations.test_autodetector.AutodetectorTests.test_rename_field_with_renamed_model)\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests.test_rename_foreign_object_fields)\", \"test_rename_indexes (migrations.test_autodetector.AutodetectorTests.test_rename_indexes)\", \"Tests autodetection of renamed models that are used in M2M relations as\", \"Tests autodetection of renamed models.\", \"Model name is case-insensitive. Changing case doesn't lead to any\", \"The migration to rename a model pointed to by a foreign key in another\", \"#24537 - The order of fields in a model does not influence\", \"Tests autodetection of renamed models while simultaneously renaming one\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests.test_rename_referenced_primary_key)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests.test_rename_related_field_preserved_db_column)\", \"test_renamed_referenced_m2m_model_case (migrations.test_autodetector.AutodetectorTests.test_renamed_referenced_m2m_model_case)\", \"#22300 - Adding an FK in the same \\\"spot\\\" as a deleted CharField should\", \"A migration with a FK between two models of the same app does\", \"#22275 - A migration with circular FK dependency does not try\", \"A migration with a FK between two models of the same app\", \"Setting order_with_respect_to adds a field.\", \"test_set_alter_order_with_respect_to_index_constraint_unique_together (migrations.test_autodetector.AutodetectorTests.test_set_alter_order_with_respect_to_index_constraint_unique_together)\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests.test_supports_functools_partial)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests.test_swappable)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests.test_swappable_changed)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests.test_swappable_circular_multi_mti)\", \"Swappable models get their CreateModel first.\", \"test_swappable_lowercase (migrations.test_autodetector.AutodetectorTests.test_swappable_lowercase)\", \"test_swappable_many_to_many_model_case (migrations.test_autodetector.AutodetectorTests.test_swappable_many_to_many_model_case)\", \"Trim does not remove dependencies but does remove unwanted apps.\", \"unique_together doesn't generate a migration if no\", \"unique_together also triggers on ordering changes.\", \"Tests unique_together and field removal detection & ordering\", \"The autodetector correctly deals with managed models.\", \"#23415 - The autodetector must correctly deal with custom FK on\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests.test_unmanaged_delete)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests.test_unmanaged_to_managed)\", \"test_add_auto_field (schema.tests.SchemaTests.test_add_auto_field)\", \"effective_default() should be used for DateField, DateTimeField, and\", \"Tests adding fields to models\", \"Tests binary fields get a sane default (#22851)\", \"test_add_field_db_collation (schema.tests.SchemaTests.test_add_field_db_collation)\", \"test_add_field_default_dropped (schema.tests.SchemaTests.test_add_field_default_dropped)\", \"test_add_field_default_nullable (schema.tests.SchemaTests.test_add_field_default_nullable)\", \"Tests adding fields to models with a default that is not directly\", \"test_add_field_durationfield_with_default (schema.tests.SchemaTests.test_add_field_durationfield_with_default)\", \"test_add_field_o2o_nullable (schema.tests.SchemaTests.test_add_field_o2o_nullable)\", \"Adding a field and removing it removes all deferred sql referring to it.\", \"Tests adding fields to models with a temporary default\", \"Tests adding fields to models with a temporary default where\", \"#23987 - effective_default() should be used as the field default when\", \"Regression test for #23009.\", \"test_add_foreign_key_quoted_db_table (schema.tests.SchemaTests.test_add_foreign_key_quoted_db_table)\", \"test_add_foreign_object (schema.tests.SchemaTests.test_add_foreign_object)\", \"Tests index addition and removal\", \"test_add_textfield_default_nullable (schema.tests.SchemaTests.test_add_textfield_default_nullable)\", \"test_add_textfield_unhashable_default (schema.tests.SchemaTests.test_add_textfield_unhashable_default)\", \"Tests simple altering of fields\", \"test_alter_auto_field_quoted_db_column (schema.tests.SchemaTests.test_alter_auto_field_quoted_db_column)\", \"test_alter_auto_field_to_char_field (schema.tests.SchemaTests.test_alter_auto_field_to_char_field)\", \"test_alter_auto_field_to_integer_field (schema.tests.SchemaTests.test_alter_auto_field_to_integer_field)\", \"test_alter_autofield_pk_to_bigautofield_pk (schema.tests.SchemaTests.test_alter_autofield_pk_to_bigautofield_pk)\", \"test_alter_autofield_pk_to_smallautofield_pk (schema.tests.SchemaTests.test_alter_autofield_pk_to_smallautofield_pk)\", \"#24307 - Should skip an alter statement on databases with\", \"test_alter_db_table_case (schema.tests.SchemaTests.test_alter_db_table_case)\", \"test_alter_field_add_index_to_integerfield (schema.tests.SchemaTests.test_alter_field_add_index_to_integerfield)\", \"test_alter_field_choices_noop (schema.tests.SchemaTests.test_alter_field_choices_noop)\", \"test_alter_field_db_collation (schema.tests.SchemaTests.test_alter_field_db_collation)\", \"test_alter_field_default_dropped (schema.tests.SchemaTests.test_alter_field_default_dropped)\", \"No queries are performed when changing field attributes that don't\", \"test_alter_field_fk_keeps_index (schema.tests.SchemaTests.test_alter_field_fk_keeps_index)\", \"test_alter_field_fk_to_o2o (schema.tests.SchemaTests.test_alter_field_fk_to_o2o)\", \"test_alter_field_o2o_keeps_unique (schema.tests.SchemaTests.test_alter_field_o2o_keeps_unique)\", \"test_alter_field_o2o_to_fk (schema.tests.SchemaTests.test_alter_field_o2o_to_fk)\", \"test_alter_field_type_and_db_collation (schema.tests.SchemaTests.test_alter_field_type_and_db_collation)\", \"test_alter_field_type_preserve_db_collation (schema.tests.SchemaTests.test_alter_field_type_preserve_db_collation)\", \"Tests altering of FKs\", \"#25492 - Altering a foreign key's structure and data in the same\", \"#24163 - Tests altering of ForeignKey to OneToOneField\", \"Should be able to convert an implicit \\\"id\\\" field to an explicit \\\"id\\\"\", \"Should be able to rename an IntegerField(primary_key=True) to\", \"test_alter_not_unique_field_to_primary_key (schema.tests.SchemaTests.test_alter_not_unique_field_to_primary_key)\", \"#23609 - Tests handling of default values when altering from NULL to NOT NULL.\", \"#23738 - Can change a nullable field with default to non-nullable\", \"test_alter_null_with_default_value_deferred_constraints (schema.tests.SchemaTests.test_alter_null_with_default_value_deferred_constraints)\", \"Changing a field type shouldn't affect the not null status.\", \"#24163 - Tests altering of OneToOneField to ForeignKey\", \"Changing the primary key field name of a model with a self-referential\", \"test_alter_primary_key_db_collation (schema.tests.SchemaTests.test_alter_primary_key_db_collation)\", \"test_alter_primary_key_quoted_db_table (schema.tests.SchemaTests.test_alter_primary_key_quoted_db_table)\", \"test_alter_primary_key_the_same_name (schema.tests.SchemaTests.test_alter_primary_key_the_same_name)\", \"Should be able to rename an SmallIntegerField(primary_key=True) to\", \"test_alter_text_field (schema.tests.SchemaTests.test_alter_text_field)\", \"#25002 - Test conversion of text field to date field.\", \"#25002 - Test conversion of text field to datetime field.\", \"test_alter_text_field_to_not_null_with_default_value (schema.tests.SchemaTests.test_alter_text_field_to_not_null_with_default_value)\", \"#25002 - Test conversion of text field to time field.\", \"#24447 - Tests adding a FK constraint for an existing column\", \"test_autofield_to_o2o (schema.tests.SchemaTests.test_autofield_to_o2o)\", \"test_char_field_pk_to_auto_field (schema.tests.SchemaTests.test_char_field_pk_to_auto_field)\", \"test_char_field_with_db_index_to_fk (schema.tests.SchemaTests.test_char_field_with_db_index_to_fk)\", \"test_check_constraint_timedelta_param (schema.tests.SchemaTests.test_check_constraint_timedelta_param)\", \"Tests creating/deleting CHECK constraints\", \"test_ci_cs_db_collation (schema.tests.SchemaTests.test_ci_cs_db_collation)\", \"test_composed_check_constraint_with_fk (schema.tests.SchemaTests.test_composed_check_constraint_with_fk)\", \"test_composed_constraint_with_fk (schema.tests.SchemaTests.test_composed_constraint_with_fk)\", \"test_composed_desc_func_index_with_fk (schema.tests.SchemaTests.test_composed_desc_func_index_with_fk)\", \"test_composed_desc_index_with_fk (schema.tests.SchemaTests.test_composed_desc_index_with_fk)\", \"test_composed_func_index_with_fk (schema.tests.SchemaTests.test_composed_func_index_with_fk)\", \"test_composed_func_transform_index_with_fk (schema.tests.SchemaTests.test_composed_func_transform_index_with_fk)\", \"test_composed_index_with_fk (schema.tests.SchemaTests.test_composed_index_with_fk)\", \"test_composite_func_index (schema.tests.SchemaTests.test_composite_func_index)\", \"test_composite_func_index_field_and_expression (schema.tests.SchemaTests.test_composite_func_index_field_and_expression)\", \"test_composite_func_unique_constraint (schema.tests.SchemaTests.test_composite_func_unique_constraint)\", \"Ensures transaction is correctly closed when an error occurs\", \"Tests creating models with index_together already defined\", \"Tries creating a model's table, and then deleting it.\", \"Tries creating a model's table, and then deleting it when it has a\", \"test_db_collation_charfield (schema.tests.SchemaTests.test_db_collation_charfield)\", \"test_db_collation_textfield (schema.tests.SchemaTests.test_db_collation_textfield)\", \"Tests renaming of the table\", \"Creating tables out of FK order, then repointing, works\", \"The db_constraint parameter is respected\", \"Creating a FK to a proxy model creates database constraints.\", \"Regression test for #21497.\", \"test_func_index (schema.tests.SchemaTests.test_func_index)\", \"test_func_index_calc (schema.tests.SchemaTests.test_func_index_calc)\", \"test_func_index_cast (schema.tests.SchemaTests.test_func_index_cast)\", \"test_func_index_collate (schema.tests.SchemaTests.test_func_index_collate)\", \"test_func_index_collate_f_ordered (schema.tests.SchemaTests.test_func_index_collate_f_ordered)\", \"test_func_index_f (schema.tests.SchemaTests.test_func_index_f)\", \"test_func_index_f_decimalfield (schema.tests.SchemaTests.test_func_index_f_decimalfield)\", \"test_func_index_invalid_topmost_expressions (schema.tests.SchemaTests.test_func_index_invalid_topmost_expressions)\", \"test_func_index_json_key_transform (schema.tests.SchemaTests.test_func_index_json_key_transform)\", \"test_func_index_json_key_transform_cast (schema.tests.SchemaTests.test_func_index_json_key_transform_cast)\", \"test_func_index_lookups (schema.tests.SchemaTests.test_func_index_lookups)\", \"test_func_index_multiple_wrapper_references (schema.tests.SchemaTests.test_func_index_multiple_wrapper_references)\", \"test_func_index_nondeterministic (schema.tests.SchemaTests.test_func_index_nondeterministic)\", \"test_func_index_nonexistent_field (schema.tests.SchemaTests.test_func_index_nonexistent_field)\", \"test_func_unique_constraint (schema.tests.SchemaTests.test_func_unique_constraint)\", \"test_func_unique_constraint_collate (schema.tests.SchemaTests.test_func_unique_constraint_collate)\", \"test_func_unique_constraint_lookups (schema.tests.SchemaTests.test_func_unique_constraint_lookups)\", \"test_func_unique_constraint_nondeterministic (schema.tests.SchemaTests.test_func_unique_constraint_nondeterministic)\", \"test_func_unique_constraint_nonexistent_field (schema.tests.SchemaTests.test_func_unique_constraint_nonexistent_field)\", \"test_func_unique_constraint_partial (schema.tests.SchemaTests.test_func_unique_constraint_partial)\", \"Tests removing and adding index_together constraints on a model.\", \"Tests removing and adding index_together constraints that include\", \"Tests creation/altering of indexes\", \"test_m2m (schema.tests.SchemaTests.test_m2m)\", \"test_m2m_create (schema.tests.SchemaTests.test_m2m_create)\", \"test_m2m_create_custom (schema.tests.SchemaTests.test_m2m_create_custom)\", \"test_m2m_create_inherited (schema.tests.SchemaTests.test_m2m_create_inherited)\", \"test_m2m_create_through (schema.tests.SchemaTests.test_m2m_create_through)\", \"test_m2m_create_through_custom (schema.tests.SchemaTests.test_m2m_create_through_custom)\", \"test_m2m_create_through_inherited (schema.tests.SchemaTests.test_m2m_create_through_inherited)\", \"test_m2m_custom (schema.tests.SchemaTests.test_m2m_custom)\", \"test_m2m_db_constraint (schema.tests.SchemaTests.test_m2m_db_constraint)\", \"test_m2m_db_constraint_custom (schema.tests.SchemaTests.test_m2m_db_constraint_custom)\", \"test_m2m_db_constraint_inherited (schema.tests.SchemaTests.test_m2m_db_constraint_inherited)\", \"test_m2m_inherited (schema.tests.SchemaTests.test_m2m_inherited)\", \"test_m2m_rename_field_in_target_model (schema.tests.SchemaTests.test_m2m_rename_field_in_target_model)\", \"test_m2m_repoint (schema.tests.SchemaTests.test_m2m_repoint)\", \"test_m2m_repoint_custom (schema.tests.SchemaTests.test_m2m_repoint_custom)\", \"test_m2m_repoint_inherited (schema.tests.SchemaTests.test_m2m_repoint_inherited)\", \"test_m2m_through_alter (schema.tests.SchemaTests.test_m2m_through_alter)\", \"test_m2m_through_alter_custom (schema.tests.SchemaTests.test_m2m_through_alter_custom)\", \"test_m2m_through_alter_inherited (schema.tests.SchemaTests.test_m2m_through_alter_inherited)\", \"test_m2m_through_remove (schema.tests.SchemaTests.test_m2m_through_remove)\", \"Table names are stripped of their namespace/schema before being used to\", \"When a primary key that's pointed to by a ForeignKey with\", \"Indexes defined with ordering (ASC/DESC) defined on column\", \"Tests altering of the primary key\", \"Foreign keys without database level constraint don't prevent the field\", \"Foreign keys without database level constraint don't prevent the table\", \"#23065 - Constraint names must be quoted if they contain capital letters.\", \"Changing db_index to False doesn't remove indexes from Meta.indexes.\", \"test_remove_field (schema.tests.SchemaTests.test_remove_field)\", \"test_remove_field_check_does_not_remove_meta_constraints (schema.tests.SchemaTests.test_remove_field_check_does_not_remove_meta_constraints)\", \"test_remove_field_unique_does_not_remove_meta_constraints (schema.tests.SchemaTests.test_remove_field_unique_does_not_remove_meta_constraints)\", \"test_remove_ignored_unique_constraint_not_create_fk_index (schema.tests.SchemaTests.test_remove_ignored_unique_constraint_not_create_fk_index)\", \"test_remove_index_together_does_not_remove_meta_indexes (schema.tests.SchemaTests.test_remove_index_together_does_not_remove_meta_indexes)\", \"test_remove_indexed_field (schema.tests.SchemaTests.test_remove_indexed_field)\", \"test_remove_unique_together_does_not_remove_meta_constraints (schema.tests.SchemaTests.test_remove_unique_together_does_not_remove_meta_constraints)\", \"test_rename_field_with_check_to_truncated_name (schema.tests.SchemaTests.test_rename_field_with_check_to_truncated_name)\", \"Renaming a field shouldn't affect a database default.\", \"Renaming a field shouldn't affect the not null status.\", \"test_rename_referenced_field (schema.tests.SchemaTests.test_rename_referenced_field)\", \"test_rename_table_renames_deferred_sql_references (schema.tests.SchemaTests.test_rename_table_renames_deferred_sql_references)\", \"test_text_field_with_db_index (schema.tests.SchemaTests.test_text_field_with_db_index)\", \"test_text_field_with_db_index_to_fk (schema.tests.SchemaTests.test_text_field_with_db_index_to_fk)\", \"Tests removing and adding unique constraints to a single column.\", \"test_unique_constraint (schema.tests.SchemaTests.test_unique_constraint)\", \"test_unique_constraint_field_and_expression (schema.tests.SchemaTests.test_unique_constraint_field_and_expression)\", \"test_unique_name_quoting (schema.tests.SchemaTests.test_unique_name_quoting)\", \"Tests removing and adding unique_together constraints on a model.\", \"Tests removing and adding unique_together constraints that include\", \"Tests the AddField operation on TextField/BinaryField.\", \"Tests the AddField operation on TextField.\", \"test_add_constraint (migrations.test_operations.OperationTests.test_add_constraint)\", \"test_add_constraint_combinable (migrations.test_operations.OperationTests.test_add_constraint_combinable)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests.test_add_constraint_percent_escaping)\", \"test_add_covering_unique_constraint (migrations.test_operations.OperationTests.test_add_covering_unique_constraint)\", \"test_add_deferred_unique_constraint (migrations.test_operations.OperationTests.test_add_deferred_unique_constraint)\", \"The AddField operation with both default and db_default.\", \"The AddField operation can set and unset a database default.\", \"test_add_field_database_default_function (migrations.test_operations.OperationTests.test_add_field_database_default_function)\", \"test_add_field_database_default_special_char_escaping (migrations.test_operations.OperationTests.test_add_field_database_default_special_char_escaping)\", \"Tests the AddField operation with a ManyToManyField.\", \"Tests the AddField operation's state alteration\", \"test_add_func_index (migrations.test_operations.OperationTests.test_add_func_index)\", \"test_add_func_unique_constraint (migrations.test_operations.OperationTests.test_add_func_unique_constraint)\", \"Test the AddIndex operation.\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests.test_add_index_state_forwards)\", \"test_add_or_constraint (migrations.test_operations.OperationTests.test_add_or_constraint)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests.test_add_partial_unique_constraint)\", \"Tests the AlterField operation.\", \"test_alter_field_add_database_default (migrations.test_operations.OperationTests.test_alter_field_add_database_default)\", \"AlterField operation is a noop when adding only a db_column and the\", \"test_alter_field_change_blank_nullable_database_default_to_not_null (migrations.test_operations.OperationTests.test_alter_field_change_blank_nullable_database_default_to_not_null)\", \"The AlterField operation changing default to db_default.\", \"The AlterField operation changing a null field to db_default.\", \"test_alter_field_m2m (migrations.test_operations.OperationTests.test_alter_field_m2m)\", \"The AlterField operation on primary keys (things like PostgreSQL's\", \"Tests the AlterField operation on primary keys changes any FKs pointing to it.\", \"test_alter_field_pk_fk_char_to_int (migrations.test_operations.OperationTests.test_alter_field_pk_fk_char_to_int)\", \"AlterField operation of db_collation on primary keys changes any FKs\", \"test_alter_field_pk_mti_and_fk_to_base (migrations.test_operations.OperationTests.test_alter_field_pk_mti_and_fk_to_base)\", \"test_alter_field_pk_mti_fk (migrations.test_operations.OperationTests.test_alter_field_pk_mti_fk)\", \"test_alter_field_reloads_state_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests.test_alter_field_reloads_state_fk_with_to_field_related_name_target_type_change)\", \"If AlterField doesn't reload state appropriately, the second AlterField\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests.test_alter_field_reloads_state_on_fk_with_to_field_target_type_change)\", \"test_alter_field_with_func_index (migrations.test_operations.OperationTests.test_alter_field_with_func_index)\", \"test_alter_field_with_func_unique_constraint (migrations.test_operations.OperationTests.test_alter_field_with_func_unique_constraint)\", \"Test AlterField operation with an index to ensure indexes created via\", \"Creating and then altering an FK works correctly\", \"Altering an FK to a non-FK works (#23244)\", \"Tests the AlterIndexTogether operation.\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests.test_alter_index_together_remove)\", \"test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests.test_alter_index_together_remove_with_unique_together)\", \"The managers on a model are set.\", \"Tests the AlterModelOptions operation.\", \"The AlterModelOptions operation removes keys from the dict (#23121)\", \"Tests the AlterModelTable operation.\", \"AlterModelTable should rename auto-generated M2M tables.\", \"test_alter_model_table_m2m_field (migrations.test_operations.OperationTests.test_alter_model_table_m2m_field)\", \"Tests the AlterModelTable operation if the table name is set to None.\", \"Tests the AlterModelTable operation if the table name is not changed.\", \"Tests the AlterOrderWithRespectTo operation.\", \"Tests the AlterUniqueTogether operation.\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests.test_alter_unique_together_remove)\", \"A field may be migrated from AutoField to BigAutoField.\", \"Column names that are SQL keywords shouldn't cause problems when used\", \"Creation of models with a FK to a PK with db_collation.\", \"Tests the CreateModel operation.\", \"Tests the CreateModel operation on a multi-table inheritance setup.\", \"Test the creation of a model with a ManyToMany field and the\", \"test_create_model_with_boolean_expression_in_check_constraint (migrations.test_operations.OperationTests.test_create_model_with_boolean_expression_in_check_constraint)\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests.test_create_model_with_constraint)\", \"test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests.test_create_model_with_deferred_unique_constraint)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests.test_create_model_with_duplicate_base)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests.test_create_model_with_duplicate_field_name)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests.test_create_model_with_duplicate_manager_name)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests.test_create_model_with_partial_unique_constraint)\", \"Tests the CreateModel operation directly followed by an\", \"CreateModel ignores proxy models.\", \"CreateModel ignores unmanaged models.\", \"Tests the DeleteModel operation.\", \"test_delete_mti_model (migrations.test_operations.OperationTests.test_delete_mti_model)\", \"Tests the DeleteModel operation ignores proxy models.\", \"A model with BigAutoField can be created.\", \"test_remove_constraint (migrations.test_operations.OperationTests.test_remove_constraint)\", \"test_remove_covering_unique_constraint (migrations.test_operations.OperationTests.test_remove_covering_unique_constraint)\", \"test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests.test_remove_deferred_unique_constraint)\", \"Tests the RemoveField operation.\", \"test_remove_field_m2m (migrations.test_operations.OperationTests.test_remove_field_m2m)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests.test_remove_field_m2m_with_through)\", \"Tests the RemoveField operation on a foreign key.\", \"test_remove_func_index (migrations.test_operations.OperationTests.test_remove_func_index)\", \"test_remove_func_unique_constraint (migrations.test_operations.OperationTests.test_remove_func_unique_constraint)\", \"Test the RemoveIndex operation.\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests.test_remove_index_state_forwards)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests.test_remove_partial_unique_constraint)\", \"test_remove_unique_together_on_pk_field (migrations.test_operations.OperationTests.test_remove_unique_together_on_pk_field)\", \"test_remove_unique_together_on_unique_field (migrations.test_operations.OperationTests.test_remove_unique_together_on_unique_field)\", \"Tests the RenameField operation.\", \"test_rename_field_case (migrations.test_operations.OperationTests.test_rename_field_case)\", \"test_rename_field_index_together (migrations.test_operations.OperationTests.test_rename_field_index_together)\", \"If RenameField doesn't reload state appropriately, the AlterField\", \"test_rename_field_unique_together (migrations.test_operations.OperationTests.test_rename_field_unique_together)\", \"test_rename_field_with_db_column (migrations.test_operations.OperationTests.test_rename_field_with_db_column)\", \"test_rename_index (migrations.test_operations.OperationTests.test_rename_index)\", \"test_rename_index_arguments (migrations.test_operations.OperationTests.test_rename_index_arguments)\", \"test_rename_index_state_forwards (migrations.test_operations.OperationTests.test_rename_index_state_forwards)\", \"test_rename_index_state_forwards_unnamed_index (migrations.test_operations.OperationTests.test_rename_index_state_forwards_unnamed_index)\", \"test_rename_index_unknown_unnamed_index (migrations.test_operations.OperationTests.test_rename_index_unknown_unnamed_index)\", \"test_rename_index_unnamed_index (migrations.test_operations.OperationTests.test_rename_index_unnamed_index)\", \"RenameModel renames a many-to-many column after a RenameField.\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests.test_rename_m2m_target_model)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests.test_rename_m2m_through_model)\", \"test_rename_missing_field (migrations.test_operations.OperationTests.test_rename_missing_field)\", \"Tests the RenameModel operation.\", \"RenameModel operations shouldn't trigger the caching of rendered apps\", \"test_rename_model_with_db_table_rename_m2m (migrations.test_operations.OperationTests.test_rename_model_with_db_table_rename_m2m)\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests.test_rename_model_with_m2m)\", \"test_rename_model_with_m2m_models_in_different_apps_with_same_name (migrations.test_operations.OperationTests.test_rename_model_with_m2m_models_in_different_apps_with_same_name)\", \"Tests the RenameModel operation on model with self referential FK.\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests.test_rename_model_with_self_referential_m2m)\", \"Tests the RenameModel operation on a model which has a superclass that\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests.test_rename_referenced_field_state_forward)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests.test_repoint_field_m2m)\", \"Tests the RunPython operation\", \"Tests the RunPython operation correctly handles the \\\"atomic\\\" keyword\", \"#24098 - Tests no-op RunPython operations.\", \"#24282 - Model changes to a FK reverse side update the model\", \"Tests the RunSQL operation.\", \"test_run_sql_add_missing_semicolon_on_collect_sql (migrations.test_operations.OperationTests.test_run_sql_add_missing_semicolon_on_collect_sql)\", \"#24098 - Tests no-op RunSQL operations.\", \"#23426 - RunSQL should accept parameters.\", \"#23426 - RunSQL should fail when a list of statements with an incorrect\", \"Tests the SeparateDatabaseAndState operation.\", \"A complex SeparateDatabaseAndState operation: Multiple operations both\", \"A field may be migrated from SmallAutoField to AutoField.\", \"A field may be migrated from SmallAutoField to BigAutoField.\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.747734",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}