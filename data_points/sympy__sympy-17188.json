{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17188",
  "base_commit": "8e6095743973c20a7ad95b50f61e87d0d376494a",
  "patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -311,7 +311,9 @@ def doit(self, **hints):\n         for e, c in self.args:\n             if hints.get('deep', True):\n                 if isinstance(e, Basic):\n-                    e = e.doit(**hints)\n+                    newe = e.doit(**hints)\n+                    if newe != self:\n+                        e = newe\n                 if isinstance(c, Basic):\n                     c = c.doit(**hints)\n             newargs.append((e, c))\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_piecewise.py b/sympy/functions/elementary/tests/test_piecewise.py\n--- a/sympy/functions/elementary/tests/test_piecewise.py\n+++ b/sympy/functions/elementary/tests/test_piecewise.py\n@@ -2,7 +2,7 @@\n     adjoint, And, Basic, conjugate, diff, expand, Eq, Function, I, ITE,\n     Integral, integrate, Interval, lambdify, log, Max, Min, oo, Or, pi,\n     Piecewise, piecewise_fold, Rational, solve, symbols, transpose,\n-    cos, sin, exp, Abs, Ne, Not, Symbol, S, sqrt, Tuple, zoo,\n+    cos, sin, exp, Abs, Ne, Not, Symbol, S, sqrt, Sum, Tuple, zoo,\n     DiracDelta, Heaviside, Add, Mul, factorial, Ge, Contains, Le)\n from sympy.core.expr import unchanged\n from sympy.functions.elementary.piecewise import Undefined, ExprCondPair\n@@ -605,6 +605,9 @@ def test_doit():\n     p2 = Piecewise((x, x < 1), (Integral(2 * x), -1 <= x), (x, 3 < x))\n     assert p2.doit() == p1\n     assert p2.doit(deep=False) == p2\n+    # issue 17165\n+    p1 = Sum(y**x, (x, -1, oo)).doit()\n+    assert p1.doit() == p1\n \n \n def test_piecewise_interval():\n",
  "problem_statement": "Piecewise simplification (to avoid doit growth)\n```python\r\n>>> Piecewise((1,x<1),(2,True))\r\nPiecewise((1, x < 1), (2, True))\r\n>>> p1=_\r\n>>> p2 = Piecewise((1,x<1),(p1,True))\r\nPiecewise((1, x < 1), (Piecewise((1, x < 1), (2, True)), True))\r\n>>> piecewise_fold(_)  <-- should this have been necessary?\r\nPiecewise((1, x < 1), (2, True))\r\n```\r\nPerhaps that situation should be recognized during instantiation. Or else `doit` might need to call `piecewise_fold` first to avoid repeating what is known (as was reported [on the mailing list](https://groups.google.com/forum/#!topic/sympy/-39qnrULloM)):\r\n```python\r\n>>> Sum (x**n, (n, -1, oo)).doit () \r\nPiecewise((1/(x*(1 - x)), Abs(x) < 1), (Sum(x**n, (n, -1, oo)), True))\r\n>>> _.doit()\r\nPiecewise((1/(x*(1 - x)), Abs(x) < 1), (Piecewise((1/(x*(1 - x)), Abs(x) < 1), (Sum(x**n, (n, -1, oo)), True)), True))\r\n```\n",
  "hints_text": "",
  "created_at": "2019-07-13T17:53:25Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_doit\"]",
  "PASS_TO_PASS": "[\"test_piecewise1\", \"test_piecewise_free_symbols\", \"test_piecewise_integrate1\", \"test_piecewise_integrate1b\", \"test_piecewise_integrate2\", \"test_meijer_bypass\", \"test_piecewise_integrate3_inequality_conditions\", \"test_piecewise_integrate5_independent_conditions\", \"test_piecewise_simplify\", \"test_piecewise_solve\", \"test_piecewise_fold\", \"test_piecewise_fold_piecewise_in_cond\", \"test_piecewise_fold_piecewise_in_cond_2\", \"test_piecewise_fold_expand\", \"test_piecewise_duplicate\", \"test_piecewise_interval\", \"test_piecewise_collapse\", \"test_piecewise_lambdify\", \"test_piecewise_series\", \"test_piecewise_as_leading_term\", \"test_piecewise_complex\", \"test_conjugate_transpose\", \"test_piecewise_evaluate\", \"test_as_expr_set_pairs\", \"test_S_srepr_is_identity\", \"test_issue_12587\", \"test_issue_11045\", \"test_holes\", \"test_issue_11922\", \"test_issue_5227\", \"test_issue_10137\", \"test_stackoverflow_43852159\", \"test_issue_12557\", \"test_issue_6900\", \"test_issue_10122\", \"test_issue_4313\", \"test__intervals\", \"test_containment\", \"test_piecewise_with_DiracDelta\", \"test_issue_10258\", \"test_issue_10087\", \"test_issue_8919\", \"test_unevaluated_integrals\", \"test_conditions_as_alternate_booleans\", \"test_Piecewise_rewrite_as_ITE\", \"test_issue_14052\", \"test_issue_14240\", \"test_issue_14787\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.114063",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}