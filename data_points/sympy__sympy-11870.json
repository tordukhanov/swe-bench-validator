{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-11870",
  "base_commit": "5c2e1f96a7ff562d4a778f4ca9ffc9c81557197e",
  "patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -16,6 +16,8 @@\n from sympy.sets.sets import FiniteSet\n from sympy.utilities.iterables import numbered_symbols\n from sympy.core.compatibility import range\n+from sympy.core.relational import Ne\n+from sympy.functions.elementary.piecewise import Piecewise\n \n ###############################################################################\n ########################## TRIGONOMETRIC FUNCTIONS ############################\n@@ -400,6 +402,9 @@ def _eval_rewrite_as_csc(self, arg):\n     def _eval_rewrite_as_sec(self, arg):\n         return 1 / sec(arg - S.Pi / 2, evaluate=False)\n \n+    def _eval_rewrite_as_sinc(self, arg):\n+        return arg*sinc(arg)\n+\n     def _eval_conjugate(self):\n         return self.func(self.args[0].conjugate())\n \n@@ -1789,7 +1794,7 @@ def _eval_rewrite_as_jn(self, arg):\n         return jn(0, arg)\n \n     def _eval_rewrite_as_sin(self, arg):\n-        return sin(arg) / arg\n+        return Piecewise((sin(arg)/arg, Ne(arg, 0)), (1, True))\n \n \n ###############################################################################\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_trigonometric.py b/sympy/functions/elementary/tests/test_trigonometric.py\n--- a/sympy/functions/elementary/tests/test_trigonometric.py\n+++ b/sympy/functions/elementary/tests/test_trigonometric.py\n@@ -6,6 +6,8 @@\n         AccumBounds)\n from sympy.core.compatibility import range\n from sympy.utilities.pytest import XFAIL, slow, raises\n+from sympy.core.relational import Ne, Eq\n+from sympy.functions.elementary.piecewise import Piecewise\n \n x, y, z = symbols('x y z')\n r = Symbol('r', real=True)\n@@ -704,7 +706,7 @@ def test_sinc():\n     assert sinc(x).series() == 1 - x**2/6 + x**4/120 + O(x**6)\n \n     assert sinc(x).rewrite(jn) == jn(0, x)\n-    assert sinc(x).rewrite(sin) == sin(x) / x\n+    assert sinc(x).rewrite(sin) == Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n \n \n def test_asin():\n@@ -1507,6 +1509,14 @@ def test_trig_period():\n     assert tan(3*x).period(y) == S.Zero\n     raises(NotImplementedError, lambda: sin(x**2).period(x))\n \n+\n def test_issue_7171():\n     assert sin(x).rewrite(sqrt) == sin(x)\n     assert sin(x).rewrite(pow) == sin(x)\n+\n+\n+def test_issue_11864():\n+    w, k = symbols('w, k', real=True)\n+    F = Piecewise((1, Eq(2*pi*k, 0)), (sin(pi*k)/(pi*k), True))\n+    soln = Piecewise((1, Eq(2*pi*k, 0)), (sinc(pi*k), True))\n+    assert F.rewrite(sinc) == soln\n",
  "problem_statement": "simplifying exponential -> trig identities\n```\r\nf = 1 / 2 * (-I*exp(I*k) + I*exp(-I*k))\r\ntrigsimp(f)\r\n```\r\n\r\nIdeally, this would yield `sin(k)`. Is there a way to do this?\r\n\r\nAs a corollary, it would be awesome if \r\n\r\n```\r\nf = 1 / 2 / k* (-I*exp(I*k) + I*exp(-I*k))\r\ntrigsimp(f)\r\n```\r\n\r\ncould yield `sinc(k)`. Thank you for your consideration!\n",
  "hints_text": "rewrite can be used:\n\n```\n>>> f = S(1) / 2 * (-I*exp(I*k) + I*exp(-I*k))\n>>> f.rewrite(sin).simplify()\nsin(k)\n```\n\nThank you for that suggestion!\n\n> On Nov 17, 2016, at 01:06, Kalevi Suominen notifications@github.com wrote:\n> \n> rewrite can be used:\n> \n> > > > f = S(1) / 2 \\* (-I_exp(I_k) + I_exp(-I_k))\n> > > > f.rewrite(sin).simplify()\n> > > > sin(k)\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n\nToo bad this doesn't work as expected:\n\n```\nω = sym.symbols('ω', real=True)\nk = sym.symbols('k', real=True)\nf = 1 / 2 / π * sym.exp(sym.I * ω * k)\nF = sym.integrate(f, (ω, -π, π))\nF.rewrite(sym.sinc).simplify()\n```\n\nIt does not produce the desired sinc function in the equation.\n\nIt seems that rewrite for sinc has not been implemented.\n",
  "created_at": "2016-11-17T21:36:03Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_sinc\"]",
  "PASS_TO_PASS": "[\"test_sin\", \"test_sin_cos\", \"test_sin_series\", \"test_sin_rewrite\", \"test_sin_expansion\", \"test_sin_AccumBounds\", \"test_trig_symmetry\", \"test_cos\", \"test_issue_6190\", \"test_cos_series\", \"test_cos_rewrite\", \"test_cos_expansion\", \"test_cos_AccumBounds\", \"test_tan\", \"test_tan_series\", \"test_tan_rewrite\", \"test_tan_subs\", \"test_tan_expansion\", \"test_tan_AccumBounds\", \"test_cot\", \"test_cot_series\", \"test_cot_rewrite\", \"test_cot_subs\", \"test_cot_expansion\", \"test_cot_AccumBounds\", \"test_asin\", \"test_asin_series\", \"test_asin_rewrite\", \"test_acos\", \"test_acos_series\", \"test_acos_rewrite\", \"test_atan\", \"test_atan_rewrite\", \"test_atan2\", \"test_acot\", \"test_acot_rewrite\", \"test_attributes\", \"test_sincos_rewrite\", \"test_evenodd_rewrite\", \"test_issue_4547\", \"test_as_leading_term_issue_5272\", \"test_leading_terms\", \"test_atan2_expansion\", \"test_aseries\", \"test_issue_4420\", \"test_inverses\", \"test_real_imag\", \"test_sec\", \"test_sec_rewrite\", \"test_csc\", \"test_asec\", \"test_asec_is_real\", \"test_acsc\", \"test_csc_rewrite\", \"test_issue_8653\", \"test_issue_9157\", \"test_trig_period\", \"test_issue_7171\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.074167",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}