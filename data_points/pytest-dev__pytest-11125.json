{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-11125",
  "base_commit": "797b924fc44189d0b9c2ad905410f0bd89461ab7",
  "patch": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -527,9 +527,12 @@ def pytest_configure(self, config: \"Config\") -> None:\n     #\n     def _set_initial_conftests(\n         self,\n-        namespace: argparse.Namespace,\n+        args: Sequence[Union[str, Path]],\n+        pyargs: bool,\n+        noconftest: bool,\n         rootpath: Path,\n-        testpaths_ini: Sequence[str],\n+        confcutdir: Optional[Path],\n+        importmode: Union[ImportMode, str],\n     ) -> None:\n         \"\"\"Load initial conftest files given a preparsed \"namespace\".\n \n@@ -539,17 +542,12 @@ def _set_initial_conftests(\n         common options will not confuse our logic here.\n         \"\"\"\n         current = Path.cwd()\n-        self._confcutdir = (\n-            absolutepath(current / namespace.confcutdir)\n-            if namespace.confcutdir\n-            else None\n-        )\n-        self._noconftest = namespace.noconftest\n-        self._using_pyargs = namespace.pyargs\n-        testpaths = namespace.file_or_dir + testpaths_ini\n+        self._confcutdir = absolutepath(current / confcutdir) if confcutdir else None\n+        self._noconftest = noconftest\n+        self._using_pyargs = pyargs\n         foundanchor = False\n-        for testpath in testpaths:\n-            path = str(testpath)\n+        for intitial_path in args:\n+            path = str(intitial_path)\n             # remove node-id syntax\n             i = path.find(\"::\")\n             if i != -1:\n@@ -563,10 +561,10 @@ def _set_initial_conftests(\n             except OSError:  # pragma: no cover\n                 anchor_exists = False\n             if anchor_exists:\n-                self._try_load_conftest(anchor, namespace.importmode, rootpath)\n+                self._try_load_conftest(anchor, importmode, rootpath)\n                 foundanchor = True\n         if not foundanchor:\n-            self._try_load_conftest(current, namespace.importmode, rootpath)\n+            self._try_load_conftest(current, importmode, rootpath)\n \n     def _is_in_confcutdir(self, path: Path) -> bool:\n         \"\"\"Whether a path is within the confcutdir.\n@@ -1140,10 +1138,25 @@ def _processopt(self, opt: \"Argument\") -> None:\n \n     @hookimpl(trylast=True)\n     def pytest_load_initial_conftests(self, early_config: \"Config\") -> None:\n+        # We haven't fully parsed the command line arguments yet, so\n+        # early_config.args it not set yet. But we need it for\n+        # discovering the initial conftests. So \"pre-run\" the logic here.\n+        # It will be done for real in `parse()`.\n+        args, args_source = early_config._decide_args(\n+            args=early_config.known_args_namespace.file_or_dir,\n+            pyargs=early_config.known_args_namespace.pyargs,\n+            testpaths=early_config.getini(\"testpaths\"),\n+            invocation_dir=early_config.invocation_params.dir,\n+            rootpath=early_config.rootpath,\n+            warn=False,\n+        )\n         self.pluginmanager._set_initial_conftests(\n-            early_config.known_args_namespace,\n+            args=args,\n+            pyargs=early_config.known_args_namespace.pyargs,\n+            noconftest=early_config.known_args_namespace.noconftest,\n             rootpath=early_config.rootpath,\n-            testpaths_ini=self.getini(\"testpaths\"),\n+            confcutdir=early_config.known_args_namespace.confcutdir,\n+            importmode=early_config.known_args_namespace.importmode,\n         )\n \n     def _initini(self, args: Sequence[str]) -> None:\n@@ -1223,6 +1236,49 @@ def _validate_args(self, args: List[str], via: str) -> List[str]:\n \n         return args\n \n+    def _decide_args(\n+        self,\n+        *,\n+        args: List[str],\n+        pyargs: List[str],\n+        testpaths: List[str],\n+        invocation_dir: Path,\n+        rootpath: Path,\n+        warn: bool,\n+    ) -> Tuple[List[str], ArgsSource]:\n+        \"\"\"Decide the args (initial paths/nodeids) to use given the relevant inputs.\n+\n+        :param warn: Whether can issue warnings.\n+        \"\"\"\n+        if args:\n+            source = Config.ArgsSource.ARGS\n+            result = args\n+        else:\n+            if invocation_dir == rootpath:\n+                source = Config.ArgsSource.TESTPATHS\n+                if pyargs:\n+                    result = testpaths\n+                else:\n+                    result = []\n+                    for path in testpaths:\n+                        result.extend(sorted(glob.iglob(path, recursive=True)))\n+                    if testpaths and not result:\n+                        if warn:\n+                            warning_text = (\n+                                \"No files were found in testpaths; \"\n+                                \"consider removing or adjusting your testpaths configuration. \"\n+                                \"Searching recursively from the current directory instead.\"\n+                            )\n+                            self.issue_config_time_warning(\n+                                PytestConfigWarning(warning_text), stacklevel=3\n+                            )\n+            else:\n+                result = []\n+            if not result:\n+                source = Config.ArgsSource.INCOVATION_DIR\n+                result = [str(invocation_dir)]\n+        return result, source\n+\n     def _preparse(self, args: List[str], addopts: bool = True) -> None:\n         if addopts:\n             env_addopts = os.environ.get(\"PYTEST_ADDOPTS\", \"\")\n@@ -1371,34 +1427,17 @@ def parse(self, args: List[str], addopts: bool = True) -> None:\n         self.hook.pytest_cmdline_preparse(config=self, args=args)\n         self._parser.after_preparse = True  # type: ignore\n         try:\n-            source = Config.ArgsSource.ARGS\n             args = self._parser.parse_setoption(\n                 args, self.option, namespace=self.option\n             )\n-            if not args:\n-                if self.invocation_params.dir == self.rootpath:\n-                    source = Config.ArgsSource.TESTPATHS\n-                    testpaths: List[str] = self.getini(\"testpaths\")\n-                    if self.known_args_namespace.pyargs:\n-                        args = testpaths\n-                    else:\n-                        args = []\n-                        for path in testpaths:\n-                            args.extend(sorted(glob.iglob(path, recursive=True)))\n-                        if testpaths and not args:\n-                            warning_text = (\n-                                \"No files were found in testpaths; \"\n-                                \"consider removing or adjusting your testpaths configuration. \"\n-                                \"Searching recursively from the current directory instead.\"\n-                            )\n-                            self.issue_config_time_warning(\n-                                PytestConfigWarning(warning_text), stacklevel=3\n-                            )\n-                if not args:\n-                    source = Config.ArgsSource.INCOVATION_DIR\n-                    args = [str(self.invocation_params.dir)]\n-            self.args = args\n-            self.args_source = source\n+            self.args, self.args_source = self._decide_args(\n+                args=args,\n+                pyargs=self.known_args_namespace.pyargs,\n+                testpaths=self.getini(\"testpaths\"),\n+                invocation_dir=self.invocation_params.dir,\n+                rootpath=self.rootpath,\n+                warn=True,\n+            )\n         except PrintHelp:\n             pass\n \n",
  "test_patch": "diff --git a/testing/test_collection.py b/testing/test_collection.py\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1264,11 +1264,18 @@ def pytest_sessionstart(session):\n         testpaths = some_path\n         \"\"\"\n     )\n+\n+    # No command line args - falls back to testpaths.\n     result = pytester.runpytest()\n+    assert result.ret == ExitCode.INTERNAL_ERROR\n     result.stdout.fnmatch_lines(\n         \"INTERNALERROR* Exception: pytest_sessionstart hook successfully run\"\n     )\n \n+    # No fallback.\n+    result = pytester.runpytest(\".\")\n+    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n+\n \n def test_large_option_breaks_initial_conftests(pytester: Pytester) -> None:\n     \"\"\"Long option values do not break initial conftests handling (#10169).\"\"\"\ndiff --git a/testing/test_conftest.py b/testing/test_conftest.py\n--- a/testing/test_conftest.py\n+++ b/testing/test_conftest.py\n@@ -1,4 +1,3 @@\n-import argparse\n import os\n import textwrap\n from pathlib import Path\n@@ -7,6 +6,8 @@\n from typing import Generator\n from typing import List\n from typing import Optional\n+from typing import Sequence\n+from typing import Union\n \n import pytest\n from _pytest.config import ExitCode\n@@ -24,18 +25,18 @@ def ConftestWithSetinitial(path) -> PytestPluginManager:\n \n \n def conftest_setinitial(\n-    conftest: PytestPluginManager, args, confcutdir: Optional[\"os.PathLike[str]\"] = None\n+    conftest: PytestPluginManager,\n+    args: Sequence[Union[str, Path]],\n+    confcutdir: Optional[Path] = None,\n ) -> None:\n-    class Namespace:\n-        def __init__(self) -> None:\n-            self.file_or_dir = args\n-            self.confcutdir = os.fspath(confcutdir) if confcutdir is not None else None\n-            self.noconftest = False\n-            self.pyargs = False\n-            self.importmode = \"prepend\"\n-\n-    namespace = cast(argparse.Namespace, Namespace())\n-    conftest._set_initial_conftests(namespace, rootpath=Path(args[0]), testpaths_ini=[])\n+    conftest._set_initial_conftests(\n+        args=args,\n+        pyargs=False,\n+        noconftest=False,\n+        rootpath=Path(args[0]),\n+        confcutdir=confcutdir,\n+        importmode=\"prepend\",\n+    )\n \n \n @pytest.mark.usefixtures(\"_sys_snapshot\")\n",
  "problem_statement": "Pytest 7.3.2 changes in behaviour regarding conftest.py and `testpaths`\nIn [cibuildwheel](https://github.com/pypa/cibuildwheel), we have two test suites - the unit tests at `/unit_test` and the integration test suite at `/test`. Both `/unit_test` and `/test` are listed in testpaths-\r\n\r\n[**pyproject.toml**](https://github.com/pypa/cibuildwheel/blob/main/pyproject.toml)\r\n```toml\r\n#...\r\n[tool.pytest.ini_options]\r\ntestpaths = [\r\n    \"test\",\r\n    \"unit_test\",\r\n]\r\n#...\r\n```\r\n\r\nWe then run either `unit_test` or `test` using `pytest unit_test`/`pytest test`.\r\nEach `unit_test`/`test` dir contains a conftest.py file, which adds some options using `parser.addoption`. One option that is common to both test suites is `--run-podman`. Before 7.3.2, this setup seemed to work, we could run both unit tests and integration tests without issue. But on 7.3.2 (perhaps since #10988?) we get the following error: \r\n\r\n\r\n```console\r\n$ pytest unit_test --run-podman\r\nTraceback (most recent call last):\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/bin/pytest\", line 8, in <module>\r\n    sys.exit(console_main())\r\n...snip...\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 1143, in pytest_load_initial_conftests\r\n    self.pluginmanager._set_initial_conftests(\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 566, in _set_initial_conftests\r\n    self._try_load_conftest(anchor, namespace.importmode, rootpath)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 583, in _try_load_conftest\r\n    self._getconftestmodules(anchor, importmode, rootpath)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 612, in _getconftestmodules\r\n    mod = self._importconftest(conftestpath, importmode, rootpath)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 660, in _importconftest\r\n    self.consider_conftest(mod)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 742, in consider_conftest\r\n    self.register(conftestmodule, name=conftestmodule.__file__)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 488, in register\r\n    ret: Optional[str] = super().register(plugin, name)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/pluggy/_manager.py\", line 115, in register\r\n    hook._maybe_apply_history(hookimpl)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/pluggy/_hooks.py\", line 300, in _maybe_apply_history\r\n    res = self._hookexec(self.name, [method], kwargs, False)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/pluggy/_manager.py\", line 80, in _hookexec\r\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/pluggy/_callers.py\", line 60, in _multicall\r\n    return outcome.get_result()\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/pluggy/_result.py\", line 60, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/pluggy/_callers.py\", line 39, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/Users/joerick/Projects/cibuildwheel/test/conftest.py\", line 10, in pytest_addoption\r\n    parser.addoption(\"--run-podman\", action=\"store_true\", default=False, help=\"run podman tests\")\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/_pytest/config/argparsing.py\", line 104, in addoption\r\n    self._anonymous.addoption(*opts, **attrs)\r\n  File \"/Users/joerick/Projects/cibuildwheel/env/lib/python3.9/site-packages/_pytest/config/argparsing.py\", line 385, in addoption\r\n    raise ValueError(\"option names %s already added\" % conflict)\r\nValueError: option names {'--run-podman'} already added\r\n```\r\n\r\nIs this an issue in our configuration, or a bug? Should we no longer use testpaths to list all the test suites?\r\n\r\n<details><summary>pip list output</summary>\r\n\r\n```\r\nPackage                        Version     Editable project location\r\n------------------------------ ----------- ------------------------------------\r\nargcomplete                    1.12.3\r\nattrs                          21.4.0\r\nbashlex                        0.16\r\nblack                          23.3.0\r\nbracex                         2.2.1\r\nbuild                          0.7.0\r\ncertifi                        2021.10.8\r\ncffi                           1.15.0\r\ncfgv                           3.3.1\r\ncharset-normalizer             2.0.12\r\ncibuildwheel                   2.10.0      /Users/joerick/Projects/cibuildwheel\r\nclick                          8.1.2\r\ncolorlog                       6.6.0\r\ncommonmark                     0.9.1\r\nDeprecated                     1.2.13\r\ndistlib                        0.3.4\r\nexceptiongroup                 1.1.1\r\nexecnet                        1.9.0\r\nfastcore                       1.4.1\r\nfilelock                       3.6.0\r\nflake8                         6.0.0\r\nghapi                          0.1.19\r\nghp-import                     2.1.0\r\nhtml2image                     2.0.1\r\nidentify                       2.4.12\r\nidna                           3.3\r\nimportlib-metadata             4.11.3\r\niniconfig                      1.1.1\r\nisort                          5.10.1\r\nJinja2                         3.1.2\r\nlivereload                     2.6.3\r\nMarkdown                       3.3.7\r\nMarkupSafe                     2.1.1\r\nmccabe                         0.7.0\r\nmergedeep                      1.3.4\r\nmkdocs                         1.3.1\r\nmkdocs-include-markdown-plugin 2.8.0\r\nmkdocs-macros-plugin           0.7.0\r\nmypy                           1.2.0\r\nmypy-extensions                1.0.0\r\nnodeenv                        1.6.0\r\nnox                            2022.1.7\r\npackaging                      23.1\r\npathspec                       0.9.0\r\npep517                         0.12.0\r\npip                            22.2.2\r\npip-tools                      6.12.2\r\nplatformdirs                   2.5.1\r\npluggy                         1.0.0\r\npre-commit                     2.17.0\r\npy                             1.11.0\r\npycodestyle                    2.10.0\r\npycparser                      2.21\r\npyflakes                       3.0.1\r\nPyGithub                       1.55\r\nPygments                       2.11.2\r\npyinstrument                   4.3.0\r\nPyJWT                          2.3.0\r\npymdown-extensions             9.3\r\nPyNaCl                         1.5.0\r\npyparsing                      3.0.7\r\npytest                         7.3.2\r\npytest-forked                  1.4.0\r\npytest-parallel                0.1.1\r\npytest-timeout                 2.1.0\r\npytest-xdist                   2.5.0\r\npython-dateutil                2.8.2\r\nPyYAML                         6.0\r\npyyaml_env_tag                 0.1\r\nrequests                       2.27.1\r\nrich                           12.0.1\r\nruff                           0.0.265\r\nsetuptools                     61.3.1\r\nsix                            1.16.0\r\ntblib                          1.7.0\r\ntermcolor                      1.1.0\r\ntoml                           0.10.2\r\ntomli                          2.0.1\r\ntomli_w                        1.0.0\r\ntornado                        6.1\r\ntypes-certifi                  2021.10.8.1\r\ntypes-click                    7.1.8\r\ntypes-Jinja2                   2.11.9\r\ntypes-MarkupSafe               1.1.10\r\ntypes-PyYAML                   6.0.5\r\ntypes-requests                 2.27.16\r\ntypes-toml                     0.10.4\r\ntypes-urllib3                  1.26.11\r\ntyping_extensions              4.1.1\r\nurllib3                        1.26.9\r\nvirtualenv                     20.14.0\r\nwatchdog                       2.1.9\r\nwheel                          0.37.1\r\nwrapt                          1.14.0\r\nzipp                           3.7.0\r\n```\r\n</details>\r\n\r\nXref https://github.com/pypa/cibuildwheel/pull/1518\n",
  "hints_text": "a recent bugfix made a hidden mistake in your conftest layout surface\r\n\r\nthe basic gist is, that with testpaths, pytest now correctly consider the conf-tests in those root test paths as possible early loaded conftests (to supply addopts & co) in turn making sure that all options are always registred\r\n\r\nas far as i understand you previously ran either one or the other parts of the testsuite, thus it was never possible that both conftests where loaded at the same time (which was a bug in pytest)\r\n\r\nnow that pytest more correctly considers all sources of options, an error pops up as previously you actually absolutely had to register in both places since pytest was not picking up all sources of options for a testsuite \r\n\r\nthe recommended fix would be to move shared options into a plugin module to list it in the pytest_plugins of the conftests\r\n\r\n\nthank you for the clarification! that does make sense, it's true that we never seemed to run both test suites together, we'd always do `pytest unit_test` or `pytest test` so the config was never perfect.\r\n\r\nI'll close this out, as it looks to me that the solution is for us to fix our config.\n`testpaths` is a fallback for when no arguments are given; if the two directories in your `testpaths` are incompatible, that means the value doesn't make sense so you should just remove your `testpaths`.\r\n\r\n---\r\n\r\nHowever, I do think there's an issue in pytest here. `testpaths` is only supposed to be a fallback for the arguments, however #10988 endowed it with further semantics, which increases the complexity and causes problems such as this one.\r\n\r\nI think that if argument paths are to be used for finding initial conftests, then we should use the `config.args` (the result of choosing between command line args, testpaths, invocation dir) rather than `testpaths` directly.\r\n\r\n@nicoddemus WDYT? (Reopening for discussion)\n> However, I do think there's an issue in pytest here. testpaths is only supposed to be a fallback for the arguments, however https://github.com/pytest-dev/pytest/pull/10988 endowed it with further semantics, which increases the complexity and causes problems such as this one.\r\n\r\nYou are right, I did not realize that at the time.\r\n\r\n>  think that if argument paths are to be used for finding initial conftests, then we should use the config.args (the result of choosing between command line args, testpaths, invocation dir) rather than testpaths directly.\r\n\r\nAt first glance seems reasonable indeed.\nAgreed this seems a fundamental change in behavior in how `testpaths` config is treated.  It's an optional fallback only used for test collection when no file paths are provided. But. it now always forces the pytest to load conftests pointed to by the root-level configured `testpaths`even when a specific file or directory of tests is provided. This breaks a paradigm where separate apps or integration tests versus unittests in a single project may have a different set of test dependencies pulled in by their `conftest`s.\r\n\r\nIs it desirable that the solution in #10988 should also treat `testpaths` only as an optional fallback value when namespace.file_or_dir is unset in ` _set_initial_conftests` [instead of always appending the value](https://github.com/pytest-dev/pytest/pull/10988/files#diff-df52f8f6a3544754cc8ebdf903594738e68a18dc9ac3c959f646cf4705a9afedR549)?\r\n\r\nWhat do we think of something like this?\r\n```diff\r\ndiff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\r\nindex 85d8830e7..fa1924ce5 100644\r\n--- a/src/_pytest/config/__init__.py\r\n+++ b/src/_pytest/config/__init__.py\r\n@@ -546,7 +546,10 @@ class PytestPluginManager(PluginManager):\r\n         )\r\n         self._noconftest = namespace.noconftest\r\n         self._using_pyargs = namespace.pyargs\r\n-        testpaths = namespace.file_or_dir + testpaths_ini\r\n+        testpaths = namespace.file_or_dir\r\n+        if not testpaths:\r\n+            # source testpaths_ini value only when command-line files absent\r\n+            testpaths = testpaths_ini\r\n         foundanchor = False\r\n         for testpath in testpaths:\r\n             path = str(testpath)\r\n```\r\n \r\n\r\nIf folks believe that new `conftest` search behavior from #10988 should be retained as-is maybe we can [document the testpaths treatment for conftest search path treatment more conspicuously in docs](https://docs.pytest.org/en/7.1.x/reference/reference.html?highlight=testpaths#confval-testpaths)\r\n\nThanks for the extra details\n\nI consider this a overreaching bugfix\n\nWe should restore part of the old behavior until a major release\n\nWe also should ensure all test path related conftests are considered for pytest configuration and addoption for consistency in a major release \nAgreed.\r\n\r\nSorry I won't be able to work on this today (likely tomorrow), so if anybody wants to contribute a fix, it would be greatly appreciated!",
  "created_at": "2023-06-20T18:36:34Z",
  "version": "7.4",
  "FAIL_TO_PASS": "[\"testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[global]\", \"testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[global]\", \"testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[global]\", \"testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[inpackage]\", \"testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[inpackage]\", \"testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[inpackage]\", \"testing/test_conftest.py::test_conftest_in_nonpkg_with_init\", \"testing/test_collection.py::test_initial_conftests_with_testpaths\", \"testing/test_conftest.py::test_doubledash_considered\", \"testing/test_conftest.py::test_issue151_load_all_conftests\", \"testing/test_conftest.py::test_conftestcutdir\", \"testing/test_conftest.py::test_conftestcutdir_inplace_considered\", \"testing/test_conftest.py::test_setinitial_conftest_subdirs[test]\", \"testing/test_conftest.py::test_setinitial_conftest_subdirs[tests]\", \"testing/test_conftest.py::test_setinitial_conftest_subdirs[whatever]\", \"testing/test_conftest.py::test_setinitial_conftest_subdirs[.dotdir]\"]",
  "PASS_TO_PASS": "[\"testing/test_collection.py::TestCollector::test_collect_versus_item\", \"testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[global]\", \"testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[global]\", \"testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[inpackage]\", \"testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[inpackage]\", \"testing/test_collection.py::TestCollector::test_check_equality\", \"testing/test_collection.py::TestCollector::test_getparent_and_accessors\", \"testing/test_collection.py::TestCollector::test_getcustomfile_roundtrip\", \"testing/test_collection.py::TestCollector::test_can_skip_class_with_test_attr\", \"testing/test_collection.py::TestCollectFS::test_ignored_certain_directories\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_custom_norecursedirs\", \"testing/test_collection.py::TestCollectFS::test_testpaths_ini\", \"testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_file\", \"testing/test_collection.py::TestPrunetraceback::test_custom_repr_failure\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_path\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_not_called_on_argument\", \"testing/test_collection.py::TestCustomConftests::test_collectignore_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_collectignoreglob_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_pytest_fs_collect_hooks_are_seen\", \"testing/test_collection.py::TestCustomConftests::test_pytest_collect_file_from_sister_dir\", \"testing/test_collection.py::TestSession::test_collect_topdir\", \"testing/test_collection.py::TestSession::test_collect_protocol_single_function\", \"testing/test_collection.py::TestSession::test_collect_protocol_method\", \"testing/test_collection.py::TestSession::test_collect_custom_nodes_multi_id\", \"testing/test_collection.py::TestSession::test_collect_subdir_event_ordering\", \"testing/test_collection.py::TestSession::test_collect_two_commandline_args\", \"testing/test_collection.py::TestSession::test_serialization_byid\", \"testing/test_collection.py::TestSession::test_find_byid_without_instance_parents\", \"testing/test_collection.py::Test_getinitialnodes::test_global_file\", \"testing/test_collection.py::Test_getinitialnodes::test_pkgfile\", \"testing/test_collection.py::Test_genitems::test_check_collect_hashes\", \"testing/test_collection.py::Test_genitems::test_example_items1\", \"testing/test_collection.py::Test_genitems::test_classmethod_is_discovered\", \"testing/test_collection.py::Test_genitems::test_class_and_functions_discovery_using_glob\", \"testing/test_collection.py::test_matchnodes_two_collections_same_file\", \"testing/test_collection.py::TestNodeKeywords::test_no_under\", \"testing/test_collection.py::TestNodeKeywords::test_issue345\", \"testing/test_collection.py::TestNodeKeywords::test_keyword_matching_is_case_insensitive_by_default\", \"testing/test_collection.py::TestNodeKeywords::test_duplicates_handled_correctly\", \"testing/test_collection.py::TestNodeKeywords::test_unpacked_marks_added_to_keywords\", \"testing/test_collection.py::test_exit_on_collection_error\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_smaller_than_n_errors\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_bigger_than_n_errors\", \"testing/test_collection.py::test_continue_on_collection_errors\", \"testing/test_collection.py::test_continue_on_collection_errors_maxfail\", \"testing/test_collection.py::test_fixture_scope_sibling_conftests\", \"testing/test_collection.py::test_collect_init_tests\", \"testing/test_collection.py::test_collect_invalid_signature_message\", \"testing/test_collection.py::test_collect_handles_raising_on_dunder_class\", \"testing/test_collection.py::test_collect_with_chdir_during_import\", \"testing/test_collection.py::test_large_option_breaks_initial_conftests\", \"testing/test_collection.py::test_collect_symlink_file_arg\", \"testing/test_collection.py::test_collect_symlink_out_of_tree\", \"testing/test_collection.py::test_collectignore_via_conftest\", \"testing/test_collection.py::test_collect_pkg_init_and_file_in_args\", \"testing/test_collection.py::test_collect_pkg_init_only\", \"testing/test_collection.py::test_collect_sub_with_symlinks[True]\", \"testing/test_collection.py::test_collect_sub_with_symlinks[False]\", \"testing/test_collection.py::test_collector_respects_tbstyle\", \"testing/test_collection.py::test_does_not_eagerly_collect_packages\", \"testing/test_collection.py::test_does_not_put_src_on_path\", \"testing/test_collection.py::test_fscollector_from_parent\", \"testing/test_collection.py::test_class_from_parent\", \"testing/test_collection.py::TestImportModeImportlib::test_collect_duplicate_names\", \"testing/test_collection.py::TestImportModeImportlib::test_conftest\", \"testing/test_collection.py::TestImportModeImportlib::test_modules_importable_as_side_effect\", \"testing/test_collection.py::TestImportModeImportlib::test_modules_not_importable_as_side_effect\", \"testing/test_collection.py::TestImportModeImportlib::test_using_python_path\", \"testing/test_collection.py::test_does_not_crash_on_error_from_decorated_function\", \"testing/test_collection.py::test_does_not_crash_on_recursive_symlink\", \"testing/test_conftest.py::test_conftest_global_import\", \"testing/test_conftest.py::test_conftest_confcutdir\", \"testing/test_conftest.py::test_installed_conftest_is_picked_up\", \"testing/test_conftest.py::test_conftest_symlink\", \"testing/test_conftest.py::test_conftest_symlink_files\", \"testing/test_conftest.py::test_conftest_uppercase\", \"testing/test_conftest.py::test_no_conftest\", \"testing/test_conftest.py::test_conftest_existing_junitxml\", \"testing/test_conftest.py::test_conftest_import_order\", \"testing/test_conftest.py::test_fixture_dependency\", \"testing/test_conftest.py::test_conftest_found_with_double_dash\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-..-3]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-..-3]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../..-3]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../..-3]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package-3]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-.-3]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-..-3]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-..-3]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/swc-1]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./swc-1]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-.-1]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../swc-1]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/snc-1]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./snc-1]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../snc-1]\", \"testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-.-1]\", \"testing/test_conftest.py::test_search_conftest_up_to_inifile[.-2-0]\", \"testing/test_conftest.py::test_search_conftest_up_to_inifile[src-1-1]\", \"testing/test_conftest.py::test_search_conftest_up_to_inifile[None-1-1]\", \"testing/test_conftest.py::test_issue1073_conftest_special_objects\", \"testing/test_conftest.py::test_conftest_exception_handling\", \"testing/test_conftest.py::test_hook_proxy\", \"testing/test_conftest.py::test_required_option_help\", \"testing/test_collection.py::test_collect_pyargs_with_testpaths\"]",
  "environment_setup_commit": "797b924fc44189d0b9c2ad905410f0bd89461ab7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.924413",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}