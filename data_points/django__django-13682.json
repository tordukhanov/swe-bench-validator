{
  "repo": "django/django",
  "instance_id": "django__django-13682",
  "base_commit": "fcd44b889f36c4be87910745614a0a4c88d7a3d8",
  "patch": "diff --git a/django/urls/conf.py b/django/urls/conf.py\n--- a/django/urls/conf.py\n+++ b/django/urls/conf.py\n@@ -55,6 +55,8 @@ def include(arg, namespace=None):\n \n \n def _path(route, view, kwargs=None, name=None, Pattern=None):\n+    from django.views import View\n+\n     if isinstance(view, (list, tuple)):\n         # For include(...) processing.\n         pattern = Pattern(route, is_endpoint=False)\n@@ -69,6 +71,12 @@ def _path(route, view, kwargs=None, name=None, Pattern=None):\n     elif callable(view):\n         pattern = Pattern(route, name=name, is_endpoint=True)\n         return URLPattern(pattern, view, kwargs, name)\n+    elif isinstance(view, View):\n+        view_cls_name = view.__class__.__name__\n+        raise TypeError(\n+            f'view must be a callable, pass {view_cls_name}.as_view(), not '\n+            f'{view_cls_name}().'\n+        )\n     else:\n         raise TypeError('view must be a callable or a list/tuple in the case of include().')\n \ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -345,6 +345,7 @@ def __repr__(self):\n     def check(self):\n         warnings = self._check_pattern_name()\n         warnings.extend(self.pattern.check())\n+        warnings.extend(self._check_callback())\n         return warnings\n \n     def _check_pattern_name(self):\n@@ -361,6 +362,22 @@ def _check_pattern_name(self):\n         else:\n             return []\n \n+    def _check_callback(self):\n+        from django.views import View\n+\n+        view = self.callback\n+        if inspect.isclass(view) and issubclass(view, View):\n+            return [Error(\n+                'Your URL pattern %s has an invalid view, pass %s.as_view() '\n+                'instead of %s.' % (\n+                    self.pattern.describe(),\n+                    view.__name__,\n+                    view.__name__,\n+                ),\n+                id='urls.E009',\n+            )]\n+        return []\n+\n     def resolve(self, path):\n         match = self.pattern.match(path)\n         if match:\n",
  "test_patch": "diff --git a/tests/check_framework/test_urls.py b/tests/check_framework/test_urls.py\n--- a/tests/check_framework/test_urls.py\n+++ b/tests/check_framework/test_urls.py\n@@ -134,6 +134,16 @@ def test_check_unique_namespaces(self):\n         result = check_url_namespaces_unique(None)\n         self.assertEqual(result, [])\n \n+    @override_settings(ROOT_URLCONF='check_framework.urls.cbv_as_view')\n+    def test_check_view_not_class(self):\n+        self.assertEqual(check_url_config(None), [\n+            Error(\n+                \"Your URL pattern 'missing_as_view' has an invalid view, pass \"\n+                \"EmptyCBV.as_view() instead of EmptyCBV.\",\n+                id='urls.E009',\n+            ),\n+        ])\n+\n \n class UpdatedToPathTests(SimpleTestCase):\n \ndiff --git a/tests/check_framework/urls/cbv_as_view.py b/tests/check_framework/urls/cbv_as_view.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/check_framework/urls/cbv_as_view.py\n@@ -0,0 +1,19 @@\n+from django.http import HttpResponse\n+from django.urls import path\n+from django.views import View\n+\n+\n+class EmptyCBV(View):\n+    pass\n+\n+\n+class EmptyCallableView:\n+    def __call__(self, request, *args, **kwargs):\n+        return HttpResponse()\n+\n+\n+urlpatterns = [\n+    path('missing_as_view', EmptyCBV),\n+    path('has_as_view', EmptyCBV.as_view()),\n+    path('callable_class', EmptyCallableView()),\n+]\ndiff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -5,6 +5,7 @@\n from django.test import SimpleTestCase\n from django.test.utils import override_settings\n from django.urls import NoReverseMatch, Resolver404, path, resolve, reverse\n+from django.views import View\n \n from .converters import DynamicConverter\n from .views import empty_view\n@@ -141,6 +142,19 @@ def test_invalid_converter(self):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             path('foo/<nonexistent:var>/', empty_view)\n \n+    def test_invalid_view(self):\n+        msg = 'view must be a callable or a list/tuple in the case of include().'\n+        with self.assertRaisesMessage(TypeError, msg):\n+            path('articles/', 'invalid_view')\n+\n+    def test_invalid_view_instance(self):\n+        class EmptyCBV(View):\n+            pass\n+\n+        msg = 'view must be a callable, pass EmptyCBV.as_view(), not EmptyCBV().'\n+        with self.assertRaisesMessage(TypeError, msg):\n+            path('foo', EmptyCBV())\n+\n     def test_whitespace_in_route(self):\n         msg = (\n             \"URL route 'space/<int:num>/extra/<str:%stest>' cannot contain \"\n",
  "problem_statement": "Improve error messages from forgetting to call .as_view() on a CBV\nDescription\n\t \n\t\t(last modified by Angus Holder)\n\t \nWe can detect early-on that the user has forgotten to call .as_view() on their CBV when passing it into path(). For:\nurlpatterns = [\n\tpath('home', HomeView)\n]\nThe error currently happens only when you first load the route (rather than when constructing the routes), and looks like \nInternal Server Error: /\nTraceback (most recent call last):\n File \"C:\\Users\\Angus\\.virtualenvs\\django-WBTbdxDv\\lib\\site-packages\\django\\core\\handlers\\exception.py\", line 47, in inner\n\tresponse = get_response(request)\n File \"C:\\Users\\Angus\\.virtualenvs\\django-WBTbdxDv\\lib\\site-packages\\django\\core\\handlers\\base.py\", line 179, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\nTypeError: __init__() takes 1 positional argument but 2 were given\nWhich is especially hard to work out given that the traceback doesn't even include any of the user's own code, and this is an error that's easy for beginners to run into when first using CBVs.\nMy PR changes it to fail early, inside the call to django.urls.path(), with a clear error:\nURL route 'foo' should pass in 'EmptyCBView.as_view()' instead of 'EmptyCBView'\nPull request: â€‹https://github.com/django/django/pull/13682\n",
  "hints_text": "I agree with the motivation here. As per comments on the PR, I think we need to leverage the System check framework for this, rather than raising runtime errors, but other than that +1.\nWould it be worthwhile to change the error message for if the name keyword argument is mistakenly passed as a positional argument? Currently the message is: ValueError: dictionary update sequence element #0 has length 1; 2 is required\nAuthor appears caught up on feedback.",
  "created_at": "2020-11-14T17:37:01Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_invalid_view_instance (urlpatterns.tests.SimplifiedURLTests)\", \"test_check_view_not_class (check_framework.test_urls.CheckUrlConfigTests)\"]",
  "PASS_TO_PASS": "[\"test_allows_non_ascii_but_valid_identifiers (urlpatterns.tests.ParameterRestrictionTests)\", \"test_integer_parameter_name_causes_exception (urlpatterns.tests.ParameterRestrictionTests)\", \"test_non_identifier_parameter_name_causes_exception (urlpatterns.tests.ParameterRestrictionTests)\", \"test_resolve_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_resolve_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_reverse_type_error_propagates (urlpatterns.tests.ConversionExceptionTests)\", \"test_reverse_value_error_means_no_match (urlpatterns.tests.ConversionExceptionTests)\", \"test_matching_urls (urlpatterns.tests.ConverterTests)\", \"test_nonmatching_urls (urlpatterns.tests.ConverterTests)\", \"test_empty_string_no_errors (check_framework.test_urls.CheckURLSettingsTests)\", \"test_media_url_no_slash (check_framework.test_urls.CheckURLSettingsTests)\", \"test_slash_no_errors (check_framework.test_urls.CheckURLSettingsTests)\", \"test_static_url_double_slash_allowed (check_framework.test_urls.CheckURLSettingsTests)\", \"test_static_url_no_slash (check_framework.test_urls.CheckURLSettingsTests)\", \"test_matching_urls_same_name (urlpatterns.tests.SameNameTests)\", \"test_beginning_with_caret (check_framework.test_urls.UpdatedToPathTests)\", \"test_contains_re_named_group (check_framework.test_urls.UpdatedToPathTests)\", \"test_ending_with_dollar (check_framework.test_urls.UpdatedToPathTests)\", \"test_bad_class_based_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_bad_function_based_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_bad_handlers_invalid_path (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_good_class_based_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_good_function_based_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_converter_resolve (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse (urlpatterns.tests.SimplifiedURLTests)\", \"test_converter_reverse_with_second_layer_instance_namespace (urlpatterns.tests.SimplifiedURLTests)\", \"test_invalid_converter (urlpatterns.tests.SimplifiedURLTests)\", \"test_invalid_view (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_matchable (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_inclusion_is_reversible (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_double_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_empty_string_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_inclusion (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_multiple_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_with_typed_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_lookup_without_parameters (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_with_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_path_reverse_without_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path_with_missing_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_re_path_with_optional_parameter (urlpatterns.tests.SimplifiedURLTests)\", \"test_two_variable_at_start_of_path_pattern (urlpatterns.tests.SimplifiedURLTests)\", \"test_whitespace_in_route (urlpatterns.tests.SimplifiedURLTests)\", \"test_beginning_with_slash (check_framework.test_urls.CheckUrlConfigTests)\", \"test_beginning_with_slash_append_slash (check_framework.test_urls.CheckUrlConfigTests)\", \"test_check_non_unique_namespaces (check_framework.test_urls.CheckUrlConfigTests)\", \"test_check_resolver_recursive (check_framework.test_urls.CheckUrlConfigTests)\", \"test_check_unique_namespaces (check_framework.test_urls.CheckUrlConfigTests)\", \"test_contains_included_tuple (check_framework.test_urls.CheckUrlConfigTests)\", \"test_contains_tuple_not_url_instance (check_framework.test_urls.CheckUrlConfigTests)\", \"test_get_warning_for_invalid_pattern_other (check_framework.test_urls.CheckUrlConfigTests)\", \"test_get_warning_for_invalid_pattern_string (check_framework.test_urls.CheckUrlConfigTests)\", \"test_get_warning_for_invalid_pattern_tuple (check_framework.test_urls.CheckUrlConfigTests)\", \"test_include_with_dollar (check_framework.test_urls.CheckUrlConfigTests)\", \"test_name_with_colon (check_framework.test_urls.CheckUrlConfigTests)\", \"test_no_root_urlconf_in_settings (check_framework.test_urls.CheckUrlConfigTests)\", \"test_no_warnings (check_framework.test_urls.CheckUrlConfigTests)\", \"test_no_warnings_i18n (check_framework.test_urls.CheckUrlConfigTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.666569",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}