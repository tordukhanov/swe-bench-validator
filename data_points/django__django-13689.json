{
  "repo": "django/django",
  "instance_id": "django__django-13689",
  "base_commit": "ead37dfb580136cc27dbd487a1f1ad90c9235d15",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -915,9 +915,13 @@ def get_source_expressions(self):\n         return [self.expression]\n \n     def get_group_by_cols(self, alias=None):\n-        expression = self.expression.copy()\n-        expression.output_field = self.output_field\n-        return expression.get_group_by_cols(alias=alias)\n+        if isinstance(self.expression, Expression):\n+            expression = self.expression.copy()\n+            expression.output_field = self.output_field\n+            return expression.get_group_by_cols(alias=alias)\n+        # For non-expressions e.g. an SQL WHERE clause, the entire\n+        # `expression` must be included in the GROUP BY clause.\n+        return super().get_group_by_cols()\n \n     def as_sql(self, compiler, connection):\n         return compiler.compile(self.expression)\n",
  "test_patch": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -195,6 +195,18 @@ def test_q_expression_annotation_with_aggregation(self):\n         self.assertEqual(book.isnull_pubdate, False)\n         self.assertEqual(book.rating_count, 1)\n \n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_grouping_by_q_expression_annotation(self):\n+        authors = Author.objects.annotate(\n+            under_40=ExpressionWrapper(Q(age__lt=40), output_field=BooleanField()),\n+        ).values('under_40').annotate(\n+            count_id=Count('id'),\n+        ).values('under_40', 'count_id')\n+        self.assertCountEqual(authors, [\n+            {'under_40': False, 'count_id': 3},\n+            {'under_40': True, 'count_id': 6},\n+        ])\n+\n     def test_aggregate_over_annotation(self):\n         agg = Author.objects.annotate(other_age=F('age')).aggregate(otherage_sum=Sum('other_age'))\n         other_agg = Author.objects.aggregate(age_sum=Sum('age'))\n",
  "problem_statement": "Aggregating when grouping on an ExpressionWrapper omits the expression from the group by\nDescription\n\t\nI ran into this with Postgres on Django 3.1.3, I'm not sure what other versions it exists on.\nprint(\n\tFred.objects.annotate(\n\t\tbob_id__is_null=ExpressionWrapper(\n\t\t\tQ(bob_id=None), \n\t\t\toutput_field=BooleanField()\n\t\t)\n\t).values(\n\t\t\"bob_id__is_null\"\n\t).annotate(\n\t\tid__count=Count(\"id\", distinct=True)\n\t).values(\n\t\t\"bob_id__is_null\", \n\t\t\"id__count\"\n\t).query\n)\nSELECT \n\t\"main_fred\".\"bob_id\" IS NULL AS \"bob_id__is_null\", \n\tCOUNT(DISTINCT \"main_fred\".\"id\") AS \"id__count\" \nFROM \"main_fred\"\nGROUP BY \"main_fred\".\"bob_id\"\nOn the last line there the group by has dropped the \"IS NULL\"\n",
  "hints_text": "For anyone else who ends up here you can Subquery your way out of this, although I've no idea what the performance implications of that are.\nI did some further digging and this only occurs on 3.1, it works fine on 2.0, 2.1, 2.2 and 3.0\nI think this is related to https://code.djangoproject.com/ticket/32007\nTo test this, given the implied model above, you can create 3 Fred objects, 2 with one value for bob_id and the third with a different value. When you do the select on that you should see [{\"bob_id__is_null\": False, \"id_count\": 3}] But instead you will get [{\"bob_id__is_null\": False, \"id_count\": 1}, {\"bob_id__is_null\": False, \"id_count\": 2}]\nRegression in df32fd42b84cc6dbba173201f244491b0d154a63 (backported in fdd2b01e8e12857aad2219a46a41bd9051ec8f8d). Reproduced at 4cce1d13cfe9d8e56921c5fa8c61e3034dc8e20c.",
  "created_at": "2020-11-17T22:35:05Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_grouping_by_q_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\"]",
  "PASS_TO_PASS": "[\"test_aggregate_alias (annotations.tests.AliasTests)\", \"test_alias_after_annotation (annotations.tests.AliasTests)\", \"test_alias_annotate_with_aggregation (annotations.tests.AliasTests)\", \"test_alias_annotation_expression (annotations.tests.AliasTests)\", \"test_alias_default_alias_expression (annotations.tests.AliasTests)\", \"test_basic_alias (annotations.tests.AliasTests)\", \"test_basic_alias_annotation (annotations.tests.AliasTests)\", \"test_basic_alias_f_annotation (annotations.tests.AliasTests)\", \"test_dates_alias (annotations.tests.AliasTests)\", \"test_datetimes_alias (annotations.tests.AliasTests)\", \"test_defer_only_alias (annotations.tests.AliasTests)\", \"test_filter_alias_agg_with_double_f (annotations.tests.AliasTests)\", \"test_filter_alias_with_double_f (annotations.tests.AliasTests)\", \"test_filter_alias_with_f (annotations.tests.AliasTests)\", \"test_joined_alias_annotation (annotations.tests.AliasTests)\", \"test_order_by_alias (annotations.tests.AliasTests)\", \"test_order_by_alias_aggregate (annotations.tests.AliasTests)\", \"test_overwrite_alias_with_annotation (annotations.tests.AliasTests)\", \"test_overwrite_annotation_with_alias (annotations.tests.AliasTests)\", \"test_update_with_alias (annotations.tests.AliasTests)\", \"test_values_alias (annotations.tests.AliasTests)\", \"test_aggregate_over_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_exists (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotate_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_aggregate_with_m2o (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_exists_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_filter_with_subquery (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_in_f_grouped_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_reverse_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_subquery_and_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_annotation_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_arguments_must_be_expressions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_basic_f_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_boolean_value_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_chaining_annotation_filter_with_m2m (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_column_field_ordering_with_deferred (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_annotation_commutative (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_combined_f_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_custom_functions_can_ref_other_functions (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_defer_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_empty_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_agg_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_double_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_annotation_with_f (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_filter_wrong_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_joined_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_date_interval (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mixed_type_annotation_numbers (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_mti_annotations (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_null_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_aggregate (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_order_by_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_q_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_raw_sql_with_inherited_field (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_update_with_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_annotation (annotations.tests.NonAggregateAnnotationTestCase)\", \"test_values_with_pk_annotation (annotations.tests.NonAggregateAnnotationTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.666968",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}