{
  "repo": "django/django",
  "instance_id": "django__django-13431",
  "base_commit": "01a7af09b9d61aa66f5bf345fc32cc8f90ecb62a",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -17,7 +17,7 @@\n from django.db.models import AutoField, DateField, DateTimeField, sql\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.deletion import Collector\n-from django.db.models.expressions import Case, Expression, F, Value, When\n+from django.db.models.expressions import Case, Expression, F, Ref, Value, When\n from django.db.models.functions import Cast, Trunc\n from django.db.models.query_utils import FilteredRelation, Q\n from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE\n@@ -386,8 +386,16 @@ def aggregate(self, *args, **kwargs):\n         query = self.query.chain()\n         for (alias, aggregate_expr) in kwargs.items():\n             query.add_annotation(aggregate_expr, alias, is_summary=True)\n-            if not query.annotations[alias].contains_aggregate:\n+            annotation = query.annotations[alias]\n+            if not annotation.contains_aggregate:\n                 raise TypeError(\"%s is not an aggregate expression\" % alias)\n+            for expr in annotation.get_source_expressions():\n+                if expr.contains_aggregate and isinstance(expr, Ref) and expr.refs in kwargs:\n+                    name = expr.refs\n+                    raise exceptions.FieldError(\n+                        \"Cannot compute %s('%s'): '%s' is an aggregate\"\n+                        % (annotation.name, name, name)\n+                    )\n         return query.get_aggregation(self.db, kwargs)\n \n     def count(self):\n",
  "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1004,6 +1004,16 @@ def test_annotate_over_annotate(self):\n \n         self.assertEqual(author.sum_age, other_author.sum_age)\n \n+    def test_aggregate_over_aggregate(self):\n+        msg = \"Cannot compute Avg('age'): 'age' is an aggregate\"\n+        with self.assertRaisesMessage(FieldError, msg):\n+            Author.objects.annotate(\n+                age_alias=F('age'),\n+            ).aggregate(\n+                age=Sum(F('age')),\n+                avg_age=Avg(F('age')),\n+            )\n+\n     def test_annotated_aggregate_over_annotated_aggregate(self):\n         with self.assertRaisesMessage(FieldError, \"Cannot compute Sum('id__max'): 'id__max' is an aggregate\"):\n             Book.objects.annotate(Max('id')).annotate(Sum('id__max'))\n",
  "problem_statement": "QuerySet.aggregate() mixes annotated fields names.\nDescription\n\t\nI have the following model (simplified for opening the issue).\nclass T(models.Model):\n id = models.AutoField(primary=True)\n foo = models.IntegerField()\nand I perform the following query on MySQL (simplified for opening the issue)\nT.objects.annotate(anon=F('foo')).aggregate(foo=Max(F('anon')), sum=Sum(F('foo')))\nthis produces the following SQL query\nSELECT MAX(`anon`), SUM(`foo`) FROM (SELECT `table`.`foo` AS `anon` FROM `foo`) subquery\nthat causes the following exception\ndjango.db.utils.OperationalError: (1054, \"Unknown column 'foo' in 'field list'\")\nI would expect django to generate\nSELECT MAX(`anon`), SUM(`anon`) FROM (SELECT `table`.`foo` AS `anon` FROM `table`) subquery\n",
  "hints_text": "I would expect django to generate SELECT MAX(`anon`), SUM(`anon`) FROM (SELECT `table`.`foo` AS `anon` FROM `table`) subquery I would rather expect: SELECT MAX(`anon`), SUM(`foo`) FROM (SELECT `table`.`foo`, `table`.`foo` AS `anon` FROM `table`) subquery Nevertheless we should raise a descriptive error or add a column to the subquery. Is there any reason to not use Sum(F('anon'))?\nHi, I tried to tackle this ticket by fixing the actual bug. The ​PR It's surely not that an important bug and one could just use a different alias for the aggregation, but I wanted to get to the bottom. Aggregations are actually also registering annotations, meaning that the annotation alias is overridden, and the subquery is not aware of the field anymore. I thought of three ways to solve this: raise an error when an aggregation is overriding the alias of an annotation (basically, forbid the buggy case) -- easy to implement, but I think it's a pity to forbid something that could work. implement the smallest change that will allow this case -- it's the approach implemented in the linked patch. handle differently aggregation annotations and simple annotations -- a large change, which would require quite a rewrite of parts of the aggregation logic and would be a lot of work for such a small edge case I guess. I hope it makes sense to you and I'm open to changing to any other and better approach :) David\nDuplicate of #31679\nJacob, it's really similar but it's not a duplicate, IMO.\nYeah I can see that better now, sorry. I also checked out the patch and see that it doesn't address #31679 as far as I can tell, so better to have two tickets.\nI would expect that the first kwarg (e.g. age_alias=Sum(F('age')) overrides the previous annotation (e.g. age_alias=F('age')) and a FieldError \"Cannot compute Avg('age_alias'): 'age_alias' is an aggregate\" is raised, like with annotations: Author.objects.annotate(age_alias=F('age')).annotate(age_alias=Sum(F('age'))).annotate(avg_age=Avg(F('age_alias'))), Author.objects.annotate(age_alias=F('age')).annotate(age_alias=Sum(F('age')), avg_age=Avg(F('age_alias'))). IMO it's not obvious how such querysets should behave. I think we should raise an error if an aggregate() overrides and refs to the same alias.\nTo sum up, I think supporting this edge case isn't worth adding extra complexity, we should raise an error. You can always use different aliases.\nHi, thanks for taking the time diving into the issue. I agree that the expected behaviour is not obvious. My reflection why it could be supported was that: it is possible since the aliases are used in two different queries (the outer and the inner) in the case of an aggregation You can always use different aliases. it's true, but with a system that automatically generates QuerySets it might not be easy to \"just use different aliases\". However, let's go with an error, I agree that it adds complexity for not a lot of added value. There is a fair chance that the first patch missed edge cases. I pushed a new patch: ​https://github.com/django/django/pull/13431 Happy to hear what you think about this one :)\nI think raising an explicit error at the ORM level is the right call for now. Nothing prevents us from eventually fixing this if we can align on an expected behaviour in the future but users will get a clearer error message in the mean time.",
  "created_at": "2020-09-17T15:47:07Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_aggregate_over_aggregate (aggregation.tests.AggregateTestCase)\"]",
  "PASS_TO_PASS": "[\"test_add_implementation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_alias (aggregation.tests.AggregateTestCase)\", \"test_aggregate_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregate_in_order_by (aggregation.tests.AggregateTestCase)\", \"test_aggregate_multi_join (aggregation.tests.AggregateTestCase)\", \"test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_aggregation_expressions (aggregation.tests.AggregateTestCase)\", \"test_aggregation_order_by_not_selected_annotation_values (aggregation.tests.AggregateTestCase)\", \"Subquery annotations are excluded from the GROUP BY if they are\", \"test_aggregation_subquery_annotation_exists (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_multivalued (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_related_field (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_values (aggregation.tests.AggregateTestCase)\", \"test_aggregation_subquery_annotation_values_collision (aggregation.tests.AggregateTestCase)\", \"test_annotate_basic (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer (aggregation.tests.AggregateTestCase)\", \"test_annotate_defer_select_related (aggregation.tests.AggregateTestCase)\", \"test_annotate_m2m (aggregation.tests.AggregateTestCase)\", \"test_annotate_ordering (aggregation.tests.AggregateTestCase)\", \"test_annotate_over_annotate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotate_values_list (aggregation.tests.AggregateTestCase)\", \"test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase)\", \"test_annotation (aggregation.tests.AggregateTestCase)\", \"test_annotation_expressions (aggregation.tests.AggregateTestCase)\", \"test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase)\", \"test_avg_decimal_field (aggregation.tests.AggregateTestCase)\", \"test_avg_duration_field (aggregation.tests.AggregateTestCase)\", \"test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)\", \"test_combine_different_types (aggregation.tests.AggregateTestCase)\", \"test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase)\", \"test_complex_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_count (aggregation.tests.AggregateTestCase)\", \"test_count_distinct_expression (aggregation.tests.AggregateTestCase)\", \"test_count_star (aggregation.tests.AggregateTestCase)\", \"test_dates_with_aggregation (aggregation.tests.AggregateTestCase)\", \"test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase)\", \"test_distinct_on_aggregate (aggregation.tests.AggregateTestCase)\", \"test_empty_aggregate (aggregation.tests.AggregateTestCase)\", \"test_even_more_aggregate (aggregation.tests.AggregateTestCase)\", \"test_expression_on_aggregation (aggregation.tests.AggregateTestCase)\", \"test_filter_aggregate (aggregation.tests.AggregateTestCase)\", \"test_filtering (aggregation.tests.AggregateTestCase)\", \"test_fkey_aggregate (aggregation.tests.AggregateTestCase)\", \"test_group_by_exists_annotation (aggregation.tests.AggregateTestCase)\", \"test_group_by_subquery_annotation (aggregation.tests.AggregateTestCase)\", \"test_grouped_annotation_in_group_by (aggregation.tests.AggregateTestCase)\", \"test_more_aggregation (aggregation.tests.AggregateTestCase)\", \"test_multi_arg_aggregate (aggregation.tests.AggregateTestCase)\", \"test_multiple_aggregates (aggregation.tests.AggregateTestCase)\", \"test_non_grouped_annotation_not_in_group_by (aggregation.tests.AggregateTestCase)\", \"test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase)\", \"test_nonfield_annotation (aggregation.tests.AggregateTestCase)\", \"test_order_of_precedence (aggregation.tests.AggregateTestCase)\", \"test_related_aggregate (aggregation.tests.AggregateTestCase)\", \"test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase)\", \"test_single_aggregate (aggregation.tests.AggregateTestCase)\", \"test_sum_distinct_aggregate (aggregation.tests.AggregateTestCase)\", \"test_sum_duration_field (aggregation.tests.AggregateTestCase)\", \"test_ticket11881 (aggregation.tests.AggregateTestCase)\", \"test_ticket12886 (aggregation.tests.AggregateTestCase)\", \"test_ticket17424 (aggregation.tests.AggregateTestCase)\", \"test_values_aggregation (aggregation.tests.AggregateTestCase)\", \"test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.657820",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}