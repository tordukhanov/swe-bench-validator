{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12625",
  "base_commit": "ac327c5ad66fa3d4eb607d007e3684dec872d49a",
  "patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -477,7 +477,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n     # check if the object contains several dtypes (typically a pandas\n     # DataFrame), and store them. If not, store None.\n     dtypes_orig = None\n-    if hasattr(array, \"dtypes\") and hasattr(array, \"__array__\"):\n+    if hasattr(array, \"dtypes\") and len(array.dtypes):\n         dtypes_orig = np.array(array.dtypes)\n \n     if dtype_numeric:\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_validation.py b/sklearn/utils/tests/test_validation.py\n--- a/sklearn/utils/tests/test_validation.py\n+++ b/sklearn/utils/tests/test_validation.py\n@@ -694,6 +694,14 @@ def test_suppress_validation():\n     assert_raises(ValueError, assert_all_finite, X)\n \n \n+def test_check_array_series():\n+    # regression test that check_array works on pandas Series\n+    pd = importorskip(\"pandas\")\n+    res = check_array(pd.Series([1, 2, 3]), ensure_2d=False,\n+                      warn_on_dtype=True)\n+    assert_array_equal(res, np.array([1, 2, 3]))\n+\n+\n def test_check_dataframe_warns_on_dtype():\n     # Check that warn_on_dtype also works for DataFrames.\n     # https://github.com/scikit-learn/scikit-learn/issues/10948\n",
  "problem_statement": "TypeError: \"iteration over a 0-d array\" when trying to preprocessing.scale a pandas.Series\n<!--\r\nIf your issue is a usage question, submit it here instead:\r\n- StackOverflow with the scikit-learn tag: https://stackoverflow.com/questions/tagged/scikit-learn\r\n- Mailing List: https://mail.python.org/mailman/listinfo/scikit-learn\r\nFor more information, see User Questions: http://scikit-learn.org/stable/support.html#user-questions\r\n-->\r\n\r\n<!-- Instructions For Filing a Bug: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#filing-bugs -->\r\n\r\n#### Description\r\n<!-- Example: Joblib Error thrown when calling fit on LatentDirichletAllocation with evaluate_every > 0-->\r\nWhen trying to call `preprocessing.scale` on a `pandas.Series` instance, an error is thrown with scikit-learn version 0.20.0. Version 0.19.1. works just fine. The [documentation](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.scale.html) states that the input to `preprocessing.scale` can be \"array-like\", and [`pandas.Series`](https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.Series.html) should fulfill this requirement since it is a \"one-dimensional ndarray\".\r\n\r\n#### Steps/Code to Reproduce\r\n<!--\r\nExample:\r\n```python\r\nfrom sklearn.feature_extraction.text import CountVectorizer\r\nfrom sklearn.decomposition import LatentDirichletAllocation\r\n\r\ndocs = [\"Help I have a bug\" for i in range(1000)]\r\n\r\nvectorizer = CountVectorizer(input=docs, analyzer='word')\r\nlda_features = vectorizer.fit_transform(docs)\r\n\r\nlda_model = LatentDirichletAllocation(\r\n    n_topics=10,\r\n    learning_method='online',\r\n    evaluate_every=10,\r\n    n_jobs=4,\r\n)\r\nmodel = lda_model.fit(lda_features)\r\n```\r\nIf the code is too long, feel free to put it in a public gist and link\r\nit in the issue: https://gist.github.com\r\n-->\r\n```python\r\nimport pandas as pd\r\nfrom sklearn import preprocessing\r\n\r\ns = pd.Series([1.0, 2.0, 3.0])\r\npreprocessing.scale(s)\r\n```\r\n\r\n#### Expected Results\r\n<!-- Example: No error is thrown. Please paste or describe the expected results.-->\r\nThis should be the output (as it is in version 0.19.1):\r\n```\r\n[-1.22474487,  0.        ,  1.22474487]\r\n```\r\nA workaround is replacing `preprocessing.scale(s)` with `preprocessing.scale([i for i in s])`, which also yields this output.\r\n\r\n#### Actual Results\r\n<!-- Please paste or specifically describe the actual output or traceback. -->\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-16-ef1d298414c3> in <module>\r\n      3 \r\n      4 s = pd.Series([1.0, 2.0, 3.0])\r\n----> 5 preprocessing.scale(s)\r\n\r\n~\\anaconda3\\envs\\tensorflow\\lib\\site-packages\\sklearn\\preprocessing\\data.py in scale(X, axis, with_mean, with_std, copy)\r\n    143     X = check_array(X, accept_sparse='csc', copy=copy, ensure_2d=False,\r\n    144                     warn_on_dtype=True, estimator='the scale function',\r\n--> 145                     dtype=FLOAT_DTYPES, force_all_finite='allow-nan')\r\n    146     if sparse.issparse(X):\r\n    147         if with_mean:\r\n\r\n~\\anaconda3\\envs\\tensorflow\\lib\\site-packages\\sklearn\\utils\\validation.py in check_array(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\r\n    594 \r\n    595     if (warn_on_dtype and dtypes_orig is not None and\r\n--> 596             {array.dtype} != set(dtypes_orig)):\r\n    597         # if there was at the beginning some other types than the final one\r\n    598         # (for instance in a DataFrame that can contain several dtypes) then\r\n\r\nTypeError: iteration over a 0-d array\r\n```\r\n\r\n#### Versions\r\n<!--\r\nPlease run the following snippet and paste the output below.\r\nFor scikit-learn >= 0.20:\r\nimport sklearn; sklearn.show_versions()\r\nFor scikit-learn < 0.20:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"NumPy\", numpy.__version__)\r\nimport scipy; print(\"SciPy\", scipy.__version__)\r\nimport sklearn; print(\"Scikit-Learn\", sklearn.__version__)\r\n-->\r\n```\r\nSystem\r\n------\r\n    python: 3.6.7 |Anaconda, Inc.| (default, Oct 28 2018, 19:44:12) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: C:\\Users\\...\\anaconda3\\envs\\tensorflow\\python.exe\r\n   machine: Windows-10-10.0.17134-SP0\r\n\r\nPython deps\r\n-----------\r\n       pip: 18.1\r\nsetuptools: 40.6.2\r\n   sklearn: 0.20.0\r\n     numpy: 1.15.4\r\n     scipy: 1.1.0\r\n    Cython: None\r\n    pandas: 0.23.4\r\n```\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
  "hints_text": "Minimal script to reproduce:\r\n```\r\nimport pandas as pd\r\nfrom sklearn.utils.validation import check_array\r\ncheck_array(pd.Series([1, 2, 3]), ensure_2d=False, warn_on_dtype=True)\r\n```\r\nRelated PR #10949 \nThanks for reporting. Yeah would be good to get this into 0.20.1, hrm...\nHeading to bed, seems that an easy solution will be:\r\nchange\r\n```\r\nif hasattr(array, \"dtypes\") and hasattr(array, \"__array__\"):\r\n        dtypes_orig = np.array(array.dtypes)\r\n```\r\nto something like\r\n```\r\nif hasattr(array, \"dtypes\") and hasattr(array, \"__array__\") and hasattr(array.dtypes, \"__array__\"):\r\n        dtypes_orig = np.array(array.dtypes)\r\n```",
  "created_at": "2018-11-20T16:10:31Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_validation.py::test_check_array_series\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_validation.py::test_as_float_array\", \"sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X0]\", \"sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X1]\", \"sklearn/utils/tests/test_validation.py::test_np_matrix\", \"sklearn/utils/tests/test_validation.py::test_memmap\", \"sklearn/utils/tests/test_validation.py::test_ordering\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-inf-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-allow-nan]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-inf-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-allow-nan]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-False]\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-inf-True-Input\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-inf-allow-nan-Input\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-nan-True-Input\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-nan-allow-inf-force_all_finite\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-nan-1-Input\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-inf-True-Input\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-inf-allow-nan-Input\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-nan-True-Input\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-nan-allow-inf-force_all_finite\", \"sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-nan-1-Input\", \"sklearn/utils/tests/test_validation.py::test_check_array\", \"sklearn/utils/tests/test_validation.py::test_check_array_pandas_dtype_object_conversion\", \"sklearn/utils/tests/test_validation.py::test_check_array_on_mock_dataframe\", \"sklearn/utils/tests/test_validation.py::test_check_array_dtype_stability\", \"sklearn/utils/tests/test_validation.py::test_check_array_dtype_warning\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_type_exception\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_no_exception\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[csr]\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[csc]\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[coo]\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[bsr]\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[csr]\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[csc]\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[coo]\", \"sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[bsr]\", \"sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[csr]\", \"sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[csc]\", \"sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[coo]\", \"sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[bsr]\", \"sklearn/utils/tests/test_validation.py::test_check_array_min_samples_and_features_messages\", \"sklearn/utils/tests/test_validation.py::test_check_array_complex_data_error\", \"sklearn/utils/tests/test_validation.py::test_has_fit_parameter\", \"sklearn/utils/tests/test_validation.py::test_check_symmetric\", \"sklearn/utils/tests/test_validation.py::test_check_is_fitted\", \"sklearn/utils/tests/test_validation.py::test_check_consistent_length\", \"sklearn/utils/tests/test_validation.py::test_check_dataframe_fit_attribute\", \"sklearn/utils/tests/test_validation.py::test_suppress_validation\", \"sklearn/utils/tests/test_validation.py::test_check_dataframe_warns_on_dtype\", \"sklearn/utils/tests/test_validation.py::test_check_memory\", \"sklearn/utils/tests/test_validation.py::test_check_array_memmap[True]\", \"sklearn/utils/tests/test_validation.py::test_check_array_memmap[False]\", \"sklearn/utils/tests/test_validation.py::test_check_non_negative[asarray]\", \"sklearn/utils/tests/test_validation.py::test_check_non_negative[csr_matrix]\", \"sklearn/utils/tests/test_validation.py::test_check_non_negative[csc_matrix]\", \"sklearn/utils/tests/test_validation.py::test_check_non_negative[coo_matrix]\", \"sklearn/utils/tests/test_validation.py::test_check_non_negative[lil_matrix]\", \"sklearn/utils/tests/test_validation.py::test_check_non_negative[bsr_matrix]\", \"sklearn/utils/tests/test_validation.py::test_check_non_negative[dok_matrix]\", \"sklearn/utils/tests/test_validation.py::test_check_non_negative[dia_matrix]\", \"sklearn/utils/tests/test_validation.py::test_check_X_y_informative_error\", \"sklearn/utils/tests/test_validation.py::test_retrieve_samples_from_non_standard_shape\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.965589",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}