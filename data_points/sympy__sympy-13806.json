{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13806",
  "base_commit": "84c125972ad535b2dfb245f8d311d347b45e5b8a",
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -373,6 +373,7 @@ def _print_Gradient(self, expr):\n \n     def _print_Mul(self, expr):\n         from sympy.core.power import Pow\n+        from sympy.physics.units import Quantity\n         include_parens = False\n         if _coeff_isneg(expr):\n             expr = -expr\n@@ -397,7 +398,11 @@ def convert(expr):\n                 if self.order not in ('old', 'none'):\n                     args = expr.as_ordered_factors()\n                 else:\n-                    args = expr.args\n+                    args = list(expr.args)\n+\n+                # If quantities are present append them at the back\n+                args = sorted(args, key=lambda x: isinstance(x, Quantity) or\n+                             (isinstance(x, Pow) and isinstance(x.base, Quantity)))\n \n                 for i, term in enumerate(args):\n                     term_tex = self._print(term)\n@@ -2058,6 +2063,10 @@ def _print_primeomega(self, expr, exp=None):\n                     self._print(exp))\n         return r'\\Omega\\left(%s\\right)' % self._print(expr.args[0])\n \n+    def _print_Quantity(self, expr):\n+        if expr.name.name == 'degree':\n+            return r\"^\\circ\"\n+        return r\"%s\" % expr\n \n def translate(s):\n     r'''\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1469,13 +1469,18 @@ def pretty_negative(pform, index):\n         return prettyForm.__add__(*pforms)\n \n     def _print_Mul(self, product):\n+        from sympy.physics.units import Quantity\n         a = []  # items in the numerator\n         b = []  # items that are in the denominator (if any)\n \n         if self.order not in ('old', 'none'):\n             args = product.as_ordered_factors()\n         else:\n-            args = product.args\n+            args = list(product.args)\n+\n+        # If quantities are present append them at the back\n+        args = sorted(args, key=lambda x: isinstance(x, Quantity) or\n+                     (isinstance(x, Pow) and isinstance(x.base, Quantity)))\n \n         # Gather terms for numerator/denominator\n         for item in args:\n@@ -2235,6 +2240,13 @@ def _print_primeomega(self, e):\n             pform = prettyForm(*pform.left('Omega'))\n         return pform\n \n+    def _print_Quantity(self, e):\n+        if e.name.name == 'degree':\n+            pform = self._print(u\"\\N{DEGREE SIGN}\")\n+            return pform\n+        else:\n+            return self.emptyPrinter(e)\n+\n \n def pretty(expr, **settings):\n     \"\"\"Returns a string containing the prettified form of expr.\ndiff --git a/sympy/printing/pretty/stringpict.py b/sympy/printing/pretty/stringpict.py\n--- a/sympy/printing/pretty/stringpict.py\n+++ b/sympy/printing/pretty/stringpict.py\n@@ -430,15 +430,19 @@ def __mul__(self, *others):\n         \"\"\"Make a pretty multiplication.\n         Parentheses are needed around +, - and neg.\n         \"\"\"\n+        quantity = {\n+            'degree': u\"\\N{DEGREE SIGN}\"\n+        }\n+\n         if len(others) == 0:\n             return self # We aren't actually multiplying... So nothing to do here.\n-\n         args = self\n         if args.binding > prettyForm.MUL:\n             arg = stringPict(*args.parens())\n         result = [args]\n         for arg in others:\n-            result.append(xsym('*'))\n+            if arg.picture[0] not in quantity.values():\n+                result.append(xsym('*'))\n             #add parentheses for weak binders\n             if arg.binding > prettyForm.MUL:\n                 arg = stringPict(*arg.parens())\n",
  "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -24,7 +24,7 @@\n from sympy.printing.pretty import pretty as xpretty\n from sympy.printing.pretty import pprint\n \n-from sympy.physics.units import joule\n+from sympy.physics.units import joule, degree, radian\n from sympy.tensor.array import (ImmutableDenseNDimArray, ImmutableSparseNDimArray,\n                                 MutableDenseNDimArray, MutableSparseNDimArray, tensorproduct)\n \n@@ -4701,7 +4701,7 @@ def test_pretty_sum():\n \n def test_units():\n     expr = joule\n-    ascii_str = \\\n+    ascii_str1 = \\\n \"\"\"\\\n               2\\n\\\n kilogram*meter \\n\\\n@@ -4709,7 +4709,7 @@ def test_units():\n           2    \\n\\\n     second     \\\n \"\"\"\n-    unicode_str = \\\n+    unicode_str1 = \\\n u(\"\"\"\\\n               2\\n\\\n kilogram⋅meter \\n\\\n@@ -4717,12 +4717,31 @@ def test_units():\n           2    \\n\\\n     second     \\\n \"\"\")\n+\n+    ascii_str2 = \\\n+\"\"\"\\\n+                    2\\n\\\n+3*x*y*kilogram*meter \\n\\\n+---------------------\\n\\\n+             2       \\n\\\n+       second        \\\n+\"\"\"\n+    unicode_str2 = \\\n+u(\"\"\"\\\n+                    2\\n\\\n+3⋅x⋅y⋅kilogram⋅meter \\n\\\n+─────────────────────\\n\\\n+             2       \\n\\\n+       second        \\\n+\"\"\")\n+\n     from sympy.physics.units import kg, m, s\n     assert upretty(expr) == u(\"joule\")\n     assert pretty(expr) == \"joule\"\n-    assert upretty(expr.convert_to(kg*m**2/s**2)) == unicode_str\n-    assert pretty(expr.convert_to(kg*m**2/s**2)) == ascii_str\n-\n+    assert upretty(expr.convert_to(kg*m**2/s**2)) == unicode_str1\n+    assert pretty(expr.convert_to(kg*m**2/s**2)) == ascii_str1\n+    assert upretty(3*kg*x*m**2*y/s**2) == unicode_str2\n+    assert pretty(3*kg*x*m**2*y/s**2) == ascii_str2\n \n def test_pretty_Subs():\n     f = Function('f')\n@@ -5983,6 +6002,15 @@ def test_MatrixElement_printing():\n     assert upretty(F) == ucode_str1\n \n \n+def test_degree_printing():\n+    expr1 = 90*degree\n+    assert pretty(expr1) == u'90°'\n+    expr2 = x*degree\n+    assert pretty(expr2) == u'x°'\n+    expr3 = cos(x*degree + 90*degree)\n+    assert pretty(expr3) == u'cos(x° + 90°)'\n+\n+\n def test_vector_expr_pretty_printing():\n     A = CoordSys3D('A')\n \ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -32,6 +32,7 @@\n from sympy.logic import Implies\n from sympy.logic.boolalg import And, Or, Xor\n from sympy.physics.quantum import Commutator, Operator\n+from sympy.physics.units import degree, radian, kg, meter\n from sympy.core.trace import Tr\n from sympy.core.compatibility import range\n from sympy.combinatorics.permutations import Cycle, Permutation\n@@ -1684,3 +1685,17 @@ def test_WedgeProduct_printing():\n     from sympy.diffgeom import WedgeProduct\n     wp = WedgeProduct(R2.dx, R2.dy)\n     assert latex(wp) == r\"\\mathrm{d}x \\wedge \\mathrm{d}y\"\n+\n+\n+def test_units():\n+    expr = 2*kg*x*meter**2\n+    assert latex(expr, mul_symbol='dot') == r'2 \\cdot x \\cdot kilogram \\cdot meter^{2}'\n+\n+\n+def test_latex_degree():\n+    expr1 = 90*degree\n+    assert latex(expr1) == r\"90 ^\\circ\"\n+    expr2 = x*degree\n+    assert latex(expr2) == r\"x ^\\circ\"\n+    expr3 = cos(x*degree + 90*degree)\n+    assert latex(expr3) == r'\\cos{\\left (x ^\\circ + 90 ^\\circ \\right )}'\n",
  "problem_statement": "No support for \\[{90^^\\circ }\\]\nI have latex \\[{90^^\\circ }\\], which means angle ninety degree, for example (cos(90 degree)) = 0, please add support for that? I appreate your reply.\n",
  "hints_text": "@ungung, thank you for your feedback. We try to keep the github issues in SymPy a bit concrete.\r\nI believe you can get good feedback on our gitter channel, mailing list and stack overflow (where the latter is most suited for questions which may have a general audience).\r\n\r\nAm I right to assume that you expect this to give `^\\circ`?:\r\n```\r\n>>> from sympy.physics.units import degree\r\n>>> 90*degree\r\n90⋅degree\r\n>>> latex(90*degree)\r\n'90 degree'\r\n```\r\nthat would indeed be a nice addition.",
  "created_at": "2017-12-28T20:29:52Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_units\", \"test_degree_printing\"]",
  "PASS_TO_PASS": "[\"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_issue_7117\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_lambda\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_diffgeom_print_WedgeProduct\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_ITE\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_print_builtin_set\", \"test_pretty_sets\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_paranthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_gammas\", \"test_SingularityFunction\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_expint\", \"test_elliptic_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6285\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_PrettyModules\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_issue_13651\", \"test_pretty_primenu\", \"test_pretty_primeomega\", \"test_pretty_Mod\", \"test_issue_11801\", \"test_pretty_UnevaluatedExpr\", \"test_issue_10472\", \"test_MatrixElement_printing\", \"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_Modules\", \"test_Hadamard\", \"test_ZeroMatrix\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_8409\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_latex_UnevaluatedExpr\", \"test_Quaternion_latex_printing\", \"test_WedgeProduct_printing\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.087867",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}