{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-3239",
  "base_commit": "e90e8bc06cf8e7c97c7dc4c0e8ff1bf87c49faf6",
  "patch": "diff --git a/xarray/backends/api.py b/xarray/backends/api.py\n--- a/xarray/backends/api.py\n+++ b/xarray/backends/api.py\n@@ -761,7 +761,7 @@ def open_mfdataset(\n         `xarray.auto_combine` is used, but in the future this behavior will \n         switch to use `xarray.combine_by_coords` by default.\n     compat : {'identical', 'equals', 'broadcast_equals',\n-              'no_conflicts'}, optional\n+              'no_conflicts', 'override'}, optional\n         String indicating how to compare variables of the same name for\n         potential conflicts when merging:\n          * 'broadcast_equals': all values must be equal when variables are\n@@ -772,6 +772,7 @@ def open_mfdataset(\n          * 'no_conflicts': only values which are not null in both datasets\n            must be equal. The returned dataset then contains the combination\n            of all non-null values.\n+         * 'override': skip comparing and pick variable from first dataset\n     preprocess : callable, optional\n         If provided, call this function on each dataset prior to concatenation.\n         You can find the file-name from which each dataset was loaded in\ndiff --git a/xarray/core/combine.py b/xarray/core/combine.py\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -243,6 +243,7 @@ def _combine_1d(\n                 dim=concat_dim,\n                 data_vars=data_vars,\n                 coords=coords,\n+                compat=compat,\n                 fill_value=fill_value,\n                 join=join,\n             )\n@@ -351,7 +352,7 @@ def combine_nested(\n         Must be the same length as the depth of the list passed to\n         ``datasets``.\n     compat : {'identical', 'equals', 'broadcast_equals',\n-              'no_conflicts'}, optional\n+              'no_conflicts', 'override'}, optional\n         String indicating how to compare variables of the same name for\n         potential merge conflicts:\n \n@@ -363,6 +364,7 @@ def combine_nested(\n         - 'no_conflicts': only values which are not null in both datasets\n           must be equal. The returned dataset then contains the combination\n           of all non-null values.\n+        - 'override': skip comparing and pick variable from first dataset\n     data_vars : {'minimal', 'different', 'all' or list of str}, optional\n         Details are in the documentation of concat\n     coords : {'minimal', 'different', 'all' or list of str}, optional\n@@ -504,7 +506,7 @@ def combine_by_coords(\n     datasets : sequence of xarray.Dataset\n         Dataset objects to combine.\n     compat : {'identical', 'equals', 'broadcast_equals',\n-              'no_conflicts'}, optional\n+              'no_conflicts', 'override'}, optional\n         String indicating how to compare variables of the same name for\n         potential conflicts:\n \n@@ -516,6 +518,7 @@ def combine_by_coords(\n         - 'no_conflicts': only values which are not null in both datasets\n           must be equal. The returned dataset then contains the combination\n           of all non-null values.\n+        - 'override': skip comparing and pick variable from first dataset\n     data_vars : {'minimal', 'different', 'all' or list of str}, optional\n         Details are in the documentation of concat\n     coords : {'minimal', 'different', 'all' or list of str}, optional\n@@ -598,6 +601,7 @@ def combine_by_coords(\n             concat_dims=concat_dims,\n             data_vars=data_vars,\n             coords=coords,\n+            compat=compat,\n             fill_value=fill_value,\n             join=join,\n         )\n@@ -667,7 +671,7 @@ def auto_combine(\n         component files. Set ``concat_dim=None`` explicitly to disable\n         concatenation.\n     compat : {'identical', 'equals', 'broadcast_equals',\n-             'no_conflicts'}, optional\n+             'no_conflicts', 'override'}, optional\n         String indicating how to compare variables of the same name for\n         potential conflicts:\n         - 'broadcast_equals': all values must be equal when variables are\n@@ -678,6 +682,7 @@ def auto_combine(\n         - 'no_conflicts': only values which are not null in both datasets\n           must be equal. The returned dataset then contains the combination\n           of all non-null values.\n+        - 'override': skip comparing and pick variable from first dataset\n     data_vars : {'minimal', 'different', 'all' or list of str}, optional\n         Details are in the documentation of concat\n     coords : {'minimal', 'different', 'all' o list of str}, optional\n@@ -832,6 +837,7 @@ def _old_auto_combine(\n                 dim=dim,\n                 data_vars=data_vars,\n                 coords=coords,\n+                compat=compat,\n                 fill_value=fill_value,\n                 join=join,\n             )\n@@ -850,6 +856,7 @@ def _auto_concat(\n     coords=\"different\",\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    compat=\"no_conflicts\",\n ):\n     if len(datasets) == 1 and dim is None:\n         # There is nothing more to combine, so kick out early.\n@@ -876,5 +883,10 @@ def _auto_concat(\n                 )\n             dim, = concat_dims\n         return concat(\n-            datasets, dim=dim, data_vars=data_vars, coords=coords, fill_value=fill_value\n+            datasets,\n+            dim=dim,\n+            data_vars=data_vars,\n+            coords=coords,\n+            fill_value=fill_value,\n+            compat=compat,\n         )\ndiff --git a/xarray/core/concat.py b/xarray/core/concat.py\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -4,6 +4,7 @@\n \n from . import dtypes, utils\n from .alignment import align\n+from .merge import unique_variable, _VALID_COMPAT\n from .variable import IndexVariable, Variable, as_variable\n from .variable import concat as concat_vars\n \n@@ -59,12 +60,19 @@ def concat(\n             those corresponding to other dimensions.\n           * list of str: The listed coordinate variables will be concatenated,\n             in addition to the 'minimal' coordinates.\n-    compat : {'equals', 'identical'}, optional\n-        String indicating how to compare non-concatenated variables and\n-        dataset global attributes for potential conflicts. 'equals' means\n-        that all variable values and dimensions must be the same;\n-        'identical' means that variable attributes and global attributes\n-        must also be equal.\n+    compat : {'identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override'}, optional\n+        String indicating how to compare non-concatenated variables of the same name for\n+        potential conflicts. This is passed down to merge.\n+\n+        - 'broadcast_equals': all values must be equal when variables are\n+          broadcast against each other to ensure common dimensions.\n+        - 'equals': all values and dimensions must be the same.\n+        - 'identical': all values, dimensions and attributes must be the\n+          same.\n+        - 'no_conflicts': only values which are not null in both datasets\n+          must be equal. The returned dataset then contains the combination\n+          of all non-null values.\n+        - 'override': skip comparing and pick variable from first dataset\n     positions : None or list of integer arrays, optional\n         List of integer arrays which specifies the integer positions to which\n         to assign each dataset along the concatenated dimension. If not\n@@ -107,6 +115,12 @@ def concat(\n     except StopIteration:\n         raise ValueError(\"must supply at least one object to concatenate\")\n \n+    if compat not in _VALID_COMPAT:\n+        raise ValueError(\n+            \"compat=%r invalid: must be 'broadcast_equals', 'equals', 'identical', 'no_conflicts' or 'override'\"\n+            % compat\n+        )\n+\n     if isinstance(first_obj, DataArray):\n         f = _dataarray_concat\n     elif isinstance(first_obj, Dataset):\n@@ -143,23 +157,39 @@ def _calc_concat_dim_coord(dim):\n     return dim, coord\n \n \n-def _calc_concat_over(datasets, dim, data_vars, coords):\n+def _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat):\n     \"\"\"\n     Determine which dataset variables need to be concatenated in the result,\n-    and which can simply be taken from the first dataset.\n     \"\"\"\n     # Return values\n     concat_over = set()\n     equals = {}\n \n-    if dim in datasets[0]:\n+    if dim in dim_names:\n+        concat_over_existing_dim = True\n         concat_over.add(dim)\n+    else:\n+        concat_over_existing_dim = False\n+\n+    concat_dim_lengths = []\n     for ds in datasets:\n+        if concat_over_existing_dim:\n+            if dim not in ds.dims:\n+                if dim in ds:\n+                    ds = ds.set_coords(dim)\n+                else:\n+                    raise ValueError(\"%r is not present in all datasets\" % dim)\n         concat_over.update(k for k, v in ds.variables.items() if dim in v.dims)\n+        concat_dim_lengths.append(ds.dims.get(dim, 1))\n \n     def process_subset_opt(opt, subset):\n         if isinstance(opt, str):\n             if opt == \"different\":\n+                if compat == \"override\":\n+                    raise ValueError(\n+                        \"Cannot specify both %s='different' and compat='override'.\"\n+                        % subset\n+                    )\n                 # all nonindexes that are not the same in each dataset\n                 for k in getattr(datasets[0], subset):\n                     if k not in concat_over:\n@@ -173,7 +203,7 @@ def process_subset_opt(opt, subset):\n                         for ds_rhs in datasets[1:]:\n                             v_rhs = ds_rhs.variables[k].compute()\n                             computed.append(v_rhs)\n-                            if not v_lhs.equals(v_rhs):\n+                            if not getattr(v_lhs, compat)(v_rhs):\n                                 concat_over.add(k)\n                                 equals[k] = False\n                                 # computed variables are not to be re-computed\n@@ -209,7 +239,29 @@ def process_subset_opt(opt, subset):\n \n     process_subset_opt(data_vars, \"data_vars\")\n     process_subset_opt(coords, \"coords\")\n-    return concat_over, equals\n+    return concat_over, equals, concat_dim_lengths\n+\n+\n+# determine dimensional coordinate names and a dict mapping name to DataArray\n+def _parse_datasets(datasets):\n+\n+    dims = set()\n+    all_coord_names = set()\n+    data_vars = set()  # list of data_vars\n+    dim_coords = dict()  # maps dim name to variable\n+    dims_sizes = {}  # shared dimension sizes to expand variables\n+\n+    for ds in datasets:\n+        dims_sizes.update(ds.dims)\n+        all_coord_names.update(ds.coords)\n+        data_vars.update(ds.data_vars)\n+\n+        for dim in set(ds.dims) - dims:\n+            if dim not in dim_coords:\n+                dim_coords[dim] = ds.coords[dim].variable\n+        dims = dims | set(ds.dims)\n+\n+    return dim_coords, dims_sizes, all_coord_names, data_vars\n \n \n def _dataset_concat(\n@@ -227,11 +279,6 @@ def _dataset_concat(\n     \"\"\"\n     from .dataset import Dataset\n \n-    if compat not in [\"equals\", \"identical\"]:\n-        raise ValueError(\n-            \"compat=%r invalid: must be 'equals' \" \"or 'identical'\" % compat\n-        )\n-\n     dim, coord = _calc_concat_dim_coord(dim)\n     # Make sure we're working on a copy (we'll be loading variables)\n     datasets = [ds.copy() for ds in datasets]\n@@ -239,62 +286,65 @@ def _dataset_concat(\n         *datasets, join=join, copy=False, exclude=[dim], fill_value=fill_value\n     )\n \n-    concat_over, equals = _calc_concat_over(datasets, dim, data_vars, coords)\n+    dim_coords, dims_sizes, coord_names, data_names = _parse_datasets(datasets)\n+    dim_names = set(dim_coords)\n+    unlabeled_dims = dim_names - coord_names\n+\n+    both_data_and_coords = coord_names & data_names\n+    if both_data_and_coords:\n+        raise ValueError(\n+            \"%r is a coordinate in some datasets but not others.\" % both_data_and_coords\n+        )\n+    # we don't want the concat dimension in the result dataset yet\n+    dim_coords.pop(dim, None)\n+    dims_sizes.pop(dim, None)\n+\n+    # case where concat dimension is a coordinate or data_var but not a dimension\n+    if (dim in coord_names or dim in data_names) and dim not in dim_names:\n+        datasets = [ds.expand_dims(dim) for ds in datasets]\n+\n+    # determine which variables to concatentate\n+    concat_over, equals, concat_dim_lengths = _calc_concat_over(\n+        datasets, dim, dim_names, data_vars, coords, compat\n+    )\n+\n+    # determine which variables to merge, and then merge them according to compat\n+    variables_to_merge = (coord_names | data_names) - concat_over - dim_names\n+\n+    result_vars = {}\n+    if variables_to_merge:\n+        to_merge = {var: [] for var in variables_to_merge}\n+\n+        for ds in datasets:\n+            absent_merge_vars = variables_to_merge - set(ds.variables)\n+            if absent_merge_vars:\n+                raise ValueError(\n+                    \"variables %r are present in some datasets but not others. \"\n+                    % absent_merge_vars\n+                )\n \n-    def insert_result_variable(k, v):\n-        assert isinstance(v, Variable)\n-        if k in datasets[0].coords:\n-            result_coord_names.add(k)\n-        result_vars[k] = v\n+            for var in variables_to_merge:\n+                to_merge[var].append(ds.variables[var])\n \n-    # create the new dataset and add constant variables\n-    result_vars = OrderedDict()\n-    result_coord_names = set(datasets[0].coords)\n+        for var in variables_to_merge:\n+            result_vars[var] = unique_variable(\n+                var, to_merge[var], compat=compat, equals=equals.get(var, None)\n+            )\n+    else:\n+        result_vars = OrderedDict()\n+    result_vars.update(dim_coords)\n+\n+    # assign attrs and encoding from first dataset\n     result_attrs = datasets[0].attrs\n     result_encoding = datasets[0].encoding\n \n-    for k, v in datasets[0].variables.items():\n-        if k not in concat_over:\n-            insert_result_variable(k, v)\n-\n-    # check that global attributes and non-concatenated variables are fixed\n-    # across all datasets\n+    # check that global attributes are fixed across all datasets if necessary\n     for ds in datasets[1:]:\n         if compat == \"identical\" and not utils.dict_equiv(ds.attrs, result_attrs):\n-            raise ValueError(\"dataset global attributes not equal\")\n-        for k, v in ds.variables.items():\n-            if k not in result_vars and k not in concat_over:\n-                raise ValueError(\"encountered unexpected variable %r\" % k)\n-            elif (k in result_coord_names) != (k in ds.coords):\n-                raise ValueError(\n-                    \"%r is a coordinate in some datasets but not \" \"others\" % k\n-                )\n-            elif k in result_vars and k != dim:\n-                # Don't use Variable.identical as it internally invokes\n-                # Variable.equals, and we may already know the answer\n-                if compat == \"identical\" and not utils.dict_equiv(\n-                    v.attrs, result_vars[k].attrs\n-                ):\n-                    raise ValueError(\"variable %s not identical across datasets\" % k)\n-\n-                # Proceed with equals()\n-                try:\n-                    # May be populated when using the \"different\" method\n-                    is_equal = equals[k]\n-                except KeyError:\n-                    result_vars[k].load()\n-                    is_equal = v.equals(result_vars[k])\n-                if not is_equal:\n-                    raise ValueError(\"variable %s not equal across datasets\" % k)\n+            raise ValueError(\"Dataset global attributes not equal.\")\n \n     # we've already verified everything is consistent; now, calculate\n     # shared dimension sizes so we can expand the necessary variables\n-    dim_lengths = [ds.dims.get(dim, 1) for ds in datasets]\n-    non_concat_dims = {}\n-    for ds in datasets:\n-        non_concat_dims.update(ds.dims)\n-    non_concat_dims.pop(dim, None)\n-\n     def ensure_common_dims(vars):\n         # ensure each variable with the given name shares the same\n         # dimensions and the same shape for all of them except along the\n@@ -302,25 +352,27 @@ def ensure_common_dims(vars):\n         common_dims = tuple(pd.unique([d for v in vars for d in v.dims]))\n         if dim not in common_dims:\n             common_dims = (dim,) + common_dims\n-        for var, dim_len in zip(vars, dim_lengths):\n+        for var, dim_len in zip(vars, concat_dim_lengths):\n             if var.dims != common_dims:\n-                common_shape = tuple(\n-                    non_concat_dims.get(d, dim_len) for d in common_dims\n-                )\n+                common_shape = tuple(dims_sizes.get(d, dim_len) for d in common_dims)\n                 var = var.set_dims(common_dims, common_shape)\n             yield var\n \n     # stack up each variable to fill-out the dataset (in order)\n+    # n.b. this loop preserves variable order, needed for groupby.\n     for k in datasets[0].variables:\n         if k in concat_over:\n             vars = ensure_common_dims([ds.variables[k] for ds in datasets])\n             combined = concat_vars(vars, dim, positions)\n-            insert_result_variable(k, combined)\n+            assert isinstance(combined, Variable)\n+            result_vars[k] = combined\n \n     result = Dataset(result_vars, attrs=result_attrs)\n-    result = result.set_coords(result_coord_names)\n+    result = result.set_coords(coord_names)\n     result.encoding = result_encoding\n \n+    result = result.drop(unlabeled_dims, errors=\"ignore\")\n+\n     if coord is not None:\n         # add concat dimension last to ensure that its in the final Dataset\n         result[coord.name] = coord\n@@ -342,7 +394,7 @@ def _dataarray_concat(\n \n     if data_vars != \"all\":\n         raise ValueError(\n-            \"data_vars is not a valid argument when \" \"concatenating DataArray objects\"\n+            \"data_vars is not a valid argument when concatenating DataArray objects\"\n         )\n \n     datasets = []\ndiff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1549,8 +1549,8 @@ def set_index(\n         obj : DataArray\n             Another DataArray, with this data but replaced coordinates.\n \n-        Example\n-        -------\n+        Examples\n+        --------\n         >>> arr = xr.DataArray(data=np.ones((2, 3)),\n         ...                    dims=['x', 'y'],\n         ...                    coords={'x':\ndiff --git a/xarray/core/merge.py b/xarray/core/merge.py\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -44,6 +44,7 @@\n         \"broadcast_equals\": 2,\n         \"minimal\": 3,\n         \"no_conflicts\": 4,\n+        \"override\": 5,\n     }\n )\n \n@@ -70,8 +71,8 @@ class MergeError(ValueError):\n     # TODO: move this to an xarray.exceptions module?\n \n \n-def unique_variable(name, variables, compat=\"broadcast_equals\"):\n-    # type: (Any, List[Variable], str) -> Variable\n+def unique_variable(name, variables, compat=\"broadcast_equals\", equals=None):\n+    # type: (Any, List[Variable], str, bool) -> Variable\n     \"\"\"Return the unique variable from a list of variables or raise MergeError.\n \n     Parameters\n@@ -81,8 +82,10 @@ def unique_variable(name, variables, compat=\"broadcast_equals\"):\n     variables : list of xarray.Variable\n         List of Variable objects, all of which go by the same name in different\n         inputs.\n-    compat : {'identical', 'equals', 'broadcast_equals', 'no_conflicts'}, optional\n+    compat : {'identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override'}, optional\n         Type of equality check to use.\n+    equals: None or bool,\n+        corresponding to result of compat test\n \n     Returns\n     -------\n@@ -93,30 +96,38 @@ def unique_variable(name, variables, compat=\"broadcast_equals\"):\n     MergeError: if any of the variables are not equal.\n     \"\"\"  # noqa\n     out = variables[0]\n-    if len(variables) > 1:\n-        combine_method = None\n \n-        if compat == \"minimal\":\n-            compat = \"broadcast_equals\"\n+    if len(variables) == 1 or compat == \"override\":\n+        return out\n+\n+    combine_method = None\n+\n+    if compat == \"minimal\":\n+        compat = \"broadcast_equals\"\n+\n+    if compat == \"broadcast_equals\":\n+        dim_lengths = broadcast_dimension_size(variables)\n+        out = out.set_dims(dim_lengths)\n+\n+    if compat == \"no_conflicts\":\n+        combine_method = \"fillna\"\n \n-        if compat == \"broadcast_equals\":\n-            dim_lengths = broadcast_dimension_size(variables)\n-            out = out.set_dims(dim_lengths)\n+    if equals is None:\n+        out = out.compute()\n+        for var in variables[1:]:\n+            equals = getattr(out, compat)(var)\n+            if not equals:\n+                break\n \n-        if compat == \"no_conflicts\":\n-            combine_method = \"fillna\"\n+    if not equals:\n+        raise MergeError(\n+            \"conflicting values for variable %r on objects to be combined. You can skip this check by specifying compat='override'.\"\n+            % (name)\n+        )\n \n+    if combine_method:\n         for var in variables[1:]:\n-            if not getattr(out, compat)(var):\n-                raise MergeError(\n-                    \"conflicting values for variable %r on \"\n-                    \"objects to be combined:\\n\"\n-                    \"first value: %r\\nsecond value: %r\" % (name, out, var)\n-                )\n-            if combine_method:\n-                # TODO: add preservation of attrs into fillna\n-                out = getattr(out, combine_method)(var)\n-                out.attrs = var.attrs\n+            out = getattr(out, combine_method)(var)\n \n     return out\n \n@@ -152,7 +163,7 @@ def merge_variables(\n     priority_vars : mapping with Variable or None values, optional\n         If provided, variables are always taken from this dict in preference to\n         the input variable dictionaries, without checking for conflicts.\n-    compat : {'identical', 'equals', 'broadcast_equals', 'minimal', 'no_conflicts'}, optional\n+    compat : {'identical', 'equals', 'broadcast_equals', 'minimal', 'no_conflicts', 'override'}, optional\n         Type of equality check to use when checking for conflicts.\n \n     Returns\n@@ -449,7 +460,7 @@ def merge_core(\n     ----------\n     objs : list of mappings\n         All values must be convertable to labeled arrays.\n-    compat : {'identical', 'equals', 'broadcast_equals', 'no_conflicts'}, optional\n+    compat : {'identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override'}, optional\n         Compatibility checks to use when merging variables.\n     join : {'outer', 'inner', 'left', 'right'}, optional\n         How to combine objects with different indexes.\n@@ -519,7 +530,7 @@ def merge(objects, compat=\"no_conflicts\", join=\"outer\", fill_value=dtypes.NA):\n     objects : Iterable[Union[xarray.Dataset, xarray.DataArray, dict]]\n         Merge together all variables from these objects. If any of them are\n         DataArray objects, they must have a name.\n-    compat : {'identical', 'equals', 'broadcast_equals', 'no_conflicts'}, optional\n+    compat : {'identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override'}, optional\n         String indicating how to compare variables of the same name for\n         potential conflicts:\n \n@@ -531,6 +542,7 @@ def merge(objects, compat=\"no_conflicts\", join=\"outer\", fill_value=dtypes.NA):\n         - 'no_conflicts': only values which are not null in both datasets\n           must be equal. The returned dataset then contains the combination\n           of all non-null values.\n+        - 'override': skip comparing and pick variable from first dataset\n     join : {'outer', 'inner', 'left', 'right', 'exact'}, optional\n         String indicating how to combine differing indexes in objects.\n \n",
  "test_patch": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -327,13 +327,13 @@ class TestCheckShapeTileIDs:\n     def test_check_depths(self):\n         ds = create_test_data(0)\n         combined_tile_ids = {(0,): ds, (0, 1): ds}\n-        with raises_regex(ValueError, \"sub-lists do not have \" \"consistent depths\"):\n+        with raises_regex(ValueError, \"sub-lists do not have consistent depths\"):\n             _check_shape_tile_ids(combined_tile_ids)\n \n     def test_check_lengths(self):\n         ds = create_test_data(0)\n         combined_tile_ids = {(0, 0): ds, (0, 1): ds, (0, 2): ds, (1, 0): ds, (1, 1): ds}\n-        with raises_regex(ValueError, \"sub-lists do not have \" \"consistent lengths\"):\n+        with raises_regex(ValueError, \"sub-lists do not have consistent lengths\"):\n             _check_shape_tile_ids(combined_tile_ids)\n \n \n@@ -565,11 +565,6 @@ def test_combine_concat_over_redundant_nesting(self):\n         expected = Dataset({\"x\": [0]})\n         assert_identical(expected, actual)\n \n-    def test_combine_nested_but_need_auto_combine(self):\n-        objs = [Dataset({\"x\": [0, 1]}), Dataset({\"x\": [2], \"wall\": [0]})]\n-        with raises_regex(ValueError, \"cannot be combined\"):\n-            combine_nested(objs, concat_dim=\"x\")\n-\n     @pytest.mark.parametrize(\"fill_value\", [dtypes.NA, 2, 2.0])\n     def test_combine_nested_fill_value(self, fill_value):\n         datasets = [\n@@ -618,7 +613,7 @@ def test_combine_by_coords(self):\n         assert_equal(actual, expected)\n \n         objs = [Dataset({\"x\": 0}), Dataset({\"x\": 1})]\n-        with raises_regex(ValueError, \"Could not find any dimension \" \"coordinates\"):\n+        with raises_regex(ValueError, \"Could not find any dimension coordinates\"):\n             combine_by_coords(objs)\n \n         objs = [Dataset({\"x\": [0], \"y\": [0]}), Dataset({\"x\": [0]})]\n@@ -761,7 +756,7 @@ def test_auto_combine(self):\n             auto_combine(objs)\n \n         objs = [Dataset({\"x\": [0], \"y\": [0]}), Dataset({\"x\": [0]})]\n-        with pytest.raises(KeyError):\n+        with raises_regex(ValueError, \"'y' is not present in all datasets\"):\n             auto_combine(objs)\n \n     def test_auto_combine_previously_failed(self):\ndiff --git a/xarray/tests/test_concat.py b/xarray/tests/test_concat.py\n--- a/xarray/tests/test_concat.py\n+++ b/xarray/tests/test_concat.py\n@@ -5,8 +5,7 @@\n import pytest\n \n from xarray import DataArray, Dataset, Variable, concat\n-from xarray.core import dtypes\n-\n+from xarray.core import dtypes, merge\n from . import (\n     InaccessibleArray,\n     assert_array_equal,\n@@ -18,6 +17,34 @@\n from .test_dataset import create_test_data\n \n \n+def test_concat_compat():\n+    ds1 = Dataset(\n+        {\n+            \"has_x_y\": ((\"y\", \"x\"), [[1, 2]]),\n+            \"has_x\": (\"x\", [1, 2]),\n+            \"no_x_y\": (\"z\", [1, 2]),\n+        },\n+        coords={\"x\": [0, 1], \"y\": [0], \"z\": [-1, -2]},\n+    )\n+    ds2 = Dataset(\n+        {\n+            \"has_x_y\": ((\"y\", \"x\"), [[3, 4]]),\n+            \"has_x\": (\"x\", [1, 2]),\n+            \"no_x_y\": ((\"q\", \"z\"), [[1, 2]]),\n+        },\n+        coords={\"x\": [0, 1], \"y\": [1], \"z\": [-1, -2], \"q\": [0]},\n+    )\n+\n+    result = concat([ds1, ds2], dim=\"y\", data_vars=\"minimal\", compat=\"broadcast_equals\")\n+    assert_equal(ds2.no_x_y, result.no_x_y.transpose())\n+\n+    for var in [\"has_x\", \"no_x_y\"]:\n+        assert \"y\" not in result[var]\n+\n+    with raises_regex(ValueError, \"'q' is not present in all datasets\"):\n+        concat([ds1, ds2], dim=\"q\", data_vars=\"all\", compat=\"broadcast_equals\")\n+\n+\n class TestConcatDataset:\n     @pytest.fixture\n     def data(self):\n@@ -92,7 +119,7 @@ def test_concat_coords(self):\n             actual = concat(objs, dim=\"x\", coords=coords)\n             assert_identical(expected, actual)\n         for coords in [\"minimal\", []]:\n-            with raises_regex(ValueError, \"not equal across\"):\n+            with raises_regex(merge.MergeError, \"conflicting values\"):\n                 concat(objs, dim=\"x\", coords=coords)\n \n     def test_concat_constant_index(self):\n@@ -103,8 +130,10 @@ def test_concat_constant_index(self):\n         for mode in [\"different\", \"all\", [\"foo\"]]:\n             actual = concat([ds1, ds2], \"y\", data_vars=mode)\n             assert_identical(expected, actual)\n-        with raises_regex(ValueError, \"not equal across datasets\"):\n-            concat([ds1, ds2], \"y\", data_vars=\"minimal\")\n+        with raises_regex(merge.MergeError, \"conflicting values\"):\n+            # previously dim=\"y\", and raised error which makes no sense.\n+            # \"foo\" has dimension \"y\" so minimal should concatenate it?\n+            concat([ds1, ds2], \"new_dim\", data_vars=\"minimal\")\n \n     def test_concat_size0(self):\n         data = create_test_data()\n@@ -134,6 +163,14 @@ def test_concat_errors(self):\n         data = create_test_data()\n         split_data = [data.isel(dim1=slice(3)), data.isel(dim1=slice(3, None))]\n \n+        with raises_regex(ValueError, \"must supply at least one\"):\n+            concat([], \"dim1\")\n+\n+        with raises_regex(ValueError, \"Cannot specify both .*='different'\"):\n+            concat(\n+                [data, data], dim=\"concat_dim\", data_vars=\"different\", compat=\"override\"\n+            )\n+\n         with raises_regex(ValueError, \"must supply at least one\"):\n             concat([], \"dim1\")\n \n@@ -146,7 +183,7 @@ def test_concat_errors(self):\n             concat([data0, data1], \"dim1\", compat=\"identical\")\n         assert_identical(data, concat([data0, data1], \"dim1\", compat=\"equals\"))\n \n-        with raises_regex(ValueError, \"encountered unexpected\"):\n+        with raises_regex(ValueError, \"present in some datasets\"):\n             data0, data1 = deepcopy(split_data)\n             data1[\"foo\"] = (\"bar\", np.random.randn(10))\n             concat([data0, data1], \"dim1\")\ndiff --git a/xarray/tests/test_dask.py b/xarray/tests/test_dask.py\n--- a/xarray/tests/test_dask.py\n+++ b/xarray/tests/test_dask.py\n@@ -825,7 +825,6 @@ def kernel(name):\n     \"\"\"Dask kernel to test pickling/unpickling and __repr__.\n     Must be global to make it pickleable.\n     \"\"\"\n-    print(\"kernel(%s)\" % name)\n     global kernel_call_count\n     kernel_call_count += 1\n     return np.ones(1, dtype=np.int64)\ndiff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -196,6 +196,8 @@ def test_merge_compat(self):\n         with raises_regex(ValueError, \"compat=.* invalid\"):\n             ds1.merge(ds2, compat=\"foobar\")\n \n+        assert ds1.identical(ds1.merge(ds2, compat=\"override\"))\n+\n     def test_merge_auto_align(self):\n         ds1 = xr.Dataset({\"a\": (\"x\", [1, 2]), \"x\": [0, 1]})\n         ds2 = xr.Dataset({\"b\": (\"x\", [3, 4]), \"x\": [1, 2]})\n",
  "problem_statement": "We need a fast path for open_mfdataset\nIt would be great to have a \"fast path\" option for `open_mfdataset`, in which all alignment / coordinate checking is bypassed. This would be used in cases where the user knows that many netCDF files all share the same coordinates (e.g. model output, satellite records from the same product, etc.). The coordinates would just be taken from the first file, and only the data variables would be read from all subsequent files. The only checking would be that the data variables have the correct shape.\r\n\r\nImplementing this would require some refactoring. @jbusecke mentioned that he had developed a solution for this (related to #1704), so maybe he could be the one to add this feature to xarray.\r\n\r\nThis is also related to #1385.\n",
  "hints_text": "@rabernat - Depending on the structure of the dataset, another possibility that would speed up some `open_mfdataset` tasks substantially is to implement the step of opening each file and getting its metadata in in some parallel way (dask/joblib/etc.) and either returning the just dataset schema or a picklable version of the dataset itself.  I think this will only be able to work with `autoclose=True` but it could be quite useful when working with many files. \nI did not really find an elegant solution. What I did was just specify all dims and coords as `drop_variables` and then update those from a master file with \r\n```\r\nds.update(ds_master)\r\n``` \r\nPerhaps this could be generalized in a sense, by reading all coords and dims just from the first file. \nWould these two options be necessarily mutually exclusive?\r\n\r\nI think parallelizing the read in sounds amazing.  \r\n\r\nBut isnt there some merit in skipping some of the checks all together, if the user is sure about the structure of the data contained in the many files?\r\n\r\nI am often working with the aforementioned type of data (many files either contain a new timestep or a different variable, but most of the dimensions/coordinates are the same). \r\n\r\nIn some cases I am finding that reading the data \"lazily\" consumes a significant amount of the time in my workflow. I am unsure how hard this would be to achieve, and perhaps it is not worth it after all.\r\n\r\nJust putting out a few ideas, while I wait for my `xr.open_mfdataset` to finish :-)\n@jbusecke - No. These options are not mutually exclusive. The parallel open is, in my opinion, the lowest hanging fruit so that's why I started there. There are other improvements that we can tackle incrementally. \nAwesome, thanks for the clarification.\r\nI just looked at #1981 and it seems indeed very elegant (in fact I just now used this approach to parallelize printing of movie frames!) Thanks for that!\r\n\nI am currently motivated to fix this.\r\n\r\n1. Over in https://github.com/pydata/xarray/pull/1413#issuecomment-302843502 @rabernat mentioned\r\n> allowing the user to pass join='exact' via open_mfdataset. A related optimization would be to allow the user to pass coords='minimal' (or other concat coords options) via open_mfdataset.\r\n\r\n2. @shoyer suggested calling decode_cf later here though perhaps this wont help too much: https://github.com/pydata/xarray/issues/1385#issuecomment-439263419\r\n\r\nIs this all that we can do on the xarray side?\n@dcherian I'm sorry, I'm very interested in this but after reading the issues I'm still not clear on what's being proposed:\r\n\r\nWhat exactly is the bottleneck? Is it reading the coords from all the files? Is it loading the coord values into memory? Is it performing the alignment checks on those coords once they're in memory? Is it performing alignment checks on the dimensions? Is this suggestion relevant to datasets that don't have any coords?\r\n\r\nWhich of these steps would a `join='exact'` option omit?\r\n\r\n> A related optimization would be to allow the user to pass coords='minimal' (or other concat coords options) via open_mfdataset.\r\n\r\nBut this is already an option to `open_mfdataset`?\nThe original issue of this thread is that you sometimes might want to *disable* alignment checks for coordinates other than the `concat_dim` and only check for same dimensions and dimension shapes. \r\n\r\nWhen you `xr.merge` with `join='exact'`, it still checks for alignment (see https://github.com/pydata/xarray/pull/1330#issuecomment-302711852), but does not join the coordinates if they are not aligned. This behavior (not joining) is also included in what @rabernat envisioned here, but his suggestion goes beyond that: you don't even load coordinate values from all but the first dataset and just blindly trust that they are aligned.\r\n\r\nSo `xr.open_mfdataset(join='exact', coords='minimal')` does not fix this issue here, I think.\nSo I think it is quite important to consider this issue together with #2697. An xml specification called [NCML](https://www.unidata.ucar.edu/software/thredds/current/netcdf-java/ncml/) already exists which tells software how to put together multiple netCDF files into a single virtual netcdf. We should leverage this existing spec as much as possible.\r\n\r\nA realistic use case for me is that I have, say 1000 files of high-res model output, each with large coordinate variables, all generated from the same model run. If we want to  for for which we *know a priori* that certain coordinates (dimension coordinates or otherwise) are identical, we could save a lot of disk reads (the slow part of `open_mfdataset`) by never reading those coordinates at all. Enabling this would require a pretty low-level change in xarray. For example, we couldn't even rely on `open_dataset` in its current form to open files, because `open_dataset` eagerly loads all dimension coordinates into indexes. One way forward might be to create a new Store class.\r\n\r\nFor a catalog of tricks I use to optimize opening these sorts of big, complex, multi-file datasets (e.g. CMIP), check out\r\nhttps://github.com/pangeo-data/esgf2xarray/blob/master/esgf2zarr/aggregate.py\r\n\nOne common use-case is files with large numbers of `concat_dim`-invariant non-dimensional co-ordinates.  This is easy to speed up by dropping those variables from all but the first file. \r\n\r\ne.g.\r\nhttps://github.com/pangeo-data/esgf2xarray/blob/6a5e4df0d329c2f23b403cbfbb65f0f1dfa98d52/esgf2zarr/aggregate.py#L107-L110\r\n``` python\r\n    # keep only coordinates from first ensemble member to simplify merge\r\n    first = member_dsets_aligned[0]\r\n    rest = [mds.reset_coords(drop=True) for mds in member_dsets_aligned[1:]]\r\n    objs_to_concat = [first] + rest\r\n```\r\n\r\nSimilarly https://github.com/NCAR/intake-esm/blob/e86a8e8a80ce0fd4198665dbef3ba46af264b5ea/intake_esm/aggregate.py#L53-L57\r\n\r\n``` python\r\ndef merge_vars_two_datasets(ds1, ds2):\r\n    \"\"\"\r\n    Merge two datasets, dropping all variables from\r\n    second dataset that already exist in the first dataset's coordinates.\r\n    \"\"\"\r\n```\r\n\r\nSee also #2039 (second code block)\r\n\r\nOne way to do this might be to add a `master_file` kwarg to `open_mfdataset`. This would imply `coords='minimal', join='exact'` (I think; `prealigned=True` in some other proposals) and would drop non-dimensional coordinates from all but the first file and then call concat. \r\n\r\nAs bonus it would assign attributes from the `master_file` to the merged dataset (for which I think there are open issues) : this functionality exists in `netCDF4.MFDataset` so that's a plus.\r\n\r\nEDIT: #2039 (third code block) is also a possibility. This might look like\r\n``` python\r\nxr.open_mfdataset('files*.nc', master_file='first', concat_dim='time')\r\n```\r\nin which case the first file is read; all coords that are not `concat_dim` become `drop_variables` for an `open_dataset` call that reads the remaining files. We then merge with the first dataset and assign attrs.\r\n\r\nEDIT2: `master_file` combines two different functionalities here: specifying a \"template file\" and a file to choose attributes from. So maybe we need two kwargs: `template_file` and `attrs_from`?",
  "created_at": "2019-08-22T15:29:57Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine\", \"xarray/tests/test_concat.py::test_concat_compat\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_constant_index\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_errors\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_compat\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_1d\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_2d\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_3d\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_single_dataset\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_redundant_nesting\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_ignore_empty_list\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_uneven_depth_input\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_uneven_length_input\", \"xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_infer_from_datasets\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_1d\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_2d\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_no_dimension_coords\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_coord_not_monotonic\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_coord_monotonically_decreasing\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_no_concatenation_needed\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_2d_plus_bystander_dim\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_string_coords\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_lexicographic_sort_string_coords\", \"xarray/tests/test_combine.py::TestTileIDsFromCoords::test_datetime_coords\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id0-new_id0]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id1-new_id1]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id2-new_id2]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id3-new_id3]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id4-new_id4]\", \"xarray/tests/test_combine.py::TestNewTileIDs::test_get_new_tile_ids\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_once[dim1]\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_once[new_dim]\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_only_first_dim\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_twice[dim1]\", \"xarray/tests/test_combine.py::TestCombineND::test_concat_twice[new_dim]\", \"xarray/tests/test_combine.py::TestCheckShapeTileIDs::test_check_depths\", \"xarray/tests/test_combine.py::TestCheckShapeTileIDs::test_check_lengths\", \"xarray/tests/test_combine.py::TestNestedCombine::test_nested_concat\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[outer-expected0]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[inner-expected1]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[left-expected2]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[right-expected3]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join_exact\", \"xarray/tests/test_combine.py::TestNestedCombine::test_empty_input\", \"xarray/tests/test_combine.py::TestNestedCombine::test_nested_concat_along_new_dim\", \"xarray/tests/test_combine.py::TestNestedCombine::test_nested_merge\", \"xarray/tests/test_combine.py::TestNestedCombine::test_concat_multiple_dims\", \"xarray/tests/test_combine.py::TestNestedCombine::test_concat_name_symmetry\", \"xarray/tests/test_combine.py::TestNestedCombine::test_concat_one_dim_merge_another\", \"xarray/tests/test_combine.py::TestNestedCombine::test_auto_combine_2d\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_missing_data_new_dim\", \"xarray/tests/test_combine.py::TestNestedCombine::test_invalid_hypercube_input\", \"xarray/tests/test_combine.py::TestNestedCombine::test_merge_one_dim_concat_another\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_concat_over_redundant_nesting\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_fill_value[fill_value0]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_fill_value[2]\", \"xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_fill_value[2.0]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[outer-expected0]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[inner-expected1]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[left-expected2]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[right-expected3]\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join_exact\", \"xarray/tests/test_combine.py::TestCombineAuto::test_infer_order_from_coords\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_leaving_bystander_dimensions\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords_previously_failed\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords_still_fails\", \"xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords_no_concat\", \"xarray/tests/test_combine.py::TestCombineAuto::test_check_for_impossible_ordering\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_previously_failed\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_still_fails\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_no_concat\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_order_by_appearance_not_coords\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_fill_value[fill_value0]\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_fill_value[2]\", \"xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_fill_value[2.0]\", \"xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_with_concat_dim\", \"xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_with_merge_and_concat\", \"xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_with_coords\", \"xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_without_coords\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_2\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-all]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-all]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_precedence\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_data_vars\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_size0\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_autoalign\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_join_kwarg\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_promote_shape\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_do_not_promote\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_is_variable\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_multiindex\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[fill_value0]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2.0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_encoding\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_lazy\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[fill_value0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2.0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_join_kwarg\", \"xarray/tests/test_dask.py::test_raise_if_dask_computes\", \"xarray/tests/test_dask.py::TestVariable::test_basics\", \"xarray/tests/test_dask.py::TestVariable::test_copy\", \"xarray/tests/test_dask.py::TestVariable::test_chunk\", \"xarray/tests/test_dask.py::TestVariable::test_indexing\", \"xarray/tests/test_dask.py::TestVariable::test_squeeze\", \"xarray/tests/test_dask.py::TestVariable::test_equals\", \"xarray/tests/test_dask.py::TestVariable::test_transpose\", \"xarray/tests/test_dask.py::TestVariable::test_shift\", \"xarray/tests/test_dask.py::TestVariable::test_roll\", \"xarray/tests/test_dask.py::TestVariable::test_unary_op\", \"xarray/tests/test_dask.py::TestVariable::test_binary_op\", \"xarray/tests/test_dask.py::TestVariable::test_repr\", \"xarray/tests/test_dask.py::TestVariable::test_pickle\", \"xarray/tests/test_dask.py::TestVariable::test_missing_values\", \"xarray/tests/test_dask.py::TestVariable::test_concat\", \"xarray/tests/test_dask.py::TestVariable::test_missing_methods\", \"xarray/tests/test_dask.py::TestVariable::test_univariate_ufunc\", \"xarray/tests/test_dask.py::TestVariable::test_bivariate_ufunc\", \"xarray/tests/test_dask.py::TestVariable::test_compute\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_rechunk\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_new_chunk\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_dataset\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_array\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_compute\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_concat_loads_variables\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby_first\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_reindex\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_to_dataset_roundtrip\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_merge\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_ufuncs\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_where_dispatching\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_simultaneous_compute\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dot\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_repr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_repr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_pickle\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_pickle\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_getattr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_getattr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_values\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_from_dask_variable\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_2D\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_coordinates\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_not_daskarray\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_no_coordinate\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_dim_order\", \"xarray/tests/test_dask.py::test_dask_kwargs_variable[load]\", \"xarray/tests/test_dask.py::test_dask_kwargs_variable[compute]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataarray[load]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataarray[compute]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataarray[persist]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataset[load]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataset[compute]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataset[persist]\", \"xarray/tests/test_dask.py::test_persist_Dataset[<lambda>0]\", \"xarray/tests/test_dask.py::test_persist_DataArray[<lambda>0]\", \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\", \"xarray/tests/test_dask.py::test_basic_compute\", \"xarray/tests/test_dask.py::test_dask_layers_and_dependencies\", \"xarray/tests/test_merge.py::TestMergeInternals::test_broadcast_dimension_size\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_arrays\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_datasets\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_dataarray_unnamed\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_dicts_simple\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_dicts_dims\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_error\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_alignment_error\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_wrong_input_error\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_no_conflicts_single_var\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_no_conflicts_multi_var\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_no_conflicts_preserve_attrs\", \"xarray/tests/test_merge.py::TestMergeFunction::test_merge_no_conflicts_broadcast\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_broadcast_equals\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_auto_align\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_fill_value[fill_value0]\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_fill_value[2]\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_fill_value[2.0]\", \"xarray/tests/test_merge.py::TestMergeMethod::test_merge_no_conflicts\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.869258",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}