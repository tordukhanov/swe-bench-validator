{
  "repo": "django/django",
  "instance_id": "django__django-14751",
  "base_commit": "274771df9133542df048cc104c19e7756f9d3715",
  "patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -57,9 +57,20 @@ def add_arguments(self, parser):\n             '--check', action='store_true', dest='check_changes',\n             help='Exit with a non-zero status if model changes are missing migrations.',\n         )\n+        parser.add_argument(\n+            '--scriptable', action='store_true', dest='scriptable',\n+            help=(\n+                'Divert log output and input prompts to stderr, writing only '\n+                'paths of generated migration files to stdout.'\n+            ),\n+        )\n+\n+    @property\n+    def log_output(self):\n+        return self.stderr if self.scriptable else self.stdout\n \n     def log(self, msg):\n-        self.stdout.write(msg)\n+        self.log_output.write(msg)\n \n     @no_translations\n     def handle(self, *app_labels, **options):\n@@ -73,6 +84,10 @@ def handle(self, *app_labels, **options):\n             raise CommandError('The migration name must be a valid Python identifier.')\n         self.include_header = options['include_header']\n         check_changes = options['check_changes']\n+        self.scriptable = options['scriptable']\n+        # If logs and prompts are diverted to stderr, remove the ERROR style.\n+        if self.scriptable:\n+            self.stderr.style_func = None\n \n         # Make sure the app they asked for exists\n         app_labels = set(app_labels)\n@@ -147,7 +162,7 @@ def handle(self, *app_labels, **options):\n             questioner = InteractiveMigrationQuestioner(\n                 specified_apps=app_labels,\n                 dry_run=self.dry_run,\n-                prompt_output=self.stdout,\n+                prompt_output=self.log_output,\n             )\n         else:\n             questioner = NonInteractiveMigrationQuestioner(\n@@ -226,6 +241,8 @@ def write_migration_files(self, changes):\n                     self.log('  %s\\n' % self.style.MIGRATE_LABEL(migration_string))\n                     for operation in migration.operations:\n                         self.log('    - %s' % operation.describe())\n+                    if self.scriptable:\n+                        self.stdout.write(migration_string)\n                 if not self.dry_run:\n                     # Write the migrations file to the disk.\n                     migrations_directory = os.path.dirname(writer.path)\n@@ -254,7 +271,7 @@ def handle_merge(self, loader, conflicts):\n         if it's safe; otherwise, advises on how to fix it.\n         \"\"\"\n         if self.interactive:\n-            questioner = InteractiveMigrationQuestioner(prompt_output=self.stdout)\n+            questioner = InteractiveMigrationQuestioner(prompt_output=self.log_output)\n         else:\n             questioner = MigrationQuestioner(defaults={'ask_merge': True})\n \n@@ -327,6 +344,8 @@ def all_items_equal(seq):\n                         fh.write(writer.as_string())\n                     if self.verbosity > 0:\n                         self.log('\\nCreated new merge migration %s' % writer.path)\n+                        if self.scriptable:\n+                            self.stdout.write(writer.path)\n                 elif self.verbosity == 3:\n                     # Alternatively, makemigrations --merge --dry-run --verbosity 3\n                     # will log the merge migrations rather than saving the file\n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -1667,6 +1667,47 @@ class Meta:\n         self.assertIn(\"model_name='sillymodel',\", out.getvalue())\n         self.assertIn(\"name='silly_char',\", out.getvalue())\n \n+    def test_makemigrations_scriptable(self):\n+        \"\"\"\n+        With scriptable=True, log output is diverted to stderr, and only the\n+        paths of generated migration files are written to stdout.\n+        \"\"\"\n+        out = io.StringIO()\n+        err = io.StringIO()\n+        with self.temporary_migration_module(\n+            module='migrations.migrations.test_migrations',\n+        ) as migration_dir:\n+            call_command(\n+                'makemigrations',\n+                'migrations',\n+                scriptable=True,\n+                stdout=out,\n+                stderr=err,\n+            )\n+        initial_file = os.path.join(migration_dir, '0001_initial.py')\n+        self.assertEqual(out.getvalue(), f'{initial_file}\\n')\n+        self.assertIn('    - Create model ModelWithCustomBase\\n', err.getvalue())\n+\n+    @mock.patch('builtins.input', return_value='Y')\n+    def test_makemigrations_scriptable_merge(self, mock_input):\n+        out = io.StringIO()\n+        err = io.StringIO()\n+        with self.temporary_migration_module(\n+            module='migrations.test_migrations_conflict',\n+        ) as migration_dir:\n+            call_command(\n+                'makemigrations',\n+                'migrations',\n+                merge=True,\n+                name='merge',\n+                scriptable=True,\n+                stdout=out,\n+                stderr=err,\n+            )\n+        merge_file = os.path.join(migration_dir, '0003_merge.py')\n+        self.assertEqual(out.getvalue(), f'{merge_file}\\n')\n+        self.assertIn(f'Created new merge migration {merge_file}', err.getvalue())\n+\n     def test_makemigrations_migrations_modules_path_not_exist(self):\n         \"\"\"\n         makemigrations creates migrations when specifying a custom location\n",
  "problem_statement": "Make makemigrations scriptable / script-friendly\nDescription\n\t\nCurrently, the makemigrations management command doesn't lend itself well to scripting. For example, it writes its progress output to stdout rather than stderr. Also, there doesn't appear to be a structured / programmatic way to figure out what files it has created.\nMy use case is that in my development environment, I'd like to be able to run makemigrations in a Docker container, find out what files were added (e.g. from makemigrations's output), and then copy those files from the Docker container to my development machine so they can be added to source control.\nCurrently, there doesn't seem to be an easy way to do this. One way, for example, is to manually read makemigrations's output to find out what apps were affected, and then inspect the directories yourself for the new files.\nBetter, for example, would be if makemigrations could write the paths to the created files to stdout.\n",
  "hints_text": "The current makemigrations command would seem to allow for everything you have asked. # Define People and Poll models >> python -m manage makemigrations Migrations for 'newspaper': newspaper\\migrations\\0001_initial.py - Create model People Migrations for 'polls': polls\\migrations\\0001_initial.py - Create model Poll # Add new_field to People Model >> python -m manage makemigrations Migrations for 'newspaper': newspaper\\migrations\\0002_people_new_field.py - Add field new_field to people Addressing each point: Output written to stdout rather than stderr. You can redirect stdout to stderr for the execution of the command if you want the output in stderr. (Using sys in python, or pipes for a shell script) A structured / programmatic way to figure out what files it has created. Run a regex on the output of the migration command. Example pattern: r'Migrations for '(?P<app_name>[^']*)':\\n (?P<migration_file>[^\\n]*)' Is there a reason this would not meet your needs?\nI don't consider parsing log output with regexes to be structured output or a programmatic API. That seems brittle and unnecessarily complicated, and also would be hard for Django to make backwards compatibility guarantees about. What I had in mind was something like log output going to stderr, and the paths of the created files going to stdout -- one per line. If something fancier was needed, json could be outputted. With something like that, there wouldn't be any need for regex parsing and the API would be well-defined.\nIt seems complicated. For example, what if makemigrations requires interactive input from the questioner?\nMy original use case was a non-interactive one (inside a container). But again, you raise a good point. Obviously, piping to stdout won't work if interactivity is required (because you'd want user prompts to go to stdout). This is true of any script, not just Django management commands. Other than that, I don't think the changes I've described would hurt things in that case, aside from possibly the \"reliability\" issue you mentioned here. That though could be addressed by my follow-up comment to yours. If we wanted a fancier solution, the \"structured\" stdout could be outputted only in non-interactive mode.\nI'm skeptical, but I guess if you have a patch to propose, we can evaluate it.\nI closed #29470 as a duplicate.\nIf you are developing with Docker, why are you not just mounting your development machines source directory into the container, execute makemigrations and then you have the migrations directly on your machine. This way you can save yourself from parsing anything.",
  "created_at": "2021-08-07T14:53:57Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"With scriptable=True, log output is diverted to stderr, and only the\", \"test_makemigrations_scriptable_merge (migrations.test_commands.MakeMigrationsTests)\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashed_name_exists (migrations.test_commands.SquashMigrationsTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"squashmigrations doesn't accept a starting migration after the ending migration.\", \"test_squashmigrations_manual_porting (migrations.test_commands.SquashMigrationsTests)\", \"squashmigrations optimizes operations.\", \"squashmigrations squashes migrations.\", \"squashmigrations accepts a starting migration.\", \"squashmigrations --no-optimize doesn't optimize operations.\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations respects --dry-run option when fixing migration\", \"`makemigrations --merge --dry-run` writes the merge migration file to\", \"test_makemigrations_auto_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations prompts the user when adding auto_now_add to an existing\", \"test_makemigrations_auto_now_add_interactive_quit (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations --check should exit with a non-zero status when\", \"makemigrations exits if it detects a conflict.\", \"The history consistency checks in makemigrations respect\", \"test_makemigrations_continues_number_sequence_after_squash (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations raises a nice error when migrations are disabled for an\", \"`makemigrations --dry-run` should not ask for defaults.\", \"Allow `makemigrations --dry-run` to output the migrations file to\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations properly constructs an empty migration.\", \"makemigrations exits if no app is specified with 'empty' mode.\", \"test_makemigrations_field_rename_interactive (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations properly merges the conflicting migrations with --noinput.\", \"makemigrations should raise InconsistentMigrationHistory exception if\", \"test_makemigrations_inconsistent_history_db_failure (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations enters interactive mode and merges properly.\", \"The user is prompted to merge by default if there are conflicts and\", \"makemigrations messages when adding a NOT NULL field in interactive\", \"makemigrations messages when changing a NULL field to NOT NULL in\", \"makemigrations enters and exits interactive mode properly.\", \"makemigrations prompts the user when adding a unique field with\", \"makemigrations --merge does not output any operations from apps that\", \"makemigrations exits if in merge mode with no conflicts.\", \"makemigrations should print the relative paths to the migrations unless\", \"makemigrations prints the absolute path if os.path.relpath() raises a\", \"makemigrations announces the migration at the default verbosity level.\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations creates migrations when specifying a custom location\", \"test_makemigrations_model_rename_interactive (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations should detect initial is needed on empty migration\", \"makemigrations exits when there are no changes to an app.\", \"makemigrations exits when there are no changes and no apps are specified.\", \"makemigrations fails to merge migrations with no common ancestor.\", \"Migration directories without an __init__.py file are allowed.\", \"Non-interactive makemigrations fails when a default is missing on a\", \"makemigrations adds and removes a possible field rename in\", \"makemigrations adds and removes a possible model rename in\", \"test_makemigrations_non_interactive_unique_callable_default_addition (migrations.test_commands.MakeMigrationsTests)\", \"makemigrations should recognize number-only migrations (0001.py).\", \"makemigrations does not create a merge for an unspecified app even if\", \"makemigrations does not raise a CommandError when an unspecified app\", \"makemigrations --name generate a custom migration name.\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_ambiguous_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"Tests basic usage of the migrate command.\", \"test_migrate_backward_to_squashed_migration (migrations.test_commands.MigrateTests)\", \"test_migrate_check (migrations.test_commands.MigrateTests)\", \"test_migrate_check_plan (migrations.test_commands.MigrateTests)\", \"migrate exits if it detects a conflict.\", \"--fake-initial only works if all tables created in the initial\", \"test_migrate_fake_initial_case_insensitive (migrations.test_commands.MigrateTests)\", \"Split initial migrations can be faked with --fake-initial.\", \"Running migrate with some migrations applied before their dependencies\", \"`Migration.initial = False` skips fake-initial detection.\", \"test_migrate_not_reflected_changes (migrations.test_commands.MigrateTests)\", \"Migrating to a squashed migration specified by name should succeed\", \"Tests migrate --plan output.\", \"Running a single squashed migration should record all of the original\", \"Running migrate for a squashed migration should record as run\", \"Running migrate --run-syncdb with an app_label only creates tables for\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"For an app without migrations, editor.execute() is used for executing\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_migrations_no_operations (migrations.test_commands.MigrateTests)\", \"Assuming you have 3 apps, `A`, `B`, and `C`, such that:\", \"showmigrations --list  displays migrations and whether or not they're\", \"test_showmigrations_list_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"Tests --plan output of showmigrations command\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"`showmigrations --plan app_label` output with multiple app_labels.\", \"Tests --plan output of showmigrations command without migrations\", \"`showmigrations --plan app_label` output with a single app_label.\", \"Tests --plan output of showmigrations command with squashed migrations.\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_ambiguous_prefix_squashed_migrations (migrations.test_commands.MigrateTests)\", \"sqlmigrate outputs reverse looking SQL.\", \"Transaction wrappers aren't shown for non-atomic migrations.\", \"Transaction wrappers aren't shown for databases that don't support\", \"sqlmigrate outputs forward looking SQL.\", \"test_sqlmigrate_replaced_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_squashed_migration (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.701965",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}