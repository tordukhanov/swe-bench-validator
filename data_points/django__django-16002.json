{
  "repo": "django/django",
  "instance_id": "django__django-16002",
  "base_commit": "806e9e2d0dcf8f58e376fb7e2a8b9771e2a9ce16",
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2,7 +2,6 @@\n import copy\n import datetime\n import decimal\n-import math\n import operator\n import uuid\n import warnings\n@@ -1703,22 +1702,24 @@ def get_internal_type(self):\n     def to_python(self, value):\n         if value is None:\n             return value\n-        if isinstance(value, float):\n-            if math.isnan(value):\n-                raise exceptions.ValidationError(\n-                    self.error_messages[\"invalid\"],\n-                    code=\"invalid\",\n-                    params={\"value\": value},\n-                )\n-            return self.context.create_decimal_from_float(value)\n         try:\n-            return decimal.Decimal(value)\n+            if isinstance(value, float):\n+                decimal_value = self.context.create_decimal_from_float(value)\n+            else:\n+                decimal_value = decimal.Decimal(value)\n         except (decimal.InvalidOperation, TypeError, ValueError):\n             raise exceptions.ValidationError(\n                 self.error_messages[\"invalid\"],\n                 code=\"invalid\",\n                 params={\"value\": value},\n             )\n+        if not decimal_value.is_finite():\n+            raise exceptions.ValidationError(\n+                self.error_messages[\"invalid\"],\n+                code=\"invalid\",\n+                params={\"value\": value},\n+            )\n+        return decimal_value\n \n     def get_db_prep_save(self, value, connection):\n         return connection.ops.adapt_decimalfield_value(\n",
  "test_patch": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -67,10 +67,19 @@ def test_save_without_float_conversion(self):\n \n     def test_save_nan_invalid(self):\n         msg = \"“nan” value must be a decimal number.\"\n-        with self.assertRaisesMessage(ValidationError, msg):\n-            BigD.objects.create(d=float(\"nan\"))\n-        with self.assertRaisesMessage(ValidationError, msg):\n-            BigD.objects.create(d=math.nan)\n+        for value in [float(\"nan\"), math.nan, \"nan\"]:\n+            with self.subTest(value), self.assertRaisesMessage(ValidationError, msg):\n+                BigD.objects.create(d=value)\n+\n+    def test_save_inf_invalid(self):\n+        msg = \"“inf” value must be a decimal number.\"\n+        for value in [float(\"inf\"), math.inf, \"inf\"]:\n+            with self.subTest(value), self.assertRaisesMessage(ValidationError, msg):\n+                BigD.objects.create(d=value)\n+        msg = \"“-inf” value must be a decimal number.\"\n+        for value in [float(\"-inf\"), -math.inf, \"-inf\"]:\n+            with self.subTest(value), self.assertRaisesMessage(ValidationError, msg):\n+                BigD.objects.create(d=value)\n \n     def test_fetch_from_db_without_float_rounding(self):\n         big_decimal = BigD.objects.create(d=Decimal(\".100000000000000000000000000005\"))\n",
  "problem_statement": "\"NaN\" can be stored in DecimalField but cannot be retrieved\nDescription\n\t \n\t\t(last modified by Xabier Bello)\n\t \nSame as ticket https://code.djangoproject.com/ticket/33033, but I managed to trigger it anyway:\nSteps to reproduce\nCreate a brand new project using python 3.10 and django 4.1 with the default sqlite3 backend.\nCreate a model with a DecimalField: \n\tclass MyModel(models.Model):\n\t\tvalue = models.DecimalField(max_digits=10, decimal_places=5)\nProgrammatically create a model instance with value=\"nan\",\n\tobj = MyModel.objects.create(value=\"nan\")\n\tobj.save()\nThen try to retrieve the object from the database (or refresh from database):\n\tMyModel.objects.get(pk=1)\nTraceback\n\tTraceback (most recent call last):\n\t File \"/sandbox/dj/bug/dec/views.py\", line 9, in <module>\n\t\tMyModel.objects.get(pk=1)\n\t File \"/lib64/python3.10/site-packages/django/db/models/manager.py\", line 85, in manager_method\n\t\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n\t File \"/lib64/python3.10/site-packages/django/db/models/query.py\", line 646, in get\n\t\tnum = len(clone)\n\t File \"/lib64/python3.10/site-packages/django/db/models/query.py\", line 376, in __len__\n\t\tself._fetch_all()\n\t File \"/lib64/python3.10/site-packages/django/db/models/query.py\", line 1866, in _fetch_all\n\t\tself._result_cache = list(self._iterable_class(self))\n\t File \"/lib64/python3.10/site-packages/django/db/models/query.py\", line 117, in __iter__\n\t\tfor row in compiler.results_iter(results):\n\t File \"/lib64/python3.10/site-packages/django/db/models/sql/compiler.py\", line 1333, in apply_converters\n\t\tvalue = converter(value, expression, connection)\n\t File \"/lib64/python3.10/site-packages/django/db/backends/sqlite3/operations.py\", line 344, in converter\n\t\treturn create_decimal(value).quantize(\n\tTypeError: argument must be int or float\nThe value \"nan\" (and maybe \"inf\" also) skip the validation in DecimalField.to_python, because is not None, and is not instance of float. But decimal.Decimal(\"nan\") works without triggering the exception, so NaN gets stored in the DB.\n",
  "hints_text": "Django offers both model et form validation. If you insert values without using either one, you are on your own and responsible for what you insert in the database. I dont' think Django should do more here. To be confirmed.\nReplying to Claude Paroz: Django offers both model et form validation. If you insert values without using either one, you are on your own and responsible for what you insert in the database. I dont' think Django should do more here. To be confirmed. Yes, we have both model and form validation for NaNs. I don't think we should do more than that.\nReplying to Mariusz Felisiak: Replying to Claude Paroz: Django offers both model et form validation. If you insert values without using either one, you are on your own and responsible for what you insert in the database. I dont' think Django should do more here. To be confirmed. Yes, we have both model and form validation for NaNs. I don't think we should do more than that. What made me report as a bug is that in db.models.fields.DecimalField, method to_python, there are two shields against invalid values, one of them explicit against nan. Both \"nan\" and \"inf\" can be weeded out early if the check is if not math.isfinite instead of if math.isnan, as it's actually implemented in the form validation. Currently float(\"inf\") fails to store in the DB as \"Infinite\" because it can't be quantize'd at db/backends/utils.py::format_number (decimal.InvalidOperation), while \"nan\" can. Notice that I'm using the Model validation, if I'm not mistaken and it refers to creating objects with MyModel.objects.create. E.g. this works and happily stores \"NaN\" in the DB: obj = MyModel.objects.create(value=\"nan\") But this fails with a ValidationError raised from DecimalField.to_python: obj = MyModel.objects.create(value=\"invalid\") django.core.exceptions.ValidationError: ['“invalid” value must be a decimal number.'] And this fails with decimal.InvalidOperation: obj = MyModel.objects.create(value=\"inf\") decimal.InvalidOperation: [<class 'decimal.InvalidOperation'>] IMHO it would be better interface to fail before saving, than to store the value and then fail on retrieving. The form validation does this, creating a valid Decimal even if the value entered are the strings \"nan\" or \"inf\" (in to_python()), and then check that only Decimal.is_finite() are valid values (in validate()). This would be my refactor to DecimalField.to_python, without adding any code, to consistently raise a ValidationError for all \"inf\", \"nan\" and invalid inputs, instead of one for each. 1703 def to_python(self, value): 1704 if value is None: 1705 return value 1706 if isinstance(value, float): 1707 result = self.context.create_decimal_from_float(value) 1708 try: 1709 result = decimal.Decimal(value) 1710 except (decimal.InvalidOperation, TypeError, ValueError): # Catches everything except \"nan\" and \"inf\" 1711 raise exceptions.ValidationError( 1712 self.error_messages[\"invalid\"], 1713 code=\"invalid\", 1714 params={\"value\": value}, 1715 ) 1716 if not result.is_finite(): # Catches both \"nan\" and \"inf\" 1717 raise exceptions.ValidationError( 1718 self.error_messages[\"invalid\"], 1719 code=\"invalid\", 1720 params={\"value\": value}, 1721 ) 1722 return result Thanks for your time!\nNotice that I'm using the Model validation, if I'm not mistaken and it refers to creating objects with MyModel.objects.create Not really, .create() and .save() don't call full_clean() (see ​docs). We added extra guards in #33033 because on some databases (SQLite and PostgreSQL) NaN values are accepted without raising any database-level errors. I agree that we should add the same checks for \"nan\" strings.",
  "created_at": "2022-08-26T13:11:53Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_save_inf_invalid (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_save_nan_invalid (model_fields.test_decimalfield.DecimalFieldTests)\"]",
  "PASS_TO_PASS": "[\"test_default (model_fields.test_decimalfield.DecimalFieldTests)\", \"Should be able to filter decimal fields using strings (#8023).\", \"test_get_prep_value (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_invalid_value (model_fields.test_decimalfield.DecimalFieldTests)\", \"Really big values can be used in a filter statement.\", \"test_max_decimal_places_validation (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_max_digits_validation (model_fields.test_decimalfield.DecimalFieldTests)\", \"test_max_whole_digits_validation (model_fields.test_decimalfield.DecimalFieldTests)\", \"Trailing zeros in the fractional part aren't truncated.\", \"Ensure decimals don't go through a corrupting float conversion during\", \"test_to_python (model_fields.test_decimalfield.DecimalFieldTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.744713",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}