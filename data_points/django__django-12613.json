{
  "repo": "django/django",
  "instance_id": "django__django-12613",
  "base_commit": "82da72b74851808c08ec98fe609efe52609f29ad",
  "patch": "diff --git a/django/core/serializers/xml_serializer.py b/django/core/serializers/xml_serializer.py\n--- a/django/core/serializers/xml_serializer.py\n+++ b/django/core/serializers/xml_serializer.py\n@@ -1,7 +1,7 @@\n \"\"\"\n XML serializer.\n \"\"\"\n-\n+import json\n from xml.dom import pulldom\n from xml.sax import handler\n from xml.sax.expatreader import ExpatParser as _ExpatParser\n@@ -75,8 +75,13 @@ def handle_field(self, obj, field):\n \n         # Get a \"string version\" of the object's data.\n         if getattr(obj, field.name) is not None:\n+            value = field.value_to_string(obj)\n+            if field.get_internal_type() == 'JSONField':\n+                # Dump value since JSONField.value_to_string() doesn't output\n+                # strings.\n+                value = json.dumps(value, cls=field.encoder)\n             try:\n-                self.xml.characters(field.value_to_string(obj))\n+                self.xml.characters(value)\n             except UnserializableContentError:\n                 raise ValueError(\"%s.%s (pk:%s) contains unserializable characters\" % (\n                     obj.__class__.__name__, field.name, obj.pk))\n@@ -232,6 +237,9 @@ def _handle_object(self, node):\n                     value = None\n                 else:\n                     value = field.to_python(getInnerText(field_node).strip())\n+                    # Load value since JSONField.to_python() outputs strings.\n+                    if field.get_internal_type() == 'JSONField':\n+                        value = json.loads(value, cls=field.decoder)\n                 data[field.name] = value\n \n         obj = base.build_instance(Model, data, self.db)\n",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -149,6 +149,21 @@ def test_loading(self):\n                 )[0].object\n                 self.assertEqual(instance.value, value)\n \n+    def test_xml_serialization(self):\n+        test_xml_data = (\n+            '<django-objects version=\"1.0\">'\n+            '<object model=\"model_fields.nullablejsonmodel\">'\n+            '<field name=\"value\" type=\"JSONField\">%s'\n+            '</field></object></django-objects>'\n+        )\n+        for value, serialized in self.test_values:\n+            with self.subTest(value=value):\n+                instance = NullableJSONModel(value=value)\n+                data = serializers.serialize('xml', [instance], fields=['value'])\n+                self.assertXMLEqual(data, test_xml_data % serialized)\n+                new_instance = list(serializers.deserialize('xml', data))[0].object\n+                self.assertEqual(new_instance.value, instance.value)\n+\n \n @skipUnlessDBFeature('supports_json_field')\n class TestSaveLoad(TestCase):\n",
  "problem_statement": "XML serializer doesn't handle JSONFields.\nDescription\n\t\nI have code:\ndata = serializers.serialize(\"xml\", queryset, fields=fields)\nif I choose specific fields, which are not JSONField, it is ok. But if I choose field, which is JSONField, I receive error\n File \"/Users/ustnv/PycharmProjects/fpg_nko/venv/lib/python3.6/site-packages/django/core/serializers/__init__.py\", line 128, in serialize\n\ts.serialize(queryset, **options)\n File \"/Users/ustnv/PycharmProjects/fpg_nko/venv/lib/python3.6/site-packages/django/core/serializers/base.py\", line 107, in serialize\n\tself.handle_field(obj, field)\n File \"/Users/ustnv/PycharmProjects/fpg_nko/venv/lib/python3.6/site-packages/django/core/serializers/xml_serializer.py\", line 79, in handle_field\n\tself.xml.characters(field.value_to_string(obj))\n File \"/Users/ustnv/PycharmProjects/fpg_nko/venv/lib/python3.6/site-packages/django/utils/xmlutils.py\", line 25, in characters\n\tif content and re.search(r'[\\x00-\\x08\\x0B-\\x0C\\x0E-\\x1F]', content):\n File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/re.py\", line 182, in search\n\treturn _compile(pattern, flags).search(string)\nTypeError: expected string or bytes-like object\n",
  "hints_text": "Thanks for the report. I was able to reproduce this issue. Reproduced at a9179ab032cda80801e7f67ef20db5ee60989f21.\nHow *should* JSONField serialize into XML? Should it be serialized first into JSON then inserted into the node as a string? Should the Python data structure just be put as a string into the node? Something more complicated?\nâ€‹PR",
  "created_at": "2020-03-23T18:39:24Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_xml_serialization (model_fields.test_jsonfield.TestSerialization)\", \"test_dict (model_fields.test_jsonfield.TestSaveLoad)\"]",
  "PASS_TO_PASS": "[\"test_formfield (model_fields.test_jsonfield.TestFormField)\", \"test_formfield_custom_encoder_decoder (model_fields.test_jsonfield.TestFormField)\", \"test_deconstruct (model_fields.test_jsonfield.TestMethods)\", \"test_deconstruct_custom_encoder_decoder (model_fields.test_jsonfield.TestMethods)\", \"test_get_transforms (model_fields.test_jsonfield.TestMethods)\", \"test_key_transform_text_lookup_mixin_non_key_transform (model_fields.test_jsonfield.TestMethods)\", \"test_custom_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_decoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_validation_error (model_fields.test_jsonfield.TestValidation)\", \"test_custom_encoder_decoder (model_fields.test_jsonfield.JSONFieldTests)\", \"test_db_check_constraints (model_fields.test_jsonfield.JSONFieldTests)\", \"test_invalid_value (model_fields.test_jsonfield.JSONFieldTests)\", \"test_dumping (model_fields.test_jsonfield.TestSerialization)\", \"test_loading (model_fields.test_jsonfield.TestSerialization)\", \"test_json_null_different_from_sql_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_list (model_fields.test_jsonfield.TestSaveLoad)\", \"test_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_primitives (model_fields.test_jsonfield.TestSaveLoad)\", \"test_realistic_object (model_fields.test_jsonfield.TestSaveLoad)\", \"test_contained_by (model_fields.test_jsonfield.TestQuerying)\", \"test_contains (model_fields.test_jsonfield.TestQuerying)\", \"test_contains_primitives (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_array (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_mixed (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_objs (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_values (model_fields.test_jsonfield.TestQuerying)\", \"test_exact (model_fields.test_jsonfield.TestQuerying)\", \"test_exact_complex (model_fields.test_jsonfield.TestQuerying)\", \"test_has_any_keys (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_deep (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_list (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_null_value (model_fields.test_jsonfield.TestQuerying)\", \"test_has_keys (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key_or_none (model_fields.test_jsonfield.TestQuerying)\", \"test_key_contains (model_fields.test_jsonfield.TestQuerying)\", \"test_key_endswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_icontains (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iendswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iexact (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iregex (model_fields.test_jsonfield.TestQuerying)\", \"test_key_istartswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_regex (model_fields.test_jsonfield.TestQuerying)\", \"test_key_sql_injection_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_startswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_lookups_with_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_and_exact_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_exclude (model_fields.test_jsonfield.TestQuerying)\", \"test_obj_subquery_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_by_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_count (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_list_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_lookup_obj_target (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_obj_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_usage_in_subquery (model_fields.test_jsonfield.TestQuerying)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.631704",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}