{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9207",
  "base_commit": "d2c8cd3c803b27537a4d6f871279fce93d503d82",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1269,9 +1269,13 @@ def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder\n         if not matches:\n             return None\n         elif len(matches) > 1:\n-            logger.warning(__('more than one target found for cross-reference %r: %s'),\n-                           target, ', '.join(match[0] for match in matches),\n-                           type='ref', subtype='python', location=node)\n+            canonicals = [m for m in matches if not m[1].aliased]\n+            if len(canonicals) == 1:\n+                matches = canonicals\n+            else:\n+                logger.warning(__('more than one target found for cross-reference %r: %s'),\n+                               target, ', '.join(match[0] for match in matches),\n+                               type='ref', subtype='python', location=node)\n         name, obj = matches[0]\n \n         if obj[2] == 'module':\n",
  "test_patch": "diff --git a/tests/roots/test-domain-py/canonical.rst b/tests/roots/test-domain-py/canonical.rst\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-domain-py/canonical.rst\n@@ -0,0 +1,9 @@\n+caninical\n+=========\n+\n+:py:class:`.Foo`\n+\n+.. py:module:: canonical\n+\n+.. py:class:: Foo\n+   :canonical: original.module.Foo\ndiff --git a/tests/roots/test-domain-py/index.rst b/tests/roots/test-domain-py/index.rst\n--- a/tests/roots/test-domain-py/index.rst\n+++ b/tests/roots/test-domain-py/index.rst\n@@ -5,3 +5,6 @@ test-domain-py\n \n     roles\n     module\n+    module_option\n+    abbr\n+    canonical\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -236,6 +236,17 @@ def find_obj(modname, prefix, obj_name, obj_type, searchmode=0):\n               ('roles', 'NestedParentA.NestedChildA.subchild_1', 'method', False))])\n \n \n+@pytest.mark.sphinx('html', testroot='domain-py', freshenv=True)\n+def test_domain_py_canonical(app, status, warning):\n+    app.builder.build_all()\n+\n+    content = (app.outdir / 'canonical.html').read_text()\n+    assert ('<a class=\"reference internal\" href=\"#canonical.Foo\" title=\"canonical.Foo\">'\n+            '<code class=\"xref py py-class docutils literal notranslate\">'\n+            '<span class=\"pre\">Foo</span></code></a>' in content)\n+    assert warning.getvalue() == ''\n+\n+\n def test_get_full_qualified_name():\n     env = Mock(domaindata={})\n     domain = PythonDomain(env)\n",
  "problem_statement": "Sphinx 4.0 finds more than one target for cross-reference\nHello everyone,\r\n\r\n**Describe the bug**\r\nAfter upgrading to 4.0.0 we have discovered that existing code is raising a warning with `more than one target found for cross-reference`. In 3.5.4 we did not see this warning\r\n\r\n**To Reproduce**\r\nI have set up a minimal reproduction repository here: https://github.com/felixhuettner/sphinx-duplicate-import-repoduction\r\n\r\nSteps to reproduce the behavior:\r\n```\r\n$ git clone https://github.com/felixhuettner/sphinx-duplicate-import-repoduction\r\n$ cd sphinx-duplicate-import-repoduction\r\n$ pip install -e .\r\n$ pip install sphinx\r\n$ cd docs\r\n$ sphinx-build -W . _build\r\n```\r\n\r\nOutput of the sphinx-build command:\r\n```\r\n‚ùØ sphinx-build -W . _build\r\nRunning Sphinx v4.0.0+/acf66bc4d\r\nmaking output directory... done\r\n[autosummary] generating autosummary for: index.rst\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [html]: targets for 1 source files that are out of date\r\nupdating environment: [new config] 1 added, 0 changed, 0 removed\r\nreading sources... [100%] index\r\nlooking for now-outdated files... none found\r\npickling environment... done\r\nchecking consistency... done\r\npreparing documents... done\r\nwriting output... [100%] index\r\n\r\nWarning, treated as error:\r\n..../sphinxtest/test/file2.py:docstring of test.file2.SomeClass.somemethod::more than one target found for cross-reference 'TestError': test.TestError, test.file1.TestError\r\n```\r\n\r\n\r\n**Expected behavior**\r\nno warning appears\r\n\r\n**Your project**\r\nhttps://github.com/felixhuettner/sphinx-duplicate-import-repoduction\r\n\r\n\r\n**Environment info**\r\n- OS: Linux\r\n- Python version: 3.9.4\r\n- Sphinx version: 4.0.0\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n\r\n**Additional context**\r\nI have bisected the issue to be introduced by https://github.com/sphinx-doc/sphinx/commit/acf66bc4d5b53189f893a50a235e710f063d629d\r\n\r\nThanks verry much\r\n\n",
  "hints_text": "Thank you for reporting.\r\n\r\nI reproduced the same error with this mark-up:\r\n```\r\n.. py:class:: TestError\r\n   :module: test\r\n   :canonical: test.file1.TestError\r\n\r\n.. py:method:: SomeClass.somemethod()\r\n   :module: test.file2\r\n\r\n   :raises .TestError: abc\r\n```",
  "created_at": "2021-05-10T16:10:03Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_domain_py_canonical\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_xrefs_abbreviations\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_pyfunction_with_union_type_operator\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_exceptions_module_is_ignored\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pydata_with_union_type_operator\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pyproperty\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_canonical\", \"tests/test_domain_py.py::test_canonical_definition_overrides\", \"tests/test_domain_py.py::test_canonical_definition_skip\", \"tests/test_domain_py.py::test_canonical_duplicated\", \"tests/test_domain_py.py::test_info_field_list\", \"tests/test_domain_py.py::test_info_field_list_var\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled\", \"tests/test_domain_py.py::test_warn_missing_reference\"]",
  "environment_setup_commit": "8939a75efaa911a12dbe6edccedf261e88bf7eef",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.063503",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}