{
  "repo": "django/django",
  "instance_id": "django__django-16067",
  "base_commit": "c11336cd990e155371a5185cf3bd6942cad8d9da",
  "patch": "diff --git a/django/core/validators.py b/django/core/validators.py\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -486,8 +486,10 @@ def __call__(self, value):\n                 self.messages[\"invalid\"], code=\"invalid\", params={\"value\": value}\n             )\n         if exponent >= 0:\n-            # A positive exponent adds that many trailing zeros.\n-            digits = len(digit_tuple) + exponent\n+            digits = len(digit_tuple)\n+            if digit_tuple != (0,):\n+                # A positive exponent adds that many trailing zeros.\n+                digits += exponent\n             decimals = 0\n         else:\n             # If the absolute value of the negative exponent is larger than the\n",
  "test_patch": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -548,6 +548,7 @@\n         Decimal(\"70E-6\"),\n         ValidationError,\n     ),\n+    (DecimalValidator(max_digits=2, decimal_places=1), Decimal(\"0E+1\"), None),\n     # 'Enter a number.' errors\n     *[\n         (\n",
  "problem_statement": "DecimalValidator fails to validate 0 in scientific notation (0E+1 or 0E+2)\nDescription\n\t \n\t\t(last modified by Shiplu Mokaddim)\n\t \nIn 1.11.29 DecimalValidator treats 0E+1 as valid decimal\n>>> from django.forms.fields import DecimalField\n>>> DecimalField(max_digits=8, decimal_places=7).clean('0E+1')\nDecimal('0E+1')\nBut in 2.0.13 it raises ValidatorError.\n>>> DecimalField(max_digits=8, decimal_places=7).clean('0E+1')\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"/Users/amokaddim/e/fh/lib/python3.8/site-packages/django/forms/fields.py\", line 150, in clean\n\tself.run_validators(value)\n File \"/Users/amokaddim/e/fh/lib/python3.8/site-packages/django/forms/fields.py\", line 141, in run_validators\n\traise ValidationError(errors)\ndjango.core.exceptions.ValidationError: <exception str() failed>\nThis was introduced in â€‹https://github.com/django/django/commit/7c6590af5f199c9ede970758877b5c1eb7e9b3a6#diff-d9609d8dc8482b30eac30df16213cba134562949fd62c97573927b89e880f85b\nIs there any way I can prevent this validation error from happening in Django 2.0? Any flag or option that will prevent this?\nCalling Decimal('0E+1').normalize() inside to_python method solves the problem. But that's a workaround!\nHere is a reproducible test case.\nfrom unittest import TestCase\nfrom decimal import Decimal\nfrom django.core.validators import DecimalValidator\nfrom django.core.exceptions import ValidationError\nclass Test(TestCase):\n\tdef test(self):\n\t\tvalue = '0E+1'\n\t\tvalidator = DecimalValidator(8, 7)\n\t\ttry:\n\t\t\tvalidator(Decimal(value))\n\t\texcept ValidationError:\n\t\t\tself.fail(\"'{}' is an invalid decimal\".format(value))\n",
  "hints_text": "Thanks for the report. We should fix an edge case with 0, maybe: django/core/validators.py diff --git a/django/core/validators.py b/django/core/validators.py index 473203a67e..446f97af10 100644 a b class DecimalValidator: 487487 ) 488488 if exponent >= 0: 489489 # A positive exponent adds that many trailing zeros. 490 digits = len(digit_tuple) + exponent 490 digits = len(digit_tuple) 491 if digit_tuple != (0,): 492 digits += exponent 491493 decimals = 0 492494 else: 493495 # If the absolute value of the negative exponent is larger than the",
  "created_at": "2022-09-16T19:47:22Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_validators (validators.tests.TestValidators)\"]",
  "PASS_TO_PASS": "[\"test_basic_equality (validators.tests.TestValidatorEquality)\", \"test_decimal_equality (validators.tests.TestValidatorEquality)\", \"test_email_equality (validators.tests.TestValidatorEquality)\", \"test_file_extension_equality (validators.tests.TestValidatorEquality)\", \"test_prohibit_null_characters_validator_equality (validators.tests.TestValidatorEquality)\", \"test_regex_equality (validators.tests.TestValidatorEquality)\", \"test_regex_equality_blank (validators.tests.TestValidatorEquality)\", \"test_regex_equality_nocache (validators.tests.TestValidatorEquality)\", \"test_max_length_validator_message (validators.tests.TestValidators)\", \"test_message_dict (validators.tests.TestValidators)\", \"test_message_list (validators.tests.TestValidators)\", \"test_regex_validator_flags (validators.tests.TestValidators)\", \"test_single_message (validators.tests.TestValidators)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.746482",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}