{
  "repo": "django/django",
  "instance_id": "django__django-13410",
  "base_commit": "580a4341cb0b4cbfc215a70afc004875a7e815f4",
  "patch": "diff --git a/django/core/files/locks.py b/django/core/files/locks.py\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,12 @@ def unlock(f):\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except BlockingIOError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-            return ret == 0\n+            fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+            return True\n",
  "test_patch": "diff --git a/tests/files/tests.py b/tests/files/tests.py\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -8,7 +8,7 @@\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n@@ -169,6 +169,22 @@ def test_io_wrapper(self):\n             test_file.seek(0)\n             self.assertEqual(test_file.read(), (content * 2).encode())\n \n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n \n class NoNameFileTestCase(unittest.TestCase):\n     \"\"\"\n",
  "problem_statement": "Bug in posix implementation of django/core/files/locks.py\nDescription\n\t\nThe posix version of locks (the version which supports import fcntl) has a bug. The code attempts to return True to indicate success or failure acquiring a lock, but instead it always returns False. The reason is that cpython fcntl module returns None if successful, and raises an OSError to indicate failure (see â€‹https://docs.python.org/3/library/fcntl.html#fcntl.flock).\nAnyone interested in using the non-blocking (i.e. locks.LOCKS_NB) requires a valid return value to know if they have successfully acquired the lock.\nI believe the correct implementation should be the following:\ndiff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex c46b00b905..4938347ea7 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,15 @@ else:\n\t\t\t return True\n\t else:\n\t\t def lock(f, flags):\n-\t\t\tret = fcntl.flock(_fd(f), flags)\n-\t\t\treturn ret == 0\n+\t\t\ttry:\n+\t\t\t\tfcntl.flock(_fd(f), flags)\n+\t\t\t\treturn True\n+\t\t\texcept OSError:\n+\t\t\t\treturn False\n\t\t def unlock(f):\n-\t\t\tret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-\t\t\treturn ret == 0\n+\t\t\ttry:\n+\t\t\t\tfcntl.flock(_fd(f), fcntl.LOCK_UN)\n+\t\t\t\treturn True\n+\t\t\texcept OSError:\n+\t\t\t\treturn False\n",
  "hints_text": "Thanks for the ticket. Would you like to prepare a pull request? (tests are also required).",
  "created_at": "2020-09-11T09:58:41Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_exclusive_lock (files.tests.FileTests)\", \"test_shared_lock (files.tests.FileTests)\"]",
  "PASS_TO_PASS": "[\"test_open_resets_file_to_start_and_returns_context_manager (files.tests.InMemoryUploadedFileTests)\", \"test_content_file_custom_name (files.tests.ContentFileTestCase)\", \"test_content_file_default_name (files.tests.ContentFileTestCase)\", \"test_content_file_input_type (files.tests.ContentFileTestCase)\", \"test_open_resets_file_to_start_and_returns_context_manager (files.tests.ContentFileTestCase)\", \"ContentFile.size changes after a write().\", \"test_noname_file_default_name (files.tests.NoNameFileTestCase)\", \"test_noname_file_get_size (files.tests.NoNameFileTestCase)\", \"test_in_memory_spooled_temp (files.tests.SpooledTempTests)\", \"test_written_spooled_temp (files.tests.SpooledTempTests)\", \"The temporary file name has the same suffix as the original file.\", \"test_file_upload_temp_dir_pathlib (files.tests.TemporaryUploadedFileTests)\", \"test_file_move_copystat_cifs (files.tests.FileMoveSafeTests)\", \"test_file_move_overwrite (files.tests.FileMoveSafeTests)\", \"test_context_manager (files.tests.FileTests)\", \"test_file_iteration (files.tests.FileTests)\", \"test_file_iteration_mac_newlines (files.tests.FileTests)\", \"test_file_iteration_mixed_newlines (files.tests.FileTests)\", \"test_file_iteration_windows_newlines (files.tests.FileTests)\", \"test_file_iteration_with_mac_newline_at_chunk_boundary (files.tests.FileTests)\", \"test_file_iteration_with_text (files.tests.FileTests)\", \"test_file_iteration_with_unix_newline_at_chunk_boundary (files.tests.FileTests)\", \"test_file_iteration_with_windows_newline_at_chunk_boundary (files.tests.FileTests)\", \"test_file_mode (files.tests.FileTests)\", \"test_io_wrapper (files.tests.FileTests)\", \"test_namedtemporaryfile_closes (files.tests.FileTests)\", \"test_open_reopens_closed_file_and_returns_context_manager (files.tests.FileTests)\", \"test_open_resets_opened_file_to_start_and_returns_context_manager (files.tests.FileTests)\", \"test_readable (files.tests.FileTests)\", \"test_seekable (files.tests.FileTests)\", \"test_unicode_file_name (files.tests.FileTests)\", \"test_unicode_uploadedfile_name (files.tests.FileTests)\", \"test_writable (files.tests.FileTests)\", \"test_closing_of_filenames (files.tests.DimensionClosingBug)\", \"test_not_closing_of_files (files.tests.DimensionClosingBug)\", \"test_bug_19457 (files.tests.InconsistentGetImageDimensionsBug)\", \"test_multiple_calls (files.tests.InconsistentGetImageDimensionsBug)\", \"test_invalid_image (files.tests.GetImageDimensionsTests)\", \"test_valid_image (files.tests.GetImageDimensionsTests)\", \"test_webp (files.tests.GetImageDimensionsTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.657040",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}