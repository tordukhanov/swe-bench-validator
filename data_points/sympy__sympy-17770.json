{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17770",
  "base_commit": "22ee6c048379d4d4d924dc497a2028a45d0d8b46",
  "patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -229,6 +229,16 @@ def _eval_as_leading_term(self, x):\n         else:\n             return self.func(arg)\n \n+    def _eval_is_real(self):\n+        arg = self.args[0]\n+        if arg.is_real:\n+            return True\n+\n+        # if `im` is of the form n*pi\n+        # else, check if it is a number\n+        re, im = arg.as_real_imag()\n+        return (im%pi).is_zero\n+\n     def _eval_is_extended_real(self):\n         if self.args[0].is_extended_real:\n             return True\n@@ -243,8 +253,7 @@ def _eval_is_negative(self):\n \n     def _eval_is_finite(self):\n         arg = self.args[0]\n-        if arg.is_imaginary:\n-            return True\n+        return arg.is_finite\n \n     def _eval_is_zero(self):\n         arg = self.args[0]\n@@ -398,14 +407,26 @@ def _eval_as_leading_term(self, x):\n         else:\n             return self.func(arg)\n \n+    def _eval_is_real(self):\n+        arg = self.args[0]\n+\n+        # `cosh(x)` is real for real OR purely imaginary `x`\n+        if arg.is_real or arg.is_imaginary:\n+            return True\n+\n+        # cosh(a+ib) = cos(b)*cosh(a) + i*sin(b)*sinh(a)\n+        # the imaginary part can be an expression like n*pi\n+        # if not, check if the imaginary part is a number\n+        re, im = arg.as_real_imag()\n+        return (im%pi).is_zero\n+\n     def _eval_is_positive(self):\n         if self.args[0].is_extended_real:\n             return True\n \n     def _eval_is_finite(self):\n         arg = self.args[0]\n-        if arg.is_imaginary:\n-            return True\n+        return arg.is_finite\n \n \n class tanh(HyperbolicFunction):\n@@ -548,6 +569,22 @@ def _eval_as_leading_term(self, x):\n         else:\n             return self.func(arg)\n \n+    def _eval_is_real(self):\n+        from sympy import cos, sinh\n+        arg = self.args[0]\n+        if arg.is_real:\n+            return True\n+\n+        re, im = arg.as_real_imag()\n+\n+        # if denom = 0, tanh(arg) = zoo\n+        if re == 0 and im % pi == pi/2:\n+            return None\n+\n+        # check if im is of the form n*pi/2 to make sin(2*im) = 0\n+        # if not, im could be a number, return False in that case\n+        return (im % (pi/2)).is_zero\n+\n     def _eval_is_extended_real(self):\n         if self.args[0].is_extended_real:\n             return True\n@@ -561,7 +598,15 @@ def _eval_is_negative(self):\n             return self.args[0].is_negative\n \n     def _eval_is_finite(self):\n+        from sympy import sinh, cos\n         arg = self.args[0]\n+\n+        re, im = arg.as_real_imag()\n+        denom = cos(im)**2 + sinh(re)**2\n+        if denom == 0:\n+            return False\n+        elif denom.is_number:\n+            return True\n         if arg.is_extended_real:\n             return True\n \n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -77,6 +77,8 @@ def test_sinh():\n \n     x = Symbol('x', real=True)\n     assert sinh(I*x).is_finite is True\n+    assert sinh(x).is_real is True\n+    assert sinh(I).is_real is False\n \n \n def test_sinh_series():\n@@ -157,6 +159,8 @@ def test_cosh():\n \n     x = Symbol('x', real=True)\n     assert cosh(I*x).is_finite is True\n+    assert cosh(I*x).is_real is True\n+    assert cosh(I*2 + 1).is_real is False\n \n \n def test_cosh_series():\n@@ -237,6 +241,9 @@ def test_tanh():\n                                 sin(im(x))*cos(im(x))/(cos(im(x))**2 + sinh(re(x))**2))\n     x = Symbol('x', extended_real=True)\n     assert tanh(x).as_real_imag(deep=False) == (tanh(x), 0)\n+    assert tanh(I*pi/3 + 1).is_real is False\n+    assert tanh(x).is_real is True\n+    assert tanh(I*pi*x/2).is_real is None\n \n \n def test_tanh_series():\n",
  "problem_statement": "Corrected functions in subclasses of `HyperbolicFunction`\nCorrected the `_eval_is_real` and `_eval_is_finite` functions.\r\n\r\nThese functions are still sort of incomplete (couldn't think of all cases, any improvements are welcome).\r\nThey can directly be used to define properties like `is_real` and `is_finite` for `cosh`, `sinh`, and `tanh`.\n",
  "hints_text": "",
  "created_at": "2019-10-21T18:38:27Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_sinh\", \"test_cosh\", \"test_tanh\"]",
  "PASS_TO_PASS": "[\"test_sinh_series\", \"test_sinh_fdiff\", \"test_cosh_series\", \"test_cosh_fdiff\", \"test_tanh_series\", \"test_tanh_fdiff\", \"test_coth\", \"test_coth_series\", \"test_coth_fdiff\", \"test_csch\", \"test_csch_series\", \"test_csch_fdiff\", \"test_sech\", \"test_sech_series\", \"test_sech_fdiff\", \"test_asinh\", \"test_asinh_rewrite\", \"test_asinh_series\", \"test_asinh_fdiff\", \"test_acosh\", \"test_acosh_rewrite\", \"test_acosh_series\", \"test_acosh_fdiff\", \"test_asech\", \"test_asech_series\", \"test_asech_rewrite\", \"test_asech_fdiff\", \"test_acsch\", \"test_acsch_infinities\", \"test_acsch_rewrite\", \"test_acsch_fdiff\", \"test_atanh\", \"test_atanh_rewrite\", \"test_atanh_series\", \"test_atanh_fdiff\", \"test_acoth\", \"test_acoth_rewrite\", \"test_acoth_series\", \"test_acoth_fdiff\", \"test_inverses\", \"test_leading_term\", \"test_complex\", \"test_complex_2899\", \"test_simplifications\", \"test_issue_4136\", \"test_sinh_rewrite\", \"test_cosh_rewrite\", \"test_tanh_rewrite\", \"test_coth_rewrite\", \"test_csch_rewrite\", \"test_sech_rewrite\", \"test_derivs\", \"test_sinh_expansion\", \"test_cosh_expansion\", \"test_real_assumptions\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.117838",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}