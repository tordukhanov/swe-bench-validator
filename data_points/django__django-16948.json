{
  "repo": "django/django",
  "instance_id": "django__django-16948",
  "base_commit": "4f6a51dfe6a4a8d5ed61c73b902e808109f142b0",
  "patch": "diff --git a/django/utils/html.py b/django/utils/html.py\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -3,9 +3,11 @@\n import html\n import json\n import re\n+import warnings\n from html.parser import HTMLParser\n from urllib.parse import parse_qsl, quote, unquote, urlencode, urlsplit, urlunsplit\n \n+from django.utils.deprecation import RemovedInDjango60Warning\n from django.utils.encoding import punycode\n from django.utils.functional import Promise, keep_lazy, keep_lazy_text\n from django.utils.http import RFC3986_GENDELIMS, RFC3986_SUBDELIMS\n@@ -100,6 +102,13 @@ def format_html(format_string, *args, **kwargs):\n     and call mark_safe() on the result. This function should be used instead\n     of str.format or % interpolation to build up small HTML fragments.\n     \"\"\"\n+    if not (args or kwargs):\n+        # RemovedInDjango60Warning: when the deprecation ends, replace with:\n+        # raise ValueError(\"args or kwargs must be provided.\")\n+        warnings.warn(\n+            \"Calling format_html() without passing args or kwargs is deprecated.\",\n+            RemovedInDjango60Warning,\n+        )\n     args_safe = map(conditional_escape, args)\n     kwargs_safe = {k: conditional_escape(v) for (k, v) in kwargs.items()}\n     return mark_safe(format_string.format(*args_safe, **kwargs_safe))\n",
  "test_patch": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -3,6 +3,7 @@\n \n from django.core.serializers.json import DjangoJSONEncoder\n from django.test import SimpleTestCase\n+from django.utils.deprecation import RemovedInDjango60Warning\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -65,6 +66,15 @@ def test_format_html(self):\n             \"&lt; Dangerous &gt; <b>safe</b> &lt; dangerous again <i>safe again</i>\",\n         )\n \n+    def test_format_html_no_params(self):\n+        msg = \"Calling format_html() without passing args or kwargs is deprecated.\"\n+        # RemovedInDjango60Warning: when the deprecation ends, replace with:\n+        # msg = \"args or kwargs must be provided.\"\n+        # with self.assertRaisesMessage(ValueError, msg):\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n+            name = \"Adam\"\n+            self.assertEqual(format_html(f\"<i>{name}</i>\"), \"<i>Adam</i>\")\n+\n     def test_linebreaks(self):\n         items = (\n             (\"para1\\n\\npara2\\r\\rpara3\", \"<p>para1</p>\\n\\n<p>para2</p>\\n\\n<p>para3</p>\"),\n",
  "problem_statement": "Deprecate format_html calls without args or kwargs\nDescription\n\t \n\t\t(last modified by Michael Howitz)\n\t \nIn my experience, a common misuse of format_html is to format the HTML before calling it:\nformat_html(f\"<i>{name}</i>\")\nThis makes it act like mark_safe, allowing data through without escaping. It provides a false sense of security since format_html is meant to be the \"safe way\".\nI propose we deprecate calls to format_html that donâ€™t pass args or kwargs, and eventually raise a TypeError for such cases.\n(Following improvement to format_html docs in #34595.)\n",
  "hints_text": "django/utils/html.py diff --git a/django/utils/html.py b/django/utils/html.py index c32a36fa93..b2a0c3d3db 100644 a b def format_html(format_string, *args, **kwargs): 100100 and call mark_safe() on the result. This function should be used instead 101101 of str.format or % interpolation to build up small HTML fragments. 102102 \"\"\" 103 if not (args or kwargs): 104 raise TypeError(\"Arguments are missing.\") 103105 args_safe = map(conditional_escape, args) 104106 kwargs_safe = {k: conditional_escape(v) for (k, v) in kwargs.items()} 105107 return mark_safe(format_string.format(*args_safe, **kwargs_safe)) tests/utils_tests/test_html.py diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py index b7a7396075..c83fe7ddf6 100644 a b class TestUtilsHtml(SimpleTestCase): 6565 \"&lt; Dangerous &gt; <b>safe</b> &lt; dangerous again <i>safe again</i>\", 6666 ) 6767 68 def test_format_html_no_args(self): 69 msg = \"Arguments are missing.\" 70 with self.assertRaisesMessage(TypeError, msg): 71 self.assertEqual( 72 format_html( 73 \"<i>{name}</i>\", 74 ), 75 \"<i>Adam</i>\", 76 ) 77 6878 def test_linebreaks(self): 6979 items = ( 7080 (\"para1\\n\\npara2\\r\\rpara3\", \"<p>para1</p>\\n\\n<p>para2</p>\\n\\n<p>para3</p>\"), Are these changes relevant? I don't have much experience with templates, still a lot to learn .ðŸ˜…\n@Bhuvnesh The issues talks about deprecating that args resp. kwargs can be missing. By raising an exception your suggested change make it impossible to call the function without these parameters. Maybe this is a bit too harsh. See also â€‹https://docs.djangoproject.com/en/dev/internals/release-process/#internal-release-deprecation-policy for documentation how to deprecate a feature.\nOK, so instead of TypeError I should raise a RemovedInDjango60Warning warning? It will raise warnings in v5.x and completely removed in v6.0 .",
  "created_at": "2023-06-06T09:18:49Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_format_html_no_params (utils_tests.test_html.TestUtilsHtml.test_format_html_no_params)\"]",
  "PASS_TO_PASS": "[\"test_conditional_escape (utils_tests.test_html.TestUtilsHtml.test_conditional_escape)\", \"test_escape (utils_tests.test_html.TestUtilsHtml.test_escape)\", \"test_escapejs (utils_tests.test_html.TestUtilsHtml.test_escapejs)\", \"test_format_html (utils_tests.test_html.TestUtilsHtml.test_format_html)\", \"test_html_safe (utils_tests.test_html.TestUtilsHtml.test_html_safe)\", \"test_html_safe_defines_html_error (utils_tests.test_html.TestUtilsHtml.test_html_safe_defines_html_error)\", \"test_html_safe_doesnt_define_str (utils_tests.test_html.TestUtilsHtml.test_html_safe_doesnt_define_str)\", \"test_html_safe_subclass (utils_tests.test_html.TestUtilsHtml.test_html_safe_subclass)\", \"test_json_script (utils_tests.test_html.TestUtilsHtml.test_json_script)\", \"test_json_script_custom_encoder (utils_tests.test_html.TestUtilsHtml.test_json_script_custom_encoder)\", \"test_json_script_without_id (utils_tests.test_html.TestUtilsHtml.test_json_script_without_id)\", \"test_linebreaks (utils_tests.test_html.TestUtilsHtml.test_linebreaks)\", \"test_smart_urlquote (utils_tests.test_html.TestUtilsHtml.test_smart_urlquote)\", \"test_strip_spaces_between_tags (utils_tests.test_html.TestUtilsHtml.test_strip_spaces_between_tags)\", \"test_strip_tags (utils_tests.test_html.TestUtilsHtml.test_strip_tags)\", \"test_strip_tags_files (utils_tests.test_html.TestUtilsHtml.test_strip_tags_files)\", \"test_urlize (utils_tests.test_html.TestUtilsHtml.test_urlize)\", \"test_urlize_unchanged_inputs (utils_tests.test_html.TestUtilsHtml.test_urlize_unchanged_inputs)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.776358",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}