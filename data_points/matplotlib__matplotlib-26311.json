{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26311",
  "base_commit": "3044bded1b23ae8dc73c1611b124e88db98308ac",
  "patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -370,7 +370,7 @@ def _split_path_and_get_label_rotation(self, path, idx, screen_pos, lw, spacing=\n         # path always starts with a MOVETO, and we consider there's an implicit\n         # MOVETO (closing the last path) at the end.\n         movetos = (codes == Path.MOVETO).nonzero()[0]\n-        start = movetos[movetos < idx][-1]\n+        start = movetos[movetos <= idx][-1]\n         try:\n             stop = movetos[movetos > idx][0]\n         except IndexError:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -1,6 +1,7 @@\n import datetime\n import platform\n import re\n+from unittest import mock\n \n import contourpy  # type: ignore\n import numpy as np\n@@ -233,6 +234,31 @@ def test_labels(split_collections):\n     _maybe_split_collections(split_collections)\n \n \n+def test_label_contour_start():\n+    # Set up data and figure/axes that result in automatic labelling adding the\n+    # label to the start of a contour\n+\n+    _, ax = plt.subplots(dpi=100)\n+    lats = lons = np.linspace(-np.pi / 2, np.pi / 2, 50)\n+    lons, lats = np.meshgrid(lons, lats)\n+    wave = 0.75 * (np.sin(2 * lats) ** 8) * np.cos(4 * lons)\n+    mean = 0.5 * np.cos(2 * lats) * ((np.sin(2 * lats)) ** 2 + 2)\n+    data = wave + mean\n+\n+    cs = ax.contour(lons, lats, data)\n+\n+    with mock.patch.object(\n+            cs, '_split_path_and_get_label_rotation',\n+            wraps=cs._split_path_and_get_label_rotation) as mocked_splitter:\n+        # Smoke test that we can add the labels\n+        cs.clabel(fontsize=9)\n+\n+    # Verify at least one label was added to the start of a contour.  I.e. the\n+    # splitting method was called with idx=0 at least once.\n+    idxs = [cargs[0][1] for cargs in mocked_splitter.call_args_list]\n+    assert 0 in idxs\n+\n+\n @pytest.mark.parametrize(\"split_collections\", [False, True])\n @image_comparison(['contour_corner_mask_False.png', 'contour_corner_mask_True.png'],\n                   remove_text=True, tol=1.88)\n",
  "problem_statement": "[Bug]: labels can't be placed at start of contours\n### Bug summary\r\n\r\nFor some combinations of contour shape and fontsize, the automatic label placement tries to put the label right at the start of the contour.  This is not currently possible on `main`.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nplt.rcdefaults()\r\n\r\n_, ax = plt.subplots()\r\nlats = lons = np.linspace(-np.pi / 2, np.pi / 2, 50, dtype=np.longdouble)\r\nlons, lats = np.meshgrid(lons, lats)\r\nwave = 0.75 * (np.sin(2 * lats) ** 8) * np.cos(4 * lons)\r\nmean = 0.5 * np.cos(2 * lats) * ((np.sin(2 * lats)) ** 2 + 2)\r\ndata = wave + mean\r\n\r\ncs = ax.contour(lons, lats, data)\r\ncs.clabel(fontsize=9)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"[snip]/contour_clabel_start.py\", line 14, in <module>\r\n    cs.clabel(fontsize=9)\r\n  File \"[git-path]/matplotlib/lib/matplotlib/contour.py\", line 222, in clabel\r\n    self.labels(inline, inline_spacing)\r\n  File \"[git-path]/matplotlib/lib/matplotlib/contour.py\", line 622, in labels\r\n    rotation, path = self._split_path_and_get_label_rotation(\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"[git-path]/matplotlib/lib/matplotlib/contour.py\", line 373, in _split_path_and_get_label_rotation\r\n    start = movetos[movetos < idx][-1]\r\n            ~~~~~~~~~~~~~~~~~~~~~~^^^^\r\nIndexError: index -1 is out of bounds for axis 0 with size 0\r\n```\r\n\r\n### Expected outcome\r\n\r\nWith v3.7.1 I get\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/655bde83-dd20-428b-84e6-8318d7001911)\r\n\r\n\r\n### Additional information\r\n\r\nThe fix is easy: https://github.com/matplotlib/matplotlib/commit/07f694dc3f0ef90e95e3dce44d4f4857b5dc6e55\r\n\r\nWriting a test seems harder.  I tried pasting the above code into a test, and it passed against `main`.  I assume that is because the tests have different \"screen space\" than when I just run it as a script.\r\n\r\nMarking as \"release critical\" because this is a regression.\r\n\r\n### Operating system\r\n\r\nRHEL7\r\n\r\n### Matplotlib Version\r\n\r\nmain\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.11.3\r\n\r\n### Jupyter version\r\n\r\nN/A\r\n\r\n### Installation\r\n\r\ngit checkout\n",
  "hints_text": "I left a comment on your commit.\r\n\r\nTrying to target the end of a broken contour might be easier?\n> Writing a test seems harder. I tried pasting the above code into a test, and it passed against main. I assume that is because the tests have different \"screen space\" than when I just run it as a script.\r\n\r\nCan you set the DPI of the figure in your test to whatever you're using locally so that the rendered size is the same and therefore transforms to the same screen-size?",
  "created_at": "2023-07-14T20:39:31Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_contour.py::test_label_contour_start\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input\", \"lib/matplotlib/tests/test_contour.py::test_contour_no_valid_levels\", \"lib/matplotlib/tests/test_contour.py::test_contour_Nlevels\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf-True]\", \"lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_labels[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_labels[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_corner_mask[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_corner_mask[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels\", \"lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator\", \"lib/matplotlib/tests/test_contour.py::test_circular_contour_warning\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]\", \"lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_log_extension[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contourf_log_extension[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_addlines[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_addlines[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_uneven[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_uneven[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]\", \"lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]\", \"lib/matplotlib/tests/test_contour.py::test_label_nonagg\", \"lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_manual[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_find_nearest_contour\", \"lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled\", \"lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits\", \"lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements\", \"lib/matplotlib/tests/test_contour.py::test_contour_legend_elements\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]\", \"lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]\", \"lib/matplotlib/tests/test_contour.py::test_all_algorithms[png-False]\", \"lib/matplotlib/tests/test_contour.py::test_all_algorithms[png-True]\", \"lib/matplotlib/tests/test_contour.py::test_subfigure_clabel\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[solid]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]\", \"lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]\", \"lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]\", \"lib/matplotlib/tests/test_contour.py::test_contour_remove\", \"lib/matplotlib/tests/test_contour.py::test_contour_no_args\", \"lib/matplotlib/tests/test_contour.py::test_bool_autolevel\", \"lib/matplotlib/tests/test_contour.py::test_all_nan\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.832317",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}