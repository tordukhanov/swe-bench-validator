{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15151",
  "base_commit": "e53e809176de9aa0fb62e85689f8cdb669d4cacb",
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -607,7 +607,8 @@ def _print_BasisDependent(self, expr):\n         return outstr\n \n     def _print_Indexed(self, expr):\n-        tex = self._print(expr.base)+'_{%s}' % ','.join(\n+        tex_base = self._print(expr.base)\n+        tex = '{'+tex_base+'}'+'_{%s}' % ','.join(\n             map(self._print, expr.indices))\n         return tex\n \n",
  "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,6 +1,6 @@\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n-    FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n+    FiniteSet, Float, FourierTransform, Function, Indexed, IndexedBase, Integral,\n     Interval, InverseCosineTransform, InverseFourierTransform,\n     InverseLaplaceTransform, InverseMellinTransform, InverseSineTransform,\n     Lambda, LaplaceTransform, Limit, Matrix, Max, MellinTransform, Min, Mul,\n@@ -522,11 +522,12 @@ def test_latex_indexed():\n     Psi_indexed = IndexedBase(Symbol('Psi', complex=True, real=False))\n     symbol_latex = latex(Psi_symbol * conjugate(Psi_symbol))\n     indexed_latex = latex(Psi_indexed[0] * conjugate(Psi_indexed[0]))\n-    # \\\\overline{\\\\Psi_{0}} \\\\Psi_{0}   vs.   \\\\Psi_{0} \\\\overline{\\\\Psi_{0}}\n-    assert symbol_latex.split() == indexed_latex.split() \\\n-        or symbol_latex.split() == indexed_latex.split()[::-1]\n+    # \\\\overline{{\\\\Psi}_{0}} {\\\\Psi}_{0}   vs.   \\\\Psi_{0} \\\\overline{\\\\Psi_{0}}\n+    assert symbol_latex == '\\\\Psi_{0} \\\\overline{\\\\Psi_{0}}'\n+    assert indexed_latex == '\\\\overline{{\\\\Psi}_{0}} {\\\\Psi}_{0}'\n \n     # Symbol('gamma') gives r'\\gamma'\n+    assert latex(Indexed('x1',Symbol('i'))) == '{x_{1}}_{i}'\n     assert latex(IndexedBase('gamma')) == r'\\gamma'\n     assert latex(IndexedBase('a b')) == 'a b'\n     assert latex(IndexedBase('a_b')) == 'a_{b}'\n",
  "problem_statement": "not pretty printing indexed(x1, i)\nnot sure if this is expected behavior but i'm expecting x_{1,i}\r\n\r\n![image](https://user-images.githubusercontent.com/3588248/43878942-9caaee84-9b6f-11e8-9f49-44800d684ceb.png)\r\n\n",
  "hints_text": "I guess the problem is that it's not valid LaTeX. We should at the very least wrap the indexedbase in `{}` in the printer so that it would print `{x_{1}}_{i}`. \nHello @majidaldo @asmeurer I have basic knowledge of Sympy and Python. I am interested in fixing this bug and I tried to reciprocate  @majidaldo  code.\r\nThe output I received was :-\r\n> x1[i]\r\n\r\n@asmeurer Could you please help me in understanding the issue so that I can try to fix it.\r\n\r\nRegards\r\nAyushman Koul\nYou need to run it in the notebook to get the LaTeX. Or you can just check `latex(Indexed('x1', Symbol('i')))`. \nThank You @asmeurer for responding.The problem we are getting as mentioned by @majidaldo the expected output in latex should have been  `x_{1,i}` but we are getting `x_{1}_{i}` which is not valid.Well do we need to alter the code in Latex file inside the printing directory to overcome this issue or any other file ?\r\nPlease help me in resolving this issue.\r\n\r\nRegards\r\nAyushman Koul\nI would focus on getting it to output `{x_{1}}_{i}`. Getting `x_{1,i}` is more difficult, and I'm not even sure if it should do that anyway. \nHi, I was working on this before I realized that @ayushmankoul  was working on this as well. I came up with the following  change:\r\n```diff\r\n+++ b/sympy/printing/latex.py\r\n@@ -607,7 +607,10 @@ def _print_BasisDependent(self, expr):\r\n         return outstr\r\n \r\n     def _print_Indexed(self, expr):\r\n-        tex = self._print(expr.base)+'_{%s}' % ','.join(\r\n+        tex_base = self._print(expr.base)\r\n+        if re.search(r'_\\{.\\}$', tex_base) is not None:\r\n+            tex_base = '{'+tex_base+'}'\r\n+        tex = tex_base+'_{%s}' % ','.join(\r\n             map(self._print, expr.indices))\r\n         return tex\r\n```\r\nMaybe this is of any help to you @ayushmankoul \r\nCheers.\nThank You @bPhysicist for sharing the code and one would get the desired output `{x_{1}}_{i}` which was suggested by @asmeurer  .May I know if you can point me to the test cases which checks for the validity of generated latex in case one would have to write a text case for this scenario ?\r\n\r\n```\r\nfrom sympy import*\r\nfrom sympy import init_printing;init_printing()\r\ni=symbols('i')\r\nprint Indexed('x1',i)     \r\nprint latex(Indexed('x1',i))\r\n```\r\n\r\nOutput:-\r\n```\r\nx1[i]\r\n{x_{1}}_{i}\r\n```\nThis is the file which contains latex tests:\r\nhttps://github.com/sympy/sympy/blob/master/sympy/printing/tests/test_latex.py\nI would omit the regex and just always wrap the base in {}\n@asmeurer @bPhysicist  I tried to alter the code to  wrap up the base always in {} which is as following:\r\n```\r\n def _print_Indexed(self, expr):\r\n-       tex = self._print(expr.base)+'_{%s}' % ','.join(\r\n+       tex_base = self._print(expr.base)\r\n-       if re.search(r'_\\{.\\}$', tex_base) is not None:\r\n+       tex_base = '{'+tex_base+'}'\r\n+       tex = tex_base+'_{%s}' % ','.join(\r\n               map(self._print, expr.indices))\r\n        return tex\r\n\r\n```\r\nBut the test cases failed due to following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"e:\\sympy\\sympy\\printing\\tests\\test_latex.py\", line 527, in test_latex_indexed\r\n    or symbol_latex.split() == indexed_latex.split()[::-1]\r\nAssertionError\r\n```\r\nOn investigating the cause of assertion error I found out that on changing the code,the value of `indexed_latex=\\\\overline{{\\\\Psi}_{0}} {\\\\Psi}_{0}` had addition of {}around Psi ,whereas the value of `symbol_latex=\\\\Psi_{0} \\\\overline{\\\\Psi_{0}}` was unchanged which led to assertion error.In order to avoid this error we can alter test cases for latex printing.\r\n\r\n@bPhysicist Have you made any pull request for this issue ? If not,then would you mind if I create one for this ? I am just a student who is trying to understand open source contribution.\n@ayushmankoul no I have not created one - sure go ahead and open one\nI guess the test should be changed. Probably in the future we can try to optimize the latex printer so that redundant braces are removed, but that's a much harder problem for another issue. ",
  "created_at": "2018-08-26T17:19:04Z",
  "version": "1.2",
  "FAIL_TO_PASS": "[\"test_latex_indexed\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Hadamard\", \"test_ZeroMatrix\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_7117\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_14041\"]",
  "environment_setup_commit": "e53e809176de9aa0fb62e85689f8cdb669d4cacb",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.096599",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}