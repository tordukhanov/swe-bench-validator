{
  "repo": "django/django",
  "instance_id": "django__django-10957",
  "base_commit": "48c17807a99f7a4341c74db19e16a37b010827c2",
  "patch": "diff --git a/django/utils/translation/__init__.py b/django/utils/translation/__init__.py\n--- a/django/utils/translation/__init__.py\n+++ b/django/utils/translation/__init__.py\n@@ -2,9 +2,11 @@\n Internationalization support.\n \"\"\"\n import re\n+import warnings\n from contextlib import ContextDecorator\n \n from django.utils.autoreload import autoreload_started, file_changed\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import lazy\n \n __all__ = [\n@@ -72,23 +74,51 @@ def gettext_noop(message):\n     return _trans.gettext_noop(message)\n \n \n-ugettext_noop = gettext_noop\n+def ugettext_noop(message):\n+    \"\"\"\n+    A legacy compatibility wrapper for Unicode handling on Python 2.\n+    Alias of gettext_noop() since Django 2.0.\n+    \"\"\"\n+    warnings.warn(\n+        'django.utils.translation.ugettext_noop() is deprecated in favor of '\n+        'django.utils.translation.gettext_noop().',\n+        RemovedInDjango40Warning, stacklevel=2,\n+    )\n+    return gettext_noop(message)\n \n \n def gettext(message):\n     return _trans.gettext(message)\n \n \n-# An alias since Django 2.0\n-ugettext = gettext\n+def ugettext(message):\n+    \"\"\"\n+    A legacy compatibility wrapper for Unicode handling on Python 2.\n+    Alias of gettext() since Django 2.0.\n+    \"\"\"\n+    warnings.warn(\n+        'django.utils.translation.ugettext() is deprecated in favor of '\n+        'django.utils.translation.gettext().',\n+        RemovedInDjango40Warning, stacklevel=2,\n+    )\n+    return gettext(message)\n \n \n def ngettext(singular, plural, number):\n     return _trans.ngettext(singular, plural, number)\n \n \n-# An alias since Django 2.0\n-ungettext = ngettext\n+def ungettext(singular, plural, number):\n+    \"\"\"\n+    A legacy compatibility wrapper for Unicode handling on Python 2.\n+    Alias of ngettext() since Django 2.0.\n+    \"\"\"\n+    warnings.warn(\n+        'django.utils.translation.ungettext() is deprecated in favor of '\n+        'django.utils.translation.ngettext().',\n+        RemovedInDjango40Warning, stacklevel=2,\n+    )\n+    return ngettext(singular, plural, number)\n \n \n def pgettext(context, message):\n@@ -99,10 +129,23 @@ def npgettext(context, singular, plural, number):\n     return _trans.npgettext(context, singular, plural, number)\n \n \n-gettext_lazy = ugettext_lazy = lazy(gettext, str)\n+gettext_lazy = lazy(gettext, str)\n pgettext_lazy = lazy(pgettext, str)\n \n \n+def ugettext_lazy(message):\n+    \"\"\"\n+    A legacy compatibility wrapper for Unicode handling on Python 2. Has been\n+    Alias of gettext_lazy since Django 2.0.\n+    \"\"\"\n+    warnings.warn(\n+        'django.utils.translation.ugettext_lazy() is deprecated in favor of '\n+        'django.utils.translation.gettext_lazy().',\n+        RemovedInDjango40Warning, stacklevel=2,\n+    )\n+    return gettext_lazy(message)\n+\n+\n def lazy_number(func, resultclass, number=None, **kwargs):\n     if isinstance(number, int):\n         kwargs['number'] = number\n@@ -158,8 +201,17 @@ def ngettext_lazy(singular, plural, number=None):\n     return lazy_number(ngettext, str, singular=singular, plural=plural, number=number)\n \n \n-# An alias since Django 2.0\n-ungettext_lazy = ngettext_lazy\n+def ungettext_lazy(singular, plural, number=None):\n+    \"\"\"\n+    A legacy compatibility wrapper for Unicode handling on Python 2.\n+    An alias of ungettext_lazy() since Django 2.0.\n+    \"\"\"\n+    warnings.warn(\n+        'django.utils.translation.ungettext_lazy() is deprecated in favor of '\n+        'django.utils.translation.ngettext_lazy().',\n+        RemovedInDjango40Warning, stacklevel=2,\n+    )\n+    return ngettext_lazy(singular, plural, number)\n \n \n def npgettext_lazy(context, singular, plural, number=None):\n",
  "test_patch": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -23,6 +23,7 @@\n     RequestFactory, SimpleTestCase, TestCase, override_settings,\n )\n from django.utils import translation\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.formats import (\n     date_format, get_format, get_format_modules, iter_format_modules, localize,\n     localize_input, reset_format_cache, sanitize_separators, time_format,\n@@ -34,7 +35,8 @@\n     get_language, get_language_bidi, get_language_from_request,\n     get_language_info, gettext, gettext_lazy, ngettext, ngettext_lazy,\n     npgettext, npgettext_lazy, pgettext, to_language, to_locale, trans_null,\n-    trans_real, ugettext, ugettext_lazy, ungettext, ungettext_lazy,\n+    trans_real, ugettext, ugettext_lazy, ugettext_noop, ungettext,\n+    ungettext_lazy,\n )\n from django.utils.translation.reloader import (\n     translation_file_changed, watch_for_translation_changes,\n@@ -74,13 +76,39 @@ def test_legacy_aliases(self):\n         \"\"\"\n         Pre-Django 2.0 aliases with u prefix are still available.\n         \"\"\"\n-        self.assertEqual(ugettext(\"Image\"), \"Bild\")\n-        self.assertEqual(ugettext_lazy(\"Image\"), gettext_lazy(\"Image\"))\n-        self.assertEqual(ungettext(\"%d year\", \"%d years\", 0) % 0, \"0 Jahre\")\n-        self.assertEqual(\n-            ungettext_lazy(\"%d year\", \"%d years\", 0) % 0,\n-            ngettext_lazy(\"%d year\", \"%d years\", 0) % 0,\n+        msg = (\n+            'django.utils.translation.ugettext_noop() is deprecated in favor '\n+            'of django.utils.translation.gettext_noop().'\n         )\n+        with self.assertWarnsMessage(RemovedInDjango40Warning, msg):\n+            self.assertEqual(ugettext_noop(\"Image\"), \"Image\")\n+        msg = (\n+            'django.utils.translation.ugettext() is deprecated in favor of '\n+            'django.utils.translation.gettext().'\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango40Warning, msg):\n+            self.assertEqual(ugettext(\"Image\"), \"Bild\")\n+        msg = (\n+            'django.utils.translation.ugettext_lazy() is deprecated in favor '\n+            'of django.utils.translation.gettext_lazy().'\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango40Warning, msg):\n+            self.assertEqual(ugettext_lazy(\"Image\"), gettext_lazy(\"Image\"))\n+        msg = (\n+            'django.utils.translation.ungettext() is deprecated in favor of '\n+            'django.utils.translation.ngettext().'\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango40Warning, msg):\n+            self.assertEqual(ungettext(\"%d year\", \"%d years\", 0) % 0, \"0 Jahre\")\n+        msg = (\n+            'django.utils.translation.ungettext_lazy() is deprecated in favor '\n+            'of django.utils.translation.ngettext_lazy().'\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango40Warning, msg):\n+            self.assertEqual(\n+                ungettext_lazy(\"%d year\", \"%d years\", 0) % 0,\n+                ngettext_lazy(\"%d year\", \"%d years\", 0) % 0,\n+            )\n \n     @translation.override('fr')\n     def test_plural(self):\n",
  "problem_statement": "Deprecate ugettext(), ugettext_lazy(), ugettext_noop(), ungettext(), and ungettext_lazy()\nDescription\n\t\nAlong the lines of #27753 (Cleanups when no supported version of Django supports Python 2 anymore), the legacy functions in django.utils.translation -- ugettext(), ugettext_lazy(), ugettext_noop(), ungettext(), and ungettext_lazy() -- are simple aliases that remain for Python 2 Unicode backwards compatibility. As other compatibility layers have been cleaned up, these shims can be deprecated for removal.\n",
  "hints_text": "",
  "created_at": "2019-02-08T02:22:31Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_legacy_aliases (i18n.tests.TranslationTests)\"]",
  "PASS_TO_PASS": "[\"test_ignores_non_mo_files (i18n.tests.TranslationFileChangedTests)\", \"test_resets_cache_with_mo_files (i18n.tests.TranslationFileChangedTests)\", \"OSError is raised if the default language is unparseable.\", \"test_fallback_language_code (i18n.tests.TestLanguageInfo)\", \"test_localized_language_info (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_language_code_and_country_code (i18n.tests.TestLanguageInfo)\", \"test_unknown_only_country_code (i18n.tests.TestLanguageInfo)\", \"test_django_fallback (i18n.tests.DjangoFallbackResolutionOrderI18NTests)\", \"test_lazy (i18n.tests.TestModels)\", \"test_safestr (i18n.tests.TestModels)\", \"test_bug14894_translation_activate_thread_safety (i18n.tests.TranslationThreadSafetyTests)\", \"test_check_for_language (i18n.tests.CountrySpecificLanguageTests)\", \"test_check_for_language_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request (i18n.tests.CountrySpecificLanguageTests)\", \"test_get_language_from_request_null (i18n.tests.CountrySpecificLanguageTests)\", \"test_specific_language_codes (i18n.tests.CountrySpecificLanguageTests)\", \"test_check_for_langauge (i18n.tests.NonDjangoLanguageTests)\", \"test_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_plural_non_django_language (i18n.tests.NonDjangoLanguageTests)\", \"test_sparse_territory_catalog (i18n.tests.TranslationFallbackI18NTests)\", \"test_i18n_app_dirs (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_disabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_enabled (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_local_locale (i18n.tests.WatchForTranslationChangesTests)\", \"test_i18n_locale_paths (i18n.tests.WatchForTranslationChangesTests)\", \"test_app_translation (i18n.tests.AppResolutionOrderI18NTests)\", \"test_locale_paths_override_app_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_locale_paths_translation (i18n.tests.LocalePathsResolutionOrderI18NTests)\", \"test_cache_resetting (i18n.tests.MiscTests)\", \"test_english_fallback (i18n.tests.MiscTests)\", \"test_get_language_from_path_null (i18n.tests.MiscTests)\", \"test_get_language_from_path_real (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_null (i18n.tests.MiscTests)\", \"test_get_supported_language_variant_real (i18n.tests.MiscTests)\", \"test_i18n_patterns_returns_list (i18n.tests.MiscTests)\", \"test_parse_language_cookie (i18n.tests.MiscTests)\", \"test_parse_literal_http_header (i18n.tests.MiscTests)\", \"test_parse_spec_http_header (i18n.tests.MiscTests)\", \"test_special_fallback_language (i18n.tests.MiscTests)\", \"test_support_for_deprecated_chinese_language_codes (i18n.tests.MiscTests)\", \"Empty value must stay empty after being translated (#23196).\", \"test_language_bidi (i18n.tests.TranslationTests)\", \"test_language_bidi_null (i18n.tests.TranslationTests)\", \"test_lazy_objects (i18n.tests.TranslationTests)\", \"test_lazy_pickle (i18n.tests.TranslationTests)\", \"test_maclines (i18n.tests.TranslationTests)\", \"test_ngettext_lazy (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_bool (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_format_style (i18n.tests.TranslationTests)\", \"test_ngettext_lazy_pickle (i18n.tests.TranslationTests)\", \"test_override (i18n.tests.TranslationTests)\", \"test_override_decorator (i18n.tests.TranslationTests)\", \"test_override_exit (i18n.tests.TranslationTests)\", \"test_pgettext (i18n.tests.TranslationTests)\", \"test_plural (i18n.tests.TranslationTests)\", \"test_plural_null (i18n.tests.TranslationTests)\", \"test_safe_status (i18n.tests.TranslationTests)\", \"test_to_language (i18n.tests.TranslationTests)\", \"test_to_locale (i18n.tests.TranslationTests)\", \"test_default_lang_without_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_no_redirect_on_404 (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_other_lang_with_prefix (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_page_with_dash (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_unprefixed_language_other_than_accept_language (i18n.tests.UnprefixedDefaultLanguageTests)\", \"test_language_not_saved_to_session (i18n.tests.LocaleMiddlewareTests)\", \"test_streaming_response (i18n.tests.LocaleMiddlewareTests)\", \"test_admin_javascript_supported_input_formats (i18n.tests.FormattingTests)\", \"test_all_format_strings (i18n.tests.FormattingTests)\", \"test_false_like_locale_formats (i18n.tests.FormattingTests)\", \"test_format_arbitrary_settings (i18n.tests.FormattingTests)\", \"test_get_custom_format (i18n.tests.FormattingTests)\", \"test_get_format_modules_lang (i18n.tests.FormattingTests)\", \"test_get_format_modules_stability (i18n.tests.FormattingTests)\", \"test_iter_format_modules (i18n.tests.FormattingTests)\", \"test_iter_format_modules_stability (i18n.tests.FormattingTests)\", \"test_l10n_disabled (i18n.tests.FormattingTests)\", \"test_l10n_enabled (i18n.tests.FormattingTests)\", \"test_locale_independent (i18n.tests.FormattingTests)\", \"test_localize_templatetag_and_filter (i18n.tests.FormattingTests)\", \"test_localized_as_text_as_hidden_input (i18n.tests.FormattingTests)\", \"test_localized_input (i18n.tests.FormattingTests)\", \"test_localized_input_func (i18n.tests.FormattingTests)\", \"test_sanitize_separators (i18n.tests.FormattingTests)\", \"test_sub_locales (i18n.tests.FormattingTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.554325",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}