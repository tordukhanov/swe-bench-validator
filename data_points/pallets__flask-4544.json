{
  "repo": "pallets/flask",
  "instance_id": "pallets__flask-4544",
  "base_commit": "dba2be9311d2abfd1b973c6bb578f416ee771fda",
  "patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -763,7 +763,10 @@ def convert(self, value, param, ctx):\n @click.option(\"--host\", \"-h\", default=\"127.0.0.1\", help=\"The interface to bind to.\")\n @click.option(\"--port\", \"-p\", default=5000, help=\"The port to bind to.\")\n @click.option(\n-    \"--cert\", type=CertParamType(), help=\"Specify a certificate file to use HTTPS.\"\n+    \"--cert\",\n+    type=CertParamType(),\n+    help=\"Specify a certificate file to use HTTPS.\",\n+    is_eager=True,\n )\n @click.option(\n     \"--key\",\n",
  "test_patch": "diff --git a/tests/test_cli.py b/tests/test_cli.py\n--- a/tests/test_cli.py\n+++ b/tests/test_cli.py\n@@ -553,9 +553,14 @@ def test_run_cert_path():\n     with pytest.raises(click.BadParameter):\n         run_command.make_context(\"run\", [\"--key\", __file__])\n \n+    # cert specified first\n     ctx = run_command.make_context(\"run\", [\"--cert\", __file__, \"--key\", __file__])\n     assert ctx.params[\"cert\"] == (__file__, __file__)\n \n+    # key specified first\n+    ctx = run_command.make_context(\"run\", [\"--key\", __file__, \"--cert\", __file__])\n+    assert ctx.params[\"cert\"] == (__file__, __file__)\n+\n \n def test_run_cert_adhoc(monkeypatch):\n     monkeypatch.setitem(sys.modules, \"cryptography\", None)\n",
  "problem_statement": "`flask run` rejects `--key foo.pem --cert foo.cert`\nWhen trying the development server, I find that `flask run --cert foo.cert --key foo.pem` works fine, but `flask run --key foo.pem --cert foo.cert` fails with:\r\n\r\n```\r\nError: Invalid value for '--key': \"--cert\" must also be specified.\r\n```\r\n\r\nIsn't this somewhat counterintuitive?\r\n\r\nIn flask/cli.py, [`_validate_key()`](https://github.com/pallets/flask/blob/3897a518014931a82c77a353e1e9c2248529b856/src/flask/cli.py#L711) function insists the certificate file should have been specified, and it feels too restrictive. But I'm not familiar with Click to contribute a pretty PR...\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.9.10\r\n- Flask version: 2.0.3\n",
  "hints_text": "I am humbled to share my findings using `click`. Apparently, the order of arguments being passed to the `cli` seems to matter in `click`(not sure whether or not it is intentional).  I've found that the context manager only keeps track of the first option being passed. Take the following as an example:\r\n\r\n```python\r\nimport click\r\n\r\noptions = set()\r\n\r\ndef orders_params(ctx, param, value):\r\n    global options\r\n    print(ctx.params.items())\r\n    options.add((param, value))\r\n\r\n@click.command()\r\n@click.option(\"--foo\", required=True, multiple=True, callback=orders_params)\r\n@click.option(\"--bar\", required=True, multiple=True, callback=orders_params)\r\ndef run_command(*, foo, bar):\r\n    print(\"Parameters order:\")\r\n    for param, val in options:\r\n        print(\"   \" + param.name + str(val))\r\n\r\nif __name__ == \"__main__\":\r\n    run_command()\r\n```\r\n\r\nAfter running the above script, it generates different results depending on the ordering:\r\n\r\n```sh\r\n(.venv) ➜  ✗ python3 cli.py --foo foo --bar bar\r\ndict_items([])\r\ndict_items([('foo', None)])\r\nParameters order:\r\n   bar('bar',)\r\n   foo('foo',)\r\n\r\n(.venv) ➜  ✗ python3 cli.py --bar bar --foo foo\r\ndict_items([])\r\ndict_items([('bar', None)])\r\nParameters order:\r\n   foo('foo',)\r\n   bar('bar',)\r\n```\r\n\r\nAs you may notice, the output generated from the first command, the `ctx` object holds only the first option ` foo` after two callbacks being triggered. Similarly, the `ctx` object in the command contains only the first option `bar`.\r\n\r\nWith that noted, running `flask run --cert foo.cert --key foo.pem` and `flask run --key foo.pem --cert foo.cert` would result in different behavious.\r\n\r\nRunning the latter would result in `cert` being `None`:\r\n\r\nhttps://github.com/pallets/flask/blob/4843590c4a7f2225fd18bd10963139a6f29a2a59/src/flask/cli.py#L723\r\n\r\nAnd it will trigger the following case:\r\n\r\nhttps://github.com/pallets/flask/blob/4843590c4a7f2225fd18bd10963139a6f29a2a59/src/flask/cli.py#L738-L739\r\n\r\nIMHO, adding support for this edge case would require overriding the `parse_args` method of the `click.Command` and passing it in the decorator.\r\n\r\n```python\r\n@click.command(..., cls=OrderParams)\r\n                                   ^___ this argument\r\n```\r\n\r\nand OrderParams is some kind of class that inherits from `click.Command` to override the `parse_args` method.\r\n\r\n```python\r\nclass OrderParams(click.Command)\r\n  parse_args(self, ctx: click.core.Context, args: List[str]) -> List[str]:\r\n    # custom logic goes here\r\n```\r\n\r\nHopefully, the above info can help resolve the issue.\nWell, it's worth making the `_validate_cert` function. And for `--cert` option set `callback=_validate_cert`. Just a humble guess\nNo, implementing custom `Command.parse_args` is not the way to solve this.\n@davidism, how do you like my thoughts?\r\nNow I thought that this is not very good, because. the code is almost identical to `_validate_key`...\r\nI also wanted to add that I didn't mean to change the option type, I just want to add a new callback without changing the option type for `--cert`",
  "created_at": "2022-04-18T13:39:46Z",
  "version": "2.1",
  "FAIL_TO_PASS": "[\"tests/test_cli.py::test_run_cert_path\"]",
  "PASS_TO_PASS": "[\"tests/test_cli.py::test_cli_name\", \"tests/test_cli.py::test_find_best_app\", \"tests/test_cli.py::test_prepare_import[test-path0-test]\", \"tests/test_cli.py::test_prepare_import[test.py-path1-test]\", \"tests/test_cli.py::test_prepare_import[a/test-path2-test]\", \"tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]\", \"tests/test_cli.py::test_prepare_import[test/__init__-path4-test]\", \"tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]\", \"tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]\", \"tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]\", \"tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]\", \"tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]\", \"tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]\", \"tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-None-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\\\"foo\\\",\", \"tests/test_cli.py::test_locate_app[cliapp.factory-\", \"tests/test_cli.py::test_locate_app_raises[notanapp.py-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp/app-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\\\"foo\\\")]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]\", \"tests/test_cli.py::test_locate_app_suppress_raise\", \"tests/test_cli.py::test_get_version\", \"tests/test_cli.py::test_scriptinfo\", \"tests/test_cli.py::test_lazy_load_error\", \"tests/test_cli.py::test_with_appcontext\", \"tests/test_cli.py::test_appgroup\", \"tests/test_cli.py::test_flaskgroup\", \"tests/test_cli.py::test_flaskgroup_debug[True]\", \"tests/test_cli.py::test_flaskgroup_debug[False]\", \"tests/test_cli.py::test_no_command_echo_loading_error\", \"tests/test_cli.py::test_help_echo_loading_error\", \"tests/test_cli.py::test_help_echo_exception\", \"tests/test_cli.py::TestRoutes::test_simple\", \"tests/test_cli.py::TestRoutes::test_all_methods\", \"tests/test_cli.py::TestRoutes::test_no_routes\", \"tests/test_cli.py::test_load_dotenv\", \"tests/test_cli.py::test_dotenv_path\", \"tests/test_cli.py::test_dotenv_optional\", \"tests/test_cli.py::test_disable_dotenv_from_env\", \"tests/test_cli.py::test_run_cert_adhoc\", \"tests/test_cli.py::test_run_cert_import\", \"tests/test_cli.py::test_run_cert_no_ssl\", \"tests/test_cli.py::test_cli_blueprints\", \"tests/test_cli.py::test_cli_empty\"]",
  "environment_setup_commit": "ebc0d30dd1cf21b13569d65e4337d4706e3fd17e",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.843698",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}