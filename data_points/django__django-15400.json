{
  "repo": "django/django",
  "instance_id": "django__django-15400",
  "base_commit": "4c76ffc2d6c77c850b4bef8d9acc197d11c47937",
  "patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -432,6 +432,12 @@ def __deepcopy__(self, memo):\n             return result\n         return copy.deepcopy(self._wrapped, memo)\n \n+    __add__ = new_method_proxy(operator.add)\n+\n+    @new_method_proxy\n+    def __radd__(self, other):\n+        return other + self\n+\n \n def partition(predicate, values):\n     \"\"\"\n",
  "test_patch": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -317,6 +317,17 @@ def test_repr(self):\n         self.assertIsInstance(obj._wrapped, int)\n         self.assertEqual(repr(obj), \"<SimpleLazyObject: 42>\")\n \n+    def test_add(self):\n+        obj1 = self.lazy_wrap(1)\n+        self.assertEqual(obj1 + 1, 2)\n+        obj2 = self.lazy_wrap(2)\n+        self.assertEqual(obj2 + obj1, 3)\n+        self.assertEqual(obj1 + obj2, 3)\n+\n+    def test_radd(self):\n+        obj1 = self.lazy_wrap(1)\n+        self.assertEqual(1 + obj1, 2)\n+\n     def test_trace(self):\n         # See ticket #19456\n         old_trace_func = sys.gettrace()\n",
  "problem_statement": "SimpleLazyObject doesn't implement __radd__\nDescription\n\t\nTechnically, there's a whole bunch of magic methods it doesn't implement, compared to a complete proxy implementation, like that of wrapt.ObjectProxy, but __radd__ being missing is the one that's biting me at the moment.\nAs far as I can tell, the implementation can't just be\n__radd__ = new_method_proxy(operator.radd)\nbecause that doesn't exist, which is rubbish.\n__radd__ = new_method_proxy(operator.attrgetter(\"__radd__\"))\nalso won't work because types may not have that attr, and attrgetter doesn't supress the exception (correctly)\nThe minimal implementation I've found that works for me is:\n\tdef __radd__(self, other):\n\t\tif self._wrapped is empty:\n\t\t\tself._setup()\n\t\treturn other + self._wrapped\n",
  "hints_text": "Could you please give some sample code with your use case?\nIn a boiled-down nutshell: def lazy_consumer(): # something more complex, obviously. return [1, 3, 5] consumer = SimpleLazyObject(lazy_consumer) # inside third party code ... def some_func(param): third_party_code = [...] # then, through parameter passing, my value is provided to be used. # param is at this point, `consumer` third_party_code_plus_mine = third_party_code + param which ultimately yields: TypeError: unsupported operand type(s) for +: 'list' and 'SimpleLazyObject'\nSeems okay, although I'm not an expert on the SimpleLazyObject class.\nReplying to kezabelle: def lazy_consumer(): # something more complex, obviously. return [1, 3, 5] consumer = SimpleLazyObject(lazy_consumer) If you know what is the resulting type or possible resulting types of your expression, I think you better use django.utils.functional.lazy which will provide all the necessary methods.\nReplying to kezabelle: As far as I can tell, the implementation can't just be __radd__ = new_method_proxy(operator.radd) because that doesn't exist, which is rubbish. __radd__ = new_method_proxy(operator.attrgetter(\"__radd__\")) also won't work because types may not have that attr, and attrgetter doesn't supress the exception (correctly) Wouldn't the following code work? __add__ = new_method_proxy(operator.add) __radd__ = new_method_proxy(lambda a, b: operator.add(b, a)) I have tested this and it seems to work as excepted.",
  "created_at": "2022-02-05T19:34:55Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_add (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_radd (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\"]",
  "PASS_TO_PASS": "[\"test_bool (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_bytes (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_class (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_cmp (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_contains (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_class (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_class_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_list (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_list_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_class (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_class_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_list (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_list_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_delattr (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_delitem (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_dir (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_getattr (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_getitem (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_gt (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_hash (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_iter (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_len (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_lt (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_pickle (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_setattr (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_setattr2 (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_setitem (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_text (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_bool (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_bytes (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_class (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_cmp (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_contains (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_class (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_class_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_list (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_list_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_class (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_class_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_list (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_list_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_delattr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_delitem (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_dict (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_dir (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_getattr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_getitem (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_gt (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_hash (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_iter (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_len (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_list_set (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_lt (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_none (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_pickle (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_repr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_setattr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_setattr2 (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_setitem (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_text (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_trace (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"Test in a fairly synthetic setting.\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.728146",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}