{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9289",
  "base_commit": "82dad44e5bd3776ecb6fd8ded656bc8151d0e63d",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -299,6 +299,16 @@ def make_xref(self, rolename: str, domain: str, target: str,\n             for node in result.traverse(nodes.Text):\n                 node.parent[node.parent.index(node)] = nodes.Text(text)\n                 break\n+        elif isinstance(result, pending_xref) and env.config.python_use_unqualified_type_names:\n+            children = result.children\n+            result.clear()\n+\n+            shortname = target.split('.')[-1]\n+            textnode = innernode('', shortname)\n+            contnodes = [pending_xref_condition('', '', textnode, condition='resolved'),\n+                         pending_xref_condition('', '', *children, condition='*')]\n+            result.extend(contnodes)\n+\n         return result\n \n     def make_xrefs(self, rolename: str, domain: str, target: str,\n",
  "test_patch": "diff --git a/tests/roots/test-domain-py-python_use_unqualified_type_names/index.rst b/tests/roots/test-domain-py-python_use_unqualified_type_names/index.rst\n--- a/tests/roots/test-domain-py-python_use_unqualified_type_names/index.rst\n+++ b/tests/roots/test-domain-py-python_use_unqualified_type_names/index.rst\n@@ -4,5 +4,9 @@ domain-py-smart_reference\n .. py:class:: Name\n    :module: foo\n \n+   :param name: blah blah\n+   :type name: foo.Name\n+   :param age: blah blah\n+   :type age: foo.Age\n \n .. py:function:: hello(name: foo.Name, age: foo.Age)\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1147,6 +1147,9 @@ def test_python_python_use_unqualified_type_names(app, status, warning):\n     assert ('<span class=\"n\"><a class=\"reference internal\" href=\"#foo.Name\" title=\"foo.Name\">'\n             '<span class=\"pre\">Name</span></a></span>' in content)\n     assert '<span class=\"n\"><span class=\"pre\">foo.Age</span></span>' in content\n+    assert ('<p><strong>name</strong> (<a class=\"reference internal\" href=\"#foo.Name\" '\n+            'title=\"foo.Name\"><em>Name</em></a>) – blah blah</p>' in content)\n+    assert '<p><strong>age</strong> (<em>foo.Age</em>) – blah blah</p>' in content\n \n \n @pytest.mark.sphinx('html', testroot='domain-py-python_use_unqualified_type_names',\n@@ -1157,6 +1160,9 @@ def test_python_python_use_unqualified_type_names_disabled(app, status, warning)\n     assert ('<span class=\"n\"><a class=\"reference internal\" href=\"#foo.Name\" title=\"foo.Name\">'\n             '<span class=\"pre\">foo.Name</span></a></span>' in content)\n     assert '<span class=\"n\"><span class=\"pre\">foo.Age</span></span>' in content\n+    assert ('<p><strong>name</strong> (<a class=\"reference internal\" href=\"#foo.Name\" '\n+            'title=\"foo.Name\"><em>foo.Name</em></a>) – blah blah</p>' in content)\n+    assert '<p><strong>age</strong> (<em>foo.Age</em>) – blah blah</p>' in content\n \n \n @pytest.mark.sphinx('dummy', testroot='domain-py-xref-warning')\n",
  "problem_statement": "python_use_unqualified_type_names does not work on function descriptions\n**Describe the bug**\r\nWhen combining the new `python_use_unqualified_type_names` configuration with `autodoc_typehints='description'`, the type names are not shortened even though links are created.\r\n\r\n**To Reproduce**\r\nHere's a minimal project using Sphinx 4.0.2 on Python 3.9:\r\n\r\n```python\r\n# conf.py\r\nimport os\r\nimport sys\r\nfrom pathlib import Path\r\n\r\n# Insert source parent folder to path\r\n_root = Path(os.path.realpath(__file__)).parent.parent\r\nsys.path.insert(0, str(_root))\r\n\r\nextensions = ['sphinx.ext.autodoc']\r\nmaster_doc = 'index'\r\nexclude_patterns = ['_build']\r\n\r\nautodoc_typehints = 'description'\r\npython_use_unqualified_type_names = True\r\n```\r\n\r\n```python\r\n# package.py\r\nclass A:\r\n    pass\r\n\r\nclass B:\r\n    def __init__(self, a: A):\r\n        self.a = a\r\n```\r\n\r\n```rst\r\n.. index.rst\r\n\r\nPackage\r\n=======\r\n\r\n.. autoclass:: package.A\r\n.. autoclass:: package.B\r\n```\r\n\r\nThis produces documentation looking like this:\r\n\r\n![doc](https://user-images.githubusercontent.com/25202257/119518836-913c2180-bd81-11eb-844f-f982d1c32644.png)\r\n\r\n**Expected behavior**\r\nI'd expect the link to be shortened to `A` like it is when `autodoc_typehints='signature'`.\r\n\n",
  "hints_text": "",
  "created_at": "2021-06-02T15:06:11Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_python_python_use_unqualified_type_names\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_xrefs_abbreviations\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_domain_py_canonical\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_pyfunction_with_union_type_operator\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pydata_with_union_type_operator\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pyproperty\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_canonical\", \"tests/test_domain_py.py::test_canonical_definition_overrides\", \"tests/test_domain_py.py::test_canonical_definition_skip\", \"tests/test_domain_py.py::test_canonical_duplicated\", \"tests/test_domain_py.py::test_info_field_list\", \"tests/test_domain_py.py::test_info_field_list_piped_type\", \"tests/test_domain_py.py::test_info_field_list_var\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled\", \"tests/test_domain_py.py::test_warn_missing_reference\"]",
  "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.065693",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}