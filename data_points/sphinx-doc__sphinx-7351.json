{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7351",
  "base_commit": "c75470f9b79046f6d32344be5eacf60a4e1c1b7d",
  "patch": "diff --git a/sphinx/project.py b/sphinx/project.py\n--- a/sphinx/project.py\n+++ b/sphinx/project.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n import os\n+from glob import glob\n \n from sphinx.locale import __\n from sphinx.util import get_matching_files\n@@ -55,7 +56,13 @@ def discover(self, exclude_paths=[]):\n         for filename in get_matching_files(self.srcdir, excludes):  # type: ignore\n             docname = self.path2doc(filename)\n             if docname:\n-                if os.access(os.path.join(self.srcdir, filename), os.R_OK):\n+                if docname in self.docnames:\n+                    pattern = os.path.join(self.srcdir, docname) + '.*'\n+                    files = [relpath(f, self.srcdir) for f in glob(pattern)]\n+                    logger.warning(__('multiple files found for the document \"%s\": %r\\n'\n+                                      'Use %r for the build.'),\n+                                   docname, files, self.doc2path(docname), once=True)\n+                elif os.access(os.path.join(self.srcdir, filename), os.R_OK):\n                     self.docnames.add(docname)\n                 else:\n                     logger.warning(__(\"document not readable. Ignored.\"), location=docname)\ndiff --git a/sphinx/util/logging.py b/sphinx/util/logging.py\n--- a/sphinx/util/logging.py\n+++ b/sphinx/util/logging.py\n@@ -118,6 +118,7 @@ class SphinxWarningLogRecord(SphinxLogRecord):\n \n class SphinxLoggerAdapter(logging.LoggerAdapter):\n     \"\"\"LoggerAdapter allowing ``type`` and ``subtype`` keywords.\"\"\"\n+    KEYWORDS = ['type', 'subtype', 'location', 'nonl', 'color', 'once']\n \n     def log(self, level: Union[int, str], msg: str, *args: Any, **kwargs: Any) -> None:\n         if isinstance(level, int):\n@@ -131,16 +132,9 @@ def verbose(self, msg: str, *args: Any, **kwargs: Any) -> None:\n \n     def process(self, msg: str, kwargs: Dict) -> Tuple[str, Dict]:  # type: ignore\n         extra = kwargs.setdefault('extra', {})\n-        if 'type' in kwargs:\n-            extra['type'] = kwargs.pop('type')\n-        if 'subtype' in kwargs:\n-            extra['subtype'] = kwargs.pop('subtype')\n-        if 'location' in kwargs:\n-            extra['location'] = kwargs.pop('location')\n-        if 'nonl' in kwargs:\n-            extra['nonl'] = kwargs.pop('nonl')\n-        if 'color' in kwargs:\n-            extra['color'] = kwargs.pop('color')\n+        for keyword in self.KEYWORDS:\n+            if keyword in kwargs:\n+                extra[keyword] = kwargs.pop(keyword)\n \n         return msg, kwargs\n \n@@ -446,6 +440,26 @@ def filter(self, record: logging.LogRecord) -> bool:\n         return True\n \n \n+class OnceFilter(logging.Filter):\n+    \"\"\"Show the message only once.\"\"\"\n+\n+    def __init__(self, name: str = '') -> None:\n+        super().__init__(name)\n+        self.messages = {}  # type: Dict[str, List]\n+\n+    def filter(self, record: logging.LogRecord) -> bool:\n+        once = getattr(record, 'once', '')\n+        if not once:\n+            return True\n+        else:\n+            params = self.messages.setdefault(record.msg, [])\n+            if record.args in params:\n+                return False\n+\n+            params.append(record.args)\n+            return True\n+\n+\n class SphinxLogRecordTranslator(logging.Filter):\n     \"\"\"Converts a log record to one Sphinx expects\n \n@@ -563,6 +577,7 @@ def setup(app: \"Sphinx\", status: IO, warning: IO) -> None:\n     warning_handler.addFilter(WarningSuppressor(app))\n     warning_handler.addFilter(WarningLogRecordTranslator(app))\n     warning_handler.addFilter(WarningIsErrorFilter(app))\n+    warning_handler.addFilter(OnceFilter())\n     warning_handler.setLevel(logging.WARNING)\n     warning_handler.setFormatter(ColorizeFormatter())\n \n",
  "test_patch": "diff --git a/tests/test_util_logging.py b/tests/test_util_logging.py\n--- a/tests/test_util_logging.py\n+++ b/tests/test_util_logging.py\n@@ -103,6 +103,17 @@ def test_nonl_info_log(app, status, warning):\n     assert 'message1message2\\nmessage3' in status.getvalue()\n \n \n+def test_once_warning_log(app, status, warning):\n+    logging.setup(app, status, warning)\n+    logger = logging.getLogger(__name__)\n+\n+    logger.warning('message: %d', 1, once=True)\n+    logger.warning('message: %d', 1, once=True)\n+    logger.warning('message: %d', 2, once=True)\n+\n+    assert 'WARNING: message: 1\\nWARNING: message: 2\\n' in strip_escseq(warning.getvalue())\n+\n+\n def test_is_suppressed_warning():\n     suppress_warnings = [\"ref\", \"files.*\", \"rest.duplicated_labels\"]\n \n",
  "problem_statement": "Files with same name but different extensions leads to unexpected behaviour\n**Describe the bug**\r\n\r\nIf there are multiple files with the same name but different file extensions;\r\nsphinx will silently choose only one to parse:\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nGiven I have an extension installed to parse  `md`\r\n\r\nwith:\r\n```\r\nindex.rst\r\na.md\r\na.rst\r\n```\r\n\r\nindex.rst:\r\n\r\n```restructuredtext\r\n.. toctree::\r\n    a.md\r\n```\r\n\r\nThis will actually include `a.rst` in the document, not `a.md`\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nIdeally you would have a config option to specify the order of preference for file extensions,\r\nor if not set, a warning would be logged.\r\n\r\n**Your project**\r\nLink to your sphinx project, or attach zipped small project sample.\r\n\r\nFirst noted in:\r\nhttps://github.com/ExecutableBookProject/MyST-NB/pull/82#issuecomment-599255775\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.7.6\r\n- Sphinx version: 2.4.4\r\n- Sphinx extensions:  `myst-parser`\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n- [e.g. URL or Ticket]\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2020-03-21T11:47:35Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/test_util_logging.py::test_once_warning_log\"]",
  "PASS_TO_PASS": "[\"tests/test_util_logging.py::test_info_and_warning\", \"tests/test_util_logging.py::test_verbosity_filter\", \"tests/test_util_logging.py::test_nonl_info_log\", \"tests/test_util_logging.py::test_is_suppressed_warning\", \"tests/test_util_logging.py::test_suppress_warnings\", \"tests/test_util_logging.py::test_warningiserror\", \"tests/test_util_logging.py::test_info_location\", \"tests/test_util_logging.py::test_warning_location\", \"tests/test_util_logging.py::test_suppress_logging\", \"tests/test_util_logging.py::test_pending_warnings\", \"tests/test_util_logging.py::test_colored_logs\", \"tests/test_util_logging.py::test_logging_in_ParallelTasks\", \"tests/test_util_logging.py::test_output_with_unencodable_char\", \"tests/test_util_logging.py::test_skip_warningiserror\", \"tests/test_util_logging.py::test_prefixed_warnings\"]",
  "environment_setup_commit": "50d2d289e150cb429de15770bdd48a723de8c45d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.039418",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}