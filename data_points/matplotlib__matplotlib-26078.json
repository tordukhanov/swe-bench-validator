{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26078",
  "base_commit": "fc350ea5343cf96e231656d97d4b7ac2f32c97d8",
  "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1720,7 +1720,7 @@ def plot(self, *args, scalex=True, scaley=True, data=None, **kwargs):\n         (``'green'``) or hex strings (``'#008000'``).\n         \"\"\"\n         kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n-        lines = [*self._get_lines(*args, data=data, **kwargs)]\n+        lines = [*self._get_lines(self, *args, data=data, **kwargs)]\n         for line in lines:\n             self.add_line(line)\n         if scalex:\n@@ -3578,7 +3578,7 @@ def _upcast_err(err):\n         # that would call self._process_unit_info again, and do other indirect\n         # data processing.\n         (data_line, base_style), = self._get_lines._plot_args(\n-            (x, y) if fmt == '' else (x, y, fmt), kwargs, return_kwargs=True)\n+            self, (x, y) if fmt == '' else (x, y, fmt), kwargs, return_kwargs=True)\n \n         # Do this after creating `data_line` to avoid modifying `base_style`.\n         if barsabove:\n@@ -5286,7 +5286,7 @@ def fill(self, *args, data=None, **kwargs):\n         # For compatibility(!), get aliases from Line2D rather than Patch.\n         kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n         # _get_patches_for_fill returns a generator, convert it to a list.\n-        patches = [*self._get_patches_for_fill(*args, data=data, **kwargs)]\n+        patches = [*self._get_patches_for_fill(self, *args, data=data, **kwargs)]\n         for poly in patches:\n             self.add_patch(poly)\n         self._request_autoscale_view()\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -219,14 +219,14 @@ class _process_plot_var_args:\n \n     an arbitrary number of *x*, *y*, *fmt* are allowed\n     \"\"\"\n-    def __init__(self, axes, command='plot'):\n-        self.axes = axes\n+\n+    def __init__(self, command='plot'):\n         self.command = command\n         self.set_prop_cycle(None)\n \n     def __getstate__(self):\n         # note: it is not possible to pickle a generator (and thus a cycler).\n-        return {'axes': self.axes, 'command': self.command}\n+        return {'command': self.command}\n \n     def __setstate__(self, state):\n         self.__dict__ = state.copy()\n@@ -238,8 +238,8 @@ def set_prop_cycle(self, cycler):\n         self.prop_cycler = itertools.cycle(cycler)\n         self._prop_keys = cycler.keys  # This should make a copy\n \n-    def __call__(self, *args, data=None, **kwargs):\n-        self.axes._process_unit_info(kwargs=kwargs)\n+    def __call__(self, axes, *args, data=None, **kwargs):\n+        axes._process_unit_info(kwargs=kwargs)\n \n         for pos_only in \"xy\":\n             if pos_only in kwargs:\n@@ -309,7 +309,7 @@ def __call__(self, *args, data=None, **kwargs):\n                 this += args[0],\n                 args = args[1:]\n             yield from self._plot_args(\n-                this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey)\n+                axes, this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey)\n \n     def get_next_color(self):\n         \"\"\"Return the next color in the cycle.\"\"\"\n@@ -344,17 +344,17 @@ def _setdefaults(self, defaults, kw):\n             if kw.get(k, None) is None:\n                 kw[k] = defaults[k]\n \n-    def _makeline(self, x, y, kw, kwargs):\n+    def _makeline(self, axes, x, y, kw, kwargs):\n         kw = {**kw, **kwargs}  # Don't modify the original kw.\n         default_dict = self._getdefaults(set(), kw)\n         self._setdefaults(default_dict, kw)\n         seg = mlines.Line2D(x, y, **kw)\n         return seg, kw\n \n-    def _makefill(self, x, y, kw, kwargs):\n+    def _makefill(self, axes, x, y, kw, kwargs):\n         # Polygon doesn't directly support unitized inputs.\n-        x = self.axes.convert_xunits(x)\n-        y = self.axes.convert_yunits(y)\n+        x = axes.convert_xunits(x)\n+        y = axes.convert_yunits(y)\n \n         kw = kw.copy()  # Don't modify the original kw.\n         kwargs = kwargs.copy()\n@@ -403,7 +403,7 @@ def _makefill(self, x, y, kw, kwargs):\n         seg.set(**kwargs)\n         return seg, kwargs\n \n-    def _plot_args(self, tup, kwargs, *,\n+    def _plot_args(self, axes, tup, kwargs, *,\n                    return_kwargs=False, ambiguous_fmt_datakey=False):\n         \"\"\"\n         Process the arguments of ``plot([x], y, [fmt], **kwargs)`` calls.\n@@ -495,10 +495,10 @@ def _plot_args(self, tup, kwargs, *,\n         else:\n             x, y = index_of(xy[-1])\n \n-        if self.axes.xaxis is not None:\n-            self.axes.xaxis.update_units(x)\n-        if self.axes.yaxis is not None:\n-            self.axes.yaxis.update_units(y)\n+        if axes.xaxis is not None:\n+            axes.xaxis.update_units(x)\n+        if axes.yaxis is not None:\n+            axes.yaxis.update_units(y)\n \n         if x.shape[0] != y.shape[0]:\n             raise ValueError(f\"x and y must have same first dimension, but \"\n@@ -534,7 +534,7 @@ def _plot_args(self, tup, kwargs, *,\n         else:\n             labels = [label] * n_datasets\n \n-        result = (make_artist(x[:, j % ncx], y[:, j % ncy], kw,\n+        result = (make_artist(axes, x[:, j % ncx], y[:, j % ncy], kw,\n                               {**kwargs, 'label': label})\n                   for j, label in enumerate(labels))\n \n@@ -1292,8 +1292,8 @@ def __clear(self):\n         self._tight = None\n         self._use_sticky_edges = True\n \n-        self._get_lines = _process_plot_var_args(self)\n-        self._get_patches_for_fill = _process_plot_var_args(self, 'fill')\n+        self._get_lines = _process_plot_var_args()\n+        self._get_patches_for_fill = _process_plot_var_args('fill')\n \n         self._gridOn = mpl.rcParams['axes.grid']\n         old_children, self._children = self._children, []\ndiff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -3005,7 +3005,7 @@ def errorbar(self, x, y, z, zerr=None, yerr=None, xerr=None, fmt='',\n         # that would call self._process_unit_info again, and do other indirect\n         # data processing.\n         (data_line, base_style), = self._get_lines._plot_args(\n-            (x, y) if fmt == '' else (x, y, fmt), kwargs, return_kwargs=True)\n+            self, (x, y) if fmt == '' else (x, y, fmt), kwargs, return_kwargs=True)\n         art3d.line_2d_to_3d(data_line, zs=z)\n \n         # Do this after creating `data_line` to avoid modifying `base_style`.\n",
  "test_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n--- a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n+++ b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n@@ -27,7 +27,6 @@\n     zoomed_inset_axes, mark_inset, inset_axes, BboxConnectorPatch,\n     InsetPosition)\n import mpl_toolkits.axes_grid1.mpl_axes\n-\n import pytest\n \n import numpy as np\n@@ -91,6 +90,15 @@ def test_twin_axes_empty_and_removed():\n     plt.subplots_adjust(wspace=0.5, hspace=1)\n \n \n+def test_twin_axes_both_with_units():\n+    host = host_subplot(111)\n+    host.plot_date([0, 1, 2], [0, 1, 2], xdate=False, ydate=True)\n+    twin = host.twinx()\n+    twin.plot([\"a\", \"b\", \"c\"])\n+    assert host.get_yticklabels()[0].get_text() == \"00:00:00\"\n+    assert twin.get_yticklabels()[0].get_text() == \"a\"\n+\n+\n def test_axesgrid_colorbar_log_smoketest():\n     fig = plt.figure()\n     grid = AxesGrid(fig, 111,  # modified to be only subplot\n",
  "problem_statement": "[Bug]: parasite_axes does not properly handle units\n### Bug summary\n\nWhen plotting on a parasite axis using `axes_grid1.parasite_axes`, units are not automatically applied to the parasite axis.\n\n### Code for reproduction\n\n```python\n#!/usr/bin/env python3\r\n\r\nfrom mpl_toolkits.axes_grid1 import host_subplot\r\nfrom mpl_toolkits import axisartist\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.units as units\r\nimport matplotlib.ticker as ticker\r\n\r\nclass Unit:\r\n    def __init__(self, val):\r\n        self._val = val\r\n\r\nclass Volt(Unit):\r\n    fmt = \"%0.1f V\"\r\nclass Amp(Unit):\r\n    fmt = \"%0.1f A\"\r\n\r\nclass UnitConverter(units.ConversionInterface):\r\n    @staticmethod\r\n    def convert(value, unit, axis):\r\n        return [x._val for x in value]\r\n\r\n    @staticmethod\r\n    def axisinfo(unit, axis):\r\n        return units.AxisInfo(majfmt=ticker.FormatStrFormatter(unit.fmt))\r\n\r\n    @staticmethod\r\n    def default_units(x, axis):\r\n        return x[0].__class__\r\n\r\nunits.registry[Volt] = UnitConverter()\r\nunits.registry[Amp] = UnitConverter()\r\n\r\nhost = host_subplot(111, axes_class=axisartist.Axes)\r\n\r\np1, = host.plot([0, 1, 2], [Volt(x) for x in (0, 1, 2)])\r\n\r\npar1 = host.twinx()\r\npar1.axis[\"right\"].major_ticklabels.set_visible(True)\r\np2, = par1.plot([0, 1, 2], [Amp(x) for x in (0, 3, 2)])\r\n\r\nplt.show()\n```\n\n\n### Actual outcome\n\n<img width=\"708\" alt=\"image\" src=\"https://user-images.githubusercontent.com/115761/160324420-f52b7906-67de-416f-9635-2ca381ffbd37.png\">\r\n\n\n### Expected outcome\n\n<img width=\"708\" alt=\"image\" src=\"https://user-images.githubusercontent.com/115761/160324368-43f57af7-4677-4fd8-ad68-3191d32899eb.png\">\r\n\n\n### Additional information\n\nAs far as I can tell, this is because `ParasiteAxesBase.cla` contains this line:\r\n\r\n```python\r\nself._get_lines = self._parent_axes._get_lines\r\n```\r\n\r\nSince `_get_lines` contains a reference to its axes instance, this causes `ax2.plot` to attempt to call `update_units` on the host axes instead of the parasite axes. Removing this line appears to fix unit behavior for me, but I don't know why the line was there in the first place because it has been there since the [very first commit of parasite_axes](https://github.com/matplotlib/matplotlib/commit/f44235eb92f8e6e2fee58a3083aae8d09b40e3e7#diff-0c077e8fab1b415a036b2400ce1ec27b3ff15e40c239c72adb1ee5a72c1118ddR38). Perhaps the goal was to make the axes share a color cycler?\r\n\r\nI was able to preserve that behavior while fixing unit support by changing the line to\r\n\r\n```python\r\nself._get_lines = functools.partial(self._parent_axes._get_lines, axes=self)\r\n```\r\n\r\nand then changing `_process_plot_var_args.__call__`, `_process_plot_var_args._makefill`, and `_process_plot_var_args._plot_args` to use `kwargs.get(\"axes\", self.axes)` instead of `self.axes`.\n\n### Operating system\n\nOS X\n\n### Matplotlib Version\n\n3.5.1\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\nPython 3.10.1\n\n### Jupyter version\n\nn/a\n\n### Installation\n\nLinux package manager\n",
  "hints_text": "Have you tried this with the standard `axes.twinx`?  If this didn't work there, it is likely to get more support than in the axes_grid toolkit.\nAFAICT this bug is specific to `axes_grid1` (and is caused by the line of code identified above).\nEdit: I start working on this issue and submit a PR by the end of today. Please leave a comment here for any update or suggestion. I will respond ASAP.\n> Edit: I start working on this issue and submit a PR by the end of today. Please leave a comment here for any update or suggestion. I will respond ASAP.\r\n\r\nI'd like to work with @weiji-li  on this issue where I will be creating new test cases for the fix.",
  "created_at": "2023-06-05T17:05:05Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_twin_axes_both_with_units\"]",
  "PASS_TO_PASS": "[\"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_divider_append_axes\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_twin_axes_empty_and_removed[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_axesgrid_colorbar_log_smoketest\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_inset_colorbar_tight_layout_smoketest\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_inset_locator[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_inset_axes[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_inset_axes_complete\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_fill_facecolor[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_zooming_with_inverted_axes[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_anchored_direction_arrows[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_anchored_direction_arrows_many_args[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_axes_locatable_position\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_image_grid_each_left_label_mode_all[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_image_grid_single_bottom[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_image_grid_label_mode_deprecation_warning\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_image_grid[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_gettightbbox\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[gca-gca-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[gca-gca-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[host-host-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[host-host-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[host-parasite-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[host-parasite-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[parasite-host-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[parasite-host-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[parasite-parasite-big]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_picking_callbacks_overlap[parasite-parasite-small]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_anchored_artists[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_hbox_divider\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_vbox_divider\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_axes_class_tuple\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_axes_lists\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_axes_position[row]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_axes_position[column]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_errors[rect0-None-TypeError-Incorrect\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_errors[111--1-ValueError-ngrids\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_errors[111-7-ValueError-ngrids\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_divider_errors[None-TypeError-anchor\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_divider_errors[CC-ValueError-'CC'\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_divider_errors[anchor2-TypeError-anchor\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_mark_inset_unstales_viewlim[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_auto_adjustable\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_rgb_axes[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_insetposition[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_imagegrid_cbar_mode_edge[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_imagegrid\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_removal\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_anchored_locator_base_call[png]\", \"lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py::test_grid_with_axes_class_not_overriding_axis\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.827612",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}