{
  "repo": "django/django",
  "instance_id": "django__django-16983",
  "base_commit": "ddb6506618ea52c6b20e97eefad03ed847a1e3de",
  "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -533,6 +533,16 @@ def _check_filter_item(self, obj, field_name, label):\n                 return must_be(\n                     \"a many-to-many field\", option=label, obj=obj, id=\"admin.E020\"\n                 )\n+            elif not field.remote_field.through._meta.auto_created:\n+                return [\n+                    checks.Error(\n+                        f\"The value of '{label}' cannot include the ManyToManyField \"\n+                        f\"'{field_name}', because that field manually specifies a \"\n+                        f\"relationship model.\",\n+                        obj=obj.__class__,\n+                        id=\"admin.E013\",\n+                    )\n+                ]\n             else:\n                 return []\n \n",
  "test_patch": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -4,10 +4,11 @@\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import CASCADE, F, Field, ForeignKey, Model\n+from django.db.models import CASCADE, F, Field, ForeignKey, ManyToManyField, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n \n from .models import Band, Song, User, ValidationTestInlineModel, ValidationTestModel\n \n@@ -321,6 +322,26 @@ class TestModelAdmin(ModelAdmin):\n             \"admin.E020\",\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_invalid_m2m_field_with_through(self):\n+        class Artist(Model):\n+            bands = ManyToManyField(\"Band\", through=\"BandArtist\")\n+\n+        class BandArtist(Model):\n+            artist = ForeignKey(\"Artist\", on_delete=CASCADE)\n+            band = ForeignKey(\"Band\", on_delete=CASCADE)\n+\n+        class TestModelAdmin(ModelAdmin):\n+            filter_vertical = [\"bands\"]\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin,\n+            Artist,\n+            \"The value of 'filter_vertical[0]' cannot include the ManyToManyField \"\n+            \"'bands', because that field manually specifies a relationship model.\",\n+            \"admin.E013\",\n+        )\n+\n     def test_valid_case(self):\n         class TestModelAdmin(ModelAdmin):\n             filter_vertical = (\"users\",)\n@@ -363,6 +384,26 @@ class TestModelAdmin(ModelAdmin):\n             \"admin.E020\",\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_invalid_m2m_field_with_through(self):\n+        class Artist(Model):\n+            bands = ManyToManyField(\"Band\", through=\"BandArtist\")\n+\n+        class BandArtist(Model):\n+            artist = ForeignKey(\"Artist\", on_delete=CASCADE)\n+            band = ForeignKey(\"Band\", on_delete=CASCADE)\n+\n+        class TestModelAdmin(ModelAdmin):\n+            filter_horizontal = [\"bands\"]\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin,\n+            Artist,\n+            \"The value of 'filter_horizontal[0]' cannot include the ManyToManyField \"\n+            \"'bands', because that field manually specifies a relationship model.\",\n+            \"admin.E013\",\n+        )\n+\n     def test_valid_case(self):\n         class TestModelAdmin(ModelAdmin):\n             filter_horizontal = (\"users\",)\n",
  "problem_statement": "Add system check for filter_horizontal/filter_vertical on ManyToManyFields with intermediary models.\nDescription\n\t\nHi team,\nI'm a huge fan of Django and have been using it since 0.95 but I stumbled over this one.\nNeither of\n​https://docs.djangoproject.com/en/4.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.filter_horizontal and \n​https://docs.djangoproject.com/en/4.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.filter_vertical\ncall out the requirement to not use \nManyToManyField(through=\"\")\nIn the same way:\n​https://docs.djangoproject.com/en/4.1/ref/models/fields/#django.db.models.ManyToManyField.through\ndoesn't call out the consequence that filter_horizontal and filter_vertical will stop working if one goes down the pathway of:\nManyToManyField(through=\"\")\nI just wasted half a day chasing this down.\n",
  "hints_text": "Neither of ​https://docs.djangoproject.com/en/4.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.filter_horizontal and ​https://docs.djangoproject.com/en/4.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.filter_vertical call out the requirement to not use ManyToManyField(through=\"\") There is a separate section in the same docs that describes ​Working with many-to-many intermediary models. I don't think it is necessary to cross-refer this section in all places where ManyToManyField is mentioned (see also #12203.) In the same way: ​https://docs.djangoproject.com/en/4.1/ref/models/fields/#django.db.models.ManyToManyField.through doesn't call out the consequence that filter_horizontal and filter_vertical will stop working if one goes down the pathway of: ManyToManyField(through=\"\") Models docs are not the right place to describe how contrib apps work.\nWhat do you think about raising admin.E013 in this case? \"fields[n]/fieldsets[n][m]/filter_vertical[n]/filter_horizontal[n] cannot include the ManyToManyField <field name>, because that field manually specifies a relationship model.\"\nThanks. Sounds like a good outcome.\nReplying to David Pratten: Thanks. Sounds like a good outcome. Would you like to prepare a patch via GitHub PR? The following should work: django/contrib/admin/checks.py diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py index 27537d9614..a844b3f16f 100644 a b class BaseModelAdminChecks: 533533 return must_be( 534534 \"a many-to-many field\", option=label, obj=obj, id=\"admin.E020\" 535535 ) 536 elif not field.remote_field.through._meta.auto_created: 537 return [ 538 checks.Error( 539 f\"The value of '{label}' cannot include the ManyToManyField \" 540 f\"'{field_name}', because that field manually specifies a \" 541 f\"relationship model.\", 542 obj=obj.__class__, 543 id=\"admin.E013\", 544 ) 545 ] 536546 else: 537547 return [] 538548 Tests and ​docs changes (in the admin.E013 description) are also required.\nOk I'll take this up.\nReplying to Mariusz Felisiak: I'm happy to work through this, but it won't be quick. Are we redefining admin.E013 there seems to already be a description of this error? Could you direct me to an explanation of where the documentation for the errors is held and how it is updated? Could you direct me to an explanation of how to add a test case? Thanks Replying to David Pratten: Thanks. Sounds like a good outcome. Would you like to prepare a patch via GitHub PR? The following should work: django/contrib/admin/checks.py diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py index 27537d9614..a844b3f16f 100644 a b class BaseModelAdminChecks: 533533 return must_be( 534534 \"a many-to-many field\", option=label, obj=obj, id=\"admin.E020\" 535535 ) 536 elif not field.remote_field.through._meta.auto_created: 537 return [ 538 checks.Error( 539 f\"The value of '{label}' cannot include the ManyToManyField \" 540 f\"'{field_name}', because that field manually specifies a \" 541 f\"relationship model.\", 542 obj=obj.__class__, 543 id=\"admin.E013\", 544 ) 545 ] 536546 else: 537547 return [] 538548 Tests and ​docs changes (in the admin.E013 description) are also required.\nReplying to David Pratten: Are we redefining admin.E013 there seems to already be a description of this error? Could you direct me to an explanation of where the documentation for the errors is held and how it is updated? We want to add filter_vertical[n] and filter_horizontal[n] to the existing error admin.E013 that is documented in ​docs/ref/checks.txt, so we need to update the message in docs to the: \"fields[n]/filter_horizontal[n]/filter_vertical[n]/fieldsets[n][m] cannot include the ManyToManyField <field name>, because that field manually specifies a relationship model.\" Docs are wrapped at 79 chars. Could you direct me to an explanation of how to add a test case? I would add test methods to the tests.modeladmin.test_checks.FilterHorizontalCheckTests and tests.modeladmin.test_checks.FilterVerticalCheckTests.\nHello David, would you have time to work on this? Thanks!\nSince David seems to be busy, I'll try to take this up.",
  "created_at": "2023-06-16T13:38:28Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_invalid_m2m_field_with_through (modeladmin.test_checks.FilterHorizontalCheckTests.test_invalid_m2m_field_with_through)\", \"test_invalid_m2m_field_with_through (modeladmin.test_checks.FilterVerticalCheckTests.test_invalid_m2m_field_with_through)\"]",
  "PASS_TO_PASS": "[\"test_both_list_editable_and_list_display_links (modeladmin.test_checks.ListDisplayEditableTests.test_both_list_editable_and_list_display_links)\", \"The first item in list_display can be in list_editable as long as\", \"The first item in list_display cannot be in list_editable if\", \"The first item in list_display can be the same as the first in\", \"The first item in list_display cannot be the same as the first item\", \"list_display and list_editable can contain the same values\", \"test_not_boolean (modeladmin.test_checks.SaveOnTopCheckTests.test_not_boolean)\", \"test_valid_case (modeladmin.test_checks.SaveOnTopCheckTests.test_valid_case)\", \"test_invalid_field_type (modeladmin.test_checks.RadioFieldsCheckTests.test_invalid_field_type)\", \"test_invalid_value (modeladmin.test_checks.RadioFieldsCheckTests.test_invalid_value)\", \"test_missing_field (modeladmin.test_checks.RadioFieldsCheckTests.test_missing_field)\", \"test_not_dictionary (modeladmin.test_checks.RadioFieldsCheckTests.test_not_dictionary)\", \"test_valid_case (modeladmin.test_checks.RadioFieldsCheckTests.test_valid_case)\", \"test_not_integer (modeladmin.test_checks.ListPerPageCheckTests.test_not_integer)\", \"test_valid_case (modeladmin.test_checks.ListPerPageCheckTests.test_valid_case)\", \"test_not_integer (modeladmin.test_checks.ExtraCheckTests.test_not_integer)\", \"test_valid_case (modeladmin.test_checks.ExtraCheckTests.test_valid_case)\", \"test_actions_not_unique (modeladmin.test_checks.ActionsCheckTests.test_actions_not_unique)\", \"test_actions_unique (modeladmin.test_checks.ActionsCheckTests.test_actions_unique)\", \"test_custom_permissions_require_matching_has_method (modeladmin.test_checks.ActionsCheckTests.test_custom_permissions_require_matching_has_method)\", \"test_duplicate_fields_in_fields (modeladmin.test_checks.FieldsCheckTests.test_duplicate_fields_in_fields)\", \"test_inline (modeladmin.test_checks.FieldsCheckTests.test_inline)\", \"test_invalid_field_type (modeladmin.test_checks.FilterHorizontalCheckTests.test_invalid_field_type)\", \"test_missing_field (modeladmin.test_checks.FilterHorizontalCheckTests.test_missing_field)\", \"test_not_iterable (modeladmin.test_checks.FilterHorizontalCheckTests.test_not_iterable)\", \"test_valid_case (modeladmin.test_checks.FilterHorizontalCheckTests.test_valid_case)\", \"test_invalid_field_type (modeladmin.test_checks.DateHierarchyCheckTests.test_invalid_field_type)\", \"test_missing_field (modeladmin.test_checks.DateHierarchyCheckTests.test_missing_field)\", \"test_related_invalid_field_type (modeladmin.test_checks.DateHierarchyCheckTests.test_related_invalid_field_type)\", \"test_related_valid_case (modeladmin.test_checks.DateHierarchyCheckTests.test_related_valid_case)\", \"test_valid_case (modeladmin.test_checks.DateHierarchyCheckTests.test_valid_case)\", \"test_invalid_type (modeladmin.test_checks.ListSelectRelatedCheckTests.test_invalid_type)\", \"test_valid_case (modeladmin.test_checks.ListSelectRelatedCheckTests.test_valid_case)\", \"test_autocomplete_e036 (modeladmin.test_checks.AutocompleteFieldsTests.test_autocomplete_e036)\", \"test_autocomplete_e037 (modeladmin.test_checks.AutocompleteFieldsTests.test_autocomplete_e037)\", \"test_autocomplete_e039 (modeladmin.test_checks.AutocompleteFieldsTests.test_autocomplete_e039)\", \"test_autocomplete_e040 (modeladmin.test_checks.AutocompleteFieldsTests.test_autocomplete_e040)\", \"test_autocomplete_e38 (modeladmin.test_checks.AutocompleteFieldsTests.test_autocomplete_e38)\", \"test_autocomplete_is_onetoone (modeladmin.test_checks.AutocompleteFieldsTests.test_autocomplete_is_onetoone)\", \"test_autocomplete_is_valid (modeladmin.test_checks.AutocompleteFieldsTests.test_autocomplete_is_valid)\", \"test_duplicate_fields (modeladmin.test_checks.FieldsetsCheckTests.test_duplicate_fields)\", \"test_duplicate_fields_in_fieldsets (modeladmin.test_checks.FieldsetsCheckTests.test_duplicate_fields_in_fieldsets)\", \"test_fieldsets_with_custom_form_validation (modeladmin.test_checks.FieldsetsCheckTests.test_fieldsets_with_custom_form_validation)\", \"test_item_not_a_pair (modeladmin.test_checks.FieldsetsCheckTests.test_item_not_a_pair)\", \"test_missing_fields_key (modeladmin.test_checks.FieldsetsCheckTests.test_missing_fields_key)\", \"test_non_iterable_item (modeladmin.test_checks.FieldsetsCheckTests.test_non_iterable_item)\", \"test_not_iterable (modeladmin.test_checks.FieldsetsCheckTests.test_not_iterable)\", \"test_second_element_of_item_not_a_dict (modeladmin.test_checks.FieldsetsCheckTests.test_second_element_of_item_not_a_dict)\", \"test_specified_both_fields_and_fieldsets (modeladmin.test_checks.FieldsetsCheckTests.test_specified_both_fields_and_fieldsets)\", \"test_valid_case (modeladmin.test_checks.FieldsetsCheckTests.test_valid_case)\", \"test_not_integer (modeladmin.test_checks.MinNumCheckTests.test_not_integer)\", \"test_valid_case (modeladmin.test_checks.MinNumCheckTests.test_valid_case)\", \"test_inline_without_formset_class (modeladmin.test_checks.FormsetCheckTests.test_inline_without_formset_class)\", \"test_invalid_type (modeladmin.test_checks.FormsetCheckTests.test_invalid_type)\", \"test_valid_case (modeladmin.test_checks.FormsetCheckTests.test_valid_case)\", \"test_not_iterable (modeladmin.test_checks.SearchFieldsCheckTests.test_not_iterable)\", \"test_callable (modeladmin.test_checks.ListFilterTests.test_callable)\", \"test_list_filter_is_func (modeladmin.test_checks.ListFilterTests.test_list_filter_is_func)\", \"test_list_filter_validation (modeladmin.test_checks.ListFilterTests.test_list_filter_validation)\", \"test_missing_field (modeladmin.test_checks.ListFilterTests.test_missing_field)\", \"test_not_associated_with_field_name (modeladmin.test_checks.ListFilterTests.test_not_associated_with_field_name)\", \"test_not_callable (modeladmin.test_checks.ListFilterTests.test_not_callable)\", \"test_not_filter (modeladmin.test_checks.ListFilterTests.test_not_filter)\", \"test_not_filter_again (modeladmin.test_checks.ListFilterTests.test_not_filter_again)\", \"test_not_filter_again_again (modeladmin.test_checks.ListFilterTests.test_not_filter_again_again)\", \"test_not_list_filter_class (modeladmin.test_checks.ListFilterTests.test_not_list_filter_class)\", \"test_valid_case (modeladmin.test_checks.ListFilterTests.test_valid_case)\", \"test_invalid_field_type (modeladmin.test_checks.FilterVerticalCheckTests.test_invalid_field_type)\", \"test_missing_field (modeladmin.test_checks.FilterVerticalCheckTests.test_missing_field)\", \"test_not_iterable (modeladmin.test_checks.FilterVerticalCheckTests.test_not_iterable)\", \"test_valid_case (modeladmin.test_checks.FilterVerticalCheckTests.test_valid_case)\", \"test_field_attname (modeladmin.test_checks.RawIdCheckTests.test_field_attname)\", \"test_invalid_field_type (modeladmin.test_checks.RawIdCheckTests.test_invalid_field_type)\", \"test_missing_field (modeladmin.test_checks.RawIdCheckTests.test_missing_field)\", \"test_not_iterable (modeladmin.test_checks.RawIdCheckTests.test_not_iterable)\", \"test_valid_case (modeladmin.test_checks.RawIdCheckTests.test_valid_case)\", \"test_invalid_field_type (modeladmin.test_checks.PrepopulatedFieldsCheckTests.test_invalid_field_type)\", \"test_missing_field (modeladmin.test_checks.PrepopulatedFieldsCheckTests.test_missing_field)\", \"test_missing_field_again (modeladmin.test_checks.PrepopulatedFieldsCheckTests.test_missing_field_again)\", \"test_not_dictionary (modeladmin.test_checks.PrepopulatedFieldsCheckTests.test_not_dictionary)\", \"test_not_list_or_tuple (modeladmin.test_checks.PrepopulatedFieldsCheckTests.test_not_list_or_tuple)\", \"test_one_to_one_field (modeladmin.test_checks.PrepopulatedFieldsCheckTests.test_one_to_one_field)\", \"test_valid_case (modeladmin.test_checks.PrepopulatedFieldsCheckTests.test_valid_case)\", \"test_not_integer (modeladmin.test_checks.ListMaxShowAllCheckTests.test_not_integer)\", \"test_valid_case (modeladmin.test_checks.ListMaxShowAllCheckTests.test_valid_case)\", \"test_fieldsets_with_custom_form_validation (modeladmin.test_checks.FormCheckTests.test_fieldsets_with_custom_form_validation)\", \"test_invalid_type (modeladmin.test_checks.FormCheckTests.test_invalid_type)\", \"test_valid_case (modeladmin.test_checks.FormCheckTests.test_valid_case)\", \"test_not_boolean (modeladmin.test_checks.SaveAsCheckTests.test_not_boolean)\", \"test_valid_case (modeladmin.test_checks.SaveAsCheckTests.test_valid_case)\", \"test_None_is_valid_case (modeladmin.test_checks.ListDisplayLinksCheckTests.test_None_is_valid_case)\", \"list_display_links is checked for list/tuple/None even if\", \"list_display_links check is skipped if get_list_display() is overridden.\", \"test_missing_field (modeladmin.test_checks.ListDisplayLinksCheckTests.test_missing_field)\", \"test_missing_in_list_display (modeladmin.test_checks.ListDisplayLinksCheckTests.test_missing_in_list_display)\", \"test_not_iterable (modeladmin.test_checks.ListDisplayLinksCheckTests.test_not_iterable)\", \"test_valid_case (modeladmin.test_checks.ListDisplayLinksCheckTests.test_valid_case)\", \"test_invalid_expression (modeladmin.test_checks.OrderingCheckTests.test_invalid_expression)\", \"test_not_iterable (modeladmin.test_checks.OrderingCheckTests.test_not_iterable)\", \"test_random_marker_not_alone (modeladmin.test_checks.OrderingCheckTests.test_random_marker_not_alone)\", \"test_valid_case (modeladmin.test_checks.OrderingCheckTests.test_valid_case)\", \"test_valid_complex_case (modeladmin.test_checks.OrderingCheckTests.test_valid_complex_case)\", \"test_valid_expression (modeladmin.test_checks.OrderingCheckTests.test_valid_expression)\", \"test_valid_random_marker_case (modeladmin.test_checks.OrderingCheckTests.test_valid_random_marker_case)\", \"test_invalid_callable (modeladmin.test_checks.InlinesCheckTests.test_invalid_callable)\", \"test_invalid_model (modeladmin.test_checks.InlinesCheckTests.test_invalid_model)\", \"test_invalid_model_type (modeladmin.test_checks.InlinesCheckTests.test_invalid_model_type)\", \"test_missing_model_field (modeladmin.test_checks.InlinesCheckTests.test_missing_model_field)\", \"test_not_correct_inline_field (modeladmin.test_checks.InlinesCheckTests.test_not_correct_inline_field)\", \"test_not_iterable (modeladmin.test_checks.InlinesCheckTests.test_not_iterable)\", \"test_not_model_admin (modeladmin.test_checks.InlinesCheckTests.test_not_model_admin)\", \"test_valid_case (modeladmin.test_checks.InlinesCheckTests.test_valid_case)\", \"test_not_integer (modeladmin.test_checks.MaxNumCheckTests.test_not_integer)\", \"test_valid_case (modeladmin.test_checks.MaxNumCheckTests.test_valid_case)\", \"test_invalid_field_type (modeladmin.test_checks.ListDisplayTests.test_invalid_field_type)\", \"test_invalid_m2m_related_name (modeladmin.test_checks.ListDisplayTests.test_invalid_m2m_related_name)\", \"test_invalid_related_field (modeladmin.test_checks.ListDisplayTests.test_invalid_related_field)\", \"test_invalid_reverse_related_field (modeladmin.test_checks.ListDisplayTests.test_invalid_reverse_related_field)\", \"test_missing_field (modeladmin.test_checks.ListDisplayTests.test_missing_field)\", \"test_not_iterable (modeladmin.test_checks.ListDisplayTests.test_not_iterable)\", \"test_valid_case (modeladmin.test_checks.ListDisplayTests.test_valid_case)\", \"test_valid_field_accessible_via_instance (modeladmin.test_checks.ListDisplayTests.test_valid_field_accessible_via_instance)\", \"test_missing_field (modeladmin.test_checks.FkNameCheckTests.test_missing_field)\", \"test_proxy_model_parent (modeladmin.test_checks.FkNameCheckTests.test_proxy_model_parent)\", \"test_valid_case (modeladmin.test_checks.FkNameCheckTests.test_valid_case)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.776932",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}