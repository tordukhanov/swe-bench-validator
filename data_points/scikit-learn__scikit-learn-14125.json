{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-14125",
  "base_commit": "c0c53137cec61a4d6cd72d8a43bbe0321476e440",
  "patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -240,9 +240,9 @@ def type_of_target(y):\n         raise ValueError('Expected array-like (array or non-string sequence), '\n                          'got %r' % y)\n \n-    sparseseries = (y.__class__.__name__ == 'SparseSeries')\n-    if sparseseries:\n-        raise ValueError(\"y cannot be class 'SparseSeries'.\")\n+    sparse_pandas = (y.__class__.__name__ in ['SparseSeries', 'SparseArray'])\n+    if sparse_pandas:\n+        raise ValueError(\"y cannot be class 'SparseSeries' or 'SparseArray'\")\n \n     if is_multilabel(y):\n         return 'multilabel-indicator'\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_multiclass.py b/sklearn/utils/tests/test_multiclass.py\n--- a/sklearn/utils/tests/test_multiclass.py\n+++ b/sklearn/utils/tests/test_multiclass.py\n@@ -2,7 +2,7 @@\n import numpy as np\n import scipy.sparse as sp\n from itertools import product\n-\n+import pytest\n \n from scipy.sparse import issparse\n from scipy.sparse import csc_matrix\n@@ -293,14 +293,14 @@ def test_type_of_target():\n                ' use a binary array or sparse matrix instead.')\n         assert_raises_regex(ValueError, msg, type_of_target, example)\n \n-    try:\n-        from pandas import SparseSeries\n-    except ImportError:\n-        raise SkipTest(\"Pandas not found\")\n \n-    y = SparseSeries([1, 0, 0, 1, 0])\n-    msg = \"y cannot be class 'SparseSeries'.\"\n-    assert_raises_regex(ValueError, msg, type_of_target, y)\n+def test_type_of_target_pandas_sparse():\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    y = pd.SparseArray([1, np.nan, np.nan, 1, np.nan])\n+    msg = \"y cannot be class 'SparseSeries' or 'SparseArray'\"\n+    with pytest.raises(ValueError, match=msg):\n+        type_of_target(y)\n \n \n def test_class_distribution():\n",
  "problem_statement": "[MRG] Fix 'SparseSeries deprecated: scipy-dev failing on travis' #14002\n<!--\r\nThanks for contributing a pull request! Please ensure you have taken a look at\r\nthe contribution guidelines: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#pull-request-checklist\r\n-->\r\n\r\n#### Reference Issues/PRs\r\nFixes #14002\r\nIssue: SparseSeries deprecated: scipy-dev failing on travis\r\n<!--\r\nExample: Fixes #1234. See also #3456.\r\nPlease use keywords (e.g., Fixes) to create link to the issues or pull requests\r\nyou resolved, so that they will automatically be closed when your pull request\r\nis merged. See https://github.com/blog/1506-closing-issues-via-pull-requests\r\n-->\r\n\r\n\r\n#### What does this implement/fix? Explain your changes.\r\nUse a Series with sparse values instead instead of `SparseSeries`.\r\n\r\n#### Any other comments?\r\n\r\n\r\n<!--\r\nPlease be aware that we are a loose team of volunteers so patience is\r\nnecessary; assistance handling other issues is very welcome. We value\r\nall user contributions, no matter how minor they are. If we are slow to\r\nreview, either the pull request needs some benchmarking, tinkering,\r\nconvincing, etc. or more likely the reviewers are simply busy. In either\r\ncase, we ask for your understanding during the review process.\r\nFor more information, see our FAQ on this topic:\r\nhttp://scikit-learn.org/dev/faq.html#why-is-my-pull-request-not-getting-any-attention.\r\n\r\nThanks for contributing!\r\n-->\r\n\n",
  "hints_text": "I'm not sure why codecov/patch failed on this commit \n > I'm not sure why codecov/patch failed on this commit\r\n\r\nThe build which using pandas is failing on Azure. You should check if there is a change of behaviour with the new code (maybe we need to change the error message). The codecov failure is due to the Azure failure.\nWe originally did not support `pd.SparseArray` because of: https://github.com/scikit-learn/scikit-learn/issues/7352#issuecomment-305472045 But it looks like its been fixed in pandas: https://github.com/pandas-dev/pandas/pull/22325 and the original issue with `pd.SparseSeries` is gone.\r\n\r\n```py\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\npd.__version__\r\n# 0.24.2\r\n\r\nss1 = pd.Series(pd.SparseArray([1, 0, 2, 1, 0]))\r\nss2 = pd.SparseSeries([1, 0, 2, 1, 0])\r\n\r\nnp.asarray(ss1)\r\n# array([1, 0, 2, 1, 0])\r\n\r\nnp.asarray(ss2)\r\n# array([1, 0, 2, 1, 0])\r\n```\r\n\r\nThis was fixed in pandas version `0.24`.\nOk, Iâ€™ll close this PR\nCron is still failing on master. I think this should be re-opened if only to ignore the future warning in `test_type_of_target`.\nWe can support pandas sparse arrays as of pandas 0.24. This means `type_of_target` does not need to error for pandas > 0.24 on sparse arrays. But technically we still need to raise for pandas <= 0.23. One way to do this is to check pandas version and raise accordingly.\n@thomasjpfan be careful with the example, because the default fill value in pandas is np.nan and not 0 (for better or worse ...). So the correct example would be with nans (or by specifying 0 as the fill value):\r\n\r\nwith pandas 0.22\r\n```\r\na = pd.SparseArray([1, np.nan, 2, 1, np.nan])\r\n\r\nnp.array(a)\r\n# array([1., 2., 1.])\r\n\r\nnp.array(pd.SparseSeries(a))\r\n# array([1., 2., 1.])\r\n\r\nnp.array(pd.Series(a))\r\n# array([ 1., nan,  2.,  1., nan])\r\n```\r\n\r\nwith pandas 0.24\r\n```\r\nnp.array(a)                    \r\n# array([ 1., nan,  2.,  1., nan])\r\n\r\nnp.array(pd.SparseSeries(a))                      \r\n# array([ 1., nan,  2.,  1., nan])\r\n\r\nnp.array(pd.Series(a))         \r\n# array([ 1., nan,  2.,  1., nan])\r\n```\r\n\r\n(so apparently even before 0.24, a Series (not SparseSeries) had the correct behaviour)\nI suppose the original check for SparseSeries was there to have a more informative error message (as I can imagine that if the y labels at once became a different length, that might have been confusing). If that is the case, I would indeed keep the check as is but only do it for pandas <= 0.23, as @thomasjpfan suggests. ",
  "created_at": "2019-06-19T15:48:38Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_multiclass.py::test_type_of_target_pandas_sparse\"]",
  "PASS_TO_PASS": "[\"sklearn/utils/tests/test_multiclass.py::test_unique_labels\", \"sklearn/utils/tests/test_multiclass.py::test_unique_labels_non_specific\", \"sklearn/utils/tests/test_multiclass.py::test_unique_labels_mixed_types\", \"sklearn/utils/tests/test_multiclass.py::test_is_multilabel\", \"sklearn/utils/tests/test_multiclass.py::test_check_classification_targets\", \"sklearn/utils/tests/test_multiclass.py::test_type_of_target\", \"sklearn/utils/tests/test_multiclass.py::test_class_distribution\", \"sklearn/utils/tests/test_multiclass.py::test_safe_split_with_precomputed_kernel\", \"sklearn/utils/tests/test_multiclass.py::test_ovr_decision_function\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.003000",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}