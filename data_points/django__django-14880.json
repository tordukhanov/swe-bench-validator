{
  "repo": "django/django",
  "instance_id": "django__django-14880",
  "base_commit": "402ae37873974afa5093e6d6149175a118979cd9",
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -239,7 +239,9 @@ def _check_clashes(self):\n             if not rel_is_hidden and clash_field.name == rel_name:\n                 errors.append(\n                     checks.Error(\n-                        \"Reverse accessor for '%s' clashes with field name '%s'.\" % (field_name, clash_name),\n+                        f\"Reverse accessor '{rel_opts.object_name}.{rel_name}' \"\n+                        f\"for '{field_name}' clashes with field name \"\n+                        f\"'{clash_name}'.\",\n                         hint=(\"Rename field '%s', or add/change a related_name \"\n                               \"argument to the definition for field '%s'.\") % (clash_name, field_name),\n                         obj=self,\n@@ -271,7 +273,9 @@ def _check_clashes(self):\n             if not rel_is_hidden and clash_field.get_accessor_name() == rel_name:\n                 errors.append(\n                     checks.Error(\n-                        \"Reverse accessor for '%s' clashes with reverse accessor for '%s'.\" % (field_name, clash_name),\n+                        f\"Reverse accessor '{rel_opts.object_name}.{rel_name}' \"\n+                        f\"for '{field_name}' clashes with reverse accessor for \"\n+                        f\"'{clash_name}'.\",\n                         hint=(\"Add or change a related_name argument \"\n                               \"to the definition for '%s' or '%s'.\") % (field_name, clash_name),\n                         obj=self,\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -862,8 +862,8 @@ class Model(models.Model):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.rel' \"\n-                \"clashes with field name \"\n+                \"Reverse accessor 'Target.model_set' for \"\n+                \"'invalid_models_tests.Model.rel' clashes with field name \"\n                 \"'invalid_models_tests.Target.model_set'.\",\n                 hint=(\n                     \"Rename field 'invalid_models_tests.Target.model_set', or \"\n@@ -885,9 +885,9 @@ class Model(models.Model):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.foreign' \"\n-                \"clashes with reverse accessor for \"\n-                \"'invalid_models_tests.Model.m2m'.\",\n+                \"Reverse accessor 'Target.model_set' for \"\n+                \"'invalid_models_tests.Model.foreign' clashes with reverse \"\n+                \"accessor for 'invalid_models_tests.Model.m2m'.\",\n                 hint=(\n                     \"Add or change a related_name argument to the definition \"\n                     \"for 'invalid_models_tests.Model.foreign' or \"\n@@ -897,9 +897,9 @@ class Model(models.Model):\n                 id='fields.E304',\n             ),\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.m2m' \"\n-                \"clashes with reverse accessor for \"\n-                \"'invalid_models_tests.Model.foreign'.\",\n+                \"Reverse accessor 'Target.model_set' for \"\n+                \"'invalid_models_tests.Model.m2m' clashes with reverse \"\n+                \"accessor for 'invalid_models_tests.Model.foreign'.\",\n                 hint=(\n                     \"Add or change a related_name argument to the definition \"\n                     \"for 'invalid_models_tests.Model.m2m' or \"\n@@ -927,9 +927,9 @@ class Child(Parent):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.children' \"\n-                \"clashes with field name \"\n-                \"'invalid_models_tests.Child.m2m_clash'.\",\n+                \"Reverse accessor 'Child.m2m_clash' for \"\n+                \"'invalid_models_tests.Model.children' clashes with field \"\n+                \"name 'invalid_models_tests.Child.m2m_clash'.\",\n                 hint=(\n                     \"Rename field 'invalid_models_tests.Child.m2m_clash', or \"\n                     \"add/change a related_name argument to the definition for \"\n@@ -1085,8 +1085,9 @@ class Model(models.Model):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.rel' \"\n-                \"clashes with field name 'invalid_models_tests.Target.clash'.\",\n+                \"Reverse accessor 'Target.clash' for \"\n+                \"'invalid_models_tests.Model.rel' clashes with field name \"\n+                \"'invalid_models_tests.Target.clash'.\",\n                 hint=(\n                     \"Rename field 'invalid_models_tests.Target.clash', or \"\n                     \"add/change a related_name argument to the definition for \"\n@@ -1218,9 +1219,9 @@ class Model(models.Model):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.first_m2m' \"\n-                \"clashes with reverse accessor for \"\n-                \"'invalid_models_tests.Model.second_m2m'.\",\n+                \"Reverse accessor 'Model.model_set' for \"\n+                \"'invalid_models_tests.Model.first_m2m' clashes with reverse \"\n+                \"accessor for 'invalid_models_tests.Model.second_m2m'.\",\n                 hint=(\n                     \"Add or change a related_name argument to the definition \"\n                     \"for 'invalid_models_tests.Model.first_m2m' or \"\n@@ -1230,9 +1231,9 @@ class Model(models.Model):\n                 id='fields.E304',\n             ),\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.second_m2m' \"\n-                \"clashes with reverse accessor for \"\n-                \"'invalid_models_tests.Model.first_m2m'.\",\n+                \"Reverse accessor 'Model.model_set' for \"\n+                \"'invalid_models_tests.Model.second_m2m' clashes with reverse \"\n+                \"accessor for 'invalid_models_tests.Model.first_m2m'.\",\n                 hint=(\n                     \"Add or change a related_name argument to the definition \"\n                     \"for 'invalid_models_tests.Model.second_m2m' or \"\n@@ -1249,9 +1250,9 @@ class Model(models.Model):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.model_set' \"\n-                \"clashes with field name \"\n-                \"'invalid_models_tests.Model.model_set'.\",\n+                \"Reverse accessor 'Model.model_set' for \"\n+                \"'invalid_models_tests.Model.model_set' clashes with field \"\n+                \"name 'invalid_models_tests.Model.model_set'.\",\n                 hint=(\n                     \"Rename field 'invalid_models_tests.Model.model_set', or \"\n                     \"add/change a related_name argument to the definition for \"\n@@ -1287,8 +1288,9 @@ class Model(models.Model):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.m2m' \"\n-                \"clashes with field name 'invalid_models_tests.Model.clash'.\",\n+                \"Reverse accessor 'Model.clash' for \"\n+                \"'invalid_models_tests.Model.m2m' clashes with field name \"\n+                \"'invalid_models_tests.Model.clash'.\",\n                 hint=(\n                     \"Rename field 'invalid_models_tests.Model.clash', or \"\n                     \"add/change a related_name argument to the definition for \"\n@@ -1327,9 +1329,9 @@ class Model(models.Model):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.model_set' \"\n-                \"clashes with field name \"\n-                \"'invalid_models_tests.Model.model_set'.\",\n+                \"Reverse accessor 'Model.model_set' for \"\n+                \"'invalid_models_tests.Model.model_set' clashes with field \"\n+                \"name 'invalid_models_tests.Model.model_set'.\",\n                 hint=(\n                     \"Rename field 'invalid_models_tests.Model.model_set', or \"\n                     \"add/change a related_name argument to the definition for \"\n@@ -1365,8 +1367,9 @@ class Model(models.Model):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.foreign' \"\n-                \"clashes with field name 'invalid_models_tests.Model.clash'.\",\n+                \"Reverse accessor 'Model.clash' for \"\n+                \"'invalid_models_tests.Model.foreign' clashes with field name \"\n+                \"'invalid_models_tests.Model.clash'.\",\n                 hint=(\n                     \"Rename field 'invalid_models_tests.Model.clash', or \"\n                     \"add/change a related_name argument to the definition for \"\n@@ -1413,8 +1416,9 @@ class Model(models.Model):\n \n         self.assertEqual(Model.check(), [\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.foreign_1' \"\n-                \"clashes with field name 'invalid_models_tests.Target.id'.\",\n+                \"Reverse accessor 'Target.id' for \"\n+                \"'invalid_models_tests.Model.foreign_1' clashes with field \"\n+                \"name 'invalid_models_tests.Target.id'.\",\n                 hint=(\n                     \"Rename field 'invalid_models_tests.Target.id', or \"\n                     \"add/change a related_name argument to the definition for \"\n@@ -1435,9 +1439,9 @@ class Model(models.Model):\n                 id='fields.E303',\n             ),\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.foreign_1' \"\n-                \"clashes with reverse accessor for \"\n-                \"'invalid_models_tests.Model.m2m_1'.\",\n+                \"Reverse accessor 'Target.id' for \"\n+                \"'invalid_models_tests.Model.foreign_1' clashes with reverse \"\n+                \"accessor for 'invalid_models_tests.Model.m2m_1'.\",\n                 hint=(\n                     \"Add or change a related_name argument to the definition \"\n                     \"for 'invalid_models_tests.Model.foreign_1' or \"\n@@ -1460,9 +1464,9 @@ class Model(models.Model):\n             ),\n \n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.foreign_2' \"\n-                \"clashes with reverse accessor for \"\n-                \"'invalid_models_tests.Model.m2m_2'.\",\n+                \"Reverse accessor 'Target.src_safe' for \"\n+                \"'invalid_models_tests.Model.foreign_2' clashes with reverse \"\n+                \"accessor for 'invalid_models_tests.Model.m2m_2'.\",\n                 hint=(\n                     \"Add or change a related_name argument to the definition \"\n                     \"for 'invalid_models_tests.Model.foreign_2' or \"\n@@ -1485,8 +1489,9 @@ class Model(models.Model):\n             ),\n \n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.m2m_1' \"\n-                \"clashes with field name 'invalid_models_tests.Target.id'.\",\n+                \"Reverse accessor 'Target.id' for \"\n+                \"'invalid_models_tests.Model.m2m_1' clashes with field name \"\n+                \"'invalid_models_tests.Target.id'.\",\n                 hint=(\n                     \"Rename field 'invalid_models_tests.Target.id', or \"\n                     \"add/change a related_name argument to the definition for \"\n@@ -1507,9 +1512,9 @@ class Model(models.Model):\n                 id='fields.E303',\n             ),\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.m2m_1' \"\n-                \"clashes with reverse accessor for \"\n-                \"'invalid_models_tests.Model.foreign_1'.\",\n+                \"Reverse accessor 'Target.id' for \"\n+                \"'invalid_models_tests.Model.m2m_1' clashes with reverse \"\n+                \"accessor for 'invalid_models_tests.Model.foreign_1'.\",\n                 hint=(\n                     \"Add or change a related_name argument to the definition \"\n                     \"for 'invalid_models_tests.Model.m2m_1' or \"\n@@ -1531,9 +1536,9 @@ class Model(models.Model):\n                 id='fields.E305',\n             ),\n             Error(\n-                \"Reverse accessor for 'invalid_models_tests.Model.m2m_2' \"\n-                \"clashes with reverse accessor for \"\n-                \"'invalid_models_tests.Model.foreign_2'.\",\n+                \"Reverse accessor 'Target.src_safe' for \"\n+                \"'invalid_models_tests.Model.m2m_2' clashes with reverse \"\n+                \"accessor for 'invalid_models_tests.Model.foreign_2'.\",\n                 hint=(\n                     \"Add or change a related_name argument to the definition \"\n                     \"for 'invalid_models_tests.Model.m2m_2' or \"\n@@ -1564,16 +1569,16 @@ class Child(Parent):\n             other_parent = models.OneToOneField(Parent, models.CASCADE)\n \n         errors = [\n-            ('fields.E304', 'accessor', 'parent_ptr', 'other_parent'),\n-            ('fields.E305', 'query name', 'parent_ptr', 'other_parent'),\n-            ('fields.E304', 'accessor', 'other_parent', 'parent_ptr'),\n-            ('fields.E305', 'query name', 'other_parent', 'parent_ptr'),\n+            ('fields.E304', 'accessor', \" 'Parent.child'\", 'parent_ptr', 'other_parent'),\n+            ('fields.E305', 'query name', '', 'parent_ptr', 'other_parent'),\n+            ('fields.E304', 'accessor', \" 'Parent.child'\", 'other_parent', 'parent_ptr'),\n+            ('fields.E305', 'query name', '', 'other_parent', 'parent_ptr'),\n         ]\n         self.assertEqual(Child.check(), [\n             Error(\n-                \"Reverse %s for 'invalid_models_tests.Child.%s' clashes with \"\n+                \"Reverse %s%s for 'invalid_models_tests.Child.%s' clashes with \"\n                 \"reverse %s for 'invalid_models_tests.Child.%s'.\"\n-                % (attr, field_name, attr, clash_name),\n+                % (attr, rel_name, field_name, attr, clash_name),\n                 hint=(\n                     \"Add or change a related_name argument to the definition \"\n                     \"for 'invalid_models_tests.Child.%s' or \"\n@@ -1582,7 +1587,7 @@ class Child(Parent):\n                 obj=Child._meta.get_field(field_name),\n                 id=error_id,\n             )\n-            for error_id, attr, field_name, clash_name in errors\n+            for error_id, attr, rel_name, field_name, clash_name in errors\n         ])\n \n \ndiff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -292,8 +292,9 @@ class Foo(models.Model):\n             Foo._meta.get_field('foo').check(),\n             [\n                 Error(\n-                    \"Reverse accessor for 'model_inheritance.Foo.foo' clashes \"\n-                    \"with field name 'model_inheritance.Descendant.foo'.\",\n+                    \"Reverse accessor 'Descendant.foo' for \"\n+                    \"'model_inheritance.Foo.foo' clashes with field name \"\n+                    \"'model_inheritance.Descendant.foo'.\",\n                     hint=(\n                         \"Rename field 'model_inheritance.Descendant.foo', or \"\n                         \"add/change a related_name argument to the definition \"\n",
  "problem_statement": "Improve error messages for reverse accessor clashes.\nDescription\n\t\nrefer: ​https://github.com/django/django/pull/14880\nRelatedField._check_clashes() provides feedback when it finds a clash, but fails to mentioned what the clashing name was. This cost me some significant time to track because of inadequate feedback and would have become immediately clear had the feedback listed the clashing name. \nA proposed patch appears above, but alas this impacts some unit tests as well. Happy to add fixes to those to the patch, but have been requested to file and issue here.\n",
  "hints_text": "",
  "created_at": "2021-09-22T06:15:53Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_clash_parent_link (invalid_models_tests.test_relative_fields.ComplexClashTests)\", \"test_complex_clash (invalid_models_tests.test_relative_fields.ComplexClashTests)\", \"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_reverse_foreign_key (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"Ref #22047.\"]",
  "PASS_TO_PASS": "[\"If ``through_fields`` kwarg is given, it must specify both\", \"test_intersection_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"Providing invalid field names to ManyToManyField.through_fields\", \"Mixing up the order of link fields to ManyToManyField.through_fields\", \"ManyToManyField accepts the ``through_fields`` kwarg\", \"test_superset_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_valid_model (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_no_clash_across_apps_without_accessor (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_abstract_model_with_regular_python_mixin_mro (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_cannot_override_indirect_abstract_field (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"In contrast to standard Python MRO, resolution of inherited fields is\", \"test_multi_inheritance_field_clashes (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"Single layer multiple inheritance is as expected, deriving the\", \"test_multiple_inheritance_cannot_shadow_concrete_inherited_field (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_override_field_with_attr (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_override_one2one_relation_auto_field_clashes (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_overriding_field_removed_by_concrete_model (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_shadow_related_name_when_set_to_none (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_shadowed_fkey_id (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_single_parent (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"Where the Child model needs to inherit a field from a different base\", \"test_virtual_field (model_inheritance.test_abstract_inheritance.AbstractInheritanceTests)\", \"test_no_clash_for_hidden_related_name (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_ambiguous_relationship_model_from (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_ambiguous_relationship_model_to (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"#25723 - Referenced model registration lookup should be run against the\", \"test_foreign_key_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_non_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_non_unique_field_under_explicit_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_partially_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_unique_field_with_meta_constraint (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_non_unique_fields (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_partially_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_unique_field_with_meta_constraint (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_invalid_related_query_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_m2m_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"#25723 - Through model registration lookup should be run against the\", \"test_many_to_many_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_useless_options (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_useless_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_missing_relationship_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_missing_relationship_model_on_model_check (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_not_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_nullable_primary_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_default_without_default_value (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_null_on_non_nullable_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_referencing_to_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_invalid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_valid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_missing_foreign_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_with_foreign_key_to_wrong_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_to_fields_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_to_fields_not_checked_if_related_model_doesnt_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_too_many_foreign_keys_in_self_referential_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_unique_m2m (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_valid_foreign_key_without_accessor (invalid_models_tests.test_relative_fields.RelativeFieldTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.706424",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}