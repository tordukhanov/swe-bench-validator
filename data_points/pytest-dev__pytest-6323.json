{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-6323",
  "base_commit": "e8c8559efa2461104ac748c66d75764ff5c90a29",
  "patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -45,8 +45,30 @@ def from_config(cls, config) -> \"TempPathFactory\":\n             given_basetemp=config.option.basetemp, trace=config.trace.get(\"tmpdir\")\n         )\n \n+    def _ensure_relative_to_basetemp(self, basename: str):\n+        basename = os.path.normpath(basename)\n+        if (self.getbasetemp() / basename).resolve().parent != self.getbasetemp():\n+            raise ValueError(\n+                \"{} is not a normalized and relative path\".format(basename)\n+            )\n+        return basename\n+\n     def mktemp(self, basename: str, numbered: bool = True) -> Path:\n-        \"\"\"makes a temporary directory managed by the factory\"\"\"\n+        \"\"\"Creates a new temporary directory managed by the factory.\n+\n+        :param basename:\n+            Directory base name, must be a relative path.\n+\n+        :param numbered:\n+            If True, ensure the directory is unique by adding a number\n+            prefix greater than any existing one: ``basename=\"foo\"`` and ``numbered=True``\n+            means that this function will create directories named ``\"foo-0\"``,\n+            ``\"foo-1\"``, ``\"foo-2\"`` and so on.\n+\n+        :return:\n+            The path to the new directory.\n+        \"\"\"\n+        basename = self._ensure_relative_to_basetemp(basename)\n         if not numbered:\n             p = self.getbasetemp().joinpath(basename)\n             p.mkdir()\n@@ -90,10 +112,9 @@ class TempdirFactory:\n \n     _tmppath_factory = attr.ib(type=TempPathFactory)\n \n-    def mktemp(self, basename: str, numbered: bool = True):\n-        \"\"\"Create a subdirectory of the base temporary directory and return it.\n-        If ``numbered``, ensure the directory is unique by adding a number\n-        prefix greater than any existing one.\n+    def mktemp(self, basename: str, numbered: bool = True) -> py.path.local:\n+        \"\"\"\n+        Same as :meth:`TempPathFactory.mkdir`, but returns a ``py.path.local`` object.\n         \"\"\"\n         return py.path.local(self._tmppath_factory.mktemp(basename, numbered).resolve())\n \n",
  "test_patch": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -74,19 +74,38 @@ def test_1(tmpdir):\n         assert not mytemp.join(\"hello\").check()\n \n \n-def test_basetemp(testdir):\n+testdata = [\n+    (\"mypath\", True),\n+    (\"/mypath1\", False),\n+    (\"./mypath1\", True),\n+    (\"../mypath3\", False),\n+    (\"../../mypath4\", False),\n+    (\"mypath5/..\", False),\n+    (\"mypath6/../mypath6\", True),\n+    (\"mypath7/../mypath7/..\", False),\n+]\n+\n+\n+@pytest.mark.parametrize(\"basename, is_ok\", testdata)\n+def test_mktemp(testdir, basename, is_ok):\n     mytemp = testdir.tmpdir.mkdir(\"mytemp\")\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n-        def test_1(tmpdir_factory):\n-            tmpdir_factory.mktemp('hello', numbered=False)\n-    \"\"\"\n+        def test_abs_path(tmpdir_factory):\n+            tmpdir_factory.mktemp('{}', numbered=False)\n+        \"\"\".format(\n+            basename\n+        )\n     )\n+\n     result = testdir.runpytest(p, \"--basetemp=%s\" % mytemp)\n-    assert result.ret == 0\n-    print(mytemp)\n-    assert mytemp.join(\"hello\").check()\n+    if is_ok:\n+        assert result.ret == 0\n+        assert mytemp.join(basename).check()\n+    else:\n+        assert result.ret == 1\n+        result.stdout.fnmatch_lines(\"*ValueError*\")\n \n \n def test_tmpdir_always_is_realpath(testdir):\n",
  "problem_statement": "disallow absolute and non-normalized paths for mktemp\nfollowup to #4202\r\n\r\nthis is an potential issue and attack vector, absolute paths are no tmpdir and escaping paths aren't either,\r\njust normalizing would also break the world\r\n\r\nso we should only ever accept normalized relative paths for it\n",
  "hints_text": "Hi,\r\n\r\nCan I try to work on this. I am new, but this seems not a difficult job.\nGreat @gftea, feel free to open a PR (even if incomplete) and we can discuss it from there. üëç  ",
  "created_at": "2019-12-06T21:28:13Z",
  "version": "5.3",
  "FAIL_TO_PASS": "[\"testing/test_tmpdir.py::test_mktemp[/mypath1-False]\", \"testing/test_tmpdir.py::test_mktemp[../mypath3-False]\", \"testing/test_tmpdir.py::test_mktemp[../../mypath4-False]\", \"testing/test_tmpdir.py::test_mktemp[mypath5/..-False]\", \"testing/test_tmpdir.py::test_mktemp[mypath6/../mypath6-True]\", \"testing/test_tmpdir.py::test_mktemp[mypath7/../mypath7/..-False]\"]",
  "PASS_TO_PASS": "[\"testing/test_tmpdir.py::TestTempdirHandler::test_mktemp\", \"testing/test_tmpdir.py::TestTempdirHandler::test_tmppath_relative_basetemp_absolute\", \"testing/test_tmpdir.py::test_get_user_uid_not_found\", \"testing/test_tmpdir.py::TestNumberedDir::test_make\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_lock_create\", \"testing/test_tmpdir.py::TestNumberedDir::test_lock_register_cleanup_removal\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_keep\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_locked\", \"testing/test_tmpdir.py::TestNumberedDir::test_cleanup_ignores_symlink\", \"testing/test_tmpdir.py::TestNumberedDir::test_removal_accepts_lock\", \"testing/test_tmpdir.py::TestRmRf::test_rm_rf\", \"testing/test_tmpdir.py::TestRmRf::test_rm_rf_with_read_only_file\", \"testing/test_tmpdir.py::TestRmRf::test_rm_rf_with_read_only_directory\", \"testing/test_tmpdir.py::TestRmRf::test_on_rm_rf_error\", \"testing/test_tmpdir.py::test_tmpdir_equals_tmp_path\", \"testing/test_tmpdir.py::test_tmpdir_fixture\", \"testing/test_tmpdir.py::TestConfigTmpdir::test_getbasetemp_custom_removes_old\", \"testing/test_tmpdir.py::test_mktemp[mypath-True]\", \"testing/test_tmpdir.py::test_mktemp[./mypath1-True]\", \"testing/test_tmpdir.py::test_tmpdir_always_is_realpath\", \"testing/test_tmpdir.py::test_tmp_path_always_is_realpath\", \"testing/test_tmpdir.py::test_tmpdir_too_long_on_parametrization\", \"testing/test_tmpdir.py::test_tmpdir_factory\", \"testing/test_tmpdir.py::test_tmpdir_fallback_tox_env\", \"testing/test_tmpdir.py::test_tmpdir_fallback_uid_not_found\", \"testing/test_tmpdir.py::test_basetemp_with_read_only_files\"]",
  "environment_setup_commit": "92767fec5122a14fbf671374c9162e947278339b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.932028",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}