{
  "repo": "django/django",
  "instance_id": "django__django-16786",
  "base_commit": "3fe0c609cf6d50e45e1246492ebac02660561177",
  "patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -403,8 +403,11 @@ def __init__(self, relation_name, *, condition=Q()):\n         self.alias = None\n         if not isinstance(condition, Q):\n             raise ValueError(\"condition argument must be a Q() instance.\")\n+        # .condition and .resolved_condition have to be stored independently\n+        # as the former must remain unchanged for Join.__eq__ to remain stable\n+        # and reusable even once their .filtered_relation are resolved.\n         self.condition = condition\n-        self.path = []\n+        self.resolved_condition = None\n \n     def __eq__(self, other):\n         if not isinstance(other, self.__class__):\n@@ -418,18 +421,26 @@ def __eq__(self, other):\n     def clone(self):\n         clone = FilteredRelation(self.relation_name, condition=self.condition)\n         clone.alias = self.alias\n-        clone.path = self.path[:]\n+        if (resolved_condition := self.resolved_condition) is not None:\n+            clone.resolved_condition = resolved_condition.clone()\n         return clone\n \n-    def resolve_expression(self, *args, **kwargs):\n-        \"\"\"\n-        QuerySet.annotate() only accepts expression-like arguments\n-        (with a resolve_expression() method).\n-        \"\"\"\n-        raise NotImplementedError(\"FilteredRelation.resolve_expression() is unused.\")\n+    def relabeled_clone(self, change_map):\n+        clone = self.clone()\n+        if resolved_condition := clone.resolved_condition:\n+            clone.resolved_condition = resolved_condition.relabeled_clone(change_map)\n+        return clone\n+\n+    def resolve_expression(self, query, reuse, *args, **kwargs):\n+        clone = self.clone()\n+        clone.resolved_condition = query.build_filter(\n+            self.condition,\n+            can_reuse=reuse,\n+            allow_joins=True,\n+            split_subq=False,\n+            update_join_types=False,\n+        )[0]\n+        return clone\n \n     def as_sql(self, compiler, connection):\n-        # Resolve the condition in Join.filtered_relation.\n-        query = compiler.query\n-        where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))\n-        return compiler.compile(where)\n+        return compiler.compile(self.resolved_condition)\ndiff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py\n--- a/django/db/models/sql/datastructures.py\n+++ b/django/db/models/sql/datastructures.py\n@@ -154,10 +154,7 @@ def relabeled_clone(self, change_map):\n         new_parent_alias = change_map.get(self.parent_alias, self.parent_alias)\n         new_table_alias = change_map.get(self.table_alias, self.table_alias)\n         if self.filtered_relation is not None:\n-            filtered_relation = self.filtered_relation.clone()\n-            filtered_relation.path = [\n-                change_map.get(p, p) for p in self.filtered_relation.path\n-            ]\n+            filtered_relation = self.filtered_relation.relabeled_clone(change_map)\n         else:\n             filtered_relation = None\n         return self.__class__(\n@@ -188,10 +185,6 @@ def __eq__(self, other):\n     def __hash__(self):\n         return hash(self.identity)\n \n-    def equals(self, other):\n-        # Ignore filtered_relation in equality check.\n-        return self.identity[:-1] == other.identity[:-1]\n-\n     def demote(self):\n         new = self.relabeled_clone({})\n         new.join_type = INNER\n@@ -242,6 +235,3 @@ def __eq__(self, other):\n \n     def __hash__(self):\n         return hash(self.identity)\n-\n-    def equals(self, other):\n-        return self.identity == other.identity\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -73,6 +73,19 @@ def get_children_from_q(q):\n             yield child\n \n \n+def rename_prefix_from_q(prefix, replacement, q):\n+    return Q.create(\n+        [\n+            rename_prefix_from_q(prefix, replacement, c)\n+            if isinstance(c, Node)\n+            else (c[0].replace(prefix, replacement, 1), c[1])\n+            for c in q.children\n+        ],\n+        q.connector,\n+        q.negated,\n+    )\n+\n+\n JoinInfo = namedtuple(\n     \"JoinInfo\",\n     (\"final_field\", \"targets\", \"opts\", \"joins\", \"path\", \"transform_function\"),\n@@ -994,7 +1007,7 @@ def count_active_tables(self):\n         \"\"\"\n         return len([1 for count in self.alias_refcount.values() if count])\n \n-    def join(self, join, reuse=None, reuse_with_filtered_relation=False):\n+    def join(self, join, reuse=None):\n         \"\"\"\n         Return an alias for the 'join', either reusing an existing alias for\n         that join or creating a new one. 'join' is either a base_table_class or\n@@ -1003,23 +1016,15 @@ def join(self, join, reuse=None, reuse_with_filtered_relation=False):\n         The 'reuse' parameter can be either None which means all joins are\n         reusable, or it can be a set containing the aliases that can be reused.\n \n-        The 'reuse_with_filtered_relation' parameter is used when computing\n-        FilteredRelation instances.\n-\n         A join is always created as LOUTER if the lhs alias is LOUTER to make\n         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new\n         joins are created as LOUTER if the join is nullable.\n         \"\"\"\n-        if reuse_with_filtered_relation and reuse:\n-            reuse_aliases = [\n-                a for a, j in self.alias_map.items() if a in reuse and j.equals(join)\n-            ]\n-        else:\n-            reuse_aliases = [\n-                a\n-                for a, j in self.alias_map.items()\n-                if (reuse is None or a in reuse) and j == join\n-            ]\n+        reuse_aliases = [\n+            a\n+            for a, j in self.alias_map.items()\n+            if (reuse is None or a in reuse) and j == join\n+        ]\n         if reuse_aliases:\n             if join.table_alias in reuse_aliases:\n                 reuse_alias = join.table_alias\n@@ -1042,6 +1047,18 @@ def join(self, join, reuse=None, reuse_with_filtered_relation=False):\n             join.join_type = join_type\n         join.table_alias = alias\n         self.alias_map[alias] = join\n+        if filtered_relation := join.filtered_relation:\n+            resolve_reuse = reuse\n+            if resolve_reuse is not None:\n+                resolve_reuse = set(reuse) | {alias}\n+            joins_len = len(self.alias_map)\n+            join.filtered_relation = filtered_relation.resolve_expression(\n+                self, reuse=resolve_reuse\n+            )\n+            # Some joins were during expression resolving, they must be present\n+            # before the one we just added.\n+            if joins_len < len(self.alias_map):\n+                self.alias_map[alias] = self.alias_map.pop(alias)\n         return alias\n \n     def join_parent_model(self, opts, model, alias, seen):\n@@ -1328,9 +1345,9 @@ def build_filter(\n         can_reuse=None,\n         allow_joins=True,\n         split_subq=True,\n-        reuse_with_filtered_relation=False,\n         check_filterable=True,\n         summarize=False,\n+        update_join_types=True,\n     ):\n         \"\"\"\n         Build a WhereNode for a single filter clause but don't add it\n@@ -1353,9 +1370,6 @@ def build_filter(\n \n         The 'can_reuse' is a set of reusable joins for multijoins.\n \n-        If 'reuse_with_filtered_relation' is True, then only joins in can_reuse\n-        will be reused.\n-\n         The method will create a filter clause that can be added to the current\n         query. However, if the filter isn't added to the query then the caller\n         is responsible for unreffing the joins used.\n@@ -1372,6 +1386,7 @@ def build_filter(\n                 split_subq=split_subq,\n                 check_filterable=check_filterable,\n                 summarize=summarize,\n+                update_join_types=update_join_types,\n             )\n         if hasattr(filter_expr, \"resolve_expression\"):\n             if not getattr(filter_expr, \"conditional\", False):\n@@ -1417,7 +1432,6 @@ def build_filter(\n                 alias,\n                 can_reuse=can_reuse,\n                 allow_many=allow_many,\n-                reuse_with_filtered_relation=reuse_with_filtered_relation,\n             )\n \n             # Prevent iterator from being consumed by check_related_objects()\n@@ -1525,6 +1539,7 @@ def _add_q(\n         split_subq=True,\n         check_filterable=True,\n         summarize=False,\n+        update_join_types=True,\n     ):\n         \"\"\"Add a Q-object to the current filter.\"\"\"\n         connector = q_object.connector\n@@ -1544,42 +1559,17 @@ def _add_q(\n                 split_subq=split_subq,\n                 check_filterable=check_filterable,\n                 summarize=summarize,\n+                update_join_types=update_join_types,\n             )\n             joinpromoter.add_votes(needed_inner)\n             if child_clause:\n                 target_clause.add(child_clause, connector)\n-        needed_inner = joinpromoter.update_join_types(self)\n+        if update_join_types:\n+            needed_inner = joinpromoter.update_join_types(self)\n+        else:\n+            needed_inner = []\n         return target_clause, needed_inner\n \n-    def build_filtered_relation_q(\n-        self, q_object, reuse, branch_negated=False, current_negated=False\n-    ):\n-        \"\"\"Add a FilteredRelation object to the current filter.\"\"\"\n-        connector = q_object.connector\n-        current_negated ^= q_object.negated\n-        branch_negated = branch_negated or q_object.negated\n-        target_clause = WhereNode(connector=connector, negated=q_object.negated)\n-        for child in q_object.children:\n-            if isinstance(child, Node):\n-                child_clause = self.build_filtered_relation_q(\n-                    child,\n-                    reuse=reuse,\n-                    branch_negated=branch_negated,\n-                    current_negated=current_negated,\n-                )\n-            else:\n-                child_clause, _ = self.build_filter(\n-                    child,\n-                    can_reuse=reuse,\n-                    branch_negated=branch_negated,\n-                    current_negated=current_negated,\n-                    allow_joins=True,\n-                    split_subq=False,\n-                    reuse_with_filtered_relation=True,\n-                )\n-            target_clause.add(child_clause, connector)\n-        return target_clause\n-\n     def add_filtered_relation(self, filtered_relation, alias):\n         filtered_relation.alias = alias\n         lookups = dict(get_children_from_q(filtered_relation.condition))\n@@ -1609,6 +1599,11 @@ def add_filtered_relation(self, filtered_relation, alias):\n                         \"relations deeper than the relation_name (got %r for \"\n                         \"%r).\" % (lookup, filtered_relation.relation_name)\n                     )\n+        filtered_relation.condition = rename_prefix_from_q(\n+            filtered_relation.relation_name,\n+            alias,\n+            filtered_relation.condition,\n+        )\n         self._filtered_relations[filtered_relation.alias] = filtered_relation\n \n     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):\n@@ -1734,7 +1729,6 @@ def setup_joins(\n         alias,\n         can_reuse=None,\n         allow_many=True,\n-        reuse_with_filtered_relation=False,\n     ):\n         \"\"\"\n         Compute the necessary table joins for the passage through the fields\n@@ -1747,9 +1741,6 @@ def setup_joins(\n         that can be reused. Note that non-reverse foreign keys are always\n         reusable when using setup_joins().\n \n-        The 'reuse_with_filtered_relation' can be used to force 'can_reuse'\n-        parameter and force the relation on the given connections.\n-\n         If 'allow_many' is False, then any reverse foreign key seen will\n         generate a MultiJoin exception.\n \n@@ -1841,15 +1832,9 @@ def transform(field, alias, *, name, previous):\n                 nullable,\n                 filtered_relation=filtered_relation,\n             )\n-            reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None\n-            alias = self.join(\n-                connection,\n-                reuse=reuse,\n-                reuse_with_filtered_relation=reuse_with_filtered_relation,\n-            )\n+            reuse = can_reuse if join.m2m else None\n+            alias = self.join(connection, reuse=reuse)\n             joins.append(alias)\n-            if filtered_relation:\n-                filtered_relation.path = joins[:]\n         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)\n \n     def trim_joins(self, targets, joins, path):\n",
  "test_patch": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -793,6 +793,47 @@ def test_aggregate(self):\n             qs.annotate(total=Count(\"pk\")).values(\"total\"), [{\"total\": 1}]\n         )\n \n+    def test_condition_spans_join(self):\n+        self.assertSequenceEqual(\n+            Book.objects.annotate(\n+                contains_editor_author=FilteredRelation(\n+                    \"author\", condition=Q(author__name__icontains=F(\"editor__name\"))\n+                )\n+            ).filter(\n+                contains_editor_author__isnull=False,\n+            ),\n+            [self.book1],\n+        )\n+\n+    def test_condition_spans_join_chained(self):\n+        self.assertSequenceEqual(\n+            Book.objects.annotate(\n+                contains_editor_author=FilteredRelation(\n+                    \"author\", condition=Q(author__name__icontains=F(\"editor__name\"))\n+                ),\n+                contains_editor_author_ref=FilteredRelation(\n+                    \"author\",\n+                    condition=Q(author__name=F(\"contains_editor_author__name\")),\n+                ),\n+            ).filter(\n+                contains_editor_author_ref__isnull=False,\n+            ),\n+            [self.book1],\n+        )\n+\n+    def test_condition_self_ref(self):\n+        self.assertSequenceEqual(\n+            Book.objects.annotate(\n+                contains_author=FilteredRelation(\n+                    \"author\",\n+                    condition=Q(title__icontains=F(\"author__name\")),\n+                )\n+            ).filter(\n+                contains_author__isnull=False,\n+            ),\n+            [self.book1],\n+        )\n+\n \n class FilteredRelationAnalyticalAggregationTests(TestCase):\n     @classmethod\n",
  "problem_statement": "FilteredRelation resolves its conditions too late which can result in unknown alias references at SQL compilation time\nDescription\n\t \n\t\t(last modified by Daniel Schaffer)\n\t \nWhen using the Coalesce function as part of the condition of a FilteredRelation, the query fails with an \"Unknown column\" error if any of the fields referenced by Coalesce requires a JOIN. This appears to be due to the JOIN not actually getting added to the query.\n\t\t\tjob_worker_preference=FilteredRelation(\n\t\t\t\trelation_name=\"company__worker_preferences\",\n\t\t\t\tcondition=Q(\n\t\t\t\t\tcompany__worker_preferences__worker=Coalesce(F(\"worker\"), F(\"worker_substitutions__worker\")),\n\t\t\t\t\tcompany__worker_preferences__company=F(\"company\"),\n\t\t\t\t)\n\t\t\t),\n\t\t\tis_allowed=Case(When(job_worker_preference__allow_assignments=True, then=1), default=0, output_field=BooleanField())\nThis can be worked around by creating a separate annotation for the result of the Coalesce function:\n\t\t\tactual_worker=Coalesce(F(\"worker\"), F(\"worker_substitutions__worker\")),\n\t\t\tjob_worker_preference=FilteredRelation(\n\t\t\t\trelation_name=\"company__worker_preferences\",\n\t\t\t\tcondition=Q(\n\t\t\t\t\tcompany__worker_preferences__worker=F(\"actual_worker\"),\n\t\t\t\t\tcompany__worker_preferences__company=F(\"company\"),\n\t\t\t\t)\n\t\t\t),\n\t\t\tis_allowed=Case(When(job_worker_preference__allow_assignments=True, then=1), default=0, output_field=BooleanField())\nHowever, I suspect there may be an underlying issue with how JOINs are detected and added to a query when there are nested field references like this.\nI've reproduced the issue in this repro: ​https://github.com/DanielSchaffer/django_filtered_relation_coalesce_repro.\ndjango_filtered_relation_coalesce_repro/test/test_job_manager.py contains a failing test that reproduces the issue, and a passing test that demonstrates the workaround.\nHere's the stringified representation of the query - note the missing JOIN to django_filtered_relation_coalesce_repro_workersubstitution, even though it's referenced in the COALESCE expression:\nSELECT\n `django_filtered_relation_coalesce_repro_job`.`id`,\n `django_filtered_relation_coalesce_repro_job`.`company_id`,\n `django_filtered_relation_coalesce_repro_job`.`worker_id`,\n CASE WHEN job_worker_preference.`allow_assignments` THEN 1 ELSE 0 END AS `is_allowed`\nFROM `django_filtered_relation_coalesce_repro_job`\nINNER JOIN `django_filtered_relation_coalesce_repro_company`\nON (`django_filtered_relation_coalesce_repro_job`.`company_id` = `django_filtered_relation_coalesce_repro_company`.`id`)\nLEFT OUTER JOIN `django_filtered_relation_coalesce_repro_workerpreference` job_worker_preference\nON (`django_filtered_relation_coalesce_repro_company`.`id` = job_worker_preference.`company_id` AND\n\t((job_worker_preference.`company_id` = `django_filtered_relation_coalesce_repro_job`.`company_id` AND\n\t job_worker_preference.`worker_id` = COALESCE(`django_filtered_relation_coalesce_repro_job`.`worker_id`,\n\t\t\t\t\t\t\t\t\t\t\t\t `django_filtered_relation_coalesce_repro_workersubstitution`.`worker_id`))))\n",
  "hints_text": "Thank you for your report, please provide a minimal set of models that reproduce the issue and the resulting traceback and query if possible. That'll make the job of volunteers trying to validate your report way easier.\nSure, I've updated the ticket with a link to a repro repo\nFilteredRelation annotations are implemented in a somewhat awkward way in the sense that they are accepted by Queryset.annotate even they are not truly resolvable. From my understanding the reason behind that is to somewhat mimic what Queryset.alias does for annotations to avoid incurring an extraneous JOIN if the filtered relation end up not being referenced in the final queryset composition. This is achieved by having Queryset.annotate take an entirely different route when provided a FilteredRelation which defers expression resolving by stashing the instance and its alias in Query._filtered_relations. This stash is then later used to create an actual filtered join when Query.names_to_path detects a reference to a previously stashed name in ._filtered_relations. What the actual implementation of FilteredRelation failed to account for when making the latter rely on a special JIT resolving instead of using the usual resolve_expression path is that .conditions right-hand-sides are allowed to span joins (as in the reporter's case here with F(\"worker_substitutions__worker\")) and thus must be resolved before the query is passed to the compiler. This is problematic because the .condition of FilteredRelation is resolved via the SQLCompiler.compile -> .get_from_clause -> Join.as_sql -> FilteredRelation.as_sql chain but at the time FilteredRelation.as_sql calls compiler.query.build_filtered_relation_q, which happens to augment query.alias_map with the proper joins associated with the right-hand-sides, it's already too late because the list of aliases to be considered for compilation in get_from_clause ​is already fixed. I don't have all the details at hand here but I wonder why we chose to go this way instead of immediately creating the alias_map entry with a corresponding alias_refcount of 0 which would have resulted in the joins being referenceable but ​eventually pruned if unused. We have the machinery in place to track dependency chains between joins so it would only have been a matter of incrementing the transitive chain of joins in names_to_path when the filtered relation was referenced and we should have been set. I didn't have time to commit in exploring this route, which seems like a good way of cleaning all the filtered relation logic, but here's at least a small patch reproduces the issue in our current test suite. tests/filtered_relation/tests.py diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py index 7d77e31b51..825d150830 100644 a b def test_eq(self): 685685 FilteredRelation(\"book\", condition=Q(book__title=\"b\")), mock.ANY 686686 ) 687687 688 def test_condition_spans_join(self): 689 self.assertSequenceEqual( 690 Book.objects.annotate( 691 contains_editor_author=FilteredRelation( 692 \"author\", condition=Q(author__name__contains=F(\"editor__name\")) 693 ) 694 ) 695 .filter( 696 contains_editor_author__isnull=False, 697 ) 698 .order_by(\"id\"), 699 [cls.book1, cls.book4], 700 ) 701 688702 689703class FilteredRelationAggregationTests(TestCase): 690704 @classmethod\nThanks for that explanation Simon - I wouldn't have guessed this was quite that complicated an issue, but that all makes sense (and an interesting read to boot!).\nI have a similar issue with FilteredRelation and joins and traced it back to a django update from 4.0.3 to 4.0.6. My guess is that this specific issue was introduced in https://code.djangoproject.com/ticket/33598 The provided workaround helped me a lot. Thanks!\n#33929 was closed as a duplicate. We should add tests for #33929 when resolving this issue.\n#34229 was closed as a duplicate. We should add tests for #34229 when resolving this issue.\nThe FilteredRelation cannot resolve itself too. def test_ref_self_in_condition(self): self.assertSequenceEqual( Author.objects.annotate( the_book=FilteredRelation( \"book\", condition=Q( name=F('book__title'), ), ), ) .filter( the_book__isnull=False, ), [], )\nCould this bug be resolved after fixing 34362? In the PR I encountered exactly this error",
  "created_at": "2023-04-20T04:27:12Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_condition_self_ref (filtered_relation.tests.FilteredRelationAggregationTests.test_condition_self_ref)\", \"test_condition_spans_join (filtered_relation.tests.FilteredRelationAggregationTests.test_condition_spans_join)\", \"test_condition_spans_join_chained (filtered_relation.tests.FilteredRelationAggregationTests.test_condition_spans_join_chained)\"]",
  "PASS_TO_PASS": "[\"test_aggregate (filtered_relation.tests.FilteredRelationAnalyticalAggregationTests.test_aggregate)\", \"filtered_relation() not only improves performance but also creates\", \"test_as_subquery (filtered_relation.tests.FilteredRelationTests.test_as_subquery)\", \"test_condition_deeper_relation_name (filtered_relation.tests.FilteredRelationTests.test_condition_deeper_relation_name)\", \"test_condition_outside_relation_name (filtered_relation.tests.FilteredRelationTests.test_condition_outside_relation_name)\", \"test_deep_nested_foreign_key (filtered_relation.tests.FilteredRelationTests.test_deep_nested_foreign_key)\", \"test_defer (filtered_relation.tests.FilteredRelationTests.test_defer)\", \"test_difference (filtered_relation.tests.FilteredRelationTests.test_difference)\", \"test_eq (filtered_relation.tests.FilteredRelationTests.test_eq)\", \"test_exclude_relation_with_join (filtered_relation.tests.FilteredRelationTests.test_exclude_relation_with_join)\", \"test_extra (filtered_relation.tests.FilteredRelationTests.test_extra)\", \"test_internal_queryset_alias_mapping (filtered_relation.tests.FilteredRelationTests.test_internal_queryset_alias_mapping)\", \"test_intersection (filtered_relation.tests.FilteredRelationTests.test_intersection)\", \"test_multiple (filtered_relation.tests.FilteredRelationTests.test_multiple)\", \"test_multiple_times (filtered_relation.tests.FilteredRelationTests.test_multiple_times)\", \"test_nested_chained_relations (filtered_relation.tests.FilteredRelationTests.test_nested_chained_relations)\", \"test_nested_foreign_key (filtered_relation.tests.FilteredRelationTests.test_nested_foreign_key)\", \"test_nested_foreign_key_filtered_base_object (filtered_relation.tests.FilteredRelationTests.test_nested_foreign_key_filtered_base_object)\", \"test_nested_foreign_key_nested_field (filtered_relation.tests.FilteredRelationTests.test_nested_foreign_key_nested_field)\", \"test_nested_m2m_filtered (filtered_relation.tests.FilteredRelationTests.test_nested_m2m_filtered)\", \"test_only_not_supported (filtered_relation.tests.FilteredRelationTests.test_only_not_supported)\", \"test_relation_name_lookup (filtered_relation.tests.FilteredRelationTests.test_relation_name_lookup)\", \"test_select_for_update (filtered_relation.tests.FilteredRelationTests.test_select_for_update)\", \"test_select_related (filtered_relation.tests.FilteredRelationTests.test_select_related)\", \"test_select_related_foreign_key (filtered_relation.tests.FilteredRelationTests.test_select_related_foreign_key)\", \"test_select_related_multiple (filtered_relation.tests.FilteredRelationTests.test_select_related_multiple)\", \"test_select_related_with_empty_relation (filtered_relation.tests.FilteredRelationTests.test_select_related_with_empty_relation)\", \"test_union (filtered_relation.tests.FilteredRelationTests.test_union)\", \"test_values (filtered_relation.tests.FilteredRelationTests.test_values)\", \"test_values_list (filtered_relation.tests.FilteredRelationTests.test_values_list)\", \"test_with_condition_as_expression_error (filtered_relation.tests.FilteredRelationTests.test_with_condition_as_expression_error)\", \"test_with_empty_relation_name_error (filtered_relation.tests.FilteredRelationTests.test_with_empty_relation_name_error)\", \"test_with_exclude (filtered_relation.tests.FilteredRelationTests.test_with_exclude)\", \"test_with_generic_foreign_key (filtered_relation.tests.FilteredRelationTests.test_with_generic_foreign_key)\", \"test_with_join (filtered_relation.tests.FilteredRelationTests.test_with_join)\", \"test_with_join_and_complex_condition (filtered_relation.tests.FilteredRelationTests.test_with_join_and_complex_condition)\", \"test_with_m2m (filtered_relation.tests.FilteredRelationTests.test_with_m2m)\", \"test_with_m2m_deep (filtered_relation.tests.FilteredRelationTests.test_with_m2m_deep)\", \"test_with_m2m_multijoin (filtered_relation.tests.FilteredRelationTests.test_with_m2m_multijoin)\", \"test_with_multiple_filter (filtered_relation.tests.FilteredRelationTests.test_with_multiple_filter)\", \"test_with_prefetch_related (filtered_relation.tests.FilteredRelationTests.test_with_prefetch_related)\", \"test_without_join (filtered_relation.tests.FilteredRelationTests.test_without_join)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.771253",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}