{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15231",
  "base_commit": "115dd821a4b9ec94ca1bd339a8c0d63f31a12167",
  "patch": "diff --git a/sympy/printing/fcode.py b/sympy/printing/fcode.py\n--- a/sympy/printing/fcode.py\n+++ b/sympy/printing/fcode.py\n@@ -59,7 +59,7 @@\n     \"Abs\": \"abs\",\n     \"conjugate\": \"conjg\",\n     \"Max\": \"max\",\n-    \"Min\": \"min\"\n+    \"Min\": \"min\",\n }\n \n \n@@ -304,6 +304,19 @@ def _print_Function(self, expr):\n         else:\n             return CodePrinter._print_Function(self, expr.func(*args))\n \n+    def _print_Mod(self, expr):\n+        # NOTE : Fortran has the functions mod() and modulo(). modulo() behaves\n+        # the same wrt to the sign of the arguments as Python and SymPy's\n+        # modulus computations (% and Mod()) but is not available in Fortran 66\n+        # or Fortran 77, thus we raise an error.\n+        if self._settings['standard'] in [66, 77]:\n+            msg = (\"Python % operator and SymPy's Mod() function are not \"\n+                   \"supported by Fortran 66 or 77 standards.\")\n+            raise NotImplementedError(msg)\n+        else:\n+            x, y = expr.args\n+            return \"      modulo({}, {})\".format(self._print(x), self._print(y))\n+\n     def _print_ImaginaryUnit(self, expr):\n         # purpose: print complex numbers nicely in Fortran.\n         return \"cmplx(0,1)\"\ndiff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -1204,7 +1204,7 @@ def _call_printer(self, routine):\n                 assign_to = result.result_var\n \n             constants, not_fortran, f_expr = self._printer_method_with_settings(\n-                'doprint', dict(human=False, source_format='free'),\n+                'doprint', dict(human=False, source_format='free', standard=95),\n                 result.expr, assign_to=assign_to)\n \n             for obj, v in sorted(constants, key=str):\n",
  "test_patch": "diff --git a/sympy/external/tests/test_autowrap.py b/sympy/external/tests/test_autowrap.py\n--- a/sympy/external/tests/test_autowrap.py\n+++ b/sympy/external/tests/test_autowrap.py\n@@ -2,7 +2,7 @@\n import tempfile\n import os\n import warnings\n-from sympy import symbols, Eq\n+from sympy import symbols, Eq, Mod\n from sympy.external import import_module\n from sympy.tensor import IndexedBase, Idx\n from sympy.utilities.autowrap import autowrap, ufuncify, CodeWrapError\n@@ -142,6 +142,21 @@ def runtest_issue_10274(language, backend):\n                 \"}\\n\",\n                 ]\n \n+\n+def test_issue_15230():\n+    has_module('f2py')\n+\n+    x, y = symbols('x, y')\n+    expr = Mod(x, 3.0) - Mod(y, -2.0)\n+    f = autowrap(expr, args=[x, y], language='F95')\n+    exp_res = float(expr.xreplace({x: 3.5, y: 2.7}).evalf())\n+    assert abs(f(3.5, 2.7) - exp_res) < 1e-14\n+\n+    x, y = symbols('x, y', integer=True)\n+    expr = Mod(x, 3) - Mod(y, -2)\n+    f = autowrap(expr, args=[x, y], language='F95')\n+    assert f(3, 2) == expr.xreplace({x: 3, y: 2})\n+\n #\n # tests of language-backend combinations\n #\ndiff --git a/sympy/printing/tests/test_fcode.py b/sympy/printing/tests/test_fcode.py\n--- a/sympy/printing/tests/test_fcode.py\n+++ b/sympy/printing/tests/test_fcode.py\n@@ -1,6 +1,8 @@\n from sympy import (sin, cos, atan2, log, exp, gamma, conjugate, sqrt,\n-    factorial, Integral, Piecewise, Add, diff, symbols, S, Float, Dummy, Eq,\n-    Range, Catalan, EulerGamma, E, GoldenRatio, I, pi, Function, Rational, Integer, Lambda, sign)\n+                   factorial, Integral, Piecewise, Add, diff, symbols, S,\n+                   Float, Dummy, Eq, Range, Catalan, EulerGamma, E,\n+                   GoldenRatio, I, pi, Function, Rational, Integer, Lambda,\n+                   sign, Mod)\n \n from sympy.codegen import For, Assignment, aug_assign\n from sympy.codegen.ast import Declaration, Type, Variable, float32, float64, value_const, real, bool_, While\n@@ -74,6 +76,13 @@ def test_fcode_Float():\n def test_fcode_functions():\n     x, y = symbols('x,y')\n     assert fcode(sin(x) ** cos(y)) == \"      sin(x)**cos(y)\"\n+    raises(NotImplementedError, lambda: fcode(Mod(x, y), standard=66))\n+    raises(NotImplementedError, lambda: fcode(x % y, standard=66))\n+    raises(NotImplementedError, lambda: fcode(Mod(x, y), standard=77))\n+    raises(NotImplementedError, lambda: fcode(x % y, standard=77))\n+    for standard in [90, 95, 2003, 2008]:\n+        assert fcode(Mod(x, y), standard=standard) == \"      modulo(x, y)\"\n+        assert fcode(x % y, standard=standard) == \"      modulo(x, y)\"\n \n \n def test_case():\n",
  "problem_statement": "autowrap fortran fails with expression containing Mod function twice\nMinimal example:\r\n\r\n```\r\nfrom sympy import Matrix, Mod, symbols\r\nfrom sympy.utilities.autowrap import autowrap\r\n\r\nx, y = symbols(['x', 'y'])\r\nexpr = Mod(x, 2)- Mod(y, 2)\r\nexpr = (x % 2) - (y % 2)  # Same error\r\nf = autowrap(expr, args=[x, y])\r\n```\r\n\r\nError:\r\n```\r\nCodeWrapError: Error while executing command: /home/hen/miniconda/envs/py37/bin/python -c import numpy.f2py as f2py2e;f2py2e.main() -c -m wrapper_module_5 wrapped_code_5.f90. Command output is:\r\nrunning build\r\nrunning config_cc\r\nunifing config_cc, config, build_clib, build_ext, build commands --compiler options\r\nrunning config_fc\r\nunifing config_fc, config, build_clib, build_ext, build commands --fcompiler options\r\nrunning build_src\r\nbuild_src\r\nbuilding extension \"wrapper_module_5\" sources\r\nf2py options: []\r\nf2py:> /tmp/tmpz9l25tyj/src.linux-x86_64-3.7/wrapper_module_5module.c\r\ncreating /tmp/tmpz9l25tyj/src.linux-x86_64-3.7\r\nReading fortran codes...\r\n\tReading file 'wrapped_code_5.f90' (format:free)\r\nPost-processing...\r\n\tBlock: wrapper_module_5\r\n\t\t\tBlock: autofunc\r\nPost-processing (stage 2)...\r\nBuilding modules...\r\n\tBuilding module \"wrapper_module_5\"...\r\n\t\tCreating wrapper for Fortran function \"autofunc\"(\"autofunc\")...\r\n\t\tConstructing wrapper function \"autofunc\"...\r\n\t\t  autofunc = autofunc(x,y)\r\n\tWrote C/API module \"wrapper_module_5\" to file \"/tmp/tmpz9l25tyj/src.linux-x86_64-3.7/wrapper_module_5module.c\"\r\n\tFortran 77 wrappers are saved to \"/tmp/tmpz9l25tyj/src.linux-x86_64-3.7/wrapper_module_5-f2pywrappers.f\"\r\n  adding '/tmp/tmpz9l25tyj/src.linux-x86_64-3.7/fortranobject.c' to sources.\r\n  adding '/tmp/tmpz9l25tyj/src.linux-x86_64-3.7' to include_dirs.\r\ncopying /home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/f2py/src/fortranobject.c -> /tmp/tmpz9l25tyj/src.linux-x86_64-3.7\r\ncopying /home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/f2py/src/fortranobject.h -> /tmp/tmpz9l25tyj/src.linux-x86_64-3.7\r\n  adding '/tmp/tmpz9l25tyj/src.linux-x86_64-3.7/wrapper_module_5-f2pywrappers.f' to sources.\r\nbuild_src: building npy-pkg config files\r\nrunning build_ext\r\ncustomize UnixCCompiler\r\ncustomize UnixCCompiler using build_ext\r\nget_default_fcompiler: matching types: '['gnu95', 'intel', 'lahey', 'pg', 'absoft', 'nag', 'vast', 'compaq', 'intele', 'intelem', 'gnu', 'g95', 'pathf95', 'nagfor']'\r\ncustomize Gnu95FCompiler\r\nFound executable /usr/bin/gfortran\r\ncustomize Gnu95FCompiler\r\ncustomize Gnu95FCompiler using build_ext\r\nbuilding 'wrapper_module_5' extension\r\ncompiling C sources\r\nC compiler: gcc -pthread -B /home/hen/miniconda/envs/py37/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC\r\n\r\ncreating /tmp/tmpz9l25tyj/tmp\r\ncreating /tmp/tmpz9l25tyj/tmp/tmpz9l25tyj\r\ncreating /tmp/tmpz9l25tyj/tmp/tmpz9l25tyj/src.linux-x86_64-3.7\r\ncompile options: '-I/tmp/tmpz9l25tyj/src.linux-x86_64-3.7 -I/home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include -I/home/hen/miniconda/envs/py37/include/python3.7m -c'\r\ngcc: /tmp/tmpz9l25tyj/src.linux-x86_64-3.7/fortranobject.c\r\ngcc: /tmp/tmpz9l25tyj/src.linux-x86_64-3.7/wrapper_module_5module.c\r\nIn file included from /home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1823,\r\n                 from /home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:18,\r\n                 from /home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include/numpy/arrayobject.h:4,\r\n                 from /tmp/tmpz9l25tyj/src.linux-x86_64-3.7/fortranobject.h:13,\r\n                 from /tmp/tmpz9l25tyj/src.linux-x86_64-3.7/wrapper_module_5module.c:15:\r\n/home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: #warning \"Using deprecated NumPy API, disable it by \" \"#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-Wcpp]\r\n #warning \"Using deprecated NumPy API, disable it by \" \\\r\n  ^~~~~~~\r\n/tmp/tmpz9l25tyj/src.linux-x86_64-3.7/wrapper_module_5module.c: In function ‘PyInit_wrapper_module_5’:\r\n/tmp/tmpz9l25tyj/src.linux-x86_64-3.7/wrapper_module_5module.c:333:3: warning: this ‘for’ clause does not guard... [-Wmisleading-indentation]\r\n   for(i=0;f2py_routine_defs[i].name!=NULL;i++)\r\n   ^~~\r\n/tmp/tmpz9l25tyj/src.linux-x86_64-3.7/wrapper_module_5module.c:336:5: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the ‘for’\r\n     {\r\n     ^\r\nIn file included from /home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1823,\r\n                 from /home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:18,\r\n                 from /home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include/numpy/arrayobject.h:4,\r\n                 from /tmp/tmpz9l25tyj/src.linux-x86_64-3.7/fortranobject.h:13,\r\n                 from /tmp/tmpz9l25tyj/src.linux-x86_64-3.7/fortranobject.c:2:\r\n/home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: #warning \"Using deprecated NumPy API, disable it by \" \"#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-Wcpp]\r\n #warning \"Using deprecated NumPy API, disable it by \" \\\r\n  ^~~~~~~\r\n/tmp/tmpz9l25tyj/src.linux-x86_64-3.7/fortranobject.c: In function ‘format_def’:\r\n/tmp/tmpz9l25tyj/src.linux-x86_64-3.7/fortranobject.c:138:18: warning: comparison of integer expressions of different signedness: ‘Py_ssize_t’ {aka ‘long int’} and ‘long unsigned int’ [-Wsign-compare]\r\n         if (size < sizeof(notalloc)) {\r\n                  ^\r\ncompiling Fortran sources\r\nFortran f77 compiler: /usr/bin/gfortran -Wall -g -ffixed-form -fno-second-underscore -fPIC -O3 -funroll-loops\r\nFortran f90 compiler: /usr/bin/gfortran -Wall -g -fno-second-underscore -fPIC -O3 -funroll-loops\r\nFortran fix compiler: /usr/bin/gfortran -Wall -g -ffixed-form -fno-second-underscore -Wall -g -fno-second-underscore -fPIC -O3 -funroll-loops\r\ncompile options: '-I/tmp/tmpz9l25tyj/src.linux-x86_64-3.7 -I/home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include -I/home/hen/miniconda/envs/py37/include/python3.7m -c'\r\ngfortran:f90: wrapped_code_5.f90\r\nerror: Command \"/usr/bin/gfortran -Wall -g -fno-second-underscore -fPIC -O3 -funroll-loops -I/tmp/tmpz9l25tyj/src.linux-x86_64-3.7 -I/home/hen/miniconda/envs/py37/lib/python3.7/site-packages/numpy/core/include -I/home/hen/miniconda/envs/py37/include/python3.7m -c -c wrapped_code_5.f90 -o /tmp/tmpz9l25tyj/wrapped_code_5.o\" failed with exit status 1\r\nwrapped_code_5.f90:6:13:\r\n\r\n REAL*8 :: Mod\r\n             1\r\nError: Symbol ‘mod’ at (1) already has basic type of REAL\r\nwrapped_code_5.f90:6:13:\r\n\r\n REAL*8 :: Mod\r\n             1\r\nError: Symbol ‘mod’ at (1) already has basic type of REAL\r\n```\r\n\r\nAnd here's the generated code.\r\n```\r\n!******************************************************************************\r\n!*                       Code generated with sympy 1.2                        *\r\n!*                                                                            *\r\n!*              See http://www.sympy.org/ for more information.               *\r\n!*                                                                            *\r\n!*                      This file is part of 'autowrap'                       *\r\n!******************************************************************************\r\n\r\nREAL*8 function autofunc(x, y)\r\nimplicit none\r\nREAL*8, intent(in) :: x\r\nREAL*8, intent(in) :: y\r\n\r\nREAL*8 :: Mod\r\nREAL*8 :: Mod\r\nautofunc = Mod(1.0*x, 2.0) - Mod(1.0*y, 2.0)\r\n\r\nend function\r\n```\r\n\r\nClearly the problem is that Mod gets imported twice. Hopefully this is an easy fix but I don't know where to start.\n",
  "hints_text": "The first step to fixing this is to define a print method for `Mod` in `sympy/printing/fscode.py`. There is no `_print_Mod()` method.\r\n\r\nYou can see it not working here:\r\n\r\n```\r\nPython 3.5.5 | packaged by conda-forge | (default, Jul 23 2018, 23:45:43) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 6.5.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from sympy import Mod\r\n\r\nIn [2]: from sympy.abc import x\r\n\r\nIn [3]: from sympy.printing import fcode\r\n\r\nIn [6]: fcode(Mod(x, 2))\r\nOut[6]: '      Mod(1.0d0*x, 2.0d0)'\r\n\r\nIn [7]: fcode(x % 2)\r\nOut[7]: '      Mod(1.0d0*x, 2.0d0)'\r\n\r\nIn [8]: x % 2\r\nOut[8]: Mod(x, 2)\r\n```",
  "created_at": "2018-09-13T15:42:47Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_fcode_functions\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_fcode_sign\", \"test_fcode_Pow\", \"test_fcode_Rational\", \"test_fcode_Integer\", \"test_fcode_Float\", \"test_case\", \"test_fcode_functions_with_integers\", \"test_fcode_NumberSymbol\", \"test_fcode_complex\", \"test_implicit\", \"test_not_fortran\", \"test_user_functions\", \"test_inline_function\", \"test_assign_to\", \"test_line_wrapping\", \"test_fcode_precedence\", \"test_fcode_Logical\", \"test_fcode_Xlogical\", \"test_fcode_Relational\", \"test_fcode_Piecewise\", \"test_wrap_fortran\", \"test_wrap_fortran_keep_d0\", \"test_settings\", \"test_free_form_code_line\", \"test_free_form_continuation_line\", \"test_free_form_comment_line\", \"test_loops\", \"test_dummy_loops\", \"test_fcode_Indexed_without_looking_for_contraction\", \"test_derived_classes\", \"test_indent\", \"test_Matrix_printing\", \"test_fcode_For\", \"test_fcode_Declaration\", \"test_MatrixElement_printing\", \"test_aug_assign\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.097227",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}