{
  "repo": "django/django",
  "instance_id": "django__django-16667",
  "base_commit": "02c356f2f3945b8075735d485c3cf48cad991011",
  "patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1161,6 +1161,8 @@ def value_from_datadict(self, data, files, name):\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n+            except OverflowError:\n+                return \"0-0-0\"\n             return date_value.strftime(input_format)\n         return data.get(name)\n \n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_datefield.py b/tests/forms_tests/field_tests/test_datefield.py\n--- a/tests/forms_tests/field_tests/test_datefield.py\n+++ b/tests/forms_tests/field_tests/test_datefield.py\n@@ -1,3 +1,4 @@\n+import sys\n from datetime import date, datetime\n \n from django.core.exceptions import ValidationError\n@@ -36,6 +37,17 @@ def test_form_field(self):\n         d = GetDate({\"mydate_month\": \"1\", \"mydate_day\": \"1\", \"mydate_year\": \"2010\"})\n         self.assertIn('<label for=\"id_mydate_month\">', d.as_p())\n \n+        # Inputs raising an OverflowError.\n+        e = GetDate(\n+            {\n+                \"mydate_month\": str(sys.maxsize + 1),\n+                \"mydate_day\": \"31\",\n+                \"mydate_year\": \"2010\",\n+            }\n+        )\n+        self.assertIs(e.is_valid(), False)\n+        self.assertEqual(e.errors, {\"mydate\": [\"Enter a valid date.\"]})\n+\n     @translation.override(\"nl\")\n     def test_l10n_date_changed(self):\n         \"\"\"\n@@ -149,6 +161,8 @@ def test_datefield_1(self):\n             f.clean(\"200a-10-25\")\n         with self.assertRaisesMessage(ValidationError, \"'Enter a valid date.'\"):\n             f.clean(\"25/10/06\")\n+        with self.assertRaisesMessage(ValidationError, \"'Enter a valid date.'\"):\n+            f.clean(\"0-0-0\")\n         with self.assertRaisesMessage(ValidationError, \"'This field is required.'\"):\n             f.clean(None)\n \ndiff --git a/tests/forms_tests/widget_tests/test_selectdatewidget.py b/tests/forms_tests/widget_tests/test_selectdatewidget.py\n--- a/tests/forms_tests/widget_tests/test_selectdatewidget.py\n+++ b/tests/forms_tests/widget_tests/test_selectdatewidget.py\n@@ -1,3 +1,4 @@\n+import sys\n from datetime import date\n \n from django.forms import DateField, Form, SelectDateWidget\n@@ -610,6 +611,7 @@ def test_value_from_datadict(self):\n             ((None, \"12\", \"1\"), None),\n             ((\"2000\", None, \"1\"), None),\n             ((\"2000\", \"12\", None), None),\n+            ((str(sys.maxsize + 1), \"12\", \"1\"), \"0-0-0\"),\n         ]\n         for values, expected in tests:\n             with self.subTest(values=values):\n",
  "problem_statement": "SelectDateWidget can crash with OverflowError.\nDescription\n\t\nGiven a relatively common view like this:\nfrom django import forms\nfrom django.forms import SelectDateWidget\nfrom django.http import HttpResponse\nclass ReproForm(forms.Form):\n\t my_date = forms.DateField(widget=SelectDateWidget())\ndef repro_view(request):\n\t form = ReproForm(request.GET) # for ease of reproducibility\n\t if form.is_valid():\n\t\t return HttpResponse(\"ok\")\n\t else:\n\t\t return HttpResponse(\"not ok\")\n# urls.py\nurlpatterns = [path('repro/', views.repro_view, name='repro')]\nA user can trigger a server crash, reproducible by running locally and visiting â€‹http://127.0.0.1:8000/repro/?my_date_day=1&my_date_month=1&my_date_year=1234567821345678, which results in\n[...] - ERROR - django.request: Internal Server Error: /repro/\nTraceback (most recent call last):\n[...]\n File \"[...]/site-packages/django/forms/widgets.py\", line 1160, in value_from_datadict\n\tdate_value = datetime.date(int(y), int(m), int(d))\nOverflowError: signed integer is greater than maximum\nThis can be triggered similarly for a post request.\nThe issue happens as part of the validation logic run in form.is_valid, specifically, when calling the SelectDateWidget.value_from_datadict, where the user-controlled value is converted into a date without guarding against a possible OverflowError.\nSpecifically, y, m and d are user controlled, and the code does this:\n date_value = datetime.date(int(y), int(m), int(d)) \nWhen large integers (larger than sys.maxsize) are supplied to date's constructor it will throw an OverflowError:\n>>> import datetime, sys\n>>> datetime.date(sys.maxsize+1, 3, 4)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nOverflowError: Python int too large to convert to C long\n",
  "hints_text": "patch\nThanks for this report.",
  "created_at": "2023-03-20T21:32:53Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_form_field (forms_tests.field_tests.test_datefield.DateFieldTest.test_form_field)\", \"test_value_from_datadict (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_value_from_datadict)\"]",
  "PASS_TO_PASS": "[\"test_datefield_1 (forms_tests.field_tests.test_datefield.DateFieldTest.test_datefield_1)\", \"test_datefield_2 (forms_tests.field_tests.test_datefield.DateFieldTest.test_datefield_2)\", \"test_datefield_3 (forms_tests.field_tests.test_datefield.DateFieldTest.test_datefield_3)\", \"test_datefield_4 (forms_tests.field_tests.test_datefield.DateFieldTest.test_datefield_4)\", \"test_datefield_5 (forms_tests.field_tests.test_datefield.DateFieldTest.test_datefield_5)\", \"test_datefield_changed (forms_tests.field_tests.test_datefield.DateFieldTest.test_datefield_changed)\", \"field.strptime() doesn't raise a UnicodeEncodeError (#16123)\", \"test_form_label_association (forms_tests.field_tests.test_datefield.DateFieldTest.test_form_label_association)\", \"DateField.has_changed() with SelectDateWidget works with a localized\", \"test_l10n_invalid_date_in (forms_tests.field_tests.test_datefield.DateFieldTest.test_l10n_invalid_date_in)\", \"test_custom_input_format (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_custom_input_format)\", \"test_custom_months (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_custom_months)\", \"test_fieldset (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_fieldset)\", \"test_format_value (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_format_value)\", \"test_l10n (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_l10n)\", \"test_render_datetime (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_render_datetime)\", \"test_render_empty (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_render_empty)\", \"Invalid dates should still render the failed date.\", \"Rendering the None or '' values should yield the same output.\", \"test_render_string (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_render_string)\", \"test_selectdate_empty_label (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_selectdate_empty_label)\", \"test_selectdate_required (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_selectdate_required)\", \"test_value_omitted_from_data (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_value_omitted_from_data)\", \"test_years_rendered_without_separator (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest.test_years_rendered_without_separator)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.767997",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}