{
  "repo": "django/django",
  "instance_id": "django__django-13924",
  "base_commit": "7b3ec6bcc8309d5b2003d355fe6f78af89cfeb52",
  "patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -225,8 +225,9 @@ def apply_migration(self, state, migration, fake=False, fake_initial=False):\n                 # Alright, do it normally\n                 with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n                     state = migration.apply(state, schema_editor)\n-                    self.record_migration(migration)\n-                    migration_recorded = True\n+                    if not schema_editor.deferred_sql:\n+                        self.record_migration(migration)\n+                        migration_recorded = True\n         if not migration_recorded:\n             self.record_migration(migration)\n         # Report progress\n",
  "test_patch": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -1,11 +1,12 @@\n from unittest import mock\n \n from django.apps.registry import apps as global_apps\n-from django.db import DatabaseError, connection\n+from django.db import DatabaseError, connection, migrations, models\n from django.db.migrations.exceptions import InvalidMigrationPlan\n from django.db.migrations.executor import MigrationExecutor\n from django.db.migrations.graph import MigrationGraph\n from django.db.migrations.recorder import MigrationRecorder\n+from django.db.migrations.state import ProjectState\n from django.test import (\n     SimpleTestCase, modify_settings, override_settings, skipUnlessDBFeature,\n )\n@@ -655,18 +656,60 @@ def test_migrate_marks_replacement_applied_even_if_it_did_nothing(self):\n     # When the feature is False, the operation and the record won't be\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n-    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n     def test_migrations_applied_and_recorded_atomically(self):\n         \"\"\"Migrations are applied and recorded atomically.\"\"\"\n+        class Migration(migrations.Migration):\n+            operations = [\n+                migrations.CreateModel('model', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                ]),\n+            ]\n+\n         executor = MigrationExecutor(connection)\n         with mock.patch('django.db.migrations.executor.MigrationExecutor.record_migration') as record_migration:\n             record_migration.side_effect = RuntimeError('Recording migration failed.')\n             with self.assertRaisesMessage(RuntimeError, 'Recording migration failed.'):\n+                executor.apply_migration(\n+                    ProjectState(),\n+                    Migration('0001_initial', 'record_migration'),\n+                )\n                 executor.migrate([('migrations', '0001_initial')])\n         # The migration isn't recorded as applied since it failed.\n         migration_recorder = MigrationRecorder(connection)\n-        self.assertFalse(migration_recorder.migration_qs.filter(app='migrations', name='0001_initial').exists())\n-        self.assertTableNotExists('migrations_author')\n+        self.assertIs(\n+            migration_recorder.migration_qs.filter(\n+                app='record_migration', name='0001_initial',\n+            ).exists(),\n+            False,\n+        )\n+        self.assertTableNotExists('record_migration_model')\n+\n+    def test_migrations_not_applied_on_deferred_sql_failure(self):\n+        \"\"\"Migrations are not recorded if deferred SQL application fails.\"\"\"\n+        class DeferredSQL:\n+            def __str__(self):\n+                raise DatabaseError('Failed to apply deferred SQL')\n+\n+        class Migration(migrations.Migration):\n+            atomic = False\n+\n+            def apply(self, project_state, schema_editor, collect_sql=False):\n+                schema_editor.deferred_sql.append(DeferredSQL())\n+\n+        executor = MigrationExecutor(connection)\n+        with self.assertRaisesMessage(DatabaseError, 'Failed to apply deferred SQL'):\n+            executor.apply_migration(\n+                ProjectState(),\n+                Migration('0001_initial', 'deferred_sql'),\n+            )\n+        # The migration isn't recorded as applied since it failed.\n+        migration_recorder = MigrationRecorder(connection)\n+        self.assertIs(\n+            migration_recorder.migration_qs.filter(\n+                app='deferred_sql', name='0001_initial',\n+            ).exists(),\n+            False,\n+        )\n \n \n class FakeLoader:\n",
  "problem_statement": "Migrations are marked applied even if deferred SQL fails to execute\nDescription\n\t\nThe changes introduced in c86a3d80a25acd1887319198ca21a84c451014ad to address #29721 fail to account for the possibility of the schema editor accumulation of deferred SQL which is run at SchemaEditor.__exit__ time.\n",
  "hints_text": "",
  "created_at": "2021-01-21T00:09:22Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"Migrations are not recorded if deferred SQL application fails.\"]",
  "PASS_TO_PASS": "[\"If the current state satisfies the given target, do nothing.\", \"Minimize unnecessary rollbacks in connected apps.\", \"Minimize rollbacks when target has multiple in-app children.\", \"test_alter_id_type_with_fk (migrations.test_executor.ExecutorTests)\", \"Applying all replaced migrations marks replacement as applied (#24628).\", \"An atomic operation is properly rolled back inside a non-atomic\", \"Regression test for #22325 - references to a custom user model defined in the\", \"executor.detect_soft_applied() detects ManyToManyField tables from an\", \"Re-planning a full migration of a fully-migrated set doesn't\", \"A new squash migration will be marked as applied even if all its\", \"Migrations are applied and recorded atomically.\", \"Although the MigrationExecutor interfaces allows for mixed migration\", \"Applying a non-atomic migration works as expected.\", \"#24129 - Tests callback process\", \"Tests running a simple set of migrations.\", \"Tests running a squashed migration from zero (should ignore what it replaces)\", \"Tests detection of initial migrations already having been applied.\", \"#26647 - Unrelated applied migrations should be part of the final\", \"#24123 - All models of apps being unapplied which are\", \"#24123 - All models of apps already applied which are\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.673931",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}