{
  "repo": "django/django",
  "instance_id": "django__django-13616",
  "base_commit": "d4ac23bee1c84d8e4610350202ac068fc90f38c0",
  "patch": "diff --git a/django/core/management/commands/makemessages.py b/django/core/management/commands/makemessages.py\n--- a/django/core/management/commands/makemessages.py\n+++ b/django/core/management/commands/makemessages.py\n@@ -583,8 +583,9 @@ def process_locale_dir(self, locale_dir, files):\n             if locale_dir is NO_LOCALE_DIR:\n                 file_path = os.path.normpath(build_files[0].path)\n                 raise CommandError(\n-                    'Unable to find a locale path to store translations for '\n-                    'file %s' % file_path\n+                    \"Unable to find a locale path to store translations for \"\n+                    \"file %s. Make sure the 'locale' directory exist in an \"\n+                    \"app or LOCALE_PATHS setting is set.\" % file_path\n                 )\n             for build_file in build_files:\n                 msgs = build_file.postprocess_messages(msgs)\n",
  "test_patch": "diff --git a/tests/i18n/test_extraction.py b/tests/i18n/test_extraction.py\n--- a/tests/i18n/test_extraction.py\n+++ b/tests/i18n/test_extraction.py\n@@ -758,9 +758,13 @@ class CustomLayoutExtractionTests(ExtractorTests):\n     work_subdir = 'project_dir'\n \n     def test_no_locale_raises(self):\n-        msg = \"Unable to find a locale path to store translations for file\"\n+        msg = (\n+            \"Unable to find a locale path to store translations for file \"\n+            \"__init__.py. Make sure the 'locale' directory exist in an app or \"\n+            \"LOCALE_PATHS setting is set.\"\n+        )\n         with self.assertRaisesMessage(management.CommandError, msg):\n-            management.call_command('makemessages', locale=LOCALE, verbosity=0)\n+            management.call_command('makemessages', locale=[LOCALE], verbosity=0)\n \n     def test_project_locale_paths(self):\n         self._test_project_locale_paths(os.path.join(self.test_dir, 'project_locale'))\n",
  "problem_statement": "Unclear error raised by makemessages when /locale does not exist under app directory\nDescription\n\t\nI got this error message: \nCommandError: Unable to find a locale path to store translations for file conftest.py\nI had to google the error message and got to this: â€‹https://stackoverflow.com/questions/24937133/unable-to-find-a-locale-path-to-store-translations-for-file-init-py It would be better if the error message was simple and obvious so you could solve the problem yourself directly instead.\nI thought the error message would be better if it said 'We are looking for a directory called \"locale\"\" but after that change the command fails silently anyway. Maybe LOCALE_PATHS should also include the directory where manage.py is by default? Or some other error message should exist...\n",
  "hints_text": "Thanks for the report. I agree the message needs to be improved. There might even be a case for creating /locale for the user when we've detected the user is running makemessages in the app directory (which we already detect), but I would be interested to hear more opinions. Regarding the command failing silently, I cannot reproduce that. I marked a string for translation, created the directory app-level-directory/locale and ran manage.py makemessages -l es from the app directory and received translation files. If you suggest providing feedback to the user when no translatable strings are found that would be a separate issue.\nLooking into this now",
  "created_at": "2020-10-27T12:56:29Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_no_locale_raises (i18n.test_extraction.CustomLayoutExtractionTests)\"]",
  "PASS_TO_PASS": "[\"test_symlink (i18n.test_extraction.SymlinkExtractorTests)\", \"test_project_locale_paths (i18n.test_extraction.CustomLayoutExtractionTests)\", \"test_project_locale_paths_pathlib (i18n.test_extraction.CustomLayoutExtractionTests)\", \"test_no_wrap_disabled (i18n.test_extraction.NoWrapExtractorTests)\", \"test_no_wrap_enabled (i18n.test_extraction.NoWrapExtractorTests)\", \"Regression test for #23717.\", \"test_javascript_literals (i18n.test_extraction.JavascriptExtractorTests)\", \"Regression test for #23583.\", \"test_keep_pot_disabled_by_default (i18n.test_extraction.KeepPotFileExtractorTests)\", \"test_keep_pot_enabled (i18n.test_extraction.KeepPotFileExtractorTests)\", \"test_keep_pot_explicitly_disabled (i18n.test_extraction.KeepPotFileExtractorTests)\", \"test_copy_plural_forms (i18n.test_extraction.CopyPluralFormsExtractorTests)\", \"Ticket #20311.\", \"Ensures a correct workaround for the gettext bug when handling a literal\", \"test_ignore_directory (i18n.test_extraction.IgnoredExtractorTests)\", \"test_ignore_file_patterns (i18n.test_extraction.IgnoredExtractorTests)\", \"test_ignore_subdirectory (i18n.test_extraction.IgnoredExtractorTests)\", \"test_media_static_dirs_ignored (i18n.test_extraction.IgnoredExtractorTests)\", \"test_makemessages_no_settings (i18n.test_extraction.NoSettingsExtractionTests)\", \"test_command_help (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_multiple_locales_excluded (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_multiple_locales_excluded_with_locale (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_one_locale_excluded (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"test_one_locale_excluded_with_locale (i18n.test_extraction.ExcludedLocaleExtractionTests)\", \"makemessages --add-location=file\", \"makemessages --add-location=full\", \"CommandError is raised when using makemessages --add-location with\", \"makemessages --add-location=never\", \"Ensure no leaky paths in comments, e.g. #: path\\to\\file.html.py:123\", \"Behavior is correct if --no-location switch isn't specified.\", \"Behavior is correct if --no-location switch is specified. See #16903.\", \"When the `locale` flag is absent, all dirs from the parent locale dir\", \"test_multiple_locales (i18n.test_extraction.MultipleLocaleExtractionTests)\", \"test_blocktranslate_trimmed (i18n.test_extraction.BasicExtractorTests)\", \"test_comments_extractor (i18n.test_extraction.BasicExtractorTests)\", \"test_context_in_single_quotes (i18n.test_extraction.BasicExtractorTests)\", \"test_extraction_error (i18n.test_extraction.BasicExtractorTests)\", \"test xgettext warning about multiple bare interpolation placeholders\", \"test_invalid_locale (i18n.test_extraction.BasicExtractorTests)\", \"find_files only discover files having the proper extensions.\", \"test_makemessages_gettext_version (i18n.test_extraction.BasicExtractorTests)\", \"test_no_option (i18n.test_extraction.BasicExtractorTests)\", \"Update of PO file doesn't corrupt it with non-UTF-8 encoding on Windows\", \"Content-Type: ... charset=CHARSET is replaced with charset=UTF-8\", \"test_special_char_extracted (i18n.test_extraction.BasicExtractorTests)\", \"Template comment tags on the same line of other constructs (#19552)\", \"Message contexts are correctly extracted for the {% translate %} and\", \"test_unicode_decode_error (i18n.test_extraction.BasicExtractorTests)\", \"test_unicode_file_name (i18n.test_extraction.BasicExtractorTests)\", \"makemessages also runs successfully when USE_I18N is False.\", \"test_valid_locale (i18n.test_extraction.BasicExtractorTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.664297",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}