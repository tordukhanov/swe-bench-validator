{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-19182",
  "base_commit": "46921d2880a7b3d81b92e5ae7b147e955ef78b71",
  "patch": "diff --git a/sympy/core/mul.py b/sympy/core/mul.py\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -7,7 +7,7 @@\n from .singleton import S\n from .operations import AssocOp\n from .cache import cacheit\n-from .logic import fuzzy_not, _fuzzy_group\n+from .logic import fuzzy_not, _fuzzy_group, fuzzy_and\n from .compatibility import reduce\n from .expr import Expr\n from .parameters import global_parameters\n@@ -1249,25 +1249,25 @@ def _eval_is_zero(self):\n \n     def _eval_is_integer(self):\n         from sympy import fraction\n+        from sympy.core.numbers import Float\n \n         is_rational = self._eval_is_rational()\n         if is_rational is False:\n             return False\n \n-        n, d = fraction(self)\n-        if not is_rational:\n-            _self = n/d\n-            if _self != self:\n-                return _self.is_integer\n+        # use exact=True to avoid recomputing num or den\n+        n, d = fraction(self, exact=True)\n         if is_rational:\n             if d is S.One:\n                 return True\n-            elif d == S(2):\n+        if d.is_even:\n+            if d.is_prime:  # literal or symbolic 2\n                 return n.is_even\n-        # if d is even -- 0 or not -- the\n-        # result is not an integer\n-        if n.is_odd and d.is_even:\n-            return False\n+            if n.is_odd:\n+                return False  # true even if d = 0\n+        if n == d:\n+            return fuzzy_and([not bool(self.atoms(Float)),\n+            fuzzy_not(d.is_zero)])\n \n     def _eval_is_polar(self):\n         has_polar = any(arg.is_polar for arg in self.args)\n",
  "test_patch": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -357,6 +357,33 @@ def test_Mul_doesnt_expand_exp():\n     assert sqrt(2)*2**Rational(1, 4)*5**Rational(3, 4) == 10**Rational(3, 4)\n     assert (x**(-log(5)/log(3))*x)/(x*x**( - log(5)/log(3))) == sympify(1)\n \n+def test_Mul_is_integer():\n+\n+    k = Symbol('k', integer=True)\n+    n = Symbol('n', integer=True)\n+    nr = Symbol('nr', rational=False)\n+    nz = Symbol('nz', integer=True, zero=False)\n+    nze = Symbol('nze', even=True, zero=False)\n+    e = Symbol('e', even=True)\n+    o = Symbol('o', odd=True)\n+    i2 = Symbol('2', prime=True, even=True)\n+\n+    assert (k/3).is_integer is None\n+    assert (nz/3).is_integer is None\n+    assert (nr/3).is_integer is False\n+    assert (x*k*n).is_integer is None\n+    assert (e/o).is_integer is None\n+    assert (o/e).is_integer is False\n+    assert (o/i2).is_integer is False\n+    assert Mul(o, 1/o, evaluate=False).is_integer is True\n+    assert Mul(k, 1/k, evaluate=False).is_integer is None\n+    assert Mul(nze, 1/nze, evaluate=False).is_integer is True\n+    assert Mul(2., S.Half, evaluate=False).is_integer is False\n+\n+    s = 2**2**2**Pow(2, 1000, evaluate=False)\n+    m = Mul(s, s, evaluate=False)\n+    assert m.is_integer\n+\n \n def test_Add_Mul_is_integer():\n     x = Symbol('x')\n@@ -366,19 +393,11 @@ def test_Add_Mul_is_integer():\n     nk = Symbol('nk', integer=False)\n     nr = Symbol('nr', rational=False)\n     nz = Symbol('nz', integer=True, zero=False)\n-    e = Symbol('e', even=True)\n-    o = Symbol('e', odd=True)\n \n     assert (-nk).is_integer is None\n     assert (-nr).is_integer is False\n     assert (2*k).is_integer is True\n     assert (-k).is_integer is True\n-    assert (k/3).is_integer is None\n-    assert (nz/3).is_integer is None\n-    assert (nr/3).is_integer is False\n-    assert (x*k*n).is_integer is None\n-    assert (e/o).is_integer is None\n-    assert (o/e).is_integer is False\n \n     assert (k + nk).is_integer is False\n     assert (k + n).is_integer is True\n@@ -1501,9 +1520,12 @@ def test_Mul_is_irrational():\n     expr = Mul(1, 2, 3, evaluate=False)\n     assert expr.is_irrational is False\n     expr = Mul(1, I, I, evaluate=False)\n-    assert expr.is_rational is True # I * I = -1\n+    assert expr.is_rational is None # I * I = -1 but *no evaluation allowed*\n+    # sqrt(2) * I * I = -sqrt(2) is irrational but\n+    # this can't be determined without evaluating the\n+    # expression and the eval_is routines shouldn't do that\n     expr = Mul(sqrt(2), I, I, evaluate=False)\n-    assert expr.is_irrational is not True\n+    assert expr.is_irrational is None\n \n \n def test_issue_3531():\n",
  "problem_statement": "test('sympy/integrals/tests/test_integrals.py') fails on master ?\ntest('sympy/integrals/tests/test_integrals.py') seems to fail on master.\r\nI'm running Python3.5, sympy-dev, MacOS 10.15.3\n",
  "hints_text": "Which test fails? Can you show the output?\nI get this:\r\n```julia\r\nIn [3]: test('sympy/integrals/tests/test_integrals.py')                                                                           \r\n====================================================== test process starts =======================================================\r\nexecutable:         /Users/enojb/current/sympy/38venv/bin/python3  (3.8.1-final-0) [CPython]\r\narchitecture:       64-bit\r\ncache:              yes\r\nground types:       gmpy 2.0.8\r\nnumpy:              1.18.1\r\nrandom seed:        60973393\r\nhash randomization: on (PYTHONHASHSEED=1425060088)\r\n\r\nsympy/integrals/tests/test_integrals.py[170] .........................................w...........................................\r\n.w.................................ww..w.................w...........................                                         [OK]\r\n\r\n_________________________________________________________ slowest tests __________________________________________________________\r\ntest_issue_14709b - Took 15.659 seconds\r\ntest_issue_15494 - Took 158.030 seconds\r\ntest_heurisch_option - Took 1853.602 seconds\r\ntest_issue_15292 - Took 1904.802 seconds\r\n==================================== tests finished: 164 passed, 6 skipped, in 387.00 seconds ====================================\r\nOut[3]: True\r\n```\n> Which test fails? Can you show the output?\r\n\r\nIt originally failed on the travis in my PR, without any obvious correlation. I tried it out on master and it failed.\r\nhttps://travis-ci.org/github/sympy/sympy/jobs/678494834\r\nI got a MaxRecursionDepthExceeded error locally\r\nlemme check now.\r\n```python3\r\n(sympy-dev-py35) mosespaul@eiphohch0aYa sympy2 % git checkout master\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'upstream/master'.\r\n(sympy-dev-py35) mosespaul@eiphohch0aYa sympy2 % \r\n(sympy-dev-py35) mosespaul@eiphohch0aYa sympy2 % python             \r\nPython 3.5.5 | packaged by conda-forge | (default, Jul 23 2018, 23:45:11) \r\n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from sympy import *\r\n>>> test('sympy/integrals/tests/test_integrals.py')\r\n============================================== test process starts ==============================================\r\nexecutable:         /Users/mosespaul/opt/anaconda3/envs/sympy-dev-py35/bin/python  (3.5.5-final-0) [CPython]\r\narchitecture:       64-bit\r\ncache:              yes\r\nground types:       python \r\nnumpy:              1.18.2\r\nrandom seed:        26459015\r\nhash randomization: on (PYTHONHASHSEED=3435787296)\r\n\r\nsympy/integrals/tests/test_integrals.py[170] .........................................w..........................\r\n..................w.................................ww..w.................w...............EEEEEEE..EE.     [FAIL]\r\n\r\n_________________________________________________ slowest tests _________________________________________________\r\ntest_issue_4326 - Took 10.348 seconds\r\ntest_principal_value - Took 14.216 seconds\r\ntest_issue_14709b - Took 24.464 seconds\r\ntest_heurisch_option - Took 26.285 seconds\r\n_________________________________________________________________________________________________________________\r\n___________________________ sympy/integrals/tests/test_integrals.py:test_issue_14709b ___________________________\r\nTraceback (most recent call last):\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 454, in getit\r\n    return self._assumptions[fact]\r\nKeyError: 'zero'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n```\r\n\nIdk how the travis test passes now tho ðŸ˜… !\nThe particular test passes fine for me:\r\n```\r\n$ bin/test sympy/integrals/tests/test_integrals.py -k test_issue_14709b\r\n====================================================== test process starts =======================================================\r\nexecutable:         /Users/enojb/current/sympy/38venv/bin/python  (3.8.1-final-0) [CPython]\r\narchitecture:       64-bit\r\ncache:              yes\r\nground types:       gmpy 2.0.8\r\nnumpy:              1.18.1\r\nrandom seed:        54449122\r\nhash randomization: on (PYTHONHASHSEED=1089598020)\r\n\r\nsympy/integrals/tests/test_integrals.py[1] .                                                                                  [OK]\r\n\r\n_________________________________________________________ slowest tests __________________________________________________________\r\ntest_issue_14709b - Took 17.960 seconds\r\n=========================================== tests finished: 1 passed, in 18.62 seconds ===========================================\r\n```\r\nUnfortunately you haven't included the interesting part of the traceback.\nIt's pretty long ... a Max Recursion Error\r\nhere's the gist https://gist.github.com/iammosespaulr/8acb42e9c79a126d582d66ef6c595635\nand it miraculously works now ðŸ¤£ \r\n```python3\r\nsympy/integrals/tests/test_integrals.py[1] .                                                                 [OK]\r\n\r\n_________________________________________________ slowest tests _________________________________________________\r\ntest_issue_14709b - Took 25.064 seconds\r\n================================== tests finished: 1 passed, in 25.85 seconds ===================================\r\n```\r\nI'm so confused\nDoes it still work if you run all the tests the same way you did before?\r\n\r\nThe interesting part of the traceback is this:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/tests/test_integrals.py\", line 1619, in test_issue_14709b\r\n    i = integrate(x*acos(1 - 2*x/h), (x, 0, h))\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/integrals.py\", line 1553, in integrate\r\n    return integral.doit(**doit_flags)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/integrals.py\", line 490, in doit\r\n    did = self.xreplace(reps).doit(**hints)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/integrals.py\", line 602, in doit\r\n    function, xab[0], **eval_kwargs)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/integrals.py\", line 1100, in _eval_integral\r\n    for arg in result.args\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/integrals.py\", line 1100, in <listcomp>\r\n    for arg in result.args\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/operations.py\", line 378, in doit\r\n    terms = [term.doit(**hints) for term in self.args]\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/operations.py\", line 378, in <listcomp>\r\n    terms = [term.doit(**hints) for term in self.args]\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/integrals.py\", line 602, in doit\r\n    function, xab[0], **eval_kwargs)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/integrals.py\", line 1077, in _eval_integral\r\n    h = meijerint_indefinite(g, x)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/meijerint.py\", line 1622, in meijerint_indefinite\r\n    res = _meijerint_indefinite_1(f.subs(x, x + a), x)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/integrals/meijerint.py\", line 1688, in _meijerint_indefinite_1\r\n    r = hyperexpand(r.subs(t, a*x**b), place=place)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/hyperexpand.py\", line 2491, in hyperexpand\r\n    return f.replace(hyper, do_replace).replace(meijerg, do_meijer)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/basic.py\", line 1494, in replace\r\n    rv = bottom_up(self, rec_replace, atoms=True)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/simplify.py\", line 1152, in bottom_up\r\n    rv = F(rv)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/basic.py\", line 1475, in rec_replace\r\n    new = _value(expr, result)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/basic.py\", line 1423, in <lambda>\r\n    _value = lambda expr, result: value(*expr.args)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/hyperexpand.py\", line 2488, in do_meijer\r\n    allow_hyper, rewrite=rewrite, place=place)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/hyperexpand.py\", line 2373, in _meijergexpand\r\n    t, 1/z0)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/hyperexpand.py\", line 2346, in do_slater\r\n    t, premult, au, rewrite=None)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/hyperexpand.py\", line 2056, in _hyperexpand\r\n    r = carryout_plan(formula, ops) + p\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/hyperexpand.py\", line 1977, in carryout_plan\r\n    make_derivative_operator(f.M.subs(f.z, z0), z0))\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/hyperexpand.py\", line 1507, in apply_operators\r\n    res = o.apply(res, op)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/hyperexpand.py\", line 986, in apply\r\n    diffs.append(op(diffs[-1]))\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/simplify/hyperexpand.py\", line 1494, in doit\r\n    r = z*C.diff(z) + C*M\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 127, in binary_op_wrapper\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/matrices/common.py\", line 2387, in __mul__\r\n    return self.multiply(other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/matrices/common.py\", line 2412, in multiply\r\n    m = self._eval_matrix_mul(other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/matrices/dense.py\", line 159, in _eval_matrix_mul\r\n    vec = [mat[a]*other_mat[b] for a, b in zip(row_indices, col_indices)]\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/matrices/dense.py\", line 159, in <listcomp>\r\n    vec = [mat[a]*other_mat[b] for a, b in zip(row_indices, col_indices)]\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 251, in _func\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 127, in binary_op_wrapper\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/expr.py\", line 198, in __mul__\r\n    return Mul(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/operations.py\", line 52, in __new__\r\n    c_part, nc_part, order_symbols = cls.flatten(args)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/mul.py\", line 603, in flatten\r\n    if any(c.is_finite == False for c in c_part):\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/mul.py\", line 603, in <genexpr>\r\n    if any(c.is_finite == False for c in c_part):\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 458, in getit\r\n    return _ask(fact, self)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 513, in _ask\r\n    _ask(pk, obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 513, in _ask\r\n    _ask(pk, obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 513, in _ask\r\n    _ask(pk, obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 513, in _ask\r\n    _ask(pk, obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 501, in _ask\r\n    a = evaluate(obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/add.py\", line 615, in _eval_is_odd\r\n    l = [f for f in self.args if not (f.is_even is True)]\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/add.py\", line 615, in <listcomp>\r\n    l = [f for f in self.args if not (f.is_even is True)]\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 458, in getit\r\n    return _ask(fact, self)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 501, in _ask\r\n    a = evaluate(obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/mul.py\", line 1466, in _eval_is_even\r\n    is_integer = self.is_integer\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 458, in getit\r\n    return _ask(fact, self)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 501, in _ask\r\n    a = evaluate(obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/mul.py\", line 1259, in _eval_is_integer\r\n    _self = n/d\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 251, in _func\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 127, in binary_op_wrapper\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/expr.py\", line 235, in __div__\r\n    return Mul(self, Pow(other, S.NegativeOne))\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/power.py\", line 317, in __new__\r\n    obj = b._eval_power(e)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/mul.py\", line 639, in _eval_power\r\n    Pow(Mul._from_args(nc), e, evaluate=False)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 251, in _func\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 127, in binary_op_wrapper\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/expr.py\", line 198, in __mul__\r\n    return Mul(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/operations.py\", line 52, in __new__\r\n    c_part, nc_part, order_symbols = cls.flatten(args)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/mul.py\", line 197, in flatten\r\n    if not a.is_zero and a.is_Rational:\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 458, in getit\r\n    return _ask(fact, self)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 513, in _ask\r\n    _ask(pk, obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 513, in _ask\r\n    _ask(pk, obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 513, in _ask\r\n    _ask(pk, obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 513, in _ask\r\n    _ask(pk, obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 513, in _ask\r\n    _ask(pk, obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 501, in _ask\r\n    a = evaluate(obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/mul.py\", line 1466, in _eval_is_even\r\n    is_integer = self.is_integer\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 458, in getit\r\n    return _ask(fact, self)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/assumptions.py\", line 501, in _ask\r\n    a = evaluate(obj)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/mul.py\", line 1259, in _eval_is_integer\r\n    _self = n/d\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 89, in __sympifyit_wrapper\r\n    return func(a, b)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/numbers.py\", line 1766, in __div__\r\n    return Number.__div__(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 89, in __sympifyit_wrapper\r\n    return func(a, b)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/numbers.py\", line 765, in __div__\r\n    return AtomicExpr.__div__(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 251, in _func\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 127, in binary_op_wrapper\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/expr.py\", line 235, in __div__\r\n    return Mul(self, Pow(other, S.NegativeOne))\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/cache.py\", line 94, in wrapper\r\n    retval = cfunc(*args, **kwargs)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/power.py\", line 317, in __new__\r\n    obj = b._eval_power(e)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/mul.py\", line 639, in _eval_power\r\n    Pow(Mul._from_args(nc), e, evaluate=False)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 251, in _func\r\n    return func(self, other)\r\n  File \"/Users/mosespaul/Desktop/Coding/GSoC/sympy2/sympy/core/decorators.py\", line 127, in binary_op_wrapper\r\n```\n> Does it still work if you run all the tests the same way you did before?\r\n\r\nNo it doesn't, only individually\nI can reproduce this with Python 3.5 (not 3.8).\nRunning under pytest I see a bunch of failures and the the interpreter crashes:\r\n```\r\n$ pytest sympy/integrals/tests/test_integrals.py\r\n====================================================== test session starts =======================================================\r\nplatform darwin -- Python 3.5.7, pytest-4.3.1, py-1.8.0, pluggy-0.9.0\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/Users/enojb/current/sympy/sympy/.hypothesis/examples')\r\narchitecture: 64-bit\r\ncache:        yes\r\nground types: gmpy 2.0.8\r\n\r\nrootdir: /Users/enojb/current/sympy/sympy, inifile: pytest.ini\r\nplugins: xdist-1.27.0, instafail-0.4.1, forked-1.0.2, doctestplus-0.3.0, cov-2.7.1, hypothesis-4.32.3\r\ncollected 170 items                                                                                                              \r\n\r\nsympy/integrals/tests/test_integrals.py .................................................................................. [ 48%]\r\n.......................................F.FFF..FFF.F...FF.FFFAbort trap: 6\r\n```\nTruly strange, any idea how the CI test seems to pass ?\nIt seems to depend on running the tests in a particular order like `test_x` fails if run after `test_y` but not otherwise. It's possible that travis doesn't run both tests in the same split or that it ends up doing them in a different order. The fact that this happens on Python 3.5 also hints at the possibility that dict ordering is involved since 3.5 has non-deterministic dict ordering.\nBisected to e092acd6d9ab083479a96ce1be7d0de89c7e6367 from #19155 @smichr \nI'd guess that this leads to infinite recursion:\r\nhttps://github.com/sympy/sympy/blob/8c94b6428b4d5783077cea1afe9fcbad2be3ec91/sympy/core/mul.py#L1260-L1261\r\nProbably `A.is_integer` leads to `B.is_integer` which leads back to `A.is_integer`.\r\n\r\nWe need to identify the object that is `self` at that line in the infinite recursion.\n@oscarbenjamin Now I remember!\r\n@smichr and I worked on that together, we were getting infinite recursions earlier in the tests, thought we fixed those.\r\nIIRC it was with retrieving the assumptions for something. possibly `rational` or `integer`\nActually this is the line that leads infinite recursion:\r\nhttps://github.com/sympy/sympy/blob/8c94b6428b4d5783077cea1afe9fcbad2be3ec91/sympy/core/mul.py#L1259\r\nThis is why we should avoid evaluating new objects during an assumptions query. It's very hard to know what other assumptions query that evaluation can lead to.\nThis is what I get from the debugger:\r\n```\r\n(Pdb) p self\r\n1/(5*_t**3)\r\n(Pdb) p n\r\n1\r\n(Pdb) p d\r\n5*_t**3\r\n(Pdb) p n/d\r\n*** RecursionError: maximum recursion depth exceeded while calling a Python object\r\n```\r\nThere are no assumptions on `_t` (except `commutative=True`). I can't reproduce that outside though so it somehow depends on what has happened in the previous tests that have run.\r\n\r\nMy guess is that this is an interaction between the assumptions system and the cache.\nis there like a shortcut to search through the thread on a PR @oscarbenjamin . There are a couple comments related to this on PR #18960 .They might help but I can't seem to find em, lots of comments.\nThis line is also involved:\r\nhttps://github.com/sympy/sympy/blob/8c94b6428b4d5783077cea1afe9fcbad2be3ec91/sympy/core/mul.py#L1442\r\n\r\nThere are two basic principles broken here:\r\n1. Assumptions queries should not evaluate new objects\r\n2. An assumption query for `self.is_x` should not directly use `self.is_y` (only properties of args should be queried in this way).\nSo like, \r\n```python3\r\n>>> srepr(n/d)\r\n\"Mul(Symbol('n'), Pow(Symbol('d'), Integer(-1)))\"\r\n```\r\nwhich is again `Mul`\r\nso `(n/d).is_integer` calls `Mul.is_integer` again and so on right ?\nWhen we get to here in `Mul._eval_is_integer`\r\nhttps://github.com/sympy/sympy/blob/8c94b6428b4d5783077cea1afe9fcbad2be3ec91/sympy/core/mul.py#L1257-L1259\r\nself is `1/(35*_t**2)` which is `Mul(Rational(1, 35), Pow(_t, -2))` so `n` becomes `1` and `d` becomes `35*_t**2`. Dividing those leads to\r\nhttps://github.com/sympy/sympy/blob/8c94b6428b4d5783077cea1afe9fcbad2be3ec91/sympy/core/expr.py#L234-L235\r\nat which points `self` is `1` and `other` is `35*_t**2`. Evaluating the Pow leads to\r\nhttps://github.com/sympy/sympy/blob/8c94b6428b4d5783077cea1afe9fcbad2be3ec91/sympy/core/power.py#L317\r\nat which point `b` is `35*_t**2` and `e` is `-1`. The leads through to `Mul._eval_power` here\r\nhttps://github.com/sympy/sympy/blob/8c94b6428b4d5783077cea1afe9fcbad2be3ec91/sympy/core/mul.py#L637-L639\r\nIn this product the first term is `1/(35*_t**2)` (the expression we started with) and the other is `Pow(1, -1, evaluate=False)` i.e. `1/1`. Multiplying them leads to a `Mul` which leads to `Mul.flatten` and this line:\r\nhttps://github.com/sympy/sympy/blob/8c94b6428b4d5783077cea1afe9fcbad2be3ec91/sympy/core/mul.py#L197\r\nAt this point `a` is `1/(35*t**2)` which is the same expression we start with and we query `a.is_zero`. Since `a._eval_is_zero()` gives None the assumptions resolver tries other facts to make the determination which ultimately leads to `_eval_Is_integer` completing the recursion.\n@oscarbenjamin I might've found a fix\r\n```python3\r\nsympy/integrals/tests/test_integrals.py[170] .........................................w.............................\r\n...............w.................................ww..w.................w...........................             [OK]\r\n\r\n__________________________________________________ slowest tests ___________________________________________________\r\ntest_issue_8614 - Took 10.107 seconds\r\ntest_issue_4326 - Took 10.391 seconds\r\ntest_issue_17671 - Took 17.036 seconds\r\ntest_issue_14709b - Took 26.858 seconds\r\ntest_principal_value - Took 26.942 seconds\r\ntest_heurisch_option - Took 26.991 seconds\r\ntest_issue_15494 - Took 343.391 seconds\r\n============================= tests finished: 164 passed, 6 skipped, in 697.33 seconds =============================\r\nTrue\r\n>>> Mul(pi, 1/E, 2*E, 3/pi, evaluate=False).is_integer\r\nTrue\r\n```\r\nthe simplification works too!\nDoes the fix remove the `n/d`?\nSomething like this ...\r\n```python3\r\n        is_rational = self._eval_is_rational()\r\n        if is_rational is False:\r\n            return False\r\n\r\n        n, d = fraction(self)\r\n        if is_rational:\r\n            if d is S.One:\r\n                return True\r\n            elif d == S(2):\r\n                return n.is_even\r\n        # if d is even -- 0 or not -- the\r\n        # result is not an integer\r\n        if n.is_odd and d.is_even:\r\n            return False\r\n        if not is_rational:\r\n            if n.has(d):\r\n                _self = Mul(n, Pow(d, -1))\r\n                if _self != self:\r\n                    return _self.is_integer\r\n```\n> Does the fix remove the `n/d`?\r\n\r\nkinda ? like it only does the n/d if it's worth it ?\nI think that evaluating `n/d` is flakey and will lead to other problems. It's basically recreating `self` and then calling `is_integer` on it again which is asking for infinite recursion.\n> I think that evaluating `n/d` is flakey and will lead to other problems. It's basically recreating `self` and then calling `is_integer` on it again which is asking for infinite recursion.\r\n\r\nAhhhh, in that case, How you do suggest approaching this ?\nThis was discussed here https://github.com/sympy/sympy/pull/19130#discussion_r410687628\r\n\r\nThe assumptions code (e.g. `_eval_is_integer`) should avoid creating *any* new objects. In exceptional cases where objects are created it should only be \"smaller\" objects.\nWhat is the reason for using `n/d` in the first place?\n> What is the reason for using `n/d` in the first place?\r\n\r\nchecking is_integer for expr like these, without evaluating\r\n```python3\r\nMul(pi**2, 1/(E*pi), 2*E, 3/pi, evaluate=False)\r\n```\r\nOriginally we had other reasons, I can't seem to remember ðŸ˜….\r\n\n> without evaluating\r\n\r\nUsing `n, d = fraction(self); _self = n/d` *is* evaluating the expression.\r\n\r\nSometimes it isn't possible to resolve a query like `is_integer` without evaluating but that just means it should remain unresolved until the user chooses to evaluate. If the user wants to evaluate then they shouldn't use `evaluate=False`.\nOkay I found the reason we upgraded `Mul.is_integer`\r\nhttps://github.com/sympy/sympy/pull/18960#issuecomment-608410521\r\nwe had a stress testing script for the new multinomial function with this line\r\n```python3\r\nassert multinomial(*t).is_integer == multinomial(*s).is_integer\r\n```\r\nwhere `*t` were the original values and `*s` were dummies built using the assumptions of `*t` and we tested em.\r\n\r\nthere were a lot of places where Mul.is_integer wouldn't evaluate to True, even in a lot of obvious cases. hence the upgrade\n> there were a lot of places where Mul.is_integer wouldn't evaluate to True, even in a lot of obvious cases. hence the upgrade\r\n\r\nIt is expected that `is_integer` will not always resolve.\r\n\r\nI tried the following diff from master:\r\n```diff\r\ndiff --git a/sympy/core/mul.py b/sympy/core/mul.py\r\nindex 0bbd2fb67a..31fd0890d6 100644\r\n--- a/sympy/core/mul.py\r\n+++ b/sympy/core/mul.py\r\n@@ -1256,9 +1256,7 @@ def _eval_is_integer(self):\r\n \r\n         n, d = fraction(self)\r\n         if not is_rational:\r\n-            _self = n/d\r\n-            if _self != self:\r\n-                return _self.is_integer\r\n+            pass\r\n         if is_rational:\r\n             if d is S.One:\r\n                 return True\r\n```\r\nRunning all of the core tests the only failure I got was\r\n```\r\n    def test_Mul_is_irrational():\r\n        expr = Mul(1, 2, 3, evaluate=False)\r\n        assert expr.is_irrational is False\r\n        expr = Mul(1, I, I, evaluate=False)\r\n>       assert expr.is_rational is True # I * I = -1\r\nE       assert None is True\r\nE        +  where None = I*I.is_rational\r\n```\r\nThat particular test was changed in the commit e092acd leading to this issue.\r\n\r\nDoes anything else in the code depend on this?\n> It is expected that `is_integer` will not always resolve.\r\n\r\nThis is the earlier version of the code we changed in `test_arit.py` @ https://github.com/sympy/sympy/commit/e092acd6d9ab083479a96ce1be7d0de89c7e6367\r\n\r\n```python3\r\n     expr = Mul(1, I, I, evaluate=False) \r\n     assert expr.is_irrational is not False \r\n```\r\nThis was Wrong. `-1 is def not irrational`\r\n\r\n---\r\n\r\nbtw I the patch I pushed also failed that same test",
  "created_at": "2020-04-23T23:10:17Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_bug1\", \"test_Symbol\", \"test_arit0\", \"test_div\", \"test_pow\", \"test_pow2\", \"test_mod_pow\", \"test_pow_E\", \"test_pow_im\", \"test_ncpow\", \"test_powerbug\", \"test_Mul_doesnt_expand_exp\", \"test_Mul_is_integer\", \"test_Add_Mul_is_integer\", \"test_Add_Mul_is_finite\", \"test_Mul_is_rational\", \"test_Add_is_rational\", \"test_Mul_is_negative_positive\", \"test_Mul_is_negative_positive_2\", \"test_Mul_is_nonpositive_nonnegative\", \"test_Add_is_negative_positive\", \"test_Add_is_nonpositive_nonnegative\", \"test_Pow_is_integer\", \"test_Pow_is_real\", \"test_real_Pow\", \"test_Pow_is_finite\", \"test_Pow_is_even_odd\", \"test_Pow_is_zero\", \"test_Pow_is_nonpositive_nonnegative\", \"test_Mul_is_imaginary_real\", \"test_Mul_hermitian_antihermitian\", \"test_Add_is_comparable\", \"test_Mul_is_comparable\", \"test_Pow_is_comparable\", \"test_Mul_is_irrational\", \"test_AssocOp_doit\", \"test_Pow_as_coeff_mul_doesnt_expand\", \"test_make_args\", \"test_Add_as_content_primitive\", \"test_Mul_as_content_primitive\", \"test_issue_5919\", \"test_Mod\", \"test_Mod_is_integer\", \"test_polar\", \"test_issue_6082\", \"test_issue_6077\", \"test_issue_5160_6087_6089_6090\", \"test_float_int_round\", \"test_mul_coeff\", \"test_mul_zero_detection\", \"test_Mul_with_zero_infinite\", \"test_Mul_does_not_cancel_infinities\", \"test_Mul_does_not_distribute_infinity\", \"test_issue_8247_8354\", \"test_Add_is_zero\", \"test_divmod\", \"test__neg__\"]",
  "PASS_TO_PASS": "[\"test_pow3\", \"test_pow_issue_3516\", \"test_real_mul\", \"test_ncmul\", \"test_Mul_is_even_odd\", \"test_evenness_in_ternary_integer_product_with_even\", \"test_oddness_in_ternary_integer_product_with_even\", \"test_Add_is_even_odd\", \"test_Pow_is_negative_positive\", \"test_Add_is_positive_2\", \"test_Add_is_irrational\", \"test_issue_3531\", \"test_issue_3531b\", \"test_bug3\", \"test_suppressed_evaluation\", \"test_Add_as_coeff_mul\", \"test_issue_3514_18626\", \"test_issue_5126\", \"test_Rational_as_content_primitive\", \"test_Pow_as_content_primitive\", \"test_issue_5460\", \"test_product_irrational\", \"test_Mod_Pow\", \"test_Mod_is_nonposneg\", \"test_issue_6001\", \"test_issue_6040\", \"test_mul_flatten_oo\", \"test_add_flatten\", \"test_issue_6611a\", \"test_denest_add_mul\", \"test_issue_14392\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.132524",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}