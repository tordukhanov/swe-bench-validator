{
  "repo": "django/django",
  "instance_id": "django__django-12591",
  "base_commit": "75410228dfd16e49eb3c0ea30b59b4c0d2ea6b03",
  "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -858,15 +858,20 @@ def action_checkbox(self, obj):\n     def _get_base_actions(self):\n         \"\"\"Return the list of actions, prior to any request-based filtering.\"\"\"\n         actions = []\n+        base_actions = (self.get_action(action) for action in self.actions or [])\n+        # get_action might have returned None, so filter any of those out.\n+        base_actions = [action for action in base_actions if action]\n+        base_action_names = {name for _, name, _ in base_actions}\n \n         # Gather actions from the admin site first\n         for (name, func) in self.admin_site.actions:\n+            if name in base_action_names:\n+                continue\n             description = getattr(func, 'short_description', name.replace('_', ' '))\n             actions.append((func, name, description))\n         # Add actions from this ModelAdmin.\n-        actions.extend(self.get_action(action) for action in self.actions or [])\n-        # get_action might have returned None, so filter any of those out.\n-        return filter(None, actions)\n+        actions.extend(base_actions)\n+        return actions\n \n     def _filter_actions_by_permissions(self, request, actions):\n         \"\"\"Filter out any actions that the user doesn't have access to.\"\"\"\n",
  "test_patch": "diff --git a/tests/modeladmin/test_actions.py b/tests/modeladmin/test_actions.py\n--- a/tests/modeladmin/test_actions.py\n+++ b/tests/modeladmin/test_actions.py\n@@ -76,3 +76,42 @@ class AdminB(AdminBase):\n         ma2 = AdminB(Band, admin.AdminSite())\n         action_names = [name for _, name, _ in ma2._get_base_actions()]\n         self.assertEqual(action_names, ['delete_selected'])\n+\n+    def test_actions_replace_global_action(self):\n+        def global_action_1(modeladmin, request, queryset):\n+            pass\n+\n+        def global_action_2(modeladmin, request, queryset):\n+            pass\n+\n+        global_action_1.short_description = 'Site-wide admin action 1.'\n+        global_action_2.short_description = 'Site-wide admin action 2.'\n+        admin.site.add_action(global_action_1, name='custom_action_1')\n+        admin.site.add_action(global_action_2, name='custom_action_2')\n+\n+        def custom_action_1(modeladmin, request, queryset):\n+            pass\n+\n+        custom_action_1.short_description = 'Local admin action 1.'\n+\n+        class BandAdmin(admin.ModelAdmin):\n+            actions = [custom_action_1, 'custom_action_2']\n+\n+            def custom_action_2(self, request, queryset):\n+                pass\n+\n+            custom_action_2.short_description = 'Local admin action 2.'\n+\n+        ma = BandAdmin(Band, admin.site)\n+        self.assertEqual(ma.check(), [])\n+        self.assertEqual(\n+            [\n+                desc\n+                for _, name, desc in ma._get_base_actions()\n+                if name.startswith('custom_action')\n+            ],\n+            [\n+                'Local admin action 1.',\n+                'Local admin action 2.',\n+            ],\n+        )\n",
  "problem_statement": "Can't replace global admin actions with specialized ones per-admin\nDescription\n\t\nf9ff1df1daac8ae1fc22b27f48735148cb5488dd landed in 2.2 (discussion in #29917), which makes it impossible to replace a generic site-wide action (such as the built-in delete_selected) with a new one. It fails with the admin.E130 system check error.\nWe're seeing this with the qsessions app, which has to delete its session objects in non-bulk mode in order to clear caches: ​https://github.com/QueraTeam/django-qsessions/blob/c21d602a50c4746da7f698a8d39317ef214e7d05/qsessions/admin.py#L41-L46\n(For this particular use case, it seems a fix is to instead override modeladmin.delete_queryset within qsessions's SessionAdmin, as that's what the built-in delete_selected action does per ​https://github.com/django/django/blob/851d9eac23e08ff10a2d6fe5368b02798761663c/django/contrib/admin/actions.py#L40 .)\n",
  "hints_text": "This is ​documented as a backwards incompatible change in the 2.2 release notes. See the discussion on #29917 and ​the mailing list thread. See ​Making actions available site-wide docs for the suggested approach.\nThanks! I did read the release notes, but the section linked has no mention of global admin actions and it doesn't exactly apply, see below. (Reopening for that reason.) This issue only arises when a global action, say expect_inquisition (or the built-in default delete_selected) has been defined, which is implicitly on every single ModelAdmin that global action is still enabled and you attempt to explicitly add an action with the same __name__ on any given ModelAdmin class\nRight, OK, gotcha. Multiple defined actions with the same name are not supported. The system check added in #29711 led directly to uncovering #29917, which had been latent for many years. As per the discussion on #29917, and the mailing list thread (that I linked above), the decision was taken to adjust this behaviour. You need to adjust your code to use site wide actions, or as an alternative you can use subclassing, but now according to Python's normal inheritance rules. This was an example from the discussion: class WithCustom(AdminBase): actions = AdminBase.actions + ['custom_action'] You're free to adjust actions any way you need (at class definition, in __init__(), in _get_base_actions(), in get_actions()...) See the ​Disabling actions section of the docs. There are plenty of strategies there.\nReopening based on mailing list discussion ​https://groups.google.com/d/topic/django-developers/jDz-0wfowqg/discussion Patch should at least consider whether we'll handle just delete_selected or any action (expect_inquisition say). (Original triage should have been wontfix rather than invalid looking again.)\nHi! May I work on this? I'm kind of new and want to contribute to this community. I've read the discussion mentioned (​https://groups.google.com/d/topic/django-developers/jDz-0wfowqg/discussion) and I think I can implement the solution. Will update as soon as I finish implementing the tests and patches Cheers",
  "created_at": "2020-03-20T07:59:43Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_actions_replace_global_action (modeladmin.test_actions.AdminActionsTests)\"]",
  "PASS_TO_PASS": "[\"test_actions_inheritance (modeladmin.test_actions.AdminActionsTests)\", \"test_get_actions_respects_permissions (modeladmin.test_actions.AdminActionsTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.631411",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}