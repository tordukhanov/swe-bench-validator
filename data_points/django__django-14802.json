{
  "repo": "django/django",
  "instance_id": "django__django-14802",
  "base_commit": "3921b1c6d24c9d5a60e5f5f83c9a394104089c21",
  "patch": "diff --git a/django/core/cache/backends/base.py b/django/core/cache/backends/base.py\n--- a/django/core/cache/backends/base.py\n+++ b/django/core/cache/backends/base.py\n@@ -105,6 +105,21 @@ def make_key(self, key, version=None):\n \n         return self.key_func(key, self.key_prefix, version)\n \n+    def validate_key(self, key):\n+        \"\"\"\n+        Warn about keys that would not be portable to the memcached\n+        backend. This encourages (but does not force) writing backend-portable\n+        cache code.\n+        \"\"\"\n+        for warning in memcache_key_warnings(key):\n+            warnings.warn(warning, CacheKeyWarning)\n+\n+    def make_and_validate_key(self, key, version=None):\n+        \"\"\"Helper to make and validate keys.\"\"\"\n+        key = self.make_key(key, version=version)\n+        self.validate_key(key)\n+        return key\n+\n     def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n         \"\"\"\n         Set a value in the cache if the key does not already exist. If\n@@ -240,15 +255,6 @@ def clear(self):\n         \"\"\"Remove *all* values from the cache at once.\"\"\"\n         raise NotImplementedError('subclasses of BaseCache must provide a clear() method')\n \n-    def validate_key(self, key):\n-        \"\"\"\n-        Warn about keys that would not be portable to the memcached\n-        backend. This encourages (but does not force) writing backend-portable\n-        cache code.\n-        \"\"\"\n-        for warning in memcache_key_warnings(key):\n-            warnings.warn(warning, CacheKeyWarning)\n-\n     def incr_version(self, key, delta=1, version=None):\n         \"\"\"\n         Add delta to the cache version for the supplied key. Return the new\ndiff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -54,10 +54,7 @@ def get_many(self, keys, version=None):\n         if not keys:\n             return {}\n \n-        key_map = {}\n-        for key in keys:\n-            self.validate_key(key)\n-            key_map[self.make_key(key, version)] = key\n+        key_map = {self.make_and_validate_key(key, version=version): key for key in keys}\n \n         db = router.db_for_read(self.cache_model_class)\n         connection = connections[db]\n@@ -95,18 +92,15 @@ def get_many(self, keys, version=None):\n         return result\n \n     def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         self._base_set('set', key, value, timeout)\n \n     def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         return self._base_set('add', key, value, timeout)\n \n     def touch(self, key, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         return self._base_set('touch', key, None, timeout)\n \n     def _base_set(self, mode, key, value, timeout=DEFAULT_TIMEOUT):\n@@ -196,15 +190,12 @@ def _base_set(self, mode, key, value, timeout=DEFAULT_TIMEOUT):\n                 return True\n \n     def delete(self, key, version=None):\n-        self.validate_key(key)\n-        return self._base_delete_many([self.make_key(key, version)])\n+        key = self.make_and_validate_key(key, version=version)\n+        return self._base_delete_many([key])\n \n     def delete_many(self, keys, version=None):\n-        key_list = []\n-        for key in keys:\n-            self.validate_key(key)\n-            key_list.append(self.make_key(key, version))\n-        self._base_delete_many(key_list)\n+        keys = [self.make_and_validate_key(key, version=version) for key in keys]\n+        self._base_delete_many(keys)\n \n     def _base_delete_many(self, keys):\n         if not keys:\n@@ -227,8 +218,7 @@ def _base_delete_many(self, keys):\n             return bool(cursor.rowcount)\n \n     def has_key(self, key, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n \n         db = router.db_for_read(self.cache_model_class)\n         connection = connections[db]\ndiff --git a/django/core/cache/backends/dummy.py b/django/core/cache/backends/dummy.py\n--- a/django/core/cache/backends/dummy.py\n+++ b/django/core/cache/backends/dummy.py\n@@ -8,32 +8,26 @@ def __init__(self, host, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n \n     def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        self.make_and_validate_key(key, version=version)\n         return True\n \n     def get(self, key, default=None, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        self.make_and_validate_key(key, version=version)\n         return default\n \n     def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        self.make_and_validate_key(key, version=version)\n \n     def touch(self, key, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        self.make_and_validate_key(key, version=version)\n         return False\n \n     def delete(self, key, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        self.make_and_validate_key(key, version=version)\n         return False\n \n     def has_key(self, key, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        self.make_and_validate_key(key, version=version)\n         return False\n \n     def clear(self):\ndiff --git a/django/core/cache/backends/filebased.py b/django/core/cache/backends/filebased.py\n--- a/django/core/cache/backends/filebased.py\n+++ b/django/core/cache/backends/filebased.py\n@@ -127,8 +127,7 @@ def _key_to_file(self, key, version=None):\n         Convert a key into a cache file path. Basically this is the\n         root cache path joined with the md5sum of the key and a suffix.\n         \"\"\"\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         return os.path.join(self._dir, ''.join(\n             [hashlib.md5(key.encode()).hexdigest(), self.cache_suffix]))\n \ndiff --git a/django/core/cache/backends/locmem.py b/django/core/cache/backends/locmem.py\n--- a/django/core/cache/backends/locmem.py\n+++ b/django/core/cache/backends/locmem.py\n@@ -23,8 +23,7 @@ def __init__(self, name, params):\n         self._lock = _locks.setdefault(name, Lock())\n \n     def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         pickled = pickle.dumps(value, self.pickle_protocol)\n         with self._lock:\n             if self._has_expired(key):\n@@ -33,8 +32,7 @@ def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n             return False\n \n     def get(self, key, default=None, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         with self._lock:\n             if self._has_expired(key):\n                 self._delete(key)\n@@ -51,15 +49,13 @@ def _set(self, key, value, timeout=DEFAULT_TIMEOUT):\n         self._expire_info[key] = self.get_backend_timeout(timeout)\n \n     def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         pickled = pickle.dumps(value, self.pickle_protocol)\n         with self._lock:\n             self._set(key, pickled, timeout)\n \n     def touch(self, key, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         with self._lock:\n             if self._has_expired(key):\n                 return False\n@@ -67,8 +63,7 @@ def touch(self, key, timeout=DEFAULT_TIMEOUT, version=None):\n             return True\n \n     def incr(self, key, delta=1, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         with self._lock:\n             if self._has_expired(key):\n                 self._delete(key)\n@@ -82,8 +77,7 @@ def incr(self, key, delta=1, version=None):\n         return new_value\n \n     def has_key(self, key, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         with self._lock:\n             if self._has_expired(key):\n                 self._delete(key)\n@@ -113,8 +107,7 @@ def _delete(self, key):\n         return True\n \n     def delete(self, key, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         with self._lock:\n             return self._delete(key)\n \ndiff --git a/django/core/cache/backends/memcached.py b/django/core/cache/backends/memcached.py\n--- a/django/core/cache/backends/memcached.py\n+++ b/django/core/cache/backends/memcached.py\n@@ -67,36 +67,29 @@ def get_backend_timeout(self, timeout=DEFAULT_TIMEOUT):\n         return int(timeout)\n \n     def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         return self._cache.add(key, value, self.get_backend_timeout(timeout))\n \n     def get(self, key, default=None, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         return self._cache.get(key, default)\n \n     def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         if not self._cache.set(key, value, self.get_backend_timeout(timeout)):\n             # make sure the key doesn't keep its old value in case of failure to set (memcached's 1MB limit)\n             self._cache.delete(key)\n \n     def touch(self, key, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         return bool(self._cache.touch(key, self.get_backend_timeout(timeout)))\n \n     def delete(self, key, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         return bool(self._cache.delete(key))\n \n     def get_many(self, keys, version=None):\n-        key_map = {self.make_key(key, version=version): key for key in keys}\n-        for key in key_map:\n-            self.validate_key(key)\n+        key_map = {self.make_and_validate_key(key, version=version): key for key in keys}\n         ret = self._cache.get_multi(key_map.keys())\n         return {key_map[k]: v for k, v in ret.items()}\n \n@@ -105,8 +98,7 @@ def close(self, **kwargs):\n         self._cache.disconnect_all()\n \n     def incr(self, key, delta=1, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         try:\n             # Memcached doesn't support negative delta.\n             if delta < 0:\n@@ -126,17 +118,14 @@ def set_many(self, data, timeout=DEFAULT_TIMEOUT, version=None):\n         safe_data = {}\n         original_keys = {}\n         for key, value in data.items():\n-            safe_key = self.make_key(key, version=version)\n-            self.validate_key(safe_key)\n+            safe_key = self.make_and_validate_key(key, version=version)\n             safe_data[safe_key] = value\n             original_keys[safe_key] = key\n         failed_keys = self._cache.set_multi(safe_data, self.get_backend_timeout(timeout))\n         return [original_keys[k] for k in failed_keys]\n \n     def delete_many(self, keys, version=None):\n-        keys = [self.make_key(key, version=version) for key in keys]\n-        for key in keys:\n-            self.validate_key(key)\n+        keys = [self.make_and_validate_key(key, version=version) for key in keys]\n         self._cache.delete_multi(keys)\n \n     def clear(self):\n@@ -167,8 +156,7 @@ def __init__(self, server, params):\n         self._options = {'pickleProtocol': pickle.HIGHEST_PROTOCOL, **self._options}\n \n     def get(self, key, default=None, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         val = self._cache.get(key)\n         # python-memcached doesn't support default values in get().\n         # https://github.com/linsomniac/python-memcached/issues/159\n@@ -181,8 +169,7 @@ def delete(self, key, version=None):\n         # python-memcached's delete() returns True when key doesn't exist.\n         # https://github.com/linsomniac/python-memcached/issues/170\n         # Call _deletetouch() without the NOT_FOUND in expected results.\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         return bool(self._cache._deletetouch([b'DELETED'], 'delete', key))\n \n \n@@ -200,8 +187,7 @@ def client_servers(self):\n         return output\n \n     def touch(self, key, timeout=DEFAULT_TIMEOUT, version=None):\n-        key = self.make_key(key, version=version)\n-        self.validate_key(key)\n+        key = self.make_and_validate_key(key, version=version)\n         if timeout == 0:\n             return self._cache.delete(key)\n         return self._cache.touch(key, self.get_backend_timeout(timeout))\n",
  "test_patch": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -675,7 +675,7 @@ def test_cull_delete_when_store_empty(self):\n         finally:\n             cull_cache._max_entries = old_max_entries\n \n-    def _perform_invalid_key_test(self, key, expected_warning):\n+    def _perform_invalid_key_test(self, key, expected_warning, key_func=None):\n         \"\"\"\n         All the builtin backends should warn (except memcached that should\n         error) on keys that would be refused by memcached. This encourages\n@@ -688,7 +688,7 @@ def func(key, *args):\n             return key\n \n         old_func = cache.key_func\n-        cache.key_func = func\n+        cache.key_func = key_func or func\n \n         tests = [\n             ('add', [key, 1]),\n@@ -725,6 +725,19 @@ def test_invalid_key_length(self):\n         )\n         self._perform_invalid_key_test(key, expected_warning)\n \n+    def test_invalid_with_version_key_length(self):\n+        # Custom make_key() that adds a version to the key and exceeds the\n+        # limit.\n+        def key_func(key, *args):\n+            return key + ':1'\n+\n+        key = 'a' * 249\n+        expected_warning = (\n+            'Cache key will cause errors if used with memcached: '\n+            '%r (longer than %s)' % (key_func(key), 250)\n+        )\n+        self._perform_invalid_key_test(key, expected_warning, key_func=key_func)\n+\n     def test_cache_versioning_get_set(self):\n         # set, using default version = 1\n         cache.set('answer1', 42)\n@@ -1417,6 +1430,15 @@ def _perform_invalid_key_test(self, key, expected_warning):\n                     getattr(cache, operation)(*args)\n                 self.assertEqual(str(cm.exception), msg)\n \n+    def test_invalid_with_version_key_length(self):\n+        # make_key() adds a version to the key and exceeds the limit.\n+        key = 'a' * 248\n+        expected_warning = (\n+            'Cache key will cause errors if used with memcached: '\n+            '%r (longer than %s)' % (key, 250)\n+        )\n+        self._perform_invalid_key_test(key, expected_warning)\n+\n     def test_default_never_expiring_timeout(self):\n         # Regression test for #22845\n         with self.settings(CACHES=caches_setting_for_tests(\n",
  "problem_statement": "Add a helper function to make and validate cache keys.\nDescription\n\t\nFollowing from ​this thread the following pattern is repeated a lot in the cache backends:\n\t\tkey = self.make_key(key, version=version)\n\t\tself.validate_key(key)\nWe can define a helper function on the base cache backend that can be used to avoid repetitiveness and help ensure that we consistently call .validate_key() after .make_key():\n\tdef make_and_validate_key(self, key, version=None):\n\t\tkey = self.make_key(key, version=version)\n\t\tself.validate_key(key)\n\t\treturn key\nAn alternative proposal is to have .make_key() learn a validate flag, but we'd probably need to have it as False by default for backward compatibility and we'd may still have issues if users have overridden .make_key(). So it would require documentation changes, release notes, and a deprecation period.\n",
  "hints_text": "​PR\nAdding make_and_validate_key() sounds reasonable.\nIn 68b8eda7: Refs #33060 -- Added .make_key() in .touch() for dummy cache backend. All cache operations should use make_key().",
  "created_at": "2021-08-26T13:11:26Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_invalid_with_version_key_length (cache.tests.DBCacheTests)\", \"test_invalid_with_version_key_length (cache.tests.DBCacheWithTimeZoneTests)\"]",
  "PASS_TO_PASS": "[\"test_createcachetable_observes_database_router (cache.tests.CreateCacheTableForDBCacheTests)\", \"Passing in None into timeout results in a value that is cached forever\", \"Follow memcached's convention where a timeout greater than 30 days is\", \"Nonexistent cache keys return as None/default.\", \"set_many() returns an empty list when all keys are inserted.\", \"Passing in zero into timeout results in a value that is not cached\", \"If None is cached, get() returns it instead of the default.\", \"test_long_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_proper_escaping (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_ints_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_many_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_one_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_with_unicode_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"test_without_vary_on (cache.tests.TestMakeTemplateFragmentKey)\", \"Memory caches that have the TIMEOUT parameter set to `None` in the\", \"Memory caches that have the TIMEOUT parameter set to `None` will set\", \"Caches that have the TIMEOUT parameter undefined in the default\", \"Memory caches that have the TIMEOUT parameter unset will set cache\", \"The default expiration time of a cache key is 5 minutes.\", \"test_head_caches_correctly (cache.tests.CacheHEADTest)\", \"test_head_with_cached_get (cache.tests.CacheHEADTest)\", \"test_get_cache_key (cache.tests.TestWithTemplateResponse)\", \"test_get_cache_key_with_query (cache.tests.TestWithTemplateResponse)\", \"test_patch_vary_headers (cache.tests.TestWithTemplateResponse)\", \"get_cache_key keys differ by fully-qualified URL instead of path\", \"test_get_cache_key (cache.tests.CacheUtils)\", \"test_get_cache_key_with_query (cache.tests.CacheUtils)\", \"test_learn_cache_key (cache.tests.CacheUtils)\", \"test_patch_cache_control (cache.tests.CacheUtils)\", \"test_patch_vary_headers (cache.tests.CacheUtils)\", \"test_get_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_get_cache_key_with_query (cache.tests.PrefixedCacheUtils)\", \"test_learn_cache_key (cache.tests.PrefixedCacheUtils)\", \"test_patch_cache_control (cache.tests.PrefixedCacheUtils)\", \"test_patch_vary_headers (cache.tests.PrefixedCacheUtils)\", \"test_close (cache.tests.CacheClosingTests)\", \"test_close_only_initialized (cache.tests.CacheClosingTests)\", \"test_custom_key_validation (cache.tests.CustomCacheKeyValidationTests)\", \"test_all (cache.tests.CacheHandlerTest)\", \"test_nonexistent_alias (cache.tests.CacheHandlerTest)\", \"test_nonexistent_backend (cache.tests.CacheHandlerTest)\", \"Requesting the same alias from separate threads should yield separate\", \"Attempting to retrieve the same alias should yield the same instance.\", \"test_warning (cache.tests.MemcachedCacheDeprecationTests)\", \"test_cache_key_i18n_timezone (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware (cache.tests.PrefixedCacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.PrefixedCacheI18nTest)\", \"test_cache_key_i18n_timezone (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation (cache.tests.CacheI18nTest)\", \"test_cache_key_i18n_translation_accept_language (cache.tests.CacheI18nTest)\", \"test_cache_key_no_i18n (cache.tests.CacheI18nTest)\", \"test_middleware (cache.tests.CacheI18nTest)\", \"test_middleware_doesnt_cache_streaming_response (cache.tests.CacheI18nTest)\", \"Add doesn't do anything in dummy cache backend\", \"clear does nothing for the dummy cache backend\", \"All data types are ignored equally by the dummy cache\", \"Dummy cache values can't be decremented\", \"Dummy cache versions can't be decremented\", \"Cache deletion is transparently ignored on the dummy cache backend\", \"delete_many does nothing for the dummy cache backend\", \"test_delete_many_invalid_key (cache.tests.DummyCacheTests)\", \"Expiration has no effect on the dummy cache\", \"get_many returns nothing for the dummy cache backend\", \"test_get_many_invalid_key (cache.tests.DummyCacheTests)\", \"test_get_or_set (cache.tests.DummyCacheTests)\", \"test_get_or_set_callable (cache.tests.DummyCacheTests)\", \"The has_key method doesn't ever return True for the dummy cache backend\", \"The in operator doesn't ever return True for the dummy cache backend\", \"Dummy cache values can't be incremented\", \"Dummy cache versions can't be incremented\", \"Nonexistent keys aren't found in the dummy cache backend\", \"set_many does nothing for the dummy cache backend\", \"test_set_many_invalid_key (cache.tests.DummyCacheTests)\", \"Dummy cache backend ignores cache set calls\", \"Dummy cache can't do touch().\", \"Unicode values are ignored by the dummy cache\", \"test_304_response_has_http_caching_headers_but_not_cached (cache.tests.CacheMiddlewareTest)\", \"test_cache_page_timeout (cache.tests.CacheMiddlewareTest)\", \"Responses with 'Cache-Control: private' are not cached.\", \"Ensure the constructor is correctly distinguishing between usage of CacheMiddleware as\", \"test_fetch_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)\", \"test_middleware (cache.tests.CacheMiddlewareTest)\", \"Django must prevent caching of responses that set a user-specific (and\", \"test_update_cache_middleware_constructor (cache.tests.CacheMiddlewareTest)\", \"test_view_decorator (cache.tests.CacheMiddlewareTest)\", \"test_add (cache.tests.LocMemCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_binary_string (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.LocMemCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_add (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_delete (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_has_key (cache.tests.LocMemCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.LocMemCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.LocMemCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.LocMemCacheTests)\", \"test_clear (cache.tests.LocMemCacheTests)\", \"test_close (cache.tests.LocMemCacheTests)\", \"test_cull (cache.tests.LocMemCacheTests)\", \"test_cull_delete_when_store_empty (cache.tests.LocMemCacheTests)\", \"test_custom_key_func (cache.tests.LocMemCacheTests)\", \"test_data_types (cache.tests.LocMemCacheTests)\", \"test_decr (cache.tests.LocMemCacheTests)\", \"test_decr_version (cache.tests.LocMemCacheTests)\", \"test_delete (cache.tests.LocMemCacheTests)\", \"test_delete_many (cache.tests.LocMemCacheTests)\", \"test_delete_nonexistent (cache.tests.LocMemCacheTests)\", \"test_expiration (cache.tests.LocMemCacheTests)\", \"test_float_timeout (cache.tests.LocMemCacheTests)\", \"test_get_many (cache.tests.LocMemCacheTests)\", \"test_get_or_set (cache.tests.LocMemCacheTests)\", \"test_get_or_set_callable (cache.tests.LocMemCacheTests)\", \"test_get_or_set_racing (cache.tests.LocMemCacheTests)\", \"test_get_or_set_version (cache.tests.LocMemCacheTests)\", \"test_has_key (cache.tests.LocMemCacheTests)\", \"test_in (cache.tests.LocMemCacheTests)\", \"test_incr (cache.tests.LocMemCacheTests)\", \"incr/decr does not modify expiry time (matches memcached behavior)\", \"test_incr_version (cache.tests.LocMemCacheTests)\", \"test_invalid_key_characters (cache.tests.LocMemCacheTests)\", \"test_invalid_key_length (cache.tests.LocMemCacheTests)\", \"test_invalid_with_version_key_length (cache.tests.LocMemCacheTests)\", \"#20613/#18541 -- Ensures pickling is done outside of the lock.\", \"get() moves cache keys.\", \"incr() moves cache keys.\", \"set() moves cache keys.\", \"Multiple locmem caches are isolated\", \"test_prefix (cache.tests.LocMemCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.LocMemCacheTests)\", \"test_set_many (cache.tests.LocMemCacheTests)\", \"test_set_many_expiration (cache.tests.LocMemCacheTests)\", \"test_simple (cache.tests.LocMemCacheTests)\", \"test_touch (cache.tests.LocMemCacheTests)\", \"test_unicode (cache.tests.LocMemCacheTests)\", \"test_zero_cull (cache.tests.LocMemCacheTests)\", \"test_add (cache.tests.FileBasedCachePathLibTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)\", \"test_binary_string (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_dir_permissions (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCachePathLibTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCachePathLibTests)\", \"test_clear (cache.tests.FileBasedCachePathLibTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCachePathLibTests)\", \"test_close (cache.tests.FileBasedCachePathLibTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCachePathLibTests)\", \"test_cull (cache.tests.FileBasedCachePathLibTests)\", \"test_cull_delete_when_store_empty (cache.tests.FileBasedCachePathLibTests)\", \"test_custom_key_func (cache.tests.FileBasedCachePathLibTests)\", \"test_data_types (cache.tests.FileBasedCachePathLibTests)\", \"test_decr (cache.tests.FileBasedCachePathLibTests)\", \"test_decr_version (cache.tests.FileBasedCachePathLibTests)\", \"test_delete (cache.tests.FileBasedCachePathLibTests)\", \"test_delete_many (cache.tests.FileBasedCachePathLibTests)\", \"test_delete_nonexistent (cache.tests.FileBasedCachePathLibTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCachePathLibTests)\", \"test_expiration (cache.tests.FileBasedCachePathLibTests)\", \"test_float_timeout (cache.tests.FileBasedCachePathLibTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCachePathLibTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCachePathLibTests)\", \"test_get_many (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCachePathLibTests)\", \"test_get_or_set_version (cache.tests.FileBasedCachePathLibTests)\", \"test_has_key (cache.tests.FileBasedCachePathLibTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCachePathLibTests)\", \"test_in (cache.tests.FileBasedCachePathLibTests)\", \"test_incr (cache.tests.FileBasedCachePathLibTests)\", \"test_incr_version (cache.tests.FileBasedCachePathLibTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCachePathLibTests)\", \"test_invalid_key_length (cache.tests.FileBasedCachePathLibTests)\", \"test_invalid_with_version_key_length (cache.tests.FileBasedCachePathLibTests)\", \"test_prefix (cache.tests.FileBasedCachePathLibTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCachePathLibTests)\", \"test_set_many (cache.tests.FileBasedCachePathLibTests)\", \"test_set_many_expiration (cache.tests.FileBasedCachePathLibTests)\", \"test_simple (cache.tests.FileBasedCachePathLibTests)\", \"test_touch (cache.tests.FileBasedCachePathLibTests)\", \"test_unicode (cache.tests.FileBasedCachePathLibTests)\", \"test_zero_cull (cache.tests.FileBasedCachePathLibTests)\", \"test_add (cache.tests.FileBasedCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_binary_string (cache.tests.FileBasedCacheTests)\", \"test_cache_dir_permissions (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.FileBasedCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_add (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_delete (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_has_key (cache.tests.FileBasedCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.FileBasedCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.FileBasedCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.FileBasedCacheTests)\", \"test_clear (cache.tests.FileBasedCacheTests)\", \"test_clear_does_not_remove_cache_dir (cache.tests.FileBasedCacheTests)\", \"test_close (cache.tests.FileBasedCacheTests)\", \"test_creates_cache_dir_if_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_cull (cache.tests.FileBasedCacheTests)\", \"test_cull_delete_when_store_empty (cache.tests.FileBasedCacheTests)\", \"test_custom_key_func (cache.tests.FileBasedCacheTests)\", \"test_data_types (cache.tests.FileBasedCacheTests)\", \"test_decr (cache.tests.FileBasedCacheTests)\", \"test_decr_version (cache.tests.FileBasedCacheTests)\", \"test_delete (cache.tests.FileBasedCacheTests)\", \"test_delete_many (cache.tests.FileBasedCacheTests)\", \"test_delete_nonexistent (cache.tests.FileBasedCacheTests)\", \"test_empty_cache_file_considered_expired (cache.tests.FileBasedCacheTests)\", \"test_expiration (cache.tests.FileBasedCacheTests)\", \"test_float_timeout (cache.tests.FileBasedCacheTests)\", \"test_get_does_not_ignore_non_filenotfound_exceptions (cache.tests.FileBasedCacheTests)\", \"test_get_ignores_enoent (cache.tests.FileBasedCacheTests)\", \"test_get_many (cache.tests.FileBasedCacheTests)\", \"test_get_or_set (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_callable (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_racing (cache.tests.FileBasedCacheTests)\", \"test_get_or_set_version (cache.tests.FileBasedCacheTests)\", \"test_has_key (cache.tests.FileBasedCacheTests)\", \"test_ignores_non_cache_files (cache.tests.FileBasedCacheTests)\", \"test_in (cache.tests.FileBasedCacheTests)\", \"test_incr (cache.tests.FileBasedCacheTests)\", \"test_incr_version (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_characters (cache.tests.FileBasedCacheTests)\", \"test_invalid_key_length (cache.tests.FileBasedCacheTests)\", \"test_invalid_with_version_key_length (cache.tests.FileBasedCacheTests)\", \"test_prefix (cache.tests.FileBasedCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.FileBasedCacheTests)\", \"test_set_many (cache.tests.FileBasedCacheTests)\", \"test_set_many_expiration (cache.tests.FileBasedCacheTests)\", \"test_simple (cache.tests.FileBasedCacheTests)\", \"test_touch (cache.tests.FileBasedCacheTests)\", \"test_unicode (cache.tests.FileBasedCacheTests)\", \"test_zero_cull (cache.tests.FileBasedCacheTests)\", \"test_add (cache.tests.DBCacheTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_binary_string (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_versioning_add (cache.tests.DBCacheTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheTests)\", \"test_clear (cache.tests.DBCacheTests)\", \"test_close (cache.tests.DBCacheTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheTests)\", \"Delete and recreate cache table with legacy behavior (explicitly\", \"test_cull (cache.tests.DBCacheTests)\", \"test_cull_count_queries (cache.tests.DBCacheTests)\", \"test_cull_delete_when_store_empty (cache.tests.DBCacheTests)\", \"test_custom_key_func (cache.tests.DBCacheTests)\", \"test_data_types (cache.tests.DBCacheTests)\", \"test_decr (cache.tests.DBCacheTests)\", \"test_decr_version (cache.tests.DBCacheTests)\", \"test_delete (cache.tests.DBCacheTests)\", \"The rowcount attribute should not be checked on a closed cursor.\", \"test_delete_many (cache.tests.DBCacheTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheTests)\", \"test_delete_nonexistent (cache.tests.DBCacheTests)\", \"test_expiration (cache.tests.DBCacheTests)\", \"test_float_timeout (cache.tests.DBCacheTests)\", \"test_get_many (cache.tests.DBCacheTests)\", \"test_get_many_num_queries (cache.tests.DBCacheTests)\", \"test_get_or_set (cache.tests.DBCacheTests)\", \"test_get_or_set_callable (cache.tests.DBCacheTests)\", \"test_get_or_set_racing (cache.tests.DBCacheTests)\", \"test_get_or_set_version (cache.tests.DBCacheTests)\", \"test_has_key (cache.tests.DBCacheTests)\", \"test_in (cache.tests.DBCacheTests)\", \"test_incr (cache.tests.DBCacheTests)\", \"test_incr_version (cache.tests.DBCacheTests)\", \"test_invalid_key_characters (cache.tests.DBCacheTests)\", \"test_invalid_key_length (cache.tests.DBCacheTests)\", \"test_prefix (cache.tests.DBCacheTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheTests)\", \"test_set_many (cache.tests.DBCacheTests)\", \"test_set_many_expiration (cache.tests.DBCacheTests)\", \"test_simple (cache.tests.DBCacheTests)\", \"test_touch (cache.tests.DBCacheTests)\", \"test_unicode (cache.tests.DBCacheTests)\", \"test_zero_cull (cache.tests.DBCacheTests)\", \"test_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_add_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_binary_string (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_read_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_add (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_get_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_versioning_incr_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_for_model_instance_with_deferred (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cache_write_unpicklable_object (cache.tests.DBCacheWithTimeZoneTests)\", \"test_clear (cache.tests.DBCacheWithTimeZoneTests)\", \"test_close (cache.tests.DBCacheWithTimeZoneTests)\", \"test_createcachetable_dry_run_mode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull_count_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_cull_delete_when_store_empty (cache.tests.DBCacheWithTimeZoneTests)\", \"test_custom_key_func (cache.tests.DBCacheWithTimeZoneTests)\", \"test_data_types (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_decr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_delete_nonexistent (cache.tests.DBCacheWithTimeZoneTests)\", \"test_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_float_timeout (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_many_num_queries (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_callable (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_racing (cache.tests.DBCacheWithTimeZoneTests)\", \"test_get_or_set_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_has_key (cache.tests.DBCacheWithTimeZoneTests)\", \"test_in (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr (cache.tests.DBCacheWithTimeZoneTests)\", \"test_incr_version (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_characters (cache.tests.DBCacheWithTimeZoneTests)\", \"test_invalid_key_length (cache.tests.DBCacheWithTimeZoneTests)\", \"test_prefix (cache.tests.DBCacheWithTimeZoneTests)\", \"test_second_call_doesnt_crash (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_fail_on_pickleerror (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many (cache.tests.DBCacheWithTimeZoneTests)\", \"test_set_many_expiration (cache.tests.DBCacheWithTimeZoneTests)\", \"test_simple (cache.tests.DBCacheWithTimeZoneTests)\", \"test_touch (cache.tests.DBCacheWithTimeZoneTests)\", \"test_unicode (cache.tests.DBCacheWithTimeZoneTests)\", \"test_zero_cull (cache.tests.DBCacheWithTimeZoneTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.703894",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}