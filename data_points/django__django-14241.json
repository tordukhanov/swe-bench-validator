{
  "repo": "django/django",
  "instance_id": "django__django-14241",
  "base_commit": "823a9e6bac38d38f7b0347497b833eec732bd384",
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -347,10 +347,16 @@ def get_order_by(self):\n                 continue\n \n             if not self.query.extra or col not in self.query.extra:\n-                # 'col' is of the form 'field' or 'field1__field2' or\n-                # '-field1__field2__field', etc.\n-                order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n+                if self.query.combinator and self.select:\n+                    # Don't use the first model's field because other\n+                    # combinated queries might define it differently.\n+                    order_by.append((OrderBy(F(col), descending=descending), False))\n+                else:\n+                    # 'col' is of the form 'field' or 'field1__field2' or\n+                    # '-field1__field2__field', etc.\n+                    order_by.extend(self.find_ordering_name(\n+                        field, self.query.get_meta(), default_order=asc,\n+                    ))\n             else:\n                 if col not in self.query.extra_select:\n                     order_by.append((\n",
  "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -5,7 +5,7 @@\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.test.utils import CaptureQueriesContext\n \n-from .models import Number, ReservedName\n+from .models import Celebrity, Number, ReservedName\n \n \n @skipUnlessDBFeature('supports_select_union')\n@@ -234,6 +234,24 @@ def test_union_with_values_list_and_order_on_annotation(self):\n             operator.itemgetter('num'),\n         )\n \n+    def test_union_multiple_models_with_values_list_and_order(self):\n+        reserved_name = ReservedName.objects.create(name='rn1', order=0)\n+        qs1 = Celebrity.objects.all()\n+        qs2 = ReservedName.objects.all()\n+        self.assertSequenceEqual(\n+            qs1.union(qs2).order_by('name').values_list('pk', flat=True),\n+            [reserved_name.pk],\n+        )\n+\n+    def test_union_multiple_models_with_values_list_and_order_by_extra_select(self):\n+        reserved_name = ReservedName.objects.create(name='rn1', order=0)\n+        qs1 = Celebrity.objects.extra(select={'extra_name': 'name'})\n+        qs2 = ReservedName.objects.extra(select={'extra_name': 'name'})\n+        self.assertSequenceEqual(\n+            qs1.union(qs2).order_by('extra_name').values_list('pk', flat=True),\n+            [reserved_name.pk],\n+        )\n+\n     def test_count_union(self):\n         qs1 = Number.objects.filter(num__lte=1).values('num')\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3).values('num')\n",
  "problem_statement": "QuerySet.values()/values_list() crash on combined querysets ordered by unannotated columns.\nDescription\n\t \n\t\t(last modified by Iuri de Silvio)\n\t \nDjango 3.2 fails with this query:\nqs1 = Celebrity.objects.all()\nqs2 = ReservedName.objects.all()\nqs1.union(qs2).values_list('name').first()\nIt worked until Django 3.1.8. This commit[1] to be exactly. â€‹https://github.com/django/django/commit/464a4c0c59277056b5d3c1132ac1b4c6085aee08\nThis is the broken generated query. In the second query, it fetches from the first table.\nSQL\nSELECT\n\t\"queries_celebrity\".\"name\",\n\t\"queries_celebrity\".\"id\" AS \"__orderbycol2\"\nFROM\n\t\"queries_celebrity\"\nUNION\nSELECT\n\t\"queries_reservedname\".\"name\",\n\t\"queries_celebrity\".\"id\" AS \"__orderbycol2\" -- HERE IS THE PROBLEM\nFROM\n\t\"queries_reservedname\"\nORDER BY\n\t(2) ASC\nLIMIT\n\t1\nBefore, it was:\nSQL\nSELECT\n\t\"queries_celebrity\".\"name\",\n\t\"queries_celebrity\".\"id\"\nFROM\n\t\"queries_celebrity\"\nUNION\nSELECT\n\t\"queries_reservedname\".\"name\",\n\t\"queries_reservedname\".\"id\"\nFROM\n\t\"queries_reservedname\"\nORDER BY\n\t(2) ASC\nLIMIT\n\t1\n",
  "hints_text": "",
  "created_at": "2021-04-09T08:42:35Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_union_multiple_models_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_empty_qs_union_with_ordered_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_exists_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_get_with_filters_unsupported_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression_and_alias (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_multiple_models_with_values_list_and_order_by_extra_select (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_none (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order_on_annotation (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.684926",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}