{
  "repo": "django/django",
  "instance_id": "django__django-14722",
  "base_commit": "c1e4111c74ee9d9f48cbee5a5b7c40289203c93d",
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -178,8 +178,12 @@ def _detect_changes(self, convert_apps=None, graph=None):\n         # Generate index removal operations before field is removed\n         self.generate_removed_constraints()\n         self.generate_removed_indexes()\n-        # Generate field operations\n+        # Generate field renaming operations.\n         self.generate_renamed_fields()\n+        # Generate removal of foo together.\n+        self.generate_removed_altered_unique_together()\n+        self.generate_removed_altered_index_together()\n+        # Generate field operations.\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n@@ -1128,8 +1132,7 @@ def _get_dependencies_for_foreign_key(app_label, model_name, field, project_stat\n             dependencies.append((through_app_label, through_object_name, None, True))\n         return dependencies\n \n-    def _generate_altered_foo_together(self, operation):\n-        option_name = operation.option_name\n+    def _get_altered_foo_together_operations(self, option_name):\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n@@ -1157,13 +1160,49 @@ def _generate_altered_foo_together(self, operation):\n                             dependencies.extend(self._get_dependencies_for_foreign_key(\n                                 app_label, model_name, field, self.to_state,\n                             ))\n+                yield (\n+                    old_value,\n+                    new_value,\n+                    app_label,\n+                    model_name,\n+                    dependencies,\n+                )\n \n+    def _generate_removed_altered_foo_together(self, operation):\n+        for (\n+            old_value,\n+            new_value,\n+            app_label,\n+            model_name,\n+            dependencies,\n+        ) in self._get_altered_foo_together_operations(operation.option_name):\n+            removal_value = new_value.intersection(old_value)\n+            if removal_value or old_value:\n                 self.add_operation(\n                     app_label,\n-                    operation(\n-                        name=model_name,\n-                        **{option_name: new_value}\n-                    ),\n+                    operation(name=model_name, **{operation.option_name: removal_value}),\n+                    dependencies=dependencies,\n+                )\n+\n+    def generate_removed_altered_unique_together(self):\n+        self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n+\n+    def generate_removed_altered_index_together(self):\n+        self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n+\n+    def _generate_altered_foo_together(self, operation):\n+        for (\n+            old_value,\n+            new_value,\n+            app_label,\n+            model_name,\n+            dependencies,\n+        ) in self._get_altered_foo_together_operations(operation.option_name):\n+            removal_value = new_value.intersection(old_value)\n+            if new_value != removal_value:\n+                self.add_operation(\n+                    app_label,\n+                    operation(name=model_name, **{operation.option_name: new_value}),\n                     dependencies=dependencies,\n                 )\n \n",
  "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1570,9 +1570,26 @@ def test_foo_together_ordering(self):\n         )\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, \"otherapp\", 1)\n-        self.assertOperationTypes(changes, \"otherapp\", 0, [\"AlterUniqueTogether\", \"AlterIndexTogether\"])\n-        self.assertOperationAttributes(changes, \"otherapp\", 0, 0, name=\"book\", unique_together={(\"title\", \"author\")})\n-        self.assertOperationAttributes(changes, \"otherapp\", 0, 1, name=\"book\", index_together={(\"title\", \"author\")})\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book', unique_together=set(),\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book', index_together=set(),\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 2, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 3, name='book',\n+            index_together={('title', 'author')},\n+        )\n \n     def test_add_field_and_foo_together(self):\n         \"\"\"\n@@ -1619,10 +1636,100 @@ def test_remove_field_and_foo_together(self):\n         )\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, \"otherapp\", 1)\n-        self.assertOperationTypes(changes, \"otherapp\", 0, [\"AlterUniqueTogether\", \"AlterIndexTogether\", \"RemoveField\"])\n-        self.assertOperationAttributes(changes, \"otherapp\", 0, 0, name=\"book\", unique_together={(\"author\", \"title\")})\n-        self.assertOperationAttributes(changes, \"otherapp\", 0, 1, name=\"book\", index_together={(\"author\", \"title\")})\n-        self.assertOperationAttributes(changes, \"otherapp\", 0, 2, model_name=\"book\", name=\"newfield\")\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+            'RemoveField',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book', unique_together=set(),\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book', index_together=set(),\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 2, name='book',\n+            unique_together={('author', 'title')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 3, name='book',\n+            index_together={('author', 'title')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 4, model_name='book', name='newfield',\n+        )\n+\n+    def test_alter_field_and_foo_together(self):\n+        \"\"\"Fields are altered after deleting some index/unique_together.\"\"\"\n+        initial_author = ModelState('testapp', 'Author', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=200)),\n+            ('age', models.IntegerField(db_index=True)),\n+        ], {\n+            'unique_together': {('name',)},\n+        })\n+        author_reversed_constraints = ModelState('testapp', 'Author', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=200, unique=True)),\n+            ('age', models.IntegerField()),\n+        ], {\n+            'index_together': {('age',)},\n+        })\n+        changes = self.get_changes([initial_author], [author_reversed_constraints])\n+\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterField',\n+            'AlterField',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, name='author', unique_together=set(),\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, model_name='author', name='age',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 2, model_name='author', name='name',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 3, name='author', index_together={('age',)},\n+        )\n+\n+    def test_partly_alter_foo_together(self):\n+        initial_author = ModelState('testapp', 'Author', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=200)),\n+            ('age', models.IntegerField()),\n+        ], {\n+            'unique_together': {('name',), ('age',)},\n+            'index_together': {('name',)},\n+        })\n+        author_reversed_constraints = ModelState('testapp', 'Author', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=200)),\n+            ('age', models.IntegerField()),\n+        ], {\n+            'unique_together': {('age',)},\n+            'index_together': {('name',), ('age',)},\n+        })\n+        changes = self.get_changes([initial_author], [author_reversed_constraints])\n+\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, name='author', unique_together={('age',)},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, name='author',\n+            index_together={('name',), ('age',)},\n+        )\n \n     def test_rename_field_and_foo_together(self):\n         \"\"\"\n@@ -1635,11 +1742,27 @@ def test_rename_field_and_foo_together(self):\n         )\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, \"otherapp\", 1)\n-        self.assertOperationTypes(changes, \"otherapp\", 0, [\"RenameField\", \"AlterUniqueTogether\", \"AlterIndexTogether\"])\n-        self.assertOperationAttributes(changes, \"otherapp\", 0, 1, name=\"book\", unique_together={\n-            (\"title\", \"newfield2\")\n-        })\n-        self.assertOperationAttributes(changes, \"otherapp\", 0, 2, name=\"book\", index_together={(\"title\", \"newfield2\")})\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'RenameField',\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book', unique_together=set(),\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 2, name='book', index_together=set(),\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 3, name='book',\n+            unique_together={('title', 'newfield2')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 4, name='book',\n+            index_together={('title', 'newfield2')},\n+        )\n \n     def test_proxy(self):\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n",
  "problem_statement": "Moving a unique constraint from unique_together to Field.unique generate an invalid migration.\nDescription\n\t\nYou can see a demo example to show the bug at [github](​https://github.com/ramwin/testunique/).\nI met a problem when I convert a unique_together to the unique=True attribute. \nfirst commit, everything is ok\nI create a model file.\n// testapp/models.py\nclass MyModel(models.Model):\n name = models.CharField(max_length=32)\n class Meta:\n\t unique_together = (\"name\", )\nthe migrations file looks like this.\n// testapp/migrations/0001_initial.py\n# Generated by Django 3.0.5 on 2020-04-22 12:47\nfrom django.db import migrations, models\nclass Migration(migrations.Migration):\n dependencies = [\n\t ('testapp', '0001_initial'),\n ]\n operations = [\n\t migrations.AlterField(\n\t\t model_name='mymodel',\n\t\t name='name',\n\t\t field=models.CharField(max_length=32, unique=True),\n\t ),\n\t migrations.AlterUniqueTogether(\n\t\t name='mymodel',\n\t\t unique_together=set(),\n\t ),\n ]\nsecond commit: then I remove the unique_together and add unique=True to the field MyModel.name\nmodel file\nclass MyModel(models.Model):\n name = models.CharField(max_length=32, unique=True)\n class Meta:\n\t pass\n\t # unique_together = (\"name\", )\n0002 migrations file\nclass Migration(migrations.Migration):\n dependencies = [\n\t ('testapp', '0001_initial'),\n ]\n operations = [\n\t migrations.AlterField(\n\t\t model_name='mymodel',\n\t\t name='name',\n\t\t field=models.CharField(max_length=32, unique=True),\n\t ),\n\t migrations.AlterUniqueTogether(\n\t\t name='mymodel',\n\t\t unique_together=set(),\n\t ),\n ]\nHowever, when I apply the migrations, an error occurs;\nwangx@aliyun:~/testunique$ python3 manage.py migrate\nOperations to perform:\n Apply all migrations: admin, auth, contenttypes, sessions, testapp\nRunning migrations:\n Applying contenttypes.0001_initial... OK\n Applying auth.0001_initial... OK\n Applying admin.0001_initial... OK\n Applying admin.0002_logentry_remove_auto_add... OK\n Applying admin.0003_logentry_add_action_flag_choices... OK\n Applying contenttypes.0002_remove_content_type_name... OK\n Applying auth.0002_alter_permission_name_max_length... OK\n Applying auth.0003_alter_user_email_max_length... OK\n Applying auth.0004_alter_user_username_opts... OK\n Applying auth.0005_alter_user_last_login_null... OK\n Applying auth.0006_require_contenttypes_0002... OK\n Applying auth.0007_alter_validators_add_error_messages... OK\n Applying auth.0008_alter_user_username_max_length... OK\n Applying auth.0009_alter_user_last_name_max_length... OK\n Applying auth.0010_alter_group_name_max_length... OK\n Applying auth.0011_update_proxy_permissions... OK\n Applying sessions.0001_initial... OK\n Applying testapp.0001_initial... OK\n Applying testapp.0002_auto_20200422_1247...Traceback (most recent call last):\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 86, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/mysql/base.py\", line 74, in execute\n\treturn self.cursor.execute(query, args)\n File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/cursors.py\", line 209, in execute\n\tres = self._query(query)\n File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/cursors.py\", line 315, in _query\n\tdb.query(q)\n File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/connections.py\", line 239, in query\n\t_mysql.connection.query(self, query)\nMySQLdb._exceptions.OperationalError: (1061, \"Duplicate key name 'testapp_mymodel_name_ba5e2bd2_uniq'\")\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"manage.py\", line 21, in <module>\n\tmain()\n File \"manage.py\", line 17, in main\n\texecute_from_command_line(sys.argv)\n File \"/usr/local/lib/python3.6/dist-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\n\tutility.execute()\n File \"/usr/local/lib/python3.6/dist-packages/django/core/management/__init__.py\", line 395, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/usr/local/lib/python3.6/dist-packages/django/core/management/base.py\", line 328, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/usr/local/lib/python3.6/dist-packages/django/core/management/base.py\", line 369, in execute\n\toutput = self.handle(*args, **options)\n File \"/usr/local/lib/python3.6/dist-packages/django/core/management/base.py\", line 83, in wrapped\n\tres = handle_func(*args, **kwargs)\n File \"/usr/local/lib/python3.6/dist-packages/django/core/management/commands/migrate.py\", line 233, in handle\n\tfake_initial=fake_initial,\n File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/executor.py\", line 117, in migrate\n\tstate = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/executor.py\", line 147, in _migrate_all_forwards\n\tstate = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/executor.py\", line 245, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/migration.py\", line 124, in apply\n\toperation.database_forwards(self.app_label, schema_editor, old_state, project_state)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/operations/fields.py\", line 249, in database_forwards\n\tschema_editor.alter_field(from_model, from_field, to_field)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/base/schema.py\", line 565, in alter_field\n\told_db_params, new_db_params, strict)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/base/schema.py\", line 745, in _alter_field\n\tself.execute(self._create_unique_sql(model, [new_field.column]))\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/base/schema.py\", line 142, in execute\n\tcursor.execute(sql, params)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 100, in execute\n\treturn super().execute(sql, params)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 68, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 77, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 86, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/utils.py\", line 90, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 86, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/mysql/base.py\", line 74, in execute\n\treturn self.cursor.execute(query, args)\n File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/cursors.py\", line 209, in execute\n\tres = self._query(query)\n File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/cursors.py\", line 315, in _query\n\tdb.query(q)\n File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/connections.py\", line 239, in query\n\t_mysql.connection.query(self, query)\ndjango.db.utils.OperationalError: (1061, \"Duplicate key name 'testapp_mymodel_name_ba5e2bd2_uniq'\")\nI check the sql for these migrations, it shows:\nwangx@aliyun:~/testunique$ python3 manage.py sqlmigrate testapp 0001\n--\n-- Create model MyModel\n--\nCREATE TABLE `testapp_mymodel` (`id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY, `name` varchar(32) NOT NULL);\nALTER TABLE `testapp_mymodel` ADD CONSTRAINT `testapp_mymodel_name_ba5e2bd2_uniq` UNIQUE (`name`);\nwangx@aliyun:~/testunique$ python3 manage.py sqlmigrate testapp 0002\n--\n-- Alter field name on mymodel\n--\nALTER TABLE `testapp_mymodel` ADD CONSTRAINT `testapp_mymodel_name_ba5e2bd2_uniq` UNIQUE (`name`);\n--\n-- Alter unique_together for mymodel (0 constraint(s))\n--\nALTER TABLE `testapp_mymodel` DROP INDEX `testapp_mymodel_name_ba5e2bd2_uniq`;\nit looks like django will\nfirst create the index for unique=True\nsecond drop the index for unique_together=('name', )\nbut the program for creating index name generates the same index name :testapp_mymodel_name_ba5e2bd2_uniq, so when django create the same index, Duplicate key name error occurs.\n",
  "hints_text": "this is a small project which can repeat the bug.\nThank your for your report. I guess this is a bug in the auto-detector where the AlterUniqueTogether should appear before the AlterField that adds the Field.unique=True. I assume this is the case because generate_altered_unique_together is run after generate_altered_fields and the former doesn't add any dependencies on ensure operations are properly re-ordered. Not sure it's worth adjusting AddConstraint ordering as well since the chance of adding a UniqueConstraint with a colliding .name are really slim. Xiang, can you confirm that re-ordering your operations so that AlterUniqueTogether is performed before AlterField addresses your issue?\nI think changing the format of index name if the CONSTRAINT is create by the unique_together will work either. e.g.: ALTER TABLE `testapp_mymodel` ADD CONSTRAINT `testapp_mymodel_name_ba5e2bd2_uniq_by_unique_together` UNIQUE (`name`); ALTER TABLE `testapp_mymodel` ADD CONSTRAINT `testapp_mymodel_name_ba5e2bd2_uniq_by_field` UNIQUE (`name`); I tried the sql in reverse order. It works. wangx@aliyun:~/testunique$ python3 manage.py migrate testapp 0002 Operations to perform: Target specific migration: 0002_auto_20200422_1247, from testapp Running migrations: Applying testapp.0002_auto_20200422_1247...Traceback (most recent call last): File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 86, in _execute return self.cursor.execute(sql, params) File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/mysql/base.py\", line 74, in execute return self.cursor.execute(query, args) File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/cursors.py\", line 209, in execute res = self._query(query) File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/cursors.py\", line 315, in _query db.query(q) File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/connections.py\", line 239, in query _mysql.connection.query(self, query) MySQLdb._exceptions.OperationalError: (1061, \"Duplicate key name 'testapp_mymodel_name_ba5e2bd2_uniq'\") The above exception was the direct cause of the following exception: Traceback (most recent call last): File \"manage.py\", line 21, in <module> main() File \"manage.py\", line 17, in main execute_from_command_line(sys.argv) File \"/usr/local/lib/python3.6/dist-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line utility.execute() File \"/usr/local/lib/python3.6/dist-packages/django/core/management/__init__.py\", line 395, in execute self.fetch_command(subcommand).run_from_argv(self.argv) File \"/usr/local/lib/python3.6/dist-packages/django/core/management/base.py\", line 328, in run_from_argv self.execute(*args, **cmd_options) File \"/usr/local/lib/python3.6/dist-packages/django/core/management/base.py\", line 369, in execute output = self.handle(*args, **options) File \"/usr/local/lib/python3.6/dist-packages/django/core/management/base.py\", line 83, in wrapped res = handle_func(*args, **kwargs) File \"/usr/local/lib/python3.6/dist-packages/django/core/management/commands/migrate.py\", line 233, in handle fake_initial=fake_initial, File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/executor.py\", line 117, in migrate state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial) File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/executor.py\", line 147, in _migrate_all_forwards state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial) File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/executor.py\", line 245, in apply_migration state = migration.apply(state, schema_editor) File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/migration.py\", line 124, in apply operation.database_forwards(self.app_label, schema_editor, old_state, project_state) File \"/usr/local/lib/python3.6/dist-packages/django/db/migrations/operations/fields.py\", line 249, in database_forwards schema_editor.alter_field(from_model, from_field, to_field) File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/base/schema.py\", line 565, in alter_field old_db_params, new_db_params, strict) File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/base/schema.py\", line 745, in _alter_field self.execute(self._create_unique_sql(model, [new_field.column])) File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/base/schema.py\", line 142, in execute cursor.execute(sql, params) File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 100, in execute return super().execute(sql, params) File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 68, in execute return self._execute_with_wrappers(sql, params, many=False, executor=self._execute) File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 77, in _execute_with_wrappers return executor(sql, params, many, context) File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 86, in _execute return self.cursor.execute(sql, params) File \"/usr/local/lib/python3.6/dist-packages/django/db/utils.py\", line 90, in __exit__ raise dj_exc_value.with_traceback(traceback) from exc_value File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/utils.py\", line 86, in _execute return self.cursor.execute(sql, params) File \"/usr/local/lib/python3.6/dist-packages/django/db/backends/mysql/base.py\", line 74, in execute return self.cursor.execute(query, args) File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/cursors.py\", line 209, in execute res = self._query(query) File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/cursors.py\", line 315, in _query db.query(q) File \"/usr/local/lib/python3.6/dist-packages/MySQLdb/connections.py\", line 239, in query _mysql.connection.query(self, query) django.db.utils.OperationalError: (1061, \"Duplicate key name 'testapp_mymodel_name_ba5e2bd2_uniq'\") wangx@aliyun:~/testunique$ python3 manage.py sqlmigrate testapp 0002 -- -- Alter field name on mymodel -- ALTER TABLE `testapp_mymodel` ADD CONSTRAINT `testapp_mymodel_name_ba5e2bd2_uniq` UNIQUE (`name`); -- -- Alter unique_together for mymodel (0 constraint(s)) -- ALTER TABLE `testapp_mymodel` DROP INDEX `testapp_mymodel_name_ba5e2bd2_uniq`; wangx@aliyun:~/testunique$ mysql -u test -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 36 Server version: 5.7.29-0ubuntu0.18.04.1 (Ubuntu) Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql> use testunique; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql> ALTER TABLE `testapp_mymodel` DROP INDEX `testapp_mymodel_name_ba5e2bd2_uniq`; Query OK, 0 rows affected (0.01 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql> ALTER TABLE `testapp_mymodel` ADD CONSTRAINT `testapp_mymodel_name_ba5e2bd2_uniq` UNIQUE (`name`); Query OK, 0 rows affected (0.01 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql> ALTER TABLE `testapp_mymodel` ADD CONSTRAINT `testapp_mymodel_name_ba5e2bd2_uniq_by_unique_together` UNIQUE (`name`); Query OK, 0 rows affected, 1 warning (0.00 sec) Records: 0 Duplicates: 0 Warnings: 1\nI think we can consider limit the length of unique_together. If a user set unique_together containing only one field, we can raise an error and ask him to use unique=True instead.\nHi! I looked a bit into the issue. I'll share my thoughts and suggest/discuss some solutions so that we can agree on the approach. I'd be more than happy to tackle the issue then, if that is okay, once we know how we want to fix the issue :D TL;DR: some suboptimal solutions are presented, but 5/ and 6/ look the most promising to me. Please let's discuss those a bit at least :) So the issue occurs because we are changing an unique_together to a unique=True on the field (similarly, I believe the bug occurs with index_together and db_index), which will first try to create an existing index before deleting it. Some solutions: 1/ Changing the index name I think changing the format of index name if the CONSTRAINT is create by the unique_together will work either. It would somehow work and mitigate the issue at hand, but it might introduce complexity for backward compatibility. When upgrading your Django version and wanting to drop an index, Django will have to know whether the name of the index comes the previous or current version of Django, in order to know how the index is called and drop it. 2/ Forbid using unique_together (and index_together) with a single field If a user set unique_together containing only one field, we can raise an error and ask him to use unique=True instead It feels more like a workaround than a real fix of the issue. And more generally, we will have issues with backward compatibility. We can't break unique_togethers with one field from a release to the next. I guess we would need to add a deprecation warning, and really introduce a breaking behaviour in the next major release (Django 5.x then?). Which seems IMHO like a lot of trouble for a rather narrow issue. 3/ Leverage the existing foo_together_change dependency mecanism The autodetector has a similar re-order behaviour so the one we would need already implemented. When dropping a field, we add a dependency called foo_together_change to the field, which would re-order the AlterUniqueTogether operations, for the index to be dropped before the removal of the field. I tried it out for field altering (see code block below), and it would fix the issue at hand, but it wouldn't fix the reverse operation. If we changed from a unique=True to a unique_together, the dependency would still re-order the AlterUniqueTogether operation to happen before the AlterField, but we would need to first drop the index through the AlterField. So the very same issue occurs, just the other way around. diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py index 2848adce7d..598d4649e9 100644 --- a/django/db/migrations/autodetector.py +++ b/django/db/migrations/autodetector.py @@ -987,7 +987,9 @@ class MigrationAutodetector: field=field, preserve_default=preserve_default, ), - dependencies=dependencies, + dependencies=dependencies + [ + (app_label, model_name, field_name, \"foo_together_change\"), + ], ) else: # We cannot alter between m2m and concrete fields 4/ Split the index dropping/creation out of the AlterField operation The bug seems related to the fact that AlterField does a lot of things, and among them is the creation/drop of indexes, which can clash with other structures. So one could probably move this part out of AlterField, but it feels like a very heavy and error-prone change to a part that is currently core to the autodetector and migrations framework. This idea is a long-shot, and also pretty vague in my head. I wouldn't actually consider this solution. 5/ Do multi-step AlterFooTogether operations This solution, and the next one, focus on the idea that index creation should operate in two steps (in migrations). First, index drops, and then, after field removal/creation/altering, add indexes. Today, AlterUniqueTogether is one step that will both create and drop indexes, which is a part of the problem. So would de-couple this, and first do the AlterFooTogether that would drop indexes, then field changes, and then again AlterFooTogether to add indexes. A small issue is that this operation is declarative with respect to the expected model state, we just go from one state to the next. So the idea would be to split the AlterFooTogether operation (in two mostly), so that the migration ends up in the correct state, but with an intermediate state that, by design, only drops indexes. An example would be (in pseudo-code): Initial model class MyModel(models.Model): name = models.CharField(max_length=32) age = models.IntegerField() class Meta: unique_together = (\"name\", ) becomes: class MyModel(models.Model): name = models.CharField(max_length=32, unique=True) age = models.IntegerField() class Meta: unique_together = (\"age\", ) would do operations like operations = [ # Dropping the \"name\" index migrations.AlterUniqueTogether( name='mymodel', unique_together=set(), ), # Adding the \"name\" index migrations.AlterField( model_name='mymodel', name='name', field=models.CharField(max_length=32, unique=True), ), # Adding the \"age\" index migrations.AlterUniqueTogether( name='mymodel', unique_together={(\"age\", )}, ), ] (one could also imagine age being a unique=True first, where the AlterField will drop the index) I believe the amount of work is not that high for this solution, and we should have no issue with backward compatibility, since we keep the same logic for the operation itself. The tricky part is to the generate the intermediate state of foo_together, that will only drop the related indexes. An issue I see: we use implicitly the AlterFooTogether behaviour to serve our purpose, and not the purpose it was made for. 6/ Introduce explicit CreateFooTogether and DropFooTogether operations The cleaner solution to 5/ would be to introduce four new operations, creating and dropping unique_together and index_together. This would mimic what is done for constraints and indexes in the autodetector, having two separate steps. The issue is that, a) it will introduce a lot of new code and operations. Even if the code is not complicated, it's still content to document and maintain. And b) for backward compatibility, we would need to keep AlterFooTogether operations (forever?) the way they are, even if the operation is not generated by Django anymore. End note: From a quick look, 5/ seems like the most realistic approach, but I'd like to confirm with more experienced Django contributors/maintainers :) Thanks! David\nA first PR ​https://github.com/django/django/pull/14722 with approach 5/ (from my comment above) basically.\nRemoving \"patch needs improvement\" to get some eyes to look at it :)",
  "created_at": "2021-07-31T17:43:56Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"Fields are altered after deleting some index/unique_together.\", \"index/unique_together also triggers on ordering changes.\", \"Removed fields will be removed after updating index/unique_together.\"]",
  "PASS_TO_PASS": "[\"test_auto (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_many_operations_suffix (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_no_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_no_operations_initial (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_none_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_none_name_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_operation_with_no_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_operation (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_operation_long_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_create_models (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_create_models_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"Setting order_with_respect_to when adding the FK too does\", \"#23405 - Adding a NOT NULL and blank `CharField` or `TextField`\", \"Test change detection of new constraints.\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of new fields.\", \"Added fields will be created before using them in index/unique_together.\", \"#22030 - Adding a field with a default should work.\", \"Tests index/unique_together detection.\", \"Test change detection of new indexes.\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"Setting order_with_respect_to when adding the whole model\", \"test_add_model_order_with_respect_to_index_constraint (migrations.test_autodetector.AutodetectorTests)\", \"test_add_model_order_with_respect_to_index_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"Removing a base field takes place before adding a new inherited model\", \"#23405 - Adding a NOT NULL and non-blank `CharField` or `TextField`\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"Alter_db_table doesn't generate a migration if no changes have been made.\", \"Tests detection for removing db_table in model's options.\", \"Tests when model and db_table changes, autodetector must create two\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"#23609 - Tests autodetection of nullable to non-nullable alterations.\", \"ForeignKeys are altered _before_ the model they used to\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"Changing the model managers adds a new operation.\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"Tests auto-naming of migrations for graph matching.\", \"test_arrange_for_graph_with_multiple_initial (migrations.test_autodetector.AutodetectorTests)\", \"Bases of other models come first.\", \"test_bases_first_mixed_case_app_label (migrations.test_autodetector.AutodetectorTests)\", \"#23315 - The dependency resolver knows to put all CreateModel\", \"#23322 - The dependency resolver knows to explicitly resolve\", \"Having a circular ForeignKey dependency automatically\", \"#23938 - Changing a concrete field into a ManyToManyField\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"Adding a m2m with a through model and the models that use it should be\", \"Two instances which deconstruct to the same value aren't considered a\", \"Tests custom naming of migrations for graph matching.\", \"Field instances are handled correctly by nested deconstruction.\", \"#22951 -- Uninstantiated classes with deconstruct are correctly returned\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)\", \"#23452 - Empty unique/index_together shouldn't generate a migration.\", \"A dependency to an app with no migrations uses __first__.\", \"Having a ForeignKey automatically adds a dependency.\", \"#23100 - ForeignKeys correctly depend on other apps' models.\", \"index/unique_together doesn't generate a migration if no\", \"Tests unique_together and field removal detection & ordering\", \"Removing an FK and the model it targets in the same change must remove\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)\", \"Tests when model changes but db_table stays as-is, autodetector must not\", \"A dependency to an app with existing migrations uses the\", \"A model with a m2m field that specifies a \\\"through\\\" model cannot be\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)\", \"#23938 - Changing a ManyToManyField into a concrete field\", \"Removing a ManyToManyField and the \\\"through\\\" model in the same change\", \"Removing a model that contains a ManyToManyField and the \\\"through\\\" model\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)\", \"#23956 - Inheriting models doesn't move *_ptr fields into AddField operations.\", \"Nested deconstruction is applied recursively to the args/kwargs of\", \"Tests autodetection of new models.\", \"If two models with a ForeignKey from one to the other are removed at the\", \"Tests deletion of old models.\", \"Test change detection of reordering of fields in indexes.\", \"test_parse_number (migrations.test_autodetector.AutodetectorTests)\", \"test_partly_alter_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"A relation used as the primary key is kept as part of CreateModel.\", \"The autodetector correctly deals with proxy models.\", \"Bases of proxies come first.\", \"#23415 - The autodetector must correctly deal with custom FK on proxy\", \"FK dependencies still work on proxy models.\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)\", \"Removing order_with_respect_to when removing the FK too does\", \"Test change detection of removed constraints.\", \"Tests autodetection of removed fields.\", \"Test change detection of removed indexes.\", \"Tests autodetection of renamed fields.\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)\", \"RenameField is used if a field is renamed and db_column equal to the\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)\", \"Tests autodetection of renamed models that are used in M2M relations as\", \"Tests autodetection of renamed models.\", \"Model name is case-insensitive. Changing case doesn't lead to any\", \"The migration to rename a model pointed to by a foreign key in another\", \"#24537 - The order of fields in a model does not influence\", \"Tests autodetection of renamed models while simultaneously renaming one\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_renamed_referenced_m2m_model_case (migrations.test_autodetector.AutodetectorTests)\", \"#22300 - Adding an FK in the same \\\"spot\\\" as a deleted CharField should\", \"A migration with a FK between two models of the same app does\", \"#22275 - A migration with circular FK dependency does not try\", \"A migration with a FK between two models of the same app\", \"Setting order_with_respect_to adds a field.\", \"test_set_alter_order_with_respect_to_index_constraint_foo_together (migrations.test_autodetector.AutodetectorTests)\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)\", \"Swappable models get their CreateModel first.\", \"Trim does not remove dependencies but does remove unwanted apps.\", \"The autodetector correctly deals with managed models.\", \"#23415 - The autodetector must correctly deal with custom FK on\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.700688",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}