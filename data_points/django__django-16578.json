{
  "repo": "django/django",
  "instance_id": "django__django-16578",
  "base_commit": "31cd2852cb86197d5f3f5a637184a078ab0615f8",
  "patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -1,3 +1,4 @@\n+import warnings\n from enum import Enum\n from types import NoneType\n \n@@ -9,6 +10,7 @@\n from django.db.models.query_utils import Q\n from django.db.models.sql.query import Query\n from django.db.utils import DEFAULT_DB_ALIAS\n+from django.utils.deprecation import RemovedInDjango60Warning\n from django.utils.translation import gettext_lazy as _\n \n __all__ = [\"BaseConstraint\", \"CheckConstraint\", \"Deferrable\", \"UniqueConstraint\"]\n@@ -18,12 +20,31 @@ class BaseConstraint:\n     default_violation_error_message = _(\"Constraint “%(name)s” is violated.\")\n     violation_error_message = None\n \n-    def __init__(self, name, violation_error_message=None):\n+    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n+    # def __init__(self, *, name, violation_error_message=None):\n+    def __init__(self, *args, name=None, violation_error_message=None):\n+        # RemovedInDjango60Warning.\n+        if name is None and not args:\n+            raise TypeError(\n+                f\"{self.__class__.__name__}.__init__() missing 1 required keyword-only \"\n+                f\"argument: 'name'\"\n+            )\n         self.name = name\n         if violation_error_message is not None:\n             self.violation_error_message = violation_error_message\n         else:\n             self.violation_error_message = self.default_violation_error_message\n+        # RemovedInDjango60Warning.\n+        if args:\n+            warnings.warn(\n+                f\"Passing positional arguments to {self.__class__.__name__} is \"\n+                f\"deprecated.\",\n+                RemovedInDjango60Warning,\n+                stacklevel=2,\n+            )\n+            for arg, attr in zip(args, [\"name\", \"violation_error_message\"]):\n+                if arg:\n+                    setattr(self, attr, arg)\n \n     @property\n     def contains_expressions(self):\n@@ -67,7 +88,7 @@ def __init__(self, *, check, name, violation_error_message=None):\n             raise TypeError(\n                 \"CheckConstraint.check must be a Q instance or boolean expression.\"\n             )\n-        super().__init__(name, violation_error_message=violation_error_message)\n+        super().__init__(name=name, violation_error_message=violation_error_message)\n \n     def _get_check_sql(self, model, schema_editor):\n         query = Query(model=model, alias_cols=False)\n@@ -186,7 +207,7 @@ def __init__(\n             F(expression) if isinstance(expression, str) else expression\n             for expression in expressions\n         )\n-        super().__init__(name, violation_error_message=violation_error_message)\n+        super().__init__(name=name, violation_error_message=violation_error_message)\n \n     @property\n     def contains_expressions(self):\n",
  "test_patch": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -7,6 +7,8 @@\n from django.db.models.functions import Lower\n from django.db.transaction import atomic\n from django.test import SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.test.utils import ignore_warnings\n+from django.utils.deprecation import RemovedInDjango60Warning\n \n from .models import (\n     ChildModel,\n@@ -26,48 +28,48 @@ def get_constraints(table):\n \n class BaseConstraintTests(SimpleTestCase):\n     def test_constraint_sql(self):\n-        c = BaseConstraint(\"name\")\n+        c = BaseConstraint(name=\"name\")\n         msg = \"This method must be implemented by a subclass.\"\n         with self.assertRaisesMessage(NotImplementedError, msg):\n             c.constraint_sql(None, None)\n \n     def test_contains_expressions(self):\n-        c = BaseConstraint(\"name\")\n+        c = BaseConstraint(name=\"name\")\n         self.assertIs(c.contains_expressions, False)\n \n     def test_create_sql(self):\n-        c = BaseConstraint(\"name\")\n+        c = BaseConstraint(name=\"name\")\n         msg = \"This method must be implemented by a subclass.\"\n         with self.assertRaisesMessage(NotImplementedError, msg):\n             c.create_sql(None, None)\n \n     def test_remove_sql(self):\n-        c = BaseConstraint(\"name\")\n+        c = BaseConstraint(name=\"name\")\n         msg = \"This method must be implemented by a subclass.\"\n         with self.assertRaisesMessage(NotImplementedError, msg):\n             c.remove_sql(None, None)\n \n     def test_validate(self):\n-        c = BaseConstraint(\"name\")\n+        c = BaseConstraint(name=\"name\")\n         msg = \"This method must be implemented by a subclass.\"\n         with self.assertRaisesMessage(NotImplementedError, msg):\n             c.validate(None, None)\n \n     def test_default_violation_error_message(self):\n-        c = BaseConstraint(\"name\")\n+        c = BaseConstraint(name=\"name\")\n         self.assertEqual(\n             c.get_violation_error_message(), \"Constraint “name” is violated.\"\n         )\n \n     def test_custom_violation_error_message(self):\n         c = BaseConstraint(\n-            \"base_name\", violation_error_message=\"custom %(name)s message\"\n+            name=\"base_name\", violation_error_message=\"custom %(name)s message\"\n         )\n         self.assertEqual(c.get_violation_error_message(), \"custom base_name message\")\n \n     def test_custom_violation_error_message_clone(self):\n         constraint = BaseConstraint(\n-            \"base_name\",\n+            name=\"base_name\",\n             violation_error_message=\"custom %(name)s message\",\n         ).clone()\n         self.assertEqual(\n@@ -77,7 +79,7 @@ def test_custom_violation_error_message_clone(self):\n \n     def test_deconstruction(self):\n         constraint = BaseConstraint(\n-            \"base_name\",\n+            name=\"base_name\",\n             violation_error_message=\"custom %(name)s message\",\n         )\n         path, args, kwargs = constraint.deconstruct()\n@@ -88,6 +90,23 @@ def test_deconstruction(self):\n             {\"name\": \"base_name\", \"violation_error_message\": \"custom %(name)s message\"},\n         )\n \n+    def test_deprecation(self):\n+        msg = \"Passing positional arguments to BaseConstraint is deprecated.\"\n+        with self.assertRaisesMessage(RemovedInDjango60Warning, msg):\n+            BaseConstraint(\"name\", \"violation error message\")\n+\n+    def test_name_required(self):\n+        msg = (\n+            \"BaseConstraint.__init__() missing 1 required keyword-only argument: 'name'\"\n+        )\n+        with self.assertRaisesMessage(TypeError, msg):\n+            BaseConstraint()\n+\n+    @ignore_warnings(category=RemovedInDjango60Warning)\n+    def test_positional_arguments(self):\n+        c = BaseConstraint(\"name\", \"custom %(name)s message\")\n+        self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n+\n \n class CheckConstraintTests(TestCase):\n     def test_eq(self):\n",
  "problem_statement": "Make BaseConstraint arguments keyword-only\nDescription\n\t\nAs suggested in ​https://github.com/django/django/pull/16560#pullrequestreview-1305496392\nI think we should change the signature of BaseConstraint to use keyword-only arguments as a separate cleanup \nname and violation_error_message are already keyword-only in all the BaseConstraint subclasses in Django code base.\n",
  "hints_text": "",
  "created_at": "2023-02-20T13:29:57Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_deprecation (constraints.tests.BaseConstraintTests.test_deprecation)\", \"test_name_required (constraints.tests.BaseConstraintTests.test_name_required)\"]",
  "PASS_TO_PASS": "[\"test_constraint_sql (constraints.tests.BaseConstraintTests.test_constraint_sql)\", \"test_contains_expressions (constraints.tests.BaseConstraintTests.test_contains_expressions)\", \"test_create_sql (constraints.tests.BaseConstraintTests.test_create_sql)\", \"test_custom_violation_error_message (constraints.tests.BaseConstraintTests.test_custom_violation_error_message)\", \"test_custom_violation_error_message_clone (constraints.tests.BaseConstraintTests.test_custom_violation_error_message_clone)\", \"test_deconstruction (constraints.tests.BaseConstraintTests.test_deconstruction)\", \"test_default_violation_error_message (constraints.tests.BaseConstraintTests.test_default_violation_error_message)\", \"test_positional_arguments (constraints.tests.BaseConstraintTests.test_positional_arguments)\", \"test_remove_sql (constraints.tests.BaseConstraintTests.test_remove_sql)\", \"test_validate (constraints.tests.BaseConstraintTests.test_validate)\", \"test_abstract_name (constraints.tests.CheckConstraintTests.test_abstract_name)\", \"test_database_constraint (constraints.tests.CheckConstraintTests.test_database_constraint)\", \"test_database_constraint_unicode (constraints.tests.CheckConstraintTests.test_database_constraint_unicode)\", \"test_deconstruction (constraints.tests.CheckConstraintTests.test_deconstruction)\", \"test_eq (constraints.tests.CheckConstraintTests.test_eq)\", \"test_invalid_check_types (constraints.tests.CheckConstraintTests.test_invalid_check_types)\", \"test_name (constraints.tests.CheckConstraintTests.test_name)\", \"test_repr (constraints.tests.CheckConstraintTests.test_repr)\", \"test_validate (constraints.tests.CheckConstraintTests.test_validate)\", \"test_validate_boolean_expressions (constraints.tests.CheckConstraintTests.test_validate_boolean_expressions)\", \"test_validate_nullable_field_with_none (constraints.tests.CheckConstraintTests.test_validate_nullable_field_with_none)\", \"test_validate_rawsql_expressions_noop (constraints.tests.CheckConstraintTests.test_validate_rawsql_expressions_noop)\", \"test_condition_must_be_q (constraints.tests.UniqueConstraintTests.test_condition_must_be_q)\", \"test_database_constraint (constraints.tests.UniqueConstraintTests.test_database_constraint)\", \"test_database_constraint_with_condition (constraints.tests.UniqueConstraintTests.test_database_constraint_with_condition)\", \"test_deconstruction (constraints.tests.UniqueConstraintTests.test_deconstruction)\", \"test_deconstruction_with_condition (constraints.tests.UniqueConstraintTests.test_deconstruction_with_condition)\", \"test_deconstruction_with_deferrable (constraints.tests.UniqueConstraintTests.test_deconstruction_with_deferrable)\", \"test_deconstruction_with_expressions (constraints.tests.UniqueConstraintTests.test_deconstruction_with_expressions)\", \"test_deconstruction_with_include (constraints.tests.UniqueConstraintTests.test_deconstruction_with_include)\", \"test_deconstruction_with_opclasses (constraints.tests.UniqueConstraintTests.test_deconstruction_with_opclasses)\", \"test_deferrable_with_condition (constraints.tests.UniqueConstraintTests.test_deferrable_with_condition)\", \"test_deferrable_with_expressions (constraints.tests.UniqueConstraintTests.test_deferrable_with_expressions)\", \"test_deferrable_with_include (constraints.tests.UniqueConstraintTests.test_deferrable_with_include)\", \"test_deferrable_with_opclasses (constraints.tests.UniqueConstraintTests.test_deferrable_with_opclasses)\", \"test_eq (constraints.tests.UniqueConstraintTests.test_eq)\", \"test_eq_with_condition (constraints.tests.UniqueConstraintTests.test_eq_with_condition)\", \"test_eq_with_deferrable (constraints.tests.UniqueConstraintTests.test_eq_with_deferrable)\", \"test_eq_with_expressions (constraints.tests.UniqueConstraintTests.test_eq_with_expressions)\", \"test_eq_with_include (constraints.tests.UniqueConstraintTests.test_eq_with_include)\", \"test_eq_with_opclasses (constraints.tests.UniqueConstraintTests.test_eq_with_opclasses)\", \"test_expressions_and_fields_mutually_exclusive (constraints.tests.UniqueConstraintTests.test_expressions_and_fields_mutually_exclusive)\", \"test_expressions_with_opclasses (constraints.tests.UniqueConstraintTests.test_expressions_with_opclasses)\", \"test_invalid_defer_argument (constraints.tests.UniqueConstraintTests.test_invalid_defer_argument)\", \"test_invalid_include_argument (constraints.tests.UniqueConstraintTests.test_invalid_include_argument)\", \"test_invalid_opclasses_argument (constraints.tests.UniqueConstraintTests.test_invalid_opclasses_argument)\", \"test_model_validation (constraints.tests.UniqueConstraintTests.test_model_validation)\", \"test_model_validation_constraint_no_code_error (constraints.tests.UniqueConstraintTests.test_model_validation_constraint_no_code_error)\", \"Partial unique constraints are not ignored by\", \"test_name (constraints.tests.UniqueConstraintTests.test_name)\", \"test_opclasses_and_fields_same_length (constraints.tests.UniqueConstraintTests.test_opclasses_and_fields_same_length)\", \"test_repr (constraints.tests.UniqueConstraintTests.test_repr)\", \"test_repr_with_condition (constraints.tests.UniqueConstraintTests.test_repr_with_condition)\", \"test_repr_with_deferrable (constraints.tests.UniqueConstraintTests.test_repr_with_deferrable)\", \"test_repr_with_expressions (constraints.tests.UniqueConstraintTests.test_repr_with_expressions)\", \"test_repr_with_include (constraints.tests.UniqueConstraintTests.test_repr_with_include)\", \"test_repr_with_opclasses (constraints.tests.UniqueConstraintTests.test_repr_with_opclasses)\", \"test_requires_field_or_expression (constraints.tests.UniqueConstraintTests.test_requires_field_or_expression)\", \"test_requires_name (constraints.tests.UniqueConstraintTests.test_requires_name)\", \"test_validate (constraints.tests.UniqueConstraintTests.test_validate)\", \"test_validate_condition (constraints.tests.UniqueConstraintTests.test_validate_condition)\", \"test_validate_expression (constraints.tests.UniqueConstraintTests.test_validate_expression)\", \"test_validate_expression_condition (constraints.tests.UniqueConstraintTests.test_validate_expression_condition)\", \"test_validate_expression_str (constraints.tests.UniqueConstraintTests.test_validate_expression_str)\", \"test_validate_ordered_expression (constraints.tests.UniqueConstraintTests.test_validate_ordered_expression)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.762694",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}