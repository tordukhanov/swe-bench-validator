{
  "repo": "django/django",
  "instance_id": "django__django-13301",
  "base_commit": "61a0ba43cfd4ff66f51a9d73dcd8ed6f6a6d9915",
  "patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -101,14 +101,15 @@ def get_system_username():\n     return result\n \n \n-def get_default_username(check_db=True):\n+def get_default_username(check_db=True, database=DEFAULT_DB_ALIAS):\n     \"\"\"\n     Try to determine the current system user's username to use as a default.\n \n     :param check_db: If ``True``, requires that the username does not match an\n         existing ``auth.User`` (otherwise returns an empty string).\n+    :param database: The database where the unique check will be performed.\n     :returns: The username, or an empty string if no username can be\n-        determined.\n+        determined or the suggested username is already taken.\n     \"\"\"\n     # This file is used in apps.py, it should not trigger models import.\n     from django.contrib.auth import models as auth_app\n@@ -137,7 +138,9 @@ def get_default_username(check_db=True):\n     # Don't return the default username if it is already taken.\n     if check_db and default_username:\n         try:\n-            auth_app.User._default_manager.get(username=default_username)\n+            auth_app.User._default_manager.db_manager(database).get(\n+                username=default_username,\n+            )\n         except auth_app.User.DoesNotExist:\n             pass\n         else:\ndiff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py\n--- a/django/contrib/auth/management/commands/createsuperuser.py\n+++ b/django/contrib/auth/management/commands/createsuperuser.py\n@@ -97,7 +97,7 @@ def handle(self, *args, **options):\n                 fake_user_data = {}\n                 if hasattr(self.stdin, 'isatty') and not self.stdin.isatty():\n                     raise NotRunningInTTYException\n-                default_username = get_default_username()\n+                default_username = get_default_username(database=database)\n                 if username:\n                     error_msg = self._validate_username(username, verbose_field_name, database)\n                     if error_msg:\n",
  "test_patch": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -102,6 +102,7 @@ def test_input_not_found(self):\n \n \n class GetDefaultUsernameTestCase(TestCase):\n+    databases = {'default', 'other'}\n \n     def setUp(self):\n         self.old_get_system_username = management.get_system_username\n@@ -128,6 +129,15 @@ def test_i18n(self):\n         management.get_system_username = lambda: 'J\\xfalia'\n         self.assertEqual(management.get_default_username(), 'julia')\n \n+    def test_with_database(self):\n+        User.objects.create(username='joe')\n+        management.get_system_username = lambda: 'joe'\n+        self.assertEqual(management.get_default_username(), '')\n+        self.assertEqual(management.get_default_username(database='other'), 'joe')\n+\n+        User.objects.using('other').create(username='joe')\n+        self.assertEqual(management.get_default_username(database='other'), '')\n+\n \n @override_settings(AUTH_PASSWORD_VALIDATORS=[\n     {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n@@ -1031,7 +1041,7 @@ class MultiDBCreatesuperuserTestCase(TestCase):\n \n     def test_createsuperuser_command_with_database_option(self):\n         \"\"\"\n-        changepassword --database should operate on the specified DB.\n+        createsuperuser --database should operate on the specified DB.\n         \"\"\"\n         new_io = StringIO()\n         call_command(\n@@ -1047,6 +1057,36 @@ def test_createsuperuser_command_with_database_option(self):\n         user = User.objects.using('other').get(username='joe')\n         self.assertEqual(user.email, 'joe@somewhere.org')\n \n+    def test_createsuperuser_command_suggested_username_with_database_option(self):\n+        default_username = get_default_username(database='other')\n+        qs = User.objects.using('other')\n+\n+        @mock_inputs({'password': 'nopasswd', 'username': '', 'email': ''})\n+        def test_other_create_with_suggested_username(self):\n+            call_command(\n+                'createsuperuser',\n+                interactive=True,\n+                stdin=MockTTY(),\n+                verbosity=0,\n+                database='other',\n+            )\n+            self.assertIs(qs.filter(username=default_username).exists(), True)\n+\n+        test_other_create_with_suggested_username(self)\n+\n+        @mock_inputs({'password': 'nopasswd', 'Username: ': 'other', 'email': ''})\n+        def test_other_no_suggestion(self):\n+            call_command(\n+                'createsuperuser',\n+                interactive=True,\n+                stdin=MockTTY(),\n+                verbosity=0,\n+                database='other',\n+            )\n+            self.assertIs(qs.filter(username='other').exists(), True)\n+\n+        test_other_no_suggestion(self)\n+\n \n class CreatePermissionsTests(TestCase):\n \n",
  "problem_statement": "Default username in createsuperuser command doesn't respect the --database option.\nDescription\n\t\nThe createsuperuser command in interactive mode suggests to leave username blank and use the default name (django.contrib.auth.management.get_default_username). The default name is validated to not be already used by an another user. This validation executes a query on User model using default database and not using the database option passed to the command.\nThis is the problem when you are using multiple databases.\n",
  "hints_text": "Agreed, we should pass database to the get_default_username().\nâ€‹PR",
  "created_at": "2020-08-13T10:29:12Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_with_database (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_createsuperuser_command_suggested_username_with_database_option (auth_tests.test_management.MultiDBCreatesuperuserTestCase)\"]",
  "PASS_TO_PASS": "[\"test_input_not_found (auth_tests.test_management.MockInputTests)\", \"test_actual_implementation (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_existing (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_i18n (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_simple (auth_tests.test_management.GetDefaultUsernameTestCase)\", \"test_that_changepassword_command_with_database_option_uses_given_db (auth_tests.test_management.MultiDBChangepasswordManagementCommandTestCase)\", \"test_createsuperuser_command_with_database_option (auth_tests.test_management.MultiDBCreatesuperuserTestCase)\", \"test_create_permissions_checks_contenttypes_created (auth_tests.test_management.CreatePermissionsTests)\", \"test_default_permissions (auth_tests.test_management.CreatePermissionsTests)\", \"test_permission_with_proxy_content_type_created (auth_tests.test_management.CreatePermissionsTests)\", \"test_unavailable_models (auth_tests.test_management.CreatePermissionsTests)\", \"test_get_pass (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_get_pass_no_input (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_nonexistent_username (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_password_validation (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"The system username is used if --username isn't provided.\", \"Executing the changepassword management command should change joe's password\", \"test_that_changepassword_command_works_with_nonascii_output (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"test_that_max_tries_exits_1 (auth_tests.test_management.ChangepasswordManagementCommandTestCase)\", \"Check the operation of the createsuperuser management command\", \"Creation fails if --username is blank.\", \"test_blank_username_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"createsuperuser uses a default username when one isn't provided.\", \"test_email_in_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username already exists.\", \"call_command() gets username='janet' and interactive=True.\", \"test_fields_with_fk (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_fk_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_and_through (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_fields_with_m2m_interactive_blank (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_ignore_environment_variable_non_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"Creation fails if the username fails validation.\", \"test_keyboard_interrupt (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_no_email_argument (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_non_ascii_verbose_name (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_passing_stdin (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_password_validation (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_password_validation_bypass (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_skip_if_not_in_TTY (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"A superuser can be created when a custom user model is in use\", \"A Custom superuser won't be created when a required field isn't provided\", \"test_swappable_user_username_non_unique (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_usermodel_without_password_interactive (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_required_fields (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validate_password_against_username (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validation_blank_password_entered (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_validation_mismatched_passwords (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\", \"test_verbosity_zero (auth_tests.test_management.CreatesuperuserManagementCommandTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.652267",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}