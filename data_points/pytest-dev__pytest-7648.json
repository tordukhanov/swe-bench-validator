{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7648",
  "base_commit": "d426a79a90351dff0492fbd40404b1256b24f91f",
  "patch": "diff --git a/src/_pytest/deprecated.py b/src/_pytest/deprecated.py\n--- a/src/_pytest/deprecated.py\n+++ b/src/_pytest/deprecated.py\n@@ -84,3 +84,8 @@\n     \"The pytest_warning_captured is deprecated and will be removed in a future release.\\n\"\n     \"Please use pytest_warning_recorded instead.\"\n )\n+\n+FSCOLLECTOR_GETHOOKPROXY_ISINITPATH = PytestDeprecationWarning(\n+    \"The gethookproxy() and isinitpath() methods of FSCollector and Package are deprecated; \"\n+    \"use self.session.gethookproxy() and self.session.isinitpath() instead. \"\n+)\ndiff --git a/src/_pytest/main.py b/src/_pytest/main.py\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -27,6 +27,7 @@\n from _pytest.config import directory_arg\n from _pytest.config import ExitCode\n from _pytest.config import hookimpl\n+from _pytest.config import PytestPluginManager\n from _pytest.config import UsageError\n from _pytest.config.argparsing import Parser\n from _pytest.fixtures import FixtureManager\n@@ -389,6 +390,17 @@ def pytest_collection_modifyitems(items: List[nodes.Item], config: Config) -> No\n         items[:] = remaining\n \n \n+class FSHookProxy:\n+    def __init__(self, pm: PytestPluginManager, remove_mods) -> None:\n+        self.pm = pm\n+        self.remove_mods = remove_mods\n+\n+    def __getattr__(self, name: str):\n+        x = self.pm.subset_hook_caller(name, remove_plugins=self.remove_mods)\n+        self.__dict__[name] = x\n+        return x\n+\n+\n class NoMatch(Exception):\n     \"\"\"Matching cannot locate matching names.\"\"\"\n \n@@ -495,7 +507,20 @@ def isinitpath(self, path: py.path.local) -> bool:\n         return path in self._initialpaths\n \n     def gethookproxy(self, fspath: py.path.local):\n-        return super()._gethookproxy(fspath)\n+        # Check if we have the common case of running\n+        # hooks with all conftest.py files.\n+        pm = self.config.pluginmanager\n+        my_conftestmodules = pm._getconftestmodules(\n+            fspath, self.config.getoption(\"importmode\")\n+        )\n+        remove_mods = pm._conftest_plugins.difference(my_conftestmodules)\n+        if remove_mods:\n+            # One or more conftests are not in use at this fspath.\n+            proxy = FSHookProxy(pm, remove_mods)\n+        else:\n+            # All plugins are active for this fspath.\n+            proxy = self.config.hook\n+        return proxy\n \n     @overload\n     def perform_collect(\ndiff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -25,7 +25,7 @@\n from _pytest.compat import TYPE_CHECKING\n from _pytest.config import Config\n from _pytest.config import ConftestImportFailure\n-from _pytest.config import PytestPluginManager\n+from _pytest.deprecated import FSCOLLECTOR_GETHOOKPROXY_ISINITPATH\n from _pytest.deprecated import NODE_USE_FROM_PARENT\n from _pytest.fixtures import FixtureDef\n from _pytest.fixtures import FixtureLookupError\n@@ -495,17 +495,6 @@ def _check_initialpaths_for_relpath(session, fspath):\n             return fspath.relto(initial_path)\n \n \n-class FSHookProxy:\n-    def __init__(self, pm: PytestPluginManager, remove_mods) -> None:\n-        self.pm = pm\n-        self.remove_mods = remove_mods\n-\n-    def __getattr__(self, name: str):\n-        x = self.pm.subset_hook_caller(name, remove_plugins=self.remove_mods)\n-        self.__dict__[name] = x\n-        return x\n-\n-\n class FSCollector(Collector):\n     def __init__(\n         self,\n@@ -542,42 +531,28 @@ def from_parent(cls, parent, *, fspath, **kw):\n         \"\"\"The public constructor.\"\"\"\n         return super().from_parent(parent=parent, fspath=fspath, **kw)\n \n-    def _gethookproxy(self, fspath: py.path.local):\n-        # Check if we have the common case of running\n-        # hooks with all conftest.py files.\n-        pm = self.config.pluginmanager\n-        my_conftestmodules = pm._getconftestmodules(\n-            fspath, self.config.getoption(\"importmode\")\n-        )\n-        remove_mods = pm._conftest_plugins.difference(my_conftestmodules)\n-        if remove_mods:\n-            # One or more conftests are not in use at this fspath.\n-            proxy = FSHookProxy(pm, remove_mods)\n-        else:\n-            # All plugins are active for this fspath.\n-            proxy = self.config.hook\n-        return proxy\n-\n     def gethookproxy(self, fspath: py.path.local):\n-        raise NotImplementedError()\n+        warnings.warn(FSCOLLECTOR_GETHOOKPROXY_ISINITPATH, stacklevel=2)\n+        return self.session.gethookproxy(fspath)\n+\n+    def isinitpath(self, path: py.path.local) -> bool:\n+        warnings.warn(FSCOLLECTOR_GETHOOKPROXY_ISINITPATH, stacklevel=2)\n+        return self.session.isinitpath(path)\n \n     def _recurse(self, direntry: \"os.DirEntry[str]\") -> bool:\n         if direntry.name == \"__pycache__\":\n             return False\n         path = py.path.local(direntry.path)\n-        ihook = self._gethookproxy(path.dirpath())\n+        ihook = self.session.gethookproxy(path.dirpath())\n         if ihook.pytest_ignore_collect(path=path, config=self.config):\n             return False\n         for pat in self._norecursepatterns:\n             if path.check(fnmatch=pat):\n                 return False\n-        ihook = self._gethookproxy(path)\n+        ihook = self.session.gethookproxy(path)\n         ihook.pytest_collect_directory(path=path, parent=self)\n         return True\n \n-    def isinitpath(self, path: py.path.local) -> bool:\n-        raise NotImplementedError()\n-\n     def _collectfile(\n         self, path: py.path.local, handle_dupes: bool = True\n     ) -> Sequence[Collector]:\n@@ -586,8 +561,8 @@ def _collectfile(\n         ), \"{!r} is not a file (isdir={!r}, exists={!r}, islink={!r})\".format(\n             path, path.isdir(), path.exists(), path.islink()\n         )\n-        ihook = self.gethookproxy(path)\n-        if not self.isinitpath(path):\n+        ihook = self.session.gethookproxy(path)\n+        if not self.session.isinitpath(path):\n             if ihook.pytest_ignore_collect(path=path, config=self.config):\n                 return ()\n \ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -52,6 +52,7 @@\n from _pytest.config import ExitCode\n from _pytest.config import hookimpl\n from _pytest.config.argparsing import Parser\n+from _pytest.deprecated import FSCOLLECTOR_GETHOOKPROXY_ISINITPATH\n from _pytest.deprecated import FUNCARGNAMES\n from _pytest.fixtures import FuncFixtureInfo\n from _pytest.main import Session\n@@ -627,10 +628,12 @@ def setup(self) -> None:\n             self.addfinalizer(func)\n \n     def gethookproxy(self, fspath: py.path.local):\n-        return super()._gethookproxy(fspath)\n+        warnings.warn(FSCOLLECTOR_GETHOOKPROXY_ISINITPATH, stacklevel=2)\n+        return self.session.gethookproxy(fspath)\n \n     def isinitpath(self, path: py.path.local) -> bool:\n-        return path in self.session._initialpaths\n+        warnings.warn(FSCOLLECTOR_GETHOOKPROXY_ISINITPATH, stacklevel=2)\n+        return self.session.isinitpath(path)\n \n     def collect(self) -> Iterable[Union[nodes.Item, nodes.Collector]]:\n         this_path = self.fspath.dirpath()\n",
  "test_patch": "diff --git a/testing/deprecated_test.py b/testing/deprecated_test.py\n--- a/testing/deprecated_test.py\n+++ b/testing/deprecated_test.py\n@@ -1,11 +1,13 @@\n import copy\n import inspect\n+import warnings\n from unittest import mock\n \n import pytest\n from _pytest import deprecated\n from _pytest import nodes\n from _pytest.config import Config\n+from _pytest.pytester import Testdir\n \n \n @pytest.mark.filterwarnings(\"default\")\n@@ -151,3 +153,28 @@ def test_three(): assert 1\n     )\n     result = testdir.runpytest(\"-k\", \"test_two:\", threepass)\n     result.stdout.fnmatch_lines([\"*The `-k 'expr:'` syntax*deprecated*\"])\n+\n+\n+def test_fscollector_gethookproxy_isinitpath(testdir: Testdir) -> None:\n+    module = testdir.getmodulecol(\n+        \"\"\"\n+        def test_foo(): pass\n+        \"\"\",\n+        withinit=True,\n+    )\n+    assert isinstance(module, pytest.Module)\n+    package = module.parent\n+    assert isinstance(package, pytest.Package)\n+\n+    with pytest.warns(pytest.PytestDeprecationWarning, match=\"gethookproxy\"):\n+        package.gethookproxy(testdir.tmpdir)\n+\n+    with pytest.warns(pytest.PytestDeprecationWarning, match=\"isinitpath\"):\n+        package.isinitpath(testdir.tmpdir)\n+\n+    # The methods on Session are *not* deprecated.\n+    session = module.session\n+    with warnings.catch_warnings(record=True) as rec:\n+        session.gethookproxy(testdir.tmpdir)\n+        session.isinitpath(testdir.tmpdir)\n+    assert len(rec) == 0\n",
  "problem_statement": "Since pytest 6.0.0, pylint complains about unimplemented abstract methods in custom collector\nHi, we have implemented a custom pytest collector that takes testcases from YAML files. Starting with pytest 6.0.0, pylint reports the following about that collector:\r\n\r\n```\r\ntests/functiontest/conftest.py:225:0: W0223: Method 'get_closest_marker' is abstract in class 'Node' but is not overridden (abstract-method)\r\ntests/functiontest/conftest.py:225:0: W0223: Method 'gethookproxy' is abstract in class 'FSCollector' but is not overridden (abstract-method)\r\ntests/functiontest/conftest.py:225:0: W0223: Method 'isinitpath' is abstract in class 'FSCollector' but is not overridden (abstract-method)\r\ntests/functiontest/conftest.py:252:0: W0223: Method 'get_closest_marker' is abstract in class 'Node' but is not overridden (abstract-method)\r\n```\r\nThe collector has worked fine for a long time, and it still works fine.\r\n\r\nThe line pylint reports this on is the class definition of a collector class that is based on pytest.File:\r\n\r\n```\r\nclass YamlFile(pytest.File):\r\n\r\n    def collect(self):  # The only method in this class\r\n        . . . \r\n```\r\nThe whole source code is here: https://github.com/pywbem/pywbem/blob/master/tests/functiontest/conftest.py#L225\r\n\r\nVersions:\r\n\r\nPython 3.8.0 (default, Oct 15 2019, 17:49:23). This happens on all Python 3.x versions we used pytest 6.0.1 with (3.5, 3.6, 3.7, 3.8), on macOS and Ubuntu.\r\n\r\npylint 2.4.4\r\nastroid 2.3.3\r\n\r\nplatform linux -- Python 3.8.0, pytest-6.0.1, py-1.9.0, pluggy-0.13.1\r\nplugins: cov-2.10.0, yagot-0.5.0, requests-mock-1.8.0\r\n\r\nPlease let me know in case a collector has to implement these methods.\n",
  "hints_text": "None of these methods are abstract (as in `abc.abstractmethod`) which led to some head scratching, but it seems that pylint considers any method which raises `NotImplementedError` to be abstract.\r\n\r\n`get_closest_marker` is only marked such because we use `raise NotImplementedError()` in `@overload`ed functions. Given how pylint treats these, we can change these to just use `pass  # pragma: no cover` instead. Though ideally pylint would learn to ignore the contents of functions decorated with `@overload`.\r\n\r\nAs for `gethookproxy` and `isinitpath`, they really are abstract in the sense that the `_collectfile()` function provided by `FSCollector` assumes they have been implemented. In the case of your `YamlFile` collector, you don't use `_collectfile` so it ends up not mattering. I suppose it is a less than ideal subclassing design. The `NotImplemented` were added in pytest 6.0.0 by commit be00e12d47c820f0a90d24cd76ada8a0366c5a67 which fixed some internal typing issues.\r\n\r\nI will take a look at resolving this when I get the chance. However we may want to add a quick fix for pytest 6.0.x at least.",
  "created_at": "2020-08-15T08:45:13Z",
  "version": "6.0",
  "FAIL_TO_PASS": "[\"testing/deprecated_test.py::test_fscollector_gethookproxy_isinitpath\"]",
  "PASS_TO_PASS": "[\"testing/deprecated_test.py::test_terminal_reporter_writer_attr\", \"testing/deprecated_test.py::test_node_direct_ctor_warning\", \"testing/deprecated_test.py::test_resultlog_is_deprecated\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_capturelog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_catchlog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_faulthandler]\", \"testing/deprecated_test.py::test_warn_about_imminent_junit_family_default_change[None]\", \"testing/deprecated_test.py::test_warn_about_imminent_junit_family_default_change[legacy]\", \"testing/deprecated_test.py::test_warn_about_imminent_junit_family_default_change[xunit2]\"]",
  "environment_setup_commit": "634cde9506eb1f48dec3ec77974ee8dc952207c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.939361",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}