{
  "repo": "django/django",
  "instance_id": "django__django-14779",
  "base_commit": "231de683d86374c2b74da2185efc6ddfb5eb3341",
  "patch": "diff --git a/django/template/library.py b/django/template/library.py\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -243,7 +243,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n     keyword arguments.\n     \"\"\"\n     if takes_context:\n-        if params[0] == 'context':\n+        if params and params[0] == 'context':\n             params = params[1:]\n         else:\n             raise TemplateSyntaxError(\n",
  "test_patch": "diff --git a/tests/template_tests/templatetags/custom.py b/tests/template_tests/templatetags/custom.py\n--- a/tests/template_tests/templatetags/custom.py\n+++ b/tests/template_tests/templatetags/custom.py\n@@ -150,6 +150,17 @@ def simple_tag_without_context_parameter(arg):\n simple_tag_without_context_parameter.anything = \"Expected simple_tag_without_context_parameter __dict__\"\n \n \n+@register.simple_tag(takes_context=True)\n+def simple_tag_takes_context_without_params():\n+    \"\"\"Expected simple_tag_takes_context_without_params __doc__\"\"\"\n+    return 'Expected result'\n+\n+\n+simple_tag_takes_context_without_params.anything = (\n+    'Expected simple_tag_takes_context_without_params __dict__'\n+)\n+\n+\n @register.simple_tag(takes_context=True)\n def escape_naive(context):\n     \"\"\"A tag that doesn't even think about escaping issues\"\"\"\ndiff --git a/tests/template_tests/templatetags/inclusion.py b/tests/template_tests/templatetags/inclusion.py\n--- a/tests/template_tests/templatetags/inclusion.py\n+++ b/tests/template_tests/templatetags/inclusion.py\n@@ -242,6 +242,17 @@ def inclusion_tag_without_context_parameter(arg):\n inclusion_tag_without_context_parameter.anything = \"Expected inclusion_tag_without_context_parameter __dict__\"\n \n \n+@register.inclusion_tag('inclusion.html', takes_context=True)\n+def inclusion_tag_takes_context_without_params():\n+    \"\"\"Expected inclusion_tag_takes_context_without_params __doc__\"\"\"\n+    return {}\n+\n+\n+inclusion_tag_takes_context_without_params.anything = (\n+    'Expected inclusion_tag_takes_context_without_params __dict__'\n+)\n+\n+\n @register.inclusion_tag('inclusion_extends1.html')\n def inclusion_extends1():\n     return {}\ndiff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -169,6 +169,16 @@ def test_simple_tag_missing_context(self):\n         with self.assertRaisesMessage(TemplateSyntaxError, msg):\n             self.engine.from_string('{% load custom %}{% simple_tag_without_context_parameter 123 %}')\n \n+    def test_simple_tag_missing_context_no_params(self):\n+        msg = (\n+            \"'simple_tag_takes_context_without_params' is decorated with \"\n+            \"takes_context=True so it must have a first argument of 'context'\"\n+        )\n+        with self.assertRaisesMessage(TemplateSyntaxError, msg):\n+            self.engine.from_string(\n+                '{% load custom %}{% simple_tag_takes_context_without_params %}'\n+            )\n+\n \n class InclusionTagTests(TagTestCase):\n \n@@ -256,6 +266,16 @@ def test_include_tag_missing_context(self):\n         with self.assertRaisesMessage(TemplateSyntaxError, msg):\n             self.engine.from_string('{% load inclusion %}{% inclusion_tag_without_context_parameter 123 %}')\n \n+    def test_include_tag_missing_context_no_params(self):\n+        msg = (\n+            \"'inclusion_tag_takes_context_without_params' is decorated with \"\n+            \"takes_context=True so it must have a first argument of 'context'\"\n+        )\n+        with self.assertRaisesMessage(TemplateSyntaxError, msg):\n+            self.engine.from_string(\n+                '{% load inclusion %}{% inclusion_tag_takes_context_without_params %}'\n+            )\n+\n     def test_inclusion_tags_from_template(self):\n         c = Context({'value': 42})\n \n",
  "problem_statement": "Custom tags with missing context param and no other params throw an unhelpful IndexError\nDescription\n\t\nGiven a simple_tag or inclusion_tag with takes_context=True, where the context param has been forgotten:\n@register.simple_tag(takes_context=True)\ndef simple_tag_without_context_parameter(arg):\n\treturn \"Expected result\"\nthe parse_bits function checks for this case and throws an informative TemplateSyntaxError. However, in the case that the tag takes no other parameters:\n@register.simple_tag(takes_context=True)\ndef simple_tag_no_params_without_context_parameter():\n\treturn \"Expected result\"\nthe checking code fails at the point where it looks at params[0], throwing an opaque IndexError instead.\nTraceback (most recent call last):\n File \"/Users/matthew/Development/tbx/wagtail/devscript/libs/django/tests/template_tests/test_custom.py\", line 179, in test_simple_tag_no_params_missing_context\n\tself.engine.from_string('{% load custom %}{% simple_tag_no_params_without_context_parameter %}')\n File \"/Users/matthew/Development/tbx/wagtail/devscript/libs/django/django/template/engine.py\", line 156, in from_string\n\treturn Template(template_code, engine=self)\n File \"/Users/matthew/Development/tbx/wagtail/devscript/libs/django/django/template/base.py\", line 155, in __init__\n\tself.nodelist = self.compile_nodelist()\n File \"/Users/matthew/Development/tbx/wagtail/devscript/libs/django/django/template/base.py\", line 199, in compile_nodelist\n\treturn parser.parse()\n File \"/Users/matthew/Development/tbx/wagtail/devscript/libs/django/django/template/base.py\", line 502, in parse\n\traise self.error(token, e)\n File \"/Users/matthew/Development/tbx/wagtail/devscript/libs/django/django/template/base.py\", line 500, in parse\n\tcompiled_result = compile_func(self, token)\n File \"/Users/matthew/Development/tbx/wagtail/devscript/libs/django/django/template/library.py\", line 119, in compile_func\n\targs, kwargs = parse_bits(\n File \"/Users/matthew/Development/tbx/wagtail/devscript/libs/django/django/template/library.py\", line 246, in parse_bits\n\tif params[0] == 'context':\nIndexError: list index out of range\n(PR to follow)\n",
  "hints_text": "",
  "created_at": "2021-08-18T21:32:42Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_simple_tag_missing_context_no_params (template_tests.test_custom.SimpleTagTests)\", \"test_include_tag_missing_context_no_params (template_tests.test_custom.InclusionTagTests)\"]",
  "PASS_TO_PASS": "[\"test_decorated_filter (template_tests.test_custom.CustomFilterTests)\", \"test_filter (template_tests.test_custom.CustomFilterTests)\", \"test_simple_tag_errors (template_tests.test_custom.SimpleTagTests)\", \"test_simple_tag_escaping_autoescape_off (template_tests.test_custom.SimpleTagTests)\", \"test_simple_tag_explicit_escaping (template_tests.test_custom.SimpleTagTests)\", \"test_simple_tag_format_html_escaping (template_tests.test_custom.SimpleTagTests)\", \"test_simple_tag_missing_context (template_tests.test_custom.SimpleTagTests)\", \"test_simple_tag_naive_escaping (template_tests.test_custom.SimpleTagTests)\", \"test_simple_tag_registration (template_tests.test_custom.SimpleTagTests)\", \"test_simple_tags (template_tests.test_custom.SimpleTagTests)\", \"Inclusion tag passes down `use_l10n` of context to the\", \"test_include_tag_missing_context (template_tests.test_custom.InclusionTagTests)\", \"test_inclusion_tag_errors (template_tests.test_custom.InclusionTagTests)\", \"test_inclusion_tag_registration (template_tests.test_custom.InclusionTagTests)\", \"test_inclusion_tags (template_tests.test_custom.InclusionTagTests)\", \"test_inclusion_tags_from_template (template_tests.test_custom.InclusionTagTests)\", \"#23441 -- InclusionNode shouldn't modify its nodelist at render time.\", \"#24555 -- InclusionNode should push and pop the render_context stack\", \"test_load_annotated_function (template_tests.test_custom.TemplateTagLoadingTests)\", \"test_load_error (template_tests.test_custom.TemplateTagLoadingTests)\", \"test_load_error_egg (template_tests.test_custom.TemplateTagLoadingTests)\", \"test_load_working_egg (template_tests.test_custom.TemplateTagLoadingTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.703080",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}