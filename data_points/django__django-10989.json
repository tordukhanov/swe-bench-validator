{
  "repo": "django/django",
  "instance_id": "django__django-10989",
  "base_commit": "f63811f4813f0e0439e140a97eeba18a5017e858",
  "patch": "diff --git a/django/contrib/gis/utils/layermapping.py b/django/contrib/gis/utils/layermapping.py\n--- a/django/contrib/gis/utils/layermapping.py\n+++ b/django/contrib/gis/utils/layermapping.py\n@@ -596,7 +596,7 @@ def _save(feat_range=default_range, num_feat=0, num_saved=0):\n \n                 # Printing progress information, if requested.\n                 if progress and num_feat % progress_interval == 0:\n-                    stream.write('Processed %d features, saved %d …\\n' % (num_feat, num_saved))\n+                    stream.write('Processed %d features, saved %d ...\\n' % (num_feat, num_saved))\n \n             # Only used for status output purposes -- incremental saving uses the\n             # values returned here.\ndiff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -226,7 +226,7 @@ def find_fixtures(self, fixture_label):\n         ser_fmts = serializers.get_public_serializer_formats() if ser_fmt is None else [ser_fmt]\n \n         if self.verbosity >= 2:\n-            self.stdout.write(\"Loading '%s' fixtures…\" % fixture_name)\n+            self.stdout.write(\"Loading '%s' fixtures...\" % fixture_name)\n \n         if os.path.isabs(fixture_name):\n             fixture_dirs = [os.path.dirname(fixture_name)]\n@@ -247,7 +247,7 @@ def find_fixtures(self, fixture_label):\n         fixture_files = []\n         for fixture_dir in fixture_dirs:\n             if self.verbosity >= 2:\n-                self.stdout.write(\"Checking %s for fixtures…\" % humanize(fixture_dir))\n+                self.stdout.write(\"Checking %s for fixtures...\" % humanize(fixture_dir))\n             fixture_files_in_dir = []\n             path = os.path.join(fixture_dir, fixture_name)\n             for candidate in glob.iglob(glob.escape(path) + '*'):\ndiff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -262,7 +262,7 @@ def migration_progress_callback(self, action, migration=None, fake=False):\n             if action == \"apply_start\":\n                 if compute_time:\n                     self.start = time.time()\n-                self.stdout.write(\"  Applying %s…\" % migration, ending=\"\")\n+                self.stdout.write(\"  Applying %s...\" % migration, ending=\"\")\n                 self.stdout.flush()\n             elif action == \"apply_success\":\n                 elapsed = \" (%.3fs)\" % (time.time() - self.start) if compute_time else \"\"\n@@ -273,7 +273,7 @@ def migration_progress_callback(self, action, migration=None, fake=False):\n             elif action == \"unapply_start\":\n                 if compute_time:\n                     self.start = time.time()\n-                self.stdout.write(\"  Unapplying %s…\" % migration, ending=\"\")\n+                self.stdout.write(\"  Unapplying %s...\" % migration, ending=\"\")\n                 self.stdout.flush()\n             elif action == \"unapply_success\":\n                 elapsed = \" (%.3fs)\" % (time.time() - self.start) if compute_time else \"\"\n@@ -284,7 +284,7 @@ def migration_progress_callback(self, action, migration=None, fake=False):\n             elif action == \"render_start\":\n                 if compute_time:\n                     self.start = time.time()\n-                self.stdout.write(\"  Rendering model states…\", ending=\"\")\n+                self.stdout.write(\"  Rendering model states...\", ending=\"\")\n                 self.stdout.flush()\n             elif action == \"render_success\":\n                 elapsed = \" (%.3fs)\" % (time.time() - self.start) if compute_time else \"\"\n@@ -320,7 +320,7 @@ def model_installed(model):\n \n         # Create the tables for each model\n         if self.verbosity >= 1:\n-            self.stdout.write(\"  Creating tables…\\n\")\n+            self.stdout.write(\"  Creating tables...\\n\")\n         with connection.schema_editor() as editor:\n             for app_name, model_list in manifest.items():\n                 for model in model_list:\n@@ -337,7 +337,7 @@ def model_installed(model):\n \n             # Deferred SQL is executed when exiting the editor's context.\n             if self.verbosity >= 1:\n-                self.stdout.write(\"    Running deferred SQL…\\n\")\n+                self.stdout.write(\"    Running deferred SQL...\\n\")\n \n     @staticmethod\n     def describe_operation(operation, backwards):\ndiff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -113,7 +113,7 @@ def inner_run(self, *args, **options):\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \n-        self.stdout.write(\"Performing system checks…\\n\\n\")\n+        self.stdout.write(\"Performing system checks...\\n\\n\")\n         self.check(display_num_errors=True)\n         # Need to check migrations here, so can't use the\n         # requires_migrations_check attribute.\ndiff --git a/django/core/management/commands/showmigrations.py b/django/core/management/commands/showmigrations.py\n--- a/django/core/management/commands/showmigrations.py\n+++ b/django/core/management/commands/showmigrations.py\n@@ -124,7 +124,7 @@ def print_deps(node):\n             for parent in sorted(node.parents):\n                 out.append(\"%s.%s\" % parent.key)\n             if out:\n-                return \" … (%s)\" % \", \".join(out)\n+                return \" ... (%s)\" % \", \".join(out)\n             return \"\"\n \n         for node in plan:\ndiff --git a/django/core/management/commands/squashmigrations.py b/django/core/management/commands/squashmigrations.py\n--- a/django/core/management/commands/squashmigrations.py\n+++ b/django/core/management/commands/squashmigrations.py\n@@ -139,7 +139,7 @@ def handle(self, **options):\n             new_operations = operations\n         else:\n             if self.verbosity > 0:\n-                self.stdout.write(self.style.MIGRATE_HEADING(\"Optimizing…\"))\n+                self.stdout.write(self.style.MIGRATE_HEADING(\"Optimizing...\"))\n \n             optimizer = MigrationOptimizer()\n             new_operations = optimizer.optimize(operations, migration.app_label)\ndiff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -45,7 +45,7 @@ def create_test_db(self, verbosity=1, autoclobber=False, serialize=True, keepdb=\n             if keepdb:\n                 action = \"Using existing\"\n \n-            self.log('%s test database for alias %s…' % (\n+            self.log('%s test database for alias %s...' % (\n                 action,\n                 self._get_database_display_str(verbosity, test_database_name),\n             ))\n@@ -182,7 +182,7 @@ def _create_test_db(self, verbosity, autoclobber, keepdb=False):\n                 if autoclobber or confirm == 'yes':\n                     try:\n                         if verbosity >= 1:\n-                            self.log('Destroying old test database for alias %s…' % (\n+                            self.log('Destroying old test database for alias %s...' % (\n                                 self._get_database_display_str(verbosity, test_database_name),\n                             ))\n                         cursor.execute('DROP DATABASE %(dbname)s' % test_db_params)\n@@ -206,7 +206,7 @@ def clone_test_db(self, suffix, verbosity=1, autoclobber=False, keepdb=False):\n             action = 'Cloning test database'\n             if keepdb:\n                 action = 'Using existing clone'\n-            self.log('%s for alias %s…' % (\n+            self.log('%s for alias %s...' % (\n                 action,\n                 self._get_database_display_str(verbosity, source_database_name),\n             ))\n@@ -248,7 +248,7 @@ def destroy_test_db(self, old_database_name=None, verbosity=1, keepdb=False, suf\n             action = 'Destroying'\n             if keepdb:\n                 action = 'Preserving'\n-            self.log('%s test database for alias %s…' % (\n+            self.log('%s test database for alias %s...' % (\n                 action,\n                 self._get_database_display_str(verbosity, test_database_name),\n             ))\ndiff --git a/django/db/backends/mysql/creation.py b/django/db/backends/mysql/creation.py\n--- a/django/db/backends/mysql/creation.py\n+++ b/django/db/backends/mysql/creation.py\n@@ -44,7 +44,7 @@ def _clone_test_db(self, suffix, verbosity, keepdb=False):\n                     return\n                 try:\n                     if verbosity >= 1:\n-                        self.log('Destroying old test database for alias %s…' % (\n+                        self.log('Destroying old test database for alias %s...' % (\n                             self._get_database_display_str(verbosity, target_database_name),\n                         ))\n                     cursor.execute('DROP DATABASE %(dbname)s' % test_db_params)\ndiff --git a/django/db/backends/oracle/creation.py b/django/db/backends/oracle/creation.py\n--- a/django/db/backends/oracle/creation.py\n+++ b/django/db/backends/oracle/creation.py\n@@ -44,7 +44,7 @@ def _create_test_db(self, verbosity=1, autoclobber=False, keepdb=False):\n                             \"Type 'yes' to delete it, or 'no' to cancel: \" % parameters['user'])\n                     if autoclobber or confirm == 'yes':\n                         if verbosity >= 1:\n-                            self.log(\"Destroying old test database for alias '%s'…\" % self.connection.alias)\n+                            self.log(\"Destroying old test database for alias '%s'...\" % self.connection.alias)\n                         try:\n                             self._execute_test_db_destruction(cursor, parameters, verbosity)\n                         except DatabaseError as e:\n@@ -69,7 +69,7 @@ def _create_test_db(self, verbosity=1, autoclobber=False, keepdb=False):\n \n             if self._test_user_create():\n                 if verbosity >= 1:\n-                    self.log('Creating test user…')\n+                    self.log('Creating test user...')\n                 try:\n                     self._create_test_user(cursor, parameters, verbosity, keepdb)\n                 except Exception as e:\n@@ -84,10 +84,10 @@ def _create_test_db(self, verbosity=1, autoclobber=False, keepdb=False):\n                     if autoclobber or confirm == 'yes':\n                         try:\n                             if verbosity >= 1:\n-                                self.log('Destroying old test user…')\n+                                self.log('Destroying old test user...')\n                             self._destroy_test_user(cursor, parameters, verbosity)\n                             if verbosity >= 1:\n-                                self.log('Creating test user…')\n+                                self.log('Creating test user...')\n                             self._create_test_user(cursor, parameters, verbosity, keepdb)\n                         except Exception as e:\n                             self.log('Got an error recreating the test user: %s' % e)\n@@ -143,14 +143,14 @@ def _handle_objects_preventing_db_destruction(self, cursor, parameters, verbosit\n             if autoclobber or confirm == 'yes':\n                 try:\n                     if verbosity >= 1:\n-                        self.log('Destroying old test user…')\n+                        self.log('Destroying old test user...')\n                     self._destroy_test_user(cursor, parameters, verbosity)\n                 except Exception as e:\n                     self.log('Got an error destroying the test user: %s' % e)\n                     sys.exit(2)\n                 try:\n                     if verbosity >= 1:\n-                        self.log(\"Destroying old test database for alias '%s'…\" % self.connection.alias)\n+                        self.log(\"Destroying old test database for alias '%s'...\" % self.connection.alias)\n                     self._execute_test_db_destruction(cursor, parameters, verbosity)\n                 except Exception as e:\n                     self.log('Got an error destroying the test database: %s' % e)\n@@ -176,11 +176,11 @@ def _destroy_test_db(self, test_database_name, verbosity=1):\n         with self._maindb_connection.cursor() as cursor:\n             if self._test_user_create():\n                 if verbosity >= 1:\n-                    self.log('Destroying test user…')\n+                    self.log('Destroying test user...')\n                 self._destroy_test_user(cursor, parameters, verbosity)\n             if self._test_database_create():\n                 if verbosity >= 1:\n-                    self.log('Destroying test database tables…')\n+                    self.log('Destroying test database tables...')\n                 self._execute_test_db_destruction(cursor, parameters, verbosity)\n         self._maindb_connection.close()\n \n@@ -262,7 +262,7 @@ def _execute_test_db_destruction(self, cursor, parameters, verbosity):\n     def _destroy_test_user(self, cursor, parameters, verbosity):\n         if verbosity >= 2:\n             self.log('_destroy_test_user(): user=%s' % parameters['user'])\n-            self.log('Be patient. This can take some time…')\n+            self.log('Be patient. This can take some time...')\n         statements = [\n             'DROP USER %(user)s CASCADE',\n         ]\ndiff --git a/django/db/backends/postgresql/creation.py b/django/db/backends/postgresql/creation.py\n--- a/django/db/backends/postgresql/creation.py\n+++ b/django/db/backends/postgresql/creation.py\n@@ -67,7 +67,7 @@ def _clone_test_db(self, suffix, verbosity, keepdb=False):\n             except Exception:\n                 try:\n                     if verbosity >= 1:\n-                        self.log('Destroying old test database for alias %s…' % (\n+                        self.log('Destroying old test database for alias %s...' % (\n                             self._get_database_display_str(verbosity, target_database_name),\n                         ))\n                     cursor.execute('DROP DATABASE %(dbname)s' % test_db_params)\ndiff --git a/django/db/backends/sqlite3/creation.py b/django/db/backends/sqlite3/creation.py\n--- a/django/db/backends/sqlite3/creation.py\n+++ b/django/db/backends/sqlite3/creation.py\n@@ -25,7 +25,7 @@ def _create_test_db(self, verbosity, autoclobber, keepdb=False):\n         if not self.is_in_memory_db(test_database_name):\n             # Erase the old test database\n             if verbosity >= 1:\n-                self.log('Destroying old test database for alias %s…' % (\n+                self.log('Destroying old test database for alias %s...' % (\n                     self._get_database_display_str(verbosity, test_database_name),\n                 ))\n             if os.access(test_database_name, os.F_OK):\n@@ -64,7 +64,7 @@ def _clone_test_db(self, suffix, verbosity, keepdb=False):\n                 if keepdb:\n                     return\n                 if verbosity >= 1:\n-                    self.log('Destroying old test database for alias %s…' % (\n+                    self.log('Destroying old test database for alias %s...' % (\n                         self._get_database_display_str(verbosity, target_database_name),\n                     ))\n                 try:\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -248,7 +248,7 @@ def __setstate__(self, state):\n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\n         if len(data) > REPR_OUTPUT_SIZE:\n-            data[-1] = \"…(remaining elements truncated)…\"\n+            data[-1] = \"...(remaining elements truncated)...\"\n         return '<%s %r>' % (self.__class__.__name__, data)\n \n     def __len__(self):\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -597,7 +597,7 @@ def combine(self, rhs, connector):\n             # really make sense (or return consistent value sets). Not worth\n             # the extra complexity when you can write a real query instead.\n             if self.extra and rhs.extra:\n-                raise ValueError(\"When merging querysets using 'or', you cannot have extra(select=…) on both sides.\")\n+                raise ValueError(\"When merging querysets using 'or', you cannot have extra(select=...) on both sides.\")\n         self.extra.update(rhs.extra)\n         extra_select_mask = set()\n         if self.extra_select_mask is not None:\n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -41,7 +41,7 @@ def test_migrate(self):\n         call_command('migrate', 'migrations', '0001', verbosity=1, stdout=stdout, no_color=True)\n         stdout = stdout.getvalue()\n         self.assertIn('Target specific migration: 0001_initial, from migrations', stdout)\n-        self.assertIn('Applying migrations.0001_initial… OK', stdout)\n+        self.assertIn('Applying migrations.0001_initial... OK', stdout)\n         # The correct tables exist\n         self.assertTableExists(\"migrations_author\")\n         self.assertTableExists(\"migrations_tribble\")\n@@ -57,7 +57,7 @@ def test_migrate(self):\n         call_command('migrate', 'migrations', 'zero', verbosity=1, stdout=stdout, no_color=True)\n         stdout = stdout.getvalue()\n         self.assertIn('Unapply all migrations: migrations', stdout)\n-        self.assertIn('Unapplying migrations.0002_second… OK', stdout)\n+        self.assertIn('Unapplying migrations.0002_second... OK', stdout)\n         # Tables are gone\n         self.assertTableNotExists(\"migrations_author\")\n         self.assertTableNotExists(\"migrations_tribble\")\n@@ -157,7 +157,7 @@ def test_migrate_fake_initial(self):\n             call_command(\"migrate\", \"migrations\", \"0001\", fake_initial=True, stdout=out, verbosity=1)\n             call_command(\"migrate\", \"migrations\", \"0001\", fake_initial=True, verbosity=0, database=\"other\")\n         self.assertIn(\n-            \"migrations.0001_initial… faked\",\n+            \"migrations.0001_initial... faked\",\n             out.getvalue().lower()\n         )\n         # Run migrations all the way\n@@ -208,8 +208,8 @@ def test_migrate_fake_split_initial(self):\n         with mock.patch('django.core.management.color.supports_color', lambda *args: False):\n             call_command(\"migrate\", \"migrations\", \"0002\", fake_initial=True, stdout=out, verbosity=1)\n         value = out.getvalue().lower()\n-        self.assertIn(\"migrations.0001_initial… faked\", value)\n-        self.assertIn(\"migrations.0002_second… faked\", value)\n+        self.assertIn(\"migrations.0001_initial... faked\", value)\n+        self.assertIn(\"migrations.0002_second... faked\", value)\n         # Fake an apply\n         call_command(\"migrate\", \"migrations\", fake=True, verbosity=0)\n         # Unmigrate everything\n@@ -271,8 +271,8 @@ def test_showmigrations_plan(self):\n         call_command(\"showmigrations\", format='plan', stdout=out, verbosity=2)\n         self.assertEqual(\n             \"[ ]  migrations.0001_initial\\n\"\n-            \"[ ]  migrations.0003_third … (migrations.0001_initial)\\n\"\n-            \"[ ]  migrations.0002_second … (migrations.0001_initial, migrations.0003_third)\\n\",\n+            \"[ ]  migrations.0003_third ... (migrations.0001_initial)\\n\"\n+            \"[ ]  migrations.0002_second ... (migrations.0001_initial, migrations.0003_third)\\n\",\n             out.getvalue().lower()\n         )\n         call_command(\"migrate\", \"migrations\", \"0003\", verbosity=0)\n@@ -290,8 +290,8 @@ def test_showmigrations_plan(self):\n         call_command(\"showmigrations\", format='plan', stdout=out, verbosity=2)\n         self.assertEqual(\n             \"[x]  migrations.0001_initial\\n\"\n-            \"[x]  migrations.0003_third … (migrations.0001_initial)\\n\"\n-            \"[ ]  migrations.0002_second … (migrations.0001_initial, migrations.0003_third)\\n\",\n+            \"[x]  migrations.0003_third ... (migrations.0001_initial)\\n\"\n+            \"[ ]  migrations.0002_second ... (migrations.0001_initial, migrations.0003_third)\\n\",\n             out.getvalue().lower()\n         )\n \n@@ -410,10 +410,10 @@ def test_showmigrations_plan_squashed(self):\n         call_command(\"showmigrations\", format='plan', stdout=out, verbosity=2)\n         self.assertEqual(\n             \"[ ]  migrations.1_auto\\n\"\n-            \"[ ]  migrations.2_auto … (migrations.1_auto)\\n\"\n-            \"[ ]  migrations.3_squashed_5 … (migrations.2_auto)\\n\"\n-            \"[ ]  migrations.6_auto … (migrations.3_squashed_5)\\n\"\n-            \"[ ]  migrations.7_auto … (migrations.6_auto)\\n\",\n+            \"[ ]  migrations.2_auto ... (migrations.1_auto)\\n\"\n+            \"[ ]  migrations.3_squashed_5 ... (migrations.2_auto)\\n\"\n+            \"[ ]  migrations.6_auto ... (migrations.3_squashed_5)\\n\"\n+            \"[ ]  migrations.7_auto ... (migrations.6_auto)\\n\",\n             out.getvalue().lower()\n         )\n \n@@ -434,10 +434,10 @@ def test_showmigrations_plan_squashed(self):\n         call_command(\"showmigrations\", format='plan', stdout=out, verbosity=2)\n         self.assertEqual(\n             \"[x]  migrations.1_auto\\n\"\n-            \"[x]  migrations.2_auto … (migrations.1_auto)\\n\"\n-            \"[x]  migrations.3_squashed_5 … (migrations.2_auto)\\n\"\n-            \"[ ]  migrations.6_auto … (migrations.3_squashed_5)\\n\"\n-            \"[ ]  migrations.7_auto … (migrations.6_auto)\\n\",\n+            \"[x]  migrations.2_auto ... (migrations.1_auto)\\n\"\n+            \"[x]  migrations.3_squashed_5 ... (migrations.2_auto)\\n\"\n+            \"[ ]  migrations.6_auto ... (migrations.3_squashed_5)\\n\"\n+            \"[ ]  migrations.7_auto ... (migrations.6_auto)\\n\",\n             out.getvalue().lower()\n         )\n \n@@ -659,7 +659,7 @@ def test_migrate_syncdb_deferred_sql_executed_with_schemaeditor(self):\n             self.assertGreater(len(execute.mock_calls), 2)\n         stdout = stdout.getvalue()\n         self.assertIn('Synchronize unmigrated apps: unmigrated_app_syncdb', stdout)\n-        self.assertIn('Creating tables…', stdout)\n+        self.assertIn('Creating tables...', stdout)\n         table_name = truncate_name('unmigrated_app_syncdb_classroom', connection.ops.max_name_length())\n         self.assertIn('Creating table %s' % table_name, stdout)\n \n",
  "problem_statement": "Ellipses in output strings cause crashes on Windows\nDescription\n\t \n\t\t(last modified by Dan Davis)\n\t \nBy default, Windows terminals start with code page 437, which is roughly equivalent to ASCII. While working on #30178, I discovered that this causes the following traceback:\n(mplusmon) λ manage.py runserver\nWatchman unavailable: pywatchman not installed.\nWatching for file changes with StatReloader\nException in thread Thread-1:\nTraceback (most recent call last):\n File \"c:\\tools\\python\\3.5\\Lib\\threading.py\", line 914, in _bootstrap_inner\n\tself.run()\n File \"c:\\tools\\python\\3.5\\Lib\\threading.py\", line 862, in run\n\tself._target(*self._args, **self._kwargs)\n File \"C:\\Users\\davisda4\\PythonEnvs\\mplusmon\\lib\\site-packages\\django\\utils\\autoreload.py\", line 54, in wrapper\n\tfn(*args, **kwargs)\n File \"C:\\Users\\davisda4\\PythonEnvs\\mplusmon\\lib\\site-packages\\django\\core\\management\\commands\\runserver.py\", line 116, in inner_run\n\tself.stdout.write(\"Performing system checks\\u2026\\n\\n\")\n File \"C:\\Users\\davisda4\\PythonEnvs\\mplusmon\\lib\\site-packages\\django\\core\\management\\base.py\", line 145, in write\n\tself._out.write(style_func(msg))\n File \"C:\\Users\\davisda4\\PythonEnvs\\mplusmon\\lib\\encodings\\cp437.py\", line 19, in encode\n\treturn codecs.charmap_encode(input,self.errors,encoding_map)[0]\nUnicodeEncodeError: 'charmap' codec can't encode character '\\u2026' in position 24: character maps to <undefined>\nA workaround is to change the code page to UTF-8, as follows:\nchcp 65001\nThis appears to be a new issue relative to Django 2.1.7, because the problem did not occur there.\tI'll track down wherever someone entered the horizontal elipsis character rather than \"...\" into the code, because this ought to be easy enough to fix. Whomever did this was probably not even aware of it and it has worked well enough since almost all Django developers will use MacOS or Linux.\n",
  "hints_text": "",
  "created_at": "2019-02-12T22:59:45Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_migrate (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_initial_false (migrations.test_commands.MigrateTests)\", \"Tests migrate --plan output.\", \"test_migrate_record_replaced (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)\", \"test_showmigrations_list (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_optimizes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_conflict_exit (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)\", \"Migration directories without an __init__.py file are allowed.\", \"test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_ambigious_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate_conflict_exit (migrations.test_commands.MigrateTests)\", \"test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)\", \"test_migrate_record_squashed (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_label (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.554779",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}