{
  "repo": "django/django",
  "instance_id": "django__django-11085",
  "base_commit": "f976ab1b117574db78d884c94e549a6b8e4c9f9b",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -84,9 +84,12 @@ def __new__(cls, name, bases, attrs, **kwargs):\n         # Pass all attrs without a (Django-specific) contribute_to_class()\n         # method to type.__new__() so that they're properly initialized\n         # (i.e. __set_name__()).\n+        contributable_attrs = {}\n         for obj_name, obj in list(attrs.items()):\n-            if not _has_contribute_to_class(obj):\n-                new_attrs[obj_name] = attrs.pop(obj_name)\n+            if _has_contribute_to_class(obj):\n+                contributable_attrs[obj_name] = obj\n+            else:\n+                new_attrs[obj_name] = obj\n         new_class = super_new(cls, name, bases, new_attrs, **kwargs)\n \n         abstract = getattr(attr_meta, 'abstract', False)\n@@ -146,8 +149,9 @@ def __new__(cls, name, bases, attrs, **kwargs):\n         if is_proxy and base_meta and base_meta.swapped:\n             raise TypeError(\"%s cannot proxy the swapped model '%s'.\" % (name, base_meta.swapped))\n \n-        # Add all attributes to the class.\n-        for obj_name, obj in attrs.items():\n+        # Add remaining attributes (those with a contribute_to_class() method)\n+        # to the class.\n+        for obj_name, obj in contributable_attrs.items():\n             new_class.add_to_class(obj_name, obj)\n \n         # All the fields of any type declared on this model\n",
  "test_patch": "diff --git a/tests/model_regress/tests.py b/tests/model_regress/tests.py\n--- a/tests/model_regress/tests.py\n+++ b/tests/model_regress/tests.py\n@@ -2,9 +2,10 @@\n from operator import attrgetter\n \n from django.core.exceptions import ValidationError\n-from django.db import router\n+from django.db import models, router\n from django.db.models.sql import InsertQuery\n from django.test import TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n from django.utils.timezone import get_fixed_timezone\n \n from .models import (\n@@ -217,6 +218,23 @@ def test_chained_fks(self):\n         m3 = Model3.objects.get(model2=1000)\n         m3.model2\n \n+    @isolate_apps('model_regress')\n+    def test_metaclass_can_access_attribute_dict(self):\n+        \"\"\"\n+        Model metaclasses have access to the class attribute dict in\n+        __init__() (#30254).\n+        \"\"\"\n+        class HorseBase(models.base.ModelBase):\n+            def __init__(cls, name, bases, attrs):\n+                super(HorseBase, cls).__init__(name, bases, attrs)\n+                cls.horns = (1 if 'magic' in attrs else 0)\n+\n+        class Horse(models.Model, metaclass=HorseBase):\n+            name = models.CharField(max_length=255)\n+            magic = True\n+\n+        self.assertEqual(Horse.horns, 1)\n+\n \n class ModelValidationTest(TestCase):\n     def test_pk_validation(self):\n",
  "problem_statement": "Custom model metaclasses cannot access the attribute dict in __init__\nDescription\n\t\nIn Django <=2.2, it is possible for models to define a custom metaclass (as a subclass of models.base.ModelBase) and access the attribute dict of the class being defined:\nfrom django.db import models\nclass PageBase(models.base.ModelBase):\n\tdef __init__(cls, name, bases, dct):\n\t\tsuper(PageBase, cls).__init__(name, bases, dct)\n\t\tif 'magic' in dct:\n\t\t\tprint(\"enabling magic on %s\" % (name))\nclass Page(models.Model, metaclass=PageBase):\n\tmagic = True\n\ttitle = models.CharField(max_length=255)\nAs of commit a68ea231012434b522ce45c513d84add516afa60, this fails because all attributes without a contribute_to_class method are popped from the dict in ModelBase.__new__ .\n(This pattern is used by Wagtail's Page model â€‹https://github.com/wagtail/wagtail/blob/3e1e67021e0a20783ed59e17b43e3c481897fce3/wagtail/core/models.py#L190 , so this is causing various failures against django stable/2.2.x.)\n",
  "hints_text": "",
  "created_at": "2019-03-14T17:47:04Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_metaclass_can_access_attribute_dict (model_regress.tests.ModelTests)\"]",
  "PASS_TO_PASS": "[\"test_model_with_evaluate_method (model_regress.tests.EvaluateMethodTest)\", \"test_pk_validation (model_regress.tests.ModelValidationTest)\", \"test_chained_fks (model_regress.tests.ModelTests)\", \"test_date_filter_null (model_regress.tests.ModelTests)\", \"test_date_lookup (model_regress.tests.ModelTests)\", \"test_empty_choice (model_regress.tests.ModelTests)\", \"test_get_next_prev_by_field (model_regress.tests.ModelTests)\", \"test_get_next_prev_by_field_unsaved (model_regress.tests.ModelTests)\", \"test_long_textfield (model_regress.tests.ModelTests)\", \"test_long_unicode_textfield (model_regress.tests.ModelTests)\", \"test_model_init_too_many_args (model_regress.tests.ModelTests)\", \"test_primary_key_foreign_key_types (model_regress.tests.ModelTests)\", \"test_related_gte_lookup (model_regress.tests.ModelTests)\", \"test_related_lte_lookup (model_regress.tests.ModelTests)\", \"test_sql_insert_compiler_return_id_attribute (model_regress.tests.ModelTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.558961",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}