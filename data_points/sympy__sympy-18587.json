{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18587",
  "base_commit": "afbffa714654e4c8e8e853b7689d324e7146e40f",
  "patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -900,6 +900,8 @@ def __new__(cls, *args, **kwargs):\n             if isinstance(a, Cycle):  # f\n                 return cls._af_new(a.list(size))\n             if not is_sequence(a):  # b\n+                if size is not None and a + 1 > size:\n+                    raise ValueError('size is too small when max is %s' % a)\n                 return cls._af_new(list(range(a + 1)))\n             if has_variety(is_sequence(ai) for ai in a):\n                 ok = False\n@@ -929,10 +931,12 @@ def __new__(cls, *args, **kwargs):\n             raise ValueError('there were repeated elements.')\n         temp = set(temp)\n \n-        if not is_cycle and \\\n-                any(i not in temp for i in range(len(temp))):\n-            raise ValueError(\"Integers 0 through %s must be present.\" %\n-                             max(temp))\n+        if not is_cycle:\n+            if any(i not in temp for i in range(len(temp))):\n+                raise ValueError('Integers 0 through %s must be present.' %\n+                max(temp))\n+            if size is not None and temp and max(temp) + 1 > size:\n+                raise ValueError('max element should not exceed %s' % (size - 1))\n \n         if is_cycle:\n             # it's not necessarily canonical so we won't store\ndiff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -1944,9 +1944,9 @@ def permute(self, perm, orientation='rows', direction='forward'):\n             isinstance(perm[0], Iterable):\n             if direction == 'forward':\n                 perm = list(reversed(perm))\n-            perm = Permutation(perm, size=max_index)\n+            perm = Permutation(perm, size=max_index+1)\n         else:\n-            perm = Permutation(perm, size=max_index)\n+            perm = Permutation(perm, size=max_index+1)\n \n         if orientation == 'rows':\n             return self._eval_permute_rows(perm)\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -222,6 +222,9 @@ def test_Permutation():\n     b = Permutation(0, 6, 3)(1, 2)\n     assert a.cycle_structure == {1: 4}\n     assert b.cycle_structure == {2: 1, 3: 1, 1: 2}\n+    # issue 11130\n+    raises(ValueError, lambda: Permutation(3, size=3))\n+    raises(ValueError, lambda: Permutation([1, 2, 0, 3], size=3))\n \n \n def test_Permutation_subclassing():\n",
  "problem_statement": "combinatorics.Permutation - exception not raised if wrong size is passed to constructor\nIf I create `Permutation` object from list, which length is greater than `size` argument, then the `size` argument is ignored (and exception is not raised):\n\n``` python\nIn [1]: from sympy.combinatorics import Permutation\n\nIn [2]: Permutation.print_cyclic = False\n\nIn [2]: p = Permutation([3, 0, 1, 2], size = 2)\n\nIn [3]: p\nOut[3]: Permutation[3, 0, 1, 2]\n\nIn [4]: p.size\nOut[4]: 4\n```\n\nIs there any reason for such behaviour? It seems to me that it would be better to raise an exception.\n\n",
  "hints_text": "@smichr could you please comment on this issue?\n\nOnly saw this now. No good reason not to error:\r\n```diff\r\ndiff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\r\nindex 6d687c7..d5d652b 100644\r\n--- a/sympy/combinatorics/permutations.py\r\n+++ b/sympy/combinatorics/permutations.py\r\n@@ -900,6 +900,9 @@ def __new__(cls, *args, **kwargs):\r\n             if isinstance(a, Cycle):  # f\r\n                 return cls._af_new(a.list(size))\r\n             if not is_sequence(a):  # b\r\n+                if size is not None and a + 1 > size:\r\n+                    raise ValueError(\r\n+                        'size is too small when max is %s' % a)\r\n                 return cls._af_new(list(range(a + 1)))\r\n             if has_variety(is_sequence(ai) for ai in a):\r\n                 ok = False\r\n@@ -929,10 +932,14 @@ def __new__(cls, *args, **kwargs):\r\n             raise ValueError('there were repeated elements.')\r\n         temp = set(temp)\r\n \r\n-        if not is_cycle and \\\r\n-                any(i not in temp for i in range(len(temp))):\r\n-            raise ValueError(\"Integers 0 through %s must be present.\" %\r\n-                             max(temp))\r\n+        if not is_cycle:\r\n+            if any(i not in temp for i in range(len(temp))):\r\n+                raise ValueError(\r\n+                    \"Integers 0 through %s must be present.\" %\r\n+                    max(temp))\r\n+            if size is not None and temp and max(temp) + 1 > size:\r\n+                raise ValueError(\r\n+                    'max element should not exceed %s' % (size - 1))\r\n \r\n         if is_cycle:\r\n             # it's not necessarily canonical so we won't store\r\ndiff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\r\nindex 637e272..7b9ce1b 100644\r\n--- a/sympy/combinatorics/tests/test_permutations.py\r\n+++ b/sympy/combinatorics/tests/test_permutations.py\r\n@@ -31,6 +31,9 @@ def test_Permutation():\r\n     assert list(p) == list(range(4))\r\n     assert Permutation(size=4) == Permutation(3)\r\n     assert Permutation(Permutation(3), size=5) == Permutation(4)\r\n+    # issue 11130\r\n+    raises(ValueError, lambda: Permutation(3, size=3))\r\n+    raises(ValueError, lambda: Permutation([1, 2, 0, 3], size=3))\r\n     # cycle form with size\r\n     assert Permutation([[1, 2]], size=4) == Permutation([[1, 2], [0], [3]])\r\n     # random generation\r\n```",
  "created_at": "2020-02-06T14:14:58Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_Permutation\", \"test_Permutation_subclassing\", \"test_from_sequence\", \"test_resize\", \"test_deprecated_print_cyclic\"]",
  "PASS_TO_PASS": "[\"test_josephus\", \"test_ranking\", \"test_mul\", \"test_args\", \"test_Cycle\", \"test_printing_cyclic\", \"test_printing_non_cyclic\", \"test_permutation_equality\", \"test_issue_17661\", \"test_permutation_apply\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.124280",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}