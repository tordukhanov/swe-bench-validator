{
  "repo": "django/django",
  "instance_id": "django__django-15423",
  "base_commit": "1d071ec1aa8fa414bb96b41f7be8a1bd01079815",
  "patch": "diff --git a/django/conf/__init__.py b/django/conf/__init__.py\n--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -157,8 +157,9 @@ def configured(self):\n     def USE_L10N(self):\n         stack = traceback.extract_stack()\n         # Show a warning if the setting is used outside of Django.\n-        # Stack index: -1 this line, -2 the caller.\n-        filename, _, _, _ = stack[-2]\n+        # Stack index: -1 this line, -2 the LazyObject __getattribute__(),\n+        # -3 the caller.\n+        filename, _, _, _ = stack[-3]\n         if not filename.startswith(os.path.dirname(django.__file__)):\n             warnings.warn(\n                 USE_L10N_DEPRECATED_MSG,\ndiff --git a/django/utils/functional.py b/django/utils/functional.py\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -266,6 +266,7 @@ def inner(self, *args):\n             self._setup()\n         return func(self._wrapped, *args)\n \n+    inner._mask_wrapped = False\n     return inner\n \n \n@@ -286,6 +287,14 @@ def __init__(self):\n         # override __copy__() and __deepcopy__() as well.\n         self._wrapped = empty\n \n+    def __getattribute__(self, name):\n+        value = super().__getattribute__(name)\n+        # If attribute is a proxy method, raise an AttributeError to call\n+        # __getattr__() and use the wrapped object method.\n+        if not getattr(value, \"_mask_wrapped\", True):\n+            raise AttributeError\n+        return value\n+\n     __getattr__ = new_method_proxy(getattr)\n \n     def __setattr__(self, name, value):\n",
  "test_patch": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -32,6 +32,28 @@ def _setup(self):\n \n         return AdHocLazyObject()\n \n+    def test_getattribute(self):\n+        \"\"\"\n+        Proxy methods don't exist on wrapped objects unless they're set.\n+        \"\"\"\n+        attrs = [\n+            \"__getitem__\",\n+            \"__setitem__\",\n+            \"__delitem__\",\n+            \"__iter__\",\n+            \"__len__\",\n+            \"__contains__\",\n+        ]\n+        foo = Foo()\n+        obj = self.lazy_wrap(foo)\n+        for attr in attrs:\n+            with self.subTest(attr):\n+                self.assertFalse(hasattr(obj, attr))\n+                setattr(foo, attr, attr)\n+                obj_with_attr = self.lazy_wrap(foo)\n+                self.assertTrue(hasattr(obj_with_attr, attr))\n+                self.assertEqual(getattr(obj_with_attr, attr), attr)\n+\n     def test_getattr(self):\n         obj = self.lazy_wrap(Foo())\n         self.assertEqual(obj.foo, \"bar\")\n",
  "problem_statement": "LazyObject defines attribute that don't exist on wrapped object\nDescription\n\t\nLazyObject defines magic methods (__getitem__, __iter__) which may be missing from the wrapped object. This leads to the following errors:\nsome_variable = request.user\nif hasattr(some_variable, \"__getitem__\"):\n\tfoo = some_variable[\"foo\"] # raises TypeError: 'User' object has no attribute '__getitem__'\nif hasattr(some_variable, \"__iter__\"):\n\tfor item in some_variable: # raises TypeError: 'User' object is not iterable\n",
  "hints_text": "â€‹PR",
  "created_at": "2022-02-13T16:39:02Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"Proxy methods don't exist on wrapped objects unless they're set.\", \"test_getitem (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_getitem (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\"]",
  "PASS_TO_PASS": "[\"test_bool (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_bytes (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_class (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_cmp (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_contains (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_class (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_class_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_list (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_list_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_class (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_class_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_list (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_list_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_delattr (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_delitem (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_dir (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_getattr (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_gt (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_hash (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_iter (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_len (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_lt (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_pickle (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_setattr (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_setattr2 (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_setitem (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_text (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_add (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_bool (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_bytes (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_class (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_cmp (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_contains (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_class (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_class_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_list (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_list_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_class (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_class_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_list (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_list_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_delattr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_delitem (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_dict (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_dir (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_getattr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_gt (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_hash (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_iter (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_len (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_list_set (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_lt (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_none (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_pickle (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_radd (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_repr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_setattr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_setattr2 (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_setitem (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_text (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_trace (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"Test in a fairly synthetic setting.\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.729500",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}