{
  "repo": "django/django",
  "instance_id": "django__django-14059",
  "base_commit": "712fe12466cfe4b7e31c61418c85ce36a211261a",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -442,7 +442,11 @@ def __init__(self, *args, **kwargs):\n                 if val is _DEFERRED:\n                     continue\n                 _setattr(self, field.attname, val)\n-                kwargs.pop(field.name, None)\n+                if kwargs.pop(field.name, NOT_PROVIDED) is not NOT_PROVIDED:\n+                    raise TypeError(\n+                        f\"{cls.__qualname__}() got both positional and \"\n+                        f\"keyword arguments for field '{field.name}'.\"\n+                    )\n \n         # Now we're left with the unprocessed fields that *must* come from\n         # keywords, or default.\n",
  "test_patch": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -68,6 +68,15 @@ def test_can_mix_and_match_position_and_kwargs(self):\n         a.save()\n         self.assertEqual(a.headline, 'Fourth article')\n \n+    def test_positional_and_keyword_args_for_the_same_field(self):\n+        msg = \"Article() got both positional and keyword arguments for field '%s'.\"\n+        with self.assertRaisesMessage(TypeError, msg % 'headline'):\n+            Article(None, 'Fifth article', headline='Other headline.')\n+        with self.assertRaisesMessage(TypeError, msg % 'headline'):\n+            Article(None, 'Sixth article', headline='')\n+        with self.assertRaisesMessage(TypeError, msg % 'pub_date'):\n+            Article(None, 'Seventh article', datetime(2021, 3, 1), pub_date=None)\n+\n     def test_cannot_create_instance_with_invalid_kwargs(self):\n         with self.assertRaisesMessage(TypeError, \"Article() got an unexpected keyword argument 'foo'\"):\n             Article(\n",
  "problem_statement": "Can create model instance with conflicting args and kwargs value for the same field\nDescription\n\t \n\t\t(last modified by Anton Samarchyan)\n\t \nDiscovered while working on #18586\nTo reproduce it, add the following test (it's using tests.basic.models.Article)\n\tfrom django.utils import six\n\tdef test_cannot_specify_same_field_with_args_and_kwargs_too(self):\n\t\tsix.assertRaisesRegex(\n\t\t\tself,\n\t\t\tTypeError,\n\t\t\t\"__init__() got multiple values for argument 'headline'\",\n\t\t\tArticle,\n\t\t\tNone, # id\n\t\t\t'args based headline',\n\t\t\theadline='kwargs based headline',\n\t\t\tpub_date=datetime(2005, 7, 31),\n\t\t)\n",
  "hints_text": "For what it's worth, I didn't realize there was any attempt to support positional arguments in model instantiation (although it is tested, is it documented anywhere?). May not be worth fixing, in my opinion.\nHi, From what I understand, *args instanciation is there for performance reasons (see [1]). I'll accept this ticket on the basis that it'd be nice to fix it but only if it doesn't impact performance negatively. Thanks. [1] â€‹https://github.com/django/django/blob/908c67e719a54b8b612cb7df732126f42350f3fa/django/db/models/base.py#L418-L421",
  "created_at": "2021-02-28T00:17:54Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_positional_and_keyword_args_for_the_same_field (basic.tests.ModelInstanceCreationTests)\"]",
  "PASS_TO_PASS": "[\"This test ensures that the correct set of methods from `QuerySet`\", \"test_all_lookup (basic.tests.ModelLookupTest)\", \"test_does_not_exist (basic.tests.ModelLookupTest)\", \"test_equal_lookup (basic.tests.ModelLookupTest)\", \"test_lookup_by_primary_key (basic.tests.ModelLookupTest)\", \"test_rich_lookup (basic.tests.ModelLookupTest)\", \"test_too_many (basic.tests.ModelLookupTest)\", \"test_select_on_save (basic.tests.SelectOnSaveTests)\", \"select_on_save works correctly if the database doesn't return correct\", \"test_autofields_generate_different_values_for_each_instance (basic.tests.ModelInstanceCreationTests)\", \"test_can_create_instance_using_kwargs (basic.tests.ModelInstanceCreationTests)\", \"You can initialize a model instance using positional arguments,\", \"You can leave off the value for an AutoField when creating an\", \"test_can_mix_and_match_position_and_kwargs (basic.tests.ModelInstanceCreationTests)\", \"test_cannot_create_instance_with_invalid_kwargs (basic.tests.ModelInstanceCreationTests)\", \"as much precision in *seconds*\", \"test_leaving_off_a_field_with_default_set_the_default_will_be_saved (basic.tests.ModelInstanceCreationTests)\", \"test_object_is_not_written_to_database_until_save_was_called (basic.tests.ModelInstanceCreationTests)\", \"test_querysets_checking_for_membership (basic.tests.ModelInstanceCreationTests)\", \"test_save_parent_primary_with_default (basic.tests.ModelInstanceCreationTests)\", \"test_save_primary_with_default (basic.tests.ModelInstanceCreationTests)\", \"test_saving_an_object_again_does_not_create_a_new_object (basic.tests.ModelInstanceCreationTests)\", \"test_lookup_in_fields (basic.tests.ModelRefreshTests)\", \"test_prefetched_cache_cleared (basic.tests.ModelRefreshTests)\", \"test_refresh (basic.tests.ModelRefreshTests)\", \"test_refresh_clears_one_to_one_field (basic.tests.ModelRefreshTests)\", \"refresh_from_db() clear cached reverse relations.\", \"test_refresh_fk (basic.tests.ModelRefreshTests)\", \"test_refresh_fk_on_delete_set_null (basic.tests.ModelRefreshTests)\", \"test_refresh_no_fields (basic.tests.ModelRefreshTests)\", \"test_refresh_null_fk (basic.tests.ModelRefreshTests)\", \"test_refresh_unsaved (basic.tests.ModelRefreshTests)\", \"test_unknown_kwarg (basic.tests.ModelRefreshTests)\", \"test_create_method (basic.tests.ModelTest)\", \"gettext_lazy objects work when saving model instances\", \"test_delete_and_access_field (basic.tests.ModelTest)\", \"test_emptyqs (basic.tests.ModelTest)\", \"test_emptyqs_customqs (basic.tests.ModelTest)\", \"test_emptyqs_values (basic.tests.ModelTest)\", \"test_emptyqs_values_order (basic.tests.ModelTest)\", \"test_eq (basic.tests.ModelTest)\", \"test_extra_method_select_argument_with_dashes (basic.tests.ModelTest)\", \"test_extra_method_select_argument_with_dashes_and_values (basic.tests.ModelTest)\", \"test_hash (basic.tests.ModelTest)\", \"test_hash_function (basic.tests.ModelTest)\", \"test_manually_specify_primary_key (basic.tests.ModelTest)\", \"test_microsecond_precision (basic.tests.ModelTest)\", \"test_missing_hash_not_inherited (basic.tests.ModelTest)\", \"test_multiple_objects_max_num_fetched (basic.tests.ModelTest)\", \"test_not_equal_and_equal_operators_behave_as_expected_on_instances (basic.tests.ModelTest)\", \"test_objects_attribute_is_only_available_on_the_class_itself (basic.tests.ModelTest)\", \"test_queryset_delete_removes_all_items_in_that_queryset (basic.tests.ModelTest)\", \"test_specified_parent_hash_inherited (basic.tests.ModelTest)\", \"test_ticket_20278 (basic.tests.ModelTest)\", \"test_unicode_data (basic.tests.ModelTest)\", \"test_year_lookup_edge_case (basic.tests.ModelTest)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.680403",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}