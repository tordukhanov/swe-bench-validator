{
  "repo": "django/django",
  "instance_id": "django__django-13495",
  "base_commit": "b26ec77deb7c5052163ef8514ec7db70c0a5ea2a",
  "patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -99,11 +99,14 @@ def date_extract_sql(self, lookup_type, field_name):\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations may require a date_extract_sql() method')\n \n-    def date_trunc_sql(self, lookup_type, field_name):\n+    def date_trunc_sql(self, lookup_type, field_name, tzname=None):\n         \"\"\"\n         Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n-        truncates the given date field field_name to a date object with only\n-        the given specificity.\n+        truncates the given date or datetime field field_name to a date object\n+        with only the given specificity.\n+\n+        If `tzname` is provided, the given value is truncated in a specific\n+        timezone.\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations may require a date_trunc_sql() method.')\n \n@@ -138,11 +141,14 @@ def datetime_trunc_sql(self, lookup_type, field_name, tzname):\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations may require a datetime_trunc_sql() method')\n \n-    def time_trunc_sql(self, lookup_type, field_name):\n+    def time_trunc_sql(self, lookup_type, field_name, tzname=None):\n         \"\"\"\n         Given a lookup_type of 'hour', 'minute' or 'second', return the SQL\n-        that truncates the given time field field_name to a time object with\n-        only the given specificity.\n+        that truncates the given time or datetime field field_name to a time\n+        object with only the given specificity.\n+\n+        If `tzname` is provided, the given value is truncated in a specific\n+        timezone.\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations may require a time_trunc_sql() method')\n \ndiff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -55,7 +55,8 @@ def date_extract_sql(self, lookup_type, field_name):\n             # EXTRACT returns 1-53 based on ISO-8601 for the week number.\n             return \"EXTRACT(%s FROM %s)\" % (lookup_type.upper(), field_name)\n \n-    def date_trunc_sql(self, lookup_type, field_name):\n+    def date_trunc_sql(self, lookup_type, field_name, tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname)\n         fields = {\n             'year': '%%Y-01-01',\n             'month': '%%Y-%%m-01',\n@@ -82,7 +83,7 @@ def _prepare_tzname_delta(self, tzname):\n         return tzname\n \n     def _convert_field_to_tz(self, field_name, tzname):\n-        if settings.USE_TZ and self.connection.timezone_name != tzname:\n+        if tzname and settings.USE_TZ and self.connection.timezone_name != tzname:\n             field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (\n                 field_name,\n                 self.connection.timezone_name,\n@@ -128,7 +129,8 @@ def datetime_trunc_sql(self, lookup_type, field_name, tzname):\n             sql = \"CAST(DATE_FORMAT(%s, '%s') AS DATETIME)\" % (field_name, format_str)\n         return sql\n \n-    def time_trunc_sql(self, lookup_type, field_name):\n+    def time_trunc_sql(self, lookup_type, field_name, tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname)\n         fields = {\n             'hour': '%%H:00:00',\n             'minute': '%%H:%%i:00',\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -89,7 +89,8 @@ def date_extract_sql(self, lookup_type, field_name):\n             # https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/EXTRACT-datetime.html\n             return \"EXTRACT(%s FROM %s)\" % (lookup_type.upper(), field_name)\n \n-    def date_trunc_sql(self, lookup_type, field_name):\n+    def date_trunc_sql(self, lookup_type, field_name, tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname)\n         # https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/ROUND-and-TRUNC-Date-Functions.html\n         if lookup_type in ('year', 'month'):\n             return \"TRUNC(%s, '%s')\" % (field_name, lookup_type.upper())\n@@ -114,7 +115,7 @@ def _prepare_tzname_delta(self, tzname):\n         return tzname\n \n     def _convert_field_to_tz(self, field_name, tzname):\n-        if not settings.USE_TZ:\n+        if not (settings.USE_TZ and tzname):\n             return field_name\n         if not self._tzname_re.match(tzname):\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n@@ -161,10 +162,11 @@ def datetime_trunc_sql(self, lookup_type, field_name, tzname):\n             sql = \"CAST(%s AS DATE)\" % field_name  # Cast to DATE removes sub-second precision.\n         return sql\n \n-    def time_trunc_sql(self, lookup_type, field_name):\n+    def time_trunc_sql(self, lookup_type, field_name, tzname=None):\n         # The implementation is similar to `datetime_trunc_sql` as both\n         # `DateTimeField` and `TimeField` are stored as TIMESTAMP where\n         # the date part of the later is ignored.\n+        field_name = self._convert_field_to_tz(field_name, tzname)\n         if lookup_type == 'hour':\n             sql = \"TRUNC(%s, 'HH24')\" % field_name\n         elif lookup_type == 'minute':\ndiff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -38,7 +38,8 @@ def date_extract_sql(self, lookup_type, field_name):\n         else:\n             return \"EXTRACT('%s' FROM %s)\" % (lookup_type, field_name)\n \n-    def date_trunc_sql(self, lookup_type, field_name):\n+    def date_trunc_sql(self, lookup_type, field_name, tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname)\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n@@ -50,7 +51,7 @@ def _prepare_tzname_delta(self, tzname):\n         return tzname\n \n     def _convert_field_to_tz(self, field_name, tzname):\n-        if settings.USE_TZ:\n+        if tzname and settings.USE_TZ:\n             field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n         return field_name\n \n@@ -71,7 +72,8 @@ def datetime_trunc_sql(self, lookup_type, field_name, tzname):\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def time_trunc_sql(self, lookup_type, field_name):\n+    def time_trunc_sql(self, lookup_type, field_name, tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname)\n         return \"DATE_TRUNC('%s', %s)::time\" % (lookup_type, field_name)\n \n     def deferrable_sql(self):\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -213,13 +213,13 @@ def get_new_connection(self, conn_params):\n         else:\n             create_deterministic_function = conn.create_function\n         create_deterministic_function('django_date_extract', 2, _sqlite_datetime_extract)\n-        create_deterministic_function('django_date_trunc', 2, _sqlite_date_trunc)\n+        create_deterministic_function('django_date_trunc', 4, _sqlite_date_trunc)\n         create_deterministic_function('django_datetime_cast_date', 3, _sqlite_datetime_cast_date)\n         create_deterministic_function('django_datetime_cast_time', 3, _sqlite_datetime_cast_time)\n         create_deterministic_function('django_datetime_extract', 4, _sqlite_datetime_extract)\n         create_deterministic_function('django_datetime_trunc', 4, _sqlite_datetime_trunc)\n         create_deterministic_function('django_time_extract', 2, _sqlite_time_extract)\n-        create_deterministic_function('django_time_trunc', 2, _sqlite_time_trunc)\n+        create_deterministic_function('django_time_trunc', 4, _sqlite_time_trunc)\n         create_deterministic_function('django_time_diff', 2, _sqlite_time_diff)\n         create_deterministic_function('django_timestamp_diff', 2, _sqlite_timestamp_diff)\n         create_deterministic_function('django_format_dtdelta', 3, _sqlite_format_dtdelta)\n@@ -445,8 +445,8 @@ def _sqlite_datetime_parse(dt, tzname=None, conn_tzname=None):\n     return dt\n \n \n-def _sqlite_date_trunc(lookup_type, dt):\n-    dt = _sqlite_datetime_parse(dt)\n+def _sqlite_date_trunc(lookup_type, dt, tzname, conn_tzname):\n+    dt = _sqlite_datetime_parse(dt, tzname, conn_tzname)\n     if dt is None:\n         return None\n     if lookup_type == 'year':\n@@ -463,13 +463,17 @@ def _sqlite_date_trunc(lookup_type, dt):\n         return \"%i-%02i-%02i\" % (dt.year, dt.month, dt.day)\n \n \n-def _sqlite_time_trunc(lookup_type, dt):\n+def _sqlite_time_trunc(lookup_type, dt, tzname, conn_tzname):\n     if dt is None:\n         return None\n-    try:\n-        dt = backend_utils.typecast_time(dt)\n-    except (ValueError, TypeError):\n-        return None\n+    dt_parsed = _sqlite_datetime_parse(dt, tzname, conn_tzname)\n+    if dt_parsed is None:\n+        try:\n+            dt = backend_utils.typecast_time(dt)\n+        except (ValueError, TypeError):\n+            return None\n+    else:\n+        dt = dt_parsed\n     if lookup_type == 'hour':\n         return \"%02i:00:00\" % dt.hour\n     elif lookup_type == 'minute':\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -77,14 +77,22 @@ def format_for_duration_arithmetic(self, sql):\n         \"\"\"Do nothing since formatting is handled in the custom function.\"\"\"\n         return sql\n \n-    def date_trunc_sql(self, lookup_type, field_name):\n-        return \"django_date_trunc('%s', %s)\" % (lookup_type.lower(), field_name)\n+    def date_trunc_sql(self, lookup_type, field_name, tzname=None):\n+        return \"django_date_trunc('%s', %s, %s, %s)\" % (\n+            lookup_type.lower(),\n+            field_name,\n+            *self._convert_tznames_to_sql(tzname),\n+        )\n \n-    def time_trunc_sql(self, lookup_type, field_name):\n-        return \"django_time_trunc('%s', %s)\" % (lookup_type.lower(), field_name)\n+    def time_trunc_sql(self, lookup_type, field_name, tzname=None):\n+        return \"django_time_trunc('%s', %s, %s, %s)\" % (\n+            lookup_type.lower(),\n+            field_name,\n+            *self._convert_tznames_to_sql(tzname),\n+        )\n \n     def _convert_tznames_to_sql(self, tzname):\n-        if settings.USE_TZ:\n+        if tzname and settings.USE_TZ:\n             return \"'%s'\" % tzname, \"'%s'\" % self.connection.timezone_name\n         return 'NULL', 'NULL'\n \ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -46,6 +46,8 @@ def as_sql(self, compiler, connection):\n         if isinstance(lhs_output_field, DateTimeField):\n             tzname = self.get_tzname()\n             sql = connection.ops.datetime_extract_sql(self.lookup_name, sql, tzname)\n+        elif self.tzinfo is not None:\n+            raise ValueError('tzinfo can only be used with DateTimeField.')\n         elif isinstance(lhs_output_field, DateField):\n             sql = connection.ops.date_extract_sql(self.lookup_name, sql)\n         elif isinstance(lhs_output_field, TimeField):\n@@ -191,13 +193,17 @@ def __init__(self, expression, output_field=None, tzinfo=None, is_dst=None, **ex\n \n     def as_sql(self, compiler, connection):\n         inner_sql, inner_params = compiler.compile(self.lhs)\n-        if isinstance(self.output_field, DateTimeField):\n+        tzname = None\n+        if isinstance(self.lhs.output_field, DateTimeField):\n             tzname = self.get_tzname()\n+        elif self.tzinfo is not None:\n+            raise ValueError('tzinfo can only be used with DateTimeField.')\n+        if isinstance(self.output_field, DateTimeField):\n             sql = connection.ops.datetime_trunc_sql(self.kind, inner_sql, tzname)\n         elif isinstance(self.output_field, DateField):\n-            sql = connection.ops.date_trunc_sql(self.kind, inner_sql)\n+            sql = connection.ops.date_trunc_sql(self.kind, inner_sql, tzname)\n         elif isinstance(self.output_field, TimeField):\n-            sql = connection.ops.time_trunc_sql(self.kind, inner_sql)\n+            sql = connection.ops.time_trunc_sql(self.kind, inner_sql, tzname)\n         else:\n             raise ValueError('Trunc only valid on DateField, TimeField, or DateTimeField.')\n         return sql, inner_params\n",
  "test_patch": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -672,6 +672,18 @@ def test_time_kind(kind):\n                 lambda m: (m.start_datetime, m.truncated)\n             )\n \n+        def test_datetime_to_time_kind(kind):\n+            self.assertQuerysetEqual(\n+                DTModel.objects.annotate(\n+                    truncated=Trunc('start_datetime', kind, output_field=TimeField()),\n+                ).order_by('start_datetime'),\n+                [\n+                    (start_datetime, truncate_to(start_datetime.time(), kind)),\n+                    (end_datetime, truncate_to(end_datetime.time(), kind)),\n+                ],\n+                lambda m: (m.start_datetime, m.truncated),\n+            )\n+\n         test_date_kind('year')\n         test_date_kind('quarter')\n         test_date_kind('month')\n@@ -688,6 +700,9 @@ def test_time_kind(kind):\n         test_datetime_kind('hour')\n         test_datetime_kind('minute')\n         test_datetime_kind('second')\n+        test_datetime_to_time_kind('hour')\n+        test_datetime_to_time_kind('minute')\n+        test_datetime_to_time_kind('second')\n \n         qs = DTModel.objects.filter(start_datetime__date=Trunc('start_datetime', 'day', output_field=DateField()))\n         self.assertEqual(qs.count(), 2)\n@@ -1111,6 +1126,18 @@ def test_extract_func_explicit_timezone_priority(self):\n             self.assertEqual(model.day_melb, 16)\n             self.assertEqual(model.day_utc, 15)\n \n+    def test_extract_invalid_field_with_timezone(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        msg = 'tzinfo can only be used with DateTimeField.'\n+        with self.assertRaisesMessage(ValueError, msg):\n+            DTModel.objects.annotate(\n+                day_melb=Extract('start_date', 'day', tzinfo=melb),\n+            ).get()\n+        with self.assertRaisesMessage(ValueError, msg):\n+            DTModel.objects.annotate(\n+                hour_melb=Extract('start_time', 'hour', tzinfo=melb),\n+            ).get()\n+\n     def test_trunc_timezone_applied_before_truncation(self):\n         start_datetime = datetime(2016, 1, 1, 1, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n@@ -1193,38 +1220,60 @@ def test_datetime_kind(kind):\n                 lambda m: (m.start_datetime, m.truncated)\n             )\n \n-        def test_date_kind(kind):\n+        def test_datetime_to_date_kind(kind):\n             self.assertQuerysetEqual(\n                 DTModel.objects.annotate(\n-                    truncated=Trunc('start_date', kind, output_field=DateField(), tzinfo=melb)\n+                    truncated=Trunc(\n+                        'start_datetime',\n+                        kind,\n+                        output_field=DateField(),\n+                        tzinfo=melb,\n+                    ),\n                 ).order_by('start_datetime'),\n                 [\n-                    (start_datetime, truncate_to(start_datetime.date(), kind)),\n-                    (end_datetime, truncate_to(end_datetime.date(), kind))\n+                    (\n+                        start_datetime,\n+                        truncate_to(start_datetime.astimezone(melb).date(), kind),\n+                    ),\n+                    (\n+                        end_datetime,\n+                        truncate_to(end_datetime.astimezone(melb).date(), kind),\n+                    ),\n                 ],\n-                lambda m: (m.start_datetime, m.truncated)\n+                lambda m: (m.start_datetime, m.truncated),\n             )\n \n-        def test_time_kind(kind):\n+        def test_datetime_to_time_kind(kind):\n             self.assertQuerysetEqual(\n                 DTModel.objects.annotate(\n-                    truncated=Trunc('start_time', kind, output_field=TimeField(), tzinfo=melb)\n+                    truncated=Trunc(\n+                        'start_datetime',\n+                        kind,\n+                        output_field=TimeField(),\n+                        tzinfo=melb,\n+                    )\n                 ).order_by('start_datetime'),\n                 [\n-                    (start_datetime, truncate_to(start_datetime.time(), kind)),\n-                    (end_datetime, truncate_to(end_datetime.time(), kind))\n+                    (\n+                        start_datetime,\n+                        truncate_to(start_datetime.astimezone(melb).time(), kind),\n+                    ),\n+                    (\n+                        end_datetime,\n+                        truncate_to(end_datetime.astimezone(melb).time(), kind),\n+                    ),\n                 ],\n-                lambda m: (m.start_datetime, m.truncated)\n+                lambda m: (m.start_datetime, m.truncated),\n             )\n \n-        test_date_kind('year')\n-        test_date_kind('quarter')\n-        test_date_kind('month')\n-        test_date_kind('week')\n-        test_date_kind('day')\n-        test_time_kind('hour')\n-        test_time_kind('minute')\n-        test_time_kind('second')\n+        test_datetime_to_date_kind('year')\n+        test_datetime_to_date_kind('quarter')\n+        test_datetime_to_date_kind('month')\n+        test_datetime_to_date_kind('week')\n+        test_datetime_to_date_kind('day')\n+        test_datetime_to_time_kind('hour')\n+        test_datetime_to_time_kind('minute')\n+        test_datetime_to_time_kind('second')\n         test_datetime_kind('year')\n         test_datetime_kind('quarter')\n         test_datetime_kind('month')\n@@ -1236,3 +1285,15 @@ def test_time_kind(kind):\n \n         qs = DTModel.objects.filter(start_datetime__date=Trunc('start_datetime', 'day', output_field=DateField()))\n         self.assertEqual(qs.count(), 2)\n+\n+    def test_trunc_invalid_field_with_timezone(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        msg = 'tzinfo can only be used with DateTimeField.'\n+        with self.assertRaisesMessage(ValueError, msg):\n+            DTModel.objects.annotate(\n+                day_melb=Trunc('start_date', 'day', tzinfo=melb),\n+            ).get()\n+        with self.assertRaisesMessage(ValueError, msg):\n+            DTModel.objects.annotate(\n+                hour_melb=Trunc('start_time', 'hour', tzinfo=melb),\n+            ).get()\n",
  "problem_statement": "Trunc() function take tzinfo param into account only when DateTimeField() are used as output_field\nDescription\n\t\nI'm trying to use TruncDay() function like this \nTruncDay('created_at', output_field=DateField(), tzinfo=tz_kyiv)\nbut for PostgresSQL the code are generated as \n(DATE_TRUNC('day', \"storage_transaction\".\"created_at\"))\nSo timezone convertation like \nAT TIME ZONE 'Europe/Kiev'\nwas totally missed from sql.\nAfter the investigation of code I've found out that Timezone converting are applied only when output_field=DateTimeField\n\tdef as_sql(self, compiler, connection):\n\t\tinner_sql, inner_params = compiler.compile(self.lhs)\n\t\tif isinstance(self.output_field, DateTimeField):\n\t\t\ttzname = self.get_tzname()\n\t\t\tsql = connection.ops.datetime_trunc_sql(self.kind, inner_sql, tzname)\n\t\telif isinstance(self.output_field, DateField):\n\t\t\tsql = connection.ops.date_trunc_sql(self.kind, inner_sql)\n\t\telif isinstance(self.output_field, TimeField):\n\t\t\tsql = connection.ops.time_trunc_sql(self.kind, inner_sql)\n\t\telse:\n\t\t\traise ValueError('Trunc only valid on DateField, TimeField, or DateTimeField.')\n\t\treturn sql, inner_params\nWhy is that? Is there any reason for it OR is it only such feature that isn't still implemented?\n",
  "hints_text": "It looks like the logic should be based off self.lhs.output_field instead. Assuming you are using PostgreSQL does the following patch addresses your issue? django/db/backends/postgresql/operations.py diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py index c67062a4a7..c63e4dc8c0 100644 a b class DatabaseOperations(BaseDatabaseOperations): 3838 else: 3939 return \"EXTRACT('%s' FROM %s)\" % (lookup_type, field_name) 4040 41 def date_trunc_sql(self, lookup_type, field_name): 42 # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC 43 return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name) 44 4541 def _prepare_tzname_delta(self, tzname): 4642 if '+' in tzname: 4743 return tzname.replace('+', '-') … … class DatabaseOperations(BaseDatabaseOperations): 5046 return tzname 5147 5248 def _convert_field_to_tz(self, field_name, tzname): 53 if settings.USE_TZ: 49 if tzname and settings.USE_TZ: 5450 field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname)) 5551 return field_name 5652 … … class DatabaseOperations(BaseDatabaseOperations): 7167 # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC 7268 return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name) 7369 74 def time_trunc_sql(self, lookup_type, field_name): 70 def date_trunc_sql(self, lookup_type, field_name, tzname=None): 71 field_name = self._convert_field_to_tz(field_name, tzname) 72 # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC 73 return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name) 74 75 def time_trunc_sql(self, lookup_type, field_name, tzname=None): 76 field_name = self._convert_field_to_tz(field_name, tzname) 77 field_name = self._convert_field_to_tz(field_name, tzname) 7578 return \"DATE_TRUNC('%s', %s)::time\" % (lookup_type, field_name) 7679 7780 def json_cast_text_sql(self, field_name): django/db/models/functions/datetime.py diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py index b6594b043b..52714aa9bf 100644 a b class TruncBase(TimezoneMixin, Transform): 191191 192192 def as_sql(self, compiler, connection): 193193 inner_sql, inner_params = compiler.compile(self.lhs) 194 if isinstance(self.output_field, DateTimeField): 194 tzname = None 195 if isinstance(self.lhs.output_field, DateTimeField): 195196 tzname = self.get_tzname() 197 if isinstance(self.output_field, DateTimeField): 196198 sql = connection.ops.datetime_trunc_sql(self.kind, inner_sql, tzname) 197199 elif isinstance(self.output_field, DateField): 198 sql = connection.ops.date_trunc_sql(self.kind, inner_sql) 200 sql = connection.ops.date_trunc_sql(self.kind, inner_sql, tzname) 199201 elif isinstance(self.output_field, TimeField): 200 sql = connection.ops.time_trunc_sql(self.kind, inner_sql) 202 sql = connection.ops.time_trunc_sql(self.kind, inner_sql, tzname) 201203 else: 202204 raise ValueError('Trunc only valid on DateField, TimeField, or DateTimeField.') 203205 return sql, inner_params\nIt does pass the test suite so it looks like this is definitely a bug. I think we should go as far as raising an exception when Extract(tzinfo) and Trunc(tzinfo) is specified for a left hand side that doesn't have a isinstance(lhs.output_field, DateTimeField).\nYes, the provided patch solved this issue. I come up with a similar solution like your today.",
  "created_at": "2020-10-05T15:57:59Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_invalid_field_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_invalid_field_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\"]",
  "PASS_TO_PASS": "[\"test_extract_day_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_duration_unsupported_lookups (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_duration_unsupported_lookups (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func_explicit_timezone_priority (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_ambiguous_and_invalid_times (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_timezone_applied_before_truncation (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.659415",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}