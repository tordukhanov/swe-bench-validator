{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-25969",
  "base_commit": "c3bfe86b45577a9405a4680d9971efa9594a0657",
  "patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -30,16 +30,16 @@\n from .utils import (\n     column_or_1d,\n     indexable,\n-    check_matplotlib_support,\n     _safe_indexing,\n )\n-from .utils._response import _get_response_values_binary\n \n-from .utils.multiclass import check_classification_targets, type_of_target\n+from .utils.multiclass import check_classification_targets\n from .utils.parallel import delayed, Parallel\n from .utils._param_validation import StrOptions, HasMethods, Hidden\n+from .utils._plotting import _BinaryClassifierCurveDisplayMixin\n from .utils.validation import (\n     _check_fit_params,\n+    _check_pos_label_consistency,\n     _check_sample_weight,\n     _num_samples,\n     check_consistent_length,\n@@ -48,7 +48,6 @@\n from .isotonic import IsotonicRegression\n from .svm import LinearSVC\n from .model_selection import check_cv, cross_val_predict\n-from .metrics._base import _check_pos_label_consistency\n \n \n class CalibratedClassifierCV(ClassifierMixin, MetaEstimatorMixin, BaseEstimator):\n@@ -1013,7 +1012,7 @@ def calibration_curve(\n     return prob_true, prob_pred\n \n \n-class CalibrationDisplay:\n+class CalibrationDisplay(_BinaryClassifierCurveDisplayMixin):\n     \"\"\"Calibration curve (also known as reliability diagram) visualization.\n \n     It is recommended to use\n@@ -1124,13 +1123,8 @@ def plot(self, *, ax=None, name=None, ref_line=True, **kwargs):\n         display : :class:`~sklearn.calibration.CalibrationDisplay`\n             Object that stores computed values.\n         \"\"\"\n-        check_matplotlib_support(\"CalibrationDisplay.plot\")\n-        import matplotlib.pyplot as plt\n+        self.ax_, self.figure_, name = self._validate_plot_params(ax=ax, name=name)\n \n-        if ax is None:\n-            fig, ax = plt.subplots()\n-\n-        name = self.estimator_name if name is None else name\n         info_pos_label = (\n             f\"(Positive class: {self.pos_label})\" if self.pos_label is not None else \"\"\n         )\n@@ -1141,20 +1135,20 @@ def plot(self, *, ax=None, name=None, ref_line=True, **kwargs):\n         line_kwargs.update(**kwargs)\n \n         ref_line_label = \"Perfectly calibrated\"\n-        existing_ref_line = ref_line_label in ax.get_legend_handles_labels()[1]\n+        existing_ref_line = ref_line_label in self.ax_.get_legend_handles_labels()[1]\n         if ref_line and not existing_ref_line:\n-            ax.plot([0, 1], [0, 1], \"k:\", label=ref_line_label)\n-        self.line_ = ax.plot(self.prob_pred, self.prob_true, \"s-\", **line_kwargs)[0]\n+            self.ax_.plot([0, 1], [0, 1], \"k:\", label=ref_line_label)\n+        self.line_ = self.ax_.plot(self.prob_pred, self.prob_true, \"s-\", **line_kwargs)[\n+            0\n+        ]\n \n         # We always have to show the legend for at least the reference line\n-        ax.legend(loc=\"lower right\")\n+        self.ax_.legend(loc=\"lower right\")\n \n         xlabel = f\"Mean predicted probability {info_pos_label}\"\n         ylabel = f\"Fraction of positives {info_pos_label}\"\n-        ax.set(xlabel=xlabel, ylabel=ylabel)\n+        self.ax_.set(xlabel=xlabel, ylabel=ylabel)\n \n-        self.ax_ = ax\n-        self.figure_ = ax.figure\n         return self\n \n     @classmethod\n@@ -1260,15 +1254,15 @@ def from_estimator(\n         >>> disp = CalibrationDisplay.from_estimator(clf, X_test, y_test)\n         >>> plt.show()\n         \"\"\"\n-        method_name = f\"{cls.__name__}.from_estimator\"\n-        check_matplotlib_support(method_name)\n-\n-        check_is_fitted(estimator)\n-        y_prob, pos_label = _get_response_values_binary(\n-            estimator, X, response_method=\"predict_proba\", pos_label=pos_label\n+        y_prob, pos_label, name = cls._validate_and_get_response_values(\n+            estimator,\n+            X,\n+            y,\n+            response_method=\"predict_proba\",\n+            pos_label=pos_label,\n+            name=name,\n         )\n \n-        name = name if name is not None else estimator.__class__.__name__\n         return cls.from_predictions(\n             y,\n             y_prob,\n@@ -1378,26 +1372,19 @@ def from_predictions(\n         >>> disp = CalibrationDisplay.from_predictions(y_test, y_prob)\n         >>> plt.show()\n         \"\"\"\n-        method_name = f\"{cls.__name__}.from_predictions\"\n-        check_matplotlib_support(method_name)\n-\n-        target_type = type_of_target(y_true)\n-        if target_type != \"binary\":\n-            raise ValueError(\n-                f\"The target y is not binary. Got {target_type} type of target.\"\n-            )\n+        pos_label_validated, name = cls._validate_from_predictions_params(\n+            y_true, y_prob, sample_weight=None, pos_label=pos_label, name=name\n+        )\n \n         prob_true, prob_pred = calibration_curve(\n             y_true, y_prob, n_bins=n_bins, strategy=strategy, pos_label=pos_label\n         )\n-        name = \"Classifier\" if name is None else name\n-        pos_label = _check_pos_label_consistency(pos_label, y_true)\n \n         disp = cls(\n             prob_true=prob_true,\n             prob_pred=prob_pred,\n             y_prob=y_prob,\n             estimator_name=name,\n-            pos_label=pos_label,\n+            pos_label=pos_label_validated,\n         )\n         return disp.plot(ax=ax, ref_line=ref_line, **kwargs)\ndiff --git a/sklearn/metrics/_base.py b/sklearn/metrics/_base.py\n--- a/sklearn/metrics/_base.py\n+++ b/sklearn/metrics/_base.py\n@@ -197,55 +197,3 @@ def _average_multiclass_ovo_score(binary_metric, y_true, y_score, average=\"macro\n         pair_scores[ix] = (a_true_score + b_true_score) / 2\n \n     return np.average(pair_scores, weights=prevalence)\n-\n-\n-def _check_pos_label_consistency(pos_label, y_true):\n-    \"\"\"Check if `pos_label` need to be specified or not.\n-\n-    In binary classification, we fix `pos_label=1` if the labels are in the set\n-    {-1, 1} or {0, 1}. Otherwise, we raise an error asking to specify the\n-    `pos_label` parameters.\n-\n-    Parameters\n-    ----------\n-    pos_label : int, str or None\n-        The positive label.\n-    y_true : ndarray of shape (n_samples,)\n-        The target vector.\n-\n-    Returns\n-    -------\n-    pos_label : int\n-        If `pos_label` can be inferred, it will be returned.\n-\n-    Raises\n-    ------\n-    ValueError\n-        In the case that `y_true` does not have label in {-1, 1} or {0, 1},\n-        it will raise a `ValueError`.\n-    \"\"\"\n-    # ensure binary classification if pos_label is not specified\n-    # classes.dtype.kind in ('O', 'U', 'S') is required to avoid\n-    # triggering a FutureWarning by calling np.array_equal(a, b)\n-    # when elements in the two arrays are not comparable.\n-    classes = np.unique(y_true)\n-    if pos_label is None and (\n-        classes.dtype.kind in \"OUS\"\n-        or not (\n-            np.array_equal(classes, [0, 1])\n-            or np.array_equal(classes, [-1, 1])\n-            or np.array_equal(classes, [0])\n-            or np.array_equal(classes, [-1])\n-            or np.array_equal(classes, [1])\n-        )\n-    ):\n-        classes_repr = \", \".join(repr(c) for c in classes)\n-        raise ValueError(\n-            f\"y_true takes value in {{{classes_repr}}} and pos_label is not \"\n-            \"specified: either make y_true take value in {0, 1} or \"\n-            \"{-1, 1} or pass pos_label explicitly.\"\n-        )\n-    elif pos_label is None:\n-        pos_label = 1\n-\n-    return pos_label\ndiff --git a/sklearn/metrics/_classification.py b/sklearn/metrics/_classification.py\n--- a/sklearn/metrics/_classification.py\n+++ b/sklearn/metrics/_classification.py\n@@ -40,13 +40,11 @@\n from ..utils.extmath import _nanaverage\n from ..utils.multiclass import unique_labels\n from ..utils.multiclass import type_of_target\n-from ..utils.validation import _num_samples\n+from ..utils.validation import _check_pos_label_consistency, _num_samples\n from ..utils.sparsefuncs import count_nonzero\n from ..utils._param_validation import StrOptions, Options, Interval, validate_params\n from ..exceptions import UndefinedMetricWarning\n \n-from ._base import _check_pos_label_consistency\n-\n \n def _check_zero_division(zero_division):\n     if isinstance(zero_division, str) and zero_division == \"warn\":\ndiff --git a/sklearn/metrics/_plot/det_curve.py b/sklearn/metrics/_plot/det_curve.py\n--- a/sklearn/metrics/_plot/det_curve.py\n+++ b/sklearn/metrics/_plot/det_curve.py\n@@ -1,13 +1,10 @@\n import scipy as sp\n \n from .. import det_curve\n-from .._base import _check_pos_label_consistency\n+from ...utils._plotting import _BinaryClassifierCurveDisplayMixin\n \n-from ...utils import check_matplotlib_support\n-from ...utils._response import _get_response_values_binary\n \n-\n-class DetCurveDisplay:\n+class DetCurveDisplay(_BinaryClassifierCurveDisplayMixin):\n     \"\"\"DET curve visualization.\n \n     It is recommend to use :func:`~sklearn.metrics.DetCurveDisplay.from_estimator`\n@@ -163,15 +160,13 @@ def from_estimator(\n         <...>\n         >>> plt.show()\n         \"\"\"\n-        check_matplotlib_support(f\"{cls.__name__}.from_estimator\")\n-\n-        name = estimator.__class__.__name__ if name is None else name\n-\n-        y_pred, pos_label = _get_response_values_binary(\n+        y_pred, pos_label, name = cls._validate_and_get_response_values(\n             estimator,\n             X,\n-            response_method,\n+            y,\n+            response_method=response_method,\n             pos_label=pos_label,\n+            name=name,\n         )\n \n         return cls.from_predictions(\n@@ -259,7 +254,10 @@ def from_predictions(\n         <...>\n         >>> plt.show()\n         \"\"\"\n-        check_matplotlib_support(f\"{cls.__name__}.from_predictions\")\n+        pos_label_validated, name = cls._validate_from_predictions_params(\n+            y_true, y_pred, sample_weight=sample_weight, pos_label=pos_label, name=name\n+        )\n+\n         fpr, fnr, _ = det_curve(\n             y_true,\n             y_pred,\n@@ -267,14 +265,11 @@ def from_predictions(\n             sample_weight=sample_weight,\n         )\n \n-        pos_label = _check_pos_label_consistency(pos_label, y_true)\n-        name = \"Classifier\" if name is None else name\n-\n         viz = DetCurveDisplay(\n             fpr=fpr,\n             fnr=fnr,\n             estimator_name=name,\n-            pos_label=pos_label,\n+            pos_label=pos_label_validated,\n         )\n \n         return viz.plot(ax=ax, name=name, **kwargs)\n@@ -300,18 +295,12 @@ def plot(self, ax=None, *, name=None, **kwargs):\n         display : :class:`~sklearn.metrics.plot.DetCurveDisplay`\n             Object that stores computed values.\n         \"\"\"\n-        check_matplotlib_support(\"DetCurveDisplay.plot\")\n+        self.ax_, self.figure_, name = self._validate_plot_params(ax=ax, name=name)\n \n-        name = self.estimator_name if name is None else name\n         line_kwargs = {} if name is None else {\"label\": name}\n         line_kwargs.update(**kwargs)\n \n-        import matplotlib.pyplot as plt\n-\n-        if ax is None:\n-            _, ax = plt.subplots()\n-\n-        (self.line_,) = ax.plot(\n+        (self.line_,) = self.ax_.plot(\n             sp.stats.norm.ppf(self.fpr),\n             sp.stats.norm.ppf(self.fnr),\n             **line_kwargs,\n@@ -322,10 +311,10 @@ def plot(self, ax=None, *, name=None, **kwargs):\n \n         xlabel = \"False Positive Rate\" + info_pos_label\n         ylabel = \"False Negative Rate\" + info_pos_label\n-        ax.set(xlabel=xlabel, ylabel=ylabel)\n+        self.ax_.set(xlabel=xlabel, ylabel=ylabel)\n \n         if \"label\" in line_kwargs:\n-            ax.legend(loc=\"lower right\")\n+            self.ax_.legend(loc=\"lower right\")\n \n         ticks = [0.001, 0.01, 0.05, 0.20, 0.5, 0.80, 0.95, 0.99, 0.999]\n         tick_locations = sp.stats.norm.ppf(ticks)\n@@ -333,13 +322,11 @@ def plot(self, ax=None, *, name=None, **kwargs):\n             \"{:.0%}\".format(s) if (100 * s).is_integer() else \"{:.1%}\".format(s)\n             for s in ticks\n         ]\n-        ax.set_xticks(tick_locations)\n-        ax.set_xticklabels(tick_labels)\n-        ax.set_xlim(-3, 3)\n-        ax.set_yticks(tick_locations)\n-        ax.set_yticklabels(tick_labels)\n-        ax.set_ylim(-3, 3)\n-\n-        self.ax_ = ax\n-        self.figure_ = ax.figure\n+        self.ax_.set_xticks(tick_locations)\n+        self.ax_.set_xticklabels(tick_labels)\n+        self.ax_.set_xlim(-3, 3)\n+        self.ax_.set_yticks(tick_locations)\n+        self.ax_.set_yticklabels(tick_labels)\n+        self.ax_.set_ylim(-3, 3)\n+\n         return self\ndiff --git a/sklearn/metrics/_plot/precision_recall_curve.py b/sklearn/metrics/_plot/precision_recall_curve.py\n--- a/sklearn/metrics/_plot/precision_recall_curve.py\n+++ b/sklearn/metrics/_plot/precision_recall_curve.py\n@@ -1,13 +1,9 @@\n from .. import average_precision_score\n from .. import precision_recall_curve\n-from .._base import _check_pos_label_consistency\n-from .._classification import check_consistent_length\n+from ...utils._plotting import _BinaryClassifierCurveDisplayMixin\n \n-from ...utils import check_matplotlib_support\n-from ...utils._response import _get_response_values_binary\n \n-\n-class PrecisionRecallDisplay:\n+class PrecisionRecallDisplay(_BinaryClassifierCurveDisplayMixin):\n     \"\"\"Precision Recall visualization.\n \n     It is recommend to use\n@@ -141,9 +137,7 @@ def plot(self, ax=None, *, name=None, **kwargs):\n         `drawstyle=\"default\"`. However, the curve will not be strictly\n         consistent with the reported average precision.\n         \"\"\"\n-        check_matplotlib_support(\"PrecisionRecallDisplay.plot\")\n-\n-        name = self.estimator_name if name is None else name\n+        self.ax_, self.figure_, name = self._validate_plot_params(ax=ax, name=name)\n \n         line_kwargs = {\"drawstyle\": \"steps-post\"}\n         if self.average_precision is not None and name is not None:\n@@ -154,25 +148,18 @@ def plot(self, ax=None, *, name=None, **kwargs):\n             line_kwargs[\"label\"] = name\n         line_kwargs.update(**kwargs)\n \n-        import matplotlib.pyplot as plt\n-\n-        if ax is None:\n-            fig, ax = plt.subplots()\n-\n-        (self.line_,) = ax.plot(self.recall, self.precision, **line_kwargs)\n+        (self.line_,) = self.ax_.plot(self.recall, self.precision, **line_kwargs)\n         info_pos_label = (\n             f\" (Positive label: {self.pos_label})\" if self.pos_label is not None else \"\"\n         )\n \n         xlabel = \"Recall\" + info_pos_label\n         ylabel = \"Precision\" + info_pos_label\n-        ax.set(xlabel=xlabel, ylabel=ylabel)\n+        self.ax_.set(xlabel=xlabel, ylabel=ylabel)\n \n         if \"label\" in line_kwargs:\n-            ax.legend(loc=\"lower left\")\n+            self.ax_.legend(loc=\"lower left\")\n \n-        self.ax_ = ax\n-        self.figure_ = ax.figure\n         return self\n \n     @classmethod\n@@ -273,18 +260,15 @@ def from_estimator(\n         <...>\n         >>> plt.show()\n         \"\"\"\n-        method_name = f\"{cls.__name__}.from_estimator\"\n-        check_matplotlib_support(method_name)\n-\n-        y_pred, pos_label = _get_response_values_binary(\n+        y_pred, pos_label, name = cls._validate_and_get_response_values(\n             estimator,\n             X,\n-            response_method,\n+            y,\n+            response_method=response_method,\n             pos_label=pos_label,\n+            name=name,\n         )\n \n-        name = name if name is not None else estimator.__class__.__name__\n-\n         return cls.from_predictions(\n             y,\n             y_pred,\n@@ -382,10 +366,9 @@ def from_predictions(\n         <...>\n         >>> plt.show()\n         \"\"\"\n-        check_matplotlib_support(f\"{cls.__name__}.from_predictions\")\n-\n-        check_consistent_length(y_true, y_pred, sample_weight)\n-        pos_label = _check_pos_label_consistency(pos_label, y_true)\n+        pos_label, name = cls._validate_from_predictions_params(\n+            y_true, y_pred, sample_weight=sample_weight, pos_label=pos_label, name=name\n+        )\n \n         precision, recall, _ = precision_recall_curve(\n             y_true,\n@@ -398,8 +381,6 @@ def from_predictions(\n             y_true, y_pred, pos_label=pos_label, sample_weight=sample_weight\n         )\n \n-        name = name if name is not None else \"Classifier\"\n-\n         viz = PrecisionRecallDisplay(\n             precision=precision,\n             recall=recall,\ndiff --git a/sklearn/metrics/_plot/roc_curve.py b/sklearn/metrics/_plot/roc_curve.py\n--- a/sklearn/metrics/_plot/roc_curve.py\n+++ b/sklearn/metrics/_plot/roc_curve.py\n@@ -1,12 +1,9 @@\n from .. import auc\n from .. import roc_curve\n-from .._base import _check_pos_label_consistency\n+from ...utils._plotting import _BinaryClassifierCurveDisplayMixin\n \n-from ...utils import check_matplotlib_support\n-from ...utils._response import _get_response_values_binary\n \n-\n-class RocCurveDisplay:\n+class RocCurveDisplay(_BinaryClassifierCurveDisplayMixin):\n     \"\"\"ROC Curve visualization.\n \n     It is recommend to use\n@@ -128,9 +125,7 @@ def plot(\n         display : :class:`~sklearn.metrics.plot.RocCurveDisplay`\n             Object that stores computed values.\n         \"\"\"\n-        check_matplotlib_support(\"RocCurveDisplay.plot\")\n-\n-        name = self.estimator_name if name is None else name\n+        self.ax_, self.figure_, name = self._validate_plot_params(ax=ax, name=name)\n \n         line_kwargs = {}\n         if self.roc_auc is not None and name is not None:\n@@ -151,30 +146,25 @@ def plot(\n         if chance_level_kw is not None:\n             chance_level_line_kw.update(**chance_level_kw)\n \n-        import matplotlib.pyplot as plt\n-\n-        if ax is None:\n-            fig, ax = plt.subplots()\n-\n-        (self.line_,) = ax.plot(self.fpr, self.tpr, **line_kwargs)\n+        (self.line_,) = self.ax_.plot(self.fpr, self.tpr, **line_kwargs)\n         info_pos_label = (\n             f\" (Positive label: {self.pos_label})\" if self.pos_label is not None else \"\"\n         )\n \n         xlabel = \"False Positive Rate\" + info_pos_label\n         ylabel = \"True Positive Rate\" + info_pos_label\n-        ax.set(xlabel=xlabel, ylabel=ylabel)\n+        self.ax_.set(xlabel=xlabel, ylabel=ylabel)\n \n         if plot_chance_level:\n-            (self.chance_level_,) = ax.plot((0, 1), (0, 1), **chance_level_line_kw)\n+            (self.chance_level_,) = self.ax_.plot(\n+                (0, 1), (0, 1), **chance_level_line_kw\n+            )\n         else:\n             self.chance_level_ = None\n \n-        if \"label\" in line_kwargs:\n-            ax.legend(loc=\"lower right\")\n+        if \"label\" in line_kwargs or \"label\" in chance_level_line_kw:\n+            self.ax_.legend(loc=\"lower right\")\n \n-        self.ax_ = ax\n-        self.figure_ = ax.figure\n         return self\n \n     @classmethod\n@@ -277,15 +267,13 @@ def from_estimator(\n         <...>\n         >>> plt.show()\n         \"\"\"\n-        check_matplotlib_support(f\"{cls.__name__}.from_estimator\")\n-\n-        name = estimator.__class__.__name__ if name is None else name\n-\n-        y_pred, pos_label = _get_response_values_binary(\n+        y_pred, pos_label, name = cls._validate_and_get_response_values(\n             estimator,\n             X,\n+            y,\n             response_method=response_method,\n             pos_label=pos_label,\n+            name=name,\n         )\n \n         return cls.from_predictions(\n@@ -396,7 +384,9 @@ def from_predictions(\n         <...>\n         >>> plt.show()\n         \"\"\"\n-        check_matplotlib_support(f\"{cls.__name__}.from_predictions\")\n+        pos_label_validated, name = cls._validate_from_predictions_params(\n+            y_true, y_pred, sample_weight=sample_weight, pos_label=pos_label, name=name\n+        )\n \n         fpr, tpr, _ = roc_curve(\n             y_true,\n@@ -407,11 +397,12 @@ def from_predictions(\n         )\n         roc_auc = auc(fpr, tpr)\n \n-        name = \"Classifier\" if name is None else name\n-        pos_label = _check_pos_label_consistency(pos_label, y_true)\n-\n         viz = RocCurveDisplay(\n-            fpr=fpr, tpr=tpr, roc_auc=roc_auc, estimator_name=name, pos_label=pos_label\n+            fpr=fpr,\n+            tpr=tpr,\n+            roc_auc=roc_auc,\n+            estimator_name=name,\n+            pos_label=pos_label_validated,\n         )\n \n         return viz.plot(\ndiff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py\n--- a/sklearn/metrics/_ranking.py\n+++ b/sklearn/metrics/_ranking.py\n@@ -29,7 +29,7 @@\n \n from ..utils import assert_all_finite\n from ..utils import check_consistent_length\n-from ..utils.validation import _check_sample_weight\n+from ..utils.validation import _check_pos_label_consistency, _check_sample_weight\n from ..utils import column_or_1d, check_array\n from ..utils.multiclass import type_of_target\n from ..utils.extmath import stable_cumsum\n@@ -39,11 +39,7 @@\n from ..preprocessing import label_binarize\n from ..utils._encode import _encode, _unique\n \n-from ._base import (\n-    _average_binary_score,\n-    _average_multiclass_ovo_score,\n-    _check_pos_label_consistency,\n-)\n+from ._base import _average_binary_score, _average_multiclass_ovo_score\n \n \n @validate_params({\"x\": [\"array-like\"], \"y\": [\"array-like\"]})\ndiff --git a/sklearn/utils/_plotting.py b/sklearn/utils/_plotting.py\nnew file mode 100644\n--- /dev/null\n+++ b/sklearn/utils/_plotting.py\n@@ -0,0 +1,58 @@\n+from . import check_consistent_length, check_matplotlib_support\n+from .multiclass import type_of_target\n+from .validation import _check_pos_label_consistency\n+from ._response import _get_response_values_binary\n+\n+\n+class _BinaryClassifierCurveDisplayMixin:\n+    \"\"\"Mixin class to be used in Displays requiring a binary classifier.\n+\n+    The aim of this class is to centralize some validations regarding the estimator and\n+    the target and gather the response of the estimator.\n+    \"\"\"\n+\n+    def _validate_plot_params(self, *, ax=None, name=None):\n+        check_matplotlib_support(f\"{self.__class__.__name__}.plot\")\n+        import matplotlib.pyplot as plt\n+\n+        if ax is None:\n+            _, ax = plt.subplots()\n+\n+        name = self.estimator_name if name is None else name\n+        return ax, ax.figure, name\n+\n+    @classmethod\n+    def _validate_and_get_response_values(\n+        cls, estimator, X, y, *, response_method=\"auto\", pos_label=None, name=None\n+    ):\n+        check_matplotlib_support(f\"{cls.__name__}.from_estimator\")\n+\n+        name = estimator.__class__.__name__ if name is None else name\n+\n+        y_pred, pos_label = _get_response_values_binary(\n+            estimator,\n+            X,\n+            response_method=response_method,\n+            pos_label=pos_label,\n+        )\n+\n+        return y_pred, pos_label, name\n+\n+    @classmethod\n+    def _validate_from_predictions_params(\n+        cls, y_true, y_pred, *, sample_weight=None, pos_label=None, name=None\n+    ):\n+        check_matplotlib_support(f\"{cls.__name__}.from_predictions\")\n+\n+        if type_of_target(y_true) != \"binary\":\n+            raise ValueError(\n+                f\"The target y is not binary. Got {type_of_target(y_true)} type of\"\n+                \" target.\"\n+            )\n+\n+        check_consistent_length(y_true, y_pred, sample_weight)\n+        pos_label = _check_pos_label_consistency(pos_label, y_true)\n+\n+        name = name if name is not None else \"Classifier\"\n+\n+        return pos_label, name\ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -2145,3 +2145,55 @@ def _check_monotonic_cst(estimator, monotonic_cst=None):\n                 f\"X has {estimator.n_features_in_} features.\"\n             )\n     return monotonic_cst\n+\n+\n+def _check_pos_label_consistency(pos_label, y_true):\n+    \"\"\"Check if `pos_label` need to be specified or not.\n+\n+    In binary classification, we fix `pos_label=1` if the labels are in the set\n+    {-1, 1} or {0, 1}. Otherwise, we raise an error asking to specify the\n+    `pos_label` parameters.\n+\n+    Parameters\n+    ----------\n+    pos_label : int, str or None\n+        The positive label.\n+    y_true : ndarray of shape (n_samples,)\n+        The target vector.\n+\n+    Returns\n+    -------\n+    pos_label : int\n+        If `pos_label` can be inferred, it will be returned.\n+\n+    Raises\n+    ------\n+    ValueError\n+        In the case that `y_true` does not have label in {-1, 1} or {0, 1},\n+        it will raise a `ValueError`.\n+    \"\"\"\n+    # ensure binary classification if pos_label is not specified\n+    # classes.dtype.kind in ('O', 'U', 'S') is required to avoid\n+    # triggering a FutureWarning by calling np.array_equal(a, b)\n+    # when elements in the two arrays are not comparable.\n+    classes = np.unique(y_true)\n+    if pos_label is None and (\n+        classes.dtype.kind in \"OUS\"\n+        or not (\n+            np.array_equal(classes, [0, 1])\n+            or np.array_equal(classes, [-1, 1])\n+            or np.array_equal(classes, [0])\n+            or np.array_equal(classes, [-1])\n+            or np.array_equal(classes, [1])\n+        )\n+    ):\n+        classes_repr = \", \".join(repr(c) for c in classes)\n+        raise ValueError(\n+            f\"y_true takes value in {{{classes_repr}}} and pos_label is not \"\n+            \"specified: either make y_true take value in {0, 1} or \"\n+            \"{-1, 1} or pass pos_label explicitly.\"\n+        )\n+    elif pos_label is None:\n+        pos_label = 1\n+\n+    return pos_label\n",
  "test_patch": "diff --git a/sklearn/metrics/_plot/tests/test_common_curve_display.py b/sklearn/metrics/_plot/tests/test_common_curve_display.py\n--- a/sklearn/metrics/_plot/tests/test_common_curve_display.py\n+++ b/sklearn/metrics/_plot/tests/test_common_curve_display.py\n@@ -1,3 +1,4 @@\n+import numpy as np\n import pytest\n \n from sklearn.base import ClassifierMixin, clone\n@@ -7,8 +8,9 @@\n from sklearn.linear_model import LogisticRegression\n from sklearn.pipeline import make_pipeline\n from sklearn.preprocessing import StandardScaler\n-from sklearn.tree import DecisionTreeClassifier\n+from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n \n+from sklearn.calibration import CalibrationDisplay\n from sklearn.metrics import (\n     DetCurveDisplay,\n     PrecisionRecallDisplay,\n@@ -28,18 +30,57 @@ def data_binary(data):\n \n \n @pytest.mark.parametrize(\n-    \"Display\", [DetCurveDisplay, PrecisionRecallDisplay, RocCurveDisplay]\n+    \"Display\",\n+    [CalibrationDisplay, DetCurveDisplay, PrecisionRecallDisplay, RocCurveDisplay],\n )\n-def test_display_curve_error_non_binary(pyplot, data, Display):\n+def test_display_curve_error_classifier(pyplot, data, data_binary, Display):\n     \"\"\"Check that a proper error is raised when only binary classification is\n     supported.\"\"\"\n     X, y = data\n+    X_binary, y_binary = data_binary\n     clf = DecisionTreeClassifier().fit(X, y)\n \n+    # Case 1: multiclass classifier with multiclass target\n     msg = \"Expected 'estimator' to be a binary classifier. Got 3 classes instead.\"\n     with pytest.raises(ValueError, match=msg):\n         Display.from_estimator(clf, X, y)\n \n+    # Case 2: multiclass classifier with binary target\n+    with pytest.raises(ValueError, match=msg):\n+        Display.from_estimator(clf, X_binary, y_binary)\n+\n+    # Case 3: binary classifier with multiclass target\n+    clf = DecisionTreeClassifier().fit(X_binary, y_binary)\n+    msg = \"The target y is not binary. Got multiclass type of target.\"\n+    with pytest.raises(ValueError, match=msg):\n+        Display.from_estimator(clf, X, y)\n+\n+\n+@pytest.mark.parametrize(\n+    \"Display\",\n+    [CalibrationDisplay, DetCurveDisplay, PrecisionRecallDisplay, RocCurveDisplay],\n+)\n+def test_display_curve_error_regression(pyplot, data_binary, Display):\n+    \"\"\"Check that we raise an error with regressor.\"\"\"\n+\n+    # Case 1: regressor\n+    X, y = data_binary\n+    regressor = DecisionTreeRegressor().fit(X, y)\n+\n+    msg = \"Expected 'estimator' to be a binary classifier. Got DecisionTreeRegressor\"\n+    with pytest.raises(ValueError, match=msg):\n+        Display.from_estimator(regressor, X, y)\n+\n+    # Case 2: regression target\n+    classifier = DecisionTreeClassifier().fit(X, y)\n+    # Force `y_true` to be seen as a regression problem\n+    y = y + 0.5\n+    msg = \"The target y is not binary. Got continuous type of target.\"\n+    with pytest.raises(ValueError, match=msg):\n+        Display.from_estimator(classifier, X, y)\n+    with pytest.raises(ValueError, match=msg):\n+        Display.from_predictions(y, regressor.fit(X, y).predict(X))\n+\n \n @pytest.mark.parametrize(\n     \"response_method, msg\",\n@@ -148,3 +189,36 @@ def test_display_curve_not_fitted_errors(pyplot, data_binary, clf, Display):\n     disp = Display.from_estimator(model, X, y)\n     assert model.__class__.__name__ in disp.line_.get_label()\n     assert disp.estimator_name == model.__class__.__name__\n+\n+\n+@pytest.mark.parametrize(\n+    \"Display\", [DetCurveDisplay, PrecisionRecallDisplay, RocCurveDisplay]\n+)\n+def test_display_curve_n_samples_consistency(pyplot, data_binary, Display):\n+    \"\"\"Check the error raised when `y_pred` or `sample_weight` have inconsistent\n+    length.\"\"\"\n+    X, y = data_binary\n+    classifier = DecisionTreeClassifier().fit(X, y)\n+\n+    msg = \"Found input variables with inconsistent numbers of samples\"\n+    with pytest.raises(ValueError, match=msg):\n+        Display.from_estimator(classifier, X[:-2], y)\n+    with pytest.raises(ValueError, match=msg):\n+        Display.from_estimator(classifier, X, y[:-2])\n+    with pytest.raises(ValueError, match=msg):\n+        Display.from_estimator(classifier, X, y, sample_weight=np.ones(X.shape[0] - 2))\n+\n+\n+@pytest.mark.parametrize(\n+    \"Display\", [DetCurveDisplay, PrecisionRecallDisplay, RocCurveDisplay]\n+)\n+def test_display_curve_error_pos_label(pyplot, data_binary, Display):\n+    \"\"\"Check consistence of error message when `pos_label` should be specified.\"\"\"\n+    X, y = data_binary\n+    y = y + 10\n+\n+    classifier = DecisionTreeClassifier().fit(X, y)\n+    y_pred = classifier.predict_proba(X)[:, -1]\n+    msg = r\"y_true takes value in {10, 11} and pos_label is not specified\"\n+    with pytest.raises(ValueError, match=msg):\n+        Display.from_predictions(y, y_pred)\ndiff --git a/sklearn/metrics/_plot/tests/test_precision_recall_display.py b/sklearn/metrics/_plot/tests/test_precision_recall_display.py\n--- a/sklearn/metrics/_plot/tests/test_precision_recall_display.py\n+++ b/sklearn/metrics/_plot/tests/test_precision_recall_display.py\n@@ -9,7 +9,6 @@\n from sklearn.model_selection import train_test_split\n from sklearn.pipeline import make_pipeline\n from sklearn.preprocessing import StandardScaler\n-from sklearn.svm import SVC, SVR\n from sklearn.utils import shuffle\n \n from sklearn.metrics import PrecisionRecallDisplay\n@@ -21,48 +20,6 @@\n )\n \n \n-def test_precision_recall_display_validation(pyplot):\n-    \"\"\"Check that we raise the proper error when validating parameters.\"\"\"\n-    X, y = make_classification(\n-        n_samples=100, n_informative=5, n_classes=5, random_state=0\n-    )\n-\n-    with pytest.raises(NotFittedError):\n-        PrecisionRecallDisplay.from_estimator(SVC(), X, y)\n-\n-    regressor = SVR().fit(X, y)\n-    y_pred_regressor = regressor.predict(X)\n-    classifier = SVC(probability=True).fit(X, y)\n-    y_pred_classifier = classifier.predict_proba(X)[:, -1]\n-\n-    err_msg = \"Expected 'estimator' to be a binary classifier. Got SVR instead.\"\n-    with pytest.raises(ValueError, match=err_msg):\n-        PrecisionRecallDisplay.from_estimator(regressor, X, y)\n-\n-    err_msg = \"Expected 'estimator' to be a binary classifier.\"\n-    with pytest.raises(ValueError, match=err_msg):\n-        PrecisionRecallDisplay.from_estimator(classifier, X, y)\n-\n-    err_msg = \"{} format is not supported\"\n-    with pytest.raises(ValueError, match=err_msg.format(\"continuous\")):\n-        # Force `y_true` to be seen as a regression problem\n-        PrecisionRecallDisplay.from_predictions(y + 0.5, y_pred_classifier, pos_label=1)\n-    with pytest.raises(ValueError, match=err_msg.format(\"multiclass\")):\n-        PrecisionRecallDisplay.from_predictions(y, y_pred_regressor, pos_label=1)\n-\n-    err_msg = \"Found input variables with inconsistent numbers of samples\"\n-    with pytest.raises(ValueError, match=err_msg):\n-        PrecisionRecallDisplay.from_predictions(y, y_pred_classifier[::2])\n-\n-    X, y = make_classification(n_classes=2, n_samples=50, random_state=0)\n-    y += 10\n-    classifier.fit(X, y)\n-    y_pred_classifier = classifier.predict_proba(X)[:, -1]\n-    err_msg = r\"y_true takes value in {10, 11} and pos_label is not specified\"\n-    with pytest.raises(ValueError, match=err_msg):\n-        PrecisionRecallDisplay.from_predictions(y, y_pred_classifier)\n-\n-\n @pytest.mark.parametrize(\"constructor_name\", [\"from_estimator\", \"from_predictions\"])\n @pytest.mark.parametrize(\"response_method\", [\"predict_proba\", \"decision_function\"])\n @pytest.mark.parametrize(\"drop_intermediate\", [True, False])\ndiff --git a/sklearn/tests/test_calibration.py b/sklearn/tests/test_calibration.py\n--- a/sklearn/tests/test_calibration.py\n+++ b/sklearn/tests/test_calibration.py\n@@ -25,7 +25,7 @@\n     RandomForestClassifier,\n     VotingClassifier,\n )\n-from sklearn.linear_model import LogisticRegression, LinearRegression\n+from sklearn.linear_model import LogisticRegression\n from sklearn.tree import DecisionTreeClassifier\n from sklearn.svm import LinearSVC\n from sklearn.pipeline import Pipeline, make_pipeline\n@@ -595,42 +595,6 @@ def iris_data_binary(iris_data):\n     return X[y < 2], y[y < 2]\n \n \n-def test_calibration_display_validation(pyplot, iris_data, iris_data_binary):\n-    X, y = iris_data\n-    X_binary, y_binary = iris_data_binary\n-\n-    reg = LinearRegression().fit(X, y)\n-    msg = \"Expected 'estimator' to be a binary classifier. Got LinearRegression\"\n-    with pytest.raises(ValueError, match=msg):\n-        CalibrationDisplay.from_estimator(reg, X, y)\n-\n-    clf = LinearSVC().fit(X_binary, y_binary)\n-    msg = \"has none of the following attributes: predict_proba.\"\n-    with pytest.raises(AttributeError, match=msg):\n-        CalibrationDisplay.from_estimator(clf, X, y)\n-\n-    clf = LogisticRegression()\n-    with pytest.raises(NotFittedError):\n-        CalibrationDisplay.from_estimator(clf, X, y)\n-\n-\n-@pytest.mark.parametrize(\"constructor_name\", [\"from_estimator\", \"from_predictions\"])\n-def test_calibration_display_non_binary(pyplot, iris_data, constructor_name):\n-    X, y = iris_data\n-    clf = DecisionTreeClassifier()\n-    clf.fit(X, y)\n-    y_prob = clf.predict_proba(X)\n-\n-    if constructor_name == \"from_estimator\":\n-        msg = \"to be a binary classifier. Got 3 classes instead.\"\n-        with pytest.raises(ValueError, match=msg):\n-            CalibrationDisplay.from_estimator(clf, X, y)\n-    else:\n-        msg = \"The target y is not binary. Got multiclass type of target.\"\n-        with pytest.raises(ValueError, match=msg):\n-            CalibrationDisplay.from_predictions(y, y_prob)\n-\n-\n @pytest.mark.parametrize(\"n_bins\", [5, 10])\n @pytest.mark.parametrize(\"strategy\", [\"uniform\", \"quantile\"])\n def test_calibration_display_compute(pyplot, iris_data_binary, n_bins, strategy):\n",
  "problem_statement": "MNT Adds CurveDisplayMixin _get_response_values\nSupersede #18212\r\nSupersede #18589 \r\ncloses #18589\r\n\r\nThis is a new PR that bring back to life #18589. Too much diff has been created since, so it is better to restart fresh.\r\n\r\nIn a subsequent PRs, I will introduce:\r\n\r\n- remove the file `sklearn/metrics/_plot/base.py`\r\n- `_check_response_method` in the following classes/functions: `plot_partial_dependence`/`PartialDependenceDisplay`\r\n- `_get_response` in the following classes/functions: `plot_precision_recall_curve`/`PrecisionRecallDisplay`, `plot_roc_curve`/`RocCurveDisplay` and most probably the `CalibrationDisplay`.\r\n- Finally, `_get_response` will be used in the scorer API.\r\n\r\n<details>\r\n\r\nPrevious summary in #18589 \r\n\r\nRefactor the scorer such that they make use of `_get_response` already define in the plotting function.\r\nThis refactoring can also be beneficial for #16525.\r\n\r\nSummary of what was done:\r\n\r\n* Create a `_check_response_method`. Its job is to return the method of a classifier or a regressor to later predict. If the method does not exist, it raises an error. This function was already existing indeed.\r\n* Create a `_get_response`. A function that returns the prediction depending on the response method. We take into account the `pos_label`. Thus, it will allow to not make any mistake in the future by forgetting to inverse the decision function or select the right column of probabilities for binary classification. We hard-coded this behaviour in a lot of different places and this function reduces the amount of redundant code.\r\n* The rest of the code is just to replace the pre-existing code and use these 2 new functions.\r\n* And as a bonus, several units tests that are directly testing the 2 functions.\r\n\r\n</details>\n",
  "hints_text": "@rth @thomasjpfan @ogrisel Here comes the PR that should refactor the code of the `_get_response`. For the moment I did not find and replace where is used to only focus on the tools. Indeed, there is nothing different from the original PR but I am thinking that it might be easier to review first this part, and then I could open a subsequent PR to find and replace the places where to use these tools.\r\n\r\nWDYT?\nIf you need to be convinced regarding where these two functions will be used, you can have a quick look at the older PR: https://github.com/scikit-learn/scikit-learn/pull/18589\nI added 2 examples of where the method will be used for the display. Be aware that the main point of moving `_get_response` outside of the `_plot` module is that I will be able to use it in the `scorer`. The second advantage is that we will make sure that we have a proper handling of the `pos_label`.\n> What do you think of breaking this PR into two smaller ones?\r\n\r\nI will try to do that in a new PR. I will keep this one as is to facilitate the rebasing later.\nLet's move that to 1.2",
  "created_at": "2023-03-24T19:24:52Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_classifier[DetCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_classifier[PrecisionRecallDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_classifier[RocCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_regression[DetCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_regression[PrecisionRecallDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_regression[RocCurveDisplay]\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_classifier[CalibrationDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_regression[CalibrationDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[DetCurveDisplay-predict_proba-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[DetCurveDisplay-decision_function-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[DetCurveDisplay-auto-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[DetCurveDisplay-bad_method-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[PrecisionRecallDisplay-predict_proba-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[PrecisionRecallDisplay-decision_function-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[PrecisionRecallDisplay-auto-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[PrecisionRecallDisplay-bad_method-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[RocCurveDisplay-predict_proba-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[RocCurveDisplay-decision_function-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[RocCurveDisplay-auto-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_no_response[RocCurveDisplay-bad_method-MyClassifier\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_estimator_name_multiple_calls[from_estimator-DetCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_estimator_name_multiple_calls[from_estimator-PrecisionRecallDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_estimator_name_multiple_calls[from_estimator-RocCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_estimator_name_multiple_calls[from_predictions-DetCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_estimator_name_multiple_calls[from_predictions-PrecisionRecallDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_estimator_name_multiple_calls[from_predictions-RocCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_not_fitted_errors[DetCurveDisplay-clf0]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_not_fitted_errors[DetCurveDisplay-clf1]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_not_fitted_errors[DetCurveDisplay-clf2]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_not_fitted_errors[PrecisionRecallDisplay-clf0]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_not_fitted_errors[PrecisionRecallDisplay-clf1]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_not_fitted_errors[PrecisionRecallDisplay-clf2]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_not_fitted_errors[RocCurveDisplay-clf0]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_not_fitted_errors[RocCurveDisplay-clf1]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_not_fitted_errors[RocCurveDisplay-clf2]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_n_samples_consistency[DetCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_n_samples_consistency[PrecisionRecallDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_n_samples_consistency[RocCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_pos_label[DetCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_pos_label[PrecisionRecallDisplay]\", \"sklearn/metrics/_plot/tests/test_common_curve_display.py::test_display_curve_error_pos_label[RocCurveDisplay]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_plotting[True-predict_proba-from_estimator]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_plotting[True-predict_proba-from_predictions]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_plotting[True-decision_function-from_estimator]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_plotting[True-decision_function-from_predictions]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_plotting[False-predict_proba-from_estimator]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_plotting[False-predict_proba-from_predictions]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_plotting[False-decision_function-from_estimator]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_plotting[False-decision_function-from_predictions]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_name[from_estimator-LogisticRegression\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_name[from_predictions-Classifier\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_pipeline[clf0]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_pipeline[clf1]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_precision_recall_display_string_labels\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_default_labels[0.9-None-AP\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_default_labels[None-my_est-my_est]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_default_labels[0.8-my_est2-my_est2\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_plot_precision_recall_pos_label[predict_proba-from_estimator]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_plot_precision_recall_pos_label[predict_proba-from_predictions]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_plot_precision_recall_pos_label[decision_function-from_estimator]\", \"sklearn/metrics/_plot/tests/test_precision_recall_display.py::test_plot_precision_recall_pos_label[decision_function-from_predictions]\", \"sklearn/tests/test_calibration.py::test_calibration[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_default_estimator\", \"sklearn/tests/test_calibration.py::test_calibration_cv_splitter[True]\", \"sklearn/tests/test_calibration.py::test_calibration_cv_splitter[False]\", \"sklearn/tests/test_calibration.py::test_sample_weight[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_sample_weight[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_sample_weight[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_sample_weight[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_parallel_execution[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_parallel_execution[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_parallel_execution[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_parallel_execution[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[0-True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[0-True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[0-False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[0-False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[1-True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[1-True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[1-False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[1-False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_zero_probability\", \"sklearn/tests/test_calibration.py::test_calibration_prefit\", \"sklearn/tests/test_calibration.py::test_calibration_ensemble_false[sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_ensemble_false[isotonic]\", \"sklearn/tests/test_calibration.py::test_sigmoid_calibration\", \"sklearn/tests/test_calibration.py::test_calibration_curve\", \"sklearn/tests/test_calibration.py::test_calibration_nan_imputer[True]\", \"sklearn/tests/test_calibration.py::test_calibration_nan_imputer[False]\", \"sklearn/tests/test_calibration.py::test_calibration_prob_sum[True]\", \"sklearn/tests/test_calibration.py::test_calibration_prob_sum[False]\", \"sklearn/tests/test_calibration.py::test_calibration_less_classes[True]\", \"sklearn/tests/test_calibration.py::test_calibration_less_classes[False]\", \"sklearn/tests/test_calibration.py::test_calibration_accepts_ndarray[X0]\", \"sklearn/tests/test_calibration.py::test_calibration_accepts_ndarray[X1]\", \"sklearn/tests/test_calibration.py::test_calibration_dict_pipeline\", \"sklearn/tests/test_calibration.py::test_calibration_attributes[clf0-2]\", \"sklearn/tests/test_calibration.py::test_calibration_attributes[clf1-prefit]\", \"sklearn/tests/test_calibration.py::test_calibration_inconsistent_prefit_n_features_in\", \"sklearn/tests/test_calibration.py::test_calibration_votingclassifier\", \"sklearn/tests/test_calibration.py::test_calibration_display_compute[uniform-5]\", \"sklearn/tests/test_calibration.py::test_calibration_display_compute[uniform-10]\", \"sklearn/tests/test_calibration.py::test_calibration_display_compute[quantile-5]\", \"sklearn/tests/test_calibration.py::test_calibration_display_compute[quantile-10]\", \"sklearn/tests/test_calibration.py::test_plot_calibration_curve_pipeline\", \"sklearn/tests/test_calibration.py::test_calibration_display_default_labels[None-_line1]\", \"sklearn/tests/test_calibration.py::test_calibration_display_default_labels[my_est-my_est]\", \"sklearn/tests/test_calibration.py::test_calibration_display_label_class_plot\", \"sklearn/tests/test_calibration.py::test_calibration_display_name_multiple_calls[from_estimator]\", \"sklearn/tests/test_calibration.py::test_calibration_display_name_multiple_calls[from_predictions]\", \"sklearn/tests/test_calibration.py::test_calibration_display_ref_line\", \"sklearn/tests/test_calibration.py::test_calibration_curve_pos_label_error_str[str]\", \"sklearn/tests/test_calibration.py::test_calibration_curve_pos_label_error_str[object]\", \"sklearn/tests/test_calibration.py::test_calibration_curve_pos_label[str]\", \"sklearn/tests/test_calibration.py::test_calibration_curve_pos_label[object]\", \"sklearn/tests/test_calibration.py::test_calibration_display_pos_label[None-1]\", \"sklearn/tests/test_calibration.py::test_calibration_display_pos_label[0-0]\", \"sklearn/tests/test_calibration.py::test_calibration_display_pos_label[1-1]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_with_fit_params[list]\", \"sklearn/tests/test_calibration.py::test_calibration_with_fit_params[array]\", \"sklearn/tests/test_calibration.py::test_calibration_with_sample_weight_base_estimator[sample_weight0]\", \"sklearn/tests/test_calibration.py::test_calibration_with_sample_weight_base_estimator[sample_weight1]\", \"sklearn/tests/test_calibration.py::test_calibration_without_sample_weight_base_estimator\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_error_base_estimator\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_deprecation_base_estimator\", \"sklearn/tests/test_calibration.py::test_calibration_with_non_sample_aligned_fit_param\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.023733",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}