{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-7400",
  "base_commit": "b21f62ee37eea3650a58e9ffa3a7c9f4ae83006b",
  "patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -5,7 +5,7 @@\n import pandas as pd\n \n from xarray.core import dtypes, utils\n-from xarray.core.alignment import align\n+from xarray.core.alignment import align, reindex_variables\n from xarray.core.duck_array_ops import lazy_array_equiv\n from xarray.core.indexes import Index, PandasIndex\n from xarray.core.merge import (\n@@ -378,7 +378,9 @@ def process_subset_opt(opt, subset):\n \n             elif opt == \"all\":\n                 concat_over.update(\n-                    set(getattr(datasets[0], subset)) - set(datasets[0].dims)\n+                    set().union(\n+                        *list(set(getattr(d, subset)) - set(d.dims) for d in datasets)\n+                    )\n                 )\n             elif opt == \"minimal\":\n                 pass\n@@ -406,19 +408,26 @@ def process_subset_opt(opt, subset):\n \n # determine dimensional coordinate names and a dict mapping name to DataArray\n def _parse_datasets(\n-    datasets: Iterable[T_Dataset],\n-) -> tuple[dict[Hashable, Variable], dict[Hashable, int], set[Hashable], set[Hashable]]:\n-\n+    datasets: list[T_Dataset],\n+) -> tuple[\n+    dict[Hashable, Variable],\n+    dict[Hashable, int],\n+    set[Hashable],\n+    set[Hashable],\n+    list[Hashable],\n+]:\n     dims: set[Hashable] = set()\n     all_coord_names: set[Hashable] = set()\n     data_vars: set[Hashable] = set()  # list of data_vars\n     dim_coords: dict[Hashable, Variable] = {}  # maps dim name to variable\n     dims_sizes: dict[Hashable, int] = {}  # shared dimension sizes to expand variables\n+    variables_order: dict[Hashable, Variable] = {}  # variables in order of appearance\n \n     for ds in datasets:\n         dims_sizes.update(ds.dims)\n         all_coord_names.update(ds.coords)\n         data_vars.update(ds.data_vars)\n+        variables_order.update(ds.variables)\n \n         # preserves ordering of dimensions\n         for dim in ds.dims:\n@@ -429,7 +438,7 @@ def _parse_datasets(\n                 dim_coords[dim] = ds.coords[dim].variable\n         dims = dims | set(ds.dims)\n \n-    return dim_coords, dims_sizes, all_coord_names, data_vars\n+    return dim_coords, dims_sizes, all_coord_names, data_vars, list(variables_order)\n \n \n def _dataset_concat(\n@@ -439,7 +448,7 @@ def _dataset_concat(\n     coords: str | list[str],\n     compat: CompatOptions,\n     positions: Iterable[Iterable[int]] | None,\n-    fill_value: object = dtypes.NA,\n+    fill_value: Any = dtypes.NA,\n     join: JoinOptions = \"outer\",\n     combine_attrs: CombineAttrsOptions = \"override\",\n ) -> T_Dataset:\n@@ -471,7 +480,9 @@ def _dataset_concat(\n         align(*datasets, join=join, copy=False, exclude=[dim], fill_value=fill_value)\n     )\n \n-    dim_coords, dims_sizes, coord_names, data_names = _parse_datasets(datasets)\n+    dim_coords, dims_sizes, coord_names, data_names, vars_order = _parse_datasets(\n+        datasets\n+    )\n     dim_names = set(dim_coords)\n     unlabeled_dims = dim_names - coord_names\n \n@@ -525,7 +536,7 @@ def _dataset_concat(\n \n     # we've already verified everything is consistent; now, calculate\n     # shared dimension sizes so we can expand the necessary variables\n-    def ensure_common_dims(vars):\n+    def ensure_common_dims(vars, concat_dim_lengths):\n         # ensure each variable with the given name shares the same\n         # dimensions and the same shape for all of them except along the\n         # concat dimension\n@@ -553,16 +564,35 @@ def get_indexes(name):\n                     data = var.set_dims(dim).values\n                     yield PandasIndex(data, dim, coord_dtype=var.dtype)\n \n+    # create concatenation index, needed for later reindexing\n+    concat_index = list(range(sum(concat_dim_lengths)))\n+\n     # stack up each variable and/or index to fill-out the dataset (in order)\n     # n.b. this loop preserves variable order, needed for groupby.\n-    for name in datasets[0].variables:\n+    for name in vars_order:\n         if name in concat_over and name not in result_indexes:\n-            try:\n-                vars = ensure_common_dims([ds[name].variable for ds in datasets])\n-            except KeyError:\n-                raise ValueError(f\"{name!r} is not present in all datasets.\")\n-\n-            # Try concatenate the indexes, concatenate the variables when no index\n+            variables = []\n+            variable_index = []\n+            var_concat_dim_length = []\n+            for i, ds in enumerate(datasets):\n+                if name in ds.variables:\n+                    variables.append(ds[name].variable)\n+                    # add to variable index, needed for reindexing\n+                    var_idx = [\n+                        sum(concat_dim_lengths[:i]) + k\n+                        for k in range(concat_dim_lengths[i])\n+                    ]\n+                    variable_index.extend(var_idx)\n+                    var_concat_dim_length.append(len(var_idx))\n+                else:\n+                    # raise if coordinate not in all datasets\n+                    if name in coord_names:\n+                        raise ValueError(\n+                            f\"coordinate {name!r} not present in all datasets.\"\n+                        )\n+            vars = ensure_common_dims(variables, var_concat_dim_length)\n+\n+            # Try to concatenate the indexes, concatenate the variables when no index\n             # is found on all datasets.\n             indexes: list[Index] = list(get_indexes(name))\n             if indexes:\n@@ -589,6 +619,15 @@ def get_indexes(name):\n                 combined_var = concat_vars(\n                     vars, dim, positions, combine_attrs=combine_attrs\n                 )\n+                # reindex if variable is not present in all datasets\n+                if len(variable_index) < len(concat_index):\n+                    combined_var = reindex_variables(\n+                        variables={name: combined_var},\n+                        dim_pos_indexers={\n+                            dim: pd.Index(variable_index).get_indexer(concat_index)\n+                        },\n+                        fill_value=fill_value,\n+                    )[name]\n                 result_vars[name] = combined_var\n \n         elif name in result_vars:\n",
  "test_patch": "diff --git a/xarray/tests/test_concat.py b/xarray/tests/test_concat.py\n--- a/xarray/tests/test_concat.py\n+++ b/xarray/tests/test_concat.py\n@@ -1,7 +1,7 @@\n from __future__ import annotations\n \n from copy import deepcopy\n-from typing import TYPE_CHECKING, Any\n+from typing import TYPE_CHECKING, Any, Callable\n \n import numpy as np\n import pandas as pd\n@@ -23,6 +23,89 @@\n     from xarray.core.types import CombineAttrsOptions, JoinOptions\n \n \n+# helper method to create multiple tests datasets to concat\n+def create_concat_datasets(\n+    num_datasets: int = 2, seed: int | None = None, include_day: bool = True\n+) -> list[Dataset]:\n+    rng = np.random.default_rng(seed)\n+    lat = rng.standard_normal(size=(1, 4))\n+    lon = rng.standard_normal(size=(1, 4))\n+    result = []\n+    variables = [\"temperature\", \"pressure\", \"humidity\", \"precipitation\", \"cloud_cover\"]\n+    for i in range(num_datasets):\n+        if include_day:\n+            data_tuple = (\n+                [\"x\", \"y\", \"day\"],\n+                rng.standard_normal(size=(1, 4, 2)),\n+            )\n+            data_vars = {v: data_tuple for v in variables}\n+            result.append(\n+                Dataset(\n+                    data_vars=data_vars,\n+                    coords={\n+                        \"lat\": ([\"x\", \"y\"], lat),\n+                        \"lon\": ([\"x\", \"y\"], lon),\n+                        \"day\": [\"day\" + str(i * 2 + 1), \"day\" + str(i * 2 + 2)],\n+                    },\n+                )\n+            )\n+        else:\n+            data_tuple = (\n+                [\"x\", \"y\"],\n+                rng.standard_normal(size=(1, 4)),\n+            )\n+            data_vars = {v: data_tuple for v in variables}\n+            result.append(\n+                Dataset(\n+                    data_vars=data_vars,\n+                    coords={\"lat\": ([\"x\", \"y\"], lat), \"lon\": ([\"x\", \"y\"], lon)},\n+                )\n+            )\n+\n+    return result\n+\n+\n+# helper method to create multiple tests datasets to concat with specific types\n+def create_typed_datasets(\n+    num_datasets: int = 2, seed: int | None = None\n+) -> list[Dataset]:\n+    var_strings = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n+    result = []\n+    rng = np.random.default_rng(seed)\n+    lat = rng.standard_normal(size=(1, 4))\n+    lon = rng.standard_normal(size=(1, 4))\n+    for i in range(num_datasets):\n+        result.append(\n+            Dataset(\n+                data_vars={\n+                    \"float\": ([\"x\", \"y\", \"day\"], rng.standard_normal(size=(1, 4, 2))),\n+                    \"float2\": ([\"x\", \"y\", \"day\"], rng.standard_normal(size=(1, 4, 2))),\n+                    \"string\": (\n+                        [\"x\", \"y\", \"day\"],\n+                        rng.choice(var_strings, size=(1, 4, 2)),\n+                    ),\n+                    \"int\": ([\"x\", \"y\", \"day\"], rng.integers(0, 10, size=(1, 4, 2))),\n+                    \"datetime64\": (\n+                        [\"x\", \"y\", \"day\"],\n+                        np.arange(\n+                            np.datetime64(\"2017-01-01\"), np.datetime64(\"2017-01-09\")\n+                        ).reshape(1, 4, 2),\n+                    ),\n+                    \"timedelta64\": (\n+                        [\"x\", \"y\", \"day\"],\n+                        np.reshape([pd.Timedelta(days=i) for i in range(8)], [1, 4, 2]),\n+                    ),\n+                },\n+                coords={\n+                    \"lat\": ([\"x\", \"y\"], lat),\n+                    \"lon\": ([\"x\", \"y\"], lon),\n+                    \"day\": [\"day\" + str(i * 2 + 1), \"day\" + str(i * 2 + 2)],\n+                },\n+            )\n+        )\n+    return result\n+\n+\n def test_concat_compat() -> None:\n     ds1 = Dataset(\n         {\n@@ -46,14 +129,324 @@ def test_concat_compat() -> None:\n \n     for var in [\"has_x\", \"no_x_y\"]:\n         assert \"y\" not in result[var].dims and \"y\" not in result[var].coords\n-    with pytest.raises(\n-        ValueError, match=r\"coordinates in some datasets but not others\"\n-    ):\n+    with pytest.raises(ValueError, match=r\"'q' not present in all datasets\"):\n         concat([ds1, ds2], dim=\"q\")\n-    with pytest.raises(ValueError, match=r\"'q' is not present in all datasets\"):\n+    with pytest.raises(ValueError, match=r\"'q' not present in all datasets\"):\n         concat([ds2, ds1], dim=\"q\")\n \n \n+def test_concat_missing_var() -> None:\n+    datasets = create_concat_datasets(2, seed=123)\n+    expected = concat(datasets, dim=\"day\")\n+    vars_to_drop = [\"humidity\", \"precipitation\", \"cloud_cover\"]\n+\n+    expected = expected.drop_vars(vars_to_drop)\n+    expected[\"pressure\"][..., 2:] = np.nan\n+\n+    datasets[0] = datasets[0].drop_vars(vars_to_drop)\n+    datasets[1] = datasets[1].drop_vars(vars_to_drop + [\"pressure\"])\n+    actual = concat(datasets, dim=\"day\")\n+\n+    assert list(actual.data_vars.keys()) == [\"temperature\", \"pressure\"]\n+    assert_identical(actual, expected)\n+\n+\n+def test_concat_missing_multiple_consecutive_var() -> None:\n+    datasets = create_concat_datasets(3, seed=123)\n+    expected = concat(datasets, dim=\"day\")\n+    vars_to_drop = [\"humidity\", \"pressure\"]\n+\n+    expected[\"pressure\"][..., :4] = np.nan\n+    expected[\"humidity\"][..., :4] = np.nan\n+\n+    datasets[0] = datasets[0].drop_vars(vars_to_drop)\n+    datasets[1] = datasets[1].drop_vars(vars_to_drop)\n+    actual = concat(datasets, dim=\"day\")\n+\n+    assert list(actual.data_vars.keys()) == [\n+        \"temperature\",\n+        \"precipitation\",\n+        \"cloud_cover\",\n+        \"pressure\",\n+        \"humidity\",\n+    ]\n+    assert_identical(actual, expected)\n+\n+\n+def test_concat_all_empty() -> None:\n+    ds1 = Dataset()\n+    ds2 = Dataset()\n+    expected = Dataset()\n+    actual = concat([ds1, ds2], dim=\"new_dim\")\n+\n+    assert_identical(actual, expected)\n+\n+\n+def test_concat_second_empty() -> None:\n+    ds1 = Dataset(data_vars={\"a\": (\"y\", [0.1])}, coords={\"x\": 0.1})\n+    ds2 = Dataset(coords={\"x\": 0.1})\n+\n+    expected = Dataset(data_vars={\"a\": (\"y\", [0.1, np.nan])}, coords={\"x\": 0.1})\n+    actual = concat([ds1, ds2], dim=\"y\")\n+    assert_identical(actual, expected)\n+\n+    expected = Dataset(\n+        data_vars={\"a\": (\"y\", [0.1, np.nan])}, coords={\"x\": (\"y\", [0.1, 0.1])}\n+    )\n+    actual = concat([ds1, ds2], dim=\"y\", coords=\"all\")\n+    assert_identical(actual, expected)\n+\n+    # Check concatenating scalar data_var only present in ds1\n+    ds1[\"b\"] = 0.1\n+    expected = Dataset(\n+        data_vars={\"a\": (\"y\", [0.1, np.nan]), \"b\": (\"y\", [0.1, np.nan])},\n+        coords={\"x\": (\"y\", [0.1, 0.1])},\n+    )\n+    actual = concat([ds1, ds2], dim=\"y\", coords=\"all\", data_vars=\"all\")\n+    assert_identical(actual, expected)\n+\n+    expected = Dataset(\n+        data_vars={\"a\": (\"y\", [0.1, np.nan]), \"b\": 0.1}, coords={\"x\": 0.1}\n+    )\n+    actual = concat([ds1, ds2], dim=\"y\", coords=\"different\", data_vars=\"different\")\n+    assert_identical(actual, expected)\n+\n+\n+def test_concat_multiple_missing_variables() -> None:\n+    datasets = create_concat_datasets(2, seed=123)\n+    expected = concat(datasets, dim=\"day\")\n+    vars_to_drop = [\"pressure\", \"cloud_cover\"]\n+\n+    expected[\"pressure\"][..., 2:] = np.nan\n+    expected[\"cloud_cover\"][..., 2:] = np.nan\n+\n+    datasets[1] = datasets[1].drop_vars(vars_to_drop)\n+    actual = concat(datasets, dim=\"day\")\n+\n+    # check the variables orders are the same\n+    assert list(actual.data_vars.keys()) == [\n+        \"temperature\",\n+        \"pressure\",\n+        \"humidity\",\n+        \"precipitation\",\n+        \"cloud_cover\",\n+    ]\n+\n+    assert_identical(actual, expected)\n+\n+\n+@pytest.mark.parametrize(\"include_day\", [True, False])\n+def test_concat_multiple_datasets_missing_vars(include_day: bool) -> None:\n+    vars_to_drop = [\n+        \"temperature\",\n+        \"pressure\",\n+        \"humidity\",\n+        \"precipitation\",\n+        \"cloud_cover\",\n+    ]\n+\n+    datasets = create_concat_datasets(\n+        len(vars_to_drop), seed=123, include_day=include_day\n+    )\n+    expected = concat(datasets, dim=\"day\")\n+\n+    for i, name in enumerate(vars_to_drop):\n+        if include_day:\n+            expected[name][..., i * 2 : (i + 1) * 2] = np.nan\n+        else:\n+            expected[name][i : i + 1, ...] = np.nan\n+\n+    # set up the test data\n+    datasets = [ds.drop_vars(varname) for ds, varname in zip(datasets, vars_to_drop)]\n+\n+    actual = concat(datasets, dim=\"day\")\n+\n+    assert list(actual.data_vars.keys()) == [\n+        \"pressure\",\n+        \"humidity\",\n+        \"precipitation\",\n+        \"cloud_cover\",\n+        \"temperature\",\n+    ]\n+    assert_identical(actual, expected)\n+\n+\n+def test_concat_multiple_datasets_with_multiple_missing_variables() -> None:\n+    vars_to_drop_in_first = [\"temperature\", \"pressure\"]\n+    vars_to_drop_in_second = [\"humidity\", \"precipitation\", \"cloud_cover\"]\n+    datasets = create_concat_datasets(2, seed=123)\n+    expected = concat(datasets, dim=\"day\")\n+    for name in vars_to_drop_in_first:\n+        expected[name][..., :2] = np.nan\n+    for name in vars_to_drop_in_second:\n+        expected[name][..., 2:] = np.nan\n+\n+    # set up the test data\n+    datasets[0] = datasets[0].drop_vars(vars_to_drop_in_first)\n+    datasets[1] = datasets[1].drop_vars(vars_to_drop_in_second)\n+\n+    actual = concat(datasets, dim=\"day\")\n+\n+    assert list(actual.data_vars.keys()) == [\n+        \"humidity\",\n+        \"precipitation\",\n+        \"cloud_cover\",\n+        \"temperature\",\n+        \"pressure\",\n+    ]\n+    assert_identical(actual, expected)\n+\n+\n+def test_concat_type_of_missing_fill() -> None:\n+    datasets = create_typed_datasets(2, seed=123)\n+    expected1 = concat(datasets, dim=\"day\", fill_value=dtypes.NA)\n+    expected2 = concat(datasets[::-1], dim=\"day\", fill_value=dtypes.NA)\n+    vars = [\"float\", \"float2\", \"string\", \"int\", \"datetime64\", \"timedelta64\"]\n+    expected = [expected2, expected1]\n+    for i, exp in enumerate(expected):\n+        sl = slice(i * 2, (i + 1) * 2)\n+        exp[\"float2\"][..., sl] = np.nan\n+        exp[\"datetime64\"][..., sl] = np.nan\n+        exp[\"timedelta64\"][..., sl] = np.nan\n+        var = exp[\"int\"] * 1.0\n+        var[..., sl] = np.nan\n+        exp[\"int\"] = var\n+        var = exp[\"string\"].astype(object)\n+        var[..., sl] = np.nan\n+        exp[\"string\"] = var\n+\n+    # set up the test data\n+    datasets[1] = datasets[1].drop_vars(vars[1:])\n+\n+    actual = concat(datasets, dim=\"day\", fill_value=dtypes.NA)\n+\n+    assert_identical(actual, expected[1])\n+\n+    # reversed\n+    actual = concat(datasets[::-1], dim=\"day\", fill_value=dtypes.NA)\n+\n+    assert_identical(actual, expected[0])\n+\n+\n+def test_concat_order_when_filling_missing() -> None:\n+    vars_to_drop_in_first: list[str] = []\n+    # drop middle\n+    vars_to_drop_in_second = [\"humidity\"]\n+    datasets = create_concat_datasets(2, seed=123)\n+    expected1 = concat(datasets, dim=\"day\")\n+    for name in vars_to_drop_in_second:\n+        expected1[name][..., 2:] = np.nan\n+    expected2 = concat(datasets[::-1], dim=\"day\")\n+    for name in vars_to_drop_in_second:\n+        expected2[name][..., :2] = np.nan\n+\n+    # set up the test data\n+    datasets[0] = datasets[0].drop_vars(vars_to_drop_in_first)\n+    datasets[1] = datasets[1].drop_vars(vars_to_drop_in_second)\n+\n+    actual = concat(datasets, dim=\"day\")\n+\n+    assert list(actual.data_vars.keys()) == [\n+        \"temperature\",\n+        \"pressure\",\n+        \"humidity\",\n+        \"precipitation\",\n+        \"cloud_cover\",\n+    ]\n+    assert_identical(actual, expected1)\n+\n+    actual = concat(datasets[::-1], dim=\"day\")\n+\n+    assert list(actual.data_vars.keys()) == [\n+        \"temperature\",\n+        \"pressure\",\n+        \"precipitation\",\n+        \"cloud_cover\",\n+        \"humidity\",\n+    ]\n+    assert_identical(actual, expected2)\n+\n+\n+@pytest.fixture\n+def concat_var_names() -> Callable:\n+    # create var names list with one missing value\n+    def get_varnames(var_cnt: int = 10, list_cnt: int = 10) -> list[list[str]]:\n+        orig = [f\"d{i:02d}\" for i in range(var_cnt)]\n+        var_names = []\n+        for i in range(0, list_cnt):\n+            l1 = orig.copy()\n+            var_names.append(l1)\n+        return var_names\n+\n+    return get_varnames\n+\n+\n+@pytest.fixture\n+def create_concat_ds() -> Callable:\n+    def create_ds(\n+        var_names: list[list[str]],\n+        dim: bool = False,\n+        coord: bool = False,\n+        drop_idx: list[int] | None = None,\n+    ) -> list[Dataset]:\n+        out_ds = []\n+        ds = Dataset()\n+        ds = ds.assign_coords({\"x\": np.arange(2)})\n+        ds = ds.assign_coords({\"y\": np.arange(3)})\n+        ds = ds.assign_coords({\"z\": np.arange(4)})\n+        for i, dsl in enumerate(var_names):\n+            vlist = dsl.copy()\n+            if drop_idx is not None:\n+                vlist.pop(drop_idx[i])\n+            foo_data = np.arange(48, dtype=float).reshape(2, 2, 3, 4)\n+            dsi = ds.copy()\n+            if coord:\n+                dsi = ds.assign({\"time\": ([\"time\"], [i * 2, i * 2 + 1])})\n+            for k in vlist:\n+                dsi = dsi.assign({k: ([\"time\", \"x\", \"y\", \"z\"], foo_data.copy())})\n+            if not dim:\n+                dsi = dsi.isel(time=0)\n+            out_ds.append(dsi)\n+        return out_ds\n+\n+    return create_ds\n+\n+\n+@pytest.mark.parametrize(\"dim\", [True, False])\n+@pytest.mark.parametrize(\"coord\", [True, False])\n+def test_concat_fill_missing_variables(\n+    concat_var_names, create_concat_ds, dim: bool, coord: bool\n+) -> None:\n+    var_names = concat_var_names()\n+    drop_idx = [0, 7, 6, 4, 4, 8, 0, 6, 2, 0]\n+\n+    expected = concat(\n+        create_concat_ds(var_names, dim=dim, coord=coord), dim=\"time\", data_vars=\"all\"\n+    )\n+    for i, idx in enumerate(drop_idx):\n+        if dim:\n+            expected[var_names[0][idx]][i * 2 : i * 2 + 2] = np.nan\n+        else:\n+            expected[var_names[0][idx]][i] = np.nan\n+\n+    concat_ds = create_concat_ds(var_names, dim=dim, coord=coord, drop_idx=drop_idx)\n+    actual = concat(concat_ds, dim=\"time\", data_vars=\"all\")\n+\n+    assert list(actual.data_vars.keys()) == [\n+        \"d01\",\n+        \"d02\",\n+        \"d03\",\n+        \"d04\",\n+        \"d05\",\n+        \"d06\",\n+        \"d07\",\n+        \"d08\",\n+        \"d09\",\n+        \"d00\",\n+    ]\n+    assert_identical(actual, expected)\n+\n+\n class TestConcatDataset:\n     @pytest.fixture\n     def data(self) -> Dataset:\n@@ -86,10 +479,17 @@ def test_concat_merge_variables_present_in_some_datasets(self, data) -> None:\n         split_data = [data.isel(dim1=slice(3)), data.isel(dim1=slice(3, None))]\n         data0, data1 = deepcopy(split_data)\n         data1[\"foo\"] = (\"bar\", np.random.randn(10))\n-        actual = concat([data0, data1], \"dim1\")\n+        actual = concat([data0, data1], \"dim1\", data_vars=\"minimal\")\n         expected = data.copy().assign(foo=data1.foo)\n         assert_identical(expected, actual)\n \n+        # expand foo\n+        actual = concat([data0, data1], \"dim1\")\n+        foo = np.ones((8, 10), dtype=data1.foo.dtype) * np.nan\n+        foo[3:] = data1.foo.values[None, ...]\n+        expected = data.copy().assign(foo=([\"dim1\", \"bar\"], foo))\n+        assert_identical(expected, actual)\n+\n     def test_concat_2(self, data) -> None:\n         dim = \"dim2\"\n         datasets = [g for _, g in data.groupby(dim, squeeze=True)]\n@@ -776,7 +1176,7 @@ def test_concat_merge_single_non_dim_coord():\n         actual = concat([da1, da2], \"x\", coords=coords)\n         assert_identical(actual, expected)\n \n-    with pytest.raises(ValueError, match=r\"'y' is not present in all datasets.\"):\n+    with pytest.raises(ValueError, match=r\"'y' not present in all datasets.\"):\n         concat([da1, da2], dim=\"x\", coords=\"all\")\n \n     da1 = DataArray([1, 2, 3], dims=\"x\", coords={\"x\": [1, 2, 3], \"y\": 1})\n@@ -784,7 +1184,7 @@ def test_concat_merge_single_non_dim_coord():\n     da3 = DataArray([7, 8, 9], dims=\"x\", coords={\"x\": [7, 8, 9], \"y\": 1})\n     for coords in [\"different\", \"all\"]:\n         with pytest.raises(ValueError, match=r\"'y' not present in all datasets\"):\n-            concat([da1, da2, da3], dim=\"x\")\n+            concat([da1, da2, da3], dim=\"x\", coords=coords)\n \n \n def test_concat_preserve_coordinate_order() -> None:\n",
  "problem_statement": "Add defaults during concat 508\n\r\n - [x] Closes #508 \r\n - [x] Tests added\r\n - [x] Passes `black . && mypy . && flake8`\r\n - [x] Fully documented, including `whats-new.rst` for all changes and `api.rst` for new API\r\n\r\nContined on issue #508 by removing exception when concat two datasets with disjoint variables and instead add the missing variable with np.nan.\r\n\n",
  "hints_text": "Thanks for working on this important issue!\r\n\r\nThere are a lot of edge cases that can come up in `concat`, so I think it would be very helpful to try to enumerate a broader set of unit tests for thoroughly testing this. For example:\r\n- Pre-existing vs non-pre-existing dimension\r\n- Pre-existing dimensions of different sizes\r\n- Missing data variables vs coordinates vs indexed coordinates\nOk, I'll work on extending the updates with the feedback and additional tests.  Thanks!\nHi, I've provided a new update to this PR (sorry it took me awhile both to get more familiar with the code and find the time to update the PR).  I improved the logic to be a bit more performant and handle more edge cases as well as updated the test suite.  I have a few questions:\r\n\r\n1. The tests I wrote are a bit more verbose than the tests previously.  I can tighten them down but I found it was easier for me to read the logic in this form.  Please let me know what you prefer.\r\n2. I'm still not quite sure I've captured all the scenarios as I'm a pretty basic xarray user so please let me know if there is still something I'm missing.\r\n\nI'll take a look at this more carefully soon. But I do think it is a hard\nrequirement that concat runs in linear time (with respect to the total\nnumber of variables across all datasets).\n\nOn Mon, Dec 30, 2019 at 5:18 PM Scott Chamberlin <notifications@github.com>\nwrote:\n\n> Hi, I've provided a new update to this PR (sorry it took me awhile both to\n> get more familiar with the code and find the time to update the PR). I\n> improved the logic to be a bit more performant and handle more edge cases\n> as well as updated the test suite. I have a few questions:\n>\n>    1. The tests I wrote are a bit more verbose than the tests previously.\n>    I can tighten them down but I found it was easier for me to read the logic\n>    in this form. Please let me know what you prefer.\n>    2. I'm still not quite sure I've captured all the scenarios as I'm a\n>    pretty basic xarray user so please let me know if there is still something\n>    I'm missing.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pydata/xarray/pull/3545?email_source=notifications&email_token=AAJJFVVSKN5ZWD4FQHPIJG3Q3KMWXA5CNFSM4JOLVICKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEH3RY5Q#issuecomment-569842806>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAJJFVUPKZ7Q3UFVSH7D2STQ3KMWXANCNFSM4JOLVICA>\n> .\n>\n\n@scottcha If found this while searching. Have the same requirements, means missing DataArrays in some Datasets of a timeseries to be concatenated. I've already some hacks and workarounds in place for my specific use cases, but it would be really great if this could be handled by xarray.\r\n\r\nI'll try to test your current implementation against my source data and will report my findings here. \r\n\r\nUpdate: I've rebased locally on latest master and this works smoothly with my data (which uses packed data). I'll now look into performance.\n@scottcha @shoyer For one of my use cases (240 datasets, 1 with missing variables) I do not see any performance penalties using this implementation compared to the current. But this might be due to the fact, that the most time consuming part is the `expand_dims` for every dataset, which accounts for roughly 80% overall concat runtime.\r\n\r\nIf I can be of any help to push this over the line, please ping me.\n>  the most time consuming part is the expand_dims for every dataset, which accounts for roughly 80% overall concat runtime.\r\n\r\nHmmm... maybe we need a short-circuit version of `expand_dims`?\n@dcherian Just to clarify, the concatenation is done along a new dimension (which has to be created by expand_dims). What do you mean by short-clrcuit in this context? \n@kmuehlbauer @dcherian @shoyer  If it would be easier it could abandon this PR and resubmit a new one as the code has drastically changed since the original comments were provided?  Essentially I'm waiting for feedback or approval of this PR.\nCan you explain why you think you need the nested iteration over dataset variables? What ordering are you trying to achieve?\n@scottcha @shoyer below is a minimal example where one variable is missing in each file.\r\n\r\n```python\r\nimport random\r\nrandom.seed(123)\r\nrandom.randint(0, 10)\r\n\r\n# create var names list with one missing value\r\norig = [f'd{i:02}' for i in range(10)]\r\ndatasets = []\r\nfor i in range(1, 9):\r\n    l1 = orig.copy()\r\n    l1.remove(f'd{i:02}')\r\n    datasets.append(l1)\r\n\r\n# create files\r\nfor i, dsl in enumerate(datasets):\r\n    foo_data = np.arange(24).reshape(2, 3, 4)\r\n    with nc.Dataset(f'test{i:02}.nc', 'w') as ds:\r\n        ds.createDimension('x', size=2)\r\n        ds.createDimension('y', size=3)\r\n        ds.createDimension('z', size=4)\r\n        for k in dsl:\r\n            ds.createVariable(k, int, ('x', 'y', 'z'))\r\n            ds.variables[k][:] = foo_data\r\n\r\nflist = glob.glob('test*.nc')\r\ndslist = []\r\nfor f in flist:\r\n    dslist.append(xr.open_dataset(f))\r\n\r\nds2 = xr.concat(dslist, dim='time')\r\nds2\r\n```\r\nOutput: \r\n\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 8, x: 2, y: 3, z: 4)\r\nDimensions without coordinates: time, x, y, z\r\nData variables:\r\n    d01      (x, y, z) int64 0 1 2 3 4 5 6 7 8 9 ... 15 16 17 18 19 20 21 22 23\r\n    d00      (time, x, y, z) int64 0 1 2 3 4 5 6 7 8 ... 16 17 18 19 20 21 22 23\r\n    d02      (time, x, y, z) float64 0.0 1.0 2.0 3.0 4.0 ... 20.0 21.0 22.0 23.0\r\n    d03      (time, x, y, z) float64 0.0 1.0 2.0 3.0 4.0 ... 20.0 21.0 22.0 23.0\r\n    d04      (time, x, y, z) float64 0.0 1.0 2.0 3.0 4.0 ... 20.0 21.0 22.0 23.0\r\n    d05      (time, x, y, z) float64 0.0 1.0 2.0 3.0 4.0 ... 20.0 21.0 22.0 23.0\r\n    d06      (time, x, y, z) float64 0.0 1.0 2.0 3.0 4.0 ... 20.0 21.0 22.0 23.0\r\n    d07      (time, x, y, z) float64 0.0 1.0 2.0 3.0 4.0 ... 20.0 21.0 22.0 23.0\r\n    d08      (time, x, y, z) float64 0.0 1.0 2.0 3.0 4.0 ... nan nan nan nan nan\r\n    d09      (time, x, y, z) int64 0 1 2 3 4 5 6 7 8 ... 16 17 18 19 20 21 22 23\r\n```\r\n\r\nThree cases here:\r\n\r\n- `d00` and `d09` are available in all datasets, and they are concatenated correctly (keeping dtype)\r\n- `d02` to `d08` are missing in one dataset and are filled with the created dummy variable, but the dtype is converted to float64\r\n- `d01` is not handled properly, because it is missing in the first dataset, this is due to checking only variables of first dataset in [`_calc_concat_over`](https://github.com/scottcha/xarray/blob/cf5b8bdfb0fdaf626ecf7b83590f15aa9aef1d6b/xarray/core/concat.py#L235)\r\n\r\n```python\r\n            elif opt == \"all\":\r\n                concat_over.update(\r\n                    set(getattr(datasets[0], subset)) - set(datasets[0].dims)\r\n                )\r\n```\r\nand from putting `d01` in [`result_vars`](https://github.com/scottcha/xarray/blob/cf5b8bdfb0fdaf626ecf7b83590f15aa9aef1d6b/xarray/core/concat.py#L329) before iterating to find missing variables.\r\n\r\n\nI am now wondering if we can use `align` or `reindex` to do the filling for us.\r\n\r\nExample: goal is concat along 'x' with result dataset having `x=[1,2,3,4]`\r\n1. Loop through datasets and assign coordinate values as appropriate. \r\n2. Break datasets up into mappings `collected = {\"variable\": [var1_at_x=1, var2_at_x=2, var4_at_x=4]}` -> there's some stuff in `merge.py` that could be reused for this\r\n3. concatenate these lists to get a new mapping `concatenated = {\"variable\": [var_at_x=[1,2,4]]}`\r\n4. apply `reindexed = {concatenated[var].reindex(x=[1,2,3,4], fill_value=...) for var in concatenated}`\r\n5. create dataset `Dataset(reindexed)`\r\n\r\nStep 1 would be where we deal with all the edge cases mentioned in @shoyer's comment viz\r\n\r\n> For example:\r\n> \r\n> Pre-existing vs non-pre-existing dimension\r\n> Pre-existing dimensions of different sizes\r\n> Missing data variables vs coordinates vs indexed coordinates\r\n\nI just pushed an incomplete set of changes as @kmuehlbauer tests have demonstrated there was some incomplete cases the PR still isn't handling.  \r\nHere is a summary:\r\n1. I've simplified the logic based on @dcherian comments but in order to keep the result deterministic needed to use list logic instead of set logic.  I also kept the OrderedDict instead of going with the default dict as the built in ordering methods as of py 3.6 were still insufficient for keeping the ordering consistent (I needed to pop FIFO) which doesn't seem possible until py 3.8.\r\n2. I did add a failing test to capture the cases @kmuehlbauer  pointed out.\r\n\r\nI'm not sure I have my head wrapped around xarray enough to address @dcherian's latest comments though which is why i'm sharing the code at this point.  All tests are passing except the new cases which were pointed out.\r\n\r\nI'll try to continue to get time to update this but wanted to at least provide this status update at this point as its been awhile.\nHas this been implemented? Or is it still failing the tests?\nCool PR - looks like it's stale? Maybe someone should copy the work to a new one? Have been coming across this issue a lot in my work recently.\n@scottcha Are you still around and interested to bring this along? If not I could try to dive again into this.\nI'm still along and yes I do still need this functionality (I still sync back to this PR when I have data missing vars).  The issue was that the technical requirements got beyond what I was able to account for with the time I had available.  If you or someone else was interested in picking it up I'd be happy to evaluate against my use cases. \nGreat @scottcha, I was coming back here too every once in an while to just refresh my mind with the ideas pursued here. I can try to rebase the PR onto latest main, if I can free some cycles in the following days for starters.\n> I can try to rebase the PR onto latest main\r\n\r\nI did try that a few months ago, but a lot has changed since the PR was opened so it might actually be easier to reimplement the PR?\nThanks @keewis for the heads up. I'll have a look and if things get too complicated a reimplementation might be our best option.",
  "created_at": "2022-12-22T14:41:56Z",
  "version": "2022.09",
  "FAIL_TO_PASS": "[\"xarray/tests/test_concat.py::test_concat_compat\", \"xarray/tests/test_concat.py::test_concat_missing_var\", \"xarray/tests/test_concat.py::test_concat_missing_multiple_consecutive_var\", \"xarray/tests/test_concat.py::test_concat_second_empty\", \"xarray/tests/test_concat.py::test_concat_multiple_missing_variables\", \"xarray/tests/test_concat.py::test_concat_multiple_datasets_missing_vars[True]\", \"xarray/tests/test_concat.py::test_concat_multiple_datasets_missing_vars[False]\", \"xarray/tests/test_concat.py::test_concat_multiple_datasets_with_multiple_missing_variables\", \"xarray/tests/test_concat.py::test_concat_type_of_missing_fill\", \"xarray/tests/test_concat.py::test_concat_order_when_filling_missing\", \"xarray/tests/test_concat.py::test_concat_fill_missing_variables[True-True]\", \"xarray/tests/test_concat.py::test_concat_fill_missing_variables[True-False]\", \"xarray/tests/test_concat.py::test_concat_fill_missing_variables[False-True]\", \"xarray/tests/test_concat.py::test_concat_fill_missing_variables[False-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_merge_variables_present_in_some_datasets\", \"xarray/tests/test_concat.py::test_concat_merge_single_non_dim_coord\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_concat.py::test_concat_all_empty\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_2\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-all]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-different]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-minimal]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-all]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_precedence\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_data_vars_typing\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_data_vars\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_constant_index\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_size0\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_autoalign\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_errors\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_join_kwarg\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs0-var2_attrs0-expected_attrs0-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs1-var2_attrs1-expected_attrs1-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs2-var2_attrs2-expected_attrs2-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[no_conflicts-var1_attrs3-var2_attrs3-expected_attrs3-True]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[drop-var1_attrs4-var2_attrs4-expected_attrs4-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[identical-var1_attrs5-var2_attrs5-expected_attrs5-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[identical-var1_attrs6-var2_attrs6-expected_attrs6-True]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[override-var1_attrs7-var2_attrs7-expected_attrs7-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[drop_conflicts-var1_attrs8-var2_attrs8-expected_attrs8-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg[<lambda>-var1_attrs9-var2_attrs9-expected_attrs9-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs10-attrs20-expected_attrs0-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs11-attrs21-expected_attrs1-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs12-attrs22-expected_attrs2-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[no_conflicts-attrs13-attrs23-expected_attrs3-True]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[drop-attrs14-attrs24-expected_attrs4-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[identical-attrs15-attrs25-expected_attrs5-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[identical-attrs16-attrs26-expected_attrs6-True]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[override-attrs17-attrs27-expected_attrs7-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[drop_conflicts-attrs18-attrs28-expected_attrs8-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_combine_attrs_kwarg_variables[<lambda>-attrs19-attrs29-expected_attrs9-False]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_promote_shape\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_do_not_promote\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_is_variable\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_is_dataarray\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_multiindex\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_along_new_dim_multiindex\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[fill_value0]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2.0]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[fill_value3]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_str_dtype[x1-str]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_str_dtype[x1-bytes]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_str_dtype[x2-str]\", \"xarray/tests/test_concat.py::TestConcatDataset::test_concat_str_dtype[x2-bytes]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_encoding\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_lazy\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[fill_value0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2.0]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_join_kwarg\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_combine_attrs_kwarg\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_str_dtype[x1-str]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_str_dtype[x1-bytes]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_str_dtype[x2-str]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_str_dtype[x2-bytes]\", \"xarray/tests/test_concat.py::TestConcatDataArray::test_concat_coord_name\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr20-attr10]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr20-attr11]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr20-attr12]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr21-attr10]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr21-attr11]\", \"xarray/tests/test_concat.py::test_concat_attrs_first_variable[attr21-attr12]\", \"xarray/tests/test_concat.py::test_concat_preserve_coordinate_order\", \"xarray/tests/test_concat.py::test_concat_typing_check\", \"xarray/tests/test_concat.py::test_concat_not_all_indexes\", \"xarray/tests/test_concat.py::test_concat_index_not_same_dim\"]",
  "environment_setup_commit": "087ebbb78668bdf5d2d41c3b2553e3f29ce75be1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.905955",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}