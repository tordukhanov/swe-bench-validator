{
  "repo": "django/django",
  "instance_id": "django__django-15413",
  "base_commit": "d35ce682e31ea4a86c2079c60721fae171f03d7c",
  "patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -125,11 +125,11 @@ def adapt_method_mode(\n         if is_async:\n             if not method_is_async:\n                 if debug:\n-                    logger.debug(\"Synchronous %s adapted.\", name)\n+                    logger.debug(\"Synchronous handler adapted for %s.\", name)\n                 return sync_to_async(method, thread_sensitive=True)\n         elif method_is_async:\n             if debug:\n-                logger.debug(\"Asynchronous %s adapted.\", name)\n+                logger.debug(\"Asynchronous handler adapted for %s.\", name)\n             return async_to_sync(method)\n         return method\n \n",
  "test_patch": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -222,8 +222,8 @@ async def test_async_and_sync_middleware_chain_async_call(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             cm.records[0].getMessage(),\n-            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware \"\n-            \"adapted.\",\n+            \"Asynchronous handler adapted for middleware \"\n+            \"middleware_exceptions.tests.MyMiddleware.\",\n         )\n         self.assertEqual(\n             cm.records[1].getMessage(),\n@@ -265,9 +265,8 @@ def test_async_middleware(self):\n         self.assertEqual(response.status_code, 402)\n         self.assertEqual(\n             cm.records[0].getMessage(),\n-            \"Synchronous middleware \"\n-            \"middleware_exceptions.middleware.async_payment_middleware \"\n-            \"adapted.\",\n+            \"Synchronous handler adapted for middleware \"\n+            \"middleware_exceptions.middleware.async_payment_middleware.\",\n         )\n \n     @override_settings(\n@@ -295,8 +294,8 @@ async def test_sync_middleware_async(self):\n         self.assertEqual(response.status_code, 402)\n         self.assertEqual(\n             cm.records[0].getMessage(),\n-            \"Asynchronous middleware \"\n-            \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n+            \"Asynchronous handler adapted for middleware \"\n+            \"middleware_exceptions.middleware.PaymentMiddleware.\",\n         )\n \n     @override_settings(\n",
  "problem_statement": "\"Synchronous middleware ... adapted\" is not logged for synchronous middleware\nDescription\n\t\nThis is a bug in log messages that contradicts the guide in a warning in the docs; the feature works.\nThe guide at ‚Äãhttps://docs.djangoproject.com/en/4.0/topics/async/#async-views, emphasis mine:\nWarning\nYou will only get the benefits of a fully-asynchronous request stack if you have no synchronous middleware loaded into your site. If there is a piece of synchronous middleware, then Django must use a thread per request to safely emulate a synchronous environment for it.\nMiddleware can be built to support both sync and async contexts. Some of Django‚Äôs middleware is built like this, but not all. To see what middleware Django has to adapt, you can turn on debug logging for the django.request logger and look for log messages about ‚ÄúSynchronous middleware ‚Ä¶ adapted‚Äù.\nThe test for \"Synchronous middleware ... adapted\" is instead testing an async middleware over a sync method: ‚Äãhttps://github.com/django/django/blob/7ca7f4495ba746279b734695a8dd137bf7ee0bab/tests/middleware_exceptions/tests.py#L222-L234\n@override_settings(MIDDLEWARE=[\n\t'middleware_exceptions.middleware.async_payment_middleware',\n])\ndef test_async_middleware(self):\n\twith self.assertLogs('django.request', 'DEBUG') as cm:\n\t\tresponse = self.client.get('/middleware_exceptions/view/')\n\tself.assertEqual(response.status_code, 402)\n\tself.assertEqual(\n\t\tcm.records[0].getMessage(),\n\t\t\"Synchronous middleware \"\n\t\t\"middleware_exceptions.middleware.async_payment_middleware \"\n\t\t\"adapted.\",\n\t)\nAbout the existing implementation:\nBaseHandler.load_middleware passes the middleware name as name to BaseHandler.adapt_method_mode: ‚Äãhttps://github.com/django/django/blob/98ad327864aed8df245fd19ea9d2743279e11643/django/core/handlers/base.py#L53-L57\n# Adapt handler, if needed.\nadapted_handler = self.adapt_method_mode(\n\tmiddleware_is_async, handler, handler_is_async,\n\tdebug=settings.DEBUG, name='middleware %s' % middleware_path,\n)\nBaseHandler.adapt_method_mode adapts the method and treats name as the method name rather than the middleware name; when the middleware name is used, it implies a method has been adapted for the middleware, not that the middleware was adapted:\nif debug and not name:\n\tname = name or 'method %s()' % method.__qualname__\nif is_async:\n\tif not method_is_async:\n\t\tif debug:\n\t\t\tlogger.debug('Synchronous %s adapted.', name)\n\t\treturn sync_to_async(method, thread_sensitive=True)\nelif method_is_async:\n\tif debug:\n\t\tlogger.debug('Asynchronous %s adapted.', name)\n\treturn async_to_sync(method)\nProposed fix:\nHandle middleware name and method name separately within BaseHandler.adapt_method_mode:\n def adapt_method_mode(\n\t self, is_async, method, method_is_async=None, debug=False, name=None,\n ):\n\t \"\"\"\n\t Adapt a method to be in the correct \"mode\":\n\t - If is_async is False:\n\t\t- Synchronous methods are left alone\n\t\t- Asynchronous methods are wrapped with async_to_sync\n\t - If is_async is True:\n\t\t- Synchronous methods are wrapped with sync_to_async()\n\t\t- Asynchronous methods are left alone\n\t \"\"\"\n+\t method_name = None\n\t if method_is_async is None:\n\t\t method_is_async = asyncio.iscoroutinefunction(method)\n\t if debug and not name:\n-\t\t name = name or 'method %s()' % method.__qualname__\n+\t\t method_name = 'method %s()' % method.__qualname__\n\t if is_async:\n\t\t if not method_is_async:\n\t\t\t if debug:\n-\t\t\t\t logger.debug('Synchronous %s adapted.', name)\n+\t\t\t\t if name:\n+\t\t\t\t\t logger.debug('Asynchronous %s adapted.', name)\n+\t\t\t\t else:\n+\t\t\t\t\t logger.debug('Synchronous %s adapted.', method_name)\n\t\t\t return sync_to_async(method, thread_sensitive=True)\n\t elif method_is_async:\n\t\t if debug:\n-\t\t\t logger.debug('Asynchronous %s adapted.', name)\n+\t\t\t if name:\n+\t\t\t\t logger.debug('Synchronous %s adapted.', name)\n+\t\t\t else:\n+\t\t\t\t logger.debug('Asynchronous %s adapted.', method_name)\n\t\t return async_to_sync(method)\n",
  "hints_text": "OK, pending Andrew's comment, I'm going to accept this as a potential cleanup. It's the wrapped handler that's adapted to the wrapping middleware. So, I agree that the existing message perhaps implies the wrong thing: Synchronous middleware middleware_exceptions.middleware.async_payment_middleware adapted. (in ./runtests.py middleware_exceptions.tests.MiddlewareSyncAsyncTests.test_async_middleware) Here it's the (sync) BaseHandler._get_response() that's actually adapted, via return sync_to_async(method, thread_sensitive=True) (ln119). Tweaking the message to something like, Synchronous handler adapted for middleware_exceptions.middleware.async_payment_middleware middleware. would be perhaps clearer ü§î (I'd like to keep the messaging consistent on each branch ‚Äî i.e. not mixing Synchronous and Asynchronous in the messages ‚Äî as that lets you search for the log message without doubt as to which branch you're on, even if we can improve the exact wording.)\nHi Carlton, thanks for your comment. PR: ‚Äãhttps://github.com/django/django/pull/15413",
  "created_at": "2022-02-08T15:59:00Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_async_and_sync_middleware_chain_async_call (middleware_exceptions.tests.MiddlewareNotUsedTests)\", \"test_async_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_sync_middleware_async (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\"]",
  "PASS_TO_PASS": "[\"test_missing_root_urlconf (middleware_exceptions.tests.RootUrlconfTests)\", \"test_do_not_log_when_debug_is_false (middleware_exceptions.tests.MiddlewareNotUsedTests)\", \"test_log (middleware_exceptions.tests.MiddlewareNotUsedTests)\", \"test_log_custom_message (middleware_exceptions.tests.MiddlewareNotUsedTests)\", \"test_raise_exception (middleware_exceptions.tests.MiddlewareNotUsedTests)\", \"test_exception_in_middleware_converted_before_prior_middleware (middleware_exceptions.tests.MiddlewareTests)\", \"test_exception_in_render_passed_to_process_exception (middleware_exceptions.tests.MiddlewareTests)\", \"test_process_template_response (middleware_exceptions.tests.MiddlewareTests)\", \"test_process_template_response_returns_none (middleware_exceptions.tests.MiddlewareTests)\", \"test_process_view_return_none (middleware_exceptions.tests.MiddlewareTests)\", \"test_process_view_return_response (middleware_exceptions.tests.MiddlewareTests)\", \"test_response_from_process_exception_short_circuits_remainder (middleware_exceptions.tests.MiddlewareTests)\", \"test_response_from_process_exception_when_return_response (middleware_exceptions.tests.MiddlewareTests)\", \"TemplateResponses returned from process_view() should be passed to any\", \"TemplateResponses returned from process_view() must be rendered before\", \"test_view_exception_converted_before_middleware (middleware_exceptions.tests.MiddlewareTests)\", \"test_view_exception_handled_by_process_exception (middleware_exceptions.tests.MiddlewareTests)\", \"test_async_and_sync_middleware_async_call (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_async_and_sync_middleware_sync_call (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_async_middleware_async (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_async_process_template_response_returns_none_with_sync_client (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_not_sync_or_async_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_sync_decorated_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_sync_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)\", \"test_exception_in_async_render_passed_to_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests)\", \"test_exception_in_render_passed_to_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests)\", \"test_process_template_response (middleware_exceptions.tests.AsyncMiddlewareTests)\", \"test_process_template_response_returns_none (middleware_exceptions.tests.AsyncMiddlewareTests)\", \"test_process_view_return_response (middleware_exceptions.tests.AsyncMiddlewareTests)\", \"test_view_exception_handled_by_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.728526",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}