{
  "repo": "django/django",
  "instance_id": "django__django-13537",
  "base_commit": "98126cdfaf632abc8f0b5e65910e46a4eedc4641",
  "patch": "diff --git a/django/db/backends/mysql/client.py b/django/db/backends/mysql/client.py\n--- a/django/db/backends/mysql/client.py\n+++ b/django/db/backends/mysql/client.py\n@@ -21,6 +21,7 @@ def settings_to_cmd_args(cls, settings_dict, parameters):\n         client_cert = settings_dict['OPTIONS'].get('ssl', {}).get('cert')\n         client_key = settings_dict['OPTIONS'].get('ssl', {}).get('key')\n         defaults_file = settings_dict['OPTIONS'].get('read_default_file')\n+        charset = settings_dict['OPTIONS'].get('charset')\n         # Seems to be no good way to set sql_mode with CLI.\n \n         if defaults_file:\n@@ -42,6 +43,8 @@ def settings_to_cmd_args(cls, settings_dict, parameters):\n             args += [\"--ssl-cert=%s\" % client_cert]\n         if client_key:\n             args += [\"--ssl-key=%s\" % client_key]\n+        if charset:\n+            args += ['--default-character-set=%s' % charset]\n         if db:\n             args += [db]\n         args.extend(parameters)\n",
  "test_patch": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -59,6 +59,23 @@ def test_options_password(self):\n             }),\n         )\n \n+    def test_options_charset(self):\n+        self.assertEqual(\n+            [\n+                'mysql', '--user=someuser', '--password=somepassword',\n+                '--host=somehost', '--port=444',\n+                '--default-character-set=utf8', 'somedbname',\n+            ],\n+            self.get_command_line_arguments({\n+                'NAME': 'somedbname',\n+                'USER': 'someuser',\n+                'PASSWORD': 'somepassword',\n+                'HOST': 'somehost',\n+                'PORT': 444,\n+                'OPTIONS': {'charset': 'utf8'},\n+            }),\n+        )\n+\n     def test_can_connect_using_sockets(self):\n         self.assertEqual(\n             ['mysql', '--user=someuser', '--password=somepassword',\n",
  "problem_statement": "MySQL: manage.py dbshell does not get charset from DATABASES setting\nDescription\n\t\nI noticed that manage.py dbshell doesn't respect the database_options.\nI ran into an issue with an application we are creating that needs to support mysql and postgre at least, we execute some sql scripts that get piped to manage.py dbshell (to avoid hardcoding psql -U xxx or mysql -u xxx and creating 2 scripts every time).\nWhen running an utf8 database with utf8 as our charset in database_options, we ran into some weird encoding issues.\nThe solution for us was to learn mysql/client.py to respect the encoding settings in settings.py\nAre you opposed to something like this?\nAttaching small patch that fixes our problem. Let me know if it needs extending to support other backends or database_options.\n",
  "hints_text": "small patch to illustrate suggestion\nAlso please note that the read_default_file setting is respected, so it's somehow inconsistent behaviour\nWe should look into whether this is needed on other backends as well, not just MySQL.\nI adapted tvrg's patch to the current codebase - ​https://github.com/jpichon/django/compare/ticket_6517 I also tested dbshell with the sqlite3 and postgresql backends, and it works with UTF-8 characters without patching. There are other ways to get the MySQL backend to play nicely with UTF-8 that don't require changing the code. You can add \"default-character-set = utf8\" to /etc/mysql/my.cnf on the server side, or create an option file with the UTF-8 charset config and update the settings to point to it in the \"read_default_file\" database options (as seen on ​https://docs.djangoproject.com/en/dev/ref/databases/#connecting-to-the-database) [client] default-character-set = utf8 If the patch option is preferred, I'm happy to work on the tests if someone could let me know where the dbshell tests live.\nSeems like a good idea to me.\nA tests can be added in tests/dbshell/test_mysql.py.\nI wrote a test which is as follows: def test_charset_configured(self): self.assertEqual( ['mysql', '--user=someuser', '--password=somepassword', '--host=somehost', '--port=444', 'somedbname'], self.get_command_line_arguments({ 'NAME': 'somedbname', 'USER': 'someuser', 'PASSWORD': 'somepassword', 'HOST': 'somehost', 'PORT': 444, 'DEFAULT-CHARACTER-SET': 'utf8', 'OPTIONS': {}, })) So in the above-mentioned tests, it is working fine when I am not using --default-character-set=utf8 in the list while I am including the same in the dictionary. (The above test is working fine) but IMO it should not work fine as when we are explicitly defining default-character-set to utf8 in the settings file, then it is to be mentioned in the list but as soon as I am adding the same to the list it is raising an error which means it needs a patch and after applying the patch as follows: charset = settings_dict['OPTIONS'].get('charset',settings_dict['DEFAULT-CHARACTER-SET']) if charset: args += [\"--default-character-set=%s\" % charset] The above test is getting failed and the below-mentioned test is getting successfully executed. def test_charset_configured(self): self.assertEqual( ['mysql', '--user=someuser', '--password=somepassword', '--host=somehost', '--port=444', 'somedbname', '--default-character-set=utf8'], self.get_command_line_arguments({ 'NAME': 'somedbname', 'USER': 'someuser', 'PASSWORD': 'somepassword', 'HOST': 'somehost', 'PORT': 444, 'OPTIONS': {}, 'DEFAULT-CHARACTER-SET': 'utf8', })) If the patch and the tests seem fine, I may create a PR",
  "created_at": "2020-10-14T18:13:17Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_options_charset (dbshell.test_mysql.MySqlDbshellCommandTestCase)\"]",
  "PASS_TO_PASS": "[\"test_basic_params_specified_in_settings (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_can_connect_using_sockets (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_fails_with_keyerror_on_incomplete_config (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_options_override_settings_proper_values (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_options_password (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_parameters (dbshell.test_mysql.MySqlDbshellCommandTestCase)\", \"test_ssl_certificate_is_added (dbshell.test_mysql.MySqlDbshellCommandTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.661230",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}