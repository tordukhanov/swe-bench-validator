{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-5033",
  "base_commit": "f94de6b4504482ab206f93ec800608f2e1f47b19",
  "patch": "diff --git a/xarray/backends/api.py b/xarray/backends/api.py\n--- a/xarray/backends/api.py\n+++ b/xarray/backends/api.py\n@@ -375,10 +375,11 @@ def open_dataset(\n         scipy.io.netcdf (only netCDF3 supported). Byte-strings or file-like\n         objects are opened by scipy.io.netcdf (netCDF3) or h5py (netCDF4/HDF).\n     engine : {\"netcdf4\", \"scipy\", \"pydap\", \"h5netcdf\", \"pynio\", \"cfgrib\", \\\n-        \"pseudonetcdf\", \"zarr\"}, optional\n+        \"pseudonetcdf\", \"zarr\"} or subclass of xarray.backends.BackendEntrypoint, optional\n         Engine to use when reading files. If not provided, the default engine\n         is chosen based on available dependencies, with a preference for\n-        \"netcdf4\".\n+        \"netcdf4\". A custom backend class (a subclass of ``BackendEntrypoint``)\n+        can also be used.\n     chunks : int or dict, optional\n         If chunks is provided, it is used to load the new dataset into dask\n         arrays. ``chunks=-1`` loads the dataset with dask using a single\ndiff --git a/xarray/backends/plugins.py b/xarray/backends/plugins.py\n--- a/xarray/backends/plugins.py\n+++ b/xarray/backends/plugins.py\n@@ -5,7 +5,7 @@\n \n import pkg_resources\n \n-from .common import BACKEND_ENTRYPOINTS\n+from .common import BACKEND_ENTRYPOINTS, BackendEntrypoint\n \n STANDARD_BACKENDS_ORDER = [\"netcdf4\", \"h5netcdf\", \"scipy\"]\n \n@@ -113,10 +113,22 @@ def guess_engine(store_spec):\n \n \n def get_backend(engine):\n-    \"\"\"Select open_dataset method based on current engine\"\"\"\n-    engines = list_engines()\n-    if engine not in engines:\n-        raise ValueError(\n-            f\"unrecognized engine {engine} must be one of: {list(engines)}\"\n+    \"\"\"Select open_dataset method based on current engine.\"\"\"\n+    if isinstance(engine, str):\n+        engines = list_engines()\n+        if engine not in engines:\n+            raise ValueError(\n+                f\"unrecognized engine {engine} must be one of: {list(engines)}\"\n+            )\n+        backend = engines[engine]\n+    elif isinstance(engine, type) and issubclass(engine, BackendEntrypoint):\n+        backend = engine\n+    else:\n+        raise TypeError(\n+            (\n+                \"engine must be a string or a subclass of \"\n+                f\"xarray.backends.BackendEntrypoint: {engine}\"\n+            )\n         )\n-    return engines[engine]\n+\n+    return backend\n",
  "test_patch": "diff --git a/xarray/tests/test_backends_api.py b/xarray/tests/test_backends_api.py\n--- a/xarray/tests/test_backends_api.py\n+++ b/xarray/tests/test_backends_api.py\n@@ -1,6 +1,9 @@\n+import numpy as np\n+\n+import xarray as xr\n from xarray.backends.api import _get_default_engine\n \n-from . import requires_netCDF4, requires_scipy\n+from . import assert_identical, requires_netCDF4, requires_scipy\n \n \n @requires_netCDF4\n@@ -14,3 +17,20 @@ def test__get_default_engine():\n \n     engine_default = _get_default_engine(\"/example\")\n     assert engine_default == \"netcdf4\"\n+\n+\n+def test_custom_engine():\n+    expected = xr.Dataset(\n+        dict(a=2 * np.arange(5)), coords=dict(x=(\"x\", np.arange(5), dict(units=\"s\")))\n+    )\n+\n+    class CustomBackend(xr.backends.BackendEntrypoint):\n+        def open_dataset(\n+            filename_or_obj,\n+            drop_variables=None,\n+            **kwargs,\n+        ):\n+            return expected.copy(deep=True)\n+\n+    actual = xr.open_dataset(\"fake_filename\", engine=CustomBackend)\n+    assert_identical(expected, actual)\n",
  "problem_statement": "Simplify adding custom backends\n<!-- Please do a quick search of existing issues to make sure that this has not been asked before. -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI've been working on opening custom hdf formats in xarray, reading up on the apiv2 it is currently only possible to declare a new external plugin in setup.py but that doesn't seem easy or intuitive to me.\r\n\r\n**Describe the solution you'd like**\r\nWhy can't we simply be allowed to add functions to the engine parameter? Example:\r\n```python\r\nfrom custom_backend import engine\r\n\r\nds = xr.load_dataset(filename, engine=engine)\r\n```\r\nThis seems like a small function change to me from my initial _quick_ look because there's mainly a bunch of string checks in the normal case until we get to the registered backend functions, if we send in a function instead in the engine-parameter we can just bypass those checks.\r\n\n",
  "hints_text": "",
  "created_at": "2021-03-13T22:12:39Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_backends_api.py::test_custom_engine\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_backends_api.py::test__get_default_engine\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.887529",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}