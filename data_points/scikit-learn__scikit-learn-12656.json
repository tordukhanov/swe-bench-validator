{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12656",
  "base_commit": "52e9cc5add6ffe6398fed529f5f110f0961ad28a",
  "patch": "diff --git a/sklearn/metrics/classification.py b/sklearn/metrics/classification.py\n--- a/sklearn/metrics/classification.py\n+++ b/sklearn/metrics/classification.py\n@@ -1805,11 +1805,16 @@ def hamming_loss(y_true, y_pred, labels=None, sample_weight=None):\n     y_pred : 1d array-like, or label indicator array / sparse matrix\n         Predicted labels, as returned by a classifier.\n \n-    labels : array, shape = [n_labels], optional (default=None)\n+    labels : array, shape = [n_labels], optional (default='deprecated')\n         Integer array of labels. If not provided, labels will be inferred\n         from y_true and y_pred.\n \n         .. versionadded:: 0.18\n+        .. deprecated:: 0.21\n+           This parameter ``labels`` is deprecated in version 0.21 and will\n+           be removed in version 0.23. Hamming loss uses ``y_true.shape[1]``\n+           for the number of labels when y_true is binary label indicators,\n+           so it is unnecessary for the user to specify.\n \n     sample_weight : array-like of shape = [n_samples], optional\n         Sample weights.\n@@ -1867,10 +1872,11 @@ def hamming_loss(y_true, y_pred, labels=None, sample_weight=None):\n     y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n     check_consistent_length(y_true, y_pred, sample_weight)\n \n-    if labels is None:\n-        labels = unique_labels(y_true, y_pred)\n-    else:\n-        labels = np.asarray(labels)\n+    if labels is not None:\n+        warnings.warn(\"The labels parameter is unused. It was\"\n+                      \" deprecated in version 0.21 and\"\n+                      \" will be removed in version 0.23\",\n+                      DeprecationWarning)\n \n     if sample_weight is None:\n         weight_average = 1.\n@@ -1881,7 +1887,7 @@ def hamming_loss(y_true, y_pred, labels=None, sample_weight=None):\n         n_differences = count_nonzero(y_true - y_pred,\n                                       sample_weight=sample_weight)\n         return (n_differences /\n-                (y_true.shape[0] * len(labels) * weight_average))\n+                (y_true.shape[0] * y_true.shape[1] * weight_average))\n \n     elif y_type in [\"binary\", \"multiclass\"]:\n         return _weighted_sum(y_true != y_pred, sample_weight, normalize=True)\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_classification.py b/sklearn/metrics/tests/test_classification.py\n--- a/sklearn/metrics/tests/test_classification.py\n+++ b/sklearn/metrics/tests/test_classification.py\n@@ -529,8 +529,10 @@ def test_cohen_kappa():\n     y1 = np.array([0] * 46 + [1] * 44 + [2] * 10)\n     y2 = np.array([0] * 50 + [1] * 40 + [2] * 10)\n     assert_almost_equal(cohen_kappa_score(y1, y2), .9315, decimal=4)\n-    assert_almost_equal(cohen_kappa_score(y1, y2, weights=\"linear\"), .9412, decimal=4)\n-    assert_almost_equal(cohen_kappa_score(y1, y2, weights=\"quadratic\"), .9541, decimal=4)\n+    assert_almost_equal(cohen_kappa_score(y1, y2,\n+                        weights=\"linear\"), 0.9412, decimal=4)\n+    assert_almost_equal(cohen_kappa_score(y1, y2,\n+                        weights=\"quadratic\"), 0.9541, decimal=4)\n \n \n @ignore_warnings\n@@ -1128,6 +1130,11 @@ def test_multilabel_hamming_loss():\n     assert_equal(hamming_loss(y1, np.zeros_like(y1), sample_weight=w), 2. / 3)\n     # sp_hamming only works with 1-D arrays\n     assert_equal(hamming_loss(y1[0], y2[0]), sp_hamming(y1[0], y2[0]))\n+    assert_warns_message(DeprecationWarning,\n+                         \"The labels parameter is unused. It was\"\n+                         \" deprecated in version 0.21 and\"\n+                         \" will be removed in version 0.23\",\n+                         hamming_loss, y1, y2, labels=[0, 1])\n \n \n def test_multilabel_jaccard_similarity_score():\n",
  "problem_statement": "Fix Issue #10580\n<!--\r\nThanks for contributing a pull request! Please ensure you have taken a look at\r\nthe contribution guidelines: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#pull-request-checklist\r\n-->\r\n\r\n#### Reference Issues/PRs\r\n<!--\r\nExample: Fixes #1234. See also #3456.\r\nPlease use keywords (e.g., Fixes) to create link to the issues or pull requests\r\nyou resolved, so that they will automatically be closed when your pull request\r\nis merged. See https://github.com/blog/1506-closing-issues-via-pull-requests\r\n--> Fixes #10580 \r\n\r\n\r\n#### What does this implement/fix? Explain your changes.\r\nRemoved the labels parameter in hamming_loss function. Removed all\r\ninstances of labels within the method. Since hamming_loss is used\r\nonly with mulitlabel input, changed len(labels) to y_true.shape[1].\r\n\r\n#### Any other comments?\r\nFirst time contributing to open source! Please let me know what I can \r\ndo to improve!\r\n\r\n<!--\r\nPlease be aware that we are a loose team of volunteers so patience is\r\nnecessary; assistance handling other issues is very welcome. We value\r\nall user contributions, no matter how minor they are. If we are slow to\r\nreview, either the pull request needs some benchmarking, tinkering,\r\nconvincing, etc. or more likely the reviewers are simply busy. In either\r\ncase, we ask for your understanding during the review process.\r\nFor more information, see our FAQ on this topic:\r\nhttp://scikit-learn.org/dev/faq.html#why-is-my-pull-request-not-getting-any-attention.\r\n\r\nThanks for contributing!\r\n-->\r\n\n[MRG] Handling parameter labels removal from hamming_loss \n<!--\r\nThanks for contributing a pull request! Please ensure you have taken a look at\r\nthe contribution guidelines: https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md#pull-request-checklist\r\n-->\r\n\r\n#### Reference Issues/PRs\r\n<!--\r\nFix Issue #10580 #10582\r\n\r\nPlease use keywords (e.g., Fixes) to create link to the issues or pull requests\r\nyou resolved, so that they will automatically be closed when your pull request\r\nis merged. See https://github.com/blog/1506-closing-issues-via-pull-requests\r\n-->\r\n\r\n\r\n#### What does this implement/fix? Explain your changes.\r\n\r\n\r\n#### Any other comments?\r\n\r\n\r\n<!--\r\nPlease be aware that we are a loose team of volunteers so patience is\r\nnecessary; assistance handling other issues is very welcome. We value\r\nall user contributions, no matter how minor they are. If we are slow to\r\nreview, either the pull request needs some benchmarking, tinkering,\r\nconvincing, etc. or more likely the reviewers are simply busy. In either\r\ncase, we ask for your understanding during the review process.\r\nFor more information, see our FAQ on this topic:\r\nhttp://scikit-learn.org/dev/faq.html#why-is-my-pull-request-not-getting-any-attention.\r\n\r\nThanks for contributing!\r\n-->\r\n\n",
  "hints_text": "@qmick it seems you have been beaten to the task. @lialexj, it is appropriate etiquette to let us know with a comment that you intend to solve an issue. Not doing so adds unecessary work for maintainers.\r\n\r\nThis pr should also raise a warning if a value for labels is passed\n@jnothman It looks like a check failed. I'm not sure if the failure is due to the changes made to hamming_loss?\nI think it's a spurious error in codecov\nAre you still working on this?\nIs it ok that I take this over?\r\n\nPlease use \"Fix #issueNumber\" in your PR description (and you can do it more than once). This way the associated issue gets closed automatically when the PR is merged. For more details, look at [this](https://github.com/blog/1506-closing-issues-via-pull-requests).\nPlease add a test that the deprecation warning is raised.\n> Please use \"Fix #issueNumber\" in your PR description (and you can do it more than once). This way the associated issue gets closed automatically when the PR is merged. For more details, look at [this](https://github.com/blog/1506-closing-issues-via-pull-requests).\r\n\r\nThis is supposed to be the fix for Issue #10580 and #10582\n[MRG] Fix Issue #10580 and #10582\nHello @SandraMNE ,\r\n\r\nThank you for participating in the WiMLDS/scikit sprint.  We would love to merge all the PRs that were submitted.  It would be great if you could follow up on the work that you started! For the PR you submitted, would you please update and re-submit?  Please include #wimlds in your PR conversation.  \r\n\r\nAny questions:  \r\n- see [workflow](https://github.com/WiMLDS/nyc-2018-scikit-sprint/blob/master/2_contributing_workflow.md) for reference\r\n- ask on this PR conversation or the issue tracker\r\n- ask on [wimlds gitter](https://gitter.im/scikit-learn/wimlds) with a reference to this PR\r\n\r\ncc:  @reshamas",
  "created_at": "2018-11-22T23:13:24Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_multilabel_hamming_loss\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_classification.py::test_classification_report_dictionary_output\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_accuracy_score_subset_accuracy\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_binary_single_class\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_extra_labels\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_ignored_labels\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_score_non_binary_class\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_duplicate_values\", \"sklearn/metrics/tests/test_classification.py::test_average_precision_score_tied_values\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_fscore_support_errors\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f_unused_pos_label\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_binary\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multilabel\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_errors\", \"sklearn/metrics/tests/test_classification.py::test_cohen_kappa\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_nan\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_numpy_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_jurman\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[100]\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[10000]\", \"sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[1000000]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[samples]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[micro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[macro]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[weighted]\", \"sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[None]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary_averaged\", \"sklearn/metrics/tests/test_classification.py::test_zero_precision_recall\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_multiclass_subset_labels\", \"sklearn/metrics/tests/test_classification.py::test_confusion_matrix_dtype\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_balanced\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_label_detection\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_digits\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_unicode_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_long_string_label\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_classification_report_no_labels_target_names_unequal_length\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_classification_report\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_zero_one_loss_subset\", \"sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_similarity_score\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_2\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[macro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[micro-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[weighted-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[samples-1]\", \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none\", \"sklearn/metrics/tests/test_classification.py::test_prf_warnings\", \"sklearn/metrics/tests/test_classification.py::test_recall_warnings\", \"sklearn/metrics/tests/test_classification.py::test_precision_warnings\", \"sklearn/metrics/tests/test_classification.py::test_fscore_warnings\", \"sklearn/metrics/tests/test_classification.py::test_prf_average_binary_data_non_binary\", \"sklearn/metrics/tests/test_classification.py::test__check_targets\", \"sklearn/metrics/tests/test_classification.py::test__check_targets_multiclass_with_both_y_true_and_y_pred_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_binary\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_with_labels_none\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_with_missing_labels\", \"sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_invariance_lists\", \"sklearn/metrics/tests/test_classification.py::test_log_loss\", \"sklearn/metrics/tests/test_classification.py::test_log_loss_pandas_input\", \"sklearn/metrics/tests/test_classification.py::test_brier_score_loss\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score_unseen\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true0-y_pred0]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true1-y_pred1]\", \"sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true2-y_pred2]\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.965993",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}