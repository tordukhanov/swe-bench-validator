{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-17273",
  "base_commit": "12c50d4004174407a6afc9ab748ba553de42aa07",
  "patch": "diff --git a/sympy/physics/units/__init__.py b/sympy/physics/units/__init__.py\n--- a/sympy/physics/units/__init__.py\n+++ b/sympy/physics/units/__init__.py\n@@ -150,6 +150,7 @@\n     year, years, tropical_year,\n     G, gravitational_constant,\n     c, speed_of_light,\n+    elementary_charge,\n     Z0,\n     hbar,\n     planck,\n@@ -224,9 +225,9 @@ def find_unit(quantity):\n \n     >>> from sympy.physics import units as u\n     >>> u.find_unit('charge')\n-    ['C', 'coulomb', 'coulombs', 'planck_charge']\n+    ['C', 'coulomb', 'coulombs', 'planck_charge', 'elementary_charge']\n     >>> u.find_unit(u.charge)\n-    ['C', 'coulomb', 'coulombs', 'planck_charge']\n+    ['C', 'coulomb', 'coulombs', 'planck_charge', 'elementary_charge']\n     >>> u.find_unit(\"ampere\")\n     ['ampere', 'amperes']\n     >>> u.find_unit('volt')\ndiff --git a/sympy/physics/units/definitions.py b/sympy/physics/units/definitions.py\n--- a/sympy/physics/units/definitions.py\n+++ b/sympy/physics/units/definitions.py\n@@ -321,34 +321,45 @@\n #### CONSTANTS ####\n \n # Newton constant\n+# REF: NIST SP 959 (June 2019)\n G = gravitational_constant = Quantity(\"gravitational_constant\", abbrev=\"G\")\n gravitational_constant.set_dimension(length**3*mass**-1*time**-2)\n-gravitational_constant.set_scale_factor(6.67408e-11*m**3/(kg*s**2))\n+gravitational_constant.set_scale_factor(6.67430e-11*m**3/(kg*s**2))\n \n # speed of light\n c = speed_of_light = Quantity(\"speed_of_light\", abbrev=\"c\")\n speed_of_light.set_dimension(velocity)\n speed_of_light.set_scale_factor(299792458*meter/second)\n \n-# Reduced Planck constant\n-hbar = Quantity(\"hbar\", abbrev=\"hbar\")\n-hbar.set_dimension(action)\n-hbar.set_scale_factor(1.05457266e-34*joule*second)\n+# elementary charge\n+# REF: NIST SP 959 (June 2019)\n+elementary_charge = Quantity(\"elementary_charge\", abbrev=\"e\")\n+elementary_charge.set_dimension(charge)\n+elementary_charge.set_scale_factor(1.602176634e-19*coulomb)\n \n # Planck constant\n+# REF: NIST SP 959 (June 2019)\n planck = Quantity(\"planck\", abbrev=\"h\")\n planck.set_dimension(action)\n-planck.set_scale_factor(2*pi*hbar)\n+planck.set_scale_factor(6.62607015e-34*joule*second)\n+\n+# Reduced Planck constant\n+# REF: NIST SP 959 (June 2019)\n+hbar = Quantity(\"hbar\", abbrev=\"hbar\")\n+hbar.set_dimension(action)\n+hbar.set_scale_factor(planck / (2 * pi))\n \n # Electronvolt\n+# REF: NIST SP 959 (June 2019)\n eV = electronvolt = electronvolts = Quantity(\"electronvolt\", abbrev=\"eV\")\n electronvolt.set_dimension(energy)\n-electronvolt.set_scale_factor(1.60219e-19*joule)\n+electronvolt.set_scale_factor(1.602176634e-19*joule)\n \n # Avogadro number\n+# REF: NIST SP 959 (June 2019)\n avogadro_number = Quantity(\"avogadro_number\")\n avogadro_number.set_dimension(One)\n-avogadro_number.set_scale_factor(6.022140857e23)\n+avogadro_number.set_scale_factor(6.02214076e23)\n \n # Avogadro constant\n avogadro = avogadro_constant = Quantity(\"avogadro_constant\")\n@@ -356,39 +367,43 @@\n avogadro_constant.set_scale_factor(avogadro_number / mol)\n \n # Boltzmann constant\n+# REF: NIST SP 959 (June 2019)\n boltzmann = boltzmann_constant = Quantity(\"boltzmann_constant\")\n boltzmann_constant.set_dimension(energy/temperature)\n-boltzmann_constant.set_scale_factor(1.38064852e-23*joule/kelvin)\n+boltzmann_constant.set_scale_factor(1.380649e-23*joule/kelvin)\n \n # Stefan-Boltzmann constant\n+# REF: NIST SP 959 (June 2019)\n stefan = stefan_boltzmann_constant = Quantity(\"stefan_boltzmann_constant\")\n stefan_boltzmann_constant.set_dimension(energy*time**-1*length**-2*temperature**-4)\n-stefan_boltzmann_constant.set_scale_factor(5.670367e-8*joule/(s*m**2*kelvin**4))\n+stefan_boltzmann_constant.set_scale_factor(pi**2 * boltzmann_constant**4 / (60 * hbar**3 * speed_of_light ** 2))\n \n # Atomic mass\n+# REF: NIST SP 959 (June 2019)\n amu = amus = atomic_mass_unit = atomic_mass_constant = Quantity(\"atomic_mass_constant\")\n atomic_mass_constant.set_dimension(mass)\n-atomic_mass_constant.set_scale_factor(1.660539040e-24*gram)\n+atomic_mass_constant.set_scale_factor(1.66053906660e-24*gram)\n \n # Molar gas constant\n+# REF: NIST SP 959 (June 2019)\n R = molar_gas_constant = Quantity(\"molar_gas_constant\", abbrev=\"R\")\n molar_gas_constant.set_dimension(energy/(temperature * amount_of_substance))\n-molar_gas_constant.set_scale_factor(8.3144598*joule/kelvin/mol)\n+molar_gas_constant.set_scale_factor(boltzmann_constant * avogadro_constant)\n \n # Faraday constant\n faraday_constant = Quantity(\"faraday_constant\")\n faraday_constant.set_dimension(charge/amount_of_substance)\n-faraday_constant.set_scale_factor(96485.33289*C/mol)\n+faraday_constant.set_scale_factor(elementary_charge * avogadro_constant)\n \n # Josephson constant\n josephson_constant = Quantity(\"josephson_constant\", abbrev=\"K_j\")\n josephson_constant.set_dimension(frequency/voltage)\n-josephson_constant.set_scale_factor(483597.8525e9*hertz/V)\n+josephson_constant.set_scale_factor(0.5 * planck / elementary_charge)\n \n # Von Klitzing constant\n von_klitzing_constant = Quantity(\"von_klitzing_constant\", abbrev=\"R_k\")\n von_klitzing_constant.set_dimension(voltage/current)\n-von_klitzing_constant.set_scale_factor(25812.8074555*ohm)\n+von_klitzing_constant.set_scale_factor(hbar / elementary_charge ** 2)\n \n # Acceleration due to gravity (on the Earth surface)\n gee = gees = acceleration_due_to_gravity = Quantity(\"acceleration_due_to_gravity\", abbrev=\"g\")\ndiff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -70,6 +70,7 @@ def convert_to(expr, target_units):\n     >>> from sympy.physics.units import speed_of_light, meter, gram, second, day\n     >>> from sympy.physics.units import mile, newton, kilogram, atomic_mass_constant\n     >>> from sympy.physics.units import kilometer, centimeter\n+    >>> from sympy.physics.units import gravitational_constant, hbar\n     >>> from sympy.physics.units import convert_to\n     >>> convert_to(mile, kilometer)\n     25146*kilometer/15625\n@@ -84,7 +85,7 @@ def convert_to(expr, target_units):\n     >>> convert_to(3*newton, kilogram*meter/second**2)\n     3*kilogram*meter/second**2\n     >>> convert_to(atomic_mass_constant, gram)\n-    1.66053904e-24*gram\n+    1.660539060e-24*gram\n \n     Conversion to multiple units:\n \n@@ -97,7 +98,7 @@ def convert_to(expr, target_units):\n \n     >>> from sympy.physics.units import gravitational_constant, hbar\n     >>> convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n()\n-    7.62950196312651e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5\n+    7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5\n \n     \"\"\"\n     if not isinstance(target_units, (Iterable, Tuple)):\n",
  "test_patch": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -286,8 +286,8 @@ def test_issue_5565():\n \n def test_find_unit():\n     assert find_unit('coulomb') == ['coulomb', 'coulombs', 'coulomb_constant']\n-    assert find_unit(coulomb) == ['C', 'coulomb', 'coulombs', 'planck_charge']\n-    assert find_unit(charge) == ['C', 'coulomb', 'coulombs', 'planck_charge']\n+    assert find_unit(coulomb) == ['C', 'coulomb', 'coulombs', 'planck_charge', 'elementary_charge']\n+    assert find_unit(charge) == ['C', 'coulomb', 'coulombs', 'planck_charge', 'elementary_charge']\n     assert find_unit(inch) == [\n         'm', 'au', 'cm', 'dm', 'ft', 'km', 'ly', 'mi', 'mm', 'nm', 'pm', 'um',\n         'yd', 'nmi', 'feet', 'foot', 'inch', 'mile', 'yard', 'meter', 'miles',\ndiff --git a/sympy/physics/units/tests/test_util.py b/sympy/physics/units/tests/test_util.py\n--- a/sympy/physics/units/tests/test_util.py\n+++ b/sympy/physics/units/tests/test_util.py\n@@ -102,11 +102,11 @@ def test_convert_to_tuples_of_quantities():\n     assert convert_to(2 * speed_of_light, [meter, second, kilogram]) == 2 * 299792458 * meter / second\n     assert convert_to(G, [G, speed_of_light, planck]) == 1.0*G\n \n-    assert NS(convert_to(meter, [G, speed_of_light, hbar]), n=7) == '6.187242e+34*gravitational_constant**0.5000000*hbar**0.5000000*speed_of_light**(-1.500000)'\n-    assert NS(convert_to(planck_mass, kilogram), n=7) == '2.176471e-8*kilogram'\n-    assert NS(convert_to(planck_length, meter), n=7) == '1.616229e-35*meter'\n-    assert NS(convert_to(planck_time, second), n=6) == '5.39116e-44*second'\n-    assert NS(convert_to(planck_temperature, kelvin), n=7) == '1.416809e+32*kelvin'\n+    assert NS(convert_to(meter, [G, speed_of_light, hbar]), n=7) == '6.187142e+34*gravitational_constant**0.5000000*hbar**0.5000000*speed_of_light**(-1.500000)'\n+    assert NS(convert_to(planck_mass, kilogram), n=7) == '2.176434e-8*kilogram'\n+    assert NS(convert_to(planck_length, meter), n=7) == '1.616255e-35*meter'\n+    assert NS(convert_to(planck_time, second), n=6) == '5.39125e-44*second'\n+    assert NS(convert_to(planck_temperature, kelvin), n=7) == '1.416784e+32*kelvin'\n     assert NS(convert_to(convert_to(meter, [G, speed_of_light, planck]), meter), n=10) == '1.000000000*meter'\n \n \n",
  "problem_statement": "Incorrect value for hbar in sympy.physics.units\nThe numerical value given for hbar differs from the CODATA recommended one of: [1.054571817e-34 J s](https://physics.nist.gov/cuu/pdf/wallet_2018.pdf).\n",
  "hints_text": "That seems like it would be easy enough to fix. Could you send a pull request?\nSure, I can do that.",
  "created_at": "2019-07-26T16:22:20Z",
  "version": "1.5",
  "FAIL_TO_PASS": "[\"test_find_unit\", \"test_convert_to_tuples_of_quantities\"]",
  "PASS_TO_PASS": "[\"test_str_repr\", \"test_eq\", \"test_convert_to\", \"test_Quantity_definition\", \"test_abbrev\", \"test_print\", \"test_Quantity_eq\", \"test_add_sub\", \"test_quantity_abs\", \"test_check_unit_consistency\", \"test_mul_div\", \"test_units\", \"test_issue_quart\", \"test_issue_5565\", \"test_Quantity_derivative\", \"test_quantity_postprocessing\", \"test_factor_and_dimension\", \"test_dimensional_expr_of_derivative\", \"test_get_dimensional_expr_with_function\", \"test_binary_information\", \"test_eval_subs\", \"test_issue_14932\", \"test_dim_simplify_add\", \"test_dim_simplify_mul\", \"test_dim_simplify_pow\", \"test_dim_simplify_rec\", \"test_dim_simplify_dimless\", \"test_convert_to_quantities\", \"test_eval_simplify\", \"test_quantity_simplify\"]",
  "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.115502",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}