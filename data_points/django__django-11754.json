{
  "repo": "django/django",
  "instance_id": "django__django-11754",
  "base_commit": "a5a28de89dabfa03302a5893102b6f1a7c7861a1",
  "patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -567,6 +567,10 @@ def gettext_noop(s):\n # Custom logging configuration.\n LOGGING = {}\n \n+# Default exception reporter class used in case none has been\n+# specifically assigned to the HttpRequest instance.\n+DEFAULT_EXCEPTION_REPORTER = 'django.views.debug.ExceptionReporter'\n+\n # Default exception reporter filter class used in case none has been\n # specifically assigned to the HttpRequest instance.\n DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'\ndiff --git a/django/utils/log.py b/django/utils/log.py\n--- a/django/utils/log.py\n+++ b/django/utils/log.py\n@@ -86,7 +86,7 @@ def __init__(self, include_html=False, email_backend=None, reporter_class=None):\n         super().__init__()\n         self.include_html = include_html\n         self.email_backend = email_backend\n-        self.reporter_class = import_string(reporter_class or 'django.views.debug.ExceptionReporter')\n+        self.reporter_class = import_string(reporter_class or settings.DEFAULT_EXCEPTION_REPORTER)\n \n     def emit(self, record):\n         try:\ndiff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -47,7 +47,7 @@ def technical_500_response(request, exc_type, exc_value, tb, status_code=500):\n     Create a technical server error response. The last three arguments are\n     the values returned from sys.exc_info() and friends.\n     \"\"\"\n-    reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n+    reporter = get_exception_reporter_class(request)(request, exc_type, exc_value, tb)\n     if request.is_ajax():\n         text = reporter.get_traceback_text()\n         return HttpResponse(text, status=status_code, content_type='text/plain; charset=utf-8')\n@@ -67,6 +67,11 @@ def get_exception_reporter_filter(request):\n     return getattr(request, 'exception_reporter_filter', default_filter)\n \n \n+def get_exception_reporter_class(request):\n+    default_exception_reporter_class = import_string(settings.DEFAULT_EXCEPTION_REPORTER)\n+    return getattr(request, 'exception_reporter_class', default_exception_reporter_class)\n+\n+\n class SafeExceptionReporterFilter:\n     \"\"\"\n     Use annotations made by the sensitive_post_parameters and\n",
  "test_patch": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -249,6 +249,15 @@ def test_technical_404_converter_raise_404(self):\n             response = self.client.get('/path-post/1/')\n             self.assertContains(response, 'Page not found', status_code=404)\n \n+    def test_exception_reporter_from_request(self):\n+        response = self.client.get('/custom_reporter_class_view/')\n+        self.assertContains(response, 'custom traceback text', status_code=500)\n+\n+    @override_settings(DEFAULT_EXCEPTION_REPORTER='view_tests.views.CustomExceptionReporter')\n+    def test_exception_reporter_from_settings(self):\n+        response = self.client.get('/raises500/')\n+        self.assertContains(response, 'custom traceback text', status_code=500)\n+\n \n class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\ndiff --git a/tests/view_tests/urls.py b/tests/view_tests/urls.py\n--- a/tests/view_tests/urls.py\n+++ b/tests/view_tests/urls.py\n@@ -26,6 +26,7 @@\n     path('raises403/', views.raises403),\n     path('raises404/', views.raises404),\n     path('raises500/', views.raises500),\n+    path('custom_reporter_class_view/', views.custom_reporter_class_view),\n \n     path('technical404/', views.technical404, name='my404'),\n     path('classbased404/', views.Http404View.as_view()),\ndiff --git a/tests/view_tests/views.py b/tests/view_tests/views.py\n--- a/tests/view_tests/views.py\n+++ b/tests/view_tests/views.py\n@@ -10,7 +10,7 @@\n from django.urls import get_resolver\n from django.views import View\n from django.views.debug import (\n-    SafeExceptionReporterFilter, technical_500_response,\n+    ExceptionReporter, SafeExceptionReporterFilter, technical_500_response,\n )\n from django.views.decorators.debug import (\n     sensitive_post_parameters, sensitive_variables,\n@@ -227,6 +227,22 @@ def custom_exception_reporter_filter_view(request):\n         return technical_500_response(request, *exc_info)\n \n \n+class CustomExceptionReporter(ExceptionReporter):\n+    custom_traceback_text = 'custom traceback text'\n+\n+    def get_traceback_html(self):\n+        return self.custom_traceback_text\n+\n+\n+def custom_reporter_class_view(request):\n+    request.exception_reporter_class = CustomExceptionReporter\n+    try:\n+        raise Exception\n+    except Exception:\n+        exc_info = sys.exc_info()\n+        return technical_500_response(request, *exc_info)\n+\n+\n class Klass:\n \n     @sensitive_variables('sauce')\n",
  "problem_statement": "Allow using ExceptionReporter subclass in django.views.debug.technical_500_response\nDescription\n\t \n\t\t(last modified by Carlton Gibson)\n\t \n#29714 allows using an ExceptionReporter subclass with AdminEmailHandler. \nIdeally we'd make the similar available for the 500 debug error view. \n​Currently the use of `ExceptionReporter` is hardcoded. \n* Move this to a parameter\n* Provide an example of using, e.g., functools.partial to configure a subclass when specifying handler500.\nUpdated for comment:5\nAdd ExceptionReporter to the documentation, explaining the relation between the exception reporter class and the filter it uses, and showing a simple override of get_traceback_data(). \nAdd a DEFAULT_EXCEPTION_REPORTER setting to allow specifying this. \n(At that point we could review deprecating DEFAULT_EXCEPTION_REPORTER_FILTER, as was discussed on #25167 — but maybe that's unnecessary. Thoughts?)\n",
  "hints_text": "",
  "created_at": "2019-09-07T17:33:11Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_template_exception (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_exception_reporter_from_request (view_tests.tests.test_debug.DebugViewTests)\", \"test_exception_reporter_from_settings (view_tests.tests.test_debug.DebugViewTests)\"]",
  "PASS_TO_PASS": "[\"test_sensitive_post_parameters_not_called (view_tests.tests.test_debug.DecoratorsTests)\", \"test_sensitive_variables_not_called (view_tests.tests.test_debug.DecoratorsTests)\", \"test_repr (view_tests.tests.test_debug.CallableSettingWrapperTests)\", \"test_cleansed_substitute_override (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_hidden_settings_override (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_setting_allows_custom_subclass (view_tests.tests.test_debug.CustomExceptionReporterFilterTests)\", \"test_handle_db_exception (view_tests.tests.test_debug.DebugViewQueriesAllowedTests)\", \"An exception report can be generated even for a disallowed host.\", \"test_message_only (view_tests.tests.test_debug.PlainTextReportTests)\", \"An exception report can be generated for just a request\", \"An exception report can be generated without request\", \"A simple exception report can be generated\", \"A message can be provided in addition to a request\", \"test_request_with_items_key (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_400 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_403 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_404 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_ajax_response_encoding (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_non_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_paranoid_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_400 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_empty_path_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_classbased_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_default_urlconf_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_files (view_tests.tests.test_debug.DebugViewTests)\", \"test_no_template_source_loaders (view_tests.tests.test_debug.DebugViewTests)\", \"test_non_l10ned_numeric_ids (view_tests.tests.test_debug.DebugViewTests)\", \"test_regression_21530 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404_converter_raise_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_encoding (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_exceptions (view_tests.tests.test_debug.DebugViewTests)\", \"Tests for not existing file\", \"test_encoding_error (view_tests.tests.test_debug.ExceptionReporterTests)\", \"The ExceptionReporter supports Unix, Windows and Macintosh EOL markers\", \"test_exception_fetching_user (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_ignore_traceback_evaluation_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Safe strings in local variables are escaped.\", \"test_message_only (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Non-UTF-8 exceptions/values should not make the output generation choke.\", \"test_reporting_frames_for_cyclic_reference (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_source_not_match (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_frames_without_source (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_of_nested_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_request_with_items_key (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_template_encoding (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Large values should not create a large HTML.\", \"test_unfrozen_importlib (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Unprintable values should not make the output generation choke.\", \"test_callable_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_callable_settings_forbidding_to_set_attributes (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_basic (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_ignore_case (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_cleanse_setting_recurses_in_dictionary (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_dict_setting_with_non_str_key (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_exception_report_uses_meta_filtering (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_multivalue_dict_key_error (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_non_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_paranoid_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_request_meta_filtering (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_keyword_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_method (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_settings_with_sensitive_keys (view_tests.tests.test_debug.ExceptionReporterFilterTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.583738",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}