{
  "repo": "django/django",
  "instance_id": "django__django-13512",
  "base_commit": "b79088306513d5ed76d31ac40ab3c15f858946ea",
  "patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -1,5 +1,6 @@\n import datetime\n import decimal\n+import json\n from collections import defaultdict\n \n from django.core.exceptions import FieldDoesNotExist\n@@ -400,7 +401,7 @@ def display_for_field(value, field, empty_value_display):\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n     elif isinstance(field, models.JSONField) and value:\n         try:\n-            return field.get_prep_value(value)\n+            return json.dumps(value, ensure_ascii=False, cls=field.encoder)\n         except TypeError:\n             return display_for_value(value, empty_value_display)\n     else:\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1258,7 +1258,7 @@ def bound_data(self, data, initial):\n     def prepare_value(self, value):\n         if isinstance(value, InvalidJSONInput):\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, ensure_ascii=False, cls=self.encoder)\n \n     def has_changed(self, initial, data):\n         if super().has_changed(initial, data):\n",
  "test_patch": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -186,6 +186,7 @@ def test_json_display_for_field(self):\n             ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n             (['a', 'b'], '[\"a\", \"b\"]'),\n             ('a', '\"a\"'),\n+            ({'a': '你好 世界'}, '{\"a\": \"你好 世界\"}'),\n             ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n         ]\n         for value, display_value in tests:\ndiff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -29,6 +29,12 @@ def test_prepare_value(self):\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n+        self.assertEqual(field.prepare_value('你好，世界'), '\"你好，世界\"')\n+        self.assertEqual(field.prepare_value({'a': '😀🐱'}), '{\"a\": \"😀🐱\"}')\n+        self.assertEqual(\n+            field.prepare_value([\"你好，世界\", \"jaźń\"]),\n+            '[\"你好，世界\", \"jaźń\"]',\n+        )\n \n     def test_widget(self):\n         field = JSONField()\n",
  "problem_statement": "Admin doesn't display properly unicode chars in JSONFields.\nDescription\n\t \n\t\t(last modified by ZhaoQi99)\n\t \n>>> import json\n>>> print json.dumps('中国')\n\"\\u4e2d\\u56fd\"\njson.dumps use ASCII encoding by default when serializing Chinese.\nSo when we edit a JsonField which contains Chinese character in Django admin,it will appear in ASCII characters.\nI have try to fix this this problem in ​https://github.com/adamchainz/django-mysql/pull/714.And it works prefectly.\n",
  "hints_text": "As far as I'm aware, we cannot use ensure_ascii=False by default because it requires utf8mb4 encoding on MySQL, see #18392. It looks that you can use a custom encoder/decoder to make it works without changes in Django.\nReplying to felixxm: As far as I'm aware, we cannot use ensure_ascii=False by default because it requires utf8mb4 encoding on MySQL, see #18392. It looks that you can use a custom encoder/decoder to make it works without changes in Django. No, this function is only used in Django admin's display, so it will not influence any operation about MySQL writing and reading. I just tested it using utf8 encoding on MySQL, and it works perfectly. In my view, If we save non-ASCII characters in a JsonField ,such as emoij,chinese,Japanese.... And when we want to edit it in Django's admin, it is really not good if it displays in ASCII characters. In order to fix this,we need to do many extra things...\nWe just need to modify this line.​https://github.com/django/django/blob/3d4ffd1ff0eb9343ee41de77caf6ae427b6e873c/django/forms/fields.py#L1261 Then I read the source code of django tests , and It seems that internationalization is not considered.(​https://github.com/django/django/blob/3d4ffd1ff0eb9343ee41de77caf6ae427b6e873c/tests/forms_tests/field_tests/test_jsonfield.py#L29)\nNo, this function is only used in Django admin's display, so it will not influence any operation about MySQL writing and reading. Sorry I missed that. Good catch. Would you like to provide a patch?\nReplying to felixxm: Sorry I missed that. Good catch. Would you like to provide a patch? Yep!",
  "created_at": "2020-10-08T13:52:57Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_prepare_value (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_json_display_for_field (admin_utils.tests.UtilsTests)\", \"test_label_for_field (admin_utils.tests.UtilsTests)\"]",
  "PASS_TO_PASS": "[\"test_cyclic (admin_utils.tests.NestedObjectsTests)\", \"test_non_added_parent (admin_utils.tests.NestedObjectsTests)\", \"test_on_delete_do_nothing (admin_utils.tests.NestedObjectsTests)\", \"test_queries (admin_utils.tests.NestedObjectsTests)\", \"test_relation_on_abstract (admin_utils.tests.NestedObjectsTests)\", \"test_siblings (admin_utils.tests.NestedObjectsTests)\", \"test_unrelated_roots (admin_utils.tests.NestedObjectsTests)\", \"test_converted_value (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_custom_encoder_decoder (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"The widget can be overridden with an attribute.\", \"test_custom_widget_kwarg (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_formfield_disabled (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_has_changed (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_invalid (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_redisplay_wrong_input (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_valid (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_valid_empty (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_widget (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\", \"test_flatten (admin_utils.tests.UtilsTests)\", \"test_flatten_fieldsets (admin_utils.tests.UtilsTests)\", \"test_help_text_for_field (admin_utils.tests.UtilsTests)\", \"test_label_for_field_form_argument (admin_utils.tests.UtilsTests)\", \"test_label_for_property (admin_utils.tests.UtilsTests)\", \"test_list_display_for_value (admin_utils.tests.UtilsTests)\", \"test_list_display_for_value_boolean (admin_utils.tests.UtilsTests)\", \"test_null_display_for_field (admin_utils.tests.UtilsTests)\", \"test_number_formats_display_for_field (admin_utils.tests.UtilsTests)\", \"test_number_formats_with_thousand_separator_display_for_field (admin_utils.tests.UtilsTests)\", \"test_quote (admin_utils.tests.UtilsTests)\", \"test_related_name (admin_utils.tests.UtilsTests)\", \"test_safestring_in_field_label (admin_utils.tests.UtilsTests)\", \"test_values_from_lookup_field (admin_utils.tests.UtilsTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.659639",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}