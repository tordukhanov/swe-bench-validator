{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-9249",
  "base_commit": "1824349f74298112722396be6f84a121bc9d6d63",
  "patch": "diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py\n--- a/src/_pytest/mark/expression.py\n+++ b/src/_pytest/mark/expression.py\n@@ -6,7 +6,7 @@\n expr:       and_expr ('or' and_expr)*\n and_expr:   not_expr ('and' not_expr)*\n not_expr:   'not' not_expr | '(' expr ')' | ident\n-ident:      (\\w|:|\\+|-|\\.|\\[|\\]|\\\\)+\n+ident:      (\\w|:|\\+|-|\\.|\\[|\\]|\\\\|/)+\n \n The semantics are:\n \n@@ -88,7 +88,7 @@ def lex(self, input: str) -> Iterator[Token]:\n                 yield Token(TokenType.RPAREN, \")\", pos)\n                 pos += 1\n             else:\n-                match = re.match(r\"(:?\\w|:|\\+|-|\\.|\\[|\\]|\\\\)+\", input[pos:])\n+                match = re.match(r\"(:?\\w|:|\\+|-|\\.|\\[|\\]|\\\\|/)+\", input[pos:])\n                 if match:\n                     value = match.group(0)\n                     if value == \"or\":\n",
  "test_patch": "diff --git a/testing/test_mark.py b/testing/test_mark.py\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1111,7 +1111,7 @@ def test_pytest_param_id_allows_none_or_string(s) -> None:\n     assert pytest.param(id=s)\n \n \n-@pytest.mark.parametrize(\"expr\", (\"NOT internal_err\", \"NOT (internal_err)\", \"bogus/\"))\n+@pytest.mark.parametrize(\"expr\", (\"NOT internal_err\", \"NOT (internal_err)\", \"bogus=\"))\n def test_marker_expr_eval_failure_handling(pytester: Pytester, expr) -> None:\n     foo = pytester.makepyfile(\n         \"\"\"\ndiff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -144,6 +144,7 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"a:::c\",\n         \"a+-b\",\n         r\"\\nhe\\\\l\\lo\\n\\t\\rbye\",\n+        \"a/b\",\n         \"אבגד\",\n         \"aaאבגדcc\",\n         \"a[bcd]\",\n@@ -170,7 +171,6 @@ def test_valid_idents(ident: str) -> None:\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n-        \"/\",\n         \"^\",\n         \"*\",\n         \"=\",\n",
  "problem_statement": "test ids with `/`s cannot be selected with `-k`\nBy default pytest 6.2.2 parametrize does user arguments to generate IDs, but some of these ids cannot be used with `-k` option because you endup with errors like  `unexpected character \"/\"` when trying to do so.\r\n\r\nThe solution for this bug is to assure that auto-generated IDs are sanitized so they can be used with -k option.\r\n\r\nExample:\r\n```\r\n@pytest.mark.parametrize(\r\n    ('path', 'kind'),\r\n    (\r\n        (\"foo/playbook.yml\", \"playbook\"),\r\n    ),\r\n)\r\ndef test_auto_detect(path: str, kind: FileType) -> None:\r\n   ...\r\n```\r\n\r\nAs you can see the first parameter includes a slash, and for good reasons. It is far from practical to have to add custom \"ids\" for all of these, as you can have LOTS of them.\r\n\r\nThere is another annoyance related to the -k selecting for parameterized tests, is the fact that square braces `[]` have special meanings for some shells and in order to use it you must remember to quote the strings. It would be much easier if the display and selecting of parametrized tests would use only shell-safe format, so we can easily copy/paste a failed test in run it. For example I think that using colon would be safe and arguably even easier to read: `test_name:param1:param2`.\n",
  "hints_text": "The test ids are not invalid, keyword expressions are simply not able to express slashes\n\nIt's not clear to me if that should be added \nI am not sure either, but I wanted to underline the issue, hoping that we can find a way to improve the UX. The idea is what what we display should also be easily used to run a test or to find the test within the source code.\r\n\r\nI was contemplating the idea of using indexes instead of test id.\nActual test ids can be passed as such, no need for keyword expressions \nupdated the title to more accurately reflect that the ids aren't invalid, they just can't be selected using `-k`",
  "created_at": "2021-10-29T13:58:57Z",
  "version": "7.0",
  "FAIL_TO_PASS": "[\"testing/test_mark_expression.py::test_valid_idents[a/b]\"]",
  "PASS_TO_PASS": "[\"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[mark]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[param]\", \"testing/test_mark.py::TestMark::test_pytest_mark_notcallable\", \"testing/test_mark.py::TestMark::test_mark_with_param\", \"testing/test_mark.py::TestMark::test_pytest_mark_name_starts_with_underscore\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs0-rhs0-True]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs1-rhs1-False]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs2-bar-False]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[foo-rhs3-False]\", \"testing/test_mark.py::TestMarkDecorator::test_aliases\", \"testing/test_mark.py::test_pytest_param_id_requires_string\", \"testing/test_mark.py::test_pytest_param_id_allows_none_or_string[None]\", \"testing/test_mark.py::test_pytest_param_id_allows_none_or_string[hello\", \"testing/test_mark_expression.py::test_empty_is_false\", \"testing/test_mark_expression.py::test_basic[true-True0]\", \"testing/test_mark_expression.py::test_basic[true-True1]\", \"testing/test_mark_expression.py::test_basic[false-False]\", \"testing/test_mark_expression.py::test_basic[not\", \"testing/test_mark_expression.py::test_basic[true\", \"testing/test_mark_expression.py::test_basic[false\", \"testing/test_mark_expression.py::test_basic[(not\", \"testing/test_mark_expression.py::test_syntax_oddeties[\", \"testing/test_mark_expression.py::test_syntax_oddeties[(\", \"testing/test_mark_expression.py::test_syntax_oddeties[not\", \"testing/test_mark_expression.py::test_backslash_not_treated_specially\", \"testing/test_mark_expression.py::test_syntax_errors[(-2-expected\", \"testing/test_mark_expression.py::test_syntax_errors[\", \"testing/test_mark_expression.py::test_syntax_errors[)-1-expected\", \"testing/test_mark_expression.py::test_syntax_errors[)\", \"testing/test_mark_expression.py::test_syntax_errors[not-4-expected\", \"testing/test_mark_expression.py::test_syntax_errors[not\", \"testing/test_mark_expression.py::test_syntax_errors[(not)-5-expected\", \"testing/test_mark_expression.py::test_syntax_errors[and-1-expected\", \"testing/test_mark_expression.py::test_syntax_errors[ident\", \"testing/test_mark_expression.py::test_valid_idents[.]\", \"testing/test_mark_expression.py::test_valid_idents[...]\", \"testing/test_mark_expression.py::test_valid_idents[:::]\", \"testing/test_mark_expression.py::test_valid_idents[a:::c]\", \"testing/test_mark_expression.py::test_valid_idents[a+-b]\", \"testing/test_mark_expression.py::test_valid_idents[\\\\\\\\nhe\\\\\\\\\\\\\\\\l\\\\\\\\lo\\\\\\\\n\\\\\\\\t\\\\\\\\rbye]\", \"testing/test_mark_expression.py::test_valid_idents[\\\\u05d0\\\\u05d1\\\\u05d2\\\\u05d3]\", \"testing/test_mark_expression.py::test_valid_idents[aa\\\\u05d0\\\\u05d1\\\\u05d2\\\\u05d3cc]\", \"testing/test_mark_expression.py::test_valid_idents[a[bcd]]\", \"testing/test_mark_expression.py::test_valid_idents[1234]\", \"testing/test_mark_expression.py::test_valid_idents[1234abcd]\", \"testing/test_mark_expression.py::test_valid_idents[1234and]\", \"testing/test_mark_expression.py::test_valid_idents[notandor]\", \"testing/test_mark_expression.py::test_valid_idents[not_and_or]\", \"testing/test_mark_expression.py::test_valid_idents[not[and]or]\", \"testing/test_mark_expression.py::test_valid_idents[1234+5678]\", \"testing/test_mark_expression.py::test_valid_idents[123.232]\", \"testing/test_mark_expression.py::test_valid_idents[True]\", \"testing/test_mark_expression.py::test_valid_idents[False]\", \"testing/test_mark_expression.py::test_valid_idents[None]\", \"testing/test_mark_expression.py::test_valid_idents[if]\", \"testing/test_mark_expression.py::test_valid_idents[else]\", \"testing/test_mark_expression.py::test_valid_idents[while]\", \"testing/test_mark_expression.py::test_invalid_idents[^]\", \"testing/test_mark_expression.py::test_invalid_idents[*]\", \"testing/test_mark_expression.py::test_invalid_idents[=]\", \"testing/test_mark_expression.py::test_invalid_idents[&]\", \"testing/test_mark_expression.py::test_invalid_idents[%]\", \"testing/test_mark_expression.py::test_invalid_idents[$]\", \"testing/test_mark_expression.py::test_invalid_idents[#]\", \"testing/test_mark_expression.py::test_invalid_idents[@]\", \"testing/test_mark_expression.py::test_invalid_idents[!]\", \"testing/test_mark_expression.py::test_invalid_idents[~]\", \"testing/test_mark_expression.py::test_invalid_idents[{]\", \"testing/test_mark_expression.py::test_invalid_idents[}]\", \"testing/test_mark_expression.py::test_invalid_idents[\\\"]\", \"testing/test_mark_expression.py::test_invalid_idents[']\", \"testing/test_mark_expression.py::test_invalid_idents[|]\", \"testing/test_mark_expression.py::test_invalid_idents[;]\", \"testing/test_mark_expression.py::test_invalid_idents[\\\\u2190]\", \"testing/test_mark.py::test_marked_class_run_twice\", \"testing/test_mark.py::test_ini_markers\", \"testing/test_mark.py::test_markers_option\", \"testing/test_mark.py::test_ini_markers_whitespace\", \"testing/test_mark.py::test_marker_without_description\", \"testing/test_mark.py::test_markers_option_with_plugin_in_current_dir\", \"testing/test_mark.py::test_mark_on_pseudo_function\", \"testing/test_mark.py::test_strict_prohibits_unregistered_markers[--strict-markers]\", \"testing/test_mark.py::test_strict_prohibits_unregistered_markers[--strict]\", \"testing/test_mark.py::test_mark_option[xyz-expected_passed0]\", \"testing/test_mark.py::test_mark_option[(((\", \"testing/test_mark.py::test_mark_option[not\", \"testing/test_mark.py::test_mark_option[xyz\", \"testing/test_mark.py::test_mark_option[xyz2-expected_passed4]\", \"testing/test_mark.py::test_mark_option_custom[interface-expected_passed0]\", \"testing/test_mark.py::test_mark_option_custom[not\", \"testing/test_mark.py::test_keyword_option_custom[interface-expected_passed0]\", \"testing/test_mark.py::test_keyword_option_custom[not\", \"testing/test_mark.py::test_keyword_option_custom[pass-expected_passed2]\", \"testing/test_mark.py::test_keyword_option_custom[1\", \"testing/test_mark.py::test_keyword_option_considers_mark\", \"testing/test_mark.py::test_keyword_option_parametrize[None-expected_passed0]\", \"testing/test_mark.py::test_keyword_option_parametrize[[1.3]-expected_passed1]\", \"testing/test_mark.py::test_keyword_option_parametrize[2-3-expected_passed2]\", \"testing/test_mark.py::test_parametrize_with_module\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[foo\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[(foo-at\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[or\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[not\", \"testing/test_mark.py::test_parametrized_collected_from_command_line\", \"testing/test_mark.py::test_parametrized_collect_with_wrong_args\", \"testing/test_mark.py::test_parametrized_with_kwargs\", \"testing/test_mark.py::test_parametrize_iterator\", \"testing/test_mark.py::TestFunctional::test_merging_markers_deep\", \"testing/test_mark.py::TestFunctional::test_mark_decorator_subclass_does_not_propagate_to_base\", \"testing/test_mark.py::TestFunctional::test_mark_should_not_pass_to_siebling_class\", \"testing/test_mark.py::TestFunctional::test_mark_decorator_baseclasses_merged\", \"testing/test_mark.py::TestFunctional::test_mark_closest\", \"testing/test_mark.py::TestFunctional::test_mark_with_wrong_marker\", \"testing/test_mark.py::TestFunctional::test_mark_dynamically_in_funcarg\", \"testing/test_mark.py::TestFunctional::test_no_marker_match_on_unmarked_names\", \"testing/test_mark.py::TestFunctional::test_keywords_at_node_level\", \"testing/test_mark.py::TestFunctional::test_keyword_added_for_session\", \"testing/test_mark.py::TestFunctional::test_mark_from_parameters\", \"testing/test_mark.py::TestFunctional::test_reevaluate_dynamic_expr\", \"testing/test_mark.py::TestKeywordSelection::test_select_simple\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[xxx]\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[xxx\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[TestClass]\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[TestClass\", \"testing/test_mark.py::TestKeywordSelection::test_select_starton\", \"testing/test_mark.py::TestKeywordSelection::test_keyword_extra\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values[__]\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values[+]\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values[..]\", \"testing/test_mark.py::TestKeywordSelection::test_no_match_directories_outside_the_suite\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[None]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[skip]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[xfail]\", \"testing/test_mark.py::test_parameterset_for_fail_at_collect\", \"testing/test_mark.py::test_parameterset_for_parametrize_bad_markname\", \"testing/test_mark.py::test_mark_expressions_no_smear\", \"testing/test_mark.py::test_addmarker_order\", \"testing/test_mark.py::test_markers_from_parametrize\", \"testing/test_mark.py::test_marker_expr_eval_failure_handling[NOT\", \"testing/test_mark.py::test_marker_expr_eval_failure_handling[bogus=]\"]",
  "environment_setup_commit": "e2ee3144ed6e241dea8d96215fcdca18b3892551",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.946128",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}