{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8633",
  "base_commit": "0f1fcdc1137e9f1e954d349f4721744af1e82828",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1193,6 +1193,8 @@ def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n                 valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n \n         docstrings = self.get_doc()\n+        if docstrings is None:\n+            return None, None\n         self._new_docstrings = docstrings[:]\n         self._signatures = []\n         result = None\n@@ -1692,7 +1694,10 @@ def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[Lis\n     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False\n                     ) -> None:\n         if self.doc_as_attr:\n-            more_content = StringList([_('alias of %s') % restify(self.object)], source='')\n+            try:\n+                more_content = StringList([_('alias of %s') % restify(self.object)], source='')\n+            except AttributeError:\n+                pass  # Invalid class object is passed.\n \n         super().add_content(more_content)\n \n@@ -2158,15 +2163,24 @@ class NonDataDescriptorMixin(DataDocumenterMixinBase):\n               and :value: header will be suppressed unexpectedly.\n     \"\"\"\n \n+    def import_object(self, raiseerror: bool = False) -> bool:\n+        ret = super().import_object(raiseerror)  # type: ignore\n+        if ret and not inspect.isattributedescriptor(self.object):\n+            self.non_data_descriptor = True\n+        else:\n+            self.non_data_descriptor = False\n+\n+        return ret\n+\n     def should_suppress_value_header(self) -> bool:\n-        return (inspect.isattributedescriptor(self.object) or\n+        return (not getattr(self, 'non_data_descriptor', False) or\n                 super().should_suppress_directive_header())\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n-        if not inspect.isattributedescriptor(self.object):\n+        if getattr(self, 'non_data_descriptor', False):\n             # the docstring of non datadescriptor is very probably the wrong thing\n             # to display\n-            return []\n+            return None\n         else:\n             return super().get_doc(encoding, ignore)  # type: ignore\n \n@@ -2319,6 +2333,12 @@ def should_suppress_value_header(self) -> bool:\n         return (self.object is UNINITIALIZED_ATTR or\n                 super().should_suppress_value_header())\n \n+    def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n+        if self.object is UNINITIALIZED_ATTR:\n+            return None\n+        else:\n+            return super().get_doc(encoding, ignore)  # type: ignore\n+\n \n class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type: ignore\n                           TypeVarMixin, RuntimeInstanceAttributeMixin,\n@@ -2419,9 +2439,10 @@ def should_suppress_value_header(self) -> bool:\n             return True\n         else:\n             doc = self.get_doc()\n-            metadata = extract_metadata('\\n'.join(sum(doc, [])))\n-            if 'hide-value' in metadata:\n-                return True\n+            if doc:\n+                metadata = extract_metadata('\\n'.join(sum(doc, [])))\n+                if 'hide-value' in metadata:\n+                    return True\n \n         return False\n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_events.py b/tests/test_ext_autodoc_events.py\n--- a/tests/test_ext_autodoc_events.py\n+++ b/tests/test_ext_autodoc_events.py\n@@ -34,6 +34,23 @@ def on_process_docstring(app, what, name, obj, options, lines):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_process_docstring_for_nondatadescriptor(app):\n+    def on_process_docstring(app, what, name, obj, options, lines):\n+        raise\n+\n+    app.connect('autodoc-process-docstring', on_process_docstring)\n+\n+    actual = do_autodoc(app, 'attribute', 'target.AttCls.a1')\n+    assert list(actual) == [\n+        '',\n+        '.. py:attribute:: AttCls.a1',\n+        '   :module: target',\n+        '   :value: hello world',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_cut_lines(app):\n     app.connect('autodoc-process-docstring',\n",
  "problem_statement": "building psf/requests documentation fails with AttributeError: 'LookupDict' object has no attribute '__name__'\n**Describe the bug**\r\n\r\nSince sphinx 3.4.1 building [psf/requests](https://github.com/psf/requests/) documentation fails with the following:\r\n```\r\nsphinx-build -b html -d _build/doctrees   . _build/html\r\nRunning Sphinx v3.4.1\r\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\r\nloading intersphinx inventory from https://urllib3.readthedocs.io/en/latest/objects.inv...\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [html]: targets for 15 source files that are out of date\r\nupdating environment: [new config] 15 added, 0 changed, 0 removed\r\nreading sources... [  6%] api                                                                                                                                                                \r\nException occurred:\r\n  File \"/usr/lib/python3/dist-packages/sphinx/util/typing.py\", line 160, in _restify_py37\r\n    return ':obj:`%s.%s`' % (cls.__module__, cls.__name__)\r\nAttributeError: 'LookupDict' object has no attribute '__name__'\r\nThe full traceback has been saved in /tmp/sphinx-err-yt45bplo.log, if you want to report the issue to the developers.\r\n```\r\nAttached the full log: [sphinx-err-yt45bplo.log](https://github.com/sphinx-doc/sphinx/files/5751590/sphinx-err-yt45bplo.log)\r\n\r\nThe issue is not reproducible using sphinx 3.3.1.\r\n\r\n**To Reproduce**\r\nIn addiction to build requests' documentation I managed to reproduce the issue in the interactive python console using the following:\r\n```\r\nPython 3.9.1 (default, Dec  8 2020, 07:51:42) \r\n[GCC 10.2.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import requests\r\n>>> import sphinx\r\n>>> requests.__version__\r\n'2.25.0'\r\n>>> sphinx.__version__\r\n'3.4.1'\r\n>>> from requests import codes\r\n>>> from sphinx.util.typing import restify\r\n>>> restify(codes)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3/dist-packages/sphinx/util/typing.py\", line 103, in restify\r\n    return _restify_py37(cls)\r\n  File \"/usr/lib/python3/dist-packages/sphinx/util/typing.py\", line 160, in _restify_py37\r\n    return ':obj:`%s.%s`' % (cls.__module__, cls.__name__)\r\nAttributeError: 'LookupDict' object has no attribute '__name__'\r\n```\r\n\r\nI'm able to reproduce the issue in a clean virtualenv with only requests and sphinx installed.\r\n\r\nThanks!\n",
  "hints_text": "",
  "created_at": "2020-12-31T12:38:41Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_events.py::test_process_docstring_for_nondatadescriptor\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_events.py::test_process_docstring\", \"tests/test_ext_autodoc_events.py::test_cut_lines\", \"tests/test_ext_autodoc_events.py::test_between\", \"tests/test_ext_autodoc_events.py::test_between_exclude\", \"tests/test_ext_autodoc_events.py::test_skip_module_member\"]",
  "environment_setup_commit": "4f8cb861e3b29186b38248fe81e4944fd987fcce",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.058444",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}