{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-8428",
  "base_commit": "fe51121f39ca48c1af21733a60ae069b316b1cdb",
  "patch": "diff --git a/src/_pytest/deprecated.py b/src/_pytest/deprecated.py\n--- a/src/_pytest/deprecated.py\n+++ b/src/_pytest/deprecated.py\n@@ -122,6 +122,11 @@\n     \"#configuring-hook-specs-impls-using-markers\",\n )\n \n+MARKED_FIXTURE = PytestRemovedIn8Warning(\n+    \"Marks applied to fixtures have no effect\\n\"\n+    \"See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\"\n+)\n+\n # You want to make some `__init__` or function \"private\".\n #\n #   def my_private_function(some, args):\ndiff --git a/src/_pytest/fixtures.py b/src/_pytest/fixtures.py\n--- a/src/_pytest/fixtures.py\n+++ b/src/_pytest/fixtures.py\n@@ -53,6 +53,7 @@\n from _pytest.config import Config\n from _pytest.config.argparsing import Parser\n from _pytest.deprecated import check_ispytest\n+from _pytest.deprecated import MARKED_FIXTURE\n from _pytest.deprecated import YIELD_FIXTURE\n from _pytest.mark import Mark\n from _pytest.mark import ParameterSet\n@@ -1199,6 +1200,9 @@ def __call__(self, function: FixtureFunction) -> FixtureFunction:\n                 \"fixture is being applied more than once to the same function\"\n             )\n \n+        if hasattr(function, \"pytestmark\"):\n+            warnings.warn(MARKED_FIXTURE, stacklevel=2)\n+\n         function = wrap_function_to_error_out_if_called_directly(function, self)\n \n         name = self.name or function.__name__\ndiff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -28,6 +28,7 @@\n from ..compat import NotSetType\n from _pytest.config import Config\n from _pytest.deprecated import check_ispytest\n+from _pytest.deprecated import MARKED_FIXTURE\n from _pytest.outcomes import fail\n from _pytest.warning_types import PytestUnknownMarkWarning\n \n@@ -412,6 +413,12 @@ def store_mark(obj, mark: Mark) -> None:\n     This is used to implement the Mark declarations/decorators correctly.\n     \"\"\"\n     assert isinstance(mark, Mark), mark\n+\n+    from ..fixtures import getfixturemarker\n+\n+    if getfixturemarker(obj) is not None:\n+        warnings.warn(MARKED_FIXTURE, stacklevel=2)\n+\n     # Always reassign name to avoid updating pytestmark in a reference that\n     # was only borrowed.\n     obj.pytestmark = [*get_unpacked_marks(obj, consider_mro=False), mark]\n",
  "test_patch": "diff --git a/testing/deprecated_test.py b/testing/deprecated_test.py\n--- a/testing/deprecated_test.py\n+++ b/testing/deprecated_test.py\n@@ -281,6 +281,57 @@ def test_importing_instance_is_deprecated(pytester: Pytester) -> None:\n         from _pytest.python import Instance  # noqa: F401\n \n \n+def test_fixture_disallow_on_marked_functions():\n+    \"\"\"Test that applying @pytest.fixture to a marked function warns (#3364).\"\"\"\n+    with pytest.warns(\n+        pytest.PytestRemovedIn8Warning,\n+        match=r\"Marks applied to fixtures have no effect\",\n+    ) as record:\n+\n+        @pytest.fixture\n+        @pytest.mark.parametrize(\"example\", [\"hello\"])\n+        @pytest.mark.usefixtures(\"tmp_path\")\n+        def foo():\n+            raise NotImplementedError()\n+\n+    # it's only possible to get one warning here because you're already prevented\n+    # from applying @fixture twice\n+    # ValueError(\"fixture is being applied more than once to the same function\")\n+    assert len(record) == 1\n+\n+\n+def test_fixture_disallow_marks_on_fixtures():\n+    \"\"\"Test that applying a mark to a fixture warns (#3364).\"\"\"\n+    with pytest.warns(\n+        pytest.PytestRemovedIn8Warning,\n+        match=r\"Marks applied to fixtures have no effect\",\n+    ) as record:\n+\n+        @pytest.mark.parametrize(\"example\", [\"hello\"])\n+        @pytest.mark.usefixtures(\"tmp_path\")\n+        @pytest.fixture\n+        def foo():\n+            raise NotImplementedError()\n+\n+    assert len(record) == 2  # one for each mark decorator\n+\n+\n+def test_fixture_disallowed_between_marks():\n+    \"\"\"Test that applying a mark to a fixture warns (#3364).\"\"\"\n+    with pytest.warns(\n+        pytest.PytestRemovedIn8Warning,\n+        match=r\"Marks applied to fixtures have no effect\",\n+    ) as record:\n+\n+        @pytest.mark.parametrize(\"example\", [\"hello\"])\n+        @pytest.fixture\n+        @pytest.mark.usefixtures(\"tmp_path\")\n+        def foo():\n+            raise NotImplementedError()\n+\n+    assert len(record) == 2  # one for each mark decorator\n+\n+\n @pytest.mark.filterwarnings(\"default\")\n def test_nose_deprecated_with_setup(pytester: Pytester) -> None:\n     pytest.importorskip(\"nose\")\n",
  "problem_statement": "Generate an error when a mark is applied to a fixture\nFollow up from #1014.\r\n\r\nWe should generate an error if a `@pytest.mark` is applied to a fixture.\r\n\r\nThere is a warning in `doc/en/fixture.rst` about this problem which should be updated once this issue is dealt with.\n",
  "hints_text": "[GitMate.io](https://gitmate.io) thinks possibly related issues are https://github.com/pytest-dev/pytest/issues/3346 (Please error when fixtures conflict), https://github.com/pytest-dev/pytest/issues/2872 (mark fixtures ), https://github.com/pytest-dev/pytest/issues/2399 (marks should propogate through fixtures), https://github.com/pytest-dev/pytest/issues/2424 (dynamically generated fixtures), and https://github.com/pytest-dev/pytest/issues/3351 (Is there a way to provide mark with fixture params).\n@nicoddemus I am starting working on this.\nGreat, thanks @avirlrma! \n@nicoddemus I'm having trouble with code navigation, need some help with it. My initial guess was `mark/evaluate.py`, but it is called even when there are no marked tests.\r\nI am using a test like below and and setting up breakpoints to find where the `@pytest.mark.usefixtures('client')` takes me but I'm having no luck with the same.\r\n```\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef client():\r\n    print('fixture.client')\r\n\r\n\r\n@pytest.mark.usefixtures('client')\r\ndef test_tom():\r\n    print('user jessie')\r\n    assert 0\r\n```\nHi @avirlrma,\r\n\r\nActually I believe you need to look at where marks are applied to functions; at that point we need to identify if the function where the mark will be applied is already a fixture (possibly by checking one of the attributes which are attached to the function by the `fixture` decorator).\r\n\r\n(Sorry for the brevity as I'm short on time)\nthe pytest fixture parser should raise an error if either the fuction or the wrapped function has markers applied\n@RonnyPfannschmidt @nicoddemus Where should we catch the error? I mean when fixture is parsed or when the marks are applied to function?\r\n\r\nAlso,\r\n```\r\n@pytest.fixture\r\n@pytest.mark.usefixtures('client')\r\ndef user_tom():\r\n    print('user jessie')\r\n\r\n```\r\nAs far as I understand decorators, mark will applied first, but since then the function is not a fixture, this should work, but it doesn't. Please help me with this as well.\n> Where should we catch the error?\r\n\r\nYou mean raise the error? We don't need to catch the error, only raise it to warn the user.\r\n\r\n> I mean when fixture is parsed or when the marks are applied to function?\r\n\r\nProbably at both places, because as you correctly point out, marks and fixtures can be applied in different order.\r\n\r\nBtw, perhaps we should issue a warning instead of an error right away? \nAh yes, I meant raise the error. \r\nI am working on finding the code for fixtures are parsed and marks are applied. May need some help on that later.\r\n>  we should issue a warning instead of an error right away?\r\n\r\nHow do we do that?\nwe should check both, fixture, and at fixture parsing time, as we currently still need to catch stuff like \r\n```python\r\n\r\n@pytest.mark.usefixtures('client')\r\n@pytest.fixture\r\ndef user_tom():\r\n    print('user jessie')\r\n```\nok, so we have to check both. For now I'm starting with the mark first and then fixture case i.e.:\r\n```\r\n@pytest.fixture\r\n@pytest.mark.usefixtures('client')\r\n```\r\nThis can be raised when the fixture is parsed, so the necessary changes will be done in `fixtures.py` . Let me know If you find something wrong with the approach.\r\nJust need explanation on the warning thing @nicoddemus talked about above.\n> Let me know If you find something wrong with the approach.\r\n\r\nSounds good, we can discuss over a PR.\r\n\r\n> Just need explanation on the warning thing @nicoddemus talked about above.\r\n\r\nI mean to issue a warning instead of an error, something like:\r\n\r\n```python\r\nwarnings.warn(pytest.PytestWarning('marks cannot...'), stacklevel=2)\r\n```\ngot it! I'm working on the PR\nI don't understand why applying the `usefixtures` marker to a fixture should result in an error.\r\nFixtures can already use other fixtures by declaring them in the signature:\r\n```python\r\n@pytest.fixture\r\ndef setup_for_bar():\r\n    # setup something....\r\n    pass\r\n\r\n@pytest.fixture\r\ndef bar(setup_for_bar):\r\n    return 43\r\n```\r\n\r\nWhat is the reason of *not* supporting the equivalent way with `usefixtures`?\r\n```python\r\n@pytest.fixture\r\ndef setup_for_bar():\r\n    # setup something....\r\n    pass\r\n\r\n@pytest.mark.usefixtures('setup_for_bar')\r\n@pytest.fixture\r\ndef bar():\r\n    return 43\r\n```\r\n\r\nThe reason I am asking this is that in pytest-factoryboy we have to call [exec](https://github.com/pytest-dev/pytest-factoryboy/blob/a873a8f5d101d4d3d7956c2b4e9d15b28b98c3f5/pytest_factoryboy/fixture.py#L42) in order to generate a fixture that requires all the relevant fixtures. The use of `exec` could be easily avoided if it was possible to mark a fixture with the `usefixtures` marker.\r\n\r\nEDIT: I made a typo that changed the polarity of the sentence \"What is the reason of *not* supporting the equivalent way with `usefixtures`?\"\nHi @youtux, \r\n\r\n> I don't understand why applying the usefixtures marker to a fixture should result in an error.\r\n\r\nMostly because it doesn't do anything currently.\r\n\r\n> What is the reason of supporting the equivalent way with usefixtures? \r\n\r\nThis issue is about raising an error if a mark is aplied to a fixture, not to support `@pytest.mark.usefixtures` in fixtures. 😁 \nSorry, I meant to say \"What is the reason of **not** supporting the equivalent way with usefixtures?\". So I am all about supporting it, not the other way around 😅.\nOh OK! 😁 \r\n\r\nI think it makes sense actually; this task is more of a stop gap in order for people to stop using it and it doing nothing I think. It is easier to remove this when we eventually do support marks in fixtures.\nSo if I understand correctly this is just about making it resulting into an error, but the maintainers are not against this feature per-se, correct?\nI don't think so; previously it was a problem technically because of how marks worked internally, but since we have refactor and improved that aspect I think it should be fine to do this now.\nOk, I'll give it a look then.\nThanks!",
  "created_at": "2021-03-10T14:02:46Z",
  "version": "8.0",
  "FAIL_TO_PASS": "[\"testing/deprecated_test.py::test_fixture_disallow_on_marked_functions\", \"testing/deprecated_test.py::test_fixture_disallow_marks_on_fixtures\", \"testing/deprecated_test.py::test_fixture_disallowed_between_marks\"]",
  "PASS_TO_PASS": "[\"testing/deprecated_test.py::test_hookspec_via_function_attributes_are_deprecated\", \"testing/deprecated_test.py::test_hookimpl_via_function_attributes_are_deprecated\", \"testing/deprecated_test.py::test_yield_fixture_is_deprecated\", \"testing/deprecated_test.py::test_private_is_deprecated\", \"testing/deprecated_test.py::test_hookproxy_warnings_for_pathlib[hook]\", \"testing/deprecated_test.py::test_hookproxy_warnings_for_pathlib[ihook]\", \"testing/deprecated_test.py::test_warns_none_is_deprecated\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_capturelog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_catchlog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_faulthandler]\", \"testing/deprecated_test.py::test_fscollector_gethookproxy_isinitpath\", \"testing/deprecated_test.py::test_strict_option_is_deprecated\", \"testing/deprecated_test.py::TestSkipMsgArgumentDeprecated::test_skip_with_msg_is_deprecated\", \"testing/deprecated_test.py::TestSkipMsgArgumentDeprecated::test_fail_with_msg_is_deprecated\", \"testing/deprecated_test.py::TestSkipMsgArgumentDeprecated::test_exit_with_msg_is_deprecated\", \"testing/deprecated_test.py::test_deprecation_of_cmdline_preparse\", \"testing/deprecated_test.py::test_node_ctor_fspath_argument_is_deprecated\", \"testing/deprecated_test.py::test_importing_instance_is_deprecated\"]",
  "environment_setup_commit": "10056865d2a4784934ce043908a0e78d0578f677",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.942783",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}