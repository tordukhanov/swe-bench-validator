{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13472",
  "base_commit": "3b35104c93cb53f67fb5f52ae2fece76ef7144da",
  "patch": "diff --git a/sklearn/ensemble/gradient_boosting.py b/sklearn/ensemble/gradient_boosting.py\n--- a/sklearn/ensemble/gradient_boosting.py\n+++ b/sklearn/ensemble/gradient_boosting.py\n@@ -1476,20 +1476,25 @@ def fit(self, X, y, sample_weight=None, monitor=None):\n                 raw_predictions = np.zeros(shape=(X.shape[0], self.loss_.K),\n                                            dtype=np.float64)\n             else:\n-                try:\n-                    self.init_.fit(X, y, sample_weight=sample_weight)\n-                except TypeError:\n-                    if sample_weight_is_none:\n-                        self.init_.fit(X, y)\n-                    else:\n-                        raise ValueError(\n-                            \"The initial estimator {} does not support sample \"\n-                            \"weights.\".format(self.init_.__class__.__name__))\n+                # XXX clean this once we have a support_sample_weight tag\n+                if sample_weight_is_none:\n+                    self.init_.fit(X, y)\n+                else:\n+                    msg = (\"The initial estimator {} does not support sample \"\n+                           \"weights.\".format(self.init_.__class__.__name__))\n+                    try:\n+                        self.init_.fit(X, y, sample_weight=sample_weight)\n+                    except TypeError:  # regular estimator without SW support\n+                        raise ValueError(msg)\n+                    except ValueError as e:\n+                        if 'not enough values to unpack' in str(e):  # pipeline\n+                            raise ValueError(msg) from e\n+                        else:  # regular estimator whose input checking failed\n+                            raise\n \n                 raw_predictions = \\\n                     self.loss_.get_init_raw_predictions(X, self.init_)\n \n-\n             begin_at_stage = 0\n \n             # The rng state must be preserved if warm_start is True\n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_gradient_boosting.py b/sklearn/ensemble/tests/test_gradient_boosting.py\n--- a/sklearn/ensemble/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/tests/test_gradient_boosting.py\n@@ -39,6 +39,9 @@\n from sklearn.exceptions import DataConversionWarning\n from sklearn.exceptions import NotFittedError\n from sklearn.dummy import DummyClassifier, DummyRegressor\n+from sklearn.pipeline import make_pipeline\n+from sklearn.linear_model import LinearRegression\n+from sklearn.svm import NuSVR\n \n \n GRADIENT_BOOSTING_ESTIMATORS = [GradientBoostingClassifier,\n@@ -1366,6 +1369,33 @@ def test_gradient_boosting_with_init(gb, dataset_maker, init_estimator):\n         gb(init=init_est).fit(X, y, sample_weight=sample_weight)\n \n \n+def test_gradient_boosting_with_init_pipeline():\n+    # Check that the init estimator can be a pipeline (see issue #13466)\n+\n+    X, y = make_regression(random_state=0)\n+    init = make_pipeline(LinearRegression())\n+    gb = GradientBoostingRegressor(init=init)\n+    gb.fit(X, y)  # pipeline without sample_weight works fine\n+\n+    with pytest.raises(\n+            ValueError,\n+            match='The initial estimator Pipeline does not support sample '\n+                  'weights'):\n+        gb.fit(X, y, sample_weight=np.ones(X.shape[0]))\n+\n+    # Passing sample_weight to a pipeline raises a ValueError. This test makes\n+    # sure we make the distinction between ValueError raised by a pipeline that\n+    # was passed sample_weight, and a ValueError raised by a regular estimator\n+    # whose input checking failed.\n+    with pytest.raises(\n+            ValueError,\n+            match='nu <= 0 or nu > 1'):\n+        # Note that NuSVR properly supports sample_weight\n+        init = NuSVR(gamma='auto', nu=1.5)\n+        gb = GradientBoostingRegressor(init=init)\n+        gb.fit(X, y, sample_weight=np.ones(X.shape[0]))\n+\n+\n @pytest.mark.parametrize('estimator, missing_method', [\n     (GradientBoostingClassifier(init=LinearSVC()), 'predict_proba'),\n     (GradientBoostingRegressor(init=OneHotEncoder()), 'predict')\n",
  "problem_statement": "GradientBoostingRegressor initial estimator does not play together with Pipeline\nUsing a pipeline as the initial estimator of GradientBoostingRegressor doesn't work due to incompatible signatures.\r\n\r\n```python\r\nimport sklearn\r\nimport sklearn.pipeline\r\nimport sklearn.ensemble\r\nimport sklearn.decomposition\r\nimport sklearn.linear_model\r\nimport numpy as np\r\ninit = sklearn.pipeline.make_pipeline(sklearn.decomposition.PCA(), sklearn.linear_model.ElasticNet())\r\nmodel = sklearn.ensemble.GradientBoostingRegressor(init=init)\r\nx = np.random.rand(12, 3)\r\ny = np.random.rand(12)\r\nmodel.fit(x, y)\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/Thomas/.local/miniconda3/envs/4cast/lib/python3.6/site-packages/sklearn/ensemble/gradient_boosting.py\", line 1421, in fit\r\n    self.init_.fit(X, y, sample_weight)\r\nTypeError: fit() takes from 2 to 3 positional arguments but 4 were given\r\n```\r\nThe signature of `Pipeline.fit` is\r\n\r\n```python\r\n# sklearn/pipeline.py\r\n...\r\n239 def fit(self, X, y=None, **fit_params):\r\n...\r\n```\r\nwhich cannot be called with three positional arguments as above.\r\n\r\nSo I guess line 1421 in `sklearn/ensemble/gradient_boosting.py` should read\r\n`self.init_.fit(X, y, sample_weight=sample_weight)` instead and the issue is solved. Right?\r\n\r\n#### Versions\r\n```python\r\n>>> sklearn.show_versions()\r\n\r\nSystem:\r\n    python: 3.6.2 |Continuum Analytics, Inc.| (default, Jul 20 2017, 13:14:59)  [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)]\r\nexecutable: /Users/Thomas/.local/miniconda3/envs/test/bin/python\r\n   machine: Darwin-18.2.0-x86_64-i386-64bit\r\n\r\nBLAS:\r\n    macros: SCIPY_MKL_H=None, HAVE_CBLAS=None\r\n  lib_dirs: /Users/Thomas/.local/miniconda3/envs/test/lib\r\ncblas_libs: mkl_rt, pthread\r\n\r\nPython deps:\r\n       pip: 10.0.1\r\nsetuptools: 39.2.0\r\n   sklearn: 0.20.2\r\n     numpy: 1.16.1\r\n     scipy: 1.2.0\r\n    Cython: None\r\n    pandas: 0.24.2\r\n```\n",
  "hints_text": "",
  "created_at": "2019-03-18T22:15:59Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/ensemble/tests/test_gradient_boosting.py::test_gradient_boosting_with_init_pipeline\"]",
  "PASS_TO_PASS": "[\"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_toy[deviance-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_toy[deviance-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_toy[deviance-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_toy[exponential-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_toy[exponential-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_toy[exponential-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classifier_parameter_checks\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_regressor_parameter_checks\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_loss_function\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_synthetic[deviance-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_synthetic[deviance-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_synthetic[deviance-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_synthetic[exponential-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_synthetic[exponential-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_classification_synthetic[exponential-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[1.0-ls-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[1.0-ls-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[1.0-ls-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[1.0-lad-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[1.0-lad-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[1.0-lad-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[1.0-huber-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[1.0-huber-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[1.0-huber-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[0.5-ls-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[0.5-ls-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[0.5-ls-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[0.5-lad-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[0.5-lad-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[0.5-lad-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[0.5-huber-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[0.5-huber-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_boston[0.5-huber-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[None-1.0-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[None-1.0-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[None-1.0-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[None-0.5-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[None-0.5-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[None-0.5-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[1-1.0-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[1-1.0-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[1-1.0-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[1-0.5-auto]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[1-0.5-True]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_iris[1-0.5-False]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_regression_synthetic\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_feature_importances\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_probability_log\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_check_inputs\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_check_inputs_predict\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_check_inputs_predict_stages\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_check_max_features\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_max_feature_regression\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_feature_importance_regression\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_max_feature_auto\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_staged_predict\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_staged_predict_proba\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_staged_functions_defensive[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_staged_functions_defensive[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_serialization\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_degenerate_targets\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_quantile_loss\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_symbol_labels\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_float_class_labels\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_shape_y\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_mem_layout\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_oob_improvement\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_oob_improvement_raise\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_oob_multilcass_iris\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_verbose_output\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_more_verbose_output\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_n_estimators[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_n_estimators[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_max_depth[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_max_depth[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_clear[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_clear[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_zero_n_estimators[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_zero_n_estimators[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_smaller_n_estimators[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_smaller_n_estimators[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_equal_n_estimators[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_equal_n_estimators[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_oob_switch[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_oob_switch[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_oob[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_oob[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_sparse[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_sparse[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_fortran[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_fortran[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_monitor_early_stopping[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_monitor_early_stopping[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_complete_classification\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_complete_regression\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_zero_estimator_reg\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_zero_estimator_clf\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_max_leaf_nodes_max_depth[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_max_leaf_nodes_max_depth[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_min_impurity_split[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_min_impurity_split[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_min_impurity_decrease[GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_min_impurity_decrease[GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_warm_start_wo_nestimators_change\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_probability_exponential\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_non_uniform_weights_toy_edge_case_reg\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_non_uniform_weights_toy_edge_case_clf\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_sparse_input[csr_matrix-GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_sparse_input[csr_matrix-GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_sparse_input[csc_matrix-GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_sparse_input[csc_matrix-GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_sparse_input[coo_matrix-GradientBoostingClassifier]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_sparse_input[coo_matrix-GradientBoostingRegressor]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_gradient_boosting_early_stopping\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_gradient_boosting_validation_fraction\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_gradient_boosting_with_init[binary\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_gradient_boosting_with_init[multiclass\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_gradient_boosting_with_init[regression]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_gradient_boosting_init_wrong_methods[estimator0-predict_proba]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_gradient_boosting_init_wrong_methods[estimator1-predict]\", \"sklearn/ensemble/tests/test_gradient_boosting.py::test_early_stopping_n_classes\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.994946",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}