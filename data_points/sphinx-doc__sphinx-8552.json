{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8552",
  "base_commit": "57ed10c68057c96491acbd3e62254ccfaf9e3861",
  "patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -179,6 +179,8 @@ def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None\n                 'notes': self._parse_notes_section,\n                 'other parameters': self._parse_other_parameters_section,\n                 'parameters': self._parse_parameters_section,\n+                'receive': self._parse_receives_section,\n+                'receives': self._parse_receives_section,\n                 'return': self._parse_returns_section,\n                 'returns': self._parse_returns_section,\n                 'raise': self._parse_raises_section,\n@@ -714,6 +716,15 @@ def _parse_raises_section(self, section: str) -> List[str]:\n             lines.append('')\n         return lines\n \n+    def _parse_receives_section(self, section: str) -> List[str]:\n+        if self._config.napoleon_use_param:\n+            # Allow to declare multiple parameters at once (ex: x, y: int)\n+            fields = self._consume_fields(multiple=True)\n+            return self._format_docutils_params(fields)\n+        else:\n+            fields = self._consume_fields()\n+            return self._format_fields(_('Receives'), fields)\n+\n     def _parse_references_section(self, section: str) -> List[str]:\n         use_admonition = self._config.napoleon_use_admonition_for_references\n         return self._parse_generic_section(_('References'), use_admonition)\n",
  "test_patch": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -303,6 +303,34 @@ class GoogleDocstringTest(BaseDocstringTest):\n         \"\"\"\n         Single line summary\n \n+        Receive:\n+          arg1 (list(int)): Description\n+          arg2 (list[int]): Description\n+        \"\"\",\n+        \"\"\"\n+        Single line summary\n+\n+        :Receives: * **arg1** (*list(int)*) -- Description\n+                   * **arg2** (*list[int]*) -- Description\n+        \"\"\"\n+    ), (\n+        \"\"\"\n+        Single line summary\n+\n+        Receives:\n+          arg1 (list(int)): Description\n+          arg2 (list[int]): Description\n+        \"\"\",\n+        \"\"\"\n+        Single line summary\n+\n+        :Receives: * **arg1** (*list(int)*) -- Description\n+                   * **arg2** (*list[int]*) -- Description\n+        \"\"\"\n+    ), (\n+        \"\"\"\n+        Single line summary\n+\n         Yield:\n           str:Extended\n           description of yielded value\n@@ -1263,6 +1291,48 @@ class NumpyDocstringTest(BaseDocstringTest):\n         \"\"\"\n         Single line summary\n \n+        Receive\n+        -------\n+        arg1:str\n+            Extended\n+            description of arg1\n+        arg2 : int\n+            Extended\n+            description of arg2\n+        \"\"\",\n+        \"\"\"\n+        Single line summary\n+\n+        :Receives: * **arg1** (:class:`str`) -- Extended\n+                     description of arg1\n+                   * **arg2** (:class:`int`) -- Extended\n+                     description of arg2\n+        \"\"\"\n+    ), (\n+        \"\"\"\n+        Single line summary\n+\n+        Receives\n+        --------\n+        arg1:str\n+            Extended\n+            description of arg1\n+        arg2 : int\n+            Extended\n+            description of arg2\n+        \"\"\",\n+        \"\"\"\n+        Single line summary\n+\n+        :Receives: * **arg1** (:class:`str`) -- Extended\n+                     description of arg1\n+                   * **arg2** (:class:`int`) -- Extended\n+                     description of arg2\n+        \"\"\"\n+    ), (\n+        \"\"\"\n+        Single line summary\n+\n         Yield\n         -----\n         str\n",
  "problem_statement": "Napoleon: Support NumpyDoc \"Receives\" docstring section\nSupport the \"Receives\" section of NumpyDoc guidelines; it is related to Yields, which is already supported.\r\n\r\n\r\nhttps://numpydoc.readthedocs.io/en/latest/format.html#sections\r\n\r\n   Receives\r\n\r\nExplanation of parameters passed to a generatorâ€™s .send() method, formatted as for Parameters, above. Since, like for Yields and Returns, a single object is always passed to the method, this may describe either the single parameter, or positional arguments passed as a tuple. If a docstring includes Receives it must also include Yields.\r\n\r\n\r\n\n",
  "hints_text": "Reasonable. It should be supported.",
  "created_at": "2020-12-19T11:29:43Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_docstrings\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::NamedtupleSubclassTest::test_attributes_docstring\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_no_type\", \"tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_ref_in_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_attributes_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_code_block_in_returns_section\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_custom_generic_sections\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_keywords_with_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_kwargs_in_arguments\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_noindex\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_pep526_annotations\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_section_header_formatting\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_convert_numpy_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_multiple_parameters\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameter_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_without_class_reference\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens_invalid\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_return_types\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_section_header_underline_length\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_see_also_refs\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_token_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_tokenize_type_spec\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_type_preprocessor\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute_strip_signature_backslash\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_yield_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*args,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_pep526_annotations\"]",
  "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.056454",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}