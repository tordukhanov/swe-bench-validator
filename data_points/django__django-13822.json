{
  "repo": "django/django",
  "instance_id": "django__django-13822",
  "base_commit": "74fd233b1433da8c68de636172ee1c9c6d1c08c9",
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1614,7 +1614,11 @@ def contribute_to_class(self, cls, name, **kwargs):\n             # related_name with one generated from the m2m field name. Django\n             # still uses backwards relations internally and we need to avoid\n             # clashes between multiple m2m fields with related_name == '+'.\n-            self.remote_field.related_name = \"_%s_%s_+\" % (cls.__name__.lower(), name)\n+            self.remote_field.related_name = '_%s_%s_%s_+' % (\n+                cls._meta.app_label,\n+                cls.__name__.lower(),\n+                name,\n+            )\n \n         super().contribute_to_class(cls, name, **kwargs)\n \n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -3,7 +3,7 @@\n from django.core.checks import Error, Warning as DjangoWarning\n from django.db import connection, models\n from django.test.testcases import SimpleTestCase\n-from django.test.utils import isolate_apps, override_settings\n+from django.test.utils import isolate_apps, modify_settings, override_settings\n \n \n @isolate_apps('invalid_models_tests')\n@@ -1025,6 +1025,32 @@ class Model(models.Model):\n             ),\n         ])\n \n+    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n+    @isolate_apps('basic', 'invalid_models_tests')\n+    def test_no_clash_across_apps_without_accessor(self):\n+        class Target(models.Model):\n+            class Meta:\n+                app_label = 'invalid_models_tests'\n+\n+        class Model(models.Model):\n+            m2m = models.ManyToManyField(Target, related_name='+')\n+\n+            class Meta:\n+                app_label = 'basic'\n+\n+        def _test():\n+            # Define model with the same name.\n+            class Model(models.Model):\n+                m2m = models.ManyToManyField(Target, related_name='+')\n+\n+                class Meta:\n+                    app_label = 'invalid_models_tests'\n+\n+            self.assertEqual(Model.check(), [])\n+\n+        _test()\n+        self.assertEqual(Model.check(), [])\n+\n \n @isolate_apps('invalid_models_tests')\n class ExplicitRelatedNameClashTests(SimpleTestCase):\ndiff --git a/tests/model_meta/results.py b/tests/model_meta/results.py\n--- a/tests/model_meta/results.py\n+++ b/tests/model_meta/results.py\n@@ -321,7 +321,7 @@\n     'get_all_related_objects_with_model_hidden_local': {\n         Person: (\n             ('+', None),\n-            ('_relating_people_hidden_+', None),\n+            ('_model_meta_relating_people_hidden_+', None),\n             ('Person_following_inherited+', None),\n             ('Person_following_inherited+', None),\n             ('Person_friends_inherited+', None),\n@@ -339,7 +339,7 @@\n         ),\n         ProxyPerson: (\n             ('+', Person),\n-            ('_relating_people_hidden_+', Person),\n+            ('_model_meta_relating_people_hidden_+', Person),\n             ('Person_following_inherited+', Person),\n             ('Person_following_inherited+', Person),\n             ('Person_friends_inherited+', Person),\n@@ -357,7 +357,7 @@\n         ),\n         BasePerson: (\n             ('+', None),\n-            ('_relating_basepeople_hidden_+', None),\n+            ('_model_meta_relating_basepeople_hidden_+', None),\n             ('BasePerson_following_abstract+', None),\n             ('BasePerson_following_abstract+', None),\n             ('BasePerson_following_base+', None),\n@@ -408,8 +408,8 @@\n         Person: (\n             ('+', BasePerson),\n             ('+', None),\n-            ('_relating_basepeople_hidden_+', BasePerson),\n-            ('_relating_people_hidden_+', None),\n+            ('_model_meta_relating_basepeople_hidden_+', BasePerson),\n+            ('_model_meta_relating_people_hidden_+', None),\n             ('BasePerson_following_abstract+', BasePerson),\n             ('BasePerson_following_abstract+', BasePerson),\n             ('BasePerson_following_base+', BasePerson),\n@@ -446,8 +446,8 @@\n         ProxyPerson: (\n             ('+', BasePerson),\n             ('+', Person),\n-            ('_relating_basepeople_hidden_+', BasePerson),\n-            ('_relating_people_hidden_+', Person),\n+            ('_model_meta_relating_basepeople_hidden_+', BasePerson),\n+            ('_model_meta_relating_people_hidden_+', Person),\n             ('BasePerson_following_abstract+', BasePerson),\n             ('BasePerson_following_abstract+', BasePerson),\n             ('BasePerson_following_base+', BasePerson),\n@@ -483,7 +483,7 @@\n         ),\n         BasePerson: (\n             ('+', None),\n-            ('_relating_basepeople_hidden_+', None),\n+            ('_model_meta_relating_basepeople_hidden_+', None),\n             ('BasePerson_following_abstract+', None),\n             ('BasePerson_following_abstract+', None),\n             ('BasePerson_following_base+', None),\n@@ -822,7 +822,7 @@\n             ('friends_base_rel_+', None),\n             ('followers_base', None),\n             ('relating_basepeople', None),\n-            ('_relating_basepeople_hidden_+', None),\n+            ('_model_meta_relating_basepeople_hidden_+', None),\n         ),\n         Person: (\n             ('friends_abstract_rel_+', BasePerson),\n@@ -830,7 +830,7 @@\n             ('friends_base_rel_+', BasePerson),\n             ('followers_base', BasePerson),\n             ('relating_basepeople', BasePerson),\n-            ('_relating_basepeople_hidden_+', BasePerson),\n+            ('_model_meta_relating_basepeople_hidden_+', BasePerson),\n             ('friends_inherited_rel_+', None),\n             ('followers_concrete', None),\n             ('relating_people', None),\n@@ -849,7 +849,7 @@\n             'friends_base_rel_+',\n             'followers_base',\n             'relating_basepeople',\n-            '_relating_basepeople_hidden_+',\n+            '_model_meta_relating_basepeople_hidden_+',\n         ],\n         Person: [\n             'friends_inherited_rel_+',\ndiff --git a/tests/model_meta/tests.py b/tests/model_meta/tests.py\n--- a/tests/model_meta/tests.py\n+++ b/tests/model_meta/tests.py\n@@ -257,7 +257,7 @@ def test_relations_related_objects(self):\n         self.assertEqual(\n             sorted(field.related_query_name() for field in BasePerson._meta._relation_tree),\n             sorted([\n-                '+', '_relating_basepeople_hidden_+', 'BasePerson_following_abstract+',\n+                '+', '_model_meta_relating_basepeople_hidden_+', 'BasePerson_following_abstract+',\n                 'BasePerson_following_abstract+', 'BasePerson_following_base+', 'BasePerson_following_base+',\n                 'BasePerson_friends_abstract+', 'BasePerson_friends_abstract+', 'BasePerson_friends_base+',\n                 'BasePerson_friends_base+', 'BasePerson_m2m_abstract+', 'BasePerson_m2m_base+', 'Relating_basepeople+',\n",
  "problem_statement": "fields.E305 is raised on ManyToManyFields with related_name='+' in models in different apps but with the same name.\nDescription\n\t \n\t\t(last modified by Aleksey Ruban)\n\t \nDjango raises an error during creation a db migration if two models with the same name refer to the same model in m2m field. related_name='+' or 'foo+' don't impact anything.\nIn some my project there are 50 apps and almost each one has a model with the same name. So I have to come up with a related name and write it in for each m2m field.\nJust try to make a migration for my test project\n​https://github.com/rafick1983/django_related_name_bug\n",
  "hints_text": "Thanks for the report. It looks that app_label is missing in ​ManyToManyField.contribute_to_class(): self.remote_field.related_name = \"_%s_%s_%s_+\" % (cls._meta.app_label, cls.__name__.lower(), name)",
  "created_at": "2020-12-30T02:26:00Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_relations_related_objects (model_meta.tests.RelationTreeTests)\", \"test_related_objects_include_hidden (model_meta.tests.RelatedObjectsTests)\", \"test_related_objects_include_hidden_local_only (model_meta.tests.RelatedObjectsTests)\", \"test_no_clash_across_apps_without_accessor (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\"]",
  "PASS_TO_PASS": "[\"test_abstract_model_not_instantiated (model_meta.tests.AbstractModelTests)\", \"test_pk (model_meta.tests.ReturningFieldsTests)\", \"test_get_data_field (model_meta.tests.GetFieldByNameTests)\", \"test_get_fields_only_searches_forward_on_apps_not_ready (model_meta.tests.GetFieldByNameTests)\", \"test_get_generic_relation (model_meta.tests.GetFieldByNameTests)\", \"test_get_m2m_field (model_meta.tests.GetFieldByNameTests)\", \"test_get_related_m2m (model_meta.tests.GetFieldByNameTests)\", \"test_get_related_object (model_meta.tests.GetFieldByNameTests)\", \"test_person (model_meta.tests.PropertyNamesTests)\", \"test_label (model_meta.tests.LabelTests)\", \"test_label_lower (model_meta.tests.LabelTests)\", \"test_get_parent_list (model_meta.tests.ParentListTests)\", \"test_get_fields_is_immutable (model_meta.tests.GetFieldsTests)\", \"test_fields (model_meta.tests.DataTests)\", \"test_local_concrete_fields (model_meta.tests.DataTests)\", \"test_local_fields (model_meta.tests.DataTests)\", \"test_many_to_many (model_meta.tests.M2MTests)\", \"test_many_to_many_with_model (model_meta.tests.M2MTests)\", \"test_private_fields (model_meta.tests.PrivateFieldsTests)\", \"test_clear_cache_clears_relation_tree (model_meta.tests.RelationTreeTests)\", \"test_first_relation_tree_access_populates_all (model_meta.tests.RelationTreeTests)\", \"test_related_objects (model_meta.tests.RelatedObjectsTests)\", \"test_related_objects_local (model_meta.tests.RelatedObjectsTests)\", \"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_clash_parent_link (invalid_models_tests.test_relative_fields.ComplexClashTests)\", \"test_complex_clash (invalid_models_tests.test_relative_fields.ComplexClashTests)\", \"test_explicit_field_names (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_intersection_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_invalid_field (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_invalid_order (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_m2m_field_argument_validation (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_superset_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_valid_model (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"Ref #22047.\", \"test_no_clash_for_hidden_related_name (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_ambiguous_relationship_model_from (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_ambiguous_relationship_model_to (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_isolate_apps_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_non_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_non_unique_field_under_explicit_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_partially_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_unique_field_with_meta_constraint (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_non_unique_fields (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_partially_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_unique_field_with_meta_constraint (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_invalid_related_query_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_m2m_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_through_isolate_apps_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_to_isolate_apps_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_limit_choices_auto_created_no_warning (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_useless_options (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_missing_relationship_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_missing_relationship_model_on_model_check (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_not_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_nullable_primary_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_default_without_default_value (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_null_on_non_nullable_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_referencing_to_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_invalid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_valid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_missing_foreign_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_with_foreign_key_to_wrong_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_to_fields_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_to_fields_not_checked_if_related_model_doesnt_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_too_many_foreign_keys_in_self_referential_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_unique_m2m (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_valid_foreign_key_without_accessor (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.672076",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}