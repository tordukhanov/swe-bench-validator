{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18137",
  "base_commit": "0bffa281e62b4d29fbe3cd22faa4d612a4b1ca76",
  "patch": "diff --git a/sympy/sets/fancysets.py b/sympy/sets/fancysets.py\n--- a/sympy/sets/fancysets.py\n+++ b/sympy/sets/fancysets.py\n@@ -683,11 +683,17 @@ def _contains(self, other):\n             ref = self.start\n         elif self.stop.is_finite:\n             ref = self.stop\n-        else:\n-            return other.is_Integer\n-        if (ref - other) % self.step:  # off sequence\n+        else:  # both infinite; step is +/- 1 (enforced by __new__)\n+            return S.true\n+        if self.size == 1:\n+            return Eq(other, self[0])\n+        res = (ref - other) % self.step\n+        if res == S.Zero:\n+            return And(other >= self.inf, other <= self.sup)\n+        elif res.is_Integer:  # off sequence\n             return S.false\n-        return _sympify(other >= self.inf and other <= self.sup)\n+        else:  # symbolic/unsimplified residue modulo step\n+            return None\n \n     def __iter__(self):\n         if self.has(Symbol):\n@@ -899,10 +905,13 @@ def _boundary(self):\n     def as_relational(self, x):\n         \"\"\"Rewrite a Range in terms of equalities and logic operators. \"\"\"\n         from sympy.functions.elementary.integers import floor\n-        return And(\n-            Eq(x, floor(x)),\n-            x >= self.inf if self.inf in self else x > self.inf,\n-            x <= self.sup if self.sup in self else x < self.sup)\n+        if self.size == 1:\n+            return Eq(x, self[0])\n+        else:\n+            return And(\n+                Eq(x, floor(x)),\n+                x >= self.inf if self.inf in self else x > self.inf,\n+                x <= self.sup if self.sup in self else x < self.sup)\n \n \n # Using range from compatibility above (xrange on Py2)\ndiff --git a/sympy/sets/handlers/issubset.py b/sympy/sets/handlers/issubset.py\n--- a/sympy/sets/handlers/issubset.py\n+++ b/sympy/sets/handlers/issubset.py\n@@ -1,4 +1,4 @@\n-from sympy import S\n+from sympy import S, Symbol\n from sympy.core.logic import fuzzy_and, fuzzy_bool, fuzzy_not, fuzzy_or\n from sympy.core.relational import Eq\n from sympy.sets.sets import FiniteSet, Interval, Set, Union\n@@ -66,6 +66,40 @@ def is_subset_sets(a_range, b_interval): # noqa:F811\n             cond_right = a_range.sup <= b_interval.right\n         return fuzzy_and([cond_left, cond_right])\n \n+@dispatch(Range, FiniteSet)\n+def is_subset_sets(a_range, b_finiteset): # noqa:F811\n+    try:\n+        a_size = a_range.size\n+    except ValueError:\n+        # symbolic Range of unknown size\n+        return None\n+    if a_size > len(b_finiteset):\n+        return False\n+    elif any(arg.has(Symbol) for arg in a_range.args):\n+        return fuzzy_and(b_finiteset.contains(x) for x in a_range)\n+    else:\n+        # Checking A \\ B == EmptySet is more efficient than repeated naive\n+        # membership checks on an arbitrary FiniteSet.\n+        a_set = set(a_range)\n+        b_remaining = len(b_finiteset)\n+        # Symbolic expressions and numbers of unknown type (integer or not) are\n+        # all counted as \"candidates\", i.e. *potentially* matching some a in\n+        # a_range.\n+        cnt_candidate = 0\n+        for b in b_finiteset:\n+            if b.is_Integer:\n+                a_set.discard(b)\n+            elif fuzzy_not(b.is_integer):\n+                pass\n+            else:\n+                cnt_candidate += 1\n+            b_remaining -= 1\n+            if len(a_set) > b_remaining + cnt_candidate:\n+                return False\n+            if len(a_set) == 0:\n+                return True\n+        return None\n+\n @dispatch(Interval, Range)\n def is_subset_sets(a_interval, b_range): # noqa:F811\n     if a_interval.measure.is_extended_nonzero:\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1761,8 +1761,10 @@ def __new__(cls, *args, **kwargs):\n         else:\n             args = list(map(sympify, args))\n \n-        args = list(ordered(set(args), Set._infimum_key))\n+        _args_set = set(args)\n+        args = list(ordered(_args_set, Set._infimum_key))\n         obj = Basic.__new__(cls, *args)\n+        obj._args_set = _args_set\n         return obj\n \n     def _eval_Eq(self, other):\n@@ -1830,8 +1832,9 @@ def _contains(self, other):\n         \"\"\"\n         Tests whether an element, other, is in the set.\n \n-        Relies on Python's set class. This tests for object equality\n-        All inputs are sympified\n+        The actual test is for mathematical equality (as opposed to\n+        syntactical equality). In the worst case all elements of the\n+        set must be checked.\n \n         Examples\n         ========\n@@ -1843,9 +1846,13 @@ def _contains(self, other):\n         False\n \n         \"\"\"\n-        # evaluate=True is needed to override evaluate=False context;\n-        # we need Eq to do the evaluation\n-        return fuzzy_or(fuzzy_bool(Eq(e, other, evaluate=True)) for e in self.args)\n+        if other in self._args_set:\n+            return True\n+        else:\n+            # evaluate=True is needed to override evaluate=False context;\n+            # we need Eq to do the evaluation\n+            return fuzzy_or(fuzzy_bool(Eq(e, other, evaluate=True))\n+                for e in self.args)\n \n     def _eval_is_subset(self, other):\n         return fuzzy_and(other._contains(e) for e in self.args)\n",
  "test_patch": "diff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py\n--- a/sympy/sets/tests/test_fancysets.py\n+++ b/sympy/sets/tests/test_fancysets.py\n@@ -333,11 +333,14 @@ def test_Range_set():\n     assert Range(1, 4).as_relational(x) == (x >= 1) & (x <= 3) & Eq(x, floor(x))\n     assert Range(oo, 1, -2).as_relational(x) == (x >= 3) & (x < oo) & Eq(x, floor(x))\n \n+\n+def test_Range_symbolic():\n     # symbolic Range\n     sr = Range(x, y, t)\n     i = Symbol('i', integer=True)\n     ip = Symbol('i', integer=True, positive=True)\n     ir = Range(i, i + 20, 2)\n+    inf = symbols('inf', infinite=True)\n     # args\n     assert sr.args == (x, y, t)\n     assert ir.args == (i, i + 20, 2)\n@@ -381,9 +384,27 @@ def test_Range_set():\n     assert Range(ip).inf == 0\n     assert Range(ip).sup == ip - 1\n     raises(ValueError, lambda: Range(i).inf)\n+    # as_relational\n     raises(ValueError, lambda: sr.as_relational(x))\n     assert ir.as_relational(x) == (\n         x >= i) & Eq(x, floor(x)) & (x <= i + 18)\n+    assert Range(i, i + 1).as_relational(x) == Eq(x, i)\n+    # contains() for symbolic values (issue #18146)\n+    e = Symbol('e', integer=True, even=True)\n+    o = Symbol('o', integer=True, odd=True)\n+    assert Range(5).contains(i) == And(i >= 0, i <= 4)\n+    assert Range(1).contains(i) == Eq(i, 0)\n+    assert Range(-oo, 5, 1).contains(i) == (i <= 4)\n+    assert Range(-oo, oo).contains(i) == True\n+    assert Range(0, 8, 2).contains(i) == Contains(i, Range(0, 8, 2))\n+    assert Range(0, 8, 2).contains(e) == And(e >= 0, e <= 6)\n+    assert Range(0, 8, 2).contains(2*i) == And(2*i >= 0, 2*i <= 6)\n+    assert Range(0, 8, 2).contains(o) == False\n+    assert Range(1, 9, 2).contains(e) == False\n+    assert Range(1, 9, 2).contains(o) == And(o >= 1, o <= 7)\n+    assert Range(8, 0, -2).contains(o) == False\n+    assert Range(9, 1, -2).contains(o) == And(o >= 3, o <= 9)\n+    assert Range(-oo, 8, 2).contains(i) == Contains(i, Range(-oo, 8, 2))\n \n \n def test_range_range_intersection():\ndiff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -613,6 +613,7 @@ def test_measure():\n def test_is_subset():\n     assert Interval(0, 1).is_subset(Interval(0, 2)) is True\n     assert Interval(0, 3).is_subset(Interval(0, 2)) is False\n+    assert Interval(0, 1).is_subset(FiniteSet(0, 1)) is False\n \n     assert FiniteSet(1, 2).is_subset(FiniteSet(1, 2, 3, 4))\n     assert FiniteSet(4, 5).is_subset(FiniteSet(1, 2, 3, 4)) is False\n@@ -646,6 +647,16 @@ def test_is_subset():\n     assert Interval(0, 1).is_subset(Interval(0, 1, left_open=True)) is False\n     assert Interval(-2, 3).is_subset(Union(Interval(-oo, -2), Interval(3, oo))) is False\n \n+    n = Symbol('n', integer=True)\n+    assert Range(-3, 4, 1).is_subset(FiniteSet(-10, 10)) is False\n+    assert Range(S(10)**100).is_subset(FiniteSet(0, 1, 2)) is False\n+    assert Range(6, 0, -2).is_subset(FiniteSet(2, 4, 6)) is True\n+    assert Range(1, oo).is_subset(FiniteSet(1, 2)) is False\n+    assert Range(-oo, 1).is_subset(FiniteSet(1)) is False\n+    assert Range(3).is_subset(FiniteSet(0, 1, n)) is None\n+    assert Range(n, n + 2).is_subset(FiniteSet(n, n + 1)) is True\n+    assert Range(5).is_subset(Interval(0, 4, right_open=True)) is False\n+\n \n def test_is_proper_subset():\n     assert Interval(0, 1).is_proper_subset(Interval(0, 2)) is True\n",
  "problem_statement": "Range(1).intersect(FiniteSet(n)) raises TypeError: cannot determine truth value of Relational\n```\r\nn = Symbol('n', integer=True)\r\nRange(1).intersect(FiniteSet(n))\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-66-74dcb9ca2d9f> in <module>\r\n----> 1 Range(1).intersect(FiniteSet(n))\r\n\r\n/opt/tljh/user/lib/python3.6/site-packages/sympy/sets/sets.py in intersect(self, other)\r\n    138 \r\n    139         \"\"\"\r\n--> 140         return Intersection(self, other)\r\n    141 \r\n    142     def intersection(self, other):\r\n\r\n/opt/tljh/user/lib/python3.6/site-packages/sympy/sets/sets.py in __new__(cls, *args, **kwargs)\r\n   1310         if evaluate:\r\n   1311             args = list(cls._new_args_filter(args))\r\n-> 1312             return simplify_intersection(args)\r\n   1313 \r\n   1314         args = list(ordered(args, Set._infimum_key))\r\n\r\n/opt/tljh/user/lib/python3.6/site-packages/sympy/sets/sets.py in simplify_intersection(args)\r\n   2176 \r\n   2177     # Handle Finite sets\r\n-> 2178     rv = Intersection._handle_finite_sets(args)\r\n   2179 \r\n   2180     if rv is not None:\r\n\r\n/opt/tljh/user/lib/python3.6/site-packages/sympy/sets/sets.py in _handle_finite_sets(args)\r\n   1395         definite = set()\r\n   1396         for e in all_elements:\r\n-> 1397             inall = fuzzy_and(s.contains(e) for s in args)\r\n   1398             if inall is True:\r\n   1399                 definite.add(e)\r\n\r\n/opt/tljh/user/lib/python3.6/site-packages/sympy/core/logic.py in fuzzy_and(args)\r\n    137 \r\n    138     rv = True\r\n--> 139     for ai in args:\r\n    140         ai = fuzzy_bool(ai)\r\n    141         if ai is False:\r\n\r\n/opt/tljh/user/lib/python3.6/site-packages/sympy/sets/sets.py in <genexpr>(.0)\r\n   1395         definite = set()\r\n   1396         for e in all_elements:\r\n-> 1397             inall = fuzzy_and(s.contains(e) for s in args)\r\n   1398             if inall is True:\r\n   1399                 definite.add(e)\r\n\r\n/opt/tljh/user/lib/python3.6/site-packages/sympy/sets/sets.py in contains(self, other)\r\n    332         \"\"\"\r\n    333         other = sympify(other, strict=True)\r\n--> 334         c = self._contains(other)\r\n    335         if c is None:\r\n    336             return Contains(other, self, evaluate=False)\r\n\r\n/opt/tljh/user/lib/python3.6/site-packages/sympy/sets/fancysets.py in _contains(self, other)\r\n    668         if (ref - other) % self.step:  # off sequence\r\n    669             return S.false\r\n--> 670         return _sympify(other >= self.inf and other <= self.sup)\r\n    671 \r\n    672     def __iter__(self):\r\n\r\n/opt/tljh/user/lib/python3.6/site-packages/sympy/core/relational.py in __nonzero__(self)\r\n    374 \r\n    375     def __nonzero__(self):\r\n--> 376         raise TypeError(\"cannot determine truth value of Relational\")\r\n    377 \r\n    378     __bool__ = __nonzero__\r\n\r\nTypeError: cannot determine truth value of Relational\r\n```\n",
  "hints_text": "",
  "created_at": "2019-12-26T21:41:22Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_Range_symbolic\", \"test_is_subset\"]",
  "PASS_TO_PASS": "[\"test_naturals\", \"test_naturals0\", \"test_integers\", \"test_ImageSet\", \"test_image_is_ImageSet\", \"test_halfcircle\", \"test_ImageSet_iterator_not_injective\", \"test_inf_Range_len\", \"test_Range_set\", \"test_range_range_intersection\", \"test_range_interval_intersection\", \"test_Integers_eval_imageset\", \"test_Range_eval_imageset\", \"test_fun\", \"test_Reals\", \"test_Complex\", \"test_intersections\", \"test_infinitely_indexed_set_1\", \"test_infinitely_indexed_set_2\", \"test_imageset_intersect_real\", \"test_imageset_intersect_interval\", \"test_infinitely_indexed_set_3\", \"test_ImageSet_simplification\", \"test_ImageSet_contains\", \"test_ComplexRegion_contains\", \"test_ComplexRegion_intersect\", \"test_ComplexRegion_union\", \"test_ComplexRegion_from_real\", \"test_ComplexRegion_measure\", \"test_normalize_theta_set\", \"test_ComplexRegion_FiniteSet\", \"test_union_RealSubSet\", \"test_issue_9980\", \"test_issue_11732\", \"test_issue_11730\", \"test_issue_11938\", \"test_issue_11914\", \"test_issue_9543\", \"test_issue_16871\", \"test_issue_18050\", \"test_Rationals\", \"test_imageset_intersection\", \"test_imageset\", \"test_is_empty\", \"test_is_finiteset\", \"test_deprecated_is_EmptySet\", \"test_interval_arguments\", \"test_interval_symbolic_end_points\", \"test_interval_is_empty\", \"test_union\", \"test_union_iter\", \"test_union_is_empty\", \"test_difference\", \"test_Complement\", \"test_complement\", \"test_intersect1\", \"test_intersection\", \"test_issue_9623\", \"test_is_disjoint\", \"test_ProductSet__len__\", \"test_ProductSet\", \"test_ProductSet_of_single_arg_is_not_arg\", \"test_ProductSet_is_empty\", \"test_interval_subs\", \"test_interval_to_mpi\", \"test_measure\", \"test_is_proper_subset\", \"test_is_superset\", \"test_is_proper_superset\", \"test_contains\", \"test_interval_symbolic\", \"test_union_contains\", \"test_is_number\", \"test_Interval_is_left_unbounded\", \"test_Interval_is_right_unbounded\", \"test_Interval_as_relational\", \"test_Finite_as_relational\", \"test_Union_as_relational\", \"test_Intersection_as_relational\", \"test_Complement_as_relational\", \"test_SymmetricDifference_as_relational\", \"test_EmptySet\", \"test_finite_basic\", \"test_product_basic\", \"test_real\", \"test_supinf\", \"test_universalset\", \"test_Union_of_ProductSets_shares\", \"test_Interval_free_symbols\", \"test_image_interval\", \"test_image_piecewise\", \"test_image_FiniteSet\", \"test_image_Union\", \"test_image_EmptySet\", \"test_issue_5724_7680\", \"test_boundary\", \"test_boundary_Union\", \"test_boundary_ProductSet\", \"test_boundary_ProductSet_line\", \"test_is_open\", \"test_is_closed\", \"test_closure\", \"test_interior\", \"test_issue_7841\", \"test_Eq\", \"test_SymmetricDifference\", \"test_issue_9536\", \"test_issue_9637\", \"test_issue_9808\", \"test_issue_9956\", \"test_issue_Symbol_inter\", \"test_issue_11827\", \"test_issue_10113\", \"test_issue_10248\", \"test_issue_9447\", \"test_issue_10337\", \"test_issue_10326\", \"test_issue_2799\", \"test_issue_9706\", \"test_issue_8257\", \"test_issue_10931\", \"test_issue_11174\", \"test_finite_set_intersection\", \"test_union_intersection_constructor\", \"test_Union_contains\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.120939",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}