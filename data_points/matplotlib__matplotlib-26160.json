{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-26160",
  "base_commit": "9fdf6adf70819c8d34e9f47eeb8470aea35d78c0",
  "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -925,7 +925,7 @@ def axline(self, xy1, xy2=None, *, slope=None, **kwargs):\n             # data limits should not be adjusted.\n             datalim = []\n \n-        line = mlines._AxLine(xy1, xy2, slope, **kwargs)\n+        line = mlines.AxLine(xy1, xy2, slope, **kwargs)\n         # Like add_line, but correctly handling data limits.\n         self._set_artist_props(line)\n         if line.get_clip_path() is None:\ndiff --git a/lib/matplotlib/lines.py b/lib/matplotlib/lines.py\n--- a/lib/matplotlib/lines.py\n+++ b/lib/matplotlib/lines.py\n@@ -1464,13 +1464,24 @@ def is_dashed(self):\n         return self._linestyle in ('--', '-.', ':')\n \n \n-class _AxLine(Line2D):\n+class AxLine(Line2D):\n     \"\"\"\n     A helper class that implements `~.Axes.axline`, by recomputing the artist\n     transform at draw time.\n     \"\"\"\n \n     def __init__(self, xy1, xy2, slope, **kwargs):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        xy1 : (float, float)\n+            The first set of (x, y) coordinates for the line to pass through.\n+        xy2 : (float, float) or None\n+            The second set of (x, y) coordinates for the line to pass through.\n+            Either *xy2* or *slope* has to be given.\n+        slope : float or None\n+            The slope of the line. Either *xy2* or *slope* has to be given.\n+        \"\"\"\n         super().__init__([0, 1], [0, 1], **kwargs)\n \n         if (xy2 is None and slope is None or\n@@ -1527,6 +1538,65 @@ def draw(self, renderer):\n         self._transformed_path = None  # Force regen.\n         super().draw(renderer)\n \n+    def get_xy1(self):\n+        \"\"\"\n+        Return the *xy1* value of the line.\n+        \"\"\"\n+        return self._xy1\n+\n+    def get_xy2(self):\n+        \"\"\"\n+        Return the *xy2* value of the line.\n+        \"\"\"\n+        return self._xy2\n+\n+    def get_slope(self):\n+        \"\"\"\n+        Return the *slope* value of the line.\n+        \"\"\"\n+        return self._slope\n+\n+    def set_xy1(self, x, y):\n+        \"\"\"\n+        Set the *xy1* value of the line.\n+\n+        Parameters\n+        ----------\n+        x, y : float\n+            Points for the line to pass through.\n+        \"\"\"\n+        self._xy1 = x, y\n+\n+    def set_xy2(self, x, y):\n+        \"\"\"\n+        Set the *xy2* value of the line.\n+\n+        Parameters\n+        ----------\n+        x, y : float\n+            Points for the line to pass through.\n+        \"\"\"\n+        if self._slope is None:\n+            self._xy2 = x, y\n+        else:\n+            raise ValueError(\"Cannot set an 'xy2' value while 'slope' is set;\"\n+                             \" they differ but their functionalities overlap\")\n+\n+    def set_slope(self, slope):\n+        \"\"\"\n+        Set the *slope* value of the line.\n+\n+        Parameters\n+        ----------\n+        slope : float\n+            The slope of the line.\n+        \"\"\"\n+        if self._xy2 is None:\n+            self._slope = slope\n+        else:\n+            raise ValueError(\"Cannot set a 'slope' value while 'xy2' is set;\"\n+                             \" they differ but their functionalities overlap\")\n+\n \n class VertexSelector:\n     \"\"\"\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_lines.py b/lib/matplotlib/tests/test_lines.py\n--- a/lib/matplotlib/tests/test_lines.py\n+++ b/lib/matplotlib/tests/test_lines.py\n@@ -409,3 +409,30 @@ def test_markevery_prop_cycle(fig_test, fig_ref):\n     ax = fig_test.add_subplot()\n     for i, _ in enumerate(cases):\n         ax.plot(y - i, 'o-')\n+\n+\n+def test_axline_setters():\n+    fig, ax = plt.subplots()\n+    line1 = ax.axline((.1, .1), slope=0.6)\n+    line2 = ax.axline((.1, .1), (.8, .4))\n+    # Testing xy1, xy2 and slope setters.\n+    # This should not produce an error.\n+    line1.set_xy1(.2, .3)\n+    line1.set_slope(2.4)\n+    line2.set_xy1(.3, .2)\n+    line2.set_xy2(.6, .8)\n+    # Testing xy1, xy2 and slope getters.\n+    # Should return the modified values.\n+    assert line1.get_xy1() == (.2, .3)\n+    assert line1.get_slope() == 2.4\n+    assert line2.get_xy1() == (.3, .2)\n+    assert line2.get_xy2() == (.6, .8)\n+    # Testing setting xy2 and slope together.\n+    # These test should raise a ValueError\n+    with pytest.raises(ValueError,\n+                       match=\"Cannot set an 'xy2' value while 'slope' is set\"):\n+        line1.set_xy2(.2, .3)\n+\n+    with pytest.raises(ValueError,\n+                       match=\"Cannot set a 'slope' value while 'xy2' is set\"):\n+        line2.set_slope(3)\n",
  "problem_statement": "[ENH]: Add setters for _AxLine._xy1, ._xy2, ._slope\n### Problem\n\nCurrently the control points / slope of the artist returned by axline() cannot be (publically) modified after being instantiated.  It would be nice if the relevant properties (xy1, xy2, slope) had setters (following normal Artist design).\r\n\r\nFor simplicity it is probably enough if we don't let one set xy2 if slope is set and vice-versa (i.e. whether axline is specified by 2 points or by point-and-slope is locked in).  Note that while I do have a use case for changing a previously set xy1/xy2, wanting to switch between the two different representations seems rarer to me(?)\r\n\r\nThis would likely also make _AxLine public.\n\n### Proposed solution\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2023-06-21T08:22:38Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_lines.py::test_axline_setters\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_lines.py::test_segment_hits\", \"lib/matplotlib/tests/test_lines.py::test_invisible_Line_rendering\", \"lib/matplotlib/tests/test_lines.py::test_set_line_coll_dash\", \"lib/matplotlib/tests/test_lines.py::test_invalid_line_data\", \"lib/matplotlib/tests/test_lines.py::test_line_dashes[png]\", \"lib/matplotlib/tests/test_lines.py::test_line_dashes[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_line_colors\", \"lib/matplotlib/tests/test_lines.py::test_valid_colors\", \"lib/matplotlib/tests/test_lines.py::test_linestyle_variants\", \"lib/matplotlib/tests/test_lines.py::test_valid_linestyles\", \"lib/matplotlib/tests/test_lines.py::test_drawstyle_variants[png]\", \"lib/matplotlib/tests/test_lines.py::test_no_subslice_with_transform[png]\", \"lib/matplotlib/tests/test_lines.py::test_valid_drawstyles\", \"lib/matplotlib/tests/test_lines.py::test_set_drawstyle\", \"lib/matplotlib/tests/test_lines.py::test_set_line_coll_dash_image[png]\", \"lib/matplotlib/tests/test_lines.py::test_set_line_coll_dash_image[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_marker_fill_styles[png]\", \"lib/matplotlib/tests/test_lines.py::test_markerfacecolor_fillstyle\", \"lib/matplotlib/tests/test_lines.py::test_lw_scaling[png]\", \"lib/matplotlib/tests/test_lines.py::test_lw_scaling[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_is_sorted_and_has_non_nan\", \"lib/matplotlib/tests/test_lines.py::test_step_markers[png]\", \"lib/matplotlib/tests/test_lines.py::test_step_markers[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_markevery[png-figure]\", \"lib/matplotlib/tests/test_lines.py::test_markevery[png-axes]\", \"lib/matplotlib/tests/test_lines.py::test_markevery_figure_line_unsupported_relsize\", \"lib/matplotlib/tests/test_lines.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_lines.py::test_striped_lines[png]\", \"lib/matplotlib/tests/test_lines.py::test_odd_dashes[png]\", \"lib/matplotlib/tests/test_lines.py::test_odd_dashes[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_picking\", \"lib/matplotlib/tests/test_lines.py::test_input_copy[png]\", \"lib/matplotlib/tests/test_lines.py::test_input_copy[pdf]\", \"lib/matplotlib/tests/test_lines.py::test_markevery_prop_cycle[png]\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.828923",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}