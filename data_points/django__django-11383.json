{
  "repo": "django/django",
  "instance_id": "django__django-11383",
  "base_commit": "9d6f981a66bd2c4188c4a3e08e4f36fc9c4882ef",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -684,14 +684,19 @@ def save(self, force_insert=False, force_update=False, using=None,\n                 # database to raise an IntegrityError if applicable. If\n                 # constraints aren't supported by the database, there's the\n                 # unavoidable risk of data corruption.\n-                if obj and obj.pk is None:\n-                    # Remove the object from a related instance cache.\n-                    if not field.remote_field.multiple:\n-                        field.remote_field.delete_cached_value(obj)\n-                    raise ValueError(\n-                        \"save() prohibited to prevent data loss due to \"\n-                        \"unsaved related object '%s'.\" % field.name\n-                    )\n+                if obj:\n+                    if obj.pk is None:\n+                        # Remove the object from a related instance cache.\n+                        if not field.remote_field.multiple:\n+                            field.remote_field.delete_cached_value(obj)\n+                        raise ValueError(\n+                            \"save() prohibited to prevent data loss due to \"\n+                            \"unsaved related object '%s'.\" % field.name\n+                        )\n+                    elif getattr(self, field.attname) is None:\n+                        # Use pk from related object if it has been saved after\n+                        # an assignment.\n+                        setattr(self, field.attname, obj.pk)\n                 # If the relationship's pk/to_field was changed, clear the\n                 # cached relationship.\n                 if obj and getattr(obj, field.target_field.attname) != getattr(self, field.attname):\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1031,6 +1031,10 @@ def save_form_data(self, instance, data):\n             setattr(instance, self.name, data)\n         else:\n             setattr(instance, self.attname, data)\n+            # Remote field object must be cleared otherwise Model.save()\n+            # will reassign attname using the related object pk.\n+            if data is None:\n+                setattr(instance, self.name, data)\n \n     def _check_unique(self, **kwargs):\n         # Override ForeignKey since check isn't applicable here.\n",
  "test_patch": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -70,6 +70,10 @@ class Child(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE)\n \n \n+class ChildNullableParent(models.Model):\n+    parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+\n+\n class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \ndiff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -8,8 +8,8 @@\n from django.utils.translation import gettext_lazy\n \n from .models import (\n-    Article, Category, Child, City, District, First, Parent, Record, Relation,\n-    Reporter, School, Student, Third, ToFieldChild,\n+    Article, Category, Child, ChildNullableParent, City, District, First,\n+    Parent, Record, Relation, Reporter, School, Student, Third, ToFieldChild,\n )\n \n \n@@ -522,6 +522,23 @@ def test_fk_assignment_and_related_object_cache(self):\n         self.assertIsNot(c.parent, p)\n         self.assertEqual(c.parent, p)\n \n+    def test_save_nullable_fk_after_parent(self):\n+        parent = Parent()\n+        child = ChildNullableParent(parent=parent)\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+\n+    def test_save_nullable_fk_after_parent_with_to_field(self):\n+        parent = Parent(name='jeff')\n+        child = ToFieldChild(parent=parent)\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n     def test_fk_to_bigautofield(self):\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n",
  "problem_statement": "Saving parent object after setting on child leads to unexpected data loss\nDescription\n\t \n\t\t(last modified by Erwin Junge)\n\t \nWhen saving a parent object after setting it on a child object and then saving the child object, no error is thrown but the FK relation is saved with a NULL value.\nFailing testcase:\n\t\t# Create parent and child, save parent, save child, parent_id should be set\n\t\tp = Parent()\n\t\tc = Child(parent=p)\n\t\tp.save()\n\t\tc.save()\n\t\tc.refresh_from_db()\n\t\tself.assertIs(c.parent, p)\nPatch available: ​https://github.com/django/django/pull/8434\n",
  "hints_text": "The current PR has merge conflicts that need to be resolved.\nRunning the failed testcase mentioned in the description raises an integrity error. django.db.utils.IntegrityError: NOT NULL constraint failed: many_to_one_child.parent_id. This is working as intended. I believe this can be closed as it was fixed by #29896\nThat makes sense. I went through the ​PR proposed here and I noticed the .pk usage was probably missing to_field usages. I guess we could add a regression test for the nullable foreign key case though e.g. author = Author() book = Book(nullable_author=author) author.save() book.save() book.refresh_from_db() self.assertEqual(book.nullable_author, author) Thoughts on that robinh00d?\nI went through the ​PR proposed here and I noticed the .pk usage was probably missing to_field usages. In the context of this ticket, If there was a case where a foreign key had a custom to_field, current behavior will depend on the DB to raise an exception if the value is not assigned OR assigned to a non-existing reference. Similarly to the usage of .pk, we can potentially add logic to check if the value has been assigned or not. And if it hasn't been assigned, we can raise the save() prohibited to prevent data loss due to... exception message. The advantage of this is that we're raising the exception in code which means no unnecessary DB call is required. In the case where the value is assigned, but to a non-existing reference, I guess we really have no other choice but to let the DB handle it. Whether or not a patch to handle missing to_field is required is beyond me. I agree with adding the regression tests, I will add it in later when I'm free :)\nDisregard my comment above, I just realised I tested everything wrong. class child in many_to_one/models does not have a nullable parent. I've ran the test again and the outcome is as described in the description. I have made updates to the previously proposed PR to rectify the issue. I have submitted the PR: ​PR",
  "created_at": "2019-05-18T03:42:51Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_save_nullable_fk_after_parent (many_to_one.tests.ManyToOneTests)\"]",
  "PASS_TO_PASS": "[\"test_add (many_to_one.tests.ManyToOneTests)\", \"test_add_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_add_then_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_assign (many_to_one.tests.ManyToOneTests)\", \"test_cached_foreign_key_with_to_field_not_cleared_by_save (many_to_one.tests.ManyToOneTests)\", \"test_cached_relation_invalidated_on_save (many_to_one.tests.ManyToOneTests)\", \"test_clear_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_create (many_to_one.tests.ManyToOneTests)\", \"test_create_relation_with_gettext_lazy (many_to_one.tests.ManyToOneTests)\", \"test_deepcopy_and_circular_references (many_to_one.tests.ManyToOneTests)\", \"test_delete (many_to_one.tests.ManyToOneTests)\", \"test_explicit_fk (many_to_one.tests.ManyToOneTests)\", \"test_fk_assignment_and_related_object_cache (many_to_one.tests.ManyToOneTests)\", \"test_fk_instantiation_outside_model (many_to_one.tests.ManyToOneTests)\", \"test_fk_to_bigautofield (many_to_one.tests.ManyToOneTests)\", \"test_get (many_to_one.tests.ManyToOneTests)\", \"test_hasattr_related_object (many_to_one.tests.ManyToOneTests)\", \"test_manager_class_caching (many_to_one.tests.ManyToOneTests)\", \"test_multiple_foreignkeys (many_to_one.tests.ManyToOneTests)\", \"test_related_object (many_to_one.tests.ManyToOneTests)\", \"test_relation_unsaved (many_to_one.tests.ManyToOneTests)\", \"test_remove_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_reverse_assignment_deprecation (many_to_one.tests.ManyToOneTests)\", \"test_reverse_foreign_key_instance_to_field_caching (many_to_one.tests.ManyToOneTests)\", \"test_reverse_selects (many_to_one.tests.ManyToOneTests)\", \"test_save_nullable_fk_after_parent_with_to_field (many_to_one.tests.ManyToOneTests)\", \"test_select_related (many_to_one.tests.ManyToOneTests)\", \"test_selects (many_to_one.tests.ManyToOneTests)\", \"test_set (many_to_one.tests.ManyToOneTests)\", \"test_set_after_prefetch (many_to_one.tests.ManyToOneTests)\", \"test_values_list_exception (many_to_one.tests.ManyToOneTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.570593",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}