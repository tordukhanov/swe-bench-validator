{
  "repo": "django/django",
  "instance_id": "django__django-10390",
  "base_commit": "4c086d7da4c5cf23935a5340dbb9a8d6835cf7cc",
  "patch": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -170,8 +170,9 @@ class TruncBase(TimezoneMixin, Transform):\n     kind = None\n     tzinfo = None\n \n-    def __init__(self, expression, output_field=None, tzinfo=None, **extra):\n+    def __init__(self, expression, output_field=None, tzinfo=None, is_dst=None, **extra):\n         self.tzinfo = tzinfo\n+        self.is_dst = is_dst\n         super().__init__(expression, output_field=output_field, **extra)\n \n     def as_sql(self, compiler, connection):\n@@ -222,7 +223,7 @@ def convert_value(self, value, expression, connection):\n                 pass\n             elif value is not None:\n                 value = value.replace(tzinfo=None)\n-                value = timezone.make_aware(value, self.tzinfo)\n+                value = timezone.make_aware(value, self.tzinfo, is_dst=self.is_dst)\n             elif not connection.features.has_zoneinfo_database:\n                 raise ValueError(\n                     'Database returned an invalid datetime value. Are time '\n@@ -240,9 +241,12 @@ def convert_value(self, value, expression, connection):\n \n class Trunc(TruncBase):\n \n-    def __init__(self, expression, kind, output_field=None, tzinfo=None, **extra):\n+    def __init__(self, expression, kind, output_field=None, tzinfo=None, is_dst=None, **extra):\n         self.kind = kind\n-        super().__init__(expression, output_field=output_field, tzinfo=tzinfo, **extra)\n+        super().__init__(\n+            expression, output_field=output_field, tzinfo=tzinfo,\n+            is_dst=is_dst, **extra\n+        )\n \n \n class TruncYear(TruncBase):\n",
  "test_patch": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1044,6 +1044,30 @@ def test_trunc_timezone_applied_before_truncation(self):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n+    def test_trunc_ambiguous_and_invalid_times(self):\n+        sao = pytz.timezone('America/Sao_Paulo')\n+        utc = pytz.timezone('UTC')\n+        start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n+        end_datetime = utc.localize(datetime(2016, 2, 21, 1))\n+        self.create_model(start_datetime, end_datetime)\n+        with timezone.override(sao):\n+            with self.assertRaisesMessage(pytz.NonExistentTimeError, '2016-10-16 00:00:00'):\n+                model = DTModel.objects.annotate(truncated_start=TruncDay('start_datetime')).get()\n+            with self.assertRaisesMessage(pytz.AmbiguousTimeError, '2016-02-20 23:00:00'):\n+                model = DTModel.objects.annotate(truncated_end=TruncHour('end_datetime')).get()\n+            model = DTModel.objects.annotate(\n+                truncated_start=TruncDay('start_datetime', is_dst=False),\n+                truncated_end=TruncHour('end_datetime', is_dst=False),\n+            ).get()\n+            self.assertEqual(model.truncated_start.dst(), timedelta(0))\n+            self.assertEqual(model.truncated_end.dst(), timedelta(0))\n+            model = DTModel.objects.annotate(\n+                truncated_start=TruncDay('start_datetime', is_dst=True),\n+                truncated_end=TruncHour('end_datetime', is_dst=True),\n+            ).get()\n+            self.assertEqual(model.truncated_start.dst(), timedelta(0, 3600))\n+            self.assertEqual(model.truncated_end.dst(), timedelta(0, 3600))\n+\n     def test_trunc_func_with_timezone(self):\n         \"\"\"\n         If the truncated datetime transitions to a different offset (daylight\n",
  "problem_statement": "Trunc() should allow passing is_dst resolution to avoid NonExistentTimeError/AmbiguousTimeError\nDescription\n\t \n\t\t(last modified by Alexander Holmbäck)\n\t \nWhen Trunc() truncates to a nonexisting or ambiguous datetime, the exception raised by pytz remains unhandled. The expected behavior would, IMO, be to not check the validity of truncated dates.\nThis test for example:\nimport datetime\nimport pytz\nfrom django.db.models.functions import Trunc\nfrom django.test import TestCase\nfrom django.utils import timezone\nfrom .models import Log\nclass TestTruncateToInvalidTime(TestCase):\n\tdef test_truncate_to_dst_ends_stockholm(self):\n\t\ttzinfo = pytz.timezone('Europe/Stockholm')\n\t\ttimestamp = datetime.datetime(2018, 10, 28, 2, tzinfo=tzinfo)\n\t\tLog.objects.create(timestamp=timestamp)\n\t\tlogs = Log.objects.annotate(day=Trunc('timestamp', 'hour')).all()\n\t\ttimezone.activate(tzinfo)\n\t\tself.assertEqual(logs[0].day.day, 28)\nResults in the following error:\n======================================================================\nERROR: test_truncate_to_dst_ends_stockholm (trunc.tests.TestTruncateInvalidTime)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/home/alex/tickets/trunc/tests.py\", line 47, in test_truncate_to_dst_ends_stockholm\n\tself.assertEqual(logs[0].day.day, 28)\n File \"/home/alex/django/django/db/models/query.py\", line 303, in __getitem__\n\tqs._fetch_all()\n File \"/home/alex/django/django/db/models/query.py\", line 1190, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"/home/alex/django/django/db/models/query.py\", line 64, in __iter__\n\tfor row in compiler.results_iter(results):\n File \"/home/alex/django/django/db/models/sql/compiler.py\", line 1013, in apply_converters\n\tvalue = converter(value, expression, connection)\n File \"/home/alex/django/django/db/models/functions/datetime.py\", line 225, in convert_value\n\tvalue = timezone.make_aware(value, self.tzinfo)\n File \"/home/alex/django/django/utils/timezone.py\", line 270, in make_aware\n\treturn timezone.localize(value, is_dst=is_dst)\n File \"/home/alex/.virtualenvs/djangodev/lib/python3.6/site-packages/pytz/tzinfo.py\", line 363, in localize\n\traise AmbiguousTimeError(dt)\npytz.exceptions.AmbiguousTimeError: 2018-10-28 02:00:00\n",
  "hints_text": "I don't have much expertise but reading the documentation, it sounds like you may be ​creating invalid data. Django converts datetimes when USE_TZ is activate, I don't think it can hide that exception. Did you carefully review the pytz documentation which states, \"Unfortunately using the tzinfo argument of the standard datetime constructors ‘’does not work’’ with pytz for many timezones.\"\nThe AmbiguousTimeError case could be worked around by adding a Trunc(is_dst=None) optional argument that would be passed down to localize. That would make the API a bit more usable when tzinfo is provided and you know what you're after. I'm afraid there isn't much that can be done for NonExistentTimeError though.",
  "created_at": "2018-09-14T17:50:40Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_trunc_ambiguous_and_invalid_times (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\"]",
  "PASS_TO_PASS": "[\"test_extract_day_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func_explicit_timezone_priority (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_timezone_applied_before_truncation (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.550879",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}