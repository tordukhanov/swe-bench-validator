{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-22236",
  "base_commit": "cf523854d68e078ae0c027c7dda24ce1b745f2cb",
  "patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -224,7 +224,7 @@ def _print_Relational(self, e):\n \n         l = self._print(e.lhs)\n         r = self._print(e.rhs)\n-        pform = prettyForm(*stringPict.next(l, op, r))\n+        pform = prettyForm(*stringPict.next(l, op, r), binding=prettyForm.OPEN)\n         return pform\n \n     def _print_Not(self, e):\n@@ -1962,28 +1962,9 @@ def _print_Mul(self, product):\n             else:\n                 a.append(item)\n \n-        from sympy.concrete.products import Product\n-        from sympy.concrete.summations import Sum\n-        from sympy.functions.elementary.piecewise import Piecewise\n-        from sympy.integrals.integrals import Integral\n-\n-        # Convert to pretty forms. Add parens to Add instances if there\n-        # is more than one term in the numer/denom\n-        for i in range(0, len(a)):\n-            if (a[i].is_Add and len(a) > 1) or (i != len(a) - 1 and\n-                    isinstance(a[i], (Integral, Piecewise, Product, Sum))):\n-                a[i] = prettyForm(*self._print(a[i]).parens())\n-            elif a[i].is_Relational:\n-                a[i] = prettyForm(*self._print(a[i]).parens())\n-            else:\n-                a[i] = self._print(a[i])\n-\n-        for i in range(0, len(b)):\n-            if (b[i].is_Add and len(b) > 1) or (i != len(b) - 1 and\n-                    isinstance(b[i], (Integral, Piecewise, Product, Sum))):\n-                b[i] = prettyForm(*self._print(b[i]).parens())\n-            else:\n-                b[i] = self._print(b[i])\n+        # Convert to pretty forms. Parentheses are added by `__mul__`.\n+        a = [self._print(ai) for ai in a]\n+        b = [self._print(bi) for bi in b]\n \n         # Construct a pretty form\n         if len(b) == 0:\ndiff --git a/sympy/printing/pretty/stringpict.py b/sympy/printing/pretty/stringpict.py\n--- a/sympy/printing/pretty/stringpict.py\n+++ b/sympy/printing/pretty/stringpict.py\n@@ -439,18 +439,21 @@ def __mul__(self, *others):\n         }\n \n         if len(others) == 0:\n-            return self # We aren't actually multiplying... So nothing to do here.\n-        args = self\n-        if args.binding > prettyForm.MUL:\n-            arg = stringPict(*args.parens())\n-        result = [args]\n+            return self  # We aren't actually multiplying... So nothing to do here.\n+\n+        # add parens on args that need them\n+        arg = self\n+        if arg.binding > prettyForm.MUL and arg.binding != prettyForm.NEG:\n+            arg = stringPict(*arg.parens())\n+        result = [arg]\n         for arg in others:\n             if arg.picture[0] not in quantity.values():\n                 result.append(xsym('*'))\n             #add parentheses for weak binders\n-            if arg.binding > prettyForm.MUL:\n+            if arg.binding > prettyForm.MUL and arg.binding != prettyForm.NEG:\n                 arg = stringPict(*arg.parens())\n             result.append(arg)\n+\n         len_res = len(result)\n         for i in range(len_res):\n             if i < len_res - 1 and result[i] == '-1' and result[i + 1] == xsym('*'):\n",
  "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -981,6 +981,8 @@ def test_negative_fractions():\n \"\"\"\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n+\n+def test_Mul():\n     expr = Mul(0, 1, evaluate=False)\n     assert pretty(expr) == \"0*1\"\n     assert upretty(expr) == \"0⋅1\"\n@@ -1006,8 +1008,8 @@ def test_negative_fractions():\n     assert pretty(expr) == \"0 + 0 + 1\"\n     assert upretty(expr) == \"0 + 0 + 1\"\n     expr = Mul(1, -1, evaluate=False)\n-    assert pretty(expr) == \"1*(-1)\"\n-    assert upretty(expr) == \"1⋅(-1)\"\n+    assert pretty(expr) == \"1*-1\"\n+    assert upretty(expr) == \"1⋅-1\"\n     expr = Mul(1.0, x, evaluate=False)\n     assert pretty(expr) == \"1.0*x\"\n     assert upretty(expr) == \"1.0⋅x\"\n@@ -1026,6 +1028,30 @@ def test_negative_fractions():\n     expr = Mul(Rational(2, 3), Rational(5, 7), evaluate=False)\n     assert pretty(expr) == \"2/3*5/7\"\n     assert upretty(expr) == \"2/3⋅5/7\"\n+    expr = Mul(x + y, Rational(1, 2), evaluate=False)\n+    assert pretty(expr) == \"(x + y)*1/2\"\n+    assert upretty(expr) == \"(x + y)⋅1/2\"\n+    expr = Mul(Rational(1, 2), x + y, evaluate=False)\n+    assert pretty(expr) == \"x + y\\n-----\\n  2  \"\n+    assert upretty(expr) == \"x + y\\n─────\\n  2  \"\n+    expr = Mul(S.One, x + y, evaluate=False)\n+    assert pretty(expr) == \"1*(x + y)\"\n+    assert upretty(expr) == \"1⋅(x + y)\"\n+    expr = Mul(x - y, S.One, evaluate=False)\n+    assert pretty(expr) == \"(x - y)*1\"\n+    assert upretty(expr) == \"(x - y)⋅1\"\n+    expr = Mul(Rational(1, 2), x - y, S.One, x + y, evaluate=False)\n+    assert pretty(expr) == \"1/2*(x - y)*1*(x + y)\"\n+    assert upretty(expr) == \"1/2⋅(x - y)⋅1⋅(x + y)\"\n+    expr = Mul(x + y, Rational(3, 4), S.One, y - z, evaluate=False)\n+    assert pretty(expr) == \"(x + y)*3/4*1*(y - z)\"\n+    assert upretty(expr) == \"(x + y)⋅3/4⋅1⋅(y - z)\"\n+    expr = Mul(x + y, Rational(1, 1), Rational(3, 4), Rational(5, 6),evaluate=False)\n+    assert pretty(expr) == \"(x + y)*1*3/4*5/6\"\n+    assert upretty(expr) == \"(x + y)⋅1⋅3/4⋅5/6\"\n+    expr = Mul(Rational(3, 4), x + y, S.One, y - z, evaluate=False)\n+    assert pretty(expr) == \"3/4*(x + y)*1*(y - z)\"\n+    assert upretty(expr) == \"3/4⋅(x + y)⋅1⋅(y - z)\"\n \n def test_issue_5524():\n     assert pretty(-(-x + 5)*(-x - 2*sqrt(2) + 5) - (-y + 5)*(-y + 5)) == \\\n",
  "problem_statement": "Printing of unevaluated Mul needs brackets\nThe second version here should use brackets or something:\r\n```python\r\nIn [16]: Mul(Rational(1, 2), x + y, evaluate=False)\r\nOut[16]: \r\nx + y\r\n─────\r\n  2  \r\n\r\nIn [17]: Mul(x + y, Rational(1, 2), evaluate=False)\r\nOut[17]: x + y⋅1/2\r\n```\n",
  "hints_text": "",
  "created_at": "2021-10-08T09:32:03Z",
  "version": "1.10",
  "FAIL_TO_PASS": "[\"test_Mul\"]",
  "PASS_TO_PASS": "[\"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_missing_in_2X_issue_9047\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_Permutation\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_pretty_ordering\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_Lambda\", \"test_pretty_TransferFunction\", \"test_pretty_Series\", \"test_pretty_Parallel\", \"test_pretty_Feedback\", \"test_pretty_MIMOFeedback\", \"test_pretty_TransferFunctionMatrix\", \"test_pretty_order\", \"test_pretty_derivatives\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_pretty_ndim_arrays\", \"test_tensor_TensorProduct\", \"test_diffgeom_print_WedgeProduct\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixSlice\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_ITE\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_print_builtin_set\", \"test_pretty_sets\", \"test_pretty_SetExpr\", \"test_pretty_ImageSet\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_exponent\", \"test_ProductSet_parenthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_FourierSeries\", \"test_pretty_FormalPowerSeries\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_UniversalSet\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_units\", \"test_pretty_Subs\", \"test_gammas\", \"test_beta\", \"test_function_subclass_different_name\", \"test_SingularityFunction\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_pretty_geometry\", \"test_expint\", \"test_elliptic_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6285\", \"test_issue_6359\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_PrettyModules\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_8292\", \"test_issue_4335\", \"test_issue_8344\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_issue_13651\", \"test_pretty_primenu\", \"test_pretty_primeomega\", \"test_pretty_Mod\", \"test_issue_11801\", \"test_pretty_UnevaluatedExpr\", \"test_issue_10472\", \"test_MatrixElement_printing\", \"test_issue_12675\", \"test_MatrixSymbol_printing\", \"test_degree_printing\", \"test_vector_expr_pretty_printing\", \"test_pretty_print_tensor_expr\", \"test_pretty_print_tensor_partial_deriv\", \"test_issue_15560\", \"test_print_lerchphi\", \"test_issue_15583\", \"test_matrixSymbolBold\", \"test_center_accent\", \"test_imaginary_unit\", \"test_str_special_matrices\", \"test_pretty_misc_functions\", \"test_hadamard_power\", \"test_issue_17258\", \"test_is_combining\", \"test_issue_17616\", \"test_issue_17857\", \"test_issue_18272\", \"test_Str\"]",
  "environment_setup_commit": "fd40404e72921b9e52a5f9582246e4a6cd96c431",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.149166",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}