{
  "repo": "django/django",
  "instance_id": "django__django-13030",
  "base_commit": "36db4dd937ae11c5b687c5d2e5fa3c27e4140001",
  "patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -366,10 +366,12 @@ def process_rhs(self, compiler, connection):\n             )\n \n         if self.rhs_is_direct_value():\n+            # Remove None from the list as NULL is never equal to anything.\n             try:\n                 rhs = OrderedSet(self.rhs)\n+                rhs.discard(None)\n             except TypeError:  # Unhashable items in self.rhs\n-                rhs = self.rhs\n+                rhs = [r for r in self.rhs if r is not None]\n \n             if not rhs:\n                 raise EmptyResultSet\n",
  "test_patch": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -576,8 +576,6 @@ def test_none(self):\n         self.assertQuerysetEqual(Article.objects.none().iterator(), [])\n \n     def test_in(self):\n-        # using __in with an empty list should return an empty query set\n-        self.assertQuerysetEqual(Article.objects.filter(id__in=[]), [])\n         self.assertQuerysetEqual(\n             Article.objects.exclude(id__in=[]),\n             [\n@@ -591,6 +589,9 @@ def test_in(self):\n             ]\n         )\n \n+    def test_in_empty_list(self):\n+        self.assertSequenceEqual(Article.objects.filter(id__in=[]), [])\n+\n     def test_in_different_database(self):\n         with self.assertRaisesMessage(\n             ValueError,\n@@ -603,6 +604,31 @@ def test_in_keeps_value_ordering(self):\n         query = Article.objects.filter(slug__in=['a%d' % i for i in range(1, 8)]).values('pk').query\n         self.assertIn(' IN (a1, a2, a3, a4, a5, a6, a7) ', str(query))\n \n+    def test_in_ignore_none(self):\n+        with self.assertNumQueries(1) as ctx:\n+            self.assertSequenceEqual(\n+                Article.objects.filter(id__in=[None, self.a1.id]),\n+                [self.a1],\n+            )\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertIn('IN (%s)' % self.a1.pk, sql)\n+\n+    def test_in_ignore_solo_none(self):\n+        with self.assertNumQueries(0):\n+            self.assertSequenceEqual(Article.objects.filter(id__in=[None]), [])\n+\n+    def test_in_ignore_none_with_unhashable_items(self):\n+        class UnhashableInt(int):\n+            __hash__ = None\n+\n+        with self.assertNumQueries(1) as ctx:\n+            self.assertSequenceEqual(\n+                Article.objects.filter(id__in=[None, UnhashableInt(self.a1.id)]),\n+                [self.a1],\n+            )\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertIn('IN (%s)' % self.a1.pk, sql)\n+\n     def test_error_messages(self):\n         # Programming errors are pointed out with nice error messages\n         with self.assertRaisesMessage(\n",
  "problem_statement": "Avoid passing NULL to the IN lookup\nDescription\n\t\nCurrently prefetch_related on a FK passes the NULL through to the database for e.g. author_id IN (NULL, 2). Passing NULL is always unnecessary, since it's not allowed in FK's. There's a small risk from passing NULL that it could lead to incorrect with complex prefetch querysets using PK refs because of NULL's weirdness in SQL.\nFor example with these models:\nfrom django.db import models\nclass Author(models.Model):\n\tpass\nclass Book(models.Model):\n\tauthor = models.ForeignKey(Author, null=True, on_delete=models.DO_NOTHING)\nPrefetching authors on Books, when at least one Book has author=None, uses IN (..., NULL, ...) in the query:\nIn [1]: from example.core.models import Author, Book\nIn [2]: a1 = Author.objects.create()\nIn [3]: Book.objects.create(author=a1)\nOut[3]: <Book: Book object (3)>\nIn [4]: Book.objects.create(author=None)\nOut[4]: <Book: Book object (4)>\nIn [5]: Book.objects.prefetch_related('author')\nOut[5]: <QuerySet [<Book: Book object (3)>, <Book: Book object (4)>]>\nIn [6]: from django.db import connection\nIn [7]: connection.queries\nOut[7]:\n[{'sql': 'INSERT INTO \"core_author\" (\"id\") VALUES (NULL)', 'time': '0.001'},\n {'sql': 'INSERT INTO \"core_book\" (\"author_id\") VALUES (2)', 'time': '0.001'},\n {'sql': 'INSERT INTO \"core_book\" (\"author_id\") VALUES (NULL)',\n 'time': '0.001'},\n {'sql': 'SELECT \"core_book\".\"id\", \"core_book\".\"author_id\" FROM \"core_book\" LIMIT 21',\n 'time': '0.000'},\n {'sql': 'SELECT \"core_author\".\"id\" FROM \"core_author\" WHERE \"core_author\".\"id\" IN (NULL, 2)',\n 'time': '0.000'}]\nMaybe this could generally be extended to use of __in with non-nullable fields?\n",
  "hints_text": "Maybe this could generally be extended to use of __in with non-nullable fields? Since IN translates to OR = for each elements and NULL != NULL I assume it could be done at the __in lookup level even for non-nullable fields.",
  "created_at": "2020-06-05T22:49:57Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_in_ignore_none (lookup.tests.LookupTests)\", \"test_in_ignore_none_with_unhashable_items (lookup.tests.LookupTests)\", \"test_in_ignore_solo_none (lookup.tests.LookupTests)\"]",
  "PASS_TO_PASS": "[\"test_chain_date_time_lookups (lookup.tests.LookupTests)\", \"test_count (lookup.tests.LookupTests)\", \"test_custom_field_none_rhs (lookup.tests.LookupTests)\", \"Lookup.can_use_none_as_rhs=True allows None as a lookup value.\", \"test_error_messages (lookup.tests.LookupTests)\", \"test_escaping (lookup.tests.LookupTests)\", \"test_exact_exists (lookup.tests.LookupTests)\", \"Transforms are used for __exact=None.\", \"test_exact_query_rhs_with_selected_columns (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_limit_one (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_limit_one_offset (lookup.tests.LookupTests)\", \"test_exact_sliced_queryset_not_limited_to_one (lookup.tests.LookupTests)\", \"test_exclude (lookup.tests.LookupTests)\", \"test_exists (lookup.tests.LookupTests)\", \"test_get_next_previous_by (lookup.tests.LookupTests)\", \"test_in (lookup.tests.LookupTests)\", \"test_in_bulk (lookup.tests.LookupTests)\", \"test_in_bulk_lots_of_ids (lookup.tests.LookupTests)\", \"test_in_bulk_meta_constraint (lookup.tests.LookupTests)\", \"test_in_bulk_non_unique_field (lookup.tests.LookupTests)\", \"test_in_bulk_non_unique_meta_constaint (lookup.tests.LookupTests)\", \"test_in_bulk_with_field (lookup.tests.LookupTests)\", \"test_in_different_database (lookup.tests.LookupTests)\", \"test_in_empty_list (lookup.tests.LookupTests)\", \"test_in_keeps_value_ordering (lookup.tests.LookupTests)\", \"test_isnull_non_boolean_value (lookup.tests.LookupTests)\", \"test_iterator (lookup.tests.LookupTests)\", \"test_lookup_collision (lookup.tests.LookupTests)\", \"test_lookup_date_as_str (lookup.tests.LookupTests)\", \"test_lookup_int_as_str (lookup.tests.LookupTests)\", \"test_nested_outerref_lhs (lookup.tests.LookupTests)\", \"test_none (lookup.tests.LookupTests)\", \"test_nonfield_lookups (lookup.tests.LookupTests)\", \"test_pattern_lookups_with_substr (lookup.tests.LookupTests)\", \"test_regex (lookup.tests.LookupTests)\", \"test_regex_backreferencing (lookup.tests.LookupTests)\", \"test_regex_non_ascii (lookup.tests.LookupTests)\", \"test_regex_non_string (lookup.tests.LookupTests)\", \"test_regex_null (lookup.tests.LookupTests)\", \"test_relation_nested_lookup_error (lookup.tests.LookupTests)\", \"test_unsupported_lookups (lookup.tests.LookupTests)\", \"test_values (lookup.tests.LookupTests)\", \"test_values_list (lookup.tests.LookupTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.641728",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}