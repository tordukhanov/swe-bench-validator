{
  "repo": "django/django",
  "instance_id": "django__django-16597",
  "base_commit": "b15f162f252610e3b510ade465549769ab4356cf",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -857,6 +857,11 @@ def as_sql(self, *args, **kwargs):\n \n     def resolve_expression(self, *args, **kwargs):\n         col = super().resolve_expression(*args, **kwargs)\n+        if col.contains_over_clause:\n+            raise NotSupportedError(\n+                f\"Referencing outer query window expression is not supported: \"\n+                f\"{self.name}.\"\n+            )\n         # FIXME: Rename possibly_multivalued to multivalued and fix detection\n         # for non-multivalued JOINs (e.g. foreign key fields). This should take\n         # into account only many-to-many and one-to-many relationships.\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -676,7 +676,7 @@ def collect_replacements(expressions):\n                 )\n             )\n         inner_query_compiler = inner_query.get_compiler(\n-            self.using, elide_empty=self.elide_empty\n+            self.using, connection=self.connection, elide_empty=self.elide_empty\n         )\n         inner_sql, inner_params = inner_query_compiler.as_sql(\n             # The limits must be applied to the outer query to avoid pruning\n",
  "test_patch": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1587,6 +1587,25 @@ def test_unsupported_backend(self):\n                     dense_rank=Window(expression=DenseRank())\n                 ).get()\n \n+    def test_filter_subquery(self):\n+        qs = Employee.objects.annotate(\n+            department_salary_rank=Window(\n+                Rank(), partition_by=\"department\", order_by=\"-salary\"\n+            )\n+        )\n+        msg = (\n+            \"Referencing outer query window expression is not supported: \"\n+            \"department_salary_rank.\"\n+        )\n+        with self.assertRaisesMessage(NotSupportedError, msg):\n+            qs.annotate(\n+                employee_name=Subquery(\n+                    Employee.objects.filter(\n+                        age=OuterRef(\"department_salary_rank\")\n+                    ).values(\"name\")[:1]\n+                )\n+            )\n+\n \n class NonQueryWindowTests(SimpleTestCase):\n     def test_window_repr(self):\n",
  "problem_statement": "Subquery referencing WINDOW expression breaks query compilation\nDescription\n\t\n#28333 introduced the ability to filter on WINDOW expressions but when a WINDOW expression is referred to in a subquery, the query compiler fails: ValueError: Need either using or connection\nI assume it has to do with self.connection not being passed on to inner_query.get_compiler in get_qualify_sql introduced here: ​https://github.com/django/django/commit/f387d024fc75569d2a4a338bfda76cc2f328f627#diff-f58de2deaccecd2d53199c5ca29e3e1050ec2adb80fb057cdfc0b4e6accdf14fR624\nBelow is the full traceback. A dummy test is available here: ​https://github.com/jnns/django/commit/04d59e27503fb376d60314806876ecbae89d9b62\nTraceback (most recent call last):\n File \"/usr/lib64/python3.11/unittest/case.py\", line 57, in testPartExecutor\n\tyield\n File \"/usr/lib64/python3.11/unittest/case.py\", line 623, in run\n\tself._callTestMethod(testMethod)\n File \"/usr/lib64/python3.11/unittest/case.py\", line 579, in _callTestMethod\n\tif method() is not None:\n File \"tests/expressions_window/tests.py\", line 1025, in test_filter_subquery\n\tlist(\n File \"django/db/models/query.py\", line 398, in __iter__\n\tself._fetch_all()\n File \"django/db/models/query.py\", line 1881, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"django/db/models/query.py\", line 91, in __iter__\n\tresults = compiler.execute_sql(\n File \"django/db/models/sql/compiler.py\", line 1545, in execute_sql\n\tsql, params = self.as_sql()\n File \"django/db/models/sql/compiler.py\", line 732, in as_sql\n\textra_select, order_by, group_by = self.pre_sql_setup(\n File \"django/db/models/sql/compiler.py\", line 84, in pre_sql_setup\n\tself.setup_query(with_col_aliases=with_col_aliases)\n File \"django/db/models/sql/compiler.py\", line 73, in setup_query\n\tself.select, self.klass_info, self.annotation_col_map = self.get_select(\n File \"django/db/models/sql/compiler.py\", line 296, in get_select\n\tsql, params = self.compile(col)\n File \"django/db/models/sql/compiler.py\", line 542, in compile\n\tsql, params = node.as_sql(self, self.connection)\n File \"django/db/models/expressions.py\", line 1536, in as_sql\n\tsubquery_sql, sql_params = self.query.as_sql(compiler, connection)\n File \"django/db/models/sql/query.py\", line 1150, in as_sql\n\tsql, params = self.get_compiler(connection=connection).as_sql()\n File \"django/db/models/sql/compiler.py\", line 751, in as_sql\n\tresult, params = self.get_qualify_sql()\n File \"django/db/models/sql/compiler.py\", line 676, in get_qualify_sql\n\tinner_query_compiler = inner_query.get_compiler(\n File \"django/db/models/sql/query.py\", line 298, in get_compiler\n\traise ValueError(\"Need either using or connection\")\nValueError: Need either using or connection\n",
  "hints_text": "Thanks again for the report! Would you like to prepare a patch?\nI started work on ​https://github.com/django/django/pull/16597 but now I'm in need of assistance. The query compiles fine if connection is added, but I am unsure about the correctness of the resulting query. I added the test WindowFunctionTests.test_filter_subquery to describe the behaviour I expected to see. Maybe this is out of scope for the referenced feature #15922 or completely intentional. I am not sure. This is the query in the failing test is currently generated: SELECT \"expressions_window_employee\".\"name\", (SELECT \"col1\" FROM (SELECT * FROM (SELECT U0.\"code\" AS \"col1\", RANK() OVER (PARTITION BY \"expressions_window_employee\".\"department\" ORDER BY \"expressions_window_employee\".\"salary\" DESC) AS \"qual0\" FROM \"expressions_window_classification\" U0) \"qualify\" WHERE \"col1\" = (\"qual0\") ) \"qualify_mask\" LIMIT 1) AS \"code\" FROM \"expressions_window_employee\" Whereas this is what I would expect: SELECT name, (SELECT \"code\" FROM \"expressions_window_classification\" WHERE \"code\" = \"department_salary_rank\" LIMIT 1) AS code FROM ( SELECT \"expressions_window_employee\".\"name\", RANK() OVER (PARTITION BY \"expressions_window_employee\".\"department\" ORDER BY \"expressions_window_employee\".\"salary\" DESC) AS \"department_salary_rank\" FROM \"expressions_window_employee\" )\nPassing connection will address the crash but there seems to be a more fundamental issue when using OuterRef to refer to a window expression SELECT \"expressions_window_employee\".\"id\", \"expressions_window_employee\".\"name\", \"expressions_window_employee\".\"salary\", \"expressions_window_employee\".\"department\", \"expressions_window_employee\".\"hire_date\", \"expressions_window_employee\".\"age\", \"expressions_window_employee\".\"classification_id\", \"expressions_window_employee\".\"bonus\", RANK() OVER (PARTITION BY \"expressions_window_employee\".\"department\" ORDER BY \"expressions_window_employee\".\"salary\" DESC) AS \"department_salary_rank\", (SELECT \"col1\" FROM (SELECT * FROM (SELECT U0.\"name\" AS \"col1\", RANK() OVER (PARTITION BY \"expressions_window_employee\".\"department\" ORDER BY \"expressions_window_employee\".\"salary\" DESC) AS \"qual0\", U0.\"age\" AS \"qual1\" FROM \"expressions_window_employee\" U0) \"qualify\" WHERE \"qual1\" = (\"qual0\") ) \"qualify_mask\" LIMIT 1) AS \"foo\" FROM \"expressions_window_employee\"; The RANK() window within the subquery will be against the subquery table and not the outer one which only happens to work in this case because it happens to be the same table. I believe the proper SQL here would be SELECT *, (SELECT U0.\"name\" FROM \"expressions_window_employee\" U0 WHERE U0.\"age\" = \"department_salary_rank\" LIMIT 1) AS \"foo\" FROM ( SELECT \"expressions_window_employee\".\"id\", \"expressions_window_employee\".\"name\", \"expressions_window_employee\".\"salary\", \"expressions_window_employee\".\"department\", \"expressions_window_employee\".\"hire_date\", \"expressions_window_employee\".\"age\", \"expressions_window_employee\".\"classification_id\", \"expressions_window_employee\".\"bonus\", RANK() OVER (PARTITION BY \"expressions_window_employee\".\"department\" ORDER BY \"expressions_window_employee\".\"salary\" DESC) AS \"department_salary_rank\" FROM \"expressions_window_employee\" ) subquery Things get even more complex when filtering against a subquery annotation that refers to a window function as that filter now requires QUALIFY emulation. Things get even more complex when using nested subqueries referring to an outerquery window function. I would strongly suggest we opt for explicitly not supporting subqueries references to outerref window function instead of trying to get 4.2 working with them and create a new feature request to add support for them as they require special care to get working properly. django/db/models/expressions.py diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index 2d8a5c5919..a426195b0d 100644 a b def as_sql(self, *args, **kwargs): 857857 858858 def resolve_expression(self, *args, **kwargs): 859859 col = super().resolve_expression(*args, **kwargs) 860 if col.contains_over_clause: 861 raise NotSupportedError( 862 f\"Referencing outer query window expression is not supported: {self.name}\" 863 ) 860864 # FIXME: Rename possibly_multivalued to multivalued and fix detection 861865 # for non-multivalued JOINs (e.g. foreign key fields). This should take 862866 # into account only many-to-many and one-to-many relationships. django/db/models/sql/compiler.py diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py index 6929f216b4..21234fb6b0 100644 a b def collect_replacements(expressions): 674674 ) 675675 ) 676676 inner_query_compiler = inner_query.get_compiler( 677 self.using, elide_empty=self.elide_empty 677 self.using, connection=self.connection, elide_empty=self.elide_empty 678678 ) 679679 inner_sql, inner_params = inner_query_compiler.as_sql( 680680 # The limits must be applied to the outer query to avoid pruning tests/expressions_window/tests.py diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py index 027fc9c25c..a27c4f222f 100644 a b def test_invalid_filter(self): 15781578 list(qs.exclude(window=1, department=\"Accounting\")) 15791579 15801580 1581 class WindowUnsupportedTests(TestCase): 1581class WindowUnsupportedTests(SimpleTestCase): 15821582 def test_unsupported_backend(self): 15831583 msg = \"This backend does not support window expressions.\" 15841584 with mock.patch.object(connection.features, \"supports_over_clause\", False): … … def test_unsupported_backend(self): 15871587 dense_rank=Window(expression=DenseRank()) 15881588 ).get() 15891589 1590 def test_filter_subquery(self): 1591 qs = Employee.objects.annotate( 1592 department_salary_rank=Window( 1593 Rank(), partition_by=\"department\", order_by=\"-salary\" 1594 ) 1595 ) 1596 msg = \"Referencing outer query window expression is not supported: department_salary_rank\" 1597 with self.assertRaisesMessage(NotSupportedError, msg): 1598 qs.annotate( 1599 employee_name=Subquery( 1600 Employee.objects.filter( 1601 age=OuterRef(\"department_salary_rank\") 1602 ).values(\"name\")[:1] 1603 ) 1604 ) 1605 15901606 15911607class NonQueryWindowTests(SimpleTestCase): 15921608 def test_window_repr(self):\nJannis, let's follow Simon's recommendation.",
  "created_at": "2023-02-24T13:23:27Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_filter_subquery (expressions_window.tests.WindowUnsupportedTests.test_filter_subquery)\"]",
  "PASS_TO_PASS": "[\"test_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests.test_empty_group_by_cols)\", \"test_frame_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests.test_frame_empty_group_by_cols)\", \"test_frame_window_frame_notimplemented (expressions_window.tests.NonQueryWindowTests.test_frame_window_frame_notimplemented)\", \"test_invalid_order_by (expressions_window.tests.NonQueryWindowTests.test_invalid_order_by)\", \"test_invalid_source_expression (expressions_window.tests.NonQueryWindowTests.test_invalid_source_expression)\", \"test_window_frame_repr (expressions_window.tests.NonQueryWindowTests.test_window_frame_repr)\", \"test_window_repr (expressions_window.tests.NonQueryWindowTests.test_window_repr)\", \"test_unsupported_backend (expressions_window.tests.WindowUnsupportedTests.test_unsupported_backend)\", \"test_avg_salary_department (expressions_window.tests.WindowFunctionTests.test_avg_salary_department)\", \"Compute the cumulative distribution for the employees based on the\", \"test_dense_rank (expressions_window.tests.WindowFunctionTests.test_dense_rank)\", \"test_department_salary (expressions_window.tests.WindowFunctionTests.test_department_salary)\", \"test_exclude (expressions_window.tests.WindowFunctionTests.test_exclude)\", \"Window expressions can't be used in an INSERT statement.\", \"Window expressions can't be used in an UPDATE statement.\", \"test_filter (expressions_window.tests.WindowFunctionTests.test_filter)\", \"test_filter_alias (expressions_window.tests.WindowFunctionTests.test_filter_alias)\", \"test_filter_column_ref_rhs (expressions_window.tests.WindowFunctionTests.test_filter_column_ref_rhs)\", \"test_filter_conditional_annotation (expressions_window.tests.WindowFunctionTests.test_filter_conditional_annotation)\", \"test_filter_conditional_expression (expressions_window.tests.WindowFunctionTests.test_filter_conditional_expression)\", \"test_filter_count (expressions_window.tests.WindowFunctionTests.test_filter_count)\", \"test_filter_select_related (expressions_window.tests.WindowFunctionTests.test_filter_select_related)\", \"test_filter_values (expressions_window.tests.WindowFunctionTests.test_filter_values)\", \"test_first_value (expressions_window.tests.WindowFunctionTests.test_first_value)\", \"test_function_list_of_values (expressions_window.tests.WindowFunctionTests.test_function_list_of_values)\", \"test_heterogeneous_filter (expressions_window.tests.WindowFunctionTests.test_heterogeneous_filter)\", \"test_invalid_end_value_range (expressions_window.tests.WindowFunctionTests.test_invalid_end_value_range)\", \"test_invalid_filter (expressions_window.tests.WindowFunctionTests.test_invalid_filter)\", \"test_invalid_start_value_range (expressions_window.tests.WindowFunctionTests.test_invalid_start_value_range)\", \"test_invalid_type_end_row_range (expressions_window.tests.WindowFunctionTests.test_invalid_type_end_row_range)\", \"test_invalid_type_end_value_range (expressions_window.tests.WindowFunctionTests.test_invalid_type_end_value_range)\", \"test_invalid_type_start_row_range (expressions_window.tests.WindowFunctionTests.test_invalid_type_start_row_range)\", \"test_invalid_type_start_value_range (expressions_window.tests.WindowFunctionTests.test_invalid_type_start_value_range)\", \"test_key_transform (expressions_window.tests.WindowFunctionTests.test_key_transform)\", \"Compute the difference between an employee's salary and the next\", \"test_lag_decimalfield (expressions_window.tests.WindowFunctionTests.test_lag_decimalfield)\", \"test_last_value (expressions_window.tests.WindowFunctionTests.test_last_value)\", \"Determine what the next person hired in the same department makes.\", \"test_lead_default (expressions_window.tests.WindowFunctionTests.test_lead_default)\", \"Determine what the person hired after someone makes. Due to\", \"A query filtering against a window function have its limit applied\", \"Find the maximum salary awarded in the same year as the\", \"An alternative way to specify a query for FirstValue.\", \"Accumulate the salaries over the departments based on hire_date.\", \"Find the maximum salary for each department for people hired in the\", \"Find the nth row of the data set. None is returned since there are\", \"test_nthvalue (expressions_window.tests.WindowFunctionTests.test_nthvalue)\", \"Compute the group for each of the employees across the entire company,\", \"Calculate the percentage rank of the employees across the entire\", \"test_range_n_preceding_and_following (expressions_window.tests.WindowFunctionTests.test_range_n_preceding_and_following)\", \"A query with RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.\", \"Rank the employees based on the year they're were hired. Since there\", \"test_related_ordering_with_count (expressions_window.tests.WindowFunctionTests.test_related_ordering_with_count)\", \"The row number window function computes the number based on the order\", \"A query with ROWS BETWEEN UNBOUNDED PRECEDING AND 3 FOLLOWING.\", \"test_subquery_row_range_rank (expressions_window.tests.WindowFunctionTests.test_subquery_row_range_rank)\", \"test_window_expression_within_subquery (expressions_window.tests.WindowFunctionTests.test_window_expression_within_subquery)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.763267",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}