{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12088",
  "base_commit": "cd3224018333211374b2fe914705825e5125a3b1",
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1054,8 +1054,7 @@ def __new__(cls, num, dps=None, prec=None, precision=None):\n             if precision < num._prec:\n                 _mpf_ = mpf_norm(_mpf_, precision)\n         else:\n-            # XXX: We lose precision here.\n-            _mpf_ = mpmath.mpf(num)._mpf_\n+            _mpf_ = mpmath.mpf(num, prec=prec)._mpf_\n \n         # special cases\n         if _mpf_ == _mpf_zero:\ndiff --git a/sympy/polys/constructor.py b/sympy/polys/constructor.py\n--- a/sympy/polys/constructor.py\n+++ b/sympy/polys/constructor.py\n@@ -175,7 +175,8 @@ def _construct_composite(coeffs, opt):\n             break\n \n     if reals:\n-        ground = RR\n+        max_prec = max([c._prec for c in coeffs])\n+        ground = RealField(prec=max_prec)\n     elif rationals:\n         ground = QQ\n     else:\ndiff --git a/sympy/polys/domains/fractionfield.py b/sympy/polys/domains/fractionfield.py\n--- a/sympy/polys/domains/fractionfield.py\n+++ b/sympy/polys/domains/fractionfield.py\n@@ -55,12 +55,13 @@ def __str__(self):\n         return str(self.domain) + '(' + ','.join(map(str, self.symbols)) + ')'\n \n     def __hash__(self):\n-        return hash((self.__class__.__name__, self.dtype, self.domain, self.symbols))\n+        return hash((self.__class__.__name__, self.dtype.field, self.domain, self.symbols))\n \n     def __eq__(self, other):\n         \"\"\"Returns `True` if two domains are equivalent. \"\"\"\n         return isinstance(other, FractionField) and \\\n-            self.dtype == other.dtype and self.field == other.field\n+            (self.dtype.field, self.domain, self.symbols) ==\\\n+            (other.dtype.field, other.domain, other.symbols)\n \n     def to_sympy(self, a):\n         \"\"\"Convert `a` to a SymPy object. \"\"\"\ndiff --git a/sympy/polys/domains/mpelements.py b/sympy/polys/domains/mpelements.py\n--- a/sympy/polys/domains/mpelements.py\n+++ b/sympy/polys/domains/mpelements.py\n@@ -53,13 +53,13 @@ def __init__(ctx, prec=53, dps=None, tol=None):\n         else:\n             ctx._set_dps(dps)\n \n-        ctx.mpf = type('RealElement', (RealElement,), {})\n-        ctx.mpc = type('ComplexElement', (ComplexElement,), {})\n+        ctx.mpf = RealElement\n+        ctx.mpc = ComplexElement\n         ctx.mpf._ctxdata = [ctx.mpf, new, ctx._prec_rounding]\n         ctx.mpc._ctxdata = [ctx.mpc, new, ctx._prec_rounding]\n         ctx.mpf.context = ctx\n         ctx.mpc.context = ctx\n-        ctx.constant = type('constant', (_constant,), {})\n+        ctx.constant = _constant\n         ctx.constant._ctxdata = [ctx.mpf, new, ctx._prec_rounding]\n         ctx.constant.context = ctx\n \ndiff --git a/sympy/polys/domains/polynomialring.py b/sympy/polys/domains/polynomialring.py\n--- a/sympy/polys/domains/polynomialring.py\n+++ b/sympy/polys/domains/polynomialring.py\n@@ -60,12 +60,13 @@ def __str__(self):\n         return str(self.domain) + '[' + ','.join(map(str, self.symbols)) + ']'\n \n     def __hash__(self):\n-        return hash((self.__class__.__name__, self.dtype, self.domain, self.symbols))\n+        return hash((self.__class__.__name__, self.dtype.ring, self.domain, self.symbols))\n \n     def __eq__(self, other):\n         \"\"\"Returns `True` if two domains are equivalent. \"\"\"\n         return isinstance(other, PolynomialRing) and \\\n-            self.dtype == other.dtype and self.ring == other.ring\n+            (self.dtype.ring, self.domain, self.symbols) == \\\n+            (other.dtype.ring, other.domain, other.symbols)\n \n     def to_sympy(self, a):\n         \"\"\"Convert `a` to a SymPy object. \"\"\"\ndiff --git a/sympy/polys/fields.py b/sympy/polys/fields.py\n--- a/sympy/polys/fields.py\n+++ b/sympy/polys/fields.py\n@@ -105,12 +105,13 @@ def __new__(cls, symbols, domain, order=lex):\n         domain = ring.domain\n         order = ring.order\n \n-        _hash = hash((cls.__name__, symbols, ngens, domain, order))\n-        obj = _field_cache.get(_hash)\n+        _hash_tuple = (cls.__name__, symbols, ngens, domain, order)\n+        obj = _field_cache.get(_hash_tuple)\n \n         if obj is None:\n             obj = object.__new__(cls)\n-            obj._hash = _hash\n+            obj._hash_tuple = _hash_tuple\n+            obj._hash = hash(_hash_tuple)\n             obj.ring = ring\n             obj.dtype = type(\"FracElement\", (FracElement,), {\"field\": obj})\n             obj.symbols = symbols\n@@ -130,7 +131,7 @@ def __new__(cls, symbols, domain, order=lex):\n                     if not hasattr(obj, name):\n                         setattr(obj, name, generator)\n \n-            _field_cache[_hash] = obj\n+            _field_cache[_hash_tuple] = obj\n \n         return obj\n \n@@ -145,10 +146,12 @@ def __hash__(self):\n         return self._hash\n \n     def __eq__(self, other):\n-        return self is other\n+        return isinstance(other, FracField) and \\\n+            (self.symbols, self.ngens, self.domain, self.order) == \\\n+            (other.symbols, other.ngens, other.domain, other.order)\n \n     def __ne__(self, other):\n-        return self is not other\n+        return not self.__eq__(other)\n \n     def raw_new(self, numer, denom=None):\n         return self.dtype(numer, denom)\n@@ -293,7 +296,7 @@ def as_expr(self, *symbols):\n         return self.numer.as_expr(*symbols)/self.denom.as_expr(*symbols)\n \n     def __eq__(f, g):\n-        if isinstance(g, f.field.dtype):\n+        if isinstance(g, FracElement) and f.field == g.field:\n             return f.numer == g.numer and f.denom == g.denom\n         else:\n             return f.numer == g and f.denom == f.field.ring.one\ndiff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -194,15 +194,16 @@ def __new__(cls, symbols, domain, order=lex):\n         domain = DomainOpt.preprocess(domain)\n         order = OrderOpt.preprocess(order)\n \n-        _hash = hash((cls.__name__, symbols, ngens, domain, order))\n-        obj = _ring_cache.get(_hash)\n+        _hash_tuple = (cls.__name__, symbols, ngens, domain, order)\n+        obj = _ring_cache.get(_hash_tuple)\n \n         if obj is None:\n             if domain.is_Composite and set(symbols) & set(domain.symbols):\n                 raise GeneratorsError(\"polynomial ring and it's ground domain share generators\")\n \n             obj = object.__new__(cls)\n-            obj._hash = _hash\n+            obj._hash_tuple = _hash_tuple\n+            obj._hash = hash(_hash_tuple)\n             obj.dtype = type(\"PolyElement\", (PolyElement,), {\"ring\": obj})\n             obj.symbols = symbols\n             obj.ngens = ngens\n@@ -248,7 +249,7 @@ def __new__(cls, symbols, domain, order=lex):\n                     if not hasattr(obj, name):\n                         setattr(obj, name, generator)\n \n-            _ring_cache[_hash] = obj\n+            _ring_cache[_hash_tuple] = obj\n \n         return obj\n \n@@ -280,10 +281,12 @@ def __hash__(self):\n         return self._hash\n \n     def __eq__(self, other):\n-        return self is other\n+        return isinstance(other, PolyRing) and \\\n+            (self.symbols, self.domain, self.ngens, self.order) == \\\n+            (other.symbols, other.domain, other.ngens, other.order)\n \n     def __ne__(self, other):\n-        return self is not other\n+        return not self.__eq__(other)\n \n     def clone(self, symbols=None, domain=None, order=None):\n         return self.__class__(symbols or self.symbols, domain or self.domain, order or self.order)\n@@ -654,7 +657,7 @@ def __eq__(p1, p2):\n         \"\"\"\n         if not p2:\n             return not p1\n-        elif isinstance(p2, p1.ring.dtype):\n+        elif isinstance(p2, PolyElement) and p2.ring == p1.ring:\n             return dict.__eq__(p1, p2)\n         elif len(p1) > 1:\n             return False\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -14,6 +14,7 @@\n from sympy.core.evaluate import global_evaluate\n from sympy.functions import (\n     gamma, exp, sqrt, log, exp_polar, piecewise_fold)\n+from sympy.core.sympify import _sympify\n from sympy.functions.elementary.exponential import ExpBase\n from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n from sympy.functions.elementary.integers import ceiling\n@@ -1156,7 +1157,8 @@ def nthroot(expr, n, max_len=4, prec=15):\n     return expr\n \n \n-def nsimplify(expr, constants=[], tolerance=None, full=False, rational=None):\n+def nsimplify(expr, constants=(), tolerance=None, full=False, rational=None,\n+    rational_conversion='base10'):\n     \"\"\"\n     Find a simple representation for a number or, if there are free symbols or\n     if rational=True, then replace Floats with their Rational equivalents. If\n@@ -1178,6 +1180,10 @@ def nsimplify(expr, constants=[], tolerance=None, full=False, rational=None):\n     (this is useful to find simpler numbers when the tolerance\n     is set low).\n \n+    When converting to rational, if rational_conversion='base10' (the default), then\n+    convert floats to rationals using their base-10 (string) representation.\n+    When rational_conversion='exact' it uses the exact, base-2 representation.\n+\n     Examples\n     ========\n \n@@ -1191,6 +1197,11 @@ def nsimplify(expr, constants=[], tolerance=None, full=False, rational=None):\n     >>> nsimplify(pi, tolerance=0.01)\n     22/7\n \n+    >>> nsimplify(0.333333333333333, rational=True, rational_conversion='exact')\n+    6004799503160655/18014398509481984\n+    >>> nsimplify(0.333333333333333, rational=True)\n+    1/3\n+\n     See Also\n     ========\n     sympy.core.function.nfloat\n@@ -1207,7 +1218,7 @@ def nsimplify(expr, constants=[], tolerance=None, full=False, rational=None):\n     if expr is S.Infinity or expr is S.NegativeInfinity:\n         return expr\n     if rational or expr.free_symbols:\n-        return _real_to_rational(expr, tolerance)\n+        return _real_to_rational(expr, tolerance, rational_conversion)\n \n     # SymPy's default tolerance for Rationals is 15; other numbers may have\n     # lower tolerances set, so use them to pick the largest tolerance if None\n@@ -1270,7 +1281,7 @@ def nsimplify_real(x):\n             im = nsimplify_real(im)\n     except ValueError:\n         if rational is None:\n-            return _real_to_rational(expr)\n+            return _real_to_rational(expr, rational_conversion=rational_conversion)\n         return expr\n \n     rv = re + im*S.ImaginaryUnit\n@@ -1278,49 +1289,66 @@ def nsimplify_real(x):\n     # return the value, else return the Rational representation\n     if rv != expr or rational is False:\n         return rv\n-    return _real_to_rational(expr)\n+    return _real_to_rational(expr, rational_conversion=rational_conversion)\n \n \n-def _real_to_rational(expr, tolerance=None):\n+def _real_to_rational(expr, tolerance=None, rational_conversion='base10'):\n     \"\"\"\n     Replace all reals in expr with rationals.\n \n-    >>> from sympy import nsimplify\n+    >>> from sympy import Rational\n+    >>> from sympy.simplify.simplify import _real_to_rational\n     >>> from sympy.abc import x\n \n-    >>> nsimplify(.76 + .1*x**.5, rational=True)\n+    >>> _real_to_rational(.76 + .1*x**.5)\n     sqrt(x)/10 + 19/25\n \n+    If rational_conversion='base10', this uses the base-10 string. If\n+    rational_conversion='exact', the exact, base-2 representation is used.\n+\n+    >>> _real_to_rational(0.333333333333333, rational_conversion='exact')\n+    6004799503160655/18014398509481984\n+    >>> _real_to_rational(0.333333333333333)\n+    1/3\n+\n     \"\"\"\n+    expr = _sympify(expr)\n     inf = Float('inf')\n     p = expr\n     reps = {}\n     reduce_num = None\n     if tolerance is not None and tolerance < 1:\n         reduce_num = ceiling(1/tolerance)\n-    for float in p.atoms(Float):\n-        key = float\n+    for fl in p.atoms(Float):\n+        key = fl\n         if reduce_num is not None:\n-            r = Rational(float).limit_denominator(reduce_num)\n+            r = Rational(fl).limit_denominator(reduce_num)\n         elif (tolerance is not None and tolerance >= 1 and\n-                float.is_Integer is False):\n-            r = Rational(tolerance*round(float/tolerance)\n+                fl.is_Integer is False):\n+            r = Rational(tolerance*round(fl/tolerance)\n                 ).limit_denominator(int(tolerance))\n         else:\n-            r = nsimplify(float, rational=False)\n+            if rational_conversion == 'exact':\n+                r = Rational(fl)\n+                reps[key] = r\n+                continue\n+            elif rational_conversion != 'base10':\n+                raise ValueError(\"rational_conversion must be 'base10' or 'exact'\")\n+\n+            r = nsimplify(fl, rational=False)\n             # e.g. log(3).n() -> log(3) instead of a Rational\n-            if float and not r:\n-                r = Rational(float)\n+            if fl and not r:\n+                r = Rational(fl)\n             elif not r.is_Rational:\n-                if float == inf or float == -inf:\n+                if fl == inf or fl == -inf:\n                     r = S.ComplexInfinity\n-                elif float < 0:\n-                    float = -float\n-                    d = Pow(10, int((mpmath.log(float)/mpmath.log(10))))\n-                    r = -Rational(str(float/d))*d\n-                elif float > 0:\n-                    d = Pow(10, int((mpmath.log(float)/mpmath.log(10))))\n-                    r = Rational(str(float/d))*d\n+                elif fl < 0:\n+                    fl = -fl\n+                    d = Pow(10, int((mpmath.log(fl)/mpmath.log(10))))\n+                    r = -Rational(str(fl/d))*d\n+                elif fl > 0:\n+                    d = Pow(10, int((mpmath.log(fl)/mpmath.log(10))))\n+                    r = Rational(str(fl/d))*d\n                 else:\n                     r = Integer(0)\n         reps[key] = r\n",
  "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -2,7 +2,7 @@\n from sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer,\n                    S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp,\n                    Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le,\n-                   AlgebraicNumber, simplify, sin, fibonacci)\n+                   AlgebraicNumber, simplify, sin, fibonacci, RealField)\n from sympy.core.compatibility import long\n from sympy.core.power import integer_nthroot, isqrt\n from sympy.core.logic import fuzzy_not\n@@ -546,6 +546,12 @@ def test_float_mpf():\n \n     assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n+def test_Float_RealElement():\n+    repi = RealField(dps=100)(pi.evalf(100))\n+    # We still have to pass the precision because Float doesn't know what\n+    # RealElement is, but make sure it keeps full precision from the result.\n+    assert Float(repi, 100) == pi.evalf(100)\n+\n def test_Float_default_to_highprec_from_str():\n     s = str(pi.evalf(128))\n     assert same_and_same_prec(Float(s), Float(s, ''))\ndiff --git a/sympy/polys/domains/tests/test_domains.py b/sympy/polys/domains/tests/test_domains.py\n--- a/sympy/polys/domains/tests/test_domains.py\n+++ b/sympy/polys/domains/tests/test_domains.py\n@@ -521,6 +521,8 @@ def test_Domain___eq__():\n     assert (ZZ.frac_field(x, y) == QQ.frac_field(x, y)) is False\n     assert (QQ.frac_field(x, y) == ZZ.frac_field(x, y)) is False\n \n+    assert RealField()[x] == RR[x]\n+\n \n def test_Domain__algebraic_field():\n     alg = ZZ.algebraic_field(sqrt(2))\ndiff --git a/sympy/polys/tests/test_constructor.py b/sympy/polys/tests/test_constructor.py\n--- a/sympy/polys/tests/test_constructor.py\n+++ b/sympy/polys/tests/test_constructor.py\n@@ -88,6 +88,11 @@ def test_construct_domain():\n     assert construct_domain([2/x, 3.5*y]) == \\\n         (dom, [dom.convert(2/x), dom.convert(3.5*y)])\n \n+    dom = RealField(prec=336)[x]\n+\n+    assert construct_domain([pi.evalf(100)*x]) == \\\n+        (dom, [dom.convert(pi.evalf(100)*x)])\n+\n     assert construct_domain(2) == (ZZ, ZZ(2))\n     assert construct_domain(S(2)/3) == (QQ, QQ(2, 3))\n \ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3202,3 +3202,8 @@ def test_factor_terms():\n def test_issue_11198():\n     assert factor_list(sqrt(2)*x) == (sqrt(2), [(x, 1)])\n     assert factor_list(sqrt(2)*sin(x), sin(x)) == (sqrt(2), [(sin(x), 1)])\n+\n+def test_Poly_precision():\n+    # Make sure Poly doesn't lose precision\n+    p = Poly(pi.evalf(100)*x)\n+    assert p.as_expr() == pi.evalf(100)*x\ndiff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -346,6 +346,10 @@ def test_nsimplify():\n         assert nsimplify(i) == ans\n         assert nsimplify(i + x) == x + ans\n \n+    assert nsimplify(0.33333333, rational=True, rational_conversion='exact') == Rational(0.33333333)\n+\n+    # Make sure nsimplify on expressions uses full precision\n+    assert nsimplify(pi.evalf(100)*x, rational_conversion='exact').evalf(100) == pi.evalf(100)*x\n \n def test_issue_9448():\n     tmp = sympify(\"1/(1 - (-1)**(2/3) - (-1)**(1/3)) + 1/(1 + (-1)**(2/3) + (-1)**(1/3))\")\n",
  "problem_statement": "Poly doesn't use correct precision unless mpmath.mp.dps is set\n```\r\nIn [574]: mpmath.mp.dps\r\nOut[574]: 15\r\n\r\nIn [575]: Poly(pi.evalf(1000)*x)\r\nOut[575]: Poly(3.141592653589793115997963468544185161590576171875*x, x, domain='RR')\r\n\r\nIn [576]: mpmath.mp.dps = 1000\r\n\r\nIn [577]: Poly(pi.evalf(1000)*x)\r\nOut[577]:\r\nPoly(3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812\r\n848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458\r\n700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996\r\n274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356\r\n082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297\r\n804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286\r\n3882353787593751957781857780532171226806613001927876611195909216420198*x, x, domain='RR')\r\n```\r\n\r\nEven trying to create a custom domain doesn't work\r\n\r\n\r\n```\r\nIn [578]: mpmath.mp.dps = 15\r\n\r\nIn [579]: Poly(pi.evalf(1000)*x, domain=RealField(prec=1000))\r\nOut[579]: Poly(3.141592653589793115997963468544185161590576171875*x, x, domain='RR')\r\n```\r\n\r\nOddly, the default precision is 53, suggesting that the code is confusing base 10 precision and base 2 precision (the default `mpmath` and `Float` precision is 53 base-2 digits corresponding to 15 base-10 digits). This is not surprising. `mpmath` calls base-10 precision `dps` and base-2 precision `prec`, whereas `Float` calls base-10 precision `prec` and base-2 precision `_prec`, so it's easy to see how they could get mixed up.\r\n \r\nThis was mentioned at https://github.com/sympy/sympy/issues/12003, and it may be be related to the problems I was having at https://github.com/sympy/sympy/issues/11795. \r\n\n",
  "hints_text": "It looks like `Float.__new__` is the culprit. There is even a comment. After including the precision\r\n```\r\ndiff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\r\nindex 09501fa..ddbf562 100644\r\n--- a/sympy/core/numbers.py\r\n+++ b/sympy/core/numbers.py\r\n@@ -851,7 +851,7 @@ def __new__(cls, num, prec=None):\r\n                 _mpf_ = mpf_norm(_mpf_, prec)\r\n         else:\r\n             # XXX: We lose precision here.\r\n-            _mpf_ = mpmath.mpf(num)._mpf_\r\n+            _mpf_ = mpmath.mpf(num, prec=prec)._mpf_\r\n \r\n         # special cases\r\n         if _mpf_ == _mpf_zero:\r\n```\r\nI get\r\n```\r\nIn [1]: Poly(pi.evalf(1000)*x, domain=RealField(prec=1000))\r\nOut[1]: \r\nPoly(3.14159265358979323846264338327950288419716939937510582097494459230781640\r\n628620899862803482534211706798214808651328230664709384460955058223172535940812\r\n848111745028410270193852110555964462294895493038196442881097566593344612847564\r\n823378678316527120190914564856692346034861045432664821339360726024914127*x, x,\r\n domain='RR')\r\n```\r\nTo get the full precision the keyword `dps` should be used:\r\n```\r\nIn [3]: Poly(pi.evalf(1000)*x, domain=RealField(dps=1000))\r\nOut[3]: \r\nPoly(3.14159265358979323846264338327950288419716939937510582097494459230781640\r\n628620899862803482534211706798214808651328230664709384460955058223172535940812\r\n848111745028410270193852110555964462294895493038196442881097566593344612847564\r\n823378678316527120190914564856692346034861045432664821339360726024914127372458\r\n700660631558817488152092096282925409171536436789259036001133053054882046652138\r\n414695194151160943305727036575959195309218611738193261179310511854807446237996\r\n274956735188575272489122793818301194912983367336244065664308602139494639522473\r\n719070217986094370277053921717629317675238467481846766940513200056812714526356\r\n082778577134275778960917363717872146844090122495343014654958537105079227968925\r\n892354201995611212902196086403441815981362977477130996051870721134999999837297\r\n804995105973173281609631859502445945534690830264252230825334468503526193118817\r\n101000313783875288658753320838142061717766914730359825349042875546873115956286\r\n3882353787593751957781857780532171226806613001927876611195909216420198*x, x, d\r\nomain='RR')\r\n```\nThe comment was added by me at 8a7e07992. This was the case where I couldn't figure out how the `else` clause would actually be hit at https://github.com/sympy/sympy/pull/11862. I guess the unknown type in this case is the polys `RealElement`? \n> I guess the unknown type in this case is the polys RealElement?\r\n\r\nYes, that is the type in `RealField`.\nYour fix looks good. We should really unify our conventions and rename the `prec` argument to `Float` to `dps`. \n`mps` can use both `prec` and `dps` taking the latter if it is given. Internally it will use `prec`.\r\n```\r\n        if kwargs:\r\n            prec = kwargs.get('prec', prec)\r\n            if 'dps' in kwargs:\r\n                prec = dps_to_prec(kwargs['dps'])\r\n```\r\nSo `dps=dps` could also be used. I'm not sure which keyword should be preferred in `Float`?\r\n\r\nTo clarify: Maybe the fix should rather be `mpmath.mpf(num, dps=dps)._mpf_`?\nI mean we should change it from `Float.__new__(num, prec=None)` to `Float.__new__(num, dps=None, prec='deprecated')`, to unify the terminology (and also to make the code of `Float.__new__` easier to read, since it changes the meaning of `prec` midway through). I can make a PR tomorrow. \nThat is what I thought, too. My comment about the keywords in `mpmath.mpf` was probably a little confusing.\nI think your original fix is right. Float already converts the precision to binary precision earlier in the code and uses that everywhere. \nI am working on a PR for this fix. It also fixes things like `nsimplify(pi.evalf(100)*x)` (although I'm caught on https://github.com/sympy/sympy/issues/12045 for writing a test). ",
  "created_at": "2017-01-24T05:04:57Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_Float_RealElement\"]",
  "PASS_TO_PASS": "[\"test_integers_cache\", \"test_seterr\", \"test_mod\", \"test_divmod\", \"test_igcd\", \"test_igcd_lehmer\", \"test_igcd2\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Rational_cmp\", \"test_Float\", \"test_float_mpf\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_Infinity\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_Infinity_inequations\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_isqrt\", \"test_powers_Float\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_long\", \"test_real_bug\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Float_eq\", \"test_int_NumberSymbols\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_Float_idempotence\", \"test_comp\", \"test_issue_9491\", \"test_issue_10063\", \"test_issue_10020\", \"test_invert_numbers\", \"test_composite_option\", \"test_precision\", \"test_Poly_from_dict\", \"test_Poly_from_list\", \"test_Poly_from_poly\", \"test_Poly_from_expr\", \"test_Poly__new__\", \"test_Poly__args\", \"test_Poly__gens\", \"test_Poly_zero\", \"test_Poly_one\", \"test_Poly__unify\", \"test_Poly_free_symbols\", \"test_PurePoly_free_symbols\", \"test_Poly__eq__\", \"test_PurePoly__eq__\", \"test_PurePoly_Poly\", \"test_Poly_get_domain\", \"test_Poly_set_domain\", \"test_Poly_get_modulus\", \"test_Poly_set_modulus\", \"test_Poly_add_ground\", \"test_Poly_sub_ground\", \"test_Poly_mul_ground\", \"test_Poly_quo_ground\", \"test_Poly_exquo_ground\", \"test_Poly_abs\", \"test_Poly_neg\", \"test_Poly_add\", \"test_Poly_sub\", \"test_Poly_mul\", \"test_Poly_sqr\", \"test_Poly_pow\", \"test_Poly_divmod\", \"test_Poly_eq_ne\", \"test_Poly_nonzero\", \"test_Poly_properties\", \"test_Poly_is_irreducible\", \"test_Poly_subs\", \"test_Poly_replace\", \"test_Poly_reorder\", \"test_Poly_ltrim\", \"test_Poly_has_only_gens\", \"test_Poly_to_ring\", \"test_Poly_to_field\", \"test_Poly_to_exact\", \"test_Poly_retract\", \"test_Poly_slice\", \"test_Poly_coeffs\", \"test_Poly_monoms\", \"test_Poly_terms\", \"test_Poly_all_coeffs\", \"test_Poly_all_monoms\", \"test_Poly_all_terms\", \"test_Poly_termwise\", \"test_Poly_length\", \"test_Poly_as_dict\", \"test_Poly_as_expr\", \"test_Poly_lift\", \"test_Poly_deflate\", \"test_Poly_inject\", \"test_Poly_eject\", \"test_Poly_exclude\", \"test_Poly__gen_to_level\", \"test_Poly_degree\", \"test_Poly_degree_list\", \"test_Poly_total_degree\", \"test_Poly_homogenize\", \"test_Poly_homogeneous_order\", \"test_Poly_LC\", \"test_Poly_TC\", \"test_Poly_EC\", \"test_Poly_coeff\", \"test_Poly_nth\", \"test_Poly_LM\", \"test_Poly_LM_custom_order\", \"test_Poly_EM\", \"test_Poly_LT\", \"test_Poly_ET\", \"test_Poly_max_norm\", \"test_Poly_l1_norm\", \"test_Poly_clear_denoms\", \"test_Poly_rat_clear_denoms\", \"test_Poly_integrate\", \"test_Poly_diff\", \"test_issue_9585\", \"test_Poly_eval\", \"test_Poly___call__\", \"test_parallel_poly_from_expr\", \"test_pdiv\", \"test_div\", \"test_gcdex\", \"test_revert\", \"test_subresultants\", \"test_resultant\", \"test_discriminant\", \"test_dispersion\", \"test_gcd_list\", \"test_lcm_list\", \"test_gcd\", \"test_gcd_numbers_vs_polys\", \"test_terms_gcd\", \"test_trunc\", \"test_monic\", \"test_content\", \"test_primitive\", \"test_compose\", \"test_shift\", \"test_transform\", \"test_gff\", \"test_sqf_norm\", \"test_sqf\", \"test_factor_large\", \"test_intervals\", \"test_refine_root\", \"test_count_roots\", \"test_Poly_root\", \"test_real_roots\", \"test_all_roots\", \"test_nroots\", \"test_ground_roots\", \"test_nth_power_roots_poly\", \"test_reduced\", \"test_groebner\", \"test_fglm\", \"test_is_zero_dimensional\", \"test_GroebnerBasis\", \"test_poly\", \"test_keep_coeff\", \"test_noncommutative\", \"test_to_rational_coeffs\", \"test_factor_terms\", \"test_issue_11198\", \"test_issue_3557\", \"test_simplify_complex\", \"test_simplify_measure\", \"test_simplify_fail1\", \"test_hypersimp\", \"test_extract_minus_sign\", \"test_diff\", \"test_logcombine_complex_coeff\", \"test_posify\", \"test_issue_4194\", \"test_signsimp\", \"test_Piecewise\", \"test_polymorphism\", \"test_issue_6811\", \"test_issue_6920\", \"test_inequality_no_auto_simplify\", \"test_issue_9398\", \"test_issue_9324_simplify\", \"test_simplify_function_inverse\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.074925",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}