{
  "repo": "django/django",
  "instance_id": "django__django-11612",
  "base_commit": "a5652eb795e896df0c0f2515201f35f9cd86b99b",
  "patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -2,6 +2,7 @@\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n from django.db.backends.ddl_references import IndexColumns\n+from django.db.backends.utils import strip_quotes\n \n \n class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n@@ -67,9 +68,9 @@ def _alter_column_type_sql(self, model, old_field, new_field, new_type):\n         if self._field_data_type(old_field) != self._field_data_type(new_field):\n             self.sql_alter_column_type += ' USING %(column)s::%(type)s'\n         # Make ALTER TYPE with SERIAL make sense.\n-        table = model._meta.db_table\n+        table = strip_quotes(model._meta.db_table)\n         if new_type.lower() in (\"serial\", \"bigserial\"):\n-            column = new_field.column\n+            column = strip_quotes(new_field.column)\n             sequence_name = \"%s_%s_seq\" % (table, column)\n             col_type = \"integer\" if new_type.lower() == \"serial\" else \"bigint\"\n             return (\ndiff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -4,6 +4,7 @@\n from django.apps.registry import Apps\n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n from django.db.backends.ddl_references import Statement\n+from django.db.backends.utils import strip_quotes\n from django.db.models import UniqueConstraint\n from django.db.transaction import atomic\n from django.db.utils import NotSupportedError\n@@ -263,7 +264,7 @@ def is_self_referential(f):\n         body_copy = copy.deepcopy(body)\n         meta_contents = {\n             'app_label': model._meta.app_label,\n-            'db_table': 'new__%s' % model._meta.db_table,\n+            'db_table': 'new__%s' % strip_quotes(model._meta.db_table),\n             'unique_together': unique_together,\n             'index_together': index_together,\n             'indexes': indexes,\n",
  "test_patch": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -636,6 +636,26 @@ def test_alter_auto_field_to_char_field(self):\n         with connection.schema_editor() as editor:\n             editor.alter_field(Author, old_field, new_field, strict=True)\n \n+    @isolate_apps('schema')\n+    def test_alter_auto_field_quoted_db_column(self):\n+        class Foo(Model):\n+            id = AutoField(primary_key=True, db_column='\"quoted_id\"')\n+\n+            class Meta:\n+                app_label = 'schema'\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Foo)\n+        self.isolated_local_models = [Foo]\n+        old_field = Foo._meta.get_field('id')\n+        new_field = BigAutoField(primary_key=True)\n+        new_field.model = Foo\n+        new_field.db_column = '\"quoted_id\"'\n+        new_field.set_attributes_from_name('id')\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Foo, old_field, new_field, strict=True)\n+        Foo.objects.create()\n+\n     def test_alter_not_unique_field_to_primary_key(self):\n         # Create the table.\n         with connection.schema_editor() as editor:\n@@ -649,6 +669,24 @@ def test_alter_not_unique_field_to_primary_key(self):\n             editor.remove_field(Author, Author._meta.get_field('id'))\n             editor.alter_field(Author, old_field, new_field, strict=True)\n \n+    @isolate_apps('schema')\n+    def test_alter_primary_key_quoted_db_table(self):\n+        class Foo(Model):\n+            class Meta:\n+                app_label = 'schema'\n+                db_table = '\"foo\"'\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Foo)\n+        self.isolated_local_models = [Foo]\n+        old_field = Foo._meta.get_field('id')\n+        new_field = BigAutoField(primary_key=True)\n+        new_field.model = Foo\n+        new_field.set_attributes_from_name('id')\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Foo, old_field, new_field, strict=True)\n+        Foo.objects.create()\n+\n     def test_alter_text_field(self):\n         # Regression for \"BLOB/TEXT column 'info' can't have a default value\")\n         # on MySQL.\n",
  "problem_statement": "SQLite3 migrations can fail when used quoted db_table.\nDescription\n\t \n\t\t(last modified by Maciej Olko)\n\t \nIf model's Meta db_table is quoted, e.g. '\"table_with_quoted_name\"', SQLite3 migration with this table creation with can fail with django.db.utils.OperationalError: near \"table_with_quoted_name\": syntax error.\nI suppose following generated query causes the error:\nCREATE TABLE \"new__\"table_with_quoted_name\"\" (\"obj_id\" integer NOT NULL PRIMARY KEY, \"obj_num\" varchar(20) NULL, \"country_id\" integer NOT NULL REFERENCES \"countries\" (\"country_id\") DEFERRABLE INITIALLY DEFERRED)\nTo reproduce table with quoted name should have at least one foreign key.\nDjango documentation says it supports quoted names (​https://docs.djangoproject.com/en/2.2/ref/databases/#naming-issues).\nQuoted names can also be used with Django’s other supported database backends; except for Oracle, however, the quotes have no effect.\nTraceback:\nTraceback (most recent call last):\n File \"…/django/db/backends/utils.py\", line 82, in _execute\n\treturn self.cursor.execute(sql)\n File \"…/django/db/backends/sqlite3/base.py\", line 382, in execute\n\treturn Database.Cursor.execute(self, query)\nsqlite3.OperationalError: near \"table_with_quoted_name\": syntax error\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"./manage.py\", line 15, in <module>\n\texecute_from_command_line(sys.argv)\n …\n File \"…/django/core/management/commands/migrate.py\", line 234, in handle\n\tfake_initial=fake_initial,\n File \"…/django/db/migrations/executor.py\", line 117, in migrate\n\tstate = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)\n File \"…/django/db/migrations/executor.py\", line 147, in _migrate_all_forwards\n\tstate = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)\n File \"…/django/db/migrations/executor.py\", line 245, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n File \"…/django/db/migrations/migration.py\", line 124, in apply\n\toperation.database_forwards(self.app_label, schema_editor, old_state, project_state)\n File \"…/django/db/migrations/operations/fields.py\", line 112, in database_forwards\n\tfield,\n File \"…/django/db/backends/sqlite3/schema.py\", line 327, in add_field\n\tself._remake_table(model, create_field=field)\n File \"…/django/db/backends/sqlite3/schema.py\", line 279, in _remake_table\n\tself.create_model(new_model)\n File \"…/django/db/backends/base/schema.py\", line 307, in create_model\n\tself.execute(sql, params or None)\n File \"…/django/db/backends/base/schema.py\", line 137, in execute\n\tcursor.execute(sql, params)\n File \"…/django/db/backends/utils.py\", line 99, in execute\n\treturn super().execute(sql, params)\n File \"…/django/db/backends/utils.py\", line 67, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \"…/django/db/backends/utils.py\", line 76, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"…/django/db/backends/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"…/django/db/utils.py\", line 89, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"…/django/db/backends/utils.py\", line 82, in _execute\n\treturn self.cursor.execute(sql)\n File \"…/django/db/backends/sqlite3/base.py\", line 382, in execute\n\treturn Database.Cursor.execute(self, query)\ndjango.db.utils.OperationalError: near \"table_with_quoted_name\": syntax error\n",
  "hints_text": "Thanks for the report. I was able to reproduce this issue with AddField() when adding a new ForeignKey but probably few more operations are affected because ​_remake_table() is used widely in the SQLite backend. This should be easy to fix by unquoting ​db_table. Reproduced at 4122d9d3f1983eea612f236e941d937bd8589a0d.\nCreated ​PR, but I am not sure why docs and isort failing.\nPatch is targeting model names containing quotes while the changes should live in _remake_table as pointed out by Mariusz. @Ngalim you'll want to change ​this line to perform .strip('\"') to strip possibly leading and trailing \".",
  "created_at": "2019-07-31T00:24:16Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_alter_primary_key_quoted_db_table (schema.tests.SchemaTests)\"]",
  "PASS_TO_PASS": "[\"test_add_datefield_and_datetimefield_use_effective_default (schema.tests.SchemaTests)\", \"test_add_field (schema.tests.SchemaTests)\", \"test_add_field_binary (schema.tests.SchemaTests)\", \"test_add_field_default_dropped (schema.tests.SchemaTests)\", \"test_add_field_default_transform (schema.tests.SchemaTests)\", \"test_add_field_remove_field (schema.tests.SchemaTests)\", \"test_add_field_temp_default (schema.tests.SchemaTests)\", \"test_add_field_temp_default_boolean (schema.tests.SchemaTests)\", \"test_add_field_use_effective_default (schema.tests.SchemaTests)\", \"test_add_foreign_key_long_names (schema.tests.SchemaTests)\", \"test_add_foreign_key_quoted_db_table (schema.tests.SchemaTests)\", \"test_add_foreign_object (schema.tests.SchemaTests)\", \"test_add_remove_index (schema.tests.SchemaTests)\", \"test_add_textfield_unhashable_default (schema.tests.SchemaTests)\", \"test_alter (schema.tests.SchemaTests)\", \"test_alter_auto_field_quoted_db_column (schema.tests.SchemaTests)\", \"test_alter_auto_field_to_char_field (schema.tests.SchemaTests)\", \"test_alter_auto_field_to_integer_field (schema.tests.SchemaTests)\", \"test_alter_autofield_pk_to_bigautofield_pk_sequence_owner (schema.tests.SchemaTests)\", \"test_alter_charfield_to_null (schema.tests.SchemaTests)\", \"test_alter_db_table_case (schema.tests.SchemaTests)\", \"test_alter_field_add_index_to_integerfield (schema.tests.SchemaTests)\", \"test_alter_field_default_dropped (schema.tests.SchemaTests)\", \"test_alter_field_fk_keeps_index (schema.tests.SchemaTests)\", \"test_alter_field_fk_to_o2o (schema.tests.SchemaTests)\", \"test_alter_field_o2o_keeps_unique (schema.tests.SchemaTests)\", \"test_alter_field_o2o_to_fk (schema.tests.SchemaTests)\", \"test_alter_fk (schema.tests.SchemaTests)\", \"test_alter_fk_checks_deferred_constraints (schema.tests.SchemaTests)\", \"test_alter_fk_to_o2o (schema.tests.SchemaTests)\", \"test_alter_implicit_id_to_explicit (schema.tests.SchemaTests)\", \"test_alter_int_pk_to_autofield_pk (schema.tests.SchemaTests)\", \"test_alter_int_pk_to_bigautofield_pk (schema.tests.SchemaTests)\", \"test_alter_int_pk_to_int_unique (schema.tests.SchemaTests)\", \"test_alter_not_unique_field_to_primary_key (schema.tests.SchemaTests)\", \"test_alter_null_to_not_null (schema.tests.SchemaTests)\", \"test_alter_numeric_field_keep_null_status (schema.tests.SchemaTests)\", \"test_alter_o2o_to_fk (schema.tests.SchemaTests)\", \"test_alter_pk_with_self_referential_field (schema.tests.SchemaTests)\", \"test_alter_text_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_date_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_datetime_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_time_field (schema.tests.SchemaTests)\", \"test_alter_textfield_to_null (schema.tests.SchemaTests)\", \"test_alter_textual_field_keep_null_status (schema.tests.SchemaTests)\", \"test_alter_to_fk (schema.tests.SchemaTests)\", \"test_char_field_with_db_index_to_fk (schema.tests.SchemaTests)\", \"test_check_constraints (schema.tests.SchemaTests)\", \"test_context_manager_exit (schema.tests.SchemaTests)\", \"test_create_index_together (schema.tests.SchemaTests)\", \"test_creation_deletion (schema.tests.SchemaTests)\", \"test_creation_deletion_reserved_names (schema.tests.SchemaTests)\", \"test_db_table (schema.tests.SchemaTests)\", \"Creating tables out of FK order, then repointing, works\", \"The db_constraint parameter is respected\", \"Creating a FK to a proxy model creates database constraints.\", \"test_foreign_key_index_long_names_regression (schema.tests.SchemaTests)\", \"test_index_together (schema.tests.SchemaTests)\", \"test_index_together_with_fk (schema.tests.SchemaTests)\", \"test_indexes (schema.tests.SchemaTests)\", \"test_m2m (schema.tests.SchemaTests)\", \"test_m2m_create (schema.tests.SchemaTests)\", \"test_m2m_create_custom (schema.tests.SchemaTests)\", \"test_m2m_create_inherited (schema.tests.SchemaTests)\", \"test_m2m_create_through (schema.tests.SchemaTests)\", \"test_m2m_create_through_custom (schema.tests.SchemaTests)\", \"test_m2m_create_through_inherited (schema.tests.SchemaTests)\", \"test_m2m_custom (schema.tests.SchemaTests)\", \"test_m2m_db_constraint (schema.tests.SchemaTests)\", \"test_m2m_db_constraint_custom (schema.tests.SchemaTests)\", \"test_m2m_db_constraint_inherited (schema.tests.SchemaTests)\", \"test_m2m_inherited (schema.tests.SchemaTests)\", \"test_m2m_rename_field_in_target_model (schema.tests.SchemaTests)\", \"test_m2m_repoint (schema.tests.SchemaTests)\", \"test_m2m_repoint_custom (schema.tests.SchemaTests)\", \"test_m2m_repoint_inherited (schema.tests.SchemaTests)\", \"test_m2m_through_alter (schema.tests.SchemaTests)\", \"test_m2m_through_alter_custom (schema.tests.SchemaTests)\", \"test_m2m_through_alter_inherited (schema.tests.SchemaTests)\", \"test_namespaced_db_table_create_index_name (schema.tests.SchemaTests)\", \"test_no_db_constraint_added_during_primary_key_change (schema.tests.SchemaTests)\", \"test_order_index (schema.tests.SchemaTests)\", \"test_primary_key (schema.tests.SchemaTests)\", \"test_referenced_field_without_constraint_rename_inside_atomic_block (schema.tests.SchemaTests)\", \"test_referenced_table_without_constraint_rename_inside_atomic_block (schema.tests.SchemaTests)\", \"test_remove_constraints_capital_letters (schema.tests.SchemaTests)\", \"test_remove_db_index_doesnt_remove_custom_indexes (schema.tests.SchemaTests)\", \"test_remove_field_check_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_remove_field_unique_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_remove_index_together_does_not_remove_meta_indexes (schema.tests.SchemaTests)\", \"test_remove_unique_together_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_rename (schema.tests.SchemaTests)\", \"test_rename_keep_null_status (schema.tests.SchemaTests)\", \"test_rename_referenced_field (schema.tests.SchemaTests)\", \"test_rename_table_renames_deferred_sql_references (schema.tests.SchemaTests)\", \"test_text_field_with_db_index (schema.tests.SchemaTests)\", \"test_text_field_with_db_index_to_fk (schema.tests.SchemaTests)\", \"test_unique (schema.tests.SchemaTests)\", \"test_unique_name_quoting (schema.tests.SchemaTests)\", \"test_unique_together (schema.tests.SchemaTests)\", \"test_unique_together_with_fk (schema.tests.SchemaTests)\", \"test_unique_together_with_fk_with_existing_index (schema.tests.SchemaTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.578576",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}