{
  "repo": "django/django",
  "instance_id": "django__django-12458",
  "base_commit": "590957a0eb9a87a6f2bd3463226b0a7f1405d817",
  "patch": "diff --git a/django/core/management/commands/dumpdata.py b/django/core/management/commands/dumpdata.py\n--- a/django/core/management/commands/dumpdata.py\n+++ b/django/core/management/commands/dumpdata.py\n@@ -144,7 +144,17 @@ def get_objects(count_only=False):\n             Collate the objects to be serialized. If count_only is True, just\n             count the number of objects to be serialized.\n             \"\"\"\n-            models = serializers.sort_dependencies(app_list.items())\n+            if use_natural_foreign_keys:\n+                models = serializers.sort_dependencies(app_list.items(), allow_cycles=True)\n+            else:\n+                # There is no need to sort dependencies when natural foreign\n+                # keys are not used.\n+                models = []\n+                for (app_config, model_list) in app_list.items():\n+                    if model_list is None:\n+                        models.extend(app_config.get_models())\n+                    else:\n+                        models.extend(model_list)\n             for model in models:\n                 if model in excluded_models:\n                     continue\ndiff --git a/django/core/serializers/__init__.py b/django/core/serializers/__init__.py\n--- a/django/core/serializers/__init__.py\n+++ b/django/core/serializers/__init__.py\n@@ -156,12 +156,15 @@ def _load_serializers():\n     _serializers = serializers\n \n \n-def sort_dependencies(app_list):\n+def sort_dependencies(app_list, allow_cycles=False):\n     \"\"\"Sort a list of (app_config, models) pairs into a single list of models.\n \n     The single list of models is sorted so that any model with a natural key\n     is serialized before a normal model, and any model with a natural key\n     dependency has it's dependencies serialized first.\n+\n+    If allow_cycles is True, return the best-effort ordering that will respect\n+    most of dependencies but ignore some of them to break the cycles.\n     \"\"\"\n     # Process the list of models, and get the list of dependencies\n     model_dependencies = []\n@@ -222,13 +225,20 @@ def sort_dependencies(app_list):\n             else:\n                 skipped.append((model, deps))\n         if not changed:\n-            raise RuntimeError(\n-                \"Can't resolve dependencies for %s in serialized app list.\" %\n-                ', '.join(\n-                    model._meta.label\n-                    for model, deps in sorted(skipped, key=lambda obj: obj[0].__name__)\n+            if allow_cycles:\n+                # If cycles are allowed, add the last skipped model and ignore\n+                # its dependencies. This could be improved by some graph\n+                # analysis to ignore as few dependencies as possible.\n+                model, _ = skipped.pop()\n+                model_list.append(model)\n+            else:\n+                raise RuntimeError(\n+                    \"Can't resolve dependencies for %s in serialized app list.\"\n+                    % ', '.join(\n+                        model._meta.label\n+                        for model, deps in sorted(skipped, key=lambda obj: obj[0].__name__)\n+                    ),\n                 )\n-            )\n         model_dependencies = skipped\n \n     return model_list\n",
  "test_patch": "diff --git a/tests/fixtures/fixtures/circular_reference_natural_key.json b/tests/fixtures/fixtures/circular_reference_natural_key.json\nnew file mode 100644\n--- /dev/null\n+++ b/tests/fixtures/fixtures/circular_reference_natural_key.json\n@@ -0,0 +1,16 @@\n+[\n+  {\n+    \"model\": \"fixtures.circulara\",\n+    \"fields\": {\n+      \"key\": \"x\",\n+      \"obj\": [\"y\"]\n+    }\n+  },\n+  {\n+    \"model\": \"fixtures.circularb\",\n+    \"fields\": {\n+      \"key\": \"y\",\n+      \"obj\": [\"x\"]\n+    }\n+  }\n+]\ndiff --git a/tests/fixtures/models.py b/tests/fixtures/models.py\n--- a/tests/fixtures/models.py\n+++ b/tests/fixtures/models.py\n@@ -118,16 +118,17 @@ class PrimaryKeyUUIDModel(models.Model):\n     id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n \n+class NaturalKeyManager(models.Manager):\n+    def get_by_natural_key(self, key):\n+        return self.get(key=key)\n+\n+\n class NaturalKeyThing(models.Model):\n     key = models.CharField(max_length=100, unique=True)\n     other_thing = models.ForeignKey('NaturalKeyThing', on_delete=models.CASCADE, null=True)\n     other_things = models.ManyToManyField('NaturalKeyThing', related_name='thing_m2m_set')\n \n-    class Manager(models.Manager):\n-        def get_by_natural_key(self, key):\n-            return self.get(key=key)\n-\n-    objects = Manager()\n+    objects = NaturalKeyManager()\n \n     def natural_key(self):\n         return (self.key,)\n@@ -140,7 +141,17 @@ class CircularA(models.Model):\n     key = models.CharField(max_length=3, unique=True)\n     obj = models.ForeignKey('CircularB', models.SET_NULL, null=True)\n \n+    objects = NaturalKeyManager()\n+\n+    def natural_key(self):\n+        return (self.key,)\n+\n \n class CircularB(models.Model):\n     key = models.CharField(max_length=3, unique=True)\n     obj = models.ForeignKey('CircularA', models.SET_NULL, null=True)\n+\n+    objects = NaturalKeyManager()\n+\n+    def natural_key(self):\n+        return (self.key,)\ndiff --git a/tests/fixtures/tests.py b/tests/fixtures/tests.py\n--- a/tests/fixtures/tests.py\n+++ b/tests/fixtures/tests.py\n@@ -880,3 +880,23 @@ def test_circular_reference(self):\n             '{\"model\": \"fixtures.circularb\", \"pk\": 1, '\n             '\"fields\": {\"key\": \"y\", \"obj\": 1}}]',\n         )\n+\n+    def test_circular_reference_natural_key(self):\n+        management.call_command(\n+            'loaddata',\n+            'circular_reference_natural_key.json',\n+            verbosity=0,\n+        )\n+        obj_a = CircularA.objects.get()\n+        obj_b = CircularB.objects.get()\n+        self.assertEqual(obj_a.obj, obj_b)\n+        self.assertEqual(obj_b.obj, obj_a)\n+        self._dumpdata_assert(\n+            ['fixtures'],\n+            '[{\"model\": \"fixtures.circulara\", '\n+            '\"fields\": {\"key\": \"x\", \"obj\": [\"y\"]}}, '\n+            '{\"model\": \"fixtures.circularb\", '\n+            '\"fields\": {\"key\": \"y\", \"obj\": [\"x\"]}}]',\n+            natural_primary_keys=True,\n+            natural_foreign_keys=True,\n+        )\n",
  "problem_statement": "Serialization dependency sorting disallows circular references unneccesarily.\nDescription\n\t\nThe core.serialization.sort_dependencies() function takes a list of apps and/or models, and resolves this into a sorted flat list of models, ready to be serialized in that order. This function is intended to make natural foreign keys work, by serializing models referenced by a natural key before the referencing models. When deserializing, this guarantees that natural key references can be resolved, because there are no \"forward references\". Furthermore, when a circular reference using natural keys is present, this function raises an exception (e.g. \"Can't resolve dependencies for some_app.SomeModel in serialized app list\") and prevents serialization from completing, since there is no way to guarantee a model ordering that will have no forward references.\nNote that this ordering is *only* needed when natural keys are involved, since data is intended to be loaded in a transaction without constraint checks, so numerical foreign keys can be added in the wrong order, as long as all referenced data is present at the end of the transaction. This does not work with natural keys, since those are resolved by Python code that needs the referenced objects present in the database to resolve them.\nHowever, this sorting is not actually strictly necessary in all cases where it is applied. When circular references are involved, this then actually prevents serialization for no good reason. In particular, this is the case:\nWhen running dumpdata without natural keys enabled (which is the default). Even though natural keys might be defined in the models (which causes the sorting and exception), no natural keys will be present in the dumped data, so no ordering is needed.\nWhen dumping data intended for loading with loaddata (which I think is the primary usecase for dumpdata?). loaddata will (since 17 months ago in v2.2, see #26291) automatically handle forward references by deferring setting fields that reference natural keys that are not added yet. In this case, sorting is still useful, to prevent forward references where possible, but when there are circular references, it is acceptable to ignore some dependencies rather than preventing serialization from happening alltogether.\nWhen serializing data for tests for serialized_rollback=True (in django.db.backends.base.creation.create_test_db). This is a serialization that does not use natural keys, so no ordering is needed at all. Note that this serialization happens always (unlike deserialization only happens with serialized_rollback=True), so AFAIU this effectively prevents *any* tests from working on a database with circular references with natural keys defined.\nThe fix for these issues seems to be rather simple:\nFor dumpdata without use_natural_foreign_keys, skip the ordering and just serialize all models in arbitrary order. AFAICS use_natural_primary_keys is not relevant here, since that only controls omitting the numerical primary key.\nFor dumpdata *with* use_natural_foreign_keys, do the ordering but do not bail out when there are circular references (instead just ignore some dependencies and produce a best-effort ordering).\nFor test database serialization, also skip the ordering and serialize in arbitrary order.\nNote that this would remove two of the three calls to sort_dependencies() and allow loops in the last remaining instance. This means that sort_dependencies could be modified to allow loops unconditionally, or we could add an argument and default to disallowing loops in case any code outside of django is using this function?\nNote that #26552 is a related, but different issue, concerning the *deserialization* of data in testcases.\nI've been working on fixing this and that related issue today and have a basic version working, with testcases (which proved to be quite a challenge, since testing the test subsystem is a bit tricky...). I'll do some additional testing and cleanup and submit a PR soon.\nAlso note that the circular-reference exception was already disabled for self-referencing models in #16317. The fix for that issue simply ignores self-referencing models for sorting, without taking any additional measures to sort instances to prevent problems in deserialization (this code was added when the deferred deserialization did not exist yet), so I wonder how much value this exception still has.\n",
  "hints_text": "",
  "created_at": "2020-02-14T17:31:01Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_circular_reference (fixtures.tests.CircularReferenceTests)\", \"test_circular_reference_natural_key (fixtures.tests.CircularReferenceTests)\", \"test_format_discovery (fixtures.tests.FixtureTransactionTests)\", \"test_forward_reference_fk (fixtures.tests.ForwardReferenceTests)\", \"test_forward_reference_fk_natural_key (fixtures.tests.ForwardReferenceTests)\", \"test_forward_reference_m2m (fixtures.tests.ForwardReferenceTests)\", \"test_forward_reference_m2m_natural_key (fixtures.tests.ForwardReferenceTests)\", \"test_dumpdata_progressbar (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_excludes (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_file_output (fixtures.tests.FixtureLoadingTests)\", \"test_loading_and_dumping (fixtures.tests.FixtureLoadingTests)\", \"test_output_formats (fixtures.tests.FixtureLoadingTests)\"]",
  "PASS_TO_PASS": "[\"There were no fixture objects installed\", \"test_loaddata_not_existent_fixture_file (fixtures.tests.NonexistentFixtureTests)\", \"test_nonexistent_fixture_no_constraint_checking (fixtures.tests.NonexistentFixtureTests)\", \"Test case has installed 3 fixture objects\", \"test_ambiguous_compressed_fixture (fixtures.tests.FixtureLoadingTests)\", \"test_compress_format_loading (fixtures.tests.FixtureLoadingTests)\", \"test_compressed_loading (fixtures.tests.FixtureLoadingTests)\", \"test_compressed_specified_loading (fixtures.tests.FixtureLoadingTests)\", \"test_db_loading (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_proxy_with_concrete (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_proxy_without_concrete (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_filtering_manager (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_pks (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_uuid_pks (fixtures.tests.FixtureLoadingTests)\", \"Excluding a bogus app or model should raise an error.\", \"test_load_fixture_with_special_characters (fixtures.tests.FixtureLoadingTests)\", \"test_loaddata_app_option (fixtures.tests.FixtureLoadingTests)\", \"test_loaddata_error_message (fixtures.tests.FixtureLoadingTests)\", \"test_loaddata_verbosity_three (fixtures.tests.FixtureLoadingTests)\", \"Loading fixtures from stdin with json and xml.\", \"test_loading_using (fixtures.tests.FixtureLoadingTests)\", \"test_loading_with_exclude_app (fixtures.tests.FixtureLoadingTests)\", \"test_loading_with_exclude_model (fixtures.tests.FixtureLoadingTests)\", \"Reading from stdin raises an error if format isn't specified.\", \"test_unmatched_identifier_loading (fixtures.tests.FixtureLoadingTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.625599",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}