{
  "repo": "django/django",
  "instance_id": "django__django-12869",
  "base_commit": "01f8d19ef95af7087f9480372fc9c2a124be2842",
  "patch": "diff --git a/django/contrib/staticfiles/apps.py b/django/contrib/staticfiles/apps.py\n--- a/django/contrib/staticfiles/apps.py\n+++ b/django/contrib/staticfiles/apps.py\n@@ -10,4 +10,4 @@ class StaticFilesConfig(AppConfig):\n     ignore_patterns = ['CVS', '.*', '*~']\n \n     def ready(self):\n-        checks.register(check_finders, 'staticfiles')\n+        checks.register(check_finders, checks.Tags.staticfiles)\ndiff --git a/django/contrib/staticfiles/management/commands/collectstatic.py b/django/contrib/staticfiles/management/commands/collectstatic.py\n--- a/django/contrib/staticfiles/management/commands/collectstatic.py\n+++ b/django/contrib/staticfiles/management/commands/collectstatic.py\n@@ -3,6 +3,7 @@\n from django.apps import apps\n from django.contrib.staticfiles.finders import get_finders\n from django.contrib.staticfiles.storage import staticfiles_storage\n+from django.core.checks import Tags\n from django.core.files.storage import FileSystemStorage\n from django.core.management.base import BaseCommand, CommandError\n from django.core.management.color import no_style\n@@ -35,6 +36,10 @@ def local(self):\n         return True\n \n     def add_arguments(self, parser):\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             '--noinput', '--no-input', action='store_false', dest='interactive',\n             help=\"Do NOT prompt the user for input of any kind.\",\n@@ -146,6 +151,8 @@ def collect(self):\n \n     def handle(self, **options):\n         self.set_options(**options)\n+        if not options['skip_checks']:\n+            self.check(tags=[Tags.staticfiles])\n \n         message = ['\\n']\n         if self.dry_run:\ndiff --git a/django/core/checks/registry.py b/django/core/checks/registry.py\n--- a/django/core/checks/registry.py\n+++ b/django/core/checks/registry.py\n@@ -15,6 +15,7 @@ class Tags:\n     models = 'models'\n     security = 'security'\n     signals = 'signals'\n+    staticfiles = 'staticfiles'\n     templates = 'templates'\n     translation = 'translation'\n     urls = 'urls'\n",
  "test_patch": "diff --git a/tests/staticfiles_tests/test_management.py b/tests/staticfiles_tests/test_management.py\n--- a/tests/staticfiles_tests/test_management.py\n+++ b/tests/staticfiles_tests/test_management.py\n@@ -16,6 +16,7 @@\n )\n from django.core.exceptions import ImproperlyConfigured\n from django.core.management import CommandError, call_command\n+from django.core.management.base import SystemCheckError\n from django.test import RequestFactory, override_settings\n from django.test.utils import extend_sys_path\n from django.utils import timezone\n@@ -145,6 +146,12 @@ def test_local_storage_detection_helper(self):\n             collectstatic.staticfiles_storage = staticfiles_storage\n             storage.staticfiles_storage = staticfiles_storage\n \n+    @override_settings(STATICFILES_DIRS=('test'))\n+    def test_collectstatis_check(self):\n+        msg = 'The STATICFILES_DIRS setting is not a tuple or list.'\n+        with self.assertRaisesMessage(SystemCheckError, msg):\n+            call_command('collectstatic', skip_checks=False)\n+\n \n class TestCollectionHelpSubcommand(AdminScriptTestCase):\n     @override_settings(STATIC_ROOT=None)\n",
  "problem_statement": "collectstatic doesn't run staticfiles checks.\nDescription\n\t\nPiecing this together from a user who is having trouble with staticfiles (who doesn't, at least once) on IRC.\nthe system checks framework has a check_finders which is invoked if django.contrib.staticfiles is in your INSTALLED_APPS which defers checks to each individually configured finder as finder.check() - this accounts for running the following line:\nif not isinstance(settings.STATICFILES_DIRS, (list, tuple)):\nwhich is intended to catch the problem scenario of STATICFILES_DIRS = () being edited to STATICFILES_DIRS = (\"mypath\") with no trailing comma to make it a tuple, rather than an iterable string.\nHowever, the collectstatic management command has requires_system_checks = False so it appears possible to edit the value and directly run python manage.py collectstatic without the type being checked or the error raised.\nNaively, I'm assuming that something like the following needs to occur:\nfor finder in get_finders():\n\tfinder.check() # ignoring NotImplementedError\n\t# then somehow surface any errors back to stderr as if `requires_system_checks = True`\nI've not delved deeply into the \"surface errors\" part.\n",
  "hints_text": "We should be able to run only staticfiles checks with self.check(app_configs) or by using Tags, self.check(tags=[...]).\nâ€‹PR",
  "created_at": "2020-05-06T20:31:29Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_collectstatis_check (staticfiles_tests.test_management.TestConfiguration)\"]",
  "PASS_TO_PASS": "[\"test_no_files_created (staticfiles_tests.test_management.TestCollectionDryRun)\", \"test_local_storage_detection_helper (staticfiles_tests.test_management.TestConfiguration)\", \"test_location_empty (staticfiles_tests.test_management.TestConfiguration)\", \"test_no_files_created (staticfiles_tests.test_management.TestCollectionDryRunManifestStaticFilesStorage)\", \"test_no_warning (staticfiles_tests.test_management.TestCollectionOverwriteWarning)\", \"test_warning (staticfiles_tests.test_management.TestCollectionOverwriteWarning)\", \"test_skips_newer_files_in_remote_storage (staticfiles_tests.test_management.TestCollectionNeverCopyStorage)\", \"test_no_files_created (staticfiles_tests.test_management.TestCollectionNonLocalStorage)\", \"test_storage_properties (staticfiles_tests.test_management.TestCollectionNonLocalStorage)\", \"test_custom_ignore_patterns (staticfiles_tests.test_management.TestCollectionCustomIgnorePatterns)\", \"test_ordering_override (staticfiles_tests.test_management.TestCollectionFilesOverride)\", \"test_cleared_not_found (staticfiles_tests.test_management.TestCollectionClear)\", \"test_dir_not_exists (staticfiles_tests.test_management.TestCollectionClear)\", \"test_handle_path_notimplemented (staticfiles_tests.test_management.TestCollectionClear)\", \"test_404_response (staticfiles_tests.test_management.TestRunserver)\", \"test_middleware_loaded_only_once (staticfiles_tests.test_management.TestRunserver)\", \"test_app_files (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_broken_symlink (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_camelcase_filenames (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_clear_broken_symlink (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_links_created (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_no_remote_link (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_nonascii_filenames (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_staticfiles_dirs (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_symlinks_and_files_replaced (staticfiles_tests.test_management.TestCollectionLinks)\", \"test_app_files (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)\", \"test_camelcase_filenames (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)\", \"test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)\", \"test_no_common_ignore_patterns (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)\", \"test_nonascii_filenames (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)\", \"test_staticfiles_dirs (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)\", \"test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)\", \"test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)\", \"test_verbosity_0 (staticfiles_tests.test_management.TestCollectionVerbosity)\", \"test_verbosity_1 (staticfiles_tests.test_management.TestCollectionVerbosity)\", \"test_verbosity_1_with_post_process (staticfiles_tests.test_management.TestCollectionVerbosity)\", \"test_verbosity_2 (staticfiles_tests.test_management.TestCollectionVerbosity)\", \"test_verbosity_2_with_post_process (staticfiles_tests.test_management.TestCollectionVerbosity)\", \"test_cancelled (staticfiles_tests.test_management.TestInteractiveMessages)\", \"test_no_warning_for_empty_staticdir (staticfiles_tests.test_management.TestInteractiveMessages)\", \"test_no_warning_when_staticdir_does_not_exist (staticfiles_tests.test_management.TestInteractiveMessages)\", \"test_warning_when_clearing_staticdir (staticfiles_tests.test_management.TestInteractiveMessages)\", \"test_warning_when_overwriting_files_in_staticdir (staticfiles_tests.test_management.TestInteractiveMessages)\", \"test_all_files (staticfiles_tests.test_management.TestFindStatic)\", \"test_all_files_less_verbose (staticfiles_tests.test_management.TestFindStatic)\", \"test_all_files_more_verbose (staticfiles_tests.test_management.TestFindStatic)\", \"test_app_files (staticfiles_tests.test_management.TestFindStatic)\", \"test_camelcase_filenames (staticfiles_tests.test_management.TestFindStatic)\", \"test_filename_with_percent_sign (staticfiles_tests.test_management.TestFindStatic)\", \"test_nonascii_filenames (staticfiles_tests.test_management.TestFindStatic)\", \"test_staticfiles_dirs (staticfiles_tests.test_management.TestFindStatic)\", \"test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestFindStatic)\", \"test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestFindStatic)\", \"test_app_files (staticfiles_tests.test_management.TestCollection)\", \"test_camelcase_filenames (staticfiles_tests.test_management.TestCollection)\", \"test_common_ignore_patterns (staticfiles_tests.test_management.TestCollection)\", \"test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollection)\", \"test_ignore (staticfiles_tests.test_management.TestCollection)\", \"test_nonascii_filenames (staticfiles_tests.test_management.TestCollection)\", \"test_pathlib (staticfiles_tests.test_management.TestCollection)\", \"test_staticfiles_dirs (staticfiles_tests.test_management.TestCollection)\", \"test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollection)\", \"test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollection)\", \"test_app_files (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_camelcase_filenames (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_common_ignore_patterns (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_ignore (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_nonascii_filenames (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_pathlib (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_staticfiles_dirs (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollectionPathLib)\", \"test_missing_settings_dont_prevent_help (staticfiles_tests.test_management.TestCollectionHelpSubcommand)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.637260",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}