{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7046",
  "base_commit": "d4dfe863c974654fe333eb8368922c96175ede6c",
  "patch": "diff --git a/src/_pytest/mark/__init__.py b/src/_pytest/mark/__init__.py\n--- a/src/_pytest/mark/__init__.py\n+++ b/src/_pytest/mark/__init__.py\n@@ -136,7 +136,7 @@ def from_item(cls, item: \"Item\") -> \"KeywordMatcher\":\n         import pytest\n \n         for item in item.listchain():\n-            if not isinstance(item, pytest.Instance):\n+            if not isinstance(item, (pytest.Instance, pytest.Session)):\n                 mapped_names.add(item.name)\n \n         # Add the names added as extra keywords to current or parent items\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -568,8 +568,7 @@ def __init__(\n         nodes.FSCollector.__init__(\n             self, fspath, parent=parent, config=config, session=session, nodeid=nodeid\n         )\n-\n-        self.name = fspath.dirname\n+        self.name = os.path.basename(str(fspath.dirname))\n \n     def setup(self):\n         # not using fixtures to call setup_module here because autouse fixtures\n",
  "test_patch": "diff --git a/testing/test_collection.py b/testing/test_collection.py\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1004,7 +1004,7 @@ def test_collect_init_tests(testdir):\n     result.stdout.fnmatch_lines(\n         [\n             \"collected 2 items\",\n-            \"<Package *\",\n+            \"<Package tests>\",\n             \"  <Module __init__.py>\",\n             \"    <Function test_init>\",\n             \"  <Module test_foo.py>\",\n@@ -1015,7 +1015,7 @@ def test_collect_init_tests(testdir):\n     result.stdout.fnmatch_lines(\n         [\n             \"collected 2 items\",\n-            \"<Package *\",\n+            \"<Package tests>\",\n             \"  <Module __init__.py>\",\n             \"    <Function test_init>\",\n             \"  <Module test_foo.py>\",\n@@ -1027,7 +1027,7 @@ def test_collect_init_tests(testdir):\n     result.stdout.fnmatch_lines(\n         [\n             \"collected 2 items\",\n-            \"<Package */tests>\",\n+            \"<Package tests>\",\n             \"  <Module __init__.py>\",\n             \"    <Function test_init>\",\n             \"  <Module test_foo.py>\",\n@@ -1039,7 +1039,7 @@ def test_collect_init_tests(testdir):\n     result.stdout.fnmatch_lines(\n         [\n             \"collected 2 items\",\n-            \"<Package */tests>\",\n+            \"<Package tests>\",\n             \"  <Module __init__.py>\",\n             \"    <Function test_init>\",\n             \"  <Module test_foo.py>\",\n@@ -1048,12 +1048,12 @@ def test_collect_init_tests(testdir):\n     )\n     result = testdir.runpytest(\"./tests/test_foo.py\", \"--collect-only\")\n     result.stdout.fnmatch_lines(\n-        [\"<Package */tests>\", \"  <Module test_foo.py>\", \"    <Function test_foo>\"]\n+        [\"<Package tests>\", \"  <Module test_foo.py>\", \"    <Function test_foo>\"]\n     )\n     result.stdout.no_fnmatch_line(\"*test_init*\")\n     result = testdir.runpytest(\"./tests/__init__.py\", \"--collect-only\")\n     result.stdout.fnmatch_lines(\n-        [\"<Package */tests>\", \"  <Module __init__.py>\", \"    <Function test_init>\"]\n+        [\"<Package tests>\", \"  <Module __init__.py>\", \"    <Function test_init>\"]\n     )\n     result.stdout.no_fnmatch_line(\"*test_foo*\")\n \ndiff --git a/testing/test_mark.py b/testing/test_mark.py\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -834,6 +834,36 @@ def test_one(): assert 1\n         deselected_tests = dlist[0].items\n         assert len(deselected_tests) == 1\n \n+    def test_no_match_directories_outside_the_suite(self, testdir):\n+        \"\"\"\n+        -k should not match against directories containing the test suite (#7040).\n+        \"\"\"\n+        test_contents = \"\"\"\n+            def test_aaa(): pass\n+            def test_ddd(): pass\n+        \"\"\"\n+        testdir.makepyfile(\n+            **{\"ddd/tests/__init__.py\": \"\", \"ddd/tests/test_foo.py\": test_contents}\n+        )\n+\n+        def get_collected_names(*args):\n+            _, rec = testdir.inline_genitems(*args)\n+            calls = rec.getcalls(\"pytest_collection_finish\")\n+            assert len(calls) == 1\n+            return [x.name for x in calls[0].session.items]\n+\n+        # sanity check: collect both tests in normal runs\n+        assert get_collected_names() == [\"test_aaa\", \"test_ddd\"]\n+\n+        # do not collect anything based on names outside the collection tree\n+        assert get_collected_names(\"-k\", testdir.tmpdir.basename) == []\n+\n+        # \"-k ddd\" should only collect \"test_ddd\", but not\n+        # 'test_aaa' just because one of its parent directories is named \"ddd\";\n+        # this was matched previously because Package.name would contain the full path\n+        # to the package\n+        assert get_collected_names(\"-k\", \"ddd\") == [\"test_ddd\"]\n+\n \n class TestMarkDecorator:\n     @pytest.mark.parametrize(\n",
  "problem_statement": "Expressions match against folder structure above pytest root\nSay I have a test file `/opt/dev/Asdf/pytest_collect/test_issue.py`\r\n\r\n```python\r\ndef test_fdsa():\r\n    pass\r\n\r\ndef test_asdf():\r\n    pass\r\n```\r\n\r\nIf I want to match only `test_fdsa`, this works as expected\r\n\r\n```bash\r\n/opt/dev/Asdf/pytest_collect $ pytest --collectonly -k fdsa\r\n================================================= test session starts ==================================================\r\nplatform darwin -- Python 3.7.2, pytest-5.4.1, py-1.8.0, pluggy-0.13.1\r\nsensitiveurl: .*\r\nrootdir: /opt/dev/Asdf/pytest_collect\r\nplugins: xdist-1.26.1, forked-1.0.2, repeat-0.8.0, progress-1.2.1, pudb-0.7.0, html-1.20.0, timeout-1.3.3, selenium-1.16.0, base-url-1.4.1, variables-1.7.1, metadata-1.8.0\r\ncollected 2 items / 1 deselected / 1 selected\r\n<Package /opt/dev/Asdf/pytest_collect>\r\n  <Module test_issue.py>\r\n    <Function test_fdsa>\r\n\r\n================================================ 1 deselected in 0.09s =================================================\r\n```\r\n\r\nHowever if I want to execute only `test_asdf` using similar means:\r\n\r\n```bash\r\n/opt/dev/Asdf/pytest_collect $ pytest --collectonly -k asdf\r\n================================================= test session starts ==================================================\r\nplatform darwin -- Python 3.7.2, pytest-5.4.1, py-1.8.0, pluggy-0.13.1\r\nsensitiveurl: .*\r\nrootdir: /opt/dev/Asdf/pytest_collect\r\nplugins: xdist-1.26.1, forked-1.0.2, repeat-0.8.0, progress-1.2.1, pudb-0.7.0, html-1.20.0, timeout-1.3.3, selenium-1.16.0, base-url-1.4.1, variables-1.7.1, metadata-1.8.0\r\ncollected 2 items\r\n<Package /opt/dev/Asdf/pytest_collect>\r\n  <Module test_issue.py>\r\n    <Function test_asdf>\r\n    <Function test_fdsa>\r\n\r\n================================================ no tests ran in 0.08s =================================================\r\n```\r\n\r\n*both* tests are collected because `Asdf` is in the parent path even though it might not have anything to do with the test environment. \r\n\r\nIs this expected behaviour? \n",
  "hints_text": "",
  "created_at": "2020-04-08T16:54:35Z",
  "version": "5.4",
  "FAIL_TO_PASS": "[\"testing/test_collection.py::test_collect_init_tests\", \"testing/test_mark.py::TestKeywordSelection::test_no_match_directories_outside_the_suite\"]",
  "PASS_TO_PASS": "[\"testing/test_collection.py::TestCollector::test_collect_versus_item\", \"testing/test_collection.py::test_fscollector_from_parent\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[py.test-mark]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[py.test-param]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[pytest-mark]\", \"testing/test_mark.py::TestMark::test_pytest_exists_in_namespace_all[pytest-param]\", \"testing/test_mark.py::TestMark::test_pytest_mark_notcallable\", \"testing/test_mark.py::TestMark::test_mark_with_param\", \"testing/test_mark.py::TestMark::test_pytest_mark_name_starts_with_underscore\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs0-rhs0-True]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs1-rhs1-False]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[lhs2-bar-False]\", \"testing/test_mark.py::TestMarkDecorator::test__eq__[foo-rhs3-False]\", \"testing/test_mark.py::TestMarkDecorator::test_aliases\", \"testing/test_mark.py::test_addmarker_order\", \"testing/test_mark.py::test_pytest_param_id_requires_string\", \"testing/test_mark.py::test_pytest_param_id_allows_none_or_string[None]\", \"testing/test_mark.py::test_pytest_param_id_allows_none_or_string[hello\", \"testing/test_collection.py::TestCollector::test_check_equality\", \"testing/test_collection.py::TestCollector::test_getparent\", \"testing/test_collection.py::TestCollector::test_getcustomfile_roundtrip\", \"testing/test_collection.py::TestCollector::test_can_skip_class_with_test_attr\", \"testing/test_collection.py::TestCollectFS::test_ignored_certain_directories\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.csh]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[activate.fish]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.bat]\", \"testing/test_collection.py::TestCollectFS::test__in_venv[Activate.ps1]\", \"testing/test_collection.py::TestCollectFS::test_custom_norecursedirs\", \"testing/test_collection.py::TestCollectFS::test_testpaths_ini\", \"testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_file\", \"testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_directory\", \"testing/test_collection.py::TestPrunetraceback::test_custom_repr_failure\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_path\", \"testing/test_collection.py::TestCustomConftests::test_ignore_collect_not_called_on_argument\", \"testing/test_collection.py::TestCustomConftests::test_collectignore_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_collectignoreglob_exclude_on_option\", \"testing/test_collection.py::TestCustomConftests::test_pytest_fs_collect_hooks_are_seen\", \"testing/test_collection.py::TestCustomConftests::test_pytest_collect_file_from_sister_dir\", \"testing/test_collection.py::TestSession::test_parsearg\", \"testing/test_collection.py::TestSession::test_collect_topdir\", \"testing/test_collection.py::TestSession::test_collect_protocol_single_function\", \"testing/test_collection.py::TestSession::test_collect_protocol_method\", \"testing/test_collection.py::TestSession::test_collect_custom_nodes_multi_id\", \"testing/test_collection.py::TestSession::test_collect_subdir_event_ordering\", \"testing/test_collection.py::TestSession::test_collect_two_commandline_args\", \"testing/test_collection.py::TestSession::test_serialization_byid\", \"testing/test_collection.py::TestSession::test_find_byid_without_instance_parents\", \"testing/test_collection.py::Test_getinitialnodes::test_global_file\", \"testing/test_collection.py::Test_getinitialnodes::test_pkgfile\", \"testing/test_collection.py::Test_genitems::test_check_collect_hashes\", \"testing/test_collection.py::Test_genitems::test_example_items1\", \"testing/test_collection.py::Test_genitems::test_class_and_functions_discovery_using_glob\", \"testing/test_collection.py::test_matchnodes_two_collections_same_file\", \"testing/test_collection.py::TestNodekeywords::test_no_under\", \"testing/test_collection.py::TestNodekeywords::test_issue345\", \"testing/test_collection.py::TestNodekeywords::test_keyword_matching_is_case_insensitive_by_default\", \"testing/test_collection.py::test_exit_on_collection_error\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_smaller_than_n_errors\", \"testing/test_collection.py::test_exit_on_collection_with_maxfail_bigger_than_n_errors\", \"testing/test_collection.py::test_continue_on_collection_errors\", \"testing/test_collection.py::test_continue_on_collection_errors_maxfail\", \"testing/test_collection.py::test_fixture_scope_sibling_conftests\", \"testing/test_collection.py::test_collect_invalid_signature_message\", \"testing/test_collection.py::test_collect_handles_raising_on_dunder_class\", \"testing/test_collection.py::test_collect_with_chdir_during_import\", \"testing/test_collection.py::test_collect_symlink_file_arg\", \"testing/test_collection.py::test_collect_symlink_out_of_tree\", \"testing/test_collection.py::test_collectignore_via_conftest\", \"testing/test_collection.py::test_collect_pkg_init_and_file_in_args\", \"testing/test_collection.py::test_collect_pkg_init_only\", \"testing/test_collection.py::test_collect_sub_with_symlinks[True]\", \"testing/test_collection.py::test_collect_sub_with_symlinks[False]\", \"testing/test_collection.py::test_collector_respects_tbstyle\", \"testing/test_collection.py::test_does_not_eagerly_collect_packages\", \"testing/test_collection.py::test_does_not_put_src_on_path\", \"testing/test_mark.py::test_marked_class_run_twice\", \"testing/test_mark.py::test_ini_markers\", \"testing/test_mark.py::test_markers_option\", \"testing/test_mark.py::test_ini_markers_whitespace\", \"testing/test_mark.py::test_marker_without_description\", \"testing/test_mark.py::test_markers_option_with_plugin_in_current_dir\", \"testing/test_mark.py::test_mark_on_pseudo_function\", \"testing/test_mark.py::test_strict_prohibits_unregistered_markers[--strict-markers]\", \"testing/test_mark.py::test_strict_prohibits_unregistered_markers[--strict]\", \"testing/test_mark.py::test_mark_option[xyz-expected_passed0]\", \"testing/test_mark.py::test_mark_option[(((\", \"testing/test_mark.py::test_mark_option[not\", \"testing/test_mark.py::test_mark_option[xyz\", \"testing/test_mark.py::test_mark_option[xyz2-expected_passed4]\", \"testing/test_mark.py::test_mark_option_custom[interface-expected_passed0]\", \"testing/test_mark.py::test_mark_option_custom[not\", \"testing/test_mark.py::test_keyword_option_custom[interface-expected_passed0]\", \"testing/test_mark.py::test_keyword_option_custom[not\", \"testing/test_mark.py::test_keyword_option_custom[pass-expected_passed2]\", \"testing/test_mark.py::test_keyword_option_custom[1\", \"testing/test_mark.py::test_keyword_option_considers_mark\", \"testing/test_mark.py::test_keyword_option_parametrize[[1.3]-expected_passed1]\", \"testing/test_mark.py::test_keyword_option_parametrize[2-3-expected_passed2]\", \"testing/test_mark.py::test_parametrize_with_module\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[foo\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[(foo-at\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[or\", \"testing/test_mark.py::test_keyword_option_wrong_arguments[not\", \"testing/test_mark.py::test_parametrized_collected_from_command_line\", \"testing/test_mark.py::test_parametrized_collect_with_wrong_args\", \"testing/test_mark.py::test_parametrized_with_kwargs\", \"testing/test_mark.py::test_parametrize_iterator\", \"testing/test_mark.py::TestFunctional::test_merging_markers_deep\", \"testing/test_mark.py::TestFunctional::test_mark_decorator_subclass_does_not_propagate_to_base\", \"testing/test_mark.py::TestFunctional::test_mark_should_not_pass_to_siebling_class\", \"testing/test_mark.py::TestFunctional::test_mark_decorator_baseclasses_merged\", \"testing/test_mark.py::TestFunctional::test_mark_closest\", \"testing/test_mark.py::TestFunctional::test_mark_with_wrong_marker\", \"testing/test_mark.py::TestFunctional::test_mark_dynamically_in_funcarg\", \"testing/test_mark.py::TestFunctional::test_no_marker_match_on_unmarked_names\", \"testing/test_mark.py::TestFunctional::test_keywords_at_node_level\", \"testing/test_mark.py::TestFunctional::test_keyword_added_for_session\", \"testing/test_mark.py::TestFunctional::test_mark_from_parameters\", \"testing/test_mark.py::TestKeywordSelection::test_select_simple\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[xxx]\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[xxx\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[TestClass]\", \"testing/test_mark.py::TestKeywordSelection::test_select_extra_keywords[TestClass\", \"testing/test_mark.py::TestKeywordSelection::test_select_starton\", \"testing/test_mark.py::TestKeywordSelection::test_keyword_extra\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values[__]\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values[+]\", \"testing/test_mark.py::TestKeywordSelection::test_no_magic_values[..]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[None]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[skip]\", \"testing/test_mark.py::test_parameterset_for_parametrize_marks[xfail]\", \"testing/test_mark.py::test_parameterset_for_fail_at_collect\", \"testing/test_mark.py::test_parameterset_for_parametrize_bad_markname\", \"testing/test_mark.py::test_mark_expressions_no_smear\", \"testing/test_mark.py::test_markers_from_parametrize\", \"testing/test_mark.py::test_marker_expr_eval_failure_handling[NOT\", \"testing/test_mark.py::test_marker_expr_eval_failure_handling[bogus/]\", \"testing/test_collection.py::test_collect_pyargs_with_testpaths\"]",
  "environment_setup_commit": "678c1a0745f1cf175c442c719906a1f13e496910",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.932938",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}