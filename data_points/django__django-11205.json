{
  "repo": "django/django",
  "instance_id": "django__django-11205",
  "base_commit": "bfae195b0a2c8dae755610a7e23add5c6bc37b5e",
  "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -929,33 +929,6 @@ def get_prefetch_queryset(self, instances, queryset=None):\n                 False,\n             )\n \n-        @property\n-        def constrained_target(self):\n-            # If the through relation's target field's foreign integrity is\n-            # enforced, the query can be performed solely against the through\n-            # table as the INNER JOIN'ing against target table is unnecessary.\n-            if not self.target_field.db_constraint:\n-                return None\n-            db = router.db_for_read(self.through, instance=self.instance)\n-            if not connections[db].features.supports_foreign_keys:\n-                return None\n-            hints = {'instance': self.instance}\n-            manager = self.through._base_manager.db_manager(db, hints=hints)\n-            filters = {self.source_field_name: self.instance.pk}\n-            # Nullable target rows must be excluded as well as they would have\n-            # been filtered out from an INNER JOIN.\n-            if self.target_field.null:\n-                filters['%s__isnull' % self.target_field_name] = False\n-            return manager.filter(**filters)\n-\n-        def exists(self):\n-            constrained_target = self.constrained_target\n-            return constrained_target.exists() if constrained_target else super().exists()\n-\n-        def count(self):\n-            constrained_target = self.constrained_target\n-            return constrained_target.count() if constrained_target else super().count()\n-\n         def add(self, *objs, through_defaults=None):\n             self._remove_prefetched_objects()\n             db = router.db_for_write(self.through, instance=self.instance)\n",
  "test_patch": "diff --git a/tests/many_to_many/models.py b/tests/many_to_many/models.py\n--- a/tests/many_to_many/models.py\n+++ b/tests/many_to_many/models.py\n@@ -27,6 +27,11 @@ def __str__(self):\n         return self.name\n \n \n+class NoDeletedArticleManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().exclude(headline='deleted')\n+\n+\n class Article(models.Model):\n     headline = models.CharField(max_length=100)\n     # Assign a string as name to make sure the intermediary model is\n@@ -34,6 +39,8 @@ class Article(models.Model):\n     publications = models.ManyToManyField(Publication, name='publications')\n     tags = models.ManyToManyField(Tag, related_name='tags')\n \n+    objects = NoDeletedArticleManager()\n+\n     class Meta:\n         ordering = ('headline',)\n \n@@ -55,13 +62,3 @@ class InheritedArticleA(AbstractArticle):\n \n class InheritedArticleB(AbstractArticle):\n     pass\n-\n-\n-class NullableTargetArticle(models.Model):\n-    headline = models.CharField(max_length=100)\n-    publications = models.ManyToManyField(Publication, through='NullablePublicationThrough')\n-\n-\n-class NullablePublicationThrough(models.Model):\n-    article = models.ForeignKey(NullableTargetArticle, models.CASCADE)\n-    publication = models.ForeignKey(Publication, models.CASCADE, null=True)\ndiff --git a/tests/many_to_many/tests.py b/tests/many_to_many/tests.py\n--- a/tests/many_to_many/tests.py\n+++ b/tests/many_to_many/tests.py\n@@ -1,13 +1,9 @@\n from unittest import mock\n \n-from django.db import connection, transaction\n+from django.db import transaction\n from django.test import TestCase, skipUnlessDBFeature\n-from django.test.utils import CaptureQueriesContext\n \n-from .models import (\n-    Article, InheritedArticleA, InheritedArticleB, NullablePublicationThrough,\n-    NullableTargetArticle, Publication,\n-)\n+from .models import Article, InheritedArticleA, InheritedArticleB, Publication\n \n \n class ManyToManyTests(TestCase):\n@@ -585,36 +581,8 @@ def test_inherited_models_selects(self):\n         )\n         self.assertQuerysetEqual(b.publications.all(), ['<Publication: Science Weekly>'])\n \n-\n-class ManyToManyQueryTests(TestCase):\n-    @classmethod\n-    def setUpTestData(cls):\n-        cls.article = Article.objects.create(headline='Django lets you build Web apps easily')\n-        cls.nullable_target_article = NullableTargetArticle.objects.create(headline='The python is good')\n-        NullablePublicationThrough.objects.create(article=cls.nullable_target_article, publication=None)\n-\n-    @skipUnlessDBFeature('supports_foreign_keys')\n-    def test_count_join_optimization(self):\n-        with CaptureQueriesContext(connection) as query:\n-            self.article.publications.count()\n-        self.assertNotIn('JOIN', query[0]['sql'])\n-        self.assertEqual(self.nullable_target_article.publications.count(), 0)\n-\n-    def test_count_join_optimization_disabled(self):\n-        with mock.patch.object(connection.features, 'supports_foreign_keys', False), \\\n-                CaptureQueriesContext(connection) as query:\n-            self.article.publications.count()\n-        self.assertIn('JOIN', query[0]['sql'])\n-\n-    @skipUnlessDBFeature('supports_foreign_keys')\n-    def test_exists_join_optimization(self):\n-        with CaptureQueriesContext(connection) as query:\n-            self.article.publications.exists()\n-        self.assertNotIn('JOIN', query[0]['sql'])\n-        self.assertIs(self.nullable_target_article.publications.exists(), False)\n-\n-    def test_exists_join_optimization_disabled(self):\n-        with mock.patch.object(connection.features, 'supports_foreign_keys', False), \\\n-                CaptureQueriesContext(connection) as query:\n-            self.article.publications.exists()\n-        self.assertIn('JOIN', query[0]['sql'])\n+    def test_custom_default_manager_exists_count(self):\n+        a5 = Article.objects.create(headline='deleted')\n+        a5.publications.add(self.p2)\n+        self.assertEqual(self.p2.article_set.count(), self.p2.article_set.all().count())\n+        self.assertEqual(self.p3.article_set.exists(), self.p3.article_set.all().exists())\n",
  "problem_statement": "Inefficient SQL generated when counting a ManyToMany\nDescription\n\t\nWhen calling count() on an unfiltered many to many relation, a useless join is included in the SQL that makes it much slower than it should be. On my dataset, the difference is 1000ms to 100ms, because an index-only scan can be used.\nThis is the SQL that is currently generated:\nSELECT COUNT(*) AS \"__count\"\nFROM \"app_foo\"\nINNER JOIN \"app_foo_bar\" ON (\"app_foo\".\"id\" = \"app_foo_bar\".\"foo_id\")\nWHERE \"app_foo_bar\".\"foo_id\" = ?;\nThis is the SQL that should be generated:\nSELECT COUNT(*) AS \"__count\"\nFROM \"app_foo_bar\"\nWHERE \"app_foo_bar\".\"foo_id\" = ?;\nThis optimization can only be applied when there are no filters applied, because then the join is used to satisfy the filters. In the no-filters case, only the through table needs to be consulted.\n",
  "hints_text": "Hello Olivier, I think you should be able to achieve this by defining a count() method on the dynamic class created by create_forward_many_to_many_manager by filtering self.through._default_manager based on self.instance and return its count().\nThanks for your advice. I will try to correct it according to your advice Replying to Simon Charette: Hello Olivier, I think you should be able to achieve this by defining a count() method on the dynamic class created by create_forward_many_to_many_manager by filtering self.through._default_manager based on self.instance and return its count().\nâ€‹https://github.com/django/django/pull/10366\nHave we considered making this change for exists() as well? I'm sure this will generate the join in the same way that count() does. Also somewhat related: #28477\nDoing it for exists() as well makes sense.\nIn 1299421: Fixed #29725 -- Removed unnecessary join in QuerySet.count() and exists() on a many-to-many relation.",
  "created_at": "2019-04-13T10:05:39Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_custom_default_manager_exists_count (many_to_many.tests.ManyToManyTests)\"]",
  "PASS_TO_PASS": "[\"test_add (many_to_many.tests.ManyToManyTests)\", \"test_add_after_prefetch (many_to_many.tests.ManyToManyTests)\", \"test_add_then_remove_after_prefetch (many_to_many.tests.ManyToManyTests)\", \"test_assign (many_to_many.tests.ManyToManyTests)\", \"test_assign_forward (many_to_many.tests.ManyToManyTests)\", \"test_assign_ids (many_to_many.tests.ManyToManyTests)\", \"test_assign_reverse (many_to_many.tests.ManyToManyTests)\", \"test_bulk_delete (many_to_many.tests.ManyToManyTests)\", \"test_clear (many_to_many.tests.ManyToManyTests)\", \"test_clear_after_prefetch (many_to_many.tests.ManyToManyTests)\", \"test_delete (many_to_many.tests.ManyToManyTests)\", \"test_fast_add_ignore_conflicts (many_to_many.tests.ManyToManyTests)\", \"test_forward_assign_with_queryset (many_to_many.tests.ManyToManyTests)\", \"test_inherited_models_selects (many_to_many.tests.ManyToManyTests)\", \"test_related_sets (many_to_many.tests.ManyToManyTests)\", \"test_remove (many_to_many.tests.ManyToManyTests)\", \"test_remove_after_prefetch (many_to_many.tests.ManyToManyTests)\", \"test_reverse_add (many_to_many.tests.ManyToManyTests)\", \"test_reverse_assign_with_queryset (many_to_many.tests.ManyToManyTests)\", \"test_reverse_selects (many_to_many.tests.ManyToManyTests)\", \"test_selects (many_to_many.tests.ManyToManyTests)\", \"test_set (many_to_many.tests.ManyToManyTests)\", \"test_set_after_prefetch (many_to_many.tests.ManyToManyTests)\", \"test_slow_add_ignore_conflicts (many_to_many.tests.ManyToManyTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.564381",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}