{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-14379",
  "base_commit": "01c96c8cf1289c25172d538e1309f89cac88d41c",
  "patch": "diff --git a/astropy/coordinates/angles.py b/astropy/coordinates/angles.py\n--- a/astropy/coordinates/angles.py\n+++ b/astropy/coordinates/angles.py\n@@ -314,10 +314,21 @@ def to_string(\n                 )\n             func = (\"{:g}\" if precision is None else f\"{{0:0.{precision}f}}\").format\n             # Don't add unit by default for decimal.\n+            # TODO: could we use Quantity.to_string() here?\n             if not (decimal and format is None):\n                 unit_string = unit.to_string(format=format)\n                 if format == \"latex\" or format == \"latex_inline\":\n-                    unit_string = unit_string[1:-1]\n+                    # Remove $ and add space in front if unit is not a superscript.\n+                    if \"^\" in unit_string:\n+                        unit_string = unit_string[1:-1]\n+                    else:\n+                        unit_string = r\"\\;\" + unit_string[1:-1]\n+                elif len(unit_string) > 1:\n+                    # Length one for angular units can only happen for\n+                    # superscript degree, arcmin, arcsec, hour, minute, second,\n+                    # and those should not get an extra space.\n+                    unit_string = \" \" + unit_string\n+\n                 format_func = func\n                 func = lambda x: format_func(x) + unit_string\n \n",
  "test_patch": "diff --git a/astropy/coordinates/tests/test_angles.py b/astropy/coordinates/tests/test_angles.py\n--- a/astropy/coordinates/tests/test_angles.py\n+++ b/astropy/coordinates/tests/test_angles.py\n@@ -352,7 +352,7 @@ def string(self, unit=DEGREE, decimal=False, sep=\" \", precision=5,\n         f\"Angle as DMS: {angle.to_string(unit=u.degree, precision=4, pad=True)}\" == res\n     )\n \n-    res = \"Angle as rad: 0.0629763rad\"\n+    res = \"Angle as rad: 0.0629763 rad\"\n     assert f\"Angle as rad: {angle.to_string(unit=u.radian)}\" == res\n \n     res = \"Angle as rad decimal: 0.0629763\"\n@@ -588,9 +588,9 @@ def test_angle_string():\n     a = Angle(\"00:00:59W\", u.hour)\n     assert str(a) == \"-0h00m59s\"\n     a = Angle(3.2, u.radian)\n-    assert str(a) == \"3.2rad\"\n+    assert str(a) == \"3.2 rad\"\n     a = Angle(4.2, u.microarcsecond)\n-    assert str(a) == \"4.2uarcsec\"\n+    assert str(a) == \"4.2 uarcsec\"\n     a = Angle(\"1.0uarcsec\")\n     assert a.value == 1.0\n     assert a.unit == u.microarcsecond\n@@ -1096,8 +1096,8 @@ def parse_test(i=0):\n             \"[nan, nan, nan] hourangle\",\n         ),\n         (np.nan * u.rad, \"nan\", \"nan rad\"),\n-        ([np.nan, 1, 0] * u.rad, \"[nan 1rad 0rad]\", \"[nan, 1., 0.] rad\"),\n-        ([1.50, np.nan, 0] * u.rad, \"[1.5rad nan 0rad]\", \"[1.5, nan, 0.] rad\"),\n+        ([np.nan, 1, 0] * u.rad, \"[nan 1 rad 0 rad]\", \"[nan, 1., 0.] rad\"),\n+        ([1.50, np.nan, 0] * u.rad, \"[1.5 rad nan 0 rad]\", \"[1.5, nan, 0.] rad\"),\n         ([np.nan, np.nan, np.nan] * u.rad, \"[nan nan nan]\", \"[nan, nan, nan] rad\"),\n     ],\n )\ndiff --git a/astropy/coordinates/tests/test_formatting.py b/astropy/coordinates/tests/test_formatting.py\n--- a/astropy/coordinates/tests/test_formatting.py\n+++ b/astropy/coordinates/tests/test_formatting.py\n@@ -73,28 +73,28 @@ def test_to_string_formats():\n     assert a.to_string(format=\"unicode\") == \"1ʰ06ᵐ48.078ˢ\"\n \n     a = Angle(1.113355, unit=u.radian)\n-    assert a.to_string(format=\"latex\") == r\"$1.11336\\mathrm{rad}$\"\n-    assert a.to_string(format=\"latex_inline\") == r\"$1.11336\\mathrm{rad}$\"\n-    assert a.to_string(format=\"unicode\") == \"1.11336rad\"\n+    assert a.to_string(format=\"latex\") == r\"$1.11336\\;\\mathrm{rad}$\"\n+    assert a.to_string(format=\"latex_inline\") == r\"$1.11336\\;\\mathrm{rad}$\"\n+    assert a.to_string(format=\"unicode\") == \"1.11336 rad\"\n \n \n def test_to_string_decimal_formats():\n     angle1 = Angle(2.0, unit=u.degree)\n \n-    assert angle1.to_string(decimal=True, format=\"generic\") == \"2deg\"\n+    assert angle1.to_string(decimal=True, format=\"generic\") == \"2 deg\"\n     assert angle1.to_string(decimal=True, format=\"latex\") == \"$2\\\\mathrm{{}^{\\\\circ}}$\"\n     assert angle1.to_string(decimal=True, format=\"unicode\") == \"2°\"\n \n     angle2 = Angle(3.0, unit=u.hourangle)\n-    assert angle2.to_string(decimal=True, format=\"generic\") == \"3hourangle\"\n+    assert angle2.to_string(decimal=True, format=\"generic\") == \"3 hourangle\"\n     assert angle2.to_string(decimal=True, format=\"latex\") == \"$3\\\\mathrm{{}^{h}}$\"\n     assert angle2.to_string(decimal=True, format=\"unicode\") == \"3ʰ\"\n \n     angle3 = Angle(4.0, unit=u.radian)\n \n-    assert angle3.to_string(decimal=True, format=\"generic\") == \"4rad\"\n-    assert angle3.to_string(decimal=True, format=\"latex\") == \"$4\\\\mathrm{rad}$\"\n-    assert angle3.to_string(decimal=True, format=\"unicode\") == \"4rad\"\n+    assert angle3.to_string(decimal=True, format=\"generic\") == \"4 rad\"\n+    assert angle3.to_string(decimal=True, format=\"latex\") == \"$4\\\\;\\\\mathrm{rad}$\"\n+    assert angle3.to_string(decimal=True, format=\"unicode\") == \"4 rad\"\n \n     with pytest.raises(ValueError, match=\"Unknown format\"):\n         angle3.to_string(decimal=True, format=\"myformat\")\n@@ -148,7 +148,7 @@ def test_to_string_radian_with_precision():\n \n     # Check that specifying the precision works\n     a = Angle(3.0, unit=u.rad)\n-    assert a.to_string(precision=3, sep=\"fromunit\") == \"3.000rad\"\n+    assert a.to_string(precision=3, sep=\"fromunit\") == \"3.000 rad\"\n \n \n def test_sexagesimal_round_down():\ndiff --git a/astropy/visualization/wcsaxes/tests/test_formatter_locator.py b/astropy/visualization/wcsaxes/tests/test_formatter_locator.py\n--- a/astropy/visualization/wcsaxes/tests/test_formatter_locator.py\n+++ b/astropy/visualization/wcsaxes/tests/test_formatter_locator.py\n@@ -407,8 +407,8 @@ def test_formatter_no_format(self, spacing, string):\n                 True,\n                 True,\n                 0.001 * u.arcsec,\n-                \"55412032mas\",\n-                r\"$55412032\\mathrm{mas}$\",\n+                \"55412032 mas\",\n+                r\"$55412032\\;\\mathrm{mas}$\",\n             ),\n             (u.degree, True, False, 15 * u.degree, \"15\", \"15\"),\n             (u.degree, True, False, 0.12 * u.degree, \"15.39\", \"15.39\"),\n",
  "problem_statement": "Space between value and unit\nCurrently, ``Angle.to_string`` doesn't include a space between the value and unit:\r\n\r\n```python\r\nIn [30]: from astropy.coordinates import Angle\r\n\r\nIn [31]: a = Angle(3, 'deg')\r\n\r\nIn [32]: a.to_string(unit='mas')\r\nOut[32]: '1.08e+07mas'\r\n```\r\n\r\nI think there are cases where it would make sense to allow a space to be included, so this is a feature request to add a boolean keyword argument to optionally add a space.\r\n\r\nNote that Quantity does include a space by default so maybe actually we should just change the default and not add an option?\r\n\r\n```python\r\nIn [17]: str(3 * u.mas)\r\nOut[17]: '3.0 mas'\r\n```\n",
  "hints_text": "isn't it good form to always have a space between the value and the unit?\n:+1: for consistency between Quantity and Angle (by having space as default).\r\n\r\nHowever, if you worry about backward compatibility, maybe instead add an option for \"old style\" (without space), but would that be useful for anyone?\nWell the one place where we *don't* want a space is when using a symbol, e.g. ``3.4\"``\nRe: symbol -- Nothing some `regex` wouldn't fix... :wink: (*show self to door*)\n @astrofrog I think we should use a space by default (probably the most common use case), and then add a boolean keyword argument to optionally not include a space (e.g. `3.4\"`).\nI agree!\ncan i work on this\n> 👍 for consistency between Quantity and Angle (by having space as default).\r\n> \r\n> However, if you worry about backward compatibility, maybe instead add an option for \"old style\" (without space), but would that be useful for anyone?\r\n\r\n@pllim I have implemented your idea in the PR attached; please see to it.",
  "created_at": "2023-02-13T20:28:24Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"astropy/coordinates/tests/test_angles.py::test_angle_formatting\", \"astropy/coordinates/tests/test_angles.py::test_angle_string\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input9-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input10-[1.5\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_formats\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_decimal_formats\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_radian_with_precision\"]",
  "PASS_TO_PASS": "[\"astropy/coordinates/tests/test_angles.py::test_create_angles\", \"astropy/coordinates/tests/test_angles.py::test_angle_from_view\", \"astropy/coordinates/tests/test_angles.py::test_angle_ops\", \"astropy/coordinates/tests/test_angles.py::test_angle_methods\", \"astropy/coordinates/tests/test_angles.py::test_angle_convert\", \"astropy/coordinates/tests/test_angles.py::test_to_string_vector\", \"astropy/coordinates/tests/test_angles.py::test_angle_format_roundtripping\", \"astropy/coordinates/tests/test_angles.py::test_radec\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_dms\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_dm\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_hms\", \"astropy/coordinates/tests/test_angles.py::test_negative_zero_hm\", \"astropy/coordinates/tests/test_angles.py::test_negative_sixty_hm\", \"astropy/coordinates/tests/test_angles.py::test_plus_sixty_hm\", \"astropy/coordinates/tests/test_angles.py::test_negative_fifty_nine_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_plus_fifty_nine_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_negative_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_plus_sixty_dms\", \"astropy/coordinates/tests/test_angles.py::test_angle_to_is_angle\", \"astropy/coordinates/tests/test_angles.py::test_angle_to_quantity\", \"astropy/coordinates/tests/test_angles.py::test_quantity_to_angle\", \"astropy/coordinates/tests/test_angles.py::test_angle_repr\", \"astropy/coordinates/tests/test_angles.py::test_large_angle_representation\", \"astropy/coordinates/tests/test_angles.py::test_wrap_at_inplace\", \"astropy/coordinates/tests/test_angles.py::test_latitude\", \"astropy/coordinates/tests/test_angles.py::test_longitude\", \"astropy/coordinates/tests/test_angles.py::test_wrap_at\", \"astropy/coordinates/tests/test_angles.py::test_is_within_bounds\", \"astropy/coordinates/tests/test_angles.py::test_angle_mismatched_unit\", \"astropy/coordinates/tests/test_angles.py::test_regression_formatting_negative\", \"astropy/coordinates/tests/test_angles.py::test_regression_formatting_default_precision\", \"astropy/coordinates/tests/test_angles.py::test_empty_sep\", \"astropy/coordinates/tests/test_angles.py::test_create_tuple\", \"astropy/coordinates/tests/test_angles.py::test_list_of_quantities\", \"astropy/coordinates/tests/test_angles.py::test_multiply_divide\", \"astropy/coordinates/tests/test_angles.py::test_mixed_string_and_quantity\", \"astropy/coordinates/tests/test_angles.py::test_array_angle_tostring\", \"astropy/coordinates/tests/test_angles.py::test_wrap_at_without_new\", \"astropy/coordinates/tests/test_angles.py::test__str__\", \"astropy/coordinates/tests/test_angles.py::test_repr_latex\", \"astropy/coordinates/tests/test_angles.py::test_angle_with_cds_units_enabled\", \"astropy/coordinates/tests/test_angles.py::test_longitude_nan\", \"astropy/coordinates/tests/test_angles.py::test_latitude_nan\", \"astropy/coordinates/tests/test_angles.py::test_angle_wrap_at_nan\", \"astropy/coordinates/tests/test_angles.py::test_angle_multithreading\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input0-nan-nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input1-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input2-[6d00m00s\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input3-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input4-nan-nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input5-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input6-[6h00m00s\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input7-[nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input8-nan-nan\", \"astropy/coordinates/tests/test_angles.py::test_str_repr_angles_nan[input11-[nan\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[1.5707963267948966-1.5707963267948966-None-float64--1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[1.5707963267948966-1.5707963267948966-None-float64-1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[1.5707963267948966-1.5707963267948966-float64-float64--1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[1.5707963267948966-1.5707963267948966-float64-float64-1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[value2-expected_value2-None-float32--1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[value2-expected_value2-None-float32-1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[value3-expected_value3-float32-float32--1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_limits[value3-expected_value3-float32-float32-1]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_out_of_limits[1.5708277427214323-float32]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_out_of_limits[value1-float32]\", \"astropy/coordinates/tests/test_angles.py::test_latitude_out_of_limits[1.5708277427214323-float64]\", \"astropy/coordinates/tests/test_angles.py::test_angle_pickle_to_string\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_precision\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_decimal\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_fields\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_padding\", \"astropy/coordinates/tests/test_formatting.py::test_sexagesimal_rounding_up\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_scalar\", \"astropy/coordinates/tests/test_formatting.py::test_sexagesimal_round_down\", \"astropy/coordinates/tests/test_formatting.py::test_to_string_fields_colon\"]",
  "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.538778",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}