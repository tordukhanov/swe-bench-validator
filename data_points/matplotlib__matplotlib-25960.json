{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25960",
  "base_commit": "1d0d255b79e84dfc9f2123c5eb85a842d342f72b",
  "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1564,8 +1564,9 @@ def subfigures(self, nrows=1, ncols=1, squeeze=True,\n         wspace, hspace : float, default: None\n             The amount of width/height reserved for space between subfigures,\n             expressed as a fraction of the average subfigure width/height.\n-            If not given, the values will be inferred from a figure or\n-            rcParams when necessary.\n+            If not given, the values will be inferred from rcParams if using\n+            constrained layout (see `~.ConstrainedLayoutEngine`), or zero if\n+            not using a layout engine.\n \n         width_ratios : array-like of length *ncols*, optional\n             Defines the relative widths of the columns. Each column gets a\n@@ -1580,13 +1581,24 @@ def subfigures(self, nrows=1, ncols=1, squeeze=True,\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n                       wspace=wspace, hspace=hspace,\n                       width_ratios=width_ratios,\n-                      height_ratios=height_ratios)\n+                      height_ratios=height_ratios,\n+                      left=0, right=1, bottom=0, top=1)\n \n         sfarr = np.empty((nrows, ncols), dtype=object)\n         for i in range(ncols):\n             for j in range(nrows):\n                 sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n \n+        if self.get_layout_engine() is None and (wspace is not None or\n+                                                 hspace is not None):\n+            # Gridspec wspace and hspace is ignored on subfigure instantiation,\n+            # and no space is left.  So need to account for it here if required.\n+            bottoms, tops, lefts, rights = gs.get_grid_positions(self)\n+            for sfrow, bottom, top in zip(sfarr, bottoms, tops):\n+                for sf, left, right in zip(sfrow, lefts, rights):\n+                    bbox = Bbox.from_extents(left, bottom, right, top)\n+                    sf._redo_transform_rel_fig(bbox=bbox)\n+\n         if squeeze:\n             # Discarding unneeded dimensions that equal 1.  If we only have one\n             # subfigure, just return it instead of a 1-element array.\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1449,6 +1449,31 @@ def test_subfigure_pdf():\n     fig.savefig(buffer, format='pdf')\n \n \n+def test_subfigures_wspace_hspace():\n+    sub_figs = plt.figure().subfigures(2, 3, hspace=0.5, wspace=1/6.)\n+\n+    w = 640\n+    h = 480\n+\n+    np.testing.assert_allclose(sub_figs[0, 0].bbox.min, [0., h * 0.6])\n+    np.testing.assert_allclose(sub_figs[0, 0].bbox.max, [w * 0.3, h])\n+\n+    np.testing.assert_allclose(sub_figs[0, 1].bbox.min, [w * 0.35, h * 0.6])\n+    np.testing.assert_allclose(sub_figs[0, 1].bbox.max, [w * 0.65, h])\n+\n+    np.testing.assert_allclose(sub_figs[0, 2].bbox.min, [w * 0.7, h * 0.6])\n+    np.testing.assert_allclose(sub_figs[0, 2].bbox.max, [w, h])\n+\n+    np.testing.assert_allclose(sub_figs[1, 0].bbox.min, [0, 0])\n+    np.testing.assert_allclose(sub_figs[1, 0].bbox.max, [w * 0.3, h * 0.4])\n+\n+    np.testing.assert_allclose(sub_figs[1, 1].bbox.min, [w * 0.35, 0])\n+    np.testing.assert_allclose(sub_figs[1, 1].bbox.max, [w * 0.65, h * 0.4])\n+\n+    np.testing.assert_allclose(sub_figs[1, 2].bbox.min, [w * 0.7, 0])\n+    np.testing.assert_allclose(sub_figs[1, 2].bbox.max, [w, h * 0.4])\n+\n+\n def test_add_subplot_kwargs():\n     # fig.add_subplot() always creates new axes, even if axes kwargs differ.\n     fig = plt.figure()\n",
  "problem_statement": "[Bug]: wspace and hspace in subfigures not working\n### Bug summary\n\n`wspace` and `hspace` in `Figure.subfigures` do nothing.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nfigs = plt.figure().subfigures(2, 2, wspace=0, hspace=0)\r\nfor fig in figs.flat:\r\n    fig.subplots().plot([1, 2])\r\nplt.show()\n```\n\n\n### Actual outcome\n\nSame figure independently of the values of hspace and wspace.\n\n### Expected outcome\n\nhttps://github.com/matplotlib/matplotlib/blob/b3bd929cf07ea35479fded8f739126ccc39edd6d/lib/matplotlib/figure.py#L1550-L1554\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nOS/X\n\n### Matplotlib Version\n\n3.7.1\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\nPython 3.10.9\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda\n",
  "hints_text": "Thanks for the report @maurosilber.  The problem is clearer if we set a facecolor for each subfigure:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nfor space in [0, 0.2]:\r\n    figs = plt.figure().subfigures(2, 2, hspace=space, wspace=space)\r\n    for fig, color in zip(figs.flat, 'cmyw'):\r\n        fig.set_facecolor(color)\r\n        fig.subplots().plot([1, 2])\r\nplt.show()\r\n```\r\n\r\nWith `main`, both figures look like\r\n![test](https://user-images.githubusercontent.com/10599679/226331428-3969469e-fee7-4b1d-95da-8d46ab2b31ee.png)\r\n\nJust to add something, it looks like it works when using 'constrained' layout.\nThe relevant code is https://github.com/matplotlib/matplotlib/blob/0b4e615d72eb9f131feb877a8e3bf270f399fe77/lib/matplotlib/figure.py#L2237\r\nThis didn't break - it never worked.  I imagine the position logic could be borrowed from Axes....  \nI am a first time contributer, and would like to attempt to work on this if possible! Will get a PR in the coming days\nI have been trying to understand the code associated with this and have run into some issues.\r\nIn the function _redo_transform_rel_fig (linked above), I feel that I would have to be able to access all of the subfigures within this figure in order to give the correct amount of space based on the average subfigure width/height. Would this be possible? \r\nI have been looking to this function as inspiration for the logic, but I am still trying to understand all the parameters as well:\r\nhttps://github.com/matplotlib/matplotlib/blob/0b4e615d72eb9f131feb877a8e3bf270f399fe77/lib/matplotlib/gridspec.py#L145\r\n\nThere is a `fig.subfigs` attribute which is a list of the `SubFigures` in a `Figure`.\nApologies for the slow progress, had a busier week than expected.\r\nBelow is the code I am running to test.\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nfigs = plt.figure().subfigures(2, 2, hspace=0.2, wspace=0.2)\r\nfor fig, color in zip(figs.flat, 'cmyw'):\r\n    fig.set_facecolor(color)\r\n    fig.subplots().plot([1, 2])\r\n# plt.show()\r\n\r\nfigs = plt.figure(constrained_layout=True).subfigures(2, 2, hspace=0.2, wspace=0.2)\r\nfor fig, color in zip(figs.flat, 'cmyw'):\r\n    fig.set_facecolor(color)\r\n    fig.subplots().plot([1, 2])\r\nplt.show()\r\n```\r\n\r\nThis creates two figures, one with constrained layout and one without. Below is my current output.\r\nOn the right is the constrained layout figure, and the left is the one without.\r\n<img width=\"1278\" alt=\"Screenshot 2023-04-04 at 6 20 33 PM\" src=\"https://user-images.githubusercontent.com/90582921/229935570-8ec26074-421c-4b78-a746-ce711ff6bea9.png\">\r\n\r\nMy code currently fits the facecolors in the background to the correct spots, however the actual graphs do not match. They seem to need resizing to the right and upwards in order to match the constrained layout. Would a non-constrained layout figure be expected to resize those graphs to fit the background? I would assume so but I wanted to check since I couldn't find the answer in the documentation I looked at.\n> My code currently fits the facecolors in the background to the correct spots, however the actual graphs do not match. They seem to need resizing to the right and upwards in order to match the constrained layout. Would a non-constrained layout figure be expected to resize those graphs to fit the background? I would assume so but I wanted to check since I couldn't find the answer in the documentation I looked at.\r\n\r\nI'm not quite sure what you are asking here?  Constrained layout adjusts the axes sizes to fit in the figure.  If you don't do constrained layout the axes labels can definitely spill out of the figure if you just use default axes positioning.  \r\n\nI've been digging into this.  We have a test that adds a subplot and a subfigure using the same gridspec, and the subfigure is expected to ignore the wspace on the gridspec.\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/ffd3b12969e4ab630e678617c68492bc238924fa/lib/matplotlib/tests/test_figure.py#L1425-L1439\r\n\r\n <img src=\"https://github.com/matplotlib/matplotlib/blob/main/lib/matplotlib/tests/baseline_images/test_figure/test_subfigure_scatter_size.png?raw=true\"> \r\n\r\nThe use-case envisioned in the test seems entirely reasonable to me, but I'm struggling to see how we can support that while also fixing this issue.\nWhy do you say the subfigure is expected to ignore the wspace?  I don't see that wspace is set in the test. \nSince no _wspace_ is passed, I assume the gridspec will have the default from rcParams, which is 0.2.\nSure, but I don't understand what wouldn't work in that example with `wspace` argument. Do you just mean that the default would be too large for this case? \nYes, I think in the test example, if both subfigure and subplot were respecting the 0.2 wspace then the left-hand subplots would be narrower and we’d have more whitespace in the middle.  Currently in this example the total width of the two lefthand subplots looks about the same as the width of the righthand one, so overall the figure seems well-balanced.\r\n\r\nAnother test here explicitly doesn’t expect any whitespace between subfigures, though in this case there are no subplots so you could just pass `wspace=0, hspace=0` to the gridspec and retain this result.\r\nhttps://github.com/matplotlib/matplotlib/blob/8293774ba930fb039d91c3b3d4dd68c49ff997ba/lib/matplotlib/tests/test_figure.py#L1368-L1388\r\n\r\n\nCan we just make the default wspace for subfigures be zero?\n`wspace` is a property of the gridspec.  Do you mean we should have a separate property for subfigures, e.g. `GridSpec.subfig_wspace`, with its own default?\n`gridspec` is still public API, but barely, as there are usually more elegant ways to do the same things that folks used to use gridspecs for.  \r\n\r\nIn this case, as you point out, it is better if subplots and subfigures get different wspace values, even if they are the same grid spec level.  I'm suggesting that subfigures ignores the grid spec wspace (as it currently does) and if we want a wspace for a set of subfigures that be a kwarg of the subfigure call.  \r\n\r\nHowever, I never use wspace nor hspace, and given that all these things work so much better with constrained layout, I'm not sure what the goal of manually tweaking the spacing is.  ",
  "created_at": "2023-05-23T21:58:53Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_subfigures_wspace_hspace\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_align_labels[png]\", \"lib/matplotlib/tests/test_figure.py::test_align_labels_stray_axes\", \"lib/matplotlib/tests/test_figure.py::test_figure_label\", \"lib/matplotlib/tests/test_figure.py::test_fignum_exists\", \"lib/matplotlib/tests/test_figure.py::test_clf_keyword\", \"lib/matplotlib/tests/test_figure.py::test_figure[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_gca\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_subclass\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_invalid\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[png]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_fontproperties\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_subfigures\", \"lib/matplotlib/tests/test_figure.py::test_get_suptitle_supxlabel_supylabel\", \"lib/matplotlib/tests/test_figure.py::test_alpha[png]\", \"lib/matplotlib/tests/test_figure.py::test_too_many_figures\", \"lib/matplotlib/tests/test_figure.py::test_iterability_axes_argument\", \"lib/matplotlib/tests/test_figure.py::test_set_fig_size\", \"lib/matplotlib/tests/test_figure.py::test_axes_remove\", \"lib/matplotlib/tests/test_figure.py::test_figaspect\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[both]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[major]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[minor]\", \"lib/matplotlib/tests/test_figure.py::test_change_dpi\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[1-nan]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[-1-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[inf-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_add_axes\", \"lib/matplotlib/tests/test_figure.py::test_subplots_shareax_loglabels\", \"lib/matplotlib/tests/test_figure.py::test_savefig\", \"lib/matplotlib/tests/test_figure.py::test_savefig_warns\", \"lib/matplotlib/tests/test_figure.py::test_savefig_backend\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Agg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Cairo]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_preserve_layout_engine\", \"lib/matplotlib/tests/test_figure.py::test_savefig_locate_colorbar\", \"lib/matplotlib/tests/test_figure.py::test_savefig_transparent[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_repr\", \"lib/matplotlib/tests/test_figure.py::test_valid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_invalid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_tightlayout_autolayout_deconflict[png]\", \"lib/matplotlib/tests/test_figure.py::test_layout_change_warning[constrained]\", \"lib/matplotlib/tests/test_figure.py::test_layout_change_warning[compressed]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[png]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[png]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[ps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[eps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[svg]\", \"lib/matplotlib/tests/test_figure.py::test_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_axes_removal\", \"lib/matplotlib/tests/test_figure.py::test_removed_axis\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clear]\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clf]\", \"lib/matplotlib/tests/test_figure.py::test_clf_not_redefined\", \"lib/matplotlib/tests/test_figure.py::test_picking_does_not_stale\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_twotuple\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[eps]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x2-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x3-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_all_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_tuple[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_width_ratios\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_height_ratios\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x0-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x1-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x2-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x3-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x4-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x5-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail_list_of_str\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw[BC-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw[multi_value1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_string_parser\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw_expander\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_extra_per_subplot_kw\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[AAA\\\\nBBB-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[\\\\nAAA\\\\nBBB\\\\n-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[ABC\\\\nDEF-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x0-(?m)we\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x1-There\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[AAA\\\\nc\\\\nBBB-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x3-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_hashable_keys[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[abc]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cab]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bca]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cba]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[acb]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bac]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_user_order\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_share_all\", \"lib/matplotlib/tests/test_figure.py::test_reused_gridspec\", \"lib/matplotlib/tests/test_figure.py::test_subfigure[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_dpi\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ss[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_double[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_spanning\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ticks\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_scatter_size[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_pdf\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_add_axes_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_ginput\", \"lib/matplotlib/tests/test_figure.py::test_waitforbuttonpress\", \"lib/matplotlib/tests/test_figure.py::test_kwargs_pass\", \"lib/matplotlib/tests/test_figure.py::test_rcparams[png]\", \"lib/matplotlib/tests/test_figure.py::test_deepcopy\", \"lib/matplotlib/tests/test_figure.py::test_unpickle_with_device_pixel_ratio\", \"lib/matplotlib/tests/test_figure.py::test_gridspec_no_mutate_input\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[eps]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[png]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[ps]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[svg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[svgz]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[jpeg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[jpg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[tif]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[tiff]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[webp]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[raw]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[rgba]\", \"lib/matplotlib/tests/test_figure.py::test_get_constrained_layout_pads\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.826376",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}