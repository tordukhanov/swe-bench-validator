{
  "repo": "django/django",
  "instance_id": "django__django-15869",
  "base_commit": "2fac0a18081dcc77fc860c801e5d727dc90435b3",
  "patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -2,6 +2,7 @@\n import random as random_module\n import re\n import types\n+import warnings\n from decimal import ROUND_HALF_UP, Context, Decimal, InvalidOperation\n from functools import wraps\n from inspect import unwrap\n@@ -11,6 +12,7 @@\n \n from django.utils import formats\n from django.utils.dateformat import format, time_format\n+from django.utils.deprecation import RemovedInDjango51Warning\n from django.utils.encoding import iri_to_uri\n from django.utils.html import avoid_wrapping, conditional_escape, escape, escapejs\n from django.utils.html import json_script as _json_script\n@@ -611,6 +613,11 @@ def length(value):\n @register.filter(is_safe=False)\n def length_is(value, arg):\n     \"\"\"Return a boolean of whether the value's length is the argument.\"\"\"\n+    warnings.warn(\n+        \"The length_is template filter is deprecated in favor of the length template \"\n+        \"filter and the == operator within an {% if %} tag.\",\n+        RemovedInDjango51Warning,\n+    )\n     try:\n         return len(value) == int(arg)\n     except (ValueError, TypeError):\n",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_length_is.py b/tests/template_tests/filter_tests/test_length_is.py\n--- a/tests/template_tests/filter_tests/test_length_is.py\n+++ b/tests/template_tests/filter_tests/test_length_is.py\n@@ -1,9 +1,11 @@\n from django.template.defaultfilters import length_is\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango51Warning\n \n from ..utils import setup\n \n \n+@ignore_warnings(category=RemovedInDjango51Warning)\n class LengthIsTests(SimpleTestCase):\n     @setup({\"length_is01\": '{% if some_list|length_is:\"4\" %}Four{% endif %}'})\n     def test_length_is01(self):\n@@ -103,6 +105,7 @@ def test_length_is11(self):\n         self.assertEqual(output, \"\")\n \n \n+@ignore_warnings(category=RemovedInDjango51Warning)\n class FunctionTests(SimpleTestCase):\n     def test_empty_list(self):\n         self.assertIs(length_is([], 0), True)\n@@ -111,3 +114,17 @@ def test_empty_list(self):\n     def test_string(self):\n         self.assertIs(length_is(\"a\", 1), True)\n         self.assertIs(length_is(\"a\", 10), False)\n+\n+\n+class DeprecationTests(SimpleTestCase):\n+    @setup(\n+        {\"length_is_warning\": \"{{ string|length_is:3 }}\"},\n+        test_once=True,\n+    )\n+    def test_length_is_warning(self):\n+        msg = (\n+            \"The length_is template filter is deprecated in favor of the length \"\n+            \"template filter and the == operator within an {% if %} tag.\"\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango51Warning, msg):\n+            self.engine.render_to_string(\"length_is_warning\", {\"string\": \"good\"})\n",
  "problem_statement": "Deprecate length_is template filter in favor of length.\nDescription\n\t \n\t\t(last modified by Nick Pope)\n\t \nThe length_is template filter is a vestige from the days of the {% ifequal %} and {% ifnotequal %} tags before {% if %} arrived with support for comparison with operators. Even the example in the documentation (see ​here) is poor: {{ value|length_is:\"4\" }} will only return one of three possible values - True, False, or \"\", the empty string being for errors in the provided values.\nIt seems to me that it would be better to encourage use of the length template filter with the {% if %} template tag which can provide more flexibility:\n{# Before: #}\n{% if value|length_is:\"4\" %}...{% endif %}\n{{ value|length_is:\"4\" }} ← This is of dubious use given the restricted set of possible output values.\n{# After: #}\n{% if value|length == 4 %}...{% endif %}\n{% if value|length == 4 %}True{% else %}False{% endif %} ← Much clearer but also allows customising the output values.\n",
  "hints_text": "",
  "created_at": "2022-07-22T22:05:16Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_length_is_warning (template_tests.filter_tests.test_length_is.DeprecationTests)\"]",
  "PASS_TO_PASS": "[\"test_empty_list (template_tests.filter_tests.test_length_is.FunctionTests)\", \"test_string (template_tests.filter_tests.test_length_is.FunctionTests)\", \"test_length_is01 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is02 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is03 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is04 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is05 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is06 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is07 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is08 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is09 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is10 (template_tests.filter_tests.test_length_is.LengthIsTests)\", \"test_length_is11 (template_tests.filter_tests.test_length_is.LengthIsTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.742412",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}