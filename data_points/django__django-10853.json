{
  "repo": "django/django",
  "instance_id": "django__django-10853",
  "base_commit": "eefc9550fd3b8011cc12069eb700df09f25cc4d9",
  "patch": "diff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -239,6 +239,7 @@ class BaseDatabaseFeatures:\n \n     # Does the backend support window expressions (expression OVER (...))?\n     supports_over_clause = False\n+    supports_frame_range_fixed_distance = False\n \n     # Does the backend support CAST with precision?\n     supports_cast_with_precision = True\ndiff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -52,6 +52,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     \"\"\"\n     supports_callproc_kwargs = True\n     supports_over_clause = True\n+    supports_frame_range_fixed_distance = True\n     supports_ignore_conflicts = False\n     max_query_params = 2**16 - 1\n     supports_partial_indexes = False\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -40,3 +40,4 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     supports_pragma_foreign_key_check = Database.sqlite_version_info >= (3, 20, 0)\n     can_defer_constraint_checks = supports_pragma_foreign_key_check\n     supports_functions_in_partial_indexes = Database.sqlite_version_info >= (3, 15, 0)\n+    supports_over_clause = Database.sqlite_version_info >= (3, 25, 0)\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -7,6 +7,7 @@\n from django.db import connection\n from django.db.models import fields\n from django.db.models.query_utils import Q\n+from django.db.utils import NotSupportedError\n from django.utils.deconstruct import deconstructible\n from django.utils.functional import cached_property\n from django.utils.hashable import make_hashable\n@@ -1237,6 +1238,8 @@ def set_source_expressions(self, exprs):\n \n     def as_sql(self, compiler, connection, template=None):\n         connection.ops.check_expression_support(self)\n+        if not connection.features.supports_over_clause:\n+            raise NotSupportedError('This backend does not support window expressions.')\n         expr_sql, params = compiler.compile(self.source_expression)\n         window_sql, window_params = [], []\n \n",
  "test_patch": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,5 +1,5 @@\n import datetime\n-from unittest import skipIf, skipUnless\n+from unittest import mock, skipIf, skipUnless\n \n from django.core.exceptions import FieldError\n from django.db import NotSupportedError, connection\n@@ -536,7 +536,7 @@ def test_multiple_ordering(self):\n             ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), 108000),\n         ], transform=lambda row: (row.name, row.salary, row.department, row.hire_date, row.sum))\n \n-    @skipIf(connection.vendor == 'postgresql', 'n following/preceding not supported by PostgreSQL')\n+    @skipUnlessDBFeature('supports_frame_range_fixed_distance')\n     def test_range_n_preceding_and_following(self):\n         qs = Employee.objects.annotate(sum=Window(\n             expression=Sum('salary'),\n@@ -584,6 +584,10 @@ def test_range_unbound(self):\n             ('Brown', 'Sales', 53000, datetime.date(2009, 9, 1), 148000)\n         ], transform=lambda row: (row.name, row.department, row.salary, row.hire_date, row.sum))\n \n+    @skipIf(\n+        connection.vendor == 'sqlite' and connection.Database.sqlite_version_info < (3, 27),\n+        'Nondeterministic failure on SQLite < 3.27.'\n+    )\n     def test_subquery_row_range_rank(self):\n         qs = Employee.objects.annotate(\n             highest_avg_salary_date=Subquery(\n@@ -816,6 +820,12 @@ def test_invalid_filter(self):\n         with self.assertRaisesMessage(NotSupportedError, msg):\n             Employee.objects.annotate(dense_rank=Window(expression=DenseRank())).filter(dense_rank__gte=1)\n \n+    def test_unsupported_backend(self):\n+        msg = 'This backend does not support window expressions.'\n+        with mock.patch.object(connection.features, 'supports_over_clause', False):\n+            with self.assertRaisesMessage(NotSupportedError, msg):\n+                Employee.objects.annotate(dense_rank=Window(expression=DenseRank())).get()\n+\n     def test_invalid_order_by(self):\n         msg = 'order_by must be either an Expression or a sequence of expressions'\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "problem_statement": "SQLite (pre 3.25.0) does not support window functions, raises OperationalError\nDescription\n\t\nWindow functions are supported in SQLite 3.25.0 and newer, but Python 3.6.7 and 3.7.1 only ships with SQLite 3.21.0. Window function syntax is invalid for older versions.\nAs per the title, window functions therefore aren't supported, but Django doesn't check the SQLite version or availability of window functions. Instead, when the generated SQL is executed, the sqlite3 Python library raises the SQLite syntax error as sqlite3.OperationalError, which in turn is reraised as django.db.utils.OperationalError.\nI believe this is not intended behaviour, as it is incredibly confusing, and not documented. Typically, if a database feature is not supported, Django will explicitly raise an error when attempting it, rather than allowing the SQL execution to fail. It is also normally documented.\nThe following code raises an exception (it should work for any model):\nfrom django.db.models import F, Window\nfrom django.db.models.functions.window import RowNumber\n# import the model\nMyModel.objects.annotate(rn=Window(expression=RowNumber(), order_by=[F('pk')]))\nBasic Python code that will also raise sqlite3.OperationalError:\nimport sqlite3\nconn = sqlite3.connect(\":memory:\")\nc = conn.cursor()\nc.execute(\"CREATE TABLE t0(x INTEGER PRIMARY KEY, y TEXT)\")\nc.execute(\"INSERT INTO t0 VALUES (1, 'aaa'), (2, 'ccc'), (3, 'bbb')\")\nc.execute(\"SELECT x, y, row_number() OVER (ORDER BY y) AS row_number FROM t0 ORDER BY x\")\nTested on master branch (commit c5568340a525ab9c6898ed02c257394cc47285d7) with Python 3.6.6 64-bit (Windows 10 x64). This likely also affects 2.0 and 2.1 branches.\n",
  "hints_text": "It looks like the supports_over_clause feature flag is only checked by connection.ops.window_frame_rows_start_end which is not exercised when no frame expressions are exercised. Window.as_sql should simply check supports_over_clause and raise NotSupported if it isn't.",
  "created_at": "2019-01-16T04:27:17Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_unsupported_backend (expressions_window.tests.NonQueryWindowTests)\"]",
  "PASS_TO_PASS": "[\"test_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_window_frame_notimplemented (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_filter (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_order_by (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_source_expression (expressions_window.tests.NonQueryWindowTests)\", \"test_window_frame_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_window_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_avg_salary_department (expressions_window.tests.WindowFunctionTests)\", \"test_cume_dist (expressions_window.tests.WindowFunctionTests)\", \"test_dense_rank (expressions_window.tests.WindowFunctionTests)\", \"test_department_salary (expressions_window.tests.WindowFunctionTests)\", \"Window expressions can't be used in an INSERT statement.\", \"Window expressions can't be used in an UPDATE statement.\", \"test_first_value (expressions_window.tests.WindowFunctionTests)\", \"test_function_list_of_values (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_lag (expressions_window.tests.WindowFunctionTests)\", \"test_last_value (expressions_window.tests.WindowFunctionTests)\", \"test_lead (expressions_window.tests.WindowFunctionTests)\", \"test_lead_default (expressions_window.tests.WindowFunctionTests)\", \"test_lead_offset (expressions_window.tests.WindowFunctionTests)\", \"test_max_per_year (expressions_window.tests.WindowFunctionTests)\", \"An alternative way to specify a query for FirstValue.\", \"test_multiple_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_multiple_partitioning (expressions_window.tests.WindowFunctionTests)\", \"test_nth_returns_null (expressions_window.tests.WindowFunctionTests)\", \"test_nthvalue (expressions_window.tests.WindowFunctionTests)\", \"test_ntile (expressions_window.tests.WindowFunctionTests)\", \"test_percent_rank (expressions_window.tests.WindowFunctionTests)\", \"A query with RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.\", \"test_rank (expressions_window.tests.WindowFunctionTests)\", \"test_row_number (expressions_window.tests.WindowFunctionTests)\", \"test_row_number_no_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_subquery_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_window_expression_within_subquery (expressions_window.tests.WindowFunctionTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.552641",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}