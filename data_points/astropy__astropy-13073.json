{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13073",
  "base_commit": "43ee5806e9c6f7d58c12c1cb9287b3c61abe489d",
  "patch": "diff --git a/astropy/io/ascii/core.py b/astropy/io/ascii/core.py\n--- a/astropy/io/ascii/core.py\n+++ b/astropy/io/ascii/core.py\n@@ -1016,7 +1016,10 @@ class BaseOutputter:\n     \"\"\"Output table as a dict of column objects keyed on column name.  The\n     table data are stored as plain python lists within the column objects.\n     \"\"\"\n+    # User-defined converters which gets set in ascii.ui if a `converter` kwarg\n+    # is supplied.\n     converters = {}\n+\n     # Derived classes must define default_converters and __call__\n \n     @staticmethod\n@@ -1024,18 +1027,33 @@ def _validate_and_copy(col, converters):\n         \"\"\"Validate the format for the type converters and then copy those\n         which are valid converters for this column (i.e. converter type is\n         a subclass of col.type)\"\"\"\n+        # Allow specifying a single converter instead of a list of converters.\n+        # The input `converters` must be a ``type`` value that can init np.dtype.\n+        try:\n+            # Don't allow list-like things that dtype accepts\n+            assert type(converters) is type\n+            converters = [numpy.dtype(converters)]\n+        except (AssertionError, TypeError):\n+            pass\n+\n         converters_out = []\n         try:\n             for converter in converters:\n-                converter_func, converter_type = converter\n+                try:\n+                    converter_func, converter_type = converter\n+                except TypeError as err:\n+                    if str(err).startswith('cannot unpack'):\n+                        converter_func, converter_type = convert_numpy(converter)\n+                    else:\n+                        raise\n                 if not issubclass(converter_type, NoType):\n-                    raise ValueError()\n+                    raise ValueError('converter_type must be a subclass of NoType')\n                 if issubclass(converter_type, col.type):\n                     converters_out.append((converter_func, converter_type))\n \n-        except (ValueError, TypeError):\n+        except (ValueError, TypeError) as err:\n             raise ValueError('Error: invalid format for converters, see '\n-                             'documentation\\n{}'.format(converters))\n+                             f'documentation\\n{converters}: {err}')\n         return converters_out\n \n     def _convert_vals(self, cols):\ndiff --git a/astropy/io/ascii/docs.py b/astropy/io/ascii/docs.py\n--- a/astropy/io/ascii/docs.py\n+++ b/astropy/io/ascii/docs.py\n@@ -37,9 +37,12 @@\n         Line index for the end of data not counting comment or blank lines.\n         This value can be negative to count from the end.\n     converters : dict\n-        Dictionary of converters. Keys in the dictionary are columns names,\n-        values are converter functions. In addition to single column names\n-        you can use wildcards via `fnmatch` to select multiple columns.\n+        Dictionary of converters to specify output column dtypes. Each key in\n+        the dictionary is a column name or else a name matching pattern\n+        including wildcards. The value is either a data type such as ``int`` or\n+        ``np.float32``; a list of such types which is tried in order until a\n+        successful conversion is achieved; or a list of converter tuples (see\n+        the `~astropy.io.ascii.convert_numpy` function for details).\n     data_Splitter : `~astropy.io.ascii.BaseSplitter`\n         Splitter class to split data columns\n     header_Splitter : `~astropy.io.ascii.BaseSplitter`\n",
  "test_patch": "diff --git a/astropy/io/ascii/tests/test_read.py b/astropy/io/ascii/tests/test_read.py\n--- a/astropy/io/ascii/tests/test_read.py\n+++ b/astropy/io/ascii/tests/test_read.py\n@@ -1686,3 +1686,47 @@ def test_read_converters_wildcard():\n     t = ascii.read(['Fabc Iabc', '1 2'], converters=converters)\n     assert np.issubdtype(t['Fabc'].dtype, np.float32)\n     assert not np.issubdtype(t['Iabc'].dtype, np.float32)\n+\n+\n+def test_read_converters_simplified():\n+    \"\"\"Test providing io.ascii read converters as type or dtypes instead of\n+    convert_numpy(type) outputs\"\"\"\n+    t = Table()\n+    t['a'] = [1, 2]\n+    t['b'] = [3.5, 4]\n+    t['c'] = ['True', 'False']\n+    t['d'] = ['true', 'false']  # Looks kindof like boolean but actually a string\n+    t['e'] = [5, 6]\n+\n+    out = StringIO()\n+    t.write(out, format='ascii.basic')\n+\n+    converters = {'a': str, 'e': np.float32}\n+    t2 = Table.read(out.getvalue(), format='ascii.basic', converters=converters)\n+    assert t2.pformat(show_dtype=True) == [\n+        ' a      b      c     d      e   ',\n+        'str1 float64  str5  str5 float32',\n+        '---- ------- ----- ----- -------',\n+        '   1     3.5  True  true     5.0',\n+        '   2     4.0 False false     6.0'\n+    ]\n+\n+    converters = {'a': float, '*': [np.int64, float, bool, str]}\n+    t2 = Table.read(out.getvalue(), format='ascii.basic', converters=converters)\n+    assert t2.pformat_all(show_dtype=True) == [\n+        '   a       b      c     d     e  ',\n+        'float64 float64  bool  str5 int64',\n+        '------- ------- ----- ----- -----',\n+        '    1.0     3.5  True  true     5',\n+        '    2.0     4.0 False false     6'\n+    ]\n+\n+    # Test failures\n+    for converters in ({'*': [int, 1, bool, str]},  # bad converter type\n+                       # Tuple converter where 2nd element is not a subclass of NoType\n+                       {'a': [(int, int)]},\n+                       # Tuple converter with 3 elements not 2\n+                       {'a': [(int, int, int)]}):\n+        with pytest.raises(ValueError, match='Error: invalid format for converters'):\n+            t2 = Table.read(out.getvalue(), format='ascii.basic',\n+                            converters=converters, guess=False)\n",
  "problem_statement": "Document reading True/False in ASCII table as bool not str\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n### Description\r\n<!-- Provide a general description of the feature you would like. -->\r\n<!-- If you want to, you can suggest a draft design or API. -->\r\n<!-- This way we have a deeper discussion on the feature. -->\r\n\r\n#12826 showed a use case for having an ASCII table column consisting of only \"True\" and \"False\" be read as `bool` instead of `str` (current behavior). That issue discusses reasons to maintain the current behavior, but there are simple workarounds discussed there that should be brought out to the narrative docs as examples for users.\r\n\r\nI'd suggest the following as a recommendation for users:\r\n```\r\nfrom astropy.io.ascii import convert_numpy\r\nconverters = {'*': [convert_numpy(typ) for typ in (int, float, bool, str)]}\r\n\r\n# Then for example\r\ndat = Table.read(filename, format='ascii', converters=converters)\r\n```\r\nThis new information could go in the existing section on `Converters` in the `io.ascii` read documentation.\r\n\r\n### Additional context\r\n<!-- Add any other context or screenshots about the feature request here. -->\r\n<!-- This part is optional. -->\r\n\r\n#12826\nControl dtype with ascii.read (converters API needs better doc or refactoring)\nI cannot find a way to control the dtype of the output table when reading a file into a `Table`. Consider the following MWE, with 3 numerical columns, while one of them would preferably be kept as a string:\r\n\r\n```\r\n>>> from astropy.io import ascii\r\n\r\n>>> indata = (\"# This is a dummy file\\n\" \r\n...           \"# with some text to ignore, and a header with column names\\n\" \r\n...           \"# ra dec objid\\n\" \r\n...           \"1 2 345\\n\" \r\n...           \"3 4 456\\n\") \r\n\r\n>>> ascii.read(indata, format='commented_header', header_start=2, guess=False, fast_reader=False)\r\n<Table length=2>\r\n  ra   dec  objid\r\nint64 int64 int64\r\n----- ----- -----\r\n    1     2   345\r\n    3     4   456\r\n\r\n>>> ascii.read(indata, format='commented_header', header_start=2, dtye=('i8', 'i8', 'S10'), guess=False, fast_reader=False)\r\nTypeError: __init__() got an unexpected keyword argument 'dtye'\r\n```\r\n\r\nReading in the same with `np.loadtxt` and then converting to a Table works, but it should ideally be supported directly.\r\n\r\n```\r\nimport numpy as np\r\nfrom astropy.table import Table\r\n\r\n>>> Table(np.loadtxt('/tmp/a', dtype=[('ra', 'i8'), ('dec', 'i8'), ('objid', 'S10')]))\r\n<Table length=2>\r\n  ra   dec   objid \r\nint64 int64 bytes10\r\n----- ----- -------\r\n    1     2     345\r\n    3     4     456\r\n```\n",
  "hints_text": "Hi!\r\n\r\nI'm wondering if something as simple as this is sufficient or if you think it needs its own example altogether:\r\n```python  \r\n>>> import numpy as np\r\n>>> converters = {'uint_col': [ascii.convert_numpy(np.uint)],\r\n...               'float32_col': [ascii.convert_numpy(np.float32)],\r\n...               'bool_col': [ascii.convert_numpy(bool)]}\r\n>>> ascii.read('file.dat', converters=converters)\r\n```\r\n\r\nWhile we're at it should we update the preceding paragraph\r\n\r\n> The type provided to [convert_numpy()](https://docs.astropy.org/en/stable/api/astropy.io.ascii.convert_numpy.html#astropy.io.ascii.convert_numpy) must be a valid [NumPy type](https://numpy.org/doc/stable/user/basics.types.html) such as numpy.int, numpy.uint, numpy.int8, numpy.int64, numpy.float, numpy.float64, or numpy.str.\r\n\r\n to use the regular python types for `string`, `int` and `bool` instead of the deprecated `np.string`, `np.int` and `np.bool`?\nThanks for looking into this @pjs902. I think the advantage of the original suggested workaround is that it will work for any table regardless of column names. I suspect that in most cases of tables with `True/False` strings, the user wants this applied to every column that looks like a bool.\r\n\r\nDefinitely :+1: on updating the docs to use regular Python types instead of the deprecated numpy versions.\n@taldcroft Sorry if I wasn't clear, I had only changed the column names to make it obvious that we had columns with different types, not suggesting that we require certain column names for certain types, I could switch these back to the original column names which were just `col1`, `col2`, `col3`.\n@pjs902 - I had a mistake in the original suggested workaround to document, which I have now fixed:\r\n```\r\nconverters = {'*': [convert_numpy(typ) for typ in (int, float, bool, str)]}\r\n```\r\nWith this definition of `converters`, there is no need to specify any column names at all since the `*` glob matches every column name.\n@taldcroft Both solutions seem to work equally well, do you think it's better to switch the example in the docs to \r\n\r\n> converters = {'*': [convert_numpy(typ) for typ in (int, float, bool, str)]}\r\n\r\nor better to leave the existing pattern as is, just including a boolean example? Something like this:\r\n\r\n> converters = {'col1': [ascii.convert_numpy(np.uint)],\r\n  ...      'col2': [ascii.convert_numpy(np.float32)],\r\n  ...       'col3': [ascii.convert_numpy(bool)]}\r\n\r\n\r\n I think, for the documentation, I prefer the existing pattern where each column is individually specified as is. In the next paragraph, we explicitly go over the usage of `fnmatch` for matching glob patterns but I'm happy to defer to your judgement here. \n@pjs902 - hopefully you haven't started in on this, because this morning I got an idea to simplify the converter input to not require this whole `ascii.convert_numpy()` wrapper. So I'm just going to fold in this bool not str into my doc updates now.\n@taldcroft No worries! Sounds like a much nicer solution!\nI used [converters](https://docs.astropy.org/en/stable/io/ascii/read.html#converters) when I had to do this a long time ago. And I think it still works? \r\n\r\n```python\r\n>>> converters = {\r\n...     'ra': [ascii.convert_numpy(np.int)],\r\n...     'dec': [ascii.convert_numpy(np.int)],\r\n...     'objid': [ascii.convert_numpy(np.str)]}\r\n>>> t = ascii.read(\r\n...     indata, format='commented_header', header_start=2,\r\n...     converters=converters, guess=False, fast_reader=False)\r\n>>> t\r\n<Table length=2>\r\n  ra   dec  objid\r\nint32 int32  str3\r\n----- ----- -----\r\n    1     2   345\r\n    3     4   456\r\n```\r\n\r\nYou might have to play around with it until you get the exact data type you want though. Hope this helps!\nOh, yes, indeed, this is exactly what I need. One minor comment though, it would be helpful to have the word `dtype` somewhere in the docs, as I was searching for `dtype` in that and many other docs pages without any useful results. (maybe it's just me, that case this can be closed without a docs change, otherwise this can be a good \"first issue\").\r\n\r\nIt's also not clear what the \"previous section\" is referred to in ``These take advantage of the convert_numpy() function which returns a two-element tuple (converter_func, converter_type) as described in the previous section.`` \nYes, the `converters` mechanism is not that obvious and a perfect example of overdesign from this 10+ year old package.\r\n\r\nIt probably would be easy to add a `dtype` argument to mostly replace `converters`. This would pretty much just generate those `converters` at the point when needed.  Thoughts?\nI agree that the `converters` API could be improved; I have a very old feature request at #4934  , which will be moot if you use a new API like `dtype=[np.int, np.int, np.str]` or `dtype=np.int` (the latter assumes broadcasting to all columns, which might or might not be controversial).\nI've implemented this in a few lines of code. As always the pain is testing, docs etc. But maybe there will be a PR on the way.\r\n```\r\nIn [2]: >>> ascii.read(indata, format='commented_header', header_start=2, dtype=('i8', 'i4', 'S10'), guess=False, fast_reader=False)\r\nOut[2]: \r\n<Table length=2>\r\n  ra   dec   objid \r\nint64 int32 bytes10\r\n----- ----- -------\r\n    1     2     345\r\n    3     4     456\r\n```\nThank you, this looks very good to me. I suppose converter is a bit like clobber for fits, makes total sense when you already know about it, but a bit difficult to discover. The only question whether dtype should also understand the list of tuples that include the column name to be consistent with numpy. I don't think that API is that great, still is worth some thinking about.\nDo we... need an APE? 😸 \nI was planning for the `dtype` to be consistent what `Table` accepts, which is basically just a sequence of simple dtypes. It starts getting complicated otherwise because of multiple potentially conflicting ways to provide the names. Allowing names in the dtype would also not fit in well with the current implementation in `io.ascii`.",
  "created_at": "2022-04-06T16:29:58Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/io/ascii/tests/test_read.py::test_read_converters_simplified\"]",
  "PASS_TO_PASS": "[\"astropy/io/ascii/tests/test_read.py::test_convert_overflow[True]\", \"astropy/io/ascii/tests/test_read.py::test_convert_overflow[fast_reader2]\", \"astropy/io/ascii/tests/test_read.py::test_convert_overflow[fast_reader3]\", \"astropy/io/ascii/tests/test_read.py::test_convert_overflow[force]\", \"astropy/io/ascii/tests/test_read.py::test_read_specify_converters_with_names\", \"astropy/io/ascii/tests/test_read.py::test_read_remove_and_rename_columns\", \"astropy/io/ascii/tests/test_read.py::test_guess_with_names_arg\", \"astropy/io/ascii/tests/test_read.py::test_guess_with_format_arg\", \"astropy/io/ascii/tests/test_read.py::test_guess_with_delimiter_arg\", \"astropy/io/ascii/tests/test_read.py::test_reading_mixed_delimiter_tabs_spaces\", \"astropy/io/ascii/tests/test_read.py::test_read_with_names_arg[True]\", \"astropy/io/ascii/tests/test_read.py::test_read_with_names_arg[False]\", \"astropy/io/ascii/tests/test_read.py::test_read_with_names_arg[force]\", \"astropy/io/ascii/tests/test_read.py::test_read_all_files[True]\", \"astropy/io/ascii/tests/test_read.py::test_read_all_files[False]\", \"astropy/io/ascii/tests/test_read.py::test_read_all_files[force]\", \"astropy/io/ascii/tests/test_read.py::test_read_all_files_via_table[True]\", \"astropy/io/ascii/tests/test_read.py::test_read_all_files_via_table[False]\", \"astropy/io/ascii/tests/test_read.py::test_read_all_files_via_table[force]\", \"astropy/io/ascii/tests/test_read.py::test_guess_all_files\", \"astropy/io/ascii/tests/test_read.py::test_validate_read_kwargs\", \"astropy/io/ascii/tests/test_read.py::test_daophot_indef\", \"astropy/io/ascii/tests/test_read.py::test_daophot_types\", \"astropy/io/ascii/tests/test_read.py::test_daophot_header_keywords\", \"astropy/io/ascii/tests/test_read.py::test_daophot_multiple_aperture\", \"astropy/io/ascii/tests/test_read.py::test_daophot_multiple_aperture2\", \"astropy/io/ascii/tests/test_read.py::test_empty_table_no_header[True]\", \"astropy/io/ascii/tests/test_read.py::test_empty_table_no_header[False]\", \"astropy/io/ascii/tests/test_read.py::test_empty_table_no_header[force]\", \"astropy/io/ascii/tests/test_read.py::test_wrong_quote[True]\", \"astropy/io/ascii/tests/test_read.py::test_wrong_quote[False]\", \"astropy/io/ascii/tests/test_read.py::test_wrong_quote[force]\", \"astropy/io/ascii/tests/test_read.py::test_extra_data_col[True]\", \"astropy/io/ascii/tests/test_read.py::test_extra_data_col[False]\", \"astropy/io/ascii/tests/test_read.py::test_extra_data_col[force]\", \"astropy/io/ascii/tests/test_read.py::test_extra_data_col2[True]\", \"astropy/io/ascii/tests/test_read.py::test_extra_data_col2[False]\", \"astropy/io/ascii/tests/test_read.py::test_extra_data_col2[force]\", \"astropy/io/ascii/tests/test_read.py::test_missing_file\", \"astropy/io/ascii/tests/test_read.py::test_set_names[True]\", \"astropy/io/ascii/tests/test_read.py::test_set_names[False]\", \"astropy/io/ascii/tests/test_read.py::test_set_names[force]\", \"astropy/io/ascii/tests/test_read.py::test_set_include_names[True]\", \"astropy/io/ascii/tests/test_read.py::test_set_include_names[False]\", \"astropy/io/ascii/tests/test_read.py::test_set_include_names[force]\", \"astropy/io/ascii/tests/test_read.py::test_set_exclude_names[True]\", \"astropy/io/ascii/tests/test_read.py::test_set_exclude_names[False]\", \"astropy/io/ascii/tests/test_read.py::test_set_exclude_names[force]\", \"astropy/io/ascii/tests/test_read.py::test_include_names_daophot\", \"astropy/io/ascii/tests/test_read.py::test_exclude_names_daophot\", \"astropy/io/ascii/tests/test_read.py::test_custom_process_lines\", \"astropy/io/ascii/tests/test_read.py::test_custom_process_line\", \"astropy/io/ascii/tests/test_read.py::test_custom_splitters\", \"astropy/io/ascii/tests/test_read.py::test_start_end\", \"astropy/io/ascii/tests/test_read.py::test_set_converters\", \"astropy/io/ascii/tests/test_read.py::test_from_string[True]\", \"astropy/io/ascii/tests/test_read.py::test_from_string[False]\", \"astropy/io/ascii/tests/test_read.py::test_from_string[force]\", \"astropy/io/ascii/tests/test_read.py::test_from_filelike[True]\", \"astropy/io/ascii/tests/test_read.py::test_from_filelike[False]\", \"astropy/io/ascii/tests/test_read.py::test_from_filelike[force]\", \"astropy/io/ascii/tests/test_read.py::test_from_lines[True]\", \"astropy/io/ascii/tests/test_read.py::test_from_lines[False]\", \"astropy/io/ascii/tests/test_read.py::test_from_lines[force]\", \"astropy/io/ascii/tests/test_read.py::test_comment_lines\", \"astropy/io/ascii/tests/test_read.py::test_fill_values[True]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values[False]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values[force]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_col[True]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_col[False]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_col[force]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_include_names[True]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_include_names[False]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_include_names[force]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_exclude_names[True]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_exclude_names[False]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_exclude_names[force]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_list[True]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_list[False]\", \"astropy/io/ascii/tests/test_read.py::test_fill_values_list[force]\", \"astropy/io/ascii/tests/test_read.py::test_masking_Cds_Mrt\", \"astropy/io/ascii/tests/test_read.py::test_null_Ipac\", \"astropy/io/ascii/tests/test_read.py::test_Ipac_meta\", \"astropy/io/ascii/tests/test_read.py::test_set_guess_kwarg\", \"astropy/io/ascii/tests/test_read.py::test_read_rdb_wrong_type[True]\", \"astropy/io/ascii/tests/test_read.py::test_read_rdb_wrong_type[False]\", \"astropy/io/ascii/tests/test_read.py::test_read_rdb_wrong_type[force]\", \"astropy/io/ascii/tests/test_read.py::test_default_missing[True]\", \"astropy/io/ascii/tests/test_read.py::test_default_missing[False]\", \"astropy/io/ascii/tests/test_read.py::test_default_missing[force]\", \"astropy/io/ascii/tests/test_read.py::test_header_start_exception\", \"astropy/io/ascii/tests/test_read.py::test_csv_table_read\", \"astropy/io/ascii/tests/test_read.py::test_overlapping_names[True]\", \"astropy/io/ascii/tests/test_read.py::test_overlapping_names[False]\", \"astropy/io/ascii/tests/test_read.py::test_overlapping_names[force]\", \"astropy/io/ascii/tests/test_read.py::test_sextractor_units\", \"astropy/io/ascii/tests/test_read.py::test_sextractor_last_column_array\", \"astropy/io/ascii/tests/test_read.py::test_list_with_newlines\", \"astropy/io/ascii/tests/test_read.py::test_commented_csv\", \"astropy/io/ascii/tests/test_read.py::test_meta_comments\", \"astropy/io/ascii/tests/test_read.py::test_guess_fail\", \"astropy/io/ascii/tests/test_read.py::test_guessing_file_object\", \"astropy/io/ascii/tests/test_read.py::test_pformat_roundtrip\", \"astropy/io/ascii/tests/test_read.py::test_ipac_abbrev\", \"astropy/io/ascii/tests/test_read.py::test_almost_but_not_quite_daophot\", \"astropy/io/ascii/tests/test_read.py::test_commented_header_comments[False]\", \"astropy/io/ascii/tests/test_read.py::test_commented_header_comments[force]\", \"astropy/io/ascii/tests/test_read.py::test_probably_html\", \"astropy/io/ascii/tests/test_read.py::test_data_header_start[True]\", \"astropy/io/ascii/tests/test_read.py::test_data_header_start[False]\", \"astropy/io/ascii/tests/test_read.py::test_data_header_start[force]\", \"astropy/io/ascii/tests/test_read.py::test_table_with_no_newline\", \"astropy/io/ascii/tests/test_read.py::test_path_object\", \"astropy/io/ascii/tests/test_read.py::test_column_conversion_error\", \"astropy/io/ascii/tests/test_read.py::test_no_units_for_char_columns\", \"astropy/io/ascii/tests/test_read.py::test_initial_column_fill_values\", \"astropy/io/ascii/tests/test_read.py::test_latex_no_trailing_backslash\", \"astropy/io/ascii/tests/test_read.py::test_read_with_encoding[utf8]\", \"astropy/io/ascii/tests/test_read.py::test_read_with_encoding[latin1]\", \"astropy/io/ascii/tests/test_read.py::test_read_with_encoding[cp1252]\", \"astropy/io/ascii/tests/test_read.py::test_unsupported_read_with_encoding\", \"astropy/io/ascii/tests/test_read.py::test_read_chunks_input_types\", \"astropy/io/ascii/tests/test_read.py::test_read_chunks_formats[True]\", \"astropy/io/ascii/tests/test_read.py::test_read_chunks_formats[False]\", \"astropy/io/ascii/tests/test_read.py::test_read_chunks_chunk_size_too_small\", \"astropy/io/ascii/tests/test_read.py::test_read_chunks_table_changes\", \"astropy/io/ascii/tests/test_read.py::test_read_non_ascii\", \"astropy/io/ascii/tests/test_read.py::test_kwargs_dict_guess[True]\", \"astropy/io/ascii/tests/test_read.py::test_kwargs_dict_guess[False]\", \"astropy/io/ascii/tests/test_read.py::test_kwargs_dict_guess[force]\", \"astropy/io/ascii/tests/test_read.py::test_deduplicate_names_basic[False-False]\", \"astropy/io/ascii/tests/test_read.py::test_deduplicate_names_basic[False-True]\", \"astropy/io/ascii/tests/test_read.py::test_deduplicate_names_basic[force-False]\", \"astropy/io/ascii/tests/test_read.py::test_deduplicate_names_basic[force-True]\", \"astropy/io/ascii/tests/test_read.py::test_include_names_rdb_fast\", \"astropy/io/ascii/tests/test_read.py::test_deduplicate_names_with_types[False]\", \"astropy/io/ascii/tests/test_read.py::test_deduplicate_names_with_types[force]\", \"astropy/io/ascii/tests/test_read.py::test_set_invalid_names[False-False]\", \"astropy/io/ascii/tests/test_read.py::test_set_invalid_names[False-True]\", \"astropy/io/ascii/tests/test_read.py::test_set_invalid_names[force-False]\", \"astropy/io/ascii/tests/test_read.py::test_set_invalid_names[force-True]\", \"astropy/io/ascii/tests/test_read.py::test_read_masked_bool\", \"astropy/io/ascii/tests/test_read.py::test_read_converters_wildcard\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.525008",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}