{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8028",
  "base_commit": "5e6da19f0e44a0ae83944fb6ce18f18f781e1a6e",
  "patch": "diff --git a/sphinx/ext/autosummary/__init__.py b/sphinx/ext/autosummary/__init__.py\n--- a/sphinx/ext/autosummary/__init__.py\n+++ b/sphinx/ext/autosummary/__init__.py\n@@ -75,7 +75,7 @@\n from sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\n from sphinx.environment import BuildEnvironment\n from sphinx.environment.adapters.toctree import TocTree\n-from sphinx.ext.autodoc import Documenter\n+from sphinx.ext.autodoc import Documenter, INSTANCEATTR\n from sphinx.ext.autodoc.directive import DocumenterBridge, Options\n from sphinx.ext.autodoc.importer import import_module\n from sphinx.ext.autodoc.mock import mock\n@@ -285,6 +285,19 @@ def run(self) -> List[Node]:\n \n         return nodes\n \n+    def import_by_name(self, name: str, prefixes: List[str]) -> Tuple[str, Any, Any, str]:\n+        with mock(self.config.autosummary_mock_imports):\n+            try:\n+                return import_by_name(name, prefixes)\n+            except ImportError as exc:\n+                # check existence of instance attribute\n+                try:\n+                    return import_ivar_by_name(name, prefixes)\n+                except ImportError:\n+                    pass\n+\n+                raise exc  # re-raise ImportError if instance attribute not found\n+\n     def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n         \"\"\"Try to import the given names, and return a list of\n         ``[(name, signature, summary_string, real_name), ...]``.\n@@ -302,8 +315,7 @@ def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n                 display_name = name.split('.')[-1]\n \n             try:\n-                with mock(self.config.autosummary_mock_imports):\n-                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n+                real_name, obj, parent, modname = self.import_by_name(name, prefixes=prefixes)\n             except ImportError:\n                 logger.warning(__('autosummary: failed to import %s'), name,\n                                location=self.get_source_info())\n@@ -659,6 +671,23 @@ def _import_by_name(name: str) -> Tuple[Any, Any, str]:\n         raise ImportError(*e.args) from e\n \n \n+def import_ivar_by_name(name: str, prefixes: List[str] = [None]) -> Tuple[str, Any, Any, str]:\n+    \"\"\"Import an instance variable that has the given *name*, under one of the\n+    *prefixes*.  The first name that succeeds is used.\n+    \"\"\"\n+    try:\n+        name, attr = name.rsplit(\".\", 1)\n+        real_name, obj, parent, modname = import_by_name(name, prefixes)\n+        qualname = real_name.replace(modname + \".\", \"\")\n+        analyzer = ModuleAnalyzer.for_module(modname)\n+        if (qualname, attr) in analyzer.find_attr_docs():\n+            return real_name + \".\" + attr, INSTANCEATTR, obj, modname\n+    except (ImportError, ValueError):\n+        pass\n+\n+    raise ImportError\n+\n+\n # -- :autolink: (smart default role) -------------------------------------------\n \n def autolink_role(typ: str, rawtext: str, etext: str, lineno: int, inliner: Inliner,\ndiff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -41,7 +41,7 @@\n from sphinx.config import Config\n from sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\n from sphinx.ext.autodoc import Documenter\n-from sphinx.ext.autosummary import import_by_name, get_documenter\n+from sphinx.ext.autosummary import import_by_name, import_ivar_by_name, get_documenter\n from sphinx.locale import __\n from sphinx.pycode import ModuleAnalyzer, PycodeError\n from sphinx.registry import SphinxComponentRegistry\n@@ -413,8 +413,13 @@ def generate_autosummary_docs(sources: List[str], output_dir: str = None,\n             name, obj, parent, modname = import_by_name(entry.name)\n             qualname = name.replace(modname + \".\", \"\")\n         except ImportError as e:\n-            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n-            continue\n+            try:\n+                # try to importl as an instance attribute\n+                name, obj, parent, modname = import_ivar_by_name(entry.name)\n+                qualname = name.replace(modname + \".\", \"\")\n+            except ImportError:\n+                _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n+                continue\n \n         context = {}\n         if app:\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autosummary/autosummary_dummy_module.py b/tests/roots/test-ext-autosummary/autosummary_dummy_module.py\n--- a/tests/roots/test-ext-autosummary/autosummary_dummy_module.py\n+++ b/tests/roots/test-ext-autosummary/autosummary_dummy_module.py\n@@ -16,7 +16,8 @@ class Bar:\n         pass\n \n     def __init__(self):\n-        pass\n+        #: docstring\n+        self.value = 1\n \n     def bar(self):\n         pass\ndiff --git a/tests/roots/test-ext-autosummary/index.rst b/tests/roots/test-ext-autosummary/index.rst\n--- a/tests/roots/test-ext-autosummary/index.rst\n+++ b/tests/roots/test-ext-autosummary/index.rst\n@@ -10,6 +10,7 @@\n    autosummary_dummy_module\n    autosummary_dummy_module.Foo\n    autosummary_dummy_module.Foo.Bar\n+   autosummary_dummy_module.Foo.value\n    autosummary_dummy_module.bar\n    autosummary_dummy_module.qux\n    autosummary_importfail\ndiff --git a/tests/test_ext_autosummary.py b/tests/test_ext_autosummary.py\n--- a/tests/test_ext_autosummary.py\n+++ b/tests/test_ext_autosummary.py\n@@ -293,15 +293,17 @@ def test_autosummary_generate(app, status, warning):\n                                                                                nodes.row,\n                                                                                nodes.row,\n                                                                                nodes.row,\n+                                                                               nodes.row,\n                                                                                nodes.row)])])\n     assert_node(doctree[4][0], addnodes.toctree, caption=\"An autosummary\")\n \n-    assert len(doctree[3][0][0][2]) == 5\n+    assert len(doctree[3][0][0][2]) == 6\n     assert doctree[3][0][0][2][0].astext() == 'autosummary_dummy_module\\n\\n'\n     assert doctree[3][0][0][2][1].astext() == 'autosummary_dummy_module.Foo()\\n\\n'\n     assert doctree[3][0][0][2][2].astext() == 'autosummary_dummy_module.Foo.Bar()\\n\\n'\n-    assert doctree[3][0][0][2][3].astext() == 'autosummary_dummy_module.bar(x[, y])\\n\\n'\n-    assert doctree[3][0][0][2][4].astext() == 'autosummary_dummy_module.qux\\n\\na module-level attribute'\n+    assert doctree[3][0][0][2][3].astext() == 'autosummary_dummy_module.Foo.value\\n\\ndocstring'\n+    assert doctree[3][0][0][2][4].astext() == 'autosummary_dummy_module.bar(x[, y])\\n\\n'\n+    assert doctree[3][0][0][2][5].astext() == 'autosummary_dummy_module.qux\\n\\na module-level attribute'\n \n     module = (app.srcdir / 'generated' / 'autosummary_dummy_module.rst').read_text()\n     assert ('   .. autosummary::\\n'\n@@ -333,6 +335,11 @@ def test_autosummary_generate(app, status, warning):\n             '\\n'\n             '.. autoclass:: Foo.Bar\\n' in FooBar)\n \n+    Foo_value = (app.srcdir / 'generated' / 'autosummary_dummy_module.Foo.value.rst').read_text()\n+    assert ('.. currentmodule:: autosummary_dummy_module\\n'\n+            '\\n'\n+            '.. autoattribute:: Foo.value' in Foo_value)\n+\n     qux = (app.srcdir / 'generated' / 'autosummary_dummy_module.qux.rst').read_text()\n     assert ('.. currentmodule:: autosummary_dummy_module\\n'\n             '\\n'\n",
  "problem_statement": "Instance attributes are omitted with autosummary\nThis issue is a followup of #7948. Sorry, I forgot to open it.\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nInstance attributes are omitted when using the autosummary, as they cannot be imported. Consider the following class\r\n\r\n```python\r\n# contents of test_mod.py\r\n\r\nclass Test:\r\n    \"\"\"Test class\"\"\"\r\n\r\n    #: int. Some class attribute\r\n    test: int = 1\r\n\r\n    def __init__(self, a: int):\r\n        #: int. An instance attribute\r\n        self.a = 1\r\n\r\n```\r\n\r\n`autodoc` via \r\n\r\n```rst\r\n.. autoclass:: Test\r\n    :members:\r\n``` \r\n\r\nwill document the `a` attribute, but `autosummary` via\r\n\r\n```rst\r\n.. autosummary::\r\n\r\n    Test.a\r\n    Test.test\r\n```\r\nwon't.\r\n\r\n**Describe the solution you'd like**\r\nInstance attributes should be documented, too\r\n\r\n**Describe alternatives you've considered**\r\nit did work before 1dcfc44, i.e. for `sphinx<3.1` (although the documentation was omitted).\r\n\r\n**Additional context**\r\n\r\n- #7948\r\n- files to reproduce the issue (including page build) [test.zip](https://github.com/sphinx-doc/sphinx/files/4982157/test.zip)\r\n- Screenshot of index.html\r\n  ![image](https://user-images.githubusercontent.com/9960249/88545154-ddf88400-d01a-11ea-906c-193e39fbb4d3.png)\r\n\r\n\n",
  "hints_text": "@tk0miya, I cannot  add labels or milestones here, but nonetheless already closed #7948 \nOkay, I'll try to fix this if I have time until the next release.",
  "created_at": "2020-08-01T10:24:14Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"tests/test_ext_autosummary.py::test_autosummary_generate\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autosummary.py::test_mangle_signature\", \"tests/test_ext_autosummary.py::test_escaping\", \"tests/test_ext_autosummary.py::test_autosummary_generate_content_for_module\", \"tests/test_ext_autosummary.py::test_autosummary_generate_content_for_module_skipped\", \"tests/test_ext_autosummary.py::test_autosummary_generate_overwrite1\", \"tests/test_ext_autosummary.py::test_autosummary_generate_overwrite2\", \"tests/test_ext_autosummary.py::test_autosummary_recursive\", \"tests/test_ext_autosummary.py::test_autosummary_latex_table_colspec\", \"tests/test_ext_autosummary.py::test_import_by_name\", \"tests/test_ext_autosummary.py::test_autosummary_imported_members\", \"tests/test_ext_autosummary.py::test_generate_autosummary_docs_property\", \"tests/test_ext_autosummary.py::test_autosummary_skip_member\", \"tests/test_ext_autosummary.py::test_autosummary_template\", \"tests/test_ext_autosummary.py::test_empty_autosummary_generate\", \"tests/test_ext_autosummary.py::test_invalid_autosummary_generate\", \"tests/test_ext_autosummary.py::test_autogen\"]",
  "environment_setup_commit": "f92fa6443fe6f457ab0c26d41eb229e825fda5e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.050444",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}