{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-11787",
  "base_commit": "a53c4ad94a9657702764e9b5dc4a3eaa01c0f54d",
  "patch": "diff --git a/sympy/solvers/solvers.py b/sympy/solvers/solvers.py\n--- a/sympy/solvers/solvers.py\n+++ b/sympy/solvers/solvers.py\n@@ -2683,13 +2683,12 @@ def nsolve(*args, **kwargs):\n     >>> cos(_)\n     0.73908513321516064165531208767387340401341175890076\n \n-    mpmath.findroot is used, you can find there more extensive documentation,\n-    especially concerning keyword parameters and available solvers. Note,\n-    however, that this routine works only with the numerator of the function\n-    in the one-dimensional case, and for very steep functions near the root\n-    this may lead to a failure in the verification of the root. In this case\n-    you should use the flag `verify=False` and independently verify the\n-    solution.\n+    mpmath.findroot is used and you can find there more extensive\n+    documentation, especially concerning keyword parameters and\n+    available solvers. Note, however, that functions which are very\n+    steep near the root the verification of the solution may fail. In\n+    this case you should use the flag `verify=False` and\n+    independently verify the solution.\n \n     >>> from sympy import cos, cosh\n     >>> from sympy.abc import i\n@@ -2711,6 +2710,20 @@ def nsolve(*args, **kwargs):\n     >>> bounds = lambda i: (3.14*i, 3.14*(i + 1))\n     >>> nsolve(f, bounds(100), solver='bisect', verify=False)\n     315.730061685774\n+\n+    Alternatively, a function may be better behaved when the\n+    denominator is ignored. Since this is not always the case, however,\n+    the decision of what function to use is left to the discretion of\n+    the user.\n+\n+    >>> eq = x**2/(1 - x)/(1 - 2*x)**2 - 100\n+    >>> nsolve(eq, 0.46)\n+    Traceback (most recent call last):\n+    ...\n+    ValueError: Could not find root within given tolerance. (10000 > 2.1684e-19)\n+    Try another starting point or tweak arguments.\n+    >>> nsolve(eq.as_numer_denom()[0], 0.46)\n+    0.46792545969349058\n     \"\"\"\n     # there are several other SymPy functions that use method= so\n     # guard against that here\n@@ -2762,7 +2775,9 @@ def nsolve(*args, **kwargs):\n                 expected a one-dimensional and numerical function'''))\n \n         # the function is much better behaved if there is no denominator\n-        f = f.as_numer_denom()[0]\n+        # but sending the numerator is left to the user since sometimes\n+        # the function is better behaved when the denominator is present\n+        # e.g., issue 11768\n \n         f = lambdify(fargs, f, modules)\n         return Float(findroot(f, x0, **kwargs))\n",
  "test_patch": "diff --git a/sympy/solvers/tests/test_numeric.py b/sympy/solvers/tests/test_numeric.py\n--- a/sympy/solvers/tests/test_numeric.py\n+++ b/sympy/solvers/tests/test_numeric.py\n@@ -6,6 +6,23 @@\n from sympy.utilities.pytest import raises, XFAIL\n from sympy.utilities.decorator import conserve_mpmath_dps\n \n+@XFAIL\n+def test_nsolve_fail():\n+    x = symbols('x')\n+    # Sometimes it is better to use the numerator (issue 4829)\n+    # but sometimes it is not (issue 11768) so leave this to\n+    # the discretion of the user\n+    ans = nsolve(x**2/(1 - x)/(1 - 2*x)**2 - 100, x, 0)\n+    assert ans > 0.46 and ans < 0.47\n+\n+\n+def test_nsolve_denominator():\n+    x = symbols('x')\n+    # Test that nsolve uses the full expression (numerator and denominator).\n+    ans = nsolve((x**2 + 3*x + 2)/(x + 2), -2.1)\n+    # The root -2 was divided out, so make sure we don't find it.\n+    assert ans == -1.0\n+\n def test_nsolve():\n     # onedimensional\n     x = Symbol('x')\n@@ -14,8 +31,6 @@ def test_nsolve():\n     # Testing checks on number of inputs\n     raises(TypeError, lambda: nsolve(Eq(2*x, 2)))\n     raises(TypeError, lambda: nsolve(Eq(2*x, 2), x, 1, 2))\n-    # issue 4829\n-    assert nsolve(x**2/(1 - x)/(1 - 2*x)**2 - 100, x, 0)  # doesn't fail\n     # multidimensional\n     x1 = Symbol('x1')\n     x2 = Symbol('x2')\n",
  "problem_statement": "nsolve wrong result\n``` py\n>>> print(E.subs(sols[0]).diff(t))\n-0.0243197537608033*(-0.636658291554981*t + 0.561884537092944)/(-0.0243197537608033*t + 1)**2 + (-2*(t + 1)/(2*t - 2)**2 + 1/(2*t - 2))*exp((t + 1)/(2*t - 2)) + 0.636658291554981/(-0.0243197537608033*t + 1)\n>>> nsolve(diff(E.subs(sols[0]), t), .9)\nmpf('0.99996577349047597')\n>>> E.subs(sols[0]).diff(t).subs(t, 0.99996577349047597) \n0.654436749282803\n```\n\nHere's a plot of the function in question. As you can see, the root should be around 0.7.\n\n![8pzjlzvm767vqaaaaasuvork5cyii](https://cloud.githubusercontent.com/assets/71486/19700941/503fa83c-9ac7-11e6-8f51-76ce5bfd4441.png)\n\n",
  "hints_text": "Using a different solver gives the right answer:\n\n``` py\n>>> nsolve(diff(E.subs(sols[0]), t), (.5, 0.9), solver='bisect')\nmpf('0.70295119676297064')\n```\n\n`nsolve` only uses the numerator of the expression...and the numerator is close to zero at the reported root so it fools the solver.\n\nSo we should probably make it not just use the numerator. Numerically, the denominator can be significant if it is near 0 where the numerator is. \n\nIt's probably better to make nsolve just use whatever function it is given and leave the choice of what function to use (numerator or rational expression) up to the user. The problem with leaving a denominator is that the singularities often cause problems for root solvers. But sometimes, as here, you get problems if you ignore the denominator.\n",
  "created_at": "2016-10-29T21:33:05Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_nsolve_denominator\"]",
  "PASS_TO_PASS": "[\"test_nsolve\", \"test_issue_6408\", \"test_increased_dps\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.072532",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}