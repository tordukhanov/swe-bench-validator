{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-6059",
  "base_commit": "789a3818fec81754cf95bef2a0b591678142c227",
  "patch": "diff --git a/pylint/checkers/base_checker.py b/pylint/checkers/base_checker.py\n--- a/pylint/checkers/base_checker.py\n+++ b/pylint/checkers/base_checker.py\n@@ -61,7 +61,15 @@ def __init__(\n \n     def __gt__(self, other):\n         \"\"\"Permit to sort a list of Checker by name.\"\"\"\n-        return f\"{self.name}{self.msgs}\" > (f\"{other.name}{other.msgs}\")\n+        return f\"{self.name}{self.msgs}\" > f\"{other.name}{other.msgs}\"\n+\n+    def __eq__(self, other):\n+        \"\"\"Permit to assert Checkers are equal.\"\"\"\n+        return f\"{self.name}{self.msgs}\" == f\"{other.name}{other.msgs}\"\n+\n+    def __hash__(self):\n+        \"\"\"Make Checker hashable.\"\"\"\n+        return hash(f\"{self.name}{self.msgs}\")\n \n     def __repr__(self):\n         status = \"Checker\" if self.enabled else \"Disabled checker\"\n",
  "test_patch": "diff --git a/tests/checkers/unittest_base_checker.py b/tests/checkers/unittest_base_checker.py\n--- a/tests/checkers/unittest_base_checker.py\n+++ b/tests/checkers/unittest_base_checker.py\n@@ -33,6 +33,17 @@ class LessBasicChecker(OtherBasicChecker):\n     )\n \n \n+class DifferentBasicChecker(BaseChecker):\n+    name = \"different\"\n+    msgs = {\n+        \"W0002\": (\n+            \"Blah blah example.\",\n+            \"blah-blah-example\",\n+            \"I only exist to be different to OtherBasicChecker :(\",\n+        )\n+    }\n+\n+\n def test_base_checker_doc() -> None:\n     basic = OtherBasicChecker()\n     expected_beginning = \"\"\"\\\n@@ -65,3 +76,13 @@ def test_base_checker_doc() -> None:\n \n     assert str(less_basic) == expected_beginning + expected_middle + expected_end\n     assert repr(less_basic) == repr(basic)\n+\n+\n+def test_base_checker_ordering() -> None:\n+    \"\"\"Test ordering of checkers based on their __gt__ method.\"\"\"\n+    fake_checker_1 = OtherBasicChecker()\n+    fake_checker_2 = LessBasicChecker()\n+    fake_checker_3 = DifferentBasicChecker()\n+    assert fake_checker_1 < fake_checker_3\n+    assert fake_checker_2 < fake_checker_3\n+    assert fake_checker_1 == fake_checker_2\n",
  "problem_statement": "Is `BaseChecker.__gt__` required\n### Bug description\n\nAs noted by @DanielNoord [here](https://github.com/PyCQA/pylint/pull/5938#discussion_r837867526), [`BaseCheck.__gt__`](https://github.com/PyCQA/pylint/blob/742e60dc07077cdd3338dffc3bb809cd4c27085f/pylint/checkers/base_checker.py#L62-L64) is not currently covered. If this required then we should add a unit test, otherwise we can remove this method.\n\n### Configuration\n\n```ini\nN/A\n```\n\n\n### Command used\n\n```shell\nN/A\n```\n\n\n### Pylint output\n\n```shell\nN/A\n```\n\n\n### Expected behavior\n\nN/A\n\n### Pylint version\n\n```shell\nN/A\n```\n\n\n### OS / Environment\n\n_No response_\n\n### Additional dependencies\n\n_No response_\n",
  "hints_text": "I think this was used originally to be able to assert that  a list of checker is equal to another one in tests. If it's not covered it means we do not do that anymore.\nIt's used in Sphinx and maybe downstream libraries see #6047 .\nShall we add a no coverage param then?\nIt's pretty easy to add a unit test for this so will make a quick PR",
  "created_at": "2022-03-30T18:23:36Z",
  "version": "2.14",
  "FAIL_TO_PASS": "[\"tests/checkers/unittest_base_checker.py::test_base_checker_ordering\"]",
  "PASS_TO_PASS": "[\"tests/checkers/unittest_base_checker.py::test_base_checker_doc\"]",
  "environment_setup_commit": "680edebc686cad664bbed934a490aeafa775f163",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.912081",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}