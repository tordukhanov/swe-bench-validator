{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-22734",
  "base_commit": "a395083238625500dd3fa879e4976617d5353342",
  "patch": "diff --git a/lib/matplotlib/tri/tripcolor.py b/lib/matplotlib/tri/tripcolor.py\n--- a/lib/matplotlib/tri/tripcolor.py\n+++ b/lib/matplotlib/tri/tripcolor.py\n@@ -115,13 +115,14 @@ def tripcolor(ax, *args, alpha=1.0, norm=None, cmap=None, vmin=None,\n     if 'antialiaseds' not in kwargs and ec.lower() == \"none\":\n         kwargs['antialiaseds'] = False\n \n+    _api.check_isinstance((Normalize, None), norm=norm)\n     if shading == 'gouraud':\n         if facecolors is not None:\n             raise ValueError(\n                 \"shading='gouraud' can only be used when the colors \"\n                 \"are specified at the points, not at the faces.\")\n-        collection = TriMesh(tri, **kwargs)\n-        colors = point_colors\n+        collection = TriMesh(tri, alpha=alpha, array=point_colors,\n+                             cmap=cmap, norm=norm, **kwargs)\n     else:\n         # Vertices of triangles.\n         maskedTris = tri.get_masked_triangles()\n@@ -136,14 +137,9 @@ def tripcolor(ax, *args, alpha=1.0, norm=None, cmap=None, vmin=None,\n             colors = facecolors[~tri.mask]\n         else:\n             colors = facecolors\n+        collection = PolyCollection(verts, alpha=alpha, array=colors,\n+                                    cmap=cmap, norm=norm, **kwargs)\n \n-        collection = PolyCollection(verts, **kwargs)\n-\n-    collection.set_alpha(alpha)\n-    collection.set_array(colors)\n-    _api.check_isinstance((Normalize, None), norm=norm)\n-    collection.set_cmap(cmap)\n-    collection.set_norm(norm)\n     collection._scale_norm(norm, vmin, vmax)\n     ax.grid(False)\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_triangulation.py b/lib/matplotlib/tests/test_triangulation.py\n--- a/lib/matplotlib/tests/test_triangulation.py\n+++ b/lib/matplotlib/tests/test_triangulation.py\n@@ -266,6 +266,16 @@ def test_tripcolor_color():\n     ax.tripcolor(x, y, facecolors=[1, 2])  # faces\n \n \n+def test_tripcolor_clim():\n+    np.random.seed(19680801)\n+    a, b, c = np.random.rand(10), np.random.rand(10), np.random.rand(10)\n+\n+    ax = plt.figure().add_subplot()\n+    clim = (0.25, 0.75)\n+    norm = ax.tripcolor(a, b, c, clim=clim).norm\n+    assert((norm.vmin, norm.vmax) == clim)\n+\n+\n def test_tripcolor_warnings():\n     x = [-1, 0, 1, 0]\n     y = [0, -1, 0, 1]\n",
  "problem_statement": "[Bug]: tripcolor ignores clim\n### Bug summary\n\n```python\r\nfrom pylab import *\r\ntripcolor(np.random.rand(100), np.random.rand(100), np.random.rand(100), clim=(0, 0.5))\r\ncolorbar()\r\nshow()\r\n```\r\nshows that tripcolor ignores clim.\n\n### Code for reproduction\n\n```python\nSee above.\n```\n\n\n### Actual outcome\n\nColorbar/colormapping goes from nearly 0 to nearly 1.\n\n### Expected outcome\n\nColorbar/colormapping goes from 0 to 0.5.\n\n### Additional information\n\nThis is the same issue as #21146/#21525: kwargs should be handled a bit further down in the implementation of tripcolor() (just before calling _scale_norm).\n\n### Operating system\n\narch linux\n\n### Matplotlib Version\n\n3.6.0.dev1920+gdfd83c2c5d\n\n### Matplotlib Backend\n\nmplcairo\n\n### Python version\n\n310\n\n### Jupyter version\n\nENOSUCHLIB\n\n### Installation\n\ngit checkout\n",
  "hints_text": "",
  "created_at": "2022-03-30T21:01:05Z",
  "version": "3.5",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_triangulation.py::test_tripcolor_clim\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_triangulation.py::TestTriangulationParams::test_extract_triangulation_params[args0-kwargs0-expected0]\", \"lib/matplotlib/tests/test_triangulation.py::TestTriangulationParams::test_extract_triangulation_params[args1-kwargs1-expected1]\", \"lib/matplotlib/tests/test_triangulation.py::TestTriangulationParams::test_extract_triangulation_params[args2-kwargs2-expected2]\", \"lib/matplotlib/tests/test_triangulation.py::TestTriangulationParams::test_extract_triangulation_params[args3-kwargs3-expected3]\", \"lib/matplotlib/tests/test_triangulation.py::TestTriangulationParams::test_extract_triangulation_params[args4-kwargs4-expected4]\", \"lib/matplotlib/tests/test_triangulation.py::TestTriangulationParams::test_extract_triangulation_params[args5-kwargs5-expected5]\", \"lib/matplotlib/tests/test_triangulation.py::test_extract_triangulation_positional_mask\", \"lib/matplotlib/tests/test_triangulation.py::test_triangulation_init\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay_duplicate_points\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay_points_in_line\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay_insufficient_points[x0-y0]\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay_insufficient_points[x1-y1]\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay_insufficient_points[x2-y2]\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay_insufficient_points[x3-y3]\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay_insufficient_points[x4-y4]\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay_insufficient_points[x5-y5]\", \"lib/matplotlib/tests/test_triangulation.py::test_delaunay_robust\", \"lib/matplotlib/tests/test_triangulation.py::test_tripcolor[png]\", \"lib/matplotlib/tests/test_triangulation.py::test_tripcolor_color\", \"lib/matplotlib/tests/test_triangulation.py::test_tripcolor_warnings\", \"lib/matplotlib/tests/test_triangulation.py::test_no_modify\", \"lib/matplotlib/tests/test_triangulation.py::test_trifinder\", \"lib/matplotlib/tests/test_triangulation.py::test_triinterp\", \"lib/matplotlib/tests/test_triangulation.py::test_triinterpcubic_C1_continuity\", \"lib/matplotlib/tests/test_triangulation.py::test_triinterpcubic_cg_solver\", \"lib/matplotlib/tests/test_triangulation.py::test_triinterpcubic_geom_weights\", \"lib/matplotlib/tests/test_triangulation.py::test_triinterp_colinear\", \"lib/matplotlib/tests/test_triangulation.py::test_triinterp_transformations\", \"lib/matplotlib/tests/test_triangulation.py::test_tri_smooth_contouring[png]\", \"lib/matplotlib/tests/test_triangulation.py::test_tri_smooth_gradient[png]\", \"lib/matplotlib/tests/test_triangulation.py::test_tritools\", \"lib/matplotlib/tests/test_triangulation.py::test_trirefine\", \"lib/matplotlib/tests/test_triangulation.py::test_trirefine_masked[linear]\", \"lib/matplotlib/tests/test_triangulation.py::test_trirefine_masked[cubic]\", \"lib/matplotlib/tests/test_triangulation.py::test_triplot_return\", \"lib/matplotlib/tests/test_triangulation.py::test_trirefiner_fortran_contiguous_triangles\", \"lib/matplotlib/tests/test_triangulation.py::test_qhull_triangle_orientation\", \"lib/matplotlib/tests/test_triangulation.py::test_trianalyzer_mismatched_indices\", \"lib/matplotlib/tests/test_triangulation.py::test_tricontourf_decreasing_levels\", \"lib/matplotlib/tests/test_triangulation.py::test_internal_cpp_api\", \"lib/matplotlib/tests/test_triangulation.py::test_qhull_large_offset\", \"lib/matplotlib/tests/test_triangulation.py::test_tricontour_non_finite_z\", \"lib/matplotlib/tests/test_triangulation.py::test_tricontourset_reuse\", \"lib/matplotlib/tests/test_triangulation.py::test_triplot_with_ls[png]\", \"lib/matplotlib/tests/test_triangulation.py::test_triplot_with_ls[pdf]\"]",
  "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.795434",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}