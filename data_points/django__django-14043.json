{
  "repo": "django/django",
  "instance_id": "django__django-14043",
  "base_commit": "9f125fce7971714333d23c7f554411342466721c",
  "patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -16,6 +16,7 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):\n         dbname = settings_dict.get('NAME')\n         user = settings_dict.get('USER')\n         passwd = settings_dict.get('PASSWORD')\n+        passfile = options.get('passfile')\n         service = options.get('service')\n         sslmode = options.get('sslmode')\n         sslrootcert = options.get('sslrootcert')\n@@ -48,6 +49,8 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):\n             env['PGSSLCERT'] = str(sslcert)\n         if sslkey:\n             env['PGSSLKEY'] = str(sslkey)\n+        if passfile:\n+            env['PGPASSFILE'] = str(passfile)\n         return args, env\n \n     def runshell(self, parameters):\n",
  "test_patch": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -73,6 +73,34 @@ def test_service(self):\n             (['psql'], {'PGSERVICE': 'django_test'}),\n         )\n \n+    def test_passfile(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'dbname',\n+                'USER': 'someuser',\n+                'HOST': 'somehost',\n+                'PORT': '444',\n+                'OPTIONS': {\n+                    'passfile': '~/.custompgpass',\n+                },\n+            }),\n+            (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {'PGPASSFILE': '~/.custompgpass'},\n+            ),\n+        )\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'OPTIONS': {\n+                    'service': 'django_test',\n+                    'passfile': '~/.custompgpass',\n+                },\n+            }),\n+            (\n+                ['psql'], {'PGSERVICE': 'django_test', 'PGPASSFILE': '~/.custompgpass'},\n+            ),\n+        )\n+\n     def test_column(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\n",
  "problem_statement": "Add support for PostgreSQL passfile to dbshell.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nThe dbshell management commands all carry the risk of leaking passwords through process information (as noted in a comment in db.backends.mysql.client). As of Django 3.2, there is the settings_to_cmd_args_env class method, which provides an API to generate the environment needed to call the utility.\nUsing the environment is somewhat more secure, but the environment of processes can potentially still be read. Both MySQL and PostgreSQL advise against using the respective environment variables.\nSpecifying ​a password file works for connections but dbshell doesn't support it, see comment.\nI want to propose a way to solve this. I already did this in django-dbbackup, which also happened to construct a command line before:\n​https://github.com/django-dbbackup/django-dbbackup/pull/385/commits/222152afe9032e98249cada6d7e200a3eb751e63\nThe mechanism is that in addition to the environment and args, a temporary file is generated. For PostgreSQL, this is a file in .pgpass format; for MySQL, it could be an options file. I wrapped that handling in a neat context manager.\nFor Django itself, I did a quick shot at PostgreSQL as well, as attached in the patch. The patch is not complete, and is only intended as a base for discussion. If we find consensus about the mechanism, I will happily complete it and extend to the other backends.\n",
  "hints_text": "The proposed solution was used in Django < 3.0 and changed to PGPASSWORD in cf826c9a91015c8da2ad4910b12e2ed83e2fb20f, see #30173. We discussed this recently @django-security and agreed that using environment variables should be enough for all backends, because only old UNIX systems such as AIX allow non-root users to see process environment variables via ps. We could, however, add dbshell support for a custom passfile: diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py index 2339880967..fa41d25228 100644 --- a/django/db/backends/postgresql/client.py +++ b/django/db/backends/postgresql/client.py @@ -16,6 +16,7 @@ class DatabaseClient(BaseDatabaseClient): dbname = settings_dict.get('NAME') or 'postgres' user = settings_dict.get('USER') passwd = settings_dict.get('PASSWORD') + passfile = options.get('passfile') service = options.get('service') sslmode = options.get('sslmode') sslrootcert = options.get('sslrootcert') @@ -44,6 +45,8 @@ class DatabaseClient(BaseDatabaseClient): env['PGSSLCERT'] = str(sslcert) if sslkey: env['PGSSLKEY'] = str(sslkey) + if passfile: + env['PGPASSFILE'] = str(passfile) return args, env def runshell(self, parameters): If you agree, I'd be happy to accept such ticket.\nI understand the intention why it was removed, although I do not agree. What is the plan forward once MySQL removes support for MYSQL_PWD? The comment there already acknowledges that it was deprecated and will be removed, and using a deprecated interface does not seem to good an idea. Supporting an explicit password file seems appropriate, but in that case, it should be honoured by the database backend itself as well (psycopg2 uses libpq, so this should work). Having doubled configuration for the regular backend and dbshell does not seem appropriate to me.\nWhat is the plan forward once MySQL removes support for MYSQL_PWD? The comment there already acknowledges that it was deprecated and will be removed, and using a deprecated interface does not seem to good an idea. Yes it's deprecated but as far as I'm aware without any reasonable alternative, creating a MySQL on the fly is not an option, IMO. Users can always use option files without providing passwords in settings. Supporting an explicit password file seems appropriate, but in that case, it should be honoured by the database backend itself as well (psycopg2 uses libpq, so this should work). Having doubled configuration for the regular backend and dbshell does not seem appropriate to me. All OPTIONS are already passed to the new connections, so: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', ... 'OPTIONS': {'passfile': '/home/user/my_custom_pgpass'}, } } works for connections, but it is not set for dbshell.",
  "created_at": "2021-02-24T16:18:21Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_passfile (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\"]",
  "PASS_TO_PASS": "[\"test_accent (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_basic (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_column (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_crash_password_does_not_leak (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_nopass (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_parameters (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_service (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\", \"test_ssl_certificate (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.679544",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}