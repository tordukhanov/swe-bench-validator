{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-4750",
  "base_commit": "0f1eb96c924bad60ea87edd9139325adabfefa33",
  "patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -365,12 +365,23 @@ def _calculate_col_width(col_items):\n     return col_width\n \n \n-def _mapping_repr(mapping, title, summarizer, col_width=None):\n+def _mapping_repr(mapping, title, summarizer, col_width=None, max_rows=None):\n     if col_width is None:\n         col_width = _calculate_col_width(mapping)\n+    if max_rows is None:\n+        max_rows = OPTIONS[\"display_max_rows\"]\n     summary = [f\"{title}:\"]\n     if mapping:\n-        summary += [summarizer(k, v, col_width) for k, v in mapping.items()]\n+        if len(mapping) > max_rows:\n+            first_rows = max_rows // 2 + max_rows % 2\n+            items = list(mapping.items())\n+            summary += [summarizer(k, v, col_width) for k, v in items[:first_rows]]\n+            if max_rows > 1:\n+                last_rows = max_rows // 2\n+                summary += [pretty_print(\"    ...\", col_width) + \" ...\"]\n+                summary += [summarizer(k, v, col_width) for k, v in items[-last_rows:]]\n+        else:\n+            summary += [summarizer(k, v, col_width) for k, v in mapping.items()]\n     else:\n         summary += [EMPTY_REPR]\n     return \"\\n\".join(summary)\ndiff --git a/xarray/core/options.py b/xarray/core/options.py\n--- a/xarray/core/options.py\n+++ b/xarray/core/options.py\n@@ -1,26 +1,28 @@\n import warnings\n \n-DISPLAY_WIDTH = \"display_width\"\n ARITHMETIC_JOIN = \"arithmetic_join\"\n+CMAP_DIVERGENT = \"cmap_divergent\"\n+CMAP_SEQUENTIAL = \"cmap_sequential\"\n+DISPLAY_MAX_ROWS = \"display_max_rows\"\n+DISPLAY_STYLE = \"display_style\"\n+DISPLAY_WIDTH = \"display_width\"\n ENABLE_CFTIMEINDEX = \"enable_cftimeindex\"\n FILE_CACHE_MAXSIZE = \"file_cache_maxsize\"\n-WARN_FOR_UNCLOSED_FILES = \"warn_for_unclosed_files\"\n-CMAP_SEQUENTIAL = \"cmap_sequential\"\n-CMAP_DIVERGENT = \"cmap_divergent\"\n KEEP_ATTRS = \"keep_attrs\"\n-DISPLAY_STYLE = \"display_style\"\n+WARN_FOR_UNCLOSED_FILES = \"warn_for_unclosed_files\"\n \n \n OPTIONS = {\n-    DISPLAY_WIDTH: 80,\n     ARITHMETIC_JOIN: \"inner\",\n+    CMAP_DIVERGENT: \"RdBu_r\",\n+    CMAP_SEQUENTIAL: \"viridis\",\n+    DISPLAY_MAX_ROWS: 12,\n+    DISPLAY_STYLE: \"html\",\n+    DISPLAY_WIDTH: 80,\n     ENABLE_CFTIMEINDEX: True,\n     FILE_CACHE_MAXSIZE: 128,\n-    WARN_FOR_UNCLOSED_FILES: False,\n-    CMAP_SEQUENTIAL: \"viridis\",\n-    CMAP_DIVERGENT: \"RdBu_r\",\n     KEEP_ATTRS: \"default\",\n-    DISPLAY_STYLE: \"html\",\n+    WARN_FOR_UNCLOSED_FILES: False,\n }\n \n _JOIN_OPTIONS = frozenset([\"inner\", \"outer\", \"left\", \"right\", \"exact\"])\n@@ -32,13 +34,14 @@ def _positive_integer(value):\n \n \n _VALIDATORS = {\n-    DISPLAY_WIDTH: _positive_integer,\n     ARITHMETIC_JOIN: _JOIN_OPTIONS.__contains__,\n+    DISPLAY_MAX_ROWS: _positive_integer,\n+    DISPLAY_STYLE: _DISPLAY_OPTIONS.__contains__,\n+    DISPLAY_WIDTH: _positive_integer,\n     ENABLE_CFTIMEINDEX: lambda value: isinstance(value, bool),\n     FILE_CACHE_MAXSIZE: _positive_integer,\n-    WARN_FOR_UNCLOSED_FILES: lambda value: isinstance(value, bool),\n     KEEP_ATTRS: lambda choice: choice in [True, False, \"default\"],\n-    DISPLAY_STYLE: _DISPLAY_OPTIONS.__contains__,\n+    WARN_FOR_UNCLOSED_FILES: lambda value: isinstance(value, bool),\n }\n \n \n@@ -57,8 +60,8 @@ def _warn_on_setting_enable_cftimeindex(enable_cftimeindex):\n \n \n _SETTERS = {\n-    FILE_CACHE_MAXSIZE: _set_file_cache_maxsize,\n     ENABLE_CFTIMEINDEX: _warn_on_setting_enable_cftimeindex,\n+    FILE_CACHE_MAXSIZE: _set_file_cache_maxsize,\n }\n \n \n",
  "test_patch": "diff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py\n--- a/xarray/tests/test_formatting.py\n+++ b/xarray/tests/test_formatting.py\n@@ -463,3 +463,36 @@ def test_large_array_repr_length():\n \n     result = repr(da).splitlines()\n     assert len(result) < 50\n+\n+\n+@pytest.mark.parametrize(\n+    \"display_max_rows, n_vars, n_attr\",\n+    [(50, 40, 30), (35, 40, 30), (11, 40, 30), (1, 40, 30)],\n+)\n+def test__mapping_repr(display_max_rows, n_vars, n_attr):\n+    long_name = \"long_name\"\n+    a = np.core.defchararray.add(long_name, np.arange(0, n_vars).astype(str))\n+    b = np.core.defchararray.add(\"attr_\", np.arange(0, n_attr).astype(str))\n+    attrs = {k: 2 for k in b}\n+    coords = dict(time=np.array([0, 1]))\n+    data_vars = dict()\n+    for v in a:\n+        data_vars[v] = xr.DataArray(\n+            name=v,\n+            data=np.array([3, 4]),\n+            dims=[\"time\"],\n+            coords=coords,\n+        )\n+    ds = xr.Dataset(data_vars)\n+    ds.attrs = attrs\n+\n+    with xr.set_options(display_max_rows=display_max_rows):\n+\n+        # Parse the data_vars print and show only data_vars rows:\n+        summary = formatting.data_vars_repr(ds.data_vars).split(\"\\n\")\n+        summary = [v for v in summary if long_name in v]\n+\n+        # The length should be less than or equal to display_max_rows:\n+        len_summary = len(summary)\n+        data_vars_print_size = min(display_max_rows, len_summary)\n+        assert len_summary == data_vars_print_size\n",
  "problem_statement": "Limit number of data variables shown in repr\n<!-- Please include a self-contained copy-pastable example that generates the issue if possible.\r\n\r\nPlease be concise with code posted. See guidelines below on how to provide a good bug report:\r\n\r\n- Craft Minimal Bug Reports: http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports\r\n- Minimal Complete Verifiable Examples: https://stackoverflow.com/help/mcve\r\n\r\nBug reports that follow these guidelines are easier to diagnose, and so are often handled much more quickly.\r\n-->\r\n\r\n**What happened**:\r\nxarray feels very unresponsive when using datasets with >2000 data variables because it has to print all the 2000 variables everytime you print something to console.\r\n\r\n**What you expected to happen**:\r\nxarray should limit the number of variables printed to console. Maximum maybe 25?\r\nSame idea probably apply to dimensions, coordinates and attributes as well,\r\n\r\npandas only shows 2 for reference, the first and last variables.\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nimport numpy as np\r\nimport xarray as xr\r\n\r\na = np.arange(0, 2000)\r\nb = np.core.defchararray.add(\"long_variable_name\", a.astype(str))\r\ndata_vars = dict()\r\nfor v in b:\r\n    data_vars[v] = xr.DataArray(\r\n        name=v,\r\n        data=[3, 4],\r\n        dims=[\"time\"],\r\n        coords=dict(time=[0, 1])\r\n    )\r\nds = xr.Dataset(data_vars)\r\n\r\n# Everything above feels fast. Printing to console however takes about 13 seconds for me:\r\nprint(ds)\r\n```\r\n\r\n**Anything else we need to know?**:\r\nOut of scope brainstorming:\r\nThough printing 2000 variables is probably madness for most people it is kind of nice to show all variables because you sometimes want to know what happened to a few other variables as well. Is there already an easy and fast way to create subgroup of the dataset, so we don' have to rely on the dataset printing everything to the console everytime?\r\n\r\n**Environment**:\r\n\r\n<details><summary>Output of <tt>xr.show_versions()</tt></summary>\r\n\r\nxr.show_versions()\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)]\r\npython-bits: 64\r\nOS: Windows\r\nOS-release: 10\r\n\r\nlibhdf5: 1.10.4\r\nlibnetcdf: None\r\n\r\nxarray: 0.16.2\r\npandas: 1.1.5\r\nnumpy: 1.17.5\r\nscipy: 1.4.1\r\nnetCDF4: None\r\npydap: None\r\nh5netcdf: None\r\nh5py: 2.10.0\r\nNio: None\r\nzarr: None\r\ncftime: None\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: 1.3.2\r\ndask: 2020.12.0\r\ndistributed: 2020.12.0\r\nmatplotlib: 3.3.2\r\ncartopy: None\r\nseaborn: 0.11.1\r\nnumbagg: None\r\npint: None\r\nsetuptools: 51.0.0.post20201207\r\npip: 20.3.3\r\nconda: 4.9.2\r\npytest: 6.2.1\r\nIPython: 7.19.0\r\nsphinx: 3.4.0\r\n\r\n\r\n</details>\r\n\n",
  "hints_text": "üëçüèΩ on adding a configurable option to the list of options supported via `xr.set_options()`\r\n\r\n```python\r\nimport xarray as xr\r\nxr.set_options(display_max_num_variables=25)\r\n```\r\n\r\n\nYes, this sounds like a welcome new feature! As a general rule, the output of repr() should fit on one screen.",
  "created_at": "2021-01-02T21:14:50Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_formatting.py::test__mapping_repr[50-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[35-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[11-40-30]\", \"xarray/tests/test_formatting.py::test__mapping_repr[1-40-30]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_formatting.py::TestFormatting::test_get_indexer_at_least_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_first_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_n_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_last_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_item\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_items\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_array_flat\", \"xarray/tests/test_formatting.py::TestFormatting::test_pretty_print\", \"xarray/tests/test_formatting.py::TestFormatting::test_maybe_truncate\", \"xarray/tests/test_formatting.py::TestFormatting::test_format_timestamp_out_of_bounds\", \"xarray/tests/test_formatting.py::TestFormatting::test_attribute_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_array_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_attrs_repr_with_array\", \"xarray/tests/test_formatting.py::TestFormatting::test_diff_dataset_repr\", \"xarray/tests/test_formatting.py::TestFormatting::test_array_repr\", \"xarray/tests/test_formatting.py::test_inline_variable_array_repr_custom_repr\", \"xarray/tests/test_formatting.py::test_set_numpy_options\", \"xarray/tests/test_formatting.py::test_short_numpy_repr\", \"xarray/tests/test_formatting.py::test_large_array_repr_length\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.882350",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}