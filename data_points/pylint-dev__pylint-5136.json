{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-5136",
  "base_commit": "3a5a91c0fa0761555aed2cb03270e2bb63b400fb",
  "patch": "diff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py\n--- a/pylint/checkers/misc.py\n+++ b/pylint/checkers/misc.py\n@@ -29,13 +29,13 @@\n \n import re\n import tokenize\n-from typing import Optional\n+from typing import List, Optional\n \n from astroid import nodes\n \n from pylint.checkers import BaseChecker\n from pylint.interfaces import IRawChecker, ITokenChecker\n-from pylint.message import MessagesHandlerMixIn\n+from pylint.typing import ManagedMessage\n from pylint.utils.pragma_parser import OPTION_PO, PragmaParserError, parse_pragma\n \n \n@@ -54,15 +54,21 @@ class ByIdManagedMessagesChecker(BaseChecker):\n     }\n     options = ()\n \n+    def _clear_by_id_managed_msgs(self) -> None:\n+        self.linter._by_id_managed_msgs.clear()\n+\n+    def _get_by_id_managed_msgs(self) -> List[ManagedMessage]:\n+        return self.linter._by_id_managed_msgs\n+\n     def process_module(self, node: nodes.Module) -> None:\n         \"\"\"Inspect the source file to find messages activated or deactivated by id.\"\"\"\n-        managed_msgs = MessagesHandlerMixIn.get_by_id_managed_msgs()\n+        managed_msgs = self._get_by_id_managed_msgs()\n         for (mod_name, msgid, symbol, lineno, is_disabled) in managed_msgs:\n             if mod_name == node.name:\n                 verb = \"disable\" if is_disabled else \"enable\"\n                 txt = f\"'{msgid}' is cryptic: use '# pylint: {verb}={symbol}' instead\"\n                 self.add_message(\"use-symbolic-message-instead\", line=lineno, args=txt)\n-        MessagesHandlerMixIn.clear_by_id_managed_msgs()\n+        self._clear_by_id_managed_msgs()\n \n \n class EncodingChecker(BaseChecker):\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -23,6 +23,7 @@\n     MSG_STATE_SCOPE_CONFIG,\n     MSG_STATE_SCOPE_MODULE,\n     MSG_TYPES,\n+    MSG_TYPES_LONG,\n     MSG_TYPES_STATUS,\n )\n from pylint.lint.expand_modules import expand_modules\n@@ -37,14 +38,14 @@\n     get_fatal_error_message,\n     prepare_crash_report,\n )\n-from pylint.message import (\n-    Message,\n-    MessageDefinition,\n-    MessageDefinitionStore,\n-    MessagesHandlerMixIn,\n-)\n+from pylint.message import Message, MessageDefinition, MessageDefinitionStore\n from pylint.reporters.ureports import nodes as report_nodes\n-from pylint.typing import FileItem, MessageLocationTuple, ModuleDescriptionDict\n+from pylint.typing import (\n+    FileItem,\n+    ManagedMessage,\n+    MessageLocationTuple,\n+    ModuleDescriptionDict,\n+)\n from pylint.utils import ASTWalker, FileState, LinterStats, ModuleStats, utils\n from pylint.utils.pragma_parser import (\n     OPTION_PO,\n@@ -163,7 +164,6 @@ def _load_reporter_by_class(reporter_class: str) -> type:\n # pylint: disable=too-many-instance-attributes,too-many-public-methods\n class PyLinter(\n     config.OptionsManagerMixIn,\n-    MessagesHandlerMixIn,\n     reporters.ReportsHandlerMixIn,\n     checkers.BaseTokenChecker,\n ):\n@@ -540,6 +540,7 @@ def __init__(self, options=(), reporter=None, option_groups=(), pylintrc=None):\n         # Attributes related to message (state) handling\n         self.msg_status = 0\n         self._msgs_state: Dict[str, bool] = {}\n+        self._by_id_managed_msgs: List[ManagedMessage] = []\n \n         reporters.ReportsHandlerMixIn.__init__(self)\n         super().__init__(\n@@ -1516,3 +1517,152 @@ def add_ignored_message(\n                 message_definition.msgid,\n                 line,\n             )\n+\n+    # Setting the state (disabled/enabled) of messages and registering them\n+\n+    def _message_symbol(self, msgid: str) -> List[str]:\n+        \"\"\"Get the message symbol of the given message id\n+\n+        Return the original message id if the message does not\n+        exist.\n+        \"\"\"\n+        try:\n+            return [md.symbol for md in self.msgs_store.get_message_definitions(msgid)]\n+        except exceptions.UnknownMessageError:\n+            return [msgid]\n+\n+    def _set_one_msg_status(\n+        self, scope: str, msg: MessageDefinition, line: Optional[int], enable: bool\n+    ) -> None:\n+        \"\"\"Set the status of an individual message\"\"\"\n+        if scope == \"module\":\n+            self.file_state.set_msg_status(msg, line, enable)\n+            if not enable and msg.symbol != \"locally-disabled\":\n+                self.add_message(\n+                    \"locally-disabled\", line=line, args=(msg.symbol, msg.msgid)\n+                )\n+        else:\n+            msgs = self._msgs_state\n+            msgs[msg.msgid] = enable\n+            # sync configuration object\n+            self.config.enable = [\n+                self._message_symbol(mid) for mid, val in sorted(msgs.items()) if val\n+            ]\n+            self.config.disable = [\n+                self._message_symbol(mid)\n+                for mid, val in sorted(msgs.items())\n+                if not val\n+            ]\n+\n+    def _set_msg_status(\n+        self,\n+        msgid: str,\n+        enable: bool,\n+        scope: str = \"package\",\n+        line: Optional[int] = None,\n+        ignore_unknown: bool = False,\n+    ) -> None:\n+        \"\"\"Do some tests and then iterate over message defintions to set state\"\"\"\n+        assert scope in (\"package\", \"module\")\n+        if msgid == \"all\":\n+            for _msgid in MSG_TYPES:\n+                self._set_msg_status(_msgid, enable, scope, line, ignore_unknown)\n+            return\n+\n+        # msgid is a category?\n+        category_id = msgid.upper()\n+        if category_id not in MSG_TYPES:\n+            category_id_formatted = MSG_TYPES_LONG.get(category_id)\n+        else:\n+            category_id_formatted = category_id\n+        if category_id_formatted is not None:\n+            for _msgid in self.msgs_store._msgs_by_category.get(category_id_formatted):\n+                self._set_msg_status(_msgid, enable, scope, line)\n+            return\n+\n+        # msgid is a checker name?\n+        if msgid.lower() in self._checkers:\n+            for checker in self._checkers[msgid.lower()]:\n+                for _msgid in checker.msgs:\n+                    self._set_msg_status(_msgid, enable, scope, line)\n+            return\n+\n+        # msgid is report id?\n+        if msgid.lower().startswith(\"rp\"):\n+            if enable:\n+                self.enable_report(msgid)\n+            else:\n+                self.disable_report(msgid)\n+            return\n+\n+        try:\n+            # msgid is a symbolic or numeric msgid.\n+            message_definitions = self.msgs_store.get_message_definitions(msgid)\n+        except exceptions.UnknownMessageError:\n+            if ignore_unknown:\n+                return\n+            raise\n+        for message_definition in message_definitions:\n+            self._set_one_msg_status(scope, message_definition, line, enable)\n+\n+    def _register_by_id_managed_msg(\n+        self, msgid_or_symbol: str, line: Optional[int], is_disabled: bool = True\n+    ) -> None:\n+        \"\"\"If the msgid is a numeric one, then register it to inform the user\n+        it could furnish instead a symbolic msgid.\"\"\"\n+        if msgid_or_symbol[1:].isdigit():\n+            try:\n+                symbol = self.msgs_store.message_id_store.get_symbol(\n+                    msgid=msgid_or_symbol\n+                )\n+            except exceptions.UnknownMessageError:\n+                return\n+            managed = ManagedMessage(\n+                self.current_name, msgid_or_symbol, symbol, line, is_disabled\n+            )\n+            self._by_id_managed_msgs.append(managed)\n+\n+    def disable(\n+        self,\n+        msgid: str,\n+        scope: str = \"package\",\n+        line: Optional[int] = None,\n+        ignore_unknown: bool = False,\n+    ) -> None:\n+        \"\"\"Disable a message for a scope\"\"\"\n+        self._set_msg_status(\n+            msgid, enable=False, scope=scope, line=line, ignore_unknown=ignore_unknown\n+        )\n+        self._register_by_id_managed_msg(msgid, line)\n+\n+    def disable_next(\n+        self,\n+        msgid: str,\n+        scope: str = \"package\",\n+        line: Optional[int] = None,\n+        ignore_unknown: bool = False,\n+    ) -> None:\n+        \"\"\"Disable a message for the next line\"\"\"\n+        if not line:\n+            raise exceptions.NoLineSuppliedError\n+        self._set_msg_status(\n+            msgid,\n+            enable=False,\n+            scope=scope,\n+            line=line + 1,\n+            ignore_unknown=ignore_unknown,\n+        )\n+        self._register_by_id_managed_msg(msgid, line + 1)\n+\n+    def enable(\n+        self,\n+        msgid: str,\n+        scope: str = \"package\",\n+        line: Optional[int] = None,\n+        ignore_unknown: bool = False,\n+    ) -> None:\n+        \"\"\"Enable a message for a scope\"\"\"\n+        self._set_msg_status(\n+            msgid, enable=True, scope=scope, line=line, ignore_unknown=ignore_unknown\n+        )\n+        self._register_by_id_managed_msg(msgid, line, is_disabled=False)\ndiff --git a/pylint/message/__init__.py b/pylint/message/__init__.py\n--- a/pylint/message/__init__.py\n+++ b/pylint/message/__init__.py\n@@ -42,13 +42,11 @@\n from pylint.message.message import Message\n from pylint.message.message_definition import MessageDefinition\n from pylint.message.message_definition_store import MessageDefinitionStore\n-from pylint.message.message_handler_mix_in import MessagesHandlerMixIn\n from pylint.message.message_id_store import MessageIdStore\n \n __all__ = [\n     \"Message\",\n     \"MessageDefinition\",\n     \"MessageDefinitionStore\",\n-    \"MessagesHandlerMixIn\",\n     \"MessageIdStore\",\n ]\ndiff --git a/pylint/message/message_handler_mix_in.py b/pylint/message/message_handler_mix_in.py\ndeleted file mode 100644\n--- a/pylint/message/message_handler_mix_in.py\n+++ /dev/null\n@@ -1,140 +0,0 @@\n-# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n-# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n-\n-from typing import List, Tuple, Union\n-\n-from pylint import exceptions\n-from pylint.constants import MSG_TYPES, MSG_TYPES_LONG\n-\n-\n-class MessagesHandlerMixIn:\n-    \"\"\"A mix-in class containing all the messages related methods for the main lint class.\"\"\"\n-\n-    __by_id_managed_msgs: List[Tuple[str, str, str, int, bool]] = []\n-\n-    def _checker_messages(self, checker):\n-        for known_checker in self._checkers[checker.lower()]:\n-            yield from known_checker.msgs\n-\n-    @classmethod\n-    def clear_by_id_managed_msgs(cls):\n-        cls.__by_id_managed_msgs.clear()\n-\n-    @classmethod\n-    def get_by_id_managed_msgs(cls):\n-        return cls.__by_id_managed_msgs\n-\n-    def _register_by_id_managed_msg(self, msgid_or_symbol: str, line, is_disabled=True):\n-        \"\"\"If the msgid is a numeric one, then register it to inform the user\n-        it could furnish instead a symbolic msgid.\"\"\"\n-        if msgid_or_symbol[1:].isdigit():\n-            try:\n-                symbol = self.msgs_store.message_id_store.get_symbol(msgid=msgid_or_symbol)  # type: ignore\n-            except exceptions.UnknownMessageError:\n-                return\n-            managed = (self.current_name, msgid_or_symbol, symbol, line, is_disabled)  # type: ignore\n-            MessagesHandlerMixIn.__by_id_managed_msgs.append(managed)\n-\n-    def disable(self, msgid, scope=\"package\", line=None, ignore_unknown=False):\n-        self._set_msg_status(\n-            msgid, enable=False, scope=scope, line=line, ignore_unknown=ignore_unknown\n-        )\n-        self._register_by_id_managed_msg(msgid, line)\n-\n-    def disable_next(\n-        self,\n-        msgid: str,\n-        scope: str = \"package\",\n-        line: Union[bool, int, None] = None,\n-        ignore_unknown: bool = False,\n-    ):\n-        if not line:\n-            raise exceptions.NoLineSuppliedError\n-        self._set_msg_status(\n-            msgid,\n-            enable=False,\n-            scope=scope,\n-            line=line + 1,\n-            ignore_unknown=ignore_unknown,\n-        )\n-        self._register_by_id_managed_msg(msgid, line + 1)\n-\n-    def enable(self, msgid, scope=\"package\", line=None, ignore_unknown=False):\n-        self._set_msg_status(\n-            msgid, enable=True, scope=scope, line=line, ignore_unknown=ignore_unknown\n-        )\n-        self._register_by_id_managed_msg(msgid, line, is_disabled=False)\n-\n-    def _set_msg_status(\n-        self, msgid, enable, scope=\"package\", line=None, ignore_unknown=False\n-    ):\n-        assert scope in (\"package\", \"module\")\n-        if msgid == \"all\":\n-            for _msgid in MSG_TYPES:\n-                self._set_msg_status(_msgid, enable, scope, line, ignore_unknown)\n-            return\n-\n-        # msgid is a category?\n-        category_id = msgid.upper()\n-        if category_id not in MSG_TYPES:\n-            category_id = MSG_TYPES_LONG.get(category_id)\n-        if category_id is not None:\n-            for _msgid in self.msgs_store._msgs_by_category.get(category_id):\n-                self._set_msg_status(_msgid, enable, scope, line)\n-            return\n-\n-        # msgid is a checker name?\n-        if msgid.lower() in self._checkers:\n-            for checker in self._checkers[msgid.lower()]:\n-                for _msgid in checker.msgs:\n-                    self._set_msg_status(_msgid, enable, scope, line)\n-            return\n-\n-        # msgid is report id?\n-        if msgid.lower().startswith(\"rp\"):\n-            if enable:\n-                self.enable_report(msgid)\n-            else:\n-                self.disable_report(msgid)\n-            return\n-\n-        try:\n-            # msgid is a symbolic or numeric msgid.\n-            message_definitions = self.msgs_store.get_message_definitions(msgid)\n-        except exceptions.UnknownMessageError:\n-            if ignore_unknown:\n-                return\n-            raise\n-        for message_definition in message_definitions:\n-            self._set_one_msg_status(scope, message_definition, line, enable)\n-\n-    def _set_one_msg_status(self, scope, msg, line, enable):\n-        if scope == \"module\":\n-            self.file_state.set_msg_status(msg, line, enable)\n-            if not enable and msg.symbol != \"locally-disabled\":\n-                self.add_message(\n-                    \"locally-disabled\", line=line, args=(msg.symbol, msg.msgid)\n-                )\n-        else:\n-            msgs = self._msgs_state\n-            msgs[msg.msgid] = enable\n-            # sync configuration object\n-            self.config.enable = [\n-                self._message_symbol(mid) for mid, val in sorted(msgs.items()) if val\n-            ]\n-            self.config.disable = [\n-                self._message_symbol(mid)\n-                for mid, val in sorted(msgs.items())\n-                if not val\n-            ]\n-\n-    def _message_symbol(self, msgid):\n-        \"\"\"Get the message symbol of the given message id\n-\n-        Return the original message id if the message does not\n-        exist.\n-        \"\"\"\n-        try:\n-            return [md.symbol for md in self.msgs_store.get_message_definitions(msgid)]\n-        except exceptions.UnknownMessageError:\n-            return msgid\ndiff --git a/pylint/typing.py b/pylint/typing.py\n--- a/pylint/typing.py\n+++ b/pylint/typing.py\n@@ -3,7 +3,7 @@\n \n \"\"\"A collection of typing utilities.\"\"\"\n import sys\n-from typing import NamedTuple, Union\n+from typing import NamedTuple, Optional, Union\n \n if sys.version_info >= (3, 8):\n     from typing import Literal, TypedDict\n@@ -52,3 +52,13 @@ class MessageLocationTuple(NamedTuple):\n     obj: str\n     line: int\n     column: int\n+\n+\n+class ManagedMessage(NamedTuple):\n+    \"\"\"Tuple with information ahout a managed message of the linter\"\"\"\n+\n+    name: Optional[str]\n+    msgid: str\n+    symbol: str\n+    line: Optional[int]\n+    is_disabled: bool\n",
  "test_patch": "diff --git a/tests/test_regr.py b/tests/test_regr.py\n--- a/tests/test_regr.py\n+++ b/tests/test_regr.py\n@@ -129,7 +129,6 @@ def test_pylint_config_attr() -> None:\n     expect = [\n         \"OptionsManagerMixIn\",\n         \"object\",\n-        \"MessagesHandlerMixIn\",\n         \"ReportsHandlerMixIn\",\n         \"BaseTokenChecker\",\n         \"BaseChecker\",\n",
  "problem_statement": "Possibly move ``MessagesHandlerMixIn`` into ``PyLinter``\n### Current problem\n\nThe `MessagesHandlerMixIn` currently sits in its own document within the `pylint/message` directory. [Link](https://github.com/PyCQA/pylint/blob/main/pylint/message/message_handler_mix_in.py)\r\nThe class is always mixed with `PyLinter` except for one occasion where a class method is used.\r\n\r\nhttps://github.com/PyCQA/pylint/blob/86c073e49fc099d8111da96cfbb2f30ccd659338/pylint/message/message_handler_mix_in.py#L235-L258\r\nOne of its most used methods is `add_message`, which handles the messages added by all checkers. However, this method is also a good example of why we are running into trouble with `MessagesHandlerMixIn` being its own class. We added `self: \"PyLinter\"` because we needed the `PyLinter` annotation for `self.msgs_store.get_message_definitions(msgid)`. However, `add_message` is also called from within `MessagesHandlerMixIn` and `self` is then not `PyLinter`. `mypy` complains about this (justifiably). \r\nThere are many more methods were we basically need to type `self` as being simultaneously `PyLinter` and `MessagesHandlerMixIn`.\r\nI have created a [branch](https://github.com/DanielNoord/pylint/tree/typing-message-mix-in) with a commit that adds typing to `MessagesHandlerMixIn`. You can clone this branch locally and see that `mypy` will fail with 20+ errors all related on the double dependency of `PyLinter` and `MessagesHandlerMixIn`.\n\n### Desired solution\n\nI would propose to merge `MessagesHandlerMixIn` into `PyLinter` to avoid these problems of dependency on each other. \r\n\r\nAnother solution would be to find a way to type `self` to be two classes simultaneously. But I don't think this is possible (or desirable in general).\n\n### Additional context\n\n_No response_\n",
  "hints_text": "I hate the current design, so I like this proposition ! But merging pylinter and MessageHandlerMixin could mean having to extract an independant MessageHandler class and possibly others because the pylinter class already is humungous. \nI wonder how many methods will remain for the independent class. A quick look shows that most current methods use attributes/methods from most classes. \n\nWe could separate those into different method that call each other but that might make the code more confusing, for example with `add_message`. \nI can take a look at this after the work on `LinterStats` has been approved and merged. I'll assign myself.\n\nInput from others is still appreciated!",
  "created_at": "2021-10-10T16:41:55Z",
  "version": "2.11",
  "FAIL_TO_PASS": "[\"tests/test_regr.py::test_pylint_config_attr\"]",
  "PASS_TO_PASS": "[\"tests/test_regr.py::test_package[file_name0-<lambda>]\", \"tests/test_regr.py::test_package[file_name1-<lambda>]\", \"tests/test_regr.py::test_package[file_name2-<lambda>]\", \"tests/test_regr.py::test_package[file_name3-<lambda>]\", \"tests/test_regr.py::test_package[file_name4-<lambda>]\", \"tests/test_regr.py::test_package[file_name5-<lambda>]\", \"tests/test_regr.py::test_package[file_name6-<lambda>]\", \"tests/test_regr.py::test_package[file_name7-<lambda>]\", \"tests/test_regr.py::test_package[file_name8-<lambda>]\", \"tests/test_regr.py::test_crash[/import_assign.py]\", \"tests/test_regr.py::test_crash[/special_attr_scope_lookup_crash.py]\", \"tests/test_regr.py::test_crash[/try_finally_disable_msg_crash]\", \"tests/test_regr.py::test_descriptor_crash[special_attr_scope_lookup_crash.py]\", \"tests/test_regr.py::test_descriptor_crash[descriptor_crash.py]\", \"tests/test_regr.py::test_descriptor_crash[try_finally_disable_msg_crash.py]\", \"tests/test_regr.py::test_descriptor_crash[application_crash.py]\", \"tests/test_regr.py::test_check_package___init__\", \"tests/test_regr.py::test_hang[/pkg4972.string-30.0]\"]",
  "environment_setup_commit": "2c687133e4fcdd73ae3afa2e79be2160b150bb82",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.909514",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}