{
  "repo": "django/django",
  "instance_id": "django__django-11211",
  "base_commit": "ba726067604ce5a8ca3919edf653496722b433ab",
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2325,6 +2325,10 @@ def deconstruct(self):\n     def get_internal_type(self):\n         return \"UUIDField\"\n \n+    def get_prep_value(self, value):\n+        value = super().get_prep_value(value)\n+        return self.to_python(value)\n+\n     def get_db_prep_value(self, value, connection, prepared=False):\n         if value is None:\n             return None\n",
  "test_patch": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -172,6 +172,11 @@ def __str__(self):\n         return self.tag\n \n \n+class Article(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=20)\n+\n+\n class Bookmark(models.Model):\n     url = models.URLField()\n     tags = GenericRelation(TaggedItem, related_query_name='bookmarks')\n@@ -188,9 +193,12 @@ class Comment(models.Model):\n     comment = models.TextField()\n \n     # Content-object field\n-    content_type = models.ForeignKey(ContentType, models.CASCADE)\n+    content_type = models.ForeignKey(ContentType, models.CASCADE, null=True)\n     object_pk = models.TextField()\n     content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n+    content_type_uuid = models.ForeignKey(ContentType, models.CASCADE, related_name='comments', null=True)\n+    object_pk_uuid = models.TextField()\n+    content_object_uuid = GenericForeignKey(ct_field='content_type_uuid', fk_field='object_pk_uuid')\n \n     class Meta:\n         ordering = ['id']\ndiff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -7,10 +7,10 @@\n from django.test.utils import CaptureQueriesContext\n \n from .models import (\n-    Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book, Bookmark,\n-    BookReview, BookWithYear, Comment, Department, Employee, FavoriteAuthors,\n-    House, LessonEntry, ModelIterableSubclass, Person, Qualification, Reader,\n-    Room, TaggedItem, Teacher, WordEntry,\n+    Article, Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book,\n+    Bookmark, BookReview, BookWithYear, Comment, Department, Employee,\n+    FavoriteAuthors, House, LessonEntry, ModelIterableSubclass, Person,\n+    Qualification, Reader, Room, TaggedItem, Teacher, WordEntry,\n )\n \n \n@@ -885,6 +885,12 @@ def test_prefetch_GFK_nonint_pk(self):\n             qs = Comment.objects.prefetch_related('content_object')\n             [c.content_object for c in qs]\n \n+    def test_prefetch_GFK_uuid_pk(self):\n+        article = Article.objects.create(name='Django')\n+        Comment.objects.create(comment='awesome', content_object_uuid=article)\n+        qs = Comment.objects.prefetch_related('content_object_uuid')\n+        self.assertEqual([c.content_object_uuid for c in qs], [article])\n+\n     def test_traverse_GFK(self):\n         \"\"\"\n         A 'content_object' can be traversed with prefetch_related() and\n",
  "problem_statement": "Prefetch related is not working when used GFK for model that uses UUID field as PK.\nDescription\n\t\nHow to reproduce:\ncreate model with UUID as primary key\nclass Foo(models.Model):\n\tid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n\t...\ncreate another model with GFK to model Foo\nclass Bar(models.Model):\n\tfoo_content_type = models.ForeignKey(\n\t\tContentType, related_name='actor',\n\t\ton_delete=models.CASCADE, db_index=True\n\t)\n\tfoo_object_id = models.CharField(max_length=255, db_index=True)\n\tfoo = GenericForeignKey('foo_content_type', 'foo_object_id')\n\t...\nand try to get queryset with prefetch related (django orm engine return None for attribute foo):\nBar.objects.all().prefetch_related('foo')\nThanks a lot for your attention! Also i wanna point out some related bug report from third party library in which previously i faced with that issue, maybe it would useful – ​https://github.com/justquick/django-activity-stream/issues/245\n",
  "hints_text": "Thanks for the report, however GenericForeignKey doesn't support prefetch_related(), from the same reason it doesn't not support also filter(), exclude(), etc. Please see ​documentation.",
  "created_at": "2019-04-13T12:01:14Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_prefetch_GFK_uuid_pk (prefetch_related.tests.GenericRelationTests)\"]",
  "PASS_TO_PASS": "[\"test_bug (prefetch_related.tests.Ticket21410Tests)\", \"test_basic (prefetch_related.tests.RawQuerySetTests)\", \"test_clear (prefetch_related.tests.RawQuerySetTests)\", \"test_prefetch_before_raw (prefetch_related.tests.RawQuerySetTests)\", \"test_bug (prefetch_related.tests.Ticket19607Tests)\", \"test_m2m_then_m2m (prefetch_related.tests.DefaultManagerTests)\", \"test_bug (prefetch_related.tests.Ticket21760Tests)\", \"test_foreignkey (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_m2m (prefetch_related.tests.ForeignKeyToFieldTest)\", \"test_retrieves_results_from_prefetched_objects_cache (prefetch_related.tests.ReadPrefetchedObjectsCacheTests)\", \"test_order (prefetch_related.tests.LookupOrderingTest)\", \"test_in_bulk (prefetch_related.tests.NullableTest)\", \"test_prefetch_nullable (prefetch_related.tests.NullableTest)\", \"test_traverse_nullable (prefetch_related.tests.NullableTest)\", \"test_add_clears_prefetched_objects (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_detect_is_fetched (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_detect_is_fetched_with_to_attr (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_prefetch_reverse_foreign_key (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_remove_clears_prefetched_objects (prefetch_related.tests.DirectPrefechedObjectCacheReuseTests)\", \"test_using_is_honored_custom_qs (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_fkey (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_inheritance (prefetch_related.tests.MultiDbTests)\", \"test_using_is_honored_m2m (prefetch_related.tests.MultiDbTests)\", \"test_child_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_foreignkey (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_foreignkey_to_inherited (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_m2m_to_inheriting_model (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_parent_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest)\", \"test_charfield_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_custom_queryset (prefetch_related.tests.GenericRelationTests)\", \"test_generic_relation (prefetch_related.tests.GenericRelationTests)\", \"test_nullable_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_prefetch_GFK_nonint_pk (prefetch_related.tests.GenericRelationTests)\", \"test_traverse_GFK (prefetch_related.tests.GenericRelationTests)\", \"test_attribute_error (prefetch_related.tests.PrefetchRelatedTests)\", \"test_bool (prefetch_related.tests.PrefetchRelatedTests)\", \"test_clear (prefetch_related.tests.PrefetchRelatedTests)\", \"test_count (prefetch_related.tests.PrefetchRelatedTests)\", \"test_exists (prefetch_related.tests.PrefetchRelatedTests)\", \"test_foreign_key_then_m2m (prefetch_related.tests.PrefetchRelatedTests)\", \"test_foreignkey_forward (prefetch_related.tests.PrefetchRelatedTests)\", \"test_foreignkey_reverse (prefetch_related.tests.PrefetchRelatedTests)\", \"test_forward_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests)\", \"test_get (prefetch_related.tests.PrefetchRelatedTests)\", \"test_in_and_prefetch_related (prefetch_related.tests.PrefetchRelatedTests)\", \"test_invalid_final_lookup (prefetch_related.tests.PrefetchRelatedTests)\", \"test_len (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_forward (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_reverse (prefetch_related.tests.PrefetchRelatedTests)\", \"A m2m can be followed through another m2m.\", \"test_m2m_then_m2m_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_then_reverse_fk_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_m2m_then_reverse_one_to_one_object_ids (prefetch_related.tests.PrefetchRelatedTests)\", \"test_onetoone_reverse_no_match (prefetch_related.tests.PrefetchRelatedTests)\", \"test_onetoone_reverse_with_to_field_pk (prefetch_related.tests.PrefetchRelatedTests)\", \"test_overriding_prefetch (prefetch_related.tests.PrefetchRelatedTests)\", \"test_reverse_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests)\", \"test_reverse_one_to_one_then_m2m (prefetch_related.tests.PrefetchRelatedTests)\", \"test_survives_clone (prefetch_related.tests.PrefetchRelatedTests)\", \"test_ambiguous (prefetch_related.tests.CustomPrefetchTests)\", \"test_custom_qs (prefetch_related.tests.CustomPrefetchTests)\", \"test_generic_rel (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m_through_fk (prefetch_related.tests.CustomPrefetchTests)\", \"test_m2m_through_gfk (prefetch_related.tests.CustomPrefetchTests)\", \"test_nested_prefetch_related_are_not_overwritten (prefetch_related.tests.CustomPrefetchTests)\", \"test_nested_prefetch_related_with_duplicate_prefetcher (prefetch_related.tests.CustomPrefetchTests)\", \"test_o2m_through_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_reverse_m2m (prefetch_related.tests.CustomPrefetchTests)\", \"test_to_attr_cached_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_to_attr_doesnt_cache_through_attr_as_list (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_multiple_items_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_qs (prefetch_related.tests.CustomPrefetchTests)\", \"test_traverse_single_item_property (prefetch_related.tests.CustomPrefetchTests)\", \"test_values_queryset (prefetch_related.tests.CustomPrefetchTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.564605",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}