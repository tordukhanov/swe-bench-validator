{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7499",
  "base_commit": "358150c30ee77c4b38dd63125d42d071304baf48",
  "patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -609,9 +609,10 @@ def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n         If it matches `True` is returned, otherwise an `AssertionError` is raised.\n         \"\"\"\n         __tracebackhide__ = True\n-        assert re.search(\n-            regexp, str(self.value)\n-        ), \"Pattern {!r} does not match {!r}\".format(regexp, str(self.value))\n+        msg = \"Regex pattern {!r} does not match {!r}.\"\n+        if regexp == str(self.value):\n+            msg += \" Did you mean to `re.escape()` the regex?\"\n+        assert re.search(regexp, str(self.value)), msg.format(regexp, str(self.value))\n         # Return True to allow for \"assert excinfo.match()\".\n         return True\n \n",
  "test_patch": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -423,7 +423,7 @@ def test_division_zero():\n     result = testdir.runpytest()\n     assert result.ret != 0\n \n-    exc_msg = \"Pattern '[[]123[]]+' does not match 'division by zero'\"\n+    exc_msg = \"Regex pattern '[[]123[]]+' does not match 'division by zero'.\"\n     result.stdout.fnmatch_lines([\"E * AssertionError: {}\".format(exc_msg)])\n     result.stdout.no_fnmatch_line(\"*__tracebackhide__ = True*\")\n \ndiff --git a/testing/python/raises.py b/testing/python/raises.py\n--- a/testing/python/raises.py\n+++ b/testing/python/raises.py\n@@ -197,7 +197,7 @@ def test_raises_match(self) -> None:\n             int(\"asdf\")\n \n         msg = \"with base 16\"\n-        expr = \"Pattern {!r} does not match \\\"invalid literal for int() with base 10: 'asdf'\\\"\".format(\n+        expr = \"Regex pattern {!r} does not match \\\"invalid literal for int() with base 10: 'asdf'\\\".\".format(\n             msg\n         )\n         with pytest.raises(AssertionError, match=re.escape(expr)):\n@@ -223,7 +223,19 @@ def test_match_failure_string_quoting(self):\n             with pytest.raises(AssertionError, match=\"'foo\"):\n                 raise AssertionError(\"'bar\")\n         (msg,) = excinfo.value.args\n-        assert msg == 'Pattern \"\\'foo\" does not match \"\\'bar\"'\n+        assert msg == 'Regex pattern \"\\'foo\" does not match \"\\'bar\".'\n+\n+    def test_match_failure_exact_string_message(self):\n+        message = \"Oh here is a message with (42) numbers in parameters\"\n+        with pytest.raises(AssertionError) as excinfo:\n+            with pytest.raises(AssertionError, match=message):\n+                raise AssertionError(message)\n+        (msg,) = excinfo.value.args\n+        assert msg == (\n+            \"Regex pattern 'Oh here is a message with (42) numbers in \"\n+            \"parameters' does not match 'Oh here is a message with (42) \"\n+            \"numbers in parameters'. Did you mean to `re.escape()` the regex?\"\n+        )\n \n     def test_raises_match_wrong_type(self):\n         \"\"\"Raising an exception with the wrong type and match= given.\n",
  "problem_statement": "suggestion: improve raises confusing message when matching\n- [x] a detailed description of the bug or suggestion\r\n  I would like `pytest.raises` to check if strings have parenthesis in them when match is not None, so that people have that lightbulb moment, rather than head-scratching when it presents two identical strings as not matching.\r\n\r\n  ```shell\r\n  E           AssertionError: Pattern 'Length of values (29) does not match length of index (30)' does not match 'Length of values (29) does not match length of index (30)'\r\n  ```\r\n\r\n- [ ] output of `pip list` from the virtual environment you are using\r\n  I believe this is not applicable right now. I'm happy to provide one if you believe other modules or libraries are causing this behavior.\r\n\r\n- [x] pytest and operating system versions\r\n  Windows 10 64-bit (I know), all updates installed\r\n  Pytest 5.4.3\r\n\r\n- [x] minimal example if possible  **edited 22:31 (same day) as the example given was the fixed code including escapes and r prefix**\r\n  ```python\r\n  msg = (\r\n            f\"Length of values ({len(newcolumndata)}) \"\r\n            f\"does not match length of index ({len(data)})\"\r\n        )\r\n        with pytest.raises(MismatchedIndexValueError, match=msg):\r\n   ```\r\n\r\nI believe a more helpful error message\r\n\r\n```\r\n=============================================================================== warnings summary =============================================================================== \r\ntests/whatever/file.py::test_whatever_function_name_is\r\n  file.py:42: UserWarning: non regex passed to match\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n=========================================================================== short test summary info ============================================================================\r\n\r\n  E           AssertionError: Pattern 'Length of values (29) does not match length of index (30)' does not match 'Length of values (29) does not match length of index (30)'\r\n```\r\n\n",
  "hints_text": "Perhaps the messaging can be changed from \"Pattern\" to \"Regex\" or \"Regex pattern\" to make it more clear?  I'm not sure a warning for strings is appropriate here (unless we want to remove that functionality) since the api allows strings\nA check for exact equality + a value error on forgotten regex escape may prevent some headscratching\nIt's not about disallowing strings, or warning for all strings. It's more that because it is a pattern library, any string using parenthesis needs to have them escaped, unless they are deliberate regex strings. It should also only be before the failed assertion.\r\n\nI did understand the message eventually. It is more that the display of the message showing two identical strings gave me pause for thought.\r\n\r\nHaving two kwargs was something I looked for, but didn't find anything about. One for strings, one for patterns as that would have allowed me to avoid the escaping altogether.\nparens are valid in regexes as grouping so they can't be warned on / banned outright\r\n\r\nI usually find an exact match better anyway:\r\n\r\n```python\r\nwith pytest.raises(T) as excinfo:\r\n    ...\r\nmsg, = excinfo.value.args\r\nassert msg == ...\r\n```\nPlease re-read what I am proposing. This is not about banning\r\n\r\n1. > It's not about disallowing strings, or warning for all strings.\r\n\r\n    It's not even about warnings for any string with parenthesis. It is about contextually highlighting to people \"Hey, this thing believe's you've sent it a regex. Did you mean to?\" in the case that both _expected_ and _actual_ are identical.\r\n\r\n    One alternative is to use or to regex match and perform string comparison. Please look at the example given.\r\n\r\n    ```python\r\n    any([\r\n        actual == expected,\r\n        regex.match(expected)\r\n    ])\r\n    ```\r\n2. >  It's more that because it is a pattern library, any string using parenthesis needs to have them escaped, unless they are deliberate regex strings.\r\n\r\n      this agree's with your statement @asottile \r\n3. >  It should also only be before the failed assertion.\r\n\r\n    So in the case of this assertion failing. If it has unescaped parenthesis, or any one of many characters\r\n4. If I supply this keyword argument with a string with parenthesis at the moment, it treats them as a regex matching group, which they are not. That was the situation that led to this and is present in the reproduction example.\nOther things I am not suggesting\r\n\r\n* Checking exceptions for details is a particularly good method of exception usage. I far prefer specific exception classes with internal logging.\r\n* This is the only solution.\r\n  * I saw the suggestion https://github.com/pytest-dev/pytest/issues/7489#issuecomment-657717070, but think it is still very wordy\r\n  * I've proposed an alternative above\r\n  * I proposed another alternative with warnings to separate the error message from potentially lengthy hints\r\n\r\nI'm merely attempting to address something that tripped me up, that I feel has likely tripped up others who may not have reported any issue, or moved on from.\r\n\r\n\n@asottile What i was suggesting is a better error when the is value equal to the regex but would not match it \n> One alternative is to use or to regex match and perform string comparison\r\n\r\nI don't think this is a good idea, because I may want to pass an actual regex which happens to be string-equal but not regex-match.\r\n\r\nI think we can improve in these ways:\r\n\r\n1. If string-equal, but not regex-match, show a \"Did you mean\" help message (as suggested by @RonnyPfannschmidt).\r\n2. Change \"Pattern ...\" to \"Regex pattern ...\" (as suggested by @asottile).\r\n3. Prefix `r` to the regex pattern, as another visual indicator that it's a regex. (It would need to actually be valid of course).\r\n\r\nWDYT?\nLooking at the code \r\n\r\nhttps://github.com/pytest-dev/pytest/blob/master/src/_pytest/python_api.py\r\n\r\nI don't see the error message. Is it calling a matcher from within pytest which is wrapped around the exception somewhere I'm not glancing?\n@Lewiscowles1986, yes, the check is done here:\r\n\r\nhttps://github.com/pytest-dev/pytest/blob/7f7a36478abe7dd1fa993b115d22606aa0e35e88/src/_pytest/_code/code.py#L605-L616\n> Prefix r to the regex pattern, as another visual indicator that it's a regex. (It would need to actually be valid of course).\r\n\r\neverything else I agree with but this is 🙅‍♂️ -- (1) raw strings have nothing to with regexes despite both starting with the letter `r` -- please don't conflate them (2) it's not a trivial task to convert a string variable into a representation of a raw string literal\nI never suggested the `r` prefix would make a regex valid or make a string a regex... Why the hot-takes?\r\n\r\nThe `r` modifier is specifically so that the invalid escape code message is avoided and PEP is not violated when dealing with a string that is used by this. I've not suggested it magically makes regexes and I've not authored a library that takes a string and decides it's a regex, complicating literal match use-cases.",
  "created_at": "2020-07-14T18:59:56Z",
  "version": "6.0",
  "FAIL_TO_PASS": "[\"testing/python/raises.py::TestRaises::test_raises_match\", \"testing/python/raises.py::TestRaises::test_match_failure_string_quoting\", \"testing/python/raises.py::TestRaises::test_match_failure_exact_string_message\", \"testing/code/test_excinfo.py::test_match_raises_error\"]",
  "PASS_TO_PASS": "[\"testing/code/test_excinfo.py::test_excinfo_simple\", \"testing/code/test_excinfo.py::test_excinfo_from_exc_info_simple\", \"testing/code/test_excinfo.py::test_excinfo_getstatement\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_entries\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_entry_getsource\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_entry_getsource_in_construct\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_cut\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[<lambda>-True]\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[<lambda>-False]\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[tracebackhide2-True]\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[tracebackhide3-False]\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_recursion_index\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_only_specific_recursion_errors\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_no_recursion_index\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_getcrashentry\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_getcrashentry_empty\", \"testing/code/test_excinfo.py::test_excinfo_exconly\", \"testing/code/test_excinfo.py::test_excinfo_repr_str\", \"testing/code/test_excinfo.py::test_excinfo_for_later\", \"testing/code/test_excinfo.py::test_excinfo_errisinstance\", \"testing/code/test_excinfo.py::test_excinfo_no_sourcecode\", \"testing/code/test_excinfo.py::test_entrysource_Queue_example\", \"testing/code/test_excinfo.py::test_codepath_Queue_example\", \"testing/code/test_excinfo.py::test_match_succeeds\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source_excinfo\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source_not_existing\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_many_line_source_not_existing\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source_failing_fullsource\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local_with_error\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local_with_exception_in_class_property\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local_truncated\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_lines\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_lines2\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_lines_var_kw_args\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_short\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_no\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_tbfilter\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_traceback_short_no_source\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_and_excinfo\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_with_invalid_cwd\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_excinfo_addouterr\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_excinfo_reprcrash\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_recursion\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_reprexcinfo_getrepr\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_reprexcinfo_unicode\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long_missing_source\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long_incomplete_source\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long_filenames\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions0]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions1]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions2]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions3]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions4]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions5]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions6]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions7]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions8]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions9]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions10]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions11]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions12]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions13]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions14]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions15]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions16]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions17]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions18]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions19]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions20]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions21]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions22]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions23]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_traceback_repr_style\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_repr_chain_suppression[from_none]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_repr_chain_suppression[explicit_suppress]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr_without_traceback[cause]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr_without_traceback[context]\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr_cycle\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[None-short]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[None-long]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf8-short]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf8-long]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf16-short]\", \"testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf16-long]\", \"testing/code/test_excinfo.py::test_exception_repr_extraction_error_on_recursion\", \"testing/code/test_excinfo.py::test_no_recursion_index_on_recursion_error\", \"testing/python/raises.py::TestRaises::test_check_callable\", \"testing/python/raises.py::TestRaises::test_raises\", \"testing/python/raises.py::TestRaises::test_raises_function\", \"testing/python/raises.py::TestRaises::test_raises_callable_no_exception\", \"testing/python/raises.py::TestRaises::test_raises_falsey_type_error\", \"testing/python/raises.py::TestRaises::test_raises_repr_inflight\", \"testing/python/raises.py::TestRaises::test_noclass\", \"testing/python/raises.py::TestRaises::test_invalid_arguments_to_raises\", \"testing/python/raises.py::TestRaises::test_tuple\", \"testing/python/raises.py::TestRaises::test_no_raise_message\", \"testing/python/raises.py::TestRaises::test_raises_cyclic_reference[function]\", \"testing/python/raises.py::TestRaises::test_raises_cyclic_reference[function_match]\", \"testing/python/raises.py::TestRaises::test_raises_cyclic_reference[with]\", \"testing/python/raises.py::TestRaises::test_raises_match_wrong_type\", \"testing/python/raises.py::TestRaises::test_raises_exception_looks_iterable\", \"testing/python/raises.py::TestRaises::test_raises_with_raising_dunder_class\", \"testing/python/raises.py::TestRaises::test_raises_context_manager_with_kwargs\", \"testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_cut_excludepath\", \"testing/code/test_excinfo.py::test_cwd_deleted\", \"testing/python/raises.py::TestRaises::test_raises_as_contextmanager\", \"testing/python/raises.py::TestRaises::test_does_not_raise\", \"testing/python/raises.py::TestRaises::test_does_not_raise_does_raise\"]",
  "environment_setup_commit": "634cde9506eb1f48dec3ec77974ee8dc952207c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.937686",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}