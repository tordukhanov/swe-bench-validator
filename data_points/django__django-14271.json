{
  "repo": "django/django",
  "instance_id": "django__django-14271",
  "base_commit": "34d1905712d33e72c76b3a55a4fc24abbd11be6c",
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -631,6 +631,10 @@ def combine(self, rhs, connector):\n         joinpromoter.add_votes(rhs_votes)\n         joinpromoter.update_join_types(self)\n \n+        # Combine subqueries aliases to ensure aliases relabelling properly\n+        # handle subqueries when combining where and select clauses.\n+        self.subq_aliases |= rhs.subq_aliases\n+\n         # Now relabel a copy of the rhs where-clause and add it to the current\n         # one.\n         w = rhs.where.clone()\n",
  "test_patch": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2063,36 +2063,50 @@ def test_distinct_ordered_sliced_subquery(self):\n         )\n \n \n-@skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class QuerySetBitwiseOperationTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n-        school = School.objects.create()\n-        cls.room_1 = Classroom.objects.create(school=school, has_blackboard=False, name='Room 1')\n-        cls.room_2 = Classroom.objects.create(school=school, has_blackboard=True, name='Room 2')\n-        cls.room_3 = Classroom.objects.create(school=school, has_blackboard=True, name='Room 3')\n-        cls.room_4 = Classroom.objects.create(school=school, has_blackboard=False, name='Room 4')\n+        cls.school = School.objects.create()\n+        cls.room_1 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 1')\n+        cls.room_2 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 2')\n+        cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n+        cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n+    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n+    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_4])\n \n+    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n     def test_or_with_both_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=False)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=True)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2])\n \n+    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n     def test_or_with_both_slice_and_ordering(self):\n         qs1 = Classroom.objects.filter(has_blackboard=False).order_by('-pk')[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=True).order_by('-name')[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_3, self.room_4])\n \n+    def test_subquery_aliases(self):\n+        combined = School.objects.filter(pk__isnull=False) & School.objects.filter(\n+            Exists(Classroom.objects.filter(\n+                has_blackboard=True,\n+                school=OuterRef('pk'),\n+            )),\n+        )\n+        self.assertSequenceEqual(combined, [self.school])\n+        nested_combined = School.objects.filter(pk__in=combined.values('pk'))\n+        self.assertSequenceEqual(nested_combined, [self.school])\n+\n \n class CloneTests(TestCase):\n \n@@ -2790,6 +2804,21 @@ def test_exclude_multivalued_exists(self):\n             )\n         self.assertIn('exists', captured_queries[0]['sql'].lower())\n \n+    def test_exclude_subquery(self):\n+        subquery = JobResponsibilities.objects.filter(\n+            responsibility__description='bar',\n+        ) | JobResponsibilities.objects.exclude(\n+            job__responsibilities__description='foo',\n+        )\n+        self.assertSequenceEqual(\n+            Job.objects.annotate(\n+                responsibility=subquery.filter(\n+                    job=OuterRef('name'),\n+                ).values('id')[:1]\n+            ),\n+            [self.j1, self.j2],\n+        )\n+\n \n class ExcludeTest17600(TestCase):\n     \"\"\"\n",
  "problem_statement": "Cannot combine two queryset in a subquery\nDescription\n\t \n\t\t(last modified by Raffaele Salmaso)\n\t \n[Sample project â€‹https://github.com/rsalmaso/django32-subquery-test and run ./manage.py query]\nDjango 3.2 fails this query (a combined queryset in a subquery):\nimport datetime as dt\nfrom decimal import Decimal\nfrom django.conf import settings\nfrom django.db import models\nfrom django.db.models import Case, OuterRef, Q, Subquery, Value, When\nfrom django.utils import timezone\nclass UserQuerySet(models.QuerySet):\n\tdef annotate_active_subscription_id(self):\n\t\treturn self.annotate(\n\t\t\tactive_subscription_id_db=Subquery(\n\t\t\t\tSubscription.objects.active()\n\t\t\t\t.annotate(\n\t\t\t\t\tplan_order=Case(\n\t\t\t\t\t\tWhen(plan__code=\"BASE\", then=Value(1)),\n\t\t\t\t\t\tdefault=Value(0),\n\t\t\t\t\t\toutput_field=models.PositiveSmallIntegerField(),\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t.filter(user=OuterRef(\"id\"))\n\t\t\t\t.order_by(\"plan_order\", \"-id\")\n\t\t\t\t.values(\"id\")[:1]\n\t\t\t)\n\t\t)\nclass User(models.Model):\n\tobjects = models.Manager.from_queryset(UserQuerySet)()\nclass Plan(models.Model):\n\tcode = models.CharField(verbose_name=\"Codice\", max_length=255)\nclass SubscriptionQuerySet(models.QuerySet):\n\tdef will_be_renewed_today(self):\n\t\ttoday = dt.date.today()\n\t\treturn self.filter(start_date__lte=today).exclude(user__subscriptions__start_date=today).distinct()\n\tdef active(self):\n\t\treturn self.filter(enabled=True).distinct() | self.will_be_renewed_today()\nclass Subscription(models.Model):\n\tuser = models.ForeignKey(User, verbose_name=\"Utente\", on_delete=models.CASCADE, related_name=\"subscriptions\")\n\tplan = models.ForeignKey(Plan, on_delete=models.CASCADE, verbose_name=\"Piano di abbonamento\")\n\tstart_date = models.DateField(verbose_name=\"Data di inizio\", default=dt.date.today)\n\tenabled = models.BooleanField(verbose_name=\"Abilitato\", default=True)\n\tobjects = models.Manager.from_queryset(SubscriptionQuerySet)()\n\t\t\nprint(User.objects.annotate_active_subscription_id().count())\nwith django 3.1.8\nSELECT \n \"subquery_user\".\"id\", \n (\n\tSELECT \n\t \"subquery\".\"id\" \n\tFROM \n\t (\n\t\tSELECT \n\t\t DISTINCT U0.\"id\", \n\t\t CASE WHEN (U2.\"code\" = BASE) THEN 1 ELSE 0 END \n\t\tFROM \n\t\t \"subquery_subscription\" U0 \n\t\t INNER JOIN \"subquery_plan\" U2 ON (U0.\"plan_id\" = U2.\"id\") \n\t\tWHERE \n\t\t (\n\t\t\t(\n\t\t\t U0.\"enabled\" \n\t\t\t OR (\n\t\t\t\tU0.\"start_date\" <= 2021 - 04 - 13 \n\t\t\t\tAND NOT (\n\t\t\t\t U0.\"user_id\" IN (\n\t\t\t\t\tSELECT \n\t\t\t\t\t U2.\"user_id\" \n\t\t\t\t\tFROM \n\t\t\t\t\t \"subquery_subscription\" U2 \n\t\t\t\t\tWHERE \n\t\t\t\t\t U2.\"start_date\" = 2021 - 04 - 13\n\t\t\t\t )\n\t\t\t\t)\n\t\t\t )\n\t\t\t) \n\t\t\tAND U0.\"user_id\" = \"subquery_user\".\"id\"\n\t\t ) \n\t\tORDER BY \n\t\t CASE WHEN (U2.\"code\" = BASE) THEN 1 ELSE 0 END ASC, \n\t\t U0.\"id\" DESC \n\t\tLIMIT \n\t\t 1\n\t ) subquery\n ) AS \"active_subscription_id_db\" \nFROM \n \"subquery_user\"\nwith django 3.2 (\nSELECT \n \"subquery_user\".\"id\", \n (\n\tSELECT \n\t \"subquery\".\"id\" \n\tFROM \n\t (\n\t\tSELECT \n\t\t DISTINCT U0.\"id\", \n\t\t CASE WHEN (U2.\"code\" = BASE) THEN 1 ELSE 0 END \n\t\tFROM \n\t\t \"subquery_subscription\" U0 \n\t\t INNER JOIN \"subquery_plan\" U2 ON (U0.\"plan_id\" = U2.\"id\") \n\t\tWHERE \n\t\t (\n\t\t\t(\n\t\t\t U0.\"enabled\" \n\t\t\t OR (\n\t\t\t\tU0.\"start_date\" <= 2021 - 04 - 13 \n\t\t\t\tAND NOT (\n\t\t\t\t EXISTS(\n\t\t\t\t\tSELECT \n\t\t\t\t\t (1) AS \"a\" \n\t\t\t\t\tFROM \n\t\t\t\t\t \"subquery_subscription\" V2 \n\t\t\t\t\tWHERE \n\t\t\t\t\t (\n\t\t\t\t\t\tV2.\"start_date\" = 2021 - 04 - 13 \n\t\t\t\t\t\tAND V2.\"user_id\" = V0.\"user_id\"\n\t\t\t\t\t ) \n\t\t\t\t\tLIMIT \n\t\t\t\t\t 1\n\t\t\t\t )\n\t\t\t\t)\n\t\t\t )\n\t\t\t) AND U0.\"user_id\" = \"subquery_user\".\"id\"\n\t\t ) \n\t\tORDER BY \n\t\t CASE WHEN (U2.\"code\" = BASE) THEN 1 ELSE 0 END ASC, \n\t\t U0.\"id\" DESC \n\t\tLIMIT \n\t\t 1\n\t ) subquery\n ) AS \"active_subscription_id_db\" \nFROM \n \"subquery_user\"\nTraceback (most recent call last):\n File \".venvs/django32/lib/python3.8/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \".venvs/django32/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py\", line 423, in execute\n\treturn Database.Cursor.execute(self, query, params)\nsqlite3.OperationalError: no such column: V0.user_id\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"./manage.py\", line 22, in <module>\n\tmain()\n File \"./manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \".venvs/django32/lib/python3.8/site-packages/django/core/management/__init__.py\", line 419, in execute_from_command_line\n\tutility.execute()\n File \".venvs/django32/lib/python3.8/site-packages/django/core/management/__init__.py\", line 413, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \".venvs/django32/lib/python3.8/site-packages/django/core/management/base.py\", line 354, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \".venvs/django32/lib/python3.8/site-packages/django/core/management/base.py\", line 398, in execute\n\toutput = self.handle(*args, **options)\n File \"/home/raf/src/fiscozen/django-debug/subquery/management/commands/query.py\", line 11, in handle\n\tprint(qs.count())\n File \".venvs/django32/lib/python3.8/site-packages/django/db/models/query.py\", line 412, in count\n\treturn self.query.get_count(using=self.db)\n File \".venvs/django32/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 526, in get_count\n\tnumber = obj.get_aggregation(using, ['__count'])['__count']\n File \".venvs/django32/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 511, in get_aggregation\n\tresult = compiler.execute_sql(SINGLE)\n File \".venvs/django32/lib/python3.8/site-packages/django/db/models/sql/compiler.py\", line 1175, in execute_sql\n\tcursor.execute(sql, params)\n File \".venvs/django32/lib/python3.8/site-packages/django/db/backends/utils.py\", line 98, in execute\n\treturn super().execute(sql, params)\n File \".venvs/django32/lib/python3.8/site-packages/django/db/backends/utils.py\", line 66, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \".venvs/django32/lib/python3.8/site-packages/django/db/backends/utils.py\", line 75, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \".venvs/django32/lib/python3.8/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \".venvs/django32/lib/python3.8/site-packages/django/db/utils.py\", line 90, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \".venvs/django32/lib/python3.8/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \".venvs/django32/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py\", line 423, in execute\n\treturn Database.Cursor.execute(self, query, params)\ndjango.db.utils.OperationalError: no such column: V0.user_id\nTested with 3.2, â€‹https://github.com/django/django/commit/d6314c4c2ef647efe0d12450214fc5b4a4055290 (next 3.2.1) and â€‹https://github.com/django/django/commit/59552bea5790c97be0da0a6f16ccd0189857c7a7 (main)\n",
  "hints_text": "It seems to be related to https://code.djangoproject.com/ticket/32143 (â€‹https://github.com/django/django/commit/8593e162c9cb63a6c0b06daf045bc1c21eb4d7c1)\nLooks like the code doesn't properly handle nested subquery exclusion, likely due to re-aliasing in Query.trim_start.\nAfter â€‹a bit of investigation it seems the issue might actually lies in sql.Query.combine possibly with how it doesn't handle external_aliases.\nIt ended up being an issue in Query.combine when dealing with subq_aliases.",
  "created_at": "2021-04-15T04:41:38Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_subquery_aliases (queries.tests.QuerySetBitwiseOperationTests)\", \"test_exclude_subquery (queries.tests.ExcludeTests)\"]",
  "PASS_TO_PASS": "[\"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"Can create an instance of a model with only the PK field (#17056).\\\"\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"test_ticket7371 (queries.tests.CustomPkTests)\", \"Generating the query string doesn't alter the query's state\", \"test_ticket14729 (queries.tests.RawQueriesTests)\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_invalid_order_by_raw_column_alias (queries.tests.QuerySetExceptionTests)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_iter_exceptions (queries.tests.QuerySetExceptionTests)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_ticket8683 (queries.tests.Queries3Tests)\", \"test_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"#13227 -- If a queryset is already evaluated, it can still be used as a query arg\", \"Cloning a queryset does not get out of hand. While complete\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"test_annotated_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_values_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"Subquery table names should be quoted.\", \"Tests QuerySet ORed combining in exclude subquery case.\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket8597 (queries.tests.ComparisonTests)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"When a trimmable join is specified in the query (here school__), the\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_pickle (queries.tests.ValuesQuerysetTests)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_invalid_index (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"When passing proxy model objects, child objects, or parent objects,\", \"#23396 - Ensure ValueQuerySets are not checked for compatibility with the lookup field\", \"A ValueError is raised when the incorrect object type is passed to a\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"This should exclude Orders which have some items with status 1\", \"Using exclude(condition) and exclude(Q(condition)) should\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"Related objects constraints can safely contain sliced subqueries.\", \"Slice a query that has a sliced subquery\", \"Delete queries can safely contain sliced subqueries\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_exclude_multivalued_exists (queries.tests.ExcludeTests)\", \"test_exclude_nullable_fields (queries.tests.ExcludeTests)\", \"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_exclude_with_circular_fk_relation (queries.tests.ExcludeTests)\", \"test_subquery_exclude_outerref (queries.tests.ExcludeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_filter_reverse_non_integer_pk (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)\", \"Valid query should be generated when fields fetched from joined tables\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_excluded_intermediary_m2m_table_joined (queries.tests.Queries1Tests)\", \"test_field_with_filterable (queries.tests.Queries1Tests)\", \"get() should clear ordering for optimization purposes.\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_negate_field (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"This test is related to the above one, testing that there aren't\", \"test_order_by_rawsql (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"Meta.ordering=None works the same as Meta.ordering=[]\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.685552",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}