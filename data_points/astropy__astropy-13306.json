{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13306",
  "base_commit": "b3fa7702635b260b008d391705c521fca7283761",
  "patch": "diff --git a/astropy/utils/metadata.py b/astropy/utils/metadata.py\n--- a/astropy/utils/metadata.py\n+++ b/astropy/utils/metadata.py\n@@ -73,7 +73,7 @@ def dtype(arr):\n                        dtype_bytes_or_chars(arr.dtype)]\n \n     arr_common = np.array([arr[0] for arr in arrs])\n-    return arr_common.dtype.str\n+    return arr_common.dtype.str if arr_common.dtype.names is None else arr_common.dtype.descr\n \n \n class MergeStrategyMeta(type):\n",
  "test_patch": "diff --git a/astropy/table/tests/test_operations.py b/astropy/table/tests/test_operations.py\n--- a/astropy/table/tests/test_operations.py\n+++ b/astropy/table/tests/test_operations.py\n@@ -789,6 +789,21 @@ def test_keys_left_right_exceptions(self):\n         with pytest.raises(ValueError, match=msg):\n             table.join(t1, t2, keys_left=['a'], keys_right=['a'], join_funcs={})\n \n+    def test_join_structured_column(self):\n+        \"\"\"Regression tests for gh-13271.\"\"\"\n+        # Two tables with matching names, including a structured column.\n+        t1 = Table([np.array([(1., 1), (2., 2)], dtype=[('f', 'f8'), ('i', 'i8')]),\n+                    ['one', 'two']], names=['structured', 'string'])\n+        t2 = Table([np.array([(2., 2), (4., 4)], dtype=[('f', 'f8'), ('i', 'i8')]),\n+                    ['three', 'four']], names=['structured', 'string'])\n+        t12 = table.join(t1, t2, ['structured'], join_type='outer')\n+        assert t12.pformat() == [\n+            'structured [f, i] string_1 string_2',\n+            '----------------- -------- --------',\n+            '          (1., 1)      one       --',\n+            '          (2., 2)      two    three',\n+            '          (4., 4)       --     four']\n+\n \n class TestSetdiff():\n \n@@ -1260,6 +1275,33 @@ def test_vstack_different_representation(self):\n         with pytest.raises(ValueError, match='representations are inconsistent'):\n             table.vstack([t1, t3])\n \n+    def test_vstack_structured_column(self):\n+        \"\"\"Regression tests for gh-13271.\"\"\"\n+        # Two tables with matching names, including a structured column.\n+        t1 = Table([np.array([(1., 1), (2., 2)], dtype=[('f', 'f8'), ('i', 'i8')]),\n+                    ['one', 'two']], names=['structured', 'string'])\n+        t2 = Table([np.array([(3., 3), (4., 4)], dtype=[('f', 'f8'), ('i', 'i8')]),\n+                    ['three', 'four']], names=['structured', 'string'])\n+        t12 = table.vstack([t1, t2])\n+        assert t12.pformat() == [\n+            'structured [f, i] string',\n+            '----------------- ------',\n+            '          (1., 1)    one',\n+            '          (2., 2)    two',\n+            '          (3., 3)  three',\n+            '          (4., 4)   four']\n+\n+        # One table without the structured column.\n+        t3 = t2[('string',)]\n+        t13 = table.vstack([t1, t3])\n+        assert t13.pformat() == [\n+            'structured [f, i] string',\n+            '----------------- ------',\n+            '         (1.0, 1)    one',\n+            '         (2.0, 2)    two',\n+            '               --  three',\n+            '               --   four']\n+\n \n class TestDStack():\n \n@@ -1400,6 +1442,29 @@ def test_dstack_skycoord(self):\n         assert skycoord_equal(sc1, t12['col0'][:, 0])\n         assert skycoord_equal(sc2, t12['col0'][:, 1])\n \n+    def test_dstack_structured_column(self):\n+        \"\"\"Regression tests for gh-13271.\"\"\"\n+        # Two tables with matching names, including a structured column.\n+        t1 = Table([np.array([(1., 1), (2., 2)], dtype=[('f', 'f8'), ('i', 'i8')]),\n+                    ['one', 'two']], names=['structured', 'string'])\n+        t2 = Table([np.array([(3., 3), (4., 4)], dtype=[('f', 'f8'), ('i', 'i8')]),\n+                    ['three', 'four']], names=['structured', 'string'])\n+        t12 = table.dstack([t1, t2])\n+        assert t12.pformat() == [\n+            'structured [f, i]     string   ',\n+            '------------------ ------------',\n+            '(1., 1) .. (3., 3) one .. three',\n+            '(2., 2) .. (4., 4)  two .. four']\n+\n+        # One table without the structured column.\n+        t3 = t2[('string',)]\n+        t13 = table.dstack([t1, t3])\n+        assert t13.pformat() == [\n+            'structured [f, i]    string   ',\n+            '----------------- ------------',\n+            '   (1.0, 1) .. -- one .. three',\n+            '   (2.0, 2) .. --  two .. four']\n+\n \n class TestHStack():\n \n",
  "problem_statement": "vstack'ing structured array tables fails with casting error\n<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n<!-- Please check that the development version still produces the same bug.\r\nYou can install development version with\r\npip install git+https://github.com/astropy/astropy\r\ncommand. -->\r\n\r\n### Description\r\n<!-- Provide a general description of the bug. -->\r\nUsing `table.vstack` on tables containing columns backed by numpy structured arrays fails.\r\n\r\n\r\n\r\n\r\n### Steps to Reproduce\r\n<!-- Ideally a code example could be provided so we can run it ourselves. -->\r\n<!-- If you are pasting code, use triple backticks (```) around\r\nyour code snippet. -->\r\n<!-- If necessary, sanitize your screen output to be pasted so you do not\r\nreveal secrets like tokens and passwords. -->\r\n\r\n\r\n\r\n```python\r\na=Table([dict(field1='test',field2=(1.,0.5,1.5))])\r\nb=Table([dict(field1='foo')])\r\ntable.vstack((a,b)) # works\r\na=Table([dict(field1='test',field2=(1.,0.5,1.5))],dtype=[str,[('val','f4'),('min','f4'),('max','f4')]])\r\ntable.vstack((a,b)) # fails\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  Input In [45] in <cell line: 1>\r\n    table.vstack((a,b))\r\n  File ~/code/python/astropy/astropy/table/operations.py:651 in vstack\r\n    out = _vstack(tables, join_type, col_name_map, metadata_conflicts)\r\n  File ~/code/python/astropy/astropy/table/operations.py:1409 in _vstack\r\n    col[idx0:idx1] = array[name]\r\n  File ~/code/python/astropy/astropy/table/column.py:1280 in __setitem__\r\n    self.data[index] = value\r\nTypeError: Cannot cast array data from dtype([('val', '<f4'), ('min', '<f4'), ('max', '<f4')]) to dtype('V12') according to the rule 'unsafe'\r\n```\r\n\r\n### System Details\r\n<!-- Even if you do not think this is necessary, it is useful information for the maintainers.\r\nPlease run the following snippet and paste the output below:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"Numpy\", numpy.__version__)\r\nimport erfa; print(\"pyerfa\", erfa.__version__)\r\nimport astropy; print(\"astropy\", astropy.__version__)\r\nimport scipy; print(\"Scipy\", scipy.__version__)\r\nimport matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\n-->\r\n```\r\nmacOS-12.3.1-x86_64-i386-64bit\r\nPython 3.10.4 (main, Apr 26 2022, 19:42:59) [Clang 13.1.6 (clang-1316.0.21.2)]\r\nNumpy 1.22.3\r\npyerfa 2.0.0.1\r\nastropy 5.2.dev92+gf0e2129aa\r\nScipy 1.7.3\r\nMatplotlib 3.5.2\r\n```\n",
  "hints_text": "Welcome to Astropy ðŸ‘‹ and thank you for your first issue!\n\nA project member will respond to you as soon as possible; in the meantime, please double-check the [guidelines for submitting issues](https://github.com/astropy/astropy/blob/main/CONTRIBUTING.md#reporting-issues) and make sure you've provided the requested details.\n\nGitHub issues in the Astropy repository are used to track bug reports and feature requests; If your issue poses a question about how to use Astropy, please instead raise your question in the [Astropy Discourse user forum](https://community.openastronomy.org/c/astropy/8) and close this issue.\n\nIf you feel that this issue has not been responded to in a timely manner, please leave a comment mentioning our software support engineer @embray, or send a message directly to the [development mailing list](http://groups.google.com/group/astropy-dev).  If the issue is urgent or sensitive in nature (e.g., a security vulnerability) please send an e-mail directly to the private e-mail feedback@astropy.org.\nHmm, clearly the wrong dtype is inferred for the merged column. I guess our tests did not include a stack of a table that had with one that did not have a structured column.\nActually, one can also not do a `vstack` when both tables have the structured column.",
  "created_at": "2022-06-05T15:18:24Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"astropy/table/tests/test_operations.py::TestJoin::test_join_structured_column\", \"astropy/table/tests/test_operations.py::TestVStack::test_vstack_structured_column\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_structured_column\"]",
  "PASS_TO_PASS": "[\"astropy/table/tests/test_operations.py::TestJoin::test_table_meta_merge[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_table_meta_merge[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_table_meta_merge_conflict[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_table_meta_merge_conflict[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_both_unmasked_inner[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_both_unmasked_inner[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_both_unmasked_left_right_outer[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_both_unmasked_single_key_inner[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_both_unmasked_single_key_inner[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_both_unmasked_single_key_left_right_outer[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_masked_unmasked[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_masked_masked[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_classes\", \"astropy/table/tests/test_operations.py::TestJoin::test_col_rename[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_col_rename[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_rename_conflict[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_rename_conflict[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_missing_keys[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_missing_keys[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_bad_join_type[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_bad_join_type[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_no_common_keys[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_no_common_keys[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_masked_key_column[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_col_meta_merge[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_col_meta_merge[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_join_multidimensional[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_join_multidimensional[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_join_multidimensional_masked[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[arrayswap]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[arraywrap]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[cartesianrep]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[latitude]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[longitude]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[ndarraybig]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[ndarraylil]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[quantity]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[skycoord]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[sphericaldiff]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[sphericalrep]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[sphericalrepdiff]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[time]\", \"astropy/table/tests/test_operations.py::TestJoin::test_mixin_functionality[timedelta]\", \"astropy/table/tests/test_operations.py::TestJoin::test_cartesian_join[Table]\", \"astropy/table/tests/test_operations.py::TestJoin::test_cartesian_join[QTable]\", \"astropy/table/tests/test_operations.py::TestJoin::test_keys_left_right_basic\", \"astropy/table/tests/test_operations.py::TestJoin::test_keys_left_right_exceptions\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_default_same_columns[Table]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_default_same_columns[QTable]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_default_same_tables[Table]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_default_same_tables[QTable]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_extra_col_left_table[Table]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_extra_col_left_table[QTable]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_extra_col_right_table[Table]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_extra_col_right_table[QTable]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_keys[Table]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_keys[QTable]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_missing_key[Table]\", \"astropy/table/tests/test_operations.py::TestSetdiff::test_missing_key[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_validate_join_type\", \"astropy/table/tests/test_operations.py::TestVStack::test_stack_rows[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_stack_rows[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_stack_table_column[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_stack_table_column[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_table_meta_merge[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_table_meta_merge[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_table_meta_merge_conflict[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_table_meta_merge_conflict[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_bad_input_type[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_bad_input_type[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_stack_basic_inner[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_stack_basic_inner[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_stack_basic_outer[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_stack_incompatible[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_stack_incompatible[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_vstack_one_masked[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_col_meta_merge_inner[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_col_meta_merge_inner[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_col_meta_merge_outer[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_vstack_one_table[Table]\", \"astropy/table/tests/test_operations.py::TestVStack::test_vstack_one_table[QTable]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[arrayswap]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[arraywrap]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[cartesianrep]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[latitude]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[longitude]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[ndarraybig]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[ndarraylil]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[quantity]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[skycoord]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[sphericaldiff]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[sphericalrep]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[sphericalrepdiff]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[time]\", \"astropy/table/tests/test_operations.py::TestVStack::test_mixin_functionality[timedelta]\", \"astropy/table/tests/test_operations.py::TestVStack::test_vstack_different_representation\", \"astropy/table/tests/test_operations.py::TestDStack::test_validate_join_type\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_table_column[Table]\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_table_column[QTable]\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_basic_outer[Table]\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_basic_inner[Table]\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_basic_inner[QTable]\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_multi_dimension_column[Table]\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_multi_dimension_column[QTable]\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_different_length_table[Table]\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_different_length_table[QTable]\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_single_table\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_representation\", \"astropy/table/tests/test_operations.py::TestDStack::test_dstack_skycoord\", \"astropy/table/tests/test_operations.py::TestHStack::test_validate_join_type\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_same_table[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_same_table[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_rows[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_rows[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_columns[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_columns[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_table_meta_merge[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_table_meta_merge[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_table_meta_merge_conflict[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_table_meta_merge_conflict[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_bad_input_type[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_bad_input_type[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_incompatible[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_stack_incompatible[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_hstack_one_masked[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_table_col_rename[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_table_col_rename[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_col_meta_merge[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_col_meta_merge[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_hstack_one_table[Table]\", \"astropy/table/tests/test_operations.py::TestHStack::test_hstack_one_table[QTable]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[arrayswap]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[arraywrap]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[cartesianrep]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[latitude]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[longitude]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[ndarraybig]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[ndarraylil]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[quantity]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[skycoord]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[sphericaldiff]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[sphericalrep]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[sphericalrepdiff]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[time]\", \"astropy/table/tests/test_operations.py::TestHStack::test_mixin_functionality[timedelta]\", \"astropy/table/tests/test_operations.py::test_unique[Table]\", \"astropy/table/tests/test_operations.py::test_unique[QTable]\", \"astropy/table/tests/test_operations.py::test_vstack_bytes[Table]\", \"astropy/table/tests/test_operations.py::test_vstack_bytes[QTable]\", \"astropy/table/tests/test_operations.py::test_vstack_unicode\", \"astropy/table/tests/test_operations.py::test_join_mixins_not_sortable\", \"astropy/table/tests/test_operations.py::test_join_non_1d_key_column\", \"astropy/table/tests/test_operations.py::test_argsort_time_column\", \"astropy/table/tests/test_operations.py::test_sort_indexed_table\", \"astropy/table/tests/test_operations.py::test_get_out_class\", \"astropy/table/tests/test_operations.py::test_masking_required_exception\", \"astropy/table/tests/test_operations.py::test_stack_columns\", \"astropy/table/tests/test_operations.py::test_mixin_join_regression\"]",
  "environment_setup_commit": "cdf311e0714e611d48b0a31eb1f0e2cbffab7f23",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.527728",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}