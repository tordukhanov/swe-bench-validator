{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9309",
  "base_commit": "01970059760dd59d22cd6efaa17dbf0e0efbc60f",
  "patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -26,7 +26,7 @@\n from docutils import nodes\n from docutils.nodes import Element\n from requests import Response\n-from requests.exceptions import HTTPError, TooManyRedirects\n+from requests.exceptions import ConnectionError, HTTPError, TooManyRedirects\n \n from sphinx.application import Sphinx\n from sphinx.builders.dummy import DummyBuilder\n@@ -456,7 +456,9 @@ def check_uri() -> Tuple[str, str, int]:\n                                                  config=self.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\n-                    except (HTTPError, TooManyRedirects) as err:\n+                    # Servers drop the connection on HEAD requests, causing\n+                    # ConnectionError.\n+                    except (ConnectionError, HTTPError, TooManyRedirects) as err:\n                         if isinstance(err, HTTPError) and err.response.status_code == 429:\n                             raise\n                         # retry with GET request if that fails, some servers\n",
  "test_patch": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -579,3 +579,29 @@ def test_limit_rate_bails_out_after_waiting_max_time(app):\n                                               rate_limits)\n     next_check = worker.limit_rate(FakeResponse())\n     assert next_check is None\n+\n+\n+class ConnectionResetHandler(http.server.BaseHTTPRequestHandler):\n+    def do_HEAD(self):\n+        self.connection.close()\n+\n+    def do_GET(self):\n+        self.send_response(200, \"OK\")\n+        self.end_headers()\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_get_after_head_raises_connection_error(app):\n+    with http_server(ConnectionResetHandler):\n+        app.build()\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert not content\n+    content = (app.outdir / 'output.json').read_text()\n+    assert json.loads(content) == {\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"status\": \"working\",\n+        \"code\": 0,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n",
  "problem_statement": "Linkcheck Reports Broken Link when Remote Server Closes on HEAD Request\n**Describe the bug**\r\nRunning `make linkcheck` on a document that contains an external link to a website may report the link is broken when a web browser may successfully open the link. Specifically, if the website closes its connection when receiving the `HTTP HEAD` request method, then `linkcheck.py` will receive a `ConnectionError` exception, which bypasses the logic that would otherwise have it make an `HTTP GET` request. \r\n\r\nA specific example of a website exhibiting this behaviour is [the US Patent and Trademark Office](https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-bool.html&r=1&f=G&l=50&co1=AND&d=PTXT&s1=7840660&OS=7840660&RS=7840660)\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behaviour:\r\n```sh\r\n$ sphinx-quickstart  # accept all the default options\r\n$ echo '\\n\\nThis is `a link to the US Patent Website <https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-bool.html&r=1&f=G&l=50&co1=AND&d=PTXT&s1=7840660&OS=7840660&RS=7840660>`_.\\n' >> index.rst\r\n$ make html linkcheck \r\n```\r\n- Observe linkcheck reporting a broken link:\r\n```\r\nRunning Sphinx v4.0.2\r\nloading pickled environment... done\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [linkcheck]: targets for 1 source files that are out of date\r\nupdating environment: 0 added, 0 changed, 0 removed\r\nlooking for now-outdated files... none found\r\npreparing documents... done\r\nwriting output... [100%] index\r\n\r\n(           index: line   22) broken    https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-bool.html&r=1&f=G&l=50&co1=AND&d=PTXT&s1=7840660&OS=7840660&RS=7840660 - ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\r\nbuild finished with problems.\r\nmake: *** [linkcheck] Error 1\r\n```\r\n\r\n- Open `_build/html/index.html` in your browser\r\n- Click \"a link to the US Patent Website\"\r\n- Observe the link opening and rendering normally\r\n\r\n**Expected behavior**\r\nIf a link is valid, and the website is returning valid content for an `HTTP GET` request, `make linkcheck` should not report the link as `broken`.\r\n\r\nInternally, in `sphinx/builders/linkcheck.py`, if a call to `requests.head()` raises a `requests.exceptions.ConnectionError` exception, it should attempt a `requests.get()` just like it does with `HTTPError` and `TooManyredirects`.\r\n\r\n**Your project**\r\n[sphinx-bug-linkcheck-reports-broken-link.zip](https://github.com/sphinx-doc/sphinx/files/6610252/sphinx-bug-linkcheck-reports-broken-link.zip)\r\n\r\n**Environment info**\r\n- OS: `macOS 11.3.1` (but this does not appear to be OS-dependent)\r\n- Python version: `3.8.10` and `3.9.5`\r\n- Sphinx version: `v3.5.4` and `v4.0.2`\r\n- Sphinx extensions:  none\r\n- Extra tools: any common web browser\r\n\r\n**Additional context**\r\nUsing `curl`, we can see that this particular website closes connections when receiving `HTTP HEAD`:\r\n```sh\r\n$ curl -v -L -A \"Sphinx/1.0\" \"http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=9,942,040.PN.&OS=PN/9,942,040&RS=PN/9,942,040\"\r\n```\r\n- Observe that this returns the expected HTML content\r\n\r\n```sh\r\ncurl --head -v -L -A \"Sphinx/1.0\" \"http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=9,942,040.PN.&OS=PN/9,942,040&RS=PN/9,942,040\"\r\n```\r\n- Observe that this fails to return any content from the server\r\n\n",
  "hints_text": "",
  "created_at": "2021-06-07T21:55:57Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"tests/test_build_linkcheck.py::test_get_after_head_raises_connection_error\"]",
  "PASS_TO_PASS": "[\"tests/test_build_linkcheck.py::test_defaults_json\", \"tests/test_build_linkcheck.py::test_raises_for_invalid_status\", \"tests/test_build_linkcheck.py::test_auth_header_uses_first_match\", \"tests/test_build_linkcheck.py::test_auth_header_no_match\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash\", \"tests/test_build_linkcheck.py::test_linkcheck_request_headers_default\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_follows_redirects_on_GET\", \"tests/test_build_linkcheck.py::test_invalid_ssl\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var\", \"tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file\", \"tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date\", \"tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header\", \"tests/test_build_linkcheck.py::test_too_many_requests_user_timeout\", \"tests/test_build_linkcheck.py::test_limit_rate_default_sleep\", \"tests/test_build_linkcheck.py::test_limit_rate_user_max_delay\", \"tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time\", \"tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time\", \"tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time\"]",
  "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.065898",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}