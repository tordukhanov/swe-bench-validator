{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-3631",
  "base_commit": "c32e58b4fff72816c6b554db51509bea6a891cdc",
  "patch": "diff --git a/xarray/coding/cftimeindex.py b/xarray/coding/cftimeindex.py\n--- a/xarray/coding/cftimeindex.py\n+++ b/xarray/coding/cftimeindex.py\n@@ -430,7 +430,14 @@ def __sub__(self, other):\n         import cftime\n \n         if isinstance(other, (CFTimeIndex, cftime.datetime)):\n-            return pd.TimedeltaIndex(np.array(self) - np.array(other))\n+            try:\n+                return pd.TimedeltaIndex(np.array(self) - np.array(other))\n+            except OverflowError:\n+                raise ValueError(\n+                    \"The time difference exceeds the range of values \"\n+                    \"that can be expressed at the nanosecond resolution.\"\n+                )\n+\n         elif isinstance(other, pd.TimedeltaIndex):\n             return CFTimeIndex(np.array(self) - other.to_pytimedelta())\n         else:\ndiff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -18,6 +18,7 @@\n     cast,\n )\n \n+import datetime\n import numpy as np\n import pandas as pd\n \n@@ -2041,7 +2042,9 @@ def interpolate_na(\n         method: str = \"linear\",\n         limit: int = None,\n         use_coordinate: Union[bool, str] = True,\n-        max_gap: Union[int, float, str, pd.Timedelta, np.timedelta64] = None,\n+        max_gap: Union[\n+            int, float, str, pd.Timedelta, np.timedelta64, datetime.timedelta\n+        ] = None,\n         **kwargs: Any,\n     ) -> \"DataArray\":\n         \"\"\"Fill in NaNs by interpolating according to different methods.\n@@ -2073,7 +2076,7 @@ def interpolate_na(\n             or None for no limit. This filling is done regardless of the size of\n             the gap in the data. To only interpolate over gaps less than a given length,\n             see ``max_gap``.\n-        max_gap: int, float, str, pandas.Timedelta, numpy.timedelta64, default None.\n+        max_gap: int, float, str, pandas.Timedelta, numpy.timedelta64, datetime.timedelta, default None.\n             Maximum size of gap, a continuous sequence of NaNs, that will be filled.\n             Use None for no limit. When interpolating along a datetime64 dimension\n             and ``use_coordinate=True``, ``max_gap`` can be one of the following:\n@@ -2081,6 +2084,7 @@ def interpolate_na(\n             - a string that is valid input for pandas.to_timedelta\n             - a :py:class:`numpy.timedelta64` object\n             - a :py:class:`pandas.Timedelta` object\n+            - a :py:class:`datetime.timedelta` object\n \n             Otherwise, ``max_gap`` must be an int or a float. Use of ``max_gap`` with unlabeled\n             dimensions has not been implemented yet. Gap length is defined as the difference\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -27,6 +27,7 @@\n     cast,\n )\n \n+import datetime\n import numpy as np\n import pandas as pd\n \n@@ -3994,7 +3995,9 @@ def interpolate_na(\n         method: str = \"linear\",\n         limit: int = None,\n         use_coordinate: Union[bool, Hashable] = True,\n-        max_gap: Union[int, float, str, pd.Timedelta, np.timedelta64] = None,\n+        max_gap: Union[\n+            int, float, str, pd.Timedelta, np.timedelta64, datetime.timedelta\n+        ] = None,\n         **kwargs: Any,\n     ) -> \"Dataset\":\n         \"\"\"Fill in NaNs by interpolating according to different methods.\n@@ -4027,7 +4030,7 @@ def interpolate_na(\n             or None for no limit. This filling is done regardless of the size of\n             the gap in the data. To only interpolate over gaps less than a given length,\n             see ``max_gap``.\n-        max_gap: int, float, str, pandas.Timedelta, numpy.timedelta64, default None.\n+        max_gap: int, float, str, pandas.Timedelta, numpy.timedelta64, datetime.timedelta, default None.\n             Maximum size of gap, a continuous sequence of NaNs, that will be filled.\n             Use None for no limit. When interpolating along a datetime64 dimension\n             and ``use_coordinate=True``, ``max_gap`` can be one of the following:\n@@ -4035,6 +4038,7 @@ def interpolate_na(\n             - a string that is valid input for pandas.to_timedelta\n             - a :py:class:`numpy.timedelta64` object\n             - a :py:class:`pandas.Timedelta` object\n+            - a :py:class:`datetime.timedelta` object\n \n             Otherwise, ``max_gap`` must be an int or a float. Use of ``max_gap`` with unlabeled\n             dimensions has not been implemented yet. Gap length is defined as the difference\ndiff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -372,44 +372,100 @@ def _datetime_nanmin(array):\n \n \n def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n-    \"\"\"Convert an array containing datetime-like data to an array of floats.\n+    \"\"\"Convert an array containing datetime-like data to numerical values.\n+\n+    Convert the datetime array to a timedelta relative to an offset.\n \n     Parameters\n     ----------\n-    da : np.array\n-        Input data\n-    offset: Scalar with the same type of array or None\n-        If None, subtract minimum values to reduce round off error\n-    datetime_unit: None or any of {'Y', 'M', 'W', 'D', 'h', 'm', 's', 'ms',\n-        'us', 'ns', 'ps', 'fs', 'as'}\n-    dtype: target dtype\n+    da : array-like\n+      Input data\n+    offset: None, datetime or cftime.datetime\n+      Datetime offset. If None, this is set by default to the array's minimum\n+      value to reduce round off errors.\n+    datetime_unit: {None, Y, M, W, D, h, m, s, ms, us, ns, ps, fs, as}\n+      If not None, convert output to a given datetime unit. Note that some\n+      conversions are not allowed due to non-linear relationships between units.\n+    dtype: dtype\n+      Output dtype.\n \n     Returns\n     -------\n     array\n+      Numerical representation of datetime object relative to an offset.\n+\n+    Notes\n+    -----\n+    Some datetime unit conversions won't work, for example from days to years, even\n+    though some calendars would allow for them (e.g. no_leap). This is because there\n+    is no `cftime.timedelta` object.\n     \"\"\"\n     # TODO: make this function dask-compatible?\n+    # Set offset to minimum if not given\n     if offset is None:\n         if array.dtype.kind in \"Mm\":\n             offset = _datetime_nanmin(array)\n         else:\n             offset = min(array)\n+\n+    # Compute timedelta object.\n+    # For np.datetime64, this can silently yield garbage due to overflow.\n+    # One option is to enforce 1970-01-01 as the universal offset.\n     array = array - offset\n \n-    if not hasattr(array, \"dtype\"):  # scalar is converted to 0d-array\n+    # Scalar is converted to 0d-array\n+    if not hasattr(array, \"dtype\"):\n         array = np.array(array)\n \n+    # Convert timedelta objects to float by first converting to microseconds.\n     if array.dtype.kind in \"O\":\n-        # possibly convert object array containing datetime.timedelta\n-        array = np.asarray(pd.Series(array.ravel())).reshape(array.shape)\n+        return py_timedelta_to_float(array, datetime_unit or \"ns\").astype(dtype)\n \n-    if datetime_unit:\n-        array = array / np.timedelta64(1, datetime_unit)\n+    # Convert np.NaT to np.nan\n+    elif array.dtype.kind in \"mM\":\n \n-    # convert np.NaT to np.nan\n-    if array.dtype.kind in \"mM\":\n+        # Convert to specified timedelta units.\n+        if datetime_unit:\n+            array = array / np.timedelta64(1, datetime_unit)\n         return np.where(isnull(array), np.nan, array.astype(dtype))\n-    return array.astype(dtype)\n+\n+\n+def timedelta_to_numeric(value, datetime_unit=\"ns\", dtype=float):\n+    \"\"\"Convert a timedelta-like object to numerical values.\n+\n+    Parameters\n+    ----------\n+    value : datetime.timedelta, numpy.timedelta64, pandas.Timedelta, str\n+      Time delta representation.\n+    datetime_unit : {Y, M, W, D, h, m, s, ms, us, ns, ps, fs, as}\n+      The time units of the output values. Note that some conversions are not allowed due to\n+      non-linear relationships between units.\n+    dtype : type\n+      The output data type.\n+\n+    \"\"\"\n+    import datetime as dt\n+\n+    if isinstance(value, dt.timedelta):\n+        out = py_timedelta_to_float(value, datetime_unit)\n+    elif isinstance(value, np.timedelta64):\n+        out = np_timedelta64_to_float(value, datetime_unit)\n+    elif isinstance(value, pd.Timedelta):\n+        out = pd_timedelta_to_float(value, datetime_unit)\n+    elif isinstance(value, str):\n+        try:\n+            a = pd.to_timedelta(value)\n+        except ValueError:\n+            raise ValueError(\n+                f\"Could not convert {value!r} to timedelta64 using pandas.to_timedelta\"\n+            )\n+        return py_timedelta_to_float(a, datetime_unit)\n+    else:\n+        raise TypeError(\n+            f\"Expected value of type str, pandas.Timedelta, datetime.timedelta \"\n+            f\"or numpy.timedelta64, but received {type(value).__name__}\"\n+        )\n+    return out.astype(dtype)\n \n \n def _to_pytimedelta(array, unit=\"us\"):\n@@ -417,6 +473,40 @@ def _to_pytimedelta(array, unit=\"us\"):\n     return index.to_pytimedelta().reshape(array.shape)\n \n \n+def np_timedelta64_to_float(array, datetime_unit):\n+    \"\"\"Convert numpy.timedelta64 to float.\n+\n+    Notes\n+    -----\n+    The array is first converted to microseconds, which is less likely to\n+    cause overflow errors.\n+    \"\"\"\n+    array = array.astype(\"timedelta64[ns]\").astype(np.float64)\n+    conversion_factor = np.timedelta64(1, \"ns\") / np.timedelta64(1, datetime_unit)\n+    return conversion_factor * array\n+\n+\n+def pd_timedelta_to_float(value, datetime_unit):\n+    \"\"\"Convert pandas.Timedelta to float.\n+\n+    Notes\n+    -----\n+    Built on the assumption that pandas timedelta values are in nanoseconds,\n+    which is also the numpy default resolution.\n+    \"\"\"\n+    value = value.to_timedelta64()\n+    return np_timedelta64_to_float(value, datetime_unit)\n+\n+\n+def py_timedelta_to_float(array, datetime_unit):\n+    \"\"\"Convert a timedelta object to a float, possibly at a loss of resolution.\n+    \"\"\"\n+    array = np.asarray(array)\n+    array = np.reshape([a.total_seconds() for a in array.ravel()], array.shape) * 1e6\n+    conversion_factor = np.timedelta64(1, \"us\") / np.timedelta64(1, datetime_unit)\n+    return conversion_factor * array\n+\n+\n def mean(array, axis=None, skipna=None, **kwargs):\n     \"\"\"inhouse mean that can handle np.datetime64 or cftime.datetime\n     dtypes\"\"\"\ndiff --git a/xarray/core/missing.py b/xarray/core/missing.py\n--- a/xarray/core/missing.py\n+++ b/xarray/core/missing.py\n@@ -2,6 +2,7 @@\n from functools import partial\n from numbers import Number\n from typing import Any, Callable, Dict, Hashable, Sequence, Union\n+import datetime as dt\n \n import numpy as np\n import pandas as pd\n@@ -9,7 +10,7 @@\n from . import utils\n from .common import _contains_datetime_like_objects, ones_like\n from .computation import apply_ufunc\n-from .duck_array_ops import dask_array_type\n+from .duck_array_ops import dask_array_type, datetime_to_numeric, timedelta_to_numeric\n from .utils import OrderedSet, is_scalar\n from .variable import Variable, broadcast_variables\n \n@@ -207,52 +208,81 @@ def _apply_over_vars_with_dim(func, self, dim=None, **kwargs):\n \n \n def get_clean_interp_index(arr, dim: Hashable, use_coordinate: Union[str, bool] = True):\n-    \"\"\"get index to use for x values in interpolation.\n+    \"\"\"Return index to use for x values in interpolation or curve fitting.\n \n-    If use_coordinate is True, the coordinate that shares the name of the\n-    dimension along which interpolation is being performed will be used as the\n-    x values.\n+    Parameters\n+    ----------\n+    arr : DataArray\n+      Array to interpolate or fit to a curve.\n+    dim : str\n+      Name of dimension along which to fit.\n+    use_coordinate : str or bool\n+      If use_coordinate is True, the coordinate that shares the name of the\n+      dimension along which interpolation is being performed will be used as the\n+      x values. If False, the x values are set as an equally spaced sequence.\n+\n+    Returns\n+    -------\n+    Variable\n+      Numerical values for the x-coordinates.\n \n-    If use_coordinate is False, the x values are set as an equally spaced\n-    sequence.\n+    Notes\n+    -----\n+    If indexing is along the time dimension, datetime coordinates are converted\n+    to time deltas with respect to 1970-01-01.\n     \"\"\"\n-    if use_coordinate:\n-        if use_coordinate is True:\n-            index = arr.get_index(dim)\n-        else:\n-            index = arr.coords[use_coordinate]\n-            if index.ndim != 1:\n-                raise ValueError(\n-                    f\"Coordinates used for interpolation must be 1D, \"\n-                    f\"{use_coordinate} is {index.ndim}D.\"\n-                )\n-            index = index.to_index()\n-\n-        # TODO: index.name is None for multiindexes\n-        # set name for nice error messages below\n-        if isinstance(index, pd.MultiIndex):\n-            index.name = dim\n-\n-        if not index.is_monotonic:\n-            raise ValueError(f\"Index {index.name!r} must be monotonically increasing\")\n-\n-        if not index.is_unique:\n-            raise ValueError(f\"Index {index.name!r} has duplicate values\")\n-\n-        # raise if index cannot be cast to a float (e.g. MultiIndex)\n-        try:\n-            index = index.values.astype(np.float64)\n-        except (TypeError, ValueError):\n-            # pandas raises a TypeError\n-            # xarray/numpy raise a ValueError\n-            raise TypeError(\n-                f\"Index {index.name!r} must be castable to float64 to support \"\n-                f\"interpolation, got {type(index).__name__}.\"\n-            )\n \n-    else:\n+    # Question: If use_coordinate is a string, what role does `dim` play?\n+    from xarray.coding.cftimeindex import CFTimeIndex\n+\n+    if use_coordinate is False:\n         axis = arr.get_axis_num(dim)\n-        index = np.arange(arr.shape[axis], dtype=np.float64)\n+        return np.arange(arr.shape[axis], dtype=np.float64)\n+\n+    if use_coordinate is True:\n+        index = arr.get_index(dim)\n+\n+    else:  # string\n+        index = arr.coords[use_coordinate]\n+        if index.ndim != 1:\n+            raise ValueError(\n+                f\"Coordinates used for interpolation must be 1D, \"\n+                f\"{use_coordinate} is {index.ndim}D.\"\n+            )\n+        index = index.to_index()\n+\n+    # TODO: index.name is None for multiindexes\n+    # set name for nice error messages below\n+    if isinstance(index, pd.MultiIndex):\n+        index.name = dim\n+\n+    if not index.is_monotonic:\n+        raise ValueError(f\"Index {index.name!r} must be monotonically increasing\")\n+\n+    if not index.is_unique:\n+        raise ValueError(f\"Index {index.name!r} has duplicate values\")\n+\n+    # Special case for non-standard calendar indexes\n+    # Numerical datetime values are defined with respect to 1970-01-01T00:00:00 in units of nanoseconds\n+    if isinstance(index, (CFTimeIndex, pd.DatetimeIndex)):\n+        offset = type(index[0])(1970, 1, 1)\n+        if isinstance(index, CFTimeIndex):\n+            index = index.values\n+        index = Variable(\n+            data=datetime_to_numeric(index, offset=offset, datetime_unit=\"ns\"),\n+            dims=(dim,),\n+        )\n+\n+    # raise if index cannot be cast to a float (e.g. MultiIndex)\n+    try:\n+        index = index.values.astype(np.float64)\n+    except (TypeError, ValueError):\n+        # pandas raises a TypeError\n+        # xarray/numpy raise a ValueError\n+        raise TypeError(\n+            f\"Index {index.name!r} must be castable to float64 to support \"\n+            f\"interpolation, got {type(index).__name__}.\"\n+        )\n \n     return index\n \n@@ -263,11 +293,13 @@ def interp_na(\n     use_coordinate: Union[bool, str] = True,\n     method: str = \"linear\",\n     limit: int = None,\n-    max_gap: Union[int, float, str, pd.Timedelta, np.timedelta64] = None,\n+    max_gap: Union[int, float, str, pd.Timedelta, np.timedelta64, dt.timedelta] = None,\n     **kwargs,\n ):\n     \"\"\"Interpolate values according to different methods.\n     \"\"\"\n+    from xarray.coding.cftimeindex import CFTimeIndex\n+\n     if dim is None:\n         raise NotImplementedError(\"dim is a required argument\")\n \n@@ -281,26 +313,11 @@ def interp_na(\n \n         if (\n             dim in self.indexes\n-            and isinstance(self.indexes[dim], pd.DatetimeIndex)\n+            and isinstance(self.indexes[dim], (pd.DatetimeIndex, CFTimeIndex))\n             and use_coordinate\n         ):\n-            if not isinstance(max_gap, (np.timedelta64, pd.Timedelta, str)):\n-                raise TypeError(\n-                    f\"Underlying index is DatetimeIndex. Expected max_gap of type str, pandas.Timedelta or numpy.timedelta64 but received {max_type}\"\n-                )\n-\n-            if isinstance(max_gap, str):\n-                try:\n-                    max_gap = pd.to_timedelta(max_gap)\n-                except ValueError:\n-                    raise ValueError(\n-                        f\"Could not convert {max_gap!r} to timedelta64 using pandas.to_timedelta\"\n-                    )\n-\n-            if isinstance(max_gap, pd.Timedelta):\n-                max_gap = np.timedelta64(max_gap.value, \"ns\")\n-\n-            max_gap = np.timedelta64(max_gap, \"ns\").astype(np.float64)\n+            # Convert to float\n+            max_gap = timedelta_to_numeric(max_gap)\n \n         if not use_coordinate:\n             if not isinstance(max_gap, (Number, np.number)):\n",
  "test_patch": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -1,6 +1,7 @@\n import warnings\n from textwrap import dedent\n \n+import datetime as dt\n import numpy as np\n import pandas as pd\n import pytest\n@@ -19,6 +20,10 @@\n     rolling_window,\n     stack,\n     where,\n+    py_timedelta_to_float,\n+    np_timedelta64_to_float,\n+    pd_timedelta_to_float,\n+    timedelta_to_numeric,\n )\n from xarray.core.pycompat import dask_array_type\n from xarray.testing import assert_allclose, assert_equal\n@@ -672,13 +677,15 @@ def test_datetime_to_numeric_datetime64():\n \n @requires_cftime\n def test_datetime_to_numeric_cftime():\n-    times = cftime_range(\"2000\", periods=5, freq=\"7D\").values\n-    result = duck_array_ops.datetime_to_numeric(times, datetime_unit=\"h\")\n+    times = cftime_range(\"2000\", periods=5, freq=\"7D\", calendar=\"standard\").values\n+    result = duck_array_ops.datetime_to_numeric(times, datetime_unit=\"h\", dtype=int)\n     expected = 24 * np.arange(0, 35, 7)\n     np.testing.assert_array_equal(result, expected)\n \n     offset = times[1]\n-    result = duck_array_ops.datetime_to_numeric(times, offset=offset, datetime_unit=\"h\")\n+    result = duck_array_ops.datetime_to_numeric(\n+        times, offset=offset, datetime_unit=\"h\", dtype=int\n+    )\n     expected = 24 * np.arange(-7, 28, 7)\n     np.testing.assert_array_equal(result, expected)\n \n@@ -686,3 +693,70 @@ def test_datetime_to_numeric_cftime():\n     result = duck_array_ops.datetime_to_numeric(times, datetime_unit=\"h\", dtype=dtype)\n     expected = 24 * np.arange(0, 35, 7).astype(dtype)\n     np.testing.assert_array_equal(result, expected)\n+\n+\n+@requires_cftime\n+def test_datetime_to_numeric_potential_overflow():\n+    import cftime\n+\n+    times = pd.date_range(\"2000\", periods=5, freq=\"7D\").values.astype(\"datetime64[us]\")\n+    cftimes = cftime_range(\n+        \"2000\", periods=5, freq=\"7D\", calendar=\"proleptic_gregorian\"\n+    ).values\n+\n+    offset = np.datetime64(\"0001-01-01\")\n+    cfoffset = cftime.DatetimeProlepticGregorian(1, 1, 1)\n+\n+    result = duck_array_ops.datetime_to_numeric(\n+        times, offset=offset, datetime_unit=\"D\", dtype=int\n+    )\n+    cfresult = duck_array_ops.datetime_to_numeric(\n+        cftimes, offset=cfoffset, datetime_unit=\"D\", dtype=int\n+    )\n+\n+    expected = 730119 + np.arange(0, 35, 7)\n+\n+    np.testing.assert_array_equal(result, expected)\n+    np.testing.assert_array_equal(cfresult, expected)\n+\n+\n+def test_py_timedelta_to_float():\n+    assert py_timedelta_to_float(dt.timedelta(days=1), \"ns\") == 86400 * 1e9\n+    assert py_timedelta_to_float(dt.timedelta(days=1e6), \"ps\") == 86400 * 1e18\n+    assert py_timedelta_to_float(dt.timedelta(days=1e6), \"ns\") == 86400 * 1e15\n+    assert py_timedelta_to_float(dt.timedelta(days=1e6), \"us\") == 86400 * 1e12\n+    assert py_timedelta_to_float(dt.timedelta(days=1e6), \"ms\") == 86400 * 1e9\n+    assert py_timedelta_to_float(dt.timedelta(days=1e6), \"s\") == 86400 * 1e6\n+    assert py_timedelta_to_float(dt.timedelta(days=1e6), \"D\") == 1e6\n+\n+\n+@pytest.mark.parametrize(\n+    \"td, expected\",\n+    ([np.timedelta64(1, \"D\"), 86400 * 1e9], [np.timedelta64(1, \"ns\"), 1.0]),\n+)\n+def test_np_timedelta64_to_float(td, expected):\n+    out = np_timedelta64_to_float(td, datetime_unit=\"ns\")\n+    np.testing.assert_allclose(out, expected)\n+    assert isinstance(out, float)\n+\n+    out = np_timedelta64_to_float(np.atleast_1d(td), datetime_unit=\"ns\")\n+    np.testing.assert_allclose(out, expected)\n+\n+\n+@pytest.mark.parametrize(\n+    \"td, expected\", ([pd.Timedelta(1, \"D\"), 86400 * 1e9], [pd.Timedelta(1, \"ns\"), 1.0])\n+)\n+def test_pd_timedelta_to_float(td, expected):\n+    out = pd_timedelta_to_float(td, datetime_unit=\"ns\")\n+    np.testing.assert_allclose(out, expected)\n+    assert isinstance(out, float)\n+\n+\n+@pytest.mark.parametrize(\n+    \"td\", [dt.timedelta(days=1), np.timedelta64(1, \"D\"), pd.Timedelta(1, \"D\"), \"1 day\"],\n+)\n+def test_timedelta_to_numeric(td):\n+    # Scalar input\n+    out = timedelta_to_numeric(td, \"ns\")\n+    np.testing.assert_allclose(out, 86400 * 1e9)\n+    assert isinstance(out, float)\ndiff --git a/xarray/tests/test_interp.py b/xarray/tests/test_interp.py\n--- a/xarray/tests/test_interp.py\n+++ b/xarray/tests/test_interp.py\n@@ -662,3 +662,10 @@ def test_datetime_interp_noerror():\n         coords={\"time\": pd.date_range(\"01-01-2001\", periods=50, freq=\"H\")},\n     )\n     a.interp(x=xi, time=xi.time)  # should not raise an error\n+\n+\n+@requires_cftime\n+def test_3641():\n+    times = xr.cftime_range(\"0001\", periods=3, freq=\"500Y\")\n+    da = xr.DataArray(range(3), dims=[\"time\"], coords=[times])\n+    da.interp(time=[\"0002-05-01\"])\ndiff --git a/xarray/tests/test_missing.py b/xarray/tests/test_missing.py\n--- a/xarray/tests/test_missing.py\n+++ b/xarray/tests/test_missing.py\n@@ -16,18 +16,34 @@\n from xarray.tests import (\n     assert_array_equal,\n     assert_equal,\n+    assert_allclose,\n     raises_regex,\n     requires_bottleneck,\n     requires_dask,\n     requires_scipy,\n+    requires_cftime,\n )\n \n+from xarray.tests.test_cftime_offsets import _CFTIME_CALENDARS\n+\n \n @pytest.fixture\n def da():\n     return xr.DataArray([0, np.nan, 1, 2, np.nan, 3, 4, 5, np.nan, 6, 7], dims=\"time\")\n \n \n+@pytest.fixture\n+def cf_da():\n+    def _cf_da(calendar, freq=\"1D\"):\n+        times = xr.cftime_range(\n+            start=\"1970-01-01\", freq=freq, periods=10, calendar=calendar\n+        )\n+        values = np.arange(10)\n+        return xr.DataArray(values, dims=(\"time\",), coords={\"time\": times})\n+\n+    return _cf_da\n+\n+\n @pytest.fixture\n def ds():\n     ds = xr.Dataset()\n@@ -472,6 +488,42 @@ def test_interpolate_na_nan_block_lengths(y, lengths):\n     assert_equal(actual, expected)\n \n \n+@requires_cftime\n+@pytest.mark.parametrize(\"calendar\", _CFTIME_CALENDARS)\n+def test_get_clean_interp_index_cf_calendar(cf_da, calendar):\n+    \"\"\"The index for CFTimeIndex is in units of days. This means that if two series using a 360 and 365 days\n+    calendar each have a trend of .01C/year, the linear regression coefficients will be different because they\n+    have different number of days.\n+\n+    Another option would be to have an index in units of years, but this would likely create other difficulties.\n+    \"\"\"\n+    i = get_clean_interp_index(cf_da(calendar), dim=\"time\")\n+    np.testing.assert_array_equal(i, np.arange(10) * 1e9 * 86400)\n+\n+\n+@requires_cftime\n+@pytest.mark.parametrize(\n+    (\"calendar\", \"freq\"), zip([\"gregorian\", \"proleptic_gregorian\"], [\"1D\", \"1M\", \"1Y\"])\n+)\n+def test_get_clean_interp_index_dt(cf_da, calendar, freq):\n+    \"\"\"In the gregorian case, the index should be proportional to normal datetimes.\"\"\"\n+    g = cf_da(calendar, freq=freq)\n+    g[\"stime\"] = xr.Variable(data=g.time.to_index().to_datetimeindex(), dims=(\"time\",))\n+\n+    gi = get_clean_interp_index(g, \"time\")\n+    si = get_clean_interp_index(g, \"time\", use_coordinate=\"stime\")\n+    np.testing.assert_array_equal(gi, si)\n+\n+\n+def test_get_clean_interp_index_potential_overflow():\n+    da = xr.DataArray(\n+        [0, 1, 2],\n+        dims=(\"time\",),\n+        coords={\"time\": xr.cftime_range(\"0000-01-01\", periods=3, calendar=\"360_day\")},\n+    )\n+    get_clean_interp_index(da, \"time\")\n+\n+\n @pytest.fixture\n def da_time():\n     return xr.DataArray(\n@@ -490,7 +542,7 @@ def test_interpolate_na_max_gap_errors(da_time):\n         da_time.interpolate_na(\"t\", max_gap=(1,))\n \n     da_time[\"t\"] = pd.date_range(\"2001-01-01\", freq=\"H\", periods=11)\n-    with raises_regex(TypeError, \"Underlying index is\"):\n+    with raises_regex(TypeError, \"Expected value of type str\"):\n         da_time.interpolate_na(\"t\", max_gap=1)\n \n     with raises_regex(TypeError, \"Expected integer or floating point\"):\n@@ -501,10 +553,7 @@ def test_interpolate_na_max_gap_errors(da_time):\n \n \n @requires_bottleneck\n-@pytest.mark.parametrize(\n-    \"time_range_func\",\n-    [pd.date_range, pytest.param(xr.cftime_range, marks=pytest.mark.xfail)],\n-)\n+@pytest.mark.parametrize(\"time_range_func\", [pd.date_range, xr.cftime_range])\n @pytest.mark.parametrize(\"transform\", [lambda x: x, lambda x: x.to_dataset(name=\"a\")])\n @pytest.mark.parametrize(\n     \"max_gap\", [\"3H\", np.timedelta64(3, \"h\"), pd.to_timedelta(\"3H\")]\n@@ -517,7 +566,7 @@ def test_interpolate_na_max_gap_time_specifier(\n         da_time.copy(data=[np.nan, 1, 2, 3, 4, 5, np.nan, np.nan, np.nan, np.nan, 10])\n     )\n     actual = transform(da_time).interpolate_na(\"t\", max_gap=max_gap)\n-    assert_equal(actual, expected)\n+    assert_allclose(actual, expected)\n \n \n @requires_bottleneck\n",
  "problem_statement": "interp with long cftime coordinates raises an error\n#### MCVE Code Sample\r\n<!-- In order for the maintainers to efficiently understand and prioritize issues, we ask you post a \"Minimal, Complete and Verifiable Example\" (MCVE): http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports -->\r\n\r\n```\r\nIn [1]: import xarray as xr\r\n\r\nIn [2]: times = xr.cftime_range('0001', periods=3, freq='500Y')\r\n\r\nIn [3]: da = xr.DataArray(range(3), dims=['time'], coords=[times])\r\n\r\nIn [4]: da.interp(time=['0002-05-01'])\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-4-f781cb4d500e> in <module>\r\n----> 1 da.interp(time=['0002-05-01'])\r\n\r\n~/Software/miniconda3/envs/xarray-tests/lib/python3.7/site-packages/xarray/core/dataarray.py in interp(self, coords, method, assume_sorted, kwargs, **coords_kwargs)\r\n   1353             kwargs=kwargs,\r\n   1354             assume_sorted=assume_sorted,\r\n-> 1355             **coords_kwargs,\r\n   1356         )\r\n   1357         return self._from_temp_dataset(ds)\r\n\r\n~/Software/miniconda3/envs/xarray-tests/lib/python3.7/site-packages/xarray/core/dataset.py in interp(self, coords, method, assume_sorted, kwargs, **coords_kwargs)\r\n   2565                     if k in var.dims\r\n   2566                 }\r\n-> 2567                 variables[name] = missing.interp(var, var_indexers, method, **kwargs)\r\n   2568             elif all(d not in indexers for d in var.dims):\r\n   2569                 # keep unrelated object array\r\n\r\n~/Software/miniconda3/envs/xarray-tests/lib/python3.7/site-packages/xarray/core/missing.py in interp(var, indexes_coords, method, **kwargs)\r\n    607     new_dims = broadcast_dims + list(destination[0].dims)\r\n    608     interped = interp_func(\r\n--> 609         var.transpose(*original_dims).data, x, destination, method, kwargs\r\n    610     )\r\n    611\r\n\r\n~/Software/miniconda3/envs/xarray-tests/lib/python3.7/site-packages/xarray/core/missing.py in interp_func(var, x, new_x, method, kwargs)\r\n    683         )\r\n    684\r\n--> 685     return _interpnd(var, x, new_x, func, kwargs)\r\n    686\r\n    687\r\n\r\n~/Software/miniconda3/envs/xarray-tests/lib/python3.7/site-packages/xarray/core/missing.py in _interpnd(var, x, new_x, func, kwargs)\r\n    698\r\n    699 def _interpnd(var, x, new_x, func, kwargs):\r\n--> 700     x, new_x = _floatize_x(x, new_x)\r\n    701\r\n    702     if len(x) == 1:\r\n\r\n~/Software/miniconda3/envs/xarray-tests/lib/python3.7/site-packages/xarray/core/missing.py in _floatize_x(x, new_x)\r\n    556             # represented by float.\r\n    557             xmin = x[i].values.min()\r\n--> 558             x[i] = x[i]._to_numeric(offset=xmin, dtype=np.float64)\r\n    559             new_x[i] = new_x[i]._to_numeric(offset=xmin, dtype=np.float64)\r\n    560     return x, new_x\r\n\r\n~/Software/miniconda3/envs/xarray-tests/lib/python3.7/site-packages/xarray/core/variable.py in _to_numeric(self, offset, datetime_unit, dtype)\r\n   2001         \"\"\"\r\n   2002         numeric_array = duck_array_ops.datetime_to_numeric(\r\n-> 2003             self.data, offset, datetime_unit, dtype\r\n   2004         )\r\n   2005         return type(self)(self.dims, numeric_array, self._attrs)\r\n\r\n~/Software/miniconda3/envs/xarray-tests/lib/python3.7/site-packages/xarray/core/duck_array_ops.py in datetime_to_numeric(array, offset, datetime_unit, dtype)\r\n    410     if array.dtype.kind in \"mM\":\r\n    411         return np.where(isnull(array), np.nan, array.astype(dtype))\r\n--> 412     return array.astype(dtype)\r\n    413\r\n    414\r\n\r\nTypeError: float() argument must be a string or a number, not 'datetime.timedelta'\r\n```\r\n\r\n#### Problem Description\r\n<!-- this should explain why the current behavior is a problem and why the expected output is a better solution -->\r\n\r\nIn principle we should be able to get this to work.  The issue stems from the following logic in `datetime_to_numeric`:\r\nhttps://github.com/pydata/xarray/blob/45fd0e63f43cf313b022a33aeec7f0f982e1908b/xarray/core/duck_array_ops.py#L402-L404\r\nHere we are relying on pandas to convert an array of `datetime.timedelta` objects to an array with dtype `timedelta64[ns]`.  If the array of `datetime.timedelta` objects cannot be safely converted to `timedelta64[ns]` (e.g. due to an integer overflow) then this line is silently a no-op which leads to the error downstream at the dtype conversion step.  This is my fault originally for suggesting this approach, https://github.com/pydata/xarray/pull/2668#discussion_r247271576. \r\n\r\n~~To solve this I think we'll need to write our own logic to convert `datetime.timedelta` objects to numeric values instead of relying on pandas/NumPy.~~ (as @huard notes we should be able to use NumPy directly here for the conversion).  We should not consider ourselves beholden to using nanosecond resolution for a couple of reasons:\r\n1. `datetime.timedelta` objects do not natively support nanosecond resolution; [they have microsecond resolution](https://docs.python.org/3/library/datetime.html#available-types) natively, which corresponds with a [NumPy timedelta range of +/- 2.9e5 years](https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html#datetime-units).\r\n2. One motivation/use-case for cftime dates is that they can represent long time periods that cannot be represented using a standard `DatetimeIndex`.  We should do everything we can to support this with a `CFTimeIndex`.\r\n\r\n@huard @dcherian this is an important issue we'll need to solve to be able to use a fixed offset for cftime dates for an application like `polyfit`/`polyval`.  \r\n\r\nxref: #3349 and #3631.\r\n\r\n#### Output of ``xr.show_versions()``\r\n<details>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.7.3 | packaged by conda-forge | (default, Jul  1 2019, 14:38:56)\r\n[Clang 4.0.1 (tags/RELEASE_401/final)]\r\npython-bits: 64\r\nOS: Darwin\r\nOS-release: 19.0.0\r\nmachine: x86_64\r\nprocessor: i386\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: en_US.UTF-8\r\nlibhdf5: 1.10.5\r\nlibnetcdf: None\r\n\r\nxarray: 0.14.1\r\npandas: 0.25.0\r\nnumpy: 1.17.0\r\nscipy: 1.3.1\r\nnetCDF4: None\r\npydap: installed\r\nh5netcdf: 0.7.4\r\nh5py: 2.9.0\r\nNio: None\r\nzarr: 2.3.2\r\ncftime: 1.0.4.2\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: 1.0.25\r\ncfgrib: 0.9.7.1\r\niris: None\r\nbottleneck: 1.2.1\r\ndask: 2.9.0+2.gd0daa5bc\r\ndistributed: 2.9.0\r\nmatplotlib: 3.1.1\r\ncartopy: None\r\nseaborn: 0.9.0\r\nnumbagg: installed\r\nsetuptools: 42.0.2.post20191201\r\npip: 19.2.2\r\nconda: None\r\npytest: 5.0.1\r\nIPython: 7.10.1\r\nsphinx: None\r\n\r\n</details>\r\n\n",
  "hints_text": "",
  "created_at": "2019-12-16T19:57:24Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_duck_array_ops.py::TestOps::test_first\", \"xarray/tests/test_duck_array_ops.py::TestOps::test_last\", \"xarray/tests/test_duck_array_ops.py::TestOps::test_count\", \"xarray/tests/test_duck_array_ops.py::TestOps::test_where_type_promotion\", \"xarray/tests/test_duck_array_ops.py::TestOps::test_stack_type_promotion\", \"xarray/tests/test_duck_array_ops.py::TestOps::test_concatenate_type_promotion\", \"xarray/tests/test_duck_array_ops.py::TestOps::test_all_nan_arrays\", \"xarray/tests/test_duck_array_ops.py::test_cumsum_1d\", \"xarray/tests/test_duck_array_ops.py::test_cumsum_2d\", \"xarray/tests/test_duck_array_ops.py::test_cumprod_2d\", \"xarray/tests/test_duck_array_ops.py::TestArrayNotNullEquiv::test_equal[arr10-arr20]\", \"xarray/tests/test_duck_array_ops.py::TestArrayNotNullEquiv::test_equal[arr11-arr21]\", \"xarray/tests/test_duck_array_ops.py::TestArrayNotNullEquiv::test_equal[arr12-arr22]\", \"xarray/tests/test_duck_array_ops.py::TestArrayNotNullEquiv::test_some_not_equal\", \"xarray/tests/test_duck_array_ops.py::TestArrayNotNullEquiv::test_wrong_shape\", \"xarray/tests/test_duck_array_ops.py::TestArrayNotNullEquiv::test_types[val10-val20-val30-null0]\", \"xarray/tests/test_duck_array_ops.py::TestArrayNotNullEquiv::test_types[1.0-2.0-3.0-nan]\", \"xarray/tests/test_duck_array_ops.py::TestArrayNotNullEquiv::test_types[foo-bar-baz-None]\", \"xarray/tests/test_duck_array_ops.py::TestArrayNotNullEquiv::test_types[foo-bar-baz-nan]\", \"xarray/tests/test_duck_array_ops.py::test_datetime_mean[False]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-False-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-False-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-True-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-True-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-False-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-True-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-True-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-False-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-False-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-False-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-False-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-False-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-False-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-False-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-False-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-False-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-False-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-False-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-False-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-False-True-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-False-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-False-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-False-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-False-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-False-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-False-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-False-True-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-False-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-False-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-False-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-False-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-False-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max_error\", \"xarray/tests/test_duck_array_ops.py::test_isnull[array0]\", \"xarray/tests/test_duck_array_ops.py::test_isnull[array1]\", \"xarray/tests/test_duck_array_ops.py::test_isnull[array2]\", \"xarray/tests/test_duck_array_ops.py::test_isnull[array3]\", \"xarray/tests/test_duck_array_ops.py::test_isnull[array4]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count_dataset[sum]\", \"xarray/tests/test_duck_array_ops.py::test_min_count_dataset[prod]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[sum-False-float]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[sum-False-int]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[sum-False-float32]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[sum-False-bool_]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[prod-False-float]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[prod-False-int]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[prod-False-float32]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[prod-False-bool_]\", \"xarray/tests/test_duck_array_ops.py::test_docs\", \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64\", \"xarray/tests/test_duck_array_ops.py::test_py_timedelta_to_float\", \"xarray/tests/test_duck_array_ops.py::test_np_timedelta64_to_float[td0-86400000000000.0]\", \"xarray/tests/test_duck_array_ops.py::test_np_timedelta64_to_float[td1-1.0]\", \"xarray/tests/test_duck_array_ops.py::test_pd_timedelta_to_float[td0-86400000000000.0]\", \"xarray/tests/test_duck_array_ops.py::test_pd_timedelta_to_float[td1-1.0]\", \"xarray/tests/test_duck_array_ops.py::test_timedelta_to_numeric[td0]\", \"xarray/tests/test_duck_array_ops.py::test_timedelta_to_numeric[td1]\", \"xarray/tests/test_duck_array_ops.py::test_timedelta_to_numeric[td2]\", \"xarray/tests/test_duck_array_ops.py::test_timedelta_to_numeric[1\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_duck_array_ops.py::test_datetime_mean[True]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-sum-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-min-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-max-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-mean-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-False-var-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-sum-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-min-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-max-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-mean-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[None-True-var-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-sum-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-min-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-mean-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-var-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-sum-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-min-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-mean-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-var-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-max-True-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-True-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-True-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-str-1]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-max-True-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-True-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-True-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-True-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-True-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-min-True-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-True-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-True-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-True-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-True-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-False-max-True-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-True-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-True-True-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-True-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-True-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-True-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-True-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-min-True-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-True-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-str-2]\", \"xarray/tests/test_duck_array_ops.py::test_isnull_with_dask\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[True-3-0]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[True-3--1]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[True-8-0]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[True-8--1]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[True-11-0]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[True-11--1]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[False-3-0]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[False-3--1]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[False-8-0]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[False-8--1]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[False-11-0]\", \"xarray/tests/test_duck_array_ops.py::test_dask_rolling[False-11--1]\", \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[1-0]\", \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[1--1]\", \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[1-1]\", \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\", \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2--1]\", \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-sum-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[None-prod-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-sum-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-True-float-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-True-float-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-True-int-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-True-int-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-True-float32-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-True-float32-2]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-True-bool_-1]\", \"xarray/tests/test_duck_array_ops.py::test_min_count[x-prod-True-bool_-2]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[sum-True-float]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[sum-True-int]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[sum-True-float32]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[sum-True-bool_]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[prod-True-float]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[prod-True-int]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[prod-True-float32]\", \"xarray/tests/test_duck_array_ops.py::test_multiple_dims[prod-True-bool_]\", \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_cftime\", \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_potential_overflow\", \"xarray/tests/test_interp.py::test_keywargs\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-x-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-x-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-y-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-y-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d_methods[cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d_methods[zero]\", \"xarray/tests/test_interp.py::test_interpolate_vectorize[False]\", \"xarray/tests/test_interp.py::test_interpolate_nd[3]\", \"xarray/tests/test_interp.py::test_interpolate_scalar[0-linear]\", \"xarray/tests/test_interp.py::test_interpolate_nd_scalar[3-linear]\", \"xarray/tests/test_interp.py::test_nans[True]\", \"xarray/tests/test_interp.py::test_nans[False]\", \"xarray/tests/test_interp.py::test_errors[True]\", \"xarray/tests/test_interp.py::test_errors[False]\", \"xarray/tests/test_interp.py::test_dtype\", \"xarray/tests/test_interp.py::test_sorted\", \"xarray/tests/test_interp.py::test_dimension_wo_coords\", \"xarray/tests/test_interp.py::test_dataset\", \"xarray/tests/test_interp.py::test_interpolate_dimorder[0]\", \"xarray/tests/test_interp.py::test_interpolate_dimorder[3]\", \"xarray/tests/test_interp.py::test_interp_like\", \"xarray/tests/test_interp.py::test_datetime[x_new0-expected0]\", \"xarray/tests/test_interp.py::test_datetime[x_new1-expected1]\", \"xarray/tests/test_interp.py::test_datetime[x_new2-expected2]\", \"xarray/tests/test_interp.py::test_datetime[x_new3-0.5]\", \"xarray/tests/test_interp.py::test_datetime_single_string\", \"xarray/tests/test_interp.py::test_datetime_to_non_datetime_error\", \"xarray/tests/test_interp.py::test_datetime_interp_noerror\", \"xarray/tests/test_missing.py::test_interpolate_pd_compat\", \"xarray/tests/test_missing.py::test_scipy_methods_function[barycentric]\", \"xarray/tests/test_missing.py::test_scipy_methods_function[krog]\", \"xarray/tests/test_missing.py::test_scipy_methods_function[pchip]\", \"xarray/tests/test_missing.py::test_scipy_methods_function[spline]\", \"xarray/tests/test_missing.py::test_scipy_methods_function[akima]\", \"xarray/tests/test_missing.py::test_interpolate_pd_compat_non_uniform_index\", \"xarray/tests/test_missing.py::test_interpolate_pd_compat_polynomial\", \"xarray/tests/test_missing.py::test_interpolate_unsorted_index_raises\", \"xarray/tests/test_missing.py::test_interpolate_no_dim_raises\", \"xarray/tests/test_missing.py::test_interpolate_invalid_interpolator_raises\", \"xarray/tests/test_missing.py::test_interpolate_duplicate_values_raises\", \"xarray/tests/test_missing.py::test_interpolate_multiindex_raises\", \"xarray/tests/test_missing.py::test_interpolate_2d_coord_raises\", \"xarray/tests/test_missing.py::test_interpolate_kwargs\", \"xarray/tests/test_missing.py::test_interpolate\", \"xarray/tests/test_missing.py::test_interpolate_nonans\", \"xarray/tests/test_missing.py::test_interpolate_allnans\", \"xarray/tests/test_missing.py::test_interpolate_limits\", \"xarray/tests/test_missing.py::test_interpolate_methods\", \"xarray/tests/test_missing.py::test_interpolators\", \"xarray/tests/test_missing.py::test_interpolate_use_coordinate\", \"xarray/tests/test_missing.py::test_interpolate_dask\", \"xarray/tests/test_missing.py::test_interpolate_dask_raises_for_invalid_chunk_dim\", \"xarray/tests/test_missing.py::test_ffill\", \"xarray/tests/test_missing.py::test_ffill_dask\", \"xarray/tests/test_missing.py::test_bfill_dask\", \"xarray/tests/test_missing.py::test_ffill_bfill_nonans\", \"xarray/tests/test_missing.py::test_ffill_bfill_allnans\", \"xarray/tests/test_missing.py::test_ffill_functions\", \"xarray/tests/test_missing.py::test_ffill_limit\", \"xarray/tests/test_missing.py::test_interpolate_dataset\", \"xarray/tests/test_missing.py::test_ffill_dataset\", \"xarray/tests/test_missing.py::test_bfill_dataset\", \"xarray/tests/test_missing.py::test_interpolate_na_nan_block_lengths[y0-lengths0]\", \"xarray/tests/test_missing.py::test_interpolate_na_nan_block_lengths[y1-lengths1]\", \"xarray/tests/test_missing.py::test_interpolate_na_nan_block_lengths[y2-lengths2]\", \"xarray/tests/test_missing.py::test_interpolate_na_max_gap_errors\", \"xarray/tests/test_missing.py::test_interpolate_na_max_gap_time_specifier[3H-<lambda>0-date_range]\", \"xarray/tests/test_missing.py::test_interpolate_na_max_gap_time_specifier[3H-<lambda>1-date_range]\", \"xarray/tests/test_missing.py::test_interpolate_na_max_gap_time_specifier[max_gap1-<lambda>0-date_range]\", \"xarray/tests/test_missing.py::test_interpolate_na_max_gap_time_specifier[max_gap1-<lambda>1-date_range]\", \"xarray/tests/test_missing.py::test_interpolate_na_max_gap_time_specifier[max_gap2-<lambda>0-date_range]\", \"xarray/tests/test_missing.py::test_interpolate_na_max_gap_time_specifier[max_gap2-<lambda>1-date_range]\", \"xarray/tests/test_missing.py::test_interpolate_na_2d[coords1]\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.871874",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}