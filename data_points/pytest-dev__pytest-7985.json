{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7985",
  "base_commit": "4cd0fde277f657560bf5c4453d3b645094d2c747",
  "patch": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -1177,6 +1177,11 @@ def _preparse(self, args: List[str], addopts: bool = True) -> None:\n         self._validate_plugins()\n         self._warn_about_skipped_plugins()\n \n+        if self.known_args_namespace.strict:\n+            self.issue_config_time_warning(\n+                _pytest.deprecated.STRICT_OPTION, stacklevel=2\n+            )\n+\n         if self.known_args_namespace.confcutdir is None and self.inipath is not None:\n             confcutdir = str(self.inipath.parent)\n             self.known_args_namespace.confcutdir = confcutdir\ndiff --git a/src/_pytest/deprecated.py b/src/_pytest/deprecated.py\n--- a/src/_pytest/deprecated.py\n+++ b/src/_pytest/deprecated.py\n@@ -51,3 +51,7 @@\n     \"The gethookproxy() and isinitpath() methods of FSCollector and Package are deprecated; \"\n     \"use self.session.gethookproxy() and self.session.isinitpath() instead. \"\n )\n+\n+STRICT_OPTION = PytestDeprecationWarning(\n+    \"The --strict option is deprecated, use --strict-markers instead.\"\n+)\ndiff --git a/src/_pytest/main.py b/src/_pytest/main.py\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -101,10 +101,12 @@ def pytest_addoption(parser: Parser) -> None:\n     )\n     group._addoption(\n         \"--strict-markers\",\n-        \"--strict\",\n         action=\"store_true\",\n         help=\"markers not registered in the `markers` section of the configuration file raise errors.\",\n     )\n+    group._addoption(\n+        \"--strict\", action=\"store_true\", help=\"(deprecated) alias to --strict-markers.\",\n+    )\n     group._addoption(\n         \"-c\",\n         metavar=\"file\",\ndiff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -496,7 +496,7 @@ def __getattr__(self, name: str) -> MarkDecorator:\n             # If the name is not in the set of known marks after updating,\n             # then it really is time to issue a warning or an error.\n             if name not in self._markers:\n-                if self._config.option.strict_markers:\n+                if self._config.option.strict_markers or self._config.option.strict:\n                     fail(\n                         f\"{name!r} not found in `markers` configuration option\",\n                         pytrace=False,\n",
  "test_patch": "diff --git a/testing/deprecated_test.py b/testing/deprecated_test.py\n--- a/testing/deprecated_test.py\n+++ b/testing/deprecated_test.py\n@@ -4,6 +4,7 @@\n \n import pytest\n from _pytest import deprecated\n+from _pytest.pytester import Pytester\n from _pytest.pytester import Testdir\n \n \n@@ -95,3 +96,22 @@ def test_foo(): pass\n         session.gethookproxy(testdir.tmpdir)\n         session.isinitpath(testdir.tmpdir)\n     assert len(rec) == 0\n+\n+\n+def test_strict_option_is_deprecated(pytester: Pytester) -> None:\n+    \"\"\"--strict is a deprecated alias to --strict-markers (#7530).\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.unknown\n+        def test_foo(): pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(\"--strict\")\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"'unknown' not found in `markers` configuration option\",\n+            \"*PytestDeprecationWarning: The --strict option is deprecated, use --strict-markers instead.\",\n+        ]\n+    )\n",
  "problem_statement": "Deprecate `--strict` \nI don't see the point in removing it in a release just to reintroduce it again, that just makes things more confusing for everyone.\r\n\r\n\r\n_Originally posted by @The-Compiler in https://github.com/pytest-dev/pytest/issues/7503#issuecomment-662524793_\n",
  "hints_text": "@nicoddemus why don't I do this in `6.1`?\n6.1 is the version where we effectively remove the deprecated features. I would rather not introduce another possible breakage point in 6.1, hence delay this until 6.2.\nOk that makes sense",
  "created_at": "2020-10-31T13:21:10Z",
  "version": "6.2",
  "FAIL_TO_PASS": "[\"testing/deprecated_test.py::test_strict_option_is_deprecated\"]",
  "PASS_TO_PASS": "[\"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Collector]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Module]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Function]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Instance]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Session]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Item]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[Class]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[File]\", \"testing/deprecated_test.py::test_pytest_collect_module_deprecated[_fillfuncargs]\", \"testing/deprecated_test.py::test_fillfuncargs_is_deprecated\", \"testing/deprecated_test.py::test_fillfixtures_is_deprecated\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_capturelog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_catchlog]\", \"testing/deprecated_test.py::test_external_plugins_integrated[pytest_faulthandler]\", \"testing/deprecated_test.py::test_minus_k_dash_is_deprecated\", \"testing/deprecated_test.py::test_minus_k_colon_is_deprecated\", \"testing/deprecated_test.py::test_fscollector_gethookproxy_isinitpath\"]",
  "environment_setup_commit": "902739cfc3bbc3379e6ef99c8e250de35f52ecde",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.940354",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}