{
  "repo": "django/django",
  "instance_id": "django__django-16454",
  "base_commit": "1250483ebf73f7a82ff820b94092c63ce4238264",
  "patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -6,6 +6,7 @@\n import os\n import sys\n from argparse import ArgumentParser, HelpFormatter\n+from functools import partial\n from io import TextIOBase\n \n import django\n@@ -71,6 +72,15 @@ def error(self, message):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        parser_class = kwargs.get(\"parser_class\", type(self))\n+        if issubclass(parser_class, CommandParser):\n+            kwargs[\"parser_class\"] = partial(\n+                parser_class,\n+                called_from_command_line=self.called_from_command_line,\n+            )\n+        return super().add_subparsers(**kwargs)\n+\n \n def handle_default_options(options):\n     \"\"\"\n",
  "test_patch": "diff --git a/tests/user_commands/management/commands/subparser_vanilla.py b/tests/user_commands/management/commands/subparser_vanilla.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/user_commands/management/commands/subparser_vanilla.py\n@@ -0,0 +1,13 @@\n+import argparse\n+\n+from django.core.management.base import BaseCommand\n+\n+\n+class Command(BaseCommand):\n+    def add_arguments(self, parser):\n+        subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+        parser_foo = subparsers.add_parser(\"foo\")\n+        parser_foo.add_argument(\"bar\", type=int)\n+\n+    def handle(self, *args, **options):\n+        pass\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,6 +468,30 @@ def test_skip_checks(self):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+    def test_subparser_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"twelve\"])\n+        self.maxDiff = None\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\",\n+        )\n+\n+    def test_subparser_non_django_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser_vanilla\", \"foo\", \"seven\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser_vanilla foo: error: argument bar: invalid int value: \"\n+            \"'seven'\",\n+        )\n+\n \n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n",
  "problem_statement": "Management command subparsers don’t retain error formatting\nDescription\n\t\nDjango management commands use a subclass of argparse.ArgumentParser, CommandParser, that takes some extra arguments to improve error formatting. These arguments are not copied into subparsers, created via CommandParser.add_subparsers().add_parser(). Missing arguments to subparsers thus end as stack traces on the CLI, rather than human-facing usage messages.\nFor example take this command with a subparser:\nfrom django.core.management.base import BaseCommand\nclass Command(BaseCommand):\n\tdef add_arguments(self, parser):\n\t\tsubparsers = parser.add_subparsers(required=True)\n\t\tcreate = subparsers.add_parser(\"create\")\n\t\tcreate.add_argument(\"name\")\n\tdef handle(self, *args, **options):\n\t\tpass\nMissing the required subparser name argument gives the usage message, as for any normal argument:\n$ ./manage.py cheeses\nusage: manage.py cheeses [-h] [--version] [-v {0,1,2,3}] [--settings SETTINGS] [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color] [--skip-checks] {create} ...\nmanage.py cheeses: error: the following arguments are required: {create}\nBut missing the name argument to create fails with a stacktrace:\n$ ./manage.py cheeses create\nTraceback (most recent call last):\n File \"/Users/chainz/tmp/subparserstest/./manage.py\", line 21, in <module>\n\tmain()\n...\n File \"/Users/chainz/.pyenv/versions/3.11.0/lib/python3.11/argparse.py\", line 2131, in _parse_known_args\n\tself.error(_('the following arguments are required: %s') %\n File \"/Users/chainz/Documents/Projects/django/django/core/management/base.py\", line 72, in error\n\traise CommandError(\"Error: %s\" % message)\ndjango.core.management.base.CommandError: Error: the following arguments are required: name\nWe can correct this by ensuring that the subparser action returned by add_subparsers() copies the relevant arguments through to constructed subparsers.\n(Originally reported by Mark Gregson on django-developers: ​https://groups.google.com/g/django-developers/c/oWcaxkxQ-KI/m/4NUhLjddBwAJ )\n",
  "hints_text": "",
  "created_at": "2023-01-15T09:23:24Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_subparser_error_formatting (user_commands.tests.CommandRunTests.test_subparser_error_formatting)\"]",
  "PASS_TO_PASS": "[\"test_get_random_secret_key (user_commands.tests.UtilsTests.test_get_random_secret_key)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests.test_is_ignored_path_false)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests.test_is_ignored_path_true)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests.test_no_existent_external_program)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests.test_normalize_path_patterns_truncates_wildcard_base)\", \"By default, call_command should not trigger the check framework, unless\", \"When passing the long option name to call_command, the available option\", \"It should be possible to pass non-string arguments to call_command.\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests.test_call_command_unrecognized_option)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests.test_call_command_with_required_parameters_in_mixed_options)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests.test_call_command_with_required_parameters_in_options)\", \"test_calling_a_command_with_no_app_labels_and_parameters_raise_command_error (user_commands.tests.CommandTests.test_calling_a_command_with_no_app_labels_and_parameters_raise_command_error)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests.test_calling_a_command_with_only_empty_parameter_should_ends_gracefully)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests.test_calling_command_with_app_labels_and_parameters_should_be_ok)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests.test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok)\", \"test_check_migrations (user_commands.tests.CommandTests.test_check_migrations)\", \"test_command (user_commands.tests.CommandTests.test_command)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests.test_command_add_arguments_after_common_arguments)\", \"test_command_style (user_commands.tests.CommandTests.test_command_style)\", \"BaseCommand.create_parser() passes kwargs to CommandParser.\", \"Management commands can also be loaded from Python eggs.\", \"An unknown command raises CommandError\", \"find_command should still work when the PATH environment variable\", \"test_language_preserved (user_commands.tests.CommandTests.test_language_preserved)\", \"test_mutually_exclusive_group_required_const_options (user_commands.tests.CommandTests.test_mutually_exclusive_group_required_const_options)\", \"test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests.test_mutually_exclusive_group_required_options)\", \"test_mutually_exclusive_group_required_with_same_dest_args (user_commands.tests.CommandTests.test_mutually_exclusive_group_required_with_same_dest_args)\", \"test_mutually_exclusive_group_required_with_same_dest_options (user_commands.tests.CommandTests.test_mutually_exclusive_group_required_with_same_dest_options)\", \"When the Command handle method is decorated with @no_translations,\", \"test_output_transaction (user_commands.tests.CommandTests.test_output_transaction)\", \"test_outputwrapper_flush (user_commands.tests.CommandTests.test_outputwrapper_flush)\", \"test_required_const_options (user_commands.tests.CommandTests.test_required_const_options)\", \"test_required_list_option (user_commands.tests.CommandTests.test_required_list_option)\", \"test_requires_system_checks_empty (user_commands.tests.CommandTests.test_requires_system_checks_empty)\", \"test_requires_system_checks_invalid (user_commands.tests.CommandTests.test_requires_system_checks_invalid)\", \"test_requires_system_checks_specific (user_commands.tests.CommandTests.test_requires_system_checks_specific)\", \"test_subparser (user_commands.tests.CommandTests.test_subparser)\", \"test_subparser_dest_args (user_commands.tests.CommandTests.test_subparser_dest_args)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests.test_subparser_dest_required_args)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests.test_subparser_invalid_option)\", \"Exception raised in a command should raise CommandError with\", \"To avoid conflicts with custom options, commands don't allow\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests.test_script_prefix_set_in_commands)\", \"test_skip_checks (user_commands.tests.CommandRunTests.test_skip_checks)\", \"test_subparser_non_django_error_formatting (user_commands.tests.CommandRunTests.test_subparser_non_django_error_formatting)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.758229",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}