{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25515",
  "base_commit": "3218d1f9d3242d29e7d789fd4d27bffcc7da64a4",
  "patch": "diff --git a/doc/conf.py b/doc/conf.py\n--- a/doc/conf.py\n+++ b/doc/conf.py\n@@ -105,6 +105,7 @@ def _parse_skip_subdirs_file():\n     'sphinx_gallery.gen_gallery',\n     'matplotlib.sphinxext.mathmpl',\n     'matplotlib.sphinxext.plot_directive',\n+    'matplotlib.sphinxext.figmpl_directive',\n     'sphinxcontrib.inkscapeconverter',\n     'sphinxext.custom_roles',\n     'sphinxext.github',\n@@ -379,7 +380,8 @@ def gallery_image_warning_filter(record):\n formats = {'html': ('png', 100), 'latex': ('pdf', 100)}\n plot_formats = [formats[target] for target in ['html', 'latex']\n                 if target in sys.argv] or list(formats.values())\n-\n+# make 2x images for srcset argument to <img>\n+plot_srcset = ['2x']\n \n # GitHub extension\n \ndiff --git a/lib/matplotlib/sphinxext/figmpl_directive.py b/lib/matplotlib/sphinxext/figmpl_directive.py\nnew file mode 100644\n--- /dev/null\n+++ b/lib/matplotlib/sphinxext/figmpl_directive.py\n@@ -0,0 +1,288 @@\n+\"\"\"\n+Add a ``figure-mpl`` directive that is a responsive version of ``figure``.\n+\n+This implementation is very similar to ``.. figure::``, except it also allows a\n+``srcset=`` argument to be passed to the image tag, hence allowing responsive\n+resolution images.\n+\n+There is no particular reason this could not be used standalone, but is meant\n+to be used with :doc:`/api/sphinxext_plot_directive_api`.\n+\n+Note that the directory organization is a bit different than ``.. figure::``.\n+See the *FigureMpl* documentation below.\n+\n+\"\"\"\n+from docutils import nodes\n+\n+from docutils.parsers.rst import directives\n+from docutils.parsers.rst.directives.images import Figure, Image\n+\n+import os\n+from os.path import relpath\n+from pathlib import PurePath, Path\n+import shutil\n+\n+from sphinx.errors import ExtensionError\n+\n+import matplotlib\n+\n+\n+class figmplnode(nodes.General, nodes.Element):\n+    pass\n+\n+\n+class FigureMpl(Figure):\n+    \"\"\"\n+    Implements a directive to allow an optional hidpi image.\n+\n+    Meant to be used with the *plot_srcset* configuration option in conf.py,\n+    and gets set in the TEMPLATE of plot_directive.py\n+\n+    e.g.::\n+\n+        .. figure-mpl:: plot_directive/some_plots-1.png\n+            :alt: bar\n+            :srcset: plot_directive/some_plots-1.png,\n+                     plot_directive/some_plots-1.2x.png 2.00x\n+            :class: plot-directive\n+\n+    The resulting html (at ``some_plots.html``) is::\n+\n+        <img src=\"sphx_glr_bar_001_hidpi.png\"\n+            srcset=\"_images/some_plot-1.png,\n+                    _images/some_plots-1.2x.png 2.00x\",\n+            alt=\"bar\"\n+            class=\"plot_directive\" />\n+\n+    Note that the handling of subdirectories is different than that used by the sphinx\n+    figure directive::\n+\n+        .. figure-mpl:: plot_directive/nestedpage/index-1.png\n+            :alt: bar\n+            :srcset: plot_directive/nestedpage/index-1.png\n+                     plot_directive/nestedpage/index-1.2x.png 2.00x\n+            :class: plot_directive\n+\n+    The resulting html (at ``nestedpage/index.html``)::\n+\n+        <img src=\"../_images/nestedpage-index-1.png\"\n+            srcset=\"../_images/nestedpage-index-1.png,\n+                    ../_images/_images/nestedpage-index-1.2x.png 2.00x\",\n+            alt=\"bar\"\n+            class=\"sphx-glr-single-img\" />\n+\n+    where the subdirectory is included in the image name for uniqueness.\n+    \"\"\"\n+\n+    has_content = False\n+    required_arguments = 1\n+    optional_arguments = 2\n+    final_argument_whitespace = False\n+    option_spec = {\n+        'alt': directives.unchanged,\n+        'height': directives.length_or_unitless,\n+        'width': directives.length_or_percentage_or_unitless,\n+        'scale': directives.nonnegative_int,\n+        'align': Image.align,\n+        'class': directives.class_option,\n+        'caption': directives.unchanged,\n+        'srcset': directives.unchanged,\n+    }\n+\n+    def run(self):\n+\n+        image_node = figmplnode()\n+\n+        imagenm = self.arguments[0]\n+        image_node['alt'] = self.options.get('alt', '')\n+        image_node['align'] = self.options.get('align', None)\n+        image_node['class'] = self.options.get('class', None)\n+        image_node['width'] = self.options.get('width', None)\n+        image_node['height'] = self.options.get('height', None)\n+        image_node['scale'] = self.options.get('scale', None)\n+        image_node['caption'] = self.options.get('caption', None)\n+\n+        # we would like uri to be the highest dpi version so that\n+        # latex etc will use that.  But for now, lets just make\n+        # imagenm... maybe pdf one day?\n+\n+        image_node['uri'] = imagenm\n+        image_node['srcset'] = self.options.get('srcset', None)\n+\n+        return [image_node]\n+\n+\n+def _parse_srcsetNodes(st):\n+    \"\"\"\n+    parse srcset...\n+    \"\"\"\n+    entries = st.split(',')\n+    srcset = {}\n+    for entry in entries:\n+        spl = entry.strip().split(' ')\n+        if len(spl) == 1:\n+            srcset[0] = spl[0]\n+        elif len(spl) == 2:\n+            mult = spl[1][:-1]\n+            srcset[float(mult)] = spl[0]\n+        else:\n+            raise ExtensionError(f'srcset argument \"{entry}\" is invalid.')\n+    return srcset\n+\n+\n+def _copy_images_figmpl(self, node):\n+\n+    # these will be the temporary place the plot-directive put the images eg:\n+    # ../../../build/html/plot_directive/users/explain/artists/index-1.png\n+    if node['srcset']:\n+        srcset = _parse_srcsetNodes(node['srcset'])\n+    else:\n+        srcset = None\n+\n+    # the rst file's location:  eg /Users/username/matplotlib/doc/users/explain/artists\n+    docsource = PurePath(self.document['source']).parent\n+\n+    # get the relpath relative to root:\n+    srctop = self.builder.srcdir\n+    rel = relpath(docsource, srctop).replace('.', '').replace(os.sep, '-')\n+    if len(rel):\n+        rel += '-'\n+    # eg: users/explain/artists\n+\n+    imagedir = PurePath(self.builder.outdir, self.builder.imagedir)\n+    # eg: /Users/username/matplotlib/doc/build/html/_images/users/explain/artists\n+\n+    Path(imagedir).mkdir(parents=True, exist_ok=True)\n+\n+    # copy all the sources to the imagedir:\n+    if srcset:\n+        for src in srcset.values():\n+            # the entries in srcset are relative to docsource's directory\n+            abspath = PurePath(docsource, src)\n+            name = rel + abspath.name\n+            shutil.copyfile(abspath, imagedir / name)\n+    else:\n+        abspath = PurePath(docsource, node['uri'])\n+        name = rel + abspath.name\n+        shutil.copyfile(abspath, imagedir / name)\n+\n+    return imagedir, srcset, rel\n+\n+\n+def visit_figmpl_html(self, node):\n+\n+    imagedir, srcset, rel = _copy_images_figmpl(self, node)\n+\n+    # /doc/examples/subd/plot_1.rst\n+    docsource = PurePath(self.document['source'])\n+    # /doc/\n+    # make sure to add the trailing slash:\n+    srctop = PurePath(self.builder.srcdir, '')\n+    # examples/subd/plot_1.rst\n+    relsource = relpath(docsource, srctop)\n+    # /doc/build/html\n+    desttop = PurePath(self.builder.outdir, '')\n+    # /doc/build/html/examples/subd\n+    dest = desttop / relsource\n+\n+    # ../../_images/ for dirhtml and ../_images/ for html\n+    imagerel = PurePath(relpath(imagedir, dest.parent)).as_posix()\n+    if self.builder.name == \"dirhtml\":\n+        imagerel = f'..{imagerel}'\n+\n+    # make uri also be relative...\n+    nm = PurePath(node['uri'][1:]).name\n+    uri = f'{imagerel}/{rel}{nm}'\n+\n+    # make srcset str.  Need to change all the prefixes!\n+    maxsrc = uri\n+    srcsetst = ''\n+    if srcset:\n+        maxmult = -1\n+        for mult, src in srcset.items():\n+            nm = PurePath(src[1:]).name\n+            # ../../_images/plot_1_2_0x.png\n+            path = f'{imagerel}/{rel}{nm}'\n+            srcsetst += path\n+            if mult == 0:\n+                srcsetst += ', '\n+            else:\n+                srcsetst += f' {mult:1.2f}x, '\n+\n+            if mult > maxmult:\n+                maxmult = mult\n+                maxsrc = path\n+\n+        # trim trailing comma and space...\n+        srcsetst = srcsetst[:-2]\n+\n+    alt = node['alt']\n+    if node['class'] is not None:\n+        classst = ' '.join(node['class'])\n+        classst = f'class=\"{classst}\"'\n+\n+    else:\n+        classst = ''\n+\n+    stylers = ['width', 'height', 'scale']\n+    stylest = ''\n+    for style in stylers:\n+        if node[style]:\n+            stylest += f'{style}: {node[style]};'\n+\n+    figalign = node['align'] if node['align'] else 'center'\n+\n+# <figure class=\"align-default\" id=\"id1\">\n+# <a class=\"reference internal image-reference\" href=\"_images/index-1.2x.png\">\n+# <img alt=\"_images/index-1.2x.png\" src=\"_images/index-1.2x.png\" style=\"width: 53%;\" />\n+# </a>\n+# <figcaption>\n+# <p><span class=\"caption-text\">Figure caption is here....</span>\n+# <a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">#</a></p>\n+# </figcaption>\n+# </figure>\n+    img_block = (f'<img src=\"{uri}\" style=\"{stylest}\" srcset=\"{srcsetst}\" '\n+                 f'alt=\"{alt}\" {classst}/>')\n+    html_block = f'<figure class=\"align-{figalign}\">\\n'\n+    html_block += f'  <a class=\"reference internal image-reference\" href=\"{maxsrc}\">\\n'\n+    html_block += f'    {img_block}\\n  </a>\\n'\n+    if node['caption']:\n+        html_block += '  <figcaption>\\n'\n+        html_block += f'   <p><span class=\"caption-text\">{node[\"caption\"]}</span></p>\\n'\n+        html_block += '  </figcaption>\\n'\n+    html_block += '</figure>\\n'\n+    self.body.append(html_block)\n+\n+\n+def visit_figmpl_latex(self, node):\n+\n+    if node['srcset'] is not None:\n+        imagedir, srcset = _copy_images_figmpl(self, node)\n+        maxmult = -1\n+        # choose the highest res version for latex:\n+        maxmult = max(srcset, default=-1)\n+        node['uri'] = PurePath(srcset[maxmult]).name\n+\n+    self.visit_figure(node)\n+\n+\n+def depart_figmpl_html(self, node):\n+    pass\n+\n+\n+def depart_figmpl_latex(self, node):\n+    self.depart_figure(node)\n+\n+\n+def figurempl_addnode(app):\n+    app.add_node(figmplnode,\n+                 html=(visit_figmpl_html, depart_figmpl_html),\n+                 latex=(visit_figmpl_latex, depart_figmpl_latex))\n+\n+\n+def setup(app):\n+    app.add_directive(\"figure-mpl\", FigureMpl)\n+    figurempl_addnode(app)\n+    metadata = {'parallel_read_safe': True, 'parallel_write_safe': True,\n+                'version': matplotlib.__version__}\n+    return metadata\ndiff --git a/lib/matplotlib/sphinxext/plot_directive.py b/lib/matplotlib/sphinxext/plot_directive.py\n--- a/lib/matplotlib/sphinxext/plot_directive.py\n+++ b/lib/matplotlib/sphinxext/plot_directive.py\n@@ -139,6 +139,30 @@\n \n     plot_template\n         Provide a customized template for preparing restructured text.\n+\n+    plot_srcset\n+        Allow the srcset image option for responsive image resolutions. List of\n+        strings with the multiplicative factors followed by an \"x\".\n+        e.g. [\"2.0x\", \"1.5x\"].  \"2.0x\" will create a png with the default \"png\"\n+        resolution from plot_formats, multiplied by 2. If plot_srcset is\n+        specified, the plot directive uses the\n+        :doc:`/api/sphinxext_figmpl_directive_api` (instead of the usual figure\n+        directive) in the intermediary rst file that is generated.\n+        The plot_srcset option is incompatible with *singlehtml* builds, and an\n+        error will be raised.\n+\n+Notes on how it works\n+---------------------\n+\n+The plot directive runs the code it is given, either in the source file or the\n+code under the directive. The figure created (if any) is saved in the sphinx\n+build directory under a subdirectory named ``plot_directive``.  It then creates\n+an intermediate rst file that calls a ``.. figure:`` directive (or\n+``.. figmpl::`` directive if ``plot_srcset`` is being used) and has links to\n+the ``*.png`` files in the ``plot_directive`` directory.  These translations can\n+be customized by changing the *plot_template*.  See the source of\n+:doc:`/api/sphinxext_plot_directive_api` for the templates defined in *TEMPLATE*\n+and *TEMPLATE_SRCSET*.\n \"\"\"\n \n import contextlib\n@@ -158,6 +182,8 @@\n from docutils.parsers.rst.directives.images import Image\n import jinja2  # Sphinx dependency.\n \n+from sphinx.errors import ExtensionError\n+\n import matplotlib\n from matplotlib.backend_bases import FigureManagerBase\n import matplotlib.pyplot as plt\n@@ -280,6 +306,7 @@ def setup(app):\n     app.add_config_value('plot_apply_rcparams', False, True)\n     app.add_config_value('plot_working_directory', None, True)\n     app.add_config_value('plot_template', None, True)\n+    app.add_config_value('plot_srcset', [], True)\n     app.connect('doctree-read', mark_plot_labels)\n     app.add_css_file('plot_directive.css')\n     app.connect('build-finished', _copy_css_file)\n@@ -331,7 +358,7 @@ def _split_code_at_show(text, function_name):\n # Template\n # -----------------------------------------------------------------------------\n \n-TEMPLATE = \"\"\"\n+_SOURCECODE = \"\"\"\n {{ source_code }}\n \n .. only:: html\n@@ -351,6 +378,50 @@ def _split_code_at_show(text, function_name):\n    {%- endif -%}\n    )\n    {% endif %}\n+\"\"\"\n+\n+TEMPLATE_SRCSET = _SOURCECODE + \"\"\"\n+   {% for img in images %}\n+   .. figure-mpl:: {{ build_dir }}/{{ img.basename }}.{{ default_fmt }}\n+      {% for option in options -%}\n+      {{ option }}\n+      {% endfor %}\n+      {%- if caption -%}\n+      {{ caption }}  {# appropriate leading whitespace added beforehand #}\n+      {% endif -%}\n+      {%- if srcset -%}\n+        :srcset: {{ build_dir }}/{{ img.basename }}.{{ default_fmt }}\n+        {%- for sr in srcset -%}\n+            , {{ build_dir }}/{{ img.basename }}.{{ sr }}.{{ default_fmt }} {{sr}}\n+        {%- endfor -%}\n+      {% endif %}\n+\n+   {% if html_show_formats and multi_image %}\n+   (\n+    {%- for fmt in img.formats -%}\n+    {%- if not loop.first -%}, {% endif -%}\n+    :download:`{{ fmt }} <{{ build_dir }}/{{ img.basename }}.{{ fmt }}>`\n+    {%- endfor -%}\n+   )\n+   {% endif %}\n+\n+\n+   {% endfor %}\n+\n+.. only:: not html\n+\n+   {% for img in images %}\n+   .. figure-mpl:: {{ build_dir }}/{{ img.basename }}.*\n+      {% for option in options -%}\n+      {{ option }}\n+      {% endfor -%}\n+\n+      {{ caption }}  {# appropriate leading whitespace added beforehand #}\n+   {% endfor %}\n+\n+\"\"\"\n+\n+TEMPLATE = _SOURCECODE + \"\"\"\n \n    {% for img in images %}\n    .. figure:: {{ build_dir }}/{{ img.basename }}.{{ default_fmt }}\n@@ -514,6 +585,21 @@ def get_plot_formats(config):\n     return formats\n \n \n+def _parse_srcset(entries):\n+    \"\"\"\n+    Parse srcset for multiples...\n+    \"\"\"\n+    srcset = {}\n+    for entry in entries:\n+        entry = entry.strip()\n+        if len(entry) >= 2:\n+            mult = entry[:-1]\n+            srcset[float(mult)] = entry\n+        else:\n+            raise ExtensionError(f'srcset argument {entry!r} is invalid.')\n+    return srcset\n+\n+\n def render_figures(code, code_path, output_dir, output_base, context,\n                    function_name, config, context_reset=False,\n                    close_figs=False,\n@@ -524,6 +610,7 @@ def render_figures(code, code_path, output_dir, output_base, context,\n     Save the images under *output_dir* with file names derived from\n     *output_base*\n     \"\"\"\n+\n     if function_name is not None:\n         output_base = f'{output_base}_{function_name}'\n     formats = get_plot_formats(config)\n@@ -531,7 +618,6 @@ def render_figures(code, code_path, output_dir, output_base, context,\n     # Try to determine if all images already exist\n \n     is_doctest, code_pieces = _split_code_at_show(code, function_name)\n-\n     # Look for single-figure output files first\n     img = ImageFile(output_base, output_dir)\n     for format, dpi in formats:\n@@ -610,9 +696,18 @@ def render_figures(code, code_path, output_dir, output_base, context,\n                 img = ImageFile(\"%s_%02d_%02d\" % (output_base, i, j),\n                                 output_dir)\n             images.append(img)\n+\n             for fmt, dpi in formats:\n                 try:\n                     figman.canvas.figure.savefig(img.filename(fmt), dpi=dpi)\n+                    if fmt == formats[0][0] and config.plot_srcset:\n+                        # save a 2x, 3x etc version of the default...\n+                        srcset = _parse_srcset(config.plot_srcset)\n+                        for mult, suffix in srcset.items():\n+                            fm = f'{suffix}.{fmt}'\n+                            img.formats.append(fm)\n+                            figman.canvas.figure.savefig(img.filename(fm),\n+                                                         dpi=int(dpi * mult))\n                 except Exception as err:\n                     raise PlotError(traceback.format_exc()) from err\n                 img.formats.append(fmt)\n@@ -630,11 +725,16 @@ def run(arguments, content, options, state_machine, state, lineno):\n     config = document.settings.env.config\n     nofigs = 'nofigs' in options\n \n+    if config.plot_srcset and setup.app.builder.name == 'singlehtml':\n+        raise ExtensionError(\n+            'plot_srcset option not compatible with single HTML writer')\n+\n     formats = get_plot_formats(config)\n     default_fmt = formats[0][0]\n \n     options.setdefault('include-source', config.plot_include_source)\n     options.setdefault('show-source-link', config.plot_html_show_source_link)\n+\n     if 'class' in options:\n         # classes are parsed into a list of string, and output by simply\n         # printing the list, abusing the fact that RST guarantees to strip\n@@ -655,7 +755,6 @@ def run(arguments, content, options, state_machine, state, lineno):\n         else:\n             source_file_name = os.path.join(setup.confdir, config.plot_basedir,\n                                             directives.uri(arguments[0]))\n-\n         # If there is content, it will be passed as a caption.\n         caption = '\\n'.join(content)\n \n@@ -776,9 +875,11 @@ def run(arguments, content, options, state_machine, state, lineno):\n         errors = [sm]\n \n     # Properly indent the caption\n-    caption = '\\n' + '\\n'.join('      ' + line.strip()\n-                               for line in caption.split('\\n'))\n-\n+    if caption and config.plot_srcset:\n+        caption = f':caption: {caption}'\n+    elif caption:\n+        caption = '\\n' + '\\n'.join('      ' + line.strip()\n+                                   for line in caption.split('\\n'))\n     # generate output restructuredtext\n     total_lines = []\n     for j, (code_piece, images) in enumerate(results):\n@@ -805,18 +906,24 @@ def run(arguments, content, options, state_machine, state, lineno):\n             src_name = output_base + source_ext\n         else:\n             src_name = None\n+        if config.plot_srcset:\n+            srcset = [*_parse_srcset(config.plot_srcset).values()]\n+            template = TEMPLATE_SRCSET\n+        else:\n+            srcset = None\n+            template = TEMPLATE\n \n-        result = jinja2.Template(config.plot_template or TEMPLATE).render(\n+        result = jinja2.Template(config.plot_template or template).render(\n             default_fmt=default_fmt,\n             build_dir=build_dir_link,\n             src_name=src_name,\n             multi_image=len(images) > 1,\n             options=opts,\n+            srcset=srcset,\n             images=images,\n             source_code=source_code,\n             html_show_formats=config.plot_html_show_formats and len(images),\n             caption=caption)\n-\n         total_lines.extend(result.split(\"\\n\"))\n         total_lines.extend(\"\\n\")\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_sphinxext.py b/lib/matplotlib/tests/test_sphinxext.py\n--- a/lib/matplotlib/tests/test_sphinxext.py\n+++ b/lib/matplotlib/tests/test_sphinxext.py\n@@ -182,3 +182,44 @@ def test_show_source_link_false(tmp_path, plot_html_show_source_link):\n     build_sphinx_html(tmp_path, doctree_dir, html_dir, extra_args=[\n         '-D', f'plot_html_show_source_link={plot_html_show_source_link}'])\n     assert len(list(html_dir.glob(\"**/index-1.py\"))) == 0\n+\n+\n+def test_srcset_version(tmp_path):\n+    shutil.copytree(Path(__file__).parent / 'tinypages', tmp_path,\n+                    dirs_exist_ok=True)\n+    html_dir = tmp_path / '_build' / 'html'\n+    img_dir = html_dir / '_images'\n+    doctree_dir = tmp_path / 'doctrees'\n+\n+    build_sphinx_html(tmp_path, doctree_dir, html_dir, extra_args=[\n+        '-D', 'plot_srcset=2x'])\n+\n+    def plot_file(num, suff=''):\n+        return img_dir / f'some_plots-{num}{suff}.png'\n+\n+    # check some-plots\n+    for ind in [1, 2, 3, 5, 7, 11, 13, 15, 17]:\n+        assert plot_file(ind).exists()\n+        assert plot_file(ind, suff='.2x').exists()\n+\n+    assert (img_dir / 'nestedpage-index-1.png').exists()\n+    assert (img_dir / 'nestedpage-index-1.2x.png').exists()\n+    assert (img_dir / 'nestedpage-index-2.png').exists()\n+    assert (img_dir / 'nestedpage-index-2.2x.png').exists()\n+    assert (img_dir / 'nestedpage2-index-1.png').exists()\n+    assert (img_dir / 'nestedpage2-index-1.2x.png').exists()\n+    assert (img_dir / 'nestedpage2-index-2.png').exists()\n+    assert (img_dir / 'nestedpage2-index-2.2x.png').exists()\n+\n+    # Check html for srcset\n+\n+    assert ('srcset=\"_images/some_plots-1.png, _images/some_plots-1.2x.png 2.00x\"'\n+            in (html_dir / 'some_plots.html').read_text(encoding='utf-8'))\n+\n+    st = ('srcset=\"../_images/nestedpage-index-1.png, '\n+          '../_images/nestedpage-index-1.2x.png 2.00x\"')\n+    assert st in (html_dir / 'nestedpage/index.html').read_text(encoding='utf-8')\n+\n+    st = ('srcset=\"../_images/nestedpage2-index-2.png, '\n+          '../_images/nestedpage2-index-2.2x.png 2.00x\"')\n+    assert st in (html_dir / 'nestedpage2/index.html').read_text(encoding='utf-8')\ndiff --git a/lib/matplotlib/tests/tinypages/conf.py b/lib/matplotlib/tests/tinypages/conf.py\n--- a/lib/matplotlib/tests/tinypages/conf.py\n+++ b/lib/matplotlib/tests/tinypages/conf.py\n@@ -3,7 +3,8 @@\n \n # -- General configuration ------------------------------------------------\n \n-extensions = ['matplotlib.sphinxext.plot_directive']\n+extensions = ['matplotlib.sphinxext.plot_directive',\n+              'matplotlib.sphinxext.figmpl_directive']\n templates_path = ['_templates']\n source_suffix = '.rst'\n master_doc = 'index'\ndiff --git a/lib/matplotlib/tests/tinypages/index.rst b/lib/matplotlib/tests/tinypages/index.rst\n--- a/lib/matplotlib/tests/tinypages/index.rst\n+++ b/lib/matplotlib/tests/tinypages/index.rst\n@@ -12,6 +12,9 @@ Contents:\n     :maxdepth: 2\n \n     some_plots\n+    nestedpage/index\n+    nestedpage2/index\n+\n \n Indices and tables\n ==================\ndiff --git a/lib/matplotlib/tests/tinypages/nestedpage/index.rst b/lib/matplotlib/tests/tinypages/nestedpage/index.rst\nnew file mode 100644\n--- /dev/null\n+++ b/lib/matplotlib/tests/tinypages/nestedpage/index.rst\n@@ -0,0 +1,20 @@\n+#################\n+Nested page plots\n+#################\n+\n+Plot 1 does not use context:\n+\n+.. plot::\n+\n+    plt.plot(range(10))\n+    plt.title('FIRST NESTED 1')\n+    a = 10\n+\n+Plot 2 doesn't use context either; has length 6:\n+\n+.. plot::\n+\n+    plt.plot(range(6))\n+    plt.title('FIRST NESTED 2')\n+\n+\ndiff --git a/lib/matplotlib/tests/tinypages/nestedpage2/index.rst b/lib/matplotlib/tests/tinypages/nestedpage2/index.rst\nnew file mode 100644\n--- /dev/null\n+++ b/lib/matplotlib/tests/tinypages/nestedpage2/index.rst\n@@ -0,0 +1,25 @@\n+#####################\n+Nested page plots TWO\n+#####################\n+\n+Plot 1 does not use context:\n+\n+.. plot::\n+\n+    plt.plot(range(10))\n+    plt.title('NESTED2 Plot 1')\n+    a = 10\n+\n+Plot 2 doesn't use context either; has length 6:\n+\n+\n+.. plot::\n+\n+    plt.plot(range(6))\n+    plt.title('NESTED2 Plot 2')\n+\n+\n+.. plot::\n+\n+    plt.plot(range(6))\n+    plt.title('NESTED2 PlotP 3')\n",
  "problem_statement": "[ENH]: hi-res plot directive...\n### Problem\n\nOur plot directive makes 100-dpi figures for the webpage.  These look pretty fuzzy on hiDPI screens, and we should do what we did for sphinx gallery and allow hi-res figures..\n\n### Proposed solution\n\nNot quite sure how to fix this.  We currently make a `.. figure::` from the plot directive, which is exactly the same as a `.. image::` except it allows a caption.  Internally, we use the caption functionality exactly once.  If we could drop the caption we could just use `.. sg-image::` from sphinx gallery, which allows srcset multiple resolution images.  \r\n\r\nJust increasing the dpi doesn't really work because it makes the images twice as big, but still low resolution, unless we have specified the `:width:` manually.  \n",
  "hints_text": "",
  "created_at": "2023-03-20T18:39:07Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_sphinxext.py::test_tinypages\", \"lib/matplotlib/tests/test_sphinxext.py::test_plot_html_show_source_link\", \"lib/matplotlib/tests/test_sphinxext.py::test_show_source_link_true[0]\", \"lib/matplotlib/tests/test_sphinxext.py::test_show_source_link_true[1]\", \"lib/matplotlib/tests/test_sphinxext.py::test_show_source_link_false[0]\", \"lib/matplotlib/tests/test_sphinxext.py::test_show_source_link_false[1]\", \"lib/matplotlib/tests/test_sphinxext.py::test_srcset_version\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.822269",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}