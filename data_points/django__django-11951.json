{
  "repo": "django/django",
  "instance_id": "django__django-11951",
  "base_commit": "312049091288dbba2299de8d07ea3e3311ed7238",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1209,7 +1209,8 @@ def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:\n             raise NotSupportedError('This database backend does not support ignoring conflicts.')\n         ops = connections[self.db].ops\n-        batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))\n+        max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)\n+        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n         inserted_rows = []\n         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert\n         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:\n",
  "test_patch": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,4 @@\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -214,6 +215,14 @@ def test_explicit_batch_size_efficiency(self):\n         with self.assertNumQueries(1):\n             TwoFields.objects.bulk_create(objs, len(objs))\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_bulk_insert_expressions(self):\n         Restaurant.objects.bulk_create([\n",
  "problem_statement": "bulk_create batch_size param overrides the compatible batch size calculation\nDescription\n\t \n\t\t(last modified by Ahmet Kucuk)\n\t \nAt this line: ​https://github.com/django/django/blob/stable/2.2.x/django/db/models/query.py#L1197\nbatch_size param overrides compatible batch size calculation. This looks like a bug as bulk_update properly picks the minimum of two:\n​https://github.com/django/django/blob/stable/2.2.x/django/db/models/query.py#L504\nI suggest using similar\n batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\nlogic in bulk_create as well. I am happy to open a PR for it.\n",
  "hints_text": "",
  "created_at": "2019-10-21T09:35:46Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_explicit_batch_size_respects_max_batch_size (bulk_create.tests.BulkCreateTests)\"]",
  "PASS_TO_PASS": "[\"test_batch_same_vals (bulk_create.tests.BulkCreateTests)\", \"test_bulk_insert_expressions (bulk_create.tests.BulkCreateTests)\", \"test_bulk_insert_nullable_fields (bulk_create.tests.BulkCreateTests)\", \"test_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_empty_model (bulk_create.tests.BulkCreateTests)\", \"test_explicit_batch_size (bulk_create.tests.BulkCreateTests)\", \"test_explicit_batch_size_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_ignore_conflicts_ignore (bulk_create.tests.BulkCreateTests)\", \"test_large_batch (bulk_create.tests.BulkCreateTests)\", \"test_large_batch_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_large_batch_mixed (bulk_create.tests.BulkCreateTests)\", \"test_large_batch_mixed_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_large_single_field_batch (bulk_create.tests.BulkCreateTests)\", \"test_long_and_short_text (bulk_create.tests.BulkCreateTests)\", \"test_long_non_ascii_text (bulk_create.tests.BulkCreateTests)\", \"test_multi_table_inheritance_unsupported (bulk_create.tests.BulkCreateTests)\", \"test_non_auto_increment_pk (bulk_create.tests.BulkCreateTests)\", \"test_non_auto_increment_pk_efficiency (bulk_create.tests.BulkCreateTests)\", \"test_proxy_inheritance_supported (bulk_create.tests.BulkCreateTests)\", \"test_set_state_with_pk_specified (bulk_create.tests.BulkCreateTests)\", \"test_simple (bulk_create.tests.BulkCreateTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.589555",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}