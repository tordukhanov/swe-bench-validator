{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1537",
  "base_commit": "d8268fb7b44da7b8aa225eb1ca6fbdb4f9dc2457",
  "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -106,6 +106,10 @@ def _encode_files(files, data):\n                 val = [val]\n             for v in val:\n                 if v is not None:\n+                    # Don't call str() on bytestrings: in Py3 it all goes wrong.\n+                    if not isinstance(v, bytes):\n+                        v = str(v)\n+\n                     new_fields.append(\n                         (field.decode('utf-8') if isinstance(field, bytes) else field,\n                          v.encode('utf-8') if isinstance(v, str) else v))\n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -663,6 +663,14 @@ def test_header_keys_are_native(self):\n         self.assertTrue('unicode' in p.headers.keys())\n         self.assertTrue('byte' in p.headers.keys())\n \n+    def test_can_send_nonstring_objects_with_files(self):\n+        data = {'a': 0.0}\n+        files = {'b': 'foo'}\n+        r = requests.Request('POST', httpbin('post'), data=data, files=files)\n+        p = r.prepare()\n+\n+        self.assertTrue('multipart/form-data' in p.headers['Content-Type'])\n+\n \n class TestCaseInsensitiveDict(unittest.TestCase):\n \n",
  "problem_statement": "multipart/form-data and datetime data\nI raise an bug that you already fix in the past on this issue : https://github.com/kennethreitz/requests/issues/661 or https://github.com/kennethreitz/requests/issues/737\n\nI tried the same methodology with that code :\n\n```\nimport requets\n\nrequests.post(\"http://httpbin.org/post\", data={'a': 0})\nrequests.post(\"http://httpbin.org/post\", data={'a': 0.0})\nrequests.post(\"http://httpbin.org/post\", data={'a': 0}, files={'b': 'foo'})\nrequests.post(\"http://httpbin.org/post\", data={'a': 0.0}, files={'b': 'foo'})\n```\n\nWith the 1.2.0 version, no error is raised.\n\nWith 1.2.3 version, I have that traceback :\n\n```\nTraceback (most recent call last):\n  File \"test.py\", line 8, in <module>\n    requests.post(\"http://httpbin.org/post\", data={'a': 0.0}, files={'b': 'foo'})\n  File \".../dev/lib/python2.7/site-packages/requests/api.py\", line 88, in post\n    return request('post', url, data=data, **kwargs)\n  File \".../dev/lib/python2.7/site-packages/requests/api.py\", line 44, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \".../dev/lib/python2.7/site-packages/requests/sessions.py\", line 324, in request\n    prep = req.prepare()\n  File \".../dev/lib/python2.7/site-packages/requests/models.py\", line 225, in prepare\n    p.prepare_body(self.data, self.files)\n  File \".../dev/lib/python2.7/site-packages/requests/models.py\", line 385, in prepare_body\n    (body, content_type) = self._encode_files(files, data)\n  File \".../dev/lib/python2.7/site-packages/requests/models.py\", line 133, in _encode_files\n    body, content_type = encode_multipart_formdata(new_fields)\n  File \".../dev/lib/python2.7/site-packages/requests/packages/urllib3/filepost.py\", line 90, in encode_multipart_formdata\n    body.write(data)\nTypeError: 'float' does not have the buffer interface\n```\n\nMy original problem was with a python datetime in the data dict\nThanks,\n\n",
  "hints_text": "Hi @ppavril, thanks for raising this issue!\n\nSo the problem here is that we don't ask for a string representation of keys or values. I think the correct fix is changing the following code (at [line 102 of models.py](https://github.com/kennethreitz/requests/blob/master/requests/models.py#L102)) from:\n\n``` python\nfor field, val in fields:\n    if isinstance(val, basestring) or not hasattr(val, '__iter__'):\n        val = [val]\n    for v in val:\n        if v is not None:\n            new_fields.append(\n                (field.decode('utf-8') if isinstance(field, bytes) else field,\n                 v.encode('utf-8') if isinstance(v, str) else v))\n```\n\nto:\n\n``` python\nfor field, val in fields:\n    if isinstance(val, basestring) or not hasattr(val, '__iter__'):\n        val = [val]\n    for v in val:\n        if v is not None:\n            if not isinstance(v, basestring):\n                v = str(v)\n\n            new_fields.append(\n                (field.decode('utf-8') if isinstance(field, bytes) else field,\n                 v.encode('utf-8') if isinstance(v, str) else v))\n```\n\nHowever, this is a breaking API change (we now coerce non-string types in the data dict), so should become part of #1459. We should also take advantage of that to clean this section of code up, because it's not totally easy to follow.\n\nIn the meantime @ppavril, you can work around this by calling `str()` on all your data values before passing them to Requests.\n\nThank you for your quick answer.\nI think remaining on 1.2.0 version now and look at your improvements and chagement when I'll upgrade.\nThanks,\n\nFunny thing. I misread @Lukasa's snippet and typed out this whole response as to why it was not optimal then looked at it again and deleted it. :-) \n\nI rewrote that snippet twice. =P\n",
  "created_at": "2013-08-17T06:29:06Z",
  "version": "1.2",
  "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files\"]",
  "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_header_keys_are_native\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\"]",
  "environment_setup_commit": "d8268fb7b44da7b8aa225eb1ca6fbdb4f9dc2457",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.847744",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}