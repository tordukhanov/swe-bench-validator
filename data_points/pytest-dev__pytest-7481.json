{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-7481",
  "base_commit": "d466cc25a78b442cd4ccaafae4adef9a7f1e4012",
  "patch": "diff --git a/src/_pytest/_io/terminalwriter.py b/src/_pytest/_io/terminalwriter.py\n--- a/src/_pytest/_io/terminalwriter.py\n+++ b/src/_pytest/_io/terminalwriter.py\n@@ -149,7 +149,18 @@ def write(self, msg: str, *, flush: bool = False, **markup: bool) -> None:\n \n             msg = self.markup(msg, **markup)\n \n-            self._file.write(msg)\n+            try:\n+                self._file.write(msg)\n+            except UnicodeEncodeError:\n+                # Some environments don't support printing general Unicode\n+                # strings, due to misconfiguration or otherwise; in that case,\n+                # print the string escaped to ASCII.\n+                # When the Unicode situation improves we should consider\n+                # letting the error propagate instead of masking it (see #7475\n+                # for one brief attempt).\n+                msg = msg.encode(\"unicode-escape\").decode(\"ascii\")\n+                self._file.write(msg)\n+\n             if flush:\n                 self.flush()\n \n",
  "test_patch": "diff --git a/testing/io/test_terminalwriter.py b/testing/io/test_terminalwriter.py\n--- a/testing/io/test_terminalwriter.py\n+++ b/testing/io/test_terminalwriter.py\n@@ -49,6 +49,15 @@ def isatty(self):\n         assert not tw.hasmarkup\n \n \n+def test_terminalwriter_not_unicode() -> None:\n+    \"\"\"If the file doesn't support Unicode, the string is unicode-escaped (#7475).\"\"\"\n+    buffer = io.BytesIO()\n+    file = io.TextIOWrapper(buffer, encoding=\"cp1252\")\n+    tw = terminalwriter.TerminalWriter(file)\n+    tw.write(\"hello üåÄ w√¥rld ◊ê◊ë◊í\", flush=True)\n+    assert buffer.getvalue() == br\"hello \\U0001f300 w\\xf4rld \\u05d0\\u05d1\\u05d2\"\n+\n+\n win32 = int(sys.platform == \"win32\")\n \n \n",
  "problem_statement": "pytest 6 (?): UnicodeEncodeError in terminalwriter on Windows\nJust got this on GitHub Actions with the pytest 6 rc:\r\n\r\n```\r\n__________ test_crash_when_pasting_emoji_into_the_command_line_2007 ___________\r\n\r\nrequest = <FixtureRequest for <Function test_crash_when_pasting_emoji_into_the_command_line_2007>>\r\n\r\n    @pytest.mark.usefixtures(*function_args)\r\n    def scenario_wrapper(request):\r\n>       _execute_scenario(feature, scenario, request, encoding)\r\n\r\n.tox\\py37-pyqt514\\lib\\site-packages\\pytest_bdd\\scenario.py:200: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n.tox\\py37-pyqt514\\lib\\site-packages\\pytest_bdd\\scenario.py:166: in _execute_scenario\r\n    _execute_step_function(request, scenario, step, step_func)\r\n.tox\\py37-pyqt514\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\r\n    step_func(**kwargs)\r\nests\\end2end\\features\\conftest.py:279: in run_command\r\n    quteproc.send_cmd(command, count=count, invalid=invalid)\r\nests\\end2end\\fixtures\\quteprocess.py:748: in send_cmd\r\n    self.send_ipc([command])\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <end2end.fixtures.quteprocess.QuteProc object at 0x00000218EC2C61F8>\r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\main.py\", line 240, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\main.py\", line 296, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\main.py\", line 321, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\runner.py\", line 100, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\runner.py\", line 117, in runtestprotocol\r\nINTERNALERROR>     reports.append(call_and_report(item, \"call\", log))\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\runner.py\", line 211, in call_and_report\r\nINTERNALERROR>     hook.pytest_runtest_logreport(report=report)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pytest_instafail.py\", line 60, in pytest_runtest_logreport\r\nINTERNALERROR>     self.print_failure(report)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\pytest_instafail.py\", line 89, in print_failure\r\nINTERNALERROR>     self._outrep_summary(report)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\terminal.py\", line 1035, in _outrep_summary\r\nINTERNALERROR>     rep.toterminal(self._tw)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\reports.py\", line 82, in toterminal\r\nINTERNALERROR>     longrepr.toterminal(out)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\_code\\code.py\", line 967, in toterminal\r\nINTERNALERROR>     element[0].toterminal(tw)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\_code\\code.py\", line 997, in toterminal\r\nINTERNALERROR>     entry.toterminal(tw)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\_code\\code.py\", line 1093, in toterminal\r\nINTERNALERROR>     self.reprfuncargs.toterminal(tw)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\_code\\code.py\", line 1156, in toterminal\r\nINTERNALERROR>     tw.line(linesofar)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\_io\\terminalwriter.py\", line 156, in line\r\nINTERNALERROR>     self.write(s, **markup)\r\nINTERNALERROR>   File \"D:\\a\\qutebrowser\\qutebrowser\\.tox\\py37-pyqt514\\lib\\site-packages\\_pytest\\_io\\terminalwriter.py\", line 151, in write\r\nINTERNALERROR>     self._file.write(msg)\r\nINTERNALERROR>   File \"c:\\hostedtoolcache\\windows\\python\\3.7.8\\x64\\lib\\encodings\\cp1252.py\", line 19, in encode\r\nINTERNALERROR>     return codecs.charmap_encode(input,self.errors,encoding_table)[0]\r\nINTERNALERROR> UnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f300' in position 31: character maps to <undefined>\r\n```\r\n\r\nThis is the test using pytest-bdd in qutebrowser:\r\n\r\n```gherkin\r\n    Scenario: Crash when pasting emoji into the command line (#2007)\r\n        Given I open about:blank\r\n        When I run :set-cmd-text -s :üåÄ\r\n        Then no crash should happen\r\n```\r\n\r\nI can't reproduce this consistently - if I'm reading the traceback right, the test failed (probably flaky?) and then pytest failed while printing the traceback... Note that I also have pytest-instafail installed and it shows up in the stacktrace.\r\n\r\nNot sure if this is actually related to pytest 6, but I've never seen it happen before.\n",
  "hints_text": "Hmmm at first glance doesn't seem related to pytest 6 and this is a bug which has always been there, but I might be wrong of course.\r\n\r\nCan you try to make a test which always fails and outputs that emoji? Also would help if you can try with and without instafail. \nWill do so, but might be next week until I get to it, as I'm giving a pytest training on Mon/Tue/Wed :slightly_smiling_face: \nNo problems! üëç \nFrom the stacktrace it looks like the stdout encoding is `cp1252` which I think even for Windows is pretty limited. Looks like [since Python 3.6](https://www.python.org/dev/peps/pep-0528/) the Windows Console encoding is supposed to be UTF-8, and you are running on Python 3.7 so I wonder why that is.\nHi there, we're also seeing this issue in builds under Linux and Mac.\r\n\r\nFor us, it's complaining about the unicode checkmark:\r\n\r\n```\r\nINTERNALERROR> UnicodeEncodeError: 'ascii' codec can't encode character '\\u2713' in position 7: ordinal not in range(128)\r\n ```\r\n\r\nand it's doing it when a plugin we're using ([pytest-it](https://pypi.org/project/pytest-it/) ) is reporting success (and using the unicode checkmark).\r\n\r\nI was going to make a test repo isolating the problem, but it'll basically just be what I said here. Would you like it as it's own issue when I do, or do you think it's related to this?\r\n\r\nFWIW, rolling back our projects to 5.4.3 makes this issue go away. It only happens in the 6.x-rc from last night.\n> FWIW, rolling back our projects to 5.4.3 makes this issue go away. It only happens in the 6.x-rc from last night.\r\n\r\nThis is an important confirmation, thanks!\nAlso if someone can provide a simple reproducible example/repo on Windows I will be happy to take a look since I'm on Windows. üëç \n@criswell I tried to reproduce locally but it works OK here. Under which environment does this happen?\nI can reproduce something similar on Linux:\r\n\r\n```\r\nINTERNALERROR>   File \"/home/florian/proj/pytest/src/_pytest/_io/terminalwriter.py\", line 245, in write\r\nINTERNALERROR>     self._file.write(markupmsg)\r\nINTERNALERROR> UnicodeEncodeError: 'ascii' codec can't encode character '\\U0001f300' in position 8: ordinal not in range(128)\r\n```\r\n\r\nwith\r\n\r\n```python\r\ndef func(text):\r\n    assert False\r\n\r\ndef test_func():\r\n    func('\\U0001f300')\r\n```\r\n\r\nand `PYTHONIOENCODING=ascii pytest test_unicode.py`. Slightly contrived, but I suspect the real-world cases we're seeing are similar: Python probably doesn't have an Unicode terminal on GitHub Actions and Windows (since it's not a real TTY) and I'm guessing @criswell is using Python < 3.7 before [PEP 538](https://www.python.org/dev/peps/pep-0538/) with a misconfigured locale (`LC_CTYPE=C` or similar).\r\n\r\nBisected to b6cc90e0afe90c84d84c5b15a2db75d87a2681d7 / #7135 (\"terminalwriter: remove support for writing bytes directly\")\r\n\r\n\nAha! Yes, this is happening on CircleCI... it very easily could be a misconfigured locale.\r\n\r\nI've been trying to reproduce it in my own test repo, https://github.com/criswell/pytest-tests/pull/1 , and it's been working fine. But there, it's GitHub actions so it could be getting correct locale settings.\r\n\r\nLet me try with some of our internal repos where we encountered this issue and see.\r\n\r\n*Edit*: And, on our internal repos we've standardized on python 3.6.9, so the pre PEP-538 checks out.\nThanks for bisecting @The-Compiler! The commit makes perfect sense, I already forgot about it!\r\n\r\nSo that commit message is a bit misleading in that it does two things:\r\n\r\n1. Remove support for writing `bytes` directly -- this is good, pytest doesn't do it.\r\n\r\n2. Removed this logic which handles various levels of brokenness in the console:\r\n\r\n```py\r\n\r\ndef write_out(fil, msg):\r\n    # XXX sometimes \"msg\" is of type bytes, sometimes text which\r\n    # complicates the situation.  Should we try to enforce unicode?\r\n    try:\r\n        # on py27 and above writing out to sys.stdout with an encoding\r\n        # should usually work for unicode messages (if the encoding is\r\n        # capable of it)\r\n        fil.write(msg)\r\n    except UnicodeEncodeError:\r\n        # on py26 it might not work because stdout expects bytes\r\n        if fil.encoding:\r\n            try:\r\n                fil.write(msg.encode(fil.encoding))\r\n            except UnicodeEncodeError:\r\n                # it might still fail if the encoding is not capable\r\n                pass\r\n            else:\r\n                fil.flush()\r\n                return\r\n        # fallback: escape all unicode characters\r\n        msg = msg.encode(\"unicode-escape\").decode(\"ascii\")\r\n        fil.write(msg)\r\n    fil.flush()\r\n```\r\n\r\nI believe what that code did for you and @criswell is:\r\n\r\n1. `fil.write(msg)` fails with `UnicodeEncodeError` (=> what is now propagated, reported in this issue)\r\n2. `msg.encode(fil.encoding)` also raises `UnicodeEncodeError` (this attempt is really quite redundant I guess on Python>2.6)\r\n3. The `msg.encode(\"unicode-escape\").decode(\"ascii\")` path is taken which can't fail. This turns e.g. `'üåÄ'` to `'\\\\U0001f300'`.\r\n\r\n(To confirm this, will be nice to get a CI run on python 5.4 if you can link one).\r\n\r\nOverall I think this error is a *good thing* because in 2020 there is not much reason to have a stdout which doesn't support Unicode. 99% of the time this indicates a misconfigured environment, and it is better to fix it than to silently get ugly confusing output like `\\U0001f300`.\r\n\r\nWDYT? Should we bring the escaping back or stick to our guns? (If we do, I'll make sure to highlight this in the changelog and lay out possible reasons and fixes; it's completely missing now).\nIMHO, this is a clear bug in pytest. A test runner definitely should not fail with an internal error (which is quite confusing if you don't know what's going on) when a test fails. We handle quite some esoteric cases (with `safe_repr` and all), this one seems rather common in comparison.\nDo you mean that the bug is that the error message is unclear (we can probably improve on that), or that the error happens at all?\r\n\r\nTo me the previous behavior is actually buggy - some unicode character is printed, but something else is displayed instead.\r\nI think pytest should defer to whichever way Python configured stdout (e.g. `strict` error handler), and I think pytest shouldn't try to workaround a broken environment, but instead encourage the user to fix it:\r\n\r\n- Fix the locale, otherwise\r\n- Use a newer Python, otherwise\r\n- Set `PYTHONIOENCODING`, otherwise\r\n- Avoid printing strings that are not supported by your environment\nBut it's pytest printing that string, not my code/test... If that was the case I would agree.\n\nSo this:\n\n> Avoid printing strings that are not supported by your environment\n\nIs what pytest should do (and did before that change). :wink:\nInternally our docker images which run our pytest code are apparently setting the locale settings to `POSIX`, which, I would argue, doesn't necessarily mean it's incapable of printing unicode (in fact, they can and have done so with previous versions of pytest). I'll be working to get them set to something more PEP-538 friendly to harden them against similar issues in the future.\r\n\r\nThat being said, I actually agree that this could be handled more gracefully inside of pytest. For us, it was a plugin printing a unicode character using terminalwriter. Plugins can't be expected to figure out if the environment is set properly for what they are trying to log, that should be pytest's job.\r\n\n~generally the best way to handle this is to either use `io.TextIOWrapper(..., encoding='UTF-8')` or directly write to `file.buffer` with bytes -- here's (for example) [how pre-commit handles this](https://github.com/pre-commit/pre-commit/blob/2f1d4d10e0918c07935ae53ae743efbc9e9bd4eb/pre_commit/output.py#L8-L10)\r\n\r\nwithout `LANG` set (on posixlike platforms), python will default to `US-ASCII` encoding (which is what's causing the `ascii` default on GA / others).  on windows, CMD (and older powershell) will default to cp1252.\r\n\r\nIn 2020, it's probably reasonable to always write UTF-8 bytes\n@asottile Note that pytest still needs to run on Python 3.5 on Windows (i.e. pre-[PEP 528](https://www.python.org/dev/peps/pep-0528/)). No idea what happens if you output raw utf-8 there, but I bet that's not going to go well.\r\n\r\nI still think the previous `\"unicode-escape\"` encoding was a great solution, even more so in scenarios like my test above where pytest tries to print `text = 'üåÄ'`, i.e. a Python string. For the most majority of the cases (Python 3.6+ in almost all cases) we will get UTF-8 output anyways thanks to [PEP-528](https://www.python.org/dev/peps/pep-0528/) and [PEP-538](https://www.python.org/dev/peps/pep-0538/), and in all other cases we still produce a meaningful output (in which it's still clear what character that was) instead of mojibake.\nWhile I can sympathize with @bluetech's sentiment of exposing the misconfiguration, unfortunately I think we should get back escape strings here. This example by @The-Compiler nails it down for me: \r\n\r\n```python\r\ndef func(text):\r\n    assert False\r\n\r\ndef test_func():\r\n    func('\\U0001f300')\r\n```\r\n\r\nThe user is not even printing to the console, so it is not helpful that pytest breaks because it is writing to the console, and worse only when the test fails, making the problem possibly go silent and blowing up much later on a different host.\r\n\r\nSo üëç from me to escape this again (about *how* to do it I don't have a strong opinion).\nOK, I'll bring back the escaping, especially because I failed to mention this change it in the commit/changelog.\r\n\r\n(Note: I changed the issue title `UncodeDecodeError` -> `UnicodeEncodeError`).",
  "created_at": "2020-07-11T16:00:30Z",
  "version": "6.0",
  "FAIL_TO_PASS": "[\"testing/io/test_terminalwriter.py::test_terminalwriter_not_unicode\"]",
  "PASS_TO_PASS": "[\"testing/io/test_terminalwriter.py::test_terminal_width_COLUMNS\", \"testing/io/test_terminalwriter.py::test_terminalwriter_width_bogus\", \"testing/io/test_terminalwriter.py::test_terminalwriter_computes_width\", \"testing/io/test_terminalwriter.py::test_terminalwriter_dumb_term_no_markup\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line_unicode[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line_unicode[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_no_title[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_no_title[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_with_title[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_with_title[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_longer_than_width[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_sep_longer_than_width[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[path-red-True]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[path-red-False]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[path-green-True]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[path-green-False]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[stringio-red-True]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[stringio-red-False]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[stringio-green-True]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup[stringio-green-False]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup_bad[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_markup_bad[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line_write_markup[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_line_write_markup[stringio]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_attr_fullwidth[path]\", \"testing/io/test_terminalwriter.py::TestTerminalWriter::test_attr_fullwidth[stringio]\", \"testing/io/test_terminalwriter.py::test_attr_hasmarkup\", \"testing/io/test_terminalwriter.py::test_should_do_markup_PY_COLORS_eq_1\", \"testing/io/test_terminalwriter.py::test_should_not_do_markup_PY_COLORS_eq_0\", \"testing/io/test_terminalwriter.py::test_should_not_do_markup_NO_COLOR\", \"testing/io/test_terminalwriter.py::test_should_do_markup_FORCE_COLOR\", \"testing/io/test_terminalwriter.py::test_should_not_do_markup_NO_COLOR_and_FORCE_COLOR\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_init\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_update\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_update_with_newline\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_update_with_wide_text\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_composed\", \"testing/io/test_terminalwriter.py::TestTerminalWriterLineWidth::test_combining\", \"testing/io/test_terminalwriter.py::test_code_highlight[without\", \"testing/io/test_terminalwriter.py::test_code_highlight[neither\"]",
  "environment_setup_commit": "634cde9506eb1f48dec3ec77974ee8dc952207c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.936860",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}