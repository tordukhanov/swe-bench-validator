{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13910",
  "base_commit": "eb93420e875ba14673157be7df305eb1fac7adce",
  "patch": "diff --git a/sklearn/metrics/pairwise.py b/sklearn/metrics/pairwise.py\n--- a/sklearn/metrics/pairwise.py\n+++ b/sklearn/metrics/pairwise.py\n@@ -283,7 +283,7 @@ def euclidean_distances(X, Y=None, Y_norm_squared=None, squared=False,\n     return distances if squared else np.sqrt(distances, out=distances)\n \n \n-def _euclidean_distances_upcast(X, XX=None, Y=None, YY=None):\n+def _euclidean_distances_upcast(X, XX=None, Y=None, YY=None, batch_size=None):\n     \"\"\"Euclidean distances between X and Y\n \n     Assumes X and Y have float32 dtype.\n@@ -298,28 +298,28 @@ def _euclidean_distances_upcast(X, XX=None, Y=None, YY=None):\n \n     distances = np.empty((n_samples_X, n_samples_Y), dtype=np.float32)\n \n-    x_density = X.nnz / np.prod(X.shape) if issparse(X) else 1\n-    y_density = Y.nnz / np.prod(Y.shape) if issparse(Y) else 1\n-\n-    # Allow 10% more memory than X, Y and the distance matrix take (at least\n-    # 10MiB)\n-    maxmem = max(\n-        ((x_density * n_samples_X + y_density * n_samples_Y) * n_features\n-         + (x_density * n_samples_X * y_density * n_samples_Y)) / 10,\n-        10 * 2 ** 17)\n-\n-    # The increase amount of memory in 8-byte blocks is:\n-    # - x_density * batch_size * n_features (copy of chunk of X)\n-    # - y_density * batch_size * n_features (copy of chunk of Y)\n-    # - batch_size * batch_size (chunk of distance matrix)\n-    # Hence x² + (xd+yd)kx = M, where x=batch_size, k=n_features, M=maxmem\n-    #                                 xd=x_density and yd=y_density\n-    tmp = (x_density + y_density) * n_features\n-    batch_size = (-tmp + np.sqrt(tmp ** 2 + 4 * maxmem)) / 2\n-    batch_size = max(int(batch_size), 1)\n-\n-    x_batches = gen_batches(X.shape[0], batch_size)\n-    y_batches = gen_batches(Y.shape[0], batch_size)\n+    if batch_size is None:\n+        x_density = X.nnz / np.prod(X.shape) if issparse(X) else 1\n+        y_density = Y.nnz / np.prod(Y.shape) if issparse(Y) else 1\n+\n+        # Allow 10% more memory than X, Y and the distance matrix take (at\n+        # least 10MiB)\n+        maxmem = max(\n+            ((x_density * n_samples_X + y_density * n_samples_Y) * n_features\n+             + (x_density * n_samples_X * y_density * n_samples_Y)) / 10,\n+            10 * 2 ** 17)\n+\n+        # The increase amount of memory in 8-byte blocks is:\n+        # - x_density * batch_size * n_features (copy of chunk of X)\n+        # - y_density * batch_size * n_features (copy of chunk of Y)\n+        # - batch_size * batch_size (chunk of distance matrix)\n+        # Hence x² + (xd+yd)kx = M, where x=batch_size, k=n_features, M=maxmem\n+        #                                 xd=x_density and yd=y_density\n+        tmp = (x_density + y_density) * n_features\n+        batch_size = (-tmp + np.sqrt(tmp ** 2 + 4 * maxmem)) / 2\n+        batch_size = max(int(batch_size), 1)\n+\n+    x_batches = gen_batches(n_samples_X, batch_size)\n \n     for i, x_slice in enumerate(x_batches):\n         X_chunk = X[x_slice].astype(np.float64)\n@@ -328,6 +328,8 @@ def _euclidean_distances_upcast(X, XX=None, Y=None, YY=None):\n         else:\n             XX_chunk = XX[x_slice]\n \n+        y_batches = gen_batches(n_samples_Y, batch_size)\n+\n         for j, y_slice in enumerate(y_batches):\n             if X is Y and j < i:\n                 # when X is Y the distance matrix is symmetric so we only need\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_pairwise.py b/sklearn/metrics/tests/test_pairwise.py\n--- a/sklearn/metrics/tests/test_pairwise.py\n+++ b/sklearn/metrics/tests/test_pairwise.py\n@@ -48,6 +48,7 @@\n from sklearn.metrics.pairwise import paired_distances\n from sklearn.metrics.pairwise import paired_euclidean_distances\n from sklearn.metrics.pairwise import paired_manhattan_distances\n+from sklearn.metrics.pairwise import _euclidean_distances_upcast\n from sklearn.preprocessing import normalize\n from sklearn.exceptions import DataConversionWarning\n \n@@ -687,6 +688,52 @@ def test_euclidean_distances_sym(dtype, x_array_constr):\n     assert distances.dtype == dtype\n \n \n+@pytest.mark.parametrize(\"batch_size\", [None, 5, 7, 101])\n+@pytest.mark.parametrize(\"x_array_constr\", [np.array, csr_matrix],\n+                         ids=[\"dense\", \"sparse\"])\n+@pytest.mark.parametrize(\"y_array_constr\", [np.array, csr_matrix],\n+                         ids=[\"dense\", \"sparse\"])\n+def test_euclidean_distances_upcast(batch_size, x_array_constr,\n+                                    y_array_constr):\n+    # check batches handling when Y != X (#13910)\n+    rng = np.random.RandomState(0)\n+    X = rng.random_sample((100, 10)).astype(np.float32)\n+    X[X < 0.8] = 0\n+    Y = rng.random_sample((10, 10)).astype(np.float32)\n+    Y[Y < 0.8] = 0\n+\n+    expected = cdist(X, Y)\n+\n+    X = x_array_constr(X)\n+    Y = y_array_constr(Y)\n+    distances = _euclidean_distances_upcast(X, Y=Y, batch_size=batch_size)\n+    distances = np.sqrt(np.maximum(distances, 0))\n+\n+    # the default rtol=1e-7 is too close to the float32 precision\n+    # and fails due too rounding errors.\n+    assert_allclose(distances, expected, rtol=1e-6)\n+\n+\n+@pytest.mark.parametrize(\"batch_size\", [None, 5, 7, 101])\n+@pytest.mark.parametrize(\"x_array_constr\", [np.array, csr_matrix],\n+                         ids=[\"dense\", \"sparse\"])\n+def test_euclidean_distances_upcast_sym(batch_size, x_array_constr):\n+    # check batches handling when X is Y (#13910)\n+    rng = np.random.RandomState(0)\n+    X = rng.random_sample((100, 10)).astype(np.float32)\n+    X[X < 0.8] = 0\n+\n+    expected = squareform(pdist(X))\n+\n+    X = x_array_constr(X)\n+    distances = _euclidean_distances_upcast(X, Y=X, batch_size=batch_size)\n+    distances = np.sqrt(np.maximum(distances, 0))\n+\n+    # the default rtol=1e-7 is too close to the float32 precision\n+    # and fails due too rounding errors.\n+    assert_allclose(distances, expected, rtol=1e-6)\n+\n+\n @pytest.mark.parametrize(\n     \"dtype, eps, rtol\",\n     [(np.float32, 1e-4, 1e-5),\n",
  "problem_statement": "Untreated overflow (?) for float32 in euclidean_distances new in sklearn 21.1\n#### Description\r\nI am using euclidean distances in a project and after updating, the result is wrong for just one of several datasets. When comparing it to scipy.spatial.distance.cdist one can see that in version 21.1 it behaves substantially different to 20.3.\r\n\r\nThe matrix is an ndarray with size (100,10000) with float32.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\nfrom sklearn.metrics.pairwise import euclidean_distances\r\nimport sklearn\r\nfrom scipy.spatial.distance import cdist\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nX = np.load('wont.npy')\r\n\r\ned = euclidean_distances(X)\r\ned_ = cdist(X, X, metric='euclidean')\r\n\r\nplt.plot(np.sort(ed.flatten()), label='euclidean_distances sklearn {}'.format(sklearn.__version__))\r\nplt.plot(np.sort(ed_.flatten()), label='cdist')\r\nplt.yscale('symlog', linthreshy=1E3)\r\nplt.legend()\r\nplt.show()\r\n\r\n```\r\nThe data are in this zip\r\n[wont.zip](https://github.com/scikit-learn/scikit-learn/files/3194196/wont.zip)\r\n\r\n\r\n\r\n#### Expected Results\r\nCan be found when using sklearn 20.3, both behave identical.\r\n[sklearn20.pdf](https://github.com/scikit-learn/scikit-learn/files/3194197/sklearn20.pdf)\r\n\r\n\r\n#### Actual Results\r\nWhen using version 21.1 has many 0 entries and some unreasonably high entries \r\n[sklearn_v21.pdf](https://github.com/scikit-learn/scikit-learn/files/3194198/sklearn_v21.pdf)\r\n\r\n\r\n#### Versions\r\nSklearn 21\r\nSystem:\r\n    python: 3.6.7 (default, Oct 22 2018, 11:32:17)  [GCC 8.2.0]\r\nexecutable: /home/lenz/PycharmProjects/pyrolmm/venv_sklearn21/bin/python3\r\n   machine: Linux-4.15.0-50-generic-x86_64-with-Ubuntu-18.04-bionic\r\n\r\nBLAS:\r\n    macros: HAVE_CBLAS=None, NO_ATLAS_INFO=-1\r\n  lib_dirs: /usr/lib/x86_64-linux-gnu\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 9.0.1\r\nsetuptools: 39.0.1\r\n   sklearn: 0.21.1\r\n     numpy: 1.16.3\r\n     scipy: 1.3.0\r\n    Cython: None\r\n    pandas: None\r\n\r\nFor sklearn 20.3 the versions are:\r\nSystem:\r\n    python: 3.6.7 (default, Oct 22 2018, 11:32:17)  [GCC 8.2.0]\r\nexecutable: /home/lenz/PycharmProjects/pyrolmm/venv_sklearn20/bin/python3\r\n   machine: Linux-4.15.0-50-generic-x86_64-with-Ubuntu-18.04-bionic\r\n\r\nBLAS:\r\n    macros: HAVE_CBLAS=None, NO_ATLAS_INFO=-1\r\n  lib_dirs: /usr/lib/x86_64-linux-gnu\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 9.0.1\r\nsetuptools: 39.0.1\r\n   sklearn: 0.20.3\r\n     numpy: 1.16.3\r\n     scipy: 1.3.0\r\n    Cython: None\r\n    pandas: None\r\n\r\n\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
  "hints_text": "So it is because of the dtype, so it is probably some overflow. \r\nIt does not give any warning or error though, and this did not happen before.\r\n[float32.pdf](https://github.com/scikit-learn/scikit-learn/files/3194307/float32.pdf)\r\n\r\n\r\n\r\n```python\r\nfrom sklearn.metrics.pairwise import euclidean_distances\r\nimport sklearn\r\nfrom scipy.spatial.distance import cdist\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nX = np.random.uniform(0,2,(100,10000))\r\n\r\ned = euclidean_distances(X)\r\ntitle_ed = 'euc dist type: {}'.format(X.dtype)\r\nX = X.astype('float32')\r\ned_ = euclidean_distances(X)\r\ntitle_ed_ = 'euc dist type: {}'.format(X.dtype)\r\n\r\nplt.plot(np.sort(ed.flatten()), label=title_ed)\r\nplt.plot(np.sort(ed_.flatten()), label=title_ed_)\r\nplt.yscale('symlog', linthreshy=1E3)\r\nplt.legend()\r\nplt.show()\r\n```\nThanks for reporting this @lenz3000. I can reproduce with the above example. It is likely due to https://github.com/scikit-learn/scikit-learn/pull/13554 which improves the numerical precision of `euclidean_distances` in some edge cases, but it looks like it has some side effects. It would be worth invesigating what is happening in this example (were the data is reasonably normalized).\r\n\r\ncc @jeremiedbb",
  "created_at": "2019-05-20T08:47:11Z",
  "version": "0.22",
  "FAIL_TO_PASS": "[\"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-None]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-5]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-7]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-101]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-None]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-5]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-7]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-101]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-None]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-5]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-7]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-101]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-None]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-5]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-7]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-101]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-None]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-5]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-7]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-101]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-None]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-5]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-7]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-101]\"]",
  "PASS_TO_PASS": "[\"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[dice]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[jaccard]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[kulsinski]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[matching]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[rogerstanimoto]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[russellrao]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalmichener]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalsneath]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[yule]\", \"sklearn/metrics/tests/test_pairwise.py::test_no_data_conversion_warning\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_kernels]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed_non_negative\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-euclidean-kwds0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-wminkowski-kwds1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-wminkowski-kwds2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_kernels-polynomial-kwds3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_kernels-callable_rbf_kernel-kwds4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-euclidean-kwds0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-wminkowski-kwds1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-wminkowski-kwds2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_kernels-polynomial-kwds3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_kernels-callable_rbf_kernel-kwds4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-euclidean-kwds0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-wminkowski-kwds1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-wminkowski-kwds2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_kernels-polynomial-kwds3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_kernels-callable_rbf_kernel-kwds4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-euclidean-kwds0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-wminkowski-kwds1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-wminkowski-kwds2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_kernels-polynomial-kwds3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_kernels-callable_rbf_kernel-kwds4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_callable_nonstrict_metric\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[rbf]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[laplacian]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[sigmoid]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[polynomial]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[linear]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[chi2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[additive_chi2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_callable\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_filter_param\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cosine-paired_cosine_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[euclidean-paired_euclidean_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l2-paired_euclidean_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l1-paired_manhattan_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[manhattan-paired_manhattan_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cityblock-paired_manhattan_distances]\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_distances_callable\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_argmin_min\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>0]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>1]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>3]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>4]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-ValueError-length\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-returned\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-,\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[euclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[l2]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[sqeuclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[euclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[l2]\", \"sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[sqeuclidean]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-dense]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-sparse]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-dense]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-sparse]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float32]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float64]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1-float32-0.0001-1e-05]\", \"sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1000000-float32-0.0001-1e-05]\", \"sklearn/metrics/tests/test_pairwise.py::test_cosine_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_haversine_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_euclidean_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_paired_manhattan_distances\", \"sklearn/metrics/tests/test_pairwise.py::test_chi_square_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[linear_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[polynomial_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[rbf_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[laplacian_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[sigmoid_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[cosine_similarity]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[linear_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[polynomial_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[rbf_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[laplacian_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[sigmoid_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[cosine_similarity]\", \"sklearn/metrics/tests/test_pairwise.py::test_linear_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_rbf_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_laplacian_kernel\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[linear-linear_kernel]\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[cosine-cosine_similarity]\", \"sklearn/metrics/tests/test_pairwise.py::test_cosine_similarity\", \"sklearn/metrics/tests/test_pairwise.py::test_check_dense_matrices\", \"sklearn/metrics/tests/test_pairwise.py::test_check_XB_returned\", \"sklearn/metrics/tests/test_pairwise.py::test_check_different_dimensions\", \"sklearn/metrics/tests/test_pairwise.py::test_check_invalid_dimensions\", \"sklearn/metrics/tests/test_pairwise.py::test_check_sparse_arrays\", \"sklearn/metrics/tests/test_pairwise.py::test_check_tuple_input\", \"sklearn/metrics/tests/test_pairwise.py::test_check_preserve_type\", \"sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_data_derived_params[Y\"]",
  "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.999677",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}