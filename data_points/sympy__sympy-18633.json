{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18633",
  "base_commit": "44664d9f625a1c68bc492006cfe1012cb0b49ee4",
  "patch": "diff --git a/sympy/tensor/toperators.py b/sympy/tensor/toperators.py\n--- a/sympy/tensor/toperators.py\n+++ b/sympy/tensor/toperators.py\n@@ -44,7 +44,7 @@ def __new__(cls, expr, *variables):\n             expr = expr.expr\n \n         args, indices, free, dum = cls._contract_indices_for_derivative(\n-            expr, variables)\n+            S(expr), variables)\n \n         obj = TensExpr.__new__(cls, *args)\n \n@@ -104,7 +104,9 @@ def _expand_partial_derivative(self):\n \n         result = obj\n \n-        if isinstance(obj.expr, TensAdd):\n+        if not args[0].free_symbols:\n+            return S.Zero\n+        elif isinstance(obj.expr, TensAdd):\n             # take care of sums of multi PDs\n             result = obj.expr.func(*[\n                     self.func(a, *obj.variables)._expand_partial_derivative()\n",
  "test_patch": "diff --git a/sympy/tensor/tests/test_tensor_operators.py b/sympy/tensor/tests/test_tensor_operators.py\n--- a/sympy/tensor/tests/test_tensor_operators.py\n+++ b/sympy/tensor/tests/test_tensor_operators.py\n@@ -229,6 +229,8 @@ def test_expand_partial_derivative_full_linearity():\n     c3 = Rational(nneg, neg)\n \n     # check full linearity\n+    p = PartialDerivative(42, D(j))\n+    assert p and not p._expand_partial_derivative()\n \n     expr3a = PartialDerivative(nneg*A(i) + pos*B(i), D(j))\n     assert expr3a._expand_partial_derivative() ==\\\n",
  "problem_statement": "Random test failing in test_tensor_partial_deriv\nIt happened in #18614\r\nI suspect the problem is the random value sometimes get zero and `PartialDerivative(0, D(j))` doesn't evaluate.\n",
  "hints_text": "I thought this was fixed in be4c2b1daebfe267bf5414922ad8bcbcf315a325 but you are right. A diff that passes tensor tests is:\r\n```diff\r\ndiff --git a/sympy/tensor/tests/test_tensor_operators.py b/sympy/tensor/tests/test_tensor_operators.py\r\nindex e2f3447..2aacc3c 100644\r\n--- a/sympy/tensor/tests/test_tensor_operators.py\r\n+++ b/sympy/tensor/tests/test_tensor_operators.py\r\n@@ -230,6 +230,9 @@ def test_expand_partial_derivative_full_linearity():\r\n\r\n     # check full linearity\r\n\r\n+    p = PartialDerivative(42, D(j))\r\n+    assert p and not p._expand_partial_derivative()\r\n+\r\n     expr3a = PartialDerivative(nneg*A(i) + pos*B(i), D(j))\r\n     assert expr3a._expand_partial_derivative() ==\\\r\n         nneg*PartialDerivative(A(i), D(j))\\\r\ndiff --git a/sympy/tensor/toperators.py b/sympy/tensor/toperators.py\r\nindex 40702bf..18a23e5 100644\r\n--- a/sympy/tensor/toperators.py\r\n+++ b/sympy/tensor/toperators.py\r\n@@ -74,7 +74,7 @@ def _contract_indices_for_derivative(cls, expr, variables):\r\n                 variables_opposite_valence.append(i)\r\n\r\n         args, indices, free, dum = TensMul._tensMul_contract_indices(\r\n-            [expr] + variables_opposite_valence, replace_indices=True)\r\n+            [S(expr)] + variables_opposite_valence, replace_indices=True)\r\n\r\n         for i in range(1, len(args)):\r\n             args_i = args[i]\r\n@@ -104,7 +104,9 @@ def _expand_partial_derivative(self):\r\n\r\n         result = obj\r\n\r\n-        if isinstance(obj.expr, TensAdd):\r\n+        if not args[0].free_symbols:\r\n+            return S.Zero\r\n+        elif isinstance(obj.expr, TensAdd):\r\n             # take care of sums of multi PDs\r\n             result = obj.expr.func(*[\r\n                     self.func(a, *obj.variables)._expand_partial_derivative()\r\n```\nI am working on this issue.",
  "created_at": "2020-02-11T07:27:12Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_expand_partial_derivative_full_linearity\"]",
  "PASS_TO_PASS": "[\"test_invalid_partial_derivative_valence\", \"test_tensor_partial_deriv\", \"test_replace_arrays_partial_derivative\", \"test_expand_partial_derivative_sum_rule\", \"test_expand_partial_derivative_constant_factor_rule\", \"test_expand_partial_derivative_product_rule\", \"test_eval_partial_derivative_expr_by_symbol\", \"test_eval_partial_derivative_single_tensors_by_scalar\", \"test_eval_partial_derivative_single_1st_rank_tensors_by_tensor\", \"test_eval_partial_derivative_single_2nd_rank_tensors_by_tensor\", \"test_eval_partial_derivative_divergence_type\", \"test_eval_partial_derivative_expr1\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.125377",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}