{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-10115",
  "base_commit": "966d4fb3e4640de721f87e4190427975ea020c67",
  "patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -302,53 +302,29 @@ def _write_pyc_fp(\n     fp.write(marshal.dumps(co))\n \n \n-if sys.platform == \"win32\":\n-    from atomicwrites import atomic_write\n-\n-    def _write_pyc(\n-        state: \"AssertionState\",\n-        co: types.CodeType,\n-        source_stat: os.stat_result,\n-        pyc: Path,\n-    ) -> bool:\n-        try:\n-            with atomic_write(os.fspath(pyc), mode=\"wb\", overwrite=True) as fp:\n-                _write_pyc_fp(fp, source_stat, co)\n-        except OSError as e:\n-            state.trace(f\"error writing pyc file at {pyc}: {e}\")\n-            # we ignore any failure to write the cache file\n-            # there are many reasons, permission-denied, pycache dir being a\n-            # file etc.\n-            return False\n-        return True\n-\n-else:\n-\n-    def _write_pyc(\n-        state: \"AssertionState\",\n-        co: types.CodeType,\n-        source_stat: os.stat_result,\n-        pyc: Path,\n-    ) -> bool:\n-        proc_pyc = f\"{pyc}.{os.getpid()}\"\n-        try:\n-            fp = open(proc_pyc, \"wb\")\n-        except OSError as e:\n-            state.trace(f\"error writing pyc file at {proc_pyc}: errno={e.errno}\")\n-            return False\n-\n-        try:\n+def _write_pyc(\n+    state: \"AssertionState\",\n+    co: types.CodeType,\n+    source_stat: os.stat_result,\n+    pyc: Path,\n+) -> bool:\n+    proc_pyc = f\"{pyc}.{os.getpid()}\"\n+    try:\n+        with open(proc_pyc, \"wb\") as fp:\n             _write_pyc_fp(fp, source_stat, co)\n-            os.rename(proc_pyc, pyc)\n-        except OSError as e:\n-            state.trace(f\"error writing pyc file at {pyc}: {e}\")\n-            # we ignore any failure to write the cache file\n-            # there are many reasons, permission-denied, pycache dir being a\n-            # file etc.\n-            return False\n-        finally:\n-            fp.close()\n-        return True\n+    except OSError as e:\n+        state.trace(f\"error writing pyc file at {proc_pyc}: errno={e.errno}\")\n+        return False\n+\n+    try:\n+        os.replace(proc_pyc, pyc)\n+    except OSError as e:\n+        state.trace(f\"error writing pyc file at {pyc}: {e}\")\n+        # we ignore any failure to write the cache file\n+        # there are many reasons, permission-denied, pycache dir being a\n+        # file etc.\n+        return False\n+    return True\n \n \n def _rewrite_test(fn: Path, config: Config) -> Tuple[os.stat_result, types.CodeType]:\n",
  "test_patch": "diff --git a/testing/test_assertrewrite.py b/testing/test_assertrewrite.py\n--- a/testing/test_assertrewrite.py\n+++ b/testing/test_assertrewrite.py\n@@ -1009,7 +1009,7 @@ def test_meta_path():\n         )\n         assert pytester.runpytest().ret == 0\n \n-    def test_write_pyc(self, pytester: Pytester, tmp_path, monkeypatch) -> None:\n+    def test_write_pyc(self, pytester: Pytester, tmp_path) -> None:\n         from _pytest.assertion.rewrite import _write_pyc\n         from _pytest.assertion import AssertionState\n \n@@ -1021,27 +1021,8 @@ def test_write_pyc(self, pytester: Pytester, tmp_path, monkeypatch) -> None:\n         co = compile(\"1\", \"f.py\", \"single\")\n         assert _write_pyc(state, co, os.stat(source_path), pycpath)\n \n-        if sys.platform == \"win32\":\n-            from contextlib import contextmanager\n-\n-            @contextmanager\n-            def atomic_write_failed(fn, mode=\"r\", overwrite=False):\n-                e = OSError()\n-                e.errno = 10\n-                raise e\n-                yield  # type:ignore[unreachable]\n-\n-            monkeypatch.setattr(\n-                _pytest.assertion.rewrite, \"atomic_write\", atomic_write_failed\n-            )\n-        else:\n-\n-            def raise_oserror(*args):\n-                raise OSError()\n-\n-            monkeypatch.setattr(\"os.rename\", raise_oserror)\n-\n-        assert not _write_pyc(state, co, os.stat(source_path), pycpath)\n+        with mock.patch.object(os, \"replace\", side_effect=OSError):\n+            assert not _write_pyc(state, co, os.stat(source_path), pycpath)\n \n     def test_resources_provider_for_loader(self, pytester: Pytester) -> None:\n         \"\"\"\n",
  "problem_statement": "Get rid of atomicwrites (unmaintained)\nPyPI has started enforcing 2-factor-auth for maintainers of various popular packages: https://twitter.com/pypi/status/1545455297388584960\r\n\r\nFor context, here is the mail I got:\r\n\r\n> Congratulations! A project you ('The_Compiler') maintain has been designated as a critical project on PyPI. You can see which project(s) has been designated at http://pypi.org/manage/projects/.\r\n>\r\n> As part of this effort, in the coming months maintainers of projects designated as critical, like yourself, will be required to enable two-factor authentication on their account in order to add new releases or otherwise modify a critical \r\nproject.\r\n>\r\n> Since you already have two-factor authentication enabled on your account, there's nothing you need to do at this time.\r\n>\r\n> PS: To make it easier for maintainers like you to enable two-factor authentication, we're also distributing security keys to eligible maintainers. See http://pypi.org/security-key-giveaway/ for more details.\r\n\r\n---\r\n\r\nUnfortunately, this has caused the maintainer of `atomicwrites` to go on what I can only describe as a rampage, first deleting the project from PyPI (and then finding out it's not possible to restore it): https://github.com/untitaker/python-atomicwrites/issues/61\r\n\r\n...to then simply declare the project as unmaintained outright: https://github.com/untitaker/python-atomicwrites/commit/d18328460520e18b4f197297f962d4444c5889b6\r\n\r\nNo matter what the outcome of this will be, IMHO, given those actions I do not feel comfortable with trusting this dependency for something as popular as pytest.\r\n\r\nThe library itself [is relatively simple](https://github.com/untitaker/python-atomicwrites/blob/master/atomicwrites/__init__.py), and we only use it on Windows. It's MIT-licensed. Should we just copy the parts we need into pytest instead?\n",
  "hints_text": "I think we can just use the unix code, but use `os.replace` instead of `os.rename` -- if I'm reading the history correctly `atomicwrites` was before python had os.replace (3.3+)",
  "created_at": "2022-07-08T20:02:22Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_write_pyc\"]",
  "PASS_TO_PASS": "[\"testing/test_assertrewrite.py::TestAssertionRewrite::test_place_initial_imports\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_location_is_set\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_name\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertrepr_compare_same_width\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_if_hasattr_fails\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_already_has_message\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_short_circuit_evaluation\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_unary_op\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_binary_op\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop_percent\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_call\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_attribute\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_comparisons\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_len\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_reprcompare\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_raising__bool__in_comparison\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_formatchar\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr_non_ascii\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_more_invalid\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[trivial]\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[assert\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[multiple\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[latin1\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[utf-8\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[multi-line\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[multi\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[backslash\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[assertion\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[escaped\", \"testing/test_assertrewrite.py::test_get_assertion_exprs[no\", \"testing/test_assertrewrite.py::test_try_makedirs\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[c:/tmp/pycs-d:/projects/src/foo.py-c:/tmp/pycs/projects/src]\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-d:/projects/src/foo.py-d:/projects/src/__pycache__]\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[/tmp/pycs-/home/projects/src/foo.py-/tmp/pycs/home/projects/src]\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-/home/projects/src/foo.py-/home/projects/src/__pycache__]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[0-240]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[1-2400]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[2-None]\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[3-None]\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_rewrites_plugin_as_a_package\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_honors_pep_235\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_multiline\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_tuple\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_expr\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_escape\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_messages_bytes\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_at_operator_issue1290\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_starred_with_side_effect\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_a_file\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_readonly\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_zipfile\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_load_resource_via_files_with_rewrite\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_readonly\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_orphaned_pyc_file\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_package\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_translate_newlines\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_package_without__init__py\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_remember_rewritten_modules\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_sys_meta_path_munged\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_success\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_reload_is_same_and_reloads\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_get_data_support\", \"testing/test_assertrewrite.py::test_issue731\", \"testing/test_assertrewrite.py::TestIssue925::test_simple_case\", \"testing/test_assertrewrite.py::TestIssue925::test_long_case\", \"testing/test_assertrewrite.py::TestIssue925::test_many_brackets\", \"testing/test_assertrewrite.py::TestIssue2121::test_rewrite_python_files_contain_subdirs\", \"testing/test_assertrewrite.py::test_source_mtime_long_long[-1]\", \"testing/test_assertrewrite.py::test_source_mtime_long_long[1]\", \"testing/test_assertrewrite.py::test_rewrite_infinite_recursion\", \"testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic\", \"testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_pattern_contains_subdirectories\", \"testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_cwd_changed\", \"testing/test_assertrewrite.py::TestAssertionPass::test_option_default\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_call\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_call_with_parens\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_hookimpl\", \"testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_cmd_option\", \"testing/test_assertrewrite.py::TestPyCacheDir::test_sys_pycache_prefix_integration\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_default_verbosity\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_increased_verbosity\", \"testing/test_assertrewrite.py::TestReprSizeVerbosity::test_max_increased_verbosity\", \"testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_plugin\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_dont_write_bytecode\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_cached_pyc_includes_pytest_version\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_pyc_vs_pyo\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_module_imported_from_conftest\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins\", \"testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins_env_var\", \"testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_resources_provider_for_loader\"]",
  "environment_setup_commit": "572b5657d7ca557593418ce0319fabff88800c73",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.921212",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}