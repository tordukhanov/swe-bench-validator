{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-6882",
  "base_commit": "3c8ce0f4f6fd287bcd1bc3783d51d4ce5a6bc55d",
  "patch": "diff --git a/xarray/coding/times.py b/xarray/coding/times.py\n--- a/xarray/coding/times.py\n+++ b/xarray/coding/times.py\n@@ -197,9 +197,12 @@ def _decode_cf_datetime_dtype(data, units, calendar, use_cftime):\n def _decode_datetime_with_cftime(num_dates, units, calendar):\n     if cftime is None:\n         raise ModuleNotFoundError(\"No module named 'cftime'\")\n-    return np.asarray(\n-        cftime.num2date(num_dates, units, calendar, only_use_cftime_datetimes=True)\n-    )\n+    if num_dates.size > 0:\n+        return np.asarray(\n+            cftime.num2date(num_dates, units, calendar, only_use_cftime_datetimes=True)\n+        )\n+    else:\n+        return np.array([], dtype=object)\n \n \n def _decode_datetime_with_pandas(flat_num_dates, units, calendar):\n@@ -220,8 +223,10 @@ def _decode_datetime_with_pandas(flat_num_dates, units, calendar):\n \n     with warnings.catch_warnings():\n         warnings.filterwarnings(\"ignore\", \"invalid value encountered\", RuntimeWarning)\n-        pd.to_timedelta(flat_num_dates.min(), delta) + ref_date\n-        pd.to_timedelta(flat_num_dates.max(), delta) + ref_date\n+        if flat_num_dates.size > 0:\n+            # avoid size 0 datetimes GH1329\n+            pd.to_timedelta(flat_num_dates.min(), delta) + ref_date\n+            pd.to_timedelta(flat_num_dates.max(), delta) + ref_date\n \n     # To avoid integer overflow when converting to nanosecond units for integer\n     # dtypes smaller than np.int64 cast all integer and unsigned integer dtype\n",
  "test_patch": "diff --git a/xarray/tests/test_coding_times.py b/xarray/tests/test_coding_times.py\n--- a/xarray/tests/test_coding_times.py\n+++ b/xarray/tests/test_coding_times.py\n@@ -1150,3 +1150,20 @@ def test_decode_cf_datetime_uint64_with_cftime_overflow_error():\n     num_dates = np.uint64(1_000_000 * 86_400 * 360 * 500_000)\n     with pytest.raises(OverflowError):\n         decode_cf_datetime(num_dates, units, calendar)\n+\n+\n+@pytest.mark.parametrize(\"use_cftime\", [True, False])\n+def test_decode_0size_datetime(use_cftime):\n+    # GH1329\n+    if use_cftime and not has_cftime:\n+        pytest.skip()\n+\n+    dtype = object if use_cftime else \"M8[ns]\"\n+    expected = np.array([], dtype=dtype)\n+    actual = decode_cf_datetime(\n+        np.zeros(shape=0, dtype=np.int64),\n+        units=\"days since 1970-01-01 00:00:00\",\n+        calendar=\"proleptic_gregorian\",\n+        use_cftime=use_cftime,\n+    )\n+    np.testing.assert_equal(expected, actual)\n",
  "problem_statement": "Cannot open NetCDF file if dimension with time coordinate has length 0 (`ValueError` when decoding CF datetime)\nIf a data set has a zero-sized coordinate that is a time index, reading fails.  A `ValueError` is triggered when xarray tries to decode the array, as shown below:\r\n\r\n```\r\n$ cat mwe.py\r\n#!/usr/bin/env python\r\n\r\nimport numpy\r\nimport xarray\r\n\r\nds = xarray.Dataset(\r\n    {\"a\": (\"x\", [])},\r\n    coords={\"x\": numpy.zeros(shape=0, dtype=\"M8[ns]\")})\r\n\r\nds.to_netcdf(\"/tmp/test.nc\")\r\n\r\nxarray.open_dataset(\"/tmp/test.nc\")\r\n$ ./mwe.py\r\nTraceback (most recent call last):\r\n  File \"./mwe.py\", line 12, in <module>\r\n    xarray.open_dataset(\"/tmp/test.nc\")\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/backends/api.py\", line 302, in open_dataset\r\n    return maybe_decode_store(store, lock)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/backends/api.py\", line 223, in maybe_decode_store\r\n    drop_variables=drop_variables)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/conventions.py\", line 952, in decode_cf\r\n    ds = Dataset(vars, attrs=attrs)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/dataset.py\", line 358, in __init__\r\n    self._set_init_vars_and_dims(data_vars, coords, compat)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/dataset.py\", line 373, in _set_init_vars_and_dims\r\n    data_vars, coords, compat=compat)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/merge.py\", line 365, in merge_data_and_coords\r\n    return merge_core(objs, compat, join, explicit_coords=explicit_coords)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/merge.py\", line 413, in merge_core\r\n    expanded = expand_variable_dicts(aligned)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/merge.py\", line 213, in expand_variable_dicts\r\n    var = as_variable(var, name=name)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/variable.py\", line 83, in as_variable\r\n    obj = obj.to_index_variable()\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/variable.py\", line 322, in to_index_variable\r\n    encoding=self._encoding, fastpath=True)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/variable.py\", line 1173, in __init__\r\n    self._data = PandasIndexAdapter(self._data)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/indexing.py\", line 497, in __init__\r\n    self.array = utils.safe_cast_to_index(array)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/utils.py\", line 57, in safe_cast_to_index\r\n    index = pd.Index(np.asarray(array), **kwargs)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/numpy/core/numeric.py\", line 531, in asarray\r\n    return array(a, dtype, copy=False, order=order)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/core/indexing.py\", line 373, in __array__\r\n    return np.asarray(array[self.key], dtype=None)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/conventions.py\", line 408, in __getitem__\r\n    calendar=self.calendar)\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/xarray/conventions.py\", line 151, in decode_cf_datetime\r\n    pd.to_timedelta(flat_num_dates.min(), delta) + ref_date\r\n  File \"/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/numpy/core/_methods.py\", line 29, in _amin\r\n    return umr_minimum(a, axis, None, out, keepdims)\r\nValueError: zero-size array to reduction operation minimum which has no identity\r\n$ ncdump /tmp/test.nc \r\nnetcdf test {\r\ndimensions:\r\n        x = UNLIMITED ; // (0 currently)\r\nvariables:\r\n        double a(x) ;\r\n                a:_FillValue = NaN ;\r\n        int64 x(x) ;\r\n                x:units = \"days since 1970-01-01 00:00:00\" ;\r\n                x:calendar = \"proleptic_gregorian\" ;\r\n\r\n// global attributes:\r\n                :_NCProperties = \"version=1|netcdflibversion=4.4.1|hdf5libversion=1.8.18\" ;\r\ndata:\r\n}\r\n```\r\n\n",
  "hints_text": "Thanks for the report -- marking this as a bug.\r\n\r\nIf you are able to put together a PR to fix this that would be appreciated.\nI might try it out but most likely not before the end of the week.\nI'd still like to fix this but I have too much workload at the moment.  However, I've noticed it's also triggered if the time axis is not empty, but we subselect data such that it becomes empty, then run `ds.load()`.\nI ran into this issue with a [file from the GOES-17 lightning mapper](https://noaa-goes17.s3.amazonaws.com/GLM-L2-LCFA/2019/111/06/OR_GLM-L2-LCFA_G17_s20191110644200_e20191110644370_c20191110645086.nc). \r\n\r\nA simple script to reproduce is:\r\n```\r\nd=xr.open_dataset('OR_GLM-L2-LCFA_G17_s20191110644200_e20191110644370_c20191110645086.nc')\r\nd.load()\r\n```\r\n\r\ngiving the error\r\n\r\n```\r\n----> 1 d.load()\r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/xarray/core/dataset.py in load(self, **kwargs)\r\n    516         for k, v in self.variables.items():\r\n    517             if k not in lazy_data:\r\n--> 518                 v.load()\r\n    519 \r\n    520         return self\r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/xarray/core/variable.py in load(self, **kwargs)\r\n    325             self._data = as_compatible_data(self._data.compute(**kwargs))\r\n    326         elif not isinstance(self._data, np.ndarray):\r\n--> 327             self._data = np.asarray(self._data)\r\n    328         return self\r\n    329 \r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/numpy/core/numeric.py in asarray(a, dtype, order)\r\n    499 \r\n    500     \"\"\"\r\n--> 501     return array(a, dtype, copy=False, order=order)\r\n    502 \r\n    503 \r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/xarray/core/indexing.py in __array__(self, dtype)\r\n    624 \r\n    625     def __array__(self, dtype=None):\r\n--> 626         self._ensure_cached()\r\n    627         return np.asarray(self.array, dtype=dtype)\r\n    628 \r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/xarray/core/indexing.py in _ensure_cached(self)\r\n    621     def _ensure_cached(self):\r\n    622         if not isinstance(self.array, NumpyIndexingAdapter):\r\n--> 623             self.array = NumpyIndexingAdapter(np.asarray(self.array))\r\n    624 \r\n    625     def __array__(self, dtype=None):\r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/numpy/core/numeric.py in asarray(a, dtype, order)\r\n    499 \r\n    500     \"\"\"\r\n--> 501     return array(a, dtype, copy=False, order=order)\r\n    502 \r\n    503 \r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/xarray/core/indexing.py in __array__(self, dtype)\r\n    602 \r\n    603     def __array__(self, dtype=None):\r\n--> 604         return np.asarray(self.array, dtype=dtype)\r\n    605 \r\n    606     def __getitem__(self, key):\r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/numpy/core/numeric.py in asarray(a, dtype, order)\r\n    499 \r\n    500     \"\"\"\r\n--> 501     return array(a, dtype, copy=False, order=order)\r\n    502 \r\n    503 \r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/xarray/core/indexing.py in __array__(self, dtype)\r\n    508     def __array__(self, dtype=None):\r\n    509         array = as_indexable(self.array)\r\n--> 510         return np.asarray(array[self.key], dtype=None)\r\n    511 \r\n    512     def transpose(self, order):\r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/numpy/core/numeric.py in asarray(a, dtype, order)\r\n    499 \r\n    500     \"\"\"\r\n--> 501     return array(a, dtype, copy=False, order=order)\r\n    502 \r\n    503 \r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/xarray/coding/variables.py in __array__(self, dtype)\r\n     66 \r\n     67     def __array__(self, dtype=None):\r\n---> 68         return self.func(self.array)\r\n     69 \r\n     70     def __repr__(self):\r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/xarray/coding/times.py in decode_cf_datetime(num_dates, units, calendar, use_cftime)\r\n    174         try:\r\n    175             dates = _decode_datetime_with_pandas(flat_num_dates, units,\r\n--> 176                                                  calendar)\r\n    177         except (OutOfBoundsDatetime, OverflowError):\r\n    178             dates = _decode_datetime_with_cftime(\r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/xarray/coding/times.py in _decode_datetime_with_pandas(flat_num_dates, units, calendar)\r\n    139         warnings.filterwarnings('ignore', 'invalid value encountered',\r\n    140                                 RuntimeWarning)\r\n--> 141         pd.to_timedelta(flat_num_dates.min(), delta) + ref_date\r\n    142         pd.to_timedelta(flat_num_dates.max(), delta) + ref_date\r\n    143 \r\n\r\n~/anaconda/envs/isatss/lib/python3.7/site-packages/numpy/core/_methods.py in _amin(a, axis, out, keepdims, initial)\r\n     30 def _amin(a, axis=None, out=None, keepdims=False,\r\n     31           initial=_NoValue):\r\n---> 32     return umr_minimum(a, axis, None, out, keepdims, initial)\r\n     33 \r\n     34 def _sum(a, axis=None, dtype=None, out=None, keepdims=False,\r\n\r\nValueError: zero-size array to reduction operation minimum which has no identity\r\n```\r\n\r\n\r\n\r\nVersions: `xarray = 0.12.1, pandas = 0.24.1`\nI don't know if this issue is still relevant for xarray\r\nBut I encountered the same error with https://github.com/euroargodev/argopy \r\nand may be surprisingly, only with xarray version 0.16.1\nHello,\r\n\r\nUsing the same code sample:\r\n\r\n```\r\nimport numpy\r\nimport xarray\r\n\r\nds = xarray.Dataset(\r\n    {\"a\": (\"x\", [])},\r\n    coords={\"x\": numpy.zeros(shape=0, dtype=\"M8[ns]\")})\r\n\r\nds.to_netcdf(\"/tmp/test.nc\")\r\n\r\nxarray.open_dataset(\"/tmp/test.nc\")\r\n```\r\n\r\nIt works on xarray 0.17 but does not work anymore with xarray 0.18 & 0.18.2.\r\n\r\nThis [addition](https://github.com/pydata/xarray/blob/master/xarray/coding/times.py#L190-L193) seems to be responsible (coming from [this commit](https://github.com/pydata/xarray/commit/fbd48d4307502f7dbe8afa37b84df59e74407820)).\nHas anyone found a workaround for this issue?  I am able to recreate the ValueError via @Thomas-Z's example using xarray 2022.6.0.",
  "created_at": "2022-08-05T21:00:13Z",
  "version": "2022.06",
  "FAIL_TO_PASS": "[\"xarray/tests/test_coding_times.py::test_decode_0size_datetime[False]\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates1-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates2-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates3-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates4-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates5-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates6-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates7-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates8-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates9-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates10-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates11-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates12-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates13-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates14-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates15-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates16-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates17-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates18-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates19-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates20-Hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates21-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates22-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates23-\", \"xarray/tests/test_coding_times.py::test_cf_datetime[10-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates27-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates28-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates29-daYs\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates30-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates31-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates32-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates33-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates34-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates35-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates36-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates37-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates38-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates42-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates43-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates44-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates45-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates46-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates47-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates48-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates49-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates50-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates51-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates52-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates53-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates54-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates55-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates56-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[17093352.0-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates60-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates61-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates62-hours\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-milliseconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[0-microseconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates69-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates70-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates71-seconds\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates72-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates73-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates74-hour\", \"xarray/tests/test_coding_times.py::test_cf_datetime[164375-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[164374.5-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates81-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates82-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime[num_dates83-days\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_overflow\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_standard_units\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_iso_strings\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[julian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[standard]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[360_day-720058.0]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[all_leap-732059.0]\", \"xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[366_day-732059.0]\", \"xarray/tests/test_coding_times.py::test_decode_360_day_calendar\", \"xarray/tests/test_coding_times.py::test_decode_abbreviation\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates0-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates1-days\", \"xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates2-days\", \"xarray/tests/test_coding_times.py::test_decoded_cf_datetime_array_2d\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[N-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[U-microseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[S-seconds]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[T-minutes]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[H-hours]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units[D-days]\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates0-days\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates1-days\", \"xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates2-days\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args0-days\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args1-seconds\", \"xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args2-days\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1D-days-numbers0]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas1-days-numbers1]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1h-hours-numbers2]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1ms-milliseconds-numbers3]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1us-microseconds-numbers4]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[1ns-nanoseconds-numbers5]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas6-None-numbers6]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas7-hours-numbers7]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[NaT-days-nan]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas9-days-numbers9]\", \"xarray/tests/test_coding_times.py::test_cf_timedelta_2d\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas0-days]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas1-hours]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas2-minutes]\", \"xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas3-seconds]\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args0-0001-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args1-0010-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args2-0100-02-03\", \"xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args3-1000-02-03\", \"xarray/tests/test_coding_times.py::test_decode_cf[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_cf[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_cf[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[julian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_cf[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_cf[standard]\", \"xarray/tests/test_coding_times.py::test_decode_cf_time_bounds\", \"xarray/tests/test_coding_times.py::test_encode_time_bounds\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[360_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[365_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[366_day]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[all_leap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[julian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[noleap]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[standard]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data0]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data1]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data0]\", \"xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data1]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_overflow[shape0]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_overflow[shape1]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_overflow[shape2]\", \"xarray/tests/test_coding_times.py::test_encode_expected_failures\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_pandas_min\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_invalid_pandas_valid_cftime\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[360_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[365_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[366_day]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[all_leap]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[gregorian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[julian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[noleap]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2000-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_true[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-standard]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-noleap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-360_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-365_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-366_day]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-all_leap]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-julian]\", \"xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-noleap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[360_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[365_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[366_day]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[all_leap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[julian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[noleap]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[proleptic_gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[standard]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-nanoseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-days]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-microseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-milliseconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-seconds]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-minutes]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-hours]\", \"xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-days]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[N]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[U]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[L]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[S]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[T]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[H]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[D]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[U]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[L]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[S]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[T]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[H]\", \"xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[D]\", \"xarray/tests/test_coding_times.py::test__encode_datetime_with_cftime\", \"xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[Gregorian]\", \"xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[GREGORIAN]\", \"xarray/tests/test_coding_times.py::test_should_cftime_be_used_source_outside_range\", \"xarray/tests/test_coding_times.py::test_should_cftime_be_used_target_not_npable\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint[uint8]\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint[uint16]\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint[uint32]\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint[uint64]\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint64_with_cftime\", \"xarray/tests/test_coding_times.py::test_decode_cf_datetime_uint64_with_cftime_overflow_error\", \"xarray/tests/test_coding_times.py::test_decode_0size_datetime[True]\"]",
  "environment_setup_commit": "50ea159bfd0872635ebf4281e741f3c87f0bef6b",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.896759",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}