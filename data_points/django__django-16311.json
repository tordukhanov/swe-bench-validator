{
  "repo": "django/django",
  "instance_id": "django__django-16311",
  "base_commit": "a1bcdc94da6d597c51b4eca0411a97a6460b482e",
  "patch": "diff --git a/django/middleware/gzip.py b/django/middleware/gzip.py\n--- a/django/middleware/gzip.py\n+++ b/django/middleware/gzip.py\n@@ -13,6 +13,8 @@ class GZipMiddleware(MiddlewareMixin):\n     on the Accept-Encoding header.\n     \"\"\"\n \n+    max_random_bytes = 100\n+\n     def process_response(self, request, response):\n         # It's not worth attempting to compress really short responses.\n         if not response.streaming and len(response.content) < 200:\n@@ -31,11 +33,17 @@ def process_response(self, request, response):\n         if response.streaming:\n             # Delete the `Content-Length` header for streaming content, because\n             # we won't know the compressed size until we stream it.\n-            response.streaming_content = compress_sequence(response.streaming_content)\n+            response.streaming_content = compress_sequence(\n+                response.streaming_content,\n+                max_random_bytes=self.max_random_bytes,\n+            )\n             del response.headers[\"Content-Length\"]\n         else:\n             # Return the compressed content only if it's actually shorter.\n-            compressed_content = compress_string(response.content)\n+            compressed_content = compress_string(\n+                response.content,\n+                max_random_bytes=self.max_random_bytes,\n+            )\n             if len(compressed_content) >= len(response.content):\n                 return response\n             response.content = compressed_content\ndiff --git a/django/utils/text.py b/django/utils/text.py\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -1,4 +1,6 @@\n+import gzip\n import re\n+import secrets\n import unicodedata\n from gzip import GzipFile\n from gzip import compress as gzip_compress\n@@ -314,8 +316,23 @@ def phone2numeric(phone):\n     return \"\".join(char2number.get(c, c) for c in phone.lower())\n \n \n-def compress_string(s):\n-    return gzip_compress(s, compresslevel=6, mtime=0)\n+def _get_random_filename(max_random_bytes):\n+    return b\"a\" * secrets.randbelow(max_random_bytes)\n+\n+\n+def compress_string(s, *, max_random_bytes=None):\n+    compressed_data = gzip_compress(s, compresslevel=6, mtime=0)\n+\n+    if not max_random_bytes:\n+        return compressed_data\n+\n+    compressed_view = memoryview(compressed_data)\n+    header = bytearray(compressed_view[:10])\n+    header[3] = gzip.FNAME\n+\n+    filename = _get_random_filename(max_random_bytes) + b\"\\x00\"\n+\n+    return bytes(header) + filename + compressed_view[10:]\n \n \n class StreamingBuffer(BytesIO):\n@@ -327,9 +344,12 @@ def read(self):\n \n \n # Like compress_string, but for iterators of strings.\n-def compress_sequence(sequence):\n+def compress_sequence(sequence, *, max_random_bytes=None):\n     buf = StreamingBuffer()\n-    with GzipFile(mode=\"wb\", compresslevel=6, fileobj=buf, mtime=0) as zfile:\n+    filename = _get_random_filename(max_random_bytes) if max_random_bytes else None\n+    with GzipFile(\n+        filename=filename, mode=\"wb\", compresslevel=6, fileobj=buf, mtime=0\n+    ) as zfile:\n         # Output headers...\n         yield buf.read()\n         for item in sequence:\n",
  "test_patch": "diff --git a/tests/middleware/tests.py b/tests/middleware/tests.py\n--- a/tests/middleware/tests.py\n+++ b/tests/middleware/tests.py\n@@ -3,6 +3,7 @@\n import re\n import struct\n from io import BytesIO\n+from unittest import mock\n from urllib.parse import quote\n \n from django.conf import settings\n@@ -978,12 +979,47 @@ def test_compress_deterministic(self):\n         ConditionalGetMiddleware from recognizing conditional matches\n         on gzipped content).\n         \"\"\"\n-        r1 = GZipMiddleware(self.get_response)(self.req)\n-        r2 = GZipMiddleware(self.get_response)(self.req)\n+\n+        class DeterministicGZipMiddleware(GZipMiddleware):\n+            max_random_bytes = 0\n+\n+        r1 = DeterministicGZipMiddleware(self.get_response)(self.req)\n+        r2 = DeterministicGZipMiddleware(self.get_response)(self.req)\n         self.assertEqual(r1.content, r2.content)\n         self.assertEqual(self.get_mtime(r1.content), 0)\n         self.assertEqual(self.get_mtime(r2.content), 0)\n \n+    def test_random_bytes(self):\n+        \"\"\"A random number of bytes is added to mitigate the BREACH attack.\"\"\"\n+        with mock.patch(\n+            \"django.utils.text.secrets.randbelow\", autospec=True, return_value=3\n+        ):\n+            r = GZipMiddleware(self.get_response)(self.req)\n+        # The fourth byte of a gzip stream contains flags.\n+        self.assertEqual(r.content[3], gzip.FNAME)\n+        # A 3 byte filename \"aaa\" and a null byte are added.\n+        self.assertEqual(r.content[10:14], b\"aaa\\x00\")\n+        self.assertEqual(self.decompress(r.content), self.compressible_string)\n+\n+    def test_random_bytes_streaming_response(self):\n+        \"\"\"A random number of bytes is added to mitigate the BREACH attack.\"\"\"\n+\n+        def get_stream_response(request):\n+            resp = StreamingHttpResponse(self.sequence)\n+            resp[\"Content-Type\"] = \"text/html; charset=UTF-8\"\n+            return resp\n+\n+        with mock.patch(\n+            \"django.utils.text.secrets.randbelow\", autospec=True, return_value=3\n+        ):\n+            r = GZipMiddleware(get_stream_response)(self.req)\n+            content = b\"\".join(r)\n+        # The fourth byte of a gzip stream contains flags.\n+        self.assertEqual(content[3], gzip.FNAME)\n+        # A 3 byte filename \"aaa\" and a null byte are added.\n+        self.assertEqual(content[10:14], b\"aaa\\x00\")\n+        self.assertEqual(self.decompress(content), b\"\".join(self.sequence))\n+\n \n class ETagGZipMiddlewareTest(SimpleTestCase):\n     \"\"\"\n",
  "problem_statement": "Mitigate the BREACH attack\nDescription\n\t \n\t\t(last modified by Nick Pope)\n\t \nThe BREACH attack (​https://breachattack.com/) was published in 2013. The Django project responded soon after (​https://www.djangoproject.com/weblog/2013/aug/06/breach-and-django/) suggesting users to basically stop using gzip. CSRF masking was implemented in 2016 (#20869).\nIn April 2022, a paper called \"Heal The Breach\" was published, suggesting a mitigation that does not depend on masking specific tokens or injecting data into HTML. It is rather a generic and effective mitigation. It suggests adding randomness to the compressed response by injecting random bytes in the gzip filename field of the gzip stream: ​https://ieeexplore.ieee.org/document/9754554\nTelling users to disable gzip is not great for bandwidth consumption. I propose that Django should implement \"Heal The Breach\" with sensible default.\n",
  "hints_text": "",
  "created_at": "2022-11-20T20:53:18Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"A random number of bytes is added to mitigate the BREACH attack.\"]",
  "PASS_TO_PASS": "[\"If the X_FRAME_OPTIONS setting is not set then it defaults to\", \"The X_FRAME_OPTIONS setting can be set to DENY to have the middleware\", \"If the X-Frame-Options header is already set then the middleware does\", \"The XFrameOptionsMiddleware method that determines the X-Frame-Options\", \"If the response has an xframe_options_exempt attribute set to False\", \"The X_FRAME_OPTIONS setting can be set to SAMEORIGIN to have the\", \"GZipMiddleware allows 304 Not Modified responses.\", \"GZipMiddleware makes a strong ETag weak.\", \"GZipMiddleware doesn't modify a weak ETag.\", \"Compression results are the same for the same content and don't\", \"Compression is performed on FileResponse.\", \"Compression is performed on responses with a status other than 200\", \"Compression is performed on responses with compressible content.\", \"Compression is performed on responses with streaming content.\", \"Compression is performed on responses with streaming Unicode content.\", \"Compression isn't performed on responses that are already compressed.\", \"Compression isn't performed on responses with incompressible content.\", \"Compression isn't performed on responses with short content.\", \"Disabling append slash functionality should leave slashless URLs alone.\", \"URLs with slashes should go unmolested.\", \"Paths starting with two slashes are escaped to prevent open redirects.\", \"While in debug mode, an exception is raised with a warning\", \"Views marked with @no_append_slash should be left alone.\", \"URLs which require quoting should be redirected to their slash version.\", \"APPEND_SLASH should redirect slashless URLs to a valid pattern.\", \"APPEND_SLASH should preserve querystrings when redirecting.\", \"APPEND_SLASH should append slash to path when redirecting a request\", \"Matches to explicit slashless URLs should go unmolested.\", \"APPEND_SLASH should not redirect to unknown resources.\", \"test_content_length_header_added (middleware.tests.CommonMiddlewareTest)\", \"test_content_length_header_not_added_for_streaming_response (middleware.tests.CommonMiddlewareTest)\", \"test_content_length_header_not_changed (middleware.tests.CommonMiddlewareTest)\", \"test_disallowed_user_agents (middleware.tests.CommonMiddlewareTest)\", \"Regression test for #15152\", \"test_prepend_www (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_have_slash (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_have_slash_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_slashless (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_append_slash_slashless_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_prepend_www_custom_urlconf (middleware.tests.CommonMiddlewareTest)\", \"test_response_redirect_class (middleware.tests.CommonMiddlewareTest)\", \"test_response_redirect_class_subclass (middleware.tests.CommonMiddlewareTest)\", \"test_etag_extended_cache_control (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_client_error (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_last_modified_in_the_future (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_last_modified_in_the_past (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_no_last_modified (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_redirect (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_modified_since_and_same_last_modified (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_client_error (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_different_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_no_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_redirect (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_if_none_match_and_same_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_middleware_calculates_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_middleware_wont_overwrite_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_etag_no_store_cache (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_etag_response_empty_content (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_etag_streaming_response (middleware.tests.ConditionalGetMiddlewareTest)\", \"ConditionalGetMiddleware shouldn't compute and return an ETag on a\", \"test_no_if_modified_since_and_last_modified (middleware.tests.ConditionalGetMiddlewareTest)\", \"test_no_if_none_match_and_etag (middleware.tests.ConditionalGetMiddlewareTest)\", \"ConditionalGetMiddleware shouldn't return a conditional response on an\", \"The 304 Not Modified response should include only the headers required\", \"test_404_error_reporting (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_404_error_reporting_ignored_url (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_404_error_reporting_no_referer (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_custom_request_checker (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"Some bots set the referer to the current URL to avoid being blocked by\", \"test_referer_equal_to_requested_url_on_another_domain (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_referer_equal_to_requested_url_without_trailing_slash_with_append_slash (middleware.tests.BrokenLinkEmailsMiddlewareTest)\", \"test_referer_equal_to_requested_url_without_trailing_slash_with_no_append_slash (middleware.tests.BrokenLinkEmailsMiddlewareTest)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.753006",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}