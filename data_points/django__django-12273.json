{
  "repo": "django/django",
  "instance_id": "django__django-12273",
  "base_commit": "927c903f3cd25c817c21738328b53991c035b415",
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -569,6 +569,9 @@ def _get_pk_val(self, meta=None):\n         return getattr(self, meta.pk.attname)\n \n     def _set_pk_val(self, value):\n+        for parent_link in self._meta.parents.values():\n+            if parent_link and parent_link != self._meta.pk:\n+                setattr(self, parent_link.target_field.attname, value)\n         return setattr(self, self._meta.pk.attname, value)\n \n     pk = property(_get_pk_val, _set_pk_val)\n",
  "test_patch": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -10,10 +10,11 @@\n \n from .models import (\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n-    DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n-    MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n-    Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n-    SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Congressman, DerivedM, InternalCertificationAudit, ItalianRestaurant,\n+    M2MChild, MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A,\n+    ParkingLot4B, Person, Place, Politician, Profile, QualityControl,\n+    Restaurant, SelfRefChild, SelfRefParent, Senator, Supplier, TrainStation,\n+    User, Wholesaler,\n )\n \n \n@@ -558,3 +559,31 @@ def test_id_field_update_on_ancestor_change(self):\n         italian_restaurant.restaurant_ptr = None\n         self.assertIsNone(italian_restaurant.pk)\n         self.assertIsNone(italian_restaurant.id)\n+\n+    def test_create_new_instance_with_pk_equals_none(self):\n+        p1 = Profile.objects.create(username='john')\n+        p2 = User.objects.get(pk=p1.user_ptr_id).profile\n+        # Create a new profile by setting pk = None.\n+        p2.pk = None\n+        p2.user_ptr_id = None\n+        p2.username = 'bill'\n+        p2.save()\n+        self.assertEqual(Profile.objects.count(), 2)\n+        self.assertEqual(User.objects.get(pk=p1.user_ptr_id).username, 'john')\n+\n+    def test_create_new_instance_with_pk_equals_none_multi_inheritance(self):\n+        c1 = Congressman.objects.create(state='PA', name='John', title='senator 1')\n+        c2 = Person.objects.get(pk=c1.pk).congressman\n+        # Create a new congressman by setting pk = None.\n+        c2.pk = None\n+        c2.id = None\n+        c2.politician_ptr_id = None\n+        c2.name = 'Bill'\n+        c2.title = 'senator 2'\n+        c2.save()\n+        self.assertEqual(Congressman.objects.count(), 2)\n+        self.assertEqual(Person.objects.get(pk=c1.pk).name, 'John')\n+        self.assertEqual(\n+            Politician.objects.get(pk=c1.politician_ptr_id).title,\n+            'senator 1',\n+        )\n",
  "problem_statement": "Resetting primary key for a child model doesn't work.\nDescription\n\t\nIn the attached example code setting the primary key to None does not work (so that the existing object is overwritten on save()).\nThe most important code fragments of the bug example:\nfrom django.db import models\nclass Item(models.Model):\n\t# uid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n\tuid = models.AutoField(primary_key=True, editable=False)\n\tf = models.BooleanField(default=False)\n\tdef reset(self):\n\t\tself.uid = None\n\t\tself.f = False\nclass Derived(Item):\n\tpass\nclass SaveTestCase(TestCase):\n\tdef setUp(self):\n\t\tself.derived = Derived.objects.create(f=True) # create the first object\n\t\titem = Item.objects.get(pk=self.derived.pk)\n\t\tobj1 = item.derived\n\t\tobj1.reset()\n\t\tobj1.save() # the first object is overwritten\n\tdef test_f_true(self):\n\t\tobj = Item.objects.get(pk=self.derived.pk)\n\t\tself.assertTrue(obj.f)\nDjango 2.1.2\n",
  "hints_text": "I'm not sure if this is a bug. The test passes after adding self.item_ptr = None to Item.reset(). Is that the behavior you're looking for?\nI agree with Tim here. It feels like what you're after is self.pk = None as it will be alias for self.item_ptr for Derived instances and self.uid for Item instances.\n@Simon Charette No self.pk = None does not work too. It seems that there is no reliable (not error-prone, as depending on the usage of base or derived class) way to do this :-(\nCan we consider that self.pk = None does not work too, as a bug? At least it is a counterintuitive (and dangerous for the data!) behavior.\nHello Victor, could you provide more details about what exactly you are trying to achieve here? So far you've only provided a test case that fails. Are you trying to create a copy of an existing objects using MTI? Providing more details about what you are trying to achieve and why you're expecting the test to pass would help us to determining if this is actually a bug. Does setting both self.uid and self.pk to None works? Thanks!\nReplying to Simon Charette: Hello Victor, could you provide more details about what exactly you are trying to achieve here? So far you've only provided a test case that fails. Are you trying to create a copy of an existing objects using MTI? Yes. I am trying to create a copy of an existing object using MTI. Providing more details about what you are trying to achieve and why you're expecting the test to pass would help us to determining if this is actually a bug. I am trying to create a copy of a Derived object which was in the DB long before. The copy should contain all fields of the Derived model and all fields of its base models. As for now, I do not know a reliable and not error-prone (such as depending on usage of base of derived class) way to do this. If there is no such way, it is a missing feature in Django and this should be considered at least as a feature suggestion. In my real code I may have several levels of inheritance (not just Item and Derived).\nThanks for the extra details Victor. Could you confirm that the following patch work for you when setting self.pk = None in reset(). diff --git a/django/db/models/base.py b/django/db/models/base.py index 751f42bb9b..535928ce05 100644 --- a/django/db/models/base.py +++ b/django/db/models/base.py @@ -553,7 +553,11 @@ class Model(metaclass=ModelBase): return getattr(self, meta.pk.attname) def _set_pk_val(self, value): - return setattr(self, self._meta.pk.attname, value) + field = self._meta.pk + setattr(self, field.attname, value) + while getattr(field, 'parent_link', False): + field = field.target_field + setattr(self, field.attname, value) pk = property(_get_pk_val, _set_pk_val) This code should make sure that setting self.pk = None does self.item_ptr_id = self.id = None for any level of concrete model inheritance. That should be enough for save() to create new objects from my local testing. FWIW this changes passes the full test suite on SQLite so it could be a tentative patch but it kind of break the symmetry with _get_pk. Something to keep in mind though is that right now pk = None assignment trick for object copying is neither documented or embraced by the Django documentation AFAIK.\nReplying to Simon Charette: Could you confirm that the following patch work for you when setting self.pk = None in reset(). No, the patch does not make self.pk = None to work! pip install django ... patch -p1 < ~/t/patch.diff cd /home/porton/Projects/test/testsave (env) testsave,0$ ./manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). F ====================================================================== FAIL: test_f_true (test1.tests.SaveTestCase) ---------------------------------------------------------------------- Traceback (most recent call last): File \"/home/porton/Projects/test/testsave/test1/tests.py\", line 19, in test_f_true self.assertTrue(obj.f) AssertionError: False is not true ---------------------------------------------------------------------- Ran 1 test in 0.005s FAILED (failures=1) Destroying test database for alias 'default'...\nThe following should do diff --git a/django/db/models/base.py b/django/db/models/base.py index 751f42bb9b..d3141d6180 100644 --- a/django/db/models/base.py +++ b/django/db/models/base.py @@ -553,6 +553,8 @@ class Model(metaclass=ModelBase): return getattr(self, meta.pk.attname) def _set_pk_val(self, value): + for parent_link in self._meta.parents.values(): + setattr(self, parent_link.target_field.attname, value) return setattr(self, self._meta.pk.attname, value) pk = property(_get_pk_val, _set_pk_val)\nReplying to Simon Charette: The following should do My test with this patch passed.\nReplying to Victor Porton: My test with this patch passed. When to expect it to be included in Django distribution?\nThe patch doesn't seem to work for child models that inherit from multiple models. It also created some other test failures. See my â€‹PR.\nWeird that didn't get these failures locally. Anyway this clearly need more work as it was an idea designed on the back of an envelope.",
  "created_at": "2020-01-03T18:47:56Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_create_new_instance_with_pk_equals_none (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_create_new_instance_with_pk_equals_none_multi_inheritance (model_inheritance_regress.tests.ModelInheritanceTest)\"]",
  "PASS_TO_PASS": "[\"test_abstract_base_class_m2m_relation_inheritance (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_abstract_verbose_name_plural_inheritance (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_all_fields_from_abstract_base_class (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_concrete_abstract_concrete_pk (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_filter_with_parent_fk (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_get_next_previous_by_date (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_id_field_update_on_ancestor_change (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_inheritance_joins (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_inheritance_resolve_columns (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_inheritance_select_related (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_inherited_fields (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_inherited_nullable_exclude (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_inherited_unique_field_with_form (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_issue_11764 (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_issue_21554 (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_issue_6755 (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_issue_7105 (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_issue_7276 (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_issue_7488 (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_issue_7853 (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_model_inheritance (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_ptr_accessor_assigns_state (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_queries_on_parent_access (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_queryset_update_on_parent_model (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_related_filtering_query_efficiency_ticket_15844 (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_use_explicit_o2o_to_parent_as_pk (model_inheritance_regress.tests.ModelInheritanceTest)\", \"test_use_explicit_o2o_to_parent_from_abstract_model (model_inheritance_regress.tests.ModelInheritanceTest)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.619932",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}