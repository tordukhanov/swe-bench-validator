{
  "repo": "django/django",
  "instance_id": "django__django-12910",
  "base_commit": "a4e6030904df63b3f10aa0729b86dc6942b0458e",
  "patch": "diff --git a/django/contrib/auth/management/commands/changepassword.py b/django/contrib/auth/management/commands/changepassword.py\n--- a/django/contrib/auth/management/commands/changepassword.py\n+++ b/django/contrib/auth/management/commands/changepassword.py\n@@ -12,7 +12,7 @@\n class Command(BaseCommand):\n     help = \"Change a user's password for django.contrib.auth.\"\n     requires_migrations_checks = True\n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def _get_pass(self, prompt=\"Password: \"):\n         p = getpass.getpass(prompt=prompt)\ndiff --git a/django/contrib/gis/management/commands/ogrinspect.py b/django/contrib/gis/management/commands/ogrinspect.py\n--- a/django/contrib/gis/management/commands/ogrinspect.py\n+++ b/django/contrib/gis/management/commands/ogrinspect.py\n@@ -37,7 +37,7 @@ class Command(BaseCommand):\n         ' ./manage.py ogrinspect zipcode.shp Zipcode'\n     )\n \n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def add_arguments(self, parser):\n         parser.add_argument('data_source', help='Path to the data source.')\ndiff --git a/django/contrib/staticfiles/management/commands/collectstatic.py b/django/contrib/staticfiles/management/commands/collectstatic.py\n--- a/django/contrib/staticfiles/management/commands/collectstatic.py\n+++ b/django/contrib/staticfiles/management/commands/collectstatic.py\n@@ -16,7 +16,7 @@ class Command(BaseCommand):\n     settings.STATIC_ROOT.\n     \"\"\"\n     help = \"Collect static files in a single location.\"\n-    requires_system_checks = False\n+    requires_system_checks = [Tags.staticfiles]\n \n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n@@ -36,10 +36,6 @@ def local(self):\n         return True\n \n     def add_arguments(self, parser):\n-        parser.add_argument(\n-            '--skip-checks', action='store_true',\n-            help='Skip system checks.',\n-        )\n         parser.add_argument(\n             '--noinput', '--no-input', action='store_false', dest='interactive',\n             help=\"Do NOT prompt the user for input of any kind.\",\n@@ -151,9 +147,6 @@ def collect(self):\n \n     def handle(self, **options):\n         self.set_options(**options)\n-        if not options['skip_checks']:\n-            self.check(tags=[Tags.staticfiles])\n-\n         message = ['\\n']\n         if self.dry_run:\n             message.append(\ndiff --git a/django/core/management/base.py b/django/core/management/base.py\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -4,6 +4,7 @@\n \"\"\"\n import os\n import sys\n+import warnings\n from argparse import ArgumentParser, HelpFormatter\n from io import TextIOBase\n \n@@ -12,6 +13,9 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.core.management.color import color_style, no_style\n from django.db import DEFAULT_DB_ALIAS, connections\n+from django.utils.deprecation import RemovedInDjango41Warning\n+\n+ALL_CHECKS = '__all__'\n \n \n class CommandError(Exception):\n@@ -203,8 +207,11 @@ class BaseCommand:\n         migrations on disk don't match the migrations in the database.\n \n     ``requires_system_checks``\n-        A boolean; if ``True``, entire Django project will be checked for errors\n-        prior to executing the command. Default value is ``True``.\n+        A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System\n+        checks registered in the chosen tags will be checked for errors prior\n+        to executing the command. The value '__all__' can be used to specify\n+        that all system checks should be performed. Default value is '__all__'.\n+\n         To validate an individual application's models\n         rather than all applications' models, call\n         ``self.check(app_configs)`` from ``handle()``, where ``app_configs``\n@@ -222,7 +229,7 @@ class BaseCommand:\n     _called_from_command_line = False\n     output_transaction = False  # Whether to wrap the output in a \"BEGIN; COMMIT;\"\n     requires_migrations_checks = False\n-    requires_system_checks = True\n+    requires_system_checks = '__all__'\n     # Arguments, common to all commands, which aren't defined by the argument\n     # parser.\n     base_stealth_options = ('stderr', 'stdout')\n@@ -239,6 +246,19 @@ def __init__(self, stdout=None, stderr=None, no_color=False, force_color=False):\n         else:\n             self.style = color_style(force_color)\n             self.stderr.style_func = self.style.ERROR\n+        if self.requires_system_checks in [False, True]:\n+            warnings.warn(\n+                \"Using a boolean value for requires_system_checks is \"\n+                \"deprecated. Use '__all__' instead of True, and [] (an empty \"\n+                \"list) instead of False.\",\n+                RemovedInDjango41Warning,\n+            )\n+            self.requires_system_checks = ALL_CHECKS if self.requires_system_checks else []\n+        if (\n+            not isinstance(self.requires_system_checks, (list, tuple)) and\n+            self.requires_system_checks != ALL_CHECKS\n+        ):\n+            raise TypeError('requires_system_checks must be a list or tuple.')\n \n     def get_version(self):\n         \"\"\"\n@@ -365,7 +385,10 @@ def execute(self, *args, **options):\n             self.stderr = OutputWrapper(options['stderr'])\n \n         if self.requires_system_checks and not options['skip_checks']:\n-            self.check()\n+            if self.requires_system_checks == ALL_CHECKS:\n+                self.check()\n+            else:\n+                self.check(tags=self.requires_system_checks)\n         if self.requires_migrations_checks:\n             self.check_migrations()\n         output = self.handle(*args, **options)\ndiff --git a/django/core/management/commands/check.py b/django/core/management/commands/check.py\n--- a/django/core/management/commands/check.py\n+++ b/django/core/management/commands/check.py\n@@ -7,7 +7,7 @@\n class Command(BaseCommand):\n     help = \"Checks the entire Django project for potential problems.\"\n \n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def add_arguments(self, parser):\n         parser.add_argument('args', metavar='app_label', nargs='*')\ndiff --git a/django/core/management/commands/compilemessages.py b/django/core/management/commands/compilemessages.py\n--- a/django/core/management/commands/compilemessages.py\n+++ b/django/core/management/commands/compilemessages.py\n@@ -29,7 +29,7 @@ def is_writable(path):\n class Command(BaseCommand):\n     help = 'Compiles .po files to .mo files for use with builtin gettext support.'\n \n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     program = 'msgfmt'\n     program_options = ['--check-format']\ndiff --git a/django/core/management/commands/createcachetable.py b/django/core/management/commands/createcachetable.py\n--- a/django/core/management/commands/createcachetable.py\n+++ b/django/core/management/commands/createcachetable.py\n@@ -10,7 +10,7 @@\n class Command(BaseCommand):\n     help = \"Creates the tables needed to use the SQL cache backend.\"\n \n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def add_arguments(self, parser):\n         parser.add_argument(\ndiff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -10,7 +10,7 @@ class Command(BaseCommand):\n         \"default database if none is provided.\"\n     )\n \n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def add_arguments(self, parser):\n         parser.add_argument(\ndiff --git a/django/core/management/commands/diffsettings.py b/django/core/management/commands/diffsettings.py\n--- a/django/core/management/commands/diffsettings.py\n+++ b/django/core/management/commands/diffsettings.py\n@@ -10,7 +10,7 @@ class Command(BaseCommand):\n     help = \"\"\"Displays differences between the current settings.py and Django's\n     default settings.\"\"\"\n \n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def add_arguments(self, parser):\n         parser.add_argument(\ndiff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -8,7 +8,7 @@\n \n class Command(BaseCommand):\n     help = \"Introspects the database tables in the given database and outputs a Django model module.\"\n-    requires_system_checks = False\n+    requires_system_checks = []\n     stealth_options = ('table_name_filter',)\n     db_module = 'django.db'\n \ndiff --git a/django/core/management/commands/makemessages.py b/django/core/management/commands/makemessages.py\n--- a/django/core/management/commands/makemessages.py\n+++ b/django/core/management/commands/makemessages.py\n@@ -206,7 +206,7 @@ class Command(BaseCommand):\n     translatable_file_class = TranslatableFile\n     build_file_class = BuildFile\n \n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     msgmerge_options = ['-q', '--previous']\n     msguniq_options = ['--to-code=utf-8']\ndiff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -20,7 +20,7 @@\n \n class Command(BaseCommand):\n     help = \"Updates database schema. Manages both apps with migrations and those without.\"\n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def add_arguments(self, parser):\n         parser.add_argument(\ndiff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -25,7 +25,7 @@ class Command(BaseCommand):\n     help = \"Starts a lightweight Web server for development.\"\n \n     # Validation is called explicitly each time the server is reloaded.\n-    requires_system_checks = False\n+    requires_system_checks = []\n     stealth_options = ('shutdown_message',)\n \n     default_addr = '127.0.0.1'\ndiff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -14,7 +14,7 @@ class Command(BaseCommand):\n         \"as code.\"\n     )\n \n-    requires_system_checks = False\n+    requires_system_checks = []\n     shells = ['ipython', 'bpython', 'python']\n \n     def add_arguments(self, parser):\ndiff --git a/django/core/management/commands/testserver.py b/django/core/management/commands/testserver.py\n--- a/django/core/management/commands/testserver.py\n+++ b/django/core/management/commands/testserver.py\n@@ -6,7 +6,7 @@\n class Command(BaseCommand):\n     help = 'Runs a development server with data from the given fixture(s).'\n \n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def add_arguments(self, parser):\n         parser.add_argument(\ndiff --git a/django/core/management/templates.py b/django/core/management/templates.py\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -28,7 +28,7 @@ class TemplateCommand(BaseCommand):\n     :param directory: The directory to which the template should be copied.\n     :param options: The additional variables passed to project or app templates\n     \"\"\"\n-    requires_system_checks = False\n+    requires_system_checks = []\n     # The supported URL schemes\n     url_schemes = ['http', 'https', 'ftp']\n     # Rewrite the following suffixes when determining the target filename.\n",
  "test_patch": "diff --git a/django/core/management/commands/test.py b/django/core/management/commands/test.py\n--- a/django/core/management/commands/test.py\n+++ b/django/core/management/commands/test.py\n@@ -10,7 +10,7 @@ class Command(BaseCommand):\n     help = 'Discover and run tests in the specified modules or the current directory.'\n \n     # DiscoverRunner runs the checks after databases are set up.\n-    requires_system_checks = False\n+    requires_system_checks = []\n     test_runner = None\n \n     def run_from_argv(self, argv):\ndiff --git a/tests/admin_scripts/management/commands/app_command.py b/tests/admin_scripts/management/commands/app_command.py\n--- a/tests/admin_scripts/management/commands/app_command.py\n+++ b/tests/admin_scripts/management/commands/app_command.py\n@@ -3,7 +3,7 @@\n \n class Command(AppCommand):\n     help = 'Test Application-based commands'\n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def handle_app_config(self, app_config, **options):\n         print('EXECUTE:AppCommand name=%s, options=%s' % (app_config.name, sorted(options.items())))\ndiff --git a/tests/admin_scripts/management/commands/base_command.py b/tests/admin_scripts/management/commands/base_command.py\n--- a/tests/admin_scripts/management/commands/base_command.py\n+++ b/tests/admin_scripts/management/commands/base_command.py\n@@ -3,7 +3,7 @@\n \n class Command(BaseCommand):\n     help = 'Test basic commands'\n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def add_arguments(self, parser):\n         parser.add_argument('args', nargs='*')\ndiff --git a/tests/admin_scripts/management/commands/label_command.py b/tests/admin_scripts/management/commands/label_command.py\n--- a/tests/admin_scripts/management/commands/label_command.py\n+++ b/tests/admin_scripts/management/commands/label_command.py\n@@ -3,7 +3,7 @@\n \n class Command(LabelCommand):\n     help = \"Test Label-based commands\"\n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def handle_label(self, label, **options):\n         print('EXECUTE:LabelCommand label=%s, options=%s' % (label, sorted(options.items())))\ndiff --git a/tests/admin_scripts/management/commands/noargs_command.py b/tests/admin_scripts/management/commands/noargs_command.py\n--- a/tests/admin_scripts/management/commands/noargs_command.py\n+++ b/tests/admin_scripts/management/commands/noargs_command.py\n@@ -3,7 +3,7 @@\n \n class Command(BaseCommand):\n     help = \"Test No-args commands\"\n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def handle(self, **options):\n         print('EXECUTE: noargs_command options=%s' % sorted(options.items()))\ndiff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1395,7 +1395,7 @@ def test_params_to_runserver(self, mock_runserver_handle, mock_loaddata_handle,\n # the commands are correctly parsed and processed.\n ##########################################################################\n class ColorCommand(BaseCommand):\n-    requires_system_checks = False\n+    requires_system_checks = []\n \n     def handle(self, *args, **options):\n         self.stdout.write('Hello, world!', self.style.ERROR)\n@@ -1541,7 +1541,7 @@ def test_no_color_force_color_mutually_exclusive_command_init(self):\n \n     def test_custom_stdout(self):\n         class Command(BaseCommand):\n-            requires_system_checks = False\n+            requires_system_checks = []\n \n             def handle(self, *args, **options):\n                 self.stdout.write(\"Hello, World!\")\n@@ -1558,7 +1558,7 @@ def handle(self, *args, **options):\n \n     def test_custom_stderr(self):\n         class Command(BaseCommand):\n-            requires_system_checks = False\n+            requires_system_checks = []\n \n             def handle(self, *args, **options):\n                 self.stderr.write(\"Hello, World!\")\ndiff --git a/tests/user_commands/management/commands/dance.py b/tests/user_commands/management/commands/dance.py\n--- a/tests/user_commands/management/commands/dance.py\n+++ b/tests/user_commands/management/commands/dance.py\n@@ -4,7 +4,7 @@\n class Command(BaseCommand):\n     help = \"Dance around like a madman.\"\n     args = ''\n-    requires_system_checks = True\n+    requires_system_checks = '__all__'\n \n     def add_arguments(self, parser):\n         parser.add_argument(\"integer\", nargs='?', type=int, default=0)\ndiff --git a/tests/user_commands/management/commands/no_system_checks.py b/tests/user_commands/management/commands/no_system_checks.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/user_commands/management/commands/no_system_checks.py\n@@ -0,0 +1,8 @@\n+from django.core.management.base import BaseCommand\n+\n+\n+class Command(BaseCommand):\n+    requires_system_checks = []\n+\n+    def handle(self, *args, **options):\n+        pass\ndiff --git a/tests/user_commands/management/commands/specific_system_checks.py b/tests/user_commands/management/commands/specific_system_checks.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/user_commands/management/commands/specific_system_checks.py\n@@ -0,0 +1,9 @@\n+from django.core.checks import Tags\n+from django.core.management.base import BaseCommand\n+\n+\n+class Command(BaseCommand):\n+    requires_system_checks = [Tags.staticfiles, Tags.models]\n+\n+    def handle(self, *args, **options):\n+        pass\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -6,6 +6,7 @@\n \n from django.apps import apps\n from django.core import management\n+from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n from django.core.management.utils import (\n     find_command, get_random_secret_key, is_ignored_path,\n@@ -13,8 +14,9 @@\n )\n from django.db import connection\n from django.test import SimpleTestCase, override_settings\n-from django.test.utils import captured_stderr, extend_sys_path\n+from django.test.utils import captured_stderr, extend_sys_path, ignore_warnings\n from django.utils import translation\n+from django.utils.deprecation import RemovedInDjango41Warning\n from django.utils.version import PY37\n \n from .management.commands import dance\n@@ -59,13 +61,13 @@ def test_system_exit(self):\n         with self.assertRaises(CommandError) as cm:\n             management.call_command('dance', example=\"raise\")\n         self.assertEqual(cm.exception.returncode, 3)\n-        dance.Command.requires_system_checks = False\n+        dance.Command.requires_system_checks = []\n         try:\n             with captured_stderr() as stderr, self.assertRaises(SystemExit) as cm:\n                 management.ManagementUtility(['manage.py', 'dance', '--example=raise']).execute()\n             self.assertEqual(cm.exception.code, 3)\n         finally:\n-            dance.Command.requires_system_checks = True\n+            dance.Command.requires_system_checks = '__all__'\n         self.assertIn(\"CommandError\", stderr.getvalue())\n \n     def test_no_translations_deactivate_translations(self):\n@@ -155,6 +157,7 @@ def test_call_command_no_checks(self):\n \n         def patched_check(self_, **kwargs):\n             self.counter += 1\n+            self.kwargs = kwargs\n \n         saved_check = BaseCommand.check\n         BaseCommand.check = patched_check\n@@ -163,9 +166,28 @@ def patched_check(self_, **kwargs):\n             self.assertEqual(self.counter, 0)\n             management.call_command(\"dance\", verbosity=0, skip_checks=False)\n             self.assertEqual(self.counter, 1)\n+            self.assertEqual(self.kwargs, {})\n         finally:\n             BaseCommand.check = saved_check\n \n+    def test_requires_system_checks_empty(self):\n+        with mock.patch('django.core.management.base.BaseCommand.check') as mocked_check:\n+            management.call_command('no_system_checks')\n+        self.assertIs(mocked_check.called, False)\n+\n+    def test_requires_system_checks_specific(self):\n+        with mock.patch('django.core.management.base.BaseCommand.check') as mocked_check:\n+            management.call_command('specific_system_checks')\n+        mocked_check.called_once_with(tags=[Tags.staticfiles, Tags.models])\n+\n+    def test_requires_system_checks_invalid(self):\n+        class Command(BaseCommand):\n+            requires_system_checks = 'x'\n+\n+        msg = 'requires_system_checks must be a list or tuple.'\n+        with self.assertRaisesMessage(TypeError, msg):\n+            Command()\n+\n     def test_check_migrations(self):\n         requires_migrations_checks = dance.Command.requires_migrations_checks\n         self.assertIs(requires_migrations_checks, False)\n@@ -334,3 +356,45 @@ def test_is_ignored_path_false(self):\n     def test_normalize_path_patterns_truncates_wildcard_base(self):\n         expected = [os.path.normcase(p) for p in ['foo/bar', 'bar/*/']]\n         self.assertEqual(normalize_path_patterns(['foo/bar/*', 'bar/*/']), expected)\n+\n+\n+class DeprecationTests(SimpleTestCase):\n+    def test_requires_system_checks_warning(self):\n+        class Command(BaseCommand):\n+            pass\n+\n+        msg = (\n+            \"Using a boolean value for requires_system_checks is deprecated. \"\n+            \"Use '__all__' instead of True, and [] (an empty list) instead of \"\n+            \"False.\"\n+        )\n+        for value in [False, True]:\n+            Command.requires_system_checks = value\n+            with self.assertRaisesMessage(RemovedInDjango41Warning, msg):\n+                Command()\n+\n+    @ignore_warnings(category=RemovedInDjango41Warning)\n+    def test_requires_system_checks_true(self):\n+        class Command(BaseCommand):\n+            requires_system_checks = True\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        with mock.patch('django.core.management.base.BaseCommand.check') as mocked_check:\n+            management.call_command(command, skip_checks=False)\n+        mocked_check.assert_called_once_with()\n+\n+    @ignore_warnings(category=RemovedInDjango41Warning)\n+    def test_requires_system_checks_false(self):\n+        class Command(BaseCommand):\n+            requires_system_checks = False\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        with mock.patch('django.core.management.base.BaseCommand.check') as mocked_check:\n+            management.call_command(command)\n+        self.assertIs(mocked_check.called, False)\n",
  "problem_statement": "Replace Command.requires_system_checks = True by something like Command.required_system_checks = '__all__'\nDescription\n\t\nCreated based on Simon ​comment on the PR\nThis makes me wonder if we want to replace Command.requires_system_checks = True by something like Command.required_system_checks = '__all__' that can be set to an empty list to achieve required_system_checks = False and allow subclasses that want only a subset to specify tags through it e.g. required_system_checks = ['staticfiles']. That would prevent having do to the manual and error prone options['skip_checks'] dance. In all cases that should be done in a different PR.\n",
  "hints_text": "OK, accepting based on the discussion on the PR. Thanks!",
  "created_at": "2020-05-13T22:02:49Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_requires_system_checks_warning (user_commands.tests.DeprecationTests)\", \"test_requires_system_checks_invalid (user_commands.tests.CommandTests)\"]",
  "PASS_TO_PASS": "[\"test_requires_system_checks_false (user_commands.tests.DeprecationTests)\", \"test_requires_system_checks_true (user_commands.tests.DeprecationTests)\", \"test_get_random_secret_key (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests)\", \"test_params_to_runserver (admin_scripts.tests.ManageTestserver)\", \"test_testserver_handle_params (admin_scripts.tests.ManageTestserver)\", \"test_no_database (admin_scripts.tests.ManageRunserver)\", \"test_readonly_database (admin_scripts.tests.ManageRunserver)\", \"test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_ambiguous (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runserver_addrport (admin_scripts.tests.ManageRunserver)\", \"test_precedence (admin_scripts.tests.Discovery)\", \"test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_call_command_no_checks (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing (user_commands.tests.CommandTests)\", \"test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests)\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)\", \"test_check_migrations (user_commands.tests.CommandTests)\", \"test_command (user_commands.tests.CommandTests)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests)\", \"test_command_style (user_commands.tests.CommandTests)\", \"BaseCommand.create_parser() passes kwargs to CommandParser.\", \"test_discover_commands_in_eggs (user_commands.tests.CommandTests)\", \"An unknown command raises CommandError\", \"test_find_command_without_PATH (user_commands.tests.CommandTests)\", \"test_language_preserved (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests)\", \"test_no_translations_deactivate_translations (user_commands.tests.CommandTests)\", \"test_output_transaction (user_commands.tests.CommandTests)\", \"test_requires_system_checks_empty (user_commands.tests.CommandTests)\", \"test_requires_system_checks_specific (user_commands.tests.CommandTests)\", \"test_subparser (user_commands.tests.CommandTests)\", \"test_subparser_dest_args (user_commands.tests.CommandTests)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests)\", \"Exception raised in a command should raise CommandError with\", \"test_program_name_in_help (admin_scripts.tests.MainModule)\", \"test_non_existent_command_output (admin_scripts.tests.ManageManuallyConfiguredSettings)\", \"test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)\", \"Regression for #20509\", \"no settings: manage.py builtin commands fail with an error when no settings provided\", \"no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"no settings: django-admin builtin commands fail with an error when no settings provided\", \"no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"\\\"\", \"test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"test_disallowed_abbreviated_options (user_commands.tests.CommandRunTests)\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)\", \"test_skip_checks (user_commands.tests.CommandRunTests)\", \"Options passed before settings are correctly handled.\", \"Options are correctly handled when they are passed before and after\", \"Options passed after settings are correctly handled.\", \"Short options passed after settings are correctly handled.\", \"Short options passed before settings are correctly handled.\", \"fulldefault: django-admin builtin commands fail with an error when no settings provided\", \"fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"fulldefault: django-admin builtin commands succeed if the environment contains settings\", \"fulldefault: django-admin builtin commands succeed if a settings file is provided\", \"fulldefault: django-admin can't execute user commands unless settings are provided\", \"fulldefault: django-admin can execute user commands if settings are provided in environment\", \"fulldefault: django-admin can execute user commands if settings are provided as argument\", \"test_importable_name (admin_scripts.tests.StartApp)\", \"test_importable_target_name (admin_scripts.tests.StartApp)\", \"startapp validates that app name is a valid Python identifier.\", \"test_invalid_target_name (admin_scripts.tests.StartApp)\", \"test_overlaying_app (admin_scripts.tests.StartApp)\", \"alternate: django-admin builtin commands fail with an error when no settings provided\", \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: django-admin builtin commands succeed if settings are provided in the environment\", \"alternate: django-admin builtin commands succeed if settings are provided as argument\", \"alternate: django-admin can't execute user commands unless settings are provided\", \"alternate: django-admin can execute user commands if settings are provided in environment\", \"alternate: django-admin can execute user commands if settings are provided as argument\", \"minimal: django-admin builtin commands fail with an error when no settings provided\", \"minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: django-admin builtin commands fail if settings are provided in the environment\", \"minimal: django-admin builtin commands fail if settings are provided as argument\", \"minimal: django-admin can't execute user commands unless settings are provided\", \"minimal: django-admin can't execute user commands, even if settings are provided in environment\", \"minimal: django-admin can't execute user commands, even if settings are provided as argument\", \"default: django-admin builtin commands fail with an error when no settings provided\", \"default: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"default: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"default: django-admin builtin commands succeed if settings are provided in the environment\", \"default: django-admin builtin commands succeed if settings are provided as argument\", \"default: django-admin can't execute user commands if it isn't provided settings\", \"default: django-admin can execute user commands if settings are provided in environment\", \"default: django-admin can execute user commands if settings are provided as argument\", \"manage.py check does not raise errors when an app imports a base\", \"manage.py check reports an ImportError if an app's models.py\", \"manage.py check does not raise an ImportError validating a\", \"check reports an error on a nonexistent app in INSTALLED_APPS.\", \"All errors/warnings should be sorted by level and by message.\", \"test_warning_does_not_halt (admin_scripts.tests.ManageCheck)\", \"directory: django-admin builtin commands fail with an error when no settings provided\", \"directory: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"directory: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"directory: django-admin builtin commands succeed if settings are provided in the environment\", \"directory: django-admin builtin commands succeed if settings are provided as argument\", \"directory: django-admin can't execute user commands unless settings are provided\", \"directory: startapp creates the correct directory\", \"directory: startapp creates the correct directory with a custom template\", \"multiple: manage.py builtin commands fail with an error when no settings provided\", \"multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"multiple: manage.py can execute builtin commands if settings are provided in the environment\", \"multiple: manage.py builtin commands succeed if settings are provided as argument\", \"multiple: manage.py can't execute user commands using default settings\", \"multiple: manage.py can execute user commands if settings are provided in environment\", \"multiple: manage.py can execute user commands if settings are provided as argument\", \"fulldefault: manage.py builtin commands succeed when default settings are appropriate\", \"fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings are provided in the environment\", \"fulldefault: manage.py builtin commands succeed if settings are provided as argument\", \"fulldefault: manage.py can execute user commands when default settings are appropriate\", \"fulldefault: manage.py can execute user commands when settings are provided in environment\", \"fulldefault: manage.py can execute user commands when settings are provided as argument\", \"minimal: manage.py builtin commands fail with an error when no settings provided\", \"minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: manage.py builtin commands fail if settings are provided in the environment\", \"minimal: manage.py builtin commands fail if settings are provided as argument\", \"minimal: manage.py can't execute user commands without appropriate settings\", \"minimal: manage.py can't execute user commands, even if settings are provided in environment\", \"minimal: manage.py can't execute user commands, even if settings are provided as argument\", \"default: manage.py builtin commands succeed when default settings are appropriate\", \"default: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"default: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"default: manage.py builtin commands succeed if settings are provided in the environment\", \"default: manage.py builtin commands succeed if settings are provided as argument\", \"default: manage.py can execute user commands when default settings are appropriate\", \"default: manage.py can execute user commands when settings are provided in environment\", \"default: manage.py can execute user commands when settings are provided as argument\", \"alternate: manage.py builtin commands fail with an error when no default settings provided\", \"alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: manage.py builtin commands work if settings are provided in the environment\", \"alternate: manage.py builtin commands work with settings provided as argument\", \"alternate: manage.py can't execute user commands without settings\", \"alternate: manage.py output syntax color can be deactivated with the `--no-color` option\", \"alternate: manage.py can execute user commands if settings are provided in environment\", \"alternate: manage.py can execute user commands if settings are provided as argument\", \"Runs without error and emits settings diff.\", \"test_custom_default (admin_scripts.tests.DiffSettings)\", \"test_dynamic_settings_configured (admin_scripts.tests.DiffSettings)\", \"test_settings_configured (admin_scripts.tests.DiffSettings)\", \"--output=unified emits settings diff in unified mode.\", \"test_custom_project_destination_missing (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to use a different project template\", \"Make sure template context variables are rendered with proper values\", \"Make sure the startproject management command is able to use a different project template from a tarball\", \"test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)\", \"Startproject can use a project template from a tarball and create it in a specified location\", \"test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command is able to render custom files\", \"test_importable_project_name (admin_scripts.tests.StartProject)\", \"Make sure the startproject management command validates a project name\", \"Make sure template context variables are not html escaped\", \"Startproject management command handles project template tar/zip balls from non-canonical urls\", \"Make sure the startproject management command creates a project\", \"Make sure the startproject management command creates a project in a specific directory\", \"Ticket 17475: Template dir passed has a trailing path separator\", \"Make sure passing the wrong kinds of arguments outputs an error and prints usage\", \"User AppCommands can execute when a single app name is provided\", \"User AppCommands raise an error when multiple app names are provided\", \"User AppCommands raise an error when no app name is provided\", \"User AppCommands can execute when some of the provided app names are invalid\", \"User BaseCommands can execute when a label is provided\", \"User BaseCommands can execute when no labels are provided\", \"User BaseCommands can execute with options when a label is provided\", \"User BaseCommands can execute with multiple options when a label is provided\", \"User BaseCommands outputs command usage when wrong option is specified\", \"test_base_run_from_argv (admin_scripts.tests.CommandTypes)\", \"test_color_style (admin_scripts.tests.CommandTypes)\", \"test_command_color (admin_scripts.tests.CommandTypes)\", \"--no-color prevent colorization of the output\", \"test_custom_stderr (admin_scripts.tests.CommandTypes)\", \"test_custom_stdout (admin_scripts.tests.CommandTypes)\", \"test_force_color_command_init (admin_scripts.tests.CommandTypes)\", \"test_force_color_execute (admin_scripts.tests.CommandTypes)\", \"help is handled as a special case\", \"--help is equivalent to help\", \"help --commands shows the list of all available commands\", \"-h is handled as a short form of --help\", \"User LabelCommands can execute when a label is provided\", \"User LabelCommands are executed multiple times if multiple labels are provided\", \"User LabelCommands raise an error if no label is provided\", \"test_no_color_force_color_mutually_exclusive_command_init (admin_scripts.tests.CommandTypes)\", \"test_no_color_force_color_mutually_exclusive_execute (admin_scripts.tests.CommandTypes)\", \"NoArg Commands can be executed\", \"NoArg Commands raise an error if an argument is provided\", \"test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)\", \"test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)\", \"--help can be used on a specific command\", \"version is handled as a special case\", \"--version is equivalent to version\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.637981",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}