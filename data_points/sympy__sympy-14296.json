{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14296",
  "base_commit": "82bf1d76747b3d309fba5079a16a4e3183fc21fd",
  "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -2387,10 +2387,6 @@ def __new__(cls, expr, coeffs=None, alias=None, **args):\n             rep = DMP.from_list([1, 0], 0, dom)\n             scoeffs = Tuple(1, 0)\n \n-            if root.is_negative:\n-                rep = -rep\n-                scoeffs = Tuple(-1, 0)\n-\n         sargs = (root, scoeffs)\n \n         if alias is not None:\n",
  "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -582,6 +582,15 @@ def test_Float_issue_2107():\n     assert S.Zero + b + (-b) == 0\n \n \n+def test_issue_14289():\n+    from sympy.polys.numberfields import to_number_field\n+\n+    a = 1 - sqrt(2)\n+    b = to_number_field(a)\n+    assert b.as_expr() == a\n+    assert b.minpoly(a).expand() == 0\n+\n+\n def test_Float_from_tuple():\n     a = Float((0, '1L', 0, 1))\n     b = Float((0, '1', 0, 1))\ndiff --git a/sympy/polys/tests/test_numberfields.py b/sympy/polys/tests/test_numberfields.py\n--- a/sympy/polys/tests/test_numberfields.py\n+++ b/sympy/polys/tests/test_numberfields.py\n@@ -591,7 +591,7 @@ def test_AlgebraicNumber():\n     assert a.is_aliased is False\n \n     assert AlgebraicNumber( sqrt(3)).rep == DMP([ QQ(1), QQ(0)], QQ)\n-    assert AlgebraicNumber(-sqrt(3)).rep == DMP([-QQ(1), QQ(0)], QQ)\n+    assert AlgebraicNumber(-sqrt(3)).rep == DMP([ QQ(1), QQ(0)], QQ)\n \n     a = AlgebraicNumber(sqrt(2))\n     b = AlgebraicNumber(sqrt(2))\n",
  "problem_statement": "Sign of generator of an algebraic numberfield\n`AlgebraicField` calls [`to_number_field`](https://github.com/sympy/sympy/blob/master/sympy/polys/domains/algebraicfield.py#L33) in order to create an `AlgebraicNumber` generating the extension field. This number is chosen positive in some cases where the sign can be determined.  This choice is currently implemented, at least in part, when the algebraic number is [created](https://github.com/sympy/sympy/blob/master/sympy/core/numbers.py#L2390), but the implementation is defective as it does not change the minimal polynomial.\r\n```\r\n>>> b = 1 - sqrt(2)\r\n>>> a = to_number_field(b)\r\n>>> a\r\n-1 + sqrt(2)  # positive generator created\r\n>>> minimal_polynomial(b)\r\n_x**2 - 2*_x - 1  # this is correct\r\n>>> minimal_polynomial(a)\r\n_x**2 - 2*_x - 1  # but this is wrong, apparently copied from a.minpoly\r\n>>> a.minpoly\r\nPurePoly(_x**2 - 2*_x - 1, _x, domain='QQ')\r\n>>> minimal_polynomial(-1 + sqrt(2))\r\n_x**2 + 2*_x - 1  # this is the correct minimal polynomial of a\r\n```\r\nI think this could be fixed in two ways:\r\n* Add code to create the changed minimal polynomial.\r\n* Ignore the sign and remove the code changing it.\r\n\r\nI am inclined to prefer the latter, simpler solution, but I would also like to hear other suggestions.\n",
  "hints_text": "In the Diofant:\r\n```python\r\nn [11]: b = 1 - sqrt(2)\r\n\r\nIn [12]: a = to_number_field(b)\r\n\r\nIn [13]: a.root\r\nOut[13]: \r\n    ___    \r\n- ╲╱ 2  + 1\r\n\r\nIn [14]: a.minpoly\r\nOut[14]: PurePoly(_x**2 - 2*_x - 1, _x, domain='ZZ')\r\n\r\nIn [15]: a.coeffs()\r\nOut[15]: [1, 0]\r\n```\r\nI think, that's correct.  C.f. with Sympy:\r\n```\r\nIn [7]: b = 1 - sqrt(2)\r\n\r\nIn [8]: a = to_number_field(b)\r\n\r\nIn [9]: a\r\nOut[9]: -1 + √2\r\n\r\nIn [10]: a.root\r\nOut[10]: -√2 + 1\r\n\r\nIn [11]: a.coeffs()\r\nOut[11]: [-1, 0]\r\n\r\nIn [12]: a.minpoly\r\nOut[12]: PurePoly(_x**2 - 2*_x - 1, _x, domain='QQ')\r\n```\nThat looks like the sign change was removed? I think that the sign should be the ignored in SymPy as well.\nI don't know in deep but yes. I think the sign should be ignored(but maybe this property is used somewhere) as the number must retain its original sign.\r\n\r\nwell I found\r\n```\r\n>>> a.args\r\n(-sqrt(2) + 1, (-1, 0))\r\n```\r\nand as done [here](https://github.com/sympy/sympy/blob/master/sympy/core/numbers.py#L2406) the `minpoly` of `obj` (`a` here) is `minimal_polynomial` of `b`.\r\n\r\nWe can also check type of `a` [here](https://github.com/sympy/sympy/blob/master/sympy/polys/numberfields.py#L640) and then return the minimal polynomial of `a.args[0]*a.args[1][0]`.\r\n```\r\n>>> minimal_polynomial(a.args[0]*a.args[1][0])\r\n_x**2 + 2*_x - 1\r\n```\n> That looks like the sign change was removed?\r\n\r\n@jksuom, apparently so.\r\n\r\n> We can also check type of a here and then return the minimal polynomial of a.args[0]*a.args[1][0]\r\n\r\nGreat idea!  But why not ``a.args[0]*a.args[1][42]``?\n`a.args[1]` has only two index 0 and 1. `a.args[1][0]` will be 1 for positive root and -1 for negative root.([here](https://github.com/sympy/sympy/blob/master/sympy/polys/numberfields.py#L2390)) . \r\n\r\nShould I add a PR to remove the sign change?\n> a.args[1] has only two index 0 and 1\r\n\r\nHow did you know that?\nYes! Sorry my fault `len(sarg)` [here](https://github.com/sympy/sympy/blob/master/sympy/core/numbers.py#L2399) could be more than 2 if `alias` is present.\r\n\r\n@skirpichev the PR you referenced seem to be of 'diofant' repository. can I open a PR to remove sign change of `a` when it negative in sympy. ?\n> Sorry my fault len(sarg) here could be more than 2 if alias is present.\r\n\r\nWow!\r\n\r\n> can I open a PR\r\n\r\nSure.",
  "created_at": "2018-02-20T23:09:53Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_issue_14289\", \"test_AlgebraicNumber\"]",
  "PASS_TO_PASS": "[\"test_integers_cache\", \"test_seterr\", \"test_mod\", \"test_divmod\", \"test_igcd\", \"test_igcd_lehmer\", \"test_igcd2\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Rational_cmp\", \"test_Float\", \"test_float_mpf\", \"test_Float_RealElement\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_Float_from_tuple\", \"test_Infinity\", \"test_Infinity_2\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_Infinity_inequations\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_integer_log\", \"test_isqrt\", \"test_powers_Integer\", \"test_powers_Rational\", \"test_powers_Float\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_long\", \"test_real_bug\", \"test_bug_sqrt\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_issue_13890\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Float_eq\", \"test_int_NumberSymbols\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_simplify_AlgebraicNumber\", \"test_Float_idempotence\", \"test_comp\", \"test_issue_9491\", \"test_issue_10063\", \"test_issue_10020\", \"test_invert_numbers\", \"test_mod_inverse\", \"test_golden_ratio_rewrite_as_sqrt\", \"test_comparisons_with_unknown_type\", \"test_NumberSymbol_comparison\", \"test_Integer_precision\", \"test_minimal_polynomial\", \"test_minimal_polynomial_hi_prec\", \"test_minimal_polynomial_sq\", \"test_minpoly_issue_7113\", \"test_minpoly_issue_7574\", \"test_primitive_element\", \"test_field_isomorphism_pslq\", \"test_field_isomorphism\", \"test_to_number_field\", \"test_to_algebraic_integer\", \"test_IntervalPrinter\", \"test_isolate\", \"test_minpoly_fraction_field\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.093196",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}