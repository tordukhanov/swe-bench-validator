{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-8757",
  "base_commit": "2acca90eab93569f9482b1c7595c30207afcbe7c",
  "patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -889,8 +889,11 @@ def reduce_map_data(self, linter: PyLinter, data: list[list[LineSet]]) -> None:\n         \"\"\"Reduces and recombines data into a format that we can report on.\n \n         The partner function of get_map_data()\n+\n+        Calls self.close() to actually calculate and report duplicate code.\n         \"\"\"\n         Similar.combine_mapreduce_data(self, linesets_collection=data)\n+        self.close()\n \n \n def register(linter: PyLinter) -> None:\ndiff --git a/pylint/lint/parallel.py b/pylint/lint/parallel.py\n--- a/pylint/lint/parallel.py\n+++ b/pylint/lint/parallel.py\n@@ -130,7 +130,7 @@ def check_parallel(\n     \"\"\"Use the given linter to lint the files with given amount of workers (jobs).\n \n     This splits the work filestream-by-filestream. If you need to do work across\n-    multiple files, as in the similarity-checker, then implement the map/reduce mixin functionality.\n+    multiple files, as in the similarity-checker, then implement the map/reduce functionality.\n     \"\"\"\n     # The linter is inherited by all the pool's workers, i.e. the linter\n     # is identical to the linter object here. This is required so that\n",
  "test_patch": "diff --git a/tests/test_self.py b/tests/test_self.py\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -233,7 +233,6 @@ def test_parallel_execution(self) -> None:\n                 join(HERE, \"functional\", \"a\", \"arguments.py\"),\n             ],\n             out=out,\n-            # We expect similarities to fail and an error\n             code=MSG_TYPES_STATUS[\"E\"],\n         )\n         assert (\ndiff --git a/tests/test_similar.py b/tests/test_similar.py\n--- a/tests/test_similar.py\n+++ b/tests/test_similar.py\n@@ -82,6 +82,23 @@ def test_duplicate_code_raw_strings_all(self) -> None:\n             expected_output=expected_output,\n         )\n \n+    @pytest.mark.needs_two_cores\n+    def test_duplicate_code_parallel(self) -> None:\n+        path = join(DATA, \"raw_strings_all\")\n+        expected_output = \"Similar lines in 2 files\"\n+        self._test_output(\n+            [\n+                path,\n+                \"--disable=all\",\n+                \"--enable=duplicate-code\",\n+                \"--ignore-imports=no\",\n+                \"--ignore-signatures=no\",\n+                \"--min-similarity-lines=4\",\n+                \"--jobs=2\",\n+            ],\n+            expected_output=expected_output,\n+        )\n+\n     def test_duplicate_code_raw_strings_disable_file(self) -> None:\n         \"\"\"Tests disabling duplicate-code at the file level in a single file.\"\"\"\n         path = join(DATA, \"raw_strings_disable_file\")\n",
  "problem_statement": "Different output with --jobs=1 and --jobs=2\nOriginally reported by: **Robert Spier (BitBucket: [robert_spier](http://bitbucket.org/robert_spier))**\n\n---\n\nParallelism (--jobs) changes the output of pylint.\n\nIt's not just the order of the tests, --jobs=2 outputs 18468 lines of output compared to only 21 for --jobs=1.  pylint 1.3.1 reports no lint errors.\n\n$ venv/bin/pylint --jobs=2 --rcfile=$PWD/pylintrc  app/codein app/melange app/soc app/summerofcode app/settings.py app/urls.py app/main.py tests pavement.py setup.py 2>&1 | head\n************\\* Module codein.callback\nW: 17, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 18, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 19, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 20, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\n************\\* Module codein.types\nW: 17, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 18, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 20, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 21, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\n\n$ venv/bin/pylint --jobs=1 --rcfile=$PWD/pylintrc  app/codein app/melange app/soc app/summerofcode app/settings.py app/urls.py app/main.py tests pavement.py setup.py 2>&1 | head\n************\\* Module main\nE: 46, 2: print statement used (print-statement)\nE: 47, 2: print statement used (print-statement)\nE: 48, 2: print statement used (print-statement)\nE: 49, 2: print statement used (print-statement)\nE: 50, 2: print statement used (print-statement)\n************\\* Module tests.test_utils\nE:658, 8: print statement used (print-statement)\nE:662,10: print statement used (print-statement)\nE:667, 8: print statement used (print-statement)\n\nThis is with the current head of the pylint repository. (1889:e404dd4d6e37 tip)\n\nThe source code being linted is https://code.google.com/p/soc/\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/374\n\n",
  "hints_text": "_Original comment by_ **Robert Spier (BitBucket: [robert_spier](http://bitbucket.org/robert_spier))**:\n\n---\n\nAnd here's the output with formatting fixed.\n\n$ venv/bin/pylint --jobs=2 --rcfile=$PWD/pylintrc app/codein app/melange app/soc app/summerofcode app/settings.py app/urls.py app/main.py tests pavement.py setup.py 2>&1 | head\n\n```\n#!text\n\n************* Module codein.callback\nW: 17, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 18, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 19, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 20, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\n************* Module codein.types\nW: 17, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 18, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 20, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\nW: 21, 0: import missing `from __future__ import absolute_import` (no-absolute-import)\n\n```\n\n$ venv/bin/pylint --jobs=1 --rcfile=$PWD/pylintrc app/codein app/melange app/soc app/summerofcode app/settings.py app/urls.py app/main.py tests pavement.py setup.py 2>&1 | head\n\n```\n#!text\n\n************* Module main\nE: 46, 2: print statement used (print-statement)\nE: 47, 2: print statement used (print-statement)\nE: 48, 2: print statement used (print-statement)\nE: 49, 2: print statement used (print-statement)\nE: 50, 2: print statement used (print-statement)\n************* Module tests.test_utils\nE:658, 8: print statement used (print-statement)\nE:662,10: print statement used (print-statement)\nE:667, 8: print statement used (print-statement)\n************* Module tests.run\nE:471, 4: print statement used (print-statement)\nE:473, 4: print statement used (print-statement)\n```\n\n_Original comment by_ **Robert Spier (BitBucket: [robert_spier](http://bitbucket.org/robert_spier))**:\n\n---\n\nFYI, I can also replicate this with the official 1.4.0 release.  Although the output is slightly different.  Running with --jobs=2 produces many more lint warnings than with --jobs=1.\n\n_Original comment by_ **Saulius Menkeviƒçius (BitBucket: [sauliusmenkevicius](http://bitbucket.org/sauliusmenkevicius))**:\n\n---\n\nCan confirm.\n\nFor me, pylint seems to ignore the pylintrc file, even though it is specified via the `--rcfile=` option, when -j 2+ is set.\n\nI was using an older version of pylint (with support for --jobs) from `hg+http://bitbucket.org/godfryd/pylint/@763d12c3c923f0733fc5c1866c69d973475993cd#egg=pylint` from this PR: https://bitbucket.org/logilab/pylint/pull-request/82/added-support-for-checking-files-in/commits; which seemed to respect `--pylintrc` properly in multi-process mode. Something broke inbetween that checkin and 1.4.0\n\n_Original comment by_ **Pedro Algarvio (BitBucket: [s0undt3ch](http://bitbucket.org/s0undt3ch), GitHub: @s0undt3ch?)**:\n\n---\n\nI can also confirm this. I had custom plugins on the rcfile and they're not being loaded\n\n_Original comment by_ **Pedro Algarvio (BitBucket: [s0undt3ch](http://bitbucket.org/s0undt3ch), GitHub: @s0undt3ch?)**:\n\n---\n\nI'm also on 1.4.0\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nYeah, --jobs is kind tricky right now, will try to fix asap. By the way, if you have any other problems with --jobs, it's better to open another ticket, so they could be tracked and fixed individually.\n\n_Original comment by_ **Pedro Algarvio (BitBucket: [s0undt3ch](http://bitbucket.org/s0undt3ch), GitHub: @s0undt3ch?)**:\n\n---\n\nI believe my problem is because the rcfile is being ignored.\n\n_Original comment by_ **Michal Nowikowski (BitBucket: [godfryd](http://bitbucket.org/godfryd), GitHub: @godfryd?)**:\n\n---\n\nThe issue has been fixed by pull request #213.\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nMerged in godfryd/pylint/fix-374 (pull request #213)\n\nFixed passing configuration from master linter to sublinters. Closes issue #374.\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nMerged in godfryd/pylint/fix-374 (pull request #213)\n\nFixed passing configuration from master linter to sublinters. Closes issue #374.\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nFixed passing configuration from master linter to sublinters. Closes issue #374.\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nHm, the latest patch introduced another regression related to disabling messages from the pylintrc.\n\n_Original comment by_ **Michal Nowikowski (BitBucket: [godfryd](http://bitbucket.org/godfryd), GitHub: @godfryd?)**:\n\n---\n\nHow to reproduce that new problem?\n\nI run:\n1. pylint **--jobs=2** --rcfile=pylintrc app/codein app/melange app/soc app/summerofcode app/settings.py app/urls.py app/main.py tests pavement.py setup.py \n2. pylint **--jobs=1** --rcfile=pylintrc app/codein app/melange app/soc app/summerofcode app/settings.py app/urls.py app/main.py tests pavement.py setup.py\n\nThe outputs contain the same messages. pylintrc is disabling and enabling particular messages.\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nIndeed, it was due to a faulty installation. Sorry about the noise.\n\n_Original comment by_ **Robert Spier (BitBucket: [robert_spier](http://bitbucket.org/robert_spier))**:\n\n---\n\nI confirm that it works correctly on the Melange codebase.  The performance improvement from adding more jobs is not as high as expected.  \n\n_Original comment by_ **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**:\n\n---\n\nThe issue with absolute_import may be resolved by pull request #229. The performance is discussed in issue #479. There are still issues with different output. Not sure if I should open another ticket. I'll describe it here.\n\n_Original comment by_ **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**:\n\n---\n\nThat's a minimal example showing that the issue is not fully resolved.\n\n```\n#!shell\n\necho 'pass' > first.py\necho 'pass' > second.py\npylint first.py second.py >output1\npylint --jobs=2 first.py second.py >output2\ndiff -u output1 output2\n```\n\n```\n#!diff\n\n--- output1 2015-02-25 18:51:36.770036133 -0500\n+++ output2 2015-02-25 18:51:39.274040857 -0500\n@@ -6,7 +6,7 @@\n\n Report\n ======\n-3 statements analysed.\n+4 statements analysed.\n\n Statistics by type\n ------------------\n@@ -72,31 +72,18 @@\n\n\n\n-% errors / warnings by module\n------------------------------\n-\n-+-------+------+--------+---------+-----------+\n-|module |error |warning |refactor |convention |\n-+=======+======+========+=========+===========+\n-|second |0.00  |0.00    |0.00     |50.00      |\n-+-------+------+--------+---------+-----------+\n-|first  |0.00  |0.00    |0.00     |50.00      |\n-+-------+------+--------+---------+-----------+\n-\n-\n-\n Messages\n --------\n\n +------------------+------------+\n |message id        |occurrences |\n +==================+============+\n-|missing-docstring |2           |\n+|missing-docstring |1           |\n +------------------+------------+\n\n\n\n Global evaluation\n -----------------\n-Your code has been rated at 3.33/10 (previous run: 3.33/10, +0.00)\n+Your code has been rated at 5.00/10 (previous run: 3.33/10, +1.67)\n\n```\n\n_Original comment by_ **James Broadhead (BitBucket: [jamesbroadhead](http://bitbucket.org/jamesbroadhead), GitHub: @jamesbroadhead?)**:\n\n---\n\nSame here -- getting significantly more 'duplicate-code' & 'cyclic-import' with --jobs=1 over --jobs=2\n\nClosed-source codebase, but I'm happy to run debug branches etc.  over it. \n\n$ pylint --version\npylint 1.4.4, \nastroid 1.3.6, common 1.0.2\nPython 2.7.8 (default, Sep 10 2014, 04:44:11) \n[GCC 4.9.1]\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nIncreasing to blocker, so that we'll have a fix finally in 1.5.\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nI'm trying to reproduce this issue, but unfortunately I can't reproduce Pavel's example using the latest code from the repository. Could anyone of you provide a more comprehensive example where this discrepancy happens?\n\n_Original comment by_ **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**:\n\n---\n\nI tried pylint on the current python-ly, and I see that things have improved greatly. There are only two issues that the parallel pylint missed compared to the single-job version: `R0401(cyclic-import)` and `R0801(duplicate-code)`. There is also a discrepancy in the way `__init__.py` is referred to.\n\nOne job:\n\n```\n************* Module ly\nly/__init__.py(46): [C0303(trailing-whitespace)] Trailing whitespace\n```\n\nTwo jobs:\n\n```\n************* Module ly.__init__\nly/__init__.py(46): [C0303(trailing-whitespace)] Trailing whitespace\n```\n\nI actually prefer the later notation, it's more explicit that it's just the `__init__.py` file, not the whole module.\n\n_Original comment by_ **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**:\n\n---\n\nHere's a simple test for the module naming issue. It turns out the parallel version uses both names, which is bad.\n\n```\n[proski@dell pylinttest]$ echo \"pass \" >__init__.py\n[proski@dell pylinttest]$ pylint -r n --jobs=1 .\n************* Module pylinttest\nC:  1, 0: Trailing whitespace (trailing-whitespace)\nC:  1, 0: Missing module docstring (missing-docstring)\n[proski@dell pylinttest]$ pylint -r n --jobs=2 .\n************* Module pylinttest.__init__\nC:  1, 0: Trailing whitespace (trailing-whitespace)\n************* Module pylinttest\nC:  1, 0: Missing module docstring (missing-docstring)\n```\n\n_Original comment by_ **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**:\n\n---\n\nCyclic import problem\n\n```\n:::text\n[proski@dell pylintcycle]$ touch __init__.py\n[proski@dell pylintcycle]$ echo 'import pylintcycle.second' >first.py\n[proski@dell pylintcycle]$ echo 'import pylintcycle.first' >second.py\n[proski@dell pylintcycle]$ pylint -r n --jobs=1 first.py second.py\n************* Module pylintcycle.first\nC:  1, 0: Missing module docstring (missing-docstring)\nW:  1, 0: Unused import pylintcycle.second (unused-import)\n************* Module pylintcycle.second\nC:  1, 0: Missing module docstring (missing-docstring)\nW:  1, 0: Unused import pylintcycle.first (unused-import)\nR:  1, 0: Cyclic import (pylintcycle.first -> pylintcycle.second) (cyclic-import)\n[proski@dell pylintcycle]$ pylint -r n --jobs=2 first.py second.py\n************* Module pylintcycle.first\nC:  1, 0: Missing module docstring (missing-docstring)\nW:  1, 0: Unused import pylintcycle.second (unused-import)\n************* Module pylintcycle.second\nC:  1, 0: Missing module docstring (missing-docstring)\nW:  1, 0: Unused import pylintcycle.first (unused-import)\n```\n\n_Original comment by_ **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**:\n\n---\n\nWhen running `pylint -rn --jobs=2 pylint` in an empty directory, following issue is reported:\n\n```\n:::text\n************* Module pylint.lint\nE:978,15: Instance of 'Values' has no 'persistent' member (no-member)\n```\n\nThe single-job version does not detect that condition.\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nThank you for the detailed reports, Pavel. Will look soon.\n\n_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:\n\n---\n\nRegarding `pylint -rn --jobs=2 pylint`, this happens because there's no configuration files which disables the corresponding messages for pylint, such as the one from pylint/pylintrc. I can reproduce it with both the single-job version and with multiple jobs, it's actually expected.\n\nLate to the game and new to pylint, and I feel I'm running into this issue. I'm a little confused, though, since even very simple cases seem to break with `-j2`. \n\n```\n$ cat > lint_test.py <<EOF\ndef f(x):\n return x # 1 space\nEOF\n\n$ cat > pylintrc <<EOF\n[MESSAGES CONTROL]\ndisable=all\nenable=bad-indentation\nEOF\n\n$ pylint --version\npylint 1.6.1, \nastroid 1.4.7\nPython 2.7.11 |Anaconda 2.3.0 (x86_64)| (default, Dec  6 2015, 18:57:58) \n[GCC 4.2.1 (Apple Inc. build 5577)]\n\n$ pylint -rn lint_test.py \n************* Module lint_test\nW:  2, 0: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)\n\n$ pylint -rn lint_test.py -j1\n************* Module lint_test\nW:  2, 0: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)\n\n$ pylint -rn lint_test.py -j2\n<no output>\n```\n\nI don't see a way this can be expected behavior. Am I missing something? Am I using the tool fundamentally wrong?\n\nHi @rdadolf \n\nThis bug is definitely irritating, I don't remember exactly why it got stuck, I should check again if it works.\n\nFor me your example works perfectly. Do you have any pylintrc in that directory or somewhere else, which could potentially interfere with Pylint? I tried the same configuration, on Windows. Did you try on another OS? Does it work with multiple jobs and can you test with multiple files? \n\nI sometimes forget that there are developers who use non-unix systems. It's possible that differences in process scheduling are at play here.\n\nNo other configuration files were in that directory, nor do I have a user-wide config file in my home directory.\n\nThe system above was OS X 10.11.3 running an Anaconda version of python (as shown in the `--version` output).\n\nI just tried the same thing on an Ubuntu 15.10 machine which pylint was not previously installed. Used `pip install pylint` with no other actions, ran the same commands as above in a new scratch directory and I'm seeing the same behavior.\n\nAll values for `N>1` with `-jN` seem to produce the same result (i.e., they fail to report anything).\n\nNot sure what you mean by this last request, though:\n\n> Does it work with multiple jobs and can you test with multiple files?\n\nThe problem is identical for a multi-file module, if that's what you're asking. This setup:\n\n```\n$ ls -R\n.:\nlint_test  pylintrc\n\n./lint_test:\n__init__.py  lint_f.py  lint_g.py\n\n$ cat lint_test/*.py\n# __init__.py\nfrom lint_f import f\nfrom lint_g import g\n# lint_f.py\ndef f(x):\n return x # 1 space\n# lint_g.py\ndef g(x):\n return x # 1 space\n```\n\nI.e., a module with two source files and a simple `__init__.py`, also shows the same symptoms (same config file as before):\n\n```\n$ pylint -rn lint_test/\n************* Module lint_test.lint_g\nW:  3, 0: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)\n************* Module lint_test.lint_f\nW:  3, 0: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)\n$ pylint -rn lint_test/ -j1\n************* Module lint_test.lint_g\nW:  3, 0: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)\n************* Module lint_test.lint_f\nW:  3, 0: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)\n$ pylint -rn lint_test/ -j2\n<no output>\n```\n\nOkay, I think I know why this is happening. Apparently the issue happens whenever we are disabling all the categories and enabling only a handful of messages in the configuration. For instance, you can try to add some new errors into your code and test with disable=E instead, you will still receive the messages for bad-indentation.\n\nI'll have to check what is happening and fix it.\n\nI think it might be a little more than that. The following also doesn't work:\n\n```\n$ pylint -rn lint_test.py --disable=W --enable=bad-indentation\n************* Module lint_test\nW:  2, 0: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)\nC:  1, 0: Missing module docstring (missing-docstring)\nC:  1, 0: Invalid function name \"f\" (invalid-name)\nC:  1, 0: Invalid argument name \"x\" (invalid-name)\nC:  1, 0: Missing function docstring (missing-docstring)\n\n$ pylint -rn lint_test.py --disable=W --enable=bad-indentation -j2\n************* Module lint_test\nC:  1, 0: Missing module docstring (missing-docstring)\nC:  1, 0: Invalid function name \"f\" (invalid-name)\nC:  1, 0: Invalid argument name \"x\" (invalid-name)\nC:  1, 0: Missing function docstring (missing-docstring)\n```\n\nSame behavior if you put it in a pylintrc:\n\n```\n$ cat > pylintrc <<EOF\n[MESSAGES CONTROL]\ndisable=W\nenable=bad-indentation\nEOF\n```\n\nSo it's not just when all the categories are disabled. It's possible that the trigger is when the two conditions overlap, but I haven't tested it thoroughly.\n\nI believe this is happening as `_all_options` (which is what `_get_jobs_config` uses to populate a fresh dictionary from the current options for child tasks) is populated from `PyLinter.options` before the config file is read.\r\nThat means that anything defined in in `.options` will come first in `_all_options`, which will probably be the wrong order for sub tasks, and break options that are order dependent (enable/disable).\n@PCManticore I'm unsure of whether this approach is ideal.\r\nBasically, we could keep track of each option being set in its raw form, which would allow us to do a playback of configs passed in.\r\n\r\nI'm not sure if it would account for multiple instances of `--enable|disbable` (due to not knowing of optparse provides access to individual arguments). doing ```pylint --disable=all --enable=E --disable=E``` Should (and currently does) disable all checkers.\r\n\r\n\r\nWe could also just add a hidden option that is manipulated in the `enable` and `disable` methods to always contain the cumulative of checkers to run, however that would result in storing the same state in at least 2 places.\r\n\r\nFixing this issue will break people's setups that depend on `enable` always going before `disable` for multiple jobs, however I doubt that's in issue.\r\n\r\nI'm around on #pylint@freenode if you want to chat\npylint 1.7.2, \r\nastroid 1.5.3\r\nPython 3.6.2 |Anaconda custom (64-bit)| (default, Jul 20 2017, 13:51:32) \r\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]\r\nno pylintrc\r\n\r\nI'm seeing big differences on a large code base between -j 1 and -j N. I also see slight differences between -j 2 and -j 8 of the form:\r\n`[R0902(too-many-instance-attributes), Ethernet] Too many instance attributes (14/7)`\r\nvs\r\n`[R0902(too-many-instance-attributes), Ethernet] Too many instance attributes (13/7)`\r\nwhere the '14/7' comes from the -j 2 run and the '13/7' comes from the -j 8 run.\r\n\r\nBut with -j 1 I get several `R0401(cyclic-import)` errors with -j 1, but none with -j 2 or -j 8. And when I repeat the runs with -j 1 back-to-back on the CL, the number of R0401 errors changes from run to run; from one run to the next, some R0401 flags disappear while other new ones appear! This behavior makes my Jenkins tracking go crazy.\nAlso having issues with `duplicate-code` message (on closed-source code):\r\n```\r\npylint 1.8.4,\r\nastroid 1.6.3\r\nPython 3.6.3 (default, Oct  3 2017, 21:45:48)\r\n[GCC 7.2.0]\r\n```\r\n\r\nWhen running with `-j 2`, duplication is not detected; When running with `-j 1`, issues found.\r\n\r\nI'm guessing this checker specifically has a different issue with multi-jobs, because it needs to see \"all\" the code, vs just one file at a time like most simpler checkers, so it would need to be solved differently.\nWe are likely going to have to deal with this as part of the per directory config project. Checkers used to be created more than once only when `jobs` was anything higher than one. Now that checkers are going to be created per directory, they will need to share state between instances of themselves. Accesses to the shared state are going to need to be thread safe for this model to work in a parallel context as well.\nHi,\r\nThis is still an issue on pylint 2.3.1. Any estimate on when it will be fixed? Deterministic output is crucial for CI checks!\n@carlosgalvezp This is a volunteer driven project. I cannot offer any estimates for when an issue is going to be fixed as we're already overstrained with our time for all the 500+ issues you're seeing in this bug tracker. If you want an issue to be solved faster, finding ways to contribute would be the way to go, either by submitting patches, or by financially contributing to the project.\nJust sharing that I'm seeing the issue - specifically on similarity checks - on two flavours of pylint 2.4. Given the amount of head-scratching time I spent on this, if I get a second I might have a look at the cause.\r\n\r\n### version1\r\npylint 2.4.4\r\nastroid 2.3.3\r\nPython 3.7.6 (default, Jan 30 2020, 09:44:41) \r\n[GCC 9.2.1 20190827 (Red Hat 9.2.1-1)]\r\n\r\n### version2\r\nPYLINT VER: pylint 2.4.2\r\nPYLINT VER: astroid 2.3.1\r\nPYLINT VER: Python 3.7.4 (default, Oct  2 2019, 14:13:54) \r\nPYLINT VER: [GCC 8.3.0]\r\n\nThis issue looks to be caused by by the fact that `check_parallel()` calls `_worker_check_single_file()`, creating individual linters per-file, rather than a single linter for all files (which is what we do in the single-threaded mode).\r\n\r\nMy suggestion would be to have `_worker_check_single_file()` return some data structure representing multi-threaded, recombinable data e.g. `_worker_linter._mt_merge_data` which would contain all `LineSets` in the `SimilarChecker` case and None otherwise. That would require adding a step after the `imap_unordered()`, passing all SimilarChecker data to some `clasmethod` (?) on `SimilarChecker`. We could use a mixin or attribute checking on the linters to determine if this is supported/desired.\r\n\r\nThe above would allow threadable work to be done, but would also allow plugins like SimilarChecker to use global data as/when needed. So, distribute the file-parsing, single-threading the actual similarity check, I'm not sure if the cartesian-product work could be threaded...\r\n\r\nIt wouldn't take too long to implement a prototype (and I'd have it done by now if I could get tox to work in my local checkout - if I get a second later I'll have another punt at it).\nI think I have a working fix for this, using a map/reduce paradigm for checkers. I will submit the PR tomorrow after I've given the code another once-over.\nThis should be fixed by the map reduce implementation done by @doublethefish and merged in #4007. Thanks a lot !\nReopening because only the duplicate checker was fixed, the MapreduceMixin still need to be applied where it makes sense, for example for cyclic import check like in #2573 \nAdding a reproducer from [a duplicate issue](https://github.com/PyCQA/pylint/issues/4171#issue-819663484):\r\n\r\nRunning `pylint -jobs=0` does not report about cyclic-import. This can be reproduced with a trivial example.\r\n`a.py`:\r\n```\r\nimport b\r\n```\r\n`b.py`:\r\n```\r\nimport a\r\n```\nI'm sorry to unearth this, but `duplicate-code` is still not shown with `-j 2` with\r\n```\r\npylint 2.14.4\r\nastroid 2.11.7\r\nPython 3.10.5 (main, Jun  6 2022, 18:49:26) [GCC 12.1.0]\r\n```\nWhich specific variant of duplicate code; in-file or across files?\nOnly across files\nCan you share an example of two files that fail? I'll add it to the tests (which I am assuming are still working and do test -j2-10 on similar files).\nI guess there is nothing special about such files -- any similar lines in 2 files really:\r\n```\r\n$ cat bin/1.py\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n```\r\nsame for bin/2.py.\r\n```\r\n$ pylint bin/1.py bin/2.py \r\n...\r\nbin/2.py:1:0: R0801: Similar lines in 2 files\r\n==1:[0:6]\r\n==2:[0:6]\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6 (duplicate-code)\r\n```\nI experience the same behaviour (Pylint `2.15.0`, Python `3.8.13`). This behaviour seems to affect any check for which context is spread across files (cyclical imports, duplicate code).\r\n\r\nAt first I thought this was because input files were checked across different parallel workers, and therefore important context from a secondary file (e.g. duplicate code) was outside the context of the parallel worker. I don't think this is the case though; even when files are processed on the same worker (but jobs>1), the same behaviour is observed.\r\n\r\nI think this has more to do with the different ways in which files are handled between [serial](https://github.com/PyCQA/pylint/blob/main/pylint/lint/pylinter.py#L676-L691) and [parallel](https://github.com/PyCQA/pylint/blob/main/pylint/lint/pylinter.py#L664-L673) execution (determined by the number of jobs). For example, for files `foo` and `bar`, I observed the similarity linter running twice for each file in parallel, but once for all files in serial. Of course if the similarity linter lints only `foo`, it will miss code duplicated in `bar`.\r\n\r\nAnother example not yet mentioned is `invalid-name`. `test1.py`:\r\n\r\n```python\r\n'''\r\nDocstring\r\n'''\r\n\r\nclass Test:\r\n    '''\r\n    Test Class\r\n    '''\r\n\r\n    CLASS_ATTR = 5\r\n\r\n```\r\n\r\n`test2.py`:\r\n\r\n```python\r\n'''\r\nDocstring\r\n'''\r\nfrom test1 import Test\r\n\r\nx = Test()\r\nx.CLASS_ATTR = 3\r\n\r\n```\r\n\r\n```\r\n~ % pylint --jobs=0 test1.py test2.py\r\n\r\n--------------------------------------------------------------------\r\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\r\n```\r\n\r\n```\r\n~ % pylint --jobs=1 test1.py test2.py\r\n************* Module test2\r\ntest2.py:7:0: C0103: Attribute name \"CLASS_ATTR\" doesn't conform to snake_case naming style (invalid-name)\r\n\r\n-------------------------------------------------------------------\r\nYour code has been rated at 8.00/10 (previous run: 10.00/10, -2.00)\r\n```\nI just lost a ton of time trying to debug why I was getting different results on CI than I was in any other environment even though the same Docker images were used both locally and on CI.  Finally I found out it was because I had `jobs = 0` to auto-detect the number of CPUs/cores and the CI runner had only one CPU.  When I set `jobs = 1` I got the same results in all environments.  And it wasn't just \"cyclical imports, duplicate code\" checks, other errors were reported only in CI as well.\r\n\r\n At the very least, I think [the Parallel execution docs](https://pylint.readthedocs.io/en/latest/user_guide/usage/run.html#parallel-execution) should include a big red flashing light to warn other developers who might get bitten by this. \n> I just lost a ton of time trying to debug why I was getting different results on CI than I was in any other environment even though the same Docker images were used both locally and on CI. Finally I found out it was because I had `jobs = 0` to auto-detect the number of CPUs/cores and the CI runner had only one CPU. When I set `jobs = 1` I got the same results in all environments. And it wasn't just \"cyclical imports, duplicate code\" checks, other errors were reported only in CI as well.\r\n> \r\n> At the very least, I think [the Parallel execution docs](https://pylint.readthedocs.io/en/latest/user_guide/usage/run.html#parallel-execution) should include a big red flashing light to warn other developers who might get bitten by this.\r\n\r\nI've also been battling really odd behaviour in CI when everything was running fine locally (in docker or otherwise). Changing jobs to `0` was what fixed it to me however (for some reason I had it set to `8` ü§∑)\nit's easy to repro:\r\n\r\n - have a massive code base, with lots of files\r\n - run pylint in parallel\r\n - get spurious errors\r\n\r\npylint with 1 core (jobs==1) never has this issue, but is way too slow for large code bases",
  "created_at": "2023-06-10T12:42:13Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_parallel\"]",
  "PASS_TO_PASS": "[\"tests/test_self.py::TestRunTC::test_pkginfo\", \"tests/test_self.py::TestRunTC::test_all\", \"tests/test_self.py::TestRunTC::test_no_ext_file\", \"tests/test_self.py::TestRunTC::test_w0704_ignored\", \"tests/test_self.py::TestRunTC::test_exit_zero\", \"tests/test_self.py::TestRunTC::test_nonexistent_config_file\", \"tests/test_self.py::TestRunTC::test_error_missing_arguments\", \"tests/test_self.py::TestRunTC::test_no_out_encoding\", \"tests/test_self.py::TestRunTC::test_parallel_execution\", \"tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments\", \"tests/test_self.py::TestRunTC::test_enable_all_works\", \"tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled\", \"tests/test_self.py::TestRunTC::test_type_annotation_names\", \"tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports\", \"tests/test_self.py::TestRunTC::test_reject_empty_indent_strings\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error\", \"tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing\", \"tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes\", \"tests/test_self.py::TestRunTC::test_information_category_disabled_by_default\", \"tests/test_self.py::TestRunTC::test_error_mode_shows_no_score\", \"tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default\", \"tests/test_self.py::TestRunTC::test_confidence_levels\", \"tests/test_self.py::TestRunTC::test_bom_marker\", \"tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options\", \"tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values\", \"tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults\", \"tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8\", \"tests/test_self.py::TestRunTC::test_parseable_file_path\", \"tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]\", \"tests/test_self.py::TestRunTC::test_stdin_missing_modulename\", \"tests/test_self.py::TestRunTC::test_relative_imports[False]\", \"tests/test_self.py::TestRunTC::test_relative_imports[True]\", \"tests/test_self.py::TestRunTC::test_stdin_syntax_error\", \"tests/test_self.py::TestRunTC::test_version\", \"tests/test_self.py::TestRunTC::test_fail_under\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]\", \"tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]\", \"tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]\", \"tests/test_self.py::TestRunTC::test_modify_sys_path\", \"tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]\", \"tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]\", \"tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd\", \"tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check\", \"tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init\", \"tests/test_self.py::TestRunTC::test_jobs_score\", \"tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath\", \"tests/test_self.py::TestRunTC::test_output_file_valid_path\", \"tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]\", \"tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]\", \"tests/test_self.py::TestRunTC::test_one_module_fatal_error\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]\", \"tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\\\"message\\\":\", \"tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter\", \"tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile\", \"tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided\", \"tests/test_self.py::TestRunTC::test_regex_paths_csv_validator\", \"tests/test_self.py::TestRunTC::test_recursive\", \"tests/test_self.py::TestRunTC::test_recursive_globbing\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]\", \"tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]\", \"tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]\", \"tests/test_self.py::TestRunTC::test_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir\", \"tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding\", \"tests/test_self.py::TestRunTC::test_encoding[good.py-]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]\", \"tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]\", \"tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression\", \"tests/test_self.py::TestRunTC::test_output_no_header\", \"tests/test_self.py::TestRunTC::test_no_name_in_module\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint\", \"tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:\", \"tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name\", \"tests/test_self.py::TestCallbackOptions::test_generate_rcfile\", \"tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_generate_toml_config\", \"tests/test_self.py::TestCallbackOptions::test_generate_toml_config_disable_symbolic_names\", \"tests/test_self.py::TestCallbackOptions::test_errors_only\", \"tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable\", \"tests/test_self.py::TestCallbackOptions::test_verbose\", \"tests/test_self.py::TestCallbackOptions::test_enable_all_extensions\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_all\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_file\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_file_double\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_line_two\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_line_disable_all\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_line_midle\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_line_end\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_scope\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_scope_double\", \"tests/test_similar.py::TestSimilarCodeChecker::test_duplicate_code_raw_strings_disable_scope_function\", \"tests/test_similar.py::TestSimilarCodeChecker::test_ignore_imports\"]",
  "environment_setup_commit": "a0ce6e424e3a208f3aed1cbf6e16c40853bec3c0",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.919093",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}