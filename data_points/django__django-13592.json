{
  "repo": "django/django",
  "instance_id": "django__django-13592",
  "base_commit": "d1791539a7d86739cd44c909fa8239cae7f85874",
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1864,6 +1864,13 @@ def formfield(self, **kwargs):\n         })\n \n \n+class SmallIntegerField(IntegerField):\n+    description = _('Small integer')\n+\n+    def get_internal_type(self):\n+        return 'SmallIntegerField'\n+\n+\n class IPAddressField(Field):\n     empty_strings_allowed = False\n     description = _(\"IPv4 address\")\n@@ -2006,6 +2013,17 @@ def get_internal_type(self):\n \n \n class PositiveIntegerRelDbTypeMixin:\n+    def __init_subclass__(cls, **kwargs):\n+        super().__init_subclass__(**kwargs)\n+        if not hasattr(cls, 'integer_field_class'):\n+            cls.integer_field_class = next(\n+                (\n+                    parent\n+                    for parent in cls.__mro__[1:]\n+                    if issubclass(parent, IntegerField)\n+                ),\n+                None,\n+            )\n \n     def rel_db_type(self, connection):\n         \"\"\"\n@@ -2019,10 +2037,10 @@ def rel_db_type(self, connection):\n         if connection.features.related_fields_match_type:\n             return self.db_type(connection)\n         else:\n-            return IntegerField().db_type(connection=connection)\n+            return self.integer_field_class().db_type(connection=connection)\n \n \n-class PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):\n+class PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin, BigIntegerField):\n     description = _('Positive big integer')\n \n     def get_internal_type(self):\n@@ -2048,7 +2066,7 @@ def formfield(self, **kwargs):\n         })\n \n \n-class PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):\n+class PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, SmallIntegerField):\n     description = _(\"Positive small integer\")\n \n     def get_internal_type(self):\n@@ -2094,13 +2112,6 @@ def formfield(self, **kwargs):\n         })\n \n \n-class SmallIntegerField(IntegerField):\n-    description = _(\"Small integer\")\n-\n-    def get_internal_type(self):\n-        return \"SmallIntegerField\"\n-\n-\n class TextField(Field):\n     description = _(\"Text\")\n \n",
  "test_patch": "diff --git a/tests/model_fields/test_autofield.py b/tests/model_fields/test_autofield.py\n--- a/tests/model_fields/test_autofield.py\n+++ b/tests/model_fields/test_autofield.py\n@@ -9,14 +9,17 @@\n \n class AutoFieldTests(IntegerFieldTests):\n     model = AutoModel\n+    rel_db_type_class = models.IntegerField\n \n \n class BigAutoFieldTests(BigIntegerFieldTests):\n     model = BigAutoModel\n+    rel_db_type_class = models.BigIntegerField\n \n \n class SmallAutoFieldTests(SmallIntegerFieldTests):\n     model = SmallAutoModel\n+    rel_db_type_class = models.SmallIntegerField\n \n \n class AutoFieldInheritanceTests(SimpleTestCase):\ndiff --git a/tests/model_fields/test_integerfield.py b/tests/model_fields/test_integerfield.py\n--- a/tests/model_fields/test_integerfield.py\n+++ b/tests/model_fields/test_integerfield.py\n@@ -14,6 +14,7 @@\n class IntegerFieldTests(TestCase):\n     model = IntegerModel\n     documented_range = (-2147483648, 2147483647)\n+    rel_db_type_class = models.IntegerField\n \n     @property\n     def backend_range(self):\n@@ -154,25 +155,42 @@ def test_invalid_value(self):\n                 with self.assertRaisesMessage(exception, msg):\n                     self.model.objects.create(value=value)\n \n+    def test_rel_db_type(self):\n+        field = self.model._meta.get_field('value')\n+        rel_db_type = field.rel_db_type(connection)\n+        self.assertEqual(rel_db_type, self.rel_db_type_class().db_type(connection))\n+\n \n class SmallIntegerFieldTests(IntegerFieldTests):\n     model = SmallIntegerModel\n     documented_range = (-32768, 32767)\n+    rel_db_type_class = models.SmallIntegerField\n \n \n class BigIntegerFieldTests(IntegerFieldTests):\n     model = BigIntegerModel\n     documented_range = (-9223372036854775808, 9223372036854775807)\n+    rel_db_type_class = models.BigIntegerField\n \n \n class PositiveSmallIntegerFieldTests(IntegerFieldTests):\n     model = PositiveSmallIntegerModel\n     documented_range = (0, 32767)\n+    rel_db_type_class = (\n+        models.PositiveSmallIntegerField\n+        if connection.features.related_fields_match_type\n+        else models.SmallIntegerField\n+    )\n \n \n class PositiveIntegerFieldTests(IntegerFieldTests):\n     model = PositiveIntegerModel\n     documented_range = (0, 2147483647)\n+    rel_db_type_class = (\n+        models.PositiveIntegerField\n+        if connection.features.related_fields_match_type\n+        else models.IntegerField\n+    )\n \n     @unittest.skipIf(connection.vendor == 'sqlite', \"SQLite doesn't have a constraint.\")\n     def test_negative_values(self):\n@@ -185,6 +203,11 @@ def test_negative_values(self):\n class PositiveBigIntegerFieldTests(IntegerFieldTests):\n     model = PositiveBigIntegerModel\n     documented_range = (0, 9223372036854775807)\n+    rel_db_type_class = (\n+        models.PositiveBigIntegerField\n+        if connection.features.related_fields_match_type\n+        else models.BigIntegerField\n+    )\n \n \n class ValidationTests(SimpleTestCase):\n",
  "problem_statement": "ManyToManyField does not respect the PositiveBigIntegerField in m2m intermediate table.\nDescription\n\t\nWhen creating a relation between 2 models using PositiveBigIntegerField on Postgresql, the relation table is created using regular ints as the column type. This in turn leads to out of bound error when using large numbers for ids.\nfrom django.contrib.gis.db import models\nclass Node(models.Model):\n\tid = models.PositiveBigIntegerField(primary_key=True)\n\tpoint = models.PointField()\nclass Relation(models.Model):\n id = models.PositiveBigIntegerField(primary_key=True)\n nodes = models.ManyToManyField(Node)\nThe generated table will look like this:\n Column\t| Type | Collation | Nullable |\t\t\t\t\tDefault\t\t\t\t\t | Storage | Stats target | Description \n-------------+---------+-----------+----------+------------------------------------------------+---------+--------------+-------------\n id\t\t | integer |\t\t | not null | nextval('osm_relation_nodes_id_seq'::regclass) | plain |\t\t\t | \n relation_id | integer |\t\t | not null |\t\t\t\t\t\t\t\t\t\t\t\t| plain |\t\t\t | \n node_id\t | integer |\t\t | not null |\t\t\t\t\t\t\t\t\t\t\t\t| plain |\t\t\t | \nAs you can see, the PositiveBigInteger is not respected and a regular int is set\n",
  "hints_text": "Thanks for the report. Note that everything works for BigIntegerField().\nThank you for the update. I'll switch to that for now.\nHi! I tried to tackle this issue, since it doesn't seem to complicated as a first glance :) PR: ​https://github.com/django/django/pull/13592\nAdd unit tests and improved the patch. Ready for another round of reviews :)\nLeft some comments regarding the use of related_fields_match_type in tests.\nThanks for the comment Simon! I adapted the tests, please see ​https://github.com/django/django/pull/13592#issuecomment-716212270 for more details",
  "created_at": "2020-10-23T22:06:45Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_rel_db_type (model_fields.test_integerfield.PositiveBigIntegerFieldTests)\", \"test_rel_db_type (model_fields.test_integerfield.PositiveSmallIntegerFieldTests)\"]",
  "PASS_TO_PASS": "[\"test_isinstance_of_autofield (model_fields.test_autofield.AutoFieldInheritanceTests)\", \"test_issubclass_of_autofield (model_fields.test_autofield.AutoFieldInheritanceTests)\", \"test_choices_validation_supports_named_groups (model_fields.test_integerfield.ValidationTests)\", \"test_enum_choices_cleans_valid_string (model_fields.test_integerfield.ValidationTests)\", \"test_enum_choices_invalid_input (model_fields.test_integerfield.ValidationTests)\", \"test_integerfield_cleans_valid_string (model_fields.test_integerfield.ValidationTests)\", \"test_integerfield_raises_error_on_empty_input (model_fields.test_integerfield.ValidationTests)\", \"test_integerfield_raises_error_on_invalid_intput (model_fields.test_integerfield.ValidationTests)\", \"test_integerfield_validates_zero_against_choices (model_fields.test_integerfield.ValidationTests)\", \"test_nullable_integerfield_cleans_none_on_null_and_blank_true (model_fields.test_integerfield.ValidationTests)\", \"test_nullable_integerfield_raises_error_with_blank_false (model_fields.test_integerfield.ValidationTests)\", \"test_backend_range_save (model_fields.test_integerfield.PositiveIntegerFieldTests)\", \"test_backend_range_validation (model_fields.test_integerfield.PositiveIntegerFieldTests)\", \"test_coercing (model_fields.test_integerfield.PositiveIntegerFieldTests)\", \"test_documented_range (model_fields.test_integerfield.PositiveIntegerFieldTests)\", \"test_invalid_value (model_fields.test_integerfield.PositiveIntegerFieldTests)\", \"test_redundant_backend_range_validators (model_fields.test_integerfield.PositiveIntegerFieldTests)\", \"test_rel_db_type (model_fields.test_integerfield.PositiveIntegerFieldTests)\", \"test_types (model_fields.test_integerfield.PositiveIntegerFieldTests)\", \"test_backend_range_save (model_fields.test_integerfield.IntegerFieldTests)\", \"test_backend_range_validation (model_fields.test_integerfield.IntegerFieldTests)\", \"test_coercing (model_fields.test_integerfield.IntegerFieldTests)\", \"test_documented_range (model_fields.test_integerfield.IntegerFieldTests)\", \"test_invalid_value (model_fields.test_integerfield.IntegerFieldTests)\", \"test_redundant_backend_range_validators (model_fields.test_integerfield.IntegerFieldTests)\", \"test_rel_db_type (model_fields.test_integerfield.IntegerFieldTests)\", \"test_types (model_fields.test_integerfield.IntegerFieldTests)\", \"test_backend_range_save (model_fields.test_integerfield.BigIntegerFieldTests)\", \"test_backend_range_validation (model_fields.test_integerfield.BigIntegerFieldTests)\", \"test_coercing (model_fields.test_integerfield.BigIntegerFieldTests)\", \"test_documented_range (model_fields.test_integerfield.BigIntegerFieldTests)\", \"test_invalid_value (model_fields.test_integerfield.BigIntegerFieldTests)\", \"test_redundant_backend_range_validators (model_fields.test_integerfield.BigIntegerFieldTests)\", \"test_rel_db_type (model_fields.test_integerfield.BigIntegerFieldTests)\", \"test_types (model_fields.test_integerfield.BigIntegerFieldTests)\", \"test_backend_range_save (model_fields.test_integerfield.PositiveBigIntegerFieldTests)\", \"test_backend_range_validation (model_fields.test_integerfield.PositiveBigIntegerFieldTests)\", \"test_coercing (model_fields.test_integerfield.PositiveBigIntegerFieldTests)\", \"test_documented_range (model_fields.test_integerfield.PositiveBigIntegerFieldTests)\", \"test_invalid_value (model_fields.test_integerfield.PositiveBigIntegerFieldTests)\", \"test_redundant_backend_range_validators (model_fields.test_integerfield.PositiveBigIntegerFieldTests)\", \"test_types (model_fields.test_integerfield.PositiveBigIntegerFieldTests)\", \"test_backend_range_save (model_fields.test_integerfield.PositiveSmallIntegerFieldTests)\", \"test_backend_range_validation (model_fields.test_integerfield.PositiveSmallIntegerFieldTests)\", \"test_coercing (model_fields.test_integerfield.PositiveSmallIntegerFieldTests)\", \"test_documented_range (model_fields.test_integerfield.PositiveSmallIntegerFieldTests)\", \"test_invalid_value (model_fields.test_integerfield.PositiveSmallIntegerFieldTests)\", \"test_redundant_backend_range_validators (model_fields.test_integerfield.PositiveSmallIntegerFieldTests)\", \"test_types (model_fields.test_integerfield.PositiveSmallIntegerFieldTests)\", \"test_backend_range_save (model_fields.test_autofield.BigAutoFieldTests)\", \"test_backend_range_validation (model_fields.test_autofield.BigAutoFieldTests)\", \"test_coercing (model_fields.test_autofield.BigAutoFieldTests)\", \"test_documented_range (model_fields.test_autofield.BigAutoFieldTests)\", \"test_invalid_value (model_fields.test_autofield.BigAutoFieldTests)\", \"test_redundant_backend_range_validators (model_fields.test_autofield.BigAutoFieldTests)\", \"test_rel_db_type (model_fields.test_autofield.BigAutoFieldTests)\", \"test_types (model_fields.test_autofield.BigAutoFieldTests)\", \"test_backend_range_save (model_fields.test_autofield.SmallAutoFieldTests)\", \"test_backend_range_validation (model_fields.test_autofield.SmallAutoFieldTests)\", \"test_coercing (model_fields.test_autofield.SmallAutoFieldTests)\", \"test_documented_range (model_fields.test_autofield.SmallAutoFieldTests)\", \"test_invalid_value (model_fields.test_autofield.SmallAutoFieldTests)\", \"test_redundant_backend_range_validators (model_fields.test_autofield.SmallAutoFieldTests)\", \"test_rel_db_type (model_fields.test_autofield.SmallAutoFieldTests)\", \"test_types (model_fields.test_autofield.SmallAutoFieldTests)\", \"test_backend_range_save (model_fields.test_integerfield.SmallIntegerFieldTests)\", \"test_backend_range_validation (model_fields.test_integerfield.SmallIntegerFieldTests)\", \"test_coercing (model_fields.test_integerfield.SmallIntegerFieldTests)\", \"test_documented_range (model_fields.test_integerfield.SmallIntegerFieldTests)\", \"test_invalid_value (model_fields.test_integerfield.SmallIntegerFieldTests)\", \"test_redundant_backend_range_validators (model_fields.test_integerfield.SmallIntegerFieldTests)\", \"test_rel_db_type (model_fields.test_integerfield.SmallIntegerFieldTests)\", \"test_types (model_fields.test_integerfield.SmallIntegerFieldTests)\", \"test_backend_range_save (model_fields.test_autofield.AutoFieldTests)\", \"test_backend_range_validation (model_fields.test_autofield.AutoFieldTests)\", \"test_coercing (model_fields.test_autofield.AutoFieldTests)\", \"test_documented_range (model_fields.test_autofield.AutoFieldTests)\", \"test_invalid_value (model_fields.test_autofield.AutoFieldTests)\", \"test_redundant_backend_range_validators (model_fields.test_autofield.AutoFieldTests)\", \"test_rel_db_type (model_fields.test_autofield.AutoFieldTests)\", \"test_types (model_fields.test_autofield.AutoFieldTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.663440",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}