{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9386",
  "base_commit": "805fd98e00229b419106063e5fd1566ca4bd938f",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1982,11 +1982,13 @@ def add_directive_header(self, sig: str) -> None:\n             self.add_line('   :annotation: %s' % self.options.annotation,\n                           sourcename)\n         else:\n-            # obtain annotation for this data\n-            annotations = get_type_hints(self.parent, None, self.config.autodoc_type_aliases)\n-            if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n-                self.add_line('   :type: ' + objrepr, sourcename)\n+            if self.config.autodoc_typehints != 'none':\n+                # obtain annotation for this data\n+                annotations = get_type_hints(self.parent, None,\n+                                             self.config.autodoc_type_aliases)\n+                if self.objpath[-1] in annotations:\n+                    objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n \n             try:\n                 if self.options.no_value or self.should_suppress_value_header():\n@@ -2584,11 +2586,13 @@ def add_directive_header(self, sig: str) -> None:\n         elif self.options.annotation:\n             self.add_line('   :annotation: %s' % self.options.annotation, sourcename)\n         else:\n-            # obtain type annotation for this attribute\n-            annotations = get_type_hints(self.parent, None, self.config.autodoc_type_aliases)\n-            if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n-                self.add_line('   :type: ' + objrepr, sourcename)\n+            if self.config.autodoc_typehints != 'none':\n+                # obtain type annotation for this attribute\n+                annotations = get_type_hints(self.parent, None,\n+                                             self.config.autodoc_type_aliases)\n+                if self.objpath[-1] in annotations:\n+                    objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n \n             try:\n                 if self.options.no_value or self.should_suppress_value_header():\n@@ -2672,7 +2676,7 @@ def add_directive_header(self, sig: str) -> None:\n         if inspect.isabstractmethod(self.object):\n             self.add_line('   :abstractmethod:', sourcename)\n \n-        if safe_getattr(self.object, 'fget', None):\n+        if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':\n             try:\n                 signature = inspect.signature(self.object.fget,\n                                               type_aliases=self.config.autodoc_type_aliases)\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -1,5 +1,8 @@\n from typing import Any, Tuple, Union\n \n+CONST1: int\n+CONST2: int = 1\n+\n \n def incr(a: int, b: int = 1) -> int:\n     return a + b\n@@ -11,6 +14,9 @@ def decr(a, b = 1):\n \n \n class Math:\n+    CONST1: int\n+    CONST2: int = 1\n+\n     def __init__(self, s: str, o: Any = None) -> None:\n         pass\n \n@@ -32,6 +38,10 @@ def horse(self,\n         # type: (...) -> None\n         return\n \n+    @property\n+    def prop(self) -> int:\n+        return 0\n+\n \n def tuple_args(x: Tuple[int, Union[int, str]]) -> Tuple[int, int]:\n     pass\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -554,10 +554,26 @@ def test_autodoc_typehints_signature(app):\n         '.. py:module:: target.typehints',\n         '',\n         '',\n+        '.. py:data:: CONST1',\n+        '   :module: target.typehints',\n+        '   :type: int',\n+        '',\n+        '',\n         '.. py:class:: Math(s: str, o: Optional[Any] = None)',\n         '   :module: target.typehints',\n         '',\n         '',\n+        '   .. py:attribute:: Math.CONST1',\n+        '      :module: target.typehints',\n+        '      :type: int',\n+        '',\n+        '',\n+        '   .. py:attribute:: Math.CONST2',\n+        '      :module: target.typehints',\n+        '      :type: int',\n+        '      :value: 1',\n+        '',\n+        '',\n         '   .. py:method:: Math.decr(a: int, b: int = 1) -> int',\n         '      :module: target.typehints',\n         '',\n@@ -574,6 +590,11 @@ def test_autodoc_typehints_signature(app):\n         '      :module: target.typehints',\n         '',\n         '',\n+        '   .. py:property:: Math.prop',\n+        '      :module: target.typehints',\n+        '      :type: int',\n+        '',\n+        '',\n         '.. py:class:: NewAnnotation(i: int)',\n         '   :module: target.typehints',\n         '',\n@@ -620,10 +641,23 @@ def test_autodoc_typehints_none(app):\n         '.. py:module:: target.typehints',\n         '',\n         '',\n+        '.. py:data:: CONST1',\n+        '   :module: target.typehints',\n+        '',\n+        '',\n         '.. py:class:: Math(s, o=None)',\n         '   :module: target.typehints',\n         '',\n         '',\n+        '   .. py:attribute:: Math.CONST1',\n+        '      :module: target.typehints',\n+        '',\n+        '',\n+        '   .. py:attribute:: Math.CONST2',\n+        '      :module: target.typehints',\n+        '      :value: 1',\n+        '',\n+        '',\n         '   .. py:method:: Math.decr(a, b=1)',\n         '      :module: target.typehints',\n         '',\n@@ -640,6 +674,10 @@ def test_autodoc_typehints_none(app):\n         '      :module: target.typehints',\n         '',\n         '',\n+        '   .. py:property:: Math.prop',\n+        '      :module: target.typehints',\n+        '',\n+        '',\n         '.. py:class:: NewAnnotation(i)',\n         '   :module: target.typehints',\n         '',\n",
  "problem_statement": "Autodoc still using typehint types in properties\n**Describe the bug**\r\nDespite `autodoc_typehints` being set to `none`, properties have type hints rendered in the output.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior. Download the zip below and go to `docs` then run `make html`\r\n\r\n**Expected behavior**\r\nNo type hints in the output.\r\n\r\n**Your project**\r\n[sphinx-bug.zip](https://github.com/sphinx-doc/sphinx/files/6724522/sphinx-bug.zip)\r\n\r\n**Screenshots**\r\n![image](https://user-images.githubusercontent.com/1695103/123601649-ebd3fd80-d7c5-11eb-9b01-f8cb67cdc0f7.png)\r\n\r\n**Environment info**\r\n- OS: Windows 10\r\n- Python version: 3.9.2\r\n- Sphinx version: 4.0.2\r\n- Sphinx extensions:  sphinx.ext.autodoc\r\n- Extra tools: N/A\r\n\r\n**Additional context**\r\n\r\nIssue discovered in a real project [here](https://discordpy.readthedocs.io/en/master/api.html#discord.PartialEmoji.created_at) (edit: I removed it using CSS).\r\n\n",
  "hints_text": "",
  "created_at": "2021-06-29T12:49:25Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_mixed\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_new\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\"]",
  "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.066547",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}