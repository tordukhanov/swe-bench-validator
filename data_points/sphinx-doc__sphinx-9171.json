{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9171",
  "base_commit": "1513d5077439b6f1e69108233d1a08059f420970",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -70,6 +70,9 @@ class _All:\n     def __contains__(self, item: Any) -> bool:\n         return True\n \n+    def append(self, item: Any) -> None:\n+        pass  # nothing\n+\n \n class _Empty:\n     \"\"\"A special value for :exclude-members: that never matches to any member.\"\"\"\n@@ -1440,6 +1443,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n \n     def __init__(self, *args: Any) -> None:\n         super().__init__(*args)\n+\n+        if self.config.autodoc_class_signature == 'separated':\n+            # show __init__() method\n+            if self.options.special_members is None:\n+                self.options['special-members'] = {'__new__', '__init__'}\n+            else:\n+                self.options.special_members.append('__new__')\n+                self.options.special_members.append('__init__')\n+\n         merge_members_option(self.options)\n \n     @classmethod\n@@ -1556,6 +1568,9 @@ def format_args(self, **kwargs: Any) -> str:\n     def format_signature(self, **kwargs: Any) -> str:\n         if self.doc_as_attr:\n             return ''\n+        if self.config.autodoc_class_signature == 'separated':\n+            # do not show signatures\n+            return ''\n \n         sig = super().format_signature()\n         sigs = []\n@@ -2193,6 +2208,38 @@ def dummy():\n         else:\n             return None\n \n+    def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n+        if self.objpath[-1] == '__init__':\n+            docstring = getdoc(self.object, self.get_attr,\n+                               self.config.autodoc_inherit_docstrings,\n+                               self.parent, self.object_name)\n+            if (docstring is not None and\n+                (docstring == object.__init__.__doc__ or  # for pypy\n+                 docstring.strip() == object.__init__.__doc__)):  # for !pypy\n+                docstring = None\n+            if docstring:\n+                tab_width = self.directive.state.document.settings.tab_width\n+                return [prepare_docstring(docstring, tabsize=tab_width)]\n+            else:\n+                return []\n+        elif self.objpath[-1] == '__new__':\n+            __new__ = self.get_attr(self.object, '__new__', None)\n+            if __new__:\n+                docstring = getdoc(__new__, self.get_attr,\n+                                   self.config.autodoc_inherit_docstrings,\n+                                   self.parent, self.object_name)\n+                if (docstring is not None and\n+                    (docstring == object.__new__.__doc__ or  # for pypy\n+                     docstring.strip() == object.__new__.__doc__)):  # for !pypy\n+                    docstring = None\n+            if docstring:\n+                tab_width = self.directive.state.document.settings.tab_width\n+                return [prepare_docstring(docstring, tabsize=tab_width)]\n+            else:\n+                return []\n+        else:\n+            return super().get_doc()\n+\n \n class NonDataDescriptorMixin(DataDocumenterMixinBase):\n     \"\"\"\n@@ -2662,6 +2709,7 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_config_value('autoclass_content', 'class', True, ENUM('both', 'class', 'init'))\n     app.add_config_value('autodoc_member_order', 'alphabetical', True,\n                          ENUM('alphabetic', 'alphabetical', 'bysource', 'groupwise'))\n+    app.add_config_value('autodoc_class_signature', 'mixed', True, ENUM('mixed', 'separated'))\n     app.add_config_value('autodoc_default_options', {}, True)\n     app.add_config_value('autodoc_docstring_signature', True, True)\n     app.add_config_value('autodoc_mock_imports', [], True)\ndiff --git a/sphinx/ext/autosummary/__init__.py b/sphinx/ext/autosummary/__init__.py\n--- a/sphinx/ext/autosummary/__init__.py\n+++ b/sphinx/ext/autosummary/__init__.py\n@@ -174,6 +174,7 @@ def __init__(self) -> None:\n         document = Struct(settings=settings)\n         env = BuildEnvironment()\n         env.config = Config()\n+        env.config.add('autodoc_class_signature', 'mixed', True, None)\n         state = Struct(document=document)\n         super().__init__(env, None, Options(), 0, state)\n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -140,6 +140,57 @@ def test_autoclass_content_init(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_class_signature_mixed(app):\n+    app.config.autodoc_class_signature = 'mixed'\n+    options = {\"members\": None,\n+               \"undoc-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.classes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar(x, y)',\n+        '   :module: target.classes',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_class_signature_separated_init(app):\n+    app.config.autodoc_class_signature = 'separated'\n+    options = {\"members\": None,\n+               \"undoc-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.classes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar',\n+        '   :module: target.classes',\n+        '',\n+        '',\n+        '   .. py:method:: Bar.__init__(x, y)',\n+        '      :module: target.classes',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_class_signature_separated_new(app):\n+    app.config.autodoc_class_signature = 'separated'\n+    options = {\"members\": None,\n+               \"undoc-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.classes.Baz', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Baz',\n+        '   :module: target.classes',\n+        '',\n+        '',\n+        '   .. py:method:: Baz.__new__(cls, x, y)',\n+        '      :module: target.classes',\n+        '      :staticmethod:',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autoclass_content_both(app):\n     app.config.autoclass_content = 'both'\n",
  "problem_statement": "Omitting constructor signature from class header using `autoclass`\nI'm a bit surprised to see that (in the Python domain)\r\n```\r\n.. autoclass:: Foo\r\n   ...\r\n```\r\nwill create a heading like `class Foo(*args)` which seems quite unintuitive to me, as it mixes two concepts: the declaration of \"class Foo\", with a constructor call \"Foo(*args)\". How can I suppress the (automatic) addition of the constructor signature to the generated heading ?\r\n\r\nI actually want to document the constructor with an additional nested `.. automethod::` directive, and I also have an overloaded `__call__` method, making the above all the more confusing.\r\n\r\nAm I missing or misunderstanding something ?\n",
  "hints_text": "Unfortunately, there are no way to do that. The `autoclass` directive always shows its signature automatically.\r\n\r\n+1: I agree that it is valuable if we can show explanations both of the class and `__init__()` method independently.\nCan this issue be renamed to smth. like \"Omitting constructor signature from class header\" ? I had a hard time finding it.\nMy use case is documenting a serializer, a class derived from [rest_framework.serializers.ModelSerializer](https://www.django-rest-framework.org/api-guide/serializers/).\r\n\r\n```\r\nclass OrderSerializer(serializers.ModelSerializer):\r\n  ...\r\n```\r\n\r\nThis class is only constructed by the framework, and never constructed by the user, but in my docs I get\r\n\r\n```\r\nclass OrderSerializer(instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs)\r\n  ...\r\n```\r\n\r\nThere is no way to remove the constructor signature, which is long, ugly, and totally irrelevant for people reading the docs.",
  "created_at": "2021-05-05T10:25:44Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_new\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_mixed\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init_no_undoc\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_both\", \"tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\"]",
  "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.063025",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}