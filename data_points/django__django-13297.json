{
  "repo": "django/django",
  "instance_id": "django__django-13297",
  "base_commit": "8954f255bbf5f4ee997fd6de62cb50fc9b5dd697",
  "patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -11,7 +11,7 @@\n from django.urls import reverse\n from django.utils.decorators import classonlymethod\n from django.utils.deprecation import RemovedInDjango40Warning\n-from django.utils.functional import SimpleLazyObject\n+from django.utils.functional import lazy\n \n logger = logging.getLogger('django.request')\n \n@@ -169,7 +169,6 @@ def _wrap_url_kwargs_with_deprecation_warning(url_kwargs):\n     context_kwargs = {}\n     for key, value in url_kwargs.items():\n         # Bind into function closure.\n-        @SimpleLazyObject\n         def access_value(key=key, value=value):\n             warnings.warn(\n                 'TemplateView passing URL kwargs to the context is '\n@@ -178,7 +177,7 @@ def access_value(key=key, value=value):\n                 RemovedInDjango40Warning, stacklevel=2,\n             )\n             return value\n-        context_kwargs[key] = access_value\n+        context_kwargs[key] = lazy(access_value, type(value))()\n     return context_kwargs\n \n \n",
  "test_patch": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -3,7 +3,8 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n from django.test import (\n-    RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n+    RequestFactory, SimpleTestCase, TestCase, ignore_warnings,\n+    override_settings,\n )\n from django.test.utils import require_jinja2\n from django.urls import resolve\n@@ -11,6 +12,7 @@\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n+from .models import Artist\n \n \n class SimpleView(View):\n@@ -571,7 +573,9 @@ def test_template_mixin_without_template(self):\n \n \n @override_settings(ROOT_URLCONF='generic_views.urls')\n-class DeprecationTests(SimpleTestCase):\n+class DeprecationTests(TestCase):\n+    rf = RequestFactory()\n+\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_template_params(self):\n         \"\"\"A generic template view passes kwargs as context.\"\"\"\n@@ -603,3 +607,17 @@ def test_template_params_warning(self):\n             str(response.context['foo2'])\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class ArtistView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, *, artist_name, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                artist = Artist.objects.get(name=artist_name)\n+                return {**context, 'artist': artist}\n+\n+        artist = Artist.objects.create(name='Rene Magritte')\n+        response = ArtistView.as_view()(self.rf.get('/'), artist_name=artist.name)\n+        self.assertEqual(response.context_data['artist'], artist)\n",
  "problem_statement": "TemplateView.get_context_data()'s kwargs returns SimpleLazyObjects that causes a crash when filtering.\nDescription\n\t\nExample Code that works in 3.0, but not in 3.1:\nclass OfferView(TemplateView):\n\ttemplate_name = \"offers/offer.html\"\n\tdef get_context_data(self, **kwargs):\n\t\toffer_slug = kwargs.get(\"offer_slug\", \"\")\n\t\toffer = get_object_or_404(Account, slug=offer_slug)\n\t\treturn {\"offer\": offer, \"offer_slug\": offer_slug}\nIn order to make this work in 3.1, you have to explicitly convert the result of kwargs.get() to a string to get the SimpleLazyObject to resolve:\nclass OfferView(TemplateView):\n\ttemplate_name = \"offers/offer.html\"\n\tdef get_context_data(self, **kwargs):\n\t\toffer_slug = kwargs.get(\"offer_slug\", \"\")\n\t\toffer = get_object_or_404(Account, slug=str(offer_slug))\n\t\treturn {\"offer\": offer, \"offer_slug\": offer_slug}\nThe error generated if you don't is:\nError binding parameter 0 - probably unsupported type\nfrom django/db/backends/sqlite3/operations.py, line 144, in _quote_params_for_last_executed_query\nIn both cases, the urls.py looks like:\npath(\n\t\t\"/offers/<slug:offer_slug>/\",\n\t\tOfferView.as_view(),\n\t\tname=\"offer_view\",\n\t),\nWhen debugging, I found that offer_slug (coming in from kwargs.get) was of type 'SimpleLazyObject' in Django 3.1, and when I explicitly converted it to a string, get_object_or_404 behaved as expected.\nThis is using Python 3.7.8 with SQLite.\n",
  "hints_text": "Thanks for the report. get_object_or_404() and QuerySet.filter() with SimpleLazyObject throw the same exception in Django 2.2 or 3.0. TemplateView.get_context_data()'s kwargs returns SimpleLazyObjects in Django 3.1 which causes a crash. Passing URL kwargs into context is deprecated (see #19878) but should still work in Django 3.1 and 3.2. Regression in 4ed534758cb6a11df9f49baddecca5a6cdda9311. Reproduced at 60626162f76f26d32a38d18151700cb041201fb3.",
  "created_at": "2020-08-12T11:20:33Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_template_params_filtering (generic_views.test_base.DeprecationTests)\"]",
  "PASS_TO_PASS": "[\"test_get_context_data_super (generic_views.test_base.GetContextDataTest)\", \"test_object_at_custom_name_in_context_data (generic_views.test_base.GetContextDataTest)\", \"test_object_in_get_context_data (generic_views.test_base.GetContextDataTest)\", \"test_overwrite_queryset (generic_views.test_base.UseMultipleObjectMixinTest)\", \"test_use_queryset_from_view (generic_views.test_base.UseMultipleObjectMixinTest)\", \"test_template_mixin_without_template (generic_views.test_base.SingleObjectTemplateResponseMixinTest)\", \"test_args_kwargs_request_on_self (generic_views.test_base.ViewTest)\", \"test_calling_more_than_once (generic_views.test_base.ViewTest)\", \"test_class_attributes (generic_views.test_base.ViewTest)\", \"test_direct_instantiation (generic_views.test_base.ViewTest)\", \"test_dispatch_decoration (generic_views.test_base.ViewTest)\", \"test_get_and_head (generic_views.test_base.ViewTest)\", \"test_get_and_post (generic_views.test_base.ViewTest)\", \"test_get_only (generic_views.test_base.ViewTest)\", \"test_head_no_get (generic_views.test_base.ViewTest)\", \"test_invalid_keyword_argument (generic_views.test_base.ViewTest)\", \"test_no_init_args (generic_views.test_base.ViewTest)\", \"test_no_init_kwargs (generic_views.test_base.ViewTest)\", \"test_not_calling_parent_setup_error (generic_views.test_base.ViewTest)\", \"test_options (generic_views.test_base.ViewTest)\", \"test_options_for_get_and_post_view (generic_views.test_base.ViewTest)\", \"test_options_for_get_view (generic_views.test_base.ViewTest)\", \"test_options_for_post_view (generic_views.test_base.ViewTest)\", \"test_overridden_setup (generic_views.test_base.ViewTest)\", \"test_pathological_http_method (generic_views.test_base.ViewTest)\", \"test_setup_adds_args_kwargs_request (generic_views.test_base.ViewTest)\", \"test_setup_get_and_head (generic_views.test_base.ViewTest)\", \"Default is a temporary redirect\", \"test_direct_instantiation (generic_views.test_base.RedirectViewTest)\", \"GET arguments can be included in the redirected URL\", \"GET arguments can be URL-encoded when included in the redirected URL\", \"Named pattern parameter should reverse to the matching pattern\", \"test_named_url_pattern_using_args (generic_views.test_base.RedirectViewTest)\", \"Without any configuration, returns HTTP 410 GONE\", \"Redirection URLs can be parameterized\", \"Permanent redirects are an option\", \"regression for #16705\", \"Temporary redirects are an option\", \"A template view can be customized to return extra context.\", \"A generic template view passes kwargs as context.\", \"test_template_params_warning (generic_views.test_base.DeprecationTests)\", \"test_cached_views (generic_views.test_base.TemplateViewTest)\", \"test_content_type (generic_views.test_base.TemplateViewTest)\", \"test_extra_context (generic_views.test_base.TemplateViewTest)\", \"test_get (generic_views.test_base.TemplateViewTest)\", \"test_get_generic_template (generic_views.test_base.TemplateViewTest)\", \"test_get_template_attribute (generic_views.test_base.TemplateViewTest)\", \"test_head (generic_views.test_base.TemplateViewTest)\", \"test_resolve_login_required_view (generic_views.test_base.TemplateViewTest)\", \"test_resolve_view (generic_views.test_base.TemplateViewTest)\", \"test_template_engine (generic_views.test_base.TemplateViewTest)\", \"test_template_name_required (generic_views.test_base.TemplateViewTest)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.651691",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}