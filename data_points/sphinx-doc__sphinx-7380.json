{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7380",
  "base_commit": "6deb592a2fadbf88b7a00a332837a81a3198a830",
  "patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -1505,8 +1505,38 @@ def describe_signature(self, signode: TextElement, mode: str,\n             self.exprs[i].describe_signature(signode, mode, env, symbol)\n \n \n+class ASTBracedInitList(ASTBase):\n+    def __init__(self, exprs: List[Union[ASTExpression, \"ASTBracedInitList\"]],\n+                 trailingComma: bool) -> None:\n+        self.exprs = exprs\n+        self.trailingComma = trailingComma\n+\n+    def get_id(self, version: int) -> str:\n+        return \"il%sE\" % ''.join(e.get_id(version) for e in self.exprs)\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        exprs = [transform(e) for e in self.exprs]\n+        trailingComma = ',' if self.trailingComma else ''\n+        return '{%s%s}' % (', '.join(exprs), trailingComma)\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        verify_description_mode(mode)\n+        signode.append(nodes.Text('{'))\n+        first = True\n+        for e in self.exprs:\n+            if not first:\n+                signode.append(nodes.Text(', '))\n+            else:\n+                first = False\n+            e.describe_signature(signode, mode, env, symbol)\n+        if self.trailingComma:\n+            signode.append(nodes.Text(','))\n+        signode.append(nodes.Text('}'))\n+\n+\n class ASTAssignmentExpr(ASTExpression):\n-    def __init__(self, exprs: List[ASTExpression], ops: List[str]):\n+    def __init__(self, exprs: List[Union[ASTExpression, ASTBracedInitList]], ops: List[str]):\n         assert len(exprs) > 0\n         assert len(exprs) == len(ops) + 1\n         self.exprs = exprs\n@@ -1540,6 +1570,31 @@ def describe_signature(self, signode: TextElement, mode: str,\n             self.exprs[i].describe_signature(signode, mode, env, symbol)\n \n \n+class ASTCommaExpr(ASTExpression):\n+    def __init__(self, exprs: List[ASTExpression]):\n+        assert len(exprs) > 0\n+        self.exprs = exprs\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return ', '.join(transform(e) for e in self.exprs)\n+\n+    def get_id(self, version: int) -> str:\n+        id_ = _id_operator_v2[',']\n+        res = []\n+        for i in range(len(self.exprs) - 1):\n+            res.append(id_)\n+            res.append(self.exprs[i].get_id(version))\n+        res.append(self.exprs[-1].get_id(version))\n+        return ''.join(res)\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        self.exprs[0].describe_signature(signode, mode, env, symbol)\n+        for i in range(1, len(self.exprs)):\n+            signode.append(nodes.Text(', '))\n+            self.exprs[i].describe_signature(signode, mode, env, symbol)\n+\n+\n class ASTFallbackExpr(ASTExpression):\n     def __init__(self, expr: str):\n         self.expr = expr\n@@ -1658,9 +1713,11 @@ def describe_signature(self, signode: TextElement, mode: str,\n \n \n class ASTTemplateArgs(ASTBase):\n-    def __init__(self, args: List[Union[\"ASTType\", ASTTemplateArgConstant]]) -> None:\n+    def __init__(self, args: List[Union[\"ASTType\", ASTTemplateArgConstant]],\n+                 packExpansion: bool) -> None:\n         assert args is not None\n         self.args = args\n+        self.packExpansion = packExpansion\n \n     def get_id(self, version: int) -> str:\n         if version == 1:\n@@ -1672,13 +1729,21 @@ def get_id(self, version: int) -> str:\n \n         res = []\n         res.append('I')\n-        for a in self.args:\n-            res.append(a.get_id(version))\n+        if len(self.args) > 0:\n+            for a in self.args[:-1]:\n+                res.append(a.get_id(version))\n+            if self.packExpansion:\n+                res.append('J')\n+            res.append(self.args[-1].get_id(version))\n+            if self.packExpansion:\n+                res.append('E')\n         res.append('E')\n         return ''.join(res)\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n         res = ', '.join(transform(a) for a in self.args)\n+        if self.packExpansion:\n+            res += '...'\n         return '<' + res + '>'\n \n     def describe_signature(self, signode: TextElement, mode: str,\n@@ -1691,6 +1756,8 @@ def describe_signature(self, signode: TextElement, mode: str,\n                 signode += nodes.Text(', ')\n             first = False\n             a.describe_signature(signode, 'markType', env, symbol=symbol)\n+        if self.packExpansion:\n+            signode += nodes.Text('...')\n         signode += nodes.Text('>')\n \n \n@@ -2641,7 +2708,7 @@ def describe_signature(self, signode: TextElement, mode: str,\n ##############################################################################################\n \n class ASTPackExpansionExpr(ASTExpression):\n-    def __init__(self, expr: ASTExpression):\n+    def __init__(self, expr: Union[ASTExpression, ASTBracedInitList]):\n         self.expr = expr\n \n     def _stringify(self, transform: StringifyTransform) -> str:\n@@ -2658,7 +2725,7 @@ def describe_signature(self, signode: TextElement, mode: str,\n \n \n class ASTParenExprList(ASTBase):\n-    def __init__(self, exprs: List[ASTExpression]) -> None:\n+    def __init__(self, exprs: List[Union[ASTExpression, ASTBracedInitList]]) -> None:\n         self.exprs = exprs\n \n     def get_id(self, version: int) -> str:\n@@ -2682,35 +2749,6 @@ def describe_signature(self, signode: TextElement, mode: str,\n         signode.append(nodes.Text(')'))\n \n \n-class ASTBracedInitList(ASTBase):\n-    def __init__(self, exprs: List[ASTExpression], trailingComma: bool) -> None:\n-        self.exprs = exprs\n-        self.trailingComma = trailingComma\n-\n-    def get_id(self, version: int) -> str:\n-        return \"il%sE\" % ''.join(e.get_id(version) for e in self.exprs)\n-\n-    def _stringify(self, transform: StringifyTransform) -> str:\n-        exprs = [transform(e) for e in self.exprs]\n-        trailingComma = ',' if self.trailingComma else ''\n-        return '{%s%s}' % (', '.join(exprs), trailingComma)\n-\n-    def describe_signature(self, signode: TextElement, mode: str,\n-                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n-        verify_description_mode(mode)\n-        signode.append(nodes.Text('{'))\n-        first = True\n-        for e in self.exprs:\n-            if not first:\n-                signode.append(nodes.Text(', '))\n-            else:\n-                first = False\n-            e.describe_signature(signode, mode, env, symbol)\n-        if self.trailingComma:\n-            signode.append(nodes.Text(','))\n-        signode.append(nodes.Text('}'))\n-\n-\n class ASTInitializer(ASTBase):\n     def __init__(self, value: Union[ASTExpression, ASTBracedInitList],\n                  hasAssign: bool = True) -> None:\n@@ -4751,7 +4789,7 @@ def _parse_fold_or_paren_expression(self) -> ASTExpression:\n             self.pos = pos\n             # fall back to a paren expression\n             try:\n-                res = self._parse_expression(inTemplate=False)\n+                res = self._parse_expression()\n                 self.skip_ws()\n                 if not self.skip_string(')'):\n                     self.fail(\"Expected ')' in end of parenthesized expression.\")\n@@ -4799,7 +4837,9 @@ def _parse_primary_expression(self) -> ASTExpression:\n         return None\n \n     def _parse_initializer_list(self, name: str, open: str, close: str\n-                                ) -> Tuple[List[ASTExpression], bool]:\n+                                ) -> Tuple[List[Union[ASTExpression,\n+                                                      ASTBracedInitList]],\n+                                           bool]:\n         # Parse open and close with the actual initializer-list inbetween\n         # -> initializer-clause '...'[opt]\n         #  | initializer-list ',' initializer-clause '...'[opt]\n@@ -4809,11 +4849,11 @@ def _parse_initializer_list(self, name: str, open: str, close: str\n         if self.skip_string(close):\n             return [], False\n \n-        exprs = []  # type: List[ASTExpression]\n+        exprs = []  # type: List[Union[ASTExpression, ASTBracedInitList]]\n         trailingComma = False\n         while True:\n             self.skip_ws()\n-            expr = self._parse_expression(inTemplate=False)\n+            expr = self._parse_initializer_clause()\n             self.skip_ws()\n             if self.skip_string('...'):\n                 exprs.append(ASTPackExpansionExpr(expr))\n@@ -4843,6 +4883,12 @@ def _parse_paren_expression_list(self) -> ASTParenExprList:\n             return None\n         return ASTParenExprList(exprs)\n \n+    def _parse_initializer_clause(self) -> Union[ASTExpression, ASTBracedInitList]:\n+        bracedInitList = self._parse_braced_init_list()\n+        if bracedInitList is not None:\n+            return bracedInitList\n+        return self._parse_assignment_expression(inTemplate=False)\n+\n     def _parse_braced_init_list(self) -> ASTBracedInitList:\n         # -> '{' initializer-list ','[opt] '}'\n         #  | '{' '}'\n@@ -4902,7 +4948,7 @@ def _parse_postfix_expression(self) -> ASTPostfixExpr:\n                 self.fail(\"Expected '(' in '%s'.\" % cast)\n \n             def parser():\n-                return self._parse_expression(inTemplate=False)\n+                return self._parse_expression()\n             expr = self._parse_expression_fallback([')'], parser)\n             self.skip_ws()\n             if not self.skip_string(\")\"):\n@@ -4923,7 +4969,7 @@ def parser():\n                 try:\n \n                     def parser():\n-                        return self._parse_expression(inTemplate=False)\n+                        return self._parse_expression()\n                     expr = self._parse_expression_fallback([')'], parser)\n                     prefix = ASTTypeId(expr, isType=False)\n                     if not self.skip_string(')'):\n@@ -4970,7 +5016,7 @@ def parser():\n             self.skip_ws()\n             if prefixType in ['expr', 'cast', 'typeid']:\n                 if self.skip_string_and_ws('['):\n-                    expr = self._parse_expression(inTemplate=False)\n+                    expr = self._parse_expression()\n                     self.skip_ws()\n                     if not self.skip_string(']'):\n                         self.fail(\"Expected ']' in end of postfix expression.\")\n@@ -5061,7 +5107,7 @@ def _parse_unary_expression(self) -> ASTExpression:\n         if self.skip_word_and_ws('noexcept'):\n             if not self.skip_string_and_ws('('):\n                 self.fail(\"Expecting '(' after 'noexcept'.\")\n-            expr = self._parse_expression(inTemplate=False)\n+            expr = self._parse_expression()\n             self.skip_ws()\n             if not self.skip_string(')'):\n                 self.fail(\"Expecting ')' to end 'noexcept'.\")\n@@ -5194,7 +5240,7 @@ def _parse_assignment_expression(self, inTemplate: bool) -> ASTExpression:\n         #     logical-or-expression\n         #   | logical-or-expression \"?\" expression \":\" assignment-expression\n         #   | logical-or-expression assignment-operator initializer-clause\n-        exprs = []\n+        exprs = []  # type: List[Union[ASTExpression, ASTBracedInitList]]\n         ops = []\n         orExpr = self._parse_logical_or_expression(inTemplate=inTemplate)\n         exprs.append(orExpr)\n@@ -5209,7 +5255,7 @@ def _parse_assignment_expression(self, inTemplate: bool) -> ASTExpression:\n                 else:\n                     if not self.skip_string(op):\n                         continue\n-                expr = self._parse_logical_or_expression(False)\n+                expr = self._parse_initializer_clause()\n                 exprs.append(expr)\n                 ops.append(op)\n                 oneMore = True\n@@ -5226,11 +5272,19 @@ def _parse_constant_expression(self, inTemplate: bool) -> ASTExpression:\n         # TODO: use _parse_conditional_expression_tail\n         return orExpr\n \n-    def _parse_expression(self, inTemplate: bool) -> ASTExpression:\n+    def _parse_expression(self) -> ASTExpression:\n         # -> assignment-expression\n         #  | expression \",\" assignment-expresion\n-        # TODO: actually parse the second production\n-        return self._parse_assignment_expression(inTemplate=inTemplate)\n+        exprs = [self._parse_assignment_expression(inTemplate=False)]\n+        while True:\n+            self.skip_ws()\n+            if not self.skip_string(','):\n+                break\n+            exprs.append(self._parse_assignment_expression(inTemplate=False))\n+        if len(exprs) == 1:\n+            return exprs[0]\n+        else:\n+            return ASTCommaExpr(exprs)\n \n     def _parse_expression_fallback(self, end: List[str],\n                                    parser: Callable[[], ASTExpression],\n@@ -5309,13 +5363,21 @@ def _parse_operator(self) -> ASTOperator:\n         return ASTOperatorType(type)\n \n     def _parse_template_argument_list(self) -> ASTTemplateArgs:\n+        # template-argument-list: (but we include the < and > here\n+        #    template-argument ...[opt]\n+        #    template-argument-list, template-argument ...[opt]\n+        # template-argument:\n+        #    constant-expression\n+        #    type-id\n+        #    id-expression\n         self.skip_ws()\n         if not self.skip_string_and_ws('<'):\n             return None\n         if self.skip_string('>'):\n-            return ASTTemplateArgs([])\n+            return ASTTemplateArgs([], False)\n         prevErrors = []\n         templateArgs = []  # type: List[Union[ASTType, ASTTemplateArgConstant]]\n+        packExpansion = False\n         while 1:\n             pos = self.pos\n             parsedComma = False\n@@ -5323,31 +5385,35 @@ def _parse_template_argument_list(self) -> ASTTemplateArgs:\n             try:\n                 type = self._parse_type(named=False)\n                 self.skip_ws()\n-                if self.skip_string('>'):\n+                if self.skip_string_and_ws('...'):\n+                    packExpansion = True\n+                    parsedEnd = True\n+                    if not self.skip_string('>'):\n+                        self.fail('Expected \">\" after \"...\" in template argument list.')\n+                elif self.skip_string('>'):\n                     parsedEnd = True\n                 elif self.skip_string(','):\n                     parsedComma = True\n                 else:\n-                    self.fail('Expected \">\" or \",\" in template argument list.')\n+                    self.fail('Expected \"...>\", \">\" or \",\" in template argument list.')\n                 templateArgs.append(type)\n             except DefinitionError as e:\n                 prevErrors.append((e, \"If type argument\"))\n                 self.pos = pos\n                 try:\n-                    # actually here we shouldn't use the fallback parser (hence allow=False),\n-                    # because if actually took the < in an expression, then we _will_ fail,\n-                    # which is handled elsewhere. E.g., :cpp:expr:`A <= 0`.\n-                    def parser():\n-                        return self._parse_constant_expression(inTemplate=True)\n-                    value = self._parse_expression_fallback(\n-                        [',', '>'], parser, allow=False)\n+                    value = self._parse_constant_expression(inTemplate=True)\n                     self.skip_ws()\n-                    if self.skip_string('>'):\n+                    if self.skip_string_and_ws('...'):\n+                        packExpansion = True\n+                        parsedEnd = True\n+                        if not self.skip_string('>'):\n+                            self.fail('Expected \">\" after \"...\" in template argument list.')\n+                    elif self.skip_string('>'):\n                         parsedEnd = True\n                     elif self.skip_string(','):\n                         parsedComma = True\n                     else:\n-                        self.fail('Expected \">\" or \",\" in template argument list.')\n+                        self.fail('Expected \"...>\", \">\" or \",\" in template argument list.')\n                     templateArgs.append(ASTTemplateArgConstant(value))\n                 except DefinitionError as e:\n                     self.pos = pos\n@@ -5357,7 +5423,9 @@ def parser():\n             if parsedEnd:\n                 assert not parsedComma\n                 break\n-        return ASTTemplateArgs(templateArgs)\n+            else:\n+                assert not packExpansion\n+        return ASTTemplateArgs(templateArgs, packExpansion)\n \n     def _parse_nested_name(self, memberPointer: bool = False) -> ASTNestedName:\n         names = []  # type: List[ASTNestedNameElement]\n@@ -5447,7 +5515,7 @@ def _parse_trailing_type_spec(self) -> ASTTrailingTypeSpec:\n                 if not self.skip_string(')'):\n                     self.fail(\"Expected ')' after 'decltype(auto'.\")\n                 return ASTTrailingTypeSpecDecltypeAuto()\n-            expr = self._parse_expression(inTemplate=False)\n+            expr = self._parse_expression()\n             self.skip_ws()\n             if not self.skip_string(')'):\n                 self.fail(\"Expected ')' after 'decltype(<expr>'.\")\n@@ -5460,7 +5528,6 @@ def _parse_trailing_type_spec(self) -> ASTTrailingTypeSpec:\n             if self.skip_word_and_ws(k):\n                 prefix = k\n                 break\n-\n         nestedName = self._parse_nested_name()\n         return ASTTrailingTypeSpecName(prefix, nestedName)\n \n@@ -5692,7 +5759,7 @@ def _parse_declarator_name_suffix(\n                     continue\n \n                 def parser():\n-                    return self._parse_expression(inTemplate=False)\n+                    return self._parse_expression()\n                 value = self._parse_expression_fallback([']'], parser)\n                 if not self.skip_string(']'):\n                     self.fail(\"Expected ']' in end of array operator.\")\n@@ -5754,32 +5821,6 @@ def _parse_declarator(self, named: Union[bool, str], paramMode: str,\n         if typed and self.skip_string(\"...\"):\n             next = self._parse_declarator(named, paramMode, False)\n             return ASTDeclaratorParamPack(next=next)\n-        if typed:  # pointer to member\n-            pos = self.pos\n-            try:\n-                name = self._parse_nested_name(memberPointer=True)\n-                self.skip_ws()\n-                if not self.skip_string('*'):\n-                    self.fail(\"Expected '*' in pointer to member declarator.\")\n-                self.skip_ws()\n-            except DefinitionError as e:\n-                self.pos = pos\n-                prevErrors.append((e, \"If pointer to member declarator\"))\n-            else:\n-                volatile = False\n-                const = False\n-                while 1:\n-                    if not volatile:\n-                        volatile = self.skip_word_and_ws('volatile')\n-                        if volatile:\n-                            continue\n-                    if not const:\n-                        const = self.skip_word_and_ws('const')\n-                        if const:\n-                            continue\n-                    break\n-                next = self._parse_declarator(named, paramMode, typed)\n-                return ASTDeclaratorMemPtr(name, const, volatile, next=next)\n         if typed and self.current_char == '(':  # note: peeking, not skipping\n             if paramMode == \"operatorCast\":\n                 # TODO: we should be able to parse cast operators which return\n@@ -5815,9 +5856,40 @@ def _parse_declarator(self, named: Union[bool, str], paramMode: str,\n                     prevErrors.append((exNoPtrParen, \"If parenthesis in noptr-declarator\"))\n                     header = \"Error in declarator\"\n                     raise self._make_multi_error(prevErrors, header)\n+        if typed:  # pointer to member\n+            pos = self.pos\n+            try:\n+                name = self._parse_nested_name(memberPointer=True)\n+                self.skip_ws()\n+                if not self.skip_string('*'):\n+                    self.fail(\"Expected '*' in pointer to member declarator.\")\n+                self.skip_ws()\n+            except DefinitionError as e:\n+                self.pos = pos\n+                prevErrors.append((e, \"If pointer to member declarator\"))\n+            else:\n+                volatile = False\n+                const = False\n+                while 1:\n+                    if not volatile:\n+                        volatile = self.skip_word_and_ws('volatile')\n+                        if volatile:\n+                            continue\n+                    if not const:\n+                        const = self.skip_word_and_ws('const')\n+                        if const:\n+                            continue\n+                    break\n+                next = self._parse_declarator(named, paramMode, typed)\n+                return ASTDeclaratorMemPtr(name, const, volatile, next=next)\n         pos = self.pos\n         try:\n-            return self._parse_declarator_name_suffix(named, paramMode, typed)\n+            res = self._parse_declarator_name_suffix(named, paramMode, typed)\n+            # this is a heuristic for error messages, for when there is a < after a\n+            # nested name, but it was not a successful template argument list\n+            if self.current_char == '<':\n+                self.otherErrors.append(self._make_multi_error(prevErrors, \"\"))\n+            return res\n         except DefinitionError as e:\n             self.pos = pos\n             prevErrors.append((e, \"If declarator-id\"))\n@@ -5886,7 +5958,6 @@ def _parse_type(self, named: Union[bool, str], outer: str = None) -> ASTType:\n                 raise Exception('Internal error, unknown outer \"%s\".' % outer)\n             if outer != 'operatorCast':\n                 assert named\n-\n         if outer in ('type', 'function'):\n             # We allow type objects to just be a name.\n             # Some functions don't have normal return types: constructors,\n@@ -6080,8 +6151,8 @@ def _parse_template_parameter_list(self) -> ASTTemplateParams:\n         self.skip_ws()\n         if not self.skip_string(\"<\"):\n             self.fail(\"Expected '<' after 'template'\")\n+        prevErrors = []\n         while 1:\n-            prevErrors = []\n             self.skip_ws()\n             if self.skip_word('template'):\n                 # declare a tenplate template parameter\n@@ -6134,6 +6205,7 @@ def _parse_template_parameter_list(self) -> ASTTemplateParams:\n             if self.skip_string('>'):\n                 return ASTTemplateParams(templateParams)\n             elif self.skip_string(','):\n+                prevErrors = []\n                 continue\n             else:\n                 header = \"Error in template parameter list.\"\n@@ -6353,7 +6425,7 @@ def parse_xref_object(self) -> Tuple[Union[ASTNamespace, ASTDeclaration], bool]:\n     def parse_expression(self) -> Union[ASTExpression, ASTType]:\n         pos = self.pos\n         try:\n-            expr = self._parse_expression(False)\n+            expr = self._parse_expression()\n             self.skip_ws()\n             self.assert_end()\n             return expr\n",
  "test_patch": "diff --git a/tests/test_domain_cpp.py b/tests/test_domain_cpp.py\n--- a/tests/test_domain_cpp.py\n+++ b/tests/test_domain_cpp.py\n@@ -274,6 +274,9 @@ class Config:\n     exprCheck('a xor_eq 5', 'eO1aL5E')\n     exprCheck('a |= 5', 'oR1aL5E')\n     exprCheck('a or_eq 5', 'oR1aL5E')\n+    exprCheck('a = {1, 2, 3}', 'aS1ailL1EL2EL3EE')\n+    # comma operator\n+    exprCheck('a, 5', 'cm1aL5E')\n \n     # Additional tests\n     # a < expression that starts with something that could be a template\n@@ -626,6 +629,12 @@ def test_class_definitions():\n           {2: 'I0E7has_varI1TNSt6void_tIDTadN1T3varEEEEE'})\n \n \n+    check('class', 'template<typename ...Ts> T<int (*)(Ts)...>',\n+          {2: 'IDpE1TIJPFi2TsEEE'})\n+    check('class', 'template<int... Is> T<(Is)...>',\n+          {2: 'I_DpiE1TIJX(Is)EEE', 3: 'I_DpiE1TIJX2IsEEE'})\n+\n+\n def test_union_definitions():\n     check('union', 'A', {2: \"1A\"})\n \n",
  "problem_statement": "cpp domain parens in template parameter packs fails\n**Describe the bug**\r\nI have C++ code with parentheses in the template parameter list documented as:\r\n```\r\n.. cpp:class:: template <std::integer_sequence<bool, (static_cast<void>(Bs), false)>> foo\r\n\r\n    Broken because of parentheses around `static_cast<void>(Bs), false`\r\n```\r\nThe same issue comes up if I use a C-style cast:\r\n```\r\n.. cpp:class:: template <std::integer_sequence<bool, (void(Bs), false)>> foo\r\n\r\n    Broken because of parentheses around `void(Bs), false`\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n$ git clone git@github.com:nilsdeppe/sphinx-bugs.git\r\n$ cd ./sphinx-bugs/issue_cast_templates\r\n$ sphinx-build ./ ./build\r\n$ # open build/index.html\r\n```\r\n\r\n**Expected behavior**\r\nUsing parentheses to nest expressions inside templates works. This is fairly common when expanding parameter packs, e.g.\r\n```cpp\r\ntemplate <bool... Bs>\r\nusing flat_any = std::integral_constant<\r\n    bool,\r\n    not std::is_same<\r\n        value_list<bool, Bs...>,\r\n        value_list<bool, (static_cast<void>(Bs), false)...>>::value>;\r\n```\r\n\r\n**Your project**\r\nI've set up a simple repo with an example of the issue: https://github.com/nilsdeppe/sphinx-bugs\r\n\r\n**Environment info**\r\n- OS: Linux\r\n- Python version: 3.8.2\r\n- Sphinx version: 2.4.4\r\n- Sphinx extensions:  \r\n- Extra tools: \r\n\r\n**Additional context**\r\nThe issue appears to be in the cpp domain, unlike #7367 I haven't had any success in diagnosing and fixing this.\r\n\r\nI've attached the build output:\r\n[build.tar.gz](https://github.com/sphinx-doc/sphinx/files/4372224/build.tar.gz)\r\n\r\n\r\n\n",
  "hints_text": "Thanks for reporting! Parsing expressions in template parameter and argument lists is quite icky, and it looks to me that with the 3.x branch the nature of the errors is slightly different, but still present. I'll try to dig into it as soon as possible.\nSorry, previous comment was on wrong issue by accident... \r\n\r\nI'm very sympathetic to how difficult C++ is to parse... A possible option that I fully understand you may not want to entertain would be to treat the template parameters verbatim without parsing, by which I mean adding an option to control handling into Sphinx. I guess this would mean no links for classes/types in the arguments, though this is something I personally would be okay with if it allows us to use Sphinx instead of Doxygen :smile: \nActually, there is already this verbatim mode for expressions (the ``_parse_expression_fallback`` method), but unfortunately that sometimes introduces additional problems or hides the underlying issue in strange ways :-).\nAh okay, thanks for explaining that :) If only C++ was easier to parse :smile: ",
  "created_at": "2020-03-25T13:08:37Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/test_domain_cpp.py::test_expressions\", \"tests/test_domain_cpp.py::test_class_definitions\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_cpp.py::test_fundamental_types\", \"tests/test_domain_cpp.py::test_type_definitions\", \"tests/test_domain_cpp.py::test_concept_definitions\", \"tests/test_domain_cpp.py::test_member_definitions\", \"tests/test_domain_cpp.py::test_function_definitions\", \"tests/test_domain_cpp.py::test_operators\", \"tests/test_domain_cpp.py::test_union_definitions\", \"tests/test_domain_cpp.py::test_enum_definitions\", \"tests/test_domain_cpp.py::test_anon_definitions\", \"tests/test_domain_cpp.py::test_templates\", \"tests/test_domain_cpp.py::test_template_args\", \"tests/test_domain_cpp.py::test_initializers\", \"tests/test_domain_cpp.py::test_attributes\", \"tests/test_domain_cpp.py::test_xref_parsing\", \"tests/test_domain_cpp.py::test_build_domain_cpp_multi_decl_lookup\", \"tests/test_domain_cpp.py::test_build_domain_cpp_warn_template_param_qualified_name\", \"tests/test_domain_cpp.py::test_build_domain_cpp_backslash_ok\", \"tests/test_domain_cpp.py::test_build_domain_cpp_misuse_of_roles\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_True\", \"tests/test_domain_cpp.py::test_build_domain_cpp_with_add_function_parentheses_is_False\", \"tests/test_domain_cpp.py::test_xref_consistency\"]",
  "environment_setup_commit": "50d2d289e150cb429de15770bdd48a723de8c45d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.040386",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}