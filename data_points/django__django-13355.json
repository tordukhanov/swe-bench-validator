{
  "repo": "django/django",
  "instance_id": "django__django-13355",
  "base_commit": "e26a7a8ef41f0d69951affb21655cdc2cf94a209",
  "patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -146,8 +146,14 @@ def merge(*lists):\n \n     def __add__(self, other):\n         combined = Media()\n-        combined._css_lists = self._css_lists + other._css_lists\n-        combined._js_lists = self._js_lists + other._js_lists\n+        combined._css_lists = self._css_lists[:]\n+        combined._js_lists = self._js_lists[:]\n+        for item in other._css_lists:\n+            if item and item not in self._css_lists:\n+                combined._css_lists.append(item)\n+        for item in other._js_lists:\n+            if item and item not in self._js_lists:\n+                combined._js_lists.append(item)\n         return combined\n \n \n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_media.py b/tests/forms_tests/tests/test_media.py\n--- a/tests/forms_tests/tests/test_media.py\n+++ b/tests/forms_tests/tests/test_media.py\n@@ -581,6 +581,7 @@ def test_merge_css_three_way(self):\n         widget1 = Media(css={'screen': ['c.css'], 'all': ['d.css', 'e.css']})\n         widget2 = Media(css={'screen': ['a.css']})\n         widget3 = Media(css={'screen': ['a.css', 'b.css', 'c.css'], 'all': ['e.css']})\n+        widget4 = Media(css={'all': ['d.css', 'e.css'], 'screen': ['c.css']})\n         merged = widget1 + widget2\n         # c.css comes before a.css because widget1 + widget2 establishes this\n         # order.\n@@ -588,3 +589,60 @@ def test_merge_css_three_way(self):\n         merged = merged + widget3\n         # widget3 contains an explicit ordering of c.css and a.css.\n         self.assertEqual(merged._css, {'screen': ['a.css', 'b.css', 'c.css'], 'all': ['d.css', 'e.css']})\n+        # Media ordering does not matter.\n+        merged = widget1 + widget4\n+        self.assertEqual(merged._css, {'screen': ['c.css'], 'all': ['d.css', 'e.css']})\n+\n+    def test_add_js_deduplication(self):\n+        widget1 = Media(js=['a', 'b', 'c'])\n+        widget2 = Media(js=['a', 'b'])\n+        widget3 = Media(js=['a', 'c', 'b'])\n+        merged = widget1 + widget1\n+        self.assertEqual(merged._js_lists, [['a', 'b', 'c']])\n+        self.assertEqual(merged._js, ['a', 'b', 'c'])\n+        merged = widget1 + widget2\n+        self.assertEqual(merged._js_lists, [['a', 'b', 'c'], ['a', 'b']])\n+        self.assertEqual(merged._js, ['a', 'b', 'c'])\n+        # Lists with items in a different order are preserved when added.\n+        merged = widget1 + widget3\n+        self.assertEqual(merged._js_lists, [['a', 'b', 'c'], ['a', 'c', 'b']])\n+        msg = (\n+            \"Detected duplicate Media files in an opposite order: \"\n+            \"['a', 'b', 'c'], ['a', 'c', 'b']\"\n+        )\n+        with self.assertWarnsMessage(RuntimeWarning, msg):\n+            merged._js\n+\n+    def test_add_css_deduplication(self):\n+        widget1 = Media(css={'screen': ['a.css'], 'all': ['b.css']})\n+        widget2 = Media(css={'screen': ['c.css']})\n+        widget3 = Media(css={'screen': ['a.css'], 'all': ['b.css', 'c.css']})\n+        widget4 = Media(css={'screen': ['a.css'], 'all': ['c.css', 'b.css']})\n+        merged = widget1 + widget1\n+        self.assertEqual(merged._css_lists, [{'screen': ['a.css'], 'all': ['b.css']}])\n+        self.assertEqual(merged._css, {'screen': ['a.css'], 'all': ['b.css']})\n+        merged = widget1 + widget2\n+        self.assertEqual(merged._css_lists, [\n+            {'screen': ['a.css'], 'all': ['b.css']},\n+            {'screen': ['c.css']},\n+        ])\n+        self.assertEqual(merged._css, {'screen': ['a.css', 'c.css'], 'all': ['b.css']})\n+        merged = widget3 + widget4\n+        # Ordering within lists is preserved.\n+        self.assertEqual(merged._css_lists, [\n+            {'screen': ['a.css'], 'all': ['b.css', 'c.css']},\n+            {'screen': ['a.css'], 'all': ['c.css', 'b.css']}\n+        ])\n+        msg = (\n+            \"Detected duplicate Media files in an opposite order: \"\n+            \"['b.css', 'c.css'], ['c.css', 'b.css']\"\n+        )\n+        with self.assertWarnsMessage(RuntimeWarning, msg):\n+            merged._css\n+\n+    def test_add_empty(self):\n+        media = Media(css={'screen': ['a.css']}, js=['a'])\n+        empty_media = Media()\n+        merged = media + empty_media\n+        self.assertEqual(merged._css_lists, [{'screen': ['a.css']}])\n+        self.assertEqual(merged._js_lists, [['a']])\n",
  "problem_statement": "Optimize django.forms.widgets.Media.__add__.\nDescription\n\t\nWhile working with another project that make extensive use of django.forms.widgets.Media I discovered that the fix for ticket #30153 has unintended consequences on the performance of Media.__add__. If the number of Media objects added grows beyond a certain point (not sure it may be machine specific) then the performance of all subsequent Media.__add__ calls becomes terrible.\nThis was causing page load times of several minutes on my development machine. I agree that you need to delay as long as possible as #30153 intends but it seems that there probably should be an upper bound on this so that performance does not suddenly decrease.\nHere is some sample code that can reproduce the issue:\nfrom django.forms import Media\nimport datetime\ndef create_media(MediaClass):\n\t'''Creates a simple Media object with only one or two items.'''\n\treturn MediaClass(css={'all': ['main.css']}, js=['main.js'])\nstart = datetime.datetime.now()\nmedia = create_media(Media)\nfor i in range(100000):\n\tmedia = media + create_media(Media)\n\t\nprint('100000 additions took: %s' % (datetime.datetime.now() - start))\nOn my machine several runs of this code result in times between 1:35 - 1:44 (eg. 1 minute 35 seconds to 1 minute 44 seconds). However, taking away one zero from the number of media objects runs in under a second. Near as I can tell this has to do with the memory used to store these arrays and when it gets past a certain point the performance is awful. Since I am not sure if it is machine specific, for reference my machine is a i7-8700 with 64 GB RAM.\nHere is a sample that has a modified Media class that does not have theses issues:\nfrom django.forms import Media\nimport datetime\ndef create_media(MediaClass):\n\t'''Creates a simple Media object with only one or two items.'''\n\treturn MediaClass(css={'all': ['main.css']}, js=['main.js'])\nclass CustomMedia(Media):\n\tdef __add__(self, other):\n\t\tcombined = CustomMedia()\n\t\tif len(self._css_lists) + len(other._css_lists) > 1000:\n\t\t\tcombined._css_lists = [self._css, other._css]\n\t\telse:\n\t\t\tcombined._css_lists = self._css_lists + other._css_lists\n\t\t\n\t\tif len(self._js_lists) + len(other._js_lists) > 1000:\n\t\t\tcombined._js_lists = [self._js, other._js]\n\t\telse:\n\t\t\tcombined._js_lists = self._js_lists + other._js_lists\n\t\t\n\t\treturn combined\nstart = datetime.datetime.now()\nmedia = create_media(CustomMedia)\nfor i in range(100000):\n\tmedia = media + create_media(CustomMedia)\n\t\nprint('100000 additions took: %s' % (datetime.datetime.now() - start))\nWith this change it again runs in under a second. If I increase the number of loops the performance seems to change at a much more expected level.\nI set an upper limit on the length allowed before a merge occurs. I'm not sure if the number of additions allowed should be a setting that can be adjusted to meet specific needs or if something that is just \"reasonably\" high is sufficient. It does appear that limiting the total number of items in the list to about 1000 works best on my machine. I'm also not sure that this is the best solution.\nThanks for your consideration.\n",
  "hints_text": "I confirmed that 959d0c078a1c903cd1e4850932be77c4f0d2294d caused a performance issue. We should be able to optimize this by calling merge more often.\nI wonder how many distinct lists of assets you have? In the example above you're merging the same list 100'000 times. When calling merge earlier than at the end it will always be (relatively) easy to construct a failing test case. Maybe deduplicating the list of assets to merge would help? Something like (completely untested) ~/Projects/django$ git diff diff --git a/django/forms/widgets.py b/django/forms/widgets.py index c8ec3c35d5..248c29b4c1 100644 --- a/django/forms/widgets.py +++ b/django/forms/widgets.py @@ -124,7 +124,7 @@ class Media: \"\"\" dependency_graph = defaultdict(set) all_items = OrderedSet() - for list_ in filter(None, lists): + for list_ in OrderedSet(filter(None, lists)): head = list_[0] # The first items depend on nothing but have to be part of the # dependency graph to be included in the result. ~/Projects/django$ It might be better for the memory usage to deduplicate earlier (inside Media.__add__ maybe).\nj\nReplying to Matthias Kestenholz: I wonder how many distinct lists of assets you have? In the example above you're merging the same list 100'000 times. I encountered this issue when using the StreamField from Wagtail (â€‹http://wagtail.io) where we have a use case that dictates creating significant nesting of common forms to be able to edit the stream of output. To be fair, our use case of Wagtail is beyond the expected use of Wagtail as the performance is poor. I have created a customization that helps prevent the performance issue in Wagtail by declaring all stream objects as classes that only generate their forms once per object. This workaround resolves the wagtail performance issue (for our needs) but not the Media.__add__ performance issue in Django. I may be able to share my code if that will help. I do not personally own that code though so I'd have to get permission. We have nested classes of up to four or five levels deep and about 70 unique classes. But because of the way it works the number of forms generated grows exponentially. Since these are all the same classes though the number of distinct lists is limited that I think your de-duplication idea would probably work. I'm not sure whether your code works or not because I actually short circuited in a subclass of a wagtail class to overcome the issue. I might be able to replace the Django Media class via monkey patching with a different version to test but I'm not sure. If I get some time to try this out I'll post a followup comment and try to include some sample code or possibly a patch with some matching tests. Not sure how much time I will be able to dedicate to this. Thanks for looking into this issue.\nI apologize for my delay in responding to this. I had to switch tasks for a little while to a different project that took a bit longer than intended. I have done some further research into this issue and have some information based on the actual use. I have 194016 Media objects that are being added together. For the JavaScript references when the lists are de-duplicated in the way you describe above (in __add__ not in merge) the list is trimmed to 13 records. CSS is handled differently and I'm not sure it is correct (see code later in this comment). This provides a performance on my machine of around 3-5 seconds. This is not as fast as my original optimization but is definitely close enough. As far as sharing code, I cannot give you access to my repository. However, I can show you the code where the adding of Media objects is occurring at. First, here is my attempt at improving the Media.__add__ method: def combine_css(destination, css_list): for x in filter(None, css_list): for key in x.keys(): if key not in destination: destination[key] = OrderedSet() for item in x[key]: if item: destination[key].add(item) class ImprovedMedia(forms.Media): def __add__(self, other): combined = ImprovedMedia() combined._css_lists = list(filter(None, self._css_lists + other._css_lists)) css_lists = {} combine_css(css_lists, self._css_lists) combine_css(css_lists, other._css_lists) combined._css_lists = [css_lists] combined._js_lists = list(OrderedSet([tuple(x) for x in filter(None, self._js_lists + other._js_lists)])) return combined I am concerned that my combine_css() function may not be the best implementation because it does keep order but it always results in exactly one new self._css_lists which may not be the correct solution. I don't think I have enough context to know for sure if this is right. Also, I have some reservations about how I use OrderedSet for Media._css_lists because in my initial attempts on the Media._js_lists I had to convert the OrderedSet back into a list to make things work. Second, here is the code where the __add__ method is called: class StructuredStreamBlock(StreamBlock): js_classes = {} # ... def all_media(self): media = ImprovedMedia() all_blocks = self.all_blocks() for block in all_blocks: media += block. return media # ... The original code can be found in wagtail's source code here: â€‹https://github.com/wagtail/wagtail/blob/e1d3390a1f62ae4b30c0ef38e7cfa5070d8565dc/wagtail/core/blocks/base.py#L74 Unfortunately I could not think of a way to monkey patch the Media class in Django without actually changing the Django code in my virtual environment. Should I attempt at this point to create a fork and a branch (and hopefully eventually a pull request) and see if the change I make break any existing tests or should some others with more familiarity weigh in on this first?",
  "created_at": "2020-08-27T18:08:56Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_add_css_deduplication (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_add_empty (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_add_js_deduplication (forms_tests.tests.test_media.FormsMediaTestCase)\"]",
  "PASS_TO_PASS": "[\"test_combine_media (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_construction (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_form_media (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_html_safe (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_media_deduplication (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_media_dsl (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_media_inheritance (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_media_inheritance_extends (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_media_inheritance_from_property (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_media_inheritance_single_type (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_media_property (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_media_property_parent_references (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_merge (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_merge_css_three_way (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_merge_js_three_way (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_merge_js_three_way2 (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_merge_warning (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_multi_media (forms_tests.tests.test_media.FormsMediaTestCase)\", \"test_multi_widget (forms_tests.tests.test_media.FormsMediaTestCase)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.655493",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}