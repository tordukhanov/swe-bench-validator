{
  "repo": "django/django",
  "instance_id": "django__django-11169",
  "base_commit": "fc9566d42daf28cdaa25a5db1b5ade253ceb064f",
  "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -15,7 +15,7 @@\n from django.conf import settings\n from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n-from django.core.exceptions import ImproperlyConfigured\n+from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n@@ -405,7 +405,15 @@ def _check_custom_error_handlers(self):\n         # All handlers take (request, exception) arguments except handler500\n         # which takes (request).\n         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:\n-            handler, param_dict = self.resolve_error_handler(status_code)\n+            try:\n+                handler, param_dict = self.resolve_error_handler(status_code)\n+            except (ImportError, ViewDoesNotExist) as e:\n+                path = getattr(self.urlconf_module, 'handler%s' % status_code)\n+                msg = (\n+                    \"The custom handler{status_code} view '{path}' could not be imported.\"\n+                ).format(status_code=status_code, path=path)\n+                messages.append(Error(msg, hint=str(e), id='urls.E008'))\n+                continue\n             signature = inspect.signature(handler)\n             args = [None] * num_parameters\n             try:\n",
  "test_patch": "diff --git a/tests/check_framework/test_urls.py b/tests/check_framework/test_urls.py\n--- a/tests/check_framework/test_urls.py\n+++ b/tests/check_framework/test_urls.py\n@@ -181,6 +181,29 @@ def test_bad_handlers(self):\n                     id='urls.E007',\n                 ))\n \n+    @override_settings(ROOT_URLCONF='check_framework.urls.bad_error_handlers_invalid_path')\n+    def test_bad_handlers_invalid_path(self):\n+        result = check_url_config(None)\n+        paths = [\n+            'django.views.bad_handler',\n+            'django.invalid_module.bad_handler',\n+            'invalid_module.bad_handler',\n+            'django',\n+        ]\n+        hints = [\n+            \"Could not import '{}'. View does not exist in module django.views.\",\n+            \"Could not import '{}'. Parent module django.invalid_module does not exist.\",\n+            \"No module named 'invalid_module'\",\n+            \"Could not import '{}'. The path must be fully qualified.\",\n+        ]\n+        for code, path, hint, error in zip([400, 403, 404, 500], paths, hints, result):\n+            with self.subTest('handler{}'.format(code)):\n+                self.assertEqual(error, Error(\n+                    \"The custom handler{} view '{}' could not be imported.\".format(code, path),\n+                    hint=hint.format(path),\n+                    id='urls.E008',\n+                ))\n+\n     @override_settings(ROOT_URLCONF='check_framework.urls.good_error_handlers')\n     def test_good_handlers(self):\n         result = check_url_config(None)\ndiff --git a/tests/check_framework/urls/bad_error_handlers_invalid_path.py b/tests/check_framework/urls/bad_error_handlers_invalid_path.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/check_framework/urls/bad_error_handlers_invalid_path.py\n@@ -0,0 +1,6 @@\n+urlpatterns = []\n+\n+handler400 = 'django.views.bad_handler'\n+handler403 = 'django.invalid_module.bad_handler'\n+handler404 = 'invalid_module.bad_handler'\n+handler500 = 'django'\n",
  "problem_statement": "Add new system check message when custom error handler 'path.to.view' cannot be imported\nDescription\n\t \n\t\t(last modified by Alasdair Nicol)\n\t \n#29642 added checks for the signatures of custom error handlers.\nWhen the 'path.to.view' cannot be imported, it raises ModuleNotFoundError or ViewDoesNotExist, as seen in this Stack Overflow question:\nâ€‹https://stackoverflow.com/q/55481810/113962\nI suggest we catch the exception, and add another check code, e.g.\n* **urls.E008**: The custom ``handlerXXX`` view ``'path.to.view'`` cannot be imported.\n",
  "hints_text": "Hi Alasdair, Thanks for the report, and the effort on StackOverflow. I'm happy to take this as improvement on the system check for 2.2.1. (Yes, catching an incorrect path is probably worthwhile.)",
  "created_at": "2019-04-03T23:31:55Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_bad_handlers_invalid_path (check_framework.test_urls.CheckCustomErrorHandlersTests)\"]",
  "PASS_TO_PASS": "[\"test_empty_string_no_errors (check_framework.test_urls.CheckURLSettingsTests)\", \"test_media_url_no_slash (check_framework.test_urls.CheckURLSettingsTests)\", \"test_slash_no_errors (check_framework.test_urls.CheckURLSettingsTests)\", \"test_static_url_double_slash_allowed (check_framework.test_urls.CheckURLSettingsTests)\", \"test_static_url_no_slash (check_framework.test_urls.CheckURLSettingsTests)\", \"test_bad_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_good_handlers (check_framework.test_urls.CheckCustomErrorHandlersTests)\", \"test_beginning_with_caret (check_framework.test_urls.UpdatedToPathTests)\", \"test_contains_re_named_group (check_framework.test_urls.UpdatedToPathTests)\", \"test_ending_with_dollar (check_framework.test_urls.UpdatedToPathTests)\", \"test_beginning_with_slash (check_framework.test_urls.CheckUrlConfigTests)\", \"test_beginning_with_slash_append_slash (check_framework.test_urls.CheckUrlConfigTests)\", \"test_check_non_unique_namespaces (check_framework.test_urls.CheckUrlConfigTests)\", \"test_check_resolver_recursive (check_framework.test_urls.CheckUrlConfigTests)\", \"test_check_unique_namespaces (check_framework.test_urls.CheckUrlConfigTests)\", \"test_contains_included_tuple (check_framework.test_urls.CheckUrlConfigTests)\", \"test_contains_tuple_not_url_instance (check_framework.test_urls.CheckUrlConfigTests)\", \"test_get_warning_for_invalid_pattern_other (check_framework.test_urls.CheckUrlConfigTests)\", \"test_get_warning_for_invalid_pattern_string (check_framework.test_urls.CheckUrlConfigTests)\", \"test_get_warning_for_invalid_pattern_tuple (check_framework.test_urls.CheckUrlConfigTests)\", \"test_include_with_dollar (check_framework.test_urls.CheckUrlConfigTests)\", \"test_name_with_colon (check_framework.test_urls.CheckUrlConfigTests)\", \"test_no_root_urlconf_in_settings (check_framework.test_urls.CheckUrlConfigTests)\", \"test_no_warnings (check_framework.test_urls.CheckUrlConfigTests)\", \"test_no_warnings_i18n (check_framework.test_urls.CheckUrlConfigTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.563019",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}