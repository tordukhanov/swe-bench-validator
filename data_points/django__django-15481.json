{
  "repo": "django/django",
  "instance_id": "django__django-15481",
  "base_commit": "c6b4d62fa2c7f73b87f6ae7e8cf1d64ee5312dc5",
  "patch": "diff --git a/django/http/response.py b/django/http/response.py\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -227,6 +227,10 @@ def set_cookie(\n         - a naive ``datetime.datetime`` object in UTC,\n         - an aware ``datetime.datetime`` object in any time zone.\n         If it is a ``datetime.datetime`` object then calculate ``max_age``.\n+\n+        ``max_age`` can be:\n+        - int/float specifying seconds,\n+        - ``datetime.timedelta`` object.\n         \"\"\"\n         self.cookies[key] = value\n         if expires is not None:\n@@ -240,12 +244,16 @@ def set_cookie(\n                 delta = delta + datetime.timedelta(seconds=1)\n                 # Just set max_age - the max_age logic will set expires.\n                 expires = None\n+                if max_age is not None:\n+                    raise ValueError(\"'expires' and 'max_age' can't be used together.\")\n                 max_age = max(0, delta.days * 86400 + delta.seconds)\n             else:\n                 self.cookies[key][\"expires\"] = expires\n         else:\n             self.cookies[key][\"expires\"] = \"\"\n         if max_age is not None:\n+            if isinstance(max_age, datetime.timedelta):\n+                max_age = max_age.total_seconds()\n             self.cookies[key][\"max-age\"] = int(max_age)\n             # IE requires expires, so set it if hasn't been already.\n             if not expires:\n",
  "test_patch": "diff --git a/tests/responses/test_cookie.py b/tests/responses/test_cookie.py\n--- a/tests/responses/test_cookie.py\n+++ b/tests/responses/test_cookie.py\n@@ -71,6 +71,19 @@ def test_max_age_int(self):\n         response.set_cookie(\"max_age\", max_age=10.6)\n         self.assertEqual(response.cookies[\"max_age\"][\"max-age\"], 10)\n \n+    def test_max_age_timedelta(self):\n+        response = HttpResponse()\n+        response.set_cookie(\"max_age\", max_age=timedelta(hours=1))\n+        self.assertEqual(response.cookies[\"max_age\"][\"max-age\"], 3600)\n+\n+    def test_max_age_with_expires(self):\n+        response = HttpResponse()\n+        msg = \"'expires' and 'max_age' can't be used together.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            response.set_cookie(\n+                \"max_age\", expires=datetime(2000, 1, 1), max_age=timedelta(hours=1)\n+            )\n+\n     def test_httponly_cookie(self):\n         response = HttpResponse()\n         response.set_cookie(\"example\", httponly=True)\ndiff --git a/tests/signed_cookies_tests/tests.py b/tests/signed_cookies_tests/tests.py\n--- a/tests/signed_cookies_tests/tests.py\n+++ b/tests/signed_cookies_tests/tests.py\n@@ -1,3 +1,5 @@\n+from datetime import timedelta\n+\n from django.core import signing\n from django.http import HttpRequest, HttpResponse\n from django.test import SimpleTestCase, override_settings\n@@ -52,8 +54,20 @@ def test_max_age_argument(self):\n         with freeze_time(123456800):\n             self.assertEqual(request.get_signed_cookie(\"c\", max_age=12), value)\n             self.assertEqual(request.get_signed_cookie(\"c\", max_age=11), value)\n+            self.assertEqual(\n+                request.get_signed_cookie(\"c\", max_age=timedelta(seconds=11)), value\n+            )\n             with self.assertRaises(signing.SignatureExpired):\n                 request.get_signed_cookie(\"c\", max_age=10)\n+            with self.assertRaises(signing.SignatureExpired):\n+                request.get_signed_cookie(\"c\", max_age=timedelta(seconds=10))\n+\n+    def test_set_signed_cookie_max_age_argument(self):\n+        response = HttpResponse()\n+        response.set_signed_cookie(\"c\", \"value\", max_age=100)\n+        self.assertEqual(response.cookies[\"c\"][\"max-age\"], 100)\n+        response.set_signed_cookie(\"d\", \"value\", max_age=timedelta(hours=2))\n+        self.assertEqual(response.cookies[\"d\"][\"max-age\"], 7200)\n \n     @override_settings(SECRET_KEY=b\"\\xe7\")\n     def test_signed_cookies_with_binary_key(self):\n",
  "problem_statement": "set_cookie and set_signed_cookie should accept timedelta object for max_age argument\nDescription\n\t\nThis already works for get_signed_cookie:\n>>> request.get_signed_cookie(\"mykey\", max_age=timedelta(days=3))\nThis is due to the underlying behaviour of TimestampSigner, which was fixed to do this in #21363.\nBut for set_cookie and set_signed_cookie it accepts only a number:\n>>> response = HttpResponse()\n>>> response.set_cookie(\"mykey\", max_age=timedelta(days=3))\nTypeError: int() argument must be a string, a bytes-like object or a number, not 'datetime.timedelta'\n",
  "hints_text": "PR here - â€‹https://github.com/django/django/pull/15481",
  "created_at": "2022-03-04T13:25:03Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_max_age_timedelta (responses.test_cookie.SetCookieTests)\", \"test_max_age_with_expires (responses.test_cookie.SetCookieTests)\", \"test_set_signed_cookie_max_age_argument (signed_cookies_tests.tests.SignedCookieTest)\"]",
  "PASS_TO_PASS": "[\"set_cookie() accepts an aware datetime as expiration time.\", \"Setting a cookie after deletion clears the expiry date.\", \"Cookie will expire when a distant expiration time is provided.\", \"test_httponly_cookie (responses.test_cookie.SetCookieTests)\", \"test_invalid_samesite (responses.test_cookie.SetCookieTests)\", \"Cookie will expire if max_age is provided.\", \"test_max_age_int (responses.test_cookie.SetCookieTests)\", \"Cookie will expire when a near expiration time is provided.\", \"test_samesite (responses.test_cookie.SetCookieTests)\", \"HttpResponse.set_cookie() works with Unicode data.\", \"test_default (responses.test_cookie.DeleteCookieTests)\", \"test_delete_cookie_samesite (responses.test_cookie.DeleteCookieTests)\", \"delete_cookie() sets the secure flag if the cookie name starts with\", \"test_delete_cookie_secure_samesite_none (responses.test_cookie.DeleteCookieTests)\", \"test_can_set_and_read_signed_cookies (signed_cookies_tests.tests.SignedCookieTest)\", \"test_can_use_salt (signed_cookies_tests.tests.SignedCookieTest)\", \"test_default_argument_suppresses_exceptions (signed_cookies_tests.tests.SignedCookieTest)\", \"test_detects_tampering (signed_cookies_tests.tests.SignedCookieTest)\", \"test_max_age_argument (signed_cookies_tests.tests.SignedCookieTest)\", \"test_signed_cookies_with_binary_key (signed_cookies_tests.tests.SignedCookieTest)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.730874",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}