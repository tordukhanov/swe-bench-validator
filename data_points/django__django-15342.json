{
  "repo": "django/django",
  "instance_id": "django__django-15342",
  "base_commit": "f605e85af9763a3940369bb79462f2cb466288f6",
  "patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -685,11 +685,8 @@ def name_lower(self):\n         return self.name.lower()\n \n     def get_field(self, field_name):\n-        field_name = (\n-            self.options['order_with_respect_to']\n-            if field_name == '_order'\n-            else field_name\n-        )\n+        if field_name == '_order':\n+            field_name = self.options.get('order_with_respect_to', field_name)\n         return self.fields[field_name]\n \n     @classmethod\n",
  "test_patch": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -959,6 +959,44 @@ class Meta:\n             [\"id\", \"author\"],\n         )\n \n+    def test_modelstate_get_field_order_wrt(self):\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            name = models.TextField()\n+\n+            class Meta:\n+                app_label = 'migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'migrations'\n+                apps = new_apps\n+                order_with_respect_to = 'author'\n+\n+        model_state = ModelState.from_model(Book)\n+        order_wrt_field = model_state.get_field('_order')\n+        self.assertIsInstance(order_wrt_field, models.ForeignKey)\n+        self.assertEqual(order_wrt_field.related_model, 'migrations.author')\n+\n+    def test_modelstate_get_field_no_order_wrt_order_field(self):\n+        new_apps = Apps()\n+\n+        class HistoricalRecord(models.Model):\n+            _order = models.PositiveSmallIntegerField()\n+\n+            class Meta:\n+                app_label = 'migrations'\n+                apps = new_apps\n+\n+        model_state = ModelState.from_model(HistoricalRecord)\n+        order_field = model_state.get_field('_order')\n+        self.assertIsNone(order_field.related_model)\n+        self.assertIsInstance(order_field, models.PositiveSmallIntegerField)\n+\n     def test_manager_refer_correct_model_version(self):\n         \"\"\"\n         #24147 - Managers refer to the correct version of a\n",
  "problem_statement": "Migration autodetector crashes on models with field named _order, but not using order_with_respect_to.\nDescription\n\t \n\t\t(last modified by Fabian Büchler)\n\t \nThe commit ​https://github.com/django/django/commit/aa4acc164d1247c0de515c959f7b09648b57dc42 introduced a new function ModelState.get_field in django.db.migrations.state.\nThis converts the field name _order to the one defined in options['order_with_respect_to'] automatically, which fails if the model has a field _order but isn't using Meta.order_with_respect_to.\nThat is the case for models generated by django-simple-history (​https://github.com/jazzband/django-simple-history) for models that are originally using Meta.order_with_respect_to: the resulting historical records model has only _order but is not using the Meta option.\nThis shows when running mange.py migrate or manage.py makemigrations:\n$ ./manage.py makemigrations --dry-run\nWaiting for port 'mysql:3306' timeout 1s (attempt 1/60)\nPort 'mysql:3306' is open\nTraceback (most recent call last):\n File \"./manage.py\", line 42, in <module>\n\tmain()\n File \"./manage.py\", line 36, in main\n\texecute_from_command_line(sys.argv)\n File \"/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py\", line 425, in execute_from_command_line\n\tutility.execute()\n File \"/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py\", line 419, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/usr/local/lib/python3.8/site-packages/django/core/management/base.py\", line 373, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/usr/local/lib/python3.8/site-packages/django/core/management/base.py\", line 417, in execute\n\toutput = self.handle(*args, **options)\n File \"/usr/local/lib/python3.8/site-packages/django/core/management/base.py\", line 90, in wrapped\n\tres = handle_func(*args, **kwargs)\n File \"/usr/local/lib/python3.8/site-packages/django/core/management/commands/makemigrations.py\", line 172, in handle\n\tchanges = autodetector.changes(\n File \"/usr/local/lib/python3.8/site-packages/django/db/migrations/autodetector.py\", line 43, in changes\n\tchanges = self._detect_changes(convert_apps, graph)\n File \"/usr/local/lib/python3.8/site-packages/django/db/migrations/autodetector.py\", line 189, in _detect_changes\n\tself.generate_altered_fields()\n File \"/usr/local/lib/python3.8/site-packages/django/db/migrations/autodetector.py\", line 928, in generate_altered_fields\n\told_field = self.from_state.models[app_label, old_model_name].get_field(old_field_name)\n File \"/usr/local/lib/python3.8/site-packages/django/db/migrations/state.py\", line 689, in get_field\n\tself.options['order_with_respect_to']\nKeyError: 'order_with_respect_to'\nI believe this could be solved using a bit more defensive code, like:\n\tdef get_field(self, field_name):\n\t\tif field_name == '_order' and 'order_with_respect_to' in self.options:\n\t\t\tfield_name = self.options['order_with_respect_to']\n\t\treturn self.fields[field_name]\n",
  "hints_text": "Thanks for the report! Would you like to prepare a patch? (a regression test is required.) Regression in aa4acc164d1247c0de515c959f7b09648b57dc42. Reproduced at dc8bb35e39388d41b1f38b6c5d0181224e075f16.\nI could do that, Mariusz. Do you have any suggestions regarding where to put the regression test, though? I checked before filing the issue and was a bit lost in the plentora of tests. Would it fit with the migration autodetector tests at ​https://github.com/django/django/blob/main/tests/migrations/test_autodetector.py ?",
  "created_at": "2022-01-21T05:49:13Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_modelstate_get_field_no_order_wrt_order_field (migrations.test_state.StateTests)\"]",
  "PASS_TO_PASS": "[\"test_abstract_model_children_inherit_indexes (migrations.test_state.ModelStateTests)\", \"test_bound_field_sanity_check (migrations.test_state.ModelStateTests)\", \"Tests making a ProjectState from an Apps with a swappable model\", \"A swappable model inheriting from a hierarchy:\", \"Tests making a ProjectState from unused models with custom managers\", \"test_custom_model_base (migrations.test_state.ModelStateTests)\", \"test_explicit_index_name (migrations.test_state.ModelStateTests)\", \"Rendering a model state doesn't alter its internal fields.\", \"test_fields_ordering_equality (migrations.test_state.ModelStateTests)\", \"test_from_model_constraints (migrations.test_state.ModelStateTests)\", \"test_order_with_respect_to_private_field (migrations.test_state.ModelStateTests)\", \"test_repr (migrations.test_state.ModelStateTests)\", \"test_sanity_check_through (migrations.test_state.ModelStateTests)\", \"test_sanity_check_to (migrations.test_state.ModelStateTests)\", \"test_sanity_index_name (migrations.test_state.ModelStateTests)\", \"test_abstract_base (migrations.test_state.RelatedModelsTests)\", \"test_base (migrations.test_state.RelatedModelsTests)\", \"test_base_to_base_fk (migrations.test_state.RelatedModelsTests)\", \"test_base_to_subclass_fk (migrations.test_state.RelatedModelsTests)\", \"test_circle (migrations.test_state.RelatedModelsTests)\", \"test_direct_fk (migrations.test_state.RelatedModelsTests)\", \"test_direct_hidden_fk (migrations.test_state.RelatedModelsTests)\", \"test_direct_m2m (migrations.test_state.RelatedModelsTests)\", \"test_direct_m2m_self (migrations.test_state.RelatedModelsTests)\", \"test_fk_through_proxy (migrations.test_state.RelatedModelsTests)\", \"test_generic_fk (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_base (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_extern_fk (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_self (migrations.test_state.RelatedModelsTests)\", \"test_multiple_bases (migrations.test_state.RelatedModelsTests)\", \"test_multiple_mixed_bases (migrations.test_state.RelatedModelsTests)\", \"test_multiple_nested_bases (migrations.test_state.RelatedModelsTests)\", \"test_nested_abstract_base (migrations.test_state.RelatedModelsTests)\", \"test_nested_base (migrations.test_state.RelatedModelsTests)\", \"test_nested_fk (migrations.test_state.RelatedModelsTests)\", \"test_nested_proxy_base (migrations.test_state.RelatedModelsTests)\", \"test_proxy_base (migrations.test_state.RelatedModelsTests)\", \"test_two_sided (migrations.test_state.RelatedModelsTests)\", \"test_unrelated (migrations.test_state.RelatedModelsTests)\", \"test_add_field (migrations.test_state.StateRelationsTests)\", \"test_add_field_m2m_with_through (migrations.test_state.StateRelationsTests)\", \"test_add_model (migrations.test_state.StateRelationsTests)\", \"test_add_model_no_relations (migrations.test_state.StateRelationsTests)\", \"test_add_model_other_app (migrations.test_state.StateRelationsTests)\", \"test_alter_field (migrations.test_state.StateRelationsTests)\", \"test_alter_field_m2m_to_fk (migrations.test_state.StateRelationsTests)\", \"test_many_relations_to_same_model (migrations.test_state.StateRelationsTests)\", \"test_relations_population (migrations.test_state.StateRelationsTests)\", \"test_remove_field (migrations.test_state.StateRelationsTests)\", \"test_remove_field_no_relations (migrations.test_state.StateRelationsTests)\", \"test_remove_model (migrations.test_state.StateRelationsTests)\", \"test_rename_field (migrations.test_state.StateRelationsTests)\", \"test_rename_field_no_relations (migrations.test_state.StateRelationsTests)\", \"test_rename_model (migrations.test_state.StateRelationsTests)\", \"test_rename_model_no_relations (migrations.test_state.StateRelationsTests)\", \"#24573 - Adding relations to existing models should reload the\", \"StateApps.bulk_update() should update apps.ready to False and reset\", \"#24483 - ProjectState.from_apps should not destructively consume\", \"Tests making a ProjectState from an Apps\", \"test_custom_base_manager (migrations.test_state.StateTests)\", \"test_custom_default_manager (migrations.test_state.StateTests)\", \"When the default manager of the model is a custom manager,\", \"When a manager is added with a name of 'objects' but it does not\", \"test_dangling_references_throw_error (migrations.test_state.StateTests)\", \"== and != are implemented correctly.\", \"Makes sure ProjectState doesn't include OrderWrt fields when\", \"#24147 - Managers refer to the correct version of a\", \"test_modelstate_get_field_order_wrt (migrations.test_state.StateTests)\", \"When a manager is added with `use_in_migrations = True` and a parent\", \"Including real apps can resolve dangling FK errors.\", \"test_real_apps_non_set (migrations.test_state.StateTests)\", \"test_reference_mixed_case_app_label (migrations.test_state.StateTests)\", \"test_reload_model_relationship_consistency (migrations.test_state.StateTests)\", \"The model is reloaded even on changes that are not involved in\", \"#24225 - Relations between models are updated while\", \"Tests rendering a ProjectState into an Apps.\", \"test_render_model_inheritance (migrations.test_state.StateTests)\", \"test_render_model_with_multiple_inheritance (migrations.test_state.StateTests)\", \"The ProjectState render method correctly renders models\", \"The ProjectState render method doesn't raise an\", \"#24513 - Modifying an object pointing to itself would cause it to be\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.726121",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}