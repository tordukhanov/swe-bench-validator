{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1713",
  "base_commit": "340b2459031feb421d678c3c75865c3b11c07938",
  "patch": "diff --git a/requests/cookies.py b/requests/cookies.py\n--- a/requests/cookies.py\n+++ b/requests/cookies.py\n@@ -421,3 +421,25 @@ def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):\n                 cookiejar.set_cookie(create_cookie(name, cookie_dict[name]))\n \n     return cookiejar\n+\n+\n+def merge_cookies(cookiejar, cookies):\n+    \"\"\"Add cookies to cookiejar and returns a merged CookieJar.\n+\n+    :param cookiejar: CookieJar object to add the cookies to.\n+    :param cookies: Dictionary or CookieJar object to be added.\n+    \"\"\"\n+    if not isinstance(cookiejar, cookielib.CookieJar):\n+        raise ValueError('You can only merge into CookieJar')\n+    \n+    if isinstance(cookies, dict):\n+        cookiejar = cookiejar_from_dict(\n+            cookies, cookiejar=cookiejar, overwrite=False)\n+    elif isinstance(cookies, cookielib.CookieJar):\n+        try:\n+            cookiejar.update(cookies)\n+        except AttributeError:\n+            for cookie_in_jar in cookies:\n+                cookiejar.set_cookie(cookie_in_jar)\n+\n+    return cookiejar\ndiff --git a/requests/sessions.py b/requests/sessions.py\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -13,7 +13,8 @@\n from datetime import datetime\n \n from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str\n-from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n+from .cookies import (\n+    cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n from .utils import to_key_val_list, default_headers\n@@ -245,9 +246,8 @@ def prepare_request(self, request):\n             cookies = cookiejar_from_dict(cookies)\n \n         # Merge with session cookies\n-        merged_cookies = RequestsCookieJar()\n-        merged_cookies.update(self.cookies)\n-        merged_cookies.update(cookies)\n+        merged_cookies = merge_cookies(\n+            merge_cookies(RequestsCookieJar(), self.cookies), cookies)\n \n \n         # Set environment's basic authentication if not explicitly set.\n@@ -330,7 +330,7 @@ def request(self, method, url,\n         prep = self.prepare_request(req)\n \n         # Add param cookies to session cookies\n-        self.cookies = cookiejar_from_dict(cookies, cookiejar=self.cookies, overwrite=False)\n+        self.cookies = merge_cookies(self.cookies, cookies)\n \n         proxies = proxies or {}\n \n",
  "test_patch": "diff --git a/test_requests.py b/test_requests.py\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -187,6 +187,14 @@ def test_generic_cookiejar_works(self):\n         assert r.json()['cookies']['foo'] == 'bar'\n         # Make sure the session cj is still the custom one\n         assert s.cookies is cj\n+    \n+    def test_param_cookiejar_works(self):\n+        cj = cookielib.CookieJar()\n+        cookiejar_from_dict({'foo' : 'bar'}, cj)\n+        s = requests.session()\n+        r = s.get(httpbin('cookies'), cookies=cj)\n+        # Make sure the cookie was sent\n+        assert r.json()['cookies']['foo'] == 'bar'\n \n     def test_requests_in_history_are_not_overridden(self):\n         resp = requests.get(httpbin('redirect/3'))\n",
  "problem_statement": "Regression 2.0.1: Using MozillaCookieJar does not work\nCould not find an issue raised for this, not sure if this was an expected change either. This is reproducible on master.\n\nExisting code fails on update to `requests-2.0.1`. The cause seems to be triggered by the change at https://github.com/kennethreitz/requests/commit/012f0334ce43fe23044fc58e4246a804db88650d#diff-28e67177469c0d36b068d68d9f6043bfR326\n\nThe parameter `cookies` expects either `Dict` or `CookieJar`. Treating `MozillaCookieJar` as a dict triggers the error in this instance.\n\nThe following code highlights the issue:\n\n``` py\nimport sys\nimport requests\nfrom os.path import expanduser\n\nif sys.version_info.major >= 3:\n    from http.cookiejar import MozillaCookieJar\nelse:\n    from cookielib import MozillaCookieJar\n\nURL = 'https://bugzilla.redhat.com'\nCOOKIE_FILE = expanduser('~/.bugzillacookies')\n\ncookiejar = MozillaCookieJar(COOKIE_FILE)\ncookiejar.load()\n\nrequests.get(URL, cookies=cookiejar)\n```\n\nThe following `AttributeError` is thrown:\n\n```\nTraceback (most recent call last):\n  File \"rtest.py\", line 16, in <module>\n    requests.get(URL, cookies=cookiejar)\n  File \"/tmp/rtestenv/lib/python2.7/site-packages/requests/api.py\", line 55, in get\n    return request('get', url, **kwargs)\n  File \"/tmp/rtestenv/lib/python2.7/site-packages/requests/api.py\", line 44, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"/tmp/rtestenv/lib/python2.7/site-packages/requests/sessions.py\", line 327, in request\n    self.cookies = cookiejar_from_dict(cookies, cookiejar=self.cookies, overwrite=False)\n  File \"/tmp/rtestenv/lib/python2.7/site-packages/requests/cookies.py\", line 410, in cookiejar_from_dict\n    cookiejar.set_cookie(create_cookie(name, cookie_dict[name]))\nAttributeError: MozillaCookieJar instance has no attribute '__getitem__'\n```\n\n",
  "hints_text": "Mm, good spot. I think we should try to do something smarter here. Thanks for raising this issue! :cake:\n",
  "created_at": "2013-10-29T14:49:12Z",
  "version": "2.0",
  "FAIL_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET\", \"test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES\", \"test_requests.py::RequestsTestCase::test_param_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_prepared_from_session\"]",
  "PASS_TO_PASS": "[\"test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE\", \"test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES\", \"test_requests.py::RequestsTestCase::test_DIGEST_STREAM\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD\", \"test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT\", \"test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA\", \"test_requests.py::RequestsTestCase::test_autoset_header_values_are_native\", \"test_requests.py::RequestsTestCase::test_basic_building\", \"test_requests.py::RequestsTestCase::test_basicauth_with_netrc\", \"test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files\", \"test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests\", \"test_requests.py::RequestsTestCase::test_cookie_parameters\", \"test_requests.py::RequestsTestCase::test_cookie_persists_via_api\", \"test_requests.py::RequestsTestCase::test_cookie_quote_wrapped\", \"test_requests.py::RequestsTestCase::test_cookie_removed_on_expire\", \"test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect\", \"test_requests.py::RequestsTestCase::test_custom_content_type\", \"test_requests.py::RequestsTestCase::test_decompress_gzip\", \"test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post\", \"test_requests.py::RequestsTestCase::test_entry_points\", \"test_requests.py::RequestsTestCase::test_fixes_1329\", \"test_requests.py::RequestsTestCase::test_generic_cookiejar_works\", \"test_requests.py::RequestsTestCase::test_get_auth_from_url\", \"test_requests.py::RequestsTestCase::test_header_keys_are_native\", \"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\", \"test_requests.py::RequestsTestCase::test_hook_receives_request_arguments\", \"test_requests.py::RequestsTestCase::test_http_error\", \"test_requests.py::RequestsTestCase::test_invalid_url\", \"test_requests.py::RequestsTestCase::test_links\", \"test_requests.py::RequestsTestCase::test_long_authinfo_in_url\", \"test_requests.py::RequestsTestCase::test_no_content_length\", \"test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs\", \"test_requests.py::RequestsTestCase::test_params_are_added_before_fragment\", \"test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive\", \"test_requests.py::RequestsTestCase::test_path_is_not_double_encoded\", \"test_requests.py::RequestsTestCase::test_prepared_request_hook\", \"test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable\", \"test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie\", \"test_requests.py::RequestsTestCase::test_request_ok_set\", \"test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden\", \"test_requests.py::RequestsTestCase::test_response_is_iterable\", \"test_requests.py::RequestsTestCase::test_session_pickling\", \"test_requests.py::RequestsTestCase::test_set_cookie_on_301\", \"test_requests.py::RequestsTestCase::test_status_raising\", \"test_requests.py::RequestsTestCase::test_time_elapsed_blank\", \"test_requests.py::RequestsTestCase::test_transport_adapter_ordering\", \"test_requests.py::RequestsTestCase::test_unicode_get\", \"test_requests.py::RequestsTestCase::test_unicode_header_name\", \"test_requests.py::RequestsTestCase::test_unicode_method_name\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post\", \"test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames\", \"test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect\", \"test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param\", \"test_requests.py::RequestsTestCase::test_user_agent_transfers\", \"test_requests.py::TestContentEncodingDetection::test_html4_pragma\", \"test_requests.py::TestContentEncodingDetection::test_html_charset\", \"test_requests.py::TestContentEncodingDetection::test_none\", \"test_requests.py::TestContentEncodingDetection::test_precedence\", \"test_requests.py::TestContentEncodingDetection::test_xhtml_pragma\", \"test_requests.py::TestContentEncodingDetection::test_xml\", \"test_requests.py::TestCaseInsensitiveDict::test_contains\", \"test_requests.py::TestCaseInsensitiveDict::test_delitem\", \"test_requests.py::TestCaseInsensitiveDict::test_docstring_example\", \"test_requests.py::TestCaseInsensitiveDict::test_equality\", \"test_requests.py::TestCaseInsensitiveDict::test_fixes_649\", \"test_requests.py::TestCaseInsensitiveDict::test_get\", \"test_requests.py::TestCaseInsensitiveDict::test_getitem\", \"test_requests.py::TestCaseInsensitiveDict::test_iter\", \"test_requests.py::TestCaseInsensitiveDict::test_iterable_init\", \"test_requests.py::TestCaseInsensitiveDict::test_kwargs_init\", \"test_requests.py::TestCaseInsensitiveDict::test_len\", \"test_requests.py::TestCaseInsensitiveDict::test_lower_items\", \"test_requests.py::TestCaseInsensitiveDict::test_mapping_init\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case\", \"test_requests.py::TestCaseInsensitiveDict::test_setdefault\", \"test_requests.py::TestCaseInsensitiveDict::test_update\", \"test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged\", \"test_requests.py::UtilsTestCase::test_super_len_io_streams\"]",
  "environment_setup_commit": "4bceb312f1b99d36a25f2985b5606e98b6f0d8cd",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.848352",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}