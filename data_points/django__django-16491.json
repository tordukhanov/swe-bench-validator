{
  "repo": "django/django",
  "instance_id": "django__django-16491",
  "base_commit": "7eb5391b71f473dd13abdaaef143a5509160487f",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1546,6 +1546,7 @@ def get_group_by_cols(self):\n class Exists(Subquery):\n     template = \"EXISTS(%(subquery)s)\"\n     output_field = fields.BooleanField()\n+    empty_result_set_value = False\n \n     def __init__(self, queryset, **kwargs):\n         super().__init__(queryset, **kwargs)\n",
  "test_patch": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -1017,6 +1017,14 @@ def test_annotation_and_alias_filter_related_in_subquery(self):\n             ],\n         )\n \n+    def test_annotation_exists_none_query(self):\n+        self.assertIs(\n+            Author.objects.annotate(exists=Exists(Company.objects.none()))\n+            .get(pk=self.a1.pk)\n+            .exists,\n+            False,\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "problem_statement": "Exists annotations can return non-boolean results (i.e. None) if used with an empty QuerySet.\nDescription\n\t\nI suspect this is following on from, but potentially separate to #33018 -- because that ticket starts out using Django 3.2 to observe that an empty queryset (EmptyQuerySet or whatever, via none()) can short circuit evaluation to be 0 as ... in the SQL query, which is exactly the same problem I observed.\nHowever, as far as I can tell, the result of an Exists(queryset.none()) can still return values outside of True/False, namely, None.\nUsing Django main as of 4593bc5da115f2e808a803a4ec24104b6c7a6152 (from Wed Jan 11 ... 2023), here's the behaviour on both postgres and sqlite. In both scenarios I'm using 3.10.2 with psycopg2==2.9.3 and sqlite3.sqlite_version is 3.37.0 and sqlite3.version is 2.6.0. \nIPython outputs 8 and 11 are the problems.\nclass A(models.Model):\n\tpass\nclass B(models.Model):\n\tpass\nIn [1]: from app.models import A, B\nIn [2]: A.objects.using(\"pg\").create()\nOut[2]: <A: A object (1)>\nIn [3]: B.objects.using(\"pg\").create()\nOut[3]: <B: B object (1)>\nIn [4]: A.objects.using(\"sqlite\").create()\nOut[4]: <A: A object (1)>\nIn [4]: B.objects.using(\"sqlite\").create()\nOut[4]: <B: B object (1)>\nIn [5]: from django.db.models import Exists\nIn [6]: A.objects.using(\"sqlite\").annotate(should_be_bool=Exists(B.objects.all())).first().should_be_bool\nOut[6]: True\nIn [7]: A.objects.using(\"sqlite\").annotate(should_be_bool=Exists(B.objects.filter(pk=99999999))).first().should_be_bool\nOut[7]: False\nIn [8]: A.objects.using(\"sqlite\").annotate(should_be_bool=Exists(B.objects.none())).first().should_be_bool\n# This is the problem, it returned neither True nor False\nIn [9]: A.objects.using(\"pg\").annotate(should_be_bool=Exists(B.objects.all())).first().should_be_bool\nOut[9]: True\nIn [10]: A.objects.using(\"pg\").annotate(should_be_bool=Exists(B.objects.filter(pk=99999999))).first().should_be_bool\nOut[10]: False\nIn [11]: A.objects.using(\"pg\").annotate(should_be_bool=Exists(B.objects.none())).first().should_be_bool\n# This is the problem, it returned neither True nor False\nAnd the queries, which are the same for postgres & sqlite:\n# ...\n{'sql': 'SELECT \"app_a\".\"id\", EXISTS(SELECT 1 AS \"a\" FROM \"app_b\" LIMIT 1) AS \"should_be_bool\" FROM \"app_a\" ORDER BY \"app_a\".\"id\" ASC LIMIT 1',\n 'time': '0.001'},\n {'sql': 'SELECT \"app_a\".\"id\", EXISTS(SELECT 1 AS \"a\" FROM \"app_b\" U0 WHERE U0.\"id\" = 99999999 LIMIT 1) AS \"should_be_bool\" FROM \"app_a\" ORDER BY \"app_a\".\"id\" ASC LIMIT 1',\n 'time': '0.001'},\n {'sql': 'SELECT \"app_a\".\"id\", NULL AS \"should_be_bool\" FROM \"app_a\" ORDER BY \"app_a\".\"id\" ASC LIMIT 1',\n 'time': '0.001'}\nGiven Exists has an output_field of BooleanField and that definition doesn't have null=True as an argument, it seems incongruent from both an expectations (\"exists sounds boolean\") and implementation (\"it doesn't say it could be null\") standpoint.\nWhilst the problem exists in main, it has also changed behaviour (presumably or potentially unexpectedly) since 3.2, where postgres and sqlite actually do different things, hence we tested both above. So main is now consistent, but I'd personally argue it's consistently wrong (for a given value thereof, no judgement made!)\nIn 3.2.16, under sqlite, using annotate(x=Exists(y.none())) returns False but on main it now returns None (see above) -- the 3.2 behaviour is correct for my expectations\nIn [4]: A.objects.using(\"sqlite\").annotate(should_be_bool=Exists(B.objects.none())).first().should_be_bool\nOut[4]: False\nIn [5]: connections['sqlite'].queries\nOut[5]:\n {'sql': 'SELECT \"app_a\".\"id\", 0 AS \"should_be_bool\" FROM \"app_a\" ORDER BY \"app_a\".\"id\" ASC LIMIT 1',\n 'time': '0.000'}\nIn 3.2.16 with postgres we get neither None nor False but the integer 0 instead:\nIn [4]: A.objects.using(\"pg\").annotate(should_be_bool=Exists(B.objects.none())).first().should_be_bool\nOut[4]: 0\nIn [5]: connections['pg'].queries\nOut[5]:\n{'sql': 'SELECT \"app_a\".\"id\", 0 AS \"should_be_bool\" FROM \"app_a\" ORDER BY \"app_a\".\"id\" ASC LIMIT 1',\n 'time': '0.001'}\nSo we can observe that under 3.2 using the 0 AS ... behaviour\nsqlite appears to behave correctly (returning False)\npostgres appears to behave incorrectly (failing to cast a raw integer to a boolean)\nAnd under main using the NULL AS ... behaviour\nsqlite no longer behaves the same, returning None where I'd expect False (or even True given the way SQL EXISTS works...)\npostgres behaves differently, 0 is now None but I'd still expect True or False as the output.\n",
  "hints_text": "Thanks for the detailed report Keryn. I suspect the solution is as simple as setting Exists.empty_result_set_value = False which was missed in dd1fa3a31b4680c0d3712e6ae122b878138580c7 and since Exists sublasses Subquery it inherited its .empty_result_set_value = None. diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index c270ef16c7..fc1d94fefb 100644 --- a/django/db/models/expressions.py +++ b/django/db/models/expressions.py @@ -1548,6 +1548,7 @@ def get_group_by_cols(self): class Exists(Subquery): template = \"EXISTS(%(subquery)s)\" output_field = fields.BooleanField() + empty_result_set_value = False def __init__(self, queryset, **kwargs): super().__init__(queryset, **kwargs) If you can confirm this addresses the problem you reported could you submit a PR with a regression test?\nHey Simon would love to submit a PR\nReplying to Simon Charette: I suspect the solution is as simple as setting Exists.empty_result_set_value = False [...] [...] If you can confirm this addresses the problem you reported [...] Confirming, it does seem to be as simple as that (a pleasant rarity in ORM edge cases, I'm sure!) for the 2 backends I was testing (postgres and sqlite -- I've notably not checked mysql or oracle etc): In [3]: A.objects.using(\"sqlite\").annotate(should_be_bool=Exists(B.objects.none())).first().should_be_bool Out[3]: False In [4]: A.objects.using(\"pg\").annotate(should_be_bool=Exists(B.objects.none())).first().should_be_bool Out[4]: False The queries are still recorded as different, but I expect that's normal coercion differences between sqlite & postgres: In [6]: connections['sqlite'].queries Out[6]: [{'sql': 'SELECT \"app_a\".\"id\", 0 AS \"should_be_bool\" FROM \"app_a\" ORDER BY \"app_a\".\"id\" ASC LIMIT 1', 'time': '0.001'}] In [7]: connections['pg'].queries Out[7]: [{'sql': 'SELECT \"app_a\".\"id\", false AS \"should_be_bool\" FROM \"app_a\" ORDER BY \"app_a\".\"id\" ASC LIMIT 1', 'time': '0.001'}] WRT to fixing it, as rajdesai24 has expressed an interest in doing so, I'll let them take the lead and get the contribution under their belt. Replying to rajdesai24: Hey Simon would love to submit a PR\nThanks for confirming Keryn, the difference in query generation is effectively expected on depending on whether the backend has a native boolean type. rajdesai24, sure thing please go ahead and submit a PR. Make sure to include a regression test demonstrating the problem that fails without the patch applied and passes with it applied. I suggest adding one in tests/annotations/tests.py similarly to â€‹the one added in dd1fa3a31b4680c0d3712e6ae122b878138580c7 but using Exists instead of Subquery.",
  "created_at": "2023-01-19T21:48:09Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_annotation_exists_none_query (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_exists_none_query)\"]",
  "PASS_TO_PASS": "[\"test_aggregate_alias (annotations.tests.AliasTests.test_aggregate_alias)\", \"test_alias_after_annotation (annotations.tests.AliasTests.test_alias_after_annotation)\", \"test_alias_annotate_with_aggregation (annotations.tests.AliasTests.test_alias_annotate_with_aggregation)\", \"test_alias_annotation_expression (annotations.tests.AliasTests.test_alias_annotation_expression)\", \"test_alias_default_alias_expression (annotations.tests.AliasTests.test_alias_default_alias_expression)\", \"test_alias_sql_injection (annotations.tests.AliasTests.test_alias_sql_injection)\", \"test_basic_alias (annotations.tests.AliasTests.test_basic_alias)\", \"test_basic_alias_annotation (annotations.tests.AliasTests.test_basic_alias_annotation)\", \"test_basic_alias_f_annotation (annotations.tests.AliasTests.test_basic_alias_f_annotation)\", \"test_basic_alias_f_transform_annotation (annotations.tests.AliasTests.test_basic_alias_f_transform_annotation)\", \"test_dates_alias (annotations.tests.AliasTests.test_dates_alias)\", \"test_datetimes_alias (annotations.tests.AliasTests.test_datetimes_alias)\", \"test_defer_only_alias (annotations.tests.AliasTests.test_defer_only_alias)\", \"test_filter_alias_agg_with_double_f (annotations.tests.AliasTests.test_filter_alias_agg_with_double_f)\", \"test_filter_alias_with_double_f (annotations.tests.AliasTests.test_filter_alias_with_double_f)\", \"test_filter_alias_with_f (annotations.tests.AliasTests.test_filter_alias_with_f)\", \"test_joined_alias_annotation (annotations.tests.AliasTests.test_joined_alias_annotation)\", \"test_order_by_alias (annotations.tests.AliasTests.test_order_by_alias)\", \"test_order_by_alias_aggregate (annotations.tests.AliasTests.test_order_by_alias_aggregate)\", \"test_overwrite_alias_with_annotation (annotations.tests.AliasTests.test_overwrite_alias_with_annotation)\", \"test_overwrite_annotation_with_alias (annotations.tests.AliasTests.test_overwrite_annotation_with_alias)\", \"test_update_with_alias (annotations.tests.AliasTests.test_update_with_alias)\", \"test_values_alias (annotations.tests.AliasTests.test_values_alias)\", \"test_aggregate_over_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_aggregate_over_annotation)\", \"test_aggregate_over_full_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_aggregate_over_full_expression_annotation)\", \"test_alias_forbidden_chars (annotations.tests.NonAggregateAnnotationTestCase.test_alias_forbidden_chars)\", \"test_alias_sql_injection (annotations.tests.NonAggregateAnnotationTestCase.test_alias_sql_injection)\", \"test_annotate_exists (annotations.tests.NonAggregateAnnotationTestCase.test_annotate_exists)\", \"test_annotate_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_annotate_with_aggregation)\", \"test_annotation_aggregate_with_m2o (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_aggregate_with_m2o)\", \"test_annotation_and_alias_filter_in_subquery (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_and_alias_filter_in_subquery)\", \"test_annotation_and_alias_filter_related_in_subquery (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_and_alias_filter_related_in_subquery)\", \"test_annotation_exists_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_exists_aggregate_values_chaining)\", \"test_annotation_filter_with_subquery (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_filter_with_subquery)\", \"test_annotation_in_f_grouped_by_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_in_f_grouped_by_annotation)\", \"test_annotation_reverse_m2m (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_reverse_m2m)\", \"test_annotation_subquery_and_aggregate_values_chaining (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_subquery_and_aggregate_values_chaining)\", \"test_annotation_subquery_outerref_transform (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_subquery_outerref_transform)\", \"test_annotation_with_m2m (annotations.tests.NonAggregateAnnotationTestCase.test_annotation_with_m2m)\", \"test_arguments_must_be_expressions (annotations.tests.NonAggregateAnnotationTestCase.test_arguments_must_be_expressions)\", \"test_basic_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_basic_annotation)\", \"test_basic_f_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_basic_f_annotation)\", \"test_boolean_value_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_boolean_value_annotation)\", \"test_chaining_annotation_filter_with_m2m (annotations.tests.NonAggregateAnnotationTestCase.test_chaining_annotation_filter_with_m2m)\", \"test_chaining_transforms (annotations.tests.NonAggregateAnnotationTestCase.test_chaining_transforms)\", \"Columns are aligned in the correct order for resolve_columns. This test\", \"test_column_field_ordering_with_deferred (annotations.tests.NonAggregateAnnotationTestCase.test_column_field_ordering_with_deferred)\", \"test_combined_annotation_commutative (annotations.tests.NonAggregateAnnotationTestCase.test_combined_annotation_commutative)\", \"test_combined_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_combined_expression_annotation_with_aggregation)\", \"test_combined_f_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_combined_f_expression_annotation_with_aggregation)\", \"test_custom_functions (annotations.tests.NonAggregateAnnotationTestCase.test_custom_functions)\", \"test_custom_functions_can_ref_other_functions (annotations.tests.NonAggregateAnnotationTestCase.test_custom_functions_can_ref_other_functions)\", \"test_custom_transform_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_custom_transform_annotation)\", \"test_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_decimal_annotation)\", \"Deferred attributes can be referenced by an annotation,\", \"test_empty_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_empty_expression_annotation)\", \"test_empty_queryset_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_empty_queryset_annotation)\", \"test_filter_agg_with_double_f (annotations.tests.NonAggregateAnnotationTestCase.test_filter_agg_with_double_f)\", \"test_filter_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation)\", \"test_filter_annotation_with_double_f (annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation_with_double_f)\", \"test_filter_annotation_with_f (annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation_with_f)\", \"test_filter_decimal_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_filter_decimal_annotation)\", \"test_filter_wrong_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_filter_wrong_annotation)\", \"test_full_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_full_expression_annotation)\", \"test_full_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_full_expression_annotation_with_aggregation)\", \"test_full_expression_wrapped_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_full_expression_wrapped_annotation)\", \"test_grouping_by_q_expression_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_grouping_by_q_expression_annotation)\", \"test_joined_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_joined_annotation)\", \"test_joined_transformed_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_joined_transformed_annotation)\", \"test_mixed_type_annotation_date_interval (annotations.tests.NonAggregateAnnotationTestCase.test_mixed_type_annotation_date_interval)\", \"test_mixed_type_annotation_numbers (annotations.tests.NonAggregateAnnotationTestCase.test_mixed_type_annotation_numbers)\", \"Fields on an inherited model can be referenced by an\", \"Annotating None onto a model round-trips\", \"test_order_by_aggregate (annotations.tests.NonAggregateAnnotationTestCase.test_order_by_aggregate)\", \"test_order_by_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_order_by_annotation)\", \"test_q_expression_annotation_with_aggregation (annotations.tests.NonAggregateAnnotationTestCase.test_q_expression_annotation_with_aggregation)\", \"test_raw_sql_with_inherited_field (annotations.tests.NonAggregateAnnotationTestCase.test_raw_sql_with_inherited_field)\", \"test_update_with_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_update_with_annotation)\", \"Annotations can reference fields in a values clause,\", \"test_values_with_pk_annotation (annotations.tests.NonAggregateAnnotationTestCase.test_values_with_pk_annotation)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.758606",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}