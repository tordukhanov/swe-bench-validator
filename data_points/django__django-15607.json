{
  "repo": "django/django",
  "instance_id": "django__django-15607",
  "base_commit": "e12670016bbcebcc0d89c2ac4a0121951181fbae",
  "patch": "diff --git a/django/contrib/auth/views.py b/django/contrib/auth/views.py\n--- a/django/contrib/auth/views.py\n+++ b/django/contrib/auth/views.py\n@@ -175,7 +175,10 @@ def get_next_page(self):\n             # Security check -- Ensure the user-originating redirection URL is\n             # safe.\n             if not url_is_safe:\n-                next_page = self.request.path\n+                if settings.LOGOUT_REDIRECT_URL:\n+                    next_page = resolve_url(settings.LOGOUT_REDIRECT_URL)\n+                else:\n+                    next_page = self.request.path\n         return next_page\n \n     def get_context_data(self, **kwargs):\n",
  "test_patch": "diff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py\n--- a/tests/auth_tests/test_views.py\n+++ b/tests/auth_tests/test_views.py\n@@ -1335,6 +1335,12 @@ def test_logout_redirect_url_setting(self):\n         response = self.client.post(\"/logout/\")\n         self.assertRedirects(response, \"/custom/\", fetch_redirect_response=False)\n \n+    @override_settings(LOGOUT_REDIRECT_URL=\"/custom/\")\n+    def test_logout_redirect_url_setting_allowed_hosts_unsafe_host(self):\n+        self.login()\n+        response = self.client.post(\"/logout/allowed_hosts/?next=https://evil/\")\n+        self.assertRedirects(response, \"/custom/\", fetch_redirect_response=False)\n+\n     @override_settings(LOGOUT_REDIRECT_URL=\"logout\")\n     def test_logout_redirect_url_named_setting(self):\n         self.login()\n",
  "problem_statement": "Unnecessary redirect in LogoutView when ?next=... contains \"unsafe\" URL\nDescription\n\t\nReproduction instructions\nSet LOGOUT_REDIRECT_URL\nWire LogoutView.as_view() at /logout/ in the URLconf\nAdd this form to any template: <form action=\"/logout/?next=http://evil/\" method=\"POST\"><input type=\"submit\" value=\"Logout\">{% csrf_token %}</form>\nLog in, then use the form to log out\nExpected result\nYou are logged out; the next parameter is ignored; you are redirected to LOGOUT_REDIRECT_URL\nActual result\nThere is an intermediary, useless redirect; see the logs of the development server:\n[16/Apr/2022 19:05:38] \"POST /logout/?next=http://evil/ HTTP/1.1\" 302 0\n[16/Apr/2022 19:05:38] \"GET /logout/ HTTP/1.1\" 302 0\n[16/Apr/2022 19:05:38] \"GET /en/ HTTP/1.1\" 200 13918\nI noticed this via code inspection. The implementation of LogoutView.get_next_page seemed a bit weird to me.\nThis stems from â€‹https://github.com/django/django/blame/e12670016bbcebcc0d89c2ac4a0121951181fbae/django/contrib/auth/views.py#L178 which predates the introduction of LOGOUT_REDIRECT_URL.\nFrom the user's perspective, the behavior is correct. There's just an extra round-trip and needlessly complicated code.\n",
  "hints_text": "",
  "created_at": "2022-04-16T17:31:19Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_logout_redirect_url_setting_allowed_hosts_unsafe_host (auth_tests.test_views.LogoutTest)\"]",
  "PASS_TO_PASS": "[\"Named URLs should be reversible\", \"test_redirect_to_login_with_lazy (auth_tests.test_views.RedirectToLoginTests)\", \"test_redirect_to_login_with_lazy_and_unicode (auth_tests.test_views.RedirectToLoginTests)\", \"test_https_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_lazy_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_login_url_with_querystring (auth_tests.test_views.LoginURLSettings)\", \"test_named_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_remote_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_remote_login_url_with_next_querystring (auth_tests.test_views.LoginURLSettings)\", \"test_standard_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_success_url_allowed_hosts_safe_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_success_url_allowed_hosts_same_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_success_url_allowed_hosts_unsafe_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_custom (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_default (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_named (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_remote (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_default_logout_then_login (auth_tests.test_views.LogoutThenLoginTests)\", \"test_default_logout_then_login_get (auth_tests.test_views.LogoutThenLoginTests)\", \"test_logout_then_login_with_custom_login (auth_tests.test_views.LogoutThenLoginTests)\", \"test_confirm_valid_custom_user (auth_tests.test_views.CustomUserPasswordResetTest)\", \"A uidb64 that decodes to a non-UUID doesn't crash.\", \"test_confirm_valid_custom_user (auth_tests.test_views.UUIDUserPasswordResetTest)\", \"#21649 - Ensure contrib.auth.views.password_change updates the user's\", \"test_password_change_done_fails (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_done_succeeds (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_fails_with_invalid_old_password (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_fails_with_mismatched_passwords (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_custom (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_custom_named (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_default (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_succeeds (auth_tests.test_views.ChangePasswordTest)\", \"Stay on the login page by default.\", \"If not logged in, stay on the same page.\", \"test_permission_required_logged_in (auth_tests.test_views.LoginRedirectAuthenticatedUser)\", \"test_permission_required_not_logged_in (auth_tests.test_views.LoginRedirectAuthenticatedUser)\", \"If logged in, go to default redirected URL.\", \"Detect a redirect loop if LOGIN_REDIRECT_URL is not correctly set,\", \"If next is specified as a GET parameter, go there.\", \"If logged in, go to custom redirected URL.\", \"test_current_site_in_context_after_login (auth_tests.test_views.LoginTest)\", \"Makes sure that a login rotates the currently-used CSRF token.\", \"test_login_form_contains_request (auth_tests.test_views.LoginTest)\", \"test_login_get_default_redirect_url (auth_tests.test_views.LoginTest)\", \"test_login_named_next_page_named (auth_tests.test_views.LoginTest)\", \"test_login_next_page (auth_tests.test_views.LoginTest)\", \"test_login_next_page_overrides_login_redirect_url_setting (auth_tests.test_views.LoginTest)\", \"test_login_redirect_url_overrides_get_default_redirect_url (auth_tests.test_views.LoginTest)\", \"test_login_redirect_url_overrides_next_page (auth_tests.test_views.LoginTest)\", \"Session without django.contrib.auth.HASH_SESSION_KEY should login\", \"test_security_check (auth_tests.test_views.LoginTest)\", \"test_security_check_https (auth_tests.test_views.LoginTest)\", \"To avoid reusing another user's session, ensure a new, empty session is\", \"As above, but same user logging in after a password change.\", \"test_14377 (auth_tests.test_views.LogoutTest)\", \"Logout without next_page option renders the default template\", \"The logout() view should send \\\"no-cache\\\" headers for reasons described\", \"Language is preserved after logout.\", \"test_logout_redirect_url_named_setting (auth_tests.test_views.LogoutTest)\", \"test_logout_redirect_url_setting (auth_tests.test_views.LogoutTest)\", \"Logout with custom query string redirects to specified resource\", \"test_logout_with_get_raises_deprecation_warning (auth_tests.test_views.LogoutTest)\", \"Logout resolves names or URLs passed as next_page.\", \"Logout with next_page option given redirects to specified resource\", \"test_logout_with_overridden_redirect_url (auth_tests.test_views.LogoutTest)\", \"test_logout_with_post (auth_tests.test_views.LogoutTest)\", \"Logout with query string redirects to specified resource\", \"test_security_check (auth_tests.test_views.LogoutTest)\", \"test_security_check_https (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_safe_host (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_same_host (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_unsafe_host (auth_tests.test_views.LogoutTest)\", \"test_admin_password_change (auth_tests.test_views.UUIDUserTests)\", \"test_confirm_complete (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_custom_reset_url_token (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_custom_reset_url_token_link_redirects_to_set_password_page (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_different_passwords (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_display_user_from_form (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_invalid (auth_tests.test_views.PasswordResetTest)\", \"A POST with an invalid token is rejected.\", \"test_confirm_invalid_post (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_invalid_user (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_link_redirects_to_set_password_page (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset_already_logged_in (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset_custom_backend (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_overflow_user (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_custom (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_custom_named (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_default (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_valid (auth_tests.test_views.PasswordResetTest)\", \"Email is sent if a valid email address is provided for password reset\", \"If the provided email is not registered, don't raise any error but\", \"extra_email_context should be available in the email template context.\", \"A multipart email with text/plain and text/html is sent\", \"test_invalid_link_if_going_directly_to_the_final_reset_password_url (auth_tests.test_views.PasswordResetTest)\", \"test_missing_kwargs (auth_tests.test_views.PasswordResetTest)\", \"Poisoned HTTP_HOST headers can't be used for reset emails\", \"Poisoned HTTP_HOST headers can't be used for reset emails on admin views\", \"test_reset_custom_redirect (auth_tests.test_views.PasswordResetTest)\", \"test_reset_custom_redirect_named (auth_tests.test_views.PasswordResetTest)\", \"test_reset_redirect_default (auth_tests.test_views.PasswordResetTest)\", \"test_changelist_disallows_password_lookups (auth_tests.test_views.ChangelistTests)\", \"test_password_change_bad_url (auth_tests.test_views.ChangelistTests)\", \"test_user_change_different_user_password (auth_tests.test_views.ChangelistTests)\", \"test_user_change_email (auth_tests.test_views.ChangelistTests)\", \"test_user_change_password (auth_tests.test_views.ChangelistTests)\", \"test_user_change_password_passes_user_to_has_change_permission (auth_tests.test_views.ChangelistTests)\", \"test_user_not_change (auth_tests.test_views.ChangelistTests)\", \"test_view_user_password_is_readonly (auth_tests.test_views.ChangelistTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.734716",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}