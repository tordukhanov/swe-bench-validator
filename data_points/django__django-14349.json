{
  "repo": "django/django",
  "instance_id": "django__django-14349",
  "base_commit": "a708f39ce67af174df90c5b5e50ad1976cec7cb8",
  "patch": "diff --git a/django/core/validators.py b/django/core/validators.py\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -92,6 +92,7 @@ class URLValidator(RegexValidator):\n         r'\\Z', re.IGNORECASE)\n     message = _('Enter a valid URL.')\n     schemes = ['http', 'https', 'ftp', 'ftps']\n+    unsafe_chars = frozenset('\\t\\r\\n')\n \n     def __init__(self, schemes=None, **kwargs):\n         super().__init__(**kwargs)\n@@ -101,6 +102,8 @@ def __init__(self, schemes=None, **kwargs):\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if self.unsafe_chars.intersection(value):\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n",
  "test_patch": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,9 +226,15 @@\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Newlines and tabs are not accepted.\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "problem_statement": "URLValidator tests failing on Python versions patched for bpo-43882\nDescription\n\t\nOn Python versions with a fix for â€‹bpo-43882 (i.e. 3.10.0b1 and the 3.9 git branch, not released yet) the following tests fail:\n======================================================================\nFAIL: test_validators (validators.tests.TestValidators) [URLValidator] (value='http://www.djangoproject.com/\\n')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/usr/lib/python3.7/unittest/case.py\", line 59, in testPartExecutor\n\tyield\n File \"/usr/lib/python3.7/unittest/case.py\", line 546, in subTest\n\tyield\n File \"/tmp/portage/dev-python/django-3.2.1/work/Django-3.2.1/tests/validators/tests.py\", line 328, in test_validators\n\tvalidator(value)\n File \"/usr/lib/python3.7/unittest/case.py\", line 203, in __exit__\n\tself._raiseFailure(\"{} not raised\".format(exc_name))\n File \"/usr/lib/python3.7/unittest/case.py\", line 135, in _raiseFailure\n\traise self.test_case.failureException(msg)\nAssertionError: ValidationError not raised\n======================================================================\nFAIL: test_validators (validators.tests.TestValidators) [URLValidator] (value='http://[::ffff:192.9.5.5]\\n')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/usr/lib/python3.7/unittest/case.py\", line 59, in testPartExecutor\n\tyield\n File \"/usr/lib/python3.7/unittest/case.py\", line 546, in subTest\n\tyield\n File \"/tmp/portage/dev-python/django-3.2.1/work/Django-3.2.1/tests/validators/tests.py\", line 328, in test_validators\n\tvalidator(value)\n File \"/usr/lib/python3.7/unittest/case.py\", line 203, in __exit__\n\tself._raiseFailure(\"{} not raised\".format(exc_name))\n File \"/usr/lib/python3.7/unittest/case.py\", line 135, in _raiseFailure\n\traise self.test_case.failureException(msg)\nAssertionError: ValidationError not raised\nFWICS, the project is that django rejects URLs based on the split URL components. However, the bpo-43882 fix changes URL splitting behavior to strip all instances of LF, CR and tab characters before splitting, so they never reach the validator.\nI'm not sure what the best fix is. One option is to reject URLs containing the forbidden characters early. Another is to go with the new recommendation and assume that LF, CR and tabs are to stripped silently.\n",
  "hints_text": "Thanks for the report. We noticed this issue.\nDuplicate of #32074.\nFor the record, I was wrong that this hasn't been released in 3.9 -- it's part of 3.9.5.\nIt looks that it will be backported to all supported versions of Python.",
  "created_at": "2021-05-04T20:10:27Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_validators (validators.tests.TestValidators)\"]",
  "PASS_TO_PASS": "[\"test_domain_whitelist (validators.tests.DeprecationTests)\", \"test_domain_whitelist_access_warning (validators.tests.DeprecationTests)\", \"test_domain_whitelist_set_warning (validators.tests.DeprecationTests)\", \"test_whitelist (validators.tests.DeprecationTests)\", \"test_whitelist_warning (validators.tests.DeprecationTests)\", \"test_basic_equality (validators.tests.TestValidatorEquality)\", \"test_decimal_equality (validators.tests.TestValidatorEquality)\", \"test_email_equality (validators.tests.TestValidatorEquality)\", \"test_file_extension_equality (validators.tests.TestValidatorEquality)\", \"test_prohibit_null_characters_validator_equality (validators.tests.TestValidatorEquality)\", \"test_regex_equality (validators.tests.TestValidatorEquality)\", \"test_regex_equality_blank (validators.tests.TestValidatorEquality)\", \"test_regex_equality_nocache (validators.tests.TestValidatorEquality)\", \"test_max_length_validator_message (validators.tests.TestValidators)\", \"test_message_dict (validators.tests.TestValidators)\", \"test_message_list (validators.tests.TestValidators)\", \"test_regex_validator_flags (validators.tests.TestValidators)\", \"test_single_message (validators.tests.TestValidators)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.688024",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}