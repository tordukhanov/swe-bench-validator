{
  "repo": "django/django",
  "instance_id": "django__django-15316",
  "base_commit": "fdfa97fb166ef5065aa2b229f19cb4ce303084e5",
  "patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -137,9 +137,10 @@ def default_reference_role(name, rawtext, text, lineno, inliner, options=None, c\n     for name, urlbase in ROLES.items():\n         create_reference_role(name, urlbase)\n \n-# Match the beginning of a named or unnamed group.\n+# Match the beginning of a named, unnamed, or non-capturing groups.\n named_group_matcher = _lazy_re_compile(r'\\(\\?P(<\\w+>)')\n unnamed_group_matcher = _lazy_re_compile(r'\\(')\n+non_capturing_group_matcher = _lazy_re_compile(r'\\(\\?\\:')\n \n \n def replace_metacharacters(pattern):\n@@ -210,3 +211,18 @@ def replace_unnamed_groups(pattern):\n         final_pattern += pattern[:start] + '<var>'\n         prev_end = end\n     return final_pattern + pattern[prev_end:]\n+\n+\n+def remove_non_capturing_groups(pattern):\n+    r\"\"\"\n+    Find non-capturing groups in the given `pattern` and remove them, e.g.\n+    1. (?P<a>\\w+)/b/(?:\\w+)c(?:\\w+) => (?P<a>\\\\w+)/b/c\n+    2. ^(?:\\w+(?:\\w+))a => ^a\n+    3. ^a(?:\\w+)/b(?:\\w+) => ^a/b\n+    \"\"\"\n+    group_start_end_indices = _find_groups(pattern, non_capturing_group_matcher)\n+    final_pattern, prev_end = '', None\n+    for start, end, _ in group_start_end_indices:\n+        final_pattern += pattern[prev_end:start]\n+        prev_end = end\n+    return final_pattern + pattern[prev_end:]\ndiff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py\n--- a/django/contrib/admindocs/views.py\n+++ b/django/contrib/admindocs/views.py\n@@ -8,7 +8,8 @@\n from django.contrib.admin.views.decorators import staff_member_required\n from django.contrib.admindocs import utils\n from django.contrib.admindocs.utils import (\n-    replace_metacharacters, replace_named_groups, replace_unnamed_groups,\n+    remove_non_capturing_groups, replace_metacharacters, replace_named_groups,\n+    replace_unnamed_groups,\n )\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.db import models\n@@ -410,6 +411,7 @@ def simplify_regex(pattern):\n     example, turn \"^(?P<sport_slug>\\w+)/athletes/(?P<athlete_slug>\\w+)/$\"\n     into \"/<sport_slug>/athletes/<athlete_slug>/\".\n     \"\"\"\n+    pattern = remove_non_capturing_groups(pattern)\n     pattern = replace_named_groups(pattern)\n     pattern = replace_unnamed_groups(pattern)\n     pattern = replace_metacharacters(pattern)\n",
  "test_patch": "diff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -397,6 +397,13 @@ def test_simplify_regex(self):\n             (r'^(?P<a>(x|y))/b/(?P<c>\\w+)', '/<a>/b/<c>'),\n             (r'^(?P<a>(x|y))/b/(?P<c>\\w+)ab', '/<a>/b/<c>ab'),\n             (r'^(?P<a>(x|y)(\\(|\\)))/b/(?P<c>\\w+)ab', '/<a>/b/<c>ab'),\n+            # Non-capturing groups.\n+            (r'^a(?:\\w+)b', '/ab'),\n+            (r'^a(?:(x|y))', '/a'),\n+            (r'^(?:\\w+(?:\\w+))a', '/a'),\n+            (r'^a(?:\\w+)/b(?:\\w+)', '/a/b'),\n+            (r'(?P<a>\\w+)/b/(?:\\w+)c(?:\\w+)', '/<a>/b/c'),\n+            (r'(?P<a>\\w+)/b/(\\w+)/(?:\\w+)c(?:\\w+)', '/<a>/b/<var>/c'),\n             # Single and repeated metacharacters.\n             (r'^a', '/a'),\n             (r'^^a', '/a'),\n",
  "problem_statement": "simplify_regex() doesn't handle non-capturing groups\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nWhile using Django REST Framework's Schema generator, I found out they're using simplify_regex(); however, current version has a few shortcomings, namely non-capturing groups are broken.\nsimplify_regex() doesn't handle non-capturing groups\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nWhile using Django REST Framework's Schema generator, I found out they're using simplify_regex(); however, current version has a few shortcomings, namely non-capturing groups are broken.\n",
  "hints_text": "I left comments for improvement on the PR. Please uncheck \"Patch needs improvement\" after updating.\nThis PR is no longer related to this issue.\nI have opened a ​pull request that allows simplify_regex() to handle non-capturing groups and additional tests for them in test_simplify_regex().\nI've submitted a patch here ​https://github.com/django/django/pull/15256.\nYou need to uncheck \"Patch needs improvement\" so the ticket appears in the review queue. Please don't use mass @ mentions on the PR to request a review.\nReplying to Tim Graham: You need to uncheck \"Patch needs improvement\" so the ticket appears in the review queue. Please don't use mass @ mentions on the PR to request a review. Sorry, Felisiak never came so I have to ask someone else lol\nReplying to Mariusz Felisiak: Okay I updated that PR to only include feature, I'll create new PR for code refactor :thumbsup:.\nIn 827bc070: Refs #28135 -- Refactored out _find_groups()/_get_group_start_end() hooks in admindocs.\nI left comments for improvement on the PR. Please uncheck \"Patch needs improvement\" after updating.\nThis PR is no longer related to this issue.\nI have opened a ​pull request that allows simplify_regex() to handle non-capturing groups and additional tests for them in test_simplify_regex().\nI've submitted a patch here ​https://github.com/django/django/pull/15256.\nYou need to uncheck \"Patch needs improvement\" so the ticket appears in the review queue. Please don't use mass @ mentions on the PR to request a review.\nReplying to Tim Graham: You need to uncheck \"Patch needs improvement\" so the ticket appears in the review queue. Please don't use mass @ mentions on the PR to request a review. Sorry, Felisiak never came so I have to ask someone else lol\nReplying to Mariusz Felisiak: Okay I updated that PR to only include feature, I'll create new PR for code refactor :thumbsup:.\nIn 827bc070: Refs #28135 -- Refactored out _find_groups()/_get_group_start_end() hooks in admindocs.",
  "created_at": "2022-01-14T04:36:43Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_simplify_regex (admin_docs.test_views.AdminDocViewFunctionsTests)\", \"test_template_detail_path_traversal (admin_docs.test_views.AdminDocViewDefaultEngineOnly)\"]",
  "PASS_TO_PASS": "[\"test_builtin_fields (admin_docs.test_views.TestFieldType)\", \"test_custom_fields (admin_docs.test_views.TestFieldType)\", \"test_field_name (admin_docs.test_views.TestFieldType)\", \"test_app_not_found (admin_docs.test_views.TestModelDetailView)\", \"The ``description`` field should render correctly for each field type.\", \"Model cached properties are displayed as fields.\", \"Model properties are displayed as fields.\", \"test_method_data_types (admin_docs.test_views.TestModelDetailView)\", \"Methods that begin with strings defined in\", \"Methods that take arguments should also displayed.\", \"Methods with arguments should have their arguments displayed.\", \"Methods with keyword arguments should have their arguments displayed.\", \"Methods with multiple arguments should have all their arguments\", \"test_model_detail_title (admin_docs.test_views.TestModelDetailView)\", \"test_model_docstring_renders_correctly (admin_docs.test_views.TestModelDetailView)\", \"test_model_not_found (admin_docs.test_views.TestModelDetailView)\", \"test_model_with_many_to_one (admin_docs.test_views.TestModelDetailView)\", \"A model with ``related_name`` of `+` shouldn't show backward\", \"test_bookmarklets (admin_docs.test_views.AdminDocViewTests)\", \"Index view should correctly resolve view patterns when ROOT_URLCONF is\", \"test_index (admin_docs.test_views.AdminDocViewTests)\", \"test_missing_docutils (admin_docs.test_views.AdminDocViewTests)\", \"test_model_index (admin_docs.test_views.AdminDocViewTests)\", \"test_namespaced_view_detail (admin_docs.test_views.AdminDocViewTests)\", \"Without the sites framework, should not access SITE_ID or Site\", \"test_template_detail (admin_docs.test_views.AdminDocViewTests)\", \"test_templatefilter_index (admin_docs.test_views.AdminDocViewTests)\", \"test_templatetag_index (admin_docs.test_views.AdminDocViewTests)\", \"test_view_detail (admin_docs.test_views.AdminDocViewTests)\", \"Views that are methods can be displayed.\", \"test_view_detail_illegal_import (admin_docs.test_views.AdminDocViewTests)\", \"test_view_index (admin_docs.test_views.AdminDocViewTests)\", \"Views that are methods are listed correctly.\", \"test_bookmarklets (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_missing_docutils (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_model_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_namespaced_view_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_template_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_templatefilter_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_templatetag_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_detail (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_detail_illegal_import (admin_docs.test_views.AdminDocViewWithMultipleEngines)\", \"test_view_index (admin_docs.test_views.AdminDocViewWithMultipleEngines)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.725142",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}