{
  "repo": "pylint-dev/pylint",
  "instance_id": "pylint-dev__pylint-4858",
  "base_commit": "676f484871a40bd0256e1cc68c28ea748a61acec",
  "patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -64,6 +64,7 @@\n )\n \n import astroid\n+from astroid.node_classes import NodeNG\n \n from pylint.checkers import BaseChecker, MapReduceMixin, table_lines_from_stats\n from pylint.interfaces import IRawChecker\n@@ -586,11 +587,23 @@ def stripped_lines(\n         }\n         current_line_is_import = False\n     if ignore_signatures:\n-        functions = [\n-            n\n-            for n in tree.body\n-            if isinstance(n, (astroid.FunctionDef, astroid.AsyncFunctionDef))\n-        ]\n+\n+        def _get_functions(functions: List[NodeNG], tree: NodeNG) -> List[NodeNG]:\n+            \"\"\"Recursively get all functions including nested in the classes from the tree.\"\"\"\n+\n+            for node in tree.body:\n+                if isinstance(node, (astroid.FunctionDef, astroid.AsyncFunctionDef)):\n+                    functions.append(node)\n+\n+                if isinstance(\n+                    node,\n+                    (astroid.ClassDef, astroid.FunctionDef, astroid.AsyncFunctionDef),\n+                ):\n+                    _get_functions(functions, node)\n+\n+            return functions\n+\n+        functions = _get_functions([], tree)\n         signature_lines = set(\n             chain(\n                 *(\n",
  "test_patch": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -36,6 +36,8 @@\n SIMILAR4 = str(INPUT / \"similar4\")\n SIMILAR5 = str(INPUT / \"similar5\")\n SIMILAR6 = str(INPUT / \"similar6\")\n+SIMILAR_CLS_A = str(INPUT / \"similar_cls_a.py\")\n+SIMILAR_CLS_B = str(INPUT / \"similar_cls_b.py\")\n EMPTY_FUNCTION_1 = str(INPUT / \"similar_empty_func_1.py\")\n EMPTY_FUNCTION_2 = str(INPUT / \"similar_empty_func_2.py\")\n MULTILINE = str(INPUT / \"multiline-import\")\n@@ -213,6 +215,66 @@ def test_ignore_signatures_pass():\n     )\n \n \n+def test_ignore_signatures_class_methods_fail():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([SIMILAR_CLS_B, SIMILAR_CLS_A])\n+    assert ex.value.code == 0\n+    assert (\n+        output.getvalue().strip()\n+        == (\n+            '''\n+15 similar lines in 2 files\n+==%s:[1:18]\n+==%s:[1:18]\n+       def parent_method(\n+           self,\n+           *,\n+           a=\"\",\n+           b=None,\n+           c=True,\n+       ):\n+           \"\"\"Overridden method example.\"\"\"\n+\n+           def _internal_func(\n+               arg1: int = 1,\n+               arg2: str = \"2\",\n+               arg3: int = 3,\n+               arg4: bool = True,\n+           ):\n+               pass\n+\n+\n+7 similar lines in 2 files\n+==%s:[20:27]\n+==%s:[20:27]\n+               self,\n+               *,\n+               a=None,\n+               b=False,\n+               c=\"\",\n+           ):\n+               pass\n+TOTAL lines=54 duplicates=22 percent=40.74\n+'''\n+            % (SIMILAR_CLS_A, SIMILAR_CLS_B, SIMILAR_CLS_A, SIMILAR_CLS_B)\n+        ).strip()\n+    )\n+\n+\n+def test_ignore_signatures_class_methods_pass():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--ignore-signatures\", SIMILAR_CLS_B, SIMILAR_CLS_A])\n+    assert ex.value.code == 0\n+    assert (\n+        output.getvalue().strip()\n+        == \"\"\"\n+TOTAL lines=54 duplicates=0 percent=0.00\n+\"\"\".strip()\n+    )\n+\n+\n def test_ignore_signatures_empty_functions_fail():\n     output = StringIO()\n     with redirect_stdout(output), pytest.raises(SystemExit) as ex:\ndiff --git a/tests/input/similar_cls_a.py b/tests/input/similar_cls_a.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/input/similar_cls_a.py\n@@ -0,0 +1,27 @@\n+class A:\n+    def parent_method(\n+        self,\n+        *,\n+        a=\"\",\n+        b=None,\n+        c=True,\n+    ):\n+        \"\"\"Overridden method example.\"\"\"\n+\n+        def _internal_func(\n+            arg1: int = 1,\n+            arg2: str = \"2\",\n+            arg3: int = 3,\n+            arg4: bool = True,\n+        ):\n+            pass\n+\n+    class InternalA:\n+        def some_method_a(\n+            self,\n+            *,\n+            a=None,\n+            b=False,\n+            c=\"\",\n+        ):\n+            pass\ndiff --git a/tests/input/similar_cls_b.py b/tests/input/similar_cls_b.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/input/similar_cls_b.py\n@@ -0,0 +1,27 @@\n+class B:\n+    def parent_method(\n+        self,\n+        *,\n+        a=\"\",\n+        b=None,\n+        c=True,\n+    ):\n+        \"\"\"Overridden method example.\"\"\"\n+\n+        def _internal_func(\n+            arg1: int = 1,\n+            arg2: str = \"2\",\n+            arg3: int = 3,\n+            arg4: bool = True,\n+        ):\n+            pass\n+\n+    class InternalB:\n+        def some_method_b(\n+            self,\n+            *,\n+            a=None,\n+            b=False,\n+            c=\"\",\n+        ):\n+            pass\n",
  "problem_statement": "Ignore class methods signatures with similarities \"ignore-signatures\" option enabled\n### Is your feature request related to a problem? Please describe\r\n\r\nInitial already closed issue #3619.\r\nOne more related closed question with examples #4350.\r\n\r\nSimilarities \"ignore-signatures\" option currently only ignores functions' signatures.\r\nClass methods won't be ignored with the current implementation which would be very useful to avoid false-negative `duplicate-code` errors for classes.\r\n\r\n### Describe the solution you'd like\r\n\r\nWith similarities \"ignore-signatures\" option enabled, class methods' signatures are ignored the same way as functions'.\r\n\n",
  "hints_text": "",
  "created_at": "2021-08-17T11:08:39Z",
  "version": "2.10",
  "FAIL_TO_PASS": "[\"tests/checkers/unittest_similar.py::test_ignore_signatures_class_methods_pass\"]",
  "PASS_TO_PASS": "[\"tests/checkers/unittest_similar.py::test_ignore_comments\", \"tests/checkers/unittest_similar.py::test_ignore_docstrings\", \"tests/checkers/unittest_similar.py::test_ignore_imports\", \"tests/checkers/unittest_similar.py::test_multiline_imports\", \"tests/checkers/unittest_similar.py::test_ignore_multiline_imports\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_fail\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_pass\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_class_methods_fail\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_fail\", \"tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_pass\", \"tests/checkers/unittest_similar.py::test_no_hide_code_with_imports\", \"tests/checkers/unittest_similar.py::test_ignore_nothing\", \"tests/checkers/unittest_similar.py::test_lines_without_meaningful_content_do_not_trigger_similarity\", \"tests/checkers/unittest_similar.py::test_help\", \"tests/checkers/unittest_similar.py::test_no_args\", \"tests/checkers/unittest_similar.py::test_get_map_data\"]",
  "environment_setup_commit": "bc95cd34071ec2e71de5bca8ff95cc9b88e23814",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.909237",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}