{
  "repo": "django/django",
  "instance_id": "django__django-17029",
  "base_commit": "953f29f700a60fc09b08b2c2270c12c447490c6a",
  "patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -373,6 +373,7 @@ def clear_cache(self):\n \n         This is mostly used in tests.\n         \"\"\"\n+        self.get_swappable_settings_name.cache_clear()\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n",
  "test_patch": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -197,6 +197,17 @@ def test_get_model(self):\n         with self.assertRaises(ValueError):\n             apps.get_model(\"admin_LogEntry\")\n \n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        # Set cache.\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        apps.clear_cache()\n+\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n+\n     @override_settings(INSTALLED_APPS=[\"apps.apps.RelabeledAppsConfig\"])\n     def test_relabeling(self):\n         self.assertEqual(apps.get_app_config(\"relabeled\").name, \"apps\")\n",
  "problem_statement": "Apps.clear_cache() does not clear get_swappable_settings_name cache.\nDescription\n\t\nWe use apps.clear_cache() in django-stubs to be able to reset the previous state on consequential mypy runs.\nCode: ​https://github.com/typeddjango/django-stubs/pull/1601/files#diff-c49d8fe2cd0a58fad3c36ab3a88c7745e9622f3098e60cd512953eb17b8a1994R63-R64\nBut, looks like we don't clear all the object's cache this way, because get_swappable_settings_name (which is a functools._lru_cache_wrapper) is not cleared.\nI think that this is not correct. .clear_cache doc states: Clear all internal caches, for methods that alter the app registry.\nLooks like that is not the case.\nI propose to add: self.get_swappable_settings_name.cache_clear() line to def clear_cache.\nIf others agree, I will make a PR.\nOriginal discussion: ​https://github.com/typeddjango/django-stubs/pull/1601#discussion_r1246344533\n",
  "hints_text": "Thanks for the report, tentatively accepted.",
  "created_at": "2023-06-29T13:18:26Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_clear_cache (apps.tests.AppsTests.test_clear_cache)\"]",
  "PASS_TO_PASS": "[\"test_app_default_auto_field (apps.tests.AppConfigTests.test_app_default_auto_field)\", \"test_default_auto_field_setting (apps.tests.AppConfigTests.test_default_auto_field_setting)\", \"If single element in __path__, use it (in preference to __file__).\", \"If the __path__ attr contains duplicate paths and there is no\", \"If the __path__ attr is empty, use __file__ if set.\", \"If the __path__ attr is empty and there is no __file__, raise.\", \"If path set as class attr, overrides __path__ and __file__.\", \"test_invalid_label (apps.tests.AppConfigTests.test_invalid_label)\", \"If the __path__ attr is length>1, use __file__ if set.\", \"If the __path__ attr is length>1 and there is no __file__, raise.\", \"If there is no __path__ attr, use __file__.\", \"If there is no __path__ or __file__, raise ImproperlyConfigured.\", \"If subclass sets path as class attr, no module attributes needed.\", \"test_repr (apps.tests.AppConfigTests.test_repr)\", \"A Py3.3+ namespace package with multiple locations cannot be an app.\", \"Multiple locations are ok only if app-config has explicit path.\", \"A Py3.3+ namespace package can be an app if it has only one path.\", \"Tests when INSTALLED_APPS contains an incorrect app config.\", \"test_duplicate_labels (apps.tests.AppsTests.test_duplicate_labels)\", \"test_duplicate_names (apps.tests.AppsTests.test_duplicate_names)\", \"Makes a new model at runtime and ensures it goes into the right place.\", \"Tests apps.get_app_config().\", \"Tests apps.get_app_configs().\", \"apps.get_containing_app_config() should raise an exception if\", \"Tests apps.get_model().\", \"App discovery should preserve stack traces. Regression test for #22920.\", \"Tests apps.is_installed().\", \"Tests apps.lazy_model_operation().\", \"Test for behavior when two models clash in the app registry.\", \"apps.get_models() raises an exception if apps.models_ready isn't True.\", \"The models in the models.py file were loaded correctly.\", \"Load an app that doesn't provide an AppConfig class.\", \"Tests when INSTALLED_APPS contains an app that doesn't exist, either\", \"test_no_such_app_config (apps.tests.AppsTests.test_no_such_app_config)\", \"test_no_such_app_config_with_choices (apps.tests.AppsTests.test_no_such_app_config_with_choices)\", \"Tests when INSTALLED_APPS contains a class that isn't an app config.\", \"Load an app that provides an AppConfig class.\", \"Tests the ready property of the main registry.\", \"test_relabeling (apps.tests.AppsTests.test_relabeling)\", \"Only one main registry can exist.\", \"Load an app that provides two AppConfig classes.\", \"Load an app that provides two AppConfig classes, one being the default.\", \"Load an app that provides two default AppConfig classes.\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.777140",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}