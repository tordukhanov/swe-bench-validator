{
  "repo": "django/django",
  "instance_id": "django__django-14733",
  "base_commit": "ae89daf46f83a7b39d599d289624c3377bfa4ab1",
  "patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -2,7 +2,7 @@\n from django.forms import Form\n from django.forms.fields import BooleanField, IntegerField\n from django.forms.utils import ErrorList\n-from django.forms.widgets import HiddenInput, NumberInput\n+from django.forms.widgets import CheckboxInput, HiddenInput, NumberInput\n from django.utils.functional import cached_property\n from django.utils.html import html_safe\n from django.utils.safestring import mark_safe\n@@ -55,6 +55,7 @@ class BaseFormSet:\n     \"\"\"\n     A collection of instances of the same Form class.\n     \"\"\"\n+    deletion_widget = CheckboxInput\n     ordering_widget = NumberInput\n     default_error_messages = {\n         'missing_management_form': _(\n@@ -283,6 +284,10 @@ def compare_ordering_key(k):\n     def get_default_prefix(cls):\n         return 'form'\n \n+    @classmethod\n+    def get_deletion_widget(cls):\n+        return cls.deletion_widget\n+\n     @classmethod\n     def get_ordering_widget(cls):\n         return cls.ordering_widget\n@@ -417,7 +422,11 @@ def add_fields(self, form, index):\n                     widget=self.get_ordering_widget(),\n                 )\n         if self.can_delete and (self.can_delete_extra or index < initial_form_count):\n-            form.fields[DELETION_FIELD_NAME] = BooleanField(label=_('Delete'), required=False)\n+            form.fields[DELETION_FIELD_NAME] = BooleanField(\n+                label=_('Delete'),\n+                required=False,\n+                widget=self.get_deletion_widget(),\n+            )\n \n     def add_prefix(self, index):\n         return '%s-%s' % (self.prefix, index)\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -551,6 +551,38 @@ def test_formset_with_deletion_invalid_deleted_form(self):\n         self.assertEqual(formset._errors, [])\n         self.assertEqual(len(formset.deleted_forms), 1)\n \n+    def test_formset_with_deletion_custom_widget(self):\n+        class DeletionAttributeFormSet(BaseFormSet):\n+            deletion_widget = HiddenInput\n+\n+        class DeletionMethodFormSet(BaseFormSet):\n+            def get_deletion_widget(self):\n+                return HiddenInput(attrs={'class': 'deletion'})\n+\n+        tests = [\n+            (DeletionAttributeFormSet, '<input type=\"hidden\" name=\"form-0-DELETE\">'),\n+            (\n+                DeletionMethodFormSet,\n+                '<input class=\"deletion\" type=\"hidden\" name=\"form-0-DELETE\">',\n+            ),\n+        ]\n+        for formset_class, delete_html in tests:\n+            with self.subTest(formset_class=formset_class.__name__):\n+                ArticleFormSet = formset_factory(\n+                    ArticleForm,\n+                    formset=formset_class,\n+                    can_delete=True,\n+                )\n+                formset = ArticleFormSet(auto_id=False)\n+                self.assertHTMLEqual(\n+                    '\\n'.join([form.as_ul() for form in formset.forms]),\n+                    (\n+                        f'<li>Title: <input type=\"text\" name=\"form-0-title\"></li>'\n+                        f'<li>Pub date: <input type=\"text\" name=\"form-0-pub_date\">'\n+                        f'{delete_html}</li>'\n+                    ),\n+                )\n+\n     def test_formsets_with_ordering(self):\n         \"\"\"\n         formset_factory's can_order argument adds an integer field to each\n@@ -602,8 +634,8 @@ def test_formsets_with_ordering(self):\n             ],\n         )\n \n-    def test_formsets_with_order_custom_widget(self):\n-        class OrderingAttributFormSet(BaseFormSet):\n+    def test_formsets_with_ordering_custom_widget(self):\n+        class OrderingAttributeFormSet(BaseFormSet):\n             ordering_widget = HiddenInput\n \n         class OrderingMethodFormSet(BaseFormSet):\n@@ -611,7 +643,7 @@ def get_ordering_widget(self):\n                 return HiddenInput(attrs={'class': 'ordering'})\n \n         tests = (\n-            (OrderingAttributFormSet, '<input type=\"hidden\" name=\"form-0-ORDER\">'),\n+            (OrderingAttributeFormSet, '<input type=\"hidden\" name=\"form-0-ORDER\">'),\n             (OrderingMethodFormSet, '<input class=\"ordering\" type=\"hidden\" name=\"form-0-ORDER\">'),\n         )\n         for formset_class, order_html in tests:\n",
  "problem_statement": "Allow overriding of deletion widget in formsets\nDescription\n\t\nIn Django 3.0 ordering_widget and get_ordering_widget() were introduced (see #29956). The typical use case was to easily override the ORDER field in formsets that are updated in the frontend. For the exact same use case, I'd find it useful to see deletion_widget and get_deletion_widget() getting introduced.\nDiscussion ​initiated here for this feature.\n",
  "hints_text": "Thanks, sounds reasonable.\n​PR",
  "created_at": "2021-08-03T09:07:47Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_formset_with_deletion_custom_widget (forms_tests.tests.test_formsets.FormsFormsetTestCase)\"]",
  "PASS_TO_PASS": "[\"all_valid() validates all forms, even when some are invalid.\", \"test_valid (forms_tests.tests.test_formsets.AllValidTests)\", \"is_multipart() works with an empty formset.\", \"An empty formset still calls clean()\", \"Media is available on empty formset.\", \"test_as_p (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_table (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_ul (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_customize_management_form_error (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_empty_forms_are_unbound (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_form_errors_are_caught_by_formset (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_management_form_invalid_data (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_no_data_error (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_with_management_data_attrs_work_fine (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_absolute_max_invalid (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_absolute_max_with_max_num (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A FormSet constructor takes the same arguments as Form. Create a\", \"A form that's displayed as blank may be submitted as blank.\", \"test_can_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"FormSets have a clean() hook for doing extra validation that isn't tied\", \"test_default_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Deleting prefilled data is an error. Removing data from form fields\", \"test_disable_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"More than 1 empty form can be displayed using formset_factory's\", \"Ordering fields are allowed to be left blank. If they are left blank,\", \"test_form_kwargs_empty_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Custom kwargs set on the formset instance are passed to the\", \"Form kwargs can be passed dynamically in a formset.\", \"Formsets call is_valid() on each form.\", \"Formset's forms use the formset's error_class.\", \"FormSet.has_changed() is True if any data is passed to its forms, even\", \"A FormSet can be prefilled with existing data by providing a list of\", \"Formset instances are iterable.\", \"A formsets without any forms evaluates as True.\", \"Formset works with SplitDateTimeField(initial=datetime.datetime.now).\", \"A valid formset should have 0 total errors.\", \"test_formset_total_error_count_with_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"If validate_max is set and max_num is less than TOTAL_FORMS in the\", \"test_formset_validate_min_excludes_empty_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"If validate_min is set and min_num is more than TOTAL_FORMS in the\", \"min_num validation doesn't consider unchanged forms with initial data\", \"test_formset_validation (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A formset's ManagementForm is validated once per FormSet.is_valid()\", \"formset_factory's can_delete argument adds a boolean \\\"delete\\\" field to\", \"deleted_forms works on a valid formset even if a deleted form would\", \"If a form is filled with something and can_delete is also checked, that\", \"FormSets with ordering + deletion.\", \"formset_factory's can_order argument adds an integer field to each\", \"test_formsets_with_ordering_custom_widget (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A formset has a hard limit on the number of forms instantiated.\", \"test_html_safe (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Can increase the built-in forms limit via a higher max_num.\", \"Can get ordered_forms from a valid formset even if a deleted form\", \"test_limited_max_forms_two (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"max_num has no effect when extra is less than max_num.\", \"Limiting the maximum number of forms with max_num.\", \"The management form has the correct prefix.\", \"test_max_num_with_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"If max_num is 0 then no form is rendered at all, regardless of extra,\", \"test_max_num_zero_with_initial (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"More than 1 empty form can also be displayed using formset_factory's\", \"More than 1 empty form can be displayed using min_num.\", \"The extra argument works when the formset is pre-filled with initial\", \"One form from initial and extra=3 with max_num=2 results in the one\", \"More initial forms than max_num results in all initial forms being\", \"test_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"If non_form_errors() is called without calling is_valid() first,\", \"Ordering works with blank fieldsets.\", \"If at least one field is filled out on a blank form, it will be\", \"A partially completed form is invalid.\", \"Just one form may be completed.\", \"test_validate_max_ignores_forms_marked_for_deletion (forms_tests.tests.test_formsets.FormsFormsetTestCase)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.701821",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}