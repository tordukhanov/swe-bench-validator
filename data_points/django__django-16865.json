{
  "repo": "django/django",
  "instance_id": "django__django-16865",
  "base_commit": "99e5dff737cd20b12d060e4794e097063b61ec40",
  "patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -316,9 +316,8 @@ def write_to_last_migration_files(self, changes):\n             )\n             # Update name.\n             previous_migration_path = MigrationWriter(leaf_migration).path\n-            suggested_name = (\n-                leaf_migration.name[:4] + \"_\" + leaf_migration.suggest_name()\n-            )\n+            name_fragment = self.migration_name or leaf_migration.suggest_name()\n+            suggested_name = leaf_migration.name[:4] + f\"_{name_fragment}\"\n             if leaf_migration.name == suggested_name:\n                 new_name = leaf_migration.name + \"_updated\"\n             else:\n",
  "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2655,6 +2655,32 @@ def test_makemigrations_update_existing_name(self):\n                 self.assertNotEqual(initial_content, fp.read())\n             self.assertIn(f\"Deleted {migration_file}\", out.getvalue())\n \n+    def test_makemigrations_update_custom_name(self):\n+        custom_name = \"delete_something\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations\"\n+        ) as migration_dir:\n+            old_migration_file = os.path.join(migration_dir, \"0002_second.py\")\n+            with open(old_migration_file) as fp:\n+                initial_content = fp.read()\n+\n+            with captured_stdout() as out:\n+                call_command(\n+                    \"makemigrations\", \"migrations\", update=True, name=custom_name\n+                )\n+            self.assertFalse(\n+                any(\n+                    filename.startswith(\"0003\")\n+                    for filename in os.listdir(migration_dir)\n+                )\n+            )\n+            self.assertIs(os.path.exists(old_migration_file), False)\n+            new_migration_file = os.path.join(migration_dir, f\"0002_{custom_name}.py\")\n+            self.assertIs(os.path.exists(new_migration_file), True)\n+            with open(new_migration_file) as fp:\n+                self.assertNotEqual(initial_content, fp.read())\n+            self.assertIn(f\"Deleted {old_migration_file}\", out.getvalue())\n+\n     def test_makemigrations_update_applied_migration(self):\n         recorder = MigrationRecorder(connection)\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n",
  "problem_statement": "makemigrations --update should respect the --name option.\nDescription\n\t \n\t\t(last modified by David Sanders)\n\t \nThis may be intentional behaviour but the docs don't mention this so creating a ticket to update docs or correct behaviour:\nIf you create a migration with a custom name:\n$ ./manage.py makemigrations --name foo\nMigrations for 'update_rename':\n update_rename/migrations/0001_foo.py\n\t- Create model Foo\nthen running --update will change the name \"foo\" to the autogenerated one based on the operations:\n$ ./manage.py makemigrations --update\nMigrations for 'update_rename':\n update_rename/migrations/0001_initial.py\n\t- Create model Foo\nDeleted update_rename/migrations/0001_foo.py\nMy opinion is that it shouldn't as it violates the principle of least astonishment even though the --name argument wasn't supplied.\nEDIT:\nThis is my first time using --update and here are a few other observations which could indicate that it requires broader discussion:\nIt doesn't utilise the --name argument so it's impossible to customise the name during --update\nIt'd be nice to provide --no-optimize option to --update, here's my use-case: 3-step non-null field addition. After doing nullable step 1, elidable data migration step 2, I want to merge the step 3 non-null update into the migration but --update optimizes this into a single step.\nPerhaps --update requires a rethink?\n",
  "hints_text": "<moved to description>\nI think you're expecting too much from --update was intended to be an option for updating recently developed changes and don't do anything fancier. Please check the discussion in â€‹PR. My opinion is that it shouldn't as it violates the principle of least astonishment even though the --name argument wasn't supplied. We could document this behavior, but IMO it shouldn't be changed. It'd be nice to provide --no-optimize option to --update, here's my use-case: 3-step non-null field addition. After doing nullable step 1, elidable data migration step 2, I want to merge the step 3 non-null update into the migration but --update optimizes this into a single step. It's probably worth adding ðŸ¤”\n@felix read through that PR, I'm assuming your point about ending up with a name that doesn't match the operations is referring to not being able to tell the difference between a custom name and an auto gen'd name. Here's my response: It's a fair point. Trying to determine custom names is too complex and shouldn't be done. In my anecdotal experience we (myself and colleagues) rarely use the auto gen'd name. An option to --keep-name sounds nice to me with the default to *not keep*. If not, then at the very least supplying --name should raise an exception or honour the name. It definitely shouldn't do *nothing*. My preference is to honour --name ðŸ˜Š Can we get Simon's take as well since he was part of the thread? I still think something should change because it's not even fancyâ€¦ I'd say that turning off optimisations is harder than this (eg how would it preserve data migrations + dependencies like functions etc? ðŸ¤”)\nAlso just now thought of another option: An option to print migrations to stdout --stdout (or whatever) then I can redirect the content to my latest migration and edit as necessary ðŸ˜…\nAfter reading the referenced PR and the comments in this ticket, I agree with David that ignoring --name feels like a bug, and I think it's worth fixing. I believe the fix would be as simple as (plus tests): django/core/management/commands/makemigrations.py a b class Command(BaseCommand): 316316 ) 317317 # Update name. 318318 previous_migration_path = MigrationWriter(leaf_migration).path 319 suggested_name = ( 319 suggested_name = self.migration_name or ( 320320 leaf_migration.name[:4] + \"_\" + leaf_migration.suggest_name() 321321 ) 322322 if leaf_migration.name == suggested_name: Regarding optimization, I would have taken a different approach in the original implementation: do not optimize the updated migration, leave that decision to the caller, they can later call optimizemigration. Is it too late for considering that approach? Lastly, I would not go the route of allowing to keep the current name, the caller can achieve that by passing --name which is already a documented and valid option for the command.\nI also think that --name should not be ignored when --update is used but updating the name of the updated migration to follow the usual operation fragment stitching otherwise seems like a expected default. Whether or not we we should add an option not to perform optimization or disable operation fragment usage for migration name entirely seems like distinct feature requests.\nReplying to Simon Charette: Whether or not we we should add an option not to perform optimization or disable operation fragment usage for migration name entirely seems like distinct feature requests. Yep, though before I create a ticket for that, I might just create a PoC to see whether it helps with the use case I described above.\nI'm happy to treat this as a bug in the new feature. Opt-out optimization is a separate feature request.\nOne more thing: --update is a destructive operation â€“ if you had any customised migration operations or code in your latest migration this will be permanently deleted if you run update *without any warning*. I'd like to suggest that *at least* one of the following happen: --update does a confirmation eg \"<app>/migrations/0009_last_migration.py will be replaced. Proceed? y/N\". Along with this we provide a --no-input. Both of these are consistent with other commands. we document that it destroys your last migration without warning My preference is 1. because, to paraphrase FunkyBob, the purpose of any framework is to manage the risky and the tedious. We should at the very least do 2. if it's decided 1. is a no-go. This also sounds like another ticket.",
  "created_at": "2023-05-17T07:07:46Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_makemigrations_update_custom_name (migrations.test_commands.MakeMigrationsTests.test_makemigrations_update_custom_name)\"]",
  "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests.test_makemigrations_app_name_specified_as_label)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests.test_makemigrations_nonexistent_app_label)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests.test_migrate_app_name_specified_as_label)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests.test_migrate_nonexistent_app_label)\", \"test_optimizemigration_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests.test_optimizemigration_app_name_specified_as_label)\", \"test_optimizemigration_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests.test_optimizemigration_nonexistent_app_label)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests.test_showmigrations_app_name_specified_as_label)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests.test_showmigrations_nonexistent_app_label)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests.test_sqlmigrate_app_name_specified_as_label)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests.test_sqlmigrate_nonexistent_app_label)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests.test_squashmigrations_app_name_specified_as_label)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests.test_squashmigrations_nonexistent_app_label)\", \"test_ambigious_prefix (migrations.test_commands.OptimizeMigrationTests.test_ambigious_prefix)\", \"test_app_without_migrations (migrations.test_commands.OptimizeMigrationTests.test_app_without_migrations)\", \"test_creates_replace_migration_manual_porting (migrations.test_commands.OptimizeMigrationTests.test_creates_replace_migration_manual_porting)\", \"test_fails_squash_migration_manual_porting (migrations.test_commands.OptimizeMigrationTests.test_fails_squash_migration_manual_porting)\", \"test_no_optimization_possible (migrations.test_commands.OptimizeMigrationTests.test_no_optimization_possible)\", \"test_optimization (migrations.test_commands.OptimizeMigrationTests.test_optimization)\", \"test_optimization_no_verbosity (migrations.test_commands.OptimizeMigrationTests.test_optimization_no_verbosity)\", \"test_optimizemigration_check (migrations.test_commands.OptimizeMigrationTests.test_optimizemigration_check)\", \"test_unknown_prefix (migrations.test_commands.OptimizeMigrationTests.test_unknown_prefix)\", \"test_ambiguous_prefix (migrations.test_commands.MigrateTests.test_ambiguous_prefix)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests.test_app_without_migrations)\", \"Tests basic usage of the migrate command.\", \"test_migrate_backward_to_squashed_migration (migrations.test_commands.MigrateTests.test_migrate_backward_to_squashed_migration)\", \"test_migrate_check (migrations.test_commands.MigrateTests.test_migrate_check)\", \"test_migrate_check_migrated_app (migrations.test_commands.MigrateTests.test_migrate_check_migrated_app)\", \"test_migrate_check_plan (migrations.test_commands.MigrateTests.test_migrate_check_plan)\", \"migrate exits if it detects a conflict.\", \"--fake-initial only works if all tables created in the initial\", \"test_migrate_fake_initial_case_insensitive (migrations.test_commands.MigrateTests.test_migrate_fake_initial_case_insensitive)\", \"Split initial migrations can be faked with --fake-initial.\", \"Running migrate with some migrations applied before their dependencies\", \"`Migration.initial = False` skips fake-initial detection.\", \"test_migrate_not_reflected_changes (migrations.test_commands.MigrateTests.test_migrate_not_reflected_changes)\", \"Migrating to a squashed migration specified by name should succeed\", \"Tests migrate --plan output.\", \"With prune=True, references to migration files deleted from the\", \"Running a single squashed migration should record all of the original\", \"Running migrate for a squashed migration should record as run\", \"Running migrate --run-syncdb with an app_label only creates tables for\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests.test_migrate_syncdb_app_with_migrations)\", \"For an app without migrations, editor.execute() is used for executing\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests.test_migrate_with_system_checks)\", \"test_prune_deleted_squashed_migrations_in_replaces (migrations.test_commands.MigrateTests.test_prune_deleted_squashed_migrations_in_replaces)\", \"test_prune_no_app_label (migrations.test_commands.MigrateTests.test_prune_no_app_label)\", \"test_prune_no_migrations_to_prune (migrations.test_commands.MigrateTests.test_prune_no_migrations_to_prune)\", \"Assuming you have 3 apps, `A`, `B`, and `C`, such that:\", \"showmigrations --list  displays migrations and whether or not they're\", \"test_showmigrations_list_squashed (migrations.test_commands.MigrateTests.test_showmigrations_list_squashed)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests.test_showmigrations_no_migrations)\", \"Tests --plan output of showmigrations command\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests.test_showmigrations_plan_app_label_no_migrations)\", \"`showmigrations --plan app_label` output with multiple app_labels.\", \"Tests --plan output of showmigrations command without migrations\", \"`showmigrations --plan app_label` output with a single app_label.\", \"Tests --plan output of showmigrations command with squashed migrations.\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests.test_showmigrations_unmigrated_app)\", \"test_sqlmigrate_ambiguous_prefix_squashed_migrations (migrations.test_commands.MigrateTests.test_sqlmigrate_ambiguous_prefix_squashed_migrations)\", \"sqlmigrate outputs reverse looking SQL.\", \"Transaction wrappers aren't shown for non-atomic migrations.\", \"Transaction wrappers aren't shown for databases that don't support\", \"sqlmigrate outputs forward looking SQL.\", \"test_sqlmigrate_no_operations (migrations.test_commands.MigrateTests.test_sqlmigrate_no_operations)\", \"test_sqlmigrate_noop (migrations.test_commands.MigrateTests.test_sqlmigrate_noop)\", \"test_sqlmigrate_replaced_migration (migrations.test_commands.MigrateTests.test_sqlmigrate_replaced_migration)\", \"test_sqlmigrate_squashed_migration (migrations.test_commands.MigrateTests.test_sqlmigrate_squashed_migration)\", \"test_sqlmigrate_unrepresentable (migrations.test_commands.MigrateTests.test_sqlmigrate_unrepresentable)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests.test_unknown_prefix)\", \"test_squashed_name_exists (migrations.test_commands.SquashMigrationsTests.test_squashed_name_exists)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests.test_squashmigrations_initial_attribute)\", \"squashmigrations doesn't accept a starting migration after the ending migration.\", \"test_squashmigrations_manual_porting (migrations.test_commands.SquashMigrationsTests.test_squashmigrations_manual_porting)\", \"squashmigrations optimizes operations.\", \"squashmigrations squashes migrations.\", \"squashmigrations accepts a starting migration.\", \"squashmigrations --no-optimize doesn't optimize operations.\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests.test_failing_migration)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests.test_files_content)\", \"makemigrations respects --dry-run option when fixing migration\", \"`makemigrations --merge --dry-run` writes the merge migration file to\", \"test_makemigrations_auto_merge_name (migrations.test_commands.MakeMigrationsTests.test_makemigrations_auto_merge_name)\", \"makemigrations prompts the user when adding auto_now_add to an existing\", \"test_makemigrations_auto_now_add_interactive_quit (migrations.test_commands.MakeMigrationsTests.test_makemigrations_auto_now_add_interactive_quit)\", \"makemigrations --check should exit with a non-zero status when\", \"makemigrations exits if it detects a conflict.\", \"The history consistency checks in makemigrations respect\", \"test_makemigrations_continues_number_sequence_after_squash (migrations.test_commands.MakeMigrationsTests.test_makemigrations_continues_number_sequence_after_squash)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests.test_makemigrations_default_merge_name)\", \"makemigrations raises a nice error when migrations are disabled for an\", \"`makemigrations --dry-run` should not ask for defaults.\", \"Allow `makemigrations --dry-run` to output the migrations file to\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests.test_makemigrations_empty_connections)\", \"makemigrations properly constructs an empty migration.\", \"makemigrations exits if no app is specified with 'empty' mode.\", \"test_makemigrations_field_rename_interactive (migrations.test_commands.MakeMigrationsTests.test_makemigrations_field_rename_interactive)\", \"makemigrations properly merges the conflicting migrations with --noinput.\", \"makemigrations should raise InconsistentMigrationHistory exception if\", \"test_makemigrations_inconsistent_history_db_failure (migrations.test_commands.MakeMigrationsTests.test_makemigrations_inconsistent_history_db_failure)\", \"makemigrations enters interactive mode and merges properly.\", \"The user is prompted to merge by default if there are conflicts and\", \"makemigrations messages when adding a NOT NULL field in interactive\", \"makemigrations messages when changing a NULL field to NOT NULL in\", \"makemigrations enters and exits interactive mode properly.\", \"makemigrations prompts the user when adding a unique field with\", \"makemigrations --merge does not output any operations from apps that\", \"makemigrations exits if in merge mode with no conflicts.\", \"makemigrations should print the relative paths to the migrations unless\", \"makemigrations prints the absolute path if os.path.relpath() raises a\", \"makemigrations announces the migration at the default verbosity level.\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests.test_makemigrations_migrations_modules_nonexistent_toplevel_package)\", \"makemigrations creates migrations when specifying a custom location\", \"test_makemigrations_model_rename_interactive (migrations.test_commands.MakeMigrationsTests.test_makemigrations_model_rename_interactive)\", \"makemigrations should detect initial is needed on empty migration\", \"makemigrations exits when there are no changes to an app.\", \"makemigrations exits when there are no changes and no apps are specified.\", \"makemigrations fails to merge migrations with no common ancestor.\", \"Migration directories without an __init__.py file are allowed.\", \"Non-interactive makemigrations fails when a default is missing on a\", \"makemigrations adds and removes a possible field rename in\", \"makemigrations adds and removes a possible model rename in\", \"test_makemigrations_non_interactive_unique_callable_default_addition (migrations.test_commands.MakeMigrationsTests.test_makemigrations_non_interactive_unique_callable_default_addition)\", \"makemigrations should recognize number-only migrations (0001.py).\", \"With scriptable=True, log output is diverted to stderr, and only the\", \"test_makemigrations_scriptable_merge (migrations.test_commands.MakeMigrationsTests.test_makemigrations_scriptable_merge)\", \"makemigrations does not create a merge for an unspecified app even if\", \"makemigrations does not raise a CommandError when an unspecified app\", \"test_makemigrations_update (migrations.test_commands.MakeMigrationsTests.test_makemigrations_update)\", \"test_makemigrations_update_applied_migration (migrations.test_commands.MakeMigrationsTests.test_makemigrations_update_applied_migration)\", \"test_makemigrations_update_dependency_migration (migrations.test_commands.MakeMigrationsTests.test_makemigrations_update_dependency_migration)\", \"test_makemigrations_update_existing_name (migrations.test_commands.MakeMigrationsTests.test_makemigrations_update_existing_name)\", \"test_makemigrations_update_manual_porting (migrations.test_commands.MakeMigrationsTests.test_makemigrations_update_manual_porting)\", \"test_makemigrations_update_no_migration (migrations.test_commands.MakeMigrationsTests.test_makemigrations_update_no_migration)\", \"test_makemigrations_update_squash_migration (migrations.test_commands.MakeMigrationsTests.test_makemigrations_update_squash_migration)\", \"makemigrations --name generate a custom migration name.\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests.test_makemigrations_with_invalid_custom_name)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.773834",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}