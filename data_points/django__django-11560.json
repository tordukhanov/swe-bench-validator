{
  "repo": "django/django",
  "instance_id": "django__django-11560",
  "base_commit": "7a42cfcfdc94c1e7cd653f3140b9eb30492bae4f",
  "patch": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -73,6 +73,14 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize\n             raise ValueError(\n                 \"Cannot extract time component '%s' from DateField '%s'. \" % (copy.lookup_name, field.name)\n             )\n+        if (\n+            isinstance(field, DurationField) and\n+            copy.lookup_name in ('year', 'iso_year', 'month', 'week', 'week_day', 'quarter')\n+        ):\n+            raise ValueError(\n+                \"Cannot extract component '%s' from DurationField '%s'.\"\n+                % (copy.lookup_name, field.name)\n+            )\n         return copy\n \n \n",
  "test_patch": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -273,6 +273,13 @@ def test_extract_duration_without_native_duration_field(self):\n         with self.assertRaisesMessage(ValueError, msg):\n             list(DTModel.objects.annotate(extracted=Extract('duration', 'second')))\n \n+    def test_extract_duration_unsupported_lookups(self):\n+        msg = \"Cannot extract component '%s' from DurationField 'duration'.\"\n+        for lookup in ('year', 'iso_year', 'month', 'week', 'week_day', 'quarter'):\n+            with self.subTest(lookup):\n+                with self.assertRaisesMessage(ValueError, msg % lookup):\n+                    DTModel.objects.annotate(extracted=Extract('duration', lookup))\n+\n     def test_extract_year_func(self):\n         start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n",
  "problem_statement": "Raise ValueError in Extract lookups that don't work properly with DurationField.\nDescription\n\t\nLookups on ExtractYear on a DurationField fails because ExtractYear has an optimisation where it compares the source date with a range of dates.\nclass MyModel(models.Model):\n\tduration = models.DurationField()\nMyModel.objects.annotate(year=ExtractYear('duration')).filter(year__gt=1)\nThe queryset generated looks like\nSELECT * FROM mymodel WHERE duration > '0001-01-01'\nand it fails because interval are not comparable with dates\n",
  "hints_text": "As I mentioned on the PR Extract functions don't explicitly support DurationField; it's not documented nor tested. They happen to work for PostgreSQL because EXTRACT(component FROM ::interval) happens to work but that's just a coincidence. I'm not sure if this ticket should be closed as invalid or repurposed as a feature request to add tested support. We'll have to come with with a way of defining units such as years though, do we want to consider them as 365.25 days?\nSupport for DurationField to Extract was added in #27473, so it is a bug (see ​comment).\n​PR\nDurationField is modeled in Python by ​timedelta (see ​documentation), so even with this fix it will always return 0 for ExtractYear, ExtractMonth, or ExtractWeek which is unexpected. We should raise ValueError in all such cases.",
  "created_at": "2019-07-11T19:15:56Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_extract_duration_unsupported_lookups (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_duration_unsupported_lookups (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_duration_without_native_duration_field (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\"]",
  "PASS_TO_PASS": "[\"test_extract_day_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionTests)\", \"test_extract_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func_explicit_timezone_priority (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_iso_year_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_quarter_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_week_func_boundaries (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_weekday_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_exact_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_greaterthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_extract_year_lessthan_lookup (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_ambiguous_and_invalid_times (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_date_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_day_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_func_with_timezone (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_hour_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_minute_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_month_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_quarter_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_second_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_subquery_with_parameters (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_time_none (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_timezone_applied_before_truncation (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_week_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\", \"test_trunc_year_func (db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.577018",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}