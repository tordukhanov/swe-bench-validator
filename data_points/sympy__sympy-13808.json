{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-13808",
  "base_commit": "4af4487cfd254af747670a2324b6f24ae0a55a66",
  "patch": "diff --git a/sympy/integrals/integrals.py b/sympy/integrals/integrals.py\n--- a/sympy/integrals/integrals.py\n+++ b/sympy/integrals/integrals.py\n@@ -8,7 +8,7 @@\n from sympy.core.expr import Expr\n from sympy.core.function import diff\n from sympy.core.mul import Mul\n-from sympy.core.numbers import oo\n+from sympy.core.numbers import oo, pi\n from sympy.core.relational import Eq, Ne\n from sympy.core.singleton import S\n from sympy.core.symbol import (Dummy, Symbol, Wild)\n@@ -19,9 +19,10 @@\n from sympy.matrices import MatrixBase\n from sympy.utilities.misc import filldedent\n from sympy.polys import Poly, PolynomialError\n-from sympy.functions import Piecewise, sqrt, sign, piecewise_fold\n-from sympy.functions.elementary.complexes import Abs, sign\n+from sympy.functions import Piecewise, sqrt, sign, piecewise_fold, tan, cot, atan\n from sympy.functions.elementary.exponential import log\n+from sympy.functions.elementary.integers import floor\n+from sympy.functions.elementary.complexes import Abs, sign\n from sympy.functions.elementary.miscellaneous import Min, Max\n from sympy.series import limit\n from sympy.series.order import Order\n@@ -532,6 +533,30 @@ def try_meijerg(function, xab):\n                             function = ret\n                             continue\n \n+            if not isinstance(antideriv, Integral) and antideriv is not None:\n+                sym = xab[0]\n+                for atan_term in antideriv.atoms(atan):\n+                    atan_arg = atan_term.args[0]\n+                    # Checking `atan_arg` to be linear combination of `tan` or `cot`\n+                    for tan_part in atan_arg.atoms(tan):\n+                        x1 = Dummy('x1')\n+                        tan_exp1 = atan_arg.subs(tan_part, x1)\n+                        # The coefficient of `tan` should be constant\n+                        coeff = tan_exp1.diff(x1)\n+                        if x1 not in coeff.free_symbols:\n+                            a = tan_part.args[0]\n+                            antideriv = antideriv.subs(atan_term, Add(atan_term,\n+                                sign(coeff)*pi*floor((a-pi/2)/pi)))\n+                    for cot_part in atan_arg.atoms(cot):\n+                        x1 = Dummy('x1')\n+                        cot_exp1 = atan_arg.subs(cot_part, x1)\n+                        # The coefficient of `cot` should be constant\n+                        coeff = cot_exp1.diff(x1)\n+                        if x1 not in coeff.free_symbols:\n+                            a = cot_part.args[0]\n+                            antideriv = antideriv.subs(atan_term, Add(atan_term,\n+                                sign(coeff)*pi*floor((a)/pi)))\n+\n             if antideriv is None:\n                 undone_limits.append(xab)\n                 function = self.func(*([function] + [xab])).factor()\n",
  "test_patch": "diff --git a/sympy/integrals/tests/test_integrals.py b/sympy/integrals/tests/test_integrals.py\n--- a/sympy/integrals/tests/test_integrals.py\n+++ b/sympy/integrals/tests/test_integrals.py\n@@ -8,6 +8,7 @@\n     symbols, sympify, tan, trigsimp, Tuple, Si, Ci\n )\n from sympy.functions.elementary.complexes import periodic_argument\n+from sympy.functions.elementary.integers import floor\n from sympy.integrals.risch import NonElementaryIntegral\n from sympy.physics import units\n from sympy.core.compatibility import range\n@@ -316,6 +317,22 @@ def test_issue_7450():\n     assert re(ans) == S.Half and im(ans) == -S.Half\n \n \n+def test_issue_8623():\n+    assert integrate((1 + cos(2*x)) / (3 - 2*cos(2*x)), (x, 0, pi)) == -pi/2 + sqrt(5)*pi/2\n+    assert integrate((1 + cos(2*x))/(3 - 2*cos(2*x))) == -x/2 + sqrt(5)*(atan(sqrt(5)*tan(x)) + \\\n+        pi*floor((x - pi/2)/pi))/2\n+\n+\n+def test_issue_9569():\n+    assert integrate(1 / (2 - cos(x)), (x, 0, pi)) == pi/sqrt(3)\n+    assert integrate(1/(2 - cos(x))) == 2*sqrt(3)*(atan(sqrt(3)*tan(x/2)) + pi*floor((x/2 - pi/2)/pi))/3\n+\n+\n+def test_issue_13749():\n+    assert integrate(1 / (2 + cos(x)), (x, 0, pi)) == pi/sqrt(3)\n+    assert integrate(1/(2 + cos(x))) == 2*sqrt(3)*(atan(sqrt(3)*tan(x/2)/3) + pi*floor((x/2 - pi/2)/pi))/3\n+\n+\n def test_matrices():\n     M = Matrix(2, 2, lambda i, j: (i + j + 1)*sin((i + j + 1)*x))\n \n@@ -1161,7 +1178,7 @@ def test_issue_4803():\n \n \n def test_issue_4234():\n-    assert integrate(1/sqrt(1 + tan(x)**2)) == tan(x) / sqrt(1 + tan(x)**2)\n+    assert integrate(1/sqrt(1 + tan(x)**2)) == tan(x)/sqrt(1 + tan(x)**2)\n \n \n def test_issue_4492():\n",
  "problem_statement": "integrate(1/(2-cos(theta)),(theta,0,pi))\nSympy produces NaN.\n\nActually for integrate(1/(a-cos(theta)),(theta,0,pi)) for a > 1 should be pi/sqrt((a-1)*(a+1)). So, the right answer should be pi/sqrt(3).\n\nHowever sympy seems to use the subtitution like t = tan(x/2) which is infinite when x = pi. When I try integrate(1/(2-cos(theta)),theta) , I get \"sqrt(3)_I_(-log(tan(x/2) - sqrt(3)_I/3) + log(tan(x/2) + sqrt(3)_I/3))/3\". Simplify() or trigsimp() doesn't work. And I don't understand why imaginary number appears.\n\nhttp://www.sympygamma.com/input/?i=integrate%281%2F%282-cos%28x%29%29%2Cx%29\nhttp://www.wolframalpha.com/input/?i=integrate+1%2F%282-cos%28x%29%29+for+x+from+0+to+pi+\n\n",
  "hints_text": "",
  "created_at": "2017-12-29T17:24:26Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_issue_8623\", \"test_issue_9569\", \"test_issue_13749\"]",
  "PASS_TO_PASS": "[\"test_improper_integral\", \"test_constructor\", \"test_basics\", \"test_diff_wrt\", \"test_basics_multiple\", \"test_conjugate_transpose\", \"test_integration\", \"test_multiple_integration\", \"test_issue_3532\", \"test_issue_3560\", \"test_integrate_poly\", \"test_integrate_poly_defined\", \"test_integrate_omit_var\", \"test_integrate_poly_accurately\", \"test_issue_3635\", \"test_integrate_linearterm_pow\", \"test_issue_3618\", \"test_issue_3623\", \"test_issue_3664\", \"test_issue_3679\", \"test_integrate_units\", \"test_transcendental_functions\", \"test_issue_3740\", \"test_issue_3788\", \"test_issue_3952\", \"test_issue_4516\", \"test_matrices\", \"test_integrate_functions\", \"test_integrate_derivatives\", \"test_transform\", \"test_issue_4052\", \"test_evalf_issue_939\", \"test_double_integrals\", \"test_integrate_SingularityFunction\", \"test_integrate_DiracDelta\", \"test_integrate_returns_piecewise\", \"test_integrate_Abs_sign\", \"test_subs1\", \"test_subs2\", \"test_subs3\", \"test_subs4\", \"test_subs5\", \"test_subs6\", \"test_subs7\", \"test_expand\", \"test_integration_variable\", \"test_expand_integral\", \"test_as_sum_midpoint1\", \"test_as_sum_midpoint2\", \"test_as_sum_left\", \"test_as_sum_right\", \"test_as_sum_trapezoid\", \"test_as_sum_raises\", \"test_nested_doit\", \"test_issue_4665\", \"test_integral_reconstruct\", \"test_doit_integrals\", \"test_is_number\", \"test_symbols\", \"test_is_zero\", \"test_series\", \"test_issue_4403_2\", \"test_issue_4100\", \"test_issue_5167\", \"test_issue_4890\", \"test_issue_4376\", \"test_issue_4517\", \"test_issue_4527\", \"test_issue_5413\", \"test_issue_4892a\", \"test_issue_4892b\", \"test_issue_5178\", \"test_integrate_series\", \"test_atom_bug\", \"test_issue_4703\", \"test_issue_1888\", \"test_issue_4737\", \"test_issue_4215\", \"test_issue_4400\", \"test_issue_4153\", \"test_powers\", \"test_risch_option\", \"test_issue_6828\", \"test_issue_4803\", \"test_issue_4234\", \"test_issue_2708\", \"test_issue_8901\", \"test_issue_10567\", \"test_issue_4950\", \"test_issue_4968\", \"test_singularities\", \"test_issue_12645\", \"test_issue_14064\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.088075",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}