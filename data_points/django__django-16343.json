{
  "repo": "django/django",
  "instance_id": "django__django-16343",
  "base_commit": "3fec3bf90bef36b26efe5e47a92bf5a8041a207b",
  "patch": "diff --git a/django/core/signing.py b/django/core/signing.py\n--- a/django/core/signing.py\n+++ b/django/core/signing.py\n@@ -37,10 +37,12 @@\n import datetime\n import json\n import time\n+import warnings\n import zlib\n \n from django.conf import settings\n from django.utils.crypto import constant_time_compare, salted_hmac\n+from django.utils.deprecation import RemovedInDjango51Warning\n from django.utils.encoding import force_bytes\n from django.utils.module_loading import import_string\n from django.utils.regex_helper import _lazy_re_compile\n@@ -147,7 +149,7 @@ def dumps(\n \n     The serializer is expected to return a bytestring.\n     \"\"\"\n-    return TimestampSigner(key, salt=salt).sign_object(\n+    return TimestampSigner(key=key, salt=salt).sign_object(\n         obj, serializer=serializer, compress=compress\n     )\n \n@@ -165,7 +167,9 @@ def loads(\n \n     The serializer is expected to accept a bytestring.\n     \"\"\"\n-    return TimestampSigner(key, salt=salt, fallback_keys=fallback_keys).unsign_object(\n+    return TimestampSigner(\n+        key=key, salt=salt, fallback_keys=fallback_keys\n+    ).unsign_object(\n         s,\n         serializer=serializer,\n         max_age=max_age,\n@@ -173,8 +177,13 @@ def loads(\n \n \n class Signer:\n+    # RemovedInDjango51Warning: When the deprecation ends, replace with:\n+    # def __init__(\n+    #   self, *, key=None, sep=\":\", salt=None, algorithm=None, fallback_keys=None\n+    # ):\n     def __init__(\n         self,\n+        *args,\n         key=None,\n         sep=\":\",\n         salt=None,\n@@ -188,16 +197,29 @@ def __init__(\n             else settings.SECRET_KEY_FALLBACKS\n         )\n         self.sep = sep\n-        if _SEP_UNSAFE.match(self.sep):\n-            raise ValueError(\n-                \"Unsafe Signer separator: %r (cannot be empty or consist of \"\n-                \"only A-z0-9-_=)\" % sep,\n-            )\n         self.salt = salt or \"%s.%s\" % (\n             self.__class__.__module__,\n             self.__class__.__name__,\n         )\n         self.algorithm = algorithm or \"sha256\"\n+        # RemovedInDjango51Warning.\n+        if args:\n+            warnings.warn(\n+                f\"Passing positional arguments to {self.__class__.__name__} is \"\n+                f\"deprecated.\",\n+                RemovedInDjango51Warning,\n+                stacklevel=2,\n+            )\n+            for arg, attr in zip(\n+                args, [\"key\", \"sep\", \"salt\", \"algorithm\", \"fallback_keys\"]\n+            ):\n+                if arg or attr == \"sep\":\n+                    setattr(self, attr, arg)\n+        if _SEP_UNSAFE.match(self.sep):\n+            raise ValueError(\n+                \"Unsafe Signer separator: %r (cannot be empty or consist of \"\n+                \"only A-z0-9-_=)\" % sep,\n+            )\n \n     def signature(self, value, key=None):\n         key = key or self.key\n",
  "test_patch": "diff --git a/tests/signing/tests.py b/tests/signing/tests.py\n--- a/tests/signing/tests.py\n+++ b/tests/signing/tests.py\n@@ -2,15 +2,16 @@\n \n from django.core import signing\n from django.test import SimpleTestCase, override_settings\n-from django.test.utils import freeze_time\n+from django.test.utils import freeze_time, ignore_warnings\n from django.utils.crypto import InvalidAlgorithm\n+from django.utils.deprecation import RemovedInDjango51Warning\n \n \n class TestSigner(SimpleTestCase):\n     def test_signature(self):\n         \"signature() method should generate a signature\"\n-        signer = signing.Signer(\"predictable-secret\")\n-        signer2 = signing.Signer(\"predictable-secret2\")\n+        signer = signing.Signer(key=\"predictable-secret\")\n+        signer2 = signing.Signer(key=\"predictable-secret2\")\n         for s in (\n             b\"hello\",\n             b\"3098247:529:087:\",\n@@ -28,8 +29,7 @@ def test_signature(self):\n             self.assertNotEqual(signer.signature(s), signer2.signature(s))\n \n     def test_signature_with_salt(self):\n-        \"signature(value, salt=...) should work\"\n-        signer = signing.Signer(\"predictable-secret\", salt=\"extra-salt\")\n+        signer = signing.Signer(key=\"predictable-secret\", salt=\"extra-salt\")\n         self.assertEqual(\n             signer.signature(\"hello\"),\n             signing.base64_hmac(\n@@ -40,12 +40,12 @@ def test_signature_with_salt(self):\n             ),\n         )\n         self.assertNotEqual(\n-            signing.Signer(\"predictable-secret\", salt=\"one\").signature(\"hello\"),\n-            signing.Signer(\"predictable-secret\", salt=\"two\").signature(\"hello\"),\n+            signing.Signer(key=\"predictable-secret\", salt=\"one\").signature(\"hello\"),\n+            signing.Signer(key=\"predictable-secret\", salt=\"two\").signature(\"hello\"),\n         )\n \n     def test_custom_algorithm(self):\n-        signer = signing.Signer(\"predictable-secret\", algorithm=\"sha512\")\n+        signer = signing.Signer(key=\"predictable-secret\", algorithm=\"sha512\")\n         self.assertEqual(\n             signer.signature(\"hello\"),\n             \"Usf3uVQOZ9m6uPfVonKR-EBXjPe7bjMbp3_Fq8MfsptgkkM1ojidN0BxYaT5HAEN1\"\n@@ -53,14 +53,14 @@ def test_custom_algorithm(self):\n         )\n \n     def test_invalid_algorithm(self):\n-        signer = signing.Signer(\"predictable-secret\", algorithm=\"whatever\")\n+        signer = signing.Signer(key=\"predictable-secret\", algorithm=\"whatever\")\n         msg = \"'whatever' is not an algorithm accepted by the hashlib module.\"\n         with self.assertRaisesMessage(InvalidAlgorithm, msg):\n             signer.sign(\"hello\")\n \n     def test_sign_unsign(self):\n         \"sign/unsign should be reversible\"\n-        signer = signing.Signer(\"predictable-secret\")\n+        signer = signing.Signer(key=\"predictable-secret\")\n         examples = [\n             \"q;wjmbk;wkmb\",\n             \"3098247529087\",\n@@ -75,7 +75,7 @@ def test_sign_unsign(self):\n             self.assertEqual(example, signer.unsign(signed))\n \n     def test_sign_unsign_non_string(self):\n-        signer = signing.Signer(\"predictable-secret\")\n+        signer = signing.Signer(key=\"predictable-secret\")\n         values = [\n             123,\n             1.23,\n@@ -91,7 +91,7 @@ def test_sign_unsign_non_string(self):\n \n     def test_unsign_detects_tampering(self):\n         \"unsign should raise an exception if the value has been tampered with\"\n-        signer = signing.Signer(\"predictable-secret\")\n+        signer = signing.Signer(key=\"predictable-secret\")\n         value = \"Another string\"\n         signed_value = signer.sign(value)\n         transforms = (\n@@ -106,7 +106,7 @@ def test_unsign_detects_tampering(self):\n                 signer.unsign(transform(signed_value))\n \n     def test_sign_unsign_object(self):\n-        signer = signing.Signer(\"predictable-secret\")\n+        signer = signing.Signer(key=\"predictable-secret\")\n         tests = [\n             [\"a\", \"list\"],\n             \"a string \\u2019\",\n@@ -155,7 +155,7 @@ def test_decode_detects_tampering(self):\n     def test_works_with_non_ascii_keys(self):\n         binary_key = b\"\\xe7\"  # Set some binary (non-ASCII key)\n \n-        s = signing.Signer(binary_key)\n+        s = signing.Signer(key=binary_key)\n         self.assertEqual(\n             \"foo:EE4qGC5MEKyQG5msxYA0sBohAxLC0BJf8uRhemh0BGU\",\n             s.sign(\"foo\"),\n@@ -164,7 +164,7 @@ def test_works_with_non_ascii_keys(self):\n     def test_valid_sep(self):\n         separators = [\"/\", \"*sep*\", \",\"]\n         for sep in separators:\n-            signer = signing.Signer(\"predictable-secret\", sep=sep)\n+            signer = signing.Signer(key=\"predictable-secret\", sep=sep)\n             self.assertEqual(\n                 \"foo%sjZQoX_FtSO70jX9HLRGg2A_2s4kdDBxz1QoO_OpEQb0\" % sep,\n                 signer.sign(\"foo\"),\n@@ -181,16 +181,16 @@ def test_invalid_sep(self):\n                 signing.Signer(sep=sep)\n \n     def test_verify_with_non_default_key(self):\n-        old_signer = signing.Signer(\"secret\")\n+        old_signer = signing.Signer(key=\"secret\")\n         new_signer = signing.Signer(\n-            \"newsecret\", fallback_keys=[\"othersecret\", \"secret\"]\n+            key=\"newsecret\", fallback_keys=[\"othersecret\", \"secret\"]\n         )\n         signed = old_signer.sign(\"abc\")\n         self.assertEqual(new_signer.unsign(signed), \"abc\")\n \n     def test_sign_unsign_multiple_keys(self):\n         \"\"\"The default key is a valid verification key.\"\"\"\n-        signer = signing.Signer(\"secret\", fallback_keys=[\"oldsecret\"])\n+        signer = signing.Signer(key=\"secret\", fallback_keys=[\"oldsecret\"])\n         signed = signer.sign(\"abc\")\n         self.assertEqual(signer.unsign(signed), \"abc\")\n \n@@ -199,7 +199,7 @@ def test_sign_unsign_multiple_keys(self):\n         SECRET_KEY_FALLBACKS=[\"oldsecret\"],\n     )\n     def test_sign_unsign_ignore_secret_key_fallbacks(self):\n-        old_signer = signing.Signer(\"oldsecret\")\n+        old_signer = signing.Signer(key=\"oldsecret\")\n         signed = old_signer.sign(\"abc\")\n         signer = signing.Signer(fallback_keys=[])\n         with self.assertRaises(signing.BadSignature):\n@@ -210,7 +210,7 @@ def test_sign_unsign_ignore_secret_key_fallbacks(self):\n         SECRET_KEY_FALLBACKS=[\"oldsecret\"],\n     )\n     def test_default_keys_verification(self):\n-        old_signer = signing.Signer(\"oldsecret\")\n+        old_signer = signing.Signer(key=\"oldsecret\")\n         signed = old_signer.sign(\"abc\")\n         signer = signing.Signer()\n         self.assertEqual(signer.unsign(signed), \"abc\")\n@@ -220,9 +220,9 @@ class TestTimestampSigner(SimpleTestCase):\n     def test_timestamp_signer(self):\n         value = \"hello\"\n         with freeze_time(123456789):\n-            signer = signing.TimestampSigner(\"predictable-key\")\n+            signer = signing.TimestampSigner(key=\"predictable-key\")\n             ts = signer.sign(value)\n-            self.assertNotEqual(ts, signing.Signer(\"predictable-key\").sign(value))\n+            self.assertNotEqual(ts, signing.Signer(key=\"predictable-key\").sign(value))\n             self.assertEqual(signer.unsign(ts), value)\n \n         with freeze_time(123456800):\n@@ -240,3 +240,23 @@ def test_base62(self):\n         tests = [-(10**10), 10**10, 1620378259, *range(-100, 100)]\n         for i in tests:\n             self.assertEqual(i, signing.b62_decode(signing.b62_encode(i)))\n+\n+\n+class SignerPositionalArgumentsDeprecationTests(SimpleTestCase):\n+    def test_deprecation(self):\n+        msg = \"Passing positional arguments to Signer is deprecated.\"\n+        with self.assertRaisesMessage(RemovedInDjango51Warning, msg):\n+            signing.Signer(\"predictable-secret\")\n+        msg = \"Passing positional arguments to TimestampSigner is deprecated.\"\n+        with self.assertRaisesMessage(RemovedInDjango51Warning, msg):\n+            signing.TimestampSigner(\"predictable-secret\")\n+\n+    @ignore_warnings(category=RemovedInDjango51Warning)\n+    def test_positional_arguments(self):\n+        signer = signing.Signer(\"secret\", \"/\", \"somesalt\", \"sha1\", [\"oldsecret\"])\n+        signed = signer.sign(\"xyz\")\n+        self.assertEqual(signed, \"xyz/zzdO_8rk-NGnm8jNasXRTF2P5kY\")\n+        self.assertEqual(signer.unsign(signed), \"xyz\")\n+        old_signer = signing.Signer(\"oldsecret\", \"/\", \"somesalt\", \"sha1\")\n+        signed = old_signer.sign(\"xyz\")\n+        self.assertEqual(signer.unsign(signed), \"xyz\")\n",
  "problem_statement": "Deprecate passing positional arguments to Signer.\nDescription\n\t\nWe discovered a vulnerability in one of our applications recently which was caused by an inaccurate instantiation of django.core.signing.Signer. The developer intended to use the user's email address as the salt for the Signing instance but instead caused it to be used as the key. Here's an example code block that demonstrates the problem:\nsigner = Signer(self.context['request'].user.email)\nsigned_data = signer.sign_object(dict(\n\tlicense_number='...',\n\tproduct_id='...',\n\tdevice_count='...'\n))\nIn our case, this signed data was then being used to verify a later request and generate an active license. This meant that an attacker could feasibly generate their own licenses if they realised that their email address was the key. The fix for this was to add salt= in front of the email variable. It occurred to us that this is a relatively easy mistake to make and could be avoided if the signature of Signer.__init__ was changed thusly:\n- def __init__(self, key=None, sep=':', salt=None, algorithm=None):\n+ def __init__(self, *, key=None, sep=':', salt=None, algorithm=None):\nThat is, adding a * after self to force the developer to name the parameters.\n",
  "hints_text": "Agreed. This is a backward incompatible change so release notes and a versionchanged annotation is necessary, we also need to audit all ​documented uses.\nDaniel, would you like to prepare a patch?\nI've opened a PR to address this ticket: ​https://github.com/django/django/pull/14995\nHi! It looks like Daniel ​does not have time to handle this ticket so i would like to have a try. I spent a little time thinking about the best way to do this and I see a few options: Write a decorator that makes the function accept positional arguments, sends a warning and rewrites the call to using kwargs only (​Proof of concept) Add *args to the signature and use a trick with locals() to inject those into the local variables (​Proof of concept, thanks to ​t00n for the idea and code) Change the signature to __init__(self, *args, **kwargs) 1 and 2 have the advantage of not changing the signature and body of the function too much so it will be easy to remove when the depreciation period ends but are using maybe too much of dark magic. 3 is the opposite. What do you think would be best in Django's case ? When i know what approach to take, i'd be happy to update ​Daniel's PR.\nI think prepending *args before the existing arguments is good, but if you can avoid tinkering with locals(), the better, I think. What about something like: diff --git a/django/core/signing.py b/django/core/signing.py index 5ee19a9336..724a7df507 100644 --- a/django/core/signing.py +++ b/django/core/signing.py @@ -37,10 +37,12 @@ import base64 import datetime import json import time +import warnings import zlib from django.conf import settings from django.utils.crypto import constant_time_compare, salted_hmac +from django.utils.deprecation import RemovedInDjango50Warning from django.utils.encoding import force_bytes from django.utils.module_loading import import_string from django.utils.regex_helper import _lazy_re_compile @@ -145,16 +147,25 @@ def loads(s, key=None, salt='django.core.signing', serializer=JSONSerializer, ma class Signer: - def __init__(self, key=None, sep=':', salt=None, algorithm=None): + def __init__(self, *args, key=None, sep=':', salt=None, algorithm=None): self.key = key or settings.SECRET_KEY self.sep = sep + self.salt = salt or '%s.%s' % (self.__class__.__module__, self.__class__.__name__) + self.algorithm = algorithm or 'sha256' + if args: + warnings.warn( + 'Providing positional arguments to Signer is deprecated.', + RemovedInDjango50Warning, + stacklevel=2, + ) + for arg, attr in zip(args, ['key', 'sep', 'salt', 'algorithm']): + if arg or attr == 'sep': + setattr(self, attr, arg) if _SEP_UNSAFE.match(self.sep): raise ValueError( 'Unsafe Signer separator: %r (cannot be empty or consist of ' 'only A-z0-9-_=)' % sep, ) - self.salt = salt or '%s.%s' % (self.__class__.__module__, self.__class__.__name__) - self.algorithm = algorithm or 'sha256'",
  "created_at": "2022-11-30T15:33:24Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_deprecation (signing.tests.SignerPositionalArgumentsDeprecationTests)\"]",
  "PASS_TO_PASS": "[\"test_positional_arguments (signing.tests.SignerPositionalArgumentsDeprecationTests)\", \"test_base62 (signing.tests.TestBase62)\", \"test_timestamp_signer (signing.tests.TestTimestampSigner)\", \"test_custom_algorithm (signing.tests.TestSigner)\", \"loads should raise exception for tampered objects\", \"test_default_keys_verification (signing.tests.TestSigner)\", \"dumps and loads be reversible for any JSON serializable object\", \"test_invalid_algorithm (signing.tests.TestSigner)\", \"should warn on invalid separator\", \"sign/unsign should be reversible\", \"test_sign_unsign_ignore_secret_key_fallbacks (signing.tests.TestSigner)\", \"The default key is a valid verification key.\", \"test_sign_unsign_non_string (signing.tests.TestSigner)\", \"test_sign_unsign_object (signing.tests.TestSigner)\", \"signature() method should generate a signature\", \"test_signature_with_salt (signing.tests.TestSigner)\", \"unsign should raise an exception if the value has been tampered with\", \"test_valid_sep (signing.tests.TestSigner)\", \"test_verify_with_non_default_key (signing.tests.TestSigner)\", \"test_works_with_non_ascii_keys (signing.tests.TestSigner)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.754025",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}