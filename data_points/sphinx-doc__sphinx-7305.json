{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-7305",
  "base_commit": "f85b870ad59f39c8637160a4cd4d865ce1e1628e",
  "patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -9,7 +9,7 @@\n \"\"\"\n \n import sys\n-from typing import List\n+from typing import Dict, List, Type\n \n if sys.version_info > (3, 8):\n     import ast\n@@ -21,6 +21,29 @@\n         import ast  # type: ignore\n \n \n+OPERATORS = {\n+    ast.Add: \"+\",\n+    ast.And: \"and\",\n+    ast.BitAnd: \"&\",\n+    ast.BitOr: \"|\",\n+    ast.BitXor: \"^\",\n+    ast.Div: \"/\",\n+    ast.FloorDiv: \"//\",\n+    ast.Invert: \"~\",\n+    ast.LShift: \"<<\",\n+    ast.MatMult: \"@\",\n+    ast.Mult: \"*\",\n+    ast.Mod: \"%\",\n+    ast.Not: \"not\",\n+    ast.Pow: \"**\",\n+    ast.Or: \"or\",\n+    ast.RShift: \">>\",\n+    ast.Sub: \"-\",\n+    ast.UAdd: \"+\",\n+    ast.USub: \"-\",\n+}  # type: Dict[Type[ast.AST], str]\n+\n+\n def parse(code: str, mode: str = 'exec') -> \"ast.AST\":\n     \"\"\"Parse the *code* using built-in ast or typed_ast.\n \n@@ -41,6 +64,8 @@ def unparse(node: ast.AST) -> str:\n         return None\n     elif isinstance(node, str):\n         return node\n+    elif node.__class__ in OPERATORS:\n+        return OPERATORS[node.__class__]\n     elif isinstance(node, ast.arg):\n         if node.annotation:\n             return \"%s: %s\" % (node.arg, unparse(node.annotation))\n@@ -50,6 +75,11 @@ def unparse(node: ast.AST) -> str:\n         return unparse_arguments(node)\n     elif isinstance(node, ast.Attribute):\n         return \"%s.%s\" % (unparse(node.value), node.attr)\n+    elif isinstance(node, ast.BinOp):\n+        return \" \".join(unparse(e) for e in [node.left, node.op, node.right])\n+    elif isinstance(node, ast.BoolOp):\n+        op = \" %s \" % unparse(node.op)\n+        return op.join(unparse(e) for e in node.values)\n     elif isinstance(node, ast.Bytes):\n         return repr(node.s)\n     elif isinstance(node, ast.Call):\n@@ -81,6 +111,8 @@ def unparse(node: ast.AST) -> str:\n         return repr(node.s)\n     elif isinstance(node, ast.Subscript):\n         return \"%s[%s]\" % (unparse(node.value), unparse(node.slice))\n+    elif isinstance(node, ast.UnaryOp):\n+        return \"%s %s\" % (unparse(node.op), unparse(node.operand))\n     elif isinstance(node, ast.Tuple):\n         return \", \".join(unparse(e) for e in node.elts)\n     elif sys.version_info > (3, 6) and isinstance(node, ast.Constant):\n",
  "test_patch": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -16,21 +16,43 @@\n \n \n @pytest.mark.parametrize('source,expected', [\n+    (\"a + b\", \"a + b\"),                         # Add\n+    (\"a and b\", \"a and b\"),                     # And\n     (\"os.path\", \"os.path\"),                     # Attribute\n+    (\"1 * 2\", \"1 * 2\"),                         # BinOp\n+    (\"a & b\", \"a & b\"),                         # BitAnd\n+    (\"a | b\", \"a | b\"),                         # BitOr\n+    (\"a ^ b\", \"a ^ b\"),                         # BitXor\n+    (\"a and b and c\", \"a and b and c\"),         # BoolOp\n     (\"b'bytes'\", \"b'bytes'\"),                   # Bytes\n     (\"object()\", \"object()\"),                   # Call\n     (\"1234\", \"1234\"),                           # Constant\n     (\"{'key1': 'value1', 'key2': 'value2'}\",\n      \"{'key1': 'value1', 'key2': 'value2'}\"),   # Dict\n+    (\"a / b\", \"a / b\"),                         # Div\n     (\"...\", \"...\"),                             # Ellipsis\n+    (\"a // b\", \"a // b\"),                       # FloorDiv\n     (\"Tuple[int, int]\", \"Tuple[int, int]\"),     # Index, Subscript\n+    (\"~ 1\", \"~ 1\"),                             # Invert\n     (\"lambda x, y: x + y\",\n      \"lambda x, y: ...\"),                       # Lambda\n     (\"[1, 2, 3]\", \"[1, 2, 3]\"),                 # List\n+    (\"a << b\", \"a << b\"),                       # LShift\n+    (\"a @ b\", \"a @ b\"),                         # MatMult\n+    (\"a % b\", \"a % b\"),                         # Mod\n+    (\"a * b\", \"a * b\"),                         # Mult\n     (\"sys\", \"sys\"),                             # Name, NameConstant\n     (\"1234\", \"1234\"),                           # Num\n+    (\"not a\", \"not a\"),                         # Not\n+    (\"a or b\", \"a or b\"),                       # Or\n+    (\"a ** b\", \"a ** b\"),                       # Pow\n+    (\"a >> b\", \"a >> b\"),                       # RShift\n     (\"{1, 2, 3}\", \"{1, 2, 3}\"),                 # Set\n+    (\"a - b\", \"a - b\"),                         # Sub\n     (\"'str'\", \"'str'\"),                         # Str\n+    (\"+ a\", \"+ a\"),                             # UAdd\n+    (\"- 1\", \"- 1\"),                             # UnaryOp\n+    (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"1, 2, 3\"),                   # Tuple\n ])\n def test_unparse(source, expected):\n",
  "problem_statement": "\"Could not parse arglist\" with operator pow\n**Describe the bug**\r\nWith the rst\r\n```rst\r\n.. py:method:: f(*, a=2**4)\r\n.. py:method:: g(a=2**4)\r\n```\r\nI get the errors\r\n```\r\nWARNING: could not parse arglist ('*, a=2**4'): Unable to parse BinOp object\r\nWARNING: could not parse arglist ('a=2**4'): Unable to parse BinOp object\r\n```\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n\r\n**Environment info**\r\n- OS: Ubuntu 18.04\r\n- Python version: 3.6.9\r\n- Sphinx version: branches 3.x and master, but not 2.x\r\n- Sphinx extensions:  none\r\n- Extra tools: none\r\n\n",
  "hints_text": "Thank you for reporting. At present, the parser for python signature does not support expression syntax. I'll try to support them from now on.",
  "created_at": "2020-03-14T04:52:36Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"tests/test_pycode_ast.py::test_unparse[a\", \"tests/test_pycode_ast.py::test_unparse[1\", \"tests/test_pycode_ast.py::test_unparse[~\", \"tests/test_pycode_ast.py::test_unparse[not\", \"tests/test_pycode_ast.py::test_unparse[+\", \"tests/test_pycode_ast.py::test_unparse[-\"]",
  "PASS_TO_PASS": "[\"tests/test_pycode_ast.py::test_unparse[os.path-os.path]\", \"tests/test_pycode_ast.py::test_unparse[b'bytes'-b'bytes']\", \"tests/test_pycode_ast.py::test_unparse[object()-object()]\", \"tests/test_pycode_ast.py::test_unparse[1234-1234_0]\", \"tests/test_pycode_ast.py::test_unparse[{'key1':\", \"tests/test_pycode_ast.py::test_unparse[...-...]\", \"tests/test_pycode_ast.py::test_unparse[Tuple[int,\", \"tests/test_pycode_ast.py::test_unparse[lambda\", \"tests/test_pycode_ast.py::test_unparse[[1,\", \"tests/test_pycode_ast.py::test_unparse[sys-sys]\", \"tests/test_pycode_ast.py::test_unparse[1234-1234_1]\", \"tests/test_pycode_ast.py::test_unparse[{1,\", \"tests/test_pycode_ast.py::test_unparse['str'-'str']\", \"tests/test_pycode_ast.py::test_unparse[(1,\", \"tests/test_pycode_ast.py::test_unparse_None\", \"tests/test_pycode_ast.py::test_unparse_py38\"]",
  "environment_setup_commit": "50d2d289e150cb429de15770bdd48a723de8c45d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.039062",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}