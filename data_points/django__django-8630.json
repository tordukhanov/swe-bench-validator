{
  "repo": "django/django",
  "instance_id": "django__django-8630",
  "base_commit": "59841170ba1785ada10a2915b0b60efdb046ee39",
  "patch": "diff --git a/django/contrib/auth/views.py b/django/contrib/auth/views.py\n--- a/django/contrib/auth/views.py\n+++ b/django/contrib/auth/views.py\n@@ -43,6 +43,7 @@ class LoginView(SuccessURLAllowedHostsMixin, FormView):\n     \"\"\"\n     form_class = AuthenticationForm\n     authentication_form = None\n+    next_page = None\n     redirect_field_name = REDIRECT_FIELD_NAME\n     template_name = 'registration/login.html'\n     redirect_authenticated_user = False\n@@ -63,8 +64,7 @@ def dispatch(self, request, *args, **kwargs):\n         return super().dispatch(request, *args, **kwargs)\n \n     def get_success_url(self):\n-        url = self.get_redirect_url()\n-        return url or resolve_url(settings.LOGIN_REDIRECT_URL)\n+        return self.get_redirect_url() or self.get_default_redirect_url()\n \n     def get_redirect_url(self):\n         \"\"\"Return the user-originating redirect URL if it's safe.\"\"\"\n@@ -79,6 +79,10 @@ def get_redirect_url(self):\n         )\n         return redirect_to if url_is_safe else ''\n \n+    def get_default_redirect_url(self):\n+        \"\"\"Return the default redirect URL.\"\"\"\n+        return resolve_url(self.next_page or settings.LOGIN_REDIRECT_URL)\n+\n     def get_form_class(self):\n         return self.authentication_form or self.form_class\n \n",
  "test_patch": "diff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py\n--- a/tests/auth_tests/test_views.py\n+++ b/tests/auth_tests/test_views.py\n@@ -52,8 +52,8 @@ def setUpTestData(cls):\n         cls.u1 = User.objects.create_user(username='testclient', password='password', email='testclient@example.com')\n         cls.u3 = User.objects.create_user(username='staff', password='password', email='staffmember@example.com')\n \n-    def login(self, username='testclient', password='password'):\n-        response = self.client.post('/login/', {\n+    def login(self, username='testclient', password='password', url='/login/'):\n+        response = self.client.post(url, {\n             'username': username,\n             'password': password,\n         })\n@@ -726,6 +726,31 @@ def test_login_session_without_hash_session_key(self):\n         self.login()\n         self.assertNotEqual(original_session_key, self.client.session.session_key)\n \n+    def test_login_get_default_redirect_url(self):\n+        response = self.login(url='/login/get_default_redirect_url/')\n+        self.assertRedirects(response, '/custom/', fetch_redirect_response=False)\n+\n+    def test_login_next_page(self):\n+        response = self.login(url='/login/next_page/')\n+        self.assertRedirects(response, '/somewhere/', fetch_redirect_response=False)\n+\n+    def test_login_named_next_page_named(self):\n+        response = self.login(url='/login/next_page/named/')\n+        self.assertRedirects(response, '/password_reset/', fetch_redirect_response=False)\n+\n+    @override_settings(LOGIN_REDIRECT_URL='/custom/')\n+    def test_login_next_page_overrides_login_redirect_url_setting(self):\n+        response = self.login(url='/login/next_page/')\n+        self.assertRedirects(response, '/somewhere/', fetch_redirect_response=False)\n+\n+    def test_login_redirect_url_overrides_next_page(self):\n+        response = self.login(url='/login/next_page/?next=/test/')\n+        self.assertRedirects(response, '/test/', fetch_redirect_response=False)\n+\n+    def test_login_redirect_url_overrides_get_default_redirect_url(self):\n+        response = self.login(url='/login/get_default_redirect_url/?next=/test/')\n+        self.assertRedirects(response, '/test/', fetch_redirect_response=False)\n+\n \n class LoginURLSettings(AuthViewsTestCase):\n     \"\"\"Tests for settings.LOGIN_URL.\"\"\"\ndiff --git a/tests/auth_tests/urls.py b/tests/auth_tests/urls.py\n--- a/tests/auth_tests/urls.py\n+++ b/tests/auth_tests/urls.py\n@@ -3,6 +3,7 @@\n from django.contrib.auth.decorators import login_required, permission_required\n from django.contrib.auth.forms import AuthenticationForm\n from django.contrib.auth.urls import urlpatterns as auth_urlpatterns\n+from django.contrib.auth.views import LoginView\n from django.contrib.messages.api import info\n from django.http import HttpRequest, HttpResponse\n from django.shortcuts import render\n@@ -78,6 +79,11 @@ def login_and_permission_required_exception(request):\n     pass\n \n \n+class CustomDefaultRedirectURLLoginView(LoginView):\n+    def get_default_redirect_url(self):\n+        return '/custom/'\n+\n+\n # special urls for auth test cases\n urlpatterns = auth_urlpatterns + [\n     path('logout/custom_query/', views.LogoutView.as_view(redirect_field_name='follow')),\n@@ -149,6 +155,9 @@ def login_and_permission_required_exception(request):\n          views.LoginView.as_view(redirect_authenticated_user=True)),\n     path('login/allowed_hosts/',\n          views.LoginView.as_view(success_url_allowed_hosts={'otherserver'})),\n+    path('login/get_default_redirect_url/', CustomDefaultRedirectURLLoginView.as_view()),\n+    path('login/next_page/', views.LoginView.as_view(next_page='/somewhere/')),\n+    path('login/next_page/named/', views.LoginView.as_view(next_page='password_reset')),\n \n     path('permission_required_redirect/', permission_required_redirect),\n     path('permission_required_exception/', permission_required_exception),\n",
  "problem_statement": "Add next_page to LoginView\nDescription\n\t\nLogoutView has a next_page attribute used to override settings.LOGOUT_REDIRECT_URL.\nIt would be nice if LoginView had the same mechanism.\n",
  "hints_text": "Did you consider overriding the get_success_url() method? Perhaps that method could be documented. Also there is settings.LOGIN_REDIRECT_URL. Do you have a use case that requires customizing the redirect for different login views?\nYes I have, the issue with that is when redirect_authenticated_user = True, dispatch also has redirect logic. No I don't. It's mostly for symmetry with LogoutView so that I have redirects in the same view file, and not in the settings.\nI guess we could see what a patch looks like.",
  "created_at": "2017-06-11T15:40:06Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"Named URLs should be reversible\", \"test_redirect_to_login_with_lazy (auth_tests.test_views.RedirectToLoginTests)\", \"test_redirect_to_login_with_lazy_and_unicode (auth_tests.test_views.RedirectToLoginTests)\", \"test_success_url_allowed_hosts_safe_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_success_url_allowed_hosts_same_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_success_url_allowed_hosts_unsafe_host (auth_tests.test_views.LoginSuccessURLAllowedHostsTest)\", \"test_https_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_lazy_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_login_url_with_querystring (auth_tests.test_views.LoginURLSettings)\", \"test_named_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_remote_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_remote_login_url_with_next_querystring (auth_tests.test_views.LoginURLSettings)\", \"test_standard_login_url (auth_tests.test_views.LoginURLSettings)\", \"test_default_logout_then_login (auth_tests.test_views.LogoutThenLoginTests)\", \"test_logout_then_login_with_custom_login (auth_tests.test_views.LogoutThenLoginTests)\", \"test_custom (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_default (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_named (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_remote (auth_tests.test_views.LoginRedirectUrlTest)\", \"test_confirm_valid_custom_user (auth_tests.test_views.CustomUserPasswordResetTest)\", \"A uidb64 that decodes to a non-UUID doesn't crash.\", \"test_confirm_valid_custom_user (auth_tests.test_views.UUIDUserPasswordResetTest)\", \"test_password_change_done_fails (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_done_succeeds (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_fails_with_invalid_old_password (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_fails_with_mismatched_passwords (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_custom (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_custom_named (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_redirect_default (auth_tests.test_views.ChangePasswordTest)\", \"test_password_change_succeeds (auth_tests.test_views.ChangePasswordTest)\", \"test_current_site_in_context_after_login (auth_tests.test_views.LoginTest)\", \"Makes sure that a login rotates the currently-used CSRF token.\", \"test_login_form_contains_request (auth_tests.test_views.LoginTest)\", \"test_login_get_default_redirect_url (auth_tests.test_views.LoginTest)\", \"test_login_named_next_page_named (auth_tests.test_views.LoginTest)\", \"test_login_next_page (auth_tests.test_views.LoginTest)\", \"test_login_next_page_overrides_login_redirect_url_setting (auth_tests.test_views.LoginTest)\", \"test_login_redirect_url_overrides_get_default_redirect_url (auth_tests.test_views.LoginTest)\", \"test_login_redirect_url_overrides_next_page (auth_tests.test_views.LoginTest)\", \"Session without django.contrib.auth.HASH_SESSION_KEY should login\", \"test_security_check (auth_tests.test_views.LoginTest)\", \"test_security_check_https (auth_tests.test_views.LoginTest)\", \"To avoid reusing another user's session, ensure a new, empty session is\", \"As above, but same user logging in after a password change.\", \"test_confirm_complete (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_custom_reset_url_token (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_custom_reset_url_token_link_redirects_to_set_password_page (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_different_passwords (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_display_user_from_form (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_invalid (auth_tests.test_views.PasswordResetTest)\", \"A POST with an invalid token is rejected.\", \"test_confirm_invalid_post (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_invalid_user (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_link_redirects_to_set_password_page (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset_already_logged_in (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_login_post_reset_custom_backend (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_overflow_user (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_custom (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_custom_named (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_redirect_default (auth_tests.test_views.PasswordResetTest)\", \"test_confirm_valid (auth_tests.test_views.PasswordResetTest)\", \"Email is sent if a valid email address is provided for password reset\", \"Email is sent if a valid email address is provided for password reset when a custom from_email is provided.\", \"If the provided email is not registered, don't raise any error but\", \"extra_email_context should be available in the email template context.\", \"A multipart email with text/plain and text/html is sent\", \"test_invalid_link_if_going_directly_to_the_final_reset_password_url (auth_tests.test_views.PasswordResetTest)\", \"Poisoned HTTP_HOST headers can't be used for reset emails\", \"Poisoned HTTP_HOST headers can't be used for reset emails on admin views\", \"test_reset_custom_redirect (auth_tests.test_views.PasswordResetTest)\", \"test_reset_custom_redirect_named (auth_tests.test_views.PasswordResetTest)\", \"test_reset_redirect_default (auth_tests.test_views.PasswordResetTest)\", \"#21649 - Ensure contrib.auth.views.password_change updates the user's\", \"test_14377 (auth_tests.test_views.LogoutTest)\", \"Logout without next_page option renders the default template\", \"The logout() view should send \\\"no-cache\\\" headers for reasons described\", \"Language is preserved after logout.\", \"test_logout_redirect_url_named_setting (auth_tests.test_views.LogoutTest)\", \"test_logout_redirect_url_setting (auth_tests.test_views.LogoutTest)\", \"Logout with custom query string redirects to specified resource\", \"Logout resolves names or URLs passed as next_page.\", \"Logout with next_page option given redirects to specified resource\", \"test_logout_with_overridden_redirect_url (auth_tests.test_views.LogoutTest)\", \"test_logout_with_post (auth_tests.test_views.LogoutTest)\", \"Logout with query string redirects to specified resource\", \"test_security_check (auth_tests.test_views.LogoutTest)\", \"test_security_check_https (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_safe_host (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_same_host (auth_tests.test_views.LogoutTest)\", \"test_success_url_allowed_hosts_unsafe_host (auth_tests.test_views.LogoutTest)\", \"Stay on the login page by default.\", \"If not logged in, stay on the same page.\", \"test_permission_required_logged_in (auth_tests.test_views.LoginRedirectAuthenticatedUser)\", \"test_permission_required_not_logged_in (auth_tests.test_views.LoginRedirectAuthenticatedUser)\", \"If logged in, go to default redirected URL.\", \"Detect a redirect loop if LOGIN_REDIRECT_URL is not correctly set,\", \"If next is specified as a GET parameter, go there.\", \"If logged in, go to custom redirected URL.\", \"test_admin_password_change (auth_tests.test_views.UUIDUserTests)\", \"test_changelist_disallows_password_lookups (auth_tests.test_views.ChangelistTests)\", \"test_password_change_bad_url (auth_tests.test_views.ChangelistTests)\", \"test_user_change_different_user_password (auth_tests.test_views.ChangelistTests)\", \"test_user_change_email (auth_tests.test_views.ChangelistTests)\", \"test_user_change_password (auth_tests.test_views.ChangelistTests)\", \"test_user_change_password_passes_user_to_has_change_permission (auth_tests.test_views.ChangelistTests)\", \"test_user_not_change (auth_tests.test_views.ChangelistTests)\", \"test_view_user_password_is_readonly (auth_tests.test_views.ChangelistTests)\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.782537",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}