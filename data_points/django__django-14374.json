{
  "repo": "django/django",
  "instance_id": "django__django-14374",
  "base_commit": "d1f1417caed648db2f81a1ec28c47bf958c01958",
  "patch": "diff --git a/django/contrib/sessions/backends/file.py b/django/contrib/sessions/backends/file.py\n--- a/django/contrib/sessions/backends/file.py\n+++ b/django/contrib/sessions/backends/file.py\n@@ -59,10 +59,8 @@ def _last_modification(self):\n         Return the modification time of the file storing the session's content.\n         \"\"\"\n         modification = os.stat(self._key_to_file()).st_mtime\n-        if settings.USE_TZ:\n-            modification = datetime.datetime.utcfromtimestamp(modification)\n-            return modification.replace(tzinfo=timezone.utc)\n-        return datetime.datetime.fromtimestamp(modification)\n+        tz = timezone.utc if settings.USE_TZ else None\n+        return datetime.datetime.fromtimestamp(modification, tz=tz)\n \n     def _expiry_date(self, session_data):\n         \"\"\"\ndiff --git a/django/contrib/sitemaps/views.py b/django/contrib/sitemaps/views.py\n--- a/django/contrib/sitemaps/views.py\n+++ b/django/contrib/sitemaps/views.py\n@@ -1,5 +1,4 @@\n import datetime\n-from calendar import timegm\n from functools import wraps\n \n from django.contrib.sites.shortcuts import get_current_site\n@@ -7,6 +6,7 @@\n from django.http import Http404\n from django.template.response import TemplateResponse\n from django.urls import reverse\n+from django.utils import timezone\n from django.utils.http import http_date\n \n \n@@ -72,10 +72,10 @@ def sitemap(request, sitemaps, section=None,\n             if all_sites_lastmod:\n                 site_lastmod = getattr(site, 'latest_lastmod', None)\n                 if site_lastmod is not None:\n-                    site_lastmod = (\n-                        site_lastmod.utctimetuple() if isinstance(site_lastmod, datetime.datetime)\n-                        else site_lastmod.timetuple()\n-                    )\n+                    if not isinstance(site_lastmod, datetime.datetime):\n+                        site_lastmod = datetime.datetime.combine(site_lastmod, datetime.time.min)\n+                    if timezone.is_naive(site_lastmod):\n+                        site_lastmod = timezone.make_aware(site_lastmod, timezone.utc)\n                     lastmod = site_lastmod if lastmod is None else max(lastmod, site_lastmod)\n                 else:\n                     all_sites_lastmod = False\n@@ -88,5 +88,5 @@ def sitemap(request, sitemaps, section=None,\n     if all_sites_lastmod and lastmod is not None:\n         # if lastmod is defined for all sites, set header so as\n         # ConditionalGetMiddleware is able to send 304 NOT MODIFIED\n-        response.headers['Last-Modified'] = http_date(timegm(lastmod))\n+        response.headers['Last-Modified'] = http_date(lastmod.timestamp())\n     return response\ndiff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -1,5 +1,3 @@\n-from calendar import timegm\n-\n from django.contrib.sites.shortcuts import get_current_site\n from django.core.exceptions import ImproperlyConfigured, ObjectDoesNotExist\n from django.http import Http404, HttpResponse\n@@ -42,8 +40,7 @@ def __call__(self, request, *args, **kwargs):\n         if hasattr(self, 'item_pubdate') or hasattr(self, 'item_updateddate'):\n             # if item_pubdate or item_updateddate is defined for the feed, set\n             # header so as ConditionalGetMiddleware is able to send 304 NOT MODIFIED\n-            response.headers['Last-Modified'] = http_date(\n-                timegm(feedgen.latest_post_date().utctimetuple()))\n+            response.headers['Last-Modified'] = http_date(feedgen.latest_post_date().timestamp())\n         feedgen.write(response, 'utf-8')\n         return response\n \ndiff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -123,10 +123,9 @@ def _base_set(self, mode, key, value, timeout=DEFAULT_TIMEOUT):\n             now = now.replace(microsecond=0)\n             if timeout is None:\n                 exp = datetime.max\n-            elif settings.USE_TZ:\n-                exp = datetime.utcfromtimestamp(timeout)\n             else:\n-                exp = datetime.fromtimestamp(timeout)\n+                tz = timezone.utc if settings.USE_TZ else None\n+                exp = datetime.fromtimestamp(timeout, tz=tz)\n             exp = exp.replace(microsecond=0)\n             if num > self._max_entries:\n                 self._cull(db, cursor, now)\n@@ -235,11 +234,7 @@ def has_key(self, key, version=None):\n         connection = connections[db]\n         quote_name = connection.ops.quote_name\n \n-        if settings.USE_TZ:\n-            now = datetime.utcnow()\n-        else:\n-            now = datetime.now()\n-        now = now.replace(microsecond=0)\n+        now = timezone.now().replace(microsecond=0, tzinfo=None)\n \n         with connection.cursor() as cursor:\n             cursor.execute(\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -347,11 +347,8 @@ def _datetime_from_timestamp(self, ts):\n         If timezone support is enabled, make an aware datetime object in UTC;\n         otherwise make a naive one in the local timezone.\n         \"\"\"\n-        if settings.USE_TZ:\n-            # Safe to use .replace() because UTC doesn't have DST\n-            return datetime.utcfromtimestamp(ts).replace(tzinfo=timezone.utc)\n-        else:\n-            return datetime.fromtimestamp(ts)\n+        tz = timezone.utc if settings.USE_TZ else None\n+        return datetime.fromtimestamp(ts, tz=tz)\n \n     def get_accessed_time(self, name):\n         return self._datetime_from_timestamp(os.path.getatime(self.path(name)))\ndiff --git a/django/http/response.py b/django/http/response.py\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -203,9 +203,9 @@ def set_cookie(self, key, value='', max_age=None, expires=None, path='/',\n         self.cookies[key] = value\n         if expires is not None:\n             if isinstance(expires, datetime.datetime):\n-                if timezone.is_aware(expires):\n-                    expires = timezone.make_naive(expires, timezone.utc)\n-                delta = expires - expires.utcnow()\n+                if timezone.is_naive(expires):\n+                    expires = timezone.make_aware(expires, timezone.utc)\n+                delta = expires - datetime.datetime.now(tz=timezone.utc)\n                 # Add one second so the date matches exactly (a fraction of\n                 # time gets lost between converting to a timedelta and\n                 # then the date string).\ndiff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -12,7 +12,6 @@\n \"\"\"\n import calendar\n import datetime\n-import time\n from email.utils import format_datetime as format_datetime_rfc5322\n \n from django.utils.dates import (\n@@ -20,7 +19,7 @@\n )\n from django.utils.regex_helper import _lazy_re_compile\n from django.utils.timezone import (\n-    _datetime_ambiguous_or_imaginary, get_default_timezone, is_aware, is_naive,\n+    _datetime_ambiguous_or_imaginary, get_default_timezone, is_naive,\n     make_aware,\n )\n from django.utils.translation import gettext as _\n@@ -295,10 +294,10 @@ def t(self):\n \n     def U(self):\n         \"Seconds since the Unix epoch (January 1 1970 00:00:00 GMT)\"\n-        if isinstance(self.data, datetime.datetime) and is_aware(self.data):\n-            return int(calendar.timegm(self.data.utctimetuple()))\n-        else:\n-            return int(time.mktime(self.data.timetuple()))\n+        value = self.data\n+        if not isinstance(value, datetime.datetime):\n+            value = datetime.datetime.combine(value, datetime.time.min)\n+        return int(value.timestamp())\n \n     def w(self):\n         \"Day of the week, numeric, i.e. '0' (Sunday) to '6' (Saturday)\"\ndiff --git a/django/utils/feedgenerator.py b/django/utils/feedgenerator.py\n--- a/django/utils/feedgenerator.py\n+++ b/django/utils/feedgenerator.py\n@@ -172,8 +172,7 @@ def latest_post_date(self):\n                     if latest_date is None or item_date > latest_date:\n                         latest_date = item_date\n \n-        # datetime.now(tz=utc) is slower, as documented in django.utils.timezone.now\n-        return latest_date or datetime.datetime.utcnow().replace(tzinfo=utc)\n+        return latest_date or datetime.datetime.now(tz=utc)\n \n \n class Enclosure:\ndiff --git a/django/utils/http.py b/django/utils/http.py\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -1,5 +1,4 @@\n import base64\n-import calendar\n import datetime\n import re\n import unicodedata\n@@ -112,9 +111,10 @@ def parse_http_date(date):\n     else:\n         raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n     try:\n+        tz = datetime.timezone.utc\n         year = int(m['year'])\n         if year < 100:\n-            current_year = datetime.datetime.utcnow().year\n+            current_year = datetime.datetime.now(tz=tz).year\n             current_century = current_year - (current_year % 100)\n             if year - (current_year % 100) > 50:\n                 # year that appears to be more than 50 years in the future are\n@@ -127,8 +127,8 @@ def parse_http_date(date):\n         hour = int(m['hour'])\n         min = int(m['min'])\n         sec = int(m['sec'])\n-        result = datetime.datetime(year, month, day, hour, min, sec)\n-        return calendar.timegm(result.utctimetuple())\n+        result = datetime.datetime(year, month, day, hour, min, sec, tzinfo=tz)\n+        return int(result.timestamp())\n     except Exception as exc:\n         raise ValueError(\"%r is not a valid date\" % date) from exc\n \ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -194,11 +194,7 @@ def now():\n     \"\"\"\n     Return an aware or naive datetime.datetime, depending on settings.USE_TZ.\n     \"\"\"\n-    if settings.USE_TZ:\n-        # timeit shows that datetime.now(tz=utc) is 24% slower\n-        return datetime.utcnow().replace(tzinfo=utc)\n-    else:\n-        return datetime.now()\n+    return datetime.now(tz=utc if settings.USE_TZ else None)\n \n \n # By design, these four functions don't perform any checks on their arguments.\ndiff --git a/django/utils/version.py b/django/utils/version.py\n--- a/django/utils/version.py\n+++ b/django/utils/version.py\n@@ -89,8 +89,9 @@ def get_git_changeset():\n         shell=True, cwd=repo_dir, universal_newlines=True,\n     )\n     timestamp = git_log.stdout\n+    tz = datetime.timezone.utc\n     try:\n-        timestamp = datetime.datetime.utcfromtimestamp(int(timestamp))\n+        timestamp = datetime.datetime.fromtimestamp(int(timestamp), tz=tz)\n     except ValueError:\n         return None\n     return timestamp.strftime('%Y%m%d%H%M%S')\ndiff --git a/django/views/decorators/http.py b/django/views/decorators/http.py\n--- a/django/views/decorators/http.py\n+++ b/django/views/decorators/http.py\n@@ -2,11 +2,11 @@\n Decorators for views based on HTTP headers.\n \"\"\"\n \n-from calendar import timegm\n from functools import wraps\n \n from django.http import HttpResponseNotAllowed\n from django.middleware.http import ConditionalGetMiddleware\n+from django.utils import timezone\n from django.utils.cache import get_conditional_response\n from django.utils.decorators import decorator_from_middleware\n from django.utils.http import http_date, quote_etag\n@@ -82,7 +82,9 @@ def get_last_modified():\n                 if last_modified_func:\n                     dt = last_modified_func(request, *args, **kwargs)\n                     if dt:\n-                        return timegm(dt.utctimetuple())\n+                        if not timezone.is_aware(dt):\n+                            dt = timezone.make_aware(dt, timezone.utc)\n+                        return int(dt.timestamp())\n \n             # The value from etag_func() could be quoted or unquoted.\n             res_etag = etag_func(request, *args, **kwargs) if etag_func else None\n",
  "test_patch": "diff --git a/tests/foreign_object/tests.py b/tests/foreign_object/tests.py\n--- a/tests/foreign_object/tests.py\n+++ b/tests/foreign_object/tests.py\n@@ -92,7 +92,7 @@ def test_query_filters_correctly(self):\n \n     def test_reverse_query_filters_correctly(self):\n \n-        timemark = datetime.datetime.utcnow()\n+        timemark = datetime.datetime.now(tz=datetime.timezone.utc).replace(tzinfo=None)\n         timedelta = datetime.timedelta(days=1)\n \n         # Creating a to valid memberships\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -479,8 +479,8 @@ def test_serialize_functions(self):\n         self.serialize_round_trip(models.SET(42))\n \n     def test_serialize_datetime(self):\n-        self.assertSerializedEqual(datetime.datetime.utcnow())\n-        self.assertSerializedEqual(datetime.datetime.utcnow)\n+        self.assertSerializedEqual(datetime.datetime.now())\n+        self.assertSerializedEqual(datetime.datetime.now)\n         self.assertSerializedEqual(datetime.datetime.today())\n         self.assertSerializedEqual(datetime.datetime.today)\n         self.assertSerializedEqual(datetime.date.today())\n@@ -492,13 +492,15 @@ def test_serialize_datetime(self):\n             datetime.datetime(2014, 1, 1, 1, 1),\n             (\"datetime.datetime(2014, 1, 1, 1, 1)\", {'import datetime'})\n         )\n-        self.assertSerializedResultEqual(\n-            datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc),\n-            (\n-                \"datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc)\",\n-                {'import datetime', 'from django.utils.timezone import utc'},\n-            )\n-        )\n+        for tzinfo in (utc, datetime.timezone.utc):\n+            with self.subTest(tzinfo=tzinfo):\n+                self.assertSerializedResultEqual(\n+                    datetime.datetime(2012, 1, 1, 1, 1, tzinfo=tzinfo),\n+                    (\n+                        \"datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc)\",\n+                        {'import datetime', 'from django.utils.timezone import utc'},\n+                    )\n+                )\n \n     def test_serialize_fields(self):\n         self.assertSerializedFieldEqual(models.CharField(max_length=255))\n@@ -660,8 +662,8 @@ def test_simple_migration(self):\n         Tests serializing a simple migration.\n         \"\"\"\n         fields = {\n-            'charfield': models.DateTimeField(default=datetime.datetime.utcnow),\n-            'datetimefield': models.DateTimeField(default=datetime.datetime.utcnow),\n+            'charfield': models.DateTimeField(default=datetime.datetime.now),\n+            'datetimefield': models.DateTimeField(default=datetime.datetime.now),\n         }\n \n         options = {\ndiff --git a/tests/responses/test_cookie.py b/tests/responses/test_cookie.py\n--- a/tests/responses/test_cookie.py\n+++ b/tests/responses/test_cookie.py\n@@ -19,7 +19,7 @@ def test_near_expiration(self):\n         # evaluated expiration time and the time evaluated in set_cookie(). If\n         # this difference doesn't exist, the cookie time will be 1 second\n         # larger. The sleep guarantees that there will be a time difference.\n-        expires = datetime.utcnow() + timedelta(seconds=10)\n+        expires = datetime.now(tz=utc).replace(tzinfo=None) + timedelta(seconds=10)\n         time.sleep(0.001)\n         response.set_cookie('datetime', expires=expires)\n         datetime_cookie = response.cookies['datetime']\n@@ -28,7 +28,7 @@ def test_near_expiration(self):\n     def test_aware_expiration(self):\n         \"\"\"set_cookie() accepts an aware datetime as expiration time.\"\"\"\n         response = HttpResponse()\n-        expires = (datetime.utcnow() + timedelta(seconds=10)).replace(tzinfo=utc)\n+        expires = datetime.now(tz=utc) + timedelta(seconds=10)\n         time.sleep(0.001)\n         response.set_cookie('datetime', expires=expires)\n         datetime_cookie = response.cookies['datetime']\ndiff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -54,8 +54,8 @@ def test_datetime_with_tzinfo(self):\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), ltz), dt)\n         # astimezone() is safe here because the target timezone doesn't have DST\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U'))), dt.astimezone(ltz).replace(tzinfo=None))\n-        self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), tz).utctimetuple(), dt.utctimetuple())\n-        self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), ltz).utctimetuple(), dt.utctimetuple())\n+        self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), tz).timetuple(), dt.astimezone(tz).timetuple())\n+        self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), ltz).timetuple(), dt.astimezone(ltz).timetuple())\n \n     def test_epoch(self):\n         udt = datetime(1970, 1, 1, tzinfo=utc)\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,6 +1,6 @@\n import platform\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timezone\n from unittest import mock\n \n from django.test import SimpleTestCase\n@@ -288,38 +288,52 @@ def test_http_date(self):\n \n     def test_parsing_rfc1123(self):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+        self.assertEqual(\n+            datetime.fromtimestamp(parsed, timezone.utc),\n+            datetime(1994, 11, 6, 8, 49, 37, tzinfo=timezone.utc),\n+        )\n \n     @unittest.skipIf(platform.architecture()[0] == '32bit', 'The Year 2038 problem.')\n     @mock.patch('django.utils.http.datetime.datetime')\n     def test_parsing_rfc850(self, mocked_datetime):\n         mocked_datetime.side_effect = datetime\n-        mocked_datetime.utcnow = mock.Mock()\n-        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n-        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n-        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        mocked_datetime.now = mock.Mock()\n+        now_1 = datetime(2019, 11, 6, 8, 49, 37, tzinfo=timezone.utc)\n+        now_2 = datetime(2020, 11, 6, 8, 49, 37, tzinfo=timezone.utc)\n+        now_3 = datetime(2048, 11, 6, 8, 49, 37, tzinfo=timezone.utc)\n         tests = (\n-            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n-            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n-            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n-            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n-            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n-            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n-            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+            (now_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37, tzinfo=timezone.utc)),\n+            (now_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37, tzinfo=timezone.utc)),\n+            (now_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37, tzinfo=timezone.utc)),\n+            (now_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37, tzinfo=timezone.utc)),\n+            (now_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37, tzinfo=timezone.utc)),\n+            (now_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37, tzinfo=timezone.utc)),\n+            (now_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37, tzinfo=timezone.utc)),\n         )\n-        for utcnow, rfc850str, expected_date in tests:\n+        for now, rfc850str, expected_date in tests:\n             with self.subTest(rfc850str=rfc850str):\n-                mocked_datetime.utcnow.return_value = utcnow\n+                mocked_datetime.now.return_value = now\n                 parsed = parse_http_date(rfc850str)\n-                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+                mocked_datetime.now.assert_called_once_with(tz=timezone.utc)\n+                self.assertEqual(\n+                    datetime.fromtimestamp(parsed, timezone.utc),\n+                    expected_date,\n+                )\n+            mocked_datetime.reset_mock()\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+        self.assertEqual(\n+            datetime.fromtimestamp(parsed, timezone.utc),\n+            datetime(1994, 11, 6, 8, 49, 37, tzinfo=timezone.utc),\n+        )\n \n     def test_parsing_year_less_than_70(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n+        self.assertEqual(\n+            datetime.fromtimestamp(parsed, timezone.utc),\n+            datetime(2037, 11, 6, 8, 49, 37, tzinfo=timezone.utc),\n+        )\n \n \n class EscapeLeadingSlashesTests(unittest.TestCase):\n",
  "problem_statement": "Update usage of now() & co\nDescription\n\t\nUsing datetime.now(), rather than utcnow() is the modern recommended approach.\nWarning in docs: \n... the recommended way to create an object representing the current time in UTC is by calling datetime.now(timezone.utc).\n​https://docs.python.org/3.9/library/datetime.html#datetime.datetime.now\n​https://docs.python.org/3/library/datetime.html#datetime.datetime.utcnow\nMore depth here:\n​https://blog.ganssle.io/articles/2019/11/utcnow.html\ndatetime.utcfromtimestamp() and datetime.utctimetuple() carry similar warnings. \nUpdate the code to modern usage. \nUpdate docs examples (for backport to stable docs).\n",
  "hints_text": "​PR",
  "created_at": "2021-05-10T19:52:38Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_parsing_rfc850 (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_year_less_than_70 (utils_tests.test_http.HttpDateProcessingTests)\"]",
  "PASS_TO_PASS": "[\"test_input_too_large (utils_tests.test_http.Base36IntTests)\", \"test_invalid_literal (utils_tests.test_http.Base36IntTests)\", \"test_negative_input (utils_tests.test_http.Base36IntTests)\", \"test_roundtrip (utils_tests.test_http.Base36IntTests)\", \"test_to_base36_errors (utils_tests.test_http.Base36IntTests)\", \"test_to_int_errors (utils_tests.test_http.Base36IntTests)\", \"test_values (utils_tests.test_http.Base36IntTests)\", \"test (utils_tests.test_http.EscapeLeadingSlashesTests)\", \"test_custom_iterable_not_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_empty_sequence_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_sequence_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_sequence_not_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_tuple_not_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_with_bytearray (utils_tests.test_http.URLEncodeTests)\", \"test_dict_with_bytes_values (utils_tests.test_http.URLEncodeTests)\", \"test_dict_with_sequence_of_bytes (utils_tests.test_http.URLEncodeTests)\", \"test_generator (utils_tests.test_http.URLEncodeTests)\", \"test_multivaluedict (utils_tests.test_http.URLEncodeTests)\", \"test_none (utils_tests.test_http.URLEncodeTests)\", \"test_none_in_generator (utils_tests.test_http.URLEncodeTests)\", \"test_none_in_sequence (utils_tests.test_http.URLEncodeTests)\", \"test_tuples (utils_tests.test_http.URLEncodeTests)\", \"test_bad (utils_tests.test_http.IsSameDomainTests)\", \"test_good (utils_tests.test_http.IsSameDomainTests)\", \"test_allowed_hosts_str (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_bad_urls (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_basic_auth (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_good_urls (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_no_allowed_hosts (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_secure_param_https_urls (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_secure_param_non_https_urls (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_check_composite_foreign_object (foreign_object.tests.TestModelCheckTests)\", \"test_check_subset_composite_foreign_object (foreign_object.tests.TestModelCheckTests)\", \"test_parsing (utils_tests.test_http.ETagProcessingTests)\", \"test_quoting (utils_tests.test_http.ETagProcessingTests)\", \"test_args_kwargs_signature (migrations.test_writer.OperationWriterTests)\", \"test_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_empty_signature (migrations.test_writer.OperationWriterTests)\", \"test_expand_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_kwargs_signature (migrations.test_writer.OperationWriterTests)\", \"test_multiline_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_nested_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_default (responses.test_cookie.DeleteCookieTests)\", \"test_delete_cookie_samesite (responses.test_cookie.DeleteCookieTests)\", \"delete_cookie() sets the secure flag if the cookie name starts with\", \"test_delete_cookie_secure_samesite_none (responses.test_cookie.DeleteCookieTests)\", \"test_roundtrip (utils_tests.test_http.URLSafeBase64Tests)\", \"set_cookie() accepts an aware datetime as expiration time.\", \"Setting a cookie after deletion clears the expiry date.\", \"Cookie will expire when a distant expiration time is provided.\", \"test_httponly_cookie (responses.test_cookie.SetCookieTests)\", \"test_invalid_samesite (responses.test_cookie.SetCookieTests)\", \"Cookie will expire if max_age is provided.\", \"test_max_age_int (responses.test_cookie.SetCookieTests)\", \"Cookie will expire when a near expiration time is provided.\", \"test_samesite (responses.test_cookie.SetCookieTests)\", \"HttpResponse.set_cookie() works with Unicode data.\", \"test_http_date (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_asctime (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_rfc1123 (utils_tests.test_http.HttpDateProcessingTests)\", \"test_extra_join_filter_q (foreign_object.tests.TestExtraJoinFilterQ)\", \"test_batch_create_foreign_object (foreign_object.tests.MultiColumnFKTests)\", \"test_double_nested_query (foreign_object.tests.MultiColumnFKTests)\", \"test_foreign_key_raises_informative_does_not_exist (foreign_object.tests.MultiColumnFKTests)\", \"test_foreign_key_related_query_name (foreign_object.tests.MultiColumnFKTests)\", \"test_forward_in_lookup_filters_correctly (foreign_object.tests.MultiColumnFKTests)\", \"test_get_fails_on_multicolumn_mismatch (foreign_object.tests.MultiColumnFKTests)\", \"test_get_succeeds_on_multicolumn_match (foreign_object.tests.MultiColumnFKTests)\", \"test_inheritance (foreign_object.tests.MultiColumnFKTests)\", \"test_isnull_lookup (foreign_object.tests.MultiColumnFKTests)\", \"test_m2m_through_forward_ignores_invalid_members (foreign_object.tests.MultiColumnFKTests)\", \"test_m2m_through_forward_returns_valid_members (foreign_object.tests.MultiColumnFKTests)\", \"test_m2m_through_on_self_ignores_mismatch_columns (foreign_object.tests.MultiColumnFKTests)\", \"test_m2m_through_on_self_works (foreign_object.tests.MultiColumnFKTests)\", \"test_m2m_through_reverse_ignores_invalid_members (foreign_object.tests.MultiColumnFKTests)\", \"test_m2m_through_reverse_returns_valid_members (foreign_object.tests.MultiColumnFKTests)\", \"test_many_to_many_related_query_name (foreign_object.tests.MultiColumnFKTests)\", \"test_prefetch_foreignkey_forward_works (foreign_object.tests.MultiColumnFKTests)\", \"test_prefetch_foreignkey_reverse_works (foreign_object.tests.MultiColumnFKTests)\", \"test_prefetch_related_m2m_forward_works (foreign_object.tests.MultiColumnFKTests)\", \"test_prefetch_related_m2m_reverse_works (foreign_object.tests.MultiColumnFKTests)\", \"test_query_filters_correctly (foreign_object.tests.MultiColumnFKTests)\", \"test_reverse_query_filters_correctly (foreign_object.tests.MultiColumnFKTests)\", \"test_reverse_query_returns_correct_result (foreign_object.tests.MultiColumnFKTests)\", \"test_select_related_foreignkey_forward_works (foreign_object.tests.MultiColumnFKTests)\", \"test_translations (foreign_object.tests.MultiColumnFKTests)\", \"test_Y_format_year_before_1000 (utils_tests.test_dateformat.DateFormatTests)\", \"test_am_pm (utils_tests.test_dateformat.DateFormatTests)\", \"test_date (utils_tests.test_dateformat.DateFormatTests)\", \"test_date_formats (utils_tests.test_dateformat.DateFormatTests)\", \"test_dateformat (utils_tests.test_dateformat.DateFormatTests)\", \"test_datetime_with_local_tzinfo (utils_tests.test_dateformat.DateFormatTests)\", \"test_datetime_with_tzinfo (utils_tests.test_dateformat.DateFormatTests)\", \"test_day_of_year_leap (utils_tests.test_dateformat.DateFormatTests)\", \"test_empty_format (utils_tests.test_dateformat.DateFormatTests)\", \"test_epoch (utils_tests.test_dateformat.DateFormatTests)\", \"test_futuredates (utils_tests.test_dateformat.DateFormatTests)\", \"test_invalid_time_format_specifiers (utils_tests.test_dateformat.DateFormatTests)\", \"test_microsecond (utils_tests.test_dateformat.DateFormatTests)\", \"test_naive_ambiguous_datetime (utils_tests.test_dateformat.DateFormatTests)\", \"test_naive_datetime (utils_tests.test_dateformat.DateFormatTests)\", \"test_r_format_with_non_en_locale (utils_tests.test_dateformat.DateFormatTests)\", \"test_time_formats (utils_tests.test_dateformat.DateFormatTests)\", \"test_timezones (utils_tests.test_dateformat.DateFormatTests)\", \"test_twelve_hour_format (utils_tests.test_dateformat.DateFormatTests)\", \"test_y_format_year_before_1000 (utils_tests.test_dateformat.DateFormatTests)\", \"test_custom_operation (migrations.test_writer.WriterTests)\", \"test_deconstruct_class_arguments (migrations.test_writer.WriterTests)\", \"Test comments at top of file.\", \"test_migration_path (migrations.test_writer.WriterTests)\", \"django.db.models shouldn't be imported if unused.\", \"test_register_non_serializer (migrations.test_writer.WriterTests)\", \"test_register_serializer (migrations.test_writer.WriterTests)\", \"test_serialize_builtin_types (migrations.test_writer.WriterTests)\", \"test_serialize_builtins (migrations.test_writer.WriterTests)\", \"test_serialize_choices (migrations.test_writer.WriterTests)\", \"Ticket #22943: Test serialization of class-based validators, including\", \"test_serialize_collections (migrations.test_writer.WriterTests)\", \"Make sure compiled regex can be serialized.\", \"test_serialize_constants (migrations.test_writer.WriterTests)\", \"test_serialize_datetime (migrations.test_writer.WriterTests)\", \"Ticket #22679: makemigrations generates invalid code for (an empty\", \"test_serialize_enums (migrations.test_writer.WriterTests)\", \"test_serialize_fields (migrations.test_writer.WriterTests)\", \"test_serialize_frozensets (migrations.test_writer.WriterTests)\", \"test_serialize_functions (migrations.test_writer.WriterTests)\", \"test_serialize_functools_partial (migrations.test_writer.WriterTests)\", \"test_serialize_functools_partialmethod (migrations.test_writer.WriterTests)\", \"test_serialize_iterators (migrations.test_writer.WriterTests)\", \"test_serialize_lazy_objects (migrations.test_writer.WriterTests)\", \"A reference in a local scope can't be serialized.\", \"test_serialize_managers (migrations.test_writer.WriterTests)\", \"test_serialize_multiline_strings (migrations.test_writer.WriterTests)\", \"test_serialize_nested_class (migrations.test_writer.WriterTests)\", \"test_serialize_numbers (migrations.test_writer.WriterTests)\", \"test_serialize_path_like (migrations.test_writer.WriterTests)\", \"test_serialize_pathlib (migrations.test_writer.WriterTests)\", \"test_serialize_range (migrations.test_writer.WriterTests)\", \"test_serialize_set (migrations.test_writer.WriterTests)\", \"test_serialize_settings (migrations.test_writer.WriterTests)\", \"test_serialize_strings (migrations.test_writer.WriterTests)\", \"test_serialize_timedelta (migrations.test_writer.WriterTests)\", \"test_serialize_type_none (migrations.test_writer.WriterTests)\", \"An unbound method used within a class body can be serialized.\", \"test_serialize_uuid (migrations.test_writer.WriterTests)\", \"Tests serializing a simple migration.\", \"#24155 - Tests ordering of imports.\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.689057",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}