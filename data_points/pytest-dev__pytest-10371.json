{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-10371",
  "base_commit": "bc2c3b66aa084fa4ff64f836aee73eae4cb72818",
  "patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -297,6 +297,13 @@ def add_option_ini(option, dest, default=None, type=None, **kwargs):\n         default=None,\n         help=\"Auto-indent multiline messages passed to the logging module. Accepts true|on, false|off or an integer.\",\n     )\n+    group.addoption(\n+        \"--log-disable\",\n+        action=\"append\",\n+        default=[],\n+        dest=\"logger_disable\",\n+        help=\"Disable a logger by name. Can be passed multipe times.\",\n+    )\n \n \n _HandlerType = TypeVar(\"_HandlerType\", bound=logging.Handler)\n@@ -594,6 +601,15 @@ def __init__(self, config: Config) -> None:\n             get_option_ini(config, \"log_auto_indent\"),\n         )\n         self.log_cli_handler.setFormatter(log_cli_formatter)\n+        self._disable_loggers(loggers_to_disable=config.option.logger_disable)\n+\n+    def _disable_loggers(self, loggers_to_disable: List[str]) -> None:\n+        if not loggers_to_disable:\n+            return\n+\n+        for name in loggers_to_disable:\n+            logger = logging.getLogger(name)\n+            logger.disabled = True\n \n     def _create_formatter(self, log_format, log_date_format, auto_indent):\n         # Color option doesn't exist if terminal plugin is disabled.\n",
  "test_patch": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -1165,3 +1165,72 @@ def test_log_file_cli_subdirectories_are_successfully_created(\n     result = pytester.runpytest(\"--log-file=foo/bar/logf.log\")\n     assert \"logf.log\" in os.listdir(expected)\n     assert result.ret == ExitCode.OK\n+\n+\n+def test_disable_loggers(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+        import os\n+        disabled_log = logging.getLogger('disabled')\n+        test_log = logging.getLogger('test')\n+        def test_logger_propagation(caplog):\n+            with caplog.at_level(logging.DEBUG):\n+                disabled_log.warning(\"no log; no stderr\")\n+                test_log.debug(\"Visible text!\")\n+                assert caplog.record_tuples == [('test', 10, 'Visible text!')]\n+         \"\"\"\n+    )\n+    result = testdir.runpytest(\"--log-disable=disabled\", \"-s\")\n+    assert result.ret == ExitCode.OK\n+    assert not result.stderr.lines\n+\n+\n+def test_disable_loggers_does_not_propagate(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+    import logging\n+    import os\n+\n+    parent_logger = logging.getLogger(\"parent\")\n+    child_logger = parent_logger.getChild(\"child\")\n+\n+    def test_logger_propagation_to_parent(caplog):\n+            with caplog.at_level(logging.DEBUG):\n+                parent_logger.warning(\"some parent logger message\")\n+                child_logger.warning(\"some child logger message\")\n+                assert len(caplog.record_tuples) == 1\n+                assert caplog.record_tuples[0][0] == \"parent\"\n+                assert caplog.record_tuples[0][2] == \"some parent logger message\"\n+    \"\"\"\n+    )\n+\n+    result = testdir.runpytest(\"--log-disable=parent.child\", \"-s\")\n+    assert result.ret == ExitCode.OK\n+    assert not result.stderr.lines\n+\n+\n+def test_log_disabling_works_with_log_cli(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+    import logging\n+    disabled_log = logging.getLogger('disabled')\n+    test_log = logging.getLogger('test')\n+\n+    def test_log_cli_works(caplog):\n+        test_log.info(\"Visible text!\")\n+        disabled_log.warning(\"This string will be suppressed.\")\n+    \"\"\"\n+    )\n+    result = testdir.runpytest(\n+        \"--log-cli-level=DEBUG\",\n+        \"--log-disable=disabled\",\n+    )\n+    assert result.ret == ExitCode.OK\n+    result.stdout.fnmatch_lines(\n+        \"INFO     test:test_log_disabling_works_with_log_cli.py:6 Visible text!\"\n+    )\n+    result.stdout.no_fnmatch_line(\n+        \"WARNING  disabled:test_log_disabling_works_with_log_cli.py:7 This string will be suppressed.\"\n+    )\n+    assert not result.stderr.lines\n",
  "problem_statement": " RFE: allow to selectively disable loggers from command-line\nA common debugging strategy is to study the logs.\r\nBut sometimes the program issues excessive logging messages, \r\nnecessitating the selective disabling of babbler loggers.\r\n\r\nThis SO captures the crux & solution of this Request For Enhancement:\r\nhttps://stackoverflow.com/a/57002853/548792\r\n\r\nAlthough the proposed SO solution of a new ``--disable-log`` option works perfectly fine, \r\nit is annoying to have to patch every new project,\r\nplus, it does not support auto-completion e.g. on bash.\r\n\r\n- Would it make sense to include such capability into core code?\r\n\r\nIn any case, I'm suggesting the new option to be called ``--logger-disabled``,\r\nto fit with the existing option names starting with  ``--log-...``.\n",
  "hints_text": "i believe this could play into #7417 \nBack after some time out :)\r\n\r\nWhat do we think about a --suppress-logger= appendable parsearg option here, which takes a list of logger names (convert to set to avoid duplicates) and doing the following:\r\n\r\n - add NullHandler() to the logger to avoid warnings from last resort writing to stderr\r\n - mark propagate = False to avoid events being passed to ancestor handlers\r\n\r\nLet me know, thanks :) its where I'm thinking to 'start' with this\nAs i suggested in the opening-post, i would choose an option name starting from `--log-...`, to fit with existing options related to the logging subsystem (e.g. in the `--help` message). \nAdditionally, i would allow a separate option for each logger suppressed, to specify as value whether it should propagate=false/true.  \n@symonk, are you still working on this and on #7417?\r\n\r\nI've been looking through the issues labeled with `status: easy` in hopes of making a first contribution. This issue stood out to me since I've had problems with excessive logs during tests myself. Also, a possible solution doesn't seem to involve any subjects I'm too unfamiliar with.\nHello, @ankostis. Could you assign me to this issue?\nHey everone!\r\nI'd like to tackle this as part of Hacktoberfest.\r\nI see @symonk already had an ongoing PR (https://github.com/pytest-dev/pytest/pull/7873) that they closed.\r\n\r\nI'm going to take it from there if it's ok.\nPlease, be my guest.",
  "created_at": "2022-10-11T20:27:58Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"testing/logging/test_reporting.py::test_disable_loggers\", \"testing/logging/test_reporting.py::test_disable_loggers_does_not_propagate\", \"testing/logging/test_reporting.py::test_log_disabling_works_with_log_cli\"]",
  "PASS_TO_PASS": "[\"[100%]\", \"[\", \"[100%]------------------------------\", \"testing/logging/test_reporting.py::test_live_logging_suspends_capture[True]\", \"testing/logging/test_reporting.py::test_live_logging_suspends_capture[False]\", \"testing/logging/test_reporting.py::test_nothing_logged\", \"testing/logging/test_reporting.py::test_messages_logged\", \"testing/logging/test_reporting.py::test_root_logger_affected\", \"testing/logging/test_reporting.py::test_log_cli_level_log_level_interaction\", \"testing/logging/test_reporting.py::test_setup_logging\", \"testing/logging/test_reporting.py::test_teardown_logging\", \"testing/logging/test_reporting.py::test_log_cli_enabled_disabled[True]\", \"testing/logging/test_reporting.py::test_log_cli_enabled_disabled[False]\", \"testing/logging/test_reporting.py::test_log_cli_default_level\", \"testing/logging/test_reporting.py::test_log_cli_default_level_multiple_tests\", \"testing/logging/test_reporting.py::test_log_cli_default_level_sections\", \"testing/logging/test_reporting.py::test_live_logs_unknown_sections\", \"testing/logging/test_reporting.py::test_sections_single_new_line_after_test_outcome\", \"testing/logging/test_reporting.py::test_log_cli_level\", \"testing/logging/test_reporting.py::test_log_cli_ini_level\", \"testing/logging/test_reporting.py::test_log_cli_auto_enable[]\", \"testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-level=WARNING]\", \"testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-file-level=WARNING]\", \"testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-cli-level=WARNING]\", \"testing/logging/test_reporting.py::test_log_file_cli\", \"testing/logging/test_reporting.py::test_log_file_cli_level\", \"testing/logging/test_reporting.py::test_log_level_not_changed_by_default\", \"testing/logging/test_reporting.py::test_log_file_ini\", \"testing/logging/test_reporting.py::test_log_file_ini_level\", \"testing/logging/test_reporting.py::test_log_file_unicode\", \"testing/logging/test_reporting.py::test_collection_live_logging\", \"testing/logging/test_reporting.py::test_collection_collect_only_live_logging[]\", \"testing/logging/test_reporting.py::test_collection_collect_only_live_logging[-q]\", \"testing/logging/test_reporting.py::test_collection_collect_only_live_logging[-qq]\", \"testing/logging/test_reporting.py::test_collection_logging_to_file\", \"testing/logging/test_reporting.py::test_log_in_hooks\", \"testing/logging/test_reporting.py::test_log_in_runtest_logreport\", \"testing/logging/test_reporting.py::test_log_set_path\", \"testing/logging/test_reporting.py::test_colored_captured_log\", \"testing/logging/test_reporting.py::test_colored_ansi_esc_caplogtext\", \"testing/logging/test_reporting.py::test_logging_emit_error\", \"testing/logging/test_reporting.py::test_logging_emit_error_supressed\", \"testing/logging/test_reporting.py::test_log_file_cli_subdirectories_are_successfully_created\"]",
  "environment_setup_commit": "572b5657d7ca557593418ce0319fabff88800c73",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.921964",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}