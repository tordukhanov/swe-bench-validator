{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-8447",
  "base_commit": "6447ca5f1e1f1e02fe1ac43621f642303f7bfe62",
  "patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -484,7 +484,7 @@ def __init__(self, config: Config) -> None:\n \n     @classmethod\n     def from_config(cls, config: Config) -> \"Session\":\n-        session: Session = cls._create(config)\n+        session: Session = cls._create(config=config)\n         return session\n \n     def __repr__(self) -> str:\ndiff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -1,8 +1,10 @@\n import os\n import warnings\n+from inspect import signature\n from pathlib import Path\n from typing import Any\n from typing import Callable\n+from typing import cast\n from typing import Iterable\n from typing import Iterator\n from typing import List\n@@ -34,6 +36,7 @@\n from _pytest.pathlib import absolutepath\n from _pytest.pathlib import commonpath\n from _pytest.store import Store\n+from _pytest.warning_types import PytestWarning\n \n if TYPE_CHECKING:\n     # Imported here due to circular import.\n@@ -125,7 +128,20 @@ def __call__(self, *k, **kw):\n         fail(msg, pytrace=False)\n \n     def _create(self, *k, **kw):\n-        return super().__call__(*k, **kw)\n+        try:\n+            return super().__call__(*k, **kw)\n+        except TypeError:\n+            sig = signature(getattr(self, \"__init__\"))\n+            known_kw = {k: v for k, v in kw.items() if k in sig.parameters}\n+            from .warning_types import PytestDeprecationWarning\n+\n+            warnings.warn(\n+                PytestDeprecationWarning(\n+                    f\"{self} is not using a cooperative constructor and only takes {set(known_kw)}\"\n+                )\n+            )\n+\n+            return super().__call__(*k, **known_kw)\n \n \n class Node(metaclass=NodeMeta):\n@@ -539,26 +555,39 @@ def _check_initialpaths_for_relpath(session: \"Session\", path: Path) -> Optional[\n class FSCollector(Collector):\n     def __init__(\n         self,\n-        fspath: Optional[LEGACY_PATH],\n-        path: Optional[Path],\n-        parent=None,\n+        fspath: Optional[LEGACY_PATH] = None,\n+        path_or_parent: Optional[Union[Path, Node]] = None,\n+        path: Optional[Path] = None,\n+        name: Optional[str] = None,\n+        parent: Optional[Node] = None,\n         config: Optional[Config] = None,\n         session: Optional[\"Session\"] = None,\n         nodeid: Optional[str] = None,\n     ) -> None:\n+        if path_or_parent:\n+            if isinstance(path_or_parent, Node):\n+                assert parent is None\n+                parent = cast(FSCollector, path_or_parent)\n+            elif isinstance(path_or_parent, Path):\n+                assert path is None\n+                path = path_or_parent\n+\n         path, fspath = _imply_path(path, fspath=fspath)\n-        name = path.name\n-        if parent is not None and parent.path != path:\n-            try:\n-                rel = path.relative_to(parent.path)\n-            except ValueError:\n-                pass\n-            else:\n-                name = str(rel)\n-            name = name.replace(os.sep, SEP)\n+        if name is None:\n+            name = path.name\n+            if parent is not None and parent.path != path:\n+                try:\n+                    rel = path.relative_to(parent.path)\n+                except ValueError:\n+                    pass\n+                else:\n+                    name = str(rel)\n+                name = name.replace(os.sep, SEP)\n         self.path = path\n \n-        session = session or parent.session\n+        if session is None:\n+            assert parent is not None\n+            session = parent.session\n \n         if nodeid is None:\n             try:\n@@ -570,7 +599,12 @@ def __init__(\n                 nodeid = nodeid.replace(os.sep, SEP)\n \n         super().__init__(\n-            name, parent, config, session, nodeid=nodeid, fspath=fspath, path=path\n+            name=name,\n+            parent=parent,\n+            config=config,\n+            session=session,\n+            nodeid=nodeid,\n+            path=path,\n         )\n \n     @classmethod\n@@ -610,6 +644,20 @@ class Item(Node):\n \n     nextitem = None\n \n+    def __init_subclass__(cls) -> None:\n+        problems = \", \".join(\n+            base.__name__ for base in cls.__bases__ if issubclass(base, Collector)\n+        )\n+        if problems:\n+            warnings.warn(\n+                f\"{cls.__name__} is an Item subclass and should not be a collector, \"\n+                f\"however its bases {problems} are collectors.\\n\"\n+                \"Please split the Collectors and the Item into separate node types.\\n\"\n+                \"Pytest Doc example: https://docs.pytest.org/en/latest/example/nonpython.html\\n\"\n+                \"example pull request on a plugin: https://github.com/asmeurer/pytest-flakes/pull/40/\",\n+                PytestWarning,\n+            )\n+\n     def __init__(\n         self,\n         name,\n@@ -617,8 +665,16 @@ def __init__(\n         config: Optional[Config] = None,\n         session: Optional[\"Session\"] = None,\n         nodeid: Optional[str] = None,\n+        **kw,\n     ) -> None:\n-        super().__init__(name, parent, config, session, nodeid=nodeid)\n+        super().__init__(\n+            name=name,\n+            parent=parent,\n+            config=config,\n+            session=session,\n+            nodeid=nodeid,\n+            **kw,\n+        )\n         self._report_sections: List[Tuple[str, str, str]] = []\n \n         #: A list of tuples (name, value) that holds user defined properties\n",
  "test_patch": "diff --git a/testing/test_nodes.py b/testing/test_nodes.py\n--- a/testing/test_nodes.py\n+++ b/testing/test_nodes.py\n@@ -5,6 +5,7 @@\n \n import pytest\n from _pytest import nodes\n+from _pytest.compat import legacy_path\n from _pytest.pytester import Pytester\n from _pytest.warning_types import PytestWarning\n \n@@ -39,6 +40,36 @@ def test_node_from_parent_disallowed_arguments() -> None:\n         nodes.Node.from_parent(None, config=None)  # type: ignore[arg-type]\n \n \n+def test_subclassing_both_item_and_collector_deprecated(\n+    request, tmp_path: Path\n+) -> None:\n+    \"\"\"\n+    Verifies we warn on diamond inheritance\n+    as well as correctly managing legacy inheritance ctors with missing args\n+    as found in plugins\n+    \"\"\"\n+\n+    with pytest.warns(\n+        PytestWarning,\n+        match=(\n+            \"(?m)SoWrong is an Item subclass and should not be a collector, however its bases File are collectors.\\n\"\n+            \"Please split the Collectors and the Item into separate node types.\\n.*\"\n+        ),\n+    ):\n+\n+        class SoWrong(nodes.File, nodes.Item):\n+            def __init__(self, fspath, parent):\n+                \"\"\"Legacy ctor with legacy call # don't wana see\"\"\"\n+                super().__init__(fspath, parent)\n+\n+    with pytest.warns(\n+        PytestWarning, match=\".*SoWrong.* not using a cooperative constructor.*\"\n+    ):\n+        SoWrong.from_parent(\n+            request.session, fspath=legacy_path(tmp_path / \"broken.txt\")\n+        )\n+\n+\n @pytest.mark.parametrize(\n     \"warn_type, msg\", [(DeprecationWarning, \"deprecated\"), (PytestWarning, \"pytest\")]\n )\n",
  "problem_statement": "Unexpected keyword argument 'path' from plugins\nWhile troubleshooting #8332, I stumbled onto a new error, a `TypeError` that occurs when using pytest-black against the current main HEAD (32ad70d), easily reproducible with an empty test file and pip-run:\r\n\r\n```\r\ndraft $ touch test_something.py\r\ndraft $ pip-run -q git+https://github.com/pytest-dev/pytest pytest-black -- -m pytest --black\r\n===================================================================================== test session starts =====================================================================================\r\nplatform darwin -- Python 3.9.2, pytest-6.3.0.dev252+g32ad70dea, py-1.10.0, pluggy-0.13.1\r\nrootdir: /Users/jaraco/draft\r\nplugins: black-0.3.12\r\ncollected 0 items / 1 error                                                                                                                                                                   \r\n\r\n=========================================================================================== ERRORS ============================================================================================\r\n________________________________________________________________________________ ERROR collecting test session ________________________________________________________________________________\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-j9xn8e36/pluggy/hooks.py:286: in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-j9xn8e36/pluggy/manager.py:93: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-j9xn8e36/pluggy/manager.py:84: in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-j9xn8e36/pytest_black.py:27: in pytest_collect_file\r\n    return BlackItem.from_parent(parent, fspath=path)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-j9xn8e36/_pytest/nodes.py:578: in from_parent\r\n    return super().from_parent(parent=parent, fspath=fspath, path=path, **kw)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-j9xn8e36/_pytest/nodes.py:226: in from_parent\r\n    return cls._create(parent=parent, **kw)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-j9xn8e36/_pytest/nodes.py:117: in _create\r\n    return super().__call__(*k, **kw)\r\nE   TypeError: __init__() got an unexpected keyword argument 'path'\r\n=================================================================================== short test summary info ===================================================================================\r\nERROR  - TypeError: __init__() got an unexpected keyword argument 'path'\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n====================================================================================== 1 error in 0.13s =======================================================================================\r\n```\r\n\r\nSame problem happens with pytest-checkdocs:\r\n\r\n```\r\ndraft $ touch setup.py\r\ndraft $ pip-run -q git+https://github.com/pytest-dev/pytest pytest-checkdocs -- -m pytest\r\n===================================================================================== test session starts =====================================================================================\r\nplatform darwin -- Python 3.9.2, pytest-6.3.0.dev252+g32ad70dea, py-1.10.0, pluggy-0.13.1\r\nrootdir: /Users/jaraco/draft\r\nplugins: checkdocs-2.4.0\r\ncollected 0 items / 1 error                                                                                                                                                                   \r\n\r\n=========================================================================================== ERRORS ============================================================================================\r\n________________________________________________________________________________ ERROR collecting test session ________________________________________________________________________________\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-5hc5__bb/pluggy/hooks.py:286: in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-5hc5__bb/pluggy/manager.py:93: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-5hc5__bb/pluggy/manager.py:84: in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-5hc5__bb/pytest_checkdocs/__init__.py:14: in pytest_collect_file\r\n    CheckdocsItem.from_parent(parent, fspath=path)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-5hc5__bb/pytest_checkdocs/__init__.py:52: in from_parent\r\n    return super().from_parent(parent, fspath=fspath)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-5hc5__bb/_pytest/nodes.py:578: in from_parent\r\n    return super().from_parent(parent=parent, fspath=fspath, path=path, **kw)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-5hc5__bb/_pytest/nodes.py:226: in from_parent\r\n    return cls._create(parent=parent, **kw)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pip-run-5hc5__bb/_pytest/nodes.py:117: in _create\r\n    return super().__call__(*k, **kw)\r\nE   TypeError: __init__() got an unexpected keyword argument 'path'\r\n=================================================================================== short test summary info ===================================================================================\r\nERROR  - TypeError: __init__() got an unexpected keyword argument 'path'\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n====================================================================================== 1 error in 0.20s =======================================================================================\r\n```\n",
  "hints_text": "Hey @jaraco, \r\n\r\nI'm making a quick guess as I don't have time to delve deep into the code, but perhaps `from_parent` in `pytest_checkdocs/__init__.py:52` needs to receive `**kw` and pass that on to `super()`?\r\n\r\ncc @RonnyPfannschmidt \nThat's about it, I wonder if i can make this one a warning for the next releases \n> Perhaps `from_parent` in `pytest_checkdocs/__init__.py:52` needs to receive `**kw` and pass that on to `super()`?\r\n\r\nYes, perhaps. And also pytest-black and pytest-mypy and pytest-flake8 likely and maybe others.\nSounds like I definitely should sort out the signature of the create call and issue a warning \nI tried applying the suggested workaround.\r\n\r\n```diff\r\ndiff --git a/pytest_checkdocs/__init__.py b/pytest_checkdocs/__init__.py\r\nindex 3162319..8469ebe 100644\r\n--- a/pytest_checkdocs/__init__.py\r\n+++ b/pytest_checkdocs/__init__.py\r\n@@ -38,18 +38,18 @@ class Description(str):\r\n \r\n \r\n class CheckdocsItem(pytest.Item, pytest.File):\r\n-    def __init__(self, fspath, parent):\r\n+    def __init__(self, fspath, parent, **kw):\r\n         # ugly hack to add support for fspath parameter\r\n         # Ref pytest-dev/pytest#6928\r\n-        super().__init__(fspath, parent)\r\n+        super().__init__(fspath, parent, **kw)\r\n \r\n     @classmethod\r\n-    def from_parent(cls, parent, fspath):\r\n+    def from_parent(cls, parent, fspath, **kw):\r\n         \"\"\"\r\n         Compatibility shim to support\r\n         \"\"\"\r\n         try:\r\n-            return super().from_parent(parent, fspath=fspath)\r\n+            return super().from_parent(parent, fspath=fspath, **kw)\r\n         except AttributeError:\r\n             # pytest < 5.4\r\n             return cls(fspath, parent)\r\n```\r\n\r\nBut that only pushed the error down:\r\n\r\n```\r\n________________________________________________________________________________ ERROR collecting test session ________________________________________________________________________________\r\n.tox/python/lib/python3.9/site-packages/pluggy/hooks.py:286: in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n.tox/python/lib/python3.9/site-packages/pluggy/manager.py:93: in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n.tox/python/lib/python3.9/site-packages/pluggy/manager.py:84: in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\npytest_checkdocs/__init__.py:14: in pytest_collect_file\r\n    CheckdocsItem.from_parent(parent, fspath=path)\r\npytest_checkdocs/__init__.py:52: in from_parent\r\n    return super().from_parent(parent, fspath=fspath, **kw)\r\n.tox/python/lib/python3.9/site-packages/_pytest/nodes.py:578: in from_parent\r\n    return super().from_parent(parent=parent, fspath=fspath, path=path, **kw)\r\n.tox/python/lib/python3.9/site-packages/_pytest/nodes.py:226: in from_parent\r\n    return cls._create(parent=parent, **kw)\r\n.tox/python/lib/python3.9/site-packages/_pytest/nodes.py:117: in _create\r\n    return super().__call__(*k, **kw)\r\npytest_checkdocs/__init__.py:44: in __init__\r\n    super().__init__(fspath, parent, **kw)\r\nE   TypeError: __init__() got an unexpected keyword argument 'path'\r\n```\r\n\r\n(I tried it with and without adding `**kw` to `__init__`).\r\n\r\nI don't understand what these hacks are trying to accomplish, so I'm out of my depth. If someone more familiar with the changes to the interfaces could suggest a fix, I'd be happy to test it and incorporate it. I'm also happy to drop support for older pytest versions (prior to 5.4) if that helps.\n@jaraco problem is that the hacks to make the switch from fspath to just pathlib paths where incomplete, and the backward compatibility handling is not yet aware of non keyword parameters\n\nIf you pass everything as keywords it should work,\n\nI should however fix that way of invocation\n@jaraco the correct fix  is to stop merging items and files, currently python has absolutely no sane support for that inheritance structure, it worked by sheer accident, we should actually just deprecate collecting items and collectors together \r\n\r\ni`m going to add a fitting deprecation warning",
  "created_at": "2021-03-14T22:03:00Z",
  "version": "6.3",
  "FAIL_TO_PASS": "[\"testing/test_nodes.py::test_subclassing_both_item_and_collector_deprecated\"]",
  "PASS_TO_PASS": "[\"testing/test_nodes.py::test_iterparentnodeids[-expected0]\", \"testing/test_nodes.py::test_iterparentnodeids[a-expected1]\", \"testing/test_nodes.py::test_iterparentnodeids[aa/b-expected2]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b/c-expected3]\", \"testing/test_nodes.py::test_iterparentnodeids[a/bbb/c::D-expected4]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b/c::D::eee-expected5]\", \"testing/test_nodes.py::test_iterparentnodeids[::xx-expected6]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b/c::D/d::e-expected7]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b::D:e:f::g-expected8]\", \"testing/test_nodes.py::test_iterparentnodeids[a/b::c/d::e[/test]-expected9]\", \"testing/test_nodes.py::test_node_from_parent_disallowed_arguments\", \"testing/test_nodes.py::test__check_initialpaths_for_relpath\", \"testing/test_nodes.py::test_node_warn_is_no_longer_only_pytest_warnings[DeprecationWarning-deprecated]\", \"testing/test_nodes.py::test_node_warn_is_no_longer_only_pytest_warnings[PytestWarning-pytest]\", \"testing/test_nodes.py::test_node_warning_enforces_warning_types\", \"testing/test_nodes.py::test_failure_with_changed_cwd\"]",
  "environment_setup_commit": "634312b14a45db8d60d72016e01294284e3a18d4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.943084",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}