{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-21806",
  "base_commit": "5824415f287a1842e47b75241ca4929efd0fbc7b",
  "patch": "diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py\n--- a/sympy/algebras/quaternion.py\n+++ b/sympy/algebras/quaternion.py\n@@ -8,6 +8,7 @@\n from sympy import integrate\n from sympy import Matrix\n from sympy import sympify\n+from sympy.core.evalf import prec_to_dps\n from sympy.core.expr import Expr\n \n \n@@ -490,6 +491,31 @@ def _ln(self):\n \n         return Quaternion(a, b, c, d)\n \n+    def _eval_evalf(self, prec):\n+        \"\"\"Returns the floating point approximations (decimal numbers) of the quaternion.\n+\n+        Returns\n+        =======\n+\n+        Quaternion\n+            Floating point approximations of quaternion(self)\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy.algebras.quaternion import Quaternion\n+        >>> from sympy import sqrt\n+        >>> q = Quaternion(1/sqrt(1), 1/sqrt(2), 1/sqrt(3), 1/sqrt(4))\n+        >>> q.evalf()\n+        1.00000000000000\n+        + 0.707106781186547*i\n+        + 0.577350269189626*j\n+        + 0.500000000000000*k\n+\n+        \"\"\"\n+\n+        return Quaternion(*[arg.evalf(n=prec_to_dps(prec)) for arg in self.args])\n+\n     def pow_cos_sin(self, p):\n         \"\"\"Computes the pth power in the cos-sin form.\n \n",
  "test_patch": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -57,6 +57,11 @@ def test_quaternion_complex_real_addition():\n     assert q1 - q1 == q0\n \n \n+def test_quaternion_evalf():\n+    assert Quaternion(sqrt(2), 0, 0, sqrt(3)).evalf() == Quaternion(sqrt(2).evalf(), 0, 0, sqrt(3).evalf())\n+    assert Quaternion(1/sqrt(2), 0, 0, 1/sqrt(2)).evalf() == Quaternion((1/sqrt(2)).evalf(), 0, 0, (1/sqrt(2)).evalf())\n+\n+\n def test_quaternion_functions():\n     q = Quaternion(w, x, y, z)\n     q1 = Quaternion(1, 2, 3, 4)\n",
  "problem_statement": "Quaternion class has no overridden evalf method\n`Quaternion` class has no overridden `evalf` method.\r\n\r\n```python\r\nimport sympy as sp\r\nq = sp.Quaternion(1/sp.sqrt(2), 0, 0, 1/sp.sqrt(2))\r\nq.evalf()  # does not work\r\n# output: sqrt(2)/2 + 0*i + 0*j + sqrt(2)/2*k\r\n```\n",
  "hints_text": "",
  "created_at": "2021-07-31T14:33:59Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_quaternion_evalf\"]",
  "PASS_TO_PASS": "[\"test_quaternion_construction\", \"test_quaternion_complex_real_addition\", \"test_quaternion_functions\", \"test_quaternion_conversions\", \"test_quaternion_rotation_iss1593\", \"test_quaternion_multiplication\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.146550",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}