{
  "repo": "django/django",
  "instance_id": "django__django-13915",
  "base_commit": "9c6ba876928fd20194ac3238dc06aeae66d7bd50",
  "patch": "diff --git a/django/core/management/commands/compilemessages.py b/django/core/management/commands/compilemessages.py\n--- a/django/core/management/commands/compilemessages.py\n+++ b/django/core/management/commands/compilemessages.py\n@@ -154,9 +154,7 @@ def compile_messages(self, locations):\n                     self.has_errors = True\n                     return\n \n-                # PY37: Remove str() when dropping support for PY37.\n-                # https://bugs.python.org/issue31961\n-                args = [self.program, *self.program_options, '-o', str(mo_path), str(po_path)]\n+                args = [self.program, *self.program_options, '-o', mo_path, po_path]\n                 futures.append(executor.submit(popen_wrapper, args))\n \n             for future in concurrent.futures.as_completed(futures):\ndiff --git a/django/db/backends/postgresql/base.py b/django/db/backends/postgresql/base.py\n--- a/django/db/backends/postgresql/base.py\n+++ b/django/db/backends/postgresql/base.py\n@@ -261,12 +261,7 @@ def chunked_cursor(self):\n         # For now, it's here so that every use of \"threading\" is\n         # also async-compatible.\n         try:\n-            if hasattr(asyncio, 'current_task'):\n-                # Python 3.7 and up\n-                current_task = asyncio.current_task()\n-            else:\n-                # Python 3.6\n-                current_task = asyncio.Task.current_task()\n+            current_task = asyncio.current_task()\n         except RuntimeError:\n             current_task = None\n         # Current task can be none even if the current_task call didn't error\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -25,7 +25,6 @@\n from django.utils.dateparse import parse_datetime, parse_time\n from django.utils.duration import duration_microseconds\n from django.utils.regex_helper import _lazy_re_compile\n-from django.utils.version import PY38\n \n from .client import DatabaseClient\n from .creation import DatabaseCreation\n@@ -180,9 +179,7 @@ def get_connection_params(self):\n                 \"settings.DATABASES is improperly configured. \"\n                 \"Please supply the NAME value.\")\n         kwargs = {\n-            # TODO: Remove str() when dropping support for PY36.\n-            # https://bugs.python.org/issue33496\n-            'database': str(settings_dict['NAME']),\n+            'database': settings_dict['NAME'],\n             'detect_types': Database.PARSE_DECLTYPES | Database.PARSE_COLNAMES,\n             **settings_dict['OPTIONS'],\n         }\n@@ -206,13 +203,10 @@ def get_connection_params(self):\n     @async_unsafe\n     def get_new_connection(self, conn_params):\n         conn = Database.connect(**conn_params)\n-        if PY38:\n-            create_deterministic_function = functools.partial(\n-                conn.create_function,\n-                deterministic=True,\n-            )\n-        else:\n-            create_deterministic_function = conn.create_function\n+        create_deterministic_function = functools.partial(\n+            conn.create_function,\n+            deterministic=True,\n+        )\n         create_deterministic_function('django_date_extract', 2, _sqlite_datetime_extract)\n         create_deterministic_function('django_date_trunc', 4, _sqlite_date_trunc)\n         create_deterministic_function('django_datetime_cast_date', 3, _sqlite_datetime_cast_date)\ndiff --git a/django/db/backends/sqlite3/client.py b/django/db/backends/sqlite3/client.py\n--- a/django/db/backends/sqlite3/client.py\n+++ b/django/db/backends/sqlite3/client.py\n@@ -6,11 +6,5 @@ class DatabaseClient(BaseDatabaseClient):\n \n     @classmethod\n     def settings_to_cmd_args_env(cls, settings_dict, parameters):\n-        args = [\n-            cls.executable_name,\n-            # TODO: Remove str() when dropping support for PY37. args\n-            # parameter accepts path-like objects on Windows since Python 3.8.\n-            str(settings_dict['NAME']),\n-            *parameters,\n-        ]\n+        args = [cls.executable_name, settings_dict['NAME'], *parameters]\n         return args, None\ndiff --git a/django/db/migrations/questioner.py b/django/db/migrations/questioner.py\n--- a/django/db/migrations/questioner.py\n+++ b/django/db/migrations/questioner.py\n@@ -44,7 +44,6 @@ def ask_initial(self, app_label):\n         except ImportError:\n             return self.defaults.get(\"ask_initial\", False)\n         else:\n-            # getattr() needed on PY36 and older (replace with attribute access).\n             if getattr(migrations_module, \"__file__\", None):\n                 filenames = os.listdir(os.path.dirname(migrations_module.__file__))\n             elif hasattr(migrations_module, \"__path__\"):\ndiff --git a/django/http/cookie.py b/django/http/cookie.py\n--- a/django/http/cookie.py\n+++ b/django/http/cookie.py\n@@ -3,9 +3,6 @@\n # For backwards compatibility in Django 2.1.\n SimpleCookie = cookies.SimpleCookie\n \n-# Add support for the SameSite attribute (obsolete when PY37 is unsupported).\n-cookies.Morsel._reserved.setdefault('samesite', 'SameSite')\n-\n \n def parse_cookie(cookie):\n     \"\"\"\ndiff --git a/django/http/request.py b/django/http/request.py\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -18,19 +18,10 @@\n from django.utils.encoding import escape_uri_path, iri_to_uri\n from django.utils.functional import cached_property\n from django.utils.http import is_same_domain\n-from django.utils.inspect import func_supports_parameter\n from django.utils.regex_helper import _lazy_re_compile\n \n from .multipartparser import parse_header\n \n-# TODO: Remove when dropping support for PY37. inspect.signature() is used to\n-# detect whether the max_num_fields argument is available as this security fix\n-# was backported to Python 3.6.8 and 3.7.2, and may also have been applied by\n-# downstream package maintainers to other versions in their repositories.\n-if not func_supports_parameter(parse_qsl, 'max_num_fields'):\n-    from django.utils.http import parse_qsl\n-\n-\n RAISE_ERROR = object()\n host_validation_re = _lazy_re_compile(r\"^([a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9\\.:]+\\])(:\\d+)?$\")\n \ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -231,15 +231,11 @@ def get_child_arguments():\n         exe_entrypoint = py_script.with_suffix('.exe')\n         if exe_entrypoint.exists():\n             # Should be executed directly, ignoring sys.executable.\n-            # TODO: Remove str() when dropping support for PY37.\n-            # args parameter accepts path-like on Windows from Python 3.8.\n-            return [str(exe_entrypoint), *sys.argv[1:]]\n+            return [exe_entrypoint, *sys.argv[1:]]\n         script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)\n         if script_entrypoint.exists():\n             # Should be executed as usual.\n-            # TODO: Remove str() when dropping support for PY37.\n-            # args parameter accepts path-like on Windows from Python 3.8.\n-            return [*args, str(script_entrypoint), *sys.argv[1:]]\n+            return [*args, script_entrypoint, *sys.argv[1:]]\n         raise RuntimeError('Script %s does not exist.' % py_script)\n     else:\n         args += sys.argv\ndiff --git a/django/utils/http.py b/django/utils/http.py\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -7,7 +7,7 @@\n from email.utils import formatdate\n from urllib.parse import (\n     ParseResult, SplitResult, _coerce_args, _splitnetloc, _splitparams,\n-    scheme_chars, unquote, urlencode as original_urlencode, uses_params,\n+    scheme_chars, urlencode as original_urlencode, uses_params,\n )\n \n from django.utils.datastructures import MultiValueDict\n@@ -343,78 +343,6 @@ def _url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=False):\n             (not scheme or scheme in valid_schemes))\n \n \n-# TODO: Remove when dropping support for PY37.\n-def parse_qsl(\n-    qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8',\n-    errors='replace', max_num_fields=None,\n-):\n-    \"\"\"\n-    Return a list of key/value tuples parsed from query string.\n-\n-    Backport of urllib.parse.parse_qsl() from Python 3.8.\n-    Copyright (C) 2020 Python Software Foundation (see LICENSE.python).\n-\n-    ----\n-\n-    Parse a query given as a string argument.\n-\n-    Arguments:\n-\n-    qs: percent-encoded query string to be parsed\n-\n-    keep_blank_values: flag indicating whether blank values in\n-        percent-encoded queries should be treated as blank strings. A\n-        true value indicates that blanks should be retained as blank\n-        strings. The default false value indicates that blank values\n-        are to be ignored and treated as if they were  not included.\n-\n-    strict_parsing: flag indicating what to do with parsing errors. If false\n-        (the default), errors are silently ignored. If true, errors raise a\n-        ValueError exception.\n-\n-    encoding and errors: specify how to decode percent-encoded sequences\n-        into Unicode characters, as accepted by the bytes.decode() method.\n-\n-    max_num_fields: int. If set, then throws a ValueError if there are more\n-        than n fields read by parse_qsl().\n-\n-    Returns a list, as G-d intended.\n-    \"\"\"\n-    qs, _coerce_result = _coerce_args(qs)\n-\n-    # If max_num_fields is defined then check that the number of fields is less\n-    # than max_num_fields. This prevents a memory exhaustion DOS attack via\n-    # post bodies with many fields.\n-    if max_num_fields is not None:\n-        num_fields = 1 + qs.count('&') + qs.count(';')\n-        if max_num_fields < num_fields:\n-            raise ValueError('Max number of fields exceeded')\n-\n-    pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]\n-    r = []\n-    for name_value in pairs:\n-        if not name_value and not strict_parsing:\n-            continue\n-        nv = name_value.split('=', 1)\n-        if len(nv) != 2:\n-            if strict_parsing:\n-                raise ValueError(\"bad query field: %r\" % (name_value,))\n-            # Handle case of a control-name with no equal sign.\n-            if keep_blank_values:\n-                nv.append('')\n-            else:\n-                continue\n-        if len(nv[1]) or keep_blank_values:\n-            name = nv[0].replace('+', ' ')\n-            name = unquote(name, encoding=encoding, errors=errors)\n-            name = _coerce_result(name)\n-            value = nv[1].replace('+', ' ')\n-            value = unquote(value, encoding=encoding, errors=errors)\n-            value = _coerce_result(value)\n-            r.append((name, value))\n-    return r\n-\n-\n def escape_leading_slashes(url):\n     \"\"\"\n     If redirecting to an absolute path (two leading slashes), a slash must be\ndiff --git a/django/utils/module_loading.py b/django/utils/module_loading.py\n--- a/django/utils/module_loading.py\n+++ b/django/utils/module_loading.py\n@@ -72,10 +72,9 @@ def module_has_submodule(package, module_name):\n     full_module_name = package_name + '.' + module_name\n     try:\n         return importlib_find(full_module_name, package_path) is not None\n-    except (ModuleNotFoundError, AttributeError):\n+    except ModuleNotFoundError:\n         # When module_name is an invalid dotted path, Python raises\n-        # ModuleNotFoundError. AttributeError is raised on PY36 (fixed in PY37)\n-        # if the penultimate part of the path is not a package.\n+        # ModuleNotFoundError.\n         return False\n \n \ndiff --git a/django/utils/version.py b/django/utils/version.py\n--- a/django/utils/version.py\n+++ b/django/utils/version.py\n@@ -9,8 +9,6 @@\n # or later\". So that third-party apps can use these values, each constant\n # should remain as long as the oldest supported Django version supports that\n # Python version.\n-PY36 = sys.version_info >= (3, 6)\n-PY37 = sys.version_info >= (3, 7)\n PY38 = sys.version_info >= (3, 8)\n PY39 = sys.version_info >= (3, 9)\n \ndiff --git a/setup.py b/setup.py\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n from setuptools import setup\n \n CURRENT_PYTHON = sys.version_info[:2]\n-REQUIRED_PYTHON = (3, 6)\n+REQUIRED_PYTHON = (3, 8)\n \n # This check and everything above must remain compatible with Python 2.7.\n if CURRENT_PYTHON < REQUIRED_PYTHON:\n",
  "test_patch": "diff --git a/django/test/runner.py b/django/test/runner.py\n--- a/django/test/runner.py\n+++ b/django/test/runner.py\n@@ -21,7 +21,6 @@\n     teardown_test_environment,\n )\n from django.utils.datastructures import OrderedSet\n-from django.utils.version import PY37\n \n try:\n     import ipdb as pdb\n@@ -240,8 +239,8 @@ def addFailure(self, test, err):\n         self.stop_if_failfast()\n \n     def addSubTest(self, test, subtest, err):\n-        # Follow Python 3.5's implementation of unittest.TestResult.addSubTest()\n-        # by not doing anything when a subtest is successful.\n+        # Follow Python's implementation of unittest.TestResult.addSubTest() by\n+        # not doing anything when a subtest is successful.\n         if err is not None:\n             # Call check_picklable() before check_subtest_picklable() since\n             # check_picklable() performs the tblib check.\n@@ -540,15 +539,14 @@ def add_arguments(cls, parser):\n                 'Output timings, including database set up and total run time.'\n             ),\n         )\n-        if PY37:\n-            parser.add_argument(\n-                '-k', action='append', dest='test_name_patterns',\n-                help=(\n-                    'Only run test methods and classes that match the pattern '\n-                    'or substring. Can be used multiple times. Same as '\n-                    'unittest -k option.'\n-                ),\n-            )\n+        parser.add_argument(\n+            '-k', action='append', dest='test_name_patterns',\n+            help=(\n+                'Only run test methods and classes that match the pattern '\n+                'or substring. Can be used multiple times. Same as '\n+                'unittest -k option.'\n+            ),\n+        )\n \n     def setup_test_environment(self, **kwargs):\n         setup_test_environment(debug=self.debug_mode)\ndiff --git a/tests/dbshell/test_sqlite.py b/tests/dbshell/test_sqlite.py\n--- a/tests/dbshell/test_sqlite.py\n+++ b/tests/dbshell/test_sqlite.py\n@@ -13,7 +13,7 @@ def settings_to_cmd_args_env(self, settings_dict, parameters=None):\n     def test_path_name(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({'NAME': Path('test.db.sqlite3')}),\n-            (['sqlite3', 'test.db.sqlite3'], None),\n+            (['sqlite3', Path('test.db.sqlite3')], None),\n         )\n \n     def test_parameters(self):\ndiff --git a/tests/handlers/tests.py b/tests/handlers/tests.py\n--- a/tests/handlers/tests.py\n+++ b/tests/handlers/tests.py\n@@ -5,7 +5,6 @@\n from django.test import (\n     RequestFactory, SimpleTestCase, TransactionTestCase, override_settings,\n )\n-from django.utils.version import PY37\n \n \n class HandlerTests(SimpleTestCase):\n@@ -183,7 +182,7 @@ def test_bad_request_in_view_returns_400(self):\n     def test_invalid_urls(self):\n         response = self.client.get('~%A9helloworld')\n         self.assertEqual(response.status_code, 404)\n-        self.assertEqual(response.context['request_path'], '/~%25A9helloworld' if PY37 else '/%7E%25A9helloworld')\n+        self.assertEqual(response.context['request_path'], '/~%25A9helloworld')\n \n         response = self.client.get('d%aao%aaw%aan%aal%aao%aaa%aad%aa/')\n         self.assertEqual(response.context['request_path'], '/d%25AAo%25AAw%25AAn%25AAl%25AAo%25AAa%25AAd%25AA')\ndiff --git a/tests/managers_regress/tests.py b/tests/managers_regress/tests.py\n--- a/tests/managers_regress/tests.py\n+++ b/tests/managers_regress/tests.py\n@@ -1,10 +1,7 @@\n-from unittest import skipUnless\n-\n from django.db import models\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.test.utils import isolate_apps\n-from django.utils.version import PY37\n \n from .models import (\n     AbstractBase1, AbstractBase2, AbstractBase3, Child1, Child2, Child3,\n@@ -287,6 +284,5 @@ class TestModel(AbstractModel):\n         self.assertEqual(TestModel._meta.managers, (TestModel.custom_manager,))\n         self.assertEqual(TestModel._meta.managers_map, {'custom_manager': TestModel.custom_manager})\n \n-    @skipUnless(PY37, '__class_getitem__() was added in Python 3.7')\n     def test_manager_class_getitem(self):\n         self.assertIs(models.Manager[Child1], models.Manager)\ndiff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -1,11 +1,9 @@\n from operator import attrgetter\n-from unittest import skipUnless\n \n from django.core.exceptions import FieldError, ValidationError\n from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n from django.test.utils import CaptureQueriesContext, isolate_apps\n-from django.utils.version import PY37\n \n from .models import (\n     Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n@@ -219,7 +217,6 @@ def test_inherited_ordering_pk_desc(self):\n         self.assertSequenceEqual(qs, [p2, p1])\n         self.assertIn(expected_order_by_sql, str(qs.query))\n \n-    @skipUnless(PY37, '__class_getitem__() was added in Python 3.7')\n     def test_queryset_class_getitem(self):\n         self.assertIs(models.QuerySet[Post], models.QuerySet)\n         self.assertIs(models.QuerySet[Post, Post], models.QuerySet)\ndiff --git a/tests/runtests.py b/tests/runtests.py\n--- a/tests/runtests.py\n+++ b/tests/runtests.py\n@@ -28,7 +28,6 @@\n         RemovedInDjango41Warning, RemovedInDjango50Warning,\n     )\n     from django.utils.log import DEFAULT_LOGGING\n-    from django.utils.version import PY37\n \n try:\n     import MySQLdb\n@@ -521,14 +520,13 @@ def paired_tests(paired_test, options, test_labels, parallel, start_at, start_af\n         '--timing', action='store_true',\n         help='Output timings, including database set up and total run time.',\n     )\n-    if PY37:\n-        parser.add_argument(\n-            '-k', dest='test_name_patterns', action='append',\n-            help=(\n-                'Only run test methods and classes matching test name pattern. '\n-                'Same as unittest -k option. Can be used multiple times.'\n-            ),\n-        )\n+    parser.add_argument(\n+        '-k', dest='test_name_patterns', action='append',\n+        help=(\n+            'Only run test methods and classes matching test name pattern. '\n+            'Same as unittest -k option. Can be used multiple times.'\n+        ),\n+    )\n \n     options = parser.parse_args()\n \ndiff --git a/tests/test_runner/test_discover_runner.py b/tests/test_runner/test_discover_runner.py\n--- a/tests/test_runner/test_discover_runner.py\n+++ b/tests/test_runner/test_discover_runner.py\n@@ -1,9 +1,7 @@\n import os\n from argparse import ArgumentParser\n from contextlib import contextmanager\n-from unittest import (\n-    TestSuite, TextTestRunner, defaultTestLoader, mock, skipUnless,\n-)\n+from unittest import TestSuite, TextTestRunner, defaultTestLoader, mock\n \n from django.db import connections\n from django.test import SimpleTestCase\n@@ -11,7 +9,6 @@\n from django.test.utils import (\n     NullTimeKeeper, TimeKeeper, captured_stderr, captured_stdout,\n )\n-from django.utils.version import PY37\n \n \n @contextmanager\n@@ -83,7 +80,6 @@ def test_pattern(self):\n \n         self.assertEqual(count, 1)\n \n-    @skipUnless(PY37, 'unittest -k option requires Python 3.7 and later')\n     def test_name_patterns(self):\n         all_test_1 = [\n             'DjangoCase1.test_1', 'DjangoCase2.test_1',\ndiff --git a/tests/test_runner/test_parallel.py b/tests/test_runner/test_parallel.py\n--- a/tests/test_runner/test_parallel.py\n+++ b/tests/test_runner/test_parallel.py\n@@ -2,7 +2,6 @@\n \n from django.test import SimpleTestCase\n from django.test.runner import RemoteTestResult\n-from django.utils.version import PY37\n \n try:\n     import tblib\n@@ -80,8 +79,7 @@ def test_add_failing_subtests(self):\n         event = events[1]\n         self.assertEqual(event[0], 'addSubTest')\n         self.assertEqual(str(event[2]), 'dummy_test (test_runner.test_parallel.SampleFailingSubtest) (index=0)')\n-        trailing_comma = '' if PY37 else ','\n-        self.assertEqual(repr(event[3][1]), \"AssertionError('0 != 1'%s)\" % trailing_comma)\n+        self.assertEqual(repr(event[3][1]), \"AssertionError('0 != 1')\")\n \n         event = events[2]\n-        self.assertEqual(repr(event[3][1]), \"AssertionError('2 != 1'%s)\" % trailing_comma)\n+        self.assertEqual(repr(event[3][1]), \"AssertionError('2 != 1')\")\ndiff --git a/tests/user_commands/management/commands/subparser_dest.py b/tests/user_commands/management/commands/subparser_dest.py\n--- a/tests/user_commands/management/commands/subparser_dest.py\n+++ b/tests/user_commands/management/commands/subparser_dest.py\n@@ -1,11 +1,9 @@\n from django.core.management.base import BaseCommand\n-from django.utils.version import PY37\n \n \n class Command(BaseCommand):\n     def add_arguments(self, parser):\n-        kwargs = {'required': True} if PY37 else {}\n-        subparsers = parser.add_subparsers(dest='subcommand', **kwargs)\n+        subparsers = parser.add_subparsers(dest='subcommand', required=True)\n         parser_foo = subparsers.add_parser('foo')\n         parser_foo.add_argument('--bar')\n \ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -17,7 +17,6 @@\n from django.test.utils import captured_stderr, extend_sys_path, ignore_warnings\n from django.utils import translation\n from django.utils.deprecation import RemovedInDjango41Warning\n-from django.utils.version import PY37\n \n from .management.commands import dance\n \n@@ -337,20 +336,9 @@ def test_subparser_invalid_option(self):\n         msg = \"Error: invalid choice: 'test' (choose from 'foo')\"\n         with self.assertRaisesMessage(CommandError, msg):\n             management.call_command('subparser', 'test', 12)\n-        if PY37:\n-            # \"required\" option requires Python 3.7 and later.\n-            msg = 'Error: the following arguments are required: subcommand'\n-            with self.assertRaisesMessage(CommandError, msg):\n-                management.call_command('subparser_dest', subcommand='foo', bar=12)\n-        else:\n-            msg = (\n-                'Unknown option(s) for subparser_dest command: subcommand. '\n-                'Valid options are: bar, force_color, help, no_color, '\n-                'pythonpath, settings, skip_checks, stderr, stdout, '\n-                'traceback, verbosity, version.'\n-            )\n-            with self.assertRaisesMessage(TypeError, msg):\n-                management.call_command('subparser_dest', subcommand='foo', bar=12)\n+        msg = 'Error: the following arguments are required: subcommand'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,10 +195,10 @@ def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n             exe_path.touch()\n-            with mock.patch('sys.argv', [str(exe_path.with_suffix('')), 'runserver']):\n+            with mock.patch('sys.argv', [exe_path.with_suffix(''), 'runserver']):\n                 self.assertEqual(\n                     autoreload.get_child_arguments(),\n-                    [str(exe_path), 'runserver']\n+                    [exe_path, 'runserver']\n                 )\n \n     @mock.patch('sys.warnoptions', [])\n@@ -206,10 +206,10 @@ def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n             script_path.touch()\n-            with mock.patch('sys.argv', [str(script_path.with_name('django-admin')), 'runserver']):\n+            with mock.patch('sys.argv', [script_path.with_name('django-admin'), 'runserver']):\n                 self.assertEqual(\n                     autoreload.get_child_arguments(),\n-                    [sys.executable, str(script_path), 'runserver']\n+                    [sys.executable, script_path, 'runserver']\n                 )\n \n     @mock.patch('sys.argv', ['does-not-exist', 'runserver'])\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -7,7 +7,7 @@\n from django.utils.datastructures import MultiValueDict\n from django.utils.http import (\n     base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n-    is_same_domain, parse_etags, parse_http_date, parse_qsl, quote_etag,\n+    is_same_domain, parse_etags, parse_http_date, quote_etag,\n     url_has_allowed_host_and_scheme, urlencode, urlsafe_base64_decode,\n     urlsafe_base64_encode,\n )\n@@ -331,68 +331,3 @@ def test(self):\n         for url, expected in tests:\n             with self.subTest(url=url):\n                 self.assertEqual(escape_leading_slashes(url), expected)\n-\n-\n-# TODO: Remove when dropping support for PY37. Backport of unit tests for\n-# urllib.parse.parse_qsl() from Python 3.8. Copyright (C) 2020 Python Software\n-# Foundation (see LICENSE.python).\n-class ParseQSLBackportTests(unittest.TestCase):\n-    def test_parse_qsl(self):\n-        tests = [\n-            ('', []),\n-            ('&', []),\n-            ('&&', []),\n-            ('=', [('', '')]),\n-            ('=a', [('', 'a')]),\n-            ('a', [('a', '')]),\n-            ('a=', [('a', '')]),\n-            ('&a=b', [('a', 'b')]),\n-            ('a=a+b&b=b+c', [('a', 'a b'), ('b', 'b c')]),\n-            ('a=1&a=2', [('a', '1'), ('a', '2')]),\n-            (b'', []),\n-            (b'&', []),\n-            (b'&&', []),\n-            (b'=', [(b'', b'')]),\n-            (b'=a', [(b'', b'a')]),\n-            (b'a', [(b'a', b'')]),\n-            (b'a=', [(b'a', b'')]),\n-            (b'&a=b', [(b'a', b'b')]),\n-            (b'a=a+b&b=b+c', [(b'a', b'a b'), (b'b', b'b c')]),\n-            (b'a=1&a=2', [(b'a', b'1'), (b'a', b'2')]),\n-            (';', []),\n-            (';;', []),\n-            (';a=b', [('a', 'b')]),\n-            ('a=a+b;b=b+c', [('a', 'a b'), ('b', 'b c')]),\n-            ('a=1;a=2', [('a', '1'), ('a', '2')]),\n-            (b';', []),\n-            (b';;', []),\n-            (b';a=b', [(b'a', b'b')]),\n-            (b'a=a+b;b=b+c', [(b'a', b'a b'), (b'b', b'b c')]),\n-            (b'a=1;a=2', [(b'a', b'1'), (b'a', b'2')]),\n-        ]\n-        for original, expected in tests:\n-            with self.subTest(original):\n-                result = parse_qsl(original, keep_blank_values=True)\n-                self.assertEqual(result, expected, 'Error parsing %r' % original)\n-                expect_without_blanks = [v for v in expected if len(v[1])]\n-                result = parse_qsl(original, keep_blank_values=False)\n-                self.assertEqual(result, expect_without_blanks, 'Error parsing %r' % original)\n-\n-    def test_parse_qsl_encoding(self):\n-        result = parse_qsl('key=\\u0141%E9', encoding='latin-1')\n-        self.assertEqual(result, [('key', '\\u0141\\xE9')])\n-        result = parse_qsl('key=\\u0141%C3%A9', encoding='utf-8')\n-        self.assertEqual(result, [('key', '\\u0141\\xE9')])\n-        result = parse_qsl('key=\\u0141%C3%A9', encoding='ascii')\n-        self.assertEqual(result, [('key', '\\u0141\\ufffd\\ufffd')])\n-        result = parse_qsl('key=\\u0141%E9-', encoding='ascii')\n-        self.assertEqual(result, [('key', '\\u0141\\ufffd-')])\n-        result = parse_qsl('key=\\u0141%E9-', encoding='ascii', errors='ignore')\n-        self.assertEqual(result, [('key', '\\u0141-')])\n-\n-    def test_parse_qsl_max_num_fields(self):\n-        with self.assertRaises(ValueError):\n-            parse_qsl('&'.join(['a=a'] * 11), max_num_fields=10)\n-        with self.assertRaises(ValueError):\n-            parse_qsl(';'.join(['a=a'] * 11), max_num_fields=10)\n-        parse_qsl('&'.join(['a=a'] * 10), max_num_fields=10)\n",
  "problem_statement": "Drop support for Python 3.6 & 3.7.\nDescription\n\t\nDjango 3.2 LTS, supported until April 2024, is the last version to support:\nPython 3.6 (end of life: December 2021)\nPython 3.7 (end of life: June 2023)\nSee ​our policy about Python version support and discussions regarding the Python version support policy:\n​https://groups.google.com/forum/#!topic/django-developers/YDJwI7uvgxU/discussion\n​https://groups.google.com/forum/#!msg/django-developers/ezUpskYAcyo/discussion\n",
  "hints_text": "With my usual conservative hat on, I'd plead to not drop Python 3.7 support too soon. It's still widely used in stable systems (namely Debian) and asking contributors running those systems to install a Python version \"by hand\" to contribute to Django master branch is not friendly at all.\nReplying to Claude Paroz: With my usual conservative hat on, I'd plead to not drop Python 3.7 support too soon. It's still widely used in stable systems (namely Debian) and asking contributors running those systems to install a Python version \"by hand\" to contribute to Django master branch is not friendly at all. I understand your concerns, but there's not consensus to change the policy on the mailing list. Also, if not in Django 4.0 then we will need to support Python 3.7 to Django 4.2 LTS (end of life April 2026), so 2 more years, and almost 3 years after the last Python 3.7 release.\nI know my practice (using latest released Django on as-much-stable-as-possible systems) is not on the majority side, so you'll never find a consensus to change the policy.\nIn 88e972e4: Fixed #32265, Refs #32355 -- Removed unnecessary ServerHandler.handle_error(). ConnectionAbortedError, BrokenPipeError, ConnectionResetError raised from SocketServer.BaseServer.finish_request() are already suppressed by wsgiref.handlers.BaseHandler.run() in Python 3.7+, see ​https://github.com/python/cpython/commit/47ffc1a9f6fab1c17cdcc325d4af066317369ed7",
  "created_at": "2021-01-19T08:03:54Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_path_name (dbshell.test_sqlite.SqliteDbshellCommandTestCase)\", \"test_entrypoint_fallback (utils_tests.test_autoreload.TestChildArguments)\", \"test_exe_fallback (utils_tests.test_autoreload.TestChildArguments)\"]",
  "PASS_TO_PASS": "[\"Passing subtests work.\", \"test_no_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_custom_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_raises_exception_with_context (utils_tests.test_autoreload.TestRaiseLastException)\", \"test_watchman_available (utils_tests.test_autoreload.GetReloaderTests)\", \"test_watchman_unavailable (utils_tests.test_autoreload.GetReloaderTests)\", \"test_parameters (dbshell.test_sqlite.SqliteDbshellCommandTestCase)\", \"test_get_script_name (handlers.tests.ScriptNameTests)\", \"WSGI squashes multiple successive slashes in PATH_INFO, get_script_name\", \"test_http_date (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_asctime (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_rfc1123 (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_rfc850 (utils_tests.test_http.HttpDateProcessingTests)\", \"test_parsing_year_less_than_70 (utils_tests.test_http.HttpDateProcessingTests)\", \"test_roundtrip (utils_tests.test_http.URLSafeBase64Tests)\", \"test (utils_tests.test_http.EscapeLeadingSlashesTests)\", \"test_common_roots (utils_tests.test_autoreload.TestCommonRoots)\", \"test_bad (utils_tests.test_http.IsSameDomainTests)\", \"test_good (utils_tests.test_http.IsSameDomainTests)\", \"test_is_django_module (utils_tests.test_autoreload.TestUtilities)\", \"test_is_django_path (utils_tests.test_autoreload.TestUtilities)\", \"test_input_too_large (utils_tests.test_http.Base36IntTests)\", \"test_invalid_literal (utils_tests.test_http.Base36IntTests)\", \"test_negative_input (utils_tests.test_http.Base36IntTests)\", \"test_roundtrip (utils_tests.test_http.Base36IntTests)\", \"test_to_base36_errors (utils_tests.test_http.Base36IntTests)\", \"test_to_int_errors (utils_tests.test_http.Base36IntTests)\", \"test_values (utils_tests.test_http.Base36IntTests)\", \"test_parsing (utils_tests.test_http.ETagProcessingTests)\", \"test_quoting (utils_tests.test_http.ETagProcessingTests)\", \"test_custom_iterable_not_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_empty_sequence_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_sequence_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_sequence_not_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_containing_tuple_not_doseq (utils_tests.test_http.URLEncodeTests)\", \"test_dict_with_bytearray (utils_tests.test_http.URLEncodeTests)\", \"test_dict_with_bytes_values (utils_tests.test_http.URLEncodeTests)\", \"test_dict_with_sequence_of_bytes (utils_tests.test_http.URLEncodeTests)\", \"test_generator (utils_tests.test_http.URLEncodeTests)\", \"test_multivaluedict (utils_tests.test_http.URLEncodeTests)\", \"test_none (utils_tests.test_http.URLEncodeTests)\", \"test_none_in_generator (utils_tests.test_http.URLEncodeTests)\", \"test_none_in_sequence (utils_tests.test_http.URLEncodeTests)\", \"test_tuples (utils_tests.test_http.URLEncodeTests)\", \"test_abstract_fk_related_name (model_inheritance.tests.InheritanceSameModelNameTests)\", \"test_raises_runtimeerror (utils_tests.test_autoreload.TestChildArguments)\", \"test_run_as_module (utils_tests.test_autoreload.TestChildArguments)\", \"test_run_as_non_django_module (utils_tests.test_autoreload.TestChildArguments)\", \"test_warnoptions (utils_tests.test_autoreload.TestChildArguments)\", \"test_requires_system_checks_false (user_commands.tests.DeprecationTests)\", \"test_requires_system_checks_true (user_commands.tests.DeprecationTests)\", \"test_requires_system_checks_warning (user_commands.tests.DeprecationTests)\", \"test_calls_start_django (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_calls_sys_exit (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_swallows_keyboard_interrupt (utils_tests.test_autoreload.RunWithReloaderTests)\", \"test_allowed_hosts_str (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_bad_urls (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_basic_auth (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_good_urls (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_no_allowed_hosts (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_secure_param_https_urls (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"test_secure_param_non_https_urls (utils_tests.test_http.URLHasAllowedHostAndSchemeTests)\", \"Failing subtests are added correctly using addSubTest().\", \"test_pickle_errors_detection (test_runner.test_parallel.RemoteTestResultTest)\", \"test_mutates_error_files (utils_tests.test_autoreload.TestCheckErrors)\", \"test_manage_py (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_python_m_django (utils_tests.test_autoreload.RestartWithReloaderTests)\", \"test_sys_paths_absolute (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_non_existing (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_sys_paths_with_directories (utils_tests.test_autoreload.TestSysPathDirectories)\", \"test_unique (model_inheritance.tests.InheritanceUniqueTests)\", \"test_unique_together (model_inheritance.tests.InheritanceUniqueTests)\", \"test_get_random_secret_key (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests)\", \"test_base_manager_inheritance (managers_regress.tests.TestManagerInheritance)\", \"test_default_manager_inheritance (managers_regress.tests.TestManagerInheritance)\", \"test_implicit_inheritance (managers_regress.tests.TestManagerInheritance)\", \"test_manager_class_getitem (managers_regress.tests.TestManagerInheritance)\", \"test_manager_no_duplicates (managers_regress.tests.TestManagerInheritance)\", \"test_all (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_default_and_other (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_default_only (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_mixed (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_no_databases_required (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_other_only (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_abstract (model_inheritance.tests.ModelInheritanceTests)\", \"test_abstract_parent_link (model_inheritance.tests.ModelInheritanceTests)\", \"Creating a child with non-abstract parents only issues INSERTs.\", \"test_custompk_m2m (model_inheritance.tests.ModelInheritanceTests)\", \"test_eq (model_inheritance.tests.ModelInheritanceTests)\", \"test_inherited_ordering_pk_desc (model_inheritance.tests.ModelInheritanceTests)\", \"test_init_subclass (model_inheritance.tests.ModelInheritanceTests)\", \"test_meta_fields_and_ordering (model_inheritance.tests.ModelInheritanceTests)\", \"test_mixin_init (model_inheritance.tests.ModelInheritanceTests)\", \"test_model_with_distinct_accessors (model_inheritance.tests.ModelInheritanceTests)\", \"test_model_with_distinct_related_query_name (model_inheritance.tests.ModelInheritanceTests)\", \"test_queryset_class_getitem (model_inheritance.tests.ModelInheritanceTests)\", \"test_reverse_relation_for_different_hierarchy_tree (model_inheritance.tests.ModelInheritanceTests)\", \"test_set_name (model_inheritance.tests.ModelInheritanceTests)\", \"Updating a field of a model subclass doesn't issue an UPDATE\", \"test_abstract_manager (managers_regress.tests.ManagersRegressionTests)\", \"test_custom_abstract_manager (managers_regress.tests.ManagersRegressionTests)\", \"test_custom_swappable_manager (managers_regress.tests.ManagersRegressionTests)\", \"test_explicit_abstract_manager (managers_regress.tests.ManagersRegressionTests)\", \"test_explicit_swappable_manager (managers_regress.tests.ManagersRegressionTests)\", \"test_field_can_be_called_exact (managers_regress.tests.ManagersRegressionTests)\", \"test_managers (managers_regress.tests.ManagersRegressionTests)\", \"test_regress_3871 (managers_regress.tests.ManagersRegressionTests)\", \"test_swappable_manager (managers_regress.tests.ManagersRegressionTests)\", \"test_request_signals (handlers.tests.SignalsTests)\", \"test_request_signals_streaming_response (handlers.tests.SignalsTests)\", \"test_exclude_inherited_on_null (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_filter_inherited_model (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_filter_inherited_on_null (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_filter_on_parent_returns_object_of_parent_type (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_inherited_does_not_exist_exception (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_inherited_multiple_objects_returned_exception (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_cache_reuse (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_child_one_to_one_link (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_child_one_to_one_link_on_nonrelated_objects (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_fields_available_for_filtering_in_child_model (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_related_objects_for_inherited_models (model_inheritance.tests.ModelInheritanceDataTests)\", \"#23370 - Should be able to defer child fields when using\", \"test_select_related_works_on_parent_model_fields (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_update_inherited_model (model_inheritance.tests.ModelInheritanceDataTests)\", \"Update queries do not generate unnecessary queries (#18304).\", \"test_update_works_on_parent_and_child_models_at_once (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_values_works_on_parent_model_fields (model_inheritance.tests.ModelInheritanceDataTests)\", \"A non-UTF-8 path populates PATH_INFO with an URL-encoded path and\", \"Invalid boundary string should produce a \\\"Bad Request\\\" response, not a\", \"Invalid cookie content should result in an absent cookie, but not in a\", \"test_middleware_initialized (handlers.tests.HandlerTests)\", \"Non-ASCII cookies set in JavaScript are properly decoded (#20557).\", \"Non-ASCII query strings are properly decoded (#20530, #22996).\", \"test_run_loop_catches_stopiteration (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_run_loop_stop_and_return (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_checks_for_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_wait_for_apps_ready_without_exception (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_dir_with_unresolvable_path (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_files_with_recursive_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"test_watch_with_glob (utils_tests.test_autoreload.BaseReloaderTests)\", \"By default, call_command should not trigger the check framework, unless\", \"When passing the long option name to call_command, the available option\", \"It should be possible to pass non-string arguments to call_command.\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)\", \"test_check_migrations (user_commands.tests.CommandTests)\", \"test_command (user_commands.tests.CommandTests)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests)\", \"test_command_style (user_commands.tests.CommandTests)\", \"BaseCommand.create_parser() passes kwargs to CommandParser.\", \"Management commands can also be loaded from Python eggs.\", \"An unknown command raises CommandError\", \"find_command should still work when the PATH environment variable\", \"test_language_preserved (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_const_options (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests)\", \"When the Command handle method is decorated with @no_translations,\", \"test_output_transaction (user_commands.tests.CommandTests)\", \"test_outputwrapper_flush (user_commands.tests.CommandTests)\", \"test_required_const_options (user_commands.tests.CommandTests)\", \"test_required_list_option (user_commands.tests.CommandTests)\", \"test_requires_system_checks_empty (user_commands.tests.CommandTests)\", \"test_requires_system_checks_invalid (user_commands.tests.CommandTests)\", \"test_requires_system_checks_specific (user_commands.tests.CommandTests)\", \"test_subparser (user_commands.tests.CommandTests)\", \"test_subparser_dest_args (user_commands.tests.CommandTests)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests)\", \"Exception raised in a command should raise CommandError with\", \"test_glob (utils_tests.test_autoreload.StatReloaderTests)\", \"test_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_multiple_recursive_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_nested_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_glob_recursive (utils_tests.test_autoreload.StatReloaderTests)\", \"test_overlapping_globs (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_ignores_missing_files (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_updates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_snapshot_files_with_duplicates (utils_tests.test_autoreload.StatReloaderTests)\", \"test_tick_does_not_trigger_twice (utils_tests.test_autoreload.StatReloaderTests)\", \"test_check_errors_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_echo_on_called (utils_tests.test_autoreload.StartDjangoTests)\", \"test_starts_thread_with_args (utils_tests.test_autoreload.StartDjangoTests)\", \"test_watchman_becomes_unavailable (utils_tests.test_autoreload.StartDjangoTests)\", \"test_auto_transaction (handlers.tests.TransactionsPerRequestTests)\", \"test_auto_transaction_async_view (handlers.tests.TransactionsPerRequestTests)\", \"test_no_auto_transaction (handlers.tests.TransactionsPerRequestTests)\", \"test_no_transaction (handlers.tests.TransactionsPerRequestTests)\", \"Calling an async view down the normal synchronous path.\", \"test_bad_request_in_view_returns_400 (handlers.tests.HandlerRequestTests)\", \"test_environ_path_info_type (handlers.tests.HandlerRequestTests)\", \"test_handle_accepts_httpstatus_enum_value (handlers.tests.HandlerRequestTests)\", \"test_invalid_urls (handlers.tests.HandlerRequestTests)\", \"test_middleware_returns_none (handlers.tests.HandlerRequestTests)\", \"test_no_response (handlers.tests.HandlerRequestTests)\", \"test_suspiciousop_in_view_returns_400 (handlers.tests.HandlerRequestTests)\", \"Calling an async view down the asynchronous path.\", \"test_bad_request_in_view_returns_400 (handlers.tests.AsyncHandlerRequestTests)\", \"test_no_response (handlers.tests.AsyncHandlerRequestTests)\", \"test_suspiciousop_in_view_returns_400 (handlers.tests.AsyncHandlerRequestTests)\", \"Calling a sync view down the asynchronous path.\", \"test_unawaited_response (handlers.tests.AsyncHandlerRequestTests)\", \".pyc and .pyo files are included in the files list.\", \"When a file containing an error is imported in a function wrapped by\", \"Since Python may raise arbitrary exceptions when importing code,\", \"When a file is added, it's returned by iter_all_python_module_files().\", \"test_main_module_is_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_main_module_without_file_is_not_resolved (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_module_without_spec (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_path_with_embedded_null_bytes (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"test_paths_are_pathlib_instances (utils_tests.test_autoreload.TestIterModulesAndFiles)\", \"iter_all_python_module_file() ignores weakref modules.\", \"Modules imported from zipped files have their archive location included\", \"test_add_arguments_debug_mode (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_buffer_mode_test_fail (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_buffer_mode_test_pass (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_buffer_with_parallel (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_discovery_on_package (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_dotted_test_class_django_testcase (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_dotted_test_class_vanilla_unittest (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_dotted_test_method_django_testcase (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_dotted_test_module (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"Tests shouldn't be discovered twice when discovering on overlapping paths.\", \"If the test label is empty, discovery should happen on the current\", \"test_empty_test_case (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_exclude_tags (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_excluded_tags_displayed (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_faulthandler_already_enabled (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_faulthandler_disabled (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_faulthandler_enabled (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_faulthandler_enabled_fileno (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_file_path (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"When given a dotted path to a module, unittest discovery searches\", \"test_included_tags_displayed (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_init_debug_mode (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_name_patterns (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_overridable_get_test_runner_kwargs (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_overridable_test_loader (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_overridable_test_runner (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_overridable_test_suite (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_pattern (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_pdb_with_parallel (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"Reverse should reorder tests while maintaining the grouping specified\", \"test_tag_inheritance (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_tags (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_testcase_ordering (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_timings_captured (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_timings_not_captured (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"To avoid conflicts with custom options, commands don't allow\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)\", \"test_skip_checks (user_commands.tests.CommandRunTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.673649",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}