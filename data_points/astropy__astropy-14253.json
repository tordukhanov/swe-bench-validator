{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-14253",
  "base_commit": "dd2304672cdf4ea1b6f124f9f22ec5069a13c9f5",
  "patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -731,7 +731,9 @@ def _result_as_quantity(self, result, unit, out):\n \n         if out is None:\n             # View the result array as a Quantity with the proper unit.\n-            return result if unit is None else self._new_view(result, unit)\n+            return (\n+                result if unit is None else self._new_view(result, unit, finalize=False)\n+            )\n \n         elif isinstance(out, Quantity):\n             # For given Quantity output, just set the unit. We know the unit\n@@ -761,9 +763,8 @@ def __quantity_subclass__(self, unit):\n         \"\"\"\n         return Quantity, True\n \n-    def _new_view(self, obj=None, unit=None):\n-        \"\"\"\n-        Create a Quantity view of some array-like input, and set the unit\n+    def _new_view(self, obj=None, unit=None, finalize=True):\n+        \"\"\"Create a Quantity view of some array-like input, and set the unit\n \n         By default, return a view of ``obj`` of the same class as ``self`` and\n         with the same unit.  Subclasses can override the type of class for a\n@@ -785,9 +786,17 @@ def _new_view(self, obj=None, unit=None):\n             subclass, and explicitly assigned to the view if given.\n             If not given, the subclass and unit will be that of ``self``.\n \n+        finalize : bool, optional\n+            Whether to call ``__array_finalize__`` to transfer properties from\n+            ``self`` to the new view of ``obj`` (e.g., ``info`` for all\n+            subclasses, or ``_wrap_angle`` for `~astropy.coordinates.Latitude`).\n+            Default: `True`, as appropriate for, e.g., unit conversions or slicing,\n+            where the nature of the object does not change.\n+\n         Returns\n         -------\n         view : `~astropy.units.Quantity` subclass\n+\n         \"\"\"\n         # Determine the unit and quantity subclass that we need for the view.\n         if unit is None:\n@@ -823,7 +832,8 @@ def _new_view(self, obj=None, unit=None):\n         # such as ``info``, ``wrap_angle`` in `Longitude`, etc.\n         view = obj.view(quantity_subclass)\n         view._set_unit(unit)\n-        view.__array_finalize__(self)\n+        if finalize:\n+            view.__array_finalize__(self)\n         return view\n \n     def _set_unit(self, unit):\n@@ -1206,7 +1216,9 @@ def __mul__(self, other):\n \n         if isinstance(other, (UnitBase, str)):\n             try:\n-                return self._new_view(self.copy(), other * self.unit)\n+                return self._new_view(\n+                    self.value.copy(), other * self.unit, finalize=False\n+                )\n             except UnitsError:  # let other try to deal with it\n                 return NotImplemented\n \n@@ -1233,7 +1245,9 @@ def __truediv__(self, other):\n \n         if isinstance(other, (UnitBase, str)):\n             try:\n-                return self._new_view(self.copy(), self.unit / other)\n+                return self._new_view(\n+                    self.value.copy(), self.unit / other, finalize=False\n+                )\n             except UnitsError:  # let other try to deal with it\n                 return NotImplemented\n \n@@ -1252,14 +1266,16 @@ def __rtruediv__(self, other):\n         \"\"\"Right Division between `Quantity` objects and other objects.\"\"\"\n \n         if isinstance(other, (UnitBase, str)):\n-            return self._new_view(1.0 / self.value, other / self.unit)\n+            return self._new_view(1.0 / self.value, other / self.unit, finalize=False)\n \n         return super().__rtruediv__(other)\n \n     def __pow__(self, other):\n         if isinstance(other, Fraction):\n             # Avoid getting object arrays by raising the value to a Fraction.\n-            return self._new_view(self.value ** float(other), self.unit**other)\n+            return self._new_view(\n+                self.value ** float(other), self.unit**other, finalize=False\n+            )\n \n         return super().__pow__(other)\n \n@@ -1283,7 +1299,9 @@ def quantity_iter():\n \n     def __getitem__(self, key):\n         if isinstance(key, str) and isinstance(self.unit, StructuredUnit):\n-            return self._new_view(self.view(np.ndarray)[key], self.unit[key])\n+            return self._new_view(\n+                self.view(np.ndarray)[key], self.unit[key], finalize=False\n+            )\n \n         try:\n             out = super().__getitem__(key)\n",
  "test_patch": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -397,6 +397,16 @@ def test_multiplication(self):\n         assert new_quantity.value == 171.3\n         assert new_quantity.unit == u.meter\n \n+        # Multiple with a unit.\n+        new_quantity = self.q1 * u.s\n+        assert new_quantity.value == 11.42\n+        assert new_quantity.unit == u.Unit(\"m s\")\n+\n+        # Reverse multiple with a unit.\n+        new_quantity = u.s * self.q1\n+        assert new_quantity.value == 11.42\n+        assert new_quantity.unit == u.Unit(\"m s\")\n+\n     def test_division(self):\n         # Take units from left object, q1\n         new_quantity = self.q1 / self.q2\n@@ -424,6 +434,16 @@ def test_division(self):\n         assert new_quantity.value == 1.0\n         assert new_quantity.unit == u.Unit(\"1/m\")\n \n+        # Divide by a unit.\n+        new_quantity = self.q1 / u.s\n+        assert new_quantity.value == 11.42\n+        assert new_quantity.unit == u.Unit(\"m/s\")\n+\n+        # Divide into a unit.\n+        new_quantity = u.s / self.q1\n+        assert new_quantity.value == 1 / 11.42\n+        assert new_quantity.unit == u.Unit(\"s/m\")\n+\n     def test_commutativity(self):\n         \"\"\"Regression test for issue #587.\"\"\"\n \ndiff --git a/astropy/units/tests/test_quantity_info.py b/astropy/units/tests/test_quantity_info.py\nnew file mode 100644\n--- /dev/null\n+++ b/astropy/units/tests/test_quantity_info.py\n@@ -0,0 +1,121 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Test the propagation of info on Quantity during operations.\"\"\"\n+\n+import copy\n+\n+import numpy as np\n+\n+from astropy import units as u\n+\n+\n+def assert_info_equal(a, b, ignore=set()):\n+    a_info = a.info\n+    b_info = b.info\n+    for attr in (a_info.attr_names | b_info.attr_names) - ignore:\n+        if attr == \"unit\":\n+            assert a_info.unit.is_equivalent(b_info.unit)\n+        else:\n+            assert getattr(a_info, attr, None) == getattr(b_info, attr, None)\n+\n+\n+def assert_no_info(a):\n+    assert \"info\" not in a.__dict__\n+\n+\n+class TestQuantityInfo:\n+    @classmethod\n+    def setup_class(self):\n+        self.q = u.Quantity(np.arange(1.0, 5.0), \"m/s\")\n+        self.q.info.name = \"v\"\n+        self.q.info.description = \"air speed of a african swallow\"\n+\n+    def test_copy(self):\n+        q_copy1 = self.q.copy()\n+        assert_info_equal(q_copy1, self.q)\n+        q_copy2 = copy.copy(self.q)\n+        assert_info_equal(q_copy2, self.q)\n+        q_copy3 = copy.deepcopy(self.q)\n+        assert_info_equal(q_copy3, self.q)\n+\n+    def test_slice(self):\n+        q_slice = self.q[1:3]\n+        assert_info_equal(q_slice, self.q)\n+        q_take = self.q.take([0, 1])\n+        assert_info_equal(q_take, self.q)\n+\n+    def test_item(self):\n+        # Scalars do not get info set (like for Column); TODO: is this OK?\n+        q1 = self.q[1]\n+        assert_no_info(q1)\n+        q_item = self.q.item(1)\n+        assert_no_info(q_item)\n+\n+    def test_iter(self):\n+        # Scalars do not get info set.\n+        for q in self.q:\n+            assert_no_info(q)\n+        for q in iter(self.q):\n+            assert_no_info(q)\n+\n+    def test_change_to_equivalent_unit(self):\n+        q1 = self.q.to(u.km / u.hr)\n+        assert_info_equal(q1, self.q)\n+        q2 = self.q.si\n+        assert_info_equal(q2, self.q)\n+        q3 = self.q.cgs\n+        assert_info_equal(q3, self.q)\n+        q4 = self.q.decompose()\n+        assert_info_equal(q4, self.q)\n+\n+    def test_reshape(self):\n+        q = self.q.reshape(-1, 1, 2)\n+        assert_info_equal(q, self.q)\n+        q2 = q.squeeze()\n+        assert_info_equal(q2, self.q)\n+\n+    def test_insert(self):\n+        q = self.q.copy()\n+        q.insert(1, 1 * u.cm / u.hr)\n+        assert_info_equal(q, self.q)\n+\n+    def test_unary_op(self):\n+        q = -self.q\n+        assert_no_info(q)\n+\n+    def test_binary_op(self):\n+        q = self.q + self.q\n+        assert_no_info(q)\n+\n+    def test_unit_change(self):\n+        q = self.q * u.s\n+        assert_no_info(q)\n+        q2 = u.s / self.q\n+        assert_no_info(q)\n+\n+    def test_inplace_unit_change(self):\n+        # Not sure if it is logical to keep info here!\n+        q = self.q.copy()\n+        q *= u.s\n+        assert_info_equal(q, self.q, ignore={\"unit\"})\n+\n+\n+class TestStructuredQuantity:\n+    @classmethod\n+    def setup_class(self):\n+        value = np.array([(1.0, 2.0), (3.0, 4.0)], dtype=[(\"p\", \"f8\"), (\"v\", \"f8\")])\n+        self.q = u.Quantity(value, \"m, m/s\")\n+        self.q.info.name = \"pv\"\n+        self.q.info.description = \"Location and speed\"\n+\n+    def test_keying(self):\n+        q_p = self.q[\"p\"]\n+        assert_no_info(q_p)\n+\n+    def test_slicing(self):\n+        q = self.q[:1]\n+        assert_info_equal(q, self.q)\n+\n+    def test_item(self):\n+        # Scalars do not get info set.\n+        q = self.q[1]\n+        assert_no_info(q)\n",
  "problem_statement": "When should `info` be linked to a new object?\nMostly for @taldcroft - I noticed that in `Quantity` the way we have set up `__array_finalize__`, `info` is passed on not just for views (where it should be), but also for copies (implicitly in arithmetic operations, etc.). Which ones are reasonable?  Just thinking about whether, e.g., `info.name` should be propagated, I'd think:\n- Surely for\n  - views & reshapes: `q[...]`, `q.squeeze`, etc.\n  - insertions: `q.insert(...)`\n- Probably for\n  - selection of scalars: `q[0]` or in `for q1 in q:` (for columns this returns a scalar without `info`)\n  - copies: `q.copy()` and equivalents\n  - equivalent unit changes: `q.to(...)`, `q.si`, `q.decompose()`, etc.\n- Probably not for\n  - operations `q3 = q1 + q2`\n  - real unit changes `q * unit` (including in-place??; `q /= u.m`)\n\nWhat do you think?\n\np.s. Currently, all of the above happen, in part because I use `__array_finalize__` in `Quantity._new_view`, something which I don't think we had really considered when we made the change in `__array_finalize__`. But that also means that in principle it may not too hard to fairly finely define the behaviour.\n\n",
  "hints_text": "@mhvk - I basically agree with your assessment as being logical.  I guess the only question is about having an easily stated rule for what happens.  I wonder if we could make a rule (with a corresponding implementation) which is basically: \"Any unary operation on a Quantity will preserve the `info` attribute if defined\".  So that would put your \"real unit changes..\" bullet into the \"yes\" category.\n\nThat makes some sense, but I think I'd treat `q * unit` as a binary operation still (even if it isn't quite implemented that way; I do think it would be confusing if there is a difference in behaviour between that and `q * (1*unit)` (note that the implementation already makes a copy of `q`).\n\nAlso, \"unary\" may be too broad: I don't think I'd want `np.sin(q)` to keep the `info` attribute... \n\n@mhvk - agreed.  My main point is to strive to make the behavior predictable.\n",
  "created_at": "2023-01-04T19:59:52Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_unary_op\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_binary_op\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_unit_change\", \"astropy/units/tests/test_quantity_info.py::TestStructuredQuantity::test_keying\"]",
  "PASS_TO_PASS": "[\"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_1\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_2\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_3\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_nan_inf\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_unit_property\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_preserve_dtype\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_numpy_style_dtype_inspect\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_float_dtype_promotion\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_copy\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_subok\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_order\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_ndmin\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_non_quantity_with_unit\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_creation_via_view\", \"astropy/units/tests/test_quantity.py::TestQuantityCreation::test_rshift_warns\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_addition\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_subtraction\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_multiplication\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_division\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_commutativity\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_power\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_matrix_multiplication\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_unary\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_abs\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_incompatible_units\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_non_number_type\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_dimensionless_operations\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_complicated_operation\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_comparison\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_numeric_converters\", \"astropy/units/tests/test_quantity.py::TestQuantityOperations::test_array_converters\", \"astropy/units/tests/test_quantity.py::test_quantity_conversion\", \"astropy/units/tests/test_quantity.py::test_quantity_ilshift\", \"astropy/units/tests/test_quantity.py::test_regression_12964\", \"astropy/units/tests/test_quantity.py::test_quantity_value_views\", \"astropy/units/tests/test_quantity.py::test_quantity_conversion_with_equiv\", \"astropy/units/tests/test_quantity.py::test_quantity_conversion_equivalency_passed_on\", \"astropy/units/tests/test_quantity.py::test_self_equivalency\", \"astropy/units/tests/test_quantity.py::test_si\", \"astropy/units/tests/test_quantity.py::test_cgs\", \"astropy/units/tests/test_quantity.py::TestQuantityComparison::test_quantity_equality\", \"astropy/units/tests/test_quantity.py::TestQuantityComparison::test_quantity_equality_array\", \"astropy/units/tests/test_quantity.py::TestQuantityComparison::test_quantity_comparison\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_dimensionless_quantity_repr\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_dimensionless_quantity_str\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_dimensionless_quantity_format\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_scalar_quantity_str\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_scalar_quantity_repr\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_array_quantity_str\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_array_quantity_repr\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_scalar_quantity_format\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_uninitialized_unit_format\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_to_string\", \"astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_repr_latex\", \"astropy/units/tests/test_quantity.py::test_decompose\", \"astropy/units/tests/test_quantity.py::test_decompose_regression\", \"astropy/units/tests/test_quantity.py::test_arrays\", \"astropy/units/tests/test_quantity.py::test_array_indexing_slicing\", \"astropy/units/tests/test_quantity.py::test_array_setslice\", \"astropy/units/tests/test_quantity.py::test_inverse_quantity\", \"astropy/units/tests/test_quantity.py::test_quantity_mutability\", \"astropy/units/tests/test_quantity.py::test_quantity_initialized_with_quantity\", \"astropy/units/tests/test_quantity.py::test_quantity_string_unit\", \"astropy/units/tests/test_quantity.py::test_quantity_invalid_unit_string\", \"astropy/units/tests/test_quantity.py::test_implicit_conversion\", \"astropy/units/tests/test_quantity.py::test_implicit_conversion_autocomplete\", \"astropy/units/tests/test_quantity.py::test_quantity_iterability\", \"astropy/units/tests/test_quantity.py::test_copy\", \"astropy/units/tests/test_quantity.py::test_deepcopy\", \"astropy/units/tests/test_quantity.py::test_equality_numpy_scalar\", \"astropy/units/tests/test_quantity.py::test_quantity_pickelability\", \"astropy/units/tests/test_quantity.py::test_quantity_initialisation_from_string\", \"astropy/units/tests/test_quantity.py::test_unsupported\", \"astropy/units/tests/test_quantity.py::test_unit_identity\", \"astropy/units/tests/test_quantity.py::test_quantity_to_view\", \"astropy/units/tests/test_quantity.py::test_quantity_tuple_power\", \"astropy/units/tests/test_quantity.py::test_quantity_fraction_power\", \"astropy/units/tests/test_quantity.py::test_quantity_from_table\", \"astropy/units/tests/test_quantity.py::test_assign_slice_with_quantity_like\", \"astropy/units/tests/test_quantity.py::test_insert\", \"astropy/units/tests/test_quantity.py::test_repr_array_of_quantity\", \"astropy/units/tests/test_quantity.py::TestSpecificTypeQuantity::test_creation\", \"astropy/units/tests/test_quantity.py::TestSpecificTypeQuantity::test_view\", \"astropy/units/tests/test_quantity.py::TestSpecificTypeQuantity::test_operation_precedence_and_fallback\", \"astropy/units/tests/test_quantity.py::test_unit_class_override\", \"astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_input[QuantityMimic]\", \"astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_input[QuantityMimic2]\", \"astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_setting[QuantityMimic]\", \"astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_setting[QuantityMimic2]\", \"astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_function_unit\", \"astropy/units/tests/test_quantity.py::test_masked_quantity_str_repr\", \"astropy/units/tests/test_quantity.py::TestQuantitySubclassAboveAndBelow::test_setup\", \"astropy/units/tests/test_quantity.py::TestQuantitySubclassAboveAndBelow::test_attr_propagation\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_copy\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_slice\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_item\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_iter\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_change_to_equivalent_unit\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_reshape\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_insert\", \"astropy/units/tests/test_quantity_info.py::TestQuantityInfo::test_inplace_unit_change\", \"astropy/units/tests/test_quantity_info.py::TestStructuredQuantity::test_slicing\", \"astropy/units/tests/test_quantity_info.py::TestStructuredQuantity::test_item\"]",
  "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.537082",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}