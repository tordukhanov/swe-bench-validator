{
  "repo": "django/django",
  "instance_id": "django__django-13797",
  "base_commit": "3071660acfbdf4b5c59457c8e9dc345d5e8894c5",
  "patch": "diff --git a/django/core/management/commands/dumpdata.py b/django/core/management/commands/dumpdata.py\n--- a/django/core/management/commands/dumpdata.py\n+++ b/django/core/management/commands/dumpdata.py\n@@ -1,3 +1,5 @@\n+import gzip\n+import os\n import warnings\n \n from django.apps import apps\n@@ -6,6 +8,18 @@\n from django.core.management.utils import parse_apps_and_model_labels\n from django.db import DEFAULT_DB_ALIAS, router\n \n+try:\n+    import bz2\n+    has_bz2 = True\n+except ImportError:\n+    has_bz2 = False\n+\n+try:\n+    import lzma\n+    has_lzma = True\n+except ImportError:\n+    has_lzma = False\n+\n \n class ProxyModelWarning(Warning):\n     pass\n@@ -184,7 +198,36 @@ def get_objects(count_only=False):\n             if output and self.stdout.isatty() and options['verbosity'] > 0:\n                 progress_output = self.stdout\n                 object_count = sum(get_objects(count_only=True))\n-            stream = open(output, 'w') if output else None\n+            if output:\n+                file_root, file_ext = os.path.splitext(output)\n+                compression_formats = {\n+                    '.bz2': (open, {}, file_root),\n+                    '.gz': (gzip.open, {}, output),\n+                    '.lzma': (open, {}, file_root),\n+                    '.xz': (open, {}, file_root),\n+                    '.zip': (open, {}, file_root),\n+                }\n+                if has_bz2:\n+                    compression_formats['.bz2'] = (bz2.open, {}, output)\n+                if has_lzma:\n+                    compression_formats['.lzma'] = (\n+                        lzma.open, {'format': lzma.FORMAT_ALONE}, output\n+                    )\n+                    compression_formats['.xz'] = (lzma.open, {}, output)\n+                try:\n+                    open_method, kwargs, file_path = compression_formats[file_ext]\n+                except KeyError:\n+                    open_method, kwargs, file_path = (open, {}, output)\n+                if file_path != output:\n+                    file_name = os.path.basename(file_path)\n+                    warnings.warn(\n+                        f\"Unsupported file extension ({file_ext}). \"\n+                        f\"Fixtures saved in '{file_name}'.\",\n+                        RuntimeWarning,\n+                    )\n+                stream = open_method(file_path, 'wt', **kwargs)\n+            else:\n+                stream = None\n             try:\n                 serializers.serialize(\n                     format, get_objects(), indent=indent,\n",
  "test_patch": "diff --git a/tests/fixtures/tests.py b/tests/fixtures/tests.py\n--- a/tests/fixtures/tests.py\n+++ b/tests/fixtures/tests.py\n@@ -1,3 +1,4 @@\n+import gzip\n import os\n import sys\n import tempfile\n@@ -80,9 +81,26 @@ def _dumpdata_assert(self, args, output, format='json', filename=None,\n             primary_keys=primary_keys,\n         )\n         if filename:\n-            with open(filename) as f:\n+            file_root, file_ext = os.path.splitext(filename)\n+            compression_formats = {\n+                '.bz2': (open, file_root),\n+                '.gz': (gzip.open, filename),\n+                '.lzma': (open, file_root),\n+                '.xz': (open, file_root),\n+                '.zip': (open, file_root),\n+            }\n+            if HAS_BZ2:\n+                compression_formats['.bz2'] = (bz2.open, filename)\n+            if HAS_LZMA:\n+                compression_formats['.lzma'] = (lzma.open, filename)\n+                compression_formats['.xz'] = (lzma.open, filename)\n+            try:\n+                open_method, file_path = compression_formats[file_ext]\n+            except KeyError:\n+                open_method, file_path = open, filename\n+            with open_method(file_path, 'rt') as f:\n                 command_output = f.read()\n-            os.remove(filename)\n+            os.remove(file_path)\n         else:\n             command_output = new_io.getvalue().strip()\n         if format == \"json\":\n@@ -492,6 +510,66 @@ def test_dumpdata_with_file_output(self):\n             filename='dumpdata.json'\n         )\n \n+    def test_dumpdata_with_file_gzip_output(self):\n+        management.call_command('loaddata', 'fixture1.json', verbosity=0)\n+        self._dumpdata_assert(\n+            ['fixtures'],\n+            '[{\"pk\": 1, \"model\": \"fixtures.category\", \"fields\": {\"description\": \"Latest news stories\", \"title\": '\n+            '\"News Stories\"}}, {\"pk\": 2, \"model\": \"fixtures.article\", \"fields\": {\"headline\": \"Poker has no place '\n+            'on ESPN\", \"pub_date\": \"2006-06-16T12:00:00\"}}, {\"pk\": 3, \"model\": \"fixtures.article\", \"fields\": '\n+            '{\"headline\": \"Time to reform copyright\", \"pub_date\": \"2006-06-16T13:00:00\"}}]',\n+            filename='dumpdata.json.gz',\n+        )\n+\n+    @unittest.skipUnless(HAS_BZ2, 'No bz2 library detected.')\n+    def test_dumpdata_with_file_bz2_output(self):\n+        management.call_command('loaddata', 'fixture1.json', verbosity=0)\n+        self._dumpdata_assert(\n+            ['fixtures'],\n+            '[{\"pk\": 1, \"model\": \"fixtures.category\", \"fields\": {\"description\": \"Latest news stories\", \"title\": '\n+            '\"News Stories\"}}, {\"pk\": 2, \"model\": \"fixtures.article\", \"fields\": {\"headline\": \"Poker has no place '\n+            'on ESPN\", \"pub_date\": \"2006-06-16T12:00:00\"}}, {\"pk\": 3, \"model\": \"fixtures.article\", \"fields\": '\n+            '{\"headline\": \"Time to reform copyright\", \"pub_date\": \"2006-06-16T13:00:00\"}}]',\n+            filename='dumpdata.json.bz2',\n+        )\n+\n+    @unittest.skipUnless(HAS_LZMA, 'No lzma library detected.')\n+    def test_dumpdata_with_file_lzma_output(self):\n+        management.call_command('loaddata', 'fixture1.json', verbosity=0)\n+        self._dumpdata_assert(\n+            ['fixtures'],\n+            '[{\"pk\": 1, \"model\": \"fixtures.category\", \"fields\": {\"description\": \"Latest news stories\", \"title\": '\n+            '\"News Stories\"}}, {\"pk\": 2, \"model\": \"fixtures.article\", \"fields\": {\"headline\": \"Poker has no place '\n+            'on ESPN\", \"pub_date\": \"2006-06-16T12:00:00\"}}, {\"pk\": 3, \"model\": \"fixtures.article\", \"fields\": '\n+            '{\"headline\": \"Time to reform copyright\", \"pub_date\": \"2006-06-16T13:00:00\"}}]',\n+            filename='dumpdata.json.lzma',\n+        )\n+\n+    @unittest.skipUnless(HAS_LZMA, 'No lzma library detected.')\n+    def test_dumpdata_with_file_xz_output(self):\n+        management.call_command('loaddata', 'fixture1.json', verbosity=0)\n+        self._dumpdata_assert(\n+            ['fixtures'],\n+            '[{\"pk\": 1, \"model\": \"fixtures.category\", \"fields\": {\"description\": \"Latest news stories\", \"title\": '\n+            '\"News Stories\"}}, {\"pk\": 2, \"model\": \"fixtures.article\", \"fields\": {\"headline\": \"Poker has no place '\n+            'on ESPN\", \"pub_date\": \"2006-06-16T12:00:00\"}}, {\"pk\": 3, \"model\": \"fixtures.article\", \"fields\": '\n+            '{\"headline\": \"Time to reform copyright\", \"pub_date\": \"2006-06-16T13:00:00\"}}]',\n+            filename='dumpdata.json.xz',\n+        )\n+\n+    def test_dumpdata_with_file_zip_output(self):\n+        management.call_command('loaddata', 'fixture1.json', verbosity=0)\n+        msg = \"Unsupported file extension (.zip). Fixtures saved in 'dumpdata.json'.\"\n+        with self.assertWarnsMessage(RuntimeWarning, msg):\n+            self._dumpdata_assert(\n+                ['fixtures'],\n+                '[{\"pk\": 1, \"model\": \"fixtures.category\", \"fields\": {\"description\": \"Latest news stories\", \"title\": '\n+                '\"News Stories\"}}, {\"pk\": 2, \"model\": \"fixtures.article\", \"fields\": {\"headline\": \"Poker has no place '\n+                'on ESPN\", \"pub_date\": \"2006-06-16T12:00:00\"}}, {\"pk\": 3, \"model\": \"fixtures.article\", \"fields\": '\n+                '{\"headline\": \"Time to reform copyright\", \"pub_date\": \"2006-06-16T13:00:00\"}}]',\n+                filename='dumpdata.json.zip',\n+            )\n+\n     def test_dumpdata_progressbar(self):\n         \"\"\"\n         Dumpdata shows a progress bar on the command line when --output is set,\n",
  "problem_statement": "Add support for fixtures compression in dumpdata\nDescription\n\t\nSince loaddata command support compressed fixtures [1] loading, I would propose to add fixtures compression support in dumpdata command.\n[1] ​https://docs.djangoproject.com/en/dev/ref/django-admin/#compressed-fixtures\n",
  "hints_text": "PR: ​https://github.com/django/django/pull/13797\nThis seems reasonable to me.",
  "created_at": "2020-12-21T14:29:41Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_dumpdata_with_file_bz2_output (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_file_gzip_output (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_file_lzma_output (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_file_xz_output (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_file_zip_output (fixtures.tests.FixtureLoadingTests)\"]",
  "PASS_TO_PASS": "[\"There were no fixture objects installed\", \"test_loaddata_not_existent_fixture_file (fixtures.tests.NonexistentFixtureTests)\", \"test_nonexistent_fixture_no_constraint_checking (fixtures.tests.NonexistentFixtureTests)\", \"Test case has installed 3 fixture objects\", \"test_circular_reference (fixtures.tests.CircularReferenceTests)\", \"test_circular_reference_natural_key (fixtures.tests.CircularReferenceTests)\", \"test_forward_reference_fk (fixtures.tests.ForwardReferenceTests)\", \"test_forward_reference_fk_natural_key (fixtures.tests.ForwardReferenceTests)\", \"test_forward_reference_m2m (fixtures.tests.ForwardReferenceTests)\", \"test_forward_reference_m2m_natural_key (fixtures.tests.ForwardReferenceTests)\", \"test_format_discovery (fixtures.tests.FixtureTransactionTests)\", \"test_ambiguous_compressed_fixture (fixtures.tests.FixtureLoadingTests)\", \"test_compress_format_loading (fixtures.tests.FixtureLoadingTests)\", \"test_compressed_loading (fixtures.tests.FixtureLoadingTests)\", \"test_compressed_loading_bz2 (fixtures.tests.FixtureLoadingTests)\", \"test_compressed_loading_gzip (fixtures.tests.FixtureLoadingTests)\", \"test_compressed_loading_lzma (fixtures.tests.FixtureLoadingTests)\", \"test_compressed_loading_xz (fixtures.tests.FixtureLoadingTests)\", \"test_compressed_specified_loading (fixtures.tests.FixtureLoadingTests)\", \"test_db_loading (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_progressbar (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_proxy_with_concrete (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_proxy_without_concrete (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_excludes (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_file_output (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_filtering_manager (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_pks (fixtures.tests.FixtureLoadingTests)\", \"test_dumpdata_with_uuid_pks (fixtures.tests.FixtureLoadingTests)\", \"Excluding a bogus app or model should raise an error.\", \"test_load_fixture_with_special_characters (fixtures.tests.FixtureLoadingTests)\", \"test_loaddata_app_option (fixtures.tests.FixtureLoadingTests)\", \"test_loaddata_error_message (fixtures.tests.FixtureLoadingTests)\", \"test_loaddata_verbosity_three (fixtures.tests.FixtureLoadingTests)\", \"test_loading_and_dumping (fixtures.tests.FixtureLoadingTests)\", \"Loading fixtures from stdin with json and xml.\", \"test_loading_using (fixtures.tests.FixtureLoadingTests)\", \"test_loading_with_exclude_app (fixtures.tests.FixtureLoadingTests)\", \"test_loading_with_exclude_model (fixtures.tests.FixtureLoadingTests)\", \"test_output_formats (fixtures.tests.FixtureLoadingTests)\", \"Reading from stdin raises an error if format isn't specified.\", \"test_unmatched_identifier_loading (fixtures.tests.FixtureLoadingTests)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.670171",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}