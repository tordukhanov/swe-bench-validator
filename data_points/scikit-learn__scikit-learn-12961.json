{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12961",
  "base_commit": "d300f406aeeac439b4212558f208ce5a9613a1d5",
  "patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -668,6 +668,17 @@ def evaluate_candidates(candidate_params):\n                                in product(candidate_params,\n                                           cv.split(X, y, groups)))\n \n+                if len(out) < 1:\n+                    raise ValueError('No fits were performed. '\n+                                     'Was the CV iterator empty? '\n+                                     'Were there no candidates?')\n+                elif len(out) != n_candidates * n_splits:\n+                    raise ValueError('cv.split and cv.get_n_splits returned '\n+                                     'inconsistent results. Expected {} '\n+                                     'splits, got {}'\n+                                     .format(n_splits,\n+                                             len(out) // n_candidates))\n+\n                 all_candidate_params.extend(candidate_params)\n                 all_out.extend(out)\n \n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1725,3 +1725,47 @@ def test_deprecated_grid_search_iid():\n     grid = GridSearchCV(SVC(gamma='scale'), param_grid={'C': [1]}, cv=KFold(2))\n     # no warning because no stratification and 54 % 2 == 0\n     assert_no_warnings(grid.fit, X, y)\n+\n+\n+def test_empty_cv_iterator_error():\n+    # Use global X, y\n+\n+    # create cv\n+    cv = KFold(n_splits=3).split(X)\n+\n+    # pop all of it, this should cause the expected ValueError\n+    [u for u in cv]\n+    # cv is empty now\n+\n+    train_size = 100\n+    ridge = RandomizedSearchCV(Ridge(), {'alpha': [1e-3, 1e-2, 1e-1]},\n+                               cv=cv, n_jobs=-1)\n+\n+    # assert that this raises an error\n+    with pytest.raises(ValueError,\n+                       match='No fits were performed. '\n+                             'Was the CV iterator empty\\\\? '\n+                             'Were there no candidates\\\\?'):\n+        ridge.fit(X[:train_size], y[:train_size])\n+\n+\n+def test_random_search_bad_cv():\n+    # Use global X, y\n+\n+    class BrokenKFold(KFold):\n+        def get_n_splits(self, *args, **kw):\n+            return 1\n+\n+    # create bad cv\n+    cv = BrokenKFold(n_splits=3)\n+\n+    train_size = 100\n+    ridge = RandomizedSearchCV(Ridge(), {'alpha': [1e-3, 1e-2, 1e-1]},\n+                               cv=cv, n_jobs=-1)\n+\n+    # assert that this raises an error\n+    with pytest.raises(ValueError,\n+                       match='cv.split and cv.get_n_splits returned '\n+                             'inconsistent results. Expected \\\\d+ '\n+                             'splits, got \\\\d+'):\n+        ridge.fit(X[:train_size], y[:train_size])\n",
  "problem_statement": "model_selection._search._format_results ValueError not enough values to unpack (expected 5, got 0)\nI'm using `lightgbm 2.2.2` with `RandomizedSearchCV` in sklearn v 0.20.1. MacOS Mojave. \r\n\r\n```\r\nraceback (most recent call last):\r\n  File \"gbm.py\", line 1339, in <module>\r\n    scoring=score_methods, refit='nll')\r\n  File \"gbm.py\", line 1264, in param_search_lgb\r\n    rs.fit(X_train, y_train)\r\n  File \"/Users/anaconda3/lib/python3.6/site-packages/sklearn/model_selection/_search.py\", line 722, in fit\r\n    self._run_search(evaluate_candidates)\r\n  File \"/Users//anaconda3/lib/python3.6/site-packages/sklearn/model_selection/_search.py\", line 1515, in _run_search\r\n    random_state=self.random_state))\r\n  File \"/Users/anaconda3/lib/python3.6/site-packages/sklearn/model_selection/_search.py\", line 719, in evaluate_candidates\r\n    all_candidate_params, scorers, n_splits, all_out)\r\n  File \"/Users/anaconda3/lib/python3.6/site-packages/sklearn/model_selection/_search.py\", line 763, in _format_results\r\n    score_time) = zip(*out)\r\nValueError: not enough values to unpack (expected 4, got 0)\r\n```\r\n\r\nThe issue traces to these two lines below, with `return_train_score=True`\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/55bf5d93e5674f13a1134d93a11fd0cd11aabcd1/sklearn/model_selection/_search.py#L760\r\n\r\nSetting `return_train_score=False` did not work, still hitting the same issue.\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/55bf5d93e5674f13a1134d93a11fd0cd11aabcd1/sklearn/model_selection/_search.py#L763\r\n\r\nFrom the trackback, I suspect that the line below could be returning None. This doesn't always happen, but only sometimes. My param search was able to run for a few rounds, and then hit this issue. \r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/55bf5d93e5674f13a1134d93a11fd0cd11aabcd1/sklearn/model_selection/_search.py#L704-719\r\n\r\n\r\nThe problem could be that lightgbm did not return valid results (have not verified), but either way, this error could be handled better. \r\n\r\nDoes anyone have more insight into the potential cause? \r\n\r\nThanks.\r\n\n",
  "hints_text": "Thanks for reporting the issue. Could you please also include a [minimal and reproducible example](http://sscce.org/) for us to better diagnose the problem?\nHi - yes I'll try to find one, unfortunately the dataset I'm working on has some licensing restrictions, so will need to reproduce it with something else. \nI figured out why. It's triggered by a pretty silly bug in my code - my CV iterator was exhausted when I tried to use it again. This resulted a fail somewhere after calling `rs.fit(x, y)`, i.e. there was no result returned (`out is None`) for the `format_results()` method to unpack. \r\n\r\nPerhaps the better fix would be to assert that the CV iterator passed to `cv=` in the constructor, if not None, isn't empty?\r\n\nThinking about this again, this would happen when the estimator used produces fails to produced the expected output for whatever reason. The most useful thing to do would be to produce a better error or warning message?\n\nThanks. \n\nSent from my iPhone\n\n> On 23 Dec 2018, at 00:02, Adrin Jalali <notifications@github.com> wrote:\n> \n> Thanks for reporting the issue. Could you please also include a minimal and reproducible example for us to better diagnose the problem?\n> \n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n\nFailing estimators are handled in _fit_and_score, so I don't think that's a\nproblem. Checking and raising an appropriate error if the splitter returns\nan empty iterator seems a good idea.\n\nLet me look into testing for empty iterator and come back in a week or so. \nI think checking for empty `out` here seems appropriate:\nhttps://github.com/scikit-learn/scikit-learn/blob/8d7e849428a4edd16c3e2a7dc8a088f108986a17/sklearn/model_selection/_search.py#L673\n\n@jnothman \r\n\r\nThanks for the pointer, something like this? Pls feel free to suggest a better error message. I did not explicitly put empty CV iterator as a reason here as there may be other causes for an estimator to return None, which isn't great but could happen...\r\n\r\n```\r\nno_result_check = [x is None for x in out]\r\nif np.any(no_result_check):\r\n    raise ValueError('Estimator returned no result (None)')\r\n```\r\n\nYou really need to implement a test. I don't think your proposed snippet will solve the problem.\r\n\r\nI think you want something like\r\n```py\r\nif not out:\r\n    raise ValueError('No fits were performed. Was the CV iterator empty? Were there no candidates?')\r\n```\r\n\r\nA variant we could consider is:\r\n```py\r\nif len(out) != n_candidates * n_splits:\r\n    raise ValueError('cv.split and cv.get_n_splits returned inconsistent results. Expected {} splits, got {}'.format(n_splits, len(out) // n_candidates))\r\n```\nfinally getting around to this, will spend some time in the next couple of days for a PR. ",
  "created_at": "2019-01-12T01:12:23Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/model_selection/tests/test_search.py::test_empty_cv_iterator_error\", \"sklearn/model_selection/tests/test_search.py::test_random_search_bad_cv\"]",
  "PASS_TO_PASS": "[\"sklearn/model_selection/tests/test_search.py::test_validate_parameter_grid_input[0-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_validate_parameter_grid_input[input1-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_validate_parameter_grid_input[input2-TypeError-Parameter\", \"sklearn/model_selection/tests/test_search.py::test_parameter_grid\", \"sklearn/model_selection/tests/test_search.py::test_grid_search\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_with_fit_params\", \"sklearn/model_selection/tests/test_search.py::test_random_search_with_fit_params\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_no_score\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_score_method\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_groups\", \"sklearn/model_selection/tests/test_search.py::test_classes__property\", \"sklearn/model_selection/tests/test_search.py::test_trivial_cv_results_attr\", \"sklearn/model_selection/tests/test_search.py::test_no_refit\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_error\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_one_grid_point\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_when_param_grid_includes_range\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_bad_param_grid\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_sparse\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_sparse_scoring\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_precomputed_kernel\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_precomputed_kernel_error_nonsquare\", \"sklearn/model_selection/tests/test_search.py::test_refit\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_invalid_type\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_out_bound\", \"sklearn/model_selection/tests/test_search.py::test_refit_callable_multi_metric\", \"sklearn/model_selection/tests/test_search.py::test_gridsearch_nd\", \"sklearn/model_selection/tests/test_search.py::test_X_as_list\", \"sklearn/model_selection/tests/test_search.py::test_y_as_list\", \"sklearn/model_selection/tests/test_search.py::test_pandas_input\", \"sklearn/model_selection/tests/test_search.py::test_unsupervised_grid_search\", \"sklearn/model_selection/tests/test_search.py::test_gridsearch_no_predict\", \"sklearn/model_selection/tests/test_search.py::test_param_sampler\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_results\", \"sklearn/model_selection/tests/test_search.py::test_random_search_cv_results\", \"sklearn/model_selection/tests/test_search.py::test_search_iid_param\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_results_multimetric\", \"sklearn/model_selection/tests/test_search.py::test_random_search_cv_results_multimetric\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_results_rank_tie_breaking\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_results_none_param\", \"sklearn/model_selection/tests/test_search.py::test_search_cv_timing\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_correct_score_results\", \"sklearn/model_selection/tests/test_search.py::test_fit_grid_point\", \"sklearn/model_selection/tests/test_search.py::test_pickle\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_with_multioutput_data\", \"sklearn/model_selection/tests/test_search.py::test_predict_proba_disabled\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_allows_nans\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_failing_classifier\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_failing_classifier_raise\", \"sklearn/model_selection/tests/test_search.py::test_parameters_sampler_replacement\", \"sklearn/model_selection/tests/test_search.py::test_stochastic_gradient_loss_param\", \"sklearn/model_selection/tests/test_search.py::test_search_train_scores_set_to_false\", \"sklearn/model_selection/tests/test_search.py::test_grid_search_cv_splits_consistency\", \"sklearn/model_selection/tests/test_search.py::test_transform_inverse_transform_round_trip\", \"sklearn/model_selection/tests/test_search.py::test_custom_run_search\", \"sklearn/model_selection/tests/test_search.py::test__custom_fit_no_run_search\", \"sklearn/model_selection/tests/test_search.py::test_deprecated_grid_search_iid\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.969725",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}