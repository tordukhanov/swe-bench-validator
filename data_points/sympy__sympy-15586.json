{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15586",
  "base_commit": "1592318e5d7006c197f55134dd8e9b59f012af64",
  "patch": "diff --git a/sympy/matrices/expressions/inverse.py b/sympy/matrices/expressions/inverse.py\n--- a/sympy/matrices/expressions/inverse.py\n+++ b/sympy/matrices/expressions/inverse.py\n@@ -22,13 +22,13 @@ class Inverse(MatPow):\n     >>> A = MatrixSymbol('A', 3, 3)\n     >>> B = MatrixSymbol('B', 3, 3)\n     >>> Inverse(A)\n-    A^-1\n+    A**(-1)\n     >>> A.inverse() == Inverse(A)\n     True\n     >>> (A*B).inverse()\n-    B^-1*A^-1\n+    B**(-1)*A**(-1)\n     >>> Inverse(A*B)\n-    (A*B)^-1\n+    (A*B)**(-1)\n \n     \"\"\"\n     is_Inverse = True\n@@ -77,7 +77,7 @@ def refine_Inverse(expr, assumptions):\n     >>> from sympy import MatrixSymbol, Q, assuming, refine\n     >>> X = MatrixSymbol('X', 2, 2)\n     >>> X.I\n-    X^-1\n+    X**(-1)\n     >>> with assuming(Q.orthogonal(X)):\n     ...     print(refine(X.I))\n     X.T\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -499,6 +499,16 @@ def _print_MatMul(self, expr):\n         \"Matrix multiplication printer\"\n         return '({0})'.format(').dot('.join(self._print(i) for i in expr.args))\n \n+    def _print_MatPow(self, expr):\n+        \"Matrix power printer\"\n+        return '{0}({1}, {2})'.format(self._module_format('numpy.linalg.matrix_power'),\n+            self._print(expr.args[0]), self._print(expr.args[1]))\n+\n+    def _print_Inverse(self, expr):\n+        \"Matrix inverse printer\"\n+        return '{0}({1})'.format(self._module_format('numpy.linalg.inv'),\n+            self._print(expr.args[0]))\n+\n     def _print_DotProduct(self, expr):\n         # DotProduct allows any shape order, but numpy.dot does matrix\n         # multiplication, so we have to make sure it gets 1 x n by n x 1.\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -209,7 +209,7 @@ def _print_AccumulationBounds(self, i):\n                                         self._print(i.max))\n \n     def _print_Inverse(self, I):\n-        return \"%s^-1\" % self.parenthesize(I.arg, PRECEDENCE[\"Pow\"])\n+        return \"%s**(-1)\" % self.parenthesize(I.arg, PRECEDENCE[\"Pow\"])\n \n     def _print_Lambda(self, obj):\n         args, expr = obj.args\ndiff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -92,7 +92,7 @@\n MODULES = {\n     \"math\": (MATH, MATH_DEFAULT, MATH_TRANSLATIONS, (\"from math import *\",)),\n     \"mpmath\": (MPMATH, MPMATH_DEFAULT, MPMATH_TRANSLATIONS, (\"from mpmath import *\",)),\n-    \"numpy\": (NUMPY, NUMPY_DEFAULT, NUMPY_TRANSLATIONS, (\"import numpy; from numpy import *\",)),\n+    \"numpy\": (NUMPY, NUMPY_DEFAULT, NUMPY_TRANSLATIONS, (\"import numpy; from numpy import *; from numpy.linalg import *\",)),\n     \"scipy\": (SCIPY, SCIPY_DEFAULT, SCIPY_TRANSLATIONS, (\"import numpy; import scipy; from scipy import *; from scipy.special import *\",)),\n     \"tensorflow\": (TENSORFLOW, TENSORFLOW_DEFAULT, TENSORFLOW_TRANSLATIONS, (\"import_module('tensorflow')\",)),\n     \"sympy\": (SYMPY, SYMPY_DEFAULT, {}, (\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -8,7 +8,7 @@\n from sympy.external import import_module\n from sympy.logic import And, Or\n from sympy.functions import acos, Piecewise, sign\n-from sympy.matrices import SparseMatrix\n+from sympy.matrices import SparseMatrix, MatrixSymbol\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n@@ -45,6 +45,9 @@ def test_MpmathPrinter():\n def test_NumPyPrinter():\n     p = NumPyPrinter()\n     assert p.doprint(sign(x)) == 'numpy.sign(x)'\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    assert p.doprint(A**(-1)) == \"numpy.linalg.inv(A)\"\n+    assert p.doprint(A**5) == \"numpy.linalg.matrix_power(A, 5)\"\n \n \n def test_SciPyPrinter():\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -802,6 +802,8 @@ def test_MatrixSymbol_printing():\n \n     assert str(A - A*B - B) == \"A - A*B - B\"\n     assert str(A*B - (A+B)) == \"-(A + B) + A*B\"\n+    assert str(A**(-1)) == \"A**(-1)\"\n+    assert str(A**3) == \"A**3\"\n \n \n def test_Subs_printing():\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -10,7 +10,8 @@\n     Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function,\n     true, false, And, Or, Not, ITE, Min, Max, floor, diff, IndexedBase, Sum,\n     DotProduct, Eq, Dummy, sinc, erf, erfc, factorial, gamma, loggamma,\n-    digamma, RisingFactorial, besselj, bessely, besseli, besselk, S)\n+    digamma, RisingFactorial, besselj, bessely, besseli, besselk, S,\n+    MatrixSymbol)\n from sympy.printing.lambdarepr import LambdaPrinter\n from sympy.printing.pycode import NumPyPrinter\n from sympy.utilities.lambdify import implemented_function, lambdastr\n@@ -1045,3 +1046,14 @@ def test_imag_real():\n \n     f_im = lambdify([z], sympy.im(z))  # see #15400\n     assert f_im(val) == val.imag\n+\n+\n+def test_MatrixSymbol_issue_15578():\n+    if not numpy:\n+        skip(\"numpy not installed\")\n+    A = MatrixSymbol('A', 2, 2)\n+    A0 = numpy.array([[1, 2], [3, 4]])\n+    f = lambdify(A, A**(-1))\n+    assert numpy.allclose(f(A0), numpy.array([[-2., 1.], [1.5, -0.5]]))\n+    g = lambdify(A, A**3)\n+    assert numpy.allclose(g(A0), numpy.array([[37, 54], [81, 118]]))\n",
  "problem_statement": "Can't get an inverted float matrix with sympy and numpy\nTrying to get an inverted matrix with sympy and numpy.\r\n\r\n```\r\nimport numpy as np\r\nfrom sympy import *\r\ninit_printing()\r\n\r\n\r\nX0 = MatrixSymbol('X0',2,2)\r\nxx = np.random.rand(4,4) \r\n#xx = np.random.randint(10,size=(4,4)) # this line makes it workable\r\nX0Inv = X0**-1\r\nnp.linalg.inv(xx)\r\nsymInv = lambdify(X0,X0Inv)\r\nsymInv(xx)\r\n```\r\n\r\nlambify fails with the following message:\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-20-c2193b2ae217> in <module>()\r\n     10 np.linalg.inv(xx)\r\n     11 symInv = lambdify(X0,X0Inv)\r\n---> 12 symInv(xx)\r\n\r\n/opt/anaconda3/lib/python3.6/site-packages/numpy/__init__.py in <lambda>(X0)\r\n\r\nTypeError: ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```\r\n[stackoverflow discussion](https://stackoverflow.com/questions/53488588/python-get-an-inverted-float-matrix-with-sympy-and-numpy)\r\n\r\n[live version of the code](https://pyfiddle.io/fiddle/5d120532-1198-40a1-9fdc-4eb988bce2f7/?i=true)\r\n\r\n\n",
  "hints_text": "There are (at least) two issues here. First, it's str printer rendering Inverse as `^-1`. Compare\r\n```\r\n>>> A = MatrixSymbol('A', 2, 2)\r\n>>> A**(-3)\r\nA**(-3)\r\n>>> A**(-1)\r\nA^-1\r\n```\r\n\r\nSecond, it's the fact that NumPy printer does not render Inverse as `np.linalg.inv` (and other powers as `np.linalg.matrix_power`). I tried to fix that (so far, for inverses)...\r\n\r\n```diff\r\n--- a/sympy/printing/pycode.py\r\n+++ b/sympy/printing/pycode.py\r\n@@ -495,6 +495,11 @@ def _print_seq(self, seq):\r\n         delimite.get('delimiter', ', ')\r\n         return '({},)'.format(delimiter.join(self._print(item) for item in seq))\r\n \r\n+    def _print_Inverse(self, expr):\r\n+        \"Matrix inverse printer\"\r\n+        return '{0}({1})'.format(self._module_format('numpy.linalg.inv'),\r\n+            self._print(expr.args[0]))\r\n+\r\n     def _print_MatMul(self, expr):\r\n         \"Matrix multiplication printer\"\r\n         return '({0})'.format(').dot('.join(self._print(i) for i in expr.args))\r\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\r\nindex dc0d524f3..89d8b761b 100644\r\n--- a/sympy/printing/str.py\r\n+++ b/sympy/printing/str.py\r\n@@ -209,7 +209,7 @@ def _print_AccumulationBounds(self, i):\r\n                                         self._print(i.max))\r\n \r\n     def _print_Inverse(self, I):\r\n-        return \"%s^-1\" % self.parenthesize(I.arg, PRECEDENCE[\"Pow\"])\r\n+        return \"%s**(-1)\" % self.parenthesize(I.arg, PRECEDENCE[\"Pow\"])\r\n```\r\n\r\nOddly, with these changes `lambdify` generates\r\n```\r\n    def _lambdifygenerated(X0):\r\n        return (inv(X0))\r\n```\r\nwhich throws \"`inv` is undefined\".  I ran out of energy trying to track down the reason for this. ",
  "created_at": "2018-12-05T05:46:27Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_NumPyPrinter\", \"test_MatrixSymbol_printing\"]",
  "PASS_TO_PASS": "[\"test_PythonCodePrinter\", \"test_MpmathPrinter\", \"test_SciPyPrinter\", \"test_pycode_reserved_words\", \"test_printmethod\", \"test_codegen_ast_nodes\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_EulerGamma\", \"test_Exp\", \"test_factorial\", \"test_Function\", \"test_Geometry\", \"test_GoldenRatio\", \"test_TribonacciConstant\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integer\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_Mul\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_Pow\", \"test_sqrt\", \"test_Rational\", \"test_Float\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_GroebnerBasis\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_noncommutative\", \"test_empty_printer\", \"test_settings\", \"test_RandomDomain\", \"test_FiniteSet\", \"test_PrettyPoly\", \"test_categories\", \"test_Tr\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_no_args\", \"test_single_arg\", \"test_list_args\", \"test_nested_args\", \"test_str_args\", \"test_own_namespace_1\", \"test_own_namespace_2\", \"test_own_module\", \"test_bad_args\", \"test_atoms\", \"test_sympy_lambda\", \"test_math_lambda\", \"test_mpmath_lambda\", \"test_number_precision\", \"test_mpmath_precision\", \"test_math_transl\", \"test_mpmath_transl\", \"test_exponentiation\", \"test_trig\", \"test_vector_simple\", \"test_vector_discontinuous\", \"test_trig_symbolic\", \"test_trig_float\", \"test_docs\", \"test_math\", \"test_sin\", \"test_matrix\", \"test_issue9474\", \"test_integral\", \"test_sym_single_arg\", \"test_sym_list_args\", \"test_sym_integral\", \"test_namespace_order\", \"test_namespace_type\", \"test_imps\", \"test_imps_errors\", \"test_imps_wrong_args\", \"test_lambdify_imps\", \"test_dummification\", \"test_curly_matrix_symbol\", \"test_python_keywords\", \"test_lambdify_docstring\", \"test_special_printers\", \"test_issue_2790\", \"test_issue_12092\", \"test_issue_14911\", \"test_ITE\", \"test_Min_Max\", \"test_issue_12173\", \"test_sinc_mpmath\", \"test_lambdify_dummy_arg\", \"test_lambdify_mixed_symbol_dummy_args\", \"test_lambdify_inspect\", \"test_issue_14941\", \"test_lambdify_Derivative_arg_issue_16468\", \"test_imag_real\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.102299",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}