{
  "repo": "django/django",
  "instance_id": "django__django-15678",
  "base_commit": "441103a04d1d167dc870eaaf90e3fba974f67c93",
  "patch": "diff --git a/django/contrib/auth/hashers.py b/django/contrib/auth/hashers.py\n--- a/django/contrib/auth/hashers.py\n+++ b/django/contrib/auth/hashers.py\n@@ -17,6 +17,7 @@\n     md5,\n     pbkdf2,\n )\n+from django.utils.deprecation import RemovedInDjango50Warning\n from django.utils.module_loading import import_string\n from django.utils.translation import gettext_noop as _\n \n@@ -797,6 +798,7 @@ def harden_runtime(self, password, encoded):\n         pass\n \n \n+# RemovedInDjango50Warning.\n class CryptPasswordHasher(BasePasswordHasher):\n     \"\"\"\n     Password hashing using UNIX crypt (not recommended)\n@@ -807,6 +809,14 @@ class CryptPasswordHasher(BasePasswordHasher):\n     algorithm = \"crypt\"\n     library = \"crypt\"\n \n+    def __init__(self, *args, **kwargs):\n+        warnings.warn(\n+            \"django.contrib.auth.hashers.CryptPasswordHasher is deprecated.\",\n+            RemovedInDjango50Warning,\n+            stacklevel=2,\n+        )\n+        super().__init__(*args, **kwargs)\n+\n     def salt(self):\n         return get_random_string(2)\n \n",
  "test_patch": "diff --git a/tests/auth_tests/test_hashers.py b/tests/auth_tests/test_hashers.py\n--- a/tests/auth_tests/test_hashers.py\n+++ b/tests/auth_tests/test_hashers.py\n@@ -18,9 +18,11 @@\n     is_password_usable,\n     make_password,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, ignore_warnings\n from django.test.utils import override_settings\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n+# RemovedInDjango50Warning.\n try:\n     import crypt\n except ImportError:\n@@ -201,6 +203,7 @@ def test_unsalted_sha1_encode_invalid_salt(self):\n         with self.assertRaisesMessage(ValueError, msg):\n             hasher.encode(\"password\", salt=\"salt\")\n \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n     @skipUnless(crypt, \"no crypt module to generate password.\")\n     @override_settings(\n         PASSWORD_HASHERS=[\"django.contrib.auth.hashers.CryptPasswordHasher\"]\n@@ -219,6 +222,7 @@ def test_crypt(self):\n         self.assertTrue(check_password(\"\", blank_encoded))\n         self.assertFalse(check_password(\" \", blank_encoded))\n \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n     @skipUnless(crypt, \"no crypt module to generate password.\")\n     @override_settings(\n         PASSWORD_HASHERS=[\"django.contrib.auth.hashers.CryptPasswordHasher\"]\n@@ -229,6 +233,7 @@ def test_crypt_encode_invalid_salt(self):\n         with self.assertRaisesMessage(ValueError, msg):\n             hasher.encode(\"password\", salt=\"a\")\n \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n     @skipUnless(crypt, \"no crypt module to generate password.\")\n     @override_settings(\n         PASSWORD_HASHERS=[\"django.contrib.auth.hashers.CryptPasswordHasher\"]\n@@ -240,6 +245,15 @@ def test_crypt_encode_invalid_hash(self):\n             with self.assertRaisesMessage(TypeError, msg):\n                 hasher.encode(\"password\", salt=\"ab\")\n \n+    @skipUnless(crypt, \"no crypt module to generate password.\")\n+    @override_settings(\n+        PASSWORD_HASHERS=[\"django.contrib.auth.hashers.CryptPasswordHasher\"]\n+    )\n+    def test_crypt_deprecation_warning(self):\n+        msg = \"django.contrib.auth.hashers.CryptPasswordHasher is deprecated.\"\n+        with self.assertRaisesMessage(RemovedInDjango50Warning, msg):\n+            get_hasher(\"crypt\")\n+\n     @skipUnless(bcrypt, \"bcrypt not installed\")\n     def test_bcrypt_sha256(self):\n         encoded = make_password(\"lètmein\", hasher=\"bcrypt_sha256\")\n",
  "problem_statement": "Deprecate CryptPasswordHasher.\nDescription\n\t\nCryptPasswordHasher was added 15 years ago mainly to support legacy UNIX apps. It's almost undocumented, not recommended, and supported only on UNIX. Moreover crypt module was deprecated in Python 3.11 (see ​https://github.com/python/cpython/commit/f45aa8f304a12990c2ca687f2088f04b07906033).\nWe should deprecate it in Django 4.1 and remove in Django 5.0.\n",
  "hints_text": "ACK, while we are on it I wonder if we should deprecate the unsalted & sha/md5 hashers as well. It is time to face reality, if you haven't upgraded Django by now and are still on one of those old algorithms your installation is probably 10 years or older?\nReplying to Florian Apolloner: ACK, while we are on it I wonder if we should deprecate the unsalted & sha/md5 hashers as well. It is time to face reality, if you haven't upgraded Django by now and are still on one of those old algorithms your installation is probably 10 years or older? MD5PasswordHasher is still a nice hook for faster testing :)",
  "created_at": "2022-05-10T10:14:09Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_crypt_deprecation_warning (auth_tests.test_hashers.TestUtilsHashPass)\"]",
  "PASS_TO_PASS": "[\"test_attributes (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_decode (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_encode (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_harden_runtime (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_load_library_importerror (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_load_library_no_algorithm (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_must_update (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_safe_summary (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_verify (auth_tests.test_hashers.BasePasswordHasherTests)\", \"test_scrypt (auth_tests.test_hashers.TestUtilsHashPassScrypt)\", \"test_scrypt_decode (auth_tests.test_hashers.TestUtilsHashPassScrypt)\", \"test_scrypt_upgrade (auth_tests.test_hashers.TestUtilsHashPassScrypt)\", \"test_argon2 (auth_tests.test_hashers.TestUtilsHashPassArgon2)\", \"test_argon2_decode (auth_tests.test_hashers.TestUtilsHashPassArgon2)\", \"test_argon2_upgrade (auth_tests.test_hashers.TestUtilsHashPassArgon2)\", \"test_argon2_version_upgrade (auth_tests.test_hashers.TestUtilsHashPassArgon2)\", \"test_bad_algorithm (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_harden_runtime (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_salt_check (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_sha256 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcrypt_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bcryptsha256_salt_check (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_bytes (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_check_password_calls_harden_runtime (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_crypt (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_crypt_encode_invalid_hash (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_crypt_encode_invalid_salt (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_encode_invalid_salt (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_encode_password_required (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_invalid_password (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_is_password_usable (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_low_level_pbkdf2 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_low_level_pbkdf2_sha1 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_md5 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_no_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_no_upgrade_on_incorrect_pass (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2_harden_runtime (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_pbkdf2_upgrade_new_hasher (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_sha1 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_simple (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unsalted_md5 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unsalted_md5_encode_invalid_salt (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unsalted_sha1 (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_unsalted_sha1_encode_invalid_salt (auth_tests.test_hashers.TestUtilsHashPass)\", \"Makes sure specifying no plain password with a valid encoded password\", \"test_unusable (auth_tests.test_hashers.TestUtilsHashPass)\", \"test_upgrade (auth_tests.test_hashers.TestUtilsHashPass)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.737378",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}