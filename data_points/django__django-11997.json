{
  "repo": "django/django",
  "instance_id": "django__django-11997",
  "base_commit": "17752003a8c115ff79f5f21655f5e9b8b2af67f4",
  "patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -152,12 +152,13 @@ def floatformat(text, arg=-1):\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\n-    sign, digits, exponent = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec)).as_tuple()\n+    rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))\n+    sign, digits, exponent = rounded_d.as_tuple()\n     digits = [str(digit) for digit in reversed(digits)]\n     while len(digits) <= abs(exponent):\n         digits.append('0')\n     digits.insert(-exponent, '.')\n-    if sign:\n+    if sign and rounded_d:\n         digits.append('-')\n     number = ''.join(reversed(digits))\n     return mark_safe(formats.number_format(number, abs(p)))\n",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -26,7 +26,9 @@ def test_inputs(self):\n         self.assertEqual(floatformat(7.7), '7.7')\n         self.assertEqual(floatformat(7.0), '7')\n         self.assertEqual(floatformat(0.7), '0.7')\n+        self.assertEqual(floatformat(-0.7), '-0.7')\n         self.assertEqual(floatformat(0.07), '0.1')\n+        self.assertEqual(floatformat(-0.07), '-0.1')\n         self.assertEqual(floatformat(0.007), '0.0')\n         self.assertEqual(floatformat(0.0), '0')\n         self.assertEqual(floatformat(7.7, 0), '8')\n@@ -62,6 +64,16 @@ def test_zero_values(self):\n         self.assertEqual(floatformat(0, 10), '0.0000000000')\n         self.assertEqual(floatformat(0.000000000000000000015, 20), '0.00000000000000000002')\n \n+    def test_negative_zero_values(self):\n+        tests = [\n+            (-0.01, -1, '0.0'),\n+            (-0.001, 2, '0.00'),\n+            (-0.499, 0, '0'),\n+        ]\n+        for num, decimal_places, expected in tests:\n+            with self.subTest(num=num, decimal_places=decimal_places):\n+                self.assertEqual(floatformat(num, decimal_places), expected)\n+\n     def test_infinity(self):\n         pos_inf = float(1e30000)\n         neg_inf = float(-1e30000)\n",
  "problem_statement": "The floatformat filter sometimes returns \"-0\" instead of \"0\".\nDescription\n\t\nFor values between 0 and -0.5, the floatformat filter returns \"-0\" where I would expect it to return \"0\".\nFor example:\n$ python -m django --version\n2.2.5\n$ ./manage.py shell\nPython 3.5.3 (default, Sep 27 2018, 17:25:39) \n[GCC 6.3.0 20170516] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from django.template.defaultfilters import floatformat\n>>> floatformat(-0.1, 0)\n'-0'\n>>> floatformat(-0.01, 1)\n'-0.0'\n>>> floatformat(-0.001, 2)\n'-0.00'\n>>> floatformat(-0.4, 0)\n'-0'\nIf others agree that this is a bug, I'll submit a patch.\n",
  "hints_text": "I don't think it's an issue, this behavior is consistent with builtin round() and -0 exists in floating-point arithmetic. You can start a discussion on the DevelopersMailingList if you believe that this behavior should be changed. We can re-open the ticket if we reach a consensus on a mailing list.\nRe-opening following a discussion on the django-developers mailing list.\nâ€‹https://github.com/django/django/pull/11997",
  "created_at": "2019-10-31T02:48:00Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_negative_zero_values (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_zero_values (template_tests.filter_tests.test_floatformat.FunctionTests)\"]",
  "PASS_TO_PASS": "[\"test_float_dunder_method (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_infinity (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_inputs (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_low_decimal_precision (template_tests.filter_tests.test_floatformat.FunctionTests)\", \"test_floatformat01 (template_tests.filter_tests.test_floatformat.FloatformatTests)\", \"test_floatformat02 (template_tests.filter_tests.test_floatformat.FloatformatTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.590537",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}