{
  "repo": "django/django",
  "instance_id": "django__django-16281",
  "base_commit": "2848e5d0ce5cf3c31fe87525536093b21d570f69",
  "patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -174,7 +174,7 @@ def alter_field(self, model, old_field, new_field, strict=False):\n             super().alter_field(model, old_field, new_field, strict=strict)\n \n     def _remake_table(\n-        self, model, create_field=None, delete_field=None, alter_field=None\n+        self, model, create_field=None, delete_field=None, alter_fields=None\n     ):\n         \"\"\"\n         Shortcut to transform a model from old_model into new_model\n@@ -213,15 +213,16 @@ def is_self_referential(f):\n         # If any of the new or altered fields is introducing a new PK,\n         # remove the old one\n         restore_pk_field = None\n-        if getattr(create_field, \"primary_key\", False) or (\n-            alter_field and getattr(alter_field[1], \"primary_key\", False)\n+        alter_fields = alter_fields or []\n+        if getattr(create_field, \"primary_key\", False) or any(\n+            getattr(new_field, \"primary_key\", False) for _, new_field in alter_fields\n         ):\n             for name, field in list(body.items()):\n-                if field.primary_key and not (\n+                if field.primary_key and not any(\n                     # Do not remove the old primary key when an altered field\n                     # that introduces a primary key is the same field.\n-                    alter_field\n-                    and name == alter_field[1].name\n+                    name == new_field.name\n+                    for _, new_field in alter_fields\n                 ):\n                     field.primary_key = False\n                     restore_pk_field = field\n@@ -237,7 +238,7 @@ def is_self_referential(f):\n                     self.effective_default(create_field),\n                 )\n         # Add in any altered fields\n-        if alter_field:\n+        for alter_field in alter_fields:\n             old_field, new_field = alter_field\n             body.pop(old_field.name, None)\n             mapping.pop(old_field.column, None)\n@@ -457,7 +458,7 @@ def _alter_field(\n                 )\n             )\n         # Alter by remaking table\n-        self._remake_table(model, alter_field=(old_field, new_field))\n+        self._remake_table(model, alter_fields=[(old_field, new_field)])\n         # Rebuild tables with FKs pointing to this field.\n         old_collation = old_db_params.get(\"collation\")\n         new_collation = new_db_params.get(\"collation\")\n@@ -495,18 +496,30 @@ def _alter_many_to_many(self, model, old_field, new_field, strict):\n             # propagate this altering.\n             self._remake_table(\n                 old_field.remote_field.through,\n-                alter_field=(\n-                    # The field that points to the target model is needed, so\n-                    # we can tell alter_field to change it - this is\n-                    # m2m_reverse_field_name() (as opposed to m2m_field_name(),\n-                    # which points to our model).\n-                    old_field.remote_field.through._meta.get_field(\n-                        old_field.m2m_reverse_field_name()\n+                alter_fields=[\n+                    (\n+                        # The field that points to the target model is needed,\n+                        # so that table can be remade with the new m2m field -\n+                        # this is m2m_reverse_field_name().\n+                        old_field.remote_field.through._meta.get_field(\n+                            old_field.m2m_reverse_field_name()\n+                        ),\n+                        new_field.remote_field.through._meta.get_field(\n+                            new_field.m2m_reverse_field_name()\n+                        ),\n                     ),\n-                    new_field.remote_field.through._meta.get_field(\n-                        new_field.m2m_reverse_field_name()\n+                    (\n+                        # The field that points to the model itself is needed,\n+                        # so that table can be remade with the new self field -\n+                        # this is m2m_field_name().\n+                        old_field.remote_field.through._meta.get_field(\n+                            old_field.m2m_field_name()\n+                        ),\n+                        new_field.remote_field.through._meta.get_field(\n+                            new_field.m2m_field_name()\n+                        ),\n                     ),\n-                ),\n+                ],\n             )\n             return\n \n",
  "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1796,6 +1796,43 @@ def test_alter_model_table_m2m(self):\n         self.assertTableExists(original_m2m_table)\n         self.assertTableNotExists(new_m2m_table)\n \n+    def test_alter_model_table_m2m_field(self):\n+        app_label = \"test_talm2mfl\"\n+        project_state = self.set_up_test_model(app_label, second_model=True)\n+        # Add the M2M field.\n+        project_state = self.apply_operations(\n+            app_label,\n+            project_state,\n+            operations=[\n+                migrations.AddField(\n+                    \"Pony\",\n+                    \"stables\",\n+                    models.ManyToManyField(\"Stable\"),\n+                )\n+            ],\n+        )\n+        m2m_table = f\"{app_label}_pony_stables\"\n+        self.assertColumnExists(m2m_table, \"pony_id\")\n+        self.assertColumnExists(m2m_table, \"stable_id\")\n+        # Point the M2M field to self.\n+        with_field_state = project_state.clone()\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"Pony\",\n+                name=\"stables\",\n+                field=models.ManyToManyField(\"self\"),\n+            )\n+        ]\n+        project_state = self.apply_operations(\n+            app_label, project_state, operations=operations\n+        )\n+        self.assertColumnExists(m2m_table, \"from_pony_id\")\n+        self.assertColumnExists(m2m_table, \"to_pony_id\")\n+        # Reversal.\n+        self.unapply_operations(app_label, with_field_state, operations=operations)\n+        self.assertColumnExists(m2m_table, \"pony_id\")\n+        self.assertColumnExists(m2m_table, \"stable_id\")\n+\n     def test_alter_field(self):\n         \"\"\"\n         Tests the AlterField operation.\n",
  "problem_statement": "Migration changing ManyToManyField target to 'self' doesn't work correctly\nDescription\n\t\nSteps to reproduce:\nCreate Models:\nclass Bar(models.Model):\n\tpass\nclass Foo(models.Model):\n\tbar = models.ManyToManyField('Bar', blank=True)\nMigrate:\n./manage.py makemigrations app\n./manage.py migrate\nChange type of the ManyToManyField to Foo:\nclass Bar(models.Model):\n\tpass\nclass Foo(models.Model):\n\tbar = models.ManyToManyField('Foo', blank=True)\nMigrate (see above)\nIn the admin page, navigate to \"add Foo\", click save\nYou should see an OperationalError, \"no such column: app_foo_bar.from_foo_id\"\n",
  "hints_text": "I believe it works correctly as long as the new target model isn't 'self'.\nCan I check out what you want? You can use 'self' instead of 'Foo' like this : class Foo(models.Model): bar = models.ManyToManyField('self', blank=True) You meant that we should use 'Foo' rather than 'self', right?\nReplying to SShayashi: Can I check out what you want? You can use 'self' instead of 'Foo' like this : class Foo(models.Model): bar = models.ManyToManyField('self', blank=True) You meant that we should use 'Foo' rather than 'self', right? Exactly, though i wasn't aware that self would work in that context. I think i like naming the type directly more, since self could be easily confused with the self argument of class methods.\nWhile altering a many to many field , a new table is created (which is later renamed) and data is copied from old table to new table and then old table is deleted. This issue caused while making this new table ​here, we are only altering the m2m_reverse_fields ignoring the m2m_fields that points to our model. But both m2m_reverse_fieldsand m2m_fields needs to be changed. Hope i'm proceeding into the right direction.\nIt is also failing for the case if process is reversed, like when we migrate passing self/Foo to the m2m field and then change it to Bar.(due to the same reason that we are not altering m2m_fields) I tried to alter self pointing field and with the changes below its working as expected for the above issue and passing all the tests as well. django/db/backends/sqlite3/schema.py diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py index 88fa466f79..970820827e 100644 a b class DatabaseSchemaEditor(BaseDatabaseSchemaEditor): 174174 super().alter_field(model, old_field, new_field, strict=strict) 175175 176176 def _remake_table( 177 self, model, create_field=None, delete_field=None, alter_field=None 177 self, model, create_field=None, delete_field=None, alter_field=None, alter_self_field=None 178178 ): 179179 \"\"\" 180180 Shortcut to transform a model from old_model into new_model … … class DatabaseSchemaEditor(BaseDatabaseSchemaEditor): 236236 mapping[create_field.column] = self.prepare_default( 237237 self.effective_default(create_field), 238238 ) 239 240 # Alter field pointing to the model itself. 241 if alter_self_field: 242 old_self_field, new_self_field = alter_self_field 243 body.pop(old_self_field.name, None) 244 mapping.pop(old_self_field.column, None) 245 body[new_self_field.name] = new_self_field 246 mapping[new_self_field.column] = self.quote_name(old_self_field.column) 247 rename_mapping[old_self_field.name] = new_self_field.name 248 239249 # Add in any altered fields 240250 if alter_field: 241251 old_field, new_field = alter_field … … class DatabaseSchemaEditor(BaseDatabaseSchemaEditor): 507517 new_field.m2m_reverse_field_name() 508518 ), 509519 ), 520 alter_self_field=( 521 old_field.remote_field.through._meta.get_field( 522 old_field.m2m_field_name() 523 ), 524 new_field.remote_field.through._meta.get_field( 525 new_field.m2m_field_name() 526 ), 527 ), 510528 ) 511529 return\nHi Bhuvnesh I tried to alter self pointing field and with the changes below its working as expected for the above issue and passing all the tests as well. If the tests are all passing it's worth opening a PR to make review easier. (Make sure to add a new test for the issue here too.) Thanks.",
  "created_at": "2022-11-10T18:52:13Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_alter_model_table_m2m_field (migrations.test_operations.OperationTests)\"]",
  "PASS_TO_PASS": "[\"test_references_model_mixin (migrations.test_operations.TestCreateModel)\", \"test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_model (migrations.test_operations.FieldOperationTests)\", \"Tests the AddField operation.\", \"The CreateTable operation ignores swapped models.\", \"Tests the DeleteModel operation ignores swapped models.\", \"Add/RemoveIndex operations ignore swapped models.\", \"Tests the AddField operation on TextField/BinaryField.\", \"Tests the AddField operation on TextField.\", \"test_add_constraint (migrations.test_operations.OperationTests)\", \"test_add_constraint_combinable (migrations.test_operations.OperationTests)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)\", \"test_add_covering_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"Tests the AddField operation with a ManyToManyField.\", \"Tests the AddField operation's state alteration\", \"test_add_func_index (migrations.test_operations.OperationTests)\", \"test_add_func_unique_constraint (migrations.test_operations.OperationTests)\", \"Test the AddIndex operation.\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_add_or_constraint (migrations.test_operations.OperationTests)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"Tests the AlterField operation.\", \"AlterField operation is a noop when adding only a db_column and the\", \"test_alter_field_m2m (migrations.test_operations.OperationTests)\", \"The AlterField operation on primary keys (things like PostgreSQL's\", \"Tests the AlterField operation on primary keys changes any FKs pointing to it.\", \"test_alter_field_pk_fk_char_to_int (migrations.test_operations.OperationTests)\", \"AlterField operation of db_collation on primary keys changes any FKs\", \"test_alter_field_pk_mti_and_fk_to_base (migrations.test_operations.OperationTests)\", \"test_alter_field_pk_mti_fk (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)\", \"If AlterField doesn't reload state appropriately, the second AlterField\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_with_func_index (migrations.test_operations.OperationTests)\", \"test_alter_field_with_func_unique_constraint (migrations.test_operations.OperationTests)\", \"Test AlterField operation with an index to ensure indexes created via\", \"Creating and then altering an FK works correctly\", \"Altering an FK to a non-FK works (#23244)\", \"Tests the AlterIndexTogether operation.\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests)\", \"The managers on a model are set.\", \"Tests the AlterModelOptions operation.\", \"The AlterModelOptions operation removes keys from the dict (#23121)\", \"Tests the AlterModelTable operation.\", \"AlterModelTable should rename auto-generated M2M tables.\", \"Tests the AlterModelTable operation if the table name is set to None.\", \"Tests the AlterModelTable operation if the table name is not changed.\", \"Tests the AlterOrderWithRespectTo operation.\", \"Tests the AlterUniqueTogether operation.\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests)\", \"A field may be migrated from AutoField to BigAutoField.\", \"Column names that are SQL keywords shouldn't cause problems when used\", \"Creation of models with a FK to a PK with db_collation.\", \"Tests the CreateModel operation.\", \"Tests the CreateModel operation on a multi-table inheritance setup.\", \"Test the creation of a model with a ManyToMany field and the\", \"test_create_model_with_boolean_expression_in_check_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"Tests the CreateModel operation directly followed by an\", \"CreateModel ignores proxy models.\", \"CreateModel ignores unmanaged models.\", \"Tests the DeleteModel operation.\", \"test_delete_mti_model (migrations.test_operations.OperationTests)\", \"Tests the DeleteModel operation ignores proxy models.\", \"A model with BigAutoField can be created.\", \"test_remove_constraint (migrations.test_operations.OperationTests)\", \"test_remove_covering_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"Tests the RemoveField operation.\", \"test_remove_field_m2m (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)\", \"Tests the RemoveField operation on a foreign key.\", \"test_remove_func_index (migrations.test_operations.OperationTests)\", \"test_remove_func_unique_constraint (migrations.test_operations.OperationTests)\", \"Test the RemoveIndex operation.\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_unique_together_on_pk_field (migrations.test_operations.OperationTests)\", \"test_remove_unique_together_on_unique_field (migrations.test_operations.OperationTests)\", \"Tests the RenameField operation.\", \"test_rename_field_case (migrations.test_operations.OperationTests)\", \"test_rename_field_index_together (migrations.test_operations.OperationTests)\", \"If RenameField doesn't reload state appropriately, the AlterField\", \"test_rename_field_unique_together (migrations.test_operations.OperationTests)\", \"test_rename_field_with_db_column (migrations.test_operations.OperationTests)\", \"test_rename_index (migrations.test_operations.OperationTests)\", \"test_rename_index_arguments (migrations.test_operations.OperationTests)\", \"test_rename_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_rename_index_state_forwards_unnamed_index (migrations.test_operations.OperationTests)\", \"test_rename_index_unknown_unnamed_index (migrations.test_operations.OperationTests)\", \"test_rename_index_unnamed_index (migrations.test_operations.OperationTests)\", \"RenameModel renames a many-to-many column after a RenameField.\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests)\", \"test_rename_missing_field (migrations.test_operations.OperationTests)\", \"Tests the RenameModel operation.\", \"RenameModel operations shouldn't trigger the caching of rendered apps\", \"test_rename_model_with_db_table_rename_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests)\", \"Tests the RenameModel operation on model with self referential FK.\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)\", \"Tests the RenameModel operation on a model which has a superclass that\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests)\", \"Tests the RunPython operation\", \"Tests the RunPython operation correctly handles the \\\"atomic\\\" keyword\", \"#24098 - Tests no-op RunPython operations.\", \"#24282 - Model changes to a FK reverse side update the model\", \"Tests the RunSQL operation.\", \"test_run_sql_add_missing_semicolon_on_collect_sql (migrations.test_operations.OperationTests)\", \"#24098 - Tests no-op RunSQL operations.\", \"#23426 - RunSQL should accept parameters.\", \"#23426 - RunSQL should fail when a list of statements with an incorrect\", \"Tests the SeparateDatabaseAndState operation.\", \"A complex SeparateDatabaseAndState operation: Multiple operations both\", \"A field may be migrated from SmallAutoField to AutoField.\", \"A field may be migrated from SmallAutoField to BigAutoField.\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.751957",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}