{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-10321",
  "base_commit": "4689ec6de1241077552458ed38927c0e713bb85d",
  "patch": "diff --git a/sphinx/ext/autodoc/preserve_defaults.py b/sphinx/ext/autodoc/preserve_defaults.py\n--- a/sphinx/ext/autodoc/preserve_defaults.py\n+++ b/sphinx/ext/autodoc/preserve_defaults.py\n@@ -79,7 +79,11 @@ def update_defvalue(app: Sphinx, obj: Any, bound_method: bool) -> None:\n             kw_defaults = list(function.args.kw_defaults)\n             parameters = list(sig.parameters.values())\n             for i, param in enumerate(parameters):\n-                if param.default is not param.empty:\n+                if param.default is param.empty:\n+                    if param.kind == param.KEYWORD_ONLY:\n+                        # Consume kw_defaults for kwonly args\n+                        kw_defaults.pop(0)\n+                else:\n                     if param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):\n                         default = defaults.pop(0)\n                         value = get_default_value(lines, default)\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/preserve_defaults.py b/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n--- a/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n+++ b/tests/roots/test-ext-autodoc/target/preserve_defaults.py\n@@ -8,7 +8,10 @@\n def foo(name: str = CONSTANT,\n         sentinel: Any = SENTINEL,\n         now: datetime = datetime.now(),\n-        color: int = 0xFFFFFF) -> None:\n+        color: int = 0xFFFFFF,\n+        *,\n+        kwarg1,\n+        kwarg2 = 0xFFFFFF) -> None:\n     \"\"\"docstring\"\"\"\n \n \n@@ -16,5 +19,6 @@ class Class:\n     \"\"\"docstring\"\"\"\n \n     def meth(self, name: str = CONSTANT, sentinel: Any = SENTINEL,\n-             now: datetime = datetime.now(), color: int = 0xFFFFFF) -> None:\n+             now: datetime = datetime.now(), color: int = 0xFFFFFF,\n+             *, kwarg1, kwarg2 = 0xFFFFFF) -> None:\n         \"\"\"docstring\"\"\"\ndiff --git a/tests/test_ext_autodoc_preserve_defaults.py b/tests/test_ext_autodoc_preserve_defaults.py\n--- a/tests/test_ext_autodoc_preserve_defaults.py\n+++ b/tests/test_ext_autodoc_preserve_defaults.py\n@@ -29,14 +29,16 @@ def test_preserve_defaults(app):\n         '',\n         '',\n         '   .. py:method:: Class.meth(name: str = CONSTANT, sentinel: ~typing.Any = '\n-        'SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s) -> None' % color,\n+        'SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, '\n+        'kwarg1, kwarg2=%s) -> None' % (color, color),\n         '      :module: target.preserve_defaults',\n         '',\n         '      docstring',\n         '',\n         '',\n         '.. py:function:: foo(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, '\n-        'now: ~datetime.datetime = datetime.now(), color: int = %s) -> None' % color,\n+        'now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, '\n+        'kwarg2=%s) -> None' % (color, color),\n         '   :module: target.preserve_defaults',\n         '',\n         '   docstring',\n",
  "problem_statement": "autodoc_preserve_defaults=True does not work for mixture of keyword only arguments with/without defaults\n### Describe the bug\r\n\r\nIf I understand [PEP 0570](https://peps.python.org/pep-0570/) correctly, the following is a valid signature of a class method:\r\n\r\n```\r\nclass Thing:\r\n    def __init__(\r\n            self, \r\n            kw_or_pos_without_default, \r\n            kw_or_pos_with_default=None, \r\n            *,\r\n            kw_without_default,\r\n            kw_with_default=\"Foo\"\r\n    ):\r\n        pass\r\n```\r\n\r\nWhen documenting this with _autodoc_ and `autodoc_preserve_defaults=True`, `sphinx.ext.autodoc.preserve_defaults.update_defvalue` generates a `DefaultValue` with `name=None` for the `kw_with_default` arguments. This later raises an exception in `sphinx.util.inspect.object_description` since the `DefaultValue.__repr__` dunder method now returns `None` instead of a string.\r\n\r\nBasically what happens is that _ast_ generates a `None` value in the `kw_defaults` of the `arguments` since the first keyword argument is required, but `update_defvalue` simply ignores that argument because the `default` is empty. This leaves the `None` in the `kw_defaults` to be picked up when the keyword argument _with_ default value is processed -- instead of the actual default.\r\nThis can't be resolved by the `unparse` call which therefore simply returns `None`, which ends up as the `name` of the `DefaultValue`.\r\n\r\nImo this could simply be resolved by `pop`ing the corresponding `None` from the `kw_defaults` if a `KW_ONLY` parameter with empty `default` is encountered.\r\n\r\n\r\n\r\n\r\n\r\n### How to Reproduce\r\n\r\nCreate a module with contents \r\n\r\n```\r\nclass Thing:\r\n    def __init__(\r\n            self, \r\n            kw_or_pos_without_default, \r\n            kw_or_pos_with_default=None, \r\n            *,\r\n            kw_without_default,\r\n            kw_with_default=\"Foo\"\r\n    ):\r\n        pass\r\n\r\n```\r\n\r\nand auto-document while setting  `autodoc_preserve_defaults=True` in your `conf.py`\r\n\r\nMake sure sphinx tries to document all parameters, (since it's a `__init__` method, they will be documented when the _autodoc_ directive has `:undoc-members:`, if you try the same with a module level method you need to document the parameters)\r\n\r\n[test.zip](https://github.com/sphinx-doc/sphinx/files/8253301/test.zip)\r\n\r\n\r\n### Expected behavior\r\n\r\nThe correct default value should be documented. The Warning Message also is pretty worthless (probably the value should not be\r\nformatted with a simple `%s` but instead with a `%r`?)\r\n\r\n### Your project\r\n\r\nhttps://github.com/sphinx-doc/sphinx/files/8253301/test.zip\r\n\r\n### OS\r\n\r\nAny\r\n\r\n### Python version\r\n\r\nTested with versions > 3.8\r\n\r\n### Sphinx version\r\n\r\n4.4.0\r\n\r\n### Sphinx extensions\r\n\r\nsphinx.ext.autodoc\n",
  "hints_text": "",
  "created_at": "2022-04-02T07:57:50Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_preserve_defaults.py::test_preserve_defaults\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "60775ec4c4ea08509eee4b564cbf90f316021aff",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.031681",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}