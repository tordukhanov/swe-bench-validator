{
  "repo": "django/django",
  "instance_id": "django__django-13607",
  "base_commit": "76181308fb02e67794d0cc1471766a5d7e4c877e",
  "patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -6,7 +6,7 @@\n from django.utils.functional import cached_property\n from django.utils.html import html_safe\n from django.utils.safestring import mark_safe\n-from django.utils.translation import gettext as _, ngettext\n+from django.utils.translation import gettext_lazy as _, ngettext\n \n __all__ = ('BaseFormSet', 'formset_factory', 'all_valid')\n \n@@ -41,6 +41,14 @@ def __init__(self, *args, **kwargs):\n         self.base_fields[MAX_NUM_FORM_COUNT] = IntegerField(required=False, widget=HiddenInput)\n         super().__init__(*args, **kwargs)\n \n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # When the management form is invalid, we don't know how many forms\n+        # were submitted.\n+        cleaned_data.setdefault(TOTAL_FORM_COUNT, 0)\n+        cleaned_data.setdefault(INITIAL_FORM_COUNT, 0)\n+        return cleaned_data\n+\n \n @html_safe\n class BaseFormSet:\n@@ -48,9 +56,16 @@ class BaseFormSet:\n     A collection of instances of the same Form class.\n     \"\"\"\n     ordering_widget = NumberInput\n+    default_error_messages = {\n+        'missing_management_form': _(\n+            'ManagementForm data is missing or has been tampered with. Missing fields: '\n+            '%(field_names)s. You may need to file a bug report if the issue persists.'\n+        ),\n+    }\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 initial=None, error_class=ErrorList, form_kwargs=None):\n+                 initial=None, error_class=ErrorList, form_kwargs=None,\n+                 error_messages=None):\n         self.is_bound = data is not None or files is not None\n         self.prefix = prefix or self.get_default_prefix()\n         self.auto_id = auto_id\n@@ -62,6 +77,13 @@ def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n         self._errors = None\n         self._non_form_errors = None\n \n+        messages = {}\n+        for cls in reversed(type(self).__mro__):\n+            messages.update(getattr(cls, 'default_error_messages', {}))\n+        if error_messages is not None:\n+            messages.update(error_messages)\n+        self.error_messages = messages\n+\n     def __str__(self):\n         return self.as_table()\n \n@@ -88,18 +110,7 @@ def management_form(self):\n         \"\"\"Return the ManagementForm instance for this FormSet.\"\"\"\n         if self.is_bound:\n             form = ManagementForm(self.data, auto_id=self.auto_id, prefix=self.prefix)\n-            if not form.is_valid():\n-                raise ValidationError(\n-                    _(\n-                        'ManagementForm data is missing or has been tampered '\n-                        'with. Missing fields: %(field_names)s'\n-                    ) % {\n-                        'field_names': ', '.join(\n-                            form.add_prefix(field_name) for field_name in form.errors\n-                        ),\n-                    },\n-                    code='missing_management_form',\n-                )\n+            form.full_clean()\n         else:\n             form = ManagementForm(auto_id=self.auto_id, prefix=self.prefix, initial={\n                 TOTAL_FORM_COUNT: self.total_form_count(),\n@@ -327,6 +338,20 @@ def full_clean(self):\n \n         if not self.is_bound:  # Stop further processing.\n             return\n+\n+        if not self.management_form.is_valid():\n+            error = ValidationError(\n+                self.error_messages['missing_management_form'],\n+                params={\n+                    'field_names': ', '.join(\n+                        self.management_form.add_prefix(field_name)\n+                        for field_name in self.management_form.errors\n+                    ),\n+                },\n+                code='missing_management_form',\n+            )\n+            self._non_form_errors.append(error)\n+\n         for i, form in enumerate(self.forms):\n             # Empty forms are unchanged forms beyond those with initial data.\n             if not form.has_changed() and i >= self.initial_form_count():\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1300,13 +1300,69 @@ class ArticleForm(Form):\n \n \n class TestIsBoundBehavior(SimpleTestCase):\n-    def test_no_data_raises_validation_error(self):\n-        msg = (\n-            'ManagementForm data is missing or has been tampered with. '\n-            'Missing fields: form-TOTAL_FORMS, form-INITIAL_FORMS'\n+    def test_no_data_error(self):\n+        formset = ArticleFormSet({})\n+        self.assertIs(formset.is_valid(), False)\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            [\n+                'ManagementForm data is missing or has been tampered with. '\n+                'Missing fields: form-TOTAL_FORMS, form-INITIAL_FORMS. '\n+                'You may need to file a bug report if the issue persists.',\n+            ],\n+        )\n+        self.assertEqual(formset.errors, [])\n+        # Can still render the formset.\n+        self.assertEqual(\n+            str(formset),\n+            '<tr><td colspan=\"2\">'\n+            '<ul class=\"errorlist nonfield\">'\n+            '<li>(Hidden field TOTAL_FORMS) This field is required.</li>'\n+            '<li>(Hidden field INITIAL_FORMS) This field is required.</li>'\n+            '</ul>'\n+            '<input type=\"hidden\" name=\"form-TOTAL_FORMS\" id=\"id_form-TOTAL_FORMS\">'\n+            '<input type=\"hidden\" name=\"form-INITIAL_FORMS\" id=\"id_form-INITIAL_FORMS\">'\n+            '<input type=\"hidden\" name=\"form-MIN_NUM_FORMS\" id=\"id_form-MIN_NUM_FORMS\">'\n+            '<input type=\"hidden\" name=\"form-MAX_NUM_FORMS\" id=\"id_form-MAX_NUM_FORMS\">'\n+            '</td></tr>\\n'\n         )\n-        with self.assertRaisesMessage(ValidationError, msg):\n-            ArticleFormSet({}).is_valid()\n+\n+    def test_management_form_invalid_data(self):\n+        data = {\n+            'form-TOTAL_FORMS': 'two',\n+            'form-INITIAL_FORMS': 'one',\n+        }\n+        formset = ArticleFormSet(data)\n+        self.assertIs(formset.is_valid(), False)\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            [\n+                'ManagementForm data is missing or has been tampered with. '\n+                'Missing fields: form-TOTAL_FORMS, form-INITIAL_FORMS. '\n+                'You may need to file a bug report if the issue persists.',\n+            ],\n+        )\n+        self.assertEqual(formset.errors, [])\n+        # Can still render the formset.\n+        self.assertEqual(\n+            str(formset),\n+            '<tr><td colspan=\"2\">'\n+            '<ul class=\"errorlist nonfield\">'\n+            '<li>(Hidden field TOTAL_FORMS) Enter a whole number.</li>'\n+            '<li>(Hidden field INITIAL_FORMS) Enter a whole number.</li>'\n+            '</ul>'\n+            '<input type=\"hidden\" name=\"form-TOTAL_FORMS\" value=\"two\" id=\"id_form-TOTAL_FORMS\">'\n+            '<input type=\"hidden\" name=\"form-INITIAL_FORMS\" value=\"one\" id=\"id_form-INITIAL_FORMS\">'\n+            '<input type=\"hidden\" name=\"form-MIN_NUM_FORMS\" id=\"id_form-MIN_NUM_FORMS\">'\n+            '<input type=\"hidden\" name=\"form-MAX_NUM_FORMS\" id=\"id_form-MAX_NUM_FORMS\">'\n+            '</td></tr>\\n',\n+        )\n+\n+    def test_customize_management_form_error(self):\n+        formset = ArticleFormSet({}, error_messages={'missing_management_form': 'customized'})\n+        self.assertIs(formset.is_valid(), False)\n+        self.assertEqual(formset.non_form_errors(), ['customized'])\n+        self.assertEqual(formset.errors, [])\n \n     def test_with_management_data_attrs_work_fine(self):\n         data = {\ndiff --git a/tests/model_formsets/tests.py b/tests/model_formsets/tests.py\n--- a/tests/model_formsets/tests.py\n+++ b/tests/model_formsets/tests.py\n@@ -4,7 +4,7 @@\n from decimal import Decimal\n \n from django import forms\n-from django.core.exceptions import ImproperlyConfigured, ValidationError\n+from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.forms.models import (\n     BaseModelFormSet, _get_foreign_key, inlineformset_factory,\n@@ -1783,11 +1783,10 @@ def test_validation_with_nonexistent_id(self):\n             [{'id': ['Select a valid choice. That choice is not one of the available choices.']}],\n         )\n \n-    def test_initial_form_count_empty_data_raises_validation_error(self):\n+    def test_initial_form_count_empty_data(self):\n         AuthorFormSet = modelformset_factory(Author, fields='__all__')\n-        msg = 'ManagementForm data is missing or has been tampered with'\n-        with self.assertRaisesMessage(ValidationError, msg):\n-            AuthorFormSet({}).initial_form_count()\n+        formset = AuthorFormSet({})\n+        self.assertEqual(formset.initial_form_count(), 0)\n \n \n class TestModelFormsetOverridesTroughFormMeta(TestCase):\n",
  "problem_statement": "BaseFormSet.is_valid() produces ValidationError when there is no management form\nDescription\n\t\nI was torn between reporting this as a bug or a feature request, but then I thought if I make it a feature request it will most likely break a lot of Django apps and hence I guess that means it's more of a bug...\nAnyway so the line in question is django/forms/formsets.py:292 (in Django version 1.6.1):\nfor i in range(0, self.total_form_count()):\n...where the self.total_form_count() executes this line django/forms/formsets.py:106 (in Django version 1.6.1):\nreturn min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)\n..which then raises this exception django/forms/formsets.py:87 (in Django version 1.6.1):\nraise ValidationError(\n\t\t\t\t\t_('ManagementForm data is missing or has been tampered with'),\n\t\t\t\t\tcode='missing_management_form',\n\t\t\t\t)\nThat stack trace occurs if/when a user submits a formset after stripping out the management form hidden fields.\nI have been using Django for a few years now and have never come across an exception being raised by a form/formset is_valid() call before. So my point is that I believe this exception should never be allowed to leave the BaseFormSet.is_valid() call, because it is an oddball behaviour compared to the rest of the is_valid() implementations.\nI.e. I believe there should be a check in BaseFormSet.is_valid() which checks for the presence of a valid management form (first) and returns False if it is not present, as opposed to raising an exception.\nYes I could wrap the is_valid() call in a try/catch, but I believe this is an unnecessary hack caused by a bad design deviation of the implementation of the BaseFormSet.is_valid() method.\nI didn't bother creating a patch and test cases, because I have a feeling this will get rejected or something like that, but I just thought I should bring this up, as I can't find mention of it anywhere and it seems important to me.\n",
  "hints_text": "So it turns out this oddball behaviour is necessary because the formset cannot be rendered after the lack of management form has been detected, hence you should perform special behaviour for these cases of management form tampering (e.g. redirecting to the same page to make the user start over). Sorry for wasting anyone's time on this.\nI would like to reopen this and propose changing the formset implementation to never let a ValidationError exception escape .is_valid(). The rationale: management form tampering indicates a problem on the user side and it's not something the site's code can or should recover from. Have the formset become invalid and otherwise behave as if it did not contain any forms.\nPull request: ​https://github.com/django/django/pull/3634\nActually, I may have been premature in accepting this. It seems this will make debugging quite a bit tricker (when you forget to include a management form, the form will be silently invalid, correct?). At the least, there should be some error message (see also #13060). Also the current behavior is ​documented so we have to consider backwards compatibility here.\nI agree that adding \"management form is invalid\" to non-form-specific errors is a nice improvement. Can you provide good wording for that? As for documentation, it's all damned lies as it used to raise in the constructor like the docs show but now it raises in is_valid instead :)\nI think we could use the same wording as the existing exception.\nI've added a non-form error to the formset for the case where management form is not valid. Formset's default string representations do not show non-form errors but they do render individual field errors for the management form which should be enough.\nComments for improvement on PR.\nThanks for the original work Patryk Zawadzki. I've continued it in PR ​https://github.com/django/django/pull/13607",
  "created_at": "2020-10-25T21:21:15Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_customize_management_form_error (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_management_form_invalid_data (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_no_data_error (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_initial_form_count_empty_data (model_formsets.tests.ModelFormsetTest)\"]",
  "PASS_TO_PASS": "[\"all_valid() validates all forms, even when some are invalid.\", \"test_valid (forms_tests.tests.test_formsets.AllValidTests)\", \"is_multipart() works with an empty formset.\", \"An empty formset still calls clean()\", \"Media is available on empty formset.\", \"test_add_form_deletion_when_invalid (model_formsets.tests.DeletionTests)\", \"test_change_form_deletion_when_invalid (model_formsets.tests.DeletionTests)\", \"test_deletion (model_formsets.tests.DeletionTests)\", \"test_outdated_deletion (model_formsets.tests.DeletionTests)\", \"test_as_p (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_table (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_as_ul (forms_tests.tests.test_formsets.FormsetAsTagTests)\", \"test_empty_forms_are_unbound (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_form_errors_are_caught_by_formset (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_with_management_data_attrs_work_fine (forms_tests.tests.test_formsets.TestIsBoundBehavior)\", \"test_callable_defaults (model_formsets.tests.ModelFormsetTest)\", \"test_commit_false (model_formsets.tests.ModelFormsetTest)\", \"test_custom_form (model_formsets.tests.ModelFormsetTest)\", \"test_custom_pk (model_formsets.tests.ModelFormsetTest)\", \"test_custom_queryset_init (model_formsets.tests.ModelFormsetTest)\", \"test_custom_save_method (model_formsets.tests.ModelFormsetTest)\", \"test_foreign_keys_in_parents (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_save_as_new (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_custom_pk (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_custom_save_method (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_custom_save_method_related_instance (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_multi_table_inheritance (model_formsets.tests.ModelFormsetTest)\", \"test_inline_formsets_with_nullable_unique_together (model_formsets.tests.ModelFormsetTest)\", \"Regression for #23451\", \"test_inlineformset_factory_with_null_fk (model_formsets.tests.ModelFormsetTest)\", \"test_inlineformset_with_arrayfield (model_formsets.tests.ModelFormsetTest)\", \"test_max_num (model_formsets.tests.ModelFormsetTest)\", \"test_min_num (model_formsets.tests.ModelFormsetTest)\", \"test_min_num_with_existing (model_formsets.tests.ModelFormsetTest)\", \"test_model_formset_with_custom_pk (model_formsets.tests.ModelFormsetTest)\", \"test_model_formset_with_initial_model_instance (model_formsets.tests.ModelFormsetTest)\", \"test_model_formset_with_initial_queryset (model_formsets.tests.ModelFormsetTest)\", \"test_model_inheritance (model_formsets.tests.ModelFormsetTest)\", \"Regression for #19733\", \"test_modelformset_min_num_equals_max_num_less_than (model_formsets.tests.ModelFormsetTest)\", \"test_modelformset_min_num_equals_max_num_more_than (model_formsets.tests.ModelFormsetTest)\", \"test_modelformset_validate_max_flag (model_formsets.tests.ModelFormsetTest)\", \"test_prevent_change_outer_model_and_create_invalid_data (model_formsets.tests.ModelFormsetTest)\", \"test_prevent_duplicates_from_with_the_same_formset (model_formsets.tests.ModelFormsetTest)\", \"test_simple_save (model_formsets.tests.ModelFormsetTest)\", \"test_unique_together_validation (model_formsets.tests.ModelFormsetTest)\", \"test_unique_together_with_inlineformset_factory (model_formsets.tests.ModelFormsetTest)\", \"test_unique_true_enforces_max_num_one (model_formsets.tests.ModelFormsetTest)\", \"test_unique_validation (model_formsets.tests.ModelFormsetTest)\", \"test_validation_with_child_model_without_id (model_formsets.tests.ModelFormsetTest)\", \"test_validation_with_invalid_id (model_formsets.tests.ModelFormsetTest)\", \"test_validation_with_nonexistent_id (model_formsets.tests.ModelFormsetTest)\", \"test_validation_without_id (model_formsets.tests.ModelFormsetTest)\", \"test_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_absolute_max_invalid (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_absolute_max_with_max_num (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_basic_formset (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A form that's displayed as blank may be submitted as blank.\", \"test_can_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_clean_hook (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_default_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_delete_prefilled_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_disable_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_displaying_more_than_one_blank_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_empty_ordered_fields (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_form_kwargs_empty_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_form_kwargs_formset (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Form kwargs can be passed dynamically in a formset.\", \"Formsets call is_valid() on each form.\", \"Formset's forms use the formset's error_class.\", \"test_formset_has_changed (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Formset instances are iterable.\", \"A formsets without any forms evaluates as True.\", \"test_formset_splitdatetimefield (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A valid formset should have 0 total errors.\", \"test_formset_total_error_count_with_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_max_flag (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_min_excludes_empty_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_min_flag (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validate_min_unchanged_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validation (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_validation_count (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_with_deletion (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_with_deletion_invalid_deleted_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formset_with_deletion_remove_deletion_flag (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"FormSets with ordering + deletion.\", \"test_formsets_with_order_custom_widget (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_formsets_with_ordering (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A formset has a hard limit on the number of forms instantiated.\", \"test_html_safe (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Can increase the built-in forms limit via a higher max_num.\", \"test_invalid_deleted_form_with_ordering (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_limited_max_forms_two (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"max_num has no effect when extra is less than max_num.\", \"Limiting the maximum number of forms with max_num.\", \"The management form has the correct prefix.\", \"test_max_num_with_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_max_num_zero (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_max_num_zero_with_initial (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_min_num_displaying_more_than_one_blank_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"More than 1 empty form can be displayed using min_num.\", \"test_more_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_more_initial_form_result_in_one (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_more_initial_than_max_num (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_non_form_errors_run_full_clean (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"Ordering works with blank fieldsets.\", \"test_second_form_partially_filled (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"A partially completed form is invalid.\", \"Just one form may be completed.\", \"test_validate_max_ignores_forms_marked_for_deletion (forms_tests.tests.test_formsets.FormsFormsetTestCase)\", \"test_inlineformset_factory_absolute_max (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_absolute_max_with_max_num (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_can_delete_extra (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_can_not_delete_extra (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_error_messages_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_field_class_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_help_text_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_labels_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_inlineformset_factory_widgets (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_absolute_max (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_absolute_max_with_max_num (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_can_delete_extra (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_disable_delete_extra (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_error_messages_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_field_class_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_help_text_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_labels_overrides (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\", \"test_modelformset_factory_widgets (model_formsets.tests.TestModelFormsetOverridesTroughFormMeta)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.663862",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}