{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15273",
  "base_commit": "3d0e2ec4dcb7653f7fac039cc585ae81dc7251c2",
  "patch": "diff --git a/sympy/geometry/ellipse.py b/sympy/geometry/ellipse.py\n--- a/sympy/geometry/ellipse.py\n+++ b/sympy/geometry/ellipse.py\n@@ -8,10 +8,11 @@\n \n from __future__ import division, print_function\n \n+from sympy import Expr, Eq\n from sympy.core import S, pi, sympify\n from sympy.core.logic import fuzzy_bool\n from sympy.core.numbers import Rational, oo\n-from sympy.core.compatibility import range, ordered\n+from sympy.core.compatibility import ordered\n from sympy.core.symbol import Dummy, _uniquely_named_symbol, _symbol\n from sympy.simplify import simplify, trigsimp\n from sympy.functions.elementary.miscellaneous import sqrt\n@@ -22,6 +23,7 @@\n from sympy.polys import DomainError, Poly, PolynomialError\n from sympy.polys.polyutils import _not_a_coeff, _nsort\n from sympy.solvers import solve\n+from sympy.solvers.solveset import linear_coeffs\n from sympy.utilities.misc import filldedent, func_name\n \n from .entity import GeometryEntity, GeometrySet\n@@ -112,15 +114,14 @@ def __contains__(self, o):\n     def __eq__(self, o):\n         \"\"\"Is the other GeometryEntity the same as this ellipse?\"\"\"\n         return isinstance(o, Ellipse) and (self.center == o.center and\n-                                                  self.hradius == o.hradius and\n-                                                  self.vradius == o.vradius)\n+                                           self.hradius == o.hradius and\n+                                           self.vradius == o.vradius)\n \n     def __hash__(self):\n         return super(Ellipse, self).__hash__()\n \n     def __new__(\n-        cls, center=None, hradius=None, vradius=None, eccentricity=None,\n-            **kwargs):\n+        cls, center=None, hradius=None, vradius=None, eccentricity=None, **kwargs):\n         hradius = sympify(hradius)\n         vradius = sympify(vradius)\n \n@@ -135,8 +136,9 @@ def __new__(\n             raise ValueError('The center of \"{0}\" must be a two dimensional point'.format(cls))\n \n         if len(list(filter(lambda x: x is not None, (hradius, vradius, eccentricity)))) != 2:\n-            raise ValueError('Exactly two arguments of \"hradius\", '\n-                '\"vradius\", and \"eccentricity\" must not be None.\"')\n+            raise ValueError(filldedent('''\n+                Exactly two arguments of \"hradius\", \"vradius\", and\n+                \"eccentricity\" must not be None.'''))\n \n         if eccentricity is not None:\n             if hradius is None:\n@@ -168,7 +170,7 @@ def _svg(self, scale_factor=1., fill_color=\"#66cc99\"):\n         return (\n             '<ellipse fill=\"{1}\" stroke=\"#555555\" '\n             'stroke-width=\"{0}\" opacity=\"0.6\" cx=\"{2}\" cy=\"{3}\" rx=\"{4}\" ry=\"{5}\"/>'\n-            ).format(2. * scale_factor, fill_color, c.x, c.y, h, v)\n+        ).format(2. * scale_factor, fill_color, c.x, c.y, h, v)\n \n     @property\n     def ambient_dimension(self):\n@@ -239,7 +241,7 @@ def arbitrary_point(self, parameter='t'):\n         t = _symbol(parameter, real=True)\n         if t.name in (f.name for f in self.free_symbols):\n             raise ValueError(filldedent('Symbol %s already appears in object '\n-                'and cannot be used as a parameter.' % t.name))\n+                                        'and cannot be used as a parameter.' % t.name))\n         return Point(self.center.x + self.hradius*cos(t),\n                      self.center.y + self.vradius*sin(t))\n \n@@ -316,12 +318,12 @@ def circumference(self):\n         \"\"\"\n         if self.eccentricity == 1:\n             # degenerate\n-            return 4 * self.major\n+            return 4*self.major\n         elif self.eccentricity == 0:\n             # circle\n-            return 2 * pi * self.hradius\n+            return 2*pi*self.hradius\n         else:\n-            return 4 * self.major * elliptic_e(self.eccentricity**2)\n+            return 4*self.major*elliptic_e(self.eccentricity**2)\n \n     @property\n     def eccentricity(self):\n@@ -640,7 +642,7 @@ def intersection(self, o):\n                 ellipse_equation = self.equation(x, y)\n                 return list(ordered([Point(i) for i in solve([ellipse_equation, o.equation(x, y)], [x, y])]))\n         elif isinstance(o, LinearEntity3D):\n-                raise TypeError('Entity must be two dimensional, not three dimensional')\n+            raise TypeError('Entity must be two dimensional, not three dimensional')\n         else:\n             raise TypeError('Intersection not handled for %s' % func_name(o))\n \n@@ -705,8 +707,8 @@ def is_tangent(self, o):\n             for segment in segments:\n                 intersect = self.intersection(segment)\n                 if len(intersect) == 1:\n-                    if not any(intersect[0] in i for i in segment.points)\\\n-                                   and all(not self.encloses_point(i) for i in segment.points):\n+                    if not any(intersect[0] in i for i in segment.points) \\\n+                        and all(not self.encloses_point(i) for i in segment.points):\n                         all_tangents = True\n                         continue\n                     else:\n@@ -892,8 +894,7 @@ def normal_lines(self, p, prec=None):\n         if prec is not None:\n             points = [pt.n(prec) for pt in points]\n             slopes = [i if _not_a_coeff(i) else i.n(prec) for i in slopes]\n-        return [Line(pt, slope=s) for pt,s in zip(points, slopes)]\n-\n+        return [Line(pt, slope=s) for pt, s in zip(points, slopes)]\n \n     @property\n     def periapsis(self):\n@@ -923,7 +924,6 @@ def periapsis(self):\n         \"\"\"\n         return self.major * (1 - self.eccentricity)\n \n-\n     @property\n     def semilatus_rectum(self):\n         \"\"\"\n@@ -962,7 +962,6 @@ def semilatus_rectum(self):\n         \"\"\"\n         return self.major * (1 - self.eccentricity ** 2)\n \n-\n     def plot_interval(self, parameter='t'):\n         \"\"\"The plot interval for the default geometric plot of the Ellipse.\n \n@@ -1085,7 +1084,7 @@ def reflect(self, line):\n             expr = self.equation(x, y)\n             p = Point(x, y).reflect(line)\n             result = expr.subs(zip((x, y), p.args\n-                               ), simultaneous=True)\n+                                   ), simultaneous=True)\n             raise NotImplementedError(filldedent(\n                 'General Ellipse is not supported but the equation '\n                 'of the reflected Ellipse is given by the zeros of: ' +\n@@ -1115,7 +1114,6 @@ def rotate(self, angle=0, pt=None):\n         # XXX see https://github.com/sympy/sympy/issues/2815 for general ellipes\n         raise NotImplementedError('Only rotations of pi/2 are currently supported for Ellipse.')\n \n-\n     def scale(self, x=1, y=1, pt=None):\n         \"\"\"Override GeometryEntity.scale since it is the major and minor\n         axes which must be scaled and they are not GeometryEntities.\n@@ -1137,7 +1135,6 @@ def scale(self, x=1, y=1, pt=None):\n         v = self.vradius\n         return self.func(c.scale(x, y), hradius=h*x, vradius=v*y)\n \n-\n     def tangent_lines(self, p):\n         \"\"\"Tangent lines between `p` and the ellipse.\n \n@@ -1181,8 +1178,8 @@ def tangent_lines(self, p):\n \n         if p in self:\n             delta = self.center - p\n-            rise = (self.vradius ** 2)*delta.x\n-            run = -(self.hradius ** 2)*delta.y\n+            rise = (self.vradius**2)*delta.x\n+            run = -(self.hradius**2)*delta.y\n             p2 = Point(simplify(p.x + run),\n                        simplify(p.y + rise))\n             return [Line(p, p2)]\n@@ -1211,7 +1208,7 @@ def tangent_lines(self, p):\n             # handle horizontal and vertical tangent lines\n             if len(tangent_points) == 1:\n                 assert tangent_points[0][\n-                    0] == p.x or tangent_points[0][1] == p.y\n+                           0] == p.x or tangent_points[0][1] == p.y\n                 return [Line(p, p + Point(1, 0)), Line(p, p + Point(0, 1))]\n \n             # others\n@@ -1243,7 +1240,6 @@ def vradius(self):\n         \"\"\"\n         return self.args[2]\n \n-\n     def second_moment_of_area(self, point=None):\n         \"\"\"Returns the second moment and product moment area of an ellipse.\n \n@@ -1296,8 +1292,8 @@ def second_moment_of_area(self, point=None):\n class Circle(Ellipse):\n     \"\"\"A circle in space.\n \n-    Constructed simply from a center and a radius, or from three\n-    non-collinear points.\n+    Constructed simply from a center and a radius, from three\n+    non-collinear points, or the equation of a circle.\n \n     Parameters\n     ==========\n@@ -1305,6 +1301,7 @@ class Circle(Ellipse):\n     center : Point\n     radius : number or sympy expression\n     points : sequence of three Points\n+    equation : equation of a circle\n \n     Attributes\n     ==========\n@@ -1317,7 +1314,7 @@ class Circle(Ellipse):\n     ======\n \n     GeometryError\n-        When trying to construct circle from three collinear points.\n+        When the given equation is not that of a circle.\n         When trying to construct circle from incorrect parameters.\n \n     See Also\n@@ -1328,41 +1325,84 @@ class Circle(Ellipse):\n     Examples\n     ========\n \n+    >>> from sympy import Eq\n     >>> from sympy.geometry import Point, Circle\n-    >>> # a circle constructed from a center and radius\n+    >>> from sympy.abc import x, y, a, b\n+\n+    A circle constructed from a center and radius:\n+\n     >>> c1 = Circle(Point(0, 0), 5)\n     >>> c1.hradius, c1.vradius, c1.radius\n     (5, 5, 5)\n \n-    >>> # a circle constructed from three points\n+    A circle constructed from three points:\n+\n     >>> c2 = Circle(Point(0, 0), Point(1, 1), Point(1, 0))\n     >>> c2.hradius, c2.vradius, c2.radius, c2.center\n     (sqrt(2)/2, sqrt(2)/2, sqrt(2)/2, Point2D(1/2, 1/2))\n \n+    A circle can be constructed from an equation in the form\n+    `a*x**2 + by**2 + gx + hy + c = 0`, too:\n+\n+    >>> Circle(x**2 + y**2 - 25)\n+    Circle(Point2D(0, 0), 5)\n+\n+    If the variables corresponding to x and y are named something\n+    else, their name or symbol can be supplied:\n+\n+    >>> Circle(Eq(a**2 + b**2, 25), x='a', y=b)\n+    Circle(Point2D(0, 0), 5)\n     \"\"\"\n \n     def __new__(cls, *args, **kwargs):\n-        c, r = None, None\n-        if len(args) == 3:\n-            args = [Point(a, dim=2) for a in args]\n-            if Point.is_collinear(*args):\n-                raise GeometryError(\n-                    \"Cannot construct a circle from three collinear points\")\n-            from .polygon import Triangle\n-            t = Triangle(*args)\n-            c = t.circumcenter\n-            r = t.circumradius\n-        elif len(args) == 2:\n-            # Assume (center, radius) pair\n-            c = Point(args[0], dim=2)\n-            r = sympify(args[1])\n-\n-        if not (c is None or r is None):\n-            if r == 0:\n-                return c\n-            return GeometryEntity.__new__(cls, c, r, **kwargs)\n-\n-        raise GeometryError(\"Circle.__new__ received unknown arguments\")\n+        from sympy.geometry.util import find\n+        from .polygon import Triangle\n+\n+        if len(args) == 1 and isinstance(args[0], Expr):\n+            x = kwargs.get('x', 'x')\n+            y = kwargs.get('y', 'y')\n+            equation = args[0]\n+            if isinstance(equation, Eq):\n+                equation = equation.lhs - equation.rhs\n+            x = find(x, equation)\n+            y = find(y, equation)\n+\n+            try:\n+                co = linear_coeffs(equation, x**2, y**2, x, y)\n+            except ValueError:\n+                raise GeometryError(\"The given equation is not that of a circle.\")\n+\n+            a, b, c, d, e = [co[i] for i in (x**2, y**2, x, y, 0)]\n+\n+            if a == 0 or b == 0 or a != b:\n+                raise GeometryError(\"The given equation is not that of a circle.\")\n+\n+            center_x = -c/a/2\n+            center_y = -d/b/2\n+            r2 = (center_x**2) + (center_y**2) - e\n+\n+            return Circle((center_x, center_y), sqrt(r2))\n+\n+        else:\n+            c, r = None, None\n+            if len(args) == 3:\n+                args = [Point(a, dim=2) for a in args]\n+                t = Triangle(*args)\n+                if not isinstance(t, Triangle):\n+                    return t\n+                c = t.circumcenter\n+                r = t.circumradius\n+            elif len(args) == 2:\n+                # Assume (center, radius) pair\n+                c = Point(args[0], dim=2)\n+                r = sympify(args[1])\n+\n+            if not (c is None or r is None):\n+                if r == 0:\n+                    return c\n+                return GeometryEntity.__new__(cls, c, r, **kwargs)\n+\n+            raise GeometryError(\"Circle.__new__ received unknown arguments\")\n \n     @property\n     def circumference(self):\ndiff --git a/sympy/geometry/line.py b/sympy/geometry/line.py\n--- a/sympy/geometry/line.py\n+++ b/sympy/geometry/line.py\n@@ -18,11 +18,11 @@\n \"\"\"\n from __future__ import division, print_function\n \n-import warnings\n \n+from sympy import Expr\n from sympy.core import S, sympify\n from sympy.core.compatibility import ordered\n-from sympy.core.numbers import Rational\n+from sympy.core.numbers import Rational, oo\n from sympy.core.relational import Eq\n from sympy.core.symbol import _symbol, Dummy\n from sympy.functions.elementary.trigonometric import (_pi_coeff as pi_coeff, acos, tan, atan2)\n@@ -34,7 +34,7 @@\n from sympy.core.decorators import deprecated\n from sympy.sets import Intersection\n from sympy.matrices import Matrix\n-\n+from sympy.solvers.solveset import linear_coeffs\n from .entity import GeometryEntity, GeometrySet\n from .point import Point, Point3D\n from sympy.utilities.misc import Undecidable, filldedent\n@@ -1031,9 +1031,8 @@ def random_point(self, seed=None):\n class Line(LinearEntity):\n     \"\"\"An infinite line in space.\n \n-    A line is declared with two distinct points.\n-    A 2D line may be declared with a point and slope\n-    and a 3D line may be defined with a point and a direction ratio.\n+    A 2D line is declared with two distinct points, point and slope, or\n+    an equation. A 3D line may be defined with a point and a direction ratio.\n \n     Parameters\n     ==========\n@@ -1042,6 +1041,7 @@ class Line(LinearEntity):\n     p2 : Point\n     slope : sympy expression\n     direction_ratio : list\n+    equation : equation of a line\n \n     Notes\n     =====\n@@ -1061,8 +1061,10 @@ class Line(LinearEntity):\n     Examples\n     ========\n \n-    >>> from sympy import Point\n+    >>> from sympy import Point, Eq\n     >>> from sympy.geometry import Line, Segment\n+    >>> from sympy.abc import x, y, a, b\n+\n     >>> L = Line(Point(2,3), Point(3,5))\n     >>> L\n     Line2D(Point2D(2, 3), Point2D(3, 5))\n@@ -1083,24 +1085,65 @@ class Line(LinearEntity):\n     >>> s = Segment((0, 0), (0, 1))\n     >>> Line(s).equation()\n     x\n+\n+    The line corresponding to an equation in the for `ax + by + c = 0`,\n+    can be entered:\n+\n+    >>> Line(3*x + y + 18)\n+    Line2D(Point2D(0, -18), Point2D(1, -21))\n+\n+    If `x` or `y` has a different name, then they can be specified, too,\n+    as a string (to match the name) or symbol:\n+\n+    >>> Line(Eq(3*a + b, -18), x='a', y=b)\n+    Line2D(Point2D(0, -18), Point2D(1, -21))\n     \"\"\"\n \n-    def __new__(cls, p1, p2=None, **kwargs):\n-        if isinstance(p1, LinearEntity):\n-            if p2:\n-                raise ValueError('If p1 is a LinearEntity, p2 must be None.')\n-            dim = len(p1.p1)\n-        else:\n-            p1 = Point(p1)\n-            dim = len(p1)\n-            if p2 is not None or isinstance(p2, Point) and p2.ambient_dimension != dim:\n-                p2 = Point(p2)\n+    def __new__(cls, *args, **kwargs):\n+        from sympy.geometry.util import find\n \n-        if dim == 2:\n-            return Line2D(p1, p2, **kwargs)\n-        elif dim == 3:\n-            return Line3D(p1, p2, **kwargs)\n-        return LinearEntity.__new__(cls, p1, p2, **kwargs)\n+        if len(args) == 1 and isinstance(args[0], Expr):\n+            x = kwargs.get('x', 'x')\n+            y = kwargs.get('y', 'y')\n+            equation = args[0]\n+            if isinstance(equation, Eq):\n+                equation = equation.lhs - equation.rhs\n+            xin, yin = x, y\n+            x = find(x, equation) or Dummy()\n+            y = find(y, equation) or Dummy()\n+\n+            co = linear_coeffs(equation, x, y)\n+            a, b, c = [co[i] for i in (x, y, 0)]\n+\n+            if b:\n+                return Line((0, -c/b), slope=-a/b)\n+            if a:\n+                return Line((-c/a, 0), slope=oo)\n+            raise ValueError('neither %s nor %s were found in the equation' % (xin, yin))\n+\n+        else:\n+            if len(args) > 0:\n+                p1 = args[0]\n+                if len(args) > 1:\n+                    p2 = args[1]\n+                else:\n+                    p2=None\n+\n+                if isinstance(p1, LinearEntity):\n+                    if p2:\n+                        raise ValueError('If p1 is a LinearEntity, p2 must be None.')\n+                    dim = len(p1.p1)\n+                else:\n+                    p1 = Point(p1)\n+                    dim = len(p1)\n+                    if p2 is not None or isinstance(p2, Point) and p2.ambient_dimension != dim:\n+                        p2 = Point(p2)\n+\n+                if dim == 2:\n+                    return Line2D(p1, p2, **kwargs)\n+                elif dim == 3:\n+                    return Line3D(p1, p2, **kwargs)\n+                return LinearEntity.__new__(cls, p1, p2, **kwargs)\n \n     def contains(self, other):\n         \"\"\"\ndiff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -19,6 +19,22 @@\n from .point import Point, Point2D\n \n \n+def find(x, equation):\n+    \"\"\"\n+    Checks whether the parameter 'x' is present in 'equation' or not.\n+    If it is present then it returns the passed parameter 'x' as a free\n+    symbol, else, it returns a ValueError.\n+    \"\"\"\n+\n+    free = equation.free_symbols\n+    xs = [i for i in free if (i.name if type(x) is str else i) == x]\n+    if not xs:\n+        raise ValueError('could not find %s' % x)\n+    if len(xs) != 1:\n+        raise ValueError('ambiguous %s' % x)\n+    return xs[0]\n+\n+\n def _ordered_points(p):\n     \"\"\"Return the tuple of points sorted numerically according to args\"\"\"\n     return tuple(sorted(p, key=lambda x: x.args))\n",
  "test_patch": "diff --git a/sympy/geometry/tests/test_ellipse.py b/sympy/geometry/tests/test_ellipse.py\n--- a/sympy/geometry/tests/test_ellipse.py\n+++ b/sympy/geometry/tests/test_ellipse.py\n@@ -1,14 +1,32 @@\n from __future__ import division\n \n-from sympy import Dummy, Rational, S, Symbol, symbols, pi, sqrt, oo\n+from sympy import Rational, S, Symbol, symbols, pi, sqrt, oo, Point2D, Segment2D, I\n from sympy.core.compatibility import range\n from sympy.geometry import (Circle, Ellipse, GeometryError, Line, Point, Polygon, Ray, RegularPolygon, Segment,\n                             Triangle, intersection)\n-from sympy.integrals.integrals import Integral\n-from sympy.utilities.pytest import raises, slow\n+from sympy.utilities.pytest import raises\n from sympy import integrate\n from sympy.functions.special.elliptic_integrals import elliptic_e\n \n+def test_object_from_equation():\n+    from sympy.abc import x, y, a, b\n+    assert Circle(x**2 + y**2 + 3*x + 4*y - 8) == Circle(Point2D(S(-3) / 2, -2),\n+                                                                                      sqrt(57) / 2)\n+    assert Circle(x**2 + y**2 + 6*x + 8*y + 25) == Circle(Point2D(-3, -4), 0)\n+    assert Circle(a**2 + b**2 + 6*a + 8*b + 25, x='a', y='b') == Circle(Point2D(-3, -4), 0)\n+    assert Circle(x**2 + y**2 - 25) == Circle(Point2D(0, 0), 5)\n+    assert Circle(x**2 + y**2) == Circle(Point2D(0, 0), 0)\n+    assert Circle(a**2 + b**2, x='a', y='b') == Circle(Point2D(0, 0), 0)\n+    assert Circle(x**2 + y**2 + 6*x + 8) == Circle(Point2D(-3, 0), 1)\n+    assert Circle(x**2 + y**2 + 6*y + 8) == Circle(Point2D(0, -3), 1)\n+    assert Circle(6*(x**2) + 6*(y**2) + 6*x + 8*y - 25) == Circle(Point2D(-1/2, -2/3), 5*sqrt(37)/6)\n+    assert Circle(x**2 + y**2 + 3*x + 4*y + 26) == Circle(Point2D(-3/2, -2), sqrt(79)*I/2)\n+    assert Circle(x**2 + y**2 + 25) == Circle(Point2D(0, 0), 5*I)\n+    assert Circle(a**2 + b**2 + 25, x='a', y='b') == Circle(Point2D(0, 0), 5*I)\n+    raises(GeometryError, lambda: Circle(x**2 + 6*y + 8))\n+    raises(GeometryError, lambda: Circle(6*(x ** 2) + 4*(y**2) + 6*x + 8*y + 25))\n+    raises(ValueError, lambda: Circle(a**2 + b**2 + 3*a + 4*b - 8))\n+\n \n def test_ellipse_geom():\n     x = Symbol('x', real=True)\n@@ -31,8 +49,7 @@ def test_ellipse_geom():\n     # Test creation with three points\n     cen, rad = Point(3*half, 2), 5*half\n     assert Circle(Point(0, 0), Point(3, 0), Point(0, 4)) == Circle(cen, rad)\n-    raises(\n-        GeometryError, lambda: Circle(Point(0, 0), Point(1, 1), Point(2, 2)))\n+    assert Circle(Point(0, 0), Point(1, 1), Point(2, 2)) == Segment2D(Point2D(0, 0), Point2D(2, 2))\n \n     raises(ValueError, lambda: Ellipse(None, None, None, 1))\n     raises(GeometryError, lambda: Circle(Point(0, 0)))\ndiff --git a/sympy/geometry/tests/test_line.py b/sympy/geometry/tests/test_line.py\n--- a/sympy/geometry/tests/test_line.py\n+++ b/sympy/geometry/tests/test_line.py\n@@ -38,6 +38,22 @@ def warn_with_traceback(message, category, filename, lineno, file=None, line=Non\n warnings.simplefilter('always', UserWarning)  # make sure to show warnings every time they occur\n \n \n+def test_object_from_equation():\n+    from sympy.abc import x, y, a, b\n+    assert Line(3*x + y + 18) == Line2D(Point2D(0, -18), Point2D(1, -21))\n+    assert Line(3*x + 5 * y + 1) == Line2D(Point2D(0, -1/5), Point2D(1, -4/5))\n+    assert Line(3*a + b + 18, x='a', y='b') == Line2D(Point2D(0, -18), Point2D(1, -21))\n+    assert Line(3*x + y) == Line2D(Point2D(0, 0), Point2D(1, -3))\n+    assert Line(x + y) == Line2D(Point2D(0, 0), Point2D(1, -1))\n+    raises(ValueError, lambda: Line(x))\n+    raises(ValueError, lambda: Line(y))\n+    raises(ValueError, lambda: Line(x/y))\n+    raises(ValueError, lambda: Line(a/b, x='a', y='b'))\n+    raises(ValueError, lambda: Line(y/x))\n+    raises(ValueError, lambda: Line(b/a, x='a', y='b'))\n+    raises(ValueError, lambda: Line((x + 1)**2 + y))\n+\n+\n def feq(a, b):\n     \"\"\"Test if two floating point values are 'equal'.\"\"\"\n     t_float = Float(\"1.0E-10\")\n@@ -52,7 +68,7 @@ def test_angle_between():\n                                   Line(Point(0, 0), Point(5, 0))).evalf(), pi.evalf() / 4)\n     assert Line(a, o).angle_between(Line(b, o)) == pi / 2\n     assert Line3D.angle_between(Line3D(Point3D(0, 0, 0), Point3D(1, 1, 1)),\n-                                Line3D(Point3D(0, 0, 0), Point3D(5, 0, 0))), acos(sqrt(3) / 3)\n+                                Line3D(Point3D(0, 0, 0), Point3D(5, 0, 0))) == acos(sqrt(3) / 3)\n \n \n def test_closing_angle():\n",
  "problem_statement": "Create a geometry object from an equation\nSee https://stackoverflow.com/questions/36694813/convert-equation-in-string-format-to-linegeometry-object. There should be a function (or maybe class constructors) to create geometry objects from an equation. \n\nAdded conversion to line and circle object from an equation given as input\nadded conversion to line and circle object from an equation given as input\r\n\r\nFixes #11028\r\n\r\nmethods named `object_from_equation` have been added to each `line.py` and `circle.py` to add implementation of conversion of equation given as input into object of class `line` and `circle` respectively\r\n\r\n\r\nPlease take a look and suggest improvements.\r\nThanks\r\n\r\n\r\n#### Release Notes\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n* geometry\r\n   * added methods named `object_from_equation` to class `Line` and `Circle` in Line.py and Circle.py respectively\r\n<!-- END RELEASE NOTES -->\r\n\n",
  "hints_text": "@asmeurer How to get started on this problem.\n\nI would look at the different geometry objects and see what forms of equations should be recognized. Then I would create a function, perhaps `geometry_object(eq)`, that either creates an object or returns None or an error.\n\nI am working on this. \r\nHow can I get the coefficients of a variable in an equation? For e.g z=y-2*x-1 , how can I get the coefficient of  x in z? \r\nIs there a need for geometry object apart from line, circle and ellipse via equation, because I found only these entities available that can be expressed in a equation(non piece-wise)? (http://docs.sympy.org/0.7.2/modules/geometry.html)\n",
  "created_at": "2018-09-21T10:40:57Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_object_from_equation\", \"test_ellipse_geom\"]",
  "PASS_TO_PASS": "[\"test_construction\", \"test_ellipse_random_point\", \"test_repr\", \"test_transform\", \"test_bounds\", \"test_reflect\", \"test_is_tangent\", \"test_parameter_value\", \"test_second_moment_of_area\", \"test_circumference\", \"test_angle_between\", \"test_closing_angle\", \"test_arbitrary_point\", \"test_are_concurrent_2d\", \"test_are_concurrent_3d\", \"test_arguments\", \"test_basic_properties_2d\", \"test_basic_properties_3d\", \"test_contains\", \"test_contains_nonreal_symbols\", \"test_distance_2d\", \"test_dimension_normalization\", \"test_distance_3d\", \"test_equals\", \"test_equation\", \"test_intersection_2d\", \"test_intersection_3d\", \"test_is_parallel\", \"test_is_perpendicular\", \"test_is_similar\", \"test_length\", \"test_projection\", \"test_perpendicular_bisector\", \"test_raises\", \"test_ray_generation\", \"test_symbolic_intersect\", \"test_issue_2941\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.097942",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}