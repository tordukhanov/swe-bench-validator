{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-25859",
  "base_commit": "8faa835c81d9cf12342992521ddb95e9a645bc36",
  "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -392,8 +392,7 @@ def inset_axes(self, bounds, *, transform=None, zorder=5, **kwargs):\n         # This puts the rectangle into figure-relative coordinates.\n         inset_locator = _TransformedBoundsLocator(bounds, transform)\n         bounds = inset_locator(self, None).bounds\n-        projection_class, pkw = self.figure._process_projection_requirements(\n-                bounds, **kwargs)\n+        projection_class, pkw = self.figure._process_projection_requirements(**kwargs)\n         inset_ax = projection_class(self.figure, bounds, zorder=zorder, **pkw)\n \n         # this locator lets the axes move if in data coordinates.\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -621,22 +621,26 @@ def add_axes(self, *args, **kwargs):\n             args = (kwargs.pop('rect'), )\n \n         if isinstance(args[0], Axes):\n-            a = args[0]\n+            a, *extra_args = args\n             key = a._projection_init\n             if a.get_figure() is not self:\n                 raise ValueError(\n                     \"The Axes must have been created in the present figure\")\n         else:\n-            rect = args[0]\n+            rect, *extra_args = args\n             if not np.isfinite(rect).all():\n-                raise ValueError('all entries in rect must be finite '\n-                                 f'not {rect}')\n-            projection_class, pkw = self._process_projection_requirements(\n-                *args, **kwargs)\n+                raise ValueError(f'all entries in rect must be finite not {rect}')\n+            projection_class, pkw = self._process_projection_requirements(**kwargs)\n \n             # create the new axes using the axes class given\n             a = projection_class(self, rect, **pkw)\n             key = (projection_class, pkw)\n+\n+        if extra_args:\n+            _api.warn_deprecated(\n+                \"3.8\",\n+                name=\"Passing more than one positional argument to Figure.add_axes\",\n+                addendum=\"Any additional positional arguments are currently ignored.\")\n         return self._add_axes_internal(a, key)\n \n     @_docstring.dedent_interpd\n@@ -762,8 +766,7 @@ def add_subplot(self, *args, **kwargs):\n             if (len(args) == 1 and isinstance(args[0], Integral)\n                     and 100 <= args[0] <= 999):\n                 args = tuple(map(int, str(args[0])))\n-            projection_class, pkw = self._process_projection_requirements(\n-                *args, **kwargs)\n+            projection_class, pkw = self._process_projection_requirements(**kwargs)\n             ax = projection_class(self, *args, **pkw)\n             key = (projection_class, pkw)\n         return self._add_axes_internal(ax, key)\n@@ -1662,9 +1665,8 @@ def _gci(self):\n                 return im\n         return None\n \n-    def _process_projection_requirements(\n-            self, *args, axes_class=None, polar=False, projection=None,\n-            **kwargs):\n+    def _process_projection_requirements(self, *, axes_class=None, polar=False,\n+                                         projection=None, **kwargs):\n         \"\"\"\n         Handle the args/kwargs to add_axes/add_subplot/gca, returning::\n \ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -1394,7 +1394,7 @@ def subplot(*args, **kwargs) -> Axes:\n         if (ax.get_subplotspec() == key\n             and (kwargs == {}\n                  or (ax._projection_init\n-                     == fig._process_projection_requirements(*args, **kwargs)))):\n+                     == fig._process_projection_requirements(**kwargs)))):\n             break\n     else:\n         # we have exhausted the known Axes and none match, make a new one!\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -485,12 +485,21 @@ def test_invalid_figure_add_axes():\n     with pytest.raises(TypeError, match=\"multiple values for argument 'rect'\"):\n         fig.add_axes([0, 0, 1, 1], rect=[0, 0, 1, 1])\n \n-    _, ax = plt.subplots()\n+    fig2, ax = plt.subplots()\n     with pytest.raises(ValueError,\n                        match=\"The Axes must have been created in the present \"\n                              \"figure\"):\n         fig.add_axes(ax)\n \n+    fig2.delaxes(ax)\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning,\n+                      match=\"Passing more than one positional argument\"):\n+        fig2.add_axes(ax, \"extra positional argument\")\n+\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning,\n+                      match=\"Passing more than one positional argument\"):\n+        fig.add_axes([0, 0, 1, 1], \"extra positional argument\")\n+\n \n def test_subplots_shareax_loglabels():\n     fig, axs = plt.subplots(2, 2, sharex=True, sharey=True, squeeze=False)\n",
  "problem_statement": "[MNT]: Do not accept arbitrary positional parameters in Figure.add_axes()\n### Summary\r\n\r\n![image](https://user-images.githubusercontent.com/2836374/236839581-2ea9bd5a-0996-4f8d-87c4-775f269fd90f.png)\r\n\r\nseen at https://www.modular.com/mojo.\r\n\r\n**What are the `False, 1` parameters?** ðŸ‘€ \r\n\r\n- This is not readable\r\n- I'm surprised this works\r\n- I suspect extra positional parameters are ignored.\r\n\r\nDocumentation: https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.add_axes\r\n\r\n### Proposed fix\r\n\r\nCheck whether the parameters do something.\r\n\r\nIf so, document `add_axes` more clearly. if not deprecate extra  positional parameters.\r\n\n",
  "hints_text": "Can this please have a more descriptive title? \nIt looks like `*args` used to fall through to `_process_projection_requirements` which used to use the `*args` as part of `_make_key` but that is now removed.\r\n\r\nNaively adding a deprecation to passing extra args \r\n\r\n```diff\r\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\r\nindex aac3d7270a..428bc4c18c 100644\r\n--- a/lib/matplotlib/figure.py\r\n+++ b/lib/matplotlib/figure.py\r\n@@ -627,12 +627,17 @@ default: %(va)s\r\n                 raise ValueError(\r\n                     \"The Axes must have been created in the present figure\")\r\n         else:\r\n-            rect = args[0]\r\n+            rect, *extra_args = args\r\n             if not np.isfinite(rect).all():\r\n                 raise ValueError('all entries in rect must be finite '\r\n                                  f'not {rect}')\r\n-            projection_class, pkw = self._process_projection_requirements(\r\n-                *args, **kwargs)\r\n+            projection_class, pkw = self._process_projection_requirements(**kwargs)\r\n+            _api.warn_deprecated(\r\n+                \"3.8\",\r\n+                message=\"Passing more than one positional argument to Figure.add_axes is \"\r\n+                \"deprecated and will raise in the future.  \"\r\n+                \"Currently any additional positional arguments are ignored.\"\r\n+                )\r\n \r\n             # create the new axes using the axes class given\r\n             a = projection_class(self, rect, **pkw)\r\n@@ -762,8 +767,7 @@ default: %(va)s\r\n             if (len(args) == 1 and isinstance(args[0], Integral)\r\n                     and 100 <= args[0] <= 999):\r\n                 args = tuple(map(int, str(args[0])))\r\n-            projection_class, pkw = self._process_projection_requirements(\r\n-                *args, **kwargs)\r\n+            projection_class, pkw = self._process_projection_requirements(**kwargs)\r\n             ax = projection_class(self, *args, **pkw)\r\n             key = (projection_class, pkw)\r\n         return self._add_axes_internal(ax, key)\r\n@@ -1663,7 +1667,7 @@ default: %(va)s\r\n         return None\r\n \r\n     def _process_projection_requirements(\r\n-            self, *args, axes_class=None, polar=False, projection=None,\r\n+            self, axes_class=None, polar=False, projection=None,\r\n             **kwargs):\r\n         \"\"\"\r\n         Handle the args/kwargs to add_axes/add_subplot/gca, returning::\r\n\r\n```\r\n\r\ncauses ~45 failures as we get the warnings in the test suite.  ",
  "created_at": "2023-05-11T08:17:56Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_invalid_figure_add_axes\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_align_labels[png]\", \"lib/matplotlib/tests/test_figure.py::test_align_labels_stray_axes\", \"lib/matplotlib/tests/test_figure.py::test_figure_label\", \"lib/matplotlib/tests/test_figure.py::test_fignum_exists\", \"lib/matplotlib/tests/test_figure.py::test_clf_keyword\", \"lib/matplotlib/tests/test_figure.py::test_figure[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_gca\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_subclass\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_invalid\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[png]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_fontproperties\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_subfigures\", \"lib/matplotlib/tests/test_figure.py::test_get_suptitle_supxlabel_supylabel\", \"lib/matplotlib/tests/test_figure.py::test_alpha[png]\", \"lib/matplotlib/tests/test_figure.py::test_too_many_figures\", \"lib/matplotlib/tests/test_figure.py::test_iterability_axes_argument\", \"lib/matplotlib/tests/test_figure.py::test_set_fig_size\", \"lib/matplotlib/tests/test_figure.py::test_axes_remove\", \"lib/matplotlib/tests/test_figure.py::test_figaspect\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[both]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[major]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[minor]\", \"lib/matplotlib/tests/test_figure.py::test_change_dpi\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[1-nan]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[-1-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[inf-1]\", \"lib/matplotlib/tests/test_figure.py::test_subplots_shareax_loglabels\", \"lib/matplotlib/tests/test_figure.py::test_savefig\", \"lib/matplotlib/tests/test_figure.py::test_savefig_warns\", \"lib/matplotlib/tests/test_figure.py::test_savefig_backend\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Agg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Cairo]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_preserve_layout_engine\", \"lib/matplotlib/tests/test_figure.py::test_savefig_locate_colorbar\", \"lib/matplotlib/tests/test_figure.py::test_savefig_transparent[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_repr\", \"lib/matplotlib/tests/test_figure.py::test_valid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_invalid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_tightlayout_autolayout_deconflict[png]\", \"lib/matplotlib/tests/test_figure.py::test_layout_change_warning[constrained]\", \"lib/matplotlib/tests/test_figure.py::test_layout_change_warning[compressed]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[png]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[png]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[ps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[eps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[svg]\", \"lib/matplotlib/tests/test_figure.py::test_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_axes_removal\", \"lib/matplotlib/tests/test_figure.py::test_removed_axis\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clear]\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clf]\", \"lib/matplotlib/tests/test_figure.py::test_clf_not_redefined\", \"lib/matplotlib/tests/test_figure.py::test_picking_does_not_stale\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_twotuple\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[eps]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x2-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x3-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_all_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_tuple[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_width_ratios\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_height_ratios\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x0-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x1-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x2-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x3-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x4-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x5-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail_list_of_str\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw[BC-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw[multi_value1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_string_parser\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw_expander\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_extra_per_subplot_kw\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[AAA\\\\nBBB-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[\\\\nAAA\\\\nBBB\\\\n-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[ABC\\\\nDEF-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x0-(?m)we\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x1-There\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[AAA\\\\nc\\\\nBBB-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x3-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_hashable_keys[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[abc]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cab]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bca]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cba]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[acb]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bac]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_user_order\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_share_all\", \"lib/matplotlib/tests/test_figure.py::test_reused_gridspec\", \"lib/matplotlib/tests/test_figure.py::test_subfigure[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_dpi\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ss[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_double[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_spanning\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ticks\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_scatter_size[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_pdf\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_add_axes_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_ginput\", \"lib/matplotlib/tests/test_figure.py::test_waitforbuttonpress\", \"lib/matplotlib/tests/test_figure.py::test_kwargs_pass\", \"lib/matplotlib/tests/test_figure.py::test_rcparams[png]\", \"lib/matplotlib/tests/test_figure.py::test_deepcopy\", \"lib/matplotlib/tests/test_figure.py::test_unpickle_with_device_pixel_ratio\", \"lib/matplotlib/tests/test_figure.py::test_gridspec_no_mutate_input\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[eps]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[png]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[ps]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[svg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[svgz]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[jpeg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[jpg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[tif]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[tiff]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[webp]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[raw]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[rgba]\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.826135",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}