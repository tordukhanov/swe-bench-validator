{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-15446",
  "base_commit": "6399a809e2683f89d74a6540fb51293f38e9923d",
  "patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -77,8 +77,18 @@ def _coeff_isneg(a):\n     >>> _coeff_isneg(Symbol('n', negative=True)) # coeff is 1\n     False\n \n+    For matrix expressions:\n+\n+    >>> from sympy import MatrixSymbol, sqrt\n+    >>> A = MatrixSymbol(\"A\", 3, 3)\n+    >>> _coeff_isneg(-sqrt(2)*A)\n+    True\n+    >>> _coeff_isneg(sqrt(2)*A)\n+    False\n     \"\"\"\n \n+    if a.is_MatMul:\n+        a = a.args[0]\n     if a.is_Mul:\n         a = a.args[0]\n     return a.is_Number and a.is_negative\ndiff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -42,7 +42,7 @@ class BlockMatrix(MatrixExpr):\n     Matrix([[I, Z]])\n \n     >>> print(block_collapse(C*B))\n-    Matrix([[X, Z*Y + Z]])\n+    Matrix([[X, Z + Z*Y]])\n \n     \"\"\"\n     def __new__(cls, *args):\n@@ -283,7 +283,7 @@ def block_collapse(expr):\n     Matrix([[I, Z]])\n \n     >>> print(block_collapse(C*B))\n-    Matrix([[X, Z*Y + Z]])\n+    Matrix([[X, Z + Z*Y]])\n     \"\"\"\n     hasbm = lambda expr: isinstance(expr, MatrixExpr) and expr.has(BlockMatrix)\n     rule = exhaust(\ndiff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -661,7 +661,7 @@ class MatrixSymbol(MatrixExpr):\n     >>> A.shape\n     (3, 4)\n     >>> 2*A*B + Identity(3)\n-    2*A*B + I\n+    I + 2*A*B\n     \"\"\"\n     is_commutative = False\n     is_symbol = True\ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -302,7 +302,6 @@ def _print_bool(self, e):\n     def _print_NoneType(self, e):\n         return r\"\\mathrm{%s}\" % e\n \n-\n     def _print_Add(self, expr, order=None):\n         if self.order == 'none':\n             terms = list(expr.args)\n@@ -1478,34 +1477,25 @@ def _print_Adjoint(self, expr):\n         else:\n             return r\"%s^\\dagger\" % self._print(mat)\n \n-    def _print_MatAdd(self, expr):\n-        terms = [self._print(t) for t in expr.args]\n-        l = []\n-        for t in terms:\n-            if t.startswith('-'):\n-                sign = \"-\"\n-                t = t[1:]\n-            else:\n-                sign = \"+\"\n-            l.extend([sign, t])\n-        sign = l.pop(0)\n-        if sign == '+':\n-            sign = \"\"\n-        return sign + ' '.join(l)\n-\n     def _print_MatMul(self, expr):\n         from sympy import Add, MatAdd, HadamardProduct, MatMul, Mul\n \n-        def parens(x):\n-            if isinstance(x, (Add, MatAdd, HadamardProduct)):\n-                return r\"\\left(%s\\right)\" % self._print(x)\n-            return self._print(x)\n+        parens = lambda x: self.parenthesize(x, precedence_traditional(expr), False)\n \n-        if isinstance(expr, MatMul) and expr.args[0].is_Number and expr.args[0]<0:\n-            expr = Mul(-1*expr.args[0], MatMul(*expr.args[1:]))\n-            return '-' + ' '.join(map(parens, expr.args))\n+        args = expr.args\n+        if isinstance(args[0], Mul):\n+            args = args[0].as_ordered_factors() + list(args[1:])\n+        else:\n+            args = list(args)\n+\n+        if isinstance(expr, MatMul) and _coeff_isneg(expr):\n+            if args[0] == -1:\n+                args = args[1:]\n+            else:\n+                args[0] = -args[0]\n+            return '- ' + ' '.join(map(parens, args))\n         else:\n-            return ' '.join(map(parens, expr.args))\n+            return ' '.join(map(parens, args))\n \n     def _print_Mod(self, expr, exp=None):\n         if exp is not None:\ndiff --git a/sympy/printing/precedence.py b/sympy/printing/precedence.py\n--- a/sympy/printing/precedence.py\n+++ b/sympy/printing/precedence.py\n@@ -38,9 +38,9 @@\n     \"Function\" : PRECEDENCE[\"Func\"],\n     \"NegativeInfinity\": PRECEDENCE[\"Add\"],\n     \"MatAdd\": PRECEDENCE[\"Add\"],\n-    \"MatMul\": PRECEDENCE[\"Mul\"],\n     \"MatPow\": PRECEDENCE[\"Pow\"],\n     \"TensAdd\": PRECEDENCE[\"Add\"],\n+    # As soon as `TensMul` is a subclass of `Mul`, remove this:\n     \"TensMul\": PRECEDENCE[\"Mul\"],\n     \"HadamardProduct\": PRECEDENCE[\"Mul\"],\n     \"KroneckerProduct\": PRECEDENCE[\"Mul\"],\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -339,22 +339,6 @@ def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n-    def _print_MatAdd(self, expr):\n-        terms = [self.parenthesize(arg, precedence(expr))\n-             for arg in expr.args]\n-        l = []\n-        for t in terms:\n-            if t.startswith('-'):\n-                sign = \"-\"\n-                t = t[1:]\n-            else:\n-                sign = \"+\"\n-            l.extend([sign, t])\n-        sign = l.pop(0)\n-        if sign == '+':\n-            sign = \"\"\n-        return sign + ' '.join(l)\n-\n     def _print_NaN(self, expr):\n         return 'nan'\n \n",
  "test_patch": "diff --git a/sympy/printing/tests/test_ccode.py b/sympy/printing/tests/test_ccode.py\n--- a/sympy/printing/tests/test_ccode.py\n+++ b/sympy/printing/tests/test_ccode.py\n@@ -778,7 +778,7 @@ def test_MatrixElement_printing():\n     assert(ccode(3 * A[0, 0]) == \"3*A[0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(ccode(F) == \"(-B + A)[0]\")\n+    assert(ccode(F) == \"(A - B)[0]\")\n \n \n def test_subclass_CCodePrinter():\ndiff --git a/sympy/printing/tests/test_fcode.py b/sympy/printing/tests/test_fcode.py\n--- a/sympy/printing/tests/test_fcode.py\n+++ b/sympy/printing/tests/test_fcode.py\n@@ -765,7 +765,7 @@ def test_MatrixElement_printing():\n     assert(fcode(3 * A[0, 0]) == \"      3*A(1, 1)\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(fcode(F) == \"      (-B + A)(1, 1)\")\n+    assert(fcode(F) == \"      (A - B)(1, 1)\")\n \n \n def test_aug_assign():\ndiff --git a/sympy/printing/tests/test_jscode.py b/sympy/printing/tests/test_jscode.py\n--- a/sympy/printing/tests/test_jscode.py\n+++ b/sympy/printing/tests/test_jscode.py\n@@ -382,4 +382,4 @@ def test_MatrixElement_printing():\n     assert(jscode(3 * A[0, 0]) == \"3*A[0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(jscode(F) == \"(-B + A)[0]\")\n+    assert(jscode(F) == \"(A - B)[0]\")\ndiff --git a/sympy/printing/tests/test_julia.py b/sympy/printing/tests/test_julia.py\n--- a/sympy/printing/tests/test_julia.py\n+++ b/sympy/printing/tests/test_julia.py\n@@ -377,4 +377,4 @@ def test_MatrixElement_printing():\n     assert(julia_code(3 * A[0, 0]) == \"3*A[1,1]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(julia_code(F) == \"(-B + A)[1,1]\")\n+    assert(julia_code(F) == \"(A - B)[1,1]\")\ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1212,10 +1212,10 @@ def test_matAdd():\n     C = MatrixSymbol('C', 5, 5)\n     B = MatrixSymbol('B', 5, 5)\n     l = LatexPrinter()\n-    assert l._print_MatAdd(C - 2*B) in ['-2 B + C', 'C -2 B']\n-    assert l._print_MatAdd(C + 2*B) in ['2 B + C', 'C + 2 B']\n-    assert l._print_MatAdd(B - 2*C) in ['B -2 C', '-2 C + B']\n-    assert l._print_MatAdd(B + 2*C) in ['B + 2 C', '2 C + B']\n+    assert l._print(C - 2*B) in ['- 2 B + C', 'C -2 B']\n+    assert l._print(C + 2*B) in ['2 B + C', 'C + 2 B']\n+    assert l._print(B - 2*C) in ['B - 2 C', '- 2 C + B']\n+    assert l._print(B + 2*C) in ['B + 2 C', '2 C + B']\n \n \n def test_matMul():\n@@ -1227,13 +1227,13 @@ def test_matMul():\n     l = LatexPrinter()\n     assert l._print_MatMul(2*A) == '2 A'\n     assert l._print_MatMul(2*x*A) == '2 x A'\n-    assert l._print_MatMul(-2*A) == '-2 A'\n+    assert l._print_MatMul(-2*A) == '- 2 A'\n     assert l._print_MatMul(1.5*A) == '1.5 A'\n     assert l._print_MatMul(sqrt(2)*A) == r'\\sqrt{2} A'\n     assert l._print_MatMul(-sqrt(2)*A) == r'- \\sqrt{2} A'\n     assert l._print_MatMul(2*sqrt(2)*x*A) == r'2 \\sqrt{2} x A'\n-    assert l._print_MatMul(-2*A*(A + 2*B)) in [r'-2 A \\left(A + 2 B\\right)',\n-        r'-2 A \\left(2 B + A\\right)']\n+    assert l._print_MatMul(-2*A*(A + 2*B)) in [r'- 2 A \\left(A + 2 B\\right)',\n+        r'- 2 A \\left(2 B + A\\right)']\n \n \n def test_latex_MatrixSlice():\n@@ -1682,6 +1682,14 @@ def test_issue_7117():\n     assert latex(q) == r\"\\left(x + 1 = 2 x\\right)^{2}\"\n \n \n+def test_issue_15439():\n+    x = MatrixSymbol('x', 2, 2)\n+    y = MatrixSymbol('y', 2, 2)\n+    assert latex((x * y).subs(y, -y)) == r\"x \\left(- y\\right)\"\n+    assert latex((x * y).subs(y, -2*y)) == r\"x \\left(- 2 y\\right)\"\n+    assert latex((x * y).subs(x, -x)) == r\"- x y\"\n+\n+\n def test_issue_2934():\n     assert latex(Symbol(r'\\frac{a_1}{b_1}')) == '\\\\frac{a_1}{b_1}'\n \n@@ -1728,7 +1736,7 @@ def test_MatrixElement_printing():\n     assert latex(3 * A[0, 0]) == r\"3 A_{0, 0}\"\n \n     F = C[0, 0].subs(C, A - B)\n-    assert latex(F) == r\"\\left(-B + A\\right)_{0, 0}\"\n+    assert latex(F) == r\"\\left(A - B\\right)_{0, 0}\"\n \n \n def test_MatrixSymbol_printing():\n@@ -1737,9 +1745,9 @@ def test_MatrixSymbol_printing():\n     B = MatrixSymbol(\"B\", 3, 3)\n     C = MatrixSymbol(\"C\", 3, 3)\n \n-    assert latex(-A) == r\"-A\"\n-    assert latex(A - A*B - B) == r\"-B - A B + A\"\n-    assert latex(-A*B - A*B*C - B) == r\"-B - A B - A B C\"\n+    assert latex(-A) == r\"- A\"\n+    assert latex(A - A*B - B) == r\"A - A B - B\"\n+    assert latex(-A*B - A*B*C - B) == r\"- A B - A B C - B\"\n \n \n def test_Quaternion_latex_printing():\ndiff --git a/sympy/printing/tests/test_octave.py b/sympy/printing/tests/test_octave.py\n--- a/sympy/printing/tests/test_octave.py\n+++ b/sympy/printing/tests/test_octave.py\n@@ -481,7 +481,7 @@ def test_MatrixElement_printing():\n     assert mcode(3 * A[0, 0]) == \"3*A(1, 1)\"\n \n     F = C[0, 0].subs(C, A - B)\n-    assert mcode(F) == \"(-B + A)(1, 1)\"\n+    assert mcode(F) == \"(A - B)(1, 1)\"\n \n \n def test_zeta_printing_issue_14820():\ndiff --git a/sympy/printing/tests/test_rcode.py b/sympy/printing/tests/test_rcode.py\n--- a/sympy/printing/tests/test_rcode.py\n+++ b/sympy/printing/tests/test_rcode.py\n@@ -488,4 +488,4 @@ def test_MatrixElement_printing():\n     assert(rcode(3 * A[0, 0]) == \"3*A[0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(rcode(F) == \"(-B + A)[0]\")\n+    assert(rcode(F) == \"(A - B)[0]\")\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -795,14 +795,14 @@ def test_MatrixElement_printing():\n     assert(str(3 * A[0, 0]) == \"3*A[0, 0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert str(F) == \"(-B + A)[0, 0]\"\n+    assert str(F) == \"(A - B)[0, 0]\"\n \n \n def test_MatrixSymbol_printing():\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n \n-    assert str(A - A*B - B) == \"-B - A*B + A\"\n+    assert str(A - A*B - B) == \"A - A*B - B\"\n     assert str(A*B - (A+B)) == \"-(A + B) + A*B\"\n \n \n",
  "problem_statement": "LaTeX printer omits necessary parentheses in matrix products such as x(-y)\nThe product of x and -y, where x, y are MatrixSymbols, is printed as `x -y` by the LaTeX printer:\r\n```\r\nfrom sympy import *\r\nx = MatrixSymbol('x', 2, 2)\r\ny = MatrixSymbol('y', 2, 2)\r\nexpr = (x*y).subs(y, -y)\r\nprint(latex(expr))   \r\n```\r\n\r\nSource: [Subsitute a matrix M by (-M) in SymPy and display it unambiguously](https://stackoverflow.com/q/53044835) on Stack Overflow.\n",
  "hints_text": "",
  "created_at": "2018-11-01T10:50:26Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_MatrixElement_printing\", \"test_matAdd\", \"test_matMul\", \"test_issue_15439\", \"test_MatrixSymbol_printing\"]",
  "PASS_TO_PASS": "[\"test_printmethod\", \"test_ccode_sqrt\", \"test_ccode_Pow\", \"test_ccode_Max\", \"test_ccode_constants_mathh\", \"test_ccode_constants_other\", \"test_ccode_Rational\", \"test_ccode_Integer\", \"test_ccode_functions\", \"test_ccode_inline_function\", \"test_ccode_exceptions\", \"test_ccode_user_functions\", \"test_ccode_boolean\", \"test_ccode_Relational\", \"test_ccode_Piecewise\", \"test_ccode_sinc\", \"test_ccode_Piecewise_deep\", \"test_ccode_ITE\", \"test_ccode_settings\", \"test_ccode_Indexed\", \"test_Element\", \"test_ccode_Indexed_without_looking_for_contraction\", \"test_ccode_loops_matrix_vector\", \"test_dummy_loops\", \"test_ccode_loops_add\", \"test_ccode_loops_multiple_contractions\", \"test_ccode_loops_addfactor\", \"test_ccode_loops_multiple_terms\", \"test_dereference_printing\", \"test_Matrix_printing\", \"test_ccode_reserved_words\", \"test_ccode_sign\", \"test_ccode_Assignment\", \"test_ccode_For\", \"test_ccode_Max_Min\", \"test_ccode_standard\", \"test_CCodePrinter\", \"test_C89CodePrinter\", \"test_C99CodePrinter\", \"test_C99CodePrinter__precision\", \"test_get_math_macros\", \"test_ccode_Declaration\", \"test_C99CodePrinter_custom_type\", \"test_subclass_CCodePrinter\", \"test_ccode_math_macros\", \"test_ccode_Type\", \"test_fcode_sign\", \"test_fcode_Pow\", \"test_fcode_Rational\", \"test_fcode_Integer\", \"test_fcode_Float\", \"test_fcode_functions\", \"test_case\", \"test_fcode_functions_with_integers\", \"test_fcode_NumberSymbol\", \"test_fcode_complex\", \"test_implicit\", \"test_not_fortran\", \"test_user_functions\", \"test_inline_function\", \"test_assign_to\", \"test_line_wrapping\", \"test_fcode_precedence\", \"test_fcode_Logical\", \"test_fcode_Xlogical\", \"test_fcode_Relational\", \"test_fcode_Piecewise\", \"test_wrap_fortran\", \"test_wrap_fortran_keep_d0\", \"test_settings\", \"test_free_form_code_line\", \"test_free_form_continuation_line\", \"test_free_form_comment_line\", \"test_loops\", \"test_fcode_Indexed_without_looking_for_contraction\", \"test_derived_classes\", \"test_indent\", \"test_fcode_For\", \"test_fcode_Declaration\", \"test_aug_assign\", \"test_jscode_sqrt\", \"test_jscode_Pow\", \"test_jscode_constants_mathh\", \"test_jscode_constants_other\", \"test_jscode_Rational\", \"test_jscode_Integer\", \"test_jscode_functions\", \"test_jscode_inline_function\", \"test_jscode_exceptions\", \"test_jscode_boolean\", \"test_jscode_Piecewise\", \"test_jscode_Piecewise_deep\", \"test_jscode_settings\", \"test_jscode_Indexed\", \"test_jscode_loops_matrix_vector\", \"test_jscode_loops_add\", \"test_jscode_loops_multiple_contractions\", \"test_jscode_loops_addfactor\", \"test_jscode_loops_multiple_terms\", \"test_Integer\", \"test_Rational\", \"test_Function\", \"test_Pow\", \"test_basic_ops\", \"test_1_over_x_and_sqrt\", \"test_mix_number_mult_symbols\", \"test_mix_number_pow_symbols\", \"test_imag\", \"test_constants\", \"test_constants_other\", \"test_boolean\", \"test_Matrices\", \"test_vector_entries_hadamard\", \"test_MatrixSymbol\", \"test_special_matrices\", \"test_containers\", \"test_julia_noninline\", \"test_julia_piecewise\", \"test_julia_piecewise_times_const\", \"test_julia_matrix_assign_to\", \"test_julia_matrix_assign_to_more\", \"test_julia_matrix_1x1\", \"test_julia_matrix_elements\", \"test_julia_boolean\", \"test_julia_not_supported\", \"test_trick_indent_with_end_else_words\", \"test_haramard\", \"test_sparse\", \"test_specfun\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_function_subclass_different_name\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Hadamard\", \"test_ZeroMatrix\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_7117\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_issue_13651\", \"test_latex_UnevaluatedExpr\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_14041\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_trace\", \"test_Function_change_name\", \"test_minmax\", \"test_KroneckerDelta\", \"test_octave_noninline\", \"test_octave_piecewise\", \"test_octave_piecewise_times_const\", \"test_octave_matrix_assign_to\", \"test_octave_matrix_assign_to_more\", \"test_octave_matrix_1x1\", \"test_octave_matrix_elements\", \"test_octave_boolean\", \"test_octave_not_supported\", \"test_octave_not_supported_not_on_whitelist\", \"test_octave_expint\", \"test_sinc\", \"test_trigfun\", \"test_rcode_sqrt\", \"test_rcode_Pow\", \"test_rcode_Max\", \"test_rcode_constants_mathh\", \"test_rcode_constants_other\", \"test_rcode_Rational\", \"test_rcode_Integer\", \"test_rcode_functions\", \"test_rcode_inline_function\", \"test_rcode_exceptions\", \"test_rcode_user_functions\", \"test_rcode_boolean\", \"test_rcode_Relational\", \"test_rcode_Piecewise\", \"test_rcode_sinc\", \"test_rcode_Piecewise_deep\", \"test_rcode_ITE\", \"test_rcode_settings\", \"test_rcode_Indexed\", \"test_rcode_Indexed_without_looking_for_contraction\", \"test_rcode_loops_matrix_vector\", \"test_rcode_loops_add\", \"test_rcode_loops_multiple_contractions\", \"test_rcode_loops_addfactor\", \"test_rcode_loops_multiple_terms\", \"test_rcode_sgn\", \"test_rcode_Assignment\", \"test_rcode_For\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_EulerGamma\", \"test_Exp\", \"test_factorial\", \"test_Geometry\", \"test_GoldenRatio\", \"test_TribonacciConstant\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_sqrt\", \"test_Float\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_GroebnerBasis\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_empty_printer\", \"test_RandomDomain\", \"test_FiniteSet\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.099603",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}