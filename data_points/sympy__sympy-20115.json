{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-20115",
  "base_commit": "d57aaf064041fe52c0fa357639b069100f8b28e1",
  "patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -367,22 +367,6 @@ def _print_Stream(self, strm):\n     def _print_NoneToken(self, arg):\n         return 'None'\n \n-\n-class PythonCodePrinter(AbstractPythonCodePrinter):\n-\n-    def _print_sign(self, e):\n-        return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n-            f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n-\n-    def _print_Not(self, expr):\n-        PREC = precedence(expr)\n-        return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n-\n-    def _print_Indexed(self, expr):\n-        base = expr.args[0]\n-        index = expr.args[1:]\n-        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n-\n     def _hprint_Pow(self, expr, rational=False, sqrt='math.sqrt'):\n         \"\"\"Printing helper function for ``Pow``\n \n@@ -441,6 +425,22 @@ def _hprint_Pow(self, expr, rational=False, sqrt='math.sqrt'):\n         exp_str = self.parenthesize(expr.exp, PREC, strict=False)\n         return \"{}**{}\".format(base_str, exp_str)\n \n+\n+class PythonCodePrinter(AbstractPythonCodePrinter):\n+\n+    def _print_sign(self, e):\n+        return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n+            f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n+\n+    def _print_Not(self, expr):\n+        PREC = precedence(expr)\n+        return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n+\n+    def _print_Indexed(self, expr):\n+        base = expr.args[0]\n+        index = expr.args[1:]\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n+\n     def _print_Pow(self, expr, rational=False):\n         return self._hprint_Pow(expr, rational=rational)\n \n@@ -452,6 +452,10 @@ def _print_Rational(self, expr):\n     def _print_Half(self, expr):\n         return self._print_Rational(expr)\n \n+    def _print_frac(self, expr):\n+        from sympy import Mod\n+        return self._print_Mod(Mod(expr.args[0], 1))\n+\n     _print_lowergamma = CodePrinter._print_not_supported\n     _print_uppergamma = CodePrinter._print_not_supported\n     _print_fresnelc = CodePrinter._print_not_supported\n@@ -499,6 +503,7 @@ def pycode(expr, **settings):\n _in_mpmath = [(k, v) for k, v in _known_functions_math.items() if k not in _not_in_mpmath]\n _known_functions_mpmath = dict(_in_mpmath, **{\n     'beta': 'beta',\n+    'frac': 'frac',\n     'fresnelc': 'fresnelc',\n     'fresnels': 'fresnels',\n     'sign': 'sign',\n@@ -1000,15 +1005,10 @@ def _print_airybiprime(self, expr):\n     setattr(SciPyPrinter, '_print_%s' % k, _print_known_const)\n \n \n-class SymPyPrinter(PythonCodePrinter):\n+class SymPyPrinter(AbstractPythonCodePrinter):\n \n     language = \"Python with SymPy\"\n \n-    _kf = {k: 'sympy.' + v for k, v in chain(\n-        _known_functions.items(),\n-        _known_functions_math.items()\n-    )}\n-\n     def _print_Function(self, expr):\n         mod = expr.func.__module__ or ''\n         return '%s(%s)' % (self._module_format(mod + ('.' if mod else '') + expr.func.__name__),\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -200,6 +200,27 @@ def test_sqrt():\n     assert prntr._print_Pow(sqrt(x), rational=True) == 'x**(1/2)'\n \n \n+def test_frac():\n+    from sympy import frac\n+\n+    expr = frac(x)\n+\n+    prntr = NumPyPrinter()\n+    assert prntr.doprint(expr) == 'numpy.mod(x, 1)'\n+\n+    prntr = SciPyPrinter()\n+    assert prntr.doprint(expr) == 'numpy.mod(x, 1)'\n+\n+    prntr = PythonCodePrinter()\n+    assert prntr.doprint(expr) == 'x % 1'\n+\n+    prntr = MpmathPrinter()\n+    assert prntr.doprint(expr) == 'mpmath.frac(x)'\n+\n+    prntr = SymPyPrinter()\n+    assert prntr.doprint(expr) == 'sympy.functions.elementary.integers.frac(x)'\n+\n+\n class CustomPrintedObject(Expr):\n     def _numpycode(self, printer):\n         return 'numpy'\n",
  "problem_statement": "Lambdify does not identify frac()\nHello, this is my first issue ever.  The following code\r\n```\r\nimport sympy as sp\r\nimport matplotlib.pyplot as plt\r\nfrom numpy import *\r\nx= sp.symbols('x')\r\nf= sp.frac(x)\r\nfx=sp.lambdify(x, f, modules=['numpy'] )\r\nxv= linspace(-10, 10, 100)\r\nplt.plot(xv, fx(xv))\r\n\r\n```\r\ngives the following error\r\n```\r\nNameError                                 Traceback (most recent call last)\r\n<ipython-input-15-e8a3820182ad> in <module>\r\n      6 fx=sp.lambdify(x, f, modules=['numpy'] )\r\n      7 xv= linspace(-10, 10, 100)\r\n----> 8 plt.plot(xv, fx(xv))\r\n\r\n<lambdifygenerated-2> in _lambdifygenerated(x)\r\n      1 def _lambdifygenerated(x):\r\n----> 2     return (frac(x))\r\n\r\nNameError: name 'frac' is not defined\r\n```\r\nIf there exists a fix, please let me know. Replacing sp.frac() with just frac() does not help either.\r\n\n",
  "hints_text": "",
  "created_at": "2020-09-19T22:15:45Z",
  "version": "1.7",
  "FAIL_TO_PASS": "[\"test_frac\"]",
  "PASS_TO_PASS": "[\"test_PythonCodePrinter\", \"test_PythonCodePrinter_standard\", \"test_MpmathPrinter\", \"test_NumPyPrinter\", \"test_SciPyPrinter\", \"test_pycode_reserved_words\", \"test_sqrt\", \"test_printmethod\", \"test_codegen_ast_nodes\", \"test_issue_14283\", \"test_NumPyPrinter_print_seq\", \"test_issue_16535_16536\", \"test_fresnel_integrals\", \"test_beta\", \"test_airy\", \"test_airy_prime\"]",
  "environment_setup_commit": "cffd4e0f86fefd4802349a9f9b19ed70934ea354",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.136009",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}