{
  "repo": "django/django",
  "instance_id": "django__django-10730",
  "base_commit": "199025fa8816dde6c611193adbce1ba6c5a72c6b",
  "patch": "diff --git a/django/views/debug.py b/django/views/debug.py\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -397,6 +397,9 @@ def explicit_or_implicit_cause(exc_value):\n         while exc_value:\n             exceptions.append(exc_value)\n             exc_value = explicit_or_implicit_cause(exc_value)\n+            if exc_value in exceptions:\n+                # Avoid infinite loop if there's a cyclic reference (#29393).\n+                break\n \n         frames = []\n         # No exceptions were supplied to ExceptionReporter\n",
  "test_patch": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -4,6 +4,7 @@\n import re\n import sys\n import tempfile\n+import threading\n from io import StringIO\n from pathlib import Path\n \n@@ -403,6 +404,44 @@ def test_reporting_frames_without_source(self):\n         text = reporter.get_traceback_text()\n         self.assertIn('\"generated\" in funcName', text)\n \n+    def test_reporting_frames_for_cyclic_reference(self):\n+        try:\n+            def test_func():\n+                try:\n+                    raise RuntimeError('outer') from RuntimeError('inner')\n+                except RuntimeError as exc:\n+                    raise exc.__cause__\n+            test_func()\n+        except Exception:\n+            exc_type, exc_value, tb = sys.exc_info()\n+        request = self.rf.get('/test_view/')\n+        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n+\n+        def generate_traceback_frames(*args, **kwargs):\n+            nonlocal tb_frames\n+            tb_frames = reporter.get_traceback_frames()\n+\n+        tb_frames = None\n+        tb_generator = threading.Thread(target=generate_traceback_frames, daemon=True)\n+        tb_generator.start()\n+        tb_generator.join(timeout=5)\n+        if tb_generator.is_alive():\n+            # tb_generator is a daemon that runs until the main thread/process\n+            # exits. This is resource heavy when running the full test suite.\n+            # Setting the following values to None makes\n+            # reporter.get_traceback_frames() exit early.\n+            exc_value.__traceback__ = exc_value.__context__ = exc_value.__cause__ = None\n+            tb_generator.join()\n+            self.fail('Cyclic reference in Exception Reporter.get_traceback_frames()')\n+        if tb_frames is None:\n+            # can happen if the thread generating traceback got killed\n+            # or exception while generating the traceback\n+            self.fail('Traceback generation failed')\n+        last_frame = tb_frames[-1]\n+        self.assertIn('raise exc.__cause__', last_frame['context_line'])\n+        self.assertEqual(last_frame['filename'], __file__)\n+        self.assertEqual(last_frame['function'], 'test_func')\n+\n     def test_request_and_message(self):\n         \"A message can be provided in addition to a request\"\n         request = self.rf.get('/test_view/')\n",
  "problem_statement": "Infinite loop in ExceptionReporter.get_traceback_frames()\nDescription\n\t\nThe following code generates a cause/context cycle (exc_value.__cause__.__context__ is exc_value):\nexcept WrapperException as exc:\n\traise exc.__cause__\nThe â€‹while exc_value loop then never terminates.\n",
  "hints_text": "A possible workaround would be available if PEP 415 (__suppress_context__) were respected.\nCan you please give code to reproduce the issue?\nIn a view, with DEBUG = True. try: raise RuntimeError('outer') from RuntimeError('inner') except RuntimeError as exc: raise exc.__cause__",
  "created_at": "2018-12-06T13:02:54Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_reporting_frames_for_cyclic_reference (view_tests.tests.test_debug.ExceptionReporterTests)\"]",
  "PASS_TO_PASS": "[\"test_repr (view_tests.tests.test_debug.CallableSettingWrapperTests)\", \"test_cleanse_setting_basic (view_tests.tests.test_debug.HelperFunctionTests)\", \"test_cleanse_setting_ignore_case (view_tests.tests.test_debug.HelperFunctionTests)\", \"test_cleanse_setting_recurses_in_dictionary (view_tests.tests.test_debug.HelperFunctionTests)\", \"test_handle_db_exception (view_tests.tests.test_debug.DebugViewQueriesAllowedTests)\", \"An exception report can be generated even for a disallowed host.\", \"test_message_only (view_tests.tests.test_debug.PlainTextReportTests)\", \"An exception report can be generated for just a request\", \"An exception report can be generated without request\", \"A simple exception report can be generated\", \"A message can be provided in addition to a request\", \"test_request_with_items_key (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_template_exception (view_tests.tests.test_debug.PlainTextReportTests)\", \"test_400 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_403 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_404 (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_template_not_found_error (view_tests.tests.test_debug.NonDjangoTemplatesDebugViewTests)\", \"test_ajax_response_encoding (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_non_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_paranoid_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_sensitive_request (view_tests.tests.test_debug.AjaxResponseExceptionReporterFilter)\", \"test_400 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403 (view_tests.tests.test_debug.DebugViewTests)\", \"test_403_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_empty_path_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_404_not_in_urls (view_tests.tests.test_debug.DebugViewTests)\", \"test_classbased_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_default_urlconf_template (view_tests.tests.test_debug.DebugViewTests)\", \"test_files (view_tests.tests.test_debug.DebugViewTests)\", \"test_no_template_source_loaders (view_tests.tests.test_debug.DebugViewTests)\", \"test_non_l10ned_numeric_ids (view_tests.tests.test_debug.DebugViewTests)\", \"test_regression_21530 (view_tests.tests.test_debug.DebugViewTests)\", \"test_technical_404 (view_tests.tests.test_debug.DebugViewTests)\", \"test_template_exceptions (view_tests.tests.test_debug.DebugViewTests)\", \"Tests for not existing file\", \"test_encoding_error (view_tests.tests.test_debug.ExceptionReporterTests)\", \"The ExceptionReporter supports Unix, Windows and Macintosh EOL markers\", \"test_exception_fetching_user (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_ignore_traceback_evaluation_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Safe strings in local variables are escaped.\", \"test_message_only (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Non-UTF-8 exceptions/values should not make the output generation choke.\", \"test_reporting_frames_without_source (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_reporting_of_nested_exceptions (view_tests.tests.test_debug.ExceptionReporterTests)\", \"test_request_with_items_key (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Large values should not create a large HTML.\", \"test_unfrozen_importlib (view_tests.tests.test_debug.ExceptionReporterTests)\", \"Unprintable values should not make the output generation choke.\", \"test_callable_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_callable_settings_forbidding_to_set_attributes (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_custom_exception_reporter_filter (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_dict_setting_with_non_str_key (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_multivalue_dict_key_error (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_non_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_paranoid_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_function_keyword_arguments (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_method (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_request (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_sensitive_settings (view_tests.tests.test_debug.ExceptionReporterFilterTests)\", \"test_settings_with_sensitive_keys (view_tests.tests.test_debug.ExceptionReporterFilterTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.552233",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}