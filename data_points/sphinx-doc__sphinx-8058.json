{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8058",
  "base_commit": "f92fa6443fe6f457ab0c26d41eb229e825fda5e1",
  "patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -316,7 +316,7 @@ def finish(self) -> None:\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_builder(MessageCatalogBuilder)\n \n-    app.add_config_value('gettext_compact', True, 'gettext')\n+    app.add_config_value('gettext_compact', True, 'gettext', Any)\n     app.add_config_value('gettext_location', True, 'gettext')\n     app.add_config_value('gettext_uuid', False, 'gettext')\n     app.add_config_value('gettext_auto_build', True, 'env')\ndiff --git a/sphinx/util/i18n.py b/sphinx/util/i18n.py\n--- a/sphinx/util/i18n.py\n+++ b/sphinx/util/i18n.py\n@@ -14,7 +14,7 @@\n from collections import namedtuple\n from datetime import datetime, timezone\n from os import path\n-from typing import Callable, Generator, List, Set, Tuple\n+from typing import Callable, Generator, List, Set, Tuple, Union\n \n import babel.dates\n from babel.messages.mofile import write_mo\n@@ -128,8 +128,10 @@ def find_catalog(docname: str, compaction: bool) -> str:\n     return ret\n \n \n-def docname_to_domain(docname: str, compation: bool) -> str:\n+def docname_to_domain(docname: str, compation: Union[bool, str]) -> str:\n     \"\"\"Convert docname to domain for catalogs.\"\"\"\n+    if isinstance(compation, str):\n+        return compation\n     if compation:\n         return docname.split(SEP, 1)[0]\n     else:\n",
  "test_patch": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -174,3 +174,21 @@ def test_gettext_template_msgid_order_in_sphinxpot(app):\n          'msgid \"This is Template 2\\\\.\".*'),\n         result,\n         flags=re.S)\n+\n+\n+@pytest.mark.sphinx(\n+    'gettext', srcdir='root-gettext',\n+    confoverrides={'gettext_compact': 'documentation'})\n+def test_build_single_pot(app):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'documentation.pot').isfile()\n+\n+    result = (app.outdir / 'documentation.pot').read_text()\n+    assert re.search(\n+        ('msgid \"Todo\".*'\n+         'msgid \"Like footnotes.\".*'\n+         'msgid \"The minute.\".*'\n+         'msgid \"Generated section\".*'),\n+        result,\n+        flags=re.S)\n",
  "problem_statement": "Allow more compaction in gettext builder\nThe OKFN people manually merge all generated message catalogs into a single file for upload.  https://github.com/okfn/opendatamanual/blob/master/Makefile#L104\n\n{{{gettext_compact}}} should support that use case too.\n\n---\n- Bitbucket: https://bitbucket.org/birkenfeld/sphinx/issue/784\n- Originally reported by: Robert Lehmann\n- Originally created at: 2011-10-11T16:43:20.007\n\n",
  "hints_text": "_From Takayuki Shimizukawa on 2013-12-08 04:41:21+00:00_\n\nNew URL: https://github.com/okfn/opendatahandbook/blob/master/Makefile#L114\n\nI think we need new conf.py option like `gettext_mode` it takes values as `file`, `directory` and `all`, and would be better to deprecate `gettext_compact` option.\n\n_From Markus Zapke-Gr√ºndemann on 2013-12-08 23:03:55+00:00_\n\nAt PyCon DE 2013 we discussed this at the sprints: Our proposol was:\n\nIf `gettext_compact` is set to a string instead of a boolean the string is used as catalog name and all translations go into this file.\n\nThis wouldn't break existing configurations and does not introduce a new option.\n\n_From Takayuki Shimizukawa on 2014-07-29 06:00:39+00:00_\n\nLet's implement!\n\nNote: I don't think `gettext_compact` will have True/False/<string> is good idea because we might implement \"type check for conf.py parameter\" in near future [1]. I think we should provide new parameter for the additional purpose (or move to new parameter and obsolete the `gettext_compact`).\n\n.. [1] https://github.com/sphinx-doc/testing/issues/1150#comment-7700104\n\n_From Robert Lehmann on 2014-07-29 07:41:42+00:00_\n\nI think `gettext_compact` could just become an integer (which is backwards-compatible) to signal the new, third behaviour.\n\nI have a patch ready for Markus' proposal but, as you mentioned, Sphinx _already does_ cast values into permissible types, so having a bool/string does not work.  We could find some clever way around this in `conf.py`.\n\n_From Takayuki Shimizukawa on 2014-09-28 14:05:35+00:00_\n\nI'm thinking about 'compatibility', 'sphinx config type check' and 'understandability'. \n- Taking True/False/<filename> by gettext_compact is not intuitive, it has compatibility.\n- For now, new config parameter name for new purpose doesn't come up in my mind. I think bad name decrease understandability.\n- Sphinx config type check is not implemented yet. In near feature, it will be implemented with backward-compatibility for 3rd-party extensions. It means 'gettext_compact' can be excluded for type checking.\n\nUnder these circumstances, I think we should move forward with keeping backward-compatibility and with the least effort.\n\nAnd so, [Robert Lehmann](https://bitbucket.org/lehmannro), can you commit (or pull request or attach) your patch?\n",
  "created_at": "2020-08-06T07:23:10Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"tests/test_build_gettext.py::test_build_single_pot\"]",
  "PASS_TO_PASS": "[\"tests/test_build_gettext.py::test_build_gettext\", \"tests/test_build_gettext.py::test_gettext_index_entries\", \"tests/test_build_gettext.py::test_gettext_disable_index_entries\", \"tests/test_build_gettext.py::test_gettext_template\", \"tests/test_build_gettext.py::test_gettext_template_msgid_order_in_sphinxpot\"]",
  "environment_setup_commit": "f92fa6443fe6f457ab0c26d41eb229e825fda5e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.051201",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}