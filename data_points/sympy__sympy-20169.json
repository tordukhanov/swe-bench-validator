{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-20169",
  "base_commit": "706007ca2fe279020e099d36dd1db0e33123ac4c",
  "patch": "diff --git a/sympy/physics/optics/utils.py b/sympy/physics/optics/utils.py\n--- a/sympy/physics/optics/utils.py\n+++ b/sympy/physics/optics/utils.py\n@@ -28,7 +28,7 @@\n            ]\n \n from sympy import Symbol, sympify, sqrt, Matrix, acos, oo, Limit, atan2, asin,\\\n-cos, sin, tan, I, cancel, pi, Float\n+cos, sin, tan, I, cancel, pi, Float, S, zoo\n from sympy.core.compatibility import is_sequence\n from sympy.geometry.line import Ray3D\n from sympy.geometry.util import intersection\n@@ -444,9 +444,9 @@ def critical_angle(medium1, medium2):\n \n \n \n-def lens_makers_formula(n_lens, n_surr, r1, r2):\n+def lens_makers_formula(n_lens, n_surr, r1, r2, d=0):\n     \"\"\"\n-    This function calculates focal length of a thin lens.\n+    This function calculates focal length of a lens.\n     It follows cartesian sign convention.\n \n     Parameters\n@@ -460,15 +460,23 @@ def lens_makers_formula(n_lens, n_surr, r1, r2):\n         Radius of curvature of first surface.\n     r2 : sympifiable\n         Radius of curvature of second surface.\n+    d : sympifiable, optional\n+        Thickness of lens, default value is 0.\n \n     Examples\n     ========\n \n     >>> from sympy.physics.optics import lens_makers_formula\n+    >>> from sympy import S\n     >>> lens_makers_formula(1.33, 1, 10, -10)\n     15.1515151515151\n+    >>> lens_makers_formula(1.2, 1, 10, S.Infinity)\n+    50.0000000000000\n+    >>> lens_makers_formula(1.33, 1, 10, -10, d=1)\n+    15.3418463277618\n \n     \"\"\"\n+\n     if isinstance(n_lens, Medium):\n         n_lens = n_lens.refractive_index\n     else:\n@@ -477,11 +485,13 @@ def lens_makers_formula(n_lens, n_surr, r1, r2):\n         n_surr = n_surr.refractive_index\n     else:\n         n_surr = sympify(n_surr)\n+    d = sympify(d)\n \n-    r1 = sympify(r1)\n-    r2 = sympify(r2)\n+    focal_length = 1/((n_lens - n_surr) / n_surr*(1/r1 - 1/r2 + (((n_lens - n_surr) * d) / (n_lens * r1 * r2))))\n \n-    return 1/((n_lens - n_surr)/n_surr*(1/r1 - 1/r2))\n+    if focal_length == zoo:\n+        return S.Infinity\n+    return focal_length\n \n \n def mirror_formula(focal_length=None, u=None, v=None):\n",
  "test_patch": "diff --git a/sympy/physics/optics/tests/test_utils.py b/sympy/physics/optics/tests/test_utils.py\n--- a/sympy/physics/optics/tests/test_utils.py\n+++ b/sympy/physics/optics/tests/test_utils.py\n@@ -16,6 +16,7 @@\n \n ae = lambda a, b, n: comp(a, b, 10**-n)\n \n+\n def test_refraction_angle():\n     n1, n2 = symbols('n1, n2')\n     m1 = Medium('m1')\n@@ -129,7 +130,7 @@ def test_lens_makers_formula():\n     n1, n2 = symbols('n1, n2')\n     m1 = Medium('m1', permittivity=e0, n=1)\n     m2 = Medium('m2', permittivity=e0, n=1.33)\n-    assert lens_makers_formula(n1, n2, 10, -10) == 5*n2/(n1 - n2)\n+    assert lens_makers_formula(n1, n2, 10, -10) == 5.0*n2/(n1 - n2)\n     assert ae(lens_makers_formula(m1, m2, 10, -10), -20.15, 2)\n     assert ae(lens_makers_formula(1.33, 1, 10, -10),  15.15, 2)\n \n@@ -169,12 +170,30 @@ def test_lens_formula():\n     assert lens_formula(focal_length=f, u=oo) == f\n     raises(ValueError, lambda: lens_formula(focal_length=f, u=u, v=v))\n \n+\n def test_hyperfocal_distance():\n     f, N, c = symbols('f, N, c')\n     assert hyperfocal_distance(f=f, N=N, c=c) == f**2/(N*c)\n     assert ae(hyperfocal_distance(f=0.5, N=8, c=0.0033), 9.47, 2)\n \n+\n def test_transverse_magnification():\n     si, so = symbols('si, so')\n     assert transverse_magnification(si, so) == -si/so\n     assert transverse_magnification(30, 15) == -2\n+\n+\n+def test_lens_makers_formula_thick_lens():\n+    n1, n2 = symbols('n1, n2')\n+    m1 = Medium('m1', permittivity=e0, n=1)\n+    m2 = Medium('m2', permittivity=e0, n=1.33)\n+    assert ae(lens_makers_formula(m1, m2, 10, -10, d=1), -19.82, 2)\n+    assert lens_makers_formula(n1, n2, 1, -1, d=0.1) == n2/((2.0 - (0.1*n1 - 0.1*n2)/n1)*(n1 - n2))\n+\n+\n+def test_lens_makers_formula_plano_lens():\n+    n1, n2 = symbols('n1, n2')\n+    m1 = Medium('m1', permittivity=e0, n=1)\n+    m2 = Medium('m2', permittivity=e0, n=1.33)\n+    assert ae(lens_makers_formula(m1, m2, 10, oo), -40.30, 2)\n+    assert lens_makers_formula(n1, n2, 10, oo) == 10.0*n2/(n1 - n2)\n",
  "problem_statement": "Lens makers formula\nCurrently lens maker formula is limited to thin lens.\r\nIt should also work for plano- lenses(plano-concave and plano convex) and thick lens.\n",
  "hints_text": "",
  "created_at": "2020-09-30T09:14:32Z",
  "version": "1.7",
  "FAIL_TO_PASS": "[\"test_lens_makers_formula\", \"test_lens_makers_formula_thick_lens\"]",
  "PASS_TO_PASS": "[\"test_refraction_angle\", \"test_fresnel_coefficients\", \"test_deviation\", \"test_brewster_angle\", \"test_critical_angle\", \"test_mirror_formula\", \"test_lens_formula\", \"test_hyperfocal_distance\", \"test_transverse_magnification\"]",
  "environment_setup_commit": "cffd4e0f86fefd4802349a9f9b19ed70934ea354",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.136862",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}