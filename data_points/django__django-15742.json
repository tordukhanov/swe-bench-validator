{
  "repo": "django/django",
  "instance_id": "django__django-15742",
  "base_commit": "7faf25d682b8e8f4fd2006eb7dfc71ed2a2193b7",
  "patch": "diff --git a/django/templatetags/i18n.py b/django/templatetags/i18n.py\n--- a/django/templatetags/i18n.py\n+++ b/django/templatetags/i18n.py\n@@ -5,7 +5,7 @@\n from django.template.base import TokenType, render_value_in_context\n from django.template.defaulttags import token_kwargs\n from django.utils import translation\n-from django.utils.safestring import SafeData, mark_safe\n+from django.utils.safestring import SafeData, SafeString, mark_safe\n \n register = Library()\n \n@@ -198,7 +198,7 @@ def render_value(key):\n             with translation.override(None):\n                 result = self.render(context, nested=True)\n         if self.asvar:\n-            context[self.asvar] = result\n+            context[self.asvar] = SafeString(result)\n             return \"\"\n         else:\n             return result\n",
  "test_patch": "diff --git a/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py b/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py\n--- a/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py\n+++ b/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py\n@@ -416,6 +416,22 @@ def test_i18n41(self):\n             output = self.engine.render_to_string(\"i18n41\")\n         self.assertEqual(output, \">Error: Seite nicht gefunden<\")\n \n+    @setup(\n+        {\n+            \"i18n_asvar_safestring\": (\n+                \"{% load i18n %}\"\n+                \"{% blocktranslate asvar the_title %}\"\n+                \"{{title}}other text\"\n+                \"{% endblocktranslate %}\"\n+                \"{{ the_title }}\"\n+            )\n+        }\n+    )\n+    def test_i18n_asvar_safestring(self):\n+        context = {\"title\": \"<Main Title>\"}\n+        output = self.engine.render_to_string(\"i18n_asvar_safestring\", context=context)\n+        self.assertEqual(output, \"&lt;Main Title&gt;other text\")\n+\n     @setup(\n         {\n             \"template\": (\n",
  "problem_statement": "Blocktranslate asvar escapes variables, but stores the result as str instance, leading to double escaping\nDescription\n\t\nIn the docs, this snippet is given as an example usage of blocktranslate with the asvar argument (here: ​https://docs.djangoproject.com/en/4.0/topics/i18n/translation/#blocktranslate-template-tag:\n{% blocktranslate asvar the_title %}The title is {{ title }}.{% endblocktranslate %}\n<title>{{ the_title }}</title>\n<meta name=\"description\" content=\"{{ the_title }}\">\nHowever, this template is buggy when title is a string, which I'd argue is a common use case.\ntitle will be escaped when formatting the content of the blocktranslate block, but the \"was escaped\" information is discarded, and the_title will be a str instance with escaped content.\nWhen later using the the_title variable, it will be conditionally escaped. Since it is a str, it will be escaped, so control characters are escaped again, breaking their display on the final page.\nMinimal example to reproduce (can be put in any view):\n\tfrom django.template import Template, Context\n\ttemplate_content = \"\"\"\n{% blocktranslate asvar the_title %}The title is {{ title }}.{% endblocktranslate %}\n<title>{{ the_title }}</title>\n<meta name=\"description\" content=\"{{ the_title }}\">\n\"\"\"\n\trendered = Template(template_content).render(Context({\"title\": \"<>& Title\"}))\n\tassert \"&amp;lt;\" not in rendered, \"> was escaped two times\"\nI'd argue that blocktranslate should:\nEither assign a SafeString instance to prevent future escaping\nor not escape the variables used within the translation, and store them marked as unsafe (= as str instance)\n",
  "hints_text": "Hi Richard, thanks for the report. So this would be the way forward: ... assign a SafeString instance to prevent future escaping But it's not at all clear how feasible it would be to correctly mark the returned string as safe. Individual variables are run via render_value_in_context() which escapes them assuming autoescape is enabled, but then the final output is constructed after that, so it's not clear we can reliably mark it safe. Rather if, in your example, you know the_title is safe, declare it as so: {{ the_title|safe }}. The following test case passes: diff --git a/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py b/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py index 4a162362c6..967a7c1829 100644 --- a/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py +++ b/tests/template_tests/syntax_tests/i18n/test_blocktranslate.py @@ -388,6 +388,23 @@ class I18nBlockTransTagTests(SimpleTestCase): output = self.engine.render_to_string(\"i18n39\") self.assertEqual(output, \">Seite nicht gefunden<\") + @setup( + { + \"issue33631\": ( + \"\"\" + {% load i18n %} + {% blocktranslate asvar the_title %}The title is {{title}}.{% endblocktranslate %} + < title > {{the_title|safe}} < / title > + < meta name=\"description\" content=\"{{ the_title|safe }}\" > + \"\"\" + ) + } + ) + def test_issue33631(self): + with translation.override(\"en\"): + output = self.engine.render_to_string(\"issue33631\", {\"title\": \"<>& Title\"}) + self.assertNotIn(\"&amp;lt;\", output) + @setup( { ... and it avoids trying to resolve the difficulty above. As such, I'm going to say wontfix here initially, and ask that you follow-up on the ​Internationalization Topics section of the Django Forum to get a wider audience if you'd like to discuss it further. Thanks.\nReopening to assess a patch ​based on forum discussion.\nPR ​https://github.com/django/django/pull/15742",
  "created_at": "2022-05-29T04:13:49Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"test_i18n_asvar_safestring (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\"]",
  "PASS_TO_PASS": "[\"test_repr (template_tests.syntax_tests.i18n.test_blocktranslate.BlockTranslateNodeTests)\", \"test_multiple_locale_btrans (template_tests.syntax_tests.i18n.test_blocktranslate.MultipleLocaleActivationBlockTransTests)\", \"test_multiple_locale_deactivate_btrans (template_tests.syntax_tests.i18n.test_blocktranslate.MultipleLocaleActivationBlockTransTests)\", \"test_multiple_locale_direct_switch_btrans (template_tests.syntax_tests.i18n.test_blocktranslate.MultipleLocaleActivationBlockTransTests)\", \"Simple baseline behavior with one locale for all the supported i18n\", \"test_multiple_locale_btrans (template_tests.syntax_tests.i18n.test_blocktranslate.MultipleLocaleActivationBlockTranslateTests)\", \"test_multiple_locale_deactivate_btrans (template_tests.syntax_tests.i18n.test_blocktranslate.MultipleLocaleActivationBlockTranslateTests)\", \"test_multiple_locale_direct_switch_btrans (template_tests.syntax_tests.i18n.test_blocktranslate.MultipleLocaleActivationBlockTranslateTests)\", \"Python's %-formatting is properly escaped in blocktranslate, singular,\", \"test_percent_in_translatable_block (template_tests.syntax_tests.i18n.test_blocktranslate.MiscBlockTranslationTests)\", \"test_percent_in_translatable_block (template_tests.syntax_tests.i18n.test_blocktranslate.MiscTests)\", \"Error in translation file should not crash template rendering (#16516).\", \"Error in translation file should not crash template rendering (#18393).\", \"{% blocktranslate %} takes message contexts into account (#14806).\", \"test_blocktrans_syntax_error_missing_assignment (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_blocktrans_tag_using_a_string_that_looks_like_str_fmt (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_count (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_count_not_number (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"simple translation of a variable\", \"simple translation of a variable and filter\", \"simple translation of a string with interpolation\", \"translation of singular form\", \"translation of plural form\", \"Escaping inside blocktranslate and translate works as if it was\", \"test_i18n18 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_i18n19 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_i18n21 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"translation of plural form with extra field in singular form (#13568)\", \"translation of singular form in Russian (#14126)\", \"simple translation of multiple variables\", \"test_i18n34 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_i18n34_2 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_i18n34_3 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_i18n37 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_i18n39 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_i18n40 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_i18n41 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_legacyi18n17 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_legacyi18n18 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_legacyi18n26 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_legacyi18n27 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_legacyi18n28 (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_no_args_with (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_plural_bad_syntax (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_variable_twice (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_with_block (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\", \"test_with_for (template_tests.syntax_tests.i18n.test_blocktranslate.I18nBlockTransTagTests)\"]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.739771",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}