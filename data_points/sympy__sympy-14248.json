{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14248",
  "base_commit": "9986b38181cdd556a3f3411e553864f11912244e",
  "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1477,18 +1477,33 @@ def _print_Adjoint(self, expr):\n             return r\"%s^\\dagger\" % self._print(mat)\n \n     def _print_MatAdd(self, expr):\n-        terms = list(expr.args)\n-        tex = \" + \".join(map(self._print, terms))\n-        return tex\n+        terms = [self._print(t) for t in expr.args]\n+        l = []\n+        for t in terms:\n+            if t.startswith('-'):\n+                sign = \"-\"\n+                t = t[1:]\n+            else:\n+                sign = \"+\"\n+            l.extend([sign, t])\n+        sign = l.pop(0)\n+        if sign == '+':\n+            sign = \"\"\n+        return sign + ' '.join(l)\n \n     def _print_MatMul(self, expr):\n-        from sympy import Add, MatAdd, HadamardProduct\n+        from sympy import Add, MatAdd, HadamardProduct, MatMul, Mul\n \n         def parens(x):\n             if isinstance(x, (Add, MatAdd, HadamardProduct)):\n                 return r\"\\left(%s\\right)\" % self._print(x)\n             return self._print(x)\n-        return ' '.join(map(parens, expr.args))\n+\n+        if isinstance(expr, MatMul) and expr.args[0].is_Number and expr.args[0]<0:\n+            expr = Mul(-1*expr.args[0], MatMul(*expr.args[1:]))\n+            return '-' + ' '.join(map(parens, expr.args))\n+        else:\n+            return ' '.join(map(parens, expr.args))\n \n     def _print_Mod(self, expr, exp=None):\n         if exp is not None:\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -819,7 +819,20 @@ def _print_BlockMatrix(self, B):\n         return self._print(B.blocks)\n \n     def _print_MatAdd(self, expr):\n-        return self._print_seq(expr.args, None, None, ' + ')\n+        s = None\n+        for item in expr.args:\n+            pform = self._print(item)\n+            if s is None:\n+                s = pform     # First element\n+            else:\n+                if S(item.args[0]).is_negative:\n+                    s = prettyForm(*stringPict.next(s, ' '))\n+                    pform = self._print(item)\n+                else:\n+                    s = prettyForm(*stringPict.next(s, ' + '))\n+                s = prettyForm(*stringPict.next(s, pform))\n+\n+        return s\n \n     def _print_MatMul(self, expr):\n         args = list(expr.args)\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -304,7 +304,14 @@ def _print_Mul(self, expr):\n             return sign + '*'.join(a_str) + \"/(%s)\" % '*'.join(b_str)\n \n     def _print_MatMul(self, expr):\n-        return '*'.join([self.parenthesize(arg, precedence(expr))\n+        c, m = expr.as_coeff_mmul()\n+        if c.is_number and c < 0:\n+            expr = _keep_coeff(-c, m)\n+            sign = \"-\"\n+        else:\n+            sign = \"\"\n+\n+        return sign + '*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n     def _print_HadamardProduct(self, expr):\n@@ -312,8 +319,20 @@ def _print_HadamardProduct(self, expr):\n             for arg in expr.args])\n \n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = [self.parenthesize(arg, precedence(expr))\n+             for arg in expr.args]\n+        l = []\n+        for t in terms:\n+            if t.startswith('-'):\n+                sign = \"-\"\n+                t = t[1:]\n+            else:\n+                sign = \"+\"\n+            l.extend([sign, t])\n+        sign = l.pop(0)\n+        if sign == '+':\n+            sign = \"\"\n+        return sign + ' '.join(l)\n \n     def _print_NaN(self, expr):\n         return 'nan'\n",
  "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6089,6 +6089,17 @@ def test_MatrixElement_printing():\n     assert upretty(F) == ucode_str1\n \n \n+def test_MatrixSymbol_printing():\n+    # test cases for issue #14237\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+    C = MatrixSymbol(\"C\", 3, 3)\n+\n+    assert pretty(-A*B*C) == \"-A*B*C\"\n+    assert pretty(A - B) == \"-B + A\"\n+    assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n+\n+\n def test_degree_printing():\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90°'\ndiff --git a/sympy/printing/tests/test_ccode.py b/sympy/printing/tests/test_ccode.py\n--- a/sympy/printing/tests/test_ccode.py\n+++ b/sympy/printing/tests/test_ccode.py\n@@ -755,7 +755,7 @@ def test_MatrixElement_printing():\n     assert(ccode(3 * A[0, 0]) == \"3*A[0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(ccode(F) == \"((-1)*B + A)[0]\")\n+    assert(ccode(F) == \"(-B + A)[0]\")\n \n \n def test_subclass_CCodePrinter():\ndiff --git a/sympy/printing/tests/test_fcode.py b/sympy/printing/tests/test_fcode.py\n--- a/sympy/printing/tests/test_fcode.py\n+++ b/sympy/printing/tests/test_fcode.py\n@@ -756,4 +756,4 @@ def test_MatrixElement_printing():\n     assert(fcode(3 * A[0, 0]) == \"      3*A(1, 1)\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(fcode(F) == \"      ((-1)*B + A)(1, 1)\")\n+    assert(fcode(F) == \"      (-B + A)(1, 1)\")\ndiff --git a/sympy/printing/tests/test_jscode.py b/sympy/printing/tests/test_jscode.py\n--- a/sympy/printing/tests/test_jscode.py\n+++ b/sympy/printing/tests/test_jscode.py\n@@ -382,4 +382,4 @@ def test_MatrixElement_printing():\n     assert(jscode(3 * A[0, 0]) == \"3*A[0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(jscode(F) == \"((-1)*B + A)[0]\")\n+    assert(jscode(F) == \"(-B + A)[0]\")\ndiff --git a/sympy/printing/tests/test_julia.py b/sympy/printing/tests/test_julia.py\n--- a/sympy/printing/tests/test_julia.py\n+++ b/sympy/printing/tests/test_julia.py\n@@ -374,4 +374,4 @@ def test_MatrixElement_printing():\n     assert(julia_code(3 * A[0, 0]) == \"3*A[1,1]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(julia_code(F) == \"((-1)*B + A)[1,1]\")\n+    assert(julia_code(F) == \"(-B + A)[1,1]\")\ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1710,7 +1710,18 @@ def test_MatrixElement_printing():\n     assert latex(3 * A[0, 0]) == r\"3 A_{0, 0}\"\n \n     F = C[0, 0].subs(C, A - B)\n-    assert latex(F) == r\"\\left(-1 B + A\\right)_{0, 0}\"\n+    assert latex(F) == r\"\\left(-B + A\\right)_{0, 0}\"\n+\n+\n+def test_MatrixSymbol_printing():\n+    # test cases for issue #14237\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+    C = MatrixSymbol(\"C\", 3, 3)\n+\n+    assert latex(-A) == r\"-A\"\n+    assert latex(A - A*B - B) == r\"-B - A B + A\"\n+    assert latex(-A*B - A*B*C - B) == r\"-B - A B - A B C\"\n \n \n def test_Quaternion_latex_printing():\ndiff --git a/sympy/printing/tests/test_octave.py b/sympy/printing/tests/test_octave.py\n--- a/sympy/printing/tests/test_octave.py\n+++ b/sympy/printing/tests/test_octave.py\n@@ -394,4 +394,4 @@ def test_MatrixElement_printing():\n     assert mcode(3 * A[0, 0]) == \"3*A(1, 1)\"\n \n     F = C[0, 0].subs(C, A - B)\n-    assert mcode(F) == \"((-1)*B + A)(1, 1)\"\n+    assert mcode(F) == \"(-B + A)(1, 1)\"\ndiff --git a/sympy/printing/tests/test_rcode.py b/sympy/printing/tests/test_rcode.py\n--- a/sympy/printing/tests/test_rcode.py\n+++ b/sympy/printing/tests/test_rcode.py\n@@ -488,4 +488,4 @@ def test_MatrixElement_printing():\n     assert(rcode(3 * A[0, 0]) == \"3*A[0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(rcode(F) == \"((-1)*B + A)[0]\")\n+    assert(rcode(F) == \"(-B + A)[0]\")\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -784,4 +784,12 @@ def test_MatrixElement_printing():\n     assert(str(3 * A[0, 0]) == \"3*A[0, 0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert str(F) == \"((-1)*B + A)[0, 0]\"\n+    assert str(F) == \"(-B + A)[0, 0]\"\n+\n+\n+def test_MatrixSymbol_printing():\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+\n+    assert str(A - A*B - B) == \"-B - A*B + A\"\n+    assert str(A*B - (A+B)) == \"-(A + B) + A*B\"\n",
  "problem_statement": "The difference of MatrixSymbols prints as a sum with (-1) coefficient\nInternally, differences like a-b are represented as the sum of a with `(-1)*b`, but they are supposed to print like a-b. This does not happen with MatrixSymbols. I tried three printers: str, pretty, and latex: \r\n```\r\nfrom sympy import *\r\nA = MatrixSymbol('A', 2, 2)\r\nB = MatrixSymbol('B', 2, 2)\r\nprint(A - A*B - B)\r\npprint(A - A*B - B)\r\nlatex(A - A*B - B)\r\n```\r\nOutput:\r\n```\r\n(-1)*B + (-1)*A*B + A\r\n-B + -A⋅B + A\r\n'-1 B + -1 A B + A'\r\n```\r\n\r\nBased on a [Stack Overflow post](https://stackoverflow.com/q/48826611)\n",
  "hints_text": "",
  "created_at": "2018-02-17T10:38:44Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\"]",
  "PASS_TO_PASS": "[\"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_pretty_ordering\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_issue_7117\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_lambda\", \"test_pretty_order\", \"test_pretty_derivatives\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_pretty_ndim_arrays\", \"test_tensor_TensorProduct\", \"test_diffgeom_print_WedgeProduct\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_ITE\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_print_builtin_set\", \"test_pretty_sets\", \"test_pretty_SetExpr\", \"test_pretty_ImageSet\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_paranthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_FourierSeries\", \"test_pretty_FormalPowerSeries\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_units\", \"test_pretty_Subs\", \"test_gammas\", \"test_beta\", \"test_function_subclass_different_name\", \"test_SingularityFunction\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_expint\", \"test_elliptic_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6285\", \"test_issue_6359\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_PrettyModules\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_4335\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_issue_13651\", \"test_pretty_primenu\", \"test_pretty_primeomega\", \"test_pretty_Mod\", \"test_issue_11801\", \"test_pretty_UnevaluatedExpr\", \"test_issue_10472\", \"test_degree_printing\", \"test_printmethod\", \"test_ccode_sqrt\", \"test_ccode_Pow\", \"test_ccode_Max\", \"test_ccode_constants_mathh\", \"test_ccode_constants_other\", \"test_ccode_Rational\", \"test_ccode_Integer\", \"test_ccode_functions\", \"test_ccode_inline_function\", \"test_ccode_exceptions\", \"test_ccode_user_functions\", \"test_ccode_boolean\", \"test_ccode_Relational\", \"test_ccode_Piecewise\", \"test_ccode_sinc\", \"test_ccode_Piecewise_deep\", \"test_ccode_ITE\", \"test_ccode_settings\", \"test_ccode_Indexed\", \"test_ccode_Indexed_without_looking_for_contraction\", \"test_ccode_loops_matrix_vector\", \"test_dummy_loops\", \"test_ccode_loops_add\", \"test_ccode_loops_multiple_contractions\", \"test_ccode_loops_addfactor\", \"test_ccode_loops_multiple_terms\", \"test_dereference_printing\", \"test_Matrix_printing\", \"test_ccode_reserved_words\", \"test_ccode_sign\", \"test_ccode_Assignment\", \"test_ccode_For\", \"test_ccode_Max_Min\", \"test_ccode_standard\", \"test_CCodePrinter\", \"test_C89CodePrinter\", \"test_C99CodePrinter\", \"test_C99CodePrinter__precision\", \"test_get_math_macros\", \"test_ccode_Declaration\", \"test_C99CodePrinter_custom_type\", \"test_subclass_CCodePrinter\", \"test_fcode_sign\", \"test_fcode_Pow\", \"test_fcode_Rational\", \"test_fcode_Integer\", \"test_fcode_Float\", \"test_fcode_functions\", \"test_case\", \"test_fcode_functions_with_integers\", \"test_fcode_NumberSymbol\", \"test_fcode_complex\", \"test_implicit\", \"test_not_fortran\", \"test_user_functions\", \"test_inline_function\", \"test_assign_to\", \"test_line_wrapping\", \"test_fcode_precedence\", \"test_fcode_Logical\", \"test_fcode_Xlogical\", \"test_fcode_Relational\", \"test_fcode_Piecewise\", \"test_wrap_fortran\", \"test_wrap_fortran_keep_d0\", \"test_free_form_code_line\", \"test_free_form_continuation_line\", \"test_free_form_comment_line\", \"test_loops\", \"test_fcode_Indexed_without_looking_for_contraction\", \"test_derived_classes\", \"test_indent\", \"test_fcode_For\", \"test_fcode_Declaration\", \"test_jscode_sqrt\", \"test_jscode_Pow\", \"test_jscode_constants_mathh\", \"test_jscode_constants_other\", \"test_jscode_Rational\", \"test_jscode_Integer\", \"test_jscode_functions\", \"test_jscode_inline_function\", \"test_jscode_exceptions\", \"test_jscode_boolean\", \"test_jscode_Piecewise\", \"test_jscode_Piecewise_deep\", \"test_jscode_settings\", \"test_jscode_Indexed\", \"test_jscode_loops_matrix_vector\", \"test_jscode_loops_add\", \"test_jscode_loops_multiple_contractions\", \"test_jscode_loops_addfactor\", \"test_jscode_loops_multiple_terms\", \"test_Integer\", \"test_Rational\", \"test_Function\", \"test_Pow\", \"test_basic_ops\", \"test_1_over_x_and_sqrt\", \"test_mix_number_mult_symbols\", \"test_mix_number_pow_symbols\", \"test_imag\", \"test_constants\", \"test_constants_other\", \"test_boolean\", \"test_Matrices\", \"test_vector_entries_hadamard\", \"test_MatrixSymbol\", \"test_special_matrices\", \"test_containers\", \"test_julia_noninline\", \"test_julia_piecewise\", \"test_julia_piecewise_times_const\", \"test_julia_matrix_assign_to\", \"test_julia_matrix_assign_to_more\", \"test_julia_matrix_1x1\", \"test_julia_matrix_elements\", \"test_julia_boolean\", \"test_julia_not_supported\", \"test_trick_indent_with_end_else_words\", \"test_haramard\", \"test_sparse\", \"test_specfun\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_Modules\", \"test_Hadamard\", \"test_ZeroMatrix\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_issue_8409\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_latex_UnevaluatedExpr\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_octave_noninline\", \"test_octave_piecewise\", \"test_octave_piecewise_times_const\", \"test_octave_matrix_assign_to\", \"test_octave_matrix_assign_to_more\", \"test_octave_matrix_1x1\", \"test_octave_matrix_elements\", \"test_octave_boolean\", \"test_octave_not_supported\", \"test_sinc\", \"test_rcode_sqrt\", \"test_rcode_Pow\", \"test_rcode_Max\", \"test_rcode_constants_mathh\", \"test_rcode_constants_other\", \"test_rcode_Rational\", \"test_rcode_Integer\", \"test_rcode_functions\", \"test_rcode_inline_function\", \"test_rcode_exceptions\", \"test_rcode_user_functions\", \"test_rcode_boolean\", \"test_rcode_Relational\", \"test_rcode_Piecewise\", \"test_rcode_sinc\", \"test_rcode_Piecewise_deep\", \"test_rcode_ITE\", \"test_rcode_settings\", \"test_rcode_Indexed\", \"test_rcode_Indexed_without_looking_for_contraction\", \"test_rcode_loops_matrix_vector\", \"test_rcode_loops_add\", \"test_rcode_loops_multiple_contractions\", \"test_rcode_loops_addfactor\", \"test_rcode_loops_multiple_terms\", \"test_rcode_sgn\", \"test_rcode_Assignment\", \"test_rcode_For\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_Exp\", \"test_factorial\", \"test_Geometry\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_sqrt\", \"test_Float\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_empty_printer\", \"test_FiniteSet\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.092945",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}