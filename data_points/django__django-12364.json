{
  "repo": "django/django",
  "instance_id": "django__django-12364",
  "base_commit": "4ef107e34f752d51fa2cadff30fdd6fd718b026e",
  "patch": "diff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -367,8 +367,16 @@ def _get_deterministic_ordering(self, ordering):\n                     break\n                 ordering_fields.add(field.attname)\n         else:\n-            # No single total ordering field, try unique_together.\n-            for field_names in self.lookup_opts.unique_together:\n+            # No single total ordering field, try unique_together and total\n+            # unique constraints.\n+            constraint_field_names = (\n+                *self.lookup_opts.unique_together,\n+                *(\n+                    constraint.fields\n+                    for constraint in self.lookup_opts.total_unique_constraints\n+                ),\n+            )\n+            for field_names in constraint_field_names:\n                 # Normalize attname references by using get_field().\n                 fields = [self.lookup_opts.get_field(field_name) for field_name in field_names]\n                 # Composite unique constraints containing a nullable column\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -19,7 +19,7 @@\n     NOT_PROVIDED, ExpressionWrapper, IntegerField, Max, Value,\n )\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.constraints import CheckConstraint, UniqueConstraint\n+from django.db.models.constraints import CheckConstraint\n from django.db.models.deletion import CASCADE, Collector\n from django.db.models.fields.related import (\n     ForeignObjectRel, OneToOneField, lazy_related_operation, resolve_relation,\n@@ -1023,12 +1023,14 @@ def _get_unique_checks(self, exclude=None):\n         unique_checks = []\n \n         unique_togethers = [(self.__class__, self._meta.unique_together)]\n-        constraints = [(self.__class__, self._meta.constraints)]\n+        constraints = [(self.__class__, self._meta.total_unique_constraints)]\n         for parent_class in self._meta.get_parent_list():\n             if parent_class._meta.unique_together:\n                 unique_togethers.append((parent_class, parent_class._meta.unique_together))\n-            if parent_class._meta.constraints:\n-                constraints.append((parent_class, parent_class._meta.constraints))\n+            if parent_class._meta.total_unique_constraints:\n+                constraints.append(\n+                    (parent_class, parent_class._meta.total_unique_constraints)\n+                )\n \n         for model_class, unique_together in unique_togethers:\n             for check in unique_together:\n@@ -1038,10 +1040,7 @@ def _get_unique_checks(self, exclude=None):\n \n         for model_class, model_constraints in constraints:\n             for constraint in model_constraints:\n-                if (isinstance(constraint, UniqueConstraint) and\n-                        # Partial unique constraints can't be validated.\n-                        constraint.condition is None and\n-                        not any(name in exclude for name in constraint.fields)):\n+                if not any(name in exclude for name in constraint.fields):\n                     unique_checks.append((model_class, constraint.fields))\n \n         # These are checks for the unique_for_<date/year/month>.\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -7,7 +7,7 @@\n from django.conf import settings\n from django.core.exceptions import FieldDoesNotExist\n from django.db import connections\n-from django.db.models import AutoField, Manager, OrderWrt\n+from django.db.models import AutoField, Manager, OrderWrt, UniqueConstraint\n from django.db.models.query_utils import PathInfo\n from django.utils.datastructures import ImmutableList, OrderedSet\n from django.utils.functional import cached_property\n@@ -827,6 +827,18 @@ def _get_fields(self, forward=True, reverse=True, include_parents=True, include_\n         self._get_fields_cache[cache_key] = fields\n         return fields\n \n+    @cached_property\n+    def total_unique_constraints(self):\n+        \"\"\"\n+        Return a list of total unique constraints. Useful for determining set\n+        of fields guaranteed to be unique for all rows.\n+        \"\"\"\n+        return [\n+            constraint\n+            for constraint in self.constraints\n+            if isinstance(constraint, UniqueConstraint) and constraint.condition is None\n+        ]\n+\n     @cached_property\n     def _property_names(self):\n         \"\"\"Return a set of the names of the properties defined on the model.\"\"\"\n",
  "test_patch": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1039,10 +1039,6 @@ def get_queryset(self, request):\n             (['field', '-other_field'], ['field', '-other_field']),\n             # Composite unique nullable.\n             (['-field', 'null_field'], ['-field', 'null_field', '-pk']),\n-            # Composite unique nullable.\n-            (['-field', 'null_field'], ['-field', 'null_field', '-pk']),\n-            # Composite unique nullable.\n-            (['-field', 'null_field'], ['-field', 'null_field', '-pk']),\n             # Composite unique and nullable.\n             (['-field', 'null_field', 'other_field'], ['-field', 'null_field', 'other_field']),\n             # Composite unique attnames.\n@@ -1062,6 +1058,98 @@ def get_queryset(self, request):\n             with self.subTest(ordering=ordering):\n                 self.assertEqual(change_list._get_deterministic_ordering(ordering), expected)\n \n+    @isolate_apps('admin_changelist')\n+    def test_total_ordering_optimization_meta_constraints(self):\n+        class Related(models.Model):\n+            unique_field = models.BooleanField(unique=True)\n+\n+            class Meta:\n+                ordering = ('unique_field',)\n+\n+        class Model(models.Model):\n+            field_1 = models.BooleanField()\n+            field_2 = models.BooleanField()\n+            field_3 = models.BooleanField()\n+            field_4 = models.BooleanField()\n+            field_5 = models.BooleanField()\n+            field_6 = models.BooleanField()\n+            nullable_1 = models.BooleanField(null=True)\n+            nullable_2 = models.BooleanField(null=True)\n+            related_1 = models.ForeignKey(Related, models.CASCADE)\n+            related_2 = models.ForeignKey(Related, models.CASCADE)\n+            related_3 = models.ForeignKey(Related, models.CASCADE)\n+            related_4 = models.ForeignKey(Related, models.CASCADE)\n+\n+            class Meta:\n+                constraints = [\n+                    *[\n+                        models.UniqueConstraint(fields=fields, name=''.join(fields))\n+                        for fields in (\n+                            ['field_1'],\n+                            ['nullable_1'],\n+                            ['related_1'],\n+                            ['related_2_id'],\n+                            ['field_2', 'field_3'],\n+                            ['field_2', 'nullable_2'],\n+                            ['field_2', 'related_3'],\n+                            ['field_3', 'related_4_id'],\n+                        )\n+                    ],\n+                    models.CheckConstraint(check=models.Q(id__gt=0), name='foo'),\n+                    models.UniqueConstraint(\n+                        fields=['field_5'],\n+                        condition=models.Q(id__gt=10),\n+                        name='total_ordering_1',\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['field_6'],\n+                        condition=models.Q(),\n+                        name='total_ordering',\n+                    ),\n+                ]\n+\n+        class ModelAdmin(admin.ModelAdmin):\n+            def get_queryset(self, request):\n+                return Model.objects.none()\n+\n+        request = self._mocked_authenticated_request('/', self.superuser)\n+        site = admin.AdminSite(name='admin')\n+        model_admin = ModelAdmin(Model, site)\n+        change_list = model_admin.get_changelist_instance(request)\n+        tests = (\n+            # Unique non-nullable field.\n+            (['field_1'], ['field_1']),\n+            # Unique nullable field.\n+            (['nullable_1'], ['nullable_1', '-pk']),\n+            # Related attname unique.\n+            (['related_1_id'], ['related_1_id']),\n+            (['related_2_id'], ['related_2_id']),\n+            # Related ordering introspection is not implemented.\n+            (['related_1'], ['related_1', '-pk']),\n+            # Composite unique.\n+            (['-field_2', 'field_3'], ['-field_2', 'field_3']),\n+            # Composite unique nullable.\n+            (['field_2', '-nullable_2'], ['field_2', '-nullable_2', '-pk']),\n+            # Composite unique and nullable.\n+            (\n+                ['field_2', '-nullable_2', 'field_3'],\n+                ['field_2', '-nullable_2', 'field_3'],\n+            ),\n+            # Composite field and related field name.\n+            (['field_2', '-related_3'], ['field_2', '-related_3', '-pk']),\n+            (['field_3', 'related_4'], ['field_3', 'related_4', '-pk']),\n+            # Composite field and related field attname.\n+            (['field_2', 'related_3_id'], ['field_2', 'related_3_id']),\n+            (['field_3', '-related_4_id'], ['field_3', '-related_4_id']),\n+            # Partial unique constraint is ignored.\n+            (['field_5'], ['field_5', '-pk']),\n+            # Unique constraint with an empty condition.\n+            (['field_6'], ['field_6']),\n+        )\n+        for ordering, expected in tests:\n+            with self.subTest(ordering=ordering):\n+                self.assertEqual(change_list._get_deterministic_ordering(ordering), expected)\n+\n     def test_dynamic_list_filter(self):\n         \"\"\"\n         Regression tests for ticket #17646: dynamic list_filter support.\n",
  "problem_statement": "Detection of existing total ordering in admin changelist should take into account UniqueConstraints without conditions.\nDescription\n\t\nI've been fiddling with db indexes lately to improve the performance of an admin view.\nEventually I found this PR ​https://github.com/django/django/pull/10692 which ensures the records displayed by ChangeList are deterministically ordered.\nAmong other things, the code looks for the presence of a unique_together attribute on the Meta class of the model to determine if the model is already totally ordered.\nI think that _get_deterministic_ordering() should check for the presence of UniqueConstraints as well, which currently aren’t considered by the discovery algorithm.\nI noticed the docs currently advise against using unique_together in favor of UniqueConstraint, suggesting the former may be deprecated in the future, so this fix would change that part of the code accordingly.\nI'm willing to submit a PR for this.\nCheers,\nFabio\n",
  "hints_text": "Agreed, we need to remember to ignore UniqueConstraint's with condition's.\nPR: ​https://github.com/django/django/pull/12364",
  "created_at": "2020-01-23T17:19:54Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_total_ordering_optimization_meta_constraints (admin_changelist.tests.ChangeListTests)\", \"test_tuple_list_display (admin_changelist.tests.ChangeListTests)\"]",
  "PASS_TO_PASS": "[\"test_custom_user_pk_not_named_id (admin_changelist.tests.GetAdminLogTests)\", \"test_missing_args (admin_changelist.tests.GetAdminLogTests)\", \"{% get_admin_log %} works without specifying a user.\", \"test_non_integer_limit (admin_changelist.tests.GetAdminLogTests)\", \"test_without_as (admin_changelist.tests.GetAdminLogTests)\", \"test_without_for_user (admin_changelist.tests.GetAdminLogTests)\", \"test_builtin_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_changelist_search_form_validation (admin_changelist.tests.ChangeListTests)\", \"list_editable edits use a filtered queryset to limit memory usage.\", \"test_clear_all_filters_link (admin_changelist.tests.ChangeListTests)\", \"test_computed_list_display_localization (admin_changelist.tests.ChangeListTests)\", \"test_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_custom_lookup_with_pk_shortcut (admin_changelist.tests.ChangeListTests)\", \"test_custom_paginator (admin_changelist.tests.ChangeListTests)\", \"test_deterministic_order_for_model_ordered_by_its_manager (admin_changelist.tests.ChangeListTests)\", \"test_deterministic_order_for_unordered_model (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_inherited_m2m_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_m2m_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_m2m_to_inherited_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_many_to_many_at_second_level_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_non_unique_related_object_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_non_unique_related_object_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_through_m2m_at_second_level_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_through_m2m_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_list_display (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_list_display_links (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_get_edited_object_ids (admin_changelist.tests.ChangeListTests)\", \"test_get_list_editable_queryset (admin_changelist.tests.ChangeListTests)\", \"test_get_list_editable_queryset_with_regex_chars_in_prefix (admin_changelist.tests.ChangeListTests)\", \"test_get_select_related_custom_method (admin_changelist.tests.ChangeListTests)\", \"test_multiuser_edit (admin_changelist.tests.ChangeListTests)\", \"test_no_distinct_for_m2m_in_list_filter_without_params (admin_changelist.tests.ChangeListTests)\", \"#15185 -- Allow no links from the 'change list' view grid.\", \"test_object_tools_displayed_no_add_permission (admin_changelist.tests.ChangeListTests)\", \"test_pagination (admin_changelist.tests.ChangeListTests)\", \"test_pagination_page_range (admin_changelist.tests.ChangeListTests)\", \"test_pk_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_result_list_editable (admin_changelist.tests.ChangeListTests)\", \"test_result_list_editable_html (admin_changelist.tests.ChangeListTests)\", \"test_result_list_empty_changelist_value (admin_changelist.tests.ChangeListTests)\", \"test_result_list_html (admin_changelist.tests.ChangeListTests)\", \"test_result_list_set_empty_value_display_in_model_admin (admin_changelist.tests.ChangeListTests)\", \"test_result_list_set_empty_value_display_on_admin_site (admin_changelist.tests.ChangeListTests)\", \"test_select_related_as_empty_tuple (admin_changelist.tests.ChangeListTests)\", \"test_select_related_as_tuple (admin_changelist.tests.ChangeListTests)\", \"test_select_related_preserved (admin_changelist.tests.ChangeListTests)\", \"test_show_all (admin_changelist.tests.ChangeListTests)\", \"test_spanning_relations_with_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_specified_ordering_by_f_expression (admin_changelist.tests.ChangeListTests)\", \"test_specified_ordering_by_f_expression_without_asc_desc (admin_changelist.tests.ChangeListTests)\", \"test_total_ordering_optimization (admin_changelist.tests.ChangeListTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.623232",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}