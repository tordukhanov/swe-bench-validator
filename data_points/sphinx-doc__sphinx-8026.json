{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-8026",
  "base_commit": "4f56fad7b7f5c71ffa734fd6a7a53b399a728f41",
  "patch": "diff --git a/sphinx/util/i18n.py b/sphinx/util/i18n.py\n--- a/sphinx/util/i18n.py\n+++ b/sphinx/util/i18n.py\n@@ -306,8 +306,12 @@ def get_image_filename_for_language(filename: str, env: \"BuildEnvironment\") -> s\n     dirname = path.dirname(d['root'])\n     if dirname and not dirname.endswith(path.sep):\n         dirname += path.sep\n+    docpath = path.dirname(env.docname)\n+    if docpath and not docpath.endswith(path.sep):\n+        docpath += path.sep\n     d['path'] = dirname\n     d['basename'] = path.basename(d['root'])\n+    d['docpath'] = docpath\n     d['language'] = env.config.language\n     try:\n         return filename_format.format(**d)\n",
  "test_patch": "diff --git a/tests/test_util_i18n.py b/tests/test_util_i18n.py\n--- a/tests/test_util_i18n.py\n+++ b/tests/test_util_i18n.py\n@@ -90,6 +90,8 @@ def test_format_date():\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Path separators don't match on windows\")\n def test_get_filename_for_language(app):\n+    app.env.temp_data['docname'] = 'index'\n+\n     # language is None\n     app.env.config.language = None\n     assert app.env.config.language is None\n@@ -145,6 +147,17 @@ def test_get_filename_for_language(app):\n     with pytest.raises(SphinxError):\n         i18n.get_image_filename_for_language('foo.png', app.env)\n \n+    # docpath (for a document in the top of source directory)\n+    app.env.config.language = 'en'\n+    app.env.config.figure_language_filename = '/{docpath}{language}/{basename}{ext}'\n+    assert (i18n.get_image_filename_for_language('foo.png', app.env) ==\n+            '/en/foo.png')\n+\n+    # docpath (for a document in the sub directory)\n+    app.env.temp_data['docname'] = 'subdir/index'\n+    assert (i18n.get_image_filename_for_language('foo.png', app.env) ==\n+            '/subdir/en/foo.png')\n+\n \n def test_CatalogRepository(tempdir):\n     (tempdir / 'loc1' / 'xx' / 'LC_MESSAGES').makedirs()\n",
  "problem_statement": "More customization options for figure_language_filename for localized images\n**Is your feature request related to a problem? Please describe.**\r\nI'm working on the localization of the [Godot Engine documentation](https://github.com/godotengine/godot-docs), and we use a [separate repository](https://github.com/godotengine/godot-docs-l10n) to hold the massive PO files that we use for Weblate and Sphinx.\r\n\r\nI'm now working on image localization ([upstream issue](https://github.com/godotengine/godot-docs-l10n/issues/5)) and I find that even though [`figure_language_filename`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-figure_language_filename) seems to provide some customization option, it's impossible to host the localized images in the separate repository.\r\n\r\nIndeed, both the `{root}` and `{path}` substitution tokens resolve to absolute paths from the host system (e.g. `root: /home/akien/Projects/godot/godot-docs-l10n/docs/tutorials/shading/img/vs_popup`), and since I can't do post-processing of the subsituted string, I can't strip the `/home/akien/Projects/godot/godot-docs-l10n/docs/` base path to attempt using something like `../img/{language}/{rel_path}/{filename}{ext}`.\r\n\r\n**Describe the solution you'd like**\r\nI'd like the addition of one or more new path substitution tokens that can be used to customize the path to localized images more freely.\r\n\r\nFor example, for this structure:\r\n```\r\nfoo/bar/index.rst\r\nfoo/bar/img/image.png\r\n```\r\nand `index.rst` referencing `.. image:: img/image.png`, I could imagine two useful substitution tokens:\r\n```\r\nrelative_path = \"img/\"\r\nresolved_path = \"foo/bar/img/\"\r\n```\r\n\r\nAlternatively (and possible as a better solution), `{root}` and `{path}` could be changed to actually be relative to the Sphinx project's root folder, i.e. the `{resolved_path}` in my example above, i.e.:\r\n```\r\nroot = \"foo/bar/img/image\"\r\npath = \"foo/bar/img\"\r\n```\r\n(While the documentation currently states that these would be `img/image` and `img/`, which is wrong in my tests on Linux with Sphinx 1.8.5).\r\n\r\nI don't specifically need access to the file-relative path `img/` in my use case, but I imagine that some projects may benefit from it.\r\n\r\n**Describe alternatives you've considered**\r\nI don't see any alternative option that would enable the workflow I want to use with localized images not being either in the original image's folder, or in one of its subfolders.\r\n\r\n*Edit:* We came up with ~two~ three hacks that we could use to workaround the currently limited substitution tokens offered by `figure_language_filename`:\r\n- Passing a class that redefines `format()` with our custom post-processing: https://github.com/godotengine/godot-docs-l10n/issues/5#issuecomment-637569033\r\n- Symlinking all localized images from the out-of-tree location to the in-tree location where Sphinx wants it: https://github.com/godotengine/godot-docs-l10n/issues/5#issuecomment-637572793\r\n- Overriding sphinx.util.i18n.get_image_filename_for_language since apparently Python lets us do that, so we can do the post-processing we want: https://github.com/godotengine/godot-docs-l10n/issues/5#issuecomment-637589503\r\n\r\nI did not test with latest Sphinx as it's not properly supported on ReadTheDocs yet, but the relevant code seems to be unchanged from 1.8.5:\r\nhttps://github.com/sphinx-doc/sphinx/blob/3.x/sphinx/util/i18n.py#L299-L315\r\n\r\n**Additional context**\r\n- https://github.com/godotengine/godot-docs-l10n/issues/5\r\n- https://git.mahara.org/user-manual/manual/blob/07ce4e00a4d3d7d553647ecea8a2b7f856561945/source/conf.py#L30-40\r\n\r\n\n",
  "hints_text": "BTW the fact that `{root}` and `{path}` are absolute might be a bug, given that the code reads like `translated` would be supposed to be relative to the doc file:\r\nhttps://github.com/sphinx-doc/sphinx/blob/3.x/sphinx/util/i18n.py#L318-L327\r\n\r\nYet on my system with Sphinx 1.8.5 the variables would be:\r\n```\r\nsrcdir: /home/akien/Projects/godot/godot-docs-l10n/docs\r\ndirname: getting_started/step_by_step\r\ntranslated: /home/akien/Projects/godot/godot-docs-l10n/docs/getting_started/step_by_step/img/shooter_instancing.fr.png\r\n```\r\n`path.join` seems to be happy to automatically resolve the concatenation of the two absolute paths, which is why it works fine as is.\r\n\r\nIf this were changed so that the output of `get_image_filename_for_language(filename, env)` is made relative to the doc name, I would still need an extra token for my use case as I'd need to have the `dirname` part too from the above code link (`path.dirname(env.docname)`).\nThank you for reporting. I agree this is a bug. And it seems the configuration was designed as `{root}` is a relative path from the current document (Our document says `dirname/filename` is a root token for `dirname/filename.png`!).\r\n\r\n>{root} - the filename, including any path component, without the file extension, e.g. dirname/filename\r\n\r\nI'll try to fix this not to cause breaking changes later.\nSounds good. Making `{root}` and `{path}` relative to the current document and thus matching their documentation definitely makes sense.\r\n\r\nFor the other, feature proposal part of this issue, I'd suggest to then consider adding a new token that would be basically `path.join(path.dirname(env.docname), {path}` (with `{path}` being the actual Python variable used to format it). As in my use case having only the path relative to the current document wouldn't be sufficient, since `figure_language_filename` doesn't provide any reference to what the current document is.\nAs a first step, I just posted #8006 to fix that an absolute path is passed to `figure_language_filename` as a `{root}`.\r\n\r\nNow I'm considering about next step, adding a new key for `figure_language_filename`.\r\n@akien-mga I'd like to confirm just in case, what you want is a dirname of the document, right? If so, I will add a new key like `docpath` (I'm still looking for more better name for this).\nThanks for the bugfix!\r\n\r\nYeah, I think what I'd need would be a dirname of the document, and possibly always resolved to be relative to the root folder of the project, e.g. with:\r\n```\r\ncommunity/contributing/img/l10n_01_language_list.png\r\n```\r\nReferenced in:\r\n```\r\ncommunity/contributing/editor_and_docs_localization.rst\r\n```\r\nas:\r\n```\r\n.. image:: img/l10n_01_language_list.png\r\n```\r\nI'd need to have access somehow to:\r\n```\r\ncommunity/contributing/img\r\n```\r\nSo that the `figure_language_filename` can be configured as:\r\n```\r\n<arbitrary path>/{docpath}/{filename}.{language}{extension}\r\n```\r\n\r\nIn my concrete example, this would resolve to (`..` is a separated l10n repo where the main Sphinx project is included as submodule, see https://github.com/godotengine/godot-docs-l10n):\r\n```\r\n../images/community/contributing/img/l10n_01_language_list.fr.png\r\n```\r\nfor example (French locale).\r\n\r\nCurrently I'm monkey-patching Sphinx this way and it works fine for the use case, though of course I'm looking forward to using an upstream solution :)\r\nhttps://github.com/godotengine/godot-docs/blob/04f7c48b90d5a3573486e631ddf665b61d971ac1/conf.py#L204-L231\nI just merged #8006 now. And I'll add `docpath` later.",
  "created_at": "2020-08-01T06:27:06Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"tests/test_util_i18n.py::test_get_filename_for_language\"]",
  "PASS_TO_PASS": "[\"tests/test_util_i18n.py::test_catalog_info_for_file_and_path\", \"tests/test_util_i18n.py::test_catalog_info_for_sub_domain_file_and_path\", \"tests/test_util_i18n.py::test_catalog_outdated\", \"tests/test_util_i18n.py::test_catalog_write_mo\", \"tests/test_util_i18n.py::test_CatalogRepository\"]",
  "environment_setup_commit": "f92fa6443fe6f457ab0c26d41eb229e825fda5e1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.050191",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}