{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12214",
  "base_commit": "ac03325b44485e603992a0bb783536a9f8a9152f",
  "patch": "diff --git a/sympy/functions/special/bsplines.py b/sympy/functions/special/bsplines.py\n--- a/sympy/functions/special/bsplines.py\n+++ b/sympy/functions/special/bsplines.py\n@@ -16,21 +16,68 @@ def _add_splines(c, b1, d, b2):\n         new_args = []\n         n_intervals = len(b1.args)\n         if n_intervals != len(b2.args):\n-            raise ValueError(\"Args of b1 and b2 are not equal\")\n-        new_args.append((c*b1.args[0].expr, b1.args[0].cond))\n-        for i in range(1, n_intervals - 1):\n-            new_args.append((\n-                c*b1.args[i].expr + d*b2.args[i - 1].expr,\n-                b1.args[i].cond\n-            ))\n-        new_args.append((d*b2.args[-2].expr, b2.args[-2].cond))\n-        new_args.append(b2.args[-1])\n+            # Args of b1 and b2 are not equal. Just combining the Piecewise without any fancy optimisation\n+            p1 = piecewise_fold(c*b1)\n+            p2 = piecewise_fold(d*b2)\n+\n+            # Search all Piecewise arguments except (0, True)\n+            p2args = list(p2.args[:-1])\n+\n+            # This merging algorithm assume the conditions in p1 and p2 are sorted\n+            for arg in p1.args[:-1]:\n+                # Conditional of Piecewise are And objects\n+                # the args of the And object is a tuple of two Relational objects\n+                # the numerical value is in the .rhs of the Relational object\n+                expr = arg.expr\n+                cond = arg.cond\n+\n+                lower = cond.args[0].rhs\n+\n+                # Check p2 for matching conditions that can be merged\n+                for i, arg2 in enumerate(p2args):\n+                    expr2 = arg2.expr\n+                    cond2 = arg2.cond\n+\n+                    lower_2 = cond2.args[0].rhs\n+                    upper_2 = cond2.args[1].rhs\n+\n+                    if cond2 == cond:\n+                        # Conditions match, join expressions\n+                        expr += expr2\n+                        # Remove matching element\n+                        del p2args[i]\n+                        # No need to check the rest\n+                        break\n+                    elif lower_2 < lower and upper_2 <= lower:\n+                        # Check if arg2 condition smaller than arg1, add to new_args by itself (no match expected in p1)\n+                        new_args.append(arg2)\n+                        del p2args[i]\n+                        break\n+\n+                # Checked all, add expr and cond\n+                new_args.append((expr, cond))\n+\n+            # Add remaining items from p2args\n+            new_args.extend(p2args)\n+\n+            # Add final (0, True)\n+            new_args.append((0, True))\n+        else:\n+            new_args.append((c*b1.args[0].expr, b1.args[0].cond))\n+            for i in range(1, n_intervals - 1):\n+                new_args.append((\n+                    c*b1.args[i].expr + d*b2.args[i - 1].expr,\n+                    b1.args[i].cond\n+                ))\n+            new_args.append((d*b2.args[-2].expr, b2.args[-2].cond))\n+            new_args.append(b2.args[-1])\n+\n         rv = Piecewise(*new_args)\n \n     return rv.expand()\n \n \n-def bspline_basis(d, knots, n, x, close=True):\n+def bspline_basis(d, knots, n, x):\n     \"\"\"The `n`-th B-spline at `x` of degree `d` with knots.\n \n     B-Splines are piecewise polynomials of degree `d` [1]_.  They are defined on\n@@ -51,11 +98,11 @@ def bspline_basis(d, knots, n, x, close=True):\n     Here is an example of a cubic B-spline:\n \n         >>> bspline_basis(3, range(5), 0, x)\n-        Piecewise((x**3/6, (x >= 0) & (x < 1)),\n+        Piecewise((x**3/6, (x >= 0) & (x <= 1)),\n                   (-x**3/2 + 2*x**2 - 2*x + 2/3,\n-                  (x >= 1) & (x < 2)),\n+                  (x >= 1) & (x <= 2)),\n                   (x**3/2 - 4*x**2 + 10*x - 22/3,\n-                  (x >= 2) & (x < 3)),\n+                  (x >= 2) & (x <= 3)),\n                   (-x**3/6 + 2*x**2 - 8*x + 32/3,\n                   (x >= 3) & (x <= 4)),\n                   (0, True))\n@@ -99,23 +146,21 @@ def bspline_basis(d, knots, n, x, close=True):\n         raise ValueError('n + d + 1 must not exceed len(knots) - 1')\n     if d == 0:\n         result = Piecewise(\n-            (S.One, Interval(knots[n], knots[n + 1], False,\n-             not close).contains(x)),\n+            (S.One, Interval(knots[n], knots[n + 1]).contains(x)),\n             (0, True)\n         )\n     elif d > 0:\n         denom = knots[n + d + 1] - knots[n + 1]\n         if denom != S.Zero:\n             B = (knots[n + d + 1] - x)/denom\n-            b2 = bspline_basis(d - 1, knots, n + 1, x, close)\n+            b2 = bspline_basis(d - 1, knots, n + 1, x)\n         else:\n             b2 = B = S.Zero\n \n         denom = knots[n + d] - knots[n]\n         if denom != S.Zero:\n             A = (x - knots[n])/denom\n-            b1 = bspline_basis(\n-                d - 1, knots, n, x, close and (B == S.Zero or b2 == S.Zero))\n+            b1 = bspline_basis(d - 1, knots, n, x)\n         else:\n             b1 = A = S.Zero\n \n@@ -141,12 +186,12 @@ def bspline_basis_set(d, knots, x):\n     >>> knots = range(5)\n     >>> splines = bspline_basis_set(d, knots, x)\n     >>> splines\n-    [Piecewise((x**2/2, (x >= 0) & (x < 1)),\n-               (-x**2 + 3*x - 3/2, (x >= 1) & (x < 2)),\n+    [Piecewise((x**2/2, (x >= 0) & (x <= 1)),\n+               (-x**2 + 3*x - 3/2, (x >= 1) & (x <= 2)),\n                (x**2/2 - 3*x + 9/2, (x >= 2) & (x <= 3)),\n                (0, True)),\n-    Piecewise((x**2/2 - x + 1/2, (x >= 1) & (x < 2)),\n-              (-x**2 + 5*x - 11/2, (x >= 2) & (x < 3)),\n+    Piecewise((x**2/2 - x + 1/2, (x >= 1) & (x <= 2)),\n+              (-x**2 + 5*x - 11/2, (x >= 2) & (x <= 3)),\n               (x**2/2 - 4*x + 8, (x >= 3) & (x <= 4)),\n               (0, True))]\n \n",
  "test_patch": "diff --git a/sympy/functions/special/tests/test_bsplines.py b/sympy/functions/special/tests/test_bsplines.py\n--- a/sympy/functions/special/tests/test_bsplines.py\n+++ b/sympy/functions/special/tests/test_bsplines.py\n@@ -1,6 +1,6 @@\n from sympy.functions import bspline_basis_set\n from sympy.core.compatibility import range\n-from sympy import Piecewise, Interval\n+from sympy import Piecewise, Interval, And\n from sympy import symbols, Rational\n \n x, y = symbols('x,y')\n@@ -11,38 +11,37 @@ def test_basic_degree_0():\n     knots = range(5)\n     splines = bspline_basis_set(d, knots, x)\n     for i in range(len(splines)):\n-        assert splines[i] == Piecewise((1, Interval(i, i + 1)\n-                                       .contains(x)), (0, True))\n+        assert splines[i] == Piecewise((1, Interval(i, i + 1).contains(x)),\n+                                       (0, True))\n \n \n def test_basic_degree_1():\n     d = 1\n     knots = range(5)\n     splines = bspline_basis_set(d, knots, x)\n-    assert splines[0] == Piecewise(\n-        (x, Interval(0, 1, False, True).contains(x)),\n-        (2 - x, Interval(1, 2).contains(x)), (0, True))\n-    assert splines[1] == Piecewise(\n-        (-1 + x, Interval(1, 2, False, True).contains(x)),\n-        (3 - x, Interval(2, 3).contains(x)), (0, True))\n-    assert splines[2] == Piecewise(\n-        (-2 + x, Interval(2, 3, False, True).contains(x)),\n-        (4 - x, Interval(3, 4).contains(x)), (0, True))\n+    assert splines[0] == Piecewise((x, Interval(0, 1).contains(x)),\n+                                   (2 - x, Interval(1, 2).contains(x)),\n+                                   (0, True))\n+    assert splines[1] == Piecewise((-1 + x, Interval(1, 2).contains(x)),\n+                                   (3 - x, Interval(2, 3).contains(x)),\n+                                   (0, True))\n+    assert splines[2] == Piecewise((-2 + x, Interval(2, 3).contains(x)),\n+                                   (4 - x, Interval(3, 4).contains(x)),\n+                                   (0, True))\n \n \n def test_basic_degree_2():\n     d = 2\n     knots = range(5)\n     splines = bspline_basis_set(d, knots, x)\n-    b0 = Piecewise((x**2/2, Interval(0, 1, False, True).contains(x)),\n-        (Rational(\n-            -3, 2) + 3*x - x**2, Interval(1, 2, False, True).contains(x)),\n-        (Rational(9, 2) - 3*x + x**2/2, Interval(2, 3).contains(x)), (0, True))\n-    b1 = Piecewise(\n-        (Rational(1, 2) - x + x**2/2, Interval(1, 2, False, True).contains(x)),\n-        (Rational(\n-            -11, 2) + 5*x - x**2, Interval(2, 3, False, True).contains(x)),\n-        (8 - 4*x + x**2/2, Interval(3, 4).contains(x)), (0, True))\n+    b0 = Piecewise((x**2/2, Interval(0, 1).contains(x)),\n+                   (Rational(-3, 2) + 3*x - x**2, Interval(1, 2).contains(x)),\n+                   (Rational(9, 2) - 3*x + x**2/2, Interval(2, 3).contains(x)),\n+                   (0, True))\n+    b1 = Piecewise((Rational(1, 2) - x + x**2/2, Interval(1, 2).contains(x)),\n+                   (Rational(-11, 2) + 5*x - x**2, Interval(2, 3).contains(x)),\n+                   (8 - 4*x + x**2/2, Interval(3, 4).contains(x)),\n+                   (0, True))\n     assert splines[0] == b0\n     assert splines[1] == b1\n \n@@ -52,11 +51,9 @@ def test_basic_degree_3():\n     knots = range(5)\n     splines = bspline_basis_set(d, knots, x)\n     b0 = Piecewise(\n-        (x**3/6, Interval(0, 1, False, True).contains(x)),\n-        (Rational(2, 3) - 2*x + 2*x**2 - x**3/2, Interval(1, 2,\n-         False, True).contains(x)),\n-        (Rational(-22, 3) + 10*x - 4*x**2 + x**3/2, Interval(2, 3,\n-         False, True).contains(x)),\n+        (x**3/6, Interval(0, 1).contains(x)),\n+        (Rational(2, 3) - 2*x + 2*x**2 - x**3/2, Interval(1, 2).contains(x)),\n+        (Rational(-22, 3) + 10*x - 4*x**2 + x**3/2, Interval(2, 3).contains(x)),\n         (Rational(32, 3) - 8*x + 2*x**2 - x**3/6, Interval(3, 4).contains(x)),\n         (0, True)\n     )\n@@ -69,15 +66,37 @@ def test_repeated_degree_1():\n     splines = bspline_basis_set(d, knots, x)\n     assert splines[0] == Piecewise((1 - x, Interval(0, 1).contains(x)),\n                                    (0, True))\n-    assert splines[1] == Piecewise(\n-        (x, Interval(0, 1, False, True).contains(x)),\n-        (2 - x, Interval(1, 2).contains(x)), (0, True))\n-    assert splines[2] == Piecewise((-1 + x, Interval(1, 2).contains(x)\n-                                   ), (0, True))\n+    assert splines[1] == Piecewise((x, Interval(0, 1).contains(x)),\n+                                   (2 - x, Interval(1, 2).contains(x)),\n+                                   (0, True))\n+    assert splines[2] == Piecewise((-1 + x, Interval(1, 2).contains(x)),\n+                                   (0, True))\n     assert splines[3] == Piecewise((3 - x, Interval(2, 3).contains(x)),\n                                    (0, True))\n-    assert splines[4] == Piecewise(\n-        (-2 + x, Interval(2, 3, False, True).contains(x)),\n-        (4 - x, Interval(3, 4).contains(x)), (0, True))\n-    assert splines[5] == Piecewise((-3 + x, Interval(3, 4).contains(x)\n-                                   ), (0, True))\n+    assert splines[4] == Piecewise((-2 + x, Interval(2, 3).contains(x)),\n+                                   (4 - x, Interval(3, 4).contains(x)),\n+                                   (0, True))\n+    assert splines[5] == Piecewise((-3 + x, Interval(3, 4).contains(x)),\n+                                   (0, True))\n+\n+\n+def test_repeated_degree_2():\n+    d = 2\n+    knots = [0, 0, 1, 2, 2, 3, 4, 4]\n+    splines = bspline_basis_set(d, knots, x)\n+\n+    assert splines[0] == Piecewise(((-3*x**2/2 + 2*x), And(x <= 1, x >= 0)),\n+                                   (x**2/2 - 2*x + 2, And(x <= 2, x >= 1)),\n+                                   (0, True))\n+    assert splines[1] == Piecewise((x**2/2, And(x <= 1, x >= 0)),\n+                                   (-3*x**2/2 + 4*x - 2, And(x <= 2, x >= 1)),\n+                                   (0, True))\n+    assert splines[2] == Piecewise((x**2 - 2*x + 1, And(x <= 2, x >= 1)),\n+                                   (x**2 - 6*x + 9, And(x <= 3, x >= 2)),\n+                                   (0, True))\n+    assert splines[3] == Piecewise((-3*x**2/2 + 8*x - 10, And(x <= 3, x >= 2)),\n+                                   (x**2/2 - 4*x + 8, And(x <= 4, x >= 3)),\n+                                   (0, True))\n+    assert splines[4] == Piecewise((x**2/2 - 2*x + 2, And(x <= 3, x >= 2)),\n+                                   (-3*x**2/2 + 10*x - 16, And(x <= 4, x >= 3)),\n+                                   (0, True))\n",
  "problem_statement": "b splines of degree > 1?\nLooking at the spline_basis function:\n\n```\nknots = [0,0,0,2.5,5,7.5,10,10,10] \nsy.bspline_basis_set(2,knots,x)\n```\n\nThis seems to break while the following is fine:\n\n```\nknots = [0,0,2.5,5,7.5,10,10]\nsy.bspline_basis_set(1,knots,x)\n```\n\nI can tweak in extra knots, i.e. placing them at (0.1,0.2, 10.1,10.2 in the example) but this is still not really giving the desired basis matrix. \n\nOr am I just missing something very obvious?\n\nI always generated knots for bspline basis matrix by taking the list of knots and:\n\n```\n nknots = np.concatenate((np.repeat(knots[0],(degree+1)),np.array(knots[1:-1]),np.repeat(knots[-1],(degree+1))))\n```\n\n",
  "hints_text": "It appears that _add_splines was planned for the case when all the knots are distinct. Otherwise there are intervals of length zero, and those are not included in Piecewise. Then _add_splines will be confused.\n\nAlso having problems with this. Is there no way of generating B-splines with repeated knots and order > 1?",
  "created_at": "2017-02-23T16:13:41Z",
  "version": "1.1",
  "FAIL_TO_PASS": "[\"test_basic_degree_1\", \"test_basic_degree_2\", \"test_basic_degree_3\", \"test_repeated_degree_1\"]",
  "PASS_TO_PASS": "[\"test_basic_degree_0\"]",
  "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.075954",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}