{
  "repo": "django/django",
  "instance_id": "django__django-11701",
  "base_commit": "6b16c91157512587017e9178d066ed1a683e7795",
  "patch": "diff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -1,6 +1,8 @@\n from datetime import datetime, timedelta\n \n+from django import forms\n from django.conf import settings\n+from django.contrib import messages\n from django.contrib.admin import FieldListFilter\n from django.contrib.admin.exceptions import (\n     DisallowedModelAdminLookup, DisallowedModelAdminToField,\n@@ -34,7 +36,18 @@\n     ALL_VAR, ORDER_VAR, ORDER_TYPE_VAR, SEARCH_VAR, IS_POPUP_VAR, TO_FIELD_VAR)\n \n \n+class ChangeListSearchForm(forms.Form):\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        # Populate \"fields\" dynamically because SEARCH_VAR is a variable:\n+        self.fields = {\n+            SEARCH_VAR: forms.CharField(required=False, strip=False),\n+        }\n+\n+\n class ChangeList:\n+    search_form_class = ChangeListSearchForm\n+\n     def __init__(self, request, model, list_display, list_display_links,\n                  list_filter, date_hierarchy, search_fields, list_select_related,\n                  list_per_page, list_max_show_all, list_editable, model_admin, sortable_by):\n@@ -56,6 +69,11 @@ def __init__(self, request, model, list_display, list_display_links,\n         self.sortable_by = sortable_by\n \n         # Get search parameters from the query string.\n+        _search_form = self.search_form_class(request.GET)\n+        if not _search_form.is_valid():\n+            for error in _search_form.errors.values():\n+                messages.error(request, ', '.join(error))\n+        self.query = _search_form.cleaned_data.get(SEARCH_VAR) or ''\n         try:\n             self.page_num = int(request.GET.get(PAGE_VAR, 0))\n         except ValueError:\n@@ -76,7 +94,6 @@ def __init__(self, request, model, list_display, list_display_links,\n             self.list_editable = ()\n         else:\n             self.list_editable = list_editable\n-        self.query = request.GET.get(SEARCH_VAR, '')\n         self.queryset = self.get_queryset(request)\n         self.get_results(request)\n         if self.is_popup:\n",
  "test_patch": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -8,6 +8,7 @@\n from django.contrib.admin.views.main import ALL_VAR, SEARCH_VAR\n from django.contrib.auth.models import User\n from django.contrib.contenttypes.models import ContentType\n+from django.contrib.messages.storage.cookie import CookieStorage\n from django.db import connection, models\n from django.db.models import F\n from django.db.models.fields import Field, IntegerField\n@@ -406,6 +407,22 @@ def test_distinct_for_non_unique_related_object_in_list_filter(self):\n         # Make sure distinct() was called\n         self.assertEqual(cl.queryset.count(), 1)\n \n+    def test_changelist_search_form_validation(self):\n+        m = ConcertAdmin(Concert, custom_site)\n+        tests = [\n+            ({SEARCH_VAR: '\\x00'}, 'Null characters are not allowed.'),\n+            ({SEARCH_VAR: 'some\\x00thing'}, 'Null characters are not allowed.'),\n+        ]\n+        for case, error in tests:\n+            with self.subTest(case=case):\n+                request = self.factory.get('/concert/', case)\n+                request.user = self.superuser\n+                request._messages = CookieStorage(request)\n+                m.get_changelist_instance(request)\n+                messages = [m.message for m in request._messages]\n+                self.assertEqual(1, len(messages))\n+                self.assertEqual(error, messages[0])\n+\n     def test_distinct_for_non_unique_related_object_in_search_fields(self):\n         \"\"\"\n         Regressions tests for #15819: If a field listed in search_fields\n",
  "problem_statement": "Admin search with a null character crashes with \"A string literal cannot contain NUL (0x00) characters.\" on PostgreSQL\nDescription\n\t\nInput following URL to browser URL field and access.\n​http://localhost/admin/auth/user/?q=%00\nCrash with following Error.\nEnvironment:\nRequest Method: GET\nRequest URL: http://localhost/admin/auth/user/?q=%00\nDjango Version: 2.1.4\nPython Version: 3.6.7\nInstalled Applications:\n['django.contrib.auth',\n 'django.contrib.contenttypes',\n 'django.contrib.sessions',\n 'django.contrib.messages',\n 'django.contrib.staticfiles',\n 'django_extensions',\n 'rest_framework',\n 'select2',\n 'corsheaders',\n .......]\nInstalled Middleware:\n['django.middleware.security.SecurityMiddleware',\n 'django.contrib.sessions.middleware.SessionMiddleware',\n 'corsheaders.middleware.CorsMiddleware',\n 'django.middleware.common.CommonMiddleware',\n 'django.middleware.csrf.CsrfViewMiddleware',\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\n 'django.contrib.messages.middleware.MessageMiddleware',\n 'django.middleware.clickjacking.XFrameOptionsMiddleware']\nTraceback:\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/core/handlers/exception.py\" in inner\n 34.\t\t\t response = get_response(request)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\n 126.\t\t\t\t response = self.process_exception_by_middleware(e, request)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\n 124.\t\t\t\t response = wrapped_callback(request, *callback_args, **callback_kwargs)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/contrib/admin/options.py\" in wrapper\n 604.\t\t\t\t return self.admin_site.admin_view(view)(*args, **kwargs)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/utils/decorators.py\" in _wrapped_view\n 142.\t\t\t\t\t response = view_func(request, *args, **kwargs)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/views/decorators/cache.py\" in _wrapped_view_func\n 44.\t\t response = view_func(request, *args, **kwargs)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/contrib/admin/sites.py\" in inner\n 223.\t\t\t return view(request, *args, **kwargs)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/utils/decorators.py\" in _wrapper\n 45.\t\t return bound_method(*args, **kwargs)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/utils/decorators.py\" in _wrapped_view\n 142.\t\t\t\t\t response = view_func(request, *args, **kwargs)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/contrib/admin/options.py\" in changelist_view\n 1675.\t\t\t cl = self.get_changelist_instance(request)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/contrib/admin/options.py\" in get_changelist_instance\n 742.\t\t\t sortable_by,\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/contrib/admin/views/main.py\" in __init__\n 81.\t\t self.get_results(request)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/contrib/admin/views/main.py\" in get_results\n 209.\t\t result_count = paginator.count\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/utils/functional.py\" in __get__\n 37.\t\t res = instance.__dict__[self.name] = self.func(instance)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/core/paginator.py\" in count\n 87.\t\t\t return self.object_list.count()\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/db/models/query.py\" in count\n 383.\t\t return self.query.get_count(using=self.db)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/db/models/sql/query.py\" in get_count\n 498.\t\t number = obj.get_aggregation(using, ['__count'])['__count']\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/db/models/sql/query.py\" in get_aggregation\n 483.\t\t result = compiler.execute_sql(SINGLE)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/db/models/sql/compiler.py\" in execute_sql\n 1065.\t\t\t cursor.execute(sql, params)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/db/backends/utils.py\" in execute\n 100.\t\t\t return super().execute(sql, params)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/db/backends/utils.py\" in execute\n 68.\t\t return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/db/backends/utils.py\" in _execute_with_wrappers\n 77.\t\t return executor(sql, params, many, context)\nFile \"/root/.pyenv/versions/3.6.7/envs/app/lib/python3.6/site-packages/django/db/backends/utils.py\" in _execute\n 85.\t\t\t\t return self.cursor.execute(sql, params)\nException Type: ValueError at /admin/auth/user/\nException Value: A string literal cannot contain NUL (0x00) characters.\n",
  "hints_text": "This is related to #28201. The exception was ​introduced in psycopg2 2.7+. It's not immediately obvious to me how to handle this and whether the solution should live in the admin or in the postgresql database backend. Without thinking about it too much, I'd lean toward the latter as that would help with other places that user input is passed directly to the ORM.\n​PR\nI think this should be fixed at the admin layer just like #28201 was fixed at the form later; scanning each query string parameters for '\\x00' as suggested in ​this PR will affect performance and is overkill IMO. In my opinion the issue is that the ​admin is relying on unsanitized request.GET passing to the ORM, that looks like the same class of issues as Model.objects.get(int_field='foo'). The admin should use a form to sanitize the input to rely on #28201 cleansing mechanism.\nAgreed.\nI thought that the parameter of a single execution doesn't affect too much. when the validator is called, the same case about performance would happen here as well. Wouldn't it be better if a solution that also solves the raw query parameters? Users wouldn't have to check it out.\nI thought that the parameter of a single execution doesn't affect too much. when the validator is called, the same case about performance would happen here as well. I think it's safe to assume every non-static or cached request handled by Django results in at least one database queries and that it isn't uncommon for queries to have at least one string parameter. Given these assumptions it's unlikely that performing a one time per admin changelist search request validation is ever going to have the same performance implications as performing a search and replace for every '\\x00' string parameters thrown at the ORM. Wouldn't it be better if a solution that also solves the raw query parameters? Users wouldn't have to check it out. I don't think so. User input should be sanitized before feeding it to the ORM.\nok Thanks for the detailed description, I will fix it as per your suggestion.\ndiff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py index 298e18c57e..4724ccfa96 100644 --- a/django/contrib/admin/views/main.py +++ b/django/contrib/admin/views/main.py @@ -1,6 +1,6 @@ from collections import OrderedDict from datetime import datetime, timedelta - +from django import forms from django.conf import settings from django.contrib.admin import FieldListFilter from django.contrib.admin.exceptions import ( @@ -35,6 +35,33 @@ IGNORED_PARAMS = ( ALL_VAR, ORDER_VAR, ORDER_TYPE_VAR, SEARCH_VAR, IS_POPUP_VAR, TO_FIELD_VAR) +class ChangeListForm(forms.Form): + + def __init__(self, *args, **kwargs): + super(ChangeListForm, self).__init__(*args, **kwargs) + for var in {SEARCH_VAR, PAGE_VAR, TO_FIELD_VAR}: + field = forms.CharField() + field.required = False + self.fields[var] = field + + def clean(self): + query = self.data.get(SEARCH_VAR) + if '\\x00' in query: + raise forms.ValidationError('Null characters are not allowed.') + + page_num = self.cleaned_data.get(PAGE_VAR) + if not page_num: + page_num = 0 + self.cleaned_data[PAGE_VAR] = page_num + + to_field = self.cleaned_data.get(TO_FIELD_VAR) + if to_field and not model_admin.to_field_allowed(request, to_field): + raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field) + + return self.cleaned_data + + + class ChangeList: def __init__(self, request, model, list_display, list_display_links, list_filter, date_hierarchy, search_fields, list_select_related, @@ -46,7 +73,6 @@ class ChangeList: self.list_display = list_display self.list_display_links = list_display_links self.list_filter = list_filter - self.has_filters = None self.date_hierarchy = date_hierarchy self.search_fields = search_fields self.list_select_related = list_select_related @@ -57,16 +83,18 @@ class ChangeList: self.sortable_by = sortable_by # Get search parameters from the query string. - try: - self.page_num = int(request.GET.get(PAGE_VAR, 0)) - except ValueError: - self.page_num = 0 + change_list_form = ChangeListForm(request.GET) + if not change_list_form.is_valid(): + raise forms.ValidationError(change_list_form.errors) + + change_list_form_cleaned = change_list_form.clean() + self.page_num = change_list_form_cleaned.get(PAGE_VAR) + self.query = change_list_form_cleaned.get(SEARCH_VAR) + self.to_field = change_list_form_cleaned.get(TO_FIELD_VAR) + self.show_all = ALL_VAR in request.GET self.is_popup = IS_POPUP_VAR in request.GET - to_field = request.GET.get(TO_FIELD_VAR) - if to_field and not model_admin.to_field_allowed(request, to_field): - raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field) - self.to_field = to_field + self.params = dict(request.GET.items()) if PAGE_VAR in self.params: del self.params[PAGE_VAR] @@ -77,7 +105,6 @@ class ChangeList: self.list_editable = () else: self.list_editable = list_editable - self.query = request.GET.get(SEARCH_VAR, '') self.queryset = self.get_queryset(request) self.get_results(request) if self.is_popup: @@ -95,6 +122,7 @@ class ChangeList:\nI thought like this, is it correct route?\nHello Can, it does look more appropriate. The page field should probably be a forms.IntegerField and you shouldn't have to perform any form of manual check for '\\x00' as forms.CharField already has a ProhibitNullCharactersValidator. We'll have to find a way to surface the exception appropriately because raising it at ChangeList initialization will just result in a different crash. Please submit your work as a PR so it's easier to review.\nThanks again ı will apply these within few hours\n​new PR\nAs per comment on PR, testcases are not correct: we can't fix the test by adjusting the expected exception to be the exception raised by the missing MessageMiddleware. (That's an error.)\nUnrelated changes need moving to separate cleanup ticket/PR, but looking good after that.\nSummary of review on PR: There's a small behaviour change that it would be nice to avoid, and a couple of other small points, but it's not far off.",
  "created_at": "2019-08-22T10:15:28Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"test_changelist_search_form_validation (admin_changelist.tests.ChangeListTests)\"]",
  "PASS_TO_PASS": "[\"test_custom_user_pk_not_named_id (admin_changelist.tests.GetAdminLogTests)\", \"test_missing_args (admin_changelist.tests.GetAdminLogTests)\", \"{% get_admin_log %} works without specifying a user.\", \"test_non_integer_limit (admin_changelist.tests.GetAdminLogTests)\", \"test_without_as (admin_changelist.tests.GetAdminLogTests)\", \"test_without_for_user (admin_changelist.tests.GetAdminLogTests)\", \"test_builtin_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"list_editable edits use a filtered queryset to limit memory usage.\", \"test_computed_list_display_localization (admin_changelist.tests.ChangeListTests)\", \"test_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_custom_lookup_with_pk_shortcut (admin_changelist.tests.ChangeListTests)\", \"test_custom_paginator (admin_changelist.tests.ChangeListTests)\", \"test_deterministic_order_for_model_ordered_by_its_manager (admin_changelist.tests.ChangeListTests)\", \"test_deterministic_order_for_unordered_model (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_inherited_m2m_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_m2m_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_m2m_to_inherited_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_many_to_many_at_second_level_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_non_unique_related_object_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_non_unique_related_object_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_through_m2m_at_second_level_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_distinct_for_through_m2m_in_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_list_display (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_list_display_links (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_list_filter (admin_changelist.tests.ChangeListTests)\", \"test_dynamic_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_get_edited_object_ids (admin_changelist.tests.ChangeListTests)\", \"test_get_list_editable_queryset (admin_changelist.tests.ChangeListTests)\", \"test_get_select_related_custom_method (admin_changelist.tests.ChangeListTests)\", \"test_multiuser_edit (admin_changelist.tests.ChangeListTests)\", \"test_no_distinct_for_m2m_in_list_filter_without_params (admin_changelist.tests.ChangeListTests)\", \"#15185 -- Allow no links from the 'change list' view grid.\", \"test_object_tools_displayed_no_add_permission (admin_changelist.tests.ChangeListTests)\", \"test_pagination (admin_changelist.tests.ChangeListTests)\", \"test_pagination_page_range (admin_changelist.tests.ChangeListTests)\", \"test_pk_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_result_list_editable (admin_changelist.tests.ChangeListTests)\", \"test_result_list_editable_html (admin_changelist.tests.ChangeListTests)\", \"test_result_list_empty_changelist_value (admin_changelist.tests.ChangeListTests)\", \"test_result_list_html (admin_changelist.tests.ChangeListTests)\", \"test_result_list_set_empty_value_display_in_model_admin (admin_changelist.tests.ChangeListTests)\", \"test_result_list_set_empty_value_display_on_admin_site (admin_changelist.tests.ChangeListTests)\", \"test_select_related_as_empty_tuple (admin_changelist.tests.ChangeListTests)\", \"test_select_related_as_tuple (admin_changelist.tests.ChangeListTests)\", \"test_select_related_preserved (admin_changelist.tests.ChangeListTests)\", \"test_show_all (admin_changelist.tests.ChangeListTests)\", \"test_spanning_relations_with_custom_lookup_in_search_fields (admin_changelist.tests.ChangeListTests)\", \"test_specified_ordering_by_f_expression (admin_changelist.tests.ChangeListTests)\", \"test_specified_ordering_by_f_expression_without_asc_desc (admin_changelist.tests.ChangeListTests)\", \"test_total_ordering_optimization (admin_changelist.tests.ChangeListTests)\", \"test_tuple_list_display (admin_changelist.tests.ChangeListTests)\"]",
  "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.581170",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}