{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-8715",
  "base_commit": "b2b0717108c8b5381f12bc4ab1c759e3705fb8a8",
  "patch": "diff --git a/astropy/io/votable/__init__.py b/astropy/io/votable/__init__.py\n--- a/astropy/io/votable/__init__.py\n+++ b/astropy/io/votable/__init__.py\n@@ -24,10 +24,13 @@ class Conf(_config.ConfigNamespace):\n     Configuration parameters for `astropy.io.votable`.\n     \"\"\"\n \n-    pedantic = _config.ConfigItem(\n-        False,\n-        'When True, treat fixable violations of the VOTable spec as exceptions.',\n-        aliases=['astropy.io.votable.table.pedantic'])\n+    verify = _config.ConfigItem(\n+        'ignore',\n+        \"Can be 'exception' (treat fixable violations of the VOTable spec as \"\n+        \"exceptions), 'warn' (show warnings for VOTable spec violations), or \"\n+        \"'ignore' (silently ignore VOTable spec violations)\",\n+        aliases=['astropy.io.votable.table.pedantic',\n+                 'astropy.io.votable.pedantic'])\n \n \n conf = Conf()\ndiff --git a/astropy/io/votable/connect.py b/astropy/io/votable/connect.py\n--- a/astropy/io/votable/connect.py\n+++ b/astropy/io/votable/connect.py\n@@ -44,7 +44,7 @@ def is_votable(origin, filepath, fileobj, *args, **kwargs):\n         return False\n \n \n-def read_table_votable(input, table_id=None, use_names_over_ids=False):\n+def read_table_votable(input, table_id=None, use_names_over_ids=False, verify=None):\n     \"\"\"\n     Read a Table object from an VO table file\n \n@@ -68,9 +68,17 @@ def read_table_votable(input, table_id=None, use_names_over_ids=False):\n         are not guaranteed to be unique, this may cause some columns\n         to be renamed by appending numbers to the end.  Otherwise\n         (default), use the ID attributes as the column names.\n+\n+    verify : {'ignore', 'warn', 'exception'}, optional\n+        When ``'exception'``, raise an error when the file violates the spec,\n+        otherwise either issue a warning (``'warn'``) or silently continue\n+        (``'ignore'``). Warnings may be controlled using the standard Python\n+        mechanisms.  See the `warnings` module in the Python standard library\n+        for more information. When not provided, uses the configuration setting\n+        ``astropy.io.votable.verify``, which defaults to ``'ignore'``.\n     \"\"\"\n     if not isinstance(input, (VOTableFile, VOTable)):\n-        input = parse(input, table_id=table_id)\n+        input = parse(input, table_id=table_id, verify=verify)\n \n     # Parse all table objects\n     table_id_mapping = dict()\ndiff --git a/astropy/io/votable/converters.py b/astropy/io/votable/converters.py\n--- a/astropy/io/votable/converters.py\n+++ b/astropy/io/votable/converters.py\n@@ -319,7 +319,7 @@ def __init__(self, field, config=None, pos=None):\n             self.binoutput = self._binoutput_fixed\n             self._struct_format = \">{:d}s\".format(self.arraysize)\n \n-        if config.get('pedantic'):\n+        if config.get('verify', 'ignore') == 'exception':\n             self.parse = self._ascii_parse\n         else:\n             self.parse = self._str_parse\n@@ -439,7 +439,7 @@ def __init__(self, field, config=None, pos=None):\n         if config is None:\n             config = {}\n         Converter.__init__(self, field, config, pos)\n-        if config.get('pedantic'):\n+        if config.get('verify', 'ignore') == 'exception':\n             self._splitter = self._splitter_pedantic\n         else:\n             self._splitter = self._splitter_lax\n@@ -578,7 +578,7 @@ def parse(self, value, config=None, pos=None):\n         parts = self._splitter(value, config, pos)\n         if len(parts) != self._items:\n             warn_or_raise(E02, E02, (self._items, len(parts)), config, pos)\n-        if config.get('pedantic'):\n+        if config.get('verify', 'ignore') == 'exception':\n             return self.parse_parts(parts, config, pos)\n         else:\n             if len(parts) == self._items:\n@@ -698,7 +698,7 @@ def __init__(self, field, config=None, pos=None):\n             self._null_binoutput = self.binoutput(np.asarray(self.null), False)\n             self.filter_array = self._filter_null\n \n-        if config.get('pedantic'):\n+        if config.get('verify', 'ignore') == 'exception':\n             self.parse = self._parse_pedantic\n         else:\n             self.parse = self._parse_permissive\ndiff --git a/astropy/io/votable/exceptions.py b/astropy/io/votable/exceptions.py\n--- a/astropy/io/votable/exceptions.py\n+++ b/astropy/io/votable/exceptions.py\n@@ -24,9 +24,9 @@\n \n .. note::\n \n-    This is a list of many of the fatal exceptions emitted by vo.table\n+    This is a list of many of the fatal exceptions emitted by ``astropy.io.votable``\n     when the file does not conform to spec.  Other exceptions may be\n-    raised due to unforeseen cases or bugs in vo.table itself.\n+    raised due to unforeseen cases or bugs in ``astropy.io.votable`` itself.\n \n {exceptions}\n \"\"\"\n@@ -77,15 +77,19 @@ def _suppressed_warning(warning, config, stacklevel=2):\n def warn_or_raise(warning_class, exception_class=None, args=(), config=None,\n                   pos=None, stacklevel=1):\n     \"\"\"\n-    Warn or raise an exception, depending on the pedantic setting.\n+    Warn or raise an exception, depending on the verify setting.\n     \"\"\"\n     if config is None:\n         config = {}\n-    if config.get('pedantic'):\n+    # NOTE: the default here is deliberately warn rather than ignore, since\n+    # one would expect that calling warn_or_raise without config should not\n+    # silence the warnings.\n+    config_value = config.get('verify', 'warn')\n+    if config_value == 'exception':\n         if exception_class is None:\n             exception_class = warning_class\n         vo_raise(exception_class, args, config, pos)\n-    else:\n+    elif config_value == 'warn':\n         vo_warn(warning_class, args, config, pos, stacklevel=stacklevel+1)\n \n \n@@ -122,8 +126,12 @@ def vo_warn(warning_class, args=(), config=None, pos=None, stacklevel=1):\n     \"\"\"\n     if config is None:\n         config = {}\n-    warning = warning_class(args, config, pos)\n-    _suppressed_warning(warning, config, stacklevel=stacklevel+1)\n+    # NOTE: the default here is deliberately warn rather than ignore, since\n+    # one would expect that calling warn_or_raise without config should not\n+    # silence the warnings.\n+    if config.get('verify', 'warn') != 'ignore':\n+        warning = warning_class(args, config, pos)\n+        _suppressed_warning(warning, config, stacklevel=stacklevel+1)\n \n \n def warn_unknown_attrs(element, attrs, config, pos, good_attr=[], stacklevel=1):\n@@ -249,10 +257,10 @@ class W01(VOTableSpecWarning):\n         encoded as multiple numbers separated by whitespace.\n \n     Many VOTable files in the wild use commas as a separator instead,\n-    and ``vo.table`` supports this convention when not in\n+    and ``astropy.io.votable`` supports this convention when not in\n     :ref:`pedantic-mode`.\n \n-    ``vo.table`` always outputs files using only spaces, regardless of\n+    ``astropy.io.votable`` always outputs files using only spaces, regardless of\n     how they were input.\n \n     **References**: `1.1\n@@ -280,7 +288,7 @@ class W02(VOTableSpecWarning):\n \n     However, this is in conflict with the XML standard, which says\n     colons may not be used.  VOTable 1.1's own schema does not allow a\n-    colon here.  Therefore, ``vo.table`` disallows the colon.\n+    colon here.  Therefore, ``astropy.io.votable`` disallows the colon.\n \n     VOTable 1.2 corrects this error in the specification.\n \n@@ -323,7 +331,7 @@ class W03(VOTableChangeWarning):\n         ``name`` attributes of ``FIELD``, ``PARAM`` and optional\n         ``GROUP`` elements should be all different.\n \n-    Since ``vo.table`` requires a unique identifier for each of its\n+    Since ``astropy.io.votable`` requires a unique identifier for each of its\n     columns, ``ID`` is used for the column name when present.\n     However, when ``ID`` is not present, (since it is not required by\n     the specification) ``name`` is used instead.  However, ``name``\n@@ -415,7 +423,7 @@ class W07(VOTableSpecWarning):\n \n class W08(VOTableSpecWarning):\n     \"\"\"\n-    To avoid local-dependent number parsing differences, ``vo.table``\n+    To avoid local-dependent number parsing differences, ``astropy.io.votable``\n     may require a string or unicode string where a numeric type may\n     make more sense.\n     \"\"\"\n@@ -430,8 +438,8 @@ class W09(VOTableSpecWarning):\n     The VOTable specification uses the attribute name ``ID`` (with\n     uppercase letters) to specify unique identifiers.  Some\n     VOTable-producing tools use the more standard lowercase ``id``\n-    instead.  ``vo.table`` accepts ``id`` and emits this warning when\n-    not in ``pedantic`` mode.\n+    instead. ``astropy.io.votable`` accepts ``id`` and emits this warning if\n+    ``verify`` is ``'warn'``.\n \n     **References**: `1.1\n     <http://www.ivoa.net/Documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:name>`__,\n@@ -449,7 +457,7 @@ class W10(VOTableSpecWarning):\n     against the VOTable schema (with a tool such as `xmllint\n     <http://xmlsoft.org/xmllint.html>`__.  If the file validates\n     against the schema, and you still receive this warning, this may\n-    indicate a bug in ``vo.table``.\n+    indicate a bug in ``astropy.io.votable``.\n \n     **References**: `1.1\n     <http://www.ivoa.net/Documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#ToC54>`__,\n@@ -468,7 +476,7 @@ class W11(VOTableSpecWarning):\n     <http://aladin.u-strasbg.fr/glu/>`__.  New files should\n     specify a ``glu:`` protocol using the ``href`` attribute.\n \n-    Since ``vo.table`` does not currently support GLU references, it\n+    Since ``astropy.io.votable`` does not currently support GLU references, it\n     likewise does not automatically convert the ``gref`` attribute to\n     the new form.\n \n@@ -487,8 +495,8 @@ class W12(VOTableChangeWarning):\n     ``FIELD`` element must have either an ``ID`` or ``name`` attribute\n     to derive a name from.  Strictly speaking, according to the\n     VOTable schema, the ``name`` attribute is required.  However, if\n-    ``name`` is not present by ``ID`` is, and *pedantic mode* is off,\n-    ``vo.table`` will continue without a ``name`` defined.\n+    ``name`` is not present by ``ID`` is, and ``verify`` is not ``'exception'``,\n+    ``astropy.io.votable`` will continue without a ``name`` defined.\n \n     **References**: `1.1\n     <http://www.ivoa.net/Documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:name>`__,\n@@ -536,8 +544,8 @@ class W15(VOTableSpecWarning):\n     \"\"\"\n     The ``name`` attribute is required on every ``FIELD`` element.\n     However, many VOTable files in the wild omit it and provide only\n-    an ``ID`` instead.  In this case, when *pedantic mode* is off,\n-    ``vo.table`` will copy the ``name`` attribute to a new ``ID``\n+    an ``ID`` instead.  In this case, when ``verify`` is not ``'exception'``\n+    ``astropy.io.votable`` will copy the ``name`` attribute to a new ``ID``\n     attribute.\n \n     **References**: `1.1\n@@ -576,8 +584,8 @@ class W18(VOTableSpecWarning):\n     The number of rows explicitly specified in the ``nrows`` attribute\n     does not match the actual number of rows (``TR`` elements) present\n     in the ``TABLE``.  This may indicate truncation of the file, or an\n-    internal error in the tool that produced it.  If *pedantic mode*\n-    is off, parsing will proceed, with the loss of some performance.\n+    internal error in the tool that produced it.  If ``verify`` is not\n+    ``'exception'``, parsing will proceed, with the loss of some performance.\n \n     **References:** `1.1\n     <http://www.ivoa.net/Documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#ToC10>`__,\n@@ -592,8 +600,8 @@ class W18(VOTableSpecWarning):\n class W19(VOTableSpecWarning):\n     \"\"\"\n     The column fields as defined using ``FIELD`` elements do not match\n-    those in the headers of the embedded FITS file.  If *pedantic\n-    mode* is off, the embedded FITS file will take precedence.\n+    those in the headers of the embedded FITS file.  If ``verify`` is not\n+    ``'exception'``, the embedded FITS file will take precedence.\n     \"\"\"\n \n     message_template = (\n@@ -613,12 +621,12 @@ class W20(VOTableSpecWarning):\n \n class W21(UnimplementedWarning):\n     \"\"\"\n-    Unknown issues may arise using ``vo.table`` with VOTable files\n+    Unknown issues may arise using ``astropy.io.votable`` with VOTable files\n     from a version other than 1.1, 1.2 or 1.3.\n     \"\"\"\n \n     message_template = (\n-        'vo.table is designed for VOTable version 1.1, 1.2 and 1.3, but ' +\n+        'astropy.io.votable is designed for VOTable version 1.1, 1.2 and 1.3, but ' +\n         'this file is {}')\n     default_args = ('x',)\n \n@@ -653,12 +661,12 @@ class W23(IOWarning):\n class W24(VOWarning, FutureWarning):\n     \"\"\"\n     The VO catalog database retrieved from the www is designed for a\n-    newer version of vo.table.  This may cause problems or limited\n-    features performing service queries.  Consider upgrading vo.table\n+    newer version of ``astropy.io.votable``.  This may cause problems or limited\n+    features performing service queries.  Consider upgrading ``astropy.io.votable``\n     to the latest version.\n     \"\"\"\n \n-    message_template = \"The VO catalog database is for a later version of vo.table\"\n+    message_template = \"The VO catalog database is for a later version of astropy.io.votable\"\n \n \n class W25(IOWarning):\n@@ -726,9 +734,9 @@ class W29(VOTableSpecWarning):\n \n class W30(VOTableSpecWarning):\n     \"\"\"\n-    Some VOTable files write missing floating-point values in non-standard\n-    ways, such as \"null\" and \"-\".  In non-pedantic mode, any non-standard\n-    floating-point literals are treated as missing values.\n+    Some VOTable files write missing floating-point values in non-standard ways,\n+    such as \"null\" and \"-\".  If ``verify`` is not ``'exception'``, any\n+    non-standard floating-point literals are treated as missing values.\n \n     **References**: `1.1\n     <http://www.ivoa.net/Documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:datatypes>`__,\n@@ -840,7 +848,7 @@ class W36(VOTableSpecWarning):\n class W37(UnimplementedWarning):\n     \"\"\"\n     The 3 datatypes defined in the VOTable specification and supported by\n-    vo.table are ``TABLEDATA``, ``BINARY`` and ``FITS``.\n+    ``astropy.io.votable`` are ``TABLEDATA``, ``BINARY`` and ``FITS``.\n \n     **References:** `1.1\n     <http://www.ivoa.net/Documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:data>`__,\ndiff --git a/astropy/io/votable/table.py b/astropy/io/votable/table.py\n--- a/astropy/io/votable/table.py\n+++ b/astropy/io/votable/table.py\n@@ -17,13 +17,17 @@\n from . import tree\n from astropy.utils.xml import iterparser\n from astropy.utils import data\n-\n+from astropy.utils.decorators import deprecated_renamed_argument\n+from astropy.utils.exceptions import AstropyDeprecationWarning\n \n __all__ = ['parse', 'parse_single_table', 'from_table', 'writeto', 'validate',\n            'reset_vo_warnings']\n \n+VERIFY_OPTIONS = ['ignore', 'warn', 'exception']\n+\n \n-def parse(source, columns=None, invalid='exception', pedantic=None,\n+@deprecated_renamed_argument('pedantic', 'verify', pending=True, since='4.0')\n+def parse(source, columns=None, invalid='exception', verify=None,\n           chunk_size=tree.DEFAULT_CHUNK_SIZE, table_number=None,\n           table_id=None, filename=None, unit_format=None,\n           datatype_mapping=None, _debug_python_based_parser=False):\n@@ -48,13 +52,17 @@ def parse(source, columns=None, invalid='exception', pedantic=None,\n \n             - 'mask': mask out invalid values\n \n-    pedantic : bool, optional\n-        When `True`, raise an error when the file violates the spec,\n-        otherwise issue a warning.  Warnings may be controlled using\n-        the standard Python mechanisms.  See the `warnings`\n-        module in the Python standard library for more information.\n-        When not provided, uses the configuration setting\n-        ``astropy.io.votable.pedantic``, which defaults to False.\n+    verify : {'ignore', 'warn', 'exception'}, optional\n+        When ``'exception'``, raise an error when the file violates the spec,\n+        otherwise either issue a warning (``'warn'``) or silently continue\n+        (``'ignore'``). Warnings may be controlled using the standard Python\n+        mechanisms.  See the `warnings` module in the Python standard library\n+        for more information. When not provided, uses the configuration setting\n+        ``astropy.io.votable.verify``, which defaults to 'ignore'.\n+\n+        .. versionchanged:: 4.0\n+           ``verify`` replaces the ``pedantic`` argument, which will be\n+           deprecated in future.\n \n     chunk_size : int, optional\n         The number of rows to read before converting to an array.\n@@ -110,8 +118,30 @@ def parse(source, columns=None, invalid='exception', pedantic=None,\n         raise ValueError(\"accepted values of ``invalid`` are: \"\n                          \"``'exception'`` or ``'mask'``.\")\n \n-    if pedantic is None:\n-        pedantic = conf.pedantic\n+    if verify is None:\n+\n+        # NOTE: since the pedantic argument isn't fully deprecated yet, we need\n+        # to catch the deprecation warning that occurs when accessing the\n+        # configuration item, but only if it is for the pedantic option in the\n+        # [io.votable] section.\n+        with warnings.catch_warnings():\n+            warnings.filterwarnings(\"ignore\",\n+                                    r\"Config parameter \\'pedantic\\' in section \\[io.votable\\]\",\n+                                    AstropyDeprecationWarning)\n+            conf_verify_lowercase = conf.verify.lower()\n+\n+        # We need to allow verify to be booleans as strings since the\n+        # configuration framework doesn't make it easy/possible to have mixed\n+        # types.\n+        if conf_verify_lowercase in ['false', 'true']:\n+            verify = conf_verify_lowercase == 'true'\n+        else:\n+            verify = conf_verify_lowercase\n+\n+    if isinstance(verify, bool):\n+        verify = 'exception' if verify else 'warn'\n+    elif verify not in VERIFY_OPTIONS:\n+        raise ValueError('verify should be one of {0}'.format('/'.join(VERIFY_OPTIONS)))\n \n     if datatype_mapping is None:\n         datatype_mapping = {}\n@@ -119,7 +149,7 @@ def parse(source, columns=None, invalid='exception', pedantic=None,\n     config = {\n         'columns': columns,\n         'invalid': invalid,\n-        'pedantic': pedantic,\n+        'verify': verify,\n         'chunk_size': chunk_size,\n         'table_number': table_number,\n         'filename': filename,\n@@ -250,7 +280,7 @@ def validate(source, output=None, xmllint=False, filename=None):\n         warnings.resetwarnings()\n         warnings.simplefilter(\"always\", exceptions.VOWarning, append=True)\n         try:\n-            votable = parse(content_buffer, pedantic=False, filename=filename)\n+            votable = parse(content_buffer, verify='warn', filename=filename)\n         except ValueError as e:\n             lines.append(str(e))\n \ndiff --git a/astropy/io/votable/tree.py b/astropy/io/votable/tree.py\n--- a/astropy/io/votable/tree.py\n+++ b/astropy/io/votable/tree.py\n@@ -268,11 +268,13 @@ def check_ucd(ucd, config=None, pos=None):\n                 has_colon=config.get('version_1_2_or_later', False))\n         except ValueError as e:\n             # This weird construction is for Python 3 compatibility\n-            if config.get('pedantic'):\n+            if config.get('verify', 'ignore') == 'exception':\n                 vo_raise(W06, (ucd, str(e)), config, pos)\n-            else:\n+            elif config.get('verify', 'ignore') == 'warn':\n                 vo_warn(W06, (ucd, str(e)), config, pos)\n                 return False\n+            else:\n+                return False\n     return True\n \n \n@@ -1170,7 +1172,7 @@ def __init__(self, votable, ID=None, name=None, datatype=None,\n         # actually contains character data.  We have to hack the field\n         # to store character data, or we can't read it in.  A warning\n         # will be raised when this happens.\n-        if (not config.get('pedantic') and name == 'cprojection' and\n+        if (config.get('verify', 'ignore') != 'exception' and name == 'cprojection' and\n             ID == 'cprojection' and ucd == 'VOX:WCS_CoordProjection' and\n             datatype == 'double'):\n             datatype = 'char'\ndiff --git a/astropy/io/votable/validator/result.py b/astropy/io/votable/validator/result.py\n--- a/astropy/io/votable/validator/result.py\n+++ b/astropy/io/votable/validator/result.py\n@@ -163,7 +163,7 @@ def validate_vo(self):\n         with open(path, 'rb') as input:\n             with warnings.catch_warnings(record=True) as warning_lines:\n                 try:\n-                    t = table.parse(input, pedantic=False, filename=path)\n+                    t = table.parse(input, verify='warn', filename=path)\n                 except (ValueError, TypeError, ExpatError) as e:\n                     lines.append(str(e))\n                     nexceptions += 1\n",
  "test_patch": "diff --git a/astropy/io/votable/tests/converter_test.py b/astropy/io/votable/tests/converter_test.py\n--- a/astropy/io/votable/tests/converter_test.py\n+++ b/astropy/io/votable/tests/converter_test.py\n@@ -26,7 +26,7 @@ def test_invalid_arraysize():\n \n \n def test_oversize_char():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     with catch_warnings(exceptions.W47) as w:\n         field = tree.Field(\n             None, name='c', datatype='char',\n@@ -40,7 +40,7 @@ def test_oversize_char():\n \n \n def test_char_mask():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='char',\n         config=config)\n@@ -49,7 +49,7 @@ def test_char_mask():\n \n \n def test_oversize_unicode():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     with catch_warnings(exceptions.W46) as w:\n         field = tree.Field(\n             None, name='c2', datatype='unicodeChar',\n@@ -61,7 +61,7 @@ def test_oversize_unicode():\n \n \n def test_unicode_mask():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='unicodeChar',\n         config=config)\n@@ -71,7 +71,7 @@ def test_unicode_mask():\n \n @raises(exceptions.E02)\n def test_wrong_number_of_elements():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='int', arraysize='2x3*',\n         config=config)\n@@ -81,7 +81,7 @@ def test_wrong_number_of_elements():\n \n @raises(ValueError)\n def test_float_mask():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='float',\n         config=config)\n@@ -91,7 +91,7 @@ def test_float_mask():\n \n \n def test_float_mask_permissive():\n-    config = {'pedantic': False}\n+    config = {'verify': 'ignore'}\n     field = tree.Field(\n         None, name='c', datatype='float',\n         config=config)\n@@ -101,7 +101,7 @@ def test_float_mask_permissive():\n \n @raises(exceptions.E02)\n def test_complex_array_vararray():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='floatComplex', arraysize='2x3*',\n         config=config)\n@@ -110,7 +110,7 @@ def test_complex_array_vararray():\n \n \n def test_complex_array_vararray2():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='floatComplex', arraysize='2x3*',\n         config=config)\n@@ -120,7 +120,7 @@ def test_complex_array_vararray2():\n \n \n def test_complex_array_vararray3():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='doubleComplex', arraysize='2x3*',\n         config=config)\n@@ -131,7 +131,7 @@ def test_complex_array_vararray3():\n \n \n def test_complex_vararray():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='doubleComplex', arraysize='*',\n         config=config)\n@@ -143,7 +143,7 @@ def test_complex_vararray():\n \n @raises(exceptions.E03)\n def test_complex():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='doubleComplex',\n         config=config)\n@@ -153,7 +153,7 @@ def test_complex():\n \n @raises(exceptions.E04)\n def test_bit():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='bit',\n         config=config)\n@@ -162,7 +162,7 @@ def test_bit():\n \n \n def test_bit_mask():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     with catch_warnings(exceptions.W39) as w:\n         field = tree.Field(\n             None, name='c', datatype='bit',\n@@ -174,7 +174,7 @@ def test_bit_mask():\n \n @raises(exceptions.E05)\n def test_boolean():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='boolean',\n         config=config)\n@@ -183,7 +183,7 @@ def test_boolean():\n \n \n def test_boolean_array():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='boolean', arraysize='*',\n         config=config)\n@@ -194,7 +194,7 @@ def test_boolean_array():\n \n @raises(exceptions.E06)\n def test_invalid_type():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(\n         None, name='c', datatype='foobar',\n         config=config)\n@@ -202,7 +202,7 @@ def test_invalid_type():\n \n \n def test_precision():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n \n     field = tree.Field(\n         None, name='c', datatype='float', precision=\"E4\",\n@@ -219,7 +219,7 @@ def test_precision():\n \n @raises(exceptions.W51)\n def test_integer_overflow():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n \n     field = tree.Field(\n         None, name='c', datatype='int', config=config)\n@@ -228,7 +228,7 @@ def test_integer_overflow():\n \n \n def test_float_default_precision():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n \n     field = tree.Field(\n         None, name='c', datatype='float', arraysize=\"4\",\ndiff --git a/astropy/io/votable/tests/exception_test.py b/astropy/io/votable/tests/exception_test.py\n--- a/astropy/io/votable/tests/exception_test.py\n+++ b/astropy/io/votable/tests/exception_test.py\n@@ -24,7 +24,7 @@ def fail():\n \n \n def test_parse_vowarning():\n-    config = {'pedantic': True,\n+    config = {'verify': 'exception',\n               'filename': 'foo.xml'}\n     pos = (42, 64)\n     with catch_warnings(exceptions.W47) as w:\ndiff --git a/astropy/io/votable/tests/table_test.py b/astropy/io/votable/tests/table_test.py\n--- a/astropy/io/votable/tests/table_test.py\n+++ b/astropy/io/votable/tests/table_test.py\n@@ -6,18 +6,21 @@\n import os\n \n import pathlib\n+import pytest\n import numpy as np\n \n+from astropy.config import set_temp_config, reload_config\n from astropy.utils.data import get_pkg_data_filename, get_pkg_data_fileobj\n from astropy.io.votable.table import parse, writeto\n-from astropy.io.votable import tree\n+from astropy.io.votable import tree, conf\n+from astropy.io.votable.exceptions import VOWarning\n+from astropy.tests.helper import catch_warnings\n+from astropy.utils.exceptions import AstropyDeprecationWarning\n \n \n def test_table(tmpdir):\n     # Read the VOTABLE\n-    votable = parse(\n-        get_pkg_data_filename('data/regression.xml'),\n-        pedantic=False)\n+    votable = parse(get_pkg_data_filename('data/regression.xml'))\n     table = votable.get_first_table()\n     astropy_table = table.to_table()\n \n@@ -173,8 +176,93 @@ def test_write_with_format():\n \n \n def test_empty_table():\n-    votable = parse(\n-        get_pkg_data_filename('data/empty_table.xml'),\n-        pedantic=False)\n+    votable = parse(get_pkg_data_filename('data/empty_table.xml'))\n     table = votable.get_first_table()\n     astropy_table = table.to_table()  # noqa\n+\n+\n+class TestVerifyOptions:\n+\n+    # Start off by checking the default (ignore)\n+\n+    def test_default(self):\n+        with catch_warnings(VOWarning) as w:\n+            parse(get_pkg_data_filename('data/gemini.xml'))\n+        assert len(w) == 0\n+\n+    # Then try the various explicit options\n+\n+    def test_verify_ignore(self):\n+        with catch_warnings(VOWarning) as w:\n+            parse(get_pkg_data_filename('data/gemini.xml'), verify='ignore')\n+        assert len(w) == 0\n+\n+    def test_verify_warn(self):\n+        with catch_warnings(VOWarning) as w:\n+            parse(get_pkg_data_filename('data/gemini.xml'), verify='warn')\n+        assert len(w) == 25\n+\n+    def test_verify_exception(self):\n+        with pytest.raises(VOWarning):\n+            parse(get_pkg_data_filename('data/gemini.xml'), verify='exception')\n+\n+    # Make sure the pedantic option still works for now (pending deprecation)\n+\n+    def test_pedantic_false(self):\n+        with catch_warnings(VOWarning, AstropyDeprecationWarning) as w:\n+            parse(get_pkg_data_filename('data/gemini.xml'), pedantic=False)\n+        assert len(w) == 25\n+        # Make sure we don't yet emit a deprecation warning\n+        assert not any(isinstance(x.category, AstropyDeprecationWarning) for x in w)\n+\n+    def test_pedantic_true(self):\n+        with pytest.raises(VOWarning):\n+            parse(get_pkg_data_filename('data/gemini.xml'), pedantic=True)\n+\n+    # Make sure that the default behavior can be set via configuration items\n+\n+    def test_conf_verify_ignore(self):\n+        with conf.set_temp('verify', 'ignore'):\n+            with catch_warnings(VOWarning) as w:\n+                parse(get_pkg_data_filename('data/gemini.xml'))\n+            assert len(w) == 0\n+\n+    def test_conf_verify_warn(self):\n+        with conf.set_temp('verify', 'warn'):\n+            with catch_warnings(VOWarning) as w:\n+                parse(get_pkg_data_filename('data/gemini.xml'))\n+            assert len(w) == 25\n+\n+    def test_conf_verify_exception(self):\n+        with conf.set_temp('verify', 'exception'):\n+            with pytest.raises(VOWarning):\n+                parse(get_pkg_data_filename('data/gemini.xml'))\n+\n+    # And make sure the old configuration item will keep working\n+\n+    def test_conf_pedantic_false(self, tmpdir):\n+\n+        with set_temp_config(tmpdir.strpath):\n+\n+            with open(tmpdir.join('astropy').join('astropy.cfg').strpath, 'w') as f:\n+                f.write('[io.votable]\\npedantic = False')\n+\n+            reload_config('astropy.io.votable')\n+\n+            with catch_warnings(VOWarning, AstropyDeprecationWarning) as w:\n+                parse(get_pkg_data_filename('data/gemini.xml'))\n+            assert len(w) == 25\n+            # Make sure we don't yet emit a deprecation warning\n+            assert not any(isinstance(x.category, AstropyDeprecationWarning) for x in w)\n+\n+    def test_conf_pedantic_true(self, tmpdir):\n+\n+        with set_temp_config(tmpdir.strpath):\n+\n+            with open(tmpdir.join('astropy').join('astropy.cfg').strpath, 'w') as f:\n+                f.write('[io.votable]\\npedantic = True')\n+\n+            reload_config('astropy.io.votable')\n+\n+            with pytest.raises(VOWarning):\n+                parse(get_pkg_data_filename('data/gemini.xml'))\ndiff --git a/astropy/io/votable/tests/tree_test.py b/astropy/io/votable/tests/tree_test.py\n--- a/astropy/io/votable/tests/tree_test.py\n+++ b/astropy/io/votable/tests/tree_test.py\n@@ -7,14 +7,14 @@\n \n @raises(exceptions.W07)\n def test_check_astroyear_fail():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     field = tree.Field(None, name='astroyear')\n     tree.check_astroyear('X2100', field, config)\n \n \n @raises(exceptions.W08)\n def test_string_fail():\n-    config = {'pedantic': True}\n+    config = {'verify': 'exception'}\n     tree.check_string(42, 'foo', config)\n \n \ndiff --git a/astropy/io/votable/tests/vo_test.py b/astropy/io/votable/tests/vo_test.py\n--- a/astropy/io/votable/tests/vo_test.py\n+++ b/astropy/io/votable/tests/vo_test.py\n@@ -48,18 +48,14 @@ def assert_validate_schema(filename, version):\n \n \n def test_parse_single_table():\n-    table = parse_single_table(\n-        get_pkg_data_filename('data/regression.xml'),\n-        pedantic=False)\n+    table = parse_single_table(get_pkg_data_filename('data/regression.xml'))\n     assert isinstance(table, tree.Table)\n     assert len(table.array) == 5\n \n \n def test_parse_single_table2():\n-    table2 = parse_single_table(\n-        get_pkg_data_filename('data/regression.xml'),\n-        table_number=1,\n-        pedantic=False)\n+    table2 = parse_single_table(get_pkg_data_filename('data/regression.xml'),\n+                                table_number=1)\n     assert isinstance(table2, tree.Table)\n     assert len(table2.array) == 1\n     assert len(table2.array.dtype.names) == 28\n@@ -67,17 +63,14 @@ def test_parse_single_table2():\n \n @raises(IndexError)\n def test_parse_single_table3():\n-    parse_single_table(\n-        get_pkg_data_filename('data/regression.xml'),\n-        table_number=3, pedantic=False)\n+    parse_single_table(get_pkg_data_filename('data/regression.xml'),\n+                       table_number=3)\n \n \n def _test_regression(tmpdir, _python_based=False, binary_mode=1):\n     # Read the VOTABLE\n-    votable = parse(\n-        get_pkg_data_filename('data/regression.xml'),\n-        pedantic=False,\n-        _debug_python_based_parser=_python_based)\n+    votable = parse(get_pkg_data_filename('data/regression.xml'),\n+                    _debug_python_based_parser=_python_based)\n     table = votable.get_first_table()\n \n     dtypes = [\n@@ -139,8 +132,7 @@ def _test_regression(tmpdir, _python_based=False, binary_mode=1):\n                            votable.version)\n     # Also try passing a file handle\n     with open(str(tmpdir.join(\"regression.binary.xml\")), \"rb\") as fd:\n-        votable2 = parse(fd, pedantic=False,\n-                         _debug_python_based_parser=_python_based)\n+        votable2 = parse(fd, _debug_python_based_parser=_python_based)\n     votable2.get_first_table().format = 'tabledata'\n     votable2.to_xml(str(tmpdir.join(\"regression.bin.tabledata.xml\")),\n                     _astropy_version=\"testing\",\n@@ -196,9 +188,7 @@ def test_regression_binary2(tmpdir):\n \n class TestFixups:\n     def setup_class(self):\n-        self.table = parse(\n-            get_pkg_data_filename('data/regression.xml'),\n-            pedantic=False).get_first_table()\n+        self.table = parse(get_pkg_data_filename('data/regression.xml')).get_first_table()\n         self.array = self.table.array\n         self.mask = self.table.array.mask\n \n@@ -209,9 +199,7 @@ def test_implicit_id(self):\n \n class TestReferences:\n     def setup_class(self):\n-        self.votable = parse(\n-            get_pkg_data_filename('data/regression.xml'),\n-            pedantic=False)\n+        self.votable = parse(get_pkg_data_filename('data/regression.xml'))\n         self.table = self.votable.get_first_table()\n         self.array = self.table.array\n         self.mask = self.table.array.mask\n@@ -251,8 +239,7 @@ def test_iter_coosys(self):\n def test_select_columns_by_index():\n     columns = [0, 5, 13]\n     table = parse(\n-        get_pkg_data_filename('data/regression.xml'),\n-        pedantic=False, columns=columns).get_first_table()\n+        get_pkg_data_filename('data/regression.xml'), columns=columns).get_first_table()\n     array = table.array\n     mask = table.array.mask\n     assert array['string_test'][0] == b\"String & test\"\n@@ -265,8 +252,7 @@ def test_select_columns_by_index():\n def test_select_columns_by_name():\n     columns = ['string_test', 'unsignedByte', 'bitarray']\n     table = parse(\n-        get_pkg_data_filename('data/regression.xml'),\n-        pedantic=False, columns=columns).get_first_table()\n+        get_pkg_data_filename('data/regression.xml'), columns=columns).get_first_table()\n     array = table.array\n     mask = table.array.mask\n     assert array['string_test'][0] == b\"String & test\"\n@@ -277,9 +263,7 @@ def test_select_columns_by_name():\n \n class TestParse:\n     def setup_class(self):\n-        self.votable = parse(\n-            get_pkg_data_filename('data/regression.xml'),\n-            pedantic=False)\n+        self.votable = parse(get_pkg_data_filename('data/regression.xml'))\n         self.table = self.votable.get_first_table()\n         self.array = self.table.array\n         self.mask = self.table.array.mask\n@@ -609,14 +593,12 @@ def test_repr(self):\n \n class TestThroughTableData(TestParse):\n     def setup_class(self):\n-        votable = parse(\n-            get_pkg_data_filename('data/regression.xml'),\n-            pedantic=False)\n+        votable = parse(get_pkg_data_filename('data/regression.xml'))\n \n         self.xmlout = bio = io.BytesIO()\n         votable.to_xml(bio)\n         bio.seek(0)\n-        self.votable = parse(bio, pedantic=False)\n+        self.votable = parse(bio)\n         self.table = self.votable.get_first_table()\n         self.array = self.table.array\n         self.mask = self.table.array.mask\n@@ -642,15 +624,13 @@ def test_schema(self, tmpdir):\n \n class TestThroughBinary(TestParse):\n     def setup_class(self):\n-        votable = parse(\n-            get_pkg_data_filename('data/regression.xml'),\n-            pedantic=False)\n+        votable = parse(get_pkg_data_filename('data/regression.xml'))\n         votable.get_first_table().format = 'binary'\n \n         self.xmlout = bio = io.BytesIO()\n         votable.to_xml(bio)\n         bio.seek(0)\n-        self.votable = parse(bio, pedantic=False)\n+        self.votable = parse(bio)\n \n         self.table = self.votable.get_first_table()\n         self.array = self.table.array\n@@ -671,9 +651,7 @@ def test_bit_array2_mask(self):\n \n class TestThroughBinary2(TestParse):\n     def setup_class(self):\n-        votable = parse(\n-            get_pkg_data_filename('data/regression.xml'),\n-            pedantic=False)\n+        votable = parse(get_pkg_data_filename('data/regression.xml'))\n         votable.version = '1.3'\n         votable.get_first_table()._config['version_1_3_or_later'] = True\n         votable.get_first_table().format = 'binary2'\n@@ -681,7 +659,7 @@ def setup_class(self):\n         self.xmlout = bio = io.BytesIO()\n         votable.to_xml(bio)\n         bio.seek(0)\n-        self.votable = parse(bio, pedantic=False)\n+        self.votable = parse(bio)\n \n         self.table = self.votable.get_first_table()\n         self.array = self.table.array\n@@ -729,14 +707,12 @@ def test_open_files():\n     for filename in get_pkg_data_filenames('data', pattern='*.xml'):\n         if filename.endswith('custom_datatype.xml'):\n             continue\n-        parse(filename, pedantic=False)\n+        parse(filename)\n \n \n @raises(VOTableSpecError)\n def test_too_many_columns():\n-    parse(\n-        get_pkg_data_filename('data/too_many_columns.xml.gz'),\n-        pedantic=False)\n+    parse(get_pkg_data_filename('data/too_many_columns.xml.gz'))\n \n \n def test_build_from_scratch(tmpdir):\n@@ -837,9 +813,7 @@ def test_validate_path_object():\n \n \n def test_gzip_filehandles(tmpdir):\n-    votable = parse(\n-        get_pkg_data_filename('data/regression.xml'),\n-        pedantic=False)\n+    votable = parse(get_pkg_data_filename('data/regression.xml'))\n \n     with open(str(tmpdir.join(\"regression.compressed.xml\")), 'wb') as fd:\n         votable.to_xml(\n@@ -848,9 +822,7 @@ def test_gzip_filehandles(tmpdir):\n             _astropy_version=\"testing\")\n \n     with open(str(tmpdir.join(\"regression.compressed.xml\")), 'rb') as fd:\n-        votable = parse(\n-            fd,\n-            pedantic=False)\n+        votable = parse(fd)\n \n \n def test_from_scratch_example():\n@@ -908,17 +880,13 @@ def test_fileobj():\n def test_nonstandard_units():\n     from astropy import units as u\n \n-    votable = parse(\n-        get_pkg_data_filename('data/nonstandard_units.xml'),\n-        pedantic=False)\n+    votable = parse(get_pkg_data_filename('data/nonstandard_units.xml'))\n \n     assert isinstance(\n         votable.get_first_table().fields[0].unit, u.UnrecognizedUnit)\n \n-    votable = parse(\n-        get_pkg_data_filename('data/nonstandard_units.xml'),\n-        pedantic=False,\n-        unit_format='generic')\n+    votable = parse(get_pkg_data_filename('data/nonstandard_units.xml'),\n+                    unit_format='generic')\n \n     assert not isinstance(\n         votable.get_first_table().fields[0].unit, u.UnrecognizedUnit)\n@@ -1010,11 +978,8 @@ def test_instantiate_vowarning():\n \n \n def test_custom_datatype():\n-    votable = parse(\n-        get_pkg_data_filename('data/custom_datatype.xml'),\n-        pedantic=False,\n-        datatype_mapping={'bar': 'int'}\n-    )\n+    votable = parse(get_pkg_data_filename('data/custom_datatype.xml'),\n+                    datatype_mapping={'bar': 'int'})\n \n     table = votable.get_first_table()\n     assert table.array.dtype['foo'] == np.int32\n",
  "problem_statement": "Silence warnings by default when reading in VO Tables\n### TL;DR\r\n\r\nUsers often are given files they don't have control over, and those files aren't always standard-compliant. This is especially true of VO Tables. I'd like to suggest that we make the VO Table reader more forgiving, although the *writer* should continue to emit warnings. Obviously we should discuss this first before doing, but I just want to put the proposal out there.\r\n\r\n### Details\r\n\r\nTaking the example of VO Tables, the following is an example of reading in one of the files in our test suite (which wasn't there to test warnings):\r\n\r\n```\r\nIn [5]: parse('gemini.xml')\r\nWARNING: W49: gemini.xml:37:12: W49: Empty cell illegal for integer fields. [astropy.io.votable.converters]\r\nWARNING: W49: gemini.xml:49:12: W49: Empty cell illegal for integer fields. [astropy.io.votable.converters]\r\nWARNING: W49: gemini.xml:61:12: W49: Empty cell illegal for integer fields. [astropy.io.votable.converters]\r\nWARNING: W48: gemini.xml:78:10: W48: Unknown attribute 'value' on OPTION [astropy.io.votable.tree]\r\nWARNING: W48: gemini.xml:79:10: W48: Unknown attribute 'value' on OPTION [astropy.io.votable.tree]\r\nWARNING: W06: gemini.xml:98:6: W06: Invalid UCD 'obs.field': Secondary word 'obs.field' is not valid as a primary word [astropy.io.votable.tree]\r\nWARNING: W06: gemini.xml:99:6: W06: Invalid UCD 'obs.field': Secondary word 'obs.field' is not valid as a primary word [astropy.io.votable.tree]\r\nWARNING: E02: gemini.xml:99:6: E02: Incorrect number of elements in array. Expected multiple of 3, got 1 [astropy.io.votable.converters]\r\nWARNING: W06: gemini.xml:100:6: W06: Invalid UCD 'obs.field': Secondary word 'obs.field' is not valid as a primary word [astropy.io.votable.tree]\r\nWARNING: W06: gemini.xml:101:6: W06: Invalid UCD 'em.wl;stat.interval': Unknown word 'stat.interval' [astropy.io.votable.tree]\r\nWARNING: E02: gemini.xml:101:6: E02: Incorrect number of elements in array. Expected multiple of 2, got 1 [astropy.io.votable.converters]\r\nWARNING: W06: gemini.xml:102:6: W06: Invalid UCD 'time;stat.interval': Unknown word 'stat.interval' [astropy.io.votable.tree]\r\nWARNING: E02: gemini.xml:102:6: E02: Incorrect number of elements in array. Expected multiple of 2, got 1 [astropy.io.votable.converters]\r\nWARNING: W06: gemini.xml:112:6: W06: Invalid UCD 'obs.field': Secondary word 'obs.field' is not valid as a primary word [astropy.io.votable.tree]\r\nWARNING: W06: gemini.xml:113:6: W06: Invalid UCD 'obs.field': Secondary word 'obs.field' is not valid as a primary word [astropy.io.votable.tree]\r\nWARNING: E02: gemini.xml:113:6: E02: Incorrect number of elements in array. Expected multiple of 3, got 1 [astropy.io.votable.converters]\r\nWARNING: W06: gemini.xml:114:6: W06: Invalid UCD 'obs.field': Secondary word 'obs.field' is not valid as a primary word [astropy.io.votable.tree]\r\nWARNING: W06: gemini.xml:115:6: W06: Invalid UCD 'em.wl;stat.interval': Unknown word 'stat.interval' [astropy.io.votable.tree]\r\nWARNING: E02: gemini.xml:115:6: E02: Incorrect number of elements in array. Expected multiple of 2, got 1 [astropy.io.votable.converters]\r\nWARNING: W06: gemini.xml:116:6: W06: Invalid UCD 'time;stat.interval': Unknown word 'stat.interval' (suppressing further warnings of this type...) [astropy.io.votable.tree]\r\nWARNING: E02: gemini.xml:116:6: E02: Incorrect number of elements in array. Expected multiple of 2, got 1 [astropy.io.votable.converters]\r\nWARNING: E02: gemini.xml:127:6: E02: Incorrect number of elements in array. Expected multiple of 3, got 1 [astropy.io.votable.converters]\r\nWARNING: E02: gemini.xml:137:6: E02: Incorrect number of elements in array. Expected multiple of 2, got 1 [astropy.io.votable.converters]\r\nWARNING: E02: gemini.xml:151:6: E02: Incorrect number of elements in array. Expected multiple of 3, got 1 [astropy.io.votable.converters]\r\nWARNING: E02: gemini.xml:161:6: E02: Incorrect number of elements in array. Expected multiple of 2, got 1 (suppressing further warnings of this type...) [astropy.io.votable.converters]\r\nOut[5]: <VOTABLE>... 1 tables ...</VOTABLE>\r\n```\r\n\r\nThis is a pretty typical number of warnings in my experience with VO Tables. I've never done anything about any of the warnings though...\r\n\r\nNote that there is actually a way to be even more pedantic:\r\n\r\n```\r\nIn [6]: parse('gemini.xml', pedantic=True)\r\n---------------------------------------------------------------------------\r\nW49                                       Traceback (most recent call last)\r\n<ipython-input-6-70047e7af5ca> in <module>()\r\n----> 1 parse('gemini.xml', pedantic=True)\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/io/votable/table.py in parse(source, columns, invalid, pedantic, chunk_size, table_number, table_id, filename, unit_format, datatype_mapping, _debug_python_based_parser)\r\n    135             _debug_python_based_parser=_debug_python_based_parser) as iterator:\r\n    136         return tree.VOTableFile(\r\n--> 137             config=config, pos=(1, 1)).parse(iterator, config)\r\n    138 \r\n    139 \r\n...\r\n~/Dropbox/Code/Astropy/astropy/astropy/io/votable/exceptions.py in vo_raise(exception_class, args, config, pos)\r\n     96     if config is None:\r\n     97         config = {}\r\n---> 98     raise exception_class(args, config, pos)\r\n     99 \r\n    100 \r\n\r\nW49: gemini.xml:37:12: W49: Empty cell illegal for integer fields.\r\n```\r\n\r\nBut actually no way to be less pedantic and ignore the warnings (short of using ``warnings.catch_warnigns``. I'd like to suggest that we add a ``verify`` key to the VO Table ``parse`` which can take different options as for FITS, including ``ignore``, ``warn``, ``exception`` (and possibly deprecate ``pendantic``).\r\n\r\nFurthermore, I think we might want to consider defaulting to ``'ignore'``.\r\n\r\nWe could also do something similar with FITS files - ignore warnings when reading but show them when writing?\r\n\n",
  "hints_text": "Good enough for FITS, good enough for me. This would address https://github.com/astropy/astropy/pull/7928#issuecomment-434031753 .\r\n\r\nDo you have any strong opinions about this, @tomdonaldson and @theresadower ?\n👍 to having a `verify` key and 👍 to `ignore` as the default.\n👍to this, and 4.0 is a good time to do it, @astrofrog.  But perhaps there should be a configuration item or other global-ish state that can be turned on?  My thinking is that this might be good as a tool to test what's valid and what is not in particular workflows.",
  "created_at": "2019-05-16T09:22:35Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"astropy/io/votable/tests/converter_test.py::test_integer_overflow\", \"astropy/io/votable/tests/table_test.py::TestVerifyOptions::test_default\", \"astropy/io/votable/tests/table_test.py::TestVerifyOptions::test_verify_ignore\", \"astropy/io/votable/tests/table_test.py::TestVerifyOptions::test_verify_warn\", \"astropy/io/votable/tests/table_test.py::TestVerifyOptions::test_conf_verify_ignore\", \"astropy/io/votable/tests/table_test.py::TestVerifyOptions::test_conf_verify_warn\", \"astropy/io/votable/tests/tree_test.py::test_check_astroyear_fail\", \"astropy/io/votable/tests/tree_test.py::test_string_fail\"]",
  "PASS_TO_PASS": "[\"astropy/io/votable/tests/converter_test.py::test_invalid_arraysize\", \"astropy/io/votable/tests/converter_test.py::test_oversize_char\", \"astropy/io/votable/tests/converter_test.py::test_char_mask\", \"astropy/io/votable/tests/converter_test.py::test_oversize_unicode\", \"astropy/io/votable/tests/converter_test.py::test_unicode_mask\", \"astropy/io/votable/tests/converter_test.py::test_wrong_number_of_elements\", \"astropy/io/votable/tests/converter_test.py::test_bit\", \"astropy/io/votable/tests/converter_test.py::test_bit_mask\", \"astropy/io/votable/tests/converter_test.py::test_boolean\", \"astropy/io/votable/tests/converter_test.py::test_boolean_array\", \"astropy/io/votable/tests/converter_test.py::test_invalid_type\", \"astropy/io/votable/tests/exception_test.py::test_reraise\", \"astropy/io/votable/tests/exception_test.py::test_parse_vowarning\", \"astropy/io/votable/tests/table_test.py::TestVerifyOptions::test_pedantic_false\", \"astropy/io/votable/tests/table_test.py::TestVerifyOptions::test_conf_pedantic_false\", \"astropy/io/votable/tests/vo_test.py::test_validate\", \"astropy/io/votable/tests/vo_test.py::test_validate_xmllint_true\", \"astropy/io/votable/tests/vo_test.py::test_validate_path_object\", \"astropy/io/votable/tests/vo_test.py::test_from_scratch_example\", \"astropy/io/votable/tests/vo_test.py::test_fileobj\", \"astropy/io/votable/tests/vo_test.py::test_no_resource_check\", \"astropy/io/votable/tests/vo_test.py::test_instantiate_vowarning\"]",
  "environment_setup_commit": "2e89d074b3b2abc2da80e437c93b1d5516a0ca57",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.548548",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}