{
  "repo": "django/django",
  "instance_id": "django__django-14056",
  "base_commit": "f55f3ce831fa885dfef0b222c254bb4bf3ca99ef",
  "patch": "diff --git a/django/contrib/staticfiles/finders.py b/django/contrib/staticfiles/finders.py\n--- a/django/contrib/staticfiles/finders.py\n+++ b/django/contrib/staticfiles/finders.py\n@@ -4,7 +4,7 @@\n from django.apps import apps\n from django.conf import settings\n from django.contrib.staticfiles import utils\n-from django.core.checks import Error\n+from django.core.checks import Error, Warning\n from django.core.exceptions import ImproperlyConfigured\n from django.core.files.storage import (\n     FileSystemStorage, Storage, default_storage,\n@@ -75,6 +75,7 @@ def check(self, **kwargs):\n                 hint='Perhaps you forgot a trailing comma?',\n                 id='staticfiles.E001',\n             ))\n+            return errors\n         for root in settings.STATICFILES_DIRS:\n             if isinstance(root, (list, tuple)):\n                 prefix, root = root\n@@ -90,6 +91,12 @@ def check(self, **kwargs):\n                     'STATIC_ROOT setting.',\n                     id='staticfiles.E002',\n                 ))\n+            if not os.path.isdir(root):\n+                errors.append(Warning(\n+                    f\"The directory '{root}' in the STATICFILES_DIRS setting \"\n+                    f\"does not exist.\",\n+                    id='staticfiles.W004',\n+                ))\n         return errors\n \n     def find(self, path, all=False):\n@@ -126,9 +133,11 @@ def list(self, ignore_patterns):\n         List all files in all locations.\n         \"\"\"\n         for prefix, root in self.locations:\n-            storage = self.storages[root]\n-            for path in utils.get_files(storage, ignore_patterns):\n-                yield path, storage\n+            # Skip nonexistent directories.\n+            if os.path.isdir(root):\n+                storage = self.storages[root]\n+                for path in utils.get_files(storage, ignore_patterns):\n+                    yield path, storage\n \n \n class AppDirectoriesFinder(BaseFinder):\n",
  "test_patch": "diff --git a/tests/staticfiles_tests/test_checks.py b/tests/staticfiles_tests/test_checks.py\n--- a/tests/staticfiles_tests/test_checks.py\n+++ b/tests/staticfiles_tests/test_checks.py\n@@ -1,13 +1,18 @@\n+from pathlib import Path\n from unittest import mock\n \n from django.conf import settings\n from django.contrib.staticfiles.checks import check_finders\n-from django.contrib.staticfiles.finders import BaseFinder\n-from django.core.checks import Error\n-from django.test import SimpleTestCase, override_settings\n+from django.contrib.staticfiles.finders import BaseFinder, get_finder\n+from django.core.checks import Error, Warning\n+from django.test import override_settings\n \n+from .cases import CollectionTestCase\n+from .settings import TEST_ROOT\n \n-class FindersCheckTests(SimpleTestCase):\n+\n+class FindersCheckTests(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n \n     def test_base_finder_check_not_implemented(self):\n         finder = BaseFinder()\n@@ -56,32 +61,54 @@ def test_dirs_not_tuple_or_list(self):\n             )\n         ])\n \n-    @override_settings(STATICFILES_DIRS=['/fake/path', settings.STATIC_ROOT])\n     def test_dirs_contains_static_root(self):\n-        self.assertEqual(check_finders(None), [\n-            Error(\n-                'The STATICFILES_DIRS setting should not contain the '\n-                'STATIC_ROOT setting.',\n-                id='staticfiles.E002',\n-            )\n-        ])\n+        with self.settings(STATICFILES_DIRS=[settings.STATIC_ROOT]):\n+            self.assertEqual(check_finders(None), [\n+                Error(\n+                    'The STATICFILES_DIRS setting should not contain the '\n+                    'STATIC_ROOT setting.',\n+                    id='staticfiles.E002',\n+                )\n+            ])\n \n-    @override_settings(STATICFILES_DIRS=[('prefix', settings.STATIC_ROOT)])\n     def test_dirs_contains_static_root_in_tuple(self):\n-        self.assertEqual(check_finders(None), [\n-            Error(\n-                'The STATICFILES_DIRS setting should not contain the '\n-                'STATIC_ROOT setting.',\n-                id='staticfiles.E002',\n-            )\n-        ])\n+        with self.settings(STATICFILES_DIRS=[('prefix', settings.STATIC_ROOT)]):\n+            self.assertEqual(check_finders(None), [\n+                Error(\n+                    'The STATICFILES_DIRS setting should not contain the '\n+                    'STATIC_ROOT setting.',\n+                    id='staticfiles.E002',\n+                )\n+            ])\n \n-    @override_settings(STATICFILES_DIRS=[('prefix/', '/fake/path')])\n     def test_prefix_contains_trailing_slash(self):\n-        self.assertEqual(check_finders(None), [\n-            Error(\n-                \"The prefix 'prefix/' in the STATICFILES_DIRS setting must \"\n-                \"not end with a slash.\",\n-                id='staticfiles.E003',\n-            )\n-        ])\n+        static_dir = Path(TEST_ROOT) / 'project' / 'documents'\n+        with self.settings(STATICFILES_DIRS=[('prefix/', static_dir)]):\n+            self.assertEqual(check_finders(None), [\n+                Error(\n+                    \"The prefix 'prefix/' in the STATICFILES_DIRS setting must \"\n+                    \"not end with a slash.\",\n+                    id='staticfiles.E003',\n+                ),\n+            ])\n+\n+    def test_nonexistent_directories(self):\n+        with self.settings(STATICFILES_DIRS=[\n+            '/fake/path',\n+            ('prefix', '/fake/prefixed/path'),\n+        ]):\n+            self.assertEqual(check_finders(None), [\n+                Warning(\n+                    \"The directory '/fake/path' in the STATICFILES_DIRS \"\n+                    \"setting does not exist.\",\n+                    id='staticfiles.W004',\n+                ),\n+                Warning(\n+                    \"The directory '/fake/prefixed/path' in the \"\n+                    \"STATICFILES_DIRS setting does not exist.\",\n+                    id='staticfiles.W004',\n+                ),\n+            ])\n+            # Nonexistent directories are skipped.\n+            finder = get_finder('django.contrib.staticfiles.finders.FileSystemFinder')\n+            self.assertEqual(list(finder.list(None)), [])\n",
  "problem_statement": "Make `collectstatic` warn (rather than blow up) on missing directories\nDescription\n\t\nAt present if the STATICFILES_DIRS setting contains references to directories which do not exist then the whole command will die with an OSError.\nA situation I've seen bite a few newcomers to Django is that they will have an empty static directory which (being empty) won't get tracked by git. This means that collectstatic works when they run it locally, but blows up with a (to them) cryptic error when they try to deploy.\nIf we made collectstatic simply log a warning in the case of non-existent directories and continue processing then we could avoid this problem and remove one possible source of frustration for newcomers.\nIf this approach seems acceptable to others I am happy to submit an appropriate patch.\n",
  "hints_text": "Maybe the current error message could be improved. What does it say? Did you research the origin of the current exception to see if you can find any design decisions there?\nReplying to Tim Graham: Maybe the current error message could be improved. What does it say? Did you research the origin of the current exception to see if you can find any design decisions there? The exception is just OSError: [Errno 2] No such file or directory This bubbles up from directly from the call to os.listdir here: ​https://github.com/django/django/blob/1f7ca858664491589ba400419a491dd0a9af5dff/django/core/files/storage.py#L312 So I don't think there was any deliberate design decision here. Also, I don't think improving the error message will solve this specific problem because: If the user is deploying to Heroku then they are just told that the collectstatic step was skipped due to errors, but they have to run the command themselves to see what those errors were. An error message about missing directories is confusing to them because they can see the directory right there on their filesystem. The fact that git doesn't track empty directories is then yet another bit of weird computer arcanery that we need to expose them to when they are just trying to deploy \"My First Website\".\nIn the case of Heroku which swallows the output of collectstatic, if STATICFILES_DIRS doesn't have a correct value, the change suggested here will make it pretend that it succeeded, even though it didn't collect files, while it currently says it's failing. I think that's a problem: \"errors shouldn't pass silently\" :-)\nReplying to Aymeric Augustin: In the case of Heroku which swallows the output of collectstatic, if STATICFILES_DIRS doesn't have a correct value, the change suggested here will make it pretend that it succeeded, even though it didn't collect files, while it currently says it's failing. I think that's a problem: \"errors shouldn't pass silently\" :-) Yes, absolutely agree that errors shouldn't pass silently. In the case of the Heroku buildpack, it does suppress some of the output but any warning messages will get displayed: ​https://github.com/heroku/heroku-buildpack-python/blob/677dfeec119f28b4d1a8f679b38b2d4e407f4533/bin/steps/collectstatic#L33 Would another option be for collectstatic to note that a directory was missing, issue a warning, proceed with collecting the rest of the static files, and then exit with status > 0 at the end? That way, the user would still have a working set of static files.\nAs long as that doesn't obscure errors, yes, it should be an improvement. Historically we've removed lots of \"helpful\" error handling which made other errors harder to diagnose. Often the raw stack trace is the best way to see what went wrong. I wanted to share that experience with the first case that came to my mind.\nAnother trend is moving runtime warnings to the system check framework, e.g. 0ec4dc91e0e7befdd06aa0613b5d0fbe3c785ee7. Could that be appropriate here?\nThat's an interesting idea. So referencing a non-existent directory in STATICFILES_DIRS would trigger a warning in the system check framework, but wouldn't prevent collectstatic from running. Aymeric, would that address your concerns?\nChanges have been made to show warning (without stopping execution) if any of the static files directory does not exists. Earlier the situation was that if we have more than one directory paths in STATICFILES_DIRS and if the first one is missing then it wouldn't process the next directory and fails giving the exception logs. But now, with the current changes it will show a message in the format that \"Path [<missing_dir_path>] does not exists. Skipping...\" and also process all the directories (next ones) as expected. A pull request has been created ​https://github.com/django/django/pull/8137\nThe ticket is marked fixed when the patch is committed to the Django repository. Please read ​Triaging Tickets. A test is also required. Please uncheck \"Needs tests\" on the ticket after updating the PR.\n​PR",
  "created_at": "2021-02-26T15:14:34Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"test_nonexistent_directories (staticfiles_tests.test_checks.FindersCheckTests)\"]",
  "PASS_TO_PASS": "[\"test_base_finder_check_not_implemented (staticfiles_tests.test_checks.FindersCheckTests)\", \"check_finders() concatenates all errors.\", \"test_dirs_contains_static_root (staticfiles_tests.test_checks.FindersCheckTests)\", \"test_dirs_contains_static_root_in_tuple (staticfiles_tests.test_checks.FindersCheckTests)\", \"test_dirs_not_tuple_or_list (staticfiles_tests.test_checks.FindersCheckTests)\", \"test_no_errors_with_test_settings (staticfiles_tests.test_checks.FindersCheckTests)\", \"test_prefix_contains_trailing_slash (staticfiles_tests.test_checks.FindersCheckTests)\"]",
  "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.679925",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}