{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12626",
  "base_commit": "ac327c5ad66fa3d4eb607d007e3684dec872d49a",
  "patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -11,6 +11,7 @@\n from itertools import chain\n \n import numpy as np\n+import warnings\n from scipy import sparse\n \n from ..base import clone, TransformerMixin\n@@ -681,14 +682,63 @@ def _is_empty_column_selection(column):\n         return False\n \n \n+def _validate_transformers(transformers):\n+    \"\"\"Checks if given transformers are valid.\n+\n+    This is a helper function to support the deprecated tuple order.\n+    XXX Remove in v0.22\n+    \"\"\"\n+    if not transformers:\n+        return True\n+\n+    for t in transformers:\n+        if t in ('drop', 'passthrough'):\n+            continue\n+        if (not (hasattr(t, \"fit\") or hasattr(t, \"fit_transform\")) or not\n+                hasattr(t, \"transform\")):\n+            return False\n+\n+    return True\n+\n+\n+def _is_deprecated_tuple_order(tuples):\n+    \"\"\"Checks if the input follows the deprecated tuple order.\n+\n+    Returns\n+    -------\n+    Returns true if (transformer, columns) is not a valid assumption for the\n+    input, but (columns, transformer) is valid. The latter is deprecated and\n+    its support will stop in v0.22.\n+\n+    XXX Remove in v0.22\n+    \"\"\"\n+    transformers, columns = zip(*tuples)\n+    if (not _validate_transformers(transformers)\n+            and _validate_transformers(columns)):\n+        return True\n+\n+    return False\n+\n+\n def _get_transformer_list(estimators):\n     \"\"\"\n     Construct (name, trans, column) tuples from list\n \n     \"\"\"\n-    transformers = [trans[1] for trans in estimators]\n-    columns = [trans[0] for trans in estimators]\n-    names = [trans[0] for trans in _name_estimators(transformers)]\n+    message = ('`make_column_transformer` now expects (transformer, columns) '\n+               'as input tuples instead of (columns, transformer). This '\n+               'has been introduced in v0.20.1. `make_column_transformer` '\n+               'will stop accepting the deprecated (columns, transformer) '\n+               'order in v0.22.')\n+\n+    transformers, columns = zip(*estimators)\n+\n+    # XXX Remove in v0.22\n+    if _is_deprecated_tuple_order(estimators):\n+        transformers, columns = columns, transformers\n+        warnings.warn(message, DeprecationWarning)\n+\n+    names, _ = zip(*_name_estimators(transformers))\n \n     transformer_list = list(zip(names, transformers, columns))\n     return transformer_list\n@@ -704,7 +754,7 @@ def make_column_transformer(*transformers, **kwargs):\n \n     Parameters\n     ----------\n-    *transformers : tuples of column selections and transformers\n+    *transformers : tuples of transformers and column selections\n \n     remainder : {'drop', 'passthrough'} or estimator, default 'drop'\n         By default, only the specified columns in `transformers` are\n@@ -747,8 +797,8 @@ def make_column_transformer(*transformers, **kwargs):\n     >>> from sklearn.preprocessing import StandardScaler, OneHotEncoder\n     >>> from sklearn.compose import make_column_transformer\n     >>> make_column_transformer(\n-    ...     (['numerical_column'], StandardScaler()),\n-    ...     (['categorical_column'], OneHotEncoder()))\n+    ...     (StandardScaler(), ['numerical_column']),\n+    ...     (OneHotEncoder(), ['categorical_column']))\n     ...     # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n     ColumnTransformer(n_jobs=None, remainder='drop', sparse_threshold=0.3,\n              transformer_weights=None,\n",
  "test_patch": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,6 +13,7 @@\n from sklearn.utils.testing import assert_dict_equal\n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_allclose_dense_sparse\n+from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.base import BaseEstimator\n from sklearn.externals import six\n@@ -373,8 +374,8 @@ def test_column_transformer_mixed_cols_sparse():\n                   dtype='O')\n \n     ct = make_column_transformer(\n-        ([0], OneHotEncoder()),\n-        ([1, 2], 'passthrough'),\n+        (OneHotEncoder(), [0]),\n+        ('passthrough', [1, 2]),\n         sparse_threshold=1.0\n     )\n \n@@ -386,8 +387,8 @@ def test_column_transformer_mixed_cols_sparse():\n                                                     [0, 1, 2, 0]]))\n \n     ct = make_column_transformer(\n-        ([0], OneHotEncoder()),\n-        ([0], 'passthrough'),\n+        (OneHotEncoder(), [0]),\n+        ('passthrough', [0]),\n         sparse_threshold=1.0\n     )\n     with pytest.raises(ValueError,\n@@ -516,21 +517,39 @@ def predict(self, X):\n def test_make_column_transformer():\n     scaler = StandardScaler()\n     norm = Normalizer()\n-    ct = make_column_transformer(('first', scaler), (['second'], norm))\n+    ct = make_column_transformer((scaler, 'first'), (norm, ['second']))\n     names, transformers, columns = zip(*ct.transformers)\n     assert_equal(names, (\"standardscaler\", \"normalizer\"))\n     assert_equal(transformers, (scaler, norm))\n     assert_equal(columns, ('first', ['second']))\n \n+    # XXX remove in v0.22\n+    with pytest.warns(DeprecationWarning,\n+                      match='`make_column_transformer` now expects'):\n+        ct1 = make_column_transformer(([0], norm))\n+    ct2 = make_column_transformer((norm, [0]))\n+    X_array = np.array([[0, 1, 2], [2, 4, 6]]).T\n+    assert_almost_equal(ct1.fit_transform(X_array),\n+                        ct2.fit_transform(X_array))\n+\n+    with pytest.warns(DeprecationWarning,\n+                      match='`make_column_transformer` now expects'):\n+        make_column_transformer(('first', 'drop'))\n+\n+    with pytest.warns(DeprecationWarning,\n+                      match='`make_column_transformer` now expects'):\n+        make_column_transformer(('passthrough', 'passthrough'),\n+                                ('first', 'drop'))\n+\n \n def test_make_column_transformer_kwargs():\n     scaler = StandardScaler()\n     norm = Normalizer()\n-    ct = make_column_transformer(('first', scaler), (['second'], norm),\n+    ct = make_column_transformer((scaler, 'first'), (norm, ['second']),\n                                  n_jobs=3, remainder='drop',\n                                  sparse_threshold=0.5)\n     assert_equal(ct.transformers, make_column_transformer(\n-        ('first', scaler), (['second'], norm)).transformers)\n+        (scaler, 'first'), (norm, ['second'])).transformers)\n     assert_equal(ct.n_jobs, 3)\n     assert_equal(ct.remainder, 'drop')\n     assert_equal(ct.sparse_threshold, 0.5)\n@@ -538,7 +557,7 @@ def test_make_column_transformer_kwargs():\n     assert_raise_message(\n         TypeError,\n         'Unknown keyword arguments: \"transformer_weights\"',\n-        make_column_transformer, ('first', scaler), (['second'], norm),\n+        make_column_transformer, (scaler, 'first'), (norm, ['second']),\n         transformer_weights={'pca': 10, 'Transf': 1}\n     )\n \n@@ -547,7 +566,7 @@ def test_make_column_transformer_remainder_transformer():\n     scaler = StandardScaler()\n     norm = Normalizer()\n     remainder = StandardScaler()\n-    ct = make_column_transformer(('first', scaler), (['second'], norm),\n+    ct = make_column_transformer((scaler, 'first'), (norm, ['second']),\n                                  remainder=remainder)\n     assert ct.remainder == remainder\n \n@@ -757,7 +776,7 @@ def test_column_transformer_remainder():\n         \"or estimator.\", ct.fit_transform, X_array)\n \n     # check default for make_column_transformer\n-    ct = make_column_transformer(([0], Trans()))\n+    ct = make_column_transformer((Trans(), [0]))\n     assert ct.remainder == 'drop'\n \n \n",
  "problem_statement": "make_column_transformer has different order of arguments than ColumnTransformer\nI'm not sure if we discussed this or did this on purpose, but I find this very confusing.\r\n``ColumnTransformer`` has ``(name, transformer, columns)`` and ``make_columntransformer`` has ``(columns, transformer)``. I guess it's too late to change this? Though we did say it's experimental and subject to change.\n",
  "hints_text": "It's not very nice, is it!! I don't know what to do...\nwe said we might break it... I feel this is a good reason to?\r\nBasically either that or I have to add to my book (and every tutorial I ever give) \"but be careful, they go in a different order for some reason\"\nThen is it better to break in 0.20.1 or 0.21??\n\nBreaking in 0.20.1 has the benefit of fewer people having had used them by the time of the release of the change.\nI agree, I'd favor 0.20.1\nAnd which of the two would you change?\r\n\r\nWe discussed this several times (at least, I remember raising the question several times about what to do with this consistency, or whether we are fine with it), and I think we also swapped a few times the order during the lifetime of the PR.\r\n\r\nAs far as I remember, the reason is that for `make_column_transformer`, this is the logical order, and for `ColumnTransformer`, it is somewhat following Pipeline/FeatureUnion\nRight now I can't recall why this is the logical order for `make_column_transformer`...\nIf we change the order in `make_column_transformer`, maybe we can use some magic (i.e. heuristics) to make it backwards compatible to 0.20.0, with a warning.\r\n\r\nI.e.\r\n```py\r\nif hasattr(tup[1], 'fit') or tup[1] in ('drop', 'passthrough'):\r\n    warnings.warn(DeprecationWarning,\r\n                  'make_column_transformer arguments should be '\r\n                  '(transformer, columns). (columns, transformer) was passed; '\r\n                  'its support is deprecated and will be removed in version 0.23.')\r\n    tup = (tup[1], tup[0])\r\n```\r\n\nthe `hasattr(tup[1], 'fit')` part seems fine to me, but I'd worry about checking for string literals since it'll introduce a bug if the user passes `('drop', 'passthrough')` as the tuple.\r\n\r\nI also don't think we'd need to keep this until v0.23, since it is indeed marked as experimental.\nYeah I remember the back-and-forth but I didn't remember that the outcome is inconsistent - or maybe then I didn't think it was that bad? Explaining it seems pretty awkward, though....\n> I'd worry about checking for string literals\r\n\r\nWe can also check the other element to be sure it is not one of the allowed ones. That would only mean we miss a deprecation warning in that corner case of `('drop', 'passthrough')` (and for that it would then be a hard break ..). I don't think that should keep us from doing it though (if we decide we want to).\r\n\r\n---\r\n\r\nSo options:\r\n\r\n1. Do nothing (keep inconsistency), but for example we could provide more informative error messages (we should be able to infer rather easily if a user had the wrong order, similarly as we would do for a deprecation warning)\r\n2. Change order of `ColumnTransformer` to be `(name, columns, transformer)` instead of `(name, transformer, columns)`. \r\n  For consistency with Pipeline/FeatureUnion, I think the most important part is that the first element is the name, the rest is not identical anyway.\r\n3. Change the order of `make_column_transformer` to be `(transformer, columns)` instead of the current `(columns, transformer)`.\r\n\r\nYou are all rather thinking of option 3 I think?\r\n\r\nOption 3 would certainly have less impact on the implementation than option 2.\r\n\r\nPersonally, I think the `(columns, transformer)` order of `make_column_transformer` reads more naturally than the other way around, so I would be a bit sad to see that go (but I also completely understand the consistency point ..)\nI was thinking about 3 but don't have a strong preference between 2 and 3.\r\nI guess what's more natural depends on your mental model and whether you think the primary object is the transformer or the columns (and I'm not surprised that @jnothman and me possibly think of the transformer as the primary object and you think of the columns as the primary object ;).\r\n\r\nBut really not a strong preference for 2.\nI don't think it matters much. I think columns first might be more\nintuitive.\n\nIf you're not working on it, I could give this a try. Are we going for option 2 then? I'd probably prefer `transformer, columns` since `columns` is probably the longest/most variable input parameter, and having it at the end helps with the readability of the code, and it's less change from the status quo of the code, but absolutely no hard feelings. \nLet's go with that. Thanks!!\n\nI pretty much like 1. Using it, I got the same feeling but actually I find the current transformer more human readable while the change will not be (at least imo). \nI don't like 1 because it's inconsistent and hard to explain. It puts additional cognitive load on users for no reason. It makes it harder to change code.\r\n\r\n@glemaitre you mean you find the current ``make_column_transformer`` more human readable, right? The ``ColumnTransformer`` doesn't change.\nSo @glemaitre are you saying you find the interface optimal for both ColumnTransformer and make_column_transformer? Can you try explain why?\nActually, looking at it again, I am split. I certainly find the current implementation of the `make_column_transformer` more natural.\r\n\r\nSo by changing `ColumnTransformer` it is only surprising if you are expecting that the estimator should come in second position alike in `Pipeline`. But anyway those two classes are different so it might not be that bad if actually they look different. So (2) would be my choice if we gonna change something.\r\n\r\n\nI suspect this decision is fairly arbitrary. Users will consider natural whatever we choose. This will be far from the biggest wtf in our API!!\nI don't have a strong opinion as long as it's consistent and the name comes first.\r\n@jnothman now I'm curious what you consider the biggest wtf ;)\n> now I'm curious what you consider the biggest wtf ;)\r\n\r\nWell looking at ColumnTransformer construction alone, I'm sure users will wonder why weights are a separate parameter, and why they need these tuples in the first place, rather than having methods that allow them to specify `add(transformer=Blah(), column=['foo', 'bar'], weight=.5)` (after all, such a factory approach would almost make `make_column_transformer` redundant)...\nOne small argument in favour of 2 is that \"ColumnTransformer\" is a mnemonic for `(column, transformer)`.\nSo is that a consensus now? Should I change it?\n> I'd probably prefer transformer, columns since columns is probably the longest/most variable input parameter, and having it at the end helps with the readability of the code\r\n\r\nJust to answer to this argument. I think this quite depends on how your code is written, because it can perfectly be the other way around. Eg on the slides of Oliver about the new features, there was a fragment like:\r\n\r\n```\r\nnumerical_columns = ... (longer selection based on the dtypes)\r\ncategorical_columns = ... \r\n\r\npreprocessor = make_column_transformer(\r\n    (numerical_columns, make_pipeline(\r\n        SimpleImputer(...),\r\n        KBinsDiscretizer(...))\r\n    ),\r\n    (categorical_columns, make_pipeline(\r\n        SimpleImputer(...),\r\n        OneHotEncoder(...))\r\n    )\r\n)\r\n```\r\n\r\nSo here, it is actually the transformer that is longer. But of course, you can perfectly define those before the `make_column_transformer` as well. But so just saying that this depends on the code organisation.\nHow are we gonna settle this? @ogrisel do you have an opinion? I kinda also expect from ``Pipeline`` and ``FeatureUnion`` that the estimator is second. But really I don't care that much...\nMake it match the name I reckon: column-transformer.\n\nFor historical clarity: based on discussion in the PR https://github.com/scikit-learn/scikit-learn/pull/12396, we decided in the end to do it the other way around as decided on above (so `transformer, columns`). \r\nThe reason is mainly due to technical and user-facing complexity to properly deprecate the current order in master for `ColumnTransfomer`, while it will be much easier to limit the change to the factory function `make_column_transformer`, but see the linked PR for more details.\r\n",
  "created_at": "2018-11-20T16:19:19Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_mixed_cols_sparse\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer\"]",
  "PASS_TO_PASS": "[\"sklearn/compose/tests/test_column_transformer.py::test_column_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_dataframe\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-pandas]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-numpy]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-pandas]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-numpy]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_array\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_list\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_stacking\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_threshold\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_error_msg_1D\", \"sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output\", \"sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output_pandas\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[drop]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[passthrough]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_kwargs\", \"sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_named_estimators\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_cloning\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_feature_names\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_special_strings\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[pd-index]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key5]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key6]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key7]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key8]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key0]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key1]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key2]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key3]\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_remaining_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drops_all_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drop_all_sparse_remainder_transformer\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params_with_remainder\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators_set_params\", \"sklearn/compose/tests/test_column_transformer.py::test_column_transformer_callable_specifier\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.965772",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}