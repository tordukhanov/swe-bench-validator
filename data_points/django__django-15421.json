{
  "repo": "django/django",
  "instance_id": "django__django-15421",
  "base_commit": "be80aa55ec120b3b6645b3efb77316704d7ad948",
  "patch": "diff --git a/django/db/backends/sqlite3/creation.py b/django/db/backends/sqlite3/creation.py\n--- a/django/db/backends/sqlite3/creation.py\n+++ b/django/db/backends/sqlite3/creation.py\n@@ -1,8 +1,11 @@\n+import multiprocessing\n import os\n import shutil\n+import sqlite3\n import sys\n from pathlib import Path\n \n+from django.db import NotSupportedError\n from django.db.backends.base.creation import BaseDatabaseCreation\n \n \n@@ -51,16 +54,26 @@ def _create_test_db(self, verbosity, autoclobber, keepdb=False):\n     def get_test_db_clone_settings(self, suffix):\n         orig_settings_dict = self.connection.settings_dict\n         source_database_name = orig_settings_dict[\"NAME\"]\n-        if self.is_in_memory_db(source_database_name):\n+\n+        if not self.is_in_memory_db(source_database_name):\n+            root, ext = os.path.splitext(source_database_name)\n+            return {**orig_settings_dict, \"NAME\": f\"{root}_{suffix}{ext}\"}\n+\n+        start_method = multiprocessing.get_start_method()\n+        if start_method == \"fork\":\n             return orig_settings_dict\n-        else:\n-            root, ext = os.path.splitext(orig_settings_dict[\"NAME\"])\n-            return {**orig_settings_dict, \"NAME\": \"{}_{}{}\".format(root, suffix, ext)}\n+        if start_method == \"spawn\":\n+            return {\n+                **orig_settings_dict,\n+                \"NAME\": f\"{self.connection.alias}_{suffix}.sqlite3\",\n+            }\n+        raise NotSupportedError(\n+            f\"Cloning with start method {start_method!r} is not supported.\"\n+        )\n \n     def _clone_test_db(self, suffix, verbosity, keepdb=False):\n         source_database_name = self.connection.settings_dict[\"NAME\"]\n         target_database_name = self.get_test_db_clone_settings(suffix)[\"NAME\"]\n-        # Forking automatically makes a copy of an in-memory database.\n         if not self.is_in_memory_db(source_database_name):\n             # Erase the old test database\n             if os.access(target_database_name, os.F_OK):\n@@ -85,6 +98,12 @@ def _clone_test_db(self, suffix, verbosity, keepdb=False):\n             except Exception as e:\n                 self.log(\"Got an error cloning the test database: %s\" % e)\n                 sys.exit(2)\n+        # Forking automatically makes a copy of an in-memory database.\n+        # Spawn requires migrating to disk which will be re-opened in\n+        # setup_worker_connection.\n+        elif multiprocessing.get_start_method() == \"spawn\":\n+            ondisk_db = sqlite3.connect(target_database_name, uri=True)\n+            self.connection.connection.backup(ondisk_db)\n \n     def _destroy_test_db(self, test_database_name, verbosity):\n         if test_database_name and not self.is_in_memory_db(test_database_name):\n@@ -106,3 +125,34 @@ def test_db_signature(self):\n         else:\n             sig.append(test_database_name)\n         return tuple(sig)\n+\n+    def setup_worker_connection(self, _worker_id):\n+        settings_dict = self.get_test_db_clone_settings(_worker_id)\n+        # connection.settings_dict must be updated in place for changes to be\n+        # reflected in django.db.connections. Otherwise new threads would\n+        # connect to the default database instead of the appropriate clone.\n+        start_method = multiprocessing.get_start_method()\n+        if start_method == \"fork\":\n+            # Update settings_dict in place.\n+            self.connection.settings_dict.update(settings_dict)\n+            self.connection.close()\n+        elif start_method == \"spawn\":\n+            alias = self.connection.alias\n+            connection_str = (\n+                f\"file:memorydb_{alias}_{_worker_id}?mode=memory&cache=shared\"\n+            )\n+            source_db = self.connection.Database.connect(\n+                f\"file:{alias}_{_worker_id}.sqlite3\", uri=True\n+            )\n+            target_db = sqlite3.connect(connection_str, uri=True)\n+            source_db.backup(target_db)\n+            source_db.close()\n+            # Update settings_dict in place.\n+            self.connection.settings_dict.update(settings_dict)\n+            self.connection.settings_dict[\"NAME\"] = connection_str\n+            # Re-open connection to in-memory database before closing copy\n+            # connection.\n+            self.connection.connect()\n+            target_db.close()\n+            if os.environ.get(\"RUNNING_DJANGOS_TEST_SUITE\") == \"true\":\n+                self.mark_expected_failures_and_skips()\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -130,7 +130,7 @@ def iter_modules_and_files(modules, extra_files):\n         # cause issues here.\n         if not isinstance(module, ModuleType):\n             continue\n-        if module.__name__ == \"__main__\":\n+        if module.__name__ in (\"__main__\", \"__mp_main__\"):\n             # __main__ (usually manage.py) doesn't always have a __spec__ set.\n             # Handle this by falling back to using __file__, resolved below.\n             # See https://docs.python.org/reference/import.html#main-spec\n",
  "test_patch": "diff --git a/django/test/runner.py b/django/test/runner.py\n--- a/django/test/runner.py\n+++ b/django/test/runner.py\n@@ -20,7 +20,12 @@\n from django.core.management import call_command\n from django.db import connections\n from django.test import SimpleTestCase, TestCase\n-from django.test.utils import NullTimeKeeper, TimeKeeper, iter_test_cases\n+from django.test.utils import (\n+    NullTimeKeeper,\n+    TimeKeeper,\n+    captured_stdout,\n+    iter_test_cases,\n+)\n from django.test.utils import setup_databases as _setup_databases\n from django.test.utils import setup_test_environment\n from django.test.utils import teardown_databases as _teardown_databases\n@@ -367,8 +372,8 @@ def get_max_test_processes():\n     The maximum number of test processes when using the --parallel option.\n     \"\"\"\n     # The current implementation of the parallel test runner requires\n-    # multiprocessing to start subprocesses with fork().\n-    if multiprocessing.get_start_method() != \"fork\":\n+    # multiprocessing to start subprocesses with fork() or spawn().\n+    if multiprocessing.get_start_method() not in {\"fork\", \"spawn\"}:\n         return 1\n     try:\n         return int(os.environ[\"DJANGO_TEST_PROCESSES\"])\n@@ -391,7 +396,13 @@ def parallel_type(value):\n _worker_id = 0\n \n \n-def _init_worker(counter):\n+def _init_worker(\n+    counter,\n+    initial_settings=None,\n+    serialized_contents=None,\n+    process_setup=None,\n+    process_setup_args=None,\n+):\n     \"\"\"\n     Switch to databases dedicated to this worker.\n \n@@ -405,9 +416,22 @@ def _init_worker(counter):\n         counter.value += 1\n         _worker_id = counter.value\n \n+    start_method = multiprocessing.get_start_method()\n+\n+    if start_method == \"spawn\":\n+        process_setup(*process_setup_args)\n+        setup_test_environment()\n+\n     for alias in connections:\n         connection = connections[alias]\n+        if start_method == \"spawn\":\n+            # Restore initial settings in spawned processes.\n+            connection.settings_dict.update(initial_settings[alias])\n+            if value := serialized_contents.get(alias):\n+                connection._test_serialized_contents = value\n         connection.creation.setup_worker_connection(_worker_id)\n+        with captured_stdout():\n+            call_command(\"check\", databases=connections)\n \n \n def _run_subsuite(args):\n@@ -449,6 +473,8 @@ def __init__(self, subsuites, processes, failfast=False, buffer=False):\n         self.processes = processes\n         self.failfast = failfast\n         self.buffer = buffer\n+        self.initial_settings = None\n+        self.serialized_contents = None\n         super().__init__()\n \n     def run(self, result):\n@@ -469,8 +495,12 @@ def run(self, result):\n         counter = multiprocessing.Value(ctypes.c_int, 0)\n         pool = multiprocessing.Pool(\n             processes=self.processes,\n-            initializer=self.init_worker.__func__,\n-            initargs=[counter],\n+            initializer=self.init_worker,\n+            initargs=[\n+                counter,\n+                self.initial_settings,\n+                self.serialized_contents,\n+            ],\n         )\n         args = [\n             (self.runner_class, index, subsuite, self.failfast, self.buffer)\n@@ -508,6 +538,17 @@ def run(self, result):\n     def __iter__(self):\n         return iter(self.subsuites)\n \n+    def initialize_suite(self):\n+        if multiprocessing.get_start_method() == \"spawn\":\n+            self.initial_settings = {\n+                alias: connections[alias].settings_dict for alias in connections\n+            }\n+            self.serialized_contents = {\n+                alias: connections[alias]._test_serialized_contents\n+                for alias in connections\n+                if alias in self.serialized_aliases\n+            }\n+\n \n class Shuffler:\n     \"\"\"\n@@ -921,6 +962,8 @@ def run_checks(self, databases):\n     def run_suite(self, suite, **kwargs):\n         kwargs = self.get_test_runner_kwargs()\n         runner = self.test_runner(**kwargs)\n+        if hasattr(suite, \"initialize_suite\"):\n+            suite.initialize_suite()\n         try:\n             return runner.run(suite)\n         finally:\n@@ -989,13 +1032,13 @@ def run_tests(self, test_labels, extra_tests=None, **kwargs):\n         self.setup_test_environment()\n         suite = self.build_suite(test_labels, extra_tests)\n         databases = self.get_databases(suite)\n-        serialized_aliases = set(\n+        suite.serialized_aliases = set(\n             alias for alias, serialize in databases.items() if serialize\n         )\n         with self.time_keeper.timed(\"Total database setup\"):\n             old_config = self.setup_databases(\n                 aliases=databases,\n-                serialized_aliases=serialized_aliases,\n+                serialized_aliases=suite.serialized_aliases,\n             )\n         run_failed = False\n         try:\ndiff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -70,6 +70,8 @@ class SessionMiddlewareSubclass(SessionMiddleware):\n     ],\n )\n class SystemChecksTestCase(SimpleTestCase):\n+    databases = \"__all__\"\n+\n     def test_checks_are_performed(self):\n         admin.site.register(Song, MyAdmin)\n         try:\ndiff --git a/tests/backends/sqlite/test_creation.py b/tests/backends/sqlite/test_creation.py\n--- a/tests/backends/sqlite/test_creation.py\n+++ b/tests/backends/sqlite/test_creation.py\n@@ -1,7 +1,9 @@\n import copy\n+import multiprocessing\n import unittest\n+from unittest import mock\n \n-from django.db import DEFAULT_DB_ALIAS, connection, connections\n+from django.db import DEFAULT_DB_ALIAS, NotSupportedError, connection, connections\n from django.test import SimpleTestCase\n \n \n@@ -33,3 +35,9 @@ def test_get_test_db_clone_settings_name(self):\n                 creation_class = test_connection.creation_class(test_connection)\n                 clone_settings_dict = creation_class.get_test_db_clone_settings(\"1\")\n                 self.assertEqual(clone_settings_dict[\"NAME\"], expected_clone_name)\n+\n+    @mock.patch.object(multiprocessing, \"get_start_method\", return_value=\"forkserver\")\n+    def test_get_test_db_clone_settings_not_supported(self, *mocked_objects):\n+        msg = \"Cloning with start method 'forkserver' is not supported.\"\n+        with self.assertRaisesMessage(NotSupportedError, msg):\n+            connection.creation.get_test_db_clone_settings(1)\ndiff --git a/tests/check_framework/tests.py b/tests/check_framework/tests.py\n--- a/tests/check_framework/tests.py\n+++ b/tests/check_framework/tests.py\n@@ -362,5 +362,7 @@ class ModelWithDescriptorCalledCheck(models.Model):\n \n \n class ChecksRunDuringTests(SimpleTestCase):\n+    databases = \"__all__\"\n+\n     def test_registered_check_did_run(self):\n         self.assertTrue(my_check.did_run)\ndiff --git a/tests/contenttypes_tests/test_checks.py b/tests/contenttypes_tests/test_checks.py\n--- a/tests/contenttypes_tests/test_checks.py\n+++ b/tests/contenttypes_tests/test_checks.py\n@@ -11,6 +11,8 @@\n \n @isolate_apps(\"contenttypes_tests\", attr_name=\"apps\")\n class GenericForeignKeyTests(SimpleTestCase):\n+    databases = \"__all__\"\n+\n     def test_missing_content_type_field(self):\n         class TaggedItem(models.Model):\n             # no content_type field\ndiff --git a/tests/contenttypes_tests/test_management.py b/tests/contenttypes_tests/test_management.py\n--- a/tests/contenttypes_tests/test_management.py\n+++ b/tests/contenttypes_tests/test_management.py\n@@ -22,6 +22,13 @@ class RemoveStaleContentTypesTests(TestCase):\n \n     @classmethod\n     def setUpTestData(cls):\n+        with captured_stdout():\n+            call_command(\n+                \"remove_stale_contenttypes\",\n+                interactive=False,\n+                include_stale_apps=True,\n+                verbosity=2,\n+            )\n         cls.before_count = ContentType.objects.count()\n         cls.content_type = ContentType.objects.create(\n             app_label=\"contenttypes_tests\", model=\"Fake\"\ndiff --git a/tests/postgres_tests/test_bulk_update.py b/tests/postgres_tests/test_bulk_update.py\n--- a/tests/postgres_tests/test_bulk_update.py\n+++ b/tests/postgres_tests/test_bulk_update.py\n@@ -1,5 +1,7 @@\n from datetime import date\n \n+from django.test import modify_settings\n+\n from . import PostgreSQLTestCase\n from .models import (\n     HStoreModel,\n@@ -16,6 +18,7 @@\n     pass  # psycopg2 isn't installed.\n \n \n+@modify_settings(INSTALLED_APPS={\"append\": \"django.contrib.postgres\"})\n class BulkSaveTests(PostgreSQLTestCase):\n     def test_bulk_update(self):\n         test_data = [\ndiff --git a/tests/runtests.py b/tests/runtests.py\n--- a/tests/runtests.py\n+++ b/tests/runtests.py\n@@ -3,6 +3,7 @@\n import atexit\n import copy\n import gc\n+import multiprocessing\n import os\n import shutil\n import socket\n@@ -10,6 +11,7 @@\n import sys\n import tempfile\n import warnings\n+from functools import partial\n from pathlib import Path\n \n try:\n@@ -24,7 +26,7 @@\n     from django.core.exceptions import ImproperlyConfigured\n     from django.db import connection, connections\n     from django.test import TestCase, TransactionTestCase\n-    from django.test.runner import get_max_test_processes, parallel_type\n+    from django.test.runner import _init_worker, get_max_test_processes, parallel_type\n     from django.test.selenium import SeleniumTestCaseBase\n     from django.test.utils import NullTimeKeeper, TimeKeeper, get_runner\n     from django.utils.deprecation import RemovedInDjango50Warning\n@@ -382,7 +384,8 @@ def django_tests(\n             msg += \" with up to %d processes\" % max_parallel\n         print(msg)\n \n-    test_labels, state = setup_run_tests(verbosity, start_at, start_after, test_labels)\n+    process_setup_args = (verbosity, start_at, start_after, test_labels)\n+    test_labels, state = setup_run_tests(*process_setup_args)\n     # Run the test suite, including the extra validation tests.\n     if not hasattr(settings, \"TEST_RUNNER\"):\n         settings.TEST_RUNNER = \"django.test.runner.DiscoverRunner\"\n@@ -395,6 +398,11 @@ def django_tests(\n             parallel = 1\n \n     TestRunner = get_runner(settings)\n+    TestRunner.parallel_test_suite.init_worker = partial(\n+        _init_worker,\n+        process_setup=setup_run_tests,\n+        process_setup_args=process_setup_args,\n+    )\n     test_runner = TestRunner(\n         verbosity=verbosity,\n         interactive=interactive,\n@@ -718,6 +726,11 @@ def paired_tests(paired_test, options, test_labels, start_at, start_after):\n         options.settings = os.environ[\"DJANGO_SETTINGS_MODULE\"]\n \n     if options.selenium:\n+        if multiprocessing.get_start_method() == \"spawn\" and options.parallel != 1:\n+            parser.error(\n+                \"You cannot use --selenium with parallel tests on this system. \"\n+                \"Pass --parallel=1 to use --selenium.\"\n+            )\n         if not options.tags:\n             options.tags = [\"selenium\"]\n         elif \"selenium\" not in options.tags:\ndiff --git a/tests/test_runner/test_discover_runner.py b/tests/test_runner/test_discover_runner.py\n--- a/tests/test_runner/test_discover_runner.py\n+++ b/tests/test_runner/test_discover_runner.py\n@@ -86,6 +86,16 @@ def test_get_max_test_processes_spawn(\n         mocked_cpu_count,\n     ):\n         mocked_get_start_method.return_value = \"spawn\"\n+        self.assertEqual(get_max_test_processes(), 12)\n+        with mock.patch.dict(os.environ, {\"DJANGO_TEST_PROCESSES\": \"7\"}):\n+            self.assertEqual(get_max_test_processes(), 7)\n+\n+    def test_get_max_test_processes_forkserver(\n+        self,\n+        mocked_get_start_method,\n+        mocked_cpu_count,\n+    ):\n+        mocked_get_start_method.return_value = \"forkserver\"\n         self.assertEqual(get_max_test_processes(), 1)\n         with mock.patch.dict(os.environ, {\"DJANGO_TEST_PROCESSES\": \"7\"}):\n             self.assertEqual(get_max_test_processes(), 1)\ndiff --git a/tests/test_runner/tests.py b/tests/test_runner/tests.py\n--- a/tests/test_runner/tests.py\n+++ b/tests/test_runner/tests.py\n@@ -480,8 +480,6 @@ def test_time_recorded(self):\n # Isolate from the real environment.\n @mock.patch.dict(os.environ, {}, clear=True)\n @mock.patch.object(multiprocessing, \"cpu_count\", return_value=12)\n-# Python 3.8 on macOS defaults to 'spawn' mode.\n-@mock.patch.object(multiprocessing, \"get_start_method\", return_value=\"fork\")\n class ManageCommandParallelTests(SimpleTestCase):\n     def test_parallel_default(self, *mocked_objects):\n         with captured_stderr() as stderr:\n@@ -507,8 +505,8 @@ def test_no_parallel(self, *mocked_objects):\n         # Parallel is disabled by default.\n         self.assertEqual(stderr.getvalue(), \"\")\n \n-    def test_parallel_spawn(self, mocked_get_start_method, mocked_cpu_count):\n-        mocked_get_start_method.return_value = \"spawn\"\n+    @mock.patch.object(multiprocessing, \"get_start_method\", return_value=\"spawn\")\n+    def test_parallel_spawn(self, *mocked_objects):\n         with captured_stderr() as stderr:\n             call_command(\n                 \"test\",\n@@ -517,8 +515,8 @@ def test_parallel_spawn(self, mocked_get_start_method, mocked_cpu_count):\n             )\n         self.assertIn(\"parallel=1\", stderr.getvalue())\n \n-    def test_no_parallel_spawn(self, mocked_get_start_method, mocked_cpu_count):\n-        mocked_get_start_method.return_value = \"spawn\"\n+    @mock.patch.object(multiprocessing, \"get_start_method\", return_value=\"spawn\")\n+    def test_no_parallel_spawn(self, *mocked_objects):\n         with captured_stderr() as stderr:\n             call_command(\n                 \"test\",\n",
  "problem_statement": "Allow parallel test runner to work with Windows/macOS `spawn` process start method.\nDescription\n\t \n\t\t(last modified by Brandon Navra)\n\t \nPython 3.8 on MacOS has changed the default start method for the multiprocessing module from fork to spawn: ​https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods.\nWhen running tests with the --parallel flag, this causes the worker processes to fail with django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet. as they no longer have a copy of the parent memory state. It can also cause the workers to fail to find the cloned dbs ( {{django.db.utils.OperationalError: FATAL: database \"xxx_1\" does not exist}} ) as the db test prefix is missing.\nI have attached a patch which changes django.test.runner._init_worker (the worker initialiser for ParallelTestSuite) to run django.setup() and set the db name to one with the test_ prefix.\n",
  "hints_text": "spawn() is also a default method on Windows, and we don't encounter any issues with it 🤔.\nI'm still trying to research the exact root cause. The Python issue which triggered this change has snippets of info: https://code.djangoproject.com/ticket/31169 but nothing conclusive. My theory is that the memory copying semantics between MacOS and Windows are different and hence the spawn method doesn't have identical behaviour between the two.\nAhhh, sorry we don't use parallel on Windows.\nParallel running is disabled on Windows: ​https://github.com/django/django/blob/59b4e99dd00b9c36d56055b889f96885995e4240/django/test/runner.py#L286-L295 def default_test_processes(): \"\"\"Default number of test processes when using the --parallel option.\"\"\" # The current implementation of the parallel test runner requires # multiprocessing to start subprocesses with fork(). if multiprocessing.get_start_method() != 'fork': return 1 try: return int(os.environ['DJANGO_TEST_PROCESSES']) except KeyError: return multiprocessing.cpu_count() I'll accept this as a new feature: the limitation has been there since it was implemented. Brandon, your patch is tiny. Is it really that simple? We'd need tests and a few other adjustments (like to the function above) but, fancy opening a PR?\nSo this occurs on macOS 10.15. (I have 10.14 currently so can't experiment there.) Applying the patch on Windows, alas, doesn't immediately solve the issue, but it is INSTALLED_APPS/AppRegistry errors that are raised, so it's going to be in the right ball-park. More investigating needed, but this would be a good one to land.\nI created a PR with the changes from my patch: ​https://github.com/django/django/pull/12321 FYI\" I am on macOS 10.14.6 I'm not sure how best to adjust default_test_processes as i've always used the --parallel flag with a parameter. Also, could you provide some guidance on how you'd like this tested\nFYI\" I am on macOS 10.14.6 Super. I had a 3.7. env active. I can reproduce with Python 3.8.\n​PR\nThanks for the report. I had the same issue but did not find the root cause in https://code.djangoproject.com/ticket/31116. I would love to see that being resolved.\nI ran into this while running the Django test suite, and when applying the patch in ​PR 12321, I get the same problem with a different exception: Traceback (most recent call last): File \"/Users/inglesp/.pyenv/versions/3.8.0/lib/python3.8/multiprocessing/process.py\", line 313, in _bootstrap self.run() File \"/Users/inglesp/.pyenv/versions/3.8.0/lib/python3.8/multiprocessing/process.py\", line 108, in run self._target(*self._args, **self._kwargs) File \"/Users/inglesp/.pyenv/versions/3.8.0/lib/python3.8/multiprocessing/pool.py\", line 114, in worker task = get() File \"/Users/inglesp/.pyenv/versions/3.8.0/lib/python3.8/multiprocessing/queues.py\", line 358, in get return _ForkingPickler.loads(res) File \"/Users/inglesp/src/django/django/tests/fixtures_regress/tests.py\", line 18, in <module> from .models import ( File \"/Users/inglesp/src/django/django/tests/fixtures_regress/models.py\", line 1, in <module> from django.contrib.auth.models import User File \"/Users/inglesp/src/django/django/django/contrib/auth/models.py\", line 3, in <module> from django.contrib.contenttypes.models import ContentType File \"/Users/inglesp/src/django/django/django/contrib/contenttypes/models.py\", line 133, in <module> class ContentType(models.Model): File \"/Users/inglesp/src/django/django/django/db/models/base.py\", line 113, in __new__ raise RuntimeError( RuntimeError: Model class django.contrib.contenttypes.models.ContentType doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS. I'm on OSX 10.15 with Python 3.8.\nAn attempt at a fix: ​https://github.com/django/django/pull/12547\nFor those looking for a workaround, here's how to add the appropriate call to reset back to fork mode: ​https://adamj.eu/tech/2020/07/21/how-to-use-djangos-parallel-testing-on-macos-with-python-3.8-plus/\nPR is working nicely on macOS but needs a rebase, and a refactoring for review comments.",
  "created_at": "2022-02-13T10:23:00Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_get_test_db_clone_settings_not_supported (backends.sqlite.test_creation.TestDbSignatureTests)\"]",
  "PASS_TO_PASS": "[\"test_custom_test_name (backends.sqlite.test_creation.TestDbSignatureTests)\", \"test_get_test_db_clone_settings_name (backends.sqlite.test_creation.TestDbSignatureTests)\", \"test_register_and_run_checks (check_framework.tests.SystemCheckFrameworkTests)\", \"test_register_no_kwargs_error (check_framework.tests.SystemCheckFrameworkTests)\", \"test_register_run_checks_non_iterable (check_framework.tests.SystemCheckFrameworkTests)\", \"test_registered_check_did_run (check_framework.tests.ChecksRunDuringTests)\", \"test_model_check_method_not_shadowed (check_framework.tests.CheckFrameworkReservedNamesTests)\", \"test_fail_level (check_framework.tests.CheckCommandTests)\", \"test_given_app (check_framework.tests.CheckCommandTests)\", \"test_given_tag (check_framework.tests.CheckCommandTests)\", \"test_invalid_tag (check_framework.tests.CheckCommandTests)\", \"test_list_deployment_check_included (check_framework.tests.CheckCommandTests)\", \"test_list_deployment_check_omitted (check_framework.tests.CheckCommandTests)\", \"test_list_tags (check_framework.tests.CheckCommandTests)\", \"test_list_tags_empty (check_framework.tests.CheckCommandTests)\", \"test_simple_call (check_framework.tests.CheckCommandTests)\", \"test_tags_deployment_check_included (check_framework.tests.CheckCommandTests)\", \"test_tags_deployment_check_omitted (check_framework.tests.CheckCommandTests)\", \"test_equal_to_same_constructed_check (check_framework.tests.MessageTests)\", \"test_equal_to_self (check_framework.tests.MessageTests)\", \"test_invalid_level (check_framework.tests.MessageTests)\", \"test_not_equal_to_different_constructed_check (check_framework.tests.MessageTests)\", \"test_not_equal_to_non_check (check_framework.tests.MessageTests)\", \"test_printing (check_framework.tests.MessageTests)\", \"test_printing_field_error (check_framework.tests.MessageTests)\", \"test_printing_manager_error (check_framework.tests.MessageTests)\", \"test_printing_model_error (check_framework.tests.MessageTests)\", \"test_printing_no_hint (check_framework.tests.MessageTests)\", \"test_printing_no_object (check_framework.tests.MessageTests)\", \"test_printing_with_given_id (check_framework.tests.MessageTests)\", \"test_model_name_max_length (contenttypes_tests.test_checks.ModelCheckTests)\", \"test_model_name_too_long (contenttypes_tests.test_checks.ModelCheckTests)\", \"test_silenced_error (check_framework.tests.SilencingCheckTests)\", \"test_silenced_warning (check_framework.tests.SilencingCheckTests)\", \"test_field_name_ending_with_underscore (contenttypes_tests.test_checks.GenericRelationTests)\", \"test_missing_generic_foreign_key (contenttypes_tests.test_checks.GenericRelationTests)\", \"test_pointing_to_missing_model (contenttypes_tests.test_checks.GenericRelationTests)\", \"test_pointing_to_swapped_model (contenttypes_tests.test_checks.GenericRelationTests)\", \"test_valid_generic_relationship (contenttypes_tests.test_checks.GenericRelationTests)\", \"test_valid_generic_relationship_with_explicit_fields (contenttypes_tests.test_checks.GenericRelationTests)\", \"test_valid_self_referential_generic_relationship (contenttypes_tests.test_checks.GenericRelationTests)\", \"test_get_max_test_processes (test_runner.test_discover_runner.DiscoverRunnerParallelArgumentTests)\", \"test_get_max_test_processes_env_var (test_runner.test_discover_runner.DiscoverRunnerParallelArgumentTests)\", \"test_get_max_test_processes_forkserver (test_runner.test_discover_runner.DiscoverRunnerParallelArgumentTests)\", \"test_get_max_test_processes_spawn (test_runner.test_discover_runner.DiscoverRunnerParallelArgumentTests)\", \"test_parallel_auto (test_runner.test_discover_runner.DiscoverRunnerParallelArgumentTests)\", \"test_parallel_count (test_runner.test_discover_runner.DiscoverRunnerParallelArgumentTests)\", \"test_parallel_default (test_runner.test_discover_runner.DiscoverRunnerParallelArgumentTests)\", \"test_parallel_flag (test_runner.test_discover_runner.DiscoverRunnerParallelArgumentTests)\", \"test_parallel_invalid (test_runner.test_discover_runner.DiscoverRunnerParallelArgumentTests)\", \"test_content_type_field_pointing_to_wrong_model (contenttypes_tests.test_checks.GenericForeignKeyTests)\", \"test_field_name_ending_with_underscore (contenttypes_tests.test_checks.GenericForeignKeyTests)\", \"test_generic_foreign_key_checks_are_performed (contenttypes_tests.test_checks.GenericForeignKeyTests)\", \"test_invalid_content_type_field (contenttypes_tests.test_checks.GenericForeignKeyTests)\", \"test_missing_content_type_field (contenttypes_tests.test_checks.GenericForeignKeyTests)\", \"test_missing_object_id_field (contenttypes_tests.test_checks.GenericForeignKeyTests)\", \"test_chained_dependencies (test_runner.tests.DependencyOrderingTests)\", \"test_circular_dependencies (test_runner.tests.DependencyOrderingTests)\", \"test_multiple_dependencies (test_runner.tests.DependencyOrderingTests)\", \"test_own_alias_dependency (test_runner.tests.DependencyOrderingTests)\", \"test_simple_dependencies (test_runner.tests.DependencyOrderingTests)\", \"test_iter_test_cases_basic (test_runner.tests.TestSuiteTests)\", \"test_iter_test_cases_custom_test_suite_class (test_runner.tests.TestSuiteTests)\", \"test_iter_test_cases_iterable_of_tests (test_runner.tests.TestSuiteTests)\", \"test_iter_test_cases_mixed_test_suite_classes (test_runner.tests.TestSuiteTests)\", \"test_iter_test_cases_string_input (test_runner.tests.TestSuiteTests)\", \"test_reorder_test_bin_no_arguments (test_runner.tests.TestSuiteTests)\", \"test_reorder_test_bin_random (test_runner.tests.TestSuiteTests)\", \"test_reorder_test_bin_random_and_reverse (test_runner.tests.TestSuiteTests)\", \"test_reorder_test_bin_reverse (test_runner.tests.TestSuiteTests)\", \"test_reorder_tests_random (test_runner.tests.TestSuiteTests)\", \"test_reorder_tests_random_mixed_classes (test_runner.tests.TestSuiteTests)\", \"test_reorder_tests_reverse_with_duplicates (test_runner.tests.TestSuiteTests)\", \"Tests of the same type are made consecutive.\", \"test_shuffle_tests (test_runner.tests.TestSuiteTests)\", \"test_all (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_default_and_other (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_default_only (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_mixed (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_no_databases_required (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_other_only (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_serialize (test_runner.test_discover_runner.DiscoverRunnerGetDatabasesTests)\", \"test_bad_test_runner (test_runner.tests.ManageCommandTests)\", \"test_custom_test_runner (test_runner.tests.ManageCommandTests)\", \"test_time_recorded (test_runner.tests.ManageCommandTests)\", \"test_autoincrement_reset1 (test_runner.tests.AutoIncrementResetTest)\", \"test_autoincrement_reset2 (test_runner.tests.AutoIncrementResetTest)\", \"setup_databases() doesn't fail with dummy database backend.\", \"An empty default database in settings does not raise an ImproperlyConfigured\", \"setup_databases() doesn't fail when 'default' is aliased\", \"test_django_test_processes_env_non_int (test_runner.tests.ManageCommandParallelTests)\", \"test_django_test_processes_parallel_default (test_runner.tests.ManageCommandParallelTests)\", \"test_no_parallel (test_runner.tests.ManageCommandParallelTests)\", \"test_no_parallel_django_test_processes_env (test_runner.tests.ManageCommandParallelTests)\", \"test_no_parallel_spawn (test_runner.tests.ManageCommandParallelTests)\", \"test_parallel_auto (test_runner.tests.ManageCommandParallelTests)\", \"test_parallel_default (test_runner.tests.ManageCommandParallelTests)\", \"test_parallel_spawn (test_runner.tests.ManageCommandParallelTests)\", \"Exceptions on teardown are surfaced if no exceptions happen during\", \"Teardown functions are run when run_checks() raises SystemCheckError.\", \"SystemCheckError is surfaced when run_checks() raises SystemCheckError\", \"test_destroy_test_db_restores_db_name (test_runner.tests.SetupDatabasesTests)\", \"test_serialization (test_runner.tests.SetupDatabasesTests)\", \"test_serialized_off (test_runner.tests.SetupDatabasesTests)\", \"test_setup_aliased_databases (test_runner.tests.SetupDatabasesTests)\", \"The default database must be the first because data migrations\", \"test_admin_check_ignores_import_error_in_middleware (admin_checks.tests.SystemChecksTestCase)\", \"test_allows_checks_relying_on_other_modeladmins (admin_checks.tests.SystemChecksTestCase)\", \"test_app_label_in_admin_checks (admin_checks.tests.SystemChecksTestCase)\", \"test_apps_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_cannot_include_through (admin_checks.tests.SystemChecksTestCase)\", \"test_check_fieldset_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase)\", \"test_check_sublists_for_duplicates (admin_checks.tests.SystemChecksTestCase)\", \"test_checks_are_performed (admin_checks.tests.SystemChecksTestCase)\", \"test_context_processor_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_context_processor_dependencies_model_backend_subclass (admin_checks.tests.SystemChecksTestCase)\", \"test_custom_adminsite (admin_checks.tests.SystemChecksTestCase)\", \"The fieldsets checks are skipped when the ModelAdmin.get_form() method\", \"# Regression test for #8027: custom ModelForms with fields/fieldsets\", \"test_editable (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_duplicate_values (admin_checks.tests.SystemChecksTestCase)\", \"test_exclude_in_inline (admin_checks.tests.SystemChecksTestCase)\", \"Regression test for #9932 - exclude in InlineModelAdmin should not\", \"Tests for basic system checks of 'exclude' option values (#12689)\", \"Regression test for #12209 -- If the explicitly provided through model\", \"test_extra (admin_checks.tests.SystemChecksTestCase)\", \"test_field_name_not_in_list_display (admin_checks.tests.SystemChecksTestCase)\", \"The first fieldset's fields must be a list/tuple.\", \"Regression test for #11709 - when testing for fk excluding (when exclude is\", \"A GenericInlineModelAdmin errors if the ct_field points to a\", \"A GenericInlineModelAdmin errors if the ct_fk_field points to a\", \"A model without a GenericForeignKey raises problems if it's included\", \"A GenericInlineModelAdmin raises problems if the ct_field points to a\", \"A GenericInlineModelAdmin raises problems if the ct_fk_field points to\", \"Regression test for #12203/#12237 - Fail more gracefully when a M2M field that\", \"test_inline_self_check (admin_checks.tests.SystemChecksTestCase)\", \"test_inline_with_specified (admin_checks.tests.SystemChecksTestCase)\", \"test_inlines_property (admin_checks.tests.SystemChecksTestCase)\", \"test_list_editable_missing_field (admin_checks.tests.SystemChecksTestCase)\", \"test_list_editable_not_a_list_or_tuple (admin_checks.tests.SystemChecksTestCase)\", \"Ensure list_filter can access reverse fields even when the app registry\", \"test_middleware_dependencies (admin_checks.tests.SystemChecksTestCase)\", \"test_middleware_subclasses (admin_checks.tests.SystemChecksTestCase)\", \"test_nested_fields (admin_checks.tests.SystemChecksTestCase)\", \"test_nested_fieldsets (admin_checks.tests.SystemChecksTestCase)\", \"test_no_template_engines (admin_checks.tests.SystemChecksTestCase)\", \"Regression for ensuring ModelAdmin.fields can contain non-model fields\", \"Regression for ensuring ModelAdmin.field can handle first elem being a\", \"test_nonexistent_field (admin_checks.tests.SystemChecksTestCase)\", \"test_nonexistent_field_on_inline (admin_checks.tests.SystemChecksTestCase)\", \"The second fieldset's fields must be a list/tuple.\", \"test_readonly (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_and_editable (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_dynamic_attribute_on_modeladmin (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_fields_not_list_or_tuple (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_lambda (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_method_on_model (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_on_method (admin_checks.tests.SystemChecksTestCase)\", \"test_readonly_on_modeladmin (admin_checks.tests.SystemChecksTestCase)\", \"test_several_templates_backends (admin_checks.tests.SystemChecksTestCase)\", \"Regression test for #22034 - check that generic inlines don't look for\", \"test_contenttypes_removed_for_apps_not_in_installed_apps (contenttypes_tests.test_management.RemoveStaleContentTypesTests)\", \"test_contenttypes_removed_in_installed_apps_without_models (contenttypes_tests.test_management.RemoveStaleContentTypesTests)\", \"non-interactive mode deletes stale content types.\", \"interactive mode (the default) deletes stale content types and warns of\", \"interactive mode deletes stale content types even if there aren't any\", \"A ContentType isn't created if the model isn't available.\", \"test_transaction_support (test_runner.tests.SQLiteInMemoryTestDbs)\", \"'manage.py help test' works after r16352.\", \"test_add_arguments_debug_mode (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_add_arguments_shuffle (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_buffer_mode_test_fail (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_buffer_mode_test_pass (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_build_suite_failed_tests_first (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_build_suite_shuffling (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_discovery_on_package (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_dotted_test_class_django_testcase (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_dotted_test_class_vanilla_unittest (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_dotted_test_method_django_testcase (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_dotted_test_module (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"Tests shouldn't be discovered twice when discovering on overlapping paths.\", \"If the test label is empty, discovery should happen on the current\", \"test_empty_test_case (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_exclude_tags (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_excluded_tags_displayed (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_faulthandler_already_enabled (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_faulthandler_disabled (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_faulthandler_enabled (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_faulthandler_enabled_fileno (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_file_path (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"When given a dotted path to a module, unittest discovery searches\", \"test_included_tags_displayed (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_init_debug_mode (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_load_tests_for_label_file_path (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_loader_patterns_not_mutated (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_loader_patterns_not_mutated_when_test_label_is_file_path (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_log (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_log_logger (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_name_patterns (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"Number of databases doesn't exceed the number of TestCases with\", \"Number of processes doesn't exceed the number of TestCases.\", \"test_number_of_tests_found_displayed (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_overridable_get_test_runner_kwargs (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_overridable_test_loader (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_overridable_test_runner (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_overridable_test_suite (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_pattern (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_pdb_with_parallel (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"Reverse should reorder tests while maintaining the grouping specified\", \"test_run_suite_logs_seed (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"run_suite() logs the seed when TestRunner.run() raises an exception.\", \"test_setup_shuffler_no_shuffle_argument (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_setup_shuffler_shuffle_int (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_setup_shuffler_shuffle_none (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_suite_result_with_failure (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_tag_fail_to_load (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_tag_inheritance (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_tags (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_testcase_ordering (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_timings_captured (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_timings_not_captured (test_runner.test_discover_runner.DiscoverRunnerTests)\", \"test_extra_tests_build_suite (test_runner.tests.DiscoverRunnerExtraTestsDeprecationTests)\", \"test_extra_tests_run_tests (test_runner.tests.DiscoverRunnerExtraTestsDeprecationTests)\", \"test_no_testrunner (test_runner.tests.CustomTestRunnerOptionsCmdlineTests)\", \"test_testrunner_equals (test_runner.tests.CustomTestRunnerOptionsCmdlineTests)\", \"test_testrunner_option (test_runner.tests.CustomTestRunnerOptionsCmdlineTests)\", \"test_all_options_given (test_runner.tests.CustomTestRunnerOptionsSettingsTests)\", \"test_default_and_given_options (test_runner.tests.CustomTestRunnerOptionsSettingsTests)\", \"test_default_options (test_runner.tests.CustomTestRunnerOptionsSettingsTests)\", \"test_option_name_and_value_separated (test_runner.tests.CustomTestRunnerOptionsSettingsTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.728894",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}