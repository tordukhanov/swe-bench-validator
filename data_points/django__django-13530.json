{
  "repo": "django/django",
  "instance_id": "django__django-13530",
  "base_commit": "ac6c4260074de43a978e5c6553ef89441e1d6748",
  "patch": "diff --git a/django/contrib/postgres/aggregates/mixins.py b/django/contrib/postgres/aggregates/mixins.py\n--- a/django/contrib/postgres/aggregates/mixins.py\n+++ b/django/contrib/postgres/aggregates/mixins.py\n@@ -24,7 +24,7 @@ def as_sql(self, compiler, connection):\n             ordering_params = []\n             ordering_expr_sql = []\n             for expr in self.ordering:\n-                expr_sql, expr_params = expr.as_sql(compiler, connection)\n+                expr_sql, expr_params = compiler.compile(expr)\n                 ordering_expr_sql.append(expr_sql)\n                 ordering_params.extend(expr_params)\n             sql, sql_params = super().as_sql(compiler, connection, ordering=(\ndiff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py\n--- a/django/contrib/postgres/constraints.py\n+++ b/django/contrib/postgres/constraints.py\n@@ -72,7 +72,7 @@ def _get_expression_sql(self, compiler, schema_editor, query):\n             if isinstance(expression, str):\n                 expression = F(expression)\n             expression = expression.resolve_expression(query=query)\n-            sql, params = expression.as_sql(compiler, schema_editor.connection)\n+            sql, params = compiler.compile(expression)\n             try:\n                 opclass = self.opclasses[idx]\n                 if opclass:\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -920,7 +920,7 @@ def get_group_by_cols(self, alias=None):\n         return expression.get_group_by_cols(alias=alias)\n \n     def as_sql(self, compiler, connection):\n-        return self.expression.as_sql(compiler, connection)\n+        return compiler.compile(self.expression)\n \n     def __repr__(self):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\ndiff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -369,27 +369,26 @@ def as_sqlite(self, compiler, connection):\n \n \n class KeyTransformIn(lookups.In):\n-    def process_rhs(self, compiler, connection):\n-        rhs, rhs_params = super().process_rhs(compiler, connection)\n-        if not connection.features.has_native_json_field:\n-            func = ()\n+    def resolve_expression_parameter(self, compiler, connection, sql, param):\n+        sql, params = super().resolve_expression_parameter(\n+            compiler, connection, sql, param,\n+        )\n+        if (\n+            not hasattr(param, 'as_sql') and\n+            not connection.features.has_native_json_field\n+        ):\n             if connection.vendor == 'oracle':\n-                func = []\n-                for value in rhs_params:\n-                    value = json.loads(value)\n-                    function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n-                    func.append(\"%s('%s', '$.value')\" % (\n-                        function,\n-                        json.dumps({'value': value}),\n-                    ))\n-                func = tuple(func)\n-                rhs_params = ()\n-            elif connection.vendor == 'mysql' and connection.mysql_is_mariadb:\n-                func = (\"JSON_UNQUOTE(JSON_EXTRACT(%s, '$'))\",) * len(rhs_params)\n+                value = json.loads(param)\n+                if isinstance(value, (list, dict)):\n+                    sql = \"JSON_QUERY(%s, '$.value')\"\n+                else:\n+                    sql = \"JSON_VALUE(%s, '$.value')\"\n+                params = (json.dumps({'value': value}),)\n             elif connection.vendor in {'sqlite', 'mysql'}:\n-                func = (\"JSON_EXTRACT(%s, '$')\",) * len(rhs_params)\n-            rhs = rhs % func\n-        return rhs, rhs_params\n+                sql = \"JSON_EXTRACT(%s, '$')\"\n+        if connection.vendor == 'mysql' and connection.mysql_is_mariadb:\n+            sql = 'JSON_UNQUOTE(%s)' % sql\n+        return sql, params\n \n \n class KeyTransformExact(JSONExact):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -241,7 +241,7 @@ def resolve_expression_parameter(self, compiler, connection, sql, param):\n         if hasattr(param, 'resolve_expression'):\n             param = param.resolve_expression(compiler.query)\n         if hasattr(param, 'as_sql'):\n-            sql, params = param.as_sql(compiler, connection)\n+            sql, params = compiler.compile(param)\n         return sql, params\n \n     def batch_process_rhs(self, compiler, connection, rhs=None):\n",
  "test_patch": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -13,3 +13,10 @@ class Employee(models.Model):\n     age = models.IntegerField(blank=False, null=False)\n     classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n     bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n+\n+\n+class Detail(models.Model):\n+    value = models.JSONField()\n+\n+    class Meta:\n+        required_db_features = {'supports_json_field'}\ndiff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -5,16 +5,17 @@\n from django.core.exceptions import FieldError\n from django.db import NotSupportedError, connection\n from django.db.models import (\n-    Avg, BooleanField, Case, F, Func, Max, Min, OuterRef, Q, RowRange,\n-    Subquery, Sum, Value, ValueRange, When, Window, WindowFrame,\n+    Avg, BooleanField, Case, F, Func, IntegerField, Max, Min, OuterRef, Q,\n+    RowRange, Subquery, Sum, Value, ValueRange, When, Window, WindowFrame,\n )\n+from django.db.models.fields.json import KeyTextTransform, KeyTransform\n from django.db.models.functions import (\n-    CumeDist, DenseRank, ExtractYear, FirstValue, Lag, LastValue, Lead,\n+    Cast, CumeDist, DenseRank, ExtractYear, FirstValue, Lag, LastValue, Lead,\n     NthValue, Ntile, PercentRank, Rank, RowNumber, Upper,\n )\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n-from .models import Employee\n+from .models import Detail, Employee\n \n \n @skipUnlessDBFeature('supports_over_clause')\n@@ -743,6 +744,36 @@ def test_window_expression_within_subquery(self):\n             {'department': 'Management', 'salary': 100000}\n         ])\n \n+    @skipUnlessDBFeature('supports_json_field')\n+    def test_key_transform(self):\n+        Detail.objects.bulk_create([\n+            Detail(value={'department': 'IT', 'name': 'Smith', 'salary': 37000}),\n+            Detail(value={'department': 'IT', 'name': 'Nowak', 'salary': 32000}),\n+            Detail(value={'department': 'HR', 'name': 'Brown', 'salary': 50000}),\n+            Detail(value={'department': 'HR', 'name': 'Smith', 'salary': 55000}),\n+            Detail(value={'department': 'PR', 'name': 'Moore', 'salary': 90000}),\n+        ])\n+        qs = Detail.objects.annotate(department_sum=Window(\n+            expression=Sum(Cast(\n+                KeyTextTransform('salary', 'value'),\n+                output_field=IntegerField(),\n+            )),\n+            partition_by=[KeyTransform('department', 'value')],\n+            order_by=[KeyTransform('name', 'value')],\n+        )).order_by('value__department', 'department_sum')\n+        self.assertQuerysetEqual(qs, [\n+            ('Brown', 'HR', 50000, 50000),\n+            ('Smith', 'HR', 55000, 105000),\n+            ('Nowak', 'IT', 32000, 32000),\n+            ('Smith', 'IT', 37000, 69000),\n+            ('Moore', 'PR', 90000, 90000),\n+        ], lambda entry: (\n+            entry.value['name'],\n+            entry.value['department'],\n+            entry.value['salary'],\n+            entry.department_sum,\n+        ))\n+\n     def test_invalid_start_value_range(self):\n         msg = \"start argument must be a negative integer, zero, or None, but got '3'.\"\n         with self.assertRaisesMessage(ValueError, msg):\ndiff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -10,7 +10,10 @@\n     DataError, IntegrityError, NotSupportedError, OperationalError, connection,\n     models,\n )\n-from django.db.models import Count, F, OuterRef, Q, Subquery, Transform, Value\n+from django.db.models import (\n+    Count, ExpressionWrapper, F, IntegerField, OuterRef, Q, Subquery,\n+    Transform, Value,\n+)\n from django.db.models.expressions import RawSQL\n from django.db.models.fields.json import (\n     KeyTextTransform, KeyTransform, KeyTransformFactory,\n@@ -405,6 +408,17 @@ def test_nested_key_transform_expression(self):\n             [self.objs[4]],\n         )\n \n+    def test_expression_wrapper_key_transform(self):\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.annotate(\n+                expr=ExpressionWrapper(\n+                    KeyTransform('c', 'value'),\n+                    output_field=IntegerField(),\n+                ),\n+            ).filter(expr__isnull=False),\n+            self.objs[3:5],\n+        )\n+\n     def test_has_key(self):\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__has_key='a'),\n@@ -700,6 +714,16 @@ def test_key_in(self):\n             ('value__0__in', [1], [self.objs[5]]),\n             ('value__0__in', [1, 3], [self.objs[5]]),\n             ('value__foo__in', ['bar'], [self.objs[7]]),\n+            (\n+                'value__foo__in',\n+                [KeyTransform('foo', KeyTransform('bax', 'value'))],\n+                [self.objs[7]],\n+            ),\n+            (\n+                'value__foo__in',\n+                [KeyTransform('foo', KeyTransform('bax', 'value')), 'baz'],\n+                [self.objs[7]],\n+            ),\n             ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),\n             ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),\n             ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),\ndiff --git a/tests/postgres_tests/migrations/0002_create_test_models.py b/tests/postgres_tests/migrations/0002_create_test_models.py\n--- a/tests/postgres_tests/migrations/0002_create_test_models.py\n+++ b/tests/postgres_tests/migrations/0002_create_test_models.py\n@@ -202,7 +202,11 @@ class Migration(migrations.Migration):\n                 ('boolean_field', models.BooleanField(null=True)),\n                 ('char_field', models.CharField(max_length=30, blank=True)),\n                 ('integer_field', models.IntegerField(null=True)),\n-            ]\n+                ('json_field', models.JSONField(null=True)),\n+            ],\n+            options={\n+                'required_db_vendor': 'postgresql',\n+            },\n         ),\n         migrations.CreateModel(\n             name='StatTestModel',\n@@ -215,7 +219,10 @@ class Migration(migrations.Migration):\n                     models.SET_NULL,\n                     null=True,\n                 )),\n-            ]\n+            ],\n+            options={\n+                'required_db_vendor': 'postgresql',\n+            },\n         ),\n         migrations.CreateModel(\n             name='NowTestModel',\n@@ -296,6 +303,7 @@ class Migration(migrations.Migration):\n                 ('start', models.DateTimeField()),\n                 ('end', models.DateTimeField()),\n                 ('cancelled', models.BooleanField(default=False)),\n+                ('requirements', models.JSONField(blank=True, null=True)),\n             ],\n             options={\n                 'required_db_vendor': 'postgresql',\ndiff --git a/tests/postgres_tests/models.py b/tests/postgres_tests/models.py\n--- a/tests/postgres_tests/models.py\n+++ b/tests/postgres_tests/models.py\n@@ -154,16 +154,17 @@ def __init__(self, *args, **kwargs):\n         super().__init__(models.IntegerField())\n \n \n-class AggregateTestModel(models.Model):\n+class AggregateTestModel(PostgreSQLModel):\n     \"\"\"\n     To test postgres-specific general aggregation functions\n     \"\"\"\n     char_field = models.CharField(max_length=30, blank=True)\n     integer_field = models.IntegerField(null=True)\n     boolean_field = models.BooleanField(null=True)\n+    json_field = models.JSONField(null=True)\n \n \n-class StatTestModel(models.Model):\n+class StatTestModel(PostgreSQLModel):\n     \"\"\"\n     To test postgres-specific aggregation functions for statistics\n     \"\"\"\n@@ -190,3 +191,4 @@ class HotelReservation(PostgreSQLModel):\n     start = models.DateTimeField()\n     end = models.DateTimeField()\n     cancelled = models.BooleanField(default=False)\n+    requirements = models.JSONField(blank=True, null=True)\ndiff --git a/tests/postgres_tests/test_aggregates.py b/tests/postgres_tests/test_aggregates.py\n--- a/tests/postgres_tests/test_aggregates.py\n+++ b/tests/postgres_tests/test_aggregates.py\n@@ -1,6 +1,7 @@\n import json\n \n from django.db.models import CharField, F, OuterRef, Q, Subquery, Value\n+from django.db.models.fields.json import KeyTextTransform, KeyTransform\n from django.db.models.functions import Cast, Concat, Substr\n from django.test.utils import Approximate\n \n@@ -20,10 +21,27 @@\n class TestGeneralAggregate(PostgreSQLTestCase):\n     @classmethod\n     def setUpTestData(cls):\n-        cls.agg1 = AggregateTestModel.objects.create(boolean_field=True, char_field='Foo1', integer_field=0)\n-        AggregateTestModel.objects.create(boolean_field=False, char_field='Foo2', integer_field=1)\n-        AggregateTestModel.objects.create(boolean_field=False, char_field='Foo4', integer_field=2)\n-        AggregateTestModel.objects.create(boolean_field=True, char_field='Foo3', integer_field=0)\n+        cls.aggs = AggregateTestModel.objects.bulk_create([\n+            AggregateTestModel(boolean_field=True, char_field='Foo1', integer_field=0),\n+            AggregateTestModel(\n+                boolean_field=False,\n+                char_field='Foo2',\n+                integer_field=1,\n+                json_field={'lang': 'pl'},\n+            ),\n+            AggregateTestModel(\n+                boolean_field=False,\n+                char_field='Foo4',\n+                integer_field=2,\n+                json_field={'lang': 'en'},\n+            ),\n+            AggregateTestModel(\n+                boolean_field=True,\n+                char_field='Foo3',\n+                integer_field=0,\n+                json_field={'breed': 'collie'},\n+            ),\n+        ])\n \n     def test_array_agg_charfield(self):\n         values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field'))\n@@ -79,6 +97,25 @@ def test_array_agg_booleanfield_ordering(self):\n                 )\n                 self.assertEqual(values, {'arrayagg': expected_output})\n \n+    def test_array_agg_jsonfield(self):\n+        values = AggregateTestModel.objects.aggregate(\n+            arrayagg=ArrayAgg(\n+                KeyTransform('lang', 'json_field'),\n+                filter=Q(json_field__lang__isnull=False),\n+            ),\n+        )\n+        self.assertEqual(values, {'arrayagg': ['pl', 'en']})\n+\n+    def test_array_agg_jsonfield_ordering(self):\n+        values = AggregateTestModel.objects.aggregate(\n+            arrayagg=ArrayAgg(\n+                KeyTransform('lang', 'json_field'),\n+                filter=Q(json_field__lang__isnull=False),\n+                ordering=KeyTransform('lang', 'json_field'),\n+            ),\n+        )\n+        self.assertEqual(values, {'arrayagg': ['en', 'pl']})\n+\n     def test_array_agg_filter(self):\n         values = AggregateTestModel.objects.aggregate(\n             arrayagg=ArrayAgg('integer_field', filter=Q(integer_field__gt=0)),\n@@ -205,6 +242,17 @@ def test_string_agg_charfield_ordering(self):\n                 )\n                 self.assertEqual(values, {'stringagg': expected_output})\n \n+    def test_string_agg_jsonfield_ordering(self):\n+        values = AggregateTestModel.objects.aggregate(\n+            stringagg=StringAgg(\n+                KeyTextTransform('lang', 'json_field'),\n+                delimiter=';',\n+                ordering=KeyTextTransform('lang', 'json_field'),\n+                output_field=CharField(),\n+            ),\n+        )\n+        self.assertEqual(values, {'stringagg': 'en;pl'})\n+\n     def test_string_agg_filter(self):\n         values = AggregateTestModel.objects.aggregate(\n             stringagg=StringAgg(\n@@ -270,6 +318,16 @@ def test_json_agg_booleanfield_ordering(self):\n                 )\n                 self.assertEqual(values, {'jsonagg': expected_output})\n \n+    def test_json_agg_jsonfield_ordering(self):\n+        values = AggregateTestModel.objects.aggregate(\n+            jsonagg=JSONBAgg(\n+                KeyTransform('lang', 'json_field'),\n+                filter=Q(json_field__lang__isnull=False),\n+                ordering=KeyTransform('lang', 'json_field'),\n+            ),\n+        )\n+        self.assertEqual(values, {'jsonagg': ['en', 'pl']})\n+\n     def test_string_agg_array_agg_ordering_in_subquery(self):\n         stats = []\n         for i, agg in enumerate(AggregateTestModel.objects.order_by('char_field')):\n@@ -302,9 +360,9 @@ def test_string_agg_array_agg_ordering_in_subquery(self):\n \n     def test_string_agg_array_agg_filter_in_subquery(self):\n         StatTestModel.objects.bulk_create([\n-            StatTestModel(related_field=self.agg1, int1=0, int2=5),\n-            StatTestModel(related_field=self.agg1, int1=1, int2=4),\n-            StatTestModel(related_field=self.agg1, int1=2, int2=3),\n+            StatTestModel(related_field=self.aggs[0], int1=0, int2=5),\n+            StatTestModel(related_field=self.aggs[0], int1=1, int2=4),\n+            StatTestModel(related_field=self.aggs[0], int1=2, int2=3),\n         ])\n         for aggregate, expected_result in (\n             (\n@@ -341,7 +399,7 @@ def test_string_agg_filter_in_subquery_with_exclude(self):\n         ).exclude(stringagg='').values('id')\n         self.assertSequenceEqual(\n             AggregateTestModel.objects.filter(id__in=Subquery(subquery)),\n-            [self.agg1],\n+            [self.aggs[0]],\n         )\n \n \ndiff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py\n--- a/tests/postgres_tests/test_constraints.py\n+++ b/tests/postgres_tests/test_constraints.py\n@@ -7,6 +7,7 @@\n from django.db.models import (\n     CheckConstraint, Deferrable, F, Func, Q, UniqueConstraint,\n )\n+from django.db.models.fields.json import KeyTextTransform\n from django.db.models.functions import Left\n from django.test import skipUnlessDBFeature\n from django.utils import timezone\n@@ -620,6 +621,22 @@ def test_expressions_with_params(self):\n             editor.add_constraint(Scene, constraint)\n         self.assertIn(constraint_name, self.get_constraints(Scene._meta.db_table))\n \n+    def test_expressions_with_key_transform(self):\n+        constraint_name = 'exclude_overlapping_reservations_smoking'\n+        constraint = ExclusionConstraint(\n+            name=constraint_name,\n+            expressions=[\n+                (F('datespan'), RangeOperators.OVERLAPS),\n+                (KeyTextTransform('smoking', 'requirements'), RangeOperators.EQUAL),\n+            ],\n+        )\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(HotelReservation, constraint)\n+        self.assertIn(\n+            constraint_name,\n+            self.get_constraints(HotelReservation._meta.db_table),\n+        )\n+\n     def test_range_adjacent_initially_deferred(self):\n         constraint_name = 'ints_adjacent_deferred'\n         self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))\n",
  "problem_statement": "Using KeyTransform for JSONField produces invalid SQL in various places.\nDescription\n\t \n\t\t(last modified by Igor Jerosimić)\n\t \nUsing KeyTransform in ordering attribute of ArrayAgg function produces invalid SQL. I don't know if it matters but I'm using Postgres for DB.\n# sample model\nfrom django.db import models\nclass Parent(models.Model):\n\tname = models.CharField(default='test')\nclass Child(models.Model):\n\tparent = models.ForeignKey(\n\t\tParent,\n\t\ton_delete=models.SET_NULL,\n\t\trelated_name='children',\n\t)\n\tdata = models.JSONField(default=dict)\n# sample data\nparent = Parent.objects.create()\nChild.objects.create(parent=parent, data={'en': 'English', 'fr': 'French'})\n# error\nParent.objects.annotate(\n\t\tchildren_array=ArrayAgg(\n\t\t\t\tKeyTextTransform('en', 'children__data'),\n\t\t\t\tdistinct=True,\n\t\t\t\tordering=[KeyTransform('en', 'children__data')],\n\t\t),\n).all()\nProduces invalid SQL in the ORDER BY section:\nARRAY_AGG(DISTINCT (\"children\".\"data\" ->> 'default') ORDER BY None(\"children\".\"data\"))\nNOTE: This was working fine before Django 3.1.\n",
  "hints_text": "It's due to OrderableAggMixin.as_sql calling ​its ordering expression as_sql method directly instead of doing compiler.compile(expr) since ​the latter properly handles the vendor logic. This wasn't an issue when KeyTransform was only implemented for contrib.postgres as it's implementation was not vendored ​but now it does. There might other instances of this problem lying around in django.db.models.expressions and friends since it's the first time I've seen this issue manifest itself and I don't remember this is something we kept an eye for during code reviews.\nFrom a quick grep I identified the following as_sql calls that suffered from the same class of isssue ExpressionWrapper.as_sql FieldGetDbPrepValueIterableMixin.resolve_expression_parameter Window.as_sql for self.partition but we'd need to allow compiler.comple to proxy **kwargs passing or simply create a copy of self.partition to assign it the template at __init__ time instead. The latter seems like the less intrusive method. I identified these by going through all instances of [^)]\\.as_sql so I might have missed a few.",
  "created_at": "2020-10-12T11:09:14Z",
  "version": "3.2",
  "FAIL_TO_PASS": "[\"test_expression_wrapper_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_key_in (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iregex (model_fields.test_jsonfield.TestQuerying)\"]",
  "PASS_TO_PASS": "[\"test_custom_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_decoder (model_fields.test_jsonfield.TestValidation)\", \"test_invalid_encoder (model_fields.test_jsonfield.TestValidation)\", \"test_validation_error (model_fields.test_jsonfield.TestValidation)\", \"test_unsupported_backend (expressions_window.tests.WindowUnsupportedTests)\", \"test_formfield (model_fields.test_jsonfield.TestFormField)\", \"test_formfield_custom_encoder_decoder (model_fields.test_jsonfield.TestFormField)\", \"test_conditional_annotation (expressions_window.tests.NonQueryWindowTests)\", \"test_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_empty_group_by_cols (expressions_window.tests.NonQueryWindowTests)\", \"test_frame_window_frame_notimplemented (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_filter (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_order_by (expressions_window.tests.NonQueryWindowTests)\", \"test_invalid_source_expression (expressions_window.tests.NonQueryWindowTests)\", \"test_window_frame_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_window_repr (expressions_window.tests.NonQueryWindowTests)\", \"test_deconstruct (model_fields.test_jsonfield.TestMethods)\", \"test_deconstruct_custom_encoder_decoder (model_fields.test_jsonfield.TestMethods)\", \"test_get_transforms (model_fields.test_jsonfield.TestMethods)\", \"test_key_transform_text_lookup_mixin_non_key_transform (model_fields.test_jsonfield.TestMethods)\", \"test_custom_encoder_decoder (model_fields.test_jsonfield.JSONFieldTests)\", \"test_db_check_constraints (model_fields.test_jsonfield.JSONFieldTests)\", \"test_invalid_value (model_fields.test_jsonfield.JSONFieldTests)\", \"test_dumping (model_fields.test_jsonfield.TestSerialization)\", \"test_loading (model_fields.test_jsonfield.TestSerialization)\", \"test_xml_serialization (model_fields.test_jsonfield.TestSerialization)\", \"test_dict (model_fields.test_jsonfield.TestSaveLoad)\", \"test_json_null_different_from_sql_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_list (model_fields.test_jsonfield.TestSaveLoad)\", \"test_null (model_fields.test_jsonfield.TestSaveLoad)\", \"test_primitives (model_fields.test_jsonfield.TestSaveLoad)\", \"test_realistic_object (model_fields.test_jsonfield.TestSaveLoad)\", \"test_avg_salary_department (expressions_window.tests.WindowFunctionTests)\", \"test_cume_dist (expressions_window.tests.WindowFunctionTests)\", \"test_dense_rank (expressions_window.tests.WindowFunctionTests)\", \"test_department_salary (expressions_window.tests.WindowFunctionTests)\", \"Window expressions can't be used in an INSERT statement.\", \"Window expressions can't be used in an UPDATE statement.\", \"test_first_value (expressions_window.tests.WindowFunctionTests)\", \"test_function_list_of_values (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_end_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_row_range (expressions_window.tests.WindowFunctionTests)\", \"test_invalid_type_start_value_range (expressions_window.tests.WindowFunctionTests)\", \"test_key_transform (expressions_window.tests.WindowFunctionTests)\", \"test_lag (expressions_window.tests.WindowFunctionTests)\", \"test_lag_decimalfield (expressions_window.tests.WindowFunctionTests)\", \"test_last_value (expressions_window.tests.WindowFunctionTests)\", \"test_lead (expressions_window.tests.WindowFunctionTests)\", \"test_lead_default (expressions_window.tests.WindowFunctionTests)\", \"test_lead_offset (expressions_window.tests.WindowFunctionTests)\", \"test_max_per_year (expressions_window.tests.WindowFunctionTests)\", \"An alternative way to specify a query for FirstValue.\", \"test_multiple_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_multiple_partitioning (expressions_window.tests.WindowFunctionTests)\", \"test_nth_returns_null (expressions_window.tests.WindowFunctionTests)\", \"test_nthvalue (expressions_window.tests.WindowFunctionTests)\", \"test_ntile (expressions_window.tests.WindowFunctionTests)\", \"test_percent_rank (expressions_window.tests.WindowFunctionTests)\", \"test_range_n_preceding_and_following (expressions_window.tests.WindowFunctionTests)\", \"A query with RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.\", \"test_rank (expressions_window.tests.WindowFunctionTests)\", \"test_related_ordering_with_count (expressions_window.tests.WindowFunctionTests)\", \"test_row_number (expressions_window.tests.WindowFunctionTests)\", \"test_row_number_no_ordering (expressions_window.tests.WindowFunctionTests)\", \"test_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_subquery_row_range_rank (expressions_window.tests.WindowFunctionTests)\", \"test_window_expression_within_subquery (expressions_window.tests.WindowFunctionTests)\", \"test_contained_by_unsupported (model_fields.test_jsonfield.TestQuerying)\", \"test_contains_unsupported (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_array (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_mixed (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_objs (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_lookup_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_deep_values (model_fields.test_jsonfield.TestQuerying)\", \"test_exact (model_fields.test_jsonfield.TestQuerying)\", \"test_exact_complex (model_fields.test_jsonfield.TestQuerying)\", \"test_has_any_keys (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_deep (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_list (model_fields.test_jsonfield.TestQuerying)\", \"test_has_key_null_value (model_fields.test_jsonfield.TestQuerying)\", \"test_has_keys (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key (model_fields.test_jsonfield.TestQuerying)\", \"test_isnull_key_or_none (model_fields.test_jsonfield.TestQuerying)\", \"test_key_endswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_icontains (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iendswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_iexact (model_fields.test_jsonfield.TestQuerying)\", \"test_key_istartswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_regex (model_fields.test_jsonfield.TestQuerying)\", \"test_key_sql_injection_escape (model_fields.test_jsonfield.TestQuerying)\", \"test_key_startswith (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_lookup_exclude (model_fields.test_jsonfield.TestQuerying)\", \"test_lookup_exclude_nonexistent_key (model_fields.test_jsonfield.TestQuerying)\", \"test_lookups_with_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_nested_key_transform_raw_expression (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_and_exact_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_none_key_exclude (model_fields.test_jsonfield.TestQuerying)\", \"test_obj_subquery_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_order_grouping_custom_decoder (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_by_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_count (model_fields.test_jsonfield.TestQuerying)\", \"test_ordering_grouping_by_key_transform (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_list_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_lookup_obj_target (model_fields.test_jsonfield.TestQuerying)\", \"test_shallow_obj_lookup (model_fields.test_jsonfield.TestQuerying)\", \"test_usage_in_subquery (model_fields.test_jsonfield.TestQuerying)\"]",
  "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.660876",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}