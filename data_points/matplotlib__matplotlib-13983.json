{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-13983",
  "base_commit": "76db50151a65927c19c83a8c3c195c87dbcc0556",
  "patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1616,7 +1616,7 @@ def set_major_formatter(self, formatter):\n         \"\"\"\n         if not isinstance(formatter, mticker.Formatter):\n             raise TypeError(\"formatter argument should be instance of \"\n-                    \"matplotlib.ticker.Formatter\")\n+                            \"matplotlib.ticker.Formatter\")\n         self.isDefault_majfmt = False\n         self.major.formatter = formatter\n         formatter.set_axis(self)\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1592,10 +1592,24 @@ def subplots(self, nrows=1, ncols=1, sharex=False, sharey=False,\n \n     def _remove_ax(self, ax):\n         def _reset_loc_form(axis):\n-            axis.set_major_formatter(axis.get_major_formatter())\n-            axis.set_major_locator(axis.get_major_locator())\n-            axis.set_minor_formatter(axis.get_minor_formatter())\n-            axis.set_minor_locator(axis.get_minor_locator())\n+            # Set the formatters and locators to be associated with axis\n+            # (where previously they may have been associated with another\n+            # Axis isntance)\n+            majfmt = axis.get_major_formatter()\n+            if not majfmt.axis.isDefault_majfmt:\n+                axis.set_major_formatter(majfmt)\n+\n+            majloc = axis.get_major_locator()\n+            if not majloc.axis.isDefault_majloc:\n+                axis.set_major_locator(majloc)\n+\n+            minfmt = axis.get_minor_formatter()\n+            if not minfmt.axis.isDefault_minfmt:\n+                axis.set_minor_formatter(minfmt)\n+\n+            minloc = axis.get_minor_locator()\n+            if not minfmt.axis.isDefault_minloc:\n+                axis.set_minor_locator(minloc)\n \n         def _break_share_link(ax, grouper):\n             siblings = grouper.get_siblings(ax)\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,10 +1,11 @@\n+from datetime import datetime\n from pathlib import Path\n import platform\n \n from matplotlib import rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n-from matplotlib.ticker import AutoMinorLocator, FixedFormatter\n+from matplotlib.ticker import AutoMinorLocator, FixedFormatter, ScalarFormatter\n import matplotlib.pyplot as plt\n import matplotlib.dates as mdates\n import matplotlib.gridspec as gridspec\n@@ -461,3 +462,21 @@ def test_tightbbox():\n     # test bbox_extra_artists method...\n     assert abs(ax.get_tightbbox(renderer, bbox_extra_artists=[]).x1\n                - x1Nom * fig.dpi) < 2\n+\n+\n+def test_axes_removal():\n+    # Check that units can set the formatter after an Axes removal\n+    fig, axs = plt.subplots(1, 2, sharex=True)\n+    axs[1].remove()\n+    axs[0].plot([datetime(2000, 1, 1), datetime(2000, 2, 1)], [0, 1])\n+    assert isinstance(axs[0].xaxis.get_major_formatter(),\n+                      mdates.AutoDateFormatter)\n+\n+    # Check that manually setting the formatter, then removing Axes keeps\n+    # the set formatter.\n+    fig, axs = plt.subplots(1, 2, sharex=True)\n+    axs[1].xaxis.set_major_formatter(ScalarFormatter())\n+    axs[1].remove()\n+    axs[0].plot([datetime(2000, 1, 1), datetime(2000, 2, 1)], [0, 1])\n+    assert isinstance(axs[0].xaxis.get_major_formatter(),\n+                      ScalarFormatter)\n",
  "problem_statement": "Remove()ing a shared axes prevents the remaining axes from using unit-provided formatters\nConsider\r\n```\r\nfrom pylab import *\r\nfrom datetime import date\r\n\r\nfig, axs = plt.subplots(1, 2, sharex=True)\r\naxs[1].remove()\r\naxs[0].plot([date(2000, 1, 1), date(2000, 2, 1)], [0, 1])\r\nplt.show()\r\n```\r\n\r\nOne gets\r\n![test](https://user-images.githubusercontent.com/1322974/48794454-4c3f5c00-ecfa-11e8-9e1f-83ff6015782c.png)\r\n\r\ni.e. the call to `axs[1].remove()` prevented the axs[0] from acquiring the correct tick formatter and locator.\r\n\r\nInterestingly, using `fig.delaxes(axs[1])` doesn't exhibit the same bug.\r\n\r\nLooks like the problem comes from\r\n```\r\n    def _remove_ax(self, ax):\r\n        def _reset_loc_form(axis):\r\n            axis.set_major_formatter(axis.get_major_formatter())\r\n            axis.set_major_locator(axis.get_major_locator())\r\n            axis.set_minor_formatter(axis.get_minor_formatter())\r\n            axis.set_minor_locator(axis.get_minor_locator())\r\n\r\n        def _break_share_link(ax, grouper):\r\n            siblings = grouper.get_siblings(ax)\r\n            if len(siblings) > 1:\r\n                grouper.remove(ax)\r\n                for last_ax in siblings:\r\n                    if ax is not last_ax:\r\n                        return last_ax\r\n            return None\r\n\r\n        self.delaxes(ax)\r\n        last_ax = _break_share_link(ax, ax._shared_y_axes)\r\n        if last_ax is not None:\r\n            _reset_loc_form(last_ax.yaxis)\r\n\r\n        last_ax = _break_share_link(ax, ax._shared_x_axes)\r\n        if last_ax is not None:\r\n            _reset_loc_form(last_ax.xaxis)\r\n```\r\nwhere the call to `set_major_formatter` (etc.), which basically call `formatter.set_axis(axis)` (to update the axis seen by the formatter) also make Matplotlib believe that we had a user-provided formatter (isDefault_majloc = False, etc.) which should not be overridden by the unit framework.\r\n\r\nmpl master (ca. 3.0.2)\n",
  "hints_text": "",
  "created_at": "2019-04-18T10:55:40Z",
  "version": "3.0",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_axes_removal\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_figure_label\", \"lib/matplotlib/tests/test_figure.py::test_fignum_exists\", \"lib/matplotlib/tests/test_figure.py::test_clf_keyword\", \"lib/matplotlib/tests/test_figure.py::test_gca\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_invalid\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_fontproperties\", \"lib/matplotlib/tests/test_figure.py::test_alpha[png]\", \"lib/matplotlib/tests/test_figure.py::test_too_many_figures\", \"lib/matplotlib/tests/test_figure.py::test_iterability_axes_argument\", \"lib/matplotlib/tests/test_figure.py::test_set_fig_size\", \"lib/matplotlib/tests/test_figure.py::test_axes_remove\", \"lib/matplotlib/tests/test_figure.py::test_figaspect\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[None]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[both]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[major]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[minor]\", \"lib/matplotlib/tests/test_figure.py::test_change_dpi\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[1-nan]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[0-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[-1-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[inf-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_add_axes\", \"lib/matplotlib/tests/test_figure.py::test_subplots_shareax_loglabels\", \"lib/matplotlib/tests/test_figure.py::test_savefig\", \"lib/matplotlib/tests/test_figure.py::test_figure_repr\", \"lib/matplotlib/tests/test_figure.py::test_warn_cl_plus_tl\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[png]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[png]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[ps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[eps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[svg]\", \"lib/matplotlib/tests/test_figure.py::test_tightbbox\"]",
  "environment_setup_commit": "d0628598f8d9ec7b0da6b60e7b29be2067b6ea17",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.785826",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}