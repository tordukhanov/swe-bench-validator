{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-11316",
  "base_commit": "db739afaeb6129676504e964ce287fe6becb3471",
  "patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -23,7 +23,9 @@\n _single_colon_regex = re.compile(r'(?<!:):(?!:)')\n _xref_or_code_regex = re.compile(\n     r'((?::(?:[a-zA-Z0-9]+[\\-_+:.])*[a-zA-Z0-9]+:`.+?`)|'\n-    r'(?:``.+?``))')\n+    r'(?:``.+?``)|'\n+    r'(?::meta .+:.*)|'\n+    r'(?:`.+?\\s*(?<!\\x00)<.*?>`))')\n _xref_regex = re.compile(\n     r'(?:(?::(?:[a-zA-Z0-9]+[\\-_+:.])*[a-zA-Z0-9]+:)?`.+?`)',\n )\n",
  "test_patch": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -47,8 +47,8 @@ class TestNamedtupleSubclass:\n     def test_attributes_docstring(self):\n         config = Config()\n         actual = str(NumpyDocstring(cleandoc(NamedtupleSubclass.__doc__),\n-                     config=config, app=None, what='class',\n-                     name='NamedtupleSubclass', obj=NamedtupleSubclass))\n+                                    config=config, app=None, what='class',\n+                                    name='NamedtupleSubclass', obj=NamedtupleSubclass))\n         expected = \"\"\"\\\n Sample namedtuple subclass\n \n@@ -75,53 +75,38 @@ def test_attributes_docstring(self):\n \n \n class TestInlineAttribute:\n+    inline_google_docstring = ('inline description with '\n+                               '``a : in code``, '\n+                               'a :ref:`reference`, '\n+                               'a `link <https://foo.bar>`_, '\n+                               'a :meta public:, '\n+                               'a :meta field: value and '\n+                               'an host:port and HH:MM strings.')\n+\n+    @staticmethod\n+    def _docstring(source):\n+        rst = GoogleDocstring(source, config=Config(), app=None, what='attribute', name='some_data', obj=0)\n+        return str(rst)\n \n     def test_class_data_member(self):\n-        config = Config()\n-        docstring = dedent(\"\"\"\\\n-        data member description:\n-\n-        - a: b\n-        \"\"\")\n-        actual = str(GoogleDocstring(docstring, config=config, app=None,\n-                     what='attribute', name='some_data', obj=0))\n-        expected = dedent(\"\"\"\\\n-        data member description:\n-\n-        - a: b\"\"\")\n-\n-        assert expected == actual\n+        source = 'data member description:\\n\\n- a: b'\n+        actual = self._docstring(source).splitlines()\n+        assert actual == ['data member description:', '', '- a: b']\n \n     def test_class_data_member_inline(self):\n-        config = Config()\n-        docstring = \"\"\"b: data member description with :ref:`reference`\"\"\"\n-        actual = str(GoogleDocstring(docstring, config=config, app=None,\n-                     what='attribute', name='some_data', obj=0))\n-        expected = dedent(\"\"\"\\\n-        data member description with :ref:`reference`\n-\n-        :type: b\"\"\")\n-        assert expected == actual\n+        source = f'CustomType: {self.inline_google_docstring}'\n+        actual = self._docstring(source).splitlines()\n+        assert actual == [self.inline_google_docstring, '', ':type: CustomType']\n \n     def test_class_data_member_inline_no_type(self):\n-        config = Config()\n-        docstring = \"\"\"data with ``a : in code`` and :ref:`reference` and no type\"\"\"\n-        actual = str(GoogleDocstring(docstring, config=config, app=None,\n-                     what='attribute', name='some_data', obj=0))\n-        expected = \"\"\"data with ``a : in code`` and :ref:`reference` and no type\"\"\"\n-\n-        assert expected == actual\n+        source = self.inline_google_docstring\n+        actual = self._docstring(source).splitlines()\n+        assert actual == [source]\n \n     def test_class_data_member_inline_ref_in_type(self):\n-        config = Config()\n-        docstring = \"\"\":class:`int`: data member description\"\"\"\n-        actual = str(GoogleDocstring(docstring, config=config, app=None,\n-                     what='attribute', name='some_data', obj=0))\n-        expected = dedent(\"\"\"\\\n-        data member description\n-\n-        :type: :class:`int`\"\"\")\n-        assert expected == actual\n+        source = f':class:`int`: {self.inline_google_docstring}'\n+        actual = self._docstring(source).splitlines()\n+        assert actual == [self.inline_google_docstring, '', ':type: :class:`int`']\n \n \n class TestGoogleDocstring:\n",
  "problem_statement": "Napoleon causes warning about missing end-string when encountering a reference on the first line of a docstring in a dataclass\n### Describe the bug\n\nWhen using `ext.napoleon`, a docstring of a dataclass attribute will cause an `Inline interpreted text or phrase reference start-string without end-string` warning for a reference that's placed on the first line of this docstring.\r\n\r\nThe reference itself is processed correctly.\n\n### How to Reproduce\n\nThis causes the warning\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass Thing:\r\n    attribute: str = \"anything\"\r\n    \"\"\"\r\n    Here some text. `Here a reference <https://example.org>`_\r\n    \"\"\"\r\n```\r\n\r\nThis one works just fine. Notice the linebreak in the docstring\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass Thing:\r\n    attribute: str = \"anything\"\r\n    \"\"\"\r\n    Here some text. \r\n    `Here a reference <https://example.org>`_\r\n    \"\"\"\r\n```\n\n### Environment Information\n\n```text\nPlatform:              linux; (Linux-5.19.0-35-generic-x86_64-with-glibc2.36)\r\nPython version:        3.10.7 (main, Nov 24 2022, 19:45:47) [GCC 12.2.0])\r\nPython implementation: CPython\r\nSphinx version:        5.3.0\r\nDocutils version:      0.19\r\nJinja2 version:        3.1.2\n```\n\n\n### Sphinx extensions\n\n```python\n[\"sphinx.ext.autodoc\", \"sphinx.ext.napoleon\"]\n```\n\n\n### Additional context\n\n_No response_\n",
  "hints_text": "When using `sphinx.ext.napoleon`, the docstrings are assumed to follow either NumPy or Google docstrings. According to [[1]](#1) and [[2]](#2), docstrings used on attributes and placed *after* the attribute *may* specify their type first, followed by a colon, and then by whatever you want. In particular, if a colon is present, the LHS is treated as a type and the RHS as a regular text.\r\n\r\nEDIT: after investigation, I confirm that this behaviour is a bug and not an expected behaviour.\r\n\r\n~~In particular, your specific docstring does not comply with Google or NumPy docstrings, hence the failure. In particular, what you could request is a *feature* to allow docstrings placed after the documented object to *optionally* specify the type.~~ This, however, requires `GoogleDocstring._parse_attribute_docstring` and `GoogleDocstring._consume_inline_attribute` to be implemented differently (the work behind will not be trivial).\r\n\r\nBy the way, this does not affect dataclasses in general, but affects all members documented using post-docstrings together with the `sphinx.ext.napoleon` extension for which the first line contains a colon such that the content on its right is not a valid reST string.\r\n\r\n---\r\n\r\n<a id=\"1\">[1]</a> https://www.sphinx-doc.org/en/master/usage/extensions/example_google.html#example-google\r\n<a id=\"2\">[2]</a> https://www.sphinx-doc.org/en/master/usage/extensions/example_numpy.html#example-numpy\r\n\n> According to [[1]](https://github.com/sphinx-doc/sphinx/issues/11246#1) and [[2]](https://github.com/sphinx-doc/sphinx/issues/11246#2), docstrings used on attributes and placed after the attribute must specify their type first\r\n\r\nMaybe I'm missing something here but I don't see where this says that these docstrings *must* specify their type. It says that they *may* do so, which is in line with how these are handled for arguments as well.\r\n\r\nTo quote the section you linked:\r\n\r\n> The type may optionally be specified on the first line, separated by a colon.\r\n\r\nBut even following this supposed requirement, things still don't work as expected:\r\n\r\n```python\r\nmodule_level_variable2 = 98765\r\n\"\"\"int: Module level variable documented inline. `link <https://example.org>`_\"\"\"\r\n```\r\n\r\nThis is from the linked example, with only an external reference added. It results in the same error. \r\n\r\nYou can make it even simpler:\r\n\r\n```python\r\nmodule_level_variable2 = 98765\r\n\"\"\"int: Module level variable documented inline. This: is what breaks it\"\"\"\r\n```\r\n\r\n> what you could request is a feature to allow docstrings placed after the documented object to optionally specify the type\r\n\r\nWhat I am requesting is that a colon in the first line of an attribute docstring does not result in a warning. \r\n\n> It says that they may do so, which is in line with how these are handled for arguments as well.\r\n\r\nYes, that's right. My bad ! Anyway, the issue is that \"if there is a colon, then we assume that the LHS is the type, the RHS is the rest\"\r\n\r\n> You can make it even simpler:\r\n\r\nOk I confirmed this on my side. I'll edit my previous answer and try to work on that issue this afternoon then.\r\n\r\n\n> Ok I confirmed this on my side. I'll edit my previous answer and try to work on that issue this afternoon then.\r\n\r\nCool, thanks for the quick turnaround! \nI cannot guarantee a quick fix because this requires to refactor the Google docstring parser, which I never touched. Also, allowing an *arbitrary* colon in the first line means that we cannot distinguish between the type and just a word suffixed by a colon.\r\n\r\nFor instance, how can we distinguish between:\r\n\r\n```\r\n'''blabla: blublu'''\r\n\r\n'''int: blublu'\r\n```\r\n\r\nwithout knowing that `blabla` is *not* a type (and there is no way that we can know this at the level of the parser). One possibility is to first escape reST markup (e.g., links) before splitting on the colon (like, we still won't be able to fix the above issue but we could allow a link to be present). \r\n\r\nActually, we could fix your \"simpler\" example by taking into account inline links in `sphinx.ext.napoleon.docstring._xref_or_code_regex`.\r\n\r\n\r\n",
  "created_at": "2023-04-11T14:20:08Z",
  "version": "7.2",
  "FAIL_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::TestInlineAttribute::test_class_data_member_inline_no_type\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_napoleon_docstring.py::TestNamedtupleSubclass::test_attributes_docstring\", \"tests/test_ext_napoleon_docstring.py::TestInlineAttribute::test_class_data_member\", \"tests/test_ext_napoleon_docstring.py::TestInlineAttribute::test_class_data_member_inline\", \"tests/test_ext_napoleon_docstring.py::TestInlineAttribute::test_class_data_member_inline_ref_in_type\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_attributes_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_attributes_with_use_ivar\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_code_block_in_returns_section\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_kwargs_in_arguments\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_section_header_formatting\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_custom_generic_sections\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_noindex\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_keywords_with_types\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_pep526_annotations\", \"tests/test_ext_napoleon_docstring.py::TestGoogleDocstring::test_preprocess_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_sphinx_admonitions\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_docstrings\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_type_preprocessor\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_parameters_with_class_reference\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_multiple_parameters\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_parameters_without_class_reference\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_see_also_refs\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_colon_in_return_type\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_underscore_in_attribute\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_underscore_in_attribute_strip_signature_backslash\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_return_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_yield_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_raises_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_xrefs_in_return_type\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_section_header_underline_length\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_list_in_parameter_description\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_token_type\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_tokenize_type_spec\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_recombine_set_tokens\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_recombine_set_tokens_invalid\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_convert_numpy_type_spec\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_parameter_types\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_token_type_invalid\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*args,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*x,\", \"tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_pep526_annotations\", \"tests/test_ext_napoleon_docstring.py::test_napoleon_and_autodoc_typehints_description_all\", \"tests/test_ext_napoleon_docstring.py::test_napoleon_and_autodoc_typehints_description_documented_params\"]",
  "environment_setup_commit": "7758e016231c3886e5a290c00fcb2c75d1f36c18",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.037205",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}