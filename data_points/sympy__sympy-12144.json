{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-12144",
  "base_commit": "075402d6cf9704493d7b3033d214f8a25ebc20b1",
  "patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -707,8 +707,7 @@ def fdiff(self, argindex=1):\n             else:\n                 return Derivative(self, self.args[argindex - 1], evaluate=False)\n         # See issue 4624 and issue 4719 and issue 5600\n-        arg_dummy = Dummy('xi_%i' % argindex)\n-        arg_dummy.dummy_index = hash(self.args[argindex - 1])\n+        arg_dummy = Dummy('xi_%i' % argindex, dummy_index=hash(self.args[argindex - 1]))\n         new_args = [arg for arg in self.args]\n         new_args[argindex-1] = arg_dummy\n         return Subs(Derivative(self.func(*new_args), arg_dummy),\n@@ -1178,8 +1177,7 @@ def __new__(cls, expr, *variables, **assumptions):\n                 obj = None\n             else:\n                 if not is_symbol:\n-                    new_v = Dummy('xi_%i' % i)\n-                    new_v.dummy_index = hash(v)\n+                    new_v = Dummy('xi_%i' % i, dummy_index=hash(v))\n                     expr = expr.xreplace({v: new_v})\n                     old_v = v\n                     v = new_v\ndiff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -14,6 +14,7 @@\n \n import string\n import re as _re\n+import random\n \n \n class Symbol(AtomicExpr, Boolean):\n@@ -178,13 +179,13 @@ def free_symbols(self):\n \n \n class Dummy(Symbol):\n-    \"\"\"Dummy symbols are each unique, identified by an internal count index:\n+    \"\"\"Dummy symbols are each unique, even if they have the same name:\n \n     >>> from sympy import Dummy\n     >>> bool(Dummy(\"x\") == Dummy(\"x\")) == True\n     False\n \n-    If a name is not supplied then a string value of the count index will be\n+    If a name is not supplied then a string value of an internal count will be\n     used. This is useful when a temporary variable is needed and the name\n     of the variable used in the expression is not important.\n \n@@ -193,21 +194,48 @@ class Dummy(Symbol):\n \n     \"\"\"\n \n+    # In the rare event that a Dummy object needs to be recreated, both the\n+    # `name` and `dummy_index` should be passed.  This is used by `srepr` for\n+    # example:\n+    # >>> d1 = Dummy()\n+    # >>> d2 = eval(srepr(d1))\n+    # >>> d2 == d1\n+    # True\n+    #\n+    # If a new session is started between `srepr` and `eval`, there is a very\n+    # small chance that `d2` will be equal to a previously-created Dummy.\n+\n     _count = 0\n+    _dummyorder = {}\n+    _prng = random.Random()\n \n     __slots__ = ['dummy_index']\n \n     is_Dummy = True\n \n-    def __new__(cls, name=None, **assumptions):\n+    def __new__(cls, name=None, dummy_index=None, **assumptions):\n+        if dummy_index is not None:\n+            assert name is not None, \"If you specify a dummy_index, you must also provide a name\"\n+\n         if name is None:\n             name = \"Dummy_\" + str(Dummy._count)\n \n         cls._sanitize(assumptions, cls)\n         obj = Symbol.__xnew__(cls, name, **assumptions)\n \n+        while dummy_index is None:\n+            # The dummy_index that *we* generate will be a smallish positive\n+            # integers (at least Codeprinter assumes this).  But we do not\n+            # impose this if dummy_index was passed in.\n+            dummy_index = Dummy._prng.randint(10**6, 10**7-1)\n+            if dummy_index in Dummy._dummyorder:\n+                dummy_index = None\n+\n+        # Store count but don't update it if we already made this Dummy\n+        Dummy._dummyorder.setdefault(dummy_index, Dummy._count)\n+        obj.dummy_index = dummy_index\n+\n         Dummy._count += 1\n-        obj.dummy_index = Dummy._count\n         return obj\n \n     def __getstate__(self):\n@@ -215,8 +243,9 @@ def __getstate__(self):\n \n     @cacheit\n     def sort_key(self, order=None):\n+        # some tests depend on order of creation of Dummys\n         return self.class_key(), (\n-            2, (str(self), self.dummy_index)), S.One.sort_key(), S.One\n+            2, (str(self), Dummy._dummyorder[self.dummy_index])), S.One.sort_key(), S.One\n \n     def _hashable_content(self):\n         return Symbol._hashable_content(self) + (self.dummy_index,)\ndiff --git a/sympy/printing/repr.py b/sympy/printing/repr.py\n--- a/sympy/printing/repr.py\n+++ b/sympy/printing/repr.py\n@@ -145,6 +145,10 @@ def _print_Sum2(self, expr):\n \n     def _print_Symbol(self, expr):\n         d = expr._assumptions.generator\n+        # print the dummy_index like it was an assumption\n+        if expr.is_Dummy:\n+            d['dummy_index'] = expr.dummy_index\n+\n         if d == {}:\n             return \"%s(%s)\" % (expr.__class__.__name__, self._print(expr.name))\n         else:\n",
  "test_patch": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -30,10 +30,18 @@ def test_Symbol():\n \n def test_Dummy():\n     assert Dummy() != Dummy()\n-    Dummy._count = 0\n-    d1 = Dummy()\n-    Dummy._count = 0\n-    assert d1 == Dummy()\n+\n+\n+def test_Dummy_force_dummy_index():\n+    raises(AssertionError, lambda: Dummy(dummy_index=1))\n+    assert Dummy('d', dummy_index=2) == Dummy('d', dummy_index=2)\n+    assert Dummy('d1', dummy_index=2) != Dummy('d2', dummy_index=2)\n+    d1 = Dummy('d', dummy_index=3)\n+    d2 = Dummy('d')\n+    # not only unlikely, in fact impossible (b/c we keep a list of dummy_index)\n+    assert d1 != d2\n+    d3 = Dummy('d', dummy_index=3)\n+    assert d1 == d3\n \n \n def test_as_dummy():\ndiff --git a/sympy/printing/tests/test_repr.py b/sympy/printing/tests/test_repr.py\n--- a/sympy/printing/tests/test_repr.py\n+++ b/sympy/printing/tests/test_repr.py\n@@ -137,16 +137,25 @@ def test_Wild():\n \n \n def test_Dummy():\n-    # cannot use sT here\n+    d = Dummy('d')\n+    sT(d, \"Dummy('d', dummy_index=%s)\" % str(d.dummy_index))\n+\n+\n+def test_Dummy_assumption():\n     d = Dummy('d', nonzero=True)\n-    assert srepr(d) == \"Dummy('d', nonzero=True)\"\n+    assert d == eval(srepr(d))\n+    s1 = \"Dummy('d', dummy_index=%s, nonzero=True)\" % str(d.dummy_index)\n+    s2 = \"Dummy('d', nonzero=True, dummy_index=%s)\" % str(d.dummy_index)\n+    assert srepr(d) in (s1, s2)\n \n \n def test_Dummy_from_Symbol():\n     # should not get the full dictionary of assumptions\n     n = Symbol('n', integer=True)\n     d = n.as_dummy()\n-    assert srepr(d) == \"Dummy('n', integer=True)\"\n+    s1 = \"Dummy('n', dummy_index=%s, integer=True)\" % str(d.dummy_index)\n+    s2 = \"Dummy('n', integer=True, dummy_index=%s)\" % str(d.dummy_index)\n+    assert srepr(d) in (s1, s2)\n \n \n def test_tuple():\n",
  "problem_statement": "Dummy fails when is re-evaluated in S and srepr\nHi all!\r\n\r\nWell, i found this little problem, Dummy is a nice function but in the way is implemented exist this:\r\n```\r\n>>> alpha = Dummy(\"alpha\")\r\n>>> i = Integral(1/sqrt(1 - sin(alpha)**2), (alpha, 0, pi/2))\r\n>>> N(i)\r\n0.e+2\r\n>>> i = S(srepr(i))\r\n>>> N(i)\r\nIntegral(1/sqrt(-sin(_alpha)**2 + 1), (_alpha, 0, pi/2))\r\n```\r\nBasically, if you works with Dummy, and you get the expression with srepr or similar, when you eval it every Dummy will be interpreted as a new Dummy, so it fails, in the example you can see we can't eval the second expression because the 2 Dummy expression are interpreted as differents, other ex:\r\n```\r\n>>> m=Dummy(\"m\")\r\n>>> a=Matrix([m, m])\r\n>>> a[0]==a[1]\r\nTrue\r\n>>> b=S(srepr(a))\r\n>>> b[0]==b[1]\r\nFalse\r\n```\r\n\r\nSo thinking a solution can be use a hash or similar function, like:\r\n```\r\n>>> m=Dummy(\"m\")\r\n>>> srepr(m)\r\n\"Dummy('m', hash=987654321)\"\r\n>>> m=Dummy(\"m\")\r\n>>> srepr(m)\r\n\"Dummy('m', hash=754619474)\"\r\n```\r\nAlways will exist the hash collision, but at least to cover all possible can be sympy check the existents Dummy expressions and check the hash never by equal to other, the probability of the hash collision, to be equal, in the same context, with the same name, and in the same expression, i think is very low.\r\n\r\nMaybe instead use a hash can be a random expression, with chars like ```8waerfn23jb89a```, that can help to avoid hash collision.\r\n\r\nThx. Cya. \n",
  "hints_text": "I can confirm this.  Quoting `printing/repr.py`\n\n> srepr returns a string so that the relation eval(srepr(expr))=expr holds in an appropriate environment.\n\nHere's my minimal example:\n\n```\n>>> d = Dummy('d')\n>>> A = Add(d, d, evaluate=False)\n\n>>> srepr(A)                    # can see what the problem will be\n\"Add(Dummy('d'), Dummy('d'))\"\n\n>>> B = S(srepr(A))\n>>> B\n_d + _d\n\n>>> A.doit()\n2*_d\n\n>>> B.doit()     # cannot, has two different Dummys\n_d + _d\n```\n\nNote that Dummy does seem to maintain its identity across pickling:\n\n```\n>>> import cPickle\n>>> d1 = Dummy()\n>>> s1 = cPickle.dumps(d1)\n>>> d2 = cPickle.loads(s1)\n>>> d1 == d2\nTrue\n>>> d1 is d2\nFalse\n```\n",
  "created_at": "2017-02-10T07:25:55Z",
  "version": "1.0",
  "FAIL_TO_PASS": "[\"test_Dummy\", \"test_Dummy_force_dummy_index\", \"test_Dummy_assumption\", \"test_Dummy_from_Symbol\"]",
  "PASS_TO_PASS": "[\"test_Symbol\", \"test_as_dummy\", \"test_lt_gt\", \"test_no_len\", \"test_ineq_unequal\", \"test_Wild_properties\", \"test_symbols\", \"test_call\", \"test_printmethod\", \"test_Add\", \"test_Function\", \"test_Geometry\", \"test_Singletons\", \"test_Integer\", \"test_list\", \"test_Matrix\", \"test_empty_Matrix\", \"test_Rational\", \"test_Float\", \"test_Symbol_two_assumptions\", \"test_Symbol_no_special_commutative_treatment\", \"test_Wild\", \"test_tuple\", \"test_WildFunction\", \"test_settins\", \"test_Mul\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\"]",
  "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.075426",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}