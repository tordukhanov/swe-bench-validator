{
  "repo": "pytest-dev/pytest",
  "instance_id": "pytest-dev__pytest-8022",
  "base_commit": "e986d84466dfa98dbbc55cc1bf5fcb99075f4ac3",
  "patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -765,12 +765,14 @@ def collect(self) -> Iterator[Union[nodes.Item, nodes.Collector]]:\n                     self._notfound.append((report_arg, col))\n                     continue\n \n-                # If __init__.py was the only file requested, then the matched node will be\n-                # the corresponding Package, and the first yielded item will be the __init__\n-                # Module itself, so just use that. If this special case isn't taken, then all\n-                # the files in the package will be yielded.\n-                if argpath.basename == \"__init__.py\":\n-                    assert isinstance(matching[0], nodes.Collector)\n+                # If __init__.py was the only file requested, then the matched\n+                # node will be the corresponding Package (by default), and the\n+                # first yielded item will be the __init__ Module itself, so\n+                # just use that. If this special case isn't taken, then all the\n+                # files in the package will be yielded.\n+                if argpath.basename == \"__init__.py\" and isinstance(\n+                    matching[0], Package\n+                ):\n                     try:\n                         yield next(iter(matching[0].collect()))\n                     except StopIteration:\n",
  "test_patch": "diff --git a/testing/test_doctest.py b/testing/test_doctest.py\n--- a/testing/test_doctest.py\n+++ b/testing/test_doctest.py\n@@ -68,9 +68,13 @@ def my_func():\n             assert isinstance(items[0].parent, DoctestModule)\n             assert items[0].parent is items[1].parent\n \n-    def test_collect_module_two_doctest_no_modulelevel(self, pytester: Pytester):\n+    @pytest.mark.parametrize(\"filename\", [\"__init__\", \"whatever\"])\n+    def test_collect_module_two_doctest_no_modulelevel(\n+        self, pytester: Pytester, filename: str,\n+    ) -> None:\n         path = pytester.makepyfile(\n-            whatever=\"\"\"\n+            **{\n+                filename: \"\"\"\n             '# Empty'\n             def my_func():\n                 \">>> magic = 42 \"\n@@ -84,7 +88,8 @@ def another():\n                 # This is another function\n                 >>> import os # this one does have a doctest\n                 '''\n-        \"\"\"\n+            \"\"\",\n+            },\n         )\n         for p in (path, pytester.path):\n             items, reprec = pytester.inline_genitems(p, \"--doctest-modules\")\n",
  "problem_statement": "Doctest collection only returns single test for __init__.py\n<!--\r\nThanks for submitting an issue!\r\n\r\nQuick check-list while reporting bugs:\r\n-->\r\n\r\n`pytest --doctest-modules __init__.py` will only collect a single doctest because of this:\r\n\r\nhttps://github.com/pytest-dev/pytest/blob/e986d84466dfa98dbbc55cc1bf5fcb99075f4ac3/src/_pytest/main.py#L768-L781\r\n\r\nIntroduced a while back by @kchmck here: https://github.com/pytest-dev/pytest/commit/5ac4eff09b8514a5b46bdff464605a60051abc83\r\n\r\nSee failing tests: https://github.com/pytest-dev/pytest/pull/8015\r\n\nFailing doctest collection\nWhen the module is an __init__.py the doctest collection only picks up 1 doctest.\n",
  "hints_text": "\n",
  "created_at": "2020-11-10T20:57:51Z",
  "version": "6.2",
  "FAIL_TO_PASS": "[\"testing/test_doctest.py::TestDoctests::test_collect_module_two_doctest_no_modulelevel[__init__]\"]",
  "PASS_TO_PASS": "[\"testing/test_doctest.py::TestLiterals::test_number_re\", \"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[None]\", \"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[_is_mocked]\", \"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[<lambda>0]\", \"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[<lambda>1]\", \"testing/test_doctest.py::test_warning_on_unwrap_of_broken_object[<lambda>2]\", \"testing/test_doctest.py::test_is_setup_py_not_named_setup_py\", \"testing/test_doctest.py::test_is_setup_py_is_a_setup_py[setuptools]\", \"testing/test_doctest.py::test_is_setup_py_is_a_setup_py[distutils.core]\", \"testing/test_doctest.py::test_is_setup_py_different_encoding[setuptools]\", \"testing/test_doctest.py::test_is_setup_py_different_encoding[distutils.core]\", \"testing/test_doctest.py::TestDoctests::test_collect_testtextfile\", \"testing/test_doctest.py::TestDoctests::test_collect_module_empty\", \"testing/test_doctest.py::TestDoctests::test_collect_module_single_modulelevel_doctest\", \"testing/test_doctest.py::TestDoctests::test_collect_module_two_doctest_one_modulelevel\", \"testing/test_doctest.py::TestDoctests::test_collect_module_two_doctest_no_modulelevel[whatever]\", \"testing/test_doctest.py::TestDoctests::test_simple_doctestfile\", \"testing/test_doctest.py::TestDoctests::test_new_pattern\", \"testing/test_doctest.py::TestDoctests::test_multiple_patterns\", \"testing/test_doctest.py::TestDoctests::test_encoding[foo-ascii]\", \"testing/test_doctest.py::TestDoctests::test_encoding[\\\\xf6\\\\xe4\\\\xfc-latin1]\", \"testing/test_doctest.py::TestDoctests::test_encoding[\\\\xf6\\\\xe4\\\\xfc-utf-8]\", \"testing/test_doctest.py::TestDoctests::test_doctest_unexpected_exception\", \"testing/test_doctest.py::TestDoctests::test_doctest_outcomes\", \"testing/test_doctest.py::TestDoctests::test_docstring_partial_context_around_error\", \"testing/test_doctest.py::TestDoctests::test_docstring_full_context_around_error\", \"testing/test_doctest.py::TestDoctests::test_doctest_linedata_missing\", \"testing/test_doctest.py::TestDoctests::test_doctest_linedata_on_property\", \"testing/test_doctest.py::TestDoctests::test_doctest_no_linedata_on_overriden_property\", \"testing/test_doctest.py::TestDoctests::test_doctest_unex_importerror_only_txt\", \"testing/test_doctest.py::TestDoctests::test_doctest_unex_importerror_with_module\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule_external_and_issue116\", \"testing/test_doctest.py::TestDoctests::test_txtfile_failing\", \"testing/test_doctest.py::TestDoctests::test_txtfile_with_fixtures\", \"testing/test_doctest.py::TestDoctests::test_txtfile_with_usefixtures_in_ini\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule_with_fixtures\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule_three_tests\", \"testing/test_doctest.py::TestDoctests::test_doctestmodule_two_tests_one_fail\", \"testing/test_doctest.py::TestDoctests::test_ignored_whitespace\", \"testing/test_doctest.py::TestDoctests::test_non_ignored_whitespace\", \"testing/test_doctest.py::TestDoctests::test_ignored_whitespace_glob\", \"testing/test_doctest.py::TestDoctests::test_non_ignored_whitespace_glob\", \"testing/test_doctest.py::TestDoctests::test_contains_unicode\", \"testing/test_doctest.py::TestDoctests::test_ignore_import_errors_on_doctest\", \"testing/test_doctest.py::TestDoctests::test_junit_report_for_doctest\", \"testing/test_doctest.py::TestDoctests::test_unicode_doctest\", \"testing/test_doctest.py::TestDoctests::test_unicode_doctest_module\", \"testing/test_doctest.py::TestDoctests::test_print_unicode_value\", \"testing/test_doctest.py::TestDoctests::test_reportinfo\", \"testing/test_doctest.py::TestDoctests::test_valid_setup_py\", \"testing/test_doctest.py::TestDoctests::test_invalid_setup_py\", \"testing/test_doctest.py::TestLiterals::test_allow_unicode[ini]\", \"testing/test_doctest.py::TestLiterals::test_allow_unicode[comment]\", \"testing/test_doctest.py::TestLiterals::test_allow_bytes[ini]\", \"testing/test_doctest.py::TestLiterals::test_allow_bytes[comment]\", \"testing/test_doctest.py::TestLiterals::test_unicode_string\", \"testing/test_doctest.py::TestLiterals::test_bytes_literal\", \"testing/test_doctest.py::TestLiterals::test_number_precision[ini]\", \"testing/test_doctest.py::TestLiterals::test_number_precision[comment]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[3.0-3]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[3e0-3]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[1e3-1000]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[3-3.0]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[3.1-3.0]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[3.1-3.2]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[3.1-4.0]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[8.22e5-810000.0]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[3.0-2.98]\", \"testing/test_doctest.py::TestLiterals::test_number_non_matches[1e3-999]\", \"testing/test_doctest.py::TestLiterals::test_number_and_allow_unicode\", \"testing/test_doctest.py::TestDoctestSkips::test_one_skipped[text]\", \"testing/test_doctest.py::TestDoctestSkips::test_one_skipped[module]\", \"testing/test_doctest.py::TestDoctestSkips::test_one_skipped_failed[text]\", \"testing/test_doctest.py::TestDoctestSkips::test_one_skipped_failed[module]\", \"testing/test_doctest.py::TestDoctestSkips::test_all_skipped[text]\", \"testing/test_doctest.py::TestDoctestSkips::test_all_skipped[module]\", \"testing/test_doctest.py::TestDoctestSkips::test_vacuous_all_skipped[text]\", \"testing/test_doctest.py::TestDoctestSkips::test_vacuous_all_skipped[module]\", \"testing/test_doctest.py::TestDoctestSkips::test_continue_on_failure\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_doctest_module_session_fixture\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[True-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[True-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[True-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[True-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[False-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[False-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[False-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_scopes[False-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-True-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-True-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-True-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-True-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-False-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-False-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-False-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[True-False-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-True-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-True-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-True-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-True-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-False-module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-False-session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-False-class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_fixture_module_doctest_scopes[False-False-function]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_auto_use_request_attributes[module]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_auto_use_request_attributes[session]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_auto_use_request_attributes[class]\", \"testing/test_doctest.py::TestDoctestAutoUseFixtures::test_auto_use_request_attributes[function]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_doctestfile[module]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_doctestfile[session]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_doctestfile[class]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_doctestfile[function]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_pyfile[module]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_pyfile[session]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_pyfile[class]\", \"testing/test_doctest.py::TestDoctestNamespaceFixture::test_namespace_pyfile[function]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_udiff[udiff]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_udiff[UDIFF]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_udiff[uDiFf]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_cdiff\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_ndiff\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_none_or_only_first_failure[none]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_none_or_only_first_failure[only_first_failure]\", \"testing/test_doctest.py::TestDoctestReportingOption::test_doctest_report_invalid\", \"testing/test_doctest.py::test_doctest_mock_objects_dont_recurse_missbehaved[unittest.mock]\"]",
  "environment_setup_commit": "902739cfc3bbc3379e6ef99c8e250de35f52ecde",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.940524",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}