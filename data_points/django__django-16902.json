{
  "repo": "django/django",
  "instance_id": "django__django-16902",
  "base_commit": "d3d173425fc0a1107836da5b4567f1c88253191b",
  "patch": "diff --git a/django/db/models/functions/text.py b/django/db/models/functions/text.py\n--- a/django/db/models/functions/text.py\n+++ b/django/db/models/functions/text.py\n@@ -276,7 +276,9 @@ class Right(Left):\n \n     def get_substr(self):\n         return Substr(\n-            self.source_expressions[0], self.source_expressions[1] * Value(-1)\n+            self.source_expressions[0],\n+            self.source_expressions[1] * Value(-1),\n+            self.source_expressions[1],\n         )\n \n \n",
  "test_patch": "diff --git a/tests/db_functions/text/test_right.py b/tests/db_functions/text/test_right.py\n--- a/tests/db_functions/text/test_right.py\n+++ b/tests/db_functions/text/test_right.py\n@@ -1,5 +1,6 @@\n+from django.db import connection\n from django.db.models import IntegerField, Value\n-from django.db.models.functions import Lower, Right\n+from django.db.models.functions import Length, Lower, Right\n from django.test import TestCase\n \n from ..models import Author\n@@ -26,6 +27,21 @@ def test_invalid_length(self):\n         with self.assertRaisesMessage(ValueError, \"'length' must be greater than 0\"):\n             Author.objects.annotate(raises=Right(\"name\", 0))\n \n+    def test_zero_length(self):\n+        Author.objects.create(name=\"Tom\", alias=\"tom\")\n+        authors = Author.objects.annotate(\n+            name_part=Right(\"name\", Length(\"name\") - Length(\"alias\"))\n+        )\n+        self.assertQuerySetEqual(\n+            authors.order_by(\"name\"),\n+            [\n+                \"mith\",\n+                \"\" if connection.features.interprets_empty_strings_as_nulls else None,\n+                \"\",\n+            ],\n+            lambda a: a.name_part,\n+        )\n+\n     def test_expressions(self):\n         authors = Author.objects.annotate(\n             name_part=Right(\"name\", Value(3, output_field=IntegerField()))\n",
  "problem_statement": "Right() function on Oracle and SQLite returns improper value when the length is zero.\nDescription\n\t\nHi\nI have found that the RIGHT database function on Oracle returns the whole string instead of empty string when the given length is 0. You can't explicitly give 0 to the RIGHT function, but it may be computed by the database. Basic example (you can use any model with a CharField):\nfrom django.db.models.functions import Right, Length\nMyModel.objects.annotate(suffix=Right(\"foo\", Length(\"foo\") - Length(\"foo\")))\nOn PostgreSQL this will return an empty string under the field suffix, but on Oracle this will return the whole contents of the field foo. This is because Django uses the SUBSTR function on Oracle by multiplying the given length value by -1 and giving it as a position argument. I think it is not intended behavior and it should return the empty string as PostgreSQL does. Or at least be documented as a Note in the Right function documentation.\n",
  "hints_text": "Thanks for the report. SQLite is also affected. As far as I'm aware, it's enough to pass a substring length, e.g.: django/db/models/functions/text.py diff --git a/django/db/models/functions/text.py b/django/db/models/functions/text.py index fba2840c4b..f717213636 100644 a b class Right(Left): 276276 277277 def get_substr(self): 278278 return Substr( 279 self.source_expressions[0], self.source_expressions[1] * Value(-1) 279 self.source_expressions[0], self.source_expressions[1] * Value(-1), self.source_expressions[1], 280280 ) 281281 282282 Would you like to prepare a patch? (a regression test is required.)\nSure, I can take it. To which version should I make a patch? By the way greeting from MGA :)",
  "created_at": "2023-05-30T11:16:19Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"test_zero_length (db_functions.text.test_right.RightTests.test_zero_length)\"]",
  "PASS_TO_PASS": "[\"test_basic (db_functions.text.test_right.RightTests.test_basic)\", \"test_expressions (db_functions.text.test_right.RightTests.test_expressions)\", \"test_invalid_length (db_functions.text.test_right.RightTests.test_invalid_length)\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.775361",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}