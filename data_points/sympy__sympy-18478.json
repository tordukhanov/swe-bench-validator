{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18478",
  "base_commit": "ca020282f5eb70f20a6012776bcddd568bb05d8e",
  "patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -139,7 +139,7 @@ def flatten(cls, seq):\n                         o.is_finite is False) and not extra:\n                     # we know for sure the result will be nan\n                     return [S.NaN], [], None\n-                if coeff.is_Number:\n+                if coeff.is_Number or isinstance(coeff, AccumBounds):\n                     coeff += o\n                     if coeff is S.NaN and not extra:\n                         # we know for sure the result will be nan\n",
  "test_patch": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -463,6 +463,10 @@ def test_add():\n     ans = (-x*(x) - y*(-x)).expand()\n     assert e.subs(-y + 1, x) == ans\n \n+    #Test issue 18747\n+    assert (exp(x) + cos(x)).subs(x, oo) == oo\n+    assert Add(*[AccumBounds(-1, 1), oo]) == oo\n+    assert Add(*[oo, AccumBounds(-1, 1)]) == oo\n \n def test_subs_issue_4009():\n     assert (I*Symbol('a')).subs(1, 2) == I*Symbol('a')\ndiff --git a/sympy/tensor/tests/test_tensor_operators.py b/sympy/tensor/tests/test_tensor_operators.py\n--- a/sympy/tensor/tests/test_tensor_operators.py\n+++ b/sympy/tensor/tests/test_tensor_operators.py\n@@ -7,7 +7,6 @@\n from sympy import symbols, diag\n from sympy import Array, Rational\n \n-from sympy import sympify\n from random import randint\n \n \n@@ -191,21 +190,21 @@ def test_expand_partial_derivative_sum_rule():\n \n \n def test_expand_partial_derivative_constant_factor_rule():\n-    pos_random_int1 = sympify(randint(0, 1000))\n-    pos_random_int2 = sympify(randint(0, 1000))\n-    neg_random_int = sympify(randint(-1000, -1))\n+    nneg = randint(0, 1000)\n+    pos = randint(1, 1000)\n+    neg = -randint(1, 1000)\n \n-    c1 = Rational(pos_random_int1, pos_random_int2)\n-    c2 = Rational(neg_random_int, pos_random_int2)\n-    c3 = Rational(pos_random_int1, neg_random_int)\n+    c1 = Rational(nneg, pos)\n+    c2 = Rational(neg, pos)\n+    c3 = Rational(nneg, neg)\n \n-    expr2a = PartialDerivative(pos_random_int1*A(i), D(j))\n+    expr2a = PartialDerivative(nneg*A(i), D(j))\n     assert expr2a._expand_partial_derivative() ==\\\n-        pos_random_int1*PartialDerivative(A(i), D(j))\n+        nneg*PartialDerivative(A(i), D(j))\n \n-    expr2b = PartialDerivative(neg_random_int*A(i), D(j))\n+    expr2b = PartialDerivative(neg*A(i), D(j))\n     assert expr2b._expand_partial_derivative() ==\\\n-        neg_random_int*PartialDerivative(A(i), D(j))\n+        neg*PartialDerivative(A(i), D(j))\n \n     expr2ca = PartialDerivative(c1*A(i), D(j))\n     assert expr2ca._expand_partial_derivative() ==\\\n@@ -221,30 +220,30 @@ def test_expand_partial_derivative_constant_factor_rule():\n \n \n def test_expand_partial_derivative_full_linearity():\n-    pos_random_int1 = sympify(randint(0, 1000))\n-    pos_random_int2 = sympify(randint(0, 1000))\n-    neg_random_int = sympify(randint(-1000, -1))\n+    nneg = randint(0, 1000)\n+    pos = randint(1, 1000)\n+    neg = -randint(1, 1000)\n \n-    c1 = Rational(pos_random_int1, pos_random_int2)\n-    c2 = Rational(neg_random_int, pos_random_int2)\n-    c3 = Rational(pos_random_int1, neg_random_int)\n+    c1 = Rational(nneg, pos)\n+    c2 = Rational(neg, pos)\n+    c3 = Rational(nneg, neg)\n \n     # check full linearity\n \n-    expr3a = PartialDerivative(pos_random_int1*A(i) + pos_random_int2*B(i), D(j))\n+    expr3a = PartialDerivative(nneg*A(i) + pos*B(i), D(j))\n     assert expr3a._expand_partial_derivative() ==\\\n-        pos_random_int1*PartialDerivative(A(i), D(j))\\\n-        + pos_random_int2*PartialDerivative(B(i), D(j))\n+        nneg*PartialDerivative(A(i), D(j))\\\n+        + pos*PartialDerivative(B(i), D(j))\n \n-    expr3b = PartialDerivative(pos_random_int1*A(i) + neg_random_int*B(i), D(j))\n+    expr3b = PartialDerivative(nneg*A(i) + neg*B(i), D(j))\n     assert expr3b._expand_partial_derivative() ==\\\n-        pos_random_int1*PartialDerivative(A(i), D(j))\\\n-        + neg_random_int*PartialDerivative(B(i), D(j))\n+        nneg*PartialDerivative(A(i), D(j))\\\n+        + neg*PartialDerivative(B(i), D(j))\n \n-    expr3c = PartialDerivative(neg_random_int*A(i) + pos_random_int2*B(i), D(j))\n+    expr3c = PartialDerivative(neg*A(i) + pos*B(i), D(j))\n     assert expr3c._expand_partial_derivative() ==\\\n-        neg_random_int*PartialDerivative(A(i), D(j))\\\n-        + pos_random_int2*PartialDerivative(B(i), D(j))\n+        neg*PartialDerivative(A(i), D(j))\\\n+        + pos*PartialDerivative(B(i), D(j))\n \n     expr3d = PartialDerivative(c1*A(i) + c2*B(i), D(j))\n     assert expr3d._expand_partial_derivative() ==\\\n",
  "problem_statement": "Subs incorrectly evaluates\n`(x+cos(x)).subs(x,oo)` gives `oo`, but `(exp(x)+cos(x)).subs(x,oo)` gives `AccumBounds`. Why is that?\n",
  "hints_text": "It is an `Add.flatten` issue:\r\n```diff\r\ndiff --git a/sympy/core/add.py b/sympy/core/add.py\r\nindex 38ab6cd..d87816b 100644\r\n--- a/sympy/core/add.py\r\n+++ b/sympy/core/add.py\r\n@@ -139,8 +139,8 @@ def flatten(cls, seq):\r\n                         o.is_finite is False) and not extra:\r\n                     # we know for sure the result will be nan\r\n                     return [S.NaN], [], None\r\n-                if coeff.is_Number:\r\n-                    coeff += o\r\n+                if coeff.is_Number or isinstance(coeff, AccumBounds):\r\n+                    coeff = coeff + o if coeff.is_Number else coeff.__add__(o)\r\n                     if coeff is S.NaN and not extra:\r\n                         # we know for sure the result will be nan\r\n                         return [S.NaN], [], None\r\n```\r\nThe following fails in master:\r\n```python                         \r\n>>> Add(*[oo, AccumBounds(-1, 1)])\r\noo\r\n>>> Add(*list(reversed([oo, AccumBounds(-1, 1)])))\r\noo\r\n```",
  "created_at": "2020-01-27T09:18:44Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_add\"]",
  "PASS_TO_PASS": "[\"test_subs\", \"test_subs_Matrix\", \"test_subs_AccumBounds\", \"test_trigonometric\", \"test_powers\", \"test_logexppow\", \"test_bug\", \"test_subbug1\", \"test_subbug2\", \"test_dict_set\", \"test_dict_ambigous\", \"test_deriv_sub_bug3\", \"test_equality_subs1\", \"test_equality_subs2\", \"test_issue_3742\", \"test_subs_dict1\", \"test_mul\", \"test_subs_simple\", \"test_subs_constants\", \"test_subs_commutative\", \"test_subs_noncommutative\", \"test_subs_basic_funcs\", \"test_subs_wild\", \"test_subs_mixed\", \"test_division\", \"test_subs_issue_4009\", \"test_functions_subs\", \"test_derivative_subs\", \"test_derivative_subs2\", \"test_derivative_subs3\", \"test_issue_5284\", \"test_subs_iter\", \"test_subs_dict\", \"test_no_arith_subs_on_floats\", \"test_issue_5651\", \"test_issue_6075\", \"test_issue_6079\", \"test_issue_4680\", \"test_issue_6158\", \"test_Function_subs\", \"test_simultaneous_subs\", \"test_issue_6419_6421\", \"test_issue_6559\", \"test_issue_5261\", \"test_issue_6923\", \"test_2arg_hack\", \"test_noncommutative_subs\", \"test_issue_2877\", \"test_issue_5910\", \"test_issue_5217\", \"test_issue_10829\", \"test_pow_eval_subs_no_cache\", \"test_RootOf_issue_10092\", \"test_issue_8886\", \"test_issue_12657\", \"test_recurse_Application_args\", \"test_Subs_subs\", \"test_issue_13333\", \"test_issue_15234\", \"test_issue_6976\", \"test_invalid_partial_derivative_valence\", \"test_tensor_partial_deriv\", \"test_replace_arrays_partial_derivative\", \"test_expand_partial_derivative_sum_rule\", \"test_expand_partial_derivative_constant_factor_rule\", \"test_expand_partial_derivative_full_linearity\", \"test_expand_partial_derivative_product_rule\", \"test_eval_partial_derivative_expr_by_symbol\", \"test_eval_partial_derivative_single_tensors_by_scalar\", \"test_eval_partial_derivative_single_1st_rank_tensors_by_tensor\", \"test_eval_partial_derivative_single_2nd_rank_tensors_by_tensor\", \"test_eval_partial_derivative_divergence_type\", \"test_eval_partial_derivative_expr1\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.123565",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}