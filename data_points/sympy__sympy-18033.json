{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-18033",
  "base_commit": "cab3c1cbfa415ced4ea4e46542ae7eb7044df6d6",
  "patch": "diff --git a/sympy/codegen/array_utils.py b/sympy/codegen/array_utils.py\n--- a/sympy/codegen/array_utils.py\n+++ b/sympy/codegen/array_utils.py\n@@ -571,7 +571,6 @@ def nest_permutation(self):\n         >>> from sympy.codegen.array_utils import (CodegenArrayPermuteDims, CodegenArrayTensorProduct, nest_permutation)\n         >>> from sympy import MatrixSymbol\n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n \n         >>> M = MatrixSymbol(\"M\", 3, 3)\n         >>> N = MatrixSymbol(\"N\", 3, 3)\n@@ -1055,7 +1054,6 @@ def parse_indexed_expression(expr, first_indices=None):\n     >>> from sympy.codegen.array_utils import parse_indexed_expression\n     >>> from sympy import MatrixSymbol, Sum, symbols\n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n \n     >>> i, j, k, d = symbols(\"i j k d\")\n     >>> M = MatrixSymbol(\"M\", d, d)\ndiff --git a/sympy/combinatorics/generators.py b/sympy/combinatorics/generators.py\n--- a/sympy/combinatorics/generators.py\n+++ b/sympy/combinatorics/generators.py\n@@ -15,7 +15,6 @@ def symmetric(n):\n     ========\n \n     >>> from sympy.combinatorics.permutations import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.generators import symmetric\n     >>> list(symmetric(3))\n     [(2), (1 2), (2)(0 1), (0 1 2), (0 2 1), (0 2)]\n@@ -32,7 +31,6 @@ def cyclic(n):\n     ========\n \n     >>> from sympy.combinatorics.permutations import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.generators import cyclic\n     >>> list(cyclic(5))\n     [(4), (0 1 2 3 4), (0 2 4 1 3),\n@@ -57,7 +55,6 @@ def alternating(n):\n     ========\n \n     >>> from sympy.combinatorics.permutations import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.generators import alternating\n     >>> list(alternating(3))\n     [(2), (0 1 2), (0 2 1)]\n@@ -80,7 +77,6 @@ def dihedral(n):\n     ========\n \n     >>> from sympy.combinatorics.permutations import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.generators import dihedral\n     >>> list(dihedral(3))\n     [(2), (0 2), (0 1 2), (1 2), (0 2 1), (2)(0 1)]\ndiff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -445,7 +445,6 @@ def group_isomorphism(G, H, isomorphism=True):\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.perm_groups import PermutationGroup\n     >>> from sympy.combinatorics.free_groups import free_group\n     >>> from sympy.combinatorics.fp_groups import FpGroup\ndiff --git a/sympy/combinatorics/named_groups.py b/sympy/combinatorics/named_groups.py\n--- a/sympy/combinatorics/named_groups.py\n+++ b/sympy/combinatorics/named_groups.py\n@@ -20,7 +20,6 @@ def AbelianGroup(*cyclic_orders):\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.named_groups import AbelianGroup\n     >>> AbelianGroup(3, 4)\n     PermutationGroup([\ndiff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -36,7 +36,6 @@ class PermutationGroup(Basic):\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.permutations import Cycle\n     >>> from sympy.combinatorics.polyhedron import Polyhedron\n     >>> from sympy.combinatorics.perm_groups import PermutationGroup\n@@ -1114,7 +1113,6 @@ def coset_factor(self, g, factor_index=False):\n         ========\n \n         >>> from sympy.combinatorics import Permutation, PermutationGroup\n-        >>> Permutation.print_cyclic = True\n         >>> a = Permutation(0, 1, 3, 7, 6, 4)(2, 5)\n         >>> b = Permutation(0, 1, 3, 2)(4, 5, 7, 6)\n         >>> G = PermutationGroup([a, b])\n@@ -1239,7 +1237,6 @@ def coset_rank(self, g):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> a = Permutation(0, 1, 3, 7, 6, 4)(2, 5)\n         >>> b = Permutation(0, 1, 3, 2)(4, 5, 7, 6)\n@@ -1307,7 +1304,6 @@ def degree(self):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> a = Permutation([1, 0, 2])\n         >>> G = PermutationGroup([a])\n@@ -1423,7 +1419,6 @@ def derived_subgroup(self):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> a = Permutation([1, 0, 2, 4, 3])\n         >>> b = Permutation([0, 1, 3, 2, 4])\n@@ -1471,7 +1466,6 @@ def generate(self, method=\"coset\", af=False):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics import PermutationGroup\n         >>> from sympy.combinatorics.polyhedron import tetrahedron\n \n@@ -1518,7 +1512,6 @@ def generate_dimino(self, af=False):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> a = Permutation([0, 2, 1, 3])\n         >>> b = Permutation([0, 2, 3, 1])\n@@ -1579,7 +1572,6 @@ def generate_schreier_sims(self, af=False):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> a = Permutation([0, 2, 1, 3])\n         >>> b = Permutation([0, 2, 3, 1])\n@@ -1649,7 +1641,6 @@ def generators(self):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> a = Permutation([0, 2, 1])\n         >>> b = Permutation([1, 0, 2])\n@@ -1675,7 +1666,6 @@ def contains(self, g, strict=True):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n \n         >>> a = Permutation(1, 2)\n@@ -1750,7 +1740,6 @@ def is_abelian(self):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> a = Permutation([0, 2, 1])\n         >>> b = Permutation([1, 0, 2])\n@@ -2055,7 +2044,6 @@ def is_normal(self, gr, strict=True):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> a = Permutation([1, 2, 0])\n         >>> b = Permutation([1, 0, 2])\n@@ -2725,7 +2713,6 @@ def orbit_rep(self, alpha, beta, schreier_vector=None):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> from sympy.combinatorics.named_groups import AlternatingGroup\n         >>> G = AlternatingGroup(5)\n@@ -2768,7 +2755,6 @@ def orbit_transversal(self, alpha, pairs=False):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> from sympy.combinatorics.named_groups import DihedralGroup\n         >>> G = DihedralGroup(6)\n@@ -3161,7 +3147,6 @@ def make_perm(self, n, seed=None):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> a, b = [Permutation([1, 0, 3, 2]), Permutation([1, 3, 0, 2])]\n         >>> G = PermutationGroup([a, b])\n@@ -3696,7 +3681,6 @@ def stabilizer(self, alpha):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> from sympy.combinatorics.perm_groups import PermutationGroup\n         >>> from sympy.combinatorics.named_groups import DihedralGroup\n         >>> G = DihedralGroup(6)\n@@ -4919,7 +4903,6 @@ def _orbit_transversal(degree, generators, alpha, pairs, af=False, slp=False):\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.named_groups import DihedralGroup\n     >>> from sympy.combinatorics.perm_groups import _orbit_transversal\n     >>> G = DihedralGroup(6)\n@@ -4972,7 +4955,6 @@ def _stabilizer(degree, generators, alpha):\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.perm_groups import _stabilizer\n     >>> from sympy.combinatorics.named_groups import DihedralGroup\n     >>> G = DihedralGroup(6)\ndiff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -23,7 +23,6 @@ def _af_rmul(a, b):\n     ========\n \n     >>> from sympy.combinatorics.permutations import _af_rmul, Permutation\n-    >>> Permutation.print_cyclic = False\n \n     >>> a, b = [1, 0, 2], [0, 2, 1]\n     >>> _af_rmul(a, b)\n@@ -57,7 +56,6 @@ def _af_rmuln(*abc):\n     ========\n \n     >>> from sympy.combinatorics.permutations import _af_rmul, Permutation\n-    >>> Permutation.print_cyclic = False\n \n     >>> a, b = [1, 0, 2], [0, 2, 1]\n     >>> _af_rmul(a, b)\n@@ -179,7 +177,6 @@ def _af_pow(a, n):\n     ========\n \n     >>> from sympy.combinatorics.permutations import Permutation, _af_pow\n-    >>> Permutation.print_cyclic = False\n     >>> p = Permutation([2, 0, 3, 1])\n     >>> p.order()\n     4\n@@ -358,7 +355,6 @@ def list(self, size=None):\n \n         >>> from sympy.combinatorics.permutations import Cycle\n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n         >>> p = Cycle(2, 3)(4, 5)\n         >>> p.list()\n         [0, 1, 3, 2, 5, 4]\n@@ -479,7 +475,8 @@ class Permutation(Atom):\n     original ordering, not the elements (a, b, etc...) themselves.\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = False\n+    >>> from sympy.interactive import init_printing\n+    >>> init_printing(perm_cyclic=False, pretty_print=False)\n \n     Permutations Notation\n     =====================\n@@ -662,17 +659,17 @@ class Permutation(Atom):\n \n     There are a few things to note about how Permutations are printed.\n \n-    1) If you prefer one form (array or cycle) over another, you can set that\n-    with the print_cyclic flag.\n+    1) If you prefer one form (array or cycle) over another, you can set\n+    ``init_printing`` with the ``perm_cyclic`` flag.\n \n-    >>> Permutation(1, 2)(4, 5)(3, 4)\n+    >>> from sympy import init_printing\n+    >>> p = Permutation(1, 2)(4, 5)(3, 4)\n+    >>> p\n     Permutation([0, 2, 1, 4, 5, 3])\n-    >>> p = _\n \n-    >>> Permutation.print_cyclic = True\n+    >>> init_printing(perm_cyclic=True, pretty_print=False)\n     >>> p\n     (1 2)(3 4 5)\n-    >>> Permutation.print_cyclic = False\n \n     2) Regardless of the setting, a list of elements in the array for cyclic\n     form can be obtained and either of those can be copied and supplied as\n@@ -688,6 +685,7 @@ class Permutation(Atom):\n     3) Printing is economical in that as little as possible is printed while\n     retaining all information about the size of the permutation:\n \n+    >>> init_printing(perm_cyclic=False, pretty_print=False)\n     >>> Permutation([1, 0, 2, 3])\n     Permutation([1, 0, 2, 3])\n     >>> Permutation([1, 0, 2, 3], size=20)\n@@ -696,10 +694,10 @@ class Permutation(Atom):\n     Permutation([1, 0, 2, 4, 3], size=20)\n \n     >>> p = Permutation([1, 0, 2, 3])\n-    >>> Permutation.print_cyclic = True\n+    >>> init_printing(perm_cyclic=True, pretty_print=False)\n     >>> p\n     (3)(0 1)\n-    >>> Permutation.print_cyclic = False\n+    >>> init_printing(perm_cyclic=False, pretty_print=False)\n \n     The 2 was not printed but it is still there as can be seen with the\n     array_form and size methods:\n@@ -776,7 +774,7 @@ class Permutation(Atom):\n     Permutations:\n \n     >>> p(['zero', 'one', 'four', 'two'])\n-     ['one', 'zero', 'four', 'two']\n+    ['one', 'zero', 'four', 'two']\n     >>> p('zo42')\n     ['o', 'z', '4', '2']\n \n@@ -836,7 +834,8 @@ def __new__(cls, *args, **kwargs):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n \n         Permutations entered in array-form are left unaltered:\n \n@@ -971,8 +970,9 @@ def _af_new(cls, perm):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Perm\n-        >>> Perm.print_cyclic = False\n-        >>> a = [2,1,3,0]\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n+        >>> a = [2, 1, 3, 0]\n         >>> p = Perm._af_new(a)\n         >>> p\n         Permutation([2, 1, 3, 0])\n@@ -996,7 +996,6 @@ def array_form(self):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n         >>> p = Permutation([[2, 0], [3, 1]])\n         >>> p.array_form\n         [2, 3, 0, 1]\n@@ -1009,29 +1008,6 @@ def array_form(self):\n         \"\"\"\n         return self._array_form[:]\n \n-    def __repr__(self):\n-        if Permutation.print_cyclic:\n-            if not self.size:\n-                return 'Permutation()'\n-            # before taking Cycle notation, see if the last element is\n-            # a singleton and move it to the head of the string\n-            s = Cycle(self)(self.size - 1).__repr__()[len('Cycle'):]\n-            last = s.rfind('(')\n-            if not last == 0 and ',' not in s[last:]:\n-                s = s[last:] + s[:last]\n-            return 'Permutation%s' %s\n-        else:\n-            s = self.support()\n-            if not s:\n-                if self.size < 5:\n-                    return 'Permutation(%s)' % str(self.array_form)\n-                return 'Permutation([], size=%s)' % self.size\n-            trim = str(self.array_form[:s[-1] + 1]) + ', size=%s' % self.size\n-            use = full = str(self.array_form)\n-            if len(trim) < len(full):\n-                use = trim\n-            return 'Permutation(%s)' % use\n-\n     def list(self, size=None):\n         \"\"\"Return the permutation as an explicit list, possibly\n         trimming unmoved elements if size is less than the maximum\n@@ -1042,7 +1018,6 @@ def list(self, size=None):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n         >>> p = Permutation(2, 3)(4, 5)\n         >>> p.list()\n         [0, 1, 3, 2, 5, 4]\n@@ -1083,7 +1058,6 @@ def cyclic_form(self):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n         >>> p = Permutation([0, 3, 1, 2])\n         >>> p.cyclic_form\n         [[1, 3, 2]]\n@@ -1179,7 +1153,6 @@ def __add__(self, other):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n         >>> I = Permutation([0, 1, 2, 3])\n         >>> a = Permutation([2, 1, 3, 0])\n         >>> I + a.rank() == a\n@@ -1218,7 +1191,6 @@ def rmul(*args):\n         ========\n \n         >>> from sympy.combinatorics.permutations import _af_rmul, Permutation\n-        >>> Permutation.print_cyclic = False\n \n         >>> a, b = [1, 0, 2], [0, 2, 1]\n         >>> a = Permutation(a); b = Permutation(b)\n@@ -1283,7 +1255,6 @@ def __mul__(self, other):\n         ========\n \n         >>> from sympy.combinatorics.permutations import _af_rmul, Permutation\n-        >>> Permutation.print_cyclic = False\n \n         >>> a, b = [1, 0, 2], [0, 2, 1]\n         >>> a = Permutation(a); b = Permutation(b)\n@@ -1303,6 +1274,8 @@ def __mul__(self, other):\n         It is acceptable for the arrays to have different lengths; the shorter\n         one will be padded to match the longer one:\n \n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> b*Permutation([1, 0])\n         Permutation([1, 2, 0])\n         >>> Permutation([1, 0])*b\n@@ -1364,8 +1337,9 @@ def __pow__(self, n):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n-        >>> p = Permutation([2,0,3,1])\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n+        >>> p = Permutation([2, 0, 3, 1])\n         >>> p.order()\n         4\n         >>> p**4\n@@ -1404,7 +1378,6 @@ def __xor__(self, h):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> p = Permutation(1, 2, 9)\n         >>> q = Permutation(6, 9, 8)\n         >>> p*q != q*p\n@@ -1519,7 +1492,6 @@ def from_sequence(self, i, key=None):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n \n         >>> Permutation.from_sequence('SymPy')\n         (4)(0 1 3)\n@@ -1545,8 +1517,9 @@ def __invert__(self):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n-        >>> p = Permutation([[2,0], [3,1]])\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n+        >>> p = Permutation([[2, 0], [3, 1]])\n         >>> ~p\n         Permutation([2, 3, 0, 1])\n         >>> _ == p**-1\n@@ -1569,6 +1542,10 @@ def __iter__(self):\n         for i in self.array_form:\n             yield i\n \n+    def __repr__(self):\n+        from sympy.printing.repr import srepr\n+        return srepr(self)\n+\n     def __call__(self, *i):\n         \"\"\"\n         Allows applying a permutation instance as a bijective function.\n@@ -1676,7 +1653,8 @@ def unrank_nonlex(self, n, r):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> Permutation.unrank_nonlex(4, 5)\n         Permutation([2, 0, 3, 1])\n         >>> Permutation.unrank_nonlex(4, -1)\n@@ -1743,7 +1721,8 @@ def next_nonlex(self):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> p = Permutation([2, 0, 3, 1]); p.rank_nonlex()\n         5\n         >>> p = p.next_nonlex(); p\n@@ -2129,7 +2108,8 @@ def commutator(self, x):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> p = Permutation([0, 2, 3, 1])\n         >>> x = Permutation([2, 0, 3, 1])\n         >>> c = p.commutator(x); c\n@@ -2209,7 +2189,8 @@ def order(self):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> p = Permutation([3, 1, 5, 2, 4, 0])\n         >>> p.order()\n         4\n@@ -2254,7 +2235,6 @@ def cycle_structure(self):\n         ========\n \n         >>> from sympy.combinatorics import Permutation\n-        >>> Permutation.print_cyclic = True\n         >>> Permutation(3).cycle_structure\n         {1: 4}\n         >>> Permutation(0, 4, 3)(1, 2)(5, 6).cycle_structure\n@@ -2349,7 +2329,6 @@ def inversion_vector(self):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n         >>> p = Permutation([4, 8, 0, 7, 1, 5, 3, 6, 2])\n         >>> p.inversion_vector()\n         [4, 7, 0, 5, 0, 2, 1, 1]\n@@ -2364,13 +2343,12 @@ def inversion_vector(self):\n         >>> while p:\n         ...     print('%s %s %s' % (p, p.inversion_vector(), p.rank()))\n         ...     p = p.next_lex()\n-        ...\n-        Permutation([0, 1, 2]) [0, 0] 0\n-        Permutation([0, 2, 1]) [0, 1] 1\n-        Permutation([1, 0, 2]) [1, 0] 2\n-        Permutation([1, 2, 0]) [1, 1] 3\n-        Permutation([2, 0, 1]) [2, 0] 4\n-        Permutation([2, 1, 0]) [2, 1] 5\n+        (2) [0, 0] 0\n+        (1 2) [0, 1] 1\n+        (2)(0 1) [1, 0] 2\n+        (0 1 2) [1, 1] 3\n+        (0 2 1) [2, 0] 4\n+        (0 2) [2, 1] 5\n \n         See Also\n         ========\n@@ -2440,6 +2418,8 @@ def unrank_trotterjohnson(cls, size, rank):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> Permutation.unrank_trotterjohnson(5, 10)\n         Permutation([0, 3, 1, 2, 4])\n \n@@ -2479,7 +2459,8 @@ def next_trotterjohnson(self):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> p = Permutation([3, 0, 2, 1])\n         >>> p.rank_trotterjohnson()\n         4\n@@ -2530,7 +2511,8 @@ def get_precedence_matrix(self):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> p = Permutation.josephus(3, 6, 1)\n         >>> p\n         Permutation([2, 5, 3, 1, 4, 0])\n@@ -2761,7 +2743,8 @@ def from_inversion_vector(cls, inversion):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> Permutation.from_inversion_vector([3, 2, 1, 0, 0])\n         Permutation([3, 2, 1, 0, 4, 5])\n \n@@ -2807,7 +2790,8 @@ def unrank_lex(cls, size, rank):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n+        >>> init_printing(perm_cyclic=False, pretty_print=False)\n         >>> a = Permutation.unrank_lex(5, 10)\n         >>> a.rank()\n         10\n@@ -2832,10 +2816,8 @@ def unrank_lex(cls, size, rank):\n             psize = new_psize\n         return cls._af_new(perm_array)\n \n-    # global flag to control how permutations are printed\n-    # when True, Permutation([0, 2, 1, 3]) -> Cycle(1, 2)\n-    # when False, Permutation([0, 2, 1, 3]) -> Permutation([0, 2, 1])\n-    print_cyclic = True\n+    # XXX Deprecated flag\n+    print_cyclic = None\n \n \n def _merge(arr, temp, left, mid, right):\ndiff --git a/sympy/combinatorics/polyhedron.py b/sympy/combinatorics/polyhedron.py\n--- a/sympy/combinatorics/polyhedron.py\n+++ b/sympy/combinatorics/polyhedron.py\n@@ -60,8 +60,9 @@ def __new__(cls, corners, faces=[], pgroup=[]):\n         ========\n \n         >>> from sympy.combinatorics.permutations import Permutation\n-        >>> Permutation.print_cyclic = False\n+        >>> from sympy.interactive import init_printing\n         >>> from sympy.abc import w, x, y, z\n+        >>> init_printing(pretty_print=False, perm_cyclic=False)\n \n         Here we construct the Polyhedron object for a tetrahedron.\n \ndiff --git a/sympy/combinatorics/tensor_can.py b/sympy/combinatorics/tensor_can.py\n--- a/sympy/combinatorics/tensor_can.py\n+++ b/sympy/combinatorics/tensor_can.py\n@@ -918,7 +918,6 @@ def bsgs_direct_product(base1, gens1, base2, gens2, signed=True):\n \n     >>> from sympy.combinatorics import Permutation\n     >>> from sympy.combinatorics.tensor_can import (get_symmetric_group_sgs, bsgs_direct_product)\n-    >>> Permutation.print_cyclic = True\n     >>> base1, gens1 = get_symmetric_group_sgs(1)\n     >>> base2, gens2 = get_symmetric_group_sgs(2)\n     >>> bsgs_direct_product(base1, gens1, base2, gens2)\n@@ -953,7 +952,6 @@ def get_symmetric_group_sgs(n, antisym=False):\n \n     >>> from sympy.combinatorics import Permutation\n     >>> from sympy.combinatorics.tensor_can import get_symmetric_group_sgs\n-    >>> Permutation.print_cyclic = True\n     >>> get_symmetric_group_sgs(3)\n     ([0, 1], [(4)(0 1), (4)(1 2)])\n     \"\"\"\n@@ -1028,7 +1026,6 @@ def get_minimal_bsgs(base, gens):\n \n     >>> from sympy.combinatorics import Permutation\n     >>> from sympy.combinatorics.tensor_can import get_minimal_bsgs\n-    >>> Permutation.print_cyclic = True\n     >>> riemann_bsgs1 = ([2, 0], ([Permutation(5)(0, 1)(4, 5), Permutation(5)(0, 2)(1, 3)]))\n     >>> get_minimal_bsgs(*riemann_bsgs1)\n     ([0, 2], [(0 1)(4 5), (5)(0 2)(1 3), (2 3)(4 5)])\n@@ -1059,7 +1056,6 @@ def tensor_gens(base, gens, list_free_indices, sym=0):\n \n     >>> from sympy.combinatorics import Permutation\n     >>> from sympy.combinatorics.tensor_can import tensor_gens, get_symmetric_group_sgs\n-    >>> Permutation.print_cyclic = True\n \n     two symmetric tensors with 3 indices without free indices\n \n@@ -1176,7 +1172,6 @@ def gens_products(*v):\n \n     >>> from sympy.combinatorics import Permutation\n     >>> from sympy.combinatorics.tensor_can import get_symmetric_group_sgs, gens_products\n-    >>> Permutation.print_cyclic = True\n     >>> base, gens = get_symmetric_group_sgs(2)\n     >>> gens_products((base, gens, [[], []], 0))\n     (6, [0, 2], [(5)(0 1), (5)(2 3), (5)(0 2)(1 3)])\ndiff --git a/sympy/combinatorics/util.py b/sympy/combinatorics/util.py\n--- a/sympy/combinatorics/util.py\n+++ b/sympy/combinatorics/util.py\n@@ -143,7 +143,6 @@ def _distribute_gens_by_base(base, gens):\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.named_groups import DihedralGroup\n     >>> from sympy.combinatorics.util import _distribute_gens_by_base\n     >>> D = DihedralGroup(3)\n@@ -211,7 +210,6 @@ def _handle_precomputed_bsgs(base, strong_gens, transversals=None,\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.named_groups import DihedralGroup\n     >>> from sympy.combinatorics.util import _handle_precomputed_bsgs\n     >>> D = DihedralGroup(3)\n@@ -271,7 +269,6 @@ def _orbits_transversals_from_bsgs(base, strong_gens_distr,\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.named_groups import SymmetricGroup\n     >>> from sympy.combinatorics.util import _orbits_transversals_from_bsgs\n     >>> from sympy.combinatorics.util import (_orbits_transversals_from_bsgs,\n@@ -415,7 +412,6 @@ def _strip(g, base, orbits, transversals):\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.named_groups import SymmetricGroup\n     >>> from sympy.combinatorics.permutations import Permutation\n     >>> from sympy.combinatorics.util import _strip\n@@ -509,7 +505,6 @@ def _strong_gens_from_distr(strong_gens_distr):\n     ========\n \n     >>> from sympy.combinatorics import Permutation\n-    >>> Permutation.print_cyclic = True\n     >>> from sympy.combinatorics.named_groups import SymmetricGroup\n     >>> from sympy.combinatorics.util import (_strong_gens_from_distr,\n     ... _distribute_gens_by_base)\ndiff --git a/sympy/interactive/printing.py b/sympy/interactive/printing.py\n--- a/sympy/interactive/printing.py\n+++ b/sympy/interactive/printing.py\n@@ -550,13 +550,16 @@ def init_printing(pretty_print=True, order=None, use_unicode=None,\n         _stringify_func = stringify_func\n \n         if pretty_print:\n-            stringify_func = lambda expr: \\\n+            stringify_func = lambda expr, **settings: \\\n                              _stringify_func(expr, order=order,\n                                              use_unicode=use_unicode,\n                                              wrap_line=wrap_line,\n-                                             num_columns=num_columns)\n+                                             num_columns=num_columns,\n+                                             **settings)\n         else:\n-            stringify_func = lambda expr: _stringify_func(expr, order=order)\n+            stringify_func = \\\n+                lambda expr, **settings: _stringify_func(\n+                    expr, order=order, **settings)\n \n     if in_ipython:\n         mode_in_settings = settings.pop(\"mode\", None)\ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -141,6 +141,7 @@ class LatexPrinter(Printer):\n         \"imaginary_unit\": \"i\",\n         \"gothic_re_im\": False,\n         \"decimal_separator\": \"period\",\n+        \"perm_cyclic\": True,\n     }\n \n     def __init__(self, settings=None):\n@@ -374,7 +375,35 @@ def _print_Cycle(self, expr):\n         term_tex = term_tex.replace(']', r\"\\right)\")\n         return term_tex\n \n-    _print_Permutation = _print_Cycle\n+    def _print_Permutation(self, expr):\n+        from sympy.combinatorics.permutations import Permutation\n+        from sympy.utilities.exceptions import SymPyDeprecationWarning\n+\n+        perm_cyclic = Permutation.print_cyclic\n+        if perm_cyclic is not None:\n+            SymPyDeprecationWarning(\n+                feature=\"Permutation.print_cyclic = {}\".format(perm_cyclic),\n+                useinstead=\"init_printing(perm_cyclic={})\"\n+                .format(perm_cyclic),\n+                issue=15201,\n+                deprecated_since_version=\"1.6\").warn()\n+        else:\n+            perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n+\n+        if perm_cyclic:\n+            return self._print_Cycle(expr)\n+\n+        if expr.size == 0:\n+            return r\"\\left( \\right)\"\n+\n+        lower = [self._print(arg) for arg in expr.array_form]\n+        upper = [self._print(arg) for arg in range(len(lower))]\n+\n+        row1 = \" & \".join(upper)\n+        row2 = \" & \".join(lower)\n+        mat = r\" \\\\ \".join((row1, row2))\n+        return r\"\\begin{pmatrix} %s \\end{pmatrix}\" % mat\n+\n \n     def _print_Float(self, expr):\n         # Based off of that in StrPrinter\n@@ -2501,7 +2530,7 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n           mat_delim=\"[\", mat_str=None, mode=\"plain\", mul_symbol=None,\n           order=None, symbol_names=None, root_notation=True,\n           mat_symbol_style=\"plain\", imaginary_unit=\"i\", gothic_re_im=False,\n-          decimal_separator=\"period\" ):\n+          decimal_separator=\"period\", perm_cyclic=True):\n     r\"\"\"Convert the given expression to LaTeX string representation.\n \n     Parameters\n@@ -2702,6 +2731,7 @@ def latex(expr, fold_frac_powers=False, fold_func_brackets=False,\n         'imaginary_unit': imaginary_unit,\n         'gothic_re_im': gothic_re_im,\n         'decimal_separator': decimal_separator,\n+        'perm_cyclic' : perm_cyclic,\n     }\n \n     return LatexPrinter(settings).doprint(expr)\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -17,6 +17,7 @@\n from sympy.printing.str import sstr\n from sympy.utilities import default_sort_key\n from sympy.utilities.iterables import has_variety\n+from sympy.utilities.exceptions import SymPyDeprecationWarning\n \n from sympy.printing.pretty.stringpict import prettyForm, stringPict\n from sympy.printing.pretty.pretty_symbology import xstr, hobj, vobj, xobj, \\\n@@ -42,6 +43,7 @@ class PrettyPrinter(Printer):\n         \"root_notation\": True,\n         \"mat_symbol_style\": \"plain\",\n         \"imaginary_unit\": \"i\",\n+        \"perm_cyclic\": True\n     }\n \n     def __init__(self, settings=None):\n@@ -387,6 +389,41 @@ def _print_Cycle(self, dc):\n             cyc = prettyForm(*cyc.right(l))\n         return cyc\n \n+    def _print_Permutation(self, expr):\n+        from ..str import sstr\n+        from sympy.combinatorics.permutations import Permutation, Cycle\n+\n+        perm_cyclic = Permutation.print_cyclic\n+        if perm_cyclic is not None:\n+            SymPyDeprecationWarning(\n+                feature=\"Permutation.print_cyclic = {}\".format(perm_cyclic),\n+                useinstead=\"init_printing(perm_cyclic={})\"\n+                .format(perm_cyclic),\n+                issue=15201,\n+                deprecated_since_version=\"1.6\").warn()\n+        else:\n+            perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n+\n+        if perm_cyclic:\n+            return self._print_Cycle(Cycle(expr))\n+\n+        lower = expr.array_form\n+        upper = list(range(len(lower)))\n+\n+        result = stringPict('')\n+        first = True\n+        for u, l in zip(upper, lower):\n+            s1 = self._print(u)\n+            s2 = self._print(l)\n+            col = prettyForm(*s1.below(s2))\n+            if first:\n+                first = False\n+            else:\n+                col = prettyForm(*col.left(\" \"))\n+            result = prettyForm(*result.right(col))\n+        return prettyForm(*result.parens())\n+\n+\n     def _print_Integral(self, integral):\n         f = integral.function\n \n@@ -2613,9 +2650,7 @@ def pretty(expr, **settings):\n         pretty_use_unicode(uflag)\n \n \n-def pretty_print(expr, wrap_line=True, num_columns=None, use_unicode=None,\n-                 full_prec=\"auto\", order=None, use_unicode_sqrt_char=True,\n-                 root_notation = True, mat_symbol_style=\"plain\", imaginary_unit=\"i\"):\n+def pretty_print(expr, **kwargs):\n     \"\"\"Prints expr in pretty form.\n \n     pprint is just a shortcut for this function.\n@@ -2658,11 +2693,7 @@ def pretty_print(expr, wrap_line=True, num_columns=None, use_unicode=None,\n         Letter to use for imaginary unit when use_unicode is True.\n         Can be \"i\" (default) or \"j\".\n     \"\"\"\n-    print(pretty(expr, wrap_line=wrap_line, num_columns=num_columns,\n-                 use_unicode=use_unicode, full_prec=full_prec, order=order,\n-                 use_unicode_sqrt_char=use_unicode_sqrt_char,\n-                 root_notation=root_notation, mat_symbol_style=mat_symbol_style,\n-                 imaginary_unit=imaginary_unit))\n+    print(pretty(expr, **kwargs))\n \n pprint = pretty_print\n \ndiff --git a/sympy/printing/repr.py b/sympy/printing/repr.py\n--- a/sympy/printing/repr.py\n+++ b/sympy/printing/repr.py\n@@ -8,16 +8,19 @@\n from __future__ import print_function, division\n \n from sympy.core.function import AppliedUndef\n-from .printer import Printer\n from mpmath.libmp import repr_dps, to_str as mlib_to_str\n from sympy.core.compatibility import range, string_types\n \n+from .printer import Printer\n+from .str import sstr\n+\n \n class ReprPrinter(Printer):\n     printmethod = \"_sympyrepr\"\n \n     _default_settings = {\n-        \"order\": None\n+        \"order\": None,\n+        \"perm_cyclic\" : True,\n     }\n \n     def reprify(self, args, sep):\n@@ -57,7 +60,41 @@ def _print_Cycle(self, expr):\n         return expr.__repr__()\n \n     def _print_Permutation(self, expr):\n-        return expr.__repr__()\n+        from sympy.combinatorics.permutations import Permutation, Cycle\n+        from sympy.utilities.exceptions import SymPyDeprecationWarning\n+\n+        perm_cyclic = Permutation.print_cyclic\n+        if perm_cyclic is not None:\n+            SymPyDeprecationWarning(\n+                feature=\"Permutation.print_cyclic = {}\".format(perm_cyclic),\n+                useinstead=\"init_printing(perm_cyclic={})\"\n+                .format(perm_cyclic),\n+                issue=15201,\n+                deprecated_since_version=\"1.6\").warn()\n+        else:\n+            perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n+\n+        if perm_cyclic:\n+            if not expr.size:\n+                return 'Permutation()'\n+            # before taking Cycle notation, see if the last element is\n+            # a singleton and move it to the head of the string\n+            s = Cycle(expr)(expr.size - 1).__repr__()[len('Cycle'):]\n+            last = s.rfind('(')\n+            if not last == 0 and ',' not in s[last:]:\n+                s = s[last:] + s[:last]\n+            return 'Permutation%s' %s\n+        else:\n+            s = expr.support()\n+            if not s:\n+                if expr.size < 5:\n+                    return 'Permutation(%s)' % str(expr.array_form)\n+                return 'Permutation([], size=%s)' % expr.size\n+            trim = str(expr.array_form[:s[-1] + 1]) + ', size=%s' % expr.size\n+            use = full = str(expr.array_form)\n+            if len(trim) < len(full):\n+                use = trim\n+            return 'Permutation(%s)' % use\n \n     def _print_Function(self, expr):\n         r = self._print(expr.func)\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -22,6 +22,7 @@ class StrPrinter(Printer):\n         \"full_prec\": \"auto\",\n         \"sympy_integers\": False,\n         \"abbrev\": False,\n+        \"perm_cyclic\": True,\n     }\n \n     _relationals = dict()\n@@ -354,7 +355,20 @@ def _print_Cycle(self, expr):\n \n     def _print_Permutation(self, expr):\n         from sympy.combinatorics.permutations import Permutation, Cycle\n-        if Permutation.print_cyclic:\n+        from sympy.utilities.exceptions import SymPyDeprecationWarning\n+\n+        perm_cyclic = Permutation.print_cyclic\n+        if perm_cyclic is not None:\n+            SymPyDeprecationWarning(\n+                feature=\"Permutation.print_cyclic = {}\".format(perm_cyclic),\n+                useinstead=\"init_printing(perm_cyclic={})\"\n+                .format(perm_cyclic),\n+                issue=15201,\n+                deprecated_since_version=\"1.6\").warn()\n+        else:\n+            perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n+\n+        if perm_cyclic:\n             if not expr.size:\n                 return '()'\n             # before taking Cycle notation, see if the last element is\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -7,7 +7,10 @@\n from sympy.core.singleton import S\n from sympy.combinatorics.permutations import (Permutation, _af_parity,\n     _af_rmul, _af_rmuln, Cycle)\n-from sympy.utilities.pytest import raises\n+from sympy.printing import sstr, srepr, pretty, latex\n+from sympy.utilities.pytest import raises, SymPyDeprecationWarning, \\\n+    warns_deprecated_sympy\n+\n \n rmul = Permutation.rmul\n a = Symbol('a', integer=True)\n@@ -443,7 +446,6 @@ def test_from_sequence():\n \n \n def test_printing_cyclic():\n-    Permutation.print_cyclic = True\n     p1 = Permutation([0, 2, 1])\n     assert repr(p1) == 'Permutation(1, 2)'\n     assert str(p1) == '(1 2)'\n@@ -455,19 +457,46 @@ def test_printing_cyclic():\n \n \n def test_printing_non_cyclic():\n-    Permutation.print_cyclic = False\n+    from sympy.printing import sstr, srepr\n     p1 = Permutation([0, 1, 2, 3, 4, 5])\n-    assert repr(p1) == 'Permutation([], size=6)'\n-    assert str(p1) == 'Permutation([], size=6)'\n+    assert srepr(p1, perm_cyclic=False) == 'Permutation([], size=6)'\n+    assert sstr(p1, perm_cyclic=False) == 'Permutation([], size=6)'\n     p2 = Permutation([0, 1, 2])\n-    assert repr(p2) == 'Permutation([0, 1, 2])'\n-    assert str(p2) == 'Permutation([0, 1, 2])'\n+    assert srepr(p2, perm_cyclic=False) == 'Permutation([0, 1, 2])'\n+    assert sstr(p2, perm_cyclic=False) == 'Permutation([0, 1, 2])'\n \n     p3 = Permutation([0, 2, 1])\n-    assert repr(p3) == 'Permutation([0, 2, 1])'\n-    assert str(p3) == 'Permutation([0, 2, 1])'\n+    assert srepr(p3, perm_cyclic=False) == 'Permutation([0, 2, 1])'\n+    assert sstr(p3, perm_cyclic=False) == 'Permutation([0, 2, 1])'\n     p4 = Permutation([0, 1, 3, 2, 4, 5, 6, 7])\n-    assert repr(p4) == 'Permutation([0, 1, 3, 2], size=8)'\n+    assert srepr(p4, perm_cyclic=False) == 'Permutation([0, 1, 3, 2], size=8)'\n+\n+\n+def test_deprecated_print_cyclic():\n+    p = Permutation(0, 1, 2)\n+    try:\n+        Permutation.print_cyclic = True\n+        with warns_deprecated_sympy():\n+            assert sstr(p) == '(0 1 2)'\n+        with warns_deprecated_sympy():\n+            assert srepr(p) == 'Permutation(0, 1, 2)'\n+        with warns_deprecated_sympy():\n+            assert pretty(p) == '(0 1 2)'\n+        with warns_deprecated_sympy():\n+            assert latex(p) == r'\\left( 0\\; 1\\; 2\\right)'\n+\n+        Permutation.print_cyclic = False\n+        with warns_deprecated_sympy():\n+            assert sstr(p) == 'Permutation([1, 2, 0])'\n+        with warns_deprecated_sympy():\n+            assert srepr(p) == 'Permutation([1, 2, 0])'\n+        with warns_deprecated_sympy():\n+            assert pretty(p, use_unicode=False) == '/0 1 2\\\\\\n\\\\1 2 0/'\n+        with warns_deprecated_sympy():\n+            assert latex(p) == \\\n+                r'\\begin{pmatrix} 0 & 1 & 2 \\\\ 1 & 2 & 0 \\end{pmatrix}'\n+    finally:\n+        Permutation.print_cyclic = None\n \n \n def test_permutation_equality():\ndiff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -365,6 +365,18 @@ def test_pretty_Cycle():\n     assert pretty(Cycle()) == '()'\n \n \n+def test_pretty_Permutation():\n+    from sympy.combinatorics.permutations import Permutation\n+    p1 = Permutation(1, 2)(3, 4)\n+    assert xpretty(p1, perm_cyclic=True, use_unicode=True) == \"(1 2)(3 4)\"\n+    assert xpretty(p1, perm_cyclic=True, use_unicode=False) == \"(1 2)(3 4)\"\n+    assert xpretty(p1, perm_cyclic=False, use_unicode=True) == \\\n+    u'⎛0 1 2 3 4⎞\\n'\\\n+    u'⎝0 2 1 4 3⎠'\n+    assert xpretty(p1, perm_cyclic=False, use_unicode=False) == \\\n+    \"/0 1 2 3 4\\\\\\n\"\\\n+    \"\\\\0 2 1 4 3/\"\n+\n def test_pretty_basic():\n     assert pretty( -Rational(1)/2 ) == '-1/2'\n     assert pretty( -Rational(13)/22 ) == \\\ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -198,6 +198,13 @@ def test_latex_permutation():\n         r\"\\left( 2\\; 4\\right)\\left( 5\\right)\"\n     assert latex(Permutation(5)) == r\"\\left( 5\\right)\"\n \n+    assert latex(Permutation(0, 1), perm_cyclic=False) == \\\n+        r\"\\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}\"\n+    assert latex(Permutation(0, 1)(2, 3), perm_cyclic=False) == \\\n+        r\"\\begin{pmatrix} 0 & 1 & 2 & 3 \\\\ 1 & 0 & 3 & 2 \\end{pmatrix}\"\n+    assert latex(Permutation(), perm_cyclic=False) == \\\n+        r\"\\left( \\right)\"\n+\n \n def test_latex_Float():\n     assert latex(Float(1.0e100)) == r\"1.0 \\cdot 10^{100}\"\ndiff --git a/sympy/printing/tests/test_repr.py b/sympy/printing/tests/test_repr.py\n--- a/sympy/printing/tests/test_repr.py\n+++ b/sympy/printing/tests/test_repr.py\n@@ -302,9 +302,4 @@ def test_Cycle():\n \n def test_Permutation():\n     import_stmt = \"from sympy.combinatorics import Permutation\"\n-    print_cyclic = Permutation.print_cyclic\n-    try:\n-        Permutation.print_cyclic = True\n-        sT(Permutation(1, 2), \"Permutation(1, 2)\", import_stmt)\n-    finally:\n-        Permutation.print_cyclic = print_cyclic\n+    sT(Permutation(1, 2), \"Permutation(1, 2)\", import_stmt)\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -274,9 +274,8 @@ def test_Permutation_Cycle():\n         (Cycle(3, 4)(1, 2)(3, 4),\n         '(1 2)(4)'),\n     ]:\n-        assert str(p) == s\n+        assert sstr(p) == s\n \n-    Permutation.print_cyclic = False\n     for p, s in [\n         (Permutation([]),\n         'Permutation([])'),\n@@ -293,9 +292,8 @@ def test_Permutation_Cycle():\n         (Permutation([1, 0, 2, 3, 4, 5], size=10),\n         'Permutation([1, 0], size=10)'),\n     ]:\n-        assert str(p) == s\n+        assert sstr(p, perm_cyclic=False) == s\n \n-    Permutation.print_cyclic = True\n     for p, s in [\n         (Permutation([]),\n         '()'),\n@@ -314,7 +312,7 @@ def test_Permutation_Cycle():\n         (Permutation([0, 1, 3, 2, 4, 5], size=10),\n         '(9)(2 3)'),\n     ]:\n-        assert str(p) == s\n+        assert sstr(p) == s\n \n \n def test_Pi():\n",
  "problem_statement": "Remove Permutation.print_cyclic flag\nSee the discussion at https://github.com/sympy/sympy/pull/15198. The Permutation printing should be handled in the SymPy printers, not on the object itself. The flag should be a flag to the printer. Any doctest that wants to change the printing should set the flag in `init_printing`. However, whichever is set as the default should be used everywhere. \r\n\r\nSince it is publicly documented, it will need to be deprecated https://github.com/sympy/sympy/wiki/Deprecating-policy.\r\n\r\nAdditionally, it would be best if the `str` printer printed a Python valid representation and the pretty printers only (pprint/latex) printed things like (1 2 3).\n",
  "hints_text": "Hi I am looking to fix this error. Could you guide me on this one a bit? \r\nFrom what I understood `permutations.py` has some functions which use `print_cyclic` flag. But since this is a global flag, it should not be used. Instead it should use something from the `printing` module? Do I need to go through the `printing` module thoroughly? How do I get started on this?\n@sudz123 Users should set printing preferences via `init_printing`, not by changing class attributes. So `print_cyclic` from the `Permutation` class should be deprecated, and `init_printing` should get a new keyword argument so we could do `init_printing(cyclic=True)` (or something like that) if we wanted permutations to be printed in cyclic notation.`init_printing` is [here](https://docs.sympy.org/latest/_modules/sympy/interactive/printing.html#init_printing).\r\n\r\n> Additionally, it would be best if the str printer printed a Python valid representation and the pretty printers only (pprint/latex) printed things like (1 2 3).\r\n\r\nRight now, permutation printing is all specified in its `__repr__` - this should always return `Permutation(<list>)` (i.e. what's returned now when `Permutation.print_cyclic=False`). The new \"cyclic\" flag should only be relevant when `pprint` and `latex` are called. The printing module is huge, but you only need to work out how to make `pprint` and `latex` work properly with the new keyword argument. For example, for `pprint`, you'll need to add `'cyclic'` (or whatever you decide to call it) to `PrettyPrinter._default_settings` and write a new method `_print_Permutation`.\nIs my following interpretation of Printing correct?\r\n`init_printing()` only sets what happens in an interactive session. i.e. like jupyter notebook.\r\nFor printing in a regular python file. we have to only use `pprint()` or `print_latex()`\r\n\r\nAfter I change the codes for `pprint()` and `print_latex()`. How do I test it for interactive ipython. In my jupyter notebbok, I am only able to get output for Latex Printing and not pprint using `init_printing()`.\r\n\r\n@valglad @asmeurer  Please help.",
  "created_at": "2019-12-10T08:07:15Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_printing_non_cyclic\", \"test_deprecated_print_cyclic\", \"test_pretty_Permutation\", \"test_latex_permutation\", \"test_Permutation_Cycle\"]",
  "PASS_TO_PASS": "[\"test_Permutation\", \"test_Permutation_subclassing\", \"test_josephus\", \"test_ranking\", \"test_mul\", \"test_args\", \"test_Cycle\", \"test_from_sequence\", \"test_printing_cyclic\", \"test_permutation_equality\", \"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_missing_in_2X_issue_9047\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_pretty_ordering\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_issue_7117\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_Lambda\", \"test_pretty_order\", \"test_pretty_derivatives\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_pretty_ndim_arrays\", \"test_tensor_TensorProduct\", \"test_diffgeom_print_WedgeProduct\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_ITE\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_print_builtin_set\", \"test_pretty_sets\", \"test_pretty_SetExpr\", \"test_pretty_ImageSet\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_exponent\", \"test_ProductSet_parenthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_FourierSeries\", \"test_pretty_FormalPowerSeries\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_UniversalSet\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_units\", \"test_pretty_Subs\", \"test_gammas\", \"test_beta\", \"test_function_subclass_different_name\", \"test_SingularityFunction\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_pretty_geometry\", \"test_expint\", \"test_elliptic_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6285\", \"test_issue_6359\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_PrettyModules\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_4335\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_issue_13651\", \"test_pretty_primenu\", \"test_pretty_primeomega\", \"test_pretty_Mod\", \"test_issue_11801\", \"test_pretty_UnevaluatedExpr\", \"test_issue_10472\", \"test_MatrixElement_printing\", \"test_issue_12675\", \"test_MatrixSymbol_printing\", \"test_degree_printing\", \"test_vector_expr_pretty_printing\", \"test_pretty_print_tensor_expr\", \"test_pretty_print_tensor_partial_deriv\", \"test_issue_15560\", \"test_print_lerchphi\", \"test_issue_15583\", \"test_matrixSymbolBold\", \"test_center_accent\", \"test_imaginary_unit\", \"test_str_special_matrices\", \"test_pretty_misc_functions\", \"test_hadamard_power\", \"test_issue_17258\", \"test_is_combining\", \"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_SingularityFunction\", \"test_latex_cycle\", \"test_latex_Float\", \"test_latex_vector_expressions\", \"test_latex_symbols\", \"test_latex_functions\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_indexed\", \"test_latex_derivatives\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_SetExpr\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_FourierSeries\", \"test_latex_FormalPowerSeries\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_universalset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_intersection\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_productset\", \"test_set_operators_parenthesis\", \"test_latex_Complexes\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_latex_log\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_mathieu\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_matrix_with_functions\", \"test_latex_NDimArray\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_Poly_order\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_latex_numbers\", \"test_latex_euler\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_Modules\", \"test_Transpose\", \"test_Hadamard\", \"test_ElementwiseApplyFunction\", \"test_ZeroMatrix\", \"test_OneMatrix\", \"test_Identity\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_fancyset_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_8409\", \"test_issue_15439\", \"test_issue_2934\", \"test_issue_10489\", \"test_issue_12886\", \"test_latex_UnevaluatedExpr\", \"test_KroneckerProduct_printing\", \"test_Quaternion_latex_printing\", \"test_TensorProduct_printing\", \"test_WedgeProduct_printing\", \"test_issue_14041\", \"test_issue_9216\", \"test_latex_printer_tensor\", \"test_multiline_latex\", \"test_issue_15353\", \"test_trace\", \"test_print_basic\", \"test_MatrixSymbol_bold\", \"test_text_re_im\", \"test_DiffGeomMethods\", \"test_unit_printing\", \"test_issue_17092\", \"test_latex_decimal_separator\", \"test_Add\", \"test_more_than_255_args_issue_10259\", \"test_Function\", \"test_Geometry\", \"test_Singletons\", \"test_Integer\", \"test_list\", \"test_Matrix\", \"test_empty_Matrix\", \"test_Rational\", \"test_Float\", \"test_Symbol\", \"test_Symbol_two_assumptions\", \"test_Symbol_no_special_commutative_treatment\", \"test_Wild\", \"test_Dummy\", \"test_Dummy_assumption\", \"test_Dummy_from_Symbol\", \"test_tuple\", \"test_WildFunction\", \"test_settins\", \"test_AlgebraicNumber\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_FractionField\", \"test_DMP\", \"test_FiniteExtension\", \"test_ExtensionElement\", \"test_BooleanAtom\", \"test_Integers\", \"test_Naturals\", \"test_Naturals0\", \"test_Reals\", \"test_matrix_expressions\", \"test_Abs\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Exp\", \"test_factorial\", \"test_TribonacciConstant\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_Matrix_str\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Pi\", \"test_Poly\", \"test_sqrt\", \"test_Relational\", \"test_CRootOf\", \"test_RootSum\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_empty_printer\", \"test_FiniteSet\", \"test_UniversalSet\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\", \"test_Subs_printing\", \"test_issue_15716\"]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.119171",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}