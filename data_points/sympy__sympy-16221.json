{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-16221",
  "base_commit": "8fc3b3a96b9f982ed6dc8f626129abee36bcda95",
  "patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -160,6 +160,55 @@ def print_dims():\n \n         return 'SparseArray[{}, {}]'.format(print_data(), print_dims())\n \n+    def _print_ImmutableDenseNDimArray(self, expr):\n+        return self.doprint(expr.tolist())\n+\n+    def _print_ImmutableSparseNDimArray(self, expr):\n+        def print_string_list(string_list):\n+            return '{' + ', '.join(a for a in string_list) + '}'\n+\n+        def to_mathematica_index(*args):\n+            \"\"\"Helper function to change Python style indexing to\n+            Pathematica indexing.\n+\n+            Python indexing (0, 1 ... n-1)\n+            -> Mathematica indexing (1, 2 ... n)\n+            \"\"\"\n+            return tuple(i + 1 for i in args)\n+\n+        def print_rule(pos, val):\n+            \"\"\"Helper function to print a rule of Mathematica\"\"\"\n+            return '{} -> {}'.format(self.doprint(pos), self.doprint(val))\n+\n+        def print_data():\n+            \"\"\"Helper function to print data part of Mathematica\n+            sparse array.\n+\n+            It uses the fourth notation ``SparseArray[data,{d1,d2,…}]``\n+            from\n+            https://reference.wolfram.com/language/ref/SparseArray.html\n+\n+            ``data`` must be formatted with rule.\n+            \"\"\"\n+            return print_string_list(\n+                [print_rule(\n+                    to_mathematica_index(*(expr._get_tuple_index(key))),\n+                    value)\n+                for key, value in sorted(expr._sparse_array.items())]\n+            )\n+\n+        def print_dims():\n+            \"\"\"Helper function to print dimensions part of Mathematica\n+            sparse array.\n+\n+            It uses the fourth notation ``SparseArray[data,{d1,d2,…}]``\n+            from\n+            https://reference.wolfram.com/language/ref/SparseArray.html\n+            \"\"\"\n+            return self.doprint(expr.shape)\n+\n+        return 'SparseArray[{}, {}]'.format(print_data(), print_dims())\n+\n     def _print_Function(self, expr):\n         if expr.func.__name__ in self.known_functions:\n             cond_mfunc = self.known_functions[expr.func.__name__]\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -113,6 +113,58 @@ def test_matrices():\n     assert mcode(MutableDenseMatrix(3, 0, [])) == '{{}, {}, {}}'\n     assert mcode(MutableSparseMatrix(3, 0, [])) == 'SparseArray[{}, {3, 0}]'\n \n+def test_NDArray():\n+    from sympy.tensor.array import (\n+        MutableDenseNDimArray, ImmutableDenseNDimArray,\n+        MutableSparseNDimArray, ImmutableSparseNDimArray)\n+\n+    example = MutableDenseNDimArray(\n+        [[[1, 2, 3, 4],\n+          [5, 6, 7, 8],\n+          [9, 10, 11, 12]],\n+         [[13, 14, 15, 16],\n+          [17, 18, 19, 20],\n+          [21, 22, 23, 24]]]\n+    )\n+\n+    assert mcode(example) == \\\n+    \"{{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}, \" \\\n+    \"{{13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}}}\"\n+\n+    example = ImmutableDenseNDimArray(example)\n+\n+    assert mcode(example) == \\\n+    \"{{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}, \" \\\n+    \"{{13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}}}\"\n+\n+    example = MutableSparseNDimArray(example)\n+\n+    assert mcode(example) == \\\n+    \"SparseArray[{\" \\\n+        \"{1, 1, 1} -> 1, {1, 1, 2} -> 2, {1, 1, 3} -> 3, \" \\\n+        \"{1, 1, 4} -> 4, {1, 2, 1} -> 5, {1, 2, 2} -> 6, \" \\\n+        \"{1, 2, 3} -> 7, {1, 2, 4} -> 8, {1, 3, 1} -> 9, \" \\\n+        \"{1, 3, 2} -> 10, {1, 3, 3} -> 11, {1, 3, 4} -> 12, \" \\\n+        \"{2, 1, 1} -> 13, {2, 1, 2} -> 14, {2, 1, 3} -> 15, \" \\\n+        \"{2, 1, 4} -> 16, {2, 2, 1} -> 17, {2, 2, 2} -> 18, \" \\\n+        \"{2, 2, 3} -> 19, {2, 2, 4} -> 20, {2, 3, 1} -> 21, \" \\\n+        \"{2, 3, 2} -> 22, {2, 3, 3} -> 23, {2, 3, 4} -> 24\" \\\n+        \"}, {2, 3, 4}]\"\n+\n+    example = ImmutableSparseNDimArray(example)\n+\n+    assert mcode(example) == \\\n+    \"SparseArray[{\" \\\n+        \"{1, 1, 1} -> 1, {1, 1, 2} -> 2, {1, 1, 3} -> 3, \" \\\n+        \"{1, 1, 4} -> 4, {1, 2, 1} -> 5, {1, 2, 2} -> 6, \" \\\n+        \"{1, 2, 3} -> 7, {1, 2, 4} -> 8, {1, 3, 1} -> 9, \" \\\n+        \"{1, 3, 2} -> 10, {1, 3, 3} -> 11, {1, 3, 4} -> 12, \" \\\n+        \"{2, 1, 1} -> 13, {2, 1, 2} -> 14, {2, 1, 3} -> 15, \" \\\n+        \"{2, 1, 4} -> 16, {2, 2, 1} -> 17, {2, 2, 2} -> 18, \" \\\n+        \"{2, 2, 3} -> 19, {2, 2, 4} -> 20, {2, 3, 1} -> 21, \" \\\n+        \"{2, 3, 2} -> 22, {2, 3, 3} -> 23, {2, 3, 4} -> 24\" \\\n+        \"}, {2, 3, 4}]\"\n+\n \n def test_Integral():\n     assert mcode(Integral(sin(sin(x)), x)) == \"Hold[Integrate[Sin[Sin[x]], x]]\"\n",
  "problem_statement": "Mathematica code: allow printing of matrices and arrays.\nOur printers for Wolfram Mathematica do not support matrices and arrays. We should add support for it.\n",
  "hints_text": "",
  "created_at": "2019-03-10T09:11:58Z",
  "version": "1.4",
  "FAIL_TO_PASS": "[\"test_NDArray\"]",
  "PASS_TO_PASS": "[\"test_Integer\", \"test_Rational\", \"test_Function\", \"test_Pow\", \"test_Mul\", \"test_constants\", \"test_containers\", \"test_matrices\", \"test_Integral\", \"test_Derivative\", \"test_Sum\"]",
  "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.106255",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}