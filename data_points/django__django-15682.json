{
  "repo": "django/django",
  "instance_id": "django__django-15682",
  "base_commit": "34e2148fc725e7200050f74130d7523e3cd8507a",
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -2,6 +2,7 @@\n import datetime\n import functools\n import inspect\n+import warnings\n from collections import defaultdict\n from decimal import Decimal\n from uuid import UUID\n@@ -12,6 +13,7 @@\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.query_utils import Q\n from django.utils.deconstruct import deconstructible\n+from django.utils.deprecation import RemovedInDjango50Warning\n from django.utils.functional import cached_property\n from django.utils.hashable import make_hashable\n \n@@ -1501,11 +1503,20 @@ class OrderBy(Expression):\n     template = \"%(expression)s %(ordering)s\"\n     conditional = False\n \n-    def __init__(\n-        self, expression, descending=False, nulls_first=False, nulls_last=False\n-    ):\n+    def __init__(self, expression, descending=False, nulls_first=None, nulls_last=None):\n         if nulls_first and nulls_last:\n             raise ValueError(\"nulls_first and nulls_last are mutually exclusive\")\n+        if nulls_first is False or nulls_last is False:\n+            # When the deprecation ends, replace with:\n+            # raise ValueError(\n+            #     \"nulls_first and nulls_last values must be True or None.\"\n+            # )\n+            warnings.warn(\n+                \"Passing nulls_first=False or nulls_last=False is deprecated, use None \"\n+                \"instead.\",\n+                RemovedInDjango50Warning,\n+                stacklevel=2,\n+            )\n         self.nulls_first = nulls_first\n         self.nulls_last = nulls_last\n         self.descending = descending\n@@ -1572,9 +1583,12 @@ def get_group_by_cols(self, alias=None):\n \n     def reverse_ordering(self):\n         self.descending = not self.descending\n-        if self.nulls_first or self.nulls_last:\n-            self.nulls_first = not self.nulls_first\n-            self.nulls_last = not self.nulls_last\n+        if self.nulls_first:\n+            self.nulls_last = True\n+            self.nulls_first = None\n+        elif self.nulls_last:\n+            self.nulls_first = True\n+            self.nulls_last = None\n         return self\n \n     def asc(self):\n",
  "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -69,6 +69,7 @@\n     isolate_apps,\n     register_lookup,\n )\n+from django.utils.deprecation import RemovedInDjango50Warning\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n@@ -2537,7 +2538,7 @@ def test_equal(self):\n         )\n         self.assertNotEqual(\n             OrderBy(F(\"field\"), nulls_last=True),\n-            OrderBy(F(\"field\"), nulls_last=False),\n+            OrderBy(F(\"field\")),\n         )\n \n     def test_hash(self):\n@@ -2547,5 +2548,22 @@ def test_hash(self):\n         )\n         self.assertNotEqual(\n             hash(OrderBy(F(\"field\"), nulls_last=True)),\n-            hash(OrderBy(F(\"field\"), nulls_last=False)),\n+            hash(OrderBy(F(\"field\"))),\n         )\n+\n+    def test_nulls_false(self):\n+        # These tests will catch ValueError in Django 5.0 when passing False to\n+        # nulls_first and nulls_last becomes forbidden.\n+        # msg = \"nulls_first and nulls_last values must be True or None.\"\n+        msg = (\n+            \"Passing nulls_first=False or nulls_last=False is deprecated, use None \"\n+            \"instead.\"\n+        )\n+        with self.assertRaisesMessage(RemovedInDjango50Warning, msg):\n+            OrderBy(F(\"field\"), nulls_first=False)\n+        with self.assertRaisesMessage(RemovedInDjango50Warning, msg):\n+            OrderBy(F(\"field\"), nulls_last=False)\n+        with self.assertRaisesMessage(RemovedInDjango50Warning, msg):\n+            F(\"field\").asc(nulls_first=False)\n+        with self.assertRaisesMessage(RemovedInDjango50Warning, msg):\n+            F(\"field\").desc(nulls_last=False)\n",
  "problem_statement": "Depracate passing False to OrderBy's nulls_first and nulls_last.\nDescription\n\t\nConsider the following:\nIn [11]: [tv.published_at for tv in TemplateVersion.objects.order_by(F(\"published_at\").desc(nulls_first=True))]\nOut[11]: \n[None,\n datetime.datetime(2022, 2, 25, 13, 0, 12, 91916, tzinfo=<UTC>),\n datetime.datetime(2022, 2, 21, 10, 18, 0, 169248, tzinfo=<UTC>)]\nIn [12]: [tv.published_at for tv in TemplateVersion.objects.order_by(F(\"published_at\").desc(nulls_first=False))]\nOut[12]: \n[None,\n datetime.datetime(2022, 2, 25, 13, 0, 12, 91916, tzinfo=<UTC>),\n datetime.datetime(2022, 2, 21, 10, 18, 0, 169248, tzinfo=<UTC>)]\nIn [13]: [tv.published_at for tv in TemplateVersion.objects.order_by(F(\"published_at\").desc(nulls_last=True))]\nOut[13]: \n[datetime.datetime(2022, 2, 25, 13, 0, 12, 91916, tzinfo=<UTC>),\n datetime.datetime(2022, 2, 21, 10, 18, 0, 169248, tzinfo=<UTC>),\n None]\nIn [14]: [tv.published_at for tv in TemplateVersion.objects.order_by(F(\"published_at\").desc(nulls_last=False))]\nOut[14]: \n[None,\n datetime.datetime(2022, 2, 25, 13, 0, 12, 91916, tzinfo=<UTC>),\n datetime.datetime(2022, 2, 21, 10, 18, 0, 169248, tzinfo=<UTC>)]\nObserve how nulls_first=False still puts the nulls first.\nThis happens because they both default False and when they are both False it lets the DB decide.\nThis is surprising behaviour, it also makes changing the null positioning based on a variable more awkward than it needs to be.\nI think it would be better if they defaulted to None, let the DB decide when both are None and when one is not None do the ordering that implies.\n",
  "hints_text": "I concur that it is confusing that nulls_first=False can still put the nulls first, and equally for the nulls_last=False. I don't think we can change the semantics though as it would be a breaking change. The best we can probably do is make passing False for either a TypeError, by swapping their defaults for sentinel values. Then, if you need a variable to switch between the behaviours you can use a construct like: F(...).desc(**{(\"nulls_first\" if nulls_first else \"nulls_last\"): True})\nAgreed, this can be confusing. Replying to Adam Johnson: I concur that it is confusing that nulls_first=False can still put the nulls first, and equally for the nulls_last=False. I don't think we can change the semantics though as it would be a breaking change. The best we can probably do is make passing False for either a TypeError, by swapping their defaults for sentinel values. Then, if you need a variable to switch between the behaviours you can use a construct like: F(...).desc(**{(\"nulls_first\" if nulls_first else \"nulls_last\"): True}) ... or we could change defaults to None and deprecate passing False, e.g. django/db/models/expressions.py diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index a2da1f6e38..d4bb01362c 100644 a b class OrderBy(Expression): 13571357 conditional = False 13581358 13591359 def __init__( 1360 self, expression, descending=False, nulls_first=False, nulls_last=False 1360 self, expression, descending=False, nulls_first=None, nulls_last=None 13611361 ): 13621362 if nulls_first and nulls_last: 13631363 raise ValueError(\"nulls_first and nulls_last are mutually exclusive\") 1364 if nulls_first is False or nulls_last is False: 1365 warnings.warn(...) 13641366 self.nulls_first = nulls_first 13651367 self.nulls_last = nulls_last 13661368 self.descending = descending … … class OrderBy(Expression): 14271429 14281430 def reverse_ordering(self): 14291431 self.descending = not self.descending 1430 if self.nulls_first or self.nulls_last: 1431 self.nulls_first = not self.nulls_first 1432 self.nulls_last = not self.nulls_last 1432 if self.nulls_first is True: 1433 self.nulls_first = None 1434 if self.nulls_last is True: 1435 self.nulls_last = None 14331436 return self 14341437 14351438 def asc(self):",
  "created_at": "2022-05-11T08:18:15Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_nulls_false (expressions.tests.OrderByTests)\"]",
  "PASS_TO_PASS": "[\"test_negated_empty_exists (expressions.tests.ExistsTests)\", \"test_optimizations (expressions.tests.ExistsTests)\", \"test_select_negated_empty_exists (expressions.tests.ExistsTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_reversed_xor (expressions.tests.CombinableTests)\", \"test_xor (expressions.tests.CombinableTests)\", \"test_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_equal (expressions.tests.OrderByTests)\", \"test_hash (expressions.tests.OrderByTests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"Special characters (e.g. %, _ and \\\\) stored in database are\", \"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_mixed_char_date_with_annotate (expressions.tests.CombinedExpressionTests)\", \"test_resolve_output_field_dates (expressions.tests.CombinedExpressionTests)\", \"test_resolve_output_field_number (expressions.tests.CombinedExpressionTests)\", \"test_resolve_output_field_with_null (expressions.tests.CombinedExpressionTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"Complex expressions of different connection types are possible.\", \"test_decimal_expression (expressions.tests.ExpressionsNumericTests)\", \"We can fill a value in all objects with an other value of the\", \"test_filter_decimal_expression (expressions.tests.ExpressionsNumericTests)\", \"We can filter for objects, where a value is not equals the value\", \"We can increment a value of all objects in a query set.\", \"test_compile_unresolved (expressions.tests.ValueTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_output_field_decimalfield (expressions.tests.ValueTests)\", \"The output field for a given Value doesn't get cleaned & validated,\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_repr (expressions.tests.ValueTests)\", \"test_resolve_output_field (expressions.tests.ValueTests)\", \"test_resolve_output_field_failure (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"This tests that SQL injection isn't possible using compilation of\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_namedtuple (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_right_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_transformed_field_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_date_case_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_and_duration_field_addition_with_annotate_and_no_output_field (expressions.tests.FTimeDeltaTests)\", \"test_datetime_and_durationfield_addition_with_filter (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_with_annotate_and_no_output_field (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_expressions (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_multiply_divide (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_aggregate_rawsql_annotation (expressions.tests.BasicExpressionsTests)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_count (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_combined_with_empty_Q (expressions.tests.BasicExpressionsTests)\", \"test_boolean_expression_in_Q (expressions.tests.BasicExpressionsTests)\", \"test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exists_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_eq (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)\", \"test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_subquery_sql (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.737519",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}