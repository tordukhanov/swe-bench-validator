{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-9902",
  "base_commit": "a7462d57b414c6f75b1a456c1367cf90caa56df1",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -80,9 +80,9 @@ class ModuleEntry(NamedTuple):\n     deprecated: bool\n \n \n-def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n+def type_to_xref(target: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n-    if text == 'None':\n+    if target == 'None':\n         reftype = 'obj'\n     else:\n         reftype = 'class'\n@@ -93,6 +93,17 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     else:\n         kwargs = {}\n \n+    refspecific = False\n+    if target.startswith('.'):\n+        target = target[1:]\n+        text = target\n+        refspecific = True\n+    elif target.startswith('~'):\n+        target = target[1:]\n+        text = target.split('.')[-1]\n+    else:\n+        text = target\n+\n     if env.config.python_use_unqualified_type_names:\n         # Note: It would be better to use qualname to describe the object to support support\n         # nested classes.  But python domain can't access the real python object because this\n@@ -104,7 +115,8 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n         contnodes = [nodes.Text(text)]\n \n     return pending_xref('', *contnodes,\n-                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+                        refdomain='py', reftype=reftype, reftarget=target,\n+                        refspecific=refspecific, **kwargs)\n \n \n def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1170,6 +1170,28 @@ def test_info_field_list_var(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"int\", **{\"py:class\": \"Class\"})\n \n \n+def test_type_field(app):\n+    text = (\".. py:data:: var1\\n\"\n+            \"   :type: .int\\n\"\n+            \".. py:data:: var2\\n\"\n+            \"   :type: ~builtins.int\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_name, \"var1\"],\n+                                                    [desc_annotation, ([desc_sig_punctuation, ':'],\n+                                                                       desc_sig_space,\n+                                                                       [pending_xref, \"int\"])])],\n+                                  [desc_content, ()])],\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_name, \"var2\"],\n+                                                    [desc_annotation, ([desc_sig_punctuation, ':'],\n+                                                                       desc_sig_space,\n+                                                                       [pending_xref, \"int\"])])],\n+                                  [desc_content, ()])]))\n+    assert_node(doctree[1][0][1][2], pending_xref, reftarget='int', refspecific=True)\n+    assert_node(doctree[3][0][1][2], pending_xref, reftarget='builtins.int', refspecific=False)\n+\n+\n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n",
  "problem_statement": ".. py:data:: :type: option does not correctly link to type supplied\n### Describe the bug\r\n\r\nwhen using the .. py:data:: directive there is the :type: option to specify the type for the data being stored in the module level attribute. It does not work within the context of the module.  What I mean by that is I have to key out the entire module path and the class for the type instead of importing the type into the module and only having to type in the type class name.\r\n\r\n\r\n### How to Reproduce\r\n\r\nsay I have the following in the module \"my_library.module1\"\r\n\r\n``` python\r\n\"\"\"\r\n.. py:data:: mol\r\n    :type: Unit\r\n    :value: 'mol'\r\n\r\n    mole\r\n\"\"\"\r\n\r\nfrom .module2 import Unit\r\n\r\nmol = Unit('mol')\r\n```\r\n\r\nThe output I get when building the docs is this.\r\n```\r\nmol: Unit = 'mol'\r\n\r\n    mole\r\n```\r\nand \"Unit\" is not a clickable link.\r\n\r\nHowever if I have the following in the module \"my_library.module1\"\r\n\r\n``` python\r\n\"\"\"\r\n.. py:data:: mol\r\n    :type: my_library.module2.Unit\r\n    :value: 'mol'\r\n\r\n    mole\r\n\"\"\"\r\n\r\nfrom .module2 import Unit\r\n\r\nmol = Unit('mol')\r\n```\r\n\r\nI get this for an output\r\n\r\n```\r\nmol: my_library.module2.Unit = 'mol'\r\n\r\n    mole\r\n```\r\n\r\nand \"my_library.module2.Unit\" is a clickable link that brings up the documentation for the Unit class\r\n\r\n\r\n### Expected behavior\r\n\r\nto be able to do the following\r\n\r\n``` python\r\n\"\"\"\r\n.. py:data:: mol\r\n    :type: Unit\r\n    :value: 'mol'\r\n\r\n    mole\r\n\"\"\"\r\n\r\nfrom .module2 import Unit\r\n\r\nmol = Unit('mol')\r\n```\r\n\r\nand have the output be \r\n```\r\nmol: Unit = 'mol'\r\n\r\n    mole\r\n```\r\n\r\nand \"Unit\" be a clickable link that leads to the class that is specified in :type:\r\n\r\n\r\n### Your project\r\n\r\nhttps://github.com/kdschlosser/python-utils/tree/unit_conversion\r\n\r\n### Screenshots\r\n\r\n_No response_\r\n\r\n### OS\r\n\r\nWindows\r\n\r\n### Python version\r\n\r\n3.8\r\n\r\n### Sphinx version\r\n\r\n4.2\r\n\r\n### Sphinx extensions\r\n\r\nsphinx.ext.autodoc\r\n\r\n### Extra tools\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_\n",
  "hints_text": "I did also want to mention the use of :py:class:`Unit` does not work in the :type: option field. \r\nYet it does work when specifying the type for a parameter of a function.\r\n\r\nI have also placed the import of \"Unit\" before the docstring and explicitly set the docstring to __doc__ and that did not work either. \r\n\nReproduced with this:\r\n```\r\n.. py:module:: my_library.module2\r\n\r\n.. py:class:: Unit\r\n\r\n.. py:module:: my_library.module1\r\n\r\n.. py:data:: mol\r\n   :type: Unit\r\n   :value: 'mol'\r\n\r\n   mole\r\n```\r\n\r\nIn this case, ```:py:class:`Unit` ``` inside `my_library.module1` module is also not working because its module is different with `my_library.module2`. ```:py:class:`.Unit` ``` is working. But `:type:` field does not allow `.Unit` notation. So this must be a bug.",
  "created_at": "2021-11-28T05:47:37Z",
  "version": "4.4",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_type_field\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_xrefs_abbreviations\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_domain_py_canonical\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_parse_annotation_Literal\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_pyfunction_with_union_type_operator\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pydata_with_union_type_operator\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pyproperty\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_canonical\", \"tests/test_domain_py.py::test_canonical_definition_overrides\", \"tests/test_domain_py.py::test_canonical_definition_skip\", \"tests/test_domain_py.py::test_canonical_duplicated\", \"tests/test_domain_py.py::test_info_field_list\", \"tests/test_domain_py.py::test_info_field_list_piped_type\", \"tests/test_domain_py.py::test_info_field_list_Literal\", \"tests/test_domain_py.py::test_info_field_list_var\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled\", \"tests/test_domain_py.py::test_warn_missing_reference\"]",
  "environment_setup_commit": "0938c193ea6f56dbb930bfb323602bc4e2b7b9c6",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:31.070250",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}