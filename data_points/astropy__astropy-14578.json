{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-14578",
  "base_commit": "c748299218dcbd9e15caef558722cc04aa658fad",
  "patch": "diff --git a/astropy/io/fits/column.py b/astropy/io/fits/column.py\n--- a/astropy/io/fits/column.py\n+++ b/astropy/io/fits/column.py\n@@ -1528,7 +1528,19 @@ def _init_from_array(self, array):\n         for idx in range(len(array.dtype)):\n             cname = array.dtype.names[idx]\n             ftype = array.dtype.fields[cname][0]\n-            format = self._col_format_cls.from_recformat(ftype)\n+\n+            if ftype.kind == \"O\":\n+                dtypes = {np.array(array[cname][i]).dtype for i in range(len(array))}\n+                if (len(dtypes) > 1) or (np.dtype(\"O\") in dtypes):\n+                    raise TypeError(\n+                        f\"Column '{cname}' contains unsupported object types or \"\n+                        f\"mixed types: {dtypes}\"\n+                    )\n+                ftype = dtypes.pop()\n+                format = self._col_format_cls.from_recformat(ftype)\n+                format = f\"P{format}()\"\n+            else:\n+                format = self._col_format_cls.from_recformat(ftype)\n \n             # Determine the appropriate dimensions for items in the column\n             dim = array.dtype[idx].shape[::-1]\n",
  "test_patch": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -414,6 +414,61 @@ def test_mask_str_on_read(self, tmp_path):\n         tab = Table.read(filename, mask_invalid=False)\n         assert tab.mask is None\n \n+    def test_heterogeneous_VLA_tables(self, tmp_path):\n+        \"\"\"\n+        Check the behaviour of heterogeneous VLA object.\n+        \"\"\"\n+        filename = tmp_path / \"test_table_object.fits\"\n+        msg = \"Column 'col1' contains unsupported object types or mixed types: \"\n+\n+        # The column format fix the type of the arrays in the VLF object.\n+        a = np.array([45, 30])\n+        b = np.array([11.0, 12.0, 13])\n+        var = np.array([a, b], dtype=object)\n+        tab = Table({\"col1\": var})\n+        with pytest.raises(TypeError, match=msg):\n+            tab.write(filename)\n+\n+        # Strings in the VLF object can't be added to the table\n+        a = np.array([\"five\", \"thirty\"])\n+        b = np.array([11.0, 12.0, 13])\n+        var = np.array([a, b], dtype=object)\n+        with pytest.raises(TypeError, match=msg):\n+            tab.write(filename)\n+\n+    def test_write_object_tables_with_unified(self, tmp_path):\n+        \"\"\"\n+        Write objects with the unified I/O interface.\n+        See https://github.com/astropy/astropy/issues/1906\n+        \"\"\"\n+        filename = tmp_path / \"test_table_object.fits\"\n+        msg = r\"Column 'col1' contains unsupported object types or mixed types: {dtype\\('O'\\)}\"\n+        # Make a FITS table with an object column\n+        tab = Table({\"col1\": [None]})\n+        with pytest.raises(TypeError, match=msg):\n+            tab.write(filename)\n+\n+    def test_write_VLA_tables_with_unified(self, tmp_path):\n+        \"\"\"\n+        Write VLA objects with the unified I/O interface.\n+        See https://github.com/astropy/astropy/issues/11323\n+        \"\"\"\n+\n+        filename = tmp_path / \"test_table_VLA.fits\"\n+        # Make a FITS table with a variable-length array column\n+        a = np.array([45, 30])\n+        b = np.array([11, 12, 13])\n+        c = np.array([45, 55, 65, 75])\n+        var = np.array([a, b, c], dtype=object)\n+\n+        tabw = Table({\"col1\": var})\n+        tabw.write(filename)\n+\n+        tab = Table.read(filename)\n+        assert np.array_equal(tab[0][\"col1\"], np.array([45, 30]))\n+        assert np.array_equal(tab[1][\"col1\"], np.array([11, 12, 13]))\n+        assert np.array_equal(tab[2][\"col1\"], np.array([45, 55, 65, 75]))\n+\n \n class TestMultipleHDU:\n     def setup_class(self):\ndiff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -3313,6 +3313,31 @@ def test_multidim_VLA_tables(self):\n                 hdus[1].data[\"test\"][1], np.array([[0.0, 1.0, 2.0], [3.0, 4.0, 5.0]])\n             )\n \n+    def test_heterogeneous_VLA_tables(self):\n+        \"\"\"\n+        Check the behaviour of heterogeneous VLA object.\n+        \"\"\"\n+\n+        # The column format fix the type of the arrays in the VLF object.\n+        a = np.array([45, 30])\n+        b = np.array([11.0, 12.0, 13])\n+        var = np.array([a, b], dtype=object)\n+\n+        c1 = fits.Column(name=\"var\", format=\"PJ()\", array=var)\n+        hdu = fits.BinTableHDU.from_columns([c1])\n+        assert hdu.data[0].array.dtype[0].subdtype[0] == \"int32\"\n+\n+        # Strings in the VLF object can't be added to the table\n+        a = np.array([45, \"thirty\"])\n+        b = np.array([11.0, 12.0, 13])\n+        var = np.array([a, b], dtype=object)\n+\n+        c1 = fits.Column(name=\"var\", format=\"PJ()\", array=var)\n+        with pytest.raises(\n+            ValueError, match=r\"invalid literal for int\\(\\) with base 10\"\n+        ):\n+            fits.BinTableHDU.from_columns([c1])\n+\n \n # These are tests that solely test the Column and ColDefs interfaces and\n # related functionality without directly involving full tables; currently there\n",
  "problem_statement": "Writing a Table to FITS fails if the table contains objects\nThe following works fine:\n\n``` Python\nfrom astropy.table import Table\nTable([{'col1': None}]).write('/tmp/tmp.txt', format='ascii')\n```\n\nwhereas the following fails:\n\n``` Python\nTable([{'col1': None}]).write('/tmp/tmp.fits', format='fits')\n```\n\nwith\n\n```\n/home/gb/bin/anaconda/lib/python2.7/site-packages/astropy-0.4.dev6667-py2.7-linux-x86_64.egg/astropy/io/fits/column.pyc in _convert_record2fits(format)\n   1727         output_format = repeat + NUMPY2FITS[recformat]\n   1728     else:\n-> 1729         raise ValueError('Illegal format %s.' % format)\n   1730 \n   1731     return output_format\n\nValueError: Illegal format object.\n```\n\nThis behaviour is seen whenever a Table contains an object, i.e. io/fits/column.py does not know how to deal with `dtype('O')`.\n\nI wonder if we want the Table API to write objects to files by their string representation as a default, or otherwise provide a more meaningful error message?\n\n",
  "hints_text": "Hm. I wonder if there's a place in the I/O registry for readers/writers to provide some means of listing what data formats they can accept--or at least rejecting formats that they don't accept.  Maybe something to think about as part of #962 ?\n\nI should add--I think the current behavior is \"correct\"--any convention for storing arbitrary Python objects in a FITS file would be ad-hoc and not helpful.  I think it's fine that this is currently rejected.  But I agree that it should have been handled differently.\n\nI agree with @embray that the best solution here is just to provide a more helpful error message.  In addition `io.ascii` should probably check the column dtypes and make sure they can reliably serialized.  The fact that `None` worked was a bit of an accident and as @embray said not very helpful because it doesn't round trip back to `None`.\n\nAgreed! I wouldn't have posted the issue had there been a clear error message explaining that object X isn't supported by FITS.\n\nWe could also consider skipping unsupported columns and raising a warning.\n\nI would be more inclined to tell the user in the exception which columns need to be removed and how to do it.  But just raising warnings doesn't always get peoples attention, e.g. in the case of processing scripts with lots of output.\n\nNot critical for 1.0 so removing milestone (but if someone feels like implementing it in the next few days, feel free to!)\n",
  "created_at": "2023-03-24T20:31:26Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_heterogeneous_VLA_tables\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_object_tables_with_unified\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_VLA_tables_with_unified\"]",
  "PASS_TO_PASS": "[\"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_simple\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_simple_pathlib\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_simple_meta\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_simple_meta_conflicting\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_simple_noextension\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_with_units[Table]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_with_units[QTable]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_with_custom_units_qtable\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_read_with_unit_aliases[Table]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_read_with_unit_aliases[QTable]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_with_format[Table]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_with_format[QTable]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_masked\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_masked_nan[True]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_masked_nan[False]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_masked_serialize_data_mask\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_read_from_fileobj\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_read_with_nonstandard_units\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_drop_nonstandard_units[Table]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_drop_nonstandard_units[QTable]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_memmap\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_character_as_bytes[False]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_character_as_bytes[True]\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_oned_single_element\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_append\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_write_overwrite\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_mask_nans_on_read\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_mask_null_on_read\", \"astropy/io/fits/tests/test_connect.py::TestSingleTable::test_mask_str_on_read\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_0\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_1[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_1[first]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_2[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_2[second]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_3[3]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_3[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_4\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[3]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[second]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_missing[]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_warning[0]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_warning[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_with_hdu_warning[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_in_last_hdu[0]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_in_last_hdu[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_in_last_hdu[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_0\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_single_table[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_single_table[first]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_single_table[None]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_1[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_1[first]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_2[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_2[second]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_3[3]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_3[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_warning[0]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_warning[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_warning[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[2]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[3]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[second]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_with_hdu_missing[]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_in_last_hdu[0]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_in_last_hdu[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_hdulist_in_last_hdu[third]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_single_hdu[None]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_single_hdu[1]\", \"astropy/io/fits/tests/test_connect.py::TestMultipleHDU::test_read_from_single_hdu[first]\", \"astropy/io/fits/tests/test_connect.py::test_masking_regression_1795\", \"astropy/io/fits/tests/test_connect.py::test_scale_error\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[EN10.5-format_return0]\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[F6.2-format_return1]\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[B5.10-format_return2]\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[E10.5E3-format_return3]\", \"astropy/io/fits/tests/test_connect.py::test_parse_tdisp_format[A21-format_return4]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[G15.4E2-{:15.4g}]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[Z5.10-{:5x}]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[I6.5-{:6d}]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[L8-{:>8}]\", \"astropy/io/fits/tests/test_connect.py::test_fortran_to_python_format[E20.7-{:20.7e}]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[{:3d}-I3]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[3d-I3]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[7.3f-F7.3]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[{:>4}-A4]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[{:7.4f}-F7.4]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[%5.3g-G5.3]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[%10s-A10]\", \"astropy/io/fits/tests/test_connect.py::test_python_to_tdisp[%.4f-F13.4]\", \"astropy/io/fits/tests/test_connect.py::test_logical_python_to_tdisp\", \"astropy/io/fits/tests/test_connect.py::test_bool_column\", \"astropy/io/fits/tests/test_connect.py::test_unicode_column\", \"astropy/io/fits/tests/test_connect.py::test_unit_warnings_read_write\", \"astropy/io/fits/tests/test_connect.py::test_convert_comment_convention\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_qtable_to_table\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_as_one[Table]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_as_one[QTable]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col0]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col1]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col2]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col3]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col4]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col5]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col6]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col7]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col8]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col13]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col14]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col15]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col16]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col17]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[Table-name_col18]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col0]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col1]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col2]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col3]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col4]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col5]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col6]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col7]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col8]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col9]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col10]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col11]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col12]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col13]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col14]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col15]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col16]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col17]\", \"astropy/io/fits/tests/test_connect.py::test_fits_mixins_per_column[QTable-name_col18]\", \"astropy/io/fits/tests/test_connect.py::test_info_attributes_with_no_mixins\", \"astropy/io/fits/tests/test_connect.py::test_round_trip_masked_table_serialize_mask[set_cols]\", \"astropy/io/fits/tests/test_connect.py::test_round_trip_masked_table_serialize_mask[names]\", \"astropy/io/fits/tests/test_connect.py::test_round_trip_masked_table_serialize_mask[class]\", \"astropy/io/fits/tests/test_connect.py::test_meta_not_modified\", \"astropy/io/fits/tests/test_connect.py::test_is_fits_gh_14305\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_constructor_copies_header\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_open[]\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_open[home_is_data]\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_open[home_is_data,\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_binary_table\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_ascii_table\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_endianness\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_column_endianness\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_recarray_to_bintablehdu\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_numpy_ndarray_to_bintablehdu\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_numpy_ndarray_to_bintablehdu_with_unicode\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_new_table_from_recarray\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_new_fitsrec\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_appending_a_column\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_adding_a_column\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_adding_a_column_inplace\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_adding_a_column_to_file\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_removing_a_column_inplace\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_removing_a_column_from_file\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_merge_tables\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_modify_column_attributes\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_multidimension_table_from_numpy_rec_columns\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_mask_array\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_slice_a_row\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_fits_record_len\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_add_data_by_rows\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_assign_multiple_rows_to_table\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_verify_data_references\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_new_table_with_ndarray\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_new_table_with_fits_rec\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_bin_table_hdu_constructor\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_constructor_name_arg\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_constructor_ver_arg\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_unicode_colname\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_bin_table_with_logical_array\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_fits_rec_column_access\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_table_with_zero_width_column\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_string_column_padding\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_multi_dimensional_columns\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_oned_array_single_element\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_bin_table_init_from_string_array_column\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_columns_with_truncating_tdim\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_string_array_round_trip\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_new_table_with_nd_column\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_mismatched_tform_and_tdim\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_tdim_of_size_one\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_slicing\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_array_slicing\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_array_broadcasting\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_array_slicing_readonly\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_dump_load_round_trip[table.fits]\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_dump_load_round_trip[tb.fits]\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_dump_load_array_colums\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_load_guess_format\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_attribute_field_shadowing\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_table_from_bool_fields\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_table_from_bool_fields2\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_bool_column_update\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_missing_tnull\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_blank_field_zero\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_column_array_type_mismatch\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_table_none\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_unncessary_table_load\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_table_from_columns_of_other_table\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_bintable_to_asciitable\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_pickle\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_zero_length_table\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_dim_column_byte_order_mismatch\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_fits_rec_from_existing\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_update_string_column_inplace\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_dump_overwrite\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_pseudo_unsigned_ints\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_column_with_scaling\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_ascii_inttypes\", \"astropy/io/fits/tests/test_table.py::TestTableFunctions::test_ascii_floattypes\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_variable_length_columns\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_extend_variable_length_array\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_variable_length_table_format_pd_from_object_array\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_variable_length_table_format_pd_from_list\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_variable_length_table_format_pa_from_object_array\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_variable_length_table_format_pa_from_list\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_getdata_vla\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_copy_vla\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_vla_with_gap\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_tolist\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_tolist_from_file\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_empty_vla_raw_data\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_multidim_VLA_tables\", \"astropy/io/fits/tests/test_table.py::TestVLATables::test_heterogeneous_VLA_tables\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_format_interpretation\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_zero_precision_float_column\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_array_type_mismatch\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_new_coldefs_with_invalid_seqence\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_coldefs_init_from_array\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_pickle\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_lookup_by_name\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_attribute_change_after_removal\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_x_column_deepcopy\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_p_column_deepcopy\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_verify_keywords\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_verify_start\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_verify_formats[keys0]\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_verify_formats[keys1]\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_verify_formats[keys2]\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_verify_formats[keys3]\", \"astropy/io/fits/tests/test_table.py::TestColumnFunctions::test_column_verify_formats[keys4]\", \"astropy/io/fits/tests/test_table.py::test_regression_5383\", \"astropy/io/fits/tests/test_table.py::test_table_to_hdu\", \"astropy/io/fits/tests/test_table.py::test_regression_scalar_indexing\", \"astropy/io/fits/tests/test_table.py::test_new_column_attributes_preserved\", \"astropy/io/fits/tests/test_table.py::test_empty_table\", \"astropy/io/fits/tests/test_table.py::test_a3dtable\", \"astropy/io/fits/tests/test_table.py::test_invalid_file\", \"astropy/io/fits/tests/test_table.py::test_unit_parse_strict\"]",
  "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.541559",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}