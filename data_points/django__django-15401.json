{
  "repo": "django/django",
  "instance_id": "django__django-15401",
  "base_commit": "11cc227344de06ffd0ad7f07c4e4bdd18851adac",
  "patch": "diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py\n--- a/django/db/models/fields/related_lookups.py\n+++ b/django/db/models/fields/related_lookups.py\n@@ -1,3 +1,5 @@\n+import warnings\n+\n from django.db.models.lookups import (\n     Exact,\n     GreaterThan,\n@@ -7,6 +9,7 @@\n     LessThan,\n     LessThanOrEqual,\n )\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n \n class MultiColSource:\n@@ -40,6 +43,15 @@ def get_normalized_value(value, lhs):\n     from django.db.models import Model\n \n     if isinstance(value, Model):\n+        if value.pk is None:\n+            # When the deprecation ends, replace with:\n+            # raise ValueError(\n+            #     \"Model instances passed to related filters must be saved.\"\n+            # )\n+            warnings.warn(\n+                \"Passing unsaved model instances to related filters is deprecated.\",\n+                RemovedInDjango50Warning,\n+            )\n         value_list = []\n         sources = lhs.output_field.path_infos[-1].target_fields\n         for source in sources:\n",
  "test_patch": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -12,7 +12,8 @@\n from django.db.models.sql.constants import LOUTER\n from django.db.models.sql.where import NothingNode, WhereNode\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n-from django.test.utils import CaptureQueriesContext\n+from django.test.utils import CaptureQueriesContext, ignore_warnings\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n from .models import (\n     FK1,\n@@ -1899,6 +1900,19 @@ def test_queryset_reuse(self):\n         self.assertEqual(Ranking.objects.filter(author__in=authors).get(), self.rank3)\n         self.assertEqual(authors.count(), 1)\n \n+    def test_filter_unsaved_object(self):\n+        # These tests will catch ValueError in Django 5.0 when passing unsaved\n+        # model instances to related filters becomes forbidden.\n+        # msg = \"Model instances passed to related filters must be saved.\"\n+        msg = \"Passing unsaved model instances to related filters is deprecated.\"\n+        company = Company.objects.create(name=\"Django\")\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            Employment.objects.filter(employer=Company(name=\"unsaved\"))\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            Employment.objects.filter(employer__in=[company, Company(name=\"unsaved\")])\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            StaffUser.objects.filter(staff=Staff(name=\"unsaved\"))\n+\n \n class SelectRelatedTests(TestCase):\n     def test_tickets_3045_3288(self):\n@@ -3211,6 +3225,7 @@ def test_exclude_subquery(self):\n             [self.j1, self.j2],\n         )\n \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n     def test_exclude_unsaved_o2o_object(self):\n         jack = Staff.objects.create(name=\"jack\")\n         jack_staff = StaffUser.objects.create(staff=jack)\n@@ -3221,6 +3236,19 @@ def test_exclude_unsaved_o2o_object(self):\n             StaffUser.objects.exclude(staff=unsaved_object), [jack_staff]\n         )\n \n+    def test_exclude_unsaved_object(self):\n+        # These tests will catch ValueError in Django 5.0 when passing unsaved\n+        # model instances to related filters becomes forbidden.\n+        # msg = \"Model instances passed to related filters must be saved.\"\n+        company = Company.objects.create(name=\"Django\")\n+        msg = \"Passing unsaved model instances to related filters is deprecated.\"\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            Employment.objects.exclude(employer=Company(name=\"unsaved\"))\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            Employment.objects.exclude(employer__in=[company, Company(name=\"unsaved\")])\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            StaffUser.objects.exclude(staff=Staff(name=\"unsaved\"))\n+\n \n class ExcludeTest17600(TestCase):\n     \"\"\"\n",
  "problem_statement": "Deprecate passing unsaved objects to related filters.\nDescription\n\t\nConsider this filter:\nFoo.objects.filter(related_obj=bar)\nWhere 'bar' is an unsaved object instance. In Django 1.11, this would always return an empty QuerySet (since no Foo object is related to unsaved 'bar'). In Django 2.0 through 2.2, this is equivalent to doing (which can return a non-empty QuerySet):\nFoo.objects.filter(related_obj=None)\nI found a somewhat related issue that touches on this subject: https://code.djangoproject.com/ticket/27985\nMy questions:\nWhat is the intended behaviour? In the aforementioned issue Simon Charette suggests that unsaved objects should be prevented from being used in related filters. I agree with that.\nIs this documented anywhere? I couldn't find anything. At the very least this should be documented somewhere.\n",
  "hints_text": "Regarding this comment I still think that deprecating passing unsaved objects to related filters is worth doing so I'll accept this ticket on this basis. Mapiarz, would you be interested in ​submitting a patch doing so? It might require a bit of adjustments in the suite but I think that warning on obj.pk is None is the way to go as it's less controversial than obj._state.adding.\n​PR\nAs I ​commented on PR: I don't know how to distinguish between p2.choice_set.all() and Choice.objects.filter(poll=p2), It seems get_normalized_value receives the same (value and lhs) for these both cases. I've also tried to implement it in RelatedLookupMixin.get_prep_lookup based on ​Mariusz comment on PR, but still same problem. the lhs and rhs have the same value in p2.choice_set.all() and Choice.objects.filter(poll=p2) cases.\nCould someone please look at this issue? It looks like related merge request is left unfinished. We recently had pretty severe bug because of this. This is really dangerous behavior.\nPR was closed because of (​Mariusz comment on PR) ticket #7488 - admin panel might use filtering with not saved model. But it is 14 years old ticket and it is worth to check, in current version, if admin still use that.\nAfter investigation of this ticket and #7488 conclusion is: Issue in the #7488 ticket is obsolete. It is about get_querystet code that haven't existed since 2008. Time line is as follow: 19-07-2008 newform-admin was merged with main branch 23-07-2008 #7488 ticket was closed 14-11-2008 the BaseInlineFormSet.get_queryset code (forms/models.py) mentioned in #7488 was deleted in #9076 (not closed yet ???) (https://code.djangoproject.com/ticket/9076#comment:22) and queryset moved to BaseInlineFormSet.__init__ ​https://github.com/django/django/commit/bca14cd3c8685f0c8d6a24583e3de33f94f8910b#diff-360e00ebf46ef996c61729321d5a59992d78be2ad6913fb546394c2817b3837a 28-12-2012 this code was changed #19524 20-11-2013 this code was changed #21472 Now the code is if self.instance.pk is not None: qs = queryset.filter(**{self.fk.name: self.instance}) else: qs = queryset.none() It means that passing of unsaved object to related filter in admin Inlines is already solved. Ticket #9076 might be closed. Apart from this, the test ​https://github.com/django/django/blob/4f8c7fd9d91b35e2c2922de4bb50c8c8066cbbc6/tests/model_inheritance_regress/tests.py#L185 could be renamed and used as it was in ​PR\nReplying to Hasan Ramezani: As I ​commented on PR: I don't know how to distinguish between p2.choice_set.all() and Choice.objects.filter(poll=p2), It seems get_normalized_value receives the same (value and lhs) for these both cases. I've also tried to implement it in RelatedLookupMixin.get_prep_lookup based on ​Mariusz comment on PR, but still same problem. the lhs and rhs have the same value in p2.choice_set.all() and Choice.objects.filter(poll=p2) cases. After looking at code and trying implement yours solution, my conclusion is: it is connected with #19580, if FK raises ValueError like M2M does it will open door to fix this without a struggle how to distinguish between p2.choice_set.all() and Choice.objects.filter(poll=p2) because first case will raise ValueError before filter is evaluated.",
  "created_at": "2022-02-05T20:16:29Z",
  "version": "4.1",
  "FAIL_TO_PASS": "[\"test_filter_unsaved_object (queries.tests.Queries5Tests)\", \"test_exclude_unsaved_object (queries.tests.ExcludeTests)\"]",
  "PASS_TO_PASS": "[\"test_ticket14729 (queries.tests.RawQueriesTests)\", \"test_ticket_24278 (queries.tests.TestTicket24279)\", \"Generating the query string doesn't alter the query's state\", \"test_datetimes_invalid_field (queries.tests.Queries3Tests)\", \"test_ticket22023 (queries.tests.Queries3Tests)\", \"test_ticket7107 (queries.tests.Queries3Tests)\", \"test_ticket15786 (queries.tests.Exclude15786)\", \"test_ticket_14056 (queries.tests.Ticket14056Tests)\", \"test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)\", \"test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)\", \"test_invalid_values (queries.tests.TestInvalidValuesRelation)\", \"test_in_list_limit (queries.tests.ConditionalTests)\", \"test_infinite_loop (queries.tests.ConditionalTests)\", \"test_ticket_21203 (queries.tests.Ticket21203Tests)\", \"test_ticket7778 (queries.tests.SubclassFKTests)\", \"test_21001 (queries.tests.EmptyStringsAsNullTest)\", \"test_direct_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_joined_exclude (queries.tests.EmptyStringsAsNullTest)\", \"test_join_already_in_query (queries.tests.NullableRelOrderingTests)\", \"test_ticket10028 (queries.tests.NullableRelOrderingTests)\", \"test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)\", \"test_ticket_19151 (queries.tests.EmptyQuerySetTests)\", \"test_values_subquery (queries.tests.EmptyQuerySetTests)\", \"test_ticket7872 (queries.tests.DisjunctiveFilterTests)\", \"test_ticket8283 (queries.tests.DisjunctiveFilterTests)\", \"test_tickets_3045_3288 (queries.tests.SelectRelatedTests)\", \"Can create an instance of a model with only the PK field (#17056).\\\"\", \"test_ticket_12807 (queries.tests.Ticket12807Tests)\", \"test_ticket8597 (queries.tests.ComparisonTests)\", \"test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)\", \"test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)\", \"test_empty_nodes (queries.tests.WhereNodeTest)\", \"test_ticket7371 (queries.tests.CustomPkTests)\", \"test_ticket_19964 (queries.tests.RelabelCloneTest)\", \"test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)\", \"test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)\", \"test_primary_key (queries.tests.IsNullTests)\", \"test_to_field (queries.tests.IsNullTests)\", \"test_double_exclude (queries.tests.NullInExcludeTest)\", \"test_null_in_exclude_qs (queries.tests.NullInExcludeTest)\", \"test_exists (queries.tests.ExistsSql)\", \"test_ticket_18414 (queries.tests.ExistsSql)\", \"test_ticket_22429 (queries.tests.Ticket22429Tests)\", \"test_ticket_7302 (queries.tests.EscapingTests)\", \"test_double_subquery_in (queries.tests.DoubleInSubqueryTests)\", \"test_values_in_subquery (queries.tests.ValuesSubqueryTests)\", \"test_ticket10432 (queries.tests.GeneratorExpressionTests)\", \"Subquery table names should be quoted.\", \"test_invalid_order_by (queries.tests.QuerySetExceptionTests)\", \"test_invalid_order_by_raw_column_alias (queries.tests.QuerySetExceptionTests)\", \"test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)\", \"test_iter_exceptions (queries.tests.QuerySetExceptionTests)\", \"test_annotated_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_ordering (queries.tests.QuerysetOrderedTests)\", \"test_annotated_values_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)\", \"test_empty_queryset (queries.tests.QuerysetOrderedTests)\", \"test_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)\", \"test_order_by_extra (queries.tests.QuerysetOrderedTests)\", \"test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)\", \"test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)\", \"test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)\", \"test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)\", \"test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)\", \"test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)\", \"test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)\", \"test_ticket_20788 (queries.tests.Ticket20788Tests)\", \"test_ticket_18785 (queries.tests.Ticket18785Tests)\", \"If a queryset is already evaluated, it can still be used as a query arg.\", \"Cloning a queryset does not get out of hand. While complete\", \"Tests QuerySet ORed combining in exclude subquery case.\", \"test_ticket_20955 (queries.tests.Ticket20955Tests)\", \"test_ticket_23605 (queries.tests.Ticket23605Tests)\", \"test_fk_reuse (queries.tests.JoinReuseTest)\", \"test_fk_reuse_annotation (queries.tests.JoinReuseTest)\", \"test_fk_reuse_disjunction (queries.tests.JoinReuseTest)\", \"test_fk_reuse_order_by (queries.tests.JoinReuseTest)\", \"test_fk_reuse_select_related (queries.tests.JoinReuseTest)\", \"When a trimmable join is specified in the query (here school__), the\", \"test_revfk_noreuse (queries.tests.JoinReuseTest)\", \"test_revo2o_reuse (queries.tests.JoinReuseTest)\", \"test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_invalid_index (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)\", \"hint: inverting your ordering might do what you need\", \"test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)\", \"When passing proxy model objects, child objects, or parent objects,\", \"ValueQuerySets are not checked for compatibility with the lookup field.\", \"A ValueError is raised when the incorrect object type is passed to a\", \"test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)\", \"test_ticket_12823 (queries.tests.ManyToManyExcludeTest)\", \"test_ticket12239 (queries.tests.Queries2Tests)\", \"test_ticket4289 (queries.tests.Queries2Tests)\", \"test_ticket7759 (queries.tests.Queries2Tests)\", \"test_conflicting_aliases_during_combine (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_both_slice_and_ordering (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_lhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_or_with_rhs_slice (queries.tests.QuerySetBitwiseOperationTests)\", \"test_subquery_aliases (queries.tests.QuerySetBitwiseOperationTests)\", \"test_col_alias_quoted (queries.tests.Queries6Tests)\", \"test_distinct_ordered_sliced_subquery_aggregation (queries.tests.Queries6Tests)\", \"test_multiple_columns_with_the_same_name_slice (queries.tests.Queries6Tests)\", \"test_nested_queries_sql (queries.tests.Queries6Tests)\", \"test_parallel_iterators (queries.tests.Queries6Tests)\", \"test_ticket3739 (queries.tests.Queries6Tests)\", \"test_ticket_11320 (queries.tests.Queries6Tests)\", \"test_tickets_8921_9188 (queries.tests.Queries6Tests)\", \"This should exclude Orders which have some items with status 1\", \"Using exclude(condition) and exclude(Q(condition)) should\", \"test_in_query (queries.tests.ToFieldTests)\", \"test_in_subquery (queries.tests.ToFieldTests)\", \"test_nested_in_subquery (queries.tests.ToFieldTests)\", \"test_recursive_fk (queries.tests.ToFieldTests)\", \"test_recursive_fk_reverse (queries.tests.ToFieldTests)\", \"test_reverse_in (queries.tests.ToFieldTests)\", \"test_single_object (queries.tests.ToFieldTests)\", \"test_single_object_reverse (queries.tests.ToFieldTests)\", \"test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)\", \"test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)\", \"test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)\", \"test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)\", \"test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)\", \"test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)\", \"test_field_error_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)\", \"test_flat_values_list (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_bad_field_name (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_expression_with_default_alias (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_flat (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_with_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_list_without_fields (queries.tests.ValuesQuerysetTests)\", \"test_named_values_pickle (queries.tests.ValuesQuerysetTests)\", \"test_distinct_ordered_sliced_subquery (queries.tests.SubqueryTests)\", \"Subselects honor any manual ordering\", \"Related objects constraints can safely contain sliced subqueries.\", \"Slice a query that has a sliced subquery\", \"Delete queries can safely contain sliced subqueries\", \"test_AB_ACB (queries.tests.UnionTests)\", \"test_A_AB (queries.tests.UnionTests)\", \"test_A_AB2 (queries.tests.UnionTests)\", \"test_BAB_BAC (queries.tests.UnionTests)\", \"test_BAB_BACB (queries.tests.UnionTests)\", \"test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)\", \"test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)\", \"test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)\", \"test_extra_select_literal_percent_s (queries.tests.Queries5Tests)\", \"test_ordering (queries.tests.Queries5Tests)\", \"test_queryset_reuse (queries.tests.Queries5Tests)\", \"test_ticket5261 (queries.tests.Queries5Tests)\", \"test_ticket7045 (queries.tests.Queries5Tests)\", \"test_ticket7256 (queries.tests.Queries5Tests)\", \"test_ticket9848 (queries.tests.Queries5Tests)\", \"test_exclude_multivalued_exists (queries.tests.ExcludeTests)\", \"test_exclude_nullable_fields (queries.tests.ExcludeTests)\", \"test_exclude_reverse_fk_field_ref (queries.tests.ExcludeTests)\", \"test_exclude_subquery (queries.tests.ExcludeTests)\", \"test_exclude_unsaved_o2o_object (queries.tests.ExcludeTests)\", \"test_exclude_with_circular_fk_relation (queries.tests.ExcludeTests)\", \"test_subquery_exclude_outerref (queries.tests.ExcludeTests)\", \"test_ticket14511 (queries.tests.ExcludeTests)\", \"test_to_field (queries.tests.ExcludeTests)\", \"test_combine_join_reuse (queries.tests.Queries4Tests)\", \"test_combine_or_filter_reuse (queries.tests.Queries4Tests)\", \"test_filter_reverse_non_integer_pk (queries.tests.Queries4Tests)\", \"test_join_reuse_order (queries.tests.Queries4Tests)\", \"test_order_by_resetting (queries.tests.Queries4Tests)\", \"test_order_by_reverse_fk (queries.tests.Queries4Tests)\", \"test_ticket10181 (queries.tests.Queries4Tests)\", \"test_ticket11811 (queries.tests.Queries4Tests)\", \"test_ticket14876 (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_filter_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)\", \"test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)\", \"test_ticket24525 (queries.tests.Queries4Tests)\", \"test_ticket7095 (queries.tests.Queries4Tests)\", \"test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)\", \"Valid query should be generated when fields fetched from joined tables\", \"test_deferred_load_qs_pickling (queries.tests.Queries1Tests)\", \"test_double_exclude (queries.tests.Queries1Tests)\", \"test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)\", \"test_exclude (queries.tests.Queries1Tests)\", \"test_exclude_in (queries.tests.Queries1Tests)\", \"test_excluded_intermediary_m2m_table_joined (queries.tests.Queries1Tests)\", \"test_field_with_filterable (queries.tests.Queries1Tests)\", \"get() should clear ordering for optimization purposes.\", \"test_heterogeneous_qs_combination (queries.tests.Queries1Tests)\", \"test_lookup_constraint_fielderror (queries.tests.Queries1Tests)\", \"test_negate_field (queries.tests.Queries1Tests)\", \"test_nested_exclude (queries.tests.Queries1Tests)\", \"This test is related to the above one, testing that there aren't\", \"test_order_by_rawsql (queries.tests.Queries1Tests)\", \"test_order_by_tables (queries.tests.Queries1Tests)\", \"test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)\", \"test_subquery_condition (queries.tests.Queries1Tests)\", \"test_ticket10205 (queries.tests.Queries1Tests)\", \"test_ticket10432 (queries.tests.Queries1Tests)\", \"test_ticket1050 (queries.tests.Queries1Tests)\", \"test_ticket10742 (queries.tests.Queries1Tests)\", \"Meta.ordering=None works the same as Meta.ordering=[]\", \"test_ticket1801 (queries.tests.Queries1Tests)\", \"test_ticket19672 (queries.tests.Queries1Tests)\", \"test_ticket2091 (queries.tests.Queries1Tests)\", \"test_ticket2253 (queries.tests.Queries1Tests)\", \"test_ticket2306 (queries.tests.Queries1Tests)\", \"test_ticket2400 (queries.tests.Queries1Tests)\", \"test_ticket2496 (queries.tests.Queries1Tests)\", \"test_ticket3037 (queries.tests.Queries1Tests)\", \"test_ticket3141 (queries.tests.Queries1Tests)\", \"test_ticket4358 (queries.tests.Queries1Tests)\", \"test_ticket4464 (queries.tests.Queries1Tests)\", \"test_ticket4510 (queries.tests.Queries1Tests)\", \"test_ticket6074 (queries.tests.Queries1Tests)\", \"test_ticket6154 (queries.tests.Queries1Tests)\", \"test_ticket6981 (queries.tests.Queries1Tests)\", \"test_ticket7076 (queries.tests.Queries1Tests)\", \"test_ticket7096 (queries.tests.Queries1Tests)\", \"test_ticket7155 (queries.tests.Queries1Tests)\", \"test_ticket7181 (queries.tests.Queries1Tests)\", \"test_ticket7235 (queries.tests.Queries1Tests)\", \"test_ticket7277 (queries.tests.Queries1Tests)\", \"test_ticket7323 (queries.tests.Queries1Tests)\", \"test_ticket7378 (queries.tests.Queries1Tests)\", \"test_ticket7791 (queries.tests.Queries1Tests)\", \"test_ticket7813 (queries.tests.Queries1Tests)\", \"test_ticket8439 (queries.tests.Queries1Tests)\", \"test_ticket9926 (queries.tests.Queries1Tests)\", \"test_ticket9985 (queries.tests.Queries1Tests)\", \"test_ticket9997 (queries.tests.Queries1Tests)\", \"test_ticket_10790_1 (queries.tests.Queries1Tests)\", \"test_ticket_10790_2 (queries.tests.Queries1Tests)\", \"test_ticket_10790_3 (queries.tests.Queries1Tests)\", \"test_ticket_10790_4 (queries.tests.Queries1Tests)\", \"test_ticket_10790_5 (queries.tests.Queries1Tests)\", \"test_ticket_10790_6 (queries.tests.Queries1Tests)\", \"test_ticket_10790_7 (queries.tests.Queries1Tests)\", \"test_ticket_10790_8 (queries.tests.Queries1Tests)\", \"test_ticket_10790_combine (queries.tests.Queries1Tests)\", \"test_ticket_20250 (queries.tests.Queries1Tests)\", \"test_tickets_1878_2939 (queries.tests.Queries1Tests)\", \"test_tickets_2076_7256 (queries.tests.Queries1Tests)\", \"test_tickets_2080_3592 (queries.tests.Queries1Tests)\", \"test_tickets_2874_3002 (queries.tests.Queries1Tests)\", \"test_tickets_4088_4306 (queries.tests.Queries1Tests)\", \"test_tickets_5321_7070 (queries.tests.Queries1Tests)\", \"test_tickets_5324_6704 (queries.tests.Queries1Tests)\", \"test_tickets_6180_6203 (queries.tests.Queries1Tests)\", \"test_tickets_7087_12242 (queries.tests.Queries1Tests)\", \"test_tickets_7204_7506 (queries.tests.Queries1Tests)\", \"test_tickets_7448_7707 (queries.tests.Queries1Tests)\"]",
  "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.728273",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}