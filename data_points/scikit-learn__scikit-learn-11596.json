{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-11596",
  "base_commit": "51407623e4f491f00e3b465626dd5c4b55860bd0",
  "patch": "diff --git a/sklearn/__init__.py b/sklearn/__init__.py\n--- a/sklearn/__init__.py\n+++ b/sklearn/__init__.py\n@@ -62,6 +62,8 @@\n else:\n     from . import __check_build\n     from .base import clone\n+    from .utils._show_versions import show_versions\n+\n     __check_build  # avoid flakes unused variable error\n \n     __all__ = ['calibration', 'cluster', 'covariance', 'cross_decomposition',\n@@ -74,7 +76,8 @@\n                'preprocessing', 'random_projection', 'semi_supervised',\n                'svm', 'tree', 'discriminant_analysis', 'impute', 'compose',\n                # Non-modules:\n-               'clone', 'get_config', 'set_config', 'config_context']\n+               'clone', 'get_config', 'set_config', 'config_context',\n+               'show_versions']\n \n \n def setup_module(module):\ndiff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nnew file mode 100644\n--- /dev/null\n+++ b/sklearn/utils/_show_versions.py\n@@ -0,0 +1,119 @@\n+\"\"\"\n+Utility methods to print system info for debugging\n+\n+adapted from :func:`pandas.show_versions`\n+\"\"\"\n+# License: BSD 3 clause\n+\n+import platform\n+import sys\n+import importlib\n+\n+\n+def _get_sys_info():\n+    \"\"\"System information\n+\n+    Return\n+    ------\n+    sys_info : dict\n+        system and Python version information\n+\n+    \"\"\"\n+    python = sys.version.replace('\\n', ' ')\n+\n+    blob = [\n+        (\"python\", python),\n+        ('executable', sys.executable),\n+        (\"machine\", platform.platform()),\n+    ]\n+\n+    return dict(blob)\n+\n+\n+def _get_deps_info():\n+    \"\"\"Overview of the installed version of main dependencies\n+\n+    Returns\n+    -------\n+    deps_info: dict\n+        version information on relevant Python libraries\n+\n+    \"\"\"\n+    deps = [\n+        \"pip\",\n+        \"setuptools\",\n+        \"sklearn\",\n+        \"numpy\",\n+        \"scipy\",\n+        \"Cython\",\n+        \"pandas\",\n+    ]\n+\n+    def get_version(module):\n+        return module.__version__\n+\n+    deps_info = {}\n+\n+    for modname in deps:\n+        try:\n+            if modname in sys.modules:\n+                mod = sys.modules[modname]\n+            else:\n+                mod = importlib.import_module(modname)\n+            ver = get_version(mod)\n+            deps_info[modname] = ver\n+        except ImportError:\n+            deps_info[modname] = None\n+\n+    return deps_info\n+\n+\n+def _get_blas_info():\n+    \"\"\"Information on system BLAS\n+\n+    Uses the `scikit-learn` builtin method\n+    :func:`sklearn._build_utils.get_blas_info` which may fail from time to time\n+\n+    Returns\n+    -------\n+    blas_info: dict\n+        system BLAS information\n+\n+    \"\"\"\n+    from .._build_utils import get_blas_info\n+\n+    cblas_libs, blas_dict = get_blas_info()\n+\n+    macros = ['{key}={val}'.format(key=a, val=b)\n+              for (a, b) in blas_dict.get('define_macros', [])]\n+\n+    blas_blob = [\n+        ('macros', ', '.join(macros)),\n+        ('lib_dirs', ':'.join(blas_dict.get('library_dirs', ''))),\n+        ('cblas_libs', ', '.join(cblas_libs)),\n+    ]\n+\n+    return dict(blas_blob)\n+\n+\n+def show_versions():\n+    \"Print useful debugging information\"\n+\n+    sys_info = _get_sys_info()\n+    deps_info = _get_deps_info()\n+    blas_info = _get_blas_info()\n+\n+    print('\\nSystem')\n+    print('------')\n+    for k, stat in sys_info.items():\n+        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n+\n+    print('\\nBLAS')\n+    print('----')\n+    for k, stat in blas_info.items():\n+        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n+\n+    print('\\nPython deps')\n+    print('-----------')\n+    for k, stat in deps_info.items():\n+        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_print_versions.py b/sklearn/utils/tests/test_print_versions.py\nnew file mode 100644\n--- /dev/null\n+++ b/sklearn/utils/tests/test_print_versions.py\n@@ -0,0 +1,32 @@\n+\n+from sklearn.utils._show_versions import _get_sys_info\n+from sklearn.utils._show_versions import _get_deps_info\n+from sklearn.utils._show_versions import show_versions\n+\n+\n+def test_get_sys_info():\n+    sys_info = _get_sys_info()\n+\n+    assert 'python' in sys_info\n+    assert 'executable' in sys_info\n+    assert 'machine' in sys_info\n+\n+\n+def test_get_deps_info():\n+    deps_info = _get_deps_info()\n+\n+    assert 'pip' in deps_info\n+    assert 'setuptools' in deps_info\n+    assert 'sklearn' in deps_info\n+    assert 'numpy' in deps_info\n+    assert 'scipy' in deps_info\n+    assert 'Cython' in deps_info\n+    assert 'pandas' in deps_info\n+\n+\n+def test_show_versions_with_blas(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'python' in out\n+    assert 'numpy' in out\n+    assert 'BLAS' in out\n",
  "problem_statement": "Add sklearn.show_versions() similar to pandas.show_versions (with numpy blas binding info)\nSome numeric issues are related to the specific blas that numpy is using. I'm wondering if it makes sense to add the relevant ``system_info`` invocations to the template to make it easier for people to report.\n",
  "hints_text": "I don't see why not!\n\n@lesteve suggested we could add something like `pandas.show_versions()` that would print all the relevant information for debugging. For instance, on my laptop, I get,\r\n\r\n<details>\r\n\r\n```\r\n>>> pd.show_versions()\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.6.5.final.0\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 4.11.6-gentoo\r\nmachine: x86_64\r\nprocessor: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_GB.UTF-8\r\nLOCALE: en_GB.UTF-8\r\n\r\npandas: 0.23.0\r\npytest: 3.5.1\r\npip: 10.0.1\r\nsetuptools: 39.1.0\r\nCython: 0.27.3\r\nnumpy: 1.14.3\r\nscipy: 1.1.0\r\npyarrow: None\r\nxarray: None\r\nIPython: 6.4.0\r\nsphinx: None\r\npatsy: None\r\ndateutil: 2.7.3\r\npytz: 2018.4\r\nblosc: None\r\nbottleneck: None\r\ntables: None\r\nnumexpr: None\r\nfeather: None\r\nmatplotlib: 2.2.2\r\nopenpyxl: None\r\nxlrd: None\r\nxlwt: None\r\nxlsxwriter: None\r\nlxml: None\r\nbs4: None\r\nhtml5lib: None\r\nsqlalchemy: None\r\npymysql: None\r\npsycopg2: None\r\njinja2: None\r\ns3fs: None\r\nfastparquet: None\r\npandas_gbq: None\r\npandas_datareader: None\r\n```\r\n</details>\r\n\r\nwe certainly don't care about all the dependencies that pandas might, but I agree that for scikit-learn, having  e.g.\r\n - BLAS information\r\n - whether \"conda\" is in path\r\n - with https://github.com/scikit-learn/scikit-learn/pull/11166 whether the bundled or unbundled joblib is used\r\n \r\nwould be definitely useful for debuging. It's more practical to have small function for those, than a copy passable snippet (particularly if it becomes more complex).\r\n\r\nTagging this for v0.20 as this would be fairly easy to do, and help with the maintenance after the release..\r\n\n+10 about `sklearn.show_versions()` I edited the issue title.\nI think what we want to do:\r\n* add sklearn.show_versions with similar info as pandas.show_versions and whatever we ask for in the ISSUE_TEMPLATE.md\r\n* modify ISSUE_TEMPLATE.md\r\n* amend the docs, this git grep can be handy:\r\n```\r\n❯ git grep platform.platform\r\nCONTRIBUTING.md:  import platform; print(platform.platform())\r\nISSUE_TEMPLATE.md:import platform; print(platform.platform())\r\ndoc/developers/contributing.rst:     import platform; print(platform.platform())\r\ndoc/developers/tips.rst:        import platform; print(platform.platform())\r\nsklearn/feature_extraction/dict_vectorizer.py:            \" include the output from platform.platform() in your bug report\")\r\n```\nThis might be of help\r\n```py\r\nfrom sklearn._build_utils import get_blas_info\r\n```\nThe problem with doing this is that it won't be runnable before 0.20!​\n\nHi guys, I'm looking at this right now.\r\n\r\nFew questions to help me get this done:\r\n\r\n- what are the relevant information from the `get_blas_info` that need to be printed ? \r\n  unfortunately the compilation information is printed (probably through `cythonize`) but not returned.\r\n- shall I restrict the printed python libraries to the main ones ? \r\n  I'd suggest `numpy`, `scipy`, `pandas`, `matplotlib`, `Cython`, `pip`, `setuptools`, `pytest`.\r\n- is `sklearn/utils` the right place to put it ?\n> The problem with doing this is that it won't be runnable before 0.20!​\r\n\r\nGood point we can modify only the rst doc for now and delay the changes in .md until the release.\r\n\r\nNot an expert, but I think all the `get_blas_info` is useful. About the dependencies, I am not sure look at what pandas is doing and do something similar (they have things about sys.executable, 32bit vs 64bit, bitness which may be useful). It would be good to keep it as short as possible. For example I am not convinced `pytest` makes sense.\r\n\r\n> is sklearn/utils the right place to put it ?\r\n\r\nYou can probably put the code in `sklearn/utils`. I would be in favour of making it accessible at from the root namespace so that you can do `from sklearn import show_versions`\r\n\r\n\r\n\r\n\n+1 for adding show_versions.\r\nMaybe optionally include the blas stuff?",
  "created_at": "2018-07-17T15:42:55Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/utils/tests/test_print_versions.py::test_get_sys_info\", \"sklearn/utils/tests/test_print_versions.py::test_get_deps_info\", \"sklearn/utils/tests/test_print_versions.py::test_show_versions_with_blas\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "_download_metadata": {
    "downloaded_at": "2025-10-07T21:23:30.963436",
    "dataset_name": "swe-bench",
    "split": "test",
    "downloader_version": "0.1.0"
  }
}